{"cell_type":{"fb61d1f2":"code","91d28e70":"code","278fa1e7":"code","bcb1b90d":"code","b2b82937":"code","c8a2eea7":"code","8f6e0335":"code","53d87487":"markdown","f9e88e7c":"markdown","856b7bab":"markdown"},"source":{"fb61d1f2":"!pip install ..\/input\/shopee-external-models\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/shopee-external-models\/efficientnet-1.1.0-py3-none-any.whl\nimport numpy as np\nimport pandas as pd\nimport gc\nimport matplotlib.pyplot as plt\nimport cudf\nimport cuml\nimport cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml.neighbors import NearestNeighbors\nimport tensorflow as tf\nimport efficientnet.tfkeras as efn\n\nfrom tqdm.notebook import tqdm\nimport math\nfrom shutil import copyfile\nimport tensorflow_hub as hub\n# from shutil import copyfile\n# copyfile(src = \"..\/input\/bert-baseline\/tokenization.py\", dst = \"..\/working\/tokenization.py\")\n# import tokenization\n# import tensorflow_hub as hub","91d28e70":"# For tf.dataset\nAUTO = tf.data.experimental.AUTOTUNE\n\n# Configuration\nBATCH_SIZE = 8\nIMAGE_SIZE = [512, 512]\n# Seed\nSEED = 42\n# Verbosity\nVERBOSE = 1\n# Number of classes\nN_CLASSES = 11014","278fa1e7":"# RESTRICT TENSORFLOW TO 2GB OF GPU RAM\n# SO THAT WE HAVE 14GB RAM FOR RAPIDS\nLIMIT = 4.0\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        tf.config.experimental.set_virtual_device_configuration(\n            gpus[0],\n            [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024*LIMIT)])\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n        #print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n    except RuntimeError as e:\n        print(e)\nprint('We will restrict TensorFlow to max %iGB GPU RAM'%LIMIT)\nprint('then RAPIDS can use %iGB GPU RAM'%(16-LIMIT))","bcb1b90d":"# Flag to get cv score\nGET_CV = False\n# Flag to check ram allocations (debug)\nCHECK_SUB = False\n\ndf = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\n# If we are comitting, replace train set for test set and dont get cv\nif len(df) > 3:\n    GET_CV = False\ndel df\n# Function to get our f1 score\ndef f1_score(y_true, y_pred):\n    y_true = y_true.apply(lambda x: set(x.split()))\n    y_pred = y_pred.apply(lambda x: set(x.split()))\n    intersection = np.array([len(x[0] & x[1]) for x in zip(y_true, y_pred)])\n    len_y_pred = y_pred.apply(lambda x: len(x)).values\n    len_y_true = y_true.apply(lambda x: len(x)).values\n    f1 = 2 * intersection \/ (len_y_pred + len_y_true)\n    return f1\n\n# Function to combine predictions\n#row['image_predictions_1'], row['image_predictions_2'], row['image_predictions_3'],row['image_predictions_4']\ndef combine_predictions(row):\n    x = np.concatenate([row['image_predictions'], row['text_predictions']])\n    return ' '.join( np.unique(x) )\n\ndef combine_predictions_test(row):\n    x = np.concatenate([row['image_predictions_0'], row['image_predictions_1'], \n                        row['image_predictions_2'], row['text_predictions_0'], \n                       row['text_predictions_1']])\n    return ' '.join( np.unique(x) )\n\n# Function to read out dataset\ndef read_dataset(fold):\n    if GET_CV:\n        df = pd.read_csv('..\/input\/shopee-384x384-tfrecs\/train.csv')\n        if fold==10:\n            df= df\n        else:\n            df = df.loc[df['fold']==fold]   \n            \n        if CHECK_SUB:\n            df = pd.concat([df, df], axis = 0)\n            df.reset_index(drop = True, inplace = True)\n        df_cu = cudf.DataFrame(df)\n#         df_cu = df\n        image_paths = '..\/input\/shopee-product-matching\/train_images\/' + df['image_name']\n    else:\n        df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')#.iloc[:15000]\n        df_cu = cudf.DataFrame(df)\n#         df_cu = df\n        image_paths = '..\/input\/shopee-product-matching\/test_images\/' + df['image']\n        \n    return df, df_cu, image_paths\n\n# Function to decode our images\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels = 3)\n    image = tf.image.resize(image, IMAGE_SIZE)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    return image\n\n# Function to read our test image and return image\ndef read_image(image):\n    image = tf.io.read_file(image)\n    image = decode_image(image)\n    return image\n\n# Function to get our dataset that read images\ndef get_dataset(image):\n    dataset = tf.data.Dataset.from_tensor_slices(image)\n    dataset = dataset.map(read_image, num_parallel_calls = AUTO)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Arcmarginproduct class keras layer\nclass ArcMarginProduct(tf.keras.layers.Layer):\n    '''\n    Implements large margin arc distance.\n\n    Reference:\n        https:\/\/arxiv.org\/pdf\/1801.07698.pdf\n        https:\/\/github.com\/lyakaap\/Landmark2019-1st-and-3rd-Place-Solution\/\n            blob\/master\/src\/modeling\/metric_learning.py\n    '''\n    def __init__(self, n_classes, s=30, m=0.50, easy_margin=False,\n                 ls_eps=0.0, **kwargs):\n\n        super(ArcMarginProduct, self).__init__(**kwargs)\n\n        self.n_classes = n_classes\n        self.s = s\n        self.m = m\n        self.ls_eps = ls_eps\n        self.easy_margin = easy_margin\n        self.cos_m = tf.math.cos(m)\n        self.sin_m = tf.math.sin(m)\n        self.th = tf.math.cos(math.pi - m)\n        self.mm = tf.math.sin(math.pi - m) * m\n\n    def get_config(self):\n\n        config = super().get_config().copy()\n        config.update({\n            'n_classes': self.n_classes,\n            's': self.s,\n            'm': self.m,\n            'ls_eps': self.ls_eps,\n            'easy_margin': self.easy_margin,\n        })\n        return config\n\n    def build(self, input_shape):\n        super(ArcMarginProduct, self).build(input_shape[0])\n\n        self.W = self.add_weight(\n            name='W',\n            shape=(int(input_shape[0][-1]), self.n_classes),\n            initializer='glorot_uniform',\n            dtype='float32',\n            trainable=True,\n            regularizer=None)\n\n    def call(self, inputs):\n        X, y = inputs\n        y = tf.cast(y, dtype=tf.int32)\n        cosine = tf.matmul(\n            tf.math.l2_normalize(X, axis=1),\n            tf.math.l2_normalize(self.W, axis=0)\n        )\n        sine = tf.math.sqrt(1.0 - tf.math.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = tf.where(cosine > 0, phi, cosine)\n        else:\n            phi = tf.where(cosine > self.th, phi, cosine - self.mm)\n        one_hot = tf.cast(\n            tf.one_hot(y, depth=self.n_classes),\n            dtype=cosine.dtype\n        )\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.n_classes\n\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.s\n        return output\n\n\n# Function to get the embeddings of our images with the fine-tuned model\ndef get_image_embeddings(model_names, image_paths, model_path):\n    embeds = []\n    \n    if model_names[0]=='EfficientNetB3':\n        N_CLASSES = 11011\n    else:\n        N_CLASSES = 11014\n        \n    margin = ArcMarginProduct(\n            n_classes = N_CLASSES, \n            s = 30, \n            m = 0.5, \n            name='head\/arc_margin', \n            dtype='float32'\n            )\n\n    inp = tf.keras.layers.Input(shape = (*IMAGE_SIZE, 3), name = 'inp1')\n    label = tf.keras.layers.Input(shape = (), name = 'inp2')\n    if model_names[0]=='EfficientNetB4':\n        x = efn.EfficientNetB4(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB5':\n        x = efn.EfficientNetB5(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB0':\n        x = efn.EfficientNetB0(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB6':\n        x = efn.EfficientNetB6(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB7':\n        x = efn.EfficientNetB7(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB3':\n        x = efn.EfficientNetB3(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB2':\n        x = efn.EfficientNetB2(weights = None, include_top = False)(inp)\n    elif model_names[0]=='EfficientNetB1':\n        x = efn.EfficientNetB1(weights = None, include_top = False)(inp)\n    elif model_names[0]=='DenseNet201':\n        x = DenseNet201(weights = None, include_top = False)(inp)\n    elif model_names[0]=='ResNet101V2':\n        x = DenseNet201(weights = None, include_top = False)(inp)\n    elif model_names[0]=='InceptionResNetV2':\n        x = DenseNet201(weights = None, include_top = False)(inp)\n\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    \n    if len(model_names)==2:\n        if model_names[1]=='EfficientNetB4':\n            x1 = efn.EfficientNetB4(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB5':\n            x1 = efn.EfficientNetB5(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB0':\n            x1 = efn.EfficientNetB0(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB6':\n            x1 = efn.EfficientNetB6(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB7':\n            x1 = efn.EfficientNetB7(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB3':\n            x1 = efn.EfficientNetB3(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB2':\n            x1 = efn.EfficientNetB2(weights = None, include_top = False)(inp)\n        elif model_names[1]=='EfficientNetB1':\n            x1 = efn.EfficientNetB1(weights = None, include_top = False)(inp)\n        elif model_names[1]=='DenseNet201':\n            x1 = DenseNet201(weights = None, include_top = False)(inp)\n        elif model_names[1]=='ResNet101V2':\n            x1 = DenseNet201(weights = None, include_top = False)(inp)\n        elif model_names[1]=='InceptionResNetV2':\n            x1 = DenseNet201(weights = None, include_top = False)(inp)\n\n        x1 = tf.keras.layers.GlobalAveragePooling2D()(x1)\n        x  = tf.keras.layers.Concatenate()([x, x1])\n    \n    x = margin([x, label])\n        \n    output = tf.keras.layers.Softmax(dtype='float32')(x)\n\n    model = tf.keras.models.Model(inputs = [inp, label], outputs = [output])\n    model.load_weights(model_path)\n    model = tf.keras.models.Model(inputs = model.input[0], outputs = model.layers[-4].output)\n    chunk = 5000\n    iterator = np.arange(np.ceil(len(df) \/ chunk))\n    for j in tqdm(iterator):\n        a = int(j * chunk)\n        b = int((j + 1) * chunk)\n        image_dataset = get_dataset(image_paths[a:b])\n        image_embeddings = model.predict(image_dataset)\n        embeds.append(image_embeddings)\n    del model\n    image_embeddings = np.concatenate(embeds)\n    print(f'Our image embeddings shape is {image_embeddings.shape}')\n    del embeds\n    gc.collect()\n    return image_embeddings\n\n\ndef get_text_predictions(df, post_dict, max_features = 25_000):\n    \n    model = TfidfVectorizer(stop_words = 'english', binary = True, max_features = max_features)\n    text_embeddings = model.fit_transform(df_cu['title']).toarray()\n    preds = []\n    CHUNK = 1024*4\n    \n    n = 50 if len(df)>3 else 2\n\n    print('Finding similar titles...')\n    CTS = len(df)\/\/CHUNK\n    if len(df)%CHUNK!=0: CTS += 1\n    for j in range( CTS ):\n\n        a = j*CHUNK\n        b = (j+1)*CHUNK\n        b = min(b,len(df))\n        print('chunk',a,'to',b)\n\n        # COSINE SIMILARITY DISTANCE\n        cts = cupy.matmul( text_embeddings, text_embeddings[a:b].T).T\n        \n        for k in range(b-a):\n            IDX = cupy.where(cts[k,]>0.75)[0]\n            o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            for p in o:\n                if p in post_dict:\n                    post_dict[p].append(a+k)\n                else:\n                    post_dict[p]=[a+k]\n            preds.append(o)\n    \n    del model,text_embeddings\n    gc.collect()\n    return preds, post_dict","b2b82937":"# Return tokens, masks and segments from a text array or series\ndef bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n\n# Function to get our text title embeddings using a pre-trained bert model\ndef get_text_embeddings(df, max_len = 70):\n    embeds = []\n    module_url = \"..\/input\/shopee-external-models\/bert_en_uncased_L-24_H-1024_A-16_1\"\n    bert_layer = hub.KerasLayer(module_url, trainable = True)\n    vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\n    do_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\n    tokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)\n    text = bert_encode(df['title'].values, tokenizer, max_len = max_len)\n    \n    margin = ArcMarginProduct(\n            n_classes = 11014, \n            s = 30, \n            m = 0.5, \n            name='head\/arc_margin', \n            dtype='float32'\n            )\n    \n    input_word_ids = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = tf.keras.layers.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n    label = tf.keras.layers.Input(shape = (), name = 'label')\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    x = margin([clf_output, label])\n    output = tf.keras.layers.Softmax(dtype='float32')(x)\n    model = tf.keras.models.Model(inputs = [input_word_ids, input_mask, segment_ids, label], outputs = [output])\n    \n    model.load_weights('..\/input\/bert-baseline\/Bert_123.h5')\n    model = tf.keras.models.Model(inputs = model.input[0:3], outputs = model.layers[-4].output)\n    chunk = 5000\n    iterator = np.arange(np.ceil(len(df) \/ chunk))\n    for j in iterator:\n        a = int(j * chunk)\n        b = int((j + 1) * chunk)\n        text_chunk = ((text[0][a:b], text[1][a:b], text[2][a:b]))\n        text_embeddings = model.predict(text_chunk, batch_size = BATCH_SIZE)\n        embeds.append(text_embeddings)\n    del model\n    text_embeddings = np.concatenate(embeds)\n    print(f'Our text embeddings shape is {text_embeddings.shape}')\n    del embeds\n    gc.collect()\n    return text_embeddings","c8a2eea7":"def get_neighbors(df, embeddings, post_dict, KNN = 50, image = True, threshold=0.5):\n    model = NearestNeighbors(n_neighbors = KNN, metric='cosine')\n    model.fit(embeddings)\n    distances, indices = model.kneighbors(embeddings)\n    # Iterate through different thresholds to maximize cv, run this in interactive mode, then replace else clause with a solid threshold\n    if GET_CV:\n        if image:\n            thresholds = list(np.arange(0.0, 1, 0.025))\n        else:\n            thresholds = list(np.arange(0.0, 1, 0.025))\n        scores = []\n        for threshold in thresholds:\n            predictions = []\n            for k in range(embeddings.shape[0]):\n                idx = np.where(distances[k,] < (np.min(distances[k,])+threshold*(np.max(distances[k,])-np.min(distances[k,]))))[0]\n                ids = indices[k,idx]\n                posting_ids = ' '.join(df['posting_id'].iloc[ids].values)\n                predictions.append(posting_ids)\n            df['pred_matches'] = predictions\n            df['f1'] = f1_score(df['matches'], df['pred_matches'])\n            score = df['f1'].mean()\n            print(f'Our f1 score for threshold {threshold} is {score}')\n            scores.append(score)\n        thresholds_scores = pd.DataFrame({'thresholds': thresholds, 'scores': scores})\n        max_score = thresholds_scores[thresholds_scores['scores'] == thresholds_scores['scores'].max()]\n        best_threshold = max_score['thresholds'].values[0]\n        best_score = max_score['scores'].values[0]\n        print(f'Our best score is {best_score} and has a threshold {best_threshold}')\n        \n        # Use threshold\n        predictions = []\n        for k in range(embeddings.shape[0]):\n            # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n            if image:\n                idx = np.where(distances[k,] < best_threshold)[0]\n            else:\n                idx = np.where(distances[k,] < best_threshold)[0]\n            ids = indices[k,idx]\n            posting_ids = df['posting_id'].iloc[ids].values\n            predictions.append(posting_ids)\n    \n    # Because we are predicting the test set that have 70K images and different label groups, confidence should be smaller\n    else:\n        predictions = []\n        for k in tqdm(range(embeddings.shape[0])):\n            if image:\n                tr = np.min(distances[k,]) + threshold * (np.max(distances[k,]) - np.min(distances[k,]))\n#                 idx = np.where(distances[k,] < tr)[0]\n#                 c = np.log10(len(idx)+1)\/np.log10(60)\n#                 tr = tr*(10\/(10+c))\n                idx = np.where(distances[k,] < tr)[0]\n            else:\n                idx = np.where(distances[k,] < (np.min(distances[k,])+threshold*(np.max(distances[k,])-np.min(distances[k,]))))[0]\n                tr = np.min(distances[k,]) + threshold * (np.max(distances[k,]) - np.min(distances[k,]))\n#                 idx = np.where(distances[k,] < tr)[0]\n#                 c = np.log10(len(idx)+1)\/np.log10(60)\n#                 tr = tr*(10\/(10+c))\n                idx = np.where(distances[k,] < tr)[0]\n                \n            if len(idx)<=1:\n                tr = np.min(distances[k,]) + 1.55*threshold * (np.max(distances[k,]) - np.min(distances[k,]))\n                idx = np.where(distances[k,] < tr)[0]\n                \n                \n            ids = indices[k,idx]\n            posting_ids = df['posting_id'].iloc[ids].values\n            for post_id in posting_ids:\n                if post_id in post_dict:\n                    post_dict[post_id].append(k)\n                else:\n                    post_dict[post_id] = [k]\n            predictions.append(posting_ids)\n        \n    del model, distances, indices\n    gc.collect()\n    return df, predictions, post_dict","8f6e0335":"#model_paths = '..\/input\/concat-efficientnet-models\/'\nmodel_paths = '..\/input\/concated-efficientnet-b1-and-b5\/'\n#model_paths = '..\/input\/efficientnetb2groupkfold\/'\n#model_paths = '..\/input\/efficientnet-b4-640x640\/'\n#model_paths = '..\/input\/efficientnetb5groupkfold\/'\nimage_embeddings = []\npost_dict_b1b5 = {}\npost_dict_b3 = {}\npost_dict_text = {}\nif GET_CV:\n    for i in range(1):\n        df, df_cu, image_paths = read_dataset(fold=10)\n        model_names=['EfficientNetB1', 'EfficientNetB5']\n        model_path = model_paths + f'{model_names[0]}_{model_names[1]}_512_{i}.h5'\n        image_embeddings = get_image_embeddings(model_names, image_paths, model_path)\n        df, image_predictions, post_dict = get_neighbors(df, image_embeddings, post_dict, KNN = 80 if len(df)>3 else 3, image = True)\n        text_predictions = text_predictions = get_text_predictions(df, max_features = 25_000)\n        df['image_predictions'] = image_predictions\n        df['text_predictions'] = text_predictions\n        df['pred_matches'] = df.apply(combine_predictions, axis = 1)\n        df['f1'] = f1_score(df['matches'], df['pred_matches'])\n        score = df['f1'].mean()\n        print(f'Our final f1 cv score is {score}')\nelse:\n    \n    df, df_cu, image_paths = read_dataset(fold=10)\n    image_embeddings_list = []\n    image_thresholds=[0.38, 0.38, 0.38, 0.38, 0.38, 0.38]\n#     for i in range(2):\n    model_names=['EfficientNetB1', 'EfficientNetB5']\n    model_path = model_paths + f'{model_names[0]}_{model_names[1]}_512_0.h5'\n    image_embeddings = get_image_embeddings(model_names, image_paths, model_path)\n#     image_embeddings_list.append(image_embeddings)\n#     image_embeddings = np.average(image_embeddings_list, axis=0)\n    #print(image_embeddings.shape)\n    df, image_predictions, post_dict_b1b5 = get_neighbors(df, image_embeddings, post_dict_b1b5, KNN = 60 if len(df)>3 else 3, image = True, threshold=image_thresholds[0])\n        \n#     model_paths = '..\/input\/shoppee-augmented-single-fold-models\/'\n#     image_embeddings_list = []\n#     model_names=['EfficientNetB7']\n#     for i in [1]:\n#         model_path = model_paths + f'EfficientNetB7_512_{i}.h5'\n#         image_embeddings = get_image_embeddings(model_names, image_paths, model_path)\n#         #image_embeddings_list.append(image_embeddings)\n#     #image_embeddings = np.average(image_embeddings_list, axis=0)\n#     print(image_embeddings.shape)\n#     df, image_predictions_B7 = get_neighbors(df, image_embeddings, KNN = 60 if len(df)>3 else 3, image = True, threshold=image_thresholds[0])\n     \n    model_paths = '..\/input\/shoppee-efficientnetb3-ragnar\/'\n    image_embeddings_list = []\n    model_names=['EfficientNetB3']\n    for i in range(0, 1):\n        model_path = model_paths + f'EfficientNetB3_512_42.h5'\n        image_embeddings = get_image_embeddings(model_names, image_paths, model_path)\n#         image_embeddings_list.append(image_embeddings)\n#     image_embeddings = np.average(image_embeddings_list, axis=0)\n    print(image_embeddings.shape)\n    df, image_predictions_b3, post_dict_b3 = get_neighbors(df, image_embeddings, post_dict_b3, KNN = 60 if len(df)>3 else 3, image = True, threshold=0.37)\n        \n    #text_embeddings = get_text_embeddings(df_cu)\n    #text_embeddings = cupy.asnumpy(text_embeddings)\n    #df, text_predictions = get_neighbors(df, text_embeddings, KNN = 60 if len(df)>3 else 3, image = False, threshold=0.60)\n    \n    text_predictions, post_dict_text = get_text_predictions(df, post_dict_text, max_features = 25_000)\n    #text_embeddings_bert = get_text_embeddings(df)\n    #df, text_predictions_bert= get_neighbors(df, text_embeddings_bert, KNN = 60 if len(df)>3 else 3, image = True, threshold=0.30)\n    df['image_predictions_0'] = image_predictions\n    df['image_predictions_1'] = image_predictions_b3\n    df['image_predictions_2'] = image_predictions\n    df['text_predictions_0'] = text_predictions\n#     df['image_predictions_4'] = image_predictions_list[4]\n    df['text_predictions_1'] = text_predictions\n   \n    df['matches'] = df.apply(combine_predictions_test, axis = 1)\n    #df_copy=df.copy()\n    \n    ids = df['posting_id'].values\n    for i, post_id in enumerate(tqdm(ids)):\n        \n        try:\n        \n            idx=np.setdiff1d(post_dict_b1b5[post_id], post_dict_b3[post_id], post_dict_text[post_id])\n\n            threshold = 0.25\n            if len(idx)>1:\n                temp = (df.iloc[idx][['posting_id', 'matches']])\n                temp['matches_v1'] = temp.iloc[0]['matches']\n                temp['f1_score'] = f1_score(temp['matches_v1'], temp['matches'])\n                if temp.loc[temp['f1_score'] < threshold, :].shape[0] > 0:\n                    temp.loc[temp['f1_score'] < threshold, 'matches']=temp.loc[temp['f1_score'] < threshold, 'matches'].apply(lambda x: x.replace(post_id, \"\"))\n                    df.loc[temp.index, 'matches'] = temp['matches'].values\n        except:\n            print('No data')\n        \n\n    df[['posting_id', 'matches']].to_csv('submission.csv', index = False)\n    ","53d87487":"# Getting Embeddings","f9e88e7c":"# Configurations","856b7bab":"# Imports"}}