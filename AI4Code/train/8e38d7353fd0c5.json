{"cell_type":{"06119bc7":"code","216a233a":"code","03341229":"code","e0431c70":"code","5cda482b":"code","6555d406":"code","fb5e0f68":"code","f0ef0664":"code","d9445985":"code","5292ad10":"code","26d1ad4f":"code","f9bb093c":"code","c60b8e4a":"code","f9aeb72d":"code","225600e0":"code","84d90ea2":"code","7889ce92":"code","eaf02fe9":"code","8b8d83c1":"code","540d183b":"code","fa1aa86a":"code","ea10d3e9":"code","7b39746b":"code","aaec6304":"code","70382bdd":"code","9938dc0b":"code","db4d0167":"code","eb88ee06":"code","b705a231":"code","fb8bc7a1":"code","9375e6f1":"code","c9434280":"code","f7936118":"code","881d4eee":"code","76cb74dd":"code","758466dc":"code","5bd06be9":"code","9c621ae9":"code","8ce9c324":"code","04289e02":"code","228b537c":"code","a6e0175b":"code","ee634854":"code","0a65f486":"code","3e2b5abe":"code","a157ffd9":"code","613b252d":"code","a7d20e6e":"code","a7ac280b":"code","816ead01":"code","e39ebac5":"code","fd9d70d0":"code","29f49d72":"code","ac36a79b":"code","72bc585e":"code","f68e7c9e":"code","3071c7ad":"code","f6862904":"code","110abfd3":"code","455461b9":"code","8b624bef":"code","73919c35":"code","d9250e5c":"markdown","b541b748":"markdown","2fac89f1":"markdown","d1c5a5f4":"markdown","1475c3ea":"markdown"},"source":{"06119bc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","216a233a":"train = pd.read_csv('\/kaggle\/input\/comp-data\/TRAIN.csv')","03341229":"train.shape","e0431c70":"train.head()","5cda482b":"import seaborn as sns\nimport matplotlib.pyplot as plt","6555d406":"train.isnull().any()","fb5e0f68":"test = pd.read_csv('\/kaggle\/input\/comp-data\/TEST.csv')","f0ef0664":"test.head()","d9445985":"test.shape","5292ad10":"test.isnull().any()","26d1ad4f":"sns.lineplot(train['DayOfWeek'],train['Sales'])","f9bb093c":"plt.scatter(train['Customers'],train['Sales'])\nplt.xlabel('Customers')\nplt.ylabel('Sales')","c60b8e4a":"sns.boxplot(train['SchoolHoliday'],train['Sales'])","f9aeb72d":"sns.boxplot(train['StateHoliday'],train['Sales'])","225600e0":"sns.boxplot(x ='Promo',y= 'Sales',data=train)","84d90ea2":"sns.boxplot(x='Open',y='Sales',data=train)","7889ce92":"#train.index = pd.to_timedelta(train.index)","eaf02fe9":"import datetime\ntrain['Month'] = pd.DatetimeIndex(train['Date']).month","8b8d83c1":"train.head()","540d183b":"train['Year'] = pd.DatetimeIndex(train['Date']).year\ntrain['Day'] = pd.DatetimeIndex(train['Date']).day","fa1aa86a":"train.head()","ea10d3e9":"plt.figure(figsize=(20,6))\nsns.lineplot(train['Year'],train['Sales'])","7b39746b":"plt.figure(figsize=(20,6))\nsns.lineplot(train['Year'],train['Sales'],hue=train['StateHoliday'])","aaec6304":"plt.figure(figsize=(20,6))\nsns.lineplot(train['Year'],train['Sales'],hue=train['Promo'])","70382bdd":"submission = pd.read_csv('\/kaggle\/input\/comp-data\/sample_submission.csv')","9938dc0b":"submission.head()","db4d0167":"train['StateHoliday'] = train['StateHoliday'].astype(str)","eb88ee06":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain['StateHoliday'] = le.fit_transform(train['StateHoliday'])","b705a231":"train.head()","fb8bc7a1":"x = train[['DayOfWeek','Open','Promo','SchoolHoliday']]\ny = train['Sales']","9375e6f1":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","c9434280":"from sklearn.ensemble import GradientBoostingRegressor\nboost = GradientBoostingRegressor()\nboost.fit(x_train,y_train)\nboost.score(x_test,y_test)","f7936118":"x_new = train[['DayOfWeek','Open','Promo','SchoolHoliday','Month','Year','Day']]\ny_new = train['Sales']","881d4eee":"x_train_new,x_test_new,y_train_new,y_test_new = train_test_split(x_new,y_new,test_size=0.2)","76cb74dd":"boost.fit(x_train_new,y_train_new)\nboost.score(x_test_new,y_test_new)","758466dc":"x_2 = train[['DayOfWeek','Open','Promo','SchoolHoliday','Month','Year','Day','StateHoliday']]\ny_2 = train['Sales']","5bd06be9":"x_train_2,x_test_2,y_train_2,y_test_2 = train_test_split(x_2,y_2,test_size=0.2)","9c621ae9":"boost1 = GradientBoostingRegressor(n_estimators=300)\nboost1.fit(x_train_2,y_train_2)\nboost1.score(x_test_2,y_test_2)","8ce9c324":"boost1.score(x_train_2,y_train_2)","04289e02":"from sklearn.metrics import mean_squared_error\nimport math\nrmse = math.sqrt(mean_squared_error(y_test_2,boost1.predict(x_test_2)))","228b537c":"rmse","a6e0175b":"test.head()","ee634854":"test['Year'] = pd.DatetimeIndex(test['Date']).year\ntest['Day'] = pd.DatetimeIndex(test['Date']).day\ntest['Month'] = pd.DatetimeIndex(test['Date']).month","0a65f486":"test.head()","3e2b5abe":"test['StateHoliday'] = test['StateHoliday'].astype(str)\n#from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntest['StateHoliday'] = le.fit_transform(test['StateHoliday'])","a157ffd9":"test.head()","613b252d":"train.head()","a7d20e6e":"#improving regression model#","a7ac280b":"x_train_2.head()","816ead01":"boost.feature_importances_","e39ebac5":"x_train.corr()","fd9d70d0":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=15)\nknn.fit(x_train_2,y_train_2)","29f49d72":"knn.score(x_test_2,y_test_2)","ac36a79b":"train.head()","72bc585e":"from sklearn.tree import DecisionTreeRegressor\ntree = DecisionTreeRegressor()\ntree.fit(x_train_2,y_train_2)","f68e7c9e":"tree.score(x_test_2,y_test_2)","3071c7ad":"tree_rmse = math.sqrt(mean_squared_error(y_test_2,tree.predict(x_test_2)))","f6862904":"tree_rmse","110abfd3":"from sklearn.ensemble import RandomForestRegressor\nforest = RandomForestRegressor()\nforest.fit(x_train_2,y_train_2)\nforest.score(x_test_2,y_test_2)","455461b9":"from sklearn.ensemble import AdaBoostRegressor\nada = AdaBoostRegressor()\nada.fit(x_train_2,y_train_2)\nada.score(x_test_2,y_test_2)","8b624bef":"from sklearn.ensemble import BaggingRegressor\nbag = BaggingRegressor()\nbag.fit(x_train_2,y_train_2)\nbag.score(x_test_2,y_test_2)","73919c35":"from sklearn.ensemble import ExtraTreesRegressor\nextra = ExtraTreesRegressor()\nextra.fit(x_train_2,y_train_2)\nextra.score(x_test_2,y_test_2)","d9250e5c":"SPLITTING DATES","b541b748":"# EDA","2fac89f1":"> ","d1c5a5f4":"> [](http:\/\/)","1475c3ea":"# PREDICTION USING ENSEMBLING TECHNIQUES"}}