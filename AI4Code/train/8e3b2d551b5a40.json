{"cell_type":{"79421fbc":"code","81caa740":"code","12fa7297":"code","9e51e048":"code","84ee4772":"code","f52dfd68":"code","65e908b2":"code","acf2196b":"code","e1347605":"code","7d8fadce":"code","a8118d3c":"code","a4f57bcb":"code","16136d11":"code","3b4f7d40":"code","b41e7c4f":"code","4e1b5543":"code","4e9952dd":"code","d5feaebe":"code","fc415b3b":"code","4666b675":"code","d13c671c":"code","8c7e3f98":"code","62d8efd0":"code","e5de7731":"code","c0de7705":"code","7e4afeb2":"code","2e582196":"code","8979c9e4":"code","ca6f93ea":"code","96fa3a3b":"code","59064c79":"code","17e93a38":"code","a1784672":"code","97a8fe09":"code","27370f0d":"code","00bcbac1":"code","42318268":"code","b65804eb":"code","17e9b62d":"code","93458cbc":"code","9b68de80":"code","41b9f988":"code","b733adc9":"code","2fddadbd":"code","d3b9ef59":"code","94e049a4":"code","dc3462d1":"code","3a90a201":"code","5e680b82":"code","dd07c1f7":"code","6c2e76ce":"code","cba86d2e":"code","f9344a2d":"code","3dcf9d0c":"code","cca8ffa1":"code","878e7e91":"code","1bbc8f8f":"code","adf01b67":"code","ae88ff1b":"code","081eff27":"code","058a22ab":"code","080e1b82":"code","26a20e93":"code","177d285c":"code","9015487c":"code","1d046459":"code","75578a25":"code","0ab36285":"code","4fef91ad":"code","50d68a98":"code","0e0ba075":"code","c9acf130":"code","fcdfaf66":"code","57f01820":"code","7212560c":"code","f1ea0048":"code","d65c0b3b":"code","e2786640":"code","aef563fe":"code","2a0e69c0":"code","d388f1d9":"code","fb7fdd7c":"code","1e370f6d":"code","1c637845":"code","f7b7ba7a":"code","c87f9094":"code","966c94bf":"code","bf7f8e18":"code","7cfff037":"code","e2e5cfee":"code","13d53c90":"code","1c73eeaf":"code","91d263f8":"code","99fa3ff4":"code","9618a03d":"code","1a498f1f":"code","46295083":"code","5e7a13e7":"code","0eea20e7":"code","655ae3b8":"code","6ddd27c7":"code","e5aea42e":"code","098c3fb7":"code","135c590d":"code","f1d4e07e":"code","609b7a3e":"code","8a661446":"code","2ed9d46e":"code","722aeed6":"code","287cd58a":"code","526fcc6e":"code","1e22e840":"code","910f9c71":"markdown","da5b62a1":"markdown","9de87bb9":"markdown","c353bc12":"markdown","f69fa590":"markdown","57b107f4":"markdown","fbc665e9":"markdown","86fdc9c8":"markdown","59abbc94":"markdown","81c70685":"markdown","6dcb8c68":"markdown","db2f6793":"markdown","03dc8a55":"markdown","67759b1b":"markdown","3ad0f51e":"markdown","2894ac87":"markdown","0fe5153e":"markdown"},"source":{"79421fbc":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","81caa740":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\nprint(\"Shape of train: \", train.shape)\nprint(\"Shape of test: \", test.shape)\n","12fa7297":"train.head()","9e51e048":"## concat train and test\ndf = pd.concat((train, test))\ntemp_df = df\nprint(\"Shape of df: \", df.shape)","84ee4772":"df.head()","f52dfd68":"# To show the all columns\npd.set_option(\"display.max_columns\", 2000)\npd.set_option(\"display.max_rows\", 85)","65e908b2":"df.head()","acf2196b":"df.info()","e1347605":"#Numerical Data\ndf.describe()","7d8fadce":"#Selecting Interger and Float Data type.\ndf.select_dtypes(include=['int64', 'float64']).columns","a8118d3c":"#Selecting Object Data Tpye\ndf.select_dtypes(include=['object']).columns","a4f57bcb":"# Set index as Id column\ndf = df.set_index(\"Id\")","16136d11":"df.head()","3b4f7d40":"# Show the null values using heatmap\nplt.figure(figsize=(16,9))\nsns.heatmap(df.isnull())","b41e7c4f":"# Get the percentages of null value\nnull_percent = df.isnull().sum()\/df.shape[0]*100\nnull_percent","4e1b5543":"#Dropping null values which are more than 20%.\ncol_for_drop = null_percent[null_percent > 20].keys() # if the null value % 20 or > 20 so need to drop it","4e9952dd":"# drop columns\ndf = df.drop(col_for_drop, \"columns\")\ndf.shape","d5feaebe":"# find the unique value count\nfor i in df.columns:\n    print(i + \"\\t\" + str(len(df[i].unique())))","fc415b3b":"# find unique values of each column\nfor i in df.columns:\n    print(\"Unique value of:>>> {} ({})\\n{}\\n\".format(i, len(df[i].unique()), df[i].unique()))","4666b675":"# Describe the target \ntrain[\"SalePrice\"].describe()","d13c671c":"# Plot the distplot of target\nplt.figure(figsize=(10,8))\nbar = sns.distplot(train[\"SalePrice\"])\nbar.legend([\"Skewness: {:.2f}\".format(train['SalePrice'].skew())])","8c7e3f98":"# correlation heatmap\nplt.figure(figsize=(25,25))\nax = sns.heatmap(train.corr(), cmap = \"coolwarm\", annot=True, linewidth=2)\n\n# to fix the bug \"first and last row cut in half of heatmap plot\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","62d8efd0":"# correlation heatmap of higly correlated features with SalePrice\nhig_corr = train.corr()\nhig_corr_features = hig_corr.index[abs(hig_corr[\"SalePrice\"]) >= 0.5]\nhig_corr_features","e5de7731":"plt.figure(figsize=(10,8))\nax = sns.heatmap(train[hig_corr_features].corr(), cmap = \"coolwarm\", annot=True, linewidth=3)\n# to fix the bug \"first and last row cut in half of heatmap plot\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","c0de7705":"# Plot regplot to get the nature of highly correlated data\nplt.figure(figsize=(16,9))\nfor i in range(len(hig_corr_features)):\n    if i <= 9:\n        plt.subplot(3,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        sns.regplot(data=train, x = hig_corr_features[i], y = 'SalePrice')","7e4afeb2":"missing_col = df.columns[df.isnull().any()]\nmissing_col","2e582196":"bsmt_col = ['BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFinType1',\n       'BsmtFinType2', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtQual', 'BsmtUnfSF', 'TotalBsmtSF']\nbsmt_feat = df[bsmt_col]\nbsmt_feat","8979c9e4":"bsmt_feat.info()","ca6f93ea":"bsmt_feat.isnull().sum()","96fa3a3b":"bsmt_feat = bsmt_feat[bsmt_feat.isnull().any(axis=1)]\nbsmt_feat","59064c79":"bsmt_feat_all_nan = bsmt_feat[(bsmt_feat.isnull() | bsmt_feat.isin([0])).all(1)]\nbsmt_feat_all_nan","17e93a38":"bsmt_feat_all_nan.shape","a1784672":"qual = list(df.loc[:, df.dtypes == 'object'].columns.values)\nqual","97a8fe09":"# Fillinf the mising value in bsmt features\nfor i in bsmt_col:\n    if i in qual:\n        bsmt_feat_all_nan[i] = bsmt_feat_all_nan[i].replace(np.nan, 'NA') # replace the NAN value by 'NA'\n    else:\n        bsmt_feat_all_nan[i] = bsmt_feat_all_nan[i].replace(np.nan, 0) # replace the NAN value inplace of 0\n\nbsmt_feat.update(bsmt_feat_all_nan) # update bsmt_feat df by bsmt_feat_all_nan\ndf.update(bsmt_feat_all_nan) # update df by bsmt_feat_all_nan\n\n\"\"\"\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n>>> new_df = pd.DataFrame({'B': [4, 5, 6],\n...                        'C': [7, 8, 9]})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  1  4\n1  2  5\n2  3  6\n\"\"\"","27370f0d":"bsmt_feat = bsmt_feat[bsmt_feat.isin([np.nan]).any(axis=1)]\nbsmt_feat","00bcbac1":"bsmt_feat.shape","42318268":"print(df['BsmtFinSF2'].max())\nprint(df['BsmtFinSF2'].min())","b65804eb":"pd.cut(range(0,1526),5) # create a bucket","17e9b62d":"df_slice = df[(df['BsmtFinSF2'] >= 305) & (df['BsmtFinSF2'] <= 610)]\ndf_slice","93458cbc":"bsmt_feat.at[333,'BsmtFinType2'] = df_slice['BsmtFinType2'].mode()[0] # replace NAN value of BsmtFinType2 by mode of buet ((305.0, 610.0)","9b68de80":"bsmt_feat","41b9f988":"bsmt_feat['BsmtExposure'] = bsmt_feat['BsmtExposure'].replace(np.nan, df[df['BsmtQual'] =='Gd']['BsmtExposure'].mode()[0])","b733adc9":"bsmt_feat['BsmtCond'] = bsmt_feat['BsmtCond'].replace(np.nan, df['BsmtCond'].mode()[0])\nbsmt_feat['BsmtQual'] = bsmt_feat['BsmtQual'].replace(np.nan, df['BsmtQual'].mode()[0])","2fddadbd":"df.update(bsmt_feat)","d3b9ef59":"bsmt_feat.isnull().sum()","94e049a4":"df.columns[df.isnull().any()]","dc3462d1":"garage_col = ['GarageArea', 'GarageCars', 'GarageCond', 'GarageFinish', 'GarageQual', 'GarageType', 'GarageYrBlt',]\ngarage_feat = df[garage_col]\ngarage_feat = garage_feat[garage_feat.isnull().any(axis=1)]\ngarage_feat","3a90a201":"garage_feat.shape","5e680b82":"garage_feat_all_nan = garage_feat[(garage_feat.isnull() | garage_feat.isin([0])).all(1)]\ngarage_feat_all_nan.shape","dd07c1f7":"for i in garage_feat:\n    if i in qual:\n        garage_feat_all_nan[i] = garage_feat_all_nan[i].replace(np.nan, 'NA')\n    else:\n        garage_feat_all_nan[i] = garage_feat_all_nan[i].replace(np.nan, 0)\n        \ngarage_feat.update(garage_feat_all_nan)\ndf.update(garage_feat_all_nan)\n","6c2e76ce":"garage_feat = garage_feat[garage_feat.isnull().any(axis=1)]\ngarage_feat","cba86d2e":"for i in garage_col:\n    garage_feat[i] = garage_feat[i].replace(np.nan, df[df['GarageType'] == 'Detchd'][i].mode()[0])","f9344a2d":"garage_feat.isnull().any()","3dcf9d0c":"df.update(garage_feat)","cca8ffa1":"df.columns[df.isnull().any()]","878e7e91":"df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['Functional'] = df['Functional'].fillna(df['Functional'].mode()[0])\ndf['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])\ndf['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])\ndf['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])\ndf['Utilities'] = df['Utilities'].fillna(df['Utilities'].mode()[0])\ndf['MasVnrType'] = df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])","1bbc8f8f":"df.columns[df.isnull().any()]","adf01b67":"df[df['MasVnrArea'].isnull() == True]['MasVnrType'].unique()","ae88ff1b":"df.loc[(df['MasVnrType'] == 'None') & (df['MasVnrArea'].isnull() == True), 'MasVnrArea'] = 0","081eff27":"df.isnull().sum()\/df.shape[0] * 100","058a22ab":"lotconfig = ['Corner', 'Inside', 'CulDSac', 'FR2', 'FR3']\nfor i in lotconfig:\n    df['LotFrontage'] = pd.np.where((df['LotFrontage'].isnull() == True) & (df['LotConfig'] == i) , df[df['LotConfig'] == i] ['LotFrontage'].mean(), df['LotFrontage'])","080e1b82":"df.isnull().sum()","26a20e93":"df.columns","177d285c":"# converting columns in str which have categorical nature but in int64\nfeat_dtype_convert = ['MSSubClass', 'YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold']\nfor i in feat_dtype_convert:\n    df[i] = df[i].astype(str)","9015487c":"df['MoSold'].unique() # MoSold = Month of sold","1d046459":"# conver in month abbrevation\nimport calendar\ndf['MoSold'] = df['MoSold'].apply(lambda x : calendar.month_abbr[x])","75578a25":"df['MoSold'].unique()","0ab36285":"quan = list(df.loc[:, df.dtypes != 'object'].columns.values)","4fef91ad":"quan","50d68a98":"obj_feat = list(df.loc[:, df.dtypes == 'object'].columns.values)\nobj_feat","0e0ba075":"from pandas.api.types import CategoricalDtype\ndf['BsmtCond'] = df['BsmtCond'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes","c9acf130":"df['BsmtCond'].unique()","fcdfaf66":"df['BsmtExposure'] = df['BsmtExposure'].astype(CategoricalDtype(categories=['NA', 'Mn', 'Av', 'Gd'], ordered = True)).cat.codes","57f01820":"df['BsmtExposure'].unique()","7212560c":"df['BsmtFinType1'] = df['BsmtFinType1'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes\ndf['BsmtFinType2'] = df['BsmtFinType2'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes\ndf['BsmtQual'] = df['BsmtQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['ExterQual'] = df['ExterQual'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['ExterCond'] = df['ExterCond'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['Functional'] = df['Functional'].astype(CategoricalDtype(categories=['Sal', 'Sev', 'Maj2', 'Maj1', 'Mod','Min2','Min1', 'Typ'], ordered = True)).cat.codes\ndf['GarageCond'] = df['GarageCond'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['GarageQual'] = df['GarageQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['GarageFinish'] = df['GarageFinish'].astype(CategoricalDtype(categories=['NA', 'Unf', 'RFn', 'Fin'], ordered = True)).cat.codes\ndf['HeatingQC'] = df['HeatingQC'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['KitchenQual'] = df['KitchenQual'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['PavedDrive'] = df['PavedDrive'].astype(CategoricalDtype(categories=['N', 'P', 'Y'], ordered = True)).cat.codes\ndf['Utilities'] = df['Utilities'].astype(CategoricalDtype(categories=['ELO', 'NASeWa', 'NASeWr', 'AllPub'], ordered = True)).cat.codes","f1ea0048":"df['Utilities'].unique()","d65c0b3b":"skewed_features = ['1stFlrSF',\n '2ndFlrSF',\n '3SsnPorch',\n 'BedroomAbvGr',\n 'BsmtFinSF1',\n 'BsmtFinSF2',\n 'BsmtFullBath',\n 'BsmtHalfBath',\n 'BsmtUnfSF',\n 'EnclosedPorch',\n 'Fireplaces',\n 'FullBath',\n 'GarageArea',\n 'GarageCars',\n 'GrLivArea',\n 'HalfBath',\n 'KitchenAbvGr',\n 'LotArea',\n 'LotFrontage',\n 'LowQualFinSF',\n 'MasVnrArea',\n 'MiscVal',\n 'OpenPorchSF',\n 'PoolArea',\n 'ScreenPorch',\n 'TotRmsAbvGrd',\n 'TotalBsmtSF',\n 'WoodDeckSF']","e2786640":"quan == skewed_features","aef563fe":"plt.figure(figsize=(25,20))\nfor i in range(len(skewed_features)):\n    if i <= 28:\n        plt.subplot(7,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        ax = sns.distplot(df[skewed_features[i]])\n        ax.legend([\"Skewness: {:.2f}\".format(df[skewed_features[i]].skew())], fontsize = 'xx-large')\n","2a0e69c0":"df_back = df","d388f1d9":"# decrease the skewnwnes of the data\nfor i in skewed_features:\n    df[i] = np.log(df[i] + 1)","fb7fdd7c":"plt.figure(figsize=(25,20))\nfor i in range(len(skewed_features)):\n    if i <= 28:\n        plt.subplot(7,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        ax = sns.distplot(df[skewed_features[i]])\n        ax.legend([\"Skewness: {:.2f}\".format(df[skewed_features[i]].skew())], fontsize = 'xx-large')","1e370f6d":"SalePrice = np.log(train['SalePrice'] + 1)\n","1c637845":"# get object feature to conver in numeric using dummy variable\nobj_feat = list(df.loc[:,df.dtypes == 'object'].columns.values)\nlen(obj_feat)","f7b7ba7a":"# dummy varaibale\ndummy_drop = []\nclean_df = df\nfor i in obj_feat:\n    dummy_drop += [i + '_' + str(df[i].unique()[-1])]\n\ndf = pd.get_dummies(df, columns = obj_feat)\ndf = df.drop(dummy_drop, axis = 1)","c87f9094":"df.shape","966c94bf":"# scaling dataset with robust scaler\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\nscaler.fit(df)\ndf = scaler.transform(df)","bf7f8e18":"train_len = len(train)","7cfff037":"X_train = df[:train_len]\nX_test = df[train_len:]\ny_train = SalePrice\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(len(y_train))","e2e5cfee":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import make_scorer, r2_score\n\ndef test_model(model, X_train=X_train, y_train=y_train):\n    cv = KFold(n_splits = 3, shuffle=True, random_state = 45)\n    r2 = make_scorer(r2_score)\n    r2_val_score = cross_val_score(model, X_train, y_train, cv=cv, scoring = r2)\n    score = [r2_val_score.mean()]\n    return score","13d53c90":"import sklearn.linear_model as linear_model\nLR = linear_model.LinearRegression()\ntest_model(LR)","1c73eeaf":"# Cross validation\ncross_validation = cross_val_score(estimator = LR, X = X_train, y = y_train, cv = 10)\nprint(\"Cross validation accuracy of LR model = \", cross_validation)\nprint(\"\\nCross validation mean accuracy of LR model = \", cross_validation.mean())","91d263f8":"rdg = linear_model.Ridge()\ntest_model(rdg)","99fa3ff4":"lasso = linear_model.Lasso(alpha=1e-4)\ntest_model(lasso)","9618a03d":"from sklearn.svm import SVR\nsvr_reg = SVR(kernel='rbf')\ntest_model(svr_reg)","1a498f1f":"from sklearn.tree import DecisionTreeRegressor\ndt_reg = DecisionTreeRegressor(random_state=21)\ntest_model(dt_reg)","46295083":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(n_estimators = 1000, random_state=51)\ntest_model(rf_reg)","5e7a13e7":"from sklearn.ensemble import BaggingRegressor, GradientBoostingRegressor\nbr_reg = BaggingRegressor(n_estimators=1000, random_state=51)\ngbr_reg = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.1, loss='ls', random_state=51)","0eea20e7":"test_model(br_reg)","655ae3b8":"test_model(gbr_reg)","6ddd27c7":"import xgboost\n#xgb_reg=xgboost.XGBRegressor()\nxgb_reg = xgboost.XGBRegressor(bbooster='gbtree', random_state=51)\ntest_model(xgb_reg)\n","e5aea42e":"svr_reg.fit(X_train,y_train)\ny_pred = np.exp(svr_reg.predict(X_test)).round(2)","098c3fb7":"y_pred","135c590d":"submit_test1 = pd.concat([test['Id'],pd.DataFrame(y_pred)], axis=1)\nsubmit_test1.columns=['Id', 'SalePrice']","f1d4e07e":"submit_test1","609b7a3e":"submit_test1.to_csv('sample_submission.csv', index=False )","8a661446":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nparams = {'kernel': ['rbf'],\n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n         'C': [0.1, 1, 10, 100, 1000],\n         'epsilon': [1, 0.2, 0.1, 0.01, 0.001, 0.0001]}\nrand_search = RandomizedSearchCV(svr_reg, param_distributions=params, n_jobs=-1, cv=11)\nrand_search.fit(X_train, y_train)\nrand_search.best_score_","2ed9d46e":"svr_reg= SVR(C=100, cache_size=200, coef0=0.0, degree=3, epsilon=0.01, gamma=0.0001,\n    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\ntest_model(svr_reg)","722aeed6":"svr_reg.fit(X_train,y_train)\ny_pred = np.exp(svr_reg.predict(X_test)).round(2)","287cd58a":"y_pred","526fcc6e":"submit_test3 = pd.concat([test['Id'],pd.DataFrame(y_pred)], axis=1)\nsubmit_test3.columns=['Id', 'SalePrice']","1e22e840":"submit_test3.to_csv('sample_submission.csv', index=False)\nsubmit_test3","910f9c71":"> **Show skewness of feature with distplot**","da5b62a1":"# **Cross Validation**","9de87bb9":"> **Handling missing value of LotFrontage feature**","c353bc12":"# **House Prices: Advanced Regression Techniques**\n* Objective- Predict the price of a house by its given features.","f69fa590":"**Import essential libraries**","57b107f4":"**Load Data Set**","fbc665e9":"# **Handling Missing Value**","86fdc9c8":"# Exploratory Data Analysis (EDA)","59abbc94":"# **Feature Transformation**","81c70685":"# > **Conver categorical code into order**","6dcb8c68":"**Hyperparameter Tuning**","db2f6793":"> **Handling missing value of Garage feature**","03dc8a55":"# SVM Model Bulding Hyperparameter Tuning","67759b1b":"> **Handling missing value of remain feature**","3ad0f51e":"**Handling missing value of Bsmt feature**","2894ac87":"# **Machine Learning Model Building**","0fe5153e":"# **Linear Regression**"}}