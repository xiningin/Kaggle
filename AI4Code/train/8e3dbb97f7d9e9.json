{"cell_type":{"c168f3cb":"code","25fdd0d7":"code","23dbc872":"code","93e68a60":"code","7328c82b":"code","931ca460":"code","786dfe32":"code","136e43d2":"markdown","0f1d26f3":"markdown"},"source":{"c168f3cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd\nimport matplotlib.pyplot as plt\nfrom math import sqrt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","25fdd0d7":"data = pd.read_csv(\"\/kaggle\/input\/big-mart-sale\/clustering.csv\")\ndata.head()","23dbc872":"X = data[[\"ApplicantIncome\", \"LoanAmount\"]]\n# Visualize data point\nplt.scatter(X[\"ApplicantIncome\"], X[\"LoanAmount\"], c=\"blue\")\nplt.xlabel(\"Applicant Income\")\nplt.ylabel(\"Loan Amount (In Thousands)\")\nplt.show()","93e68a60":"# step 1 and 2\n\n# number of centriod\nK=3\n\n# select random observation as a centriod \nCentroids = (X.sample(n=K))\nplt.scatter(X[\"ApplicantIncome\"], X[\"LoanAmount\"], c=\"blue\")\nplt.scatter(Centroids[\"ApplicantIncome\"], Centroids[\"LoanAmount\"], c=\"red\")\nplt.xlabel(\"AnnualIncome\")\nplt.ylabel(\"Loan Amount (In Thousand)\")\nplt.show()","7328c82b":"Centroids","931ca460":"# Step 3 - Assign all the points to the closest cluster centroid\n# Step 4 - Recompute centroids of newly formed clusters\n# Step 5 - Repeat step 3 and 4\n\ndiff = 1\nj=0\n\nwhile(diff!=0):\n    XD=X\n    i=1\n    for index1, row_c in Centroids.iterrows():\n        ED=[]\n        for index2, row_d in XD.iterrows():\n            d1 = (row_c[\"ApplicantIncome\"]-row_d[\"ApplicantIncome\"])**2\n            d2 = (row_c[\"LoanAmount\"]-row_d[\"LoanAmount\"])**2\n            d = sqrt(d1+d2)\n            ED.append(d)\n        X[i] = ED\n        i = i+1\n    \n    C = []\n    for index, row in X.iterrows():\n        min_dist=row[1]\n        pos=1\n        for i in range(K):\n            if row[i+1] < min_dist:\n                min_dist = row[i+1]\n                pos = i+1\n        C.append(pos)\n    X[\"Cluster\"]=C\n    Centroids_new = X.groupby([\"Cluster\"]).mean()[[\"LoanAmount\", \"ApplicantIncome\"]]\n    if j == 0:\n        diff = 1\n        j = j+1\n    else:\n        diff = (Centroids_new['LoanAmount'] - Centroids['LoanAmount']).sum() + (Centroids_new['ApplicantIncome'] - Centroids['ApplicantIncome']).sum()\n        print(diff.sum())\n    Centroids = X.groupby([\"Cluster\"]).mean()[[\"LoanAmount\",\"ApplicantIncome\"]]","786dfe32":"color=['blue','green','cyan']\nfor k in range(K):\n    data=X[X[\"Cluster\"]==k+1]\n    plt.scatter(data[\"ApplicantIncome\"],data[\"LoanAmount\"],c=color[k])\nplt.scatter(Centroids[\"ApplicantIncome\"],Centroids[\"LoanAmount\"],c='red')\nplt.xlabel('Income')\nplt.ylabel('Loan Amount (In Thousands)')\nplt.show()","136e43d2":"For explaining purpose, we will take two variables from data \"ApplicantIncome\" and \"LoanAmount\".","0f1d26f3":"Steps of K-Means clustering\n1. Choose the number of clusters K\n2. select K random points from the data as centroid\n3. assign each data point to the closet cluster centriod\n4. Recompute the centriod of newly formed cluster, next step is to compute the centriod of newly formed clusters\n5. repeat steps 3 and 4"}}