{"cell_type":{"bb88be61":"code","900a5bb0":"code","d962821e":"code","f01f1bc2":"code","0d9e85b9":"code","09527491":"code","114cc231":"code","52bd6df6":"code","ec6208d1":"code","8d2d5b74":"code","5ad49aa6":"code","6a2f841d":"code","bd411d7c":"code","a23fa089":"code","94d3c951":"code","1e90d653":"code","23a61139":"code","7f7c798c":"code","50eee0ff":"code","27b4daac":"code","92b43b72":"code","7a78151f":"code","906b9346":"code","b7349d3c":"code","e78c3e94":"code","3a15d25b":"code","35edfd65":"code","64c46678":"code","cdd8c8ff":"code","536e85d0":"code","34f2a01c":"code","8d06ae31":"code","cf63f416":"code","7a9c99e9":"code","f0a4eee6":"code","da2e0346":"code","0e5a0e64":"code","989fdb0e":"code","812ff72a":"code","e289fd82":"code","91021517":"code","964ec0e0":"code","11244530":"code","b40e2835":"code","3b643051":"code","eb1898b7":"code","c0238f13":"code","9a52e835":"code","8852ae15":"code","0c9dead8":"code","bc9b1c98":"code","d78aab85":"code","2d056fc7":"code","91617050":"code","ee358683":"code","fd409c84":"code","edfe9a60":"code","55ca4fdd":"code","8d8b8d86":"code","2f0df2fa":"code","d0832f5a":"code","09e534a4":"code","a731b127":"code","9b5567ea":"code","4b7a6598":"code","e4c97e70":"code","49a8bb0d":"code","971039ce":"code","ba6154be":"code","85c6d26e":"code","9a8a39c3":"code","3ec33f20":"code","be2d3d32":"code","9f30eb52":"code","2829de5a":"code","f3787979":"code","52963b96":"code","636f760d":"code","4a3ea2bd":"code","66ac220f":"code","40ca982f":"code","2781b0e1":"markdown","88c33b80":"markdown","6b79c0da":"markdown","62b8d5fb":"markdown","7f1fa838":"markdown","703835ba":"markdown","565a1f8e":"markdown","ab81e5c8":"markdown","2c1f75d0":"markdown","d81961a7":"markdown","7d2d120a":"markdown","6bd6d856":"markdown","77a17150":"markdown","d94b65f2":"markdown","4823e73a":"markdown","04ea7743":"markdown","0f4ea383":"markdown","7f542c9b":"markdown","6a86da89":"markdown","7073bd25":"markdown","a500f956":"markdown"},"source":{"bb88be61":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt\nfrom tqdm.notebook import tqdm as tqdm\nimport statsmodels.api as sm\nimport gc\nplt.style.use('fivethirtyeight')\nfrom pylab import rcParams\nimport random\nimport seaborn as sns\nfrom lightgbm import LGBMRegressor\n","900a5bb0":"# to display all the columns in the dataset\npd.pandas.set_option('display.max_columns', None)","d962821e":"train_sales = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv\")\ncalendar = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsell_prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")","f01f1bc2":"train_sales.shape, calendar.shape,sell_prices.shape","0d9e85b9":"train_sales.info()","09527491":"calendar.info()","114cc231":"sell_prices.info()","52bd6df6":"train_sales.head()","ec6208d1":"calendar.head()","8d2d5b74":"sell_prices.head()","5ad49aa6":"train_sales.isnull().sum().sort_values(ascending = False)","6a2f841d":"sell_prices.isnull().sum().sort_values(ascending = False)","bd411d7c":"calendar.isnull().sum().sort_values(ascending = False)","a23fa089":"# memory usage reduction\ndef downcast(df):\n    cols = df.dtypes.index.tolist()\n    types = df.dtypes.values.tolist()\n    for i,t in enumerate(types):\n        if 'int' in str(t):\n            if df[cols[i]].min() > np.iinfo(np.int8).min and df[cols[i]].max() < np.iinfo(np.int8).max:\n                df[cols[i]] = df[cols[i]].astype(np.int8)\n            elif df[cols[i]].min() > np.iinfo(np.int16).min and df[cols[i]].max() < np.iinfo(np.int16).max:\n                df[cols[i]] = df[cols[i]].astype(np.int16)\n            elif df[cols[i]].min() > np.iinfo(np.int32).min and df[cols[i]].max() < np.iinfo(np.int32).max:\n                df[cols[i]] = df[cols[i]].astype(np.int32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.int64)\n        elif 'float' in str(t):\n            if df[cols[i]].min() > np.finfo(np.float16).min and df[cols[i]].max() < np.finfo(np.float16).max:\n                df[cols[i]] = df[cols[i]].astype(np.float16)\n            elif df[cols[i]].min() > np.finfo(np.float32).min and df[cols[i]].max() < np.finfo(np.float32).max:\n                df[cols[i]] = df[cols[i]].astype(np.float32)\n            else:\n                df[cols[i]] = df[cols[i]].astype(np.float64)\n        elif t == np.object:\n            if cols[i] == 'date':\n                df[cols[i]] = pd.to_datetime(df[cols[i]], format='%Y-%m-%d')\n            else:\n                df[cols[i]] = df[cols[i]].astype('category')\n    return df  ","94d3c951":"# calling memory reduction function for each data set\ntrain_sales = downcast(train_sales)\nsell_prices = downcast(sell_prices)\ncalendar = downcast(calendar)","1e90d653":"# let's save the list of date variables to a list\nd_cols = [c for c in train_sales.columns if 'd_' in c]","23a61139":"# lets save top 3 selling items to be analysed later\ntop3 = train_sales.set_index(\"id\")[d_cols].sum(1).sort_values(ascending  = False)[:3].index","7f7c798c":"grid_df = pd.melt(train_sales, \n                  id_vars = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], \n                  var_name = 'd', \n                  value_name = \"sales\")","50eee0ff":"group = grid_df.groupby(['state_id','store_id','cat_id','dept_id'],as_index=False)['sales'].sum().dropna()\ngroup['USA'] = 'United States of America'\ngroup.rename(columns={'state_id':'State','store_id':'Store','cat_id':'Category','dept_id':'Department','item_id':'sales'},inplace=True)\nfig = px.treemap(group, path=['USA','State', 'Store', 'Category', 'Department'], values='sales',\n                  color='sales',\n                  title='Sum of sales across whole USA\/different States\/Stores\/Categories\/Departments')\nfig.update_layout(template='seaborn')\nfig.show()","27b4daac":"del train_sales\ngc.collect()","92b43b72":"# lets drop the columns we are not going to use for EDA\ncalendar.drop(['wm_yr_wk','weekday','wday','month','year','event_name_1','event_type_1', 'event_name_2','event_type_2'],1,inplace=True)","7a78151f":"master = pd.merge(grid_df,calendar, on = \"d\")\nmaster.head()","906b9346":"del grid_df\ngc.collect()","b7349d3c":"def sales(feat,param):\n    sales_df = master.loc[master[feat] == param]\n    sales_df['date'] = pd.to_datetime(sales_df['date'])\n    sales_df =sales_df.groupby('date')['sales'].sum().reset_index()\n    sales_df = sales_df.set_index('date')\n    return sales_df","e78c3e94":"from itertools import cycle, islice\ndef decompose(y):\n    rcParams['figure.figsize'] = 18, 8\n    decomposition = sm.tsa.seasonal_decompose(y, model='additive')\n    fig = decomposition.plot()\n    plt.show()","3a15d25b":"def random_color():\n    colors = [\"blue\",\"black\",\"brown\",\"red\",\"yellow\",\"green\",\"orange\",\"turquoise\",\"magenta\",\"cyan\"]\n    random.shuffle(colors)\n    return colors[0]","35edfd65":"# list of unique states\nmaster.state_id.unique()","64c46678":"CA = sales(\"state_id\",\"CA\") # create a dataframe for the state CA\ny_ca = CA['sales'].resample('MS').mean() # taking monthly average\ncolour = random_color()\ny_ca.plot(figsize=(15, 6),color = colour,title = (\"Sales for the state of CA\"))\nplt.ylabel = (\"Sales\")\nplt.show()","cdd8c8ff":"decompose(y_ca)","536e85d0":"WI = sales(\"state_id\",\"WI\")\ny_wi = WI['sales'].resample('MS').mean()\ncolour = random_color()\ny_wi.plot(figsize=(15, 6),color = colour,title = (\"Sales for the state of WI\"))\nplt.ylabel = (\"Sales\")\nplt.show()","34f2a01c":"decompose(y_wi)","8d06ae31":"TX = sales(\"state_id\",\"TX\")\ny_tx = TX['sales'].resample('MS').mean()\ncolour = random_color()\ny_tx.plot(figsize=(15, 6),color = colour,title = (\"Sales for the state of TX\"))\nplt.show()","cf63f416":"decompose(y_tx)","7a9c99e9":"del CA,WI,TX\ngc.collect()","f0a4eee6":"# list of unique categories\nmaster.cat_id.unique()","da2e0346":"foods = sales(\"cat_id\",\"FOODS\")\ny_f = foods['sales'].resample('MS').mean()\ncolour = random_color()\ny_f.plot(figsize=(15, 6),color = colour,title = (\"Sales for the category:FOODS\"))\nplt.show()","0e5a0e64":"decompose(y_f)","989fdb0e":"hobbies = sales(\"cat_id\",\"HOBBIES\")\ny_hb = hobbies['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_hb.plot(figsize=(15, 6),color = colour,title = (\"Sales for the category:HOBBIES\"))\nplt.show()","812ff72a":"decompose(y_hb)","e289fd82":"household = sales(\"cat_id\",\"HOUSEHOLD\")\ny_hh = household['sales'].resample('MS').mean()\ncolour = random_color()\ny_hh.plot(figsize=(15, 6),color = colour,title = (\"Sales for the category:HOUSEHOLD\"))\nplt.show()","91021517":"decompose(y_hh)","964ec0e0":"del foods,hobbies,household,y_f,y_hb,y_hh\ngc.collect()","11244530":"master.store_id.unique","b40e2835":"CA_1 = sales(\"store_id\",\"CA_1\")\ny_CA1 = CA_1['sales'].resample('MS').mean()\ncolour = random_color()\ny_CA1.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:CA_1\"))\nplt.show()","3b643051":"decompose(y_CA1)","eb1898b7":"CA_2 = sales(\"store_id\",\"CA_2\")\ny_CA2 = CA_2['sales'].resample('MS').mean()\ncolour = random_color()\ny_CA2.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:CA_2\"))\nplt.show()","c0238f13":"decompose(y_CA2)","9a52e835":"CA_3 = sales(\"store_id\",\"CA_3\")\ny_CA3 = CA_3['sales'].resample('MS').mean()\ncolour = random_color()\ny_CA3.plot(figsize=(15, 6),color = colour,title = \"Sales for the store:CA_3\")\nplt.show()","8852ae15":"decompose(y_CA3)","0c9dead8":"CA_4 = sales(\"store_id\",\"CA_4\")\ny_CA4 = CA_4['sales'].resample('MS').mean()\ncolour = random_color()\ny_CA4.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:CA_4\"))\nplt.show()","bc9b1c98":"decompose(y_CA4)","d78aab85":"TX_1 = sales(\"store_id\",\"TX_1\")\ny_TX1 = TX_1['sales'].resample('MS').mean()\ncolour = random_color()\ny_TX1.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:TX_1\"))\nplt.show()","2d056fc7":"decompose(y_TX1)","91617050":"TX_2 = sales(\"store_id\",\"TX_2\")\ny_TX2 = TX_2['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_TX2.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:TX_2\"))\nplt.show()","ee358683":"decompose(y_TX2)","fd409c84":"TX_3 = sales(\"store_id\",\"TX_3\")\ny_TX3 = TX_3['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_TX3.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:TX_3\"))\nplt.show()","edfe9a60":"decompose(y_TX3)","55ca4fdd":"WI_1 = sales(\"store_id\",\"WI_1\")\ny_WI1 = WI_1['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_WI1.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:WI_1\"))\nplt.show()","8d8b8d86":"decompose(y_WI1)","2f0df2fa":"WI_2= sales(\"store_id\",\"WI_2\")\ny_WI2 = WI_2['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_WI2.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:WI_2\"))\nplt.show()","d0832f5a":"decompose(y_WI2)","09e534a4":"WI_3= sales(\"store_id\",\"WI_3\")\ny_WI3 = WI_3['sales'].resample('MS').mean()\ncolour = random_color()\nplt.ylabel = (\"Sales\")\ny_WI3.plot(figsize=(15, 6),color = colour,title = (\"Sales for the store:WI_3\"))\nplt.show()","a731b127":"decompose(y_WI3)","9b5567ea":"del CA_1,CA_2,CA_3,CA_4,TX_1,TX_2,TX_3,WI_1,WI_2,WI_3\ngc.collect()","4b7a6598":"top = sales(\"id\",top3[0])\ny_top = top['sales'].resample('MS').mean()\ncolour = random_color()\ny_top.plot(figsize=(15, 6),color = colour,title = (\"Sales for the Product:\" + top3[0]))\nplt.show()","e4c97e70":"top = sales(\"id\",top3[1])\ny_top = top['sales'].resample('MS').mean()\ncolour = random_color()\ny_top.plot(figsize=(15, 6),color = colour,title = (\"Sales for the Product:\" + top3[1]))\nplt.show()","49a8bb0d":"top = sales(\"id\",top3[2])\ny_top = top['sales'].resample('MS').mean()\ncolour = random_color()\ny_top.plot(figsize=(15, 6),color = colour,title = (\"Sales for the Product:\" + top3[2]))\nplt.show()","971039ce":"del top3,y_top\ngc.collect()","ba6154be":"colour = random_color()\nsns.distplot(sell_prices[\"sell_price\"],color = colour).set_title(\"Price Distribution\")","85c6d26e":"colour = random_color()\nCA_1= sell_prices[sell_prices[\"store_id\"] == \"CA_1\"]\nsns.distplot(CA_1[\"sell_price\"],color = colour).set_title(\"Price Distribution for CA_1\")","9a8a39c3":"colour = random_color()\nCA_2= sell_prices[sell_prices[\"store_id\"] == \"CA_2\"]\nsns.distplot(CA_2[\"sell_price\"],color = colour).set_title(\"Price Distribution for CA_2\")","3ec33f20":"colour = random_color()\nCA_3= sell_prices[sell_prices[\"store_id\"] == \"CA_3\"]\nsns.distplot(CA_3[\"sell_price\"],color = colour).set_title(\"Price Distribution for CA_3\")","be2d3d32":"colour = random_color()\nCA_4= sell_prices[sell_prices[\"store_id\"] == \"CA_4\"]\nsns.distplot(CA_4[\"sell_price\"],color = colour).set_title(\"Price Distribution for CA_4\")","9f30eb52":"colour = random_color()\nTX_1= sell_prices[sell_prices[\"store_id\"] == \"TX_1\"]\nsns.distplot(TX_1[\"sell_price\"],color = colour).set_title(\"Price Distribution for TX_1\")","2829de5a":"colour = random_color()\nTX_2= sell_prices[sell_prices[\"store_id\"] == \"TX_2\"]\nsns.distplot(TX_2[\"sell_price\"],color = colour).set_title(\"Price Distribution for TX_2\")","f3787979":"colour = random_color()\nTX_3= sell_prices[sell_prices[\"store_id\"] == \"TX_3\"]\nsns.distplot(TX_3[\"sell_price\"],color = colour).set_title(\"Price Distribution for TX_3\")","52963b96":"colour = random_color()\nWI_1= sell_prices[sell_prices[\"store_id\"] == \"WI_1\"]\nsns.distplot(WI_1[\"sell_price\"],color = colour).set_title(\"Price Distribution for WI_1\")","636f760d":"colour = random_color()\nWI_2= sell_prices[sell_prices[\"store_id\"] == \"WI_2\"]\nsns.distplot(WI_2[\"sell_price\"],color = colour).set_title(\"Price Distribution for WI_2\")","4a3ea2bd":"colour = random_color()\nWI_3= sell_prices[sell_prices[\"store_id\"] == \"WI_3\"]\nsns.distplot(WI_3[\"sell_price\"],color = colour).set_title(\"Price Distribution for WI_3\")","66ac220f":"del sell_prices,CA_1,CA_2,CA_3,CA_4,TX_1,TX_2,TX_3,WI_1,WI_2,WI_3\ngc.collect()","40ca982f":"import gc\ngc.collect()","2781b0e1":"# Memory Reduction\n\nWe have a huge dataset to work on, and before feeding this dataset into the model, we are going to \"Melt\" it which would the data fram would be converted from wide format to a long format. I have kept the id variables as id, item_id, dept_id, cat_id, store_id and state_id. They have in total 30490 unique values when compunded together. Now the total number of days for which we have the data is 1969 days. Therefore the melted dataframe will be having 30490x1969 i.e. 60034810 rows.\n\nIn order to process to such huge dataset, we would need to reduce the memor usage. ","88c33b80":"# STATE WISE SALES\n\nLet's take a look at the state wise sales\n\nWe will preprocess our data a little bit before moving forward. Daily data can be tricky to work with since it\u2019s a briefer amount of time, so let\u2019s use monthly averages instead. We\u2019ll make the conversion with the resample function.","6b79c0da":"# Helper Functions\n    1. sales: To plot graphs for sales of different categories\n    2. decompose: This function will decompose the given time series into three parts, \"seasonal\", \"trend\" and \"observed\"\n    3. random_color: This function will pick a random color for the graph calling this function.","62b8d5fb":"# Introduction\nWelcome to the \"M5 Forecasting - Accuracy\" competition! In this competition, contestants are challenged to forecast future sales at Walmart based on heirarchical sales in the states of California, Texas, and Wisconsin.\n\n# Task in hand\nIn this competition, we need to forecast the sales for [d_1942 - d_1969]. These rows form the test set.\n\nThe rows \u00a0[d_1914 - d_1941] form the validation set.\n\nRemaining rows form the training set.\n\n# Appeal to fellow Kagglers:)\nThis is my first attempt towards a time series problem, so, please upvote this kernel,your upvote will be like a reward for my work.\n\n# This notebook will cover only EDA","7f1fa838":"Link to model building notebook: https:\/\/www.kaggle.com\/jagdmir\/m5-forecasting-part-two-lgbm-regressor","703835ba":"Some distinguishable patterns appear when we plot the data. The time-series has seasonality pattern, such as sales are always low at the beginning of the year and high at the mid of the year. There is always an upward trend within any single year.","565a1f8e":"# Exploratory Data Analysis","ab81e5c8":"We can also visualize our data using a method called time-series decomposition that allows us to decompose our time series into three distinct components: trend, seasonality, and noise.","2c1f75d0":"Some distinguishable patterns appear when we plot the data. \nThe time-series has seasonality pattern, such as sales are always low at the beginning of the year and high at the mid of the year. \nThere is always an upward trend within any single year.","d81961a7":"# Create a master dataset by merging melted dataset and the calendar dataset","7d2d120a":"# PRICE DISTRIBUTION","6bd6d856":"There are lots of zeros in the datasets for \"d_x\" columns, these are nothing bul sale values on any given day, zero here signfies, either the item was not available on that day or was not sold because of no demand.","77a17150":"# CATEGORY WISE SALES\n\nLet's take a look at the category wise sales","d94b65f2":"# Lets check the datasets","4823e73a":"The plot above clearly shows that the sales of state CA is unstable, along with its obvious seasonality.","04ea7743":"# STORE WISE SALES","0f4ea383":"# Melting the dataframe","7f542c9b":"Sales are not very different from the other states.","6a86da89":"# Lets check for null values","7073bd25":"The plot above clearly shows that the sales of state CA is unstable, along with its obvious seasonality.","a500f956":"# TOP SELLING PRODUCTS"}}