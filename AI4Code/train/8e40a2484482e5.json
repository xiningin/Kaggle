{"cell_type":{"3c542a49":"code","da0e32a8":"code","fbfaf8ac":"code","20e5fb7a":"code","37281769":"code","130f4726":"code","b031997a":"code","589b1a35":"code","57a0a937":"code","72dcbc33":"code","476bfcce":"code","4bc9eeaa":"code","ae289d25":"code","74734979":"code","136df8c8":"code","bf537182":"code","5b00229f":"markdown","1fa5e595":"markdown"},"source":{"3c542a49":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import VarianceThreshold\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression","da0e32a8":"data=pd.read_csv('precleaned-datasets_2\/dataset_1.csv')","fbfaf8ac":"data.head()","20e5fb7a":"X_train, X_test, y_train, y_test = train_test_split(\n    data.drop(labels=['target'], axis=1),\n    data['target'],\n    test_size=0.3,\n    random_state=0)\n\nX_train.shape, X_test.shape\nX_train_original = X_train.copy()\nX_test_original = X_test.copy()","37281769":"X_train.shape, X_test.shape","130f4726":"constant_feat=[feat for feat in X_train.columns if X_train[feat].std()==0]\nX_train.drop(labels=constant_feat,inplace=True,axis=1)\nX_test.drop(labels=constant_feat,inplace=True,axis=1)","b031997a":"X_train.shape, X_test.shape","589b1a35":"quasi_constant_feat=[]\nfor feature in X_train.columns:\n    predominant=(X_train[feature].value_counts()\/np.float(len(X_train))).sort_values(ascending=False).values[0]\n    if predominant>0.998:\n        quasi_constant_feat.append(feature)\nlen(quasi_constant_feat)","57a0a937":"sel = VarianceThreshold(\n    threshold=0.01)  # 0.1 indicates 99% of observations approximately\n\nsel.fit(X_train)  # fit finds the features with low variance\n\nsum(sel.get_support())\n","72dcbc33":"features_to_keep=X_train.columns[sel.get_support()]","476bfcce":"X_train = sel.transform(X_train)\nX_test = sel.transform(X_test)\n\nX_train.shape, X_test.shape","4bc9eeaa":"X_train= pd.DataFrame(X_train)\nX_train.columns = features_to_keep\n\nX_test= pd.DataFrame(X_test)\nX_test.columns = features_to_keep","ae289d25":"\ndef correlation(dataset, threshold):\n    col_corr = set()\n    \n    corr_matrix = dataset.corr()\n    \n    for i in range(len(corr_matrix.columns)):\n    \n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: \n                col_corr.add(colname)\n    return col_corr\n\ncorr_features = correlation(X_train, 0.8)\nprint('correlated features: ', len(set(corr_features)) )","74734979":"X_train.drop(labels=corr_features, axis=1, inplace=True)\nX_test.drop(labels=corr_features, axis=1, inplace=True)\n\nX_train.shape, X_test.shape","136df8c8":"rf=RandomForestClassifier(n_estimators=200,random_state=39,max_depth=4)\nrf.fit(X_train,y_train)","bf537182":"print('Train set')\npred = rf.predict_proba(X_train)\nprint('Random Forests roc-auc: {}'.format(roc_auc_score(y_train, pred[:,1])))\nprint('Test set')\npred = rf.predict_proba(X_test)\nprint('Random Forests roc-auc: {}'.format(roc_auc_score(y_test, pred[:,1])))","5b00229f":"## Remove Quasi Constant Feature","1fa5e595":"## Remove Correlated Features"}}