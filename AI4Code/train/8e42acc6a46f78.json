{"cell_type":{"eba82529":"code","3c02f122":"code","a24297e5":"code","d5ca9a99":"code","bd4339d3":"code","9a6812cf":"code","2a16751c":"code","b98558b3":"code","69a642ce":"code","1672edbd":"code","919624f6":"code","e9f03f6d":"code","a41f1a71":"code","9c85b60a":"code","ed49dd10":"code","4855d997":"code","d88f918a":"code","7cdd9089":"code","e654f11d":"code","adf9ec6b":"code","90fa3a2e":"code","86909a34":"code","f2557634":"code","314d6af9":"code","ffa3ca85":"code","11ff5f78":"code","6cfa0fa5":"code","d1dc2364":"code","82666933":"code","9c6a3a66":"code","a710abce":"code","c40e002f":"code","bfc03858":"code","c7a20073":"code","2574e072":"code","d27cf4cc":"code","bedac072":"code","d7d8c0aa":"code","9c7821d3":"code","7149d680":"code","fc000868":"code","56afbac2":"code","1c267b64":"code","d44073bb":"code","1c7dd817":"code","0ee20813":"code","dcfaa773":"code","160156a4":"code","e8ae6702":"code","d2e1978d":"code","b6406e2d":"code","ea09998b":"code","9b6f32e2":"code","4ce076d1":"code","260e2bc8":"code","2959dd89":"code","8a521f06":"code","8f114a33":"code","493131a2":"code","cb15c66b":"code","e3b61961":"code","a6d7e5de":"code","b8d79f14":"code","88021677":"code","6c2e74ae":"code","632cb28c":"code","e1bad6da":"code","6ee1bb61":"code","5c767b4a":"code","9f2ee86b":"code","5d07afbe":"code","70426562":"code","a7f2e661":"markdown","26ae8d6d":"markdown","213d71c6":"markdown","84314f1d":"markdown","7195e9b9":"markdown","60583924":"markdown","ba18a7f5":"markdown","6304bb75":"markdown","8d421092":"markdown","0450f292":"markdown","8d3ac0ee":"markdown","4572725b":"markdown","b65041c6":"markdown","a916516d":"markdown","35093a00":"markdown","c294026e":"markdown","db1f0640":"markdown","a12210c4":"markdown","e6e02987":"markdown","9ec50efe":"markdown","dce042ac":"markdown","7aabeece":"markdown","108b6d8a":"markdown","2d688035":"markdown","baebe4a1":"markdown","95095850":"markdown","bb9da4ac":"markdown","c2431e73":"markdown","c864d9c7":"markdown","69860f7c":"markdown","45c48de7":"markdown","546e1367":"markdown","804cdead":"markdown","430c96b2":"markdown","9225763e":"markdown","4e84142d":"markdown","2e663942":"markdown","e4bf403f":"markdown","c9cbf5db":"markdown","d917d7bd":"markdown","52c5dc44":"markdown","3e36bbaf":"markdown","67f9b1a2":"markdown","2d24a96f":"markdown","25897c2d":"markdown","b0c8e5cb":"markdown","bc55cf2b":"markdown","f43be9de":"markdown"},"source":{"eba82529":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c02f122":"# \u6570\u636e\u6574\u7406\u548c\u5206\u6790\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# \u53ef\u89c6\u5316\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom collections import Counter\n\n# \u673a\u5668\u5b66\u4e60\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.ensemble import RandomForestClassifier,RandomForestRegressor\nfrom lightgbm import LGBMClassifier\n\n\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, auc\nfrom sklearn.metrics import roc_auc_score, precision_recall_curve,roc_curve","a24297e5":"train_df = pd.read_csv(\"..\/input\/GiveMeSomeCredit\/cs-training.csv\")\ntest_df = pd.read_csv(\"..\/input\/GiveMeSomeCredit\/cs-test.csv\")\ncombine = [train_df, test_df]","d5ca9a99":"train_df.shape","bd4339d3":"test_df.shape","9a6812cf":"train_df.head()","2a16751c":"train_df.info()\nprint('_'*64)\ntest_df.info()","b98558b3":"pd.DataFrame({\"Number of Null Values\":train_df.isnull().sum(),\n             \"Ratio\":round(train_df.isnull().sum()\/len(train_df)*100,2)})","69a642ce":"pd.DataFrame({\"Number of Null Values\":test_df.isna().sum(),\n             \"Ratio\":round(test_df.isnull().sum()\/len(test_df)*100,2)})","1672edbd":"def detect_outliers(df,n,features):\n    \"\"\"\n    Takes a dataframe df of features and returns a list of the indices\n    corresponding to the observations containing more than n outliers according\n    to the Tukey method.\n    \"\"\"\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n        \n        # outlier step\n        outlier_step = 1.5 * IQR\n        \n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n        \n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n        \n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n    \n    return multiple_outliers ","919624f6":"# \u5341\u4e2a\u7279\u5f81\u7684\u5f02\u5e38\u503c\u68c0\u6d4b\uff1a\u8d85\u8fc73\u4e2a\u6837\u672c\u5f02\u5e38\u5c06\u88ab\u5212\u5206\u4e3a\u5f02\u5e38\u6837\u672c\nOutliers_to_drop = detect_outliers(train_df,3,train_df.columns.values[2:])\nprint(\"\u5f02\u5e38\u503c\uff1a\",round(len(Outliers_to_drop)\/train_df.shape[0]*100,2),\"%\")\ntrain_df.loc[Outliers_to_drop] # Show the outliers rows","e9f03f6d":"train_df.duplicated().value_counts()","a41f1a71":"train_df.describe()","9c85b60a":"# \u7c7b\u522b\u5206\u5e03\nsns.countplot(x=\"SeriousDlqin2yrs\", data=train_df)\nprint(\"\u5ba2\u6237\u8fdd\u7ea6\u7387: {}%\".format(train_df[\"SeriousDlqin2yrs\"].sum() \/ len(train_df)*100))","ed49dd10":"features = train_df.columns.values\nunique_max_train = []\nunique_max_test = []\nfor feature in features:\n    values = train_df[feature].value_counts()\n    unique_max_train.append([feature, values.max(), values.idxmax(), round(values.max()\/train_df.shape[0]*100,2)]) #\u8be5\u7279\u5f81\u91cd\u590d\u6700\u591a\u7684\u7279\u5f81\u503cidxmax()\u53ca\u5176\u4e2a\u6570max()\n\nnp.transpose((pd.DataFrame(unique_max_train, columns=['Feature', 'Max duplicates', 'Value', 'Ratio'])).\\\n            sort_values(by = 'Max duplicates', ascending=False).head(15))","4855d997":"'''default_prop = [] # \u8fdd\u7ea6\u7387\nfor i in range(int(train_df[\"RevolvingUtilizationOfUnsecuredLines\"].max())):\n    temp_ = train_df.loc[train_df[\"RevolvingUtilizationOfUnsecuredLines\"] >= i]\n    default_prop.append([i, temp_[\"SeriousDlqin2yrs\"].mean()])\ndefault_prop'''","d88f918a":"'''sns.lineplot(x=[i[0] for i in default_prop], y=[i[1] for i in default_prop])\nplt.title(\"Proportion of Defaulters As Minimum RUUL Increases\")'''","7cdd9089":"sns.boxplot(train_df['age'])","e654f11d":"len(train_df.loc[train_df['age'] == 0])","adf9ec6b":"sns.distplot(train_df.loc[train_df['age'] > 0][\"age\"])","90fa3a2e":"sns.distplot(train_df.loc[(train_df['age'] > 0)&(train_df[\"SeriousDlqin2yrs\"] == 0)][\"age\"])\nplt.title('SeriousDlqin2yrs = 0')","86909a34":"sns.distplot(train_df.loc[(train_df['age'] > 0)&(train_df[\"SeriousDlqin2yrs\"] == 1)][\"age\"])\nplt.title('SeriousDlqin2yrs = 1')","f2557634":"late_pay_cols = ['NumberOfTime30-59DaysPastDueNotWorse','NumberOfTimes90DaysLate','NumberOfTime60-89DaysPastDueNotWorse']","314d6af9":"train_df[\"NumberOfTime30-59DaysPastDueNotWorse\"].value_counts().sort_index()","ffa3ca85":"train_df[\"NumberOfTimes90DaysLate\"].value_counts().sort_index()","11ff5f78":"train_df[\"NumberOfTime60-89DaysPastDueNotWorse\"].value_counts().sort_index()","6cfa0fa5":"train_df.loc[train_df[\"NumberOfTimes90DaysLate\"] > 17][late_pay_cols].describe()","d1dc2364":"distinct_triples_counts = dict()\nfor arr in train_df.loc[train_df[\"NumberOfTimes90DaysLate\"] > 17][late_pay_cols].values:\n    triple = \",\".join(list(map(str, arr)))\n    if triple not in distinct_triples_counts:\n        distinct_triples_counts[triple] = 0\n    else:\n        distinct_triples_counts[triple] += 1\ndistinct_triples_counts","82666933":"train_df[\"DebtRatio\"].quantile(0.765)","9c6a3a66":"train_df[\"DebtRatio\"].quantile(0.975)","a710abce":"train_df.loc[train_df[\"DebtRatio\"] > train_df[\"DebtRatio\"].quantile(0.975)][['DebtRatio','MonthlyIncome']].describe()","c40e002f":"train_df.loc[train_df[\"DebtRatio\"] > train_df[\"DebtRatio\"].quantile(0.975)]['MonthlyIncome'].value_counts()","bfc03858":"len(train_df[(train_df[\"DebtRatio\"] > train_df[\"DebtRatio\"].quantile(0.9)) & (train_df['SeriousDlqin2yrs'] == train_df['MonthlyIncome'])])","c7a20073":"sns.distplot(train_df['MonthlyIncome'].dropna().loc[train_df['DebtRatio']<train_df['DebtRatio'].quantile(0.975)])","2574e072":"#train_df[\"NumberOfOpenCreditLinesAndLoans\"].value_counts()\nsns.distplot(train_df[\"NumberOfOpenCreditLinesAndLoans\"])","d27cf4cc":"train_df[\"NumberRealEstateLoansOrLines\"].value_counts()","bedac072":"sns.countplot(x=\"NumberRealEstateLoansOrLines\", data=train_df.loc[train_df[\"NumberRealEstateLoansOrLines\"] <= 13])","d7d8c0aa":"train_df.loc[train_df[\"NumberRealEstateLoansOrLines\"] > 13][\"SeriousDlqin2yrs\"].describe()","9c7821d3":"train_df[\"NumberOfDependents\"].value_counts()","7149d680":"train_df.loc[train_df[\"NumberOfDependents\"] <= 10][\"SeriousDlqin2yrs\"].describe()","fc000868":"sns.countplot(x=\"NumberOfDependents\", data=train_df.loc[train_df[\"NumberOfDependents\"] <= 10])","56afbac2":"# \u5c06train_df\uff0ctest_df\u7b2c\u4e00\u5217\u5217\u540d\u91cd\u547d\u540d\u4e3a\u201cID\u201d\nfor df in combine:\n    df.rename(columns={'Unnamed: 0':'ID'}, inplace=True)","1c267b64":"# \u7528\u4f17\u65700\u586b\u5145NumberOfDependents\nfor df in combine:\n    df['NumberOfDependents'].fillna(0, inplace=True)","d44073bb":"#MonthlyIncome\u7f3a\u5931\u503c\u8f83\u591a\uff0c\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\u6837\u672c\uff0c\u540c\u65f6\u7f3a\u5931\u503c\u4e5f\u6ca1\u6709\u591a\u5230\u80fd\u76f4\u63a5\u5220\u9664\u5c5e\u6027\uff0c\u8fd9\u91cc\u4f7f\u7528\u968f\u673a\u68ee\u6797\u9884\u6d4b\u8865\u5168\u7f3a\u5931\u503c\ndef randomforest_filled_func(df):\n    # \u5206\u6210\u5df2\u77e5\u8be5\u7279\u5f81\u548c\u672a\u77e5\u8be5\u7279\u5f81\u4e24\u90e8\u5206\n    train = df[df.MonthlyIncome.notnull()]\n    test = df[df.MonthlyIncome.isnull()]\n    \n    train_x = train.iloc[:,2:].drop('MonthlyIncome',axis=1)\n    train_y = train['MonthlyIncome']\n    \n    test_x = test.iloc[:,2:].drop('MonthlyIncome',axis=1)\n    \n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=2021, n_estimators=200,max_depth=3,n_jobs=-1)\n    rfr.fit(train_x, train_y)\n    \n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u7279\u5f81\u503c\u9884\u6d4b\n    predicted = rfr.predict(test_x).round(0)\n    print(predicted)\n    \n    df.loc[(df.MonthlyIncome.isnull()), 'MonthlyIncome'] = predicted\n    return df","1c7dd817":"for df in combine:\n    df = randomforest_filled_func(df)","0ee20813":"# \u5220\u9664\u5e74\u9f84\u4e3a0\u7684\u6837\u672c\ntrain_df = train_df[train_df['age'] > 0]","dcfaa773":"# \u53ea\u4fdd\u7559 0 < RevolvingUtilizationOfUnsecuredLines < 13 \u7684\u6837\u672c\ntrain_df = train_df[train_df['RevolvingUtilizationOfUnsecuredLines'] < 13]","160156a4":"# \u53ea\u4fdd\u7559NumberOfTimes90DaysLate <= 17 \u7684\u6837\u672c\ntrain_df = train_df[train_df['NumberOfTimes90DaysLate'] <= 17]","e8ae6702":"# \u5220\u9664DebtRatio\u8d85\u8fc797.5%\u7684\u6837\u672c\ntrain_df = train_df.loc[train_df[\"DebtRatio\"] <= train_df[\"DebtRatio\"].quantile(0.975)]","d2e1978d":"train_df.info()","b6406e2d":"train_df.duplicated().value_counts()","ea09998b":"train_df = train_df.drop_duplicates()","9b6f32e2":"#auc\u7ed8\u56fe\u51fd\u6570\ndef plot_roc_curve(fpr, tpr, label=None):\n    plt.figure(figsize=(8,6))\n    plt.plot(fpr,tpr,'b',label= 'AUC= %0.3f' % roc_auc) #\u751f\u6210roc\u66f2\u7ebf\n    plt.legend(loc='lower right')\n    plt.plot([0,1],[0,1],'r--') # \u753b\u76f4\u7ebf\u505a\u53c2\u8003\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive rate\")\n    plt.show()","4ce076d1":"# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nx_train = train_df.iloc[:,2:]\ny_train = train_df['SeriousDlqin2yrs'].astype('uint8')\ntrain_X, test_X, train_y, test_y = train_test_split(x_train,y_train,test_size=.1,random_state=2021, stratify = y_train)","260e2bc8":"# \u968f\u673a\u68ee\u6797\nrfc = RandomForestClassifier(random_state=2021)\nrfc.fit(train_X,train_y)\n\npred = rfc.predict_proba(test_X)[:,1]\nfpr, tpr, _ = roc_curve(test_y, pred) #\u8ba1\u7b97threshold\u9608\u503c\uff0ctpr\u771f\u6b63\u4f8b\u7387\uff0cfpr\u5047\u6b63\u4f8b\u7387\uff0c\u5927\u4e8e\u9608\u503c\u7684\u89c6\u4e3a1\u5373\u574f\u5ba2\u6237\nroc_auc = auc(fpr,tpr) #\u8ba1\u7b97AUC\u503c\nplot_roc_curve(fpr,tpr)\nprint ('AUC Score :', roc_auc)","2959dd89":"lgbm_clf = LGBMClassifier(is_unbalance = True) #\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\nlgbm_clf.fit(train_X,train_y)\nlgbm_clf_proba = lgbm_clf.predict_proba(test_X)[:,1]\nfpr, tpr, _ = roc_curve(test_y, lgbm_clf_proba)\nroc_auc = auc(fpr,tpr)\nprint ('AUC Score :', roc_auc)\nplot_roc_curve(fpr,tpr)","8a521f06":"#\u6700\u4f18\u57fa\u5206\u7c7b\u5668\u6570\u91cfn_estimators\nnum_estimators = range(100,401,10)\ntrain_scores = []\ntest_scores = []\nfor num_estimator in num_estimators:\n    lgbm = LGBMClassifier(is_unbalance = True,num_leaves=60,learning_rate=0.02,n_estimators=num_estimator)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(num_estimators,train_scores,label='Training Score')\nax.plot(num_estimators,test_scores,label='Testing Score')\nax.set_xlabel(r'num')\nax.set_ylabel(r'auc')\nax.set_title('num_estimators')\nax.legend(loc='best')\nplt.show()","8f114a33":"num_estimators[test_scores.index(max(test_scores))]","493131a2":"# \u6700\u4f18learning_rates \nlearning_rates = np.arange(1,11,1)\nlearning_rates = learning_rates\/200.0\ntrain_scores = []\ntest_scores = []\nfor learning_rate in learning_rates:\n    lgbm = LGBMClassifier(is_unbalance = True,num_leaves=60,learning_rate=learning_rate,n_estimators=180)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(learning_rates,train_scores,label='Training Score')\nax.plot(learning_rates,test_scores,label='Testing Score')\nax.set_xlabel(r'rate')\nax.set_ylabel(r'auc')\nax.set_title('learning_rates')\nax.legend(loc='best')\nplt.show()","cb15c66b":"learning_rates [test_scores.index(max(test_scores))]","e3b61961":"max_bins = range(10,71,5) # \u8f83\u5c0f\u7684max_bin\u9632\u6b62\u8fc7\u62df\u5408\ntrain_scores = []\ntest_scores = []\nfor max_bin in max_bins:\n    lgbm = LGBMClassifier(is_unbalance = True,max_bin = max_bin,num_leaves=60,learning_rate=0.025,n_estimators=180)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    #train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(max_bins,train_scores,label='Training Score')\nax.plot(max_bins,test_scores,label='Testing Score')\nax.set_xlabel(r'num')\nax.set_ylabel(r'auc')\nax.set_title('max_bins')\nax.legend(loc='best')\nplt.show()","a6d7e5de":"max_bins[test_scores.index(max(test_scores))]","b8d79f14":"num_leaves = range(10,81,5)\n#train_scores = []\ntest_scores = []\nfor num_leave in num_leaves:\n    lgbm = LGBMClassifier(is_unbalance = True,num_leaves=num_leave,max_bin=40,learning_rate=0.025,n_estimators=180)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    #train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(num_leaves,train_scores,label='Training Score')\nax.plot(num_leaves,test_scores,label='Testing Score')\nax.set_xlabel(r'num')\nax.set_ylabel(r'auc')\nax.set_title('num_leaves')\nax.legend(loc='best')\nplt.show()","88021677":"num_leaves[test_scores.index(max(test_scores))]","6c2e74ae":"max_depths = range(5,21,1)\n#train_scores = []\ntest_scores = []\nfor max_depth in max_depths:\n    lgbm = LGBMClassifier(is_unbalance = True,max_depth=max_depth,num_leaves=30,max_bin=40,learning_rate=0.025,n_estimators=180)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    #train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(max_depths,train_scores,label='Training Score')\nax.plot(max_depths,test_scores,label='Testing Score')\nax.set_xlabel(r'num')\nax.set_ylabel(r'auc')\nax.set_title('max_depths')\nax.legend(loc='best')\nplt.show()","632cb28c":"max_depths[test_scores.index(max(test_scores))]","e1bad6da":"feature_fractions = np.arange(1,11,1)\nfeature_fractions = feature_fractions\/10.0\n#train_scores = []\ntest_scores = []\nfor feature_fraction in feature_fractions:\n    lgbm = LGBMClassifier(is_unbalance = True,max_depth=14,num_leaves=30,max_bin=40,learning_rate=0.025,n_estimators=180,feature_fraction=feature_fraction)\n    lgbm.fit(train_X,train_y)\n    pre_y1 = lgbm.predict_proba(train_X)[:,1]\n    pre_y2 = lgbm.predict_proba(test_X)[:,1]\n    #train_scores.append(roc_auc_score(train_y, pre_y1))\n    test_scores.append(roc_auc_score(test_y, pre_y2))\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n#ax.plot(feature_fractions,train_scores,label='Training Score')\nax.plot(feature_fractions,test_scores,label='Testing Score')\nax.set_xlabel(r'rate')\nax.set_ylabel(r'auc')\nax.set_title('feature_fractions')\nax.legend(loc='best')\nplt.show()","6ee1bb61":"feature_fractions[test_scores.index(max(test_scores))]","5c767b4a":"#\u8bad\u7ec3\u6a21\u578b\nlgbm = LGBMClassifier(is_unbalance = True,max_depth=14,num_leaves=30,max_bin=40,learning_rate=0.025,n_estimators=180,feature_fraction=0.6)\nlgbm.fit(train_X,train_y)\npre_y = lgbm.predict_proba(test_X)[:,1]","9f2ee86b":"#\u5f97\u5206\u663e\u793a\nscore = roc_auc_score(test_y, pre_y)\nprint(score)\n\nfpr,tpr,threshold=roc_curve(test_y,pre_y)  #\u8ba1\u7b97threshold\u9608\u503c\uff0ctpr\u771f\u6b63\u4f8b\u7387\uff0cfpr\u5047\u6b63\u4f8b\u7387\uff0c\u5927\u4e8e\u9608\u503c\u7684\u89c6\u4e3a1\u5373\u574f\u5ba2\u6237\nroc_auc=auc(fpr,tpr)   #\u8ba1\u7b97AUC\u503c\nplt.plot(fpr,tpr,'b',label= 'AUC= %0.3f' % roc_auc) #\u751f\u6210roc\u66f2\u7ebf\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0,1])\nplt.ylim([0,1])\nplt.ylabel('tpr')\nplt.xlabel('fpr')\nplt.show()","5d07afbe":"#\u6a21\u578b\u9884\u6d4b\ntest_df_x = test_df.iloc[:,2:]\npre_y2 = lgbm.predict_proba(test_df_x)[:,1]","70426562":"#\u7ed3\u679c\u5bfc\u51fa\nresult = pd.read_csv('\/kaggle\/input\/GiveMeSomeCredit\/sampleEntry.csv') \nresult['Probability'] = pre_y2\nresult.to_csv('.\/submit.csv',index=False)\nreload = pd.read_csv('.\/submit.csv')\nreload","a7f2e661":"# <a name=\"data\">2. \u83b7\u53d6\u6570\u636e<\/a>","26ae8d6d":"\u5f53NumberRealEstateLoansOrLines>13\u65f6\uff0c\u8fdd\u7ea6\u7387\u6bd4\u603b\u6837\u672c\u7684\u8fdd\u7ea6\u73876.684%\u9ad8\u5f88\u591a\uff0c\u7b26\u5408\u903b\u8f91\u3002","213d71c6":"# <a name=\"eda\">3. \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\uff08EDA\uff09<\/a>","84314f1d":"\u968f\u7740RUUL\u503c\u53d8\u5927\uff08\u4ee3\u8868\u6b20\u503a\u4e25\u91cd\uff09\uff0c\u8fdd\u7ea6\u7387\u5e94\u8be5\u589e\u5927\u3002\u4e0b\u9762\u8f93\u51fa\u968f\u7740RUUL\u6700\u5c0f\u503c\u589e\u5927\uff0c\u8fdd\u7ea6\u7387\u7684\u53d8\u5316\u3002","7195e9b9":"## 4.3 \u91cd\u590d\u503c\u5904\u7406","60583924":"## 3.4 \u91cd\u590d\u6837\u672c\n- \u65e0\u91cd\u590d\u6837\u672c","ba18a7f5":"NumberOfTimes90DaysLate>17\u65f6\uff0c\u8fd9\u4e09\u4e2a\u7279\u5f81\u53d6\u503c\u5b8c\u5168\u4e00\u81f4\uff0c\u4e14\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u5168\u662f96\u6216\u5168\u662f98\uff09\u3002\u7ecf\u8fc7\u7b80\u5355\u8ba1\u7b97\u53ef\u77e5\uff0c\u4e00\u4e2a\u4eba\u57282\u5e74\u5185\u903e\u671f\u8d85\u8fc790\u5929\u4ee5\u4e0a\u7684\u6b21\u6570\u4e0d\u53ef\u80fd\u662f96\u6216\u8005\u662f98\uff0c\u8fd9\u4e9b\u6837\u672c\u663e\u7136\u662f\u5f02\u5e38\u7684\u3002\n\n\u56e0\u6b64\uff0c\u8003\u8651\u5220\u9664NumberOfTimes90DaysLate>17\u7684\u6837\u672c\u3002","6304bb75":"## 3.3\u79bb\u7fa4\u503c\u68c0\u6d4b","8d421092":"2.5%\u7684\u5ba2\u6237\u6bcf\u6708\u8981\u652f\u51fa\u6708\u6536\u5165\u76843490\u500d\u6216\u66f4\u591a","0450f292":"**2. age** \n- \u67091\u4e2a\u5e74\u9f84\u4e3a0\u7684\u6837\u672c\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u5408\u7406\u7684\uff0c\u7a0d\u540e\u5220\u9664\u8be5\u6837\u672c\n- \u8fdd\u7ea6\u5ba2\u6237\u504f\u5411\u4e8e\u5e74\u8f7b\u4eba\u7fa4","8d3ac0ee":"\u7ecf\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u5c06\u8fdb\u884c\u4ee5\u4e0b\u9884\u5904\u7406\uff1a\n- \u5f02\u5e38\u503c\u5904\u7406\n    1. \u5220\u9664\u5e74\u9f84\u4e3a0\u7684\u6837\u672c\n    2. \u53ea\u4fdd\u7559 0 < RevolvingUtilizationOfUnsecuredLines < 12 \u7684\u6837\u672c\n    3. \u53ea\u4fdd\u7559NumberOfTimes90DaysLate <= 17 \u7684\u6837\u672c\n    4. \u5220\u9664DebtRatio\u8d85\u8fc797.5%\u7684\u6837\u672c\n- \u7f3a\u5931\u503c\u5904\u7406\n    1. MonthlyIncome\u7528\u968f\u673a\u68ee\u6797\u9884\u6d4b\u8865\u5168\n    2. \u7528\u4f17\u65700\u586b\u5145NumberOfDependents","4572725b":"**6. NumberOfOpenCreditLinesAndLoans** \u8d37\u6b3e\u6570\u91cf","b65041c6":"### 5.1 \u6a21\u578b\u9009\u62e9\n- \u91c7\u7528\u96c6\u6210\u7b97\u6cd5","a916516d":"## 3.5 \u7279\u5f81\u5206\u5e03\n\n- \u6570\u636e\u96c6\u4e2d\u5404\u4e2a\u7279\u5f81\u7684\u5206\u5e03\u5982\u4f55\uff0c\u662f\u5426\u7c7b\u522b\u4e0d\u5e73\u8861\n\n\n\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/nicholasgah\/eda-credit-scoring-top-100-on-leaderboard","35093a00":"## 3.2 \u7f3a\u5931\u503c\u68c0\u6d4b\n\n- \u8bad\u7ec3\u96c6\n - MonthlyIncome (19.82%)\n - NumberOfDependents (2.62%)\n- \u6d4b\u8bd5\u96c6\n - MonthlyIncome (19.81%)\n - NumberOfDependents (2.59%)","c294026e":"\u53ea\u67096.68%\u5ba2\u6237\u8fdd\u7ea6\uff08SeriousDlqin2yrs=1\uff09\uff0c\u5206\u7c7b\u5206\u5e03\u975e\u5e38\u4e0d\u5e73\u8861\u3002","db1f0640":"**7. NumberRealEstateLoansOrLines** \u62b5\u62bc\u8d37\u6b3e\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u7684\u6570\u91cf","a12210c4":"#### **\u968f\u673a\u68ee\u6797**","e6e02987":"#### **LightGBM**","9ec50efe":"RUUL\u6700\u5c0f\u503c\u4ece12\u523013\uff0c\u8fdd\u7ea6\u7387\u6709\u4e00\u4e2a\u660e\u663e\u7684\u4e0b\u964d\uff0cRUUL\u6700\u5c0f\u503c\u5230\u8fbe12\u65f6\uff0c\u8fdd\u7ea6\u73876.667%\u5df2\u7ecf\u4f4e\u4e8e\u603b\u4f53\u8fdd\u7ea6\u73876.684%\u3002\u53ef\u89c1\uff0cRUUL>=12\u7684\u6570\u636e\u662f\u5f02\u5e38\u7684\u3002","dce042ac":"\u8fd92.5%\u5ba2\u6237\u7684\u6708\u6536\u5165\u53d6\u503c\u6709\u5f02\u5e38\uff1a3750\u4e2a\u6837\u672c\u6708\u6536\u5165\u7279\u5f81\u6709\u5927\u91cf\u7f3a\u5931\uff0c\u53ea\u6709185\u4e2a\u6837\u672c\u7684\u6708\u6536\u5165\u4e0d\u7f3a\u5931\uff0c\u4e14\u53d6\u503c\u53ea\u67090\u548c1\u3002","7aabeece":"**4. DebtRatio** \u6bcf\u6708\u8fd8\u6b3e\u989d\u3001\u8d61\u517b\u8d39\u3001\u751f\u6d3b\u8d39\/\u6bcf\u6708\u603b\u6536\u5165","108b6d8a":"**8. NumberOfDependents**\n\n- NumberOfDependents\u6ca1\u6709\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u5b83\u7684\u4f17\u65700\u8865\u5168\u7f3a\u5931\u503c\u3002","2d688035":"**1. RevolvingUtilizationOfUnsecuredLines** RUUL","baebe4a1":"**5. MonthlyIncome**","95095850":"# <a name=\"identify\">1.\u5b9a\u4e49\u95ee\u9898<\/a>","bb9da4ac":"\u5927\u7ea676.5%\u7684\u5ba2\u6237\u6bcf\u6708\u8981\u652f\u51fa\u5c0f\u4e8e\u6708\u6536\u5165","c2431e73":"**\u7279\u5f81\u7c7b\u578b**\n- \u6807\u79f0\u5c5e\u6027\uff1a\n - \u4e8c\u5143\u5c5e\u6027\uff1aSeriousDlqin2yrs\n- \u6570\u503c\u5c5e\u6027\uff1a\n - \u8fde\u7eed\u578b\u7279\u5f81\u6709\uff1a\n     - RevolvingUtilizationOfUnsecuredLines\n     - MonthlyIncome\n     - DebtRatio\n - \u79bb\u6563\u578b\u7279\u5f81\u6709\uff1a\n     - age\n     - NumberOfTime30-59DaysPastDueNotWorse\n         <br>NumberOfTimes90DaysLate\n         <br>NumberOfTime60-89DaysPastDueNotWorse\n     - NumberOfOpenCreditLinesAndLoans\n     - NumberRealEstateLoansOrLines\n     - NumberOfDependents","c864d9c7":"\u8fd9185\u4eba\u4e2d\u6709164\u4eba\u5c5e\u4e8e\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\uff1a\n1. \u6708\u6536\u5165\u4e3a0\uff0c\u4e0d\u8fdd\u7ea6\n2. \u6708\u6536\u5165\u4e3a1\uff0c\u8fdd\u7ea6\n\n\u8fd92.5%\u7684\u6837\u672c\u663e\u7136\u662f\u5f02\u5e38\u7684\uff0c\u8003\u8651\u5220\u9664\u8fd9\u4e9b\u6837\u672c\u3002","69860f7c":"**3. \u903e\u671f\u6b21\u6570\u76f8\u5173\u7279\u5f81**\n\n- **NumberOfTime30-59DaysPastDueNotWorse**\n- **NumberOfTimes90DaysLate**\n- **NumberOfTime60-89DaysPastDueNotWorse** \n\n\u6ca1\u6709\u5ba2\u6237\u903e\u671f30-59\u5929\u7684\u6b21\u6570\u5728(13, 96)\u8303\u56f4\u5185\uff0c\u6ca1\u6709\u5ba2\u6237\u903e\u671f90\u5929\u4ee5\u4e0a\u7684\u6b21\u6570\u5728(17, 96)\u8303\u56f4\u5185\uff0c\u6ca1\u6709\u5ba2\u6237\u903e\u671f30-59\u5929\u7684\u6b21\u6570\u5728(11, 96)\u8303\u56f4\u5185\u3002","45c48de7":"NumberOfTimes90DaysLate>17\u60c5\u51b5\u4e0b\uff0c\u4e09\u4e2a\u7279\u5f81\u7684\u5206\u5e03\u662f\u4e00\u6837\u7684,\u4e0b\u9762\u67e5\u770b\u5b83\u4eec\u7684\u53d6\u503c\u60c5\u51b5\u3002","546e1367":"|\u5c5e\u6027|\u542b\u4e49|\u7c7b\u578b\n|------ | ------ |------|\n|**1. SeriousDlqin2yrs**|\u9884\u6d4b\u6807\u7b7e\uff0c\u903e\u671f 90 \u5929\u6216\u66f4\u7cdf\u7684\u4eba|Y\/N|\n|**2. RevolvingUtilizationOfUnsecuredLines**|\u4fe1\u7528\u5361\u3001\u4e2a\u4eba\u4fe1\u7528\u989d\u5ea6\uff08\u623f\u5730\u4ea7\u9664\u5916\uff09\u548c\u6c7d\u8f66\u8d37\u6b3e\u7b49\u65e0\u5206\u671f\u4ed8\u6b3e\u503a\u52a1\u7684\u603b\u4f59\u989d\u9664\u4ee5\u4fe1\u7528\u989d\u5ea6\u603b\u548c<br>**\u7406\u89e3**\uff1a\u503a\u52a1\u603b\u989d\/\u4fe1\u7528\u989d\u5ea6\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4ee3\u8868\u6b20\u503a\u4e25\u91cd\u7a0b\u5ea6\uff0c\u8be5\u503c\u8d8a\u5927\uff0c\u8fdd\u7ea6\u7684\u53ef\u80fd\u5e94\u8be5\u8d8a\u5927|percentage|\n|**3. age**|\u501f\u6b3e\u4eba\u5e74\u9f84\uff08\u5e74\uff09|integer|\n|**4. NumberOfTime30-59DaysPastDueNotWorse**|\u501f\u6b3e\u4eba\u903e\u671f30-59\u5929\u7684\u6b21\u6570|integer|\n|**5. DebtRatio**|\u6bcf\u6708\u8fd8\u6b3e\u989d\u3001\u8d61\u517b\u8d39\u3001\u751f\u6d3b\u8d39\u9664\u4ee5\u6bcf\u6708\u603b\u6536\u5165|percentage|\n|**6. MonthlyIncome**|\u6708\u6536\u5165|real|\n|**7. NumberOfOpenCreditLinesAndLoans**|\u8d37\u6b3e\uff08\u5206\u671f\u4ed8\u6b3e\uff0c\u5982\u6c7d\u8f66\u8d37\u6b3e\u6216\u62b5\u62bc\u8d37\u6b3e\uff09\u548c\u4fe1\u7528\u989d\u5ea6\uff08\u4f8b\u5982\u4fe1\u7528\u5361\uff09\u7684\u6570\u91cf|integer|\n|**8. NumberOfTimes90DaysLate**|\u501f\u6b3e\u4eba\u903e\u671f 90 \u5929\u6216\u66f4\u957f\u65f6\u95f4\u7684\u6b21\u6570|integer|\n|**9. NumberRealEstateLoansOrLines**|\u62b5\u62bc\u8d37\u6b3e\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u7684\u6570\u91cf|integer|\n|**10. NumberOfTime60-89DaysPastDueNotWorse**|\u501f\u6b3e\u4eba\u903e\u671f60-89\u5929\u7684\u6b21\u6570|integer|\n|**11. NumberOfDependents**|\u5bb6\u5ead\u53d7\u629a\u517b\u4eba\u6570\u91cf\uff08\u4e0d\u5305\u62ec\u81ea\u5df1\uff09|integer|","804cdead":"## 4.2 \u5f02\u5e38\u503c\u5904\u7406","430c96b2":"Id & Probability","9225763e":"- \u5206\u5e03\u53f3\u504f\n    1. \u53ef\u4ee5\u8003\u8651\u7528\u4e2d\u4f4d\u6570\u3001\u6b63\u6001\u5206\u5e03\uff08\u5747\u503c\u3001\u65b9\u5dee\uff09\u8fdb\u884c\u63d2\u8865\n    2. \u901a\u8fc7\u968f\u673a\u68ee\u6797\u7b97\u6cd5\u63d2\u8865","4e84142d":"\u5f02\u5e38\u503c\u68c0\u6d4b Turkey's Test\uff1a\u8fd9\u91cc\u68c0\u6d4b\u8d85\u8fc7\u4e09\u4e2a\u5f02\u5e38\u503c\u7684\u6837\u672c\n\n\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling\/notebook","2e663942":"## 4.1 \u7f3a\u5931\u503c\u5904\u7406","e4bf403f":"# <a name=\"preprocessing\">4. \u6570\u636e\u9884\u5904\u7406<\/a>","c9cbf5db":"## 3.1 \u6570\u636e\u96c6\u7279\u5f81\u4ecb\u7ecd","d917d7bd":"# <a name=\"modeling\">5. \u5efa\u7acb\u6a21\u578b\uff0c\u9884\u6d4b\u6c42\u89e3<\/a>","52c5dc44":"# \u76ee\u5f55\n[1. \u5b9a\u4e49\u95ee\u9898](#identify)\n\n[2. \u83b7\u53d6\u6570\u636e](#data)\n\n[3. \u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\uff08EDA\uff09](#eda)\n\n[4. \u6570\u636e\u9884\u5904\u7406](#preprocessing)\n\n[5. \u5efa\u7acb\u6a21\u578b\uff0c\u9884\u6d4b\u6c42\u89e3](#modeling)\n\n[6. \u63d0\u4ea4](#submit)","3e36bbaf":"Improve on the state of the art in credit scoring by predicting the probability that somebody will experience financial distress in the next two years.<br>\n\u5efa\u7acb\u4e00\u4e2a\u6a21\u578b\u5e2e\u52a9\u94f6\u884c\u505a\u51fa\u6700\u4f73\u8d22\u52a1\u51b3\u7b56\uff0c\u5373\u9884\u6d4b\u67d0\u4eba\u5728\u672a\u6765\u4e24\u5e74\u5185\u9047\u5230\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\u3002","67f9b1a2":"\u7f3a\u5931\u503c\u6307\u7684\u662f\u73b0\u6709\u6570\u636e\u96c6\u4e2d\u67d0\u4e2a\u6216\u67d0\u4e9b\u5c5e\u6027\u7684\u503c\u662f\u4e0d\u5b8c\u5168\u7684\u3002\n\n\u7f3a\u5931\u503c\u7684\u5904\u7406\u65b9\u6cd5\u4e00\u822c\u5305\u62ec\uff1a\n\n1. \u76f4\u63a5\u4f7f\u7528\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff08\u4e0d\u5904\u7406\uff09\uff1b\n2. \u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u5c5e\u6027\uff08\u8be5\u65b9\u6cd5\u5728\u5305\u542b\u7f3a\u5931\u503c\u7684\u5c5e\u6027\u4ec5\u4ec5\u5305\u542b\u6781\u5c11\u91cf\u6709\u6548\u503c\u65f6\u662f\u6709\u6548\u7684\uff09\uff1b\n3. \u76f4\u63a5\u5220\u9664\u542b\u6709\u7f3a\u5931\u503c\u7684\u6837\u672c\uff1b\n4. \u7f3a\u5931\u503c\u8865\u5168\uff1a\u5747\u503c\u63d2\u8865\u3001\u5efa\u6a21\u9884\u6d4b\u7b49\u7b49","2d24a96f":"# <a name=\"submit\">6. \u63d0\u4ea4<\/a>","25897c2d":"**\u7279\u5f81\u662f\u5426\u6709\u5927\u91cf\u91cd\u590d\u503c**","b0c8e5cb":"- \u7279\u5f81\u5927\u591a\u6570\u4e3a\u91cd\u590d\u503c0\uff1a\n    - NumberOfTime60-89DaysPastDueNotWorse(94.93%)\n    - NumberOfTimes90DaysLate(94.44%)\n    - SeriousDlqin2yrs(93.32%)\n    - NumberOfTime30-59DaysPastDueNotWorse(84.01%)\n    - NumberOfDependents(60.55%)","bc55cf2b":"**\u6570\u636e\u6316\u6398\u4efb\u52a1**\uff1a\u8bad\u7ec3\u4e00\u4e2a\u7528\u4e8e\u4fe1\u7528\u8bc4\u5206\u7684\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u8fdd\u7ea6\u6982\u7387\uff0c\u5e2e\u52a9\u94f6\u884c\u53d6\u5f97\u6700\u5927\u7ecf\u6d4e\u6548\u76ca\u3002\n\n\u5206\u7c7b\u7c7b\u522b\u4e0d\u5e73\u8861\u4f1a\u8ba9\u76d1\u7763\u5b66\u4e60\u7b97\u6cd5\u8fc7\u591a\u5173\u6ce8\u591a\u6570\u7c7b\uff0c\u5206\u7c7b\u6027\u80fd\u4e0b\u964d\u3002\n\u53ef\u91c7\u7528\u7684\u65b9\u6cd5\u6709\uff1a\n- \u968f\u673a\u8fc7\u91c7\u6837\n- \u57fa\u4e8e\u805a\u7c7b\u7684\u8fc7\u91c7\u6837\n- \u4fe1\u606f\u6027\u8fc7\u91c7\u6837SMOTE\n- \u968f\u673a\u6b20\u91c7\u6837\n- \u96c6\u6210\u6280\u672f\n- \u9608\u503c\u79fb\u52a8\n- \u8c03\u6574\u4ee3\u4ef7\u6216\u6743\u91cd\n\n\u53c2\u8003\uff1ahttps:\/\/www.cnblogs.com\/shenggang\/p\/12133016.html","f43be9de":"### 5.2 \u53c2\u6570\u4f18\u5316\n\n\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/wuqiong123\/givemesomecredit123\/notebook\n\n\n\u4e3a\u9632\u6b62\u8fc7\u62df\u5408\uff0c\u5e94\u5f53\u6ce8\u610f\u6b63\u5219\u5316\u53c2\u6570\u7684\u8c03\u4f18\n\u6839\u636elightGBM\u6587\u6863\uff0c\u5f53\u9762\u4e34\u8fc7\u62df\u5408\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u505a\u4ee5\u4e0b\u53c2\u6570\u8c03\u4f18:\n\n1. \u4f7f\u7528\u66f4\u5c0f\u7684max_bin\uff08\u9ed8\u8ba4\u503c255\uff09\n2. \u4f7f\u7528\u66f4\u5c0f\u7684num_leaves\n3. \u4f7f\u7528mindatainleaf\u548cminsumhessianin_leaf\n4. \u901a\u8fc7\u8bbe\u7f6ebaggingfraction\u548cbaggingfreq\u4f7f\u7528bagging_freq\n5. \u901a\u8fc7\u8bbe\u7f6efeature_fraction\u4f7f\u7528\u7279\u5f81\u5b50\u91c7\u6837\n6. \u4f7f\u7528\u66f4\u5927\u7684\u8bad\u7ec3\u6570\u636e\n7. \u5c1d\u8bd5lambdal1\u3001lambdal2\u548cmingainto_split\u8fdb\u884c\u6b63\u5219\u5316\n8. \u5c1d\u8bd5max_depth\u4ee5\u907f\u514d\u6811\u7684\u6df1\u5ea6\u589e\u957f\n\n\u53c2\u8003\uff1ahttps:\/\/baijiahao.baidu.com\/s?id=1677319446132263721&wfr=spider&for=pc"}}