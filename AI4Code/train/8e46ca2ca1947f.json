{"cell_type":{"510bd636":"code","511aec6a":"code","2909e3fd":"code","86280427":"code","8943eef4":"code","5fdf8f9d":"code","a0009ffa":"code","02810b54":"code","4387ffa8":"code","8a448398":"code","844b931a":"code","e558dbe9":"code","7f54d4d9":"code","ee2cfaf8":"code","4f6ed55c":"code","f593ecb1":"code","92ec65ec":"code","b487ff74":"code","865ceda0":"code","efbabd51":"code","8fae6697":"code","9460e183":"code","d8c0b649":"markdown","351f0e7b":"markdown","7ffbbdcf":"markdown","ffc4d013":"markdown","e9287231":"markdown"},"source":{"510bd636":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n%matplotlib inline\n\n#import libraries for Choropleth\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\nimport seaborn as sb\nfrom datetime import datetime, timedelta\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","511aec6a":"# import data\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\nforecast = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntrain","2909e3fd":"# What's the inverval of the data?\nprint(train[\"Date\"].min())\nprint(train[\"Date\"].max())\n\n# Create variable for last day with format Day-Month-Year:\nfirst_date = train[\"Date\"].min()\nlast_date = train[\"Date\"].max()\nlast_date_f = datetime.strptime(train[\"Date\"].max(), \"%Y-%m-%d\").strftime(\"%d-%B-%Y\")\nsecond2last_date = (datetime.strptime(train[\"Date\"].max(), \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")","86280427":"# How many countries are in the data and which ones are they?\nprint(len(train[\"Country_Region\"].unique()))\ncountries = train[\"Country_Region\"].unique()\ncountries","8943eef4":"# Last worldwide results into variables:\nworldwide_evolution_i = train.drop([\"Id\"], axis=1).groupby(\"Date\").sum()\n\nnbr_ww_confirmed_cases = worldwide_evolution_i.loc[train[\"Date\"].max()][0]\nnew_daily_ww_confirmed_cases = worldwide_evolution_i.loc[last_date][0] - worldwide_evolution_i.loc[second2last_date][0]\ngrowth_factor_ww_confirmed_cases = (((worldwide_evolution_i.loc[last_date][0] \/ worldwide_evolution_i.loc[second2last_date][0])-1)*100).round(2)\nnbr_ww_fatalities = worldwide_evolution_i.loc[train[\"Date\"].max()][1]\nnew_daily_ww_fatalities = worldwide_evolution_i.loc[last_date][1] - worldwide_evolution_i.loc[second2last_date][1] \ngrowth_factor_ww_fatalities = (((worldwide_evolution_i.loc[last_date][1] \/ worldwide_evolution_i.loc[second2last_date][1])-1)*100).round(2)\n    \ncfr_ww = (nbr_ww_fatalities\/nbr_ww_confirmed_cases)*100","5fdf8f9d":"# Evolution table per Country & per Date:\nperCountry_evolution_i = train.drop([\"Id\"], axis=1).groupby([\"Country_Region\", \"Date\"]).sum()","a0009ffa":"def get_last_WW_numbers():\n    fig = plt.figure(figsize=(10,10))\n    fig.suptitle(\"   COVID-19 Coronavirus Pandemic - Worldwide Numbers\", fontsize=18, fontweight='bold', COLOR=\"DARKBLUE\")\n    sb.set(style=\"white\")\n\n    ax = fig.add_subplot(111)\n    ax.set_title(\"Update: {}\".format(last_date_f), ha=\"center\")\n    plt.xticks([0,10], \" \")\n    plt.yticks([0,11], \" \")\n    ax.spines['bottom'].set_color('grey')\n    ax.spines['top'].set_color('grey') \n    ax.spines['right'].set_color('white')\n    ax.spines['left'].set_color('white')\n\n    ax.tick_params(right= False,top= False,left= False, bottom= False)\n    ax.text(5, 10.3, \"Number of Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 9.8, \"{:,.0f}\".format(nbr_ww_confirmed_cases), fontsize=20, fontweight='bold', COLOR=\"darkorange\", ha=\"center\")\n    ax.text(5, 8.8, \"New Daily Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 8.3, \"+{:,.0f} \".format(new_daily_ww_confirmed_cases), fontsize=20, fontweight='bold', COLOR=\"darkorange\", ha=\"center\")\n    ax.text(5, 7.3, \"Growth Factor of Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 6.8, \"{:.2f}%\".format(growth_factor_ww_confirmed_cases), fontsize=20, fontweight='bold', COLOR=\"darkgray\", ha=\"center\")\n    ax.text(5, 5.3, \"Number of Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 4.8, \"{:,.0f}\".format(nbr_ww_fatalities), fontsize=20, fontweight='bold', COLOR=\"darkred\", ha=\"center\")\n    ax.text(5, 3.8, \"New Daily Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 3.3, \"+{:,.0f} \".format(new_daily_ww_fatalities), fontsize=20, fontweight='bold', COLOR=\"darkred\", ha=\"center\")\n    ax.text(5, 2.3, \"Growth Factor of Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 1.8, \"{:.2f}%\".format(growth_factor_ww_fatalities), fontsize=20, fontweight='bold', COLOR=\"darkgray\", ha=\"center\")\n    ax.text(5, 0.8, \"Worldwide Case Fatality Rate (%):\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n    ax.text(5, 0.3, \"{:.1f}\".format(cfr_ww), fontsize=20, fontweight='bold', COLOR=\"darkblue\", ha=\"center\")\n    \n\ndef get_last_numbers_perCountry(country):\n    \n    if country in train[\"Country_Region\"].unique():\n    \n        nbr_confirmed_cases_perCountry = perCountry_evolution_i.loc[country].loc[last_date][0]\n        new_daily_confirmed_cases_perCountry = perCountry_evolution_i.loc[country].loc[last_date][0] - perCountry_evolution_i.loc[country].loc[second2last_date][0]\n        growth_factor_confirmed_cases_perCountry = (((perCountry_evolution_i.loc[country].loc[last_date][0] \/ perCountry_evolution_i.loc[country].loc[second2last_date][0])-1)*100).round(2)\n        nbr_fatalities_perCountry = perCountry_evolution_i.loc[country].loc[last_date][1]\n        new_daily_fatalities_perCountry = perCountry_evolution_i.loc[country].loc[last_date][1] - perCountry_evolution_i.loc[country].loc[second2last_date][1] \n        growth_factor_fatalities_perCountry = (((perCountry_evolution_i.loc[country].loc[last_date][1] \/ perCountry_evolution_i.loc[country].loc[second2last_date][1])-1)*100).round(2)\n\n        cfr_perCountry = (nbr_fatalities_perCountry\/nbr_confirmed_cases_perCountry)*100\n\n        fig = plt.figure(figsize=(10,10))\n        fig.suptitle(\"   COVID-19 Coronavirus Pandemic - {} Numbers\".format(country), fontsize=18, fontweight='bold', COLOR=\"DARKBLUE\")\n        sb.set(style=\"white\")\n\n        ax = fig.add_subplot(111)\n        ax.set_title(\"Update: {}\".format(last_date_f), ha=\"center\")\n        plt.xticks([0,10], \" \")\n        plt.yticks([0,11], \" \")\n        ax.spines['bottom'].set_color('grey')\n        ax.spines['top'].set_color('grey') \n        ax.spines['right'].set_color('white')\n        ax.spines['left'].set_color('white')\n\n        ax.tick_params(right= False,top= False,left= False, bottom= False)\n        ax.text(5, 10.3, \"Number of Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 9.8, \"{:,.0f}\".format(nbr_confirmed_cases_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkorange\", ha=\"center\")\n        ax.text(5, 8.8, \"New Daily Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 8.3, \"+{:,.0f} \".format(new_daily_confirmed_cases_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkorange\", ha=\"center\")\n        ax.text(5, 7.3, \"Growth Factor of Confirmed Cases:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 6.8, \"{:.2f}%\".format(growth_factor_confirmed_cases_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkgray\", ha=\"center\")\n        ax.text(5, 5.3, \"Number of Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 4.8, \"{:,.0f}\".format(nbr_fatalities_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkred\", ha=\"center\")\n        ax.text(5, 3.8, \"New Daily Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 3.3, \"+{:,.0f} \".format(new_daily_fatalities_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkred\", ha=\"center\")\n        ax.text(5, 2.3, \"Growth Factor of Fatalities:\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 1.8, \"{:.2f}%\".format(growth_factor_fatalities_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkgray\", ha=\"center\")\n        ax.text(5, 0.8, \"Country Case Fatality Rate (%):\", fontsize=16, fontweight='bold', COLOR=\"black\", ha=\"center\")\n        ax.text(5, 0.3, \"{:.1f}\".format(cfr_perCountry), fontsize=20, fontweight='bold', COLOR=\"darkblue\", ha=\"center\")    \n    \n    else:\n        return \"Country does not exist\"","02810b54":"# Worldwide evolution with addition of new metrics:\nworldwide_evolution = worldwide_evolution_i.reset_index()\n\nCFR = pd.DataFrame({\"CFR (%)\": (worldwide_evolution[\"Fatalities\"] \/ worldwide_evolution[\"ConfirmedCases\"] * 100)})\nCFR[\"CFR (%)\"] = CFR[\"CFR (%)\"].fillna(0)\n\ndays = worldwide_evolution_i.index\n\nww_new_daily_cases = []\nww_new_daily_fatalities = []\nww_growth_factor_cases = []\nww_growth_factor_fatalities = []\n\nfor i in days:\n    yesterday = (datetime.strptime(i, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    \n    if yesterday in days:\n        delta_cc = worldwide_evolution_i.loc[i][\"ConfirmedCases\"]-worldwide_evolution_i.loc[yesterday][\"ConfirmedCases\"]\n        delta_fa = worldwide_evolution_i.loc[i][\"Fatalities\"]-worldwide_evolution_i.loc[yesterday][\"Fatalities\"]\n        growth_cc = ((worldwide_evolution_i.loc[i][\"ConfirmedCases\"]\/worldwide_evolution_i.loc[yesterday][\"ConfirmedCases\"])-1)*100\n        growth_fa = ((worldwide_evolution_i.loc[i][\"Fatalities\"]\/worldwide_evolution_i.loc[yesterday][\"Fatalities\"])-1)*100\n        \n        ww_new_daily_cases.append(delta_cc)\n        ww_new_daily_fatalities.append(delta_fa)\n        ww_growth_factor_cases.append(growth_cc)\n        ww_growth_factor_fatalities.append(growth_fa)\n\n    else:\n        delta = 0\n        ww_new_daily_cases.append(delta)\n        ww_new_daily_fatalities.append(delta)\n        ww_growth_factor_cases.append(delta)\n        ww_growth_factor_fatalities.append(delta)\n\n\nnew_cases = pd.DataFrame({\"New Confirmed Cases\": ww_new_daily_cases, \"New Fatalities\" : ww_new_daily_fatalities})\ngrowth_evolution = pd.DataFrame({\"Growth Factor Confirmed Cases (%)\" : ww_growth_factor_cases, \"Growth Factor Fatalities (%)\" : ww_growth_factor_fatalities})\n\nworldwide_evolution_wGF = worldwide_evolution.join(CFR.round(2), how=\"right\").join(new_cases,how=\"right\").join(growth_evolution.round(2),how=\"right\")","4387ffa8":"worldwide_evolution_wGF","8a448398":"# Per Country evolution with addition of new metrics:\nperCountry_evolution = perCountry_evolution_i.reset_index()\n\nCFR_perCountry = pd.DataFrame({\"CFR (%)\": (perCountry_evolution[\"Fatalities\"] \/ perCountry_evolution[\"ConfirmedCases\"] * 100)})\nCFR_perCountry[\"CFR (%)\"] = CFR_perCountry[\"CFR (%)\"].fillna(0)\n\npc_new_daily_cases = []\npc_new_daily_fatalities = []\npc_growth_factor_cases = []\npc_growth_factor_fatalities = []\n\nfor c in countries:\n    for i in days:\n        yesterday = (datetime.strptime(i, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n\n        if yesterday in days:\n            delta_cc = perCountry_evolution_i.loc[c].loc[i][\"ConfirmedCases\"]-perCountry_evolution_i.loc[c].loc[yesterday][\"ConfirmedCases\"]\n            delta_fa = perCountry_evolution_i.loc[c].loc[i][\"Fatalities\"]-perCountry_evolution_i.loc[c].loc[yesterday][\"Fatalities\"]\n            growth_cc = ((perCountry_evolution_i.loc[c].loc[i][\"ConfirmedCases\"]\/perCountry_evolution_i.loc[c].loc[yesterday][\"ConfirmedCases\"])-1)*100\n            growth_fa = ((perCountry_evolution_i.loc[c].loc[i][\"Fatalities\"]\/perCountry_evolution_i.loc[c].loc[yesterday][\"Fatalities\"])-1)*100\n\n            pc_new_daily_cases.append(delta_cc)\n            pc_new_daily_fatalities.append(delta_fa)\n            pc_growth_factor_cases.append(growth_cc)\n            pc_growth_factor_fatalities.append(growth_fa)\n\n        else:\n            delta = 0\n            pc_new_daily_cases.append(delta)\n            pc_new_daily_fatalities.append(delta)\n            pc_growth_factor_cases.append(delta)\n            pc_growth_factor_fatalities.append(delta)\n\n\npc_new_cases = pd.DataFrame({\"New Confirmed Cases\": pc_new_daily_cases, \"New Fatalities\" : pc_new_daily_fatalities})\npc_growth_evolution = pd.DataFrame({\"Growth Factor Confirmed Cases (%)\" : pc_growth_factor_cases, \"Growth Factor Fatalities (%)\" : pc_growth_factor_fatalities})\npc_growth_evolution[\"Growth Factor Confirmed Cases (%)\"] = pc_growth_evolution[\"Growth Factor Confirmed Cases (%)\"].fillna(0)\npc_growth_evolution[\"Growth Factor Fatalities (%)\"] = pc_growth_evolution[\"Growth Factor Fatalities (%)\"].fillna(0)\nperCountry_evolution_wGF = perCountry_evolution.join(CFR_perCountry.round(2), how=\"right\").join(pc_new_cases,how=\"right\").join(pc_growth_evolution.round(2),how=\"right\")","844b931a":"perCountry_evolution_wGF","e558dbe9":"# Per Country last numbers with addition of new metrics:\nperCountry_evolution_wGF_byDate = perCountry_evolution_wGF.set_index([\"Date\",\"Country_Region\"])\nlast_day = perCountry_evolution_wGF_byDate.loc[train[\"Date\"].max()]\n\n# Group all provinces\/states of each country\nlast_day_perCountry = last_day.groupby(\"Country_Region\").sum()\nlast_day_perCountry_ri = last_day_perCountry.reset_index()\nlast_day_perCountry_ri","7f54d4d9":"################################################# Plot worldwide evolution ##############################################################\ndef plot_WW_evolution():\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"ConfirmedCases\", data=worldwide_evolution, linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"Fatalities\", data=worldwide_evolution, linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - Worlwide Total Numbers\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=[\"Confirmed Cases\", \"Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    plt.show()\n    \ndef plot_ww_CFR_rate():\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"CFR (%)\", data=worldwide_evolution_wGF, linewidth=2, color='darkblue', marker='o', markersize=6)\n    plt.title(\"COVID19 - Worlwide Case Fatality Rate (%)\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"CFR (%)\", fontsize=12)\n    plt.legend(labels=[\"CFR (%)\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.2f'))\n    plt.show()\n    \ndef plot_ww_newCases():\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"New Confirmed Cases\", data=worldwide_evolution_wGF, linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"New Fatalities\", data=worldwide_evolution_wGF, linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - Worlwide New Daily Cases\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=[\"New Confirmed Cases\", \"New Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    plt.show()\n    \ndef plot_ww_growthFactor():\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Confirmed Cases (%)\", data=worldwide_evolution_wGF, linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Fatalities (%)\", data=worldwide_evolution_wGF, linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - Worlwide Growth Factor\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"%\", fontsize=12)\n    plt.legend(labels=[\"New Confirmed Cases\", \"New Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n    ax.set_ylim([None,50])\n    plt.show()\n    \n# Plot last Confirmed cases & fatalites per country ordered by worst cases:    \ndef plot_confirmedCases_top30countries():\n    confirmed_cases = last_day_perCountry_ri.sort_values(\"ConfirmedCases\", ascending = False)\n    plt.figure(figsize=(14,10))\n    sb.set(style=\"darkgrid\")\n    ax = sb.barplot(y=\"Country_Region\", x=\"ConfirmedCases\", data=confirmed_cases.head(30))\n\n    plt.title(\"COVID19 TOP30 Countries - Total Confirmed Cases [\" + last_date_f + \"]\", fontsize = 16)\n    plt.xlabel(\"Counts\", fontsize=12)\n    plt.ylabel(\"Country\", fontsize=12)\n    plt.xticks(rotation=60)\n\n    for p in ax.patches:\n        ax.annotate(\"%.0f\" % p.get_width(), (p.get_x() + p.get_width(), p.get_y()+1.2),\n                xytext=(5, 10), textcoords='offset points')\n\ndef plot_fatalities_top30countries():\n    fatalities = last_day_perCountry_ri.sort_values(\"Fatalities\", ascending = False)\n    plt.figure(figsize=(14,10))\n    sb.set(style=\"darkgrid\")\n    ax = sb.barplot(y=\"Country_Region\", x=\"Fatalities\", data=fatalities.head(30))\n\n    last_date_f = datetime.strptime(train[\"Date\"].max(), \"%Y-%m-%d\").strftime(\"%d-%B-%Y\")\n    plt.title(\"COVID19 TOP30 Countries - Total Fatalities [\" + last_date_f + \"]\", fontsize = 16)\n    plt.xlabel(\"Counts\", fontsize=12)\n    plt.ylabel(\"Country\", fontsize=12)\n    plt.xticks(rotation=60)\n\n    for p in ax.patches:\n        ax.annotate(\"%.0f\" % p.get_width(), (p.get_x() + p.get_width(), p.get_y()+1.2),\n                xytext=(5, 10), textcoords='offset points')\n        \n# Plot last CFR rate for countries with higher confirmed cases (>500):\ndef plot_last_cfr_forTopCountries():\n    CFR_sorted_perCountry = last_day_perCountry_ri.sort_values(\"CFR (%)\", ascending = False)\n    CFR_sorted_forTopCountries = CFR_sorted_perCountry[CFR_sorted_perCountry[\"ConfirmedCases\"] >1000]\n    CFR_sorted_forTopCountries\n\n    plt.figure(figsize=(14,10))\n    sb.set(style=\"darkgrid\")\n    ax = sb.barplot(y=\"Country_Region\", x=\"CFR (%)\", data=CFR_sorted_forTopCountries.head(30))\n\n    plt.title(\"COVID19 - Worst Case Fatality Rate per Country [\" + last_date_f + \"]\", fontsize = 16)\n    plt.xlabel(\"CFR (%)\", fontsize=12)\n    plt.ylabel(\"Country\", fontsize=12)\n    plt.xticks(rotation=60)\n    for p in ax.patches:\n          ax.annotate(\"%.2f\" % p.get_width(), (p.get_x() + p.get_width(), p.get_y()+1.2),\n                    xytext=(5, 10), textcoords='offset points')\n    ax.text(6.2, 25, \"* only countries with at least 1000 \\n   confirmed cases were taken into \\n    account\", fontsize=14)\n\n\n############################################# Plot Per Country evolution #################################################################\nperCountry_evolution_woDate = perCountry_evolution_wGF.set_index([\"Country_Region\"])\n    \ndef plot_perCountry_evolution(country): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"ConfirmedCases\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"Fatalities\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - {} Total Numbers\".format(country), fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=[\"Confirmed Cases\", \"Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    plt.show()\n    \ndef plot_perCountry_CFR_rate(country):\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"CFR (%)\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkblue', marker='o', markersize=6)\n    plt.title(\"COVID19 - {} Case Fatality Rate (%)\".format(country), fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"CFR (%)\", fontsize=12)\n    plt.legend(labels=[\"CFR (%)\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.2f'))\n    plt.show()\n    \ndef plot_perCountry_newCases(country):\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"New Confirmed Cases\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"New Fatalities\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - {} New Daily Cases\".format(country), fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=[\"New Confirmed Cases\", \"New Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n    plt.show()\n\ndef plot_perCountry_growthFactor(country):\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Confirmed Cases (%)\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkblue', marker='o', markersize=6)\n    ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Fatalities (%)\", data=perCountry_evolution_woDate.loc[country], linewidth=2, color='darkred', marker='o', markersize=6)\n    plt.title(\"COVID19 - {} Growth Factor\".format(country), fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"%\", fontsize=12)\n    plt.legend(labels=[\"New Confirmed Cases\", \"New Fatalities\"], fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()\n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n    #ax.set_ylim([None,50])\n    plt.show()\n","ee2cfaf8":"############################################# Plot Comparitive charts for different countries #################################################################\ndef plot_comparative_ConfirmedCases(countryList):    \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"ConfirmedCases\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Confirmed Cases Evolution\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_Fatalities(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"Fatalities\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Fatalities Evolution\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_CFR(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"CFR (%)\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))    \n\n    plt.title(\"COVID19 - Case Fatality Rate Evolution (%)\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()\n    \ndef plot_comparative_NewConfirmedCases(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"New Confirmed Cases\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))    \n        \n    plt.title(\"COVID19 - New Confirmed Cases\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Count\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_NewFatalities(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"New Fatalities\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))    \n            \n    plt.title(\"COVID19 - New Fatalities\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"Count\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_GF_ConfirmedCases(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Confirmed Cases (%)\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))    \n            \n    plt.title(\"COVID19 - Growth Factor of Confirmed Cases (%)\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()\n    \ndef plot_comparative_GF_Fatalities(countryList): \n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n\n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            ax = sb.lineplot(x=\"Date\", y=\"Growth Factor Fatalities (%)\", data=perCountry_evolution_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))   \n            \n    plt.title(\"COVID19 - Growth Factor of Fatalities (%)\", fontsize = 16)\n    plt.xlabel(\"Date\", fontsize=12)\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()\n\n\n############################################# Plot Comparitive charts for different countries #################################################################\ndef plot_comparative_CC_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"ConfirmedCases\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Confirmed Cases Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n\ndef plot_comparative_F_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"Fatalities\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Fatalities Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n\ndef plot_comparative_CFR_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"CFR (%)\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - CFR (%) Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()\n    \ndef plot_comparative_NewCC_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"New Confirmed Cases\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - New Confirmed Cases Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_GrowthCC_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"Growth Factor Confirmed Cases (%)\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Growth Factor Confirmed Cases (%) Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()\n\ndef plot_comparative_NewF_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"New Fatalities\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - New Fatalities Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"Counts\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n\n    plt.show()\n    \ndef plot_comparative_GrowthF_sincePatient(patient,countryList): \n    perCountry_evolution_patient=perCountry_evolution_wGF[perCountry_evolution_wGF[\"ConfirmedCases\"]>=patient]\n    perCountry_evolution_patient_woDate = perCountry_evolution_patient.set_index([\"Country_Region\"])\n\n    plt.figure(figsize=(14,8))\n    sb.set(style=\"darkgrid\")\n    palette = plt.get_cmap('Dark2')\n    \n    for c in countryList:\n        if c in train[\"Country_Region\"].unique():\n            x= (len(perCountry_evolution_patient_woDate.loc[c])+1)\n            ax = sb.lineplot(x=np.arange(1,x,1), y=\"Growth Factor Fatalities (%)\", data=perCountry_evolution_patient_woDate.loc[c], linewidth=2, marker='o', markersize=6)\n        else: \n            print(\"{} coutry doesn't exist!\".format(c))\n            \n    plt.title(\"COVID19 - Growth Factor Fatalities (%) Evolution\", fontsize = 16)\n    plt.xlabel(\"Days since patient #{}\".format(patient), fontsize=12)\n    #ax.set_yscale('log')\n    plt.ylabel(\"(%)\", fontsize=12)\n    plt.legend(labels=countryList, fontsize = 12)\n    plt.xticks(rotation=60)\n    ax=plt.axes()                                                                                                                                                                    \n    ax.xaxis.set_major_locator(ticker.MultipleLocator(2))\n    ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))\n\n    plt.show()","4f6ed55c":"# Create the Choropleth\ndef confirmedCases_map():\n    fig = go.Figure(data=go.Choropleth(locations = last_day_perCountry_ri['Country_Region'], locationmode = 'country names', z = last_day_perCountry_ri['ConfirmedCases'],\n        colorscale = 'Reds', marker_line_color = 'black',marker_line_width = 0.5, \n    ))\n\n    fig.update_layout(\n        title_text = \"Confirmed Cases as {}\".format(last_date_f),\n        title_x = 0.5,\n        width=1400, \n        height=700,\n        geo=dict(\n            showframe = True,\n            showcoastlines = False,\n            projection_type = 'equirectangular'\n        )\n    )\n    fig.show()\n    \ndef new_confirmedCases_map():\n    fig = go.Figure(data=go.Choropleth(locations = last_day_perCountry_ri['Country_Region'], locationmode = 'country names', z = last_day_perCountry_ri['New Confirmed Cases'],\n        colorscale = 'Reds', marker_line_color = 'black',marker_line_width = 0.5, \n    ))\n\n    fig.update_layout(\n        title_text = \"New Confirmed Cases as {}\".format(last_date_f),\n        title_x = 0.5,\n        width=1400, \n        height=700,\n        geo=dict(\n            showframe = True,\n            showcoastlines = False,\n            projection_type = 'equirectangular'\n        )\n    )\n    fig.show()\n    \ndef fatalities_map():\n    fig = go.Figure(data=go.Choropleth(locations = last_day_perCountry_ri['Country_Region'], locationmode = 'country names', z = last_day_perCountry_ri['Fatalities'],\n        colorscale = 'Reds', marker_line_color = 'black',marker_line_width = 0.5, \n    ))\n\n    fig.update_layout(\n        title_text = \"Fatalities as {}\".format(last_date_f),\n        title_x = 0.5,\n        width=1400, \n        height=700,\n        geo=dict(\n            showframe = True,\n            showcoastlines = False,\n            projection_type = 'equirectangular'\n        )\n    )\n    fig.show()\n    \ndef new_fatalities_map():\n    fig = go.Figure(data=go.Choropleth(locations = last_day_perCountry_ri['Country_Region'], locationmode = 'country names', z = last_day_perCountry_ri['New Fatalities'],\n        colorscale = 'Reds', marker_line_color = 'black',marker_line_width = 0.5, \n    ))\n\n    fig.update_layout(\n        title_text = \"New Fatalities as {}\".format(last_date_f),\n        title_x = 0.5,\n        width=1400, \n        height=700,\n        geo=dict(\n            showframe = True,\n            showcoastlines = False,\n            projection_type = 'equirectangular'\n        )\n    )\n    fig.show()","f593ecb1":"# Get last Worlwide results:\ndef worlwide_evolution():\n    get_last_WW_numbers()\n    plot_WW_evolution()\n    plot_ww_newCases()\n    plot_ww_growthFactor()\n    plot_ww_CFR_rate()\n    plot_confirmedCases_top30countries()\n    plot_fatalities_top30countries()\n    plot_last_cfr_forTopCountries()\n\n# Get last perCountry results:\ndef perCountry_evolution(country):\n    get_last_numbers_perCountry(country)\n    plot_perCountry_evolution(country)\n    plot_perCountry_newCases(country)\n    plot_perCountry_growthFactor(country)\n    plot_perCountry_CFR_rate(country)\n\n# Plot comparative charts with countries input from user:\ndef comparative_plots(countryList):\n    plot_comparative_ConfirmedCases(countryList)\n    plot_comparative_Fatalities(countryList)\n    plot_comparative_CFR(countryList)\n    plot_comparative_NewConfirmedCases(countryList)\n    plot_comparative_GF_ConfirmedCases(countryList)\n    plot_comparative_NewFatalities(countryList)\n    plot_comparative_GF_Fatalities(countryList)\n    \n# Plot comparative charts with countries input from user since patient #x:\ndef comparative_plots_sincePatient(patient, countryList):\n    plot_comparative_CC_sincePatient(patient, countryList)\n    plot_comparative_F_sincePatient(patient, countryList)\n    plot_comparative_CFR_sincePatient(patient, countryList)\n    plot_comparative_NewCC_sincePatient(patient, countryList)\n    plot_comparative_GrowthCC_sincePatient(patient, countryList)\n    plot_comparative_NewF_sincePatient(patient, countryList)\n    plot_comparative_GrowthCC_sincePatient(patient, countryList)\n    \n# Plot maps:\ndef maps_plot():\n    confirmedCases_map()\n    new_confirmedCases_map()\n    fatalities_map()\n    new_fatalities_map()","92ec65ec":"worlwide_evolution()","b487ff74":"maps_plot()","865ceda0":"# Manipulating the original dataframe\ncountrydate_evolution = train[train['ConfirmedCases']>0]\ncountrydate_evolution = countrydate_evolution.groupby(['Date','Country_Region']).sum().reset_index()\n\n# Creating the visualization\nfig = px.choropleth(countrydate_evolution, locations=\"Country_Region\", locationmode = \"country names\", color=\"ConfirmedCases\", \n                    hover_name=\"Country_Region\", animation_frame=\"Date\", \n                   )\n\nfig.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    autosize=True,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nfig.show()","efbabd51":"perCountry_evolution(\"Japan\")","8fae6697":"comparative_plots([\"Portugal\",\"Italy\", \"Spain\"])","9460e183":"comparative_plots_sincePatient(100,[\"Portugal\", \"Netherlands\", \"Germany\", \"Italy\", \"Spain\", \"France\", \"United Kingdom\"])","d8c0b649":"# COVID19 - Country Dashboard","351f0e7b":"# COVID19 - Summary Dashboard","7ffbbdcf":"# COVID19 - Comparative Dashboard since Patient X","ffc4d013":"# COVID19 - Comparative Dashboard","e9287231":"# COVID19 - MAPS "}}