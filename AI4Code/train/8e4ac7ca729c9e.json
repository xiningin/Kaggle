{"cell_type":{"d255647b":"code","e735a235":"code","5fcc1445":"code","9a0b24e6":"code","b574a429":"code","46f3f6b3":"code","5b4cfc06":"code","1e33015a":"code","497e3802":"code","30335316":"code","45e59e81":"code","bda676be":"code","05431550":"code","b5fb0f93":"code","86e67158":"code","9c40da14":"code","1a983fbc":"code","28eb622e":"code","12a6050d":"code","6e4009c6":"code","39f15f20":"code","91cd9caa":"code","4f4b243f":"code","2410bfa6":"code","cd7f51a3":"code","e898ff21":"code","042b4027":"code","f2a2ae6c":"code","8c176b09":"code","af6945b6":"code","32515acc":"code","285e878c":"code","6cc94e3a":"code","5308e481":"code","ae1c40f5":"code","c4ea0e86":"code","8b6d97c5":"code","c36d87d8":"code","55018190":"code","75c0a763":"code","bad1eef0":"code","e94c3e7f":"code","85ba9212":"code","c97ca3c2":"code","cf076e5d":"code","161845f4":"code","b78c2baa":"code","63ddecb2":"code","76279b56":"code","ea0eac71":"code","1de2b101":"code","b510d359":"code","c51f7dde":"code","33ee6494":"code","2813f8c0":"code","31b056f6":"code","5687bad6":"code","09932da0":"code","f011335f":"code","6cd1fe85":"code","71bf5f73":"code","94c657ca":"code","f5a1821d":"code","5ebfa036":"code","92056fe5":"code","15a03b74":"code","cf211d8c":"code","d93e9171":"code","d60e9fec":"code","19070f3a":"code","a0878714":"code","79e8ba73":"code","d9da6ac1":"code","188677a0":"code","7cd99601":"code","cc6475ab":"code","42d1b3de":"code","bb68925a":"code","0480ebb7":"code","c1dbd653":"code","ba1b4123":"code","475cdbb5":"code","a0a16c53":"code","49c44372":"code","67b2511a":"code","edc15d8a":"code","9ce67768":"code","78b83586":"code","2b804d2a":"code","d45c0f61":"code","8d15125d":"code","3bb599df":"code","6ef611c4":"code","514630bc":"code","a9a270e5":"code","fb92eea7":"code","cb71c64d":"code","f77e3d04":"code","e9302906":"code","bf8d3ae6":"code","14f179e2":"code","04c6a2d2":"code","5a3c2c73":"code","b7f35770":"code","6c2245e3":"code","247cf0e2":"code","bec5bb40":"code","bdceeb46":"code","9c3e8813":"code","ab098714":"code","47858efd":"code","5383dedb":"code","7d9eb273":"code","09d4ce43":"code","0c0c3a6f":"code","efd73361":"code","b481c0cb":"code","fd0115d1":"code","babc2a7e":"code","44a225d5":"code","4bcd3c85":"code","660f2423":"code","293896d8":"code","d35405c2":"code","f0c6d655":"code","1d361153":"code","ea96ad4b":"code","3aa61415":"code","c6890c20":"code","dc4bfc91":"markdown","8e1b0e80":"markdown","7b9c9373":"markdown","8246029b":"markdown","f62c9496":"markdown","819af311":"markdown","4e8411b4":"markdown","6f6af899":"markdown","2cf73bc8":"markdown","1c3f7814":"markdown","4143e6ea":"markdown","30993f80":"markdown"},"source":{"d255647b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e735a235":"import datetime\nfrom kaggle.competitions import nflrush\nimport pandas as pd\nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nimport h2o\nfrom h2o.estimators import H2ORandomForestEstimator\nfrom h2o.grid.grid_search import H2OGridSearch\nfrom h2o.estimators import H2OXGBoostEstimator\nfrom scipy.stats import ttest_ind\nfrom scipy.stats import ks_2samp\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom itertools import combinations \nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator","5fcc1445":"env = nflrush.make_env()","9a0b24e6":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","b574a429":"h2o.init()","46f3f6b3":"train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","5b4cfc06":"def strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans\n","1e33015a":"train_df[\"GameClock\"]= train_df[\"GameClock\"].apply(strtoseconds)\ntrain_df[\"TimeDelta\"]= pd.to_datetime(train_df[\"TimeHandoff\"]) - pd.to_datetime(train_df[\"TimeSnap\"])\ntrain_df = train_df.drop([\"TimeHandoff\",\"TimeSnap\"], axis=1)\ntrain_df=train_df.drop([\"NflId\", \"DisplayName\",\"JerseyNumber\",\"Location\"],axis=1)","497e3802":"train_df= reduce_mem_usage(train_df)","30335316":" arr = [ t.split(\", \") for t in train_df[\"OffensePersonnel\"]]","45e59e81":"for i in arr[1]:\n    if \"RB\" in i:\n        print(int(i[0]))\n","bda676be":"train_df[\"RB-Defense\"] = 0","05431550":"for i in arr[1:10]:\n    if \"RB\" in i :\n        print(i)","b5fb0f93":"train_df[\"RB-Defense\"] = [[i[0] if \"RB\" in i else 0 for i in line] for line in arr]","86e67158":"train_df[\"RB-Defense\"].sum()","9c40da14":"train_df[\"RB-Defense\"]","1a983fbc":"train_df[\"OffensePersonnel\"]","28eb622e":"train_df[\"OffensePersonnel\"].value_counts().index.sort_values()","12a6050d":"trian_df_h2o= h2o.H2OFrame(train_df)","6e4009c6":"h2o_tree = H2ORandomForestEstimator(ntrees = 50, max_depth = 20, nfolds =10)\n#train the model,if x not specify,model will use all x except the y column\nh2o_tree.train(y = 'Yards', training_frame = trian_df_h2o)\n#print variable importance\nh2o_tree_df = h2o_tree._model_json['output']['variable_importances'].as_data_frame()\n#visualize the importance","39f15f20":"h2o_tree_df","91cd9caa":"'''param = {\n    \n      \"ntrees\" : 100\n    , \"learn_rate\" : 0.1\n    , \"max_depth\" : 20\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100\n    ,  'nfolds': 10\n    , \"stopping_metric\": \"MSE\"\n}\nXGmodel = H2OXGBoostEstimator(**param)\nXGmodel.train(y = 'Yards', training_frame = trian_df_h2o)\nh2o_XGboost_df =XGmodel._model_json['output']['variable_importances'].as_data_frame()\n'''\n","4f4b243f":"lm_model = H2OGeneralizedLinearEstimator(family= \"multinomial\", lambda_ = 0)","2410bfa6":"trian_df_h2o['Yards'] = trian_df_h2o['Yards'].asfactor()","cd7f51a3":"lm_model.train(y = 'Yards', training_frame = trian_df_h2o)","e898ff21":"iter_test = env.iter_test()","042b4027":"(test_df, sample_prediction_df) = next(iter_test)","f2a2ae6c":"sample_prediction_df[:20]","8c176b09":"test_df[\"GameClock\"]= test_df[\"GameClock\"].apply(strtoseconds)\ntest_df[\"TimeDelta\"]= pd.to_datetime(test_df[\"TimeHandoff\"]) - pd.to_datetime(test_df[\"TimeSnap\"])\ntest_df = test_df.drop([\"TimeHandoff\",\"TimeSnap\"], axis=1)\ntest_df=test_df.drop([\"NflId\", \"DisplayName\",\"JerseyNumber\",\"Location\"],axis=1)","af6945b6":"test_df.shape","32515acc":"test_df_h2o= h2o.H2OFrame(test_df)","285e878c":"prediction_Df = lm_model.predict(test_df_h2o)","6cc94e3a":"prediction_Df1 =prediction_Df.as_data_frame(use_pandas=True, header=True)","5308e481":"colnames = list(map(lambda st: str.replace(st, \"p\", \"Yards\"), prediction_Df.columns))","ae1c40f5":"prediction_Df1['Yardsredict']","c4ea0e86":"prediction_Df1.columns = colnames","8b6d97c5":"test = pd.concat([sample_prediction_df,prediction_Df1],axis =0,sort=False)","c36d87d8":"sample_prediction_df.columns","55018190":"test = test.drop('Yardsredict',axis =1)","75c0a763":"test = test[1:23]","bad1eef0":"test = test.fillna(0)","e94c3e7f":"test = test.drop('PlayId',axis =1)","85ba9212":"env.predict(test)","c97ca3c2":"for (test_df, test) in iter_test:\n    env.predict(test)","cf076e5d":"env.write_submission_file()","161845f4":"import os\nprint([filename for filename in os.listdir('\/kaggle\/working') if '.csv' in filename])","b78c2baa":"test[1:23]","63ddecb2":"prediction_Df.","76279b56":"colnames = []","ea0eac71":"sample_prediction_df.conca","1de2b101":"h2o_XGboost_df","b510d359":"h2o_XGboost_df.to_csv(\"FeatureImportance.csv\")","c51f7dde":"outdoor = ['Outdoor', 'Outdoors', 'Cloudy', 'Heinz Field', 'Outdor', 'Ourdoor', \n           'Outside', 'Outddors','Outdoor Retr Roof-Open', 'Oudoor', 'Bowl']\n\nindoor_closed = ['Indoors', 'Indoor', 'Indoor, Roof Closed', 'Indoor, Roof Closed', 'Retractable Roof',\n                 'Retr. Roof-Closed', 'Retr. Roof - Closed', 'Retr. Roof Closed']\n\nindoor_open   = ['Indoor, Open Roof', 'Open', 'Retr. Roof-Open', 'Retr. Roof - Open']\ndome_closed   = ['Dome', 'Domed, closed', 'Closed Dome', 'Domed', 'Dome, closed']\ndome_open     = ['Domed, Open', 'Domed, open']","33ee6494":"train_df['StadiumType'] = train_df['StadiumType'].replace(outdoor,'outdoor')\ntrain_df['StadiumType'] = train_df['StadiumType'].replace(indoor_closed,'indoor_closed')\ntrain_df['StadiumType'] = train_df['StadiumType'].replace(indoor_open,'indoor_open')\ntrain_df['StadiumType'] = train_df['StadiumType'].replace(dome_closed,'dome_closed')\ntrain_df['StadiumType'] = train_df['StadiumType'].replace(dome_open,'dome_open')\ntrain_df['StadiumType'] = train_df['StadiumType'].replace(np.nan, \"Missing\")","2813f8c0":"def anova_test_mean(column):\n    formular = \"Yards~\"+column\n    model = ols(formular,data = train_df).fit()\n    anova_result = sm.stats.anova_lm(model, typ=2)\n    print(anova_result)\ndef Ks_test_Cat(column):\n    list_of_cat = train_df[column].unique()\n    comb = combinations(list_of_cat, 2) \n    test = list(comb)\n    NoVariance = []\n    for i in list(test):\n        result = ks_2samp(train_df[train_df[column]==i[0]][\"Yards\"],train_df[train_df[column]==i[1]][\"Yards\"])\n        if result[1]>0.01:\n            NoVariance.append(i)\n    print(NoVariance)\n    \n","31b056f6":"Ks_test_Cat(\"JerseyNumber\")","5687bad6":"Ks_test_Cat(\"WindDirection\")","09932da0":"ks_2samp(train_df[train_df[\"WindDirection\"]==\"S\"][\"Yards\"],train_df[train_df[\"WindDirection\"]==\"N\"][\"Yards\"])","f011335f":"Ks_test_Cat(\"OffensePersonnel\")","6cd1fe85":"ks_2samp(train_df[train_df[\"JerseyNumber\"]==29][\"Yards\"],train_df[train_df[\"JerseyNumber\"]==23][\"Yards\"])[1]","71bf5f73":"test_mean('Location')","94c657ca":"train_df['StadiumType'].value_counts().index.sort_values()","f5a1821d":"train_df[train_df['StadiumType']== 'Cloudy'][\"Stadium\"]","5ebfa036":"train_df['Stadium'].value_counts()","92056fe5":"train_df[train_df['Stadium']=='Paul Brown Stdium']","15a03b74":"#Data Preprocessing:\n#Stadium Type ","cf211d8c":"Mean_Std_Count(\"GameId\")","d93e9171":"Mean_Std_Count(\"PlayId\")","d60e9fec":"train_df=train_df.drop([\"NflId\", \"DisplayName\",\"JerseyNumber\",\"Location\"],axis=1)","19070f3a":"kf=KFold(n_splits = 5)\nresu1 = 0\nimpor1 = 0\nresu2_cprs = 0\nresu3_mae=0\n##y_pred = 0\nstack_train = np.zeros([X_train.shape[0],])\nmodels = []\nfor train_index, test_index in kf.split(X_train, y_train):\n    X_train2= X_train.iloc[train_index,:]\n    y_train2= y_train.iloc[train_index]\n    X_test2= X_train.iloc[test_index,:]\n    y_test2= y_train.iloc[test_index]","a0878714":"train_data = lgb.Dataset(train_df.drop([\"Yards\"], axis=1))","79e8ba73":"y_train = lgb.Dataset(train_df[\"Yards\"])","d9da6ac1":"clf = lgb.LGBMRegressor(n_estimators=10000, random_state=47,learning_rate=0.005,importance_type = 'gain',\n                     n_jobs = -1,metric='mae')","188677a0":"clf.fit(train_data,y_train)","7cd99601":"train_df=train_df.dropna(how = \"any\")","cc6475ab":"train_frame = train_df.sample(frac=0.5, replace=True, random_state=1)\nval_frame = train_df.sample(frac=0.5, replace=True, random_state=1)","42d1b3de":"#prepare H2O Frame \ntrain_frame_H2O = h2o.H2OFrame(train_frame)\nval_frame_H2O = h2o.H2OFrame(val_frame)","bb68925a":"# select parameter\n\"\"\"\nhyper_params = {'max_depth' : [4,6,8,12,16,20]\n               ,\"learn_rate\" : [0.1, 0.01, 0.0001] \n               }\nparam_grid = {\n      \"ntrees\" : 50\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100\n    ,  'nfolds': 10\n    , \"stopping_metric\" : \"AUC\",\n    \"categorical_encoding\":\"enum_limited\"\n}\nmodel_grid = H2OXGBoostEstimator(**param_grid)\ngrid = H2OGridSearch(model_grid,hyper_params,\n                         grid_id = 'depth_grid',\n                         search_criteria = {'strategy': \"Cartesian\"})\ngrid.train(y='Yards',training_frame = train_frame_H2O, validation_frame=val_frame_H2O)\ngb_gridperf = grid.get_grid(sort_by='mse', decreasing=True)\n\"\"\"","0480ebb7":"#gb_gridperf","c1dbd653":"best_param = {\n      \"ntrees\" : 100\n    , \"learn_rate\" : 0.1\n    , \"max_depth\" : 20\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100\n    ,  'nfolds': 10\n    ,\"categorical_encoding\":\"enum_limited\"\n    , \"stopping_metric\" : \"AUC\"\n}\n\nbest_model = H2OXGBoostEstimator(**best_param)\nbest_model.train(y = 'Yards', training_frame = train_frame_H2O)","ba1b4123":"best_metrics = best_model.model_performance(test_data=val_frame_H2O) \nbest_metrics","475cdbb5":"def plot_bar_x(DataSeries, xLabel, yLabel):\n    # this is for plotting a specific bar chart for the Series \n    # input a Series \n    # output a vertical bar chart for a Series \n    index = np.arange(len(DataSeries))\n    plt.bar(index, DataSeries[yLabel])\n    #plt.xlabel(xLabel, fontsize=10)\n    #plt.ylabel(yLabel, fontsize=10)\n    plt.xticks(index, DataSeries[xLabel], fontsize=10, rotation=30)\n    return plt\ndef Draw_Cat_Var(column, dataset,target):\n    DATA = dataset[[column, target]].fillna(\"NA\")\n    Cat_EDA = DATA.groupby(column).mean()[target]\n    plot_bar_x(Cat_EDA, column,target)\n","a0a16c53":"#exam the missing values\n(train_df.isnull().sum()\/len(train_df)).sort_values(ascending = False)","49c44372":"def Plot_Team():\n    plot1 = train_df[train_df[\"Team\"]==\"away\"][\"Yards\"]\n    plot2 = train_df[train_df[\"Team\"]==\"home\"][\"Yards\"]\n    bins = numpy.linspace(0, 100, 100)\n    plt.hist(plot1, bins, alpha=0.5, label='away')\n    plt.hist(plot2, bins, alpha=0.5, label='home')\n    plt.legend(loc='upper right')\n    plt.show()\n\n","67b2511a":"train_df.columns","edc15d8a":"train_df[\"Yards\"].hist()","9ce67768":"'''\n#light Xgboost\ntrain = train_df.sample(frac=0.5, replace=True, random_state=1)\nValidate = train_df.sample(frac=0.5, replace=True, random_state=1)\nX_train_lgbm = lgb.Dataset(train.drop(\"Yards\", axis =1), label = train[\"Yards\"])\nX_validate_lgbm = lgb.Dataset(Validate.drop(\"Yards\", axis =1), label = Validate[\"Yards\"])\n\nevals_result = {}\n\nbase_params = {\n        \"objective\" : \"multiclass\",\n    \"num_class\":94,\n        \"metric\" : \"auc\",\n        \"is_unbalance\" : True,\n        \"tree_learner\": \"voting\",  \n        'max_bin': 255,\n        'max_depth': -1,\n        \"min_child_samples\" : 100,\n        'verbose_eval': 10,\n        'num_boost_round': 170,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.7,\n        \"bagging_frequency\" : 5,\n        \"bagging_seed\" : 1234,\n        'boosting_type':'gbdt'\n    }\nbase_lgb_model = lgb.train(base_params, train_set=X_train_lgbm,\n                           valid_sets=X_validate_lgbm,\n                           evals_result = evals_result\n                           )\n'''","78b83586":"def Mean_Std_Count(Column):\n    Try1 = train_df[[Column, \"Yards\"]].groupby(Column).mean().sort_values(by = \"Yards\").reset_index()\n    Try2 = train_df[[Column, \"Yards\"]].groupby(Column).std().sort_values(by = \"Yards\").reset_index()\n    Try3 = train_df[[Column, \"Yards\"]].groupby(Column).count().sort_values(by = \"Yards\").reset_index()\n    fig = plt.figure(figsize=(12,4), dpi=100)\n    fig.suptitle( Column+\" Features\", fontsize=16)\n    plt.subplot(131)\n    plot_bar_x(Try1, Column, \"Yards\")\n    plt.xlabel(\"Mean\")\n    plt.subplot(132)\n    plot_bar_x(Try2, Column, \"Yards\")\n    plt.xlabel(\"std\")\n    plt.subplot(133)\n    plot_bar_x(Try3,  Column, \"Yards\")\n    plt.xlabel(\"Count\")\n\n","2b804d2a":"Mean_Std_Count(\"NflId\")","d45c0f61":"train_df['WindDirection'].value_counts()","8d15125d":"Mean_Std_Count('WindDirection')","3bb599df":"Mean_Std_Count('WindSpeed')","6ef611c4":"Mean_Std_Count('Humidity')","514630bc":"Mean_Std_Count('Temperature')","a9a270e5":"Mean_Std_Count('GameWeather')","fb92eea7":"Mean_Std_Count('StadiumType')","cb71c64d":"Mean_Std_Count('Location')","f77e3d04":"Mean_Std_Count('Stadium')","e9302906":"Mean_Std_Count('PlayerBirthDate')","bf8d3ae6":"Mean_Std_Count('PlayerWeight')","14f179e2":"Mean_Std_Count('PlayerHeight')","04c6a2d2":"Mean_Std_Count('PlayerCollegeName')","5a3c2c73":"Mean_Std_Count(\"NflId\")","b7f35770":"Mean_Std_Count('JerseyNumber')","6c2245e3":"Mean_Std_Count('DisplayName')","247cf0e2":"Try1 = train_df[['Season', \"Yards\"]].groupby('Season').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try1, 'Season', \"Yards\")","bec5bb40":"Try = train_df[['Turf', \"Yards\"]].groupby('Turf').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Turf', \"Yards\")","bdceeb46":"Try = train_df[['Week', \"Yards\"]].groupby('Week').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Week', \"Yards\")","9c3e8813":"Try = train_df[['VisitorTeamAbbr', \"Yards\"]].groupby('VisitorTeamAbbr').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'VisitorTeamAbbr', \"Yards\")","ab098714":"Try = train_df[['HomeTeamAbbr', \"Yards\"]].groupby('HomeTeamAbbr').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'HomeTeamAbbr', \"Yards\")","47858efd":"Try = train_df[['Position', \"Yards\"]].groupby('Position').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Position', \"Yards\")","5383dedb":"Try = train_df[['PlayDirection', \"Yards\"]].groupby('PlayDirection').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'PlayDirection', \"Yards\")","7d9eb273":"Try = train_df[['DefensePersonnel', \"Yards\"]].groupby('DefensePersonnel').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'DefensePersonnel', \"Yards\")","09d4ce43":"Try = train_df[['DefendersInTheBox', \"Yards\"]].groupby('DefendersInTheBox').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'DefendersInTheBox', \"Yards\")","0c0c3a6f":"Try = train_df[['OffensePersonnel', \"Yards\"]].groupby('OffensePersonnel').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'OffensePersonnel', \"Yards\")","efd73361":"Try = train_df[['OffenseFormation', \"Yards\"]].groupby('OffenseFormation').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'OffenseFormation', \"Yards\")","b481c0cb":"Try = train_df[['NflIdRusher', \"Yards\"]].groupby('NflIdRusher').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'NflIdRusher', \"Yards\")","fd0115d1":"Try = train_df[['VisitorScoreBeforePlay', \"Yards\"]].groupby('VisitorScoreBeforePlay').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'VisitorScoreBeforePlay', \"Yards\")","babc2a7e":"Try = train_df[['HomeScoreBeforePlay', \"Yards\"]].groupby('HomeScoreBeforePlay').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'HomeScoreBeforePlay', \"Yards\")","44a225d5":"Try = train_df[['FieldPosition', \"Yards\"]].groupby('FieldPosition').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'FieldPosition', \"Yards\")","4bcd3c85":"Try = train_df[['Distance', \"Yards\"]].groupby('Distance').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Distance', \"Yards\")","660f2423":"Try = train_df[['Down', \"Yards\"]].groupby('Down').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Down', \"Yards\")","293896d8":"Try = train_df[[\"PossessionTeam\", \"Yards\"]].groupby(\"PossessionTeam\").mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, \"PossessionTeam\", \"Yards\")","d35405c2":"Try = train_df[[\"GameClock\", \"Yards\"]].groupby(\"GameClock\").mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, \"GameClock\", \"Yards\")","f0c6d655":"Try = train_df[[\"GameId\", \"Yards\"]].groupby(\"GameId\").mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, \"GameId\", \"Yards\")\n","1d361153":"Try = train_df[['FieldPosition', \"Yards\"]].groupby('FieldPosition').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'FieldPosition', \"Yards\")\n","ea96ad4b":"Try = train_df[['Season', \"Yards\"]].groupby('Season').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Season', \"Yards\")","3aa61415":"Try = train_df[['YardLine', \"Yards\"]].groupby('YardLine').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'YardLine', \"Yards\")\n","c6890c20":"Try = train_df[['Quarter', \"Yards\"]].groupby('Quarter').mean().sort_values(by = \"Yards\").reset_index()\nplot_bar_x(Try, 'Quarter', \"Yards\")","dc4bfc91":"Data Preprocessing: \n* Studium Type; \n* GameClock: convert it into seconds;\n* TimeHandoff, TimeSnap: substract to make it a new variable, timedelta","8e1b0e80":"The Stadium features","7b9c9373":"Light Xgboost to seelct features","8246029b":"Use H2O xgboost to build a baseline :\n* 1. Missing value handle: dropna(how=\"any\")\n* 2. train_validate split: 0.5\/0.5 \n* 3. stop metric: AUC\n* 4.Cat_Encoding: \"enum_limited\"\n* 5. Hype-Paramter:max_depth' ,\"learn_rate\" \n* 6. Feature:\n--6.1 dropped: \"NflId\", \"DisplayName\",\"JerseyNumber\",\"Location\"","f62c9496":"Use random forest to select features","819af311":"Target Variables","4e8411b4":"There is obvious fat tail of target variables","6f6af899":"The player features","2cf73bc8":"Whether related variables","1c3f7814":"Weather features \"WindDirection\", \"WindSpeed\" ","4143e6ea":"#Let's first the layer ","30993f80":"#Most missing\n* WindDirection             0.157395\n* WindSpeed                 0.132277\n* Temperature               0.095205\n* GameWeather               0.085624\n* StadiumType               0.064607\n* FieldPosition             0.012602\n* Humidity                  0.012084\n* OffenseFormation          0.000216\n* DefendersInTheBox         0.000129\n* Orientation               0.000035\n* Dir                       0.000027"}}