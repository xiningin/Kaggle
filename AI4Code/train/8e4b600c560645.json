{"cell_type":{"35452279":"code","70a36a19":"code","9f0703d9":"code","67785342":"code","55bc7d57":"code","cac1f367":"code","66ce93e7":"code","b356bbde":"code","bcb91e8a":"code","005ccb59":"code","46a6baa0":"code","e6667a67":"code","8a6d3de3":"code","59c07f0a":"code","a7c4f990":"code","9a93be2f":"code","a1fe1595":"markdown","0191d511":"markdown","bb02b207":"markdown","90226d63":"markdown","f7ff4ad3":"markdown","2c0ad4e1":"markdown","652b9124":"markdown","3e2e5afd":"markdown","10803b0f":"markdown","f1af551f":"markdown","2bc485e6":"markdown","6fa00085":"markdown"},"source":{"35452279":"# Import necessary libraries\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","70a36a19":"# Path of the files to read\ntrain_data_path = \"..\/input\/home-data-for-ml-course\/train.csv\"\ntest_data_path = \"..\/input\/home-data-for-ml-course\/test.csv\"\n\n# Read and store data in DataFrame\ntrain_data = pd.read_csv(train_data_path, index_col='Id')\ntest_data = pd.read_csv(test_data_path, index_col='Id')","9f0703d9":"train_data.head()","67785342":"test_data.head()","55bc7d57":"# List all the columns in the data\ntrain_data.columns","cac1f367":"# Separate target from features\ny = train_data.SalePrice\ntrain_data.drop(['SalePrice'], axis=1, inplace=True)","66ce93e7":"# Create X, use only numerical predictors\nX = train_data.select_dtypes(exclude=['object'])\nX_test = test_data.select_dtypes(exclude=['object'])","b356bbde":"# Divide data into training and validation subsets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y,\n                                                      test_size=.2,\n                                                      random_state=1)","bcb91e8a":"# Shape of training data (num_rows, num_columns)\nprint(X_train.shape)","005ccb59":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (X_train.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","46a6baa0":"# Function for comparing different approaches\ndef score_dataset(X_train, X_valid, y_train, y_valid):\n    model = RandomForestRegressor(n_estimators=100, random_state=0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(y_valid, preds)","e6667a67":"# Get names of columns with missing values\ncols_with_missing = [col for col in X_train.columns\n                     if X_train[col].isnull().any()]\n\n# Drop columns in training and validation data\nreduced_X_train = X_train.drop(cols_with_missing, axis=1)\nreduced_X_valid = X_valid.drop(cols_with_missing, axis=1)\n\nprint(\"MAE (Drop columns with missing values):\")\nprint(score_dataset(reduced_X_train, reduced_X_valid, y_train, y_valid))","8a6d3de3":"# Imputation\nimputer = SimpleImputer(strategy='median')\nimputed_X_train = pd.DataFrame(imputer.fit_transform(X_train))\nimputed_X_valid = pd.DataFrame(imputer.transform(X_valid))\n\n# Imputation removed column names; put them back\nimputed_X_train.columns = X_train.columns\nimputed_X_valid.columns = X_valid.columns\n\nprint(\"MAE (Imputation):\")\nprint(score_dataset(imputed_X_train, imputed_X_valid, y_train, y_valid))","59c07f0a":"# Define a random forest model\n# for model reproducibility, set a numeric value for random_state\nrf_model = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=1)\n\n# Fit the model\nrf_model.fit(imputed_X_train, y_train)","a7c4f990":"# Preprocess test data\nimputed_X_test = pd.DataFrame(imputer.transform(X_test))\n\n# Get test predictions\npreds_test = rf_model.predict(imputed_X_test)","9a93be2f":"# Save predictions in the format used for competition scoring\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","a1fe1595":"## Drop Columns","0191d511":"## Make Predictions with Test Data","bb02b207":"## Load train and test data","90226d63":"## Preliminary Investigation","f7ff4ad3":"## Create X","2c0ad4e1":"## Imputation","652b9124":"## Split Your Data","3e2e5afd":"## Specify and Fit the Model","10803b0f":"## Generate a Submission","f1af551f":"# Housing Prices Competition","2bc485e6":"In this notebook, I create and submit predictions for **Housing Prices Competition for Kaggle Learn Users**.","6fa00085":"## Specify Prediction Target"}}