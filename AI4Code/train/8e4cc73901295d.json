{"cell_type":{"ccd33e66":"code","da4508e6":"code","985c1cbf":"code","6a548af9":"code","50306d10":"code","ec386e84":"code","114bdabe":"code","f463fd64":"code","a9e22164":"code","5022b1de":"code","4a1175f6":"markdown","5777372b":"markdown","0ee30ef9":"markdown","9862d5cc":"markdown","752da5c8":"markdown","3564d8c0":"markdown","7dda60d5":"markdown"},"source":{"ccd33e66":"\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application\/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application\/vnd.docker.container.image.v1+json\",\n      \"size\": 21947,\n      \"digest\": \"sha256:4bcab14ca549da7bfc7dfc938a3a8b2a0c614d9933a1389b8c931dbf567fc3dd\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 50382957,\n         \"digest\": \"sha256:7e2b2a5af8f65687add6d864d5841067e23bd435eb1a051be6fe1ea2384946b4\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 222909892,\n         \"digest\": \"sha256:59c89b5f9b0c6d94c77d4c3a42986d420aaa7575ac65fcd2c3f5968b3726abfc\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 195204532,\n         \"digest\": \"sha256:4017849f9f85133e68a4125e9679775f8e46a17dcdb8c2a52bbe72d0198f5e68\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1522,\n         \"digest\": \"sha256:c8b29d62979a416da925e526364a332b13f8d5f43804ae98964de2a60d47c17a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 717,\n         \"digest\": \"sha256:12004028a6a740ac35e69f489093b860968cc37b9668f65b1e2f61fd4c4ad25c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 247,\n         \"digest\": \"sha256:3f09b9a53dfb03fd34e35d43694c2d38656f7431efce0e6647c47efb5f7b3137\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 408,\n         \"digest\": \"sha256:03ed58116b0cb733cc552dc89ef5ea122b6c5cf39ec467f6ad671dc0ba35db0c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 331594702,\n         \"digest\": \"sha256:7844554d9ef75bb3f1d224e166ed12561e78add339448c52a8e5679943b229f1\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 112943238,\n         \"digest\": \"sha256:6db6199fec8df3d06191df55be7898c3e1a0b8389371dbb86591c6710e0429cb\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 425,\n         \"digest\": \"sha256:b89ff65d69ce89fe9d05fe3acf9f89046a19eaed148e80a6e167b93e6dc26423\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 5476,\n         \"digest\": \"sha256:d7a15e9b63f265b3f895e4c9f02533d105d9b277e411b93e81bb98972018d11a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1952,\n         \"digest\": \"sha256:f40e3a2f47878ee1eae7a6b962bff3f7bb2c47baceacc04c3eb29412bb981298\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2483992161,\n         \"digest\": \"sha256:3ed1085f84930ef13f3e8c18f9d13d41d88d325d8d6f846112253f61243aaf8c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 467,\n         \"digest\": \"sha256:54535b1611bea63a3f550a2900ed9372e3f76f0376d5037309f7e5fbb8c305ab\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 75497601,\n         \"digest\": \"sha256:901f68b7be4d4a6c5fad901efa0fe518c5a4adec2a6b435851ef844d515e4f9e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 165683170,\n         \"digest\": \"sha256:dbd11e1dece7f990d753b5b524ba798e004a584dbc5784c8d3ddaa98c1c421be\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 220901064,\n         \"digest\": \"sha256:0a460126043ba7f4662066d01faa7392f68d7125dd2be833983f393e920eed01\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 356444448,\n         \"digest\": \"sha256:0510e534bc1af0bdb4a2c6d0199554106c2bcc63f845235ab18691145fd34d55\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1026879165,\n         \"digest\": \"sha256:b88ce384a8f1d522fbe224f308c7f1aa2ea9de61f8b2e25e612050d09eef9b31\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1542,\n         \"digest\": \"sha256:bfff2e849350a79efff01fab3d7ea8af43de1485497712bf89964b46197aec8a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 902,\n         \"digest\": \"sha256:14095624072a2a1c6ba828813740503aee918e0d2e389510bc9d458a8f760400\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 206,\n         \"digest\": \"sha256:40a59389e536d3b46184da130dec05000ba099dd0f111948d7798b3eada0ce8a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 371,\n         \"digest\": \"sha256:da6047b539954dc1a075d209a0965362b40741893d4f39b7fd500858a42f3fd9\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 977,\n         \"digest\": \"sha256:6bbad89b909df025c60dcd64851bf687ba4569ecd29e9ee512524e307fff0ed3\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 456,\n         \"digest\": \"sha256:a1e011f8dab5c7608939bb20d769916bdfe02fbbf972f5f56b3a02fc90ef0357\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 529793351,\n         \"digest\": \"sha256:3b9200f67db696898c9b5cf5bd854c7f76f1284c385942b0b297fe06cb81dc05\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 78413658,\n         \"digest\": \"sha256:6e066fe469972b8fa3b8ec8b0f48425be6f096fd94d5c251de6b700f175a5e9b\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 292683,\n         \"digest\": \"sha256:cc1602eaf2c8d751eb3344867dd5fbbb992cede075e7d1a51367a7370d77305d\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 211,\n         \"digest\": \"sha256:b3a651eb0cea06895fae3b89fe5ae179a8dca3eb1b1070791848a88cd38ecfea\"\n      }\n   ]\n}\n","da4508e6":"\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application\/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application\/vnd.docker.container.image.v1+json\",\n      \"size\": 27512,\n      \"digest\": \"sha256:8ef19b5397d8b13638e69746589be8265f4e9f565ee5af4d64f43f5d14a68a64\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 45339314,\n         \"digest\": \"sha256:c5e155d5a1d130a7f8a3e24cee0d9e1349bff13f90ec6a941478e558fde53c14\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 95104141,\n         \"digest\": \"sha256:86534c0d13b7196a49d52a65548f524b744d48ccaf89454659637bee4811d312\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1571501372,\n         \"digest\": \"sha256:5764e90b1fae3f6050c1b56958da5e94c0d0c2a5211955f579958fcbe6a679fd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1083072,\n         \"digest\": \"sha256:ba67f7304613606a1d577e2fc5b1e6bb14b764bcc8d07021779173bcc6a8d4b6\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 526,\n         \"digest\": \"sha256:36c8cee5dcabe015f8e5b00d9e5f26f3dc43c685616a9ff657aeac32dcb0dec7\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 456,\n         \"digest\": \"sha256:fbde6884bcec90a734814ab616cc8abcf34cde78a99498df8da757431c6c28fd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 13117845,\n         \"digest\": \"sha256:4aceba2705e51efc04a48b7883d097f3c89d00a2f96b2fb16b54a7d5fc410e53\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 558997840,\n         \"digest\": \"sha256:690778d6efe115dbba1239a78693944fe179985f5a5d31078d376731eb900635\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 718986208,\n         \"digest\": \"sha256:cfc8fe521bf9c7e028edea60d6f3cbd2a50f56751c0e8d7415d6d364453b41d0\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 33502401,\n         \"digest\": \"sha256:5a2d591ac4f68ab561f030733f354b722051f02fb7114a632a980d4095e9f6a5\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 95925401,\n         \"digest\": \"sha256:b720a0e96c3024ee325ea8e1874a33d66d097c990ac50e8229b1c76076ae869a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 142490052,\n         \"digest\": \"sha256:a661d11e464bd9abfabe3ec4b4b4e22b01c228481ba20d5dd6c066ab512e26c2\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1038014421,\n         \"digest\": \"sha256:555cc8cba1c97f86ef332cee16e11b952f18352f55b915df4a9a776d81edd234\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 75007872,\n         \"digest\": \"sha256:7ed8a9307f830dad6f7b8b273c80b0a820bdf9f9db7ad1c762282ef8b63e4122\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 80474425,\n         \"digest\": \"sha256:29eb9237adacfa8ff7974c2ce5e9f1ffc5047e625347bbb03b5a170d397153fb\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 89451858,\n         \"digest\": \"sha256:6b054a59f9fd46636ecb9f0c31a837127ae856fd44e5b998286f5f1111bf1d30\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 415384338,\n         \"digest\": \"sha256:19c088e1afee706e063eaff6a2d259efb55b962f4da47927f9461a83d904c8a1\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 44168262,\n         \"digest\": \"sha256:838b7e776f75e4fdce36596b5ee8e250ebb50cdc2717033290df2bff0e70a7dc\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 107758705,\n         \"digest\": \"sha256:1ad83d09763421093849a7abef397f8610f79e07767f51e3248ab9ef52679705\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 958342282,\n         \"digest\": \"sha256:569c6fda9d84413ea844c2f25799b7449b2fd6ac486bcbb8be2eb1ca65b6c51e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 588654554,\n         \"digest\": \"sha256:d8ad2accaf088624da0281224e625ff49da8212cf9e21423898f50f648542d40\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 21654895,\n         \"digest\": \"sha256:1754ab792f2a4062623d4f461f9196ed41ec1bf9eb81b45ea05fe0fe6a4df3c0\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 227370423,\n         \"digest\": \"sha256:153e0f49aeb357a372ddccfffe487d5b431fc81143728d1a65805a38454c477a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 20307,\n         \"digest\": \"sha256:6f8920d2e4f3aa5274096bbbf084a9587d1ff438026fac3ee7931e3f75008de3\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 85317368,\n         \"digest\": \"sha256:5857d6464a2ed88c711915621eb005d178603b9daabbf65ccfe2fd2e72d7be36\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 3264,\n         \"digest\": \"sha256:5347c992f3b56e47242dd8a5694638c839cad94e9635876f2bfe9e8dd36dd62c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2163,\n         \"digest\": \"sha256:dd6f840a7b975737ae3f11a10036c7501bd6796ca86befd2596712365a9fd073\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1269,\n         \"digest\": \"sha256:a12c0432261d580586748b11db6bbfe798f5957a9ad57a71230c0f9986826114\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 641,\n         \"digest\": \"sha256:112b56a741fa6492ba1a4f9eda937bcb52f02f7c31265e142a592824bf830c36\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2052,\n         \"digest\": \"sha256:bcd81def64e80646bbebb0cd99ecfe423c0ec3df21c607fceb2f9c3a2b782e1e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 876,\n         \"digest\": \"sha256:daf7bad905212cda27468f9f136e888189f0cde90182e6eb488937740a70ac38\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 210,\n         \"digest\": \"sha256:37f94f1dfe09302f5ab426ed04a71a4bad5cc9585d65611518efb8ebc1ea5ba5\"\n      }\n   ]\n}\n","985c1cbf":"#!\/bin\/bash\nset -e\n \nIMAGE_TAG='kaggle\/python-build'\nIMAGE_TAG_OVERRIDE=''\nADDITONAL_OPTS=''\nPATTERN='test*.py'\n \nusage() {\ncat << EOF\nUsage: $0 [OPTIONS]\nRun tests for a newly-built Python Docker image.\nBy default, it runs the tests for the CPU image.\n \nOptions:\n    -g, --gpu             Run tests for the GPU image.\n    -i, --image IMAGE     Run tests against the specified image\n    -p, --pattern PATTERN Pattern to match test files ($PATTERN default)\n \nEOF\n}\n \nwhile :; do\n    case \"$1\" in \n        -h|--help)\n            usage\n            exit\n            ;;\n        -g|--gpu)\n            IMAGE_TAG='kaggle\/python-gpu-build'\n            ADDITONAL_OPTS='-v \/tmp\/empty_dir:\/usr\/local\/cuda\/lib64\/stubs:ro'\n            ;;\n        -i|--image)\n            if [[ -z $2 ]]; then\n                usage\n                printf 'ERROR: No IMAGE specified after the %s flag.\\n' \"$1\" >&2\n                exit\n            fi\n            IMAGE_TAG_OVERRIDE=$2\n            shift # skip the flag value\n            ;;\n        -p|--pattern)\n            if [[ -z $2 ]]; then\n                usage\n                printf 'ERROR: No PATTERN specified after the %s flag.\\n' \"$1\" >&2\n                exit\n            fi\n            PATTERN=\"$2\"\n            shift # skip the flag value\n            ;;\n        -?*)\n            usage\n            printf 'ERROR: Unknown option: %s\\n' \"$1\" >&2\n            exit\n            ;;\n        *)            \n            break\n    esac\n \n    shift\ndone\n \nif [[ -n \"$IMAGE_TAG_OVERRIDE\" ]]; then\n    IMAGE_TAG=\"$IMAGE_TAG_OVERRIDE\"\nfi\n \nreadonly IMAGE_TAG\nreadonly ADDITONAL_OPTS\nreadonly PATTERN\n \nset -x\nrm -rf \/tmp\/python-build\ndocker rm jupyter_test || true\nmkdir -p \/tmp\/python-build\/tmp\nmkdir -p \/tmp\/python-build\/devshm\nmkdir -p \/tmp\/python-build\/working\n \n# Only run Jupyter server test if no specific test pattern is specified.\nif [ $PATTERN == 'test*.py' ]; then\n    # Check that Jupyter server can run; if it dies on startup, the `docker kill` command will throw an error\n    docker run -d --name=jupyter_test --read-only --net=none -e HOME=\/tmp -v $PWD:\/input:ro -v \/tmp\/python-build\/working:\/working -w=\/working -v \/tmp\/python-build\/tmp:\/tmp -v \/tmp\/python-build\/devshm:\/dev\/shm \"$IMAGE_TAG\" jupyter notebook --allow-root --ip=\"*\"\n    sleep 3\n    docker kill jupyter_test && docker rm jupyter_test\nfi\n \n# Note about `TF_FORCE_GPU_ALLOW_GROWTH`. This allocate memory at runtime as needed.\n# By default, TensorFlow maps nearly all of the GPU memory visible to the process.\n# This is causing issue when other libraries are trying to run tests using a GPU.\n# See: https:\/\/www.tensorflow.org\/guide\/gpu#allowing_gpu_memory_growth\ndocker run --rm -t --read-only --net=none \\\n    -e HOME=\/tmp -e KAGGLE_DATA_PROXY_TOKEN=test-key \\\n    -e KAGGLE_USER_SECRETS_TOKEN_KEY=test-secrets-key \\\n    -e KAGGLE_URL_BASE=http:\/\/127.0.0.1:8001 \\\n    -e KAGGLE_DATA_PROXY_URL=http:\/\/127.0.0.1:8000 \\\n    -e KAGGLE_DATA_PROXY_PROJECT=test \\\n    -e TF_FORCE_GPU_ALLOW_GROWTH=true \\\n    --shm-size=2g \\\n    -v $PWD:\/input:ro -v \/tmp\/python-build\/working:\/working \\\n    -v \/tmp\/python-build\/tmp:\/tmp -v \/tmp\/python-build\/devshm:\/dev\/shm \\\n    -w=\/working \\\n    $ADDITONAL_OPTS \\\n    \"$IMAGE_TAG\" \\\n    \/bin\/bash -c \"python -m unittest discover -s \/input\/tests -p $PATTERN -v\"\n ","6a548af9":"\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application\/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application\/vnd.docker.container.image.v1+json\",\n      \"size\": 14966,\n      \"digest\": \"sha256:0bb414c1080d09555e8827e2ba01e8e4094e6688f560c5ed78d66490c5d93102\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 50382957,\n         \"digest\": \"sha256:7e2b2a5af8f65687add6d864d5841067e23bd435eb1a051be6fe1ea2384946b4\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 222909892,\n         \"digest\": \"sha256:59c89b5f9b0c6d94c77d4c3a42986d420aaa7575ac65fcd2c3f5968b3726abfc\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 195204532,\n         \"digest\": \"sha256:4017849f9f85133e68a4125e9679775f8e46a17dcdb8c2a52bbe72d0198f5e68\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1522,\n         \"digest\": \"sha256:c8b29d62979a416da925e526364a332b13f8d5f43804ae98964de2a60d47c17a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 717,\n         \"digest\": \"sha256:12004028a6a740ac35e69f489093b860968cc37b9668f65b1e2f61fd4c4ad25c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 247,\n         \"digest\": \"sha256:3f09b9a53dfb03fd34e35d43694c2d38656f7431efce0e6647c47efb5f7b3137\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 408,\n         \"digest\": \"sha256:03ed58116b0cb733cc552dc89ef5ea122b6c5cf39ec467f6ad671dc0ba35db0c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 331594702,\n         \"digest\": \"sha256:7844554d9ef75bb3f1d224e166ed12561e78add339448c52a8e5679943b229f1\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 112943346,\n         \"digest\": \"sha256:d02cf9213088950ea80cc37d21eed912de9a9b64170c046173c2de5c9b5eedc9\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 425,\n         \"digest\": \"sha256:b89ff65d69ce89fe9d05fe3acf9f89046a19eaed148e80a6e167b93e6dc26423\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 5476,\n         \"digest\": \"sha256:d7a15e9b63f265b3f895e4c9f02533d105d9b277e411b93e81bb98972018d11a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1949,\n         \"digest\": \"sha256:f2b5041ea52a4ce4a0e0c7665327b5e01fe915c6fd78ccd5b722f2fb99e24da5\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2488478912,\n         \"digest\": \"sha256:05e6d738c6522686b0fa5851459a77fe2527f4b49cb0a54c1e3b200235f8439e\"\n      }\n   ]\n}\n","50306d10":"\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application\/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application\/vnd.docker.container.image.v1+json\",\n      \"size\": 14966,\n      \"digest\": \"sha256:be630ca449be905491ba2c47c4fd3fdf56e5c407008e42a779a059d4db52dfd4\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 50382957,\n         \"digest\": \"sha256:7e2b2a5af8f65687add6d864d5841067e23bd435eb1a051be6fe1ea2384946b4\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 222909892,\n         \"digest\": \"sha256:59c89b5f9b0c6d94c77d4c3a42986d420aaa7575ac65fcd2c3f5968b3726abfc\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 195204532,\n         \"digest\": \"sha256:4017849f9f85133e68a4125e9679775f8e46a17dcdb8c2a52bbe72d0198f5e68\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1522,\n         \"digest\": \"sha256:c8b29d62979a416da925e526364a332b13f8d5f43804ae98964de2a60d47c17a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 717,\n         \"digest\": \"sha256:12004028a6a740ac35e69f489093b860968cc37b9668f65b1e2f61fd4c4ad25c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 247,\n         \"digest\": \"sha256:3f09b9a53dfb03fd34e35d43694c2d38656f7431efce0e6647c47efb5f7b3137\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 408,\n         \"digest\": \"sha256:03ed58116b0cb733cc552dc89ef5ea122b6c5cf39ec467f6ad671dc0ba35db0c\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 331594702,\n         \"digest\": \"sha256:7844554d9ef75bb3f1d224e166ed12561e78add339448c52a8e5679943b229f1\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 112940866,\n         \"digest\": \"sha256:a26cbc6c53f068944df4f29e7a29755b5ae06c1a3b75779bf324ef6361c158c6\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 425,\n         \"digest\": \"sha256:b89ff65d69ce89fe9d05fe3acf9f89046a19eaed148e80a6e167b93e6dc26423\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 5476,\n         \"digest\": \"sha256:d7a15e9b63f265b3f895e4c9f02533d105d9b277e411b93e81bb98972018d11a\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1947,\n         \"digest\": \"sha256:4782dd09dd8aaa74c8236680ef3d0a5c2f11ecb851492e264b04e4a7ead76855\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2476372788,\n         \"digest\": \"sha256:c69bfc65cecaf1361a0334b69dea2aa5c74cf6daf81322a0a06c4c3ed122b6be\"\n      }\n   ]\n}\n","ec386e84":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","114bdabe":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f463fd64":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","a9e22164":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","5022b1de":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","4a1175f6":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","5777372b":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","0ee30ef9":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","9862d5cc":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","752da5c8":"There\u2019s good news today for people hoping that politicians will just declare victory against the coronavirus\u2014or whatever they think they need to say\u2014and let us have our economy back. A Nobel Prize-winning chemist is encouraged by the latest global infection and mortality data. Some state governments are moving toward economic revival. And new research raises more questions about a series of virus models which have influenced the decisions of nervous politicos.\n\nAs for the need to liberate Americans to pursue their livelihoods, University of Chicago economist Casey Mulligan has a new website tracking the massive daily economic cost of the virus response. Of course the news contained in his charts is awful, but combined with other research it may help flatten the curve of belief in popular virus predictions.\n\nOn this point, this column recently noted the work of researchers at Australia\u2019s University of Sydney, working with colleagues at America\u2019s Northwestern and the University of Texas at El Paso. They detailed some of the flaws in predictions made by the oft-quoted Institute for Health Metrics and Evaluation (IHME), which has become famous for its coronavirus forecasts.\n\nToday the team from Sydney, Northwestern and UTEP is publishing a new update to its working paper. Unfortunately the IHME predictions may not be getting any better, and in some ways may actually be getting worse. In their new evaluation of the predictive performance of the IHME models, the researchers report:\n\nTo assess the accuracy of the IHME models, we examine both forecast accuracy using tools from the econometric literature, as well as the predictive performance of the 95% prediction intervals provided by the IHME models. We find that the initial IHME model underestimates the uncertainty surrounding the number of daily deaths substantially. Specifically, the true number of next day deaths fell outside the IHME prediction intervals as much as 70% of the time, in comparison to the expected value of 5%. In addition, we note that the performance of the initial model does not improve with shorter forecast horizons.\n\nPro football scouts often say that if a quarterback is not an accurate passer when he enters the National Football League, he is unlikely to become one during his career. Perhaps a similarly healthy skepticism should be applied by politicians when consulting academic forecasters. According to the team critiquing the IHME:","3564d8c0":"Oh, no! There are no automatic insights available for the file types used in this dataset. As your Kaggle kerneler bot, I'll keep working to fine-tune my hyper-parameters. In the meantime, please feel free to try a different dataset.","7dda60d5":"There is 0 csv file in the current version of the dataset:\n"}}