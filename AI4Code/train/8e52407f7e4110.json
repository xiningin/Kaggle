{"cell_type":{"521c6b8f":"code","b8c11212":"code","2389ce44":"code","06477088":"code","ae73d62b":"code","773020df":"code","0ccbc7f1":"code","26b5d1d5":"code","e1645b12":"code","630ef825":"code","916cb6f8":"code","db68039d":"code","e838637d":"code","fdaed4f8":"code","285de28f":"code","cca502c5":"code","45cf3044":"code","97b8508f":"code","68640bac":"code","b143e787":"code","940de488":"markdown","84c880eb":"markdown","3b8da548":"markdown","97f93e12":"markdown","67abbf7a":"markdown","63a0bddd":"markdown","ca10a567":"markdown","f0312d94":"markdown","f04e71e0":"markdown","fc8cdfbf":"markdown","3b2bf0c7":"markdown","654b061f":"markdown","00883042":"markdown"},"source":{"521c6b8f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import RandomOverSampler \nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport os, cv2\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D","b8c11212":"import pandas as pd\ndata = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')\ndata.head()","2389ce44":"y = data['label']\nx = data.drop(columns = ['label'])","06477088":"tabular_data = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')\ntabular_data.head()","ae73d62b":"classes = {4: ('nv', ' melanocytic nevi'), 6: ('mel', 'melanoma'), 2 :('bkl', 'benign keratosis-like lesions'), 1:('bcc' , ' basal cell carcinoma'), 5: ('vasc', ' pyogenic granulomas and hemorrhage'), 0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),  3: ('df', 'dermatofibroma')}","773020df":"sns.countplot(x = 'dx', data = tabular_data)\nplt.xlabel('Disease', size=12)\nplt.ylabel('Frequency', size=12)\nplt.title('Frequency Distribution of Classes', size=16)","0ccbc7f1":"bar, ax = plt.subplots(figsize = (10,10))\nplt.pie(tabular_data['sex'].value_counts(), labels = tabular_data['sex'].value_counts().index, autopct=\"%.1f%%\")\nplt.title('Gender of Patient', size=16)","26b5d1d5":"bar, ax = plt.subplots(figsize=(10,10))\nsns.histplot(tabular_data['age'])\nplt.title('Histogram of Age of Patients', size=16)","e1645b12":"value = tabular_data[['localization', 'sex']].value_counts().to_frame()\nvalue.reset_index(level=[1,0 ], inplace=True)\ntemp = value.rename(columns = {'localization':'location', 0: 'count'})\n\nbar, ax = plt.subplots(figsize = (12, 12))\nsns.barplot(x = 'location',  y='count', hue = 'sex', data = temp)\nplt.title('Location of disease over Gender', size = 16)\nplt.xlabel('Disease', size=12)\nplt.ylabel('Frequency\/Count', size=12)\nplt.xticks(rotation = 90)","630ef825":"oversample = RandomOverSampler()\nx,y  = oversample.fit_resample(x,y)","916cb6f8":"x = np.array(x).reshape(-1,28,28,3)\nprint('Shape of X :',x.shape)","db68039d":"x = (x-np.mean(x))\/np.std(x)\nX_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size=0.2, random_state=1)","e838637d":"model = Sequential()\nmodel.add(Conv2D(16, kernel_size = (3,3), input_shape = (28, 28, 3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', padding = 'same'))\nmodel.add(Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2), padding = 'same'))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(7, activation='softmax'))\nmodel.summary()","fdaed4f8":"callback = tf.keras.callbacks.ModelCheckpoint(filepath='best_model.h5',\n                                                  monitor='val_acc', mode='max',\n                                                 verbose=1)\n","285de28f":"model.compile(loss = 'sparse_categorical_crossentropy',\n             optimizer = 'adam',\n              metrics = ['accuracy'])\nhistory = model.fit(X_train,\n                    Y_train,\n                    validation_split=0.2,\n                    batch_size = 128,\n                    epochs = 20,\n                    callbacks=[callback])","cca502c5":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","45cf3044":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","97b8508f":"model.load_weights('best_model.h5')\n","68640bac":"loss, acc = model.evaluate(X_test, Y_test, verbose=2)","b143e787":"!pip install google.colab\nfrom google.colab.patches import cv2_imshow\nsrcdir = '\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_images_part_1'\ncount=0\nfor temp in os.listdir(srcdir):\n    img = cv2.imread(os.path.join(srcdir, temp))\n    cv2.imwrite(temp, img)\n    cv2_imshow(img)\n    img = cv2.resize(img, (28, 28))\n    result = model.predict(img.reshape(1, 28, 28, 3))\n    max_prob = max(result[0])\n    class_ind = list(result[0]).index(max_prob)\n    class_name = classes[class_ind]\n    print(class_name)\n    count+=1\n    if count>10:\n        break","940de488":"# Location of disease over Gender","84c880eb":"# Frequency Distribution of Classes","3b8da548":"# Oversampling\n**To overcome class imbalace**","97f93e12":"# Exploratory Data Analysis (EDA)","67abbf7a":"# Standardization and Splitting Data","63a0bddd":"# Model Inference","ca10a567":"# Histogram of Age of Patients","f0312d94":"# Model Training","f04e71e0":"# Importing Libraries","fc8cdfbf":"# Model Testing","3b2bf0c7":"# Distribution of Disease over Gender","654b061f":"# Plot Accuracy and Loss","00883042":"# Import Data"}}