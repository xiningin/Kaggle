{"cell_type":{"67bc68b7":"code","a5349a6a":"code","eaa763e8":"code","f18b2052":"code","9c9571d4":"code","b4e93474":"code","a1586648":"code","672d780a":"code","2882c274":"code","05d93bae":"code","9700b024":"code","c1029292":"code","ab901b8f":"code","e3b6c3dc":"code","4d8ddf5b":"code","27066648":"code","c91f5b98":"code","a5bc59c4":"code","78ed3ba4":"code","f3af8265":"code","b9b1e0bd":"code","1c204b75":"code","fb3fbe75":"code","4477488b":"code","ef49b13c":"code","9f866a7a":"code","f85e668b":"code","8fe913d2":"code","6325b8ad":"code","e321b98e":"code","1ea7f6ef":"code","6825d140":"code","d58b762e":"code","e4ee82cc":"code","e9646f45":"code","18985ad7":"code","405ef4ff":"code","fe25bc6d":"markdown","28c06fdc":"markdown"},"source":{"67bc68b7":"\n# 1. Data Preperation\n# 2. Expected Sales Forecasting with BG-NBD Model\n# 3. Expected Average Profit with Gamma-Gamma Model\n# 4. Calculation CLTV with BG-NBD ve Gamma-Gamma Model\n# 5. Building segmentation with CLTV","a5349a6a":"\n#  Loading Necessary Library\n","eaa763e8":"pip install lifetimes","f18b2052":"# pip install lifetimes\n\nimport datetime as dt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\n\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\npd.set_option('display.float_format', lambda x: '%.4f' % x)\n\nfrom sklearn.preprocessing import MinMaxScaler","9c9571d4":"def outlier_winsorize(df, col):\n    Q1 = df[col].quantile(0.01)\n    Q3 = df[col].quantile(0.99)\n    IQR = Q3 - Q1\n    upper = Q3 + 1.5 * IQR\n    lower = Q1 - 1.5 * IQR\n    df.loc[(df[col] < lower), col] = lower\n    df.loc[(df[col] > upper), col] = upper","b4e93474":"\n# Read Excel file\n","a1586648":"df_orj = pd.read_csv(\"\/kaggle\/input\/online-retail-ii-uci\/online_retail_II.csv\")\ndf = df_orj.copy()\ndf.head()","672d780a":"df.tail()","2882c274":"df.info()","05d93bae":"df.shape","9700b024":"# Data preprocessing","c1029292":"df.describe().T","ab901b8f":"df.dropna(inplace=True)\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]\n\noutlier_winsorize(df, \"Quantity\")\noutlier_winsorize(df, \"Price\")\ndf.describe().T","e3b6c3dc":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"Price\"]","4d8ddf5b":"df['InvoiceDate'].max()","27066648":"today_date = dt.datetime(2011, 12, 11)","c91f5b98":"\n# Preparation of Lifetime Data Structure\n","a5bc59c4":"df.info()","78ed3ba4":"df[\"InvoiceDate\"] = pd.to_datetime(df['InvoiceDate'],format='%Y\/%m\/%d')","f3af8265":"df.info()","b9b1e0bd":"# recency: The elapsed time since the last purchase and first purchase. Weekly. (according to analysis day on cltv_df, user specific here)\n# Tenure: The age of the customer. Weekly. (how long before the analysis date the first purchase was made)\n# frequency: total number of repeat purchases (frequency>1)\n# monetary_value: average earnings per purchase\n\ncltv_df = df.groupby('Customer ID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                         'Invoice': lambda num: num.nunique(),\n                                         'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\nprint(cltv_df.head(3))\nprint('*'*33)\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\nprint(cltv_df.head(3))\nprint('*'*33)\n\ncltv_df.columns = ['recency', 'Tenure', 'frequency', 'monetary']\n\n#average spending money on each purchase\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\n\n# week conversion\ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"Tenure\"] = cltv_df[\"Tenure\"] \/ 7\n\n# frequency should be higher than 1\ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]\nprint(cltv_df.head(3))","1c204b75":"cltv_df","fb3fbe75":"\n#  BG-NBD Model Bulding\n\n\nbgf = BetaGeoFitter(penalizer_coef=0.001)\n\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['Tenure'])\n\n\n# 10 customers we expect the most to purchase in a week\n\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                              cltv_df['frequency'],\n                                              cltv_df['recency'],\n                                              cltv_df['Tenure'])\n\ncltv_df[\"expected_purc_1_week\"].sort_values(ascending=False).head(10)","4477488b":"cltv_df.head(10)","ef49b13c":"\n# top 10 customer in 1 month = 4*week\n\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['Tenure'])\ncltv_df.sort_values(\"expected_purc_1_month\", ascending=False).head(10)","9f866a7a":"dfx = cltv_df['expected_purc_1_month']\/cltv_df['expected_purc_1_week']","f85e668b":"dfx.sort_values()","8fe913d2":"\n# total expected purchase count of the company for 1 month\n\nbgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['Tenure']).sum()","6325b8ad":"\n# total expected purchase count of the company for 3 month\n\n\nbgf.predict(4 * 3,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['Tenure']).sum()","e321b98e":"\n# Evaluation\n\n#Plots a histogram and returns a matrix comparing the actual and expected number of customers \n#who made a certain number of repeat transactions in the calibration period, \n#binned according to calibration period frequencies.\n\nplot_period_transactions(bgf)\nplt.show();","1ea7f6ef":"\n# GAMMA-GAMMA Model\n\nggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])\ncltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.sort_values(\"expected_average_profit\", ascending=False).head(20)","6825d140":"\n# BG-NBD ve GG model building the CLTV\n\ncltv = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['Tenure'],\n                                   cltv_df['monetary'],\n                                   time=3,  #3 month\n                                   freq=\"W\",  # T unit.\n                                   discount_rate=0.01)\ncltv.head()","d58b762e":"cltv = cltv.reset_index()\ncltv.sort_values(by=\"clv\", ascending=False).head(20)","e4ee82cc":"cltv_final = cltv_df.merge(cltv, on=\"Customer ID\", how=\"left\")\n\ncltv_final.sort_values(by=\"clv\", ascending=False).head(10)","e9646f45":"# standardization of CLTV  for segmentation\n\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(cltv_final[[\"clv\"]])\ncltv_final[\"scaled_clv\"] = scaler.transform(cltv_final[[\"clv\"]])\ncltv_final.sort_values(by=\"scaled_clv\", ascending=False).head(10)","18985ad7":"\n# Segmentation \n\ncltv_final[\"segment\"] = pd.qcut(cltv_final[\"scaled_clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\ncltv_final.head()","405ef4ff":"cltv_final.groupby(\"segment\").agg({\"count\", \"mean\", \"sum\"})","fe25bc6d":"# Thanks. !","28c06fdc":"#  Data Preperation\n\n##############################################################"}}