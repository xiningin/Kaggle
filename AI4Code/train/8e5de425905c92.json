{"cell_type":{"45c2d9f3":"code","23ee0b81":"code","884665f6":"code","646ca0ac":"code","5f61aa07":"code","e73daa2d":"code","08c965e2":"code","d33bd46c":"code","8da1d19c":"code","49fadd29":"code","9b11f8ae":"code","996a41f0":"code","9837373a":"code","27cc299b":"code","9ad2c02e":"code","7725b9fd":"code","3bd46849":"code","6ca43469":"code","cd6b7cb3":"code","5ffc3110":"code","411b9fb7":"code","81e2bd9c":"code","2c5293b6":"code","d59dbbc7":"code","52994cfa":"code","cdcdc061":"code","67ed4835":"code","dc39bebd":"code","f0b8a966":"code","cf7abbf8":"code","6530565c":"code","9f8642a9":"code","4baaa2c5":"code","ad4d9fa3":"code","d3faba1a":"code","434b9499":"code","4d03f1f4":"code","24aa8ecc":"code","6b5d1eed":"code","36d1940c":"code","072dfe24":"code","f0768093":"code","d3d520bf":"code","1186813f":"code","c9deb6e3":"code","192fe7fd":"code","a3ecca46":"code","c6ad0904":"code","1a028e51":"code","41b56ba3":"code","376d37bc":"code","b533cc42":"code","8cafea84":"markdown","f97a337f":"markdown","4098999e":"markdown","ad8f436a":"markdown","2917ac05":"markdown","0379346e":"markdown","da6647fb":"markdown","de5b442a":"markdown","f1725544":"markdown","ae1baab6":"markdown","61e3a656":"markdown","1389612f":"markdown","48f12102":"markdown","5ae1f35e":"markdown","e1075ed3":"markdown","149d41ea":"markdown","9bea5a99":"markdown","2bd1c485":"markdown","0367f92e":"markdown","18566ef4":"markdown","d859f68c":"markdown","2ddee2b7":"markdown","d9a4f571":"markdown","a502e1b1":"markdown","06a3ed7d":"markdown","37229252":"markdown","f4646137":"markdown","8343637f":"markdown","d71cdf3a":"markdown","05541e0f":"markdown","6d60d2b3":"markdown","96608840":"markdown","06e50191":"markdown","f1af6ccc":"markdown","b9b97668":"markdown"},"source":{"45c2d9f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23ee0b81":"#importing libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport plotly.express as px \nsns.set_style('darkgrid')\nfrom datetime import datetime\nfrom dateutil.tz import *\nimport re \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold, RandomizedSearchCV\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport xgboost as xgb\nfrom xgboost import DMatrix\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","884665f6":"#Importing the dataset\ndata = pd.read_csv('\/kaggle\/input\/SolarEnergy\/SolarPrediction.csv')\n#Checking which data is available in the dataset and which data-type is associated to each column of the dataset\ndata.info()\ndf=data.copy()","646ca0ac":"#Checking if there are missing values\ndata.isnull().sum()","5f61aa07":"data = data.sort_values(['UNIXTime'], ascending = [True])\ndata.head()","e73daa2d":"from pytz import timezone\nimport pytz\nhawaii= timezone('Pacific\/Honolulu')\ndata.index =  pd.to_datetime(data['UNIXTime'], unit='s')\ndata.index = data.index.tz_localize(pytz.utc).tz_convert(hawaii)\ndata['MonthOfYear'] = data.index.strftime('%m').astype(int)\ndata['DayOfYear'] = data.index.strftime('%j').astype(int)\ndata['WeekOfYear'] = data.index.strftime('%U').astype(int)\ndata['TimeOfDay(h)'] = data.index.hour\ndata['TimeOfDay(m)'] = data.index.hour*60 + data.index.minute\ndata['TimeOfDay(s)'] = data.index.hour*60*60 + data.index.minute*60 + data.index.second\ndata['TimeSunRise'] = pd.to_datetime(data['TimeSunRise'], format='%H:%M:%S')\ndata['TimeSunSet'] = pd.to_datetime(data['TimeSunSet'], format='%H:%M:%S')\ndata['DayLength(s)'] = data['TimeSunSet'].dt.hour*60*60 \\\n                           + data['TimeSunSet'].dt.minute*60 \\\n                           + data['TimeSunSet'].dt.second \\\n                           - data['TimeSunRise'].dt.hour*60*60 \\\n                           - data['TimeSunRise'].dt.minute*60 \\\n                           - data['TimeSunRise'].dt.second\ndata.drop(['Data','Time','TimeSunRise','TimeSunSet'], inplace=True, axis=1)\ndata.head()","08c965e2":"data_one_day = data.loc['2016-09-29':'2016-09-30',:]\n\nplt.figure(figsize = (12,3))\nplt.plot(data_one_day.Radiation, 'o', markerfacecolor = 'w')\n\n\n#Adjusting timezone of x-axis\nplt.gca().xaxis_date('HST')\n\nplt.legend()\nplt.show()","d33bd46c":"#Analysing the ranges of the various features of the datset\ndata.describe()","8da1d19c":"fig, ax = plt.subplots(figsize=(20, 6))\ndata['Radiation'].plot(ax=ax, style=['--'], color='red')\nax.set_title('Radiation as a Time Series', fontsize=18)\nax.set_ylabel('W\/m2')\nplt.show()","49fadd29":"fig, ax = plt.subplots(figsize=(20, 6))\ndata.groupby(pd.Grouper(freq=\"D\"))['Radiation'].mean().plot(ax=ax, style=['--'], color='red')\nax.set_title('Radiation as a Time Series (Daily)', fontsize=18)\nax.set_ylabel('W\/m2')\nplt.show()","9b11f8ae":"fig, ax = plt.subplots(nrows =2, ncols = 6, figsize = (25, 10))\n\nsns.distplot(data.Radiation, ax = ax[0,0])\nax[0,0].set_xlabel('Solar radiation [W\/m^2]', fontsize = 14)\n\nsns.distplot(data.Temperature, ax = ax[0,1])\nax[0,1].set_xlabel('Temperature [F]', fontsize = 14)\n\nsns.distplot(data.Pressure, ax = ax[0,2])\nax[0,2].set_xlabel('Pressure [Hg]', fontsize = 14)\n\nsns.distplot(data.Humidity, ax = ax[0,3])\nax[0,3].set_xlabel('Humidity [%]', fontsize = 14)\n\nsns.distplot(data.Speed, ax = ax[0,4])\nax[0,4].set_xlabel('Wind speed [miles\/h]', fontsize = 14)\n\nsns.distplot(data['WindDirection(Degrees)'], ax = ax[0,5])\nax[0,5].set_xlabel('Wind direction [Degrees]', fontsize = 14)\n\n\nsns.boxplot(data.Radiation, ax = ax[1,0])\nax[1,0].set_xlabel('Solar radiation [W\/m^2]', fontsize = 14)\n\nsns.boxplot(data.Temperature, ax = ax[1,1])\nax[1,1].set_xlabel('Temperature [F]', fontsize = 14)\n\nsns.boxplot(data.Pressure, ax = ax[1,2])\nax[1,2].set_xlabel('Pressure [Hg]', fontsize = 14)\n\nsns.boxplot(data.Humidity, ax = ax[1,3])\nax[1,3].set_xlabel('Humidity [%]', fontsize = 14)\n\nsns.boxplot(data.Speed, ax = ax[1,4])\nax[1,4].set_xlabel('Wind speed [miles\/h]', fontsize = 14)\n\nsns.boxplot(data['WindDirection(Degrees)'], ax = ax[1,5])\nax[1,5].set_xlabel('Wind direction [Degrees]', fontsize = 14)\n\nfig.suptitle('Distribution and box plot of the various features', fontsize = 22)\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\n\nplt.show()","996a41f0":"for col in ['Radiation','Temperature', 'Pressure', 'Humidity', 'WindDirection(Degrees)', 'Speed']:\n    fig, ax = plt.subplots(figsize=(20, 3))\n    data[col].plot.box(ax=ax, vert=False, color='red')\n    ax.set_title(f'{col} Distrubution', fontsize=18)\n    plt.show()","9837373a":"#Creation of the median dataset\ndata_median = data.resample('H').median().dropna()","27cc299b":"#Extraction of the data for a five-day period\ndata_5 = data.loc['2016-10-03':'2016-10-08',:]\ndata_5_median = data_median.loc['2016-10-03':'2016-10-08',:]\n\n\nfig, ax = plt.subplots(nrows =6, ncols = 1, figsize = (23,25))\n\nax[0].plot(data_5.Radiation,'o', markerfacecolor='w')\nax[0].plot(data_5_median.Radiation, linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[0].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\nax[0].legend(fontsize = 14)\n\nax[1].plot(data_5.Temperature,'o', markerfacecolor='w')\nax[1].plot(data_5_median.Temperature, linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[1].set_ylabel('Temperature [F]', fontsize = 14)\nax[1].legend(fontsize = 14)\n\nax[2].plot(data_5.Pressure,'o', markerfacecolor='w')\nax[2].plot(data_5_median.Pressure, linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[2].set_ylabel('Pressure [Hg]', fontsize = 14)\nax[2].legend(fontsize = 14)\n\nax[3].plot(data_5.Humidity,'o', markerfacecolor='w')\nax[3].plot(data_5_median.Humidity, linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[3].set_ylabel('Humidity [%]', fontsize = 14)\nax[3].legend(fontsize = 14)\n\nax[4].plot(data_5.Speed,'o', markerfacecolor='w')\nax[4].plot(data_5_median.Speed, linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[4].set_ylabel('Wind Speed [miles\/h]', fontsize = 14)\nax[4].legend(fontsize = 14)\n\nax[5].plot(data_5['WindDirection(Degrees)'],'o', markerfacecolor='w')\nax[5].plot(data_5_median['WindDirection(Degrees)'], linewidth = 1.5, color = 'red', label = 'Hourly median')\nax[5].set_ylabel('Wind direction [degrees]', fontsize = 14)\nax[5].legend(fontsize = 14)\n\nfig.suptitle('Trend of the various parameters over a five-day period', fontsize = 22)\nfig.tight_layout(rect=[0, 0.03, 1, 0.97])\n\nplt.show()","9ad2c02e":"grouped_m=data.groupby('MonthOfYear').mean().reset_index()\ngrouped_w=data.groupby('WeekOfYear').mean().reset_index()\ngrouped_d=data.groupby('DayOfYear').mean().reset_index()\ngrouped_h=data.groupby('TimeOfDay(h)').mean().reset_index()\n\nf, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8)) = plt.subplots(4, 2, sharex='col', sharey='row', figsize=(14,12))\nax3.set_ylim(45,60)\nax5.set_ylim(30.36,30.46)\nax7.set_ylim(60,85)\n\nax1.set_title('Mean Radiation by Hour')\npal = sns.color_palette(\"mako\", len(grouped_h))\nrank = grouped_h['Radiation'].argsort().argsort() \ng = sns.barplot(x=\"TimeOfDay(h)\", y='Radiation', data=grouped_h, palette=np.array(pal[::-1])[rank], ax=ax1)\nax1.set_xlabel('')\n\nax2.set_title('Mean Radiation by Month')\npal = sns.color_palette(\"mako\", len(grouped_m))\nrank = grouped_m['Radiation'].argsort().argsort() \ng = sns.barplot(x=\"MonthOfYear\", y='Radiation', data=grouped_m, palette=np.array(pal[::-1])[rank], ax=ax2)\nax2.set_xlabel('')\n\nax3.set_title('Mean Temperature by Hour')\npal = sns.color_palette(\"mako\", len(grouped_h))\nrank = grouped_h['Temperature'].argsort().argsort() \ng = sns.barplot(x=\"TimeOfDay(h)\", y='Temperature', data=grouped_h, palette=np.array(pal[::-1])[rank], ax=ax3)\nax3.set_xlabel('')\n\nax4.set_title('Mean Temperature by Month')\npal = sns.color_palette(\"mako\", len(grouped_m))\nrank = grouped_m['Temperature'].argsort().argsort() \ng = sns.barplot(x=\"MonthOfYear\", y='Temperature', data=grouped_m, palette=np.array(pal[::-1])[rank], ax=ax4)\nax4.set_xlabel('')\n\nax5.set_title('Mean Pressure by Hour')\npal = sns.color_palette(\"mako\", len(grouped_h))\nrank = grouped_h['Pressure'].argsort().argsort() \ng = sns.barplot(x=\"TimeOfDay(h)\", y='Pressure', data=grouped_h, palette=np.array(pal[::-1])[rank], ax=ax5)\nax5.set_xlabel('')\n\nax6.set_title('Mean Pressure by Month')\npal = sns.color_palette(\"mako\", len(grouped_m))\nrank = grouped_m['Pressure'].argsort().argsort() \ng = sns.barplot(x=\"MonthOfYear\", y='Pressure', data=grouped_m, palette=np.array(pal[::-1])[rank], ax=ax6)\nax6.set_xlabel('')\n\nax7.set_title('Mean Humidity by Hour')\npal = sns.color_palette(\"mako\", len(grouped_h))\nrank = grouped_h['Humidity'].argsort().argsort() \ng = sns.barplot(x=\"TimeOfDay(h)\", y='Humidity', data=grouped_h, palette=np.array(pal[::-1])[rank], ax=ax7)\n\nax8.set_title('Mean Humidity by Month')\npal = sns.color_palette(\"mako\", len(grouped_m))\nrank = grouped_m['Humidity'].argsort().argsort() \ng = sns.barplot(x=\"MonthOfYear\", y='Humidity', data=grouped_m, palette=np.array(pal[::-1])[rank], ax=ax8)\n\nplt.show()","7725b9fd":"corrmat = data.drop(['TimeOfDay(h)', 'TimeOfDay(m)', 'TimeOfDay(s)', 'UNIXTime', 'MonthOfYear', 'WeekOfYear'], inplace=False, axis=1)\ncorrmat = corrmat.corr()\nfig, ax = plt.subplots(figsize=(7,7))\nsns.heatmap(corrmat, vmin=-.8, vmax=.8, square=True, cmap = 'coolwarm')\nplt.show()","3bd46849":"#Plotting a heatmap of the various features in the dataset\nfig, ax = plt.subplots(figsize = (10,10))\nsns.heatmap(data.corr(), annot = True, cmap = 'YlGnBu')\nfig.suptitle('Correlation matrix', fontsize = 16)\nplt.show()","6ca43469":"fig, ax = plt.subplots(nrows =2, ncols = 3, figsize = (23,8))\n\nax[0,0].plot(data.Temperature, data.Radiation,'o', markerfacecolor='w')\nax[0,0].set_xlabel('Temperature [F]', fontsize = 14)\nax[0,0].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\n\nax[0,1].plot(data.Pressure, data.Radiation,'o', markerfacecolor='w')\nax[0,1].set_xlabel('Pressure [Hg]', fontsize = 14)\nax[0,1].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\n\nax[0,2].plot(data.Humidity, data.Radiation,'o', markerfacecolor='w')\nax[0,2].set_xlabel('Humidity [%]', fontsize = 14)\nax[0,2].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\n\nax[1,1].plot(data.Speed, data.Radiation,'o', markerfacecolor='w')\nax[1,1].set_xlabel('Wind speed [miles\/h]', fontsize = 14)\nax[1,1].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\n\nax[1,0].plot(data['WindDirection(Degrees)'], data.Radiation,'o', markerfacecolor='w')\nax[1,0].set_xlabel('Wind direction [degrees]', fontsize = 14)\nax[1,0].set_ylabel('Radiation [W\/m^2]', fontsize = 14)\n\nfig.delaxes(ax[1,2])\n\nfig.suptitle('Scatter plots of the solar radiation as a function of the various features', fontsize = 22)\nfig.tight_layout()\nfig.subplots_adjust(top=0.88)\n\nplt.show()","cd6b7cb3":"df['Month'] = df['Data'].apply(lambda y: re.search(r'^\\d+', y).group(0))\ndf['Day'] = df['Data'].apply(lambda y: re.search(r'(?<=\\\/)\\d+(?=\\\/)', y).group(0))\ndf['Year'] = df['Data'].apply(lambda y: re.search(r'(?<=\\\/)\\d+(?=\\s)', y).group(0))","5ffc3110":"df","411b9fb7":"df['Month'] = df['Data'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndf['Day'] = df['Data'].apply(lambda y: re.search(r'(?<=\\\/)\\d+(?=\\\/)', y).group(0)).astype(np.int)\ndf['Year'] = df['Data'].apply(lambda y: re.search(r'(?<=\\\/)\\d+(?=\\s)', y).group(0)).astype(np.int)","81e2bd9c":"df","2c5293b6":"df=df.drop(['Data'],axis=1)","d59dbbc7":"df","52994cfa":"df['Hour'] = df['Time'].apply(lambda y: re.search(r'^\\d+', y).group(0))\ndf['Minute'] = df['Time'].apply(lambda y: re.search(r'(?<=\\:)\\d+(?=\\:)', y).group(0))\ndf['Second'] = df['Time'].apply(lambda y: re.search(r'\\d+$', y).group(0))","cdcdc061":"df","67ed4835":"df['Hour'] = df['Time'].apply(lambda y: re.search(r'^\\d+', y).group(0)).astype(np.int)\ndf['Minute'] = df['Time'].apply(lambda y: re.search(r'(?<=\\:)\\d+(?=\\:)', y).group(0)).astype(np.int)\ndf['Second'] = df['Time'].apply(lambda y: re.search(r'\\d+$', y).group(0)).astype(np.int)","dc39bebd":"del df['Time']","f0b8a966":"df","cf7abbf8":"df['SunriseHour'] = df['TimeSunRise'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndf['SunriseMinute'] = df['TimeSunRise'].apply(lambda x: re.search(r'(?<=:)\\d+(?=:)', x).group(0)).astype(np.int)\n\ndf['SunsetHour'] = df['TimeSunSet'].apply(lambda x: re.search(r'^\\d+', x).group(0)).astype(np.int)\ndf['SunsetMinute'] = df['TimeSunSet'].apply(lambda x: re.search(r'(?<=:)\\d+(?=:)', x).group(0)).astype(np.int)\n\ndf = df.drop(['TimeSunRise', 'TimeSunSet'], axis=1)","6530565c":"df","9f8642a9":"df.dtypes","4baaa2c5":"y = df['Radiation'].copy()\nX = df.drop('Radiation', axis=1).copy()","ad4d9fa3":"X","d3faba1a":"scaler = StandardScaler()\n\nZ = scaler.fit_transform(X)","434b9499":"pd.DataFrame(Z)","4d03f1f4":"df['Year'].unique()","24aa8ecc":"df.drop(['SunriseHour'],axis=1)","6b5d1eed":"from sklearn.model_selection import KFold, RandomizedSearchCV\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nkf = KFold(shuffle=True, random_state=19)","36d1940c":"from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor, XGBRFRegressor\nfrom catboost import CatBoostRegressor\n\ntrees = {\n    'linear': LinearRegression(),\n    'randomfor': RandomForestRegressor(random_state=19), \n    'gradientb': GradientBoostingRegressor(random_state=19), \n    'xgb': XGBRegressor(random_state=19), \n    'xgbrf': XGBRFRegressor(random_state=19), \n    'catboost': CatBoostRegressor(random_state=19, silent=True),\n    'DecisionTr': DecisionTreeRegressor(random_state=19),\n    'extratre': ExtraTreesRegressor(random_state=19),\n    \n}","072dfe24":"scores = []\nrmse=[]\nfor train_index, test_index in kf.split(X):\n  X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n  y_train, y_test = y.iloc[train_index], y.iloc[test_index]","f0768093":"regression_model = LinearRegression()\nregression_model.fit(X_train, y_train)\nregresor_pred = regression_model.predict(X_test)\nscores.append(100*regression_model.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, regression_model.predict(X_test))))","d3d520bf":"Randomforest= RandomForestRegressor(random_state=7).fit(X_train, y_train)\nscores.append(100*Randomforest.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, Randomforest.predict(X_test))))","1186813f":"Gradientboost = GradientBoostingRegressor(random_state=19).fit(X_train, y_train)\nscores.append(100*Gradientboost.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, Gradientboost.predict(X_test))))","c9deb6e3":"XGB = XGBRegressor(random_state=19).fit(X_train, y_train)\nscores.append(100*XGB.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, XGB.predict(X_test))))","192fe7fd":"XGBFFR = XGBRFRegressor(random_state=133).fit(X_train, y_train)\nscores.append(100*XGBFFR.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, XGBFFR.predict(X_test))))","a3ecca46":"Catboost= CatBoostRegressor(random_state=19, silent=True).fit(X_train, y_train)\nscores.append(100*Catboost.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, Catboost.predict(X_test))))","c6ad0904":"DecisionTr = DecisionTreeRegressor(random_state=19).fit(X_train, y_train)\nscores.append(100*DecisionTr.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, DecisionTr.predict(X_test))))","1a028e51":"Extratrees = ExtraTreesRegressor(random_state=19).fit(X_train, y_train)\nscores.append(100*Extratrees.score(X_test, y_test))\nrmse.append(np.sqrt(mean_squared_error(y_test, Extratrees.predict(X_test))))","41b56ba3":"rmse,scores","376d37bc":"test1=pd.DataFrame({\"model\":['linear', 'randomfor', 'gradientb', 'xgb', 'xgbrf', 'catboost', 'decisiontr',\"extratr\"],\n                   \"r2\":[scores[0],scores[1],scores[2],scores[3],scores[4],scores[5],scores[6],scores[7]],\n                   \"rmse\":[rmse[0],rmse[1],rmse[2],rmse[3],rmse[4],rmse[5],rmse[6],rmse[7]]\n                   })\ntest1","b533cc42":"import plotly.graph_objects as go\nfig = go.Figure(data=[\n                      go.Bar(x=test1.model,y=test1.rmse),\n                      go.Bar(x=test1.model,y=test1.r2),\n])\nfig.show()","8cafea84":"# CB Regression","f97a337f":"# Testing data : R-squared & rmse","4098999e":"# Random forest Regression","ad8f436a":"A preliminary analysis of the dataset indicates that there are no missing values.","2917ac05":"Looking at the plots it is possible to deduce the following:\n\n1. The data for the Temperature, humidity, and wind speed seems to assume only discrete values. This could be connected with the type of sensors used for the data campaing;\n2. The pressure data seems to follow some clear pattern in which high and low pressure values interchange each other;\n3. The wind speed data is extremely volatile. The high volatility could make this feature a less \"certain\" one when carrying out the regression analysis;\n4. As expected, solar radiation is constant at zero during the night, but high variability is experienced during the day-hours;\n5. The wind direction data is volatile, but clear trends can be identified. Sometimes the variation of the measurements between 0 degrees and 360 degrees create a sense of \"change\" of the wind direction, which in practice is not there.","0379346e":"> it is time to carry out correlation analyses aimed at identifying if there are clear patterns (linear or non-linear) between the variable to be predicted (the solar radiation), and the features.","da6647fb":"ET Regression","de5b442a":"# Feature engineering and correlation analysis","f1725544":"# Models comparison","ae1baab6":"> Next step is to convert time and date parameters into a more useful format and add some coloumns that may be useful for visualisation and analysis.","61e3a656":"The ranges here identified look reasonable. In particular:\n\n* The Solar radiation assumes only positive values, and has a maximum value of 1600 W\/m^2 \n* The temperature ranges from 30.4 F to 71 F\n* The pressure variates very little, and in any case has a value of around 1 bar\n* The Humidity has values over 100 %, but only very slightly\n* Wind direction is correctly in the range from 0 to 360 degrees\n* Wind speed is always positive, and its maximum value is reasonable as it corresponds to a grade 8 of the Beaufort scale","1389612f":"# Data cleaning and preparation","48f12102":"> As a last step in the preliminary data analysis, it makes good sense to plot the data for limited range of time. In this case, a five-day period is selected.\n\n> Aside from the data, also the hourly-median of the data is represented in the following plots. This allows for an easier identification of potential patterns. The median is selected over the mean, because it is less affected by the presence of potential outliers.","5ae1f35e":"# DT Regression","e1075ed3":"# Linear regression","149d41ea":"# Importing libraries","9bea5a99":"> If the data handling has been carried out correctly, then it would be reasonable to expect that the solar radiation, for any considered day, would be approximately zero before the sunrise time, and after the sunset time. ","2bd1c485":"From the above plots, its clear that:\n* Temperature has strong corellation with solar irradiance. \n* Humidity has a negative correlation with solar irradiance, temperature and pressure.\n* Solar irradiance and temperature both peak at approximately 12:00. \n\nAdditionally, monthly means of both solar irradiance and temperature appear to decrease as winter approaches, with the exception of a very slight increase in solar irradiance from September to October.\n\n","0367f92e":"> The first step of the preliminary data analysis is therefore to check the ranges of the various features of the dataset, and to do a cross-check whether these ranges are reasonable.","18566ef4":"# Modeling ","d859f68c":"> In order to get a better understanding of the data, hourly and monthly means of several variables were visualised using bar plots.","2ddee2b7":"> In this section, the dataset is analysed to identify whether there are missing values and whether all the data is identified by the correct data-type. ","d9a4f571":"# Preliminary Data Analysis","a502e1b1":"# Gardient boosting Regression","06a3ed7d":"> Next step is to check for the distribution of the data, in order to understand how the various data is allocated between the lower and upper limits. This can be carried out by plotting either a distribution plot or a boxplot.\n\n> Both are plotted in this case, as they enable to have a more comprehensive understanding of the data.","37229252":"The plot suggests that the various dates have been correctly manipulated. It is now possible to proceed with the preliminary data analysis of the dataset.","f4646137":"# Data Training","8343637f":"> The correlation matrix indicates a positive linear correlation between the ambient temperature and the solar radiation. No clear linear correlation appears for the other features, and the second highest correlation value is identified for the humidity.","d71cdf3a":"# XGB Regression","05541e0f":"# Importing the dataset","6d60d2b3":"> The UNIXTime is converted into a datetime object, and the right timezone is allocated to this feature.","96608840":"Looking at the distribution of the data it is possible to conclude that most features have a skewed distribution, except for the wind directions, which is characterized by three peaks.\n\nAs it was possible to assume, roughtly 50 % of values of the solar radiation are located in the range between 0 W\/^2 and 250 W\/m^2 (there is no or little solar radiation at night). With respect to the wind speed, it seems that the high wind speeds areextreme outliers in a distribution that has most of its values in the range between 0 miles\/h and 20 miles\/h.","06e50191":"> The scatter plots show the distribution of the values of the various features as a function of the solar radiation. This allows to identify potential non-linear trends present.\n> \n> The scatter plots suggest the following:\n> \n> * It is confirmed a linear correlation between solar radiation and ambient temperature;\n> * It seems that the highest values of the solar radiation are taking place when the ambient pressure is the highest;\n> * It seems that the maximum present solar radiation decreases for high wind speeds.\n> ","f1af6ccc":"# RMSE scores","b9b97668":"# XGBRF Regression"}}