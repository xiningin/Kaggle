{"cell_type":{"e25933db":"code","5b33d522":"code","7857c7fd":"code","96aa36fb":"code","78efb858":"code","c5c07ecb":"code","cfc2b7c8":"code","138ad1db":"code","13aabf78":"code","46c4d63e":"code","f13da0cc":"code","fa2b2c4a":"code","03e4dd83":"code","e7ddec39":"code","1ff978ca":"code","12629c29":"code","69687b19":"code","7cd97ceb":"code","632d2763":"code","786d6077":"code","96e532d0":"code","a9de59b0":"code","1c406671":"code","95256805":"markdown","79fb5977":"markdown"},"source":{"e25933db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b33d522":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')","7857c7fd":"tweet_data = pd.read_csv('\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv')\ntweet_data.head()","96aa36fb":"tweet_data.info()","78efb858":"tweet_data.isna().sum()","c5c07ecb":"tweet_data.isna().count()","cfc2b7c8":"def missing_data(data):\n    \"\"\"this function handles the missing data percenatge wise and unique values as well in tabular form\"\"\"\n    total_count = tweet_data.isna().count()\n    total_nulls = tweet_data.isnull().sum()\n    percent_nulls = (tweet_data.isnull().sum()\/tweet_data.isnull().count()*100)\n    tb = pd.concat([ total_count, total_nulls, percent_nulls], axis=1, keys=[' total_count','Total nulls', 'null Percent'])\n    types = []\n    uni_vals = []\n    for col in tweet_data.columns:\n        dtype = str(tweet_data[col].dtype)\n        uniques = tweet_data[col].nunique()\n        types.append(dtype)\n        uni_vals.append(uniques)\n    tb['Types'] = types\n    tb['Unique values'] = uni_vals\n    return tb","138ad1db":"missing_data(tweet_data)","13aabf78":"def get_countplot(tweet_data):\n    \"\"\"this function handles the top 10 user specifications\"\"\"\n    user_cols = ['user_name', 'user_location', 'source']\n    for col in user_cols:\n        tweet_data[col].value_counts().head(10).plot(kind = 'bar', figsize = (15,5))\n        plt.show()\n","46c4d63e":"get_countplot(tweet_data)","f13da0cc":"tweet_data['text'].head()","fa2b2c4a":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","03e4dd83":"corpus = []\nps = PorterStemmer()\n\nfor i in range(0, tweet_data.shape[0]):\n    text = re.sub(pattern= '^[a-zA-Z]', repl= ' ', string= tweet_data['text'][i])\n    text = re.sub(r\"http\\S+\", \"\", text)\n    text = text.lower()\n    text = text.split()\n    words = [ word for word in text if word not in set(stopwords.words('english'))]\n    stem_words = [ps.stem(st_words) for st_words in words]\n    final_words = ' '.join(stem_words)\n    corpus.append(final_words)","e7ddec39":"corpus[:10]","1ff978ca":"\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\nwc = WordCloud(background_color='white', width=3000, height=2500).generate(str(corpus))\nplt.figure(figsize=(10,10))\nplt.title('most sound words')\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","12629c29":"tweet_data['date'].head() # it is object data type so convert them into datetime","69687b19":"tweet_data['new_date'] = pd.to_datetime(tweet_data['date'])\ntweet_data['new_date'].head()","7cd97ceb":"# create more columns on datetime so that we can analyse it\ntweet_data['year'] = tweet_data['new_date'].dt.year\ntweet_data['month'] = tweet_data['new_date'].dt.month\ntweet_data['day'] = tweet_data['new_date'].dt.day\ntweet_data['dayofweek'] = tweet_data['new_date'].dt.dayofweek\ntweet_data['hour'] = tweet_data['new_date'].dt.hour\ntweet_data['minute'] = tweet_data['new_date'].dt.minute\ntweet_data['dayofyear'] = tweet_data['new_date'].dt.dayofyear\ntweet_data['date_only'] = tweet_data['new_date'].dt.date","632d2763":"# consider only datetime parts columns\ncols1 = ['text', 'year', 'month', 'day', 'dayofweek',\n       'hour', 'minute', 'dayofyear', 'date_only']","786d6077":"tweet_data.groupby(['year', 'month'])['text'].count().plot(kind = 'bar', figsize = (15,5))\nplt.show()","96e532d0":"tweet_data.groupby( ['month', 'day'])['text'].count().plot(kind = 'bar', figsize = (15,5))\nplt.show()","a9de59b0":"tweet_data.groupby( ['day'])['text'].count().plot(kind = 'bar', figsize = (15,5))\nplt.show()","1c406671":"tweet_data.groupby( ['day', 'hour'])['text'].count().plot(kind = 'bar', figsize = (18,5))\nplt.show()","95256805":"### we must clean the data in order to go for wordcloud","79fb5977":"### Time analysis on tweets"}}