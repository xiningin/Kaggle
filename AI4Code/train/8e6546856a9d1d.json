{"cell_type":{"bcf9175e":"code","b3be87c7":"code","c828d3c0":"code","cfbe06ea":"code","da8ff667":"code","69a69de4":"code","71db8f0d":"code","eaf0ac80":"code","4304725b":"code","d1b300a5":"code","f0c3da91":"code","55b32ccf":"code","9c00a25a":"code","f5e44248":"code","9108f7c8":"code","e95a02f0":"code","670d0e46":"code","3f3455c2":"code","711af172":"code","930e5871":"code","6b004a58":"code","a52db056":"code","720e8088":"code","455446b2":"markdown","eae29afd":"markdown","00a66c88":"markdown","dad9bdc6":"markdown","24191f83":"markdown","75a90cdc":"markdown","02fe3154":"markdown","55991afa":"markdown","19fce6b7":"markdown","234b5237":"markdown","797ad847":"markdown","32d11428":"markdown","1441972b":"markdown","855fe1e3":"markdown"},"source":{"bcf9175e":"!pip install pyjanitor pyvis --quiet","b3be87c7":"import pandas as pd\nimport datetime\nimport janitor                                     # Clean APIs for data cleaning. Python implementation of R package Janitor\nfrom pyvis import network as net                   # Visualizing network graph\nimport networkx as nx                              # Create network graph with Python\nfrom IPython.core.display import display, HTML","c828d3c0":"connection_data = pd.read_csv(\"..\/input\/linkedin\/Connections.csv\", skiprows=3)","cfbe06ea":"connection_data.info()","da8ff667":"df = (\n    connection_data\n    .clean_names()                                              # remove spacing and capitalization\n    .drop(columns=['first_name', 'last_name', 'email_address']) # drop for privacy\n    .dropna(subset=['company', 'position'])                     # drop missing values in company and position\n    .to_datetime('connected_on', format='%d %b %Y')\n  )\ndf.head()","69a69de4":"df['company'].value_counts().head(10).plot(kind=\"barh\", title= \"Top 10 companies of my connections\").invert_yaxis(); ","71db8f0d":"df['position'].value_counts().head(10).plot(kind=\"barh\", title= \"Top 10 positions for my connections\").invert_yaxis();","eaf0ac80":"df['connected_on'].hist(xrot=35, bins=15);","4304725b":"pattern = \"freelance|self-employed|Self employed|Confidential\"\ndf = df[~df['company'].str.contains(pattern, case=False)]","d1b300a5":"df_company = df['company'].value_counts().reset_index()\ndf_company.columns = ['company', 'count']\ndf_company = df_company.sort_values(by=\"count\", ascending=False)\ndf_company.head(10)","f0c3da91":"df_position = df['position'].value_counts().reset_index()\ndf_position.columns = ['position', 'count']\ndf_position = df_position.sort_values(by=\"count\", ascending=False)\ndf_position.head(10)","55b32ccf":"nt = net.Network(notebook=True)\n\ng = nx.Graph()\ng.add_node(0, label = \"root\") # intialize yourself as central node\ng.add_node(1, label = \"Company 1\", size=10, title=\"info1\")\ng.add_node(2, label = \"Company 2\", size=40, title=\"info2\")\ng.add_node(3, label = \"Company 3\", size=60, title=\"info3\")\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(0, 3)\n\nnt.from_nx(g)\nnt.show('nodes.html')\ndisplay(HTML('nodes.html'))","9c00a25a":"print(f\"number of nodes: {g.number_of_nodes()}\")\nprint(f\"number of edges: {g.number_of_edges()}\")","f5e44248":"for i, row in df_company.head(5).iterrows():\n  print(row['company'] + \"-\" + str(row['count']))","9108f7c8":"print(df_company.shape)\ndf_company_reduced = df_company.loc[df_company['count']>=3]\nprint(df_company_reduced.shape)","e95a02f0":"print(df_position.shape)\ndf_position_reduced = df_position.loc[df_position['count']>=5]\nprint(df_position_reduced.shape)","670d0e46":"# initialize graph\ng = nx.Graph()\ng.add_node('root') # intialize yourself as central\n\n# use iterrows to iterate through the data frame\nfor _, row in df_company_reduced.iterrows():\n\n  # store company name and count\n  company = row['company']\n  count = row['count']\n\n  title = f\"<b>{company} \u2013 {count} connections<\/b>\"\n  positions = set([x for x in df[company == df['company']]['position']])\n  positions = ''.join('<li>{}<\/li>'.format(x) for x in positions)\n  position_list = f\"<ul>{positions}<\/ul>\"\n\n  hover_info = title + position_list\n\n  g.add_node(company, size=count*2, title=hover_info, color='#3449eb')\n  g.add_edge('root', company, color='grey')\n\n# generate the graph\nnt = net.Network(height='800px', width='1100px', bgcolor=\"black\", font_color='white')\nnt.from_nx(g)\nnt.hrepulsion()\n# more customization https:\/\/tinyurl.com\/yf5lvvdm\nnt.show('company_graph.html')\ndisplay(HTML('company_graph.html'))","3f3455c2":"# initialize graph\ng = nx.Graph()\ng.add_node('root') # intialize yourself as central\n\n# use iterrows tp iterate through the data frame\nfor _, row in df_position_reduced.iterrows():\n\n  count = f\"{row['count']}\"\n  position= row['position']\n\n  title = f\"<b>{count} connections<\/b>\"\n  \n  g.add_node(position, size=count, color='#3449eb', title=title)\n  g.add_edge('root', position, color='grey')\n\n# generate the graph\nnt = net.Network(height='700px', width='700px', bgcolor=\"black\", font_color='white')\nnt.from_nx(g)\nnt.hrepulsion()\nnt.show('position_graph.html')\ndisplay(HTML('position_graph.html'))","711af172":"def read_html(name: str):\n    import codecs\n    f = codecs.open(name, 'r')\n    return f.read()","930e5871":"!pip install jupyter-client==6.1.5 datapane --quiet\nimport datapane as dp","6b004a58":"# Signup usinn link and enter token id in next block of code.\n# !datapane signup","a52db056":"!datapane login --token=''","720e8088":"report_company = dp.Report(dp.HTML(read_html('company_graph.html'))) \nreport_position = dp.Report(dp.HTML(read_html('position_graph.html')))\n\nreport_company.upload(name='LinkedIn_connection_Company')\nreport_position.upload(name='LinkedIn_connection_Positions')","455446b2":"## Data Cleaning","eae29afd":"We all use LinkedIn to make connections with professionals in our industry or even from any other industry too. On LinkedIn, we see only a list of our connections, so it\u2019s hard to visualize the entire network of your connections. I tried to apply my python skill in Data Science to explore my connections on  LinkedIn and find out some interesting information and visualize it in the form of graph. \n\nGraphs are one of the most important data structures that is applied in many real-world solutions. One of them is social networks. This really looks exciting. We will be creating a network that connects you to all the companies from your connections.","00a66c88":"### Creating network for connections:","dad9bdc6":"### Example of simple network","24191f83":"### Reduce size of nodes:\nCurrently we have almost 2600 companies and over 2000 positions, that would make our network incredible large and slow down the visualization. To prevent that, we filter them down to counts of over 3 for company and 5 for position.","75a90cdc":"## Simple EDA","02fe3154":"## Publish to datapane","55991afa":"After we have our graphs, we can also get properties like number of nodes and edges.","19fce6b7":"### Remove Self-employed, Confidential like entries:\nNotice there is a \u201cSelf-employed\u201d category in our company column, digging more into the data we will see that there are many more such entries which are not actual company name. We\u2019ll be removing that for the sake of only having company names.","234b5237":"## Aggregate sum of connections for positions","797ad847":"### Download data:\nHere\u2019s a step-by-step guide for getting a copy of your data on LinkedIn:\n- Click on your Me drop down in the homepage\n- Head over to \u201cSettings & Privacy\u201d\n- Click on \u201cGet a copy of your data\u201d\n\nCheck connections only, and hit \u201cRequest archive\u201d. After a few minutes, you should get the archive file in your email.","32d11428":"First we create our network class which takes in a graph object in the end, and then save the network as a html.\n\nTo form our graph, we construct it with the Graph class, and then add nodes to it. The add_node function takes in a couple arguments. The number at the start are unique id\u2019s, this allows us to connect them later on. We can also use the labels as ID\u2019s as long as they are unique.\n\nWe can control the size by assigning integer values to the argument, and the title argument stands for the hover info.\nTry clicking on one of the nodes, and hover over it. We can see that the strings we pass in is displayed!","1441972b":"## Aggregate sum of connections for companies","855fe1e3":"### Creating the network\nBefore we create our LinkedIn network, let\u2019s start small, and figure out how PyVis and networkX work."}}