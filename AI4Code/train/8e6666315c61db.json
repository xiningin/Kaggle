{"cell_type":{"301069ae":"code","f21a705b":"code","8521c790":"code","539bfcc4":"code","7c3e05a9":"code","7675bf01":"code","6008afa8":"code","66e74e8a":"code","cafa221c":"code","ce8dd18f":"code","246073dc":"code","99ba6d74":"code","fd5654a6":"code","5a133b77":"code","953b73f6":"code","4b1cd377":"code","f17b452e":"code","a8c036d4":"code","d6948275":"code","9af76a10":"code","57c4a84d":"code","5e48c134":"code","6a6db9f0":"code","6eb7e4fc":"markdown","0068e50f":"markdown","31c8494d":"markdown","0f284190":"markdown","a4cd9cce":"markdown","37628f9d":"markdown"},"source":{"301069ae":"from PIL import Image\nImage.open(r\"..\/input\/best-artworks-of-all-time\/images\/images\/Leonardo_da_Vinci\/Leonardo_da_Vinci_112.jpg\") ","f21a705b":"import pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport IPython.display as display\nimport PIL.Image","8521c790":"import tensorflow as tf","539bfcc4":"content_pic_path = '..\/input\/best-artworks-of-all-time\/images\/images\/Vincent_van_Gogh\/Vincent_van_Gogh_1.jpg'\nstyle_pic_path = '..\/input\/best-artworks-of-all-time\/images\/images\/Jackson_Pollock\/Jackson_Pollock_14.jpg'","7c3e05a9":"dim = (224, 224)\ncontent_image = cv2.resize(cv2.imread(content_pic_path), dim, interpolation=cv2.INTER_AREA)\nstyle_image = cv2.resize(cv2.imread(style_pic_path), dim, interpolation=cv2.INTER_AREA)","7675bf01":"f, axarr = plt.subplots(1,2, figsize=(20,20),gridspec_kw = {'wspace':0, 'hspace':0})\nplt.axis(\"off\")\n\naxarr[0].set_title('Content Image')\naxarr[0].set_axis_off()\naxarr[0].imshow(cv2.cvtColor(content_image, cv2.COLOR_BGR2RGB))\n\naxarr[1].set_title('Style Image')\naxarr[1].set_axis_off()\naxarr[1].imshow(cv2.cvtColor(style_image, cv2.COLOR_BGR2RGB))","6008afa8":"content_image = tf.convert_to_tensor(content_image, dtype=tf.float32) \/ 255.0\nstyle_image = tf.convert_to_tensor(style_image, dtype=tf.float32) \/ 255.0\n\ncontent_image = tf.expand_dims(content_image, axis=0)\nstyle_image = tf.expand_dims(style_image, axis=0)","66e74e8a":"content_layers = ['block5_conv2'] \n\nstyle_layers = ['block1_conv1',\n                'block2_conv1',\n                'block3_conv1', \n                'block4_conv1', \n                'block5_conv1']\n\nnum_content_layers = len(content_layers)\nnum_style_layers = len(style_layers)\n","cafa221c":"def vgg_layers(layer_names):\n    \"\"\" Creates a vgg model that returns a list of intermediate output values.\"\"\"\n    # Load our model. Load pretrained VGG, trained on imagenet data\n    vgg = tf.keras.applications.VGG19(include_top=False, weights='imagenet')\n    vgg.trainable = False\n\n    outputs = [vgg.get_layer(name).output for name in layer_names]\n\n    model = tf.keras.Model([vgg.input], outputs)\n    return model","ce8dd18f":"style_extractor = vgg_layers(style_layers)\nstyle_outputs = style_extractor(content_image*255)","246073dc":"#Look at the statistics of each layer's output\nfor name, output in zip(style_layers, style_outputs):\n    print(name)\n    print(\"  shape: \", output.numpy().shape)\n    print(\"  min: \", output.numpy().min())\n    print(\"  max: \", output.numpy().max())\n    print(\"  mean: \", output.numpy().mean())\n    print()","99ba6d74":"def gram_matrix(input_tensor):\n    result = tf.linalg.einsum('bijc,bijd->bcd', input_tensor, input_tensor)\n    input_shape = tf.shape(input_tensor)\n    num_locations = tf.cast(input_shape[1]*input_shape[2], tf.float32)\n    return result\/(num_locations)","fd5654a6":"class StyleContentModel(tf.keras.models.Model):\n    def __init__(self, style_layers, content_layers):\n        super(StyleContentModel, self).__init__()\n        self.vgg =  vgg_layers(style_layers + content_layers)\n        self.style_layers = style_layers\n        self.content_layers = content_layers\n        self.num_style_layers = len(style_layers)\n        self.vgg.trainable = False\n\n    def call(self, inputs):\n        \"Expects float input in [0,1]\"\n        inputs = inputs*255.0\n        preprocessed_input = tf.keras.applications.vgg19.preprocess_input(inputs)\n        outputs = self.vgg(preprocessed_input)\n        style_outputs, content_outputs = (outputs[:self.num_style_layers], \n                                          outputs[self.num_style_layers:])\n\n        style_outputs = [gram_matrix(style_output)\n                         for style_output in style_outputs]\n\n        content_dict = {content_name:value \n                        for content_name, value \n                        in zip(self.content_layers, content_outputs)}\n\n        style_dict = {style_name:value\n                      for style_name, value\n                      in zip(self.style_layers, style_outputs)}\n\n        return {'content':content_dict, 'style':style_dict}\n","5a133b77":"extractor = StyleContentModel(style_layers, content_layers)\n\nresults = extractor(content_image)\n\nprint('Styles:')\nfor name, output in sorted(results['style'].items()):\n    print(\"  \", name)\n    print(\"    shape: \", output.numpy().shape)\n    print(\"    min: \", output.numpy().min())\n    print(\"    max: \", output.numpy().max())\n    print(\"    mean: \", output.numpy().mean())\n    print()\n\nprint(\"Contents:\")\nfor name, output in sorted(results['content'].items()):\n    print(\"  \", name)\n    print(\"    shape: \", output.numpy().shape)\n    print(\"    min: \", output.numpy().min())\n    print(\"    max: \", output.numpy().max())\n    print(\"    mean: \", output.numpy().mean())","953b73f6":"style_targets = extractor(style_image)['style']\ncontent_targets = extractor(content_image)['content']","4b1cd377":"image = tf.Variable(content_image)","f17b452e":"def clip_0_1(image):\n    return tf.clip_by_value(image, clip_value_min=0.0, clip_value_max=1.0)","a8c036d4":"opt = tf.optimizers.Adam(learning_rate=0.02, beta_1=0.99, epsilon=1e-1)","d6948275":"style_weight=1e-2\ncontent_weight=1e4","9af76a10":"def style_content_loss(outputs):\n    style_outputs = outputs['style']\n    content_outputs = outputs['content']\n    style_loss = tf.add_n([tf.reduce_mean((style_outputs[name]-style_targets[name])**2) \n                           for name in style_outputs.keys()])\n    style_loss *= style_weight \/ num_style_layers\n\n    content_loss = tf.add_n([tf.reduce_mean((content_outputs[name]-content_targets[name])**2) \n                             for name in content_outputs.keys()])\n    content_loss *= content_weight \/ num_content_layers\n    loss = style_loss + content_loss\n    return loss","57c4a84d":"@tf.function()\ndef train_step(image):\n    with tf.GradientTape() as tape:\n        outputs = extractor(image)\n        loss = style_content_loss(outputs)\n\n    grad = tape.gradient(loss, image)\n    opt.apply_gradients([(grad, image)])\n    image.assign(clip_0_1(image))\n","5e48c134":"def tensor_to_image(tensor):\n    tensor = tensor*255\n    tensor = np.array(tensor, dtype=np.uint8)\n    if np.ndim(tensor)>3:\n        assert tensor.shape[0] == 1\n        tensor = tensor[0]\n    return PIL.Image.fromarray(tensor).resize((356, 356))","6a6db9f0":"import time\nstart = time.time()\n\nepochs = 10\nsteps_per_epoch = 100\n\nstep = 0\nfor n in range(epochs):\n    for m in range(steps_per_epoch):\n        step += 1\n        train_step(image)\n        print(\".\", end='')\n    display.clear_output(wait=True)\n    display.display(tensor_to_image(image))\n    print(\"Train step: {}\".format(step))\n\nend = time.time()\nprint(\"Total time: {:.1f}\".format(end-start))","6eb7e4fc":"# Style Content Model","0068e50f":"## Neural Style Transfer using VGG19","31c8494d":"# Retrieve the VGG19 layers to train with","0f284190":"### Goal\n\nThe goal of this notebook is to use two pictures in order to do neural style transfer.<br>\nWe are also using tensorflow with VGG19 trained weights.","a4cd9cce":"# Training","37628f9d":"# Load Images"}}