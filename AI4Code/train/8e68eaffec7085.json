{"cell_type":{"915b5546":"code","95fd886d":"code","d691b6d1":"code","a91b73c7":"code","486217bd":"code","b2383f21":"code","8ef2c335":"code","2c32aa43":"code","a4a84d7e":"code","0ed6fc7e":"code","7b8fa2d5":"markdown"},"source":{"915b5546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","95fd886d":"\nimport pandas as pd\ndata = pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","d691b6d1":"data.head()","a91b73c7":"data.info()","486217bd":"Abnormal = data[data[\"class\"] == \"Abnormal\"]\nNormal   = data[data[\"class\"] == \"Normal\"]\nplt.scatter(Abnormal.pelvic_incidence,Abnormal.pelvic_radius,color=\"red\",label=\"Abnormal\",alpha= 0.4)\nplt.scatter(Normal.pelvic_incidence,Normal.pelvic_radius,color=\"green\",label=\"Normal\",alpha= 0.4)\nplt.xlabel(\"pelvic_incidence\")\nplt.ylabel(\"pelvic radius\")\nplt.legend()\nplt.show()","b2383f21":"#reduce class values \n\ndata[\"class\"]= [1 if each == \"Abnormal\" else 0 for each in data[\"class\"]]\ndata.info()","8ef2c335":"y = data[\"class\"].values\nx_data = data.drop([\"class\"],axis=1)\n#Normalization data values\n#x = (x_data- np.min(x_data))\/(np.max(x_data)-np.min(x_data))\nx_data.head()","2c32aa43":"#Train Test Split\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train, y_test = train_test_split(x_data,y,test_size = 0.3, random_state = 1)\n","a4a84d7e":"#KNN MODEL\nfrom sklearn.neighbors import KNeighborsClassifier\n\nKNN = KNeighborsClassifier(n_neighbors= 18)\nKNN.fit(x_train,y_train)\nprediction = KNN.predict(x_test)\nprint(\" {} nn score: {} \".format(18,KNN.score(x_test,y_test)))\n","0ed6fc7e":"# Find Best K value\nscorelist = []\nfor each in range(1,25):\n    Knn1 = KNeighborsClassifier(n_neighbors = each)\n    Knn1.fit(x_train,y_train)\n    scorelist.append(Knn1.score(x_test,y_test))\n\n\nplt.plot(range(1,25),scorelist)\nplt.xlabel(\"K Values\")\nplt.ylabel(\"Accuracy\")\nplt.figure(figsize=[13,8])\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(scorelist),1+scorelist.index(np.max(scorelist))))","7b8fa2d5":"*K-NEAREST NEIGHBORS (KNN)**"}}