{"cell_type":{"509c396b":"code","eabb440b":"code","a1099794":"code","c720317f":"code","9854ad0b":"code","c870d682":"code","c70a2fb7":"code","2bc6b608":"code","2da8876a":"code","d5a2dc94":"code","993e3985":"code","9ff468b2":"code","f8da888e":"markdown","2455b6b3":"markdown","0aa01af0":"markdown","59f075ee":"markdown","9bf38f62":"markdown","cfcf6c1f":"markdown","99072f11":"markdown","e42ed547":"markdown","60945bb6":"markdown","0ae67655":"markdown","9196c0dc":"markdown","7da45c51":"markdown"},"source":{"509c396b":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt","eabb440b":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","a1099794":"train.head()","c720317f":"test.head()","9854ad0b":"train = train.drop(columns = ['Name'])\ntest = test.drop(columns = ['Name'])\ntrain.head()","c870d682":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\n# Train set\ntrain['Cabin'] = le.fit_transform(train['Cabin'].astype('str'))\ntrain['Embarked'] = le.fit_transform(train['Embarked'].astype('str'))\ntrain['Ticket'] = le.fit_transform(train['Ticket'].astype('category'))\ntrain['Sex'] = le.fit_transform(train['Sex'].astype('category'))\n\n# Test set\ntest['Cabin'] = le.fit_transform(test['Cabin'].astype('str'))\ntest['Embarked'] = le.fit_transform(test['Embarked'].astype('str'))\ntest['Ticket'] = le.fit_transform(test['Ticket'].astype('category'))\ntest['Sex'] = le.fit_transform(test['Sex'].astype('category'))\n\ntrain.head()","c70a2fb7":"X_train = train.copy().drop(columns = ['Survived'])\ny_train = train.copy()['Survived']\n\nX_train.head()","2bc6b608":"from sklearn.model_selection import StratifiedKFold, RandomizedSearchCV\nfrom sklearn.metrics import make_scorer, roc_auc_score\n\nsearch_space = [\n  {\n    'n_estimators': [100, 200, 300, 400],\n    'learning_rate': [0.01, 0.1, 0.2, 0.3],\n    'max_depth': range(3, 10),\n    'colsample_bytree': [i\/10.0 for i in range(1, 3)],\n    'gamma': [i\/10.0 for i in range(3)],\n  }\n]\n\ncv_method = StratifiedKFold(n_splits=5, shuffle = True, random_state=0)\nscoring = {'AUC':make_scorer(roc_auc_score)}","2da8876a":"from xgboost import XGBClassifier\n\noptimizer = RandomizedSearchCV(\n  estimator = XGBClassifier(),\n  param_distributions=search_space,\n  cv=cv_method,\n  scoring=scoring,\n  refit='AUC',\n  return_train_score = True,\n  verbose=1,\n  n_iter = 100,\n  n_jobs = 10, \n)\n\nxgb_classifier = optimizer.fit(X_train, y_train)","d5a2dc94":"features = X_train.columns\nimp_dict = {features[i]:optimizer.best_estimator_.feature_importances_[i] for i in range(len(features))}\nimp_dict = sorted(imp_dict.items(), key=lambda x: x[1])\nprint(imp_dict)\n\nplt.bar(*zip(*imp_dict))\nplt.xticks(rotation=\"vertical\")\nplt.show()","993e3985":"y_pred = xgb_classifier.predict(test)\npd.DataFrame(y_pred).head()","9ff468b2":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test.PassengerId.values\nsubmission['Survived'] = y_pred\n\nsubmission.to_csv('submission.csv',index = False)\nsubmission.head()","f8da888e":"## Feature importance","2455b6b3":"# Submission","0aa01af0":"# Codifying categorical variables","59f075ee":"# XGBoost Classifier","9bf38f62":"# Dropping name column","cfcf6c1f":"## Hyperparameter tuning","99072f11":"This is an XGBoost approach to classifying Titanic survival. XGBoost is an advanced machine learning model, capable of handing missing values (seeing as how there are many in the Cabin field).","e42ed547":"## X and y split","60945bb6":"# Train and test sets","0ae67655":"## Testing","9196c0dc":"# Load packages","7da45c51":"## Fitting to train set"}}