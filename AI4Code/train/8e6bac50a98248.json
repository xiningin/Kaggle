{"cell_type":{"345f2cab":"code","4893d846":"code","87b68355":"code","a5e23972":"code","20b07495":"code","959db718":"code","252421a1":"code","42e32513":"code","6a7d2967":"code","353b768a":"code","b8e92774":"code","483cea46":"code","74168e75":"code","6324774b":"code","0d2807ec":"code","cdc87e49":"code","1c419cf0":"code","e75cbd3b":"code","2503d72d":"code","75593de3":"code","bc4a2708":"code","d2205235":"code","027c9766":"code","b78e1c7d":"code","4ecc3cb5":"code","a2ae64cb":"code","a6ae415f":"code","6cc13b64":"code","4faae644":"code","bd460a68":"code","953bf265":"code","c3a5127d":"code","c4dbd60d":"code","b0d9f94b":"markdown","182f6fc4":"markdown","cba2bb17":"markdown","988dbe46":"markdown","3add1fc8":"markdown","3c37e2d1":"markdown","6c780636":"markdown","104a9fe0":"markdown","77265d4b":"markdown","caaa0ff2":"markdown","23716e64":"markdown","d5d90644":"markdown","00e2a0c0":"markdown","b53b99dd":"markdown","f672e1a4":"markdown"},"source":{"345f2cab":"import pandas as pd\nimport numpy as np\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\ndatas = [train_data, test_data]","4893d846":"train_data.info()","87b68355":"test_data.info()","a5e23972":"sex_map = {'male' : 0, 'female' : 1}\n\ntrain_data.Sex = train_data.Sex.map(sex_map)\n\ntest_data.Sex = test_data.Sex.map(sex_map)","20b07495":"# Filling the age missing values based on Sex and Class mean\nage_test = train_data.groupby(['Sex', 'Pclass'])['Age']\nage_test.mean()","959db718":"# To improve: Find a better way to automatize the process!\n\nfor ds in datas:\n    ds.loc[(ds['Sex'] == 0) & (ds['Pclass'] == 1) & ds['Age'].isnull(), 'Age'] = 41.281386\n    ds.loc[(ds['Sex'] == 0) & (ds['Pclass'] == 2) & ds['Age'].isnull(), 'Age'] = 30.740707\n    ds.loc[(ds['Sex'] == 0) & (ds['Pclass'] == 3) & ds['Age'].isnull(), 'Age'] = 26.507589\n    ds.loc[(ds['Sex'] == 1) & (ds['Pclass'] == 1) & ds['Age'].isnull(), 'Age'] = 34.611765\n    ds.loc[(ds['Sex'] == 1) & (ds['Pclass'] == 2) & ds['Age'].isnull(), 'Age'] = 28.722973\n    ds.loc[(ds['Sex'] == 1) & (ds['Pclass'] == 3) & ds['Age'].isnull(), 'Age'] = 21.750000\n    ds['Age'] = ds['Age'].astype(int)","252421a1":"pd.qcut(train_data.Age, 8)","42e32513":"for ds in datas:\n    ds.loc[ds['Age'] <= 17, 'Age'] = 0\n    ds.loc[(ds['Age'] > 17) & (ds['Age'] <= 21), 'Age'] = 1\n    ds.loc[(ds['Age'] > 21) & (ds['Age'] <= 25), 'Age'] = 2\n    ds.loc[(ds['Age'] > 25) & (ds['Age'] <= 26), 'Age'] = 3\n    ds.loc[(ds['Age'] > 26) & (ds['Age'] <= 30), 'Age'] = 4\n    ds.loc[(ds['Age'] > 30) & (ds['Age'] <= 36), 'Age'] = 5\n    ds.loc[(ds['Age'] > 36) & (ds['Age'] <= 45), 'Age'] = 6\n    ds.loc[ds['Age'] > 45, 'Age'] = 7","6a7d2967":"train_data['Age'].value_counts()","353b768a":"test_data['Age'].value_counts()","b8e92774":"train_data[train_data['Embarked'].isnull()]","483cea46":"embarked_treatment = train_data.groupby('Embarked')\nembarked_treatment.Survived.value_counts()","74168e75":"train_data.fillna({'Embarked' : 'S'}, inplace = True)\n\nembarked_map = {'S' : 0, 'C' : 1, 'Q' : 2}\n\nfor ds in datas:\n    ds.Embarked = ds.Embarked.map(embarked_map)","6324774b":"test_data[test_data.Fare.isnull()]","0d2807ec":"test_data.fillna({'Fare' : test_data.Fare.mean()}, inplace = True)","cdc87e49":"pd.qcut(train_data.Fare, 5)","1c419cf0":"for ds in datas:\n    ds['Fare'] = ds['Fare'].astype(int)\n    ds.loc[ds['Fare'] <= 7.854, 'Fare'] = 0\n    ds.loc[(ds['Fare'] > 7.854) & (ds['Fare'] <= 10.5), 'Fare'] = 1\n    ds.loc[(ds['Fare'] > 10.5) & (ds['Fare'] <= 21.679), 'Fare'] = 2\n    ds.loc[(ds['Fare'] > 21.679) & (ds['Fare'] <= 39.688), 'Fare'] = 3\n    ds.loc[ds['Fare'] > 39.688, 'Fare'] = 4","e75cbd3b":"for ds in datas:\n    ds['Title'] = ds.Name.str.extract(' ([A-Za-z]+)\\.', expand = False)\n    \ntrain_data['Title'].value_counts()","2503d72d":"titles = {'Mr' : 1, 'Miss' : 2, 'Mrs' : 3, 'Master' : 4, 'Other' : 5}\n\nfor ds in datas:\n    ds['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Lady', 'Capt', 'Jonkheer', 'Countess', 'Don', 'Sir', 'Dona'], 'Other', inplace = True)\n    ds['Title'].replace('Ms', 'Miss', inplace = True)\n    ds['Title'].replace('Mlle', 'Miss', inplace = True)\n    ds['Title'].replace('Mme', 'Mrs', inplace = True)\n    ds['Title'] = ds['Title'].map(titles)\n    ds['Title'].fillna(0, inplace = True)","75593de3":"for ds in datas:\n    ds['Floor'] = ds.Cabin.str.extract('([A-Za-z]+)', expand = False)\n    ds['Floor'].fillna('T', inplace = True)","bc4a2708":"train_data","d2205235":"train_data['Cabin'].unique()","027c9766":"train_data['Floor'].value_counts()","b78e1c7d":"test_data['Floor'].value_counts()","4ecc3cb5":"floors = {'ABC' : 1, 'DE' : 2, 'FG' : 3, 'T' : 4}\n\nfor ds in datas:\n    ds['Floor'].replace(['A', 'B', 'C'], 'ABC', inplace = True)\n    ds['Floor'].replace(['D', 'E'], 'DE', inplace = True)\n    ds['Floor'].replace(['F', 'G'], 'FG', inplace = True)\n    ds['Floor'] = ds['Floor'].map(floors)","a2ae64cb":"for ds in datas:\n    ds['Age_Pclass'] = ds['Age'] * ds['Pclass']\n    ds['Relatives'] = ds['SibSp'] + ds['Parch']","a6ae415f":"for ds in datas:\n    ds.drop('Cabin', axis = 1, inplace = True)\n    ds.drop('Name', axis = 1, inplace = True)\n    ds.drop('Ticket', axis = 1, inplace = True)","6cc13b64":"train_data","4faae644":"test_data","bd460a68":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = RandomForestClassifier(criterion = \"gini\", \n                     min_samples_leaf = 1, \n                     min_samples_split = 10,   \n                     n_estimators=100, \n                     max_features='auto', \n                     oob_score=True, \n                     random_state=1, \n                     n_jobs=-1)\n\ntrain_x = train_data.drop(['PassengerId', 'Survived'], axis = 1)\ntrain_y = train_data['Survived']\ntest_x = test_data.drop('PassengerId', axis = 1)\n\nmodel.fit(train_x, train_y)\n\nprediction = model.predict(test_x)\n\nmodel_accuracy = model.score(train_x, train_y)\nprint(model_accuracy)","953bf265":"parametros = pd.DataFrame({'feature':train_x.columns,'Parametros':np.round(model.feature_importances_,3)})\nparametros = parametros.sort_values('Parametros',ascending=False).set_index('feature')","c3a5127d":"parametros.plot.bar()","c4dbd60d":"submission = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived' : prediction})\n\nsubmission.to_csv('Submission.csv', index = False)","b0d9f94b":"## Model","182f6fc4":"## Age","cba2bb17":"## Removing remaining features","988dbe46":"## Sex","3add1fc8":"## Importing data and libs","3c37e2d1":"# Titanic - Improving the model","6c780636":"## New features (Relatives and Age_Pclass)","104a9fe0":"## Embarked","77265d4b":"## Final Analysis","caaa0ff2":"## Floors","23716e64":"## Analyzing our data","d5d90644":"## Titles","00e2a0c0":"## Submission","b53b99dd":"## Feature importance","f672e1a4":"## Fare"}}