{"cell_type":{"07ae2e42":"code","ec9b1d56":"code","fc8cf316":"code","93322b13":"code","89f915a3":"code","cf7b377e":"code","6264a428":"code","54ae1fee":"code","009688fb":"code","1abdede5":"code","43742ca7":"code","562c68ff":"code","e4107e7c":"code","022fa38c":"code","1258a427":"code","6ea6f7dc":"code","79cc0ac8":"code","4dea1c9c":"code","eed35764":"code","dadb55f5":"code","a41d77eb":"code","3375fec8":"code","a3fb6a85":"markdown","f359a32d":"markdown","baa0b17e":"markdown","37f9fd5f":"markdown","dedaa71e":"markdown","689dfd0c":"markdown"},"source":{"07ae2e42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec9b1d56":"import torch\nimport torch.nn.functional as F\nfrom torchvision import datasets,transforms\nfrom torch import nn\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n#from tqdm.notebook import tqdm\nfrom tqdm import tqdm","fc8cf316":"# # Dowload the dataset\n# from torchvision.datasets.utils import download_url\n# dataset_url = \"http:\/\/files.fast.ai\/data\/cifar10.tgz\"\n# download_url(dataset_url, '.')\n# import tarfile\n# # Extract from archive\n# with tarfile.open('.\/cifar10.tgz', 'r:gz') as tar:\n#     tar.extractall(path='.\/data')","93322b13":"trainData = pd.read_csv('\/kaggle\/input\/cifar-10\/trainLabels.csv')\ntrainData.head()","89f915a3":"print(\"Number of points:\",trainData.shape[0])\nprint(\"Number of features:\",trainData.shape[1])\nprint(\"Features:\",trainData.columns.values)\nprint(\"Number of Unique Values\")\nfor col in trainData:\n    print(col,\":\",len(trainData[col].unique()))\nplt.figure(figsize=(12,8))\nsns.countplot(x='label',data=trainData)\nplt.ylabel('Frequency-Counts', fontsize=15)\nplt.xlabel('ClassId',fontsize=13)\nplt.xticks(rotation='vertical')\nplt.title('Class Counts',fontsize=15)\nplt.show()\n# Classes=trainData['label'].unique()\n# Classes","cf7b377e":"from torchvision.datasets import ImageFolder\nfrom torchvision.transforms import ToTensor","6264a428":"data_dir = '\/kaggle\/input\/cifar10-pngs-in-folders\/cifar10\/cifar10'\ndataset = ImageFolder(data_dir+'\/train', transform=ToTensor())\n# print(dataset)","54ae1fee":"# random_seed = 21\n# torch.manual_seed(random_seed);\nfrom torch.utils.data import random_split\nval_size = 5000\ntrain_size = len(dataset) - val_size\n\ntrain_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","009688fb":"from torch.utils.data.dataloader import DataLoader\n\nbatch_size=64\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=4, pin_memory=True)","1abdede5":"import torch.nn as nn\nimport torch.nn.functional as F","43742ca7":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","562c68ff":"device = get_default_device()\ndevice","e4107e7c":"@torch.no_grad()\ndef accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        accu = accuracy(out,labels)\n        return loss,accu\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'Loss': loss.detach(), 'Accuracy': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['Loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['Accuracy'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'Loss': epoch_loss.item(), 'Accuracy': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch :\",epoch + 1)\n        print(f'Train Accuracy:{result[\"train_accuracy\"]*100:.2f}% Validation Accuracy:{result[\"Accuracy\"]*100:.2f}%')\n        print(f'Train Loss:{result[\"train_loss\"]:.4f} Validation Loss:{result[\"Loss\"]:.4f}')","022fa38c":"class Cifar10CnnModel(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16\n            nn.BatchNorm2d(64),\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8\n            nn.BatchNorm2d(128),\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4\n            nn.BatchNorm2d(256),\n\n            nn.Flatten(), \n            nn.Linear(256*4*4, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10))\n        \n    def forward(self, xb):\n        return self.network(xb)","1258a427":"model = Cifar10CnnModel()","6ea6f7dc":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device)","79cc0ac8":"@torch.no_grad()\ndef evaluate(model, data_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in data_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(model, train_loader, val_loader,epochs=10,learning_rate=0.001):\n    best_valid = None\n    history = []\n    optimizer = torch.optim.Adam(model.parameters(), learning_rate,weight_decay=0.0005)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        train_accuracy = []\n        for batch in tqdm(train_loader):\n            loss,accu = model.training_step(batch)\n            train_losses.append(loss)\n            train_accuracy.append(accu)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['train_accuracy'] = torch.stack(train_accuracy).mean().item()\n        model.epoch_end(epoch, result)\n        if(best_valid == None or best_valid<result['Accuracy']):\n            best_valid=result['Accuracy']\n            torch.save(model.state_dict(), 'cifar10-cnn.pth')\n        history.append(result)\n    return history","4dea1c9c":"history = fit(model, train_dl, val_dl)","eed35764":"def plot_accuracies(history):\n    Validation_accuracies = [x['Accuracy'] for x in history]\n    Training_Accuracies = [x['train_accuracy'] for x in history]\n    plt.plot(Training_Accuracies, '-rx')\n    plt.plot(Validation_accuracies, '-bx')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Accuracy vs. No. of epochs');\nplot_accuracies(history)","dadb55f5":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['Loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\nplot_losses(history)","a41d77eb":"final_model = Cifar10CnnModel()\nfinal_model.load_state_dict(torch.load('\/kaggle\/working\/cifar10-cnn.pth'))\nto_device(final_model, device);","3375fec8":"test_dataset = ImageFolder(data_dir+'\/test', transform=ToTensor())\ntest_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size), device)\nresult = evaluate(final_model, test_loader)\nprint(f'Test Accuracy:{result[\"Accuracy\"]*100:.2f}%')","a3fb6a85":"# Data Analysis","f359a32d":"## Validation Set","baa0b17e":"## Download DataSet","37f9fd5f":"So this is a balanced Dataset","dedaa71e":"# Test Data","689dfd0c":"# GPU Device Loader"}}