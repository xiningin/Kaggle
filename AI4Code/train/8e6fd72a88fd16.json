{"cell_type":{"da15d5ec":"code","3dd11acf":"code","a0007123":"code","6360ea4b":"code","59e11e24":"code","9885e843":"code","1742f1d2":"code","2fee85f6":"code","0341d8c6":"code","539be479":"code","68e5d6c5":"code","a5b9e681":"code","015d6c01":"code","540c21cf":"code","e69b4101":"code","df04622e":"code","10d8a274":"code","eb06bca6":"markdown","ad6a5f68":"markdown","33f80661":"markdown","f645adb1":"markdown","f9e7ec60":"markdown","464083c7":"markdown"},"source":{"da15d5ec":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3dd11acf":"# Loading the dataset into dataframe\niris_dataset = pd.read_csv('..\/input\/iris\/Iris.csv')","a0007123":"iris_dataset.head()","6360ea4b":"# checking the null values in dataset\nprint(f\"Null values in dataset - {iris_dataset.isnull().sum()}\")","59e11e24":"# Checking the correaltion in Iris Dataset\niris_dataset.iloc[:,1:5].corr()","9885e843":"sns.heatmap(iris_dataset.drop(['Id'], axis=1).corr())","1742f1d2":"# Exploratory Data Analysis\n# Plotting dist plot\nsns.displot(iris_dataset['SepalLengthCm'])","2fee85f6":"# Plotting jointplot\nsns.jointplot(x='SepalLengthCm',y='PetalLengthCm', data=iris_dataset,hue='Species')\nsns.jointplot(x='SepalWidthCm',y='PetalWidthCm', data=iris_dataset,hue='Species')","0341d8c6":"sns.pairplot(iris_dataset.drop('Id',axis=1),hue='Species')","539be479":"sns.countplot(x='Species',data=iris_dataset)","68e5d6c5":"# plt.figure(figsize=(9,7))\nsns.boxplot(x='Species',y='PetalWidthCm',data=iris_dataset)\nplt.show()","a5b9e681":"f, ax = plt.subplots(figsize=(7, 5))\nsns.despine(f)\nsns.barplot(x='Species', y='SepalLengthCm', data=iris_dataset, palette='coolwarm')","015d6c01":"iris_dataset['Species'].value_counts()","540c21cf":"sns.boxplot(x=iris_dataset['Species'], y=iris_dataset['SepalWidthCm'])\nplt.show()","e69b4101":"# Label encoding the target column\nfrom sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()\niris_dataset['Species'] = label_encoder.fit_transform(iris_dataset['Species'])\niris_dataset.head()","df04622e":"# Importing the models\nfrom sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegressionCV, RidgeClassifierCV, SGDClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.model_selection import ShuffleSplit, cross_validate, train_test_split\nfrom xgboost import XGBClassifier\n\n# Splitting dataset into train, test set\nX_train, X_test, y_train, y_test = train_test_split(iris_dataset.iloc[:,1:5].values,\n                                                    iris_dataset.iloc[:,5].values, test_size=0.25,random_state=0)\n\n# Using Shuffle Split for cross validation of dataset\ncv_split = ShuffleSplit(n_splits = 10, test_size = .3, train_size = .7, random_state = 0 )\n\n# Initializing Algorithms\nalgorithm_list = {\"ada_boost\": AdaBoostClassifier(),\n                  \"gradient_boost\":GradientBoostingClassifier(), \n                  \"logistic_regression\":LogisticRegressionCV(solver='liblinear'),\n                  \"ridge_classifier\": RidgeClassifierCV(),\"sgdc_classifier\": SGDClassifier(),\n                  \"LDA\": LinearDiscriminantAnalysis(), \"xgb_classifier\": XGBClassifier(use_label_encoder=False,eval_metric=\"mlogloss\"),\n                 \"QDA\":QuadraticDiscriminantAnalysis()}\n\n# Cross validation and fitting algorithms\nfor key,alg in algorithm_list.items():\n    try:\n        cv_results = cross_validate(alg, X_train, y_train, cv  = cv_split)\n        alg.fit(X_train, y_train)\n        print(f\"Classifier - {key: <20} || test_score_mean - {cv_results.get('test_score').mean()}\")\n    except Exception as e:\n        print(f\"Exception occurred in {str(e)}\")\n        pass","10d8a274":"# Making the predictions and calculating the accuracy score\nfrom sklearn.metrics import accuracy_score\n\nalgorithm_precision = {}\nfor key,alg in algorithm_list.items():\n    try:\n        predictions = alg.predict(X_test)\n        score = accuracy_score(y_test,predictions)\n        print(f\"Classifier - {key: <20}, Score - {score}\")\n    except Exception as e:\n        print(f\"Exception occurred in {str(e)}\")\n        pass","eb06bca6":"# Data Cleaning","ad6a5f68":"As we can see from the below countplot that the dataset is balanced as there are equal number of 3 categories","33f80661":"# Exploratory Data Analysis","f645adb1":"Hypertuning above algorithms (In Progress)","f9e7ec60":"# Cross validation, fitting of dataset into some boosting and normal algorithms","464083c7":"# Making predictions and calculating accuracy score"}}