{"cell_type":{"a9a0ad0c":"code","9733443f":"code","81a87052":"code","3fb28c47":"code","3ad4b209":"code","7dfe869c":"code","ba9a465d":"code","1f338fdc":"code","50de368f":"code","868aa59f":"code","a06f51ff":"code","6481bd61":"code","480d6e5d":"code","b827f6e7":"code","21dc6066":"code","31e4646b":"markdown","4d304dc7":"markdown","82809289":"markdown","076400a0":"markdown"},"source":{"a9a0ad0c":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\n!pip install catboost\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import Lasso","9733443f":"test = pd.read_csv(\"..\/input\/dsc-psut-continued\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/dsc-psut-continued\/train.csv\")\ndf = pd.concat([test.assign(ind=0),train.assign(ind=1)], ignore_index=True)","81a87052":"df.drop('Id', inplace=True, axis=1)\ndf['MSSubClass'] = df['MSSubClass'].astype(str)","3fb28c47":"df['Utilities'].fillna(df['Utilities'].mode()[0], inplace=True)\ndf['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\n\nobjects = []\nnumerics = []\nfor i in df.columns:\n    if df[i].dtype == object:\n        objects.append(i)\n    if df[i].dtype in ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']:\n        numerics.append(i)\n\ndf[objects] = df[objects].fillna('None')\ndf[numerics] = df[numerics].fillna(0)","3ad4b209":"df.loc[((df['MasVnrArea']!=0) & (df['MasVnrType']==\"None\")),'MasVnrArea']=0\n\ncond_MasVArea = df['MasVnrArea']!=0\ncond_MasVType = df['MasVnrType']=='None'\n\ndf_v=df[['MasVnrArea', 'MasVnrType']]\n\ngroup = df_v.groupby('MasVnrType')['MasVnrArea'].mean()\nmeanA = [group['BrkCmn'], group['BrkFace'], group['Stone']]\n\nfor val in df[(cond_MasVArea& cond_MasVType)]['MasVnrArea']:\n    lf = lambda x : abs(x - val)\n    cv = min(meanA, key=lf)\n    cond_MasVArea_new = df['MasVnrArea']== val\n    df.loc[(cond_MasVArea_new & cond_MasVType, 'MasVnrType')] = group[group == cv].index[0]\n","7dfe869c":"cond_FinSF2 = df['BsmtFinSF2']!=0\ncond_FinType2 = df['BsmtFinType2']=='None'\n\ndf_v=df[['BsmtFinSF2', 'BsmtFinType2']]\n\ngroup = df_v.groupby('BsmtFinType2')['BsmtFinSF2'].mean()\nmeanA = [group['ALQ'], group['BLQ'], group['GLQ'], group['LwQ'], group['Rec'], group['Unf']]\n\nfor val in df[(cond_FinSF2 & cond_FinType2)]['BsmtFinSF2']:\n    lf = lambda x : abs(x - val)\n    cv = min(meanA, key=lf)\n    cond_BsmtFinSF2_new = df['BsmtFinSF2']== val\n    df.loc[(cond_BsmtFinSF2_new & cond_FinType2, 'BsmtFinType2')] = group[group == cv].index[0]","ba9a465d":"cond_MiscVal = df['MiscVal']!=0\ncond_MiscFeature = df['MiscFeature']=='None'\n\ndf_v=df[['MiscVal', 'MiscFeature']]\n\ngroup = df_v.groupby('MiscFeature')['MiscVal'].mean()\nmeanA = [group['Gar2'], group['Othr'], group['Shed'], group['TenC']]\n\nfor val in df[(cond_MiscVal & cond_MiscFeature)]['MiscVal']:\n    lf = lambda x : abs(x - val)\n    cv = min(meanA, key=lf)\n    cond_MiscVal_new = df['MiscVal']== val\n    df.loc[(cond_MiscVal_new & cond_MiscFeature, 'MiscFeature')] = group[group == cv].index[0]\n\ndf.loc[((df['MiscVal']==0) & (df['MiscFeature']!=\"None\")),'MiscFeature']= 'None'","1f338fdc":"cond_PoolArea = df['PoolArea']!=0\ncondPoolQC = df['PoolQC']=='None'\n\ndf_v=df[['PoolArea', 'PoolQC']]\n\ngroup = df_v.groupby('PoolQC')['PoolArea'].mean()\nmeanA = [group['Ex'], group['Fa'], group['Gd']]\n\nfor val in df[(cond_PoolArea & condPoolQC)]['PoolArea']:\n    lf = lambda x : abs(x - val)\n    cv = min(meanA, key=lf)\n    cond_PoolArea_new = df['PoolArea']== val\n    df.loc[(cond_PoolArea_new & condPoolQC, 'PoolQC')] = group[group == cv].index[0]\n","50de368f":"ilocGT = df.columns.get_loc('GarageType')\ndf.iloc[1116,ilocGT]='None'","868aa59f":"df['lotaxoq'] = df['LotArea'] * df['OverallQual']\ndf['ocxoq'] = df['OverallCond'] * df['OverallQual']\n\ndf['haspool'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n\ndf['YrBltAndRemod'] = df['YearBuilt'] + df['YearRemodAdd']\ndf['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n\ndf['TotalPorchSF'] = (df['OpenPorchSF'] + df['3SsnPorch'] +df['EnclosedPorch'] + df['ScreenPorch'] +df['WoodDeckSF'])\n\ndf['has2ndfloor'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasgarage'] = df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasbsmt'] = df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasfireplace'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasFence'] = df['Fence'].apply(lambda x: 1 if x =='None' else 0)\ndf['hasVnrType'] = df['MasVnrType'].apply(lambda x: 1 if x =='None' else 0)\ndf['hasMiscFeature'] = df['MiscFeature'].apply(lambda x: 1 if x =='None' else 0)\ndf['nBath'] = df['HalfBath']*0.5 + df['BsmtHalfBath']*0.5 + df['FullBath'] + df['BsmtFullBath']\n","a06f51ff":"df['MSZoning'] = df['MSZoning'].replace(['RM', 'FV', 'RH', 'C (all)','None'], 'Other')\ndf['SaleType'] = df['SaleType'].replace(['COD', 'ConLD', 'Oth', 'Con', 'ConLw', 'ConLI', 'CWD','None'], 'Other')\ndf['SaleCondition'] = df['SaleCondition'].replace(['Family', 'Alloca', 'AdjLand'], 'Other')","6481bd61":"df['BsmtExposure'] = df['BsmtExposure'].map({'None':0, 'No':1, 'Mn':2, 'Av':3, 'Gd':4})\ndf['GarageFinish'] = df['GarageFinish'].map({'None':0, 'Unf':1, 'RFn':2, 'Fin':3})\ndf['CentralAir'] = df['CentralAir'].map({'Y':1, 'N':0})\n\nle_cols = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']\nfor c in le_cols:\n   df[c] = df[c].map({'None':0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd':4, 'Ex':5})\n\nle_cols2=['BsmtFinType1', 'BsmtFinType2']\nfor c in le_cols2:\n   df[c] = df[c].map({'None':0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ':4, 'ALQ':5, 'GLQ':6})\n\n# One hot encoding \nsale = df['SalePrice']\nind = df['ind']\n\ndf = pd.get_dummies(df.drop(columns=['ind', 'SalePrice']))\ndf['ind'] = ind\ndf['SalePrice'] = sale\n","480d6e5d":"Train = df[df['ind']==1]\nTest = df[df['ind']==0] ","b827f6e7":"X = (Train.drop(columns=['SalePrice', 'ind']))**(1\/3)\ny = Train.loc[:,'SalePrice'].astype('float')\nX_test =(Test.drop(columns=['SalePrice', 'ind']))**(1\/3)\n\nparams =  {'colsample_bytree': 0.3, \n           'learning_rate': 0.1,\n           'max_depth': 3, \n           'n_estimators': 500, \n           'subsample': 1}\n\nXGBmodel = xgb.XGBRegressor(**params)\nXGBmodel.fit(X, y)\nXGBpredictions = XGBmodel.predict(X_test)\n\nCatmodel = CatBoostRegressor(verbose=False)\nCatmodel.fit(X,y)\nCatpredictions = Catmodel.predict(X_test)\n\nlasso = Lasso(alpha=0.99)\nlasso.fit(X, y)\nLassoPredictions = lasso.predict(X_test)","21dc6066":"submission = pd.read_csv(\"..\/input\/dsc-psut-continued\/sample_submission.csv\")\nsubmission['SalePrice'] = (XGBpredictions*3 +  Catpredictions*7 + LassoPredictions  ) \/ 11\nsubmission.head()\n\nsubmission.to_csv(\"submission\",index=False)","31e4646b":"# Imputing missing vals","4d304dc7":"# Feature Engineering","82809289":"# Data Engineering","076400a0":"# Modeling"}}