{"cell_type":{"e3cbee65":"code","6c9e7c70":"code","30b0a556":"code","fbc3d4b6":"code","09e845c9":"code","d60ba8ec":"code","0b648170":"code","e1274e08":"code","063b206a":"code","bebebe04":"code","9922e76b":"code","462d1689":"code","a4fa814b":"code","4021a9f5":"code","5aacf8c3":"code","717fd30a":"code","ac80c94b":"code","d6998fe8":"code","0b8abe64":"code","4ec80449":"code","a4c352de":"code","bbfd6c0d":"code","72baf966":"code","ae535af1":"code","fe1bdb1f":"code","87292845":"code","c0a21928":"code","c847fc8a":"code","cdf3bda5":"code","90438ffa":"code","d629f4fa":"code","f0a354d4":"code","18d73a03":"code","f0947bd3":"code","2b274c04":"code","04146008":"code","6cb899fb":"markdown","760cf2ae":"markdown"},"source":{"e3cbee65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6c9e7c70":"dataset = pd.read_csv('..\/input\/Data_Train.csv')\nx = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 13].values","30b0a556":"dataset","fbc3d4b6":"dataset.shape","09e845c9":"dataset2 = pd.read_csv('..\/input\/Data_Test.csv')\nx_test = dataset2.iloc[:, :].values","d60ba8ec":"dataset2","0b648170":"from sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)\nimputer = imputer.fit(x[:, 0:13])\nx[:, 0:13] = imputer.transform(x[:, 0:13])","e1274e08":"x[0]","063b206a":"from sklearn.preprocessing import StandardScaler\nx_std = StandardScaler().fit_transform(x)","bebebe04":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_std,y,test_size=0.3,random_state=50)","9922e76b":"from sklearn import metrics\nfrom sklearn import svm\nclf = svm.SVC(kernel='linear') # Linear Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","462d1689":"from sklearn import metrics\nfrom sklearn import svm\nclf = svm.SVC(kernel='rbf') # Rbf Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a4fa814b":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmax_accuracy = 0\n\n\nfor p in range(200):\n    dt = DecisionTreeClassifier(random_state=p)\n    dt.fit(X_train,y_train)\n    Y_pred_dt = dt.predict(X_test)\n    current_accuracy = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n    if(current_accuracy>max_accuracy):\n        max_accuracy = current_accuracy\n        best_x = p\n        \n#print(max_accuracy)\n#print(best_x)\n\n\ndt = DecisionTreeClassifier(random_state=best_x)\ndt.fit(X_train,y_train)\nY_pred_dt = dt.predict(X_test)\n\nscore_dt = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")\n","4021a9f5":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=90)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","5aacf8c3":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","717fd30a":"#Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","ac80c94b":"from sklearn.decomposition import PCA as sklearnPCA\npca = sklearnPCA(n_components=5)\npca_heart = pca.fit_transform(x_std)","d6998fe8":"#principal_heart= pd.DataFrame(data = pca_heart , columns = ['principal component 1', 'principal component 2','principal component 3'])\n#principal_heart.head()","0b8abe64":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(pca_heart,y,test_size=0.2,random_state=50)","4ec80449":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics","a4c352de":"#from sklearn.linear_model import LinearRegression\n#reg = LinearRegression().fit(X_train, y_train)\n#reg.score(X_test,y_test)\n","bbfd6c0d":"from sklearn import svm\nclf = svm.SVC(kernel='linear') # Linear Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","72baf966":"from sklearn import svm\nclf = svm.SVC(kernel='rbf') # rbf Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","ae535af1":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmax_accuracy = 0\n\n\nfor p in range(200):\n    dt = DecisionTreeClassifier(random_state=p)\n    dt.fit(X_train,y_train)\n    Y_pred_dt = dt.predict(X_test)\n    current_accuracy = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n    if(current_accuracy>max_accuracy):\n        max_accuracy = current_accuracy\n        best_x = p\n        \n#print(max_accuracy)\n#print(best_x)\n\n\ndt = DecisionTreeClassifier(random_state=best_x)\ndt.fit(X_train,y_train)\nY_pred_dt = dt.predict(X_test)\n\nscore_dt = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")","fe1bdb1f":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=50)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","87292845":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","c0a21928":"#Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","c847fc8a":"from sklearn.decomposition import TruncatedSVD\nsvd = TruncatedSVD(n_components=7, n_iter=10, random_state=50)\n#svd_heart=svd.fit(x_std).transform(x_std) \nsvd_heart = svd.fit_transform(x_std)\n","cdf3bda5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(svd_heart,y,test_size=0.3,random_state=50)","90438ffa":"#from sklearn.linear_model import LinearRegression\n#reg = LinearRegression().fit(X_train, y_train)\n#reg.score(X_test,y_test)\n","d629f4fa":"from sklearn import svm\nclf = svm.SVC(kernel='linear') # Linear Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","f0a354d4":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmax_accuracy = 0\n\n\nfor p in range(200):\n    dt = DecisionTreeClassifier(random_state=p)\n    dt.fit(X_train,y_train)\n    Y_pred_dt = dt.predict(X_test)\n    current_accuracy = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n    if(current_accuracy>max_accuracy):\n        max_accuracy = current_accuracy\n        best_x = p\n        \n#print(max_accuracy)\n#print(best_x)\n\n\ndt = DecisionTreeClassifier(random_state=best_x)\ndt.fit(X_train,y_train)\nY_pred_dt = dt.predict(X_test)\n\nscore_dt = round(accuracy_score(Y_pred_dt,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")","18d73a03":"from sklearn import svm\nclf = svm.SVC(kernel='rbf') # Rbf Kernel\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","f0947bd3":"from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=90)\nclf.fit(X_train,y_train)\ny_pred=clf.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","2b274c04":"#Import knearest neighbors Classifier model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","04146008":"#Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","6cb899fb":"**APPLY PCA**","760cf2ae":"**APPLY SVD**"}}