{"cell_type":{"00fe15a4":"code","5ff47515":"code","a9815922":"code","a9c27674":"code","ec86ae47":"code","de073fe4":"code","a65f6fd9":"code","9f4656ec":"code","0147608d":"markdown","a042aa83":"markdown","b2e8bf1d":"markdown","3af62c3b":"markdown","97ea13ab":"markdown","e4b9e627":"markdown"},"source":{"00fe15a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ff47515":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","a9815922":"#family_size\n#ticket_type\n#titles\n\n#family_size\ntrain_data['family_size'] = train_data['SibSp'] + train_data['Parch'] + 1\n\n\n#titles\n\ndef extract_titles(name):\n    start = name.index(',')\n    stop = name.index('.')\n    return name[start + 1: stop].strip()\n\ntrain_data['titles'] = train_data['Name'].apply(lambda x: extract_titles(x))\n\n\n# ticket_type\nfrom collections import Counter\nctr = Counter(train_data.Ticket.values)\ndef simplify_ticket(k):\n    if ctr[k] > 1:\n        return 'Shared'\n    else:\n        return 'Single'\n        \ntrain_data['ticket_type'] = train_data['Ticket'].apply(lambda x: simplify_ticket(x))\n\n\n#fare_per_person\ndef fare_per_person(row):\n    if row['ticket_type'] == 'Single':\n        return row['Fare']\n    else:\n        return row['Fare'] \/ row['family_size']\n\n\ntrain_data['fare_per_person'] = train_data.apply(lambda row: fare_per_person(row), axis = 1)\n","a9c27674":"# averge age dictionary\nfrom collections import Counter\ntitles_count = Counter(train_data.titles)\ntitle_mean_age = dict()\ndefault_age = train_data.Age.mean()\n\nfor title in titles_count:\n    title_mean = train_data[train_data.titles == title].Age.mean()\n    if np.isnan(title_mean):\n        title_mean_age[title] = default_age\n    else:\n        title_mean_age[title] = np.round(title_mean, 2)\n\n\ndef fill_age_by_title(row):\n    if np.isnan(row['Age']):\n        if row['titles'] in titles_count:\n            return title_mean_age[row['titles']]\n        else:\n            return default_age\n    else:\n        return row['Age']\n    \ntrain_data.Age = train_data.apply(lambda row: fill_age_by_title(row), axis = 1) ","ec86ae47":"column_expr = ['Sex', 'Embarked', 'titles', 'ticket_type']\nnum_cols = list(train_data.select_dtypes(include = [np.number]).drop(columns = ['Survived'])) #'PassengerId' not dropped\nX = pd.concat([train_data.select_dtypes(include = [np.number]).drop(columns = ['Survived']),\n               train_data[column_expr]], axis = 1) \ny = train_data.Survived","de073fe4":"from sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder\n\nrf_clf = RandomForestClassifier(n_estimators = 100, max_depth=5, random_state = 42)\n\npipeline_num = Pipeline([\n    ('simple_imputer', SimpleImputer(strategy = 'mean')),\n    ('standard_scaler', StandardScaler())\n]) \n\npipeline_cat = Pipeline([\n    ('simple_imputer',SimpleImputer(strategy = 'most_frequent')),\n    ('onehotencode', OneHotEncoder(handle_unknown=\"ignore\"))\n])\n\nfull_transformer_prepare = ColumnTransformer([\n    ('num_transformer', pipeline_num, num_cols),\n    ('cat_transformer', pipeline_cat, column_expr)\n])\n\n\nfull_transformer_prepare_predict = Pipeline([\n    ('full_prep', full_transformer_prepare),\n    ('predict', rf_clf)\n])","a65f6fd9":"full_transformer_prepare_predict.fit(X, y)","9f4656ec":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\n# Feature Engineering\ntest_data['family_size'] = test_data['SibSp'] + test_data['Parch'] + 1\ntest_data['titles'] = test_data['Name'].apply(lambda x: extract_titles(x))\nctr = Counter(test_data.Ticket.values)\ntest_data['ticket_type'] = test_data['Ticket'].apply(lambda x: simplify_ticket(x))\n\ntest_data['fare_per_person'] = test_data.apply(lambda row: fare_per_person(row), axis = 1)\n#End Feature Engineering\n\n# fill age manually\ntitles_count = Counter(train_data.titles)\ntitle_mean_age = dict()\ndefault_age = test_data.Age.mean()\n\nfor title in titles_count:\n    title_mean = test_data[test_data.titles == title].Age.mean()\n    if np.isnan(title_mean):\n        title_mean_age[title] = default_age\n    else:\n        title_mean_age[title] = np.round(title_mean, 2)\n\ntest_data.Age = test_data.apply(lambda row: fill_age_by_title(row), axis = 1) \n#end fill age\n\n\nX_test = pd.concat([test_data.select_dtypes(include = [np.number]),\n               test_data[column_expr]], axis = 1) \n\npredictions =  full_transformer_prepare_predict.predict(X_test)\n\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived':predictions})\n\noutput.to_csv('submission_21.csv', index = False)\nprint(\"Your submission was successfully saved!\")\n","0147608d":"# Pipeline","a042aa83":"# FEATURE 2.0","b2e8bf1d":"# Fill age manually","3af62c3b":"# LOAD DATA","97ea13ab":"# CREATE MODEL","e4b9e627":"# MAKE PREDICTION"}}