{"cell_type":{"641509ec":"code","c77e7427":"code","62f1cd0d":"code","b583d65d":"code","1c63c0f1":"code","aa499d69":"code","91848aa3":"code","acd5e3a6":"code","6ba3b3a4":"code","7d329648":"code","9cb8854b":"code","6f480f89":"code","aab6b1f4":"code","b97872de":"code","3380fa94":"code","cb018813":"code","8131a354":"code","71dacb07":"code","c6e39201":"code","a575022f":"code","4fddb276":"code","e16dfe62":"code","074be70b":"code","161efef5":"code","59649b8b":"code","749ad5ae":"code","ef1fdb08":"code","f0b53eb8":"code","bbfc24ef":"code","7b15d017":"code","3fc925ac":"code","5cc9f922":"code","7c1fa797":"code","853f183e":"code","c79fbbc2":"code","3af26a0d":"code","6b6d2d98":"code","e5db931e":"code","1c1b6fed":"code","b6d34af0":"code","1a9fbbd0":"code","27f5b8b8":"code","822ac35a":"code","6e395671":"code","f4fd13ae":"code","0279db9f":"code","3281ac29":"code","71c8d78e":"code","f57805e1":"code","ef67d67d":"code","4af12c06":"code","3b7d96e2":"code","89c25732":"code","688fe35e":"code","c59bbd0c":"code","00018d83":"code","3bfd9354":"code","5bbcf8ba":"code","ece9cf0f":"markdown","5d10c46e":"markdown","87b49c0b":"markdown","f4b7682d":"markdown","e50e1b7c":"markdown","f6715e02":"markdown","caea4667":"markdown","032e14c8":"markdown","92df1d8f":"markdown","27c2fde2":"markdown","10017840":"markdown","0c0971ca":"markdown","a3d1e5c0":"markdown","c5abbbdc":"markdown","1290fa0a":"markdown","afa2642f":"markdown"},"source":{"641509ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c77e7427":"data = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Training.csv')\nmatches_pre20 = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\nmatches_20 = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\nsquads_20 = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/IPL 2020 Squads.csv', encoding='latin1')\nsubmission = pd.read_csv('\/kaggle\/input\/ipl-2020-player-performance\/sample_submission.csv')","62f1cd0d":"data.head()","b583d65d":"data.shape","1c63c0f1":"data.info()","aa499d69":"data[data.columns[1:]].corr()['Total Points'][:]","91848aa3":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nsns.heatmap(data.corr(), annot=True)","acd5e3a6":"extra_col = data['Id'].str.split('_',expand=True)\ndata['player_id'] = extra_col[0]\ndata['player_name'] = extra_col[1]\ndata.head()","6ba3b3a4":"#computing player with highest total points\nBest_player = data.nlargest(20, ['Total Points'])\n\nplt.figure(figsize=(10,6))\nplt.bar(Best_player['player_name'], Best_player['Total Points'])\nplt.xlabel('Player names')  \nplt.ylabel('Points')\nplt.xticks(rotation=90)\nplt.show()","7d329648":"# computing top players who scored most number of bowling points\nBowling_Points= data.groupby('player_name').Bowling_Points.sum().nlargest(n=20)\nBowling_Points.plot(kind = 'bar',figsize = (10,5))\nplt.xlabel('Player Name')\nplt.ylabel('Total Bowling_points')\nplt.title('Top players who scored most number of bowling points')\nplt.show()","9cb8854b":"# computing top players who scored most number of batting points\nBatting_Points= data.groupby('player_name').Batting_Points.sum().nlargest(n=20)\nBatting_Points.plot(kind = 'bar',figsize = (10,5))\nplt.xlabel('Player Name')\nplt.ylabel('Total Batting_points')\nplt.title('Top players who scored most number of batting points')\nplt.show()","6f480f89":"#computing player with highest played matches\nplt.figure(figsize = (10,6))\nsns.countplot(x=data['player_name'], data= data, order=data['player_name'].value_counts().iloc[:10].index)\nplt.xticks(rotation=90)\nplt.show()","aab6b1f4":"matches_pre20.head()","b97872de":"matches_pre20.isnull().sum()","3380fa94":"#computing season with most number of matches \n\nplt.figure(figsize = (10,6))\nsns.countplot(x= matches_pre20['season'],data= matches_pre20)\nplt.show()","cb018813":"#computing highest number of wins by a team\n\nplt.figure(figsize=(10,6))\nplt.xticks(rotation=90)\nsns.countplot(matches_pre20['winner'])","8131a354":"#computing highest number of matches played at a particular venue\n\nplt.figure(figsize = (10,6))\nsns.countplot(x=matches_pre20[\"venue\"], data= matches_pre20, order=matches_pre20.venue.value_counts().iloc[:20].index)\nplt.xticks(rotation=90)\nplt.show()","71dacb07":"#computing players with highest number of man of the match awards\n\nplt.figure(figsize = (10,6))\nsns.countplot(x=matches_pre20[\"player_of_match\"], data=matches_pre20, order=matches_pre20.player_of_match.value_counts().iloc[:20].index)\nplt.xticks(rotation=90)\nplt.show()","c6e39201":"df = pd.DataFrame()\ndf['match_number'] = data['player_id']\ndf['player_name'] = data['player_name']\ndf['total_score'] = data['Total Points']\ndf['Id']= data['Id']\ndf.head()","a575022f":"df.groupby(['player_name','match_number']).sum()","4fddb276":"df = df.drop(['player_name'],axis=1)\ndf = df.iloc[:1283]\ndf.shape","e16dfe62":"df.match_number=  df.match_number.astype(int)","074be70b":"cat_col=[col for col in df.columns if df[col].dtype=='O']\ncat_col","161efef5":"categorical = df[cat_col]\ncategorical.head()","59649b8b":"Id=pd.get_dummies(categorical['Id'],drop_first=True)\nId.head()","749ad5ae":"cont_col=[col for col in df.columns if df[col].dtype!='O']\ncont_col","ef1fdb08":"df= pd.concat([Id,df[cont_col]],axis = 1)\ndf.head()","f0b53eb8":"X=df.drop(['total_score'],axis=1)\ny=df['total_score']","bbfc24ef":"#splitting the data\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","7b15d017":"#data preprocessing\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)","3fc925ac":"X_train = scaler.transform(X_train)\nX_train.shape","5cc9f922":"X_test = scaler.transform(X_test)\nX_test.shape","7c1fa797":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression().fit(X_train,y_train)","853f183e":"from sklearn import metrics\n\ny_pred = reg.predict(X_test)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))","c79fbbc2":"from sklearn.ensemble import RandomForestRegressor\n\nreg2 = RandomForestRegressor()\nreg2.fit(X_train,y_train)","3af26a0d":"y_pred2 = reg2.predict(X_test)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred2)))","6b6d2d98":"import xgboost\n\nreg3= xgboost.XGBRegressor()\nreg3.fit(X_train,y_train)","e5db931e":"y_pred3 = reg3.predict(X_test)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred3)))","1c1b6fed":"from sklearn.svm import SVR\n\nreg4 = SVR()\nreg4.fit(X_train,y_train)","b6d34af0":"y_pred4 = reg4.predict(X_test)\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred4)))","1a9fbbd0":"from prettytable import PrettyTable\ntb = PrettyTable()\n\ntb.field_names= ('Model', 'RMSE-value')\ntb.add_row(['Linear Regression', '31.9837'])\ntb.add_row(['Random Forest', '36.4908'])\ntb.add_row(['Xgboost', '29.0640'])\ntb.add_row(['SVR', '29.1991'])\nprint(tb)","27f5b8b8":"y_pred = np.round(y_pred)\ny_pred_new = [0 if i < 0 else i for i in y_pred]    #removing the neagtive values","822ac35a":"submission.head()","6e395671":"submission['id'] = submission['Id'].str.split('_').str[0]      #splitting the names and id's\nsubmission['Player'] = submission['Id'].str.split('_').str[1]\nsubmission.head()","f4fd13ae":"xs = submission.drop(['Total Points','Player'],axis=1)\nxs.id = xs.id.astype(int)\nxs.id.dtypes","0279db9f":"#now separating out the categorical columns and numerical columns\n#printing all the categorical columns\ncat_col = [col for col in xs.columns if xs[col].dtype=='O']\ncat_col","3281ac29":"cont_col=[col for col in xs.columns if xs[col].dtype!='O']\ncont_col","71c8d78e":"categorical=xs[cat_col]\ncategorical.head()","f57805e1":"Id=pd.get_dummies(categorical['Id'],drop_first=True)\nId.head()","ef67d67d":"xs= pd.concat([Id,xs[cont_col]],axis = 1)\nxs.head()","4af12c06":"scaler.fit(xs)\nxs = scaler.transform(xs)","3b7d96e2":"pred_y = reg.predict(xs)\npred_y","89c25732":"pred_y = np.round(pred_y)\nlen(pred_y)","688fe35e":"pred_y_new = [0 if i < 0 else i for i in pred_y]\nneg = []\nfor i in pred_y:\n    if i <0:\n        neg.append(i)","c59bbd0c":"submission.head()","00018d83":"submission = submission.drop(['Player','id'],axis=1)","3bfd9354":"submission['Total Points'] = pred_y_new\nsubmission.head(10)","5bbcf8ba":"submission.to_csv('ipl_predictions.csv',index=False)","ece9cf0f":"Player SL Malinga has the highest number of bowling Points","5d10c46e":"Player Virat Kohli has the highest number of Batting Points","87b49c0b":"# Data Modelling","f4b7682d":"Venue-Eden Gardens is seen with highest number of matches played","e50e1b7c":"# Linear Regression","f6715e02":"Team Mumbai Indians has the highest number of wins","caea4667":"# Support Vector Machines","032e14c8":"# Results","92df1d8f":"Player SK Raina has the highest played matches","27c2fde2":"# Random Forest","10017840":"Player Chris Gayle has the highest number of Total points","0c0971ca":"Season 2013 was seen with highest number of matches played","a3d1e5c0":"# Exploratory Data Analysis","c5abbbdc":"Player Chris Gayle has won the highest number of Man of the match awards","1290fa0a":"# Preparing for submission file","afa2642f":"# Xgboost"}}