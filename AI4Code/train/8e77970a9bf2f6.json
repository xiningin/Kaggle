{"cell_type":{"d39bb1c8":"code","edf5e59e":"code","b23dd883":"code","6e7d7384":"code","6441c9bd":"code","54fca0db":"code","5042597e":"code","2439d126":"markdown","2a90b249":"markdown","f9e25560":"markdown","f4e3a578":"markdown","f19d09e0":"markdown","b75d7925":"markdown","89ce4bdc":"markdown","4a2a7140":"markdown","d5889283":"markdown","3f9223f8":"markdown","9610a9ae":"markdown"},"source":{"d39bb1c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","edf5e59e":"df = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndf","b23dd883":"df.isnull().sum()","6e7d7384":"x = df.drop(columns=['test preparation course'])\ny = df['test preparation course']\nprint(x)\nprint(y)","6441c9bd":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","54fca0db":"columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [0])], remainder='passthrough')\ncolumnTransformer","5042597e":"dataset = np.array(columnTransformer.fit_transform(x,y), dtype = np.str)\ndataset","2439d126":"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.compose.ColumnTransformer.html\nhttps:\/\/towardsdatascience.com\/using-columntransformer-to-combine-data-processing-steps-af383f7d5260","2a90b249":"Applies transformers to columns of an array or pandas DataFrame. This estimator allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space.","f9e25560":"# ColumnTransformer","f4e3a578":"# Cons","f19d09e0":"* Incorporating statistics from test data into the preprocessors makes cross-validation scores unreliable (known as data leakage), for example in the case of scalers or imputing missing values.\n* You may want to include the parameters of the preprocessors in a parameter search.","b75d7925":"# Pros","89ce4bdc":"# Describing Null values","4a2a7140":"# Assigning the Target variables from dataset","d5889283":"# ColumnTransformer","3f9223f8":"# Reference","9610a9ae":"* The ColumnTransformer helps performing different transformations for different columns of the data, within a Pipeline that is safe from data leakage and that can be parametrized.\n* The make_column_transformer function is available to more easily create a ColumnTransformer object. Specifically, the names will be given automatically. "}}