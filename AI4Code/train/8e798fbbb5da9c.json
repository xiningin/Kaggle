{"cell_type":{"5678ad28":"code","08c3f7d2":"code","cac5d408":"code","0c543843":"code","8ce87c35":"code","8311fad5":"code","182445aa":"code","7375d706":"code","00d2c5ec":"markdown","e1b9c3b1":"markdown","b15da1a2":"markdown","24e704c4":"markdown"},"source":{"5678ad28":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","08c3f7d2":"data = pd.read_csv('..\/input\/headbrain.csv')\nprint('Shape:',data.shape)\ndata.head()\n","cac5d408":"X = data['Head Size(cm^3)'].values\nY = data['Brain Weight(grams)'].values","0c543843":"def train(X,Y):\n    mean_X = np.mean(X)\n    mean_Y = np.mean(Y)\n    n = len(X)\n    numerator = 0\n    denominator = 0\n    for i in range(n):\n        numerator += (X[i] - mean_X)*(Y[i] - mean_Y)\n        denominator += ((X[i] - mean_X) ** 2)\n    m = numerator\/denominator  #slope = ((x - meanx)*(y=meany))\/((x - meanx)**2)\n    c = mean_Y - m*mean_X      #intercept formula is derived from the formula y = mx+c => c = y - m*x\n    return (m,c)\ndef predict(test_data,m,c):\n    predicted = []\n    for i in range(len(test_data)):\n        predicted.append(m*test_data[i] + c) #predicting the testset with the slope and intercept from the training set\n    return (predicted)\ndef r2score(actual,predicted):\n    #r2 score is a metric to find how good our regression line is fitted to the test data\n    #if its value is 1 then all our test data points fits perfectly in our regression line\n    mean = np.mean(actual)\n    ss_res = 0.0\n    ss_tot = 0.0\n    for i in range(len(actual)):\n        ss_tot += (actual[i]-mean)**2\n        ss_res += (actual[i]-predicted[i])**2\n        \n    r2 = 1 - (ss_res\/ss_tot)\n    return r2\n","8ce87c35":"X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.3)\n(m,c) = train(X_train,y_train)\npredict = predict(X_test,m,c)\nr2_scor = r2score(y_test,predict)\nprint('The slope m is:',m)\nprint('The intercept c is:',c)\nprint('The r2 score is:',r2_scor)","8311fad5":"plt.plot(X_test,predict,color='r',label='Regression Line')\nplt.scatter(X,Y,color='b',label='Data')\nplt.xlabel('Head size')\nplt.ylabel('brain weight')\nplt.legend()\nplt.show()","182445aa":"X = X.reshape(len(X),1)\n\nX_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.3)\n\nclf = LinearRegression()\nclf.fit(X_train,y_train)  #sklearn package helps us to finish our task in a single line\n\nsklearn_predict = clf.predict(X_test)\nsklearn_r2  = r2_score(y_test, sklearn_predict)\nprint('Intercept sklearn:',clf.intercept_)\nprint('Slope sklearn:',clf.coef_)\nprint(\"R-squared Sklearn :\",sklearn_r2)","7375d706":"plt.plot(X_test,sklearn_predict,color='r',label='Regression Line')\nplt.scatter(X,Y,color='b',label='Data')\nplt.xlabel('head size')\nplt.ylabel('Brain weight')\nplt.legend()\nplt.show()","00d2c5ec":"# Sklearn package ","e1b9c3b1":"# Importing Necessary libraries","b15da1a2":"# Importing the dataset","24e704c4":"# plotting our results"}}