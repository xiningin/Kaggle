{"cell_type":{"546bcb5a":"code","60d43c5f":"code","40ae8f99":"code","ac1c39f3":"code","5660d88f":"code","e4b7f8a8":"code","eca9a061":"code","cae3b1a5":"code","dd3ad529":"code","3f6434dd":"code","9b27ab63":"code","2bd1debb":"code","7b7183bc":"code","798bf1bb":"code","058c6774":"code","ebd348b9":"code","66b360f7":"code","7ac3cc88":"code","3f524ff2":"code","63b7a709":"code","b2a03e11":"code","1e79b93f":"code","3af9f5af":"code","61952a22":"code","74ebbad6":"code","eb1161d8":"code","70fd7880":"code","35c0c3fd":"code","8c097ca5":"code","8bd62dcd":"code","cd3f131e":"code","a7515a6e":"markdown","f4ad1d8d":"markdown","4660091c":"markdown","30bd51d5":"markdown","a4b8516f":"markdown","85a89e0a":"markdown","f6f9c68f":"markdown","75445fe5":"markdown","ab832012":"markdown","b39fe56f":"markdown","acc057c0":"markdown","273dd146":"markdown","cf345614":"markdown","20fd6aab":"markdown","edd65b35":"markdown","2a793764":"markdown","fd055f73":"markdown","309aabe4":"markdown","ada79c83":"markdown"},"source":{"546bcb5a":"# use these links to do so:\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom collections import defaultdict\nfrom sklearn import metrics\nfrom pylab import rcParams\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","60d43c5f":"import os\nprint(os.listdir('..\/input\/telco-customer-churn'))","40ae8f99":"data = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","ac1c39f3":"data.head()","5660d88f":"data.info()","e4b7f8a8":"data.isnull().sum()","eca9a061":"data.dtypes","cae3b1a5":"data.describe()","dd3ad529":"for item in data.columns:\n    print(item)\n    print (data[item].unique())","3f6434dd":"data.drop(['customerID'], axis=1, inplace=True)","9b27ab63":"data[\"gender\"].replace(['Female','Male'],[0,1],inplace=True)\ndata[\"Partner\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"Dependents\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"PhoneService\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"PaperlessBilling\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"Churn\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"StreamingMovies\"].replace(['No', 'Yes'], [0, 1], inplace=True)\n\ndata[\"InternetService\"].replace(['No','DSL', 'Fiber optic'],[0,1,2],inplace=True)\ndata[\"Contract\"].replace(['Month-to-month','One year', 'Two year'],[0,1,2],inplace=True)\n\ndata = pd.get_dummies(data=data, columns=['PaymentMethod'])\n\ndata[\"MultipleLines\"].replace(['No','Yes'],[0,1],inplace=True)\ndata[\"OnlineSecurity\"].replace(['No','Yes'],[0,1],inplace=True)\ndata[\"OnlineBackup\"].replace(['No','Yes'],[0,1],inplace=True)\ndata[\"DeviceProtection\"].replace(['No','Yes'],[0,1],inplace=True)\ndata[\"TechSupport\"].replace(['No', 'Yes'], [0, 1], inplace=True)\ndata[\"StreamingTV\"].replace(['No', 'Yes'], [0, 1], inplace=True)","2bd1debb":"columns_to_convert = ['MultipleLines', \n                      'OnlineSecurity', \n                      'OnlineBackup', \n                      'DeviceProtection', \n                      'TechSupport',\n                      'StreamingTV',\n                     'StreamingMovies']\n\nfor item in columns_to_convert:\n    data[item].replace(to_replace='No internet service',  value=0, inplace=True)\n    data[item].replace(to_replace='No phone service',  value=0, inplace=True)\ndata.head()","7b7183bc":"#We can see TotalCharges is still an object. Fix TotalCharges as a float...\ndata['TotalCharges'] = data['TotalCharges'].replace(r'\\s+', np.nan, regex=True)\ndata['TotalCharges'] = pd.to_numeric(data['TotalCharges'])\n\ndata = data.fillna(value=0)","798bf1bb":"data.dtypes","058c6774":"data.groupby('Churn').size()\/len(data) # What is the percentage of churners","ebd348b9":"data.hist(bins=50, figsize=(20,15));","66b360f7":"corr = data.corr()\ncorr","7ac3cc88":"sns.countplot(data['Churn'],label = 'count')","3f524ff2":"# Data to plot\nlabels =data['Churn'].value_counts(sort = True).index\nsizes = data['Churn'].value_counts(sort = True)\n\n\ncolors = [\"whitesmoke\",\"red\"]\nexplode = (0.1,0)  # explode 1st slice\n \nrcParams['figure.figsize'] = 8,8\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=270,)\n\nplt.title('Percent of churn in customer')\nplt.show()","63b7a709":"sns.countplot(x='SeniorCitizen',data=data,hue='Churn')","b2a03e11":"plt.scatter(x='MonthlyCharges',y='TotalCharges',alpha=0.1, data=data)","1e79b93f":"#We plot the correlation matrix, the darker a box is, the more features are correlated\nplt.figure(figsize=(12,10))\ncorr = data.apply(lambda x: pd.factorize(x)[0]).corr()\nax = sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, linewidths=.2, cmap='Blues')","3af9f5af":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix, roc_curve, roc_auc_score, accuracy_score, precision_score, recall_score","61952a22":"data[\"Churn\"] = data[\"Churn\"].astype(int)\nY = data[\"Churn\"].values\nX = data.drop(labels = [\"Churn\"],axis = 1)\n# Create Train & Test Data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=101)","74ebbad6":"# Running logistic regression model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nresult = model.fit(X_train, y_train)\nfrom sklearn import metrics\nprediction_test = model.predict(X_test)\n# Print the prediction accuracy\nprint (metrics.accuracy_score(y_test, prediction_test))","eb1161d8":"model_rf = RandomForestClassifier(n_estimators=1000 , oob_score = True, n_jobs = -1,\n                                  random_state =50, max_features = \"auto\",\n                                  max_leaf_nodes = 30)\nmodel_rf.fit(X_train, y_train)\n\n# Make predictions\nprediction_test = model_rf.predict(X_test)\nprint (metrics.accuracy_score(y_test, prediction_test))","70fd7880":"model.svm = SVC(kernel='linear') \nmodel.svm.fit(X_train,y_train)\npreds = model.svm.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","35c0c3fd":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","8c097ca5":"# AdaBoost Algorithm\nfrom sklearn.ensemble import AdaBoostClassifier\nmodel = AdaBoostClassifier()\n# n_estimators = 50 (default value) \n# base_estimator = DecisionTreeClassifier (default value)\nmodel.fit(X_train,y_train)\npreds = model.predict(X_test)\nmetrics.accuracy_score(y_test, preds)","8bd62dcd":"# Create the Confusion matrix\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test,preds))  ","cd3f131e":"import itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, preds)\nnp.set_printoptions(precision=2)\nclass_names = ['Not churned','churned']\n# Plot normalized confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=class_names, normalize=True,\n                      title='Normalized confusion matrix')\n\nplt.show()\n\nfrom sklearn.metrics import classification_report\neval_metrics = classification_report(y_test, preds, target_names=class_names)\nprint(eval_metrics)","a7515a6e":"#### AdaBoostClassifier","f4ad1d8d":"### Final Conclusions","4660091c":"## Important:Instructions mentioned below.\n\n- The Sheet is structured in **4 steps**:\n    1. Understanding data and manipulation\n    2. Data visualization\n    3. Implementing Machine Learning models(Note: It should be more than 1 algorithm)\n    4. Model Evaluation and concluding with the best of the model.[](http:\/\/)","30bd51d5":"#### LogisticRegression","a4b8516f":"#### Confusion matrix","85a89e0a":"### Importing the data","f6f9c68f":"#### Convert all yes and no to 0's & 1's so our classifier can use this data.","75445fe5":"# Prediction of Customer Churn","ab832012":"#### Churn rate is a health indicator for subscription-based companies. The ability to identify customers that aren\u2019t happy with provided solutions allows businesses to learn about product or pricing plan weak points, operation issues, as well as customer preferences and expectations to proactively reduce reasons for churn.\n\nIt\u2019s important to define data sources and observation period to have a full picture of the history of customer interaction. Selection of the most significant features for a model would influence its predictive performance: The more qualitative the dataset, the more precise forecasts are.\n\nCompanies with a large customer base and numerous offerings would benefit from customer segmentation. The number and choice of ML models may also depend on segmentation results. Data scientists also need to monitor deployed models, and revise and adapt features to maintain the desired level of prediction accuracy.","b39fe56f":"> **Foot-notes:\u00b6**\n> I'm not a stats major, so please do let me know in the comments if you feel that I've left out any important technique or if there was any mistake in the content.\n> \n> Do leave a comment\/upvote :)","acc057c0":"### Understanding the data","273dd146":"### Data Visualization","cf345614":"#### XGBClassifier","20fd6aab":"#### RandomForestClassifier","edd65b35":"#### SupportVectorClassifier","2a793764":"### Data Manipulation","fd055f73":"### Model Evaluation","309aabe4":"##### Finally, this task allowed us to identify the parameters that influence the departure of a client. It also permitted to develop a predictive model that will help the company to target more easily and quickly people that are likely to leave.\n\nAs LR score of 0.80 which is quite correct, optimizing the parameters didn't led to a better score. We can try to use more complex models such as Random Forest, Gradient Boosting etc.\n\nChurn rate is a health indicator for subscription-based companies. The ability to identify customers that aren\u2019t happy with provided solutions allows businesses to learn about product or pricing plan weak points, operation issues, as well as customer preferences and expectations to proactively reduce reasons for churn.\n\nIt\u2019s important to define data sources and observation period to have a full picture of the history of customer interaction. Selection of the most significant features for a model would influence its predictive performance: The more qualitative the dataset, the more precise forecasts are.\n\nCompanies with a large customer base and numerous offerings would benefit from customer segmentation. The number and choice of ML models may also depend on segmentation results. Data scientists also need to monitor deployed models, and revise and adapt features to maintain the desired level of prediction accuracy.","ada79c83":"### Implement Machine Learning Models"}}