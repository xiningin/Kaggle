{"cell_type":{"4d89b43e":"code","25998daf":"code","aca41f2d":"code","2d6df0d3":"code","5321874a":"code","1f49e633":"code","b2005b51":"code","eded67e2":"code","8c06571b":"code","47c93c32":"code","b2e6ea5b":"code","7665718e":"code","e31c088d":"code","463118d9":"code","681344d3":"code","09432f91":"code","10028a31":"code","01d7c5c0":"code","90bf80e7":"code","db925be2":"code","6bf92582":"code","6c5b32f2":"code","dab17f16":"code","09925654":"code","ee69d64c":"code","859c7555":"code","7e4b784f":"code","ac262276":"code","a6d78ce3":"code","b4aec11f":"code","681054ea":"code","1497f4b1":"code","8e9e6645":"code","9922132e":"code","908144d0":"code","27ba2e35":"code","5cdda919":"code","7e678d00":"code","a9d34a34":"code","248322b0":"markdown","1489a724":"markdown","b5251454":"markdown","aae17cf2":"markdown","83d0a32f":"markdown","e01591fa":"markdown","a7552473":"markdown","2f0e99c0":"markdown","4709d6e4":"markdown","5e604b82":"markdown","f11a6034":"markdown","3fde8d6c":"markdown","fe85bd21":"markdown","6b9c7947":"markdown","da02be16":"markdown","699c3b57":"markdown","182f1bff":"markdown","72a9300e":"markdown","d112ec67":"markdown","f1638b13":"markdown","3c2a1451":"markdown","22b08ef3":"markdown","3a8b41fa":"markdown","8ab01953":"markdown","3f3e92a7":"markdown","a4dfe8b9":"markdown","9082e430":"markdown","bcdab3e5":"markdown","c3fc6da1":"markdown","09695d87":"markdown","9f584175":"markdown"},"source":{"4d89b43e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt #visualize\nplt.style.use(\"seaborn-whitegrid\")\n\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\n\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\nimport seaborn as sns #visualize\n\nfrom collections import Counter\n\nimport warnings # don't show warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25998daf":"world_happiness_report_2015 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2015.csv\")\nworld_happiness_report_2016 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2016.csv\")\nworld_happiness_report_2017 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2017.csv\")\nworld_happiness_report_2018 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2018.csv\")\nworld_happiness_report_2019 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2019.csv\")\nworld_happiness_report_2020 = pd.read_csv(\"\/kaggle\/input\/world-happiness-report\/2020.csv\")","aca41f2d":"# the columns \n# we will examine the year 2020, we only need to look at the 2020 data.\nworld_happiness_report_2020.columns","2d6df0d3":"# we are browsing the data\nworld_happiness_report_2020.head()","5321874a":"## statistical summary of our data\nworld_happiness_report_2020.describe()","1f49e633":"# To get a quick overview of the dataset we use the info() function.\nworld_happiness_report_2020.info()","b2005b51":"world_happiness_report_2020[\"Explained by: Generosity\"]","eded67e2":"# Regional indicator\n\"\"\"\nwe examine our categorical data.\n(Regional indicator,Country name)\nfirst we take a look at our regions.\n\"\"\"\n# we find our regions\nregions = world_happiness_report_2020[\"Regional indicator\"]\n# How many countries does the region have ?\n\"\"\"\nvalue_counts()\nregions_counts.index = names of regions\nregions_counts.values = how many countries\n\"\"\"\nregions_counts = regions.value_counts()\n\n# visualize\n# Bar plot explained in detail in another of my kernel\nplt.figure(figsize=(12,6))\nplt.bar(regions_counts.index, regions_counts.values,color = \"darkred\", edgecolor = \"black\", linewidth = 2)\nplt.xticks(rotation = \"90\",size = 10)\nplt.ylabel(\"Number of Countries\")\nplt.title(\"Regional indicator\",size = 20)\nplt.show()\n","8c06571b":"# Country name\n# we can look at our country names from here\nworld_happiness_report_2020[\"Country name\"].unique()","47c93c32":"# We write a function to quickly browse through the numerical feature\n# We can have a small information about our numerical features by examining the histograms.\ndef plot_hist(variable):\n    \"\"\"\n    input : variable ex : \"Ladder score\"\n    output : Hist plot  \n    \"\"\"\n    plt.figure(figsize=(9,3))\n    plt.hist(world_happiness_report_2020[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist \".format(variable))\n    plt.show()","b2e6ea5b":"# Numerical Variable\n# we visualize our numerical data to examine\n# we send our numerical properties to the function we do\nnumericVar = [\"Ladder score\", \"Standard error of ladder score\", \"upperwhisker\", \"lowerwhisker\", \"Logged GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\", \"Perceptions of corruption\", \"Explained by: Log GDP per capita\", \"Explained by: Social support\", \"Explained by: Healthy life expectancy\", \"Explained by: Freedom to make life choices\", \"Explained by: Generosity\", \"Explained by: Perceptions of corruption\", \"Dystopia + residual\"]\nfor n in numericVar:\n    plot_hist(n)\n","7665718e":"# Logged GDP per capita - Ladder score\n# groupby : performs grouping\n# group by Logged GDP per capita and average\n# Sort by Ladder score\nworld_happiness_report_2020[[\"Logged GDP per capita\",\"Ladder score\"]].groupby([\"Logged GDP per capita\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","e31c088d":"# Social support - Ladder score\nworld_happiness_report_2020[[\"Social support\",\"Ladder score\"]].groupby([\"Social support\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","463118d9":"# upperwhisker - Ladder score\nworld_happiness_report_2020[[\"upperwhisker\",\"Ladder score\"]].groupby([\"upperwhisker\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","681344d3":"# upperwhisker - Ladder score\nworld_happiness_report_2020[[\"upperwhisker\",\"Ladder score\"]].groupby([\"upperwhisker\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","09432f91":"# lowerwhisker - Ladder score\nworld_happiness_report_2020[[\"lowerwhisker\",\"Ladder score\"]].groupby([\"lowerwhisker\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","10028a31":"# Healthy life expectancy - Ladder score\nworld_happiness_report_2020[[\"Healthy life expectancy\",\"Ladder score\"]].groupby([\"Healthy life expectancy\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","01d7c5c0":"# Freedom to make life choices - Ladder score\nworld_happiness_report_2020[[\"Freedom to make life choices\",\"Ladder score\"]].groupby([\"Freedom to make life choices\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","90bf80e7":"# Generosity - Ladder score\nworld_happiness_report_2020[[\"Generosity\",\"Ladder score\"]].groupby([\"Generosity\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","db925be2":"# Perceptions of corruption - Ladder score\nworld_happiness_report_2020[[\"Perceptions of corruption\",\"Ladder score\"]].groupby([\"Perceptions of corruption\"], as_index = False).mean().sort_values(by = \"Ladder score\",ascending = False)","6bf92582":"# we write our function to find the outlier\ndef detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3st quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces \n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    \"\"\"\n    ## Usually at least 2 outliers in a row we drop.\n    ## if there are two discrete values\n    \"\"\"\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2) \n    \n    return multiple_outliers","6c5b32f2":"# We send our data to find outlier ones\n### you see below our outlier values\nworld_happiness_report_2020.loc[detect_outliers(world_happiness_report_2020,[\"Ladder score\", \"Standard error of ladder score\", \"upperwhisker\", \"lowerwhisker\", \"Logged GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\", \"Perceptions of corruption\", \"Explained by: Log GDP per capita\", \"Explained by: Social support\", \"Explained by: Healthy life expectancy\", \"Explained by: Freedom to make life choices\", \"Explained by: Generosity\", \"Explained by: Perceptions of corruption\", \"Dystopia + residual\"])]","dab17f16":"# We extract what we find as outlier from our data\nworld_happiness_report_2020 = world_happiness_report_2020.drop(detect_outliers(world_happiness_report_2020,[\"Ladder score\", \"Standard error of ladder score\", \"upperwhisker\", \"lowerwhisker\", \"Logged GDP per capita\", \"Social support\", \"Healthy life expectancy\", \"Freedom to make life choices\", \"Generosity\", \"Perceptions of corruption\", \"Explained by: Log GDP per capita\", \"Explained by: Social support\", \"Explained by: Healthy life expectancy\", \"Explained by: Freedom to make life choices\", \"Explained by: Generosity\", \"Explained by: Perceptions of corruption\", \"Dystopia + residual\"]),axis = 0).reset_index(drop=True)","09925654":"# fetches columns with missing data in our data\nworld_happiness_report_2020.columns[world_happiness_report_2020.isnull().any()]","ee69d64c":"### Social support and Freedom to make life choices vs Ladder score of Top 30 Countries\n\n# top 30 countries in the world ranking\ntop_countries_onehundred = world_happiness_report_2020.iloc[:30,:]\n\"\"\"\nrgba(red,green,blue,alpha) = different color rendering.\nYou can create the color you want by changing the values.\n\n\"\"\"\n# Creating trace1(Social Support)\ntrace1 = go.Scatter(\n                    x = top_countries_onehundred[\"Ladder score\"], # x-axis\n                    y = top_countries_onehundred[\"Social support\"], # y-axis\n                    mode = \"lines\", # how to draw\n                    name = \"Social support\",\n                    marker = dict(color = 'rgba(255, 20, 30, 1)'),# color of the lines\n                    text= top_countries_onehundred[\"Country name\"]) # text on hover\n# Creating trace2(Freedom to make life choices)\ntrace2 = go.Scatter(\n                    x = top_countries_onehundred[\"Ladder score\"],# x-axis\n                    y = top_countries_onehundred[\"Freedom to make life choices\"], # y-axis\n                    mode = \"lines+markers\", # how to draw\n                    name = \"Freedom to make life choices\",\n                    marker = dict(color = 'rgba(15, 99, 36, 0.8)'),\n                    text= top_countries_onehundred[\"Country name\"])\n\n# we combine our two traces\ndata = [trace1, trace2]\n# outer part of the chart\nlayout = dict(title = 'Social support and Freedom to make life choices vs Ladder score of Top 30 Countries',\n              xaxis= dict(title= 'Ladder score',ticklen= 15,zeroline= False)\n             )\n# We combine our data and layout\n# create figure\nfig = dict(data = data, layout = layout)\niplot(fig) # draw the chart","859c7555":"### Happiness ranking of the top 30 countries with 2015,2016,2017,2018,2019,2020 years.\n\n# No world rankings in 2020.So we add it ourselves with this simple method\nworld_happiness_report_2020[\"Overall rank\"] = (world_happiness_report_2020.index + 1) # Happiness Rank (we make it start from 1)\n\n# we take the first thirty countries\ndf2015 = world_happiness_report_2015.iloc[:30,:] \ndf2016 = world_happiness_report_2016.iloc[:30,:]\ndf2017 = world_happiness_report_2017.iloc[:30,:]\ndf2018 = world_happiness_report_2018.iloc[:30,:]\ndf2019 = world_happiness_report_2019.iloc[:30,:]\ndf2020 = world_happiness_report_2020.iloc[:30,:]\n\n# creating trace1(year 2015)\ntrace1 =go.Scatter(\n                    x = df2015[\"Happiness Rank\"], # world ranking\n                    y = df2015[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(100, 20, 120, 0.5)'),\n                    text= df2015[\"Country\"])\n# creating trace2(year 2016)\ntrace2 =go.Scatter(\n                    x = df2016[\"Happiness Rank\"], # world ranking\n                    y = df2016[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 99, 20, 0.6)'),\n                    text= df2016[\"Country\"])\n# creating trace3(year 2017)\ntrace3 =go.Scatter(\n                    x = df2017[\"Happiness.Rank\"], # world ranking\n                    y = df2017[\"Happiness.Score\"],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 0, 200, 0.7)'),\n                    text= df2017[\"Country\"])\n# creating trace4(year 2018)\ntrace4 =go.Scatter(\n                    x = df2018[\"Overall rank\"], # world ranking\n                    y = df2018[\"Score\"],\n                    mode = \"markers\",\n                    name = \"2018\",\n                    marker = dict(color = 'rgba(255, 0, 255, 0.8)'),\n                    text= df2018[\"Country or region\"])\n# creating trace5(year 2019)\ntrace5 =go.Scatter(\n                    x = df2019[\"Overall rank\"], # world ranking\n                    y = df2019[\"Score\"],\n                    mode = \"markers\",\n                    name = \"2019\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.9)'),\n                    text= df2019[\"Country or region\"])\n# creating trace6(year 2020)\ntrace6 =go.Scatter(\n                    x = df2020[\"Overall rank\"], # world ranking\n                    y = df2020[\"Ladder score\"],\n                    mode = \"markers\",\n                    name = \"2020\",\n                    marker = dict(color = 'rgba(255, 0, 2, 1)'),\n                    text= df2020[\"Country name\"])\n\n# We combine traces\ndata = [trace1, trace2, trace3, trace4, trace5, trace6]\n\nlayout = dict(title = 'Happiness ranking of the top 30 countries with 2015,2016,2017,2018,2019,2020 years',\n              xaxis= dict(title= 'Happiness Ranking',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Happiness Score',ticklen= 5,zeroline= False))\n\n# We combine our data and layout\n# create figure\n              \nfig = dict(data = data, layout = layout)\niplot(fig)","7e4b784f":"### Comparison of the 3 values of the top five countries.\n### (Social support,Freedom to make life choices,Perceptions of corruption)\n\n# top 5 countries in happiness ranking\ndf2020 = world_happiness_report_2020.iloc[:5,:]\n\n# create trace1(Social Support)\ntrace1 = go.Bar(\n                x = df2020[\"Country name\"], # x-axis\n                y = df2020[\"Social support\"], # y-axis\n                name = \"Social support\", # text to the right of the chart\n                marker = dict(color = 'rgba(255, 52, 0, 0.5)',\n                             line=dict(color='black',width=2)), # line color around bars\n                text = df2020[\"Overall rank\"]) # text on hover\n\n# create trace2(Freedom to make life choices)\ntrace2 = go.Bar(\n                x = df2020[\"Country name\"],\n                y = df2020[\"Freedom to make life choices\"],\n                name = \"Freedom to make life choices\",\n                marker = dict(color = 'rgba(0, 99, 25, 0.7)',\n                              line=dict(color='black',width=2)),\n                text =df2020[\"Overall rank\"]) # text on hover\n\n# create trace3 (Perceptions of corruption)\ntrace3 = go.Bar(\n                x = df2020[\"Country name\"],\n                y = df2020[\"Perceptions of corruption\"],\n                name = \"Perceptions of corruption\",\n                marker = dict(color = 'rgba(106, 90, 205, 1)',\n                              line=dict(color='black',width=2)),\n                text =df2020[\"Overall rank\"]) # text on hover\n\n# We combine traces\ndata = [trace1, trace2, trace3]\n\"\"\"\nA different way of creating a layout.\nbarmode = bar mode of bars like grouped\n\"\"\"\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","ac262276":"\"\"\"\nwe do the same as the above example with a different method.I'm showing this for variety.\nDrawing shapes may vary.\nwhichever you prefer.\n\"\"\"\n### Comparison of the 3 values of the top five countries.\n### (Social support,Freedom to make life choices,Perceptions of corruption)\n\n# top 5 countries in happiness ranking\ndf2020 = world_happiness_report_2020.iloc[:5,:]\n\n# x-axis\nx = df2020[\"Country name\"]\n\n# create trace1(Social Support)\ntrace1 = {\n  'x': x, # x-axis\n  'y': df2020[\"Social support\"], # yaxis\n  'name': 'Social support',\n  'type': 'bar', # type of chart\n  'marker': {'color':'rgba(255, 0, 25, 1)'} \n};\n\n# create trace2(Freedom to make life choices)\ntrace2 = {\n  'x': x,\n  'y': df2020[\"Freedom to make life choices\"],\n  'name': 'Freedom to make life choices',\n  'type': 'bar',\n  'marker': {'color':'rgba(0, 99, 25, 0.8)'} # rgba : allows us to create a variety of colors\n};\n\n# create trace3 (Perceptions of corruption)\ntrace3 = {\n  'x': x,\n  'y': df2020[\"Perceptions of corruption\"],\n  'name': 'Perceptions of corruption',\n  'type': 'bar',\n  'marker': {'color':'rgba(0, 0, 255, 0.4)'}  \n    \n};\n\ndata = [trace1, trace2, trace3];\n\n\"\"\"\nA different way of creating a layout.\nrelative : bar mode of bars like grouped or relative.\n\"\"\"\nlayout = {\n  'xaxis': {'title': 'Top 5 countries'}, # x-axis title\n  'barmode': 'relative', # How do you combine bars \n  'title': 'Social Support,Fredom to make life choices and Perceptions of Corruption of top 5 countries in 2020' #chart title\n};\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a6d78ce3":"\"\"\"\nWe will create an example using typ 3.\nWe want to see the happiness rate of the regions\n\"\"\"\n\n# We put our singular regions on a list\nregions =list(world_happiness_report_2020[\"Regional indicator\"].unique()) \n# happiness rates of regions\nregions_happiness_rate = []\n\"\"\"\nTo find the happiness rate of the region;\nWe collect the happiness rate of the countries in that region.\nand divide by the number of countries in that region.\n\nexample: \ni = western Europe\nx = all countries in this region.\nhappiness_rate = sum of happiness rates \/ x\n\"\"\"\nfor i in regions:\n    x = world_happiness_report_2020[world_happiness_report_2020[\"Regional indicator\"] == i]\n    happiness_rate = sum(x[\"Ladder score\"]) \/ len(x)\n    regions_happiness_rate.append(happiness_rate) # add list\n\n# figure\n# We create a figure and do it for its operations.\nfig = {\n  \"data\": [\n    {\n      \"values\": regions_happiness_rate,\n      \"labels\": regions, # region names on the side\n      \"domain\": {\"x\": [0, .8]}, # chart size\n      \"name\": \"Happiness Rate\",\n      \"hoverinfo\":\"label+percent+name\", # text on hover\n      \"hole\": .3, # the size of the hole in the middle\n      \"type\": \"pie\" # chart type\n    },],\n  \"layout\": {\n        \"title\":\"Happiness Rates by Region\", # chart title\n        \"annotations\": [ # regulation of chart\n            { \"font\": { \"size\": 13},\n              \"showarrow\": True, # show arrow on\n              \"text\": \"Happiness Rate\", # arrow text\n                \"x\": 0.2, # x-axis\n                \"y\": 0.9 # y-axis\n            },\n        ]\n    }\n}\niplot(fig)","b4aec11f":"\"\"\"\nCan't we draw a pie chart using type1 ? Of course we can draw.\nWe can use whichever comes easy.\n\nLet's look at the happiness rate of the years.\n\nwhy head (145)?\nAs the number of countries changes by years.\nto give a more accurate result.\n\"\"\"\n### we get years of happiness\nsum_happiness_rate_2020 = sum(world_happiness_report_2020[\"Ladder score\"].head(145))\nsum_happiness_rate_2019 = sum(world_happiness_report_2019[\"Score\"].head(145))\nsum_happiness_rate_2018 = sum(world_happiness_report_2018[\"Score\"].head(145))\nsum_happiness_rate_2017 = sum(world_happiness_report_2017[\"Happiness.Score\"].head(145))\nsum_happiness_rate_2016 = sum(world_happiness_report_2016[\"Happiness Score\"].head(145))\nsum_happiness_rate_2015 = sum(world_happiness_report_2015[\"Happiness Score\"].head(145))\n\n#years\nyears = [\"2020\",\"2019\",\"2018\",\"2017\",\"2016\",\"2015\"]\n#We put our rate on a list\nyears_happiness_rate = [sum_happiness_rate_2020,sum_happiness_rate_2019,sum_happiness_rate_2018,\n        sum_happiness_rate_2017,sum_happiness_rate_2016,sum_happiness_rate_2015]\n# creat trace\ntrace =go.Pie(                   \n    values=years_happiness_rate,\n    labels=years, # years names on the side\n    domain={\"x\":[0,.8]},\n    marker = dict(line=dict(color='black',width=2.5)), # lines around the pie chart\n    name= \"Happiness Rate\",\n    insidetextorientation=\"radial\", # articles according to the shape of the chart\n    pull=[0.3, 0, 0, 0.2,0]) #  We indicate the places I want to separate from our pie chart.\n\n#create data\ndata = [trace]\n#create layout\nlayout = dict(title = 'Happiest Year')\n\nfig = dict(data=data,layout=layout)\niplot(fig)","681054ea":"\"\"\"\nWe will look at the happiness \nrates of the regions and the number of countries in those regions in a single graph.\n\ny = happiness rate\nx = region names\ncolor = Healthy life expectancy\nsize = number of countries\n\"\"\"\n# regions\nregions =list(world_happiness_report_2020[\"Regional indicator\"].unique()) \n# happiness rates of regions\nregions_happiness_rate = []\n# Healthy life expectancy\nhealty_rate = []\n# region_names\nregion_names = []\n# number of countries\nnumber_countries = [] \n\n\"\"\"\nwe have countries' happiness rate and healthy life expectancy.\nWe will calculate the regions using them.\n\ni = region\nx = all countries in that region\nhappiness_rate = happiness rate of the region.\nhealty = average healthy life expectancy of the region\nregion_ names = region names\nnumber_countries = the number of countries in that region\n\"\"\"\nfor i in regions:\n    x = world_happiness_report_2020[world_happiness_report_2020[\"Regional indicator\"] == i]\n    happiness_rate = sum(x[\"Ladder score\"]) \/ len(x)\n    healty = sum(x[\"Healthy life expectancy\"] \/ len(x))\n    healty_rate.append(healty) # healty rate add\n    regions_happiness_rate.append(happiness_rate) # add list\n    region_names.append(i) # region names add\n    number_countries.append(len(x))  # number of countries add\n\ndata = [\n    {\n        'y': regions_happiness_rate,\n        'x': region_names,\n        'mode': 'markers',\n        'name': 'Happiness Rate',\n        \"hoverinfo\":\"x+y+name\", # text on hover\n        'marker': {\n            'color': healty_rate,# health rate of the region\n            'size': number_countries, # by the number of countries\n            'showscale': True #scale on the side\n        },\n            \n    }\n]\niplot(data)","1497f4b1":"### healthy life expectancy rates over the past three years\n\n# Since the data of 2020 is different from other years;\n## we do a little normalization\n### to be a more accurate graphic\nworld_happiness_report_2020[\"Healthy life expectancy\"] =world_happiness_report_2020[\"Healthy life expectancy\"] \/max(world_happiness_report_2020[\"Healthy life expectancy\"])\n\n# create trace1(For the year 2020) \ntrace1 = go.Histogram(\n    x=world_happiness_report_2020[\"Healthy life expectancy\"].head(30),# top 30 countries\n    opacity=1, # opacity of the bars in the chart\n    name = \"2020\",\n    marker=dict(color='rgba(10, 99, 0, 1)')) \n\n# create trace2(For the year 2019)\ntrace2 = go.Histogram(\n    x=world_happiness_report_2019[\"Healthy life expectancy\"].head(30), #top 30 countries\n    opacity=0.8,\n    name = \"2019\",\n    marker=dict(color='rgba(255, 0, 20, 0.8)'))\n\n# create trace3(For the year 2018)\ntrace3 = go.Histogram(\n    x=world_happiness_report_2018[\"Healthy life expectancy\"].head(30), #top 30 countries\n    opacity=0.6,\n    name = \"2018\",\n    marker=dict(color='rgba(30, 0, 200, 0.6)'))\n\ndata = [trace1, trace2,trace3]\n\nlayout = go.Layout(barmode='overlay', # mode of histogram like overlay. Also you can change it with stack\n                   title='Healthy life expectancy by years',\n                   xaxis=dict(title='Healthy life expectancy'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8e9e6645":"# our data\nsocial_support = world_happiness_report_2020[\"Social support\"]\ngenerosity = world_happiness_report_2020[\"Generosity\"]\nfreedom_of_choice = world_happiness_report_2020[\"Freedom to make life choices\"]\n\n# create trace\ntrace0 = go.Box(\n    y=social_support, # the data we want to visualize\n    name = 'Social Support', \n    boxpoints='all', # Show all points(you can false)\n    jitter=0.3,\n    pointpos=-1.5,\n    marker = dict(\n        color = 'rgba(0, 99, 0,0.8)', # we choose color ### I described rgba above\n    )\n)\n# create trace1\ntrace1 = go.Box(\n    y=generosity, # the data we want to visualize\n    boxpoints='all', # Show all points(you can false)\n    jitter=0.3,\n    name = 'Generosity',\n    notched=True,\n    pointpos=-1.5,\n    marker = dict(\n        color = 'rgba(255, 25, 28,0.7)',\n    ))\n\n# create trace2\ntrace2 = go.Box(\n    y=freedom_of_choice, # the data we want to visualize\n    name = 'Fredom of Choice',\n    boxpoints='all', # Show all points(you can false)\n    jitter=0.3,\n    pointpos=-1.5,\n    marker = dict(\n        color = 'rgba(111, 11, 85,0.7)',\n    )\n)\ndata = [trace0, trace1,trace2]\niplot(data)","9922132e":"# import figure factory\nimport plotly.figure_factory as ff\n\n# prepare data\ndataframe = world_happiness_report_2020\n\"\"\"\nWhich columns will we look at the relationships between.\n\"\"\"\ndata2020 = dataframe.loc[:,[\"Ladder score\",\"Social support\", \"Healthy life expectancy\"]]\n# We determine our indexes\ndata2020[\"index\"] = np.arange(1,len(data2020)+1)\n\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2020, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat', title=\"Ladder score & Social support & Healthy life expectancy\",\n                                  height=700, width=700)\niplot(fig)","908144d0":"\n# first line plot\n# our chart will be big\ntrace1 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"], # x-axis\n    y=world_happiness_report_2020[\"Social support\"], # y-axis\n    name = \"Social support\",\n    marker = dict(color = 'rgba(16, 112, 2, 1)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"],\n    y=world_happiness_report_2020[\"Explained by: Social support\"],\n    xaxis='x2',# x-axis of the small chart\n    yaxis='y2', # y-axis of the small chart\n    name = \"Explained by: Social support\",\n    marker = dict(color = 'rgba(123, 25, 13, 0.6)'),\n)\n# merge data\ndata = [trace1, trace2]\nlayout = go.Layout(\n    # x-axis of the small chart\n    xaxis2=dict(\n        domain=[0.05, 0.5], # place in the chart\n        anchor='y2', # x-axis bond y-axis       \n    ),\n    yaxis2=dict(\n        domain=[0.1, 0.5], # place in the chart\n        anchor='x2', # y-axis bond x-axis\n    ),\n    title = 'Social Support vs Explained by: Social support',# title chart\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","27ba2e35":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=world_happiness_report_2020[\"Country name\"],\n    y=world_happiness_report_2020[\"Generosity\"],\n    z=world_happiness_report_2020[\"Social support\"],\n    mode='markers',\n    marker=dict(\n        size=6,\n        color= world_happiness_report_2020[\"Overall rank\"],  # set color to an array\/list of desired values      \n        \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5cdda919":"# create trace1 \ntrace1 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"], \n    y=world_happiness_report_2020[\"Social support\"],\n    name = \"Social support\"\n)\n# create trace2 \ntrace2 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"],\n    y=world_happiness_report_2020[\"Logged GDP per capita\"],\n    xaxis='x2',# x-axis of bottom chart\n    yaxis='y2',# y-axis of bottom chart\n    name = \"Logged GDP per capita\" # name of bottom chart\n)\ntrace3 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"],\n    y=world_happiness_report_2020[\"Generosity\"],\n    xaxis='x3',# x-axis of bottom chart\n    yaxis='y3',# y-axis of bottom chart\n    name = \"income\" # name of bottom chart\n)\ntrace4 = go.Scatter(\n    x=world_happiness_report_2020[\"Overall rank\"],\n    y=world_happiness_report_2020[\"Healthy life expectancy\"],\n    xaxis='x4',# x-axis of bottom chart\n    yaxis='y4',# y-axis of bottom chart\n    name = \"Healthy life expectancy\" # name of bottom chart\n)\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45] # We write the properties of my axes.\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Social support, Logged GDP per capita, Generosity and Healthy life expectancy VS world happiness rankings'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7e678d00":"# we import our library\nimport plotly.express as px\n\n# We choose our top 50 countries\nhappy = world_happiness_report_2020.head(50)\n\n# information to be given when mouse over the country\nhover_data = world_happiness_report_2020[[\"Overall rank\",\"Regional indicator\",\"Ladder score\",\"Logged GDP per capita\",\"Social support\",\"Generosity\"]]\n\nfig = px.choropleth(happy,\n                    locations=happy[\"Country name\"],\n                    locationmode=\"country names\",\n                    projection=\"natural earth\",\n                    hover_data=hover_data,\n                    hover_name=happy[\"Country name\"],\n                    color=\"Overall rank\",\n                    color_continuous_scale=px.colors.sequential.Rainbow,\n                    scope=\"world\")\nfig.show()","a9d34a34":"# data prepararion\ncountry_name = world_happiness_report_2020[\"Country name\"].head(50)\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='black',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(country_name))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","248322b0":"\n![Happy Countries](attachment:happy.jpg)","1489a724":"<a id ='21' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">3D Scatter Plot with Colorscaling<\/h2>\n<p>It allows us to compare two graphs at the same time.It allows us to make more accurate comments by looking at the two graphs.<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs).<\/li>\n<li><strong>name :<\/strong> the name of the lines.<\/li>    \n<li><strong>xaxis :<\/strong> x-axis of the small chart.<\/li> \n<li><strong>yaxis :<\/strong> y-axis of the small chart.<\/li>     \n    <\/ul>","b5251454":"<a id ='23' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Choropleth Map<\/h2>\n<p>we use our data to view maps..<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>locations : <\/strong> data to be given according to the selected mode(we give the locations).<\/li>\n<li><strong>locationmode :<\/strong> We tell you how to draw the map(\u2018ISO-3\u2019, \u2018USA-states\u2019, or \u2018country names\u2019).<\/li>    \n<li><strong>projection :<\/strong> How will the map projections be.There are many types.(example : 'kavrayskiy7', 'miller', 'robinson', 'eckert4', 'azimuthal equal area').<\/li> \n<li><strong>hover_data :<\/strong>  information to be given when mouse over the country.<\/li>  \n<li><strong>hover_name :<\/strong> We can call it the title of hover data.<\/li>\n<li><strong>color :<\/strong> Coloring the map..<\/li>  \n<li><strong>scope :<\/strong> viewpoint on the map.<\/li>    \n<li><strong>color_continuous_scale :<\/strong> We can call it the form of coloring..<\/li>    \n    <\/ul>","aae17cf2":"<h3 style = \"color:darkred\">If we examine the chart above;<\/h3>\n    <ul>\n        <li>We see it divided into 10 regions<\/li>\n        <li>These regions : Western Europe, North America and ANZ,\n       Middle East and North Africa, Latin America and Caribbean,\n       Central and Eastern Europe, East Asia, Southeast Asia,\n       Commonwealth of Independent States, Sub-Saharan Africa. <\/li>\n       <li>Region with the most countries : Sub-Saharan Africa <\/li>\n       <li>Region with the fewest countries : North America and ANZ<\/li>\n    <\/ul>\n    ","83d0a32f":"<h3 style = \"color:darkred\">Regarding the country names<\/h3>\n <li>When we examine above, we see that there are 153 different country names.<\/li>\n <li>So we see that our data is 153 countries.<\/li>","e01591fa":"<a id ='1' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Load and Check Data <\/h2>\n","a7552473":"<a id ='16' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Bubble Plot<\/h2>\n<p>\nA bubble chart is a scatter plot in which a third dimension of the data is shown through the size of markers.New dimensions are gained by giving the color and size properties.\n<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs)<\/li>\n<li><strong>mode :<\/strong> type of line on chart.(lines, markers, vs.)<\/li>\n<li><strong>name :<\/strong>the name of the line.<\/li>\n<li><strong>hoverinfo :<\/strong>the text that will appear when mouse is over the graphic<\/li>    \n<li><strong>marker :<\/strong>lines have properties.(color, vs.)<\/li> \n    <\/ul>","2f0e99c0":"<center><h1 style = \"background:lightgreen;border:0\">Introduction<\/h1><\/center>\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">This file contains the Happiness Score for 153 countries along with the factors used to explain the score.The Happiness Score is a national average of the responses to the main life evaluation question asked in the Gallup World Poll (GWP), which uses the Cantril Ladder.<\/p>\n\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">First, we examined the data in detail.We detected missing data and outliers. Later, we made visualizations using the plotly library.We gave information about the graphics.We used different visualization techniques. <\/p>\n    \n\n<h2 style = \"background:lightgreen;border:0\">Content :<\/h2>\n\n<ul>\n    <li style = \"color:\t#388E3C;font-size:15px\"> <a href = \"#1\" style = \"color:black;font-weight:bold\"> Load and Check Data <\/a> <\/li>\n    <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#2\" style = \"color:black;font-weight:bold\"> Variable Description <\/a> <\/li>   \n    <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#3\" style = \"color:black;font-weight:bold\"> Univariate Variable Analysis <\/a> <ul> <li style = \"color:#FFC400\"><a href = \"#4\" style = \"color:black;font-weight:500\"> Categorical Variable <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#5\" style = \"color:black;font-weight:500\"> Numerical Variable <\/a><\/li> <\/ul>            \n    <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#6\" style = \"color:black;font-weight:bold\"> Basic Data Analysis <\/a> <\/li>\n            <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#7\" style = \"color:black;font-weight:bold\"> Outlier Detection <\/a> <\/li>\n        <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#8\" style = \"color:black;font-weight:bold\"> Missing Value <\/a> <ul> <li style = \"color:#FFC400\"><a href = \"#9\" style = \"color:black;font-weight:500\"> Find Missing Value <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#10\" style = \"color:black;font-weight:500\"> Fill Missing Value <\/a><\/li> <\/ul>\n            <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#11\" style = \"color:black;font-weight:bold\"> Visualization with Plotly  <\/a> <ul> <li style = \"color:#FFC400\"><a href = \"#12\" style = \"color:black;font-weight:500\"> Line Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#13\" style = \"color:black;font-weight:500\"> Scatter Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#14\" style = \"color:black;font-weight:500\"> Bar Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#15\" style = \"color:black;font-weight:500\"> Pie Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#16\" style = \"color:black;font-weight:500\"> Bubble Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#17\" style = \"color:black;font-weight:500\"> Histogram Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#18\" style = \"color:black;font-weight:500\"> Box Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#19\" style = \"color:black;font-weight:500\"> Scatter Matrix Plots <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#20\" style = \"color:black;font-weight:500\"> Inset Plot <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#21\" style = \"color:black;font-weight:500\"> 3D Scatter Plot with Colorscaling <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#22\" style = \"color:black;font-weight:500\"> Multiple Subplots <\/a><\/li> <li style = \"color:#FFC400\"><a href = \"#23\" style = \"color:black;font-weight:500\"> Choropleth Map <\/a><\/li> <\/ul>\n    <li style = \"color:#388E3C;font-size:15px\"> <a href = \"#24\" style = \"color:black;font-weight:bold\"> BONUS <\/a> <ul> <li style = \"color:#FFC400\"><a href = \"#25\" style = \"color:black;font-weight:500\"> WordCloud<\/a><\/li> <\/ul> \n\n","4709d6e4":"<a id ='22' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Multiple Subplots<\/h2>\n<p>It allows us to see many sub graphs in a single shape..<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs).<\/li>\n<li><strong>name :<\/strong> the name of the lines.<\/li>    \n<li><strong>xaxis :<\/strong> x-axis of the small chart.<\/li> \n<li><strong>yaxis :<\/strong> y-axis of the small chart.<\/li>     \n    <\/ul>","5e604b82":"<a id ='15' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Pie Plot<\/h2>\n<p>It is a circular graphic which is divided into slices to illustrate numerical proportion. The point of a pie chart is to show the relationship of parts out of a whole.\n<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>values : <\/strong> sizes of pie slices.(inputs)<\/li>\n<li><strong>labels :<\/strong> label for each piece of cake.<\/li>\n<li><strong>name :<\/strong>slice name.<\/li>\n<li><strong>marker :<\/strong>lines have properties.(color, vs.)<\/li> \n<li><strong>type :<\/strong>chart type<\/li>\n<li><strong>domain :<\/strong>area of the graphic.<\/li>\n<li><strong>hoverinfo :<\/strong>the text that will appear when mouse is over the graphic<\/li>\n<li><strong>hole :<\/strong>hole in the middle of the chart.<\/li>    \n    <\/ul>\n\n<strong style = \"color:darkblue\">Graphic Creation Stages(style3) :<\/strong>\n<p style = \"color:darkred\">-> we form a direct figure.this time we define them all within the figure(not separately)<\/p>\n<p>\n--> fig = { <br>\n --> \"data\": [ \n    { \n      <li style = \"text-indent:60px;\"> \"values\": <\/li>\n      <li style = \"text-indent:60px;\">\"labels\": <\/li>\n      <li style = \"text-indent:60px;\">\"domain\":<\/li> \n      <li style = \"text-indent:60px;\">\"name\": <\/li>\n      <li style = \"text-indent:60px;\">\"hoverinfo\":<\/li>\n      <li style = \"text-indent:60px;\">\"hole\":<\/li>\n      <li style = \"text-indent:60px;\">\"type\":<\/li>\n    },],<br>\n  --> \"layout\": {<br>\n        <li style = \"text-indent:60px;\">\"title\":\"chart title\",<br>\n}<\/p>\n--> iplot(fig)\n<\/p>\n   \n    \n","f11a6034":"<a id ='9' ><\/a>\n<h3 style = \"background:lightgreen;border:0\">Find Missing Value<\/h3>\n","3fde8d6c":"<p style = \"font-size:16px;color:darkred\">There are many ways to draw graphics. You can use it if you prefer. I'll use this method to have variation in my example below.<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs)<\/li>\n<li><strong>mode :<\/strong> type of line on chart.(lines, markers, vs.)<\/li>\n<li><strong>name :<\/strong>the name of the line.<\/li>\n<li><strong>marker :<\/strong>lines have properties.(color, vs.)<\/li> \n<li><strong>type :<\/strong>type of plot like bar plot<\/li>\n<li><strong>barmode :<\/strong>Grouping method of bars.<\/li>\n    <\/ul>\n\n<strong style = \"color:darkblue\">Graphic Creation Stages(style2) :<\/strong>\n<p style = \"color:darkred\"> 1 -> Creating Traces :(Trace1,Trace2,...)<\/p>\ntrace1 = {\n    <li style = \"text-indent:60px;\">x : 'x'<\/li>\n    <li style = \"text-indent:60px;\">y : 'y'<\/li>\n    <li style = \"text-indent:60px;\">name : name of the plots<\/li>\n    <li style = \"text-indent:60px;\">marker : marker is used with dictionary.<\/li>\n    <li style = \"text-indent:60px;\">type : type of plot like bar plot <br>}<\/li> <br>\n    \n<p style = \"color:darkred\">2 -> Data : the data we add traces<\/p>\n<p>data = [Trace1,Trace2]<\/p>\n<p style = \"color:darkred\">3 -> layout : outer part of the chart.<\/p>\n<p> layout = { <br> 'xaxis':{'title':'label of x axis'<br> 'barmode':'how to draw graph'<br>'title':'chart title' <br>}\n<\/p>\n\n<p style = \"color:darkred\">4 -> fig : it includes data and layout.<\/p>\n<p>fig = go.Figure(data = data, layout = layout)<\/p>\n<p style = \"color:darkred\" >5 -> iplot() : Draws the generated chart.<\/p>\n<p>iplot(fig)<\/p>\n","fe85bd21":"<a id ='19' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Scatter Matrix Plots<\/h2>\n<p>it helps us to see covariance and relation between more than 2 features<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>index : <\/strong>  name of the index column in data array<\/li>\n<li><strong>data :<\/strong> array of the data with column headers.<\/li>    \n<li><strong>diag :<\/strong> (\u2018scatter\u2019, \u2018histogram\u2019 and \u2018box')<\/li> \n<li><strong>height :<\/strong> sets the height of the chart.<\/li> \n<li><strong>widht :<\/strong> sets the width of the chart.<\/li> \n<li><strong>colormap :<\/strong> a bunch of colors.<\/li> \n<li><strong>pointpos :<\/strong> relative position of points wrt box.<\/li>     \n    <\/ul>","6b9c7947":"<a id ='8' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Missing Value<\/h2>\n\n* Find Missing Value\n* Fill Missing Value","da02be16":"<a id ='13' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Scatter Plot<\/h2>\n\n<p>Scatter plot is a projection plot. Each point on the graph represents a value. It needs the x and y-axis values.Each data is represented as a dot point, whose location is given by x and y columns.<\/br>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs)<\/li>\n<li><strong>mode :<\/strong> type of line on chart.(lines, markers, vs.)<\/li>\n<li><strong>name :<\/strong>the name of the line.<\/li>\n<li><strong>marker :<\/strong>lines have properties.(color, vs.)<\/li> \n<li><strong>text :<\/strong>text on hover.<\/li>\n    <\/ul>\n\n<\/p>\n<p style = \"color:darkred\"> --> The drawing of the graph is the same as above.(Style1)\n<\/p>","699c3b57":"<a id ='17' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Histogram Plot<\/h2>\n<p>In statistics, a histogram is representation of the distribution of numerical data, where the data are binned and the count for each bin is represented. More generally, in plotly a histogram is an aggregated bar chart, with several possible aggregation functions (e.g. sum, average, count...).<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x : <\/strong> data for the chart.(input)<\/li>\n<li><strong>opacity :<\/strong>  opacity of the bars in the chart<\/li>\n<li><strong>name :<\/strong> the name of the line.<\/li>\n<li><strong>histnorm :<\/strong> type of normalization<\/li>    \n<li><strong>marker :<\/strong> lines have properties.(color, vs.)<\/li> \n<li><strong>log_y :<\/strong> represent bars with log scale<\/li>\n<li><strong>barmode :<\/strong> showing us how to draw the histogram<\/li>    \n    <\/ul>","182f1bff":"<p style =\"font-size:16px\">\n    Looking above we see that there is <strong style = \"color:darkred\">no missing data<\/strong> in our data. we do not have missing data, we do not need to do the filling process.If you can create a model for machine learning in the future. Data should not be missing data.For a more accurate result.\n<\/p>","72a9300e":"<a id ='11' ><\/a>\n<h1 style = \"background:lightgreen;border:0\"> Visualization with Plotly <\/h1>\n\n<p style = \"font-size: 16px;text-indent:15px;\">We start to make our visualizations using the plotly library.<\/p>","d112ec67":"<a id ='2' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Variable Description <\/h2>\n\n<ol>\n  <li><strong style = \"color:darkblue\">Country name :<\/strong> We show the names of the countries. <\/li>\n  <li><strong style = \"color:darkblue\">Regional indicator :<\/strong> Shows which region the country is in.<\/li>\n  <li><strong style = \"color:darkblue\">Ladder score :<\/strong> Ladder score of countries.<\/li>\n  <li><strong style = \"color:darkblue\">Standard error of ladder score :<\/strong> Showing the error rate in the ladder score.<\/li>\n  <li><strong style = \"color:darkblue\">upperwhisker :<\/strong> upper limit of score.<\/li>\n  <li><strong style = \"color:darkblue\">lowerwhisker :<\/strong> lowe limti of score.<\/li>\n  <li><strong style = \"color:darkblue\">Logged GDP per capita :<\/strong> is the total monetary or market value of all the finished goods and services produced within a country's borders in a specific time period.<\/li>\n  <li><strong style = \"color:darkblue\">Social support :<\/strong> social support scores of countries.<\/li>\n  <li><strong style = \"color:darkblue\">Healthy life expectancy :<\/strong> healthy life expectancy of countries.<\/li>\n  <li><strong style = \"color:darkblue\">Freedom to make life choices :<\/strong> the freedom of people in that country to choose life.<\/li>\n  <li><strong style = \"color:darkblue\">Generosity :<\/strong> Generosity rate of the country.<\/li>\n  <li><strong style = \"color:darkblue\">Perceptions of corruption :<\/strong> corruption perceptions in the country..<\/li>\n  <li><strong style = \"color:darkblue\">Ladder score in Dystopia :<\/strong> Ladder score in Dystopia of the coutry (Dystopia: alternatively cacotopia or simply anti-utopia) is a community or society that is undesirable or frightening) .<\/li>  \n  <li><strong style = \"color:darkblue\">Explained by: Log GDP per capita :<\/strong> Explained Log GDP per capita ratio.<\/li>\n  <li><strong style = \"color:darkblue\">Explained by: Social support :<\/strong> Explained social support rate.<\/li>\n  <li><strong style = \"color:darkblue\">Explained by: Healthy life expectancy :<\/strong> Explained Healthy life expectancy<\/li>\n  <li><strong style = \"color:darkblue\">Explained by: Freedom to make life choices :<\/strong> Explained Freedom to make life choices<\/li>\n  <li><strong style = \"color:darkblue\">Explained by: Generosity :<\/strong> Explained Generosity<\/li>\n  <li><strong style = \"color:darkblue\">Explained by: Perceptions of corruption :<\/strong> Explained Perceptions of corruption.<\/li>\n  <li><strong style = \"color:darkblue\">Dystopia + residual :<\/strong> Dystopia + residual total rate.<\/li>   \n<\/ol>","f1638b13":"<a id ='5' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Numerical Variable<\/h2>\n","3c2a1451":"<a id ='7' ><\/a>\n<h1 style = \"background:lightgreen;border:0\"> Outlier Detection <\/h1>\n\n**<font color = \"darkred\">Outlier :<\/font>**  An outlier is a data point in a data set that is distant from all other \nobservations. A data point that lies outside the overall distribution of the dataset.\n\n**<font color = \"darkred\">\nQ1 --> <\/font>** First quarter. <br>\n**<font color = \"darkred\">\nQ3 --> <\/font>** Third quarter. <br> <br>\n**<font color = \"darkred\">\nIQR --> <\/font>** **<font color = \"darkblue\">Q3 - Q1<\/font>** **(interquartile distance)** <br> <br>\n**<font color = \"darkred\">\nlower bound --> <\/font>** **<font color = \"darkblue\">Q1 \u2013 1.5<\/font>(IQR)** <br>\n**<font color = \"darkred\">upper limit --><\/font>** \n**<font color = \"darkblue\">Q3 + 1.5<\/font>(IQR)**<br> <br>\n**<font color = \"darkred\">\noutlier --> <\/font>** **Values outside the lower and upper limits**","22b08ef3":"<a id ='4' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Categorical Variable<\/h2>\n","3a8b41fa":"<a id ='20' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Inset Plot<\/h2>\n<p>It allows us to compare two graphs at the same time.It allows us to make more accurate comments by looking at the two graphs.<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs).<\/li>\n<li><strong>name :<\/strong> the name of the lines.<\/li>    \n<li><strong>xaxis :<\/strong> x-axis of the small chart.<\/li> \n<li><strong>yaxis :<\/strong> y-axis of the small chart.<\/li>     \n    <\/ul>","8ab01953":"* <strong style = \"color:darkred\"> float64(18) : <\/strong> Ladder score, Standard error of ladder score, upperwhisker, lowerwhisker, Logged GDP per capita, Social support, Healthy life expectancy, Freedom to make life choices, Generosity, Perceptions of corruption, Ladder score in Dystopia, Explained by: Log GDP per capita, Explained by: Social support, Explained by: Healthy life expectancy, Explained by: Freedom to make life choices, Explained by: Generosity,       Explained by: Perceptions of corruption, Dystopia + residual.                                \n\n* <strong style = \"color:darkred\">object(2) : <\/strong> Country name, Regional indicator.","3f3e92a7":"<a id ='3' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Univariate Variable Analysis <\/h2>\n\n* <strong style = \"color:darkred\">Categorical Variable : <\/strong> <br>\nCountry name, Regional indicator. <br> <br>\n* <strong style = \"color:darkred\">Numerical Variable : <\/strong> <br>\nLadder score, Standard error of ladder score, upperwhisker, lowerwhisker, Logged GDP per capita, Social support, Healthy life expectancy, Freedom to make life choices, Generosity, Perceptions of corruption, Ladder score in Dystopia, Explained by: Log GDP per capita, Explained by: Social support, Explained by: Healthy life expectancy, Explained by: Freedom to make life choices, Explained by: Generosity, Explained by: Perceptions of corruption, Dystopia + residual.","a4dfe8b9":"<a id ='10' ><\/a>\n<h3 style = \"background:lightgreen;border:0\">Fill Missing Value<\/h3>\n","9082e430":"<a id ='24' ><\/a>\n<center><h2 style = \"background:lightblue;\">BONUS<\/h2><\/center><br>\n<a id ='25' ><\/a>\n<h2 style = \"background:lightgreen;\">WordCloud<\/h2>\n","bcdab3e5":"<a id ='18' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Box Plot<\/h2>\n<p>\nDraw a box plot to show distributions with respect to categories.A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. we usually use it to detect outliers.\n<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:\n<ul>    \n<li><strong>y : <\/strong> the data we want to visualize.(input)<\/li>\n<li><strong>name :<\/strong> the name of the line.<\/li>    \n<li><strong>marker :<\/strong> lines have properties.(color, vs.)<\/li> \n<li><strong>notched :<\/strong> provides a notched shape.<\/li> \n<li><strong>boxpointns :<\/strong> It allows all points to be displayed on the side.<\/li> \n<li><strong>jitter :<\/strong> provides better separation between points.<\/li> \n<li><strong>pointpos :<\/strong> relative position of points wrt box.<\/li>     \n    <\/ul>\n    \n    \n**<font color = \"darkred\">Outlier :<\/font>**  An outlier is a data point in a data set that is distant from all other \nobservations. A data point that lies outside the overall distribution of the dataset.\n\n**<font color = \"darkred\">\nQ1 --> <\/font>** First quarter. <br>\n**<font color = \"darkred\">\nQ3 --> <\/font>** Third quarter. <br> <br>\n**<font color = \"darkred\">\nIQR --> <\/font>** **<font color = \"darkblue\">Q3 - Q1<\/font>** **(interquartile distance)** <br> <br>\n**<font color = \"darkred\">\nlower bound --> <\/font>** **<font color = \"darkblue\">Q1 \u2013 1.5<\/font>(IQR)** <br>\n**<font color = \"darkred\">upper limit --><\/font>** \n**<font color = \"darkblue\">Q3 + 1.5<\/font>(IQR)**<br> <br>\n**<font color = \"darkred\">\noutlier --> <\/font>** **Values outside the lower and upper limits**","c3fc6da1":"<a id ='14' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Bar Plot<\/h2>\n<p>Is a bar chart.they have lengths and heights according to the values they represent.Bars can be vertical or horizontal.Helps to compare categories.one axis shows the categories compared.Shows values on the other axis. <\/br>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:<br>\n<ul>    \n<li><strong>x, y : <\/strong> data for the chart.(inputs)<\/li>\n<li><strong>mode :<\/strong> type of line on chart.(lines, markers, vs.)<\/li>\n<li><strong>name :<\/strong>the name of the line.<\/li>\n<li><strong>marker :<\/strong>lines have properties.(color, vs.)<\/li> \n<li><strong>text :<\/strong>text on hover.<\/li>\n<\/ul>\n\n<\/p>\n<p style = \"color:darkred\"> --> The drawing of the graph is the same as above.(Style1)\n<\/p>","09695d87":"<a id ='6' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Basic Data Analysis<\/h2>\n\n* Logged GDP per capita - Ladder score\n* Social support - Ladder score\n* upperwhisker - Ladder score\n* lowerwhisker - Ladder score\n* Healthy life expectancy - Ladder score\n* Freedom to make life choices - Ladder score\n* Generosity - Ladder score\n* Perceptions of corruption - Ladder score","9f584175":"<a id ='12' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Line Plot<\/h2>\n\n<p style = \"text-indent:25px\">Line plot in Plotly is much accessible and  illustrious annexation to plotly which manage variety of types of data, and assemble easy-to-style statistic.<\/p>\n\n<strong>Parameters:<\/strong> The description of some main parameters are given below:<br>\n* **x, y :** data for the chart.(inputs)\n* **mode :** type of line on chart.(lines, markers, vs.)\n* **name :** the name of the line.\n* **marker :** lines have properties.(color, vs.)\n* **text :** text on hover\n<hr \/>\n\n<strong style = \"color:darkblue\">Graphic Creation Stages(style1) :<\/strong>\n<p style = \"color:darkred\"> 1 -> Creating Traces :(Trace1,Trace2,...)<\/p>\ntrace1 = go.Scatter(the graphic we use)(\n    <li style = \"text-indent:80px;\">x : x-axis<\/li>\n    <li style = \"text-indent:80px;\">y : y-axis<\/li>\n    <li style = \"text-indent:80px;\">mode<\/li>\n    <li style = \"text-indent:80px;\">name<\/li>\n    <li style = \"text-indent:80px;\">marker<\/li>\n    <li style = \"text-indent:80px;\">text )<\/li> <br>\n    \n<p style = \"color:darkred\">2 -> Data :<\/p>\n <p>data = [Trace1,Trace2]<\/p> \n<p style = \"color:darkred\">3 -> layout : outer part of the chart.<\/p>\n<p> layout = dict(title : chart title,\n    xaxis = dict(title = label of x axis,ticklen = length of x axis ticks, zeroline = showing zero line or not),yaxis = dict(title: label of y axis))\n\n<p style = \"color:darkred\">4 -> fig : it includes data and layout.<\/p>\n<p>fig = dict(data = data, layout = layout)<\/p> \n<p style = \"color:darkred\" >5 -> iplot() : Draws the generated chart.<\/p>\n<p>iplot(fig)<\/p>\n"}}