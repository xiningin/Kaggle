{"cell_type":{"88685653":"code","4554819a":"code","796b101b":"code","48018bab":"code","f2c50654":"code","de364267":"code","c3158fe4":"code","4724bee9":"code","69f8d2d7":"code","0ce9bfb0":"code","d25aa909":"code","3bb9ae72":"code","59d8a313":"code","f1695f36":"code","abf3c4c0":"code","a4d162ff":"code","4601abd8":"code","41fb9661":"code","743ddfd0":"code","1fbf9236":"code","f2fd354b":"code","a111e074":"code","3efe1b2c":"code","7bc0293d":"code","8ee56541":"code","12ad6b88":"code","cea69f9a":"code","082e08a5":"code","abf9a9f9":"code","297e5593":"code","a6f4972a":"code","8d28f51d":"code","97a3da95":"code","247980e4":"code","5c466508":"code","eb51f3d1":"markdown","8d2ebe03":"markdown","e25030f3":"markdown","e60152f7":"markdown","ab41abbe":"markdown","a713368a":"markdown","26b9a832":"markdown"},"source":{"88685653":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","4554819a":"data = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","796b101b":"data.head()","48018bab":"data.info()","f2c50654":"data.describe()","de364267":"data.groupby(\"Species\").agg([\"min\", \"max\", \"std\", \"mean\"])","c3158fe4":"data.isna().sum() #checking nulls parameter","4724bee9":"data.head()","69f8d2d7":"for column in data.columns[1:-1]:\n    sns.scatterplot(data=data, x=\"Id\", y=column, hue=\"Species\")\n    plt.show()","0ce9bfb0":"for column in data.columns[1:-1]:\n    for spec in data[\"Species\"].unique():\n        selected_spec = data[data[\"Species\"] == spec]\n        selected_column = selected_spec[column]\n        \n        std = selected_column.std()\n        avg = selected_column.mean()\n        \n        three_sigma_plus = avg + (3 * std)\n        three_sigma_minus =  avg - (3 * std)\n        \n        outliers = selected_column[((selected_spec[column] > three_sigma_plus) | (selected_spec[column] < three_sigma_minus))].index\n        data.drop(index=outliers, inplace=True)\n        print(column, spec, outliers)","d25aa909":"for column in data.columns[1:-1]:\n    sns.scatterplot(data=data, x=\"Id\", y=column, hue=\"Species\")\n    plt.show()","3bb9ae72":"for column in data.columns[1:-1]:\n    for spec in data[\"Species\"].unique():\n        selected_spec = data[data[\"Species\"] == spec]\n        selected_column = selected_spec[column]\n        \n        q1 = selected_column.quantile(0.25)\n        q3 = selected_column.quantile(0.75)\n        \n        iqr = q3 - q1\n        \n        minimum = q1 - (1.5 * iqr)\n        maximum = q3 + (1.5 * iqr)\n        \n        print(column, spec, \"| min= \", minimum, \"max= \", maximum)\n        \n        max_idxs = data[(data[\"Species\"] == spec) & (data[column] > maximum)].index\n        print(max_idxs)\n        min_idxs = data[(data[\"Species\"] == spec) & (data[column] < minimum)].index\n        print(min_idxs)\n        \n        data.drop(index=max_idxs, inplace=True)\n        data.drop(index=min_idxs, inplace=True)","59d8a313":"for column in data.columns[1:-1]:\n    sns.scatterplot(data=data, x=\"Id\", y=column, hue=\"Species\")\n    plt.show()","f1695f36":"data.to_csv(\"final_data.csv\") #prepocessing ends here","abf3c4c0":"data = pd.read_csv(\"final_data.csv\")","a4d162ff":"data.head()","4601abd8":"data.drop(\"Unnamed: 0\", axis=1, inplace=True)\ndata.head()","41fb9661":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","743ddfd0":"le = LabelEncoder()","1fbf9236":"target = le.fit_transform(data[\"Species\"]) ","f2fd354b":"data[\"Species\"] = target\ndata.head()","a111e074":" data.isna().sum()  #conrolling data","3efe1b2c":"data.dtypes #conrolling data","7bc0293d":"data.drop(\"Id\", axis=1, inplace=True) # we do not need \"Id\" column","8ee56541":"data.head()","12ad6b88":"X_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.3)","cea69f9a":"display(X_train.shape)\nX_test.shape","082e08a5":"y_train.value_counts()","abf9a9f9":"y_test.value_counts()","297e5593":"import xgboost as xgb\nfrom sklearn.metrics import accuracy_score, confusion_matrix","a6f4972a":"xgb_cls = xgb.XGBClassifier(objective=\"multi:softmax\", num_class=3)","8d28f51d":"xgb_cls.fit(X_train, y_train)","97a3da95":"preds = xgb_cls.predict(X_test)","247980e4":"accuracy_score(y_test, preds)","5c466508":"confusion_matrix(y_test, preds)","eb51f3d1":"## Train and Test Split","8d2ebe03":"## Building Our Model","e25030f3":"## Visualizations","e60152f7":"## 3 Sigma","ab41abbe":"# Outlier Detection","a713368a":"## IQR - Quantile","26b9a832":"## Label Encoding "}}