{"cell_type":{"9d247ac9":"code","1c4df9b4":"code","4c9a5145":"code","a8892277":"code","3ef61fd4":"code","df9d525c":"code","9a736298":"code","03ae3b08":"code","e453aba0":"code","1e9969ac":"code","d454cd0b":"code","6da50710":"code","1e6b69f8":"code","01c9c2ce":"code","3114d9cd":"code","6d5e79a5":"code","04ba4181":"markdown","9297766d":"markdown","1702a21f":"markdown","ad1ec697":"markdown","d787dd10":"markdown","6faa10e9":"markdown","3d639319":"markdown","d6854902":"markdown","9d080f44":"markdown","1bb3d546":"markdown","f2813b50":"markdown","6387e65b":"markdown","b54c695a":"markdown","8f1fb005":"markdown"},"source":{"9d247ac9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# visualization tools\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport seaborn as sns\nimport pandas_profiling as pp\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1c4df9b4":"df2015 = pd.read_csv(\"..\/input\/world-happiness\/2015.csv\")\ndf2016 = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\ndf2017 = pd.read_csv(\"..\/input\/world-happiness\/2017.csv\")","4c9a5145":"df2017.sample(5)","a8892277":"df2017.info()","3ef61fd4":"df2017.isnull().sum()","df9d525c":"report = pp.ProfileReport(df2017)\n\nreport.to_file(\"report.html\")\n\nreport","9a736298":"import missingno as msno\nmsno.matrix(df2017)\nplt.show()","03ae3b08":"df2017.columns","e453aba0":"df2017.columns=[each.replace(\".\",\"\") for each in df2017.columns]\ndf2016.columns=[each.replace(\" \",\"\") for each in df2016.columns]\ndf2015.columns=[each.replace(\" \",\"\") for each in df2015.columns]","1e9969ac":"df2017.columns","d454cd0b":"f,ax = plt.subplots(figsize=(25, 15))\nsns.heatmap(df2017.corr(), annot=True, linewidths=0.5,linecolor=\"blue\", fmt= '.3f',ax=ax,cmap= 'YlGnBu')\nplt.show()","6da50710":"plt.figure(figsize=(25,15))\nsns.barplot(x=df2017.Country, y=df2017.HappinessScore)\nplt.xticks(rotation= 90)\nplt.xlabel('Country')\nplt.ylabel('Happiness Score')\nplt.show()","1e6b69f8":"fig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=df2017.HappinessRank, y=df2017.EconomyGDPperCapita,\n                    mode='lines+markers',\n                    name='2017'))\nfig.add_trace(go.Scatter(x=df2016.HappinessRank, y=df2016[\"Economy(GDPperCapita)\"],\n                    mode='lines+markers',\n                    name='2016'))\nfig.add_trace(go.Scatter(x=df2015.HappinessRank, y=df2015[\"Economy(GDPperCapita)\"],\n                    mode='lines+markers',\n                    name='2015'))\nfig.show()","01c9c2ce":"categories = ['HappinessScore','EconomyGDPperCapita','Generosity','Freedom', 'Family']\nr1=[df2017[each][df2017[\"Country\"]==\"Turkey\"].mean()\/df2017[each].max()  for each in categories]\nr2=[df2017[each][df2017[\"Country\"]==\"Norway\"].mean()\/df2017[each].max()  for each in categories]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatterpolar(\n      r=r1,\n      theta=categories,\n      fill='toself',\n      name='Turkey'\n))\nfig.add_trace(go.Scatterpolar(\n      r=r2,\n      theta=categories,\n      fill='toself',\n      name='Norway'\n))\n\nfig.update_layout(\n  polar=dict(\n    radialaxis=dict(\n      visible=True,\n      range=[0, 1]\n    )),\n  showlegend=False\n)\n\nfig.show()","3114d9cd":"fig = go.Figure()\n# Use x instead of y argument for horizontal plot\nfig.add_trace(go.Box(x=df2017.HappinessScore, name='2017'))\nfig.add_trace(go.Box(x=df2016.HappinessScore, name='2016'))\nfig.add_trace(go.Box(x=df2015.HappinessScore, name='2015'))\n\nfig.show()","6d5e79a5":"# trace1\ntrace1 = go.Scatter3d(\n    x=df2017.EconomyGDPperCapita,\n    y=df2017.HealthLifeExpectancy,\n    z=df2017.Family,\n    mode='markers',\n    name = \"2017\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\n# trace2\ntrace2 = go.Scatter3d(\n    x=df2016[\"Economy(GDPperCapita)\"],\n    y=df2016[\"Health(LifeExpectancy)\"],\n    z=df2016.Family,\n    mode='markers',\n    name = \"2016\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\n# trace3\ntrace3 = go.Scatter3d(\n    x=df2015[\"Economy(GDPperCapita)\"],\n    y=df2015[\"Health(LifeExpectancy)\"],\n    z=df2015.Family,\n    mode='markers',\n    name = \"2015\",\n    marker=dict(\n        color='rgb(150, 170, 25)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title = '2015 , 2016 and 2017 values',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","04ba4181":"# Data Cleaning","9297766d":"### Used Libraries\n1. NumPy (Numerical Python)\n2. Pandas\n3. Matplotlib\n4. Seaborn\n5. Plotly\n6. Missingno","1702a21f":"# Plotly - Box Plot ( Interactive )\n### 2017, 2016 vs 2015 (min,q1,median,q3,max value)","ad1ec697":"# World Happiness Data Analysis and Visualization","d787dd10":"# Plotly - Radar Chart ( Interactive )\n### Turkey vs Norway values","6faa10e9":"# Seaborn - Bar Plot","3d639319":"# Thank You\n\nIf you have any suggestion or advice or feedback, I will be very appreciated to hear them.\n### Also there are other kernels\n* [FIFA 19 Player Data Analysis and Visualization EDA](https:\/\/www.kaggle.com\/ismailsefa\/f-fa-19-player-data-analysis-and-visualization-eda)\n* [Crimes Data Analysis and Visualzation (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/crimes-data-analysis-and-visualzation-eda)\n* [Google Play Store Apps Data Analysis (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/google-play-store-apps-data-analysis-eda)\n* [World Happiness Data Analysis and Visualization](https:\/\/www.kaggle.com\/ismailsefa\/world-happiness-data-analysis-and-visualization)\n* [Used Cars Data Analysis and Visualization (EDA)](https:\/\/www.kaggle.com\/ismailsefa\/used-cars-data-analysis-and-visualization-eda)\n* [Gender Recognition by Voice Machine Learning SVM](https:\/\/www.kaggle.com\/ismailsefa\/gender-recognition-by-voice-machine-learning-svm)\n* [Iris Species Classify Machine Learning KNN](https:\/\/www.kaggle.com\/ismailsefa\/iris-species-classify-machine-learning-knn)\n* [Breast Cancer Diagnostic Machine Learning R-Forest](https:\/\/www.kaggle.com\/ismailsefa\/breast-cancer-diagnostic-machine-learning-r-forest)\n* [Heart Disease Predic Machine Learning Naive Bayes](https:\/\/www.kaggle.com\/ismailsefa\/heart-disease-predic-machine-learning-naive-bayes)\n* [Mushroom Classify Machine Learning Decision Tree](https:\/\/www.kaggle.com\/ismailsefa\/mushroom-classify-machine-learning-decision-tree)","d6854902":"# Pandas Profiling Report","9d080f44":"# Plotly - Line and Scatter Plot ( Interactive )","1bb3d546":"# Plotly - 3D Scatter Plot ( Interactive )\n* X = Economy GDP per Capita\n* Y = Health Life Expectancy\n* Z = Family","f2813b50":"### Reading Data","6387e65b":"### Content:\n1. Pandas Profiling Report\n2. Missingo - Missing Data\n3. Data Cleaning\n4. Seaborn - Heatmap\n5. Seaborn - Bar Plot\n6. Plotly - Line and Scatter Plot\n7. Plotly - Radar Chart\n8. Plotly - Box Plot\n9. Plotly - 3D Scatter Plot","b54c695a":"# Missingno - Missing Data","8f1fb005":"# Seaborn - Heatmap\n### Relationship between columns\n* 01 --> Direct proportion\n* 00 --> No relationship\n* -1 --> \u0130nverse proportion"}}