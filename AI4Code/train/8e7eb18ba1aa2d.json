{"cell_type":{"1ac57eeb":"code","a350ec09":"code","c50026ef":"code","b2438d65":"code","e36b03c7":"code","4c703656":"code","3b7492a1":"code","bb59b791":"code","efbb7333":"code","9bec0ce7":"code","222de2cf":"code","5dee54c3":"code","c4a9fec7":"code","2bdd93ff":"code","587e1579":"code","70a8e791":"code","b9fd47c1":"code","379d309d":"code","27d1576e":"code","f02313dc":"code","08d71626":"code","a0301b16":"code","1bcb2cd1":"code","bf52b2cf":"code","d4e30dc9":"code","43b59c08":"code","b704c087":"code","433c0088":"markdown","5997c11d":"markdown","d6292f96":"markdown","ec02581f":"markdown","21ba194d":"markdown","d4fb8e50":"markdown","e709e346":"markdown","514d4dff":"markdown","bf480e8d":"markdown","570ad4e9":"markdown","0708471c":"markdown","1267da4b":"markdown","0abc146c":"markdown","3f84ebca":"markdown","29fe52d7":"markdown"},"source":{"1ac57eeb":"import sys\nif 'kaggle_web_client' in sys.modules:\n    sys.path.append('..\/input\/imports\/pytorch-image-models-master\/pytorch-image-models-master')\n    sys.path.append('..\/input\/imports\/transformers-master\/transformers-master')","a350ec09":"import os\nimport re\nimport cv2\nimport math\nimport random\nimport numpy as np\nimport pandas as pd\nimport gc\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\nfrom torch.utils.data import Dataset, DataLoader\nimport timm\nimport albumentations\nfrom albumentations.pytorch.transforms import ToTensorV2\n\nfrom transformers import AutoTokenizer, AutoModel\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.neighbors import NearestNeighbors","c50026ef":"class CFG:\n    compute_cv = True  # set False to fast save\n    todo_predictions = ['predictions']\n    \n    ### CNN and BERT\n    use_amp = True\n    scale = 30  # ArcFace\n    margin = 0.5  # ArcFace\n    seed = 2021\n    classes = 11014\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n    print(device)\n    \n    ### CNN 1\n    cnn_model_name = 'swin_base_patch4_window12_384'\n    img_size = 384\n    cnn_batch_size = 32\n    cnn_model_path = '..\/input\/shopee-arcface-models\/swin_base_patch4_window12_384-size384-epoch11-bs12x2-cv0.8099-sub.pt'\n    num_tta = 3\n    cnn_fc_dim = 768\n    cnn_use_fc = True\n    \n    ### BERT 1\n    if 'kaggle_web_client' in sys.modules:\n        bert_model_name = '..\/input\/bertmodel\/paraphrase-xlm-r-multilingual-v1'  # for kaggle notebook\n    else:\n        bert_model_name = 'sentence-transformers\/paraphrase-xlm-r-multilingual-v1'\n    bert_model_path = '..\/input\/shopee-arcface-models\/paraphrase-xlm-r-multilingual-v1_len128_epoch7-bs16x1-cv0.7997-sub.pt'\n    max_length = 128\n    bert_batch_size = 32\n    bert_fc_dim = 768\n    bert_use_fc = True\n    \n    ### BERT 2\n    if 'kaggle_web_client' in sys.modules:\n        bert_model_name2 = '..\/input\/bertmodel\/distilbert-base-indonesian'  # for kaggle notebook\n    else:\n        bert_model_name2 = 'cahya\/distilbert-base-indonesian'\n    bert_model_path2 = '..\/input\/shopee-arcface-models\/distilbert-base-indonesian_len128_epoch8-bs16x1-cv0.7911-sub.pt'\n    max_length2 = 128\n    bert_batch_size2 = 32\n    bert_fc_dim2 = 768\n    bert_use_fc2 = True\n    \n    ### Prediction\n    cnn_threshold = 0.84\n    bert_threshold = 0.84\n    chunk = 32\n    max_preds = 42\n    nearlest_one = True # True is better\n        \n    ### Data\n    \n    train_csv_path = '..\/input\/shopee-product-matching\/train.csv'\n    test_csv_path = '..\/input\/shopee-product-matching\/test.csv'\n    \n    if compute_cv == True:\n        images_dir = '..\/input\/shopee-product-matching\/train_images\/'\n    else:\n        images_dir = '..\/input\/shopee-product-matching\/test_images\/'\n\n    if 'kaggle_web_client' in sys.modules:\n        num_workers = 4\n    else:\n        num_workers = 0  # for Windows 10","b2438d65":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True # set True to be faster\n\nseed_everything(CFG.seed)","e36b03c7":"def read_dataset():\n    \n    df = pd.read_csv(CFG.test_csv_path)\n    \n    if len(df) > 3:\n        CFG.compute_cv = False\n        CFG.images_dir = '..\/input\/shopee-product-matching\/test_images\/'\n    \n    if CFG.compute_cv == True:\n        df = pd.read_csv(CFG.train_csv_path)\n        print('Using train as test to compute CV. Shape is', df.shape)\n    else:\n        print('Test shape is', df.shape )\n    \n    image_paths = CFG.images_dir + df['image']\n\n    return df, image_paths","4c703656":"def f1_score(y_true, y_pred):\n    y_true = y_true.apply(lambda x: set(x.split()))\n    y_pred = y_pred.apply(lambda x: set(x.split()))\n    intersection = np.array([len(x[0] & x[1]) for x in zip(y_true, y_pred)])\n    len_y_pred = y_pred.apply(lambda x: len(x)).values\n    len_y_true = y_true.apply(lambda x: len(x)).values\n    f1 = 2 * intersection \/ (len_y_pred + len_y_true)\n    return f1","3b7492a1":"class ArcMarginProduct(nn.Module):\n    def __init__(self, in_features, out_features, scale=30.0, margin=0.50, easy_margin=False, ls_eps=0.0):\n        super(ArcMarginProduct, self).__init__()\n        self.in_features = in_features\n        self.out_features = out_features\n        self.scale = scale\n        self.margin = margin\n        self.ls_eps = ls_eps  # label smoothing\n        self.weight = nn.Parameter(torch.FloatTensor(out_features, in_features))\n        nn.init.xavier_uniform_(self.weight)\n\n        self.easy_margin = easy_margin\n        self.cos_m = math.cos(margin)\n        self.sin_m = math.sin(margin)\n        self.th = math.cos(math.pi - margin)\n        self.mm = math.sin(math.pi - margin) * margin\n        \n        self.criterion = nn.CrossEntropyLoss()\n        \n    def forward(self, input, label):\n        # --------------------------- cos(theta) & phi(theta) ---------------------------\n        cosine = F.linear(F.normalize(input), F.normalize(self.weight))\n        sine = torch.sqrt(1.0 - torch.pow(cosine, 2))\n        phi = cosine * self.cos_m - sine * self.sin_m\n        if self.easy_margin:\n            phi = torch.where(cosine > 0, phi, cosine)\n        else:\n            phi = torch.where(cosine > self.th, phi, cosine - self.mm)\n        # --------------------------- convert label to one-hot ---------------------------\n        one_hot = torch.zeros(cosine.size(), device=CFG.device)\n        one_hot.scatter_(1, label.view(-1, 1).long(), 1)\n        if self.ls_eps > 0:\n            one_hot = (1 - self.ls_eps) * one_hot + self.ls_eps \/ self.out_features\n\n        output = (one_hot * phi) + ((1.0 - one_hot) * cosine)\n        output *= self.scale\n        return output, self.criterion(output,label)","bb59b791":"# Mean Pooling - Take attention mask into account for correct averaging\ndef mean_pooling(model_output, attention_mask):\n    token_embeddings = model_output[0]  # First element of model_output contains all token embeddings\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\n    sum_embeddings = torch.sum(token_embeddings * input_mask_expanded, 1)\n    sum_mask = torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n    return sum_embeddings \/ sum_mask\n\n\nclass ShopeeBertModel(nn.Module):\n\n    def __init__(\n        self,\n        n_classes = CFG.classes,\n        model_name = None,\n        fc_dim = 768,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True        \n    ):\n\n        super(ShopeeBertModel,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.tokenizer = AutoTokenizer.from_pretrained(model_name)\n        self.backbone = AutoModel.from_pretrained(model_name).to(CFG.device)\n\n        in_features = 768\n        self.use_fc = use_fc\n        \n        self.dropout = nn.Dropout(p=0.1)\n        self.classifier = nn.Linear(in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        in_features = fc_dim\n            \n        self.final = ArcMarginProduct(\n            in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.classifier.weight)\n        nn.init.constant_(self.classifier.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, texts, labels=torch.tensor([0])):\n        features = self.extract_features(texts)\n        if self.training:\n            logits = self.final(features, labels.to(CFG.device))\n            return logits\n        else:\n            return features\n        \n    def extract_features(self, texts):\n        encoding = self.tokenizer(texts, padding=True, truncation=True,\n                             max_length=CFG.max_length, return_tensors='pt').to(CFG.device)\n        input_ids = encoding['input_ids']\n        attention_mask = encoding['attention_mask']\n        embedding = self.backbone(input_ids, attention_mask=attention_mask)\n        x = mean_pooling(embedding, attention_mask)\n        \n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.classifier(x)\n            x = self.bn(x)\n        \n        return x","efbb7333":"def get_bert_embeddings(column, model_name, model_path, fc_dim=768, use_fc=True, chunk=32):\n    \n    print('Getting BERT ArcFace embeddings...')\n    \n    model = ShopeeBertModel(model_name=model_name, fc_dim=fc_dim, use_fc=use_fc)\n    model.to(CFG.device)\n    model.load_state_dict(torch.load(model_path, map_location=CFG.device))\n    model.eval()\n    \n    bert_embeddings = torch.zeros((df.shape[0], 768)).to(CFG.device)\n    for i in tqdm(list(range(0, df.shape[0], chunk)) + [df.shape[0]-chunk], ncols=100):\n        titles = []\n        for title in df[column][i : i + chunk].values:\n            try:\n                title = ' ' + title.encode('utf-8').decode(\"unicode_escape\").encode('ascii', 'ignore').decode(\"unicode_escape\") + ' '\n            except:\n                pass\n            title = title.lower()\n            \n            titles.append(title)\n            \n        with torch.no_grad():\n            if CFG.use_amp:\n                with torch.cuda.amp.autocast():\n                    model_output = model(titles)\n            else:\n                model_output = model(titles)\n            \n        bert_embeddings[i : i + chunk] = model_output\n    \n    del model, titles, model_output\n    gc.collect()\n    torch.cuda.empty_cache()\n    \n    return bert_embeddings","9bec0ce7":"class ShopeeCnnModel(nn.Module):\n\n    def __init__(\n        self,\n        model_name,\n        fc_dim,\n        n_classes = CFG.classes,\n        margin = CFG.margin,\n        scale = CFG.scale,\n        use_fc = True,\n        pretrained = True):\n\n        super(ShopeeCnnModel,self).__init__()\n        print('Building Model Backbone for {} model'.format(model_name))\n\n        self.backbone = timm.create_model(model_name, pretrained=pretrained)\n        \n        if model_name in ['tf_efficientnet_b0_ns', 'tf_efficientnet_b1_ns', 'tf_efficientnet_b2_ns', 'tf_efficientnet_b3_ns',\n                         'tf_efficientnet_b4_ns', 'tf_efficientnet_b5_ns', 'tf_efficientnet_b6_ns', 'tf_efficientnet_b7_ns',\n                         'efficientnet_v2s', 'efficientnet_v2m', 'efficientnet_v2l']:\n            in_features = self.backbone.classifier.in_features\n            self.backbone.classifier = nn.Identity()\n            self.backbone.global_pool = nn.Identity()\n            \n        elif model_name in ['dm_nfnet_f0', 'dm_nfnet_f1', 'dm_nfnet_f2', 'dm_nfnet_f3', 'dm_nfnet_f4',\n                           'eca_nfnet_l0', 'eca_nfnet_l1']:\n            in_features = self.backbone.head.fc.in_features\n            self.backbone.head.fc = nn.Identity()\n            self.backbone.head.global_pool = nn.Identity()\n            \n        elif model_name in ['swin_small_patch4_window7_224', 'swin_base_patch4_window7_224', 'swin_base_patch4_window12_384']:\n            in_features = self.backbone.head.in_features\n            self.backbone.head = nn.Identity()\n        \n        self.model_name = model_name\n        self.pooling =  nn.AdaptiveAvgPool2d(1)\n        self.use_fc = use_fc\n\n        self.dropout = nn.Dropout(p=0.0)\n        self.classifier = nn.Linear(in_features, fc_dim)\n        self.bn = nn.BatchNorm1d(fc_dim)\n        self._init_params()\n        in_features = fc_dim\n\n        self.final = ArcMarginProduct(\n            in_features,\n            n_classes,\n            scale = scale,\n            margin = margin,\n            easy_margin = False,\n            ls_eps = 0.0\n        )\n\n    def _init_params(self):\n        nn.init.xavier_normal_(self.classifier.weight)\n        nn.init.constant_(self.classifier.bias, 0)\n        nn.init.constant_(self.bn.weight, 1)\n        nn.init.constant_(self.bn.bias, 0)\n\n    def forward(self, image, label):\n        features = self.extract_features(image)\n        if self.training:\n            logits = self.final(features, label)\n            return logits\n        else:\n            return features\n\n    def extract_features(self, x):\n        batch_size = x.shape[0]\n        x = self.backbone(x)\n        if CFG.cnn_model_name not in ['swin_small_patch4_window7_224', 'swin_base_patch4_window7_224', 'swin_base_patch4_window12_384']:\n            x = self.pooling(x).view(batch_size, -1)\n\n        if self.use_fc:\n            x = self.dropout(x)\n            x = self.classifier(x)\n            x = self.bn(x)\n            \n        return x","222de2cf":"def get_valid_transforms(img_size=512):\n\n    return albumentations.Compose([\n        albumentations.Resize(img_size, img_size, p=1.),\n        albumentations.Normalize(\n            mean = [0.485, 0.456, 0.406],\n            std = [0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0\n        ),\n        ToTensorV2(p=1.0)\n    ])\n\ndef get_test_transforms(img_size=512):\n\n    return albumentations.Compose([\n        albumentations.RandomResizedCrop(img_size, img_size, scale=(0.6, 1.0), ratio=(1.0, 1.0)),\n        albumentations.Normalize(\n            mean = [0.485, 0.456, 0.406],\n            std = [0.229, 0.224, 0.225], max_pixel_value=255.0, p=1.0\n        ),\n        ToTensorV2(p=1.0)\n    ])","5dee54c3":"class ShopeeTestImageDataset(Dataset):\n\n    def __init__(self, image_paths, transforms=None):\n        self.image_paths = image_paths\n        self.transform = transforms\n\n    def __len__(self):\n        return self.image_paths.shape[0]\n\n    def __getitem__(self, index):\n        image_path = self.image_paths[index]\n        image = cv2.imread(image_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        \n        return image","c4a9fec7":"def get_cnn_embeddings(model, dataloader):\n    model.eval()\n\n    embeds = []\n    for _, image in tqdm(enumerate(dataloader), total=len(dataloader), desc=\"get_cnn_embeddings\", ncols=80): \n        img = image.to(CFG.device)\n\n        with torch.no_grad():\n            if CFG.use_amp:\n                with torch.cuda.amp.autocast():\n                    features = model(img, torch.tensor([1]))\n            else:\n                features = model(img, torch.tensor([1]))\n\n        embeddings = features.detach().cpu().numpy().astype('float32')\n        embeds.append(embeddings)\n\n    del model\n    embeddings = np.concatenate(embeds)\n    del embeds\n    gc.collect()\n    return embeddings","2bdd93ff":"def get_predictions(df, cnn_embeddings_mean_half, bert_embeddings_half, cnn_threshold=1.0, bert_threshold=1.0, chunk=32, nearlest_one=True, max_preds=50):\n\n    print('Finding similar ones...')\n    CTS = len(df) \/\/ chunk\n    if (len(df) % chunk) != 0:\n        CTS += 1\n        \n    preds = []\n    for j in tqdm(range(CTS)):\n        a = j * chunk\n        b = min((j+1) * chunk, len(df))\n        cnn_cts = torch.matmul(cnn_embeddings_mean_half, cnn_embeddings_mean_half[a:b].T).T\n        bert_cts = torch.matmul(bert_embeddings_half, bert_embeddings_half[a:b].T).T\n        \n        for k in range(b-a):\n            sim = (cnn_cts[k,] \/ cnn_threshold) ** 6 + (bert_cts[k,] \/ bert_threshold) ** 6\n            sim_desc = torch.sort(sim, descending=True)\n            \n            IDX = sim_desc[1][sim_desc[0] > 1][:max_preds].cpu().detach().numpy()\n            o = df.iloc[IDX].posting_id.values\n            \n            if (len(IDX) == 1) and nearlest_one:\n                IDX = sim_desc[1][:2].cpu().detach().numpy()\n                o = df.iloc[IDX].posting_id.values\n            \n            preds.append(o)\n\n    del cnn_cts, bert_cts\n    gc.collect()\n    torch.cuda.empty_cache()\n    \n    return preds","587e1579":"df, image_paths = read_dataset()","70a8e791":"bert_embeddings = get_bert_embeddings(column='title', model_name=CFG.bert_model_name, model_path=CFG.bert_model_path,\n                                      fc_dim=CFG.bert_fc_dim, use_fc=CFG.bert_use_fc, chunk=CFG.bert_batch_size)\nprint('bert_embeddings.shape:', bert_embeddings.shape)","b9fd47c1":"bert_embeddings2 = get_bert_embeddings(column='title', model_name=CFG.bert_model_name2, model_path=CFG.bert_model_path2,\n                                       fc_dim=CFG.bert_fc_dim2, use_fc=CFG.bert_use_fc2, chunk=CFG.bert_batch_size2)\nprint('bert_embeddings2.shape:', bert_embeddings2.shape)","379d309d":"model = ShopeeCnnModel(model_name = CFG.cnn_model_name, fc_dim=CFG.cnn_fc_dim, use_fc=CFG.cnn_use_fc, pretrained=False)\nmodel.to(CFG.device)\nmodel.load_state_dict(torch.load(CFG.cnn_model_path, map_location=CFG.device))\n\ncnn_embeddings_all = []\n\nfor tta in range(CFG.num_tta):\n    if tta == 0:\n        test_dataset = ShopeeTestImageDataset(image_paths=image_paths, transforms=get_valid_transforms(img_size=CFG.img_size))\n    else:\n        test_dataset = ShopeeTestImageDataset(image_paths=image_paths, transforms=get_test_transforms(img_size=CFG.img_size))\n\n    test_dataloader = torch.utils.data.DataLoader(test_dataset, batch_size=CFG.cnn_batch_size, num_workers=CFG.num_workers,\n                                                  pin_memory=True, shuffle=False, drop_last=False)\n    cnn_embeddings = get_cnn_embeddings(model, test_dataloader)\n\n    cnn_embeddings_all.append(cnn_embeddings)\n\ndel cnn_embeddings\n\ncnn_embeddings_mean = np.mean(cnn_embeddings_all, axis=0)\nprint('cnn_embeddings_mean.shape:', cnn_embeddings_mean.shape)\n\ndel cnn_embeddings_all\ngc.collect()\ntorch.cuda.empty_cache()","27d1576e":"cnn_embeddings_mean_half = torch.tensor(cnn_embeddings_mean, dtype=torch.float16).to(CFG.device)\n\nbert_embeddings_half = (bert_embeddings.to(torch.float16) + bert_embeddings2.to(torch.float16)) \/ 2\n\npredictions = get_predictions(df,\n                              F.normalize(cnn_embeddings_mean_half),\n                              F.normalize(bert_embeddings_half),\n                              cnn_threshold=CFG.cnn_threshold,\n                              bert_threshold=CFG.bert_threshold,\n                              chunk=CFG.chunk,\n                              max_preds=CFG.max_preds,\n                              nearlest_one=CFG.nearlest_one)\n\ndf['predictions'] = predictions","f02313dc":"def combine_predictions(row):\n    x = np.concatenate([row[col] for col in CFG.todo_predictions])\n    return ' '.join( np.unique(x) )","08d71626":"df['matches'] = df.apply(combine_predictions, axis=1)\ndf[['posting_id', 'matches']].to_csv('submission.csv', index=False)\nsubmission_df = pd.read_csv('submission.csv')","a0301b16":"submission_df","1bcb2cd1":"def combine_for_cv(row):\n    x = np.concatenate([row[col] for col in CFG.todo_predictions])\n    return np.unique(x)\n\ndef getMetric(col):\n    def f1score(row):\n        n = len(np.intersect1d(row.target, row[col]))\n        return 2 * n \/ (len(row.target) + len(row[col]))\n    return f1score","bf52b2cf":"def histplot(preds, num_correct):\n    plt.figure(figsize=(20, 4))\n    plt.xlim(0, 60, 1)\n    plt.ylim(1, 4e4, 1)\n    plt.hist(preds, label='Predict (all)', bins=60, range=(0, 60), alpha=0.6, log=True, align='left', color='red', rwidth=0.3,)\n    plt.hist(num_correct, label='Predict (collect)', bins=60, range=(0, 60), alpha=0.3, log=True, align='left', color='blue', rwidth=0.6)\n    plt.hist(num_target, label='Target', bins=60, range=(0, 60), alpha=0.3, histtype='stepfilled', log=True, align='left', color='gray')\n    plt.legend()\n    plt.show()","d4e30dc9":"if CFG.compute_cv:\n    tmp = df.groupby('label_group').posting_id.agg('unique').to_dict()\n    df['target'] = df.label_group.map(tmp)\n    df['oof'] = df.apply(combine_for_cv, axis=1)\n    df['f1'] = df.apply(getMetric('oof'), axis=1)\n    print('CV Score =', df.f1.mean())\n    \n    for todo in CFG.todo_predictions:\n        print(f\"{todo} :\", round(df.apply(getMetric(todo), axis=1).mean(), 4))","43b59c08":"if CFG.compute_cv:\n    df['correct_oof'] = df.apply(lambda row: np.intersect1d(row['oof'], row['target']), axis=1)\n    num_correct_oof = df['correct_oof'].apply(lambda x: len(x))\n    num_oof_preds = df['oof'].apply(lambda x: len(x))\n    num_target = df['target'].apply(lambda x: len(x))\n    histplot(num_oof_preds, num_correct_oof)","b704c087":"if CFG.compute_cv:\n    num_oof_preds.value_counts()","433c0088":"## Image Model","5997c11d":"### BERT 1 Embeddings","d6292f96":"## Bert Model","ec02581f":"### Image 1 Embeddings","21ba194d":"# Calculating Predictions","d4fb8e50":"End","e709e346":"## Prediction Function","514d4dff":"## Compute CV","bf480e8d":"## Utils","570ad4e9":"## Prediction","0708471c":"## ArcFace","1267da4b":"# Inference Notebook","0abc146c":"## Config","3f84ebca":"# Submission","29fe52d7":"### BERT 2 Embeddings"}}