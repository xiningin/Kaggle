{"cell_type":{"7426a329":"code","5525437c":"code","06168546":"code","cc2d6a9d":"code","28ccb8bb":"code","367dae3b":"code","d748b906":"code","adabd290":"code","572ea70a":"code","c7cd547f":"code","5838c9d9":"code","ee180f93":"code","7abd1f2d":"code","31702522":"code","9ea73292":"code","23c1c3d5":"code","e07e7c77":"code","f26b0806":"code","30a417a2":"code","79ab9138":"code","b66241bf":"code","ec928d21":"code","e28ff5dc":"code","f4e437cc":"code","b7129d94":"code","4dea57d8":"code","dfa772ec":"code","9172c191":"code","9d6cf270":"code","e5945a2d":"code","3aff944e":"code","bb82d1fe":"code","69fd7f80":"code","a9c4ba88":"code","b3e25fd2":"code","8a52c36b":"code","c930d54b":"code","f137b7e8":"code","987de9e8":"code","5489d73c":"code","ee8f37f1":"code","cc89dc5d":"code","723dc970":"code","394ea247":"code","c991465b":"code","182f03bc":"code","871b52b5":"code","9e35d5a4":"code","ab74d3ea":"code","70e190b8":"code","7e598cce":"code","3f65c717":"code","18968a6a":"code","2c2d52fd":"code","85c8e6c3":"code","81aef976":"code","1271a4cf":"code","e931f312":"code","b6cc3e75":"code","0915da1b":"code","89ecc07c":"code","ccd6a85e":"code","8485c9c6":"code","c696bc5e":"code","bf8bb5ab":"code","3df0a7c3":"code","7a084bef":"code","eeb519ed":"code","140bde84":"code","6958489c":"code","999c8e08":"markdown","56b70553":"markdown","5dcc004f":"markdown","ec5d6ab8":"markdown","7bad9482":"markdown","9cfc40a0":"markdown","18da95e4":"markdown","46d67edd":"markdown","61a7810a":"markdown","48f3af16":"markdown","fc88d5ab":"markdown","0c7e810c":"markdown","3d6d520d":"markdown","0e6c20c2":"markdown","4eee6257":"markdown","0b6b8276":"markdown","ddfc04ed":"markdown","9c0d0b12":"markdown","41642252":"markdown","4c399ab8":"markdown","01be4502":"markdown","95016af4":"markdown","0737e1a0":"markdown","86ae442f":"markdown","dfc20c04":"markdown","50140864":"markdown","3f48b731":"markdown","25e84bb3":"markdown","1cfd689d":"markdown","ca91c51f":"markdown","8bff9d5e":"markdown","eab1496e":"markdown","ecec0a07":"markdown"},"source":{"7426a329":"import pandas as pd\nimport seaborn as sns\nimport plotly.express as xp\nimport plotly.graph_objects as go\nimport numpy as np\nimport numpy as np\nfrom datetime import datetime\nimport missingno\nimport yaml\nfrom collections import Counter\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV,ShuffleSplit\nfrom sklearn.manifold import TSNE\nfrom sklearn.linear_model import RidgeClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier, ExtraTreesClassifier, RandomForestClassifier\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\npalette = ['#3aa833',\"#6b856a\",\"#354014\"]\nsns.palplot(palette)","5525437c":"def split_to_onehot(df, col):\n    \"\"\"\n    This method converts features separated by '|' into one-hot vectors.\n    Additionally it drops unnecessary values, which present only in \n    test set \/ train set or have only one value.\n    \"\"\"\n    # Getting all unique ganres values.\n    unique = []\n    for i in df.index:\n        unique.extend(df.loc[i,col].split(\"|\"))\n    if \"\" in unique:\n        unique.remove(\"\")\n    unique = list(set(unique))\n    \n    # Putting values into binary form \n    onehot = df.loc[:,[\"Category\"]]\n    onehot[unique] = np.zeros((len(unique),), dtype = np.int8)\n    for i in df.index:\n        g = set(df.loc[i,col].split(\"|\"))\n        for j in g:\n            if j!=\"\":\n                onehot.loc[i,j] = 1\n                \n    # Dropping unnecessary values            \n    _a = onehot.groupby(\"Category\").sum()\n    only_one = list(_a.sum()[_a.sum()==1].index)\n    only_train = list(_a.loc[\"none\"][_a.loc[\"none\"]==0].index)\n    only_test = list(_a.loc[[\"like\",'dislike']].sum()[_a.loc[[\"like\",'dislike']].sum()==0].index)\n    _a = set(only_one + only_train + only_test)\n    onehot = onehot.drop(_a, axis=1)\n    \n    return onehot\n\ndef onehot_to_tsne2(df, title):\n    \"\"\"\n    This method converts one-hot representation into two tsne values.\n    Such operation is needed to shrink the dimentionality of the dataset\n    \"\"\"\n    onehot = df.drop(\"Category\",axis=1)\n    embedding = TSNE(n_components=2, init=\"pca\")\n    embedded = embedding.fit_transform(onehot)\n    embedded = pd.DataFrame(embedded,columns=[f\"{title}_tsne1\",f\"{title}_tsne2\"])\n    return embedded\n\ndef plot_commulative_onehot(onehot):\n    \"\"\"\n    Method of plotting commulative values of the one hot feature representation\n    \"\"\"\n    _df = onehot.groupby(\"Category\").sum()\n    fig = go.Figure()\n    for i in range(len(_df.index)):\n        k = _df.index[i]\n        x,y=[],[]\n        for g in _df.columns:\n            if _df.loc[k,g]!=0:\n                x.append(g)\n                y.append(_df.loc[k,g])\n        fig.add_trace(go.Bar(x=x, y=y,name=k,marker=dict(color=palette[i])))\n    fig.show()","06168546":"PATH = \"..\/input\/mymusicalprefrences\/\" \ntrain = pd.read_csv(f\"{PATH}train.csv\")\ntest = pd.read_csv(f\"{PATH}test.csv\")\ndescription = yaml.load(open(f\"{PATH}Description.yaml\",'r'),Loader=yaml.FullLoader)\ndf = pd.concat([train,test]).reset_index(drop=True)\ntr_mask = ~df.Category.isna()","cc2d6a9d":"df.columns = [i.strip() for i in df.columns]\nprint(set(df.columns))","28ccb8bb":"df.describe()","367dae3b":"# Displaing of None values in the dataset\nmissingno.bar(df, color=palette, figsize=(30,2))","d748b906":"cat_features = {\"Artists\",\"Track\",\"Version\",\"Artists_Genres\",\"Album\",\"Album_type\",\"Labels\",\"Vocal\",\"Country\",\"Key\"}\ncon_features = {\"Duration\",\"Release_year\",\"BPM\",\"Energy\",\"Dancebility\",\"Happiness\"}\ndisplay(df[cat_features].head())\ndisplay(df[con_features].head())","adabd290":"sns.pairplot(df[list(con_features)+[\"Category\"]],palette=palette[:2], hue=\"Category\")","572ea70a":"# For more easy usage of the Category feature\ndf[\"Category\"] = df[\"Category\"].fillna(\"none\").replace({0:\"dislike\",1:\"like\"})","c7cd547f":"description[\"Key\"]","5838c9d9":"xp.scatter(df, x=\"Key\", y=\"Track\",color=\"Category\", height=500, color_discrete_sequence=palette)","ee180f93":"# We correct strings and replace some ambivalent values\ndf[\"isMajor\"], df[\"Key\"] = df[\"Key\"].apply(lambda x: x.split(\" \")[1]), df[\"Key\"].apply(lambda x: x.split(\" \")[0])\ndf.loc[:,\"Key\"] = df[\"Key\"].replace({\"D\u266d\": \"C#\", \"E\u266d\": \"D#\", \"G\u266d\": \"F#\", \"A\u266d\": \"G#\",\"B\u266d\":\"A#\"})\nxp.scatter(df, x=\"Key\", y=\"Track\",color=\"Category\", height=500, color_discrete_sequence=palette)","7abd1f2d":"# We put the Major\/Minor part into new feature, to make it more easy for our model to fit on it\ndf.loc[:,\"isMajor\"] = (df[\"isMajor\"]==\"Major\").astype(int)\n_df = df.groupby([\"isMajor\",\"Category\"], as_index=False).count()\nxp.bar(_df,x=\"isMajor\", y=\"Track\",color=\"Category\", height=400, color_discrete_sequence=palette)","31702522":"_df = df.copy(deep=True)\n_df[\"Key_percise\"] = _df[\"Key\"] +\"_major:\"+ _df[\"isMajor\"].astype(str)\n_df = _df.groupby([\"Key_percise\",\"Category\"], as_index=False).count()\nxp.bar(_df, x=\"Key_percise\", y=\"Track\", color=\"Category\", height=500, color_discrete_sequence=palette)","9ea73292":"df[list(set(df[\"Key\"].values))] = OneHotEncoder().fit_transform(df[[\"Key\"]]).toarray()\ndf = df.drop(\"Key\", axis=1)","23c1c3d5":"description[\"Release year\"]","e07e7c77":"xp.scatter(df, x=\"Release_year\", y=\"Track\",color=\"Category\", height=500, color_discrete_sequence=palette)","f26b0806":"# Lets create the decade feature, to detect some music of 80th, 90th etc. as a specific janre\ndf.loc[:,\"Release_decade\"] = (df.loc[:,\"Release_year\"]\/\/10 * 10)\n# Cause of the small number of values, we will put all <90th toone value, called 80th\ndf.loc[df.loc[:,\"Release_decade\"]<1990,\"Release_decade\"] = 1980 \n_df = df.groupby([\"Release_decade\",\"Category\"], as_index=False).count()\nxp.bar(_df,x=\"Release_decade\", y=\"Track\",color=\"Category\",height=500, color_discrete_sequence=palette)","30a417a2":"description[\"Artists Genres\"]","79ab9138":"ganres_onehot = split_to_onehot(df, \"Artists_Genres\")\nplot_commulative_onehot(ganres_onehot)","b66241bf":"genres_embedded = onehot_to_tsne2(ganres_onehot, \"Genres\")\n_df = genres_embedded.copy(deep=True)\n_df[[\"Category\",\"Artists_Genres\"]] = df[[\"Category\",\"Artists_Genres\"]]\nxp.scatter(_df,x=\"Genres_tsne1\",y=\"Genres_tsne2\",color=\"Category\", hover_data=[\"Artists_Genres\"], height=500, color_discrete_sequence=palette)","ec928d21":"df = pd.concat([df,genres_embedded], axis=1)\ndf = df.drop(\"Artists_Genres\", axis=1)","e28ff5dc":"for k in [\"Energy\",\"Happiness\",\"Dancebility\",\"BPM\"]:\n    print(f\"{k}:{description[k]}\")","f4e437cc":"df[\"BPM\"] = df[\"BPM\"].apply(lambda x: str(x)[1:] if str(x)[0]=='`' else x)\ndf[['Energy', 'Happiness', 'Dancebility','BPM']] = df[['Energy', 'Happiness', 'Dancebility','BPM']].fillna(0)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy', 'Happiness', 'Dancebility']].apply(lambda x: x\/sum(x), axis=1)\ndf[['Energy%', 'Happiness%', 'Dancebility%']] = df[['Energy%', 'Happiness%', 'Dancebility%']].fillna(0)","b7129d94":"print(description[\"Labels\"])","4dea57d8":"df.Labels = df.Labels.fillna('NA')\nlabels_onehot = split_to_onehot(df, \"Labels\")\nplot_commulative_onehot(labels_onehot)","dfa772ec":"labels_embedded = onehot_to_tsne2(labels_onehot, \"Labels\")\n_df = labels_embedded.copy(deep=True)\n_df[[\"Category\",\"Labels\"]] = df[[\"Category\",\"Labels\"]]\nxp.scatter(_df,x=\"Labels_tsne1\",y=\"Labels_tsne2\",color=\"Category\", hover_data=[\"Labels\"], height=500, color_discrete_sequence=palette)","9172c191":"df = pd.concat([df,labels_embedded[[\"Labels_tsne1\",\"Labels_tsne2\"]]], axis=1)\ndf = df.drop(\"Labels\", axis=1)","9d6cf270":"print(description[\"Artists\"])","e5945a2d":"df.Artists = df.Artists.fillna(\"NA\")\nallstars = []\nfor i in df.index:\n    allstars.extend(df.loc[i, \"Artists\"].split(\"|\"))\nlen(set(allstars))","3aff944e":"# We will put some threshold, not to put some rare artists into one-hot vector.\nthreshold = 3\nothers = Counter(allstars)\nothers = [k for k in others if others[k]<=threshold]\nlen(others)","bb82d1fe":"# Drop all artists who are just in test set or just in train set\nin_train, in_test = [], []\nfor i in df.loc[tr_mask].index:\n    in_train.extend(df.loc[i, \"Artists\"].split(\"|\"))\nfor i in df.loc[~tr_mask].index:\n    in_test.extend(df.loc[i, \"Artists\"].split(\"|\"))\n    \nonly_test = set(in_test) - set(in_train)\nonly_train = set(in_train) - set(in_test)\ndisplay(len(only_test))\ndisplay(len(only_train))","69fd7f80":"allstars = list(set(allstars) - set(others) - only_test - only_train)\nprint(len(allstars))\nothers = set(others) | only_test | only_train\nprint(len(others))","a9c4ba88":"res = []\ndef prune(x):\n    vector = np.zeros(len(allstars)+1) #for others\n    x = [i for i in x.split(\"|\")]\n    for i in range(len(allstars)):\n        vector[i]=1 if allstars[i] in x else 0\n    if len(x)>sum(vector):\n        vector[-1]=1\n    res.append(vector)\n\ndf[\"Artists\"].apply(prune)\nonehot_artists = pd.DataFrame(res, columns = allstars+[\"Others\"], index=df.index)","b3e25fd2":"onehot_artists","8a52c36b":"df[\"Other_Artists\"] = onehot_artists[\"Others\"]\nonehot_artists = onehot_artists.drop(\"Others\", axis=1)\nonehot_artists[\"Category\"] = df[\"Category\"]","c930d54b":"plot_commulative_onehot(onehot_artists)","f137b7e8":"artists_embedded = onehot_to_tsne2(onehot_artists, \"Artists\")\n_df = artists_embedded.copy(deep=True)\n_df[[\"Category\",\"Artists\"]] = df[[\"Category\",\"Artists\"]]\nxp.scatter(_df,x=\"Artists_tsne1\",y=\"Artists_tsne2\",color=\"Category\", hover_data=[\"Artists\"], height=500, color_discrete_sequence=palette)","987de9e8":"df = pd.concat([df,artists_embedded[[\"Artists_tsne1\",\"Artists_tsne2\"]]], axis=1)\ndf = df.drop(\"Artists\", axis=1)","5489d73c":"for i in [\"Track\", \"Version\", \"Album_type\"]:\n    print(description[i])","ee8f37f1":"artists_encoder = LabelEncoder()\ndf[\"Track\"] = artists_encoder.fit_transform(df[\"Track\"])","cc89dc5d":"_df = df.groupby([\"Version\",\"Category\"], as_index=False).count()\nxp.bar(_df,x=\"Version\",y=\"Id\",color=\"Category\", color_discrete_sequence=palette)","723dc970":"df[\"Version\"] = df[\"Version\"].fillna(\"NA\")\nversions = set(df[\"Version\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Version\"]]).toarray()\ndf = df.drop([\"Version\",\"NA\"], axis=1)","394ea247":"_df = df.groupby([\"Album_type\",\"Category\"], as_index=False).count()\nxp.bar(_df,x=\"Album_type\",y=\"Id\",color=\"Category\", color_discrete_sequence=palette)","c991465b":"df[\"Album_type\"] = df[\"Album_type\"].fillna(\"NA\")\nversions = set(df[\"Album_type\"])\ndf[list(versions)] = OneHotEncoder().fit_transform(df[[\"Album_type\"]]).toarray()\ndf = df.drop([\"Album_type\",\"NA\"], axis=1)","182f03bc":"print(description[\"Album\"])","871b52b5":"df[\"Album\"] = df[\"Album\"].fillna(\"NA\")\nganres_onehot = split_to_onehot(df, \"Album\")\nplot_commulative_onehot(ganres_onehot)","9e35d5a4":"album_embedded = onehot_to_tsne2(onehot_artists, \"Album\")\n_df = album_embedded.copy(deep=True)\n_df[[\"Category\",\"Album\"]] = df[[\"Category\",\"Album\"]]\nxp.scatter(_df,x=\"Album_tsne1\",y=\"Album_tsne2\",color=\"Category\", hover_data=[\"Album\"], height=500, color_discrete_sequence=palette)","ab74d3ea":"df = pd.concat([df,album_embedded[[\"Album_tsne1\",\"Album_tsne2\"]]], axis=1)\ndf = df.drop(\"Album\", axis=1)","70e190b8":"print(description[\"Vocal\"])","7e598cce":"df[\"Vocal\"] = df[\"Vocal\"].fillna('N')\nonehot = np.zeros((len(df),2))\nfor i in range(len(df)):\n    v = df.iloc[i][\"Vocal\"]\n    if v == 'F':\n        onehot[i] = [1,0]\n    elif v == 'M':\n        onehot[i] = [0,1]\n    elif v == 'F|M':\n        onehot[i] = [1,1]\ndf[[\"Fem_voc\",\"Mal_voc\"]] = onehot\ndf = df.drop(\"Vocal\",axis=1)","3f65c717":"print(description[\"Country\"])","18968a6a":"df[\"Country\"] = df[\"Country\"].fillna(\"NA\")\ncountry_onehot = split_to_onehot(df, \"Country\")\nplot_commulative_onehot(country_onehot)","2c2d52fd":"country_onehot = country_onehot.drop(\"Category\", axis=1)\ndf = pd.concat([df,country_onehot], axis=1)\ndf = df.drop(\"Country\", axis=1)","85c8e6c3":"x, y = df.loc[tr_mask].iloc[:,2:], df.loc[tr_mask,\"Category\"]\ndeploy = df.loc[~tr_mask].iloc[:,2:]","81aef976":"model_c = CatBoostClassifier(verbose=False)\ngrid = {\"l2_leaf_reg\" : [3,4,5,6,7,8,9,10],\n        \"random_strength\" : [0.9],\n        \"learning_rate\" : [0.00855],\n        \"depth\" : [6]}\ncv = ShuffleSplit(n_splits=5,random_state=0) \nclf = GridSearchCV(model_c, grid, cv=cv)\nclf.fit(x,y)","1271a4cf":"pd.DataFrame(clf.cv_results_).sort_values(\"rank_test_score\")[\"params\"].values","e931f312":"model_c=clf.best_estimator_\nsample = pd.read_csv(f\"{PATH}sample_submition.csv\")\nsample[\"Category\"] = model_c.predict(deploy)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)","b6cc3e75":"sample.to_csv(\"deploy_cat.csv\", index=False)","0915da1b":"model_s = SVC()\ngrid = {\"kernel\" : ['poly', 'rbf','linear'],\n        \"C\" : [.1,1,10]}\ncv = ShuffleSplit(n_splits=5,random_state=0) \nclf = GridSearchCV(model_s, grid, cv=cv)\nclf.fit(x,y)","89ecc07c":"pd.DataFrame(clf.cv_results_).sort_values(\"rank_test_score\")[\"params\"].values","ccd6a85e":"model_s=clf.best_estimator_\nsample = pd.read_csv(f\"{PATH}sample_submition.csv\")\nsample[\"Category\"] = model_s.predict(deploy)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)","8485c9c6":"sample.to_csv(\"svm.csv\", index=False)","c696bc5e":"model_l = LogisticRegression(penalty='elasticnet',solver='saga',max_iter=9000)\ngrid = {\"l1_ratio\" : [0,.05,.1,]}\ncv = ShuffleSplit(n_splits=5,random_state=0) \nclf = GridSearchCV(model_l, grid, cv=cv)\nclf.fit(x,y)","bf8bb5ab":"pd.DataFrame(clf.cv_results_).sort_values(\"rank_test_score\")[\"params\"].values","3df0a7c3":"model_l=clf.best_estimator_\nsample = pd.read_csv(f\"{PATH}sample_submition.csv\")\nsample[\"Category\"] = model_l.predict(deploy)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)","7a084bef":"sample.to_csv(\"linear.csv\", index=False)","eeb519ed":"model = VotingClassifier(voting='hard',estimators=[\n    ('cat', model_c), \n    ('svm', model_s), \n    ('lin', model_l), \n    ('extra', ExtraTreesClassifier()),\n    ('rf',RandomForestClassifier())\n])\nmodel.fit(x,y)","140bde84":"sample = pd.read_csv(f\"{PATH}sample_submition.csv\")\nsample[\"Category\"] = model.predict(deploy)\nsample[\"Category\"] = (sample[\"Category\"]==\"like\").astype(int)","6958489c":"sample.to_csv(\"voting.csv\", index=False)","999c8e08":"## 2.7 Tracks, Version, Album_type","56b70553":"# 2. Data Preparation and Feature Engeneering\n\nIn this part we will analyze data attributes, and transform them to the for strict form. During this process we will analize the features and find some supposed dependancies in the data. For that cases, that may be transformed - we will create new features, which will describe our data better. I the end of this step we will get the dataset, ready for modeling with ML algorythms.","5dcc004f":"In this part I represent the simple example of model selection. \n\nRidgeClassifierWe will take one specific algorythm (RidgeClassifier - to show the concept of hyperrparameter tuning) and try to find the best configuration of the model. At the same time we will apply shuffle split to validate our model. The best result, should be the best solution (but usually may not be the best one on the test set). Experiment with the different technologies, libraries and approaches, to achieve the better result.","ec5d6ab8":"Nothing to do here. We will just add some propotional values of the same features.","7bad9482":"Some methods, which will help us to work with values, separated with \"|\". Use them in case you do not know how to process such values. Also, other ideas are welcome.","9cfc40a0":"### 2.7.1 Tracks","18da95e4":"Before we start we need to download the train\/test sets. To simplify the operations with the dataset and its visualisation - we will put all the data togather and create the mask, to separate train and test sets.","46d67edd":"# 1. Explorational Data Analysis \n\nOn this part we analise the data. We have to check what kind of values do we have in it. How many categorical and continuouse attributes do we have. If there are any None values and what can we do with it.","61a7810a":"## **Final project: Example solution**\n-----\n\nWelcome to the example solution for the final task of the \"Machine Learning: Theory and Application\" course. \nIt was developed for students, who took part in **Peter the Great St.Petersburg Polytechnic University Summer school**. In spite of this, if you wasn't on the course, i put this competition for free with the public test dataset. You are wellcome to share you solution and put your comments to emproove this competition\n\nThis notebook - is just an example solution, which i've created for students to get started. Do not treat it as the best solution, it is not the goal of this notebook. I especially have used some simple concepst in modeling part, to give you more wide field for your creativity. My goal is to show you some main steps of how to work with data to create ML models. Those basic steps are:\n1. Explorational Data Analysis \n2. Data Preparation\n3. Feature engeneering\n4. ML model selection\n\nAt first, lets make a few important preparations:\n","48f3af16":"## 2.6 Artists","fc88d5ab":"From the analisys of this feature we can say:\n* There are some ganres that I do not like (or not really): **dance, house, dnb, latinfolk, epicmetal, electronics, ruspop**\n* There are some ganres that I do mostly like: **rock, indie, pop, rnd, soul, numetal**","0c7e810c":"From the analisys of this feature we can say:\n* There are some favorite artists, such as: **twenty one pilots, radiohead, monatik, rhcp, \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u043d\u0438\u0442, etc.**\n* There are some artists that i do not like much: **morgenshtern, 6ix9ine, \u042d\u043b\u0434\u0436\u0435\u0439, Lady GaGa, Pitbul etc.**","3d6d520d":"### 2.7.2 Version","0e6c20c2":"## 3 Model selection","4eee6257":"## 2.8 Vocal","0b6b8276":"### 3.4 Voting Classifier for best parameters","ddfc04ed":"### 3.2 SVM classifier","9c0d0b12":"We can see, that we have to much values in one-hot vector representation. It may cause much problems, during the fitting of our model (it couldn't find distinctive dependencies in sparse matrix). In this case we will apply TSNE as a handy solution, to transfer our n columns into two, without losing the information. I recommend you to experiment with this step during your work.","41642252":"## 2.8 Album","4c399ab8":"## 2.1 Key feature","01be4502":"From the analisys of this feature we can say:\n* Major Tracks has more \"likes\" then Minor ones - **190\/142=1.34** vs **161\/172=0.94**\n* D# looks like the most disliked Key but at the same time - there are not much tracks on this key, may not be much significant.\n* The biggest proportion of likes\/dislikes is in A Major key - **11\/4 = 2.75** and C Major key - **36\/17 = 2.117**","95016af4":"## 2.9 Country","0737e1a0":"## 2.2 Release year feature","86ae442f":"### 3.1 CatBoost classifier","dfc20c04":"### 3.3 Logistic Regression","50140864":"## 2.3 Genres features","3f48b731":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/29548\/logos\/header.png?t=2021-06-16-09-31-18)","25e84bb3":"In this cases we do not have much features (so our one-hot representation wont be too spars) so we will apply onehot or label encoders (dependong of the number of features) to encode out values","1cfd689d":"From the analisys of this feature we can get the porportion of likes\/ dislikes:\n\n| Decade | like\/dislike  | koeff |\n| ------ |:-------------:| -----:|\n| 1980s  | 9\/6           | 1.5   |\n| 1990s  | 16\/8          | 2     |\n| 2000s  | 81\/90         | 0.9   |\n| 2010s  | 213\/153       | 1.39  |\n| 2020s  | 32\/57         | 0.56  |\n\nNumber of values in decades less then 1990 - may not be destinctive, but according to the koefficient - this music i like the most (this is true).\n\nAt the same time, the modern music (Like, two last years) is not in my top .","ca91c51f":"## 2.4 Energy,Happiness,Dancebility, BPM","8bff9d5e":"### 2.7.3 Album_type","eab1496e":"This feature is the most complicated one. For the example, lets assume, that the main artist for the track - named the 1st. Others will be named as collaborators.This is cause for not to make the one-hot matrix too spars putting all the artists to the single columns. Experiment with this feature - the result of its preprocessing may influence significantly to the final result.","ecec0a07":"## 2.5 Labels"}}