{"cell_type":{"f53f37d6":"code","01aa2227":"code","863cb68d":"code","54acfe81":"code","9720bca8":"code","4cfd0db8":"code","bb597d29":"code","c19711e9":"code","fc66a8b8":"code","1c1520bf":"code","0454b143":"code","a19003ab":"code","518c5fed":"code","68bcfdcc":"code","97706206":"code","bec96896":"code","bd34a9e9":"code","68f44136":"code","3a26b542":"code","0b13a15e":"code","c1978c8f":"markdown","252ae139":"markdown"},"source":{"f53f37d6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt","01aa2227":"data = pd.read_csv('..\/input\/sp-500-prices\/GSPC.csv')","863cb68d":"data.info()","54acfe81":"data.Date = pd.to_datetime(data.Date)\ndata.head()","9720bca8":"sns.lineplot(x=\"Date\", y=\"Adj Close\", data=data)","4cfd0db8":"sns.lineplot(x=\"Date\", y=\"Adj Close\", data=data[data.Date < pd.to_datetime('1990-01-01')])","bb597d29":"df = data[data.Date < pd.to_datetime('1990-01-01')]","c19711e9":"df.loc[:,'logRet'] = np.log(df.loc[:,\"Adj Close\"]) - np.log(df.loc[:,\"Adj Close\"].shift(1)) # throws a warning","fc66a8b8":"sns.lineplot(x=\"Date\", y=\"logRet\", data=df)","1c1520bf":"high_prices = df.loc[:,'High'].to_numpy()\nlow_prices = df.loc[:,'Low'].to_numpy()\nmid_prices = (high_prices+low_prices)\/2.0","0454b143":"data.shape","a19003ab":"train_data = mid_prices[:12000]\ntest_data = mid_prices[12000:]","518c5fed":"scaler = MinMaxScaler()\ntrain_data = train_data.reshape(-1,1)\ntest_data = test_data.reshape(-1,1)","68bcfdcc":"# Train the Scaler with training data and smooth data\nsmoothing_window_size = 100\nfor di in range(0,3000,smoothing_window_size):\n    scaler.fit(train_data[di:di+smoothing_window_size,:])\n    train_data[di:di+smoothing_window_size,:] = scaler.transform(train_data[di:di+smoothing_window_size,:])","97706206":"# Reshape both train and test data\ntrain_data = train_data.reshape(-1)\n\n# Normalize test data\ntest_data = scaler.transform(test_data).reshape(-1)","bec96896":"# Now perform exponential moving average smoothing\n# So the data will have a smoother curve than the original ragged data\nEMA = 0.0\ngamma = 0.1\nfor ti in range(3000):\n  EMA = gamma*train_data[ti] + (1-gamma)*EMA\n  train_data[ti] = EMA\n\n# Used for visualization and test purposes\nall_mid_data = np.concatenate([train_data,test_data],axis=0)","bd34a9e9":"window_size = 100\nN = train_data.size\nstd_avg_predictions = []\nstd_avg_x = []\nmse_errors = []\n\nfor pred_idx in range(window_size,N):\n\n    if pred_idx >= N:\n        date = dt.datetime.strptime(k, '%Y-%m-%d').date() + dt.timedelta(days=1)\n    else:\n        date = df.loc[pred_idx,'Date']\n\n    std_avg_predictions.append(np.mean(train_data[pred_idx-window_size:pred_idx]))\n    mse_errors.append((std_avg_predictions[-1]-train_data[pred_idx])**2)\n    std_avg_x.append(date)\n\nprint('MSE error for standard averaging: %.5f'%(0.5*np.mean(mse_errors)))","68f44136":"plt.figure(figsize = (18,9))\nplt.plot(range(df.shape[0]),all_mid_data,color='b',label='True')\nplt.plot(range(window_size,N),std_avg_predictions,color='orange',label='Prediction')\n#plt.xticks(range(0,df.shape[0],50),df['Date'].loc[::50],rotation=45)\nplt.xlabel('Date')\nplt.ylabel('Mid Price')\nplt.legend(fontsize=18)\nplt.show()","3a26b542":"window_size = 100\nN = train_data.size\n\nrun_avg_predictions = []\nrun_avg_x = []\n\nmse_errors = []\n\nrunning_mean = 0.0\nrun_avg_predictions.append(running_mean)\n\ndecay = 0.5\n\nfor pred_idx in range(1,N):\n\n    running_mean = running_mean*decay + (1.0-decay)*train_data[pred_idx-1]\n    run_avg_predictions.append(running_mean)\n    mse_errors.append((run_avg_predictions[-1]-train_data[pred_idx])**2)\n    run_avg_x.append(date)\n\nprint('MSE error for EMA averaging: %.5f'%(0.5*np.mean(mse_errors)))","0b13a15e":"plt.figure(figsize = (18,9))\nplt.plot(range(df.shape[0]),all_mid_data,color='b',label='True')\nplt.plot(range(0,N),run_avg_predictions,color='orange', label='Prediction')\n#plt.xticks(range(0,df.shape[0],50),df['Date'].loc[::50],rotation=45)\nplt.xlabel('Date')\nplt.ylabel('Mid Price')\nplt.legend(fontsize=18)\nplt.show()","c1978c8f":"# Exponential Moving Average","252ae139":"# Standard Average"}}