{"cell_type":{"fe32853a":"code","615b37fd":"code","6093b96d":"code","f6eebe57":"code","01c03fe7":"code","f968ffb4":"code","54001c20":"code","8d2deb36":"code","9392eea7":"code","8eaef7ca":"code","3f97563b":"code","3d23abf7":"code","f7428372":"code","dcabded2":"code","7ef068f7":"code","4dcb7e87":"code","98157b24":"code","83d5c720":"markdown","94b11ffb":"markdown","546c40f6":"markdown","60a0445f":"markdown","9f414ef0":"markdown"},"source":{"fe32853a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","615b37fd":"import numpy as np \nimport pandas as pd\nnp.random.seed(1212)\nimport keras\nfrom keras.models import Model\nfrom keras.layers import *\nfrom keras import optimizers\n","6093b96d":"df_train=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndf_test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')","f6eebe57":"df_train.head()","01c03fe7":"df_train['label'].unique()","f968ffb4":"df_train.describe()","54001c20":"df_train.info()","8d2deb36":"df_train.isnull().sum()","9392eea7":"df_features = df_train.iloc[:, 1:785]\ndf_label = df_train.iloc[:, 0]\n\nX_test = df_test.iloc[:, 0:784]\n\nprint(X_test.shape)","8eaef7ca":"from sklearn.model_selection import train_test_split\nX_train, X_cv, y_train, y_cv = train_test_split(df_features, df_label, test_size = 0.2,random_state=1212)\n\n","3f97563b":"#Normalizing our features\nX_train = X_train.astype(\"float32\") \nX_cv = X_cv.astype(\"float32\")\nX_test=X_test.astype('float32')\nX_train\/=255;X_cv\/=255;X_test\/=255","3d23abf7":"# convert our label to One Hot encoder using Keras \nnum_digits=10\ny_train=keras.utils.to_categorical(y_train,num_digits)\ny_cv=keras.utils.to_categorical(y_cv,num_digits)","f7428372":"from keras import Sequential\n#Our Model\nmodel=Sequential()\n#Add our Layers using Relu activation function\nmodel.add(Dense(1024,activation='relu',input_shape=(784,)))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))\nmodel.summary()\n\n","dcabded2":"#Adam like optimizer\nadam=optimizers.Adam(lr=0.1)\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nmodel.fit(X_train, y_train,epochs = 10,batch_size=128,verbose=1,validation_split=0.3,validation_data=[X_cv,y_cv])\n","7ef068f7":"pred=model.predict(X_test)\ntest_pred=pd.DataFrame(pred)\nprint(test_pred)","4dcb7e87":"test_pred = pd.DataFrame(test_pred.idxmax(axis = 1))\ntest_pred.index.name = 'ImageId'\ntest_pred = test_pred.rename(columns = {0: 'Label'}).reset_index()\ntest_pred['ImageId'] = test_pred['ImageId'] + 1\n\ntest_pred.head()","98157b24":"test_pred.to_csv('mnist_submission.csv', index = False)","83d5c720":"Importing our libraries","94b11ffb":"**Let's load our Data**","546c40f6":"**Let's split our Data**","60a0445f":"pixel is between 0 and 255 => normalize our features  ","9f414ef0":"**Let's explore our data **"}}