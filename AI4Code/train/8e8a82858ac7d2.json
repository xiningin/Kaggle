{"cell_type":{"9f9f10c5":"code","3879131e":"code","835b0d41":"code","e2964ee0":"code","44267ea9":"code","05c26288":"code","6bf8fa9d":"code","588cba94":"markdown","c0eca421":"markdown","dbf77f23":"markdown","f03eed93":"markdown","8af98aad":"markdown","43ef67b3":"markdown"},"source":{"9f9f10c5":"!pip -q install --upgrade chaipy\n\nimport chai_py\nchai_py.setup_notebook()","3879131e":"%%write_and_run bot bot.py Bot\nfrom random import choice as randChoice\nfrom chai_py import ChaiBot, Update\n\nclass Bot(ChaiBot):\n    numberOfRounds = 10  # you can change this!\n    moves = [\"Rock \ud83e\udea8\", \"Paper \ud83d\udcf0\", \"Scissors \u2702\ufe0f\", \"Water Bomb \ud83d\udca6\", \"Dynamite \ud83e\udde8\"]\n    winningMoves = {\n        0: 2,  # Rock beats Scissors\n        1: 0,  # Paper beats Rock\n        2: 1,  # Scissors beats Paper\n        # Water Bomb and Dynamite are handled separately\n    }\n\n    HELP_TEXT = (\n        'Type \"rock\", \"paper\", \"scissors\", \"dynamite\" or \"water bomb\" to make a move!'\n    )\n\n    def setup(self):\n        self.resetScores()\n\n    def resetScores(self):\n        self.dynamiteLeft = [2, 2]  # [bot, user], you can change this!\n        self.score = [0, 0]  # [bot, user]\n        self.currentRound = 0\n\n    async def on_message(self, update: Update) -> str:\n        if update.latest_message.text == self.FIRST_MESSAGE_STRING:\n            return f\"Hi! Are you ready to play Rock Paper Scissors? {self.HELP_TEXT}\"\n\n        moves = [0, 1, 2]\n        if self.dynamiteLeft[1] > 0:  # if user has dynamite left\n            moves.append(3)\n        if self.dynamiteLeft[0] > 0:  # if bot has dynamite left\n            moves.append(4)\n        botMove = randChoice(moves)\n\n        if botMove == 4:\n            self.dynamiteLeft[0] -= 1\n\n        userResponse = update.latest_message.text.lower()\n        if \"rock\" in userResponse:\n            userMove = 0\n        elif \"paper\" in userResponse:\n            userMove = 1\n        elif \"scissors\" in userResponse:\n            userMove = 2\n        elif \"water\" in userResponse or \"bomb\" in userResponse:\n            userMove = 3\n        elif \"dynamite\" in userResponse:\n            userMove = 4\n            if self.dynamiteLeft[1] <= 0:\n                return \"You've run out of Dynamite! Make another move\"\n            self.dynamiteLeft[1] -= 1\n        else:\n            return f\"Could not detect a move in your response \ud83d\ude15 {self.HELP_TEXT}\"\n\n        self.currentRound += 1\n\n        if userMove == botMove:\n            return self.draw(botMove)\n        if userMove == 4:\n            if botMove == 3:\n                return self.draw(botMove)\n            return self.userWin(botMove)\n        if botMove == 4:\n            if userMove == 3:\n                return self.draw(botMove)\n            return self.botWin(botMove)\n        if userMove == 3:\n            return self.botWin(botMove)\n        if botMove == 3 or self.winningMoves[userMove] == botMove:\n            return self.userWin(botMove)\n        return self.botWin(botMove)\n\n    def getScore(self):\n        message = (\n            f\"\\n\\nRound {self.currentRound} of {self.numberOfRounds} \"\n            + f\"\\n\\nScore: {self.score[0]}-{self.score[1]} \"\n            + f\"\\n\\nDynamite \ud83e\udde8 left: {self.dynamiteLeft[0]}-{self.dynamiteLeft[1]}\"\n        )\n\n        if self.currentRound == self.numberOfRounds:\n            message += \", \\n\\n\"\n            if self.score[0] > self.score[1]:\n                message += \"**I win the round \ud83c\udf8a\ud83c\udf8a\ud83c\udf8a**\"\n            elif self.score[0] < self.score[1]:\n                message += \"**You win the round \ud83c\udf89\ud83c\udf89\ud83c\udf89**\"\n            else:\n                message += \"**It's a draw!**\"\n            message += f\"\\n\\nWanna play again? {self.HELP_TEXT}\"\n            self.resetScores()\n        return message\n\n    def userWin(self, botMove):\n        self.score[1] += 1\n        return f\"{self.moves[botMove]}  - **You win \ud83c\udf89** {self.getScore()}\"\n\n    def botWin(self, botMove):\n        self.score[0] += 1\n        return f\"{self.moves[botMove]}  - **I win \ud83c\udf8a** {self.getScore()}\"\n\n    def draw(self, botMove):\n        return f\"{self.moves[botMove]}  - **Draw!** {self.getScore()}\"","835b0d41":"from chai_py import TRoom\n\nt_room = TRoom([Bot()])\nt_room.chat()","e2964ee0":"from chai_py.auth import set_auth\n\nDEV_UID = input(\"Enter dev UID: \")\nDEV_KEY = input(\"Enter dev key: \")\nset_auth(DEV_UID, DEV_KEY)","44267ea9":"from chai_py import package, Metadata, upload_and_deploy, wait_for_deployment, share_bot\n\nIMAGE_URL = \"https:\/\/static.vecteezy.com\/system\/resources\/previews\/000\/690\/865\/non_2x\/rock-paper-scissors-line-icons-vector.jpg\"\n\npackage(\n    Metadata(\n        name=\"Rock Paper Scissors Bot\",\n        image_url=IMAGE_URL,\n        color=\"f1a2b3\",\n        description=\"Lets play Rock Paper Scissors Dynamite Water Bomb! \ud83e\udea8 \ud83d\udcf0 \u2702\ufe0f \ud83e\udde8 \ud83d\udca6\",\n        input_class=Bot,\n        developer_uid=DEV_UID,\n    ),\n)\n\nprint()\nbot_uid = upload_and_deploy(\"bot\/_package.zip\")","05c26288":"wait_for_deployment(bot_uid)","6bf8fa9d":"share_bot(bot_uid)","588cba94":"## Success \ud83c\udf89\nScan the QR code above with your phone and you will be taken to a chat screen with your brand new bot, how cool is that?!\n\n(Make sure you have the Chai app installed on your phone, get it on the [App store](https:\/\/apps.apple.com\/us\/app\/chai\/id1544750895) or [Google Play](https:\/\/play.google.com\/store\/apps\/details?id=com.Beauchamp.Messenger.external&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1))\n\n# Conclusion\n\nAnd thasts it! You now have your very own chatbot \ud83d\ude04\ud83c\udf89\n\n**More tutorials:**\n- **[Chai docs](https:\/\/chai.ml\/docs\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle) creating your first bot**\n- **[Deploying a pretrained chatbot on Chai](https:\/\/www.kaggle.com\/rsedlr\/deploying-a-chatbot)**\n- **[Google Colab tutorial on training a Rick & Morty chatbot on custom dialogue](https:\/\/colab.research.google.com\/drive\/1o5LxBspm-C28HQvXN-PRQavapDbm5WjG?usp=sharing)**","c0eca421":"# Making a Rock Paper Scissors AI chatbot with Chai\n\n<img src=\"https:\/\/i.imgur.com\/zUW2QTt.png\" width=\"550\">\n\n\nBy the end of this tutorial you will have your very own Rock Paper Scissors chatbot on the [Chai platform](https:\/\/chai.ml\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle), like the one pictured above \ud83d\ude0e \n\nChai is a platform for creating and interacting with conversational AI's. It allows us to chat with our bot through a mobile app, which makes it really easy show off the bot, no need to whip out your laptop and fire up a kaggle instance!\n\nWe will also be able to see performance stats and watch it climb the Chai bot leaderboard:\n\n<img src=\"https:\/\/i.imgur.com\/ctPYQVZ.png\" width=\"800\">\n\n### Setup the notebook","dbf77f23":"## Bot code\n\nThis is the code that will handle responding to users. \n\nThere's a few varibles which you can change, i.e. `numberOfRounds` and `dynamiteLeft`.","f03eed93":"## Chatting with the bot\nTime to test it out! Now the output might look a bit rough around the edges because the CLI isn't processing the markdown code. But don't worry, this is just to test the functionality of the bot, the responses will look much nicer when we chat with it on the app!","8af98aad":"(to exit the chat cancel execution of the code block above)\n\n## Deploying the bot\n\nHead over to the [Chai Dev Platform](https:\/\/chai.ml\/dev\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle) to set up your developer account.\n\nYour developer ID and keys can be found at the bottom of the [dev page](https:\/\/chai.ml\/dev\/?utm_source=kaggle&utm_medium=social&utm_campaign=kaggle)","43ef67b3":"### Let's deploy!\n\nYou can change the `name`, `image_url` and `description` to personalise how the bot will appear on the platform!"}}