{"cell_type":{"927fb5d1":"code","028af1e0":"code","4a540130":"code","25a6296c":"code","f25bedb1":"code","7e522907":"code","80a4d0ff":"code","a90b9b5e":"code","184797df":"code","3d40d91d":"code","37b7d83e":"code","413b3bd4":"code","e699b067":"code","10781e69":"code","21799b02":"code","8b750098":"code","e58cea20":"code","a8b15327":"code","09414009":"code","9952ed17":"code","760e7d63":"code","bb51a911":"code","66dd38ff":"code","43ef48ca":"code","5a582758":"code","a67ae388":"code","f98bf287":"code","55cea5f3":"code","840988a2":"code","910db47b":"code","8e9029bc":"code","4fbe5fbf":"code","cbab17b0":"code","07aaca97":"code","2da1b217":"code","2b91531d":"code","34b4e35b":"code","d264b95c":"code","aaa5c703":"code","8c1ecbc2":"code","9c12d618":"code","26070102":"code","4f1c053f":"code","cdf8896d":"code","af5da7a3":"code","1c844bf0":"code","a1322740":"code","36a8d384":"code","fe7126d9":"code","eda42d0e":"code","f4e71749":"code","b2b1ed6b":"code","c7cf7c84":"code","7e9b993c":"markdown","33a3e95a":"markdown","6ee2ef31":"markdown","9f24bbf6":"markdown","0d8decbc":"markdown","4639b3f1":"markdown","ccbcae9b":"markdown","3d8050ec":"markdown","05b2f83e":"markdown","00f1c8af":"markdown","11891baf":"markdown","b49cf7c5":"markdown","f918cfa0":"markdown","de0a87bf":"markdown","26c65cd8":"markdown","a911dc97":"markdown","a1b546ba":"markdown","aa1df195":"markdown","f4902352":"markdown","793b6cd3":"markdown","7218496d":"markdown","fd84a647":"markdown","f49c0f81":"markdown","e97864df":"markdown","9de6c1ee":"markdown","d23e9f4c":"markdown","727cb201":"markdown","643a1a78":"markdown","7a56939f":"markdown","db5cd3d8":"markdown","5345b858":"markdown"},"source":{"927fb5d1":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np","028af1e0":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsub = pd.read_csv('..\/input\/sample_submission.csv')\nstructures = pd.read_csv('..\/input\/structures.csv')\npotential_energy = pd.read_csv('..\/input\/potential_energy.csv')\nmulliken_charges = pd.read_csv('..\/input\/mulliken_charges.csv')\nscalar_coupling_contributions = pd.read_csv('..\/input\/scalar_coupling_contributions.csv')\nmagnetic_shielding_tensors = pd.read_csv('..\/input\/magnetic_shielding_tensors.csv')\ndipole_moments = pd.read_csv('..\/input\/dipole_moments.csv')","4a540130":"train.head()","25a6296c":"train.nunique()","f25bedb1":"train.isnull().sum()","7e522907":"train.info()","80a4d0ff":"train.describe()","a90b9b5e":"plt.hist(train['scalar_coupling_constant'], bins=50)\nplt.title('count of scalar_coupling_constant')\nplt.xlabel('scalar_coupling_constant')\nplt.ylabel('count')\nplt.show()","184797df":"plt.figure(figsize=(12,4))\nsns.stripplot(x=train.scalar_coupling_constant)\nplt.show()","3d40d91d":"train.sort_values('scalar_coupling_constant', ascending=False).head(20)","37b7d83e":"plt.figure(figsize=(15, 5))\nplt.title('violin plot of scalar_coupling_constant')\nsns.violinplot(x='type', y='scalar_coupling_constant', data=train)\nplt.show()","413b3bd4":"def count_plot(df, col):\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.bar(df[col].unique(), df.groupby(col)[col].count())\n    ax.set_xlabel(col)\n    ax.set_ylabel('count')\n    ax.set_title(f'count of {col}')\n    fig.show()","e699b067":"count_plot(train, 'type')","10781e69":"count_plot(train, 'atom_index_0')","21799b02":"count_plot(train, 'atom_index_1')","8b750098":"test.head()","e58cea20":"test.nunique()","a8b15327":"test.isnull().sum()","09414009":"test.info()","9952ed17":"test.describe()","760e7d63":"count_plot(test, 'type')","bb51a911":"count_plot(test, 'atom_index_0')","66dd38ff":"count_plot(test, 'atom_index_1')","43ef48ca":"structures.head()","5a582758":"plt.figure(figsize=(25, 5))\n\nplt.subplot(1,3,1)\nplt.hist(structures['x'], bins=50)\nplt.title('count of x')\nplt.xlabel('x')\nplt.ylabel('count')\n\nplt.subplot(1,3,2)\nplt.hist(structures['y'], bins=50)\nplt.title('count of y')\nplt.xlabel('y')\nplt.ylabel('count')\n\nplt.subplot(1,3,3)\nplt.hist(structures['z'], bins=50)\nplt.title('count of z')\nplt.xlabel('z')\nplt.ylabel('count')\n\nplt.show()","a67ae388":"potential_energy.head()","f98bf287":"plt.hist(potential_energy['potential_energy'], bins=50)\nplt.title('count of potential_energy')\nplt.xlabel('potential_energy')\nplt.ylabel('count')\nplt.show()","55cea5f3":"mulliken_charges.head()","840988a2":"plt.hist(mulliken_charges['mulliken_charge'], bins=50)\nplt.title('count of mulliken_charge')\nplt.xlabel('mulliken_charge')\nplt.ylabel('count')\nplt.show()","910db47b":"plt.figure(figsize=(25, 5))\nplt.title('violin plot of mulliken_charge')\nsns.violinplot(x='atom_index', y='mulliken_charge', data=mulliken_charges)\nplt.show()","8e9029bc":"scalar_coupling_contributions.head()","4fbe5fbf":"plt.figure(figsize=(18, 10))\n\nplt.subplot(2,2,1)\nplt.hist(scalar_coupling_contributions['fc'], bins=50)\nplt.title('count of fc')\nplt.xlabel('fc')\nplt.ylabel('count')\n\nplt.subplot(2,2,2)\nplt.hist(scalar_coupling_contributions['sd'], bins=50)\nplt.title('count of sd')\nplt.xlabel('sd')\nplt.ylabel('count')\n\nplt.subplot(2,2,3)\nplt.hist(scalar_coupling_contributions['pso'], bins=50)\nplt.title('count of pso')\nplt.xlabel('pso')\nplt.ylabel('count')\n\nplt.subplot(2,2,4)\nplt.hist(scalar_coupling_contributions['dso'], bins=50)\nplt.title('count of dso')\nplt.xlabel('dso')\nplt.ylabel('count')\n\nplt.show()","cbab17b0":"plt.figure(figsize=(15, 5))\nplt.title('violin plot of fc')\nsns.violinplot(x='type', y='fc', data=scalar_coupling_contributions)\nplt.show()","07aaca97":"plt.figure(figsize=(15, 5))\nplt.title('violin plot of sd')\nsns.violinplot(x='type', y='sd', data=scalar_coupling_contributions)\nplt.show()","2da1b217":"plt.figure(figsize=(15, 5))\nplt.title('violin plot of pso')\nsns.violinplot(x='type', y='pso', data=scalar_coupling_contributions)\nplt.show()","2b91531d":"plt.figure(figsize=(15, 5))\nplt.title('violin plot of dso')\nsns.violinplot(x='type', y='dso', data=scalar_coupling_contributions)\nplt.show()","34b4e35b":"magnetic_shielding_tensors.head()","d264b95c":"dipole_moments.head()","aaa5c703":"matrix = pd.merge(train,\n                  structures,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_0'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'atom': 'atom_0',\n                                'x': 'x_0',\n                                'y': 'y_0',\n                                'z': 'z_0'})","8c1ecbc2":"matrix = pd.merge(matrix,\n                  structures,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_1'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'atom': 'atom_1',\n                                'x': 'x_1',\n                                'y': 'y_1',\n                                'z': 'z_1'})","9c12d618":"matrix = pd.merge(matrix,\n                  mulliken_charges,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_0'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'mulliken_charge': 'mulliken_charge_0'})","26070102":"matrix = pd.merge(matrix,\n                  mulliken_charges,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_1'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'mulliken_charge': 'mulliken_charge_1'})","4f1c053f":"matrix = pd.merge(matrix,\n                  scalar_coupling_contributions,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_0', 'atom_index_1', 'type'],\n                  right_on = ['molecule_name', 'atom_index_0', 'atom_index_1',  'type'])","cdf8896d":"matrix = pd.merge(matrix,\n                  magnetic_shielding_tensors,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_0'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'XX':'XX_0',\n                                'YX':'YX_0',\n                                'ZX':'ZX_0',\n                                'XY':'XY_0',\n                                'YY':'YY_0',\n                                'ZY':'ZY_0',\n                                'XZ':'XZ_0',\n                                'YZ':'YZ_0',\n                                'ZZ':'ZZ_0'})","af5da7a3":"matrix = pd.merge(matrix,\n                  magnetic_shielding_tensors,\n                  how = 'left',\n                  left_on = ['molecule_name', 'atom_index_1'],\n                  right_on = ['molecule_name', 'atom_index'])\n\nmatrix = matrix.drop('atom_index', axis=1)\n\nmatrix = matrix.rename(columns={'XX':'XX_1',\n                                'YX':'YX_1',\n                                'ZX':'ZX_1',\n                                'XY':'XY_1',\n                                'YY':'YY_1',\n                                'ZY':'ZY_1',\n                                'XZ':'XZ_1',\n                                'YZ':'YZ_1',\n                                'ZZ':'ZZ_1'})","1c844bf0":"matrix = pd.merge(matrix,\n                  dipole_moments,\n                  how = 'left',\n                  left_on = ['molecule_name'],\n                  right_on = ['molecule_name'])","a1322740":"matrix.head()","36a8d384":"matrix.info()","fe7126d9":"def downsize_data(df):\n    float64_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int64_int32_cols = [c for c in df if df[c].dtype in [\"int64\", \"int32\"]]\n    df[float64_cols] = df[float64_cols].astype(np.float32)\n    df[int64_int32_cols] = df[int64_int32_cols].astype(np.int16)\n    df.info()","eda42d0e":"downsize_data(matrix)","f4e71749":"def heat_map(df):\n    # calcurate correlation coefficient\n    df_corr = df.corr()\n    # show heat map\n    plt.figure(figsize=(30, 30))\n    hm = sns.heatmap(df_corr,\n                    cbar=True,\n                    annot=True,\n                    square=True,\n                    annot_kws={'size':15},\n                    fmt='.2f')\n    plt.tight_layout()\n    plt.show()","b2b1ed6b":"sel_columns = [\n    #'id',\n    #'molecule_name', \n    #'atom_index_0',\n    #'atom_index_1', \n    #'type',\n     'scalar_coupling_constant',\n    #'atom_0',\n     'x_0',\n     'y_0', \n     'z_0', \n    #'atom_1',\n     'x_1',\n     'y_1',\n     'z_1', \n     'mulliken_charge_0', \n     'mulliken_charge_1', \n     'fc',\n     'sd', \n     'pso', \n     'dso', \n     'XX_0',\n     'YX_0',\n     'ZX_0', \n     'XY_0',\n     'YY_0', \n     'ZY_0',\n     'XZ_0',\n     'YZ_0',\n     'ZZ_0',\n     'XX_1', \n     'YX_1',\n     'ZX_1', \n     'XY_1', \n     'YY_1',\n     'ZY_1', \n     'XZ_1',\n     'YZ_1', \n     'ZZ_1',\n     'X',\n     'Y', \n     'Z']","c7cf7c84":"heat_map(matrix[sel_columns])","7e9b993c":"You should downsize data.<br> ex) int64 -> int32","33a3e95a":"## Structures Data","6ee2ef31":"# Next step","9f24bbf6":"\"fc\", \"pso\", \"dso\" show different distribution of variance and median.<br>\n\"sd\" also shows different variance.","0d8decbc":"memory usage : 1.5+ GB -> 808.5+ MB","4639b3f1":"About magnetic_shielding_tensors, check correlation by heatmap later.","ccbcae9b":"# Check Data","3d8050ec":"Check outliers.","05b2f83e":"# Load Data","00f1c8af":"### dipole_moments","11891baf":"Next step is feature engineering. I introduce some of kernels.<br>\n<br><br>\n\u30fbburute force engineering<br>\nhttps:\/\/www.kaggle.com\/artgor\/brute-force-feature-engineering<br>\n\u2192make distance feature<br>\n\u2192using groupby(), make many features about count\/mean\/max\/min\/std\/diff\/div<br>\n<br><br>\n\u30fbUsing meta-features to improve model<br>\nhttps:\/\/www.kaggle.com\/artgor\/using-meta-features-to-improve-model<br>\n\u2192using \"fc\" feature\uff08There is strong correlation between fc and scalar_coupling_constant\uff09","b49cf7c5":"### magnetic_shielding_tensors","f918cfa0":"Heat map shows correlation coefficient. You can find important features from it.<br>\n<br>\nex)<br>\nscalar_coupling_constant and fc : 1<br>\nscalar_coupling_constant and dso : 0.56<br>\nscalar_coupling_constant and mulliken_charge_1 : -0.36<br>\nscalar_coupling_constant and sd : 0.34","de0a87bf":"### mulliken_charges","26c65cd8":"### Merge train and structures","a911dc97":"## additional data<br>\n\u203b Additional data is only for train data.","a1b546ba":"# Merge data","aa1df195":"Atom_index < 9 have large variance, and median is almost under 0.<br>\nOn the other hand, atom_index >= 9 have smaller variance, and median is over 0.","f4902352":"## Test Data","793b6cd3":"# Check correlation","7218496d":"Select numerical and not labeled columns.","fd84a647":"Show count plot.","f49c0f81":"# Import Libraries","e97864df":"Type \"1JHC\" has large point of scalar_coupling_constant.","9de6c1ee":"## Train Data","d23e9f4c":"About dipole_moments, check correlation by heatmap later, too.","727cb201":"# Downsize data","643a1a78":"### Merge matrix and additional data","7a56939f":"Violin plot shows each type has different distribution of scalar_coupling_constant.","db5cd3d8":"### potential_energy","5345b858":"### scalar_coupling_contributions"}}