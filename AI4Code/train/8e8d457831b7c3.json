{"cell_type":{"22aa8c0f":"code","4f16b6e1":"code","a71f2691":"code","48e13c5d":"code","c29facfb":"code","1b173163":"code","24f8f408":"code","1d71e6c6":"code","d482d576":"code","216d77ee":"code","087e2ce2":"code","9b64e698":"code","798ae6e7":"code","c8d20f8e":"code","5e11200e":"code","a84b7f97":"code","7a29e594":"code","f70dfcf0":"code","b6d331a7":"code","e3834c13":"code","94f196fb":"code","8ff91c48":"code","acc3b87c":"code","a6bc71c5":"code","f12966f2":"code","dc0cac5a":"code","1798b51b":"code","6d296f0b":"code","5b1a24c9":"code","95351410":"code","25045725":"code","5ca8ae52":"code","c6297251":"code","a6e15f21":"code","96760bf6":"code","788d04e0":"code","6d79e010":"code","a0da66af":"code","ca9b20de":"code","f514c584":"code","091e8caa":"code","04334b55":"code","dd852b2d":"code","8bb5bbd5":"code","697238c8":"code","90ab403b":"markdown","ce12c5ed":"markdown","84ff82e3":"markdown","e572cf22":"markdown","e5939f4f":"markdown","9bb2c6b5":"markdown","184b4e07":"markdown","3f4a2d72":"markdown","4fa923eb":"markdown","0a31520d":"markdown","da017319":"markdown","d09dd85b":"markdown","cd669e77":"markdown","d101ffd3":"markdown","4bf6cc0a":"markdown","8b5763b6":"markdown","933aabee":"markdown","9b2bb254":"markdown","5dcdf6cf":"markdown","c40983f1":"markdown"},"source":{"22aa8c0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f16b6e1":"df = pd.read_csv(\"\/kaggle\/input\/spotify-dataset-full\/Onyx Data - DataDNA Dataset Challenge - July 2021 - Spotify Tracks.csv\")\ndf","a71f2691":"df.describe()","48e13c5d":"df.dtypes","c29facfb":"df.isnull().sum()","1b173163":"df[df['name'].isnull()].name","24f8f408":"df['name']=df['name'].fillna('Not avilable')\n","1d71e6c6":"df[df['name'].isnull()].name","d482d576":"df.isnull().sum()","216d77ee":"df['release_date'].describe()","087e2ce2":"df.head()","9b64e698":"df['artists']","798ae6e7":"artist_names = []\n\nfor i in range(0,len(df)):\n    b=\"\"\n    a = df['artists'][i]\n    for j in range(0,len(a)):\n        if (a[j]>'A' and a[j]<'Z') or (a[j]>'a' and a[j]<'z') or (a[j]==',') or (a[j]==\" \"):\n            b = b + a[j]\n    artist_names.append(b)\n\n    \nartist_names\n        \n","c8d20f8e":"temp = pd.DataFrame()","5e11200e":"temp['artist_names'] = artist_names","a84b7f97":"temp","7a29e594":"result = pd.concat([df,temp],axis=1)\nresult","f70dfcf0":"result.head()","b6d331a7":"result.drop('artists',axis=1,inplace=True)","e3834c13":"result.head()","94f196fb":"result.drop(['id','id_artists'],axis=1,inplace=True)","8ff91c48":"result.head()","acc3b87c":"#for i in range(0,len(result)):\n #   print(df['release_date'][i])","a6bc71c5":"#Extracting the year from date\nyear_released=[]\nfor i in range(0,len(result)):\n    a=result['release_date'][i][:4]\n    year_released.append(a)\n","f12966f2":"# creating a new dataframe for storing years\nyear = pd.DataFrame()\nyear['year_released'] = year_released","dc0cac5a":"year","1798b51b":"# concating with result\nresult = pd.concat([result,year],axis=1)\nresult","6d296f0b":"result.drop('release_date',axis=1,inplace=True)","5b1a24c9":"result","95351410":"col = ['danceability','energy','loudness','speechiness','acousticness','instrumentalness','liveness','valence','tempo']","25045725":"import matplotlib.pyplot as plt\nimport seaborn as sns","5ca8ae52":"figure = plt.figure(figsize=(10,6))\nsns.heatmap(result[col].corr(),cmap=\"YlGnBu\",annot=True)\nplt.title(\"Correlations\",size=15)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Features\")\nplt.show()","c6297251":"figure = plt.figure(figsize=(10,10))\nsns.heatmap(result.corr(),cmap=\"YlGnBu\",annot=True)\nplt.title(\"Correlations\",size=15)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Features\")\nplt.show()","a6e15f21":"cor_mat = result.corr()\ncor_pairs = cor_mat.unstack()\ncor_pairs","96760bf6":"sorted_pairs=cor_pairs.sort_values()","788d04e0":"sorted_pairs","6d79e010":"sorted_pairs[sorted_pairs>0.5]","a0da66af":"sorted_pairs[sorted_pairs<0.5]","ca9b20de":"year = result['year_released'].value_counts()","f514c584":"year = year.to_frame()\nyear","091e8caa":"year.reset_index(inplace=True)","04334b55":"year.rename(columns={\"index\":\"year\",\"year_released\":\"No. of songs\"},inplace=True)\nyear","dd852b2d":"year.columns","8bb5bbd5":"figure = plt.figure(figsize=(20,10))\nplt.plot(year['year'],year['No. of songs'])\nplt.title(\"Songs\")\nplt.xlabel(\"year\")\nplt.ylabel(\"songs\")\nplt.show()","697238c8":"result.to_csv(\"Cleaned_data.csv\",index=False)","90ab403b":"column \"id\" and \"id_artists\" are not required so we drop those columns","ce12c5ed":"## Reading the Date","84ff82e3":"## Columns with lowest Correlations","e572cf22":"dropping the previous artists name","e5939f4f":"### Changes in number of tracks with respect to years","9bb2c6b5":"Now, we have artist names and artist id in the \"temp\" dataframe. so now we need to combine append the original dataframe with temp dataframe ","184b4e07":"creating a temp dataframe","3f4a2d72":"We can see that there are 71 names missing in the name field. \n\nChanging all the missing values to \"Not available\"","4fa923eb":"### Data Cleaning","0a31520d":"creating a column called \"Artists_name\" and updating the values from the list \"artist_names\"","da017319":"dropping the release date from result dataframe","d09dd85b":"The is few values in the column 'release_date' which has only year and day, months are not included,","cd669e77":"The columns \"Energy\" and \"loudness\" has the highest correlations","d101ffd3":"The artists name are in list format, so we change it into string format","4bf6cc0a":"So, now there is no missing values in name field, all of those have been changed to \"Not available\"","8b5763b6":"## Correlations","933aabee":"Now, the data has no missing values.","9b2bb254":"## Columns with Higher Correlations","5dcdf6cf":"For most of the values only year is present so, we take as 'year_released' instead of 'released_date'","c40983f1":"The columns energy and acousticness has the lowest correlations"}}