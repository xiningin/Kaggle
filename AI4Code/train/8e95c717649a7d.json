{"cell_type":{"aab9f757":"code","7dc05a7c":"code","590c6d80":"code","12a36a6f":"code","d2613f4b":"code","b94251ba":"code","b9ce1f6a":"code","7733aadd":"code","772f24e3":"code","e139ac44":"code","f006f13b":"code","9931db03":"markdown","2bceb158":"markdown","ae9c9f93":"markdown","9132ae28":"markdown","df502813":"markdown"},"source":{"aab9f757":"'''\nAuthor: Ritwik Biswas\nDescription: Using SVM and Adaboost Classifiers to predict whether a mushroom is edible or poisonous\n'''\nimport numpy as np \nimport pandas as pd \nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.metrics import accuracy_score #accuracy scoring\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\n","7dc05a7c":"df = pd.read_csv('..\/input\/mushrooms.csv')\ndf.head()","590c6d80":"total_size = df['class'].count()\nprint(total_size)","12a36a6f":"print(\"First entry sample:\")\nprint(df.iloc[0])","d2613f4b":"class_list = []\nfeature_list = []\n\n#Hash table for numerical encoding of features\nnum_lookup = {'a': 1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,\n              'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\nclass_lookup = {16: 'poisonus', 5: 'edible'}\ndef encode(vec):\n    '''\n    Takes an shroom feature vector and encodes it to a numerical feature space\n    '''\n    encoded_temp = []\n    for i in vec:\n        try:\n            val= num_lookup[i]\n        except:\n            val = 0\n        encoded_temp.append(val)\n    return encoded_temp\n#Encode discrete features to numerical feature space and split \nfor row in df.iterrows():\n    index, data = row\n    temp = encode(data.tolist())\n    class_list.append(temp[0])\n    feature_list.append(temp[1:])\n    \nprint(\"One data point:\")\nprint(class_list[0])\nprint(feature_list[0])","b94251ba":"training_size = int(0.9*total_size)\ntrain_class = np.array(class_list[:training_size])\ntrain_features = np.array(feature_list[:training_size])\ntest_class = np.array(class_list[training_size:])\ntest_features = np.array(feature_list[training_size:])\nprint(\"Training Length: \" + str(len(train_features)))\nprint(\"Testing Length: \" + str(len(test_features)))","b9ce1f6a":"clf_svm = SVC(kernel=\"rbf\",gamma='auto', C=1.0) \nclf_svm.fit(train_features,train_class)","7733aadd":"train_score = str(clf_svm.score(train_features,train_class))\ntest_score = str(clf_svm.score(test_features,test_class))\nprint (\"SVM Model Train Accuracy: \" + train_score[:4])\nprint (\"SVM Model Test Accuracy: \" + test_score[:4])","772f24e3":"base_model_stack = tree.DecisionTreeClassifier(min_samples_split=15)\nclf_ada = AdaBoostClassifier(n_estimators=100, base_estimator=base_model_stack)\nclf_ada.fit(train_features,train_class)","e139ac44":"train_score = str(clf_ada.score(train_features,train_class))\ntest_score = str(clf_ada.score(test_features,test_class))\nprint (\"Adaboost Model Train Accuracy: \" + train_score[:4])\nprint (\"Adaboost Forest Model Test Accuracy: \" + test_score[:4])","f006f13b":"test_shroom_1 = ['x', 'y', 'w', 't', 'p', 'f', 'c', 'n', 'n', 'e', 'e', 's', 's', 'w', 'w', 'p', 'w', 'o', 'p', 'k', 's', 'u'] # poisonous\ntest_shroom_2 = ['x', 's', 'y', 't', 'a', 'f', 'c', 'b', 'k', 'e', 'c', 's', 's', 'w', 'w', 'p', 'w', 'o', 'p', 'n', 'n', 'g'] # edible\ntest_shroom_3 = ['x', 's', 'g', 'f', 'n', 'f', 'w', 'b', 'k', 't', 'e', 's', 's', 'w', 'w', 'p', 'w', 'o', 'e', 'n', 'a', 'g'] # edible\n\n#functions to do both svm and adaboost prediction\ndef svm_predict(shroom):\n    return class_lookup[clf_svm.predict([shroom])[0]]\ndef adaboost_predict(shroom):\n    return class_lookup[clf_ada.predict([shroom])[0]]\n\n# predictions\nprint(\"Shroom 1 Prediction:\")\nprint(\"SVM: \" + svm_predict(encode(test_shroom_1)))\nprint(\"Adaboost: \" + adaboost_predict(encode(test_shroom_1)))\n\nprint(\"\\nShroom 2 Prediction:\")\nprint(\"SVM: \" + svm_predict(encode(test_shroom_2)))\nprint(\"Adaboost: \" + adaboost_predict(encode(test_shroom_2)))\n\nprint(\"\\nShroom 3 Prediction:\")\nprint(\"SVM: \" + svm_predict(encode(test_shroom_3)))\nprint(\"Adaboost: \" + adaboost_predict(encode(test_shroom_3)))","9931db03":"### SVM Classifier","2bceb158":"### Adboost Classifier (D-Tree Base Estimator)","ae9c9f93":"### Split Data into Classes\/Features and Training\/Testing","9132ae28":"### Sample Predictions","df502813":" ### Read Mushroom Data "}}