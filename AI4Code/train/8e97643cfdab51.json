{"cell_type":{"104811e5":"code","a7745967":"code","4ad6aab0":"code","7797febc":"code","7a72b265":"code","d5d6e2d4":"code","6b94f2a1":"code","d7b5262c":"code","1ba0472c":"code","3d93fcd2":"code","7e58d36c":"code","c305e3e3":"code","3f25c53b":"code","5d7c602b":"code","e0c6a149":"code","dd62b7b0":"code","aa162a8e":"code","d51b8530":"code","b060ef25":"code","77dafbd4":"code","41af2dbe":"code","eedd43c9":"code","de0bb248":"code","f9e8adc4":"code","54d68343":"code","1997924b":"code","2d46eba4":"code","b74ca107":"code","8d1a69de":"code","764e6c8b":"code","89ab7780":"code","f06a2bbf":"code","20ab8879":"code","9fe83482":"code","ac6f9b99":"code","23f4ba5e":"code","ec8cb10d":"code","34ee17e9":"code","b4103f7d":"code","d77ea378":"code","c0aea280":"code","3c8783a1":"code","7b08fd8d":"code","1351b85f":"markdown","44e9b1d8":"markdown","eac1277a":"markdown","29c406a7":"markdown","69bcdd3a":"markdown","ff16653a":"markdown","9e9c8409":"markdown","a549060b":"markdown","f776d94f":"markdown","33ff1a32":"markdown","59a4a119":"markdown","2af4f22b":"markdown","70d43a4c":"markdown","8f918b73":"markdown","223f7729":"markdown","468d5a28":"markdown","4a730b67":"markdown","2972c86f":"markdown","36348971":"markdown","b9fc6cce":"markdown","e13591d6":"markdown","d3888d17":"markdown","d5b670b6":"markdown","78f777c5":"markdown","90df5336":"markdown","c5484ef4":"markdown","4430be75":"markdown","ac702cc2":"markdown","737a6bd5":"markdown","1885ba37":"markdown","53f9860c":"markdown","1ba82018":"markdown"},"source":{"104811e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7745967":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","4ad6aab0":"train_df.columns","7797febc":" train_df.head()","7a72b265":"train_df.describe()","d5d6e2d4":"train_df.info()","6b94f2a1":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n\n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\" .format(variable,varValue))\n\n    \n    ","d7b5262c":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor n in category1:\n    bar_plot(n)","1ba0472c":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor n in category2:\n    print(\"{} \\n\".format(train_df[n].value_counts()))","3d93fcd2":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show","7e58d36c":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","c305e3e3":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by =\"Survived\", ascending = False)","3f25c53b":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by =\"Survived\", ascending = False)","5d7c602b":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by =\"Survived\", ascending = False)","e0c6a149":"# Age vs Survived\ntrain_df[[\"Age\", \"Survived\"]].groupby([\"Age\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","dd62b7b0":"# Parch vs Survied\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending = False)","aa162a8e":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for n in features:\n        # 1st quartile\n        Q1 = np.percentile(df[n], 25)\n        \n        # 3rd quartile\n        Q3 = np.percentile(df[n], 75)\n    \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier Step\n        outlier_step = IQR * 1.5\n        \n        # detect outlier and their indeces\n        outlier_list_col = df[(df[n] < Q1 - outlier_step) | (df[n] > Q3 + outlier_step)].index\n        \n    \n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","d51b8530":"train_df.loc[detect_outliers(train_df,[\"Age\" , \"SibSp\" , \"Parch\" , \"Fare\"])]","b060ef25":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\" , \"SibSp\" , \"Parch\" , \"Fare\"]) , axis = 0).reset_index(drop = True)","77dafbd4":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","41af2dbe":"train_df.head()","eedd43c9":"train_df.columns[train_df.isnull().any()]","de0bb248":"train_df.isnull().sum()","f9e8adc4":"train_df[train_df[\"Embarked\"].isnull()]","54d68343":"train_df.boxplot(column=\"Fare\", by = \"Embarked\")\nplt.show()","1997924b":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","2d46eba4":"train_df[train_df[\"Fare\"].isnull()]","b74ca107":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(test_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","8d1a69de":"list1 = [\"SibSp\",  \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")","764e6c8b":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\ng.set_ylabels(\"Survived \")\nplt.show()","89ab7780":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","f06a2bbf":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","20ab8879":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","9fe83482":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\",size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","ac6f9b99":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","23f4ba5e":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","ec8cb10d":"train_df[train_df[\"Age\"].isnull()]","34ee17e9":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","b4103f7d":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","d77ea378":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","c0aea280":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","3c8783a1":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med  ","7b08fd8d":"train_df[train_df[\"Age\"].isnull()]","1351b85f":"<a id = '14'><\/a><\/br>\n## Parch -- Survived","44e9b1d8":"<a id = '6'><\/a><\/br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived\n* Age - Survived","eac1277a":"<a id = '7'><\/a><\/br>\n# Outlier Detection","29c406a7":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","69bcdd3a":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small families have more chance to survive\n* There is a std in survival of passenger with parch = 3","ff16653a":"<a id = '5'><\/a><\/br>\n## Numerical Variable","9e9c8409":"<a id = '1'><\/a><\/br>\n# Load and Check Data","a549060b":"<a id = '16'><\/a><\/br>\n## Age -- Survived","f776d94f":"<a id = '18'><\/a><\/br>\n## Embarked -- Sex -- Pclass -- Survived","33ff1a32":"<a id = '20'><\/a><\/br>\n## Fill Missing: Age Feature","59a4a119":"* float64(2): Fare and Age\n* int64(5): Pclass, Sibsp, Parch, PassengerId and Survived\n* object(5): Name, Sex, Ticket, Cabin and Embarked","2af4f22b":"Age is not correlated with sex but it is correlated with parch, sibsp and pclass.","70d43a4c":"Fare feature seems to have correlation with survived feature **(0.26)**.\n","8f918b73":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0, 1 or 2, passenger has more chance to survive.\n* we can consider a new feature describing these categories.","223f7729":"<a id = '3'><\/a><\/br>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Age, PassengerId and Fare\n","468d5a28":"<a id = '2'><\/a><\/br>\n# Variable Description\n\n1. PasserngerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. PcClass: passenger class\n1. Name: passenger name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children\n1. Ticket: ticket number\n1.  Fare: amount of money that spent on ticket\n1.  Cabin: cabin category\n1.  Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southhampton)","4a730b67":"<a id = '10'><\/a><\/br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","2972c86f":"<a id = '19'><\/a><\/br>\n## Embarked -- Sex -- Fare -- Survived","36348971":"<a id = '4'><\/a><\/br>\n## Categorical Variable","b9fc6cce":"# Introduction\nTitanic sunk at 1912. Titanic is one of the most motorious shipwrecks in the history. During her voyage, the Titanic sank after crushing to an iceberg. There was 1502 dead of 2224 passengers.\n\n<font color = 'blue'>\nContent:\n    \n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Univariate Variable Analysis](#4)\n        * [Numerical Univariate Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Values](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [Sibsp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)","e13591d6":"<a id = '11'><\/a><\/br>\n# Visualization ","d3888d17":"<a id = '8'><\/a><\/br>\n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value\n","d5b670b6":"Q1-(Q3-Q1).1,5 \nQ3+(Q3-Q1).1,5","78f777c5":"<a id = '17'><\/a><\/br>\n## Pclass -- Survived -- Age","90df5336":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and sex can be use in training.","c5484ef4":"<a id = '12'><\/a><\/br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","4430be75":"<a id = '13'><\/a><\/br>\n## Sibsp -- Survived","ac702cc2":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age distribution for missing value of age","737a6bd5":"<a id = '9'><\/a><\/br>\n## Find Missing Value","1885ba37":"* 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","53f9860c":"<a id = '15'><\/a><\/br>\n## Pclass -- Survived","1ba82018":"* pclass is important feature for model training."}}