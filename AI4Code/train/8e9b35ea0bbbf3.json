{"cell_type":{"43e7b1c2":"code","33ed39f9":"code","344f73d7":"code","c02a7509":"code","a752ab4c":"code","3e150666":"code","c2197d70":"code","0ea937ac":"code","65e9e87e":"code","4f06bf1e":"code","fb27550f":"code","2e665df5":"code","33463f8a":"code","b3fb7334":"code","b32f407c":"code","12457b76":"code","e9c6f80c":"code","21f25483":"code","5ccf4140":"code","3ec8dd83":"code","4097853e":"code","72bf7a7b":"code","b4faaff8":"code","b188f44e":"code","8b893d12":"code","6cfb05cc":"code","d8da160e":"code","424f8625":"code","1a9b8102":"code","938d5935":"code","32544043":"code","69ebff8e":"code","eacef58e":"code","5db9f6b0":"code","6503a837":"code","df185f94":"code","3a46ea11":"code","8d2d2230":"code","5393d434":"code","a4a5fc17":"code","af4c5918":"code","61dc8237":"code","fa9480ab":"code","1db4c735":"code","62d06aef":"code","3525552f":"code","cdbc30be":"code","f149aa97":"code","d1747366":"code","ce8997d7":"code","b0e337d4":"code","44d7e427":"code","f053cd83":"code","e12978d6":"code","ec41568e":"code","3454b875":"code","f4974a69":"code","6dd7381d":"code","8f32e893":"code","ef75be4f":"code","2bd8e33b":"code","281628c0":"code","7055dcce":"code","e18c09a2":"code","7f42c53a":"code","b06b1688":"code","bc2b85c8":"code","ecd4fc24":"code","c15908bd":"code","46751b95":"code","9e861767":"code","0c44c547":"code","470c5da3":"code","1781b153":"code","89693631":"code","e1038766":"code","c684c8e0":"code","a82375e7":"code","a68a41b1":"code","17388784":"code","62402ea9":"markdown","d44faed3":"markdown","51cb5522":"markdown","52f713bd":"markdown","c1ab32d7":"markdown","c89248f2":"markdown","3a0409ec":"markdown","f3d5acd4":"markdown","de5ec327":"markdown","8eff8ea3":"markdown","e738a3c5":"markdown","a59b2d8d":"markdown","671c250d":"markdown","0acda37c":"markdown","82bf5e40":"markdown","4cd8655b":"markdown","65ed3fc4":"markdown","cdf75858":"markdown","cf5f53b7":"markdown","46904a76":"markdown","640d72fb":"markdown","697fb5e9":"markdown","e24c581b":"markdown","336ee030":"markdown","4f946c5f":"markdown","0f9b20cc":"markdown","f5a1bdb5":"markdown","c8d2c12a":"markdown","f759dd1f":"markdown","660a92ff":"markdown","b8e2def5":"markdown","295feeb0":"markdown","ebfaa37e":"markdown","5d6c0473":"markdown","9074ee7d":"markdown","35434f31":"markdown","55581818":"markdown","770d76e8":"markdown","27aeca11":"markdown","e1abe45a":"markdown","1825afd7":"markdown","36aa0d0d":"markdown","1790b596":"markdown","8729c75d":"markdown","aa856c4d":"markdown","9e3f1322":"markdown","7fa476cd":"markdown"},"source":{"43e7b1c2":"import numpy as np \nimport pandas as pd \nimport os\nfrom glob import glob\nfrom tqdm import tqdm\nimport seaborn as sns\nsns.set(style = 'dark')\nimport matplotlib.pyplot as plt","33ed39f9":"train_files_dir = glob('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/*')\ntest_files_dir = glob('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/*')","344f73d7":"train_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')","c02a7509":"train_df.head()","a752ab4c":"test_df.head()","3e150666":"train_df['sex'].fillna('unkown',inplace = True) # missing value","c2197d70":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()","0ea937ac":"train_df['sex_enc'] = enc.fit_transform(train_df.sex.astype('str'))\ntest_df['sex_enc'] = enc.transform(test_df.sex.astype('str'))","65e9e87e":"plt.figure(figsize = (12,6))\nsns.countplot(x = 'sex', hue = 'target', data = train_df)","4f06bf1e":"train_df.head()","fb27550f":"test_df.head()","2e665df5":"test_df.anatom_site_general_challenge = test_df.anatom_site_general_challenge.fillna('unknown')\ntrain_df.anatom_site_general_challenge = train_df.anatom_site_general_challenge.fillna('unknown')","33463f8a":"train_df['anatom_enc']= enc.fit_transform(train_df.anatom_site_general_challenge.astype('str'))\ntest_df['anatom_enc']= enc.transform(test_df.anatom_site_general_challenge.astype('str'))","b3fb7334":"train_df.head()","b32f407c":"test_df.head()","12457b76":"train_df['age_approx'] = train_df['age_approx'].fillna(train_df['age_approx'].mode().values[0])\ntest_df['age_approx']  = test_df['age_approx'].fillna(test_df['age_approx'].mode().values[0]) # Test data doesn't have any NaN in age_approx","e9c6f80c":"train_df['age_enc']= enc.fit_transform(train_df['age_approx'].astype('str'))\ntest_df['age_enc']= enc.transform(test_df['age_approx'].astype('str'))","21f25483":"plt.figure(figsize = (20,6))\nsns.countplot(x = 'age_approx', hue = 'target', data = train_df)","5ccf4140":"train_df.head()","3ec8dd83":"test_df.head()","4097853e":"train_df['n_images'] = train_df.patient_id.map(train_df.groupby(['patient_id']).image_name.count())\ntest_df['n_images'] = test_df.patient_id.map(test_df.groupby(['patient_id']).image_name.count())","72bf7a7b":"from sklearn.preprocessing import KBinsDiscretizer\ncategorize = KBinsDiscretizer(n_bins = 10, encode = 'ordinal', strategy = 'uniform')\ntrain_df['n_images_enc'] = categorize.fit_transform(train_df['n_images'].values.reshape(-1, 1)).astype(int).squeeze()\ntest_df['n_images_enc'] = categorize.transform(test_df['n_images'].values.reshape(-1, 1)).astype(int).squeeze()","b4faaff8":"plt.figure(figsize = (12,6))\nsns.countplot(x = 'n_images_enc', hue = 'target', data = train_df)","b188f44e":"train_df.head()","8b893d12":"test_df.head()","6cfb05cc":"train_images = train_df['image_name'].values\ntrain_sizes = np.zeros(train_images.shape[0])\nfor i, img_path in enumerate(tqdm(train_images)):\n    train_sizes[i] = os.path.getsize(os.path.join('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/train\/', f'{img_path}.jpg'))\n    \ntrain_df['image_size'] = train_sizes\n\n\ntest_images = test_df['image_name'].values\ntest_sizes = np.zeros(test_images.shape[0])\nfor i, img_path in enumerate(tqdm(test_images)):\n    test_sizes[i] = os.path.getsize(os.path.join('\/kaggle\/input\/siim-isic-melanoma-classification\/jpeg\/test\/', f'{img_path}.jpg'))\n    \ntest_df['image_size'] = test_sizes","d8da160e":"from sklearn.preprocessing import StandardScaler, MinMaxScaler\nscale = MinMaxScaler()\ntrain_df['image_size_scaled'] = scale.fit_transform(train_df['image_size'].values.reshape(-1, 1))\ntest_df['image_size_scaled'] = scale.transform(test_df['image_size'].values.reshape(-1, 1))","424f8625":"from sklearn.preprocessing import KBinsDiscretizer\ncategorize = KBinsDiscretizer(n_bins = 10, encode = 'ordinal', strategy = 'uniform')\ntrain_df['image_size_enc'] = categorize.fit_transform(train_df.image_size_scaled.values.reshape(-1, 1)).astype(int).squeeze()\ntest_df['image_size_enc'] = categorize.transform(test_df.image_size_scaled.values.reshape(-1, 1)).astype(int).squeeze()","1a9b8102":"plt.figure(figsize = (12,6))\nsns.countplot(x = 'image_size_enc', hue = 'target', data = train_df)","938d5935":"train_df.head()","32544043":"test_df.head()","69ebff8e":"train_mean_color = pd.read_csv('\/kaggle\/input\/mean-color-isic2020\/train_color.csv')\ntest_mean_color = pd.read_csv('\/kaggle\/input\/mean-color-isic2020\/test_color.csv')","eacef58e":"train_df['mean_color'] = train_mean_color.values\ntest_df['mean_color'] = test_mean_color.values","5db9f6b0":"from sklearn.preprocessing import KBinsDiscretizer\ncategorize = KBinsDiscretizer(n_bins = 10, encode = 'ordinal', strategy = 'uniform')\ntrain_df['mean_color_enc'] = categorize.fit_transform(train_df['mean_color'].values.reshape(-1, 1)).astype(int).squeeze()\ntest_df['mean_color_enc'] = categorize.transform(test_df['mean_color'].values.reshape(-1, 1)).astype(int).squeeze()","6503a837":"plt.figure(figsize = (12,6))\nsns.countplot(x = 'mean_color_enc', hue = 'target', data = train_df)","df185f94":"train_df['age_id_min']  = train_df['patient_id'].map(train_df.groupby(['patient_id']).age_approx.min())\ntrain_df['age_id_max']  = train_df['patient_id'].map(train_df.groupby(['patient_id']).age_approx.max())\n\ntest_df['age_id_min']  = test_df['patient_id'].map(test_df.groupby(['patient_id']).age_approx.min())\ntest_df['age_id_max']  = test_df['patient_id'].map(test_df.groupby(['patient_id']).age_approx.max())","3a46ea11":"def show_bar_plot(df, figsize = (12,6)):\n \n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    def show_values_on_bars(axs, h_v=\"v\", space=0.4, v_space = 0.02, figsize = (12,6)):\n        def _show_on_single_plot(ax):\n            if h_v == \"v\":\n                for p in ax.patches:\n                    _x = p.get_x() + p.get_width() \/ 2\n                    _y = p.get_y() + p.get_height()+ v_space\n                    value = float(p.get_height())\n                    ax.text(_x, _y, f'{value:.1f}', ha=\"center\") \n            elif h_v == \"h\":\n                for p in ax.patches:\n                    _x = p.get_x() + p.get_width() + float(space)\n                    _y = p.get_y() + p.get_height()+ v_space\n                    value = int(p.get_width())\n                    ax.text(_x, _y, value, ha=\"left\")\n\n        if isinstance(axs, np.ndarray):\n            for idx, ax in np.ndenumerate(axs):\n                _show_on_single_plot(ax)\n        else:\n            _show_on_single_plot(axs)\n            \n\n#     fig = plt.gcf()\n#     fig.set_size_inches(12, 8)\n    plt.figure(figsize = figsize)\n    sns.set()\n    plt.title('Probability')\n\n    prob = df*100\n    pal = sns.color_palette(palette='Blues_r', n_colors=len(prob))\n    rank = prob.values.argsort().argsort() \n    #g=sns.barplot(x='day',y='tip',data=groupedvalues, palette=np.array(pal[::-1])[rank])\n    br = sns.barplot(prob.index, prob.values, palette=np.array(pal[::-1])[rank])\n    show_values_on_bars(br, \"v\", .50)\n    plt.show()          ","8d2d2230":"def kdeplot( df,col_name, figsize = (12,6)):\n\n    plt.figure(figsize = figsize)\n    sns.kdeplot(df[col_name][df.target==0], shade = True, color = 'b', label = '0')\n    sns.kdeplot(df[col_name][df.target==1], shade = True, color = 'r', label = '1')\n    plt.show()","5393d434":"train_df['age_approx_mean_enc'] = train_df['age_approx'].map(train_df.groupby(['age_approx'])['target'].mean())\ntest_df['age_approx_mean_enc'] = test_df['age_approx'].map(train_df.groupby(['age_approx'])['target'].mean())","a4a5fc17":"show_bar_plot(train_df.groupby(['age_approx'])['target'].mean(), (20,10))","af4c5918":"col_name = 'age_approx'\nkdeplot(train_df,col_name, figsize = (16,8))","61dc8237":"col_name = 'age_approx_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","fa9480ab":"train_df.head()","1db4c735":"test_df.head()","62d06aef":"train_df['sex_mean_enc'] = train_df.sex_enc.map(train_df.groupby(['sex_enc'])['target'].mean())\ntest_df['sex_mean_enc'] = test_df.sex_enc.map(train_df.groupby(['sex_enc'])['target'].mean())","3525552f":"show_bar_plot(train_df.groupby(['sex'])['target'].mean())","cdbc30be":"col_name = 'sex_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","f149aa97":"col_name = 'sex_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","d1747366":"train_df['n_images_mean_enc'] = train_df['n_images_enc'].map(train_df.groupby(['n_images_enc'])['target'].mean())\ntest_df['n_images_mean_enc'] = test_df['n_images_enc'].map(train_df.groupby(['n_images_enc'])['target'].mean())","ce8997d7":"show_bar_plot(train_df.groupby(['n_images_enc'])['target'].mean())","b0e337d4":"col_name = 'n_images'\nkdeplot(train_df,col_name, figsize = (16,8))","44d7e427":"col_name = 'n_images_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","f053cd83":"col_name = 'n_images_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","e12978d6":"train_df['image_size_mean_enc'] = train_df['image_size_enc'].map(train_df.groupby(['image_size_enc'])['target'].mean())\ntest_df['image_size_mean_enc'] = test_df['image_size_enc'].map(train_df.groupby(['image_size_enc'])['target'].mean())","ec41568e":"show_bar_plot(train_df.groupby(['image_size_enc'])['target'].mean())","3454b875":"col_name = 'image_size'\nkdeplot(train_df,col_name, figsize = (16,8))","f4974a69":"col_name = 'image_size_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","6dd7381d":"col_name = 'image_size_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","8f32e893":"train_df['anatom_mean_enc'] = train_df['anatom_enc'].map(train_df.groupby(['anatom_enc'])['target'].mean())\ntest_df['anatom_mean_enc'] = test_df['anatom_enc'].map(train_df.groupby(['anatom_enc'])['target'].mean())","ef75be4f":"show_bar_plot(train_df.groupby(['anatom_enc'])['target'].mean())","2bd8e33b":"col_name = 'anatom_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","281628c0":"col_name = 'anatom_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","7055dcce":"train_df['mean_color_mean_enc'] = train_df['mean_color_enc'].map(train_df.groupby(['mean_color_enc'])['target'].mean())\ntest_df['mean_color_mean_enc'] = test_df['mean_color_enc'].map(train_df.groupby(['mean_color_enc'])['target'].mean())","e18c09a2":"show_bar_plot(train_df.groupby(['mean_color_enc'])['target'].mean())","7f42c53a":"col_name = 'mean_color'\nkdeplot(train_df,col_name, figsize = (16,8))","b06b1688":"col_name = 'mean_color_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","bc2b85c8":"col_name = 'mean_color_mean_enc'\nkdeplot(train_df,col_name, figsize = (16,8))","ecd4fc24":"corr = train_df.corr(method = 'pearson')\ncorr = corr.abs()\ncorr.style.background_gradient(cmap='inferno')","c15908bd":"# plt.figure(figsize = (20,20))\n# sns.heatmap(corr, annot = True)","46751b95":"corr = test_df.corr(method = 'pearson')\ncorr = corr.abs()\ncorr.style.background_gradient(cmap='inferno')","9e861767":"test_df.columns","0c44c547":"features = [\n            'age_approx',\n#             'age_enc',\n#             'age_approx_mean_enc',\n            'age_id_min',\n            'age_id_max',\n            'sex_enc',\n#             'sex_mean_enc',\n            'anatom_enc',\n#             'anatom_mean_enc',\n            'n_images',\n#             'n_images_mean_enc',\n#             'n_images_enc',\n            'image_size_scaled',\n#             'image_size_enc',\n#             'image_size_mean_enc',\n            'mean_color',\n#             'mean_color_enc', \n#             'mean_color_mean_enc'\n           ]","470c5da3":"trlm_df = pd.read_csv('..\/input\/landscape\/train40Features.csv')\ntelm_df = pd.read_csv('..\/input\/landscape\/test40Features.csv')\n\nX = pd.concat([train_df[features], trlm_df.iloc[:,3:]], axis=1)\ny = train_df['target']\n\nX_test = pd.concat([test_df[features],telm_df.iloc[:,3:]], axis=1)","1781b153":"# Load libraries\nfrom pandas import read_csv\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import pyplot\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVR, SVC\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom sklearn.linear_model import SGDRegressor, BayesianRidge\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold","89693631":"model = XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.8, gamma=1, gpu_id=-1,\n             importance_type='gain', interaction_constraints=None,\n             learning_rate=0.002, max_delta_step=0, max_depth=10,\n             min_child_weight=1, missing=None, monotone_constraints=None,\n             n_estimators=700, n_jobs=-1, nthread=-1, num_parallel_tree=1,\n             objective='binary:logistic', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, silent=True, subsample=0.8,\n             tree_method=None, validate_parameters=False, verbosity=None)\n\nkfold = StratifiedKFold(n_splits=5, random_state=1001, shuffle=True)\ncv_results = cross_val_score(model, X, y, cv=kfold, scoring='roc_auc', verbose = 3)\ncv_results.mean()","e1038766":"xgb = XGBRegressor(base_score=0.5, booster=None, colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.8, gamma=1, gpu_id=-1,\n             importance_type='gain', interaction_constraints=None,\n             learning_rate=0.002, max_delta_step=0, max_depth=10,\n             min_child_weight=1, missing=None, monotone_constraints=None,\n             n_estimators=700, n_jobs=-1, nthread=-1, num_parallel_tree=1,\n             objective='binary:logistic', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, silent=True, subsample=0.8,\n             tree_method=None, validate_parameters=False, verbosity=None)\n\nxgb.fit(X,y)\npred_xgb = xgb.predict(X_test)","c684c8e0":"feature_important = xgb.get_booster().get_score(importance_type='weight')\nkeys = list(feature_important.keys())\nvalues = list(feature_important.values())\n\ndata = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\nplt.figure(figsize= (12,10))\nsns.barplot(x = data.score , y = data.index, orient = 'h', palette = 'Blues_r')","a82375e7":"from sklearn.decomposition import PCA\n\nn_components = 2\npca = PCA(n_components=n_components)\nX_pca = pca.fit_transform(X)\n\npca_df = pd.DataFrame({'x_pca_0':X_pca[:,0],\n             'x_pca_1':X_pca[:,1],\n             'y':y})","a68a41b1":"plt.figure(figsize = (10,10))\nsns.scatterplot(\n    x=\"x_pca_0\", y=\"x_pca_1\",\n    hue=\"y\",\n    data=pca_df,\n    legend=\"full\",\n    alpha=0.9\n)","17388784":"sub = pd.DataFrame({'image_name':test_df.image_name.values,\n                    'target':pred_xgb})\nsub.to_csv('submission.csv',index = False)","62402ea9":"# Mean Color(Used previously saved data)","d44faed3":"# Melanoma Prediction Using Tabular Data\nIn this solely based on feature engineering and using Machine learning Model to detect Skin Cancer. No Deep Learning Model has been used here.\n\n**Special Thank to [oliver](https:\/\/www.kaggle.com\/ogrellier) for sharing some key features in the data**","51cb5522":"## Before Mean Encoding","52f713bd":"## Age","c1ab32d7":"## After Mean Encoding","c89248f2":"## Probability of melanoma with respect to Number of Image per Patient","3a0409ec":"## Anatom General Challenge","f3d5acd4":"# Training Xgboost\n## Parameters were tunned using Gridsearch","de5ec327":"# Selecting Features","8eff8ea3":"# Scaling Image Size","e738a3c5":"## After Mean Encoding","a59b2d8d":"## After Encoding","671c250d":"# Label Encoding","0acda37c":"# I get rid of some features for best LB score","82bf5e40":"# Correlation Matrix\nWe can extract some interesting features from Corr Matrix. I leave that to the reader to find out some tricky features from Corr Matrix. Let me know you find one. \n\n**Spoiler Alert:** You can easily get **.80** just playing with these features","4cd8655b":"# Images Per Patient","65ed3fc4":"# Plot: Feature Importance","cdf75858":"## Sex","cf5f53b7":"# Prediction","46904a76":"## Before encoding","640d72fb":"## Probability of melanoma with respect to Sex","697fb5e9":"## Before Mean Encoding","e24c581b":"# Age","336ee030":"## Probability of melanoma with respect to Image Size","4f946c5f":"# Categorize Number of Images Per Patient","0f9b20cc":"## Plotting Barplot with number","f5a1bdb5":"# Mean Encoding is Angel or Devil?\n\nAs you can see mean encoding has some interesting effect on data. But there is a good chnace we will end up overfitting because we're depending on target of train data. What if train and test data have different distribution??? ","c8d2c12a":"## Probability of melanoma with respect to Anatom General Challege","f759dd1f":"## Probability of melanoma with respect to Age","660a92ff":"## n_images","b8e2def5":"There might be two possible reasons behind LB score differing from the CV score .\n1. Only 30% test data is used in Public LB\n2. Our Model has been ovefitted\n\nPlease let me know if I can improve my results. \n## Thank You Very Much","295feeb0":"## After Encoding","ebfaa37e":"# Dimension Reduction (PCA)","5d6c0473":"# Mean Encoding","9074ee7d":"## Anatom_site_general_challenge","35434f31":"# Categorize Mean Color","55581818":"# Categorize Image Size","770d76e8":"## After encoding","27aeca11":"## Image Size","e1abe45a":"## Sex","1825afd7":"## After Mean Encoding","36aa0d0d":"Though it is difficult to predict location of melanoma class from  plot but we look carefully we'll be able to notice that there are some regions where there is no melanoma class at all.","1790b596":"# Image Size ","8729c75d":"## After Mean Encoding","aa856c4d":"# Min-Max age of Patient","9e3f1322":"## Probability of melanoma with respect to Mean Color","7fa476cd":"# Mean Color"}}