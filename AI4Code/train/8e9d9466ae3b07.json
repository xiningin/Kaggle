{"cell_type":{"ee738146":"code","23125ebb":"code","82406b0b":"code","5ec7e5c5":"code","df88708d":"code","7c34a9a4":"code","311465c5":"code","ee90d463":"code","5e865fc7":"code","2847809a":"code","2293ec75":"code","d0ddb071":"code","ac285554":"code","b93320e6":"code","3dc39a94":"code","c6b370e0":"code","c8afe8fa":"code","c3f7ad8a":"code","084b5eb1":"code","2acee35e":"code","6f44548e":"code","f032ff32":"code","59944cc4":"code","83088b86":"code","9290a830":"code","f3bf3f82":"code","09faaaef":"code","4c58e436":"code","a6843c0a":"code","efcb38a6":"code","c5fa3e86":"code","79795c74":"code","cd324400":"code","d00ff551":"code","19b4606e":"code","a862a3a6":"code","495d3de7":"code","79993395":"markdown","aa0d1d6e":"markdown","c1dbd94d":"markdown"},"source":{"ee738146":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23125ebb":"import matplotlib.pyplot as plt \nimport seaborn as sns \nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re,string,unicodedata\nfrom nltk.stem import WordNetLemmatizer,PorterStemmer\nimport os\nimport gc\nfrom nltk.tokenize import word_tokenize\nfrom collections import  Counter\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","82406b0b":"df = pd.read_csv(\"\/kaggle\/input\/political-advertisements-from-facebook\/fbpac-ads-en-US.csv\")","5ec7e5c5":"df.head(3)","df88708d":"df.columns","7c34a9a4":"fe = ['title','message','paid_for_by']\ntext_df = df[fe]\ntext_df.head(3)","311465c5":"text_df.shape","ee90d463":"stop=set(stopwords.words('english'))\n\ndef build_list(df,col=\"title\"):\n    corpus=[]\n    lem=WordNetLemmatizer()\n    stop=set(stopwords.words('english'))\n    new= df[col].dropna().str.split()\n    new=new.values.tolist()\n    corpus=[lem.lemmatize(word.lower()) for i in new for word in i if(word) not in stop]\n    \n    return corpus","5e865fc7":"corpus=build_list(text_df)\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:10]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)","2847809a":"plt.figure(figsize=(9,7))\nsns.barplot(x=y,y=x)\nplt.title(\"most common word in title\")","2293ec75":"corpus=build_list(text_df,\"paid_for_by\")\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:10]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)\n        \nplt.figure(figsize=(9,7))\nsns.barplot(x=y,y=x)\nplt.title(\"most common word in paid_for_by\")","d0ddb071":"corpus=build_list(text_df,\"message\")\ncounter=Counter(corpus)\nmost=counter.most_common()\nx=[]\ny=[]\nfor word,count in most[:10]:\n    if (word not in stop) :\n        x.append(word)\n        y.append(count)\n        \nplt.figure(figsize=(9,7))\nsns.barplot(x=y,y=x)\nplt.title(\"most common word in message\")","ac285554":"def plot_count(feature, title,df, size=1, show_percents=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size, 4))\n    total = float(len(df))\n    g = sns.countplot(df[feature],order = df[feature].value_counts().index[0:20], palette='Set3')\n    g.set_title(\"Number of {}\".format(title))\n    if (size > 2):\n        plt.xticks(rotation=90, size=10)\n    if(show_percents):\n        for p in ax.patches:\n            height = p.get_height()\n            ax.text(p.get_x() + p.get_width()\/2.,\n                   height + 3, '{:1.2f}%'.format(100*height\/total),\n                   ha=\"center\")\n    ax.set_xticklabels(ax.get_xticklabels());\n    plt.show()","b93320e6":"plot_count('title','Title countplot', text_df, 3.5)","3dc39a94":"plot_count('message','message countplot', text_df, 3.5)","c6b370e0":"plot_count('paid_for_by','paid_for_by countplot', text_df, 3.5)","c8afe8fa":"def clean(text):\n    text = text.fillna(\"fillna\").str.lower()\n    text = text.map(lambda x: re.sub('\\\\n',' ',str(x)))\n    text = text.map(lambda x: re.sub(\"\\[\\[User.*\",'',str(x)))\n    text = text.map(lambda x: re.sub(\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\",'',str(x)))\n    text = text.map(lambda x: re.sub(\"\\(http:\/\/.*?\\s\\(http:\/\/.*\\)\",'',str(x)))\n    return text","c3f7ad8a":"text_df['title'] = clean(text_df['title'])\ntext_df['message'] = clean(text_df['message'])\ntext_df['paid_for_by'] = clean(text_df['paid_for_by'])","084b5eb1":"stemmer = PorterStemmer()\ndef stem_text(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            word = stemmer.stem(i.strip())\n            final_text.append(word)\n    return \" \".join(finan_text)","2acee35e":"plt.figure(figsize = (20, 20))\nwc = WordCloud(max_words=1500, width=1600,height = 800 , stopwords = STOPWORDS).generate(\" \".join(text_df.title))\nplt.imshow(wc , interpolation = 'bilinear')","6f44548e":"plt.figure(figsize = (20, 20))\nwc = WordCloud(max_words=1500, width=1600,height = 800 , stopwords = STOPWORDS).generate(\" \".join(text_df.message))\nplt.imshow(wc , interpolation = 'bilinear')","f032ff32":"plt.figure(figsize = (20, 20))\nwc = WordCloud(max_words=1500, width=1600,height = 800 , stopwords = STOPWORDS).generate(\" \".join(text_df.paid_for_by))\nplt.imshow(wc , interpolation = 'bilinear')","59944cc4":"\nimport spacy \nnlp = spacy.load('en_core_web_lg')","83088b86":"def text_entity(text):\n    doc = nlp(text)\n    for ent in doc.ents:\n        print(f'Entity: {ent}, Label: {ent.label_}, {spacy.explain(ent.label_)}')","9290a830":"text_entity(text_df['message'][10])\n","f3bf3f82":"first = text_df['message'][50]\ndoc = nlp(first)\nspacy.displacy.render(doc, style='ent',jupyter=True)","09faaaef":"second = text_df['message'][130]\ndoc = nlp(second)\nspacy.displacy.render(doc, style='ent',jupyter=True)","4c58e436":"third = text_df['message'][1500]\ndoc = nlp(third)\nspacy.displacy.render(doc, style='ent',jupyter=True)","a6843c0a":"first = text_df['message'][50]\ndoc = nlp(first)\nspacy.displacy.render(doc, style='ent',jupyter=True)\n\nfor idx, sentence in enumerate(doc.sents):\n    for noun in sentence.noun_chunks:\n        print(f\"sentence {idx+1} has noun chunk '{noun}'\")","efcb38a6":"txt = text_df['message'][1500]\ndoc = nlp(txt)\nspacy.displacy.render(doc, style='ent', jupyter=True)\n\nfor token in doc:\n    print(token, token.pos_)\n","c5fa3e86":"df_ = text_df['message'].str.cat(sep=' ')\n\nmax_length = 1000000-1\ndf_ =  df_[:max_length]\n\nimport re\nurl_reg  = r'[a-z]*[:.]+\\S+'\ndf_   = re.sub(url_reg, '', df_)\nnoise_reg = r'\\&amp'\ndf_   = re.sub(noise_reg, '', df_)","79795c74":"doc = nlp(df_)\nitems_of_interest = list(doc.noun_chunks)\nitems_of_interest = [str(x) for x in items_of_interest]\ndf_nouns = pd.DataFrame(items_of_interest, columns=[\"facebook\"])\nplt.figure(figsize=(5,4))\nsns.countplot(y=\"facebook\",\n             data=df_nouns,\n             order=df_nouns[\"facebook\"].value_counts().iloc[:10].index)\nplt.show()","cd324400":"text_df.head(3)","d00ff551":"distri = text_df['message'][150]\ndoc = nlp(distri)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","19b4606e":"da = text_df['message'][2500]\ndoc = nlp(da)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","a862a3a6":"_ = text_df['message'][561]\ndoc = nlp(_)\noptions = {'compact': True, 'bg': '#09a3d5',\n           'color': 'white', 'font': 'Trebuchet MS'}\nspacy.displacy.render(doc, jupyter=True, style='dep', options=options)","495d3de7":"for token in doc:\n    print(f\"token: {token.text},\\t dep: {token.dep_},\\t head: {token.head.text},\\t pos: {token.head.pos_},\\\n    ,\\t children: {[child for child in token.children]}\")","79993395":"# Common Word and Sentence Visualization","aa0d1d6e":"# WordCount Visualization","c1dbd94d":" # Spacy Message Analyze"}}