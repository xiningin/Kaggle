{"cell_type":{"a4dcf5bd":"code","9c705447":"code","cd1552e0":"code","f22efc10":"code","88390eb1":"code","f9d75bd6":"code","c4a069e0":"code","c2709f7b":"code","63a38ec0":"code","8834e305":"code","941e24be":"code","739354a5":"code","328905ab":"code","f8178474":"code","a17af334":"markdown","b41b201d":"markdown","954ce4ef":"markdown","ef659b9a":"markdown"},"source":{"a4dcf5bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c705447":"import numpy as np\nimport pandas as pd\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/mf-accelerator\/contest_test.csv\", index_col=\"ID\")\nsubm_df = pd.read_csv(\"\/kaggle\/input\/mf-accelerator\/sample_subm.csv\", index_col=\"ID\")\ndf = pd.read_csv(\"\/kaggle\/input\/mf-accelerator\/contest_train.csv\", index_col=\"ID\")\n\ndf.head()","cd1552e0":"%matplotlib inline\n_ = df[\"TARGET\"].plot.hist()","f22efc10":"feature_n = [col for col in df if col.startswith('FEATURE')]\n\nlen_df = len(df)\nlen_test_df = len(test_df)\n\ndf = df.fillna(df.median())\ntest_df = test_df.fillna(test_df.median())\n\n\nmerged_df = pd.concat([df, test_df], axis=0)\nmerged_df = merged_df.fillna(merged_df.median())\nassert len_df + len_test_df == len(merged_df)\n\ndumm_columns = []\ndrop_columns = []\nnorm_columns = []\n\none_hot = pd.get_dummies(merged_df[\"TARGET\"].astype(int), prefix=\"TARGET\")\nmerged_df = one_hot.join(merged_df)\n\nfor feature in feature_n:\n        if len(merged_df[feature].unique()) == 1:\n            drop_columns.append(feature)\n            merged_df = merged_df.drop(feature, axis=1)\n        elif 2 < len(df[feature].unique()) <= 10:\n            dumm_columns.append(feature)\n            one_hot = pd.get_dummies(merged_df[feature], prefix=feature)\n            merged_df = merged_df.join(one_hot)\n            merged_df = merged_df.drop(feature, axis=1)\n        else:\n            norm_columns.append(feature)\n            merged_df[feature] = (merged_df[feature] - merged_df[feature].mean()) \/ merged_df[feature].std()\n\ndf = merged_df.iloc[:len_df]\ntest_df = merged_df.iloc[len_df:]\n\ndf.head()","88390eb1":"#OVERSAMPLING\ncount_class_0, count_class_1, count_class_2 = df.TARGET.value_counts()\n\ndf_class_0 = df[df[\"TARGET\"] == 0]\ndf_class_1 = df[df[\"TARGET\"] == 1]\ndf_class_2 = df[df[\"TARGET\"] == 2]\n\ndf_class_1_over = df_class_1.sample(count_class_0, replace=True)\ndf_class_2_over = df_class_2.sample(count_class_0, replace=True)\n\ndf = pd.concat([df_class_0, df_class_1_over, df_class_2_over], axis=0)\n\n_ = df[\"TARGET\"].plot.hist()","f9d75bd6":"import seaborn as sns\n\nfeature_n = [col for col in df if col.startswith('FEATURE')]\ndf = df.fillna(df.median())\n\nfor feature in feature_n:\n    if len(df[feature].unique()) == 1:\n        df = df.drop(feature, axis=1)\n\ncorr = df.corr()\n\n#fig, ax = plt.subplots(figsize=(20, 10))\n\nnumbers = np.array(list(range(len(df))))\n\n# plot the heatmap\n_ = sns.heatmap(corr)","c4a069e0":"feature_n = [col for col in df if col.startswith('FEATURE')]\n\nfor i, feature in enumerate(feature_n):\n    print (i, len(df[feature].unique()))\n\n#noncategorial features [0:235], categorial [235:] (359)","c2709f7b":"from sklearn.model_selection import train_test_split\n\nX = df.drop([col for col in df if col.startswith(\"TARGET\")], axis=1)\n\nY = df[\"TARGET\"]\n\n#print (X.head())\n\nX_train, X_test, Y_train, Y_test, = train_test_split(X, Y, test_size=0.2, random_state=42)\n\nprint (X_train.shape, Y_train.shape)\nprint (X_test.shape, Y_test.shape)","63a38ec0":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=20, random_state=42)\n\ndata_for_pca = X_train.to_numpy()[:,0:235]\n\npca.fit(data_for_pca)\n\ncomponents = pca.components_\n\n# noncategorical to pca\nX_nc = X_train.to_numpy()[:, 0:235] @ components.T #noncatecorial_features\nX_ca = X_train.to_numpy()[:, 235:] #categorial features\nX_train = np.concatenate([X_nc, X_ca], axis=1)\n\nX_nc = X_test.to_numpy()[:, 0:235] @ components.T #noncatecorial_features\nX_ca = X_test.to_numpy()[:, 235:] #categorial features\nX_test = np.concatenate([X_nc, X_ca], axis=1)","8834e305":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier()\n\ncat.fit(X_train, Y_train)","941e24be":"from sklearn.metrics import confusion_matrix\nfrom matplotlib import pyplot as plt\n\npredict = cat.predict(X_test)\n\nconf_mat = confusion_matrix(y_true=Y_test, y_pred=predict)\n\nprint('Confusion matrix:\\n', conf_mat)\n\nlabels = ['Class 0', 'Class 1', 'Class 2']\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(conf_mat, cmap=plt.cm.Blues)\nfig.colorbar(cax)\nax.set_xticklabels([''] + labels)\nax.set_yticklabels([''] + labels)\nplt.xlabel('Predicted')\nplt.ylabel('Expected')\nplt.show()","739354a5":"from sklearn.metrics import f1_score\n\npredict = cat.predict(X_test)\n\nf1_score(y_true=Y_test, y_pred=predict, average=\"macro\")","328905ab":"test_df.head()","f8178474":"X_test = test_df.to_numpy()\n\nX_nc = X_test[:, 0:235] @ components.T #noncatecorial_features\nX_ca = X_test[:, 235:] #categorial features\nX_test = np.concatenate([X_nc, X_ca], axis=1)\n\npredict = cat.predict(X_test)","a17af334":"\u0415\u0441\u043b\u0438 \u044f \u043d\u0438\u0433\u0434\u0435 \u043d\u0435 \u043e\u0448\u0438\u0431\u0441\u044f, \u0442\u043e \u0441\u043a\u043e\u0440 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u0439. \u041a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c \u043f\u043e\u043f\u044b\u0442\u043a\u0438, \u043d\u0435 \u0443\u0441\u043f\u0435\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\u044e","b41b201d":"\u041c\u044b \u0432\u0438\u0434\u0435\u043b\u0438 \u0447\u0442\u043e \u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0435\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441. \u041c\u0435\u0442\u0440\u0438\u043a\u0430 f1_score \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0437\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b oversampling \u0447\u0442\u043e \u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0435 \u0441\u043c\u0435\u0449\u0430\u043b\u0430\u0441\u044c \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.","954ce4ef":"\u042f \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043b, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043c\u0430\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u043e \u043d\u0430\u0432\u0435\u0440\u043d\u043e \u0432 \u043d\u0451\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043b onehot encoding \u043a \u0442\u0430\u043a\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c. \u0421\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b.\n\n\u0427\u0442\u043e\u0431\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 onehot encoding'\u0430 \u0434\u043b\u044f \u0442\u0440\u0435\u0439\u043d\u0430 \u0438 \u0442\u0435\u0441\u0442\u0430 \u0431\u044b\u043b\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c, \u044f \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u043b \u0438\u0445, \u0430 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f onehot encoding'\u0430 \u0440\u0430\u0437\u044a\u0435\u0434\u0438\u043d\u044f\u043b \u043e\u0431\u0440\u0430\u0442\u043d\u043e.","ef659b9a":"\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0444\u0438\u0447\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u043e \u0444\u0438\u0447\u0435\u0439 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c. \u0422\u0430\u043a \u043a\u0430\u043a \u044f \u043d\u0435 \u0437\u043d\u0430\u044e \u043a\u0430\u043a\u0438\u0435 \u0444\u0438\u0447\u0438 \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0447\u0442\u043e, \u0442\u043e \u044f \u043f\u043e\u0434\u0443\u043c\u0430\u043b \u0447\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 - \u0443\u0441\u0440\u0435\u0434\u043d\u0438\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u043e\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u0447\u0438. \u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c - \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0430 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0434\u0438\u0441\u043f\u0435\u0440\u0441\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439.\n\n\u041a \u043c\u0430\u0442\u0440\u0438\u0446\u0435 onehot \u044f \u0442\u0430\u043a\u0438\u0445 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043b. [0:235] - \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 [0:360] - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438."}}