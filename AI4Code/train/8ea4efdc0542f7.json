{"cell_type":{"9bb5fff5":"code","8c5bcc60":"code","4e492ceb":"code","bfecfff4":"code","25ca2f68":"code","68f5cfa1":"code","714b28b1":"code","8588cd8d":"code","ae227cfe":"code","aaff7957":"code","97800509":"code","04411a4f":"code","0d94d4d3":"code","0c75e79c":"code","ee972b28":"code","7055f1d1":"code","05ec9c95":"code","6dac9d08":"code","25e2271a":"code","405f23ac":"markdown","15e389e7":"markdown","748a171a":"markdown","d7ff857e":"markdown","a3c50954":"markdown","20c74540":"markdown","f9c8e1fa":"markdown","6abf7f26":"markdown"},"source":{"9bb5fff5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8c5bcc60":"covid_19_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n#open_line_list = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv')\n\n#confirmed = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\n#deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\n#recovered = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\n#line_list_data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv')","4e492ceb":"# Format and extract items\n\nindi_date_list, confirmed_list, deaths_list, recovered_list, current_infected_list = [],[],[],[],[]\ndate_list = []\nsavedMonth = 0\nconfirmed, deaths, recovered = 0, 0, 0\nfor i in range(len(covid_19_data)):\n    date = covid_19_data['ObservationDate'][i]\n    inner_date_list = date.split('\/')\n    year = inner_date_list[2]\n    month = inner_date_list[0]\n    month = int(month)\n    day = inner_date_list[1]\n    day = int(day)\n    confirmed += covid_19_data['Confirmed'][i]\n    deaths += covid_19_data['Deaths'][i]\n    recovered += covid_19_data['Recovered'][i]\n    if savedMonth == month:\n        if day % 5 == 0:\n            indiDate = str(day)\n        else:\n            indiDate = ''\n    else:\n        savedMonth = month\n        indiDate = str(month)+' \/ '+str(day)\n    if i == 0 or date_list[-1] != date:\n        date_list.append(date) \n        indi_date_list.append(indiDate)\n        \n    if (i < len(covid_19_data) - 1 and covid_19_data['ObservationDate'][i + 1] != date) or i == len(covid_19_data) - 1:\n        current_infected = confirmed - deaths - recovered\n        confirmed_list.append(confirmed)\n        deaths_list.append(deaths)\n        recovered_list.append(recovered)\n        current_infected_list.append(current_infected)\n        confirmed, deaths, recovered = 0, 0, 0\n        \n# Display\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 7), dpi=100)\nplt.title('Global')\nplt.xlabel('Date')\nplt.ylabel('Number of people')\nplt.plot(confirmed_list, label='Confirmed', color='purple')\nplt.plot(deaths_list, label='Deaths', color='r')\nplt.plot(recovered_list, label='Recovered', color='b')\nplt.bar(range(len(indi_date_list)), current_infected_list, label='Active', color='y')\nx = np.arange(len(indi_date_list))\nplt.xticks(x[:], indi_date_list[:], rotation=-90)\nplt.legend()\nplt.grid(True)\nplt.show()\n\nprint('{}\/{}\/{}'.format(year, month, day))\nprint('Confirmed:{}'.format(int(confirmed_list[-1])))\nprint('Deaths:{}'.format(int(deaths_list[-1])))\nprint('Recovered:{}'.format(int(recovered_list[-1])))\nprint('Active:{}'.format(int(current_infected_list[-1])))","bfecfff4":"# max dimension for regression analysis\nmax_dimension = 7\n\n# predict days\npredict_days = 180","25ca2f68":"# Format data\n\ntrain_list = []\nconfirmed, deaths, recovered = 0, 0, 0\nfor i in range(len(covid_19_data)):\n    date = covid_19_data['ObservationDate'][i]\n    inner_date_list = date.split('\/')\n    y = inner_date_list[2]\n    m = inner_date_list[0]\n    d = inner_date_list[1]\n    confirmed += int(covid_19_data['Confirmed'][i])\n    deaths += int(covid_19_data['Deaths'][i])\n    recovered += int(covid_19_data['Recovered'][i])\n    if i == 0:\n        saved_date = d\n    if i == len(covid_19_data) - 1:\n        next_d = ''\n    else:\n        next_date = covid_19_data['ObservationDate'][i + 1]\n        next_date_list = next_date.split('\/')\n        next_y = next_date_list[2]\n        next_m = next_date_list[0]\n        next_d = next_date_list[1]\n    if next_y != y or next_m != m or next_d != d:\n        current_infected = confirmed - deaths - recovered\n        inner_dic = {'date':date,\n#                     'num_days':i,\n                     'confirmed':confirmed,\n                     'deaths':deaths,\n                     'recovered':recovered,\n                     'current_infected':current_infected}\n        train_list.append(inner_dic)\n        saved_date = date\n        confirmed, deaths, recovered = 0, 0, 0\n\ntrain_list = pd.DataFrame(train_list)\ntrain_list","68f5cfa1":"# Preprocessing\n\nimport datetime\n\nlast_date = train_list['date'][len(train_list) - 1]\ninner_date_list = last_date.split('\/')\nyear = int(inner_date_list[2])\nmonth = int(inner_date_list[0])\nday = int(inner_date_list[1])\ndt_last = datetime.date(year, month, day)\nadd_date_list = []\nfor i in range(predict_days):\n    new_date = dt_last + datetime.timedelta(days = i + 1)\n    y, m, d = new_date.year, new_date.month, new_date.day\n    if m < 10:\n        m = '0' + str(m)\n    if d < 10:\n        d = '0' + str(d)\n    new_date = str(m)+'\/'+str(d)+'\/'+str(y)\n    add_date_list.append(new_date)\nadd_date_list = np.array(add_date_list)\n\n# Nonlinear regression analysis\n\nimport matplotlib.dates as mdates\n\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['confirmed'])\nx1 = np.arange(len(x))\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='y') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Confirmed')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","714b28b1":"fig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['deaths'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='y') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Deaths')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","8588cd8d":"fig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['recovered'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='y') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Recovered')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","ae227cfe":"#import matplotlib.dates as mdates\n\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['current_infected'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='y') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Active')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","aaff7957":"country_name_list = []\ninner_name = ''\nfor i in range(len(covid_19_data)):\n    inner_name = covid_19_data['Country\/Region'][i]\n    flg = 0\n    for j in range(len(country_name_list)):\n        if country_name_list[j] == inner_name:\n            flg = 1\n            break\n    if flg == 0:\n        country_name_list.append(inner_name)\ncountry_name_list.sort()\nfor i in range(len(country_name_list)):\n    print(country_name_list[i])","97800509":"# Go to \"Edit\" \n\n# And Change here \u2193 (For example... country_name = 'US')\ncountry_name = 'Japan'\n\n# And \"Run All\" (No accelerator needed)","04411a4f":"# Cut out own country's data\n\ncovid_19_own = []\nfor i in range(len(covid_19_data)):\n    if covid_19_data['Country\/Region'][i] == country_name:\n        covid_19_own.append(covid_19_data.loc[i])\ncovid_19_own = pd.DataFrame(covid_19_own).reset_index()\ncovid_19_own","0d94d4d3":"# Format and extract items\n\nindi_date_list, confirmed_list, deaths_list, recovered_list, current_infected_list = [],[],[],[],[]\ndate_list = []\nsavedMonth = 0\nconfirmed, deaths, recovered = 0, 0, 0\nfor i in range(len(covid_19_own)):\n    date = covid_19_own['ObservationDate'][i]\n    inner_date_list = date.split('\/')\n    year = inner_date_list[2]\n    month = inner_date_list[0]\n    month = int(month)\n    day = inner_date_list[1]\n    day = int(day)\n    confirmed += covid_19_own['Confirmed'][i]\n    deaths += covid_19_own['Deaths'][i]\n    recovered += covid_19_own['Recovered'][i]\n    if savedMonth == month:\n        if day % 5 == 0:\n            indiDate = str(day)\n        else:\n            indiDate = ''\n    else:\n        savedMonth = month\n        indiDate = str(month)+' \/ '+str(day)\n    if i == 0 or date_list[-1] != date:\n        date_list.append(date) \n        indi_date_list.append(indiDate)\n        \n    if (i < len(covid_19_own) - 1 and covid_19_own['ObservationDate'][i + 1] != date) or i == len(covid_19_own) - 1:\n        current_infected = confirmed - deaths - recovered\n        confirmed_list.append(confirmed)\n        deaths_list.append(deaths)\n        recovered_list.append(recovered)\n        current_infected_list.append(current_infected)\n        confirmed, deaths, recovered = 0, 0, 0\n#print(int(confirmed_list[-1]))\n#print(int(deaths_list[-1]))\n#print(int(recovered_list[-1]))","0c75e79c":"# Display\n\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 7), dpi=100)\nplt.title('Covid 19 infection status in ' + country_name)\nplt.xlabel('Date')\nplt.ylabel('Number of people')\nplt.plot(confirmed_list, label='Confirmed')\nplt.plot(deaths_list, label='Deaths')\nplt.plot(recovered_list, label='Recovered')\nplt.bar(range(len(indi_date_list)), current_infected_list, label='Active', color='pink')\nx = np.arange(len(indi_date_list))\nplt.xticks(x[:], indi_date_list[:], rotation=-90)\nplt.legend()\nplt.grid(True)\nplt.show()\n\nprint('{}\/{}\/{}'.format(year, month, day))\nprint('Confirmed:{}'.format(int(confirmed_list[-1])))\nprint('Deaths:{}'.format(int(deaths_list[-1])))\nprint('Recovered:{}'.format(int(recovered_list[-1])))\nprint('Active:{}'.format(int(current_infected_list[-1])))","ee972b28":"# Format data\n\ntrain_list = []\nconfirmed, deaths, recovered = 0, 0, 0\nfor i in range(len(covid_19_own)):\n    date = covid_19_own['ObservationDate'][i]\n    inner_date_list = date.split('\/')\n    y = inner_date_list[2]\n    m = inner_date_list[0]\n    d = inner_date_list[1]\n    confirmed += int(covid_19_own['Confirmed'][i])\n    deaths += int(covid_19_own['Deaths'][i])\n    recovered += int(covid_19_own['Recovered'][i])\n    if i == 0:\n        saved_date = d\n    if i == len(covid_19_own) - 1:\n        next_d = ''\n    else:\n        next_date = covid_19_own['ObservationDate'][i + 1]\n        next_date_list = next_date.split('\/')\n        next_y = next_date_list[2]\n        next_m = next_date_list[0]\n        next_d = next_date_list[1]\n    if next_y != y or next_m != m or next_d != d:\n        current_infected = confirmed - deaths - recovered\n        inner_dic = {'date':date,\n#                     'num_days':i,\n                     'confirmed':confirmed,\n                     'deaths':deaths,\n                     'recovered':recovered,\n                     'current_infected':current_infected}\n        train_list.append(inner_dic)\n        saved_date = date\n        confirmed, deaths, recovered = 0, 0, 0\n\ntrain_list = pd.DataFrame(train_list)\ntrain_list","7055f1d1":"# Preprocessing\n\nlast_date = train_list['date'][len(train_list) - 1]\ninner_date_list = last_date.split('\/')\nyear = int(inner_date_list[2])\nmonth = int(inner_date_list[0])\nday = int(inner_date_list[1])\ndt_last = datetime.date(year, month, day)\nadd_date_list = []\nfor i in range(predict_days):\n    new_date = dt_last + datetime.timedelta(days = i + 1)\n    y, m, d = new_date.year, new_date.month, new_date.day\n    if m < 10:\n        m = '0' + str(m)\n    if d < 10:\n        d = '0' + str(d)\n    new_date = str(m)+'\/'+str(d)+'\/'+str(y)\n    add_date_list.append(new_date)\nadd_date_list = np.array(add_date_list)\n\n# Nonlinear regression analysis\n\nimport matplotlib.dates as mdates\n\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['confirmed'])\nx1 = np.arange(len(x))\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='pink') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Confirmed')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","05ec9c95":"\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['deaths'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='pink') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Deaths')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","6dac9d08":"\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['recovered'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='pink') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Recovered')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","25e2271a":"\nfig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nx = np.array(train_list['date'])\ny = np.array(train_list['current_infected'])\nx1 = np.arange(len(x))\n\n\nscore_list = []\nfor j in range(1, max_dimension):\n    #**********************************************************\n    fit = np.polyfit(x1,y,j)\n    #**********************************************************\n    y2 = np.poly1d(fit)(x1)\n    # r2_score\n    from sklearn.metrics import r2_score\n    score = r2_score(y,y2)\n    score_list.append(score)\nmax_score = max(score_list)\nmax_index = score_list.index(max(score_list))\nfit = np.polyfit(x1,y,max_index)\ny2 = np.poly1d(fit)(x1)\n\n\n# predict\ntemp_date = np.append(x, add_date_list)\nx2 = x\npredict_list = []\nfor i in range(len(x) - 1, len(temp_date)):\n    predict_y = np.poly1d(fit)(i)\n    if predict_y >= 0:\n        x2 = np.append(x2, temp_date[i])\n        predict_list.append(predict_y)\n    else:\n        break\npredict_list = np.array(predict_list)\ny3 = np.append(y2, predict_list)\n\nax.plot(x,y,'bo', color='pink') \nax.plot(x2,y3,'--k', color='g') \n\nplt.title('Active')\nplt.xlabel(\"Date\")\nplt.ylabel(\"Number of people\")\nplt.xticks(np.arange(0, len(x2), 10), rotation=-90)\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n# Expected convergence date\nif i >= len(x) + predict_days - 1:\n    conv_date = 'Unknown'\nelse:\n    conv_date = x2[-1]\nprint('Expected convergence date : {}'.format(conv_date))\nprint('Score:{:.4f}'.format(max_score))\nprint('Dimension:{}'.format(max_index))","405f23ac":"# COVID-19 prediction for global and each country\n#### Using regression analysis\n#### Simple analysis for beginners","15e389e7":"## 2-2. Prediction using regression analysis","748a171a":"# 1. Global","d7ff857e":"## 1-2. Prediction using regression analysis","a3c50954":"### Import data","20c74540":"# 2. For each country\n## Specify country name\n### Default country name is Japan\n* Replacing \"Japan\" with the name of another country will be result for there.\n* You can use the country names shown in the list below.\n\n### Make lists of country names\n* \u2193 Click \"Show hidden cell\" button to display the list","f9c8e1fa":"## 2-1. Overview","6abf7f26":"## 1-1. Overview"}}