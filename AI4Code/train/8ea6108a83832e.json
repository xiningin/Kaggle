{"cell_type":{"1f559440":"code","f9c109a1":"code","9e1dc92f":"code","54e4a3ae":"code","a66cd3a9":"code","803c7930":"code","b4272e61":"code","3e91a826":"code","e8b7543b":"code","d00f40ef":"code","db9dd2d1":"code","7d34a7da":"code","7765025a":"code","469370aa":"code","6471b351":"code","8b1cd098":"code","b836c5bf":"code","63df1cef":"code","7098e1e7":"code","1aace05d":"code","9c48ea99":"code","0afa0da1":"code","f4b0d76e":"code","4c506338":"code","8c842cfe":"code","15be580f":"code","ec47f9a8":"code","31a4defb":"code","99534a5a":"code","5a1b3d84":"code","3d248143":"code","2da5199f":"code","68c4845d":"code","7a1720dc":"code","c58759b4":"code","c1623b98":"code","0cf71a10":"code","12ca69d5":"code","5b958e94":"code","5929541a":"code","95d52563":"code","75bb25a2":"code","6fab0096":"code","4ed8359e":"markdown","f0b08741":"markdown","bbe1f637":"markdown"},"source":{"1f559440":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f9c109a1":"import tensorflow as tf\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\n\n\nimport nltk \nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\n\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport re\n\nprint(\"Tensorflow Version\",tf.__version__)","9e1dc92f":"data = pd.read_csv('..\/input\/spam-mails-dataset\/spam_ham_dataset.csv')\ndata","54e4a3ae":"data = data.drop(['Unnamed: 0', 'label'], axis=1)","a66cd3a9":"data.head()","803c7930":"val_count = data.label_num.value_counts()\n\nplt.figure(figsize=(8,4))\nplt.bar(val_count.index, val_count.values)\nplt.title(\"Spam\/ham Data Distribution\")","b4272e61":"stop_words = stopwords.words('english')\nstemmer = SnowballStemmer('english')\n\ntext_cleaning_re = \"@\\S+|https?:\\S+|http?:\\S+|[^A-Za-z0-9]:\\S+|subject:\\S+|nbsp\"","3e91a826":"data.head()","e8b7543b":"def preprocess(text, stem=False):\n    text = re.sub(text_cleaning_re, ' ', str(text).lower()).strip()\n    tokens = []\n    for token in text.split():\n        if token not in stop_words:\n            if stem:\n                tokens.append(stemmer.stem(token))\n            else:\n                tokens.append(token)\n    return \" \".join(tokens)","d00f40ef":"data.text = data.text.apply(lambda x: preprocess(x))","db9dd2d1":"data.head()","7d34a7da":"pip install wordcloud","7765025a":"from wordcloud import WordCloud\n\nplt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800).generate(\" \".join(data[data.label_num == 1].text))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.title(\"Spam Word Cloud\")","469370aa":"plt.figure(figsize = (20,20)) \nwc = WordCloud(max_words = 2000 , width = 1600 , height = 800).generate(\" \".join(data[data.label_num == 0].text))\nplt.imshow(wc , interpolation = 'bilinear')\nplt.title(\"Ham Word Cloud\")","6471b351":"TRAIN_SIZE = 0.8\nMAX_NB_WORDS = 100000\nMAX_SEQUENCE_LENGTH = 50","8b1cd098":"x = data['text']\ny = data['label_num']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1-TRAIN_SIZE,\n                                         random_state=7) # Splits Dataset into Training and Testing set\nprint(\"Train Data size:\", len(x_train))\nprint(\"Test Data size\", len(x_test))","b836c5bf":"x_train.head(10)","63df1cef":"from keras.preprocessing.text import Tokenizer\n\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(x_train)\n\nword_index = tokenizer.word_index\nvocab_size = len(tokenizer.word_index) + 1000\nprint(\"Vocabulary Size :\", vocab_size)","7098e1e7":"from keras.preprocessing.sequence import pad_sequences\n\nx_train = pad_sequences(tokenizer.texts_to_sequences(x_train),\n                        maxlen = MAX_SEQUENCE_LENGTH)\nx_test = pad_sequences(tokenizer.texts_to_sequences(x_test),\n                       maxlen = MAX_SEQUENCE_LENGTH)\n\nprint(\"Training X Shape:\",x_train.shape)\nprint(\"Testing X Shape:\",x_test.shape)","1aace05d":"y_test.shape","9c48ea99":"x_train","0afa0da1":"#LSTM hyperparameters\nn_lstm = 200\ndrop_lstm =0.2","f4b0d76e":"from tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense, Dropout, LSTM, Bidirectional","4c506338":"embeding_dim = 16\n#drop_value = 0.2\n#n_dense = 24\n#num_epochs = 30\n#early_stop = EarlyStopping(monitor='val_loss', patience=3)","8c842cfe":"#LSTM Spam detection architecture\n#model1 = Sequential()\n#model1.add(Embedding(vocab_size, embeding_dim, input_length=MAX_SEQUENCE_LENGTH))\n#model1.add(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True))\n#model1.add(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True))\n#model1.add(Dense(1, activation='relu'))","15be580f":"#model1.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])","ec47f9a8":"#num_epochs = 30\n#early_stop = EarlyStopping(monitor='val_loss', patience=2)\n#history = model1.fit(x_train, train_data.label_num, epochs=num_epochs, validation_data=(x_test, test_data.label_num), verbose=2)","31a4defb":"# Create a dataframe\n#metrics = pd.DataFrame(history.history)\n# Rename column\n#metrics.rename(columns = {'loss': 'Training_Loss', 'accuracy': 'Training_Accuracy',\n#                         'val_loss': 'Validation_Loss', 'val_accuracy': 'Validation_Accuracy'}, inplace = True)\n#def plot_graphs1(var1, var2, string):\n#    metrics[[var1, var2]].plot()\n#    plt.title('LSTM Model: Training and Validation ' + string)\n#    plt.xlabel ('Number of epochs')\n#    plt.ylabel(string)\n#    plt.legend([var1, var2])\n#plot_graphs1('Training_Loss', 'Validation_Loss', 'loss')\n#plot_graphs1('Training_Accuracy', 'Validation_Accuracy', 'accuracy')","99534a5a":"# Biderectional LSTM Spam detection architecture\nmodel2 = Sequential()\nmodel2.add(Embedding(vocab_size, embeding_dim, input_length=MAX_SEQUENCE_LENGTH))\nmodel2.add(Bidirectional(LSTM(n_lstm, dropout=drop_lstm, return_sequences=True)))\nmodel2.add(Dense(1, activation='sigmoid'))","5a1b3d84":"model2.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics=['accuracy'])","3d248143":"# Training\nnum_epochs = 30\nearly_stop = EarlyStopping(monitor='val_loss', patience=2)\nhistory = model2.fit(x_train, y_train, epochs=num_epochs, \n                    validation_data=(x_test, y_test),callbacks =[early_stop], verbose=2)","2da5199f":"# Create a dataframe\nmetrics = pd.DataFrame(history.history)\n# Rename column\nmetrics.rename(columns = {'loss': 'Training_Loss', 'accuracy': 'Training_Accuracy',\n                         'val_loss': 'Validation_Loss', 'val_accuracy': 'Validation_Accuracy'}, inplace = True)\ndef plot_graphs1(var1, var2, string):\n    metrics[[var1, var2]].plot()\n    plt.title('BiLSTM Model: Training and Validation ' + string)\n    plt.xlabel ('Number of epochs')\n    plt.ylabel(string)\n    plt.legend([var1, var2])\n# Plot\nplot_graphs1('Training_Loss', 'Validation_Loss', 'loss')\nplot_graphs1('Training_Accuracy', 'Validation_Accuracy', 'accuracy')","68c4845d":"metrics.head()","7a1720dc":"y_pred = model2.predict(x_test)\ny_pred.shape","c58759b4":"def sigmoid(x):\n    if x>=0.5:\n        return 1\n    else:\n        return 0 ","c1623b98":"for i in range (len(y_pred)):\n    for j in range (len(y_pred[i])):\n        y_pred[i][j]= sigmoid(y_pred[i][j])","0cf71a10":"pred = []\nfor i in range (len(y_pred)):\n    pred.append(int(y_pred[i].all()))","12ca69d5":"len(pred)","5b958e94":"y_pred[0][0]","5929541a":"np.set_printoptions(threshold=np.inf)","95d52563":"len(y_test)","75bb25a2":"train_data.label_num","6fab0096":"from tensorflow.keras.models import load_model\n\nmodel2.save('bilstm.h5')","4ed8359e":"\n## LSTM","f0b08741":"## TOKENIZER","bbe1f637":"#   IMPORTANT TO CONVERT THIS INTO CLASSIFIED AS 0 OR 1 , PROBABLY USING2 RECURRING FOR LOOPS , EACH ELEMENT TO BE CLASSIFIED AS 0 OR 1 AND THEN AVG"}}