{"cell_type":{"fe5c626b":"code","4d283eaf":"code","41d09e96":"code","16c959ee":"code","0ac5ed22":"code","76d598ee":"code","7b6fe93c":"code","ebc6548a":"code","488c6a89":"code","ab8bfa3b":"code","9aca95af":"code","756f2c9e":"code","8e31d9af":"code","c7d30b34":"code","fad3f0bd":"code","85f6b017":"code","fab14ea9":"markdown","82388ea6":"markdown","065e128a":"markdown","625c14c3":"markdown","07ae5f79":"markdown","d2bdaa65":"markdown"},"source":{"fe5c626b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4d283eaf":"train_data = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv',index_col = \"Id\")\ntest_data = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv',index_col = \"Id\")\n","41d09e96":"#rel = train_data.corr()\n#rel['SalePrice'].sort_values()","16c959ee":"train_data['HouseAge'] = train_data['YrSold'] - train_data['YearBuilt']\ntrain_data['temp'] = (train_data['YearRemodAdd']-train_data['YearBuilt'])\ntrain_data[\"Remod\"] = train_data['temp'].replace( (train_data['temp'].where(train_data['temp'] > 0)) , 1 )\ntrain_data['LotFrontage'].fillna(train_data['LotFrontage'].mean(), inplace=True)\ntrain_data['MasVnrArea'].fillna(train_data['MasVnrArea'].mean(), inplace = True)\ntrain_data['Street'].replace({'Pave': 1, 'Grvl': 0}, inplace=True)\ntrain_data['Alley'].replace({'Pave': 1, 'Grvl': 0}, inplace=True)\ntrain_data['Alley'].fillna(-1, inplace = True)\ntrain_data['LotShape'].replace({'Reg': 3, 'IR1': 2, 'IR2' : 1, 'IR3' : 0}, inplace=True)\ntrain_data['Utilities'].replace({'AllPub' : 4, 'NoSeWa' : 2},inplace=True)\ntrain_data['LandSlope'].replace({'Gtl': 0, 'Mod': -1, 'Sev' : -2}, inplace=True)\ntrain_data['LotConfig'].replace({'FR3': 3, 'FR2': 2, 'CulDSac' : 1, 'Corner' : 0, \"Inside\" : -1}, inplace=True)\ntrain_data['ExterQual'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2, 'Fa' : 1, 'Po' : 0}, inplace=True)\ntrain_data['PoolQC'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2, 'Fa' : 1}, inplace=True)\ntrain_data['PoolQC'].fillna(0, inplace = True)\ntrain_data['Fence'].replace({'GdPrv': 4, 'MnPrv': 3, 'GdWo' : 2, 'MnWw' : 1}, inplace=True)\ntrain_data['Fence'].fillna(0, inplace = True)\ntrain_data['ExterCond'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2, 'Fa' : 1, 'Po' : 0}, inplace=True)\ntrain_data['BsmtQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['BsmtQual'].fillna(0,inplace = True)\ntrain_data['BsmtCond'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['BsmtCond'].fillna(0,inplace = True)\ntrain_data['BsmtExposure'].replace({'Gd': 4, 'Av': 3, 'Mn' : 2,'No' : 1}, inplace=True)\ntrain_data['BsmtExposure'].fillna(0,inplace = True)\ntrain_data['HeatingQC'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['CentralAir'].replace({'Y' : 1 , 'N' : 0}, inplace=True)\ntrain_data['KitchenQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['Functional'].replace({'Typ': 0, 'Min1': -0.25, 'Min2' : -0.5,'Mod' : -1, 'Maj1' : -2, 'Maj2' : -3,'Sev' : -4, 'Sal' : -5}, inplace=True)\ntrain_data['FireplaceQu'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['FireplaceQu'].fillna(0,inplace = True)\ntrain_data['GarageType'].replace({'2Types' : 6 , 'Attchd' : 5 , 'Basment' : 4 , 'BuiltIn' : 3 , 'CarPort' : 2 , 'Detchd' : 1}, inplace=True)\ntrain_data['GarageType'].fillna(0,inplace = True)\ntrain_data['GarageFinish'].replace({ 'Fin' : 3, 'RFn' : 2, 'Unf' : 1}, inplace = True)\ntrain_data['GarageFinish'].fillna(0, inplace = True)\ntrain_data['GarageQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['GarageQual'].fillna(0,inplace = True)\ntrain_data['GarageCond'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntrain_data['GarageCond'].fillna(0,inplace = True)\ntrain_data['PavedDrive'].replace({ 'Y' : 2, 'P' : 1, 'N' : 0}, inplace = True)\n\ntrain_data['ExterQual'] = train_data['ExterQual'].astype(str).astype(int)\ntrain_data['KitchenQual'] = train_data['KitchenQual'].astype(str).astype(int)\ntrain_data['Functional'] = train_data['Functional'].astype(str).astype(float)\n","0ac5ed22":"test_data['GarageArea'].fillna(test_data['GarageArea'].mean(),inplace = True)\ntest_data['GarageCars'].fillna(0,inplace = True)\ntest_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].mean(),inplace = True)\ntest_data['HouseAge'] = test_data['YrSold'] - test_data['YearBuilt']\ntest_data['temp'] = (test_data['YearRemodAdd']-test_data['YearBuilt'])\ntest_data[\"Remod\"] = test_data['temp'].replace( (test_data['temp'].where(test_data['temp'] > 0)) , 1 )\ntest_data['LotFrontage'].fillna(test_data['LotFrontage'].mean(), inplace=True)\ntest_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mean(), inplace = True)\ntest_data['BsmtFullBath'].fillna(0, inplace = True)\ntest_data['BsmtHalfBath'].fillna(0, inplace = True)\ntest_data['Street'].replace({'Pave': 1, 'Grvl': 0}, inplace=True)\ntest_data['Alley'].replace({'Pave': 1, 'Grvl': 0}, inplace=True)\ntest_data['Alley'].fillna(-1, inplace = True)\ntest_data['LotShape'].replace({'Reg': 3, 'IR1': 2, 'IR2' : 1, 'IR3' : 0}, inplace=True)\ntest_data['Utilities'].fillna(4, inplace=True)\ntest_data['Utilities'].replace({'AllPub' : 4},inplace=True)\ntest_data['LandSlope'].replace({'Gtl': 0, 'Mod': -1, 'Sev' : -2}, inplace=True)\ntest_data['LotConfig'].replace({'FR3': 3, 'FR2': 2, 'CulDSac' : 1, 'Corner' : 0, \"Inside\" : -1}, inplace=True)\ntest_data['ExterQual'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2,'Fa' : 1, 'Po' : 0}, inplace=True)\ntest_data['PoolQC'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2,'Fa' : 1}, inplace=True)\ntest_data['PoolQC'].fillna(0, inplace = True)\ntest_data['Fence'].replace({'GdPrv': 4, 'MnPrv': 3, 'GdWo' : 2, 'MnWw' : 1}, inplace=True)\ntest_data['Fence'].fillna(0, inplace = True)\ntest_data['ExterCond'].replace({'Ex': 4, 'Gd': 3, 'TA' : 2, 'Fa' : 1, 'Po' : 0}, inplace=True)\ntest_data['BsmtQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['BsmtQual'].fillna(0,inplace = True)\ntest_data['BsmtCond'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['BsmtCond'].fillna(0,inplace = True)\ntest_data['BsmtExposure'].replace({'Gd': 4, 'Av': 3, 'Mn' : 2,'No' : 1}, inplace=True)\ntest_data['BsmtExposure'].fillna(0,inplace = True)\ntest_data['HeatingQC'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['CentralAir'].replace({'Y' : 1 , 'N' : 0}, inplace=True)\ntest_data['KitchenQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['KitchenQual'].fillna(3, inplace =True)\ntest_data['Functional'].replace({'Typ': 0, 'Min1': -0.25, 'Min2' : -0.5,'Mod' : -1, 'Maj1' : -2, 'Maj2' : -3,'Sev' : -4, 'Sal' : -5}, inplace=True)\ntest_data['Functional'].fillna(0,inplace = True)\ntest_data['FireplaceQu'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['FireplaceQu'].fillna(0,inplace = True)\ntest_data['GarageType'].replace({'2Types' : 6 , 'Attchd' : 5 , 'Basment' : 4 , 'BuiltIn' : 3 , 'CarPort' : 2 , 'Detchd' : 1}, inplace=True)\ntest_data['GarageType'].fillna(0,inplace = True)\ntest_data['GarageFinish'].replace({ 'Fin' : 3, 'RFn' : 2, 'Unf' : 1}, inplace = True)\ntest_data['GarageFinish'].fillna(0, inplace = True)\ntest_data['GarageQual'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['GarageQual'].fillna(0,inplace = True)\ntest_data['GarageCond'].replace({'Ex': 5, 'Gd': 4, 'TA' : 3,'Fa' : 2, 'Po' : 1}, inplace=True)\ntest_data['GarageCond'].fillna(0,inplace = True)\ntest_data['PavedDrive'].replace({ 'Y' : 2, 'P' : 1, 'N' : 0}, inplace = True)\n\ntest_data['ExterQual'] = test_data['ExterQual'].astype(str).astype(int)\ntest_data['KitchenQual'] = test_data['KitchenQual'].astype(str).astype(int)\ntest_data['Functional'] = test_data['Functional'].astype(str).astype(float)\n\n","76d598ee":"features = ['1stFlrSF','MasVnrArea','OverallCond','OverallQual','LotFrontage','LotArea','TotalBsmtSF','GrLivArea',\n            'TotRmsAbvGrd','Fireplaces','GarageArea','GarageCars','HouseAge','Remod','2ndFlrSF','MiscVal',\n            'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','WoodDeckSF',\n            'OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea', 'Street' ,'Alley', 'LotShape', \n            'Utilities', 'LandSlope', 'LotConfig', 'PoolQC', 'Fence', 'ExterCond' , 'BsmtQual', 'BsmtCond',\n            'BsmtExposure', 'HeatingQC' , 'CentralAir',  'FireplaceQu',  'GarageType', 'ExterQual','KitchenQual',\n            'GarageFinish',  'GarageQual', 'GarageCond', 'PavedDrive', 'Functional']\n","7b6fe93c":"test_data[features].isnull().sum().sum()","ebc6548a":"X = train_data[features]\ny = train_data.SalePrice\n\nX_test = test_data[features]\n\n#X_test['ExterQual'].value_counts()\n#X_test['KitchenQual'].value_counts()\n#X_test['Functional'].value_counts()\n\nX_test.isnull().sum().sum()\n\n","488c6a89":"#from sklearn.model_selection import train_test_split\n#X_train,X_valid,y_train,y_valid = train_test_split(X,y,random_state=1)","ab8bfa3b":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n#naive_model = XGBRegressor()\nimp_model = XGBRegressor(n_estimators=1000,learning_rate=0.05,max_depth = 3,n_jobs=8)\n#naive_model.fit(X_train,y_train)\n#naive_pred = naive_model.predict(X_valid)\n#naive_mae = mean_absolute_error(y_valid,naive_pred)\n#naive_mae","9aca95af":"#from sklearn.ensemble import RandomForestRegressor\n#Rf_model = RandomForestRegressor(n_estimators=100, criterion = \"mae\", random_state = 1)\n#from sklearn.model_selection import cross_val_score\nscores = -1 * cross_val_score(imp_model,X,y,cv=5,scoring='neg_mean_absolute_error')\nscores.mean()","756f2c9e":"from sklearn.model_selection import cross_val_score\n#scores = -1 * cross_val_score(imp_model,X,y,cv=5,scoring='neg_mean_absolute_error')\n#scores.mean()","8e31d9af":"#from sklearn.model_selection import cross_val_score\n#for nest in [100,200,300,400,500,600,700,800,900,1200]:\n    #for max_dpth in [3,4,5,6,7,8,9,10,11,12]:\n       # imp_model = XGBRegressor(n_estimators=nest,learning_rate=0.05,max_depth = 8,n_jobs=8)\n       # scores = -1 * cross_val_score(imp_model,X,y,cv=5,scoring='neg_mean_absolute_error')\n      #  print(nest,\" \",max_dpth,\" \",scores.mean())\n    ","c7d30b34":"#Rf_model.fit(X,y)\n#fin_pred = Rf_model.predict(X_test)","fad3f0bd":"imp_model.fit(X,y)\nfin_pred = imp_model.predict(X_test)","85f6b017":"submit = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': fin_pred})\nsubmit.to_csv('Iowa_submission.csv', index=False)","fab14ea9":"Loading the data","82388ea6":"Defining train and test data","065e128a":"Defing features. \nAlmost all of the features were included.","625c14c3":"Using XGBRegressor to calculate the housing price. \nMultiple tunings were done to find the optimal hyper-parameters","07ae5f79":"Converting all numeric data into categorical ones and doing a little feature engineering to calculated binary value for Remodelling and House Age which is Year Sold - Year Built","d2bdaa65":"Using this method to use all the features is very tedious but definitely rewards better.\nThe final submission had a score of 15311.\n\nThere is a lot of scope for improvement.\nAny suggestions will be highly appreciated."}}