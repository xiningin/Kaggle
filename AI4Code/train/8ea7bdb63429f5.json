{"cell_type":{"cad985ff":"code","c9e38792":"code","792f7e79":"code","e69aa51a":"code","633d6b6d":"code","5babaed9":"code","0d554b54":"code","c8b0a401":"code","7f906526":"code","6c13161b":"code","69113500":"code","e452b7d9":"code","178a293e":"code","9121ade0":"code","dd971834":"code","ab65d3ae":"code","f86dd6d3":"code","b1468e3a":"code","4d0802e9":"code","af32ecbc":"code","b0a758df":"code","bdb5e8c9":"code","3034e4b5":"code","db190765":"code","82334bce":"code","334bff9b":"code","79eb0b57":"code","3bb0fb4e":"code","bdf5dab2":"markdown","2c039e1a":"markdown","17ac2782":"markdown","2a980b79":"markdown","cea207a2":"markdown","0bfdf0dd":"markdown","8cfb3495":"markdown","92b8c350":"markdown","8273d7af":"markdown","183cfb08":"markdown","0e554599":"markdown","2d9aba73":"markdown","c953e8fc":"markdown","652a1f43":"markdown","62e82958":"markdown","641f9fa4":"markdown"},"source":{"cad985ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c9e38792":"train_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/test.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/airplane-accidents-severity-dataset\/sample_submission.csv')","792f7e79":"train_df.head()","e69aa51a":"test_df.head()","633d6b6d":"sample_sub_df.head()","5babaed9":"print(f'Shape of training data: {train_df.shape}')\nprint(f'Shape of testing data: {test_df.shape}')","0d554b54":"train_df.isna().sum()","c8b0a401":"test_df.isna().sum()","7f906526":"X_train = train_df.drop(['Severity', 'Accident_ID'], axis=1)\nY_train = train_df['Severity']","6c13161b":"Y_train.unique()","69113500":"class_map = {\n    'Minor_Damage_And_Injuries': 0,\n    'Significant_Damage_And_Fatalities': 1,\n    'Significant_Damage_And_Serious_Injuries': 2,\n    'Highly_Fatal_And_Damaging': 3\n}\ninverse_class_map = {\n    0: 'Minor_Damage_And_Injuries',\n    1: 'Significant_Damage_And_Fatalities',\n    2: 'Significant_Damage_And_Serious_Injuries',\n    3: 'Highly_Fatal_And_Damaging'\n}","e452b7d9":"Y_train = Y_train.map(class_map).astype(np.uint8)","178a293e":"plt.figure(figsize=(13,8))\nax = sns.barplot(np.vectorize(inverse_class_map.get)(pd.unique(Y_train)), Y_train.value_counts().sort_index())\nax.set(xlabel='Accident Severity', ylabel='# of records', title='Meter type vs. # of records')\nax.set_xticklabels(ax.get_xticklabels(), rotation=50, ha=\"right\")\nplt.show()","9121ade0":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Safety_Score'], kde=False)\nplt.show()","dd971834":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Days_Since_Inspection'], kde=False)\nplt.show()","ab65d3ae":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Total_Safety_Complaints'], kde=False)\nplt.show()","f86dd6d3":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Control_Metric'], kde=False)\nplt.show()","b1468e3a":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Turbulence_In_gforces'], kde=False)\nplt.show()","4d0802e9":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Cabin_Temperature'], kde=False)\nplt.show()","af32ecbc":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Max_Elevation'], kde=False)\nplt.show()","b0a758df":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Violations'], kde=False)\nplt.show()","bdb5e8c9":"plt.figure(figsize=(13,8))\nsns.distplot(X_train['Adverse_Weather_Metric'], kde=False)\nplt.show()","3034e4b5":"X_train['Total_Safety_Complaints'] = np.power(2, X_train['Total_Safety_Complaints'])\nX_train['Days_Since_Inspection'] = np.power(2, X_train['Days_Since_Inspection'])\nX_train['Safety_Score'] = np.power(2, X_train['Safety_Score'])","db190765":"rf = RandomForestClassifier(n_estimators=1250, random_state=666, oob_score=True)\n\n# 0.8589427\nparam_grid = { \n    'n_estimators': [1000],\n    'max_features': [None],\n    'min_samples_split': [3],\n    'max_depth': [50]\n    \n}\n\nCV_rf = GridSearchCV(estimator=rf, param_grid=param_grid, cv=6, verbose=100, n_jobs=-1)\nCV_rf.fit(X_train, Y_train)\nprint (f'Best Parameters: {CV_rf.best_params_}')","82334bce":"test_df['Total_Safety_Complaints'] = np.power(2, test_df['Total_Safety_Complaints'])\ntest_df['Days_Since_Inspection'] = np.power(2, test_df['Days_Since_Inspection'])\ntest_df['Safety_Score'] = np.power(2, test_df['Safety_Score'])","334bff9b":"preds = CV_rf.predict(test_df.drop(['Accident_ID'], axis=1))","79eb0b57":"submission = pd.DataFrame([test_df['Accident_ID'], np.vectorize(inverse_class_map.get)(preds)], index=['Accident_ID', 'Severity']).T\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","3bb0fb4e":"from IPython.display import FileLink, FileLinks\n\nFileLink('submission.csv')","bdf5dab2":"### 4. Distribution of control metric","2c039e1a":"### 7. Distribution of Max Elevation","17ac2782":"## Highlights of the dataset\n\n<pre>\nAccident_ID:              \tunique id assigned to each row\nAccident_Type_Code:     \t  the type of accident (factor, not numeric)\nCabin_Temperature:      \t  the last recorded temperature before the incident, measured in degrees fahrenheit\nTurbulence_In_gforces:\t    the recorded\/estimated turbulence experienced during the accident\nControl_Metric:               an estimation of how much control the pilot had during the incident given the factors at play\nTotal_Safety_Complaints: \t number of complaints from mechanics prior to the accident\nDays_Since_Inspection:  \t  how long the plane went without inspection before the incident\nSafety_Score:           \t  a measure of how safe the plane was deemed to be\nSeverity:\t                 a description (4 level factor) on the severity of the crash [Target]\n<\/pre>","2a980b79":"## Reading the given dataset","cea207a2":"So there are no missing values in the dataset.","0bfdf0dd":"### 5. Distribution of Turbulence","8cfb3495":"So there are 4 classes of accidents (out target variable). Let's map those classes to integers","92b8c350":"### 3. Distribution of days till Last inspection","8273d7af":"### 1. Distribution of Target Variable ","183cfb08":"## Exploratory Data Analysis","0e554599":"### 6. Distribution of Cabin Temperature (deg. F)","2d9aba73":"### 2. Distribution of safety score","c953e8fc":"### 8. Distribution of number of violations","652a1f43":"### 9. Distribution of adverse weather metric","62e82958":"### 3. Distribution of total safety complaints","641f9fa4":"## Analysis of missing values (NaNs)"}}