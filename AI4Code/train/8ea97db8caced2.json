{"cell_type":{"00e6727a":"code","b1cee03e":"code","2ba6f81b":"code","27fb4cf1":"code","49199475":"code","4f7d8c72":"code","bf29c60f":"code","1dde0483":"code","5ce2dcb6":"code","d9ea087b":"code","e677a1fd":"code","78bbdc94":"code","24944c5b":"code","b7725f8a":"code","1f9b62a8":"code","90a3f3aa":"code","44f17b93":"code","59cb0a1f":"code","cdb34026":"code","0bf2f5f8":"code","61042dc4":"code","b03a4275":"code","1d009cf2":"code","71054159":"code","2bbea057":"code","996b497d":"code","db0d761e":"code","7bc09cae":"code","cd0efb40":"code","4b46ec77":"markdown","752446d1":"markdown","d1de99d8":"markdown","d118226c":"markdown","08f4a00d":"markdown","d5ef823f":"markdown","75ee58f0":"markdown","5dbe3aeb":"markdown","9db82323":"markdown","e5890e46":"markdown","94c29a7c":"markdown","f0fe8f61":"markdown","54b81419":"markdown","ac4e9afb":"markdown","3fecb75c":"markdown","1bc25a6b":"markdown"},"source":{"00e6727a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b1cee03e":"df=pd.read_csv('\/kaggle\/input\/golden-globe-awards\/golden_globe_awards.csv')","2ba6f81b":"#check the amount of rows within the dataset\nlen(df)","27fb4cf1":"#Let's have a look at the dataset - let's choose sample at random to get a unbias view\ndf.sample(10)","49199475":"#this is a great function to use to be able to identify the number of categories, number of different nomiees etc.\ndf.nunique()","4f7d8c72":"# There are a lot of unique categories\ndf.category.unique()","bf29c60f":"#checking type of dataset within the column\ndf.dtypes","1dde0483":"#checking for nulls values within the dataset\nprint('Null values in dataset: \\n')\nprint(df.isnull().sum())\nprint('\\n')\nprint('Percentage of null in film column:' )\nprint(round(df['film'].isnull().sum()\/len(df)*100,2),\"%\")","5ce2dcb6":"# Let's see the column film and why there are NaN?\ndf[df.isna().any(axis=1)].sample(10)","d9ea087b":"#this function adds in a new column and if film column is non na then it outputs true in a new column.\ndf[\"actor_actress_award\"] = pd.notna(df[\"film\"])\ndf.sample(10)","e677a1fd":"#Now we replace all nan with in films with nominee as this is the film name.\n\ndf[\"film\"] = pd.notna(df[\"film\"])\ndf.sample(10)","78bbdc94":"df['film'] = df.apply(\n    lambda row: row['nominee']*row['film'] if np.isnan(row['film']) else row['nominee'],\n    axis=1\n)\n    \ndf.sample(10)\n# Notice we have valuable information behind the dataset base on NaNs.","24944c5b":"df[\"film\"] = df[\"film\"] +' - '+ df[\"year_film\"].astype(str)\n\n# Let's check again how the data looks\ndf.sample(10)","b7725f8a":"# Checking for nulls now\n\nprint(df.isnull().sum())","1f9b62a8":"# Let's see how many awards were presented since 1944 for each category\n\n# Ensure to put filter for if award has been won\n# How would you put filters via groupby?\ndf_winners=df[df.win == True]\ndf[df.win == True]","90a3f3aa":"len(df_winners)","44f17b93":"# Now we can filter out how many winners there were in each category historically\n\ntotal_winners = df_winners.groupby(['category']).size().reset_index(name='counts')\ntotal_winners.sample(10)\n\n# We learn that the awards have been changed and taloired to be more specific in the future, for example it is split via television series as well as movies.\n# We also learn that there are category that have not been awarded often.","59cb0a1f":"total_winners.sample(10).sort_values(by='counts', ascending=False)","cdb34026":"# We can also use the first function from pandas to be able to see when the awards were first introducted\n\nfirst_film_award = df[['category','year_award']].groupby('category').first().reset_index()\n\n# Add in true within the column\n\nfirst_film_award.rename({\"year_award\": \"award_first_awarded\"}, axis=1, inplace=True)\n\n#here is a overview of the first awards \nfirst_film_award.sample(10)","0bf2f5f8":"# Lets make use of this and merge data together.\n\ndf= pd.merge(df,first_film_award,left_on='category',right_on='category',how='left')","61042dc4":"# Check to see if the column has been added.\ndf","b03a4275":"# First we have to convert the column 'year_film' from int64 to string\n\ndf[\"decade_film_award\"] = df.year_award.astype(str)\n\n# Next we only want the first 3 chars and we add in '0s'\n\ndf[\"decade_film_award\"] = df['decade_film_award'].str[:3]+'0s'","1d009cf2":"# Again check to see if the column has been added as expected.\ndf","71054159":"# By grouping the year release\n# We can see how many nominations there were throughout the years\n\nplt.figure(figsize=(15,6))\nsns.countplot(data=df, x='decade_film_award',   palette='hls')\nplt.title('Counts of Nominations for the Golden Globe awards from 1944-2020', fontsize=15)\nplt.xlabel('Decade')\nplt.ylabel(\"Count\")\nplt.legend(frameon=False, fontsize=12)\n\n# Notice that 1920's there is only 1 year.","2bbea057":"#Wins only\ndf[df.win == True]","996b497d":"# Total Nominees in each decade\ndf_nominees = df.groupby('decade_film_award')['win'].count().to_frame('Count').reset_index()\nprint(df_nominees)","db0d761e":"# Total Winners in each decade\ndf_winners=df[df.win == True]\ndf_winners_decade = df_winners.groupby('decade_film_award')['win'].count().to_frame('Count').reset_index()\nprint(df_winners_decade)\n\ndf_winners_decade.dtypes","7bc09cae":"df_winners_decade['Per_nominated'] = df_winners_decade['Count'] \/ df_nominees['Count']\ndf_winners_decade","cd0efb40":"# The winners in 2020\ndf_winners[df_winners['decade_film_award'].str.contains(\"2020s\")]","4b46ec77":"Replacing film column with film and year release in the same column","752446d1":"Can see that within the 1970s to 2010s there has been consistent number of nomiees and winners.","d1de99d8":"## Want to find the percentage of winners from nomiees\n","d118226c":"Replace all NaN with the film Title.","08f4a00d":"# Let's work together\n\n## Exploratory Data Analysis on EDA - Golden Globe Awards, 1944 - 2020 dataset.\n\nHi welcome to the notebook on Exploratory Data Analysis (EDA) for the Golden Globe awards.\n\nI was inspired to undertake EDA on this dataset, as I was watching the highlights in the early Jan 2020 and being a fan of movies myself, I wanted to learn more.\n\nIn this notebook, we will be exploring the data, focusing on feature engineering and interesting insights from this dataset.\n\nPlease upvote if you found it interesting and would be much appreciated.\n\n![Golden_Globe](http:\/\/richiewong.co.uk\/wp-content\/uploads\/2020\/01\/golden-globe-atmosphere-4.png)","d5ef823f":"## New column for actor\/actress award","75ee58f0":"# Time to show some visuals!","5dbe3aeb":"## New column when category of the award was first introduced\n\nThis was bit of a process - if there is more ideal way, keen to know.","9db82323":"We can see it's about 1 in 5 chance to win an award after the 1970s.","e5890e46":"# Feature Engineering + Cleaning the data","94c29a7c":"## With the grouping by award decade we can","f0fe8f61":"# Let's explore the awards this year in 2020.\n\nLet's focus on this era of the data to see the awards as it would of been a different era!","54b81419":"## Column for the decade the year was awarded \n\nThis will group the data into dates i.e. 40s, 50s, 60s etc.","ac4e9afb":"# Further investigation\n* Number of nominees per category \n* Films with the most nomiation\n* Films that won the most awards\n* Actors\/Actress that won the most awards","3fecb75c":"# Loading the data","1bc25a6b":"It seems like there are NaNs in the film category as they are 'Nominee' are film category.\n\nIn the next part...\n\nLet's add a new column, Actor or not actor\n\nAlso replace all NaN with the film title of the nomiee."}}