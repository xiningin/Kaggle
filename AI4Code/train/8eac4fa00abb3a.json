{"cell_type":{"cc0aadc5":"code","f540991f":"code","c0305534":"code","7c1f8c90":"code","ee9949de":"code","96d47571":"code","4d693393":"code","a853e66d":"code","14db700a":"code","a5d23a02":"code","674bbfef":"code","cea28b90":"code","60d8a87d":"code","f414b0b9":"code","da88f3f3":"code","692ad0fa":"code","9e7123e0":"code","30ccca53":"code","18caa499":"code","5314d6cd":"code","5220266a":"code","9988f08e":"code","c4a462dc":"code","85ac2572":"code","1353f00b":"code","beedb1a4":"code","2d49f3a1":"code","6f5d28df":"code","4f5f0720":"code","1dcd52c2":"code","ac932d8d":"code","03d882ae":"code","ea987348":"code","69444f7a":"code","f201d2fe":"code","43310677":"code","c3d27b17":"code","94fe4d6e":"code","62cedfb9":"code","daa8dd9a":"code","6d7c82a2":"code","278982eb":"code","5c5604e6":"code","4200c7b0":"code","6ffc9ece":"code","500cd373":"code","7c6cbbd6":"code","36f51e56":"code","99b2c9eb":"code","0b679fca":"code","f14d8ab0":"code","32570513":"code","2a7a9c35":"code","64f4753f":"code","c07a8c0a":"code","df1556a7":"code","0d0e371f":"code","d93af6de":"code","756d9a6d":"code","853ea730":"code","30799baa":"code","7aa5da95":"code","0c49fb7c":"code","cfa2362b":"code","efb7a0b6":"markdown","45601222":"markdown","33709956":"markdown","e2919889":"markdown","d717e100":"markdown","cdfd8189":"markdown","a2b0f54c":"markdown","dd496b66":"markdown","2a753807":"markdown","56c11b37":"markdown","f13fc588":"markdown","f0c4d582":"markdown","a7bc8966":"markdown","1c4b40dd":"markdown","1f8e6f1c":"markdown","258d027a":"markdown","d2cbde22":"markdown","4c3e96f9":"markdown","2217d7bc":"markdown","b3db4859":"markdown","fba48fa6":"markdown"},"source":{"cc0aadc5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","f540991f":"data=pd.read_csv('..\/input\/country-socioeconomic-data\/Country-data.csv')\ndata.head()","c0305534":"data['country'].value_counts()","7c1f8c90":"print('Categorical columns : ',list(data.select_dtypes(include='object').columns))\nprint('Numeric columns : ',list(data.select_dtypes(exclude='object').columns))","ee9949de":"num=data.select_dtypes(exclude='object')\nnum.head()","96d47571":"num.describe().T","4d693393":"print('No of categories in the county column are :',data['country'].nunique())","a853e66d":"print('% observations in each category :\\n',data['country'].value_counts(normalize=True)*100)","14db700a":"corr=num.corr() #### correlation table\ncorr","a5d23a02":"cov=num.cov() #### covariance table\ncov","674bbfef":"plt.figure(figsize=(15,8))\nsns.heatmap(corr,annot=True)\nplt.show()","cea28b90":"num.isnull().sum() ### no null values in the data","60d8a87d":"cols=list(num.columns)\nfor a in cols:\n    sns.distplot(num[a])\n    plt.show()","f414b0b9":"### Lowest 10 countries based on child_mortality\ndf=data[['country','child_mort']].sort_values('child_mort', ascending = False).head(10)\nsns.barplot(x='country',y='child_mort',data=df)\nplt.xticks(rotation=90)\nplt.show()","da88f3f3":"### Lowest 10 countries based on 'total_fer'\ndf=data[['country','total_fer']].sort_values('total_fer', ascending = False).head(10)\nsns.barplot(x='country',y='total_fer',data=df)\nplt.xticks(rotation=90)\nplt.show()","692ad0fa":"### Lowest 10 countries based on 'life_expec'\ndf=data[['country','life_expec']].sort_values('life_expec', ascending = False).head(10)\nsns.barplot(x='country',y='life_expec',data=df)\nplt.xticks(rotation=90)\nplt.show()","9e7123e0":"### Lowest 10 countries based on 'health'\ndf=data[['country','health']].sort_values('health', ascending = False).head(10)\nsns.barplot(x='country',y='health',data=df)\nplt.xticks(rotation=90)\nplt.show()","30ccca53":"### Lowest 10 countries based on 'gdpp'\ndf=data[['country','gdpp']].sort_values('gdpp', ascending = False).head(10)\nsns.barplot(x='country',y='gdpp',data=df)\nplt.xticks(rotation=90)\nplt.show()","18caa499":"### Lowest 10 countries based on 'income'\ndf=data[['country','income']].sort_values('income', ascending = False).head(10)\nsns.barplot(x='country',y='income',data=df)\nplt.xticks(rotation=90)\nplt.show()","5314d6cd":"### Lowest 10 countries based on 'inflation'\ndf=data[['country','inflation']].sort_values('inflation', ascending = False).head(10)\nsns.barplot(x='country',y='inflation',data=df)\nplt.xticks(rotation=90)\nplt.show()","5220266a":"### Lowest 10 countries based on 'exports'\ndf=data[['country','exports']].sort_values('exports', ascending = False).head(10)\nsns.barplot(x='country',y='exports',data=df)\nplt.xticks(rotation=90)\nplt.show()","9988f08e":"### Lowest 10 countries based on 'imports'\ndf=data[['country','imports']].sort_values('imports', ascending = False).head(10)\nsns.barplot(x='country',y='imports',data=df)\nplt.xticks(rotation=90)\nplt.show()","c4a462dc":"##### Scaling the data:\nfrom scipy.stats import zscore\nscale=num.apply(zscore)\nscale.head()","85ac2572":"cols=list(scale.columns)\nfor a in cols:\n    sns.boxplot(scale[a])\n    plt.show()","1353f00b":"cov_matrics=np.cov(scale.T)\ncov_matrics","beedb1a4":"\neign_values , eign_vect = np.linalg.eig(cov_matrics)\nprint ( \"Eigen Values:\\n\" , eign_values)\nprint('\\n Eigen vectors : \\n',eign_vect)\n","2d49f3a1":"eig_pairs = [(eign_values[index], eign_vect[:,index]) for index in range(len(eign_values))]\neig_pairs","6f5d28df":"total = sum( eign_values )\nvar_exp = [ ( i \/ total ) * 100 for i in sorted ( eign_values , reverse = True ) ]\ncum_var_exp = np.cumsum ( var_exp )\nprint(\"Cumulative Variance Explained\", cum_var_exp)","4f5f0720":"plt.bar(range(1,eign_values.size + 1), var_exp, alpha=0.5, align='center', label='individual explained variance')\nplt.step(range(1,eign_values.size + 1),cum_var_exp, where= 'mid', label='cumulative explained variance')\nplt.ylabel('Explained variance ratio')\nplt.xlabel('Principal components')\nplt.legend(loc = 'best')\nplt.show()","1dcd52c2":"#### KMeans without PCA:\nfrom sklearn.cluster import KMeans\n\nwcss = []\n\nfor k in range(1,10):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(scale)\n    wcss.append(kmeans.inertia_)","ac932d8d":"plt.figure(figsize=(12,6))\nplt.plot( range(1,10), wcss, marker = \"o\" )","03d882ae":"kmeans = KMeans(n_clusters=3)\nkmeans.fit(scale)","ea987348":"kmeans.labels_","69444f7a":"scale['Labels']=kmeans.labels_","f201d2fe":"#####  Agglomerative clustering without PCA\n\n### MAKING OF DENDOGRAM:\nfrom scipy.cluster.hierarchy import linkage, dendrogram,cophenet\nfrom scipy.spatial.distance import pdist\nplt.figure(figsize=[10,10])\nmerg = linkage(scale, method='ward')\ndendrogram(merg, leaf_rotation=90)\nplt.title('Dendrogram')\nplt.xlabel('Data Points')\nplt.ylabel('Euclidean Distances')\nplt.show()","43310677":"from sklearn.cluster import AgglomerativeClustering\n\nhie_clus = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')\ndf_AC = scale.drop('Labels',1).copy(deep=True)\ncluster2 = hie_clus.fit_predict(df_AC)\n\n\ndf_AC['label'] = cluster2","c3d27b17":"df_AC","94fe4d6e":"scale","62cedfb9":"### PLOTTING: WITHOUT PCA\n\nplt.title('K-Means Classes')\nsns.scatterplot(x='child_mort', y='life_expec', hue='Labels', data=scale)\nplt.show()\nplt.title('Hierarchical Classes')\nsns.scatterplot(x='child_mort', y='life_expec', hue='label', data=df_AC)\nplt.show()","daa8dd9a":"###### silhouette_score without pca for AC\nfrom sklearn.metrics import silhouette_score , cohen_kappa_score\nx_pca_AC=df_AC.drop('label',1)\nprint('silhouette_score for AC with pca :',silhouette_score (x_pca_AC , df_AC['label'] ))","6d7c82a2":"###### silhouette_score without pca for Kmeans\nfrom sklearn.metrics import silhouette_score , cohen_kappa_score\nx_pca_km=scale.drop('Labels',1)\nprint('silhouette_score for Kmeans without pca :',silhouette_score (x_pca_km , scale['Labels'] ))","278982eb":"from sklearn.decomposition import PCA","5c5604e6":"###### WITH PCA\ns=scale.drop('Labels',1)\np=PCA(n_components=5)\nd=p.fit_transform(s)\nd=pd.DataFrame(d,columns=['PC1','PC2','PC3','PC4','PC5'])\nd.shape","4200c7b0":"from sklearn.cluster import KMeans\n\nwcss = []\n\nfor k in range(1,10):\n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(d)\n    wcss.append(kmeans.inertia_)\n    \n","6ffc9ece":"# Visualization of k values:\n\nplt.plot(range(1,10), wcss, color='red',marker='*')\nplt.title('Graph of k values and WCSS')\nplt.xlabel('k values')\nplt.ylabel('wcss values')\nplt.show()","500cd373":"#### Optimal clusters are 3\nkm= KMeans(n_clusters=3)\nkm.fit(d)\nd['Labels']=km.labels_","7c6cbbd6":"ac=d.drop('Labels',1)","36f51e56":"###### Agglomerative clustering with PCA\n\nfrom scipy.cluster.hierarchy import linkage, dendrogram,cophenet\nfrom scipy.spatial.distance import pdist\nplt.figure(figsize=[10,10])\nmerg = linkage(ac, method='ward')\ndendrogram(merg, leaf_rotation=90)\nplt.title('Dendrogram')\nplt.xlabel('Data Points')\nplt.ylabel('Euclidean Distances')\nplt.show()","99b2c9eb":"##### Optimal clusters are 3\n\n#### HIERARCHICAL CLUSTERING:\nfrom sklearn.cluster import AgglomerativeClustering\n\nhie_clus = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')\ncluster2 = hie_clus.fit_predict(ac)\n\n\nac['label'] = cluster2","0b679fca":"plt.title('K-Means Classes')\nsns.scatterplot(x='PC1', y='PC2', hue='Labels', style='Labels', data=d)\nplt.show()\nplt.title('Hierarchical Classes')\nsns.scatterplot(x='PC1', y='PC2', hue='label', style='label', data=ac)\nplt.show()","f14d8ab0":"###### silhouette_score with pca AC \nfrom sklearn.metrics import silhouette_score , cohen_kappa_score\nx_pca_AC=ac.drop('label',1)\nprint('silhouette_score for AC with pca :',silhouette_score (x_pca_AC , ac['label'] ))","32570513":"###### silhouette_score with PCA Kmeans\nfrom sklearn.metrics import silhouette_score , cohen_kappa_score\nx_pca_km=d.drop('Labels',1)\nprint('silhouette_score for AC with pca :',silhouette_score (x_pca_km , d['Labels'] ))","2a7a9c35":"#### WIth pca kmean\nd.groupby('Labels').agg({'PC1':'mean','PC2':'mean','PC3':'mean','PC4':'mean','PC5':'mean'}).T","64f4753f":"#### Kmeans boxplot\nd.groupby('Labels').agg({'PC1':'mean','PC2':'mean','PC3':'mean','PC4':'mean','PC5':'mean'}).T.plot(kind='box')","c07a8c0a":"#### With PCA\nd1=pd.concat([d,data['country']],axis=1)","df1556a7":"d1.groupby('Labels').agg({'country':'count'})","0d0e371f":"##### Without PCA\nscale1=pd.concat([scale,data['country']],axis=1)","d93af6de":"scale1.groupby('Labels').agg({'country':'count'})","756d9a6d":"###### USing Kmeans clustering Labels\nclust_df = d1[['country','Labels']].merge(data, on = 'country')\nclust_df.head()\n","853ea730":"clust_exports = pd.DataFrame(clust_df.groupby(['Labels']).exports.mean())\nclust_health = pd.DataFrame(clust_df.groupby(['Labels']).health.mean())\nclust_imports = pd.DataFrame(clust_df.groupby(['Labels']).imports.mean())\nclust_income = pd.DataFrame(clust_df.groupby(['Labels']).income.mean())\nclust_inflation = pd.DataFrame(clust_df.groupby(['Labels']).inflation.mean())\nclust_life_expec = pd.DataFrame(clust_df.groupby(['Labels']).life_expec.mean())\nclust_total_fer = pd.DataFrame(clust_df.groupby(['Labels']).total_fer.mean())\nclust_gdpp = pd.DataFrame(clust_df.groupby(['Labels']).gdpp.mean())\nclust_child_mort=pd.DataFrame(clust_df.groupby(['Labels']).child_mort.mean())","30799baa":"df2 = pd.concat([pd.Series(list(range(0,5))), clust_child_mort,clust_exports, clust_health, clust_imports,\n               clust_income, clust_inflation, clust_life_expec,clust_total_fer,clust_gdpp], axis=1)\ndf2.columns = [\"Labels\", \"child_mort_mean\", \"exports_mean\", \"health_mean\", \"imports_mean\", \"income_mean\", \"inflation_mean\",\n               \"life_expec_mean\", \"total_fer_mean\", \"gdpp_mean\"]\ndf2","7aa5da95":"\nfig, axs = plt.subplots(3,3,figsize = (15,15))\nsns.barplot(x=df2.Labels, y=df2.child_mort_mean, ax = axs[0,0])\nsns.barplot(x=df2.Labels, y=df2.exports_mean, ax = axs[0,1])\nsns.barplot(x=df2.Labels, y=df2.health_mean, ax = axs[0,2])\nsns.barplot(x=df2.Labels, y=df2.imports_mean, ax = axs[1,0])\nsns.barplot(x=df2.Labels, y=df2.income_mean, ax = axs[1,1])\nsns.barplot(x=df2.Labels, y=df2.life_expec_mean, ax = axs[1,2])\nsns.barplot(x=df2.Labels, y=df2.inflation_mean, ax = axs[2,0])\nsns.barplot(x=df2.Labels, y=df2.total_fer_mean, ax = axs[2,1])\nsns.barplot(x=df2.Labels, y=df2.gdpp_mean, ax = axs[2,2])\nplt.tight_layout()","0c49fb7c":"clust_df[clust_df.Labels == 1].country.values","cfa2362b":"import pandas as pd\nCountry_data = pd.read_csv(\"..\/input\/country-socioeconomic-data\/Country-data.csv\")\ndata_dictionary = pd.read_csv(\"..\/input\/country-socioeconomic-data\/data-dictionary.csv\")","efb7a0b6":"##### 5 principal components explain 94% of the variance in the data , hence instead of using  9 features we can just use 5 principal components","45601222":"\n###### Reading the dataset ","33709956":"The dendogram shows that the optimal number of clusters are 3 ","e2919889":"##### After PCA the silhouette score increases \n#### From silhouette score the KMeans clustering is doing good \n#### A high value indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. ","d717e100":"#####  five-point summary for numerical variables ","cdfd8189":"######  covariance and correlation tables for the data ","a2b0f54c":"###### Summarizing observations for categorical variables ","dd496b66":"######  Data Preparation \n","2a753807":"**Aim is to find out the countries which are in dire need of funding .**","56c11b37":"###### PCA is a dimentianlity reduction technique where we can reduce the number of features on the basis of correlation.What it does is create components which will capture majority of the variance in the data .All the components will be orthogonal to each other and The first component will capture the most amount of information.By seeing the correlation among features , PCA will determine which features to combine so as to capture majority of the information.","f13fc588":"######  Applying PCA on the above dataset and determining the number of PCA components to be used ","f0c4d582":"###### Plotting a box plot to visualize the cluster means across different attributes ","a7bc8966":"#####  Evaluateing the clusters formed using  silhouette score\n","1c4b40dd":"#####  Evaluating the clusters formed using appropriate  silhouette score\n","1f8e6f1c":" ##### Using Kmeans lables with PCA for further Analysis","258d027a":"#### Their are few ouliers in each feature and gdpp has a lot of outliers but our dataset has very less information  and every row has data about a single county, hence removing outliers would lead to loss of information and we might loose the rows whcih will help determine the lowest countries in each category.\n#### Henec we will proceed without removal of outliers","d2cbde22":"###### without pca  their are 3 clusters as per the elbow curve","4c3e96f9":"The above are the countries that need highest attention and aid as they have low income means, low gdpp and have high child mortality rate along with high import along with health issues.","2217d7bc":"#####  Dimensionality Reduction Using PCA\n","b3db4859":"###### USING PCA DETERMINING THE OPTIMAL CLUSTERS","fba48fa6":"###### Plot to see the distribution of clusters using two features"}}