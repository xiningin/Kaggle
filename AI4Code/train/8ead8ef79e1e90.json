{"cell_type":{"41bb8546":"code","935d5963":"code","d87a0f8c":"code","5a611b36":"code","9135faf3":"code","872668b6":"code","f64459b8":"code","20131824":"code","f45165e3":"code","1d634431":"code","7eec9ca5":"code","a0a3b57d":"code","8022e2b7":"code","d2bb997d":"code","7a2050c8":"code","580eaad9":"code","7d055eac":"code","6f955259":"code","c804bfdb":"code","17a62d56":"code","e4b7df95":"markdown","10d61137":"markdown","63b35cbf":"markdown","3fcb06a8":"markdown","16e7ed40":"markdown","65044491":"markdown","97d661c6":"markdown","4365e463":"markdown"},"source":{"41bb8546":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","935d5963":"import sklearn\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom sklearn.model_selection import KFold\nfrom tensorflow.keras.layers.experimental.preprocessing import RandomRotation, RandomContrast\n","d87a0f8c":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/sample_submission.csv\")","5a611b36":"train.head()","9135faf3":"test.head()","872668b6":"train[\"file_path\"] = train[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/train\/\" + identifier + \".jpg\")\ntest[\"file_path\"] = test[\"Id\"].apply(lambda identifier: \"..\/input\/petfinder-pawpularity-score\/test\/\" + identifier + \".jpg\")","f64459b8":"train.head()","20131824":"train.columns","f45165e3":"columns = ['Subject Focus', 'Eyes', 'Face', 'Near', 'Action', 'Accessory',\n       'Group', 'Collage', 'Human', 'Occlusion', 'Info', 'Blur']","1d634431":"image_size = 128\nbatch_size =128","7eec9ca5":"def preprocess(image_url, tabular):\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    return (image, tabular[1:]), tf.cast(tabular[0], tf.float32)","a0a3b57d":"def build_tabular_model(inputs):\n   \n    x = keras.layers.Dense(12, activation='relu')(inputs)\n    x = keras.layers.Dense(64, activation='relu')(x)\n    x = keras.layers.Dropout(0.3)(x)\n    x = keras.layers.BatchNormalization()(x)\n    x = keras.layers.Dense(128, activation='relu')(x)\n    x = keras.layers.Dense(64, activation='relu')(x)\n    x = keras.layers.Concatenate()([x, inputs])\n    return x","8022e2b7":"def block(x, filters, kernel_size, repetitions, pool_size=2, strides=2):\n    for i in range(repetitions):\n        x = tf.keras.layers.Conv2D(filters, kernel_size, activation='relu', padding='same')(x)\n    x = tf.keras.layers.MaxPooling2D(pool_size, strides)(x)\n    return x","d2bb997d":"def get_model():\n    image_inputs = tf.keras.Input((image_size, image_size , 3))\n    tabular_inputs = tf.keras.Input(len(columns))\n    \n    resnet = ResNet50(include_top=False, weights= 'imagenet', pooling=None)\n    \n    image_x = resnet(RandomContrast(factor = 0.1)(RandomRotation(factor = 0.15)(image_inputs)))\n    \n    image_x = tf.keras.layers.GlobalAveragePooling2D()(image_x)\n    \n    tabular_x = build_tabular_model(tabular_inputs)\n    \n    x = tf.keras.layers.Concatenate(axis=1)([image_x, tabular_x])\n    output = tf.keras.layers.Dense(1)(x)\n    model = tf.keras.Model(inputs=[image_inputs, tabular_inputs], outputs=[output])\n    return model","7a2050c8":"model = get_model()\ntf.keras.utils.plot_model(model, show_shapes=True)","580eaad9":"def rmse(y_true, y_pred):\n    return tf.sqrt(tf.reduce_mean((y_true -  y_pred) ** 2))","7d055eac":"tf.keras.backend.clear_session()\nmodels = []\nhistorys = []\nkfold = KFold(n_splits=5, shuffle=True, random_state=42)\ntrain_best_fold = True\nbest_fold = 0\nfor index, (train_indices, val_indices) in enumerate(kfold.split(train)):\n    if train_best_fold and index != best_fold: continue\n    x_train = train.loc[train_indices, \"file_path\"]\n    tabular_train = train.loc[train_indices, [\"Pawpularity\"] + columns]\n    x_val= train.loc[val_indices, \"file_path\"]\n    tabular_val = train.loc[val_indices, [\"Pawpularity\"] + columns]\n    checkpoint_path = \"model_%d.h5\"%(index)\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, save_best_only=True)\n    early_stop = tf.keras.callbacks.EarlyStopping(min_delta=1e-4, patience=10)\n    reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(factor=0.3,patience=2, min_lr=1e-7)\n    callbacks = [early_stop, checkpoint, reduce_lr]    \n    optimizer = tf.keras.optimizers.Adam(1e-3)    \n    train_ds = tf.data.Dataset.from_tensor_slices((x_train, tabular_train)).map(preprocess).shuffle(512).batch(batch_size).cache().prefetch(2)\n    val_ds = tf.data.Dataset.from_tensor_slices((x_val, tabular_val)).map(preprocess).batch(batch_size).cache().prefetch(2)\n    model = get_model()\n    model.compile(loss = \"mse\", optimizer = optimizer, metrics = [\"mae\", rmse, \"mape\"])\n    history = model.fit(train_ds, epochs=300, validation_data=val_ds, callbacks=callbacks, batch_size = 8)\n    for metrics in [(\"loss\", \"val_loss\"), (\"mae\", \"val_mae\"), (\"mape\", \"val_mape\"), [\"lr\"]]:\n        pd.DataFrame(history.history, columns=metrics).plot()\n        plt.show()\n    model.load_weights(checkpoint_path)\n    historys.append(history)\n    models.append(model)","6f955259":"def preprocess_test_data(image_url, tabular):\n    print(image_url, tabular)\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    # 0 won't be used in prediction, but it's needed in this senario or the tabular variable is treated as label.\n    return (image, tabular), 0","c804bfdb":"test_ds = tf.data.Dataset.from_tensor_slices((test[\"file_path\"], test[columns])).map(preprocess_test_data).batch(batch_size).cache().prefetch(2)","17a62d56":"use_best_result = False\nif use_best_result:\n    if train_best_fold:\n        best_model = models[0]\n    else:\n        best_fold = 0\n        best_score = 10e8\n        for fold, history in enumerate(historys):\n            for val_rmse in history.history[\"val_rmse\"]:\n                if val_rmse < best_score:\n                    best_score = val_rmse\n                    best_fold = fold\n        print(\"Best Score:%.2f Best Fold: %d\"%(best_score, best_fold + 1))\n        best_model = models[best_fold]\n    results = best_model.predict(test_ds).reshape(-1)\nelse:\n    total_results = []\n    for model in models:\n        total_results.append(model.predict(test_ds).reshape(-1))\n    results = np.mean(total_results, axis=0).reshape(-1)\nsample_submission[\"Pawpularity\"] = results\nsample_submission.to_csv(\"submission.csv\", index=False)","e4b7df95":"**A PICTORIAL VIEW OF HOW THE MODEL LOOKS LIKE**","10d61137":"**THE MAIN 12 TABULAR FEATURES THAT WILL BE FED INTO ANN MODEL**","63b35cbf":"**FUNCTION TO CREATE RESNET CNN FOR IMAGE DATA AND CONCATENATING WITH THE OUTPUTS OF TABULAR FEATURES CREATED BY ANN MODEL**","3fcb06a8":"**USING LAMBDA APPLY FUNCTION TO ADD IMAGE PATH IN THE TABLE CORRESPONDING TO UNIQUE IMAGE ID**","16e7ed40":"**THE FUNCTION FOR CREATING A NEURAL NETWORK FOR TABULAR DATA**","65044491":"**THIS FUNCTION DOES THE NECESSARY IMAGE PREPROCESSING BY RESIZING , SCALING ETC.**","97d661c6":"**IMPORTING IMPORTANT LIBRARIES**","4365e463":"**DATA PREPROCESSING**"}}