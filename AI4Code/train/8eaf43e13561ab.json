{"cell_type":{"ca4e3f55":"code","0d811db4":"code","c8f02d48":"code","35f440b4":"code","fd7cf213":"code","f2b59c9d":"code","6207ffb3":"code","54261745":"code","a0bfb4c8":"code","596da389":"code","40a3168b":"code","a02cca45":"code","49710fb2":"code","54e5ff33":"code","07c92ef8":"code","ddf838cb":"code","c839c3e9":"code","029f5157":"code","0f3d58d8":"code","498c700d":"code","d2d83ef4":"code","4b3689ac":"code","e268d37f":"code","3f20e81f":"markdown","6c7f97d8":"markdown","0289ca43":"markdown","b9a8414e":"markdown","e1f50e8e":"markdown","f4a1d392":"markdown","f32bdcfb":"markdown","d67a1d40":"markdown","b7e07bc2":"markdown","d73906b8":"markdown","060c44d1":"markdown","ca46c07b":"markdown"},"source":{"ca4e3f55":"from __future__ import division\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import roc_curve, auc, mean_absolute_error, mean_squared_error\nimport sklearn.linear_model as lm\n\n\nsns.set_style('white')","0d811db4":"data = pd.read_csv('..\/input\/predicting-a-pulsar-star\/pulsar_stars.csv')\n\nprint('Number of features: %s' %data.shape[1])\nprint('Number of examples: %s' %data.shape[0])","c8f02d48":"data.columns = ['mean_profile', 'std_profile', 'kurtosis_profile', 'skewness_profile', 'mean_dmsnr',\n               'std_dmsnr', 'kurtosis_dmsnr', 'skewness_dmsnr', 'target']","35f440b4":"data.head()","fd7cf213":"data.describe()","f2b59c9d":"data.isnull().sum()\n\n# Dataset free from null values","6207ffb3":"plt.figure(figsize=(17,8))\ncbar_kws = { 'ticks' : [-1, -0.5, 0, 0.5, 1], 'orientation': 'vertical'}\nsns.heatmap(data.corr(), cbar_kws=cbar_kws, cmap='OrRd', annot=True, linewidths=0.3)\nplt.xticks(rotation=0)\nplt.title(\"Pearson correlations between features\", fontsize=15)","54261745":"plt.figure(figsize=(15,7))\nvis1 = sns.countplot(data['target'], palette='OrRd')\nplt.title('Distribution of target', fontsize=15)\nplt.xlabel('Target', fontsize=13)\nplt.ylabel('Count', fontsize=13)\n\nfor p in vis1.patches:\n    vis1.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \n               ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points', fontsize=13)","a0bfb4c8":"data1 = data.groupby('target')[['mean_profile','std_profile','kurtosis_profile','skewness_profile', 'mean_dmsnr',\n                      'std_dmsnr', 'kurtosis_dmsnr', 'skewness_dmsnr']].mean().reset_index()\n\ndata1= data1.transpose().reset_index()\ndata1.columns = ['features', 'Not Pulsar Star', 'Pulsar Star']","596da389":"plt.figure(figsize=(15,13))\nplt.subplot(211)\nvis2=sns.pointplot(data=data1.iloc[1:], x='features', y='Not Pulsar Star',color='b', label='Not Pulsar Star')\nvis3=sns.pointplot(data=data1.iloc[1:], x='features', y='Pulsar Star', color='r', label='Pulsar Star')\n\nplt.title('Mean values of features for every target class', fontsize=15)\nplt.xlabel('Feature', fontsize=13)\nplt.ylabel('Values', fontsize=13)\nplt.xticks(rotation=30)","40a3168b":"plt.figure(figsize=(15,10))\n\nplt.subplot(221)\nsns.boxplot(data=data, x='target', y='mean_profile', palette='OrRd')\nplt.ylabel('Mean Profile', fontsize=13)\nplt.xlabel('Pulsar Star', fontsize=13)\n\nplt.subplot(222)\nsns.boxplot(data=data, x='target', y='std_profile', palette='OrRd')\nplt.ylabel('Mean Profile', fontsize=13)\nplt.xlabel('Pulsar Star', fontsize=13)\n\nplt.subplot(223)\nsns.boxplot(data=data, x='target', y='mean_dmsnr', palette='OrRd')\nplt.ylabel('Mean Profile', fontsize=13)\nplt.xlabel('Pulsar Star', fontsize=13)\n\nplt.subplot(224)\nsns.boxplot(data=data, x='target', y='std_dmsnr', palette='OrRd')\nplt.ylabel('Mean Profile', fontsize=13)\nplt.xlabel('Pulsar Star', fontsize=13)","a02cca45":"plt.figure(figsize=(15,8))\nplt.subplot(121)\nsns.scatterplot(data=data[data['target']==1], x='kurtosis_profile', y='skewness_profile', label='Not Pulsar Star')\nsns.scatterplot(data=data[data['target']==0], x='kurtosis_profile', y='skewness_profile', label='Pulsar Star')\nplt.title('Profile', fontsize=15)\nplt.xlabel('Kurtosis profile', fontsize=13)\nplt.ylabel('Skweness profile', fontsize=13)\n\nplt.subplot(122)\nsns.scatterplot(data=data[data['target']==0], x='kurtosis_dmsnr', y='skewness_dmsnr', label='Pulsar Star')\nsns.scatterplot(data=data[data['target']==1], x='kurtosis_dmsnr', y='skewness_dmsnr', label='Not Pulsar Star')\nplt.title('DMSNR', fontsize=15)\nplt.xlabel('Kurtosis DMSNR', fontsize=13)\nplt.ylabel('Skweness DMSNR', fontsize=13)","49710fb2":"X = data.drop('target', axis=1)\ny = data['target']\n\nscaler = MinMaxScaler(feature_range=(0,1))\n\nfeatures_scaled = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","54e5ff33":"log = lm.LogisticRegression(random_state=4)\nknn = KNeighborsClassifier(n_neighbors=2)\ndtree = DecisionTreeClassifier(random_state=4)\nrtree = RandomForestClassifier(n_estimators=100, random_state=4)\nsvm = SVC(random_state=4)\nnb = GaussianNB()","07c92ef8":"def model_algorithm(algorithm, AX_train, AY_train, AX_test, AY_test, name):\n    print(\"Model: %s\" %name), '\\n'\n    algorithm.fit(AX_train,AY_train)\n    prediction = algorithm.predict(AX_test)\n    score_train = round(algorithm.score(AX_train,AY_train)*100)\n    score_test = round(algorithm.score(AX_test, AY_test)*100)\n    class_report = classification_report(AY_test, prediction)\n    print('Train Accuracy: %s' %score_train), '%'\n    print('Test Accuracy: %s' %score_test), '%', '\\n'\n    print('Classification report: '), '\\n'\n    print(class_report)\n    \n    plt.figure(figsize=(18,13))\n    plt.subplot(221)\n    sns.heatmap(confusion_matrix(AY_test, prediction), annot=True, cmap='OrRd', fmt='d',annot_kws={'size':15})\n    plt.title('Confusion Matrix of '+name, fontsize=16)\n    plt.xticks(fontsize=14)    \n    plt.yticks(fontsize=14)\n    \n    plt.subplot(222)\n    fpr, tpr, thresholds = roc_curve(AY_test, prediction)\n    plt.plot([0, 1], [0, 1], linestyle = \"dashed\" ,color=\"b\")\n    plt.plot(fpr, tpr ,color=\"red\", label=('Area under the curve: ', round(auc(fpr, tpr), 4)))\n    plt.title('ROC Curve of '+name, fontsize=16)\n    plt.xlabel('False Positive Rate', fontsize=14)\n    plt.ylabel('True Positive Rate', fontsize=14)\n    plt.legend(loc='best', fontsize=15)\n    \n    # metrics\n    mae = round(mean_absolute_error(AY_test, prediction),4)\n    mse = round(mean_squared_error(AY_test, prediction),4)\n    rmse = round(np.sqrt(mse),4)\n    \n    print('Metrics of: %s' %name), '\\n'\n    print('Mean Absolute Error: %s' %mae)\n    print('Mean Squred Error: %s' %mse)\n    print('Root Mean Squared Error: %s' %rmse)","ddf838cb":"model_algorithm(log, X_train, y_train, X_test, y_test, 'Logistic Regression')","c839c3e9":"model_algorithm(knn, X_train, y_train, X_test, y_test, 'K Nearest Neighbours')","029f5157":"model_algorithm(dtree, X_train, y_train, X_test, y_test, 'Decision Tree Classifier')","0f3d58d8":"model_algorithm(knn, X_train, y_train, X_test, y_test, 'Random Forest Classifier')","498c700d":"model_algorithm(svm, X_train, y_train, X_test, y_test, 'Support Vector Machine')","d2d83ef4":"model_algorithm(nb, X_train, y_train, X_test, y_test, 'Naive Bayesian')","4b3689ac":"print('Features Coefficients of Logistic Regression')\ndf = pd.DataFrame(log.coef_.ravel(),X_train.columns).reset_index()\ndf = df.rename(columns={\"index\":\"Feature\",0:\"Coefficient\"})\ndf = df.sort_values(by=\"Coefficient\",ascending = False)\ndf","e268d37f":"knn_score_list = []\nfor i in range(1,20):\n    knn_2 = KNeighborsClassifier(n_neighbors = i)\n    knn_2.fit(X_train, y_train)\n    knn_score_list.append(knn_2.score(X_test, y_test))\n \nplt.figure(figsize=(15,8))\nplt.plot(range(1,20), knn_score_list)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K values\")\nplt.ylabel(\"Score\")\n\nknn_acc_2_max = max(knn_score_list)*100\nprint(\"Maximum KNN Score is {:.2f}%\".format(knn_acc_2_max))","3f20e81f":"Models","6c7f97d8":"Mean values of every column for pulsar star and not pulsar star.\n","0289ca43":"Distribution of target class - Not Pulsar Star\/Pulsar Star","b9a8414e":"Function to create algorithms","e1f50e8e":"Boxplots for mean and std values.","f4a1d392":"**1. Exploring dataset**","f32bdcfb":"A **pulsar star** is a highly magnetized rotating neutron star that emits beams of electromagnetic radiation out of its magnetic poles. This radiation can be observed only when a beam of emission is pointing toward Earth (much like the way a lighthouse can be seen only when the light is pointed in the direction of an observer), and is responsible for the pulsed appearance of emission. Neutron stars are very dense, and have short, regular rotational periods. This produces a very precise interval between pulses that ranges from milliseconds to seconds for an individual pulsar. Pulsars are one of the candidates for the source of ultra-high-energy cosmic rays (see also centrifugal mechanism of acceleration).\n\nSource: Wikipedia","d67a1d40":"Pearson Correlations between values of dataset. \nBigger correlation with target has profile than dmsnr.","b7e07bc2":"Scatter plots for kurtosis and skweness for targets and for dmsnr and profile.","d73906b8":"![vela-pulsar-judy_600.jpg](attachment:vela-pulsar-judy_600.jpg)","060c44d1":"**3. Machine Learning - classifications**","ca46c07b":"**2. Visualisations of dataset**"}}