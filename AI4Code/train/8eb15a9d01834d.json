{"cell_type":{"521e8282":"code","6c991729":"code","295058a3":"code","291348a1":"code","3a103aa5":"code","07881307":"code","cce4499f":"code","4a914ab8":"code","d859e932":"code","4aacd37b":"code","107dfaf5":"code","0ca4ffdc":"code","08f29af2":"code","a22c6cad":"code","b01c4d7f":"code","8229404a":"code","858212a3":"code","3c9074c9":"markdown","fefd4b3a":"markdown","22f67cdc":"markdown","63e45e70":"markdown","bb0226fa":"markdown","737469be":"markdown","44cf7229":"markdown","42b515f5":"markdown","1b8a36cf":"markdown","9832b563":"markdown","a0fbe21a":"markdown"},"source":{"521e8282":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport math\n\nfrom sklearn.linear_model import LinearRegression,LogisticRegression,ElasticNet, Ridge, RidgeCV, LassoCV, Lasso\nfrom sklearn.model_selection import GridSearchCV,train_test_split, TimeSeriesSplit, GridSearchCV\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score # Maybe a problem\n\n#try TimeSeriesSplit\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c991729":"test_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv')","295058a3":"train_data.describe()","291348a1":"train_data.head()","3a103aa5":"tdata = train_data[(train_data['HHS Region']=='United States')&(train_data['Group']=='By Week')]","07881307":"tdata.drop(columns=['id','Data As Of','End Date', 'Group', 'Year', 'Month','HHS Region', 'Week-Ending Date', 'Total Deaths', 'Footnote'], axis = 1, inplace=True)","cce4499f":"tdata.head()","4a914ab8":"tdata.shape","d859e932":"tdata['Start Date'] = pd.to_datetime(tdata['Start Date'], format='%m\/%d\/%Y')","4aacd37b":"#Both race and age will be using their index in the arrays as their distinct age or race group\nage_ranges = ['0-4 years', '5-17 years', '18-29 years', '30-39 years', '40-49 years', '50-64 years', '65-74 years', '75-84 years', '85 years and over']\nrace = ['Hispanic', 'Non-Hispanic American Indian or Alaska Native', 'Non-Hispanic Asian', 'Non-Hispanic Black', 'Non-Hispanic More than one race', 'Non-Hispanic Native Hawaiian or Other Pacific Islander', 'Non-Hispanic White', 'Unknown']\n\ndef age_range(dt):\n    if dt['Age Group'] == '0-4 years':\n        return 0\n    elif dt['Age Group'] == '5-17 years':\n        return 1\n    elif dt['Age Group'] == '18-29 years':\n        return 2\n    elif dt['Age Group'] == '30-39 years':\n        return 3\n    elif dt['Age Group'] == '40-49 years':\n        return 4\n    elif dt['Age Group'] == '50-64 years':\n        return 5\n    elif dt['Age Group'] == '65-74 years':\n        return 6\n    elif dt['Age Group'] == '75-84 years':\n        return 7\n    elif dt['Age Group'] == '85 years and over':\n        return 8\n\ndef race_group(dt):\n    if dt['Race and Hispanic Origin Group'] == 'Hispanic':\n        return 0\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic American Indian or Alaska Native':\n        return 1\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic Asian':\n        return 2\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic Black':\n        return 3\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic More than one race':\n        return 4\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic Native Hawaiian or Other Pacific Islander':\n        return 5\n    elif dt['Race and Hispanic Origin Group'] == 'Non-Hispanic White':\n        return 6\n    elif dt['Race and Hispanic Origin Group'] == 'Unknown':\n        return 7\n    \ntdata['Age Range Index'] = tdata.apply(age_range, axis=1)\ntest_data['Age Range Index'] = tdata.apply(age_range, axis=1)\n#age_ranges.index(tdata['Age Group'])\ntdata['Race Index'] = tdata.apply(race_group, axis=1)\ntest_data['Race Index'] = tdata.apply(race_group, axis=1)\n#race.index(tdata['Race and Hispanic Origin Group'])\n\ntdata = tdata.set_index('Start Date')\ntdata.index.names=[\"Start_Date\"]","107dfaf5":"tdata.head(20)","0ca4ffdc":"#Train the Data with the different races\n#\n#cols = [ 'Age Range Index', 'Race Index']\ncols = ['MMWR Week', 'Race and Hispanic Origin Group', 'Age Group']\nX = pd.get_dummies(tdata[cols])\ny = tdata['COVID-19 Deaths']\n\n#X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\ntscv = TimeSeriesSplit()\nfor train_index, test_index in tscv.split(X):\n    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = y.iloc[train_index], y.iloc[test_index]","08f29af2":"from scipy import stats\n#import statsmodels.api as sm\n#ols_mod = sm.OLS(y,X).fit()\n#ols_pred = ols_mod.predict(X)\nols = LinearRegression().fit(X_train, y_train)\nols_pred = ols.predict(X_test)\n\nols_mse = mean_squared_error(y_test, ols_pred)\nols_rmse = math.sqrt(ols_mse)\n\n\n\nprint(ols_rmse)\nols_csv = cross_val_score(ols, X, y, cv=5)\nprint(ols_csv)\nstats.describe(ols_csv)","a22c6cad":"ridge_cv = RidgeCV(alphas= np.linspace(0.001, 100, num=100), cv=5).fit(X_train, y_train)\nridge_alpha = ridge_cv.alpha_\n\n#Building Model\nridge = Ridge(alpha = ridge_alpha).fit(X_train, y_train)\n\n#ridge = LogisticRegression().fit(X_train, y_train)\nridge_pred = ridge.predict(X_test)\n\nridge_mse = mean_squared_error(y_test, ridge_pred)\nridge_rmse = math.sqrt(ridge_mse)\nprint(ridge_rmse)","b01c4d7f":"lasso_cv = LassoCV(alphas= np.linspace(0.001, 100, num=100), normalize=True, cv=5).fit(X_train, y_train)\nlasso_alpha = lasso_cv.alpha_\n\nlasso = Lasso(alpha = lasso_alpha, normalize = True).fit(X_train, y_train)\n#\nlasso.coef_\nlasso_pred = lasso.predict(X_test)\nlasso_mse = mean_squared_error(y_test, lasso_pred)\nlasso_rmse = math.sqrt(lasso_mse)\nprint(lasso_rmse)","8229404a":"l1_space = np.linspace(0, 1, 30)\nparam_grid = {'l1_ratio':l1_space}\nen = ElasticNet()\n\ngs_cv = GridSearchCV(en, param_grid, cv=5).fit(X_train, y_train)\nen_pred = gs_cv.predict(X_test)\n\nen_mse = mean_squared_error(y_test, en_pred)\nen_rmse = math.sqrt(en_mse)\nprint(en_rmse)","858212a3":"X_test = pd.get_dummies(test_data[cols])\n\npreds = gs_cv.predict(X_test)\n\nout = pd.DataFrame({'Id': test_data.id, 'COVID-19 Deaths': preds})\nout.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","3c9074c9":"# Feature Engineering\n    We need a way to go through the strings and find a way to put them into ints or something to index them with","fefd4b3a":"# Ordinary Least Squares","22f67cdc":"# Extracting Usefull Data from the Training Data\n    Looked into the test data and found what we are trying to focus around which is in the Whole United States which the HHS region just seperates the different regions but if you add all of the regions together you get the the same information from United States part of the HHS region so we can ignore all of the different regions and look at the bigger picture. We can alsop ignore total deaths since we just wanna focus on the COVID deaths. We also do not care about the a lot of the dates so we can pick one of the dates and work from there so I'll pick 'Start Date'.","63e45e70":"# Ridge Regression","bb0226fa":"# Importing data from CSV","737469be":"# Elastic Net Regression","44cf7229":"# Creating Test Data","42b515f5":"# Converting date into Time Series","1b8a36cf":"# Exploratory Data Anlysis","9832b563":"# Lasso Regression","a0fbe21a":"# Predicting the Best Model"}}