{"cell_type":{"c499b914":"code","6d158986":"code","3a4428a9":"code","18b1292b":"code","30543147":"code","9ebf819d":"code","63408a9c":"code","04ace90d":"code","273042d8":"code","b86575ae":"code","a14473b3":"code","64f93d26":"code","bdb5e20f":"code","829a3e3b":"code","b970f489":"code","5b0cf9b1":"code","d5a10dea":"code","89ad4e5c":"code","f18424ff":"code","73c27d17":"code","a89ae62c":"code","f4298fb3":"code","795c0a4c":"code","02afa075":"code","86ee6432":"code","48281d6a":"code","a39a0782":"code","c88b2d4d":"code","798f0619":"code","a0484b8c":"markdown","6d22717a":"markdown"},"source":{"c499b914":"import os\nimport torch\nimport torchvision\nfrom torch.utils.data import random_split\nimport torchvision.models as models\nimport torch.nn as nn\nimport torch.nn.functional as F","6d158986":"data_dir  = '\/kaggle\/input\/garbage-classification\/Garbage classification\/Garbage classification'\n\nclasses = os.listdir(data_dir)\nprint(classes)","3a4428a9":"from torchvision.datasets import ImageFolder\nimport torchvision.transforms as transforms\n\ntransformations = transforms.Compose([transforms.Resize((256, 256)), transforms.ToTensor()])\n\ndataset = ImageFolder(data_dir, transform = transformations)","18b1292b":"import matplotlib.pyplot as plt\n%matplotlib inline\n\ndef show_sample(img, label):\n    print(\"Label:\", dataset.classes[label], \"(Class No: \"+ str(label) + \")\")\n    plt.imshow(img.permute(1, 2, 0))","30543147":"img, label = dataset[12]\nshow_sample(img, label)","9ebf819d":"random_seed = 42\ntorch.manual_seed(random_seed)","63408a9c":"train_ds, val_ds, test_ds = random_split(dataset, [1593, 176, 758])\nlen(train_ds), len(val_ds), len(test_ds)","04ace90d":"from torch.utils.data.dataloader import DataLoader\nbatch_size = 32","273042d8":"train_dl = DataLoader(train_ds, batch_size, shuffle = True, num_workers = 4, pin_memory = True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers = 4, pin_memory = True)","b86575ae":"from torchvision.utils import make_grid\n\ndef show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 6))\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.imshow(make_grid(images, nrow = 16).permute(1, 2, 0))\n        break","a14473b3":"show_batch(train_dl)","64f93d26":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch {}: train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch+1, result['train_loss'], result['val_loss'], result['val_acc']))","bdb5e20f":"class ResNet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, len(dataset.classes))\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n\nmodel = ResNet()","829a3e3b":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","b970f489":"device = get_default_device()\ndevice","5b0cf9b1":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device)","d5a10dea":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","89ad4e5c":"model = to_device(ResNet(), device)","f18424ff":"evaluate(model, val_dl)","73c27d17":"num_epochs = 8\nopt_func = torch.optim.Adam\nlr = 5.5e-5\n\nhistory = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","a89ae62c":"def predict_image(img, model):\n    # Convert to a batch of 1\n    xb = to_device(img.unsqueeze(0), device)\n    # Get predictions from model\n    yb = model(xb)\n    # Pick index with highest probability\n    prob, preds  = torch.max(yb, dim=1)\n    # Retrieve the class label\n    return dataset.classes[preds[0].item()]","f4298fb3":"img, label = test_ds[20]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","795c0a4c":"img, label = test_ds[50]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","02afa075":"img, label = test_ds[3]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))","86ee6432":"import urllib.request\n\nurllib.request.urlretrieve(\"https:\/\/static.theprint.in\/wp-content\/uploads\/2020\/03\/american-papers-scaled-e1584501468608.jpg\", \"sample.jpg\")","48281d6a":"loaded_model = model","a39a0782":"from PIL import Image\nfrom pathlib import Path\n\ndef predict_external_image(image_name):\n    image = Image.open(Path('.\/' + image_name))\n\n    example_image = transformations(image)\n    plt.imshow(example_image.permute(1, 2, 0))\n    print(\"The image resembles\", predict_image(example_image, loaded_model) + \".\")","c88b2d4d":"predict_external_image('sample.jpg')","798f0619":"model.save(\"capstone_segregation.h5\")","a0484b8c":"External Images","6d22717a":"# Predictions"}}