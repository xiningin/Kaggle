{"cell_type":{"f7769e50":"code","7e2c9620":"code","3360f97c":"code","8417db2a":"code","d892cc38":"code","77ee6038":"code","6b9e17f3":"code","27265c25":"code","dd096e04":"code","93eec545":"code","8499b3d5":"code","6c530522":"code","279cb8ee":"code","dccd2b43":"code","367a570f":"code","58d6fdcf":"code","ca619433":"code","e4ec5fb7":"code","2c1a1e40":"code","bb6aea1f":"code","2f0281cb":"code","69d7e0a8":"code","6b862596":"code","25c6c970":"code","0e0e3327":"code","d0fffee6":"code","95f67f4c":"code","879f76a8":"code","96ca9c7b":"code","64446e25":"code","79847972":"code","e3412e7a":"code","accec769":"code","795eb807":"markdown","46ab06dd":"markdown","18efd3f0":"markdown","4cbfcac5":"markdown"},"source":{"f7769e50":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt","7e2c9620":"netflix = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nnetflix.head()","3360f97c":"months = {\"January\":1,\n          \"February\":2,\n          \"March\":3,\n          \"April\":4,\n          \"May\":5,\n          \"June\":6,\n          \"July\":7,\n          \"August\":8,\n          \"September\":9,\n          \"October\":10,\n          \"November\":11,\n          \"December\":12}\n\nfor idx, row in enumerate(netflix[\"date_added\"]):\n    try:\n        year = row.split()[2]\n        month = months[row.split()[0]]\n        netflix.loc[idx, \"year_added\"] = year\n        netflix.loc[idx, \"month_added\"] = month\n    except AttributeError: #the row is empty\n        pass\n    \nnetflix.head()","8417db2a":"netflix_by_year = netflix[[\"type\",\"year_added\",\"month_added\"]]\nnetflix_by_year.groupby([\"type\",\"year_added\"]).count()","d892cc38":"fig, ax = plt.subplots(figsize=(15,7))\nnetflix_by_year.groupby([\"year_added\",\"type\"]).count()[\"month_added\"].unstack().plot.bar(ax=ax)\nplt.ylabel(\"count\")\nplt.xticks(rotation=45)\nplt.title(\"Number of Movie\/TV show added from 2008 to 2020\")\nplt.show()","77ee6038":"netflix_2019 = netflix[netflix[\"year_added\"]==\"2019\"]\nresult = netflix_2019[[\"type\",\"year_added\", \"month_added\"]]\nresult.groupby([\"type\",\"month_added\"]).count()","6b9e17f3":"fig, ax = plt.subplots(figsize=(15,7))\nresult.groupby([\"month_added\",\"type\"]).count()[\"year_added\"].unstack().plot.bar(ax=ax)\nplt.ylabel(\"count\")\nax.set_xticklabels(months.keys())\nplt.xticks(rotation=45)\nplt.title(\"Number of Movie\/TV show added each month in 2019\")\nplt.show()","27265c25":"director = []\nfor row in netflix[\"director\"]:\n    if type(row) == str: \n        director.extend([v.strip() for v in row.split(\",\")])\n\nx = np.array(director)\nunique_director = np.unique(x)\nprint(\"The number of unique directors:\", len(unique_director))\nunique_director #unique set of directors","dd096e04":"netflix_by_director = pd.DataFrame(index=unique_director)\nnetflix_by_director[\"title\"] = \"\"\nnetflix_by_director[\"count\"] = 0\nnetflix_by_director","93eec545":"for idx in range(len(netflix)):\n    title = netflix.loc[idx, \"title\"]\n    directors = netflix.loc[idx, \"director\"]\n    if type(directors) == str: #director is not empty\n        for d in directors.split(\",\"):\n            netflix_by_director.loc[d.strip(), \"count\"] += 1 #update count\n            if netflix_by_director.loc[d.strip(), \"title\"] == \"\": #update title\n                netflix_by_director.loc[d.strip(), \"title\"] += \"{}\".format(title)\n            else:\n                netflix_by_director.loc[d.strip(), \"title\"] += \" \/ {}\".format(title)\n                \nnetflix_by_director                ","8499b3d5":"for row in netflix_by_director[\"title\"]:\n    list1 = [v.strip() for v in row.split(\"\/\")]\n    list2 = list(set(list1))\n    if len(list1) != len(list2): #check duplicate values\n        print(list1, list2)","6c530522":"#remove duplicate values\ndup_list = [\"A.R. Murugadoss\", \"Eduardo Chauvet\", \"G.J. Echternkamp\", \"Gajendra Ahire\",\"Miguel Cohan\"]\nfor d in dup_list:\n    list1 = [v.strip() for v in netflix_by_director.loc[d,\"title\"].split(\"\/\")]\n    list2 = list(set(list1))\n    netflix_by_director.loc[d,\"title\"] = \" \/ \".join(list2) #update title\n    netflix_by_director.loc[d,\"count\"] -= 1 #update count","279cb8ee":"fig, ax = plt.subplots(figsize=(15,7))\nnetflix_by_director.sort_values(by=\"count\", ascending=False)[\"count\"][:20].plot.bar()\nplt.xlabel(\"directors\")\nplt.ylabel(\"count\")\nplt.xticks(rotation=45)\nplt.title(\"Number of Movie\/TV show on Netflix by Directors\")\nplt.show()","dccd2b43":"cast = []\nfor row in netflix[\"cast\"]:\n    if type(row) == str: \n        cast.extend([v.strip() for v in row.split(\",\")])\n\nx = np.array(cast)\nunique_cast = np.unique(x)\nprint(\"The number of unique casts:\", len(unique_cast))\nunique_cast #unique set of casts","367a570f":"netflix_by_cast = pd.DataFrame(index=unique_cast)\nnetflix_by_cast[\"title\"] = \"\"\nnetflix_by_cast[\"count\"] = 0\nnetflix_by_cast","58d6fdcf":"for idx in range(len(netflix)):\n    title = netflix.loc[idx, \"title\"]\n    casts = netflix.loc[idx, \"cast\"]\n    if type(casts) == str: #cast is not empty\n        for c in casts.split(\",\"):\n            netflix_by_cast.loc[c.strip(), \"count\"] += 1 #update count\n            if netflix_by_cast.loc[c.strip(), \"title\"] == \"\": #update title\n                netflix_by_cast.loc[c.strip(), \"title\"] += \"{}\".format(title)\n            else:\n                netflix_by_cast.loc[c.strip(), \"title\"] += \" \/ {}\".format(title)\n                \nnetflix_by_cast   ","ca619433":"netflix_by_cast.reset_index(inplace=True) #reset index \nnetflix_by_cast.head()","e4ec5fb7":"#remove duplicate values\nfor idx in range(len(netflix_by_cast)):\n    list1 = [v.strip() for v in netflix_by_cast.loc[idx,\"title\"].split(\"\/\")]\n    list2 = list(set(list1))\n    if len(list1) != len(list2):\n        netflix_by_cast.loc[idx,\"count\"] = len(list2) #update count\n        netflix_by_cast.loc[idx,\"title\"] = \" \/ \".join(list2) #update title\n        \nnetflix_by_cast.set_index(\"index\", inplace=True)\nnetflix_by_cast","2c1a1e40":"fig, ax = plt.subplots(figsize=(15,7))\nnetflix_by_cast.sort_values(by=\"count\", ascending=False)[\"count\"][:20].plot.bar() \nplt.xlabel(\"casts\")\nplt.ylabel(\"count\")\nplt.xticks(rotation=45)\nplt.title(\"Number of Movie\/TV show on Netflix by Casts\")\nplt.show()","bb6aea1f":"ratings = pd.read_csv(\"\/kaggle\/input\/netflix-movies-and-tv-shows-ratings\/IMDB_results_jan-28-2020.csv\")\nratings.head()","2f0281cb":"for idx in range(len(ratings)):\n    ratings.loc[idx, \"IMDB_title_name\"] = ratings.loc[idx, \"IMDB_title_name\"].split(\"(\")[0].strip().lower()\n    if ratings.loc[idx, \"IMDB_rating\"] != \"Not Found\":\n        ratings.loc[idx, \"IMDB_rating_cnt\"] = ratings.loc[idx, \"IMDB_rating\"].split()[3] #update rating\n        ratings.loc[idx, \"IMDB_rating\"] = ratings.loc[idx, \"IMDB_rating\"].split()[0] #update rating count\n        \nratings","69d7e0a8":"netflix[\"title_lower\"] = netflix[\"title\"].apply(lambda x: x.lower()) \nnetflix_with_ratings = netflix.set_index(\"title_lower\").join(ratings.set_index('IMDB_title_name')) #INNER JOIN netflix and IMDB data\nnetflix_with_ratings = netflix_with_ratings[[\"title\",\"IMDB_rating\",\"IMDB_rating_cnt\",\"country\"]]\nnetflix_with_ratings.reset_index(inplace=True)\nnetflix_with_ratings.drop(\"index\", axis=1, inplace=True)\nnetflix_with_ratings","6b862596":"netflix_with_ratings_dropna = netflix_with_ratings.dropna() #drop rows with NaN values\nnetflix_with_ratings_dropna.reset_index(inplace=True)\nnetflix_with_ratings_dropna.drop(\"index\", axis=1, inplace=True)\nnetflix_with_ratings_dropna","25c6c970":"netflix_with_ratings_sorted = netflix_with_ratings_dropna.sort_values(by=\"IMDB_rating\", ascending=False)\nnetflix_with_ratings_sorted.reset_index(inplace=True)\nnetflix_with_ratings_sorted.drop(\"index\", axis=1, inplace=True)\nnetflix_with_ratings_sorted","0e0e3327":"netflix_with_ratings_sorted[\"IMDB_rating\"] = netflix_with_ratings_sorted[\"IMDB_rating\"].astype(float) #convert data type into float","d0fffee6":"#check distribution of IMDB ratings\nprint(netflix_with_ratings_sorted[\"IMDB_rating\"].describe())\nfig, ax = plt.subplots(figsize=(15,7))\nplt.hist(netflix_with_ratings_sorted[\"IMDB_rating\"])\nplt.xlabel(\"IMDB ratings\")\nplt.ylabel(\"count\")\nplt.title(\"Distribution of IMDB ratings\")\nplt.show()","95f67f4c":"netflix_high_ratings = netflix_with_ratings_sorted[netflix_with_ratings_sorted[\"IMDB_rating\"]>=7.4]\nnetflix_high_ratings","879f76a8":"country = []\nfor row in netflix_high_ratings[\"country\"]:\n    country.extend([v.strip() for v in row.split(\",\")])\n\nx = np.array(country)\nunique_country = np.unique(x)\nprint(\"The number of unique countries:\", len(unique_country))\nunique_country #unique set of countries","96ca9c7b":"netflix_by_country = pd.DataFrame(index=unique_country)\nnetflix_by_country[\"title\"] = \"\"\nnetflix_by_country[\"count\"] = 0","64446e25":"for idx in range(len(netflix_high_ratings)):\n    title = netflix_high_ratings.loc[idx, \"title\"]\n    countries = netflix_high_ratings.loc[idx, \"country\"]\n    for c in countries.split(\",\"):\n        netflix_by_country.loc[c.strip(), \"count\"] += 1 #update count\n        if netflix_by_country.loc[c.strip(), \"title\"] == \"\": #update title\n            netflix_by_country.loc[c.strip(), \"title\"] += \"{}\".format(title)\n        else:\n            netflix_by_country.loc[c.strip(), \"title\"] += \" \/ {}\".format(title)\n                \nnetflix_by_country   ","79847972":"netflix_by_country_sorted = netflix_by_country.sort_values(by=\"count\", ascending=False)\nnetflix_by_country_sorted[\"ratio\"] = round((netflix_by_country_sorted[\"count\"]\/netflix_by_country_sorted[\"count\"].sum())*100, 2)\nnetflix_by_country_sorted","e3412e7a":"netflix_by_country_top10 = netflix_by_country_sorted\nnetflix_by_country_top10.loc[\"Other\",\"count\"] = netflix_by_country_sorted.loc[\"Germany\":\"Zimbabwe\",\"count\"].sum()\nnetflix_by_country_top10.loc[\"Other\",\"ratio\"] = netflix_by_country_sorted.loc[\"Germany\":\"Zimbabwe\",\"ratio\"].sum()\nnetflix_by_country_top10.drop(index=netflix_by_country_top10[\"Germany\":\"Zimbabwe\"].index, axis=0, inplace=True)\nnetflix_by_country_top10","accec769":"fig, ax = plt.subplots(figsize=(15,7))\nsizes = netflix_by_country_top10[\"ratio\"]\nlabels = netflix_by_country_top10.index\ntheme = plt.get_cmap('hsv') \nax.set_prop_cycle(\"color\", [theme(1. * i \/ len(sizes)) for i in range(len(sizes))])\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 countries on Netflix with high rating shows\")\nplt.show()","795eb807":"## 4. Netflix Data with IMDB Data","46ab06dd":"## 3. Netflix Data by Cast","18efd3f0":"## 1. Netflix Data","4cbfcac5":"## 2. Netflix Data by Director"}}