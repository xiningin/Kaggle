{"cell_type":{"eec94709":"code","fdfd6688":"code","fd99d1ba":"code","9f626150":"code","bc12f378":"code","ceb21210":"code","f84282b7":"code","fa8ac47d":"code","189a1e86":"code","f51227b7":"code","f9d1fce2":"code","e44ced47":"code","b6182b20":"code","0d115aa7":"code","79ee9887":"code","10497835":"code","efd542a3":"code","b953b8eb":"code","d8912ac6":"code","b3892b11":"markdown","e1464a24":"markdown","b9b0296b":"markdown","9ecd80c3":"markdown","a1be5b36":"markdown","c7e05e37":"markdown","026e0935":"markdown","7060ec12":"markdown","fc3777d4":"markdown","6547a9b2":"markdown","475a3dee":"markdown","f5756304":"markdown"},"source":{"eec94709":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport string\nimport csv\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn import linear_model\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score","fdfd6688":"from sklearn.model_selection import train_test_split\ntrain = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\nsubmit = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","fd99d1ba":"train.head()","9f626150":"print (train.shape, test.shape, submit.shape)","bc12f378":"print(train.isnull().sum())\nprint(test.isnull().sum())","ceb21210":"import matplotlib.pyplot as plt\nsns.countplot(y=train.target)","f84282b7":"train['text']","fa8ac47d":"import re\ndef clean(text):\n    text=re.sub(r'https?:\/\/\\S+', '', text)\n    text=re.sub(r'<.*?>','',text) \n    text=re.sub(r'\\n',' ', text)\n    text=re.sub('\\s+', ' ', text).strip()\n    return text","189a1e86":"train['text'] = train['text'].apply(lambda x : clean(x))","f51227b7":"train['text']","f9d1fce2":"def remove_emoji(text):\n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                           u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                           u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                           u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           u\"\\U00002702-\\U000027B0\"\n                           u\"\\U000024C2-\\U0001F251\"\n                           \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', text)\n\ntrain['text'] = train['text'].apply(lambda x: remove_emoji(x))\n\n\n# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b","e44ced47":"train['text']","b6182b20":"def remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\n#train_data['text'] = train_data['text'].apply(lambda x : remove_punct(x)","0d115aa7":"x = train[\"text\"]\ny = train[\"target\"]\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","79ee9887":"vectorize = CountVectorizer(stop_words = 'english')\nx_vector_train = vectorize.fit_transform(X_train)\nx_vector_test = vectorize.transform(X_test)\n","10497835":"model = MultinomialNB()\nmodel.fit(x_vector_train, y_train)\nprediction = model.predict(x_test_cv)\nacc=accuracy_score(y_test,prediction)\nprint(acc)\n","efd542a3":"clf =  linear_model.RidgeClassifier()\nclf.fit(x_vector_train, y_train)\nprediction1=clf.predict(x_test_cv)\nacc1=accuracy_score(y_test,prediction1)\nprint(acc1)","b953b8eb":"#predicting on the test values\nx_test=test[\"text\"]\n\n#vectorizing the data\nx_test_vector=vectorize.transform(x_test)\n\n#making predictions\nprediction=model.predict(x_test_vector)\n\n#making submission\nsubmit[\"target\"]=prediction\n\nprint(submit.head(10))\n\n\n","d8912ac6":"submit.to_csv(\"submission.csv\",index=False)","b3892b11":"Loading the training and test data using pandas library","e1464a24":"Our first model is the multinomial Naive Bayes model. Using the fit and predict methods and calculating the accuracy","b9b0296b":"Looking at the count of the null values","9ecd80c3":"Looking at some examples of training before cleaning the text","a1be5b36":"We need to vectorize the training dataset examples","c7e05e37":"Looking at the examples after cleaning the dataset","026e0935":"As we can see Multinomial Naive Bayes model performs a little better than Naive Bayes model by almost 2 percentage. Thus we will use that model to make our submission file","7060ec12":"Reading the first five values of the training dataset","fc3777d4":"We will test one more model called as Ridge Classifier and printing the accuracy","6547a9b2":"Assigning x to our text and y to our target column\n\nSplitting the training and testing dataset\/\n","475a3dee":"Defining a function to clean the dataset","f5756304":"Importing the necessary libraries"}}