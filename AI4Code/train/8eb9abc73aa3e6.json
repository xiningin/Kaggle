{"cell_type":{"b59c0647":"code","e3935a3c":"code","d4577104":"code","adf5fbe3":"code","77287f5d":"code","9ac50a43":"code","0f3c8cf0":"code","aa8b6154":"code","131231c3":"code","a95dc4f9":"code","7d99e61e":"code","86523d3e":"code","db8ca6fd":"code","f7d72fd6":"code","5b43012d":"code","0917f88c":"code","86c6dde0":"code","5949cc45":"code","55b3ae85":"code","441aebce":"code","bf6e4ef0":"code","fe6b4266":"code","99c71edc":"code","1b9cb058":"code","f72c3ef0":"code","f58efc49":"code","f1921de2":"code","79636f41":"code","cd03cb91":"code","8ea2a42f":"code","ef390f24":"code","f3e446f4":"code","5f5fb0b6":"markdown","55303b93":"markdown","60d8302b":"markdown","92d997ad":"markdown","39d1c3cc":"markdown","95147210":"markdown","bfc06672":"markdown","2c3f3304":"markdown","8e4ef3f8":"markdown","27d4c8bc":"markdown","6893c411":"markdown","ed488207":"markdown","28b496ff":"markdown","a6a093ee":"markdown","bb5637f0":"markdown","744566a5":"markdown","c98dd65f":"markdown","42ced64e":"markdown","1f66cad7":"markdown","c5da0d05":"markdown","f5def6e0":"markdown","8b9f0b33":"markdown","853da293":"markdown","76b2fe26":"markdown","23186d52":"markdown","b5bd8874":"markdown","79bdb6e5":"markdown","d67c359c":"markdown","bd658623":"markdown","61d14d8b":"markdown"},"source":{"b59c0647":"import os\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nimport itertools\n\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Activation, Flatten, Dropout, concatenate, Input, Conv2D, MaxPooling2D\nfrom keras.optimizers import Adam, Adadelta\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.utils.np_utils import to_categorical","e3935a3c":"train_dir = '..\/input\/plant-seedlings-classification\/train'\ntest_dir = '..\/input\/plant-seedlings-classification\/test'\nsample_submission = pd.read_csv('..\/input\/plant-seedlings-classification\/sample_submission.csv')\n","d4577104":"SPECIES = ['Black-grass', 'Charlock', 'Cleavers', 'Common Chickweed', 'Common wheat', 'Fat Hen',\n              'Loose Silky-bent', 'Maize', 'Scentless Mayweed', 'Shepherds Purse',\n              'Small-flowered Cranesbill', 'Sugar beet']\n\nfor species in SPECIES:\n    print('{} {} images'.format(species, len(os.listdir(os.path.join(train_dir, species)))))\n    ","adf5fbe3":"train = []\n\nfor species_num, species in enumerate(SPECIES):\n    for file in os.listdir(os.path.join(train_dir, species)):\n        train.append(['..\/input\/plant-seedlings-classification\/train\/{}\/{}'.format(species, file), species_num, species])\n        \ntrain = pd.DataFrame(train, columns=['file', 'species_num', 'species'])\n\nprint('Training Data: ',train.shape)\n","77287f5d":"def create_mask_for_plant(image):\n    image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n    sensitivity = 35\n    lower_hsv = np.array([60 - sensitivity, 100, 50])\n    upper_hsv = np.array([60 + sensitivity, 255, 255])\n\n    mask = cv2.inRange(image_hsv, lower_hsv, upper_hsv)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11,11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return mask\n\ndef segment_plant(image):\n    mask = create_mask_for_plant(image)\n    output = cv2.bitwise_and(image, image, mask = mask)\n    return output\n\ndef sharpen_image(image):\n    image_blurred = cv2.GaussianBlur(image, (0, 0), 3)\n    image_sharp = cv2.addWeighted(image, 1.5, image_blurred, -0.5, 0)\n    return image_sharp\n","9ac50a43":"%%time\n\nx_train = []\n\nfor i in range(len(train)):\n    img = cv2.imread(train['file'][i])\n    img = cv2.resize(img,dsize=(256,256))\n    img_stack = segment_plant(img)\n    img_stack = sharpen_image(img_stack)\n    img_stack = cv2.cvtColor( img_stack, cv2.COLOR_RGB2GRAY )\n    img_stack = np.reshape(img_stack,(256,256,1))\n    x_train.append(np.concatenate((np.array(img),np.array(img_stack)),axis=2))\n\nx_train = np.array(x_train)\n","0f3c8cf0":"# Input image\nInput_image = cv2.imread(train['file'][len(train)-1])\n\nplt.imshow(Input_image)\nplt.title('Input image, Shape: '+str(Input_image.shape))\nplt.show()\n\n# Resized image\nplt.imshow(img)\nplt.title('Resized image, Shape: '+str(img.shape))\nplt.show()\n        \n# Processed image to Stack\nplt.imshow(np.reshape(img_stack,(256,256)))\nplt.title('Processed image, Shape: '+str(img_stack.shape))\nplt.show()\n","aa8b6154":"labels = train['species_num']\nlabels = to_categorical(labels, num_classes = len(SPECIES))\n","131231c3":"x_train, x_val, y_train, y_val = train_test_split(x_train, labels, test_size = 0.1, random_state=10)\n","a95dc4f9":"input_shape = x_train[1].shape\nprint('Input Shape is :', input_shape)\n","7d99e61e":"from keras.layers import Conv2D, MaxPooling2D, BatchNormalization, ZeroPadding2D, Dropout, Flatten, Dense","86523d3e":"model = Sequential()\n\ninput_shape = (256, 256, 4)\n\nmodel.add(Conv2D(filters=64, kernel_size=1, padding='same', activation='relu', input_shape=input_shape))\nmodel.add(MaxPooling2D((3, 3), strides=2, padding='same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=128, kernel_size=3, padding='same', activation='relu'))\nmodel.add(MaxPooling2D((3, 3), strides=2, padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(filters=256, kernel_size=5, padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2), strides=2, padding='same'))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=64, kernel_size=5, padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2), strides=2, padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(50, activation='relu'))\n\nmodel.add(Dense(12, activation='softmax'))\n\nmodel.summary()","db8ca6fd":"model.compile(optimizer = Adam(lr=.00025) , loss = 'categorical_crossentropy', metrics=['accuracy'])\n","f7d72fd6":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, \n                                            factor=0.5, min_lr=0.00001)\n","5b43012d":"datagen = ImageDataGenerator(rotation_range=40, zoom_range = 0.2, width_shift_range=0.2, height_shift_range=0.2,\n                             horizontal_flip=True, vertical_flip=True)\ndatagen.fit(x_train)\n","0917f88c":"batch_size = 32\nepochs = 40\n","86c6dde0":"model.load_weights('..\/input\/cnn-model\/cnn_model.h5')","5949cc45":"# Training\n#history = model_new.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size), epochs = epochs,\n                                  #validation_data = (x_val,y_val), verbose = 1, \n                                  #steps_per_epoch=x_train.shape[0] \/\/ batch_size, \n                                  #callbacks=[learning_rate_reduction])","55b3ae85":"%%time\n\ntest = []\nfor file in os.listdir(os.path.join(test_dir)):\n    test.append(['..\/input\/plant-seedlings-classification\/test\/{}'.format(file)])\n\ntest = pd.DataFrame(test, columns=['file'])\nprint(test.head(5))\n\n\nx_test = []\n\nfor i in range(len(test)):\n    img = cv2.imread(test['file'][i])\n    img = cv2.resize(img,dsize=(256,256))\n    img_stack = segment_plant(img)\n    img_stack = sharpen_image(img_stack)\n    img_stack = cv2.cvtColor( img_stack, cv2.COLOR_RGB2GRAY )\n    img_stack = np.reshape(img_stack,(256,256,1))\n    x_test.append(np.concatenate((np.array(img),np.array(img_stack)),axis=2))\n\nx_test = np.array(x_test)\n","441aebce":"randm = np.random.randint(0,len(test))\n\nimg = cv2.imread(test['file'][randm])\nplt.imshow(img)\nplt.show()\n\nimg_processed = x_test[randm]\nplt.imshow(img_processed)\nplt.show()\n","bf6e4ef0":"score = model.evaluate(x_val,y_val)\nprint('Accuracy on Validation Set',score[1])","fe6b4266":"Pred_labels = np.argmax(model.predict(x_test),axis = 1)\n","99c71edc":"Pred_labels = pd.DataFrame(Pred_labels,index =None,columns=['species_num'])\n\ntest_id = []\nfor file in os.listdir(test_dir):\n    test_id.append(['{}'.format(file)])\n\ntest_id = pd.DataFrame(test_id, columns=['file'])\n\ntest_df = pd.DataFrame()\ntest_df['species_num'] = Pred_labels['species_num']\ntest_df['file'] = test_id['file']\ntest_df['species'] = [SPECIES[i] for i in Pred_labels['species_num']]\n\nsubmission = pd.merge(left=sample_submission, right=test_df[['file', 'species']], on=\"file\", how=\"right\")\nsubmission.drop(['species_x'], axis = 1, inplace = True)\nsubmission.columns = ['file','species'] \n\nsubmission.to_csv('submission.csv', index=False)\nprint(submission.head())\n","1b9cb058":"model_feat = Model(inputs=model.input,outputs=model.get_layer('dense_1').output)\n\nfeat_train = model_feat.predict(x_train)\nprint(feat_train.shape)\n\nfeat_val = model_feat.predict(x_val)\nprint(feat_val.shape)\n\nfeat_test = model_feat.predict(x_test)\nprint(feat_test.shape)\n","f72c3ef0":"from sklearn.model_selection import GridSearchCV\nfrom sklearn import svm, metrics, datasets","f58efc49":"param_grid = [\n  {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},\n ]\nsvc = svm.SVC()\nclf = GridSearchCV(svc, param_grid)\nclf.fit(feat_train,np.argmax(y_train,axis=1))","f1921de2":"clf.score(feat_train,np.argmax(y_train,axis=1))\n","79636f41":"clf.score(feat_val,np.argmax(y_val,axis=1))\n","cd03cb91":"Pred_labels = clf.predict(feat_test)\n","8ea2a42f":"Pred_labels = pd.DataFrame(Pred_labels,index =None,columns=['species_num'])\n\ntest_df = pd.DataFrame()\ntest_df['species_num'] = Pred_labels['species_num']\ntest_df['file'] = test_id['file']\ntest_df['species'] = [SPECIES[i] for i in Pred_labels['species_num']]\n\nsubmission = pd.merge(left=sample_submission, right=test_df[['file', 'species']], on=\"file\", how=\"right\")\nsubmission.drop(['species_x'], axis = 1, inplace = True)\nsubmission.columns = ['file','species'] \nprint(submission.head())\n\nsubmission.to_csv('submission_svm_linear.csv', index=False)","ef390f24":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.model_selection import GridSearchCV\nrf = RandomForestClassifier(n_jobs=-1)\nparam_grid = { \n    'n_estimators': [200, 500],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'max_depth' : [4,5,6,7,8],\n    'criterion' :['gini', 'entropy']\n}\nCV_rf = GridSearchCV(estimator=rf, param_grid=param_grid, cv= 3)\nCV_rf.fit(feat_train,np.argmax(y_train,axis=1))\nCV_rf.best_params_\n#Prediction Score[Training Set]\nprint('Prediction Score for Training Set' + str(CV_rf.score(feat_train,np.argmax(y_train,axis=1))))\n#PS on [Validation Set]\nprint('Prediction Score for Training Set' + str(CV_rf.score(feat_val,np.argmax(y_val,axis=1))))\n#Prediction on [Test] for competition\nPred_labels_RF = CV_rf.predict(feat_test)","f3e446f4":"Pred_labels = pd.DataFrame(Pred_labels_RF,index =None,columns=['species_num'])\n\ntest_df = pd.DataFrame()\ntest_df['species_num'] = Pred_labels_RF['species_num']\ntest_df['file'] = test_id['file']\ntest_df['species'] = [SPECIES[i] for i in Pred_labels_RF['species_num']]\n\nsubmission = pd.merge(left=sample_submission, right=test_df[['file', 'species']], on=\"file\", how=\"right\")\nsubmission.drop(['species_x'], axis = 1, inplace = True)\nsubmission.columns = ['file','species'] \nprint(submission.head())\n\nsubmission.to_csv('submission_RF.csv', index=False)","5f5fb0b6":"## <span style=\"color:teal\">Architecture<\/span>\n---","55303b93":"#### Prediction Score [Validation Features]","60d8302b":"#### Submission for Competition","92d997ad":"#### Applying SVM","39d1c3cc":"#### Prediction on Test Set","95147210":"#### Sample Test images","bfc06672":"#### Load Data","2c3f3304":"#### Compile the model","8e4ef3f8":"#### Different Species","27d4c8bc":"#### Set a learning rate annealer","6893c411":"#### Initialization","ed488207":"#### Prediction Score [Training Features]","28b496ff":"#### Submit Test results (Deep Neural Network with _New Model_)","a6a093ee":"#### Sample Images","bb5637f0":"#### Extracting Features from last Layer","744566a5":"#### One-hot Encoding","c98dd65f":"***\n## <span style=\"color:teal\">Applying Suppot Vector Machine<\/span>\n***","42ced64e":"### <span style=\"color:teal\">Predictions<\/span>\n***","1f66cad7":"#### CV-Partition","c5da0d05":"# <span style=\"color:teal\">Plant <\/span><span style=\"color:green\">*Seedlings*<\/span><span style=\"color:teal\"> Classification<\/span>\n***\n\n","f5def6e0":"#### Input Shape","8b9f0b33":"#### Load the Saved Weights *(pre-trained) *","853da293":"Submission for Competition","76b2fe26":"#### Training Data Files","23186d52":"#### Predict on [Test Features]","b5bd8874":"#### Prediction Score [Validation Set]","79bdb6e5":"#### Data Augumentation","d67c359c":"***\n## <span style=\"color:teal\">Applying Random Forest<\/span>\n***","bd658623":"#### Loading Traing Data","61d14d8b":"#### Image Pre-processing"}}