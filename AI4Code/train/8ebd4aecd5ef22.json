{"cell_type":{"1e825434":"code","1641f4b5":"code","5e98757e":"markdown","228ee833":"markdown","b9f53578":"markdown","3bd3a131":"markdown"},"source":{"1e825434":"from google.cloud import bigquery\n\nclient = bigquery.Client()\n# If you query a BQ dataset that wasn't noboard, link you GCP account and setup the bigquery.Client() as follows:\n# PROJECT_TO_RUN_JOBS = 'my-project-to-run-queries'\n# client = bigquery.Client(project=PROJECT_TO_RUN_JOBS)\n\n# List the tables in geo_openstreetmap dataset which resides in bigquery-public-data project:\ndataset = client.get_dataset('bigquery-public-data.geo_openstreetmap')\ntables = list(client.list_tables(dataset))\nprint([table.table_id for table in tables])","1641f4b5":"sql = '''\nSELECT nodes.*\nFROM `bigquery-public-data.geo_openstreetmap.planet_nodes` AS nodes\nJOIN UNNEST(all_tags) AS tags\nWHERE tags.key = 'amenity'\n  AND tags.value IN ('hospital',\n    'clinic',\n    'doctors')\nLIMIT 10\n'''\n# Set up the query\nquery_job = client.query(sql)\n\n# Make an API request  to run the query and return a pandas DataFrame\ndf = query_job.to_dataframe()\ndf.head(5)","5e98757e":"# Goal\nThe goal of this notebook is to get you started with a recently released geo-openstreetmap BigQuery public [dataset](https:\/\/console.cloud.google.com\/marketplace\/details\/openstreetmap\/geo-openstreetmap) which is an OpenStreetMap planet-wide snapshot as of November 2019.\n\nIn addition to the information that you can find on the GCP Marketplace page about the dataset, this notebook contains additional table and column descriptions and some query examples to help you getting COVID-19 insights from OSM data.\n\nThis is an initial version of the notebook. I'll keep providing more examples here. Comments and questions regarding querying this dataset are very welcome.\n\n# Updates\n\n* **Apr 23, 2020:** BigQuery OSM dataset was onboarded to Kaggle which means that now you can query it from a Kaggle kernel without a linked GCP account. You can skip *About geo-openstreetmap BigQuery dataset* and *Detailed table descriptions*. Those sections duplicate dataset descriptions, and were relevant when OSM dataset hadn\u2019t been published on Kaggle yet. \n\n# About geo-openstreetmap BigQuery dataset\nAdapted from Wikipedia: OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world. Created in 2004, it was inspired by the success of Wikipedia and more than two million registered users who can add data by manual survey, GPS devices, aerial photography, and other free sources.\n\nTo aid researchers, data scientists, and analysts in the effort to combat COVID-19, Google is making a hosted repository of public datasets including OpenStreetMap data, free to access and query through COVID-19 Public Dataset Program. The program will remain in effect until September 15, 2020.\n\nThis dataset contains the following tables:\n* `history_*` tables: full history of OSM objects.\n* `planet_*` tables: snapshot of current OSM objects as of Nov 2019.\n\nThe `history_*` and `planet_*` table groups are composed of node, way, relation, and changeset tables. These contain the primary OSM data types and an additional changeset corresponding to OSM edits for convenient access. These objects are encoded using the BigQuery GEOGRAPHY data type so that they can be operated upon with the built-in geography functions to perform geometry and feature selection, additional processing.\n\nYou can read more about OSM elements (nodes, ways, relations) on the [OSM Wiki](https:\/\/wiki.openstreetmap.org\/wiki\/Elements). \n\nThis dataset uses BigQuery GEOGRAPHY data type which supports a [set of functions](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/geography_functions) that can be used to analyze geographical data, determine spatial relationships between geographical features, and construct or manipulate GEOGRAPHYs.\n\n# Detailed table descriptions\nThe `history_*` and `planet_*` table groups contain the same set of tables (except `planet_features` and `planet_layers` which I'll describe shortly), they share the schemas, and the following descriptions apply to both groups. Just keep in mind that `planet_*` tables describe the current objects on our planet and `history_*` contains historical information:\n* `*_changesets`: Information about the changesets in which elements were modified\n* `*_nodes`: Planet nodes. A node represents a specific point on the earth's surface defined by its latitude and longitude.\n* `*_relations`: Planet relations. A relation documents a relationship between two or more data elements (nodes, ways, other relations).\n* `*_ways`: Planet ways. A way is an ordered list of nodes that define a linear feature and an area boundary.\n\nAnd here are the two additional tables in `planet_*` group. Basically they contain the same data as the above `planet_*` tables but the OSM objects are categorized and structured in a bit different way:\n1. `planet_features`: Auxiliary table produced by ogr2ogr utility. It reads OSW and categorizes nodes, ways, and relations into 5 layers (column `feature_type`):\n    * `points` : \u201cnode\u201d features that have significant tags attached.\n    * `lines` : \u201cway\u201d features that are recognized as non-area.\n    * `multilinestrings` : \u201crelation\u201d features that form a multilinestring(type = \u2018multilinestring\u2019 or type = \u2018route\u2019).\n    * `multipolygons` : \u201crelation\u201d features that form a multipolygon (type = \u2018multipolygon\u2019 or type = \u2018boundary\u2019), and \u201cway\u201d features that are recognized as area. \n    * `other_relations` : \u201crelation\u201d features that do not belong to the above 2 layers.\n1. `planet_layers`: Auxiliary table resulted from planet feature post-processing where feature tags were categorized to layers based to Geofabrik approach. \n\nIn BigQuery, the above two tables don't contain column descriptions, so, I'm providing it here:\n\n1. `planet_features` columns:\n    * `feature_type`: GDAL feature type for this object. One of: point, line, multilinestring, multipolygon, other_relation.\n    * `osm_id`: Object unique ID where feature_type=node or feature_type=relation, otherwise empty string.\n    * `osm_way_id`: Object unique ID where feature_type=way, otherwise empty string.\n    * `osm_version`: Version number for this object.\n    * `osm_timestamp`: Last-modified timestamp for this object.\n    * `all_tags`: Unstructured key=value attributes for this object.\n    * `geometry`: GEOGRAPHY-encoded object.\n1. `planet_layers` columns:\n    * `layer_code`: Geofabrik layer code. Example: 1003. Layers are hierarchical; The mask code=10xx corresponds to 'place' layers, and code=1003 corresponds to a 'village' type of place.\n    * `layer_class`: Geofabrik layer class, a friendly name for layer_code. Example: 'place'.\n    * `layer_name`: Geofabrik layer name, a friendly name for layer_code. Example: 'village'.\n    * `gdal_type`: GDAL feature type for this object. One of: point, line, multilinestring, multipolygon, other_relation.\n    * `osm_id`: Object unique ID where feature_type=node or feature_type=relation, otherwise empty string.\n    * `osm_way_id`: Object unique ID where feature_type=way, otherwise empty string.\n    * `osm_version`: Version number for this object.\n    * `osm_timestamp`: Last-modified timestamp for this object.\n    * `all_tags`: Unstructured key=value attributes for this object.\n    * `geometry`: GEOGRAPHY-encoded object.\n\nYou can find more about Geofabrik layers in their most recent *OpenStreetMap Data in Layered GIS Format* documentation. \n\n# Connect to BigQuery \n**Apr 23, 2020 update:** BigQuery OSM dataset was onboarded to Kaggle which means that now you can query it from a Kaggle kernel without a linked GCP account. To do so, you just add it as your input data on the right menu panel. You can still use a free tier if you\u2019d like to use BigQuery UI or want to query datasets that haven't been onboarded to the Kaggel platform.\n\nIf you don't have a GCP account you can start with a [free tier](https:\/\/cloud.google.com\/free). Note, that querying `geo-openstreetmap` as part of COVID-19 Public Dataset Program doesn't count against your free tier although the Marketplace description hasn't been updated yet and presently states the opposite. [COVID-19 Public Datasets](https:\/\/console.cloud.google.com\/marketplace\/details\/bigquery-public-datasets\/covid19-public-data-program?filter=category:covid19&id=7d6cc408-53c8-4485-a187-b8cb9a5c0b56) page contains information about free access.\n\nIf you want to get access to a BigQuery dataset that was not onboarded to Kaggle, which means you cannot select it as input, you can do so by linking your GCP account to the Kaggle notebook by choosing *Add-ons* menu and selecting *Google Cloud Settings*. ","228ee833":"# Example queries\nI'll provide a couple of examples to get you started. At this point it might be advantageous to go to the GCP console and use BigQuery UI to experiment with this dataset. BigQuery UI provides an interactive query mode which speeds up the exploration process. Moreover, you can run BigQuery jobs in [Geo Vis](https:\/\/cloud.google.com\/bigquery\/docs\/gis-getting-started) which helps to visualise BigQuery GIS data.\n\nWhen you're satisfied with your query and ready to incorporate it into your Kaggle notebook or join with a Kaggle dataset, you can get back to using `bigquery.Client()`. In my first example, I'll show how to use `bigquery.Client()` in a Kaggle notebook and export the query results into pandas dataframe.\n\nIf you want to query a BigQuery dataset that hasn\u2019t been onboarded to Kaggle, keep in mind the following. First of all note that when you use BigQuery you need to distinguish two types of GCP projects. The first project is where BigQuery's dataset resides. In this notebook you query the BigQuery public dataset which keeps its data in `bigquery-public-data`. You'll see the reference to this project in all my examples. The second project is your GCP project which you'll use to run your queries. This is the project that is passed to `bigquery.Client()` and if you use BigQuery UI you'll select this project in the top left corner. To summarize, the first project stores data, and the second project runs queries (and gets billed for it).\n\nIf you query an onboarded BigQuery dataset, which is true for OSM data, you just add it as your input and use `bigquery.Client()` with no project specified. \n\nHere is a link to [Python Client for Google BigQuery](https:\/\/googleapis.dev\/python\/bigquery\/latest\/index.html) documentation.","b9f53578":"## Example 2: Select all mapped hospitals in Singapore\n```\nWITH singapore AS (\n  SELECT ST_MAKEPOLYGON(ST_MAKELINE(\n    [ST_GEOGPOINT(103.6920359,1.1304753),ST_GEOGPOINT(104.0120359,1.1304753),\n     ST_GEOGPOINT(104.0120359,1.4504753),ST_GEOGPOINT(103.6920359,1.4504753)\n    ]\n  )) AS boundingbox\n)\n\nSELECT nodes.*\nFROM `bigquery-public-data.geo_openstreetmap.planet_nodes` AS nodes\nINNER JOIN UNNEST(all_tags) AS tags\nINNER JOIN singapore on ST_INTERSECTS(singapore.boundingbox, nodes.geometry)\nWHERE tags.key = 'amenity'\n  AND tags.value IN ('hospital',\n    'clinic',\n    'doctors')\nLIMIT 10\n```\n\n`singapore` subquery returns a bounding box around the Singapore area and the main query selects all hospitals within that boundingbox.\n\n## Example 3: What hospitals were removed from the map (presumably closed) in Singapore\nThis is how you can query the historical data.\n```\nWITH singapore AS (\n  SELECT ST_MAKEPOLYGON(ST_MAKELINE(\n    [ST_GEOGPOINT(103.6920359,1.1304753),ST_GEOGPOINT(104.0120359,1.1304753),\n     ST_GEOGPOINT(104.0120359,1.4504753),ST_GEOGPOINT(103.6920359,1.4504753)\n    ]\n  )) AS boundingbox\n)\nSELECT hist.*\nFROM `bigquery-public-data.geo_openstreetmap.history_nodes` AS hist\nINNER JOIN UNNEST(all_tags) AS tags\nINNER JOIN singapore on ST_INTERSECTS(singapore.boundingbox, hist.geometry)\nWHERE tags.key = 'amenity'\n  AND tags.value IN ('hospital',\n    'clinic',\n    'doctors')\n  AND hist.id NOT IN (\n    SELECT nodes.id\n    FROM `bigquery-public-data.geo_openstreetmap.planet_nodes` AS nodes\n    INNER JOIN UNNEST(all_tags) AS tags\n    INNER JOIN singapore on ST_INTERSECTS(singapore.boundingbox, nodes.geometry)\n    WHERE tags.key = 'amenity'\n      AND tags.value IN ('hospital',\n        'clinic',\n        'doctors')\n)\n```","3bd3a131":"## Example 1: Select all mapped hospitals worldwide\n```\nSELECT nodes.*\nFROM `bigquery-public-data.geo_openstreetmap.planet_nodes` AS nodes\nJOIN UNNEST(all_tags) AS tags\nWHERE tags.key = 'amenity'\n  AND tags.value IN ('hospital',\n    'clinic',\n    'doctors')\nLIMIT 10\n```\nNote here how column `all_tags`, which is the BigQuery array of records, was expanded. This is a common technique to work with this type of data. [Here](https:\/\/www.kaggle.com\/alexisbcook\/nested-and-repeated-data) is a nice explanation of how to work with BigQuery nested data structures in Kaggle notebooks.\n\nHere is how you can execute this query from the Kagle notebook:"}}