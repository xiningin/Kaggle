{"cell_type":{"00e7bea2":"code","793e9de5":"code","b37cfc0d":"code","9def5fdc":"code","becb3cde":"code","f531d8b4":"code","cff5c811":"code","802e696b":"code","7e228efe":"code","f8c54c8d":"code","416af80a":"code","54bd2566":"code","b31cfbab":"code","f431660a":"code","01fef547":"code","623fe04e":"code","5da9ec55":"code","e00afbd6":"code","e9bf4e71":"code","aaf64051":"code","4d1cebfc":"code","84821d20":"code","429c61a9":"code","ec7fe589":"code","da9e9538":"code","29534311":"code","af3fe6f5":"code","dc572ae1":"code","c954541b":"code","1b6cb53f":"code","64f9ddbc":"code","1deacedb":"code","c41acef1":"markdown","0e30b616":"markdown","d6e55614":"markdown","cb20319e":"markdown","d51401ab":"markdown","7674397e":"markdown","de544b72":"markdown","2a2fbbb8":"markdown"},"source":{"00e7bea2":"import numpy as np\nimport pandas as pd\nimport os\nimport time\nimport datetime\nimport gc\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom IPython.display import HTML\nimport json\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import NuSVR, SVR\npd.options.display.precision = 15\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold","793e9de5":"from fastai import *\nfrom fastai.imports import *\nfrom fastai.tabular import *\nfrom fastai.metrics import *\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, mean_absolute_error","b37cfc0d":"import os\nprint(os.listdir(\"..\/input\"))","9def5fdc":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsub = pd.read_csv('..\/input\/sample_submission.csv')","becb3cde":"train.head()","f531d8b4":"structures = pd.read_csv('..\/input\/structures.csv')\n\ndef map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain = map_atom_info(train, 0)\ntrain = map_atom_info(train, 1)\n\ntest = map_atom_info(test, 0)\ntest = map_atom_info(test, 1)","cff5c811":"%%time\ntrain_p_0 = train[['x_0', 'y_0', 'z_0']].values\ntrain_p_1 = train[['x_1', 'y_1', 'z_1']].values\ntest_p_0 = test[['x_0', 'y_0', 'z_0']].values\ntest_p_1 = test[['x_1', 'y_1', 'z_1']].values\n\ntr_a_min_b = train_p_0 - train_p_1\nte_a_min_b = test_p_0 - test_p_1\n\ntrain['dist'] = np.sqrt(np.einsum('ij,ij->i', tr_a_min_b, tr_a_min_b))\ntest['dist'] = np.sqrt(np.einsum('ij,ij->i', te_a_min_b, te_a_min_b))","802e696b":"train['dist_speedup_to_type_mean'] = train['dist'] \/ train.groupby('type')['dist'].transform('mean')\ntest['dist_speedup_to_type_mean'] = test['dist'] \/ test.groupby('type')['dist'].transform('mean')","7e228efe":"for f in ['type', 'atom_0', 'atom_1']:\n    lbl = LabelEncoder()\n    lbl.fit(list(train[f].values) + list(train[f].values))\n    train[f] = lbl.transform(list(train[f].values))\n    test[f] = lbl.transform(list(test[f].values))","f8c54c8d":"def metric(df, preds):\n    df[\"prediction\"] = preds\n    maes = []\n    for t in df.type.unique():\n        y_true = df[df.type==t].scalar_coupling_constant.values\n        y_pred = df[df.type==t].prediction.values\n        mae = np.log(metrics.mean_absolute_error(y_true, y_pred))\n        maes.append(mae)\n    return np.mean(maes)","416af80a":"train.head()","54bd2566":"tr = train.drop(['id', 'molecule_name'], axis=1)\nte = test.drop(['id', 'molecule_name'], axis=1)","b31cfbab":"dep_var = 'scalar_coupling_constant'\ncat_names = ['atom_index_0', 'atom_index_1', 'type', 'atom_0', 'atom_1']\ncont_names = tr.columns.tolist()\ncont_names.remove('scalar_coupling_constant')\ncont_names = [e for e in cont_names if e not in (cat_names)]\nprocs = [Categorify, Normalize]","f431660a":"np.random.seed(1984)\nidx = np.random.randint(0, len(tr), size=np.int(.2*len(tr)))","01fef547":"bs = 4096 \ndata = (TabularList.from_df(tr, \n                            cat_names=cat_names, \n                            cont_names=cont_names, \n                            procs=procs)\n                           .split_by_idx(idx)\n                           .label_from_df(cols=dep_var)\n                           .add_test(TabularList.from_df(te, \n                                                         cat_names=cat_names, \n                                                         cont_names=cont_names))\n                           .databunch(bs=bs))","623fe04e":"data.show_batch(rows=5)","5da9ec55":"data.show_batch(rows=5, ds_type=DatasetType.Valid)","e00afbd6":"data.show_batch(rows=5, ds_type=DatasetType.Test)","e9bf4e71":"def mean_absolute_error_fastai(pred:Tensor, targ:Tensor)->Rank0Tensor:\n    \"Mean absolute error between `pred` and `targ`.\"\n    pred,targ = flatten_check(pred,targ)\n    return F.l1_loss(pred, targ)","aaf64051":"learn = tabular_learner(data, \n                        layers=[1000,500,100], \n                        emb_drop=0.04,\n                        ps=(0.001, 0.01, 0.1),\n                        metrics=[mean_absolute_error_fastai, rmse], \n                        wd=1e-2).to_fp16()","4d1cebfc":"lr_find(learn, start_lr=1e-4, end_lr=10, num_it=100) #, start_lr=1e-2, end_lr=10, num_it=200\nlearn.recorder.plot()","84821d20":"lr = 2e-3\nlearn.fit_one_cycle(1, lr, wd=0.9)","429c61a9":"learn.fit_one_cycle(1, lr\/4, wd=0.8)","ec7fe589":"learn.fit_one_cycle(3, lr\/10, wd=0.8)","da9e9538":"learn.fit_one_cycle(1, lr\/10, wd=0.8)","29534311":"learn.fit_one_cycle(3, lr\/20, wd=0.9)","af3fe6f5":"learn.fit_one_cycle(3, lr\/40, wd=0.8)","dc572ae1":"val_preds = learn.get_preds(DatasetType.Valid)\ny_true = tr.iloc[idx].scalar_coupling_constant\ny_preds = val_preds[0][:,0].numpy()\ntypes = tr.iloc[idx].type","c954541b":"maes = []\nfor t in types.unique():\n    y_t = pd.Series(y_true[types==t])\n    y_p = pd.Series(y_preds[types==t])\n    mae = np.log(mean_absolute_error(y_t, y_p))\n    maes.append(mae)\n\nnp.mean(maes), np.log(mean_absolute_error(y_true, y_preds)), mean_absolute_error(y_true, y_preds)","1b6cb53f":"test_preds = learn.get_preds(DatasetType.Test)\npreds = test_preds[0].numpy()","64f9ddbc":"sample_submission = pd.read_csv('..\/input\/sample_submission.csv')\n\nbenchmark = sample_submission.copy()\nbenchmark['scalar_coupling_constant'] = preds\nbenchmark.to_csv('submission.csv', index=False)","1deacedb":"benchmark.head()","c41acef1":"Distance to type mean from : [Molecular Properties EDA and models](https:\/\/www.kaggle.com\/artgor\/molecular-properties-eda-and-models)","0e30b616":"I hope you will find this notebook useful for understanding how to implement [fastai's tabular model](https:\/\/course.fast.ai\/videos\/?lesson=4). There is a lot of tuning that can still be done, and the only feature that has been engineered is the distance.\n\nI made a slight adjustment to the fastai MAE metric, and I have found that the weighted MAE calculated below seems to give a good approximation of the Public LB.\n\nThanks and please upvote if you find this kernel useful.","d6e55614":"# Start fastai Tabular Learner","cb20319e":"Einsum distance calculation borrowed from: https:\/\/www.kaggle.com\/rakibilly\/faster-distance-calculation-from-benchmark","d51401ab":"Metric calculation from Abhishek's kernel: https:\/\/www.kaggle.com\/abhishek\/competition-metric","7674397e":"fin","de544b72":"# Predict and Submit","2a2fbbb8":"### Check Metrics"}}