{"cell_type":{"22563a5a":"code","be424d28":"code","96411459":"code","7c0a3404":"code","77900467":"code","5be06c9d":"code","51ba2cb2":"code","13b96823":"code","974b8714":"code","9309363a":"code","d8085282":"code","7c891e18":"code","0c41d986":"code","8af25cf6":"code","b9391161":"code","0c1ed03a":"code","44f83ba2":"code","f62b4e3d":"code","856357d9":"code","c382a750":"code","e59b4210":"code","7472eb50":"code","a64f3feb":"code","76d3112a":"code","01d0676e":"code","b6ab6091":"code","62203256":"code","5ade4dc0":"code","e441c5f0":"code","b15e1296":"code","85e122b7":"code","2096f07b":"code","be393c48":"code","b987f2a1":"code","317267e7":"code","974f5861":"code","8bffb05c":"code","c3c8efaf":"code","acc80a4e":"code","30ce779e":"code","b28632cb":"code","ecd86ebe":"code","fa9d8819":"code","8965279f":"code","3ac95d50":"code","b3b20db7":"code","ba77403b":"markdown","12a1035b":"markdown","6ea7bf08":"markdown","8c958376":"markdown","dd7966b3":"markdown","3e5f9b96":"markdown","610ebcb6":"markdown","83b52ec6":"markdown","8b32cd09":"markdown","0a2aeafc":"markdown","058c65a3":"markdown","0dbd1e31":"markdown","93b3c0ec":"markdown","b81aeb39":"markdown","bf71244c":"markdown","f12464b8":"markdown","a51a8be6":"markdown","4e197ad7":"markdown","57592c06":"markdown","a5221c3f":"markdown","a5723af4":"markdown","7a979f62":"markdown","1897b18b":"markdown","d5ca8c95":"markdown","d63d0d8f":"markdown","57e1ff72":"markdown","c1fa846d":"markdown","a31187d0":"markdown","f857f7ab":"markdown"},"source":{"22563a5a":"!pip install pdpipe","be424d28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport glob\nimport warnings\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt\nimport pdpipe as pdp\nfrom typing import Tuple, List, Dict\nimport plotly as py\nimport seaborn as sns\nimport statistics as stat\nimport category_encoders as ce\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96411459":"districts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')\n\n\n\n# set the size of the geo bubble\ndef set_size(value):\n    '''\n    Takes the numeric value of a parameter to visualize on a map (Plotly Geo-Scatter plot)\n    Returns a number to indicate the size of a bubble for a country which numeric attribute value \n    was supplied as an input\n    '''\n    result = np.log(1+value\/100)\n    if result < 0:\n        result = 0.001\n    return result\n\n","7c0a3404":"eng_path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data'\neng_files = glob.glob(eng_path + \"\/*.csv\")\n\nfiles = []\n\nfor file in eng_files:\n    df = pd.read_csv(file, index_col = None, header = 0)\n    district_id = file.split('\/')[4].split('.')[0]\n    df['district_id'] = district_id\n    files.append(df)\n    \nengagement = pd.concat(files)\nengagement = engagement.reset_index(drop = True)\n","77900467":"engagement.head()","5be06c9d":"engagement.info()","51ba2cb2":"total = engagement.isnull().sum().sort_values(ascending=False)\npercent = (engagement.isnull().sum()\/engagement.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","13b96823":"engagement = engagement.drop(engagement.loc[engagement['lp_id'].isnull()].index)\nengagement = engagement.fillna(0.0)\n","974b8714":"# cast lp_id and district_id to int, to enable merging with the products and districts info down the road\nengagement[\"lp_id\"] = engagement[\"lp_id\"].astype(int)\nengagement[\"district_id\"] = engagement[\"district_id\"].astype(int)\n#engagements_df[\"time\"] = pd.to_datetime(engagements_df[\"time\"])\nengagement.tail()","9309363a":"merged_data = pd.merge(engagement, districts, on=\"district_id\")\nproducts.rename(columns = {'LP ID': 'lp_id'}, inplace = True)\nmerged_data = pd.merge(merged_data, products, on=\"lp_id\")","d8085282":"agg_digi_learn_df = merged_data[merged_data[\"Primary Essential Function\"] == 'LC - Digital Learning Platforms']\nagg_engagement_data = agg_digi_learn_df.groupby([\"state\", \"time\"],as_index=False)[\"engagement_index\"].sum().reset_index()\nagg_engagement_data.head(10)","7c891e18":"agg_engagement_data.tail()","0c41d986":"# kudos to https:\/\/gist.github.com\/rogerallen\/1583593\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\npipeline = pdp.PdPipeline([\n    pdp.ApplyByCols('engagement_index', set_size, 'size', drop=False),\n    pdp.MapColVals('state', us_state_abbrev)\n])\n\nagg_engagement_data = pipeline.apply(agg_engagement_data)\n\nagg_engagement_data.fillna(0, inplace=True)\n\nagg_engagement_data = agg_engagement_data.sort_values(by='time', ascending=True)\nagg_engagement_data.tail()","8af25cf6":"fig = px.scatter_geo(\n    agg_engagement_data, locations=\"state\", locationmode='USA-states',\n    scope=\"usa\",\n    color=\"engagement_index\", \n    size='size', hover_name=\"state\", \n    range_color= [0, 100000], \n    projection=\"albers usa\", animation_frame=\"time\", \n    title='Engagement Index: LC - Digital Learning Platforms', \n    color_continuous_scale=\"portland\")\n\nfig.show()","b9391161":"engagement['time'] = pd.to_datetime(engagement['time'])","0c1ed03a":"districts.head()","44f83ba2":"missing_values_districts_count = districts.isnull().sum()\nmissing_values_districts_count[:]","f62b4e3d":"total_cells = np.product(districts.shape)\ntotal_missing = missing_values_districts_count.sum()\npercent_missing = (total_missing\/total_cells) * 100\nprint(percent_missing)","856357d9":"products.head()","c382a750":"missing_values_products_count = products.isnull().sum()\nmissing_values_products_count[:]","e59b4210":"total_cells = np.product(products.shape)\ntotal_missing = missing_values_products_count.sum()\npercent_missing = (total_missing\/total_cells) * 100\nprint(percent_missing)","7472eb50":"districts.dropna(inplace = True)","a64f3feb":"for i in ['pct_black\/hispanic', 'pct_free\/reduced']:\n    districts[i] = districts[i].apply(lambda x: float(x.split(',')[0][1:]) + 0.1)\n\ndistricts['pp_total_raw'] = districts['pp_total_raw'].apply(lambda x: int(x.split(',')[0][1:]) + 1000)\n\ndistricts.drop('county_connections_ratio', axis = 1, inplace = True)\n\ndistricts.head()","76d3112a":"districts.info()","01d0676e":"\nstate_abb = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District Of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\ndistricts['state_abb'] = districts['state'].map(state_abb)\n\nfig = go.Figure()\nlayout = dict(\n    title_text = \"Conteo de los distritos en los Estados disponibles\",\n    title_font = dict(\n            family = \"monospace\",\n            size = 25,\n            color = \"black\"\n            ),\n    geo_scope = 'usa'\n)\n\nfig.add_trace(\n    go.Choropleth(\n        locations = districts['state_abb'].value_counts().to_frame().reset_index()['index'],\n        zmax = 1,\n        z = districts['state_abb'].value_counts().to_frame().reset_index()['state_abb'],\n        locationmode = 'USA-states',\n        marker_line_color = 'white',\n        geo = 'geo',\n        colorscale = \"cividis\", \n    )\n)\n            \nfig.update_layout(layout)   \nfig.show()\n\nplt.figure(figsize = (15, 8))\nsns.set_style(\"white\")\na = sns.barplot(data = districts['state'].value_counts().reset_index(), x = 'state', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 15, color = '#283655')\n\nplt.show()","b6ab6091":"products['Basic_category'] = 'x'\nfor i in range(len(products)):\n    if pd.isna(products['Primary Essential Function'][i]) == False:\n        products['Basic_category'][i] = products['Primary Essential Function'][i].split('-')[0][:-1]\n        \nproducts.head()","62203256":"fig = px.pie(districts['locale'].value_counts().reset_index().rename(columns = {'locale': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = ' Conteo de los distritos <br>en cada tipo <br>de \u00e1rea', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","5ade4dc0":"colors = ['#90afc5', '#336b87', '#763626']\n\nfig = plt.figure(figsize = (15, 11))\nfor i in range(len(districts.columns.tolist()[3:6])):\n    plt.subplot(2, 2, i+1)\n    sns.set_style(\"white\")\n    plt.title(districts.columns.tolist()[3:6][i], size = 20, fontname = 'monospace', color = colors[i])\n    a = sns.kdeplot(districts[districts.columns.tolist()[3:6][i]], color = colors[i], shade = True, alpha = 0.9, linewidth = 1.5, edgecolor = 'black')\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\n\nplt.figtext(0.07, 1.05, 'Distribuci\u00f3n de las caracter\u00edsticas del distrito escolar', fontsize = 30, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.84, 0.37, 'Conclusi\u00f3n', fontsize = 25, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.98, 0.15, '''El n\u00famero promedio de estudiantes que se identificaron\ncomo negros o hispanos es el 23,2%. El valor m\u00e1s com\u00fan es el 10%.\n\nEl n\u00famero promedio de estudiantes elegibles \npara recibir servicios gratuitos o de precio reducido\nel almuerzo es del 38%. Los valores m\u00e1s comunes son ~ 30% y ~ 50%.\n\nGasto total por alumno (suma de los\ngastos) es de 11 205 $. \nEl valor m\u00e1s com\u00fan es 9 000 \\ $.''', fontsize = 13, fontname = 'monospace', color = '#283655', ha = 'right')\n\nplt.show()\n","e441c5f0":"dist_area_group = districts.groupby('locale').agg({'pct_black\/hispanic': 'mean', 'pct_free\/reduced': 'mean', 'pp_total_raw': 'mean'}).reset_index()\n\ncolors = ['#90afc5', '#336b87', '#763626']\n\nfig = plt.figure(figsize = (13, 12))\nfor i in range(len(dist_area_group.columns.tolist()[1:])):\n    plt.subplot(2, 2, i+1)\n    sns.set_style(\"white\")\n    plt.title(dist_area_group.columns.tolist()[1:][i], size = 20, fontname = 'monospace', y = 1.09, color = colors[i])\n    plt.grid(color = 'gray', linestyle = ':', axis = 'y', zorder = 0,  dashes = (1,7))\n    a = sns.barplot(data = dist_area_group, x = 'locale', y = dist_area_group.columns.tolist()[1:][i], color = colors[i])\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace', size = 14)\n    plt.yticks([])\n    \n    for j in ['right', 'top', 'left']:\n        a.spines[j].set_visible(False)\n    for j in ['bottom']:\n        a.spines[j].set_linewidth(1.4)\n      \n    if i < 2:\n        for p in a.patches:\n            height = p.get_height()\n            a.annotate(f'{int(height*100)} %', (p.get_x() + p.get_width() \/ 2, p.get_height()-0.03), \n                   ha = 'center', va = 'center', \n                   size = 18,\n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   color = 'white',\n                   fontname = 'monospace')\n    else:\n        for p in a.patches:\n            height = p.get_height()\n            a.annotate(f'{int(height)} $', (p.get_x() + p.get_width() \/ 2, p.get_height()-1000), \n                   ha = 'center', va = 'center', \n                   size = 18,\n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   color = 'white',\n                   fontname = 'monospace')\n            \nplt.figtext(0.07, 1.05, 'Caracter\u00edsticas de los distritos escolares por localidad', fontsize = 30, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.83, 0.34, 'Conclusi\u00f3n', fontsize = 25, fontname = 'monospace', color = '#283655')\n\nplt.figtext(0.99, 0.15, '''El mayor recuento de estudiantes que se identificaron\ncomo negros o hispanos en las grandes ciudades.\nEl recuento m\u00e1s peque\u00f1o se encuentra \nen los suburbios y \u00e1reas rurales.\n\nEn ciudades y pueblos, la mitad de \nlos estudiantes son elegibles.\npara almuerzo gratis o a precio reducido.\n\nLos gastos totales m\u00e1s altos por alumno \nse encuentran en la zona rural.''', fontsize = 13, fontname = 'monospace', color = '#283655', ha = 'right')\n        \nfig.tight_layout(pad = 3)\n\nplt.show()","b15e1296":"products.info()","85e122b7":"# Very important! The data is filled in incorrectly, which is why maaany people has an error, \n#because of which, for example, Adobe Inc company has 3, not 4 products.\nfor i in [' ', '.']:\n    for k in range(len(products)):\n        if pd.isna(products['Provider\/Company Name'][k]) == False:\n            products['Provider\/Company Name'][k] = products['Provider\/Company Name'][k].strip(i)\n\n# Let's fix the long name\nproducts['Provider\/Company Name'] = np.where(products['Provider\/Company Name'] == 'Savvas Learning Company | Formerly Pearson K12 Learning', 'Savvas Learning Company', products['Provider\/Company Name'])\n\nplt.figure(figsize = (15, 8))\nsns.set_style(\"white\")\nplt.title('TOP-15 de compa\u00f1\u00edas proveedoras de aprendizaje', size = 35, x = 0.48, y = 1.06, fontname = 'monospace', color = '#283655')\na = sns.barplot(data = products['Provider\/Company Name'].value_counts().reset_index().head(15), x = 'Provider\/Company Name', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 14, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(0.5 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 15, color = '#283655')\n\nplt.show()","2096f07b":"fig = px.pie(products['Sector(s)'].value_counts().reset_index().rename(columns = {'Sector(s)': 'count'}).head(15), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626', 'a43820'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Sector de educaci\u00f3n <br>donde se usa el producto', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","be393c48":"plt.figure(figsize = (12, 12))\nsns.set_style(\"white\")\nplt.title('Conteo de productos por subcategor\u00eda', size = 35, x = 0.2, y = 1.06, fontname = 'monospace', color = '#283655')\na = sns.barplot(data = products['Primary Essential Function'].value_counts().reset_index(), x = 'Primary Essential Function', y = 'index', color = '#90afc5')\nplt.xticks([])\nplt.yticks(fontname = 'monospace', fontsize = 10, color = '#283655')\nplt.ylabel('')\nplt.xlabel('')\n\na.spines['left'].set_linewidth(1.5)\nfor w in ['right', 'top', 'bottom']:\n    a.spines[w].set_visible(False)\n    \nfor p in a.patches:\n    width = p.get_width()\n    plt.text(1 + width, p.get_y() + 0.55 * p.get_height(), f'{int(width)}',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 11, color = '#283655')\n\nplt.show()\n##########\nfig = px.pie(products.query(\"Basic_category != 'x'\")['Basic_category'].value_counts().reset_index().rename(columns = {'Basic_category': 'count'}), values = 'count', names = 'index', width = 700, height = 700)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.7, \n                  marker = dict(colors = ['#90afc5','#336b87','#2a3132','#763626'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Conteo de productos <br>por categor\u00eda', \n                                      x = 0.5, y = 0.5, font_size = 26, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = '#283655')],\n                  showlegend = False)\n                  \nfig.show()","b987f2a1":"merged_data = pd.merge(products, engagement, left_on = 'lp_id', right_on = 'lp_id')\nmerged_data['district_id'] = merged_data['district_id'].astype('int64')\nmerged_data = pd.merge(merged_data, districts, on = 'district_id')\nmerged_data.drop(['URL', 'lp_id', 'state_abb'], axis = 1, inplace = True)\nmerged_data.head()","317267e7":"st_ac\u0441ess = merged_data.groupby(['state', 'time']).agg({'pct_access': 'mean'}).reset_index()\nst_eng = merged_data.groupby(['state', 'time']).agg({'engagement_index': 'mean'}).reset_index()\nloc_ac\u0441ess = merged_data.groupby(['locale', 'time']).agg({'pct_access': 'mean'}).reset_index()\nloc_eng = merged_data.groupby(['locale', 'time']).agg({'engagement_index': 'mean'}).reset_index()\ncat_ac\u0441ess = merged_data.groupby(['Basic_category', 'time']).agg({'pct_access': 'mean'}).reset_index()\ncat_eng = merged_data.groupby(['Basic_category', 'time']).agg({'engagement_index': 'mean'}).reset_index()\n\nfor i in [st_ac\u0441ess, st_eng, loc_ac\u0441ess, loc_eng, cat_ac\u0441ess, cat_eng]:\n    i['day_of_week'] = i['time'].dt.dayofweek\n    \nst_ac\u0441ess.head(3)","974f5861":"fig = px.line(st_ac\u0441ess, x=\"time\", y=\"pct_access\", color=\"state\", line_group=\"state\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Din\u00e1micas de pct_access de todos los productos por estado', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=2.7,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=2.25,\n        text=\"Vacaciones\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","8bffb05c":"fig = px.line(st_eng, x=\"time\", y=\"engagement_index\", color=\"state\", line_group=\"state\")\n\nfig.update_layout(plot_bgcolor = 'white', title = '\u00cdndice de din\u00e1mica de participaci\u00f3n de todos los productos por estados', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=1150,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=900,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","c3c8efaf":"months_map = {1:\"January\",2:\"February\",3:\"March\",4:\"April\",\n              5:\"May\",6:\"June\",7:\"July\",8:\"August\",9:\"September\",\n              10:\"October\",11:\"November\",12:\"December\"}\n\nfor i in [st_ac\u0441ess, st_eng]:\n    i['state_abb'] = i['state'].map(state_abb)\n    i['month'] = i.time.dt.month.map(months_map)\n\n    fig = px.choropleth(data_frame = i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index(), locations = \"state_abb\", locationmode = \"USA-states\",\n                    color = i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index()[i.groupby(['state', 'state_abb', 'month']).agg({i.columns[2]: 'mean'}).reset_index().columns[3]], scope = \"usa\",\n                    color_continuous_scale = \"cividis\", animation_frame = \"month\", hover_name = \"state\")\n    \n    fig.update_layout(title_text = f'Din\u00e1mica mensual de {i.columns[2]}', title_font = dict(family = \"monospace\",size = 25,color = \"black\")) \n    \n    fig.show()","acc80a4e":"cov_imp = pd.DataFrame(st_ac\u0441ess['state'].unique().tolist()).rename(columns = {0: 'state'})\n\n# We have no information about Texas during the start of pandemic\ncov_imp = cov_imp.query(\"state != 'Texas'\").reset_index()\ncov_imp.drop('index', axis = 1, inplace = True)\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp[i] = 0.0\n\nstates = cov_imp['state'].unique().tolist()\n\nfor i in states:\n    cov_imp['mean_access'][states.index(i)] = round(st_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & state == @i\")['pct_access'].mean(), 2)\n    cov_imp['1w_acess_change%'][states.index(i)] = round((st_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['pct_access'].mean() \/ cov_imp['mean_access'][states.index(i)] - 1) * 100, 1)\n    cov_imp['2w_acess_change%'][states.index(i)] = round((st_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & state == @i\")['pct_access'].mean() \/ st_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp['mean_eng'][states.index(i)] = round(st_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & state == @i\")['engagement_index'].mean(), 1)\n    cov_imp['1w_eng_change%'][states.index(i)] = round((st_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['engagement_index'].mean() \/ cov_imp['mean_eng'][states.index(i)] - 1) * 100, 1)\n    cov_imp['2w_eng_change%'][states.index(i)] = round((st_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & state == @i\")['engagement_index'].mean() \/ st_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & state == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ndef color_values(val):\n    color = 'red' if val < 0 else 'green'\n    return 'color: %s' % color\n\nslice_ = ['1w_acess_change%', '2w_acess_change%', '1w_eng_change%', '2w_eng_change%']\nslice_2 = ['mean_access', '1w_acess_change%', '2w_acess_change%']\nslice_3 = ['mean_eng', '1w_eng_change%', '2w_eng_change%']\ncov_imp.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)\n","30ce779e":"fig = px.line(loc_ac\u0441ess, x=\"time\", y=\"pct_access\", color=\"locale\", line_group=\"locale\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Din\u00e1mica de pct_access de todos los productos por localidad', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=2,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=1.75,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","b28632cb":"fig = px.line(loc_eng, x=\"time\", y=\"engagement_index\", color=\"locale\", line_group=\"locale\")\n\nfig.update_layout(plot_bgcolor = 'white', title = '\u00cdndice de din\u00e1mica de participaci\u00f3n de todos los productos por ubicaci\u00f3n', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=700,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=610,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","ecd86ebe":"cov_imp2 = pd.DataFrame(loc_ac\u0441ess['locale'].unique().tolist()).rename(columns = {0: 'locale'})\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp2[i] = 0.0\n\nlocales = cov_imp2['locale'].unique().tolist()\n\nfor i in locales:\n    cov_imp2['mean_access'][locales.index(i)] = round(loc_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & locale == @i\")['pct_access'].mean(), 2)\n    cov_imp2['1w_acess_change%'][locales.index(i)] = round((loc_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['pct_access'].mean() \/ cov_imp2['mean_access'][locales.index(i)] - 1) * 100, 1)\n    cov_imp2['2w_acess_change%'][locales.index(i)] = round((loc_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & locale == @i\")['pct_access'].mean() \/ loc_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp2['mean_eng'][locales.index(i)] = round(loc_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & locale == @i\")['engagement_index'].mean(), 1)\n    cov_imp2['1w_eng_change%'][locales.index(i)] = round((loc_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['engagement_index'].mean() \/ cov_imp2['mean_eng'][locales.index(i)] - 1) * 100, 1)\n    cov_imp2['2w_eng_change%'][locales.index(i)] = round((loc_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & locale == @i\")['engagement_index'].mean() \/ loc_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & locale == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ncov_imp2.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)\n","fa9d8819":"fig = px.line(cat_ac\u0441ess.query(\"Basic_category != 'x'\"), x=\"time\", y=\"pct_access\", color=\"Basic_category\", line_group=\"Basic_category\")\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Din\u00e1mica de pct_access de todos los productos por categor\u00eda', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=4.5,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=3.8,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","8965279f":"fig = px.line(cat_eng.query(\"Basic_category != 'x'\"), x=\"time\", y=\"engagement_index\", color=\"Basic_category\", line_group=\"Basic_category\")\n\nfig.update_layout(plot_bgcolor = 'white', title = '\u00cdndice de din\u00e1mica de participaci\u00f3n de todos los productos por categor\u00eda de producto', \n                  title_font_family = 'monospace', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'monospace', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.add_vline(x = '2020-03-11', line_width = 3, line_color=\"red\")\n\nfig.add_annotation(\n        x='2020-03-11',\n        y=1900,\n        text=\"WHO has declared Covid-19 a pandemic\",\n        showarrow=True,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            ),\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax= 130,\n        ay=1\n        )\n\nfig.add_vrect(x0=\"2020-06-01\", x1=\"2020-08-31\", fillcolor=\"yellow\", opacity=0.25, line_width=0)\n\nfig.add_annotation(\n        x='2020-07-15',\n        y=1600,\n        text=\"Summer holidays\",\n        showarrow=False,\n        font=dict(\n            family=\"monospace\",\n            size=11,\n            color=\"black\"\n            )\n        )\n\nfig.update_traces(line_width=1)\n\nfig.show()","3ac95d50":"cov_imp3 = pd.DataFrame(cat_eng.query(\"Basic_category != 'x'\")['Basic_category'].unique().tolist()).rename(columns = {0: 'Basic_category'})\n\nfor i in ['mean_access', '1w_acess_change%', '2w_acess_change%', 'mean_eng', '1w_eng_change%', '2w_eng_change%']:\n    cov_imp3[i] = 0.0\n\ncategories = cov_imp3['Basic_category'].unique().tolist()\n\nfor i in categories:\n    cov_imp3['mean_access'][categories.index(i)] = round(cat_ac\u0441ess.query(\"time >= '2020-03-09' & time <= '2020-03-13' & Basic_category == @i\")['pct_access'].mean(), 2)\n    cov_imp3['1w_acess_change%'][categories.index(i)] = round((cat_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['pct_access'].mean() \/ cov_imp3['mean_access'][categories.index(i)] - 1) * 100, 1)\n    cov_imp3['2w_acess_change%'][categories.index(i)] = round((cat_ac\u0441ess.query(\"time >= '2020-03-23' & time <= '2020-03-27' & Basic_category == @i\")['pct_access'].mean() \/ cat_ac\u0441ess.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['pct_access'].mean() - 1) * 100, 1)\n    cov_imp3['mean_eng'][categories.index(i)] = round(cat_eng.query(\"time >= '2020-03-09' & time <= '2020-03-13' & Basic_category == @i\")['engagement_index'].mean(), 1)\n    cov_imp3['1w_eng_change%'][categories.index(i)] = round((cat_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['engagement_index'].mean() \/ cov_imp3['mean_eng'][categories.index(i)] - 1) * 100, 1)\n    cov_imp3['2w_eng_change%'][categories.index(i)] = round((cat_eng.query(\"time >= '2020-03-23' & time <= '2020-03-27' & Basic_category == @i\")['engagement_index'].mean() \/ cat_eng.query(\"time >= '2020-03-16' & time <= '2020-03-20' & Basic_category == @i\")['engagement_index'].mean() - 1) * 100, 1)\n\ncov_imp3.style.applymap(color_values, subset = slice_).set_precision(1).set_properties(**{'background-color': '#fafafa'}, subset=slice_2).set_properties(**{'background-color': '#f7f7f7'}, subset=slice_3)","b3b20db7":"# features correlations \nplt.figure(figsize=(8,6))\ncorr_matrix = engagement.corr(method ='pearson')\nax = sns.heatmap(corr_matrix, cmap=\"YlGnBu\", annot=True)","ba77403b":"La informaci\u00f3n sobre el porcentaje de estudiantes del distrito identificados como Negro o Hispano basado en datos de la NCES de 2018-19. (pct_black \/ hispano), porcentaje de estudiantes en los distritos elegible para almuerzos gratis o a precio reducido basado en datos de 2018-19 NCES (pct_free \/ reduced), conectividad en los hogares (county_connections_ratio) y el gasto por alumno (pp_total_raw) se presenta en forma de intervalos, donde \"[a, b [\" significa que a \u2264 x <b. Todos los valores en pct_black \/ hispanic y pct_free \/ reduced tienen un intervalo de 20%, para una vista m\u00e1s comprensible podemos convertirlos a un solo valor con una desviaci\u00f3n de + - 10%. La informaci\u00f3n sobre county_connections_ratio est\u00e1 representada por el valor m\u00e1s abstracto del 18% al 100% y, desafortunadamente, esta informaci\u00f3n no sirve de nada. Todos los valores de pp_total_raw tienen un intervalo de 2000, siguiendo el ejemplo de las dos columnas anteriores, convertimos los valores a un solo valor con una desviaci\u00f3n de + - 1000.","12a1035b":"**Product information data** El archivo de productos `products_info.csv` incluye informaci\u00f3n sobre las caracter\u00edsticas de los 372 productos principales con la mayor\u00eda de los usuarios en 2020. Las categor\u00edas enumeradas en este archivo son parte de la taxonom\u00eda de productos de LearnPlatform. Nuestro equipo etiquet\u00f3 los datos. Es posible que algunos productos no tengan etiquetas debido a que est\u00e1n duplicados, a la falta de una URL precisa u otras razones.\n\n**Name** Descripci\u00f3n\n\n**LP ID** Identificador \u00fanico del producto \n\n**URL** Enlace Web a un producto espec\u00edfico \n\n**Product Name** Nombre de un producto espec\u00edfico \n\n**Provider\/Company Name** Nombre del proveedor del producto \n\n**Sector(s)** Sector de educaci\u00f3n donde se usa el producto \n\n**Primary Essential Function** Funci\u00f3n b\u00e1sica del producto. Aqu\u00ed hay dos capas de etiquetas. Los productos se etiquetan primero como una de estas tres categor\u00edas: \n\n**LC** = Aprendizaje y plan de estudios, \n\n**CM** = Gesti\u00f3n del sal\u00f3n de clases y \n\n**SDO** = Operaciones escolares y del distrito.\n\nCada una de estas categor\u00edas tiene varias subcategor\u00edas con las que se etiquetaron los productos.\n\n**Ejemplos de otras fuentes de datos p\u00fablicos relevantes** A continuaci\u00f3n se muestran algunos ejemplos de fuentes de datos p\u00fablicos relevantes (a nivel estatal): - [COVID-19 Base de datos de pol\u00edticas estatales de EE. UU.]","6ea7bf08":"**Cambios en los indicadores de actividad de los estudiantes promedio en los d\u00edas escolares 1 y 2 semanas despu\u00e9s del anuncio de la pandemia en todos los lugares.**","8c958376":"Existe corelaci\u00f3n en un 75% del porcentaje de acceso y la participaci\u00f3n de los estudiantes.","dd7966b3":"**SET UP THE NOTEBOOK**","3e5f9b96":"**District information data** El archivo de distritos `districts_info.csv` inclye informaci\u00f2n acerca de las caracter\u00edsticas del distrito escolar, incluyendo datos de [NCES](https:\/\/nces.ed.gov\/) (2018-19), [FCC](https:\/\/www.fcc.gov\/) (Dec 2018), y [Edunomics Lab](https:\/\/edunomicslab.org\/). En este conjunto de datos, removimos informaci\u00f2n identificable del distrito escolar. tambi\u00e9n usamos una herramienta de uso libre [ARX](https:\/\/arx.deidentifier.org\/) [(Prasser et al. 2020)](https:\/\/onlinelibrary.wiley.com\/doi\/full\/10.1002\/spe.2812) para transformar algunos campos y reducir el riesgo de re - identificaci\u00f3n. Para prop\u00f3sotos de generalizaci\u00f3n se publican algunos datos puntuales con un rango donde el valor actual cae debajo. Adicionalmente, hay muchos datos perdidos marcados como 'NaN' indicando que los datos fueron suprimidos para garantizar el anonimato del conjunto de datos. \n\n**Name** Descripci\u00f3n \n\n**district_id** Identificador \u00fanico del distrito escolar\n\n**state** Elestado de residencia del distrito \n\n**locale** NCES clasificaci\u00f3n local que categoriza el territorio de EEUU en cuatro tipos de \u00e1reas: Ciudad, Suburbana, Pueblo, y Rural.\n\n**pct_black\/hispanic** Porcentaje de estudiantes del distrito identificados como Negro o Hispano basado en datos de la NCES de 2018-19.\n\n**pct_free\/reduced** Porcentaje de estudiantes en los distritos elegible para almerzos gratis o a precio reducido basado en datos de 2018-19 NCES.\n\n**county_connections_ratio** `ratio` (conexiones residenciales fijas de alta velocidad de m\u00e1s de 200 kbps en al menos una direcci\u00f3n \/ hogares) seg\u00fan los datos a nivel de condado de FCC de 477 (versi\u00f3n de diciembre de 2018). Para mayor informci\u00f3n revisar [FCC data](https:\/\/www.fcc.gov\/form-477-county-data-internet-access-services). \n\n**pp_total_raw** Gasto total por alumno (suma de los gastos locales y federales) del proyecto de la base de datos de recursos educativos nacionales en escuelas (NERD$) de Edunomics Lab. Los datos de gastos est\u00e1n escuela por escuela y usamos el valor mediano para representar el gasto de un distrito escolar dado. \n","610ebcb6":"Google LLC es el proveedor l\u00edder de aprendizaje en l\u00ednea con 30 productos seguido de Microsoft con 6 productos.","83b52ec6":"La participaci\u00f3n promedio de los estudiantes luego de declarada la pandemia respecto a las categor\u00edas de productos disminuy\u00f3 para las de aprendizaje y plan de estudios y las operaciones escolares y de distrito, sin embargo aument\u00f3 para las categor\u00edas de gesti\u00f3n del sal\u00f3n de clases, es decir, los profesores.","8b32cd09":"**ACTIVIDADES DE LOS ESTUDIANTES**","0a2aeafc":"**Cambios en los indicadores de actividad promedio de los estudiantes en los d\u00edas escolares 1 y 2 semanas despu\u00e9s del anuncio de la pandemia en todos los estados.**","058c65a3":"**PROBLEMA**","0dbd1e31":"1. Describir el panorama de la conectividad y el compromiso digital en 2020.\n\n2. Medir el efecto de la pandemia de COVID-19 en el aprendizaje en l\u00ednea y a distancia, y c\u00f3mo podr\u00eda evolucionar tambi\u00e9n en el futuro.\n \n3. Medir el cambio de la participaci\u00f3n de los estudiantes con los diferentes tipos de tecnolog\u00eda educativa durante el transcurso de la pandemia.\n \n4. Medir la relaci\u00f3n entre la participaci\u00f3n de los estudiantes con:\n \n             4.1.  Las plataformas de aprendizaje en l\u00ednea y las diferentes geograf\u00edas.\n \n             4.2.  Contexto demogr\u00e1fico (por ejemplo, raza \/ etnia, ESL, discapacidad de aprendizaje)\n  \n             4.3.  Contexto de aprendizaje\n \n             4.4.  Estatus socioecon\u00f3mico\n  \n5. Determinar la correlaci\u00f3n entre ciertas intervenciones, pr\u00e1cticas o pol\u00edticas estatales (por ejemplo, est\u00edmulo, reapertura, moratoria de desalojo) con el aumento o la disminuci\u00f3n de la participaci\u00f3n en l\u00ednea.","93b3c0ec":"Un analisis de la variaci\u00f3n por localidad muestra que la participacion de los alumnos en la ciudad disminuy\u00f3 en un 64,5% mientras que en los sectores suburbanos aumento en 7,4%. Estos resultados son relevantes al momento de nalizar el factor de la distancia en la educaci\u00f3n. ","b81aeb39":"**Correlaci\u00f3n de datos**","bf71244c":"Los datos de participaci\u00f3n se basan en [LearnPlatform](https:\/\/learnplatform.com\/)\u2019s Student Chrome Extension. Esta extensi\u00f3n recoge el evento de carga de m\u00e1s de 10K productos tecnol\u00f3gicos de educaci\u00f3n en nuestra biblioteca de productos, incluyendo sitios web, apps, web apps, programas de software, extensiones, ebooks, hardwares, y servicios usados en instituciones acad\u00e9micas. \n\nLos datos de participaci\u00f3n han sido agregados al nivel de escolaridad del distrito, y cada archivo representa los datos de un distrito escolar. \n\nEl archivo de productos incluye informaci\u00f3n de las caracter\u00edsticas de los mejores 372 productos con m\u00e1s usuarios en 2020. \n\nEl archivo de distritos incluye informaci\u00f3n acerca del distrito escolar, incluyendo datos de: [National Center for Education Statistics (NCES)](https:\/\/nces.ed.gov\/), [The Federal Communications Commission (FCC)](https:\/\/www.fcc.gov\/), y [Edunomics Lab](https:\/\/edunomicslab.org\/). Adicional a los archivos provistos, esperamos que uses otras fuentes de datos p\u00fablicas como las que mensionamos a continuaci\u00f3n. \n\n**Estructura de los archivos**\n\nLa organizaci\u00f3n del conjunto de datos se describe a continuaci\u00f3n: ``` Root\/ -engagement_data\/ -1000.csv -1039.csv -... -districts_info.csv -products_info.csv -README.md ``` \n\n**Definicion de datos**\n\n**Engagement data** Los datos de participaci\u00f3n se agregan a nivel de distrito escolar y cada archivo en la carpeta `engagement_data` representa datos de un distrito escolar. \n\nLos cuatro digitos del nombre del archivo representados por `district_id` se pueden usar para enlazar la informaci\u00f3n del distrito en `district_info.csv`. \n\nEl `lp_id` puede ser usado para enlazar la informaci\u00f3n en `product_info.csv`. \n\n**Name** Descripci\u00f2n  \n\n**time** fecha en \"YYYY-MM-DD\"  \n\n**lp_id** El identificador \u00fanico del producto \n\n**pct_access** El porcentaje de estudiantes en el distrito tiene al menos un evento de carga de p\u00e1gina de un producto dado en un d\u00eda dado  \n\n**engagement_index** Total de eventos de p\u00e0ginas cargadas por cada cien estudiantes de un producto dado en un d\u00eca dado  \n","f12464b8":"El Centro Nacional para Estad\u00edstica Educativa (NCES) define cuatro grupos de localidad de acuerdo a su proximidad con la zona rural y el n\u00famero de habitantes. El gr\u00e1fico muestra que el 59% de los distritos se encuentran en zonas suburbanas, es decir, que se encuentran fuera del perimetro de la ciudad prinipal de un \u00e1rea metropolitana, seguido porla zona rural 17%, ciudad 13,6% y pueblo 10,2%.","a51a8be6":"Los productos de educaci\u00f3n en l\u00ednea son utilizados en un 42% por Prek-12, en un 32,7% por Prek-12, Higher Ed; Corpoerate, un 18% por Prek-12, Higher Ed.","4e197ad7":"Podemos identificar que existen celdas sin datos que fueron marcadas como NaN para indicar que los datos fueron suprimidos con el prop\u00f3sito de mantener el anonimato. \u00bfCu\u00e1ntas celdas vacias hay?","57592c06":"Resaltemos las categor\u00edas b\u00e1sicas de la Funci\u00f3n Esencial Primaria.","a5221c3f":"**PRODUCTOS**","a5723af4":"**Bases de Datos**","7a979f62":"**CARGANDO LOS DATOS**","1897b18b":"El impacto del COVID - 19 en el aprendizaje digital durante la primera y segunda semana despu\u00e9s de decalrada la pandemia est\u00e1 representdo en color rojo aquellos que disminuyeron y en color verde aquellos que aumentaron su participaci\u00f3n o mostraron mayor interes en el aprendizaje en l\u00ednea.","d5ca8c95":"La pandemia COVID-19 ha interrumpido el aprendizaje de m\u00e1s de 56 millones de estudiantes en los Estados Unidos. En la primavera de 2020, la mayor\u00eda de los gobiernos estatales y locales de los EE. UU. Cerraron las instituciones educativas para detener la propagaci\u00f3n del virus. En respuesta, las escuelas y los maestros han intentado llegar a los estudiantes de forma remota a trav\u00e9s de herramientas de aprendizaje a distancia y plataformas digitales. Hasta el d\u00eda de hoy, las preocupaciones sobre la exacerbaci\u00f3n de la brecha digital y la p\u00e9rdida de aprendizaje a largo plazo entre los estudiantes m\u00e1s vulnerables de Estados Unidos contin\u00faan creciendo.","d63d0d8f":"**Cambios en los indicadores de actividad de los estudiantes promedio en los d\u00edas escolares 1 y 2 semanas despu\u00e9s del anuncio de la pandemia en cada categor\u00eda de producto.**","57e1ff72":"Los gr\u00e1ficos describen el n\u00famero de distritos por Estado, Utah (29), Illinois (18), indiana (7), Washington (6), Missouri (5) y New York (5) corresponde al 80% del total de distritos.","c1fa846d":"Existen 74 subcategorias de productos dirigidos al aprendizae en l\u00ednea que representa un 77,3%, un 9,66% corresponde a la gesti\u00f3n del sal\u00f3n en clases y un 8,52% a operaciones escolares y de distrito. ","a31187d0":"En una comparaci\u00f3n realizada por The Annie E. Casey Foundation Los estados l\u00edderes en educaci\u00f3n en los Estados Unidos son Nueva Jersey que ocupa el primer lugar, seguido por Massachusetts y Conneticut, mientras que Oklahoma, Alaska y Nuevo M\u00e9xico est\u00e1n en los \u00faltmos lugares.","f857f7ab":"**OBJETIVOS**"}}