{"cell_type":{"c57a175f":"code","7818299a":"code","3c2fa87b":"code","8b51f288":"code","5f33d726":"code","ea808fae":"code","689293a3":"code","f9ac335f":"code","2d83e07e":"code","3c0fb8a5":"code","de3622da":"code","875d10e0":"code","782f681a":"code","4e4bd745":"markdown","9c49e376":"markdown","66e549ab":"markdown","cea95d48":"markdown","5eeccd2e":"markdown","7ff3666d":"markdown","db6d4f09":"markdown","08cd48dd":"markdown","1151bc6a":"markdown","99a2f628":"markdown","f772cbd2":"markdown"},"source":{"c57a175f":"# import the needed libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.utils import to_categorical\nimport pandas as pd","7818299a":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest  = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","3c2fa87b":"# convert to numpy matrices\ntrain_mat=train.to_numpy()\ntest_mat=test.to_numpy()","8b51f288":"# extract labels from training dataset\ny_train=train_mat[:,0]\nx_train=train_mat[:,1:]\n\nx_test=test_mat\n\n# reshape arrays to have 2D images\nx_train=x_train.reshape(x_train.shape[0],28,28,1)\nx_test=x_test.reshape(x_test.shape[0],28,28,1)\n\n# data normalization\nx_train=x_train\/255\nx_test=x_test\/255\n\n# labels to categories\ny_train = to_categorical(y_train)","5f33d726":"for i in range(0,16):\n  plt.subplot(4,4,i+1)\n  plt.imshow(x_train[i,:,:,0])\n  plt.axis('off');","ea808fae":"from sklearn.model_selection import train_test_split\n\n# Split the train and the validation set for the fitting\nX_t, X_v, Y_t, Y_v = train_test_split(x_train, y_train, test_size = 0.2, random_state=1)","689293a3":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),strides=1,padding='same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Dropout(0.25))\nmodel.add(MaxPooling2D((2,2),strides=2))\nmodel.add(Conv2D(64,(3,3),strides=1,padding='same',activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(MaxPooling2D((2,2),strides=2))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10,activation='softmax'))\nmodel.summary()","f9ac335f":"model.compile(optimizer='sgd',metrics=['accuracy'],loss='categorical_crossentropy')","2d83e07e":"history=model.fit(X_t,Y_t,validation_data=(X_v,Y_v),batch_size=100,epochs=100,verbose=False)","3c0fb8a5":"model.evaluate(x_train,y_train)","de3622da":"# Plot training & validation accuracy values\nplt.figure(figsize=(9,3))\nplt.subplot(1,2,1)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='lower right')\nplt.subplot(1,2,2)\n# Plot training & validation loss values\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper right');","875d10e0":"predictions=model.predict(x_test)\nlabels=np.argmax(predictions,axis=1)\nresults = pd.Series(labels,name=\"Label\")\nfinal = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)","782f681a":"final.to_csv(\"submission.csv\",index=False)","4e4bd745":"The figure shows the first 16 pictures in the training dataset.","9c49e376":"# Classification of the MNIST dataset using convolutional neural networks (CNNs)\n\nThis jupyter notebook shows an example of application of **convolutional neural networks (CNNs)** to perform image classification. In particular, this powerful machine learning tool is applied to the famous MNIST dataset, which contains handwritten digits. The CNN implemented here allows **reaching a 99% classification accuracy**.","66e549ab":"The following two graphs show how the accuracy and loss measures evolves while training the network.\n\n","cea95d48":"Some preprocessing is needed. In particular, we need to:\n\n1. **reshape the images matrices** to have a tensor of dimension 28x28x1 that will be the input of the CNN;\n2. **normalize the tensor elements** to take values in [0,1];\n3. map the label value to a **one-hot-encoding vector** that will be the output of the CNN.","5eeccd2e":"## Design of the convolutional neural network\nIn the following, we design the CNN and we show a summary of its architecture.\n","7ff3666d":"## Importing the dataset\nThe images have dimension 28x28 pixels and they are in gray scale (i.e., each pixel takes values in [0,255]).","db6d4f09":"Finally, the predictions are exported to a CSV file.","08cd48dd":"Before proceding with the design of the CNN, the split the training data into two sets for training and validation.","1151bc6a":"The CNN is then compiled. We use the **stochastic gradient descent** optimizer and the goal is to minimize the categorical crossentropy.","99a2f628":"## Predictions on the test set\nThe trained model is run on the test dataset.","f772cbd2":"## Training of the CNN model\nThe CNN is then trained for 200 epochs using a batch of size 100."}}