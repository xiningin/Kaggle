{"cell_type":{"1c199006":"code","4d3416d5":"code","2995098d":"code","19d0ce07":"code","d0b21407":"code","c3fdde2f":"code","bcf0bef4":"markdown","b47348bc":"markdown"},"source":{"1c199006":"# Install libraries\n!pip install holidays\nimport holidays\nimport pandas as pd\nimport numpy  as np\nimport copy\nimport phik","4d3416d5":"# Load data\n# Convert the date column to datetime.\ntrain = pd.read_csv(\n    '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv', parse_dates=['date'])\ntest = pd.read_csv(\n    '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv',parse_dates=['date'])\nsample     = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')","2995098d":"# Create some simple features base on the Date field...\n\ndef create_time_features(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Create features base on the date variable, the idea is to extract as much \n    information from the date componets.\n    Args\n        df: Input data to create the features.\n    Returns\n        df: A DataFrame with the new time base features.\n    \"\"\"\n\n    holiday_FI = holidays.CountryHoliday('FI', years=[2015, 2016, 2017, 2018, 2019])\n    holiday_NO = holidays.CountryHoliday('NO', years=[2015, 2016, 2017, 2018, 2019])\n    holiday_SE = holidays.CountryHoliday('SE', years=[2015, 2016, 2017, 2018, 2019])\n\n    holiday_dict = holiday_FI.copy()\n    holiday_dict.update(holiday_NO)\n    holiday_dict.update(holiday_SE)\n    \n    # Start the creating future process.\n    df['year'] = df['date'].dt.year\n    df['month'] = df['date'].dt.month\n    df['day'] = df['date'].dt.day\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['dayofmonth'] = df['date'].dt.days_in_month\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['weekofyear'] = df['date'].dt.week\n    df['weekday'] = df['date'].dt.weekday\n    df['weekend'] = np.where((df['dayofweek'] == 5) | (df['dayofweek'] == 6), 1, 0)\n    df['crism'] = np.where((df['day'] == 24) & (df['month'] == 12), 1, 0)\n    df['newyear'] = np.where((df['day'] == 31) & (df['month'] == 12), 1, 0)\n    df['newyear'] = np.where((df['day'] == 1) & (df['month'] == 1), 1, 0)\n    \n    df['holiday_name'] = df['date'].map(holiday_dict)\n    df['is_holiday'] = np.where(df['holiday_name'].notnull(), 1, 0)\n    df['holiday_name'] = df['holiday_name'].fillna('Not Holiday')   \n    \n    \n    return df","19d0ce07":"train = create_time_features(train)\ntest = create_time_features(test)","d0b21407":"#===========================================================================\n# select some features add target\n#===========================================================================\nfeatures = ['country',\n            'store',\n            'product',\n            'year',            \n            'month',\n            'day',\n#             'dayofweek', and 'weekday' have the same meaning\n            'dayofmonth',            \n            'dayofyear', \n            'weekofyear',\n            'weekday', \n            'weekend', \n            'crism',\n            'newyear',\n            'holiday_name',\n            'is_holiday']\ntarget = ['num_sold']","c3fdde2f":"# create and display the Phink correlation matrix\nphik_overview_features = train[target+features].phik_matrix()\nphik_overview_features.round(2)","bcf0bef4":"**Looking ahead, I can say that these features are not enough for a high-quality model.**\n\n**I propose to discuss ideas for creating new features on this basis, or creating new ones.**\n\n**Write suggestions in the comments.**","b47348bc":"# Phink correlassion and feature engineering for competition TPS jan 2022\n\n"}}