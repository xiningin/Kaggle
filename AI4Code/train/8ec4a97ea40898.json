{"cell_type":{"472a4f09":"code","5f5c1951":"code","1b36455a":"code","261a4ddd":"code","4037bf80":"code","247ca00b":"code","0b6a3526":"code","0d0d9944":"code","e7908cfc":"code","d53f7cb0":"code","fb20e54d":"code","be9dbaa5":"code","aabc56ae":"code","e15b8336":"code","0745dccd":"code","6aadf940":"code","af7104d2":"code","fa1af1df":"code","948d9ac9":"code","0e0f5377":"code","4731b904":"markdown"},"source":{"472a4f09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5f5c1951":"import matplotlib.pyplot as plt\nimport seaborn as sns","1b36455a":"os.getcwd()","261a4ddd":"os.chdir('\/kaggle\/input\/iris-data\/')","4037bf80":"os.getcwd()","247ca00b":"iris = pd.read_csv('Iris.csv')","0b6a3526":"iris[\"Species\"].value_counts()","0d0d9944":"iris.columns","e7908cfc":"plt.figure(1)\n\n# 1st plot\nplt.subplot(231)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend();\nplt.show()\n\n# 2nd plot\nplt.subplot(232)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\") \\\n   .add_legend();\nplt.show()\n\n# 3rd plot\nplt.subplot(233)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"PetalWidthCm\") \\\n   .add_legend();\nplt.show()\n\n# 4th plot\nplt.subplot(234)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend();\nplt.show()\n\n# 5th\nplt.subplot(235)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"SepalLengthCm\") \\\n   .add_legend();\nplt.show()\n\n# 6th\nplt.subplot(236)\nsns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"PetalWidthCm\", \"SepalWidthCm\") \\\n   .add_legend();\nplt.show();\n","d53f7cb0":"plt.close();\nsns.set_style(\"whitegrid\");\nsns.pairplot(iris, hue=\"Species\", size=3);\nplt.show()","fb20e54d":"sns.set_style(\"whitegrid\");\nsns.FacetGrid(iris, hue=\"Species\", size=4) \\\n   .map(plt.scatter, \"PetalLengthCm\", \"PetalWidthCm\") \\\n   .add_legend();\nplt.show()","be9dbaa5":"g = sns.FacetGrid(iris, col=\"Species\")","aabc56ae":"plt.scatter(iris['PetalLengthCm'], iris['SepalLengthCm'], label)\nplt.title('Scatter plot pythonspot.com')\nplt.xlabel('x')\nplt.ylabel('y')\ndata = (g1, g2, g3)\ncolors = (\"red\", \"green\", \"blue\")\ngroups = (\"coffee\", \"tea\", \"water\")plt.show()","e15b8336":"#data = (iris[iris[\"Species\"]==\"\tIris-setosa\"], iris[iris[\"Species\"]==\"Iris-virginica\"], iris[iris[\"Species\"]==\"Iris-versicolor\"])\n\ng1 = (iris[\"PetalLengthCm\", iris[\"SepalWidthCm\"]])\ng2 = (iris[\"PetalWidthCm\", iris[\"SepalWidthCm\"]])\ng3 = (iris[\"PetalLengthCm\", iris[\"SepaLengthCm\"]])\n\ndata = (g1, g2, g3)\ncolors = (\"red\", \"green\", \"blue\")\ngroups = (\"coffee\", \"tea\", \"water\")\n\nfor data, color, group in zip(data, colors, groups):\n    x, y = data\nax.scatter(x, y, alpha=0.8, c=color, edgecolors='none', s=30, label=group)\n\nplt.title('Matplot scatter plot')\nplt.legend(loc=2)\nplt.show()","0745dccd":"ratio = iris[\"SepalLengthCm\"]\/iris[\"SepalWidthCm\"]\n\nfor name, group in iris.groupby(\"Species\"):\n    plt.scatter(group.index, ratio[group.index], label=name)\n\nplt.legend()\nplt.show()","6aadf940":"from sklearn.datasets import load_iris\niris = load_iris()","af7104d2":"x_index = 0\ny_index = 1\n\n# this formatter will label the colorbar with the correct target names\nformatter = plt.FuncFormatter(lambda i, *args: iris.target_names[int(i)])\n\nplt.figure(figsize=(5, 4))\nplt.scatter(iris.data[:, x_index], iris.data[:, y_index], c=iris.target)\nplt.colorbar(ticks=[0, 1, 2], format=formatter)\nplt.xlabel(iris.feature_names[x_index])\nplt.ylabel(iris.feature_names[y_index])\n\nplt.tight_layout()\nplt.show()","fa1af1df":"plt.figure(1)\n#for q in range(1,7):\nfor q, x_index, y_index in [(1,0,1), (2,0,2), (3,0,3), (4,2,1), (5,2,3), (6,3,1)]:\n   # for x_index, y_index in zip([0, 0, 0, 2, 2, 3], [1, 2, 3, 1, 3, 1]):\n        plt.subplot(2, 3, q)\n    #    x_index = 0\n    #    y_index = 1\n\n        # this formatter will label the colorbar with the correct target names\n        formatter = plt.FuncFormatter(lambda i, *args: iris.target_names[int(i)])\n\n        plt.figure(figsize=(5, 4))\n        plt.scatter(iris.data[:, x_index], iris.data[:, y_index], c=iris.target)\n        plt.colorbar(ticks=[0, 1, 2], format=formatter)\n        plt.xlabel(iris.feature_names[x_index])\n        plt.ylabel(iris.feature_names[y_index])\n\n        #plt.tight_layout()\n        plt.show()","948d9ac9":"plt.figure(1)               \n\nplt.subplot(231)             \nplt.plot([1, 2, 3])\nplt.subplot(232)             \nplt.plot([4, 5, 6])\nplt.subplot(235)             \nplt.plot([1, 2, 3])\nplt.subplot(236)             \nplt.plot([4, 5, 6])\n","0e0f5377":"for x_index, y_index in [(0,1), (0,2), (0,3), (2,1), (2,3), (3,1)]:\n    print (x_index, y_index)","4731b904":"**I want to get 6 unique pair plots from below in 3x2 grid plot**"}}