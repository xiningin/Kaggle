{"cell_type":{"f3a527ac":"code","a9615bc4":"code","238b4ca2":"code","feec1014":"code","f0962072":"code","aa4da64a":"code","d1b37558":"code","a2802327":"code","388baaf8":"code","51639d4d":"code","b9f91a94":"code","13f08569":"code","5f9a8030":"code","53378e19":"code","3b7cf643":"code","a5f6fc78":"code","492a758c":"code","2119fcf6":"code","f8a8ad34":"code","aa5e2a9d":"code","2092c335":"code","6d6c9182":"code","e5d37ecb":"code","7355ad86":"code","412197ab":"code","5535da23":"code","e1519f13":"code","fbd19a3d":"code","1a9ddb5c":"code","f95771f4":"code","47b2dd76":"code","e45517c7":"markdown","e43316cd":"markdown","51d1d5a2":"markdown","0d68132d":"markdown","23a01fc7":"markdown","fc909d81":"markdown","11739686":"markdown","2b5c28f4":"markdown","08154590":"markdown","790800b9":"markdown","9f41e249":"markdown","08805a2e":"markdown","7e8bd5e8":"markdown","57e80faa":"markdown","43387f24":"markdown","7974a5bd":"markdown","a64192a4":"markdown","dbfe8539":"markdown","dfb39b46":"markdown","d901e8d2":"markdown","2c8cb64d":"markdown","85d055d9":"markdown","b1a15b88":"markdown","3fd0189e":"markdown","b749929a":"markdown","ee6c0721":"markdown"},"source":{"f3a527ac":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.applications import EfficientNetB0\nfrom tensorflow.keras.optimizers import Adam\n\n# ignoring warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport os, cv2, json\nfrom PIL import Image","a9615bc4":"WORK_DIR = '..\/input\/cassava-leaf-disease-classification'\nos.listdir(WORK_DIR)","238b4ca2":"print('Train images: %d' %len(os.listdir(\n    os.path.join(WORK_DIR, \"train_images\"))))","feec1014":"with open(os.path.join(WORK_DIR, \"label_num_to_disease_map.json\")) as file:\n    print(json.dumps(json.loads(file.read()), indent=4))","f0962072":"train_labels = pd.read_csv(os.path.join(WORK_DIR, \"train.csv\"))\ntrain_labels.head()","aa4da64a":"sns.set_style(\"whitegrid\")\nfig, ax = plt.subplots(figsize = (6, 4))\n\nfor i in ['top', 'right', 'left']:\n    ax.spines[i].set_visible(False)\nax.spines['bottom'].set_color('black')\n\nsns.countplot(train_labels.label, edgecolor = 'black',\n              palette = reversed(sns.color_palette(\"viridis\", 5)))\nplt.xlabel('Classes', fontfamily = 'serif', size = 15)\nplt.ylabel('Count', fontfamily = 'serif', size = 15)\nplt.xticks(fontfamily = 'serif', size = 12)\nplt.yticks(fontfamily = 'serif', size = 12)\nax.grid(axis = 'y', linestyle = '--', alpha = 0.9)\nplt.show()","d1b37558":"sample = train_labels[train_labels.label == 0].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","a2802327":"sample = train_labels[train_labels.label == 1].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","388baaf8":"sample = train_labels[train_labels.label == 2].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","51639d4d":"sample = train_labels[train_labels.label == 3].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","b9f91a94":"sample = train_labels[train_labels.label == 4].sample(3)\nplt.figure(figsize=(15, 5))\nfor ind, (image_id, label) in enumerate(zip(sample.image_id, sample.label)):\n    plt.subplot(1, 3, ind + 1)\n    img = cv2.imread(os.path.join(WORK_DIR, \"train_images\", image_id))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","13f08569":"# Main parameters\nBATCH_SIZE = 8\nSTEPS_PER_EPOCH = len(train_labels)*0.8 \/ BATCH_SIZE\nVALIDATION_STEPS = len(train_labels)*0.2 \/ BATCH_SIZE\nEPOCHS = 20\nTARGET_SIZE = 512","5f9a8030":"train_labels.label = train_labels.label.astype('str')\n\ntrain_datagen = ImageDataGenerator(validation_split = 0.2,\n                                     preprocessing_function = None,\n                                     rotation_range = 45,\n                                     zoom_range = 0.2,\n                                     horizontal_flip = True,\n                                     vertical_flip = True,\n                                     fill_mode = 'nearest',\n                                     shear_range = 0.1,\n                                     height_shift_range = 0.1,\n                                     width_shift_range = 0.1)\n\ntrain_generator = train_datagen.flow_from_dataframe(train_labels,\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         subset = \"training\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")\n\n\nvalidation_datagen = ImageDataGenerator(validation_split = 0.2)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(train_labels,\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         subset = \"validation\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")","53378e19":"img_path = os.path.join(WORK_DIR, \"train_images\", train_labels.image_id[20])\nimg = image.load_img(img_path, target_size = (TARGET_SIZE, TARGET_SIZE))\nimg_tensor = image.img_to_array(img)\nimg_tensor = np.expand_dims(img_tensor, axis = 0)\nimg_tensor \/= 255.\n\nplt.imshow(img_tensor[0])\nplt.axis('off')\nplt.show()","3b7cf643":"generator = train_datagen.flow_from_dataframe(train_labels.iloc[20:21],\n                         directory = os.path.join(WORK_DIR, \"train_images\"),\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")\n\naug_images = [generator[0][0][0]\/255 for i in range(10)]\nfig, axes = plt.subplots(2, 5, figsize = (20, 10))\naxes = axes.flatten()\nfor img, ax in zip(aug_images, axes):\n    ax.imshow(img)\n    ax.axis('off')\nplt.tight_layout()\nplt.show()","a5f6fc78":"# Code for basic EfficientNetB0 CNN\n\n# def create_model():\n#     conv_base = EfficientNetB0(include_top = False, weights = 'imagenet',\n#                                input_shape = (TARGET_SIZE, TARGET_SIZE, 3))\n#     model = conv_base.output\n#     model = layers.GlobalAveragePooling2D()(model)\n#     model = layers.Dense(5, activation = \"softmax\")(model)\n#     model = models.Model(conv_base.input, model)\n\n#     model.compile(optimizer = Adam(lr = 0.001),\n#                   loss = \"sparse_categorical_crossentropy\",\n#                   metrics = [\"acc\"])\n#     return model\n\n# model = create_model()\n# model.summary()","492a758c":"# model.save('.\/basic_EfNetB0_imagenet_512.h5')","2119fcf6":"def create_model():\n    conv_base = EfficientNetB0(include_top = False, weights = None,\n                               input_shape = (TARGET_SIZE, TARGET_SIZE, 3))\n    model = conv_base.output\n    model = layers.GlobalAveragePooling2D()(model)\n    model = layers.Dense(5, activation = \"softmax\")(model)\n    model = models.Model(conv_base.input, model)\n\n    model.compile(optimizer = Adam(lr = 0.001),\n                  loss = \"sparse_categorical_crossentropy\",\n                  metrics = [\"acc\"])\n    return model","f8a8ad34":"model = create_model()\nmodel.summary()","aa5e2a9d":"print('Our EfficientNet CNN has %d layers' %len(model.layers))","2092c335":"model.load_weights('..\/input\/cassava-leaf-disease-models\/basic_EfNetB0_imagenet_512.h5')","6d6c9182":"model_save = ModelCheckpoint('.\/EffNetB0_512_8_best_weights.h5', \n                             save_best_only = True, \n                             save_weights_only = True,\n                             monitor = 'val_loss', \n                             mode = 'min', verbose = 1)\nearly_stop = EarlyStopping(monitor = 'val_loss', min_delta = 0.001, \n                           patience = 5, mode = 'min', verbose = 1,\n                           restore_best_weights = True)\nreduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.3, \n                              patience = 2, min_delta = 0.001, \n                              mode = 'min', verbose = 1)\n\n\nhistory = model.fit(\n    train_generator,\n    steps_per_epoch = STEPS_PER_EPOCH,\n    epochs = EPOCHS,\n    validation_data = validation_generator,\n    validation_steps = VALIDATION_STEPS,\n    callbacks = [model_save, early_stop, reduce_lr]\n)","e5d37ecb":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\nsns.set_style(\"white\")\nplt.suptitle('Train history', size = 15)\n\nax1.plot(epochs, acc, \"bo\", label = \"Training acc\")\nax1.plot(epochs, val_acc, \"b\", label = \"Validation acc\")\nax1.set_title(\"Training and validation acc\")\nax1.legend()\n\nax2.plot(epochs, loss, \"bo\", label = \"Training loss\", color = 'red')\nax2.plot(epochs, val_loss, \"b\", label = \"Validation loss\", color = 'red')\nax2.set_title(\"Training and validation loss\")\nax2.legend()\n\nplt.show()","7355ad86":"model.save('.\/EffNetB0_512_8.h5')","412197ab":"def activation_layer_vis(img, activation_layer = 0, layers = 10):\n    layer_outputs = [layer.output for layer in model.layers[:layers]]\n    activation_model = models.Model(inputs = model.input, outputs = layer_outputs)\n    activations = activation_model.predict(img)\n    \n    rows = int(activations[activation_layer].shape[3] \/ 3)\n    cols = int(activations[activation_layer].shape[3] \/ rows)\n    fig, axes = plt.subplots(rows, cols, figsize = (15, 15 * cols))\n    axes = axes.flatten()\n    \n    for i, ax in zip(range(activations[activation_layer].shape[3]), axes):\n        ax.matshow(activations[activation_layer][0, :, :, i], cmap = 'viridis')\n        ax.axis('off')\n    plt.tight_layout()\n    plt.show()","5535da23":"activation_layer_vis(img_tensor, 0)","e1519f13":"def all_activations_vis(img, layers = 10):\n    layer_outputs = [layer.output for layer in model.layers[:layers]]\n    activation_model = models.Model(inputs = model.input, outputs = layer_outputs)\n    activations = activation_model.predict(img)\n    \n    layer_names = []\n    for layer in model.layers[:layers]: \n        layer_names.append(layer.name) \n\n    images_per_row = 3\n    for layer_name, layer_activation in zip(layer_names, activations): \n        n_features = layer_activation.shape[-1] \n\n        size = layer_activation.shape[1] \n\n        n_cols = n_features \/\/ images_per_row \n        display_grid = np.zeros((size * n_cols, images_per_row * size)) \n\n        for col in range(n_cols): \n            for row in range(images_per_row): \n                channel_image = layer_activation[0, :, :, col * images_per_row + row] \n                channel_image -= channel_image.mean() \n                channel_image \/= channel_image.std() \n                channel_image *= 64 \n                channel_image += 128 \n                channel_image = np.clip(channel_image, 0, 255).astype('uint8') \n                display_grid[col * size : (col + 1) * size, \n                             row * size : (row + 1) * size] = channel_image \n        scale = 1. \/ size \n        plt.figure(figsize=(scale * 5 * display_grid.shape[1], \n                            scale * 5 * display_grid.shape[0])) \n        plt.title(layer_name) \n        plt.grid(False)\n        plt.axis('off')\n        plt.imshow(display_grid, aspect = 'auto', cmap = 'viridis')","fbd19a3d":"all_activations_vis(img_tensor, 5)","1a9ddb5c":"ss = pd.read_csv(os.path.join(WORK_DIR, \"sample_submission.csv\"))\nss","f95771f4":"preds = []\n\nfor image_id in ss.image_id:\n    image = Image.open(os.path.join(WORK_DIR,  \"test_images\", image_id))\n    image = image.resize((TARGET_SIZE, TARGET_SIZE))\n    image = np.expand_dims(image, axis = 0)\n    preds.append(np.argmax(model.predict(image)))\n\nss['label'] = preds\nss","47b2dd76":"ss.to_csv('submission.csv', index = False)","e45517c7":"# First look at the data","e43316cd":"## Cassava Leaf Disease Classification:\n\n# Best Keras CNN\n\n![Cassava](https:\/\/cdn.hauschka.com\/images\/system\/plant_library\/hauschka\/manihot-esculenta-crantz-gross.jpg)\n\n### The final part of this [Cassava Leaf Disease: Keras CNN baseline](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-baseline) and this [Cassava Leaf Disease: Keras CNN prediction](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-prediction) notebooks.\n\n### Some models and weights stored in this dataset: [Cassava Leaf Disease Models](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-models)\n\n#### Here you'll find:\n* examples of ImageDataGenerator work;\n* my best experiments with EfficientNet CNNs;\n* visualizations of CNN intermediate activations;\n* something else interesting in the future.\n\n#### Ideas for future improvements:\n* try various image sizes;\n* try various batch sizes;\n* experiments with learning rate;\n* experiments with data augmentation;\n* other.\n\n#### I am grateful to Fran\u00e7ois Cholet for the book \"Deep Learning with Python\", wherefrom I borrowed some useful techniques.\n\n### History of changes:\n#### Ver.4: changed TARGET_SIZE; removed unnecessary parameters of ImageDataGenerator","51d1d5a2":"### See also [Cassava Leaf Disease: Keras CNN baseline](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-keras-cnn-baseline)","0d68132d":"## Some photos of \"1\": \"Cassava Brown Streak Disease (CBSD)\"","23a01fc7":"### Loading weights","fc909d81":"### Random photo before augmentation","11739686":"### Training","2b5c28f4":"### Creating the CNN","08154590":"# Visualization of CNN intermediate activations","790800b9":"# Modeling","9f41e249":"## Some photos of \"2\": \"Cassava Green Mottle (CGM)\"","08805a2e":"## Some photos of \"0\": \"Cassava Bacterial Blight (CBB)\"","7e8bd5e8":"## Some photos of \"4\": \"Healthy\"","57e80faa":"### This photo after augmentation","43387f24":"# Preparation for modeling","7974a5bd":"At first, we'll load the basic EfficientNetB0 CNN with \"imagenet\" weights. I created this model before and store it in my dataset created especially for this competition: [Cassava Leaf Disease Models](https:\/\/www.kaggle.com\/maksymshkliarevskyi\/cassava-leaf-disease-models).","a64192a4":"## Work directory","dbfe8539":"There is a wide space for experimentation here. The cells below show how the ImageDataGenerator works.","dfb39b46":"Visualization of intermediate activations gives a rough step-by-step understanding of how CNN works.","d901e8d2":"### Visualization of the first 5 layers","2c8cb64d":"### ImageDataGenerator","85d055d9":"## Some photos of \"3\": \"Cassava Mosaic Disease (CMD)\"","b1a15b88":"## Loading packages","3fd0189e":"# Prediction","b749929a":"### Visualization of the first layer","ee6c0721":"## WORK IN PROGRESS..."}}