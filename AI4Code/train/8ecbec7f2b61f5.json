{"cell_type":{"d37913ca":"code","9f43030e":"code","6e1f1865":"code","d2521394":"code","b0f6e280":"code","53a3aa3c":"code","c799d31d":"code","2e6d2ec3":"code","7d81ee88":"code","8f218085":"code","09bdb8cc":"code","e0de6ed4":"code","f7a61115":"code","2f674bd7":"code","62c3bf2f":"code","d96fbf32":"code","de4bb0e2":"code","055ee77f":"code","c4f13e49":"code","40959de0":"code","281f816a":"code","aba16a51":"code","7fa94b10":"code","c6293705":"code","5723702a":"code","e960f63a":"code","63d320c1":"code","ba93a385":"code","39dff965":"code","8f85d4ce":"code","b8e88f92":"code","bb257727":"code","c835bb5b":"code","370aa753":"code","1952b22f":"code","d5873395":"code","3b4ac2f7":"code","3ea99a69":"code","3b410a1e":"code","877a6384":"code","5ce65933":"code","3b19b977":"code","73ac673e":"code","a41ba757":"code","e306f940":"code","d28684a9":"code","ba862919":"code","69d98785":"code","34404ec4":"code","8697af92":"code","24bc95d1":"code","42d2f38a":"code","d2285df5":"code","4fba6cb4":"code","273e99a5":"code","5e97e7f8":"code","cee28f75":"code","eaf253d2":"markdown","144d343e":"markdown","71a037c7":"markdown","5344ec6c":"markdown","a2a2db5d":"markdown","88cc7efe":"markdown","254c41b9":"markdown","9dd7f2b6":"markdown","088bef50":"markdown","ec313483":"markdown","7c7e7074":"markdown","b65c075b":"markdown","da97d6d8":"markdown","b4594af7":"markdown","f5168ba7":"markdown","9e39ccd6":"markdown","19c045ea":"markdown","4bcdc914":"markdown","50f0eaea":"markdown","228fc129":"markdown","041ef647":"markdown","de73a6a2":"markdown","6519141e":"markdown","30ce4990":"markdown"},"source":{"d37913ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f43030e":"train =pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/train.csv')\ntrain.head()","6e1f1865":"train.shape","d2521394":"train.info()","b0f6e280":"train['UNDER_CONSTRUCTION'].value_counts()","53a3aa3c":"train['READY_TO_MOVE'].value_counts()","c799d31d":"train['RESALE'].value_counts()","2e6d2ec3":"train['POSTED_BY'].value_counts()","7d81ee88":"#train['POSTED']=train['POSTED_BY'].apply(lambda x :0 if x=='Dealer' else 1 if x=='Owner' else 2)","8f218085":"#train.drop(\"POSTED_BY\",axis=1,inplace=True)","09bdb8cc":"mappp={'Dealer':0,\"Owner\":1,'Builder':2}\n\ntrain['POSTED_BY']=train['POSTED_BY'].map(mappp)","e0de6ed4":"train['BHK_OR_RK'].value_counts()","f7a61115":"mapp={'BHK':0,\"RK\":1}\ntrain['BHK_OR_RK']=train['BHK_OR_RK'].map(mapp)","2f674bd7":"train.head()","62c3bf2f":"train.plot(kind='scatter',x='TARGET(PRICE_IN_LACS)',y='BHK_NO.')","d96fbf32":"train.plot(kind='scatter',x='TARGET(PRICE_IN_LACS)',y='LATITUDE')","de4bb0e2":"train.plot(kind='scatter',x='TARGET(PRICE_IN_LACS)',y='LONGITUDE')","055ee77f":"train['AREA']=np.log(train['SQUARE_FT'])\n","c4f13e49":"sns.scatterplot(data=train,x='TARGET(PRICE_IN_LACS)',y='AREA')","40959de0":"train.drop('SQUARE_FT',axis=1,inplace=True)","281f816a":"train.describe()","aba16a51":"plt.figure(figsize=(15,10))\nsns.scatterplot(data=train,x='LONGITUDE',y='LATITUDE',hue='TARGET(PRICE_IN_LACS)')","7fa94b10":"cat_features = ['POSTED_BY', 'BHK_OR_RK']\nnum_features = ['UNDER_CONSTRUCTION', 'RERA', 'BHK_NO.', 'READY_TO_MOVE', 'RESALE', 'LONGITUDE', 'LATITUDE', 'AREA']","c6293705":"plt.figure(figsize=(10, 10))\ncorr=train[cat_features+num_features+['TARGET(PRICE_IN_LACS)']].corr(method='spearman')\nsns.heatmap(corr, annot=True)\n","5723702a":"outlier_percentage = {}\nfor feature in ['AREA', 'BHK_NO.', 'TARGET(PRICE_IN_LACS)']:\n    tempData = train.sort_values(by=feature)[feature]\n    Q1, Q3 = tempData.quantile([0.25, 0.75])\n    IQR = Q3 - Q1\n    Lower_range = Q1 - (1.5 * IQR)\n    Upper_range = Q3 + (1.5 * IQR)\n    outlier_percentage[feature] = round((((tempData<(Q1 - 1.5 * IQR)) | (tempData>(Q3 + 1.5 * IQR))).sum()\/tempData.shape[0])*100,2)\noutlier_percentage","e960f63a":"outlier = train[(train[feature]>Lower_range) & (train[feature]<Upper_range)].reset_index(drop=True)\n","63d320c1":"train.drop(['ADDRESS'],axis=1,inplace=True)","ba93a385":"X=train.drop(['TARGET(PRICE_IN_LACS)'],axis=1)\n\ny=train['TARGET(PRICE_IN_LACS)']","39dff965":"from sklearn.feature_selection import SelectKBest,f_regression\nbest=SelectKBest(score_func=f_regression,k='all')\nfit=best.fit(X,y)\ndfScores=pd.DataFrame(fit.scores_)\ndfCol=pd.DataFrame(X.columns)\nfeatScore=pd.concat([dfCol,dfScores],axis=1)\nfeatScore.columns=['Feature','Score']\nfeatScore=featScore.sort_values(by='Score',ascending=False).reset_index(drop=True)\nprint(featScore.nlargest(10,'Score'))","8f85d4ce":"#from sklearn.ensemble import ExtraTreesRegressor\n#ex=ExtraTreesRegressor()\n#ex.fit(X,y)","b8e88f92":"#ex.feature_importances_\n","bb257727":"#plt.figure(figsize=(10,10))\n#plt.title('Feature importances')\n#feat=pd.Series(ex.feature_importances_,index=X.columns)\n#feat.nlargest(10).plot(kind='barh', color=\"r\", align=\"center\")\n#plt.tight_layout()\n#plt.show()","c835bb5b":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nv = pd.DataFrame()\nv[\"variables\"] = [feature for feature in cat_features+num_features if feature not in ['READY_TO_MOVE', \n                                                                    'RESALE', 'LATITUDE', 'LONGITUDE']]\nv[\"VIF\"] = [variance_inflation_factor(train[v['variables']].values, i) for i in range(len(v[\"variables\"]))]\nprint(v)","370aa753":"from sklearn.model_selection import train_test_split ,cross_val_score,RandomizedSearchCV\nX_train ,X_test,y_train ,y_test =train_test_split(X,y,test_size =.2 , random_state=42)","1952b22f":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.fit_transform(X_test)","d5873395":"from sklearn.metrics import mean_squared_error,r2_score\nfrom sklearn.linear_model import LinearRegression ,SGDRegressor,Lasso,Ridge,ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,VotingRegressor\nfrom xgboost.sklearn import XGBRegressor","3b4ac2f7":"models = {'Linear Regression': LinearRegression(),\n         'Lasso': Lasso(),\n         'Decision Tree': DecisionTreeRegressor(),\n         'Random Forest': RandomForestRegressor(),\n         'Gradient Boosting =':GradientBoostingRegressor(),\n         'Ridge': Ridge(),\n         'Stochastic Gradien Descent': SGDRegressor(),\n         'Elastic': ElasticNet(),\n         'xgb Regressor': XGBRegressor()}","3ea99a69":"def fit_score(models, X_train, X_test, y_train, y_test):\n    np.random.seed(42)\n    model_scores = {}\n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        model_scores[name] = cross_val_score(model,\n                                             X_test,\n                                             y_test,\n                                            scoring='neg_mean_squared_error',\n                                            cv=3\n                                            ).mean()\n\n    return model_scores","3b410a1e":"model_scores = fit_score(models,X_train,X_test,y_train,y_test)\n\nmodel_scores","877a6384":"vot=VotingRegressor([('LinearRegression',LinearRegression()),('DecisionTrees',DecisionTreeRegressor()),('LassoRegression',Lasso()),\n                     ('RandomForest',RandomForestRegressor()),('ElasticNet',ElasticNet()),\n                     ('StochasticGradientDescent',SGDRegressor()),\n                    ('GrafientBoosting',GradientBoostingRegressor()),('Ridge',Ridge()),('xgb',XGBRegressor())])\nvot.fit(X_train,y_train)\ny_pred=vot.predict(X_test)","5ce65933":"mean_squared_error(y_test,y_pred)\n","3b19b977":"np.random.seed(42)\nparams={\n        'criterion':['mse', 'mae'],\n         'max_features':['auto','sqrt','log2'],\n        'max_depth':[2,3,10]\n       }\nrs = RandomizedSearchCV(DecisionTreeRegressor(),\n                                param_distributions=params,\n                                cv=3,\n                                n_iter=30,\n                                verbose=0,\n                                n_jobs=-1\n                               )\n\nrs.fit(X_train, y_train)\n\nrs.best_params_","73ac673e":"rs.best_estimator_\n\n","a41ba757":"rs.best_score_\n","e306f940":"rs.score(X_test, y_test)\n","d28684a9":"model = DecisionTreeRegressor()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","ba862919":"r2_score(y_pred,y_test)","69d98785":"test =pd.read_csv('\/kaggle\/input\/house-price-prediction-challenge\/test.csv')\n","34404ec4":"test.shape","8697af92":"final=test.drop('ADDRESS',axis=1,inplace=True)","24bc95d1":"\nmappp={'Dealer':0,\"Owner\":1,'Builder':2}\n\ntest['POSTED_BY']=test['POSTED_BY'].map(mappp)","42d2f38a":"mapp={'BHK':0,\"RK\":1}\ntest['BHK_OR_RK']=test['BHK_OR_RK'].map(mapp)","d2285df5":"test['AREA']=np.log(test['SQUARE_FT'])\n","4fba6cb4":"test.drop('SQUARE_FT',axis=1,inplace=True)","273e99a5":"scaler=StandardScaler()\ntest=scaler.fit_transform(test)","5e97e7f8":"price=model.predict(test)","cee28f75":"result=pd.DataFrame(price,columns=[\"TARGET(PRICE_IN_LACS\"])\n\nresult.to_csv(\"ResultHousePrices.csv\",index=None)","eaf253d2":"train models","144d343e":"handling categorical values , there is many ways like this two ways or OHE or LE or dummies","71a037c7":"handling outliers","5344ec6c":"longitude between 0 and 40 ,  doesn't highly effect but near to 40 less cost","a2a2db5d":"feature scaling","88cc7efe":"removing features with vif , there is another way called RFE \"Recursive Feature Elimination\"","254c41b9":"fit and score","9dd7f2b6":"voting","088bef50":"log for area","ec313483":"as expected , voting has smallest mse","7c7e7074":"Decision tree has lowest mse","b65c075b":"latitude between 60 and 150, doesn't highly effect","da97d6d8":"No missing values","b4594af7":"another way for feature selection","f5168ba7":"area, number of rooms, price highly correlated with each other","9e39ccd6":"drop column before log","19c045ea":"splitting the data","4bcdc914":"divide features to categorical and numerical","50f0eaea":"feature selection\n","228fc129":"location doesn't highly effect to price","041ef647":"under constrauction and ready to move exactly the same , location has small effect","de73a6a2":"price direct proportional with area","6519141e":"number of rooms between 1 and 20 \n\n\n\n\n","30ce4990":"most of houses not under construction"}}