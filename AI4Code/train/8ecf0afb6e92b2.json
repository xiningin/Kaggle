{"cell_type":{"380544ed":"code","a1e6e3d9":"code","64e4d6b4":"code","40617f65":"code","12a008eb":"code","c91a0b82":"code","dbb930f7":"code","7ce891b7":"code","eed19228":"code","65a4ac80":"code","3ec4d13f":"code","4e7dfc5c":"code","f5a89d2e":"code","b6a0ee0f":"code","0cf03994":"code","1d530229":"code","52daa195":"code","5ead53ea":"code","399ab60d":"code","52d30acc":"code","bc2a7ab5":"code","3e081525":"code","de9ac7a7":"code","8c4dd9da":"code","7ed102bb":"code","4c2557cc":"code","b91e5354":"code","98d602ef":"code","b62b2f4a":"code","4ca905aa":"code","5b8baabe":"code","b3eb8a9a":"code","49cce91b":"code","17b39c23":"code","85c09823":"code","065ee2c3":"code","5c044c3e":"code","243daf9b":"code","12b55e25":"code","8b77a5a5":"code","bfe9cc2e":"code","1dd30fbe":"code","161c1ed9":"markdown","13f3d469":"markdown","3129b2fc":"markdown","1375e042":"markdown","d1d5d7c8":"markdown","87243109":"markdown","8d64a2d5":"markdown","95d6d0a2":"markdown","90f49881":"markdown","c0a61d4c":"markdown","afd926dd":"markdown"},"source":{"380544ed":"# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, sys\nfrom os.path import expanduser, join, exists\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1e6e3d9":"%pylab inline\nimport seaborn as sns\nsns.set_style(u'whitegrid')\n%matplotlib inline\nplt.style.use(u'ggplot')\npd.set_option(u'display.max_columns', 200) # nb de colonnes d'un dataframe affich\u00e9es\npd.set_option(u'display.width', 1500)\npd.options.display.max_rows = 1000 # nb de lignes d'un dataframe affich\u00e9es\npd.set_option(u'precision', 6)\npd.set_option(u'expand_frame_repr', False)\npd.set_option(u'max_colwidth',200)","64e4d6b4":"#CONSTANTS\nROOT_DIR = '\/kaggle\/input'\nCOMP_DIR = 'titanic-cnes'\nDATA_DIR = join(ROOT_DIR, COMP_DIR)\nTARGET = 'Survived'\nSOURCE = 'source'\nTRAIN = 1\nTEST = 2","40617f65":"# Afficher la valeur d'une variable\ndisplay(ROOT_DIR)","12a008eb":"# chargement d'un csv dans un dataframe\ntrain = pd.read_csv(join(DATA_DIR, 'train.csv'))","c91a0b82":"# type de l'objet contenu dans une variable\ntype(train)","dbb930f7":"# 1\u00e8res lignes dataframe\ntrain.head()","7ce891b7":"# dimensions dataframe\ntrain.shape","eed19228":"# Aides sur fonction\n# option 1 : help(pd.DataFrame.head)\n# option 2 : le '?'\n# option 3 : shift + tab dans le notebook","65a4ac80":"# Info sur les colonnes du dataframe\ntrain.info()","3ec4d13f":"# Stat sur les variables num\u00e9riques du dataframe\ntrain.describe()","4e7dfc5c":"# generer un rapport complet avec pandas_profiling - import\nimport pandas_profiling","f5a89d2e":"# generer un rapport complet avec pandas_profiling - commande\npandas_profiling.ProfileReport(train).to_file(output_file='train.html')","b6a0ee0f":"# ordonner un dataframe selon une variable\ntrain.sort_values(by=['Age']).head()","0cf03994":"# filtrer un dataframe et s\u00e9lectionner des colonnes\nfiltre = (train['Pclass'] == 3) & (train['Sex'] == \"female\")\ntrain.loc[filtre,['Age','Sex','Pclass']].head()","1d530229":"# nb occurences des diff\u00e9rentes valeurs d'une variable \ntrain['Survived'].value_counts()","52daa195":"# r\u00e9partition des diff\u00e9rentes valeurs d'une variable \ntrain['Survived'].value_counts(normalize=True)","5ead53ea":"# barchart avec methode dataframe pandas\ntrain['Survived'].value_counts(normalize=True).plot(kind='bar')","399ab60d":"# equivalent avec le package seaborn\nsns.barplot(x=train['Survived'], y=train['Survived'].value_counts(normalize=True))","52d30acc":"# distribution d'une variable num\u00e9rique\nsns.displot(train['Age'].dropna()) # .dropna() m\u00e9thode pour supprimer les lignes NA","bc2a7ab5":"# r\u00e9partition d'une variable cat\u00e9gorielle\nsns.countplot(x=\"Pclass\", data=train)","3e081525":"# exemple plus complet\n\n# creation d'un filtre\nfiltre = train['Embarked']=='C'\n\n# affichage du dataset apr\u00e8s filtre et selection de colonne\ndisplay(train.loc[filtre,['Age','Sex','Pclass']].head())\n\n# distribution de l'age pour la population filtr\u00e9e - 2 syntaxes possibles (# permet de commenter ce qu'on ne veut pas ex\u00e9cuter)\n# sns.displot(data=train.loc[filtre,['Age']])\nsns.displot(data=train.loc[filtre,], x='Age')","de9ac7a7":"# analyse donn\u00e9es crois\u00e9es (adapt\u00e9 au variables num\u00e9riques)\nsns.scatterplot(x='Pclass', y='Fare', data=train) # num\u00e9rique","8c4dd9da":"# analyse donn\u00e9es crois\u00e9es en ajoutant une dimension couleur (adapt\u00e9 au variables cat\u00e9gorielles)\nsns.countplot(x=\"Pclass\", hue=\"Sex\", data=train) # categorie","7ed102bb":"# autre analyse de la distribution : la boite \u00e0 moustache - ici selon la survie\nsns.boxplot(x='Survived', y='Age', data=train)","4c2557cc":"# genre ou classe: survie selon la classe et le genre\nsns.pointplot(x=\"Pclass\", y=\"Survived\", hue='Sex', data=train)","b91e5354":"# de l'absence d'interet de dummifier un bool\u00e9en\n\n# copie train dans un variable temporaire\ntmp = train.copy()\n\n# ajout des dummies isMale & isFemale - une meilleur syntaxe existe\ntmp['isFemale'] = pd.get_dummies(train['Sex'])['female']\ntmp['isMale'] = pd.get_dummies(train['Sex'])['male']\n\n# correlation des variables num\u00e9riques : nos 2 dummies portent la m\u00eame information\nsns.heatmap(tmp.corr())","98d602ef":"# age ou genre : survie selon l'age et le genre\n\n# transformation d'Age en cat\u00e9gories d'age avec la fonction pandas .cut\ntrain['Age_cat'] = pd.cut(train.Age,bins=[0,2,17,65,99],labels=['Toddler\/Baby','Child','Adult','Elderly'])\n\n# survie selon l'age et le genre\nsns.pointplot(x=\"Age_cat\", y=\"Survived\", hue='Sex', data=train)","b62b2f4a":"# age ou genre : survie selon l'age et la classe\n# un adulte en 1\u00e8re classe survit plus qu'un enfant en 3\u00e8me classe\nsns.pointplot(x=\"Pclass\", y=\"Survived\", hue='Age_cat', data=train)","4ca905aa":"# zoom sur nb de valeurs nulles de Cabin\ndisplay(train['Cabin'].isna().astype(int).sum()) # .astype() permet une conversion du type, ici en anglais\n\n# NB: .isna() renvoi un type bool\u00e9en qui se somme directement sans conversion en entier\ndisplay(train['Cabin'].isna().sum()) \ndisplay(type(train['Cabin'].isna()[0])) # type (bool\u00e9en) contenu","5b8baabe":"# suppression variable Cabin : train avec la colonne\ntrain.columns","b3eb8a9a":"# suppression variable Cabin : 2 options\n# train = train.drop(['Cabin'], axis=1) # on r\u00e9\u00e9crase train sans la colonne, axis=1 indique l'axe colonne\ntrain.drop(['Cabin'], axis=1, inplace=True, errors='ignore') # on supprime juste la colonne","49cce91b":"# suppression variable Cabin : train sans la colonne\ntrain.columns","17b39c23":"# a titre d'information, sans modifier train :\n\n### suppression de chaque ligne contenant au moins une valeur nulle\ndisplay(train.dropna(axis=0).shape)\n\n### suppression de chaque colonne contenant au moins une valeur nulle\ndisplay(train.dropna(axis=1).shape)","85c09823":"# traitement des valeurs manquantes pour Age - calcul de la moyenne\nmean_ = train['Age'].mean()\ndisplay(mean_)","065ee2c3":"# distribution de la variable \u00e2ge avant le remplissage des valeurs manquantes\nsns.displot(train['Age'].dropna())","5c044c3e":"# traitement des valeurs manquantes pour Age - remplacement par la moyenne\ntrain['Age'] = train['Age'].fillna(mean_)","243daf9b":"# Distribution de la variable \u00e2ge apr\u00e8s le remplissage des valeurs manquantes\nsns.displot(train['Age'].dropna())","12b55e25":"# r\u00e9partition de la variable Embarked\ntrain['Embarked'].value_counts()","8b77a5a5":"# dataframe avant dummification\ntrain.head(2)","bfe9cc2e":"# transformation d'une var cat\u00e9gorielle en dummies (indicteurs O, 1 d'un attribut) - pas de sens si bool\u00e9en\ntrain = train.join(pd.get_dummies(train['Embarked'])).drop(columns=['Embarked']) # on ne garde pas Embarked","1dd30fbe":"# dataframe apr\u00e8s dummification\ntrain.head(2)","161c1ed9":"REGLER PARAMETRES ","13f3d469":"b\/ Variable age","3129b2fc":"PRISE EN MAIN","1375e042":"DUMMIFICATION","d1d5d7c8":"EXPLORER LES DONNNEES & VISUALISATION","87243109":"TRAITEMENT DES VARIABLES MANQUANTES","8d64a2d5":"AUTRES ANALYSES GRAPHIQUES - VUES EN FIN DE TD","95d6d0a2":"MANIPULATION PANDAS DATAFRAME","90f49881":"IMPORTER PACKAGE","c0a61d4c":"DEFINIR CONTSTANTES","afd926dd":"a\/ Variable Cabin"}}