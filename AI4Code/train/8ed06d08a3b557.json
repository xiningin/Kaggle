{"cell_type":{"533021f8":"code","d937be2c":"code","2a2753cb":"code","9fffb10f":"code","eedee0f9":"code","cfda590a":"code","fa56d44a":"code","ebdc82cb":"code","f123a7f3":"code","c0e93e97":"code","c4130986":"code","9fec334a":"code","3b417a45":"code","a9215d46":"code","9f66a615":"code","6ad8b69f":"code","3eb2853b":"code","4fc5e1b6":"code","348702c3":"code","254037d5":"code","852aab9a":"code","cb7e9400":"code","a4ae0292":"code","bdf75464":"code","3335fbcb":"code","5bb18bbb":"code","47bf5762":"code","3e71b3a9":"code","c102ed02":"code","9944c275":"code","3a29242e":"markdown"},"source":{"533021f8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d937be2c":"human = pd.read_table('..\/input\/dna-sequence-dataset\/human.txt')\nhuman.head()","2a2753cb":"chimp = pd.read_table('..\/input\/dna-sequence-dataset\/chimpanzee.txt')\ndog = pd.read_table('..\/input\/dna-sequence-dataset\/dog.txt')\nchimp.head()\ndog.head()","9fffb10f":"human.shape","eedee0f9":"human['sequence'][1]","cfda590a":"human['sequence'][0]","fa56d44a":"chimp.shape","ebdc82cb":"chimp['sequence'][0]","f123a7f3":"dog.shape","c0e93e97":"dog['sequence'][0]","c4130986":"def getKmers(sequence,size=6):\n    return [sequence[x:x+size].lower() for x in range(len(sequence)-size+1)]","9fec334a":"human['words']=human.apply(lambda x:getKmers(x['sequence']),axis=1)\nchimp['words']=chimp.apply(lambda x:getKmers(x['sequence']),axis=1)\ndog['words']=dog.apply(lambda x:getKmers(x['sequence']),axis=1)\nhuman=human.drop('sequence',axis=1)\nchimp=chimp.drop('sequence',axis=1)\ndog=dog.drop('sequence',axis=1)","3b417a45":"human.head()","a9215d46":"human_texts = list(human['words'])\nfor item in range(len(human_texts)):\n    human_texts[item] = ' '.join(human_texts[item])\n#separate labels\ny_human = human.iloc[:, 0].values # y_human for human_dna","9f66a615":"human_texts[2]","6ad8b69f":"y_human\n","3eb2853b":"chimp_texts = list(chimp['words'])\nfor item in range(len(chimp_texts)):\n    chimp_texts[item] = ' '.join(chimp_texts[item])\ny_c = chimp.iloc[:, 0].values                       # y_c for chimp\n\ndog_texts = list(dog['words'])\nfor item in range(len(dog_texts)):\n    dog_texts[item] = ' '.join(dog_texts[item])\ny_d = dog.iloc[:, 0].values       ","4fc5e1b6":"from sklearn.feature_extraction.text import CountVectorizer\ncv=CountVectorizer(ngram_range=(4,4))\n##The n-gram size of 4 is previously determined by testing\nX=cv.fit_transform(human_texts)\nX_chimp=cv.transform(chimp_texts)\nX_dog=cv.transform(dog_texts)","348702c3":"print(X.shape)\nprint(X_chimp.shape)\nprint(X_dog.shape)","254037d5":"human[\"class\"].value_counts().sort_index().plot.bar()","852aab9a":"dog[\"class\"].value_counts().sort_index().plot.bar()","cb7e9400":"chimp[\"class\"].value_counts().sort_index().plot.bar()","a4ae0292":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y_human,test_size=.2,random_state=42)","bdf75464":"print(x_train.shape)\nprint(x_test.shape)","3335fbcb":"from sklearn.naive_bayes import MultinomialNB\nclassifier= MultinomialNB(alpha=0.1)\nclassifier.fit(x_train,y_train)","5bb18bbb":"y_pred = classifier.predict(x_test)","47bf5762":"from sklearn.metrics import accuracy_score,f1_score, precision_score,recall_score\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_test,name='Actual'),pd.Series(y_pred,name='Predicted')))\ndef get_metrics(y_test,y_predicted):\n    accuracy =accuracy_score(y_test,y_predicted)\n    precision=precision_score(y_test,y_predicted,average='weighted')\n    recall = recall_score(y_test, y_predicted, average='weighted')\n    f1 = f1_score(y_test, y_predicted, average='weighted')\n    return accuracy, precision, recall, f1\naccuracy, precision, recall, f1 = get_metrics(y_test, y_pred)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","3e71b3a9":"y_pred_chimp = classifier.predict(X_chimp)\ny_pred_dog = classifier.predict(X_dog)","c102ed02":"# performance on chimp genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_c, name='Actual'), pd.Series(y_pred_chimp, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_c, y_pred_chimp)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","9944c275":"###performance on dog genes\nprint(\"Confusion matrix\\n\")\nprint(pd.crosstab(pd.Series(y_d, name='Actual'), pd.Series(y_pred_dog, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_d, y_pred_dog)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","3a29242e":"##### function to convert sequence strings into k-mer words, de fault size = 6 (hexamer words) fault size=6\n"}}