{"cell_type":{"87a68cf7":"code","8028989c":"code","746c97ac":"code","92a3b72c":"code","e0aa22ef":"code","41c6cc5e":"code","fa2d7d0a":"code","eed5263d":"code","270f7d1f":"code","31e8af3e":"code","1fd95c04":"code","47d0554d":"code","7901d8c6":"code","35b6da0c":"code","e7ce8dce":"code","23d1e48d":"code","3d0ad2f9":"code","dd205671":"code","38f2e91d":"markdown","3b0c3579":"markdown","b3f55a04":"markdown","9d9532bf":"markdown"},"source":{"87a68cf7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport unicodedata\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8028989c":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/brics-world-bank-indicators\/BRICS Development Indicators\/PublicSector_Indicators.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'PublicSector_Indicators.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","746c97ac":"#Code by Md Redwan Karim Sony https:\/\/www.kaggle.com\/redwankarimsony\/space-missions-data-eda-temporal-analysis\n\n# Calculating\npercent_missing = df.isnull().sum() * 100 \/ len(df)\nmissing_value_df = pd.DataFrame({'column': df.columns,\n                                 'percent': percent_missing})\nmissing_value_df.sort_values('percent', inplace=True)\nmissing_value_df.reset_index(drop=True, inplace=True)\nmissing_value_df = missing_value_df[missing_value_df['percent']>0]\n\n# Plotting\nfig = px.bar(\n    missing_value_df, \n    x='percent', \n    y=\"column\", \n    orientation='h', \n    title='Columns with Missing Values', \n    height=200, \n    width=600\n)\nfig.show()","92a3b72c":"#Code from Tanay Mehta https:\/\/www.kaggle.com\/heyytanay\/police-shooting-eda-interactive-map\/comments\n\nfrom colorama import Fore, Style\n\ndef count(string: str, color=Fore.RED):\n    \"\"\"\n    Saves some work \n    \"\"\"\n    print(color+string+Style.RESET_ALL)","e0aa22ef":"def statistics(dataframe, column):\n    count(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.RED)\n    count(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.BLUE)\n    count(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.YELLOW)\n    count(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.GREEN)\n    count(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    count(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.MAGENTA)","41c6cc5e":"# Plot Year\nplt.style.use(\"classic\")\nsns.distplot(df['Year'], color='blue')\nplt.title(f\"Year [\\u03BC : {df['Year'].mean():.2f} conditions | \\u03C3 : {df['Year'].std():.2f} conditions]\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Count\")\nplt.show()","fa2d7d0a":"# Plot Value \nplt.style.use(\"classic\")\nsns.distplot(df['Value'], color='red')\nplt.title(f\" [\\u03BC : {df['Value'].mean():.2f} conditions | \\u03C3 : {df['Value'].std():.2f} conditions]\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Count\")\nplt.show()","eed5263d":"chn = df[(df['CountryName']=='China')].reset_index(drop=True)\nchn.head()","270f7d1f":"#Code by Taha07  https:\/\/www.kaggle.com\/taha07\/data-scientists-jobs-analysis-visualization\/notebook\n\ncolor = plt.cm.Reds(np.linspace(0,1,20))\nchn[\"SeriesName\"].value_counts().sort_values(ascending=False).head(20).plot.pie(y=\"Value\",colors=color,autopct=\"%0.1f%%\")\nplt.title(\"\")\nplt.axis(\"off\")\nplt.show()","31e8af3e":"fig = px.pie(chn,\n             values=\"Value\",\n             names=\"SeriesName\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"percent+label\")\nfig.show()","1fd95c04":"# Count Plot\nplt.style.use(\"classic\")\nplt.figure(figsize=(6, 4))\nsns.countplot(chn['Year'], palette='Reds', **{'hatch':'\/','linewidth':3})\nplt.xlabel(\"Year\")\nplt.ylabel(\"Count\")\nplt.title(\"Chinese Public Sector Indicators\")\nplt.xticks(rotation=45, fontsize=8)\nplt.show()","47d0554d":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in chn.SeriesName)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Reds', background_color=\"red\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","7901d8c6":"ax = sns.countplot(x = 'SeriesName',data=df,order=['Armed forces personnel, total','Air transport, passengers carried', 'Central government debt, total (% of GDP)', 'Battle-related deaths (number of people)'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45)","35b6da0c":"px.bar(df, x = 'Value', y = 'CountryName', color = 'CountryCode',orientation='h' , title='BRICS Public Sector Indicators ',  height = 500 )","e7ce8dce":"px.histogram(df, x='Value', range_x=[-5, 50], color='CountryName')","23d1e48d":"px.pie(df, 'CountryName')","3d0ad2f9":"#Code by Xhlulu   https:\/\/www.kaggle.com\/xhlulu\/android-or-ios-data-exploration\/comments\n\npx.scatter(df, x='CountryName', y='Value', color='CountryCode', log_y=True, marginal_y='box', range_x=[-20, 200])","dd205671":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke was Here.' )","38f2e91d":"#Codes by Xhlulu   https:\/\/www.kaggle.com\/xhlulu\/android-or-ios-data-exploration\/comments","3b0c3579":"#To avoid clumsy plotting, select a few columns.","b3f55a04":"#Code from Tanay Mehta https:\/\/www.kaggle.com\/heyytanay\/police-shooting-eda-interactive-map\/comments","9d9532bf":"![](https:\/\/www.nap.edu\/cover\/18346\/450)nap.edu"}}