{"cell_type":{"833b5d71":"code","eb70b888":"code","8f7f582a":"code","e97bef40":"code","a51bfcd0":"code","4b596f93":"code","0266b2b8":"code","878d23cc":"code","20f2f720":"code","5547ad71":"code","377cb573":"code","85367761":"code","1616d98b":"code","5b2ece68":"code","315fe247":"code","f51dbca2":"code","5f673494":"code","a05e3fb5":"code","7f39ef30":"code","b6975b13":"code","a167ddba":"code","f441c9e5":"code","5ff291d8":"code","6ebe3a66":"code","9a29b810":"code","59fe25f1":"code","1d2f1f9c":"code","e5f05b0d":"code","de4f932b":"code","9d66cf48":"code","36a470a1":"code","877d078c":"code","4fe4cc5f":"code","69d64b3f":"code","c27ed4e5":"code","abf20018":"code","1d1d017b":"code","97d380f9":"code","147c2082":"code","1fa32003":"code","0f415a29":"code","d54e1b2c":"code","33cf4ea2":"code","f8a9c18f":"code","c4632780":"code","b021e795":"code","769c1ef8":"code","4e83361e":"code","5a95102b":"code","4686bf75":"code","7dc8b7db":"code","8236ffba":"code","1ea5509e":"code","b7578225":"code","245e47e1":"code","c0ea784c":"code","87267f48":"code","c371b2dc":"code","b1ea6229":"code","a9ad0ce9":"code","f4426409":"code","57c1e3a9":"code","a73a1c37":"code","5a28cb12":"code","771cc9a4":"code","edf0ed02":"code","e6dcc335":"code","4a14bdcd":"code","be93eafb":"code","6c556f70":"code","a77c88f0":"code","d9b46dcb":"code","bbd3e911":"code","3101d10b":"code","fd4c606c":"code","49d5bcef":"markdown","988344a2":"markdown","08ec2df4":"markdown","b38de138":"markdown","99a18ff7":"markdown","f9b0b051":"markdown","e81af772":"markdown","a98ffb62":"markdown","239cb981":"markdown","3a6a1fda":"markdown","0ea4085d":"markdown","edc09f28":"markdown","8a473bfe":"markdown","de8c73ef":"markdown","8e1fed8f":"markdown","1ee38c3d":"markdown","d6a0d7b1":"markdown","33c418d1":"markdown","bebda4a8":"markdown","58025415":"markdown","2808f8ea":"markdown","3257c304":"markdown","de8cb91c":"markdown","e4c113cf":"markdown","b1f7a0b8":"markdown","9dc43410":"markdown","7c169fff":"markdown","4535c122":"markdown","7eb3321b":"markdown","6ad9f90b":"markdown","092bf794":"markdown","f14e2455":"markdown","4c94962c":"markdown","0f0f4d95":"markdown","d770d868":"markdown","213bfa71":"markdown","a6730171":"markdown","7de28281":"markdown","33b3e508":"markdown","a72e96ee":"markdown","97b6a83d":"markdown","26397755":"markdown","fd613802":"markdown","e06800d2":"markdown","63eea217":"markdown","2011302f":"markdown","4f3e6a57":"markdown","89446e65":"markdown","81178223":"markdown","ba009042":"markdown","d4b8dc4a":"markdown"},"source":{"833b5d71":"import os\nimport re\nimport warnings\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.tools as tools\nimport plotly.offline as ply\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\nfrom mpl_toolkits.mplot3d import axes3d\nfrom wordcloud import WordCloud, STOPWORDS\nfrom plotnine import *\nfrom os import path\nfrom PIL import Image\n##### configurations #####\nply.init_notebook_mode(connected=True)\ncolor = sns.color_palette()\n%matplotlib inline\nwarnings.filterwarnings('ignore')","eb70b888":"print(os.listdir(\"..\/input\/data-science-for-good-careervillage\/\"))","8f7f582a":"PATH = '..\/input\/data-science-for-good-careervillage\/'\nstudents = pd.read_csv(PATH + 'students.csv')\nprofessionals = pd.read_csv(PATH + 'professionals.csv')\nmatches = pd.read_csv(PATH + 'matches.csv')\nquestions = pd.read_csv(PATH + 'questions.csv')\nquestions_score = pd.read_csv(PATH + 'question_scores.csv')\nanswers = pd.read_csv(PATH + 'answers.csv')\nanswers_score = pd.read_csv(PATH + 'answer_scores.csv')\ncomments = pd.read_csv(PATH + 'comments.csv')\nemails = pd.read_csv(PATH + 'emails.csv')\ngroups = pd.read_csv(PATH + 'groups.csv')\ngroup_memberships = pd.read_csv(PATH + 'group_memberships.csv')\nschool_memberships = pd.read_csv(PATH + 'school_memberships.csv')\ntags = pd.read_csv(PATH + 'tags.csv')\ntag_questions = pd.read_csv(PATH + 'tag_questions.csv')\ntag_users = pd.read_csv(PATH + 'tag_users.csv')","e97bef40":"students.head()","a51bfcd0":"students['students_daily_joined'] = pd.to_datetime(students['students_date_joined']).dt.to_period('D')\nstudents['students_month_joined'] = pd.to_datetime(students['students_date_joined']).dt.to_period('M')\nstudents['students_year_joined'] = pd.to_datetime(students['students_date_joined']).dt.to_period('Y')\nstudents['students_weekly_joined'] = pd.to_datetime(students['students_date_joined']).dt.to_period('W')","4b596f93":"plt.style.use('ggplot')\nfig = plt.figure(figsize=(16, 12))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\n## Daily Registrations\nstudents_register = students[['students_daily_joined', \n                              'students_id']].groupby(['students_daily_joined']).count().reset_index()\nstudents_register = students_register.set_index('students_daily_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nmax_date = max(students_register.index)\nmin_date = min(students_register.index)\nax = students_register.plot(color='blue', ax=ax1, label='Registrations')\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.plot([min_date], [students_register.values[0]], '>r', markersize=10)\nax.plot([max_date], [students_register.values[-1]], 'or', markersize=10)\nax.annotate('Highest # of Registrations', xy=('2017-08-01', 400),  xycoords='data',\n             xytext=(0, 100), textcoords='offset points',\n             size=13, ha='right', va=\"center\",\n             bbox=dict(boxstyle=\"round\", alpha=0.1),\n             arrowprops=dict(arrowstyle=\"wedge,tail_width=0.5\", alpha=0.1))\nax.set_xlabel('Date in Days')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Students Registration by Day')\n\n## Weekly Registrations\nstudents_register = students[['students_weekly_joined', \n                              'students_id']].groupby(['students_weekly_joined']).count().reset_index()\nstudents_register = students_register.set_index('students_weekly_joined')\nmax_date = max(students_register.index)\nmin_date = min(students_register.index)\nplt.rcParams['figure.figsize'] = (8, 6)\nax = students_register.plot(color='blue', ax=ax2)\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.set_xlabel('Date in weeks')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Students Registration by Weekly')\n\n## Monthly Registrations\nstudents_register = students[['students_month_joined', \n                              'students_id']].groupby(['students_month_joined']).count().reset_index()\nstudents_register = students_register.set_index('students_month_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = students_register.plot(color='blue', ax=ax3)\nmax_date = max(students_register.index)\nmin_date = min(students_register.index)\nax.axvspan(min_date, '2011-12', color='green', alpha=0.3)\nax.axvspan('2019-01', max_date, color='green', alpha=0.3)\nax.axvline('2011-12-31', color='green', linestyle='--')\nax.set_xlabel('Date in Months')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Students Registration by Month')\n\n## Yearly Registrations\nstudents_register = students[['students_year_joined', \n                              'students_id']].groupby(['students_year_joined']).count().reset_index()\nstudents_register = students_register.set_index('students_year_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = students_register.plot(color='blue', ax=ax4)\nmax_date = max(students_register.index)\nmin_date = min(students_register.index)\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.set_xlabel('Date in Years')\nax.set_ylabel('Number of Students')\nax.set_title('All time Students Registration by Year')\n\nplt.show()","0266b2b8":"professionals.head()","878d23cc":"professionals['professionals_daily_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.to_period('D')\nprofessionals['professionals_month_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.to_period('M')\nprofessionals['professionals_year_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.to_period('Y')\nprofessionals['professionals_weekly_joined'] = pd.to_datetime(professionals['professionals_date_joined']).dt.to_period('W')","20f2f720":"plt.style.use('ggplot')\nfig = plt.figure(figsize=(16, 12))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(223)\nax4 = fig.add_subplot(224)\n\n## Daily Registrations\nprofessionals_register = professionals[['professionals_daily_joined', \n                              'professionals_id']].groupby(['professionals_daily_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_daily_joined')\nmax_date = max(professionals_register.index)\nmin_date = min(professionals_register.index)\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax1)\nmax_date = max(professionals_register.index)\nmin_date = min(professionals_register.index)\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.set_xlabel('Date in Days')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Student Registration by Day')\n\n## Weekly Registrations\nprofessionals_register = professionals[['professionals_weekly_joined', \n                              'professionals_id']].groupby(['professionals_weekly_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_weekly_joined')\n\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax2)\nmax_date = max(professionals_register.index)\nmin_date = min(professionals_register.index)\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.set_xlabel('Date in weeks')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Student Registration by Weekly')\n\n## Monthly Registrations\nprofessionals_register = professionals[['professionals_month_joined', \n                              'professionals_id']].groupby(['professionals_month_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_month_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax3)\nmax_date = max(professionals_register.index)\nmin_date = min(professionals_register.index)\nax.axvspan(min_date, '2011-12', color='green', alpha=0.3)\nax.axvspan('2019-01', max_date, color='green', alpha=0.3)\nax.axvline('2011-12-31', color='green', linestyle='--')\nax.set_xlabel('Date in Months')\nax.set_ylabel('Number of Students Registered')\nax.set_title('All time Student Registration by Month')\n\n## Yearly Registrations\nprofessionals_register = professionals[['professionals_year_joined', \n                              'professionals_id']].groupby(['professionals_year_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_year_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax4)\nmax_date = max(professionals_register.index)\nmin_date = min(professionals_register.index)\nax.axvspan(min_date, '2011-12-31', color='green', alpha=0.3)\nax.axvspan('2019-01-01', max_date, color='green', alpha=0.3)\nax.set_xlabel('Date in Years')\nax.set_ylabel('Number of Students')\nax.set_title('All time Students Registration by Year')\n\nplt.show()","5547ad71":"fig = plt.figure(figsize=(16, 8))\nax1 = fig.add_subplot(121)\nax2 = fig.add_subplot(122)\n\nprofessionals_register = professionals[['professionals_month_joined', \n                              'professionals_id']].groupby(['professionals_month_joined']).count().reset_index()\nstudents_register = students[['students_month_joined', \n                              'students_id']].groupby(['students_month_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_month_joined')\nstudents_register = students_register.set_index('students_month_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax1)\n\n\nplt.rcParams['figure.figsize'] = (8, 6)\nax = students_register.plot(color='red', ax=ax1)\nax.set_xlabel('Date in Months')\nax.set_ylabel('Number of Registrations')\nax.set_title('All time Registration by Month')\n\n\nprofessionals_register = professionals[['professionals_year_joined', \n                              'professionals_id']].groupby(['professionals_year_joined']).count().reset_index()\nstudents_register = students[['students_year_joined', \n                              'students_id']].groupby(['students_year_joined']).count().reset_index()\nprofessionals_register = professionals_register.set_index('professionals_year_joined')\nstudents_register = students_register.set_index('students_year_joined')\nplt.rcParams['figure.figsize'] = (8, 6)\nax = professionals_register.plot(color='blue', ax=ax2)\n\n\nplt.rcParams['figure.figsize'] = (8, 6)\nax = students_register.plot(color='red', ax=ax2)\nax.set_xlabel('Date in Years')\nax.set_ylabel('Number of Registrations')\nax.set_title('All time Registration by Years')\n\nplt.show()","377cb573":"list_countries = [\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Antigua and Barbuda\", \"Argentina\", \"Armenia\",\n\"Australia\", \"Austria\", \"Azerbaijan\", \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\",\n\"Belize\", \"Benin\", \"Bhutan\", \"Bolivia\", \"Bosnia and Herzegovina\", \"Botswana\", \"Brazil\", \"Brunei\", \"Bulgaria\",\n\"Burkina Faso\", \"Burundi\", \"C\u00f4te d'Ivoire\", \"Cabo Verde\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Central African Republic\",\n\"Chad\", \"Chile\", \"China\", \"Colombia\", \"Comoros\", \"Congo (Congo-Brazzaville)\", \"Costa Rica\", \"Croatia\", \"Cuba\", \"Cyprus\",\n\"Czech Republic\", \"Democratic Republic of the Congo\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\", \"Ecuador\",\n\"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\", \"Fiji\", \"Finland\", \"France\", \"Gabon\",\n\"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Greece\", \"Grenada\", \"Guatemala\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\",\n\"Holy See\", \"Honduras\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\", \"Israel\", \"Italy\",\n\"Jamaica\", \"Japan\", \"Jordan\", \"Kazakhstan\", \"Kenya\", \"Kiribati\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\",\n\"Lesotho\", \"Liberia\", \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\",\n\"Maldives\", \"Mali\", \"Malta\", \"Marshall Islands\", \"Mauritania\", \"Mauritius\", \"Mexico\", \"Micronesia\", \"Moldova\", \"Monaco\",\n\"Mongolia\", \"Montenegro\", \"Morocco\", \"Mozambique\", \"Myanmar\", \"Namibia\", \"Nauru\", \"Nepal\", \"Netherlands\", \"New Zealand\",\n\"Nicaragua\", \"Niger\", \"Nigeria\", \"North Korea\", \"Norway\", \"Oman\", \"Pakistan\", \"Palau\", \"Palestine State\", \"Panama\",\n\"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\",\n\"Saint Kitts and Nevis\", \"Saint Lucia\", \"Saint Vincent and the Grenadines\", \"Samoa\", \"San Marino\", \"Sao Tome and Principe\",\n\"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Seychelles\", \"Sierra Leone\", \"Singapore\", \"Slovakia\", \"Slovenia\", \"Solomon Islands\",\n\"Somalia\", \"South Africa\", \"South Korea\", \"South Sudan\",  \"Spain\", \"Sri Lanka\", \"Sudan\", \"Suriname\",\"Swaziland\", \"Sweden\",\n\"Switzerland\", \"Syria\", \"Tajikistan\", \"Tanzania\", \"Thailand\", \"Timor-Leste\", \"Togo\", \"Tonga\", \"Trinidad and Tobago\",\n\"Tunisia\", \"Turkey\",  \"Turkmenistan\", \"Tuvalu\", \"Uganda\",  \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\", \n\"United States\", \"Uruguay\", \"Uzbekistan\", \"Vanuatu\",  \"Venezuela\", \"Viet Nam\", \"Yemen\",  \"Zambia\", \"Zimbabwe\"]\n\nusa_codes = [['AL', 'Alabama'], ['AK', 'Alaska'],  ['AZ', 'Arizona'], ['AR', 'Arkansas'],\n       ['CA', 'California'], ['CO', 'Colorado'], ['CT', 'Connecticut'], ['DE', 'Delaware'],\n       ['FL', 'Florida'], ['GA', 'Georgia'], ['HI', 'Hawaii'], ['ID', 'Idaho'], ['IL', 'Illinois'],\n       ['IN', 'Indiana'], ['IA', 'Iowa'], ['KS', 'Kansas'], ['KY', 'Kentucky'],['LA', 'Louisiana'], \n       ['ME', 'Maine'], ['MD', 'Maryland'], ['MA', 'Massachusetts'], ['MI', 'Michigan'], ['MN', 'Minnesota'],\n       ['MS', 'Mississippi'], ['MO', 'Missouri'], ['MT', 'Montana'], ['NE', 'Nebraska'], ['NV', 'Nevada'], \n       ['NH', 'New Hampshire'], ['NJ', 'New Jersey'], ['NM', 'New Mexico'], ['NY', 'New York'], ['NC', 'North Carolina'], \n       ['ND', 'North Dakota'], ['OH', 'Ohio'], ['OK', 'Oklahoma'], ['OR', 'Oregon'], ['PA', 'Pennsylvania'],\n       ['RI', 'Rhode Island'], ['SC', 'South Carolina'], ['SD', 'South Dakota'], ['TN', 'Tennessee'],\n       ['TX', 'Texas'], ['UT', 'Utah'], ['VT', 'Vermont'], ['VA', 'Virginia'], ['WA', 'Washington'], \n       ['WV', 'West Virginia'], ['WI', 'Wisconsin'], ['WY', 'Wyoming']]\nus_states = pd.DataFrame(data=usa_codes, columns=['Code', 'State'])\n\n\ngeorgia_cities = [\"Tbilisi\", \"Batumi\", \"Kutaisi\", \"Rustavi\", \"Gori\", \"Zugdidi\", \"Poti\", \"Khashuri\", \"Samtredia\", \"Senaki\", \n\"Zestafoni\", \"Marneuli\", \"Telavi\", \"Akhaltsikhe\", \"Kobuleti\", \"Ozurgeti\", \"Kaspi\", \"Chiatura\", \"Tsqaltubo\"\n,\"Sagarejo\", \"Gardabani\", \"Borjomi\", \"Tqibuli\", \"Khoni\", \"Bolnisi\", \"Akhalkalaki\", \"Gurjaani\", \"Mtskheta\"\n,\"Qvareli\", \"Akhmeta\", \"Kareli\", \"Lanchkhuti\", \"Tsalenjikha\", \"Dusheti\", \"Sachkhere\", \"Dedoplistsqaro\",\n\"Lagodekhi\", \"Ninotsminda\", \"Abasha\",\"Tsnori\", \"Terjola\", \"Martvili\", \"Jvari\", \"Khobi\", \"Vani\", \"Baghdati\"\n,\"Vale\", \"Tetritsqaro\", \"Tsalka\", \"Dmanisi\", \"Oni\", \"Ambrolauri\", \"Sighnaghi\", \"Tsageri\"]","85367761":"def get_country(location, countries, states):\n    ''' This module returns coutry for any given location '''\n    address = ''\n    for country in countries:\n        if country in location:\n            address = country\n    \n    if address == '':\n        for state in states:\n            if state in location:\n                address = 'United States'\n                \n    return address","1616d98b":"students.students_location = students.students_location.astype(str)\nstudents['country'] = students.apply(lambda row: get_country(row['students_location'], \n                                                             list_countries, \n                                                             us_states['State']), axis=1)\nstudents.loc[students.students_location.str.contains('Indiana'), 'country'] = 'United States'\nstudents.loc[students.students_location.str.contains('North Carolina'), 'country'] = 'United States'\nstudents.loc[students.students_location.str.contains('Georgia'), 'country'] = 'United States'\nfor city in georgia_cities:\n    students.loc[students.students_location.str.contains(city), 'country'] = 'Georgia'","5b2ece68":"students_maps = pd.DataFrame(students.country.value_counts()).reset_index()\nstudents_maps.columns=['country', 'total']\nstudents_maps = students_maps.reset_index().drop('index', axis=1)","315fe247":"data = [ dict(\n        type = 'choropleth',\n        locations = students_maps['country'],\n        locationmode = 'country names',\n        z = students_maps['total'],\n        text = students_maps['country'],\n        colorscale =\n            [[0,\"rgb(5, 50, 172)\"],[0.85,\"rgb(40, 100, 190)\"],[0.9,\"rgb(70, 140, 245)\"],\n            [0.94,\"rgb(90, 160, 245)\"],[0.97,\"rgb(106, 177, 247)\"],[1,\"rgb(220, 250, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Number of Students'),\n      ) ]\n\nlayout = dict(\n    title = 'Number of students Per Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfigure = dict( data=data, layout=layout )\nply.iplot(figure, validate=False, filename='students')","f51dbca2":"#students_usa\ndef usa_state(location, usa_states):\n    ''' This modules fix States Location for United States '''\n    address = ''\n    for index, state in usa_states.iterrows():\n        if (state.Code in location) or (state.State in location):\n            address = state.Code\n    return address","5f673494":"students_usa = students[students.country == 'United States']\nstudents_usa['States'] = students_usa.apply(lambda x: usa_state(x['students_location'], us_states), axis=1)\nstudents_usa.loc[students_usa['States'] == '', 'States'] = 'NY'\ncounts = pd.DataFrame({'Code': students_usa.States.value_counts().index, \n                       'Total': students_usa.States.value_counts().values})\nmaps_df = counts.merge(us_states, on='Code', how='inner')","a05e3fb5":"maps_df['text'] = maps_df['State'] + '<br>  ' + (maps_df['Total']).astype(str)+' Students'\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = 'YlGnBu',\n        autocolorscale = False,\n        locations = maps_df['Code'],\n        z = maps_df['Total'].astype(float),\n        locationmode = 'USA-states',\n        text = maps_df['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Number of Students\")\n        ) ]\n\nlayout = dict(\n        title = 'CareerVillage.org Students <br>(Hover for breakdown)',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = dict( data=data, layout=layout )\nply.iplot( fig, filename='d3-cloropleth-map' )","7f39ef30":"professionals.professionals_location = professionals.professionals_location.astype(str)\nprofessionals['country'] = professionals.apply(lambda row: get_country(row['professionals_location'], \n                                                             list_countries, \n                                                             us_states['State']), axis=1)\nprofessionals.loc[professionals.professionals_location.str.contains('Indiana'), 'country'] = 'United States'\nprofessionals.loc[professionals.professionals_location.str.contains('North Carolina'), 'country'] = 'United States'\nprofessionals.loc[professionals.professionals_location.str.contains('Georgia'), 'country'] = 'United States'\nfor city in georgia_cities:\n    professionals.loc[professionals.professionals_location.str.contains(city), 'country'] = 'Georgia'","b6975b13":"professionals_maps = pd.DataFrame(professionals.country.value_counts()).reset_index()\nprofessionals_maps.columns=['country', 'total']\nprofessionals_maps = professionals_maps.reset_index().drop('index', axis=1)","a167ddba":"data = [ dict(\n        type = 'choropleth',\n        locations = professionals_maps['country'],\n        locationmode = 'country names',\n        z = professionals_maps['total'],\n        text = professionals_maps['country'],\n        colorscale = [[0,\"rgb(5, 50, 172)\"],[0.85,\"rgb(40, 100, 190)\"],[0.9,\"rgb(70, 140, 245)\"],\n            [0.94,\"rgb(90, 160, 245)\"],[0.97,\"rgb(106, 177, 247)\"],[1,\"rgb(220, 250, 220)\"]],\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '',\n            title = 'Number of Professionals'),\n      ) ]\n\nlayout = dict(\n    title = 'Number of Professionals Per Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator'\n        )\n    )\n)\n\nfigure = dict( data=data, layout=layout )\nply.iplot(figure, validate=False, filename='Professionals')","f441c9e5":"professionals_usa = professionals[professionals.country == 'United States']\nprofessionals_usa['States'] = professionals_usa.apply(lambda x: usa_state(x['professionals_location'], us_states), axis=1)\nprofessionals_usa.loc[professionals_usa['States'] == '', 'States'] = 'NY'\ncounts = pd.DataFrame({'Code': professionals_usa.States.value_counts().index, \n                       'Total': professionals_usa.States.value_counts().values})\nmaps_df = counts.merge(us_states, on='Code', how='inner')","5ff291d8":"maps_df['text'] = maps_df['State'] + '<br>  ' + (maps_df['Total']).astype(str)+' Students'\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'],\\\n            [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\ndata = [ dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale = False,\n        locations = maps_df['Code'],\n        z = maps_df['Total'].astype(float),\n        locationmode = 'USA-states',\n        #text = maps_df['text'],\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 2\n            ) ),\n        colorbar = dict(\n            title = \"Number of Professionals\")\n        ) ]\n\nlayout = dict(\n        title = 'CareerVillage.org Professionals <br>(Hover for breakdown)',\n        geo = dict(\n            scope='usa',\n            projection=dict( type='albers usa' ),\n            showlakes = True,\n            lakecolor = 'rgb(255, 255, 255)'),\n             )\n    \nfig = dict( data=data, layout=layout )\nply.iplot( fig, filename='d3-cloropleth-map' )","6ebe3a66":"plt.figure(figsize=(12, 8))\nprofessionals.professionals_industry.value_counts()[:20][::-1].plot(kind='barh')\nplt.show()","9a29b810":"def find_company(headline):\n    ''' This Function finds company at which Professionals work '''\n    value = ''\n    if ' at ' in str(headline):\n        value = headline.split(' at ')[1]\n    else:\n        value = str(headline)\n    return value","59fe25f1":"professionals['company'] = professionals.professionals_headline.apply(lambda x:find_company(x))","1d2f1f9c":"plt.figure(figsize=(12, 8))\nprofessionals[(professionals.company!='nan')&(professionals.company!='--')].company.value_counts()[:20][::-1].plot(kind='barh')\nplt.show()","e5f05b0d":"clouds_company = professionals[(professionals.company!='nan')&(professionals.company!='--')]\nd = path.dirname(__file__) if \"__file__\" in locals() else os.getcwd()\nmask = np.array(Image.open(path.join(d, \"..\/input\/careerimages\/Job.png\")))\nstopwords = set(STOPWORDS)\nwc = WordCloud(background_color=\"white\", max_words=2000, mask=mask,\n               stopwords=stopwords, contour_width=3, contour_color='white')\nwc.generate(' '.join(clouds_company['company'].astype(str)))\nplt.figure(figsize=(16, 12))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","de4f932b":"clouds_company.head()","9d66cf48":"# professionals[(professionals.company!='nan')&(professionals.company!='--')].company.value_counts()\n# sns.set(style=\"whitegrid\")\n# fig, ax = plt.subplots(figsize=(13, 7))\n# sns.set_color_codes(\"pastel\")\n# sns.barplot(x=\"Total Members\", y='Group Name', data=groups_data,\n#             label=\"Members\", color=\"b\")\n\n# sns.set_color_codes(\"muted\")\n# sns.barplot(x=\"Total Groups\", y=\"Group Name\", data=groups_data,\n#             label=\"Total Groups\", color=\"b\")\n\n# ax.legend(ncol=2, loc=\"lower right\", frameon=True)\n# ax.set(xlim=(0, 411), ylabel=\"Group Name\", title='Number of Members In Groups',\n#        xlabel=\"Number of Groups\")\n# sns.despine(left=True, bottom=True)","36a470a1":"school_memberships.head()","877d078c":"len(school_memberships.school_memberships_school_id.unique())","4fe4cc5f":"questions.head()","69d64b3f":"structured_patterns = [\n (r'won\\'t', 'will not'),\n (r'can\\'t', 'cannot'),\n (r'i\\'m', 'i am'),\n (r'ain\\'t', 'is not'),\n (r'(\\w+)\\'ll', '\\g<1> will'),\n (r'(\\w+)n\\'t', '\\g<1> not'),\n (r'(\\w+)\\'ve', '\\g<1> have'),\n (r'(\\w+)\\'s', '\\g<1> is'),\n (r'(\\w+)\\'re', '\\g<1> are'),\n (r'(\\w+)\\'d', '\\g<1> would')\n]\n\nclass RegexpReplacer(object):\n    def __init__(self, patterns=structured_patterns):\n         self.patterns = [(re.compile(regex), repl) for (regex, repl) in\n         patterns]\n            \n    def replace(self, text):\n        s = text\n        for (pattern, repl) in self.patterns:\n             s = re.sub(pattern, repl, s)\n        return s","c27ed4e5":"def strip_symbols(text):\n    return ' '.join(re.compile(r'\\W+', re.UNICODE).split(text))\n\ndef clean_text(df, column):\n    \n    df[column] = df[column].str.lower()\n    df[column] = df[column].str.replace('\\n',' ')\n    replacer = RegexpReplacer()\n    try:\n        df[column] = df[column].apply(lambda x:replacer.replace(x))\n        df[column] = df[column].apply(lambda x:strip_symbols(x))\n    except:\n        pass\n    return df\n\ndef plot_wordcloud(df, column, name):\n    \n    d = path.dirname(__file__) if \"__file__\" in locals() else os.getcwd()\n    mask = np.array(Image.open(path.join(d, '..\/input\/careerimages\/' + name + \".png\")))\n    stopwords = set(STOPWORDS)\n    wc = WordCloud(background_color=\"white\", max_words=2000, mask=mask,\n                   stopwords=stopwords, contour_width=3, contour_color='white')\n    wc.generate(' '.join(df[column]))\n    plt.figure(figsize=(16, 12))\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()","abf20018":"questions = clean_text(questions, 'questions_title')\nquestions = clean_text(questions, 'questions_body')","1d1d017b":"questions.head()","97d380f9":"#questions.questions_author_id.value_counts()","147c2082":"plot_wordcloud(questions, 'questions_title', 'WordArt')","1fa32003":"plot_wordcloud(questions, 'questions_body', 'Quiz')","0f415a29":"answers.head()","d54e1b2c":"answers.answers_body = answers.answers_body.apply(lambda x: re.sub(re.compile('<.*?>'), '', str(x)))","33cf4ea2":"answers.answers_body = answers.answers_body.astype(str)\nanswers = clean_text(answers, 'answers_body')","f8a9c18f":"plot_wordcloud(answers, 'answers_body', 'Reply')","c4632780":"comments.head()","b021e795":"comments = clean_text(comments, 'comments_body')","769c1ef8":"comments.comments_body = comments.comments_body.astype(str)\nplot_wordcloud(comments, 'comments_body', 'Comment')","4e83361e":"fig = plt.figure(figsize=(16, 8))\nax1 = fig.add_subplot(111)\nquestions.questions_date_added = pd.to_datetime(questions.questions_date_added).dt.to_period('M')\nanswers.answers_date_added = pd.to_datetime(answers.answers_date_added).dt.to_period('M')\ncomments.comments_date_added = pd.to_datetime(comments.comments_date_added).dt.to_period('M')\nquestions_added = questions[['questions_date_added', \n                              'questions_id']].groupby(['questions_date_added']).count().reset_index()\nanswers_added = answers[['answers_date_added', \n                              'answers_id']].groupby(['answers_date_added']).count().reset_index()\ncomments_added = comments[['comments_date_added', \n                              'comments_id']].groupby(['comments_date_added']).count().reset_index()\nquestions_added = questions_added.set_index('questions_date_added')\nanswers_added = answers_added.set_index('answers_date_added')\ncomments_added = comments_added.set_index('comments_date_added')\nplt.rcParams['figure.figsize'] = (16, 8)\nax = questions_added.plot(color='blue', ax=ax1)\nax = answers_added.plot(color='red', ax=ax1)\nax = comments_added.plot(color='green', ax=ax1)\nax.set_xlabel('Date in Month')\nax.set_ylabel('Number of Interactions')\nax.set_title('Conversations On Questions, Answers and Comments')\n\nplt.show()","5a95102b":"questions_score.head()","4686bf75":"sns.kdeplot(questions_score.score)\nplt.show()","7dc8b7db":"sns.kdeplot(questions_score.score, cumulative=True)\nplt.show()","8236ffba":"answers_score.head()","1ea5509e":"sns.kdeplot(answers_score.score)\nplt.show()","b7578225":"sns.kdeplot(answers_score.score, cumulative=True)\nplt.show()","245e47e1":"matches.head()","c0ea784c":"emails.head()","87267f48":"emails.emails_frequency_level.value_counts()","c371b2dc":"X = emails.emails_frequency_level.value_counts()\ncolors = ['#F08080', '#1E90FF', '#FFFF99']\n\nplt.pie(X.values, labels=X.index, colors=colors,\n        startangle=90,\n        explode = (0, 0, 0),\n        autopct = '%1.2f%%')\nplt.axis('equal')\nplt.show()","b1ea6229":"groups.head()","a9ad0ce9":"groups_type = pd.DataFrame(groups.groups_group_type.value_counts(dropna=False))\ngroups_type = groups_type.reset_index().rename(columns={'index':'Group Name', 'groups_group_type': 'Total Groups'})\ngroups_type","f4426409":"group_memberships.head()","57c1e3a9":"groups_data = pd.DataFrame(group_memberships.merge(groups.rename(columns={'groups_id':'group_memberships_group_id'}), \n                        on='group_memberships_group_id').groups_group_type.value_counts().reset_index()).rename(\ncolumns={'index': 'Group Name', 'groups_group_type':'Total Members'}).merge(groups_type, on='Group Name')\ngroups_data","a73a1c37":"sns.set(style=\"whitegrid\")\nfig, ax = plt.subplots(figsize=(13, 7))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Total Members\", y='Group Name', data=groups_data,\n            label=\"Members\", color=\"b\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Total Groups\", y=\"Group Name\", data=groups_data,\n            label=\"Total Groups\", color=\"b\")\n\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 411), ylabel=\"Group Name\", title='Number of Members In Groups',\n       xlabel=\"Number of Groups\")\nsns.despine(left=True, bottom=True)","5a28cb12":"tags.head()","771cc9a4":"tag_users.head()","edf0ed02":"tag_questions.head()","e6dcc335":"users_tags = tag_users.rename(columns={'tag_users_tag_id': 'tags_tag_id'}).merge(tags, on='tags_tag_id')","4a14bdcd":"users_tags.head()","be93eafb":"users_tags.groupby(['tag_users_user_id', \n                    'tags_tag_name']).agg({'tags_tag_id':\n                                           'count'}).reset_index().sort_values(by=['tags_tag_id'], ascending=False).head()","6c556f70":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel","a77c88f0":"tfidf = TfidfVectorizer(stop_words='english')\n## For making the questions asked we can add even tags for extensions [questions.questions_body, tags.name, ] this has to be merged with \n# user tags and questions tags\nquestions.questions_body = pd.concat([questions.questions_body, questions.questions_title], axis=1)\ntfidf_matrix = tfidf.fit_transform(questions.questions_body)\n","d9b46dcb":"cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\nindices = pd.Series(questions.index, index=questions['questions_title']).drop_duplicates()","bbd3e911":"def get_recommendations(questions_title, cosine_sim=cosine_sim):\n    idx = indices[questions_title]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:11]\n    question_indices = [i[0] for i in sim_scores]\n    return questions.iloc[question_indices].merge(answers.rename(columns={'answers_question_id':\n                                                                         'questions_id'}), on='questions_id')[['answers_body',\n                                                                                                             'answers_author_id',\n                                                                                                             'questions_body']]","3101d10b":"answers.head()","fd4c606c":"get_recommendations('teacher career question')","49d5bcef":"## Answers \n___\n\n#### Partial View of Data \nLets see Answers dataset how it looks like","988344a2":"#### Word Cloud for Answers","08ec2df4":"#### Let's see where Professionals are coming from","b38de138":"# Solution","99a18ff7":"#### Let's see which country students are coming from","f9b0b051":"#### Top Four States with Professionals\n* Texas with <span style='color:green'> 2983 <\/span> Professionals\n* California with <span style='color:green'> 2919 <\/span> Professionals  \n* New York with <span style='color:green'> 2503 <\/span> Professionals  \n* Washington with <span style='color:green'> 1264 <\/span> Professionals","e81af772":"### Word cloud for Question Titles","a98ffb62":"#### Top three countries\n* USA with <span style='color:green'>18091<\/span> Professionals \n* India with <span style='color:green'>864<\/span> Professionals\n* Canada with <span style='color:green'>363<\/span> Professionals\n#### <span style='color:green'>Note: The Professionals and Students are mostly coming from this top three countries<\/span>","239cb981":"## Groups\n___\n#### Partial View of Data \nLets see Groups dataset how it looks like","3a6a1fda":"#### Top three countries\n* USA with <span style='color:green'>23927<\/span> students \n* India with <span style='color:green'>2558<\/span> students\n* Canada with <span style='color:green'>571<\/span> students","0ea4085d":"## Professionals\n___\n#### Partial View of Data \nLets see professionals dataset how it looks like","edc09f28":"### Thanks for going through this kernel \n#### If you find this notebook useful please upvote \n#### Your feedback is highly appreciated ","8a473bfe":"<img src='https:\/\/cdn.dribbble.com\/users\/2283887\/screenshots\/5648716\/illustration_1.gif' \/>","de8c73ef":"\n<img src='https:\/\/cdn.dribbble.com\/users\/329207\/screenshots\/5300458\/bemocs_db_dribbble_04_mile842.jpg' width='600'\/>","8e1fed8f":"<img src='https:\/\/cdn.dribbble.com\/users\/599042\/screenshots\/5724852\/mailplane.gif' width='500'\/>","1ee38c3d":"#### Let's See Which states has more students ","d6a0d7b1":"___ \n### Loading Packages\nThe libraries below will be used to load and explore CareerVillage.org data challenge","33c418d1":"### Summary \n\nIn this competition you'll notice there isn't a leaderboard, and you are not required to develop a predictive model. This isn't a traditional supervised Kaggle machine learning competition.\n\nCareerVillage.org is a nonprofit that crowdsources career advice for underserved youth. Founded in 2011 in four classrooms in New York City, the platform has now served career advice from 25,000 volunteer professionals to over 3.5M online learners. The platform uses a Q&A style similar to StackOverflow or Quora to provide students with answers to any question about any career.\n\nIn this Data Science for Good challenge, CareerVillage.org, in partnership with Google.org, is inviting you to help recommend questions to appropriate volunteers. To support this challenge, CareerVillage.org has supplied five years of data.","bebda4a8":"___\n\n### Problem Statement\n\nThe U.S. has almost 500 students for every guidance counselor. Underserved youth lack the network to find their career role models, making CareerVillage.org the only option for millions of young people in America and around the globe with nowhere else to turn.\n\nTo date, 25,000 volunteers have created profiles and opted in to receive emails when a career question is a good fit for them. This is where your skills come in. To help students get the advice they need, the team at CareerVillage.org needs to be able to send the right questions to the right volunteers. The notifications sent to volunteers seem to have the greatest impact on how many questions are answered.\n\n<span style='color:green'>**Your objective: develop a method to recommend relevant questions to the professionals who are most likely to answer them.**<\/span>","58025415":"## Schools Memberships\n___\n\n#### Partial View of Data \nLets see Schools Memberships dataset how it looks like","2808f8ea":"## Cheking Simmilar Questions","3257c304":"### Listing CareerVillage.org data files\nIn order for us to know which files we should load we firstly list the files from input directory","de8cb91c":"## Match\n___\n#### Partial View of Data \nLets see the Match dataset how it looks like","e4c113cf":"## Students\n___\n#### Partial View of Data \nLets see the students dataset how it looks like","b1f7a0b8":"### Top 20 Professional Industries","9dc43410":"### Let's See Which Companies Professional Works","7c169fff":"___\n### Load data\nNow that we have data lets load it for analysis","4535c122":"## Email\n___\n#### Partial View of Data \nLets see the students dataset how it looks like","7eb3321b":"# CareerVillage.org","6ad9f90b":"### Compare Registration for Students and Professionals\nComparison made on Months and Years","092bf794":"### Lets clean Up the text","f14e2455":"#### Top 20 Comapnies ","4c94962c":"#### Top Four States with students\n* California with <span style='color:green'> 4537 <\/span> students\n* Texas with <span style='color:green'> 2715 <\/span> students  \n* New York with <span style='color:green'> 1851 <\/span> students  \n* Florida with <span style='color:green'> 1474 <\/span> students","0f0f4d95":"### Recommendations \n- Professional tags can be used to pair with the questions\n- We can use the hearts to rank questions and answers similar to upcoming questions\n- The Questions that are not answered can be answered by outsourcing to relevant Professionals \n- There will be no questions left behind If tags, Professionals tags, questions Tags are used to make the system more robust and match the questions to right professionals\n- Further More, we can use Professional headline to know which company they work for and how likely are Professionals from XYZ company are likely to answer questions","d770d868":"<img src='https:\/\/cdn.dribbble.com\/users\/406059\/screenshots\/3017368\/salesforce_dribbble.gif' width='700'\/>","213bfa71":"#### Lets Check the word clouds","a6730171":"### We have 2706 Schools that have at least one students ","7de28281":"## Comments \n___\n\n#### Partial View of Data \nLets see Comments dataset how it looks like","33b3e508":"Structuring data on period: Days, Weeks, Months and Years","a72e96ee":"## Locations\n___\n#### Clean location data\nFor Locations, the dataset was found on the following URLs, since places may have samillar names that has to be worked out to produce a very nice analysis  \n\nhttps:\/\/www.ups.com\/worldshiphelp\/WS14\/ENU\/AppHelp\/Codes\/State_Province_Codes.htm *For States Province*\nhttp:\/\/www.worldometers.info\/geography\/alphabetical-list-of-countries   *For Countries* \nhttps:\/\/en.wikipedia.org\/wiki\/List_of_cities_and_towns_in_Georgia_(country) *For Georgia Country not to confuse it with Georgia State*  \n\n<img src='https:\/\/cdn.dribbble.com\/users\/63407\/screenshots\/5834137\/dribbble_tea_haytruck.png' width='700' style='position:center' \/>","97b6a83d":"### Students Locations","26397755":"### Interaction Over Time (Monthly)","fd613802":"Structuring data on period: Days, Weeks, Months and Years","e06800d2":"### Heart Distribution","63eea217":"## Questions\n___\n\n#### Partial View of Data \nLets see Questions dataset how it looks like","2011302f":"## Tags\n___\n","4f3e6a57":"## Matching","89446e65":"### Exploratory Data Analysis(EDA)\n___\n\n\"Choose a job you love, and you will never have to work a day in your life.\u201d (Confucius)\n\n\n<img src='https:\/\/cdn.dribbble.com\/users\/113005\/screenshots\/4170419\/pencil-rocket_blog.gif' width='60%' style='position:center'\/>","81178223":"### Get Recommended Professional to Answer the questions","ba009042":"### Professionals Locations","d4b8dc4a":"### Word Cloud for Questions Asked"}}