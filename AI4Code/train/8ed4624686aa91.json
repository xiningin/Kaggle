{"cell_type":{"c8ef8cf1":"code","1463b4de":"code","5b01af7b":"code","f0a24228":"code","7da844d3":"code","a428679c":"code","224957dc":"code","75780ecd":"code","a37832e9":"code","62d07eb6":"code","a7e5bb69":"code","9637663f":"code","5dde2a4e":"code","fae44893":"code","c6aff691":"code","47ee7a51":"code","109ee04b":"code","9e93f140":"code","4c314463":"code","b4c594a8":"code","e52c06cb":"code","18f94e67":"code","0aecfb96":"markdown","0a57df86":"markdown","a2fb0c4a":"markdown","4bcb5860":"markdown","d1ce505f":"markdown","b49230e2":"markdown","dfffe482":"markdown","6f72c8af":"markdown","cb9aa318":"markdown","c859f43b":"markdown"},"source":{"c8ef8cf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1463b4de":"# PyTorch Imports\nimport torch\nimport torch.nn as nn                               # to access build-in functions to build the NN\nimport torch.nn.functional as F                     # to access activation functions\nimport torch.optim as optim                         # to build out optimizer\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\n\n\n\n\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom keras.utils import to_categorical\n%matplotlib inline","5b01af7b":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv') ","f0a24228":"train.head()","7da844d3":"train_set = train.iloc[:,1:]\nlabel = train[\"label\"]","a428679c":"# normalizing\n\nnorm_train_set = train_set \/ 255\nnorm_test_set = test \/ 255","224957dc":"from sklearn.model_selection import train_test_split\n\nX_train, X_validate, y_train, y_validate = train_test_split(norm_train_set, label, test_size = 0.1)","75780ecd":"X_train = torch.from_numpy(X_train.values.reshape(-1,1,28,28))\nX_validate = torch.from_numpy(X_validate.values.reshape(-1,1,28,28))\ntesting_set = torch.from_numpy(norm_test_set.values.reshape(-1,1,28,28))\ny_train = torch.from_numpy(y_train.values)\ny_validate = torch.from_numpy(y_validate.values)","a37832e9":"training_set = torch.utils.data.TensorDataset(X_train.float(), y_train)\nvalidating_set = torch.utils.data.TensorDataset(X_validate.float(), y_validate)\ntesting_set = torch.utils.data.TensorDataset(testing_set.float())","62d07eb6":"train_loader = DataLoader(training_set, shuffle=True, batch_size = 88)\nvalidate_loader = DataLoader(validating_set, shuffle=False, batch_size = 88)\ntest_set = DataLoader(testing_set, shuffle=False, batch_size = 88)","a7e5bb69":"# Check a sample of the images\n\nX = train.iloc[:,1:].values.reshape(-1,1,28,28)\ny = train[\"label\"].values\n\nplt.figure(figsize = (16, 3))\n\n\nind = 0\n\nfor i in range(16):\n    if i >= 16:\n        break\n    plt.subplot(2, 8, i+1)\n    plt.title(y[i])\n    plt.imshow(X[i].reshape(28,28))\n        ","9637663f":"class CNN_DigitClassifier(nn.Module):\n    def __init__(self):\n        super(CNN_DigitClassifier, self).__init__()\n        \n        self.features = nn.Sequential(\n            \n                        nn.Conv2d(1, 32, 5),\n                        nn.ReLU(inplace=True),\n                        nn.Conv2d(32, 32, 5),\n                        nn.ReLU(inplace=True),\n                        nn.MaxPool2d(2,2), \n                        nn.Dropout(0.25),\n            \n            \n                        nn.Conv2d(32, 64, 3),\n                        nn.ReLU(inplace=True),\n                        nn.Conv2d(64, 64, 3),\n                        nn.ReLU(inplace=True),\n                        nn.MaxPool2d(2), \n                        nn.Dropout(0.25)) \n        \n        self.classification = nn.Sequential(\n                                nn.Linear(576, 256),\n                                nn.Dropout(0.25),\n                                nn.Linear(256, 10)) ## 10 possible prediction\n        \n    def forward(self, images):\n        \n        images = self.features(images)\n        \n        images = images.view(images.shape[0], -1)\n        \n        output = self.classification(images)\n        \n        return output","5dde2a4e":"\nmodel = CNN_DigitClassifier()\n\n\noptimizer = optim.RMSprop(model.parameters(), lr=0.001, alpha=0.9)\n\ncriterion = nn.CrossEntropyLoss()\n\nlr_reduction = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, threshold=0.0001, threshold_mode='rel', cooldown=0, min_lr=0.00001)\n\nif torch.cuda.is_available():\n    model = model.cuda()\n    criterion = criterion.cuda()","fae44893":"count = 0\nlosses = []\niteration_list = []\ntraining_accuracy = []\nvalidation_accuracy = []\ntraining_loss = []\nvalidation_loss = []","c6aff691":"def train(epoch):\n    \n    global count\n    model.train()\n\n    for batch_idx, (data, target) in enumerate(train_loader):\n        data, target = Variable(data), Variable(target)\n        \n        if torch.cuda.is_available():\n            data = data.cuda()\n            target = target.cuda()\n        \n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target)\n        \n        loss.backward()\n        optimizer.step()\n        \n        if (batch_idx + 1)% 100 == 0:\n            losses.append(loss.item())\n            iteration_list.append(count)\n            count += 1","47ee7a51":"def evaluate(data_loader, validate=False):\n    model.eval()\n    loss = 0\n    correct = 0\n    \n    for data, target in data_loader:\n        data, target = Variable(data), Variable(target)\n        if torch.cuda.is_available():\n            data = data.cuda()\n            target = target.cuda()\n        \n        output = model(data)\n        \n        loss += F.cross_entropy(output, target, size_average=False).item()\n\n        pred = output.data.max(1, keepdim=True)[1]\n        correct += pred.eq(target.data.view_as(pred)).cpu().sum()\n        \n    loss \/= len(data_loader.dataset)\n    \n    accuracy = 100. * correct \/ len(data_loader.dataset)\n    \n    if not validate:\n        lr_reduction.step(loss)\n        training_accuracy.append(accuracy)\n        training_loss.append(loss)\n    else:\n        validation_accuracy.append(accuracy)\n        validation_loss.append(loss)","109ee04b":"n_epochs = 50\n\n\nfor epoch in range(n_epochs):\n    train(epoch)\n    evaluate(train_loader)\n    evaluate(validate_loader, True)\n    \nplt.plot(iteration_list,losses)\nplt.xlabel(\"Number of iteration\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training Loss vs Number of iteration\")\nplt.show()\n\nepoch_list = [i for i in range(n_epochs)]\n\nplt.plot(epoch_list, training_loss)\nplt.plot(epoch_list, validation_loss)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss vs Epoch\")\nplt.show()\n\nplt.plot(epoch_list, training_accuracy)\nplt.plot(epoch_list, validation_accuracy)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\nplt.title(\"Accuracy vs Epoch\")\nplt.show()","9e93f140":"def prediction(data_loader):\n    model.eval()\n    test_pred = torch.LongTensor()\n    \n    for batch_idx, data in enumerate(data_loader):\n        data = Variable(data[0])\n        if torch.cuda.is_available():\n            data = data.cuda()\n            \n        output = model(data)\n        \n        pred = output.cpu().data.max(1, keepdim=True)[1]\n        test_pred = torch.cat((test_pred, pred), dim=0)\n        \n    return test_pred\n\n","4c314463":"test_prediction = prediction(test_set)","b4c594a8":"\ny_test_pred = test_prediction.numpy().ravel()\ny_test_pred = pd.Series(y_test_pred, name=\"Label\")\n\nsubmission = pd.concat([pd.Series(range(1,28001), name = \"ImageId\"), y_test_pred], axis = 1)\n\n","e52c06cb":"submission.head()","18f94e67":"submission.to_csv(\"CNN_model_TPU_submission.csv\", index = False)","0aecfb96":"# Building CNN model using PyTorch","0a57df86":"# Importing Libraries which we will use through out this notebook","a2fb0c4a":"# Normalizing","4bcb5860":"# Loading Dataset","d1ce505f":"# Prediction","b49230e2":"* Viewing dataset","dfffe482":"# Visualizing Some data","6f72c8af":"# Preparing our data","cb9aa318":"# Submission","c859f43b":"# Training and Evaluating"}}