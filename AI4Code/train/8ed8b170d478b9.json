{"cell_type":{"0cb0e513":"code","426b15ff":"code","1c395abb":"code","ea9a0484":"code","40697b8d":"code","b1cbd274":"code","3c3a3b9f":"code","4684f4cb":"code","e541b92a":"code","9dddd6c7":"code","170084d6":"code","5c5a7deb":"code","148dd83c":"code","6fefaee6":"code","d4ff77f2":"code","4432e31c":"code","9e2b2e3f":"code","cbec7e6f":"code","ce4c58b8":"code","eb03712b":"code","0d4107d1":"markdown","41970367":"markdown","315b00b6":"markdown","7f886fef":"markdown","84924ac4":"markdown","9e735f20":"markdown","b1e9bf05":"markdown","9e67222e":"markdown","c954fa13":"markdown","6c4f0231":"markdown","88ef27c4":"markdown","0b0c69a3":"markdown"},"source":{"0cb0e513":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout\nfrom keras.layers.normalization import BatchNormalization","426b15ff":"fpath = \"..\/input\/plantdisease\/PlantVillage\/\"\nrandom_seed = 111\n\ncategories = os.listdir(fpath)","1c395abb":"categories.remove(\"Pepper__bell___Bacterial_spot\")\ncategories.remove(\"Potato___healthy\")","ea9a0484":"print(\"All the class labels:- \",categories,\"\\n\\nNo. of categories = \", len(categories))","40697b8d":"def load_images_and_labels(categories):\n    img_lst=[]\n    labels=[]\n    for index, category in enumerate(categories):\n        for image_name in os.listdir(fpath+\"\/\"+category)[:300]:\n            file_ext = image_name.split(\".\")[-1]\n            if (file_ext.lower() == \"jpg\") or (file_ext.lower() == \"jpeg\"):\n                #print(f\"\\nCategory = {category}, Image name = {image_name}\")\n                img = cv2.imread(fpath+\"\/\"+category+\"\/\"+image_name)\n                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n                img_array = Image.fromarray(img, 'RGB')\n\n                #resize image to 227 x 227 because the input image resolution for AlexNet is 227 x 227\n                resized_img = img_array.resize((227, 227))\n\n                img_lst.append(np.array(resized_img))\n\n                labels.append(index)\n    return img_lst, labels\n\nimages, labels = load_images_and_labels(categories)\nprint(\"No. of images loaded = \",len(images),\"\\nNo. of labels loaded = \",len(labels))\nprint(type(images),type(labels))","b1cbd274":"images = np.array(images)\nlabels = np.array(labels)\n\nprint(\"Images shape = \",images.shape,\"\\nLabels shape = \",labels.shape)\nprint(type(images),type(labels))","3c3a3b9f":"def display_rand_images(images, labels):\n    plt.figure(1 , figsize = (19 , 10))\n    n = 0 \n    for i in range(9):\n        n += 1 \n        r = np.random.randint(0 , images.shape[0] , 1)\n        \n        plt.subplot(3 , 3 , n)\n        plt.subplots_adjust(hspace = 0.3 , wspace = 0.3)\n        plt.imshow(images[r[0]])\n        \n        plt.title('Plant label : {}'.format(labels[r[0]]))\n        plt.xticks([])\n        plt.yticks([])\n        \n    plt.show()\n    \ndisplay_rand_images(images, labels)","4684f4cb":"#1-step in data shuffling\n\n#get equally spaced numbers in a given range\nn = np.arange(images.shape[0])\nprint(\"'n' values before shuffling = \",n)\n\n#shuffle all the equally spaced values in list 'n'\nnp.random.seed(random_seed)\nnp.random.shuffle(n)\nprint(\"\\n'n' values after shuffling = \",n)","e541b92a":"#2-step in data shuffling\n\n#shuffle images and corresponding labels data in both the lists\nimages = images[n]\nlabels = labels[n]\n\nprint(\"Images shape after shuffling = \",images.shape,\"\\nLabels shape after shuffling = \",labels.shape)","9dddd6c7":"images = images.astype(np.float32)\nlabels = labels.astype(np.int32)\nimages = images\/255\nprint(\"Images shape after normalization = \",images.shape)","170084d6":"display_rand_images(images, labels)","5c5a7deb":"x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.2, random_state = random_seed)\n\nprint(\"x_train shape = \",x_train.shape)\nprint(\"y_train shape = \",y_train.shape)\nprint(\"\\nx_test shape = \",x_test.shape)\nprint(\"y_test shape = \",y_test.shape)","148dd83c":"display_rand_images(x_train, y_train)","6fefaee6":"model=Sequential()\n\n#1 conv layer\nmodel.add(Conv2D(filters=96,kernel_size=(11,11),strides=(4,4),padding=\"valid\",activation=\"relu\",input_shape=(227,227,3)))\n\n#1 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n#2 conv layer\nmodel.add(Conv2D(filters=256,kernel_size=(5,5),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#2 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n#3 conv layer\nmodel.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#4 conv layer\nmodel.add(Conv2D(filters=384,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#5 conv layer\nmodel.add(Conv2D(filters=256,kernel_size=(3,3),strides=(1,1),padding=\"valid\",activation=\"relu\"))\n\n#3 max pool layer\nmodel.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\n\nmodel.add(Flatten())\n\n#1 dense layer\nmodel.add(Dense(4096,input_shape=(227,227,3),activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#2 dense layer\nmodel.add(Dense(4096,activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#3 dense layer\nmodel.add(Dense(1000,activation=\"relu\"))\n\nmodel.add(Dropout(0.4))\n\nmodel.add(BatchNormalization())\n\n#output layer\nmodel.add(Dense(20,activation=\"softmax\"))\n\nmodel.summary()","d4ff77f2":"model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])","4432e31c":"model.fit(x_train, y_train, epochs=100)","9e2b2e3f":"pred = model.predict(x_test)\n\npred.shape","cbec7e6f":"plt.figure(1 , figsize = (19 , 10))\nn = 0 \n\nfor i in range(9):\n    n += 1 \n    r = np.random.randint( 0, x_test.shape[0], 1)\n    \n    plt.subplot(3, 3, n)\n    plt.subplots_adjust(hspace = 0.3, wspace = 0.3)\n    \n    plt.imshow(x_test[r[0]])\n    plt.title('Actual = {}, Predicted = {}'.format(y_test[r[0]] , y_test[r[0]]*pred[r[0]][y_test[r[0]]]) )\n    plt.xticks([]) , plt.yticks([])\n    print('Plant label : {}'.format(labels[r[0]]))\n    \n\nplt.show()","ce4c58b8":"print(\"Saving the model......\")\n# save model in JSON format\nmodel_json = model.to_json()\njson_file = open(\"..\/working\/model1.json\", \"w\")\njson_file.write(model_json)\nprint(\"Model saved in JSON format!\")\n    \n# save training weights in h5 file\nmodel.save_weights(\"..\/working\/model1.h5\")\nprint(\"\\nModel weights saved!\")","eb03712b":"%cd \/kaggle\/working\nfrom IPython.display import FileLink\nFileLink(r'model1.h5')\n#ref - https:\/\/www.kaggle.com\/getting-started\/168312","0d4107d1":"### Compiling the CNN model ","41970367":"## Load Data ","315b00b6":"## Normalizing the loaded Data","7f886fef":"# Spliting the dataset for training and testing","84924ac4":"**Images of Actual vs Predicted values**","9e735f20":"**CNN model**","b1e9bf05":"### Using the train model to predict the values","9e67222e":"# Shuffling the data for training of CNN","c954fa13":"## The images in the dataset","6c4f0231":"Using the training data to train the model","88ef27c4":"**Saving the model**","0b0c69a3":"\n# **Data Exploring**\n\n"}}