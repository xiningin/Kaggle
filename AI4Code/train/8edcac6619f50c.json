{"cell_type":{"59b4d04f":"code","25f8b6d7":"code","9002162f":"code","7e6451bf":"code","5a2e30dd":"code","b1994d52":"code","816d4a44":"code","29d830ab":"code","40571d60":"code","1d5ce837":"code","3e690f68":"code","a3e44411":"code","0d35ff76":"code","e32b6156":"code","c8b0badd":"code","58360475":"code","f5803f2a":"code","5a70d0d9":"code","fd284265":"code","782faeb0":"code","182f8c22":"code","60823b7f":"code","2054ac88":"code","bd2a2dab":"code","403d3bcf":"code","567a402c":"markdown","5de217d2":"markdown","a6cbff44":"markdown","e4db2971":"markdown","9a624e12":"markdown","1100dfb3":"markdown","7f5aed46":"markdown","9f4cbcfd":"markdown","c26116e7":"markdown","6cc076d4":"markdown","2600ba51":"markdown"},"source":{"59b4d04f":"# importing required modules\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom subprocess import check_output\nimport itertools\nimport matplotlib\nplt.style.use('seaborn-paper')\nmatplotlib.rcParams['axes.labelsize'] = 12\nmatplotlib.rcParams['xtick.labelsize'] = 11\nmatplotlib.rcParams['ytick.labelsize'] = 11\nmatplotlib.rcParams['text.color'] = 'k'\nplt.rcParams[\"figure.figsize\"] = [12, 6]\nplt.rcParams['lines.linewidth'] = 2\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR","25f8b6d7":"train = pd.read_csv('..\/input\/random-linear-regression\/train.csv')\ntest = pd.read_csv('..\/input\/random-linear-regression\/test.csv')","9002162f":"train.head()","7e6451bf":"test.head()","5a2e30dd":"train.info()","b1994d52":"test.info()","816d4a44":"train.isnull().sum().plot(kind = 'bar')","29d830ab":"from sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer(missing_values=np.NaN, strategy='mean')\ntrain.y = imputer.fit_transform(train['y'].values.reshape(-1,1))[:,0]\ntrain.isnull().sum()","40571d60":"train.dropna(inplace = True)\ntrain.isnull().sum()","1d5ce837":"train.describe().T","3e690f68":"px.box(train,y='x',points='all')","a3e44411":"train.corr()","0d35ff76":"px.scatter(x=train.x,y=train.y,title='scatter plot for train data')","e32b6156":"px.scatter(x=train.x,y=train.y,title='scatter plot for test data')","c8b0badd":"# Split train data to X and y\nX_train = train.drop('y', axis = 1)\ny_train = train.loc[:,['y']]\n# Split test data to X and y\nX_test = test.drop('y', axis = 1)\ny_test = test.loc[:,['y']]","58360475":"!pip install tpot","f5803f2a":"%%time\n\nfrom tpot import TPOTRegressor\nfrom sklearn.model_selection import train_test_split\n \ntpot = TPOTRegressor(generations=20, verbosity=2) #Iteration 20 times\ntpot.fit(X_train, y_train)\nprint(tpot.score(X_test, y_test))\ntpot.export('pipeline.py')","5a70d0d9":"print(tpot.export())","fd284265":"\nimport numpy as np\nimport pandas as pd\nfrom sklearn.kernel_approximation import RBFSampler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\n\n# Average CV score on the training set was: -8.19505749868606\nexported_pipeline = make_pipeline(\n    RobustScaler(),\n    RBFSampler(gamma=0.5),\n    RidgeCV()\n)\n\nexported_pipeline.fit(X_train, y_train)\nresults = exported_pipeline.predict(X_test)","782faeb0":"results[:,0].shape","182f8c22":"final = pd.read_csv('..\/input\/random-linear-regression\/test.csv')\nfinal['Predicted_y'] = pd.Series(results[:,0])\nfinal","60823b7f":"plt.rcParams[\"figure.figsize\"] = [25, 6]\n\nfinal.y.plot(linewidth = 2, label = 'Actual', color = 'lightseagreen')\nfinal.Predicted_y.plot(linewidth = 1, label = 'Predicted', color = 'black', linestyle = '--')\nplt.legend(fontsize = 'large')\nplt.ylabel('Spot Price')\nplt.title('Comparison of Actual and Predicted Ys', fontsize = 16)\nplt.show()","2054ac88":"# Define a function to calculate MAE and RMSE\n\nfrom sklearn.metrics import r2_score\n\ndef evaluate_prediction(predictions, actual, model_name):\n    \n    def mean_absolute_percentage_error(y_true, y_pred): \n        y_true, y_pred = np.array(y_true), np.array(y_pred)\n        return np.mean(np.abs((y_true - y_pred) \/ y_true))*100\n\n    errors = predictions - actual\n    mse = np.square(errors).mean()\n    rmse = np.sqrt(mse)\n    mae = np.abs(errors).mean()\n    mape = mean_absolute_percentage_error(actual, predictions)\n    r2 = r2_score(actual, predictions)\n    print(model_name + ':')\n    print('Mean Absolute Error: {:.4f}'.format(mae))\n    print('Mean Squared Error: {:.4f}'.format(mae))\n    print('Root Mean Square Error: {:.4f}'.format(rmse))\n    print('Mean Absolute Percentage Error: {:.4f}'.format(mape))\n    print('')\n    print('R2 score: {:.4f}'.format(r2))\n    \nevaluate_prediction(final.Predicted_y, final.y, 'TPOT Optimized SGDRegressor')","bd2a2dab":"## R2 of the model\nexported_pipeline.score(X_test, y_test)","403d3bcf":"final.Predicted_y.to_csv('submission.csv', index = False, header = False)","567a402c":"**Mean Absolute Error: 2.5412**\n\n**Mean Squared Error: 2.5412**\n\n**Root Mean Square Error: 3.1641**\n\n**Mean Absolute Percentage Error: 13.8430**\n\n**R2 score: 0.9886**\n\n","5de217d2":"### Load and Inspect Datasets","a6cbff44":"## If you like, an upvote would be deeply appreciated. Thanks! :)","e4db2971":"### How about missing values?","9a624e12":"### Splitting into features and target","1100dfb3":"# Simple Regression using TPOT Optimized RidgeRegressor, R2 score: 0.9886\n\nCreated on: 05\/18\/2021\n\nUpdated on: 05\/20\/2021\n","7f5aed46":"### Modelling","9f4cbcfd":"### Dropping the na row for convenience","c26116e7":"### References\n\n* https:\/\/machinelearningmastery.com\/tpot-for-automated-machine-learning-in-python\/\n\n* https:\/\/github.com\/EpistasisLab\/tpot\/blob\/master\/tutorials\/cuML_Regression_Example.ipynb","6cc076d4":"### Model Evaluation","2600ba51":"### Import Libaries"}}