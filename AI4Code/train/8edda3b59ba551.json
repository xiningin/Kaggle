{"cell_type":{"78312ab1":"code","e8b67d75":"code","03873811":"code","8e5d1b1b":"code","3c034ae8":"code","8eb46c0a":"code","ff6f1786":"code","6cb94368":"code","49aa3a78":"code","a8686b83":"code","e671b8a8":"code","b7ac331e":"code","d84c1015":"code","3b59d204":"code","b470c2b7":"code","58184551":"code","42329849":"code","89871770":"code","9fdd6f7f":"code","4df80f4b":"code","152ca957":"code","3e8d8d3a":"code","7b059cb9":"code","0f3a6d17":"code","5566c4c9":"code","5f040a21":"markdown","b3dc2db7":"markdown","c382525b":"markdown","6f67af5c":"markdown","beb274fc":"markdown","8df2ed00":"markdown","8d62184e":"markdown","9880c632":"markdown","8649056f":"markdown","f78debc2":"markdown","c63143ad":"markdown","f1c8507f":"markdown","487868af":"markdown"},"source":{"78312ab1":"DATASET_DIR = '\/kaggle\/input\/understanding_cloud_organization\/'\nTEST_SIZE = 0.3\nRANDOM_STATE = 123\n\nNUM_TRAIN_SAMPLES = 20 # The number of train samples used for visualization\nNUM_VAL_SAMPLES = 20 # The number of val samples used for visualization\nCOLORS = ['b', 'g', 'r', 'm'] # Color of each class","e8b67d75":"import pandas as pd\nimport os\nimport cv2\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\n\nfrom shutil import copyfile\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm_notebook","03873811":"df = pd.read_csv(os.path.join(DATASET_DIR, 'train.csv'))","8e5d1b1b":"df['Image'] = df['Image_Label'].map(lambda x: x.split('_')[0])\ndf['HavingDefection'] = df['EncodedPixels'].map(lambda x: 0 if x is np.nan else 1)","3c034ae8":"image_col = np.array(df['Image'])\nimage_files = image_col[::4]\nall_labels = np.array(df['HavingDefection']).reshape(-1, 4)\n\nnum_img_fish = np.sum(all_labels[:, 0])\nnum_img_flower = np.sum(all_labels[:, 1])\nnum_img_gravel = np.sum(all_labels[:, 2])\nnum_img_sugar = np.sum(all_labels[:, 3])\nprint('Fish: {} images'.format(num_img_fish))\nprint('Flower: {} images'.format(num_img_flower))\nprint('Gravel: {} images'.format(num_img_gravel))\nprint('Sugar: {} images'.format(num_img_sugar))","8eb46c0a":"def plot_figures(\n    sizes,\n    pie_title,\n    start_angle,\n    bar_title,\n    bar_ylabel,\n    labels=('Fish', 'Flower', 'Gravel', 'Sugar'),\n    colors=None,\n    explode=(0, 0, 0, 0.1),\n):\n    fig, axes = plt.subplots(1, 2, figsize=(18, 6))\n\n    y_pos = np.arange(len(labels))\n    barlist = axes[0].bar(y_pos, sizes, align='center')\n    axes[0].set_xticks(y_pos, labels)\n    axes[0].set_ylabel(bar_ylabel)\n    axes[0].set_title(bar_title)\n    if colors is not None:\n        for idx, item in enumerate(barlist):\n            item.set_color(colors[idx])\n\n    def autolabel(rects):\n        \"\"\"\n        Attach a text label above each bar displaying its height\n        \"\"\"\n        for rect in rects:\n            height = rect.get_height()\n            axes[0].text(\n                rect.get_x() + rect.get_width()\/2., height,\n                '%d' % int(height),\n                ha='center', va='bottom', fontweight='bold'\n            )\n\n    autolabel(barlist)\n    \n    pielist = axes[1].pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=start_angle, counterclock=False)\n    axes[1].axis('equal')\n    axes[1].set_title(pie_title)\n    if colors is not None:\n        for idx, item in enumerate(pielist[0]):\n            item.set_color(colors[idx])\n\n    plt.show()","ff6f1786":"print('[THE WHOLE DATASET]')\n\nsum_each_class = np.sum(all_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\nsum_each_sample = np.sum(all_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=[' '.join((str(label), 'class(es)')) for label in unique],\n    explode=(0, 0.1, 0, 0)\n)","6cb94368":"annotations = np.array(df['EncodedPixels']).reshape(-1, 4)","49aa3a78":"X_train, X_val, y_train, y_val = train_test_split(image_files, annotations, test_size=TEST_SIZE, random_state=RANDOM_STATE)","a8686b83":"print('X_train:', X_train.shape)\nprint('y_train:', y_train.shape)\nprint('X_val:', X_val.shape)\nprint('y_val', y_val.shape)","e671b8a8":"print('[TRAINING SET]')\n\ntmp = y_train.reshape(-1)\ntmp = list(map(lambda x: 0 if x is np.nan else 1, tmp))\ntrain_labels = np.array(tmp).reshape(-1, 4)\n\nsum_each_class = np.sum(train_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\n\nsum_each_sample = np.sum(train_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=[' '.join((str(label), 'class(es)')) for label in unique],\n    explode=(0, 0.1, 0, 0)\n)","b7ac331e":"print('[VALIDATION SET]')\n\ntmp = y_val.reshape(-1)\ntmp = list(map(lambda x: 0 if x is np.nan else 1, tmp))\nval_labels = np.array(tmp).reshape(-1, 4)\n\nsum_each_class = np.sum(val_labels, axis=0)\nplot_figures(\n    sum_each_class,\n    pie_title='The percentage of each class',\n    start_angle=90,\n    bar_title='The number of images for each class',\n    bar_ylabel='Images',\n    colors=COLORS,\n    explode=(0, 0, 0, 0.1)\n)\n\n\nsum_each_sample = np.sum(val_labels, axis=1)\nunique, counts = np.unique(sum_each_sample, return_counts=True)\n\nplot_figures(\n    counts,\n    pie_title='The percentage of the number of classes appears in an image',\n    start_angle=120,\n    bar_title='The number of classes appears in an image',\n    bar_ylabel='Images',\n    labels=[' '.join((str(label), 'class(es)')) for label in unique],\n    explode=(0, 0.1, 0, 0)\n)","d84c1015":"def rle2mask(mask_rle, shape=(2100, 1400)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (width,height) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","3b59d204":"def show_samples(samples):\n    for sample in samples:\n        fig, ax = plt.subplots(figsize=(16, 10))\n        img_path = os.path.join(DATASET_DIR, 'train_images', sample[0])\n        img = cv2.imread(img_path, 1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n        patches = []\n        for idx, rle in enumerate(sample[1]):\n            if rle is not np.nan:\n                mask = rle2mask(rle)\n                contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n                for contour in contours:\n                    poly_patch = Polygon(contour.reshape(-1, 2), closed=True, linewidth=2, edgecolor=COLORS[idx], facecolor=COLORS[idx], fill=True)\n                    patches.append(poly_patch)\n        p = PatchCollection(patches, match_original=True, cmap=matplotlib.cm.jet, alpha=0.3)\n\n        ax.imshow(img\/255)\n        ax.set_title(sample[0])\n        ax.add_collection(p)\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        plt.show()","b470c2b7":"train_pairs = np.array(list(zip(X_train, y_train)))\ntrain_samples = train_pairs[np.random.choice(train_pairs.shape[0], NUM_TRAIN_SAMPLES, replace=False), :]\n\nshow_samples(train_samples)","58184551":"val_pairs = np.array(list(zip(X_val, y_val)))\nval_samples = val_pairs[np.random.choice(val_pairs.shape[0], NUM_VAL_SAMPLES, replace=False), :]\n\nshow_samples(val_samples)","42329849":"!mkdir ..\/train_images\n!mkdir ..\/val_images","89871770":"for image_file in tqdm_notebook(X_train):\n    src = os.path.join(DATASET_DIR, 'train_images', image_file)\n    dst = os.path.join('..\/train_images', image_file)\n    copyfile(src, dst)\n\nfor image_file in tqdm_notebook(X_val):\n    src = os.path.join(DATASET_DIR, 'train_images', image_file)\n    dst = os.path.join('..\/val_images', image_file)\n    copyfile(src, dst)","9fdd6f7f":"!apt install zip","4df80f4b":"cd ..\/","152ca957":"!zip -r -m -1 -q working\/train_images.zip train_images\n!zip -r -m -1 -q working\/val_images.zip val_images","3e8d8d3a":"cd working","7b059cb9":"y_train = y_train.reshape(-1)\ny_val = y_val.reshape(-1)","0f3a6d17":"X_train = np.repeat(X_train, 4)\nX_val = np.repeat(X_val, 4)\n\nX_train = X_train.reshape(-1, 4)\nX_val = X_val.reshape(-1, 4)\n\nindices = np.array(['_Fish', '_Flower', '_Gravel', '_Sugar'])\n\nX_train += indices\nX_val += indices\n\nX_train = X_train.reshape(-1)\nX_val = X_val.reshape(-1)","5566c4c9":"train_set = {\n    'Image_Label': X_train,\n    'EncodedPixels': y_train\n}\n\nval_set = {\n    'Image_Label': X_val,\n    'EncodedPixels': y_val\n}\n\ntrain_df = pd.DataFrame(train_set)\nval_df = pd.DataFrame(val_set)\n\ntrain_df.to_csv('.\/train.csv', index=False)\nval_df.to_csv('.\/val.csv', index=False)","5f040a21":"<a id=\"save_annotations\"><\/a>\n# Save annotations\n[Back to Table of Contents](#toc)","b3dc2db7":"<a id=\"get_encoded_pixels_of_each_class_for_each_image\"><\/a>\n# Get encoded pixels of each class for each image\n[Back to Table of Contents](#toc)","c382525b":"<a id=\"draw_some_charts_for_training_and_validation_sets\"><\/a>\n# Draw some charts for training and validation sets\n[Back to Table of Contents](#toc)","6f67af5c":"<a id=\"split_dataset_into_training_and_validation_sets\"><\/a>\n# Split dataset into training and validation sets\n[Back to Table of Contents](#toc)","beb274fc":"<a id=\"copy_images_into_right_folders\"><\/a>\n# Copy images into right folders\n[Back to Table of Contents](#toc)","8df2ed00":"<a id=\"zip_training_and_validation_sets\"><\/a>\n# Zip training and validation sets\n[Back to Table of Contents](#toc)","8d62184e":"<a id=\"get_annotations\"><\/a>\n# Get annotations\n[Back to Table of Contents](#toc)","9880c632":"<a id=\"configure_parameters\"><\/a>\n# Configure parameters\n[Back to Table of Contents](#toc)","8649056f":"<a id=\"visualize_some_images_and_corresponding_labels\"><\/a>\n# Visualize some images and corresponding labels\n[Back to Table of Contents](#toc)","f78debc2":"<a id=\"post_process_annotations\"><\/a>\n# Post process annotations\n[Back to Table of Contents](#toc)","c63143ad":"<a id=\"import_modules\"><\/a>\n# Import modules\n[Back to Table of Contents](#toc)","f1c8507f":"<a id=\"toc\"><\/a>\n# Table of Contents\n1. [Configure parameters](#configure_parameters)\n1. [Import modules](#import_modules)\n1. [Get annotations](#get_annotations)\n1. [Draw some charts for input dataset](#draw_some_charts_for_input_dataset)\n1. [Get encoded pixels of each class for each image](#get_encoded_pixels_of_each_class_for_each_image)\n1. [Split dataset into training and validation sets](#split_dataset_into_training_and_validation_sets)\n1. [Draw some charts for training and validation sets](#draw_some_charts_for_training_and_validation_sets)\n1. [Visualize some images and corresponding labels](#visualize_some_images_and_corresponding_labels)\n1. [Copy images into right folders](#copy_images_into_right_folders)\n1. [Zip training and validation sets](#zip_training_and_validation_sets)\n1. [Post process annotations](#post_process_annotations)\n1. [Save annotations](#save_annotations)","487868af":"<a id=\"draw_some_charts_for_input_dataset\"><\/a>\n# Draw some charts for input dataset\n[Back to Table of Contents](#toc)"}}