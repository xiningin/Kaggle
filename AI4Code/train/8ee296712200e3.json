{"cell_type":{"9814cd49":"code","933552e6":"code","e1eb6efe":"code","19e1235c":"code","03f12e3e":"code","4a5cb2d5":"code","84179490":"code","acc11cff":"code","9e9290b5":"code","4615fa53":"code","ddc60c9c":"code","01e13fc1":"code","4f88c7ec":"code","334e1038":"code","21c9449a":"code","2d64f284":"code","80a4d1ce":"code","14f2eec5":"code","8ce0492c":"code","35a97b9c":"code","d28463b1":"code","323e28d0":"code","6bbf8cf8":"code","92eee93f":"code","eb817001":"code","3c88f51d":"code","fcb470ec":"code","334fd35f":"code","c470c93e":"code","26ab37c1":"code","16acff1d":"code","dac85c9b":"code","bb9530f4":"code","10d3c2f2":"code","4b9a9cef":"code","f1c0992c":"code","8f309c36":"code","5acbee15":"code","d8afe331":"code","30a018da":"code","7275413b":"code","a940183e":"code","9a2c52aa":"code","cc4ceeb9":"code","1a3f4e2a":"code","e6fce7d7":"code","6083af32":"code","b1440620":"code","d1771c3b":"code","4a2c1839":"code","cddffbe5":"code","d0e106e2":"code","025b7879":"code","3008c6ed":"code","09e504d5":"code","f0ea52a4":"code","8a496987":"code","b4095218":"code","55472af8":"code","1a56023c":"code","83c202df":"code","2c9525c2":"code","8b5544d9":"code","a1948eb2":"code","793bed59":"code","f9de86d5":"code","bbdbedcd":"code","8ad5fcb5":"code","438c00b5":"code","ae1a180e":"code","7145c326":"code","9e0f5281":"code","c439383a":"code","543f169d":"code","d0c4845a":"code","a7903dc6":"code","682b676f":"code","c0a0b331":"code","e254cc25":"code","4c80b8a8":"code","5e4f2eb4":"code","6652a677":"code","84c43e17":"code","d399f278":"code","f2188d59":"code","f41a947e":"code","c39ad628":"code","12fed7c8":"code","b011c4f4":"markdown","56a8ffde":"markdown","5d25490e":"markdown","2467354b":"markdown","8a37ce07":"markdown","baed600b":"markdown","7cbd4acf":"markdown","4219f3ed":"markdown","15d11c9a":"markdown","37676d8f":"markdown","bc041f8b":"markdown","c9324735":"markdown","5549523f":"markdown","0f32c69a":"markdown","1c2b46c4":"markdown","5b15849c":"markdown","39cc365e":"markdown","f4d5808a":"markdown","a9a4639e":"markdown","38bf70b2":"markdown","9db58b89":"markdown","9450f598":"markdown","f88be37b":"markdown","13e482aa":"markdown","26aac7a1":"markdown","81271644":"markdown","2d976d1e":"markdown","25ded38a":"markdown","83464e1e":"markdown","e498bcbc":"markdown","e232a924":"markdown","402ec41f":"markdown","583dc6e7":"markdown","8194fd62":"markdown","50ed4897":"markdown","072f4f96":"markdown","b5117d2f":"markdown","d70d46a0":"markdown","6237a9d8":"markdown","f4b49328":"markdown","75885e0c":"markdown","734e359a":"markdown","af8b8544":"markdown","a7eaa817":"markdown","e938dbad":"markdown","34db20cb":"markdown","ef456d23":"markdown","8243c550":"markdown","ce1dc6d0":"markdown","6e56f228":"markdown","c6b1cffd":"markdown","452c142e":"markdown","6ccea098":"markdown","92be4104":"markdown","00190a1a":"markdown","9b4a6bc4":"markdown","658f391f":"markdown","15a19bee":"markdown","ec56c676":"markdown","14301a9a":"markdown","0bd70657":"markdown","d544c826":"markdown","27c3b5ae":"markdown","a55203bb":"markdown","bbb63fa7":"markdown","341d06db":"markdown","7b36a4b0":"markdown","5d8b3165":"markdown","0a12864a":"markdown","f40b8ac6":"markdown","26ac39cf":"markdown","55fb396c":"markdown","c35bf767":"markdown","690a07ab":"markdown","aae96099":"markdown","1eec43f1":"markdown"},"source":{"9814cd49":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error","933552e6":"df = pd.read_csv('..\/input\/boom-bikes-sharing-dataset\/day.csv', index_col='instant')\n\ndf.head()","e1eb6efe":"#CHECKING NUMBER OF ROWS AND COLUMNS\n\ndf.shape","19e1235c":"#CHECKING ALL NUMERIC COLUMNS\n\ndf.describe()","03f12e3e":"#CHECKING DESCRIPTIVE INFORMATION OF ALL COLUMNS\n\ndf.info()","4a5cb2d5":"#CHECKING NULL VALUES\n\ndf.isnull().sum()","84179490":"#DROPPING DUPLICATE RECORDS \n\ndf.drop_duplicates(subset=None, inplace=True)\n\ndf.shape","acc11cff":"#DROPPING UNWANTED COLUMNS\n#dropping dteday column as it is explained by other columns\n#dropping casual and registered columns as the sum of these is cnt(dependent variable)\n\ndf.drop(['dteday','casual','registered'],axis=1,inplace=True)\ndf.head()","9e9290b5":"headers = ['Temperature', 'Adjusted Temperature']\npd.DataFrame(np.corrcoef(df['temp'], df[\"atemp\"]), index=headers, columns=headers) ","4615fa53":"# DROPPING atemp COLUMN\n\ndf.drop(['atemp'],axis=1,inplace=True)\ndf.head()","ddc60c9c":"#RECHECKING SHAPE\n\ndf.shape","01e13fc1":"#SEASON COLUMN \n\ndf['season'].replace({1:\"spring\",2:\"summer\",3:\"fall\",4:\"winter\"},inplace=True)\ndf.head()","4f88c7ec":"#MNTH COLUMN\n\ndf['mnth'].replace({1:\"January\",2:\"February\",3:\"March\",4:\"april\",5:\"May\",6:\"June\",7:\"July\",\n                    8:\"August\",9:\"September\",10:\"October\",11:\"November\",12:\"December\"},inplace=True)\ndf.head()","334e1038":"#WEEKDAY COLUMN\n\ndf['weekday'].replace({0:\"Sunday\",1:\"Monday\",2:\"Tuesday\",3:\"Wednesday\",4:\"Thursday\",5:\"Friday\",6:\"Saturday\"},inplace=True)\ndf.head()","21c9449a":"#WEATHERSIT COLUMN\n\ndf['weathersit'].replace({1:\"Clear_Few Clouds\",2:\"Mist_cloudy\",3:\"Light rain_Light snow_Thunderstorm\",\n                          4:'Heavy Rain_Ice Pallets_Thunderstorm_Mist'},inplace=True)\ndf.head()","2d64f284":"df.info()","80a4d1ce":"# SEASON VS COUNT\n\nplt.figure(figsize=[15,8])\nplt.suptitle('Season vs Count',fontsize = 35, color='Purple' )\n\nplt.subplot(1,2,1)\nsns.barplot(x=df.season, y=df.cnt,palette = 'viridis')\n\nplt.xlabel('Season', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(1,2,2)\nsns.boxenplot(x = 'season', y = 'cnt', data = df,palette = 'viridis')\n\nplt.xlabel('Season', fontsize = 20,color ='Brown')\n\nplt.show()","14f2eec5":"# YEAR VS COUNT\n\nplt.figure(figsize=[15,8])\nplt.suptitle('Year vs Count',fontsize = 35, color='Purple' )\n\nplt.subplot(1,2,1)\nsns.barplot(x=df.yr, y=df.cnt)\n\nplt.xlabel('Year', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(1,2,2)\nsns.boxenplot(x = 'yr', y = 'cnt', data = df)\n\nplt.xlabel('Year', fontsize = 20,color ='Brown')\n\nplt.show()","8ce0492c":"# MONTH VS COUNT\n\nplt.figure(figsize=[15,8])\nplt.suptitle('Month vs Count',fontsize = 35, color='Purple' )\n\nplt.subplot(1,2,1)\nsns.barplot(x=df.mnth, y=df.cnt, palette='magma')\n\nplt.xlabel('Month', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(1,2,2)\nsns.boxenplot(x = 'mnth', y = 'cnt', data = df, palette='magma')\n\nplt.xlabel('Month', fontsize = 20,color ='Brown')\n\nplt.show()","35a97b9c":"# WEEKDAY VS COUNT\n\nplt.figure(figsize=[15,8])\nplt.suptitle('Weekday vs Count',fontsize = 35, color='Purple' )\n\nplt.subplot(1,2,1)\nsns.barplot(x=df.weekday, y=df.cnt, palette='mako')\n\nplt.xlabel('Weekday', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(1,2,2)\nsns.boxenplot(x = 'weekday', y = 'cnt', data = df, palette='mako')\n\nplt.xlabel('Weekday', fontsize = 20,color ='Brown')\n\nplt.show()","d28463b1":"# WEATHER SITUATION DAY VS COUNT\n\nplt.figure(figsize=[15,8])\nplt.suptitle('Weather situation vs Count',fontsize = 35, color='Purple' )\n\nplt.subplot(1,2,1)\nsns.barplot(x=df.weathersit, y=df.cnt, palette='crest')\n\nplt.xlabel('Weather situation', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(1,2,2)\nsns.boxenplot(x = 'weathersit', y = 'cnt', data = df, palette='crest')\n\nplt.xlabel('Weather situation', fontsize = 20,color ='Brown')\n\nplt.show()","323e28d0":"# HOLIDAYS VS WORKING DAYS\n\nplt.figure(figsize=[15,12])\nplt.suptitle('Holiday vs Working day',fontsize = 35, color='Purple' )\n\nplt.subplot(2,2,1)\nsns.barplot(x=df.holiday, y=df.cnt, palette='icefire').set_title(\"Holiday\", fontsize=20, color='Green', pad=20)\n\nplt.xlabel('Holiday', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(2,2,2)\nsns.barplot(x=df.workingday, y=df.cnt, palette='icefire').set_title(\"Working day\", fontsize=20, color='Green', pad=20)\n\nplt.xlabel('Working day', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(2,2,3)\nsns.boxenplot(x = 'holiday', y = 'cnt', data = df, palette='icefire')\n\nplt.xlabel('Holiday', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.subplot(2,2,4)\nsns.boxenplot(x = 'workingday', y = 'cnt', data = df, palette='icefire')\n\nplt.xlabel('Working day', fontsize = 20,color ='Brown')\nplt.ylabel('counts', fontsize = 20,color ='Brown')\n\nplt.show()","6bbf8cf8":"# TEMPERATURE COLUMN\n\nplt.figure(figsize=[15,8])\n\nsns.set_style('darkgrid')\n\nplt.subplot(2,1,1)\nsns.boxplot(df['temp']).set_title(\"Temperature\", fontsize=20, color='Green', pad=20)\n\nplt.subplot(2,1,2)\nsns.distplot(df['temp'], color='g')\n\nplt.show()","92eee93f":"# HUMIDITY COLUMN\n\nplt.figure(figsize=[15,8])\n\nplt.subplot(2,1,1)\nsns.boxplot(df['hum']).set_title(\"Humidity\", fontsize=20, color='Green', pad=20)\n\nplt.subplot(2,1,2)\nsns.distplot(df['hum'], color='g')\n\nplt.show()","eb817001":"#REPLACING ZERO WITH MEAN VALUE\n\ndf['hum']=df['hum'].replace(0,df.hum.mean())","3c88f51d":"# WIND SPEED COLUMN\n\nplt.figure(figsize=[15,8])\n\nplt.subplot(2,1,1)\nsns.boxplot(df['windspeed']).set_title(\"Wind speed\", fontsize=20, color='Green', pad=20)\n\nplt.subplot(2,1,2)\nsns.distplot(df['windspeed'], color='g')\n\nplt.show()","fcb470ec":"plt.figure(figsize=[10,10])\n\nsns.heatmap(df.corr(),cmap = \"PRGn\" , annot=True).set_title('Correlation between variables', fontsize = 25, color='Teal')\n\nplt.show()","334fd35f":"df = pd.get_dummies(df, drop_first=True)\ndf.info()","c470c93e":"df.shape","26ab37c1":"# SPLITTING TRAIN DATA (70%) & TEST DATA (30%)\n\ndf_train, df_test = train_test_split(df, train_size=0.7, random_state=100)","16acff1d":"# TRAIN DATAFRAME SHAPE\n\ndf_train.shape","dac85c9b":"# TEST DATAFRAME SHAPE\n\ndf_test.shape","bb9530f4":"df_train.info()","10d3c2f2":"f = sns.pairplot(df[['temp', 'hum', 'windspeed','cnt']] , height = 3)\nf.fig.suptitle('TEMPERATURE Vs HUMIDITY Vs WINDSPEED Vs COUNT ', fontsize = 25, color='Green')\n\nplt.show()","4b9a9cef":"# Checking the correlation between temperature and count. \n\nsns.jointplot(df['temp'] , df['cnt'] , kind='reg',\n              joint_kws = {'scatter_kws':dict(alpha=0.5)} , height=10)\n\nplt.title(\"Temperature Vs Counts \\n\\n\\n\\n\\n\", \n          fontdict={'fontsize': 35, 'fontweight' : 5, 'color' : 'Green'})\nplt.xlabel(\"Temperature\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\nplt.ylabel(\"Counts\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","f1c0992c":"plt.figure(figsize = (25,20))\nsns.heatmap(round(df.corr(),2), annot = True, cmap=\"PiYG\")\nplt.show()","8f309c36":"df_train.info()","5acbee15":"scaler = MinMaxScaler()\nnum_col = ['temp', 'hum', 'windspeed', 'cnt']\ndf_train[num_col] = scaler.fit_transform(df_train[num_col])\ndf_train.head()","d8afe331":"df_train.describe()","30a018da":"#CREATING X AND Y FROM TRAIN DATA\n\ny_train = df_train.pop('cnt')\nX_train = df_train","7275413b":"X_train.head()","a940183e":"y_train.head()","9a2c52aa":"X_train.shape","cc4ceeb9":"# RUNNING RFE\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm, 15).fit(X_train, y_train)","1a3f4e2a":"# CHECKING SELECTED VARIABLES WITH THEIR RANKS\n\ndf_rfe = pd.DataFrame({'PREDICTORS': X_train.columns, 'SELECTED ': rfe.support_, 'RANKS': rfe.ranking_})\ndf_rfe.sort_values(by='RANKS')","e6fce7d7":"# CREATING NEW X_TRAIN DATAFRAME BASED ON RFE RESULTS \n\nX_train_rfe = X_train[X_train.columns[rfe.support_]]","6083af32":"X_train_rfe.shape","b1440620":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_1 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_1.summary()","d1771c3b":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4a2c1839":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"hum\"], axis = 1)","cddffbe5":"X_train_rfe.shape","d0e106e2":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_2 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_2.summary()","025b7879":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3008c6ed":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"windspeed\"], axis = 1)","09e504d5":"X_train_rfe.shape","f0ea52a4":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_3 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_3.summary()","8a496987":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","b4095218":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"season_summer\"], axis = 1)","55472af8":"X_train_rfe.shape","1a56023c":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_4 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_4.summary()","83c202df":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2c9525c2":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"season_winter\"], axis = 1)","8b5544d9":"X_train_rfe.shape","a1948eb2":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_5 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_5.summary()","793bed59":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","f9de86d5":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"mnth_November\"], axis = 1)","bbdbedcd":"X_train_rfe.shape","8ad5fcb5":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_6 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_6.summary()","438c00b5":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ae1a180e":"# DROPPING HUMIDITY VARIABLE\n\nX_train_rfe = X_train_rfe.drop([\"mnth_December\"], axis = 1)","7145c326":"X_train_rfe.shape","9e0f5281":"# ADDING CONSTANT\n\nX_train_sm = sm.add_constant(X_train_rfe)\n\n# CREATING A NEW MODEL\n\nlr_model_7 = sm.OLS(y_train, X_train_sm).fit()\n\n#CHECKING SUMMARY\n\nlr_model_7.summary()","c439383a":"vif = pd.DataFrame()\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","543f169d":"# COEFFICIENTS OF THE INDIPENDENT VARIABLES\n\nlr_model_7.params","d0c4845a":"# CALCULATING Y_TRAIN_PRED AND RESIDUAL\n\ny_train_pred = lr_model_7.predict(X_train_sm)\nresidual = y_train_pred - y_train","a7903dc6":"# PLOTTING RESIDUAL\n\nplt.figure(figsize=[15,8])\nsns.distplot(residual, color='g').set_title(\"'Residual - Error distribution\", fontsize=40, color='Green')\nplt.xlabel(\"Residual - error terms\", fontdict={'fontsize': 25, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","682b676f":"# PLOTTING Y_TRAIN_PRED VS RESIDUALS\n\nsns.jointplot(y_train_pred,residual, kind='reg',joint_kws = {'scatter_kws':dict(alpha=0.7)}, height=10)\n\nplt.title(\"Y_TRAIN_PRED Vs RESIDUALS \\n\\n\\n\", fontdict={'fontsize': 35, 'fontweight' : 5, 'color' : 'Green'})\nplt.xlabel(\"PREDICTED VALUES (Y_TRAIN_PRED)\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\nplt.ylabel(\"RESIDUALS\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","c0a0b331":"# PLOTTING Y_TRAIN_PRED VS Y_ACTUAL\n\nsns.jointplot(y_train_pred,y_train, kind='reg',joint_kws = {'scatter_kws':dict(alpha=0.7)}, height=10)\n\nplt.title(\"Y_TRAIN_PRED Vs Y_ACTUAL \\n\\n\\n\", fontdict={'fontsize': 35, 'fontweight' : 5, 'color' : 'Green'})\nplt.xlabel(\"PREDICTED VALUES (Y_TRAIN_PRED)\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\nplt.ylabel(\"Y_ACTUAL\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","e254cc25":"df_test.head()","4c80b8a8":"#SCALING TEST DATAFRAME\n\ndf_test[num_col] = scaler.transform(df_test[num_col])\ndf_test.head()","5e4f2eb4":"df_test.describe()","6652a677":"#CREATING X AND Y FROM TEST DATA\n\ny_test = df_test.pop('cnt')\nX_test = df_test\n\nX_test.info()","84c43e17":"X_test = X_test[X_train_rfe.columns]","d399f278":"# ADDING CONSTANT\n\nX_test = sm.add_constant(X_test)\n\n#Y_PRED\n\ny_pred = lr_model_7.predict(X_test)","f2188d59":"# PLOTTING PREDICTED TEST POINTS VS ACTUAL TEST POINTS\n\nsns.jointplot(y_test,y_pred, kind='reg',joint_kws = {'scatter_kws':dict(alpha=0.7)}, height=10)\n\nplt.title(\"PREDICTED VS ACTUAL TEST POINTS \\n\\n\\n\\n\", fontdict={'fontsize': 30, 'fontweight' : 5, 'color' : 'Green'})\nplt.xlabel(\"ACTUAL TEST POINTS\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\nplt.ylabel(\"Y_PRED\", fontdict={'fontsize': 20, 'fontweight' : 5, 'color' : 'Brown'})\n\nplt.show()","f41a947e":"r_squared = r2_score(y_test, y_pred)\nr_squared","c39ad628":"n = X_test.shape[0]\np = X_test.shape[1]\n\nadjusted_r2 = 1-((1-r_squared)*(n-1)\/(n-p-1))\nadjusted_r2","12fed7c8":"np.sqrt(mean_squared_error(y_test, y_pred))","b011c4f4":"### MODEL EVALUATION (TEST DATA VS PREDICTED DATA)","56a8ffde":" - **`TRAIN`** \n  - R-squared:       0.817 \n  - Adj. R-squared:  0.814\n - **`TEST`** \n  - R-squared:        0.802\n  - Adj. R-squared:   0.793","5d25490e":"#### FINAL MODEL EQUATION\n\n**`cnt = 0.259993 + ( 0.234782 * yr ) + ( -0.093480 * holiday ) + ( 0.389932 * temp ) + ( -0.141134 * season_spring ) + (-0.037090 * mnth_January ) + ( -0.066256 * mnth_July ) + ( 0.066174 * mnth_September ) + ( -0.293545 * weathersit_Light rain_Light snow_Thunderstorm ) + ( -0.078067 * weathersit_Mist_cloudy )`**","2467354b":"### **`INFERENCE`** -\n - Linear relationship between y_pred and test actual points are clearly visible\n - Our final model (lr_model_7) seems to be good enough.","8a37ce07":"## FINAL MODEL","baed600b":"### R-SQUARE VALUE (TEST)","7cbd4acf":"#### CHECKING VIF (variance inflation factor)","4219f3ed":"**`INFERENCE`** -\n - Temperature and count has positive linear relationship","15d11c9a":"### **`INFERENCE`** -\n - **mnth_December** has **very high P value**\n - To build a better model we can drop the **mnth_December** variable and built again a new model","37676d8f":"## FINAL MODEL PREDICTION ON TEST DATAFRAME","bc041f8b":"- Correlation between these 2 variables is almost 1 so let us drop one column","c9324735":"**`INFERENCE`** -\n - Median of the holiday is much lower then the median of Non-holiday days.","5549523f":"### **`INFERENCE`** -\n - Visible patterns are not found\n ","0f32c69a":"### CREATING DUMMIES","1c2b46c4":"#### CHECKING VIF (variance inflation factor)","5b15849c":"#### FINAL MODEL EQUATION\n\n**`cnt = 0.259993 + (0.234782 * yr) + (-0.093480 * holiday) + ( 0.389932 * temp) + ( -0.141134 * season_spring) + (-0.037090 * mnth_January) + ( -0.066256 * mnth_July) + ( 0.066174 * mnth_September) + (-0.293545 * weathersit_Light rain_Light snow_Thunderstorm ) + ( -0.078067 * weathersit_Mist_cloudy )`**","39cc365e":"#### CHECKING VIF (variance inflation factor)","f4d5808a":"### READING DATAFRAME","a9a4639e":"**`INFERENCE`** -\n - The temperature column values looks clear with valid range ","38bf70b2":"### (TRAIN & TEST) SPLITTING DATA ","9db58b89":"#### CLEANING CATEGORY VARIABLES WITH APPROPRIATE VALUES","9450f598":"### COMPARISION (TRAIN VS TEST)","f88be37b":"### **`INFERENCE`** -\n - P values for all the predictor variables are significant, below 0.05\n - VIF values are around 2 or less, which are good values ( very low multicolinearity ).\n - None of the independent variable has coefficient value zero. \n - Model has good R-squared and Adj. R-squared values.\n - F-statistic:\t248.2\n - Prob (F-statistic):\t3.98e-178, which is almost zero.\n - Model looks simple with less number of independent variables.","13e482aa":"##### ADDING CONSTANT AND MAKING PREDICTIONS","26aac7a1":"### MODEL NUMBER - 1","81271644":"### **`INFERENCE`** -\n - **season_summer** has **high P value**\n - To build a better model we can drop the **season_summer** variable and built again a new model","2d976d1e":"##### ANALYSIS ON CATEGORICAL COLUMNS","25ded38a":"### CHECKING FOR PATTERN ","83464e1e":"**`INFERENCE`** -\n - There is drastic reduction in counts during rain or snow or thunderstorm\n - counts are highest during clear sky\n - This can be a good predictor ","e498bcbc":"### **`INFERENCE`** -\n - From the above graph it is evident that the errors terms are **normally distributed with mean zero**\n ","e232a924":"# Bike Sharing Demand Prediction\n\n### By SEYED JAVIDH","402ec41f":"**`INFERENCE`** -\n - No duplicate records are in the dataframe","583dc6e7":"**`INFERENCE`** -\n - We can notice a huge difference between fall and spring\n - Counts are very low during spring compared to other seasons\n - This can be a good predictor of dependant variable","8194fd62":"**`INFERENCE`** -\n - No columns has null values","50ed4897":"### **`INFERENCE`** -\n - B0 != B1 != B2 != B3 != B4 != B5 != B6 != B7 != B8 != B9 != 0\n  - So we reject Null hypothesis (H0 : B1=B2=....Bn=0)\n         ","072f4f96":"## DATA CLEANING","b5117d2f":"##### ANALYSIS ON NUMERICAL COLUMNS","d70d46a0":"# VALIDATING LINEAR REGRESSION ASSUMPTIONS\n\n### RESIDUAL ANALYSIS OF TRAIN DATA","6237a9d8":"#### CHECKING VIF (variance inflation factor)","f4b49328":"### ADJUSTED R-SQUARE VALUE (TEST)","75885e0c":"##### SELECTING THE COLUMNS OF OUR FINAL MODEL ON TEST DATAFRAME","734e359a":"### **`INFERENCE`** -\n - P values for all the predictor variables are significant, below 0.05\n - As we saw earlier **temp is linearly correlated to the dependant variable**, so this can be a **better predictor** \n - To build a better model we can **drop** the **windspeed** variable, as it is having **second highest VIF** and built again a new model","af8b8544":"## DATA VISUALIZATION ","a7eaa817":"### **`INFERENCE`** -\n - P values for all the predictor variables are significant, below 0.05\n - Despite of having low P value, **Humidity** has **very high VIF**\n - To build a better model we can **drop** the **humidity** variable and built again a new model","e938dbad":"### **`INFERENCE`** -\n - Actual points are equally distributed on both sides of the prediction\n - looks like it has uniform variance ","34db20cb":"**`INFERENCE`** -\n - There is a significant increase in 2019 compared to 2018\n - Increase in demand in increase in year can be a good predictor","ef456d23":"### CHECKING FOR CONSTANT VARIANCE (HOMOSCEDASTICITY)","8243c550":"**`INFERENCE`** -\n - Thursdays and Fridays have higher counts than the bigining of the week, as Mondays and Tuesdays have the lowest counts.\n - Friday, Saturday and Sunday almost looks similar. there is no big difference among the days","ce1dc6d0":"# MODEL BUILDING\n##### USING STATSMODEL","6e56f228":"### MODEL NUMBER - 6","c6b1cffd":"### DATAFRAME INSPECTION","452c142e":"### MODEL NUMBER - 4","6ccea098":"##### Analysing trends between numeric vaiables","92be4104":"**`INFERENCE`** -\n - Count values are more between may and october\n - very less between november and april, which are winter and spring season in United States of America\n - This can be a good predictor of dependant variable","00190a1a":"**`INFERENCE`** -\n - Temperature could be a good predictor of dependant variable","9b4a6bc4":"## NORMALISING DATA\n##### ( MINMAX SCALING)","658f391f":"### MODEL NUMBER - 2","15a19bee":"### **`INFERENCE`** -\n - **mnth_November** has **very high P value**\n - To build a better model we can drop the **mnth_November** variable and built again a new model","ec56c676":"##### CREATING TARGET VARIABLE AND PREDICTORS","14301a9a":"**`INFERENCE`** -\n - The wind speed column values looks clear with valid range ","0bd70657":"#### CHECKING VIF (variance inflation factor)","d544c826":"#### CHECKING VIF (variance inflation factor)","27c3b5ae":"### MEAN SQUARED ERROR","a55203bb":"# CONCLUSION:","bbb63fa7":"### MODEL NUMBER - 5","341d06db":"## USING RECURSIVE FEATURE ELIMINATION (RFE) \n#### TO SELECT TOP 15 PREDICTOR VARIABLES ","7b36a4b0":"### **`INFERENCE`** -\n - P values for all the predictor variables are significant, below 0.05\n - To build a better model we can drop the **season_winter** variable as it is having **second highest VIF** and built again a new model","5d8b3165":"##### CREATING TARGET VARIABLE AND PREDICTORS","0a12864a":"**`INFERENCE`** -\n - This heat map will help us while checking for multicolinearity.","f40b8ac6":"### MODEL NUMBER - 7","26ac39cf":"### MODEL NUMBER - 3","55fb396c":"### IMPORTING LIBRARIES","c35bf767":" - **temp has the highest coefficient of 0.389932**, which means keeping other variable constant an unit increase in temp results in 0.389932 unit increase in cnt \n - temp and weathersit_Light rain_Light snow_Thunderstorm are the top 2 variables having strong coefficients\n - **holiday, spring, january, july and both weather situation variables have negative coeeficient**, which means increase in values of  these variables would result in decrease in value of cnt.\n - Dependant variable (cnt) increases if temperature, year, month_september increases as these variables have positive coefficients.\n - Constant value - when all other variables are zero the cnt value will still be 0.259993\n - Comparing R-squared value for both train and test. Our model performs well on test set as well.\n - This model explains how exactly the demands vary with different features. management can accordingly manipulate the business strategy to meet the demand levels and meet the customer's expectations.","690a07ab":"#### CHECKING VIF (variance inflation factor)","aae96099":"**`INFERENCE`** -\n - There is no strong correlation (above 0.5) between independent variables","1eec43f1":"**`INFERENCE`** -\n - Value zero is practically impossible, which could be a manual error, so we can impute with mean value\n - The temperature column, rest of the values looks clear with valid range "}}