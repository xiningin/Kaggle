{"cell_type":{"69dc88a1":"code","e6ee3ded":"code","f37483f1":"code","db09f7e0":"code","f5947c39":"code","405958b5":"code","28217ddb":"code","da1d5245":"code","8baf2a6a":"code","bebfb09f":"code","9fee9689":"code","a62b9337":"code","fdbf0d73":"code","e5759fa8":"code","406dff0f":"code","3ddd3cd9":"code","5d36d240":"code","55afb851":"code","dc609bbf":"code","ca5fc311":"code","6071e0b5":"code","c44d4a79":"code","ed866118":"code","616a43df":"code","82254cae":"code","0626ab9f":"code","8bc3991b":"code","4ff0eaaf":"code","2a338ed2":"code","96b23142":"code","3bf708cb":"code","3b8f92e0":"code","caa31e49":"code","8c8dfdbd":"code","a7fde7f4":"code","bddc6744":"code","8eb67a5f":"code","c1ad046b":"code","1b1c33e8":"code","70aa1347":"code","5bf215b4":"code","58c54318":"code","4893bc0b":"code","4a090370":"code","8bdac992":"code","e12e01bf":"code","b324b6a8":"code","0570c7a0":"code","536b6505":"code","75068295":"code","e5199f84":"code","62e775fa":"code","367bb5d3":"code","1d690aa7":"code","37d48e4b":"code","3ab626a7":"code","6933e095":"code","37303919":"code","80c04f07":"code","6b18e77d":"code","d9b0d632":"code","1e38e606":"code","d1b70c3c":"code","e88d840b":"code","8536043e":"code","8520bb64":"code","d2a214a6":"code","3f5f6dad":"code","1412dd5a":"code","7354223e":"code","688c6ebc":"code","6f1d7568":"code","89767a0f":"code","62cac276":"code","d132c877":"code","e4a1cff3":"code","4c55c0a6":"code","6c0b8e93":"code","c1f28b2c":"code","7a4df692":"code","022c44fc":"code","3c8fb6a6":"code","07d676c8":"code","aae96d00":"markdown","a5898450":"markdown","15601b8d":"markdown","9cee261f":"markdown","e224aa27":"markdown","be0e6b53":"markdown","49fbeca0":"markdown","e9984df0":"markdown","8837fc44":"markdown","58bed439":"markdown","111f177a":"markdown","1ed6f599":"markdown","5998575a":"markdown","e8b2dc8c":"markdown","f2d7a0ab":"markdown","bdb4fc20":"markdown","fdfe591f":"markdown","ea8294ee":"markdown","f8ba61c9":"markdown","2959f8b5":"markdown","17790e91":"markdown","2f046bc1":"markdown","23540b92":"markdown","ed146606":"markdown","1d567a8e":"markdown","8d234121":"markdown","339b2732":"markdown","252d5b18":"markdown","f59652d8":"markdown","488c77ac":"markdown"},"source":{"69dc88a1":"%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n\nimport pandas as pd\npd.options.display.max_columns = 100\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nimport seaborn as sns\nsns.set()\nimport pylab as plot\nparams = { \n    'axes.labelsize': \"large\",\n    'xtick.labelsize': 'x-large',\n    'legend.fontsize': 20,\n    'figure.dpi': 150,\n    'figure.figsize': [25, 7]\n}\nplot.rcParams.update(params)","e6ee3ded":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","f37483f1":"train.head(50)","db09f7e0":"test.head()","f5947c39":"train.shape","405958b5":"test.shape","28217ddb":"train.info()","da1d5245":"test.info()","8baf2a6a":"train.isnull().sum()","bebfb09f":"test.isnull().sum()","9fee9689":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","a62b9337":"bar_chart('Sex')","fdbf0d73":"bar_chart('Pclass')","e5759fa8":"bar_chart('SibSp')","406dff0f":"bar_chart('Parch')","3ddd3cd9":"bar_chart('Embarked')","5d36d240":"train.head()","55afb851":"train.head(10)","dc609bbf":"train_test_data = [train, test] \n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","ca5fc311":"train['Title'].value_counts()","6071e0b5":"test['Title'].value_counts()","c44d4a79":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","ed866118":"train.head()","616a43df":"test.head()","82254cae":"bar_chart('Title')","0626ab9f":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","8bc3991b":"train.head()","4ff0eaaf":"test.head()","2a338ed2":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","96b23142":"bar_chart('Sex')","3bf708cb":"train.head(100)","3b8f92e0":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","caa31e49":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","8c8dfdbd":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()","a7fde7f4":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","bddc6744":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","8eb67a5f":"\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","c1ad046b":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","1b1c33e8":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","70aa1347":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","5bf215b4":"train.info()","58c54318":"test.info()","4893bc0b":"train_test_data=[train, test]\n\nfor dataset in train_test_data: \n\n     dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0 \n\n     dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1 \n\n     dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2 \n\n     dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3 \n\n     dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","4a090370":"train.head()","8bdac992":"bar_chart('Age')","e12e01bf":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","b324b6a8":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","0570c7a0":"train.head()","536b6505":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","75068295":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","e5199f84":"\nfacet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","62e775fa":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","367bb5d3":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","1d690aa7":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","37d48e4b":" train_test_data=[train, test]\n\nfor dataset in train_test_data: \n\n     dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0 \n\n     dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1 \n\n     dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2 \n\n     dataset.loc[ dataset['Fare'] > 100, 'Age'] = 3","3ab626a7":"train.head()","6933e095":"train.Cabin.value_counts()","37303919":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","80c04f07":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","6b18e77d":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","d9b0d632":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","1e38e606":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","d1b70c3c":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","e88d840b":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","8536043e":"train.head()","8520bb64":"train.head()","d2a214a6":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","3f5f6dad":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","1412dd5a":"train_data.head(10)","7354223e":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","688c6ebc":"train.info()","6f1d7568":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","89767a0f":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","62cac276":"# kNN Score\nround(np.mean(score)*100, 2)","d132c877":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e4a1cff3":"# decision tree Score\nround(np.mean(score)*100, 2)","4c55c0a6":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","6c0b8e93":"# Random Forest Score\nround(np.mean(score)*100, 2)","c1f28b2c":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","7a4df692":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","022c44fc":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","3c8fb6a6":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","07d676c8":"submission = pd.read_csv('submission.csv')","aae96d00":"**Collecting the data**","a5898450":"**BINNING**","15601b8d":"**Bar Chart for Categorical Features**\n\n-> Pclass\n\n-> Sex\n\n-> SibSp ( # of siblings and spouse)\n\n-> Parch ( # of parents and children)\n\n-> Embarked\n\n-> Cabin","9cee261f":"The Chart confirms a person aboarded with more than 2 parents or children more likely survived\n\nThe Chart confirms a person aboarded alone more likely dead","e224aa27":"The Chart confirms **1st class** more likely survivied than other classes\n\n\nThe Chart confirms **3rd class** more likely dead than other classes","be0e6b53":"**Sex**\n\nmale: 0\n\nfemale: 1","49fbeca0":"**Exploratory data analysis**","e9984df0":"**Age**","8837fc44":"**Binning\/Converting Numerical Age to Categorical Variable**\n\n*feature vector map:*\n\n**child**: 0\n\n**young**: 1\n\n**adult**: 2\n\n**mid-age**: 3\n\n**senior**: 4","58bed439":"**Cross Validation (K-fold)**","111f177a":"**Random Forest**","1ed6f599":"The Chart confirms a **person aboarded with more than 2 siblings or spouse more likely survived**\n\nThe Chart confirms a person aboarded without siblings or spouse more likely dead","5998575a":"**Embarked**","e8b2dc8c":"**MODELLING**","f2d7a0ab":"**Data Dictionary**\n\nSurvived: 0 = No, 1 = Yes\n\npclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd\n\nsibsp: # of siblings \/ spouses aboard the Titanic\n\nparch: # of parents \/ children aboard the Titanic\n\nticket: Ticket number\n\ncabin: Cabin number\n\nembarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton","bdb4fc20":"**FARE**","fdfe591f":"**Titanic - Machine Learning from Disaster** \ud83d\udea2\n\nHi,this is my **first notebook** ever and here we explore the Titanic Dataset using tools such as:\n\n**Pandas** for *data manipulation* and *ingestion*\n\n**Matplotlib** and **seaborn** for* data visualization*\n\n**Numpy** for *multidimensional* array computing\n\n**sklearn** for machine learning and *predictive modeling*","ea8294ee":"The Chart confirms **Women** more likely survivied than **Men**\n\n","f8ba61c9":"**Title map**\n\nMr : 0\n\nMiss : 1\n\nMrs: 2\n\nOthers: 3","2959f8b5":"**KNN**","17790e91":"*  Feel free to leave any ***suggestions*** in the comments for the betterment of the notebook.\n\u200b\n> * An ***upvote*** would be highly appreciated\n\u200b\n* Thank you for your time, CHEERS!\ud83c\udf1f","2f046bc1":"**Naive Bayes**","23540b92":"**Testing**","ed146606":"The Chart confirms **a person aboarded from C** slightly more likely survived\n\nThe Chart confirms **a person aboarded from Q** more likely dead\n\nThe Chart confirms **a person aboarded from S** more likely dead","1d567a8e":"more than 50% of 1st class are from S embark\n\nmore than 50% of 2nd class are from S embark\n\nmore than 50% of 3rd class are from S embark","8d234121":"**Feature engineering**","339b2732":"**FamilySize**","252d5b18":"**Decision Tree**","f59652d8":"**CABIN**","488c77ac":"**1) IMPORTING THE LIBRARIES**\n\n\u200b\nHere we import some of the libraries that we will use in this notebook for EDA as well as building a predective model."}}