{"cell_type":{"31407303":"code","a2f81668":"code","0f6cd3a2":"code","df32e4c7":"code","288e7474":"code","4717ae41":"code","11e0aec1":"code","cb9b9eab":"code","9260946f":"code","ee5e1f7f":"code","0bdb92cd":"code","57e6afb3":"code","bd91a44a":"code","0ee32938":"code","09983510":"code","a17f8df4":"code","045db772":"code","7d56200e":"code","b3963bb5":"code","90c56a41":"code","eaeb7a9d":"code","cbed6672":"code","51b3abf7":"code","898617b9":"code","687589d6":"code","9c09676a":"code","8065b3ec":"code","64e6b0ac":"code","44e35e06":"code","100dadeb":"code","7a299495":"code","e98f6ddf":"markdown","53951e4e":"markdown","f2fa1cb6":"markdown","a9152aca":"markdown","5f38788b":"markdown","3229a861":"markdown","f91e9640":"markdown","c0ac9b7e":"markdown","1a9e1350":"markdown"},"source":{"31407303":"import warnings\nimport pandas as pd\n\n# Ignore warnings\nwarnings.filterwarnings(\"ignore\")\npd.options.mode.chained_assignment = None","a2f81668":"import os\n\n# Show input data files\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f6cd3a2":"# Train set\n\ndf_train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\", index_col=False)\ndf_train.shape","df32e4c7":"df_train.head()","288e7474":"# Test set\n\ndf_test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\", index_col=False)\ndf_test.shape","4717ae41":"df_test.head()","11e0aec1":"# Separate features & labels\n\ndf_y = df_train[\"label\"]\ndf_X = df_train.drop(labels=[\"label\"], axis=1)","cb9b9eab":"import seaborn as sns\n\n# Visualize distribution of given data\n\ndef plot_count(df, title, clr=\"darkgrid\"):\n    sns.set(style=clr)\n    ax = sns.countplot(df)\n    ax.set_title(title)\n    \nplot_count(df_y, \"Train Labels\")","9260946f":"import numpy as np\n\n# Reshape pixels into 3D matrices\n\ndef reshape_3d(df, h, w, channel):\n    if not isinstance(df, np.ndarray):\n        df = df.values\n    return df.reshape(-1, h, w, channel)\n\ndf_X = reshape_3d(df_X, 28, 28, 1)","ee5e1f7f":"from keras.utils.np_utils import to_categorical\n\n# Encode labels to one-hot vectors\n\ndf_y = to_categorical(df_y)\ndf_y.shape","0bdb92cd":"from sklearn.model_selection import train_test_split\n\n# Create train and validation sets\n\nX_train, X_val, y_train, y_val = train_test_split(df_X, df_y, test_size=0.2, random_state=42)\nX_train.shape","57e6afb3":"# Calculate mean (\ud835\udf07) and standard deviation (\ud835\udf0e) of train set\n\nX_train_mean = X_train.mean().astype(np.float32)\nX_train_std = X_train.std().astype(np.float32)\n\n# Rescale pixels to have \ud835\udf07 of 0 and \ud835\udf0e of 1\n\ndef standardize(df, mean=X_train_mean, std=X_train_std):\n    return (df - mean) \/ std","bd91a44a":"from keras.models import Sequential\n\n# Use Keras Sequential to create stack of layers\n\nmodel = Sequential()","0ee32938":"from keras.layers import Lambda \n\n# Add Lambda layer to perform standardization\n\nmodel.add(Lambda(standardize, input_shape=(28, 28, 1)))","09983510":"from keras.layers import Conv2D, MaxPool2D\n\n# Add Conv2D and MaxPooling2D layers to create convolution kernel and downsample\n\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, kernel_size=(3, 3), activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2, 2)))","a17f8df4":"from keras.layers.core import Flatten\n\n# Add Flatten layer to transform input into 1D array\n\nmodel.add(Flatten())","045db772":"from keras.layers.core import Dense\n\n# Add Dense layers to connect neurons in previous layers\n\nmodel.add(Dense(256, activation=\"relu\"))\nmodel.add(Dense(10, activation=\"softmax\"))","7d56200e":"from keras.optimizers import RMSprop\n\n# Add loss, optimizer, metrics functions\n\nmodel.compile(optimizer=RMSprop(lr=0.001), loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","b3963bb5":"from keras.preprocessing.image import ImageDataGenerator\n\n# Generate batches of image data to avoid overfitting\n\ngenr = ImageDataGenerator()\ngenr.fit(X_train)\n\nbatches_train = genr.flow(X_train, y_train, batch_size=64)\nbatches_val = genr.flow(X_val, y_val, batch_size=64)","90c56a41":"history = model.fit_generator(epochs=10, verbose=1,\n                              generator=batches_train, steps_per_epoch=batches_train.n \/ batches_train.batch_size, \n                              validation_data=batches_val, validation_steps=batches_val.n \/ batches_val.batch_size)","eaeb7a9d":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\n\ni = range(1, len(history.history[\"loss\"]) + 1, 1)","cbed6672":"plt.plot(i, history.history[\"loss\"], \"go--\", markersize=10, label=\"Train\")\nplt.plot(i, history.history[\"val_loss\"], \"bx--\", markersize=10, label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.xticks(i)\nplt.legend()\nplt.show()","51b3abf7":"plt.plot(i, history.history[\"accuracy\"], \"go--\", markersize=10, label=\"Train\")\nplt.plot(i, history.history[\"val_accuracy\"], \"bx--\", markersize=10, label=\"Validation\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.xticks(i)\nplt.legend()\nplt.show()","898617b9":"model.summary()","687589d6":"# Preprocess test set\n\ndf_test = reshape_3d(df_test, 28, 28, 1)","9c09676a":"# Predict labels\n\npreds = model.predict_classes(df_test, verbose=1)","8065b3ec":"plot_count(preds, \"Predictions\")","64e6b0ac":"import csv\n\n# Export predictions to csv file\nwith open(\"result.csv\", \"w\") as f:\n    writer = csv.DictWriter(f, fieldnames=[\"ImageId\", \"Label\"])\n    writer.writeheader()\n    for i in range(len(preds)):\n        writer.writerow({\"ImageId\": i + 1, \"Label\": preds[i]})","44e35e06":"# Render pixels as image and show label along with prediction\n\ndef show_sample(i, X=X_train, y=y_train, model=model, h=28, w=28, channel=1, clr=\"gray\"):\n    pred = model.predict_classes(reshape_3d(X[i], h, w, channel))\n    lbl = np.where(y[i] == 1)[0]\n    plt.imshow(X[i][:, :, 0], cmap=plt.get_cmap(clr))\n    if lbl == pred:\n        status = \"OK\"\n    else:\n        status = \"NOK\"\n    plt.title(\"{}\\nLabel: {}, Prediction: {}\".format(status, lbl[0], pred[0]))","100dadeb":"show_sample(11)","7a299495":"show_sample(100)","e98f6ddf":"### Augmentation","53951e4e":"# DATA","f2fa1cb6":"### Preparation","a9152aca":"# RESULT","5f38788b":"# MODEL","3229a861":"### Optimization","f91e9640":"### Evaluation","c0ac9b7e":"### Sample","1a9e1350":"### Pre-processing"}}