{"cell_type":{"6c24497e":"code","e2d6ace8":"code","04fd8a6d":"code","ed77634b":"code","79c6de96":"code","83de4176":"code","aaebc504":"code","4aeaf6dd":"code","d6bc7cc0":"code","3d16c0f3":"code","a4225cfe":"code","0d92f980":"code","53a84bf2":"code","a9120f7b":"code","04ff3039":"code","8004a9e6":"code","7ea39b0b":"code","04dd7fb7":"code","e4955f76":"code","bb8a4a38":"code","f3c5576e":"code","a9657504":"code","c889094a":"code","f2dbb9e1":"code","512a0a95":"code","c4f31808":"code","d05ab353":"code","881a0f35":"code","108a2398":"code","cc858ffb":"code","58e3ad90":"code","ff471119":"code","f6fe6fa9":"code","33317406":"code","70fdb9e9":"code","6f074f3d":"code","c20b4457":"code","c229b6a4":"code","13646879":"code","21941f45":"markdown","32c3c2fc":"markdown","33655b5f":"markdown","86c87676":"markdown","85529d92":"markdown","f2de6ffe":"markdown","ee8de060":"markdown","633288d7":"markdown","bf4a5fd2":"markdown","5adc1e89":"markdown","e6c72fa0":"markdown","e6e2718c":"markdown"},"source":{"6c24497e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","e2d6ace8":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nsns.set()\n\nplt.style.use('seaborn')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category = DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category = FutureWarning)","04fd8a6d":"#membaca data dan parsing file csv\ntrain = pd.read_csv('..\/input\/budakmicin\/new_train.csv')\ntest = pd.read_csv('..\/input\/budakmicin\/new_test.csv')","ed77634b":"#membaca 10 data teratas\ntrain.head(10)","79c6de96":"#ukuran tabel data train\ntrain.shape","83de4176":"#info tabel\ntrain.info()","aaebc504":"#deskripsi tabel\ntrain.describe()","4aeaf6dd":"#copy data\ntrain_copy = train.copy()\ntest_copy = test.copy()","d6bc7cc0":"null_total = train.isnull().sum().sort_values(ascending = False)\npercentage = round(train.isnull().sum()\/train_copy.isnull().count()*100,1)\ndata_percentage = pd.concat([null_total,percentage],axis  =1,keys = ['Count','Percentage'])\ndata_percentage.head()","3d16c0f3":"percentage = percentage[null_total > 0]\npercentage.sort_values(inplace=True)\npercentage.plot.bar(fontsize=16)","a4225cfe":"plt.figure(figsize=(8,4))\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train)\n\nplt.title(\"Persentase penumpang yang selamat dalam jenis kelamin\")\nprint(\"Wanita:\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\nprint(\"Pria:\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","0d92f980":"plt.figure(figsize=(8,4))\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train)\nplt.title(\"Persentase penumpang yang selamat dalam Kelas Tiket\")\n\n#print percentage of people by Pclass that survived\nprint(\"1st (Upper)\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"2nd (Middle)\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\nprint(\"3rd (Lower)\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)","53a84bf2":"plt.figure(figsize=(8,4))\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=train)\nplt.title(\"Persentase penumpang yang selamat dalam Relasi keluarga (Saudara)\")\n\nprint(\"0\", train[\"Survived\"][train[\"SibSp\"] == 0].value_counts(normalize = True)[1]*100)\nprint(\"1\", train[\"Survived\"][train[\"SibSp\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"2\", train[\"Survived\"][train[\"SibSp\"] == 2].value_counts(normalize = True)[1]*100)\nprint(\"3\", train[\"Survived\"][train[\"SibSp\"] == 3].value_counts(normalize = True)[1]*100)\nprint(\"4\", train[\"Survived\"][train[\"SibSp\"] == 4].value_counts(normalize = True)[1]*100)","a9120f7b":"plt.figure(figsize=(8,4))\nsns.barplot(x=\"Parch\", y=\"Survived\", data=train)\nplt.title(\"Persentase penumpang yang selamat dalam Relasi keluarga (Orang tua)\")\nplt.show()","04ff3039":"print(\"Penumpang dalam Tujuan destinasi\".center(110))\nsns.catplot(x = 'Embarked', col = 'Survived', kind = 'count', data = train_copy,\n           height = 5, aspect = 1)\nplt.show()","8004a9e6":"#sort the ages into logical categories\ntrain[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nplt.title(\"Persentase penumpang yang selamat dalam Umur\")\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train)\nplt.show()","7ea39b0b":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n\nplt.figure(figsize=(8,4))\nplt.title(\"Persentase penumpang yang selamat dalam Pemakaian kabin\")\n\nprint(\"Pakai kabin\", train[\"Survived\"][train[\"CabinBool\"] == 1].value_counts(normalize = True)[1]*100)\nprint(\"Tanpa kabin\", train[\"Survived\"][train[\"CabinBool\"] == 0].value_counts(normalize = True)[1]*100)\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train)\nplt.show()","04dd7fb7":"#melihat korelasi data\ntrain.corr()","e4955f76":"#plotting\nmask = np.triu(np.ones_like(train_copy.corr(), dtype=np.bool))\n\nplt.figure(figsize=(16,6))\nsns.heatmap(train_copy.corr(),mask=mask, annot=True, cmap='BrBG')","bb8a4a38":"#melihat keseluruhan data\ntrain.describe(include=\"all\")","f3c5576e":"#drop cabin\ntrain = train.drop(['Cabin'], axis = 1)\ntest = test.drop(['Cabin'], axis = 1)","a9657504":"#drop tiket\ntrain = train.drop(['Ticket'], axis = 1)\ntest = test.drop(['Ticket'], axis = 1)","c889094a":"print(\"Yang berasal dari Southampton (S):\")\nsouthampton = train[train[\"Embarked\"] == \"S\"].shape[0]\nprint(southampton)\n\nprint(\"Yang berasal dari Cherbourg (C):\")\ncherbourg = train[train[\"Embarked\"] == \"C\"].shape[0]\nprint(cherbourg)\n\nprint(\"Yang berasal dari Queenstown (Q):\")\nqueenstown = train[train[\"Embarked\"] == \"Q\"].shape[0]\nprint(queenstown)","f2dbb9e1":"train = train.fillna({\"Embarked\": \"S\"})","512a0a95":"#create a combined group of both datasets\ncombine = [train, test]\n\n#extract a title for each Name in the train and test datasets\nfor dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(train['Title'], train['Sex'])","c4f31808":"#replace various titles with more common names\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Capt', 'Col',\n    'Don', 'Dr', 'Major', 'Rev', 'Jonkheer', 'Dona'], 'Rare')\n    \n    dataset['Title'] = dataset['Title'].replace(['Countess', 'Lady', 'Sir'], 'Royal')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","d05ab353":"#map each of the title groups to a numerical value\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Royal\": 5, \"Rare\": 6}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","881a0f35":"# fill missing age with mode age group for each title\nmr_age = train[train[\"Title\"] == 1][\"AgeGroup\"].mode() #Young Adult\nmiss_age = train[train[\"Title\"] == 2][\"AgeGroup\"].mode() #Student\nmrs_age = train[train[\"Title\"] == 3][\"AgeGroup\"].mode() #Adult\nmaster_age = train[train[\"Title\"] == 4][\"AgeGroup\"].mode() #Baby\nroyal_age = train[train[\"Title\"] == 5][\"AgeGroup\"].mode() #Adult\nrare_age = train[train[\"Title\"] == 6][\"AgeGroup\"].mode() #Adult\n\nage_title_mapping = {1: \"Young Adult\", 2: \"Student\", 3: \"Adult\", 4: \"Baby\", 5: \"Adult\", 6: \"Adult\"}\n\nfor x in range(len(train[\"AgeGroup\"])):\n    if train[\"AgeGroup\"][x] == \"Unknown\":\n        train[\"AgeGroup\"][x] = age_title_mapping[train[\"Title\"][x]]\n        \nfor x in range(len(test[\"AgeGroup\"])):\n    if test[\"AgeGroup\"][x] == \"Unknown\":\n        test[\"AgeGroup\"][x] = age_title_mapping[test[\"Title\"][x]]","108a2398":"#map each Age value to a numerical value\nage_mapping = {'Baby': 1, 'Child': 2, 'Teenager': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntrain['AgeGroup'] = train['AgeGroup'].map(age_mapping)\ntest['AgeGroup'] = test['AgeGroup'].map(age_mapping)\n\ntrain.head()\n\n#dropping the Age feature for now, might change\ntrain = train.drop(['Age'], axis = 1)\ntest = test.drop(['Age'], axis = 1)","cc858ffb":"#drop the name.\ntrain = train.drop(['Name'], axis = 1)\ntest = test.drop(['Name'], axis = 1)","58e3ad90":"#map each Sex value to a numerical value\nsex_mapping = {\"male\": 0, \"female\": 1}\ntrain['Sex'] = train['Sex'].map(sex_mapping)\ntest['Sex'] = test['Sex'].map(sex_mapping)\n\ntrain.head()","ff471119":"#map each Embarked value to a numerical value\nembarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\ntrain['Embarked'] = train['Embarked'].map(embarked_mapping)\ntest['Embarked'] = test['Embarked'].map(embarked_mapping)\n\ntrain.head()","f6fe6fa9":"train.head()#fill in missing Fare value in test set based on mean fare for that Pclass \nfor x in range(len(test[\"Fare\"])):\n    if pd.isnull(test[\"Fare\"][x]):\n        pclass = test[\"Pclass\"][x] #Pclass = 3\n        test[\"Fare\"][x] = round(train[train[\"Pclass\"] == pclass][\"Fare\"].mean(), 4)\n        \n#map Fare values into groups of numerical values\ntrain['FareBand'] = pd.qcut(train['Fare'], 4, labels = [1, 2, 3, 4])\ntest['FareBand'] = pd.qcut(test['Fare'], 4, labels = [1, 2, 3, 4])\n\n#drop Fare values\ntrain = train.drop(['Fare'], axis = 1)\ntest = test.drop(['Fare'], axis = 1)","33317406":"#check train data\ntrain.head()","70fdb9e9":"#check test data\ntest.head()","6f074f3d":"Y_train = train['Survived']\nX_train = train.drop('Survived',axis = 1)","c20b4457":"Y_train","c229b6a4":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\n\nY_prediction = random_forest.predict(testing)\n\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nprint(round(acc_random_forest,2,), \"%\")","13646879":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import ExtraTreesClassifier, GradientBoostingClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","21941f45":"#### Cabin and Ticket Feature","32c3c2fc":"### Feature Analysis","33655b5f":"## Praprocessing Data\n\n### Cleaning Data\nMemperhitungkan nilai yang hilang atau informasi yang tidak perlu","86c87676":"**Numerical Features**: Age (Continuous), Fare (Continuous), SibSp (Discrete), Parch (Discrete)\n\n**Categorical Features**: Survived, Sex, Embarked, Pclass\n\n**Alphanumeric Features**: Ticket, Cabin","85529d92":"#### Age Feature","f2de6ffe":"## Exploratory Data Analysis (EDA)\n\nTahapan ini adalah tahapan dimana memahami data lebih jauh dan mencari tahu apa yang mungkin perlu diperhatikan atau menarik untuk disoroti kepada orang lain. melakukan investigasi awal pada data untuk menemukan pola, untuk menemukan anomali, untuk menguji hipotesis dan untuk memeriksa asumsi dengan bantuan statistik ringkasan dan representasi grafis\n\n","ee8de060":"#### Splitting the Training Data","633288d7":"### Check Missing Values","bf4a5fd2":"## 1. Understand the Problem (Business and Data)\n\n### A. Understand the Business\nPada tahap ini akan dilakukan pemahaman terhadap permasalahan yang dihadapi. Pada kompetisi ini akan dilakukan pembuatan model yang dapat memprediksi apakah suatu penumpang dapat \"survived\" saat kejadian tenggelamnya kapal titanic.\n\nProblem Statement : Prediksi apakah suatu penumpang \"survived\" saat kejadian tenggelamnya kapal titanic.\n\nDengan membuat model yang dapat memprediksi sebuah penumpang \"survived\" atau tidak saat kejadian titanic maka perusahaan mungkin dapat melakukan tindakan preventif kedepannya berdasarkan karakteristik penumpang tersebut.\n\ndisclaimer: meskipun hal ini tidak dapat diterapkan dalam dunia nyata, tapi anggap saja manfaat pembuatan model ini seperti itu untuk kepentingan belajar\n\n### B. Understand the Data\nPada tahap ini akan dilakukan pemahaman terhadap dataset yang diberikan. Tahapan ini sangat penting karena pada kasus dilapangan terkadang memiliki kualitas data yang buruk sehingga perlu penanganan lebih lanjut.\n\nBerikut data-data yang akan digunakan:\n\ntrain.csv - Data training yang berisi informasi terkait penumpang beserta informasi survived atau tidaknya penumpang tersebut\ntest.csv - Data uji\/test yang berisi informasi penumpang yang ingin diketahui apakah penumpang tersebut survived atau tidak\nsample_submission.csv - File yang berisi contoh format submisi pada platform kaggle","5adc1e89":"#### Mengisi *Missing value* pada fitu","e6c72fa0":"Karena kebanyakan berasal dari Southampton (S), maka *missing value* dapat diisi dengan S","e6e2718c":"### Deskripsi per fitur tabel:\n* survival => Survival\n* pclass   => Ticket class\n* Age      => Age in years\n* sibsp    => of siblings \/ spouses aboard the Titanic\n* parch    => of parents \/ children aboard the Titanic\n* ticket   => Ticket number\n* fare     => Passenger fare\n* cabin    => Cabin number\n* embarked => Port of Embarkation"}}