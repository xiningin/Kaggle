{"cell_type":{"5b74c5a5":"code","8f7c7c6c":"code","1be8e7a9":"code","e7fb0e9f":"code","e3d576dc":"code","74057946":"code","4848e859":"code","0ad17792":"code","7dd25b2f":"code","9c09a09d":"code","2c74263f":"code","d026d725":"code","a94a1469":"code","656571b2":"code","2c7bbf01":"code","8c69cb73":"code","8684be57":"code","758782a6":"code","0361d55c":"code","2aa90ff0":"code","58d49369":"code","4e1993d2":"code","9e3ddef7":"code","32d7ba09":"code","b207654a":"code","fb9b2834":"code","eb45f748":"code","53400b6f":"code","f6c379d0":"code","c9c34a29":"code","5610cfcf":"code","2588facc":"code","bb2cee60":"code","276f549e":"code","33289a4b":"code","a723d556":"code","bb1a51b7":"code","9fda4a84":"code","8462b831":"code","0b443df7":"code","83db65c1":"code","0a42eef6":"code","78b36729":"code","53a8c038":"code","2b020ccd":"code","f0009228":"code","9502cd98":"code","d780c4e0":"code","512e44cc":"code","d376b76e":"code","39b06197":"markdown","0a33dcf5":"markdown","eeec1b53":"markdown","e74d85e4":"markdown","a441bc28":"markdown","7fd299ae":"markdown","8e412f37":"markdown","6c0655fe":"markdown","6f4ede6c":"markdown","101205ed":"markdown","2c6e5126":"markdown","7a242578":"markdown","7fc9f69a":"markdown","bd45487b":"markdown","c1bb4dc9":"markdown","30310b70":"markdown","2033a40a":"markdown","1826949d":"markdown","2018f939":"markdown","0abec2dd":"markdown","71366869":"markdown","600f2e71":"markdown","2d749d39":"markdown","b01b898a":"markdown","6b560736":"markdown","2f528491":"markdown"},"source":{"5b74c5a5":"# import modules\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8f7c7c6c":"# Read in dataset\ndf = pd.read_csv('..\/input\/transport-for-london-journey-information\/Nov09JnyExport.csv')","1be8e7a9":"# Check the head of the dataset\ndf.head()","e7fb0e9f":"df.info()","e3d576dc":"df = df.rename(columns={'downo': 'DOWno', 'daytype': 'DOW', 'EndStation': 'EndStn',\n                        'EXTimeHHMM': 'ExTimeHHMM', 'ZVPPT': 'Zones', 'JNYTYP': 'JourneyType',\n                        'FFare': 'FullFare', 'DFare': 'DiscountFare', 'RouteID': 'BusRoute'})","74057946":"df['EntTimeHHMM'].value_counts()","4848e859":"df['ExTimeHHMM'].value_counts()","0ad17792":"df[df['EntTimeHHMM'] != '00:00']['EntTimeHHMM'].value_counts().head(30)","7dd25b2f":"df[df['EntTimeHHMM'] != '00:00']['EntTimeHHMM'].value_counts().tail(30)","9c09a09d":"df[df['EntTimeHHMM'] == '27:25']","2c74263f":"df[(df['EntTimeHHMM'] == '26:36')]","d026d725":"df = df.drop(['EntTimeHHMM', 'ExTimeHHMM'], axis=1)","a94a1469":"# Bus by far most popular mode of transport (for oyster card journeys at least)\ndf['SubSystem'].value_counts()","656571b2":"print(sorted(df['StartStn'].unique()))","2c7bbf01":"print(sorted(df['EndStn'].unique()))","8c69cb73":"complete = df[(df['StartStn'] != 'Unstarted') & (df['EndStn'] != 'Unfinished')]","8684be57":"complete.head()","758782a6":"complete.sample()","0361d55c":"# drop all bus journeys from complete\ncomplete = complete[complete['SubSystem'] != 'LTB']","2aa90ff0":"complete = complete.drop('BusRoute', axis=1)","58d49369":"complete['JourneyLength'] = complete['ExTime'] - complete['EntTime']","4e1993d2":"complete[complete['JourneyLength'] <= 0]","9e3ddef7":"complete = complete[complete['SubSystem'] != 'TRAM']","32d7ba09":"complete[complete['JourneyLength'] <= 0]","b207654a":"complete[complete['JourneyLength'] <= 0].sample()","fb9b2834":"complete = complete[complete['StartStn'] != complete['EndStn']]","eb45f748":"complete[complete['JourneyLength'] <= 0]","53400b6f":"print(f\"Remaining invalid journey times: {len(complete[complete['JourneyLength'] <= 0])}\")","f6c379d0":"complete = complete[complete['JourneyLength'] > 0]","c9c34a29":"complete.describe()","5610cfcf":"complete['SubSystem'].value_counts()","2588facc":"fig = plt.figure(figsize=[12,8])\nplt.title('Number of Journeys by Mode of Transport')\ncomplete['SubSystem'].value_counts().plot(kind='bar')","bb2cee60":"fig = plt.figure(figsize=[14,8])\nplt.title('Most Popular Underground Start Stations')\ncomplete['StartStn'].value_counts()[:20].plot(kind='bar')","276f549e":"fig = plt.figure(figsize=[14,8])\nplt.title('Most Popular Underground End Stations')\ncomplete['EndStn'].value_counts()[:20].plot(kind='bar')","33289a4b":"complete[['StartStn','EndStn']].sample(10)","a723d556":"from collections import OrderedDict\n\nstartstn = list(complete['StartStn'])\nendstn = list(complete['EndStn'])\ndf = pd.DataFrame(data={'StartStn':startstn,'EndStn':endstn})\ndf.head()","bb1a51b7":"# Create 'hue' column to use for plot\n\ndf['hue'] = 'Start' # set 'hue' to 'Start' for all Start stations\ndf['Stations'] = df['StartStn']\ndf_start = df[['Stations','hue']]\n\ndf['hue'] = 'End'   # set 'hue' to 'End' for all End stations\ndf['Stations'] = df['EndStn']\ndf_end = df[['Stations','hue']]","9fda4a84":"# Create order by value count\n\norderstart = df['StartStn'].value_counts()\nstartstnlist = orderstart.index.tolist()\n\norderend = df['EndStn'].value_counts()\nendstnlist = orderend.index.tolist()\n\norder = startstnlist+endstnlist\norder = list(OrderedDict.fromkeys(order))\n\ndf_concat = pd.concat([df_start,df_end],ignore_index=True)","8462b831":"plt.figure(figsize=[20,8])\nfig = sns.countplot(data=df_concat,x='Stations',order=order[:20],hue='hue')\nplt.title('Most Popular Underground Stations, compared as Start or End')\nfig.set_xticklabels(fig.get_xticklabels(), rotation=90);","0b443df7":"# Get order of all stations from df_concat\nallstnlist = df_concat['Stations'].value_counts().index.tolist()\norderall = list(OrderedDict.fromkeys(allstnlist))\n\nplt.figure(figsize=[20,8])\nplt.grid()\nplt.title('Most Popular Underground Stations (Start or End)')\nfig = sns.countplot(x='Stations',data=df_concat,order=orderall[:20],palette='viridis')\nfig.set_xticklabels(fig.get_xticklabels(), rotation=90);","83db65c1":"plt.figure(figsize=[14,6])\nplt.grid()\nax = sns.distplot(complete['JourneyLength'],bins=40)\nax.set_xlabel('Journey Length \/ mins')\nax.set_ylabel('Percentage of total journeys')","0a42eef6":"daysofweek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']","78b36729":"plt.figure(figsize=[14,8])\nplt.grid()\nsns.countplot(x='DOW',data=complete, order = daysofweek)\nplt.title('Number of Underground Journeys by Day of Week')\nplt.xlabel('Day of Week')\nplt.ylabel('Number of journeys')","53a8c038":"# Create logical variable of Daily Capping\ncomplete['DailyCapping'] = pd.get_dummies(complete['DailyCapping'])['Y']","2b020ccd":"plt.figure(figsize=[14,8])\ncomplete['FinalProduct'].value_counts().plot(kind='bar')","f0009228":"complete['FinalProduct'].value_counts()","9502cd98":"complete[complete['FinalProduct'] == 'Tfl Travel - Free']","d780c4e0":"# Rename typo entries\ncomplete['FinalProduct'].replace('LUL Travelcard->Annual','LUL Travelcard-Annual', inplace=True)","512e44cc":"# Drop outlier entries where travelcard time period was missing\ncomplete = complete[complete['FinalProduct'] != 'LUL Travelcard-Time Not Captured']","d376b76e":"complete['FinalProduct'].value_counts()","39b06197":"* Now I'll check the entries for the remaining categories","0a33dcf5":"# References\n[ [1] ](https:\/\/www.london.gov.uk\/what-we-do\/planning\/london-plan\/current-london-plan\/london-plan-chapter-one-context-and-strategy-0) The London Plan 2011: https:\/\/www.london.gov.uk\/what-we-do\/planning\/london-plan\/current-london-plan\/london-plan-chapter-one-context-and-strategy-0\n\n[ [2] ](https:\/\/worldpopulationreview.com\/world-cities\/london-population\/) 2020 London Population estimate according to Worldpopulationreview: https:\/\/worldpopulationreview.com\/world-cities\/london-population\/\n\n[ [3] ](https:\/\/en.wikipedia.org\/wiki\/Oyster_card#Oyster_photocards) Oyster photocards Wikipedia link: https:\/\/en.wikipedia.org\/wiki\/Oyster_card#Oyster_photocards","eeec1b53":"## Comparing Start and End Stations\n* Now I create a frequency plot for all stations with a hue of Start vs End Station\n* This is my favourite visualisation as it took quite a bit of tinkering to find a good solution to create the hue ","e74d85e4":"As expected, we find most journeys happen on weekdays, with fewer on Saturdays and least on Sundays.","a441bc28":"* As we have dropped all bus journeys, 'BusRoute' column is now redundant, as all entries will be 'XX' by default. I will now drop this column.","7fd299ae":"* As we can see, 'LUL Travelcard->Annual' is an inconsistent entry matching 'LUL Travelcard-Annual'. I now rename these entries to be consistent with the rest of the data.\n* I drop the two outliers where the travelcard time was not captured ('LUL Travelcard-Time Not Captured').\n* It is unclear what is meant by 'Tfl Travelcard - Free'. My intuition is that this represents free journeys where passengers used 5-10 Zip oyster photocards. The Oyster card wikipedia page confirms that these Oyster cards were available in 2009, when the data was collected:\n> \"On 7 January 2008, Transport for London unveiled the Zip card, an Oyster photocard to be used by young people aged 18 years or under who qualify for free bus and tram travel within the capital, with effect from 1 June 2008.\"\n[ [3] ](https:\/\/en.wikipedia.org\/wiki\/Oyster_card#Oyster_photocards) ","8e412f37":"## Important Observation on 'complete' Dataframe\n* LUL (Underground) is by far the most prominent mode of transport. This tells us that the 'complete' Dataframe is not indicative of all Oyster journeys, as it would appear that complete journey information is only available for LUL. We dropped all entries from other modes of transport, most notably Bus - which was by far the most popular mode of transport.\n* It is therefore important to note that any predictions and conclusions we make from the 'complete' dataframe are only applicable to LUL journeys, and are not at all indicative of all Oyster journeys on the TFL network.\n* For this reason, it is implied that any comments made henceforth on the 'complete' dataframe apply only to LUL journeys.","6c0655fe":"* Looking at subsets of 'complete', it is apparent that all bus journeys have a default Exit Time of midnight. This makes sense, as passengers are not required to touch out on bus journeys, so there will be no information on the end time of their journey. For our purposes, this is not helpful, as we are trying to look at journey times.\n* A further observation is that for some bus journeys, the Start station and End station are both 'Bus' by default.\n* For this reason, I will drop all bus journeys from the 'complete' subset.","6f4ede6c":"* Lastly, we have 46 remaining entries where 'JourneyTime' is less than or equal to zero. These are all cases where the start and end station are the same, so I will drop these.","101205ed":"* Looking at the unique station names in 'StartStn', we can see that some passengers did not touch in, resulting in default station name 'Unstarted'\n* Doing the same for 'EndStn', we find that journeys where the passenger did not touch out are given the default station name 'Unfinished'","2c6e5126":"## Journey Length Distribution\n* Now let's investigate the distribution of journey lengths on the network","7a242578":"### Some observations on 'EntTimeHHMM' and 'ExTimeHHMM'\n* As expected, the vast majority of journeys (excluding at default time of 00:00) happen between 08:00-09:00 or 17:00-18:00, which is rush hour in London\n* All erroneous entries where HH > 23 are bus journeys on night bus routes (including 24-hour routes such as route 83), as evidenced in the tables above (e.g. N295 at index 947857)\n* These two categories do not provide me with any unique insight that I cannot derive from the categories, such as 'EntTime' and 'ExTime', and they are altogether too convoluted. I will therefore drop both categories.","7fc9f69a":"# Step 3: Preprocessing\n* Now I will prepare data for modelling, creating logical variables and dropping redundant features","bd45487b":"## TFL Oyster Card Journeys Analysis\nLondon is a major world capital in many sectors, though perhaps most notably in finance. With a booming economy, people are flocking to the city from all around the world, attracting by the thriving job market and high standards of living.\nThis has caused its population to increase steadily and consistently since the 1970s, and most notably since the 1990s.\nIn 2011, the Current London Plan [[1]](https:\/\/www.london.gov.uk\/what-we-do\/planning\/london-plan\/current-london-plan\/london-plan-chapter-one-context-and-strategy-0) predicted:\n> ... London\u2019s population rising from 8.2 million in 2011, to:\n>\n>9.20 million in 2021;\n>9.54 million in 2026;\n>9.84 million in 2031; and\n>10.11 million in 2036.\n\nSo far their estimations have proved accurate; current estimates put the population of London at around 9.3 million. [[2]](https:\/\/worldpopulationreview.com\/world-cities\/london-population\/)\n\nWith a growing population, London's roads are becoming more congested and the TFL network is struggling to cope. Never was this more obvious than at the height of the COVID-19 crisis in early March this year.\n\nIn this notebook I will analyse a dataset containing information on TFL Oyster card journeys across a 7-day period in November 2009 to draw some insights on the TFL network to highlight the key problem areas that need to be addressed.\n\nThe dataset was collected by a classmate of mine in the UCL Department of Physics and Astronomy, please find it here: [TFL Oyster Journeys '09](https:\/\/www.kaggle.com\/astronasko\/transport-for-london-journey-information)\n\n<figure>\n   <a href=\"https:\/\/www.london.gov.uk\/sites\/default\/files\/styles\/gla_large_unconstrained\/public\/figure_1.1_annual_pop_change_1971-2011.png?itok=tmztWl0e\">\n   <img src=https:\/\/www.london.gov.uk\/sites\/default\/files\/styles\/gla_large_unconstrained\/public\/figure_1.1_annual_pop_change_1971-2011.png?itok=tmztWl0e width=\"500\" align=\"center\"\/><\/a>\n   <figcaption> London population change between 1971-2011. Source: london.gov.uk\n   <\/figcaption>\n<\/figure>","c1bb4dc9":"# Conclusion\n* From my analysis I can conclude that certain stations are under higher stress to accomodate passengers during rush hour. One such example is Oxford Circus.\n* Most stations that experience high congestion are in Zone 1.\n* It is advisable to find a method of sharing the passenger load that these congested stations carry with other nearby stations. Perhaps providing incentives for passengers to exit at a less congested station and complete their journey on foot or by bus, for example.\n* I have cleaned up the data, performed EDA and some basic preprocessing to prepare it for modelling.\n* I could now perform dimensionality reduction on the 'complete' dataframe, perhaps using PCA, to draw some more interesting conclusions. I may explore this possibility in future.","30310b70":"* By far the most frequent value for both 'EntTimeHHMM' and 'ExTimeHHMM' is 00:00\n* This appears erroneous, as one would expect that most passengers would travel at rush hour (before 9am, after 5pm)\n* I will inspect this further and possibly drop these two columns, as the 'EntTime' and 'ExTime' columns supply sufficient information (time in minutes after midnight)","2033a40a":"## Completed Journeys\n* I am interested in exploring journey length and how it interacts with other variables.\n* In order to do this, I will now create a new dataframe called 'complete', which is a subset of 'df', but only containing entries where the passenger touched both in and out (i.e. we know both their start and end station).","1826949d":"* The distribution plot shows a positive skew\n* We can see that the mean Journey Length is around 20 mins","2018f939":"### Feature engineering\nNext I create a new category called \"JourneyTime\", which is the total journey time in minutes, as the difference between \"ExTime\" and \"EntTime\"","0abec2dd":"* Looking at 'JourneyTime', we find that all Tram journeys follow the same pattern as Bus journeys, defaulting to an Exit Time of midnight. This is not helpful for our purposes, so I will now drop all Tram journeys.","71366869":"# Step 1: Data Wrangling\n* First off, I am going to clean up and reformat the data to make it suit my purposes.\n* I'll start by renaming some columns to make them more descriptive and consistent.","600f2e71":"* Now I look at the different Final Product entries, to find outliers and erroneous entries","2d749d39":"### Most popular Underground stations (Start or End)\n* Now let's look at the most popular underground stations, whether they are the start or end points of a journey","b01b898a":"# Step 2: EDA\nNow let's explore the data with some visualisations.","6b560736":"* Lastly, we find that there are 724 remaining entries where 'JourneyTime' is less than or equal to zero. These all appear to be where a passenger has touched in and out of the same station, so I now drop all entries where the Start Station and End Station are the same","2f528491":"## Compare days of week\n* Now let's look at a frequency plot according to the day of the week"}}