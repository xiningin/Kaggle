{"cell_type":{"a371dddb":"code","ae835d03":"code","eeb2b2a5":"code","34ff509f":"code","d5c41475":"code","cfe0d780":"code","56ddbdfb":"code","834aa47b":"code","dfd74876":"code","3493337b":"code","c99a84fd":"code","811343e1":"code","f4955b8f":"code","c3cddd7d":"markdown","43dd6ccc":"markdown","acd0c7ef":"markdown","ec84ea72":"markdown","e6d6c82d":"markdown","f3ba51dc":"markdown","c3eb8bde":"markdown","bcc44db3":"markdown","bbff653c":"markdown","d864c8e7":"markdown","5c6a16b0":"markdown","6baa70e7":"markdown","c5e3e8aa":"markdown","b506b3ed":"markdown"},"source":{"a371dddb":"# coding\uff1autf-8\n# reference: \u591c\u7a7a\u4e2d\u6700\u4eae\u7684\u661f_6c64\n# link\uff1ahttps:\/\/www.jianshu.com\/p\/58b276f7e7fd\n\nfrom time import time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.axes3d import Axes3D\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as lda\nfrom sklearn import manifold, datasets, decomposition, ensemble, random_projection\n","ae835d03":"# \u52a0\u8f7dsklearn.datasets MNIST\uff1a\u5305\u542b 5 classes digit\ndigits = datasets.load_digits(n_class=5)\nx = digits.data\ny = digits.target\n# X.shape, y.shape ((901, 64), (901,)) h x w = 8 x 8\nimages = x.reshape((-1,8,8))\n# print(x.shape)\n\ndef show_images(images, n): \n    # images: show images\n    # n: \u5c55\u793a\u7684\u56fe\u7247\u4e2a\u6570nxn\n    plt.figure()\n    for i, image in enumerate(images[0 : n * n]):\n        ax = plt.subplot(n, n, i+1)\n        plt.axis('off')\n        plt.imshow(image, cmap=plt.cm.binary)\n    plt.show()\n\nshow_images(images, 20)\n","eeb2b2a5":"n_neighbors = 30\n\n# \u4e8c\u7ef4\u6570\u636e\u53ef\u89c6\u5316\u51fd\u6570\ndef plot_embedding_2d(X,title=None):\n    #\u5750\u6807\u7f29\u653e\u5230[0\uff0c1)\u533a\u95f4\n    x_min,x_max = np.min(X,axis=0),np.max(X,axis=0)\n    X = (X - x_min)\/(x_max - x_min)\n    #\u964d\u7ef4\u540e\u5750\u6807\u4e3a\uff08X[i\uff0c0]\uff0cX[i\uff0c1]\uff09\uff0c\u5728\u8be5\u4f4d\u7f6e\u753b\u51fa\u5bf9\u5e94\u7684digits\n    fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    for i in range(X.shape[0]):\n        ax.text(X[i, 0],X[i, 1],str(digits.target[i]),\n                color = plt.cm.Set1(y[i]\/10.),\n                fontdict={'weight':'bold','size':9})\n    if title is not None:\n        plt.title(title)\n\n# \u4e09\u7ef4\u6570\u636e\u53ef\u89c6\u5316\u51fd\u6570\ndef plot_embedding_3d(X,title=None):\n    # \u5750\u6807\u7f29\u653e\u5230[0\uff0c1)\u533a\u95f4\n    x_min, x_max = np.min(X, axis=0), np.max(X, axis=0)\n    X = (X - x_min) \/ (x_max - x_min)\n    # \u964d\u7ef4\u540e\u5750\u6807\u4e3a\uff08X[i\uff0c0]\uff0cX[i\uff0c1]\uff0cX[i\uff0c2]\uff09\uff0c\u5728\u8be5\u4f4d\u7f6e\u753b\u51fa\u5bf9\u5e94\u7684digits\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1,projection='3d')\n    for i in range(X.shape[0]):\n        ax.text(X[i, 0], X[i, 1],X[i, 2], str(digits.target[i]),\n                color=plt.cm.Set1(y[i] \/ 10.),\n                fontdict={'weight': 'bold', 'size': 9})\n    if title is not None:\n        plt.title(title)","34ff509f":"n_components = 2\nprint(\"Computing random projection\")\nrp = random_projection.SparseRandomProjection(n_components=2, random_state=42) # \u300a\u94f6\u6cb3\u7cfb\u6f2b\u6e38\u6307\u5357\u300b\u4e2d42\u662f\u8d85\u7ea7\u8ba1\u7b97\u673a\u5f97\u51fa\u7684\u751f\u547d\u7ec8\u6781\u7b54\u6848 :-)\nx_projected = rp.fit_transform(x)\nplot_embedding_2d(x_projected, \"Random Projection\")","d5c41475":"print(\"Computing PCA projection\")\nt0 = time()\nX_pca = decomposition.TruncatedSVD(n_components=3).fit_transform(x)\nplot_embedding_2d(X_pca[:,0:2],\"PCA 2D\")\nplot_embedding_3d(X_pca,\"PCA 3D (time %.2fs)\" % (time() -t0))","cfe0d780":"#\u7ebf\u5f62\u5224\u522b\u5206\u6790\uff08Linear Discriminant Analysis\uff0cLDA\uff09\u4ece64\u7ef4\u964d\u52302\uff0c3\u7ef4\nprint(\"Computing LDA projection\")\nX2 = x.copy()\nX2.flat[::x.shape[1] + 1] += 0.01  # Make X invertible\nt0 = time()\nX_lda = lda(n_components=3).fit_transform(X2,y)\nplot_embedding_2d(X_lda[:,0:2],\"LDA 2D\" )\nplot_embedding_3d(X_lda,\"LDA 3D (time %.2fs)\" %(time() - t0))","56ddbdfb":"print(\"Computing Isomap embedding\")\nt0 = time()\nX_iso = manifold.Isomap(n_neighbors=30,n_components=2).fit_transform(x)\n# From version 0.25 passing n_neighbors as positional arguments will result in an error FutureWarning\n# X_iso = manifold.Isomap(n_components=2).fit_transform(x)\nplot_embedding_2d(X_iso,\"Isomap (time %.2fs)\" %(time() - t0))","834aa47b":"#\u6807\u51c6\u7248 \u5c40\u90e8\u7ebf\u6027\u5d4c\u5165(Locally-linear embedding\uff0cLLE)\u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors=30,n_components=2,method='standard')\nt0 = time()\nX_lle = clf.fit_transform(x)\n#Done. Reconstruction error: 1.11351e-06\nprint(\"Done. Reconstruction error: %g\" %clf.reconstruction_error_)\nplot_embedding_2d(X_lle,\"Locally Linear Embedding (time %.2fs)\" %(time() - t0))\n\n#\u6539\u8fdb\u7248 \u5c40\u90e8\u7ebf\u6027\u5d4c\u5165(Locally-linear embedding\uff0cLLE)\u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing modified LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors=30,n_components=2,method='modified')\nt0 = time()\nX_mlle = clf.fit_transform(x)\n#Done. Reconstruction error: 0.282968\nprint(\"Done. Reconstruction error: %g\" %clf.reconstruction_error_)\nplot_embedding_2d(X_mlle,\"Modified Locally Linear Embedding (time %.2fs)\" %(time() - t0))\n\n#hessian \u5c40\u90e8\u7ebf\u6027\u5d4c\u5165(Locally-linear embedding\uff0cLLE)\u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing Hessian LLE embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors=30,n_components=2,method='hessian')\nt0 = time()\nX_hlle = clf.fit_transform(x)\n#Done. Reconstruction error: 0.158393\nprint(\"Done. Reconstruction error: %g\" %clf.reconstruction_error_)\nplot_embedding_2d(X_hlle,\"Hessian Locally Linear Embedding (time %.2fs)\" %(time() - t0))","dfd74876":"#\u90e8\u5206\u5207\u7a7a\u95f4\u6392\u5217\u7b97\u6cd5\uff08LTSA \uff0cLocal tangent space alignment) \u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing LTSA  embedding\")\nclf = manifold.LocallyLinearEmbedding(n_neighbors=30,n_components=2,method='ltsa')\nt0 = time()\nX_ltsa = clf.fit_transform(x)\nprint(\"Done. Reconstruction error: %g\" %clf.reconstruction_error_)\nplot_embedding_2d(X_ltsa,\"Local Tangent Space Alignment (time %.2fs)\" %(time() - t0))","3493337b":"#\u591a\u7ef4\u6807\u5ea6\u5206\u6790\uff08MDS\uff0cMultidimensional Scaling\uff09\u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing MDS embedding\")\nclf= manifold.MDS(n_components=2,n_init=1,max_iter=100)\nt0 = time()\nX_mds = clf.fit_transform(x)\nprint(\"Done. Stress: %f\" %clf.stress_)\nplot_embedding_2d(X_mds,\"MDS (time %.2fs)\" %(time()-t0))","c99a84fd":"#\u968f\u673a\u68ee\u6797\u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing Totally Random Trees embedding\")\nhasher = ensemble.RandomTreesEmbedding(n_estimators=200,random_state=0,max_depth=5)\nt0 = time()\nX_transformed = hasher.fit_transform(x)\npca = decomposition.TruncatedSVD(n_components=2)\nX_reduced = pca.fit_transform(X_transformed)\nplot_embedding_2d(X_reduced,\"Random Trees (time %.2fs)\" %(time()-t0))","811343e1":"#\u8c31\u5d4c\u5165 \u4ece64\u7ef4\u964d\u52302\u7ef4\nprint(\"Computing Spectral embedding\")\nembedder = manifold.SpectralEmbedding(n_components=2,random_state=0,eigen_solver=\"arpack\")\nt0 = time()\nX_se = embedder.fit_transform(x)\nplot_embedding_2d(X_se,\"Spectral (time %.2fs)\" %(time()-t0))","f4955b8f":"#t-\u5206\u5e03\u90bb\u57df\u5d4c\u5165\u7b97\u6cd5(t-SNE t-distributed stochastic neighbor embedding algorithm) \u4ece64\u7ef4\u964d\u52302,3\u7ef4\n#init\u8bbe\u7f6eembedding\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u53ef\u9009random\u6216\u8005pca\uff0c\u8fd9\u91cc\u7528pca\uff0c\u6bd4\u8d77random,init\u4f1a\u66f4stable\u4e00\u4e9b\u3002\nprint(\"Computing t-SNE embedding\")\ntsne = manifold.TSNE(n_components=3,init='pca',random_state=0)\nt0 = time()\nX_tsne = tsne.fit_transform(x)\n#\u964d\u7ef4\u540e\u5f97\u5230X_ tsne\uff0c\u5927\u5c0f\u662f(901,3)\nprint(X_tsne.shape)\nplot_embedding_2d(X_tsne[:,0:2],\"t-SNE 2D\")\nplot_embedding_3d(X_tsne,\"t-SNE 3D (time %.2fs)\" %(time()-t0))\nplt.show()","c3cddd7d":"#### \u7ebf\u5f62\u5224\u522b\u5206\u6790\uff08Linear Discriminant Analysis\uff0cLDA\uff09\uff1a64D ->2D\/3D","43dd6ccc":"#### \u8c31\u5d4c\u5165\uff1a64D->2D","acd0c7ef":"#### \u5c40\u90e8\u7ebf\u6027\u5d4c\u5165(Locally-linear embedding\uff0cLLE):64D->2D","ec84ea72":"### \u52a0\u8f7d\u6570\u636e\uff0c\u90e8\u5206\u53ef\u89c6\u5316 ###","e6d6c82d":"#### \u4e3b\u6210\u5206\u5206\u6790PCA\uff1a64\u7ef4->2D\/3D","f3ba51dc":"#### t-\u5206\u5e03\u90bb\u57df\u5d4c\u5165\u7b97\u6cd5(t-SNE t-distributed stochastic neighbor embedding algorithm) \uff1a64D->2\/3D","c3eb8bde":"#### \u90e8\u5206\u5207\u7a7a\u95f4\u6392\u5217\u7b97\u6cd5\uff08LTSA \uff0cLocal tangent space alignment) : 64D->2D","bcc44db3":"### \u6d41\u5f62\u5b66\u4e60\u7b97\u6cd5 ###\n#### 1\u3001\u968f\u673a\u6620\u5c04\uff1a64\u7ef4->2\u7ef4 ####","bbff653c":"### \u603b\u7ed3\n* \u5341\u591a\u79cd\u7b97\u6cd5\uff0c\u7ed3\u679c\u5404\u6709\u597d\u574f\uff0c\u603b\u4f53\u4e0at-SNE\u8868\u73b0\u6700\u4f18\uff0c\u4f46\u5b83\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u4e5f\u662f\u6700\u9ad8\u7684\u3002","d864c8e7":"#### \u591a\u7ef4\u6807\u5ea6\u5206\u6790\uff08MDS\uff0cMultidimensional Scaling\uff09\uff1a64D->2D","5c6a16b0":"### 2D\/3D\u53ef\u89c6\u5316\u51fd\u6570 ###","6baa70e7":"#### \u968f\u673a\u68ee\u6797\uff1a64D->2D","c5e3e8aa":"### \u53c2\u8003\n* https:\/\/blog.csdn.net\/u012162613\/article\/details\/45920827\n* \u6d41\u884c\u5b66\u4e60\u6982\u5ff5\uff1ahttps:\/\/blog.csdn.net\/zhulingchen\/article\/details\/2123129\n* \u4ee3\u7801\uff1ahttps:\/\/github.com\/wepe\/MachineLearning\n* https:\/\/www.jianshu.com\/p\/58b276f7e7fd","b506b3ed":"#### \u7b49\u8ddd\u6620\u5c04\uff08Isomap\uff09: 64\u7ef4->2\u7ef4"}}