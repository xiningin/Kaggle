{"cell_type":{"32a8d137":"code","fd57c594":"code","e21411df":"code","4384bace":"code","96f0777b":"code","282a8336":"code","3cc2c12e":"code","708097df":"code","aaa2b609":"code","9617230e":"code","14dd5285":"code","7db50f14":"code","3c13b01b":"code","806ee09f":"code","5088d23d":"code","0aa7269f":"code","546c3d13":"code","e0630ad6":"code","04afb858":"code","f7931ace":"code","1c0ac82b":"code","a0fd3a87":"code","77707db2":"markdown","bf90136d":"markdown","0e917f85":"markdown","05fdfbe1":"markdown","1b3425b0":"markdown","43934314":"markdown"},"source":{"32a8d137":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd57c594":"df = pd.read_csv('\/kaggle\/input\/usahousing\/USA_Housing.csv')","e21411df":"df.head()","4384bace":"df.describe()","96f0777b":"df.info()","282a8336":"import seaborn as sns\n\nsns.pairplot(df)","3cc2c12e":"import matplotlib.pyplot as plt\n\n%matplotlib inline\n\nplt.subplots(figsize =(10,10))\nsns.heatmap(df.corr(),annot=True,linewidths=0.2,cmap='viridis');","708097df":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error, r2_score","aaa2b609":"x = df.drop(['Price','Address'],axis=1)\ny = df.Price\n\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=38)","9617230e":"# Fit LinearRegression model on the training set\nmodel = LinearRegression()\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","14dd5285":"# plot show features importance \ncoef_ = pipe.named_steps['linearregression'].coef_\n\nplt.subplots(figsize=(15,8))\nplt.plot(x.columns,coef_)\nplt.ylabel('Coefficients')\nplt.show()","7db50f14":"# Fit a lasso model on the training set\n\nmodel = Lasso(alpha=0.1)\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","3c13b01b":"# plot show features importance \ncoef_ = pipe.named_steps['lasso'].coef_\n\nplt.subplots(figsize=(15,8))\nplt.plot(x.columns,coef_)\nplt.ylabel('Coefficients')\nplt.show()","806ee09f":"# Fit a ridge model on the training set\n\nmodel = Ridge(alpha=1)\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","5088d23d":"# plot show features importance \ncoef_ = pipe.named_steps['ridge'].coef_\n\nplt.subplots(figsize=(15,8))\nplt.plot(x.columns,coef_)\nplt.ylabel('Coefficients')\nplt.show()","0aa7269f":"# Fit a ElastiNet model on the training set\n\nmodel = ElasticNet(alpha=0.001, l1_ratio=0.01)\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","546c3d13":"# plot show features importance \ncoef_ = pipe.named_steps['elasticnet'].coef_\n\nplt.subplots(figsize=(15,8))\nplt.plot(x.columns,coef_)\nplt.ylabel('Coefficients')\nplt.show()","e0630ad6":"x = df.drop(['Price','Address','Avg. Area Number of Bedrooms'],axis=1)\ny = df.Price\n\n# test_size 25%\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=38)","04afb858":"# Fit LinearRegression model on the training set\nmodel = LinearRegression()\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","f7931ace":"# test_size 20%\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=38)","1c0ac82b":"# Fit LinearRegression model on the training set\nmodel = LinearRegression()\nscaler = StandardScaler()\npipe = make_pipeline(scaler,model)\npipe = pipe.fit(X_train,y_train)\n\n# Predict on test set\npredictions = pipe.predict(X_test)\n\n# Evaluate the model using the test data\nmse = mean_squared_error(y_test, predictions)\nprint(\"MSE:\", mse)\nrmse = np.sqrt(mse)\nprint(\"RMSE:\", rmse)\nr2 = r2_score(y_test, predictions)\nprint(\"R2:\", r2)\n\n# Plot predicted vs actual\nplt.subplots(figsize=(10,8))\nplt.scatter(y_test, predictions)\nplt.xlabel('Actual Labels')\nplt.ylabel('Predicted Labels')\n# overlay the regression line\nz = np.polyfit(y_test, predictions, 1)\np = np.poly1d(z)\nplt.plot(y_test,p(y_test), color='red')\nplt.show()","a0fd3a87":"# plot show features importance \ncoef_ = pipe.named_steps['linearregression'].coef_\n\nplt.subplots(figsize=(15,8))\nplt.plot(x.columns,coef_)\nplt.ylabel('Coefficients')\nplt.show()","77707db2":"### Ridge","bf90136d":"### Lasso","0e917f85":"### ElasticNet","05fdfbe1":"### Conclusion:\n\n* By reducing one feature (Avg. Area Number of Bedrooms) and test_size of 20%, the linear regression model give r2: 0.9135 , RMSE: 101938.\n* The most important feature is avg. Area income, follow by avg. Area House Age & Area Population.\n* The least important feature is avg.Area Number of Bedrooms","1b3425b0":"### Remove Avg. Area Number of Bedrooms & increase test_size","43934314":"![](http:\/\/)Comment : R2 reduce slightly with test_size increase from 20% to 25%"}}