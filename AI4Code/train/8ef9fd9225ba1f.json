{"cell_type":{"cfa5df54":"code","818ace6a":"code","1c6e9f9b":"code","f224f87b":"code","47a45321":"code","64aac38a":"code","9c1e43a1":"code","7133697d":"code","9650d207":"code","4f111291":"code","14941333":"markdown","d8a305bd":"markdown","b0cab90c":"markdown","acc5eef9":"markdown","36a6072b":"markdown","c888b6ec":"markdown","edd624e2":"markdown","f4d3aab9":"markdown"},"source":{"cfa5df54":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import roc_auc_score\n\nimport catboost\nimport lightgbm as lgb\nimport sklearn\n\nimport optuna\nfrom optuna.samplers import TPESampler\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","818ace6a":"#setting a seed for reproducability\nseed = 69420\n\n#reading training data\ndf_train = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ndf_train_labels = df_train['claim']\ndf_train = df_train.drop(columns=['claim','id'],axis=1)\n\n#reading test_data\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\ndf_submission = df_test['id'].to_frame()\ndf_test = df_test.drop(columns=['id'], axis=1)\n\nprint(df_train.shape)\nprint(df_train_labels.shape)","1c6e9f9b":"df_train.isnull().sum(axis = 0).sort_values(ascending=False)","f224f87b":"df_train['abs_sum'] = df_train.abs().sum(axis=1)\ndf_train['sem'] = df_train.sem(axis=1)\ndf_train['max'] = df_train.max(axis=1)\ndf_train['min'] = df_train.min(axis=1)\ndf_train['std'] = df_train.std(axis=1)\ndf_train['skew'] = df_train.skew(axis=1)\ndf_train['mean'] = df_train.mean(axis=1)\ndf_train[\"top_mean\"] = df_train[[\"f40\",\"f70\",\"f47\",\"f34\",\"f35\",\"f45\"]].mean(axis=1)\n\ndf_train['NANs'] = df_train.isnull().sum(axis=1)","47a45321":"df_test['abs_sum'] = df_test.abs().sum(axis=1)\ndf_test['sem'] = df_test.sem(axis=1)\ndf_test['max'] = df_test.max(axis=1)\ndf_test['min'] = df_test.min(axis=1)\ndf_test['std'] = df_test.std(axis=1)\ndf_test['skew'] = df_test.skew(axis=1)\ndf_test['mean'] = df_test.mean(axis=1)\ndf_test[\"top_mean\"] = df_test[[\"f40\",\"f70\",\"f47\",\"f34\",\"f35\",\"f45\"]].mean(axis=1)\ndf_test['NANs'] = df_test.isnull().sum(axis=1)","64aac38a":"# Creating the Model for some Hyperperamter Processes\n\ndef Create_Model(trial):\n    num_leaves = trial.suggest_int(\"num_leaves\", 20, 40)\n    n_estimators = trial.suggest_int(\"n_estimators\", 200, 450)\n    max_depth = trial.suggest_int('max_depth', 3, 8)\n    min_child_samples = trial.suggest_int('min_child_samples', 200, 750)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.10, 0.30)\n    bagging_fraction = trial.suggest_uniform('bagging_fraction', 0.50, 1.0)\n    colsample_bytree = trial.suggest_uniform('colsample_bytree', 0.50, 1.0)\n    \n        \n    model = lgb.LGBMClassifier(\n        objective='binary',\n        metric='binary_logloss',\n        num_leaves=num_leaves,\n        n_estimators=n_estimators, \n        max_depth=max_depth, \n        min_child_samples=min_child_samples, \n        learning_rate=learning_rate,\n        colsample_bytree=colsample_bytree,\n        random_state=seed\n    )\n    \n    return model\n\ndef objective(trial):\n    # Calling The Model\n    model = Create_Model(trial)\n    model.fit(df_train, df_train_labels)\n    score = sklearn.metrics.roc_auc_score(valid_df_labels, model.predict_proba(valid_df)[:,1])\n    return score","9c1e43a1":"fold_models = []\nn_folds = 20\n\n# now apply KFold Model\nfolds = KFold(n_splits = n_folds, shuffle = True)","7133697d":"for train_index, test_index in folds.split(df_train):\n    df_fold_train, df_fold_valid = df_train.iloc[train_index,:], df_train.iloc[test_index,:]\n    \n    fold_train_labels, fold_test_labels = df_train_labels.iloc[train_index].values.ravel(), \\\n                                          df_train_labels.iloc[test_index].values.ravel()\n        \n    lgb_params = {'num_leaves': 28,\n                  'n_estimators': 376,\n                  'max_depth': 8,\n                  'min_child_samples': 202,\n                  'learning_rate': 0.11682677767413432,\n                  'bagging_fraction': 0.5036513634677549,\n                  'colsample_bytree': 0.7519268943195143\n                 }\n\n    cat_params = {'iterations': 15585, \n                  'objective': 'CrossEntropy', \n                  'bootstrap_type': 'Bernoulli', \n                  'od_wait': 1144, \n                  'learning_rate': 0.023575206684596582, \n                  'reg_lambda': 36.30433203563295, \n                  'random_strength': 43.75597655616195, \n                  'depth': 7, \n                  'min_data_in_leaf': 11, \n                  'leaf_estimation_iterations': 1, \n                  'subsample': 0.8227911142845009,\n                  'task_type' : 'GPU',\n                  'devices' : '0',\n                  'verbose' : 0\n                 }\n        \n    # Now Make LGBMC Classifier Model\n    \n    lgbm_model_build = lgb.LGBMClassifier(**lgb_params)\n    \n    # Now Fit the Model\n    lgbm_model_build.fit(df_fold_train, fold_train_labels)\n    \n    # Now Make CatBoost Classifier Model\n    \n    cat_model_build = catboost.CatBoostClassifier(**cat_params)\n    \n    # Now Fit the Model\n    cat_model_build.fit(df_fold_train, fold_train_labels)\n    \n    fold_models.append(lgbm_model_build)\n    fold_models.append(cat_model_build)","9650d207":"lgb.plot_importance(fold_models[0],figsize=(16,32))","4f111291":"all_preds = np.zeros(len(df_test))\n\nfor i in range(len(fold_models)):\n    all_preds += fold_models[i].predict_proba(test_df)[:,1]\n    \nall_preds \/= len(fold_models)\nsubmission_df['Claim'] = all_preds\nsubmission_df.to_csv(\"Submission.csv\", index=False)\n","14941333":"# Now Traning","d8a305bd":"2) df_test features","b0cab90c":"1) df_train features","acc5eef9":"# Now Feature Importance","36a6072b":"# Now Training with Cross-Fold Validation","c888b6ec":"# Now Multi-Fold Model Predictions for Unseen data Also Submmit the data","edd624e2":"# Now Feature engineering and EDA","f4d3aab9":"# Now Filling in Missing Values"}}