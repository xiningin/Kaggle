{"cell_type":{"03906d20":"code","e1960265":"code","b4e9c97d":"code","1d799f44":"code","19a295d4":"code","a18031d8":"code","dacfc2b9":"code","fc609d01":"code","777b68af":"code","f96c1e62":"code","cd902340":"code","944c0677":"code","474b3e97":"code","caf2abba":"code","5f9aa69f":"code","8e3ff886":"code","9c70a849":"code","023f4d4d":"code","ea005bb5":"code","a80f12f6":"code","66c3185b":"markdown","3b4d5243":"markdown","72a1b83e":"markdown","c7290966":"markdown","99aead3e":"markdown","e1a9cf18":"markdown","2dea37be":"markdown","c876ddc9":"markdown","704777ec":"markdown","a10cce3b":"markdown","0f939894":"markdown","a1323d03":"markdown","5da1a545":"markdown"},"source":{"03906d20":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport pickle\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\n\nimport zipfile ","e1960265":"working_dir = '..\/input\/hcd-cropped'\nos.listdir(working_dir)","b4e9c97d":"print('Number of images in train set',len(os.listdir('..\/input\/hcd-cropped\/train')))\nprint('Number of images in test set',len(os.listdir('..\/input\/hcd-cropped\/test')))","1d799f44":"# Load the training data into a DataFrame named 'train'.\ntrain = pd.read_csv(f'..\/input\/hcd-cropped\/train_labels.csv',dtype = 'str')\n\n# Print the shape of the resulting DataFrame.\nprint('Training set size', train.shape)","19a295d4":"# Display the first few rows of the dataframe.\ntrain.head(10) ","a18031d8":"#The id in the csv file does not have .tif extension, let's add it.\ntrain['id'] = train['id'].apply(lambda x:f'{x}.tif')\ntrain.head()","dacfc2b9":"#Let's check the class distribution\ntrain['label'].value_counts()\n#train.label.value_counts() ","fc609d01":"#Let's check the class distribution in proportion\n#y_train = train.label\nround((train.label.value_counts() \/ len(train)).to_frame()*100,2)","777b68af":"#display 16 images\n\nsample = train.sample(n=16).reset_index()\nplt.figure(figsize=(6,6)) # specifying the overall grid size\n\nfor i, row in sample.iterrows():  \n    img = mpimg.imread(f'..\/input\/hcd-cropped\/train\/{row.id}')\n    label = row.label\n    \n    plt.subplot(4,4,i+1)    # the number of images in the grid is 6*6 (16)\n    plt.imshow(img)\n    plt.text(0, -5, f'Class {label}', color='k')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","f96c1e62":"from sklearn.utils import shuffle\n\nsample_size = 80000\ntrain_0 = train[train['label'] == '0'].sample(sample_size, random_state=1)\ntrain_1 = train[train['label'] == '1'].sample(sample_size, random_state=1)\n\n#combine the two dataframe\ntrain_set = pd.concat([train_0, train_1], axis=0).reset_index(drop=True)\n\n#Shuffle\ntrain = shuffle(train_set)\n\ntrain['label'].value_counts()","cd902340":"# Split the dataframe train into two DataFrames named train_df and valid_df. \n\ntrain_df, valid_df = train_test_split(train, test_size=0.20, random_state=1, stratify=train.label)\n\nprint(train_df.shape)\nprint(valid_df.shape)","944c0677":"# Create image data generators for both the training set and the validation set. \n# Here we use the data generators to scale the pixel values by a factor of 1\/255. \n\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","474b3e97":"BATCH_SIZE = 64\n\ntrain_loader = train_datagen.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '..\/input\/hcd-cropped\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid_df,\n    directory = '..\/input\/hcd-cropped\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)","caf2abba":"# Let's determine the number of training and validation batches. \n\nTR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint('Number of batches in the training set:',TR_STEPS)\nprint('Number of batches in the validation set:',VA_STEPS)","5f9aa69f":"np.random.seed(1)\ntf.random.set_seed(1)\n\ncnn_model = Sequential([\n    Conv2D(filters=32, kernel_size=(3,3), padding='same', activation='relu', input_shape=(32,32,3)),\n    Conv2D(filters=32, kernel_size=(3,3), padding='same', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'),\n    Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Flatten(),\n    \n    Dense(128, activation='relu'),\n    Dropout(0.25),\n    Dense(64, activation='relu'),\n    Dropout(0.25),\n    Dense(32, activation='relu'),\n    Dropout(0.25),\n    Dense(16, activation='relu'),\n    Dropout(0.25),\n    BatchNormalization(),\n    Dense(2, activation='softmax')\n])\n \n\ncnn_model.summary()","8e3ff886":"# Define an optimizer and select a learning rate. \n# And then compile the model. \nimport tensorflow as tf\n\nopt = tf.keras.optimizers.Adam(0.0001)\ncnn_model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy',tf.keras.metrics.AUC()])","9c70a849":"%%time \n\nh1 = cnn_model.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 30,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","023f4d4d":"history = h1.history\nprint(history.keys())","ea005bb5":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","a80f12f6":"# save the model and the combined history dictionary to files.\ncnn_model.save('cancer_model_v00.h5')\npickle.dump(history, open(f'cancer_history_v00.pkl', 'wb'))","66c3185b":"# Train Network","3b4d5243":"# Load Training DataFrame","72a1b83e":"# Import Packages","c7290966":"# View Sample of Images","99aead3e":"# Let's balance the target distribution","e1a9cf18":"# Working Directory","2dea37be":"# Display Training Curve","c876ddc9":"# Build Network","704777ec":"# Data Generator","a10cce3b":"# Save Model and History","0f939894":"# Histopathologic Cancer Detection\n## Identify metastatic tissue in histopathologic scans of lymph node sections\u00b6","a1323d03":"# Label Distribution","5da1a545":"# Number of images in the train and test folder"}}