{"cell_type":{"8c6ea909":"code","89fb1f63":"code","289fd04b":"code","fa1c765c":"code","2589589b":"code","133ad7f0":"markdown","34621977":"markdown","f2aa221e":"markdown","f597e093":"markdown","6be52f57":"markdown","2b4d38d7":"markdown","953da8e1":"markdown","a4d07aae":"markdown","068d9420":"markdown","1ac4c51d":"markdown"},"source":{"8c6ea909":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89fb1f63":"data = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndata","289fd04b":"data.info()","fa1c765c":"from sklearn.model_selection import train_test_split\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nscore_cols = ['math score', 'reading score', 'writing score']\nX = data.drop(score_cols, axis = 1)\ny_math, y_reading, y_writing = data[score_cols[0]], data[score_cols[1]], data[score_cols[2]]\n\nX_train_full, X_test_full, y_math_train, y_math_test = train_test_split(X, y_math, test_size = 0.2, random_state = 42)\n\ny_reading_train = y_reading[X_train_full.index]\ny_writing_train = y_writing[X_train_full.index]\ny_reading_test = y_reading[X_test_full.index]\ny_writing_test = y_writing[X_test_full.index]","2589589b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom xgboost import XGBRegressor\n\ncategorical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype == \"object\"]\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\npipeline = ColumnTransformer(\n    transformers=[\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\nX_train = pipeline.fit_transform(X_train_full)\nX_test = pipeline.transform(X_test_full)\n\n\ndef build(y_train, y_test):\n    model = XGBRegressor(n_estimators = 1000, learning_rate = 0.01)\n    model.fit(X_train, y_train, verbose = False)\n\n    preds = model.predict(X_test)\n\n    score = mean_absolute_error(y_test, preds)\n    print('MAE: ', score)\n\nprint('predictions for math score:')\nbuild(y_math_train, y_math_test)\n\nprint('predictions for reading score:')\nbuild(y_reading_train, y_reading_test)\n\nprint('predictions for writing score:')\nbuild(y_writing_train, y_writing_test)","133ad7f0":"# Students Performance in Exams","34621977":"# References","f2aa221e":"This notebook is an exercise for handling categorical data and predicting with XGBRegressor.","f597e093":"https:\/\/www.kaggle.com\/alexisbcook\/xgboost","6be52f57":"XGBRegressor is a potencial model for the further study.","2b4d38d7":"# Split Dataset","953da8e1":"# Build Models","a4d07aae":"# Load Data","068d9420":"# Conclusion","1ac4c51d":"Split the dataset to two parts - training set and testing set, the training set is used for training and cross validating, the testing set is used for the final testing."}}