{"cell_type":{"bb3267ec":"code","8d6eef5f":"code","d23e3d67":"code","7a092fc2":"code","311fcd10":"code","7e69f095":"code","cbcebeea":"code","bf2bf788":"code","f582d112":"code","d520cfb9":"code","23a30372":"code","bd2abe63":"code","90012f5b":"code","4e3f8e73":"code","f9fc436d":"code","3681e391":"markdown","0b9465ad":"markdown","f2d3d4c6":"markdown","6ef744fd":"markdown","0470d25a":"markdown","71309986":"markdown","d3072a14":"markdown","990020d1":"markdown","7fdad4d1":"markdown","d10a2e1c":"markdown","d69d985b":"markdown","3d33a8d9":"markdown","f4acf7f0":"markdown","cf915814":"markdown","949c57f8":"markdown","217cc922":"markdown","2fb61bc0":"markdown","d29e243f":"markdown","aca202ce":"markdown","b5d0abe8":"markdown","96095eb1":"markdown","2b99f9cf":"markdown","1e543102":"markdown"},"source":{"bb3267ec":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","8d6eef5f":"df = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndf = df.fillna('unknow')\ndf.head()","d23e3d67":"df = df.append(df.sum(numeric_only=True), ignore_index=True)\ndf","7a092fc2":"df = df.iloc[df.shape[0] - 1][4:df.shape[1]]\ndf","311fcd10":"split_point = len(df) - 4\ndataset, validation = df[0:split_point], df[split_point:]\nprint('Dataset %d, Validation %d' % (len(dataset), len(validation)))\ndataset.to_csv('dataset.csv', header = False)\nvalidation.to_csv('validation.csv', header = False)","7e69f095":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\n# load data\nseries = pd.read_csv('dataset.csv', header=None, index_col=0, parse_dates=True, squeeze=True)\n# prepare data\nX = series.values\nX = X.astype('float32')\ntrain_size = int(len(X) * 0.50)\ntrain, test = X[0:train_size], X[train_size:]\n# walk-forward validation\nhistory = [x for x in train]\npredictions = list()\nfor i in range(len(test)):\n\t# predict\n\tyhat = history[-1]\n\tpredictions.append(yhat)\n\t# observation\n\tobs = test[i]\n\thistory.append(obs)\n\tprint('>Predicted=%.3f, Expected=%3.f' % (yhat, obs))\n# report performance\nrmse = sqrt(mean_squared_error(test, predictions))\nprint('RMSE: %.3f' % rmse)","cbcebeea":"series.describe()","bf2bf788":"series.plot()","f582d112":"plt.figure(1)\nplt.subplot(211)\nseries.hist()\nplt.subplot(212)\nseries.plot(kind='kde')\nplt.show()","d520cfb9":"from statsmodels.tsa.stattools import adfuller\n\n# create a differenced time series\ndef difference(dataset):\n\tdiff = list()\n\tfor i in range(1, len(dataset)):\n\t\tvalue = dataset[i] - dataset[i - 1]\n\t\tdiff.append(value)\n\treturn pd.Series(diff)\n\n# difference data\nstationary = difference(X)\nstationary.index = series.index[1:]\n# check if stationary\nresult = adfuller(stationary)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n\tprint('\\t%s: %.3f' % (key, value))\n# save\nstationary.to_csv('stationary.csv', header = False)","23a30372":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\nplt.figure()\nplt.subplot(211)\nplot_acf(series, lags=24, ax=plt.gca())\nplt.subplot(212)\nplot_pacf(series, lags=24, ax=plt.gca())\nplt.show()","bd2abe63":"import warnings\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\n# evaluate an ARIMA model for a given order (p,d,q) and return RMSE\ndef evaluate_arima_model(X, arima_order):\n\t# prepare training dataset\n\tX = X.astype('float32')\n\ttrain_size = int(len(X) * 0.50)\n\ttrain, test = X[0:train_size], X[train_size:]\n\thistory = [x for x in train]\n\t# make predictions\n\tpredictions = list()\n\tfor t in range(len(test)):\n\t\tmodel = ARIMA(history, order=arima_order)\n\t\tmodel_fit = model.fit(disp=0)\n\t\tyhat = model_fit.forecast()[0]\n\t\tpredictions.append(yhat)\n\t\thistory.append(test[t])\n\t# calculate out of sample error\n\trmse = sqrt(mean_squared_error(test, predictions))\n\treturn rmse\n\n# evaluate combinations of p, d and q values for an ARIMA model\ndef evaluate_models(dataset, p_values, d_values, q_values):\n\tdataset = dataset.astype('float32')\n\tbest_score, best_cfg = float(\"inf\"), None\n\tfor p in p_values:\n\t\tfor d in d_values:\n\t\t\tfor q in q_values:\n\t\t\t\torder = (p,d,q)\n\t\t\t\ttry:\n\t\t\t\t\trmse = evaluate_arima_model(dataset, order)\n\t\t\t\t\tif rmse < best_score:\n\t\t\t\t\t\tbest_score, best_cfg = rmse, order\n\t\t\t\t\tprint('ARIMA%s RMSE=%.3f' % (order,rmse))\n\t\t\t\texcept:\n\t\t\t\t\tcontinue\n\tprint('Best ARIMA%s RMSE=%.3f' % (best_cfg, best_score))\n\n# evaluate parameters\np_values = range(0,13)\nd_values = range(0, 4)\nq_values = range(0, 13)\nwarnings.filterwarnings(\"ignore\")\nevaluate_models(X, p_values, d_values, q_values)","90012f5b":"best_cfg = (0, 1, 0)","4e3f8e73":"train_size = int(len(X) * 0.50)\ntrain, test = X[0:train_size], X[train_size:]\n# walk-forward validation\nhistory = [x for x in train]\npredictions = list()\nfor i in range(len(test)):\n\t# predict\n\tmodel = ARIMA(history, order=best_cfg)\n\tmodel_fit = model.fit(disp=0)\n\tyhat = model_fit.forecast()[0]\n\tpredictions.append(yhat)\n\t# observation\n\tobs = test[i]\n\thistory.append(obs)\n# errors\nresiduals = [test[i]-predictions[i] for i in range(len(test))]\nresiduals = pd.DataFrame(residuals)\nplt.figure()\nplt.subplot(211)\nresiduals.hist(ax=plt.gca())\nplt.subplot(212)\nresiduals.plot(kind='kde', ax=plt.gca())\nplt.show()","f9fc436d":"from statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.arima_model import ARIMAResults\nfrom scipy.stats import boxcox\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom math import exp\nfrom math import log\nimport numpy\n\n# load and prepare datasets\ndataset = pd.read_csv('dataset.csv', header=None, index_col=0, parse_dates=True, squeeze=True)\nX = dataset.values.astype('float32')\nhistory = [x for x in X]\nvalidation = pd.read_csv('validation.csv', header=None, index_col=0, parse_dates=True, squeeze=True)\ny = validation.values.astype('float32')\n# run model\nmodel = ARIMA(history, order=best_cfg)\nmodel_fit = model.fit(disp=0)\n# make first prediction\npredictions = list()\nyhat = model_fit.forecast()[0][0]\npredictions.append(yhat)\nhistory.append(y[0])\nprint('>Predicted=%.3f, Expected=%3.f' % (yhat, y[0]))\n# rolling forecasts\nfor i in range(1, len(y)):\n  # predict\n  model = ARIMA(history, order=best_cfg)\n  model_fit = model.fit(disp=0)\n  yhat = model_fit.forecast()[0][0]\n  predictions.append(yhat)\n  # observation\n  obs = y[i]\n  history.append(obs)\n  print('>Predicted=%i, Expected=%i' % (yhat, obs))\n# report performance\nrmse = sqrt(mean_squared_error(y, predictions))\nprint('RMSE: %i' % rmse)\n#predict next day\n# predict\nmodel = ARIMA(history, order=(0,1,0))\nmodel_fit = model.fit(disp=0)\nyhat = model_fit.forecast()[0][0]\npredictions.append(yhat)\nprint('>Predicted next day volume=%i' % (yhat))\nplt.plot(y)\nplt.plot(predictions, color='red')\nplt.show()","3681e391":"# Grid search for ARIMA","0b9465ad":"# Review Residual Errors","f2d3d4c6":"We will use a grid search to explore all combinations of the ARIMA parameters and find the best one.","6ef744fd":"## Persistence","0470d25a":"\n\n*   The ACF shows significant lag for 1-2 months\n*   The PACF does not show a significant lag\n\nGood starting point will be p = 1 and q = 0\n\n\n","71309986":"## Validate Model","d3072a14":"## Manually cofigured ARIMA","990020d1":"The first step before getting bogged in modeling is to establish a baseline of performance. This will provide a performance measure by which all more elaborate predictive models can be compared. Persistence is where the observation from the previous step is used as the prediction for the observation at the next time step","7fdad4d1":"Running an example outputs the result of statistical significance test of whether the 1-lag differenced series is stationary. Specifically, the augmented Dickey-Fuller test. The results show that te test static value -3.897 is smaller than the critical value at 5% of -2.992. This suggests we can reject null hypothesis and conclude that 1-lag differenced series is stationary. Then at least one level of differencing is required.  *d* >= 1\n\nThe next step is to select the lag values for the Autoregression (AR) and Moving Average (MA) parameters, *p* and *q* respectively. We can do this by reviewing Autocorrelation Function (ACF) and Partial Autocorrelation Function (PACF).","d10a2e1c":"# ARIMA forecast for Coronavirus confirmed cases volume","d69d985b":"## Line and density plots","3d33a8d9":"The example ends by printing the RMSE for the model. We can see that the persistence model achieved 4762. This means that on average, th model was wrong by about 4762 confirmed coronavirus cases for each prediction made.","f4acf7f0":"## Summary Statistics","cf915814":"A good final check is to review residual forecast errors. Ideally, the distribution should be Gaussian with a zero mean.","949c57f8":"## Dataset","217cc922":"I will analyze and forecast coronavirus confirmed cases volume all over the world. Epidemy started in Wuhan in December 2019. On 2\/11\/2020, the virus is officially named COVID-19 by the World Health Organization.\nData comes from: https:\/\/github.com\/CSSEGISandData\/COVID-19.\n\nFirst we need to transform our dataset into series object containing date and comfirmed cases volumes.","2fb61bc0":"Now we can load the model and use it in a rolling - forecast manner, updating the transform and model for each time step. ","d29e243f":"Predicted number of confirmed coronavirus cases for the next day not available in dataset (currently 21.02) is 78807. A plot of the predictions compared to validation dataset is also provided. The forecast has the characteristics of a presistence forecast. This suggests that although this time serie has obvious tred , it is still reasonably difficult problem. ","aca202ce":"*   There is increasing trend over time which means that the dataset is non-stationary\n\n","b5d0abe8":"As our series object is ready, we will split it into two, one for model development (dataset.csv) and the other for validation - last week(validation.csv)\n","96095eb1":"Running the example provides a number of statistics to review:\n\n*   The mean is about 26213, which we might consider our level in this series\n*   The standard deviation (average spread from the mean) is relatively large at 23240 cases.\n*   The percentiles along ith the standard deviation suggest a large spread to the data\n\n\n\n","2b99f9cf":"\n\n*   The distribution is not Gaussian\n*   The distribution is left shifted and may be exponential or double Gaussian\n\n","1e543102":"ARIMA(p, d, q) requires 3 parameters and is traditionally configured manually. We will try to *guess* probable values, starting from *d*.\n\nThe time series is non-stationary. We can make it stationary by differencing the series."}}