{"cell_type":{"64502cd9":"code","18fe9761":"code","6fd5a1f0":"code","1e5ea7d2":"code","2bad37a4":"code","f66e6997":"markdown","fc3efa95":"markdown"},"source":{"64502cd9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","18fe9761":"# Import helpful libraries\nimport pandas as pd # linear algebra\nimport numpy as np  # data processing\nfrom sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\n# Load the data, and separate the target\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\n\n# Create X (After completing the exercise, you can return to modify this line!)\n#features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nfeatures = [\n    'MSSubClass',\n    'LotArea',\n    'OverallQual',\n    'OverallCond',\n    'YearBuilt',\n    'YearRemodAdd',\n    '1stFlrSF',\n    '2ndFlrSF',\n    'LowQualFinSF',\n    'GrLivArea',\n    'FullBath',\n    'HalfBath',\n    'BedroomAbvGr',\n    'KitchenAbvGr',\n    'TotRmsAbvGrd',\n    'Fireplaces',\n    'WoodDeckSF',\n    'OpenPorchSF',\n    'EnclosedPorch',\n    '3SsnPorch',\n    'ScreenPorch',\n    'PoolArea',\n    'MiscVal',\n    'MoSold',\n    'YrSold'\n]\n# Select columns corresponding to features, and preview the data\nX = home_data[features]\nX.head()\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# Define a random forest model\nrf_model = RandomForestRegressor(random_state=1,n_estimators=700)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(val_X)\n\n# Define a gradient boosting regressor model\ngbr_model = GradientBoostingRegressor(random_state=1,n_estimators=500)\ngbr_model.fit(train_X, train_y)\ngbr_val_predictions = gbr_model.predict(val_X)\n\npredictions = (rf_val_predictions + gbr_val_predictions) \/ 2\n\nnp.sqrt(mean_squared_error(predictions, val_y))","6fd5a1f0":"\nrf_model = RandomForestRegressor(random_state=1,n_estimators=700)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(val_X)\n\ngbr_model = GradientBoostingRegressor(random_state=1,n_estimators=500)\ngbr_model.fit(train_X, train_y)\ngbr_val_predictions = gbr_model.predict(val_X)\n\npredictions = (rf_val_predictions + gbr_val_predictions) \/ 2\n\n# fit rf_model_on_full_data on all data from the training data\nrf_model.fit(X,y)\ngbr_model.fit(X,y)","1e5ea7d2":"# path to file will use for predictions\ntest_data_path = '..\/input\/home-data-for-ml-course\/test.csv'\n\n# read test data file using pandas\ntest_data = pd.read_csv(test_data_path)\ntest_data= test_data.fillna(-1)\n\n# The list of columns is stored in a variable called features\ntest_X = test_data[features]\n\n# make predictions \ntest_preds1 =rf_model.predict(test_X)\ntest_preds1\n\ntest_preds2 =gbr_model.predict(test_X)\ntest_preds2\n\ntest_preds = (test_preds1 + test_preds2) \/ 2\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","2bad37a4":"output.head()","f66e6997":"### Train the model","fc3efa95":"### Validate the model and make predictions"}}