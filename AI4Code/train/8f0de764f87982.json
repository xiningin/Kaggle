{"cell_type":{"8d1aed4e":"code","8758832c":"code","50d918ad":"code","586c28c7":"code","307fa005":"code","2a9ba8ea":"code","8d48b17d":"code","653c480e":"code","299ab7da":"code","5c6f763a":"code","759bf9de":"code","f24915de":"code","abf3edee":"code","fab7da1c":"markdown","f68f997b":"markdown","7f0fef00":"markdown","5693caef":"markdown","e1d6e68b":"markdown","06357e04":"markdown","7b59eb8f":"markdown","6ab69507":"markdown","0579d133":"markdown"},"source":{"8d1aed4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom xlrd import open_workbook\n\nprint(14 * \" >\", \"\\t n.B.a. \\t\", \"< \" * 14, \"\\n\\n\\n\")\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8758832c":"df = pd.ExcelFile(\"\/kaggle\/input\/quiz1.xlsx\")\n\nquiz1_df_sheets = []                                                 # dosya icindeki sheetlerin isimlerinin tutuldugu liste\nquiz1_df_sheet_names = []                                            # data frame haline gelen df_quiz_sheet listesindeki isimlerin tekrar kullanalabilmek icin\ntotal_df_sheetnames = []                                             # quiz1_df_sheets icindeki elemanlarin dataframe hallerinin guncel hali\n\n[quiz1_df_sheets.append(i) for i in df.sheet_names]                  # dosyadaki sheet isimlerini bulur listeye kaydeder\n[quiz1_df_sheet_names.append(i) for i in quiz1_df_sheets]            # sheet isimlerini yedekler\n\nfor i in range(len(quiz1_df_sheets)):                                                                   # sheetleri data frame haline guncelleyerek degistirir\n    quiz1_df_sheets[i] = pd.read_excel(\"\/kaggle\/input\/quiz1.xlsx\", sheet_name=str(quiz1_df_sheets[i]))\n    quiz1_df_sheets[i]['Class'] = [quiz1_df_sheet_names[i] for j in range(len(quiz1_df_sheets[i]))]     # sheetler data frame haline gelirken Class adli bir sutunda ekleniyor\n    total_df_sheetnames.append(quiz1_df_sheets[i])\n\nquiz1_all = pd.concat([i for i in total_df_sheetnames], sort=False)                                   # tum sheetleri tek dataframe haline getirir\nquiz1_all.index = np.arange(1, len(quiz1_all)+1)                                                    # quiz1_all frame sabit index atanmasi yapildi\nquiz1_all.columns = [\"Name\", 'True', 'False', 'Empty', 'Class']                                       # dataframe sutun isimleri degistirildi\nquiz1_all[\"Name\"] = list(map(lambda x: x.lower(), quiz1_all[\"Name\"]))                               # butun isimler duzgun olsun diye kucuk hale getirildi\nquiz1_all.replace(to_replace='Not Entered', value=0, inplace=True)                                    # yani kolonlari 0 ile 'Not Entered' degistirildi\nquiz1_all = quiz1_all.fillna(0)                                                                     # 'NaN' kolonlari 0 ile degistirildi\n\nquiz1_all = quiz1_all[[\"Class\", \"Name\", 'True', 'False', 'Empty']]          # Class sutunu ensondaydi en basa almis olduk. Burada [[]] yapmammizin sebebi dataframe.core donmesi icin\nquiz1_all[\"Name\"] = list(map(lambda x: x.lower(), quiz1_all[\"Name\"]))       # isimlerin hepsini kucuk yapiyoruz\n\nprint(quiz1_all)\n","50d918ad":"mind_exel = open_workbook(\"\/kaggle\/input\/py_mind.xlsx\")\nsense_exel = open_workbook(\"\/kaggle\/input\/py_sense.xlsx\")\nscience_exel = open_workbook(\"\/kaggle\/input\/py_science.xlsx\")\nopinion_exel = open_workbook(\"\/kaggle\/input\/py_opinion.xlsx\")\n\n#the students of classes\nmind_students = mind_exel.sheet_names()\nsense_students = sense_exel.sheet_names()\nscience_students = science_exel.sheet_names()\nopinion_students = opinion_exel.sheet_names()\n\nmind_len = len(mind_students)-1\nsense_len = len(sense_students)-1\nscience_len = len(science_students)-1\nopinion_len = len(opinion_students)-1\n\nmind_sheets = 0\nsense_sheets = 0\nscience_sheets = 0\nopinion_sheets = 0\n\nquiz2_all = pd.DataFrame(columns=(\"Class\", \"Name\", \"True\", \"False\", \"Empty\"), index=None)\n\nwhile mind_sheets < mind_len:\n    mind_sheets += 1\n    mind_ex = pd.read_excel(\"\/kaggle\/input\/py_mind.xlsx\", sheet_name=mind_sheets)\n    mind_results = mind_ex.tail(3)\n    # print(mind_results)\n    class_name = \"py_mind\"\n    name = mind_results.columns[0]\n    true = mind_results.iloc[0,1]\n    # print(true)\n    false = mind_results.iloc[1,1]\n    empty = mind_results.iloc[2,1]\n    student = {'Class': class_name, 'Name': name, 'True': true, 'False': false, \"Empty\": empty}\n    quiz2_all = quiz2_all.append(student, ignore_index=True)\n\nwhile sense_sheets < sense_len:\n    sense_sheets += 1\n    sense_ex = pd.read_excel(\"\/kaggle\/input\/py_sense.xlsx\", sheet_name=sense_sheets)\n    sense_results = sense_ex.tail(3)\n    class_name = \"py_sense\"\n    name = sense_results.columns[0]\n    name = str(name)\n    true = sense_results.iloc[0,1]\n    false = sense_results.iloc[1,1]\n    empty = sense_results.iloc[2,1]\n    student = {'Class': class_name, 'Name': name, 'True': true, 'False': false, \"Empty\": empty}\n    quiz2_all = quiz2_all.append(student, ignore_index=True)\n\nwhile science_sheets < science_len:\n    science_sheets += 1\n    science_ex = pd.read_excel(\"\/kaggle\/input\/py_science.xlsx\", sheet_name=science_sheets)\n    science_results = science_ex.tail(3)\n    class_name = \"py_science\"\n    name = science_results.columns[0]\n    name = str(name)\n    true = science_results.iloc[0,1]\n    false = science_results.iloc[1,1]\n    empty = science_results.iloc[2,1]\n    student = {'Class': class_name, 'Name': name, 'True': true, 'False': false, \"Empty\": empty}\n    quiz2_all = quiz2_all.append(student, ignore_index=True)\n\nwhile opinion_sheets < opinion_len:\n    opinion_sheets += 1\n    opinion_ex = pd.read_excel(\"\/kaggle\/input\/py_opinion.xlsx\", sheet_name=opinion_sheets)\n    opinion_results = opinion_ex.tail(3)\n    class_name = \"py_opinion\"\n    name = opinion_results.columns[0]\n    name = str(name)\n    true = opinion_results.iloc[0,1]\n    false = opinion_results.iloc[1,1]\n    empty = opinion_results.iloc[2,1]\n    student = {'Class': class_name, 'Name': name, 'True': true, 'False': false, \"Empty\": empty}\n    quiz2_all = quiz2_all.append(student, ignore_index=True)\n\n\nquiz2_all[\"Name\"] = list(map(lambda x: x.lower(), quiz2_all[\"Name\"]))                               # isimlerin hepsini kucuk yapiyoruz\n\nprint(quiz2_all)\n\n","586c28c7":"df2 = pd.read_excel(\"\/kaggle\/input\/sinav-2.xlsx\")\n\n# print(df2)\n\nquiz3_all = df2.iloc[1:, 1:6]                                                   # sutunlari daha sade hale getirmek icin kesme yaptik\nquiz3_all.loc[quiz3_all['class'] == 'sense', ['class']] = \"py_sense\"                # sutun isimlerini degistirdik\nquiz3_all.loc[quiz3_all['class'] == 'science', ['class']] = \"py_science\"\nquiz3_all.loc[quiz3_all['class'] == 'mind', ['class']] = \"py_mind\"\nquiz3_all.loc[quiz3_all['class'] == 'opinion', ['class']] = \"py_opinion\"\n\nquiz3_all.rename(columns={\"class\": \"Class\", \"name\": \"Name\", \"true\": \"True\", \"false\": \"False\", \"empty\": \"Empty\"}, inplace=True)          # sutun isimlerini degistik\n\nquiz3_all[\"Name\"] = list(map(lambda x: x.lower(), quiz3_all[\"Name\"]))                               # isimlerin hepsini kucuk yapiyoruz\nprint(quiz3_all)\n\n\n","307fa005":"quiz4_all = pd.read_excel(\"\/kaggle\/input\/uygulamali.xlsx\")\n\n# quiz4_all = quiz4_all.iloc[:, :]\ncolumns = ['1.', '2.',  '3.', '4.',  '5.', '6.', '7.', ]                       # listelerde sonlara virgul koyulmasi tavsiye edilir\nquiz4_all.drop(columns, inplace=True, axis=1)                                  # sutun isimleri olan 1 2 3, ... sildik\nquiz4_all.insert(loc=1, column='False', value=0)                               # diger sinavlardaki sutunlarda true false empty oldugu icin ve burda kullanilmadigindan degeri sifir olan bu sutunlari ekledik\nquiz4_all.insert(loc=2, column='Empty', value=0)\nquiz4_all.rename(columns={\"isim\": \"Name\", \"sinif\": \"Class\", \"total\": \"True\"}, inplace=True)             # sutun isimlerini degistirdik\nquiz4_all = quiz4_all[[\"Class\", \"Name\", 'True', 'False', 'Empty']]                                      # Class sutunu ensondaydi en basa almis olduk. Burada [[]] yapmammizin sebebi dataframe.core donmesi icin\nquiz4_all[\"Name\"] = list(map(lambda x: x.lower(), quiz4_all[\"Name\"]))                                   # isimlerin hepsini kucuk yapiyoruz\n\n\nprint(quiz4_all)\n","2a9ba8ea":"all_quiz = pd.DataFrame(columns=(\"Class\", \"Name\", 'True', 'False', 'Empty'), index=None)\nall_quiz = all_quiz.append(quiz1_all, ignore_index=True)\nall_quiz = all_quiz.append(quiz2_all, ignore_index=True)\nall_quiz = all_quiz.append(quiz3_all, ignore_index=True)\nall_quiz = all_quiz.append(quiz4_all, ignore_index=True)\n\nprint(all_quiz)","8d48b17d":"class_sense = all_quiz[all_quiz[\"Class\"] == \"py_sense\"]                                 # siniflara ayrildi\nclass_science = all_quiz[all_quiz[\"Class\"] == \"py_science\"]\nclass_opinion = all_quiz[all_quiz[\"Class\"] == \"py_opinion\"]\nclass_mind = all_quiz[all_quiz[\"Class\"] == \"py_mind\"]\n\ntrue_mean_sense = class_sense[\"True\"].mean()                                                 # siniflara gore True ortalamalari alindi\ntrue_mean_science = class_science[\"True\"].mean()\ntrue_mean_opinion = class_opinion[\"True\"].mean()\ntrue_mean_mind = class_mind[\"True\"].mean()\n\nfalse_mean_sense = class_sense[\"False\"].mean()                                                 # siniflara gore False ortalamalari alindi\nfalse_mean_science = class_science[\"False\"].mean()\nfalse_mean_opinion = class_opinion[\"False\"].mean()\nfalse_mean_mind = class_mind[\"False\"].mean()\n\nempty_mean_sense = class_sense[\"Empty\"].mean()                                                 # siniflara gore Empty ortalamalari alindi\nempty_mean_science = class_science[\"Empty\"].mean()\nempty_mean_opinion = class_opinion[\"Empty\"].mean()\nempty_mean_mind = class_mind[\"Empty\"].mean()\n\n\nsorting_classes = sorted([true_mean_sense, true_mean_mind, true_mean_science, true_mean_opinion])           # siniflarin dogru siralamalari\n# print(sorting_classes)\n\n# best_class_student_sense = class_sense.sort_values(by=\"True\", ascending=False).head(1)          # en iyi ogrenci burada anlam ifade etmez cunku ad soyad tam girilmemis\n\n\n","653c480e":"print(\"\\n\", 14 * \" >\", \"\\t Standart deviation of Classes \\t\", \"< \" * 14, \"\\n\")\n\n\nstd_sense = np.std([true_mean_sense, false_mean_sense, empty_mean_sense])\nstd_science = np.std([true_mean_science, false_mean_science, empty_mean_science])\nstd_mind = np.std([true_mean_mind, false_mean_mind, empty_mean_mind])\nstd_opinion = np.std([true_mean_opinion, false_mean_opinion, empty_mean_opinion])\nprint(\"py_sense std deviation: \", std_sense, \"\\npy_science std deviation: \", std_science,\n      \"\\npy_mind std deviation: \", std_mind, \"\\npy_opinon std deviation: \", std_opinion)","299ab7da":"y = np.array([true_mean_opinion, true_mean_science, true_mean_mind, true_mean_sense])\nx = np.array([1, 2, 3, 4])","5c6f763a":"\n# bar plot\n\narr = np.arange(5)\nplt.bar(x, y)\nplt.title(\"bar plot for True numbers according to Classes\")\nplt.xlabel(\"x stick\")\nplt.ylabel(\"mean stick\")\nplt.xticks(arr, (' ', \"py_opinion\", \"py_science\", \"py_mind\", \"py_sense\"))              # siniflarin ortalamalari etiket verme x eksenine gore\nplt.show()","759bf9de":"# siniflarin standart sapmalarina gore bar plot grafigi\n\nx = np.array([1, 2, 3, 4])\narr = np.arange(5)\nplt.bar(x, y)\nplt.title(\"Standart deviation bar plot according to Classes\")\nplt.xlabel(\"x stick\")\nplt.ylabel(\"std deviation stick\")\nplt.xticks(arr, (\" \", \"py_mind\", \"py_sense\", \"py_science\", \"py_opinion\"))\nplt.show()","f24915de":"# Siniflarin True sayilarina gore PLOT CIZIMI\n\nplt.plot(all_quiz[all_quiz[\"Class\"] == \"py_mind\"][\"True\"], color=\"red\", label=\"py_mind\")\nplt.plot(all_quiz[all_quiz[\"Class\"] == \"py_sense\"][\"True\"], color=\"blue\", label=\"py_sense\")\nplt.plot(all_quiz[all_quiz[\"Class\"] == \"py_science\"][\"True\"], color=\"black\", label=\"py_science\")\nplt.plot(all_quiz[all_quiz[\"Class\"] == \"py_opinion\"][\"True\"], color=\"green\", label=\"py_opinion\")\nplt.legend()                                                # legend x ve y cubuklarini olusturuyor\nplt.xlabel(\"Classes\")\nplt.ylabel(\"According to True\")\nplt.show()","abf3edee":"### Siniflarin True sayilarina gore SCATTER CIZIMI\n\nplt.scatter(all_quiz[all_quiz[\"Class\"] == \"py_mind\"][\"True\"].index, all_quiz[all_quiz[\"Class\"] == \"py_mind\"][\"True\"], color=\"red\", label=\"py_mind\")\nplt.scatter(all_quiz[all_quiz[\"Class\"] == \"py_sense\"][\"True\"].index, all_quiz[all_quiz[\"Class\"] == \"py_sense\"][\"True\"], color=\"blue\", label=\"py_sense\")\nplt.scatter(all_quiz[all_quiz[\"Class\"] == \"py_science\"][\"True\"].index, all_quiz[all_quiz[\"Class\"] == \"py_science\"][\"True\"], color=\"black\", label=\"py_science\")\nplt.scatter(all_quiz[all_quiz[\"Class\"] == \"py_opinion\"][\"True\"].index, all_quiz[all_quiz[\"Class\"] == \"py_opinion\"][\"True\"], color=\"green\", label=\"py_opinion\")\nplt.legend()\nplt.title(\"Scatter plot\")\nplt.xlabel(\"Classes\")\nplt.ylabel(\"According to True\")\nplt.show()","fab7da1c":"# PyCoders Data Science Team\n\n### The study here has been created by using real data, especially on Numpy.","f68f997b":"### BUTUN quizler birlestirilip tek dosya haline DATAFRAME donusturuldu.","7f0fef00":"### Siniflarina gore True False Empty","5693caef":"### quiz4 OKUMA BASLANGIC","e1d6e68b":"### Standart sapma","06357e04":"##### BUTUN EXCEL DOSYALARININ ICINI OKUYALIM #####","7b59eb8f":"### MATPLOTLIB GRAFIK & GORSELLESTIRME","6ab69507":"### quiz3 SINAV OKUMASI BASLANGIC","0579d133":"### quiz2 SINAV OKUMASI BASLANGIC\n\nquiz2 dosyasinin icindeki bilgiler excel icine bakildiginda kesinlikle quiz1 den farkli doldurulmus dolayisiyla etap etap dataframe donusturmeliyiz"}}