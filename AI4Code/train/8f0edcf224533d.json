{"cell_type":{"37ea6027":"code","65561684":"code","4b40ae96":"code","a1eda2f0":"code","bc1ce95e":"code","daa8a751":"code","677cb7c8":"code","542d3d31":"code","965ca054":"code","64269920":"code","52c8e8f3":"code","27a4512b":"code","ce9f0322":"code","9fd2328c":"code","63c79269":"code","2f6b2b6a":"code","a6dbe6ae":"code","61ae591a":"code","c12f87e5":"code","537e43a4":"code","714c2912":"code","30ffc9f1":"code","90ad6c2a":"code","0aea1d5d":"code","69b51c80":"code","da462b04":"code","e77e9608":"code","2d8cfc0d":"code","c86a46d9":"code","0153b7b4":"code","bfd3419e":"code","fb42ea38":"code","e8b5721c":"code","17983b8d":"code","20817d3d":"code","46da140d":"code","ba18aa4d":"code","f28f3818":"code","595def15":"code","7ec9d91c":"code","e1de3b4d":"code","31fb6715":"code","4895daba":"code","1161a109":"code","5b67d422":"code","efa88796":"code","81723c28":"code","735aa23d":"markdown","da4943a1":"markdown","7de85ad5":"markdown","28551730":"markdown","c55ee738":"markdown","d5a9802f":"markdown","5b61b642":"markdown","59bcebae":"markdown","b221a2b3":"markdown","035e1ef0":"markdown","37fceb21":"markdown","31ee868f":"markdown","35b2e765":"markdown","388fc500":"markdown","1dbb7e93":"markdown","6286eba8":"markdown","657f22bd":"markdown","57021eda":"markdown","9dfa6d0f":"markdown","9ea06b9c":"markdown","8d05bf95":"markdown","2a2fc918":"markdown","fbef7299":"markdown","04c7c700":"markdown","f174be6f":"markdown","d0b05598":"markdown","daa30312":"markdown","4ce08b6a":"markdown","5a99100c":"markdown","a80716e8":"markdown","c1160593":"markdown","4533eaa8":"markdown","27272590":"markdown","7a7a08ca":"markdown","d5e865be":"markdown","2664f82c":"markdown","fe929273":"markdown","8915651f":"markdown","bd484608":"markdown","b222cd2a":"markdown","35a6184c":"markdown","aa8194e1":"markdown","69c83e51":"markdown","d75a9908":"markdown","5de1f42e":"markdown","55d7c35e":"markdown","91f37dba":"markdown","6fc62e4e":"markdown","54d5c756":"markdown","cb6ac31b":"markdown","1837efd1":"markdown"},"source":{"37ea6027":"# Analysis and Mathematical  Libraries\nimport numpy as np\n\nimport pandas as pd\n\n# Visualizations Libraries\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\n# DateTime Libraries\nimport time, datetime\n\n# Escape Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","65561684":"# Read the data of UBER \n# Here file is CSV i.e Comma Seperated Values\n#df is a variable\n#encoding = 'latin1'Fixing encoding errors in Pandas\n#In fact, Pandas assumes that text is in UTF-8 format, because it is so common.\n#In this case, as the filename suggests, the bytes for the text are in Latin 1 encoding.\n#We can tell Pandas about this with the encoding= option: \n\ndf = pd.read_csv('..\/input\/uber-drives-dataset\/My Uber Drives - 2016.csv')\ndf.head(3)","4b40ae96":"df.columns = df.columns.str.replace(\"*\",\"\")","a1eda2f0":"df.tail(1)","bc1ce95e":"df.info()","daa8a751":"df.shape","677cb7c8":"print(\"There are {} rows and {} columns are present in the Data Set\".format(df.shape[0],df.shape[1]))","542d3d31":"df.describe()","965ca054":"df.isnull().sum()","64269920":"#visualizing the null values for each attribute\nplt.figure(figsize=(10,5)) \nsns.heatmap(df.isnull(),cmap='magma',yticklabels=False,cbar=False)\nplt.show()","52c8e8f3":"#visualizing the null values for each attribute\n\n\nimport missingno as msno\n\nmsno.bar(df)\nplt.show()","27a4512b":"null_columns=df.columns[df.isnull().any()]\ndf[null_columns].isnull().sum()","ce9f0322":"df.drop(index = 1155, axis = 0, inplace = True)","9fd2328c":"df.isnull().sum()\n","63c79269":"df[\"PURPOSE\"].isnull().sum()\/len(df)\n\n\n","2f6b2b6a":"# filling a null values using fillna() \n#ffill means forwadrd fill   (  non-null values forward)\ndf[\"PURPOSE\"].fillna(method='ffill', inplace = True) ","a6dbe6ae":"df.isnull().sum()\n","61ae591a":"df['START_DATE']= pd.to_datetime(df['START_DATE'],errors='coerce')\ndf['END_DATE']= pd.to_datetime(df['END_DATE'],errors='coerce')\ndf.info();\n\n\n# Now time object type changes to datetime","c12f87e5":"import missingno as msno\nmsno.bar(df)\nplt.show()","537e43a4":"df.columns","714c2912":"df['START_DATE']= pd.to_datetime(df['START_DATE'],errors='coerce')\ndf['END_DATE']= pd.to_datetime(df['END_DATE'],errors='coerce')\ndf.info();\n\n\n# Now time object type changes to datetime","30ffc9f1":"\nCategory =pd.crosstab(index=df['CATEGORY'],columns='Count of travels as per category')\n\nCategory.plot(kind='bar',color='r',alpha=0.7)\nplt.legend()\nCategory\n","90ad6c2a":"Start_point = df.START.value_counts()\nStart_point\nprint(Start_point[Start_point > 10])\n\n\nStart_point[Start_point > 10].plot(kind = \"pie\", shadow=True, startangle=190)\nplt.tight_layout()\nplt.show()\n","0aea1d5d":"Start_point = df.START.value_counts()\nStart_point\nStart_point[Start_point <=  10]","69b51c80":"Stop_point = df.STOP.value_counts()\nStop_point\nStop_point[Stop_point >=  10]","da462b04":"Stop_point = df.STOP.value_counts()\nStop_point\nStop_point[Stop_point <=  10]","e77e9608":"Miles = df.MILES.value_counts()\nMiles\nprint(Miles[Miles> 10])\n\n\nMiles[Miles> 10].plot(kind = \"bar\")\nplt.tight_layout()\nplt.show()\n","2d8cfc0d":"\n\nMiles =pd.crosstab(index=df[\"MILES\"]>10,columns='Count of Miles')\n\nMiles.plot(kind='bar',color='r',alpha=0.7)\nplt.legend()\nMiles\n","c86a46d9":"print(df.PURPOSE.value_counts())","0153b7b4":"plt.figure(figsize=(15,6))\nsns.countplot(df['PURPOSE'], order=df['PURPOSE'].value_counts().index, palette='viridis')\nplt.show()","bfd3419e":"# For future Analysis\n\n\n# Lets calculate the duration, as there might be some relation of it to PURPOSE of Cab ride.\ndf['MINUTES'] = df.END_DATE - df.START_DATE\ndf.head(3)","fb42ea38":"# As Duration is in datetime format, we need to convert it to float type in order to use it for analysis.\ndf['MINUTES'] = df['MINUTES'].dt.total_seconds() \/60\ndf.head()","e8b5721c":"pd.DataFrame({'MEAN': df.groupby(['PURPOSE'])['MILES'].mean().round(1), \n              'MIN' : df.groupby(['PURPOSE'])['MILES'].min(), \n              'MAX' : df.groupby([\"PURPOSE\"])['MILES'].max()}).reset_index()","17983b8d":"plt.figure(figsize=(16,7))\nplt.subplot(1,2,1)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MILES)\nplt.xticks(rotation=45)\nplt.subplot(1,2,2)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MINUTES)\nplt.xticks(rotation=45);","20817d3d":"plt.figure(figsize=(16,7))\nplt.subplot(1,2,1)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MILES,showfliers=False)\nplt.xticks(rotation=45)\nplt.subplot(1,2,2)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MINUTES,showfliers=False)\nplt.xticks(rotation=45);","46da140d":"# For this purpose, we need to make a function\nplt.figure(figsize=(8,5))\ndef round(x):\n    if x['START'] == x['STOP']:\n        return 'YES'\n    else:\n        return 'NO'\n    \ndf['ROUND_TRIP'] = df.apply(round, axis=1)\n\nsns.countplot(df['ROUND_TRIP'], order=df['ROUND_TRIP'].value_counts().index, palette='rocket_r')\nplt.show()","ba18aa4d":"df['MONTH'] = pd.DatetimeIndex(df['START_DATE']).month","f28f3818":"dic = {1:'Jan', 2: 'Feb', 3: 'Mar', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'Aug', 9: 'Sep',\n      10: 'Oct', 11: 'Nov', 12: 'Dec' }\n\ndf['MONTH'] = df['MONTH'].map(dic)\n\n\n\n# MAP FUNCTION : Its a build in function\n#       1. This function is used to apply a function to all the elements of a sequence(list,tuple.strings) \n","595def15":"plt.figure(figsize=(12,7))\nsns.countplot(df['MONTH'], order=df['MONTH'].value_counts().index, palette='deep')\nplt.axhline(df['MONTH'].value_counts().mean(),linestyle='--', color = 'darkred', label='Mean Trips across Months')\nplt.legend()\nplt.show()","7ec9d91c":"plt.figure(figsize=(12,7))\na=sns.countplot(df['ROUND_TRIP'],hue=df['MONTH'])\nplt.legend(bbox_to_anchor=(1.05, 0.95), loc=2)\nplt.show()","e1de3b4d":"plt.figure(figsize=(16,7))\nplt.subplot(1,2,1)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MILES, showfliers = False)\nplt.xticks(rotation = 45)\nplt.subplot(1,2,2)\nsns.boxplot(data=df, x=df.PURPOSE, y=df.MINUTES, showfliers = False)\nplt.xticks(rotation = 45);","31fb6715":"#Plots of MILES with respect to MINUTES\n\n\n\nplt.figure(figsize = (14,5))\nplt.subplot(1,2,1)\nsns.lineplot(data=df, x=df.MINUTES, y=df.MILES)\nplt.grid(True, linestyle = \"--\")\nplt.subplot(1,2,2)\nsns.scatterplot(data=df, x=df.MINUTES, y=df.MILES)\nplt.grid(True, linestyle = \"--\")","4895daba":"# cab rides took more time for less distance.\n\nplt.figure(figsize = (16,5))\n\nplt.subplot(1,2,1)\nn, bins, patches = plt.hist(df.MINUTES)\nplt.xticks(bins.round())\nplt.grid(True, linestyle = \"dotted\")\nplt.title(\"Count of Cab ride MINUTES\")\n\nplt.subplot(1,2,2)\nn, bins, patches = plt.hist(df.MILES)\nplt.xticks(bins.round())\nplt.grid(True, linestyle = \"dotted\")\nplt.title(\"Count of Cab ride MILES\");","1161a109":"plt.figure(figsize = (9,5))\nsns.countplot(data=df,x=\"PURPOSE\", hue = 'CATEGORY', dodge = False)\nplt.xticks(rotation = 45);","5b67d422":"plt.figure(figsize = (15,4))\npd.Series(df['START']).value_counts()[:25].plot(kind=\"bar\")\nplt.title(\"Cab Rides START Location frequency\")\nplt.xticks(rotation = 45);","efa88796":"plt.figure(figsize=(15,4))\npd.Series(df['STOP']).value_counts()[:25].plot(kind = \"bar\")\nplt.title(\"Cab Rides STOP Location frequency\")\nplt.xticks(rotation = 45);","81723c28":"g = sns.factorplot(x=\"PURPOSE\", y=\"MILES\", hue=\"CATEGORY\", data=df,\n                   size=15, kind=\"bar\", palette=\"muted\")\n#from the graph is clearly seen that the main contributors for miles are:\n#in Business category: meetings and customer; private: commute and charity \ng.fig.suptitle('Miles was earned per category and purpose', fontsize= 25)\ng.fig.set_size_inches(15, 5)\ng.set_xlabels('PURPOSE', fontsize= 20)\ng.set_ylabels('MILES', fontsize= 20)","735aa23d":"**Above pie chart can understand that, Cary, Unknown Location Morrisville ,Whitebridge are highest satrting point**","da4943a1":"**Above information says Miles is float tye and rest of columns are objective**","7de85ad5":"### Which are the places are having HIGHEST STOP point","28551730":"#### Lets Do Preprocess on cloumns","c55ee738":"### Purpose of most cab rides","d5a9802f":"### Which are the places are having LOWEST START point","5b61b642":"**Boxplots of MILES and MINUTES based on PURPOSE without outliers**","59bcebae":"**Note**\n\n> The places where Cary , Unknown Loccation, Morrisville , Whitebridge and next to Islamabad are highest stop points.\n> Highest stop points are not same as Highest end points , there is a bit difference","b221a2b3":"### Distribution of Cab rides based on Category\n","035e1ef0":"## Analysis and Visualization","37fceb21":"> **Above are the lowest stop points**\n","31ee868f":"### Entering Month Name and evaluating Frequency of Trip in each Month","35b2e765":"**Here we can see that 43% of null values present in the dataset in PURPOSE COLUMN.**","388fc500":"### MILES MOST","1dbb7e93":"**we see that our conventional logic, that distance is proportional to time, is challenged as some cab rides took more time for less distance.**","6286eba8":"**Below you can see columns are clear in manner , there is no any special character**","657f22bd":"## <font color='Blue' face='Cursive'> Importing DataSet <\/font>","57021eda":"## Handling Missing Values\n\n- There are broadly divide into two ways to treat missing values\n- 1. Delete --> Delete the missing values\n\n- 2.impute --> \n>- imputting by a simple static: Replace the missing values by another value according to MEAN,MEDIAN,MODE\n>- Predictive Techniques: Use statitical models such as K-NN,SVM etc to predict and replace missing values\n> fillna\n\n\n- otherwise deletion is often safer and recongineed . You may loose data but will not make false predections\n- Caution : Always have backup of the orginal data .if you are deleting missing values\n","9dfa6d0f":"- **head()**Understand your data using the head() function to look at the first few rows.\n- **shape()**Review the dimensions of your data with the shape property.\n- **info()**To know the information aboutvthe data\n- **Dtyes** Look at the data types for each attribute with the dtypes property.\n- **describe**Review the distribution of your data with the describe() function.\n- **Correlation** Calculate pairwise correlation between your variables using the corr() function.","9ea06b9c":"**Now you can see there is no missing values visually**","8d05bf95":"### How many miles was earned per category and purpose ?","2a2fc918":"**There are very less number of ROUND Trips.** so(yes is low numb i.e round trip)","fbef7299":"<b> The data set is in csv format and can be imported using [read_csv](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html) method available in pandas library. Since this is original copy giving it a relevent name when importing. <br><br> <\/b>\n\nAlso we will be checking whether the data set is correctly imported by checking the top5 rows of data set","04c7c700":"#### Is the distance proportional to the duration?","f174be6f":"#### Import Libraries","d0b05598":"**Describing Importing Libraries**","daa30312":"**Above Purpose column has 502 null values its a categorial**","4ce08b6a":"**Greater than 10 miles**","5a99100c":"## Frequency of Cab Rides STOP","a80716e8":"**Grouping Purpose by Miles to see if we can get any pattern.**","c1160593":"**The above plot makes clear distinction on the Purpose of Business rides and Personal rides.\nThis may give insight to cab aggregators to decide which sector to introduce new cabs in.**","4533eaa8":"**Checking how many are the ROUND TRIPS i.e. start and stop points are same**","27272590":"###  How does the PURPOSE of Cab ride vary with time and distance?","7a7a08ca":"### Where do customers most frequently take cabs?\n> **Frequency of Cab Rides START**","d5e865be":"#### Dataset Content\n- **Geography:** USA, Sri Lanka and Pakistan\n\n- **Time period:** January - December 2016\n\n- **Unit of analysis:** Drives\n\n- **Total Drives:** 1,155\n\n- **Total Miles:** 12,204\n","2664f82c":"### Which are the places are having LOWEST STOP point","fe929273":"**Round Trip against Months**","8915651f":"# Conclusion\n\n> - Most of the cab rides are within a distance of 31 miles taking about 34 minutes.\n> - Business Cab rides are not only more in volume, but also in distance travelled.\n> - Main uses of cab rides are Meal\/Entertainment, Customer visit, Meeting, Errand\/Supplies.\n> - Cab traffic is mostly concentrated in 5 cities or localities.\n> - Ac seasonal pattern of cab ride volume exists, which is highest on December.","bd484608":"**When are cab rides more popular (frequently used)?**","b222cd2a":"**Only Numerical and float data can be describe. Here we can see the mean, median , mode, standard deviation**","35a6184c":"\n\n**Above are start_pont are low number of starting points**","aa8194e1":"#### Start Date and End Date \n> Since the Date and Time  of the start_date and end_date are of data type object we are converting it to datetime","69c83e51":"### Which are the places have HIGHEST START points","d75a9908":"**Here we can see that, Columns having special characters  we must remove special characters like '*'.**\n\n> We do that using the below function.","5de1f42e":"**Grouping Purpose by Miles to see if we can get any pattern.**","55d7c35e":"\n### Lets calculate the duration, as there might be some relation of it to PURPOSE of Cab ride.","91f37dba":"### Exploratory data analysis (EDA)","6fc62e4e":"### Data Analysis\n\n**PANDAS :**\n    - Pandas provide high performance, fast, easy to use data structures and data analysis tools for manipulating numeric data and time series. Pandas is built on the numpy library and written in languages like Python, Cython, and C. In pandas, we can import data from various file formats like JSON, SQL, Microsoft Excel, etc.\n**NUMPY:**\n       - It is the fundamental library of python, used to perform scientific computing. It provides high-performance multidimensional arrays and tools to deal with them. A numpy array is a grid of values (of the same type) that are indexed by a tuple of positive integers, numpy arrays are fast, easy to understand, and give users the right to perform calculations across arrays.\n       \n       \n ### Data Visualizations\n - Data Visualization is the graphic representation of data. It converts a huge dataset into small graphs, thus aids in data analysis and predictions\n       \n**MATPLOTLIB**\n- It is a Python library used for plotting graphs with the help of other libraries like Numpy and Pandas. It is a powerful tool for visualizing data in Python. It is used for creating statical interferences and plotting 2D graphs of arrays\n\n**SEABORN:**\n- It is also a Python library used for plotting graphs with the help of Matplotlib, Pandas, and Numpy. It is built on the roof of Matplotlib and is considered as a superset of the Matplotlib library. It helps in visualizing univariate and bivariate data","54d5c756":"### Dataset Description: \n > **The dataset contains Start Date, End Date, Start Location, End Location, Miles Driven and Purpose of drive (Business, Personal, Meals, Errands, Meetings, Customer Support etc.)**","cb6ac31b":"###  BOX Plot for better Visualization\n> BOX plot of MILES and MINUTES split by PURPOSE","1837efd1":"#### Missingo :\n\n  >          Missingno is a library for visualizing incompleteness in a dataset, it works on top of Matplotlib\n         and Seaborn, and it\u2019s effortless to use\n           "}}