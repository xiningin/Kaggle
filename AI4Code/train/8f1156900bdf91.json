{"cell_type":{"b714bd83":"code","e2a14606":"code","26a9e072":"code","01fa2e91":"code","e5c66ffa":"code","f7808c6d":"code","3912b0d8":"code","8af46a69":"code","9b70499d":"code","892529b9":"code","a541552e":"code","099bade5":"code","0da11e1a":"code","bd03ae22":"code","8da08ae2":"code","ba1b4107":"code","3413cdf0":"code","8611daa1":"code","d3d53c19":"code","b54a8de3":"code","15346517":"code","271f4b53":"code","1817c7b6":"code","050b2383":"code","2181823f":"code","9cb0e8ab":"code","fecec391":"code","3b6ee2ff":"code","c063132e":"code","0736734f":"code","ff267684":"code","a2a66b35":"code","68b4f401":"code","9742cde0":"code","61916e50":"code","9f725a9f":"code","70cad63e":"code","faca7e26":"code","ad40b8a5":"markdown","a0df1a6a":"markdown","6e80a8f8":"markdown","a6df5200":"markdown","6b00a2f1":"markdown","32f59bf1":"markdown","f19fabf7":"markdown","0264e339":"markdown","35e62f6c":"markdown","7c2b71b2":"markdown","dd68e14f":"markdown","620f0327":"markdown","b07824bf":"markdown","3cf798db":"markdown","e2e92add":"markdown","aeab82c8":"markdown","43a93017":"markdown","fb51e971":"markdown","7d4b5200":"markdown","3b8829a6":"markdown","61c414cd":"markdown","d027fddc":"markdown","5ba3c0b0":"markdown","6caf4c0a":"markdown","a656db09":"markdown","285575bc":"markdown","49b395c9":"markdown","21d3386c":"markdown","3c027049":"markdown","b049aca3":"markdown","b2d64274":"markdown","e50c37d8":"markdown","63358a0a":"markdown","9f858c78":"markdown","32eda52c":"markdown","fc8fb93f":"markdown"},"source":{"b714bd83":"!pip install plotly\n!pip install Lifetimes","e2a14606":"import os\nimport warnings\nimport pandas as pd \nimport numpy as np\nimport datetime as dt\n\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\nfrom lifetimes.plotting import plot_period_transactions\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn import metrics\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\n\nwarnings.filterwarnings('ignore')\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","26a9e072":"df = pd.read_csv('\/kaggle\/input\/ecommerce-data\/data.csv', header= 0, encoding= 'unicode_escape')\ndf.head()","01fa2e91":"def check_df(dataframe, head=5):\n    print(\" SHAPE \".center(70,'#'))\n    print('Rows: {}'.format(dataframe.shape[0]))\n    print('Columns: {}'.format(dataframe.shape[1]))\n    print(\" TYPES \".center(70,'#'))\n    print(dataframe.dtypes)\n    print(\" HEAD \".center(70,'#'))\n    print(dataframe.head(head))\n    print(\" TAIL \".center(70,'#'))\n    print(dataframe.tail(head))\n    print(\" MISSING VALUES \".center(70,'#'))\n    print(dataframe.isnull().sum())\n    print(\" QUANTILES \".center(70,'#'))\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \ncheck_df(df)","e5c66ffa":"world_map = df[['CustomerID', 'InvoiceNo', 'Country']].groupby(['CustomerID', 'InvoiceNo', 'Country']).count()\nworld_map = world_map.reset_index(drop = False)\ncountries = world_map['Country'].value_counts()\ndata = dict(type='choropleth',\n            locations = countries.index,\n            locationmode = 'country names',\n            z = countries,\n            text = countries.index,\n            colorbar = {'title':'Orders'},\n            colorscale='Plasma',\n            reversescale = False)\n\nlayout = dict(title={'text': \"Number of Orders by Countries\",\n                     'y':0.9,\n                     'x':0.5,\n                     'xanchor': 'center',\n                     'yanchor': 'top'},\n              geo = dict(resolution=50,\n                         showocean=True,\n                         oceancolor=\"LightBlue\",\n                         showland=True,\n                         landcolor=\"Gray\",\n                         showframe = True),\n             template = 'plotly_white')\n\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap, validate=False)","f7808c6d":"def desc_stats(dataframe):\n    desc = dataframe.describe().T\n    desc_df = pd.DataFrame(index= dataframe.columns, \n                           columns= desc.columns,\n                           data= desc)\n    \n    f,ax = plt.subplots(figsize=(10,\n                                 desc_df.shape[0]*0.78))\n    sns.heatmap(desc_df,\n                annot=True,\n                cmap = \"Wistia\",\n                fmt= '.2f',\n                ax=ax,\n                linecolor='white',\n                linewidths = 1.3,\n                cbar = False,\n                annot_kws={\"size\": 12})\n    plt.xticks(size = 18)\n    plt.yticks(size = 14,\n               rotation = 0)\n    plt.title(\"Descriptive Statistics\", size = 14)\n    plt.show()\n    \ndesc_stats(df[[col for col in df.columns if df[col].dtype != 'O']])","3912b0d8":"df.dropna(inplace=True)\nprint('Missing Values: {}'.format(df.isnull().sum().sum()))","8af46a69":"df = df[~df[\"InvoiceNo\"].str.contains(\"C\", na=False)]\ndf = df[df[\"Quantity\"] > 0]","9b70499d":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n    \nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"UnitPrice\")","892529b9":"df[\"TotalPrice\"] = df[\"Quantity\"] * df[\"UnitPrice\"]\n\ndesc_stats(df[[col for col in df.columns if df[col].dtype != 'O']])","a541552e":"df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\nprint(df['InvoiceDate'].max())","099bade5":"today_date = dt.datetime(2011,12,11)\n\nrfm = df.groupby('CustomerID').agg({'InvoiceDate': lambda invoice_date: (today_date - invoice_date.max()).days,\n                                    'InvoiceNo': lambda invoice: invoice.nunique(),\n                                    'TotalPrice': lambda total_price: total_price.sum()})\n\nrfm.columns = ['recency','frequency','monetary']\nrfm['monetary'] = rfm[rfm['monetary'] > 0]\nrfm = rfm.reset_index()\nrfm.head()","0da11e1a":"rfm['recency_score'] = pd.qcut(rfm['recency'],5,labels=[5,4,3,2,1])\n\nrfm['frequency_score'] = pd.qcut(rfm['frequency'].rank(method=\"first\"),5,labels=[1,2,3,4,5])\n\nrfm['monetary_score'] = pd.qcut(rfm['monetary'],5,labels=[1,2,3,4,5])\n\nrfm['RFM_SCORE'] = (rfm['recency_score'].astype(str)+ rfm['frequency_score'].astype(str))","bd03ae22":"seg_map = {r'[1-2][1-2]': 'hibernating',\n           r'[1-2][3-4]': 'at_Risk',\n           r'[1-2]5': 'cant_loose',\n           r'3[1-2]': 'about_to_sleep',\n           r'33': 'need_attention',\n           r'[3-4][4-5]': 'loyal_customers',\n           r'41': 'promising',\n           r'51': 'new_customers',\n           r'[4-5][2-3]': 'potential_loyalists',\n           r'5[4-5]': 'champions'}\n\nrfm['segment'] = rfm['RFM_SCORE'].replace(seg_map, regex=True)\nrfm.head()","8da08ae2":"rfm[['recency','monetary','frequency','segment']].groupby('segment').agg({'mean','std','max','min'})","ba1b4107":"data = go.Bar(y = pd.DataFrame(rfm['segment'].value_counts()).index,\n              x = pd.DataFrame(rfm['segment'].value_counts())['segment'].values,\n              name = str(pd.DataFrame(rfm['segment'].value_counts())['segment'].values),\n              orientation='h')\n\nlayout = go.Layout(title={'text': \"Number of Customer by Segments\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis =dict(title='Customers'),\n                   template = 'plotly_white')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_xaxes(range=[0,1300])\niplot(fig)","3413cdf0":"fig = go.Figure()\nfor i in rfm['segment'].unique():\n    fig.add_trace(go.Scatter(x=rfm[rfm['segment']==i]['recency'],\n                           y=rfm[rfm['segment']==i]['frequency'],\n                           mode='markers', name=str(i),showlegend = True,\n                           marker = dict(size = 10,opacity = 0.6)))\n\nfig.update_layout(title={'text': \"Recency & Frequency by Segments\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  legend=dict(x=0.8,\n                              y=1,\n                              bgcolor='rgba(255, 255, 255, 0)'),\n                  xaxis = dict(title='Recency'),\n                  yaxis=dict(title='Frequency'),\n                  template='plotly_white')\n\nfig.show()","8611daa1":"kmeans_data = rfm.loc[:,['recency_score','frequency_score']]\n\ninertia=[]\nk = [1,2,3,4,5,6,7,8,9]\nfor i in k:\n    kmean=KMeans(n_clusters=i)\n    kmean.fit(kmeans_data)\n    inertia.append(kmean.inertia_)\n    \ndata = go.Scatter(x=k, y=inertia,mode='lines+markers',marker=dict(size=10))\n\nlayout = go.Layout(title={'text': \"Elbow Method\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   width=650,\n                   height=470,\n                   xaxis = dict(title='Number of Clusters'),\n                   yaxis =dict(title='Sum of Squared Distance'),\n                   template = 'plotly_white')\n\nfig =go.Figure(data=data,layout=layout)\niplot(fig)","d3d53c19":"kmeans = KMeans(n_clusters = 3,random_state = 42)\nkmeans.fit(kmeans_data)\nprint('Silhouette Score: {}'.format(round(metrics.silhouette_score(kmeans_data, kmeans.labels_),3)))","b54a8de3":"rfm['k_means_segment'] = kmeans.labels_\nrfm['k_means_segment'] = rfm['k_means_segment'].astype(str)\nrfm[['recency','monetary','frequency','k_means_segment']].groupby('k_means_segment').agg({'mean','std','max','min'})","15346517":"data = go.Bar(y = pd.DataFrame(rfm['k_means_segment'].value_counts()).index,\n              x = pd.DataFrame(rfm['k_means_segment'].value_counts())['k_means_segment'].values,\n              name = str(pd.DataFrame(rfm['k_means_segment'].value_counts())['k_means_segment'].values),\n              orientation='h')\n\nlayout = go.Layout(title={'text': \"Number of Customer by K-Means Segments\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis =dict(title='Customers'),\n                   template = 'plotly_white')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_xaxes(range=[0,1900])\niplot(fig)","271f4b53":"fig = make_subplots(rows=2,cols=3)\n\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='0']['recency'],showlegend=False,\n                     name = '0',marker_color='#1760E1'),row=1,col=1)\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='1']['recency'],showlegend=False,\n                     name = '1',marker_color='#EB1919'),row=1,col=2)\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='2']['recency'],showlegend=False,\n                     name = '2',marker_color='#E8EB19'),row=1,col=3)\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='0']['frequency'],showlegend=False,\n                     name = '0',marker_color='#1760E1'),row=2,col=1)\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='1']['frequency'],showlegend=False,\n                     name = '1',marker_color='#EB1919'),row=2,col=2)\nfig.add_trace(go.Box(y =rfm[rfm['k_means_segment']=='2']['frequency'],showlegend=False,\n                     name = '2',marker_color='#E8EB19'),row=2,col=3)\n\nfig.update_layout(title={'text': \"Frequency & Recency by K-Means Segments\",'y':0.9,'x':0.5,'xanchor': 'center',\n        'yanchor': 'top'},template='plotly')\n\nfig.update_yaxes(title_text=\"Recency\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=2, col=1)\niplot(fig)","1817c7b6":"cltv_df = df.groupby('CustomerID').agg({'InvoiceDate': [lambda invoice_date: (invoice_date.max() - invoice_date.min()).days,\n                                                        lambda invoice_date: (today_date - invoice_date.min()).days], \n                                        'InvoiceNo': lambda invoice: invoice.nunique(),\n                                        'TotalPrice': lambda total_price: total_price.sum()})\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\ncltv_df.head()","050b2383":"cltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]","2181823f":"cltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7","9cb0e8ab":"cltv_df = cltv_df[(cltv_df['frequency'] > 1)]","fecec391":"bgf = BetaGeoFitter(penalizer_coef=0.001) #avoid overfitting\n\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['T'])","3b6ee2ff":"bgf.conditional_expected_number_of_purchases_up_to_time(1,\n                                                        cltv_df['frequency'],\n                                                        cltv_df['recency'],\n                                                        cltv_df['T']).sort_values(ascending=False).head(10)","c063132e":"bgf.conditional_expected_number_of_purchases_up_to_time(4,\n                                                        cltv_df['frequency'],\n                                                        cltv_df['recency'],\n                                                        cltv_df['T']).sort_values(ascending=False).head(10)","0736734f":"bgf.predict(4,\n            cltv_df['frequency'],\n            cltv_df['recency'],\n            cltv_df['T']).sum()","ff267684":"plot_period_transactions(bgf)\nplt.show()","a2a66b35":"ggf = GammaGammaFitter(penalizer_coef=0.01)\n\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])","68b4f401":"ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                        cltv_df['monetary']).sort_values(ascending=False).head(10)","9742cde0":"cltv = ggf.customer_lifetime_value(bgf,cltv_df['frequency'],\n                                   cltv_df['recency'],cltv_df['T'],\n                                   cltv_df['monetary'],time=6,\n                                   freq=\"W\",discount_rate=0.01)","61916e50":"cltv = cltv.reset_index()\ncltv.sort_values(by=\"clv\", ascending=False).head(10)","9f725a9f":"scaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(cltv[[\"clv\"]])\ncltv[\"scaled_clv\"] = scaler.transform(cltv[[\"clv\"]])\n\ncltv[\"segment\"] = pd.qcut(cltv[\"scaled_clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\ncltv.head()","70cad63e":"fig = make_subplots(rows=2,\n                    cols=2,\n                    subplot_titles=(\"A\", \"B\",'C','D'))\n\nfig.add_trace(go.Box(y =cltv[cltv['segment']=='A']['clv'],showlegend=False,\n                     name = 'A',\n                     marker_color='#1760E1'),row=1,col=1)\nfig.add_trace(go.Box(y =cltv[cltv['segment']=='B']['clv'],showlegend=False,\n                     name = 'B',\n                     marker_color='#1760E1'),row=1,col=2)\nfig.add_trace(go.Box(y =cltv[cltv['segment']=='C']['clv'],showlegend=False,\n                     name = 'C',\n                     marker_color='#1760E1'),row=2,col=1)\nfig.add_trace(go.Box(y =cltv[cltv['segment']=='D']['clv'],showlegend=False,\n                     name = 'D',\n                     marker_color='#1760E1'),row=2,col=2)\n\nfig.update_layout(title={'text': \"CLTV by SEGMENTS\",\n                         'y':0.9,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  template='plotly')      \niplot(fig)","faca7e26":"data = go.Bar(x = cltv.groupby('segment').agg({'clv':'mean'}).reset_index()['segment'],\n              y = cltv.groupby('segment').agg({'clv':'mean'}).reset_index()['clv'],\n              text = round(cltv.groupby('segment').agg({'clv':'mean'}).reset_index()['clv'],3),\n              textposition= 'auto',\n              marker = dict(color = 'darkorange'))\n\nlayout = go.Layout(title={'text': \"Average CLV by Segments\",\n                          'y':0.9,\n                          'x':0.5,\n                          'xanchor': 'center',\n                          'yanchor': 'top'},\n                   xaxis = dict(title='Segment'),\n                   yaxis =dict(title='CLV'),\n                   template = 'plotly_white')\n\nfig=go.Figure(data=data, layout=layout)\nfig.update_yaxes(range=[0,5100])\niplot(fig)","ad40b8a5":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSegment Analysis","a0df1a6a":"- It is clearly seems that there are ouliters in Quantity and UnitPrice that have to be removed.\n- There are negative values in UnitPrice and Quantity because of cancelled orders.\n- Quantity and Unit Price should be multiplied to create Total Price.\n- Missing values in Customer ID and Description.\n- InvoiceDate should be datetime, not object.","6e80a8f8":"<a id = \"2\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">Load and Check Data<\/span>","a6df5200":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTop 10 Expected Number of Transaction (1 Week)","6b00a2f1":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSegment Analysis","32f59bf1":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nGamma - Gamma Submodel\n    \nThe Gamma-Gamma Model can predict the most likely value per transaction in the future.   \n \nThe properties of Gamma-Gamma model are:\n1. Monetary value of users\u2019 transactions is random around their mean transaction value.\n2. Mean transaction value varies across users but doesn\u2019t vary for an individual user over time.\n3. Mean transaction values is Gamma distributed across customers.","f19fabf7":"![image.png](attachment:e6de845d-2d48-47a5-b2e6-94f8be262b58.png)","0264e339":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nBG\/NBD\n    \nBG\/NBD models assume  that  the  number  of  transactions  made  by  each customer follows a Poisson process with a heterogeneity in transaction  rates  across  customers  following  a  gamma distribution. These assumptions give us a Negative binomial distribution (NBD) for modeling the number of transactions made by the customer while he is alive.","35e62f6c":"<p style=\"padding: 10px;\n          color:#31A919;\n          font-family:Verdana;\n          text-align: center;\n          font-size:220%;\">\nCRM Analytics\n\n<\/p>\n\n\n![image.png](attachment:e266df0c-f51f-49e1-afb5-4d65c08b7a34.png)\n<div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p><\/p><div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n  <h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\" style = \"border:2px solid #31A919; background-color:#31A919; color:white; font-family:Verdana;font-size:140%;\">Notebook Content<\/h3>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#1\" role=\"tab\" aria-controls=\"profile\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">Libraries and Utilities<span class=\"badge badge-primary badge-pill\">1<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#2\" role=\"tab\" aria-controls=\"messages\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">Load and Check Data<span class=\"badge badge-primary badge-pill\">2<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#3\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">Understanding Data<span class=\"badge badge-primary badge-pill\">3<\/span><\/a>\n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#4\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">Data Preprocessing<span class=\"badge badge-primary badge-pill\">4<\/span><\/a> \n  <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#5\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">RFM Analysis<span class=\"badge badge-primary badge-pill\">5<\/span><\/a>\n    <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#6\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">K-Means Clustering<span class=\"badge badge-primary badge-pill\">6<\/span><\/a>\n      <a class=\"list-group-item list-group-item-action\" data-toggle=\"list\" href=\"#7\" role=\"tab\" aria-controls=\"settings\" target=\"_self\" style = \"color:#31A919; font-family:Verdana;font-size:140%;\">Customer Lifetime Value<span class=\"badge badge-primary badge-pill\">7<\/span><\/a>\n\n<\/div>\n<\/div>\n<\/div>","7c2b71b2":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nRFM Metrics","dd68e14f":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSegmentation","620f0327":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nAverage Order Value","b07824bf":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTop 10 Expected Average Profit","3cf798db":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nCancelled Orders & Quantity","e2e92add":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTop 10 CLTV (6 Months)","aeab82c8":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nRecency & Tenure ","43a93017":"<a id = \"6\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">K-Means Clustering<\/span>","fb51e971":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nFrequency","7d4b5200":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSilhouette Score","3b8829a6":"![image.png](attachment:302e11b4-2f2e-4e8f-9ee5-6a17d3cc2c5b.png)","61c414cd":"<a id = \"7\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">Customer Lifetime Value<\/span>\n\nCustomer lifetime value is how much money a customer will bring your brand throughout their entire time as a paying customer.","d027fddc":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSegmentation","5ba3c0b0":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nFrequency of Repeat Transactions","6caf4c0a":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nOutliers","a656db09":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTotal Expected Number of Transaction (1 Month)","285575bc":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nDescriptive Statistics","49b395c9":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nSegment Analysis","21d3386c":"<a id = \"5\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">RFM Analysis<\/span>\n\nRFM stands for **Recency**, **Frequency**, and **Monetary** value, each corresponding to some key customer trait. These RFM metrics are important indicators of a customer\u2019s behavior because frequency and monetary value affects a customer\u2019s lifetime value, and recency affects retention, a measure of engagement.   \n\nRFM factors illustrate these facts:\n\n- the more recent the purchase, the more responsive the customer is to promotions\n- the more frequently the customer buys, the more engaged and satisfied they are\n- monetary value differentiates heavy spenders from low-value purchasers","3c027049":"<a id = \"4\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">Data Preprocessing<\/span>\n    \n<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nMissing Values","b049aca3":"<a id = \"3\"><\/a>\n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">Understanding Data<\/span>\n\n\n<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nContext\n    \nTypically e-commerce datasets are proprietary and consequently hard to find among publicly available data. However, The UCI Machine Learning Repository has made this dataset containing actual transactions from 2010 and 2011. The dataset is maintained on their site, where it can be found by the title \"Online Retail\".","b2d64274":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTop 10 Expected Number of Transaction (1 Month)","e50c37d8":"<a id = \"1\"><\/a>\n    \n<span style=\" font-family:Verdana; font-size:220%; color:#31A919; \">Libraries and Utilities<\/span>","63358a0a":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nRFM Scores","9f858c78":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nCLTV","32eda52c":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nTotal Price","fc8fb93f":"<span style=\"color:#31A919;\n             font-size:180%;\n             font-family:Verdana;\">\nVariable Description\n    \n- **InvoiceNo:** Invoice number that consists 6 digits. If this code starts with letter 'c', it indicates a cancellation.\n- **StockCode:** Product code that consists 5 digits.\n- **Description:** Product name.\n- **Quantity:** The quantities of each product per transaction.\n- **InvoiceDate:** Represents the day and time when each transaction was generated.\n- **UnitPrice:** Product price per unit.\n- **CustomerID:** Customer number that consists 5 digits. Each customer has a unique customer ID.\n- **Country:** Name of the country where each customer resides."}}