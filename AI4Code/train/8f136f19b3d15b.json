{"cell_type":{"35cc8cf0":"code","6791b3f9":"code","aa5678aa":"code","a6e9b058":"code","8ea15b80":"code","a8200618":"code","97aaed7a":"code","f1b39594":"code","e8c1fb60":"code","02c7a34e":"code","6ae13e07":"code","c904eb8c":"code","dbab4d9b":"code","77f2c896":"code","e1840ef1":"code","3f079a94":"code","d83889d1":"code","663bb991":"code","005fe0b5":"code","be72f776":"markdown","634742be":"markdown","aff2149d":"markdown","a4aff553":"markdown","eba2fe91":"markdown","92b9b95c":"markdown","4e4b258d":"markdown","9ec95b0f":"markdown","4f84f0e7":"markdown"},"source":{"35cc8cf0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6791b3f9":"import datetime as dt\nimport seaborn as sns\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\nimport plotly.express as px\n\nimport sys\n\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")","aa5678aa":"df = pd.read_csv('\/kaggle\/input\/all-space-missions-from-1957\/Space_Corrected.csv')\ndf.head()","a6e9b058":"# drop unwanted columns. \ndf = df.drop(['Unnamed: 0', 'Unnamed: 0.1', ' Rocket'], axis=1)\n\n\n# Cleaning the Datum column by removing Timezone = UTC' \ndf['Datum'] = df.Datum.apply(lambda x: pd.Series(x[:-3]))\n# convert the Datum column into timedate stamp\ndf[\"Datum\"] = df[\"Datum\"].apply(pd.to_datetime)\n\n#Create additional column for Country of luanch. \ndf['Country'] = df.Location.apply(lambda x: (pd.Series(str(x).split(' ')[-1])))\n\n#create seperate year column from Datum\ndf['year'] = pd.DatetimeIndex(df['Datum']).year\n\n#create seperate month column from Datum\ndf['month'] = pd.DatetimeIndex(df['Datum']).month\n\ndf.head()\n","8ea15b80":"## Would like to group all the failures into one group. \ndf['Success_failure'] = df['Status Mission'].apply(lambda x: 'Failure' if 'Failure' in x else x)\ndf.head()","a8200618":"#Which year of the launch, was most success?\n\nyear_list = list(df['year'].unique())\n\nnum_launch = []\nnum_success = []\nprob_success = []\n\n# get number of lunchs and success for each year\nfor n in year_list:\n    num_launch.append(((df[df['year']==n]).shape)[0])\n    num_success.append((df[(df['year']==n) & (df['Success_failure'] == 'Success')]).shape[0])\n    \n# get probability of success for each year    \nfor m in range(len(num_launch)):\n    prob_success.append(num_success[m]\/num_launch[m])\n\n    \n#convert the lists into data dict.    \ndata = {'year': year_list, 'launchs': num_launch, 'success': num_success, 'probability': prob_success}\n\n#create dataframe\ndf_year = pd.DataFrame(data=data, columns= ['year', 'launchs', 'success','probability'])\n\n#find top 5 successful launch yearwise. \ndf_year.nlargest(5,columns=['probability'], keep='first')","97aaed7a":"colors = np.random.rand(64)\nplt.figure(num=None, figsize=(15,10))\n\nplt.scatter(x= df_year['year'], y= df_year['probability']*100, s= df_year['launchs']*10, c = colors)\n\n\nplt.xlabel(\"Year of Launch\")\nplt.ylabel(\"%Probability of Success\")\nplt.title(\"%Proability of Success vs Year of Launch\", loc=\"center\")","f1b39594":"fig = px.treemap(df_year.sort_values(by = 'launchs', ascending= False).reset_index(drop = True),\n                         path = ['year'], values= 'launchs', height = 700,\n                         title = 'Number of launchs year wise',\n                         color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label + text+ value'\n\nfig.show()\n\n#Reference https:\/\/www.youtube.com\/watch?v=ztXcGdLYwe8","e8c1fb60":"plt.figure(num=None, figsize=(15,10))\n\nsns.countplot(x='month', data= df, saturation=0.8, dodge=True)","02c7a34e":"#Which company was most successful?\n\ncompany_list = list(df['Company Name'].unique())\n\nnum_launch = []\nnum_success = []\nprob_success = []\n\n# get number of lunchs and success for each company\nfor n in company_list:\n    num_launch.append(((df[df['Company Name']== n]).shape)[0])\n    num_success.append((df[(df['Company Name']==n) & (df['Success_failure'] == 'Success')]).shape[0])\n    \n# get probability of success for each company    \nfor m in range(len(num_launch)):\n    prob_success.append(num_success[m]\/num_launch[m])\n\n    \n#convert the lists into data dict.    \ndata_co = {'Company': company_list, 'launchs': num_launch, 'success': num_success, 'probability': prob_success}\n\n#create dataframe\ndf_comp = pd.DataFrame(data=data_co, columns= ['Company', 'launchs', 'success','probability'])\n\n#find top 10 successful companies. \ndf_comp.nlargest(10,columns=['launchs'], keep='first')","6ae13e07":"top10_comp = df_comp.nlargest(10,columns=['launchs'], keep='first')\n\nsns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(20, 8))\n\n# Plot the total counts vs year\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Company\", y=\"launchs\", data=top10_comp,\n            label=\"Total\", color=\"m\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Company\", y=\"success\", data=top10_comp,\n            label=\"success\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\nax.set(ylabel=\"Counts of launch\", xlabel=\"Companies\")\n#sns.despine(left=True, bottom=True)","c904eb8c":"df_comp\nfig = px.treemap(df_comp.sort_values(by = 'launchs', ascending= False).reset_index(drop = True),\n                         path = ['Company'], values= 'launchs', height = 700,\n                         title = 'Number of launchs Company wise',\n                         color_discrete_sequence = px.colors.qualitative.D3)\nfig.data[0].textinfo = 'label + text+ value'\n\nfig.show()","dbab4d9b":"df_comp[df_comp['Company'] =='SpaceX']","77f2c896":"top10_launchs = df_year.nlargest(10,columns=['launchs'], keep='first')\n\nsns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 6))\n\n# Plot the total counts vs year\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"year\", y=\"launchs\", data=top10_launchs,\n            label=\"Total\", color=\"m\")\n\n# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"year\", y=\"success\", data=top10_launchs,\n            label=\"success\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"upper left\", frameon=True)\nax.set(ylabel=\"Counts of launch\", xlabel=\"Year\")\n#sns.despine(left=True, bottom=True)\n","e1840ef1":"fig = px.treemap(df_year.sort_values(by = 'launchs', ascending= False).reset_index(drop = True),\n                         path = ['year'], values= 'launchs', height = 700,\n                         title = 'Number of launchs year wise',\n                         color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label + text+ value'\n\nfig.show()","3f079a94":"plt.figure(figsize=(15,10))\nsns.lineplot(x=\"year\", y=\"probability\",markers=True, dashes=False, data=df_year)","d83889d1":"#Which year of the launch, was least successful?\ndf_year.nsmallest(5,columns=['probability'], keep='first')","663bb991":"#Which country was most successful?\n\ncountry_list = list(df['Country'].unique())\n\nnum_launch = []\nnum_success = []\nprob_success = []\n\n# get number of lunchs and success for each company\nfor n in country_list:\n    num_launch.append(((df[df['Country']== n]).shape)[0])\n    num_success.append((df[(df['Country']==n) & (df['Success_failure'] == 'Success')]).shape[0])\n    \n# get probability of success for each company    \nfor m in range(len(num_launch)):\n    prob_success.append(num_success[m]\/num_launch[m])\n\n    \n#convert the lists into data dict.    \ndata_country = {'Country': country_list, 'launchs': num_launch, 'success': num_success, 'probability': prob_success}\n\n#create dataframe\ndf_country = pd.DataFrame(data=data_country, columns= ['Country', 'launchs', 'success','probability'])\n\n#find top 5 successful companies. \ndf_country.nlargest(5,columns=['launchs'], keep='first')","005fe0b5":"fig = px.treemap(df_country.sort_values(by = 'launchs', ascending= False).reset_index(drop = True),\n                         path = ['Country'], values= 'launchs', height = 700,\n                         title = 'Number of launchs country wise',\n                         color_discrete_sequence = px.colors.qualitative.Dark2)\nfig.data[0].textinfo = 'label + text+ value'\n\nfig.show()\n\n#Reference https:\/\/www.youtube.com\/watch?v=ztXcGdLYwe8","be72f776":"## What is the sucess rate of SpaceX?","634742be":"## Which year of the launch, was most successful?","aff2149d":"## Which month had most launches?","a4aff553":"# Which year of the launch, was something to learn from?","eba2fe91":"## Which company had most successful launches?","92b9b95c":"## Data Cleaning","4e4b258d":"## Which Country had most successful launches?","9ec95b0f":"# Sucess rate year wise","4f84f0e7":"## Top 10 number of launchs yearwise"}}