{"cell_type":{"84ef9979":"code","29817554":"code","c3e5c0a0":"code","26b72474":"code","8655a02b":"code","52ebff1e":"code","01008ab7":"code","223ce004":"code","3b2cf196":"code","35e0ba16":"markdown","6dae3a55":"markdown"},"source":{"84ef9979":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","29817554":"data_master = pd.read_csv('\/kaggle\/input\/personal-loan\/Bank_Personal_Loan_Modelling-1.xlsx')","c3e5c0a0":"data_master.info()","26b72474":"data_master.rename(columns = {'ZIP Code' : 'ZIP_Code', 'Personal Loan' : 'Personal_Loan', 'Securities Account' : 'Securities_Account',  'CD Account' : 'CD_Account',}, inplace = True)","8655a02b":"X = data_master.drop(['Personal_Loan'], axis = 1)\ny = data_master.Personal_Loan","52ebff1e":"\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","01008ab7":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nlogreg = LogisticRegression().fit(X_train, y_train)\nprint(\"Training set score: {:.2f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set score: {:.2f}\".format(logreg.score(X_test, y_test)))\ny_pred=logreg.predict(X_test)\nprint(\"Classification result is :{}\".format(y_pred[:]))\n","223ce004":"from sklearn.metrics import recall_score, precision_score, confusion_matrix","3b2cf196":"print(\"Recall score\", recall_score(y_test, y_pred, average='macro'))\nprint(\"Precision score\", precision_score(y_test, y_pred, average='macro'))\nprint (\"CONFUSION MATRIX\", confusion_matrix(y_test, y_pred))","35e0ba16":"**Logistic Regression**","6dae3a55":"**Confusion Matrix, Recall score and Precision score**"}}