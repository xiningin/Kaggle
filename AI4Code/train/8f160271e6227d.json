{"cell_type":{"3fee8740":"code","0c3b34d8":"code","973a3a77":"code","804261ca":"code","473895b8":"code","4218c113":"code","a90cb7ea":"code","6ad13b92":"code","176ff1b5":"code","9b7bce5d":"code","9c5a6043":"code","d5d52862":"code","e6844cdd":"code","8f135a51":"code","47acd340":"code","2611f2fe":"code","5121a6cd":"code","3e0c47f2":"code","6aa42187":"code","ff2ad454":"code","cb990bc6":"code","24a9108a":"code","29155d70":"code","007e2b79":"code","7d5743f3":"code","600634b6":"code","fd64a7ff":"code","cf5b165e":"code","81e656cd":"code","b1ee2785":"code","4f12e160":"code","66084114":"code","5c07d46f":"code","720c6bff":"markdown","3154e431":"markdown","61e37425":"markdown","333dffd4":"markdown","dac67feb":"markdown","f1e7dc42":"markdown","c3731e97":"markdown"},"source":{"3fee8740":"# Data manipulation\nimport numpy as np\nimport pandas as pd\nimport os\nimport random\n\n# Data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Image manipulation\nimport cv2\nfrom PIL import Image","0c3b34d8":"train_csv = pd.read_csv(\"..\/input\/gtsrb-german-traffic-sign\/Train.csv\")\n\nsns.jointplot(x='Width', y='Height', data=train_csv, kind='kde')\nsns.jointplot(x='Width', y='Height', data=train_csv.loc[(train_csv['Width'] < 75) & (train_csv['Height'] < 75)], kind='kde')\nsns.jointplot(x='Width', y='Height', data=train_csv.loc[(train_csv['Width'] < 50) & (train_csv['Height'] < 50)], kind='kde')\n\nplt.show()","973a3a77":"classes_number = len(os.listdir('..\/input\/gtsrb-german-traffic-sign\/Train'))\nheight = 32\nwidth = 32\nprint(\"Number of traffic sign classes: \", classes_number)","804261ca":"classes_dict = { 0:'Speed limit (20km\/h)',\n                 1:'Speed limit (30km\/h)', \n                 2:'Speed limit (50km\/h)', \n                 3:'Speed limit (60km\/h)', \n                 4:'Speed limit (70km\/h)', \n                 5:'Speed limit (80km\/h)', \n                 6:'End of speed limit (80km\/h)', \n                 7:'Speed limit (100km\/h)', \n                 8:'Speed limit (120km\/h)', \n                 9:'No passing', \n                 10:'No passing veh over 3.5 tons', \n                 11:'Right-of-way at intersection', \n                 12:'Priority road', \n                 13:'Yield', \n                 14:'Stop', \n                 15:'No vehicles', \n                 16:'Veh > 3.5 tons prohibited', \n                 17:'No entry', \n                 18:'General caution', \n                 19:'Dangerous curve left', \n                 20:'Dangerous curve right', \n                 21:'Double curve', \n                 22:'Bumpy road', \n                 23:'Slippery road', \n                 24:'Road narrows on the right', \n                 25:'Road work', \n                 26:'Traffic signals', \n                 27:'Pedestrians', \n                 28:'Children crossing', \n                 29:'Bicycles crossing', \n                 30:'Beware of ice\/snow',\n                 31:'Wild animals crossing', \n                 32:'End speed + passing limits', \n                 33:'Turn right ahead', \n                 34:'Turn left ahead', \n                 35:'Ahead only', \n                 36:'Go straight or right', \n                 37:'Go straight or left', \n                 38:'Keep right', \n                 39:'Keep left', \n                 40:'Roundabout mandatory', \n                 41:'End of no passing', \n                 42:'End no passing veh > 3.5 tons' }","473895b8":"from matplotlib.image import imread\n\nrows, columns = 7, 6\ndir_path = \"..\/input\/gtsrb-german-traffic-sign\/Train\" \nclasses = len(os.listdir(dir_path))\n    \nfig, axes = plt.subplots(rows , columns, figsize=(40, 30))\nk = 0\nfor row in range(rows):\n    for column in range(columns):\n        class_path = dir_path + '\/' + str(k)\n        image_path = class_path + '\/' + str(os.listdir(class_path)[0])\n        ax = axes[row, column]\n        ax.set_title(classes_dict[k], loc='center', fontsize=20)\n        ax.imshow(imread(image_path))\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n        k += 1\nplt.show()","4218c113":"X_train = []\ny_train = []\ndir_path = \"..\/input\/gtsrb-german-traffic-sign\/Train\" \n\nfor classe in range(classes): \n    class_path = dir_path + '\/' + str(classe)\n    for image in os.listdir(class_path):\n        image_path = class_path + '\/' + str(image)\n        img = cv2.imread(image_path, cv2.IMREAD_COLOR)\n        img = Image.fromarray(img, 'RGB')\n        img = img.resize((height, width))\n        X_train.append(np.array(img))\n        y_train.append(classe)\n        \nX_train = np.array(X_train)\ny_train = np.array(y_train)","a90cb7ea":"X_test = []\n\ntest_data = pd.read_csv(\"..\/input\/gtsrb-german-traffic-sign\/Test.csv\")\ndir_path = \"..\/input\/gtsrb-german-traffic-sign\"\ny_test = test_data['ClassId'].values\n\nfor image in test_data['Path'].values:\n    image_path = os.path.join(dir_path, image)\n    img = cv2.imread(image_path, cv2.IMREAD_COLOR)\n    img = Image.fromarray(img, 'RGB')\n    img = img.resize((height, width))\n    X_test.append(np.array(img))\n\nX_test = np.array(X_test)","6ad13b92":"print('Training dataset shape: ', X_train.shape, y_train.shape)\nprint('Testing dataset shape: ',  X_test.shape, y_test.shape)","176ff1b5":"rows, columns = 5, 5\n\nsample_signs = []\nrandom_classes = random.sample([i for i in range(classes)], rows*columns)\n\nfor i in range(rows*columns):\n    index = np.random.choice(np.where(y_train == random_classes[i])[0])\n    sample_signs.append(index)\n    \nfig, axes = plt.subplots(rows , columns, figsize=(25, 25))\nk = 0\nfor row in range(rows):\n    for column in range(columns):\n        ax = axes[row, column]\n        ax.set_title(classes_dict[y_train[sample_signs[k]]], loc='center', fontsize=20)\n        ax.imshow(X_train[sample_signs[k]], cmap=plt.get_cmap('gray'))\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n        k += 1\nplt.show()","9b7bce5d":"plt.style.use('seaborn-dark')\n\nplt.figure(figsize=(14,6))\nplt.title('Distribution of traffic signs images')\nplt.bar(list(classes_dict.values()), \n        pd.Series(y_train, name='Traffic sign class').value_counts().sort_index().values)\nplt.xticks(rotation=90)\nplt.show()","9c5a6043":"signs = pd.Series(y_train, name='Traffic sign class').value_counts().sort_index()\nsigns.rename(index = classes_dict).sort_values(ascending=False)","d5d52862":"X_train = X_train.astype('float32') \/ 255\nX_test = X_test.astype('float32') \/ 255","e6844cdd":"from keras.utils.np_utils import to_categorical","8f135a51":"index = random.choice(range(len(y_train)))\nprint('Before encoding: ', y_train[index])\ny_train = to_categorical(y_train, num_classes=classes)\nprint('After encoding: ', y_train[index])","47acd340":"from sklearn.model_selection import train_test_split","2611f2fe":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, y_train, random_state=42, test_size=0.25)","5121a6cd":"print('Training dataset shape: ', X_train.shape, Y_train.shape)\nprint('Validation dataset shape: ',  X_val.shape, Y_val.shape)","3e0c47f2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator","6aa42187":"data_gen = ImageDataGenerator(\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=False,\n    vertical_flip=False,\n    fill_mode=\"nearest\")","ff2ad454":"from keras import layers\nfrom keras import models","cb990bc6":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5, 5), activation='relu', input_shape=(height, width, 3)))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Dropout(rate=0.25))\n\nmodel.add(layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Dropout(rate=0.25))\n\nmodel.add(layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\n\nmodel.add(layers.Flatten())\n\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dropout(rate=0.25))\nmodel.add(layers.Dense(classes, activation='softmax'))\n\nmodel.summary()","24a9108a":"from tensorflow.keras.optimizers import Adam","29155d70":"model.compile(optimizer=Adam(lr=0.001),\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","007e2b79":"history = model.fit(data_gen.flow(X_train, Y_train, batch_size=32),\n          epochs=20, \n          validation_data=(X_val, Y_val))","7d5743f3":"epochs = range(1, len(history.history['accuracy']) + 1)\n\nfig, axes = plt.subplots(1, 2, figsize=(16, 6))\n\naxes[0].plot(epochs, history.history['accuracy'], 'bo', label='Training set accuracy')\naxes[0].plot(epochs, history.history['val_accuracy'], 'b', label='Validation set accuracy')\naxes[0].set_title('Training and validation accuracy')\naxes[0].set_xticks(range(2, len(history.history['accuracy']) + 1)[::2])\naxes[0].set_xlabel('Number of epochs')\naxes[0].set_ylabel('Accuracy')\naxes[0].legend()\n\naxes[1].plot(epochs, history.history['loss'], 'bo', label='Training set loss')\naxes[1].plot(epochs, history.history['val_loss'], 'b', label='Validation set loss')\naxes[1].set_title('Training and validation loss')\naxes[1].set_xticks(range(2, len(history.history['accuracy']) + 1)[::2])\naxes[1].set_xlabel('Number of epochs')\naxes[1].set_ylabel('Loss')\naxes[1].legend()\n\nplt.show()","600634b6":"y_pred = np.argmax(model.predict(X_test), axis=-1)","fd64a7ff":"bad_predictions = []\ni = 0\nwhile len(bad_predictions) < 25:\n    if y_pred[i] != y_test[i]:\n        bad_predictions.append(i)\n    i += 1","cf5b165e":"rows, columns = 5, 5\n\nfig, axes = plt.subplots(rows , columns, figsize=(25, 25))\nk = 0\nfor row in range(rows):\n    for column in range(columns):\n        ax = axes[row, column]\n        ax.set_title('True class: {} \\n Predicted class: {}'.format(classes_dict[y_test[bad_predictions[k]]], classes_dict[y_pred[bad_predictions[k]]]), \n                    loc='center', fontsize=12)\n        ax.imshow(X_test[bad_predictions[k]])\n        ax.get_xaxis().set_visible(False)\n        ax.get_yaxis().set_visible(False)\n        k += 1\nplt.show()","81e656cd":"from sklearn.metrics import accuracy_score","b1ee2785":"print(\"Accuracy score on testing dataset: \", accuracy_score(y_test, y_pred))","4f12e160":"from sklearn.metrics import confusion_matrix","66084114":"cf = confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(30, 30))\nplt.title(\"Confusion matrix\")\nsns.heatmap(pd.DataFrame(cf, index = classes_dict,  columns = classes_dict), \n            annot=True, fmt=\"d\", linewidths=0.1, cmap = 'Blues',\n            xticklabels=classes_dict.values(), yticklabels=classes_dict.values(), cbar=False)\nplt.xlabel(\"True class\")\nplt.ylabel(\"Predicted class\")\nplt.show()","5c07d46f":"model_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\nmodel.save_weights(\"model.h5\")","720c6bff":"### Data augmentation","3154e431":"### Splitting learning dataset into training and validation sets","61e37425":"### Predictions and score","333dffd4":"### Building convolutional neural network","dac67feb":"### Data preprocessing","f1e7dc42":"### Importing necessary libraries","c3731e97":"### Loading and visualization training and testing data"}}