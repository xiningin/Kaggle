{"cell_type":{"96967fb9":"code","d11af203":"code","43ade23f":"code","faee582b":"code","fd28ae8b":"code","a4f1e5a0":"code","9a3cd0be":"code","afea4d3b":"code","4170a1ae":"code","8055dfda":"code","3fc3a190":"code","a06dab03":"code","46a41d05":"code","79a543a9":"code","2d0fd2d2":"code","6c8b36ff":"code","cc9d4c77":"code","69b35f02":"markdown","f993d693":"markdown","9e93ec40":"markdown","ea2aeea5":"markdown","6ba10fa9":"markdown","c9680ebd":"markdown","a7d33024":"markdown","fb9986fe":"markdown"},"source":{"96967fb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/Pandas-Data-Science-Tasks-master\/SalesAnalysis'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d11af203":"import pandas as pd\nimport glob\n\npath = r'\/kaggle\/input\/Pandas-Data-Science-Tasks-master\/SalesAnalysis\/Sales_Data\/' \nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    li.append(df)\nframe = pd.concat(li, axis=0, ignore_index=True)","43ade23f":"frame.head()","faee582b":"frame.to_csv('all_months.csv')","fd28ae8b":"#Read the all months combine data\nall_data = pd.read_csv('\/kaggle\/input\/Pandas-Data-Science-Tasks-master\/SalesAnalysis\/Output\/all_data.csv')\nprint(all_data.shape)\n#Removing nan values in the dataset\nall_data = all_data.dropna(how='all')\nall_data.isna().count()\n","a4f1e5a0":"all_data['Months'] = pd.to_datetime(all_data['Order Date'],  errors='coerce')\n#to get particularly the month\nall_data['Months'] = all_data.Months.dt.month","9a3cd0be":"\n#CREATE A CLOUMN CALLED Month\n#dont forget to add errors='coerce'\nall_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'],errors='coerce')\nall_data['Price Each'] = pd.to_numeric(all_data['Price Each'],errors='coerce')\nall_data['Revenue'] = all_data['Quantity Ordered']*all_data['Price Each']\nall_data.head()","afea4d3b":"sales = all_data.groupby('Months').sum()\nprint(sales['Revenue'])","4170a1ae":"#CREATE A CITY COLUMN \nall_data['City'] = all_data['Purchase Address'].str.split(',')","8055dfda":"all_data = all_data[all_data['Order Date'].str[0:2]!='Or']\nall_data['City'] = all_data['Purchase Address'].apply(lambda x : x.split(',')[1])\n","3fc3a190":"\n#If you want revenue in highest city but also can extract revenue from it\npd.set_option('display.float_format', lambda x: '%.5f' % x)\n\n\n\nrevenue = all_data.groupby('City').sum()\nprint(revenue)\nname_cities = [city for city,df in all_data.groupby('City')]\nplt.figure(figsize=(15,8))#also can use parameter as rotation=vertical in xticks\n\nplt.bar(name_cities,revenue['Revenue'])\nplt.xticks(name_cities)\nplt.show()","a06dab03":"product = [Product for Product,df in all_data.groupby('Product')]\nsales_of_product = all_data.groupby('Product')['Quantity Ordered'].sum()\n\nplt.figure(figsize=(15,8))\nplt.bar(product,sales_of_product)\nplt.xticks(rotation='vertical')\nplt.show()\n\n","46a41d05":"#We plot the mean of the price of product so we conclude that which product is sold due to its price\nprices = all_data.groupby('Product').mean()","79a543a9":"print(prices)","2d0fd2d2":"prices = all_data.groupby('Product').mean()['Price Each']\nplt.figure(figsize=(15,8))\n\nfig, ax1 = plt.subplots(figsize=(15,8))\n\n\nax2 = ax1.twinx()\nax1.bar(product,sales_of_product)\nax2.plot(product,prices, 'b-')\n\nax1.set_xlabel('Products Name')\nax1.set_ylabel('Units Sold', color='g')\nax2.set_ylabel('Mean Prices', color='b')\nax1.set_xticklabels(product,rotation='vertical',size=8)\nplt.show()","6c8b36ff":"#We create a time(hour) column in all_data\nall_data['Hour'] = pd.to_datetime(all_data['Order Date'],  errors='coerce')\nall_data['Hour'] = all_data.Hour.dt.hour","cc9d4c77":"hours = [Hour for Hour,df in all_data.groupby('Hour')]\nprint(hours)\nquantity_ordered = all_data.groupby(['Hour']).count()\nprint(quantity_ordered)\nplt.xticks(hours)\nplt.plot(hours,quantity_ordered)\n","69b35f02":"# Question 4:\n# What time should we display advertisements to maximize the likelihood of customer\u2019s buying product?","f993d693":"# The city San Francisco sold the Highest Products","9e93ec40":"# Question 1:\n# - What was the best month for sales? How much was earned that month?\n ","ea2aeea5":"Create a Month column to store only months from Order Date","6ba10fa9":"# Question 2 - What city sold the most product?\n","c9680ebd":"# Advertisements should be displayed during 11 ","a7d33024":"# #Question 3: \n# What product sold the most? Why do you think it sold the most?\n#  ","fb9986fe":"# AA batteries are sold the most because they have lowest price"}}