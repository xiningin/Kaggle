{"cell_type":{"12aaf606":"code","60c8e22e":"code","32c55a05":"code","d378a9f0":"code","13693413":"code","668dbcd5":"code","fd2c16a9":"code","b3696128":"code","b8d3ec1a":"code","c6010ea0":"code","56e25ea8":"code","2be02318":"code","d93f0587":"code","856f5235":"code","f682c31d":"code","5d8404e2":"code","34e8617e":"code","6af8d62a":"code","11345a1e":"code","4084b788":"code","14ac0d2b":"code","3370316f":"code","798fe007":"code","2c71772a":"code","92c62dd7":"code","70cc76a3":"code","10b1b815":"code","aafda1d9":"code","709fcc77":"code","73f68f67":"code","77d71f0d":"code","f5b53063":"code","f875dcd5":"code","39af2254":"code","613c0fe2":"code","fcbafa22":"markdown"},"source":{"12aaf606":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60c8e22e":"import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime","32c55a05":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ncalendar = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nprice = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')","d378a9f0":"# sales\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u898b\u3066\u307f\u308b\nsales.head(10)","13693413":"sales.groupby('cat_id').mean()","668dbcd5":"# \u30e9\u30f3\u30c0\u30e0\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3092\u4f5c\u308b\u3002\n# \u9069\u5f53\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u6307\u5b9a\u3057\u3066\u6642\u7cfb\u5217\u3067\u306e\u58f2\u4e0a\u306e\u63a8\u79fb\u3092\u898b\u3066\u307f\u308b\u3002\nindex_list = []\nwhile len(index_list) <= 30:\n    i = np.random.randint(30000)\n    index_list.append(i)\n    set(index_list)\n    list(index_list)\nsales_by_id = sales.copy().iloc[index_list, :].set_index('id')\nsales_by_id.drop(['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], axis=1, inplace=True)\nsales_by_id = sales_by_id.T\nsales_by_id","fd2c16a9":"sales_by_id.plot(legend=True, figsize=(30, 8))","b3696128":"# \u3082\u3068\u306esales\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3001\u65e5\u4ed8\u3054\u3068\u306bsum\u3092\u5b9f\u884c\u3059\u308b\nsales_agg = sales.copy().set_index('id')\nsales_agg.drop(['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], axis=1, inplace=True)\nsales_agg = sales_agg.T\nsales_agg['day total'] = sales_agg.sum(axis=1)\nsales_agg = pd.DataFrame(sales_agg['day total'])\nsales_agg.plot(legend=True, figsize=(30, 8))","b8d3ec1a":"# \u307e\u305a\u306f\u3001\u65e5\u6bce\u306e\u30c7\u30fc\u30bf\u3092\u6708\u3054\u3068\u306b\u96c6\u8a08\u3059\u308b\u3002\n# \u305d\u306e\u524d\u306b\u3001\u58f2\u4e0a\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u65e5\u4ed8\u30e9\u30d9\u30eb\u3092\u6a19\u6e96\u7684\u306a\u8868\u8a18\u65b9\u6cd5\u306b\u5909\u63db\u3057\u305f\u3044 \u30ab\u30ec\u30f3\u30c0\u30fc\u898b\u3066\u59cb\u70b9\u3092\u78ba\u8a8d\u3059\u308b\ncalendar.head()","c6010ea0":"# sales\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u3044\u3058\u3063\u3066\u3044\u304f \u307e\u305a\u306f\u3001\u3082\u3068\u306esales\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8ee2\u7f6e\u3057\u3066\u3001index\u3092\u6a19\u6e96\u65e5\u4ed8\u8868\u8a18\u306b\u5909\u63db\u3059\u308b\nsales_ver1 = sales.copy().set_index('id')\nsales_ver1 = sales_ver1.transpose()\nsales_ver1 = sales_ver1.drop(['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'])\nindexes = calendar['date'].drop(range(1913, 1969, 1))\nsales_ver1 = sales_ver1.set_index(indexes)\n# 1\u6708\u306e\u58f2\u4e0a\u30c7\u30fc\u30bf\u306f3\u65e5\u5206\u3057\u304b\u7121\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u305d\u308c\u3089\u306f\u7701\u304f\nsales_ver1 = sales_ver1.drop(['2011-01-29', '2011-01-30', '2011-01-31'])\nsales_ver1","56e25ea8":"# \u65e5\u6bce\u306e\u3059\u3079\u3066\u306e\u58f2\u4e0a\u3092\u96c6\u8a08\u3059\u308b\nsales_ver1['day total'] = sales_ver1.sum(axis=1)","2be02318":"sales_ver1.index = pd.to_datetime(sales_ver1.index)\nsales_ver1.resample(rule='M').sum()","d93f0587":"sales_by_state = pd.DataFrame(sales.groupby('state_id').sum())\nsales_by_state = sales_by_state.transpose()\nsales_by_state.set_index(indexes)\nsales_by_state['day total'] = sales_by_state.sum(axis=1)\nsales_by_state","856f5235":"sales_by_state.set_index(indexes, inplace=True)\nsales_by_state.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)","f682c31d":"# \u9031\u6bce\u306e\u3001\u6708\u3054\u3068\u306e\u58f2\u4e0a\u30c7\u30fc\u30bf\u3092\u96c6\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305f\nsales_by_state.index = pd.to_datetime(sales_by_state.index)\nsales_by_state.resample(rule='M').sum()\nsales_by_state.index = pd.to_datetime(sales_by_state.index)\nsales_by_state = pd.DataFrame(sales_by_state.resample(rule='M').sum())\nsales_by_state","5d8404e2":"sales_by_state.plot(legend=True, figsize=(20, 8))","34e8617e":"sales_by_cat = pd.DataFrame(sales.groupby('cat_id').sum())\nsales_by_cat = sales_by_cat.transpose()\nsales_by_cat.set_index(indexes, inplace=True)\nsales_by_cat.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_by_cat.index = pd.to_datetime(sales_by_cat.index)\nsales_by_cat = pd.DataFrame(sales_by_cat.resample(rule='M').sum())","6af8d62a":"sales_by_cat.plot(legend=True, figsize=(20, 8))","11345a1e":"sns.countplot(sales['cat_id'])","4084b788":"avg = pd.DataFrame(sales.groupby('cat_id').mean())\navg = avg.transpose()\navg.set_index(indexes, inplace=True)\navg.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\n# avg.index = pd.to_datetime(avg.index)\n# avg = pd.DataFrame(avg.resample(rule='M').mean())\navg.plot(figsize=(20, 8))","14ac0d2b":"# \u304a\u5e97\u3054\u3068\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306b\u7de8\u96c6\u3059\u308b\u3002\nsales_by_store = sales.groupby('store_id').sum()\nsales_by_store = sales_by_store.transpose()\nsales_by_store.set_index(indexes, inplace=True)\nsales_by_store.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_by_store.index = pd.to_datetime(sales_by_store.index)\nagg_sales_by_store = pd.DataFrame(sales_by_store.resample(rule='M').sum())","3370316f":"sales_CA = agg_sales_by_store[['CA_1', 'CA_2', 'CA_3', 'CA_4']]\nsales_TX = agg_sales_by_store[['TX_1', 'TX_2', 'TX_3']]\nsales_WI = agg_sales_by_store[['WI_1', 'WI_2', 'WI_3']]","798fe007":"fig, axes = plt.subplots(ncols=3)\nsales_CA.plot(ax=axes[0], figsize=(20,10), yticks=range(50000, 225001, 25000), ylim=[25000, 225000]);axes[0].set_title('CA')\nsales_TX.plot(ax=axes[1], figsize=(20,10), yticks=range(50000, 225001, 25000), ylim=[25000, 225000]);axes[1].set_title('TX')\nsales_WI.plot(ax=axes[2], figsize=(20,10), yticks=range(50000, 225001, 25000), ylim=[25000, 225000]);axes[2].set_title('WI')\n\nplt.figure(figsize=(20, 8))\nplt.show()","2c71772a":"agg_sales_by_store","92c62dd7":"# \u307e\u305a\u306fCA\u3060\u3051\u306e\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3002\nsales_CA_df = sales[sales['state_id'] == 'CA'].set_index('id')\nsales_CA_df.drop(['item_id', 'cat_id', 'store_id', 'state_id'], axis=1, inplace=True)\nsales_CA_df = pd.DataFrame(sales_CA_df.groupby('dept_id').sum()).T\nsales_CA_df.set_index(indexes, inplace=True)\nsales_CA_df.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_CA_df.describe()\nsales_CA_df.index = pd.to_datetime(sales_CA_df.index)\nsales_CA_df = sales_CA_df.resample(rule='M').sum()","70cc76a3":"sales_TX_df = sales[sales['state_id'] == 'TX'].set_index('id')\nsales_TX_df.drop(['item_id', 'cat_id', 'store_id', 'state_id'], axis=1, inplace=True)\nsales_TX_df = pd.DataFrame(sales_TX_df.groupby('dept_id').sum()).T\nsales_TX_df.set_index(indexes, inplace=True)\nsales_TX_df.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_TX_df.describe()\nsales_TX_df.index = pd.to_datetime(sales_TX_df.index)\nsales_TX_df = sales_TX_df.resample(rule='M').sum()","10b1b815":"sales_WI_df = sales[sales['state_id'] == 'WI'].set_index('id')\nsales_WI_df.drop(['item_id', 'cat_id', 'store_id', 'state_id'], axis=1, inplace=True)\nsales_WI_df = pd.DataFrame(sales_WI_df.groupby('dept_id').sum()).T\nsales_WI_df.set_index(indexes, inplace=True)\nsales_WI_df.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_WI_df.index = pd.to_datetime(sales_WI_df.index)\nsales_WI_df = sales_WI_df.resample(rule='M').sum()","aafda1d9":"fig, axes = plt.subplots(nrows=3,ncols=7, sharey=True)\nfor i in list(sales_CA_df.columns):\n    sales_CA_df[i].plot(ax=axes[0][list(sales_CA_df.columns).index(i)], figsize=(30, 12));axes[0][list(sales_CA_df.columns).index(i)].set_title(i)\nfor i in list(sales_TX_df.columns):\n    sales_TX_df[i].plot(ax=axes[1][list(sales_TX_df.columns).index(i)], figsize=(30, 12))\nfor i in list(sales_WI_df.columns):\n    sales_WI_df[i].plot(ax=axes[2][list(sales_WI_df.columns).index(i)], figsize=(30, 12))\n\nplt.figure(figsize=(20, 8))\nplt.show()\nsales_CA_df['FOODS_1'].plot(ax=axes[0], legend=False);axes[0].set_title('FOODS_1')\nsales_CA_df['FOODS_2'].plot(ax=axes[1], legend=False);axes[1].set_title('FOODS_2')\n\nplt.figure(figsize=(20, 8))\nplt.show()","709fcc77":"sales_global = sales.copy().set_index('id').T\nsales_global.drop(['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'], inplace=True)\nsales_global['day total'] = sales_global.sum(axis=1)","73f68f67":"sales_global.set_index(indexes, inplace=True)\nsales_global.drop(['2011-01-29', '2011-01-30', '2011-01-31'], inplace=True)\nsales_global.index = pd.to_datetime(sales_global.index)","77d71f0d":"sales_global = pd.DataFrame(sales_global['day total'])","f5b53063":"sales_global.plot(figsize=(20, 8), ylim=(15000, 60000))","f875dcd5":"sales_global['MA_7'] = sales_global.rolling(150).mean()\nfor i in range(0, 150, 1):\n    sales_global['MA_7'][i] = sales_global['day total'][0:i+1].mean()\nsales_global['MA_7'][0] = sales_global['day total'][0]\nsales_global","39af2254":"sales_global.plot(figsize=(20, 8))","613c0fe2":"sales_month_week = sales.set_index('id').transpose()\nsales_month_week = sales_month_week.drop(['item_id', 'dept_id', 'cat_id', 'store_id', 'state_id'])\nsales_month_week.set_index(indexes, inplace=True)\nsales_month_week.index = pd.to_datetime(sales_month_week.index)\nsales_month_week['day of week'] = sales_month_week.index.weekday\nsales_month_week.head()","fcbafa22":"\u6b86\u3069\u306e\u30c7\u30fc\u30bf\u306f\u30010\u304b\u305d\u308c\u306b\u8fd1\u3044\u6570\u5b57\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\u305f\u3060\u3057\u3001FOOD\u30ab\u30c6\u30b4\u30ea\u306e\u58f2\u4e0a\u53f0\u6570\u306f\u4ed6\u306e\u30ab\u30c6\u30b4\u30ea\u306e\u5e73\u5747\u3088\u308a\u3082\u9ad8\u305d\u3046\n\u6b21\u306b\u3001\u305d\u306e\u65e5\u306b\u58f2\u308a\u4e0a\u3052\u305f\u3059\u3079\u3066\u306eid\u306b\u3064\u3044\u3066\u306e\u5408\u8a08\u5024\u3092\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u3057\u3066\u5206\u6790\u3057\u3066\u307f\u3088\u3046"}}