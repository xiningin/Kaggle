{"cell_type":{"e3f8edcc":"code","f547bfff":"code","bda0c233":"code","7fa8299c":"code","e64924b9":"code","305a00ff":"code","fe5a193a":"code","762b8faf":"code","f4aebc79":"code","6cc90dfb":"code","4b12033d":"code","c4dddb54":"code","049f97cf":"code","40067868":"code","6ef8edd6":"code","e92101b9":"code","04eb3750":"code","a49bc7e3":"code","27e04bbf":"code","e657448b":"code","fbf4129c":"code","942f3652":"code","96a8d539":"markdown","b6358447":"markdown","5748d9a6":"markdown","fb69f0a7":"markdown","066d476d":"markdown","ac73ffd2":"markdown","d0441faf":"markdown","13cb1f20":"markdown","95f60fbf":"markdown","585c988d":"markdown","b36ac07f":"markdown","2643fc85":"markdown","08433f53":"markdown","37d5a589":"markdown"},"source":{"e3f8edcc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Read 50,000 rows of data\ntrain = pd.read_csv('..\/input\/train.csv', nrows = 1000000)\ntest = pd.read_csv('..\/input\/test.csv')\ntrain.head(n=5)","f547bfff":"print(\"Number of rows with zero values.\")\nprint(\"Missing data in column\", train[(train.isna())].shape[0])\nprint(\"Pickup longitude\", train[(train.pickup_longitude == 0.0)].shape[0])\nprint(\"Pickup latitude\", train[(train.pickup_latitude == 0.0)].shape[0])\nprint(\"Dropoff longitude\", train[(train.dropoff_longitude == 0.0)].shape[0])\nprint(\"Dropoff latitude\", train[(train.dropoff_latitude == 0.0) ].shape[0])\n# Drop out these missing data rows.\ntrain = train.dropna()\n# Drop zero value\ntrain = train[(train.pickup_longitude != 0.0 ) & \\\n              (train.pickup_latitude != 0.0) & \\\n              (train.dropoff_longitude != 0.0) &\\\n              (train.dropoff_latitude != 0.0)]","bda0c233":"train[(train.pickup_latitude < -73.0 ) & (train.pickup_latitude > -75.0) & \n      (train.pickup_longitude > 40.4) & (train.pickup_latitude < 41.0) &\n      (train.dropoff_latitude < -73.0 ) & (train.dropoff_latitude > -75.0) &\n      (train.dropoff_longitude > 40.4) & (train.dropoff_latitude < 41.0)].head()","7fa8299c":"print(\"Calculating how many rows have transposed latitude and longitude\")\n# Pickup & dropoff lat\/lon transposed.\nprint(\"Number of pickup & dropoff lat\/lon transposed:\", \n      train[(train.pickup_latitude < -73.0 ) & (train.pickup_latitude > -75.0) & \n      (train.pickup_longitude > 40.4) & (train.pickup_latitude < 41.0) &\n      (train.dropoff_latitude < -73.0 ) & (train.dropoff_latitude > -75.0) &\n      (train.dropoff_longitude > 40.4) & (train.dropoff_latitude < 41.0)].shape[0])\n# Pickup lat\/lon transposed but dropoff ok\nprint(\"Number of pickup lat\/lon transposed but dropoff ok:\", \ntrain[(train.pickup_latitude < -73.0 ) & (train.pickup_latitude > -75.0) & \n      (train.pickup_longitude > 40.4) & (train.pickup_latitude < 41.0) &\n      (train.dropoff_latitude > -73.0 ) & (train.dropoff_latitude < -75.0) &\n      (train.dropoff_longitude < 40.4) & (train.dropoff_latitude > 41.0)].shape[0])\n# Pickup lat\/lon ok but dropoff transposed\nprint(\"Number of pickup lat\/lon ok but dropoff transposed:\", \ntrain[(train.pickup_latitude > -73.0 ) & (train.pickup_latitude < -75.0) & \n      (train.pickup_longitude < 40.4) & (train.pickup_latitude > 41.0) &\n      (train.dropoff_latitude > -73.0 ) & (train.dropoff_latitude < -75.0) &\n      (train.dropoff_longitude < 40.4) & (train.dropoff_latitude > 41.0)].shape[0])","e64924b9":"# Code from https:\/\/www.kaggle.com\/breemen\/nyc-taxi-fare-data-exploration kernek by Albert van Breemen.\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Grab out the rows which have transposed values\ndf_swap = train[(train.pickup_latitude < -73.0 ) & (train.pickup_latitude > -75.0) & \n      (train.pickup_longitude > 40.4) & (train.pickup_latitude < 41.0) &\n      (train.dropoff_latitude < -73.0 ) & (train.dropoff_latitude > -75.0) &\n      (train.dropoff_longitude > 40.4) & (train.dropoff_latitude < 41.0)]\n\nnyc_map = plt.imread('https:\/\/aiblog.nl\/download\/nyc_-75_40_-73_41.5.png')\nBB = (-74.25, -73.5, 40.4, 41.0)\n\n# Plot them on the map to have a look at them\nfig, axs = plt.subplots(1,1, figsize=(16,10))\naxs.scatter(df_swap.pickup_latitude, df_swap.pickup_longitude, zorder=1, c='r')\naxs.scatter(df_swap.dropoff_latitude, df_swap.dropoff_longitude, zorder=1, c='b')\naxs.plot([df_swap.pickup_latitude, df_swap.dropoff_latitude], [df_swap.pickup_longitude, df_swap.dropoff_longitude], 'k-', lw=1)\naxs.set_xlim((BB[0], BB[1]))\naxs.set_ylim((BB[2], BB[3]))\naxs.set_title('Pickup locations')\naxs.imshow(nyc_map, zorder=0, extent=[-74.25, -73.5, 40.4, 41.0]);","305a00ff":"train['pickup_longitude'] = train['pickup_longitude'].where(train.pickup_longitude < 39 , train['pickup_latitude'])\ntrain['pickup_latitude'] = train['pickup_latitude'].where(train.pickup_latitude > -73 , train['pickup_longitude'])\ntrain['dropoff_longitude'] = train['dropoff_longitude'].where(train.dropoff_longitude < 39 , train['dropoff_latitude'])\ntrain['dropoff_latitude'] = train['dropoff_latitude'].where(train.dropoff_latitude > -73 , train['dropoff_longitude'])\n#\nprint(\"Check that values have been swapped: \", train[(train.pickup_latitude < -73.0 ) & (train.pickup_latitude > -75.0) & \n      (train.pickup_longitude > 40.4) & (train.pickup_latitude < 41.0) &\n      (train.dropoff_latitude < -73.0 ) & (train.dropoff_latitude > -75.0) &\n      (train.dropoff_longitude > 40.4) & (train.dropoff_latitude < 41.0)].shape[0])","fe5a193a":"print(\"Number of rows where lat\/lon doesn't change: \", train[(train.pickup_longitude == train.dropoff_longitude) & \\\n              (train.pickup_latitude == train.dropoff_latitude)].shape[0])","762b8faf":"train[(train.pickup_longitude == train.dropoff_longitude) & \\\n              (train.pickup_latitude == train.dropoff_latitude)].head()","f4aebc79":"train = train[(train.pickup_longitude != train.dropoff_longitude) & \\\n              (train.pickup_latitude != train.dropoff_latitude)]","6cc90dfb":"start = train.shape[0]\ntrain = train[(train.pickup_longitude <= -73.0 ) & \\\n              (train.pickup_longitude >= -75.0) & \\\n              (train.pickup_latitude >= 40.4) & \\\n              (train.dropoff_latitude <= 41.0) & \\\n              (train.dropoff_longitude <= -73.0 ) & \\\n              (train.dropoff_longitude >= -75.0) & \\\n              (train.dropoff_latitude >= 40.4) & \\\n              (train.dropoff_latitude <= 41.0)]\nprint(\"Dropped {} with unreasonable lat or lon\".format(start - train.shape[0]))\nstart = train.shape[0]","4b12033d":"from geopy import distance\n# Calculate distance function\ndef calc_dist(x):\n    try:\n        dist = round(distance.distance((x[0], x[1]),(x[2], x[3])).feet, 0)\n    except ValueError as e:\n        print(\"ERROR \", x, e)\n        dist = 0\n    return dist\n\ntrain['distance'] = train[[\"pickup_latitude\", \"pickup_longitude\", \"dropoff_latitude\",\"dropoff_longitude\"]].apply(calc_dist, axis=1)\n# Make sure distance and fare are resonable, fare should always be bigger than a straight line distance\nbefore = train.shape[0]\ntrain = train[((train.distance\/1056)*0.50 < train.fare_amount)]\nprint(\"Dropping {} rows due to fare less than resonable amount according to distance\".format(before-train.shape[0]))\ntrain.head()\n# Create feature for test set\ntest['distance'] = test[[\"pickup_latitude\", \"pickup_longitude\", \"dropoff_latitude\",\"dropoff_longitude\"]].apply(calc_dist, axis=1)","c4dddb54":"from geopy import distance\n\nnyc_lat = 40.730610\nnyc_lon = -73.935242\nlon_step = 0.003\nlat_step = 0.01\n\n# If the lon moves by 0.03 how far is that\nprint(\"Longitude increasing by {} is {} miles\".format(lon_step, round(distance.distance((nyc_lon, lat_step),(nyc_lon+lon_step, lat_step)).miles, 2)))\n# If the lat moves by 0.03 how far is that\nprint(\"Latitude increasing by {} is {} miles\".format(lat_step, round(distance.distance((nyc_lon, lat_step),(nyc_lon, lat_step+lat_step)).miles, 2)))","049f97cf":"def bin_data(df):\n    pickup_groups = df.groupby([\"pickup_latitude\", \"pickup_longitude\"])\n    dropoff_groups = df.groupby([\"dropoff_latitude\", \"dropoff_longitude\"])\n    trip_groups = df.groupby([\"pickup_latitude\", \"pickup_longitude\", \"dropoff_latitude\", \"dropoff_longitude\"])\n    print(\"Before bin:\")\n    print(\"Number of pickup locations: \",pickup_groups.ngroups)\n    print(\"Number of dropoff locations: \",dropoff_groups.ngroups)\n    print(\"Number of trips: \", trip_groups.ngroups)\n    #\n    # Create the bin size.\n    lon_step = 0.003\n    lat_step = 0.01\n    print(\"Lat bin size {} and long bin size {}\\n\".format(lat_step, lon_step))\n    to_bin_lon = lambda x: np.floor(x \/ lon_step) * lon_step\n    to_bin_lat = lambda x: np.floor(x \/ lat_step) * lat_step\n    df[\"pickup_latbin\"] = df.pickup_latitude.map(to_bin_lat)\n    df[\"pickup_lonbin\"] = df.pickup_longitude.map(to_bin_lon)\n    df[\"dropoff_latbin\"] = df.dropoff_latitude.map(to_bin_lat)\n    df[\"dropoff_lonbin\"] = df.dropoff_longitude.map(to_bin_lon)\n    pickup_groups = df.groupby([\"pickup_latbin\", \"pickup_lonbin\"])\n    dropoff_groups = df.groupby([\"dropoff_latbin\", \"dropoff_lonbin\"])\n    trip_groups = df.groupby([\"pickup_latbin\", \"pickup_lonbin\",\"dropoff_latbin\", \"dropoff_lonbin\"])\n    print(\"After bin:\")\n    print(\"New number of pickup locations: \",pickup_groups.ngroups)\n    print(\"New number of dropoff locations: \",dropoff_groups.ngroups)\n    print(\"New number of trips: \", trip_groups.ngroups)\n\n    return df\ntrain = bin_data(train)\ntest = bin_data(test)","40067868":"train.head()","6ef8edd6":"# We can drop off the columns\ntrain = train.drop(['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude'], axis=1)\ntest = test.drop(['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude'], axis=1)","e92101b9":"def convert_date(df):\n    df['pickup_datetime'] = pd.to_datetime(df.pickup_datetime, format='%Y-%m-%d %H:%M:%S %Z', utc=True)\n    # Add New York timezone\n    df['pickup_datetime'] = df.pickup_datetime.dt.tz_convert('America\/New_York')\n    df['year'] = df.pickup_datetime.dt.year\n    df['pickup_hour'] = df.pickup_datetime.dt.hour\n    # day of week 0 Monday to 6 Sunday, we can capture weekend with < 5\n    df['weekend'] = df.pickup_datetime.dt.dayofweek < 5\n    # Add in surcharge period\n    df['surcharge'] = ((df.pickup_hour >= 20) | (df.pickup_hour <= 5))\n    # Drop pickup_datetime as we have extracted everything we need\n    df = df.drop('pickup_datetime', axis=1)\n\n    return df\ntrain = convert_date(train)\ntest = convert_date(test)","04eb3750":"train.head()","a49bc7e3":"test.head()","27e04bbf":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import cross_val_score\n\nmodel = Pipeline((\n        (\"standard_scaler\", StandardScaler()),\n        (\"rf_tree\", RandomForestRegressor())\n    ))\n\nX = train.iloc[:,2:].astype('float64', axis=1)\ny = np.ravel(train.fare_amount.values)\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.25)\nmodel.fit(X=train_X, y=train_y)\npredict_y = model.predict(X=test_X)\nrmse = np.sqrt(mean_squared_error(test_y, predict_y))\ncompare = pd.DataFrame()\ncompare['train_y'] = test_y\ncompare['predict_y'] = predict_y\ncompare['RSE'] = np.sqrt(np.square(test_y - predict_y))\nprint(\"RMSE: \", rmse)\ncompare.head(n=10)","e657448b":"# Cross validate to see how robust the results are\nscores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')\nprint(\"Cross validated RMSE:\", np.sqrt(np.mean(scores)*-1))","fbf4129c":"test_X = test.iloc[:,1:].astype('float64', axis=1)\n\nmodel.fit(X=X, y=y)\ny_pred_final = model.predict(test_X)\n\nsubmission = pd.DataFrame(\n    {'key': test.key, 'fare_amount': y_pred_final},\n    columns = ['key', 'fare_amount'])\nsubmission.to_csv('submission.csv', index = False)","942f3652":"submission.head(n=5)","96a8d539":"Let's take a quick look a the new bins and see if it looks reasonable and it does.","b6358447":"These trips all seem to be in a particular region so perhaps a particular taxi company is reporting the data incorrectly.\n\nHere is some code which could be easily included to swap the values when they are found.","5748d9a6":"Using a lon_step of 0.003 and a lat_step would seem reasonable.","fb69f0a7":"## Taxi that don't move\nSome of the geo-coordinates have the lat long in the same location.","066d476d":"## Ensure lat and long are reasonable\nSimply go through the lat and lon and make sure they are in a reasonable range for NYC.","ac73ffd2":"## Train a model on the data","d0441faf":"## Some latitude and longitude may be transposed\nAnother issue I have seen which hasn't been discussed is where the latitude and longitude have been transposed. \n\nHere is an example row where latitude and longitude are swapped.","13cb1f20":"Technically, if you jump in a taxi and they turn on the meter you could be hit with the flag fall $2.50 + fees and sucharges. Looking at the values they are a lot larger so its more likely that the gps didn't update and it would be best top drop these rows.\n\nLet's drop out these rows.","95f60fbf":"# Further analysis of the geospatial data\nThere has been some excellent work done on analysing the geospatial data and I would just like to extend it a little more with my findings especially the transposed latitude and longitude.\n","585c988d":"## Extract features from pickup date time\nLooking at the way fares are calculated:\n\n1. 50c\/60secs in slow or stopped - traffic is more likely to heavier during peak out, so extracting the hour is important\n2. 50c surcharge 8pm to 6am\n3. $1 surcharge 4pm to 8pm weekdays, excluding holidays\n\nWe need to extract three: hour, weekday & public holiday. Might be worth converting the GMT time to NYC timezone to ensure ensure the correct date\/time is used.","b36ac07f":"From 50,000 rows we only have 19 that have swapped values, which is a very small number. Let's see if they are valid by plotting them.","2643fc85":"## Zero values for latitude and longitude\nAs mentioned in other notebooks there are some issues with the geo data such as zero latitude and longitude. Not much we can do with these but drop the rows.","08433f53":"## Bin latitude and longitude and look at trips\nGiven that taxi fares are calculated at 0.50 per 0.2 mile, I thought putting the geospatial data into bins that are 0.2 miles would increase the signal within the data.\n\nUsing the geopy module to insure the calculations are correct for around NYC. Work out at the right bin size might be.","37d5a589":"## Calculate distance\nNeed to calculate the distance from pickup to drop off. Not the best method as it doesn't follow the path the taxi would need to travel but can be a good approximation.\n\nAs the distance we calculate is a straight line, then a fare calculate on this number show always be lower than the fare amount as a taxi will travel a great distance. If this is not the case we will drop the row."}}