{"cell_type":{"1b78a4de":"code","35b0556c":"code","3cc0a7c0":"code","0575d918":"code","067970b0":"code","2f44c054":"code","58b984a2":"code","fd98e867":"code","f609ed10":"code","4fcaf9c5":"code","b1626809":"code","c332a2fc":"code","ef97f34c":"code","41c97075":"code","55dbf662":"code","965fa847":"code","9175f40b":"code","75986981":"code","a2c8bf25":"code","509455f8":"code","67271b05":"code","b8d0e1d9":"code","a1c23c51":"code","5a4e1ad9":"code","f9dfc33e":"code","b80bfda3":"code","6fac5940":"code","f1cb43a6":"code","fa2d6c06":"code","88fdcd94":"code","d1852d1f":"code","1fbf5203":"code","774fba95":"code","3d1356c8":"code","6ab4037f":"code","0213925d":"code","fb544812":"code","43eb27bc":"code","4686f08f":"code","833bf4ff":"code","bf2cad25":"code","8ac3e736":"code","1d0a4a38":"code","b1512b7c":"code","e066ec19":"code","d70c0b6d":"code","96e296e4":"code","ea23d532":"code","3923a01b":"code","cb3704b1":"code","bfb79333":"code","be1a19e6":"code","0991213f":"code","42cc717b":"code","1d28bf53":"code","86af4b9c":"code","5a546265":"code","8392346b":"markdown","3592c4f4":"markdown","cd48d24b":"markdown","2938503d":"markdown","21e32971":"markdown","d4817dbb":"markdown","d6ae32ec":"markdown","f6dcb8ba":"markdown","5ef2d006":"markdown","5f12d485":"markdown","eb24d610":"markdown","db97e8f1":"markdown","fc8c1576":"markdown","d11241c0":"markdown","5fe85290":"markdown","6ec05940":"markdown","e406d944":"markdown"},"source":{"1b78a4de":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","35b0556c":"train = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsub = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')\n","3cc0a7c0":"train.head()","0575d918":"train.describe().T","067970b0":"sns.countplot(train['Response'])","2f44c054":"sns.countplot(train['Previously_Insured'])","58b984a2":"sns.countplot(train['Response'])","fd98e867":"train.isnull().sum()","f609ed10":"sns.countplot(train['Gender'])","4fcaf9c5":"gender = pd.get_dummies(train['Gender'])\ntrain=pd.concat([train,gender], axis=1)\ntrain = train.drop('Gender', axis=1)","b1626809":"train['Vehicle_Age'].unique()","c332a2fc":"train = pd.concat([train,(pd.get_dummies(train['Vehicle_Age']))],axis=1)\ntrain.drop('Vehicle_Age', axis=1, inplace=True)","ef97f34c":"train.set_index('id', inplace=True)","41c97075":"train.head()","55dbf662":"train = pd.concat([train,pd.get_dummies(train['Vehicle_Damage'])], axis=1)\ntrain.drop('Vehicle_Damage', axis=1, inplace=True)","965fa847":"sns.countplot(train['Driving_License'])","9175f40b":"train[train['Driving_License']==0]","75986981":"train = train.drop(['Male'], axis=1)","a2c8bf25":"train = train.drop(['No'], axis=1)","509455f8":"train = train.drop(['< 1 Year'], axis=1)","67271b05":"sns.boxenplot(data=train, x='Response',y='Annual_Premium')","b8d0e1d9":"train['Annual_Premium'].hist()","a1c23c51":"train=train[train['Annual_Premium']<=120000]","5a4e1ad9":"sns.boxenplot(data=train, x='Response',y='Policy_Sales_Channel')","f9dfc33e":"sns.boxplot(data=train, x='Response',y='Vintage')","b80bfda3":"sns.boxplot(data=train, x='Response',y='Previously_Insured')","6fac5940":"fig,ax = plt.subplots(nrows=1, ncols=2, figsize=(15,4))  \nsns.countplot(train[train['Response']==0]['Previously_Insured'], ax=ax[0])\nsns.countplot(train[train['Response']==1]['Previously_Insured'], ax=ax[1])\nplt.title(f'Plot of Previously_Insured for Response 0 and Response 1')","f1cb43a6":"sns.countplot(train[train['Response']==0]['Previously_Insured'])","fa2d6c06":"sns.boxenplot(data=train, x='Response',y='Region_Code')","88fdcd94":"sns.boxplot(data=train, x='Response',y='Age')","d1852d1f":"sns.countplot(train[train['Driving_License']==0]['Response'])","1fbf5203":"train.head()","774fba95":"plt.figure(figsize=(10,10))\nsns.heatmap(train.corr(), cmap='viridis', annot=True)","3d1356c8":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb","6ab4037f":"#train=train.drop('Policy_Sales_Channel', axis=1) This did not help\ntrain=train.drop('Driving_License', axis=1) # Deleting this column gives better results\ntrain=train.drop('Region_Code', axis=1)\ntrain=train.drop('Vintage', axis=1) # Deleting this column gives yet better results for class1, hence this is better model.\ntrain=train.drop('Annual_Premium', axis=1) # This have improved the perfromance dramatically ","0213925d":"train.head()","fb544812":"X = train.drop('Response', axis=1)\ny = train['Response']","43eb27bc":"\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.combine import SMOTEENN, SMOTETomek\nfrom imblearn.pipeline import make_pipeline\nfrom sklearn.svm import LinearSVC\n\nsamplers = [SMOTE(random_state=0), SMOTEENN(0.62,random_state=0), SMOTETomek(random_state=0)]\nX_res, y_res = samplers[0].fit_resample(X, y)\n\nX_comb, y_comb = samplers[1].fit_resample(X, y)\n\nX_train, X_test, y_train, y_test = train_test_split(X_comb, y_comb, test_size=0.25, random_state=42)\nscaller = MinMaxScaler()","4686f08f":"scalled_X_train = scaller.fit_transform(X_train)\nrf = RandomForestClassifier()\nrf.fit(scalled_X_train, y_train.values)\nscalled_X_test = scaller.transform(X_test)\npred = rf.predict(scalled_X_test)","833bf4ff":"print(classification_report(y_test, pred))","bf2cad25":"print(confusion_matrix(pred, y_test))  ","8ac3e736":"from xgboost import XGBClassifier","1d0a4a38":"model = XGBClassifier()\nmodel.fit(scalled_X_train, y_train.values)","b1512b7c":"pred = model.predict(scalled_X_test)","e066ec19":"print(confusion_matrix(pred, y_test))","d70c0b6d":"print(classification_report(y_test, pred))","96e296e4":"from sklearn.svm import LinearSVC\nmodel = LinearSVC()\nmodel.fit(scalled_X_train, y_train)\npred = model.predict(scalled_X_test)","ea23d532":"print(confusion_matrix(pred, y_test))","3923a01b":"print(classification_report(y_test, pred))","cb3704b1":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.models import Sequential","bfb79333":"model = Sequential()\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(16,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(8,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","be1a19e6":"\nmodel.fit(x=scalled_X_train, y=y_train, epochs=50, validation_data=(scalled_X_test, y_test))","0991213f":"model_loss = pd.DataFrame(model.history.history)\nmodel_loss.plot()","42cc717b":"pred = model.predict(scalled_X_test)","1d28bf53":"pred = np.round(pred)","86af4b9c":"print(confusion_matrix(pred, y_test))","5a546265":"print(classification_report(y_test, pred))","8392346b":"Droping Male coulmn since it is just opposite of female","3592c4f4":"Distribution of Insured vs Non Insured","cd48d24b":"LinearSVC gives just 91% accuracy, lets try with  ANN","2938503d":"Only 812 People don't have Driving Liscense","21e32971":"Extream Gradient Booost also give 99% but Random forest does  better when we compare with confusion matrix.","d4817dbb":"WOW it predicts with 99% accuracy with Random Forest , lets try with xgboost, linearsvc and ANN as well.","d6ae32ec":"Deleting Driving Liscense since it has only 1% correlation with response and data is highly uneven.\nSimilarly deleting the Region_Code and vintage.","f6dcb8ba":"Let's Convert Sex in categorical values","5ef2d006":"Let's conver Vehicle Age into categorical values","5f12d485":"Since Response distribution is highly uneven we need to balance them with help of over srampling or undersampling. imblearn is the python module help us to do that.","eb24d610":"It appears randon forest gives the best performance.","db97e8f1":"Check for Male\/Female Dsitribution.","fc8c1576":"Looks like more then Rs 120000 premiums are outliers hence removing them","d11241c0":"Let's check the distribution of Policy Buyer vs non Buyer","5fe85290":"Vehicle Damage yes and no is just opposite so, both of them is not required.","6ec05940":"Check for any missing values","e406d944":"Out 3 age column one of them is not required."}}