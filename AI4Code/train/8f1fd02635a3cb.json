{"cell_type":{"03cd5f19":"code","6810a4b3":"code","8effc9fd":"code","3e59d11f":"code","16d5a70f":"code","f20725ea":"code","7ec663e5":"code","93078c9e":"code","9d6b2a5e":"code","9ab9bb68":"code","dc08d5b7":"code","bddf7fb9":"code","1e4c60ba":"code","e3402394":"code","9aea2237":"code","262b8224":"code","5958eba4":"markdown","21a5ec6d":"markdown","3417ca04":"markdown"},"source":{"03cd5f19":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir())","6810a4b3":"#reading the data\nplaystore_df = pd.read_csv(\"..\/input\/googleplaystore.csv\")\n\nplaystore_df.head()","8effc9fd":"#removing duplicates\nplaystore_df = playstore_df.drop_duplicates(['App'], keep='first')\n\n#removing null values\nplaystore_df.dropna(how='any', inplace=True)  # Dropping Missing Values\n\n# Converting to int\nplaystore_df['Reviews'] = playstore_df['Reviews'].apply(lambda x: int(x) if str(x).isnumeric() == True else x )\nplaystore_df['Reviews'] = playstore_df['Reviews'].astype(int)\n\n#Size - Removing 'M' and mutltiplying by 10^3 to convert to KB\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: str(x).replace('Varies with device','NaN') if 'Varies with device' in x else x)\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: float(str(x).rstrip('M'))*(10**3) if 'M' in str(x) else x)\nplaystore_df['Size'] = playstore_df['Size'].apply(lambda x: float(str(x).rstrip('k')) if 'k' in str(x) else x)\nplaystore_df = playstore_df[~(playstore_df['Size'] == 'NaN')]\nplaystore_df['Size'] = playstore_df['Size'].astype(int)\n\n# Removing '+' and ','\nplaystore_df['Installs'] = playstore_df['Installs'].str.rstrip('+').str.replace(',','')\nplaystore_df['Installs'] = playstore_df['Installs'].astype(int) #Converting to int\n\n# Removing '$'\nplaystore_df['Price'] =  playstore_df['Price'].apply(lambda x : float(str(x).lstrip('$')) if '$' in str(x) else x)\nplaystore_df['Price'] = playstore_df['Price'].astype(float) #converting to float","3e59d11f":"playstore_df.head()\n","16d5a70f":"#total categories\nplaystore_df['Category'].nunique()","f20725ea":"#distribution of apps(category-wise)\ncat_df = playstore_df['Category'].value_counts().head(10).to_frame().reset_index()\ndata = cat_df.Category\nrecipe = cat_df['index']\n\nfig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(aspect=\"equal\"))\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),horizontalalignment=horizontalalignment, **kw)\n\nplt.show()","7ec663e5":"#rating wise distribution\nratings = playstore_df['Rating']\n\nplt.style.use('fivethirtyeight')\nplt.figure(figsize=(10,12))\n\nplt.subplot(2,1,1)\nplt.hist(ratings, bins=None)\nplt.title('Rating Distribution', fontsize=22, color='#191970')\nplt.xlabel('Ratings', fontsize=14, color='#191970')\n\nplt.subplot(2,1,2)\nsns.set(style=\"whitegrid\")\nsns.stripplot(data=ratings, jitter=True, orient='h')","93078c9e":"#top 10 app categories in playstore\ndf_catinst = playstore_df[['Category', 'App']].groupby(['Category']).\\\n                          count().sort_values('App', ascending=0).head(10).reset_index()\n\nplt.figure(figsize=(12,8))\nsns.set_style(\"darkgrid\")\nax=sns.barplot(x=df_catinst.Category, \n               y=df_catinst.App, \n               data=df_catinst, \n               palette='YlGnBu_r')\n\nfor p in ax.patches:\n    ax.text(p.get_x()+0.3, p.get_height()+48, p.get_height(), \\\n            fontsize=11, color='black', rotation=15)\n\nax.set_xlabel('Categories',fontsize=16, fontweight='bold', color='#191970')\nax.set_ylabel('Number of Apps', fontsize=16, fontweight='bold', color='#191970')","9d6b2a5e":"#best performing categories\ndf_categeories = playstore_df.groupby('Category').filter(lambda x: len(x) >= 120)\n\nplt.figure(figsize=(13,10))\nsns.boxplot(y=df_categeories.Rating, x=df_categeories.Category,data=playstore_df);\n\nplt.xticks(rotation=50)\nax.set_xlabel('Categories',fontsize=16, fontweight='bold', color='#191970', )\nax.set_ylabel('Ratings', fontsize=16, fontweight='bold', color='#191970')","9ab9bb68":"#installs per category\ntemp_df = playstore_df.groupby(['Category'])\\\n                  .agg({'Installs':'sum'})\\\n                  .sort_values(by='Installs',ascending=False).reset_index()\n\nplt.figure(figsize=(13,17))\nsns.set_style(\"darkgrid\")\n\nsns.barplot(x=temp_df['Installs'], \n            y=temp_df['Category'], \n            linewidth=2, \n            edgecolor=\"k\"*len(temp_df), \n            palette=\"Blues_r\" )\nplt.yticks(rotation=10)\n\nplt.xlabel('Installs', fontsize=15, color='#191970')\nplt.ylabel('Categories', fontsize=15, color='#191970')","dc08d5b7":"# % ofvfree vs paid apps\nplt.pie(playstore_df.Type.value_counts(), labels=['Free', 'Paid'], autopct='%1.1f%%')\n","bddf7fb9":"newVer = []\n\nfor row in playstore_df['Android Ver']:\n    try:\n        newrow = float(row[:2])\n    except:\n        newrow = 0  # When the value is - Varies with device\n    \n    newVer.append(newrow)\n    \nplaystore_df['Android Ver'] =  newVer\n\nplaystore_df['Android Ver'].value_counts()","1e4c60ba":"#android version support\nsns.countplot(playstore_df['Android Ver'])\n","e3402394":"#best performing apps\ndf_temp = playstore_df[(playstore_df.Installs >= 1000000)\n           & (playstore_df.Rating >= 3.5)\n           & (playstore_df.Reviews >=10000)][['App','Category','Rating','Size','Type','Installs']].sort_values('Installs', ascending=0)","9aea2237":"# top 7 best performing free apps\ndf_freeapp = df_temp[(df_temp.Type == 'Free')][['App']].head(7)\ndf_freeapp","262b8224":"#top 7 best performing paid apps\ndf_freeapp = df_temp[(df_temp.Type == 'Paid')][['App']].head(7)\ndf_freeapp","5958eba4":"########The graphs clearly show that most of the apps have an average rating between 4.0 and 4.5.\n\nVery few apps have an averating rating below 2.5","21a5ec6d":"########Family, Game and Tools have the highest presence on Playstore","3417ca04":"####### Most of the apps support Android 4.0 and above"}}