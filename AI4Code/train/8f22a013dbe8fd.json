{"cell_type":{"fefd3bc7":"code","bc5020c9":"code","f4458825":"code","81a8d2a0":"code","26ce6e89":"code","ea0d0fda":"code","7ba168f8":"code","7d91ab41":"code","91317280":"code","6ef81fe1":"code","d9198e16":"code","9fee665e":"code","c8848763":"code","e3f1922d":"code","5623e3a3":"code","6557abae":"code","9cadeac6":"code","702bd361":"code","5fe2f1d9":"code","9181b5b1":"code","ca8d3282":"code","7cebf7ad":"code","feca7b1d":"code","a58b0a6d":"code","4d0b6512":"code","6f7d6501":"code","98035e6d":"code","4977233a":"code","e70d18b3":"code","18f6bf94":"code","bdd5a376":"code","3d9fd524":"code","4348eb2f":"code","6fe66be1":"code","97e76191":"code","e52ecd15":"code","45f2a8c0":"code","fe729c5d":"code","5ac24bcf":"code","668d97f2":"code","775e33ec":"code","a72433b8":"code","2b906dcd":"code","c94b3e1b":"code","87f9cfb5":"code","d0b0bf5c":"code","552464af":"code","c417d28e":"code","dbce5c51":"code","38cc352b":"code","bf999764":"code","c276526a":"code","76927954":"code","d17c1146":"code","261584d2":"code","5b9cde0b":"code","c712b73c":"code","09a9dd62":"code","577ccc6d":"code","cddeaec6":"code","4b2b746e":"code","1dd87fba":"markdown","672e6e3f":"markdown","37ebd90f":"markdown","d1a61e04":"markdown","40bc8cbd":"markdown","ebd32f37":"markdown","e111ee97":"markdown","95edf993":"markdown","5740ad81":"markdown","767ea099":"markdown","4dd0d162":"markdown","80982647":"markdown","03f7ad55":"markdown","38a5ba65":"markdown","3d3fd18e":"markdown","6f65ab57":"markdown","7264afe3":"markdown","777fb11b":"markdown","e8ff7297":"markdown","518eb0f8":"markdown","751a1f93":"markdown","fa00c5db":"markdown","c300c407":"markdown","477ec172":"markdown","8566a0d3":"markdown","e6d30135":"markdown","aede5541":"markdown","a41ddd81":"markdown","b32b1b00":"markdown","245e8a6a":"markdown","7944dd48":"markdown","2e66a443":"markdown","4289bd52":"markdown","221c667b":"markdown","ba4025d2":"markdown","ecba3727":"markdown","73c8d392":"markdown","be370929":"markdown","7a32aa6a":"markdown","b761379b":"markdown","6df6bec8":"markdown","ead59360":"markdown","813f7494":"markdown"},"source":{"fefd3bc7":"%%javascript\n$.getScript('https:\/\/kmahelona.github.io\/ipython_notebook_goodies\/ipython_notebook_toc.js')","bc5020c9":"# Import the python libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nget_ipython().run_line_magic('matplotlib', 'inline')\nsns.set(style='white', context='notebook', palette='deep')\nimport warnings\nwarnings.filterwarnings('ignore')\n","f4458825":"# load the data\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nIDtest = pd.DataFrame(test[\"PassengerId\"])","81a8d2a0":"test.info() # We have 891 observations & 12 columns. See the mix of variable types.","26ce6e89":"test.info() # We have 417 observations & 11 columns (no response 'Survived' column).","ea0d0fda":"train_na = (train.isnull().sum() \/ len(train)) * 100\ntrain_na = train_na.drop(train_na[train_na == 0].index).sort_values(ascending=False)[:30]\nmiss_train = pd.DataFrame({'Train Missing Ratio' :train_na})\nmiss_train.head()","7ba168f8":"test_na = (test.isnull().sum() \/ len(test)) * 100\ntest_na = test_na.drop(test_na[test_na == 0].index).sort_values(ascending=False)[:30]\nmiss_test = pd.DataFrame({'Test Missing Ratio' :test_na})\nmiss_test.head()","7d91ab41":"# Fill empty and NaNs values with NaN\ntrain = train.fillna(np.nan)\ntest = test.fillna(np.nan)","91317280":"# Analyze the count of survivors by Pclass\n\nax = sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train)\ntrain[['Pclass', 'Survived']].groupby(['Pclass']).count().sort_values(by='Survived', ascending=False)","6ef81fe1":"# Analyze the Survival Probability by Pclass\n\ng = sns.barplot(x=\"Pclass\",y=\"Survived\",data=train)\ng = g.set_ylabel(\"Survival Probability\")\ntrain[['Pclass', 'Survived']].groupby(['Pclass']).mean().sort_values(by='Survived', ascending=False)","d9198e16":"# Count the number of passengers by gender\nax = sns.countplot(x=\"Sex\", hue=\"Survived\", data=train)\n\n# Analyze survival count by gender\ntrain[[\"Sex\", \"Survived\"]].groupby(['Sex']).count().sort_values(by='Survived', ascending=False)","9fee665e":"# Analyze the Survival Probability by Gender\n\ng = sns.barplot(x=\"Sex\",y=\"Survived\",data=train)\ng = g.set_ylabel(\"Survival Probability\")\ntrain[[\"Sex\", \"Survived\"]].groupby(['Sex']).mean().sort_values(by='Survived', ascending=False)","c8848763":"# Let's explore the distribution of age by response variable (Survived)\nfig = plt.figure(figsize=(10,8),)\naxis = sns.kdeplot(train.loc[(train['Survived'] == 1),'Age'] , color='g',shade=True, label='Survived')\naxis = sns.kdeplot(train.loc[(train['Survived'] == 0),'Age'] , color='b',shade=True,label='Did Not Survived')\nplt.title('Age Distribution - Surviver V.S. Non Survivors', fontsize = 20)\nplt.xlabel(\"Passenger Age\", fontsize = 12)\nplt.ylabel('Frequency', fontsize = 12);","e3f1922d":"sns.lmplot('Age','Survived',data=train)\n\n# We can also say that the older the passenger the lesser the chance of survival","5623e3a3":"# Analyze the count of survivors by SibSP\n\nax = sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train)\ntrain[['SibSp', 'Survived']].groupby(['SibSp']).count().sort_values(by='Survived', ascending=False)","6557abae":"# Analyze probability of survival by SibSP\n\ng  = sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train,kind=\"bar\", size = 7 ,palette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")\ntrain[[\"SibSp\", \"Survived\"]].groupby(['SibSp']).mean().sort_values(by='Survived', ascending=False)","9cadeac6":"# Analyze the count of survivors by Parch\n\nax = sns.countplot(x=\"Parch\", hue=\"Survived\", data=train)\ntrain[['Parch', 'Survived']].groupby(['Parch']).count().sort_values(by='Survived', ascending=False)","702bd361":"# Analyze the Survival Probability by Parch\n\ng  = sns.factorplot(x=\"Parch\",y=\"Survived\",data=train,kind=\"bar\", size = 7 ,palette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"Survival Probability\")\ntrain[[\"Parch\", \"Survived\"]].groupby(['Parch']).mean().sort_values(by='Survived', ascending=False)","5fe2f1d9":"train['Ticket'].head()","9181b5b1":"from scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\nsns.distplot(train['Fare'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['Fare'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n           loc='best')\nplt.ylabel('Frequency')\nplt.title('Fare distribution')","ca8d3282":"# Let's check the unique values\ntrain['Cabin'].unique()","7cebf7ad":"# Analyze the count of survivors by Embarked variable\n\nax = sns.countplot(x=\"Embarked\", hue=\"Survived\", data=train)\ntrain[['Embarked', 'Survived']].groupby(['Embarked']).count().sort_values(by='Survived', ascending=False)","feca7b1d":"# Analyze the Survival Probability by Embarked\n\ng  = sns.factorplot(x=\"Embarked\",y=\"Survived\",data=train,kind=\"bar\", size = 7 ,palette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")\ntrain[[\"Embarked\", \"Survived\"]].groupby(['Embarked']).mean().sort_values(by='Survived', ascending=False)","a58b0a6d":"# Age, Pclass & Survival\nsns.lmplot('Age','Survived',data=train,hue='Pclass')","4d0b6512":"# Age, Embarked, Sex, Pclass\ng = sns.catplot(x=\"Age\", y=\"Embarked\",  hue=\"Sex\", row=\"Pclass\",   data=train[train.Embarked.notnull()], \norient=\"h\", height=2, aspect=3, palette=\"Set3\",  kind=\"violin\", dodge=True, cut=0, bw=.2)","6f7d6501":"# Relation among Pclass, Gender & Survival Rate\ng = sns.catplot(x=\"Sex\", y=\"Survived\", col=\"Pclass\", data=train, saturation=.5, \n                kind=\"bar\", ci=None, aspect=.6)","98035e6d":"# Relation among SibSP, Gender & Survival Rate\ng = sns.catplot(x=\"Sex\", y=\"Survived\", col=\"SibSp\", data=train, saturation=.5, \n                kind=\"bar\", ci=None, aspect=.6)","4977233a":"# Relation among Parch, Gender & Survival Rate\ng = sns.catplot(x=\"Sex\", y=\"Survived\", col=\"Parch\", data=train, saturation=.5, \n                kind=\"bar\", ci=None, aspect=.6)","e70d18b3":"# Let's combining train & test for quick feature engineering. \n# Variable source is a kind of tag which indicates data source in combined data\ntrain['source']='train'\ntest['source']='test'\ncombdata = pd.concat([train, test],ignore_index=True)\nprint (train.shape, test.shape, combdata.shape)","18f6bf94":"# Let's check the data\ncombdata.head()","bdd5a376":"# PassengerID - Drop PassengerID\ncombdata.drop(labels = [\"PassengerId\"], axis = 1, inplace = True)","3d9fd524":"# Pclass - Use as it is\ncombdata['Pclass'].unique()","4348eb2f":"combdata['Title'] = combdata.Name.map( lambda x: x.split(',')[1].split( '.' )[0].strip())\n\n# inspect the amount of people for each title\ncombdata['Title'].value_counts()","6fe66be1":"# Name - Create 4 major categories & analyze the survival rate\n\ncombdata['Title'] = combdata['Title'].replace('Mlle', 'Miss')\ncombdata['Title'] = combdata['Title'].replace(['Mme','Lady','Ms'], 'Mrs')\ncombdata.Title.loc[ (combdata.Title !=  'Master') & (combdata.Title !=  'Mr') & \n                   (combdata.Title !=  'Miss')  & (combdata.Title !=  'Mrs')] = 'Others'\n\n# inspect the correlation between Title and Survived\ncombdata[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","97e76191":"# Create dummy variable & drop variable Name\n\ncombdata = pd.get_dummies(combdata, columns = [\"Title\"])","e52ecd15":"# Drop the variable Name\ncombdata = combdata.drop(labels=['Name'], axis=1)","45f2a8c0":"# Sex - Create dummy variables\ncombdata[\"Sex\"] = combdata[\"Sex\"].map({\"male\": 0, \"female\":1}) \n# combdata = pd.get_dummies(combdata, columns = [\"Sex\"])","fe729c5d":"# Create a variable representing family size from SibSp and Parch\ncombdata[\"Fsize\"] = combdata[\"SibSp\"] + combdata[\"Parch\"] + 1\n\n# Analyze the correlation between Family and Survived\ncombdata[['Fsize', 'Survived']].groupby(['Fsize'], as_index=False).mean()","5ac24bcf":"# Check the count\ncombdata[\"Fsize\"].value_counts()","668d97f2":"# Analyze the Survival Probability by Fsize\n\ncombdata.Fsize = combdata.Fsize.map(lambda x: 0 if x > 4 else x)\ng  = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=combdata,kind=\"bar\", size = 7 ,palette = \"muted\")\ng.despine(left=True)\ng = g.set_ylabels(\"Survival Probability\")\ncombdata[[\"Fsize\", \"Survived\"]].groupby(['Fsize']).mean().sort_values(by='Survived', ascending=False)","775e33ec":"# Check the count by Family Size now\ncombdata['Fsize'].value_counts()","a72433b8":"# Drop the variable Parch\ncombdata = combdata.drop(labels='Parch', axis=1)","2b906dcd":"# Ticket - Extracting the ticket prefix. This might be a representation of class\/compartment.\ncombdata[\"Ticket\"].head(10)","c94b3e1b":"combdata.Ticket = combdata.Ticket.map(lambda x: x[0])\n\n# inspect the correlation between Ticket and Survived\ncombdata[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()\n\n#combdata[[\"Ticket\", \"Survived\"]].groupby(['Ticket']).mean().sort_values(by='Survived', ascending=False)","87f9cfb5":"# Let's look at the number of people for each type of tickets\ncombdata['Ticket'].value_counts()","d0b0bf5c":"combdata['Ticket'] = combdata['Ticket'].replace(['A','W','F','L','5','6','7','8','9'], '4')\n\n# check the correlation again\ncombdata[['Ticket', 'Survived']].groupby(['Ticket'], as_index=False).mean()","552464af":"# Create dummy variables\ncombdata = pd.get_dummies(combdata, columns = [\"Ticket\"], prefix=\"T\")","c417d28e":"# Fare - Check the number of missing value\ncombdata[\"Fare\"].isnull().sum()\n\n# Only 1 value is missing so we will fill the same with median\ncombdata[\"Fare\"] = combdata[\"Fare\"].fillna(combdata[\"Fare\"].median())","dbce5c51":"# bin Fare into five intervals with equal amount of people\ncombdata['Fare-bin'] = pd.qcut(combdata.Fare,5,labels=[1,2,3,4,5]).astype(int)\n\n# inspect the correlation between Fare-bin and Survived\ncombdata[['Fare-bin', 'Survived']].groupby(['Fare-bin'], as_index=False).mean()","38cc352b":"# Cabin - Replace the missing Cabin number by the type of cabin unknown 'U'\ncombdata[\"Cabin\"] = pd.Series([i[0] if not pd.isnull(i) else 'U' for i in combdata['Cabin'] ])","bf999764":"# Let's plot the survival probability by Cabin\ng  = sns.factorplot(x=\"Cabin\",y=\"Survived\",data=combdata,kind=\"bar\", size = 7 ,\n                    palette = \"muted\",order=['A','B','C','D','E','F','G','T','U'])\ng.despine(left=True)\ng = g.set_ylabels(\"survival probability\")","c276526a":"combdata = combdata.drop(labels='Cabin', axis=1)","76927954":"combdata = combdata.drop(labels='Embarked', axis=1)","d17c1146":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\ncombdata_temp = combdata[['Age','Title_Master','Title_Miss','Title_Mr','Title_Mrs','Title_Others','Fare-bin','SibSp']]\n\nX  = combdata_temp.dropna().drop('Age', axis=1)\nY  = combdata['Age'].dropna()\nholdout = combdata_temp.loc[np.isnan(combdata.Age)].drop('Age', axis=1)\n\nregressor = RandomForestRegressor(n_estimators = 300)\n#regressor = GradientBoostingRegressor(n_estimators = 500)\nregressor.fit(X, Y)\ny_pred = np.round(regressor.predict(holdout),1)\ncombdata.Age.loc[combdata.Age.isnull()] = y_pred\n\ncombdata.Age.isnull().sum(axis=0) ","261584d2":"bins = [ 0, 4, 12, 18, 30, 50, 65, 100] # This is somewhat arbitrary...\nage_index = (1,2,3,4,5,6,7)\n\ncombdata['Age-bin'] = pd.cut(combdata.Age, bins, labels=age_index).astype(int)\ncombdata[['Age-bin', 'Survived']].groupby(['Age-bin'],as_index=False).mean()","5b9cde0b":"# Drop the variables we don't need\n\ncombdata =combdata.drop(labels=['Age', 'Fare', 'SibSp'],axis = 1)","c712b73c":"## Separate train dataset and test dataset using the index variable 'source'\n\ntrain_df = combdata.loc[combdata['source']==\"train\"]\ntest_df = combdata.loc[combdata['source']==\"test\"]\ntest_df.drop(labels=[\"Survived\"],axis = 1,inplace=True)\n\ntrain_df.drop(labels=[\"source\"],axis = 1,inplace=True)\ntest_df.drop(labels=[\"source\"],axis = 1,inplace=True)\n\ntest_df.info()","09a9dd62":"## Separate train features and label \n\ntrain[\"Survived\"] = train[\"Survived\"].astype(int)\nY_train = train[\"Survived\"]\nX_train = train_df.drop(labels = [\"Survived\"],axis = 1)\n\nX_train.info()","577ccc6d":"import keras \nfrom keras.models import Sequential # intitialize the ANN\nfrom keras.layers import Dense      # create layers\n\n# Initialising the NN\nmodel = Sequential()\n\n# layers\nmodel.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu', input_dim = 17))\nmodel.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n\n# Train the ANN\nmodel.fit(X_train, Y_train, batch_size = 32, epochs = 200)","cddeaec6":"scores = model.evaluate(X_train, Y_train, batch_size=30)\nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","4b2b746e":"y_pred = model.predict(test_df)\ny_final = (y_pred > 0.5).astype(int).reshape(test_df.shape[0])\n\noutput = pd.DataFrame({'PassengerId': IDtest['PassengerId'], 'Survived': y_final})\n\n#output = pd.concat([IDtest,y_final],axis=1)\noutput.to_csv('Neural Network Prediction.csv', index=False)","1dd87fba":"**Name**\n\nNot relevant from analysis & modeling perspective. We will drop this feature later after creating a new variable as Title.","672e6e3f":"**What would be the workflow?**\n\n**1. Problem Identification**\n\n**2. What data do we have?**\n\n**3. Exploratory data analysis**\n\n**4. Feature engineering**\n\n**5. Creating a model using Keras**\n\n**6. Model evaluation**\n\n**7. Conclusions**\n\nThat's all you need to solve a data science problem.","37ebd90f":"**Cabin**\n\nAlphanumeric variable. \n\n687 missing values in train & 327 missing values in test data - which needs to be treated. We can create more features using this Cabin variable. ","d1a61e04":"**Ticket**\n\nThis variable has alphanumeric value which might not be related to Survival directly but we can use this variable to create some additional features.","40bc8cbd":"# Problem Identification\n![Titanic.jpg](attachment:Titanic.jpg)\n\n**Best Practice -** The most important part of any project is correct problem identification. Before you jump to \"How to do this\" part like typical Data Scientists, understand \"What\/Why\" part.  \nUnderstand the problem first and draft a rough strategy on a piece of paper to start with. Write down things like what are you expected to do & what data you might need or let's say what all algorithms you plan to use. \n\nNow the [Titanic challenge](https:\/\/www.kaggle.com\/c\/titanic\/) hosted by Kaggle is a competition in which the goal is to **predict the survival or the death of a given passenger based on a set of variables describing  age, sex, or passenger's class on the boat**.\n\n![](http:\/\/www.tyro.com\/content\/uploads\/2016\/04\/blog-twenty-one-business-icebergs-sink-business-280416.jpg)\n\nSo it is a classification problem and you are expected to predict Survived as 1 and Died as 0.","ebd32f37":"# Feature engineering\n![FE.png](attachment:FE.png)\n\nThis kernel is based on classic \"**LESS IS MORE**\" approach so we will try some iterations of feature addition and deletion and will try to keep the ones which give the best output.","e111ee97":"\n\nWhat we need to do to process following variables  - \n\n**PassengerID** - No action required\n\n**PClass** - Have only 3 numerical values. We will use it as it is.\n\n**Name** - Can be used to create new variable Title by extracting the salutation from name.\n\n**Sex** - Create dummy variables\n\n**Age** - Missing value treatment, followed by creating bins for this feature\n\n**SibSP** - Drop the variable after using it to create few additional features\n\n**Parch** - Drop the variable after using it to create few additional features\n\n**Ticket** - Create dummy variables post feature engineering\n\n**Fare** - Create bins for this feature\n\n**Cabin** - Drop the variable after testing the importance\n\n**Embarked** - Drop the variable after testing the importance","95edf993":"# Model evaluation","5740ad81":"**Cabin**","767ea099":"**SibSP**","4dd0d162":"Based on data above, female passengers had better chances of survival than male passengers","80982647":"The guided approach explained here will help you to understand how you should design and approach Data Science problems. Though there are many ways to do the same analysis, I have used the codes which I found more efficient and helpful.\n\nThe idea is just to show you the path, try your own ways and share the same with others.","03f7ad55":"# Conclusion\n![Conclusion.png](attachment:Conclusion.png)\n\nTitle, Sex_Female, Fare & PClass seems to be common features preferred for classification.\n\nWhile Title & Age feature represents the Age category of passengers the features like Fare, PClass, Cabin etc. represents the economic status. Based on our findings we can conclude that Age, Gender & features representing social\/economic status were primary factors affecting the survival of passenger.\n","38a5ba65":"**Sex**","3d3fd18e":"**SibSP**\n\nThis variable refers to number of siblings\/spouse onboard. SibSP = 1 and SibSP = 2 shows higher chances of survival.","6f65ab57":"**Pclass**","7264afe3":"**Name**","777fb11b":"**Sex**\n\nBased on analysis below, female had better chances of survival. \n\n![](https:\/\/www.ajc.com\/rf\/image_large\/Pub\/p9\/AJC\/2018\/07\/12\/Images\/newsEngin.22048809_071418-titanic_Titanic-Image-7--2-.jpg)","e8ff7297":"**Creating Family Size variable using SibSp & Parch**","518eb0f8":"**PassengerID**","751a1f93":"**If you like this notebook or find this notebook helpful, Please upvote and\/or leave a comment**\n![Good%20Bye.png](attachment:Good%20Bye.png)","fa00c5db":"**Parch**\n\nParch indicates number of parents \/ children aboard the Titanic. Note that Parch = 3 and Parch = 1 shows higher survival probabilities. ","c300c407":"# Final submission","477ec172":"**Ticket**","8566a0d3":"**Fare**","e6d30135":"The Fare variable is right skewed. \nSo either we can transform this variable using log function and make it more normally distributed or we can create bins. We will do this during feature engineering process & decide what works best.","aede5541":"# What data do we have?\n![Data.jpg](attachment:Data.jpg)\n\nLet's import necessary libraries & bring in the datasets in Python environment first. Once we have the datasets in Python environment we can slice & dice the data to understand what we have and what is missing.","a41ddd81":"**Fare**\n\nLet's check the distribution first.","b32b1b00":"**Age**\n\nThe insight below connects back to \"Ladies and Kids First\" scene of the movie. It shows that a good number of babies & young kids survived.","245e8a6a":"Survival rate improves with family size but not beyond family size 4 so we can combine the family size > 4 together","7944dd48":"**Embarked**","2e66a443":"Most of these tickets belong to category 1, 2, 3, S, P, C. Based on value counts and average survival, we can put all other ticket categories into a new category '4'.","4289bd52":"**Parch**","221c667b":"**Additional analysis**\n\nLet's create few additional charts to see how different variables are related.","ba4025d2":"**Embarked**\n\nC = Cherbourg, Q = Queenstown, S = Southampton\n\nLet's explore the variable with Survival rate. Embarked represents port of embarkation. As the analysis output below suggests Emabrked C shows high probabilities of survival.","ecba3727":"<h1 id=\"tocheading\">Table of Contents<\/h1>\n<div id=\"toc\"><\/div>","73c8d392":"**Pclass**\n\nPclass is categorical variable. Let's look at the distribution.","be370929":"# Build a model\n![NN%20Model.png](attachment:NN%20Model.png)","7a32aa6a":"**Age**\n\nThere are 2 ways of handling the missing age values.\n1. Fill the age with median age of similar rows according to Sex, Pclass, Parch & SibSP\n2. or use a quick machine learning algorithm to predict the age values based on Age, Title, Fare & SibSP\n\nI used both of them to test which one works better. One of the code will be markdown to avoid confusion.","b761379b":"# Exploratory data analysis\n![analysis.png](attachment:analysis.png)\n\nOne important aspect of machine learning is to ensure that the variables show almost the same trend across train & test data. If not, it would lead to overfitting because model is representing a relationship which is not applicable in the test dataset. \n\nI will give you one example here. As we do variable analysis, try to replicate (wherever applicable) the code for test data and see if there is any major difference in data distribution. \n\n**Example** - Let's start with finding the number of missing values. If you compare the output you will see that missing value percentages do not vary much across train & test datasets.\n\nUse the groupby\/univariate\/bivariate analysis method to compare the distribution across Train & Test data","6df6bec8":"Approximately 62% of Pclass = 1 passenger survived followed by 47% of Pclass2.","ead59360":"Tickets are of 2 types here. \n\nType 1 has only number and \nType 2 is a combination of some code followed  by the number. Let's extract the first digit and compare it with survival probability.","813f7494":"**PassengerId**\n\nNot relevant from modeling perspective so we will drop this variable later"}}