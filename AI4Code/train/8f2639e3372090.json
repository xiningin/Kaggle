{"cell_type":{"e375f89d":"code","37c61fff":"code","7d655a22":"code","954764f7":"code","99b427dc":"code","d0c289b3":"code","5e6c8b31":"code","df577261":"code","90b97623":"code","9f6cb997":"code","a4a978a8":"code","2c2a7ccd":"code","00880e4e":"code","8e71d946":"code","cf7ed368":"code","e4d43f3f":"code","2445210d":"code","039f4c96":"code","86069ce5":"code","519f7546":"code","6225dbd3":"code","2bc7aec7":"code","1186db0c":"code","7e2896fe":"code","d85aa8da":"code","a5c7e2db":"code","4efe8fb4":"code","57c8c2ba":"markdown","05b30bdc":"markdown","a0e422b4":"markdown","153a330b":"markdown","fd5944ee":"markdown","317633f4":"markdown","9df24cc8":"markdown","2ec23abe":"markdown","0f3c12a8":"markdown","8b153a45":"markdown","c78b3a1f":"markdown","846b4e3b":"markdown","9617404e":"markdown","36eb7778":"markdown","d315d16c":"markdown","8f912b0f":"markdown","a2508268":"markdown"},"source":{"e375f89d":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport nltk, string\nfrom nltk.corpus import stopwords \nfrom nltk.stem import WordNetLemmatizer\n\nimport covid19_tools as cvt\n\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nw_tokenizer = nltk.tokenize.WhitespaceTokenizer()\nlemmatizer = nltk.stem.WordNetLemmatizer()\n\nstop_words = set(stopwords.words('english'))\n\n'''remove punctuation, lowercase, stem'''\nremove_punctuation_map = dict((ord(char), ' ') for char in string.punctuation)    \ndef normalize(text):\n    return nltk.word_tokenize(text.lower().translate(remove_punctuation_map))\n\ndef clean_text(text):\n    text = text.lower().translate(remove_punctuation_map)\n    \n    return ' '.join(lemmatizer.lemmatize(w) for w in w_tokenizer.tokenize(text))\n\ncovid19_synonyms = ['covid',\n                    'coronavirus disease 19',\n                    'sars cov 2', # Note that search function replaces '-' with ' '\n                    '2019 ncov',\n                    '2019ncov',\n                    r'2019 n cov\\b',\n                    r'2019n cov\\b',\n                    'ncov 2019',\n                    r'\\bn cov 2019',\n                    'coronavirus 2019',\n                    'wuhan pneumonia',\n                    'wuhan virus',\n                    'wuhan coronavirus',\n                    r'coronavirus 2\\b']\n\ndf=pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv')\nprint ('Size of literature Set on 3rd April 47298,18')\nprint ('Size of literature Set', df.shape)\n ","37c61fff":"\n   df_queries = pd.DataFrame({'question': ['Resources to support skilled nursing facilities and long term care facilities',\n    'Mobilization of surge medical staff to address shortages in overwhelmed communities',\n    'Age-adjusted mortality data for Acute Respiratory Distress Syndrome (ARDS) with\/without other organ failure \u2013 particularly for viral etiologies',\n    'Extracorporeal membrane oxygenation (ECMO) outcomes data of COVID-19 patients',\n     'Outcomes data for COVID-19 after mechanical ventilation adjusted for age',\n     'Knowledge of the frequency, manifestations, and course of extrapulmonary manifestations of COVID-19, including, but not limited to, possible cardiomyopathy and cardiac arrest',\n     'Application of regulatory standards (e.g., EUA, CLIA) and ability to adapt care to crisis standards of care level',\n     'Approaches for encouraging and facilitating the production of elastomeric respirators, which can save thousands of N95 masks',\n     'Best telemedicine practices, barriers and faciitators, and specific actions to remove\/expand them within and across state boundaries',\n     'Guidance on the simple things people can do at home to take care of sick people and manage disease',\n     'Oral medications that might potentially work',\n     'Use of Artificial Intelligence AI in real-time health care delivery to evaluate interventions, risk factors, and outcomes in a way that could not be done manually',\n     'Best practices and critical challenges and innovative solutions and technologies in hospital flow and organization, workforce protection, workforce allocation, community-based support resources, payment, and supply chain management to enhance capacity, efficiency, and outcomes',\n     'Efforts to define the natural history of disease to inform clinical care, public health interventions, infection prevention control, transmission, and clinical trials',\n     'Efforts to develop a core clinical outcome set to maximize usability of data across a range of trials',\n     'Efforts to determine adjunctive and supportive interventions that can improve the clinical outcomes of infected patients (e.g. steroids, high flow oxygen)',\n]})\n    \n# # test just one query\n\n# df_queries = pd.DataFrame({'question': ['Extracorporeal membrane oxygenation (ECMO) outcomes data of patients']})","7d655a22":"#drop duplicate abstracts\ndf = df.drop_duplicates(subset='abstract', keep=\"first\")\n\nprint ('Size of literature Set after removing duplicates on 3rd April 38667,18')\nprint ('Size after removing duplicates', df.shape)\n#4\/3\/20 38667,18","954764f7":"df_queries['query_bow'] = df_queries.question.apply(clean_text)\ndf_queries['query_bow'] = df_queries['query_bow'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n","99b427dc":"df_a, covid19_counts = cvt.count_and_tag(df, covid19_synonyms, 'disease_covid19')\ndf_covid19 = df[df['tag_disease_covid19'] == True ]\ndf_covid19 = df_covid19.reset_index()\ndf_covid19 = df_covid19.drop(['index'], axis=1)\n","d0c289b3":"df_covid19['org abstract'] = df_covid19['abstract']\ndf_covid19_by_sentence = df_covid19.set_index(df_covid19.columns.drop('abstract',1).tolist())\\\n.abstract.str.split('\\. ', expand=True).stack().reset_index()\\\n.rename(columns={0:'abstract'})\n","5e6c8b31":"df_covid19_bow_full = df_covid19_by_sentence.copy()\n#df_covid19_bow_full ['bow_raw'] = df_covid19_bow_full ['title'] + \" \" + df_covid19_bow_full ['abstract']\ndf_covid19_bow_full ['bow_raw'] = df_covid19_bow_full ['abstract']","df577261":"df_covid19_bow_full['bow'] = df_covid19_bow_full.bow_raw.apply(clean_text)\ndf_covid19_bow_full['bow'] = df_covid19_bow_full['bow'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop_words)]))\n#df_covid19_bow_full.head(5)\n\ndf_covid19_bow_f = df_covid19_bow_full[df_covid19_bow_full['abstract'].map(len) > 20]\ndf_covid19_bow = df_covid19_bow_f.reset_index()\n#Subset for testing\n# df_covid19_bow_fs = df_covid19_bow_f.loc[1218:1230].copy()\n# df_covid19_bow = df_covid19_bow_fs.reset_index()\n","90b97623":"df_covid19_bow = df_covid19_bow[['title','org abstract','abstract','bow', 'cord_uid', 'journal', 'authors','publish_time', 'source_x', 'url']]\ntotal_bow = [\"\".join(x) for x in (df_queries['query_bow'])]\ntotal_bow += [\"\".join(x) for x in (df_covid19_bow['bow'])]","9f6cb997":"import tensorflow as tf\nimport tensorflow_hub as hub\nmodule_url = \"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\" #@param [\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\", \"https:\/\/tfhub.dev\/google\/universal-sentence-encoder-large\/5\"]\nmodel = hub.load(module_url)\nprint (\"module %s loaded\" % module_url)\ndef embed(input):\n  return model(input)\n\n\n","a4a978a8":"def Find_articles (index,sim_array,answer_sentence,query):\n\n    query_len = len(query)\n    \n    #df_sim_q = pd.DataFrame({'Cosine':sim_array[query_len:,index],  'Question':query.iloc[index]['question'],'Title':answer_sentence['title'], 'Abstract Sentence':answer_sentence['abstract'],'Journal':answer_sentence['journal'],'Published':answer_sentence['publish_time'],'URL':answer_sentence['url']})\n    #df_sim_q = pd.DataFrame({'Cosine':sim_array[query_len:,index],  'Abstract\u00a0Snippet':answer_sentence['abstract'],'Published':answer_sentence['publish_time'],'Title':answer_sentence['title'], 'Journal':answer_sentence['journal'],'Source':answer_sentence['source_x'],'Abstract\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0                                                                                                   p':answer_sentence['org abstract'],'URL':answer_sentence['url']})\n\n    df_sim_q = pd.DataFrame({'Cosine':sim_array[query_len:,index],  'Abstract\u00a0Snippet\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0':answer_sentence['abstract'],\\\n                             'Published':answer_sentence['publish_time'],'Title\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0':answer_sentence['title'], 'Journal':answer_sentence['journal'],\\\n                             'Source':answer_sentence['source_x'],\\\n                             'Authors':answer_sentence['authors'],\\\n                             'Abstract truncted at 1000 characters\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0':answer_sentence['org abstract'],\\\n                             'URL to full text':answer_sentence['url']})\n\n    \n    df_sim_q_sorted = df_sim_q.sort_values('Cosine',ascending = False )\n\n    df_sim_q_sample = df_sim_q_sorted[:10]\n\n    df_sim_q_sample = df_sim_q_sample.reset_index()\n    df_sim_q_sample = df_sim_q_sample.drop(['index'], axis=1)\n    df_sim_q_sample = df_sim_q_sample.drop(['Cosine'], axis=1)\n\n    df_sim_q_sample = df_sim_q_sample.apply(lambda x: x.str.slice(0, 1000))\n    df_sim_q_sample[\"Authors\"] = df_sim_q_sample[\"Authors\"].str[:100]\n    \n    return ( df_sim_q_sample)\n\nmessage_embeddings_ = embed(total_bow)\ncorr = np.inner(message_embeddings_, message_embeddings_)\n","2c2a7ccd":"results = Find_articles (0,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","00880e4e":"results = Find_articles (1,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","8e71d946":"results = Find_articles (2,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","cf7ed368":"results = Find_articles (3,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","e4d43f3f":"results = Find_articles (4,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","2445210d":"results = Find_articles (5,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","039f4c96":"results = Find_articles (6,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","86069ce5":"results = Find_articles (7,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","519f7546":"results = Find_articles (8,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","6225dbd3":"results = Find_articles (9,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","2bc7aec7":"results = Find_articles (10,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","1186db0c":"results = Find_articles (11,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","7e2896fe":"results = Find_articles (12,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","d85aa8da":"results = Find_articles (13,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","a5c7e2db":"results = Find_articles (14,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","4efe8fb4":"results = Find_articles (15,corr,df_covid19_bow,df_queries)\ndfStyler = results.style.set_properties(**{'text-align': 'left'})\ndfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n","57c8c2ba":"# Summary\n## The problem\nThis notebook is an entry in the COVID-19 Open Research Dataset Challenge task: what has been published about medical care?\n\nSpecifically, the organisers want to know what the literature reports about the following topics. Click on the topic to go a list of relevant literature:\n\n* [Resources to support skilled nursing facilities and long term care facilities](#0)\n* [Mobilization of surge medical staff to address shortages in overwhelmed communities](#1)\n* [Age-adjusted mortality data for Acute Respiratory Distress Syndrome (ARDS) with\/without other organ failure \u2013 particularly for viral etiologies](#2)\n\n* [Extracorporeal membrane oxygenation (ECMO) outcomes data of COVID-19 patients](#3)\n* [Outcomes data for COVID-19 after mechanical ventilation adjusted for age](#4)\n* [Knowledge of the frequency, manifestations, and course of extrapulmonary manifestations of COVID-19, including, but not limited to, possible cardiomyopathy and cardiac arrest](#5)\n* [Application of regulatory standards (e.g., EUA, CLIA) and ability to adapt care to crisis standards of care level](#6)\n* [Approaches for encouraging and facilitating the production of elastomeric respirators, which can save thousands of N95 masks](#7)\n* [Best telemedicine practices, barriers and faciitators, and specific actions to remove\/expand them within and across state boundaries](#8)\n* [Guidance on the simple things people can do at home to take care of sick people and manage disease](#9)\n* [Oral medications that might potentially work](#10)\n* [Use of AI in real-time health care delivery to evaluate interventions, risk factors, and outcomes in a way that could not be done manually](#11)\n* [Best practices and critical challenges and innovative solutions and technologies in hospital flow and organization, workforce protection, workforce allocation, community-based support resources, payment, and supply chain management to enhance capacity, efficiency, and outcomes](#12)\n* [Efforts to define the natural history of disease to inform clinical care, public health interventions, infection prevention control, transmission, and clinical trials](#13)\n* [Efforts to develop a core clinical outcome set to maximize usability of data across a range of trials](#14)\n* [Efforts to determine adjunctive and supportive interventions that can improve the clinical outcomes of infected patients (e.g. steroids, high flow oxygen)](#15)\n* \n\n## Proposed Solution Discussion\n\nI started by trying the methods that were successful in my entry(https:\/\/www.kaggle.com\/rdhnw1\/triage-recommender-with-cold-start) into last year's Kaggle CareerVillage competion. The method consisted of answering career related questions by comparing a new question with previously asked questions.\n\nA number of methods were tried including tfidf, word2vec, Fasttext, Global Vectors and the Universal Sentence encoder (USE).\n\nFasttext and USE seemed to produce the best performance. However for this challenge only USE has produced useful results. I think that this is because the other methods rely on a simple averaging technique to move from word to sentence embedding. This works well when the phrases being compared are similar in length but fails in this challenge where there is a huge mismatch between the length of the query and the literature. USE copes much better. \n\n\"Google\u2019s Universal Sentence Encoder encodes text into high dimensional vectors. The model is trained and optimized for greater-than-word length text, such as sentences, phrases or short paragraphs.\n\nThe input is variable length English text and the output is a 512 dimensional vector.\"\n\nMore details can be found here: https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/2\n\nI found this blog useful: https:\/\/medium.com\/@gaurav5430\/universal-sentence-encoding-7d440fd3c7c7\n\nThe encoder provides a matrix defining the similarity between a set of questions.\n\n## Method Details\n\nHere are the details of the method:\n\n**Load in the data and print out size and compare with a previous set**\n\n**Remove duplicates and compare with a previous set. **\nThis method does not remove all duplcates but it is good enough\n\n**Prepare list of queries on the literature. **\nThis is the list of questions set by the organisers. Some fine tuning on the questions can improve the results.  \n\n**Clean Text. **\nThe text is moved to lower case and is lemmatized. Stop words are removed but punctation is left\n\n**Reduce literature set to include those mentioning Covid 19 or its synonyms. **\nThis is acheived using the method supplied in covid19-tools provided by Andy White. Thank you!\n    \n**Split Abstracts into sentences. **\nThe literature source consists of a number of fields for each piece of research. Fields include the title and an summary of the research called an abstract.\n The title is too general to be useful and trying to compare a query with the abstract also produces confusing results. By comparing at the sentence level, it is possible to find interesting and relevant pieces of research.\n    \n **Find relevant research. **\n A bag of sentences is prepared by combining the queries and the abstract sentences. The USE algorithm is then used to provide a vector for each query and abstract sentence. For each query to the top ten matches with the research literature are found and displayed \n \n \n\n","05b30bdc":"## Efforts to determine adjunctive and supportive interventions that can improve the clinical outcomes of infected patients (e.g. steroids, high flow oxygen)<a id='15'><\/a>\n","a0e422b4":"#  Outcomes data for COVID-19 after mechanical ventilation adjusted for age<a id='4'><\/a>\n ","153a330b":"# Extracorporeal membrane oxygenation (ECMO) outcomes data of COVID-19 patients<a id='3'><\/a>\n    ","fd5944ee":"## Approaches for encouraging and facilitating the production of elastomeric respirators, which can save thousands of N95 masks<a id='7'><\/a>\n    ","317633f4":"## Guidance on the simple things people can do at home to take care of sick people and manage disease<a id='9'><\/a>\n ","9df24cc8":"## Efforts to develop a core clinical outcome set to maximize usability of data across a range of trials<a id='14'><\/a>\n","2ec23abe":"## Knowledge of the frequency, manifestations, and course of extrapulmonary manifestations of COVID-19, including, but not limited to, possible cardiomyopathy and cardiac arrest<a id='5'><\/a>\n  ","0f3c12a8":"## Best telemedicine practices, barriers and faciitators, and specific actions to remove\/expand them within and across state boundaries<a id='8'><\/a>\n  ","8b153a45":"## Application of regulatory standards (e.g., EUA, CLIA) and ability to adapt care to crisis standards of care level<a id='6'><\/a>","c78b3a1f":"## Efforts to define the natural history of disease to inform clinical care, public health interventions, infection prevention control, transmission, and clinical trials<a id='13'><\/a>","846b4e3b":"## Use of AI in real-time health care delivery to evaluate interventions, risk factors, and outcomes in a way that could not be done manually<a id='11'><\/a>\n   ","9617404e":"## Best practices and critical challenges and innovative solutions and technologies in hospital flow and organization, workforce protection, workforce allocation, community-based support resources, payment, and supply chain management to enhance capacity, efficiency, and outcomes<a id='12'><\/a>\n","36eb7778":"# Age-adjusted mortality data for Acute Respiratory Distress Syndrome (ARDS) with\/without other organ failure \u2013 particularly for viral etiologies<a id='2'><\/a>\n    ","d315d16c":"# Resources to support skilled nursing facilities and long term care facilities<a id='0'><\/a>","8f912b0f":"# Mobilization of surge medical staff to address shortages in overwhelmed communities<a id='1'><\/a>","a2508268":"## Oral medications that might potentially work<a id='10'><\/a>"}}