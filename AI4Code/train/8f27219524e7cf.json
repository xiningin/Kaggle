{"cell_type":{"d0a4b555":"code","c5ca4d62":"code","8a419561":"code","97746b04":"code","a0901edb":"code","e2008825":"code","beba6f6c":"code","0baa3679":"code","342f0156":"code","7f642d14":"code","d1884685":"code","b84cf4ec":"code","086c08ea":"code","8c07a684":"code","694d7234":"code","47919922":"code","205a91ea":"code","eef9361d":"code","ee5db191":"code","158aa894":"code","1a4779fd":"code","6499979a":"code","6f883c7c":"code","1ef098ac":"code","1e2459ae":"code","9fc69e61":"code","7489f97d":"code","7c54fc14":"code","a1221c25":"code","91480336":"code","6bfdfa52":"code","05378793":"code","7ff19c52":"markdown","76df24e8":"markdown","953a0cc5":"markdown","b6e3cf56":"markdown","535f2db6":"markdown","4316a281":"markdown","3f7042e7":"markdown","66bbdeb0":"markdown","0f629cc7":"markdown","976f9a35":"markdown","77baefe2":"markdown","418277a1":"markdown","52549a57":"markdown","5bed153b":"markdown","a6816ec8":"markdown","4332fd71":"markdown","c401700b":"markdown","0b49f8f4":"markdown","8b726213":"markdown","4a18e74e":"markdown"},"source":{"d0a4b555":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c5ca4d62":"data = pd.read_csv('..\/input\/pisa-2018-school-questionnaire\/CY07_MSU_SCH_QQQ.csv')","8a419561":"country_vs_code_data = pd.read_csv('..\/input\/needed-datasets-and-texts\/countries_codes_and_coordinates.csv')","97746b04":"score_file = pd.read_csv(r'..\/input\/needed-datasets-and-texts\/scores.txt')\nscore_file.to_csv(r'\/kaggle\/working\/scores.csv', index = None)","a0901edb":"scores = pd.read_csv('\/kaggle\/working\/scores.csv')","e2008825":"scores.head()","beba6f6c":"country_vs_code_data.head()","0baa3679":"country_vs_code_data.drop(['Alpha-2 code','Numeric code','Latitude (average)','Longitude (average)'], axis =1, inplace = True)","342f0156":"for i, j in enumerate(country_vs_code_data[\"Alpha-3 code\"]):\n  country_vs_code_data[\"Alpha-3 code\"][i] = j.replace('\"','').replace(' ','')","7f642d14":"data = data.merge(country_vs_code_data, \n                  left_on='CNT',\n                  right_on='Alpha-3 code', \n                  how='left').drop(['Alpha-3 code'],axis =1)","d1884685":"nan_values = data[data['Country'].isna() == True]","b84cf4ec":"data[\"Country\"][data[\"CNT\"] == \"QAZ\"] = \"Baku(Azerbaijan)\"\ndata[\"Country\"][data[\"CNT\"] == \"QRT\"] = \"Tatarstan(RUS)\"\ndata[\"Country\"][data[\"CNT\"] == \"TAP\"] = \"Chinese Taipei\"\ndata[\"Country\"][data[\"CNT\"] == \"KSV\"] = \"Kosovo\"\ndata[\"Country\"][data[\"CNT\"] == \"QCI\"] = \"B-S-J-Z (China)\"\ndata[\"Country\"][data[\"CNT\"] == \"QMR\"] = \"Moscow Region(RUS)\"","086c08ea":"data['Country'][data['Country'] == 'Moldova, Republic of'] = \"Moldova\"\ndata['Country'][data['Country'] == 'Viet Nam'] = \"Vietnam\"\ndata['Country'][data['Country'] == 'Korea, Republic of'] = \"South Korea\"\ndata['Country'][data['Country'] == 'Czech Republic'] = \"Czechia\"\ndata['Country'][data['Country'] == 'Brunei'] = \"Brunei Darussalam\"\ndata['Country'][data['Country'] == 'Russia'] = \"Russian Federation\"","8c07a684":"data = data.merge(scores, on='Country', how='left')","694d7234":"nan_values = data[data['Score'].isna() ==  True]\nnan_values['Country'].unique()","47919922":"data['Score'][data['Country'] == 'Moscow Region(RUS)'] = 481.7\ndata['Score'][data['Country'] == 'Tatarstan(RUS)'] = 481.7","205a91ea":"data['Score'][data['Country'] == 'Spain'] = 483\ndata['Score'][data['Country'] == 'Vietnam'] = 514\ndata['Score'][data['Country'] == 'Macedonia, the former Yugoslav Republic of'] = 400","eef9361d":"data.head()","ee5db191":"data.drop(['Unnamed: 0','CNTRYID','CYC','ADMINMODE','BOOKID','OECD','VER_DAT','SUBNATIO','STRATUM','Region','NatCen'], axis = 1, inplace = True)","158aa894":"data.head()","1a4779fd":"import pycountry \nimport matplotlib.pyplot as plt\nimport geopandas\nfrom geopandas import GeoDataFrame\nimport mapclassify","6499979a":"coordination_file = pd.read_csv (r'..\/input\/needed-datasets-and-texts\/\/latitude-longtitude.txt')\ncoordination_file.to_csv(r'\/kaggle\/working\/coordination.csv', index = None)","6f883c7c":"coord_data = pd.read_csv('\/kaggle\/working\/coordination.csv')","1ef098ac":"world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nworld.columns=['pop_est', 'continent', 'name', 'CODE', 'gdp_md_est', 'geometry']","1e2459ae":"data = data.merge(world,left_on = 'CNT' ,right_on='CODE', how='left')","9fc69e61":"data = data.merge(coord_data, on = 'Country', how = 'left')","7489f97d":"data = GeoDataFrame(data)","7c54fc14":"sub = data.groupby(['Country'])['latitude','longitude'].mean()\nsub[sub['latitude'].isna() == True]","a1221c25":"sub_data = data[data['geometry'].isna() == False]","91480336":"sub_data.head()","6bfdfa52":"sub_data['latitude'][sub_data['Country'] == 'Macedonia, the former Yugoslav Republic of'] = 41.6086\nsub_data['longitude'][sub_data['Country'] == 'Macedonia, the former Yugoslav Republic of'] = 21.7453","05378793":"sub_data.plot(column='Score',scheme=\"quantiles\",\n           figsize=(25, 20),\n           legend=True,cmap='Spectral',)\nplt.title('Countries and Scores',fontsize=25)\n\nplt.show()","7ff19c52":"While entering country names according to country codes here, I saw that some country names were missing and I added them.","76df24e8":"# **For World Mapping**","953a0cc5":"Now I create part of a data that the geometry values are not NaN.","b6e3cf56":"Since Moscow and Tatarstan are part of the Russian Federation, I equalized their scores.","535f2db6":"Here is the country names vs alpha-3 code data.","4316a281":"Below, I wanted to create a sub data to contain only country longitude and latitude values. Then I checked the nan values.","3f7042e7":"I dropped the unnecessary features.","66bbdeb0":"For the visualization we need country names and the scores in dataset.","0f629cc7":"Merging with the score data.\nHere, I changed the names of a few of them because the country names in the score csv did not match with the final version of the data.","976f9a35":"In here Macedonia has 'geometry' but the latitude and longitude values are missing. So I researched them on the internet and I gave the values.","77baefe2":"The data we found from the internet: Spain's score 483, Vietnam's score 514 and Makedonia's 400.","418277a1":"To see which values \u200b\u200bwere NaN, I synced it to a temporary dataset and looked at the unique values.","52549a57":"Then I used the geopandas dataset that contains the necessary features for mapping.","5bed153b":"Visualization","a6816ec8":"Here is the score data.","4332fd71":"Merging the coordination data with data.","c401700b":"# **Data Preparation**","0b49f8f4":"Coordination file for mapping","8b726213":"Merging with country-code data.","4a18e74e":"Merging the data with the world data."}}