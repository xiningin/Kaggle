{"cell_type":{"d85c13e1":"code","7672d038":"code","e09d9d2c":"code","c23103e2":"code","d4ec1486":"code","701f15d6":"code","4756b6f6":"code","b3cecff9":"code","4e2a9101":"code","001604ba":"code","7f8d8947":"code","4b35df95":"code","dce0100f":"code","af007feb":"code","ded7b8d3":"code","11234b65":"code","bdbe6e22":"code","d52b44c8":"code","23715a62":"code","947d3f91":"code","34350f47":"code","067b1ea5":"code","ca7afdf0":"markdown","a73cbf7a":"markdown","df86421f":"markdown","7fd22ee7":"markdown","e007ba62":"markdown","0835273e":"markdown","9f56ecfb":"markdown","204b359d":"markdown","bb0a50b9":"markdown"},"source":{"d85c13e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom PIL import Image\nfrom sklearn.decomposition import PCA\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n!pip install pandas_bokeh\nimport pandas_bokeh\npandas_bokeh.output_notebook()\n\nimport os\ndirectory = os.getcwd()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7672d038":"raw_list_s1 = []\nraw_list_s2 = []\n\nfor f in filenames:\n    if 'test' not in f:\n        if 'subject01' in f:\n            raw_list_s1.append(Image.open(r\"\/kaggle\/input\/yalefaces\/\" + f))\n        else:\n            raw_list_s2.append(Image.open(f\"\/kaggle\/input\/yalefaces\/\" + f))\n\nprint(len(raw_list_s1),\"images for subject01\")\nprint(len(raw_list_s2),\"images for subject02\")","e09d9d2c":"# Each image is of size (243, 320) \n\n#new_width = round(img_arr_a.shape[1]\/4)\n#new_height = round(img_arr_a.shape[0]\/4)\nnew_width = round(320\/4)\nnew_height = round(243\/4)\n\nnp_arr_list_s1 = []\nnp_arr_list_s2 = []\n\nfor img in raw_list_s1:\n    \n    # Resize image and vectorize it\n    img = img.resize((new_width, new_height),Image.ANTIALIAS)\n    img = np.array(img, dtype='int32')\n    r, c = img.shape\n    img_reshaped = np.reshape(img, (r*c), order=\"C\")#.reshape(-1, 1)\n    \n    # Add it to list\n    np_arr_list_s1.append(img_reshaped)\n\nfor img in raw_list_s2:\n    \n    # Resize image and vectorize it\n    img = img.resize((new_width, new_height),Image.ANTIALIAS)\n    img = np.array(img, dtype='int32')\n    r, c = img.shape\n    img_reshaped = np.reshape(img, (r*c), order=\"C\")#.reshape(-1, 1)\n    \n    # Add it to list\n    np_arr_list_s2.append(img_reshaped)\n    \n# Stack images, each picture is a row\nM1 = np.stack(np_arr_list_s1)\nprint(M1.shape)\n\nM2 = np.stack(np_arr_list_s2)\nprint(M2.shape)\n\nM1","c23103e2":"# Extract image from matrix and display it\nimage = M1[0]\nprint(image.shape)\nprint(image)\n\nimg_disp = np.reshape(image, (r, c), order=\"C\")\narr = img_disp.astype(dtype='uint8')\ndisplay(Image.fromarray(arr))","d4ec1486":"fig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nfor i in range(len(M1)): \n    img_disp = np.reshape(M1[i], (r, c), order=\"C\")\n    arr = img_disp.astype(dtype='uint8')\n    ax = fig.add_subplot(3, 5, i+1, xticks=[], yticks=[]) \n    ax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')\n    \nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nfor i in range(len(M2)): \n    img_disp = np.reshape(M2[i], (r, c), order=\"C\")\n    arr = img_disp.astype(dtype='uint8')\n    ax = fig.add_subplot(3, 5, i+1, xticks=[], yticks=[]) \n    ax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')","701f15d6":"fig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nM1mean = M1.mean(axis=0)\nimg_disp = np.reshape(M1mean, (r, c), order=\"C\")\narr = img_disp.astype(dtype='uint8')\nax = fig.add_subplot(1, 2, 1, xticks=[], yticks=[]) \nax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')\n\nM2mean = M2.mean(axis=0)\nimg_disp = np.reshape(M2mean, (r, c), order=\"C\")\narr = img_disp.astype(dtype='uint8')\nax = fig.add_subplot(1, 2, 2, xticks=[], yticks=[]) \nax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')","4756b6f6":"pca = PCA(n_components=6)\npca.fit(M1)\nprint(pca.explained_variance_ratio_)\n\npca.fit(M2)\nprint(pca.explained_variance_ratio_)\n\nprint(pca.components_[0])\nprint(pca.singular_values_[0])","b3cecff9":"n = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 1 Eigenfaces\")\npca.fit(M1)\nfor i in range(n):\n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","4e2a9101":"n = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 2 Eigenfaces\")\npca.fit(M2)\nfor i in range(n):\n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","001604ba":"# Get eigenfaces on mean-subtracted data\nU, s, Vh = np.linalg.svd(M1-M1mean, full_matrices=False)\n\nprint(U.shape) # left singular vectors (orthonormal)\nprint(s.shape)\nprint(Vh.shape) # right singular vectors (orthonormal)\n\n'''\n(U[:, :k] * S[:k]).dot(VT[:k, :])\nC = (U * S).dot(VT) # Covariance Matrix\n(U[:, 0:1] * S[0:1]).dot(VT[0:1, :]).shape\n'''","7f8d8947":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 255))\n\nn = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 1 Eigenfaces\")\npca.fit(M1)\nfor i in range(n):\n    \n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n\n    scaler.fit(img_disp)\n    img_disp = scaler.transform(img_disp)\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp, cmap=plt.cm.bone, interpolation='nearest')","4b35df95":"pca = PCA(n_components=6)\npca.fit(M1)\nprint(pca.explained_variance_ratio_)\n\npca.fit(M2)\nprint(pca.explained_variance_ratio_)\n\nprint(pca.components_[0])\nprint(pca.singular_values_[0])","dce0100f":"n = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 1 Eigenfaces\")\npca.fit(M1)\nfor i in range(n):\n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","af007feb":"n = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 2 Eigenfaces\")\npca.fit(M2)\nfor i in range(n):\n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","ded7b8d3":"# Get eigenfaces on mean-subtracted data\nU, s, Vh = np.linalg.svd(M1-M1mean, full_matrices=False)\n\nprint(U.shape) # left singular vectors (orthonormal)\nprint(s.shape)\nprint(Vh.shape) # right singular vectors (orthonormal)\n\n'''\n(U[:, :k] * S[:k]).dot(VT[:k, :])\nC = (U * S).dot(VT) # Covariance Matrix\n(U[:, 0:1] * S[0:1]).dot(VT[0:1, :]).shape\n'''","11234b65":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 255))\n\nn = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 1 Eigenfaces\")\npca.fit(M1)\nfor i in range(n):\n    \n    img_disp = np.reshape(pca.components_[i], (r, c), order=\"C\")\n\n    scaler.fit(img_disp)\n    img_disp = scaler.transform(img_disp)\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp, cmap=plt.cm.bone, interpolation='nearest')","bdbe6e22":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 255))\n\nn = 6 # number of eigenfaces\npca = PCA(n_components=n)\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 2 Eigenfaces\")\npca.fit(M2)\nfor i in range(n):\n    \n    img_disp = np.reshape(M2mean + pca.components_[i] * pca.singular_values_[i], (r, c), order=\"C\")\n\n    scaler.fit(img_disp)\n    img_disp = scaler.transform(img_disp)\n    arr = img_disp.astype(dtype='uint8')\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')","d52b44c8":"import scipy.sparse.linalg as ll\nimport math\n\nxc1 = M1-M1mean\nC = np.cov(M1.T)\nS1_evals, S1_evecs = ll.eigs(C, k=6)\nS1_evals = S1_evals.real\nS1_evecs = S1_evecs.real\ndim1_1 = np.dot(S1_evecs[:,0].T,xc1.T)\/math.sqrt(S1_evals[0])\ndim2_1 = np.dot(S1_evecs[:,1].T,xc1.T)\/math.sqrt(S1_evals[1])\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 1 Eigenfaces\")\nfor i in range(n):\n    img_disp = np.reshape(S1_evecs[:,i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","23715a62":"xc2 = M2-M2mean\nC = np.cov(M2.T)\nS2_evals, S2_evecs = ll.eigs(C, k=6)\nS2_evals = S2_evals.real\nS2_evecs = S2_evecs.real\ndim1_2 = np.dot(S2_evecs[:,0].T,xc2.T)\/math.sqrt(S2_evals[0])\ndim2_2 = np.dot(S2_evecs[:,1].T,xc2.T)\/math.sqrt(S2_evals[1])\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \n\nprint(\"Subject 2 Eigenfaces\")\nfor i in range(n):\n    img_disp = np.reshape(S2_evecs[:,i], (r, c), order=\"C\")\n    ax = fig.add_subplot(1, 6, i+1, xticks=[], yticks=[]) \n    ax.imshow(img_disp,  cmap=plt.cm.gray, interpolation='nearest')","947d3f91":"for f in filenames:\n    if 'test' in f:\n        if 'subject01' in f:\n            s1_test_raw = Image.open('\/kaggle\/input\/yalefaces\/' + f)\n            \n            # Resize image and vectorize it\n            img = s1_test_raw.resize((new_width, new_height),Image.ANTIALIAS)\n            img = np.array(img, dtype='int32')\n            r, c = img.shape\n            s1_test_vector = np.reshape(img, (r*c), order=\"C\")\n        else:\n            s2_test_raw = Image.open(\"\/kaggle\/input\/yalefaces\/\" + f)\n            \n            # Resize image and vectorize it\n            img = s2_test_raw.resize((new_width, new_height),Image.ANTIALIAS)\n            img = np.array(img, dtype='int32')\n            r, c = img.shape\n            s2_test_vector = np.reshape(img, (r*c), order=\"C\")\n\nfig = plt.figure(figsize=(10,5)) \nfig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05) \nprint(\"Test faces\")\n\nimg_disp = np.reshape(s1_test_vector, (r, c), order=\"C\")\narr = img_disp.astype(dtype='uint8')\nax = fig.add_subplot(1, 2, 1, xticks=[], yticks=[]) \nax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')\n\nimg_disp = np.reshape(s2_test_vector, (r, c), order=\"C\")\narr = img_disp.astype(dtype='uint8')\nax = fig.add_subplot(1, 2, 2, xticks=[], yticks=[]) \nax.imshow(arr, cmap=plt.cm.bone, interpolation='nearest')","34350f47":"s1 = s1_test_vector - M1mean\ns2 = s2_test_vector - M2mean\n\neigenface_1 = S1_evecs[:,0]\neigenface_2 = S1_evecs[:,1]\nprint(\"Subject 1, Eigenface 1 of Subject 1:\", np.linalg.norm(s1 - eigenface_1 * np.dot(eigenface_1.T, s1))**2)\nprint(\"Subject 1, Eigenface 2 of Subject 1:\", np.linalg.norm(s1 - eigenface_2 * np.dot(eigenface_2.T, s1))**2)\n\nprint()\neigenface_1 = S2_evecs[:,0]\neigenface_2 = S2_evecs[:,1]\nprint(\"Subject 2, Eigenface 1 of Subject 2:\", np.linalg.norm(s2 - eigenface_1 * np.dot(eigenface_1.T, s2))**2)\nprint(\"Subject 2, Eigenface 2 of Subject 2:\", np.linalg.norm(s2 - eigenface_2 * np.dot(eigenface_2.T, s2))**2)","067b1ea5":"eigenface_1 = S1_evecs[:,0]\neigenface_2 = S1_evecs[:,1]\nprint(\"Subject 2, Eigenface 1 of Subject 1:\", np.linalg.norm(s2 - eigenface_1 * np.dot(eigenface_1, s2))**2)\nprint(\"Subject 2, Eigenface 2 of Subject 1:\", np.linalg.norm(s2 - eigenface_2 * np.dot(eigenface_2, s2))**2)\n\nprint()\neigenface_1 = S2_evecs[:,0]\neigenface_2 = S2_evecs[:,1]\nprint(\"Subject 1, Eigenface 1 of Subject 2:\", np.linalg.norm(s1 - eigenface_1 * np.dot(eigenface_1, s1))**2)\nprint(\"Subject 1, Eigenface 2 of Subject 2:\", np.linalg.norm(s1 - eigenface_2 * np.dot(eigenface_2, s1))**2)","ca7afdf0":"![image.png](attachment:fdaa6e61-90f2-4b27-b077-a22b3a2da74c.png)","a73cbf7a":"## Fiting PCA with 6 components","df86421f":"## Goal \nMake a crude classifier with singular value decomposition. The idea is to create eigenfaces that capture consistent features about individuals faces. Certainly less powerful than modern convolutional neural networks, but still makes for a good learning experience.","7fd22ee7":"## Mean faces","e007ba62":"## From Covariance Matrix","0835273e":"Singular Value Decomposition","9f56ecfb":"### Fiting PCA with 6 components","204b359d":"#### With MinMaxScaling\n","bb0a50b9":"## Facial Recognition"}}