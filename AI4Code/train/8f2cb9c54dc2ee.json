{"cell_type":{"00cdf7f3":"code","491aa2dc":"code","6f2c1b25":"code","ce332f31":"code","8bae939f":"code","eb05ce35":"code","e879cf61":"code","9fccbfff":"code","91e2ed07":"code","cb156fc0":"code","2ab46727":"code","477c77d7":"code","96350419":"code","a4f49b3b":"code","9c8a4ae5":"code","4afdb8cd":"code","ee857e66":"code","8d0b5e6a":"code","49296508":"code","4d1716bb":"code","d67034c3":"code","0a271dca":"code","50d3ce67":"code","e0cd1e9a":"code","8387ee62":"code","99551ad3":"code","a2d4a1dd":"code","5b15ee15":"code","d7a53cb4":"code","b1440f0e":"code","7ec99881":"code","9913e34c":"code","01d3ce67":"markdown","f13ba399":"markdown","141b2c25":"markdown","43e24ba6":"markdown","80f883c6":"markdown"},"source":{"00cdf7f3":"## import packages\n\nimport pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\n\n\n# to gnore warning\n\nimport warnings\nwarnings.filterwarnings('ignore')","491aa2dc":"colorarr = ['#0592D0','#Cd7f32', '#E97451', '#Bdb76b', '#954535', '#C2b280', '#808000','#C2b280', '#E4d008', '#9acd32', '#Eedc82', '#E4d96f',\n           '#32cd32','#39ff14','#00ff7f', '#008080', '#36454f', '#F88379', '#Ff4500', '#Ffb347', '#A94064', '#E75480', '#Ffb6c1', '#E5e4e2',\n           '#Faf0e6', '#8c92ac', '#Dbd7d2','#A7a6ba', '#B38b6d']","6f2c1b25":"## import data \n\ndf = pd.read_csv(\"..\/input\/crop-recommendation-dataset\/Crop_recommendation.csv\")\ndf.head()","ce332f31":"## shape\n\nprint(\"The Shape of the Dataset is: {}\" .format(df.shape))\nprint(\"The number of the columns in the Dataset is: {}\" .format(df.shape[1]))\nprint(\"The Shape of the row in the Dataset is: {}\" .format(df.shape[0]))","8bae939f":"## info\n\ndf.info()","eb05ce35":"# type of data\n\ndf.dtypes","e879cf61":"## count unique values in 'label' columns\n\ndf['label'].value_counts()","9fccbfff":"## lets check null values\n\ndf.isnull().sum()","91e2ed07":"## descripe\n\ndf.describe()","cb156fc0":"## over all distribution\n\nplt.rcParams['figure.figsize'] = (15, 15)\nplt.rcParams['figure.dpi'] = 150\n\n# ratio of Nitrogen content in soil\nplt.subplot(4, 2, 1)\nsns.distplot(df['N'], color='greenyellow')\nplt.title('Ratio of Nitrogen', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# ratio of Phosphorous content in soil\nplt.subplot(4, 2, 2)\nsns.distplot(df['P'], color='firebrick')\nplt.title('Ratio of Phosphorous', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# ratio of Potassium content in soil\nplt.subplot(4, 2, 3)\nsns.distplot(df['K'], color = 'orange')\nplt.title('Ratio of Potassium', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# temperature in degree Celsius\nplt.subplot(4, 2, 4)\nsns.distplot(df['temperature'], color = 'lightcoral')\nplt.title('Distripution of Temterature', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# humidity - relative humidity in %\nplt.subplot(4, 2, 5)\nsns.distplot(df['humidity'], color = 'olivedrab')\nplt.title('Distripution of Humidity', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# ph - ph value of the soil\nplt.subplot(4, 2, 6)\nsns.distplot(df['ph'], color = 'crimson')\nplt.title('Distripution of Ph', fontsize = 12)\nplt.tight_layout()\nplt.grid()\n\n# rainfall - rainfall in mm\nplt.subplot(4, 2, 7)\nsns.distplot(df['rainfall'], color = 'purple')\nplt.title('Distripution of Rainfall', fontsize = 12)\nplt.tight_layout()\nplt.grid()","2ab46727":"## lets speak with data\n\nprint(\"Question.No 1. Crops which requires very High Ratio of Nitrogen Content in Soil ? \\n\\nData: The answer is : {}\" .format(df[df['N'] > 120]['label'].unique()))\nprint(\"\\n\\nQuestion.No 2. Crops which requires very High Ratio of Phosphorous Content in Soil ? \\n\\nData: The answer is : {}\" .format(df[df['P'] > 100]['label'].unique()))\nprint(\"\\n\\nQuestion.No 3. Crops which requires very High Ratio of Potassium Content in Soil ? \\n\\nData: The answer is : {}\" .format(df[df['K'] > 200]['label'].unique()))\nprint(\"\\n\\nQuestion.No 4. Crops which requires very High Rainfall ? \\n\\nData: The answer is : {}\" .format(df[df['rainfall'] > 200]['label'].unique()))\nprint(\"\\n\\nQuestion.No 5. Crops which requires very Low Temperature ? \\n\\nData: The answer is : {}\" .format(df[df['temperature'] < 10]['label'].unique()))\nprint(\"\\n\\nQuestion.No 6. Crops which requires very High Temperature ? \\n\\nData: The answer is : {}\" .format(df[df['temperature'] > 40]['label'].unique()))\nprint(\"\\n\\nQuestion.No 7. Crops which requires very Low Humidity ? \\n\\nData: The answer is : {}\" .format(df[df['humidity'] < 20]['label'].unique()))\nprint(\"\\n\\nQuestion.No 8. Crops which requires very Low pH ? \\n\\nData: The answer is : {}\" .format(df[df['ph'] < 4]['label'].unique()))\nprint(\"\\n\\nQuestion.No 9. Crops which requires very High pH ? \\n\\nData: The answer is : {}\" .format(df[df['ph'] > 9]['label'].unique()))","477c77d7":"## pivot table based on label\n\ndf_label = pd.pivot_table(df, index=['label'], aggfunc='mean')\ndf_label.head()","96350419":"# Just create intractive chart function to make out process easy :AND: I am just lazy....\n\ndef intractive_plot(df, feature, name):\n    \n    \"\"\"\n    This Function helps to create intractive Chart \n    ATTRIBUTE:\n    df: original DataFrame\n    feature: which column need to be \n    name : feature name\n    \"\"\"\n    \n    df_label = pd.pivot_table(df, index=['label'], aggfunc='mean')\n    df_label_feature = df_label.sort_values(by=feature, ascending = False)\n    \n    fig = make_subplots(rows = 1, cols = 2)\n    \n    top = {\n        \n        'y': df_label_feature[feature][:10].sort_values().index,\n        'x': df_label_feature[feature][:10].sort_values()\n    }\n    last = {\n        \n        'y': df_label_feature[feature][-10:].sort_values().index,\n        'x': df_label_feature[feature][-10:].sort_values()\n    }\n    \n    fig.add_trace(\n        go.Bar(top,\n               name='Least {} Needed'.format(name),\n               marker_color = random.choice(colorarr),\n               orientation = 'h',\n               text = top['x']\n              ),\n        row = 1, col = 1\n    )\n    fig.add_trace(\n        go.Bar(last,\n               name='Least {} Needed'.format(name),\n               marker_color = random.choice(colorarr),\n               orientation = 'h',\n               text = top['x']\n              ),\n        row = 1, col = 2\n    )\n    \n    fig.update_traces(texttemplate = '%{text}', textposition = 'inside')\n    fig.update_layout(title_text = name,\n                      plot_bgcolor = 'white',\n                      font_size = 12,\n                      font_color = 'black',\n                      height = 500\n                     )\n\n\n    fig.update_xaxes(showgrid = False)\n    fig.update_yaxes(showgrid = False)\n    fig.show()","a4f49b3b":"## intractive chart based on 'POTASSIUM'\n\nintractive_plot(df, feature = 'K', name = 'Potassium')","9c8a4ae5":"## intractive chart based on 'Nitrogen'\n\nintractive_plot(df, feature = 'N', name = 'Nitrogen')","4afdb8cd":"## intractive chart based on 'Phosphorous'\n\nintractive_plot(df, feature = 'P', name = 'Phosphorous')","ee857e66":"## intractive chart based on 'Humidity'\n\nintractive_plot(df, feature = 'humidity', name = 'Humidity')","8d0b5e6a":"## intractive chart based on 'Temperature'\n\nintractive_plot(df, feature = 'temperature', name = 'Temperature')","49296508":"## intractive chart based on 'ph'\n\nintractive_plot(df, feature = 'ph', name = 'ph')","4d1716bb":"## intractive chart based on 'Rainfall'\n\nintractive_plot(df, feature = 'rainfall', name = 'Rainfall')","d67034c3":"fig, ax = plt.subplots(1, 1, figsize=(15, 9), dpi=100)\nsns.heatmap(df.corr(), annot = True, cmap = 'Blues')\nax.set(xlabel='features')\nax.set(ylabel='features')\nplt.title('Correlation between different features', fontsize = 15, c='black')\n# plt.tight_layout()\nplt.show()","0a271dca":"## Lets make Climax of the project\n\nX = df.drop('label', axis =1)\ny = df['label']","50d3ce67":"## train test split\n\nfrom sklearn.model_selection import train_test_split\n# help(train_test_split)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","e0cd1e9a":"## StandardScaler \n\nfrom sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nscalar.fit(X_train)\nX_train = scalar.transform(X_train)\nX_test = scalar.transform(X_test)","8387ee62":"print(scalar.mean_)","99551ad3":"## model selection\n\nimport lightgbm as lgb\n\nmodel = lgb.LGBMClassifier()\nmodel.fit(X_train, y_train)","a2d4a1dd":"# predict the results\n\ny_pred = model.predict(X_test)","5b15ee15":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\n\ndef Metrics_calculator(y_pred, y_test):\n    accuracy = accuracy_score(y_pred, y_test)\n    precision = precision_score(y_pred, y_test, pos_label='positive', average='micro')\n    recall = recall_score(y_pred, y_test, pos_label='positive', average='micro')\n    f1 = f1_score(y_pred, y_test, pos_label='positive', average='micro')\n    \n    return accuracy, precision, recall, f1","d7a53cb4":"lgb_accuracy, lgb_precision, lgb_recall, lgb_f1 = Metrics_calculator(y_pred, y_test)","b1440f0e":"print('Accuracy of the lightgbm Model is: ', lgb_accuracy)\nprint('Precision of the lightgbm Model is: ', lgb_precision)\nprint('Recall of the lightgbm Model is: ', lgb_recall)\nprint('F1 of the lightgbm Model is: ', lgb_f1)","7ec99881":"## confusion Matrix\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(15, 15))\nsns.heatmap(cm, annot=True, fmt=\".0f\", linewidths=.5, square = True, cmap = 'Blues');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix - score:'+str(accuracy_score(y_test,y_pred))\nplt.title(all_sample_title, size = 15);\nplt.show()","9913e34c":"## save and load model\nimport joblib\n \njoblib.dump(model, 'lightgbm.pkl')\n \nlightgbm_load_model = joblib.load('lightgbm.pkl')\n \nlightgbm_load_model.predict(X_test)","01d3ce67":"## Data Pre-Processing","f13ba399":"## Descriptive Statistics","141b2c25":"## lightgbm","43e24ba6":"<h1><center>The End<\/center><\/h1>","80f883c6":"## Data fields\n* N - ratio of Nitrogen content in soil\n* P - ratio of Phosphorous content in soil\n* K - ratio of Potassium content in soil\n* temperature - temperature in degree Celsius\n* humidity - relative humidity in %\n* ph - ph value of the soil\n* rainfall - rainfall in mm"}}