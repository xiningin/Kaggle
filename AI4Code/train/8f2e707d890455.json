{"cell_type":{"5e8c3c70":"code","4ec71eba":"code","0fdb582f":"code","f544172b":"code","0d3c5654":"code","4b51c247":"code","02ae0c03":"code","ac9f67b6":"code","a064fc77":"code","a4e71e9a":"code","f5ab8ee5":"code","c03288da":"code","6a093815":"code","284e6993":"code","df644b17":"code","f241920f":"code","1ae3655f":"code","f4525e1b":"code","287af46c":"code","3e28e248":"code","56484b67":"code","ad24912a":"code","4eac5ae9":"code","02a714f7":"code","ba38b473":"code","0482acc3":"code","4fe38fce":"markdown","a6ece660":"markdown","be763727":"markdown","8171ff7f":"markdown","f072a9a1":"markdown","eebd6c88":"markdown","0706f887":"markdown","afe64598":"markdown","4433af94":"markdown","31011fb5":"markdown","ce5495c3":"markdown","097bc8fc":"markdown","77eb6fe1":"markdown","499f1cc3":"markdown","a5611589":"markdown","0719b468":"markdown","3f8a7bf4":"markdown","e29887d6":"markdown","ad523e81":"markdown","3a15986f":"markdown","575c9c32":"markdown","659ecfb9":"markdown","3637a244":"markdown","6c6abe43":"markdown","79a01554":"markdown","aae3c1ca":"markdown","a4ca7b43":"markdown","026d1ce2":"markdown","26e387b6":"markdown","2926ab53":"markdown","223f5cf9":"markdown","ff48c95e":"markdown"},"source":{"5e8c3c70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# Loading datasets required for analysis\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", color_codes=True)\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))","4ec71eba":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","0fdb582f":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","f544172b":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()","0d3c5654":"temp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","4b51c247":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","02ae0c03":"temp_f.head(10)","ac9f67b6":"import plotly as py\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)    #THIS LINE IS MOST IMPORTANT AS THIS WILL DISPLAY PLOT ON \n#NOTEBOOK WHILE KERNEL IS RUNNING\n\n#Time Series plot for knwoing the spread\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Confirmed'],\n                name=\"Confirmed\",\n                line_color='deepskyblue',\n                opacity=0.8))\n\nfig.add_trace(go.Scatter(\n                x=full_table.Date,\n                y=full_table['Recovered'],\n                name=\"Recovered\",\n                line_color='dimgray',\n                opacity=0.8))\nfig.update_layout(title_text='Time Series with Rangeslider',\n                  xaxis_rangeslider_visible=True)\npy.offline.iplot(fig)","a064fc77":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n# Calculating the count of confirmed cases by country\n\ncountries = np.unique(temp_f['Country\/Region'])\nmean_conf = []\nfor country in countries:\n    mean_conf.append(temp_f[temp_f['Country\/Region'] == country]['Confirmed'].sum())\n    \n# Building the dataframe\n\n    data = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_conf,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = 'Count')\n            )\n       ]\n    \n# Building the visual\n\n    layout = dict(\n    title = 'COVID-19 Confirmed Cases',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","a4e71e9a":"import pandas as pd\nglobal_temp_country = pd.read_csv(\"..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv\")","f5ab8ee5":"global_temp_country.head()","c03288da":"import plotly.offline as py\npy.init_notebook_mode(connected=True)\n\n## Removing the duplicates\n\nglobal_temp_country_clear = global_temp_country[~global_temp_country['Country'].isin(\n    ['Denmark', 'Antarctica', 'France', 'Europe', 'Netherlands',\n     'United Kingdom', 'Africa', 'South America'])]\n\nglobal_temp_country_clear = global_temp_country_clear.replace(\n   ['Denmark (Europe)', 'France (Europe)', 'Netherlands (Europe)', 'United Kingdom (Europe)'],\n   ['Denmark', 'France', 'Netherlands', 'United Kingdom'])\n\n#Calculating average temperature by country\n\ncountries = np.unique(global_temp_country_clear['Country'])\nmean_temp = []\nfor country in countries:\n    mean_temp.append(global_temp_country_clear[global_temp_country_clear['Country'] == \n                                               country]['AverageTemperature'].mean())\n\n# Building the data frame\n    \ndata = [ dict(\n        type = 'choropleth',\n        locations = countries,\n        z = mean_temp,\n        locationmode = 'country names',\n        text = countries,\n        marker = dict(\n            line = dict(color = 'rgb(0,0,0)', width = 1)),\n            colorbar = dict(autotick = True, tickprefix = '', \n            title = '# Average\\nTemperature,\\n\u00b0C')\n            )\n       ]\n\n# Building the visual\n\nlayout = dict(\n    title = 'GLOBAL AVERAGE LAND TEMPERATURES',\n    geo = dict(\n        showframe = False,\n        showocean = True,\n        oceancolor = 'rgb(0,255,255)',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = True,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')","6a093815":"import plotly.express as px\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nformated_gdf = full_table.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, max(formated_gdf['Confirmed'])+2], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Progression of spread of COVID-19')\nfig.update(layout_coloraxis_showscale=False)\npy.offline.iplot(fig)","284e6993":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","df644b17":"# Defining COVID-19 cases as per classifications \ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Defining Active Case: Active Case = confirmed - deaths - recovered\nfull_table['Active'] = full_table['Confirmed'] - full_table['Deaths'] - full_table['Recovered']\n\n# Renaming Mainland china as China in the data table\nfull_table['Country\/Region'] = full_table['Country\/Region'].replace('Mainland China', 'China')\n\n# filling missing values \nfull_table[['Province\/State']] = full_table[['Province\/State']].fillna('')\nfull_table[cases] = full_table[cases].fillna(0)\n\n# cases in the ships\nship = full_table[full_table['Province\/State'].str.contains('Grand Princess')|full_table['Country\/Region'].str.contains('Cruise Ship')]\n\n# china and the row\nchina = full_table[full_table['Country\/Region']=='China']\nrow = full_table[full_table['Country\/Region']!='China']\n\n# latest\nfull_latest = full_table[full_table['Date'] == max(full_table['Date'])].reset_index()\nchina_latest = full_latest[full_latest['Country\/Region']=='China']\nrow_latest = full_latest[full_latest['Country\/Region']!='China']\n\n# latest condensed\nfull_latest_grouped = full_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nchina_latest_grouped = china_latest.groupby('Province\/State')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\nrow_latest_grouped = row_latest.groupby('Country\/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()","f241920f":"temp = full_table.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max()\ntemp = full_table.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\ntemp.style.background_gradient(cmap='Pastel1')","1ae3655f":"temp_f = full_latest_grouped.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)\ntemp_f.head(11).style.background_gradient(cmap='Reds')","f4525e1b":"df = temp_f.head(8)","287af46c":"df.head(10)","3e28e248":"# Declare a list of average temperatures in April, to be included as new column \ncountry = ['US', 'Italy', 'China', 'Spain', 'Germany', 'France','Iran','United Kingdom']\ndeg = [12.1, 12.2, 14.8, 12.9 , 10, 11.4,17 ,8.7]","56484b67":"df['AvgTemp'] = deg","ad24912a":"df.head()","4eac5ae9":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\", color_codes=True)\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")","02a714f7":"sns.jointplot(x=\"AvgTemp\", y=\"Confirmed\", data=df, size=5)","ba38b473":"from pandas.plotting import parallel_coordinates\nparallel_coordinates(df.drop(\"AvgTemp\", axis=1), \"Country\/Region\")","0482acc3":"sns.FacetGrid(df, hue=\"Country\/Region\", size=6.5) \\\n   .map(plt.scatter, \"AvgTemp\", \"Confirmed\") \\\n   .add_legend()","4fe38fce":"**Visual 2 :** The pandemic and the planet - A live display of how the planet is with respect to confirmed cases of COVID-19.\n\nPlease pan the globe to check out the your zone, region , country.","a6ece660":"<font size=\"4\"> Section 3: Discussion and closing comments <\/font>\n\n\nI would like to keep this section short and sweet. However, i would urge the readers to pan and zoom all the visuals in the previous section to get more clarity on the following answers and insights. \n\nAlso, please revisit the HOT-SPOTs in the earlier sections for help. Apologies, if i am making it too obvious or formal !","be763727":"**Closing comments**\n\nSo friends, keep yourself in warm and dry environments. \n\nPlease follow all safety precautions as mentioned by WHO and other health & safety authorities. \n\n**Please read the last line in the above excerpt, again and again. Summers are fast approaching !! Do not worry !**\n\nLets Stay positive and healthy !!","8171ff7f":"**HOT SPOT 2 :** The spread is much more than in the temperate zone of the planet compared to tropical zones. \nMoreover,  drier parts of the world has lesser transmission. \nYou , can play this multiple times to get a deeper understanding","f072a9a1":"Step 1: Reading and understanding the data","eebd6c88":"**The below diagram shows 3 zones.**\n\n1. Zone 1 (Red) -   Avg Temp in Apr is between 12 - 14 Deg C\n1. Zone 2 (Amber) - Avg Temp in Apr is below   12 Deg C\n1. Zone 3 (Green) - Avg Temp in Apr above 14 Deg C\n\n**Zone 1 seems to be most prone in the coming 4-6 weeks, from a temperature perspective.** \nEven if you consider air travel as a parameter, Zone 1 is having maximum proximity to international hubs, as per the previous diagram.\n\nNote: This is a simple attempt to corelate temp and transmission , statistically. Details is added in the last section\n","0706f887":"Step 2: Preparing the data","afe64598":"**Edit 1 : In addition to the below, i have tried pictorially to co-relate air travel with the spread. The below image shows the same**","4433af94":"**Visual 3 :** Planet Earth - Hot or Cold? ! - A live display of the average land temperatures of the planet","31011fb5":"Sub-step: To read and understand the data","ce5495c3":"**Finally, this is how the table looks like and our analysis is baselined with this table**","097bc8fc":"**3.2 Substantiation from research**\n\nI would like to provide an evedential excerpt from the earlier mentioned research paper, for your reference here, as below. \n\n\n*In the early 1960s, Schulman and Kilbourne developed an influenza virus transmission model in mice. Although mouse-to-mouse transmission is relatively inefficient, they still observed a significant decrease in transmission efficiency with increasing relative humidity (RH) [23] and during summer months, even when laboratory temperature and RH were controlled during experiments [24]. Lowen et al. expanded upon these experiments in the guinea pig transmission model. At 20\u00b0C, transmission efficiency of an influenza A\/H3N2 isolate displayed a bimodal dependence on RH, with airborne (i.e., droplet or aerosol) transmission being maximal at 20\u201335% RH, poor at 50% RH, moderate at 65% RH, and absent at 80% RH. At 5\u00b0C, transmission was overall more efficient than at 20\u00b0C, and the relationship between RH and transmission efficiency was montonic, with efficiency decreasing with increasing RH [25]. Transmission was abolished at high temperature (30\u00b0C), regardless of RH [26].*","77eb6fe1":"**Visual 1 :** A Time-series graph of the confirmed and recovered cases of COVID-19","499f1cc3":"**HOT SPOT 1 :**\n1. Confirmed cases increasing steeply between 1st week of Feb to 3rd week of Feb\n1. Recovered cases increasing steeply from 4th week of March\n1. Rate of increase of confirmed cases significantly drops from March 1st week","a5611589":"**Visual 4 :** Display of progression of spread across the globe","0719b468":"![FIG%202.png](attachment:FIG%202.png)","3f8a7bf4":"The above temperature are the average temperatures in April \n\nSource : https:\/\/en.wikipedia.org\/wiki\/List_of_cities_by_average_temperature","e29887d6":"**3.1  My insights on the above analysis**\n\n1. Temperature is a very important factor for the virus to thrive. \n1. The virus would not be be able to thrive in warmer climates or surroundings\n1. The rate of transmission now is maximum in the temperate zone of the planet, where the avg. temp is 5-10 deg C\n1. The above mentioned temp range is conducive for the virus to thrive\n1. However, the transmission is minimal in the tropical zone, where the avg. temp is > 25 deg C","ad523e81":"Note: This work is highly inspired from few other kaggle kernels , github sources and other data science resources. Any traces of replications, which may appear , is purely co-incidental. Due respect & credit to all my fellow kagglers. Thanks !!\n\nAnd this notebook is WIP","3a15986f":"1. The image in the top half is the snapshot of the spread , as of 1st Mar 2020. \n1. The image in the bottom half shows major air routes from Beijing to rest of the world. \n1. The red arrows tries to co-relate the air routes to the direction of spread.","575c9c32":"![FIG4.png](attachment:FIG4.png)","659ecfb9":"![FIG1.png](attachment:FIG1.png)","3637a244":"**Red rectangle (Temperate zone) is a cause of concern. Green rectangle (Tropical zone) is safer. **\nHowever, for more clarity, you can zoom and pan the actual visuals in this notebook.","6c6abe43":"Step 3: Creating a consolidated table , which gives the country wise total defined cases","79a01554":"<font size=\"5\"> Summary <\/font>\n\n\nIn this analysis, primary goal is to find the factors that impact transmission rate of COVID-19. \nTo be very precise, i am trying to answer the below question:\n\n**What are the key factors which impact the transmission of COVID-19 ?**\n\nSome of the key factors are:\n\n* Temperature\n* Relative Humidity\n* Air Travel\n\nKindly have a good look at the figures given below. Rest of my analysis predominantly revolves around this.","aae3c1ca":"<font size=\"4\"> Section 4: Some Statistical Analysis <\/font>\n\nIn this section, i have attempted to perform some statistical analysis","a4ca7b43":"The below research paper also substantiates my insights. I would quote certain excerpts, directly from this paper, in this report.\nhttps:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC3311988\/","026d1ce2":"Top 10 affected countries","26e387b6":"<font size=\"4\">Section 2: Data Visualisation<\/font>\n\nIn this section, we are just going to see four self-explanatory visuals, which will substantiate the answers and insights in the next section.","2926ab53":"*Note: The mentioned insights in this notebook are as per the evolving COVID-19 datasets. They are fairly intuitive and may not 100% accurate at this stage. Detailed statistical analysis will be done, when the dataset stabilises over a period of time.  However, correlations with important factors like temperature, relative humidity and air travel, are performed to predict the transmission rates and my personal opinion is that the insights provided in this notebook is overall in line with globally published research information. *","223f5cf9":",<font size=\"4\">Section 1: Data Preperation<\/font>","ff48c95e":"The above shows the headers and a top slice of the table. I think this is self-explanatory."}}