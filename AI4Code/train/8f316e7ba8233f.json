{"cell_type":{"9495d957":"code","7ca0a1f0":"code","947ffa68":"code","0abf1df3":"code","68bde41b":"code","5f035ed2":"code","b737f2c5":"code","31a5c92c":"code","7689e559":"code","df05d440":"code","a31fd614":"code","0f143982":"code","fd58ed3c":"code","3a908a45":"code","ea63542a":"code","3d5cb63d":"code","7124c76b":"code","442b4a33":"code","f3b81f07":"code","55eb88f4":"code","8018ebf4":"code","c87ab8d0":"code","719f3b45":"code","803b33fc":"code","0f01c5d9":"code","dc1d26fb":"code","ee2e37de":"code","2be1b4bf":"code","48c733e0":"code","b09528bb":"code","e733595b":"code","ee0f352c":"code","23e65733":"code","ab2a1459":"code","1d3ea251":"markdown","fe9447ea":"markdown","9741ed7c":"markdown","38196a5d":"markdown","7a62a3b1":"markdown","cfd950c0":"markdown","06ad0f59":"markdown","3cbc61f4":"markdown","7920de3a":"markdown","d09fd2f8":"markdown","ae77f2be":"markdown","8c172332":"markdown","9039af7d":"markdown","3d132435":"markdown","5473d412":"markdown","021a5bdf":"markdown","354e65e4":"markdown","7bf3f6a3":"markdown","e5852ed0":"markdown","214baecb":"markdown","508dd822":"markdown","af611c1c":"markdown","3d7c5e62":"markdown","294c5f21":"markdown","c966fc4f":"markdown","c131bc17":"markdown"},"source":{"9495d957":"import numpy as np \nimport pandas as pd\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option('display.max_columns', None)","7ca0a1f0":"films = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","947ffa68":"films.head()","0abf1df3":"films.info()","68bde41b":"films.isna().sum()","5f035ed2":"films['date_added'] = films['date_added'].fillna('No data')\n\nfilms['year_added'] = films['date_added'].apply(lambda x: x[-4:len(x)])\nfilms['month_added'] = films['date_added'].apply(lambda x: x.split(' ')[0])\n\nfilms.head(3)","b737f2c5":"films.query('rating != rating')","31a5c92c":"films.iloc[67, 8] = 'R' \nfilms.iloc[2359, 8] = 'TV-14'\nfilms.iloc[3660, 8] = 'TV-PG'\nfilms.iloc[3736, 8] = 'R'\nfilms.iloc[3737, 8] = 'R'\nfilms.iloc[3738, 8] = 'R'\nfilms.iloc[4323, 8] = 'PG-13'","7689e559":"films['rating'].unique()","df05d440":"films['age_group'] = films['rating']\nMR_age = {'TV-MA': 'Adults',\n          'R': 'Adults',\n          'PG-13': 'Teens',\n          'TV-14': 'Young Adults',\n          'TV-PG': 'Older Kids',\n          'NR': 'Adults',\n          'TV-G': 'Kids',\n          'TV-Y': 'Kids',\n          'TV-Y7': 'Older Kids',\n          'PG': 'Older Kids',\n          'G': 'Kids',\n          'NC-17': 'Adults',\n          'TV-Y7-FV': 'Older Kids',\n          'UR': 'Adults'}\nfilms['age_group'] = films['age_group'].map(MR_age)","a31fd614":"films['country'] = films['country'].fillna('No data')\n\ncountries = []\nfor i in range(len(films.index)):\n    x = films.iloc[i, 5].split(',')\n    for j in range(len(x)):\n        if x[j].strip() not in countries:\n            countries.append(x[j].strip())\n        else:\n            continue\n            \ncountries.remove('')\ncountries","0f143982":"for i in range(len(countries)):\n    films[countries[i]] = 0\n    for j in range(len(films.index)):\n        if countries[i] in films.iloc[j, 5]:\n            films[countries[i]][j] = 1\n            \nfilms.head(3)","fd58ed3c":"genres = []\nfor i in range(len(films.index)):\n    x = films.iloc[i, 10].split(',')\n    for j in range(len(x)):\n        if x[j].strip() not in genres:\n            genres.append(x[j].strip())\n        else:\n            continue\n\ngenres","3a908a45":"for i in range(len(genres)):\n    films[genres[i]] = 0\n    for j in range(len(films.index)):\n        if genres[i] in films.iloc[j, 10]:\n            films[genres[i]][j] = 1","ea63542a":"films['duration'] = films['duration'].map(lambda x: x.split(' ')[0]).astype('int')","3d5cb63d":"films = films.drop(['listed_in', 'director', 'cast', 'rating', 'date_added', 'show_id', 'country', 'No data'], axis = 1) \n# Drop all columns that will not participate in the analysis","7124c76b":"films.sample(3)","442b4a33":"from wordcloud import WordCloud\nfrom PIL import Image\nimport random\n\ntext = str(list(films['description'])).replace(',', '').replace('[', '').replace(\"'\", '').replace(']', '').replace('.', '')\n\ndef red_color_func(word, font_size, position, orientation, random_state = None, **kwargs):\n    return \"hsl(0, 100%%, %f%%)\" % random.randint(25, 40)\n\nmask = np.array(Image.open('..\/input\/logo-net\/netflix-logo-actuel.jpg'))\n\nplt.rcParams['figure.figsize'] = (20, 20)\nwordcloud = WordCloud(background_color = 'white', width = 1400,  height = 1400, max_words = 170, mask = mask).generate(text)\n\nwordcloud.recolor(color_func = red_color_func)\n\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.axis('off')\nplt.show()","f3b81f07":"fig = px.pie(films['type'].value_counts().reset_index(), values = 'type', names = 'index', width = 600, height = 600)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.8, \n                  marker = dict(colors = ['#b20710','#221f1f'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Distribution of <br> TV shows and <br> movies', \n                                      x = 0.5, y = 0.5, font_size = 28, showarrow = False, \n                                      font_family = 'Calibri Black',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","55eb88f4":"movies_added = pd.DataFrame(columns = ['country', 'movies'], index = range((films.columns.get_loc('Montenegro') + 1) - 7))\nfor i in range(8, (films.columns.get_loc('Montenegro') + 1)):\n    movies = len(films.query('type == \"Movie\"').index) - films.query('type == \"Movie\"').iloc[:, i].value_counts().reset_index().iloc[0, 1]\n    movies_added.iloc[i - 7, 0] = films.columns[i]\n    movies_added.iloc[i - 7, 1] = movies\n    \nmovies_added = movies_added.sort_values('movies', ascending = False).head(5)\nmovies_added","8018ebf4":"sns.set_style('white')\nplt.figure(figsize = (12, 8))\nplt.title('TOP-5 countries by count of added movies', size = 22, x = 0.5, y = 1.03)\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.2)\na = sns.barplot(data = movies_added, x = movies_added['country'], y = movies_added['movies'], palette = ['#b20710'])\na.tick_params(labelsize = 12)\nplt.ylabel('')\nplt.xlabel('')\nfor i in ['right', 'left', 'top']:\n    a.spines[i].set_visible(False)\nplt.show()","c87ab8d0":"USaddM = films.query('`United States` == 1 & type == \"Movie\"').groupby('year_added').agg({'United States': 'count'})\nUKaddM = films.query('`United Kingdom` == 1 & type == \"Movie\"').groupby('year_added').agg({'United Kingdom': 'count'})\nINDaddM = films.query('India == 1 & type == \"Movie\"').groupby('year_added').agg({'India': 'count'})\nCANaddM = films.query('Canada == 1 & type == \"Movie\"').groupby('year_added').agg({'Canada': 'count'})\nFRaddM = films.query('France == 1 & type == \"Movie\"').groupby('year_added').agg({'France': 'count'})\n\nWaddM = USaddM.join(UKaddM, how = 'outer')\\\n.join(INDaddM, how = 'outer')\\\n.join(CANaddM, how = 'outer')\\\n.join(FRaddM, how = 'outer').fillna(0).reset_index()","719f3b45":"fig = go.Figure()\nfig.add_trace(go.Scatter( \n    x = WaddM['year_added'], \n    y = WaddM['United States'],\n    mode = 'lines + markers',\n    name = 'US',\n    marker_color = '#c43131',\n))\nfig.add_trace(go.Scatter( \n    x = WaddM['year_added'], \n    y = WaddM['United Kingdom'],\n    mode = 'lines + markers',\n    name = 'UK',\n    marker_color = '#672669',\n))\nfig.add_trace(go.Scatter( \n    x = WaddM['year_added'], \n    y = WaddM['India'],\n    mode = 'lines + markers',\n    name = 'India',\n    marker_color = '#b8762a',\n))\nfig.add_trace(go.Scatter( \n    x = WaddM['year_added'], \n    y = WaddM['Canada'],\n    mode = 'lines + markers',\n    name = 'Canada',\n    marker_color = '#245c16',\n))\nfig.add_trace(go.Scatter( \n    x = WaddM['year_added'], \n    y = WaddM['France'],\n    mode = 'lines + markers',\n    name = 'France',\n    marker_color = '#147f73',\n))\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of adding movies by TOP-5 countries', \n                  title_font_family = 'Arial', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'Arial', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'Arial', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.show()","803b33fc":"shows_added = pd.DataFrame(columns = ['country', 'TV shows'], index = range((films.columns.get_loc('Montenegro') + 1) - 7))\nfor i in range(8, (films.columns.get_loc('Montenegro') + 1)):\n    shows = len(films.query('type == \"TV Show\"').index) - films.query('type == \"TV Show\"').iloc[:, i].value_counts().reset_index().iloc[0, 1]\n    shows_added.iloc[i - 7, 0] = films.columns[i]\n    shows_added.iloc[i - 7, 1] = shows\n    \nshows_added = shows_added.sort_values('TV shows', ascending = False).head(5)\nshows_added","0f01c5d9":"sns.set_style('white')\nplt.figure(figsize = (12, 8))\nplt.title('TOP-5 countries by count of added TV shows', size = 22, x = 0.5, y = 1.03)\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.2)\na = sns.barplot(data = shows_added, x = shows_added['country'], y = shows_added['TV shows'], palette = ['#b20710'])\na.tick_params(labelsize = 12)\nplt.ylabel('')\nplt.xlabel('')\nfor i in ['right', 'left', 'top']:\n    a.spines[i].set_visible(False)\nplt.show()","dc1d26fb":"USaddS = films.query('`United States` == 1 & type == \"TV Show\"').groupby('year_added').agg({'United States': 'count'}).drop('data', axis = 0)\nUKaddS = films.query('`United Kingdom` == 1 & type == \"TV Show\"').groupby('year_added').agg({'United Kingdom': 'count'}).drop('data', axis = 0)\nJPaddS = films.query('Japan == 1 & type == \"TV Show\"').groupby('year_added').agg({'Japan': 'count'}).drop('data', axis = 0)\nSKaddS = films.query('`South Korea` == 1 & type == \"TV Show\"').groupby('year_added').agg({'South Korea': 'count'})\nCANaddS = films.query('Canada == 1 & type == \"TV Show\"').groupby('year_added').agg({'Canada': 'count'})\n\nWaddS = USaddS.join(UKaddS, how = 'outer')\\\n.join(JPaddS, how = 'outer')\\\n.join(SKaddS, how = 'outer')\\\n.join(CANaddS, how = 'outer').fillna(0).reset_index()\n\nWaddS.tail(5)","ee2e37de":"fig = go.Figure()\nfig.add_trace(go.Scatter( \n    x = WaddS['year_added'], \n    y = WaddS['United States'],\n    mode = 'lines + markers',\n    name = 'US',\n    marker_color = '#c43131',\n))\nfig.add_trace(go.Scatter( \n    x = WaddS['year_added'], \n    y = WaddS['United Kingdom'],\n    mode = 'lines + markers',\n    name = 'UK',\n    marker_color = '#672669',\n))\nfig.add_trace(go.Scatter( \n    x = WaddS['year_added'], \n    y = WaddS['Japan'],\n    mode = 'lines + markers',\n    name = 'Japan',\n    marker_color = '#b8762a',\n))\nfig.add_trace(go.Scatter( \n    x = WaddS['year_added'], \n    y = WaddS['South Korea'],\n    mode = 'lines + markers',\n    name = 'South Korea',\n    marker_color = '#245c16',\n))\nfig.add_trace(go.Scatter( \n    x = WaddS['year_added'], \n    y = WaddS['Canada'],\n    mode = 'lines + markers',\n    name = 'Canada',\n    marker_color = '#147f73',\n))\n\nfig.update_layout(plot_bgcolor = 'white', title = 'Dynamics of adding TV shows by TOP-5 countries', \n                  title_font_family = 'Arial', title_font_color = '#221f1f', title_font_size = 20, title_x = 0.5)\nfig.update_xaxes(showline = True, linecolor = '#f5f2f2', linewidth = 2, tickfont_family = 'Arial', tickfont_color = '#221f1f', tickfont_size = 12)\nfig.update_yaxes(showline = True, linecolor = '#f5f2f2', \n                 showgrid = True, gridwidth = 1, gridcolor = '#f5f2f2',\n                 linewidth = 2, tickfont_family = 'Arial', tickfont_color = '#221f1f', tickfont_size = 12)\n\nfig.show()","2be1b4bf":"content_by_month = films.query('month_added != \"No\" & month_added != \"\"')\\\n.groupby('month_added').agg({'type': 'count'}).reset_index()\\\n.rename(columns = {'type': 'content'}).sort_values('content', ascending = False)\n\nfig = px.pie(labels = content_by_month['month_added'], values = content_by_month['content'], names = content_by_month['month_added'],\n            width = 550, height = 550)\n\ncolors = ['#6e1919', '#781c1c', '#821f1f', '#871f1f', '#8c2020', '#962121', '#9e2121', '#ab2020', '#b31e1e', '#bf1f1f', '#c91c1c', '#d61818']\nfig.update_traces(hoverinfo = 'label + percent', textfont_size = 10,\n                  textinfo = 'label + percent', pull = [0.065, 0.06, 0.055, 0.05, 0.045, 0.04, 0.035, 0.03, 0.025, 0.02, 0.015, 0.015],\n                  marker = dict(colors = colors[::-1], line = dict(color = 'white', width = 1)))\nfig.update_layout(showlegend = False)\n\nfig.show()","48c733e0":"seasons = films.query(\"type == 'TV Show'\").groupby('duration').agg({'title': 'count'}).reset_index()\n\nfig = plt.figure(figsize = (14, 6))\n\nplt.subplot(121)\nsns.set_style(\"white\")\nplt.title('Movies', size = 20)\na = sns.kdeplot(films.query('type == \"Movie\"')['duration'], color = '#8c2020', shade = True, alpha = 1)\nplt.grid(color = 'gray', linestyle = ':', axis = 'x', zorder = 0,  dashes = (1,7))\nfor i in ['right', 'left', 'top']:\n    a.spines[i].set_visible(False)\na.tick_params(labelsize = 11)\nplt.ylabel('')\nplt.xlabel('Minutes', size = 14)\nplt.yticks([])\n\nplt.subplot(122)\nplt.title('TV Shows seasons', size = 20)\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.2)\nb = sns.barplot(data = seasons, x = seasons['duration'], y = seasons['title'], palette = ['#8c2020'])\nb.tick_params(labelsize = 11)\nplt.ylabel('')\nplt.xlabel('Seasons', size = 14)\nfor i in ['right', 'left', 'top']:\n    b.spines[i].set_visible(False)\n\nplt.show()","b09528bb":"movie_age_groups = films.query('type == \"Movie\"').groupby('age_group').agg({'age_group': 'count'}).rename(columns = {'age_group': 'content'}).reset_index()\ntvshow_age_groups = films.query('type == \"TV Show\"').groupby('age_group').agg({'age_group': 'count'}).rename(columns = {'age_group': 'content'}).reset_index()\n\nfig = px.pie(labels = movie_age_groups['age_group'], values = movie_age_groups['content'], names = movie_age_groups['age_group'], width = 550, height = 550)\n\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(colors = ['#A10115', '#D72C16', '#F0EFEA', '#C0B2B5', '#221f1f'], \n                                line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Movies', \n                                      x = 0.5, y = 0.5, font_size = 32, showarrow = False, \n                                      font_family = 'Calibri Black',\n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig.show()\n\n####################################################\n\nfig2 = px.pie(labels = tvshow_age_groups['age_group'], values = tvshow_age_groups['content'], names = tvshow_age_groups['age_group'], width = 550, height = 550)\n\nfig2.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.75, \n                  marker = dict(colors = ['#A10115', '#D72C16', '#F0EFEA', '#C0B2B5', '#221f1f'], \n                                line = dict(color = 'white', width = 2)))\n\nfig2.update_layout(annotations = [dict(text = 'TV Shows', \n                                      x = 0.5, y = 0.5, font_size = 32, showarrow = False, \n                                      font_family = 'Calibri Black',\n                                      font_color = 'black')],\n                  showlegend = False)\n\nfig2.show()","e733595b":"films_genres = pd.DataFrame(columns = ['genre', 'count'], index = range(7))\nfilms_genres.iloc[0, 0] = 'Dramas'\nfilms_genres.iloc[0, 1] = films.query('Dramas == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[1, 0] = 'Comedies'\nfilms_genres.iloc[1, 1] = films.query('Comedies == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[2, 0] = 'Action & Adventure'\nfilms_genres.iloc[2, 1] = films.query('`Action & Adventure` == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[3, 0] = 'Documentaries'\nfilms_genres.iloc[3, 1] = films.query('Documentaries == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[4, 0] = 'Thrillers'\nfilms_genres.iloc[4, 1] = films.query('Thrillers == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[5, 0] = 'Horror Movies'\nfilms_genres.iloc[5, 1] = films.query('`Horror Movies` == 1').agg({'title': 'count'})[0]\nfilms_genres.iloc[6, 0] = 'Sci-Fi & Fantasy'\nfilms_genres.iloc[6, 1] = films.query('`Sci-Fi & Fantasy` == 1').agg({'title': 'count'})[0]","ee0f352c":"fig = px.pie(labels = films_genres['genre'], values = films_genres['count'], names = films_genres['genre'], width = 550, height = 550)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label',  \n                  marker = dict(colors = ['#A10115', '#D72C16', '#F0EFEA', '#C0B2B5', '#221f1f', '#EAD39C', '#7D5E3C'], line = dict(color = 'white', width = 2)))\n\nfig.update_layout(annotations = [dict(text = 'Distribution of genres', \n                                      x = 0.5, y = 1.11, font_size = 26, showarrow = False, \n                                      font_family = 'Calibri Black',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","23e65733":"dist = pd.DataFrame(columns = ['country', 'genre', 'count'], index = range(21))\ndist.iloc[0:7, 0] = 'US'\ndist.iloc[7:14, 0] = 'India'\ndist.iloc[14:22, 0] = 'Japan'\ndist.iloc[[0, 7, 14], 1] = 'Dramas'\ndist.iloc[[1, 8, 15], 1] = 'Comedies'\ndist.iloc[[2, 9, 16], 1] = 'Action & Adventure'\ndist.iloc[[3, 10, 17], 1] = 'Documentaries'\ndist.iloc[[4, 11, 18], 1] = 'Thrillers'\ndist.iloc[[5, 12, 19], 1] = 'Horror Movies'\ndist.iloc[[6, 13, 20], 1] = 'Sci-Fi & Fantasy'\n\n\ndist.iloc[0, 2] = films.query('`United States` == 1 & Dramas == 1').agg({'title': 'count'})[0]\ndist.iloc[1, 2] = films.query('`United States` == 1 & Comedies == 1').agg({'title': 'count'})[0]\ndist.iloc[2, 2] = films.query('`United States` == 1 & `Action & Adventure` == 1').agg({'title': 'count'})[0]\ndist.iloc[3, 2] = films.query('`United States` == 1 & Documentaries == 1').agg({'title': 'count'})[0]\ndist.iloc[4, 2] = films.query('`United States` == 1 & Thrillers == 1').agg({'title': 'count'})[0]\ndist.iloc[5, 2] = films.query('`United States` == 1 & `Horror Movies` == 1').agg({'title': 'count'})[0]\ndist.iloc[6, 2] = films.query('`United States` == 1 & `Sci-Fi & Fantasy` == 1').agg({'title': 'count'})[0]\n\ndist.iloc[7, 2] = films.query('India == 1 & Dramas == 1').agg({'title': 'count'})[0]\ndist.iloc[8, 2] = films.query('India == 1 & Comedies == 1').agg({'title': 'count'})[0]\ndist.iloc[9, 2] = films.query('India == 1 & `Action & Adventure` == 1').agg({'title': 'count'})[0]\ndist.iloc[10, 2] = films.query('India == 1 & Documentaries == 1').agg({'title': 'count'})[0]\ndist.iloc[11, 2] = films.query('India == 1 & Thrillers == 1').agg({'title': 'count'})[0]\ndist.iloc[12, 2] = films.query('India == 1 & `Horror Movies` == 1').agg({'title': 'count'})[0]\ndist.iloc[13, 2] = films.query('India == 1 & `Sci-Fi & Fantasy` == 1').agg({'title': 'count'})[0]\n\ndist.iloc[14, 2] = films.query('Japan == 1 & Dramas == 1').agg({'title': 'count'})[0]\ndist.iloc[15, 2] = films.query('Japan == 1 & Comedies == 1').agg({'title': 'count'})[0]\ndist.iloc[16, 2] = films.query('Japan == 1 & `Action & Adventure` == 1').agg({'title': 'count'})[0]\ndist.iloc[17, 2] = films.query('Japan == 1 & Documentaries == 1').agg({'title': 'count'})[0]\ndist.iloc[18, 2] = films.query('Japan == 1 & Thrillers == 1').agg({'title': 'count'})[0]\ndist.iloc[19, 2] = films.query('Japan == 1 & `Horror Movies` == 1').agg({'title': 'count'})[0]\ndist.iloc[20, 2] = films.query('Japan == 1 & `Sci-Fi & Fantasy` == 1').agg({'title': 'count'})[0]\n\n# Because of the classification done for a more accurate analysis, it is impossible to make this table through groupby (which would be many times faster), \n# so I had to write directly :(","ab2a1459":"fig = px.sunburst(dist, path = ['country', 'genre'], values = 'count', color = 'country',\n                 color_discrete_map = {'US': '#8C2020', 'India': '#EAD39C', 'Japan': '#7D5E3C'},\n                 width = 650, height = 650)\n\nfig.update_layout(annotations = [dict(text = 'Distribution of main genres in US, India and Japan', \n                                      x = 0.5, y = 1.11, font_size = 22, showarrow = False, \n                                      font_family = 'Arial Black',\n                                      font_color = 'black')])\n\nfig.update_traces(textinfo = 'label + percent parent')\n                  \nfig.show()","1d3ea251":"**Let's see the result of preprocessing**","fe9447ea":"# Dictribution of TV shows and movies","9741ed7c":"**TOP-5 countries by count of added TV shows**","38196a5d":"**Some movies and TV shows have several countries. Therefore, I will classify the films for each country.**","7a62a3b1":"New content is most often added in the early winter, and least often added in the summer.","cfd950c0":"# Duration of movies and TV Shows","06ad0f59":"# Distribution of main genres in US, India and Japan","3cbc61f4":"# Distribution of the main genres","7920de3a":"**TOP-5 countries by count of added movies**","d09fd2f8":"**In duration leave only integers**","ae77f2be":"**Dynamics of adding TV shows by TOP-5 countries**","8c172332":"**Keywords in the description of movies and TV shows**","9039af7d":"**Now I want to know all kinds of genres and classify all the movies and TV shows**","3d132435":"# End","5473d412":"**Then make the age rating in more understandable form**","021a5bdf":"There are 7 movies and TV shows without rating, it's not a problem to find out the rating. Mostly used [IMDb](https:\/\/www.imdb.com\/?ref_=nv_home).","354e65e4":"**Dynamics of adding movies by TOP-5 countries**","7bf3f6a3":"# Distribution adding content by month","e5852ed0":"# Preprocessing","214baecb":"# Basic information","508dd822":"Thus, the analysis will take into account the participation of each country.","af611c1c":"# Word Cloud","3d7c5e62":"**First of all, I would like to make a separate year and month of the premiere date (date_added)**","294c5f21":"**To compare the rating and the age group used information from [prime video](https:\/\/www.primevideo.com\/help\/ref=atv_hp_nd_cnt?nodeId=GFGQU3WYEG6FSJFJ)**","c966fc4f":"# What age groups are content created for?","c131bc17":"![](https:\/\/tribune-reloaded.s3.amazonaws.com\/media\/images\/2187156-netflixsocialrectangle-1585549450\/2187156-netflixsocialrectangle-1585549450.png)"}}