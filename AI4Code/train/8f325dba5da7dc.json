{"cell_type":{"4c869423":"code","f3c18758":"code","866498b4":"code","de9693c1":"code","cf4bcd96":"code","c98583b3":"code","c03adee3":"code","b04e7cd1":"code","7a6c02f5":"code","a532177c":"code","87097845":"code","26d10b8e":"code","d33662bb":"code","2abe73ed":"code","33c244a4":"code","d4ffd503":"markdown","67b976ae":"markdown","5bbf83b4":"markdown","155df755":"markdown"},"source":{"4c869423":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3c18758":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing","866498b4":"data = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndata.head()","de9693c1":"sb.set_theme(style=\"darkgrid\")\nsb.countplot(data['diagnosis'])\n\n","cf4bcd96":"sb.heatmap(data.corr())","c98583b3":"data = data.drop(['id', 'Unnamed: 32'], axis=1)\ndiagnosis = data['diagnosis']\nlb = preprocessing.LabelEncoder()\nlb.fit(diagnosis)\ndiagnosis = lb.transform(diagnosis)\nprint(diagnosis)\n\n\ndata = data.drop(['diagnosis'], axis=1)\n\n","c03adee3":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgb\nfrom sklearn.ensemble import GradientBoostingClassifier","b04e7cd1":"x_train= data; x_test = diagnosis\nx_train, x_test, y_train, y_test = train_test_split(x_train, x_test, test_size=0.30)\n\n \nclf = GradientBoostingClassifier(learning_rate=1.0).fit(x_train, y_train)\nclf.score(x_test, y_test)","7a6c02f5":"expected_y  = y_test\npredicted_y = clf.predict(x_test)\n\nprint(metrics.classification_report(expected_y, predicted_y))\n","a532177c":"print(metrics.confusion_matrix(expected_y, predicted_y))","87097845":"print(metrics.r2_score(expected_y, predicted_y))\nprint(metrics.mean_squared_log_error(expected_y, predicted_y))","26d10b8e":"from sklearn import tree","d33662bb":"dt = tree.DecisionTreeClassifier()\ndt = dt.fit(x_train, y_train)\ndt.score(x_test, y_test)","2abe73ed":"expected_y  = y_test\npredicted_y = dt.predict(x_test)\n\nprint(metrics.classification_report(expected_y, predicted_y))\n","33c244a4":"print(metrics.r2_score(expected_y, predicted_y))\nprint(metrics.mean_squared_log_error(expected_y, predicted_y))","d4ffd503":"# ****Data Loading and Visualisation*****","67b976ae":"# ***Data Preprocessing***","5bbf83b4":"# ****XGBOOST_Model****","155df755":"# **DECISION_TREE Model**"}}