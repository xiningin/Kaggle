{"cell_type":{"4a7350ab":"code","6ed17d5c":"code","002bf746":"code","3b0a969f":"code","88ae6db7":"code","63d6c161":"code","062b694f":"code","b241fa6a":"code","e665577c":"code","374aeded":"code","f4a1bced":"code","82c6896b":"code","db49b1ed":"code","b3cc97d6":"code","f186f36a":"code","d00fedc5":"code","637be91f":"code","039528ff":"code","476d376c":"code","7128dd19":"code","9ca7ad2f":"markdown","a787ce3f":"markdown","f92e9d18":"markdown","3f63cb06":"markdown","75a95f93":"markdown","ae1acf4e":"markdown","5a95d97e":"markdown","21d4b631":"markdown","a3c617da":"markdown","55b513d0":"markdown","57edbab7":"markdown","7f431501":"markdown","d7974721":"markdown","1699ebb8":"markdown","c2573b61":"markdown","1fb41750":"markdown","3401dbbc":"markdown","cad94950":"markdown"},"source":{"4a7350ab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.datasets\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn import metrics","6ed17d5c":"price_dataset = sklearn.datasets.load_boston()\nprint(price_dataset)","002bf746":"house_price_df = pd.DataFrame(price_dataset.data, columns= price_dataset.feature_names)","3b0a969f":"house_price_df.head()","88ae6db7":"house_price_df['PRICE'] = price_dataset.target","63d6c161":"house_price_df.head()","062b694f":"house_price_df.shape","b241fa6a":"plt.subplots(figsize=(15,10))\nsns.heatmap(house_price_df.corr(), annot=True,annot_kws={'size': 15})","e665577c":"plt.scatter(house_price_df['RM'], house_price_df['PRICE'], color='blue')\nplt.xlabel(\"Avg no of rooms\")\nplt.ylabel(\"Price\")\nplt.title(\"Rooms vs. Price\")\nplt.show()","374aeded":"plt.scatter(house_price_df['TAX'], house_price_df['RAD'], color='green')\nplt.xlabel(\"TAX\")\nplt.ylabel(\"RAD\")\nplt.title(\"Tax vs. RAD\")\nplt.show()","f4a1bced":"house_price_df.isnull().sum()","82c6896b":"house_price_df.describe()","db49b1ed":"correlation = house_price_df.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(correlation,cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Reds')","b3cc97d6":"X = house_price_df.iloc[:,:-1].values\ny = house_price_df.iloc[:,-1].values","f186f36a":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)","d00fedc5":"regressor = XGBRegressor()\nregressor.fit(X_train, y_train)","637be91f":"y_pred_train = regressor.predict(X_train)\ny_pred_test = regressor.predict(X_test)","039528ff":"# R Squared error and Mean absolute error on train data\nscore_1 = metrics.r2_score(y_train, y_pred_train)\nscore_2 = metrics.mean_absolute_error(y_train, y_pred_train)\nprint(\"R squared error: \",score_1)\nprint(\"Mean absolute error: \", score_2)","476d376c":"# R Squared error and Mean absolute error on test data\nscore_1 = metrics.r2_score(y_test, y_pred_test)\nscore_2 = metrics.mean_absolute_error(y_test, y_pred_test)\nprint(\"R squared error: \",score_1)\nprint(\"Mean absolute error: \", score_2)","7128dd19":"plt.scatter(y_test, y_pred_test, color='red')\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\"Test data (Actual Price vs Predicted Price)\")\nplt.show()","9ca7ad2f":"Splitting the data into train and test set","a787ce3f":"Let's start by importing the libraries!","f92e9d18":"Evaluation and model performance","3f63cb06":"Since the price is missing we will add the price column to the dataset","75a95f93":"Exploratory data analysis!","ae1acf4e":"So we have to check for missing values using isnull()","5a95d97e":"Visualization between the y_pred and y_test set data","21d4b631":"Importing the boston house price data set from sklearn datasets","a3c617da":"Training model using Xgboost","55b513d0":"About the dataset\n1. CRIM: per capita crime rate by town\n2. ZN: proportion of residential land zoned for lots over 25,000 sq.ft.\n3. INDUS: proportion of non-retail business acres per town\n4. CHAS: Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n5. NOX: nitric oxides concentration (parts per 10 million)\n6. RM: average number of rooms per dwelling\n7. AGE: proportion of owner-occupied units built prior to 1940\n8. DIS: weighted distances to five Boston employment centres\n9. RAD: index of accessibility to radial highways\n10. TAX: full-value property-tax rate per \\$10,000\n11. PTRATIO: pupil-teacher ratio by town\n12. B: 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n13. LSTAT: % lower status of the population\n14. MEDV: Median value of owner-occupied homes in \\$1000's","57edbab7":"Structuing the data using pandas dataframe, loading the dataset to pandas dataframe","7f431501":"# House Price Prediction Project","d7974721":"Split the data into dependent and independent variables","1699ebb8":"About the libraries\n* numpy - useful for arrays and mathematical calculations\n* pandas - for creating data frames\n* matplotlib - for creating graphs and plots\n* seaborn - for creating graphs and plots\n* sklearn - we use this library for training our model and for the dataset","c2573b61":"Hey everyone! In this project we're gonna be training a regression alogrithm xgboost with the **boston house price** dataset and use this machine learning **supervised model** to predict house prices!\nHappy learning !","1fb41750":"Prediction on training data","3401dbbc":"Importing the libraries","cad94950":"Checking for correlation between the features, creating a heatmap"}}