{"cell_type":{"1db33ed6":"code","f7ed458e":"code","201324cf":"code","513aae85":"code","cf5ae1d0":"code","638264e7":"code","f79626eb":"code","cc6d3baf":"code","9c0fbc01":"code","a080c23f":"code","88a9cc93":"code","06d02999":"code","660c8901":"code","90cbb8ee":"code","4df84ec9":"code","30ac82b6":"code","8343918b":"code","05b040c8":"code","46487755":"code","4b458188":"code","de27c159":"code","c0e52d67":"code","adc144f1":"code","f7e35681":"code","5940b20c":"code","85d9818b":"code","cec7e9ec":"code","89a0f233":"code","407fd1f7":"code","35d64eb4":"code","4dcd6a04":"code","442f1b5c":"code","ae1ede1a":"code","9bdbb0c9":"code","314696e5":"code","db13ceb7":"code","faeee557":"code","f004b0c0":"markdown","037377c8":"markdown","acf11f85":"markdown","13f1b0eb":"markdown","efe36df8":"markdown","bd69d477":"markdown","0389cc0b":"markdown"},"source":{"1db33ed6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7ed458e":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","201324cf":"df_combine = pd.concat([df,df_test])\ndf_combine.reset_index(drop=True, inplace=True)","513aae85":"df.head()","cf5ae1d0":"df.info()","638264e7":"total = df.isnull().sum().sort_values(ascending = False)\npercent = round(df.isnull().sum().sort_values(ascending = False) * 100 \/len(df),2)\npd.concat([total, percent], axis=1, keys=['Total','Percent'])","f79626eb":"df1 = df.drop(columns=[\"Cabin\",\"PassengerId\",\"Name\",\"Ticket\"])\n\ndf1['Age'].fillna((df1['Age'].mean()), inplace=True)\n\ndf1[\"Embarked\"].fillna(\"S\", inplace = True)","cc6d3baf":"df1['Family'] = df1['SibSp'] + df1['Parch']","9c0fbc01":"df1.drop(['SibSp','Parch'], axis=1, inplace=True)","a080c23f":"df1.head()","88a9cc93":"df_test1 = df_test.drop(columns=[\"Cabin\",\"PassengerId\",\"Name\",\"Ticket\"])\n\ndf_test1['Age'].fillna((df_test1['Age'].mean()), inplace=True)\n\ndf_test1['Fare'].fillna((df_test1['Fare'].mean()), inplace=True)","06d02999":"df_test1","660c8901":"df_test1['Family'] = df_test1['SibSp'] + df_test1['Parch']\ndf_test1.drop(['SibSp','Parch'], axis=1, inplace=True)","90cbb8ee":"df_test1.info()","4df84ec9":"plt.figure(figsize = (18,8))\nsns.catplot(x = 'Age', y= 'Fare', data = df1, kind='point', aspect=4);\nplt.show()","30ac82b6":"fig, saxis = plt.subplots(1, 3,figsize=(16,8))\nsns.boxplot(y=df1['Fare'], ax = saxis[0])\nsns.boxplot(y=df1['Age'], ax = saxis[1])\nsns.boxplot(y=df1['Family'], ax = saxis[2])","8343918b":"fig, saxis = plt.subplots(1, 3,figsize=(16,8))\n\nsns.countplot(df1['Pclass'], hue = df1['Survived'], ax = saxis[0])\nsns.countplot(df1['Embarked'], hue = df1['Survived'], ax = saxis[1])\nsns.countplot(df1['Sex'], hue = df1['Survived'], ax = saxis[2])","05b040c8":"plt.figure(figsize=[16,15])\n\nplt.subplot(231)\nplt.hist(x = [df1[df1['Survived']==1]['Age'], df1[df1['Survived']==0]['Age']],stacked=True)\nplt.xlabel('Age (Years)')\nplt.ylabel('No. of Passengers')\n\nplt.subplot(232)\nplt.hist(x = [df1[df1['Survived']==1]['Fare'], df1[df1['Survived']==0]['Fare']],stacked=True)\nplt.xlabel('Fare')\nplt.ylabel('No. of Passengers')\n\nplt.subplot(233)\nplt.hist(x = [df1[df1['Survived']==1]['Family'], df1[df1['Survived']==0]['Family']],stacked=True)\nplt.xlabel('Family Members')\nplt.ylabel('No. of Passengers')","46487755":"h = sns.FacetGrid(df1, row = 'Sex', col = 'Pclass', hue = 'Survived')\nh.map(plt.hist, 'Age', alpha = .75)\nh.add_legend()","4b458188":"grid = sns.FacetGrid(df1, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","de27c159":"#categorical data\ndf_cat = df1[['Sex','Embarked']]\ndf_test_cat = df_test1[['Sex','Embarked']]","c0e52d67":"df_cat = pd.get_dummies(df_cat)\ndf_test_cat = pd.get_dummies(df_test_cat)","adc144f1":"df_cat","f7e35681":"#numerical data\ndf_num = df1[['Age','Fare']]\ndf_test_num = df_test1[['Age','Fare']]","5940b20c":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","85d9818b":"df_num[['Age','Fare']] = scaler.fit_transform(df_num[['Age','Fare']])\ndf_test_num[['Age','Fare']] = scaler.fit_transform(df_test_num[['Age','Fare']])","cec7e9ec":"df_num","89a0f233":"df_test","407fd1f7":"df2 = pd.concat([df_num,df_cat,df1[['Survived','Pclass','Family']]],axis=1)\ndf_test2 = pd.concat([df_test_num,df_test_cat,df_test1[['Pclass','Family']]],axis=1)","35d64eb4":"from sklearn.model_selection import train_test_split","4dcd6a04":"X_train = df2.drop(\"Survived\", axis = 1)\ny_train = df2[\"Survived\"]\nX_test= df_test2","442f1b5c":"from sklearn.tree import DecisionTreeClassifier\nalgo = DecisionTreeClassifier()\nalgo.fit(X_train, y_train)","ae1ede1a":"model = DecisionTreeClassifier() \nmodel.fit(X_train, y_train)\ny_pred_dt = model.predict(X_test) \nmodel.score(X_train,y_train)","9bdbb0c9":"from sklearn.neighbors import KNeighborsClassifier","314696e5":"model = KNeighborsClassifier(n_neighbors = 3) \nmodel.fit(X_train, y_train)  \ny_pred_knn = model .predict(X_test)  \nmodel.score(X_train,y_train)","db13ceb7":"from sklearn.linear_model import LogisticRegression","faeee557":"model = LogisticRegression()\nmodel.fit(X_train,y_train)\ny_pred_lr=model.predict(X_test)\nmodel.score(X_train,y_train)","f004b0c0":"# Logistic Regression","037377c8":"# Cleaning the data","acf11f85":"# Decision Tree","13f1b0eb":"# Predictive Modeling","efe36df8":"# Data Preprocessing","bd69d477":"# KNeighborsClassifier","0389cc0b":"# Data Exploration"}}