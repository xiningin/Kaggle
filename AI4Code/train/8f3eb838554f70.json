{"cell_type":{"593af1e0":"code","dc1d33de":"code","c37fc643":"code","e2fd726e":"code","7621ba7b":"code","a05278a9":"code","d1503491":"code","91d3819f":"code","3bd2bc0c":"code","398747ec":"code","1c82bb32":"code","c0ff16b4":"code","33a8296a":"code","e641306c":"code","a5077405":"code","6667ef1c":"code","a66499cf":"code","453643d9":"code","7998236f":"code","d7bcbb40":"code","f0b60e9d":"code","bfbb88f4":"code","288b8818":"code","abe49bd0":"code","3e9a447b":"code","59aa8fe6":"code","c17f0a31":"code","fe5d266a":"markdown","793e1844":"markdown","06ccbb6a":"markdown","2a6f2f8d":"markdown","55109f47":"markdown","a64b63d7":"markdown","4a6608bf":"markdown","57db1c08":"markdown","3665c52a":"markdown","3cd49773":"markdown","11e64c33":"markdown","1f685803":"markdown","8c6baa2b":"markdown","6893cbb4":"markdown","b0a9388d":"markdown","a1d3b9d1":"markdown","7fff75cf":"markdown","bce4a499":"markdown"},"source":{"593af1e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dc1d33de":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.model_selection import GroupShuffleSplit\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import learning_curve\nimport seaborn as sns","c37fc643":"def data_split(X, y, train_size=0.8):\n    return train_test_split(X, y, train_size=train_size, random_state=0)\n\n\ndef plot_learning_curve(estimator, features_data, target, train_sizes, cv=5, ylim=None):\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.yticks(np.arange(0.0, 1.1, 0.05))\n    plt.tick_params(labelright=True)\n    \n    train_sizes, train_scores, validation_scores = learning_curve(estimator, features_data, target, \n                                                                  train_sizes = train_sizes, cv = cv, \n                                                                  scoring = 'neg_mean_absolute_error')\n    train_scores_mean = -train_scores.mean(axis = 1)\n    validation_scores_mean = -validation_scores.mean(axis = 1)\n    \n    plt.grid()\n\n    plt.plot(train_sizes, train_scores_mean, label = 'Training error')\n    plt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\n\n    plt.ylabel('MSE', fontsize = 14)\n    plt.xlabel('Training set size', fontsize = 14)\n    title = 'Learning curves for a ' + str(estimator).split('(')[0] + ' model'\n    plt.title(title, fontsize = 18, y = 1.03)\n    plt.legend()\n    \n    return plt\n","e2fd726e":"data_df = pd.read_csv('..\/input\/30-days-of-ml\/train.csv')\ndata_df.head()","7621ba7b":"features_cat = [col for col in data_df.columns if 'cat' in col]\nprint('******* # of features:', len(features_cat), '*******\\n', features_cat)\nfeatures_cont = [col for col in data_df.columns if 'cont' in col]\nprint('******* # of features:', len(features_cont), '*******\\n', features_cont)","a05278a9":"data_df.isnull().sum()","d1503491":"k = [1,1,2,2,3,3,4,4,5,5]\nplt.subplots(10,2,figsize=(23,4))\nfor i, f in enumerate(features_cat[:]):\n    j = 1 if i%2==0 else 2\n    plt.subplot(k[i],2,j)\n    sns.countplot(x=f, data=data_df)\n    if i%2!=0:\n        plt.show()","91d3819f":"\nfor i, f in enumerate(features_cont):\n    plt.subplots(1,2,figsize=(23,4))\n    print(f)\n    plt.subplot(1,2,1)\n    sns.boxplot(x=f, data=data_df)  \n    plt.subplot(1,2,2)\n    data_df[f].hist(edgecolor='black',color='lightblue')\n    plt.show()","3bd2bc0c":"features = features_cat + features_cont\ntarget = 'target'\n\nX = data_df[features]\ny = data_df[target]\nX_train, X_valid, y_train, y_valid = data_split(X, y)\n\n\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nprint('Final Features (After feature selection and hot-encoding):\\n', list(X_train.columns), '\\n', '*'*40, '\\n# of Features: {}'.format(len(X_train.columns)), '\\n', '*'*40)\nX_train.head()","398747ec":"%%time\n\ntrain_sizes = [1, 100, 500, 2000, 5000, 7500, 10000, 15000, 20000, 25000]\n\nmodels = [XGBRegressor(),\n          RandomForestRegressor()]\n\nplt.subplots(1,2,figsize=(18,8))\n\nfor i, model in enumerate(models):\n    plt.subplot(1,2,i+1)\n    plot_learning_curve(model, X_train, y_train, train_sizes, cv=5)","1c82bb32":"features_cat = ['cat0', 'cat1', 'cat9']\nfeatures_cont = [f for f in features_cont if f not in ['cont4']]\nfeatures = features_cat + features_cont\ntarget = 'target'","c0ff16b4":"X = data_df[features]\ny = data_df[target]\nX_train, X_valid, y_train, y_valid = data_split(X, y)\n\n\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nprint('Final Features (After feature selection and hot-encoding):\\n', list(X_train.columns), '\\n', '*'*40, '\\n# of Features: {}'.format(len(X_train.columns)), '\\n', '*'*40)\nX_train.head()","33a8296a":"%%time\nmodel = XGBRegressor(n_estimators= 1000,\n                     learning_rate= 0.025,\n                     eval_metric='rmse')\n\nreg_1 = model.fit(X_train, y_train) # Your code here\n\npredictions = reg_1.predict(X_valid)\n\nmae = mean_absolute_error(predictions, y_valid)\nprint(\"Mean Absolute Error:\" , mae)\n\nmse = mean_squared_error(predictions, y_valid)\nprint(\"Mean Squared Error:\" , mse)\n\nrmse = mean_squared_error(predictions, y_valid, squared=False)\nprint(\"Root Mean Squared Error:\" , rmse)","e641306c":"ORDERS_ENCODING = {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I':9, 'J': 10, 'K':11, 'L': 12, 'M': 13, 'N': 14, 'O': 15}","a5077405":"X = data_df[features]\nfor f in features_cat:\n    X[f] = X[f].apply(lambda x: ORDERS_ENCODING[x])\n\ny = data_df[target]\nX_train, X_valid, y_train, y_valid = data_split(X, y)\n\n\n    \nprint('Final Features (After feature selection and ordinal-encoding):\\n', list(X_train.columns), '\\n', '*'*40, '\\n# of Features: {}'.format(len(X_train.columns)), '\\n', '*'*40)\n    \nX_train.head()","6667ef1c":"%%time\nmodel = XGBRegressor(n_estimators= 1000,\n                     learning_rate= 0.1,\n                     eval_metric='rmse')\n\nreg_2 = model.fit(X_train, y_train)\n\npredictions = reg_2.predict(X_valid)\n\nmae = mean_absolute_error(predictions, y_valid)\nprint(\"Mean Absolute Error:\" , mae)\n\nmse = mean_squared_error(predictions, y_valid)\nprint(\"Mean Squared Error:\" , mse)\n\nrmse = mean_squared_error(predictions, y_valid, squared=False)\nprint(\"Root Mean Squared Error:\" , rmse)","a66499cf":"def custom_preprocess(X):\n    X['cont4_cat'] = X['cont4'].apply(lambda x: 'ge_0.35' if x>=0.35 else 'l_0.35') # ge: greater_or_equal  --- l: less\n    X=X.drop('cont4', 1)\n\n    # cat3 ==> the majority is C while other to be categorized as O: other\n    X['cat3_new'] = X['cat3'].apply(lambda x: x if x=='C' else 'O') \n    X=X.drop('cat3', 1)\n\n    # cat4 ==> the majority is B while other to be categorized as O: other\n    X['cat4_new'] = X['cat4'].apply(lambda x: x if x=='B' else 'O') \n    X=X.drop('cat4', 1)\n\n    # cat6 ==> the majority is A while other to be categorized as O: other\n    X['cat6_new'] = X['cat6'].apply(lambda x: x if x=='A' else 'O') \n    X=X.drop('cat6', 1)\n\n    # cat7 ==> the majority is E while other to be categorized as O: other\n    X['cat7_new'] = X['cat7'].apply(lambda x: x if x=='E' else 'O') \n    X=X.drop('cat7', 1)\n    return X","453643d9":"# cont4 ==> to be converted to categorical >> \nX = data_df.copy()\nX = X.drop('id',1)\nX = X.drop(target,1)\n\nX = custom_preprocess(X)\n\ny = data_df[target]\nX_train, X_valid, y_train, y_valid = data_split(X, y)\n\n\nX_train = pd.get_dummies(X_train)\nX_valid = pd.get_dummies(X_valid)\nprint('Final Features (After feature selection and hot-encoding):\\n', list(X_train.columns), '\\n', '*'*40, '\\n# of Features: {}'.format(len(X_train.columns)), '\\n', '*'*40)\nX_train.head()","7998236f":"%%time\nmodel = XGBRegressor(n_estimators= 100,\n                     learning_rate= 0.05,\n                     eval_metric='rmse')\n\nreg_2 = model.fit(X_train, y_train) # Your code here\n\npredictions = reg_2.predict(X_valid)\n\nmae = mean_absolute_error(predictions, y_valid)\nprint(\"Mean Absolute Error:\" , mae)\n\nmse = mean_squared_error(predictions, y_valid)\nprint(\"Mean Squared Error:\" , mse)\n\nrmse = mean_squared_error(predictions, y_valid, squared=False)\nprint(\"Root Mean Squared Error:\" , rmse)","d7bcbb40":"feature_important = clf_2.get_booster().get_score(importance_type='weight')\nkeys = list(feature_important.keys())\nvalues = list(feature_important.values())\n\nimp_df = pd.DataFrame(data=values, index=keys, columns=[\"score\"]).sort_values(by = \"score\", ascending=False)\nimp_df.plot(kind='barh', figsize=(22,16))\nimp_df","f0b60e9d":"final_features_df = imp_df[imp_df['score']>=100].reset_index()\nfinal_features = list(final_features_df['index'].unique())\nfinal_features","bfbb88f4":"X_train = X_train[final_features]\nX_valid = X_valid[final_features]\nprint('Final Features (After feature selection and hot-encoding):\\n', list(X_train.columns), '\\n', '*'*40, '\\n# of Features: {}'.format(len(X_train.columns)), '\\n', '*'*40)\nX_train.head()","288b8818":"%%time\nmodel = XGBRegressor(n_estimators= 100,\n                     learning_rate= 0.025,\n                     eval_metric='rmse')\n\nreg_3 = model.fit(X_train, y_train) # Your code here\n\npredictions = reg_3.predict(X_valid)\n\nmae = mean_absolute_error(predictions, y_valid)\nprint(\"Mean Absolute Error:\" , mae)\n\nmse = mean_squared_error(predictions, y_valid)\nprint(\"Mean Squared Error:\" , mse)\n\nrmse = mean_squared_error(predictions, y_valid, squared=False)\nprint(\"Root Mean Squared Error:\" , rmse)","abe49bd0":"# import test dataset\ntest = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')\ntest.head()","3e9a447b":"# Pre-processing\ntest = custom_preprocess(test)\ntest.head()\nfinal_features","59aa8fe6":"predictions = reg_3.predict(test[final_features])\ntest['target'] = predictions\ntest.head()","c17f0a31":"# Generate submission sample\ntest[['id', 'target']].to_csv('submission.csv', index=False)\n\n#Check if submission is saved\nsub = pd.read_csv('submission.csv')\ndisplay(sub)","fe5d266a":"#### Continuous Data","793e1844":"#### One-Hot Encoding","06ccbb6a":"#### Ordinal Encoding","2a6f2f8d":"# Conclusion\nThis notebooj has employed subtle data analysis to help select and extract the most significant features. It has also shown what algorithm (XGBoost, RandomForest) has shown better performance. Most importantly, it has been shown that the the features whose data type is \"continuous\" have shown the best performance over other categorical data points.","55109f47":"# End of Notebook","a64b63d7":"### Advanced Feature Selection\nHere, the features whose significant are in the lowest will be neglected","4a6608bf":"## Util Functions","57db1c08":"# EDA\n### Missings Check","3665c52a":"## Model Testing","3cd49773":"# 30 Days of ML Competition\nIn this notebook we weill use different techniques in selecting the most significant features and the best model. It will use Data Analysis and ML as it will be shown.\n\n<hr>","11e64c33":"By using an RSME metric, the least is the best. It can be seen that the 1st regressor has somewhat shown the best performance.","1f685803":"#### Feature Selection & Model Tuning\nAll features representing skewed data will be neglected, therefor:","8c6baa2b":"## Import packages","6893cbb4":"Rather than removing features whose data are skewed, new features will be extracted; in an attempt to improve model results.","b0a9388d":"## Import Training Data","a1d3b9d1":"# Modeling\n## Baseline Model\n#### Model Selection","7fff75cf":"### Data distibution\n#### Categorical Data","bce4a499":"As shown in the learning curves above, it can be seen that the XGBoost has performed better than the RF. In the graph on the left, it can be seen how the variance (overfitting) is much lower."}}