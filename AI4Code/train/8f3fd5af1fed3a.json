{"cell_type":{"4cbe25b6":"code","7db2e288":"code","d6380472":"code","c4adfed1":"code","b5f617a3":"code","9fd35195":"code","03179e1a":"code","b5c7556d":"code","5c9e005c":"code","4edbeaa8":"code","d6f74f58":"code","a3503344":"code","aa21cdf3":"code","9c9ec63f":"code","dc7ad3e7":"code","3e9bb822":"code","fdad9413":"code","ab11e1de":"code","65697197":"code","d75873a5":"code","c1a6c4c0":"code","3df20f8a":"code","e11bb618":"code","cc7fa4df":"code","5afb8838":"code","ca0f911e":"code","32344c2d":"code","f4ad06ed":"code","18ae5f78":"code","436a9e6c":"code","0f30198d":"code","a5ae0831":"code","d15bc8bc":"code","1d82a7e4":"code","8a4528ef":"code","0772380e":"code","14821e76":"code","131e88a7":"code","7d73fde1":"code","b20df44e":"code","cb56d9cf":"code","e2e9e144":"code","c1f3af0d":"code","2a6c3046":"code","ce9f70f6":"code","b996bec4":"code","218d9684":"code","c20fa311":"code","5e5a6918":"code","75c94233":"code","ed8f79df":"code","0bad3cd2":"code","20450e81":"code","977952d9":"code","e538a661":"code","04ee3144":"code","bd9b4627":"code","2395fc3d":"code","eb0f5490":"code","3eff76e0":"code","b0357e09":"code","a1856f7f":"code","d980397f":"code","49ffb964":"code","f24b4aeb":"code","e3087d97":"code","961ecdce":"code","8a6fee83":"code","57f7e857":"code","b32afec7":"code","593c8ff9":"code","323c79ff":"code","0de72991":"code","b9fc3d26":"code","8d6be1fb":"code","77363930":"code","9ac6c134":"code","7fbe353f":"code","160af82b":"code","9d37372a":"code","e37ae6b9":"code","8ba75c84":"code","afde67ae":"code","96c3a6b6":"code","ddfd7dd6":"code","b02e66c1":"code","667947d8":"code","a9bf4c5c":"code","e1763cf5":"code","d2780743":"code","a3179bff":"code","c573f2c9":"code","d0bf02aa":"code","b51954fe":"code","627b0aaa":"code","fd38ff7d":"code","97c83409":"code","a0ba596c":"code","b9549eac":"code","79eb930d":"code","63c2dd6e":"code","23b443eb":"code","aa908d91":"code","6f031ee5":"code","cc5f4b7f":"code","92baa9b9":"code","ce5e7306":"code","ca986f5f":"code","602fe4ee":"code","f4766d9e":"code","9633f4df":"code","ce5e245a":"code","fe299f33":"code","a5a5e58d":"code","ff4c6032":"code","8cbdf584":"code","750574fd":"code","113fefe4":"code","f673cdad":"code","4f8e7472":"code","669ef7c1":"code","46282445":"code","640e4a48":"code","e91d3021":"code","2d04e19b":"code","d0cbebeb":"code","5f125eff":"code","0c29e064":"code","33db6dd5":"code","522d8283":"code","7c395062":"code","d81acb11":"code","92faf91d":"code","f72aa46c":"code","ef3ce6d7":"code","4451cc0f":"code","99b80040":"code","d39d1cd0":"code","6917d547":"code","b3e4519d":"code","38155792":"code","7d11f5bb":"code","0e78c7af":"code","d1e37099":"code","96bb3eb6":"code","22ab6439":"code","f29508e3":"code","9f86ee49":"code","b6100e47":"code","c46a917e":"code","41291b6c":"code","a3337be5":"code","014fd7d3":"code","b3208977":"code","2b2b3023":"code","6771a8fc":"code","d37975eb":"code","731609db":"code","715c89c9":"code","46c462eb":"code","5e103e6d":"code","04384f51":"code","188ea9cd":"code","bd885342":"code","0a5cf18f":"code","d59fbb73":"code","bcd13197":"code","ba89bf82":"code","a71c497b":"code","5055853c":"code","a353e147":"code","0eb95c93":"code","1cb0fd5e":"code","4f1758fb":"code","2ed0194e":"code","43ce413d":"code","06c3f3d6":"code","c354d5e9":"code","f4f85742":"code","827bb4d7":"code","fae3fbc5":"code","64790d57":"code","25a80e6c":"code","ae7e3e7c":"code","7a4144e3":"code","0414d75d":"code","f0c79c68":"code","c254d198":"code","11127089":"code","23c04b3c":"code","b79ba5a6":"code","6698a16f":"code","db8bf009":"code","d2d300ee":"code","5ddfa263":"code","0b49edaf":"code","e56e1781":"code","3050ee49":"code","f897d211":"code","889ff505":"code","a514e008":"code","8fa34489":"code","c6950056":"code","d3a70217":"code","5cf98aef":"code","adc80a2b":"code","98602f00":"code","c96fa670":"code","e23b5e9f":"code","aa403fa2":"code","e48be4d9":"code","4277c8f4":"code","e500cb1a":"code","6c6ab2ee":"code","b8c24373":"code","4189e4a1":"code","db4a606a":"code","08c93ea3":"code","9e9b030a":"code","a1d4daf5":"code","922838c7":"code","ebd88108":"code","dec84eda":"code","fc564447":"code","c535c5f1":"code","fe82ab54":"code","be50cfc0":"code","ae62f6e6":"code","12fee6a3":"code","42f3418c":"code","fbb84eb3":"code","d9120d74":"code","a32d811e":"code","a9637d25":"code","25f038ea":"code","b053eccf":"code","d7e97513":"code","87cd528c":"code","8ce44ade":"code","ba85f133":"code","e04ca6a7":"code","f4d5df83":"code","dff22877":"code","7a763184":"code","fca8bda0":"code","258e9344":"code","07c4f3c2":"code","684c8b5d":"code","757436bf":"code","f75407e3":"code","71925f2d":"code","909f6d2a":"code","02abe501":"code","d790ba03":"code","4460650c":"code","b2592990":"code","566660e9":"code","68ef66da":"code","6906af56":"code","cd552c0d":"code","634bdda0":"code","1004d5f7":"code","3130eda4":"code","e75da805":"code","a7ba2033":"code","de7cc9c1":"code","40370300":"code","2debd3ad":"code","e78ba6c7":"code","f5b476d0":"code","88a6bfd3":"code","517e8e8f":"code","4bba16a7":"code","a33b1ba3":"code","6e9f2fa9":"code","199eda13":"code","642ec13a":"code","4aee2e3e":"code","99e27f9a":"code","48c66da8":"code","bb0a7b0f":"code","f68b304f":"code","a549c13f":"code","32311cd6":"code","2b32e3ac":"code","d0202577":"code","c746025d":"code","ded2963f":"code","676c47ac":"code","f1b575e4":"code","f0d13ad9":"code","63d8e015":"code","fbb39e06":"code","93c21210":"code","f2cbcd4c":"code","e126ca45":"code","47f88d6b":"code","7c9bba61":"code","314703cc":"code","4ede7991":"code","fb254293":"code","2d254ab4":"code","a2b32f7a":"code","a4bd855c":"code","5fcd7163":"code","e4dcd002":"code","4ed7ea14":"code","8977bb1d":"code","0c5e2ef3":"code","30149973":"code","9ce61126":"code","703f7fd4":"code","5d476b8a":"code","48c67cfc":"code","522d0a80":"code","4ba453d2":"code","178d82b6":"code","c05e024c":"code","5928d0e7":"code","f2f0f10e":"code","bb8fb7b3":"code","89301fe2":"code","7b069b5a":"code","68645f6d":"code","11a88383":"code","248f91aa":"code","0d2cf2ae":"code","128a035e":"markdown","765972c8":"markdown","22e0ac97":"markdown","1237661b":"markdown","89d35105":"markdown","da3e2292":"markdown","47c836b7":"markdown","02c5c45f":"markdown","c5c3a14b":"markdown","e5f98429":"markdown","5c70356b":"markdown","618ca8c5":"markdown","a9ffd38d":"markdown","e70163f0":"markdown","1470af5b":"markdown","b47d532a":"markdown","4b3118b6":"markdown","559c780f":"markdown","6dc11cd8":"markdown","82ddc920":"markdown","db0eae8e":"markdown","7ec1f1db":"markdown","40340d56":"markdown","a0e01f09":"markdown","b3416613":"markdown","e1808b21":"markdown","ddbd3113":"markdown","56be4f97":"markdown","9b174a97":"markdown","dc7bb631":"markdown","6f450132":"markdown","717a410e":"markdown","cd6edd51":"markdown","6a9bb6a2":"markdown","63ce1111":"markdown","f10ad24a":"markdown","cd821e98":"markdown","c643a3fe":"markdown","e373c3ed":"markdown","54211e7b":"markdown","bfe46170":"markdown","21ed1f03":"markdown","89c8672e":"markdown","3a442e54":"markdown","9d361816":"markdown","ac67559d":"markdown","b442e009":"markdown","a18f54dc":"markdown","23605576":"markdown","7671dc3d":"markdown"},"source":{"4cbe25b6":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl","7db2e288":"pokemon = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/pokemon_updated.csv\")\npokemon.head(10)","d6380472":"stdperf = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/studentp.csv\")\nstdperf.head(10)","c4adfed1":"corona = pd.read_csv('..\/input\/mathplotlib-tutorial\/countries-aggregated.csv' ,\n                     index_col='Date' , parse_dates=True)\ncorona.head(10)","b5f617a3":"spotify = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/spotify.csv\" , index_col=\"Date\")\nspotify.head(10)","9fd35195":"housing = pd.read_csv('..\/input\/mathplotlib-tutorial\/housing.csv')\nhousing.tail()","03179e1a":"insurance = pd.read_csv('..\/input\/mathplotlib-tutorial\/insurance.csv')\ninsurance.head(10)","b5c7556d":"! pip install openpyxl","5c9e005c":"employment = pd.read_excel(\"..\/input\/mathplotlib-tutorial\/unemployment.xlsx\")\nemployment.head(10)","4edbeaa8":"helpdesk = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/helpdesk.csv\")\nhelpdesk.head(10)","d6f74f58":"fish= pd.read_csv(\"..\/input\/mathplotlib-tutorial\/Fish.csv\")\nfish.head(10)","a3503344":"exercise = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/exercise.csv\")\nexercise.head(10)","aa21cdf3":"suicide = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/suicide.csv\") \nsuicide.head(10)","9c9ec63f":"canada = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/canada.csv\")\ncanada.head()","dc7ad3e7":"canada.columns","3e9bb822":"canada.drop(columns=['AREA' , 'DEV', 'DevName' , 'REG', 'Type', 'Coverage' , 'AreaName', 'RegName' ], inplace=True)\ncanada.head()","fdad9413":"canada.rename(columns={'OdName':'Country'} , inplace=True)\ncanada.set_index(canada.Country,inplace=True)\ncanada.head()","ab11e1de":"canada.index.name=None\ncanada.head()","65697197":"del canada['Country']\ncanada.head()","d75873a5":"canada = canada.transpose()","c1a6c4c0":"canada.head()","3df20f8a":"led = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/Life Expectancy Data.csv\")\nled.head()","e11bb618":"adult = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/adult.csv\")\nadult.head(10)","cc7fa4df":"adult = adult[adult[\"workclass\"].isin (['Private', 'State-gov', 'Federal-gov'])]\nadult.head()","5afb8838":"iris = sns.load_dataset(\"iris\")\niris.head()","ca0f911e":"cars = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/cars.csv\")\ncars.head(10)","32344c2d":"col1 = np.linspace(0, 10, 1000)\ncol2 = np.sin(col1)\ndf = pd.DataFrame({\"C1\" : col1 , \"C2\" :col2})\ndf.head(10)","f4ad06ed":"# Plotting lineplot using sns.lineplot()\nplt.style.use('seaborn-darkgrid')\n%matplotlib inline \nsns.lineplot(x=df.C1,y=df.C2,data=df)\nplt.show()","18ae5f78":"\"\"\"  - Adjusting background color using axes.facecolor\n     - Changing label size using xtick.labelsize , ytick.labelsize \"\"\"\n\nplt.figure(figsize=(14,6))\nsns.set(rc={\"axes.facecolor\":\"#FFFDE7\", \"axes.grid\":True,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.lineplot(x=df.C1,y=df.C2,data=df , linewidth = 2)\nsns.lineplot(x=df.C1,y=df.C2+1,data=df , linewidth = 2)\nplt.show()","436a9e6c":"\"\"\"  - Adjusting background color using axes.facecolor\n     - Changing label size using xtick.labelsize , ytick.labelsize \"\"\"\n\nplt.figure(figsize=(14,6))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.lineplot(x=df.C1,y=df.C2,data=df , color = \"#FF5722\" , linewidth = 2 )\nsns.lineplot(x=df.C1,y=np.cos(df.C1),data=df , color = \"#FFEB3B\" , linewidth = 2)\nplt.show()","0f30198d":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","a5ae0831":"import warnings\nwarnings.filterwarnings(\"ignore\")","d15bc8bc":"plt.figure(figsize=(20,8))\nsns.lineplot(data=spotify)\nplt.show()","1d82a7e4":"spotify.index = pd.to_datetime(spotify.index) # Converting datatype of index to Datetime","8a4528ef":"plt.figure(figsize=(20,8))\nsns.lineplot(data=spotify,linewidth = 2)\nplt.title(\"Daily Global Streams\")\nplt.show()","0772380e":"# Using Matplotlib for same visualization\nimport matplotlib as mpl\nplt.figure(figsize=(20,8))\nplt.plot(spotify['Despacito'] , label=\"Despacito\")\nplt.plot(spotify['Shape of You'] , label=\"Shape of You\")\nplt.plot(spotify['Something Just Like This'] , label=\"Something Just Like This\")\nplt.plot(spotify['HUMBLE.'] , label=\"Humble\")\nplt.plot(spotify['Unforgettable'] , label=\"Unforgettable\")\nplt.legend()\nplt.show()","14821e76":"plt.figure(figsize=(20,6))\nsns.lineplot(data=spotify['Despacito'],linewidth = 1.5 , label = 'Despacito')\nsns.lineplot(data=spotify['HUMBLE.'],linewidth = 1.5 , label = 'Humble')\nplt.show()","131e88a7":"canada.head()","7d73fde1":"plt.figure(figsize=(16,6))\nplt.title(\"Immigrants from India\",fontsize = 14)\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':10,'ytick.labelsize':10})\nplt.xticks(rotation=45) # Rotating X tickts by 45 degrees\nsns.lineplot(x = canada.index.values, y = canada['India'])\nplt.show()","b20df44e":"# Plotting multiple sets of data (E.g Immigration data of multiple countries in one plot)\nplt.figure(figsize=(16,6))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':10,'ytick.labelsize':10})\nplt.title(\"Immigrants from India , Pakistan & Bangladesh\",fontsize = 14)\nplt.xticks(rotation=45) # Rotating X tickts by 45 degrees\nsns.lineplot(x = canada.index.values, y = canada['India'] , color = '#ff9900' , label= 'India')\nsns.lineplot(x = canada.index.values, y = canada['Pakistan'] , color = '#4586ff' , label = 'Pakistan')\nsns.lineplot(x = canada.index.values, y = canada['Bangladesh'] , color = '#a2ef44' , label = 'Bangladesh')\nplt.legend(facecolor= 'grey' , fontsize='large' , edgecolor = 'black' ,shadow=True) # Legend formatting\nplt.show()","cb56d9cf":"# Plotting multiple sets of data using for loop (E.g Immigration data of multiple countries in one plot)\nplt.figure(figsize=(16,6))\nplt.title(\"Immigrants\",fontsize = 16)\nfor i in canada.columns:\n    if canada[i].name != 'Total' and canada[i].name != 'Unknown':\n        x=canada.index.values\n        y=canada[i]\n        sns.lineplot(x,y)\nplt.xlabel ('Year')\nplt.ylabel ('Country')\nplt.show()","e2e9e144":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","c1f3af0d":"employment.head()","2a6c3046":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\n# Group variable using \"hue\" that will produce lines with different colors\nsns.lineplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Gender\" , data=employment) \nplt.show()","ce9f70f6":"# Using markers to identify groups\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"Period\" , y=\"Unemployed\" , hue = \"Gender\" ,style=\"Gender\" , markers=True , dashes=False ,data=employment)\nplt.show()","b996bec4":"plt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"Period\" , y=\"Unemployed\" , hue = \"Gender\" ,style=\"Gender\" ,  err_style=\"bars\", ci=70, data=employment)\nplt.show()","218d9684":"plt.figure(figsize=(14,7))\nsns.set(rc={'xtick.labelsize':17,'ytick.labelsize':10,'axes.labelsize':15 , \"axes.grid\":False})\n\n# Use \"Pallete\" to specify the colors to be used for different levels of the hue\nsns.lineplot(x=\"Period\" , y=\"Unemployed\", data = employment, hue = \"Gender\",\n            style = \"Gender\", dashes = False, palette = 'CMRmap' , markers = [\"o\", \">\"])\n\nplt.show()","c20fa311":"# Color and line dashing to represent 2 different grouping variables using \"hue\" & \"style\"\nplt.figure(figsize=(16,9))\nplt.style.use('seaborn-darkgrid')\nplt.gcf().text(.2, .84, \"Line Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.lineplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Age\" , style=\"Gender\" , data=employment)\nplt.show()","5e5a6918":"emp = employment[employment.Period.between('2005-01-01', '2006-01-01' , inclusive = True)]\nemp.tail()","75c94233":"#Showing all experiments instead of Aggregate using \"units\" and \"estimator\"\nplt.figure(figsize=(14,7))\nplt.style.use('seaborn-darkgrid')\nsns.lineplot(x=\"Period\" , y=\"Unemployed\" , hue = \"Age\" ,style=\"Gender\" ,\n units=\"Age\" ,markers=True , dashes=False ,estimator=None, lw=1,data=emp)\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='large')\nplt.show()","ed8f79df":"# Combining lineplots using relplot\nplt.figure(figsize=(10,10))\nsns.set(rc={'xtick.labelsize':17,'ytick.labelsize':17,'axes.labelsize':20  , \"axes.grid\":False})\nsns.relplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Age\" , col=\"Gender\",kind='line', height=8.5, aspect=1 ,data=employment)\nplt.show()","0bad3cd2":"corona.head()","20450e81":"plt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'Italy']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'Italy']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'Italy']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in Italy\")\nplt.show()","977952d9":"plt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'US']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in USA\")\nplt.show()","e538a661":"# Enabling whitegrid style\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'US']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in USA\")\nplt.show()","04ee3144":"# Enabling darkgrid style\nsns.set_style(\"darkgrid\") \nplt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'US']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in USA\")\nplt.show()","bd9b4627":"# Ticks Style\nsns.set_style(\"ticks\")\nplt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'US']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in USA\")\nplt.show()","2395fc3d":"sns.set_style(\"white\")\nplt.figure(figsize=(20,6))\nsns.lineplot(data=corona[corona['Country'] == 'US']['Confirmed'] , label = \"Confirmed\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Deaths'] , label = \"Deaths\")\nsns.lineplot(data=corona[corona['Country'] == 'US']['Recovered'], label = \"Recovered\")\nplt.title(\"Total Confirmed Cases \/ Deaths \/ Recovered in USA\")\nplt.show()","eb0f5490":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","3eff76e0":"insurance.head(5)","b0357e09":"plt.figure(figsize=(7,7))\nsns.scatterplot(x=insurance.bmi , y=insurance.charges )\nplt.show()","a1856f7f":"#Changing the color of data points using \"color\" parameter\nplt.figure(figsize=(7,7))\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , color='#91bd3a')\nplt.show()","d980397f":"#Changing the shape of data points using \"marker\" parameter\nplt.figure(figsize=(8,8))\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , color='#339900' , marker = \">\"  )\nplt.show()","49ffb964":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(7,7))\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , hue=insurance.sex )\nplt.show()","f24b4aeb":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(7,7))\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , hue=insurance.smoker)\nplt.show()","e3087d97":"#Setting X limit using \"plt.xlim\"\nplt.figure(figsize=(7,7))\nplt.xlim([0,55])\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , hue=insurance.smoker)\nplt.show()","961ecdce":"# Showing two different grouping variables using \"hue\" amd \"style\" parameter\nplt.figure(figsize=(10,10))\nplt.gcf().text(.5, .9, \"Scatter Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.scatterplot(x=insurance.bmi , y=insurance.charges , hue=insurance.smoker,style=insurance.sex)\nplt.show()","8a6fee83":"stdperf.head()","57f7e857":"plt.figure(figsize=(9,9))\nsns.scatterplot(x= stdperf['reading score'] , y= stdperf['writing score'] ,\n                hue=stdperf['test preparation course'],size = stdperf['math score'] , sizes = (10,200))\nplt.show()","b32afec7":"pokemon.head()","593c8ff9":"# Varying the size of the points for a quantitative variable using \"size\" parameter\nplt.figure(figsize=(9,9))\nsns.scatterplot(x= pokemon['Speed'] , y= pokemon['Attack'] ,hue= pokemon['Legendary'] , \n                size = pokemon['Sp. Atk'] , sizes = (20,200))\nplt.show()","323c79ff":"sns.set_style(\"white\") ","0de72991":"employment.head()","b9fc3d26":"# Drawing scatter plot using relplot\nplt.figure(figsize=(14,16))\nsns.relplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Gender\" ,data=employment , height=7 , aspect=2)\nplt.show()","8d6be1fb":"# Drawing scatter plot using relplot\nplt.figure(figsize=(14,16))\nsns.relplot(x=\"bmi\" , y=\"charges\" , hue=\"smoker\" ,data=insurance , height=8 , aspect=1)\nplt.show()","77363930":"# Use \"Pallete\" to specify the colors to be used for different levels of the hue\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':12,'axes.labelsize':12  , \"axes.grid\":False})\nsns.relplot(x=\"bmi\" , y=\"charges\" , hue=\"smoker\" ,data=insurance , height=8 , aspect=1 , \n            palette=[\"#FF3333\" ,\"#00CC00\"])\nplt.show()","9ac6c134":"fish.head()","7fbe353f":"plt.figure(figsize=(14,16))\nsns.relplot(x=\"Width\" , y=\"Height\" , hue=\"Species\" ,data=fish , height=8 , aspect=1)\nplt.gcf().text(.5, .99, \"Rel Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nplt.show()","160af82b":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(10,10))\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':10,'axes.labelsize':10  , \"axes.grid\":False})\nsns.relplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Gender\" , col=\"Age\",kind='line', height=5, \n            aspect=.5 ,data=employment)\nplt.show()","9d37372a":"# Facet along the columns to show a categorical variable using \"col\" parameter\nsns.set(rc={'xtick.labelsize':16,'ytick.labelsize':16,'axes.labelsize':16  , \"axes.grid\":False})\nsns.relplot(x=\"Period\" , y=\"Unemployed\" , hue=\"Gender\" , col=\"Age\",kind='line', height=6, \n            aspect=1 ,data=employment, col_wrap = 4 , linewidth =2)\nplt.show()","e37ae6b9":"insurance.head()","8ba75c84":"# Facet along the columns and rows to show a categorical variable using \"col\" and \"row\" parameter\nsns.set(rc={'xtick.labelsize':12,'ytick.labelsize':12,'axes.labelsize':12  , \"axes.grid\":False})\nsns.relplot(x=\"bmi\", y=\"charges\", hue=\"sex\",\n                col=\"sex\", row=\"region\", data=insurance)","afde67ae":"# Facet along the columns and rows to show a categorical variable using \"col\" and \"row\" parameter\nsns.set(rc={'xtick.labelsize':14,'ytick.labelsize':14,'axes.labelsize':14  , \"axes.grid\":False})\nsns.relplot(x=\"bmi\", y=\"charges\", hue=\"sex\",height=7, aspect=.6,\n                col=\"region\", row=\"sex\", data=insurance)","96c3a6b6":"emp.tail()","ddfd7dd6":"# Limiting the number of columns using \"col_wrap\"\nsns.relplot(x=\"Period\", y=\"Unemployed\", hue=\"Gender\",col=\"Age\" , col_wrap=3,kind=\"line\",linewidth = 2,\n            height=5, aspect=1, estimator=None, data=employment)","b02e66c1":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","667947d8":"plt.figure(figsize=(20,7))\nsns.barplot(x=pokemon['Type 1'], y= pokemon['Attack'])\nplt.show()","a9bf4c5c":"plt.figure(figsize=(20,7))\nsns.barplot(x=pokemon['Type 1'], y= pokemon['Defense'])\nplt.show()","e1763cf5":"# Sorted Bar plot\nplt.figure(figsize=(20,7))\norder = pokemon.groupby(['Type 1']).mean().sort_values('Defense' , ascending = False).index.values\nsns.barplot(x=pokemon['Type 1'], y= pokemon['Defense'] , order=order)\nplt.show()","d2780743":"plt.figure(figsize=(20,7))\nsns.barplot(x=pokemon['Type 1'], y= pokemon['Speed'])\nplt.show()","a3179bff":"# Horizontal Bar plot\nplt.figure(figsize=(8,10))\nsns.barplot(x=pokemon['Speed'], y= pokemon['Type 1'])\nplt.show()","c573f2c9":"plt.figure(figsize=(11,7))\nsns.barplot(x=\"Age\",y=\"Unemployed\", data=employment)\nplt.show()","d0bf02aa":"plt.figure(figsize=(20,7))\nsns.countplot(x=pokemon['Type 1'])\nplt.show()","b51954fe":"plt.figure(figsize=(20,7))\nsns.countplot(x=pokemon['Type 1'] , order = pokemon['Type 1'].value_counts().index)\nplt.show()","627b0aaa":"#Changing the background of bar plot\nplt.figure(figsize=(20,7))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':14,'ytick.labelsize':14})\nsns.countplot(x=pokemon['Type 1'] , order = pokemon['Type 1'].value_counts().index)\nplt.show()","fd38ff7d":"plt.figure(figsize=(20,7))\nsns.set(rc={\"axes.facecolor\":\"#283747\", \"axes.grid\":False,'xtick.labelsize':14,'ytick.labelsize':14})\nplt.gcf().text(.5, .93, \"Bar Plot\", fontsize = 60, color='Black' ,ha='center', va='center')\nsns.countplot(x=pokemon['Type 1'] , order = pokemon['Type 1'].value_counts().index , palette=\"spring\")\nplt.show()","97c83409":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","a0ba596c":"plt.figure(figsize=(20,7))\nsns.countplot(x=pokemon['Type 2'])\nplt.show()","b9549eac":"exercise.head()","79eb930d":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(8,6))\nsns.barplot(x=exercise.kind , y=exercise.pulse ,hue=exercise.diet)\nplt.show()","63c2dd6e":"helpdesk.head()","23b443eb":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(10,6))\nsns.barplot(x=helpdesk.TicketType , y=helpdesk.daysOpen , hue=helpdesk.FiledAgainst)\nsns.despine()\nplt.show()","aa908d91":"# Use Count Plot to visualize data\nsns.catplot(y = \"Type 1\", kind = \"count\",data = pokemon)\nplt.show()","6f031ee5":"#Sorted Count Plot\nsns.catplot(y = \"Type 1\", kind = \"count\",data = pokemon , order=pokemon['Type 1'].value_counts().index)\nplt.show()","cc5f4b7f":"# Use Voilin Plot to visualize data\nplt.figure(figsize=(7,7))\nsns.catplot(x=\"species\" , y = \"petal_width\" ,kind=\"violin\" ,data=iris)\nplt.show()","92baa9b9":"plt.figure(figsize=(11,9))\nsns.catplot(x = \"petal_width\" , y=\"species\" ,kind=\"violin\" ,data=iris ,\n            height=5, aspect=2)\nplt.show()","ce5e7306":"exercise.head()","ca986f5f":"# Facet along the columns to show a categorical variable using \"col\" parameter\nsns.catplot(x='kind' , y='pulse' , data=exercise , col=\"diet\")","602fe4ee":"helpdesk.head()","f4766d9e":"\"\"\" Facet along the columns to show a categorical variable using \"col\" parameter and \nLimiting the number of columns using \"col_wrap\" \"\"\"\n\nplt.figure(figsize=(20,10))\nsns.catplot(\"Priority\", col=\"FiledAgainst\",col_wrap=2,\n                data=helpdesk,kind=\"count\",height=5, aspect=1)\nplt.show()","9633f4df":"employment.head()","ce5e245a":"# Facet along the columns to show a categorical variable using \"col\" parameter\nsns.set(rc={'xtick.labelsize':15,'ytick.labelsize':15,'axes.labelsize':15 , \"axes.facecolor\":\"#f2eee3\" , \"axes.grid\":False})\nsns.catplot(x=\"Gender\", y=\"Unemployed\", col=\"Age\",data=employment,kind=\"bar\",height=6 , aspect=.5 ,  palette=\"bright\")\nplt.show()","fe299f33":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","a5a5e58d":"num = np.random.normal(1,10,1000)\nsns.distplot(num)\nplt.show()","ff4c6032":"sns.distplot(num,kde=True) # Histogram with a kernel density estimate (Density Curve)\nplt.show()","8cbdf584":"sns.distplot(num,kde=False) # Histogram without a kernel density estimate (Density Curve)\nplt.show()","750574fd":"sns.distplot(num,kde=False,rug=True) # Histogram with Rugplot\nplt.show()","113fefe4":"sns.distplot(num,kde=True,rug=True,hist=False) # Histogram with Rugplot & KDE\nplt.show()","f673cdad":"#Housing Dataset\nhousing.head()","4f8e7472":"housing.hist(bins=40 , figsize=(20,20)) #Pandas Hist function\nplt.show()","669ef7c1":"plt.figure(figsize=(11,7))\nsns.distplot( housing[\"median_income\"])\nplt.show()","46282445":"plt.figure(figsize=(11,7))\nsns.distplot( housing[\"median_income\"] , bins=20)\nplt.show()","640e4a48":"plt.figure(figsize=(11,7))\nsns.distplot( housing[\"median_income\"] ,bins=20 , hist_kws=dict(edgecolor = '#9dab86' ,linewidth=2))\nplt.show()","e91d3021":"#Changing the color of all the plot elements using \"color\" parameter\nplt.figure(figsize=(11,7))\nsns.distplot( housing[\"median_income\"] ,bins=20 , hist_kws=dict(edgecolor = '#9dab86' ,linewidth=2) , color='green')\nplt.show()","2d04e19b":"sns.set(style=\"white\", color_codes=True)","d0cbebeb":"# Displaying multiple distplots using subplot function. \nfig1 , axes = plt.subplots(nrows=3,ncols=3 , figsize = (20,20))\nsns.distplot( housing[\"longitude\"] , ax=axes[0, 0])\nsns.distplot( housing[\"latitude\"] ,  ax=axes[0, 1])\nsns.distplot( housing[\"housing_median_age\"] , ax=axes[0, 2])\nsns.distplot( housing[\"total_rooms\"], ax=axes[1, 0] )\nsns.distplot( housing[\"population\"] , ax=axes[1, 1] )\nsns.distplot( housing[\"households\"] , ax=axes[1, 2] )\nsns.distplot( housing[\"median_income\"] , ax=axes[2, 0])\nsns.distplot( housing[\"median_house_value\"], ax=axes[2, 1])\nsns.distplot( housing[\"median_house_value\"], ax=axes[2, 2])\nplt.show()","5f125eff":"# Displaying multiple distplots using subplot function. \nfig1 , axes = plt.subplots(nrows=3,ncols=3 , figsize = (20,20))\nsns.distplot( housing[\"longitude\"] , color=\"#00bcd4\", ax=axes[0, 0] , kde=False , bins=20)\nsns.distplot( housing[\"latitude\"] , color=\"#937d14\", ax=axes[0, 1] , kde=False,bins=20)\nsns.distplot( housing[\"housing_median_age\"] , color=\"#006600\", ax=axes[0, 2],kde=False,bins=20)\nsns.distplot( housing[\"total_rooms\"] , color=\"#ff1e56\", ax=axes[1, 0] , kde=False,bins=20)\nsns.distplot( housing[\"population\"] , color=\"#216353\", ax=axes[1, 1] , kde=False,bins=20)\nsns.distplot( housing[\"households\"] , color=\"#FF8F00\", ax=axes[1, 2] , kde=False,bins=20)\nsns.distplot( housing[\"median_income\"] , color=\"#33FF00\", ax=axes[2, 0] , kde=False,bins=20)\nsns.distplot( housing[\"median_house_value\"] , color=\"#FF3300\", ax=axes[2, 1], kde=False,bins=20)\nsns.distplot( housing[\"median_house_value\"] , color=\"#CCCC00\", ax=axes[2, 2] , kde=False,bins=20)\nplt.show()","0c29e064":"sns.set_style(\"darkgrid\")\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (14,14))\n\nx = np.random.normal(1,10,1000)\n\n#Simple KDE Plot\naxes[0,0].set_title(\"Simple KDE Plot\")\nsns.kdeplot(x,ax=axes[0,0])\n\n\n# Shade under the density curve using the \"shade\" parameter\naxes[0,1].set_title(\"KDE Plot (Shaded Area Under the Curve)\")\nsns.kdeplot(x,shade=True,ax=axes[0,1])\n\n\n# Shade under the density curve using the \"shade\" parameter and use a different color.\naxes[1,0].set_title(\"KDE Plot (Different Color)\")\nsns.kdeplot(x,ax=axes[1,0],color = 'r',shade=True,cut=0)\n\n#Plotting the density on the vertical axis\naxes[1,1].set_title(\"KDE Plot (Density on Vertical Axis)\")\nsns.kdeplot(x,vertical=True)\n\nplt.show()","33db6dd5":"plt.figure(figsize=(6,8))\nx = np.linspace(0, 10, 100) \ny = np.sin(x)\nsns.kdeplot(x,y,shade=True,cmap=\"Reds\", shade_lowest=False)","522d8283":"insurance.head()","7c395062":"plt.figure(figsize=(6,8))\nsns.kdeplot(insurance.bmi,insurance.charges,shade=True,cmap=\"Reds\", shade_lowest=False)\nplt.show()","d81acb11":"iris = sns.load_dataset(\"iris\")\nplt.figure(figsize=(8,6))\nsns.kdeplot(iris.sepal_width, iris.sepal_length,cmap=\"Reds\", shade=True, shade_lowest=False)\nplt.show()","92faf91d":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","f72aa46c":"insurance.head()","ef3ce6d7":"#Simple Swarm plot\nplt.figure(figsize=(7,7))\nsns.swarmplot(x=insurance.smoker, y=insurance.charges)\nplt.show()","4451cc0f":"# Draw horizontal swarm plot\nplt.figure(figsize=(7,7))\nsns.swarmplot(x=insurance.charges , y=insurance.smoker)\nplt.show()","99b80040":"plt.figure(figsize=(7,7))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" ,data=iris , size=6)\nplt.show()","d39d1cd0":"# Displaying multiple swarmplots using subplot function. \nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , size=8)\nsns.swarmplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris , size=8)\nsns.swarmplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris, size=8)\nsns.swarmplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris , size=8)\nplt.show()","6917d547":"exercise.head()","b3e4519d":"plt.figure(figsize=(7,7))\nsns.swarmplot(x= \"kind\",  y = \"pulse\", data = exercise)","38155792":"# Changing size of data points using \"size\"parameter\nplt.figure(figsize=(7,7))\nsns.swarmplot(x= \"kind\",  y = \"pulse\", size = 9, data = exercise)","7d11f5bb":"#Changing edge color , size and linewidth of data points\nplt.figure(figsize=(7,7))\nsns.swarmplot(x= \"kind\",  y = \"pulse\", size = 9 , linewidth= 2 , edgecolor=\"black\" , data = exercise)","0e78c7af":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(7,7))\nsns.swarmplot(x= \"kind\",  y = \"pulse\", hue=\"diet\", size = 8 , data = exercise)","d1e37099":"employment.head()","96bb3eb6":"plt.figure(figsize=(11,8))\nsns.swarmplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed)\nplt.show()","22ab6439":"# Facet along the columns to show a categorical variable using \"col\" parameter\nsns.set(rc={'xtick.labelsize':10,'ytick.labelsize':10,'axes.labelsize':14})\nsns.set_style(\"white\")\nsns.catplot(x=\"Age\" , y = \"Unemployed\" , col= \"Gender\" , data=employment, kind=\"swarm\" , height=8, aspect=1)\nplt.show()","f29508e3":"pokemon.head()","9f86ee49":"pokemon.columns","b6100e47":"pokemon1 = pokemon[[ 'HP', 'Attack', 'Defense', 'Sp. Atk','Sp. Def', 'Speed']]\npokemon1.head()","c46a917e":"plt.figure(figsize=(14,12))\nsns.swarmplot(data=pokemon1,size=6)\nplt.show()","41291b6c":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","a3337be5":"# Simple Violin Plot\nplt.figure(figsize=(7,7))\nsns.violinplot(x=\"species\" , y = \"petal_width\" ,data=iris)\nplt.show()","014fd7d3":"# Drawing the quartiles as horizontal lines instead of a mini-box using (inner=\"quartile\")\nplt.figure(figsize=(7,7))\nsns.violinplot(x=\"species\" , y = \"petal_width\" ,data=iris , inner=\"quartile\")\nplt.show()","b3208977":"# Remove interior section of the Violin plot\nplt.figure(figsize=(7,7))\nsns.violinplot(x=\"species\" , y = \"petal_width\" ,data=iris , inner=None)\nplt.show()","2b2b3023":"# horizontal violin plot\nplt.figure(figsize=(9,7))\nsns.violinplot(y=\"species\" , x = \"petal_width\" ,data=iris , inner=None)\nplt.show()","6771a8fc":"# Muted palette\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"muted\")\nplt.show()","d37975eb":"#Scale the density relative to the counts across all bins\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"Set1\" , scale=\"count\")\nplt.show()","731609db":"# Adjust the bandwidth of the KDE filtering parameter using \"bw\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"Set1\" , scale=\"count\" , bw=5)\nplt.show()","715c89c9":"# Adjust the bandwidth of the KDE filtering parameter using \"bw\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"Set1\" , scale=\"count\" , bw=.2)\nplt.show()","46c462eb":"# Limit the violin range within the range of the observed data using \"cut =0\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"Set1\" , scale=\"count\" , cut=0)\nplt.show()","5e103e6d":"#Show groups with different colors using \"hue\" and \"palette\"\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , hue= employment.Gender , palette=\"Set2\")\nplt.show()","04384f51":"# Overlap the violinplots for different hue levels along the categorical axis using \"dodge=False\"\nplt.figure(figsize=(18,9))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , hue= employment.Gender , palette=\"Set2\" , dodge=False)\nplt.show()","188ea9cd":"# Drawing split violins to compare across the hue variable using -> (split=True)\nplt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , hue= employment.Gender , palette=\"Set2\" , split=True)\nplt.show()","bd885342":"plt.figure(figsize=(16,7))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , hue= employment.Gender , \n               palette=\"Set2\" , split=True , inner=\"quartile\")\nplt.show()","0a5cf18f":"#Showing each observation with a stick inside the violin using -> (inner=\"stick\")\nplt.figure(figsize=(16,11))\nsns.violinplot(x=employment.Age , y = employment.Unemployed , hue= employment.Gender , \n               palette=\"Set2\" , split=True , inner=\"stick\")\nplt.show()","d59fbb73":"# Displaying multiple violin plots using subplot function. \nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.violinplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , inner=None)\nsns.violinplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris , inner=None)\nsns.violinplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris, inner=None)\nsns.violinplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris, inner=None )\nplt.show()","bcd13197":"# Displaying swarmplot on top of violin plot\nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,20))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , size=6 , color=\"white\")\nsns.violinplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , inner=None)\nsns.swarmplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris  , size=6 , color=\"white\")\nsns.violinplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris , inner=None)\nsns.swarmplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris , size=6 , color=\"white\")\nsns.violinplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris, inner=None)\nsns.swarmplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris , size=6 , color=\"white\")\nsns.violinplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris, inner=None )\nplt.show()","ba89bf82":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"Age\" , y = \"Unemployed\", col=\"Gender\", kind=\"violin\",palette=\"Set2\" , height=8, aspect=1 , \n            scale = \"count\",data=employment)\nplt.show()","a71c497b":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"parental level of education\" , y = \"math score\", hue= \"test preparation course\",\n            col=\"lunch\", kind=\"violin\",palette=\"Set3\" , height=8, aspect=1 ,data=stdperf , split = True , cut =0)\nplt.show()","5055853c":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","a353e147":"plt.figure(figsize=(11,8))\nsns.stripplot(x=employment.Unemployed)\nplt.show()","0eb95c93":"plt.figure(figsize=(16,8))\nsns.stripplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed)\nplt.show()","1cb0fd5e":"\"\"\" \"Jitter\" parameter signifies the amount of jitter to apply. \n   This can be extremely useful when we have large clusters of data points\"\"\"\n\nplt.figure(figsize=(16,5))\nsns.stripplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed , jitter=.3)\nplt.show()","4f1758fb":"# Flip x and y inputs to make a horizontal strip plot\nplt.figure(figsize=(11,8))\nsns.stripplot(y=employment.Age ,palette=\"Set1\", x = employment.Unemployed , jitter=True)\nplt.show()","2ed0194e":"plt.figure(figsize=(16,8))\nsns.stripplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed , linewidth=1)\nplt.show()","43ce413d":"# Adjust the linewidth of the edges of the circles using \"linewidth\" parameter\n# Adjust the size of the circles using the \"size\" parameter\nplt.figure(figsize=(16,10))\nsns.stripplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed , linewidth=2, size=8 ,jitter=.3)\nplt.show()","06c3f3d6":"# Using set2 pallete\nplt.figure(figsize=(16,10))\nsns.stripplot(x=employment.Age ,palette=\"Set2\", y = employment.Unemployed , hue=employment.Gender,jitter=True)\nplt.show()","c354d5e9":"# Separate the strips for different hue levels along the categorical axis using \"dodge=True\"\nplt.figure(figsize=(16,10))\nsns.stripplot(x=employment.Age ,palette=\"Set2\", y = employment.Unemployed , hue=employment.Gender,jitter=.2, dodge=True)\nplt.show()","f4f85742":"plt.figure(figsize=(16,10))\nsns.stripplot(x=employment.Age ,palette=\"Set2\", y = employment.Unemployed , \n              hue=employment.Gender, marker = \"o\" , size = 30 , alpha = .15)\nplt.show()","827bb4d7":"# Drawing stripplot on top of a box plot\nplt.figure(figsize=(11,8))\nsns.stripplot(x=employment.Age, y = employment.Unemployed , jitter=True , color=\"black\" , size=4)\nsns.boxplot(x=employment.Age ,palette=\"Set1\", y = employment.Unemployed , color='black')\nplt.show()","fae3fbc5":"plt.figure(figsize=(10,9))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=exercise ,x = exercise.kind ,y = exercise.pulse ,hue=exercise.diet,dodge=True)\nsns.stripplot(**params , size=9,jitter=0.35,palette=['#FF8F00','#558B2F'],edgecolor='black',linewidth=1)\nsns.boxplot(**params ,palette=['#909497','#D0D3D4'],linewidth=4)\nplt.show()","64790d57":"plt.figure(figsize=(16,11))\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=employment ,x = employment.Age ,y = employment.Unemployed ,hue=employment.Gender,dodge=True)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black',linewidth=1)\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()","25a80e6c":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","ae7e3e7c":"# Drawing stripplot on top of a violin plot\nplt.figure(figsize=(14,10))\nsns.stripplot(x=employment.Age, y = employment.Unemployed , jitter=True , color=\"black\" , size=4)\nsns.violinplot(x=employment.Age , y = employment.Unemployed , palette=\"Set1\" , scale=\"count\" , inner=None)\nplt.show()","7a4144e3":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"Age\" , y = \"Unemployed\", col=\"Gender\", kind=\"strip\",palette=\"Set1\" , height=8, aspect=1.2 , \n            data=employment)\nplt.show()","0414d75d":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"parental level of education\" , y = \"math score\", hue= \"test preparation course\",\n            col=\"lunch\", kind=\"strip\",palette=\"Set2\" , height=8, aspect=1 ,data=stdperf , split = True)\nplt.show()","f0c79c68":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"white\")","c254d198":"insurance.head()","11127089":"# Simple boxplot\nplt.figure(figsize=(8,6))\nsns.boxplot(insurance.bmi)","23c04b3c":"# Vertical boxplot\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(8,6))\nsns.boxplot(x= insurance.smoker , y= insurance.charges )","b79ba5a6":"#Explicit ordering using \"order\" parameter\nplt.figure(figsize=(8,6))\nsns.boxplot(x= insurance.smoker , y= insurance.charges , order = ['no' , 'yes'])","6698a16f":"helpdesk.head(5)","db8bf009":"plt.figure(figsize=(7,6))\nsns.boxplot(helpdesk.daysOpen )\nplt.show()","d2d300ee":"plt.figure(figsize=(8,6))\nsns.boxplot(x= helpdesk.FiledAgainst , y= helpdesk.daysOpen )","5ddfa263":"plt.figure(figsize=(8,6))\nsns.boxplot(x= fish.Species , y= fish.Weight)","0b49edaf":"stdperf = pd.read_csv(\"..\/input\/mathplotlib-tutorial\/studentp.csv\")\nstdperf.head(10)","e56e1781":"# Adjust width of boxes\nplt.subplots(figsize = (14,24))\nplt.subplot(3,1,1)\n\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] ,  width=.7 )\n\nplt.subplot(3,1,2)\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['reading score'] ,  width=.5)\n\nplt.subplot(3,1,3)\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['writing score'] ,  width=.25)\n\nplt.show()","3050ee49":"plt.figure(figsize = (6,7))\nsns.boxplot(x= exercise.kind , y= exercise.pulse)\nplt.show()","f897d211":"# Show groups with different colors using \"hue\"\nplt.figure(figsize = (6,7))\nsns.boxplot(x= exercise.kind , y= exercise.pulse , hue=exercise.diet)\nplt.show()","889ff505":"plt.figure(figsize = (14,8))\nplt.text(1.5,105, \"Box Plot\", fontsize = 50, color='Black')\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] ,  \n            width=.7 , hue=stdperf['test preparation course'])\nplt.show()","a514e008":"sns.set_style(\"white\")","8fa34489":"plt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , palette= 'rainbow')\nplt.show()","c6950056":"plt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} )\nplt.show()","d3a70217":"# Remove the top and right axis spines\nplt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} )\nsns.despine()\n# More about sns.despine() here - https:\/\/seaborn.pydata.org\/tutorial\/aesthetics.html\nplt.show()","5cf98aef":"plt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} )\nsns.despine(left=True)\nplt.show()","adc80a2b":"# Changing Linewidth\nplt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} ,linewidth = 3)\nsns.despine(left=True)\nplt.show()","98602f00":"plt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} ,linewidth = 2)\nsns.despine(left=True)\nplt.xticks(rotation=45)\nplt.show()","c96fa670":"# Add a notch to the box\nplt.figure(figsize = (14,6))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} ,linewidth = 2 , notch=True )\nsns.despine(left=True)\nplt.xticks(rotation=45)\nplt.show()","e23b5e9f":"# Change the size of outlier markers\nplt.figure(figsize = (16,8))\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} ,linewidth = 2  , fliersize= 15)\nsns.despine(left=True)\nplt.xticks(rotation=45)\nplt.show()","aa403fa2":"# Change the size of outlier markers\nsns.set(rc={\"axes.facecolor\":\"#b0deff\",\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nsns.boxplot(x= stdperf['parental level of education'] , y= stdperf['math score'] , \n            width=.7 , hue=stdperf['test preparation course'] , \n            palette= {\"none\":'#FFB74D' , \"completed\":'#9CCC65'} ,linewidth = 2  , fliersize= 15)\nsns.despine(left=True)\nplt.xticks(rotation=45)\nplt.show()","e48be4d9":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","4277c8f4":"plt.figure(figsize=(14,11))\nsns.set(rc={\"axes.grid\":False,\n            'xtick.labelsize':15,'ytick.labelsize':15,\n            'axes.labelsize':20,'figure.figsize':(20.0, 9.0)})\nparams = dict(data=employment ,x = employment.Age ,y = employment.Unemployed)\nsns.stripplot(**params , size=8,jitter=0.35,palette=['#33FF66','#FF6600'],edgecolor='black',linewidth=1 , alpha = 1)\nsns.boxplot(**params ,palette=['#BDBDBD','#E0E0E0'],linewidth=6)\nplt.show()","e500cb1a":"mpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"darkgrid\")","6c6ab2ee":"exercise.head()","b8c24373":"plt.figure(figsize=(18,16))\nsns.catplot(x=\"kind\", y=\"pulse\",col=\"diet\",data=exercise, kind=\"box\");\nplt.show()","4189e4a1":"# Displaying multiple violin plots using subplot function. \nfig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,24))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , color=\".10\" , size=8,)\nsns.boxplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris )\nsns.swarmplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris  ,  color=\".10\", size=8)\nsns.boxplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris)\nsns.swarmplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris ,  color=\".10\", size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris)\nsns.swarmplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris ,  color=\".10\", size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris)\nplt.show()","db4a606a":"fig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,24))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris, size=8,)\nsns.boxplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris ,boxprops={'facecolor':'None'})\nsns.swarmplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris  , size=8)\nsns.boxplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris ,boxprops={'facecolor':'None'})\nsns.swarmplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris ,  size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris ,boxprops={'facecolor':'None'})\nsns.swarmplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris, size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris ,boxprops={'facecolor':'None'})\nplt.show()","08c93ea3":"fig1 , axes = plt.subplots(nrows=2,ncols=2 , figsize = (20,24))\nsns.swarmplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris, size=8)\nsns.boxplot(x=\"species\" , y = \"petal_width\" , ax = axes[0,0] ,data=iris , showfliers=False,whiskerprops={'linewidth':0},showcaps=False,boxprops={'facecolor':'None' , 'linewidth' : 3 })\nsns.swarmplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris, size=8)\nsns.boxplot(x=\"species\" , y = \"petal_length\" ,ax = axes[0,1] , data=iris , showfliers=False,whiskerprops={'linewidth':0},showcaps=False,boxprops={'facecolor':'None' , 'linewidth' : 3})\nsns.swarmplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris, size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_width\" , ax = axes[1,0] , data=iris , showfliers=False,whiskerprops={'linewidth':0},showcaps=False,boxprops={'facecolor':'None' , 'linewidth' : 3})\nsns.swarmplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris , size=8)\nsns.boxplot(x=\"species\" , y = \"sepal_length\" , ax = axes[1,1] , data=iris , showfliers=False,whiskerprops={'linewidth':0},showcaps=False,boxprops={'facecolor':'None' , 'linewidth' : 3})\nplt.show()","9e9b030a":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set_style(\"darkgrid\")","a1d4daf5":"# Simple Boxen Plot\nplt.figure(figsize=(5,7))\nsns.boxenplot(y=employment.Unemployed)\nplt.show()","922838c7":"plt.figure(figsize=(7,9))\nsns.boxenplot(x=employment.Gender , y = employment.Unemployed ,palette=\"Set1\")\nplt.show()","ebd88108":"# Drawing a vertical boxenplot grouped by a categorical variable\nplt.figure(figsize=(10,9))\nsns.boxenplot(x=employment.Age , y = employment.Unemployed ,palette=\"Set1\")\nplt.show()","dec84eda":"# Using spring palette\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=employment.Age , y = employment.Unemployed,palette=\"spring\")\nplt.show()","fc564447":"sns.set(rc={\"axes.facecolor\":\"#616161\" , \"axes.grid\" : False})\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=employment.Age , y = employment.Unemployed,palette=\"Set1\")\nplt.show()","c535c5f1":"sns.set(rc={\"axes.facecolor\":\"#a1c45a\" , \"axes.grid\" : False})\nplt.figure(figsize=(11,9))\nplt.gcf().text(.51, .84, \"Box Plot\", fontsize = 40, color='Black' ,ha='center', va='center')\nsns.boxenplot(x=employment.Age , y = employment.Unemployed,palette=\"Set1\")\nplt.show()","fe82ab54":"# Horizontal Boxen plot\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(10,9))\nsns.boxenplot(x = employment.Unemployed ,y=employment.Age ,palette=\"Set1\")\nplt.show()","be50cfc0":"# Show groups with different colors using \"hue\" (Nested grouping by two categorical variables)\nplt.figure(figsize=(11,9))\nsns.boxenplot(x=employment.Age , y = employment.Unemployed, hue=employment.Gender, palette=\"Set2\")\nplt.show()","ae62f6e6":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"Age\" , y = \"Unemployed\", col=\"Gender\", kind=\"boxen\",palette=\"Set2\" , height=8, aspect=1 ,data=employment)\nplt.show()","12fee6a3":"stdperf.head()","42f3418c":"# Facet along the columns to show a categorical variable using \"col\" parameter\nplt.figure(figsize=(11,9))\nsns.catplot(x=\"parental level of education\" , y = \"math score\", hue= \"test preparation course\",\n            col=\"lunch\", kind=\"boxen\",palette=\"Set2\" , height=8, aspect=1 ,data=stdperf)\nplt.show()","fbb84eb3":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","d9120d74":"fish.head()","a32d811e":"fish1 = fish[fish['Species'].isin(['Bream', 'Perch', 'Pike'])]\nfish1.head()","a9637d25":"# Draw scatterplots for joint relationships and histograms for univariate distributions\nplt.figure(figsize=(11,9))\nsns.pairplot(fish1,hue = 'Species')\nplt.show()","25f038ea":"# Show groups with different colors using \"hue\"\nplt.figure(figsize=(11,9))\nsns.pairplot(fish1,hue = 'Species')\nplt.show()","b053eccf":"# Changing palettes\nsns.pairplot(fish1,hue = 'Species',palette=\"husl\",size=2)\nplt.show()","d7e97513":"# Plot a subset of variables\nsns.pairplot(fish1,hue = 'Species',vars=[\"Length1\", \"Weight\" , \"Height\" , \"Width\"] , height=3, aspect=1)\nplt.show()","87cd528c":"# Use different markers for each level of the hue variable\nsns.pairplot(fish1,hue = 'Species',vars=[\"Length1\", \"Weight\" , \"Height\" , \"Width\"] , \n             markers= ['o' , 'D' , '<'] , height=3, aspect=1)\nplt.show()","8ce44ade":"sns.pairplot(fish1,hue = 'Species',vars=[\"Weight\" , \"Height\" , \"Width\"] , \n             markers= ['o' , 'D' , '<'] , height=5, aspect=1)\nplt.show()","ba85f133":"sns.pairplot(fish1,hue = 'Species',x_vars=[\"Weight\" , \"Height\" , \"Width\"] , y_vars=[\"Length1\" , \"Length2\" , \"Length3\"],\n             markers= ['o' , 'D' , '<'] , height=5, aspect=1)\nplt.show()","e04ca6a7":"# Fit linear regression models to the scatter plots\nsns.pairplot(fish1,hue = 'Species',vars=[\"Weight\" , \"Height\" , \"Width\"] , kind=\"reg\",\n              height=5, aspect=1)\nplt.show()","f4d5df83":"# Changing size of circles in scatter plots using -> plot_kws=dict(s=140)\nsns.pairplot(fish1,hue = 'Species',vars=[\"Weight\" , \"Height\" , \"Width\"] , plot_kws=dict(s=140, linewidth=1),\n             height=5, aspect=1)\nplt.show()","dff22877":"sns.pairplot(fish1,hue = 'Species',vars=[\"Weight\" , \"Height\" , \"Width\"] , plot_kws=dict(s=140, linewidth=1,alpha= .6),\n             height=5, aspect=1)\nplt.show()","7a763184":"sns.pairplot(fish1,hue = 'Species',x_vars=[\"Weight\" , \"Height\"] ,\n             y_vars=[\"Weight\" , \"Height\"] ,plot_kws=dict(s=140, linewidth=1,alpha= .6),\n             height=5, aspect=1)\nplt.show()","fca8bda0":"#scatterplot for each pairwise relationship\ng = sns.PairGrid(fish1)\ng = g.map(plt.scatter)\nplt.show()","258e9344":"# Histogram on the diagonal \ng = sns.PairGrid(fish1)\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\nplt.show()","07c4f3c2":"# Show groups with different colors using \"hue\"\ng = sns.PairGrid(fish1 , hue='Species')\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\ng = g.add_legend()\nplt.show()","684c8b5d":"g = sns.PairGrid(fish1 , hue='Species', palette=\"husl\")\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist)\ng = g.add_legend()\nplt.show()","757436bf":"# Changing histogram styling\ng = sns.PairGrid(fish1 , hue='Species')\ng = g.map_offdiag(plt.scatter)\ng = g.map_diag(plt.hist , histtype=\"step\", linewidth=2)\ng = g.add_legend()\nplt.show()","f75407e3":"# Plot a subset of variables\ng = sns.PairGrid(fish1 , hue='Species' ,vars=[\"Weight\" , \"Height\" , \"Width\"],height=5, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","71925f2d":"# Plot a subset of variables\ng = sns.PairGrid(fish1 , hue='Species' ,x_vars=[\"Weight\" , \"Height\"],y_vars=[\"Weight\" , \"Height\"],\n                 height=6, aspect=1)\ng = g.map_offdiag(plt.scatter , edgecolor=\"w\", s=130)\ng = g.map_diag(plt.hist , edgecolor ='w', linewidth=2)\ng = g.add_legend()\nplt.show()","909f6d2a":"g = sns.PairGrid(fish1 , hue='Species' ,x_vars=[\"Weight\" , \"Height\"],y_vars=[\"Weight\" , \"Height\"],\n                 height=6, aspect=1 , hue_kws={\"marker\": [\"o\", \"^\", \"v\"]})\ng = g.map(plt.scatter , edgecolor=\"w\", s=130)\ng = g.add_legend()\nplt.show()","02abe501":"# Using different plots on the upper and lower triangles\ng = sns.PairGrid(fish1 ,vars=[\"Length1\" , \"Height\" , \"Width\"],height=5, aspect=1)\ng = g.map_upper(sns.scatterplot , edgecolor=\"w\", s=130)\ng = g.map_lower(sns.kdeplot)\ng = g.map_diag(sns.kdeplot , lw= 2)\ng = g.add_legend()\nplt.show()","d790ba03":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","4460650c":"fish1.head()","b2592990":"# Plot the relationship between two variables\nplt.figure(figsize=(7,7))\nsns.regplot(x=fish1.Weight , y=fish1.Height)\nplt.show()","566660e9":"# Plot the relationship between two variables and use a different color\nplt.figure(figsize=(9,9))\nsns.regplot(x=fish1.Weight , y=fish1.Height , color='#FF6600')\nplt.show()","68ef66da":"plt.figure(figsize=(9,9))\nsns.regplot(x=fish1.Weight , y=fish1.Height , color='#FF6600' , marker='>')\nplt.show()","6906af56":"# Use 50% Confidnce interval\nplt.figure(figsize=(9,9))\nsns.regplot(x=fish1.Weight , y=fish1.Height , color='#FF6600' , ci=50 , truncate=False)\nplt.show()","cd552c0d":"#Fit the regression model using log(x)\nplt.figure(figsize=(9,9))\nsns.regplot(x=fish1.Weight , y=fish1.Height , color='#FF6600' , logx=True)\nplt.show()","634bdda0":"# Change the color and width of regression line -> line_kws={\"color\":\"#FF5722\",\"lw\":3}\nplt.figure(figsize=(9,9))\nsns.regplot(x=fish1.Weight , y=fish1.Height , logx=True , line_kws={\"color\":\"#FF5722\",\"alpha\":0.8,\"lw\":3})\nplt.show()","1004d5f7":"#Fit a regression model for a categorical variable\nsns.lmplot(x=\"bmi\" , y=\"charges\" , hue=\"smoker\" , data=insurance , height=8,aspect=1.2)\nplt.show()","3130eda4":"sns.lmplot(x=\"bmi\" , y=\"charges\" , hue=\"smoker\" , data=insurance , height=8,aspect=1.2 , \n           scatter_kws ={'s':90 , 'alpha' : .4} ,  palette=[\"#FF3333\" ,\"#00CC00\"])\nplt.show()","e75da805":"insurance.head()","a7ba2033":"# Plot the levels of the third variable across different columns\nsns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", col=\"sex\", data=insurance ,height=6,aspect=1 )","de7cc9c1":"\"\"\" Facet along the columns to show a categorical variable using \"col\" parameter and \nLimiting the number of columns using \"col_wrap\" \"\"\"\n\nsns.lmplot(x=\"bmi\", y=\"charges\", hue=\"smoker\", col=\"region\", data=insurance ,height=7,aspect=1,col_wrap = 2)","40370300":"# Facet along the columns and rows to show a categorical variables using \"col\" and \"row\" parameter\nsns.lmplot(x=\"bmi\", y=\"charges\", row=\"smoker\", col=\"region\", data=insurance ,height=4,aspect=1)","2debd3ad":"canada1 = canada.loc['2004': , ['Germany' , 'France' , 'Mexico' , 'Bangladesh' ,'Brazil','Israel' , 'Egypt' , 'Colombia' , 'Iraq','Jamaica']]\ncanada1.head()","e78ba6c7":"plt.figure(figsize=(16,9))\nax = sns.heatmap(canada1)\nplt.yticks(rotation=0)\nplt.show()","f5b476d0":"# Changing the limits of the colormap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000)\nplt.yticks(rotation=0)\nplt.show()","88a6bfd3":"# Plot a heatmap for data centered on 4000 with a diverging colormap\nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,center=4000)\nplt.yticks(rotation=0)\nplt.show()","517e8e8f":"# Changing cmap \nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\")\nplt.yticks(rotation=0)\nplt.show()","4bba16a7":"plt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"coolwarm\")\nplt.yticks(rotation=0)\nplt.show()","a33b1ba3":"# Add lines between each cell\nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,linewidths=.1)\nplt.yticks(rotation=0)\nplt.show()","6e9f2fa9":"# Annotate each cell with the numeric value using integer formatting\nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,annot=True, fmt=\"d\")\nplt.yticks(rotation=0)\nplt.show()","199eda13":"# Annotate each cell with the numeric value using decimal formatting\nplt.figure(figsize=(16,9))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\", annot=True ,fmt=\".2f\")\nplt.yticks(rotation=0)\nplt.show()","642ec13a":"plt.figure(figsize=(20,11))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\", linewidths=.5, annot=True ,annot_kws={'size':14} ,fmt=\".1f\")\nplt.yticks(rotation=0)\nplt.show()","4aee2e3e":"# Turn off the colorbar -> cbar=False\nplt.figure(figsize=(20,11))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\", linewidths=.5, \n                 annot=True ,annot_kws={'size':14} ,fmt=\".1f\" , cbar=False)\nplt.yticks(rotation=0)\nplt.show()","99e27f9a":"# Force the aspect ratio of the blocks to be equal using \"square\" parameter\nplt.figure(figsize=(20,11))\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\", linewidths=.5, \n                 annot=True ,annot_kws={'size':14} ,fmt=\".1f\" , cbar=False ,square = True)\nplt.yticks(rotation=0)\nplt.show()","48c66da8":"sns.set(rc={'xtick.labelsize':17,'ytick.labelsize':17,'axes.labelsize':20})","bb0a7b0f":"plt.figure(figsize=(20,12))\nplt.rcParams['figure.facecolor'] = \"#a1c45a\"\nplt.rcParams['axes.facecolor'] = \"#a1c45a\"\nplt.rcParams[ 'axes.labelsize'] = 20\nplt.rcParams['xtick.labelsize'] = 15\nplt.rcParams['ytick.labelsize'] = 15\n\nax = sns.heatmap(canada1,vmin=0, vmax=8000,cmap=\"YlGnBu\", linewidths=.5,annot=True ,annot_kws={'size':14} ,fmt=\".1f\")\nplt.yticks(rotation=0)\nplt.text(4,-.2, \"Heat Map\", fontsize = 50, color='Black')\nplt.show()","f68b304f":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\nplt.rcParams[ 'axes.labelsize'] = 10\nplt.rcParams['xtick.labelsize'] = 10\nplt.rcParams['ytick.labelsize'] = 10","a549c13f":"insurance.head()","32311cd6":"# Facet along the columns to show a categorical variables using \"col\" parameter (univariate plot on each facet)\ng = sns.FacetGrid(insurance, col=\"sex\")\ng = g.map(plt.hist, \"bmi\", edgecolor ='w', linewidth=2)","2b32e3ac":"# Facet along the columns and rows to show a categorical variables using \"col\" and \"row\" parameter\ng = sns.FacetGrid(insurance, col=\"sex\" , row = \"region\" , height=4, aspect=1)\ng = g.map(plt.hist, \"bmi\",edgecolor ='w', linewidth=1)","d0202577":"g = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , height=3, aspect=1)\ng = g.map(plt.hist, \"bmi\",edgecolor ='w', linewidth=1)","c746025d":"# Changing color of bars\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , height=3, aspect=1)\ng = g.map(plt.hist, \"bmi\" , color = '#F39C12',edgecolor ='w', linewidth=1)","ded2963f":"# Bivariate function on each facet\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , height=3, aspect=1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\")","676c47ac":"# Changing size of dots -> s = 80\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , height=3, aspect=1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\" , color = '#FF6600',edgecolor=\"w\", s=80)","f1b575e4":"# Show groups with different colors using \"hue\"\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , hue=\"smoker\" ,height=3, aspect=1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\" , edgecolor=\"w\", s=70)","f0d13ad9":"# Showing legend -> g.add_legend()\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , hue=\"smoker\" ,height=3, aspect=.9)\ng = g.map(plt.scatter, \"bmi\" , \"charges\",edgecolor=\"w\", s=70)\ng.add_legend()","63d8e015":"# Use a custom palette\npal1 = dict(yes=\"#ff7315\", no=\"#8cba51\")\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , hue=\"smoker\" ,height=3, aspect=1, palette=pal1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\",edgecolor=\"w\", s=70)\ng.add_legend()\nplt.show()","fbb39e06":"pal1 = dict(yes=\"#ff7315\", no=\"#8cba51\")\nkws = dict(s=80, linewidth=1, edgecolor=\"w\")\nkws1 =  dict(height=3, aspect=1,palette=pal1)\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , hue=\"smoker\" , **kws1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\",**kws)\ng.add_legend()\nplt.show()","93c21210":"# Use different markers for each level of the hue variable\npal1 = dict(yes=\"#ff7315\", no=\"#8cba51\")\nkws = dict(s=70, linewidth=1, edgecolor=\"w\")\nkws1 =  dict(height=3, aspect=1,palette=pal1 , hue_kws=dict(marker=[\"^\", \"v\"]))\ng = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" , hue=\"smoker\" , **kws1)\ng = g.map(plt.scatter, \"bmi\" , \"charges\",**kws)\ng.add_legend()\nplt.show()","f2cbcd4c":"g = sns.FacetGrid(insurance, col=\"region\" , row = \"sex\" ,height=3, aspect=1)\ng = g.map(plt.bar, \"smoker\" , \"charges\",edgecolor=\"w\" , color = '#8cba51')\ng.add_legend()","e126ca45":"pokemon.head()","47f88d6b":"# Limiting the number of columns using \"col_wrap\"\ng = sns.FacetGrid(pokemon, col=\"Type 2\" , col_wrap=3 , height=2.8, aspect=1)\ng = g.map(plt.scatter, \"Attack\" , \"Sp. Atk\",color = '#FF6600',edgecolor=\"w\", s=70)","7c9bba61":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline","314703cc":"insurance.head()","4ede7991":"# scatterplot with marginal histograms\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10)","fb254293":"# Regplot with marginal distplot\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"reg\")","2d254ab4":"sns.set(style=\"white\", color_codes=True)","a2b32f7a":"sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10)","a4bd855c":"# Resid Plot\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"resid\")","5fcd7163":"# \"ratio\" adjusts the relative size of the marginal plots\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10, ratio=2)","e4dcd002":"# Change the color of the joint plot\ng = sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , color = '#FF6600',edgecolor=\"w\", s=90 )","4ed7ea14":"plt.rcParams['figure.facecolor'] = \"#E5E7E9\"\nplt.rcParams['axes.facecolor'] = \"#E5E7E9\"\nplt.rcParams[ 'axes.labelsize'] = 20\nplt.rcParams['xtick.labelsize'] = 15\nplt.rcParams['ytick.labelsize'] = 15\ng = sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , color = '#FF6600',edgecolor=\"w\", s=90 )","8977bb1d":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline\nsns.set(style=\"white\", color_codes=True)","0c5e2ef3":"# Replace the scatterplot with a joint histogram using hexagonal bins\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"hex\")","30149973":"# Replace the scatterplot with a joint histogram using hexagonal bins\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"hex\" , color=\"#fb9224\")","9ce61126":"\"\"\" Replace the scatterplot & joint histogram with kde plot\n     in the margins and the interior into a shaded countour plot  \"\"\"\n\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , color=\"#FF6600\")","703f7fd4":"# Create Space between the joint and marginal axes\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , color=\"#FF6600\", space=2)","5d476b8a":"# Set Axis limits \nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , \n              color=\"#FF6600\", space=2, xlim=(0,50),ylim=(-3000,70000))","48c67cfc":"# Change formatting of marginal graphs\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , \n              color=\"#FF6600\" , marginal_kws={'lw':5})","522d0a80":"# Change formatting of marginal graphs\nsns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , \n              color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\"})","4ba453d2":"sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , \n              color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\" , 'bw' :.3})","178d82b6":"# Changing background of marginal graphs\ng = sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"kde\" , \n              color=\"#33CC00\" , marginal_kws={'lw':5 , 'color' : \"#FF3300\"})\ng.ax_marg_x.set_facecolor('#f8fab8')\ng.ax_marg_y.set_facecolor('#f8fab8')","c05e024c":"# Defining Axis Labels\n(sns.jointplot(x=\"bmi\", y=\"charges\", data=insurance , height = 10 , kind=\"hex\" , color=\"#a0c334\")\n     .set_axis_labels(\"$BMI$\", \"$CHARGES$\"))","5928d0e7":"sns.jointplot(\"bmi\", \"charges\", data=insurance,  s=70, edgecolor=\"w\", linewidth=1, height = 10 , color=\"#58b368\",\n              marginal_kws=dict(bins=15, rug=True))\nplt.show()","f2f0f10e":"#Add plots using default parameters\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 10)\ng = g.plot(sns.regplot, sns.distplot)","bb8fb7b3":"# Changing color of plots\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 10)\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\",s=50)\ng = g.plot_marginals(sns.distplot, color=\"#FF6600\")","89301fe2":"# Remove kernel density estimate from the marginal plots\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 10)\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\")\ng = g.plot_marginals(sns.distplot,kde= False, color=\"#FF6600\")","7b069b5a":"# kde plot in the margins and the interior into a shaded countour plot\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 8)\ng = g.plot_joint(sns.kdeplot)\ng = g.plot_marginals(sns.kdeplot, shade=True)","68645f6d":"# Remove the space between the joint and marginal axes\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 8 , space =0)\ng = g.plot_joint(sns.kdeplot)\ng = g.plot_marginals(sns.kdeplot, shade=True)","11a88383":"g = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 8)\ng = g.plot_joint(sns.kdeplot , cmap=\"OrRd_r\")\ng = g.plot_marginals(sns.kdeplot, shade=True , color = 'orange')","248f91aa":"# Set Axis limits \ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 10 , xlim=(10,50) , ylim=(-3000,60000))\ng = g.plot_joint(sns.kdeplot , cmap=\"OrRd_r\")\ng = g.plot_marginals(sns.kdeplot, shade=True , color = 'orange')","0d2cf2ae":"# Changing background of marginal graphs\ng = sns.JointGrid(x=\"bmi\", y=\"charges\", data=insurance, height = 10 , xlim=(10,50) , ylim=(-3000,60000) )\ng = g.plot_joint(sns.scatterplot, color=\"#FF6600\",s=50)\ng= g.plot_marginals(sns.distplot,kde=False , color = 'Blue')\ng.ax_marg_x.set_facecolor('#f8fab8')\ng.ax_marg_y.set_facecolor('#f8fab8')","128a035e":"# Boxen Plot","765972c8":"Cat Plot provides access to several axes-level functions (\"point\", \"bar\", \"strip\", \"swarm\",\"box\", \"violin\", \"count\" or \"boxen\") that show the relationship between a numerical and one or more categorical variables","22e0ac97":"## In this notebook I have plotted all 17 plots available in seaborn and subplots, grid plots etc...!!","1237661b":"# KDE PLOT","89d35105":"# Swarm Plot","da3e2292":"# Importing Libraries","47c836b7":"# Bar Plot","02c5c45f":"Look at the X-Asis. It is clealy not able to interpret the Index as Date. So the next step will be to convert the Index to Datetime.","c5c3a14b":"So we can see using Seabon we can save many lines of code.","e5f98429":"# Strip Plot","5c70356b":"# SCatter Plots","618ca8c5":"# Facet Grid\n\n##### Multi-plot grid for plotting. A FacetGrid can be drawn with up to three dimensions \u2212 row, col, and hue.","a9ffd38d":"# Violin Plot","e70163f0":"#### KDE Plot is used to estimate the probability density function of a continuous random variable.","1470af5b":"# Cat Plot","b47d532a":"Pokemon with Type-1 as water & Normal are most common.","4b3118b6":"As per the above Bar plot pokemon with Type-1 as $Dragon$ are best attackers","559c780f":"Relplot provides access to several different axes-level functions like line & scatter","6dc11cd8":"# Heat Map","82ddc920":"#### Dist plot is used to plot a univariate distribution of observations.","db0eae8e":"There will be horizontal grid lines in the background for \"darkgrid\" style. Also we will see a dark Background.","7ec1f1db":"# ***************END***********","40340d56":"Pokemons with Type-1 as Flying are the fastest","a0e01f09":"#### Regression plot is used to plot data and a linear regression model fit.","b3416613":"#### The box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.","e1808b21":"# Loading Datasets","ddbd3113":"#### Pair Grid is a Subplot grid for plotting pairwise relationships in a dataset. Different axes-level plotting functions can be used to draw bivariate plots in the upper and lower triangles, and the the marginal distribution of each variable can be shown on the diagonal.","56be4f97":"#### The Boxen Plot shows a large number of quantiles.By plotting more quantiles, it provides more information about the shape of the distribution, particularly in the tails.","9b174a97":"### $   Revert  $ $  to $  $ default $  $  styling  $","dc7bb631":"#### Strip plot is a scatter plot where one of the variables is categorical.","6f450132":"### Plot Styling","717a410e":"# Dist Plot","cd6edd51":"#### Bar Plot shows the relationship between a numerical variable and a categorical variable.","6a9bb6a2":"Pokemon with Type-2 as Steel have best defence","63ce1111":"# Box Plot","f10ad24a":"# Pair Plot","cd821e98":"# Joint Grid\n\n#### Grid for drawing a bivariate plot with marginal univariate plots.","c643a3fe":"#### Violinplots summarize numeric data over a set of categories.Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","e373c3ed":"# Line Charts","54211e7b":"# Joint Plot\n\n#### Joint plot is used to draw a plot of two variables with bivariate graph and univariate graphs in the margin.","bfe46170":"As per above Count plot Type-2 Flying pokemon are most common","21ed1f03":"A heat map is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.","89c8672e":"#### Swarm plot is a categorical scatterplot with non-overlapping points","3a442e54":"#### Pair Plot is used for plotting pairwise relationships in a dataset.","9d361816":"There will be no horizontal grid lines in the background for \"ticks\" style. We will only see ticks in $X$ & $Y$ axis","ac67559d":"## Upvote If u like\/Fork and make sure to check my other Notebooks also..!! Thanks..!!","b442e009":"There will be horizontal grid lines in the background for \"whitegrid\" style.","a18f54dc":"# Relplot","23605576":"# Pair Grid","7671dc3d":"# Regression Plot"}}