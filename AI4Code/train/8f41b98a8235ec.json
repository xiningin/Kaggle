{"cell_type":{"c94f1beb":"code","15692340":"code","5c3077f6":"code","3462a0f8":"code","abadc8cd":"code","0565ba62":"code","d3a76ade":"code","c1bb6a72":"code","a2b2763a":"code","cc0841f2":"code","69ec12a0":"code","a755ad14":"code","9fe6dd67":"code","4677c1fa":"code","c5aff481":"code","d4ad7769":"code","06fc77d0":"code","fe998752":"code","ad9420e7":"code","d900935c":"code","1bae03a7":"code","aeda5ae4":"code","45e09338":"code","7366bcc5":"code","6309ac14":"code","209da8fa":"code","36e68f42":"code","b9b7717c":"code","02f72461":"code","fa035ca0":"code","e1c245d8":"code","eedcc639":"code","230584da":"code","3d25cba0":"code","91fcd14d":"code","62bca960":"code","d69b22c4":"markdown","3f10e085":"markdown","2433f664":"markdown","4551d532":"markdown","678c7562":"markdown","c36c177a":"markdown"},"source":{"c94f1beb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15692340":"df = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv.zip')","5c3077f6":"df.info()","3462a0f8":"df.shape","abadc8cd":"df.isnull().any()","0565ba62":"sum(df.duplicated())","d3a76ade":"df.head(30)","c1bb6a72":"df.tail(30)","a2b2763a":"df.columns","cc0841f2":"for i,c in enumerate(df.columns):\n    i +=1\n    print(f'{i}-{c}')\n","69ec12a0":"samples = df.shape[0]\n\ntrain = int(samples * 0.9)\n\nval = samples - train\n\nprint(f'Number of samples:{samples}\\nNumber of Training Examples:{train}\\nNumber of Training Examples:{val}')","a755ad14":"X_train = df['comment_text'][:train]\n\ny_train = df[['toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']][:train].values","9fe6dd67":"print(X_train.shape, y_train.shape)","4677c1fa":"X_val = df['comment_text'][train:]\ny_val = df[['toxic', 'severe_toxic', 'obscene', 'threat',\n       'insult', 'identity_hate']][train:].values","c5aff481":"print(X_val.shape, y_val.shape)","d4ad7769":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","06fc77d0":"vocab_size = 20000\nembedding_dim = 16\nmax_length = 350\ntrunc_type='post'\npadding_type='post'\noov_tok = \"<UNK>\"","fe998752":"tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(X_train)\nword_index = tokenizer.word_index\ntrain_sequences = tokenizer.texts_to_sequences(X_train)\ntrain_padded = pad_sequences(train_sequences, maxlen=max_length,\npadding=padding_type,\ntruncating=trunc_type)\n\n\nval_sequences = tokenizer.texts_to_sequences(X_val)\nval_padded = pad_sequences(val_sequences, maxlen=max_length, padding=padding_type, \n                               truncating=trunc_type)","ad9420e7":"import numpy as np\n\ntrain_padded = np.array(train_padded)\nval_padded   = np.array(val_padded)","d900935c":"tf.random.set_seed(30)","1bae03a7":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),\n    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(6, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","aeda5ae4":"model.summary()","45e09338":"num_epochs = 10\nhistory = model.fit(train_padded, y_train, epochs=num_epochs, validation_data=(val_padded, y_val), verbose=1)","7366bcc5":"import matplotlib.pyplot as plt\n\n\ndef plot_graphs(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_'+string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string, 'val_'+string])\n    plt.show()","6309ac14":"plot_graphs(history, \"accuracy\")\nplot_graphs(history, \"loss\")","209da8fa":"df1 = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv.zip')","36e68f42":"df1.head()","b9b7717c":"X_test = df1['comment_text']\nX_test.shape","02f72461":"test_sequences = tokenizer.texts_to_sequences(X_test)\ntest_padded = pad_sequences(test_sequences, maxlen=max_length, padding=padding_type, \n                               truncating=trunc_type)","fa035ca0":"y_test = model.predict(test_padded)","e1c245d8":"y_test.shape","eedcc639":"predictions = pd.read_csv('..\/input\/jigsaw-toxic-comment-classification-challenge\/sample_submission.csv.zip')","230584da":"predictions.head()","3d25cba0":"predictions[['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']] = y_test","91fcd14d":"predictions.head()","62bca960":"predictions.to_csv('submission1.csv', index = False)","d69b22c4":"# **We are using dropout layer in order to prevent overfitting of our training data and we will check that using Train\/val loss values and graphs**","3f10e085":"# ***To check duplications***","2433f664":"# **Checking the number of columns and samples**","4551d532":"# ***Checking the Null values if the exist***","678c7562":"# Checking for The data Info.","c36c177a":"# **Building a simple model using MLP(multi-layer perceptron) or what is called (Vanilla network), we excpect to have better results when we use (RNN, GRUs and LSTM)**\n\n## Also Attention and Transformers can give us more better results."}}