{"cell_type":{"1650435a":"code","70effa21":"code","4b4361da":"code","c4ba9528":"code","9aed1a6d":"code","94783596":"code","53cf42bd":"code","6b65068e":"code","a41578ac":"code","6fdde1e3":"code","8e7d4e71":"code","914758c9":"code","3d873ce8":"code","b873f7d9":"code","6bbd07f0":"code","355f6e95":"code","3943813e":"code","1834f730":"code","c021393f":"code","6528a63f":"code","b278f89c":"code","e33e1f8b":"markdown","16bb87c2":"markdown","f9470703":"markdown","64c62437":"markdown","fdaff9e2":"markdown","521fbca5":"markdown","493edb55":"markdown","920da2fb":"markdown","1396174f":"markdown","570a1f4a":"markdown","910012c9":"markdown","00f4947a":"markdown","a4acf098":"markdown"},"source":{"1650435a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mlt\n\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70effa21":"train = pd.read_csv(\"\/kaggle\/input\/ventilator-pressure-prediction\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/ventilator-pressure-prediction\/test.csv\")","4b4361da":"train.head()","c4ba9528":"train.query(\"breath_id==3\")[\"u_out\"].value_counts()","9aed1a6d":"train.query('breath_id==1 and u_out==0').count()","94783596":"train.describe()","53cf42bd":"train.info()","6b65068e":"df = train.copy()\nplt.figure(figsize=(12,10),dpi=80)\nsns.heatmap(\n    df.corr(),\n    xticklabels = df.corr().columns,\n    yticklabels = df.corr().columns,\n    cmap = sns.diverging_palette(250,5,as_cmap=True),\n    center=0,\n    annot=True\n)\n\nplt.show()","a41578ac":"from matplotlib_venn import venn2, venn2_circles, venn2_unweighted\nfrom matplotlib_venn import venn3, venn3_circles\nfig,ax = plt.subplots(figsize=(10,5),nrows=1,ncols=2)\nvenn2(subsets = (set(train[\"id\"]),set(test[\"id\"])),set_labels=(\"train\",\"test\"),ax=ax[0])\nax[0].set_title(\"id\")\nvenn2(subsets = (set(train[\"breath_id\"]),set(test[\"breath_id\"])),set_labels=(\"train\",\"test\"),ax=ax[1])\nax[1].set_title(\"breath_id\")\nplt.show()","6fdde1e3":"fig,ax=plt.subplots(figsize=(16,8),nrows=2,ncols=3,tight_layout=True)\nplt.subplots_adjust(hspace = 0.3)\nnum=0\ncols=[\"R\",\"C\",\"time_step\",\"u_in\",\"u_out\",\"pressure\"]\ndf = train[cols].sample(n=10000)\nfor i in range(2):\n    for j in range(3):\n        sns.distplot(df[cols[num]],ax=ax[i,j])\n        num += 1\n        \nplt.show() ","8e7d4e71":"df = train[cols]\ncols = [\"R\",\"C\",\"u_out\"]\nfig , ax= plt.subplots(figsize=(15,5),nrows=1,ncols=3)\n\nfor i in range(3):\n    sns.countplot(x=cols[i],data=df,ax=ax[i])","914758c9":"fig,ax=plt.subplots(figsize=(14,5),nrows=1,ncols=3,tight_layout=True)\nplt.subplots_adjust(hspace = 0.3)\nnum=0\n#R,C,U_out\u306b\u95a2\u3057\u3066\u306f\u540c\u3058\u6570\u5024\u304c\u591a\u3044\u306e\u3067\u30ab\u30c6\u30b4\u30ea\u3068\u3057\u3066\u6271\u3046\ncols=[\"time_step\",\"u_in\",\"pressure\"]\ndf = train[cols]\nfor j in range(3):\n    sns.boxplot(df[cols[num]],ax=ax[j])\n    num += 1\n        \nplt.show() ","3d873ce8":"print(train[\"u_out\"].value_counts())\nprint(train[\"C\"].value_counts())\nprint(train[\"R\"].value_counts())","b873f7d9":"cols =[\"R\",\"C\",\"u_out\",\"pressure\"]\ndf = train[cols].sample(n=10000)\n\nfor i in range(3):\n    grid = sns.FacetGrid(df, col=cols[i],hue=cols[i],col_wrap=3,size=4)\n    grid.map(sns.distplot,\"pressure\")\n    plt.show()\n","6bbd07f0":"group_pressure = train.groupby(\"breath_id\").agg({\"pressure\":[\"mean\",\"max\",\"min\"]}).reset_index()\ngroup_pressure.columns = [\"\".join(i) for i in group_pressure.columns]\n\nfig , ax = plt.subplots(figsize = (15,10) , nrows=1, ncols=3)\nfor i in range(1,4):  \n    sns.distplot(x=group_pressure[group_pressure.columns[i]],ax = ax[i-1])\n    ax[i-1].set_xlabel(group_pressure.columns[i])\n    \n    ","355f6e95":"df = train.copy()\ndf.groupby([\"R\",\"C\",\"u_out\"]).count()","3943813e":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\nfor row,c in enumerate([10,20,50]):\n    fig = go.Figure()\n    df = train.query('R==5 & C==@c').reset_index()#\u30e9\u30f3\u30c0\u30e0\u306b10\u4eba\u62bd\u51fa\n    #df = train.copy()\n    num_id = list(df[\"breath_id\"].unique())\n    sample_num_id = num_id[0:10]\n    for i in sample_num_id:\n        breath_id=df.loc[df[\"breath_id\"]==i,\"breath_id\"].unique()[0]\n        R=df.loc[df[\"breath_id\"]==i,\"R\"].unique()[0]\n        C=df.loc[df[\"breath_id\"]==i,\"C\"].unique()[0]\n        fig.add_trace(go.Scatter(x=df.loc[df[\"breath_id\"] == i,\"time_step\"],\n                            y=df.loc[df[\"breath_id\"] == i, \"pressure\"],\n                            name = f'breath_id:{breath_id},R:{R},C:{C}')\n                           )\n    fig.show()","1834f730":"for c in [10,20,50]:\n    fig = go.Figure()\n    df = train.query('R==20 & C==@c').reset_index()#\u30e9\u30f3\u30c0\u30e0\u306b10\u4eba\u62bd\u51fa\n    #df = train.copy()\n    num_id = list(df[\"breath_id\"].unique())\n    sample_num_id = num_id[0:10]\n    for i in sample_num_id:\n        breath_id=df.loc[df[\"breath_id\"]==i,\"breath_id\"].unique()[0]\n        R=df.loc[df[\"breath_id\"]==i,\"R\"].unique()[0]\n        C=df.loc[df[\"breath_id\"]==i,\"C\"].unique()[0]\n        fig.add_trace(go.Scatter(x=df.loc[df[\"breath_id\"] == i,\"time_step\"],\n                            y=df.loc[df[\"breath_id\"] == i, \"pressure\"],\n                            name = f'breath_id:{breath_id},R:{R},C:{C}')\n                 )\n    fig.show()","c021393f":"for c in [10,20,50]:\n    fig = go.Figure()\n    df = train.query('R==20 & C==@c').reset_index()#\u30e9\u30f3\u30c0\u30e0\u306b10\u4eba\u62bd\u51fa\n    #df = train.copy()\n    num_id = list(df[\"breath_id\"].unique())\n    sample_num_id = num_id[0:10]\n    for i in sample_num_id:\n        breath_id=df.loc[df[\"breath_id\"]==i,\"breath_id\"].unique()[0]\n        R=df.loc[df[\"breath_id\"]==i,\"R\"].unique()[0]\n        C=df.loc[df[\"breath_id\"]==i,\"C\"].unique()[0]\n        fig.add_trace(go.Scatter(x=df.loc[df[\"breath_id\"] == i,\"time_step\"],\n                            y=df.loc[df[\"breath_id\"] == i, \"pressure\"],\n                            name = f'breath_id:{breath_id},R:{R},C:{C}')\n                 )\n    fig.show()","6528a63f":"df_train = train.copy()\ndf_train['u_in_cumsum'] = (df_train['u_in']).groupby(df_train['breath_id']).cumsum()","b278f89c":"df_train","e33e1f8b":"### \u5909\u6570\u540c\u58eb\u306e\u76f8\u95a2\u4fc2\u6570(sns.heatmap)","16bb87c2":"### Trin\u30c7\u30fc\u30bf\u3068Test\u30c7\u30fc\u30bf\u306e\u88ab\u308a(venn2)\n- id\u306e\u88ab\u308a\u3068breath_id\u306e\u88ab\u308a","f9470703":"### \u5909\u6570\n- R \n\n\u6c17\u9053\u304c\u3069\u308c\u3060\u3051\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u80ba\u306e\u5c5e\u6027\uff08\u5358\u4f4d\uff1acmH2O\/L\/S\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u6d41\u91cf\uff08\u6642\u9593\u5f53\u305f\u308a\u306e\u7a7a\u6c17\u91cf\uff09\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u5727\u529b\u306e\u5909\u5316\u3067\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u30b9\u30c8\u30ed\u30fc\u3067\u98a8\u8239\u3092\u81a8\u3089\u307e\u305b\u308b\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\u30b9\u30c8\u30ed\u30fc\u306e\u76f4\u5f84\u3092\u5909\u3048\u308b\u3053\u3068\u3067R\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001R\u304c\u5927\u304d\u3044\u307b\u3069\u5439\u304d\u306b\u304f\u304f\u306a\u308a\u307e\u3059\u3002\n\n- C\n\n\u80ba\u306e\u9069\u5408\u6027\u3092\u793a\u3059\u80ba\u5c5e\u6027\uff08\u5358\u4f4d\uff1amL\/cmH2O\uff09\u3002\u7269\u7406\u7684\u306b\u306f\u3001\u5727\u529b\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u4f53\u7a4d\u306e\u5909\u5316\u3067\u3059\u3002\u76f4\u611f\u7684\u306b\u306f\u3001\u540c\u3058\u98a8\u8239\u306e\u4f8b\u3092\u60f3\u50cf\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u98a8\u8239\u306e\u30e9\u30c6\u30c3\u30af\u30b9\u306e\u539a\u3055\u3092\u5909\u3048\u308b\u3053\u3068\u3067C\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002C\u304c\u5927\u304d\u3044\u307b\u3069\u30e9\u30c6\u30c3\u30af\u30b9\u304c\u8584\u304f\u3001\u5439\u304d\u3084\u3059\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n- time_step\n\n\u5b9f\u969b\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\n\n- u_in\n\n\u5438\u6c17\u96fb\u78c1\u5f01\u306e\u5236\u5fa1\u5165\u529b\u3002\u7bc4\u56f2\u306f0\u301c100\u3067\u3059\u3002\n\n- u_out\n\n\u63a2\u7d22\u7684\u96fb\u78c1\u5f01\u306e\u5236\u5fa1\u5165\u529b\u30020\u307e\u305f\u306f1\u306e\u3044\u305a\u308c\u304b\u3002\n\n- pressure\n\n\u547c\u5438\u56de\u8def\u3067\u6e2c\u5b9a\u3055\u308c\u305f\u6c17\u9053\u5185\u5727\u3002cmH2O\u3067\u6e2c\u5b9a\u3055\u308c\u307e\u3059\u3002","64c62437":"- \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3054\u3068\u306e\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\n - u_out\u3067\u306e\u5206\u5e03\u304c\u5c11\u3057\u5909\u308f\u3063\u3066\u3044\u308b","fdaff9e2":"### R\u3068C\u3068u_out\u306e\u68d2\u30b0\u30e9\u30d5(sns.countplot)","521fbca5":"### \u65b0\u3057\u3044\u7279\u5fb4\u91cf\n\u7d2f\u7a4d\u306eu_in","493edb55":"- breath_id : ","920da2fb":"- breath_id\u3054\u3068\u306epressure\u306e\u5e73\u5747\u5024\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u306e\u5206\u5e03","1396174f":"### \u6570\u5024\u5909\u6570\u306e\u7bb1\u9aed\u56f3(sns.boxplot)","570a1f4a":"### \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u5206\u5e03\u56f3(sns.histplot)\n- \u91cd\u8907\u306a\u3057\u306710000\u4ef6\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u53ef\u8996\u5316","910012c9":"### R,C,u_out\u5225\u306ebreath_id\u3067\u306epressure\u306e\u6642\u9593\u7684\u5909\u5316\n- plotly\u3092\u7528\u3044\u3066\u53ef\u8996\u5316","00f4947a":"\u30ab\u30c6\u30b4\u30ea\u306f18\u7a2e\u985e","a4acf098":"### \u53ef\u8996\u5316\u306e\u65b9\u91dd\n- \u30ab\u30c6\u30b4\u30ea\u5909\u6570(u_out,C,R)\u3054\u3068\u306e\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\n- R\u3068C\u306e\u7a2e\u985e\n"}}