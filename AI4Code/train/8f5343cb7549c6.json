{"cell_type":{"adcd9cbc":"code","92ba6b3c":"code","b108716f":"code","9f7af05d":"code","f3992e64":"code","3b23964a":"code","b0460ec2":"code","8d599792":"code","be1ec407":"code","b4a26645":"code","adecd160":"code","7c24a762":"code","99a276bc":"code","5996b8fb":"code","d3cc08d6":"code","8de3e6c3":"code","759b9eca":"code","3a258d30":"markdown","c3fdf076":"markdown"},"source":{"adcd9cbc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92ba6b3c":"df = pd.read_sas('\/kaggle\/input\/bank-customers\/bank_customers.sas7bdat', encoding = 'iso-8859-1')\ndf.head()","b108716f":"df.shape","9f7af05d":"df.columns","f3992e64":"df.columns[df.isnull().any()]","3b23964a":"df['HMVAL'].fillna(0, inplace = True)\ndf['INV'].fillna(0, inplace = True)\ndf['INVBAL'].fillna(0, inplace = True)\ndf['CC'].fillna(0, inplace = True)\ndf['CCBAL'].fillna(0, inplace = True)\ndf['POSAMT'].fillna(0, inplace = True)\ndf['POSAMT'].fillna(0, inplace = True)\ndf['CCPURC'].fillna(0, inplace = True)\ndf['HMOWN'].fillna(0, inplace = True)\ndf['PHONE'].fillna(0, inplace = True)\ndf['ACCTAGE'].fillna(df['ACCTAGE'].mean(), inplace = True)\ndf['POS'].fillna(df['POS'].mean(), inplace = True)\ndf['INCOME'].fillna(df['INCOME'].mean(), inplace = True)\ndf['LORES'].fillna(df['LORES'].mean(), inplace = True)\ndf['CRSCORE'].fillna(df['CRSCORE'].mean(), inplace = True)\ndf['AGE'].fillna(df['AGE'].mean(), inplace = True)","b0460ec2":"df['BRANCH'].unique()","8d599792":"df['BRANCH'].replace(['B12','B7', 'B5', 'B1', 'B9', 'B2', 'B3', 'B8','B15','B4','B18', 'B14', 'B6', 'B16', 'B19', 'B17', 'B13', 'B11', 'B10'],[12,7,5,1,9,2,3,8,15,4,18,14,6,16,19,17,13,11,10],inplace=True)","be1ec407":"res_dummies = pd.get_dummies(df['RES'],prefix = 'RES', prefix_sep = '_', drop_first = True)\ndf = df.drop('RES',axis = 1)\ndf = df.join(res_dummies)\ndf ","b4a26645":"df['LOC'].unique()","adecd160":"y = df['LOC']","7c24a762":"x = df.drop('LOC', axis = 1)","99a276bc":"from sklearn import tree\nimport graphviz","5996b8fb":"clf = tree.DecisionTreeClassifier(max_leaf_nodes=10, min_samples_leaf=5, max_depth=5, max_features=None)\nclf_expanded = tree.DecisionTreeClassifier()","d3cc08d6":"clf = clf.fit(x, y)\nclf_expanded = clf_expanded.fit(x, y)","8de3e6c3":"fn = ['ACCTAGE', 'DDA', 'DDABAL', 'DEP', 'DEPAMT', 'CASHBK', 'CHECKS',\n       'DIRDEP', 'NSF', 'NSFAMT', 'PHONE', 'TELLER', 'SAV', 'SAVBAL', 'ATM',\n       'ATMAMT', 'POS', 'POSAMT', 'CD', 'CDBAL', 'IRA', 'IRABAL', 'LOCBAL', \n       'INV', 'INVBAL', 'ILS', 'ILSBAL', 'MM', 'MMBAL', 'MMCRED',\n       'MTG', 'MTGBAL', 'CC', 'CCBAL', 'CCPURC', 'SDB', 'INCOME', 'HMOWN',\n       'LORES', 'HMVAL', 'AGE', 'CRSCORE', 'MOVED', 'INAREA', 'BRANCH',\n       'RES_S', 'RES_U']\ncn = ['0', '1']\n\ndot_data = tree.export_graphviz(clf, out_file=None,\n                    feature_names= fn,\n                    class_names= cn,\n                    filled=True, rounded=True,  \n                    special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph.render(\"Tree 1 Prunned\") ","759b9eca":"fn = ['ACCTAGE', 'DDA', 'DDABAL', 'DEP', 'DEPAMT', 'CASHBK', 'CHECKS',\n       'DIRDEP', 'NSF', 'NSFAMT', 'PHONE', 'TELLER', 'SAV', 'SAVBAL', 'ATM',\n       'ATMAMT', 'POS', 'POSAMT', 'CD', 'CDBAL', 'IRA', 'IRABAL', 'LOCBAL', \n       'INV', 'INVBAL', 'ILS', 'ILSBAL', 'MM', 'MMBAL', 'MMCRED',\n       'MTG', 'MTGBAL', 'CC', 'CCBAL', 'CCPURC', 'SDB', 'INCOME', 'HMOWN',\n       'LORES', 'HMVAL', 'AGE', 'CRSCORE', 'MOVED', 'INAREA', 'BRANCH',\n       'RES_S', 'RES_U']\ncn = ['0', '1']\n\ndot_data = tree.export_graphviz(clf_expanded, out_file=None,\n                    feature_names= fn,\n                    class_names= cn,\n                    filled=True, rounded=True,  \n                    special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph.render(\"Tree_Expanded\") ","3a258d30":"### Replace null values with means and 0's","c3fdf076":"### Checking for columns with null values"}}