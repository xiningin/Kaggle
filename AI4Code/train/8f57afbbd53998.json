{"cell_type":{"ed929983":"code","91549d97":"code","d2e32dd2":"code","7a303a00":"code","f021ec22":"code","915b4eeb":"code","7a9d428c":"code","69e86682":"code","cc0af839":"code","f2591237":"code","63749980":"code","4b3b5127":"markdown","c2265c95":"markdown","71c52c67":"markdown"},"source":{"ed929983":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","91549d97":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\n\nDATADIR = r\"\/kaggle\/input\/brain-tumor-classification-mri\/Training\/\"\nCATEGORIES = [\"glioma_tumor\",\"meningioma_tumor\",\"no_tumor\",\"pituitary_tumor\"]\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR,category)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path,img))\n        plt.imshow(img_array)\n        plt.show()\n        plt.axis(\"off\")\n        break\n    break","d2e32dd2":"IMG_SIZE = 150\nnew_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))    \nplt.imshow(new_array,cmap = \"gray\")\nplt.axis(\"off\")\n","7a303a00":"training_data = []\n\ndef create_training_data():\n    for category in CATEGORIES:\n        path = os.path.join(DATADIR,category)\n        class_num = CATEGORIES.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE)) \n                training_data.append([new_array,class_num])\n            except Exception as e:\n                pass\ncreate_training_data()","f021ec22":"X = []\ny = []\nfor features,label in training_data:\n    X.append(features)\n    y.append(label)\nX = np.array(X).reshape(-1,IMG_SIZE,IMG_SIZE)\nprint(X.shape)\nX = X\/255.0  \nX = X.reshape(-1,150,150,1)","915b4eeb":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\ny = to_categorical(y, num_classes = 4)","7a9d428c":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size = 0.2, random_state=42)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","69e86682":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (150,150,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\n#\nmodel.add(Conv2D(filters = 256, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\n# \nmodel.add(Flatten())\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation = \"softmax\"))\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nepochs = 50  \nbatch_size = 40\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=0,\n        zoom_range = 0,\n        width_shift_range=0,  \n        height_shift_range=0,  \n        horizontal_flip=True,  \n        vertical_flip=False)  \n","cc0af839":"datagen.fit(X_train)\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size)    ","f2591237":"plt.plot(history.history[\"loss\"],c = \"purple\")\nplt.plot(history.history[\"val_loss\"],c = \"orange\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.show()","63749980":"plt.plot(history.history[\"accuracy\"],c = \"purple\")\nplt.plot(history.history[\"val_accuracy\"],c = \"orange\")\nplt.title(\"Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.show()","4b3b5127":"<font color ='brown'>\n    \n\n    \n### Load and Check Data ","c2265c95":"### PREDICTION USING CNN","71c52c67":"### MANIPULATING DATA"}}