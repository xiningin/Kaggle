{"cell_type":{"7521c250":"code","39918704":"code","2d12788a":"code","a29f3cfa":"code","368e17d5":"code","444a3409":"code","338cc385":"code","29c96535":"code","232e92f6":"code","be07fd8e":"code","ad4f98a6":"code","81e5c928":"code","573e5c68":"code","9e58f98f":"code","1b1fa3fa":"code","e2d1b438":"code","35ca92a6":"code","ab828a32":"code","5d349de4":"code","cfad4f53":"code","fd9a44bd":"markdown","466c5898":"markdown","646adab1":"markdown"},"source":{"7521c250":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39918704":"from fastai.vision import *","2d12788a":"tfms = get_transforms(max_rotate=25)","a29f3cfa":"len(tfms)","368e17d5":"def get_ex(): return open_image('..\/input\/horse-breeds\/01_001.png')","444a3409":"def plots_f(rows, cols, width, height, **kwargs):\n    [get_ex().apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(\n        rows,cols,figsize=(width,height))[1].flatten())]","338cc385":"plots_f(2, 4, 12, 6, size=224)","29c96535":"tfms = zoom_crop(scale=(0.75,2), do_rand=True)","232e92f6":"# random zoom and crop\nplots_f(2, 4, 12, 6, size=224)","be07fd8e":"# random resize and crop\ntfms = [rand_resize_crop(224)]\nplots_f(2, 4, 12, 6, size=224)","ad4f98a6":"# passing a probability to a function\ntfm = [rotate(degrees=30, p=0.5)]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = 'Done' if tfm[0].do_run else 'Not done'\n    img.show(ax=ax, title=title)","81e5c928":"tfm = [rotate(degrees=(-30,30))]\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor ax in axs:\n    img = get_ex().apply_tfms(tfm)\n    title = f\"deg={tfm[0].resolved['degrees']:.1f}\"\n    img.show(ax=ax, title=title)","573e5c68":"# brightness\nfig, axs = plt.subplots(1,5,figsize=(14,8))\nfor change, ax in zip(np.linspace(0.1,0.9,5), axs):\n    brightness(get_ex(), change).show(ax=ax, title=f'change={change:.1f}')","9e58f98f":"# contrast\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.exp(np.linspace(log(0.5),log(2),5)), axs):\n    contrast(get_ex(), scale).show(ax=ax, title=f'scale={scale:.2f}')","1b1fa3fa":"# dihedral\nfig, axs = plt.subplots(2,2,figsize=(12,8))\nfor k, ax in enumerate(axs.flatten()):\n    dihedral(get_ex(), k).show(ax=ax, title=f'k={k}')\nplt.tight_layout()","e2d1b438":"fig, axs = plt.subplots(1,2,figsize=(10,8))\nget_ex().show(ax=axs[0], title=f'no flip')\nflip_lr(get_ex()).show(ax=axs[1], title=f'flip')","35ca92a6":"# jitter\nfig, axs = plt.subplots(1,5,figsize=(20,8))\nfor magnitude, ax in zip(np.linspace(-0.05,0.05,5), axs):\n    tfm = jitter(magnitude=magnitude)\n    get_ex().jitter(magnitude).show(ax=ax, title=f'magnitude={magnitude:.2f}')","ab828a32":"# squish\nfig, axs = plt.subplots(1,5,figsize=(12,4))\nfor scale, ax in zip(np.linspace(0.66,1.33,5), axs):\n    get_ex().squish(scale=scale).show(ax=ax, title=f'scale={scale:.2f}')","5d349de4":"# tilt\nfig, axs = plt.subplots(2,4,figsize=(12,8))\nfor i in range(4):\n    get_ex().tilt(i, 0.4).show(ax=axs[0,i], title=f'direction={i}, fwd')\n    get_ex().tilt(i, -0.4).show(ax=axs[1,i], title=f'direction={i}, bwd')","cfad4f53":"# symm warp\ntfm = symmetric_warp(magnitude=(-0.2,0.2))\n_, axs = plt.subplots(2,4,figsize=(12,6))\nfor ax in axs.flatten():\n    img = get_ex().apply_tfms(tfm, padding_mode='zeros')\n    img.show(ax=ax)","fd9a44bd":"#All codes thanks DipamVasani https:\/\/www.kaggle.com\/dipam7\/data-augmentation-in-fastai","466c5898":"#All codes thanks DipamVasani https:\/\/www.kaggle.com\/dipam7\/data-augmentation-in-fastai","646adab1":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke "}}