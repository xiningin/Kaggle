{"cell_type":{"6b058d15":"code","c1a11584":"code","f12a2730":"code","cfa424a4":"code","60123ac0":"code","3921a8c4":"code","19df41fb":"code","a95a3aa3":"code","0f72783d":"code","4d477487":"code","f3b566d4":"code","6225a813":"code","4d098eab":"code","5138034c":"code","d3d4d034":"code","76d0920c":"code","003d8a64":"code","9c2f06cf":"code","a253b24b":"code","4996f0eb":"code","3301a381":"code","ecbd90d2":"code","c04575ad":"code","667528fc":"code","2a000781":"code","d33f0f49":"code","27e9a3ee":"code","8db412ef":"code","2bcb7efc":"code","946902b0":"code","f4f27219":"code","5201d5d5":"code","4c87dd22":"code","418727d0":"code","b6c58360":"markdown","a2d2f650":"markdown","81708f34":"markdown","a76b781a":"markdown","6517a6b6":"markdown","b9793f3c":"markdown","7a9632d6":"markdown","d88d7fbf":"markdown","16bd6e8a":"markdown","3e9ca9dd":"markdown","17e22b53":"markdown","664164d7":"markdown","7eb46c22":"markdown","c7f5e0d7":"markdown","912ef6b2":"markdown","d0cfe786":"markdown","195790f2":"markdown","04c627a5":"markdown","bf66becb":"markdown","9a2180d0":"markdown","f607e263":"markdown","a41f4f86":"markdown","a23cc736":"markdown","77af2eae":"markdown","0b9d6267":"markdown","0036cead":"markdown","34bf23c8":"markdown","4935754b":"markdown"},"source":{"6b058d15":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nfrom plotly.offline import init_notebook_mode\n\ninit_notebook_mode(connected=True)\n\nsns.set()","c1a11584":"df_covid = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_coord = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')","f12a2730":"# Create relation latitude and longitude per country\/province\ndf_coord = df_coord.groupby(['Province\/State', 'Country\/Region']).agg({'Lat' : 'first', 'Long' : 'first'})\ndf_coord.reset_index(inplace=True)","cfa424a4":"df_covid['Country\/Region'] = df_covid['Country\/Region'].replace('Mainland China', 'China')\ndf_covid = df_covid.merge(df_coord, how='left')","60123ac0":"cols = df_covid.columns\ndf_covid.columns = [col.lower() for col in cols]","3921a8c4":"df_covid.rename(columns={\n    'observationdate' : 'observation_date',\n    'country\/region' : 'country',\n    'province\/state' : 'province_state', \n    'last update' : 'last_update',\n}, inplace=True)","19df41fb":"df_covid.drop('sno', axis=1, inplace=True)","a95a3aa3":"df_covid.isnull().any()","0f72783d":"df_covid['province_state'].fillna('', inplace=True)\ndf_covid['lat'].fillna('', inplace=True)\ndf_covid['long'].fillna('', inplace=True)","4d477487":"df_covid['observation_date'] = pd.to_datetime(df_covid['observation_date'])\ndf_covid['last_update'] = pd.to_datetime(df_covid['last_update'])\n\ndf_covid.sort_values('observation_date', inplace=True)","f3b566d4":"df_covid['diseased'] = df_covid['confirmed'] - df_covid['recovered'] - df_covid['deaths']\ndf_covid['observation_month'] = df_covid['observation_date'].astype(str).str.extract(r'(\\d{4}-\\d{2})')\ndf_covid['last_update_month'] = df_covid['last_update'].astype(str).str.extract(r'(\\d{4}-\\d{2})')","6225a813":"df_covid_last = df_covid.groupby(['country', 'province_state']).last()\ndf_covid_last.reset_index(inplace=True)","4d098eab":"df_grouped = df_covid_last[['country', 'confirmed', 'deaths', 'recovered', 'diseased']]\\\n    .groupby('country')\\\n    .sum()\\\n    .sort_values('recovered', ascending=False)\n\n# Removed countries without any confirmed case of covid-19\ndf_grouped = df_grouped[df_grouped['confirmed'] > 0]\n\n# Get percentages of recovered, deaths and diseased\ndf_grouped['pct_recovered'] = round(df_grouped['recovered'] \/ df_grouped['confirmed'], 4)\ndf_grouped['pct_deaths'] = round(df_grouped['deaths'] \/ df_grouped['confirmed'], 4)\ndf_grouped['pct_diseased'] = round(df_grouped['diseased'] \/ df_grouped['confirmed'], 4)","5138034c":"df_covid_last[['confirmed', 'recovered', 'deaths', 'diseased']].sum()","d3d4d034":"df_covid_last[['recovered', 'deaths', 'diseased']]\\\n    .sum()\\\n    .plot(kind='pie', subplots=True, figsize=(8, 8), autopct='%1.1f%%')\n\nfig = plt.gcf()\n\nfig.gca().add_artist(plt.Circle((0,0),0.70,fc='white'))","76d0920c":"df_density_mapbox = df_covid_last[df_covid_last['lat'] != ''][['country', 'province_state', 'lat', 'long', 'confirmed','deaths','recovered', 'diseased']]\n\nfig = px.density_mapbox(\n    df_density_mapbox,\n    lat = 'lat',\n    lon = 'long',\n    color_continuous_scale='Inferno',\n    hover_name = 'province_state',\n    hover_data = ['confirmed','deaths','recovered', 'diseased'],\n    radius = 10, zoom = 1, height = 600\n)\n\nfig.update_layout(mapbox_style=\"open-street-map\", mapbox_center_lon=0)\nfig.update_layout()\nfig.show()","003d8a64":"plt.figure(figsize=(14, 6))\n\nsns.distplot(np.log10(df_grouped['confirmed']))","9c2f06cf":"df_grouped['confirmed_log'] = np.log10(df_grouped['confirmed'])\ndf_grouped['deaths_log'] = np.log10(df_grouped['deaths'])","a253b24b":"plt.figure(figsize=(13, 11))\n\nx = df_grouped[df_grouped['confirmed_log'] > 0].sort_values('confirmed_log', ascending=False)\n\nsns.barplot(x=x['confirmed_log'], y=x.index);\nplt.show()","4996f0eb":"plt.figure(figsize=(13, 11))\n\nx = df_grouped[df_grouped['confirmed_log'] > 0].sort_values('confirmed_log', ascending=False)[:10]\n\nsns.barplot(x=x['confirmed_log'], y=x.index);\nplt.show()","3301a381":"plt.figure(figsize=(13, 11))\n\nx = df_grouped[df_grouped['deaths_log'] > 0].sort_values('deaths_log', ascending=False)\n\nsns.barplot(x=x['deaths_log'], y=x.index);\nplt.show()","ecbd90d2":"plt.figure(figsize=(13, 11))\n\nx = df_grouped[df_grouped['deaths_log'] > 0].sort_values('deaths_log', ascending=False)[:10]\n\nsns.barplot(x=x['deaths_log'], y=x.index);\nplt.show()","c04575ad":"threshold_high_death_rate = 0.05\nthreshold_low_death_rate  = 0.001\nthreshold_confimed_cases  = 30","667528fc":"f\"{df_grouped[(df_grouped['pct_deaths'] >= threshold_high_death_rate) & (df_grouped['confirmed'] >= threshold_confimed_cases)].shape[0]} countries with high death rate\"","2a000781":"df_grouped[(df_grouped['pct_deaths'] >= threshold_high_death_rate) & (df_grouped['confirmed'] >= threshold_confimed_cases)]\\\n    .sort_values('confirmed', ascending=False)","d33f0f49":"f\"{df_grouped[(df_grouped['pct_deaths'] <= threshold_low_death_rate) & (df_grouped['confirmed'] >= threshold_confimed_cases)].shape[0]} countries with high death rate\"","27e9a3ee":"df_grouped[(df_grouped['pct_deaths'] <= threshold_low_death_rate) & (df_grouped['confirmed'] >= threshold_confimed_cases)]\\\n    .sort_values('confirmed', ascending=False)","8db412ef":"df_first_occurency = df_covid.groupby('country').agg({\n    'observation_month' : 'nunique'\n}) \n\ndf_first_occurency.rename(columns={'observation_month' : 'qnt_months_since_first_occurency'}, inplace=True)","2bcb7efc":"df_first_occurency['qnt_months_since_first_occurency'].value_counts()","946902b0":"df_covid_last = df_covid_last.set_index('country')\\\n    .join(df_first_occurency['qnt_months_since_first_occurency'])\n\ndf_grouped_first_occurency = df_covid_last.groupby('qnt_months_since_first_occurency').sum()","f4f27219":"# Percentage change between the current and a prior element\ndf_grouped_first_occurency.pct_change()","5201d5d5":"df_grouped[df_grouped['pct_recovered'] == 1]","4c87dd22":"df_tmp = df_covid[df_covid['country'].isin(df_grouped[df_grouped['pct_recovered'] == 1].index)]\\\n    .groupby('country')\\\n    .agg({'observation_month' : ['first', 'last']})","418727d0":"df_grouped[\n    (df_grouped['pct_recovered'] == 1) & \n    (df_grouped.index.isin(df_tmp[df_tmp['observation_month']['first'] != df_tmp['observation_month']['last']].index))\n]","b6c58360":"## Merge datasets","a2d2f650":"This countries have more than one month since first occurency and recovery all diseased","81708f34":"## Countries with high death rate\n\nI'm currently using **5% as my high death threshold** and **0.1% as my low death threshold** but **this is very subjective** and can differ from differents perspectives. Also, **i do not want to count countries that have less than 30 confimed cases of covid-19**","a76b781a":"## Fixing missing values","6517a6b6":"## Get updated information of every region\n\nIn some analysis we're only interested in the last update for each region","b9793f3c":"# Feature Engineering","7a9632d6":"## Drop unwanted columns\n\nEven thought is just one columns, there's no need to keep it","d88d7fbf":"## Distribution of confirmed cases worldwide\n\nLet's see in one plot how bad is the situation for confirmed cases.","16bd6e8a":"# EDA COVID-19 for last status\n\nThis notebook explore only the last status of covid-19 for each country or worldwide.","3e9ca9dd":"# Last comments\n\nI do find this subject really interesting and i'm not done with this notebook yet, fell free to contribute with toughts and suggestions :D","17e22b53":"## Countries that recovered every diseased","664164d7":"### Confirmed cases","7eb46c22":"There's still small amount of data to infer anything, i'll keep this here tho","c7f5e0d7":"## Force columns to be snake case ","912ef6b2":"## Density plot\n\nWe're missing a lot of informaton for lack of lat and long, i'll keep this plot but i won't pay much attention to it","d0cfe786":"The majority of the countires are still in their first month of covid-19","195790f2":"### Deaths","04c627a5":"## Feature extraction","bf66becb":"## Last update worldwide","9a2180d0":"## Last status per countries","f607e263":"#### Top 10","a41f4f86":"## Transform date column to date format\n\nThis will be usefull to sort our data, even if our dataset looks sorted it's always a good idea to do it again.","a23cc736":"## How many months been past since first occurancy for each country","77af2eae":"### Relation of deaths per months passed since first occurence of covid-19","0b9d6267":"## Countries with low death rate","0036cead":"## Group updated informations by country","34bf23c8":"#### Top 10","4935754b":"# EDA"}}