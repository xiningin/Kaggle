{"cell_type":{"0cb80161":"code","55bac422":"code","cbfff5b2":"code","a0861f0c":"code","aa4cd05c":"code","f4d596a9":"code","ff57f431":"code","8bf8a056":"markdown","2d1c4d9c":"markdown","85ecda77":"markdown","adb6c1ad":"markdown","b94512bd":"markdown","93583f32":"markdown"},"source":{"0cb80161":"import pandas as pd\nimport tensorflow as tf\nimport cv2\nimport matplotlib.pyplot as plt","55bac422":"df = pd.read_csv('..\/input\/license\/license.csv')\ndf.head()","cbfff5b2":"def load_img(path):\n    img = tf.io.read_file(path)\n    img = tf.image.decode_image(img, channels=3, dtype=tf.float32)\n    img = tf.image.resize(img, (224,224))\n    if len(img.shape) == 4:\n        img = tf.squeeze(img,0)\n    img = tf.expand_dims(img, axis=0)\n    return img","a0861f0c":"# For traininig\nimgs = []\nlabels = []\nfor index, row in df[:int(0.9*len(df))].iterrows():\n    imgs.append(load_img(row['image_name']))\n    labels.append(tf.constant([[row['top_x'],row['top_y'],row['bottom_x'],row['bottom_y']]]))\ntrain_images = tf.concat(imgs,axis=0)\ntrain_labels = tf.concat(labels,axis=0)\n\n# For testing\nimgs = []\nlabels = []\nfor index, row in df[int(0.9*len(df)):].iterrows():\n    imgs.append(load_img(row['image_name']))\n    labels.append(tf.constant([[row['top_x'],row['top_y'],row['bottom_x'],row['bottom_y']]]))\ntest_images = tf.concat(imgs,axis=0)\ntest_labels = tf.concat(labels,axis=0)","aa4cd05c":"def show_img_bbox(img, label):\n    img = img.numpy()\n    y_hat = label.numpy()*224\n    xt, yt = int(y_hat[0]), int(y_hat[1])\n    xb, yb = int(y_hat[2]), int(y_hat[3])\n    image = cv2.rectangle(img, (xt, yt), (xb, yb), (0, 0, 255), 3)\n    plt.imshow(image)\n    plt.show()\n\n# Use the function\nshow_img_bbox(train_images[13], train_labels[13])","f4d596a9":"train_ds = tf.data.Dataset.from_tensor_slices((train_images, train_labels)).shuffle(buffer_size=64).batch(32)\ntest_ds = tf.data.Dataset.from_tensor_slices((test_images, test_labels)).shuffle(buffer_size=64).batch(32)","ff57f431":"for i,l in train_ds.take(1):\n    show_img_bbox(i[0], l[0])\n    show_img_bbox(i[2], l[2])","8bf8a056":"# tf.data.Dataset","2d1c4d9c":"# Data\nThe `license.csv` file consists of the following fields:\n* image_name: The path where the image is downloaded; str\n* top_x: The % value of the topx bbox point; float\n* top_y: The % value of the topy bbox point; float\n* bottom_x: The % value of the bottomx bbox point; float\n* bottom_y: The % value of the bottomy bbox point; float","85ecda77":"# Image Utils\nThe load img function will read the file, decode it and then resize the file. The user can change the parameters according to their own needs.","adb6c1ad":"This dataset can be used a beginner's step to object detection. For this purpose, I have also included a util function that can help visualize the image and the b-box of the license plates.","b94512bd":"# Imports\nThe following packages are used:\n1. pandas\n2. tensorflow\n3. cv2\n4. matplotlib","93583f32":"This snippet is used to concatenate the images and the labels. This is useful as the concatenated tensors will be used to device a `tf.data.Dataset` later."}}