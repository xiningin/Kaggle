{"cell_type":{"4bc3a58e":"code","062770b1":"code","3aa409aa":"code","75ee3e64":"code","8e241307":"code","fa9ce9b8":"code","211dca97":"code","8100ffe8":"code","f47b723c":"code","866d48c6":"code","85d26f9f":"code","75a2beda":"code","e16b8c54":"code","e490db07":"code","b1c31209":"code","9aaf5ce6":"code","0787dc6d":"code","b2041061":"markdown","58f03dde":"markdown","61082b6e":"markdown","e92e825f":"markdown","131ee38f":"markdown","5e30204c":"markdown","730a5bf9":"markdown"},"source":{"4bc3a58e":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier","062770b1":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","3aa409aa":"data","75ee3e64":"data.info()","8e241307":"numeric_features = ['age', 'sex', 'trestbps', 'chol', 'thalach', 'oldpeak', 'slope', 'ca']\n\neda_df = data.loc[:, numeric_features].copy()","fa9ce9b8":"plt.figure(figsize=(16, 10))\n\nfor i in range(len(eda_df.columns)):\n    plt.subplot(2, 4, i + 1)\n    sns.boxplot(eda_df[eda_df.columns[i]])\n\nplt.show()","211dca97":"corr = eda_df.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako')\nplt.title(\"Correlation Heatmap\")\nplt.show()","8100ffe8":"plt.figure(figsize=(8, 8))\nplt.pie(data['target'].value_counts(), labels=[\"Heart Disease\", \"No Heart Disease\"], autopct='%.1f%%', colors=['#36a2ac', '#413f80'])\nplt.title(\"Class Distribution\")\nplt.show()","f47b723c":"def onehot_encode(df, column_dict):\n    df = df.copy()\n    for column, prefix in column_dict.items():\n        dummies = pd.get_dummies(df[column], prefix=prefix)\n        df = pd.concat([df, dummies], axis=1)\n        df = df.drop(column, axis=1)\n    return df","866d48c6":"def preprocess_inputs(df, scaler):\n    df = df.copy()\n    \n    # One-hot encode the nominal features\n    nominal_features = ['cp', 'slope', 'thal']\n    df = onehot_encode(df, dict(zip(nominal_features, ['CP', 'SL', 'TH'])))\n    \n    # Split df into X and y\n    y = df['target'].copy()\n    X = df.drop('target', axis=1).copy()\n    \n    # Scale X\n    X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n    \n    return X, y","85d26f9f":"X, y = preprocess_inputs(data, RobustScaler())","75a2beda":"X","e16b8c54":"y","e490db07":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)","b1c31209":"lr_model = LogisticRegression()\nlr_model.fit(X_train, y_train)\n\nprint(\"Logistic Regression Accuracy: {:.2f}%\".format(lr_model.score(X_test, y_test) * 100))","9aaf5ce6":"svm_model = SVC()\nsvm_model.fit(X_train, y_train)\n\nprint(\"Support Vector Machine Accuracy: {:.2f}%\".format(svm_model.score(X_test, y_test) * 100))","0787dc6d":"nn_model = MLPClassifier()\nnn_model.fit(X_train, y_train)\n\nprint(\"Neural Network Accuracy: {:.2f}%\".format(nn_model.score(X_test, y_test) * 100))","b2041061":"# Getting Started","58f03dde":"# Training","61082b6e":"# EDA  \n  \nLet's get some boxplots for each numeric variable and a correlation heatmap for the dataset.","e92e825f":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/Bu0LoTZDgis","131ee38f":"# Preprocessing","5e30204c":"# Task for Today  \n\n***\n\n## Heart Disease Prediction  \n\nGiven *medical patient data*, let's try to predict if a given patient will have **heart disease**.  \n  \nWe will use logistic regression, support vector machine, and neural network models to make our predictions.","730a5bf9":"We can also visualize the class distribution with a pie chart."}}