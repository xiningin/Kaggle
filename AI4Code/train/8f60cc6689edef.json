{"cell_type":{"a2684ccf":"code","40d3d2e1":"code","2d211053":"code","cf9df225":"code","d04296c3":"code","3424a6c2":"code","46f4f7f7":"code","19c71c02":"code","005af1d9":"code","fd18bfce":"code","4a780a38":"code","7edd16a3":"code","301085e5":"markdown"},"source":{"a2684ccf":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","40d3d2e1":"data = pd.read_csv(\"..\/input\/news-popularity-ml-thon-2021\/news_train.csv\")\ntest = pd.read_csv(\"..\/input\/news-popularity-ml-thon-2021\/news_test.csv\")\n\ndata.head()","2d211053":"# Handling Missing Values\n\ndata = data.fillna(data.median())\ntest = test.fillna(test.median())\n\nobject_cols = ['weekday', 'data_channel', 'is_weekend']\n\nprint(\"Categorical variables:\")\nprint(object_cols)\n\ndata = pd.get_dummies(data, columns = object_cols)\ntest = pd.get_dummies(test, columns = object_cols)","cf9df225":"# new_data = pd.DataFrame()\n# imp_labels = [\"row_id\", \"num_imgs_vid\", \"global_subjectivity\", \"average_token_length\", \"n_tokens_title\", \"n_tokens_content\", \"self_reference_max-min_shares\", \"num_external_hrefs\", \"net_rate_positive_words\", \"max_net_positive_polarity\", \"min_net_positive_polarity\", \"avg_net_positive_polarity\", \"hasimgvid\", \"haslink\"]\n\n# data[\"num_imgs_vid\"] = data[\"num_imgs\"] + data[\"num_videos\"]\n\n# data[\"self_reference_max-min_shares\"] = data[\"self_reference_max_shares\"] - data[\"self_reference_min_shares\"]\n# data[\"num_external_hrefs\"] = data[\"num_hrefs\"] - data[\"num_self_hrefs\"]\n\n# data[\"net_rate_positive_words\"] = data[\"rate_positive_words\"] - data[\"rate_negative_words\"]\n\n# data[\"max_net_positive_polarity\"] = data[\"max_positive_polarity\"] - data[\"max_negative_polarity\"]\n# data[\"min_net_positive_polarity\"] = data[\"min_positive_polarity\"] - data[\"min_negative_polarity\"]\n# data[\"avg_net_positive_polarity\"] = data[\"avg_positive_polarity\"] - data[\"avg_negative_polarity\"]\n# data['hasimgvid'] = data['num_imgs_vid'].apply(lambda x: 1 if x > 0 else 0)\n# data['haslink'] = data['num_hrefs'].apply(lambda x: 1 if x > 0 else 0)\n\n# # new_data = data[imp_labels + [\"shares\"]]#\n\n# print(np.shape(data))\n# data.head()","d04296c3":"# new_test = pd.DataFrame()\n\n# test[\"num_imgs_vid\"] = test[\"num_imgs\"] + test[\"num_videos\"]\n\n# test[\"self_reference_max-min_shares\"] = test[\"self_reference_max_shares\"] - test[\"self_reference_min_shares\"]\n# test[\"num_external_hrefs\"] = test[\"num_hrefs\"] - test[\"num_self_hrefs\"]\n\n# test[\"net_rate_positive_words\"] = test[\"rate_positive_words\"] - test[\"rate_negative_words\"]\n\n# test[\"max_net_positive_polarity\"] = test[\"max_positive_polarity\"] - test[\"max_negative_polarity\"]\n# test[\"min_net_positive_polarity\"] = test[\"min_positive_polarity\"] - test[\"min_negative_polarity\"]\n# test[\"avg_net_positive_polarity\"] = test[\"avg_positive_polarity\"] - test[\"avg_negative_polarity\"]\n# test['hasimgvid'] = test['num_imgs_vid'].apply(lambda x: 1 if x > 0 else 0)\n# test['haslink'] = test['num_hrefs'].apply(lambda x: 1 if x > 0 else 0)\n\n# # new_test = test[imp_labels]\n\n# print(np.shape(test))\n# test.head()\n","3424a6c2":"# Handling outliers\nfrom scipy import stats\n\nnew_data = data[(np.abs(stats.zscore(data)) < 4).all(axis=1)]\nnew_data = new_data.reset_index(drop=True)\n\nnew_data","46f4f7f7":"from sklearn.feature_selection import chi2, mutual_info_regression\nfrom sklearn.feature_selection import SelectKBest\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate, KFold\n\nfrom sklearn.preprocessing import RobustScaler\n\ny_orig = new_data['shares']\ny = y_orig.values.reshape(-1, 1)\nX = new_data.drop(['shares', 'row_id'], axis=1)\n\n# selector = SelectKBest(mutual_info_regression, k=20)\n# X_new = selector.fit_transform(X, y_orig)\n\n# new_features = selector.get_support(indices=True)\n# print(new_features)\n\ntransformer = RobustScaler().fit(X)\nX_new = transformer.transform(X)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_new, y, test_size=0.20, random_state=52)\n\n# The random state variable is just used to set the random seed to a fixed value. Makes results across runs consistent.\n\n","19c71c02":"# !pip install pytorch-tabnet\nfrom pytorch_tabnet.tab_model import TabNetRegressor\n\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error, make_scorer #Metric being used is RMSLE. We can take sqrt after.\n\ndef scorer(y_true, pred):\n    return np.sqrt(mean_squared_error(y_true, pred))\n\nscore = make_scorer(scorer, greater_is_better=False)\n\nregressor = TabNetRegressor()\n\nparams = {\"n_independent\": [1, 2, 3, 4, 5], \n          \"n_shared\": [1, 2, 3, 4, 5], \n          \"n_steps\": [3, 4, 5, 6, 7],\n          \"lambda_sparse\": [0.001, 0.0005, 0.005]}\n\nreg = RandomizedSearchCV(regressor, params, cv=10, n_iter=10, verbose=4, return_train_score=True, scoring=score)\nrnd_search = reg.fit(X_train, y_train, eval_set = [(X_valid, y_valid)], eval_metric = [\"rmsle\"], max_epochs=200, patience=20)\nprint(rnd_search.best_params_)\nprint(rnd_search.best_score_)\n\n# tb_reg.fit(X_train, y_train, patience=30, max_epochs=300, eval_set = [(X_valid, y_valid)], eval_metric = [\"rmsle\"])\nregressor = rnd_search.best_estimator_\n\n\n# regressor = TabNetRegressor(verbose=3,seed=42, n_steps=6, n_shared=5, n_independent=2, lambda_sparse=0.001, n_d=6, n_a=6)\n# regressor.fit(X_train, y_train, patience=0, max_epochs=100, eval_set = [(X_valid, y_valid)], eval_metric = [\"rmsle\"])\n","005af1d9":"from sklearn.metrics import mean_squared_log_error#, make_scorer #Metric being used is RMSLE. We can take sqrt after.\n\n# # def scorer(y_true, pred):\n# #     return np.sqrt(mean_squared_log_error(y_true, pred))\n\n# # score = make_scorer(scorer, greater_is_better=False)\n\n# # cv_results = cross_validate(tb, X, y, scoring = score, cv = 5, return_train_score = True, n_jobs = -1)\n# # print(cv_results)\n\n# X_train, X_valid, y_train, y_valid = train_test_split(X_new, y, test_size=0.20, random_state=52)\n# print(X_train.shape)\n\n# Train\npredictions = regressor.predict(X_train)\nprint(\"Train RMSLE\")\nprint(np.sqrt(mean_squared_log_error(y_train, predictions)))\n\n# Valid\npredictions = regressor.predict(X_valid)\nprint(\"VALID RMSLE\")\nprint(np.sqrt(mean_squared_log_error(y_valid, predictions)))","fd18bfce":"# print(test.drop(['row_id'], axis=1).head())\ntemp = np.array(test.drop(['row_id'], axis=1))#[:, new_features]\nprint(temp.shape)\n\nfinal_predictions = regressor.predict(transformer.transform(temp))\nsub = pd.DataFrame()\nsub['row_id'] = test['row_id']\nsub['shares'] = final_predictions\nsub","4a780a38":"sub.to_csv('.\/tabnet_submission5.csv', index=False)","7edd16a3":"explain_matrix, masks = regressor.explain(X_valid)\nfig, axs = plt.subplots(1, 5, figsize=(20,20))\n\nfor i in range(5):\n    axs[i].imshow(masks[i][:50])\n    axs[i].set_title(f\"mask {i}\")","301085e5":"<a style='text-decoration:none;line-height:16px;display:flex;color:#5B5B62;padding:10px;justify-content:end;' href='https:\/\/deepnote.com?utm_source=created-in-deepnote-cell&projectId=2bf1c66b-21f1-428e-af8e-e1bc518ae2bb' target=\"_blank\">\n<img alt='Created in deepnote.com' style='display:inline;max-height:16px;margin:0px;margin-right:7.5px;' src='data:image\/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iODBweCIgaGVpZ2h0PSI4MHB4IiB2aWV3Qm94PSIwIDAgODAgODAiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CiAgICA8IS0tIEdlbmVyYXRvcjogU2tldGNoIDU0LjEgKDc2NDkwKSAtIGh0dHBzOi8vc2tldGNoYXBwLmNvbSAtLT4KICAgIDx0aXRsZT5Hcm91cCAzPC90aXRsZT4KICAgIDxkZXNjPkNyZWF0ZWQgd2l0aCBTa2V0Y2guPC9kZXNjPgogICAgPGcgaWQ9IkxhbmRpbmciIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPgogICAgICAgIDxnIGlkPSJBcnRib2FyZCIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTEyMzUuMDAwMDAwLCAtNzkuMDAwMDAwKSI+CiAgICAgICAgICAgIDxnIGlkPSJHcm91cC0zIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgxMjM1LjAwMDAwMCwgNzkuMDAwMDAwKSI+CiAgICAgICAgICAgICAgICA8cG9seWdvbiBpZD0iUGF0aC0yMCIgZmlsbD0iIzAyNjVCNCIgcG9pbnRzPSIyLjM3NjIzNzYyIDgwIDM4LjA0NzY2NjcgODAgNTcuODIxNzgyMiA3My44MDU3NTkyIDU3LjgyMTc4MjIgMzIuNzU5MjczOSAzOS4xNDAyMjc4IDMxLjY4MzE2ODMiPjwvcG9seWdvbj4KICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik0zNS4wMDc3MTgsODAgQzQyLjkwNjIwMDcsNzYuNDU0OTM1OCA0Ny41NjQ5MTY3LDcxLjU0MjI2NzEgNDguOTgzODY2LDY1LjI2MTk5MzkgQzUxLjExMjI4OTksNTUuODQxNTg0MiA0MS42NzcxNzk1LDQ5LjIxMjIyODQgMjUuNjIzOTg0Niw0OS4yMTIyMjg0IEMyNS40ODQ5Mjg5LDQ5LjEyNjg0NDggMjkuODI2MTI5Niw0My4yODM4MjQ4IDM4LjY0NzU4NjksMzEuNjgzMTY4MyBMNzIuODcxMjg3MSwzMi41NTQ0MjUgTDY1LjI4MDk3Myw2Ny42NzYzNDIxIEw1MS4xMTIyODk5LDc3LjM3NjE0NCBMMzUuMDA3NzE4LDgwIFoiIGlkPSJQYXRoLTIyIiBmaWxsPSIjMDAyODY4Ij48L3BhdGg+CiAgICAgICAgICAgICAgICA8cGF0aCBkPSJNMCwzNy43MzA0NDA1IEwyNy4xMTQ1MzcsMC4yNTcxMTE0MzYgQzYyLjM3MTUxMjMsLTEuOTkwNzE3MDEgODAsMTAuNTAwMzkyNyA4MCwzNy43MzA0NDA1IEM4MCw2NC45NjA0ODgyIDY0Ljc3NjUwMzgsNzkuMDUwMzQxNCAzNC4zMjk1MTEzLDgwIEM0Ny4wNTUzNDg5LDc3LjU2NzA4MDggNTMuNDE4MjY3Nyw3MC4zMTM2MTAzIDUzLjQxODI2NzcsNTguMjM5NTg4NSBDNTMuNDE4MjY3Nyw0MC4xMjg1NTU3IDM2LjMwMzk1NDQsMzcuNzMwNDQwNSAyNS4yMjc0MTcsMzcuNzMwNDQwNSBDMTcuODQzMDU4NiwzNy43MzA0NDA1IDkuNDMzOTE5NjYsMzcuNzMwNDQwNSAwLDM3LjczMDQ0MDUgWiIgaWQ9IlBhdGgtMTkiIGZpbGw9IiMzNzkzRUYiPjwvcGF0aD4KICAgICAgICAgICAgPC9nPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+' > <\/img>\nCreated in <span style='font-weight:600;margin-left:4px;'>Deepnote<\/span><\/a>"}}