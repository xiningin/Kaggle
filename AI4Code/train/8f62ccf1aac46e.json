{"cell_type":{"b87b1f2b":"code","93f7e58c":"code","7fa26b4c":"code","875790be":"code","51b0aaa1":"code","91130e42":"code","4d2dcb50":"code","a6b85224":"code","81740c86":"code","7e92c0d2":"markdown","5cf2cbd9":"markdown","22d61dac":"markdown","48be0870":"markdown","d99b6444":"markdown","b9bd1d72":"markdown","fd30ea5c":"markdown","1abae982":"markdown","0bcde424":"markdown","7f5d48e3":"markdown","d26f6153":"markdown","8ca125b8":"markdown","3932267a":"markdown","b9ce5591":"markdown"},"source":{"b87b1f2b":"import tensorflow as tf\nimport pandas as pd \nfrom keras.utils import to_categorical\nimport random\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Conv2D, MaxPooling2D, Dropout, Activation, BatchNormalization\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.applications.inception_v3 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img, array_to_img, img_to_array\nfrom tensorflow.keras.models import Sequential\nfrom glob import glob","93f7e58c":"# Define Constants\nFAST_RUN = False\nIMAGE_WIDTH=160\nIMAGE_HEIGHT=160\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","7fa26b4c":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1, rotation_range=15)\n\ntraining_set = train_datagen.flow_from_directory('..\/input\/cat-and-dog\/training_set\/training_set',\n                                                 target_size = (IMAGE_WIDTH, IMAGE_HEIGHT),\n                                                 batch_size = 32,\n                                                 class_mode = 'binary')","875790be":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/cat-and-dog\/test_set\/test_set',\n                                            target_size = (IMAGE_WIDTH, IMAGE_HEIGHT),\n                                            batch_size = 32,\n                                            class_mode = 'binary',shuffle=False)","51b0aaa1":"model = tf.keras.models.Sequential()\n\n#Convolutional Layer 1\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(IMAGE_WIDTH, \n   IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=2))\nmodel.add(Dropout(0.3))\n\n#Convolutional Layer 2\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2), strides=2))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\nmodel.summary()","91130e42":"#Callbacks\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n#To prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased\nearlystop = EarlyStopping(patience=10)\n\n#Learning Rate Reduction\n#We will reduce the learning rate when then accuracy not increase for 2 steps\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\ncallbacks = [earlystop, learning_rate_reduction]","4d2dcb50":"epochs=3 if FAST_RUN else 50\n\ncnn = model.fit(\n    x = training_set, validation_data = test_set, \n    epochs=epochs,\n    callbacks=callbacks)","a6b85224":"# Plot the Loss Function\nplt.plot(cnn.history['loss'], label='train loss')\nplt.plot(cnn.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\n\n# Plot the Accuracy\nplt.plot(cnn.history['accuracy'], label='train acc')\nplt.plot(cnn.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()","81740c86":"import numpy as np\nfrom keras.preprocessing import image\ntest_image = image.load_img('..\/input\/testing-cat-or-dog\/cat or dog 1.jpg', \n                            target_size = (IMAGE_WIDTH, IMAGE_HEIGHT))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = model.predict(test_image)\ntraining_set.class_indices\nif result[0][0] == 1:\n  prediction = 'dog'\nelse:\n  prediction = 'cat'\n\nprint(prediction)","7e92c0d2":"#### Training Generator","5cf2cbd9":"**This CNN model which I have developed is providing me with accurate results on Prediction.**","22d61dac":"## Visualize the model training by plotting Loss Function and Accuracy","48be0870":"**'..\/input\/testing-cat-or-dog\/cat or dog 1.jpg' is a Dog's image**\n\n**'..\/input\/testing-cat-or-dog\/cat or dog 2.jpg' is a Cat's image**\n","d99b6444":"## In this notebook, I have made an attempt to develop a CNN model using Keras and Tensorflow library to classify whether an image contain a dog or a cat . The dataset for this notebook was taken from Kaggle.","b9bd1d72":"Dataset Link:https:\/\/www.kaggle.com\/tongpython\/cat-and-dog \n\nPrediction Testing Link:https:\/\/www.kaggle.com\/max22112019\/testing-cat-or-dog","fd30ea5c":"Testing Generator","1abae982":"## Fit the Model","0bcde424":"# **CATS vs DOGS CLASSIFICATION (KAGGLE DATASET)**","7f5d48e3":"Apart from a few anomalous peaks in loss and accuracy plots of training and test dataset, it is observed that a trend is being followed. So, upto an extent this simple model will easily differentiate between the images of a cat and a dog.","d26f6153":"## Building the CNN Model","8ca125b8":"## Importing the Dataset and Data Preprocessing","3932267a":"## Importing the Libraries","b9ce5591":"## Model Prediction on images not found in train and test catalog"}}