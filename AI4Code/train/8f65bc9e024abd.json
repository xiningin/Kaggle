{"cell_type":{"5558b987":"code","3b6eb6a2":"code","f56ddc73":"code","dcf79838":"code","c909a80f":"code","687a0fc2":"code","de2df205":"code","a0a2b389":"markdown","bf427bcf":"markdown","6cb57fcc":"markdown","66c4d52e":"markdown","1c23ddde":"markdown","ebedb975":"markdown"},"source":{"5558b987":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nimport cvxpy as cvx\nimport networkx as nx\nimport community\nfrom community import community_louvain\nfrom community.community_louvain import best_partition\n\nplt.style.use('fivethirtyeight')\nplt.rcParams['axes.labelweight'] = 'bold'\nplt.rcParams['axes.titleweight'] = 'bold'\nplt.rcParams['figure.titleweight'] = 'bold' \n\ndf=pd.read_csv('..\/input\/israeli_elections_results_1996_to_2015.csv',encoding='iso-8859-1')","3b6eb6a2":"def read_and_prepare_data(df,election_year):\n    \n    votes=df[df['year']==int(election_year)]\n    votes=votes.drop(columns='year')\n    votes=votes.drop(votes.columns[range(3,8)],axis=1)\n    votes=votes.drop(votes.columns[range(0,2)],axis=1)\n    votes=votes.drop(votes.columns[votes.sum()==0],axis=1) #clearing empty columns\n    votes=votes[np.sort(votes.columns)]\n    votes=(votes[(votes.sum(axis=1)>0)]) #clearing empty rows\n    votes=votes.add_suffix(election_year)            \n    return votes\n\ndef load_and_join_data(df,x_label,y_label):\n    x_data=read_and_prepare_data(df,x_label)\n    y_data=read_and_prepare_data(df,y_label)\n    x_data=x_data.groupby('settlement_name_english'+x_label).sum()\n    y_data=y_data.groupby('settlement_name_english'+y_label).sum()\n    M=x_data.shape[1]\n    data_joint=pd.merge(x_data,y_data, how='inner', left_index=True, right_index=True)\n    x_data=data_joint[data_joint.columns[range(0,M)]]\n    y_data=data_joint[data_joint.columns[M:]]\n    x_data=x_data.div(x_data.sum(axis=1),axis=0)\n    x_data=x_data.mul(y_data.sum(axis=1),axis=0)\n    return x_data,y_data","f56ddc73":"def major_parties(votes,threshold,election_year,verbose):\n    if 'settlement_name_english'+election_year in votes.columns:\n        votes=votes.drop('settlement_name_english'+election_year,axis=1)\n    party_is_major=(votes.sum(axis=0)\/sum(votes.sum(axis=0)))>threshold\n    major_party_votes=np.sum(votes.values[:,party_is_major],axis=0)\n    votes_in_major_parties=np.int(100*np.round(np.sum(major_party_votes)\/np.sum(votes.values),2))\n    if verbose:\n        print(str(votes_in_major_parties)+'% of the '+election_year+' votes are in major parties')\n    major_party_votes=major_party_votes\/sum(major_party_votes) #rescaling to ignore dropped data\n    major_party_titles=[party_is_major.index.values[party_is_major==True][n][:-4] for n in range(0,sum(party_is_major))]\n    return party_is_major,major_party_votes, major_party_titles","dcf79838":"def correlation_communities(votes, party_threshold, link_threshold, community_colors):\n    \n    votes=votes.select_dtypes(include=[np.number])\n    relative_votes=votes.div(votes.sum(axis=1), axis=0)\n    party_titles=relative_votes.columns.values\n    party_is_major=((votes.sum(axis=0)\/sum(votes.sum(axis=0)))>party_threshold)\n    major_parties=party_titles[party_is_major]\n    relative_votes=relative_votes[major_parties]\n    \n    C=np.corrcoef(relative_votes,rowvar=0)\n    A=1*(C>link_threshold)\n    G=nx.Graph(A)\n    G=nx.relabel_nodes(G,dict(zip(G.nodes(),major_parties)))\n    communities=best_partition(G)\n    node_coloring=[community_colors[communities[node]] for node in sorted(G.nodes())]\n    return communities,node_coloring","c909a80f":"def solve_transfer_coefficients(x_data,y_data,alt_scale,verbose):\n    C=cvx.Variable([x_data.shape[1],y_data.shape[1]])\n    constraints=[0<=C, C<=1, cvx.sum(C,axis=1)==1]\n    \n    objective=cvx.Minimize(cvx.sum_squares((x_data.values*C)-y_data.values))\n    prob=cvx.Problem(objective, constraints)\n    prob.solve(solver='ECOS')\n    if verbose:\n        print (prob.status)\n    if (prob.status!='optimal') and (prob.status!='optimal_inaccurate'): #Just a numeric thing, to rescale the objective function for the computation to succeed\n        objective=cvx.Minimize(alt_scale*cvx.sum_squares((x_data.values*C)-y_data.values))\n        prob=cvx.Problem(objective, constraints)\n        prob.solve()\n        if verbose:\n            print(prob.status+'(with alt_scale)')\n    C_mat=C.value\n\n    if verbose:\n        print(C_mat.min()) #should be above 0\n        print(C_mat.max()) #should be below 1\n        print(C_mat.sum(axis=1).min()) #should be close to 1\n        print(C_mat.sum(axis=1).max()) #should be close to 1\n    \n    if verbose:\n        misplaced_votes=np.sum(np.abs(np.matmul(x_data.values,C_mat)-y_data.values))\n        properly_placed_votes=np.int(100*np.round(1-misplaced_votes\/np.sum(y_data.values),2))\n        print('Transfer model properly account for '+str(properly_placed_votes)+'% of the votes on the local level') #this counts the overall error per settlement\n    \n    return C_mat","687a0fc2":"election_labels=['1996', '1999', '2003', '2006', '2009', '2013', '2015']\nparty_threshold=0.019\nlink_threshold=0.01\ntransfer_threshold=0.005\nalt_scale=1e-3\n\ncommunity_colors={0:'black',1:'red',2:'blue',3:'green',4:'brown'}\ncommunity_colorses={'1996': community_colors}\ncommunity_colorses['1999']={0: 'black', 1:'red', 2:'blue', 3:'green'}\ncommunity_colorses['1996']=community_colors\ncommunity_colorses['2003']=community_colors\ncommunity_colorses['2006']=community_colors\ncommunity_colorses['2009']=community_colors\ncommunity_colorses['2013']=community_colors\ncommunity_colorses['2015']={0: 'black', 1:'blue', 2:'red', 3:'green', 4:'brown'}\n\n\ndata_trace = dict(\n    type='sankey',\n    orientation = \"v\",\n    node = dict(\n        pad = 15,\n        thickness = 20,\n        line = dict(\n            color = \"black\",\n            width = 0.5\n        ),\n        label=[],\n        color=[]\n    ),\n    link = dict(\n        source=[],\n        target=[],\n        value=[]\n    )\n)\n\nlayout =  dict(\n    title = \"Basic Sankey Diagram\",\n    width = 1180,\n    height = 1544,\n    font = dict(\n        size = 14\n    )\n)\n\nfor election_index in range(0,len(election_labels)-1):\n    x_label=election_labels[election_index]\n    y_label=election_labels[election_index+1]\n    [x_data,y_data]=load_and_join_data(df,x_label, y_label)\n    [major_x,major_party_votes_x,major_party_titles_x]=major_parties(x_data,party_threshold,election_year=x_label,verbose=False)\n    major_party_titles_x=[party+'_'+x_label for party in major_party_titles_x]\n    [major_y,major_party_votes_y,major_party_titles_y]=major_parties(y_data,party_threshold,election_year=y_label,verbose=False)\n    major_party_titles_y=[party+'_'+y_label for party in major_party_titles_y]\n\n    [comms_x,colors_x]=correlation_communities(x_data,party_threshold=party_threshold, link_threshold=link_threshold, community_colors=community_colorses[x_label])\n    [comms_y,colors_y]=correlation_communities(y_data,party_threshold=party_threshold, link_threshold=link_threshold, community_colors=community_colorses[y_label])\n    \n    C_mat=solve_transfer_coefficients(x_data[x_data.columns[major_x]],y_data[y_data.columns[major_y]],alt_scale,verbose=False)\n    vote_transfers=np.matmul(np.diag(major_party_votes_x),C_mat)\n    links=np.where(vote_transfers>transfer_threshold)\n\n    major_parties_error=np.sum(np.abs(np.matmul(major_party_votes_x,C_mat)-major_party_votes_y))\n    major_parties_correct_votes=np.int(100*np.round(1-major_parties_error,2))\n    print('Transfer model properly accounts for '+str(major_parties_correct_votes)+'% of the votes for on a national level '+'from '+str(x_label)+' to '+str(y_label))\n    \n    data_trace['node']['color']=data_trace['node']['color']+colors_x #at the end we need to add the last election\n    data_trace['node']['label']=data_trace['node']['label']+major_party_titles_x\n    \n    if y_label==election_labels[-1]:\n        data_trace['node']['color']=data_trace['node']['color']+colors_y\n        data_trace['node']['label']=data_trace['node']['label']+major_party_titles_y\n    \n    if len(data_trace['link']['source'])==0:\n        data_trace['link']['source']=links[0]\n    else:\n        data_trace['link']['source']=np.append(data_trace['link']['source'],links[0]+np.round(np.max(data_trace['link']['source']))+1)\n    data_trace['link']['target']=np.append(data_trace['link']['target'],links[1]+np.round(np.max(data_trace['link']['source']))+1)    \n    data_trace['link']['value']=np.append(data_trace['link']['value'],vote_transfers[links[0],links[1]])","de2df205":"fig = dict(data=[data_trace], layout=layout)\niplot(fig,validate=False)","a0a2b389":"# Solving the vote flow model\nIn the heart of this analysis is a very simple model:\nFor every two consecutive election cycles, we build a simple linear model, in which every voter for party i in the former cycle has a probability p_ij to vote for party j in the latter cycle.\nWe solve this model with simple constraints (0=<p_ij=<1, \\sigma_j p_ij=1, etc. )\nThis model gives us the vote flow: \n    For example, If party i recieved 10% of the votes in the t-th election, party j recieved 5% of the votes in the t+1-th election, and p_ij =30%, then 3% of the votes for party j were at the expense of party i.\n    The other 2% are from other parties - including possibly party j itself, if it was present at the t-th election.","bf427bcf":"# Keeping only major parties\nDropping all parties below a given threshold, and accounting for how much data is lost.","6cb57fcc":"# Results and Conclusions\n\n## Community Partitioning\n(Going into depth into the 2015 elections in [this Kernel](http:\/\/https:\/\/www.kaggle.com\/itamarmushkin\/partitioning-the-parties))  \nAs we can see, the community partitioning is mostly consistent between years, even if not entirely so.  \nThe parties are always partitioned into Arab parties (black), \"Left\"\/\"Center-Left\" (red), and \"Right\" (blue). Interestingly, the Socialist \"One Nation\" party, led by a Jewish union leader, is consistently classified as an Arab party (i.e same community as distinctly Arab parties).  \nThe right is sometimes divided between \"secular Right\" (Likud etc., in blue) and \"Religious right\" (Shas etc. in green), up to a few abberations (\"The Jewish Home\" is its own community in 2015, and so is Yisrael Beitenu in 2009). \n\n## Shifts in Votes\n(going in depth into the 2013 and 2015 elections in [this Kernel](http:\/\/https:\/\/www.kaggle.com\/itamarmushkin\/shift-in-votes-from-2013-to-2015))\n\nVisibly, **most votes shift are between parties in the same community**.  \nIt is most evident with the Arab parties, where no votes shift from any of the Jewish party communities to or from it. Similarly, United Torah Judaism (an Ultra-Orthodox party) seems almost entirely disjoint from the rest of the parties.  \nIt it also a **trend that intensifies** - we see less and less shifts between red and blue parties over the years. When we do, it's through parties which are considered \"centrist\" (Third Way, Center Party, Kulanu - etc).\n\nMany of the votes shift simply refer to forlmal merging and splitting of parties (e.g. Likud Beitenu = Likud + Yisrael Beitenu, or Zionist Union = Labour Party + Hatnuta).  \nHowever, in the \"Center-Left\", we see examples of new parties overtaking old ones, which are indistinguishable from formal merging\/splitting - but are not!  \nFor example, looking at Kadima (2009), we see that both Yesh Atid (2013) and Hatnua (2013) look like formal splits from it - but Hatnua really is, while Yesh Atis really isn't!","66c4d52e":"# Preprocessing Functions:\nSelecting two election rounds (by year), \nkeeping only settlements that appeared in both years,\ndropping empty rows and columns,\nand accounting for relative change in settlement sizes (i.e population growth)..","1c23ddde":"# Partitioning the parties into communities\nHere we partition the parties into communities (similar to ([this previous kernel](http:\/\/www.kaggle.com\/itamarmushkin\/partitioning-the-parties))),  in order to color parties by community.","ebedb975":"# Calculation (and plot generation)\n\nThresholds were chosen to keep relevant parties and relations, while keeping the figure relatively clear.\n\nThe community partition is generated automatically, but to keep the coloring somewhat coherent between years, I've chosen the coloring manually.\n\nThe plot is interactive - you can move the parties around. I've sorted them according to community, just for visibility's sake."}}