{"cell_type":{"052739f6":"code","7a67f011":"code","4e2339ec":"code","f1424a0e":"code","69f7fa04":"code","1c8a4f06":"code","a8f1cf0f":"code","191354a5":"code","abd4c63f":"code","7f5a25fa":"code","2f5b35f4":"code","d3be0a04":"code","b25ac6fb":"code","3d81c034":"code","0b800e94":"code","f6566940":"code","d1a80c6a":"code","053ba6f8":"code","de31bd59":"code","e4ac6ee1":"code","6fa5974f":"code","18b9d580":"code","4dd75d9d":"code","de205631":"code","0b250fdf":"code","dcf62d54":"code","7d0a46e2":"markdown","c14728f9":"markdown","6cc80d55":"markdown","b376a025":"markdown","5c7ad44e":"markdown","d1e79feb":"markdown","29b28546":"markdown","01a7b24e":"markdown","f4e61fea":"markdown","10de71a9":"markdown","82e802d8":"markdown","34e4144e":"markdown"},"source":{"052739f6":"import os\nimport re\nimport math\nimport warnings\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\n\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nprint(tf.__version__)","7a67f011":"def seed_everything(seed=0):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n    \nsns.set()\nSEED = 17\nseed_everything(SEED)\nwarnings.filterwarnings(\"ignore\")","4e2339ec":"# TPU or GPU detection\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","f1424a0e":"HEIGHT, WIDTH = (512, 512)\nCHANNELS = 3\nN_CLASSES = 104\n\n#Get datatset from google cloud services\nGCS_PATH = KaggleDatasets().get_gcs_path('tpu-getting-started') + '\/tfrecords-jpeg-%sx%s' % (HEIGHT, WIDTH)\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/val\/*.tfrec')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrec')\n\nCLASSES = [\n    'pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea', \n    'wild geranium', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', \n    'globe thistle', 'snapdragon', \"colt's foot\", 'king protea', 'spear thistle', \n    'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily', \n    'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower', \n    'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy', \n    'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william', \n    'carnation', 'garden phlox', 'love in the mist', 'cosmos',  'alpine sea holly', \n    'ruby-lipped cattleya', 'cape flower', 'great masterwort',  'siam tulip', \n    'lenten rose', 'barberton daisy', 'daffodil',  'sword lily', 'poinsettia', \n    'bolero deep blue',  'wallflower', 'marigold', 'buttercup', 'daisy', \n    'common dandelion', 'petunia', 'wild pansy', 'primula',  'sunflower', \n    'lilac hibiscus', 'bishop of llandaff', 'gaura',  'geranium', 'orange dahlia', \n    'pink-yellow dahlia', 'cautleya spicata',  'japanese anemone', 'black-eyed susan', \n    'silverbush', 'californian poppy',  'osteospermum', 'spring crocus', 'iris', \n    'windflower',  'tree poppy', 'gazania', 'azalea', 'water lily',  'rose', \n    'thorn apple', 'morning glory', 'passion flower',  'lotus', 'toad lily', \n    'anthurium', 'frangipani',  'clematis', 'hibiscus', 'columbine', 'desert-rose', \n    'tree mallow', 'magnolia', 'cyclamen ', 'watercress',  'canna lily', \n    'hippeastrum ', 'bee balm', 'pink quill',  'foxglove', 'bougainvillea', \n    'camellia', 'mallow',  'mexican petunia',  'bromelia', 'blanket flower', \n    'trumpet creeper',  'blackberry lily', 'common tulip', 'wild rose']","69f7fa04":"def transform_rotation(image):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly rotated\n    DIM = HEIGHT\n    XDIM = DIM%2 #fix for size 331\n    \n    rotation = 15. * tf.random.normal([1],dtype='float32')\n    # CONVERT DEGREES TO RADIANS\n    rotation = math.pi * rotation \/ 180.\n    \n    # ROTATION MATRIX\n    c1 = tf.math.cos(rotation)\n    s1 = tf.math.sin(rotation)\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    rotation_matrix = tf.reshape( tf.concat([c1,s1,zero, -s1,c1,zero, zero,zero,one],axis=0),[3,3] )\n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(rotation_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])\n\ndef transform_shear(image):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly sheared\n    DIM = HEIGHT\n    XDIM = DIM%2 #fix for size 331\n    \n    shear = 5. * tf.random.normal([1],dtype='float32')\n    shear = math.pi * shear \/ 180.\n        \n    # SHEAR MATRIX\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n    c2 = tf.math.cos(shear)\n    s2 = tf.math.sin(shear)\n    shear_matrix = tf.reshape( tf.concat([one,s2,zero, zero,c2,zero, zero,zero,one],axis=0),[3,3] )    \n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(shear_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])\n\ndef transform_shift(image):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly shifted\n    DIM = HEIGHT\n    XDIM = DIM%2 #fix for size 331\n    \n    height_shift = 16. * tf.random.normal([1],dtype='float32') \n    width_shift = 16. * tf.random.normal([1],dtype='float32') \n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n        \n    # SHIFT MATRIX\n    shift_matrix = tf.reshape( tf.concat([one,zero,height_shift, zero,one,width_shift, zero,zero,one],axis=0),[3,3] )\n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(shift_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])\n\ndef transform_zoom(image):\n    # input image - is one image of size [dim,dim,3] not a batch of [b,dim,dim,3]\n    # output - image randomly zoomed\n    DIM = HEIGHT\n    XDIM = DIM%2 #fix for size 331\n    \n    height_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    width_zoom = 1.0 + tf.random.normal([1],dtype='float32')\/10.\n    one = tf.constant([1],dtype='float32')\n    zero = tf.constant([0],dtype='float32')\n        \n    # ZOOM MATRIX\n    zoom_matrix = tf.reshape( tf.concat([one\/height_zoom,zero,zero, zero,one\/width_zoom,zero, zero,zero,one],axis=0),[3,3] )\n\n    # LIST DESTINATION PIXEL INDICES\n    x = tf.repeat( tf.range(DIM\/\/2,-DIM\/\/2,-1), DIM )\n    y = tf.tile( tf.range(-DIM\/\/2,DIM\/\/2),[DIM] )\n    z = tf.ones([DIM*DIM],dtype='int32')\n    idx = tf.stack( [x,y,z] )\n    \n    # ROTATE DESTINATION PIXELS ONTO ORIGIN PIXELS\n    idx2 = K.dot(zoom_matrix,tf.cast(idx,dtype='float32'))\n    idx2 = K.cast(idx2,dtype='int32')\n    idx2 = K.clip(idx2,-DIM\/\/2+XDIM+1,DIM\/\/2)\n    \n    # FIND ORIGIN PIXEL VALUES \n    idx3 = tf.stack( [DIM\/\/2-idx2[0,], DIM\/\/2-1+idx2[1,]] )\n    d = tf.gather_nd(image, tf.transpose(idx3))\n        \n    return tf.reshape(d,[DIM,DIM,3])","1c8a4f06":"# Datasets utility functions\nAUTO = tf.data.experimental.AUTOTUNE # instructs the API to read from multiple files if available.\n\ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [HEIGHT, WIDTH, 3])\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    p_spatial = tf.random.uniform([1], minval=0, maxval=1, dtype='float32', seed=SEED)\n    p_spatial2 = tf.random.uniform([1], minval=0, maxval=1, dtype='float32', seed=SEED)\n    p_pixel = tf.random.uniform([1], minval=0, maxval=1, dtype='float32', seed=SEED)\n    p_crop = tf.random.uniform([1], minval=0, maxval=1, dtype='float32', seed=SEED)\n    \n    ### Spatial-level transforms\n    if p_spatial >= .2:\n        image = tf.image.random_flip_left_right(image, seed=SEED)\n        image = tf.image.random_flip_up_down(image, seed=SEED)\n        \n    if p_crop >= .7:\n        if p_crop >= .95:\n            image = tf.image.random_crop(image, size=[int(HEIGHT*.6), int(WIDTH*.6), CHANNELS], seed=SEED)\n        elif p_crop >= .85:\n            image = tf.image.random_crop(image, size=[int(HEIGHT*.7), int(WIDTH*.7), CHANNELS], seed=SEED)\n        elif p_crop >= .8:\n            image = tf.image.random_crop(image, size=[int(HEIGHT*.8), int(WIDTH*.8), CHANNELS], seed=SEED)\n        else:\n            image = tf.image.random_crop(image, size=[int(HEIGHT*.9), int(WIDTH*.9), CHANNELS], seed=SEED)\n        image = tf.image.resize(image, size=[HEIGHT, WIDTH])\n\n    if p_spatial2 >= .6:\n        if p_spatial2 >= .9:\n            image = transform_rotation(image)\n        elif p_spatial2 >= .8:\n            image = transform_zoom(image)\n        elif p_spatial2 >= .7:\n            image = transform_shift(image)\n        else:\n            image = transform_shear(image)\n        \n    ## Pixel-level transforms\n    if p_pixel >= .4:\n        if p_pixel >= .85:\n            image = tf.image.random_saturation(image, lower=0, upper=2, seed=SEED)\n        elif p_pixel >= .65:\n            image = tf.image.random_contrast(image, lower=.8, upper=2, seed=SEED)\n        elif p_pixel >= .5:\n            image = tf.image.random_brightness(image, max_delta=.2, seed=SEED)\n        else:\n            image = tf.image.adjust_gamma(image, gamma=.6)\n\n    return image, label\n\ndef get_training_dataset(do_aug=True):\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_train_valid_datasets():\n    dataset = load_dataset(TRAINING_FILENAMES + VALIDATION_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","a8f1cf0f":"# Visualization utility functions\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object: # binary string in this case, these are image ID strings\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    # If no labels, only image IDs, return None for labels (this is the case for test data)\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n\ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()","191354a5":"def display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(15,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title(title)\n    ax.set_ylabel(title.split(\" \")[-1])\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","abd4c63f":"# Count train, val and test data\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\n\nprint('Number of training images %d' % NUM_TRAINING_IMAGES)\nprint('Number of validation images %d' % NUM_VALIDATION_IMAGES)\nprint('Number of test images %d' % NUM_TEST_IMAGES)","7f5a25fa":"BATCH_SIZE = 16 * strategy.num_replicas_in_sync\nall_elements = get_training_dataset().unbatch()\none_element = tf.data.Dataset.from_tensors( next(iter(all_elements)) )\naugmented_element = one_element.repeat().map(data_augment).batch(25)\n\ndisplay_batch_of_images(next(iter(augmented_element)))","2f5b35f4":"def create_model(input_shape, N_CLASSES):\n    \n    base_model = tf.keras.applications.DenseNet201(\n        weights='imagenet', include_top=False, input_shape=input_shape)\n    \n    model = tf.keras.Sequential([\n        base_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(N_CLASSES, activation='softmax')\n    ])\n    \n    return model","d3be0a04":"# Used this implementation https:\/\/www.avanwyk.com\/tensorflow-2-super-convergence-with-the-1cycle-policy\/\n\nfrom tensorflow.keras.callbacks import Callback\n\nclass CosineAnnealer:\n    \n    def __init__(self, start, end, steps):\n        self.start = start\n        self.end = end\n        self.steps = steps\n        self.n = 0\n        \n    def step(self):\n        self.n += 1\n        cos = np.cos(np.pi * (self.n \/ self.steps)) + 1\n        return self.end + (self.start - self.end) \/ 2. * cos\n\n\nclass OneCycleScheduler(Callback):\n    \"\"\" \nCallback that schedules the learning rate on a 1cycle policy as per Leslie Smith's \npaper(https:\/\/arxiv.org\/pdf\/1803.09820.pdf). If the model supports a momentum parameter, it will also be adapted by \nthe schedule. The implementation adopts additional improvements as per the fastai \nlibrary: https:\/\/docs.fast.ai\/callbacks.one_cycle.html, where only two phases are used and the adaptation is done \nusing cosine annealing. \n\nIn phase 1 the LR increases from lr_max \/ div_factor to lr_max and momentum decreases from mom_max to mom_min.\nIn the second phase the LR decreases from lr_max to lr_max \/ (div_factor * 1e4) and momemtum from mom_max to mom_min.\nBy default the phases are not of equal length, with the phase 1 percentage controlled by the parameter phase1_pct.\n\"\"\"\n\n    def __init__(self, lr_max, steps, mom_min=0.85, mom_max=0.95, phase_1_pct=0.3, div_factor=25.):\n        super(OneCycleScheduler, self).__init__()\n        lr_min = lr_max \/ div_factor\n        final_lr = lr_max \/ (div_factor * 1e4)\n        phase_1_steps = steps * phase_1_pct\n        phase_2_steps = steps - phase_1_steps\n        \n        self.phase_1_steps = phase_1_steps\n        self.phase_2_steps = phase_2_steps\n        self.phase = 0\n        self.step = 0\n        \n        self.phases = [[CosineAnnealer(lr_min, lr_max, phase_1_steps), CosineAnnealer(mom_max, mom_min, phase_1_steps)], \n                 [CosineAnnealer(lr_max, final_lr, phase_2_steps), CosineAnnealer(mom_min, mom_max, phase_2_steps)]]\n        \n        self.lrs = []\n        self.moms = []\n\n    def on_train_begin(self, logs=None):\n        self.phase = 0\n        self.step = 0\n\n        self.set_lr(self.lr_schedule().start)\n        self.set_momentum(self.mom_schedule().start)\n        \n    def on_train_batch_begin(self, batch, logs=None):\n        self.lrs.append(self.get_lr())\n        self.moms.append(self.get_momentum())\n\n    def on_train_batch_end(self, batch, logs=None):\n        self.step += 1\n        if self.step >= self.phase_1_steps:\n            self.phase = 1\n            \n        self.set_lr(self.lr_schedule().step())\n        self.set_momentum(self.mom_schedule().step())\n        \n    def get_lr(self):\n        try:\n            return tf.keras.backend.get_value(self.model.optimizer.lr)\n        except AttributeError:\n            return None\n        \n    def get_momentum(self):\n        try:\n            return tf.keras.backend.get_value(self.model.optimizer.momentum)\n        except AttributeError:\n            return None\n        \n    def set_lr(self, lr):\n        try:\n            tf.keras.backend.set_value(self.model.optimizer.lr, lr)\n        except AttributeError:\n            pass # ignore\n        \n    def set_momentum(self, mom):\n        try:\n            tf.keras.backend.set_value(self.model.optimizer.momentum, mom)\n        except AttributeError:\n            pass # ignore\n\n    def lr_schedule(self):\n        return self.phases[self.phase][0]\n    \n    def mom_schedule(self):\n        return self.phases[self.phase][1]\n    \n    def plot(self):\n        ax = plt.subplot(1, 2, 1)\n        ax.plot(self.lrs)\n        ax.set_title('Learning Rate')\n        ax = plt.subplot(1, 2, 2)\n        ax.plot(self.moms)\n        ax.set_title('Momentum')","b25ac6fb":"# Learning rate schedule for TPU, GPU and CPU.\n# Using an LR ramp up because fine-tuning a pre-trained model.\n# Starting with a high LR would break the pre-trained weights.\n\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr","3d81c034":"EPOCHS = 20\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nTRAIN_VALID = False\n\nif TRAIN_VALID:\n    STEPS_PER_EPOCH = (NUM_TRAINING_IMAGES + NUM_VALIDATION_IMAGES) \/\/ BATCH_SIZE\nelse:\n    STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nLR = 1e-3\nsteps = STEPS_PER_EPOCH * EPOCHS","0b800e94":"phase_1_pct=0.3\ndiv_factor=25.\nlr_max = LR\n\nlr_min = lr_max \/ div_factor\nfinal_lr = lr_max \/ (div_factor * 1e4)\nphase_1_steps = int(steps * phase_1_pct)\nphase_2_steps = int(steps - phase_1_steps)\n\nphase1 = CosineAnnealer(lr_min, lr_max, phase_1_steps)\nphase2 = CosineAnnealer(lr_max, final_lr, phase_2_steps)\n\nlrs1 = []\nfor step in range(phase_1_steps):\n    lrs1.append(phase1.step())\n    \nfor step in range(phase_2_steps):\n    lrs1.append(phase2.step())\n\nrng1 = [i for i in range(phase_1_steps + phase_2_steps)]\n\nrng2 = [i for i in range(EPOCHS)]\nlrs2 = [lrfn(x) for x in rng2]","f6566940":"fig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\naxes[0].plot(rng1, lrs1)\naxes[0].set_title(\"One Cycle Scheduler Learning rates: {:.3g} to {:.3g} to {:.3g}\".format(lrs2[0], max(lrs2), lrs2[-1]))\n\naxes[1].plot(rng2, lrs2)\naxes[1].set_title(\"TPU Scheduler Learning rates: {:.3g} to {:.3g} to {:.3g}\".format(lr_min, lr_max, final_lr));","d1a80c6a":"val_ds = get_validation_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and labels, order matters.\nval_images_ds = val_ds.map(lambda image, label: image)\nval_labels_ds = val_ds.map(lambda image, label: label).unbatch()\nval_correct_labels = next(iter(val_labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy() # get everything as one batch\n\ntest_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\ntest_images_ds = test_ds.map(lambda image, idnum: image)","053ba6f8":"with strategy.scope():\n    model = create_model((None, None, CHANNELS), N_CLASSES)\n\nmodel.summary()","de31bd59":"lr_schedule = OneCycleScheduler(LR, steps)\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n\nhistory1 = model.fit(x=get_training_dataset() if TRAIN_VALID == False else get_train_valid_datasets(),\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=get_validation_dataset() if TRAIN_VALID == False else None,\n                    epochs=EPOCHS, callbacks=[lr_schedule],\n                    verbose=1)","e4ac6ee1":"val_probabilities = model.predict(val_images_ds)\nval_predictions = np.argmax(val_probabilities, axis=-1)\n\nscore_sch1 = f1_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\nprecision_sch1 = precision_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\nrecall_sch1 = recall_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\n\ntest_probabilities1 = model.predict(test_images_ds)\n\nprint('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score_sch1, precision_sch1, recall_sch1))","6fa5974f":"with strategy.scope():\n    model = create_model((None, None, CHANNELS), N_CLASSES)","18b9d580":"lr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\n\nhistory2 = model.fit(x=get_training_dataset() if TRAIN_VALID == False else get_train_valid_datasets(),\n                    steps_per_epoch=STEPS_PER_EPOCH,\n                    validation_data=get_validation_dataset() if TRAIN_VALID == False else None,\n                    epochs=EPOCHS, callbacks=[lr_schedule],\n                    verbose=1)","4dd75d9d":"val_probabilities = model.predict(val_images_ds)\nval_predictions = np.argmax(val_probabilities, axis=-1)\n\nscore_sch2 = f1_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\nprecision_sch2 = precision_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\nrecall_sch2 = recall_score(val_correct_labels, val_predictions, labels=range(len(CLASSES)), average='macro')\n\ntest_probabilities2 = model.predict(test_images_ds)\n\nprint('f1 score: {:.3f}, precision: {:.3f}, recall: {:.3f}'.format(score_sch2, precision_sch2, recall_sch2))","de205631":"if TRAIN_VALID == False:\n    display_training_curves(history1.history['loss'], history1.history['val_loss'], 'One Cycle Scheduler loss', 221)\n    display_training_curves(history2.history['loss'], history2.history['val_loss'], 'TPU Scheduler loss', 222)\n    display_training_curves(history1.history['sparse_categorical_accuracy'], history1.history['val_sparse_categorical_accuracy'], 'One Cycle Scheduler accuracy', 223)\n    display_training_curves(history2.history['sparse_categorical_accuracy'], history2.history['val_sparse_categorical_accuracy'], 'TPU Scheduler accuracy', 224)\n\nelse:\n    display_training_curves(history1.history['loss'], history1.history['loss'], 'One Cycle Scheduler loss', 221)\n    display_training_curves(history2.history['loss'], history2.history['loss'], 'TPU Scheduler loss', 222)\n    display_training_curves(history1.history['sparse_categorical_accuracy'], history1.history['sparse_categorical_accuracy'], 'One Cycle Scheduler accuracy', 223)\n    display_training_curves(history2.history['sparse_categorical_accuracy'], history2.history['sparse_categorical_accuracy'], 'TPU Scheduler accuracy', 224)","0b250fdf":"pd.DataFrame([[score_sch1, precision_sch1, recall_sch1], [score_sch2, precision_sch2, recall_sch2]], \n                columns=['Precision', 'Recall', 'F1 Score'], \n                index=['One Cycle Scheduler', 'TPU Scheduler'])","dcf62d54":"print('[INFO] Computing predictions...')\n\nprobabilities = (test_probabilities1 + test_probabilities2) \/ 2\npredictions = np.argmax(probabilities, axis=-1)\n\nprint('[INFO] Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","7d0a46e2":"## One Cycle Scheduler vs TPU Scheduler\n\nThis notebook compares two different learning rate schedulers. The One Cycler Scheduler used in the fastai [module](https:\/\/docs.fast.ai\/callbacks.one_cycle.html#Training-with-the-1cycle-policy) and the scheduler implemented in this [notebook](https:\/\/www.kaggle.com\/mgornergoogle\/five-flowers-with-keras-and-xception-on-tpu) for TPU (I decided to name it TPU Scheduler in this notebook). I compare both of them using the same settings in model and data settings.\n\nThe data augmentation techniques used in this notebook is taken from the following amazing notebooks.\n1. [flower-with-tpus-advanced-augmentation](http:\/\/www.kaggle.com\/dimitreoliveira\/flower-with-tpus-advanced-augmentation)\n2. [rotation-augmentation-gpu-tpu-0-96](https:\/\/www.kaggle.com\/cdeotte\/rotation-augmentation-gpu-tpu-0-96)\n3. [make-chris-deotte-s-data-augmentation-faster](https:\/\/www.kaggle.com\/yihdarshieh\/make-chris-deotte-s-data-augmentation-faster)\n\n![Capture.PNG](attachment:Capture.PNG)","c14728f9":"## Configurations","6cc80d55":"## One Cycle Scheduler experiment","b376a025":"## TPU Scheduler experiment","5c7ad44e":"## Visualization of schedulers","d1e79feb":"## Submitting a blend of both schedulers","29b28546":"## Comparing each sheduler train\/validation loss and accuracy","01a7b24e":"## Helper and Augmentation functions","f4e61fea":"## Model function and schedulers callback","10de71a9":"## Training configurations","82e802d8":"## Augmentation Visualization","34e4144e":"## Validation score comparison for each scheduler"}}