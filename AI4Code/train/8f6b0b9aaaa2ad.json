{"cell_type":{"d98f7f2b":"code","d32d2a68":"code","22c8ce93":"code","460bbcf1":"code","c3743d4a":"code","9ef3201e":"code","7ae25c8f":"code","bf6e32a8":"markdown","00cb00ef":"markdown","1bd8d34c":"markdown","7210ed96":"markdown","dcac7809":"markdown","be37c9ae":"markdown","62501c9b":"markdown","a37c5cf4":"markdown","fb12da38":"markdown"},"source":{"d98f7f2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d32d2a68":"#get user inputs\nx= float(input('width'))\ny= float(input('height'))\n#use function to calculate area \ndef multiply_numbers(x,y):\n    print('The area of the rectangele is',x*y)\nmultiply_numbers(x,y)","22c8ce93":"#function asks user for 10 inputs\ndef get_user_input():\n    list = []\n\nfor i in range(10):\n    numbers = float(input ('Enter a number'))\n    list.append(numbers)\n\n#calculate the average \ntotal = sum(list)\nlength = len(list)\naverage = total\/length\n\nprint(\"your average is\", average)","460bbcf1":"# use this list\nnum_list = [-15, 21, 0, 18, 32, 20,-127, -2]\n#define the function\ndef positive_list(input_list):\n    \n    output_list = list ()\n#replace the negative values with 0\n    for num in input_list:\n        if num < 0:\n            output_list.append(0)     \n        else:\n            output_list.append(num)\n#return output  \n    return output_list\n\nprint(positive_list(num_list))","c3743d4a":"# USE THIS PROGRAM TO COMPLETE THE FUNCTIONS IN THE NEXT CELL\n#import the matplotlib module for plotting the results\nimport matplotlib.pyplot as plt\n\n\n#########This will be the starting code that you need for function check_user_inputs\n# ask the user for inputs\ninputs_reasonable = False\n\n# keep asking the user for input values until they enter reasonable numbers\nwhile(not inputs_reasonable):\n    x_min = int(input('Enter min value for x'))\n    x_max = int(input('Enter max value for x'))\n    # check if they make sense (if x_max > x_min +1)\n    if (x_max > x_min + 1):\n        inputs_reasonable = True\n        print('Inputs accepted')\n    else:\n        print('Check minimum and maximum values and enter a wider range')\n\n#########This will be the starting code that you need for function calculate_x_y\nx_list = [] # empty list for x values you can use append() function to add more elements to this\ny_list = [] # empty list for y values you can use append() function to add more elements to this\n# complete the calculations for x_list and y_list here via a for loop\nfor x in range(x_min, x_max+1):\n    x_list.append(x)\n    y_list.append(x*x)\n\n\n#########This will be the starting code that you need for function plot_results\nplt.plot(x_list,y_list)\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()","9ef3201e":"# WRITE THE FUNCTIONS HERE AND LOOK AT THE NEXT CELL TO SEE HOW THEY WILL BE CALLED\n#import the matplotlib module for plotting the results\nimport matplotlib.pyplot as plt\n\ndef check_user_inputs():\n    x= float(input('input a value for x'))\n    y= float(input('input a value for y'))    \n    return x,y\ninputs_reasonable = False\n\n    \n# keep asking the user for input values until they enter reasonable numbers\n\nwhile(not inputs_reasonable):\n    x_min = int(input('Enter min value for x'))\n    x_max = int(input('Enter max value for x'))\n# check if they make sense (if x_max > x_min +1)\n    if (x_max > x_min + 1):\n        inputs_reasonable = True\n        print('Inputs accepted')\n    else:\n        print('Check minimum and maximum values and enter a wider range')\n        \ndef calculate_x_y(x_list,y_list):\n    x_list = [] # empty list for x values you can use append() function to add more elements to this\n    y_list = [] # empty list for y values you can use append() function to add more elements to this\n    return x_list,y_list\n    # complete the calculations for x_list and y_list here via a for loop\nx_list = []\ny_list = []\nfor x in range(x_min, x_max+1):\n    x_list.append(x)\n    y_list.append(x*x)\nprint(x_list,y_list)\n\ndef plot_results(x,y):\n    plt.plot(x_list,y_list)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show (y_list = [x ** 2 for x in x_list])\n    return x,y","7ae25c8f":"# DO NOT CHANGE THIS PART. ONLY RUN IT AFTER YOU COMPLETE THE FUNCTIONS IN THE PREVIOUS CELL\n\n# receive inputs for x_min and x_max from user\nx_min, x_max = check_user_inputs()\n\n# calculate two lists for x and y for y = x**2\nx, y = calculate_x_y(x_min, x_max)\n\n# plot the results using the obtained lists\nplot_results(x,y)\n","bf6e32a8":"**Problem 1:**\nWrite and test a function that calculates and prints the area of a rectangle based on the two input arguments (i.e., width and height). This function does __not__ have to return any values.\n\n\n__Grades:__ 16 pts for the code (proper commenting 4 pts, function definition 9 pts, calling the function correctly 3pts), and 4 pts for reflections (Total 20 pts).\n","00cb00ef":"# Reflections\n\n***\n***\n","1bd8d34c":"# Lab 5 (Due on 11\/2\/2021 by midnight)\nThis lab includes 4 problems. The total grade for this lab is 100 points and the distribution is detailed in each problem.\n## Resources\n\nhttps:\/\/docs.python.org\/3\/library\/functions.html\n\nhttps:\/\/www.ibm.com\/docs\/en\/db2-event-store\/2.0.0?topic=notebooks-markdown-jupyter-cheatsheet\n\nSlides posted on Canvas for Lectures 15-16.\n\n***\n***","7210ed96":"**Problem 4:**\nUse the follwing program that shows the plot of function $y = x^2$ for a range entered by the user and __convert it to 3 functions__ according to the following:\n\n- function 1 (name it check_user_inputs): it should have no input arguments and should return two values for x_min and x_max respectively\n- function 2 (name it calculate_x_y): it should receive x_min and x_max and return two lists (x_list and the corresponding y_list)\n- function 3 (name it plot_results): it should recieve the x_list and y_list as input and display plor for $y = x^2$\n\n\nThere are three cells included in the following.\n- First cell gives you all the necessary starting codes.\n- You need to complete the 2nd cell by reusing the codes in the first cell and converting them into 3 functions as described above.\n- The 3rd cell does not need any modifications. It will simply calls the other 3 functions in a correct sequence. Once you are done with the 2nd cell, run the 3rd one to show the results.\n\n\n\n__Grades:__ 32 pts for the code (proper commenting 8 pts, each function 8 pts), and 8 pts for reflections (Total 40 pts).","dcac7809":"**Problem 2:**\nWrite a function that asks the users for 10 numbers and __returns__ the average.\n\n__Grades:__ 16 pts for the code (proper commenting 4 pts, function definition 9 pts, calling the function correctly 3pts), and 4 pts for reflections (Total 20 pts).\n","be37c9ae":"# Reflections\n\nMy main issue was displaying the correct answer. Because I only had 'print(positive_list(num_list))' without before stating that the function needed to return the output list","62501c9b":"# Reflections\n\n***\n***","a37c5cf4":"# Reflections\n\n***\n***\nThis problem could also be solved in a similar manner using while loops","fb12da38":"**Problem 3:**\nWrite a function that receives a list of numbers as input argument and repalces the negative values with 0 and returns the resulting list as output. Test it with the list in the next code cell.\n\n__Grades:__ 16 pts for the code (proper commenting 4 pts, function definition 9 pts, calling the function correctly 3pts), and 4 pts for reflections (Total 20 pts).\n"}}