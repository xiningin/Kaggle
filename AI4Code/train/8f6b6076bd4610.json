{"cell_type":{"27930db8":"code","73be7cb2":"code","082db306":"code","faf0750d":"code","14b3656f":"code","655270ae":"code","0e553ae0":"code","666263f7":"code","629f9599":"code","03f178f4":"code","b8c659fa":"code","983a6634":"code","580298b0":"code","8d1a025d":"code","593b3c91":"code","6847e1ce":"code","eeeeda6d":"code","771b75fd":"code","4da90213":"code","230171c0":"code","a945730e":"code","4da33662":"code","c76b7646":"code","97cdc968":"code","2609f80d":"code","bcafbd4e":"code","3cf3269b":"code","d90a488d":"code","aa5c1341":"code","06450dca":"code","0f5b45b2":"code","6447350a":"code","686d4664":"code","1905b39b":"code","9eb8f96c":"code","670e9697":"code","5ea09093":"code","d040544a":"code","e66d2900":"markdown","2d58f38b":"markdown","ce81a823":"markdown","2366aaac":"markdown","7bae88e1":"markdown","cc51fabd":"markdown","da686fa5":"markdown","c77b2e4f":"markdown"},"source":{"27930db8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73be7cb2":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","082db306":"data = pd.read_csv(\"..\/input\/kpr-house-purchase-dataset\/KPR_house_purchase_data_example.csv\")\ndata.head(5)","faf0750d":"data.drop(\"User ID\", axis=1 ,inplace=True)\ndata","14b3656f":"sex = pd.get_dummies(data[\"Gender\"], drop_first=True)\nsex","655270ae":"data =pd.concat([data,sex], axis=1)\ndata","0e553ae0":"data.drop(\"Gender\",axis=1 ,inplace=True)\ndata","666263f7":"x=data.drop(\"Purchased\", axis=1)\ny=data[\"Purchased\"]","629f9599":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=0)","03f178f4":"xdata=data.drop(\"Purchased\", axis=1)\nydata=data[\"Purchased\"]","b8c659fa":"xdata","983a6634":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","580298b0":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nknn.fit(x_train, y_train)","8d1a025d":"y_pred = knn.predict(x_test)\ny_pred","593b3c91":"y_test","6847e1ce":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","eeeeda6d":"from sklearn.metrics import accuracy_score\npredic = knn.predict(x_test)\naccuracy_score(y_test, predic)","771b75fd":"print(knn.predict(sc.transform([[20,90000,0]])))","4da90213":"from sklearn.naive_bayes import GaussianNB\n\nnb = GaussianNB()\n\nnb.fit(x_train,y_train)\n\nY_pred_nb = nb.predict(x_test)","230171c0":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, Y_pred_nb)\ncm","a945730e":"from sklearn.metrics import accuracy_score\nscore_nb = round(accuracy_score(Y_pred_nb,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Naive Bayes is: \"+str(score_nb)+\" %\")","4da33662":"print(nb.predict(sc.transform([[20,900,0]])))","c76b7646":"from sklearn import svm\n\nsv = svm.SVC(kernel='linear')\n\nsv.fit(x_train, y_train)\n\nY_pred_svm = sv.predict(x_test)","97cdc968":"score_svm = round(accuracy_score(Y_pred_svm,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Linear SVM is: \"+str(score_svm)+\" %\")","2609f80d":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nmax_accuracy = 0\n\n\nfor x in range(200):\n    dt = DecisionTreeClassifier(random_state=x)\n    dt.fit(x_train,y_train)\n    y_pred_dt = dt.predict(x_test)\n    current_accuracy = round(accuracy_score(y_pred_dt,y_test)*100,2)\n    if(current_accuracy>max_accuracy):\n        max_accuracy = current_accuracy\n        best_x = x\n        \n#print(max_accuracy)\n#print(best_x)\n\n\ndt = DecisionTreeClassifier(random_state=best_x)\ndt.fit(x_train,y_train)\ny_pred_dt = dt.predict(x_test)","bcafbd4e":"x_train","3cf3269b":"score_dt = round(accuracy_score(y_pred_dt,y_test)*100,2)\n\nprint(\"The accuracy score achieved using Decision Tree is: \"+str(score_dt)+\" %\")","d90a488d":"import graphviz\nfrom sklearn import tree\nclf = DecisionTreeClassifier(criterion = \"entropy\")\nclf.fit(x_train,y_train)\n\ndot_data = tree.export_graphviz(clf, out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"Diabetes\")\n\ngraph","aa5c1341":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=5)\n\n# Train Decision Tree Classifer\nclf = clf.fit(x_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(x_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",accuracy_score(y_test, y_pred))","06450dca":"# di bawah ini kita coba lakukan percobaan terakhir menggunakan data :\n# [1] umur 30 penghasilan 8jt ,pria\n# [1] umur 26 penghasilan 3jt ,wanita\n# [1] umur 27 penghasilan 8jt ,wanita\n# [1] umur 27 penghasilan 8jt ,wanita\n# [1] umur 33 penghasilan 3jt ,wanita\n# [1] umur 35 penghasilan 8jt ,pria","0f5b45b2":"print(nb.predict(sc.transform([[30,8000000,1]])))\nprint(nb.predict(sc.transform([[26,3000000,1]])))\nprint(nb.predict(sc.transform([[27,8000000,1]])))\nprint(nb.predict(sc.transform([[27,8000000,0]])))\nprint(nb.predict(sc.transform([[33,3000000,0]])))\nprint(nb.predict(sc.transform([[35,8000000,0]])))","6447350a":"pip install pydotplus","686d4664":"from six import StringIO\nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = xdata.columns)\n\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('suv sale1.png')\nImage(graph.create_png())","1905b39b":"# C4.5\nclf2 = DecisionTreeClassifier(max_depth=5)\n\nclf2.fit(x_train,y_train)\n\n\ndot_data = tree.export_graphviz(clf2, out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"SUV Sale\")\n\ngraph","9eb8f96c":"x_train, x_test, y_train, y_test = train_test_split(xdata,ydata,test_size=0.2, random_state=0)","670e9697":"from six import StringIO\nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus\ndot_data = StringIO()\nexport_graphviz(clf2, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = xdata.columns)\n\n\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \ngraph.write_png('suv sale.png')\nImage(graph.create_png())","5ea09093":"prediction_test = clf.predict(test_data_remove).tolist()\nprint(\"TESTING DATA\")\nprint('Confusion Matrix with Testing Data with ID3 Algorithm:')\nprint(confusion_matrix(outcome_test, prediction_test))\nprint()\nprint('Classification Report ID3 Algorithm:')\nprint(classification_report(outcome_test, prediction_test))\nprint()\nprint()\nprint(\"TRAINING DATA\")\nprediction_train = clf.predict(train_data_remove).tolist()\n\nprint('Confusion Matrix with Training Data with ID3 Algorithm:')\nprint(confusion_matrix(outcome_train, prediction_train))\nprint()\nprint('Classification Report ID3 Algorithm:')\nprint(classification_report(outcome_train, prediction_train))","d040544a":"prediction_train2 = clf2.predict(train_data_remove).tolist()\n\nprint(\"TESTING DATA\")\nprint('Confusion Matrix with Testing Data with C4.5 Algorithm: ')\nprint(confusion_matrix(outcome_train, prediction_train2))\nprint()\nprint('Classification Report C4.5 Algorithm:')\nprint(classification_report(outcome_train, prediction_train2))\nprint()\nprint()\nprint(\"TRAINING DATA\")\nprint('Confusion Matrix with Training Data with C4.5 Algorithm:')\nprint(confusion_matrix(outcome_train, prediction_train2))\nprint()\nprint('Classification Report C4.5 Algorithm:')\nprint(classification_report(outcome_train, prediction_train2))","e66d2900":"*Akurasi menggunakan Naive Bayes*","2d58f38b":" #kesimpulannya adalah bahwa umur sesorang tidak berpengaruh atas sesuatu yang harus ia beli atau miliki seperti rumah tergantung dari orang itu sendiri untuk berniatan membeli rumah di umur berapa dan tidak hanya laki-laki saja yang boleh memebeli rumah namun wanita juga bisa membeli rumah atau mempunyai rumah sendiri atas kerja keras nya sendiri\n#range umur 26-35 pria\/wanita tidak menentukan kapan ia akan beli rumah jika berpenghasilan lebih atau maksimal\n\n#wanita umur 26 saja memiliki salary 3000000 dan wanita umur 33 pun memeiliki salary sama yaitu 3000000 yamh artinya umur tidak selalu berkedudukan tinggi untuk salary atau gaji seseorang","ce81a823":"dot_data = tree.export_graphviz(clf2, out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"SUV Sale\")\n\ngraph \nmenghasilkan tree diagram kebenaran menentukan salah atau benar nya nilai gini,samples,value","2366aaac":"*Hasil diatas menyatakan 0 yang artinya prediksi terhadap transformnya bernilai tidak ada atau 0*","7bae88e1":"output dari sklearn import tree adalah tree diagram yang mempresentasikan struktur dalam bentuk grafik ","cc51fabd":"Tabel diatas merupakan hasil dari data yang telah dibuat dengan jumlah salary tertinggi yaitu 8000000","da686fa5":"Klasifikasi menggunakan K-NN(KNeighborsClassifier)","c77b2e4f":"*Data memebeli atau tidaknya pada variabel X yang menghasilkan data berbentuk array yang bernilai 0 dan 1 pada output diatas*"}}