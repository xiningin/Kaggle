{"cell_type":{"745731ab":"code","6effe984":"code","05739933":"code","edb08f52":"code","d115c4ea":"code","faefe2f3":"code","0aa48c1f":"markdown"},"source":{"745731ab":"import pandas as pd\nimport numpy as np\nimport gc","6effe984":"def df_reader(path, chunksize):\n    reader = train_reader = pd.read_csv(path, chunksize=chunksize)\n    dflist = []\n    for df_part in reader:\n        dflist.append(df_part)\n    data = pd.concat(dflist,sort=False)\n    return data\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","05739933":"%%time\ntrain = df_reader('..\/input\/train.csv', 100000)\nprint(train.shape)\ntrain = reduce_mem_usage(train)","edb08f52":"gc.collect()","d115c4ea":"%%time\ntest = df_reader('..\/input\/test.csv', 100000)\nprint(test.shape)\ntest = reduce_mem_usage(test)","faefe2f3":"gc.collect()","0aa48c1f":"Small manual to load whole data and reduce memory usage in Malware challenge. \nThis method is inspired from this [kernel](https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage)."}}