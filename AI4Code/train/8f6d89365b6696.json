{"cell_type":{"c189ebdb":"code","dc6b8961":"code","5e56b882":"code","6c427e10":"code","e7889f75":"code","aaa55808":"code","8c050071":"code","fe9025a7":"code","d1fa1cb7":"code","403bec87":"code","e3a6dabd":"code","aefbc47e":"code","31b582e4":"code","b0768f12":"code","a7a6cfef":"code","b0bda30f":"code","03b071b3":"code","8749a988":"code","8c32be75":"markdown","5be62e51":"markdown","0355dffc":"markdown","19d53568":"markdown","20367617":"markdown","935b922b":"markdown","9d10db2f":"markdown","05f7ee80":"markdown","fdf792b4":"markdown","9db09aa0":"markdown","6ff418e6":"markdown","7e7063fb":"markdown","483ec4a7":"markdown"},"source":{"c189ebdb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","dc6b8961":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","5e56b882":"print(df.head())\nprint('\\n')\nprint(df.info())\nprint('\\n')\nprint(df.describe())","6c427e10":"plt.figure(figsize=(12,8))\ns = sns.countplot(x='class',data=df)\nfor p in s.patches:\n    s.annotate(format(p.get_height(),'.1f'),\n              (p.get_x() + p.get_width() \/2. , p.get_height()),\n               ha='center',va='center',fontsize=15,xytext=(0,9), textcoords='offset points'\n              )","e7889f75":"columns = df.columns\nprint(columns)","aaa55808":"f, axes = plt.subplots(22,1, figsize=(15,150), sharey = True)\nk=0\nfor i in range(0,22):\n    k = k+1\n    s = sns.countplot(x=columns[k],data=df,ax=axes[i])\n    for p in s.patches:\n        s.annotate(format(p.get_height(), '.1f'), \n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center', va = 'center', \n        xytext = (0, 9), \n        fontsize = 15,\n        textcoords = 'offset points')\n  ","8c050071":"df = df.drop('veil-type',axis=1)","fe9025a7":"#Reassigning because one feature was dropped from the dataframe\ncolumns = df.columns","d1fa1cb7":"f, axes = plt.subplots(21,1, figsize=(15,150), sharey = True)\nk=0\nfor i in range(0,21):\n    k = k+1\n    s = sns.countplot(x=columns[k],data=df,ax=axes[i],hue='class')\n    for p in s.patches:\n        s.annotate(format(p.get_height(), '.1f'), \n        (p.get_x() + p.get_width() \/ 2., p.get_height()), \n        ha = 'center', va = 'center', \n        xytext = (0, 9), \n        fontsize = 15,\n        textcoords = 'offset points')\n  ","403bec87":"#Checking for null values\nsns.heatmap(df.isnull())","e3a6dabd":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report,accuracy_score","aefbc47e":"#Getting data ready to use for model training\nfinal_df = pd.get_dummies(df,drop_first=True)","31b582e4":"print(final_df.head())\nprint('\\n')\nprint(final_df.info())\nprint('\\n')","b0768f12":"X = final_df.drop('class_p',axis=1) #Everything except target\ny = final_df['class_p'] #Only target\n\n#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","a7a6cfef":"rfc = RandomForestClassifier()","b0bda30f":"rfc.fit(X_train,y_train)","03b071b3":"pred_rfc = rfc.predict(X_test)","8749a988":"print('CONFUSION MATRIX')\nprint(confusion_matrix(y_test,pred_rfc))\nprint('\\n')\nprint('CLASSIFICATION REPORT')\nprint(classification_report(y_test,pred_rfc))\nprint('\\n')\nprint('ACCURACY')\nprint(accuracy_score(y_test,pred_rfc))","8c32be75":"Predicting values of X_test","5be62e51":"Reading the data","0355dffc":"Quick glance of data","19d53568":"It can be concluded that the data is fairly distributed and biasness is not observed.","20367617":"Accuracy of **100%** is achieved using Random Forest Classifier","935b922b":"Visualising features of the dataset","9d10db2f":"Visualising entire dataset with respect to target variable(class=poisonous or class=edible).","05f7ee80":"Analysing model performance","fdf792b4":"Importing sklearn libraries","9db09aa0":"Visualising the target variable","6ff418e6":"Fitting data","7e7063fb":"Instanting model","483ec4a7":"As veil type is only 'p' (singular value) throughout the dataframe it can be dropped."}}