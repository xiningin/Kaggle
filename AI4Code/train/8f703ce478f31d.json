{"cell_type":{"db5372fe":"code","2df89d90":"code","41dbcc95":"code","50e1b7dd":"code","99b97e4e":"code","da8c23d6":"code","a5f814b4":"code","949a6a93":"code","33a5c18c":"code","615193f3":"code","999d14b7":"code","f3174711":"code","91379b6d":"code","86d9c612":"code","7a65feed":"code","47e8b2c3":"code","58a58ef0":"code","f056fcb0":"code","8afb9dba":"code","3f75bcdd":"code","8c50ab84":"code","9a1d50d1":"markdown","2b6f2e5a":"markdown","603436b6":"markdown","1154adc2":"markdown","e5f4fcb7":"markdown"},"source":{"db5372fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2df89d90":"file = open('\/kaggle\/input\/ense32020\/files\/adult.data', 'r')","41dbcc95":"def chr_int(a):\n    if a.isdigit():\n        return int(a)\n    else:\n        return 0\n                \ndata=[]\nfor line in file:\n     data1=line.split(', ')\n     if len(data1)==15:\n        data.append([chr_int(data1[0]),data1[1],chr_int(data1[2]),data1[3],chr_int(data1[4]),data1[5],data1[6],\\\n            data1[7],data1[8],data1[9],chr_int(data1[10]),chr_int(data1[11]),chr_int(data1[12]),data1[13],\\\n            data1[14]])","50e1b7dd":"print (data[1:2])","99b97e4e":"import pandas as pd\n\ndf = pd.DataFrame(data) #  Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes \n\ndf.columns = ['age', 'type_employer', 'fnlwgt', 'education', \n                \"education_num\",\"marital\", \"occupation\", \"relationship\", \"race\",\"sex\",\n                \"capital_gain\", \"capital_loss\", \"hr_per_week\",\"country\",\"income\"]\ndf.head()","da8c23d6":"df.tail()","a5f814b4":"df.shape\n","949a6a93":"counts = df.groupby('country').size()\n\nprint (counts) ","33a5c18c":"counts = df.groupby('age').size() # grouping by age\nprint (counts)","615193f3":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape\nml1 = df[(df.sex == 'Male')&(df.income=='>50K\\n')]\nml1.shape","999d14b7":"ml = df[(df.sex == 'Male')] # grouping by sex\nml.shape","f3174711":"fm =df[(df.sex == 'Female')]\nfm.shape","91379b6d":"fm1 =df[(df.sex == 'Female')&(df.income=='>50K\\n')]\nfm1.shape","86d9c612":"df1=df[(df.income=='>50K\\n')]\n\nprint ('The rate of people with high income is: ', int(len(df1)\/float(len(df))*100), '%.' )\nprint ('The rate of men with high income is: ', int(len(ml1)\/float(len(ml))*100), '%.' )\nprint ('The rate of women with high income is: ', int(len(fm1)\/float(len(fm))*100), '%.' )","7a65feed":"print ('The average age of men is: ', ml['age'].mean(), '.' )\nprint ('The average age of women is: ', fm['age'].mean(), '.')\nprint ('The average age of high-income men is: ', ml1['age'].mean(), '.' )\nprint ('The average age of high-income women is: ', fm1['age'].mean(), '.')","47e8b2c3":"ml_mu = ml['age'].mean()\nfm_mu = fm['age'].mean()\nml_var = ml['age'].var()\nfm_var = fm['age'].var()\nml_std = ml['age'].std()\nfm_std = fm['age'].std()\n\nprint ('Statistics of age for men: mu:', ml_mu, 'var:', ml_var, 'std:', ml_std)\nprint ('Statistics of age for women: mu:', fm_mu, 'var:', fm_var, 'std:', fm_std)\nml_mu_hr = ml['hr_per_week'].mean()\nfm_mu_hr = fm['hr_per_week'].mean()\nml_var_hr = ml['hr_per_week'].var()\nfm_var_hr = fm['hr_per_week'].var()\nml_std_hr = ml['hr_per_week'].std()\nfm_std_hr = fm['hr_per_week'].std()\n\nprint ('Statistics of hours per week for men: mu:', ml_mu_hr, 'var:', ml_var_hr, 'std:', ml_std_hr)\nprint ('Statistics of hours per week for women: mu:', fm_mu_hr, 'var:', fm_var_hr, 'std:', fm_std_hr)","58a58ef0":"ml_median= ml['age'].median()\nfm_median= fm['age'].median()\n\nprint (\"Median age per men and women: \", ml_median, fm_median)\nml_median_age= ml1['age'].median()\nfm_median_age= fm1['age'].median()\n\nprint (\"Median age per men and women with high-income: \", ml_median_age, fm_median_age)\nml_median_hr= ml['hr_per_week'].median()\nfm_median_hr= fm['hr_per_week'].median()\nprint (\"Median hours per week per men and women: \", ml_median_hr, fm_median_hr)","f056fcb0":"import matplotlib.pyplot as plt\nml_age=ml['age']\nml_age.hist(histtype='stepfilled', bins=20)","8afb9dba":"fm_age=fm['age']\nfm_age.hist(histtype='stepfilled', bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Female samples',fontsize=15)\nplt.show()","3f75bcdd":"import seaborn as sns\nfm_age.hist(density=True, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('Samples',fontsize=15)\nplt.show()","8c50ab84":"fm_age.hist(density=True, histtype='stepfilled', alpha=.5, bins=20)   # default number of bins = 10\nml_age.hist(density=True, histtype='stepfilled', alpha=.5, color=sns.desaturate(\"indianred\", .75), bins=10)\nplt.xlabel('Age',fontsize=15)\nplt.ylabel('PMF',fontsize=15)\nplt.show()","9a1d50d1":"6662 hommes sur 21790 gagnent plus que 50K $","2b6f2e5a":"500 observations sont li\u00e9s \u00e0 des pays non connus. \nNombre d'observation par pays ","603436b6":"1179 femmes sur 10771 ont un revenu \u00e9lev\u00e9 ","1154adc2":"pour connaitre la dimension 15 colonnes et 32561 lignes ","e5f4fcb7":"r\u00e9partition des salaires par age "}}