{"cell_type":{"a7a7564a":"code","8e233408":"code","bcfb3faa":"code","da1b8fec":"code","e13d814a":"code","852342f4":"code","bfa77268":"code","ae1f26d4":"code","8046a075":"code","4277de6c":"code","ac992ba3":"code","88b0eff1":"code","d6f34b7e":"code","36ac0ecf":"code","e21ee07b":"code","b9aedf22":"code","df107b41":"code","952d95f0":"code","6d1d5bfb":"code","26aed40a":"code","b7b9716a":"code","955aed2c":"code","62e90d02":"code","e39634b1":"code","625814bf":"code","ece2965e":"code","7070138a":"code","0ec30e19":"code","0af509f4":"code","f4fb44a4":"code","ec6c148c":"code","f3bfb55f":"code","981b625f":"code","68ab5c9f":"markdown","860c9634":"markdown","39f0c0eb":"markdown","11f846e6":"markdown","d73ee97c":"markdown","a1435509":"markdown","4f435df3":"markdown"},"source":{"a7a7564a":"from sklearn.model_selection import train_test_split, GridSearchCV \nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nimport numpy as np \nimport pandas as pd \nimport missingno as msno\nimport seaborn as sns\nimport matplotlib as plt\nimport os\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8e233408":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","bcfb3faa":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nPassengerId = test_data['PassengerId']\ntest_data.head()","da1b8fec":"print(train_data.shape)\n\nprint(test_data.shape)","e13d814a":"list(test_data.columns)","852342f4":"train_data.describe()","bfa77268":"train_data.info()","ae1f26d4":"train_data.isnull().sum()","8046a075":"test_data.isnull().sum()","4277de6c":"#To visualize my missing values and get a clear picture, I will plot them on a matrix\n\nmsno.matrix(train_data)","ac992ba3":"#Value count for Embarked, fill missing values with mode\ntrain_data['Embarked'].value_counts()","88b0eff1":"dataframe = [train_data, test_data]\n\nfor df in dataframe:\n    \n    df['Age'].fillna(df['Age'].median(), inplace=True)\n\n    #For Embarked\n    df['Embarked'].fillna('S', inplace = True)\n\n    #For Fare\n    df['Fare'].fillna(df['Fare'].median(), inplace=True)","d6f34b7e":"train_data.isnull().sum()","36ac0ecf":"test_data.isnull().sum()","e21ee07b":"#Creating new features \ndataframe = [train_data, test_data]\n\nfor df in dataframe:\n\n    df['Status'] = (df[\"Name\"].str.split(\". \", expand=True))[1]\n    df['Family_size'] = df.SibSp + 1 + df.Parch\n    \n    df['Is_Alone'] = np.where(df['Family_size'].values <= 1, 0, 1)\n    \n    df['Has_Cabin'] = np.where(df['Cabin'].isnull(), 0, 1)\n\nfor df in dataframe:\n    df['Status'] = df['Status'].replace(['Dr', 'Rev', 'Planke', 'Impe', 'Major', 'Col'\\\n                    , 'Gordon', 'Don', 'Shawah', 'Capt', 'Melkebeke', 'Jonkheer', 'Steen'\\\n                    , 'Mme', 'Mulder', 'Billiard', 'de', 'Velde', 'Pelsmaeker', 'Walle'\\\n                    , 'Messemaeker', 'th', 'Cruyssen', 'Carlo', 'Palmquist', 'Brito', 'Khalil'], 'Others')\n    \n    df['Status'] = df['Status'].replace(['Mile', 'Ms', 'Mlle'], 'Miss')\n    ","b9aedf22":"for df in dataframe:\n    \n    df['Sex'] = df['Sex'].map( {'female':0, 'male':1}).astype(int)\n    df['Embarked'] = df['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2}).astype(int)\n    df['Status'] = df['Status'].map( {'Mr': 1, 'Miss':2, 'Mrs':3, 'Others':4})\n    df['Status'] = df['Status'].fillna(0)\n    \n    ","df107b41":"train_data.head(2)","952d95f0":"test_data.head(2)","6d1d5bfb":"drop_cols = ['PassengerId','Name', 'Ticket', 'Cabin']\ntrain_data.drop(drop_cols, inplace=True, axis=1)\ntest_data.drop(drop_cols, inplace=True, axis=1)","26aed40a":"train_data.shape, test_data.shape","b7b9716a":"train_data.head()","955aed2c":"train_data['Survived'].value_counts()","62e90d02":"#correlation between features\ntrain_data.corr()","e39634b1":"#Split my data\ny = train_data['Survived'].astype(int)\nX = train_data.drop(['Survived'],axis=1)\n\nX_test = test_data","625814bf":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=0.2,random_state=42,shuffle=True)","ece2965e":"from sklearn.model_selection import cross_validate,GridSearchCV\nfrom sklearn.metrics import confusion_matrix , accuracy_score\nfrom xgboost import XGBClassifier\nreg=XGBClassifier()","7070138a":"params={\"n_estimators\":[67],'reg_lambda':[2],'gamma':[0.1]\n       ,'eta':[0.05],\"max_depth\":[3],'objective':['binary:logistic']}\n\nclf=GridSearchCV(reg,params,cv=10,n_jobs=-1,verbose=1)\nclf.fit(xtrain,ytrain)","0ec30e19":"ypred=clf.predict(xtrain)\ntpred=clf.predict(xtest)\nprint(accuracy_score(ypred,ytrain))\nprint(accuracy_score(tpred,ytest))\nclf.best_params_","0af509f4":"clf.get_params()","f4fb44a4":"predictions = clf.predict(X_test)","ec6c148c":"Submission = pd.DataFrame({'PassengerId': PassengerId,\n                            'Survived': predictions})\n\nSubmission.to_csv(\"titan.csv\", index=False)\nSubmission.head()","f3bfb55f":"Submission['Survived'].value_counts()","981b625f":"Submission.shape","68ab5c9f":"## Modelling","860c9634":"## Dealing With Missing values","39f0c0eb":"## BASIC DATA EXPLORATION:","11f846e6":"## Mutual Information of my Features","d73ee97c":"From the above graph, I have a lot of missing values in cabin so I drop it , then I will use SimpleImputer to impute my missing values for age and Embarked. ","a1435509":"## Feature Engineering ","4f435df3":"### Mapping the data\/Encoding "}}