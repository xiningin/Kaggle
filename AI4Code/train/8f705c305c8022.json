{"cell_type":{"8ddee72c":"code","9a38d7eb":"code","b28a7c02":"code","98d7d61c":"code","9e693298":"code","0b279c4d":"code","59cb8c8e":"code","4dba9172":"code","b241a667":"code","82d7825d":"code","40926faf":"code","dd0c1aa9":"code","99578c4c":"code","d9c5b91c":"code","bcadca96":"code","f1765d92":"code","c3b60266":"code","58aa07c7":"code","b414f946":"code","2a4d29a0":"code","2319c272":"markdown","6ecbaddd":"markdown","a42b5582":"markdown","ec074648":"markdown","ed81aa7e":"markdown","dc3b2b70":"markdown","f831afa0":"markdown","f8a67f6b":"markdown","d3a785b5":"markdown","7016836a":"markdown","faab3a68":"markdown"},"source":{"8ddee72c":"#Importing required libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\npd.pandas.set_option('display.max_columns', None)","9a38d7eb":"#Importing datasets\ndata = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","b28a7c02":"#Missing values\nfeatures_nan = [ feature for feature in data.columns if data[feature].isnull().sum() > 1 ]\nfeatures_nan_test = [ feature for feature in test.columns if test[feature].isnull().sum() > 1 ]\n\n\n#percentage of nan values\nfor feature in features_nan:\n    print(feature, np.round(data[feature].isnull().mean(), 4), '% missing values')","98d7d61c":"#List of Numerical features\nnumerical_features = [feature for feature in data.columns if data[feature].dtypes != 'O']\nprint('Total numerical features : ', len(numerical_features))\ndata[numerical_features].head()","9e693298":"# list of Tmporal features\nyear_feature = [feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\nyear_feature","0b279c4d":"#List of variables that contain Discrete values\ndiscrete_features=[feature for feature in numerical_features if data[feature].nunique()<25 and feature not in year_feature+['Id']]\nprint(\"Total discrete variables : \", len(discrete_features))\ndata[discrete_features].head()","59cb8c8e":"#List of Continuous features\ncont_features=[feature for feature in numerical_features if data[feature].nunique()>25 and feature not in year_feature+['Id']]\nprint(\"Total continuous variables : \", len(cont_features))\ndata[cont_features].head()","4dba9172":"#List of Categorical features\ncatg_features = [feature for feature in data.columns if data[feature].dtypes == 'O']\nprint(\"Total categorical variables : \", len(cont_features))\ndata[catg_features].head()","b241a667":"#Replacing NaN values in CATEGORICAL features with new label 'Missing'\ncatg_features_nan = [feature for feature in data.columns if data[feature].isnull().sum()>1 and data[feature].dtypes == 'O']\ncatg_features_nan_test = [feature for feature in test.columns if test[feature].isnull().sum()>1 and test[feature].dtypes == 'O']\n\ndef replace_nan(dataset, feature):\n    dataset[feature] = dataset[feature].fillna('Missing')\n    \nreplace_nan(data, catg_features_nan)\nreplace_nan(test, catg_features_nan_test)","82d7825d":"#Replacing NaN values in NUMERICAL features with median\nnum_features_nan = [feature for feature in data.columns if data[feature].isnull().sum()>1 and data[feature].dtypes != 'O']\nnum_features_nan_test = [feature for feature in test.columns if test[feature].isnull().sum()>1 and test[feature].dtypes != 'O']\n\n#data\nfor feature in num_features_nan:\n    median = data[feature].median()\n    data[feature+'_nan'] = np.where(data[feature].isnull(), 1, 0)\n    data[feature].fillna(median, inplace = True)\n    \n#test\nfor feature in num_features_nan_test:\n    median = test[feature].median()\n    test[feature+'_nan'] = np.where(test[feature].isnull(), 1, 0)\n    test[feature].fillna(median, inplace = True)","40926faf":"#Converting the 'year' value to 'total number of years'\n\nfor feature in ['YearBuilt','YearRemodAdd','GarageYrBlt']:\n    data[feature]=data['YrSold']-data[feature]\n    test[feature]=test['YrSold']-test[feature]","dd0c1aa9":"for feature in ['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea']:\n    data[feature] = np.log(data[feature])\n    \nfor feature in ['LotFrontage', 'LotArea', '1stFlrSF', 'GrLivArea']:\n    test[feature] = np.log(test[feature])","99578c4c":"for feature in catg_features:\n    temp=data.groupby(feature)['SalePrice'].count()\/len(data)\n    temp_df=temp[temp>0.01].index\n    data[feature]=np.where(data[feature].isin(temp_df),data[feature],'rare_variables')\n    test[feature]=np.where(test[feature].isin(temp_df),test[feature],'rare_variables')","d9c5b91c":"for feature in catg_features:\n    labels_ordered=data.groupby([feature])['SalePrice'].mean().sort_values().index\n    labels_ordered={k:i for i,k in enumerate(labels_ordered,0)}\n    data[feature]=data[feature].map(labels_ordered)\n    test[feature]=test[feature].map(labels_ordered)","bcadca96":"features_to_scale=[feature for feature in data.columns if feature not in ['Id','SalePrice']]\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nscaler.fit(data[features_to_scale])\nscaler.fit(test[features_to_scale])","f1765d92":"data = pd.concat([data[['Id', 'SalePrice']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(data[features_to_scale]), columns=features_to_scale)],\n                    axis=1)\ntest = pd.concat([test[['Id']].reset_index(drop=True),\n                    pd.DataFrame(scaler.transform(test[features_to_scale]), columns=features_to_scale)],\n                    axis=1)","c3b60266":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\n\nX = data.drop(['Id', 'SalePrice'], axis = 1)\ny = data['SalePrice']\n\nfor feature in test.columns:\n    test[feature].fillna(test[feature].mean(), inplace = True)","58aa07c7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\nclf = RandomForestRegressor()\nclf.fit(X_train, y_train)","b414f946":"#Prediction\ny_pred = clf.predict(X_test)\n\naccuracy =  r2_score(y_pred, y_test)\naccuracy","2a4d29a0":"#Submission\ntest_pred = clf.predict(test.drop('Id', axis = 1))\nsubmission = pd.DataFrame({'Id': test.Id, 'SalePrice': test_pred})\nsubmission.to_csv('submission.csv', index=False)","2319c272":"### **`Handling Rare categories in categorical features`**","6ecbaddd":"### **`Temporal features`**","a42b5582":"***\n## *** Model building and training ***\n***","ec074648":"### **`Encoding categorical features`**","ed81aa7e":"I'll perform the following tasks\n- Data Analysis\n- Feature Engineering\n- Feature Selection\n- Model Building","dc3b2b70":"***\n## *** DATA ANALYSIS ***\n***","f831afa0":"***\n## *** FEATURE SCALING ***\n***","f8a67f6b":"### **`Handling Missing Values`**","d3a785b5":"### **`Log transformation of skewed continuous numerical features`**","7016836a":"***\n## *** FEATURE ENGINEERING ***\n***","faab3a68":"# ------ House Price Prediction ------"}}