{"cell_type":{"e72ddbeb":"code","ff89b576":"code","cccfa9ba":"code","cbbf9e35":"code","a2788186":"code","d9241820":"code","adfedb17":"code","b9cf0a99":"code","d950730e":"code","28acff5e":"code","b21bf03e":"code","96f563f3":"markdown","e0fe7520":"markdown","b10184fe":"markdown","f02b83c5":"markdown","c8f2b8be":"markdown","c25b37a2":"markdown","2cf670da":"markdown","3b54ce99":"markdown","cf32429c":"markdown","d791bb4c":"markdown"},"source":{"e72ddbeb":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n# *********************************************************\n#       Created:     2010-10-12   10:41\n#       Filename:    doSudoku.py\n#       Author:   ______\n#                    \/ \/  (_)\n#                   \/ \/_  \/\\____  ____  __   ______\n#                  \/ __ \\\/ \/ __ \\\/ __ \\\/ \/  \/ \/\n#                 \/ \/_\/ \/ \/ \/ \/ \/ \/ \/ \/ \/__\/ \/\n#                \/_____\/_\/_\/ \/_\/_\/ \/_\/\\___  \/\n#               ========== ______________\/ \/\n#                          \\______________\/\n#\n#       Email:       Binny@vip.163.com\n#       Group:       SP\n#       Create By:   Binny\n#       Purpose:     \u5bf9\u6570\u72ec\u8fdb\u884c\u6c42\u89e3\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u79d2\u89e3\u6240\u6709\u6570\u72ec\n#       Copyright:   TJYM(C) 2010 - All Rights Reserved\n#       LastModify:  2010-10-12\n# *********************************************************\n# \u5ffd\u7565\u8b66\u544a\u63d0\u793a\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport sys\nfrom pprint import pprint\nfrom IPython.display import Image\n#import pandas as pd\n\nsys.path.append(\"..\/input\")\n\nfrom sudokubase.sudoku.BnOptionParser import OptionParser\nfrom sudokubase.sudoku.SudokuTools import SudokuSamples, SudokuSolution\n\n__revision__ = \"$Revision: 0.1.2 $\"[11:-2]\nprogram_name = 'SudokuGame.py'","ff89b576":"def handleCommandLine(_argv):\n    # \u663e\u793a\u8fd9\u4e9b\u547d\u4ee4\u884c\u7684\u9009\u9879\n    # show_command = 'aAbcCdDehIlLNoOpsSTuUvz' #\u7cfb\u7edf\u5168\u90e8\u7f3a\u7701\u7684\u547d\u4ee4\n    show_command = 'acdefilmnN9stvV'  # debug\u4f7f\u7528\u7cfb\u7edf\u7f3a\u7701\u53c2\u6570\n    __parser = OptionParser(show_command=show_command)\n\n    # \u8fd9\u4e9b\u5df2\u7ecf\u5728addBaseOption\u4e2d\u4f7f\u7528\uff1aaAbcCdDehIlLNoOpsSTuUvz\n    # p\u6392\u5217\u7ec4\u5408\uff1apermutation and combination\n    __parser.add_option('-a', '--append_grid',\n                        dest='append_grid',\n                        help='Append the new array item to sudoku composition to set '\n                             'digit of grid, such as A21,A32,xxx...',\n                        cnhelp=u'\u5728\u57fa\u672c\u7684\u6570\u72ec\u8868\u4e2d\u589e\u52a0\u65b0\u7684\u5c1d\u8bd5\u9879\uff0c\u6bd4\u5982 A21,A32,xxx...')\n    __parser.add_option('-c', '--convert',\n                        dest='convert',\n                        help='Convert the sudoku string to matrix',\n                        cnhelp=u'\u5c06\u4e00\u4e32\u6570\u72ec\u4e32\u8f6c\u5316\u6210\u77e9\u9635\u7684\u5f62\u5f0f')\n    __parser.add_option('-C', '--check_self',\n                        dest='check_self',\n                        action='store_true',\n                        default=False,\n                        hide=True,\n                        help='Check the function of this program',\n                        cnhelp=u'\u81ea\u6211\u68c0\u6d4b\u7b54\u6848')\n    __parser.add_option('-d', '--no_result',\n                        dest='no_result',\n                        action='store_true',\n                        default=False,\n                        help='Don\\'t print the result of sudoku',\n                        cnhelp=u'\u4e0d\u60f3\u6253\u5370\u6570\u72ec\u7684\u7ed3\u679c')\n    __parser.add_option('-D', '--debug',\n                        dest='debug',\n                        action='store_true',\n                        default=False,\n                        hide=True,\n                        help='Print debug information',\n                        cnhelp=u'\u6253\u5370\u8c03\u8bd5\u4fe1\u606f')\n    __parser.add_option('-e', '--extension',\n                        dest='extension',\n                        help='The result file extension',\n                        cnhelp=u'\u7ed3\u679c\u6587\u4ef6\u7684\u547d\u540d\u540e\u7f00')\n    __parser.add_option('-f', '--file',\n                        dest='file',\n                        help='Import the sudoku from file, such as sudoku.lst',\n                        cnhelp=u'\u4ece\u6587\u4ef6\u4e2d\u8bfb\u51fa\u6240\u6709\u7684\u6570\u72ec\uff0c\u7136\u540e\u81ea\u52a8\u7834\u89e3\uff0c\u6bd4\u5982\u4ecesudoku.lst\u6587\u4ef6\u4e2d\u8bfb\u53d6')\n    __parser.add_option('-i', '--identify',\n                        dest='identify',\n                        help='Identify of sudoku sample, such as Sudoku_152561123165',\n                        cnhelp=u'\u6570\u72ec\u7684ID\uff0c\u6bd4\u5982 Sudoku_152561123165')\n    __parser.add_option('-l', '--list',\n                        dest='list',\n                        help='List all build-in sudoku samples, 1-list all '\n                             'by identify; 2-list by string',\n                        cnhelp=u'\u5217\u51fa\u6240\u6709\u5185\u90e8\u5305\u542b\u7684\u6848\u4f8b\uff0c1-\u5217\u51fa\u6240\u6709\u7684ID\uff1b2-\u5217\u51fa\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f')\n    __parser.add_option('-m', '--matrix',\n                        dest='matrix',\n                        help='The matrix with sudoku, use like 800000000003600000... or '\n                             '800000000,003600000,070090200...',\n                        cnhelp=u'\u8f93\u5165\u7684\u6570\u72ec\u77e9\u9635\uff08\u4e00\u5217\uff09\uff0c\u6bd4\u5982 80000000000... \u6216\u8005 '\n                               u'800000000,003600000,070090200...')\n    __parser.add_option('-n', '--guess_nine_star',\n                        dest='guess_nine_star',\n                        help='Append the nine-star tactic to sudoku to guess, such as '\n                             '1873,C589,2651,1673,2652..., '\n                             'the first char A,B,C is row and 1,2,3 is column',\n                        cnhelp=u'\u5728\u57fa\u672c\u7684\u6570\u72ec\u8868\u4e2d\u589e\u52a0\u4e5d\u661f\u6392\u5217\u7684\u5c1d\u8bd5\u9879\uff0c\u6bd4\u5982 1873,C589,2651,1673,2652...\u3002'\n                               u'\u5176\u4e2d\uff0c\u9996\u5b57\u6bcd\u7684 ABC \u4e3a\u6a2a\u5411\u6392\u5217\uff0c123 \u4e3a\u7eb5\u5411\u6392\u5217')\n    __parser.add_option('-N', '--assign_nine_star',\n                        dest='assign_nine_star',\n                        help='Assign the nine-star tactic for sudoku, such as '\n                             '1873387738,C589958895,2651165516,'\n                             '1673367736,2652265526..., the first char ABC '\n                             'is row and 123 is column',\n                        cnhelp=u'\u5728\u57fa\u672c\u7684\u6570\u72ec\u8868\u4e2d\u589e\u52a0\u4e5d\u661f\u6392\u5217\u7684\u5c1d\u8bd5\u9879\uff0c\u6bd4\u5982 1873387738,C589958895,2651165516,1673367736,'\n                               u'2652265526...\u3002\u5176\u4e2d\uff0c\u9996\u5b57\u6bcd\u7684 ABC \u4e3a\u6a2a\u5411\u6392\u5217\uff0c123 \u4e3a\u7eb5\u5411\u6392\u5217')\n    __parser.add_option('-9', '--nine_star',\n                        dest='nine_star',\n                        help='Print the all perhaps nine star method, input how many counts to output',\n                        cnhelp=u'\u6253\u5370\u51fa\u6240\u6709\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u4e5d\u661f\u6392\u5217\uff0c\u53ef\u4ee5\u5e26\u8f93\u51fa\u7684\u53c2\u6570')\n    __parser.add_option('-s', '--sample',\n                        dest='sample',\n                        action='store_true',\n                        default=False,\n                        help='Print the default build-in sudoku samples',\n                        cnhelp=u'\u6253\u5370\u7f3a\u7701\u7684\u7a0b\u5e8f\u81ea\u5e26\u6848\u4f8b\u6848\u4f8b')\n    __parser.add_option('-t', '--table_style',\n                        dest='table_style',\n                        default=1,\n                        help='Output with format, 1-default,2-graph table,3-excel tab,4-word table',\n                        cnhelp=u'\u8f93\u51fa\u8868\u683c\u7684\u5f62\u5f0f\uff0c1-\u7f3a\u7701\u7684\u5f62\u5f0f,2-\u56fe\u5f62\u5316\u8868\u683c,3-\u53ef\u4ee5\u7c98\u8d34\u5230Excel,4-Word\u6a21\u677f\u6587\u4ef6')\n    __parser.add_option('-V', '--verbose',\n                        dest='verbose',\n                        action='store_true',\n                        default=False,\n                        help='Print the detail information',\n                        cnhelp=u'\u6253\u5370\u8be6\u7ec6\u7684\u4fe1\u606f')\n    __parser.add_option('-v', '--version',\n                        dest='version',\n                        action='store_true',\n                        default=False,\n                        help='Show the version of this command',\n                        cnhelp=u'\u6253\u5370\u7a0b\u5e8f\u7248\u672c\u53f7')\n\n    program_name_prefix = '\\t' + os.path.basename(sys.argv[0]) + ' '\n    __parser.add_sample(program_name_prefix +\n        '-matrix 800000000003600000070090200050007000000045700000100030001000068008500010090000400 -a A21,'\n        'A32,A47 --verbose')\n    __parser.add_sample(program_name_prefix +\n        '-c 800000000003600000070090200050007000000045700000100030001000068008500010090000400')\n    __parser.add_sample('\\t\u6253\u5370Docx\u6587\u6863\uff1a\\n\\t' + program_name_prefix +\n        '-i WorldHardest_836792574571316885194 -t 4 -e WorldHardest')\n    __parser.add_sample('\\t\u8ba1\u7b97\u548c\u5c1d\u8bd5\u4e5d\u661f\u6392\u5217\uff1a\\n\\t' + program_name_prefix +\n        '-i WorldHardest_836792574571316885194 -n 1873,C589,2651,1673,2652 --verbose')\n    __parser.add_sample('\\t\u5f3a\u5236\u6307\u5b9a\u4e5d\u661f\u6392\u5217\uff1a\\n\\t' + program_name_prefix +\n        '-i WorldHardest_836792574571316885194 -N 1873387738,C589958895,2652265526 --verbose')\n    __parser.add_sample('\\t\u6df7\u5408\u4f7f\u7528\u4e5d\u661f\u6392\u5217\uff1a\\n\\t' + program_name_prefix +\n        '-i WorldHardest_836792574571316885194 -n 1873,C589 -N 2652265526 --verbose')\n    __parser.add_sample(program_name_prefix +\n        ' -i WorldHardest_836792574571316885194 -9 10 --verbose')\n    __parser.add_sample(program_name_prefix + '-s')\n    __parser.add_sample(program_name_prefix + '-l 2')\n    __parser.add_sample(program_name_prefix + '-f sudoku.lst')\n\n    # \u9996\u5148\u4ee5\u7a0b\u5e8f\u5b9a\u4e49\u7684\u9009\u9879\u4e3a\u51c6\uff0c\u5176\u6b21\u53ef\u4ee5\u53d6\u7cfb\u7edf\u5b9a\u4e49\u7684\u9009\u9879\n\n    (_options, _args) = __parser.parse_args(_argv)\n    return _options, _args, __parser\n\n\ndef getCommandLine(argv, handleCommandLine, exit=True):\n    \"\"\"\u6bcf\u4e2a\u7a0b\u5e8f\u5148\u6267\u884c\u8fd9\u79cd\u901a\u7528\u7684\u542f\u52a8\u8fc7\u7a0b\uff0c\u5305\u62ec\u89e3\u7801\u3001\u5206\u6790\u53c2\u6570\u7b49\"\"\"\n    options, args, parser = handleCommandLine(argv)\n    if exit and not argv[1:]:\n        parser.print_help()\n        # sys.exit(0)\n\n    # \u8fd4\u56de\u53c2\u6570\u5217\u8868\u4ee5\u53ca\u547d\u4ee4\u884c\u7b49\n    return options, args, parser","cccfa9ba":"def bnGetFileRows(file_name):\n    with open(file_name, 'r') as f:\n        content = [line.strip() for line in f]\n    return content","cbbf9e35":"def printSudoku(number: int,\n                options = None,\n                sample: [] = None,\n                sample_id: str = '',\n                append_grid: [] = None,\n                list_nine_star: [] = None,\n                file_extension: str = '',\n                table_type: int = 1,\n                print_result: bool = True,\n                verbose: bool = False,\n                is_debug: bool = False) -> None:\n    \n    cls_sudoku = SudokuSolution(\n        matrix=sample,\n        file_extension=file_extension,\n        verbose=verbose,\n        is_debug=is_debug)\n    cls_sudoku.table_type = table_type\n    __combine_matrix = cls_sudoku.getCombineMatrix(sample)\n    _cls_samples = SudokuSamples()\n\n    if sample_id == '':\n        sample_id = _cls_samples.getIDFromMatrix(sample)\n\n    print('\\n%s' % ('=' * 60))\n    print('=%s\u7b2c%d\u9898\u7684\u6570\u72ecID\uff1a' % (' ' * 5, number))\n    print('=%s%s' % (' ' * 7, sample_id))\n    print('=%s\u5408\u6210\u5b57\u4e32ID\uff1a' % (' ' * 5))\n    # print('=%s%s' % (' '*7, combine_matrix))\n    print('=%s%s' % (' ' * 7, __combine_matrix[:len(__combine_matrix) \/\/ 2]))\n    print('=%s%s' % (' ' * 7, __combine_matrix[len(__combine_matrix) \/\/ 2:]))\n    print('%s' % ('=' * 60))\n    print('\\n\u539f\u9898\u76ee\uff1a')\n    if file_extension != '':\n        filename = 'SudokuExercise%s.docx' % file_extension\n    else:\n        filename = 'SudokuExercise.docx'\n    cls_sudoku.printSudokuTable(table_type=table_type, filename=filename)\n    print()\n\n    # \u5728\u67d0\u4e2a\u4f4d\u7f6e\u589e\u52a0\u4e00\u4e2a\u5df2\u77e5\u7684\u6570\u5b57\n    if append_grid is not None:\n        if len(append_grid) > 0:\n            __new_sample = cls_sudoku.getAppendGridDigit(\n                sample, append_grid=append_grid)\n        else:\n            __new_sample = sample\n    else:\n        __new_sample = sample\n\n    print('\u57fa\u672c\u7684\u586b\u5145\u5982\u4e0b\uff1a')\n    sudoku_vector = cls_sudoku.matrixToVector(__new_sample)\n    full_fill_number = cls_sudoku.getBaseFillMatrix(\n        sudoku_vector, is_matrix=False)\n\n    #df = pd.DataFrame(full_fill_number)\n    # \u4fdd\u5b58 dataframe\n    #.to_csv('full_fill_number.csv')\n    if file_extension != '':\n        filename = 'SudokuBaseFilled%s.docx' % file_extension\n    else:\n        filename = 'SudokuBaseFilled.docx'\n    cls_sudoku.printTable(\n        full_fill_number,\n        table_type=table_type,\n        filename=filename)\n    print()\n\n    filled_result = cls_sudoku.fillGuessNumbers(\n        __new_sample, lst_nine_star=list_nine_star)\n    print('\\n\u8ba1\u7b97\u540e\u7684\u586b\u5145\u7ed3\u679c\u4e3a\uff1a')\n    if file_extension != '':\n        filename = 'SudokuCalcFilled%s.docx' % file_extension\n    else:\n        filename = 'SudokuCalcFilled.docx'\n    cls_sudoku.printTable(\n        filled_result,\n        table_type=table_type,\n        filename=filename)\n\n    # \u770b\u770b\u6709\u6ca1\u6709\u53ef\u7528\u7684\u4e5d\u661f\u6392\u5217\n    if options is not None and options.nine_star is not None:\n        cls_sudoku.analyseNineStar()\n\n    if print_result:\n        print('\\n\u7b2c%d\u9898\u7684\u7b54\u6848\u4e3a\uff1a' % number)\n        cls_sudoku.doSudoku()\n        # \u83b7\u53d6\u6700\u540e\u7684\u7ed3\u679c\uff1a\n        if options is not None and options.debug:\n            __combine_matrix = cls_sudoku.getCombineMatrix(\n                cls_sudoku.calculate_result_matrix)\n            __new_matrix = cls_sudoku.getSplitMatrix(__combine_matrix)\n            if len(__new_matrix) > 0:\n                pprint(__new_matrix)\n\n\ndef printSamples(number: int = 0,\n                 options = None,\n                 identify: str = None,\n                 append_grid: [] = None,\n                 list_nine_star: [] = None,\n                 file_extension: str = '',\n                 table_type: int = 1,\n                 print_result: bool = True,\n                 verbose: bool = False,\n                 is_debug: bool = False) -> None:\n    cls_p_samples = SudokuSamples()\n    __p_sample = cls_p_samples.getSample(identify)\n    printSudoku(\n        number = number,\n        sample=__p_sample,\n        options=options,\n        sample_id=identify,\n        append_grid=append_grid,\n        list_nine_star=list_nine_star,\n        file_extension=file_extension,\n        table_type=table_type,\n        print_result=print_result,\n        verbose=verbose,\n        is_debug=is_debug)\n","a2788186":"def main(argv):\n    m_default_language = None  # \u8fd9\u91cc\u7528\u4e2d\u6587\u5e2e\u52a9\n\n    if m_default_language is None:\n        m_version = u'  \u6570\u72ec\u7814\u7a76\u5de5\u5177\uff08v%s\uff09binny@vip.163.com' % __revision__\n    else:\n        m_version = '   Sudoku research tools. Version: %s, binny@vip.163.com' % __revision__\n\n    # \u8fd4\u56de\u53c2\u6570\u5217\u8868\u4ee5\u53ca\u547d\u4ee4\u884c\u7b49\n    options, args, parser = getCommandLine(\n        argv, handleCommandLine, exit=False)\n\n    if options.version:\n        print(m_version)\n\n    options.table_style = int(options.table_style)\n    if options.list is not None:\n        __cls_samples = SudokuSamples()\n        ids = [key for key in __cls_samples.samples.keys()]\n        __index = 0\n        for __i in ids:\n            __index += 1\n            __sample = __cls_samples.getSample(__i)\n            sudoku = SudokuSolution(matrix=__sample, is_debug=options.debug)\n            if options.list == '1':\n                sudoku.table_type = options.table_style\n                print('\u6570\u72ec%d\uff0cID\uff1a%s' % (__index, __i))\n                sudoku.printSudokuTable(table_type=options.table_style)\n                print()\n            elif options.list == '2':\n                combine_matrix = sudoku.getCombineMatrix(__sample)\n                # print('\u6570\u72ec%d\uff0cID\uff1a%s' % (pos_index, __i))\n                print('\\t%d\uff1a' % __index, combine_matrix)\n\n    cls_sudoku_dummy = SudokuSolution()\n    if options.convert is not None:\n        new_matrix = cls_sudoku_dummy.getSplitMatrix(options.convert)\n        if not new_matrix:\n            print('\u8f93\u5165\u7684\u6570\u636e\u683c\u5f0f\u9519\u8bef\u6216\u8005\u957f\u5ea6\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\uff01')\n        else:\n            pprint(new_matrix)\n\n    if options.extension is not None:\n        __file_extension = options.extension\n    else:\n        __file_extension = ''\n\n    if options.sample:\n        __cls_samples = SudokuSamples()\n        samples_id = [key for key in __cls_samples.samples.keys()]\n        for __index in range(len(samples_id)):\n            printSamples(\n                number=__index + 1,\n                identify=samples_id[__index],\n                options=options,\n                verbose=options.verbose,\n                file_extension=__file_extension)\n\n    __append_grid = None\n    if options.append_grid is not None:\n        __append_grid = cls_sudoku_dummy.getSplitAppendGrid(\n            options.append_grid)\n\n    guess_nine_star = None\n    if options.guess_nine_star is not None:\n        guess_nine_star = cls_sudoku_dummy.getSplitNineStar(\n            options.guess_nine_star, is_full=False)\n\n    assign_nine_star = None\n    if options.assign_nine_star is not None:\n        assign_nine_star = cls_sudoku_dummy.getSplitNineStar(\n            options.assign_nine_star, is_full=True)\n\n    lst_nine_star = []\n    # \u53ef\u4ee5\u6df7\u5408\u5728\u4e00\u8d77\u5904\u7406\uff0c\u56e0\u4e3a\u957f\u5ea6\u4e0d\u540c\n    if guess_nine_star is not None:\n        lst_nine_star = guess_nine_star\n\n    if assign_nine_star is not None:\n        lst_nine_star += assign_nine_star\n\n    if not lst_nine_star:\n        lst_nine_star = None\n\n    if options.file is not None:\n        if not os.path.exists(options.file):\n            print('\u8f93\u5165\u7684\u6570\u72ec\u6587\u4ef6 %s \u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5' % options.file)\n        else:\n            sudoku_list = bnGetFileRows(options.file)\n            __index = 0\n            for row in sudoku_list:\n                if row.strip() != '':\n                    new_matrix = SudokuSolution().getSplitMatrix(row)\n                    if not new_matrix:\n                        print('\u8f93\u5165\u7684\u6570\u636e\u683c\u5f0f\u9519\u8bef\u6216\u8005\u957f\u5ea6\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\uff1a\\n\\t%s' % row)\n                    else:\n                        __index += 1\n\n                        printSudoku(\n                            __index + 1,\n                            sample=new_matrix,\n                            options=options,\n                            append_grid=__append_grid,\n                            list_nine_star=lst_nine_star,\n                            file_extension=__file_extension,\n                            table_type=options.table_style,\n                            print_result=not options.no_result,\n                            verbose=options.verbose,\n                            is_debug=options.debug)\n\n    if options.matrix is not None:\n        new_matrix = SudokuSolution().getSplitMatrix(options.matrix)\n        if not new_matrix:\n            print('\u8f93\u5165\u7684\u6570\u636e\u683c\u5f0f\u9519\u8bef\u6216\u8005\u957f\u5ea6\u9519\u8bef\uff0c\u8bf7\u68c0\u67e5\uff01')\n        else:\n            printSudoku(\n                1,\n                sample=new_matrix,\n                options=options,\n                append_grid=__append_grid,\n                list_nine_star=lst_nine_star,\n                file_extension=__file_extension,\n                table_type=options.table_style,\n                print_result=not options.no_result,\n                verbose=options.verbose,\n                is_debug=options.debug)\n\n    if options.identify is not None:\n        __cls_samples = SudokuSamples()\n        if __cls_samples.exist(options.identify):\n            __sample = __cls_samples.getSample(options.identify)\n            printSudoku(\n                1,\n                sample=__sample,\n                options=options,\n                sample_id=options.identify,\n                append_grid=__append_grid,\n                list_nine_star=lst_nine_star,\n                file_extension=__file_extension,\n                table_type=options.table_style,\n                print_result=not options.no_result,\n                verbose=options.verbose,\n                is_debug=options.debug)\n        else:\n            print('\u4e0d\u5b58\u5728ID\u4e3a %s \u7684\u6570\u72ec' % options.identify)\n\n    if options.check_self:\n        __sample_id = 'WorldHardest_836792574571316885194'\n        cls_samples = SudokuSamples()\n        __sample = cls_samples.getSample(__sample_id)\n        sudoku = SudokuSolution(\n            matrix=__sample,\n            file_extension=__file_extension,\n            verbose=options.verbose,\n            is_debug=options.debug)\n\n        # \u5728\u67d0\u4e2a\u4f4d\u7f6e\u589e\u52a0\u4e00\u4e2a\u5df2\u77e5\u7684\u6570\u5b57\n        if __append_grid is not None and len(__append_grid) > 0:\n            new_sample = sudoku.getAppendGridDigit(\n                __sample, append_grid=__append_grid)\n        else:\n            new_sample = __sample\n\n        sudoku.table_type = options.table_style\n        sudoku.test_mode = True\n        sudoku.setResult(cls_samples.getResult(__sample_id))\n        filled = sudoku.fillGuessNumbers(\n            new_sample, lst_nine_star=lst_nine_star)\n        sudoku.printTable(filled)\n        \ndef doMain(command: str):\n    # \u7b80\u5355\u5206\u6790\n    new_command = command.replace('  ', ' ')\n    command_list = [program_name] + [item.strip() for item in new_command.split(' ') if len(item.strip()) != 0]\n    main(command_list)\n    \ndef doHelp():\n    try:\n        doMain('-h')\n    except BaseException:\n        pass\n    finally:\n        pass","d9241820":"doHelp()","adfedb17":"Image(\"..\/input\/sudokubase\/\u7ec3\u4e60\u7eb8.png\")","b9cf0a99":"doMain('-i WorldHardest_836792574571316885194 -n 1873,C589 -N 2652265526 --verbose')","d950730e":"doMain('--sample')","28acff5e":"sudoku_sample_file = '..\/input\/sudokubase\/sudoku.lst'\nrows = bnGetFileRows(sudoku_sample_file)\nprint('\\n'.join(rows))","b21bf03e":"doMain('-f %s' % sudoku_sample_file)","96f563f3":"## \u7528\u4e8e\u6253\u5370\u6570\u72ec\u7684\u4f8b\u5b50","e0fe7520":"## \u6253\u5370\u6240\u6709\u7684\u5185\u7f6e\u6570\u72ec\u9898\u76ee","b10184fe":"# \u7a0b\u5e8f\u7684\u529f\u80fd\n\n\u4ee5\u4e0a\u7a0b\u5e8f\u5df2\u7ecf\u51c6\u5907\u597d\uff0c\u5f00\u542f\u7814\u7a76\u4e4b\u65c5\u4e86\u3002\n\n* \u53cc\u51fb\u201c\u751f\u6210\u7ec3\u4e60\u7eb8\u548c\u7ed3\u679c\u6587\u4ef6.bat\u201d\uff0c\u751f\u6210\u7ec3\u4e60\u9898\u548c\u7b54\u6848\uff0c\u5176\u4e2d\uff1a\n\n\t**SudokuExercise.docx**\uff1a\u751f\u6210\u7684\u7ec3\u4e60\u9898\n    \n\t**SudokuFilled.docx**\uff1a\u8ba1\u7b97\u673a\u7ed3\u679c\u8ba1\u7b97\u4ee5\u540e\uff0c\u751f\u6210\u7684\u6700\u7b80\u586b\u5145\uff0c\u514d\u5f97\u52a8\u8111\u7b4b\u3002\u4e3b\u8981\u662f\u6392\u9664\u6cd5\n    \n\t**SudokuResult.docx**\uff1a\u672c\u9898\u7684\u6700\u7ec8\u7b54\u6848\n\t\n* \u53ef\u4ee5\u7528\u767d\u5c4f\u5de5\u5177 **Pointofix.exe** \u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u505a\n\n* \u53ef\u4ee5\u81ea\u5df1\u8bbe\u7f6e\u65b0\u7684\u7ec3\u4e60\u9898\uff0c\u53ea\u8981\u4fee\u6539\u201c\u751f\u6210\u7ec3\u4e60\u7eb8\u548c\u7ed3\u679c\u6587\u4ef6.bat\u201d\u4e2d\u7684\u5185\u5bb9\u4e3a\u65b0\u7684\u7ec3\u4e60\u5373\u53ef\n\n\t\u5176\u4e2d\uff1a\n    \n\t\tdoSudoku.exe -m \"800000000003600000070090200050007000000045700000100030001000068008500010090000400\" -t 4 -e WorldHardest\n\t\t\n\t\t\u8fd9\u4e2a\u201c800...\u201d\u6570\u5b57\u662f\u6570\u72ec\u5168\u90e8\u8fde\u8d77\u6765\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u8be5\u4e32\u662f\u4ee5\u4e0b\u6570\u72ec\uff1a\n        \n\t\t\t+------+---+---+---+---+---+---+---+---+---+\n\t\t\t| \u7f16\u53f7 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |\n\t\t\t+------+---+---+---+---+---+---+---+---+---+\n\t\t\t|  A   | 8 |   |   |   |   |   |   |   |   |\n\t\t\t|  B   |   |   | 3 | 6 |   |   |   |   |   |\n\t\t\t|  C   |   | 7 |   |   | 9 |   | 2 |   |   |\n\t\t\t|  D   |   | 5 |   |   |   | 7 |   |   |   |\n\t\t\t|  E   |   |   |   |   | 4 | 5 | 7 |   |   |\n\t\t\t|  F   |   |   |   | 1 |   |   |   | 3 |   |\n\t\t\t|  G   |   |   | 1 |   |   |   |   | 6 | 8 |\n\t\t\t|  H   |   |   | 8 | 5 |   |   |   | 1 |   |\n\t\t\t|  I   |   | 9 |   |   |   |   | 4 |   |   |\n\t\t\t+------+---+---+---+---+---+---+---+---+---+\n            \n\t\t\u8fde\u8d77\u6765\u7684\u4e32\uff0c\u7a7a\u683c\u5730\u65b9\u586b\u51990\uff0c\u603b\u5171\u6709 9x9=81 \u4e2a\u6570\u5b57\n        \n\t\t-t 4\uff0c\u7684\u53c2\u6570\u662f\u751f\u6210Word\u7684\u7ec3\u4e60\u9898\u6587\u4ef6\n        \n\t\t-e WorldHardest\uff0c\u751f\u6210\u7684\u6587\u4ef6\u4e2d\u52a0\u4e0a\u8fd9\u4e2a\u540e\u7f00\u4ee5\u533a\u522b\n\t\t\n\t\t\u4ee5\u4e0a\u7684\u5185\u5bb9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u8fbe\u5230\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u72ec\u662f\u7cfb\u7edf\u5185\u7f6e\u7684\uff0c\u6709\u56fa\u5b9a\u7684\u7f16\u53f7\uff1a\n        \n\t\tdoSudoku.exe -i \"WorldHardest_836792574571316885194\" -t 4 -e WorldHardest\n\n* \u6253\u5f00\u7ec3\u4e60\u9898 SudokuFilled.docx \u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u7528 Pointofix.exe \u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u505a\u9898\u4e86\uff0c\u53ef\u4ee5\u9009\u53d6\u201cX\u201d\u6765\u5220\u9664\u76f8\u5e94\u7684\u6570\u5b57\uff0c\u7528\u66f2\u7ebf\u5de5\u5177\u201c~\u201d\u753b\u786e\u5b9a\u597d\u7684\u6570\u5b57\uff0c\u6709\u95ee\u9898\u53ef\u4ee5\u7528\u6a61\u76ae\u6aab\u64e6\u9664\u3002\n\n* \u53ef\u4ee5\u901a\u8fc7\u586b\u5199\u5df2\u77e5\u7684\u6570\u72ec\u4f4d\u7f6e\uff0c\u6765\u751f\u6210\u7b80\u6d01\u7684\u7b54\u9898\u8f85\u52a9\u5361\u6765\u52a0\u5feb\u7b54\u9898\u901f\u5ea6\uff0c\u6bd4\u5982\u5df2\u77e5 F3\u4e3a7\u3001H6\u4f4d\u4e3a6\u3001I5\u4f4d\u4f4d1\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\u65b0\u7684\u7b54\u9898\u8f85\u52a9\u5361\uff1a\n\tdoSudoku.exe -m \"800000000003600000070090200050007000000045700000100030001000068008500010090000400\" -a f37,h66,i51 -t 4\n\t\n* \u4e3a\u4e86\u5229\u7528\u4e5d\u661f\u6392\u5217\u6765\u7b54\u9898\uff0c\u53ef\u4ee5\u8ba9\u7cfb\u7edf\u8f85\u52a9\u751f\u6210\u4f9b\u6311\u9009\u7684\uff0c\u5217\u51fa\u7684\u5305\u542b\u7cfb\u7edf\u6253\u5206\uff0c\u5982\u679c\u662f220\u5206\u5219\u4e00\u5b9a\u662f\u53ef\u4ee5\u7528\u7684\u4e5d\u661f\u6392\u5217\uff1a\n\n\t\u672c\u5de5\u5177\u4e2d\uff0c\u5c06\u6570\u72ec\u5206\u6210\u4e09\u884c\u548c\u4e09\u5217\uff0c\u6bcf\u4e2a\u6570\u5b57\u7b2c\u4e00\u4e2a\u4e3a\u884c\u5217\u7f16\u53f7\uff0c\u884c\u7f16\u53f7\u7528ABC\u8868\u793a\uff0c\u5217\u7f16\u53f7\u7528123\u8868\u793a\uff0c\u6240\u4ee5\uff0c\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e3a\uff1a1873\u8868\u793a\u9996\u5148\u5728\u7b2c\u4e00\u5217\uff081\u30014\u30017\u5bab\u683c\uff09\u4f7f\u7528\u6570\u5b57\u7ec4\u5408873\u3002\n    \n\t-n 1873,C589 -N 2652265526 \u8868\u793a\u4e3a\uff0c\u5982\u679c\u662f-n \u547d\u4ee4\uff0c\u5219\u7cfb\u7edf\u81ea\u52a8\u6839\u636e\u5f53\u524d\u6570\u72ec\u7684\u60c5\u51b5\uff0c\u5339\u914d\u6700\u4f73\u7684\u7ec4\u5408\u3002 -N 2652265526\u5219\u8868\u793a\uff0c\u5b8c\u5168\u7531\u7528\u6237\u81ea\u884c\u6307\u5b9a\u6392\u5217\uff0c2652265526\u4e3a\u7b2c\u4e8c\u5217\uff082\u30015\u30018\u5bab\u683c\uff09\u7b2c\u4e00\u4e2a\u6392\u5217\u4e3a652\uff0c\u7b2c\u4e8c\u4e2a\u4e3a265\uff0c\u7b2c\u4e09\u4e2a\u4e3a526\u3002\n    \n\tdoSudoku.exe -i WorldHardest_836792574571316885194 -n 1873,C589 -N 2652265526","f02b83c5":"## \u5206\u6790\u548c\u6253\u5370\u6307\u5b9a\u7684\u6587\u4ef6\n\n\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff0c\u6bcf\u884c\u552f\u4e00\u4e2a\u6570\u72ec\u7684\u9898\u76ee\u3002","c8f2b8be":"## \u6253\u5370\u5e2e\u52a9","c25b37a2":"**\u9488\u5bf9\u6bcf\u4e2a\u9898\u76ee\uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u751f\u6210Word\u6587\u4ef6\uff08\u53ea\u8981\u52a0\u4e0a -t 4 \u9009\u9879\uff09\uff0cWord\u6587\u4ef6\u4e2d\u5305\u542b\u4ee5\u4e0b\u7684\u6570\u72ec\u7ec3\u4e60\u7eb8\uff0c\u65b9\u4fbf\u5bf9\u6570\u72ec\u8fdb\u884c\u7814\u7a76\u3002**","2cf670da":"# \u6570\u72ec\u7814\u7a76\n\u63a5\u624b\u4e00\u4e2a\u6240\u8c13\u4e16\u754c\u6700\u96be\u6570\u72ec\u9898\u76ee\uff0c\u56e0\u6b64\u5b8c\u5584\u4e86\u8fd9\u4e2a\u4ee3\u7801\uff0c\u8ba9\u8ba1\u7b97\u673a\u6309\u7167\u6211\u4eec\u7684\u89e3\u9898\u601d\u8def\u505a\u7834\u89e3\u3002\n\n\u53d1\u73b0\u6700\u6709\u6548\u7684\u65b9\u5f0f\u8fd8\u662f\u901a\u8fc7\u4e5d\u661f\u6392\u5217\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002","3b54ce99":"## \u7528\u4e5d\u661f\u6392\u5217\u65b9\u6cd5\u7834\u89e3\n","cf32429c":"# \u4e3b\u7a0b\u5e8f\n\u672c\u6765\u5e94\u8be5\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\uff0c\u800c\u9488\u5bf9 Notebook \uff0c\u6539\u6210\u624b\u52a8\u8f93\u5165\u547d\u4ee4\u884c\u7684\u65b9\u5f0f\u8fd0\u884c\u3002","d791bb4c":"## \u5904\u7406\u547d\u4ee4\u884c\u7684\u95ee\u9898\n\n\u8fd9\u91cc\u5f88\u591a\u529f\u80fd\uff0c\u4e3b\u8981\u8fd8\u662f\u7528\u4e8e\u7814\u7a76\u6570\u72ec\u7684\u89e3\u9898\u601d\u8def\uff0c\u867d\u7136\u672c\u7a0b\u5e8f\u76f4\u63a5\u79d2\u7834\u3002"}}