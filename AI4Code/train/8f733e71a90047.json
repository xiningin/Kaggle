{"cell_type":{"f664082b":"code","0bdcbb9a":"code","03550359":"code","e17ea8a9":"code","d2ba8699":"code","041fa3e3":"code","98ba3a7c":"code","7a00cccf":"code","77de8b8a":"code","f7933cd9":"code","77993bb4":"code","ed616bdd":"code","22279ac7":"markdown","551d61e4":"markdown","d537f6e8":"markdown","b709f0ac":"markdown","40c9f4f1":"markdown","0b4ac102":"markdown","8daf6397":"markdown","8b379c44":"markdown","bcc611d0":"markdown","2d4a058a":"markdown","a31b9c87":"markdown","864990c6":"markdown","f90403f8":"markdown","f4d8ae95":"markdown"},"source":{"f664082b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n","0bdcbb9a":"# Importing necessary libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","03550359":"# Reading in the data\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","e17ea8a9":"train.head()","d2ba8699":"# Calculating the number of null values\n\ntrain.isnull().sum()","041fa3e3":"train['Sex'].value_counts()","98ba3a7c":"train['Embarked'].value_counts()","7a00cccf":"train['Embarked'].value_counts(normalize=True)","77de8b8a":"train['Embarked'].value_counts(ascending=True)","f7933cd9":"train['Embarked'].value_counts(dropna=False)","77993bb4":"# applying value_counts on a numerical column\ntrain['Fare'].value_counts()","ed616bdd":"train['Fare'].value_counts(bins=7)","22279ac7":"# 4. value_counts() with NaN values\n\nBy default, count of null values are excluded. However, this can be reversed by setting `dropna=False`.","551d61e4":"value_counts() is a very useful method and helps to get a sense of data easily.\n\n## References\n\n[Documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html)","d537f6e8":"Let's look at the first few rows to get an idea about the dataset","b709f0ac":"This shows there are 2 null values in the `Embarked' column.","40c9f4f1":"# 1. value_counts() with default parameters\n\nLet\u2019s call the value_counts() on the Embarked column of the dataset. This will return the count of unique occurrences in this column.","0b4ac102":"This doesn't convey much since the function above has given a count of every available Fare amount. Instead, let's group them into 7 bins.","8daf6397":"# 2. value_counts() with relative frequencies of the unique values.\n\nSometimes, getting a percentage of the total is a better criteria then the count. By setting `normalize =True`,the object returned will contain the relative frequencies of the unique values. `normalize` is set to `False` by default.","8b379c44":"Age, Cabin and Embarked columns have null values","bcc611d0":"Binning makes it easy to understand the idea being conveyed. We can easily see that most of the people out of the total population paid less than 73.19 for their ticket.","2d4a058a":"# 3. value_counts() in ascending order\n\n1. Again, to sort the results obtained in ascending order, simply set the `ascending` parameter to `True`, which is again set to `False` by default. ","a31b9c87":"# Getting more value from the Pandas\u2019 value_counts()\n\n![](https:\/\/miro.medium.com\/max\/1280\/1*lOht9o73PICksasDplo0Pg.jpeg)\n\nData exploration is an important aspect of the Machine Learning pipeline. Before we decide which model to train and how many to train, we must have an idea of what our data contains. The Pandas library is equipped with a number of useful functions for this very purpose and value_counts is one of them. This function returns the count of unique items in a pandas dataframe. However, most of the time, we end up using value_counts with the default parameters. So in this short article, I\u2019ll show you how to achieve more by altering the default parameters.\n","864990c6":"The function returns the count of all unique values in the given index in descending order, without any null values. The function returns the count of all unique values in the given index in descending order without any null values. We can quickly see that the maximum people embarked from Southampton, followed by Cherbourg and then Queenstown.","f90403f8":"# Value_Counts()\n\nThe [value_counts() function](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html) returns an object containing counts of unique values.This means it enables us to count the number of unique elements in a column of a Pandas dataframe.\n\n### Syntax\n\n`Series.value_counts()`\n\n### Parameters\n\n![](https:\/\/miro.medium.com\/max\/597\/1*j5Gi_-E-b4h6tqtbYsxTrA.png)\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.value_counts.html\n\nLet's see how we can use it in our analysis","f4d8ae95":"# 5. value_counts() with bins\nvalue_counts() can also be used to bin continuous data into discrete intervals with the help of `bin` parameter.So rather than counting one can group the values in bins. This option works only with numerical data."}}