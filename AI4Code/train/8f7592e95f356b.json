{"cell_type":{"0ebf041e":"code","5b48ccb5":"code","251d1bda":"code","2f29f5d4":"code","aa592eba":"code","68ba94b2":"code","f02c6d13":"code","919e8b7e":"code","54865cd7":"code","2b0b9688":"code","cd9b3160":"code","aa0ff86c":"code","b82547d2":"code","5575e4d3":"code","1015ba72":"code","97b2c438":"code","68355b3b":"code","8e6ca718":"code","d8baf9ba":"code","e731f98a":"code","cef2ffb4":"code","6d41cf8c":"code","3efc074e":"code","1d806d07":"code","8cf9422b":"code","ebe3d60a":"code","79bb38cd":"code","a94af039":"code","5c86e7f9":"code","5585c4f5":"code","8c7e2a06":"code","f2eff416":"code","21da812d":"code","b03d68c6":"code","24ee01c8":"code","8867856f":"code","3941d2db":"code","832b50ac":"code","cf5dccd3":"code","6060c17c":"code","34eefb14":"code","95da2801":"code","7286ab86":"code","fec397d1":"code","f0b4f156":"code","37c7fa8e":"code","03d1fde8":"code","4c2efcef":"code","7b57033a":"code","74d174f3":"code","50267870":"code","d7c6746e":"code","d6b62d21":"code","aaf22f96":"code","8a9e659c":"code","d7bd99e0":"code","5baf94e2":"code","a9355634":"code","7abd59c2":"code","4bb166cf":"code","737a0ac3":"code","b8a31a87":"code","ea6828d5":"code","11e3f8be":"code","c2d2efe4":"code","dd1324b2":"code","6f7c2c2b":"code","ead4bd5e":"code","68fe77fd":"code","69a80895":"code","ab69bf25":"code","20dcc401":"code","19c0900e":"code","6cd0a6b0":"code","dd4e1839":"code","0669a76f":"code","1a9e6301":"code","38ea1001":"code","93967335":"code","d43cae74":"code","65b25900":"code","f29f7996":"code","52c1259e":"code","8e96107f":"code","826bcb43":"code","8dd09a42":"code","74688aff":"code","d6ff0e2e":"code","a68ee230":"code","460e980d":"code","acc32e2b":"code","e5b8ba6c":"code","9f580632":"code","6cf3d469":"code","0ca3edaa":"code","06a7e9bc":"code","903e42b2":"code","b592d78c":"code","ef11e5c3":"code","ae6e0ed7":"code","1d2ad71b":"code","577cd7ff":"code","6b906b1c":"code","77e999dd":"code","a796b6d5":"code","dc36fb46":"code","43ae281d":"code","862b23eb":"code","91f8d757":"code","d75470f2":"code","3c982d18":"code","01318837":"code","3100a0c3":"code","5c984bc9":"code","b78c0fec":"code","341fb857":"code","12fb2289":"code","5dc61538":"code","6a6affcf":"code","6f88c910":"code","b1366b7b":"code","eda50e22":"code","ed341701":"code","8305f5e0":"code","3a0e7a6e":"code","92505156":"code","d03dc592":"code","1eb5d6cc":"code","a52e47f6":"code","226e83cf":"code","bf7d5361":"code","0cb24872":"code","e64032e0":"code","39b93347":"code","1ae7e152":"code","ead572eb":"markdown","3b1f86a6":"markdown","22b0dd1c":"markdown","7b8e19b9":"markdown","d558ee56":"markdown","b8346514":"markdown","09e6edb0":"markdown","d7447ae4":"markdown","b4fdaf9b":"markdown","1da5b14b":"markdown","9802c39a":"markdown","39d2ffdc":"markdown","85a91f53":"markdown","de454dab":"markdown","0bda4771":"markdown","3ae0aef4":"markdown","dff45e4d":"markdown","a2396937":"markdown","89991dd1":"markdown","a96e4cb9":"markdown","219f90dc":"markdown","586edb85":"markdown","277bdfc9":"markdown","b9ed0888":"markdown","f65c89f4":"markdown","73a2c70e":"markdown","cfd3b7ff":"markdown","a2353609":"markdown","6186563f":"markdown","dcd312c2":"markdown","b190e425":"markdown","7dff8402":"markdown","6be65a65":"markdown","68044c75":"markdown","a7c14006":"markdown","64e1d1a3":"markdown","8db45db8":"markdown","121dd0ea":"markdown","3600a50d":"markdown","171f8f11":"markdown","7ff114d0":"markdown","8e74e9f8":"markdown","212da812":"markdown","d4aa669a":"markdown","a9352c5b":"markdown","91f34330":"markdown","60ec450e":"markdown","07c31b83":"markdown","945d5f33":"markdown","c5455a5a":"markdown","d0097739":"markdown","138576b3":"markdown","79e3d1cb":"markdown","c75d22ad":"markdown","da6a9c0d":"markdown","50f281fd":"markdown","f5f3cf6f":"markdown","1f596080":"markdown"},"source":{"0ebf041e":"!pip install lifelines==0.24.9","5b48ccb5":"import lifelines\nprint('The lifelines version is {}.'.format(lifelines.__version__)) \n# Must be version 0.24.9 in order to execute all the cells in this Notebook","251d1bda":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#from lifelines import *\nfrom lifelines import KaplanMeierFitter\nfrom lifelines.utils import median_survival_times\nfrom lifelines import CoxPHFitter\nfrom sklearn.model_selection import train_test_split","2f29f5d4":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 500)","aa592eba":"df = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndf.head()","68ba94b2":"df.info()","f02c6d13":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(7,5)})\n\nsns.countplot(x=\"gender\", \n              data = df, \n              color = 'gray'\n             ).set_title('Gender Distribution Among the Customers')","919e8b7e":"sns.countplot(x = 'SeniorCitizen', hue = 'Partner', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Distribution of Senior Citizens grouped by Partners')","54865cd7":"sns.countplot(x = 'Dependents',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Customers with Dependents')","2b0b9688":"sns.countplot(x = 'Dependents', hue = 'Partner', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Dependents and Partner Distribution among the Customers')","cd9b3160":"sns.countplot(x = 'Dependents', hue = 'SeniorCitizen', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Dependents and Senior Citizen Distribution')","aa0ff86c":"sns.countplot(x = 'PhoneService', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Customers with Phone Service')","b82547d2":"sns.countplot(x = 'MultipleLines',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Gender Distribution Among the Three Classes of Population')","5575e4d3":"sns.countplot(x = 'PhoneService', hue = 'MultipleLines',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Phone Service and Multiple Lines')","1015ba72":"sns.countplot(x = 'InternetService', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service')","97b2c438":"sns.countplot(x = 'OnlineSecurity', \n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Online Security')","68355b3b":"sns.countplot(x = 'InternetService', hue = 'OnlineSecurity',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Online Security')","8e6ca718":"sns.countplot(x = 'InternetService', hue = 'OnlineBackup',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Online Backup')","d8baf9ba":"sns.countplot(x = 'InternetService', hue = 'DeviceProtection',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Device Protection')","e731f98a":"sns.countplot(x = 'InternetService', hue = 'TechSupport',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Tech Support')","cef2ffb4":"sns.countplot(x = 'InternetService', hue = 'StreamingTV',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Streaming TV')","6d41cf8c":"sns.countplot(x = 'InternetService', hue = 'StreamingMovies',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Internet Service and Streaming Movies')","3efc074e":"sns.countplot(x = 'Contract',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Types of Contracts among the Customers')","1d806d07":"sns.countplot(x = 'Contract', hue = 'PaperlessBilling',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Contract Type and Paperless Billing')","8cf9422b":"sns.countplot(x = 'Contract', hue = 'PaymentMethod',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Contract Type and Payment Method')","ebe3d60a":"sns.countplot(x = 'Churn', hue = 'gender',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Gender')","79bb38cd":"sns.countplot(x = 'Churn', hue = 'SeniorCitizen',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Senior or Normal Citizens')","a94af039":"sns.countplot(x = 'Churn', hue = 'Partner',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Partners')","5c86e7f9":"sns.countplot(x = 'Churn', hue = 'Dependents',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Dependents or No Dependents')","5585c4f5":"sns.countplot(x = 'Churn', hue = 'PhoneService',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Phone Service')","8c7e2a06":"sns.countplot(x = 'Churn', hue = 'MultipleLines',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Multiple Phone Lines')","f2eff416":"sns.countplot(x = 'Churn', hue = 'InternetService',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by type of Internet Service')","21da812d":"sns.countplot(x = 'Churn', hue = 'OnlineSecurity',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by the type of Online Security')","b03d68c6":"sns.countplot(x = 'Churn', hue = 'OnlineBackup',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Online Backup')","24ee01c8":"sns.countplot(x = 'Churn', hue = 'DeviceProtection',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Device Protection')","8867856f":"sns.countplot(x = 'Churn', hue = 'TechSupport',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Tech Support')","3941d2db":"sns.countplot(x = 'Churn', hue = 'StreamingTV',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Streaming TV')","832b50ac":"sns.countplot(x = 'Churn', hue = 'StreamingMovies',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Streaming Movies')","cf5dccd3":"sns.countplot(x = 'Churn', hue = 'Contract',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by the Contract Type')","6060c17c":"sns.countplot(x = 'Churn', hue = 'PaperlessBilling',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by Customers with or without Paperless Billing')","34eefb14":"sns.countplot(x = 'Churn', hue = 'PaymentMethod',\n              data = df, color = 'gray', \n              edgecolor=sns.color_palette('gray', 1)\n             ).set_title('Churning Customers grouped by the type of Payment Method')","95da2801":"# Checking for Null Values\n# In this case, there are no Null Values since we cannot see any lines in the figure below\nsns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap=\"Greens\")","7286ab86":"corr = df.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200)\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","fec397d1":"df[['Churn', 'gender', 'customerID']].groupby(['gender', 'Churn']).count()","f0b4f156":"df[['Churn', 'SeniorCitizen', 'customerID']].groupby(['SeniorCitizen', 'Churn']).count()","37c7fa8e":"df[['gender','SeniorCitizen','Churn', 'customerID']].groupby(['gender','SeniorCitizen', 'Churn']).count()","03d1fde8":"print(df.gender.value_counts())\ndf['Female'] = df['gender'] == 'Female'\ndf[\"Female\"] = df[\"Female\"].astype(int)\ndf.drop('gender', axis = 1, inplace = True)","4c2efcef":"print(df.Female.value_counts())","7b57033a":"print(df.Partner.value_counts())\ndf['Partner'] = df['Partner'].map({'Yes': 1, 'No': 0})","74d174f3":"print(df.Partner.value_counts())","50267870":"df.SeniorCitizen.value_counts()","d7c6746e":"print(df.Dependents.value_counts())\ndf['Dependents'] = df['Dependents'].map({'Yes': 1, 'No': 0})","d6b62d21":"print(df.Dependents.value_counts())","aaf22f96":"print(df.PhoneService.value_counts())\ndf['PhoneService'] = df['PhoneService'].map({'Yes': 1, 'No': 0})","8a9e659c":"print(df.PhoneService.value_counts())","d7bd99e0":"print(df.MultipleLines.value_counts())\ndf['MultipleLines'] = df['MultipleLines'].map({'Yes' : 1, 'No' : 0, 'No phone service' : 0})","5baf94e2":"print(df.MultipleLines.value_counts())","a9355634":"df.InternetService.value_counts()","7abd59c2":"print(df.OnlineSecurity.value_counts())\ndf['OnlineSecurity'] = df['OnlineSecurity'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","4bb166cf":"print(df.OnlineSecurity.value_counts())","737a0ac3":"print(df.OnlineBackup.value_counts())\ndf['OnlineBackup'] = df['OnlineBackup'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","b8a31a87":"print(df.OnlineBackup.value_counts())","ea6828d5":"print(df.DeviceProtection.value_counts())\ndf['DeviceProtection'] = df['DeviceProtection'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","11e3f8be":"print(df.DeviceProtection.value_counts())","c2d2efe4":"print(df.TechSupport.value_counts())\ndf['TechSupport'] = df['TechSupport'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","dd1324b2":"print(df.TechSupport.value_counts())","6f7c2c2b":"print(df.StreamingTV.value_counts())\ndf['StreamingTV'] = df['StreamingTV'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","ead4bd5e":"print(df.StreamingTV.value_counts())","68fe77fd":"print(df.StreamingMovies.value_counts())\ndf['StreamingMovies'] = df['StreamingMovies'].map({'Yes' : 1, 'No' : 0, 'No internet service' : 0})","69a80895":"print(df.StreamingMovies.value_counts())","ab69bf25":"df.Contract.value_counts()","20dcc401":"print(df.PaperlessBilling.value_counts())\ndf['PaperlessBilling'] = df['PaperlessBilling'].map({'Yes': 1, 'No': 0})","19c0900e":"print(df.PaperlessBilling.value_counts())","6cd0a6b0":"df.PaymentMethod.value_counts()","dd4e1839":"print(df.Churn.value_counts())\ndf['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})","0669a76f":"print(df.Churn.value_counts())","1a9e6301":"df['TotalCharges'] = df['TotalCharges'].replace(\" \", np.nan).astype(float)\ndf['TotalCharges'].fillna(df['TotalCharges'].mean(), inplace = True)","38ea1001":"df.info()","93967335":"df.head()","d43cae74":"T = df['tenure']\nE = df['Churn']","65b25900":"# from lifelines import KaplanMeierFitter\nkmf = KaplanMeierFitter()\nkmf.fit(T, event_observed=E)","f29f7996":"#print(kmf.cumulative_density_)\nkmf.plot_cumulative_density()","52c1259e":"kmf.plot_survival_function() ","8e96107f":"median_ = kmf.median_survival_time_\n# The estimated median time to event. np.inf if doesn\u2019t exist.\nprint('Median Value: ' + str(median_))","826bcb43":"seniorCitizen = (df['SeniorCitizen'] == 1)\n\nkmf.fit(T[~seniorCitizen], E[~seniorCitizen], label = 'Not Senior Citizens')\nax = kmf.plot()\n\nkmf.fit(T[seniorCitizen], E[seniorCitizen], label = 'Senior Citizens')\nax = kmf.plot(ax=ax)","8dd09a42":"Partner = (df['Partner'] == 1)\n\nkmf.fit(T[~Partner], E[~Partner], label = 'Without Partner')\nax = kmf.plot()\n\nkmf.fit(T[Partner], E[Partner], label = 'With Partner')\nax = kmf.plot(ax=ax)","74688aff":"Dependents = (df['Dependents'] == 1)\n\nkmf.fit(T[~Dependents], E[~Dependents], label = 'Without Dependents')\nax = kmf.plot()\n\nkmf.fit(T[Dependents], E[Dependents], label = 'With Dependents')\nax = kmf.plot(ax=ax)","d6ff0e2e":"PhoneService = (df['PhoneService'] == 1)\n\nkmf.fit(T[~PhoneService], E[~PhoneService], label = 'Without Phone Service')\nax = kmf.plot()\n\nkmf.fit(T[PhoneService], E[PhoneService], label = 'With Phone Service')\nax = kmf.plot(ax=ax)","a68ee230":"MultipleLines = (df['MultipleLines'] == 1)\n\nkmf.fit(T[~MultipleLines], E[~MultipleLines], label = 'Without MultipleLines')\nax = kmf.plot()\n\nkmf.fit(T[MultipleLines], E[MultipleLines], label = 'With MultipleLines')\nax = kmf.plot(ax=ax)","460e980d":"InternetServiceDSL = (df['InternetService'] == 'DSL')\nInternetServiceFiberOptic = (df['InternetService'] == 'Fiber optic')\nNoInternetService = (df['InternetService'] == 'No')\n\n\nkmf.fit(T[InternetServiceDSL], E[InternetServiceDSL], label = 'DSL')\nax = kmf.plot()\n\nkmf.fit(T[InternetServiceFiberOptic], E[InternetServiceFiberOptic], label = 'Fiber Optics')\nax = kmf.plot(ax=ax)\n\nkmf.fit(T[NoInternetService], E[NoInternetService], label = 'No Internet Services')\nax = kmf.plot(ax=ax)","acc32e2b":"OnlineSecurity = (df['OnlineSecurity'] == 1)\n\nkmf.fit(T[~OnlineSecurity], E[~OnlineSecurity], label = 'Without Online Security')\nax = kmf.plot()\n\nkmf.fit(T[OnlineSecurity], E[OnlineSecurity], label = 'With Online Security')\nax = kmf.plot(ax=ax)","e5b8ba6c":"OnlineBackup = (df['OnlineBackup'] == 1)\n\nkmf.fit(T[~OnlineBackup], E[~OnlineBackup], label = 'Without Online Backup')\nax = kmf.plot()\n\nkmf.fit(T[OnlineBackup], E[OnlineBackup], label = 'With Online Backup')\nax = kmf.plot(ax=ax)","9f580632":"DeviceProtection = (df['DeviceProtection'] == 1)\n\nkmf.fit(T[~DeviceProtection], E[~DeviceProtection], label = 'Without Device Protection')\nax = kmf.plot()\n\nkmf.fit(T[DeviceProtection], E[DeviceProtection], label = 'With Device Protection')\nax = kmf.plot(ax=ax)","6cf3d469":"TechSupport = (df['TechSupport'] == 1)\n\nkmf.fit(T[~TechSupport], E[~TechSupport], label = 'Without Tech Support')\nax = kmf.plot()\n\nkmf.fit(T[TechSupport], E[TechSupport], label = 'With Tech Support')\nax = kmf.plot(ax=ax)","0ca3edaa":"StreamingTV = (df['StreamingTV'] == 1)\n\nkmf.fit(T[~StreamingTV], E[~StreamingTV], label = 'Without Streaming TV')\nax = kmf.plot()\n\nkmf.fit(T[StreamingTV], E[StreamingTV], label = 'With Streaming TV')\nax = kmf.plot(ax=ax)","06a7e9bc":"StreamingMovies = (df['StreamingMovies'] == 1)\n\nkmf.fit(T[~StreamingMovies], E[~StreamingMovies], label = 'Without Streaming Movies')\nax = kmf.plot()\n\nkmf.fit(T[StreamingMovies], E[StreamingMovies], label = 'With Streaming Movies')\nax = kmf.plot(ax=ax)","903e42b2":"PaperlessBilling = (df['PaperlessBilling'] == 1)\n\nkmf.fit(T[~PaperlessBilling], E[~PaperlessBilling], label = 'Without Paperless Billing')\nax = kmf.plot()\n\nkmf.fit(T[PaperlessBilling], E[PaperlessBilling], label = 'With Paperless Billing')\nax = kmf.plot(ax=ax)","b592d78c":"ElectronicCheck = (df['PaymentMethod'] == 'Electronic check')\nMailedCheck = (df['PaymentMethod'] == 'Mailed check')\nBankTransfer = (df['PaymentMethod'] == 'Bank transfer (automatic)')\nCreditCard = (df['PaymentMethod'] == 'Credit card (automatic)')\n\nkmf.fit(T[ElectronicCheck], E[ElectronicCheck], label = 'Electronic Check')\nax = kmf.plot()\n\nkmf.fit(T[MailedCheck], E[MailedCheck], label = 'Mailed Check')\nax = kmf.plot(ax=ax)\n\nkmf.fit(T[BankTransfer], E[BankTransfer], label = 'Bank Transfer')\nax = kmf.plot(ax=ax)\n\nkmf.fit(T[CreditCard], E[CreditCard], label = 'Credit Card')\nax = kmf.plot(ax=ax)","ef11e5c3":"Female = (df['Female'] == 1)\n\nkmf.fit(T[~Female], E[~Female], label = 'Male Customers')\nax = kmf.plot()\n\nkmf.fit(T[Female], E[Female], label = 'Female Customers')\nax = kmf.plot(ax=ax)","ae6e0ed7":"from lifelines.utils import median_survival_times\n\n# The estimated median time to event. np.inf if doesn\u2019t exist.\nmedian_ci = median_survival_times(kmf.confidence_interval_)\nmedian_ci","1d2ad71b":"cols_of_interest = ['SeniorCitizen', 'Partner', 'Dependents', 'tenure', \n                    'PhoneService', 'MultipleLines', 'InternetService', \n                    'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', \n                    'TechSupport', 'StreamingTV', 'StreamingMovies', \n                    'Contract', 'PaperlessBilling', 'PaymentMethod', \n                    'MonthlyCharges', 'TotalCharges', 'Female', 'Churn']\ndata = df[cols_of_interest]\ndata.head()","577cd7ff":"data = pd.get_dummies(data)\n# Dropping these columns to avoid 'Matrix Singularity Error when training the Model'.\n# We previously did not one-hot encode these columns in the preprocessing section as they were needed for modeling.\ndata.drop('Contract_Two year', axis = 1, inplace = True)\ndata.drop('PaymentMethod_Mailed check', axis = 1, inplace = True)\ndata.drop('InternetService_Fiber optic', axis = 1, inplace = True)\ndata.head()","6b906b1c":"cph = CoxPHFitter()\ncph.fit(data, 'tenure', event_col = 'Churn', show_progress = True)","77e999dd":"cph.print_summary()","a796b6d5":"cph.plot() \n# Produces a visual representation of the coefficients (i.e. log hazard ratios), \n# including their standard errors and magnitudes.\n# Think of it like a magnitude of the impact. \n# Examples:\n# 1. If you have no internet services then the chances of churning is lower than that of fibre  optics\n# 2. Contract of one-year has higher chances of churning than a two-year contract\n# 3. Contract of month-to-month contract has higher chances than a two-year contract and one-year contract","dc36fb46":"cph.params_ # The estimated coefficients.","43ae281d":"cph.plot_covariate_groups('Contract_Month-to-month', [0, 1], cmap='coolwarm')\n\n# \"we can plot what the survival curves look like as we vary a single covariate while holding everything else equal. \n# This is useful to understand the impact of a covariate, given the model. To do this, we use the plot_covariate_groups() \n# method and give it the covariate of interest, and the values to display.\"","862b23eb":"cph.predict_expectation(data)","91f8d757":"cph.predict_log_partial_hazard(data)","d75470f2":"# The event_observed variable provided\ncph.event_observed","3c982d18":"cph.baseline_cumulative_hazard_","01318837":"sns.lineplot(data=cph.baseline_cumulative_hazard_)","3100a0c3":"cph.plot_covariate_groups('InternetService_No', [0, 1], cmap='coolwarm')","5c984bc9":"cph.plot_covariate_groups('OnlineSecurity', [0, 1], cmap='coolwarm')","b78c0fec":"cph.plot_covariate_groups('InternetService_DSL', [0, 1], cmap='coolwarm')","341fb857":"cph.plot_covariate_groups('Contract_One year', [0, 1], cmap='coolwarm')","12fb2289":"cph.plot_covariate_groups('PhoneService', [0, 1], cmap='coolwarm')","5dc61538":"cph.plot_covariate_groups('SeniorCitizen', [0, 1], cmap='coolwarm')","6a6affcf":"cph.plot_covariate_groups('Dependents', [0, 1], cmap='coolwarm')","6f88c910":"cph.plot_covariate_groups(['SeniorCitizen', 'Partner'], \n                            [\n                                [0, 0],\n                                [0, 1],\n                                [1, 0],\n                                [1, 1],\n                            ],\n                            cmap='coolwarm')\n#plt.savefig('SeniorCitizen with Partner.png')\nplt.title(\"SeniorCitizen with Partner\");","b1366b7b":"cph.plot_covariate_groups(['SeniorCitizen', 'Dependents'], \n                            [\n                                [0, 0],\n                                [0, 1],\n                                [1, 0],\n                                [1, 1],\n                            ],\n                            cmap='coolwarm')\n#plt.savefig('Media\/SeniorCitizen with Dependents.png')\nplt.title(\"SeniorCitizen with Dependents\");","eda50e22":"cph.plot_covariate_groups(\n    ['PhoneService', 'InternetService_No'],\n    [\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n    ],\n    cmap='coolwarm')\n#plt.savefig('Media\/Internet Services and Phone Services.png')\nplt.title(\"Internet Services and Phone Services\");","ed341701":"data['ID'] = df['customerID']\ndata.head()","8305f5e0":"cph.predict_survival_function(data.drop('ID', axis = 1))","3a0e7a6e":"cph.predict_median(data.drop('ID', axis = 1))","92505156":"cph.predict_partial_hazard(data.drop('ID', axis = 1))","d03dc592":"cph.predict_median(data)","1eb5d6cc":"customer_id = '3668-QPYBK'\ninput_ = data.loc[data['ID'] == customer_id]\ninput_.head()","a52e47f6":"# Validate\nprint('Total number of Customers with the id ' + customer_id + ': ' + str(data.loc[data['ID'] == customer_id].shape[0]))","226e83cf":"# Get indexe of the Customer\ncustomer = data[data['ID'] == customer_id].index\n \n# Delete the row containing information for that Customer\ndata.drop(customer , inplace=True)\n\n# Validate\nprint('Total number of Customers with the id ' + customer_id + ': ' + str(data.loc[data['ID'] == customer_id].shape[0]))","bf7d5361":"data.drop('ID', axis = 1, inplace = True)\ndata.head()","0cb24872":"cph = CoxPHFitter()\ncph.fit(data, 'tenure', event_col = 'Churn', show_progress = True)","e64032e0":"results = cph.predict_survival_function(input_.drop('ID', axis = 1))\nsns.lineplot(data = results, \n             legend = False).set_title('Survival of the Customer: ' + str(customer_id))","39b93347":"cph.predict_partial_hazard(input_.drop('ID', axis = 1))","1ae7e152":"from lifelines.utils import k_fold_cross_validation\n\ncph = CoxPHFitter()\n\n# print(np.mean(k_fold_cross_validation(cph, data.drop('ID', axis = 1), duration_col='tenure', event_col='Churn')))\nprint(np.mean(k_fold_cross_validation(cph, data, duration_col='tenure', event_col='Churn')))","ead572eb":"We will One-Hot Encode the Internet Services Column Later.","3b1f86a6":"### Internet Service vs. No Internet Service\n- InternetService_No = 1 means no internet service.\n- InternetService_No = 0 means internet service is available.","22b0dd1c":"We are modifying the Multiple Lines column to be 1 if the customer has Multiple Lines and 0 otherwise.","7b8e19b9":"### Dependents vs. No Dependents","d558ee56":"Read More about Predict Expectation Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/fitters\/regression\/CoxPHFitter.html?highlight=predict_expectation#lifelines.fitters.coxph_fitter.CoxPHFitter.predict_expectation","b8346514":"We will One-Hot Encode the Payment Method Column later.","09e6edb0":"We are modifying the Churn column to be 1 if the customer has Churned and 0 otherwise.","d7447ae4":"### Survival Analysis of Churning Customer Groups (With Streaming Movies Vs. Without Streaming Movies)","b4fdaf9b":"We are modifying the Paperless Billing column to be 1 if the customer has Paperless Billing and 0 otherwise.","1da5b14b":"### Survival Analysis of Churning Customer Groups (With Online Backup Vs. Without Online Backup)","9802c39a":"### Survival Analysis of Churning Customer Groups (Male Vs. Female)","39d2ffdc":"### Survival Analysis of Churning Customer Groups (With Dependents Vs. Without Dependents)","85a91f53":"## Training multiple Kaplan Meier Fitter Models","de454dab":"### Phone Service vs. No Phone Service","0bda4771":"### Survival Analysis of Churning Customer Groups (With Electronic Check Vs. With Mailed Check Vs. Bank Transfer Vs. Credit Card)","3ae0aef4":"## Data Preprocessing","dff45e4d":"We are modifying the Tech Support column to be 1 if the customer has Tech Support and 0 otherwise.","a2396937":"We will One-Hot Encode the Contract Column later.","89991dd1":"### Survival Analysis of Churning Customer Groups (With Partners Vs. Without Partners)","a96e4cb9":"### Survival Analysis of Churning Customer Groups (With DSL Vs. With Fiber Optics Vs. No Internet Service)","219f90dc":"Read more about Predict Partial Hazard Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/fitters\/regression\/CoxPHFitter.html#lifelines.fitters.coxph_fitter.CoxPHFitter.predict_partial_hazard","586edb85":"Taking Care of a few missing values in the Total Charges column. ","277bdfc9":"We are creating a new column that has the value 1 if the customer is a Female. Otherwise, it will have a value of 0 in case if the customer is a Male.","b9ed0888":"We are modifying the Online Security column to be 1 if the customer has Oneline Security and 0 otherwise.","f65c89f4":"The Senior Citizen column is already in the desired format, so we do not need to modify it.","73a2c70e":"## Data Analysis","cfd3b7ff":"We are modifying the Phone Service column to be 1 if the customer has Phone Service Available and 0 otherwise.","a2353609":"### DSL Internet Service vs. Other Internet Service or No Internet Service","6186563f":"### Survival Analysis of Churning Customer Groups (With Tech Support Vs. Without Tech Support)","dcd312c2":"We are modifying the Online Backup column to be 1 if the customer has Oneline Backup and 0 otherwise.","b190e425":"### Using Cross-Validation Scheme\n- This allows us to be Confident that the predictions will work well in practice.\n- This also allows us to choose between multiple models.\n- An example is as follows\n- Read More Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/lifelines.utils.html?highlight=k_fold_cross_validation#lifelines.utils.k_fold_cross_validation","7dff8402":"### Survival Analysis of Churning Customer Groups (Senior Citizens Vs. Normal Citizens)","6be65a65":"## Importing and Analyzing the Dataset","68044c75":"### Survival Analysis of Churning Customer Groups (With Paperless Billing Vs. Without Paperless Billing)","a7c14006":"### Online Security vs. No Online Security","64e1d1a3":"Read more about Predict Log Partial Hazard Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/fitters\/regression\/CoxPHFitter.html?highlight=cph.predict_log_partial_hazard#lifelines.fitters.coxph_fitter.CoxPHFitter.predict_log_partial_hazard","8db45db8":"### Survival Analysis of Churning Customer Groups (With Multiple Lines Vs. Without Multiple Lines)","121dd0ea":"We are modifying the Streaming TV column to be 1 if the customer has Streaming TV and 0 otherwise.","3600a50d":"We are modifying the Device Protection column to be 1 if the customer has Device Protection and 0 otherwise.","171f8f11":"### Survival Analysis of Churning Customer Groups (With Streaming TV Vs. Without Streaming TV)","7ff114d0":"### Senior Citizen and Partner","8e74e9f8":"### Survival Analysis of Churning Customer Groups (With Online Security Vs. Without Online Security)","212da812":"We are modifying the Partner column to be 1 if the customer has a partner and 0 otherwise.","d4aa669a":"### Predicting Survival of a specific Customer","a9352c5b":"### Survival Analysis of Churning Customer Groups (With Phone Service Vs. Without Phone Service)","91f34330":"Read more about Predict Median Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/fitters\/regression\/CoxPHFitter.html#lifelines.fitters.coxph_fitter.CoxPHFitter.predict_median","60ec450e":"### Predicting Survival of all the Customers","07c31b83":"# Data Visualization","945d5f33":"We are modifying the Streaming Movies column to be 1 if the customer has Streaming Movies and 0 otherwise.","c5455a5a":"Read more about Predict Partial Hazard Here: https:\/\/lifelines.readthedocs.io\/en\/latest\/fitters\/regression\/CoxPHFitter.html#lifelines.fitters.coxph_fitter.CoxPHFitter.predict_partial_hazard","d0097739":"### Senior Citizen and Dependents","138576b3":"## Import Python Packages and Environment Setup","79e3d1cb":"### Survival Analysis of Churning Customer Groups (With Device Protection Vs. Without Device Protection)","c75d22ad":"We are modifying the Dependents column to be 1 if the customer has Dependents and 0 otherwise.","da6a9c0d":"### One Year Contract vs. Two Year and Monthly Contract","50f281fd":"## Training a Cox Proportional Hazard Regression Model","f5f3cf6f":"### Senior Citizen vs. Normal Citizen ","1f596080":"### Phone Service and Internet Service\n- InternetService_No = 1 means no internet service.\n- InternetService_No = 0 means internet service is available."}}