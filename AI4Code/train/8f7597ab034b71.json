{"cell_type":{"7b82eff5":"code","113c50c6":"code","b839c0af":"code","68ad23ad":"code","7b2c8f83":"code","c9a76565":"code","f542cd30":"code","8d5636c9":"code","5708ce89":"markdown","aa335d0a":"markdown","16eefbfd":"markdown","d9ef694e":"markdown","27c5474f":"markdown","6e3bf280":"markdown","cc5de3cc":"markdown","52a7a8fe":"markdown","b10a3e93":"markdown","0dca75f2":"markdown"},"source":{"7b82eff5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndef data_prep(raw):\n    out_y = raw.values[...,0,]\n    batch_size = raw.shape[0]\n    out_x = raw.values[...,1,]\n    return list(out_x), list(out_y)","113c50c6":"file = '..\/input\/nadsat vocab.csv'\nraw_data = pd.read_csv(file)\nenglish, nadsat = data_prep(raw_data)\n","b839c0af":"raw_data['word'].value_counts().head(30).plot.bar()","68ad23ad":"raw_data['definition'].value_counts().head(30).plot.bar()","7b2c8f83":"#Word Object\nclass Word:\n    def __init__(self, word, count):\n        self.word = word\n        self.count = count\n    def __repr__(self):\n        return \"{\"+str(self.word)+ \", \" +str(self.count)+\"}\"\n    def __eq__(self, obj):\n        return self.word == obj.word and self.count == obj.count\n    def __hash__(self):\n        return hash(self.word)\n\n#Getting all prefixes of word\ndef gas(input_string):\n  length = len(input_string)\n  return [input_string[:i+1] for i in range(length)]\n\nfreq = []\nsubs = []\n\n#Sorting prefixes into frequency list\nfor word in nadsat:\n    for s in gas(word):\n        if len(s) == 3:\n            subs.append(s)\nfor s in subs:\n    freq.append(Word(s, subs.count(s)))\nfreq = sorted(set(freq), key = lambda x: x.count)[::-1]\n\nperm = []\ntemp = []\n\n#Connecting frequency list with english definition list\nfor s in freq:\n    temp = []\n    temp.append(s.word)\n    for i in range(len(nadsat)):\n        if s.word in gas(nadsat[i]):\n            temp.append(english[i])\n    perm.append(temp)\n\nprint(\"Prefix \", \" English counterparts to Nadsat words with prefix\")\n#Printing results\nfor i in range(10):\n    res = \"\"\n    res += perm[i][0] + \":     \"\n    for w in range(len(perm[i])):\n        if w != 0:\n            res += perm[i][w] + \" | \"\n    print(res)\n        \n\n","c9a76565":"#Word Object\nclass Word:\n    def __init__(self, word, count):\n        self.word = word\n        self.count = count\n    def __repr__(self):\n        return \"{\"+str(self.word)+ \", \" +str(self.count)+\"}\"\n    def __eq__(self, obj):\n        return self.word == obj.word and self.count == obj.count\n    def __hash__(self):\n        return hash(self.word)\n\n#Getting all prefixes of word\ndef gas(input_string):\n  length = len(input_string)\n  return [input_string[i:] for i in range(length)]\n\nfreq = []\nsubs = []\n\n#Sorting prefixes into frequency list\nfor word in nadsat:\n    for s in gas(word):\n        if len(s) == 3:\n            subs.append(s)\nfor s in subs:\n    freq.append(Word(s, subs.count(s)))\nfreq = sorted(set(freq), key = lambda x: x.count)[::-1]\n\nperm = []\ntemp = []\n\n#Connecting frequency list with english definition list\nfor s in freq:\n    temp = []\n    temp.append(s.word)\n    for i in range(len(nadsat)):\n        if s.word in gas(nadsat[i]):\n            temp.append(english[i])\n    perm.append(temp)\n\nprint(\"Suffix \", \" English counterparts to Nadsat words with suffix\")\n#Printing results\nfor i in range(10):\n    res = \"\"\n    res += perm[i][0] + \":     \"\n    for w in range(len(perm[i])):\n        if w != 0:\n            res += perm[i][w] + \" | \"\n    print(res)\n        \n\n","f542cd30":"def v_count(string):\n    c = 0\n    for i in string:\n        if i in \"aeiouAEIOU\":\n            c += 1\n    return c\n\ndef c_count(string):\n    c = 0\n    for i in string:\n        if i not in \"aeiouAEIOU\":\n            c += 1\n    return c\n\nenglish_c = 0\nenglish_v = 0\n\nfor i in english:\n    english_c += c_count(i)\n    english_v += v_count(i)\n\nnadsat_v = 0\nnadsat_c = 0\n\nfor i in nadsat:\n    nadsat_c += c_count(i)\n    nadsat_v += v_count(i)\n\nprint(\"Nadsat consonant to vowel ratio:\", round(nadsat_c \/ nadsat_v, 2))\nprint(\"English consonant to vowel ratio:\", round(english_c \/ english_v, 2))","8d5636c9":"nadsat_len = 0\nenglish_len = 0\n\nfor i in english:\n    english_len += len(i)\n\nfor i in nadsat:\n    nadsat_len += len(i)\n    \nprint(\"Average Nadsat word length:\", round(nadsat_len \/ len(nadsat), 2))\nprint(\"Average English word length:\", round(english_len \/ len(english), 2))","5708ce89":"**Conclusion**<br>\nThis may seem like a stretch, but hear me out. Anthony Burgess was a music composer. Music is all about communicating without language (Excluding lyrics). Burgess may have wanted to try to do the same thing but in writing. I belive that Nadsat is his way of doing this. Nadsat is far enough away from English that by itself, a reader wouldn't understand it. Nadsat is close enough to English in terms of following similar patterns, being of similar length, and having similar consistancy within itself to allow the brain to relate to it in a similar fashion to how it relates to English. This is much like how sounds in music can convey emotion to us by following patterns that are familiar to our brain that were developed in spoken language.\n\n\n\n\n","aa335d0a":"**Analysis of Nadsat  (3-letter) Suffixes**<br>\nUnlike prefixes, suffixes seem to be more connected to the sound of the word than the meaning. (Ex. \"Noisy\" and \"Crazy\" are connected and \"Speak\" and \"Drink\")","16eefbfd":"**Prepping Data**<br>\nThis is to seperate the Nadsat words from their English counterparts","d9ef694e":"****","27c5474f":"**English Frequency chart**<br>\nThis chart shows that the Nadsat word-to-definition ratio is **not** one-to-one. Many different (Up to 4) Nadsat words can mean one English word.","6e3bf280":"**Average Length of Word Analysis**<br>\nThe average Nadsat word has one more letter than the average English word","cc5de3cc":"**Reading in Data** <br>This is getting the data from the filesystem and calling the above function to prep the data for analysis","52a7a8fe":"**Analysis of Nadsat  (3-letter) Prefixes**<br>\nWe can take away from this analysis that some of the Nadsat prefixes can be traced to their English definition.","b10a3e93":"**Vowel to Consonant Analysis**<br>\nFrom this data we can see that Nadsat has a much higher consonant to vowel ratio than english.\n","0dca75f2":"**Nadsat Frequency chart ** <br>We can see here that in Nadsat, one word generally has one definition with one exception: Razrez. Razrez can mean both \"Anger\" and \"Tear\"."}}