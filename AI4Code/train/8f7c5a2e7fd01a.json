{"cell_type":{"b64a0e1a":"code","2dd4e1e8":"code","cd3c91d4":"code","87ccc9f2":"code","590362b2":"code","c27dbcd1":"code","2ee6e2a4":"code","5157998c":"code","3bbd5c04":"code","5b421515":"code","22c2323b":"code","2019c94f":"code","0144e8eb":"code","8d853f09":"code","405b5d33":"code","51e1314f":"code","2d01420c":"code","d5523938":"markdown"},"source":{"b64a0e1a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport json, requests\nimport datetime\nimport folium as fl\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2dd4e1e8":"sns.set_style(\"whitegrid\")\nsns.set_context(\"poster\")","cd3c91d4":"page = 1\nnext_page = True\nresults = []\nwhile(next_page):\n    response = requests.get(f'https:\/\/brasil.io\/api\/dataset\/covid19\/caso\/data\/?page={page}&state=AM')\n    if response.status_code != 200:\n        print('Nao conectou')\n        next_page = False\n    else:    \n        dados = json.loads(response.content)        \n        results = results + (dados['results'])\n        next_page = dados['next'] != None\n        page = page + 1\n\namazonia_covid19 = pd.DataFrame(results)\nprint(amazonia_covid19.shape)\namazonia_covid19.head()","87ccc9f2":"amazonia_covid19 = amazonia_covid19.query('state == \"AM\" & place_type == \"city\"')\nprint(amazonia_covid19['date'].min())\nprint(amazonia_covid19['date'].max())","590362b2":"df = amazonia_covid19.query('is_last & deaths > 0').sort_values(by='deaths', ascending=False)[['city','confirmed','deaths']]\ndf['rate'] = df['deaths'] \/ df['confirmed'] * 100\ndf['rate'] = df['rate'].apply(lambda x: '{:.2f}%'.format(x))\nprint('Total de mun\u00edcipios afetados: {:d}'.format(df.shape[0]))\ndf","c27dbcd1":"plt.figure(figsize=(18,15))\nplt.yticks(size=8)\nplt.xticks(size=12)\nplot = sns.barplot(y='city', x='deaths', data=df, orient='h', order=df.sort_values(by='deaths', ascending=False)['city'])\nplot.set_title('COVID19 IN STATE OF AMAZONAS', size=50)\nplot.set_xlabel('deaths')\nplot.set_ylabel('cities')\n\nfor p in plot.patches:\n    x = p.get_x() + p.get_width() + 0.2\n    y = p.get_y() + p.get_height()\n    value = int(p.get_width())\n    plot.text(x, y, value, ha='left', size=10)","2ee6e2a4":"df_without_capital = df.query(\"city != 'Manaus'\")\nplt.figure(figsize=(18,15))\nplt.yticks(size=8)\nplt.xticks(size=12)\nplot = sns.barplot(y='city', x='deaths', data=df_without_capital, orient='h', order=df_without_capital.sort_values(by='deaths', ascending=False)['city'])\nplot.set_title('COVID19 IN THE COUNTRY OF AMAZONAS', size=50)\nplot.set_xlabel('deaths')\nplot.set_ylabel('cities')\n\nfor p in plot.patches:\n    x = p.get_x() + p.get_width() + 0.2\n    y = p.get_y() + p.get_height()\n    value = int(p.get_width())\n    plot.text(x, y, value, ha='left', size=10)","5157998c":"df = amazonia_covid19.groupby('date')['date','confirmed', 'deaths'].sum().reset_index()\ndf['rate'] = df['deaths'] \/ df['confirmed'] * 100\ndf['rate'] = df['rate'].apply(lambda x: '{:.2f}%'.format(x))\ndf.tail()","3bbd5c04":"plt.figure(figsize=(25,8))\nplt.xticks(rotation=90, size=8)\nplt.yticks(size=12)\n\nplot = sns.lineplot(x='date', y='deaths', data=df, ci=None, marker='o')\n\nplot = sns.lineplot(x='date', y='confirmed', data=df, ci=None, marker='>')\n\nplot.set_title('COVID19 IN STATE OF AMAZONAS\\n', size=50)\nplot.set_xlabel('days')\nplot.set_ylabel('cases')\nplt.legend(['Deaths','Confirmed'])\n\n# confirmed labels\nfor i in range(df.shape[0]):\n    day=datetime.datetime.strptime(df['date'].iloc[i], '%Y-%m-%d').weekday()\n    if i == 0 or day==0:\n        plt.text(df['date'].iloc[i], df['confirmed'].iloc[i] + 200, df['confirmed'].iloc[i], size=12)\n    elif (i+1) == df.shape[0]:\n        plt.text(df['date'].iloc[i], df['confirmed'].iloc[i] + 200, df['confirmed'].iloc[i])\n\n# deaths labels        \nfor i in range(df.shape[0]):\n    day=datetime.datetime.strptime(df['date'].iloc[i], '%Y-%m-%d').weekday()\n    if df['deaths'].iloc[i] > 0 and (day==0 or (i+1) == df.shape[0]):\n        plt.text(df['date'].iloc[i], df['deaths'].iloc[i] + 100, df['deaths'].iloc[i], size=12)        ","5b421515":"plt.figure(figsize=(25,8))\nplt.xticks(rotation=90, size=8)\nplt.yticks(size=12)\n\nplot = sns.lineplot(x='date', y='deaths', data=df, ci=None, marker='o')\n\nplot.set_title('COVID19 IN STATE OF AMAZONAS\\n', size=50)\nplot.set_xlabel('days')\nplot.set_ylabel('cases')\nplt.legend(['Deaths'])\n\n# deaths labels        \nfor i in range(df.shape[0]):\n    day=datetime.datetime.strptime(df['date'].iloc[i], '%Y-%m-%d').weekday()\n    if df['deaths'].iloc[i] > 0 and (day==0 or (i+1) == df.shape[0]):\n        plt.text(df['date'].iloc[i], df['deaths'].iloc[i] + 100, df['deaths'].iloc[i], size=12) ","22c2323b":"cases_capital = amazonia_covid19.query('city == \"Manaus\" & is_last')[['confirmed','deaths']]\ncases_country = amazonia_covid19.query('city != \"Manaus\" & is_last')[['confirmed','deaths']].sum()\n\ndf_country_x_capital = pd.DataFrame({'host':['capital','country'], \n                                     'confirmed':[cases_capital['confirmed'].iloc[0], cases_country[0]], \n                                     'deaths':[cases_capital['deaths'].iloc[0], cases_country[1]]})\ndf_country_x_capital.head()","2019c94f":"plot = df_country_x_capital.plot(kind='bar', x='host', rot=0, figsize=(15,7), title='Deaths x Confirmed', fontsize=12)\nfor p in plot.patches:\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_y() + p.get_height() + 100\n    value = int(p.get_height())\n    plot.text(x, y, value, ha='center', size=12)","0144e8eb":"df['deaths_daily'] = 0\nfor i in range(df.shape[0]):\n    if i > 0: \n        df.loc[i, 'deaths_daily'] = df['deaths'].iloc[i] - df['deaths'].iloc[i-1]\n        df.loc[i, 'confirmed_daily'] = df['confirmed'].iloc[i] - df['confirmed'].iloc[i-1]\n    else:\n        df.loc[i, 'deaths_daily'] = df['deaths'].iloc[i]\n        df.loc[i, 'confirmed_daily'] = df['confirmed'].iloc[i]\ndf.tail()","8d853f09":"plt.figure(figsize=(25,8))\nplt.xticks(rotation=90, size=8)\nplt.yticks(size=12)\nplot = sns.barplot(x='date', y='deaths_daily', data=df)\nplot.set_title('Deaths per Day')\nplot.set_ylabel('deaths')\n\nfor p in plot.patches:\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_y() + p.get_height()\n    value = int(p.get_height())\n    plot.text(x, y, value, ha='center', size=12)","405b5d33":"plt.figure(figsize=(25,8))\nplt.xticks(rotation=90, size=8)\nplt.yticks(size=12)\nplot = sns.barplot(x='date', y='confirmed_daily', data=df)\nplot.set_title('Confirmed per Day')\nplot.set_ylabel('confirmed')\n\nfor p in plot.patches:\n    x = p.get_x() + p.get_width() \/ 2\n    y = p.get_y() + p.get_height()\n    value = int(p.get_height())\n    plot.text(x, y, value, ha='center', size=12)","51e1314f":"print('2020-07-19 deaths',amazonia_covid19.query(\"date == '2020-07-19'\")['deaths'].sum())\nprint('2020-07-20 deaths',amazonia_covid19.query(\"date == '2020-07-20'\")['deaths'].sum())","2d01420c":"plt.figure(figsize=(25,8))\nplt.xticks(rotation=90, size=8)\nax = sns.lineplot(x='date', y='deaths_daily', data=df)\nax.axes.xaxis.set_visible(False)","d5523938":"# without capital"}}