{"cell_type":{"b06ba9b7":"code","1ad5a49c":"code","26a83406":"code","e8b2d3c9":"code","92d35b6f":"code","392a1ce7":"code","e2ff8e05":"code","8595fab4":"code","f9cd5639":"code","802b63e5":"code","ebd1637e":"code","3be2d2b1":"code","481b4380":"code","eb36b8d2":"code","76d904cd":"code","45f12b5b":"code","2cd9056b":"code","8d245381":"code","1d6fc25a":"code","1caee3ec":"code","290c6c8c":"code","5585c18d":"code","c59a3dc6":"code","e9c3c100":"code","719a8e70":"code","c963309a":"code","13cfbc1e":"markdown","bb6a83e3":"markdown","3724b12d":"markdown","d0a0741e":"markdown","2f7897af":"markdown","db2a06d7":"markdown","2b1f9ed7":"markdown","a5d65f5a":"markdown","7bc5bc6b":"markdown"},"source":{"b06ba9b7":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score","1ad5a49c":"# loading the diabetes dataset to a pandas DataFrame\ndiabetes_dataset = pd.read_csv('..\/input\/diabetes\/diabetes.csv') ","26a83406":"pd.read_csv?","e8b2d3c9":"# printing the first 5 rows of the dataset\ndiabetes_dataset.head()","92d35b6f":"# number of rows and Columns in this dataset\ndiabetes_dataset.shape","392a1ce7":"# getting the statistical measures of the data\ndiabetes_dataset.describe()","e2ff8e05":"diabetes_dataset['Outcome'].value_counts()","8595fab4":"diabetes_dataset.groupby('Outcome').mean()","f9cd5639":"# separating the data and labels\nX = diabetes_dataset.drop(columns = 'Outcome', axis=1)\nY = diabetes_dataset['Outcome']","802b63e5":"print(X)","ebd1637e":"print(Y)","3be2d2b1":"scaler = StandardScaler()","481b4380":"scaler.fit(X)","eb36b8d2":"standardized_data = scaler.transform(X)","76d904cd":"print(standardized_data)","45f12b5b":"X = standardized_data\nY = diabetes_dataset['Outcome']","2cd9056b":"print(X)\nprint(Y)","8d245381":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)","1d6fc25a":"print(X.shape, X_train.shape, X_test.shape)","1caee3ec":"classifier = svm.SVC(kernel='linear')","290c6c8c":"#training the support vector Machine Classifier\nclassifier.fit(X_train, Y_train)","5585c18d":"# accuracy score on the training data\nX_train_prediction = classifier.predict(X_train)\ntraining_data_accuracy = accuracy_score(X_train_prediction, Y_train)","c59a3dc6":"print('Accuracy score of the training data : ', training_data_accuracy)","e9c3c100":"# accuracy score on the test data\nX_test_prediction = classifier.predict(X_test)\ntest_data_accuracy = accuracy_score(X_test_prediction, Y_test)","719a8e70":"print('Accuracy score of the test data : ', test_data_accuracy)","c963309a":"input_data = (5,166,72,19,175,25.8,0.587,51)\n\n# changing the input_data to numpy array\ninput_data_as_numpy_array = np.asarray(input_data)\n\n# reshape the array as we are predicting for one instance\ninput_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n\n# standardize the input data\nstd_data = scaler.transform(input_data_reshaped)\nprint(std_data)\n\nprediction = classifier.predict(std_data)\nprint(prediction)\n\nif (prediction[0] == 0):\n  print('The person is not diabetic')\nelse:\n  print('The person is diabetic')","13cfbc1e":"Making a Predictive System","bb6a83e3":"Importing the Dependencies","3724b12d":"Train Test Split","d0a0741e":"Accuracy Score","2f7897af":"Training the Model","db2a06d7":"Model Evaluation","2b1f9ed7":"0 --> Non-Diabetic\n\n1 --> Diabetic","a5d65f5a":"Data Collection and Analysis\n\nPIMA Diabetes Dataset","7bc5bc6b":"Data Standardization"}}