{"cell_type":{"c4b45213":"code","d06fa279":"code","7c393b47":"code","4f9cb473":"code","d6f86b26":"code","6ca02008":"code","8a35f501":"code","9823d375":"code","13ce8d66":"code","2fb21e3b":"code","c4758945":"code","ea27eee2":"code","6014feda":"code","f3d1f9fe":"code","7a24af21":"code","b24fba4e":"code","42e463b1":"code","1fa95d0d":"code","f141640b":"code","26f553ea":"code","ee86739a":"code","00af584b":"code","e1e07ac0":"code","2914bf4f":"code","ccac3b63":"code","918cc457":"code","6236bb78":"code","cddbb96c":"code","020a7ad5":"code","23b86bae":"code","ac48e29e":"code","40b0eba6":"code","6fc00e08":"markdown","1ffd0e17":"markdown","f8ca5d94":"markdown","8863ccfb":"markdown","47490e5b":"markdown","4283da49":"markdown"},"source":{"c4b45213":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV","d06fa279":"Dados=pd.read_csv('..\/input\/titanic\/train.csv')\nDados","7c393b47":"Dados.describe()","4f9cb473":"Dados.columns","d6f86b26":"columns=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Survived'] \nDados=Dados[columns].dropna(axis=0)\nDados.describe()","6ca02008":"X = Dados.iloc[:,:7]\ny = Dados['Survived']","8a35f501":"X.head()","9823d375":"sex_dummies = pd.get_dummies(X['Sex'])","13ce8d66":"X = X.join([sex_dummies]).drop(['Sex'], axis=1)\nX","2fb21e3b":"encoder = LabelEncoder()\nX['Embarked'] = encoder.fit_transform(X['Embarked'])","c4758945":"kmeans = KMeans()\nX['Cluster'] = kmeans.fit_predict(X)\nX['Cluster']","ea27eee2":"def make_mi_scores(X, y):\n    mi_scores = mutual_info_regression(X, y)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\nmi_scores = make_mi_scores(X, y)\nmi_scores","6014feda":"def plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")\n\n\nplt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores)","f3d1f9fe":"scaler = StandardScaler()\nX_scaled = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","7a24af21":"X_scaled ","b24fba4e":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)","42e463b1":"SVM = svm.SVC(kernel='rbf')\ngrid_parameters = {'C':[0.01,0.1,1, 10, 100, 1000], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001]}\ngrid_search = GridSearchCV(SVM ,grid_parameters, cv=5)\n\ngrid_search.fit(X_train, y_train)","1fa95d0d":"grid_search.best_estimator_","f141640b":"model = svm.SVC(C=100, kernel='rbf', gamma=0.01)\nmodel.fit(X_train, y_train)\nprevisoes = model.predict(X_test)","26f553ea":"score = accuracy_score(y_test, previsoes)\nscore","ee86739a":"score = cross_val_score(model, X_scaled, y, cv=5)\nscore.mean()","00af584b":"predict_data=pd.read_csv('..\/input\/titanic\/test.csv')\ncolumns=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\npredict_data = pd.DataFrame(predict_data['PassengerId']).join(predict_data[columns])\npredict_data","e1e07ac0":"predict_data.isna().sum()","2914bf4f":"predict_data['Age'] = predict_data['Age'].fillna(round(predict_data['Age'].median()))\npredict_data['Fare'] = predict_data['Fare'].fillna(predict_data['Fare'].median())\npredict_data.isna().sum()","ccac3b63":"X_predict=predict_data[columns]\nX_predict.dtypes","918cc457":"sex_dummies = pd.get_dummies(X_predict['Sex'])\nX_predict = X_predict.join([sex_dummies]).drop(['Sex'], axis=1)","6236bb78":"X_predict['Embarked'] = encoder.fit_transform(X_predict['Embarked'])","cddbb96c":"X_predict['Cluster'] = kmeans.fit_predict(X_predict)","020a7ad5":"X_predict_scaled = pd.DataFrame(scaler.fit_transform(X_predict), columns=X_predict.columns)\nX_predict_scaled","23b86bae":"submit_predict = model.predict(X_predict_scaled)\nsubmit_predict","ac48e29e":"predict_data['Survived'] = submit_predict\npredict_data","40b0eba6":"predict_data[['PassengerId', 'Survived']].to_csv('\/kaggle\/working\/submission.csv', index=False)","6fc00e08":"<h1> Projeto da Casa de IA - Competi\u00e7\u00e3o do Titanic","1ffd0e17":"<p>Accuracy tamb\u00e9m pode ser pensado como a m\u00e9dia dos acertos","f8ca5d94":"<p>Algoritimos a serem testados: <p>\n    <ul>\n        <li>Gabriel - SVM com kernel\n        <li>Yamada - SVM Linear\n        <li>Astro - Regress\u00e3o Logistica\n        <li>Pedro - Regress\u00e3o Logistica\n        <li>Jo\u00e3o  - Redes Neurais \n    <p>\n       \n     \n<p> Quem acabar sinta-se a vontade para aprender e testar outros modelos <p>","8863ccfb":"<p> Foram escolhidas os seguintes par\u00e2metros para a constru\u00e7\u00e3o dos modelos iniciais:\n   <p> 'Pclass','Sex','Age','SibSp','Parch','Fare', 'Embarked'","47490e5b":"![image.png](attachment:image.png)","4283da49":"<p>Separar o conjunto de dados em treino e valida\u00e7\u00e3o para avaliarmos os modelos.<p>\n<p>Treinar no conjunto de treinamento e avaliar no conjunto de valida\u00e7\u00e3o usando 'accuracy'<p>"}}