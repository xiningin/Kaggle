{"cell_type":{"75d710d6":"code","86e06827":"code","1f70c38f":"code","324d1209":"code","224efb06":"code","57497b31":"code","ef6eeae6":"code","9382dfb6":"code","fe31ccc9":"code","f7317910":"markdown","9e9f467e":"markdown","b4520045":"markdown","9fd4d9e9":"markdown","7eb3c558":"markdown","20e59435":"markdown","13d06927":"markdown","4bff10c6":"markdown"},"source":{"75d710d6":"%matplotlib inline\n\nimport os\nimport glob\nimport requests\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom io import BytesIO\nfrom PIL import Image\nfrom kaggle_datasets import KaggleDatasets\nfrom keras.preprocessing.image import ImageDataGenerator","86e06827":"tf.__version__","1f70c38f":"try: # detect TPUs\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() # TPU detection\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError: # no TPU found, detect GPUs\n    strategy = tf.distribute.MirroredStrategy() # for GPU or multi-GPU machines\n#     strategy = tf.distribute.get_strategy() # default strategy that works on CPU and single GPU\n#     strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy() # for clusters of multi-GPU machines\n    device_name = tf.test.gpu_device_name()\n    if \"GPU\" not in device_name:\n        print(\"GPU device not found\")\n    print('Found GPU at: {}'.format(device_name))\n\nif strategy.num_replicas_in_sync < 2:\n    print(\"Less Accelerators Enabled! Please enable more to optimize execution.\")\n    print(\"Number of accelerators: \", strategy.num_replicas_in_sync)\nelse:\n    print(\"Number of accelerators: \", strategy.num_replicas_in_sync)","324d1209":"GCS_PATH = KaggleDatasets().get_gcs_path()\n\nIMAGE_SIZE = [220, 220]\nEPOCHS = 50\nSEED = 1447\nCLASSES = 10\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\ntrain_dir = '..\/input\/10-monkey-species\/training\/training'\nvalidation_dir = '..\/input\/10-monkey-species\/validation\/validation'\nlabel_file = pd.read_csv(\n    \"..\/input\/10-monkey-species\/monkey_labels.txt\",\n    names = [\n        \"Label\", \n        \"Latin Name\", \n        \"Common Name\", \n        \"Training Images\", \n        \"Valdation Images\"\n    ], \n    skiprows = 1,\n    index_col = False\n)\n\nlabel = label_file[\"Common Name\"].str.strip()\nlabel = label.to_numpy()\nprint(label)","224efb06":"# Training generator\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir, \n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    seed=SEED,\n    shuffle=True,\n    class_mode='categorical'\n)\n# Validation Generator\ntest_datagen = ImageDataGenerator(rescale=1. \/ 255)\n\nvalidation_generator = test_datagen.flow_from_directory(\n    validation_dir, \n    target_size=IMAGE_SIZE, \n    batch_size=BATCH_SIZE,\n    seed=SEED,\n    shuffle=False,\n    class_mode='categorical'\n)\n\n\n# the test images are taken from the Kaggle notebook titled: Xception,Inception,ResNet,VGG,MobileNet,DenseNet\ntest_images = [\n    \"https:\/\/projectzerofootprint.com\/wp-content\/uploads\/2016\/08\/monkey-2-1080x768.jpg\",\n    \"https:\/\/i.ytimg.com\/vi\/Ptisy32iRRA\/hqdefault.jpg\",\n    \"https:\/\/images.pond5.com\/red-uakari-monkey-footage-064800523_iconl.jpeg\",\n    \"https:\/\/thejapanalps.com\/wp-content\/uploads\/2020\/03\/nihonsaru01.jpg\",\n    \"https:\/\/www.zoo-leipzig.de\/fileadmin\/_processed_\/e\/c\/csm_Weissbauch-Zwergseidenaeffchen_3_c46c37b6a1.jpg\",\n    \"https:\/\/cdn.britannica.com\/05\/181805-050-C9682415\/capuchin-monkey.jpg\",\n    \"https:\/\/www.neprimateconservancy.org\/uploads\/1\/5\/3\/8\/15380094\/silvery-marmoset-istock-153473655-resize_45.jpg\",\n    \"https:\/\/study.com\/cimages\/multimages\/16\/squirrel_monkeys.png\",\n    \"https:\/\/ars.els-cdn.com\/content\/image\/3-s2.0-B9780124095274000171-f17-04-9780124095274.jpg\",\n    \"https:\/\/media-cdn.tripadvisor.com\/media\/photo-s\/0a\/67\/93\/f5\/nilgiri-langur-karunkorangu.jpg\"\n]\n\ntest_labels = [\"n0\", \"n1\", \"n2\", \"n3\", \"n4\", \"n5\", \"n6\", \"n7\", \"n8\", \"n9\"]","57497b31":"base_model = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', padding = 'same', input_shape=(IMAGE_SIZE[0], IMAGE_SIZE[1],3)),\n    tf.keras.layers.Conv2D(32, (3, 3), activation = 'relu', padding = 'same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'same'),\n    tf.keras.layers.Conv2D(64, (3, 3), activation = 'relu', padding = 'same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Conv2D(128, (3, 3), activation = 'relu', padding = 'same'),\n    tf.keras.layers.Conv2D(128, (3, 3), activation = 'relu', padding = 'same'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation = 'relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation = 'relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.35),\n    tf.keras.layers.Dense(CLASSES, activation = 'softmax')\n])\n\nbase_model.compile(\n    optimizer='adam',\n    loss=tf.keras.losses.CategoricalCrossentropy(),\n    metrics=['accuracy']\n)\n\nbase_history = base_model.fit_generator(\n    train_generator, \n    epochs=EPOCHS, \n    shuffle=True, \n    verbose=1,\n    validation_data=validation_generator\n)","ef6eeae6":"for (i,l) in enumerate(test_labels):\n    response = requests.get(test_images[i])\n    img = Image.open(BytesIO(response.content))\n    img = np.asarray(img)\/255.\n    img = tf.image.resize(img, [IMAGE_SIZE[0], IMAGE_SIZE[1]])\n    img = tf.reshape(img, (1,IMAGE_SIZE[0], IMAGE_SIZE[1],3))\n    \n    prediction = base_model.predict(img)\n    output = np.argmax(prediction)\n    \n    plt.title(\"Real: {} \\n Predict: {}\".format(label[i], label[output]))\n    plt.imshow(img[0, ...])\n    plt.show()","9382dfb6":"resnet_model = tf.keras.applications.ResNet50(\n    weights='imagenet',\n    include_top=False\n)\n\nx = resnet_model.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(512,activation='relu')(x)\npredictions = tf.keras.layers.Dense(\n    int(len(train_generator.class_indices.keys())),\n    activation='softmax'\n)(x)\n\nresnet50_model = tf.keras.models.Model(\n    inputs= resnet_model.input, \n    outputs=predictions\n)\n\nresnet50_model.compile(\n    loss='categorical_crossentropy', \n    optimizer=tf.keras.optimizers.SGD(lr=1e-4, momentum=0.9),\n    metrics=['accuracy']\n)\n\nresnet_history = resnet50_model.fit_generator(\n    train_generator, \n    epochs=EPOCHS, \n    shuffle=True, \n    verbose=1,\n    validation_data=validation_generator\n)","fe31ccc9":"for (i,l) in enumerate(test_labels):\n    response = requests.get(test_images[i])\n    img = Image.open(BytesIO(response.content))\n    img = np.asarray(img)\/255.\n    img = tf.image.resize(img, [IMAGE_SIZE[0], IMAGE_SIZE[1]])\n    img = tf.reshape(img, (1,IMAGE_SIZE[0], IMAGE_SIZE[1],3))\n    \n    prediction = resnet50_model.predict(img)\n    output = np.argmax(prediction)\n    \n    plt.title(\"Real: {} \\n Predict: {}\".format(label[i], label[output]))\n    plt.imshow(img[0, ...])\n    plt.show()","f7317910":"# Building Base Model","9e9f467e":"# Testing Base Model","b4520045":"# Loading Dataset","9fd4d9e9":"# Building Model using ResNet-50","7eb3c558":"# Checking for GPU\/TPU\nFor TPU usage in notebook check : [Keras MNIST TPU end-to-end - training, saved model and online inference](https:\/\/colab.research.google.com\/github\/GoogleCloudPlatform\/training-data-analyst\/blob\/master\/courses\/fast-and-lean-data-science\/01_MNIST_TPU_Keras.ipynb#scrollTo=ZE8dgyPC1_6m)","20e59435":"# Testing our Model","13d06927":"# Data Preparation","4bff10c6":"# Importing Libraries"}}