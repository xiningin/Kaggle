{"cell_type":{"6daeeedf":"code","67608e13":"code","8632b7f4":"code","0ab26466":"code","ec1b5e8f":"code","99a10dda":"code","ec6f00e8":"code","32e2f6ec":"code","56daae4f":"code","287ff63d":"code","64edde0b":"code","f7c48977":"code","1e80c873":"code","6bfeb286":"code","7b97764e":"code","0daaacb2":"code","1cece26e":"code","b7a9e3ad":"code","d287c619":"code","e38efa68":"code","0ba7daeb":"code","eb8b274c":"code","f8473c94":"code","cf022204":"code","abcb1918":"code","fab02f3c":"code","17e4e7e4":"markdown","c0c81546":"markdown"},"source":{"6daeeedf":"import pdb\nfrom nltk.corpus import stopwords, twitter_samples\nimport numpy as np\nimport pandas as pd\nimport nltk\nimport string\nfrom nltk.tokenize import TweetTokenizer\nfrom os import getcwd","67608e13":"import re\nimport string\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer\n\nfrom matplotlib.patches import Ellipse\nimport matplotlib.transforms as transforms\n\nimport numpy as np # Library for linear algebra and math utils\n\n\ndef process_tweet(tweet):\n    '''\n    Input:\n        tweet: a string containing a tweet\n    Output:\n        tweets_clean: a list of words containing the processed tweet\n\n    '''\n    stemmer = PorterStemmer()\n    stopwords_english = stopwords.words('english')\n    # remove stock market tickers like $GE\n    tweet = re.sub(r'\\$\\w*', '', tweet)\n    # remove old style retweet text \"RT\"\n    tweet = re.sub(r'^RT[\\s]+', '', tweet)\n    # remove hyperlinks\n    tweet = re.sub(r'https?:\\\/\\\/.*[\\r\\n]*', '', tweet)\n    # remove hashtags\n    # only removing the hash # sign from the word\n    tweet = re.sub(r'#', '', tweet)\n    # tokenize tweets\n    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,\n                               reduce_len=True)\n    tweet_tokens = tokenizer.tokenize(tweet)\n\n    tweets_clean = []\n    for word in tweet_tokens:\n        if (word not in stopwords_english and  # remove stopwords\n            word not in string.punctuation):  # remove punctuation\n            # tweets_clean.append(word)\n            stem_word = stemmer.stem(word)  # stemming word\n            tweets_clean.append(stem_word)\n\n    return tweets_clean\n\n\ndef test_lookup(func):\n    freqs = {('sad', 0): 4,\n             ('happy', 1): 12,\n             ('oppressed', 0): 7}\n    word = 'happy'\n    label = 1\n    if func(freqs, word, label) == 12:\n        return 'SUCCESS!!'\n    return 'Failed Sanity Check!'\n\n\ndef lookup(freqs, word, label):\n    '''\n    Input:\n        freqs: a dictionary with the frequency of each pair (or tuple)\n        word: the word to look up\n        label: the label corresponding to the word\n    Output:\n        n: the number of times the word with its corresponding label appears.\n    '''\n    n = 0  # freqs.get((word, label), 0)\n\n    pair = (word, label)\n    if (pair in freqs):\n        n = freqs[pair]\n\n    return n\n\n# From: https:\/\/matplotlib.org\/3.1.1\/gallery\/statistics\/confidence_ellipse.html#sphx-glr-gallery-statistics-confidence-ellipse-py\n\n\ndef confidence_ellipse(x, y, ax, n_std=3.0, facecolor='none', **kwargs):\n    \"\"\"\n    Create a plot of the covariance confidence ellipse of `x` and `y`\n    Parameters\n    ----------\n    x, y : array_like, shape (n, )\n        Input data.\n    ax : matplotlib.axes.Axes\n        The axes object to draw the ellipse into.\n    n_std : float\n        The number of standard deviations to determine the ellipse's radiuses.\n    Returns\n    -------\n    matplotlib.patches.Ellipse\n    Other parameters\n    ----------------\n    kwargs : `~matplotlib.patches.Patch` properties\n    \"\"\"\n    if x.size != y.size:\n        raise ValueError(\"x and y must be the same size\")\n\n    cov = np.cov(x, y)\n    pearson = cov[0, 1] \/ np.sqrt(cov[0, 0] * cov[1, 1])\n    # Using a special case to obtain the eigenvalues of this\n    # two-dimensionl dataset.\n    ell_radius_x = np.sqrt(1 + pearson)\n    ell_radius_y = np.sqrt(1 - pearson)\n    ellipse = Ellipse((0, 0),\n                      width=ell_radius_x * 2,\n                      height=ell_radius_y * 2,\n                      facecolor=facecolor,\n                      **kwargs)\n\n    # Calculating the stdandard deviation of x from\n    # the squareroot of the variance and multiplying\n    # with the given number of standard deviations.\n    scale_x = np.sqrt(cov[0, 0]) * n_std\n    mean_x = np.mean(x)\n\n    # calculating the stdandard deviation of y ...\n    scale_y = np.sqrt(cov[1, 1]) * n_std\n    mean_y = np.mean(y)\n\n    transf = transforms.Affine2D() \\\n        .rotate_deg(45) \\\n        .scale(scale_x, scale_y) \\\n        .translate(mean_x, mean_y)\n\n    ellipse.set_transform(transf + ax.transData)\n    return ax.add_patch(ellipse)\n","8632b7f4":"nltk.download('stopwords')\nnltk.download('twitter_samples')","0ab26466":"nltk.download('stopwords')\nnltk.download('twitter_samples')\nfilePath = f\"{getcwd()}\/..\/tmp2\/\"\nnltk.data.path.append(filePath)","ec1b5e8f":"all_positive_tweets = twitter_samples.strings('positive_tweets.json')\nall_negative_tweets = twitter_samples.strings('negative_tweets.json')\n\n# split the data into two pieces, one for training and one for testing (validation set)\ntest_pos = all_positive_tweets[4000:]\ntrain_pos = all_positive_tweets[:4000]\ntest_neg = all_negative_tweets[4000:]\ntrain_neg = all_negative_tweets[:4000]\n\ntrain_x = train_pos + train_neg\ntest_x = test_pos + test_neg\n\n# avoid assumptions about the length of all_positive_tweets\ntrain_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))\ntest_y = np.append(np.ones(len(test_pos)), np.zeros(len(test_neg)))","99a10dda":"Data = pd.read_csv('..\/input\/large-random-tweets-from-pakistan\/Random Tweets from Pakistan- Cleaned- Anonymous.csv', encoding_errors = 'ignore')\nData.head(20)","ec6f00e8":"custom_tweet = \"I grind this game. i m gonna miss it\"\n\n# print cleaned tweet\nprint(process_tweet(custom_tweet))","32e2f6ec":"def count_tweets(result, tweets, ys):\n    '''\n    Input:\n        result: a dictionary that will be used to map each pair to its frequency\n        tweets: a list of tweets\n        ys: a list corresponding to the sentiment of each tweet (either 0 or 1)\n    Output:\n        result: a dictionary mapping each pair to its frequency\n    '''\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    for y, tweet in zip(ys, tweets):\n        for word in process_tweet(tweet):\n            # define the key, which is the word and label tuple\n            pair = (word,y)\n\n            # if the key exists in the dictionary, increment the count\n            if pair in result:\n                result[pair] += 1\n\n            # else, if the key is new, add it to the dictionary and set the count to 1\n            else:\n                result[pair] = 1\n    ### END CODE HERE ###\n\n    return result","56daae4f":"Data= Data['full_text']","287ff63d":"result = {}\ntweets = Data[0:150]\nys = [1, 0, 0, 0, 0]\ncount_tweets(result, tweets, ys)","64edde0b":"freqs = count_tweets({}, train_x, train_y)\n","f7c48977":"def train_naive_bayes(freqs, train_x, train_y):\n    '''\n    Input:\n        freqs: dictionary from (word, label) to how often the word appears\n        train_x: a list of tweets\n        train_y: a list of labels correponding to the tweets (0,1)\n    Output:\n        logprior: the log prior. (equation 3 above)\n        loglikelihood: the log likelihood of you Naive bayes equation. (equation 6 above)\n    '''\n    loglikelihood = {}\n    logprior = 0\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n\n    # calculate V, the number of unique words in the vocabulary\n    vocab = set([pair[0] for pair in freqs.keys()])\n    V = len(vocab)\n\n    # calculate N_pos and N_neg\n    N_pos = N_neg = 0\n    for pair in freqs.keys():\n        # if the label is positive (greater than zero)\n        if pair[1] > 0:\n\n            # Increment the number of positive words by the count for this (word, label) pair\n            N_pos += freqs[pair]\n\n        # else, the label is negative\n        else:\n\n            # increment the number of negative words by the count for this (word,label) pair\n            N_neg += freqs[pair]\n\n    # Calculate D, the number of documents\n    D = len(train_y)\n\n    # Calculate D_pos, the number of positive documents (*hint: use sum(<np_array>))\n    D_pos = (len(list(filter(lambda x: x > 0, train_y))))\n\n    # Calculate D_neg, the number of negative documents (*hint: compute using D and D_pos)\n    D_neg = (len(list(filter(lambda x: x <= 0, train_y))))\n\n    # Calculate logprior\n    logprior = np.log(D_pos) - np.log(D_neg)\n\n    # For each word in the vocabulary...\n    for word in vocab:\n        # get the positive and negative frequency of the word\n        freq_pos = lookup(freqs,word,1)\n        freq_neg = lookup(freqs,word,0)\n\n        # calculate the probability that each word is positive, and negative\n        p_w_pos = (freq_pos + 1) \/ (N_pos + V)\n        p_w_neg = (freq_neg + 1) \/ (N_neg + V)\n\n        # calculate the log likelihood of the word\n        loglikelihood[word] = np.log(p_w_pos\/p_w_neg)\n\n    ### END CODE HERE ###\n\n    return logprior, loglikelihood","1e80c873":"logprior, loglikelihood = train_naive_bayes(freqs, train_x, train_y)\nprint(logprior)\nprint(len(loglikelihood))","6bfeb286":"def naive_bayes_predict(tweet, logprior, loglikelihood):\n    '''\n    Input:\n        tweet: a string\n        logprior: a number\n        loglikelihood: a dictionary of words mapping to numbers\n    Output:\n        p: the sum of all the logliklihoods of each word in the tweet (if found in the dictionary) + logprior (a number)\n\n    '''\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # process the tweet to get a list of words\n    word_l = process_tweet(tweet)\n\n    # initialize probability to zero\n    p = 0\n\n    # add the logprior\n    p += logprior\n\n    for word in word_l:\n\n        # check if the word exists in the loglikelihood dictionary\n        if word in loglikelihood:\n            # add the log likelihood of that word to the probability\n            p += loglikelihood[word]\n\n    ### END CODE HERE ###\n\n    return p","7b97764e":"my_tweet = 'She smiled.'\np = naive_bayes_predict(my_tweet, logprior, loglikelihood)\nprint('The expected output is', p)","0daaacb2":"def test_naive_bayes(test_x, test_y, logprior, loglikelihood):\n    \"\"\"\n    Input:\n        test_x: A list of tweets\n        test_y: the corresponding labels for the list of tweets\n        logprior: the logprior\n        loglikelihood: a dictionary with the loglikelihoods for each word\n    Output:\n        accuracy: (# of tweets classified correctly)\/(total # of tweets)\n    \"\"\"\n    accuracy = 0  # return this properly\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    y_hats = []\n    for tweet in test_x:\n        # if the prediction is > 0\n        if naive_bayes_predict(tweet, logprior, loglikelihood) > 0:\n            # the predicted class is 1\n            y_hat_i = 1\n        else:\n            # otherwise the predicted class is 0\n            y_hat_i = 0\n\n        # append the predicted class to the list y_hats\n        y_hats.append(y_hat_i)\n\n    # error is the average of the absolute values of the differences between y_hats and test_y\n    error = np.mean(np.absolute(y_hats-test_y))\n\n    # Accuracy is 1 minus the error\n    accuracy = 1-error\n\n    ### END CODE HERE ###\n\n    return accuracy","1cece26e":"print(\"Naive Bayes accuracy = %0.4f\" %\n      (test_naive_bayes(test_x, test_y, logprior, loglikelihood)))","b7a9e3ad":"# UNQ_C7 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# You do not have to input any code in this cell, but it is relevant to grading, so please do not change anything\n\n# Run this cell to test your function\nfor tweet in ['I am happy', 'I am bad', 'this movie should have been great.', 'great', 'great great', 'great great great', 'great great great great']:\n    # print( '%s -> %f' % (tweet, naive_bayes_predict(tweet, logprior, loglikelihood)))\n    p = naive_bayes_predict(tweet, logprior, loglikelihood)\n#     print(f'{tweet} -> {p:.2f} ({p_category})')\n    print(f'{tweet} -> {p:.2f}')","d287c619":"my_tweet = 'you are bad :('\nnaive_bayes_predict(my_tweet, logprior, loglikelihood)","e38efa68":"def get_ratio(freqs, word):\n    '''\n    Input:\n        freqs: dictionary containing the words\n        word: string to lookup\n\n    Output: a dictionary with keys 'positive', 'negative', and 'ratio'.\n        Example: {'positive': 10, 'negative': 20, 'ratio': 0.5}\n    '''\n    pos_neg_ratio = {'positive': 0, 'negative': 0, 'ratio': 0.0}\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    # use lookup() to find positive counts for the word (denoted by the integer 1)\n    pos_neg_ratio['positive'] = lookup(freqs,word,1)\n\n    # use lookup() to find negative counts for the word (denoted by integer 0)\n    pos_neg_ratio['negative'] = lookup(freqs,word,0)\n\n    # calculate the ratio of positive to negative counts for the word\n    pos_neg_ratio['ratio'] = (pos_neg_ratio['positive'] + 1)\/(pos_neg_ratio['negative'] + 1)\n    ### END CODE HERE ###\n    return pos_neg_ratio","0ba7daeb":"get_ratio(freqs, 'happi')","eb8b274c":"# UNQ_C9 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\ndef get_words_by_threshold(freqs, label, threshold):\n    '''\n    Input:\n        freqs: dictionary of words\n        label: 1 for positive, 0 for negative\n        threshold: ratio that will be used as the cutoff for including a word in the returned dictionary\n    Output:\n        word_set: dictionary containing the word and information on its positive count, negative count, and ratio of positive to negative counts.\n        example of a key value pair:\n        {'happi':\n            {'positive': 10, 'negative': 20, 'ratio': 0.5}\n        }\n    '''\n    word_list = {}\n\n    ### START CODE HERE (REPLACE INSTANCES OF 'None' with your code) ###\n    for key in freqs.keys():\n        word, _ = key\n\n        # get the positive\/negative ratio for a word\n        pos_neg_ratio = get_ratio(freqs, word)\n\n        # if the label is 1 and the ratio is greater than or equal to the threshold...\n        if label == 1 and pos_neg_ratio['ratio'] >= threshold:\n\n            # Add the pos_neg_ratio to the dictionary\n            word_list[word] = pos_neg_ratio\n\n        # If the label is 0 and the pos_neg_ratio is less than or equal to the threshold...\n        elif label == 0 and pos_neg_ratio['ratio'] <= threshold:\n\n            # Add the pos_neg_ratio to the dictionary\n            word_list[word] = pos_neg_ratio\n\n        # otherwise, do not include this word in the list (do nothing)\n\n    ### END CODE HERE ###\n    return word_list","f8473c94":"get_words_by_threshold(freqs, label=0, threshold=0.05)","cf022204":"get_words_by_threshold(freqs, label=1, threshold=10)","abcb1918":"print('Truth Predicted Tweet')\nfor x, y in zip(test_x, test_y):\n    y_hat = naive_bayes_predict(x, logprior, loglikelihood)\n    if y != (np.sign(y_hat) > 0):\n        print('%d\\t%0.2f\\t%s' % (y, np.sign(y_hat) > 0, ' '.join(\n            process_tweet(x)).encode('ascii', 'ignore')))","fab02f3c":"# Test with your own tweet - feel free to modify `my_tweet`\nmy_tweet = 'I am sad because I am not well today :)'\n\np = naive_bayes_predict(my_tweet, logprior, loglikelihood)\nprint(p)","17e4e7e4":"# Define Functions","c0c81546":"# Import Libraries"}}