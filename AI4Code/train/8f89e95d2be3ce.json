{"cell_type":{"9b859614":"code","5c8237c4":"code","1fd953dd":"code","837abf5d":"code","2ce5d437":"code","c86b20d8":"code","4a5a22f9":"code","4cdab054":"code","a26c5a57":"code","f7f839a0":"code","ff411c51":"code","5b3d1b5f":"code","4152c6b8":"code","24e555f3":"code","93d43160":"code","40916cdb":"code","a9321e0b":"code","651dfa6e":"code","81391173":"code","71a5c18a":"code","9cc75dfd":"code","9e12fcef":"code","d4f34860":"code","c0d50fc8":"code","be31934e":"code","16b4179b":"code","47a1c73c":"code","89ab2c4b":"code","311e33cb":"code","4d90eec2":"code","6b8385ab":"code","635c2345":"code","9cc0e44b":"code","207cf0e7":"markdown","83d7a288":"markdown"},"source":{"9b859614":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline ","5c8237c4":"df=pd.read_csv(\"..\/input\/fortnite-statistics-corresponding-to-mental-state\/FortniteStatistics.csv\",engine=\"python\");df.head()","1fd953dd":"df[\"Time of Day\"].unique()","837abf5d":"df.shape","2ce5d437":"df1=df.describe().transpose();df1","c86b20d8":"df.info()","4a5a22f9":"df.Accuray=df.Accuracy.replace(regex=True, inplace=True, to_replace=r'[^0-9.\\-]', value=r'')\ndf.Accuracy=df.Accuracy.astype(\"float\")\ndf.dtypes","4cdab054":"df.describe().boxplot()\nplt.xticks(rotation=90)\nplt.show()","a26c5a57":"f,(ax1,ax2) = plt.subplots(1,2,sharey=True,figsize=(25,10))\ng1 = sns.heatmap(df[df[\"Mental State\"]==\"sober\"].corr()*100,cmap=\"YlGnBu\",cbar=False,ax=ax1,annot=True)\ng1.set_title('features when mental state was sober')\ng2 = sns.heatmap(df[df[\"Mental State\"]==\"high\"].corr()*100,cmap=\"YlGnBu\",cbar=True,ax=ax2,annot=True)\ng2.set_title('features when mental state was high')\nplt.suptitle(\"Heatmap as per their Mental state \")\nplt.show()","f7f839a0":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndf[\"Mental State\"]=labelencoder.fit_transform(df['Mental State']).astype(\"int\")\ndf[\"Accuracy\"]=labelencoder.fit_transform(df['Accuracy']).astype(\"float\")\ndf[\"Time of Day\"]= [i.replace(':00 PM', '') for i in df[\"Time of Day\"]]\ndf[\"Time of Day\"]=pd.to_numeric(df[\"Time of Day\"], errors='ignore')","ff411c51":"df.dtypes","5b3d1b5f":"df.iloc[:,4:].apply(lambda x: (x-x.mean())\/ x.std()).plot.box()#Normalize the columns to see the unbiaseness in short perspective\nplt.xticks(rotation=90) # player is an average one.\n#most of time he played in his zone vary less outliers","4152c6b8":"sns.pairplot(df, hue=\"Mental State\",diag_kind=\"hist\",corner=True);plt.show()","24e555f3":"sns.catplot(x=\"Time of Day\",col=\"Mental State\",y=\"Placed\",data=df)# 0 means \"high\" and 1 means \"Sober\"","93d43160":"x=df.loc[:,[\"Placed\",'Time of Day', 'Eliminations','Assists', 'Revives','Accuracy',\n            'Hits', 'Head Shots','Distance Traveled', 'Materials Gathered',\n            'Materials Used','Damage Taken', 'Damage to Players', 'Damage to Structures']]\ny=df[\"Mental State\"]","40916cdb":"from sklearn.feature_selection import mutual_info_classif\nimportant_features =mutual_info_classif(x,y)\nfeat_importances=pd.Series(important_features,df.columns[0:len(df.columns)-2])\nfeat_importances.plot(kind=\"bar\")","a9321e0b":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)","651dfa6e":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(random_state=0,n_estimators=100)\nclf.fit(x_train, y_train)\ny_pred=clf.predict(x_test);y_pred","81391173":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint(accuracy_score(y_test, y_pred)*100)","71a5c18a":"#Lets try Neural Network regressor\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.layers import Dense, Activation,Dropout\nfrom keras.models import Sequential","9cc75dfd":"X=df.loc[:,[\"Mental State\",'Time of Day', 'Eliminations','Assists', 'Revives','Accuracy',\n            'Hits', 'Head Shots','Distance Traveled', 'Materials Gathered',\n            'Materials Used','Damage Taken', 'Damage to Players', 'Damage to Structures']]\nY=df.Placed","9e12fcef":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.25, random_state = 0)","d4f34860":"plt.figure(num=None, figsize=(10,8), dpi=80, facecolor='whitesmoke', edgecolor='pink')\n\nfeat_importances = pd.Series(clf.feature_importances_, index= X.columns)\n\nfeat_importances.nlargest(10).plot(kind='barh')","c0d50fc8":"input_size=14\noutput_size=1\nmodels = tf.keras.Sequential()\nmodels.add(Dense(10, activation = 'relu', input_dim = input_size))\nmodels.add(Dense(units = 5, activation = 'sigmoid'))\nmodels.add(Dropout(0.2))\n    # Adding the third hidden layer\nmodels.add(Dense(units = 5, activation = 'relu'))\nmodels.add(Dropout(0.2))\n\nmodels.add(Dense(units = 5, activation = 'relu'))\nmodels.add(Dense(units = 5, activation = 'relu'))\n    # Adding the output layer\nmodels.add(Dense(units = 1))\nmodels.compile(optimizer = tf.keras.optimizers.SGD(learning_rate=0.02), loss = 'mean_squared_error')\nhistory=models.fit(X,Y,epochs=200,verbose=1)\nhistory","be31934e":"loss=history.history['loss']\nepochs = range(1, len(loss)+1)\nplt.plot(epochs, loss, 'go', label='Training loss')\nplt.legend()\nplt.show()","16b4179b":"#model didn't learn well","47a1c73c":"#lets try random forest regressor\n\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\n  \n# fit the regressor with x and y data\nregressor.fit(X_train, Y_train)  \nY_pred = regressor.predict(X_test)","89ab2c4b":"df_NEW=pd.DataFrame({'Actual':Y_test, 'Predicted':Y_pred})","311e33cb":"df_NEW","4d90eec2":"from sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, Y_pred)))","6b8385ab":"errors = abs(Y_pred - Y_test)\nprint('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')\n\nmape = 100 * (errors \/ Y_test)\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')","635c2345":"plt.figure(figsize=(5, 7))\n\n\nax = sns.distplot(Y_test, hist=False, color=\"r\", label=\"Actual Value\")\nsns.distplot(Y_pred, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax)\n\n\nplt.title('Actual vs Fitted Values')\n\n\nplt.show()","9cc0e44b":"# IMPROVE IT LATER","207cf0e7":"* ## Looks like our Player become high,active in\/btw 4 to 9\n* ## Players Performance decreased as the day comes to end.\n* ## He was at his peak at the start of the game.\n* ## Accuracy,revives,assists goes down when the elminations were high.\n\n### Above given pairplot shows clear picture of data.","83d7a288":"# Factors that decides his placed or Position in Fortnite points table are\n1. 'Time of Day', 'Eliminations','Assists', 'Revives', 'Accuracy', 'Hits', 'Head Shots','Distance Traveled', 'Materials Gathered', 'Materials Used','Damage Taken', 'Damage to Players', 'Damage to Structures'"}}