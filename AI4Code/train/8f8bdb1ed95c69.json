{"cell_type":{"36e328d7":"code","75123337":"code","c4c065a9":"code","4278e023":"code","46eb11ad":"code","4cc3658d":"code","94081f99":"code","b60c3702":"code","cf16215d":"code","94f4aeb4":"code","d0d4de35":"code","aee9e426":"code","7e2213bc":"code","2b9a23d1":"code","dbe427c9":"code","50089a59":"code","83f02be5":"code","30b935fe":"code","e6c7b679":"code","8c9c205f":"code","1b81c5dd":"code","4e082fd7":"code","890b7dc8":"code","84ad9b4a":"code","62904bca":"code","c494c39d":"code","ec5207ee":"code","cc557263":"code","3719362f":"code","9903d198":"code","caf5fd31":"code","fbdbe86a":"code","18762c4b":"code","0fbd2a57":"code","30cbd91e":"code","a67a6819":"code","313ab26e":"code","21eb9885":"code","93b45cbd":"code","98577fa9":"code","cf64b08a":"code","f6739dcf":"code","50687d31":"code","68cd969f":"code","332ff2ef":"code","ece9f119":"code","7cce84a7":"markdown","70f01677":"markdown","7c4e5682":"markdown","a3f4bfcb":"markdown","cb99b0f0":"markdown","36d63959":"markdown","42293f87":"markdown","5144f939":"markdown","f253def8":"markdown","652b0586":"markdown","1503e3fb":"markdown","2eb883ce":"markdown","bcbd1346":"markdown","77c46d2a":"markdown","606dd591":"markdown","a458f471":"markdown","942abfd5":"markdown","6c998f78":"markdown","5490ff17":"markdown","675284d0":"markdown","7d3f9b24":"markdown","6f17de9a":"markdown","a2620009":"markdown","e54dba06":"markdown","8a7dff79":"markdown","7dcd166a":"markdown","716c5b5f":"markdown","f1d6270d":"markdown","bd2c8bc5":"markdown","9ee713a2":"markdown","b339edfd":"markdown"},"source":{"36e328d7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport folium\nimport matplotlib as mpl","75123337":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c4c065a9":"df_brut = pd.read_csv('..\/input\/flights-in-brazil-compilation-jun2019-jun2021\/raw_2021.csv')\nairports_code_brut = pd.read_csv('\/kaggle\/input\/air-codeg\/airport-codes.csv', engine='python')","4278e023":"df_brut.head(2)","46eb11ad":"airports_code_brut.head(2)","4cc3658d":"df_brut","94081f99":"df_brut['line_type'].hist();","b60c3702":"temp_df = df_brut.copy()\ntemp_airports_code = airports_code_brut.copy()","cf16215d":"non_necessary_df = ['auth_code', 'scheduled_dep', 'real_dep', 'jus_code']\ntemp_df = temp_df.drop(labels=non_necessary_df, axis=1)","94f4aeb4":"date_cols = ['scheduled_arr', 'real_arr']\n\nfor d in date_cols:\n    temp_df[d] = pd.to_datetime(temp_df[d])\n    \ntemp_df.head(2)","d0d4de35":"def n_rows_deleted(df_init, df_final):\n    n_rows = abs(df_init.shape[0] - df_final.shape[0])\n    print(\"{} rows have been deleted\".format(n_rows))","aee9e426":"temp_df = temp_df.loc[temp_df['situation'] == 'REALIZADO']\nn_rows_deleted(df_brut, temp_df)","7e2213bc":"df_N = temp_df.loc[(temp_df['line_type'] == 'N')]\ndf_I = temp_df.loc[(temp_df['line_type'] == 'I')]\n\nframes = [df_I, df_N]\ntemp_df = pd.concat(frames)","2b9a23d1":"def looking_for_dt(df):\n    tmin = df['real_arr'].min()\n    tmax = df['real_arr'].max()\n    print(\"t min = {} \\nt max = {}\".format(tmin, tmax))\n\n    dt = tmax - tmin\n    print(\"dt = {}\".format(dt))\n    \n    return tmin, tmax, dt","dbe427c9":"looking_for_dt(temp_df)","50089a59":"split_date = datetime.datetime(2021,8,1)\ntemp_df = temp_df.loc[temp_df['real_arr'] < split_date]","83f02be5":"looking_for_dt(temp_df)","30b935fe":"n_rows_deleted(df_brut, temp_df)","e6c7b679":"temp_df['year'] = temp_df['real_arr'].dt.year","8c9c205f":"temp_df['month'] = temp_df['real_arr'].dt.month","1b81c5dd":"temp_df['hour'] = temp_df['real_arr'].dt.hour","4e082fd7":"temp_df['dt_arr'] = (temp_df['scheduled_arr'] - temp_df['real_arr'])\ntemp_df['dt_arr_min'] = temp_df['dt_arr'] \/ np.timedelta64(1, 'm')\ntemp_df['delay'] = temp_df['dt_arr_min'].apply(lambda x : 'Late' if x<0 else 'Non Late')","890b7dc8":"temp_airports_code['long'] = temp_airports_code['coordinates'].str.split(',', expand=True)[0]\ntemp_airports_code['lat'] = temp_airports_code['coordinates'].str.split(',', expand=True)[1]","84ad9b4a":"temp_df.isna().sum()","62904bca":"temp_df = temp_df.dropna()\ntemp_df.isna().sum()","c494c39d":"df = temp_df.copy()\nairports_code = temp_airports_code.copy()\ndf_delay = df.loc[df['delay'] == 'Late']","ec5207ee":"delayed_flight = df_delay.shape[0]\ntotal_flight = df.shape[0]\np_delayed_flight = delayed_flight\/total_flight\n\nprint('percentage of delayed flight = {:.0%}'.format(p_delayed_flight))","cc557263":"ax = sns.countplot(x=\"delay\", data=df)\nax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))","3719362f":"df_delay.boxplot(showfliers=False, column=['dt_arr_min']);","9903d198":"s_delay = df_delay['dt_arr_min']\ns_delay.hist();","caf5fd31":"s_delay.hist(range=[-180,0])","fbdbe86a":"df_delay_120 = df_delay[df_delay['dt_arr_min'] > -120]\np = df_delay_120.shape[0] \/ df_delay.shape[0]\nprint(\"{:.2%} of delayed flights are conserved\".format(p))","18762c4b":"def count_sum_by(df, criteria, colmn):\n    s_sum = df[criteria].groupby(df[colmn]).sum()\n    s_count = df[criteria].groupby(df[colmn]).count()\n    s_sum_count = s_sum\/s_count\n    \n    frame = {\n        'sum_delay' : s_sum,\n        'count_delay' : s_count,\n        'ratio_sum_count' : s_sum_count \n    }\n    \n    df_count_sum = pd.DataFrame(frame)\n    \n    return df_count_sum","0fbd2a57":"df_delay_origin = count_sum_by(df_delay_120, 'dt_arr_min', 'origin')","30cbd91e":"n = 20\ndf_delay_origin = df_delay_origin.sort_values(by=['count_delay'], ascending=False)\nworst_10_origin = df_delay_origin[:n]","a67a6819":"# Extract lat and long\ncols = ['ident', 'name', 'long', 'lat']\nt_df = pd.DataFrame()\n\nfor idx, airport in enumerate(worst_10_origin.index):\n    r = airports_code.loc[airports_code['ident']==airport]\n    t_df = t_df.append(r[cols])","313ab26e":"worst_10_origin = worst_10_origin.join(t_df.set_index('ident'))","21eb9885":"colors_grad = ['red',\n '#ff0d00',\n '#ff1b00',\n '#ff2800',\n '#ff3600',\n '#ff4300',\n '#ff5100',\n '#ff5e00',\n '#ff6b00',\n '#ff7900',\n '#ff8600',\n '#ff9400',\n '#ffa100',\n '#ffae00',\n '#ffbc00',\n '#ffc900',\n 'gold',\n '#ffe400',\n '#fff200',\n 'yellow']","93b45cbd":"def map_airports(df, colors):\n    \n    m = folium.Map(location=(-12.109923,-57.8987643), zoom_start=4.32)\n\n    for i,a in enumerate(df.index):\n        r = df.iloc[i]\n        lat = r['lat']\n        long = r['long']\n        lbl = \"{:.0f} min\".format(r['ratio_sum_count'])\n        c = colors[i]\n\n        folium.Marker(\n        location=[lat, long],\n        popup=lbl,\n        icon=folium.Icon(color=\"white\" ,icon_color=c, icon=\"info-sign\"),\n        ).add_to(m)\n        \n    return m","98577fa9":"worst_10_origin = worst_10_origin.sort_values(by=['ratio_sum_count'], ascending=False)\nmap_airports(worst_10_origin, colors_grad)","cf64b08a":"df_delay_dest = count_sum_by(df_delay_120, 'dt_arr_min', 'destination')\nn = 20\ndf_delay_dest = df_delay_dest.sort_values(by=['count_delay'], ascending=False)\nworst_10_dest = df_delay_dest[:n]","f6739dcf":"cols = ['ident', 'name', 'long', 'lat']\nt_df = pd.DataFrame()\n\nfor idx, airport in enumerate(worst_10_dest.index):\n    r = airports_code.loc[airports_code['ident']==airport]\n    t_df = t_df.append(r[cols])\n\nworst_10_dest = worst_10_dest.join(t_df.set_index('ident'))","50687d31":"worst_10_dest = worst_10_dest.sort_values(by=['ratio_sum_count'], ascending=False)\nmap_airports(worst_10_dest, colors_grad)","68cd969f":"#df_airports = df_destination.add(df_origin, fill_value=0)\ndf_delay_airports = df_delay_dest.add(df_delay_origin, fill_value=0)\ndf_delay_airports['ratio_sum_count'] = df_delay_airports['sum_delay'] \/ df_delay_airports['count_delay']\ndf_delay_airports = df_delay_airports.sort_values(by='count_delay', ascending=False)\nn=20\nworst_10_airports = df_delay_airports.iloc[:n]","332ff2ef":"cols = ['ident', 'name', 'long', 'lat']\nt_df = pd.DataFrame()\n\nfor idx, airport in enumerate(worst_10_airports.index):\n    r = airports_code.loc[airports_code['ident']==airport]\n    t_df = t_df.append(r[cols])\n\nworst_10_airports = worst_10_airports.join(t_df.set_index('ident'))","ece9f119":"worst_10_airports = worst_10_airports.sort_values(by=['ratio_sum_count'], ascending=False)\nmap_airports(worst_10_airports, colors_grad)","7cce84a7":"### b) keep N and I flights","70f01677":"## 7) prepare df for exploration","7c4e5682":"### d) dt_arr_min","a3f4bfcb":"# Import Libraries","cb99b0f0":"# Clean datasets","36d63959":"## 5) Create new columns","42293f87":"## 2) define columns type","5144f939":"## 5) Delay by airports","f253def8":"This part is focus on delayed flight. I'm trying to highlight some informations about delay by airports, companies, etc etc","652b0586":"# Exploration : The Delay","1503e3fb":"## 1) Percentage of delayed flight","2eb883ce":"## 4) Delete outrange date ","bcbd1346":"### c) Hour","77c46d2a":"## 6) NaN values ?","606dd591":"### map","a458f471":"### b) Month","942abfd5":"## 0) quick view","6c998f78":"## 2) Statistics","5490ff17":"## 3) Delay by origin","675284d0":"#### add lat and long","7d3f9b24":"### a) Datetime col","6f17de9a":"### e) airports code : lat & long","a2620009":"### a) delete 'non realizado' flights","e54dba06":"## 1) Drop useless columns","8a7dff79":"### b) drop delay longer than 2 hours","7dcd166a":"### a) global","716c5b5f":"#### show","f1d6270d":"### a) Year","bd2c8bc5":"## 3) Delete some rows","9ee713a2":"## 4) Delay by destination","b339edfd":"# Load dataset"}}