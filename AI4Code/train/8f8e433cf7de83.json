{"cell_type":{"b64f4118":"code","188eea03":"code","6835292a":"code","eebe751d":"code","eb6a296a":"code","dbf9c45e":"code","fb338764":"code","1c95467d":"code","f5c83c30":"code","a555f8b0":"markdown","274aa27b":"markdown","0108e0ae":"markdown","9f79b8d2":"markdown","42826a30":"markdown","63f52ec0":"markdown","03cbaf2f":"markdown","7fad0739":"markdown","407679f5":"markdown","d244d011":"markdown"},"source":{"b64f4118":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib notebook\n\ndata = pd.read_csv('..\/input\/closing_odds.csv.gz', compression='gzip', sep=',', quotechar='\"')\nprint('Reading completed. Total rows {}'.format(len(data)))\n#data.info()\n","188eea03":"#round((1\/ data[['max_odds_home_win',]]).sum(axis=1).sort_values(),1).value_counts().sort_index()\n\n# CONSENCUS PROBABILITY\n\n# 1. MINIMUM CHANCE\n\ndata['min_ch_home'] = 1 \/ data.max_odds_home_win\ndata['min_ch_draw'] = 1 \/ data.max_odds_draw\ndata['min_ch_away'] = 1 \/ data.max_odds_away_win\n\n#sum\ndata['sum_min_chances'] = data.min_ch_home + data.min_ch_draw + data.min_ch_away\n\n\n# 2. DETECT FORKS\n\ndef fork(row):\n    if min(row['n_odds_home_win'],row['n_odds_draw'],row['n_odds_away_win']) < 5:\n        return 0\n    elif row['sum_min_chances'] > 1:\n        return 0\n    else:\n        return 1\n\ndata['fork'] = data.apply(fork,axis = 1)\nprint('Forks detection complete')\n\n# 3. CONCENSUS PROBABILITY\n#actually, we don't need this probability that much. but it will help us to make better split between wins bets\n#data['p_cons_home'] = 1 \/ data.avg_odds_home_win\n#data['p_cons_draw'] = 1 \/ data.avg_odds_draw\n#data['p_cons_away'] = 1 \/ data.avg_odds_away_win\n#data['p_cons_sum'] = data.p_cons_home + data.p_cons_draw + data.p_cons_away\n","6835292a":"# YOUR BET\n\ndata['bet_home'] = 100 * data['min_ch_home'] \/ data['sum_min_chances']\ndata['bet_draw'] = 100 * data['min_ch_draw'] \/ data['sum_min_chances']\ndata['bet_away'] = 100 * data['min_ch_away'] \/ data['sum_min_chances']\ndata['sum_bet'] = data.bet_home + data.bet_draw + data.bet_away","eebe751d":"#WINNER DETECTION\n\ndef winner(row):\n    if row['home_score'] > row['away_score']: return 1\n    elif row['home_score'] == row['away_score']: return 2\n    elif row['home_score'] < row['away_score']: return 3\n    else: return -1\n    \ndata['REAL_WINNER'] = data.apply(winner, axis = 1) # 1 -home, 2 - draw, 3 - away","eb6a296a":"#forks_df = data[data.fork == 1].copy()\n\n#forks_df = forks_df[forks_df.league.str.contains('Ukraine')]\n\ndef profit(row):\n    if row['fork'] == 0: return 0\n    if   row['REAL_WINNER'] == 1: return row['bet_home'] * (row['max_odds_home_win']) - 100\n    elif row['REAL_WINNER'] == 2: return row['bet_draw'] * (row['max_odds_draw']) - 100\n    elif row['REAL_WINNER'] == 3: return row['bet_away'] * (row['max_odds_away_win']) - 100\n    else: return '-1'\n    \n# costs are always 100$    \ndata['PROFIT'] = data.apply(profit,axis = 1)\n\n#print('Total Profit: {:.0f}\\nTotal Costs: {}'.format(data.PROFIT.sum(), len(data)*100))\nprint('Total Profit: {}'.format(data.PROFIT.sum()))\n","dbf9c45e":"%matplotlib notebook\n\n\n# amount of evernts with forks and without forks\n# based on probability sum\nfig3, ax3 = plt.subplots()\n\n\nplot_ser = data.sum_min_chances.round(2).value_counts().sort_index().cumsum()\nplot_ser = plot_ser \/ plot_ser.max() * 100\n#fig1 = plt.figure()\nplot_ser[plot_ser.index <= 1].plot(color = 'green', label = 'you win') # we win\nplot_ser[plot_ser.index >= 1].plot(color = 'red', label = 'you loose') # we lose\nplt.xlim(.8,1.2)\nplt.ylim(0,)\nplt.xlabel('Probability Sum')\nplt.ylabel('% of total bets')\n\nplt.axvline(x=1, color = 'black', ls = ':', alpha = 0.3)\n\nwin_line = plot_ser[plot_ser.index <= 1].max().round(2)\nplt.axhline(y=win_line, color = 'black', ls = ':', alpha = 0.3)\n\nplt.text(1.2, 20, ' {:.0f}% of bets with folks'.format(win_line), fontsize=10,horizontalalignment='right', fontstyle = 'italic')\nplt.title('Cumulative distribution, %')\n\n#plt.axhspan(0.25, 70, facecolor='0.5', alpha=0.5)\n#plt.axvspan(1.25, 50, facecolor='#2ca02c', alpha=0.5)\n\nplt.legend()","fb338764":"#%matplotlib notebook\nfig2 = plt.figure()\ndata[data.fork == 1].PROFIT.round(0).map(int).value_counts().sort_index().plot.bar(color = 'r', alpha = 0.5, width = 1)\n\nplt.xlim(0.5,10.5)\nplt.ylabel('Amount of events')\nplt.xlabel('Fork ROI, %')\nplt.title('Distribution of forks by ROI, rounded to int')","1c95467d":"# calculate amount of bets for qurtiles\n\ncum_df = data[data.PROFIT > 0.01].PROFIT.sort_values().to_frame()\ncum_df.reset_index(drop = True, inplace = True)\ncum_df['PROFIT_CUM'] = cum_df['PROFIT'].cumsum().map(lambda x: round(x, 2))\ncum_df['ROI'] = cum_df['PROFIT'].map(lambda x: round(x,2))\ncum_df['PROCENTILE'] = cum_df['PROFIT_CUM'] \/ cum_df['PROFIT_CUM'].max() * 100\n\nperc_dict = dict()\nfor perc in (25, 50 , 75, 100):\n    temp_df = cum_df[cum_df.PROCENTILE >= perc]\n    i = temp_df.head(1).index[0]\n    max_roi = cum_df.loc[i,'ROI']\n    bets = len(temp_df)\n    profit = cum_df.loc[i,'PROFIT_CUM']\n    print('ROI: {}, bets: {}. Profit: {}'.format(max_roi, bets, profit))\n    perc_dict[perc] = (max_roi, profit)\n    #print(max_roi)\n    #print(i, max_roi)\n#cum_df\n\ncum_df.head(3)","f5c83c30":"#fig4, ax = plt.subplots(111)\n#plt.gca()\n#fig4 = plt.figure()\n#.loc[[2.51, 6.46, 35.38, 1458.58]]\n\nimport math\n#math.log(100, 10)\nfig4, ax4 = plt.subplots()\nplot_df = cum_df.copy()\n\nplot_df['ROI'] = plot_df.ROI.map(lambda x: math.log(x, 10))\nplot_df = plot_df.drop_duplicates('ROI', keep = 'last').set_index('ROI')\nplot_df.index.name = 'ROI, %'\n#fig4 = plt.figure()\nplot_df.PROFIT_CUM.plot(ax = ax4, color = 'green', alpha = 1)\n\nax4.set_xticklabels([str(10**x)+'%' for x in ax4.get_xticks()])\nax4.set_ylabel(\"Profit, '000 $\")\nax4.set_ylim(0,)\nax4.set_yticklabels([x \/\/ 1000 for x in ax4.get_yticks()])\n\nfor p, (roi, pr) in perc_dict.items():\n    log_x = math.log(roi, 10)\n    plt.axvline(x= log_x, color = 'black', alpha = 0.1, ls = '--')\n    plt.axhline(y= pr, color = 'black', alpha = 0.1, ls = '--')\n#plt.axvline(x=math.log(6.46,10), color = 'black', alpha = 0.3)\n\n    plt.text(log_x, pr, '{}P. Roi: {:.1f}%. Profit: {:.0f}k $'.format(p, roi, pr\/1000), fontsize=10,horizontalalignment='right', fontstyle = 'italic')\n\n#ax4.set_ylim(1000,200000)\n#ROI: 2.51, bets: 17507. Profit: 49716.77\n#\u2116ROI: 6.46, bets: 4491. Profit: 99432.21\n#\u2116ROI: 35.38, bets: 618. Profit: 149174.86\n#ROI: 1458.58, bets: 1. Profit: 198858.41\n            \nplt.title('Cumulative Profit vs ROI on logarithm scale')    \n\n#cum_df.ROI.map\n    \n#cum_df.loc[[2.51, 6.46, 35.38, 1458.58]]\n#cum_df","a555f8b0":"*The following analysis was done thanks to dataset on Kaggle:\n\nLink: https:\/\/www.kaggle.com\/austro\/beat-the-bookie-worldwide-football-dataset\n\nThe researchers, who shared this dataset, wrote a very interesting article about how to beat a bookie.\n\nLink: https:\/\/arxiv.org\/ftp\/arxiv\/papers\/1710\/1710.02824.pdf\n\nMoreover, they did explanation of this method with less mathematic language:\n\nLink: http:\/\/www.lisandrokaunitz.com\/index.php\/en\/beat-the-bookies-strategy-explained\/*\n\nWell, I though, I could try to find another way to take adventage and use another techinic to beat the bookie all the time.\n\n**AUTHORS STRATEGY IN FEW WORDS**\n1. Find underestimated bets\n2. Bet on one outcome\n3. Win\n\n**MY STRATEGY**\n1. Find forks (explanation will be provided below)\n2. Bet on all 3 outcomes\n3. Win because of odds difference.\n\nFork is a case, when different odds on bookie web-sites allow you to place 3 bets (home team win, draw, away team win) and you will always win.\n\nImagine, that you place a bet coin flip:\n1) one bookie has odds 2.1 \/ 1.8\n2) another one 1.7 \/ 2.2. \nAll you have to do in this case - place 100 dols on heads with first bookie (2.1) and 100 dols on tails with another one (2.2). Anyway, you will win more (210 dols or 220 dols) than your total bet (200 dols). Your profit is 10-20$.\n\nEnjoy your reading.\n\nPS. In case you have any questions - feel free to contact me.\n\n\n-\n\n-\n\nOleksandr\n\n*tverdohleb.alex@gmail.com*","274aa27b":"Detecting winner based on score","0108e0ae":"# THAT'S ALL FORKS","9f79b8d2":"### So how much do we actually win?\nIt depends on our strategy, which depends on greedyness level.\n* Do we accept any opportunity, even with smalles ROI?\n* Do we place bets only with medium and high ROI?\n* Are we so lazy, that we place bets only on high ROI bets?\n\nLet's check our profit for each scenario","42826a30":"### Extra Columns\nwhere we calculate: \n* probabilities\n* detect forks\n\nHow to detect forks?\n\nWe need to find all those cases, where sum of 1\/best_bet for all 3 outcomes < 100.","63f52ec0":"### Scenario 1.\nWe place bets for every event, which has fork","03cbaf2f":"### Calculation your profit due to wins\nProfit = Sum(Odd * Bet) - 100","7fad0739":"### Research Description","407679f5":"### Read Files","d244d011":"If we place 100 dols for each fork bet, how much we need to place for each outcome?"}}