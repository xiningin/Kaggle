{"cell_type":{"17c767b2":"code","4555996d":"code","5b8ef329":"code","52a6a865":"code","de0b52ce":"code","90c47974":"code","69fb6570":"code","a2f3f64e":"code","40f1098a":"code","371d36b1":"code","ea5ade3b":"code","45779c2c":"code","22d0c947":"code","02ae62bf":"code","84ef5178":"code","a0175df1":"code","58c278dc":"code","d7c3a939":"code","d24f0613":"code","ce321fd0":"code","98967b45":"code","029af281":"markdown","4991b916":"markdown","94f800d8":"markdown","7caf37fc":"markdown","66aacab5":"markdown","6f47cfe6":"markdown","10fcbfce":"markdown","005b7225":"markdown","05f9b477":"markdown","5f131247":"markdown"},"source":{"17c767b2":"## Importing Required Libraries To Run This Project ##\n\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set_style('whitegrid')\n\n\nimport os\nfrom keras.applications import xception ## keras Library ##\nfrom keras.preprocessing import image ## keras Library ##\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nimport cv2 ## OpenCV ##\nfrom scipy.stats import uniform\n\nfrom tqdm import tqdm\nfrom glob import glob\n\n\nfrom keras.models import Model, Sequential ## keras Library ##\nfrom keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding, Masking ## keras Library ##\nfrom keras.utils import np_utils ## keras Library ##\nfrom tensorflow.keras.utils import to_categorical ## TenserFlow Library ##\n\n\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","4555996d":"## Importing The KerasPretrainedModels Dataset To The Project ##\n\n# copying the pretrained models to the cache directory\ncache_dir = os.path.expanduser(os.path.join('~', '.keras'))\nif not os.path.exists(cache_dir):\n    os.makedirs(cache_dir)\nmodels_dir = os.path.join(cache_dir, 'models')\nif not os.path.exists(models_dir):\n    os.makedirs(models_dir)\n\n#copy the Xception models\n!cp ..\/input\/keras-pretrained-models\/xception* ~\/.keras\/models\/\n#show\n!ls ~\/.keras\/models","5b8ef329":"## Defining Each Folder Path That's Provided With The Datasets And Put It In Categories ##\nbase_folder = '..\/input\/fire-dataset'\ndata_folder = '..\/input\/fire-dataset\/fire_dataset'\ntrain_data_folder = '..\/input\/fire-dataset\/fire_dataset\/fire_images'\ntest_date_folder  = '..\/input\/fire-dataset\/fire_dataset\/non_fire_images'\n\ncategories = ['fire_images', 'non_fire_images']\nlen_categories = len(categories)","52a6a865":"## To Define Both Image Count And Train Data \/ Categories To Preview Them Later ##\n\nimage_count = {}\ntrain_data = []\n\nfor i , category in tqdm(enumerate(categories)):\n    class_folder = os.path.join(data_folder, category)\n    label = category\n    image_count[category] = []\n    \n    for path in os.listdir(os.path.join(class_folder)):\n        image_count[category].append(category)\n        train_data.append(['{}\/{}'.format(category, path), i, category])","de0b52ce":"## Previewing The Image Count That's Defined Prevously ##\n#show image count\nfor key, value in image_count.items():\n    print('{0} -> {1}'.format(key, len(value)))","90c47974":"## Create A DataFrame Showing Each ImagePath, ID and It's Label ##\n#create a dataframe\ndf = pd.DataFrame(train_data, columns=['file', 'id', 'label'])\ndf.shape\ndf.head()","69fb6570":"## Defining \/ Masking Each Function As Mentioned Using OpenCV ##\n## Put The Different Filters To The Images Provided To Make The Project Ready Under The Different Enviromenrts ##\n## Selecting Each Image Dimensions & Size ##\n\n#masking function\ndef create_mask_for_plant(image):\n    image_hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n\n    lower_hsv = np.array([0,0,250])\n    upper_hsv = np.array([250,255,255])\n    \n    mask = cv2.inRange(image_hsv, lower_hsv, upper_hsv)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11,11))\n    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)\n    \n    return mask\n\n#image segmentation function\ndef segment_image(image):\n    mask = create_mask_for_plant(image)\n    output = cv2.bitwise_and(image, image, mask = mask)\n    return output\/255\n\n#sharpen the image\ndef sharpen_image(image):\n    image_blurred = cv2.GaussianBlur(image, (0, 0), 3)\n    image_sharp = cv2.addWeighted(image, 1.5, image_blurred, -0.5, 0)\n    return image_sharp\n\n# function to get an image\ndef read_img(filepath, size):\n    img = image.load_img(os.path.join(data_folder, filepath), target_size=size)\n    #convert image to array\n    img = image.img_to_array(img)\n    return img","a2f3f64e":"## Showing The Previous Customized Images In Selected Rows & Columns ##\n\nnb_rows = 3\nnb_cols = 5\nfig, axs = plt.subplots(nb_rows, nb_cols, figsize=(10, 5));\nplt.suptitle('SAMPLE IMAGES');\nfor i in range(0, nb_rows):\n    for j in range(0, nb_cols):\n        axs[i, j].xaxis.set_ticklabels([]);\n        axs[i, j].yaxis.set_ticklabels([]);\n        axs[i, j].imshow((read_img(df['file'][np.random.randint(1000)], (255,255)))\/255.);\nplt.show();","40f1098a":"## Select An Image To Apply The Previous Filtering Settings In It With 4 Different Ways, Original Image, Mask, Segmented and Sharpen ##\n\n#get an image\nimg = read_img(df['file'][102],(255,255))\n#mask\nimage_mask = create_mask_for_plant(img)\n#segmentation\nimage_segmented = segment_image(img)\n#sharpen the image\nimage_sharpen = sharpen_image(image_segmented)\n\nfig, ax = plt.subplots(1, 4, figsize=(10, 5));\nplt.suptitle('SAMPLE PROCESSED IMAGE', x=0.5, y=0.8)\nplt.tight_layout(1)\n\nax[0].set_title('ORIG.', fontsize=12)\nax[1].set_title('MASK', fontsize=12)\nax[2].set_title('SEGMENTED', fontsize=12)\nax[3].set_title('SHARPEN', fontsize=12)\n\n\nax[0].imshow(img\/255);\nax[1].imshow(image_mask);\nax[2].imshow(image_segmented);\nax[3].imshow(image_sharpen);\n\n","371d36b1":"## Processing And Making All Images Ready To Work With The Previous Settings ##\n\nINPUT_SIZE=255\n\n##preprocess the input\nX_train = np.zeros((len(df), INPUT_SIZE, INPUT_SIZE, df.shape[1]), dtype='float')\nfor i, file in tqdm(enumerate(df['file'])):\n    #read image\n    img = read_img(file,(INPUT_SIZE,INPUT_SIZE))\n    #masking and segmentation\n    image_segmented = segment_image(img)\n    #sharpen\n    image_sharpen = sharpen_image(image_segmented)\n    x = xception.preprocess_input(np.expand_dims(image_sharpen.copy(), axis=0))\n    X_train[i] = x","ea5ade3b":"## Selecting The Shape And Size Of The Images After The Last Processing, Increased ##\n\nprint('Train Image Shape: ', X_train.shape)\nprint('Train Image Size: ', X_train.size)","45779c2c":"## Make Things Ready To Train The Fire, Non-Fire Images ##\n\ny = df['id']\ntrain_x, train_val, y_train, y_val = train_test_split(X_train, y, test_size=0.2, random_state=101)","22d0c947":"## Get \/ Print The Number Of The Images Will Be Trained ##\n\nprint('FIRE IMAGES ON TRAINING DATA: ',y_train[y_train==0].shape[0])\nprint('NON-FIRE IMAGES ON TRAINING DATA: ',y_train[y_train==1].shape[0])","02ae62bf":"## Put The Settings \/ Filters \/ Features Of The Previous Training Data To Start Training ##\n#get the features\nxception_bf = xception.Xception(weights='imagenet', include_top=False, pooling='avg')\nbf_train_x = xception_bf.predict(train_x, batch_size=32, verbose=1)\nbf_train_val = xception_bf.predict(train_val, batch_size=32, verbose=1)","84ef5178":"## Print \/ Get The Number of Validated Shape \/ Size Of Images Before The Training ##\n#print shape of feature and size\nprint('Train Shape: ', bf_train_x.shape)\nprint('Train Size: ', bf_train_x.size)\n\nprint('Validation Shape: ', bf_train_val.shape)\nprint('Validation Size: ', bf_train_val.size)","a0175df1":"## Using Keras, Making The Last Touchs Ready, Identifying The Layers Type, Output Shape and Param Number, With The Total Of Each One ##\n#keras Sequential model\nmodel = Sequential()\nmodel.add(Dense(units = 256 , activation = 'relu', input_dim=bf_train_x.shape[1]))\nmodel.add(Dense(units = 64 , activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","58c278dc":"## Start Training The Model With Selected Number Of Passes Of The training dataset has completed ##\n#train the model @ 100 epochs\nhistory = model.fit(bf_train_x, y_train, epochs=100, batch_size=32);","d7c3a939":"## Statistics About The Last Training. The Training Loss & Accuracy. ##\n\nfig, ax = plt.subplots(1,2,figsize=(14,5))\nax[0].set_title('TRAINING LOSS');\nax[1].set_title('TRAINING ACCURACY');\n\n\nax[0].plot(history.history['loss'], color= 'salmon',lw=2);\nax[1].plot(history.history['accuracy'], color= 'green',lw=2);","d24f0613":"## Predict The Valid Training Data Into New Folder ##\n#predict the validation data\npredictions = model.predict_classes(bf_train_val)","ce321fd0":"## Printing The Final Classification Report As The Precision, Recall, f1Score and Support Values ##\n\nprint(classification_report(y_val, predictions))","98967b45":"## Confusion Matrix Showing Different Heat Colors, It May Detect The Fire In The Different Rays ##\n\nconfusion_mat = confusion_matrix(y_val, predictions)\n\nplt.figure(figsize=(10,10))\nsns.heatmap(confusion_mat, square=True, annot=True,\n            yticklabels=['FIRE_IMG', 'NON_FIRE_IMG'],\n            xticklabels=['FIRE_IMG', 'NON_FIRE_IMG']);\nplt.title('CONFUSION MATRIX');\nplt.xlabel('Y_TRUE');\nplt.ylabel(\"PREDICTIONS\");","029af281":"#### CONFUSION MATRIX","4991b916":"#### SPLIT THE DATA","94f800d8":"### XCEPTION BOTTLENECK FEATURE EXTRACTION","7caf37fc":"### SHOW SAMPLE IMAGES","66aacab5":"### IMAGE PREPROCESSING","6f47cfe6":"### SHOW SAMPLE PROCESSED IMAGE\n","10fcbfce":"#### CLASSIFICATION REPORT","005b7225":"#### LOSS AND ACCURACY","05f9b477":"### DEEP LEARNING MODEL","5f131247":"## OVERVIEW\n---\n* Image Preprocessing with OpenCV\n    * Masking\n    * Segmentation\n    * Image Sharpening\n* Transfer Learning with Keras Pretrained Model\n* Feature Extraction\n* Deep Learning Model to Classify the Images"}}