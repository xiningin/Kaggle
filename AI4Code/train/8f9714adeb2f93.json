{"cell_type":{"ef4b213d":"code","e672cab9":"code","fd3d8c06":"code","b35ab737":"code","6b637b82":"code","e5a0adca":"code","50fbb8bc":"code","ba1be87a":"code","e5f518d0":"code","056af96a":"code","339a569c":"code","9d6b1617":"code","a8b3b353":"code","e5c87329":"code","cbc2f7a5":"markdown","4e4713ae":"markdown","d96b9cad":"markdown"},"source":{"ef4b213d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e672cab9":"#import data\ndata = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")","fd3d8c06":"data","b35ab737":"data.info()","6b637b82":"y = data[\"class\"].values\ny","e5a0adca":"data[\"class\"] = [0 if each == \"Normal\" else 1 for each in data[\"class\"]]","50fbb8bc":"x_data = data.drop([\"class\"], axis = 1)\nx_data","ba1be87a":"x = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))\nx","e5f518d0":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train, y_test = train_test_split(x,y,test_size=0.3, random_state=1)","056af96a":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=13)\nknn.fit(x_train, y_train)\nprediction = knn.predict(x_test)","339a569c":"prediction","9d6b1617":"print(\"{} nn score: {}\".format(3, knn.score(x_test,y_test)*100))","a8b3b353":"# find k value\nscore_list = []\n\nfor each in range(1,15):\n    knn2 = KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    \nplt.plot(range(1,15),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()\n","e5c87329":"print(\"{} nn score: {}\".format(13, knn.score(x_test,y_test)*100))","cbc2f7a5":"# Train Test Split","4e4713ae":"# KNN Model","d96b9cad":"# Normalization\n"}}