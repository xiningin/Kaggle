{"cell_type":{"a30b4e7c":"code","52dfab97":"code","3ebe7865":"code","21813036":"code","cecc9811":"code","c92a9ee4":"code","5f5ec87b":"code","8aea052b":"code","d4c63036":"code","bc13111c":"code","b971db60":"code","6da3a67c":"code","c06a0670":"code","1ce94e72":"code","ad192d21":"code","929859bf":"code","2057bd32":"code","dbdc2e8f":"code","a2d55da9":"code","108b8005":"markdown","7fe12fe1":"markdown","fa9e71ff":"markdown","96e7a537":"markdown","78fe7374":"markdown"},"source":{"a30b4e7c":"#some inputs\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nimport matplotlib.pyplot as plt\nimport pylab\n\n%matplotlib inline","52dfab97":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","3ebe7865":"train.head(2)","21813036":"test.head(2)","cecc9811":"y = train.loc[:,'label']\nX = train.loc[:,'pixel0':]\nprint('Shape of X: {0}, shape of y:{1}'.format(X.shape,y.shape))","c92a9ee4":"def digit_show(X,ax_x = 2, ax_y = 6):\n    X_reshape =X.values.reshape(len(X),28,28,1)\n    fig = plt.figure()\n    f, axs = plt.subplots(ax_x,ax_y,)\n    for index in range(ax_x*ax_y):\n        x = index\/\/ax_y if ax_x>1 else 0\n        y = index%ax_y if ax_y>1 else 0\n        axs[x,y].imshow(X_reshape[index][:,:,0],cmap='gray')\n\ndigit_show(X)\n","5f5ec87b":"X_train = X \/ 255.0\ntest = test \/ 255.0","8aea052b":"y = to_categorical(y, num_classes = 10)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","d4c63036":"\nX_train, X_test, y_train, y_test = train_test_split(X_train, y, test_size = 0.25, random_state=1)","bc13111c":"# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","b971db60":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n","6da3a67c":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","c06a0670":"# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","1ce94e72":"epochs = 1 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 86","ad192d21":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","929859bf":"y_train.shape","2057bd32":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_test,y_test),\n                              verbose = 2, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","dbdc2e8f":"results = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","a2d55da9":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","108b8005":"In this notebook I wand to use functions for model parameters fitting and for model choosing with sklearn","7fe12fe1":"## Data loading","fa9e71ff":"## Prediction","96e7a537":"## Fit the models\n### Split the data to train and test:","78fe7374":"# Some functions for my future work"}}