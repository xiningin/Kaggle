{"cell_type":{"90402976":"code","7ce2b2e4":"code","8e12afc0":"code","b7ed2d55":"code","1542c59d":"code","48de8e04":"code","9016f213":"code","e3bfba65":"code","2d24a8c9":"code","c93a5112":"code","a8cbc005":"code","a6cee690":"code","19087be0":"code","8f0893a4":"code","18406f60":"markdown","c083f7e1":"markdown","ff86951d":"markdown","df7723d9":"markdown","fed1869e":"markdown","90ac0650":"markdown","f1c8ef3c":"markdown"},"source":{"90402976":"import numpy as np\nimport pandas as pd\nfrom itertools import product\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport datetime as dt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7ce2b2e4":"def reduce_mem_usage(df, force_obj_in_category=True, debug=True):\n    \"\"\" \n    Iterate through all the columns of a dataframe and modify the data type to reduce memory usage. \n    This function originates from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n    \"\"\"\n    if debug:\n        start_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n        print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object and df[col].dtype.name != 'category' and 'datetime' not in col_type.name:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                for i_type in [np.int8, np.int16, np.int32, np.int64]:\n                    if c_min > np.iinfo(i_type).min and c_max < np.iinfo(i_type).max:\n                        df[col] = df[col].astype(i_type)\n                        break\n            elif str(col_type)[:4] == 'uint':\n                for i_type in [np.uint8, np.uint16, np.uint32, np.uint64]:\n                    if c_max < np.iinfo(i_type).max:\n                        df[col] = df[col].astype(i_type)\n                        break\n            elif col_type == bool:\n                df[col] = df[col].astype(np.uint8)\n            else:\n                df[col] = df[col].astype(np.float32)\n        elif force_obj_in_category and 'datetime' not in col_type.name:\n            df[col] = df[col].astype('category')\n\n    if debug:\n        end_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n        print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n        print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","8e12afc0":"# load training data from csv files\ntrain = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ashrae-energy-prediction\/test.csv')\nbuilding = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv')\nweather_train = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv')\nweather_test = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_test.csv')\nsubmission = pd.read_csv('..\/input\/ashrae-energy-prediction\/sample_submission.csv')","b7ed2d55":"print('Shape of the data:','\\n','  train_csv: ',train.shape,'\\n','  test_csv: ',test.shape,'\\n',\n      '  building_metadata.csv: ',building.shape,'\\n','  weather_train.csv: ',weather_train.shape,'\\n',\n      '  weather_test.csv: ',weather_test.shape,'\\n','  sample_submission.csv: ',submission.shape)","1542c59d":"train = reduce_mem_usage(train)\nbuilding = reduce_mem_usage(building)\nweather_train = reduce_mem_usage(weather_train)\ntest = reduce_mem_usage(test)\nweather_test = reduce_mem_usage(weather_test)\nsubmission = reduce_mem_usage(submission)","48de8e04":"train['meter_reading'] = np.log1p(train['meter_reading'])","9016f213":"meter = train.groupby(['meter','building_id']).mean()\nmeter","e3bfba65":"test_df = test.drop('timestamp', axis=1)\ntest_df.head()","2d24a8c9":"# create an empty dataframe with same rows as test_df\nresult = pd.DataFrame(columns=['row_id', 'building_id', 'meter', 'meter_reading'])\nresult.head()","c93a5112":"for j in meter.index:\n    temp = test_df[test_df['meter']==j[0]]\n    temp = temp[temp['building_id']==j[1]]\n    reading = meter.loc[(j[0], j[1])].values\n    temp['meter_reading'] = reading.item(0)\n    result = result.append(temp)","a8cbc005":"len(result)","a6cee690":"result.sort_values('row_id')","19087be0":"submission['meter_reading'] = np.expm1(result['meter_reading'])\nsubmission.to_csv('submission.csv', index=False)","8f0893a4":"submission.sample(100)","18406f60":"# Introduction","c083f7e1":"### Helper function to reduce memory usage\n* This function originates from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage","ff86951d":"Started on `17 October 2019`","df7723d9":"# Load training data","fed1869e":"#### This notebook uses averages of meter readings to predict the energy consumptions. No ML involved.","90ac0650":"# Write mean meter readings into the test data","f1c8ef3c":"# Get the mean meter readings by meter and building"}}