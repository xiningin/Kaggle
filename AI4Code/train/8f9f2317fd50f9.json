{"cell_type":{"af7aec25":"code","3722707f":"code","6e6d4470":"code","43c5d860":"code","82170f9e":"code","e710c534":"markdown","712b95fe":"markdown","b5c5e245":"markdown","da39c3ca":"markdown","10e2af8e":"markdown"},"source":{"af7aec25":"from graphviz import Digraph\ndef Bruijn(KMeros):\n    #Creamos nuestro grafo\n    Grafo_Bruijn=Digraph(engine = 'circo') \n    #Diccionario de vertices {Origen: [Posibles destinos]}\n    Vertices = dict() \n    Nodos=[]#Nodos destinos posibles\n    n = 1 #Contador que nos servira para ver el orden en que son insertados al grafo\n    #Recorremos los K-Meros para ir a\u00f1adiendolos a nuestro grafo dirigido\n    #Tambien estaremos rellenando un diccionario de vertices, donde la clave es el nodo origen\n    #y los valores ser\u00e1n los posibles nodos destino\n    for i in KMeros:\n        Nodos.append(i[1:3])\n        Grafo_Bruijn.edge(i[0:2],i[1:3],label = str(n)+' '+i)\n        if(i[0:2] not in Vertices):\n            Vertices[i[0:2]]=[i[1:3]]\n        else:\n            Vertices[i[0:2]].append(i[1:3])\n        n+=1\n    #Hallamos el nodo inicial restando nuestros de nodos origen posibles menos los nodos que llegan a ser destinos\n    NodoInicial = list(set(Vertices.keys())-set(Nodos))[0]\n    #Hallamos el nodo final restando el total de nodos destino posibles menos los nodos origen posibles\n    NodoFinal = list(set(Nodos)-set(Vertices.keys()))[0]\n    #Recorremos para hallar el camino euleriano\n    #Inicializamos el camino euleriano con el nodo inicial en \u00e9l\n    Camino_Euleriano = [NodoInicial]\n    NodoActual = NodoInicial\n    VerticesAux = Vertices\n    while(True):\n        if(NodoActual != NodoFinal):\n            if(VerticesAux[NodoActual][0] == NodoFinal and len(VerticesAux[NodoActual])>1):\n                #Aniadimos otro destino, diferente al final en caso se pueda\n                Camino_Euleriano.append(VerticesAux[NodoActual][1])\n                Aux = VerticesAux[NodoActual][1]\n                #Eliminamos el destino usado de los posibles destinos asociados al key \"NodoActual\"\n                VerticesAux[NodoActual].pop(1)\n                #Actualizamos el nodo actual\n                NodoActual = Aux\n            else:                \n                #Aniadimos el primer nodo destino posible al camino Euleriano\n                Camino_Euleriano.append(VerticesAux[NodoActual][0])\n                Aux = VerticesAux[NodoActual][0]\n                #Eliminamos el destino usado de los posibles destinos asociados al key \"NodoActual\"\n                VerticesAux[NodoActual].pop(0)\n                NodoActual = Aux\n        \n        else:\n            break;\n    #Ensamblamos\n    Genoma = ''\n    for j in Camino_Euleriano:\n        Genoma+=j[0]\n    Genoma+=Camino_Euleriano[len(Camino_Euleriano)-1][1]\n    #Mostramos los resultados\n    print('\/--------------------------------Ciclo Euleriano--------------------------------\/\\n',Camino_Euleriano)\n    print('\/--------------------------------Genoma Ensablado--------------------------------\/\\n')\n    for k in range(len(Camino_Euleriano)-1):\n        print(('\u2502'*k)+Camino_Euleriano[k]+Camino_Euleriano[k+1][1])\n    print(Genoma)\n    return Grafo_Bruijn","3722707f":"KMeros1 = ['TAG','CTG','GCT','ACT','CTA','TGC']\ngrafo = Bruijn(KMeros1)\ngrafo.engine = 'dot'#Atributo cambiado para mejorar la visualizacion del grafo\ngrafo","6e6d4470":"KMeros2 = ['TAC','CTA','TAG','ATA','CAT','ACA','CCT','GAC','CCC','ACC']\ngrafo = Bruijn(KMeros2)\ngrafo.engine = 'neato'#Atributo cambiado para mejorar la visualizacion del grafo\ngrafo","43c5d860":"KMeros3 = ['TAA','CAT','AGC','ATA','TAG','GCT','CTA','GGC','GCA',]\ngrafo = Bruijn(KMeros3)\ngrafo","82170f9e":"KMeros4 = ['GTC','TTC','GTT','TCC','TCC','CAG','AGT','CAG','AGT','ACA','CCA','CCG']\ngrafo = Bruijn(KMeros4)\ngrafo","e710c534":"## Ejemplo 2","712b95fe":"## Ejemplo 1","b5c5e245":"## Ejemplo 3","da39c3ca":"# Practica: Implementaci\u00f3n de Ensamblaje Bruijn Euler\n```Curso: Bioinform\u00e1tica\nDocente: Luis Beltr\u00e1n Palma Ttito\nAlumno: Salcedo Hurtado Jorge Andre\nCodigo: 171572```","10e2af8e":"## Ejemplo 4"}}