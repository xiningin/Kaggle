{"cell_type":{"e9b94c90":"code","e9185654":"code","62e95c98":"code","73a6d83f":"code","8ce5e2ac":"code","8a42419e":"code","07c6795a":"code","83e3350b":"code","6c4d58c2":"code","a1c1a772":"code","f0a13333":"code","fdce8691":"code","1c64d65a":"code","84c7dbd7":"code","4bcc82f4":"code","22e0bff1":"code","5944eb26":"code","302e39b8":"code","c6bd3f2d":"code","a7a51300":"code","6c4ab28c":"code","f64bde57":"code","d54e9105":"code","6ee7261a":"code","5cc20314":"code","4e2920c2":"code","63314fe9":"code","8340f333":"code","4fd11b8f":"code","947fc3ce":"code","ffed58a7":"code","4311bcbb":"code","9d72cb68":"code","418a1ef5":"code","dc9ad1be":"code","6ca75720":"code","01dff775":"code","460179c7":"code","633cf925":"code","acf01e76":"code","8f313106":"code","b4403212":"code","07e656e6":"code","0294904a":"code","5c4a2aee":"code","0ca95fc4":"code","f1c050f7":"code","533c51e6":"code","13c36736":"code","6ec1e889":"code","30f5106e":"code","a42da68b":"code","805ac110":"code","24f9b8ef":"code","0356b423":"code","a14f5d82":"code","629de96a":"code","b832e1ff":"code","bf5ed989":"code","edfe8f87":"code","362e389f":"code","2dbc0272":"code","ce3e6fce":"code","1d936780":"code","872af5f8":"code","282a1448":"code","d6cfa90b":"code","02b3d388":"code","6b087649":"code","11174066":"code","a9d5562b":"code","21f211ff":"code","20765813":"code","4f54b86a":"code","3b574c8d":"code","6e1ad939":"code","613e644f":"code","68e57ed3":"code","c288541b":"code","57cf82e1":"code","83de9374":"code","bd0ddde3":"code","9d2b081d":"code","8179e7b3":"code","0fc18fa4":"code","98b3d579":"code","45a8ff45":"code","3782021d":"code","7aeec1ca":"code","195f2eef":"code","daed7cac":"code","8eb13669":"code","5e019547":"code","f0c65657":"markdown","fe234b93":"markdown","1bc1d320":"markdown","56cd2298":"markdown","a18a00e4":"markdown","6a41bffe":"markdown","70aa900a":"markdown","e2b31037":"markdown","b516b823":"markdown","1fea6701":"markdown","1a22dc7f":"markdown","3548ebb5":"markdown","10151385":"markdown","8b964829":"markdown","d9961337":"markdown","197e92c0":"markdown","45a5a781":"markdown","46c0d65b":"markdown","04fe15ae":"markdown","f5881716":"markdown","e304c208":"markdown","b9cb8136":"markdown","8c9b0a11":"markdown","2e45998c":"markdown","4ee5da2a":"markdown","a3db48a9":"markdown","f094578b":"markdown","04a3a327":"markdown","fcee948b":"markdown","4d0f271f":"markdown","63743015":"markdown","553a15a6":"markdown","34f6ebb7":"markdown","bb10261b":"markdown","2e0b15b7":"markdown","dd454ee8":"markdown","2558e00c":"markdown","ad1b8302":"markdown","5bf883d7":"markdown","be27bca0":"markdown","5c77279e":"markdown","fe2a1a72":"markdown","6c0b04bb":"markdown"},"source":{"e9b94c90":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport pandas as pd\nimport pickle","e9185654":"print(np.__version__)\nprint(pd.__version__)\n","62e95c98":"df=pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nprint(\"***** First Five Rows of Dataset *****\")\ndf.head()","73a6d83f":"print(\"***** Shape of dataset *****\")\ndf.shape","8ce5e2ac":"L=list(df.columns)\nprint(\"***** Column names of dataset *****\")\nprint()\nprint(L)","8a42419e":"print('***** Description of dataset *****')\nprint()\ndf.describe()","07c6795a":"print(\"***** Basic Information about dataset *****\")\nprint()\nprint(df.info())","83e3350b":"df.isnull().sum()","6c4d58c2":"df['bmi']=df['bmi'].fillna(df['bmi'].mean())\nprint(\"Mean value of bmi is : \",df['bmi'].mean())","a1c1a772":"cat_columns=['gender' , 'hypertension' , 'ever_married' , 'work_type' , 'heart_disease' , 'Residence_type' , 'smoking_status']\nprint(\"***** Value counts in categorical features *****\")\nprint()\n\nfor i in cat_columns:\n    print(\"Value counts of\",i,'feature are : ')\n    print(df[i].value_counts())\n    print()","f0a13333":"#Dropping 'id' column\ndf=df.drop('id',axis=1)\n","fdce8691":"print(\"***** Value Count of 'stroke' column *****\")\ndf['stroke'].value_counts()","1c64d65a":"def with_hue(data,feature,ax):\n    \n    #Numnber of categories\n    num_of_cat=len([x for x in data[feature].unique() if x==x])\n    \n    bars=ax.patches\n    \n    for ind in range(num_of_cat):\n        ##     Get every hue bar\n        ##     ex. 8 X categories, 4 hues =>\n        ##    [0, 8, 16, 24] are hue bars for 1st X category\n        hueBars=bars[ind:][::num_of_cat] \n        # Get the total height (for percentages)\n        total=sum([x.get_height() for x in hueBars])\n        #Printing percentages on bar\n        for bar in hueBars:\n            percentage='{:.1f}%'.format(100 * bar.get_height()\/total)\n            ax.text(bar.get_x()+bar.get_width()\/2.0,\n                   bar.get_height(),\n                   percentage,\n                    ha=\"center\",va=\"bottom\",fontweight='bold',fontsize=10)\n    \n\n    \ndef without_hue(data,feature,ax):\n    \n    total=float(len(data))\n    bars_plot=ax.patches\n    \n    for bars in bars_plot:\n        percentage = '{:.1f}%'.format(100 * bars.get_height()\/total)\n        x = bars.get_x() + bars.get_width()\/2.0\n        y = bars.get_height()\n        ax.text(x, y,(percentage,bars.get_height()),ha='center',fontweight='bold',fontsize=10)","84c7dbd7":"fig=plt.figure(figsize=(10,5))\n#Setting Colour\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\n#Dealing with spines\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\n\n#count plot\nx_stroke=sns.countplot(data=df,x='stroke',palette=\"Set1\")\n\n#with percentages\nwithout_hue(df,'stroke',x_stroke)","4bcc82f4":"def plotting_cat_features(nrows,ncols,cat_columns):\n    \n    f,ax=plt.subplots(nrows=nrows,ncols=ncols,figsize=(15,19))\n    f.patch.set_facecolor('#F2EDD7FF')\n\n    #Setting background and foreground color\n    for i in range(0,nrows):\n        for j in range(0,ncols):\n            ax[i][j].set_facecolor('#F2EDD7FF')\n\n    #Plotting count plot \n    for i in range(0,nrows):\n        for j in range(0,ncols):\n            if(i==0): #For [0,0] sub plot\n                if(j==0):\n                    ax[i][j].spines['bottom'].set_visible(False)\n                    ax[i][j].spines['left'].set_visible(False)\n                    ax[i][j].spines['top'].set_visible(False)\n                    ax[i][j].spines['right'].set_visible(False)\n                    \n                    ax[i][j].tick_params(left=False,bottom=False)\n                    ax[i][j].set_xticklabels([])\n                    ax[i][j].set_yticklabels([])\n                    ax[i][j].text(0.5,0.5,\"Count plot of\\ncategorical features\",\n                                    horizontalalignment=\"center\",\n                                    verticalalignment='center',\n                                    fontweight='bold',fontsize=15,fontstyle='italic')\n                elif(j==1): #For [0,1] subplot\n                    ax[i][j].spines['bottom'].set_visible(False)\n                    ax[i][j].spines['left'].set_visible(False)\n                    ax[i][j].spines['top'].set_visible(False)\n                    ax[i][j].spines['right'].set_visible(False)\n                    \n                    ax[i][j].tick_params(left=False,bottom=False)\n                    ax[i][j].set_xticklabels([])\n                    ax[i][j].set_yticklabels([])\n                    ax[i][j].text(0.5,0.5,\"Count plot with respect to\\ntarget\",\n                                    horizontalalignment=\"center\",\n                                    verticalalignment='center',\n                                    fontweight='bold',fontsize=15,fontstyle='italic')\n\n            else:\n                #Without hueness\n                if(j==0):\n                    a1=sns.countplot(data=df,x=cat_columns[i-1],palette='rocket',ax=ax[i][j])\n                    without_hue(df,cat_columns[i-1],a1)\n                #With hueness\n                elif(j==1):\n                    a2=sns.countplot(data=df,x=cat_columns[i-1],hue='stroke',ax=ax[i][j],palette='rocket')\n                    with_hue(df,cat_columns[i-1],a2)\n                \n                #Dealing with spines\n                ax[i][j].spines['top'].set_visible(False)\n                ax[i][j].spines['right'].set_visible(False)\n                ax[i][j].spines['left'].set_visible(False)\n                ax[i][j].grid(linestyle=\"--\",axis='y',color='gray')\n        \n        \n    ","22e0bff1":"#First four columns\ncat_columns= ['gender' , 'hypertension' , 'ever_married' , 'work_type']       \nplotting_cat_features(5,2,cat_columns) ","5944eb26":"#Last three columns\ncat_columns= ['heart_disease' , 'Residence_type' , 'smoking_status']       \nplotting_cat_features(4,2,cat_columns) ","302e39b8":"nrows=1\nncols=2\nf,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,6))\nf.patch.set_facecolor('#F2EDD7FF')\n\n#Setting background and foreground color\nfor j in range(0,ncols):\n    ax[j].set_facecolor('#F2EDD7FF')\n    ax[j].spines['top'].set_visible(False)\n    ax[j].spines['right'].set_visible(False)\n    ax[j].spines['left'].set_visible(False)\n    ax[j].grid(linestyle=\"--\",axis='y',color='gray')\n        \n        \nsns.histplot(data=df,x='age',ax=ax[0],palette=\"Set1\",kde=\"True\")\nsns.histplot(data=df,x='age',hue='stroke',multiple='stack',ax=ax[1],palette=\"gnuplot\",kde=True)","c6bd3f2d":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\n        \nplt.text(-0.2,-0.2,\"No outliers\",fontweight='bold',fontsize=15)\nplt.title(\"Boxen plot of age column\",fontweight='bold',fontsize=20)\nax=sns.boxenplot(data=df,x='age',palette=\"gnuplot\")\n","a7a51300":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\n\nplt.text(-2,350,\"Log distribution is left skewed\\nso we won't change anything\",fontweight='bold',fontsize=12)\nplt.title(\"Log distribution of age\",fontweight='bold',fontsize=20)\nsns.histplot(np.log(df['age']),kde=True,palette=\"coolwarm\")","6c4ab28c":"f,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,6))\nf.patch.set_facecolor('#F2EDD7FF')\n\n#Setting background and foreground color\nfor j in range(0,ncols):\n    ax[j].set_facecolor('#F2EDD7FF')\n    ax[j].spines['top'].set_visible(False)\n    ax[j].spines['right'].set_visible(False)\n    ax[j].spines['left'].set_visible(False)\n    ax[j].grid(linestyle=\"--\",axis='y',color='gray')\n\nax[0].text(50,500,\"Distribution of\\nbmi without stroke\\nis Right Skewed\",fontweight='bold',fontsize=12)\nsns.histplot(data=df,x='bmi',ax=ax[0],palette=\"coolwarm\",kde=\"True\",bins=40)\nax[1].text(50,500,\"Distribution of\\nbmi with stroke\",fontweight='bold',fontsize=12)\nsns.histplot(data=df,x='bmi',hue='stroke',multiple='stack',ax=ax[1],palette=\"gnuplot\",kde=True,bins=40)","f64bde57":"#Outliers in bmi \ndf_bmi=sorted(df['bmi'])\nQ1,Q3=np.percentile(df_bmi,[25,75])\nIQR= Q3-Q1\nlower_range= Q1-(1.5*IQR)\nupper_range=Q3+(1.5*IQR)\n\nprint(\"Lower range of outliers : \",lower_range)\nprint(\"Upper range of outliers : \",upper_range)\ndf_lower_outliers=df[df.bmi<lower_range]\ndf_upper_outliers=df[df.bmi>upper_range]","d54e9105":"print(\"***** Lower outliers of bmi *****\")\nprint()\ndf_lower_outliers","6ee7261a":"print(df_upper_outliers.shape)\nprint()\nprint(\"Percentage of upper outliers in bmi are:\", (125\/5110)*100 )\nprint()\nprint(\"**** Outer outliers of bmi *****\")\nprint()\ndf_upper_outliers\n","5cc20314":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\n\nplt.text(60,-0.3,'Percentage of upper outliers in bmi are: 2.446%',fontweight='bold',fontsize=15)\nplt.text(60,-0.4,'Percentage of lower outliers in bmi are: 0.0002%',fontweight='bold',fontsize=15)\nplt.title(\"Box Plot of body mass index\",fontweight='bold',fontsize=20)\nsns.boxplot(data=df,x='bmi',palette='gnuplot')\n","4e2920c2":"#Dropping outliers\ndf1_without_outliers=df.drop(df[df.bmi>upper_range].index)","63314fe9":"df1_without_outliers","8340f333":"f,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nf.patch.set_facecolor('#F2EDD7FF')\n\n#Setting background and foreground color\nfor j in range(0,ncols):\n    ax[j].set_facecolor('#F2EDD7FF')\n    ax[j].spines['top'].set_visible(False)\n    ax[j].spines['right'].set_visible(False)\n    ax[j].spines['left'].set_visible(False)\n    ax[j].grid(linestyle=\"--\",axis='y',color='gray')\n\nax[0].text(35,300,\"Distribution of\\nbmi without stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df1_without_outliers,x='bmi',ax=ax[0],palette=\"gnuplot\",kde=\"True\",bins=40)\nax[1].text(35,300,\"Distribution of\\nbmi with stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df1_without_outliers,x='bmi',hue='stroke',multiple='stack',ax=ax[1],palette=\"gnuplot\",kde=True,bins=40)","4fd11b8f":"f,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nf.patch.set_facecolor('#F2EDD7FF')\n\n#Setting background and foreground color\nfor j in range(0,ncols):\n    ax[j].set_facecolor('#F2EDD7FF')\n    ax[j].spines['top'].set_visible(False)\n    ax[j].spines['right'].set_visible(False)\n    ax[j].spines['left'].set_visible(False)\n    ax[j].grid(linestyle=\"--\",axis='y',color='gray')\n    \nax[0].text(150,300,\"Distribution of\\nglucose_level without stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df,x='avg_glucose_level',ax=ax[0],palette=\"Set1\",kde=\"True\",bins=40)\nax[1].text(150,300,\"Distribution of\\nglucose_level without stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df,x='avg_glucose_level',hue='stroke',multiple='stack',ax=ax[1],palette=\"gnuplot\",kde=True,bins=40)","947fc3ce":"df_glucose=sorted(df['avg_glucose_level'])\nQ1,Q3=np.percentile(df_glucose,[25,75])\nIQR= Q3-Q1\nlower_range= Q1-(1.5*IQR)\nupper_range=Q3+(1.5*IQR)\n\nprint(\"Lower range of outliers in avg_glucose_level : \",lower_range)\nprint(\"Upper range of outliers in avg_glucose_level : \",upper_range)\ndf_lower_outliers=df[df.avg_glucose_level<lower_range]\ndf_upper_outliers=df[df.avg_glucose_level>upper_range]","ffed58a7":"#No lower outlier\ndf_lower_outliers\nprint(\"Percentage of upper outliers in avg_glucose_level are:\", (627\/5110)*100 )\nprint()\nprint(\"***** Upper outliers of avg_glucose_level *****\")\nprint()\ndf_upper_outliers #627 upper outliers for avg_glucose_level column","4311bcbb":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\n\nplt.text(180,-0.3,'Percentage of upper outliers in bmi are: 12.27%',fontweight='bold',fontsize=15)\nplt.text(180,-0.4,'Percentage of lower outliers in bmi are: 0%',fontweight='bold',fontsize=15)\nsns.boxplot(data=df,x='avg_glucose_level',palette='gnuplot')","9d72cb68":"df1_outliers_glucose=df.drop(df[df.avg_glucose_level>upper_range].index)","418a1ef5":"f,ax=plt.subplots(nrows=1,ncols=2,figsize=(15,5))\nf.patch.set_facecolor('#F2EDD7FF')\n\n#Setting background and foreground color\nfor j in range(0,ncols):\n    ax[j].set_facecolor('#F2EDD7FF')\n    ax[j].spines['top'].set_visible(False)\n    ax[j].spines['right'].set_visible(False)\n    ax[j].spines['left'].set_visible(False)\n    ax[j].grid(linestyle=\"--\",axis='y',color='gray')\n    \nax[0].text(65,300,\"Distribution of\\navg glucose without stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df1_outliers_glucose,x='avg_glucose_level',ax=ax[0],palette=\"gnuplot\",kde=\"True\",bins=40)\nax[1].text(65,300,\"Distribution of\\navg glucose with stroke\",fontweight='bold',fontsize=15)\nsns.histplot(data=df1_outliers_glucose,x='avg_glucose_level',hue='stroke',multiple='stack',ax=ax[1],palette=\"gnuplot\",kde=True,bins=40)","dc9ad1be":"df1=pd.get_dummies(df1_without_outliers,columns=[\"work_type\",'smoking_status'])\ndf1.head()","6ca75720":"print(\"Number of Features : \",len(list(df1.columns)))","01dff775":"df1['gender']=df1[\"gender\"].map({\"Male\":0,\"Female\":1,\"Other\":2}).astype(int)\ndf1['ever_married']=df1[\"ever_married\"].map({\"Yes\":1,\"No\":0}).astype(int)\ndf1['Residence_type']=df1[\"Residence_type\"].map({\"Urban\":1,\"Rural\":0}).astype(int)","460179c7":"\"\"\" 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', \n'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', \n'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', \n'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', \n'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', \n'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', \n'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', \n'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', \n'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', \n'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', \n'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', \n'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', \n'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', \n'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', \n'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', \n'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', \n'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', \n'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', \n'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', \n'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', \n'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', \n'winter', 'winter_r' \"\"\"\n","633cf925":"fig=plt.figure(figsize=(15,12))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\n\nsns.heatmap(df1.corr(),annot=True,linewidth=2)","acf01e76":"xvars=['bmi','avg_glucose_level','age','stroke']\nyvars=['bmi','avg_glucose_level','age','stroke']\nsns.pairplot(df1,x_vars=xvars,y_vars=yvars,hue=\"stroke\",palette=\"gnuplot\")","8f313106":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\nplt.title(\"bmi vs avg_glucose_level\",fontweight='bold',fontsize=20)\nsns.scatterplot(data=df1,x=df1['avg_glucose_level'],y=df1['bmi'],hue='stroke',style='stroke',palette='cool')","b4403212":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\nplt.title(\"age vs avg_glucose_level\",fontweight='bold',fontsize=20)\n\nsns.scatterplot(data=df1,x=df['avg_glucose_level'],y=df['age'],hue='stroke',style='stroke',palette='cool')","07e656e6":"fig=plt.figure(figsize=(15,5))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_visible(False)\nax.grid(linestyle=\"--\",axis='y',color='gray')\nplt.title(\"bmi vs age\",fontweight='bold',fontsize=20)\n\nsns.scatterplot(data=df1,x=df['bmi'],y=df['age'],hue='stroke',style='stroke',palette='cool')","0294904a":"from imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nimport optuna\nfrom sklearn.metrics import accuracy_score,classification_report,plot_confusion_matrix,roc_auc_score,plot_roc_curve,f1_score,roc_curve,auc\nfrom sklearn.preprocessing import StandardScaler","5c4a2aee":"Y=df1['stroke']\nX=df1.drop('stroke',axis=1)\nX","0ca95fc4":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=42)","f1c050f7":"#BEFORE RESAMPLING\nprint(\"'stroke' value counts before oversampling\")\nprint()\ny_train.value_counts()","533c51e6":"#Oversampling\nsmt=SMOTE()\nx_train_sampling,y_train_sampling=smt.fit_resample(x_train,y_train)","13c36736":"#AFTER RESAMPLING\nprint(\"'stroke' value counts after oversampling\")\nprint()\n\ny_train_sampling.value_counts()","6ec1e889":"print(\"'stroke' value counts in test dataset\")\nprint()\n\ny_test.value_counts()","30f5106e":"smt_test=SMOTE()\nx_test_sampling,y_test_sampling=smt_test.fit_resample(x_test,y_test)","a42da68b":"print(\"'stroke' value counts in test dataset after sampling\")\nprint()\n\ny_test_sampling.value_counts()","805ac110":"def objective(trial):\n    \n    n_estimators = trial.suggest_int('n_estimators', 2, 200)\n    max_depth = int(trial.suggest_int('max_depth', 1, 40))\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)\n    return cross_val_score(clf, x_train_sampling, y_train_sampling, \n           n_jobs=-1, cv=5,scoring='f1').mean()\n    \n\n","24f9b8ef":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=30)","0356b423":"trial = study.best_trial\nprint(\"***** Best parameters *****\")\nprint(trial.values)\nprint(trial.params)","a14f5d82":"clf=RandomForestClassifier(n_estimators=129,max_depth=36)\nclf.fit(x_train_sampling,y_train_sampling)\n","629de96a":"pred_rf=clf.predict(x_test_sampling)\nprint(\"***** Accuracy of random forest classifier *****\")\nprint()\nprint(accuracy_score(y_test_sampling,pred_rf))","b832e1ff":"print(\"***** CLassification report of random forest classifier ****\")\nprint()\nprint(classification_report(y_test_sampling,pred_rf))","bf5ed989":"fig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nfpr,tpr,_=roc_curve(y_test_sampling,pred_rf)\n\nplt.title('Random Forest ROC curve: CC Fraud')\nplt.xlabel('FPR (Precision)')\nplt.ylabel('TPR (Recall)')\n\nplt.plot(fpr,tpr)\nplt.plot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","edfe8f87":"feature_importance = np.array(clf.feature_importances_)\nfeature_names = np.array(x_train_sampling.columns)\ndata={'feature_names':feature_names,'feature_importance':feature_importance}\ndf_plt = pd.DataFrame(data)\ndf_plt.sort_values(by=['feature_importance'], ascending=False,inplace=True)\nfig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nsns.barplot(x=df_plt['feature_importance'], y=df_plt['feature_names'])\n#plt.style.use(\"ggplot\")\nplt.xlabel('FEATURE IMPORTANCE')\nplt.ylabel('FEATURE NAMES')\nplt.title(\"Important features for RandomForest Classifier\")\nplt.show()","362e389f":"import lightgbm as lgb","2dbc0272":"def objective_lgbm(trial):\n    \n    n_estimators = trial.suggest_int('n_estimators', 2, 300)\n    max_depth = int(trial.suggest_int('max_depth', 2, 50))\n    learning_rate=trial.suggest_loguniform('learning_rate',0.001,1)\n    colsample_bytree=trial.suggest_loguniform(\"colsample_bytree\",0.1, 1)\n    num_leaves=trial.suggest_int('num_leaves',10,300)\n    reg_alpha= trial.suggest_loguniform('reg_alpha',0.1,1)\n    reg_lambda= trial.suggest_loguniform('reg_lambda',0.1,1)\n    min_split_gain=trial.suggest_loguniform('min_split_gain',0.1,1)\n    subsample=trial.suggest_loguniform('subsample',0.1,1)    \n    clf = lgb.LGBMClassifier(n_estimators=n_estimators, max_depth=max_depth,\n                            learning_rate=learning_rate,colsample_bytree=colsample_bytree,\n                            num_leaves=num_leaves,reg_alpha=reg_alpha,reg_lambda=reg_lambda,\n                            min_split_gain=min_split_gain,subsample=subsample)\n    return cross_val_score(clf, x_train_sampling, y_train_sampling, \n           n_jobs=-1, cv=5,scoring='f1').mean()\n","ce3e6fce":"study_lgbm= optuna.create_study(direction='maximize')\nstudy_lgbm.optimize(objective_lgbm, n_trials=40)","1d936780":"trial_lgbm= study_lgbm.best_trial\nprint(\"***** Best parameters *****\")\nprint(trial_lgbm.value)\nprint(trial_lgbm.params)","872af5f8":"model_lgbm_oh=lgb.LGBMClassifier(n_estimators=139, max_depth=21, learning_rate=0.045552659197751554, \n                              colsample_bytree=0.5296024837571571, num_leaves=161, reg_alpha=0.13175537618486874, \n                              reg_lambda=0.31574328097598714, \n                              min_split_gain=0.18022256039561763,subsample=0.35631707963483955)","282a1448":"x_train_sampling.head()","d6cfa90b":"model_lgbm_oh.fit(x_train_sampling,y_train_sampling)","02b3d388":"filename = \"LGBMClassifiernew.sav\"\npickle.dump(model_lgbm_oh,open(filename,'wb'))","6b087649":"pred_lgbm=model_lgbm_oh.predict(x_test_sampling)\nprint(\"***** Accuracy of LGBM classifier *****\")\nprint()\nprint(accuracy_score(pred_lgbm,y_test_sampling))","11174066":"print(classification_report(y_test_sampling,pred_lgbm))","a9d5562b":"fig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nfpr,tpr,_=roc_curve(y_test_sampling,pred_lgbm)\n\nplt.title('LGBM ROC curve: CC Fraud')\nplt.xlabel('FPR (Precision)')\nplt.ylabel('TPR (Recall)')\n\nplt.plot(fpr,tpr)\nplt.plot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","21f211ff":"feature_importance = np.array(model_lgbm.feature_importances_)\nfeature_names = np.array(x_train_sampling.columns)\ndata={'feature_names':feature_names,'feature_importance':feature_importance}\ndf_plt = pd.DataFrame(data)\ndf_plt.sort_values(by=['feature_importance'], ascending=False,inplace=True)\nfig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nsns.barplot(x=df_plt['feature_importance'], y=df_plt['feature_names'])\n#plt.style.use(\"ggplot\")\nplt.xlabel('FEATURE IMPORTANCE')\nplt.ylabel('FEATURE NAMES')\nplt.title(\"Important features for RandomForest Classifier\")\nplt.show()","20765813":"df2=df1_without_outliers.copy()\ndf2","4f54b86a":"df2['gender']=df2[\"gender\"].map({\"Male\":0,\"Female\":1,\"Other\":2}).astype(int)\ndf2['ever_married']=df2[\"ever_married\"].map({\"Yes\":1,\"No\":0}).astype(int)\ndf2['Residence_type']=df2[\"Residence_type\"].map({\"Urban\":1,\"Rural\":0}).astype(int)\ndf2['work_type']=df2['work_type'].map({\"Private\":0,'Self-employed':1,'children':2,'Govt_job':3,\n                                      \"Never_worked\":4})\ndf2['smoking_status']=df2['smoking_status'].map({'never smoked':0,'Unknown':1,'formerly smoked':2,\n                                                \"smokes\":3})\n\ndf2.head()","3b574c8d":"fig=plt.figure(figsize=(15,10))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nsns.heatmap(df2.corr(),annot=True,linewidth=2)","6e1ad939":"Y_new=df2['stroke']\nX_new=df2.drop('stroke',axis=1)\n","613e644f":"x_train_new,x_test_new,y_train_new,y_test_new=train_test_split(X_new,Y_new,test_size=0.2,random_state=42)","68e57ed3":"smt=SMOTE()\nx_train_sampling_new,y_train_sampling_new=smt.fit_resample(x_train_new,y_train_new)","c288541b":"smt_test=SMOTE()\nx_test_sampling_new,y_test_sampling_new=smt_test.fit_resample(x_test_new,y_test_new)","57cf82e1":"def objective(trial):\n    \n    n_estimators = trial.suggest_int('n_estimators', 2, 200)\n    max_depth = int(trial.suggest_int('max_depth', 1, 40))\n    clf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)\n    return cross_val_score(clf, x_train_sampling_new, y_train_sampling_new, \n           n_jobs=-1, cv=5,scoring='f1').mean()","83de9374":"study = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=30)\n","bd0ddde3":"trial = study.best_trial\nprint(\"***** Best Parameters *****\")\nprint(trial.value)\nprint(trial.params)","9d2b081d":"clf=RandomForestClassifier(n_estimators=88,max_depth=28)\nclf.fit(x_train_sampling_new,y_train_sampling_new)\n","8179e7b3":"pred_new=clf.predict(x_test_sampling_new)\nprint(\"***** Accuracy if random forest classifier *****\")\nprint(accuracy_score(y_test_sampling_new,pred_new))","0fc18fa4":"print(\"***** Classification report of random forest *****\")\nprint()\nprint(classification_report(y_test_sampling_new,pred_new))","98b3d579":"fig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nfpr,tpr,_=roc_curve(y_test_sampling_new,pred_new)\n\nplt.title('Random Forest ROC curve: CC Fraud')\nplt.xlabel('FPR (Precision)')\nplt.ylabel('TPR (Recall)')\n\nplt.plot(fpr,tpr)\nplt.plot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","45a8ff45":"def objective_lgbm(trial):\n    \n    n_estimators = trial.suggest_int('n_estimators', 2, 300)\n    max_depth = int(trial.suggest_loguniform('max_depth', 2, 50))\n    learning_rate=trial.suggest_loguniform('learning_rate',0.001,1)\n    colsample_bytree=trial.suggest_loguniform(\"colsample_bytree\",0.1, 1)\n    num_leaves=trial.suggest_int('num_leaves',10,300)\n    reg_alpha= trial.suggest_loguniform('reg_alpha',0.1,1)\n    reg_lambda= trial.suggest_loguniform('reg_lambda',0.1,1)\n    min_split_gain=trial.suggest_loguniform('min_split_gain',0.1,1)\n    subsample=trial.suggest_loguniform('subsample',0.1,1)    \n    clf = lgb.LGBMClassifier(n_estimators=n_estimators, max_depth=max_depth,\n                            learning_rate=learning_rate,colsample_bytree=colsample_bytree,\n                            num_leaves=num_leaves,reg_alpha=reg_alpha,reg_lambda=reg_lambda,\n                            min_split_gain=min_split_gain,subsample=subsample)\n    return cross_val_score(clf, x_train_sampling_new, y_train_sampling_new, \n           n_jobs=-1, cv=5,scoring='f1').mean()\n","3782021d":"study_lgbm= optuna.create_study(direction=\"maximize\")\nstudy_lgbm.optimize(objective_lgbm, n_trials=40)","7aeec1ca":"trial_lgbm= study_lgbm.best_trial\nprint(\"***** Best parameters *****\")\nprint(trial_lgbm.value)\nprint(trial_lgbm.params)","195f2eef":"model_lgbm=lgb.LGBMClassifier(n_estimators=228, max_depth=49, learning_rate=0.07246416747184325, \n                              colsample_bytree=0.659803224139728, num_leaves=182, reg_alpha=0.2647777683795973, \n                              reg_lambda=0.5432085589936458, \n                              min_split_gain=0.10089495584597963,subsample=0.17472830028174025)","daed7cac":"model_lgbm.fit(x_train_sampling_new,y_train_sampling_new)\npred=model_lgbm.predict(x_test_sampling_new)\nprint(accuracy_score(y_test_sampling_new,pred))","8eb13669":"print(\"***** Classification Report of LGBM *****\")\nprint(classification_report(y_test_sampling_new,pred))","5e019547":"fig=plt.figure(figsize=(12,8))\nax = plt.axes() \nax.set_facecolor(\"#F2EDD7FF\") \nfig.patch.set_facecolor(\"#F2EDD7FF\")\n\nfpr,tpr,_=roc_curve(y_test_sampling_new,pred)\n\nplt.title('LGBM ROC curve: CC Fraud')\nplt.xlabel('FPR (Precision)')\nplt.ylabel('TPR (Recall)')\n\nplt.plot(fpr,tpr)\nplt.plot((0,1), ls='dashed',color='black')\nplt.show()\nprint ('Area under curve (AUC): ', auc(fpr,tpr))\n","f0c65657":"<html>\n    <a id=\"toc\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>TABLE OF CONTENTS<\/b><\/center><\/h1>\n    \n<\/html>","fe234b93":"\n[Slide to top](#toc)\n<html>\n    <a id=\"5.2\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.2. OPTUNA + LABEL ENCODING + ENSEMBLING METHODS<\/b><\/center><\/h1>\n    \n<\/html>","1bc1d320":"\n[Slide to top](#toc)\n<html>\n    <a id=\"5.1.2\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.1.2. LGBM CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","56cd2298":"* [1. MOTIVATION](#1)\n\n* [2. DATASET](#2)\n\n* [3. OVERVIEW](#3)\n\n* [4. VISUALIZATIONS](#4)\n  \n  * [4.1 UNIVARIATE ANALYSIS](#4.1)\n    * [4.1.1. CATEGORICAL FEATURES](#4.1.1)\n    * [4.1.2  CONTINUOUS FEATURES](#4.1.2)\n    \n* [5. MODEL & PREDICTION](#5)\n  * [5.1 OPTUNA+ONE HOT ENCODING+ENSEMBLING](#5.1)\n    * [5.1.2 RANDOM FOREST CLASSIFIER](#5.1.2)\n    * [5.1.2 LGBM CLASSIFIER](#5.1.2)\n    \n  * [5.2 OPTUNA+LABEL ENCODING+ENSEMBLING](#5.2)\n    * [5.2.1 RANDOM FOREST CLASSIFIER](#5.2.1)\n    * [5.2.2 LGBM CLASSIFIER](#5.2.2)\n\n","a18a00e4":"[Slide to top](#toc)\n<html>\n    <a id=\"5\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>5. MODEL & PREDICTION<\/b><\/center><\/h1>\n    \n<\/html>","6a41bffe":"**DISTRIBUTION OF BMI WITHOUT OUTLIERS**","70aa900a":"[Slide to top](#toc)\n<html>\n    <a id=\"4.1\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>4.2. BIVARIATE ANALYSIS<\/b><\/center><\/h1>\n    \n<\/html>","e2b31037":"**Distribution of bmi become more normally distributed after removing outliers , so we will now consider this data for further modelling and prediction**","b516b823":"**1. CATEGORICAL VALUES : ['gender' , 'hypertension' , 'ever_married' , 'work_type' , 'heart_disease' , 'Residence_type' , 'smoking_status']**","1fea6701":"![STROKE](https:\/\/knoxvillecpr.com\/wp-content\/uploads\/2014\/04\/stroke.jpg)\n\n\n\n1. **A stroke occurs when a blood vessel that carries oxygen and nutrients to the brain is either blocked by a clot or bursts (or ruptures)**\n\n2. **When that happens, part of the brain cannot get the blood (and oxygen) it needs, so it and brain cells die**\n\n3. **According to the World Health Organization (WHO) stroke is the 2nd leading cause of death globally, responsible for approximately 11% of total deaths**\n\n3. **80 percent of strokes are preventable, if we can predict this early we can save many lives**","1a22dc7f":"**Distribution of avg_glucose_level also got the same results like bmi but removing 12.27% of data from table will cause loss of information , so won't change anything**","3548ebb5":"[Slide to top](#toc)\n<html>\n    <a id=\"4\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>4. VISUALIZATIONS<\/b><\/center><\/h1>\n    \n<\/html>","10151385":"[Slide to top](#toc)\n<html>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b> FEATURE IMPORTANCE OF RF CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","8b964829":"[Slide to top](#toc)\n<html>\n    <a id=\"4.1.2\"><\/a>\n    <h1 style='color:#B1624EFF;background-color:#5CC8D7FF;font-size:20px;padding:10px;'><center><b>4.1.2. CONTINUOUS FEATURES<\/b><\/center><\/h1>\n    \n<\/html>","d9961337":"### **LABEL ENCODING**","197e92c0":"**Used mean of bmi to fill all null values**","45a5a781":"[Slide to top](#toc)\n<html>\n    <a id=\"5.2.2\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>ANY SUGGESTIONS ARE MOST WELCOMED , PLEASE GIVE IT A UPVOTE<\/b><\/center><\/h1>\n    \n<\/html>","46c0d65b":"[Slide to top](#toc)\n<html>\n    <a id=\"5.2.2\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.2.2. LGBM CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","04fe15ae":"**I HAVE GOT HIGHEST AUC(AREA UNDER CURVE) OF 0.90 WITH ONE HOT ENCODING AND LGBM CLASSIFIER**\n\n**IF YOU THINK THAT I HAVE TO SOMETHING MORE OR ANY STEP TO INCREASE MY AUC TELL ME IN THE COMMENTS I WILL EDIT THIS NOTEBOOK AGAIN ACCORDING TO THE SUGGESTIONS**\n\n**GIVE IT A UPVOTE MAY IT CAN HELP ME TO GET A JOB\/INTERNSHIP**\n\n","f5881716":"**Checking null values**","e304c208":"**Bmi has lots of outliers**","b9cb8136":"**Log distribution of age**","8c9b0a11":"**As we can see from people above the age of 40 are more likely to get strokes**","2e45998c":"* **4.7% of Females and 5.1% Males had strokes**\n\n* **Only 13% of people who have hypertension had stroke i.e. 498x0.132530=66**\n\n* **17% people who have heart disease had stroke and 4.1% who don't have heart disease**\n\n* **6.5% of people who are married had stroke and 1.6% are not married had stroke**\n\n* **5% of Government Job and Private Job people had stroke**\n\n* **7.9% of Self-Employed people had stroke**\n\n* **4.5% of people who live in Rural areas had stroke**\n\n* **5.2% of people who live in Urban Areas had stroke**\n\n","4ee5da2a":"[Slide to top](#toc)\n<html>\n    <a id=\"5.1.1\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.1.1. RANDOM FOREST CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","a3db48a9":"[Slide to top](#toc)\n<html>\n    <a id=\"5.2.1\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.2.1. RANDOM FOREST CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","f094578b":"**DATA IS IMBALANCED**","04a3a327":"[Slide to top](#toc)\n<html>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b> FEATURE IMPORTANCE OF LGBM CLASSIFIER<\/b><\/center><\/h1>\n    \n<\/html>","fcee948b":"1. **This dataset is used to predict whether a patient is likely to get stroke based on the input parameters like gender, age, various diseases, and smoking status. Each row in the data provides relavant information about the patient.**\n\n**Features are:**\n\n1. gender: \"Male\", \"Female\" or \"Other\"\n3. age: age of the patient\n4. hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n5. heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart    disease\n6. ever_married: \"No\" or \"Yes\"\n7. work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n8. Residence_type: \"Rural\" or \"Urban\"\n9. avg_glucose_level: average glucose level in blood\n10. bmi: body mass index\n11. smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n12. stroke: 1 if the patient had a stroke or 0 if not\n","4d0f271f":"[Slide to top](#toc)\n<html>\n    <a id=\"3\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>3. OVERVIEW<\/b><\/center><\/h1>\n    \n<\/html>","63743015":"### **AGE**","553a15a6":"**Glucose level less than 150 and greater than 150 leading to strokes**","34f6ebb7":"[Slide to top](#toc)\n<html>\n    <a id=\"2\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>2. DATASET<\/b><\/center><\/h1>\n    \n<\/html>","bb10261b":"[Slide to top](#toc)\n<html>\n    <h1 style='color:#B1624EFF;background-color:#5CC8D7FF;font-size:20px;padding:20px;'><center><b>OBSERVATIONS FROM PLOTS OF CATEGORICAL FEATURES<\/b><\/center><\/h1>\n    \n<\/html>","2e0b15b7":"**ENCODING: ONE HOT ENCODING**","dd454ee8":"### **BMI**","2558e00c":"1. **There is no significant +ve and -ve correlation between two features**\n\n2. **Age and ever_married are related by 0.68 which is obvious and work_type_children and age are -vely correlated and I think which is also very obvious to understand**\n\n3. **People above the age of 40 are more likely to get strokes**\n\n4. **You can also see increasing age lead to increasing        hypertension,heart_disease,bmi,avg_glucose_level and stroke (see the heatmap)**\n","ad1b8302":"**DISTRIBUTION OF GLUCOSE_LEVEL WITHOUT OUTLIERS**","5bf883d7":"### **AVERAGE GLUCOSE LEVEL**","be27bca0":"[Slide to top](#toc)\n<html>\n    <a id=\"4.1.1\"><\/a>\n    <h1 style='color:#B1624EFF;background-color:#5CC8D7FF;font-size:20px;padding:10px;'><center><b>4.1.1. CATEGORICAL FEATURES<\/b><\/center><\/h1>\n    \n<\/html>","5c77279e":"[Slide to top](#toc)\n<html>\n    <a id=\"4.1\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>4.1. UNIVARIATE ANALYSIS<\/b><\/center><\/h1>\n    \n<\/html>","fe2a1a72":"[Slide to top](#toc)\n<html>\n    <a id=\"1\"><\/a>\n    <h1 style='color:#FCF6F5FF;background-color:#89ABE3FF;font-size:40px;font-style:italic;padding:10px;'><center><b>1. MOTIVATION<\/b><\/center><\/h1>\n    \n<\/html>","6c0b04bb":"\n[Slide to top](#toc)\n<html>\n    <a id=\"5.1\"><\/a>\n    <h1 style='color:#0063B2FF;background-color:#9CC3D5FF;font-size:30px;padding:10px;'><center><b>5.1. OPTUNA + ONE HOT ENCODING + ENSEMBLING METHODS<\/b><\/center><\/h1>\n    \n<\/html>"}}