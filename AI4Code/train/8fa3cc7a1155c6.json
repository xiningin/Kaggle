{"cell_type":{"d170a9e7":"code","9c6d3676":"code","96ddb5fd":"code","cc0dd85a":"code","34029749":"code","2af14bf6":"code","76430643":"code","9a2a9e3d":"code","d152f327":"code","6862226b":"code","e8c87837":"code","072b9a38":"code","08a39e85":"code","1bf27729":"code","c26ff409":"code","58ef1bae":"code","42a36889":"code","417e6138":"code","3754049c":"code","5532e932":"markdown","87697db4":"markdown","3d25e514":"markdown","8d2ddcb3":"markdown","2322ce6b":"markdown","a7b909cb":"markdown","957e41c5":"markdown","729082a7":"markdown","76ca3996":"markdown","6f2ff224":"markdown","d726755b":"markdown","fb71ed66":"markdown","25bf6a5a":"markdown","04564174":"markdown","8f1d1331":"markdown","e9acf033":"markdown","decf34d4":"markdown"},"source":{"d170a9e7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndata = pd.read_csv(\"..\/input\/data.csv\")\n# These columns are links and will not be used in this notebook\ndata = data.drop(axis = 1, columns=['Photo','Flag', 'Club Logo'])  \ndata.head()","9c6d3676":"# Clean up value and wage columns\ndef get_value(value):\n    value_num = value.replace('\u20ac','')\n    if 'M' in value_num:\n        value_num = float(value_num.replace('M','')) * 1000000\n    elif 'K' in value_num:\n        value_num = float(value_num.replace('K','')) * 1000\n    return float(value_num) # Ensure both columns are in float format\n\ndata['Value'] = data['Value'].apply(lambda x: get_value(x))\ndata['Wage'] = data['Wage'].apply(lambda x: get_value(x))\n\ndata.head()","96ddb5fd":"# Create the top_10_nation pandas series\nby_nation = data.Nationality.value_counts()\ntop_10_nation = by_nation[:10]\ntop_10_nation","cc0dd85a":"# Method 1: .plot() in pandas\ntop_10_nation.plot(kind='bar'); # The ';' is to avoid showing a message before the chart","34029749":"# We can also plot horizontally by using 'barh' in 'kind' argument\ntop_10_nation.plot(kind='barh');","2af14bf6":"# Method 2: plt.bar() in matplotlib - we input x and y arguments\nplt.bar(top_10_nation.index, top_10_nation);","76430643":"# Horizontally\nplt.barh(top_10_nation.index, top_10_nation);","9a2a9e3d":"# Method 3: barplot() in Seaborn\nsns.barplot(top_10_nation.index, top_10_nation);","d152f327":"# To plot horizontal bars, just flip the first two arguments and seaborn will sort out the orientation itself\nsns.barplot(top_10_nation, top_10_nation.index);","6862226b":"top_10_nation_r = top_10_nation.sort_values(ascending=True)\ntop_10_nation_r.plot(kind='barh');","e8c87837":"# Method 4: Countplot\nsns.countplot(y = 'Nationality', data=data);","072b9a38":"sns.countplot(y = 'Nationality', data=data, order = data.Nationality.value_counts().iloc[:10].index);","08a39e85":"england = data.loc[data.Nationality == 'England'].sort_values('Value', ascending = False)\nengland.head()","1bf27729":"# Top 30 players by value\nengland_30 = england.head(30).loc[:, ['Name','Value']]\nsns.barplot(england_30.Value, england_30.Name);","c26ff409":"plt.figure(figsize=(10,7)) # Specify figure size\nsns.barplot(england_30.Value \/ 1000000 , england_30.Name) # in millions\nplt.title('Top 30 English Players by Value', fontsize=16)\nplt.xlabel('Value (EUR M)')\nplt.yticks(fontsize=12) # Larger tick labels\nplt.xticks(fontsize=12)\nplt.show()","58ef1bae":"plt.figure(figsize=(10,7)) # Specify figure size\nsns.barplot(england_30.Value \/ 1000000 , england_30.Name, color = 'red') # color argument specifies a single color\nplt.title('Top 30 English Players by Value', fontsize=16)\nplt.xlabel('Value (EUR M)')\nplt.yticks(fontsize=12) # Larger tick labels\nplt.xticks(fontsize=12)\nplt.show()","42a36889":"plt.figure(figsize=(10,7)) # Specify figure size\nsns.barplot(england_30.Value \/ 1000000 , england_30.Name, palette = 'spring') # palette argument specifies the color map\nplt.title('Top 30 English Players by Value', fontsize=16)\nplt.xlabel('Value (EUR M)')\nplt.yticks(fontsize=12) # Larger tick labels\nplt.xticks(fontsize=12)\nplt.show()","417e6138":"data['Club'].fillna('None', inplace=True) # Clean up some null values to avoid errors in the next step\narsenal = data[data['Club'].str.contains('Arsenal')]\narsenal = arsenal.sort_values('Wage', ascending=False)\narsenal.head()","3754049c":"avg_arsenal = np.mean(arsenal['Wage'])\n\nplt.figure(figsize=(10,8))\ng = sns.barplot(arsenal.Wage \/ 1000 , arsenal.Name) # in thousands\n# Adding labels of data value\nfor i, v in enumerate(arsenal.Wage \/ 1000):\n    g.text(v+1, i, str(int(v))) # The three arguments are x-coordinate, y-coordinate, and the label\nplt.title('Wage of Arsenal Players')\nplt.xlabel('Wage (EUR K)')\nplt.axvline(avg_arsenal\/1000) # The vertical line\ng.text(avg_arsenal\/1000 + 5, 20, 'Mean wage: ' + str(int(avg_arsenal\/1000)) + 'K') # Annotation of the line\nplt.show()","5532e932":"## Loading Data and Cleaning","87697db4":"## Simple Customization\n\nThis part will demonstrate how to customize colors, figure and font size, axis labels, and show values in charts. We will plot the most valuable English players in this example.","3d25e514":"All countries will be plotted and the labels will be messed up. To plot only the top 10, we need to specify in 'order' argument:","8d2ddcb3":"We want to make the following changes:\n1. Add a title to the plot;\n2. Enlarge the plot so that the player names can be seen more clearly;\n3. Instead of scientific notation (1e7), we show the value in millions (and change the x-axis label to Value (M EUR))","2322ce6b":"Default in Seaborn is to put the first value at the top. To do the same for .plot(), we need to reverse the sorting order of the input data:","a7b909cb":"The bars are thicker than the first method, and by default it is shown in single color. But the vertical bars, the axis labels do not rotate and it looks messy.","957e41c5":"## Data Label, Annotation, and Reference Line\n\nWe can show the data values on the chart, and add reference lines for comparison. We plot the wage of Arsenal Players:","729082a7":"## Basic Bar Plots\n\nWe start with the basic bar plots of the count of players by Nationality in this dataset. To plot bar charts in Python we have four ways: **(1) .plot() method in pandas; (2) plt.bar() in matplotlib; (3) barplot() in Seaborn; (4) countplot() in Seaborn.**","76ca3996":"# Tutorial: Bar Charts in Python\n\nThis tutorial demonstrates the use of bar charts in Python. We will use both Matplotlib and Seaborn and the **FIFA 19 player dataset**. It can also be used as a quick reference when you are plotting bar charts in Python.","6f2ff224":"For the list of color and palette names, please see below links:\n- [Colors can be used in color argument](https:\/\/matplotlib.org\/gallery\/color\/named_colors.html)\n- [Colormaps can be used in palette argument](https:\/\/matplotlib.org\/2.0.2\/examples\/color\/colormaps_reference.html)","d726755b":"I prefer using horizontal bars in most cases because the axis labels can be seen more easily.","fb71ed66":"The default colors in seaborn is beautiful, but if we want to specify a single color or another set of colors, we can specify in the plot function:","25bf6a5a":"For more details of the functions above, please check the documentation:\n- [pandas.Series.plot()](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.plot.html)\n- [matplotlib.pyplot.barh()](https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.pyplot.barh.html)\n- [seaborn.barplot()](https:\/\/seaborn.pydata.org\/generated\/seaborn.barplot.html)\n- [seaborn.countplot()](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html)","04564174":"Here, we want to plot:\n- The wage of Arsenal players in descending order\n- Add actual values of their wages alongside each bar\n- Add a vertical line showing average wage for comparison, and show the average value on the chart","8f1d1331":"That's it for now. Happy charting!","e9acf033":"The 'Value' and 'Wage' columns have a Euro (\u20ac) sign. We need to remove the Euro sign and transform into numbers.","decf34d4":"We can also plot bar chart of counts directly from data using countplot() function in Seaborn:"}}