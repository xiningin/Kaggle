{"cell_type":{"399541f8":"code","5e04e026":"code","925c0c44":"code","5e7608c8":"code","8edca10a":"code","3d8a3a80":"code","69e85e73":"code","b7830883":"code","96b9c9b4":"code","4b654437":"code","c025491a":"code","dde42b85":"code","da39ec8c":"code","c5da4f32":"code","de56dafd":"code","66679308":"code","edb6b142":"code","1bc4f086":"code","8a6c3c80":"code","909516f5":"markdown","0e82fbe3":"markdown","9e283309":"markdown","62958e0a":"markdown","4889ef2a":"markdown","793d3274":"markdown","4eb8955c":"markdown","6a2031c5":"markdown","fcf33c8f":"markdown","fe931092":"markdown","3637f8b8":"markdown","ca6ef05a":"markdown","a867a365":"markdown","7945c120":"markdown","d9798f83":"markdown"},"source":{"399541f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e04e026":"import os # to get the file paths and everything\nimport zipfile # to unzip the folder\nimport tensorflow as tf # for everything\nimport random # To shufle the images\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator # to automatically label the images\nfrom tensorflow.keras.optimizers import RMSprop # Optimizer\nfrom shutil import copyfile # to copy the files from one folder to another folder\n","925c0c44":"local_zip1 = '\/kaggle\/input\/dogs-vs-cats\/'\ndirs = [\"train.zip\", \"test1.zip\"]\nfor directory in dirs:\n    local_zip = os.path.join(local_zip1, directory)\n    zip_ref = zipfile.ZipFile(local_zip, 'r')\n    zip_ref.extractall('\/kaggle\/working\/dogs-vs-cats\/')\n    zip_ref.close()","5e7608c8":"# Sanity check to get all the file names in the train  and test directory\nfor directory in [\"train\", \"test1\"]:\n    path = os.path.join(\"\/kaggle\/working\/dogs-vs-cats\/\", directory)\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n            break","8edca10a":"print(len(os.listdir('\/kaggle\/working\/dogs-vs-cats\/train')))\nprint(len(os.listdir('\/kaggle\/working\/dogs-vs-cats\/test1')))","3d8a3a80":"# Creating the directory\ntry:\n    os.mkdir('\/kaggle\/working\/dogs-vs-cats\/train\/cat')\n    os.mkdir('\/kaggle\/working\/dogs-vs-cats\/train\/dog')\nexcept OSError:\n    pass","69e85e73":"CATDIR = '\/kaggle\/working\/dogs-vs-cats\/train\/cat'\nDOGDIR = '\/kaggle\/working\/dogs-vs-cats\/train\/dog'","b7830883":"for file in os.listdir(\"\/kaggle\/working\/dogs-vs-cats\/train\"):\n    if \"cat\" in file:\n        copyfile((os.path.join(dirname, filename)),(os.path.join(CATDIR, file)))\n    elif \"dog\" in file:\n        copyfile((os.path.join(dirname, filename)),(os.path.join(DOGDIR, file)))","96b9c9b4":"print(len(os.listdir(CATDIR)))\nprint(len(os.listdir(DOGDIR)))","4b654437":"DIRS = ['\/kaggle\/working\/cats-v-dogs',\n        '\/kaggle\/working\/cats-v-dogs\/training',\n        '\/kaggle\/working\/cats-v-dogs\/validation',\n        '\/kaggle\/working\/cats-v-dogs\/training\/cats',\n        '\/kaggle\/working\/cats-v-dogs\/training\/dogs',\n        '\/kaggle\/working\/cats-v-dogs\/validation\/cats',\n        '\/kaggle\/working\/cats-v-dogs\/validation\/dogs']","c025491a":"for directory in DIRS:\n    try:\n        os.mkdir(directory)\n    except OSError:\n        pass","dde42b85":"#split some part of traindata into validation set\ndef split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):\n    files = []\n    \n    for file_name in os.listdir(SOURCE):\n        file_path = os.path.join(SOURCE, file_name)\n        \n        if os.path.getsize(file_path):\n            files.append(file_name)\n    \n    length_of_files = len(files)\n    split_point = int(length_of_files * SPLIT_SIZE)\n    \n    shuffled = random.sample(files, length_of_files)\n    \n    train_set = shuffled[:split_point]\n    test_set = shuffled[split_point:]\n    \n    for file_name in train_set:\n        copyfile(SOURCE + file_name, TRAINING + file_name)\n        \n    for file_name in test_set:\n        copyfile(SOURCE + file_name, TESTING + file_name)","da39ec8c":"CAT_SOURCE_DIR = \"\/kaggle\/working\/dogs-vs-cats\/train\/cat\/\"\nTRAINING_CATS_DIR = \"\/kaggle\/working\/cats-v-dogs\/training\/cats\/\"\nTESTING_CATS_DIR = \"\/kaggle\/working\/cats-v-dogs\/validation\/cats\/\"\nDOG_SOURCE_DIR = \"\/kaggle\/working\/dogs-vs-cats\/train\/dog\/\"\nTRAINING_DOGS_DIR = \"\/kaggle\/working\/cats-v-dogs\/training\/dogs\/\"\nTESTING_DOGS_DIR = \"\/kaggle\/working\/cats-v-dogs\/validation\/dogs\/\"\n\nsplit_size = .9\nsplit_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)\nsplit_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)","c5da4f32":"print(len(os.listdir('\/kaggle\/working\/cats-v-dogs\/training\/cats\/')))\nprint(len(os.listdir('\/kaggle\/working\/cats-v-dogs\/training\/dogs\/')))\nprint(len(os.listdir('\/kaggle\/working\/cats-v-dogs\/validation\/cats\/')))\nprint(len(os.listdir('\/kaggle\/working\/cats-v-dogs\/validation\/dogs\/')))","de56dafd":"model  = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(16, (3,3), activation = \"relu\", input_shape =(150, 150, 3)),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Conv2D(32, (3,3), activation = \"relu\"),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Conv2D(64, (3,3), activation = \"relu\"),\n    tf.keras.layers.MaxPool2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation = \"relu\"),\n    tf.keras.layers.Dense(1, activation = \"sigmoid\")\n])","66679308":"model.compile(\n    optimizer=RMSprop(learning_rate=0.001),\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","edb6b142":"TRAINING_DIR = '\/kaggle\/working\/cats-v-dogs\/training\/'\ntrain_datagen = ImageDataGenerator( rescale = 1.0\/255. )\n\ntrain_generator = train_datagen.flow_from_directory(TRAINING_DIR,\n                                                    batch_size=20,\n                                                    class_mode='binary',\n                                                    target_size=(150, 150))\n\nVALIDATION_DIR = '\/kaggle\/working\/cats-v-dogs\/validation\/'\nvalidation_datagen = ImageDataGenerator( rescale = 1.0\/255. )\n\nvalidation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,\n                                                         batch_size=20,\n                                                         class_mode  = 'binary',\n                                                         target_size = (150, 150))","1bc4f086":"history = model.fit(train_generator,\n                    epochs=5,\n                    verbose=1,\n                    validation_data=validation_generator)","8a6c3c80":"#Predicting images in testset\n%matplotlib inline\n\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing import image\n\ncount = 10\nfor filename in os.listdir('\/kaggle\/working\/dogs-vs-cats\/test1'):\n    #Get the path of the images in the test directory\n    print(os.path.join('\/kaggle\/working\/dogs-vs-cats\/test1', filename))\n    \n    path = os.path.join('\/kaggle\/working\/dogs-vs-cats\/test1', filename)\n    img = image.load_img(path, target_size=(150, 150))\n    x = image.img_to_array(img)\n    x = np.expand_dims(x, axis=0)\n    \n    img = mpimg.imread(path)\n    plt.imshow(img)\n    plt.show()\n    \n    images = np.vstack([x])\n    classes = model.predict(images, batch_size=10)\n    if classes[0]>0.5:\n        print(filename + \" is a dog\")\n    else:\n        print(filename + \" is a cat\")\n    print(\"--\"*30)\n    count -= 1\n    if(count < 0):\n        break","909516f5":"### Creating new directories so to make life easier for labeling","0e82fbe3":"## Sanity Check for the images in the directories","9e283309":"### Model","62958e0a":"### Splitting the data","4889ef2a":"### Sanity Check for the number of files in training set","793d3274":"### Creating Directories for validation, training and further cats and dogs directories inside the earlier two directories.","4eb8955c":"### Fit the Model","6a2031c5":"### Compile the Model","fcf33c8f":"### These are the directories","fe931092":"## Extracting the files from the zipped folder","3637f8b8":"### Move the images from the original dataset to cat and dogs directory","ca6ef05a":"### Getting the length of files in directories","a867a365":"## Importing Libraries","7945c120":"### Making use of Imagegenerator","d9798f83":"### Sanity check for lengths"}}