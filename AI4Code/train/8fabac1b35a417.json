{"cell_type":{"1c04f609":"code","2c12753a":"code","4ff36c73":"code","4aba77e9":"code","067dd36c":"code","4e43e7b8":"code","1caaad39":"code","529987f0":"code","383f8a76":"code","9e197902":"code","75c6270b":"code","357d559a":"code","e4fe6bdf":"code","fe03ee51":"code","756f041f":"code","25c853fb":"code","1378bd43":"code","40dadf6a":"code","9cb0ef73":"code","13bf9ca8":"code","a0065134":"code","c2c38b9f":"code","d1269d30":"code","f0e285e9":"code","66374d28":"code","aaa8f3ad":"code","a9d5a613":"code","815ce16b":"code","dc2bfcf3":"code","afbce411":"code","86719f16":"code","d8dc1a3b":"code","5899bdc3":"code","332daa28":"code","1e62ca72":"code","dc468473":"code","29bcfb9e":"code","841da142":"code","0feccab5":"code","b850f281":"code","c4f531d8":"code","2f3c3cdf":"code","93837fe6":"code","7b4c39f3":"code","226d3506":"code","01d8a6f2":"code","60dcd09c":"code","c3de9b2c":"code","3762bbe1":"code","81b1e6d7":"code","fd21c79c":"code","1ccd4875":"code","29470775":"markdown","0ad6a34a":"markdown","20039adc":"markdown","786d45f6":"markdown","68aa188b":"markdown","886368f9":"markdown","ff476bc7":"markdown","bd37aa99":"markdown","a3bee692":"markdown","311720f8":"markdown","c611ffc1":"markdown","b902c896":"markdown","7d113515":"markdown","5bdb606d":"markdown","5b78d02e":"markdown","0a19e68b":"markdown","a5e273a0":"markdown"},"source":{"1c04f609":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2c12753a":"data = pd.read_csv(\"\/kaggle\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv\", encoding=\"utf-8\")","4ff36c73":"data.columns","4aba77e9":"data.columns = ['OrderNumber', 'OrderStatus', 'BookName', 'OrderDate',\n       'BillingCity']","067dd36c":"data.head()","4e43e7b8":"data.set_index(\"OrderNumber\", inplace=True)","1caaad39":"data.shape","529987f0":"data.isna().sum()","383f8a76":"data.dropna(inplace=True)\ndata.isna().sum()","9e197902":"# New shape of the data frame\ndata.shape","75c6270b":"data.head()","357d559a":"data[\"BookName\"] = data.BookName.apply(lambda name: name.lower().strip())\ndata[\"BillingCity\"] = data.BillingCity.apply(lambda city: city.lower().replace(\"\/\", \" \").replace(\",\", \" \"). replace(\".\", \" \").strip())","e4fe6bdf":"data = data.assign(BookName = data.BookName.str.split(\"\/\")).explode(\"BookName\")","fe03ee51":"data.isna().sum()","756f041f":"data.dtypes","25c853fb":"# using infer_datetime_format=True as it is faster\ndata[\"OrderDate\"] = pd.to_datetime(data[\"OrderDate\"], infer_datetime_format=True)","1378bd43":"data","40dadf6a":"# Source: https:\/\/simplemaps.com\/data\/pk-cities\n\npakistan_top_cities = ['karachi', 'lahore', 'sialkot', 'faisalabad', 'rawalpindi',\n       'peshawar', 'saidu sharif', 'multan', 'gujranwala', 'islamabad',\n       'quetta', 'bahawalpur', 'sargodha', 'new mirpur', 'chiniot',\n       'sukkur', 'larkana', 'shekhupura', 'jhang', 'rahimyar khan',\n       'gujrat', 'kasur', 'mardan', 'mingaora', 'dera ghazi khan',\"dgk\"\n       'nawabshah', 'sahiwal', 'mirpur khas', 'okara', 'burewala',\n       'jacobabad', 'saddiqabad', 'kohat', 'muridke', 'muzaffargarh',\n       'khanpur', 'gojra', 'bahauddin', 'abbottabad', 'dadu',\n       'khuzdar', 'pakpattan', 'tando allahyar', 'vihari', 'jaranwala',\n       'kamalia', 'kot addu', 'nowshera', 'swabi', 'dera ismail khan',\n       'chaman', 'charsadda', 'kandhkot', 'hasilpur', 'muzaffarabad',\n       'mianwali', 'jalalpur\",\"jattan', 'bhakkar', 'zhob', 'kharian',\n       'mian channun', 'jamshoro', 'pattoki', 'harunabad',\n       'toba tek singh', 'shakargarh', 'hujra\", \"shah\", \"muqim', 'kabirwala',\n       'mansehra', 'lala musa', 'nankana sahib', 'bannu', 'timargara',\n       'parachinar', 'gwadar', 'abdul hakim', 'hassan\", \"abdal', 'tank',\n       'hangu', 'risalpur cantonment', 'karak', 'kundian', 'umarkot',\n       'chitral', 'dainyor', 'kulachi', 'kotli', 'gilgit',\n       'hyderabad', 'narowal', 'khairpur', \"mir\u2019s\", 'khanewal', 'jhelum',\n       'haripur', 'shikarpur', 'rawala kot', 'hafizabad', 'lodhran',\n       'malakand', 'attock', 'batgram', 'matiari', 'ghotki',\n       'firoz','naushahro', 'alpurai', 'bagh', 'daggar', 'bahawalnagar',\n       'leiah', 'tando muhammad khan', 'chakwal', 'khushab', 'badin',\n       'lakki', 'rajanpur', 'dera allahyar', 'shahdad kot', 'pishin',\n       'sanghar', 'upper dir', 'thatta', 'dera murad jamali', 'kohlu',\n       'mastung', 'dasu', 'athmuqam', 'loralai', 'barkhan',\n       'musa khel bazar', 'ziarat', 'gandava', 'sibi', 'dera bugti',\n       'eidgah', 'turbat', 'uthal', 'chilas', 'kalat', 'panjgur', 'gakuch',\n       'qila', 'saifullah', 'kharan', 'aliabad', 'awaran', 'dalbandin']","9cb0ef73":"single_word_cities = data[data[\"BillingCity\"].str.split().apply(len) == 2][\"BillingCity\"].unique()\nsingle_word_cities[:30]","13bf9ca8":"import nltk\ndef clean_city(row):\n    address = row.BillingCity.split()\n    add = set()\n    for a in address:\n        a = a.strip()\n        if a:\n            add.add(a)\n    for city in pakistan_top_cities:\n        if row.BillingCity.__contains__(city):\n            return city\n        \n    for a in add:\n        for c in pakistan_top_cities:\n            if nltk.edit_distance(a, c) <= 3: # considering spelling mistakes upto 3 letters\n                return c\n    return row.BillingCity","a0065134":"# Number of cities before ceaning\ndata[\"BillingCity\"].nunique()","c2c38b9f":"data[\"BillingCity\"] = data.apply(clean_city, axis=1)","d1269d30":"# Number of cities after ceaning\ndata[\"BillingCity\"].nunique()","f0e285e9":"single_word_cities = data[data[\"BillingCity\"].str.split().apply(len) == 1][\"BillingCity\"].unique()","66374d28":"books_sold_per_city = data.groupby(by=\"BillingCity\")[\"BookName\"].count().sort_values(ascending=False)","aaa8f3ad":"# Top 20 Cities\nbooks_sold_per_city.head(20)","a9d5a613":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(16, 6))\nax = sns.barplot(books_sold_per_city[:15].index,books_sold_per_city[:15].values)","815ce16b":"top_selling = data[\"BookName\"].value_counts()","dc2bfcf3":"top_selling[:20]","afbce411":"top_selling[:20].plot.bar()","86719f16":"order_status = data[\"OrderStatus\"].value_counts()","d8dc1a3b":"order_status","5899bdc3":"data[data[\"OrderStatus\"] == \"Canceled\"].groupby(by=[\"BillingCity\"])[\"BillingCity\"].count().sort_values(ascending=False)","332daa28":"data[data[\"OrderStatus\"] == \"Returned\"].groupby(by=[\"BillingCity\"])[\"BillingCity\"].count().sort_values(ascending=False)","1e62ca72":"data[data[\"OrderStatus\"] == \"Canceled\"].groupby(by=[\"BillingCity\",\"BookName\"])[\"BookName\"].count()","dc468473":"data[data[\"OrderStatus\"] == \"Returned\"].groupby(by=[\"BillingCity\",\"BookName\"])[\"BookName\"].count().sort_values(ascending=False)","29bcfb9e":"data.reset_index(inplace=True)","841da142":"data.set_index(\"OrderDate\", inplace=True)","0feccab5":"data.head()","b850f281":"title = \"Gufhtugu: books sold per week\"\nax = data.resample(\"W\")[\"BookName\"].count().plot(figsize=(12,6), title=title)\nax.set(xlabel=\"Week\", ylabel=\"Count\")\n","c4f531d8":"title = \"Gufhtugu: books sold per month\"\nax = data.resample(\"M\")[\"BookName\"].count().plot(figsize=(12,6), title=title)\nax.set(xlabel=\"Month\", ylabel=\"Count\")","2f3c3cdf":"day_wise_data = pd.DataFrame(data.resample(\"D\")[\"BookName\"].count().rename(\"BooksSold\"))\nday_wise_data.head()","93837fe6":"day_wise_data[\"BooksSold_7day_mean\"] = day_wise_data.rolling(7).mean()\nday_wise_data.head()","7b4c39f3":"ax = day_wise_data.plot(figsize=(16,6))","226d3506":"from statsmodels.tsa.filters.hp_filter import hpfilter","01d8a6f2":"month_wise_data = pd.DataFrame(data.resample(\"M\")[\"BookName\"].count().rename(\"BooksSold\"))","60dcd09c":"sell_cycle, sell_trend = hpfilter(day_wise_data[\"BooksSold\"], lamb=129600)","c3de9b2c":"sell_trend.plot(figsize=(16,6))","3762bbe1":"sell_cycle.plot(figsize=(16,6))","81b1e6d7":"from statsmodels.tsa.seasonal import seasonal_decompose","fd21c79c":"r = seasonal_decompose(day_wise_data[\"BooksSold\"])","1ccd4875":"from pylab import rcParams\nrcParams[\"figure.figsize\"] = 16,6\nr.plot();","29470775":"  **Statsmodels: hodrick prescott filter**","0ad6a34a":"Books sold each month","20039adc":"# **EDA**","786d45f6":"Let's normalize the BookName and BillingCity column by lower casing it and by strpping any extra spaces","68aa188b":"**Top selling books on Gufhtugu** ","886368f9":"Let's convert the OrderDate to datetime ","ff476bc7":"Number of books sold per billing city","bd37aa99":"# Data Cleaning and pre-processing","a3bee692":"ETS decomposition","311720f8":"Current trend ","c611ffc1":"**Time Series analysis**","b902c896":"Cleaning the city column","7d113515":"Books Sold per week","5bdb606d":"As there are only 3 missing cells in the whole data frame. We will be dropping those corresponding rows.","5b78d02e":"Dealing with null values","0a19e68b":"##  Number of rows and columns in this data","a5e273a0":"The bookname contains more than 1 books in some cases(Ex. OrderNumber 70960). We need to separate those book names and create new rows."}}