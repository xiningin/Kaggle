{"cell_type":{"9f972e95":"code","0aba598d":"code","0e4b31dd":"code","6eedd7c8":"code","d1eb70ba":"code","fa6298da":"code","80878dc2":"code","fbd6e4d9":"code","0a712ad3":"code","298277a6":"code","8e497be7":"code","6903dc44":"code","3eeb3cf9":"code","7aedb9ed":"code","b3f76fdf":"code","e40541dc":"code","96457b3d":"code","b4165ec4":"code","4c8deebc":"code","50657896":"code","29de845d":"markdown","f863d960":"markdown","dc76c5be":"markdown","28d12dc3":"markdown","03f251a0":"markdown","34abe546":"markdown","670fb9f8":"markdown","71e540c7":"markdown","033b6a9f":"markdown","963a288d":"markdown","d964d28c":"markdown","feab7c42":"markdown","5fded5fb":"markdown"},"source":{"9f972e95":"# To generate GIFs\n!pip install imageio","0aba598d":"import glob\nimport tensorflow as tf\nimport imageio\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nfrom tensorflow.keras import layers\nimport time","0e4b31dd":"(train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data()","6eedd7c8":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\nplt.show()","d1eb70ba":"train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')\ntrain_images = (train_images - 127.5) \/ 127.5 # Normalize the images to [-1, 1]","fa6298da":"BUFFER_SIZE = 60000\nBATCH_SIZE = 256\n# Batch and shuffle the data\ntrain_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)","80878dc2":"# This is simple sequential model pipeline: Dense-->BatchNorm ----> ACTf ----> \n\ndef make_generator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Dense(7*7*256, use_bias=False, input_shape=(100,)))\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Reshape((7, 7, 256)))\n    assert model.output_shape == (None, 7, 7, 256) # Note: None is the batch size\n\n    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))\n    assert model.output_shape == (None, 7, 7, 128)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))\n    assert model.output_shape == (None, 14, 14, 64)\n    model.add(layers.BatchNormalization())\n    model.add(layers.LeakyReLU())\n\n    model.add(layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))\n    assert model.output_shape == (None, 28, 28, 1)\n\n    return model","fbd6e4d9":"generator = make_generator_model()\n\nnoise = tf.random.normal([1, 100])\ngenerated_image = generator(noise, training=False)\n\nplt.imshow(generated_image[0, :, :, 0], cmap='gray')","0a712ad3":"def make_discriminator_model():\n    model = tf.keras.Sequential()\n    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',input_shape=[28, 28, 1]))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))\n    model.add(layers.LeakyReLU())\n    model.add(layers.Dropout(0.3))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dense(1))\n\n    return model","298277a6":"discriminator = make_discriminator_model()\ndecision = discriminator(generated_image)\nprint (decision)","8e497be7":"cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)","6903dc44":"def discriminator_loss(real_output, fake_output):\n    real_loss = cross_entropy(tf.ones_like(real_output), real_output)\n    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)\n    total_loss = real_loss + fake_loss\n    return total_loss","3eeb3cf9":"def generator_loss(fake_output):\n    return cross_entropy(tf.ones_like(fake_output), fake_output)","7aedb9ed":"generator_optimizer = tf.keras.optimizers.Adam(1e-4)\ndiscriminator_optimizer = tf.keras.optimizers.Adam(1e-4)","b3f76fdf":"checkpoint_dir = '.\/training_checkpoints'\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt\")\ncheckpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,\n                                 discriminator_optimizer=discriminator_optimizer,\n                                 generator=generator,\n                                 discriminator=discriminator)","e40541dc":"EPOCHS = 50\nnoise_dim = 100\nnum_examples_to_generate = 16\n\nseed = tf.random.normal([num_examples_to_generate, noise_dim])","96457b3d":"@tf.function\ndef train_step(images):\n    noise = tf.random.normal([BATCH_SIZE, noise_dim])\n\n    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:\n      generated_images = generator(noise, training=True)\n\n      real_output = discriminator(images, training=True)\n      fake_output = discriminator(generated_images, training=True)\n\n      gen_loss = generator_loss(fake_output)\n      disc_loss = discriminator_loss(real_output, fake_output)\n\n    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)\n    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)\n\n    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))\n    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))","b4165ec4":"import IPython\ndef train(dataset, epochs):\n  for epoch in range(epochs):\n    start = time.time()\n\n    for image_batch in dataset:\n      train_step(image_batch)\n\n    # Produce images for the GIF as we go\n    IPython.display.clear_output(wait=True)\n    generate_and_save_images(generator,\n                             epoch + 1,\n                             seed)\n\n    # Save the model every 15 epochs\n    if (epoch + 1) % 15 == 0:\n      checkpoint.save(file_prefix = checkpoint_prefix)\n\n    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))\n\n  # Generate after the final epoch\n  IPython.display.clear_output(wait=True)\n  generate_and_save_images(generator,\n                           epochs,\n                           seed)","4c8deebc":"def generate_and_save_images(model, epoch, test_input):\n  # Notice `training` is set to False.\n  # This is so all layers run in inference mode (batchnorm).\n  predictions = model(test_input, training=False)\n\n  fig = plt.figure(figsize=(4,4))\n\n  for i in range(predictions.shape[0]):\n      plt.subplot(4, 4, i+1)\n      plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')\n      plt.axis('off')\n\n  plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))\n  plt.show()","50657896":"train(train_dataset, EPOCHS)","29de845d":"## Load & Preprocess Data!!","f863d960":"## Discriminator Loss","dc76c5be":"## Generator Loss","28d12dc3":"<font size=\"+3\" color=orange ><b> <center><u>Generate Synthetic Images with DCGANs in TF<\/u><\/center><\/b><\/font>","03f251a0":"## Some Helper Function","34abe546":"## Lets Train Our GAN's Network","670fb9f8":"## Build a Discriminator Network for DCGAN's\n![gan_diagram_discriminator.svg](attachment:gan_diagram_discriminator.svg)","71e540c7":"## Import Modules","033b6a9f":"## Define Loss Function\n![gann.png](attachment:gann.png)![equation.jpeg](attachment:equation.jpeg)","963a288d":"### In this Notebook we are going to Build a Simple DCGAN's using Tensorflow Sequential Model,we're using a MNIST Dataset.\n![gans.png](attachment:gans.png)","d964d28c":"## Using a Adam Optimizer!!","feab7c42":"## Build a Generator Network for DCGAN's\n\nGenerator is a Simple Deep Convulutional Network which is capable of producing a Random Pixelate Images for our Fashion or Digit MNIST Dataset and a we know our Dataset is consits of only black and white pixels means it is gray scale so we would have our latent space with a array of 0 and 1 or less than that.\n![gan_diagram_generator.svg](attachment:gan_diagram_generator.svg)","5fded5fb":"## Refer to [TF Docs for GAN's](http:\/\/https:\/\/www.tensorflow.org\/tutorials\/generative\/dcgan) for more details and other Gan Variants."}}