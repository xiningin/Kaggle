{"cell_type":{"21f86f99":"code","7578cdbe":"code","7fb4d6e1":"code","369eee66":"code","9e11e3ad":"code","22595b28":"code","aac7eb1e":"code","dc60deb5":"code","51971fed":"code","baf9e607":"code","c8735e4a":"code","98ec4440":"code","fb605d14":"code","562f2f5b":"code","dd68ef11":"code","2b115078":"code","1362cb88":"code","43111ee9":"code","43f50e48":"code","cc609cb2":"code","c0155c15":"code","772082a1":"code","e3acd5ad":"markdown"},"source":{"21f86f99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7578cdbe":"df = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","7fb4d6e1":"df.head()","369eee66":"df.info()","9e11e3ad":"df.describe()","22595b28":"df.drop(columns = [\"id\"], inplace = True)","aac7eb1e":"df.isnull().sum()","dc60deb5":"df=df.fillna(np.mean(df['bmi']))","51971fed":"df.hist(figsize=(25,25))","baf9e607":"import seaborn as sns\nsns.pairplot(df , hue=\"stroke\")","c8735e4a":"sns.distplot(df[\"bmi\"])","98ec4440":"sns.distplot(df[\"age\"])","fb605d14":"df.boxplot(column='bmi')","562f2f5b":"df.boxplot(column='avg_glucose_level')","dd68ef11":"from sklearn.preprocessing import LabelEncoder\nenc =LabelEncoder()\ndf['gender']=enc.fit_transform(df['gender'])\ndf['smoking_status']=enc.fit_transform(df['smoking_status'])\ndf['work_type']=enc.fit_transform(df['work_type'])\ndf['Residence_type']=enc.fit_transform(df['Residence_type'])\ndf['ever_married']=enc.fit_transform(df['ever_married'])\ndf.head()","2b115078":"from sklearn.model_selection import train_test_split\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(X_train.shape,X_test.shape)","1362cb88":"from imblearn.over_sampling import SMOTE\nsm = SMOTE(random_state=0)\nX_train, y_train = sm.fit_resample(X_train, y_train.ravel())\nprint(X_train.shape,X_test.shape)","43111ee9":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","43f50e48":"!pip install lazypredict","cc609cb2":"from lazypredict.Supervised import LazyClassifier\nclf = LazyClassifier(predictions=True)\nmodels, predictions = clf.fit(X_train, X_test, y_train,y_test)\nmodels","c0155c15":"from sklearn.ensemble import AdaBoostClassifier,RandomForestClassifier\nfrom xgboost import XGBClassifier\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\nxg = XGBClassifier()\nxg.fit(X_train, y_train)\nad = AdaBoostClassifier(n_estimators = 50)\nad.fit(X_train, y_train)","772082a1":"from sklearn.metrics import classification_report as cr\nfrom sklearn.metrics import accuracy_score as As\nprint(\"XGB Model\")\nprint(cr(y_test,xg.predict(X_test)))\nprint(\"Ada Boost Model\")\nprint(cr(y_test,ad.predict(X_test)))\nprint(\"Random Forest Model\")\nprint(cr(y_test,rf.predict(X_test)))","e3acd5ad":"**From the above we can see the models which give the highest accuracy **"}}