{"cell_type":{"e65915de":"code","6b744679":"code","abf42989":"code","007b8612":"code","0243ea4a":"code","0f965e2c":"markdown","92bcd26b":"markdown","3315c111":"markdown","ff928167":"markdown","f2eaf322":"markdown"},"source":{"e65915de":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv1D, Dropout\nfrom keras.optimizers import RMSprop\n\nnum_inputs = 6\nnum_classes = 2\n\ndef data_prep(raw):\n    out_y = keras.utils.to_categorical(raw.Legendary, num_classes)\n    batch_size = raw.shape[0]\n    out_x = raw.values[...,5:11,]\n    return out_x, out_y","6b744679":"train_file = \"..\/input\/Pokemon.csv\"\nraw_data = pd.read_csv(train_file)\n\nx, y = data_prep(raw_data)","abf42989":"model = Sequential()\nmodel.add(Flatten())\nmodel.add(Dense(20, activation='relu', input_shape=(800, 6)))\nmodel.add(Dense(30, activation='relu'))\nmodel.add(Dense(30, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(num_classes, activation='softmax'))","007b8612":"model.compile(loss=keras.losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])","0243ea4a":"model.fit(x, y, \n        batch_size=80, \n        epochs=5, \n        validation_split=0.2)","0f965e2c":"**Function for preping the data**","92bcd26b":"**Compiling the model**","3315c111":"**Reading and preping the data**","ff928167":"**Building the model**","f2eaf322":"**Fitting the model**"}}