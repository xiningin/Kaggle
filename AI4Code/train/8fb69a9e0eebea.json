{"cell_type":{"0850b0d1":"code","26cb09f3":"code","94addf5f":"code","7e6a3ad7":"code","0bee13fc":"code","5f280179":"code","09731416":"code","9d229bee":"code","5d8f959f":"code","4c873ea4":"code","8a5bb23b":"code","31a69799":"code","08ac9201":"code","8029fc18":"code","a542066b":"code","4cd61d3b":"code","b5850c4e":"code","45f7fae5":"code","79204c8c":"code","2fba6f52":"code","039ac7e7":"code","9f61035e":"code","7a7d81fa":"code","b09d8c7b":"code","f628ab37":"code","db4f6cb5":"code","35a538e4":"code","875ca998":"code","7840ec52":"code","529162a2":"code","11364b11":"code","e495b791":"markdown","4e4784f6":"markdown","a4fbca9b":"markdown","6e69bba2":"markdown","eee6c2f4":"markdown","12da2a12":"markdown","4a8e47bd":"markdown"},"source":{"0850b0d1":"\n%matplotlib  inline\n%reload_ext autoreload\n%autoreload 2\n\nimport pandas as pd\nimport numpy as np\n\nfrom fastai.structured import *\nfrom fastai.column_data import *\nnp.set_printoptions(threshold=50, edgeitems=20)\n\nPATH_WRITE = \"\/kaggle\/working\/\"\n","26cb09f3":"\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nssub = pd.read_csv('..\/input\/sample_submission.csv')\n\nprint(f'train: {train.shape}', f'test {test.shape}')","94addf5f":"train.head()","7e6a3ad7":"test.head()","0bee13fc":"for col in ['store', 'item']:\n    train[col] = train[col].astype('category')\n    test[col] = test[col].astype('category')\n    \ntrain.describe(include='all')","5f280179":"train.isnull().sum()","09731416":"train2 = train.copy()\ntest2 = test.copy()\n\nadd_datepart(train2, \"date\", drop=False)\nadd_datepart(test2, \"date\", drop=False)\ntrain2.head()","9d229bee":"test2.head()","5d8f959f":"cat_vars = list(train2)\n[cat_vars.remove(col) for col in ['sales', 'Elapsed', 'date']]\nfor v in cat_vars: train2[v] = train2[v].astype('category').cat.as_ordered()\napply_cats(test2, train2)","4c873ea4":"for v in ['sales', 'Elapsed']:\n    train2[v] = train2[v].fillna(0).astype('float32')\n    if v in test2:\n        test2[v] = test2[v].fillna(0).astype('float32')","8a5bb23b":"train2 = train2.set_index('date')\ntest2 = test2.set_index('date')\n\ndf, y, nas, mapper = proc_df(train2, 'sales', do_scale=True)\nyl = np.log(y+1)","31a69799":"test2['sales'] = 0\ndf_test, _, nas, mapper = proc_df(test2, 'sales', do_scale=True, skip_flds=['id'], mapper=mapper, na_dict=nas)","08ac9201":"df_test.info()","8029fc18":"df.info()","a542066b":"val_idx = np.flatnonzero((df.index<datetime.datetime(2018,1,1)) & (df.index>=datetime.datetime(2017,10,1)))","4cd61d3b":"def inv_y(a): return np.exp(a) - 1\n\ndef smape(y_pred, targ):\n    targ = inv_y(targ)\n    pred = inv_y(y_pred)\n    ape = 2 * np.abs(pred - targ) \/ (np.abs(pred) + np.abs(targ))\n    return ape.mean() \n\nmax_log_y = np.max(yl)\ny_range = (0, max_log_y*1.2)","b5850c4e":"class _ColumnarModelData(ColumnarModelData):\n    @classmethod\n    def from_data_frames(cls, path, trn_df, val_df, trn_y, val_y, cat_flds, bs, is_reg, test_df=None):\n        test_ds = ColumnarDataset.from_data_frame(test_df, cat_flds, None, is_reg) if test_df is not None else None\n        return cls(path, ColumnarDataset.from_data_frame(trn_df, cat_flds, trn_y, is_reg),\n                    ColumnarDataset.from_data_frame(val_df, cat_flds, val_y, is_reg), bs, test_ds=test_ds)\n\n\nmd = _ColumnarModelData.from_data_frame('.', val_idx, df, yl.astype(np.float32), cat_flds=cat_vars, bs=128, test_df=df_test)","45f7fae5":"cat_sz = [(c, len(train2[c].cat.categories)+1) for c in cat_vars]\ncat_sz","79204c8c":"emb_szs = [(c, min(50, (c+1)\/\/2)) for _,c in cat_sz]\nemb_szs","2fba6f52":"\nm = md.get_learner(emb_szs, len(df.columns)-len(cat_vars),\n                   0.04, 1, [1000,500], [0.001,0.01], y_range=y_range, \n                   tmp_name=f\"{PATH_WRITE}tmp\", models_name=f\"{PATH_WRITE}models\")","039ac7e7":"lr = 1e-3\nm.lr_find()","9f61035e":"m.sched.plot(100)","7a7d81fa":"m.fit(lr, 3, metrics=[smape])","b09d8c7b":"m.save('val0')","f628ab37":"m.load('val0')","db4f6cb5":"x,y=m.predict_with_targs()","35a538e4":"smape(x, y)","875ca998":"pred_test=m.predict(True)","7840ec52":"pred_test=np.exp(pred_test) - 1","529162a2":"test2['sales'] = pred_test","11364b11":"test2[['id','sales']].to_csv('predictions0.csv', index=False)","e495b791":"Time-based validation, as that's the goal with the test set.","4e4784f6":"# Load Data","a4fbca9b":"First we need to ensure our target metric matches the competition","6e69bba2":"# Model","eee6c2f4":"# Kaggle Demand Forecasting with Fast.ai\n\nSee [competition details](https:\/\/www.kaggle.com\/c\/demand-forecasting-kernels-only)\n\nThis is largely based on the lesson3 notebook for the Rossman forecasting challenge.","12da2a12":"# Feature Engineering","4a8e47bd":"Determine embedding levels for categorical variables"}}