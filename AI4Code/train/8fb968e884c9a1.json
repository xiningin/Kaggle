{"cell_type":{"dd990ddd":"code","cb86c6f7":"code","d1b460b1":"code","d58f7de9":"code","374eb68b":"code","86dcea21":"code","bdb2b2b9":"code","e9602da3":"code","6865abda":"code","591fd7d9":"code","c3bf5f1b":"code","afc8eb02":"code","9fa7d9d1":"code","bf1a220b":"code","5949c51c":"code","0bb25ea5":"code","c73af542":"code","8a829452":"code","95c8d591":"code","61fd2a2b":"code","25086e16":"code","e294c38f":"code","b4b22583":"code","f7bf0cf4":"code","cb3bce1f":"code","aa0746cf":"markdown","8ed91843":"markdown","8a039377":"markdown","0de22967":"markdown","dc20d593":"markdown","49c267ac":"markdown","aa009419":"markdown","d029b97c":"markdown","9004762d":"markdown","ab2a9d3f":"markdown","9343a2b0":"markdown","30ce5a21":"markdown","85d8336d":"markdown","f23704dc":"markdown","8b060f79":"markdown","3b1c6fcb":"markdown","05a20abf":"markdown","d44c3b03":"markdown","601d5be5":"markdown","6e1761ea":"markdown","86d35768":"markdown","41c85c84":"markdown","5ef99c03":"markdown","cbac7652":"markdown","d6444b53":"markdown","491b6f61":"markdown"},"source":{"dd990ddd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb86c6f7":"# Importing Required Libraries\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns","d1b460b1":"# Reading And Copying Data\nmain_df = pd.read_csv('..\/input\/pokemon\/Pokemon.csv', encoding=\"windows-1252\")\npoke_df=main_df.copy()\n\npoke_df","d58f7de9":"# Shape of the dataset\npoke_df.shape","374eb68b":"# Getting list of all columns\npoke_df.columns","86dcea21":"# Information about dataset\npoke_df.info()","bdb2b2b9":"# Statistical measurement of the dataset\npoke_df.describe()","e9602da3":"# Checking for any duplicated value \npoke_df.duplicated().sum()","6865abda":"# Checking for any missing value\npoke_df.isnull().sum()","591fd7d9":"plt.figure(figsize=(18,9))\nax = sns.countplot(x='Type 1', data=poke_df,order = poke_df['Type 1'].value_counts().index)","c3bf5f1b":"plt.figure(figsize=(18,9))\nax = sns.countplot(x='Type 2', data=poke_df, order = poke_df['Type 2'].value_counts().index)","afc8eb02":"# Creating new column for df as \"Type Combination\"\npoke_df['Type Combination'] = (poke_df['Type 1'] + \"+\" + poke_df['Type 2'])\npoke_df['Type Combination'].nunique()\n","9fa7d9d1":"# visualize top 10 common combinations\nfig, ax = plt.subplots(figsize=(19, 8))\ntop10 = poke_df['Type Combination'].value_counts()[0:10]\nax = sns.barplot(x=top10.index, y=top10)","bf1a220b":"# List of stats\nstats = [\"HP\", \"Attack\", \"Defense\", \"Sp. Atk\", \"Sp. Def\", \"Speed\", \"Total\"]","5949c51c":"# Hist Table Function\ndef hist_plot(variable):\n    var = variable\n    fig, axs = plt.subplots()\n    sns.histplot(data=poke_df[var])\n    plt.show()\n\n# Loop for stats List\nfor i in stats:\n    hist_plot(i)","0bb25ea5":"# Function for group, order and bar plot for types\ndef sort_and_bar_plot(value):\n    index_group = poke_df.groupby(['Type 1']).mean()\n    index_order = index_group[value].sort_values(ascending=False)\n    fig, axs = plt.subplots(figsize=(16, 5))\n    sns.boxplot(data=poke_df, x=value, y=\"Type 1\", order=index_order.index)\n    plt.show()\n\n# Loop for every stat in stats list \nfor i in stats:\n    sort_and_bar_plot(i)","c73af542":"plt.subplots(figsize=(18, 9))\nsns.violinplot(data=poke_df, x=\"Generation\", y=\"Total\")\n","8a829452":"fig, axs = plt.subplots(2, 3, figsize=(18, 10))\nj = -1\nfor i in range(6):\n    if i % 3 == 0:\n        j = j + 1\n    sns.pointplot(data=poke_df, x=\"Generation\", y=stats[i], ax=axs[j, i % 3])\nplt.show()","95c8d591":"def top_stats(variable):\n    stat_top10 = poke_df.sort_values(by=[variable], ascending=False).head(10)\n    fig, axs = plt.subplots(figsize=(10,5))\n    sns.barplot(data=stat_top10, x=variable, y=\"Name\")\n    plt.title(\"Top 10 \"+variable+\" Pokemon\")\n    plt.show()\n\nfor i in stats:\n    top_stats(i)","61fd2a2b":"fig, axs = plt.subplots(2, 3, figsize=(18, 10))\nsns.kdeplot(data=poke_df, x=stats[0], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[0, 0])\nsns.kdeplot(data=poke_df, x=stats[1], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[0, 1])\nsns.kdeplot(data=poke_df, x=stats[2], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[0, 2])\nsns.kdeplot(data=poke_df, x=stats[3], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[1, 0])\nsns.kdeplot(data=poke_df, x=stats[4], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[1, 1])\nsns.kdeplot(data=poke_df, x=stats[5], hue=\"Legendary\", fill=True, common_norm=False, ax=axs[1, 2])","25086e16":"fig, axs = plt.subplots(figsize=(18, 5))\nsns.kdeplot(data=poke_df, x=\"Total\", hue=\"Legendary\", fill=True, common_norm=False)","e294c38f":"LegendaryPokemons = poke_df[poke_df[\"Legendary\"] == True]","b4b22583":"plt.figure(figsize=(18,9))\nax = sns.countplot(x='Generation', data=LegendaryPokemons)","f7bf0cf4":"plt.figure(figsize=(18,9))\nax = sns.countplot(x='Type 1', data=LegendaryPokemons, order=LegendaryPokemons[\"Type 1\"].value_counts().index)","cb3bce1f":"test = poke_df.pivot_table(index='Type 1',\n                                     columns='Legendary',\n                                     values='Attack',\n                                     fill_value=0,\n                                     aggfunc='count').unstack()\nprint(test[True].to_string())","aa0746cf":"<a id=\"3\"><\/a> <br>\n# 3. Type Analysis\n* main type counts\n* second type counts\n* combinations of type1 and type2\n* top 10 most common combination","8ed91843":"<a id=\"hist\"><\/a> <br>\n### Hist Table for each stat\n","8a039377":"* New dataset for Legendary Pokemons","0de22967":"<a id=\"7\"><\/a> <br>\n### Top 10 Most Common Combinations\n","dc20d593":"<a id=\"11\"><\/a> <br>\n### Best Pokemons by Stats","49c267ac":"While Gen 4 is better at mean gen 3 is better at min, max and %50 so we need to look deeply","aa009419":"<a id=\"10\"><\/a> <br>\n### Stats of Generations And Finding Best Generation","d029b97c":"# Pokemon EDA+Visualization+Analysis\n**In this notebook, I tried analysis Pokemons with stats and create best team. Its my first data analysis so your feedback is highly appreciated and will help me to improve.**\n\n**Content:**\n1. [About Dataset](#1)\n1. [EDA](#2)\n1. [Type Analysis](#3)\n    1. [Main Type Counts](#4)\n    1. [Second Type Counts](#5)\n    1. [Combinations Of Type1 And Type2](#6) \n    1. [TOP 10 Most Common Combination](#7)   \n1. [Stat Analysis](#8)\n    1. [Hist Table For Each Stat](#hist)\n    1. [Stats Of Types And Finding Best Type](#9)\n    1. [Stats Of Generations And Finding Best Generation](#10)\n    1. [Best Pokemons by Stats](#11)\n1. [Legendary Pokemons](#12)\n    1. [Legendary vs Normal Pokemon stats](#13)\n    1. [Legendary Pokemon counts by Generations](#14)\n    1. [Legendary Pokemon counts by Types](#15)\n    1. [Is There Type With No Legendary Pokemon?](#16)\n1. #TODO:\nCreating best team for every generation\n    ","9004762d":"<a id=\"8\"><\/a> <br>\n# 4. Stats\n* Hist Table for each stat\n* Stats of types and finding best type\n* Stats of gens and finding best gen\n* Best Pokemons for each stat and overall\nThere is 7 stats for every pokemon and I made a list for these stats for using in functions","ab2a9d3f":"<a id=\"16\"><\/a> <br>\n### Is There Type With No Legendary Pokemon?","9343a2b0":"<a id=\"5\"><\/a> <br>\n### Second Type Counts","30ce5a21":"As we can see \"Dragon\" type is almost best in every stat and total stats","85d8336d":"As we can see there is no legendary pokemons as Bug,fighting and Poison type ","f23704dc":"<a id=\"9\"><\/a> <br>\n### Stats of Types and Finding Best Type\nand worse ^^","8b060f79":"<a id=\"4\"><\/a> <br>\n### Main Type Counts\n","3b1c6fcb":"<a id=\"2\"><\/a> <br>\n# 2. EDA","05a20abf":"There is 386 pokemon with only one main type","d44c3b03":"<a id=\"14\"><\/a> <br>\n### Legendary Pokemon counts by Generations","601d5be5":"<a id=\"13\"><\/a> <br>\n### Legendary Vs Normal Pokemon Stats","6e1761ea":"There is 7 stats for every pokemon and I made a list for these stats for using in functions","86d35768":"<a id=\"15\"><\/a> <br>\n### Legendary Pokemon counts by Types","41c85c84":"<a id=\"12\"><\/a> <br>\n# 5. Legendary Pokemons\n* Legendary vs Normal Pokemon stats\n* Legendary Pokemon Counts by Generations\n* Legendary Counts by types\n* Is There Type With No Legendary Pokemon?","5ef99c03":"<a id=\"6\"><\/a> <br>\n### How many combinations of Type 1 and Type 2 are there?","cbac7652":"# #TODO: Creating Dream Pokemon Team","d6444b53":"<a id=\"1\"><\/a> <br>\n# 1. About Dataset \nThis dataset contains about every Pokemon until generation 6 (2014-Pokemon X and Pokemon Y) <br> <br>\n**Attribute Information**\n* #: Pokedex Number of Pokemon\n* Name: Names of Pokemon \n* Type 1: Main type of Pokemon.\n* Type 2: Second type of Pokemon. \n* HP: Hit Points **stat** of Pokemon.\n* Attack: Attack **stat** of Pokemon.\n* Defense: Defense **stat** of Pokemon.\n* Sp. Atk: Special Attack **stat** of Pokemon.\n* Sp. Def: Special Defense **stat** of Pokemon.\n* Speed: Speed **stat** of Pokemon.\n* Total: Average of all other **stats**\n* Generation: Pokemons first relese generation there is 6 generation.\n  1. Red and Blue (1996\u20131999), \n  2. Gold and Silver (1999\u20132002), \n  3. Ruby and Sapphire (2002\u20132006), \n  4. Diamond and Pearl(2006\u20132010),\n  5. Black And White (2010\u20132013),\n  6. X and Y (2013\u20132016)\n* Legendary: Bool about is pokemon legendary or not.\n","491b6f61":"As we can see gen 4 is almost outclass every stat vs gen3. Gen1 being best at speed is interesting data btw"}}