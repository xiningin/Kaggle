{"cell_type":{"b4adf02d":"code","d95311ec":"code","12b290f3":"code","f0e0bf62":"code","d902ddae":"code","e250b404":"code","e8dcc1a1":"code","a160ba9b":"code","492c03fa":"code","f00c7afe":"code","39bcd4a3":"code","018b0c7d":"code","02355b27":"code","a86fb707":"code","bf04dd28":"code","3343d3ed":"code","7d97d765":"code","995af17a":"code","bbe22133":"code","3642be43":"code","c2807cb4":"code","6a2ecb36":"code","19a495e4":"code","e63e6f64":"code","01da0ad0":"code","e58bf8c3":"code","d066ba61":"code","d872aca9":"code","ffea421e":"code","559cf2f4":"code","307ffc8b":"code","0639c9ab":"code","a964ec1b":"code","7e576d8c":"code","124ae655":"code","9455d388":"code","45e269d5":"code","70e16ed5":"code","67ff1a89":"code","0034c25e":"code","30b4999b":"code","686872d3":"code","1ddcb232":"code","126698b2":"code","08d9acde":"code","fa6da715":"code","22bf28b0":"code","322d6315":"code","1b95bd95":"code","007e1a02":"code","ddb293a1":"code","8d9eddce":"code","c657c95a":"code","025467b7":"code","214d2774":"code","a22b7d14":"code","a20ea59a":"code","5bc8231a":"code","484d9ad7":"code","04375d16":"code","c419840b":"code","c5b57b6c":"code","98ae686c":"code","278eee3f":"code","08a4ed36":"code","084ca323":"code","0add1fec":"code","c414e3d1":"code","36bce93e":"code","9d4b5204":"code","c7ab1aa3":"code","74996004":"code","b7913f8b":"code","12922db6":"code","172723bc":"code","34b463dd":"code","aecf01f4":"code","e37835d6":"code","64a3bcdf":"code","11aabc5f":"code","11aeb2bf":"code","a76cddfc":"code","f28849ab":"code","2a0b3e98":"code","497c17d5":"code","6eeb93b7":"code","025da69f":"code","6654151e":"code","38bdf6cc":"code","818db4db":"code","b909f62b":"code","daca473d":"code","a9b73641":"code","2b0e8436":"code","3df2cde2":"code","659a8c9a":"code","1c2e3ca2":"code","32163d41":"code","7bfb8a54":"code","75b98b6f":"code","9c906a03":"code","36495dd7":"code","512e5f21":"code","6b105bfb":"markdown","ce886645":"markdown","854d4725":"markdown","a462e5a4":"markdown","64efa19c":"markdown","11d9a2c8":"markdown","ca85c55f":"markdown","ed5f02c8":"markdown","748a1cee":"markdown","b6613539":"markdown","8cc259d2":"markdown","58ac6b22":"markdown","3b821a23":"markdown","302f1750":"markdown"},"source":{"b4adf02d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d95311ec":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#plotly\nimport plotly.express as px\n\n# warning\nimport warnings\nwarnings.filterwarnings('ignore')\n# clustering\nfrom sklearn import preprocessing \nimport scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering \n# standarization\nfrom sklearn.preprocessing import StandardScaler, normalize\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import silhouette_score\nimport scipy.cluster.hierarchy as shc\n#plotly \nimport plotly.offline as py\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode(connected=True)\nimport plotly.figure_factory as ff\nimport plotly.express as px\n# Styling \nplt.style.use('fivethirtyeight')","12b290f3":"df=pd.read_csv('..\/input\/ataljalyojana\/Atal Jal 31 March 2021 .xlsx - Sheet1.csv')\n","f0e0bf62":"df['State'].value_counts()","d902ddae":"df['State']=df['State'].replace('Uttar pradesh', 'Uttar Pradesh')","e250b404":"df['State'].value_counts()","e8dcc1a1":"df.fillna(method=\"ffill\", inplace=True)","a160ba9b":"df.isnull().sum()","492c03fa":"df.columns.values","f00c7afe":"label_encoder = preprocessing.LabelEncoder() \n\ndf['State'] = label_encoder.fit_transform(df['State'])\ndf.head()","39bcd4a3":"df['SOURCE'] = label_encoder.fit_transform(df['SOURCE'])\ndf.head()","018b0c7d":"df.columns","02355b27":"col=['State' , 'Well Depth']","a86fb707":"df['Well Depth'].value_counts().plot(kind=\"line\")","bf04dd28":"plt.figure(1, figsize = (16 ,8))\ndendrogram = sch.dendrogram(sch.linkage(df[col], method  = \"ward\"))\n\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.xticks(rotation=90)\nplt.show()","3343d3ed":"x=df.sample(frac=0.01)\nx.head()","7d97d765":"plt.figure(1, figsize = (16 ,8))\ndendrogram = sch.dendrogram(sch.linkage(x[col], method  = \"ward\"))\n\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.xticks(rotation=90)\nplt.show()","995af17a":"hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage ='average')\n\ny_hc = hc.fit_predict(x[col])\ny_hc","bbe22133":"df['State'].value_counts()","3642be43":"x['cluster'] = pd.DataFrame(y_hc)","c2807cb4":"x","6a2ecb36":"x['cluster']","19a495e4":"X = x[col].values\nplt.scatter(X[y_hc==0, 0], X[y_hc==0, 1], s=100, c='red', label ='Cluster 1')\nplt.scatter(X[y_hc==1, 0], X[y_hc==1, 1], s=100, c='cyan', label ='Cluster 2')\nplt.scatter(X[y_hc==2, 0], X[y_hc==2, 1], s=100, c='green', label ='Cluster 3')\nplt.scatter(X[y_hc==3, 0], X[y_hc==3, 1], s=100, c='purple', label ='Cluster 4')\nplt.scatter(X[y_hc==4, 0], X[y_hc==4, 1], s=100, c='orange', label ='Cluster 5')\nplt.scatter(X[y_hc==5, 0], X[y_hc==5, 1], s=100, c='black', label ='Cluster 6')\nplt.scatter(X[y_hc==6, 0], X[y_hc==6, 1], s=100, c='pink', label ='Cluster 7')\n\nplt.title('Clusters of Customers (Hierarchical Clustering Model)')\nplt.xlabel('Annual Income(k$)')\nplt.ylabel('Spending Score(1-100)')\nplt.show()","e63e6f64":"df['Pre_2015'].value_counts().sort_values(ascending=False)","01da0ad0":"df['Pre_2016'].value_counts().sort_values(ascending=False)","e58bf8c3":"df['Pre_2017'].value_counts().sort_values(ascending=False)","d066ba61":"df['Pre_2018'].value_counts().sort_values(ascending=False)","d872aca9":"df['Pre_2019'].value_counts().sort_values(ascending=False)","ffea421e":"df['Pst_2015'].value_counts().sort_values(ascending=False)","559cf2f4":"df['Pst_2016'].value_counts().sort_values(ascending=False)","307ffc8b":"df['Pst_2017'].value_counts().sort_values(ascending=False)","0639c9ab":"df['Pst_2018'].value_counts().sort_values(ascending=False)","a964ec1b":"df['Pst_2019'].value_counts().sort_values(ascending=False)","7e576d8c":"df.columns","124ae655":"col=[ 'State',  'Well Depth', 'SOURCE',\n       'Level Depth Ratio', 'Pre_2015', 'Pst_2015', 'Pre_2016', 'Pst_2016',\n       'Pre_2017', 'Pst_2017', 'Pre_2018', 'Pst_2018', 'Pre_2019', 'Pst_2019']","9455d388":"xx=df[col]","45e269d5":"xx.replace('NAN', 0)","70e16ed5":"xx.fillna(xx['Pre_2015'].mean(), inplace=True)","67ff1a89":"xx.isna().sum()","0034c25e":"# Standardize data\nscaler = StandardScaler() \nscaled_df = scaler.fit_transform(xx) ","30b4999b":"# Normalizing the Data \nnormalized_df = normalize(scaled_df) ","686872d3":"# Converting the numpy array into a pandas DataFrame \nnormalized_df = pd.DataFrame(normalized_df) ","1ddcb232":"# Reducing the dimensions of the data \npca = PCA(n_components = 2) \nX_principal = pca.fit_transform(normalized_df) \nX_principal = pd.DataFrame(X_principal) \nX_principal.columns = ['P1', 'P2'] \n  \nX_principal.head(2)","126698b2":"plt.figure(figsize =(6, 6)) \nplt.title('Visualising the data') \nDendrogram = shc.dendrogram((shc.linkage(X_principal, method ='ward'))) ","08d9acde":"silhouette_scores = [] \n\nfor n_cluster in range(2, 8):\n    silhouette_scores.append( \n        silhouette_score(X_principal, AgglomerativeClustering(n_clusters = n_cluster).fit_predict(X_principal))) \n    \n# Plotting a bar graph to compare the results \nk = [2, 3, 4, 5, 6,7] \nplt.bar(k, silhouette_scores) \nplt.xlabel('Number of clusters', fontsize = 10) \nplt.ylabel('Silhouette Score', fontsize = 10) \nplt.show()","fa6da715":"agg = AgglomerativeClustering(n_clusters=3)\nagg.fit(X_principal)","22bf28b0":"# Visualizing the clustering \nplt.scatter(X_principal['P1'], X_principal['P2'],  \n           c = AgglomerativeClustering(n_clusters = 3).fit_predict(X_principal), cmap =plt.cm.winter) \nplt.show() ","322d6315":"plt.figure(1, figsize = (16 ,8))\ndendrogram = sch.dendrogram(sch.linkage(normalized_df, method  = \"ward\"))\n\nplt.title('Dendrogram')\nplt.xlabel('Customers')\nplt.ylabel('Euclidean distances')\nplt.show()","1b95bd95":"hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage ='average')\n\ny_hc = hc.fit_predict(normalized_df)\ny_hc","007e1a02":"df['cluster'] = pd.DataFrame(y_hc)","ddb293a1":"df.head()","8d9eddce":"df['cluster'].value_counts()","c657c95a":"df['State'].value_counts()","025467b7":"df['State']=df['State'].replace(0, 'Gujarat')\ndf['State']=df['State'].replace(1, 'Haryana')\ndf['State']=df['State'].replace(2, 'Karnataka')\ndf['State']=df['State'].replace(3, 'Madhya Pradesh')\ndf['State']=df['State'].replace(4, 'Maharashtra')\ndf['State']=df['State'].replace(5, 'Rajasthan')\ndf['State']=df['State'].replace(6, 'Uttar Pradesh')\n","214d2774":"df[['State', 'cluster']].value_counts()","a22b7d14":"c1=df[df['cluster']==0]\nc2=df[df['cluster']==1]\nc3=df[df['cluster']==2]\nc4=df[df['cluster']==3]\nc5=df[df['cluster']==4]","a20ea59a":"c1['State'].value_counts()","5bc8231a":"c1['State'].value_counts().sum()","484d9ad7":"c1['State'].value_counts().sum()\/(len(df))","04375d16":"c2['State'].value_counts()","c419840b":"c3['State'].value_counts()","c5b57b6c":"c4['State'].value_counts()","98ae686c":"c5['State'].value_counts()","278eee3f":"c1.head()","08a4ed36":"c1['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975])","084ca323":"sns.kdeplot(df['Well Depth'], hue=df['cluster'], fill=True, color='black')","0add1fec":"import scipy.stats as st\n\n#create 95% confidence interval for population mean weight\nst.norm.interval(alpha=0.95, loc=np.mean(c1['Well Depth']), scale=st.sem(c1['Well Depth']))","c414e3d1":"plt.figure(figsize=(10,5))\nsns.kdeplot(c1['Well Depth'], fill=True, hue=c1['State'])","36bce93e":"c1['State'].value_counts()","9d4b5204":"c1[c1['State']==\"Maharashtra\"]['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975])","c7ab1aa3":"plt.figure(figsize=(10,5))\nsns.kdeplot(c1[c1['State']==\"Maharashtra\"]['Well Depth'], fill=True, )","74996004":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Maharashtra\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Maharashtra\"]['Well Depth']))","b7913f8b":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Haryana\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Haryana\"]['Well Depth']))","12922db6":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Rajasthan\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Rajasthan\"]['Well Depth']))","172723bc":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Uttar Pradesh\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Uttar Pradesh\"]['Well Depth']))","34b463dd":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Madhya Pradesh\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Madhya Pradesh\"]['Well Depth']))","aecf01f4":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Karnataka\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Karnataka\"]['Well Depth']))","e37835d6":"st.norm.interval(alpha=0.95, loc=np.mean(c1[c1['State']==\"Gujarat\"]['Well Depth']), scale=st.sem(c1[c1['State']==\"Gujarat\"]['Well Depth']))","64a3bcdf":"c2['State'].value_counts()","11aabc5f":"st.norm.interval(alpha=0.95, loc=np.mean(c2[c2['State']==\"Haryana\"]['Well Depth']), scale=st.sem(c2[c2['State']==\"Haryana\"]['Well Depth']))","11aeb2bf":"st.norm.interval(alpha=0.95, loc=np.mean(c2[c2['State']==\"Gujarat\"]['Well Depth']), scale=st.sem(c2[c2['State']==\"Gujarat\"]['Well Depth']))","a76cddfc":"st.norm.interval(alpha=0.95, loc=np.mean(c2[c2['State']==\"Karnataka\"]['Well Depth']), scale=st.sem(c2[c2['State']==\"Karnataka\"]['Well Depth']))","f28849ab":"st.norm.interval(alpha=0.95, loc=np.mean(c2[c2['State']==\"Rajasthan\"]['Well Depth']), scale=st.sem(c2[c2['State']==\"Rajasthan\"]['Well Depth']))","2a0b3e98":"st.norm.interval(alpha=0.95, loc=np.mean(c2[c2['State']==\"Maharashtra\"]['Well Depth']), scale=st.sem(c2[c2['State']==\"Maharashtra\"]['Well Depth']))","497c17d5":"c3['State'].value_counts()","6eeb93b7":"st.norm.interval(alpha=0.95, loc=np.mean(c3[c3['State']==\"Rajasthan\"]['Well Depth']), scale=st.sem(c3[c3['State']==\"Rajasthan\"]['Well Depth']))","025da69f":"st.norm.interval(alpha=0.95, loc=np.mean(c3[c3['State']==\"Maharashtra\"]['Well Depth']), scale=st.sem(c3[c3['State']==\"Maharashtra\"]['Well Depth']))","6654151e":"st.norm.interval(alpha=0.95, loc=np.mean(c3[c3['State']==\"Rajasthan\"]['Well Depth']), scale=st.sem(c3[c3['State']==\"Rajasthan\"]['Well Depth']))","38bdf6cc":"st.norm.interval(alpha=0.95, loc=np.mean(c3[c3['State']==\"Madhya Pradesh\"]['Well Depth']), scale=st.sem(c3[c3['State']==\"Madhya Pradesh\"]['Well Depth']))","818db4db":"c4['State'].value_counts()","b909f62b":"st.norm.interval(alpha=0.95, loc=np.mean(c4[c4['State']==\"Karnataka\"]['Well Depth']), scale=st.sem(c4[c4['State']==\"Karnataka\"]['Well Depth']))","daca473d":"c5['State'].value_counts()","a9b73641":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Karnataka\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Karnataka\"]['Well Depth']))","2b0e8436":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Rajasthan\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Rajasthan\"]['Well Depth']))","3df2cde2":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Maharashtra\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Maharashtra\"]['Well Depth']))","659a8c9a":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Madhya Pradesh\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Madhya Pradesh\"]['Well Depth']))","1c2e3ca2":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Gujarat\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Gujarat\"]['Well Depth']))","32163d41":"st.norm.interval(alpha=0.95, loc=np.mean(c5[c5['State']==\"Haryana\"]['Well Depth']), scale=st.sem(c5[c5['State']==\"Haryana\"]['Well Depth']))\n","7bfb8a54":"print(c1['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975]))\nst.norm.interval(alpha=0.95, loc=np.mean(c1['Well Depth']), scale=st.sem(c1['Well Depth']))","75b98b6f":"print(c2['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975]))\nst.norm.interval(alpha=0.95, loc=np.mean(c2['Well Depth']), scale=st.sem(c2['Well Depth']))","9c906a03":"c3['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975])","36495dd7":"c4['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975])","512e5f21":"c5['Well Depth'].describe(percentiles=[0.1, 0.2,0.3, 0.4, 0.5, 0.6, 0.7, 0.75,0.8, 0.9, 0.95, 0.975])","6b105bfb":"# Find the conficende intervalc  for the well in cluster 1","ce886645":"* Maharashtra       699\n* Haryana           614\n* Rajasthan         387\n* Karnataka         299\n* Gujarat           272\n* Madhya Pradesh    187\n* Uttar pradesh     170\n* Uttar Pradesh      28","854d4725":"# Maharastra in ","a462e5a4":"# Label Encoding\nLabel Encoding refers to converting the labels into numeric form so as to convert it into the machine-readable form. Machine learning algorithms can then decide in a better way on how those labels must be operated.","64efa19c":"# Cluster -C5","11d9a2c8":"# Standarizing the dataset","ca85c55f":"# Cluster-2","ed5f02c8":"* Maharashtra       699\n* Haryana           614\n* Rajasthan         387\n* Karnataka         299\n* Gujarat           272\n* Madhya Pradesh    187\n* Uttar pradesh     170\n* Uttar Pradesh      28","748a1cee":"# Confidence interval of all the states from cluster-1","b6613539":"# Cluster-3","8cc259d2":"# Variation of well depth","58ac6b22":"# Cluster C-4","3b821a23":"# Obs\n* we can see that most of the well are lying in the cluster 1. \n* All 7 states lying in this region as we can see that.\n","302f1750":"# "}}