{"cell_type":{"f124d08a":"code","98371ae8":"code","05f6576a":"code","d4220c04":"code","6f88660b":"code","7be2d40e":"code","b076a607":"code","bb2deb14":"code","65efa03b":"code","9a55445a":"code","1a4d691b":"code","22ae6021":"markdown","227da738":"markdown","0b89a05e":"markdown"},"source":{"f124d08a":"# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","98371ae8":"# Import Dataset\ndataset = pd.read_csv('https:\/\/archive.ics.uci.edu\/ml\/'\n            'machine-learning-databases\/breast-cancer-wisconsin\/breast-cancer-wisconsin.data', header=None)\nheader = ['Sample_code_number',\n         'Clump_Thickness',\n         'Uniformity_of_Cell_Size',\n         'Uniformity_of_Cell_Shape',\n         'Marginal_Adhesion',\n         'Single_Epithelial_Cell_Size',\n         'Bare_Nuclei',\n         'Bland_Chromatin',\n         'Normal_Nucleoli',\n         'Mitoses',\n         'Class']\ndataset.columns = header\n# There is few empty or garbage character in the dataset\ndataset['Bare_Nuclei'] = dataset['Bare_Nuclei'].replace(r'\\?', np.nan, regex=True)\nX = dataset.iloc[:,1:-1].values\ny = dataset.iloc[:,-1].values","05f6576a":"dataset.head(n=5)","d4220c04":"# Dataset sanity check\ndataset.info()","6f88660b":"# Check Missing value\nprint(\"Number of Missing value\")\nfor col in dataset.columns:\n    print('\\t%s: %d' %(col, dataset[col].isna().sum()))","7be2d40e":"# Handling Missing value\nfrom sklearn.impute import SimpleImputer\nSI = SimpleImputer(strategy='mean')\nSI.fit(X[:,5:6])\nX[:,5:6] = SI.transform(X[:,5:6])","b076a607":"# Split the dataset into train and test\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","bb2deb14":"# Apply logistic regression on train dataset\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(X_train,y_train)","65efa03b":"# Apply logistic regression on test dataset\ny_pred = classifier.predict(X_test)\nnp.concatenate((y_test.reshape(len(y_test),1), y_pred.reshape(len(y_pred),1)),1)","9a55445a":"# Evaluate the model performance\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test,y_pred)\nprint(cm)\nprint(f'Accuracy score is {accuracy_score(y_test,y_pred)}')","1a4d691b":"# Check the new result\nclassifier.predict([[5,8,5,4,3,4,2,4,1]])","22ae6021":"This is breast cancer dataset, where we will predict the tumor is benign or malignant (2 for benign, 4 for malignant).","227da738":"Let test with unknown data\nClump Thickness = 5\nUniformity of Cell Size = 8 \nUniformity of Cell Shape = 5\nMarginal Adhesion =  4\nSingle Epithelial Cell Size = 3  \nBare Nuclei =  4\nBland Chromatin = 2\nNormal Nucleoli = 4\nMitoses = 1","0b89a05e":"This dataset is having 11 features and 699 observations. All the features are scale between 1 to 10. So no need of feature scaling. There is missing value in Bare_Nuclei"}}