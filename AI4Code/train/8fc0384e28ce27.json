{"cell_type":{"a9a60d8f":"code","7eb02417":"code","de71f9ba":"code","79517d35":"code","048e105d":"code","0189b3c4":"code","73fa812e":"code","e35920c3":"code","a874e9a1":"code","dd6989dd":"code","b588b081":"code","7198a6e7":"code","06376cda":"code","d6681bae":"code","8c9ed9d5":"code","58a399fc":"code","0b3471ca":"code","5641fa21":"code","24300da8":"code","9c6b115b":"code","72a6c974":"code","b8f75974":"code","7fb256a0":"code","e428946e":"code","bed3842d":"code","4055e0fa":"code","ca2d1a5a":"code","7efa70c4":"code","cec2cdcb":"code","d58e1a67":"code","84f72b36":"code","7799a8dd":"code","2a479574":"code","ef557157":"code","8afb37b4":"code","26888b68":"code","595e9301":"code","3542e011":"code","f8bb9672":"code","389fddae":"code","9819f4c4":"code","55a8bbad":"code","106472e8":"code","a8feae61":"code","3613ba9d":"code","0b7ee2af":"markdown","14b0ed8a":"markdown","df972012":"markdown","d084b2ce":"markdown","01b1bd3b":"markdown","31bbedff":"markdown","a77e477a":"markdown","a19ce6db":"markdown","ab02515b":"markdown","029809f1":"markdown","f35adf13":"markdown","59abc115":"markdown","f6132fed":"markdown","e3f43f09":"markdown","e7bee316":"markdown","94c2f29f":"markdown","34cbc686":"markdown","65fbf0b4":"markdown","4e9e8e08":"markdown","c17db9f4":"markdown","7abac7a0":"markdown","3e989b66":"markdown","d892551b":"markdown","778b4947":"markdown","028fa7bb":"markdown","7252568c":"markdown","413a4600":"markdown","a0ddb309":"markdown","0dd04380":"markdown"},"source":{"a9a60d8f":"import numpy as np\nimport pandas as pd \nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='whitegrid' , palette='tab10')\n%matplotlib inline","7eb02417":"#\u8f7d\u5165\u6570\u636e\ntrain_df = pd.read_csv('..\/input\/train.csv',header = 0)\ntest_df = pd.read_csv('..\/input\/test.csv',header=0)","de71f9ba":"train_df.shape","79517d35":"train_df.head()","048e105d":"#\u67e5\u770b\u8bad\u7ec3\u96c6\u6570\u636e\u662f\u5426\u6709\u7f3a\u5931\u503c\ntrain_df.info()\n","0189b3c4":"#\u89c2\u5bdf\u8bad\u7ec3\u96c6\u6570\u636e\u63cf\u8ff0\u7edf\u8ba1\ntrain_df.describe()","73fa812e":"#\u89c2\u5bdf\u79df\u8d41\u989d\u5bc6\u5ea6\u5206\u5e03\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nfig.set_size_inches(6,5)\n\nsns.distplot(train_df['count'])\n\nax.set(xlabel='count',title='Distribution of count',)\n\n","e35920c3":"train_WithoutOutliers = train_df[np.abs(train_df['count']-\n                        train_df['count'].mean())<=(3*train_df['count'].std())] \ntrain_WithoutOutliers .shape\n","a874e9a1":"# \u89c2\u5bdf\u53bb\u96643\u4e2a\u6807\u51c6\u5dee\u4e4b\u540e\u7684\u79df\u8d41\u989d\u7edf\u8ba1\u63cf\u8ff0\ntrain_WithoutOutliers['count'] .describe()","dd6989dd":"fig = plt.figure()\nax1 = fig.add_subplot(1, 2, 1)\nax2 = fig.add_subplot(1, 2, 2)\nfig.set_size_inches(12,5)\n\nsns.distplot(train_WithoutOutliers['count'],ax=ax1)\nsns.distplot(train_df['count'],ax=ax2)\n\nax1.set(xlabel='count',title='Distribution of count without outliers',)\nax2.set(xlabel='registered',title='Distribution of count')\n","b588b081":"yLabels=train_WithoutOutliers['count']\nyLabels_log=np.log(yLabels)\nsns.distplot(yLabels_log)","7198a6e7":"Bike_data=pd.concat([train_WithoutOutliers,test_df],ignore_index=True)\n#\u67e5\u770b\u6570\u636e\u96c6\u5927\u5c0f\nBike_data.shape","06376cda":"Bike_data.head()","d6681bae":"Bike_data['date']=Bike_data.datetime.apply( lambda c : c.split( )[0])\nBike_data['hour']=Bike_data.datetime.apply( lambda c : c.split( )[1].split(':')[0]).astype('int')\nBike_data['year']=Bike_data.datetime.apply( lambda c : c.split( )[0].split('-')[0]).astype('int')\nBike_data['month']=Bike_data.datetime.apply( lambda c : c.split( )[0].split('-')[1]).astype('int')\nBike_data['weekday']=Bike_data.date.apply( lambda c : datetime.strptime(c,'%Y-%m-%d').isoweekday())\nBike_data.head()","8c9ed9d5":"fig, axes = plt.subplots(2, 2)\nfig.set_size_inches(12,10)\n\nsns.distplot(Bike_data['temp'],ax=axes[0,0])\nsns.distplot(Bike_data['atemp'],ax=axes[0,1])\nsns.distplot(Bike_data['humidity'],ax=axes[1,0])\nsns.distplot(Bike_data['windspeed'],ax=axes[1,1])\n\naxes[0,0].set(xlabel='temp',title='Distribution of temp',)\naxes[0,1].set(xlabel='atemp',title='Distribution of atemp')\naxes[1,0].set(xlabel='humidity',title='Distribution of humidity')\naxes[1,1].set(xlabel='windspeed',title='Distribution of windspeed')","58a399fc":"# \u586b\u5145\u4e4b\u524d\u770b\u4e00\u4e0b\u975e\u96f6\u6570\u636e\u7684\u63cf\u8ff0\u7edf\u8ba1\u3002\nBike_data[Bike_data['windspeed']!=0]['windspeed'].describe()","0b3471ca":"# \u4f7f\u7528\u968f\u673a\u68ee\u6797\u586b\u5145\u98ce\u901f\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nBike_data[\"windspeed_rfr\"]=Bike_data[\"windspeed\"]\n# \u5c06\u6570\u636e\u5206\u6210\u98ce\u901f\u7b49\u4e8e0\u548c\u4e0d\u7b49\u4e8e\u4e24\u90e8\u5206\ndataWind0 = Bike_data[Bike_data[\"windspeed_rfr\"]==0]\ndataWindNot0 = Bike_data[Bike_data[\"windspeed_rfr\"]!=0]\n#\u9009\u5b9a\u6a21\u578b\nrfModel_wind = RandomForestRegressor(n_estimators=1000,random_state=42)\n# \u9009\u5b9a\u7279\u5f81\u503c\nwindColumns = [\"season\",\"weather\",\"humidity\",\"month\",\"temp\",\"year\",\"atemp\"]\n# \u5c06\u98ce\u901f\u4e0d\u7b49\u4e8e0\u7684\u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0cfit\u5230RandomForestRegressor\u4e4b\u4e2d\nrfModel_wind.fit(dataWindNot0[windColumns], dataWindNot0[\"windspeed_rfr\"])\n#\u901a\u8fc7\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u9884\u6d4b\u98ce\u901f\nwind0Values = rfModel_wind.predict(X= dataWind0[windColumns])\n#\u5c06\u9884\u6d4b\u7684\u98ce\u901f\u586b\u5145\u5230\u98ce\u901f\u4e3a\u96f6\u7684\u6570\u636e\u4e2d\ndataWind0.loc[:,\"windspeed_rfr\"] = wind0Values\n#\u8fde\u63a5\u4e24\u90e8\u5206\u6570\u636e\nBike_data = dataWindNot0.append(dataWind0)\nBike_data.reset_index(inplace=True)\nBike_data.drop('index',inplace=True,axis=1)","5641fa21":"fig, axes = plt.subplots(2, 2)\nfig.set_size_inches(12,10)\n\nsns.distplot(Bike_data['temp'],ax=axes[0,0])\nsns.distplot(Bike_data['atemp'],ax=axes[0,1])\nsns.distplot(Bike_data['humidity'],ax=axes[1,0])\nsns.distplot(Bike_data['windspeed_rfr'],ax=axes[1,1])\n\naxes[0,0].set(xlabel='temp',title='Distribution of temp',)\naxes[0,1].set(xlabel='atemp',title='Distribution of atemp')\naxes[1,0].set(xlabel='humidity',title='Distribution of humidity')\naxes[1,1].set(xlabel='windseed',title='Distribution of windspeed')","24300da8":"sns.pairplot(Bike_data ,x_vars=['holiday','workingday','weather','season',\n                                'weekday','hour','windspeed_rfr','humidity','temp','atemp'] ,\n                        y_vars=['casual','registered','count'] , plot_kws={'alpha': 0.1})\n","9c6b115b":"#\u76f8\u5173\u6027\u77e9\u9635\ncorrDf = Bike_data.corr() \n\n#ascending=False\u8868\u793a\u6309\u964d\u5e8f\u6392\u5217\ncorrDf['count'].sort_values(ascending =False)","72a6c974":"workingday_df=Bike_data[Bike_data['workingday']==1]\nworkingday_df = workingday_df.groupby(['hour'], as_index=True).agg({'casual':'mean',\n                                                                    'registered':'mean',\n                                                                    'count':'mean'})\n\nnworkingday_df=Bike_data[Bike_data['workingday']==0]\nnworkingday_df = nworkingday_df.groupby(['hour'], as_index=True).agg({'casual':'mean',\n                                                                      'registered':'mean', \n                                                                      'count':'mean'})\nfig, axes = plt.subplots(1, 2,sharey = True)\n\nworkingday_df.plot(figsize=(15,5),title = 'The average number of rentals initiated per hour in the working day',ax=axes[0])\nnworkingday_df.plot(figsize=(15,5),title = 'The average number of rentals initiated per hour in the nonworkdays',ax=axes[1])","b8f75974":"#\u6570\u636e\u6309\u5c0f\u65f6\u7edf\u8ba1\u5c55\u793a\u8d77\u6765\u592a\u9ebb\u70e6\uff0c\u5e0c\u671b\u80fd\u591f\u6309\u5929\u6c47\u603b\u53d6\u4e00\u5929\u7684\u6c14\u6e29\u4e2d\u4f4d\u6570\ntemp_df = Bike_data.groupby(['date','weekday'], as_index=False).agg({'year':'mean',\n                                                                     'month':'mean',\n                                                                     'temp':'median'})\n#\u7531\u4e8e\u6d4b\u8bd5\u6570\u636e\u96c6\u4e2d\u6ca1\u6709\u79df\u8d41\u4fe1\u606f\uff0c\u4f1a\u5bfc\u81f4\u6298\u7ebf\u56fe\u6709\u65ad\u88c2\uff0c\u6240\u4ee5\u5c06\u7f3a\u5931\u7684\u6570\u636e\u4e22\u5f03\ntemp_df.dropna ( axis = 0 , how ='any', inplace = True )\n\n#\u9884\u8ba1\u6309\u5929\u7edf\u8ba1\u7684\u6ce2\u52a8\u4ecd\u7136\u5f88\u5927\uff0c\u518d\u6309\u6708\u53d6\u65e5\u5e73\u5747\u503c\ntemp_month = temp_df.groupby(['year','month'], as_index=False).agg({'weekday':'min',\n                                                                    'temp':'median'})\n\n#\u5c06\u6309\u5929\u6c42\u548c\u7edf\u8ba1\u6570\u636e\u7684\u65e5\u671f\u8f6c\u6362\u6210datetime\u683c\u5f0f\ntemp_df['date']=pd.to_datetime(temp_df['date'])\n\n#\u5c06\u6309\u6708\u7edf\u8ba1\u6570\u636e\u8bbe\u7f6e\u4e00\u5217\u65f6\u95f4\u5e8f\u5217\ntemp_month.rename(columns={'weekday':'day'},inplace=True)\ntemp_month['date']=pd.to_datetime(temp_month[['year','month','day']])\n\n#\u8bbe\u7f6e\u753b\u6846\u5c3a\u5bf8\nfig = plt.figure(figsize=(18,6))\nax = fig.add_subplot(1,1,1)\n\n#\u4f7f\u7528\u6298\u7ebf\u56fe\u5c55\u793a\u603b\u4f53\u79df\u8d41\u60c5\u51b5\uff08count\uff09\u968f\u65f6\u95f4\u7684\u8d70\u52bf\nplt.plot(temp_df['date'] , temp_df['temp'] , linewidth=1.3 , label='Daily average')\nax.set_title('Change trend of average temperature per day in two years')\nplt.plot(temp_month['date'] , temp_month['temp'] , marker='o', linewidth=1.3 ,\n         label='Monthly average')\nax.legend()","7fb256a0":"#\u6309\u6e29\u5ea6\u53d6\u79df\u8d41\u989d\u5e73\u5747\u503c\ntemp_rentals = Bike_data.groupby(['temp'], as_index=True).agg({'casual':'mean', \n                                                               'registered':'mean',\n                                                               'count':'mean'})\ntemp_rentals .plot(title = 'The average number of rentals initiated per hour changes with the temperature')","e428946e":"humidity_df = Bike_data.groupby('date', as_index=False).agg({'humidity':'mean'})\nhumidity_df['date']=pd.to_datetime(humidity_df['date'])\n#\u5c06\u65e5\u671f\u8bbe\u7f6e\u4e3a\u65f6\u95f4\u7d22\u5f15\nhumidity_df=humidity_df.set_index('date')\n\nhumidity_month = Bike_data.groupby(['year','month'], as_index=False).agg({'weekday':'min',\n                                                                          'humidity':'mean'})\nhumidity_month.rename(columns={'weekday':'day'},inplace=True)\nhumidity_month['date']=pd.to_datetime(humidity_month[['year','month','day']])\n\nfig = plt.figure(figsize=(18,6))\nax = fig.add_subplot(1,1,1)\nplt.plot(humidity_df.index , humidity_df['humidity'] , linewidth=1.3,label='Daily average')\nplt.plot(humidity_month['date'], humidity_month['humidity'] ,marker='o', \n         linewidth=1.3,label='Monthly average')\nax.legend()\nax.set_title('Change trend of average humidity per day in two years')","bed3842d":"humidity_rentals = Bike_data.groupby(['humidity'], as_index=True).agg({'casual':'mean',\n                                                                       'registered':'mean',\n                                                                       'count':'mean'})\nhumidity_rentals .plot (title = 'Average number of rentals initiated per hour in different humidity')","4055e0fa":"#\u6570\u636e\u6309\u5c0f\u65f6\u7edf\u8ba1\u5c55\u793a\u8d77\u6765\u592a\u9ebb\u70e6\uff0c\u5e0c\u671b\u80fd\u591f\u6309\u5929\u6c47\u603b\ncount_df = Bike_data.groupby(['date','weekday'], as_index=False).agg({'year':'mean',\n                                                                      'month':'mean',\n                                                                      'casual':'sum',\n                                                                      'registered':'sum',\n                                                                       'count':'sum'})\n#\u7531\u4e8e\u6d4b\u8bd5\u6570\u636e\u96c6\u4e2d\u6ca1\u6709\u79df\u8d41\u4fe1\u606f\uff0c\u4f1a\u5bfc\u81f4\u6298\u7ebf\u56fe\u6709\u65ad\u88c2\uff0c\u6240\u4ee5\u5c06\u7f3a\u5931\u7684\u6570\u636e\u4e22\u5f03\ncount_df.dropna ( axis = 0 , how ='any', inplace = True )\n\n#\u9884\u8ba1\u6309\u5929\u7edf\u8ba1\u7684\u6ce2\u52a8\u4ecd\u7136\u5f88\u5927\uff0c\u518d\u6309\u6708\u53d6\u65e5\u5e73\u5747\u503c\ncount_month = count_df.groupby(['year','month'], as_index=False).agg({'weekday':'min',\n                                                                      'casual':'mean', \n                                                                      'registered':'mean',\n                                                                      'count':'mean'})\n\n#\u5c06\u6309\u5929\u6c42\u548c\u7edf\u8ba1\u6570\u636e\u7684\u65e5\u671f\u8f6c\u6362\u6210datetime\u683c\u5f0f\ncount_df['date']=pd.to_datetime(count_df['date'])\n\n#\u5c06\u6309\u6708\u7edf\u8ba1\u6570\u636e\u8bbe\u7f6e\u4e00\u5217\u65f6\u95f4\u5e8f\u5217\ncount_month.rename(columns={'weekday':'day'},inplace=True)\ncount_month['date']=pd.to_datetime(count_month[['year','month','day']])\n\n#\u8bbe\u7f6e\u753b\u6846\u5c3a\u5bf8\nfig = plt.figure(figsize=(18,6))\nax = fig.add_subplot(1,1,1)\n\n#\u4f7f\u7528\u6298\u7ebf\u56fe\u5c55\u793a\u603b\u4f53\u79df\u8d41\u60c5\u51b5\uff08count\uff09\u968f\u65f6\u95f4\u7684\u8d70\u52bf\nplt.plot(count_df['date'] , count_df['count'] , linewidth=1.3 , label='Daily average')\nax.set_title('Change trend of average number of rentals initiated  per day in two years')\nplt.plot(count_month['date'] , count_month['count'] , marker='o', \n         linewidth=1.3 , label='Monthly average')\nax.legend()","ca2d1a5a":"day_df=Bike_data.groupby('date').agg({'year':'mean','season':'mean',\n                                      'casual':'sum', 'registered':'sum'\n                                      ,'count':'sum','temp':'mean',\n                                      'atemp':'mean'})\nseason_df = day_df.groupby(['year','season'], as_index=True).agg({'casual':'mean', \n                                                                  'registered':'mean',\n                                                                  'count':'mean'})\ntemp_df = day_df.groupby(['year','season'], as_index=True).agg({'temp':'mean', \n                                                                'atemp':'mean'})","7efa70c4":"count_weather = Bike_data.groupby('weather')\ncount_weather[['casual','registered','count']].count()","cec2cdcb":"weather_df = Bike_data.groupby('weather', as_index=True).agg({'casual':'mean',\n                                                              'registered':'mean'})\nweather_df.plot.bar(stacked=True,title = 'Average number of rentals initiated per hour in different weather')","d58e1a67":"Bike_data[Bike_data['weather']==4]","84f72b36":"windspeed_df = Bike_data.groupby('date', as_index=False).agg({'windspeed_rfr':'mean'})\nwindspeed_df['date']=pd.to_datetime(windspeed_df['date'])\n#\u5c06\u65e5\u671f\u8bbe\u7f6e\u4e3a\u65f6\u95f4\u7d22\u5f15\nwindspeed_df=windspeed_df.set_index('date')\n\nwindspeed_month = Bike_data.groupby(['year','month'], as_index=False).agg({'weekday':'min',\n                                                                           'windspeed_rfr':'mean'})\nwindspeed_month.rename(columns={'weekday':'day'},inplace=True)\nwindspeed_month['date']=pd.to_datetime(windspeed_month[['year','month','day']])\n\nfig = plt.figure(figsize=(18,6))\nax = fig.add_subplot(1,1,1)\nplt.plot(windspeed_df.index , windspeed_df['windspeed_rfr'] , linewidth=1.3,label='Daily average')\nplt.plot(windspeed_month['date'], windspeed_month['windspeed_rfr'] ,\n         marker='o', linewidth=1.3,label='Monthly average')\nax.legend()\nax.set_title('Change trend of average number of windspeed  per day in two years')","7799a8dd":"windspeed_rentals = Bike_data.groupby(['windspeed'], as_index=True).agg({'casual':'max', \n                                                                         'registered':'max',\n                                                                         'count':'max'})\nwindspeed_rentals .plot(title = 'Max number of rentals initiated per hour in different windspeed')","2a479574":"df2=Bike_data[Bike_data['windspeed']>40]\ndf2=df2[df2['count']>400]\ndf2","ef557157":"day_df = Bike_data.groupby(['date'], as_index=False).agg({'casual':'sum','registered':'sum',\n                                                          'count':'sum', 'workingday':'mean',\n                                                          'weekday':'mean','holiday':'mean',\n                                                          'year':'mean'})\nday_df.head()","8afb37b4":"number_pei=day_df[['casual','registered']].mean()\nnumber_pei","26888b68":"plt.axes(aspect='equal')  \nplt.pie(number_pei, labels=['casual','registered'], autopct='%1.1f%%', \n        pctdistance=0.6 , labeldistance=1.05 , radius=1 )  \nplt.title('Casual or registered in the total lease')\n","595e9301":"workingday_df=day_df.groupby(['workingday'], as_index=True).agg({'casual':'mean', \n                                                                 'registered':'mean'})\nworkingday_df_0 = workingday_df.loc[0]\nworkingday_df_1 = workingday_df.loc[1]\n\n# plt.axes(aspect='equal')\nfig = plt.figure(figsize=(8,6)) \nplt.subplots_adjust(hspace=0.5, wspace=0.2)     #\u8bbe\u7f6e\u5b50\u56fe\u8868\u95f4\u9694\ngrid = plt.GridSpec(2, 2, wspace=0.5, hspace=0.5)   #\u8bbe\u7f6e\u5b50\u56fe\u8868\u5750\u6807\u8f74 \u5bf9\u9f50\n\nplt.subplot2grid((2,2),(1,0), rowspan=2)\nwidth = 0.3       # \u8bbe\u7f6e\u6761\u5bbd\n\np1 = plt.bar(workingday_df.index,workingday_df['casual'], width)\np2 = plt.bar(workingday_df.index,workingday_df['registered'], \n             width,bottom=workingday_df['casual'])\nplt.title('Average number of rentals initiated per day')\nplt.xticks([0,1], ('nonworking day', 'working day'),rotation=20)\nplt.legend((p1[0], p2[0]), ('casual', 'registered'))\n\nplt.subplot2grid((2,2),(0,0))\nplt.pie(workingday_df_0, labels=['casual','registered'], autopct='%1.1f%%', \n        pctdistance=0.6 , labeldistance=1.35 , radius=1.3)\nplt.axis('equal') \nplt.title('nonworking day')\n\nplt.subplot2grid((2,2),(0,1))\nplt.pie(workingday_df_1, labels=['casual','registered'], autopct='%1.1f%%', \n        pctdistance=0.6 , labeldistance=1.35 , radius=1.3)\nplt.title('working day')\nplt.axis('equal')","3542e011":"weekday_df= day_df.groupby(['weekday'], as_index=True).agg({'casual':'mean', 'registered':'mean'})\nweekday_df.plot.bar(stacked=True , title = 'Average number of rentals initiated per day by weekday')\n\n","f8bb9672":"holiday_coun=day_df.groupby('year', as_index=True).agg({'holiday':'sum'})\nholiday_coun","389fddae":"holiday_df = day_df.groupby('holiday', as_index=True).agg({'casual':'mean', 'registered':'mean'})\nholiday_df.plot.bar(stacked=True , title = 'Average number of rentals initiated per day by holiday or not')\n","9819f4c4":"dummies_month = pd.get_dummies(Bike_data['month'], prefix= 'month')\ndummies_season=pd.get_dummies(Bike_data['season'],prefix='season')\ndummies_weather=pd.get_dummies(Bike_data['weather'],prefix='weather')\ndummies_year=pd.get_dummies(Bike_data['year'],prefix='year')\n#\u628a5\u4e2a\u65b0\u7684DF\u548c\u539f\u6765\u7684\u8868\u8fde\u63a5\u8d77\u6765\nBike_data=pd.concat([Bike_data,dummies_month,dummies_season,dummies_weather,dummies_year],axis=1)","55a8bbad":"dataTrain = Bike_data[pd.notnull(Bike_data['count'])]\ndataTest= Bike_data[~pd.notnull(Bike_data['count'])].sort_values(by=['datetime'])\ndatetimecol = dataTest['datetime']\nyLabels=dataTrain['count']\nyLabels_log=np.log(yLabels)\n","106472e8":"# \u628a\u4e0d\u8981\u7684\u5217\u4e22\u5f03\ndropFeatures = ['casual' , 'count' , 'datetime' , 'date' , 'registered' ,\n                'windspeed' , 'atemp' , 'month','season','weather', 'year' ]\n\ndataTrain = dataTrain.drop(dropFeatures , axis=1)\ndataTest = dataTest.drop(dropFeatures , axis=1)","a8feae61":"rfModel = RandomForestRegressor(n_estimators=1000 , random_state = 42)\n\nrfModel.fit(dataTrain , yLabels_log)\n\npreds = rfModel.predict( X = dataTrain)","3613ba9d":"predsTest= rfModel.predict(X = dataTest)\n\nsubmission=pd.DataFrame({'datetime':datetimecol , 'count':[max(0,x) for x in np.exp(predsTest)]})\n\nsubmission.to_csv('bicycle_predictions.csv',index=False)","0b7ee2af":"\u628adatetime\u62c6\u5206\u6210\u6210\u65e5\u671f\u3001\u65f6\u6bb5\u3001\u5e74\u4efd\u3001\u6708\u4efd\u3001\u661f\u671f\u4e94\u5217","14b0ed8a":"- 1.\u5de5\u4f5c\u65e5\uff1a\u7531\u4e8e\u5de5\u4f5c\u65e5\u548c\u4f11\u606f\u65e5\u7684\u5929\u6570\u5dee\u522b\uff0c\u5bf9\u5de5\u4f5c\u65e5\u548c\u975e\u5de5\u4f5c\u65e5\u79df\u8d41\u6570\u91cf\u53d6\u4e86\u5e73\u5747\u503c\uff0c\u5bf9\u4e00\u5468\u4e2d\u6bcf\u5929\u7684\u79df\u8d41\u6570\u91cf\u6c42\u548c","df972012":"- \u65e0\u8bba\u662f\u4e34\u65f6\u7528\u6237\u8fd8\u662f\u4f1a\u5458\u7528\u6237\u7528\u8f66\u7684\u6570\u91cf\u90fd\u5728\u79cb\u5b63\u8fce\u6765\u9ad8\u5cf0\uff0c\u800c\u6625\u5b63\u5ea6\u7528\u6237\u6570\u91cf\u6700\u4f4e\n\n- 3.2.6 \u5929\u6c14\u60c5\u51b5\u5bf9\u51fa\u884c\u60c5\u51b5\u7684\u5f71\u54cd","d084b2ce":"- \u901a\u8fc7\u4e0a\u9762\u4e24\u4e2a\u56fe\u53ef\u4ee5\u53d1\u73b0\uff1a\n\n    - 1.\u5de5\u4f5c\u65e5\u4f1a\u5458\u7528\u6237\u51fa\u884c\u6570\u91cf\u8f83\u591a\uff0c\u4e34\u65f6\u7528\u6237\u51fa\u884c\u6570\u91cf\u8f83\u5c11\uff1b\n    - 2.\u5468\u672b\u4f1a\u5458\u7528\u6237\u79df\u8d41\u6570\u91cf\u964d\u4f4e\uff0c\u4e34\u65f6\u7528\u6237\u79df\u8d41\u6570\u91cf\u589e\u52a0\u3002\n\n\n- 2.\u8282\u5047\u65e5","01b1bd3b":"- \u95ee\u9898\uff1a\n    - 1.\u5171\u4eab\u5355\u8f66\u7684\u79df\u8d41\u60c5\u51b52012\u5e74\u6574\u4f53\u662f\u6bd42011\u5e74\u6709\u589e\u6da8\u7684\uff1b\n    - 2.\u79df\u8d41\u60c5\u51b5\u968f\u6708\u4efd\u6ce2\u52a8\u660e\u663e\uff1b3.\u6570\u636e\u57282011\u5e749\u523012\u6708\uff0c2012\u5e743\u52309\u6708\u95f4\u6ce2\u52a8\u5267\u70c8\uff1b\n    - 3.\u6709\u5f88\u591a\u5c40\u90e8\u6ce2\u8c37\u503c\u3002\n\n- 3.2.5 \u5b63\u8282\u5bf9\u51fa\u884c\u4eba\u6570\u7684\u5f71\u54cd\n\n","31bbedff":"### 1.\u7b80\u4ecb    \n- 1.1 \u6570\u636e\u8bf4\u660e       \n- 1.2 \u89e3\u51b3\u95ee\u9898    \n- 1.2 \u53d8\u91cf\u8bf4\u660e\n\n### 2.\u6570\u636e\u6e05\u6d17   \n- 2.1 \u68c0\u67e5\u7f3a\u5931\u503c   \n- 2.2 \u68c0\u67e5\u5e76\u5904\u7406\u5f02\u5e38\u503c\n\n### 3 \u5206\u6790\u6570\u636e   \n- 3.1 \u6574\u4f53\u89c2\u5bdf    \n- 3.2 \u53ef\u89c6\u5316\n    \n### 4 \u9009\u62e9\u7279\u5f81\u503c\n### 5. \u9009\u62e9\u6a21\u578b\u3001\u8bad\u7ec3\u6a21\u578b\n### 6. \u9884\u6d4b\u6d4b\u8bd5\u96c6\u6570\u636e\n\n","a77e477a":"- \u95ee\u9898\uff1a\n    - 1.\u5de5\u4f5c\u65e5\u5bf9\u4e8e\u4f1a\u5458\u7528\u6237\u4e0a\u4e0b\u73ed\u65f6\u95f4\u662f\u4e24\u4e2a\u7528\u8f66\u9ad8\u5cf0\uff0c\u800c\u4e2d\u5348\u4e5f\u4f1a\u6709\u4e00\u4e2a\u5c0f\u9ad8\u5cf0\uff0c\u731c\u6d4b\u53ef\u80fd\u662f\u5916\u51fa\u5348\u9910\u7684\u4eba\uff1b \n    - 2.\u800c\u5bf9\u4e34\u65f6\u7528\u6237\u8d77\u4f0f\u6bd4\u8f83\u5e73\u7f13\uff0c\u9ad8\u5cf0\u671f\u572817\u70b9\u5de6\u53f3\n    - 3.\u5e76\u4e14\u4f1a\u5458\u7528\u6237\u7684\u7528\u8f66\u6570\u91cf\u8fdc\u8d85\u8fc7\u4e34\u65f6\u7528\u6237\u3002\n    - 4.\u5bf9\u975e\u5de5\u4f5c\u65e5\u800c\u8a00\u79df\u8d41\u6570\u91cf\u968f\u65f6\u95f4\u5448\u73b0\u4e00\u4e2a\u6b63\u6001\u5206\u5e03\uff0c\u9ad8\u5cf0\u572814\u70b9\u5de6\u53f3\uff0c\u4f4e\u8c37\u57284\u70b9\u5de6\u53f3\uff0c\u4e14\u5206\u5e03\u6bd4\u8f83\u5747\u5300\u3002\n\n\n- 3.2.2 \u6e29\u5ea6\u5bf9\u79df\u8d41\u6570\u91cf\u7684\u5f71\u54cd","a19ce6db":"\n### 1.1  \u9879\u76ee\u8bf4\u660e\n\u81ea\u884c\u8f66\u5171\u4eab\u7cfb\u7edf\u662f\u4e00\u79cd\u79df\u8d41\u81ea\u884c\u8f66\u7684\u65b9\u6cd5\uff0c\u6ce8\u518c\u4f1a\u5458\u3001\u79df\u8f66\u3001\u8fd8\u8f66\u90fd\u5c06\u901a\u8fc7\u57ce\u5e02\u4e2d\u7684\u7ad9\u70b9\u7f51\u7edc\u81ea\u52a8\u5b8c\u6210\uff0c\u901a\u8fc7\u8fd9\u4e2a\u7cfb\u7edf\u4eba\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4ece\u4e00\u4e2a\u5730\u65b9\u79df\u8d41\u4e00\u8f86\u81ea\u884c\u8f66\u7136\u540e\u9a91\u5230\u81ea\u5df1\u7684\u76ee\u7684\u5730\u5f52\u8fd8\u3002\u5728\u8fd9\u6b21\u6bd4\u8d5b\u4e2d\uff0c\u53c2\u4e0e\u8005\u9700\u8981\u7ed3\u5408\u5386\u53f2\u5929\u6c14\u6570\u636e\u4e0b\u7684\u4f7f\u7528\u6a21\u5f0f\uff0c\u6765\u9884\u6d4bD.C.\u534e\u76db\u987f\u9996\u90fd\u81ea\u884c\u8f66\u5171\u4eab\u9879\u76ee\u7684\u81ea\u884c\u8f66\u79df\u8d41\u9700\u6c42\u3002\n### 1.2  \u6570\u636e\u5185\u5bb9\u8bf4\u660e\n\u6bd4\u8d5b\u63d0\u4f9b\u4e86\u8de8\u8d8a\u4e24\u5e74\u7684\u6bcf\u5c0f\u65f6\u79df\u8d41\u6570\u636e\uff0c\u5305\u542b\u5929\u6c14\u4fe1\u606f\u548c\u65e5\u671f\u4fe1\u606f\uff0c\u8bad\u7ec3\u96c6\u7531\u6bcf\u6708\u524d19\u5929\u7684\u6570\u636e\u7ec4\u6210\uff0c\u6d4b\u8bd5\u96c6\u662f\u6bcf\u6708\u7b2c\u4e8c\u5341\u5929\u5230\u5f53\u6708\u5e95\u7684\u6570\u636e\u3002\n### 1.3 \u63d0\u51fa\u95ee\u9898\n\u901a\u8fc7\u6d4b\u8bd5\u96c6\u4e2d\u7684\u5929\u6c14\u7b49\u7279\u5f81\u503c\u9884\u6d4b\u4f1a\u5458\u79df\u8d41\u6570\u91cf\uff0c\u4e34\u65f6\u79df\u8d41\u6570\u91cf\u548c\u603b\u79df\u8d41\u6570\u91cf\u3002\n### 1.4  \u53d8\u91cf\u8bf4\u660e\n- datetime\uff08\u65e5\u671f\uff09: hourly date + timestamp \n- season\uff08\u5b63\u8282\uff09:  1 = spring, 2 = summer, 3 = fall, 4 = winter \n- holiday\uff08\u662f\u5426\u5047\u65e5\uff09: whether the day is considered a holiday\n- workingday\uff08\u662f\u5426\u5de5\u4f5c\u65e5\uff09 :whether the day is neither a weekend nor holiday\n- weather\uff08\u5929\u6c14\u7b49\u7ea7\uff09:\n    - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n    - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n    - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n    - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n- temp\uff08\u6e29\u5ea6\uff09 : temperature in Celsius\n- atemp\uff08\u4f53\u611f\u6e29\u5ea6\uff09 : \"feels like\" temperature in Celsius\n- humidity\uff08\u76f8\u5bf9\u6e7f\u5ea6\uff09 : relative humidity\n- windspeed\uff08\u98ce\u901f\uff09: wind speed\n- casual\uff08\u4e34\u65f6\u79df\u8d41\u6570\u91cf\uff09: number of non-registered user rentals initiated\n- registered\uff08\u4f1a\u5458\u79df\u8d41\u6570\u91cf\uff09: number of registered user rentals initiated\n- count\uff08\u603b\u79df\u8d41\u6570\u91cf\uff09: number of total rentals","ab02515b":"- \u53ef\u4ee5\u89c2\u5bdf\u5230\u5728\u6e7f\u5ea620\u5de6\u53f3\u79df\u8d41\u6570\u91cf\u8fc5\u901f\u8fbe\u5230\u9ad8\u5cf0\u503c\uff0c\u6b64\u540e\u7f13\u6162\u9012\u51cf\u3002\n\n\n\n- 3.2.4 \u5e74\u4efd\u3001\u6708\u4efd\u5bf9\u79df\u8d41\u6570\u91cf\u7684\u5f71\u54cd","029809f1":"### 4. \u9009\u62e9\u7279\u5f81\u503c\u6839\u636e\u524d\u9762\u7684\u89c2\u5bdf\uff0c\n\u5c06\u65f6\u6bb5\uff08hour\uff09\u3001\u6e29\u5ea6\uff08temp\uff09\u3001\u6e7f\u5ea6\uff08humidity\uff09\u3001\u5e74\u4efd\uff08year\uff09\u3001\u6708\u4efd\uff08month\uff09\u3001\u5b63\u8282\uff08season\uff09\u3001\u5929\u6c14\u7b49\u7ea7\uff08weather\uff09\u3001\u98ce\u901f\uff08windspeed_rfr\uff09\u3001\u661f\u671f\u51e0\uff08weekday\uff09\u3001\u662f\u5426\u5de5\u4f5c\u65e5\uff08workingday\uff09\u3001\u662f\u5426\u5047\u65e5\uff08holiday\uff09\uff0c11\u9879\u4f5c\u4e3a\u7279\u5f81\u503c\u7531\u4e8eCART\u51b3\u7b56\u6811\u4f7f\u7528\u4e8c\u5206\u7c7b\uff0c\u6240\u4ee5\u5c06\u591a\u7c7b\u522b\u578b\u6570\u636e\u4f7f\u7528one-hot\u8f6c\u5316\u6210\u591a\u4e2a\u4e8c\u5206\u578b\u7c7b\u522b\n\n","f35adf13":"- \u95ee\u9898\uff1a\u53ef\u89c2\u5bdf\u5230\u968f\u6c14\u6e29\u4e0a\u5347\u79df\u8f66\u6570\u91cf\u603b\u4f53\u5448\u73b0\u4e0a\u5347\u8d8b\u52bf\uff0c\u4f46\u5728\u6c14\u6e29\u8d85\u8fc735\u65f6\u5f00\u59cb\u4e0b\u964d\uff0c\u5728\u6c14\u6e294\u5ea6\u65f6\u8fbe\u5230\u6700\u4f4e\u70b9\u3002\n\n\n- 3.2.3 \u6e7f\u5ea6\u5bf9\u79df\u8d41\u6570\u91cf\u7684\u5f71\u54cd","59abc115":"\u53ef\u4ee5\u770b\u5230\u79df\u8d41\u6570\u91cf\u968f\u98ce\u901f\u8d8a\u5927\u79df\u8d41\u6570\u91cf\u8d8a\u5c11\uff0c\u5728\u98ce\u901f\u8d85\u8fc730\u7684\u65f6\u5019\u660e\u663e\u51cf\u5c11\uff0c\u4f46\u98ce\u901f\u5728\u98ce\u901f40\u5de6\u53f3\u5374\u6709\u4e00\u6b21\u53cd\u5f39\uff0c\u5e94\u8be5\u662f\u548c\u5929\u6c14\u60c5\u51b5\u4e00\u6837\u5b58\u5728\u5f02\u5e38\u7684\u6570\u636e\uff0c\u6253\u5370\u5f02\u5e38\u6570\u636e\u89c2\u5bdf\u4e00\u4e0b","f6132fed":"- \u4e5f\u662f\u4e00\u4e2a\u4e0b\u73ed\u9ad8\u5cf0\u7684\u5f02\u5e38\u503c\n\n\n\n- 3.2.8 \u65e5\u671f\u5bf9\u51fa\u884c\u7684\u5f71\u54cd","e3f43f09":"\u89c2\u5bdftemp\uff08\u6e29\u5ea6\uff09\uff0catemp\uff08\u4f53\u611f\u6e29\u5ea6\uff09\uff0chumidity\uff08\u6e7f\u5ea6\uff09\u3001windspeed\uff08\u98ce\u901f\uff09\u8fd9\u56db\u5217\u6570\u503c\u578b\u6570\u636e\u7684\u5206\u5e03\u3002","e7bee316":"- \u95ee\u9898\uff1a\u901a\u8fc7\u8fd9\u4e2a\u5206\u5e03\u53ef\u4ee5\u53d1\u73b0\uff1a\u98ce\u901f\u4e3a0\u7684\u6570\u636e\u5f88\u591a\uff0c\u800c\u89c2\u5bdf\u7edf\u8ba1\u63cf\u8ff0\u53d1\u73b0\u7a7a\u7f3a\u503c\u57281--6\u4e4b\u95f4\uff0c\u4ece\u8fd9\u91cc\u4f3c\u4e4e\u53ef\u4ee5\u63a8\u6d4b\uff0c\u6570\u636e\u672c\u8eab\u6216\u8bb8\u662f\u6709\u7f3a\u5931\u503c\u7684\uff0c\u4f46\u662f\u75280\u6765\u586b\u5145\u4e86\uff0c\u4f46\u8fd9\u4e9b\u98ce\u901f\u4e3a0\u7684\u6570\u636e\u4f1a\u5bf9\u9884\u6d4b\u4ea7\u751f\u5e72\u6270\uff0c\n- \u65b9\u6cd5\uff1a\n\u4f7f\u7528\u968f\u673a\u68ee\u6797\u6839\u636e\u76f8\u540c\u7684\u5e74\u4efd\uff0c\u6708\u4efd\uff0c\u5b63\u8282\uff0c\u6e29\u5ea6\uff0c\u6e7f\u5ea6\u7b49\u51e0\u4e2a\u7279\u5f81\u6765\u586b\u5145\u4e00\u4e0b\u98ce\u901f\u7684\u7f3a\u5931\u503c\u3002","94c2f29f":"\u586b\u5145\u597d\u518d\u753b\u56fe\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u56db\u4e2a\u7279\u5f81\u503c\u7684\u5bc6\u5ea6\u5206\u5e03","34cbc686":"\u5047\u671f\u7684\u5929\u6570\u5360\u4e00\u5e74\u5929\u6570\u7684\u4efd\u989d\u5341\u5206\u5c11\uff0c\u6240\u4ee5\u5bf9\u5047\u671f\u548c\u975e\u5047\u671f\u53d6\u65e5\u5e73\u5747\u503c","65fbf0b4":"\u89c2\u5bdf\u5230\u5929\u6c14\u7b49\u7ea74\u7684\u65f6\u5019\u51fa\u884c\u4eba\u6570\u5e76\u4e0d\u5c11\uff0c\u5c24\u5176\u662f\u4f1a\u5458\u51fa\u884c\u4eba\u6570\u751a\u81f3\u6bd4\u5929\u6c14\u7b49\u7ea72\u7684\u5e73\u5747\u503c\u8fd8\u9ad8\uff1f\uff1f\uff1f\n","4e9e8e08":"### 3.\u5206\u6790\u6570\u636e\uff1a\n\u53ef\u89c6\u5316\u5e76\u89c2\u5bdf\u6570\u636e\n\n- 3.1 \u6574\u4f53\u89c2\u5bdf","c17db9f4":"- \u53d1\u73b0\u95ee\u9898:\n\n    - 1.\u4f1a\u5458\u5728\u5de5\u4f5c\u65e5\u51fa\u884c\u591a\uff0c\u8282\u5047\u65e5\u51fa\u884c\u5c11\uff0c\u4e34\u65f6\u7528\u6237\u5219\u76f8\u53cd\uff1b\n    - 2.\u4e00\u5b63\u5ea6\u51fa\u884c\u4eba\u6570\u603b\u4f53\u504f\u5c11\uff1b\n    - 3.\u79df\u8d41\u6570\u91cf\u968f\u5929\u6c14\u7b49\u7ea7\u4e0a\u5347\u800c\u51cf\u5c11\uff1b\n    - 4.\u5c0f\u65f6\u6570\u5bf9\u79df\u8d41\u60c5\u51b5\u5f71\u54cd\u660e\u663e\uff0c\u4f1a\u5458\u5448\u73b0\u4e24\u4e2a\u9ad8\u5cf0\uff0c\u975e\u4f1a\u5458\u5448\u73b0\u4e00\u4e2a\u6b63\u6001\u5206\u5e03\uff1b\n    - 5.\u79df\u8d41\u6570\u91cf\u968f\u98ce\u901f\u589e\u5927\u800c\u51cf\u5c11\uff1b\n    - 6.\u6e29\u5ea6\u3001\u6e7f\u5ea6\u5bf9\u975e\u4f1a\u5458\u5f71\u54cd\u6bd4\u8f83\u5927\uff0c\u5bf9\u4f1a\u5458\u5f71\u54cd\u8f83\u5c0f\n    \n\u5404\u4e2a\u7279\u5f81\u4e0e\u6bcf\u5c0f\u65f6\u79df\u8f66\u603b\u91cf\uff08count\uff09\u7684\u76f8\u5173\u6027\uff0c \u7531\u4e8e\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\u7279\u5f81\u503c\u4e0e\u79df\u8f66\u6570\u91cf\u57fa\u672c\u662f\u7ebf\u6027\u76f8\u5173\uff0c\u6240\u4ee5\u6c42\u4ed6\u4eec\u7684\u7ebf\u6027\u76f8\u5173\u7cfb\u6570","7abac7a0":"\u53ef\u4ee5\u770b\u51fa\u7279\u5f81\u503c\u5bf9\u79df\u8d41\u6570\u91cf\u7684\u5f71\u54cd\u529b\u5ea6\u4e3a,\u65f6\u6bb5>\u6e29\u5ea6>\u6e7f\u5ea6>\u5e74\u4efd>\u6708\u4efd>\u5b63\u8282>\u5929\u6c14\u7b49\u7ea7>\u98ce\u901f>\u661f\u671f\u51e0>\u662f\u5426\u5de5\u4f5c\u65e5>\u662f\u5426\u5047\u65e5\uff0c\u63a5\u4e0b\u6765\u518d\u770b\u4e00\u4e0b\u5171\u4eab\u5355\u8f66\u6574\u4f53\u4f7f\u7528\u60c5\u51b5\u3002\n\n\n\n#### 3.2 \u9010\u9879\u5c55\u793a\n\n- 3.2.1 \u65f6\u6bb5\u5bf9\u79df\u8d41\u6570\u91cf\u7684\u5f71\u54cd","3e989b66":"\u53ef\u4ee5\u770b\u51fa\u98ce\u901f\u57282011\u5e749\u6708\u4efd\u548c2011\u5e7412\u6708\u52302012\u5e743\u6708\u4efd\u95f4\u6ce2\u52a8\u548c\u5927\uff0c\u89c2\u5bdf\u4e00\u4e0b\u79df\u8d41\u4eba\u6570\u968f\u98ce\u901f\u53d8\u5316\u8d8b\u52bf\uff0c\u8003\u8651\u5230\u98ce\u901f\u7279\u522b\u5927\u7684\u65f6\u5019\u5f88\u5c11\uff0c\u5982\u679c\u53d6\u5e73\u5747\u503c\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u6240\u4ee5\u6309\u98ce\u901f\u5bf9\u79df\u8d41\u6570\u91cf\u53d6\u6700\u5927\u503c\u3002","d892551b":"\u6309\u6e7f\u5ea6\u5bf9\u79df\u8d41\u6570\u91cf\u53d6\u5e73\u5747\u503c\u3002","778b4947":"- \u95ee\u9898\uff1a\u53ef\u4ee5\u770b\u51fa\u6bcf\u5e74\u7684\u6c14\u6e29\u8d8b\u52bf\u76f8\u540c\u968f\u6708\u4efd\u53d8\u5316\uff0c\u57287\u6708\u4efd\u6c14\u6e29\u6700\u9ad8\uff0c1\u6708\u4efd\u6c14\u6e29\u6700\u4f4e\uff0c\u518d\u770b\u4e00\u4e0b\u6bcf\u5c0f\u65f6\u5e73\u5747\u79df\u8d41\u6570\u91cf\u968f\u6e29\u5ea6\u53d8\u5316\u7684\u8d8b\u52bf","028fa7bb":"## 5. \u9009\u62e9\u6a21\u578b\u3001\u8bad\u7ec3\u6a21\u578b","7252568c":"\u53d1\u73b0\u6570\u636ecount\u7279\u5f81\u5bc6\u5ea6\u5206\u5e03\u7684\u504f\u659c\u6bd4\u8f83\u4e25\u91cd\uff0c\u4e14\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u5c3e\uff0c\u6240\u4ee5\u628a\u8fd9\u4e00\u5217\u6570\u636e\u7684\u957f\u5c3e\u5904\u7406\uff0c\u9009\u62e9\u6392\u9664\u63893\u4e2a\u6807\u51c6\u5dee\u4ee5\u5916\u7684\u6570\u636e","413a4600":"- \u56e0\u4e3a\u8fd9\u6761\u6570\u636e\u5728\u4e0a\u4e0b\u73ed\u9ad8\u5cf0\u671f\uff0c\u6240\u4ee5\u786e\u5b9e\u662f\u4e00\u4e2a\u5f02\u5e38\u6570\u636e\n\n\n\n- 3.2.7 \u98ce\u901f\u5bf9\u51fa\u884c\u60c5\u51b5\u7684\u5f71\u54cd\n","a0ddb309":"## 6. \u9884\u6d4b\u6d4b\u8bd5\u96c6\u6570\u636e","0dd04380":"### 2.\u6570\u636e\u6e05\u6d17\n- 2.1 \u68c0\u67e5\u7f3a\u5931\u503c"}}