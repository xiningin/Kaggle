{"cell_type":{"37922697":"code","61648be3":"code","326b7915":"code","48a0ada9":"code","bc6907bc":"code","83af2e65":"code","749781af":"code","44aafc1e":"code","0c20d1fc":"code","876b4465":"code","9e2ddc97":"code","c2f5f2fc":"code","c2311c41":"code","4031d6d5":"code","edb5f0b5":"code","a48e58a2":"code","45adb784":"code","80df9dec":"code","e3963697":"code","7493e8ee":"code","863392d6":"code","1d479d14":"code","98ad912d":"code","958ae71b":"code","9d28fc22":"code","3d2c9ec7":"code","9e527f01":"code","99c534bf":"code","305d516c":"code","8486a68b":"code","ac7c0ae6":"code","8778d5e0":"code","55fdc952":"code","dbc15955":"code","ba6b9cec":"code","4bbc9580":"code","48bd3032":"code","72d2bda4":"code","42f90449":"code","e69e3c0a":"code","69bfcb20":"code","ec11e64b":"code","befc9886":"code","17ee8e85":"code","af896885":"code","4d2d64ba":"code","4701b539":"markdown","823201ff":"markdown","1ef8057a":"markdown","c278966d":"markdown","cd5e85de":"markdown","1aaa97f3":"markdown","75984fc4":"markdown","35e9bf6f":"markdown","6af23a02":"markdown","561041a9":"markdown","78c3f0e6":"markdown","3fc0d07a":"markdown","87ffe3cb":"markdown","4e2cb013":"markdown","28ecae10":"markdown","b47bede5":"markdown","07e39a61":"markdown","8d3374f3":"markdown","af32ec6b":"markdown","a689da46":"markdown","316c5065":"markdown","c6bc008c":"markdown","fad0ce73":"markdown","5b2f8a0c":"markdown","cc8d1d48":"markdown","4286a564":"markdown","d7c50015":"markdown","b100a05c":"markdown","6124655e":"markdown","b11c9153":"markdown"},"source":{"37922697":"import pandas as pd\nfrom tqdm import tqdm\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nimport numpy as np\nimport unidecode\nimport string\n\n# Libraries for text preprocessing\nimport re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import RegexpTokenizer\nnltk.download('wordnet') \nfrom nltk.stem.wordnet import WordNetLemmatizer\n\n#Word cloud\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport re\n\n#Barplot of most freq Bi-grams\nimport seaborn as sns\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\n\nfrom scipy.sparse import coo_matrix\n\n#removing html tags and text\nfrom lxml import html\n\n# getting ngrams\nimport nltk\nfrom nltk import word_tokenize\nfrom nltk.util import ngrams\nfrom collections import Counter\nimport collections\n\n#nlp\nfrom textblob import TextBlob\n\n#nlp-spacy\nimport spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()\n\nimport glob\nimport json\nimport tqdm\n\nimport csv\nimport requests \nfrom bs4 import BeautifulSoup\nfrom bs4.element import Comment\nimport urllib.request\n\nimport difflib\nfrom fuzzywuzzy import fuzz \nfrom fuzzywuzzy import process \n\n#import libraries specific to below code\n\nimport re, nltk, spacy, gensim\n\n\n# Sklearn\nfrom sklearn.decomposition import LatentDirichletAllocation, TruncatedSVD\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.model_selection import GridSearchCV\nfrom pprint import pprint\n\n# Plotting tools\nimport pyLDAvis\nimport pyLDAvis.sklearn\nimport matplotlib.pyplot as plt\n%matplotlib inline","61648be3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","326b7915":"!ls \/kaggle\/input\/CORD-19-research-challenge\/","48a0ada9":"root_path = '\/kaggle\/input\/CORD-19-research-challenge\/'\nmetadata_path = f'{root_path}\/metadata.csv'\nmeta_df = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv')\nmeta_df.head()","bc6907bc":"len(meta_df)","83af2e65":"# subset the meta_df \n\nmeta_df = meta_df.head(5000)\nmeta_df","749781af":"meta_df.abstract","44aafc1e":"meta_df.info()","0c20d1fc":"meta_df = meta_df[meta_df['abstract'].notna()]\nmeta_df = meta_df.reset_index()\nmeta_df","876b4465":"print (meta_df.shape)","9e2ddc97":"meta_df['abstract'].describe(include='all')","c2f5f2fc":"meta_df.drop_duplicates(['abstract'], inplace=True)\nmeta_df['abstract'].describe(include='all')","c2311c41":"stop_words = set(stopwords.words('english'))\n\n\n# pos_words and extend words are some common words to be removed from abstract\n\npos_words = ['highest','among','either','seven','six','plus','strongest','worst','greatest','every','better','per','across','throughout','except','fewer','trillion','fewest','latest','least','manifest','unlike','eight','since','toward','largest','despite','via','finest','besides','easiest','must','million','oldest','behind','outside','smaller','nest','longest','whatever','stronger','worse','two','another','billion','best','near','nine','around','nearest','wechat','lowest','smallest','along','higher','three','older','greater','neither','inside','newest','lower','may','although','though','earlier','upon','five','ca','larger','us','whether','beyond','onto','might','one','out','unless','four','whose','can','fastest','without','ecobooth','broadest','easier','within','like', 'could','biggest','bigger','would','thereby','yet','timely','thus','also','avoid','know','usually','time','year','go','welcome','even','date']\nextend_words =['used', 'following', 'go', 'instead', 'fundamentally', 'first', 'second', 'alone', 'everything', 'end', 'also', 'year', 'made', 'many', 'towards', 'truly', 'last', 'often', 'called', 'new', 'date', 'fully', 'thus', 'new', 'include', 'http', 'www','doi', 'preprint', 'copyright', 'peer', 'reviewed', 'org', 'https', 'et', 'al', 'author', 'figure','rights', 'reserved', 'permission', 'used', 'using', 'biorxiv', 'medrxiv', 'license', 'fig', 'fig.', 'al.', 'Elsevier', 'PMC', 'CZI','-PRON-']\n\npos_words.extend(extend_words)\npos_words\nstop_words = stop_words.union(pos_words)\n\ndef text_preprocess(text):\n    lemma = nltk.wordnet.WordNetLemmatizer()\n    \n    #Convert to lower\n    text = text.lower()\n    \n    #remove tags\n    text=re.sub(\"&lt;\/?.*?&gt;\",\" &lt;&gt; \",text)\n\n    # remove special characters and digits\n    text=re.sub(\"(\\\\d|\\\\W)+\",\" \",text)\n    \n    #Remove accented characters\n    text = unidecode.unidecode(text)\n    \n    #Remove punctuation\n    table = str.maketrans('', '', string.punctuation)\n    text = [w.translate(table) for w in text.split()]\n    \n    lemmatized = []\n    #Lemmatize non-stop words and save\n    other_words = ['virus','study','viral','human','infection'] # common words to remove specific to these articles\n    for word in text:\n        if word not in stop_words:\n            x = lemma.lemmatize(word)\n            if x not in other_words:\n                lemmatized.append(x)\n   \n    result = \" \".join(lemmatized)\n    return result","4031d6d5":"print(meta_df.abstract[0])\n\nprint (meta_df.processed_abstract[0])","edb5f0b5":"meta_df['processed_abstract'] = meta_df['abstract'].apply(text_preprocess)","a48e58a2":"# Converting processed_abstract into list \n\ndocs_raw = meta_df[\"processed_abstract\"].tolist() ","45adb784":"\n#Convert to document-term matrix\n\ntf_vectorizer = CountVectorizer(strip_accents = 'unicode',\n                                stop_words = 'english',\n                                lowercase = True,\n                                token_pattern = r'\\b[a-zA-Z]{3,}\\b',\n                                max_df = 0.5, \n                                min_df = 10)\ndtm_tf = tf_vectorizer.fit_transform(docs_raw)\nprint(dtm_tf.shape)","80df9dec":"print (tf_vectorizer.get_params())\n\n#(38666, 14273)\n\n#(38666, 80928)","e3963697":"#tfidf_vectorizer = TfidfVectorizer(**tf_vectorizer.get_params())\ntfidf_vectorizer = TfidfVectorizer(use_idf=True)\ndtm_tfidf = tfidf_vectorizer.fit_transform(docs_raw)\nprint(dtm_tfidf.shape)","7493e8ee":"# get the first vector out (for the first document)\nfirst_vector_tfvectorizer=dtm_tf[1]\n \n# place tf-idf values in a pandas data frame\ntest1 = pd.DataFrame(first_vector_tfvectorizer.T.todense(), index=tf_vectorizer.get_feature_names(), columns=[\"bow\"])\ntest1.sort_values(by=[\"bow\"],ascending=False)\n","863392d6":"# get the first vector out (for the first document)\nfirst_vector_tfidfvectorizer=dtm_tfidf[1]\n \n# place tf-idf values in a pandas data frame\ntest1 = pd.DataFrame(first_vector_tfidfvectorizer.T.todense(), index=tfidf_vectorizer.get_feature_names(), columns=[\"tfidf\"])\ntest1.sort_values(by=[\"tfidf\"],ascending=False)\n\n","1d479d14":"# for TF DTM\nlda_tf = LatentDirichletAllocation(n_components=10, random_state=0)\nlda_tf.fit(dtm_tf)\n","98ad912d":"# for TFIDF DTM\nlda_tfidf = LatentDirichletAllocation(n_components=10, random_state=0)\nlda_tfidf.fit(dtm_tfidf)","958ae71b":"# Define Search Param\nsearch_params = {'n_components': [10, 15, 20, 25, 30], 'learning_decay': [.5, .7, .9]}\n# Init the Model\nlda = LatentDirichletAllocation(max_iter=5, learning_method='online', learning_offset=50.,random_state=0)\n# Init Grid Search Class\nmodel = GridSearchCV(lda, param_grid=search_params)\n# Do the Grid Search\nmodel.fit(dtm_tf)\nGridSearchCV(cv=None, error_score='raise',\n       estimator=LatentDirichletAllocation(batch_size=128, doc_topic_prior=None,\n             evaluate_every=-1, learning_decay=0.7, learning_method=None,\n             learning_offset=10.0, max_doc_update_iter=100, max_iter=10,\n             mean_change_tol=0.001, n_components=10, n_jobs=1,\n             #n_components=None,\n             perp_tol=0.1, random_state=None,\n             topic_word_prior=None, total_samples=1000000.0, verbose=0),\n       #fit_params=None,\n        iid=True, n_jobs=1,\n       param_grid={'n_topics': [10, 15, 20, 25, 30], 'learning_decay': [0.5, 0.7, 0.9]},\n       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n       scoring=None, verbose=0)","9d28fc22":"# Best Model\nbest_lda_model = model.best_estimator_\n# Model Parameters\nprint(\"Best Model's Params: \", model.best_params_)\n# Log Likelihood Score\nprint(\"Best Log Likelihood Score: \", model.best_score_)\n# Perplexity\nprint(\"Model Perplexity: \", best_lda_model.perplexity(dtm_tf))","3d2c9ec7":"# Create Document \u2014 Topic Matrix\nlda_output = best_lda_model.transform(dtm_tf)\n# column names\ntopicnames = [\"Topic\" + str(i) for i in range(best_lda_model.n_components)]\n# index names\ndocnames = [i for i in meta_df.cord_uid]\n# Make the pandas dataframe\ndf_document_topic = pd.DataFrame(np.round(lda_output, 2), columns=topicnames, index=docnames)\n# Get dominant topic for each document\ndominant_topic = np.argmax(df_document_topic.values, axis=1)\ndf_document_topic[\"dominant_topic\"] = dominant_topic\n# Styling\ndef color_green(val):\n color = 'green' if val > .1 else 'black'\n return 'color: {col}'.format(col=color)\ndef make_bold(val):\n weight = 700 if val > .1 else 400\n return 'font-weight: {weight}'.format(weight=weight)\n# Apply Style\ndf_document_topics = df_document_topic.head(43).style.applymap(color_green).applymap(make_bold)\n#df_document_topics = df_document_topic.style.applymap(color_green).applymap(make_bold)\ndf_document_topics","9e527f01":"# Topic-Keyword Matrix\ndf_topic_keywords = pd.DataFrame(best_lda_model.components_)\n# Assign Column and Index\ndf_topic_keywords.columns = tf_vectorizer.get_feature_names()\ndf_topic_keywords.index = topicnames\n# View\ndf_topic_keywords\n\n","99c534bf":"# Get the top 15 keywords for each topic\n\n# Show top n keywords for each topic\ndef show_topics(vectorizer=tf_vectorizer, lda_model=lda_tf, n_words=20):\n    keywords = np.array(vectorizer.get_feature_names())\n    topic_keywords = []\n    for topic_weights in lda_model.components_:\n        top_keyword_locs = (-topic_weights).argsort()[:n_words]\n        topic_keywords.append(keywords.take(top_keyword_locs))\n    return topic_keywords\ntopic_keywords = show_topics(vectorizer=tf_vectorizer, lda_model=best_lda_model, n_words=15)\n# Topic - Keywords Dataframe\ndf_topic_keywords = pd.DataFrame(topic_keywords)\ndf_topic_keywords.columns = ['Word '+str(i) for i in range(df_topic_keywords.shape[1])]\ndf_topic_keywords.index = ['Topic '+str(i) for i in range(df_topic_keywords.shape[0])]\ndf_topic_keywords ","305d516c":"Topics = ['Antibody-dna gene analysis-pig\/bat','PEDV\/Coronovirus acute Respiration-diarrhea','Immunity-inflammation Induced in Body\/gene','High Risk grouping people-older age','HIV-HCV virus cellular membrane','Novel Virus diseases\/infectious from Animals','Clinical treatment\/dignosis for pneumonia-hadv-respirational failure','Influenza-sars-corona  outbreak\/pandemic from china','Data model approach - disease analysis\/pattern ','Infectious diseases outbreak globally']\ndf_topic_keywords[\"Topics\"]=Topics\ndf_topic_keywords","8486a68b":"def apply_predict_topic(text):\n    text = text\n    infer_topic, topic, prob_scores = predict_topic(text = text)\n    return infer_topic","ac7c0ae6":"# Define function to predict topic for a given text document.\nnlp = spacy.load('en', disable=['parser', 'ner'])\ndef predict_topic(text, nlp=nlp):\n# Step 1: Clean with simple_preprocess\n    text_2 = text_preprocess(text)\n# Step 3: Vectorize transform\n    text_3 = [text_2]\n    text_4 = tf_vectorizer.transform(text_3)\n# Step 4: LDA Transform\n    topic_probability_scores = best_lda_model.transform(text_4)\n    #topic = df_topic_keywords.iloc[np.argmax(topic_probability_scores), 0:14].values.tolist()\n    topic = np.argmax(topic_probability_scores, axis=1)\n    \n# Step 5: Infer Topic\n    infer_topic = df_topic_keywords.iloc[np.argmax(topic_probability_scores), -1]\n    \n    #topic_guess = df_topic_keywords.iloc[np.argmax(topic_probability_scores), Topics]\n    return infer_topic, topic, topic_probability_scores\n","8778d5e0":"# Predict the topic\n\ntasks = [\"What is known about transmission, incubation, and environmental stability? What do we know about natural history, transmission, and diagnostics for the virus? What have we learned about infection prevention and control? Range of incubation periods for the disease in humans (and how this varies across age and health status) and how long individuals are contagious, even after recovery. Prevalence of asymptomatic shedding and transmission (e.g., particularly children). Seasonality of transmission. Physical science of the coronavirus (e.g., charge distribution, adhesion to hydrophilic\/phobic surfaces, environmental survival to inform decontamination efforts for affected areas and provide information about viral shedding). Persistence and stability on a multitude of substrates and sources (e.g., nasal discharge, sputum, urine, fecal matter, blood). Persistence of virus on surfaces of different materials (e,g., copper, stainless steel, plastic). Natural history of the virus and shedding of it from an infected person Implementation of diagnostics and products to improve clinical processes Disease models, including animal models for infection, disease and transmission Tools and studies to monitor phenotypic change and potential adaptation of the virus Immune response and immunity Effectiveness of movement control strategies to prevent secondary transmission in health care and community settings Effectiveness of personal protective equipment (PPE) and its usefulness to reduce risk of transmission in health care and community settings Role of the environment in transmission\",\n        \"What do we know about COVID-19 risk factors? What have we learned from epidemiological studies? Data on potential risks factors.Smoking, pre-existing pulmonary disease.Co-infections (determine whether co-existing respiratory\/viral infections make the virus more transmissible or virulent) and other co-morbidities.Neonates and pregnant women.Socio-economic and behavioral factors to understand the economic impact of the virus and whether there were differences.Transmission dynamics of the virus, including the basic reproductive number, incubation period, serial interval, modes of transmission and environmental factors.Severity of disease, including risk of fatality among symptomatic hospitalized patients, and high-risk patient groups.Susceptibility of populations .Public health mitigation measures that could be effective for control\",\n        \"What do we know about virus genetics, origin, and evolution? What do we know about the virus origin and management measures at the human-animal interface? Real-time tracking of whole genomes and a mechanism for coordinating the rapid dissemination of that information to inform the development of diagnostics and therapeutics and to track variations of the virus over time.Access to geographic and temporal diverse sample sets to understand geographic distribution and genomic differences, and determine whether there is more than one strain in circulation. Multi-lateral agreements such as the Nagoya Protocol could be leveraged.Evidence that livestock could be infected (e.g., field surveillance, genetic sequencing, receptor binding) and serve as a reservoir after the epidemic appears to be over.Evidence of whether farmers are infected, and whether farmers could have played a role in the origin.Surveillance of mixed wildlife- livestock farms for SARS-CoV-2 and other coronaviruses in Southeast Asia.Experimental infections to test host range for this pathogen.Animal host(s) and any evidence of continued spill-over to humans.Socioeconomic and behavioral risk factors for this spill-over.Sustainable risk reduction strategies\",\n        \"What do we know about vaccines and therapeutics? What has been published concerning research and development and evaluation efforts of vaccines and therapeutics? Effectiveness of drugs being developed and tried to treat COVID-19 patients.Clinical and bench trials to investigate less common viral inhibitors against COVID-19 such as naproxen, clarithromycin, and minocyclinethat that may exert effects on viral replication.Methods evaluating potential complication of Antibody-Dependent Enhancement (ADE) in vaccine recipients.Exploration of use of best animal models and their predictive value for a human vaccine.Capabilities to discover a therapeutic (not vaccine) for the disease, and clinical effectiveness studies to discover therapeutics, to include antiviral agents.Alternative models to aid decision makers in determining how to prioritize and distribute scarce, newly proven therapeutics as production ramps up. This could include identifying approaches for expanding production capacity to ensure equitable and timely distribution to populations in need.Efforts targeted at a universal coronavirus vaccine.Efforts to develop animal models and standardize challenge studies.Efforts to develop prophylaxis clinical studies and prioritize in healthcare workers.Approaches to evaluate risk for enhanced disease after vaccination.Assays to evaluate vaccine immune response and process development for vaccines, alongside suitable animal models [in conjunction with therapeutics]\",\n        \"What has been published about medical care? What has been published concerning surge capacity and nursing homes? What has been published concerning efforts to inform allocation of scarce resources? What do we know about personal protective equipment? What has been published concerning alternative methods to advise on disease management? What has been published concerning processes of care? What do we know about the clinical characterization and management of the virus? Resources to support skilled nursing facilities and long term care facilities.Mobilization of surge medical staff to address shortages in overwhelmed communities.Age-adjusted mortality data for Acute Respiratory Distress Syndrome (ARDS) with\/without other organ failure \u2013 particularly for viral etiologies.Extracorporeal membrane oxygenation (ECMO) outcomes data of COVID-19 patientsOutcomes data for COVID-19 after mechanical ventilation adjusted for age.Knowledge of the frequency, manifestations, and course of extrapulmonary manifestations of COVID-19, including, but not limited to, possible cardiomyopathy and cardiac arrest.Application of regulatory standards (e.g., EUA, CLIA) and ability to adapt care to crisis standards of care level.Approaches for encouraging and facilitating the production of elastomeric respirators, which can save thousands of N95 masks.Best telemedicine practices, barriers and faciitators, and specific actions to remove\/expand them within and across state boundaries.Guidance on the simple things people can do at home to take care of sick people and manage disease.Oral medications that might potentially work.Use of AI in real-time health care delivery to evaluate interventions, risk factors, and outcomes in a way that could not be done manually.Best practices and critical challenges and innovative solutions and technologies in hospital flow and organization, workforce protection, workforce allocation, community-based support resources, payment, and supply chain management to enhance capacity, efficiency, and outcomes.Efforts to define the natural history of disease to inform clinical care, public health interventions, infection prevention control, transmission, and clinical trials.Efforts to develop a core clinical outcome set to maximize usability of data across a range of trials.Efforts to determine adjunctive and supportive interventions that can improve the clinical outcomes of infected patients (e.g. steroids, high flow oxygen)\",\n        \"What do we know about the effectiveness of non-pharmaceutical interventions? What is known about equity and barriers to compliance for non-pharmaceutical interventions? Guidance on ways to scale up NPIs in a more coordinated way (e.g., establish funding, infrastructure and authorities to support real time, authoritative (qualified participants) collaboration with all states to gain consensus on consistent guidance and to mobilize resources to geographic areas where critical shortfalls are identified) to give us time to enhance our health care delivery system capacity to respond to an increase in cases.Rapid design and execution of experiments to examine and compare NPIs currently being implemented. DHS Centers for Excellence could potentially be leveraged to conduct these experiments.Rapid assessment of the likely efficacy of school closures, travel bans, bans on mass gatherings of various sizes, and other social distancing approaches.Methods to control the spread in communities, barriers to compliance and how these vary among different populations..Models of potential interventions to predict costs and benefits that take account of such factors as race, income, disability, age, geographic location, immigration status, housing status, employment status, and health insurance status.Policy changes necessary to enable the compliance of individuals with limited resources and the underserved with NPIs.Research on why people fail to comply with public health advice, even if they want to do so (e.g., social or financial costs may be too high).Research on the economic impact of this or any pandemic. This would include identifying policy and programmatic alternatives that lessen\/mitigate risks to critical government services, food distribution and supplies, access to critical household supplies, and access to health diagnoses, treatment, and needed care, regardless of ability to pay.\",\n        \"What do we know about diagnostics and surveillance? What has been published concerning systematic, holistic approach to diagnostics (from the public health surveillance perspective to being able to predict clinical outcomes)? How widespread current exposure is to be able to make immediate policy recommendations on mitigation measures. Denominators for testing and a mechanism for rapidly sharing that information, including demographics, to the extent possible. Sampling methods to determine asymptomatic disease (e.g., use of serosurveys (such as convalescent samples) and early detection of disease (e.g., use of screening of neutralizing antibodies such as ELISAs).Efforts to increase capacity on existing diagnostic platforms and tap into existing surveillance platforms.Recruitment, support, and coordination of local expertise and capacity (public, private\u2014commercial, and non-profit, including academic), including legal, ethical, communications, and operational issues.National guidance and guidelines about best practices to states (e.g., how states might leverage universities and private laboratories for testing purposes, communications to public health officials and the public).Development of a point-of-care test (like a rapid influenza test) and rapid bed-side tests, recognizing the tradeoffs between speed, accessibility, and accuracy.Rapid design and execution of targeted surveillance experiments calling for all potential testers using PCR in a defined area to start testing and report to a specific entity. These experiments could aid in collecting longitudinal samples, which are critical to understanding the impact of ad hoc local interventions (which also need to be recorded).Separation of assay development issues from instruments, and the role of the private sector to help quickly migrate assays onto those devices.Efforts to track the evolution of the virus (i.e., genetic drift or mutations) and avoid locking into specific reagents and surveillance\/detection schemes.Latency issues and when there is sufficient viral load to detect the pathogen, and understanding of what is needed in terms of biological and environmental sampling.Use of diagnostics such as host response markers (e.g., cytokines) to detect early disease or predict severe disease progression, which would be important to understanding best clinical practice and efficacy of therapeutic interventions.Policies and protocols for screening and testing.Policies to mitigate the effects on supplies associated with mass testing, including swabs and reagents.Technology roadmap for diagnostics.Barriers to developing and scaling up new diagnostic tests (e.g., market forces), how future coalition and accelerator models (e.g., Coalition for Epidemic Preparedness Innovations) could provide critical funding for diagnostics, and opportunities for a streamlined regulatory environment.New platforms and technology (e.g., CRISPR) to improve response times and employ more holistic approaches to COVID-19 and future diseases.Coupling genomics and diagnostic testing on a large scale.Enhance capabilities for rapid sequencing and bioinformatics to target regions of the genome that will allow specificity for a particular variant.Enhance capacity (people, technology, data) for sequencing with advanced analytics for unknown pathogens, and explore capabilities for distinguishing naturally-occurring pathogens from intentional.One Health surveillance of humans and potential sources of future spillover or ongoing exposure for this organism and future pathogens, including both evolutionary hosts (e.g., bats) and transmission hosts (e.g., heavily trafficked and farmed wildlife and domestic food and companion species), inclusive of environmental, demographic, and occupational risk factors.\",\n        \"Research Question At the time of writing, COVID-19 has spread to at least 114 countries. With viral flu, there are often geographic variations in how the disease will spread and if there are different variations of the virus in different areas. We\u2019d like to explore what the literature and data say about this through this Task.Are there geographic variations in the rate of COVID-19 spread? Are there geographic variations in the mortality rate of COVID-19? Is there any evidence to suggest geographic based virus mutations?\",\n         \"What has been published concerning ethical considerations for research? What has been published concerning social sciences at the outbreak response? Efforts to articulate and translate existing ethical principles and standards to salient issues in COVID-2019.Efforts to embed ethics across all thematic areas, engage with novel ethical issues that arise and coordinate to minimize duplication of oversight.Efforts to support sustained education, access, and capacity building in the area of ethics.Efforts to establish a team at WHO that will be integrated within multidisciplinary research and operational platforms and that will connect with existing and expanded global networks of social sciences.Efforts to develop qualitative assessment frameworks to systematically collect information related to local barriers and enablers for the uptake and adherence to public health measures for prevention and control. This includes the rapid identification of the secondary impacts of these measures. (e.g. use of surgical masks, modification of health seeking behaviors for SRH, school closures).Efforts to identify how the burden of responding to the outbreak and implementing public health measures affects the physical and psychological health of those providing care for Covid-19 patients and identify the immediate needs that must be addressed.Efforts to identify the underlying drivers of fear, anxiety and stigma that fuel misinformation and rumor, particularly through social media.\",\n         \"What has been published about information sharing and inter-sectoral collaboration? What has been published about data standards and nomenclature? What has been published about governmental public health? What do we know about risk communication? What has been published about communicating with high-risk populations? What has been published to clarify community measures? What has been published about equity considerations and problems of inequity? Methods for coordinating data-gathering with standardized nomenclature.Sharing response information among planners, providers, and others.Understanding and mitigating barriers to information-sharing.How to recruit, support, and coordinate local (non-Federal) expertise and capacity relevant to public health emergency response (public, private, commercial and non-profit, including academic).Integration of federal\/state\/local public health surveillance systems.Value of investments in baseline public health response infrastructure preparednessModes of communicating with target high-risk populations (elderly, health care workers).Risk communication and guidelines that are easy to understand and follow (include targeting at risk populations\u2019 families too).Communication that indicates potential risk of disease to all population groups.Misunderstanding around containment and mitigation.Action plan to mitigate gaps and problems of inequity in the Nation\u2019s public health capability, capacity, and funding to ensure all citizens in need are supported and can access information, surveillance, and treatment.Measures to reach marginalized and disadvantaged populations.Data systems and research priorities and agendas incorporate attention to the needs and circumstances of disadvantaged populations and underrepresented minorities.Mitigating threats to incarcerated people from COVID-19, assuring access to information, prevention, diagnosis, and treatment.Understanding coverage policies (barriers and opportunities) related to testing, treatment, and care\"]\n       \ntopics = []\ndominant_topic = []\nprob_scores =[]\nfor i in range(len(tasks)):\n    dominant, topic, prob_score = predict_topic(text = tasks[i])\n    topic = topic[0]\n    topics.append(topic)\n    dominant_topic.append(dominant)\n    prob_scores.append(prob_score)\n    \n    print (topic)\n    print(dominant)\n    print (prob_score)\n\n\nzippedList =  zip(tasks,topics,dominant_topic,prob_scores)\nli_result = list(zippedList)\n\ntasks_df = pd.DataFrame(li_result, columns = ['tasks' , 'topic_number', 'dominant_topic','prob_scores'])\ntasks_df\n","55fdc952":"meta_df['dominant_topic'] = None\nmeta_df[\"dominant_topic\"]= meta_df['processed_abstract'].apply(apply_predict_topic)\nmeta_df.head()\n","dbc15955":"meta_df.to_csv('meta_df_output_topics.csv')\ntasks_df.to_csv('tasks_associated_topics.csv')","ba6b9cec":"meta_df.head(16)","4bbc9580":"\ntasks_df['related_articles_cord_uid'] = None\nfor i in range(len(tasks_df)):\n    uid = []\n    for j in range(len(meta_df)):\n        if (tasks_df.dominant_topic[i] == meta_df.dominant_topic[j]):\n            uid.append(meta_df.cord_uid[j])\n    tasks_df.related_articles_cord_uid[i] =   uid\n    \ntasks_df","48bd3032":"tasks_df.to_csv('submission.csv')","72d2bda4":"df_topic_distribution = df_document_topic['dominant_topic'].value_counts().reset_index(name=\"Num Documents\")\ndf_topic_distribution.columns = ['Topic Num', 'Num Documents']\ndf_topic_distribution","42f90449":"pyLDAvis.enable_notebook()\npanel = pyLDAvis.sklearn.prepare(best_lda_model, dtm_tf, tf_vectorizer, mds='tsne')\npanel","e69e3c0a":"from sklearn.manifold import TSNE\ntsne_model = TSNE(n_components=2, verbose=1, random_state=7, angle=.99, init='pca')\n\ndocument_topic_matrix = pd.DataFrame(np.round(lda_output, 2), columns=topicnames, index=docnames)\n\n# 13-D -> 2-D\ntsne_lda = tsne_model.fit_transform(document_topic_matrix) # doc_topic is document-topic matrix from LDA or GuidedLDA\ntsne_lda","69bfcb20":"# getting high prob value for each row\n\nmaxValuesObj = document_topic_matrix.max(axis=1)\n \nprint('Maximum value in each row : ')\nprint(maxValuesObj)\n\n\n# Joining max value into doc term matrix\n\ndocument_topic_matrix['dominant_pbb_value'] = maxValuesObj\n\n# getting Dominant topic\n\ndominant_topic = np.argmax(document_topic_matrix.values, axis=1)\ndocument_topic_matrix[\"dominant_topic\"] = dominant_topic\n\n#Joining tsne_lda into existing dataframe\n\ndocument_topic_matrix['x_tsne'] = tsne_lda[:,0]\ndocument_topic_matrix['y_tsne'] = tsne_lda[:,1]\ndocument_topic_matrix","ec11e64b":"document_topic_matrix.to_csv('dtm_tf_prob_topics.csv')","befc9886":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\n# sns settings\nsns.set(rc={'figure.figsize':(15,15)})\n\n# colors\npalette = sns.color_palette(\"bright\", 1)\n\n# plot\nsns.scatterplot(tsne_lda[:,0], tsne_lda[:,1], palette=palette)\n\nplt.title(\"t-SNE Covid-19 Articles\")\nplt.savefig(\"t-sne_covid19.png\")\nplt.show()","17ee8e85":"# sns settings\nsns.set(rc={'figure.figsize':(15,15)})\n\n# colors\npalette = sns.color_palette(\"bright\", len(set(meta_df[\"dominant_topic\"])))\n\n# plot\nsns.scatterplot(tsne_lda[:,0], tsne_lda[:,1],hue=meta_df[\"dominant_topic\"], legend='full', palette=palette) #\nplt.title(\"t-SNE Covid-19 Articles - Clustered\")\nplt.savefig(\"t-sne_covid19_label.png\")\nplt.show()","af896885":"from bokeh.models import ColumnDataSource, HoverTool, LinearColorMapper, CustomJS\nfrom bokeh.palettes import Category20\nfrom bokeh.transform import linear_cmap\nfrom bokeh.io import output_file, show\nfrom bokeh.transform import transform\nfrom bokeh.io import output_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import column\nfrom bokeh.models import RadioButtonGroup\nfrom bokeh.models import TextInput\nfrom bokeh.layouts import gridplot\nfrom bokeh.models import Div\nfrom bokeh.models import Paragraph\nfrom bokeh.layouts import column, widgetbox\n\noutput_notebook()\ny_labels = dominant_topic\n\n# data sources\nsource = ColumnDataSource(data=dict(\n    x= tsne_lda[:,0],  \n    y= tsne_lda[:,1],\n   # x_backup = tsne_lda[:,0],\n   # y_backup = tsne_lda[:,1],\n    desc= y_labels, \n    titles= meta_df['title'],\n    authors = meta_df['authors'],\n    journal = meta_df['journal'],\n    abstract = meta_df['abstract'],\n    topic = meta_df[\"dominant_topic\"],\n    labels = [x for x in meta_df.dominant_topic]\n    ))\n\n# hover over information\nhover = HoverTool(tooltips=[\n    (\"Title\", \"@titles{safe}\"),\n    (\"Author(s)\", \"@authors\"),\n    (\"Journal\", \"@journal\"),\n    (\"Abstract\", \"@abstract{safe}\"),\n    (\"Topic\", \"@topic\")\n],\n                 point_policy=\"follow_mouse\")\n\n# map colors\nmapper = linear_cmap(field_name='desc', \n                     palette=Category20[20],\n                     low=min(y_labels) ,high=max(y_labels))\n\n# prepare the figure\np = figure(plot_width=1000, plot_height=1000, \n           tools=[hover, 'pan', 'wheel_zoom', 'box_zoom', 'reset'], \n           title=\"t-SNE Covid-19 Articles, LDA output\", \n           toolbar_location=\"right\")\n\n\n# plot\np.scatter('x', 'y', size=5, \n          source=source,\n          fill_color=mapper,\n          line_alpha=0.3,\n          line_color=\"black\",\n          legend = 'labels')\n\nshow(p)","4d2d64ba":"from sklearn.manifold import TSNE\ntsne_model = TSNE(n_components=3, verbose=1, random_state=7, angle=.99, init='pca')\n\ndocument_topic_matrix = pd.DataFrame(np.round(lda_output, 2), columns=topicnames, index=docnames)\n\n# 13-D -> 2-D\ntsne_lda = tsne_model.fit_transform(document_topic_matrix) # doc_topic is document-topic matrix from LDA or GuidedLDA\n\n# getting high prob value for each row\n\nmaxValuesObj = document_topic_matrix.max(axis=1)\n \nprint('Maximum value in each row : ')\nprint(maxValuesObj)\n\n\n# Joining max value into doc term matrix\n\n\ndocument_topic_matrix['dominant_pbb_value'] = maxValuesObj\ndocument_topic_matrix\n\n# getting Dominant topic\n\ndominant_topic = np.argmax(document_topic_matrix.values, axis=1)\ndocument_topic_matrix[\"dominant_topic\"] = dominant_topic\n\n#Joining tsne_lda into existing dataframe\n\ndocument_topic_matrix['x_tsne'] = tsne_lda[:,0]\ndocument_topic_matrix['y_tsne'] = tsne_lda[:,1]\ndocument_topic_matrix['z_tsne'] = tsne_lda[:,2]\n\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nax = plt.figure(figsize=(16,10)).gca(projection='3d')\nax.scatter(\n    xs=tsne_lda[:,0],\n    ys=tsne_lda[:,1],\n    zs=tsne_lda[:,2],\n    c=dominant_topic, \n    cmap='tab10'\n)\nax.set_xlabel('tsne-one')\nax.set_ylabel('tsne-two')\nax.set_zlabel('tsne-three')\nplt.title(\"tSNE Covid-19 Articles (3D) - LDA\")\nplt.savefig(\"tSNE_Covid19_label_3d.png\")\nplt.show()\n\n","4701b539":"Let us plot the results","823201ff":"Predict Topics using LDA model","1ef8057a":"Dominant topic - for each row\/article based on the probabilities","c278966d":"Based on the above topic-keyword matrix we have to name the topics. Here I named the topics based on the top keywords present","cd5e85de":"Getting abstract of first document","1aaa97f3":"Visulize LDA output with pyLDAvis\npyLDAvis is designed to help users to interpret the topics in a topic model that has been fit to a corpus of text data. The package extracts information from a fitted LDA topic model.","75984fc4":"* ","35e9bf6f":"Preprocessing text [ text lowering ,removing special characters , remove punctuations,remove stop-words, lemmatization ]","6af23a02":"tasks_df.related articles cord_uid column has set of similar articles UID which answers corresponding tasks or best describes tasks.","561041a9":"Saving the input dataframe with their Topics-identified for each row\/article and tasks list with its topic","78c3f0e6":"Getting top 15 keywords which contributes more essence for each topic","3fc0d07a":"Now we have unique abstracts","87ffe3cb":"Below plot shows title, abstract,author and Jounal published for each article","4e2cb013":"View metadata file","28ecae10":"![](http:\/\/)Handling duplicates in abstracts ","b47bede5":"4762 are unique abstracts due to author submitting the same article in multiple journals\/windows. Let's remove the duplicats from our dataset:","07e39a61":"GridSearch to determine the best LDA model","8d3374f3":"Saving the document term matrix with their probabilities and topics_identified","af32ec6b":"# tSNE in 3 dimensions","a689da46":"# ****Applying t-SNE on lda-output****\n\n\nt-Distributed Stochastic Neighbor Embedding (t-SNE) is an unsupervised, non-linear technique primarily used for data exploration and visualizing high-dimensional data. It converts 10 dimensions of lda output to 2 dimensions and these 2 dimensions\/column values best describes those 10 column values. But we will not get any meaningful insights from those 2 columns (tsne_lda[:,0] , tsne_lda[:,1] )","316c5065":"Here I write python code to explore and cluster Covid-19 articles related to tasks given or any specific query. LatentDirichletAllocation(LDA) is used for topic modelling in this kernal.Latent Dirichlet Allocation (LDA) is a algorithm used to discover the topics that are present in a corpus. Scikit Learn is a library and scales really well to large text corpuses and Gensim is also an better alternative here. But we are using Scikit learn here to well classify topics among articles.\n\nDataset Used : \nI use metadata.csv as input dataset and limited the dataset size to 5k rows as the original one has 51k articles. Here we are going to use abstract column as text input to our model\n\nApproach:\n1. Loading data\n2. Reducing datasize size and remove null values\n3. Preprocessing abstract\/text input\n4. Creating document-term-matrix based on BOW((dtm_tf) and TFIDF((dtm_tfidf)\n5. Fitting the LDA model on dtm_tf and dtm_tfidf\n6. Gridsearch to select the best model\n7. Train dtm_tf and get lda_output based on best model parameters\n8. Based on the topic probabilities , determining the dominant topic for each row\/article\n9. Infer topics according to their key words\n10. Predict topics on unseen document\/tasks using best LDA model we developed at Step 7\n11. Using t-Distributed Stochastic Neighbor Embedding (t-SNE) to cluster articles(applying t-SNE on lda output and reducing it to 2 dimensions from 10 topics)\n12. Visualising Topics in 2D and 3D and then Finally interactive plot.\n\n\nSolution :\n1. Using Predict Topic module ,we are able to find the topic which best describes the task\/given unseen article. \n2. Filtering the final output dataset for partcular cluster , we reach semantically similar articles to the tasks.\n\nThus we can save time by getting only similar articles for any given input\n","c6bc008c":"prob_scores column in above dataframe has topic probabilities for each topic and the highest score is selected which is dominant topic for the task. ","fad0ce73":"Listdown the input files","5b2f8a0c":"# **Interactive t-SNE**","cc8d1d48":"We are using dtm_tf for grid search the best model not dtm_tfidf as of now in this model.The most important tuning parameter for LDA models is n_components (number of topics). In addition, I am going to search learning_decay (which controls the learning rate) as well. ","4286a564":"Importing necessary libraries specfic to this project","d7c50015":"Drop NaN values from dataset","b100a05c":"Topics with all keywords and their probabilities","6124655e":"Below code represents the visualisation for this model","b11c9153":"Topic disribution - Documents"}}