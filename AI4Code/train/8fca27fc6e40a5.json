{"cell_type":{"63db5146":"code","7525a793":"code","85a40412":"code","34c081ff":"code","84e09685":"code","47260e3d":"code","33a03662":"code","bb2e82a7":"code","8182ab00":"code","dead5676":"code","543a062d":"code","9d0db3e4":"code","99181c64":"code","75648869":"code","50fcd793":"code","4673ff58":"code","1acb01a3":"code","fc152f3d":"code","446a4d3a":"code","cfb433a0":"code","0802a11c":"code","43422cd4":"code","eac2016f":"code","890007b1":"code","55a33f38":"code","4f53c2d6":"code","173c5e85":"code","35c43998":"code","81b3bfae":"code","abbe1486":"code","0a772ac2":"code","99905235":"code","291fc809":"code","433b0b05":"code","0ceaff54":"code","e041bc71":"code","878fc5bf":"code","7bc0177e":"code","89046430":"code","a940eaa4":"code","3f5228bc":"code","18fdb3b8":"code","b4b75f5f":"code","06613a76":"code","eace3f2e":"code","8a444dda":"code","092810d6":"code","e455e4e8":"code","a707b33d":"code","3721280a":"code","48fb4bd1":"code","6f61aa90":"markdown","fb1d3af0":"markdown","0a06d5d1":"markdown","a6bd8a8e":"markdown","6352ff2f":"markdown","571b740d":"markdown","cc0d0fec":"markdown","6dac2545":"markdown","0c80e526":"markdown","9bbdde32":"markdown","4b838339":"markdown","dc16d0f9":"markdown","fc81f1c9":"markdown","db903ff7":"markdown","35aef463":"markdown","dfa1f5bf":"markdown","1d39c080":"markdown","1eac2252":"markdown","4b2b67a1":"markdown","fdb4510a":"markdown","58b1ec15":"markdown","e5af6b8d":"markdown","1034aa7f":"markdown","3ec0e044":"markdown","5e0af127":"markdown","5f0d99e7":"markdown","859f6486":"markdown","ba9742fb":"markdown","b31419c6":"markdown","43fc4086":"markdown","d218e77c":"markdown","8e68ed3d":"markdown","6cd09a5a":"markdown","b7e4b500":"markdown","fc90e627":"markdown","5883598d":"markdown","2cb471e4":"markdown","1fc96b65":"markdown","efbcc4ca":"markdown","0e6037db":"markdown","83843629":"markdown","451f4de0":"markdown"},"source":{"63db5146":"import pandas as pd\nimport seaborn as sns\nimport missingno as msn\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\")\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\nfrom collections import Counter\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n ","7525a793":"sequential_colors = sns.color_palette(\"RdGy\",2)\nsns.palplot(sequential_colors)","85a40412":"data={\"1. pH value\":\"\"\"recommended  pH from 6.5 to 8.5\"\"\",\"2. Hardness\":\"The capacity of water to precipitate soap caused by Calcium and Magnesium\",\"3. Total dissolved solids - TDS\":\"Desirable limit is 500 mg\/l and maximum 1000 mg\/l \",\"4. Chloramines\":\"up to 4 milligrams per liter (mg\/L or 4 ppm) are considered safe\",\"5. Sulfate\":\"from 3 to 30 mg\/L in most freshwater supplies\",\"6. Conductivity\":\"not exceeded 400 \u03bcS\/cm.\",\"7. Total_Organic_carbon(TOC)\":\"EPA < 2 mg\/L as TOC in treated drinking water, and < 4 mg\/Lit in source water\",\"8. Trihalomethanes\":\"up to 80 ppm is considered safe\",\"9. Turbidity\":\"WHO recommended value of 5.00 NTU.\",\"10. Potability\":\"Indicates if water is safe for human consumption\"}","34c081ff":"dataset=pd.DataFrame(data,index=[\"limits\"])\ndataset","84e09685":"Water_Ch = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","47260e3d":"Water_Ch.head(3)","33a03662":"Water_ph=Water_Ch[(Water_Ch.ph<6.5) | (Water_Ch.ph>8.5)]\noutlimit_ph=pd.Series(Water_ph[\"Potability\"].value_counts())\npd.DataFrame(outlimit_ph)","bb2e82a7":"Water_Ch.loc[~Water_Ch.ph.between(6.5, 8.5), 'Potability'] = 0","8182ab00":"Water_ph=Water_Ch[(Water_Ch.ph<6.5) | (Water_Ch.ph>8.5)]\noutlimit_ph=pd.Series(Water_ph[\"Potability\"].value_counts())\npd.DataFrame(outlimit_ph)","dead5676":"Water_Hardness=Water_Ch.loc[(Water_Ch.Hardness<=500)]\noutlimit_Hardness=pd.Series(Water_Hardness[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Hardness)","543a062d":"Water_solids=Water_Ch.loc[(Water_Ch.Solids>1000)]\noutlimit_solid=pd.Series(Water_solids[\"Potability\"].value_counts())\npd.DataFrame(outlimit_solid)","9d0db3e4":"TDS_EC_relation = sns.regplot(x=\"Solids\", y=\"Conductivity\", data=Water_Ch)","99181c64":"Water_Ch=Water_Ch.drop([\"Solids\"],axis=1)","75648869":"Water_Ch.columns","50fcd793":"Water_Conductivity=Water_Ch[(Water_Ch.Conductivity>400)]\noutlimit_Conductivity=pd.Series(Water_Conductivity[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Conductivity)","4673ff58":"Water_Ch.loc[(Water_Ch.Conductivity>400),\"Potability\"]=0","1acb01a3":"Water_Conductivity=Water_Ch[(Water_Ch.Conductivity>400)]\noutlimit_Conductivity=pd.Series(Water_Conductivity[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Conductivity)","fc152f3d":"Water_Chloramines=Water_Ch[Water_Ch.Chloramines>4]\noutlimit_Chloramines=pd.Series(Water_Chloramines[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Chloramines)","446a4d3a":"Water_Sulfate=Water_Ch[(Water_Ch.Sulfate<3) | (Water_Ch.Sulfate>30)]\noutlimit_Sulfate=pd.Series(Water_Sulfate[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Sulfate)","cfb433a0":"Water_Organic_carbon=Water_Ch[Water_Ch.Organic_carbon>2]\noutlimit_Organic_carbon=pd.Series(Water_Organic_carbon[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Organic_carbon)","0802a11c":"Water_Trihalomethanes=Water_Ch[Water_Ch.Trihalomethanes>80]\noutlimit_Trihalomethanes=pd.Series(Water_Trihalomethanes[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Trihalomethanes)","43422cd4":"Water_Turbidity=Water_Ch[Water_Ch.Turbidity!=5]\noutlimit_Turbidity=pd.Series(Water_Turbidity[\"Potability\"].value_counts())\npd.DataFrame(outlimit_Turbidity)","eac2016f":"Water_Ch.info()","890007b1":"missing={\"missing\":Water_Ch.isnull().sum(),\"% of missing\":round(((Water_Ch.isnull().sum()\/3276)*100),2)}\nMissing_data=pd.DataFrame(missing)\nMissing_data","55a33f38":"msn.bar(Water_Ch[[\"ph\",\"Sulfate\",\"Trihalomethanes\",\"Potability\"]])","4f53c2d6":"msn.matrix(Water_Ch[[\"ph\",\"Sulfate\",\"Trihalomethanes\",\"Potability\"]],n=0,p=0,sort=None,figsize=(13,15),width_ratios=(15, 1),color=(0,0.15,0.85),fontsize=16,labels=None,sparkline=True,inline=True,freq=None,ax=None)","173c5e85":"msn.heatmap(Water_Ch[[\"ph\",\"Sulfate\",\"Trihalomethanes\",\"Potability\"]],cmap=\"Reds\")","35c43998":"Water_Ch=Water_Ch.dropna(subset=[\"Trihalomethanes\"])\nWater_Ch.info()","81b3bfae":"pd.DataFrame(Water_Ch[Water_Ch[\"Potability\"]==0].Potability.value_counts())","abbe1486":"missing={\"missing\":Water_Ch.isnull().sum(),\"% of missing\":round(((Water_Ch.isnull().sum()\/3114)*100),2)}\nMissing_data=pd.DataFrame(missing)\nMissing_data","0a772ac2":"sns.pairplot(Water_Ch, hue=\"Potability\",palette=sequential_colors)","99905235":"plt.figure(figsize=(15,15))\nsns.heatmap(Water_Ch.corr(),annot=True,cmap=\"Reds\")","291fc809":"pH_nan_1 = Water_Ch.query('Potability == 1')['ph'][Water_Ch['ph'].isna()].index\nWater_Ch.loc[pH_nan_1,'ph'] = Water_Ch.query('Potability == 1')['ph'][Water_Ch['ph'].notna()].mean()\n\npH_nan_0 = Water_Ch.query('Potability == 0')['ph'][Water_Ch['ph'].isna()].index\nWater_Ch.loc[pH_nan_0,'ph'] = Water_Ch.query('Potability == 0')['ph'][Water_Ch['ph'].notna()].mean()","433b0b05":"Sulfate_nan_1=Water_Ch.query(\"Potability==1\")[\"Sulfate\"][Water_Ch[\"Sulfate\"].isna()].index\nWater_Ch.loc[Sulfate_nan_1,\"Sulfate\"]=Water_Ch.query(\"Potability==1\")[\"Sulfate\"][Water_Ch[\"Sulfate\"].notna()].mean()\nSulfate_nan_0=Water_Ch.query(\"Potability==0\")[\"Sulfate\"][Water_Ch[\"Sulfate\"].isna()].index\nWater_Ch.loc[Sulfate_nan_0,\"Sulfate\"]=Water_Ch.query(\"Potability==0\")[\"Sulfate\"][Water_Ch[\"Sulfate\"].notna()].mean()","0ceaff54":"missing={\"missing\":Water_Ch.isnull().sum(),\"% of missing\":round(((Water_Ch.isnull().sum()\/3114)*100),2)}\nMissing_data=pd.DataFrame(missing)\nMissing_data","e041bc71":"Potability=pd.Series(Water_Ch[\"Potability\"].value_counts())\npd.DataFrame(Potability)","878fc5bf":"plt.pie(Potability,labels=[\"Non-potable\",\"potable\"],startangle=90,explode=[0.3,0],colors=sequential_colors)","7bc0177e":"217\/(2897+217)","89046430":"x=Water_Ch.drop([\"Potability\"],axis=1)\ny=Water_Ch.Potability","a940eaa4":"over=SMOTE(sampling_strategy=0.1,random_state=42)\nunder=RandomUnderSampler(sampling_strategy=0.5)\nsteps=[(\"O\",over),(\"U\",under)]\npipeline=Pipeline(steps=steps)\nx_sm,y_sm=pipeline.fit_resample(x,y)\nx_train,x_test,y_train,y_test=train_test_split(x_sm,y_sm,test_size=0.25,random_state =42)","3f5228bc":"Water_Ch.describe()","18fdb3b8":"Water_Ch[[\"ph\",\n\"Hardness\",\n\"Chloramines\",\n\"Sulfate\",\n\"Conductivity\"\n,\"Organic_carbon\"\n,\"Trihalomethanes\"\n,\"Turbidity\"]].hist(bins=50, figsize=(20,16))","b4b75f5f":"RS=RobustScaler()\nx_train=RS.fit_transform(x_train)\nx_test=RS.transform(x_test)","06613a76":"pipelineSVC = make_pipeline(SVC(random_state=42))\nparam_grid_svc = [{'svc__C': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0,100],'svc__kernel': ['linear']},{'svc__C': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],'svc__gamma': [0.001, 0.01, 0.05, 0.1, 0.5, 1.0, 10.0],'svc__kernel': ['rbf']}]\n\ngsSVC = GridSearchCV(estimator=pipelineSVC,\n                     param_grid = param_grid_svc,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=1)\n\ngsSVC.fit(x_train, y_train)\n\nprint(gsSVC.best_score_)\n\nprint(gsSVC.best_params_)\n\nprint('Test accuracy: %.3f' % gsSVC.score(x_test, y_test))\n\nclfSVC = gsSVC.best_estimator_\nprint('Test accuracy: %.3f' % clfSVC.score(x_test, y_test))","eace3f2e":"svc=SVC(C=10,kernel=\"rbf\",gamma=0.05,random_state=42)\nsvc.fit(x_train,y_train)\ny_pred=svc.predict(x_test)\nsvc_train_acc=(svc.score(x_train,y_train))*100\nsvc_test_acc=(svc.score(x_test,y_test))*100\nprint(svc_test_acc,svc_train_acc)\nprint(pd.DataFrame(classification_report(y_test,y_pred,labels=[0,1],output_dict=True)))","8a444dda":"knn=KNeighborsClassifier(n_neighbors=2)\nknn.fit(x_train,y_train)\ny_pred=knn.predict(x_test)\nknn_train_acc=(knn.score(x_train,y_train))*100\nknn_test_acc=(knn.score(x_test,y_test))*100\nprint(knn_train_acc,knn_test_acc)\nprint(pd.DataFrame(classification_report(y_test,y_pred,labels=[0,1],output_dict=True)))","092810d6":"pipelineDTC = make_pipeline(DecisionTreeClassifier(criterion='gini',random_state=42))\nparam_grid_dtc = [{\n    'decisiontreeclassifier__max_depth':[2, 3,4,5],\n    'decisiontreeclassifier__max_features':[2, 3, 4, 5, 6,7]\n}]\n\ngsDTC = GridSearchCV(estimator=pipelineDTC,\n                     param_grid = param_grid_dtc,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=1)\n\ngsDTC = gsDTC.fit(x_train, y_train)\n\nprint(gsDTC.best_score_)\n\nprint(gsDTC.best_params_)\n\nclfDTC = gsDTC.best_estimator_\nprint('Test accuracy: %.3f' % clfDTC.score(x_test, y_test))","e455e4e8":"dt=DecisionTreeClassifier(max_depth=5,max_features=7,criterion='gini',random_state=42)\ndt.fit(x_train,y_train)\ny_pred=dt.predict(x_test)\ndt_train_acc=(dt.score(x_train,y_train))*100\ndt_test_acc=(dt.score(x_test,y_test))*100\nprint(dt_train_acc, dt_test_acc)\nprint(pd.DataFrame(classification_report(y_test,y_pred,labels=[0,1],output_dict=True)))","a707b33d":"pipelineRFC = make_pipeline(RandomForestClassifier(criterion='gini', random_state=42))\nparam_grid_rfc = [{\n    'randomforestclassifier__max_depth':[2, 3, 4],\n    'randomforestclassifier__max_features':[2, 3, 4, 5, 6,7]\n}]\n\ngsRFC = GridSearchCV(estimator=pipelineRFC,\n                     param_grid = param_grid_rfc,\n                     scoring='accuracy',\n                     cv=10,\n                     refit=True,\n                     n_jobs=1)\n\ngsRFC = gsRFC.fit(x_train, y_train)\n\nprint(gsRFC.best_score_)\n\nprint(gsRFC.best_params_)\n\nclfRFC = gsRFC.best_estimator_\nprint('Test accuracy: %.3f' % clfRFC.score(x_test, y_test))","3721280a":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(max_depth=4,max_features=4,random_state=40)\nrf.fit(x_train,y_train)\ny_pred=rf.predict(x_test)\nrf_train_acc=(rf.score(x_train,y_train))*100\nrf_test_acc=(rf.score(x_test,y_test))*100\nprint(rf_train_acc,rf_test_acc)\nprint(pd.DataFrame(classification_report(y_test,y_pred,labels=[0,1],output_dict=True)))","48fb4bd1":"AL_ACC={\"Algorithm\":[\"Support Vector Cl\",\"Kneighbor Cl\",\"Decision Tree Cl\",\"Random Forest\"],\"train_Accuracy\":[svc_train_acc,knn_train_acc,dt_train_acc,rf_train_acc],\"test_Accuracy\":[svc_test_acc,knn_test_acc,dt_test_acc,rf_test_acc]}\npd.DataFrame(AL_ACC)","6f61aa90":"Chloramine","fb1d3af0":"Potability Attribute has a Categorical data with two categories 0 for Non_Potabile water and 1 for Potabile","0a06d5d1":"RandomForest","a6bd8a8e":"Now We can search for relationship between attributes to solve missing data problem","6352ff2f":"# 1- Get The Data","571b740d":"pH is outlimits but still some values give potability indication so we will reclassify it ","cc0d0fec":"Turbidity classified correctly according to WHO","6dac2545":"Conductivity","0c80e526":"filling Nan with mean for Sulfate values","9bbdde32":"But in the same time there are strong relation ship between solids and EC as below link\n","4b838339":"Trihalomethanes","dc16d0f9":"pH value","fc81f1c9":"There is no Linear correlation between attributes so we can not use any one to represent the other or to use it to fill th Null values","db903ff7":"Conclussion \n\nThe best Estimator is Random Forest Estimator with train accuracy equal 94, test accuracy 87.5 ","35aef463":"6 samples would not pass test according to US EPA, where there is no international recommendations for it so we will keep it  ","dfa1f5bf":"# 2- Take a look at the Data structure ","1d39c080":"https:\/\/www.researchgate.net\/figure\/Relationship-between-electrical-conductivity-EC-and-total-dissolved-solids-TDS_fig10_227328358","1eac2252":"Decision Tree","4b2b67a1":"Hardness","fdb4510a":"so we can use EC to get our model","58b1ec15":"Hardness value within the acceptable limits","e5af6b8d":"we make standardization using Robust Scaler to reduce the effect of outliers ","1034aa7f":"![image.png](attachment:image.png)","3ec0e044":"Model selection","5e0af127":"Although Solids Also is outlimits of WHO but it represent most of data so we can not reclassify it","5f0d99e7":"EC is indication for solids also so we reclassify all wronge values according to WHO recommendations","859f6486":"solids","ba9742fb":"filling Nan with mean for pH values","b31419c6":"Turbidity","43fc4086":"# \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645\n","d218e77c":"Trihalomethanes is inlimits defined by WHO ","8e68ed3d":"Organic_carbon\t","6cd09a5a":"KNN","b7e4b500":"we still have large null percentage for Sulfate 23.80%, pH 14.93% ","fc90e627":"# About Dataset\n","5883598d":"Access to safe drinking-water is essential to health, a basic human right and a component of effective policy for health protection. This is important as a health and development issue at a national, regional and local level. In some regions, it has been shown that investments in water supply and sanitation can yield a net economic benefit, since the reductions in adverse health effects and health care costs outweigh the costs of undertaking the interventions. so developping models and methods to predict and test the potability of water for human consummation is of huge benefits.","2cb471e4":"Sulfate","1fc96b65":"we can drop the null values from Trihalomethanes while it only represent ~5% of the data ","efbcc4ca":"We will use gridsearch cross validation method to decide on the best parameters","0e6037db":"There are imbalance problem with this Categorical attribute so we will make synthetic Minority oversampling Technique ","83843629":"so we have null values with ph by 491 record, with Sulfate by 781 and for Trihalomethanes by 162 record","451f4de0":"SVC"}}