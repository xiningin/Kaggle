{"cell_type":{"5256aafd":"code","f831252d":"code","cd3552c0":"code","bfade0f5":"code","67c5fffd":"code","d1a20626":"code","62672976":"code","b2c1cafe":"code","fe9eac4d":"markdown","ff355390":"markdown","0894fa50":"markdown","b6f0c927":"markdown","bf740093":"markdown","d692cc8f":"markdown","8b861cee":"markdown","6722553d":"markdown","1054ea9e":"markdown"},"source":{"5256aafd":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # matplotlib is used for plotting\nimport pandas as pd # pandas is used for analysis ,cleaning, manipulate and some plotting techniques  \nfrom sklearn.model_selection import train_test_split # train_test_split used to seperate data to train & test sets \nfrom sklearn.metrics import classification_report # used for text report showing the main classification metrics\nfrom xgboost import XGBClassifier # the model we will used","f831252d":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')\nkaggle = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","cd3552c0":"print(train.head())","bfade0f5":"print(train.info())","67c5fffd":"X = train.drop('label', axis=1)\ny = train.label","d1a20626":"# splitting the data into training sets and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=99)","62672976":"model = XGBClassifier(max_depth=30, n_estimators=300, gamma=0.5)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","b2c1cafe":"print(classification_report(y_test, y_pred))\n","fe9eac4d":"now let`s submit to kaggle competition\n","ff355390":"now let`s use XGBoost Classifier\n","0894fa50":"let`s import the important libraries\n","b6f0c927":"let`s check the acccuracy of the model","bf740093":"the data is already **cleaned**.  \n\nlet`s separate the data in X & y:","d692cc8f":"import the data\n","8b861cee":"as you can see we get 0.97 accuracy. it is awesome result for simple code(with the help of the great XGBoost library)!\n\nbut of curse you can get **higher result** using **grid search** to get the best parameters for your model or **combining** another data,\nand think **PCA**(dimensionality reduction) will be improve the performance of the model.\n\nI hope this was helpful for the beginner and it gave you some idea about how the game runs.\nplease **upvote my work** if you like it (;\n","6722553d":"splitting the data into training sets and testing set\n","1054ea9e":"take a peek at the data\n"}}