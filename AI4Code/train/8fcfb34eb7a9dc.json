{"cell_type":{"36a85332":"code","625efc49":"code","40f67445":"code","8739b589":"code","6653238d":"code","8d7b21b6":"code","e8a89922":"code","b1e8bf16":"code","266c2e37":"code","83defc8c":"code","92ba03d1":"code","87a5afa0":"markdown","19615013":"markdown","662f52a9":"markdown","2aa1692c":"markdown","5da0b9e7":"markdown","103667ab":"markdown","6778ea08":"markdown","c31fb3f8":"markdown","2d018828":"markdown","562bf095":"markdown"},"source":{"36a85332":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom perceptron_module import *\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","625efc49":"x = ___\n\nstep1.check()\n#step1.hint()\n#step1.solution()\n\ny = ___\n\nstep2.check()\n#step2.hint()\n#step2.solution()","40f67445":"n= 0","8739b589":"w = ___\n\nstep3.check()\n#step3.hint()\n#step3.solution()\n\n","6653238d":"f = ___\nprint (f)\n\nstep4.check()\n#step4.hint()\n#step4.solution()","8d7b21b6":"z= 0. # valor del umbral\n\nyhat = ___\n\nprint (yhat)\n\nstep5.check()\n#step5.hint()\n#step5.solution()","e8a89922":"def activation_function(f,z):\n    '''\n    Parametro de entrada:\n        z: umbral\n    '''\n    \n    ---\n    \n    return yhat","b1e8bf16":"eta = 0.1 #tasa de aprendizaje\n\nw = ___\n\nprint(w)\n\nstep6.check()\n#step6.hint()\n#step6.solution()","266c2e37":"def perceptron(x, y, z, eta, max_iter):\n    '''\n    Parametros de entrada:\n        x: dataset de entrada\n        y: etiquetas\n        z: umbral de la funcion de activacion\n        eta: tasa de aprendizaje\n        max_iter: maximo numero de iteraciones\n    '''\n    n = 0 # indice para la iteracion\n    \n    # Paso 1. Inicializamos los pesos a 0\n    \n    ___\n    \n    # inicializacion de parametros utilizados para el calculo del error\n    yhat_vec = np.zeros(len(y))     # vector de predicciones\n    errors = np.zeros(len(y))       # vector de errores (valor real - valor predicho)\n    J = []                         # vector para almacenar la funcion de coste en cada iteracion\n    \n    while n < max_iter: \n        for i in range(0, len(x)): \n            \n            ___\n                \n        n += 1\n        # calculo del error\n        for i in range(0,len(y)):     \n           errors[i] = (y[i]-yhat_vec[i])**2\n        J.append(0.5*np.sum(errors))\n        \n    return w, J","83defc8c":"z = 0.0\neta = 0.1\nt = 50\nweights, J = perceptron(x, y, z, eta, t)\n\nprint (weights)\n\nprint (J)","92ba03d1":"for i in range(0, len(x)): \n    f = weights[0]+weights[1]*x[i][1]+weights[2]*x[i][2]\n    print (f)\n    yhat = activation_function(f,z)\n    print (\"yhat =\", yhat, \"y=\",y[i])\n    print ()\n\n        ","87a5afa0":"5. Repetimos el proceso","19615013":"Paso 3. Comparamos con el umbral (funci\u00f3n de activaci\u00f3n)","662f52a9":"Paso 2. Multiplicamos los pesos por las entradas y los sumamos (producto escalar)\n\nhttps:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/generated\/numpy.dot.html","2aa1692c":"![](http:\/\/)","5da0b9e7":"Cree el dataset correspondiente","103667ab":"crear una funci\u00f3n en python que devuelva yhat (funcion de activacion)","6778ea08":"Primera iteraci\u00f3n","c31fb3f8":"Paso 1. Inicializamos los pesos a 0\n\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.zeros.html","2d018828":"Paso 4.  Actualizamos los pesos\n","562bf095":"Mediante un perceptr\u00f3n crear un modelo que resuelva un problema de tipo NAND\nhttps:\/\/en.wikipedia.org\/wiki\/NAND_gate\n\n![imagen.png](attachment:imagen.png)\n\n\n    \n    "}}