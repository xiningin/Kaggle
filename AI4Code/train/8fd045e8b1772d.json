{"cell_type":{"b8931cbf":"code","c1738ceb":"code","83ad6836":"code","49254d28":"code","c89f40ed":"code","8e2ac7e7":"code","802aeeb4":"code","1975787c":"code","134ffaee":"markdown","8176b608":"markdown","a109105a":"markdown","03619ceb":"markdown","01d56c0e":"markdown","6db8b256":"markdown","581252af":"markdown","cbe6fe41":"markdown","48729c37":"markdown","18bb79f7":"markdown"},"source":{"b8931cbf":"from keras import layers\nfrom keras import models\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical","c1738ceb":"(train_images, train_labels), (test_images, test_labels) = mnist.load_data()","83ad6836":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))","49254d28":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\nmodel.summary()","c89f40ed":"train_images = train_images.reshape((60000, 28, 28, 1))\ntrain_images = train_images.astype('float32') \/ 255\ntest_images = test_images.reshape((10000, 28, 28, 1))\ntest_images = test_images.astype('float32') \/ 255\ntrain_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)","8e2ac7e7":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(train_images, train_labels, epochs=5, batch_size=64)","802aeeb4":"test_loss, test_acc = model.evaluate(test_images, test_labels)\n\nprint(test_acc)","1975787c":"model.save('mnist.h5')","134ffaee":"### Importing Necessary Libraries:","8176b608":"### Making use of CNNs- Convolutional Neural Networks with our activation function being ReLU","a109105a":"### Loading The MNIST Data from keras.datasets","03619ceb":"### Model Training Starts Here!!!\n- Number of Epochs set as 5 [You can Tinker this value :)]\n- Batch Size set to 64","01d56c0e":"### Adding Layers and Printing the Model Summary","6db8b256":"# Welcome to Part 1 Of This Beginner Friendly Notebook On MNIST Handwritten Digit Recognition","581252af":"### Setting Train & Test Images, Reshaping in a standard format","cbe6fe41":"### Saving The Model For Use In PART 2 Notebook\nFew things to do:\n- Follow me on Kaggle for such Beginner Friendly Notebook Series :)\n- Upvote This Notebook!\n- **Don't Forget To Check PART 2 on Github: https:\/\/github.com\/aryashah2k\/Handwritten-Multiple-Digits-Recognizer\n[We will be using TKinter, OpenCV, Our Trained Model to build an awesome, intuitive GUI to Draw and Recognize Handwritten Digits]**","48729c37":"## The Two Part Series Of Notebooks Consists Of:\n- **Training the MNIST Model for Handwritten Digit Recognintion and Saving the same in .h5 format==> PART 1**\n- **Using the Model.h5 from PART 1 Notebook to build an interactive GUI for drawing Handwritten Digits with a mouse and predicting the Digit with its accuracy==> PART 2**\n\n*Part 2[GUI Code] shall be available on Github since TKinter does not work on Kaggle Notebooks!*\nGithub Link at the end of this Notebook :)","18bb79f7":"### Model Evaluation gives 99.28% Accuracy ==> Not Bad For A Beginner!"}}