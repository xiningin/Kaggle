{"cell_type":{"7bef2694":"code","33a79ebf":"code","05b9909f":"code","77ed0123":"code","45a77204":"code","2b875f83":"code","b8560f04":"code","c7c4d578":"code","c24da772":"code","a0fffabd":"code","144e2c10":"code","8e764b9c":"code","41e02150":"code","a4cd0e12":"code","612610f7":"code","ee014b69":"code","550236ba":"code","91b2b580":"code","615ed771":"code","f4e9bf4f":"code","65dbfe07":"code","499ab0b6":"code","8398edb9":"code","99e8803e":"code","83144d9e":"markdown","09ce3f56":"markdown","f191bc9f":"markdown","7f56457f":"markdown","9a96248b":"markdown","6dd018f4":"markdown","a364f612":"markdown","b7de11cb":"markdown"},"source":{"7bef2694":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')","33a79ebf":"books_df = pd.read_csv('..\/input\/goodbooks-10k-updated\/books.csv')\nratings_df = pd.read_csv('..\/input\/goodbooks-10k-updated\/ratings.csv')","05b9909f":"books_df.head()","77ed0123":"books_df.info()","45a77204":"books_df.sample(5)","2b875f83":"ratings_df.info()","b8560f04":"ratings_df.head()","c7c4d578":"ratings_df.sample(5)","c24da772":"my_list = {'Martin Eden': 5,\n            'Pet Sematary': 5,\n            'One Hundred Years of Solitude': 5,\n            'Ham on Rye': 5,\n            'The Grapes of Wrath': 4, \n            \"Cat's Cradle\": 5,\n            'Crime and Punishment': 4,\n            'The Trial': 4}","a0fffabd":"# Create dataframe for new user (me)\nuser_books = pd.DataFrame(columns=['title', 'rating'], data=my_list.items())\nuser_books","144e2c10":"\n# Add book_id from books_df\nnew_user = pd.merge(user_books, books_df, on='title', how='inner')\nnew_user = new_user[['book_id', 'title', 'rating']].sort_values(by='book_id')\nnew_user","8e764b9c":"other_users = ratings_df[ratings_df['book_id'].isin(new_user['book_id'].values)]\nother_users","41e02150":"other_users['user_id'].nunique()","a4cd0e12":"# Sort users by count of most mutual books with me\nusers_mutual_books = other_users.groupby(['user_id'])\nusers_mutual_books = sorted(users_mutual_books, key=lambda x: len(x[1]), reverse=True)\nusers_mutual_books[0]","612610f7":"top_users = users_mutual_books[:100]","ee014b69":"# Pearson correlation\nfrom scipy.stats import pearsonr\n\npearson_corr = {}\n\nfor user_id, books in top_users:\n    # Books should be sorted\n    books = books.sort_values(by='book_id')\n    book_list = books['book_id'].values\n\n    new_user_ratings = new_user[new_user['book_id'].isin(book_list)]['rating'].values \n    user_ratings = books[books['book_id'].isin(book_list)]['rating'].values\n\n    corr = pearsonr(new_user_ratings, user_ratings)\n    pearson_corr[user_id] = corr[0]","550236ba":"# Get top50 users with the highest similarity indices\npearson_df = pd.DataFrame(columns=['user_id', 'similarity_index'], data=pearson_corr.items())\npearson_df = pearson_df.sort_values(by='similarity_index', ascending=False)[:50]\npearson_df","91b2b580":"# Get all books for these users and add weighted book's ratings\nusers_rating = pearson_df.merge(ratings_df, on='user_id', how='inner')\nusers_rating['weighted_rating'] = users_rating['rating'] * users_rating['similarity_index']\nusers_rating","615ed771":"# Calculate sum of similarity index and weighted rating for each book\ngrouped_ratings = users_rating.groupby('book_id').sum()[['similarity_index', 'weighted_rating']]","f4e9bf4f":"recommend_books = pd.DataFrame()\n\n# Add average recommendation score\nrecommend_books['avg_reccomend_score'] = grouped_ratings['weighted_rating']\/grouped_ratings['similarity_index']\nrecommend_books['book_id'] = grouped_ratings.index\nrecommend_books = recommend_books.reset_index(drop=True)\n\n# Left books with the highest score\nrecommend_books = recommend_books[(recommend_books['avg_reccomend_score'] == 5)]\nrecommend_books","65dbfe07":"# Let's see our recomendations\nrecommendation = books_df[books_df['book_id'].isin(recommend_books['book_id'])][['authors', 'title', 'book_id']].sample(10)\nrecommendation","499ab0b6":"\"\"\"\nUser object attributes:\n\n    user likes\n    user played(audio)\n    users liked audio(from other people)\n    users interacted tags\n    user lat\n    user lng\n    user replies\n\"\"\"\nimport pandas as pd\nimport numpy as np\n# Pearson correlation\nfrom scipy.stats import pearsonr\n\nuser_info = {'Martin Eden': 5,\n            'Pet Sematary': 5,\n            'One Hundred Years of Solitude': 5,\n            'Ham on Rye': 5,\n            'The Grapes of Wrath': 4, \n            \"Cat's Cradle\": 5,\n            'Crime and Punishment': 4,\n            'The Trial': 4}","8398edb9":"ratings_df","99e8803e":"def user_colab(user,others,db_features):\n    # Create dataframe for new user (me)\n    user = pd.DataFrame(columns=['hashtag', 'likes'], data=user.items())\n\n    # Add book_id from books_df\n    new_user = pd.merge(user, db_features, on='hashtag', how='inner')\n    new_user = new_user[['book_id', 'hashtag', 'likes']].sort_values(by='book_id')\n\n    other_users = others[others['book_id'].isin(new_user['book_id'].values)]\n\n    # Sort users by count of most mutual books with me\n    users_mutual_books = other_users.groupby(['user_id'])\n    users_mutual_books = sorted(users_mutual_books, key=lambda x: len(x[1]), reverse=True)\n\n    pearson_corr = {}\n\n    for user_id, features in top_users:\n        # Books should be sorted\n        features = features.sort_values(by='book_id')\n        features_list = features['book_id'].values\n\n        new_user_ratings = new_user[new_user['book_id'].isin(features_list)]['likes'].values \n        user_ratings = features[features['book_id'].isin(features_list)]['rating'].values\n\n        corr = pearsonr(new_user_ratings, user_ratings)\n        pearson_corr[user_id] = corr[0]\n\n    # Get top50 users with the highest similarity indices\n    pearson_df = pd.DataFrame(columns=['user_id', 'similarity_index'], data=pearson_corr.items())\n    pearson_df = pearson_df.sort_values(by='similarity_index', ascending=False)[:50]\n\n    # Get all books for these users and add weighted book's ratings\n    users_rating = pearson_df.merge(ratings_df, on='user_id', how='inner')\n    users_rating['weighted_rating'] = users_rating['rating'] * users_rating['similarity_index']\n\n    # Calculate sum of similarity index and weighted rating for each book\n    grouped_ratings = users_rating.groupby('book_id').sum()[['similarity_index', 'weighted_rating']]\n\n    recommend_tags = pd.DataFrame()\n\n    # Add average recommendation score\n    recommend_tags['avg_reccomend_score'] = grouped_ratings['weighted_rating']\/grouped_ratings['similarity_index']\n    recommend_tags['book_id'] = grouped_ratings.index\n    recommend_tags = recommend_books.reset_index(drop=True)\n\n    # Left books with the highest score\n    recommend_tags = recommend_books[(recommend_books['avg_reccomend_score'] == 5)]\n    return recommend_tags\n\nbooks_df.rename(columns={\"title\":\"hashtag\"},inplace=True)\nuser_colab(user_info,ratings_df,books_df)","83144d9e":"Now let's calculate a similarity score for each user using Pearson correlation function and use these scores as weights later. ","09ce3f56":"User-based collaborative filtering. This technique uses other users to recommend items to the input user. It attempts to find users that have similar preferences and opinions as the input and then recommends items that they have liked to the input. <br>\n\nI am going to use simple method here based on the Pearson Correlation using pandas. It's a simple approach and it doesn't cover many topics, but it good for get acquainted with recommender systems. <br>\n\nP.S. In this notebook I use updated version of dataset from [ here ](https:\/\/github.com\/zygmuntz\/goodbooks-10k)","f191bc9f":"Let's have a look for list of 10 recommendation. ","7f56457f":"I will be using only first 100 records, these with the most common part of books","9a96248b":"18637 users had read at least one book from my list. ","6dd018f4":"Now it rests only calculate average recommendation score and select items with the highest score. <br>","a364f612":"As a fan of literature I prepared my own list of some my favourite books (you can also use any user from dataset): \n\n   - Jack London _\"Martin Eden\"_ <br>\n   - Franz Kafka _\"The trial\"_ <br>\n   - Stephen King _\"Pet Sematary\"_ <br>\n   - Gabriel Garcia Markes _\"One Hundred Years of Solitude\"_ <br>\n   - Charles Bukowski _\"Ham on Rye\"_ <br>\n   - John Steinbeck _\"The Grapes of Wrath\"_ <br>\n   - Kurt Vonnegut _\"Cat's Cradle\"_ <br>\n   - Fedor Dostoyevsky _\"Crime and Punishment\"_ <br>\n\nAnd below I rated these books.","b7de11cb":"Select a users with books I have read."}}