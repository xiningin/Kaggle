{"cell_type":{"3404e352":"code","bb1d7e53":"code","5f1ed2df":"code","f3394636":"code","e056ffb0":"code","a1f0538c":"markdown","e33a4a0b":"markdown","001257bb":"markdown","bd0cbb28":"markdown"},"source":{"3404e352":"import numpy as np\nimport pandas as pd","bb1d7e53":"def collect_predictions(predictions, rank=False):\n    '''\n    Collect and normalize predictions into a dataframe.\n    '''\n\n    results = pd.DataFrame()\n\n    if rank:\n        for i, ds in enumerate(predictions):\n            results[f'target_{i+1}'] = ds['target'].rank()\n\n    else:\n        for i, ds in enumerate(predictions):\n            ds['target'] = (ds['target'] - ds['target'].min())\/(ds['target'].max() - ds['target'].min())\n            results[f'target_{i+1}'] = ds['target']\n        \n    return results\n\ndef compute_average(results, weighted=True, save=True):\n    '''\n    Create (weighted) average based on the performance of each submission.\n    '''\n\n    submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\n    \n\n    if weighted:\n        # Calculate numerator and denominator\n        n = results.shape[1]\n        numer = 0\n        for i in range(1, n+1):\n            numer += results[f'target_{i}']*(n+1-i)\n        denom = (n*(n+1))\/2\n\n        submission['target'] = numer\/denom\n    \n    else:\n        submission['target'] = results.mean(axis=1)\n\n    if save:\n        submission.to_csv(\"submission.csv\", index=False)\n\n    return submission","5f1ed2df":"pred_1 = pd.read_csv('..\/input\/simple-overfitted-stacking-lgbm-xgb-cb\/LGBM.csv')\npred_2 = pd.read_csv('..\/input\/tps-oct-21-eda-modeling\/submission.csv')\npred_3 = pd.read_csv('..\/input\/tps-1021-xgboost-with-twist\/XGB_Submission.csv')\npred_4 = pd.read_csv('..\/input\/tps-10-lgbm-onemodel-threeseeds-blend\/random_seeds_blending_submission.csv')\npred_5 = pd.read_csv('..\/input\/tps10-optuna-xgb-catb-lgbm-stacking\/stacked_submission.csv')\npred_6 = pd.read_csv('..\/input\/stacking-ensemble-tutorial\/sub.csv')\npred_7 = pd.read_csv('..\/input\/tps-10-21-triple-boost-stacking\/stack_submission.csv')\npred_8 = pd.read_csv('..\/input\/tps-oct-2021-single-lightgbm\/submission.csv')\npred_9 = pd.read_csv('..\/input\/tps-1021-lightgbm-with-twist\/LGB_Submission.csv')\npred_10 = pd.read_csv('..\/input\/tps-10-single-lgbm-model\/lgbm_baseline.csv')\npred_11 = pd.read_csv('..\/input\/tps-10-stacking-mlp-xgb-cb-lgbm\/catboost_test.csv')\npred_12 = pd.read_csv('..\/input\/tps-10-stacking-mlp-xgb-cb-lgbm\/lgbm_test.csv')\n\npredictions = [pred_1, pred_2, pred_3, pred_4, pred_5]\npredictions = [pred_1, pred_2, pred_3]","f3394636":"# Collect and normalize predictions\n\nresults = collect_predictions(predictions, rank=False)","e056ffb0":"submission = compute_average(results, weighted=True)\n\nsubmission.head()","a1f0538c":"## Define functions","e33a4a0b":"## Load outputs","001257bb":"## Import libraries","bd0cbb28":"## Create final submission"}}