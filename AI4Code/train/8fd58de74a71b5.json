{"cell_type":{"22d2c3ec":"code","0f91c6d6":"code","4d1de35b":"code","939463c2":"code","f18a2d22":"code","87d68dbc":"code","540da106":"code","dd01acbe":"code","3f0471a1":"code","a8042e45":"code","25e23029":"code","5186f841":"code","c3d6bfd5":"code","dc6fc19f":"code","c963fec9":"code","7cf6e4c6":"code","cca6e365":"code","711f193a":"markdown","2794bf6a":"markdown","d316dfbf":"markdown","45d361bd":"markdown","453bb1a2":"markdown","ab5eebfc":"markdown","2032d55d":"markdown"},"source":{"22d2c3ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f91c6d6":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","4d1de35b":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","939463c2":"sns.countplot(train_data['Survived'],hue=train_data['Sex'])\nDead, lives = train_data.Survived.value_counts()\nmale, female = train_data.Sex.value_counts()\nprint(\"Percentage of Male :\", round(male\/(male+female)*100),'%' )\nprint(\"Percentage of Female :\", round(female\/(male+female)*100 ),'%')","f18a2d22":"sns.countplot(train_data['Survived'],hue=train_data['Pclass'])","87d68dbc":"sns.countplot(train_data['Survived'],hue=train_data['Parch'])","540da106":"train_data.replace('male',1, inplace=True)\ntrain_data.replace('female',0,inplace=True)","dd01acbe":"not_zero = ['Age']\n\nfor column in not_zero:\n    mean = int(train_data[column].mean(skipna=True))\n    train_data[column] = train_data[column].replace(np.NaN,mean)","3f0471a1":"X = train_data[['Pclass','Sex','Age','SibSp','Parch','Fare']]\ny=train_data.Survived","a8042e45":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test=train_test_split(X,y, test_size=0.2)","25e23029":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier(criterion='entropy',max_depth=3)\nmodel.fit(X_train,y_train)","5186f841":"y_pred=model.predict(X_test)\ny_pred","c3d6bfd5":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_pred,y_test)","dc6fc19f":"pred=model.predict([[1,0,38.0,1,0,71.2833]])\nif pred ==1:\n    print(\"The person is Survived\")\nelse:\n    print(\"The person is not Survived\")\npred","c963fec9":"pred=model.predict([[1,1,55.0,1,0,80.233]])\nif pred ==1:\n    print(\"The person is Survived\")\nelse:\n    print(\"The person is not Survived\")\npred","7cf6e4c6":"survivors = pd.DataFrame(y_pred, columns = ['Survived'])\nlen(survivors)\nsurvivors.insert(0, 'PassengerId', test_data['PassengerId'], True)\nsurvivors","cca6e365":"survivors.to_csv('Submission.csv', index = False)","711f193a":"<h2>Decision Tree<\/h2>","2794bf6a":"<h2>Make a Prediction<\/h2><br>\nLet make prediction with decision tree model","d316dfbf":"<h2>Final Prediction<\/h2><br>\nCheck the value of prediction is correct or not.","45d361bd":"<h2>Split the Data<\/h2> <br>\nsplit the data using train_test_split method.","453bb1a2":"The prediction value is correct.","ab5eebfc":"<h2>Data Preprocessing <\/h2><br>\nThis part is data visualization of given data and more understanding with model.","2032d55d":"<h2>Evaluate the score<\/h2>"}}