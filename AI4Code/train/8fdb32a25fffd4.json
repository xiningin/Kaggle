{"cell_type":{"d28fc416":"code","c9b724cc":"code","a83a6920":"code","9f8c2580":"code","53c04a96":"code","ee660b90":"code","aad6bfe9":"code","9c2723a8":"code","35799f85":"code","81b9bd16":"code","9be6ad47":"code","180ffe0c":"code","df4f1910":"code","9977efc4":"code","841405f9":"code","790d100f":"code","df06dfed":"code","98d4b8ef":"code","47fe60d8":"code","883bcd6b":"code","22d94f3b":"code","384d1bb5":"code","3e07d989":"code","7fc44fb3":"code","095d5d9f":"code","ea80cafc":"markdown"},"source":{"d28fc416":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9b724cc":"train_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint (train_data.shape)\nprint (test_data.shape)","a83a6920":"X = train_data.iloc[:, 1:].values\ny = train_data.iloc[:, 0].values\n\nprint (X.shape)\nprint (y.shape)","9f8c2580":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","53c04a96":"X_copy = X.copy()\nX_copy.shape","ee660b90":"X = X_copy.copy()\nX = X.reshape(X.shape[0], 28, 28, 1)\nX.shape","aad6bfe9":"y = y.reshape(y.shape[0], 1)\nprint (y.shape)","9c2723a8":"from sklearn.preprocessing import OneHotEncoder\n\nenc = OneHotEncoder(sparse=False)\ny = enc.fit_transform(y)\n\nprint (y.shape)","35799f85":"import tensorflow as tf\n\nmodel = tf.keras.models.Sequential()\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[28, 28, 1]))\nmodel.add(tf.keras.layers.MaxPool2D())\n\nmodel.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D())\n\nmodel.add(tf.keras.layers.Flatten())\n\n# model.add(tf.keras.layers.Dense(units=784, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=50, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=10, activation='softmax'))\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","81b9bd16":"model.fit(X, y, batch_size=32, epochs=100)","9be6ad47":"y_hat = model.predict(X)\nprint (y_hat.shape)","180ffe0c":"y_hat = enc.inverse_transform(y_hat)\nprint (y_hat.shape)","df4f1910":"y_hat = y_hat.reshape(y_hat.shape[0],)\nprint (y_hat.shape)","9977efc4":"y = enc.inverse_transform(y)\nprint (y.shape)","841405f9":"y = y.reshape(y.shape[0],)\nprint (y.shape)","790d100f":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y, y_hat)","df06dfed":"test_data.shape","98d4b8ef":"X_test = test_data.iloc[:, :].values\nprint (X_test.shape)","47fe60d8":"X_test = scaler.transform(X_test)","883bcd6b":"X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_test.shape","22d94f3b":"y_pred = model.predict(X_test)\nprint (y_pred.shape)","384d1bb5":"y_pred = enc.inverse_transform(y_pred)\nprint (y_pred.shape)","3e07d989":"y_pred = y_pred.reshape(y_pred.shape[0],)\nprint (y_pred.shape)","7fc44fb3":"submission_data = pd.DataFrame()\nsubmission_data['ImageId'] = test_data.index + 1\nsubmission_data['Label'] = y_pred\nsubmission_data.head()","095d5d9f":"submission_data.to_csv('submission.csv', index=False)","ea80cafc":"**Load Data from CSV**"}}