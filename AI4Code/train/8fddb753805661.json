{"cell_type":{"ce096c02":"code","4cd62d07":"code","b1ec92c2":"code","530bb1c0":"code","02bd4525":"code","468b6524":"code","e0e4e039":"code","84fb4d18":"code","13d6725d":"code","15462e7c":"code","242125dd":"code","1ab4bc63":"code","8179b5ab":"code","642e9938":"code","efefc787":"markdown","767eee34":"markdown","55354067":"markdown","d8106456":"markdown","ed735b0c":"markdown","4b7c3235":"markdown","0c8231b4":"markdown","4f3442d7":"markdown"},"source":{"ce096c02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cd62d07":"from tensorflow import keras\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n%matplotlib inline","b1ec92c2":"df_ = pd.read_csv(\"\/kaggle\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv\")\ndf = df_.copy()\ndf","530bb1c0":"df.shape","02bd4525":"df.duplicated().sum()\n","468b6524":"df.info()\n","e0e4e039":"df.corr()\n","84fb4d18":"\nfeatures = [feature for feature in df.columns if feature not in ['id','State\/UTs']]\n\nunique_values_train = np.zeros(2)\nfor feature in features:\n    temp = df[feature].unique()\n    unique_values_train = np.concatenate([unique_values_train, temp])\nunique_values_train = np.unique(unique_values_train)\n\nunique_value_feature_train = pd.DataFrame(df[features].nunique())\nunique_value_feature_train = unique_value_feature_train.reset_index(drop=False)\nunique_value_feature_train.columns = ['Features', 'Count']\nplt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(3, 6), facecolor='#f6f5f5')\ngs = fig.add_gridspec(3, 1)\ngs.update(wspace=0.4, hspace=0.1)\n\nbackground_color = \"#f6f5f5\"\nsns.set_palette(['#ffd514']*75)\n\nax0 = fig.add_subplot(gs[0, 0])\nfor s in [\"right\", \"top\"]:\n    ax0.spines[s].set_visible(False)\nax0.set_facecolor(background_color)\nax0_sns = sns.barplot(ax=ax0, y=unique_value_feature_train['Features'], x=unique_value_feature_train['Count'],\n                      zorder=2, linewidth=0, orient='h', saturation=1, alpha=1)\nax0_sns.set_xlabel(\"Unique Values\",fontsize=4, weight='bold')\nax0_sns.set_ylabel(\"Features\",fontsize=4, weight='bold')\nax0_sns.tick_params(labelsize=4, width=0.5, length=1.5)\nax0_sns.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0_sns.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.text(0, -1.9, 'Unique Values - Train Dataset', fontsize=6, ha='left', va='top', weight='bold',bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.5))\nax0.text(0, -1.2, 'Max unique values 36', fontsize=4, ha='left', va='top')\n# data label\nfor p in ax0.patches:\n    value = f'{p.get_width():.0f}'\n    x = p.get_x() + p.get_width() + 1\n    y = p.get_y() + p.get_height() \/ 2 \n    ax0.text(x, y, value, ha='left', va='center', fontsize=4, \n            bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\n\nax0.set_anchor('C')  \n\nplt.show()","13d6725d":"df.head()","15462e7c":"x=df.iloc[:,1:7]\ny=df[[\"Death Ratio\"]]\nfrom sklearn.tree import DecisionTreeRegressor\ndr = DecisionTreeRegressor()\ndr.fit(x,y)\ny_pred = dr.predict(x)\n","242125dd":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y, y_pred)\n","1ab4bc63":"y_pred[0:5]","8179b5ab":"y.head()","642e9938":"new_day = [10,2,1000,0,0.02,99.98]\ndr.predict([new_day])","efefc787":"Simple forecasting for some day, I am hoping that cases will be that lowness..","767eee34":"# Our dataset is quitely small that's why we should use more simple models. It can be more learning path for regression models.","55354067":"# I hope Covid-19 will be in the past as soon as possible","d8106456":"> Now let's make predictions and start with lightgbm.","ed735b0c":"![](http:\/\/www.paho.org\/sites\/default\/files\/styles\/flexslider_full\/public\/2021-07\/covid-variants-1500px.jpg?h=dd617f3c&itok=rrTfvYyg)","4b7c3235":"*In the correlation, we all expected that total cases and deaths & active ratio and Discharge ratio in a high correlation.*","0c8231b4":"**Let's check the unique values of dataframe**","4f3442d7":"Now let's check the accuracy score.."}}