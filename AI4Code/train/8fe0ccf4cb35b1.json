{"cell_type":{"38ef905d":"code","790dae22":"code","2e6c8b17":"code","2406013b":"code","4675c948":"code","66cbce97":"code","2dae8c2c":"code","8df14dab":"code","5f782dfc":"code","73c5f3a9":"code","50fb36c3":"code","e9cd6ae3":"code","a9f2656f":"code","5c560d14":"code","f1854e89":"code","84df86fc":"code","93c00b9c":"code","9e8483b4":"code","df96d6db":"markdown","a0661cd0":"markdown","e311f4f1":"markdown","37788b36":"markdown","c01fe65d":"markdown","103cd02b":"markdown","7c0a61e3":"markdown","c56028b7":"markdown","30d9dba7":"markdown","7e5f4ce6":"markdown","b2f6bf1b":"markdown","844663e8":"markdown","93d3c254":"markdown","e036ce84":"markdown","d41ba436":"markdown","d662110d":"markdown","2cca0af2":"markdown","a0b18276":"markdown"},"source":{"38ef905d":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom xgboost import XGBRegressor ","790dae22":"# Import Dataset\ndf = pd.read_csv(r\"..\/input\/regression-with-neural-networking\/concrete_data.csv\")","2e6c8b17":"# Any missing values ?\ndf.isna().sum()","2406013b":"# What are the datatypes of our variables ?\ndf.info()","4675c948":"# Summary statistics\ndf.describe()","66cbce97":"# Independent and Dependent variables\nX = df[1:]\ny = df['Strength']","2dae8c2c":"# Kernal Density plots to see the distribution of variables\nsns.set(style=\"white\") \nplt.figure(figsize = (20 , 20))\nfor variable in range(9):\n    plt.subplot(4, 3, variable + 1)\n    sns.kdeplot(df[list(X)[variable]], shade = True, color=\"green\")\nplt.show()","8df14dab":"# Observations at the 75th percentile (46) are considered optimal. Anything lower than 46 is suboptimal.\ndf['target_binary'] = np.where( df.Strength > 46, 'optimal', 'suboptimal')","5f782dfc":"# Boxplots of good and suboptimal compressive strength against ingredients.\nsns.set(style=\"white\") \nplt.figure(figsize = (20 , 60))\nfor variable in range(8):\n    plt.subplot(15,3 , variable + 1)\n    sns.boxplot(x = df['target_binary'], y =df[list(X)[variable]],  palette='Set1' )\nplt.show()","73c5f3a9":"# Creating 3 bins out of the response variable.\ndf['target_cat'] = pd.cut(df.Strength,\n                     bins=[0, 23, 34, 46, 82],\n                     labels=[\"Good\", \"Better\", \"Great\", \"Perfect\"])","50fb36c3":"# Boxplots of good and bad compressive strength against ingredients.\nsns.set(style=\"white\") \nplt.figure(figsize = (20 , 60))\nfor variable in range(9):\n    plt.subplot(15,3 , variable + 1)\n    sns.boxplot(x = df['target_cat'], y = df[list(X)[variable]],  palette='Set1' )\nplt.show()","e9cd6ae3":"# Lets make subsets of the independent and dependent variables\nX =  df.drop(columns=['Strength', 'target_cat', 'target_binary'])\ny =  df['Strength']","a9f2656f":"# Lets deploy a correlogram for colrrelation\ncolormap = plt.cm.Blues\nplt.figure(figsize=(10,8))\nsns.heatmap(df.corr(), cmap=colormap, annot=True, linewidths=0.2)","5c560d14":"# Split the dataset into training and testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle = True, random_state = 43)\n\n# Feature Scaling \nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test =sc.transform(X_test)","f1854e89":"# Store models in a dictionary\nalgorithms = {\"KNN\": KNeighborsRegressor(),\n          \"Linear Regression\": LinearRegression(), \n          \"Ridge Regression\": Ridge(),\n          \"Random Forest\": RandomForestRegressor(),\n          \"SVR RBF\": SVR(),\n          \"Linear SVR\": LinearSVR(),\n          \"Decision Tree\":DecisionTreeRegressor(),\n          \"Adaboost\" :AdaBoostRegressor(),\n          \"Gradient Boosting\":GradientBoostingRegressor(),\n          \"Neural Network\": MLPRegressor(max_iter=10000) ,\n          \"XGBRegressor\" : XGBRegressor()}\n\n\n# Create function to train and test the model\ndef train_and_test(algorithms, X_train,y_train,X_test,y_test):\n    model_scores = {}\n    for name, model in algorithms.items():\n        model.fit(X_train, y_train)\n        print(name + \" R2: {:.2f}\".format(model.score(X_test, y_test)))\n\n# Training and testing\nmodel_scores = train_and_test(algorithms, X_train, y_train, X_test, y_test)","84df86fc":"# XGboost on the default settings seems to outperform all other models.\nestimator = XGBRegressor()\nestimator.fit(X_train, y_train)\nprint(\"R2: {:.2f}\".format(estimator.score(X_test, y_test)))","93c00b9c":"# Lets set up a gridsearch CV and optimize some hyperparameters\nparam_grid       =      {\"learning_rate\": (0.05, 0.10, 0.15, 0.2),\n                         \"max_depth\": [5, 6, 8],\n                         \"min_child_weight\": [ 5, 7, 9, 11],\n                         \"gamma\":[ 0.0, 0.1, 0.2, 0.25],\n                         \"colsample_bytree\":[ 0.3, 0.4, 0.5, 0.7],\n                          \"n_estimators\": [1000]}\n\n# GridSearchCV\noptimized_estimator =  GridSearchCV(estimator, param_grid)\noptimized_estimator.fit(X_train, y_train)\n\n# Retrieve Best Parameters\noptimized_estimator.best_params_\nfor i, j in optimized_estimator.best_params_.items():\n    print(\"\\nBest \" + str(i) + \" parameter: \" +  str(j))","9e8483b4":"print(\"XGBoost R2 after hyperparametric Tuning: {:.2f}\".format(optimized_estimator.score(X_test, y_test)))","df96d6db":"# 1.1 Univariate Analysis","a0661cd0":"# Context\n\nConcrete is one of the most important materials in civil engineering. Concrete's compressive strength is a highly nonlinear function of age and ingredients.\n\n# Business Problem\n\nThis is a supervised regression problem. The objective is to accurately predict the strength of steel using various ingredients used in the production of concrete.\n\n\n# Data\n\nThe dataset contains 1030 observations accross 8 input variables and an output variable. The variable name, variable type, the measurement unit and a brief description is provided.\n\n  **Name --              Data Type --      Measurement --       Description**\n\nCement (component 1) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nBlast Furnace Slag (component 2) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nFly Ash (component 3) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nWater (component 4) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nSuperplasticizer (component 5) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nCoarse Aggregate (component 6) -- quantitative -- kg in a m3 mixture -- Input \n\nFine Aggregate (component 7) -- quantitative -- kg in a m3 mixture -- Input Variable\n\nAge -- quantitative -- Day (1~365) -- Input Variable\n\nConcrete compressive strength -- quantitative -- MPa -- Output Variable|\n\n\n# Acknowledgements\n\nOriginal Owner and Donor\n\nProf. I-Cheng Yeh\n\nDepartment of Information Management\n\nChung-Hua University\n\nCitation Request:\n\nI-Cheng Yeh, \"Modeling of strength of high performance concrete using artificial neural networks,\" Cement and Concrete Research, Vol. 28, No. 12, pp. 1797-1808 (1998).\n","e311f4f1":"# 4) Conclusion\n\nThis notebook performed supervised learning to predict the compressive strength of concrete using various ingredients used to produce concrete. The tasks carried out in this report inlclude exploratory data analysis through visualizations and statistics, followed by preprocessing, modelling and hyperparametric tuning. There is still room for imporvement but I'll stop here for now. ","37788b36":"# **Thank you for reading ! :D**","c01fe65d":"# 3) Predictive Modelling","103cd02b":"All predictors in the dataset are quantitative datatypes. Moreover, there are no missing values in the data. Lets analyse the probability distribution of the variables through a series of univariate density plots. ","7c0a61e3":"There seem to be some interesting patterns between the ingredients and the strength of the product. Greater quantities of cement and superplasticizer and lower amounts of water seems to correlate with a stronger product. The boxplot also indicates the presence of outliers. Lets create a pearsons correlation correlogram to quantitatively detect these associations.  ","c56028b7":"Some intersting patterns between cement, water, superplasticizer and strength. Lets further split the target variable into 4 categories good, better, great, perfect to further refine this visualization.","30d9dba7":"Most variables do not follow normal distribution. It would be interesting to convert the response variable into a category of 'optimal' and 'suboptimal' in order to detect any interesting patterns between the predictors and the target variable. I'll conisder the observations at the 75th percentile or greater to be good.","7e5f4ce6":"The pearsons correlation assumes normality, linearity, homoscedasticity and no outliers. These assumptions are violated for most variables. This may be a potential reason as to why pearsons correlation won't detect nuances between predictors and the independent variables properly. Additionally, the relationship between inputs does seem to be largely non-linear. Nonetheless, cement, water, and superplastisizer do seem to be moderately correlated with strength.","b2f6bf1b":"# 1.2 Bivariate Analysis","844663e8":"The model seems to have improved very slightly. ","93d3c254":"Lets apply a number of linear and non linear regression models and retrieve their predictive accuracy.","e036ce84":"Some machine learning algorithms require features to be scaled through normalization or standardization. I will now split the dataset into training and testing and then perform standardization. This will tansform the features such that their mean and standard deviation will become 0 and 1.","d41ba436":"The non-linear algorithms perform far better than their linear counterparts. Amongst the non-linear models XGBoost seems to outperform all other models. I will now set a grid search and perform hyperparametric tuning to try and further enhance its performance.","d662110d":"# 2) Data Preprocessing","2cca0af2":"# Importing Libraries & Data","a0b18276":"# 1) Exploratory Data Analysis"}}