{"cell_type":{"764e54ed":"code","069c306d":"code","6a7c5386":"code","9513f91e":"code","7b91b81c":"code","88deea0c":"code","50a2482a":"code","713a9cf0":"code","3f3b18e4":"code","9f783d65":"code","a699dd3f":"code","d24cda16":"code","0bddbd1d":"code","5da51870":"code","0dacb25b":"code","658df947":"code","9e0a91c2":"code","cdc98e5c":"code","debce21c":"code","6ceed696":"code","f3f12e3e":"code","6f2a66f9":"code","5d57f8a2":"code","acd08840":"code","7ceb845f":"code","87f1a143":"code","db6d8ac1":"code","daea7c3f":"code","176aea1d":"code","8cfbc036":"code","c1cd7049":"markdown","66c4c644":"markdown","bd397ee0":"markdown","4a739e14":"markdown","b16b3d70":"markdown","2a12505c":"markdown","c867a6bb":"markdown","5a951fd2":"markdown","c83f88c8":"markdown","bffaf4be":"markdown","84afeb0f":"markdown","1149ed6d":"markdown","d4990638":"markdown","83ed908d":"markdown","34e16b37":"markdown"},"source":{"764e54ed":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.model_selection import train_test_split\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","069c306d":"df_credits = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\ndf_movies = pd.read_csv('..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","6a7c5386":"df_credits.info()","9513f91e":"df_movies.info()","7b91b81c":"df_credits.rename(columns = {'movie_id':'id'}, inplace = True)","88deea0c":"df_movies.drop('original_title', axis = 1, inplace = True)","50a2482a":"df_merged = pd.merge(df_credits, df_movies, on = ['id','title'])","713a9cf0":"from ast import literal_eval\n\njson_cols = ['cast', 'crew', 'genres', 'keywords','production_companies', 'production_countries','spoken_languages']\n\nfor col in json_cols:\n    df_merged[col] = df_merged[col].apply(literal_eval)","3f3b18e4":"def get_genre(x):\n    if(isinstance(x, list)):\n        genre = [i['name'] for i in x]\n    \n    return genre\n\ndef get_jobs(x):\n    if(isinstance(x, list)):\n        jobs = [i['job'] for i in x]\n    return jobs\n\ndef get_characternames(x):\n    if(isinstance(x, list)):\n        chr_name = [i['character'] for i in x]\n        countc = 0\n        for j in chr_name:\n            if('(voice)' in j):\n                countc += 1\n        if(len(chr_name)!=0):\n            return (countc\/len(chr_name))\n        else:\n            return 0\n        \ndef get_labels(x):\n    if(len(x)==0):\n        return np.nan\n    elif('Animation' in x):\n        return 1\n    else:\n        return 0\n\ndef get_costume_labels(x):\n    if 'Costume Design' in x:\n        return 1\n    else:\n        return 0\n    \ndef get_genre_cd(x):\n    if(isinstance(x, list)):\n        dept = [i['department'] for i in x]\n    if 'Lighting' in dept:\n        return 0\n    else:\n        return 1","9f783d65":"df_merged['genres'] = df_merged['genres'].apply(get_genre)\ndf_merged['crew_jobs'] = df_merged['crew'].apply(get_jobs)\ndf_merged['percent_of_voice_artists'] = df_merged['cast'].apply(get_characternames)\ndf_merged['labels'] = df_merged['genres'].apply(get_labels)\ndf_merged['costume'] = df_merged['crew_jobs'].apply(get_costume_labels)\ndf_merged['lighting_dept'] = df_merged['crew'].apply(get_genre_cd)","a699dd3f":"for x in range(0,len(df_merged['percent_of_voice_artists'])):\n    df_merged['percent_of_voice_artists'][x] = np.round(df_merged['percent_of_voice_artists'][x],3)","d24cda16":"df_merged.labels.isna().sum()","0bddbd1d":"idxsc = df_merged[((df_merged.labels != 1) & (df_merged.labels != 0))].index\ndf_merged.drop(idxsc, inplace = True)\ndf_merged.reset_index(drop= True, inplace= True)","5da51870":"df_merged.isna().sum()","0dacb25b":"AnimatedMoviesCount = np.sum(df_merged['labels'] == 1)\nNotAnimatedMoviesCount = np.sum(df_merged['labels'] == 0)\n\nprint(\"Number of Animated Movies are: \", AnimatedMoviesCount)\nprint(\"Number of Not Animated Movies are: \", NotAnimatedMoviesCount)","658df947":"df_merged.costume.value_counts()","9e0a91c2":"df_merged.lighting_dept.value_counts()","cdc98e5c":"c = np.where(df_merged.labels==1)[0]\nsum_budget = 0\nfor x in c:\n    sum_budget += df_merged.budget[x]\navg_budget = sum_budget\/len(c)\nprint(\"Average Budget of Animated Movie: \",str(avg_budget))","debce21c":"idx=[]\nfor x in range(0,df_merged.shape[0]):\n    if len(df_merged.crew_jobs[x])>7:\n        idx.append(x)\nprint(\"Number of Movies with more than 7 crew members: \",str(len(idx)))\n\ndf = df_merged.iloc[idx,:]","6ceed696":"AnimatedMoviesCount2 = np.sum(df['labels'] == 1)\nNotAnimatedMoviesCount2 = np.sum(df['labels'] == 0)\n\nprint(\"Number of Animated Movies are: \", AnimatedMoviesCount2)\nprint(\"Number of Not Animated Movies are: \", NotAnimatedMoviesCount2)","f3f12e3e":"def join_strings(x):\n    return \", \".join(x)\n\ndef str_lower(x):\n    return x.lower()\n\ndf['crew_jobs'] = df['crew_jobs'].apply(join_strings)\ndf['crew_jobs'] = df['crew_jobs'].apply(str_lower)","6f2a66f9":"df['labels'].value_counts()","5d57f8a2":"X1 = df['crew_jobs']\nY1 = df['labels']","acd08840":"from sklearn.model_selection import train_test_split\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X1, Y1, test_size=0.20, random_state=53)","7ceb845f":"from sklearn import metrics\nfrom sklearn.metrics import accuracy_score, recall_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\ndef score_output(y_test, y_pred):\n    \n    cm = metrics.confusion_matrix(y_test, y_pred)\n    clf_report = metrics.classification_report(y_test, y_pred)\n    print(cm)\n    print(clf_report)\n    accuracy = accuracy_score(y_test, y_pred)\n    print('The Accuracy on The Test Set is: %s' % accuracy)\n\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax, fmt='d', cmap = 'inferno'); #annot=True to annotate cells\n\n    # labels, title and ticks\n    ax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); \n    ax.set_title('Confusion Matrix'); \n    ax.xaxis.set_ticklabels(['Non-Animated', 'Animated']); ax.yaxis.set_ticklabels(['Non-Animated', 'Animated']);","87f1a143":"import spacy\nnlp = spacy.load('en_core_web_sm')","db6d8ac1":"from spacy.lang.en import STOP_WORDS\nstop_words_str = \" \".join(STOP_WORDS)\nstop_words_lemma = set(word.lemma_ for word in nlp(stop_words_str))\n\nadditional_words = ['editor', 'director', 'producer', 'writer', 'assistant', 'sound']\n\nfor word in additional_words:\n    stop_words_lemma = stop_words_lemma.union({word})","daea7c3f":"def lemmatizer(text):\n     return [word.lemma_ for word in nlp(text)]","176aea1d":"from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer,TfidfTransformer\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\n\nbow = TfidfVectorizer(ngram_range = (1,1))\n\npipe = Pipeline([('bag_of_words', bow),('classifier', SVC())])\npipe.fit(X_train1,y_train1)\n\nprint(\"Without Stop Words\")\nprint('Training accuracy: {}'.format(pipe.score(X_train1,y_train1)))\ny_pred = pipe.predict(X_test1)\nscore_output(y_test1, y_pred)","8cfbc036":"bow = TfidfVectorizer(ngram_range = (1,1), stop_words = stop_words_lemma)\n\npipe2 = Pipeline([('bag_of_words', bow),('classifier', SVC())])\npipe2.fit(X_train1,y_train1)\n\n\nprint(\"With Stop Words\")\nprint('Training accuracy: {}'.format(pipe2.score(X_train1,y_train1)))\ny_pred2 = pipe2.predict(X_test1)\nscore_output(y_test1, y_pred2)","c1cd7049":"# Classification of Movies \n\nClassifying the movie as animated or not animated on the basis of crew job titles.\nThis is the inspiration of this dataset (as described in the data description)\n\nFirstly, preprocessed data and prepared it. Then used NLP and classification models for accomplishing the task.","66c4c644":"### Extracting the features from Json Columns\n\n1. Genres list (from Genres column)\n2. Jobs (from Crew column)\n3. Percentage of voice artists among total cast (from cast column)","bd397ee0":"**Without Stop Words**","4a739e14":"**With Stop Words**","b16b3d70":"### Handling the Json Columns\n\nApplying the literal_eval function of ast on all the json columns","2a12505c":"### Model to classify Movie \n\nClassifying a movie as animated or not based on the crew job titles (using the data prepared above)","c867a6bb":"Rounding off the percentage to 3 decimal places","5a951fd2":"Dropping the movies which are labelled as None\n\nThere are 28 such movies","c83f88c8":"### Merging the Datasets\n\nMerging the 2 datasets on the columns 'id' and 'title' as primary key ","bffaf4be":"Converting 'crew_jobs' from list to string (in lower form) via join function","84afeb0f":"### Taking into account only those movies having atleast 7 crew members\n\nSo as to handle the quality of training data\nTested for multiple values, but 7 yielded best result","1149ed6d":"The column 'title' and 'original_title' are equivalent\nSo dropping the 'original_title' column","d4990638":"#### Helper Functions for the same","83ed908d":"### Loading the Dataset as pandas.DataFrame","34e16b37":"It is evident from above results, SVM without stop words yields better resultd in terms of Recall, F1 score and Accuracy (Taking into count class imbalance and overfitting issues)\n\nThus, we can continue with SVM without stop words"}}