{"cell_type":{"00dca32d":"code","dfea01e2":"code","f394b412":"code","154284ae":"code","d0552405":"code","fd3224c2":"code","dd7d4d94":"code","52a30a68":"code","4a1a23ad":"code","e828907e":"code","3d385d2a":"code","6cc099e9":"code","7e006ff5":"code","6107d101":"code","d22ee6ce":"code","ecb23012":"code","e6fd1979":"code","be4df11b":"code","0967c3a3":"code","90d759bd":"code","794ddc8b":"code","13c09bc1":"code","6312ffd9":"code","b22e8c44":"code","423ad5f9":"code","f400a92b":"code","5499c610":"code","ad18386f":"code","ea3b127a":"code","7c57132c":"code","91e62da7":"code","e5199050":"code","55b1499d":"code","bdfa7388":"code","3805d19e":"code","46a5e729":"code","fa89ade4":"code","95f5a70a":"code","741dd28d":"code","57975941":"code","3747e461":"code","74a4b181":"markdown","99a47206":"markdown","c110f593":"markdown","5ad5ae7f":"markdown","fdf01b58":"markdown","b60e62d9":"markdown","d4c94aab":"markdown","af7bf5dc":"markdown","1d9d27e6":"markdown","eef330f3":"markdown","04ab14b3":"markdown","35ad6d58":"markdown","30e588f1":"markdown","e0339693":"markdown","ab4d7a64":"markdown","02940acd":"markdown","76589930":"markdown","fafa1914":"markdown","95e810f7":"markdown","6e4008ac":"markdown","6a455d9a":"markdown","efdbf281":"markdown","90d82367":"markdown","102f9d7a":"markdown","18bd8b56":"markdown","39d4f297":"markdown","02d3b364":"markdown","76ddb6d9":"markdown","cd133a5f":"markdown","08a4e8ff":"markdown","b5290dac":"markdown","67259c58":"markdown","13a6fb08":"markdown","2fbf5fdf":"markdown","c965f109":"markdown","129a0bd6":"markdown","61361e2d":"markdown","066cede6":"markdown","27b84c2f":"markdown","d22771c2":"markdown","7d715c32":"markdown","d645d639":"markdown","51924500":"markdown","c829928c":"markdown","c11215cc":"markdown","9970cf3d":"markdown","dd4e0102":"markdown","b8dcb194":"markdown"},"source":{"00dca32d":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","dfea01e2":"#Load up the dataset in dataframe data_df\ndata_df = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\n#Check the structure of our dataframe \ndata_df.head()\n","f394b412":"# Save the number of rows columns as a tuple\nrows_and_cols = data_df.shape\nprint(\"Brief Description Of Dataset country_vaccinations.csv Stored In DataFrame Object data_df:\\n\")\nprint('There are {} rows and {} columns in country_vaccinations.csv dataset.\\n'.format(rows_and_cols[0], rows_and_cols[1]))","154284ae":"# Generate an overview of the DataFrame\ncovid_rec_country_vaccine_information = data_df.info()\nprint(covid_rec_country_vaccine_information)","d0552405":"# Check whether there are Nan values or not\nprint(\"\\nBrief Description Whether DataFrame Object covid_rec_country_vaccine Consists Any NaN Values:\\n\", data_df.isna().sum(), sep=\"\")","fd3224c2":"country_vaccine = data_df.groupby([\"country\", \"iso_code\", \"vaccines\"])['total_vaccinations', \n                                                                       'total_vaccinations_per_hundred',\n                                                                      'daily_vaccinations',\n                                                                      'daily_vaccinations_per_million',\n                                                                      'people_vaccinated',\n                                                                      'people_vaccinated_per_hundred',\n                                                                       'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                                                                      ].max().reset_index()\ncountry_vaccine.columns = [\"Country\", \"iso_code\", \"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\", \"People vaccinated\", \"People vaccinated per hundred\",\n                           'People fully vaccinated', 'People fully vaccinated percent']","dd7d4d94":"vaccines = country_vaccine.Vaccines.unique()\nfor v in vaccines:\n    countries = country_vaccine.loc[country_vaccine.Vaccines==v, 'Country'].values\n    print(f\"Vaccines: {v}: \\nCountries: {list(countries)}\\n\")","52a30a68":"fig = px.choropleth(locations=country_vaccine['Country'], \n                    locationmode=\"country names\",\n                    color=country_vaccine['Vaccines'],\n                    title=\"Countries using each vaccine (different colors for each vaccine)\",\n                    height = 800\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Vaccine scheme'})\nfig.show()","4a1a23ad":"vaccine = data_df.groupby([\"vaccines\"])['total_vaccinations','total_vaccinations_per_hundred',\n                                       'daily_vaccinations','daily_vaccinations_per_million'].max().reset_index()\nvaccine.columns = [\"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\"]\ndef draw_trace_bar_vaccine(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Vaccines'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Vaccines']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest',\n              height = 800\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')","e828907e":"draw_trace_bar_vaccine(vaccine, 'Total vaccinations', 'Total per vaccine scheme', 'Vaccine', 'Vaccination total', \"darkmagenta\" )","3d385d2a":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'Total vaccinations',\n                title=\"Total vaccinations per country, grouped by vaccine scheme\")\nfig.show()","6cc099e9":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'Daily vaccinations',\n                title=\"Daily vaccinations per country, grouped by vaccine scheme\")\nfig.show()","7e006ff5":"fig = px.treemap(country_vaccine, path = ['Vaccines', 'Country'], values = 'People vaccinated',\n                title=\"People vaccinated per country, grouped by vaccine scheme\")\nfig.show()","6107d101":"def draw_trace_bar(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Country'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Country']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest'\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')\n\n","d22ee6ce":"draw_trace_bar(country_vaccine, 'Total vaccinations', 'Vaccination total per country', 'Country', 'Vaccination total', \"Darkgreen\" )","ecb23012":"draw_trace_bar(country_vaccine, 'Percent', 'Vaccination percent per country', 'Country', 'Vaccination percent' )","e6fd1979":"draw_trace_bar(country_vaccine, 'Daily vaccinations', 'Daily vaccinations per country', 'Country', 'Daily vaccinations', \"red\" )","be4df11b":"draw_trace_bar(country_vaccine, 'Daily vaccinations per million', 'Daily vaccinations per million per country', 'Country',\\\n               'Daily vaccinations per million', \"magenta\" )","0967c3a3":"draw_trace_bar(country_vaccine, 'People vaccinated', 'People vaccinated per country', 'Country',\\\n               'People vaccinated', \"lightblue\" )","90d759bd":"draw_trace_bar(country_vaccine, 'People vaccinated per hundred', 'People vaccinated per hundred per country', 'Country',\\\n               'People vaccinated per hundred', \"orange\" )","794ddc8b":"def plot_custom_scatter(df, x, y, size, color, hover_name, title):\n    fig = px.scatter(df, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title)\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.2))\n    fig.update_layout({'legend_title':'Vaccine scheme'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.show()    ","13c09bc1":"plot_custom_scatter(country_vaccine, x=\"Total vaccinations\", y=\"Percent\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Percent vs. total), grouped per country and vaccines\")","6312ffd9":"plot_custom_scatter(country_vaccine, x=\"Total vaccinations\", y=\"Daily vaccinations\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Total vs. Daily) grouped per country and vaccines\")","b22e8c44":"plot_custom_scatter(country_vaccine, x=\"Percent\", y=\"Daily vaccinations per million\", size=\"Total vaccinations\", color=\"Vaccines\",\n           hover_name=\"Country\", title = \"Vaccinations (Daily \/ million vs. Percent) grouped per country and vaccines\")","423ad5f9":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Total vaccinations'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Total vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","f400a92b":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Percent'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Percent',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Total vaccinations per hundred per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","5499c610":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Daily vaccinations'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Daily vaccinations',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Daily vaccinations per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","ad18386f":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['Daily vaccinations per million'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'Daily vaccinations per million',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'Daily vaccinations per million per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","ea3b127a":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['People vaccinated'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'People vaccinated',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'People vaccinated per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","7c57132c":"trace = go.Choropleth(\n            locations = country_vaccine['Country'],\n            locationmode='country names',\n            z = country_vaccine['People vaccinated per hundred'],\n            text = country_vaccine['Country'],\n            autocolorscale =False,\n            reversescale = True,\n            colorscale = 'viridis',\n            marker = dict(\n                line = dict(\n                    color = 'rgb(0,0,0)',\n                    width = 0.5)\n            ),\n            colorbar = dict(\n                title = 'People vaccinated per hundred',\n                tickprefix = '')\n        )\n\ndata = [trace]\nlayout = go.Layout(\n    title = 'People vaccinated per hundred per country',\n    geo = dict(\n        showframe = True,\n        showlakes = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'natural earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot(fig)","91e62da7":"country_vaccine_time = data_df[[\"country\", \"vaccines\", \"date\", 'total_vaccinations', \n                                'total_vaccinations_per_hundred',  'people_vaccinated','people_vaccinated_per_hundred',\n                               'daily_vaccinations','daily_vaccinations_per_million', \n                                'people_fully_vaccinated', 'people_fully_vaccinated_per_hundred'\n                               ]].dropna()\ncountry_vaccine_time.columns = [\"Country\", \"Vaccines\", \"Date\", 'Total vaccinations', 'Percent', 'People vaccinated', 'People percent',\n                               \"Daily vaccinations\", \"Daily vaccinations per million\", \n                                'People fully vaccinated', 'People fully vaccinated percent']","e5199050":"countries = ['Austria', 'Belgium', 'Bulgaria','Croatia', 'Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany',\n             'Greece', 'Hungary', 'Ireland', 'Israel', 'Italy', 'Latvia','Lithuania', 'Luxembourg', 'Malta',\n             'Netherlands', 'Norway','Poland', 'Portugal', 'Romania', 'Serbia', 'Slovakia', 'Spain', 'Sweden',\n             'United Kingdom', 'United States', 'China']","55b1499d":"def plot_time_variation_countries_group(data_df, feature, title, countries):\n    data = []\n    for country in countries:\n        df = data_df.loc[data_df.Country==country]\n        trace = go.Scatter(\n            x = df['Date'],y = df[feature],\n            name=country,\n            mode = \"markers+lines\",\n            marker_line_width = 1,\n            marker_size = 8,\n            marker_symbol = 'circle',\n            text=df['Country'])\n        data.append(trace)\n    layout = dict(title = title,\n          xaxis = dict(title = 'Date', showticklabels=True,zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True,\n                       tickfont=dict(size=10,color='darkblue'),), \n          yaxis = dict(title = feature, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True, type=\"log\"),\n                       plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n         hovermode = 'x', \n         height=800\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='all_countries')","bdfa7388":"plot_time_variation_countries_group(country_vaccine_time, 'Percent', 'Total vaccination percent evolution (selected countries, log scale)', countries)","3805d19e":"plot_time_variation_countries_group(country_vaccine_time, 'Total vaccinations', 'Total vaccination evolution (selected countries, log scale)', countries)","46a5e729":"plot_time_variation_countries_group(country_vaccine_time, 'People percent', 'People vaccinated percent evolution (selected countries, log scale)', countries)","fa89ade4":"plot_time_variation_countries_group(country_vaccine_time, 'People vaccinated', 'People vaccinated evolution (selected countries, log scale)', countries)","95f5a70a":"plot_time_variation_countries_group(country_vaccine_time, 'Daily vaccinations', 'Daily vaccinations evolution (selected countries, log scale)', countries)","741dd28d":"plot_time_variation_countries_group(country_vaccine_time, 'Daily vaccinations per million', 'Daily vaccinations per million evolution (selected countries, log scale)', countries)","57975941":"plot_time_variation_countries_group(country_vaccine_time, 'People fully vaccinated percent', 'People fully vaccinated percent evolution (selected countries, log scale)', countries)","3747e461":"plot_time_variation_countries_group(country_vaccine_time, 'People fully vaccinated', 'People fully vaccinated evolution (selected countries, log scale)', countries)","74a4b181":"This shows people vaccinated per country= people from different countries who got their first dose \n\nin unites states more than 100 Mpeople have got their first shot of vaccine ","99a47206":"Press **Output** button to see a list of countries where each vaccine is used. \n","c110f593":"This shows how many people are vaccinated with one dose per hundred people in a country ","5ad5ae7f":"<a id=\"4\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>How many are vaccinated (total and as percent from population)?<\/center><\/h1>\n\nLet's look now to the countries statistics, irrespective to the vaccine scheme. We will look to the top of the countries by:\n\n- Total number of vaccinations;  \n- Percent of vaccinations from entire population;  \n- Daily number of vaccinations;  \n- Daily number of vaccination per million population;  \n- People vaccinated;  \n- Percent of vaccinated people from entire population.","fdf01b58":"* Here our graph is showing us that **total vaccination spread in different parts of the world **\n* United States , North West part of Canaada and some part of china . If we check in our legend on the left it shows how in these countries vaccinatuions have exceeded even **250 Million** which s a good thing .\n* Using **plotly and iplot** building chropleth maps can present our data super clear and in a beautiful way . ","b60e62d9":"* **df.info()-** this method give sthe generic information of the data","d4c94aab":"To check if there is NA values in our data we can se **.isna()** function\n\nHere we can see the variables showing 0 will depict that it has no NA values\nCountry, Iso_code, date, vaccines, source_name and source_website cannot have NA value ","af7bf5dc":"This shows us people who are vaccinated with the first dose according to the countries and by which vaccine they were immunized","1d9d27e6":"<a id=\"2\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>What vaccines are used in each country?<\/center><\/h1>","eef330f3":"* **unique()function** - is going to tell us the name of the unique vaccines and the country associated with it \n* **.values** - this is going to find the values associated with it \n* Here we can see different vaccines and the countries which have them ","04ab14b3":"## Per countries\n\nTo see the vaccination scheme distribution per countries, we will use treemap representations. \n\nWe look to the total vaccinations, to daily vaccinations values as well as total people vaccinated.\n\n<font color=\"red\">Note<\/font>: click on a treemap item to navigate down the tree structure and expand the current branch.","35ad6d58":"## Overall\n\nLet's look first to the vaccination scheme used overall (not splitted per countries).","30e588f1":"<a id=\"3\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>Which vaccination scheme is used most?<\/center><\/h1>","e0339693":"Some countries are using a mixed vaccination scheme (they are using more than one vaccine).\n\nThe mapping is as following:\n* Moderna, Pfizer\/BioNTech - USA;  \n* CNBG, Sinovac - China;  \n* Oxford\/AstraZeneca, Pfizer\/BioNTech', 'Pfizer\/BioNTech - UK;  \n* Pfizer\/BioNTech - mostly EU;  \n* Pfizer\/BioNTech, Sinopharm - UAE;  \n* Sinovac - Turkey;   \n* Covaxin, Covishield - India;  \n\n","ab4d7a64":"***So we will be starting by importing the important libraries and packages of python which we are going to use *******","02940acd":"Here we can see that in Gibraltor vaccines are available in abundance per 100 person whereas in Saint Vincent and the grenadines there are a scarcity of vaccines per 100 people \n\nGraph from left to right shows the decreasing order od availabily of vaccines in different countries per 100 people ","76589930":"* Similarly this shows daily vaccinations per million per country \n","fafa1914":"* **px.choropleth() -** A Choropleth Map is a map composed of colored polygons in plotly library. It is used to represent spatial variations of a quantity.\nThe different colors here represent the different vaccines across different parts of the world. It gives us a description of different vaccines used in different parts of the world .\n\n* **legend_orientation:**  here is mentioned as 'v' as in vertical column representing the vaccines on the right we can even change to 'h'- horizontal\n\n* **fig.show()** -shows us the figure or plot ","95e810f7":"* Here we can see how Total vaccination per hundred people are available in different countries\n* In Israel 121 vaccines are avialble and in united Arab Emirates 109 vaccines are available per 100 people shown in greenish blue ![Screenshot 2021-05-07 at 6.31.56 PM.png](attachment:d5c1fd67-2881-407c-8c13-7962cdb2ab14.png)\n* we can see how in Saudiarabia very less vaccines are available per 100 people \n![Screenshot 2021-05-07 at 6.32.15 PM.png](attachment:5dd99f0d-04d6-4f05-924b-dce8a162f17b.png)\n\n","6e4008ac":"Here we can see how for each country there are different vaccine schemes for differnet country ","6a455d9a":"Here we are visualizing the overall vaccination scheme, so we are creating another dataset vaccine and using groupby() fuynction asgain grouping the set as per the need \nThen defining a function which draws the trace bar for the vaccination to present our overall vaccination scheme. with the dataset as vaccine and the feature as total vaccinations and ascending=False shows the order they will be sorted will be in descending order\n* **data.sort_values() -** Pandas sort_values() function sorts a data frame in Ascending or Descending order of passed Column. It\u2019s different than the sorted Python function since it cannot sort a data frame and particular column cannot be selected.\n\n* **go.bar() -** Horizontal Bar Chart with go.Bar\nsetting the x axis = vaccines variable and y axis = total vaccinations \nso we are now returning a dictionary object in marker here using dict() \n\n* **fig = dict()** - At a low level, figures can be represented as dictionaries and displayed using functions from the plotly.io module.\n\n","efdbf281":"<center><h1>COVID-19 Vaccination Progress<\/h1><\/center>\n<br>\n<center><img src=\"https:\/\/c.files.bbci.co.uk\/53A9\/production\/_115371412_gettyimages-1265248637.jpg\" width=600><\/img><\/center>  \n\n<br>\n\n<h1 style='background:#26A2AB; border:0; color:black'><center>Introduction<\/center><\/h1> \n\nThe data contains the following information:  \n\n* **Country** - this is the country for which the vaccination information is provided;     \n* **Country ISO Code** - ISO code for the country;   \n* **Date**- date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;   \n* **Total number of vaccin ations** - this is the absolute number of total immunizations in the country;  \n* **Total number of people vaccinated** - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;  \n* **Total number of people fully vaccinated** - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;  \n* **Daily vaccinations (raw)** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Daily vaccinations** - for a certain data entry, the number of vaccination for that date\/country;  \n* **Total vaccinations per hundred** - ratio (in percent) between vaccination number and total population up to the date in the country;  \n* **Total number of people vaccinated per hundred** - ratio (in percent) between population immunized and total population up to the date in the country;  \n* **Total number of people fully vaccinated per hundred** - ratio (in percent) between population fully immunized and total population up to the date in the country;   \n* **Number of vaccinations per day** - number of daily vaccination for that day and country;   \n* **Daily vaccinations per million** -  ratio (in ppm) between vaccination number and total population for the current date in the country;    \n* **Vaccines used in the country** - total number of vaccines used in the country (up to date);    \n* **Source name** - source of the information (national authority, international organization, local organization etc.);   \n* **Source website** - website of the source of information;    \n\n\n<a id=\"0\"><\/a>\n\n### Content  \n\n* <a href='#1'>Analysis preparation<\/a>  \n* <a href='#2'>What vaccines are used in each country?<\/a>    \n* <a href='#3'>Which vaccination scheme is used most?<\/a>    \n* <a href='#4'>How many are vaccinated (total and as percent from population)?<\/a>    \n* <a href='#5'>How the vaccination progressed<\/a>  \n\n","90d82367":"This shows us the daily vaccinations stock in every country ","102f9d7a":"* Shows how many people got vaccinated with one dose per 100 people at different times in different countries ","18bd8b56":"* **df.shape-** this method shows us the number of rows and col","39d4f297":"* here we are visualizing the **Daily vaccinations stock available( Y-axis )** in different countries on an average everyday as compared to the **total vaccinations(X-axis)** available at the last entry date in our dataset ","02d3b364":"Now We will use Scatter Plots to see how we can use them to visualize our data ","76ddb6d9":"This shows daily vaccination stock available per country\n\nClearly China has the largest number of stocks of daily vaccines \n\nFollowing china is United States and so on ...","cd133a5f":"This shows us the total vaccines available per hundred people in every country \n\n**Note :** Here variable percent represents original data_df variable which we named total_vaccinations_per_hundred in country_vaccine dataframe\n\nHere Gibraltar has abundant of vaccines per hundred people while Democratic Public of Congo has the scarcity of vaccines as compared to its population ","08a4e8ff":"* This shows the total vaccines available in different coiuntries at different time periods and did they had increase in the supply or they were in shortage of vaccines ","b5290dac":"* Here Using such graphs its really easy to compare data using hover ,also one of a great functionality of scatter graphs like this with a legend is that if we double click on one of the vaccinews sit shows us data related to that on the graph \n\n* here we can see we have total vaccines on our x -axis and percent of vaccinations (vaccinations available per 100 people in a country ) on y axis \n\n* if a circle shows vaccines more than 100 that means vaccines are avilable in abundance as compared to the people there \n","67259c58":"*# Use of the libararies mentioned above \n\n* **NumPy**- NumPy is a Python library used for working with arrays.It also has functions for working in domain of linear algebra, fourier transform, and matrices.\n* **pandas-** pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,built on top of the Python programming language.\n* **Matplotlib.pyplot-** Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\n* **seaborn -**Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n* **plotly** -\n    * Plotly has hover tool capabilities that allow us to detect any outliers or anomalies in a large number of data points.\n    * It is visually attractive that can be accepted by a wide range of audiences.\n    * It allows us for the endless customization of our graphs that makes our plot more meaningful and understandable for others\n* **warning -** Warning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesn\u2019t warrant raising an exception and terminating the program. For example, one might want to issue a warning when a program uses an obsolete module.\n\n\n","13a6fb08":"This shows daily vaccination stock per million people available \n\nBhutan has the largest stock as comp 1 million pop\n","2fbf5fdf":"Look at this beautiful graph this is also known as Evolution graph \n\n* Shows how the evolution of vaccine for different variables took place with time \n* The above graph shows total vaccination per hundred people and how it exoluted ","c965f109":"Now let's dive more into choropleth and build **world maps** which gives a beautiful representaion of our data and shows us different aspects of it from which we can build insights on it","129a0bd6":"* Stocks of daily vaccines over the time span for different countries","61361e2d":"* **px.scatter(dataframe,x,x,size,color)** is used to plot a scatter plot \n\nHere we are making a function plot_custom_scatter which takes in the variables \n\n* df= dataframe\n* x= represnts x axis variable \n* y= represnts y axis variable\n* size= represents by what factor we are determining size of our scatter plots \n* color = by what factors are we defining the color of scatter plot for better viz\n* hover_name= when we scroll over to the scatter plots or hover over whic variable should show up the information\n* title = name of title\n","066cede6":"* This plot shows Daily vaccinatiion doses avilable per country \n* We can see here in India 3.6 M doses of vaccines are at stock daily \n![Screenshot 2021-05-07 at 10.44.45 PM.png](attachment:ec0afed4-ba3e-4941-98f8-59376bef47cf.png)\nin China 7.2 Million\n![Screenshot 2021-05-07 at 10.45.19 PM.png](attachment:208fdf65-67f4-4110-9523-a49b0fdd51b2.png)","27b84c2f":"<a id=\"1\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>Analysis preparation<\/center><\/h1>\n\n\nWe initialize the Python packages we will use for data ingestion, preparation and visualization. We will use mostly Plotly for visualization.\nThen we read the data file and aggregate the data on few fields (country, iso_code and vaccines - that is the vaccination scheme used in a certain country).\n\nWe will mainly look to:\n* What vaccination schemes are used in various countries;  \n* Total number of vaccinations and percent of vaccinations;  \n* Daily vaccinations and daily vaccinations per million;\n* Total people vaccinated and percent of people vaccinated;   \n\nIn the dataset is also information about the total number of people completely vaccinated (and percent of them).\n\nWe visualize the latest (maximum) values and as well for the variation in time of the above mentioned values.","d22771c2":"Here we are viz **daily Vaccinations per 1 million people(Y- axis)** in different countries VS the **percent (original variable - total vaccines per hundred people)[X -axis]**","7d715c32":"* How many people got their first dose as per their countries at different time ","d645d639":"* This shows the daily vaccinations stock evolution per million people during different phases of time ","51924500":"Here the name of our dataframe is **data_df**\\\nUsing pd.read_csv(\"location of dataset file\") we ingested our data \n**read_csv()** is a function in **pandas** used for data ingestion\n\nTo check the first few rows of the data we use **dataframe.head()** function \n\n","c829928c":"\n<a id=\"5\"><\/a><h1 style='background:#26A2AB; border:0; color:black'><center>How the vaccination progressed<\/center><\/h1>\n\nLet's look to the way the vaccination progressed.\n\nWe will look to the values of total vaccination and daily vaccination.","c11215cc":"* Shows how many people are fully vaccinated in different countries during different periods of time ","9970cf3d":"* This shows how many people are fully vaccinated per hundred people in different countries during different phases of time ","dd4e0102":"Here we can see for all the countries irrespective of the vaccine scheme what is are the total number of vaccines\n\non the x axis are mentioned the countris \n\non the y axis are total number of vaccinations available in countries on x axis ","b8dcb194":"Here we are firstly dividing our dataset into groups and then we are reseting their index and running analytics based on each group aand we are mining the results into this single dataframe \nThis is called **split, Apply and combine**\n\n* **groupby() -** -Pandas dataframe.groupby() function is used to split the data into groups based on some criteria. pandas objects can be split on any of their axes. The abstract definition of grouping is to provide a mapping of labels to group names.\n\nSo here we are grouping on the basis of three variables country, iso_code and vaccines\n\n* **reset_index()** - function resets and provides the new index to the grouped by dataframe and makes them a proper dataframe structure\n\n* **country_vaccine.columns-** Here we are mentioning the column names of the grouped dartaframe "}}