{"cell_type":{"c9c1bb4e":"code","86c415c5":"code","3e2e9bf9":"code","6f94920d":"code","aef66a9e":"code","811ec38a":"code","d6f9645d":"code","0cff1b17":"code","c94fd89f":"code","20d42700":"code","a064d41a":"code","7ecc191b":"code","08b3c4bc":"code","fa819750":"code","fbcf1994":"code","6b7a0e06":"code","f88922bf":"code","835ac97e":"code","b907f740":"code","de2e9a73":"code","8952ab43":"code","a306d65c":"markdown","2bc4a4fc":"markdown","1ecc04a5":"markdown","009fcb99":"markdown","a3bd0991":"markdown","ab8938b5":"markdown","3823eceb":"markdown","5d391e1a":"markdown","2198b4e5":"markdown","ba0fba01":"markdown","967ce1e6":"markdown","78e49357":"markdown","d84a77be":"markdown","b0227b7a":"markdown","88756bea":"markdown","8c1332b5":"markdown","803fd792":"markdown","e04387c6":"markdown","89bc648f":"markdown","ef203403":"markdown","4b7de293":"markdown"},"source":{"c9c1bb4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86c415c5":"data = pd.read_csv('\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv')\ndata.head()","3e2e9bf9":"data.info()","6f94920d":"data['gender_num'] = data['gender'].replace({'female':0,'male':1})\ndata['race\/ethnicity_num'] = data['race\/ethnicity'].replace({'group A':0,'group B':1,'group C':2,'group D':3,'group E':4})\ndata['parental level of education_num'] = data['parental level of education'].replace({\"bachelor's degree\": 4, 'some college':2,\n                                                                                       \"master's degree\":5,\"associate's degree\":3,\n                                                                                       'high school':1, 'some high school':0})\ndata['lunch_num'] = data['lunch'].replace({'standard':0,'free\/reduced':1})\ndata['test preparation course_num'] = data['test preparation course'].replace({'none':0,'completed':1})\ndata.head()","aef66a9e":"# Create a dataframe only with numerical columns\npcaData = data.select_dtypes(include=[np.number])\npcaData","811ec38a":"# Standardize the data\nscaler = StandardScaler()\npcaData_scaled = scaler.fit_transform(pcaData)\n\n# Create the PCA model and fit standardised data\npca = PCA(n_components=np.shape(pcaData)[1]) # Use the maximum number of component\npca.fit(pcaData_scaled)\n# Update the PCA with number of components that explains 80% of the variance\nvarianceExplained = 0.8\npca = PCA(n_components=next(x for x, val in enumerate(pca.explained_variance_ratio_.cumsum()) if val >= varianceExplained) + 1)\npca.fit(pcaData_scaled)\npcaData_projected = pca.transform(pcaData_scaled) # for scatter plots","d6f9645d":"pd.DataFrame(pca.components_,columns=data.select_dtypes(include=[np.number]).columns,index=['PC1','PC2','PC3','PC4','PC5'])","0cff1b17":"fig = go.Figure()\n[fig.add_trace(go.Scatter(x=[0, pca.components_[0,x]],y=[0,pca.components_[2,x]],name=pcaData.columns[x])) for x in range(len(pca.components_[0,:]))]\nfig.update_layout(plot_bgcolor='white',height=500, width=500,\n                  showlegend=False,\n                  shapes=[dict(type=\"circle\",xref=\"x\",yref=\"y\",x0=-1,y0=-1,x1=1,y1=1,line_color=\"LightSeaGreen\",)],\n                  xaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Principal Component Analysis\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.update_xaxes(title=dict(text='PC1', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.update_yaxes(title=dict(text='PC3', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.show()","c94fd89f":"# Manipulate dataframe to plot heatmap\ndataRaceEducationParents = data[['parental level of education_num','race\/ethnicity_num']]\ndataRaceEducationParents = dataRaceEducationParents.groupby(['parental level of education_num','race\/ethnicity_num']).size().unstack(fill_value=0)\ndataRaceEducationParents_Perc = round(dataRaceEducationParents\/dataRaceEducationParents.sum(axis=0)*100,2)\nmatrixPercentage = []\nfor x in range(len(dataRaceEducationParents_Perc.index)):\n       matrixPercentage.append(dataRaceEducationParents_Perc.iloc[x].values.tolist())","20d42700":"fig = go.Figure()\nfig.add_trace(go.Heatmap(z=matrixPercentage,colorscale='gnbu'))\n\nfig.update_layout(plot_bgcolor='white', width = 1000,\n                  xaxis=dict(title='race\/ethnicity',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='parental level of education',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Level of education of the parents vs race\/ethnicity\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.update_xaxes(tickfont=dict(family='Verdana', color='grey', size=14), titlefont=dict(family='Verdana', color='black', size=16))\nfig.update_yaxes(tickfont=dict(family='Verdana', color='grey', size=14), titlefont=dict(family='Verdana', color='black', size=16))\n\nfig.show()","a064d41a":"listUniqueEducationLevel = sorted(data['parental level of education_num'].unique())","7ecc191b":"fig = go.Figure()\n[fig.add_trace(go.Box(y=pcaData['math score'][pcaData['parental level of education_num']==x],name = data['parental level of education'][data['parental level of education_num'] == x].unique()[0],boxpoints='all')) for x in listUniqueEducationLevel]\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='parental level of education',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='math score',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Math score vs level of education of the parents\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","08b3c4bc":"fig = go.Figure()\n[fig.add_trace(go.Box(y=pcaData['reading score'][pcaData['parental level of education_num']==x],name = data['parental level of education'][data['parental level of education_num'] == x].unique()[0],boxpoints='all')) for x in listUniqueEducationLevel]\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='parental level of education',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='reading score',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Reading score vs level of education of the parents\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","fa819750":"fig = go.Figure()\n[fig.add_trace(go.Box(y=pcaData['writing score'][pcaData['parental level of education_num']==x],name = data['parental level of education'][data['parental level of education_num'] == x].unique()[0],boxpoints='all')) for x in listUniqueEducationLevel]\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='parental level of education',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='writing score',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Writing score vs level of education of the parents\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","fbcf1994":"dataParentEducationTestPreparation = data.groupby(['parental level of education','parental level of education_num','test preparation course_num']).size().unstack(fill_value=0).reset_index()\ndataParentEducationTestPreparation['No_perc'] = round(dataParentEducationTestPreparation[0]\/(dataParentEducationTestPreparation[0]+dataParentEducationTestPreparation[1])*100,2)\ndataParentEducationTestPreparation['Yes_perc'] = round(dataParentEducationTestPreparation[1]\/(dataParentEducationTestPreparation[0]+dataParentEducationTestPreparation[1])*100,2)\ndataParentEducationTestPreparation = dataParentEducationTestPreparation.sort_values(by='parental level of education_num')","6b7a0e06":"fig = go.Figure()\nfig.add_trace(go.Bar(x=dataParentEducationTestPreparation['Yes_perc'],y=dataParentEducationTestPreparation['parental level of education'],orientation='h'))\nfig.update_layout(plot_bgcolor='white', height = 400,\n                  xaxis=dict(title='percentage of test preparation [%]',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='parental level of education',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Level of education of the parents vs percentage of test preparation\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","f88922bf":"fig = go.Figure()\n[fig.add_trace(go.Scatter(x=[0, pca.components_[0,x]],y=[0,pca.components_[3,x]],name=pcaData.columns[x])) for x in range(len(pca.components_[0,:]))]\nfig.update_layout(plot_bgcolor='white',height=500, width=500,\n                  showlegend=False,\n                  shapes=[dict(type=\"circle\",xref=\"x\",yref=\"y\",x0=-1,y0=-1,x1=1,y1=1,line_color=\"LightSeaGreen\",)],\n                  xaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Principal Component Analysis\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.update_xaxes(title=dict(text='PC1', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.update_yaxes(title=dict(text='PC4', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.show()","835ac97e":"fig = go.Figure()\nfor x in ['math score','reading score', 'writing score']:\n    fig.add_trace(go.Box(y=data[x][data['test preparation course_num']==0],name=x + ' (No)'))\n    fig.add_trace(go.Box(y=data[x][data['test preparation course_num']==1],name=x + ' (Yes)'))\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='exam categories',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='exam results',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Exam results with (Yes) and without (No) preparation\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","b907f740":"fig = go.Figure()\nfor x in ['math score','reading score', 'writing score']:\n    fig.add_trace(go.Box(y=data[x][data['lunch']=='standard'],name=x + ' (Standard)'))\n    fig.add_trace(go.Box(y=data[x][data['lunch']=='free\/reduced'],name=x + ' (Free\/reduced)'))\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='exam categories',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='exam results',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Exam results with standard and free\/reduced lunch\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","de2e9a73":"fig = go.Figure()\n[fig.add_trace(go.Scatter(x=[0, pca.components_[0,x]],y=[0,pca.components_[1,x]],name=pcaData.columns[x])) for x in range(len(pca.components_[0,:]))]\nfig.update_layout(plot_bgcolor='white',height=500, width=500,\n                  showlegend=False,\n                  shapes=[dict(type=\"circle\",xref=\"x\",yref=\"y\",x0=-1,y0=-1,x1=1,y1=1,line_color=\"LightSeaGreen\",)],\n                  xaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Principal Component Analysis\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.update_xaxes(title=dict(text='PC1', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.update_yaxes(title=dict(text='PC2', font=dict(size=18)),showgrid=True, linecolor='black', ticks='outside')\nfig.show()","8952ab43":"fig = go.Figure()\nfor x in ['math score','reading score', 'writing score']:\n    fig.add_trace(go.Box(y=data[x][data['gender']=='male'],name=x + ' (Male)'))\n    fig.add_trace(go.Box(y=data[x][data['gender']=='female'],name=x + ' (Female)'))\nfig.update_layout(plot_bgcolor='white',\n                  xaxis=dict(title='exam categories',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  yaxis=dict(title='exam results',ticks=\"outside\", tickwidth=2, tickcolor='grey', ticklen=10,showline=True, linewidth=2, linecolor='grey'),\n                  title=dict(text=\"Exam results per gender\", font=dict(family=\"Verdana\",size=25,color=\"Black\")))\nfig.show()","a306d65c":"### 2.1.1. PC1 vs PC3 (Race\/ethnicity, parental level of education, exam results, test preparation)","2bc4a4fc":"No clear correlation between the parental level of education and the math score\n- Higher parental level of education reduces the spread of the score\n- None of the student with parents holding a master's degree got the maximal score (100)\n- Students with parent having as education level: some college, associate's degree or bachelor's degree performs similarly in term of median score (67.5, 67, 68 respectively)","1ecc04a5":"## 1.2. Convert categorical values to numerical values","009fcb99":"## 3.Conlcusion\nThis work might be completed with further analysis, i.e. probability analysis, machine learning model to predict the score of a student...","a3bd0991":"Same comments as for reading score above.","ab8938b5":"The group of students with standard lunch performs better than the group of students with free\/reduced lunch. (Not sure about the exact definition of standard and free\/reduced lunch to draw conclusion)","3823eceb":"These boxplots clearly indicate that the group of students that prepared the exams performed better that the group of students that did not prepare for the exams. This is only valid when considering these two groups of students. Individually, a student that did not prepare the exams can perform better than another student that prepared the exams.","5d391e1a":"This conversion is necessary for further analysis. The values given to replace non numerical values are arbitrarily given except for \"parental level of education\" which are given based on degree's level (lowest level=0).","2198b4e5":"1. The race\/ethnicity looks strongly positively correlated with the level of education of the parents.\n2. The level of education of the parents does not seem correlated with the exam results.\n3. The test preparation seems negatively correlated with the parental level of education","ba0fba01":"### 2.1.3. PC1 vs PC2 (exam results, gender)","967ce1e6":"1. Gender does not look correlated with the exam results ","78e49357":"No clear correlation between the parental level of education and the reading score\n- Higher parental level of education reduces the spread of the score\n- Looking at the median score of each group, the higher the parental education the higher the median score (considering \"some high school\" similar as \"high school\")","d84a77be":"- Men perform globally better than women on the math exams\n- Women perform globally better on reading and writing exams","b0227b7a":"# 2. Analysis\n## 2.1. Principal Component Analysis (PCA)","88756bea":"No missing values in this dataset","8c1332b5":"### 2.1.2. PC1 vs PC4 (exam results, lunch, test preparation)","803fd792":"There is no significant correlation between race\/ethnicity and the parental level of education. The values from 0 to 4 to describe each group have been randomly allocated. Furthermore no race\/ethnicity group can be categorised as better or worst than another one. So the positive correlation between these two variables does not make sense here and only parental level of education will be used for further analysis. \n\nHowever some groups perform slightly differently than others.\n* Groups 0 and 1 of race\/ethnicity are similar and are the ones with the lowest parental level of education with about 45% of parents with no more than high school degree.\n* Groups 2, 3 and 4 are quite similar. Group 3 is the one with the bigger percentage of master's degree. Group 4 is the one with more parents with at least high school degree (>71%).","e04387c6":"# 1. Data preparation\n## 1.1. Load the data","89bc648f":"* PC1 is focused on the exam score (math score, reading score, writing score) that are negatively associated\n* PC2 is focused on the gender (gender_num)\n* PC3 describes the associations of race\/ethnicity, level of education of the parents, and test preparation (race\/ethnicity_num, parental level of education_num, test preparation course_num)\n* PC4 highlights the positive associations between lunch and test preparation (lunch_num, test preparation course_num)\n* PC5 is focused on the race\/ethnicity (race\/ethnicity_num)","ef203403":"- The higher the parental level of education the higher the percentage of test preparation is only true from 'high school' to 'bachelor's degree' categories\n- Students with parents with 'some high school' education are the one with the highest preparation rate\n- Students whose parents have master's degree are not the one preparing the most their tests","4b7de293":"1. Test results do not seem correlated with the test preparation\n2. Test results do not seem correlated to lunch type"}}