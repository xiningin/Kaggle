{"cell_type":{"5d148c00":"code","48623c50":"code","ebaa7049":"code","e55e5769":"code","b6e6ac49":"code","2ebbb3cc":"code","c29be840":"code","97404d45":"code","fca0df7f":"code","5ca1595f":"code","33f77968":"code","0cfa3fc3":"code","e7612910":"code","f3d5bbb7":"code","eaa8e897":"code","84ff75dc":"code","48251940":"code","f37b195d":"code","8d811803":"code","8748775c":"code","ed69c513":"code","f8cd4fd0":"code","580e8bb2":"code","2edee1c1":"code","95a3058f":"code","78dc498f":"code","839de2a8":"code","20f6e713":"code","de89f92e":"code","8b04b818":"code","271884b3":"code","b907e73c":"code","1d978189":"code","9e6cdc68":"markdown","ce91257b":"markdown","6b492f46":"markdown","6590b539":"markdown","1cbd8fc2":"markdown","16a83893":"markdown","cb2ad9be":"markdown"},"source":{"5d148c00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style('darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48623c50":"df= pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndf.head()","ebaa7049":"df.info()","e55e5769":"df.isna().sum()","b6e6ac49":"df.describe()","2ebbb3cc":"df.nunique()","c29be840":"df['Company']= df['CarName'].apply(lambda x: x.split(\" \")[0])\ndf['Company']= df['Company'].apply(lambda x: x.lower())","97404d45":"df.head()","fca0df7f":"df['Company'].unique()","5ca1595f":"df['Company'].replace({'maxda': 'mazda', 'porcshce':'porsche', 'toyouta':'toyota', 'vokswagen':'volkswagen','vw':'volkswagen'}, inplace=True)","33f77968":"df['Company'].unique()","0cfa3fc3":"df.drop(['car_ID','CarName'], axis=1, inplace=True)","e7612910":"cat_cols= [col for col in df.columns if df[col].dtype=='object']\nnum_cols= [col for col in df.columns if df[col].dtype!='object']","f3d5bbb7":"cat_cols","eaa8e897":"num_cols\nnum_cols.remove('price')\nnum_cols","84ff75dc":"i=1\nplt.figure(figsize=(30,100))\nfor col in cat_cols:\n    plt.subplot(10,2,i)\n    sns.countplot(df[col])\n    plt.xticks(rotation=90, fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel(col, fontsize=15)\n    plt.ylabel('count',fontsize=15)\n    \n    i+=1\n    plt.subplot(10,2,i)\n    sns.boxplot(x=df[col], y=df['price'])\n    plt.xticks(rotation=90, fontsize=15)\n    plt.yticks(fontsize=15)\n    plt.xlabel(col, fontsize=15)\n    plt.ylabel('price',fontsize=15)\n    i+=1\nplt.show()","48251940":"i=1\nplt.figure(figsize=(25,100))\nfor col in num_cols:\n    plt.subplot(16,2,i)\n    sns.distplot(df[col])\n    plt.xlabel(col,fontsize=15)\n    plt.xticks(fontsize=10)\n    i+=1\n    \n    plt.subplot(16,2,i)\n    sns.scatterplot(x=df[col], y=df['price'])\n    plt.xlabel(col,fontsize=15)\n    plt.xticks(fontsize=10)\n    plt.ylabel('price', fontsize=15)\n    plt.yticks(fontsize=10)\n    i+=1\n    ","f37b195d":"df.drop('symboling', axis=1, inplace=True)\nnum_cols.remove('symboling')","8d811803":"df.head()","8748775c":"num_cols","ed69c513":"from sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()\n\ndf[cat_cols]= df[cat_cols].apply(lambda x: le.fit_transform(x))","f8cd4fd0":"df[cat_cols].head()","580e8bb2":"df.head()","2edee1c1":"df.info()","95a3058f":"plt.figure(figsize=(15,15))\nsns.heatmap(df.corr(), annot=True, cmap='coolwarm')\nplt.show()","78dc498f":"from sklearn.preprocessing import StandardScaler\n\nss=StandardScaler()\ndf[num_cols]= ss.fit_transform(df[num_cols])","839de2a8":"df.head()","20f6e713":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score","de89f92e":"X= df.drop('price', axis=1)\ny=df['price']\n\nX_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2, random_state= 42)","8b04b818":"lr= LinearRegression()\nlr.fit(X_train,y_train)\ny_pred= lr.predict(X_test)\n\nrmse= (mean_squared_error(y_test,y_pred))**(1\/2)\nr2= r2_score(y_test,y_pred)\n\nprint(rmse)\nprint(r2)","271884b3":"dt= DecisionTreeRegressor(criterion='mse', splitter='best', max_depth=100, min_samples_leaf= 5, random_state=42)\ndt.fit(X_train,y_train)\ny_pred= dt.predict(X_test)\n\nrmse_train= (mean_squared_error(dt.predict(X_train),y_train))**(1\/2)\nrmse= (mean_squared_error(y_test,y_pred))**(1\/2)\nr2= r2_score(y_test,y_pred)\nprint(rmse_train)\nprint(rmse)\nprint(r2)","b907e73c":"rf= RandomForestRegressor(max_depth=10, criterion='mse', min_samples_leaf=2, random_state=42, verbose=1)\nrf.fit(X_train,y_train)\ny_pred= rf.predict(X_test)\nrmse_train= (mean_squared_error(rf.predict(X_train),y_train))**(1\/2)\nrmse= (mean_squared_error(y_test,y_pred))**(1\/2)\nr2= r2_score(y_test,y_pred)\nprint(rmse_train)\nprint(rmse)\nprint(r2)","1d978189":"xgb= XGBRegressor()\nxgb.fit(X_train, y_train)\ny_pred= xgb.predict(X_test)\nrmse_train= (mean_squared_error(xgb.predict(X_train),y_train))**(1\/2)\nrmse= (mean_squared_error(y_test,y_pred))**(1\/2)\nr2= r2_score(y_test,y_pred)\nprint(rmse_train)\nprint(rmse)\nprint(r2)","9e6cdc68":"# Load Data","ce91257b":"# Exploratory Data Analysis","6b492f46":"# Observations\n1. Positive co-relation between price and car-length,car width, curb weight, engine size, horsepower\n1. Negative co-relation between price and city mileage, highway mileage\n1. There is no relation of symboling with price, hence we drop the column\n","6590b539":"# Training our Model","1cbd8fc2":"# Preprocessing","16a83893":"# Conclusion\nAll our models are overfitting the data. Tried many different combinations with GridSearchCV but there is still overfitting. This is because the amount of data is very less. However, with the given data, RandomForestRegressor is the best fit","cb2ad9be":"# Observations \n1. Diesel cars tend to be slightly higher-priced than gas cars\n1. The number of gas cars is significantly higher than diesel cars\n1. Turbo cars are higher priced than std cars\n1. Sedan and hatchbacks account for more than 75% of total cars\n1. Real wheel drive cars are higher priced than other drive cars\n1. The median price of cars with engine at back is over 3 times the median price of cars with engine in front\n1. Majority of the cars have ohc engines but, ohcv engines seem to be higher priced\n1. General trend is that the price of car increase with increase in number of cylinders\n1. Toyota is the most liked car\n1. Porsche, Jaguar, BMW, Buick are high range cars"}}