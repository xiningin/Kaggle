{"cell_type":{"d01f9e32":"code","63a42bf3":"code","3d487b04":"code","755a04a6":"code","9e6ff43c":"code","7511c3f2":"code","5fcec1c5":"code","5c1cbe1e":"code","d808ce0f":"code","ceec86f9":"code","db4dec27":"code","1a6856e3":"code","a7f3ac62":"code","63587568":"code","0caaebae":"code","3ebe0c38":"code","62d0a2f4":"code","cd2931f0":"code","c7a05ab1":"code","ed2a16a3":"code","18710f1e":"code","245ce670":"code","0600f27e":"code","8c2b0f8b":"code","f5bf88a3":"code","048bc114":"code","e21da4c2":"code","c51f5b97":"code","d2b28a42":"code","c8756382":"code","46cf7576":"code","21f5c1bc":"code","dc244723":"code","f4658d1d":"code","1df54fde":"code","1ebe1c75":"code","6200b198":"code","7528423b":"code","e95c4444":"code","5cbfa5c3":"code","17c1c792":"code","6a08f8c2":"code","b934f733":"code","5df1e7b2":"markdown","5eeac613":"markdown","b38a0c54":"markdown","4fc3aded":"markdown","ff6acabd":"markdown","c70f3537":"markdown","fa1c026a":"markdown","2e488908":"markdown","a8b26d0c":"markdown","0138a62d":"markdown","cebf1524":"markdown","1ba1f580":"markdown","132b99d3":"markdown"},"source":{"d01f9e32":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import KNNImputer\nfrom scipy import stats\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import *\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n","63a42bf3":"data = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","3d487b04":"df = data.copy()","755a04a6":"def check_df(dataframe):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head())\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail())\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","9e6ff43c":"check_df(df)","7511c3f2":"df.head()","5fcec1c5":"df.corr()","5c1cbe1e":"sns.countplot(x ='Outcome',data = df, palette=('BuPu_d'))","d808ce0f":"plt.figure(figsize=(9,9))\ncmap = sns.diverging_palette(0, 230, 90, 60, as_cmap=True)\nsns.heatmap(df.corr(), cmap=cmap, vmin=-1, vmax=1,  cbar_kws={\"shrink\": .8}, square=True, annot=True, fmt='.2f',linewidths=.8)\n\nplt.show()","ceec86f9":"def column_dplots():\n\n    f,ax=plt.subplots(1,5,figsize=(27,7))\n    \n    ax[0].set_xlabel('Insulin',fontsize=20)\n    sns.distplot(df.Insulin, ax = ax[0], color= \"purple\")\n    ax[1].set_xlabel('SkinThickness',fontsize=20)\n    sns.distplot(df.SkinThickness,ax=ax[1])\n    ax[2].set_xlabel('BloodPressure',fontsize=20)\n    sns.distplot(df.BloodPressure, ax=ax[2],color= \"purple\")\n    ax[3].set_xlabel('Glucose',fontsize=20)\n    sns.distplot(df.Glucose, ax=ax[3])\n    ax[4].set_xlabel('BMI',fontsize=20)\n    sns.distplot(df.BMI, ax=ax[4])\n\n\n    plt.show()\n\ncolumn_dplots()","db4dec27":"def outlier_plots():\n\n    f,ax=plt.subplots(1,5,figsize=(25,6))\n    sns.boxplot(data=df.Insulin, ax=ax[0]) \n    ax[0].set_xlabel('Insulin',fontsize=20)\n    sns.boxplot(data=df.SkinThickness,ax=ax[1])\n    ax[1].set_xlabel('SkinThickness',fontsize=20)\n    sns.boxplot(data=df.BloodPressure, ax=ax[2])\n    ax[2].set_xlabel('BloodPressure',fontsize=20)\n    sns.boxplot(data=df.BMI, ax=ax[3])\n    ax[3].set_xlabel('Glucose',fontsize=20)\n    sns.boxplot(data=df.Glucose, ax=ax[4])\n    ax[4].set_xlabel('BMI',fontsize=20)\n    plt.show()\n\noutlier_plots()","1a6856e3":"\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    print(f\" categoric: {cat_cols}, cat_but_car: {cat_but_car}, numeric: {num_cols}, num_but_cat: {num_but_cat}\")\n    # cat_cols + num_cols + cat_but_car = de\u011fi\u015fken say\u0131s\u0131.\n    # num_but_cat cat_cols'un i\u00e7erisinde zaten.\n    # dolay\u0131s\u0131yla t\u00fcm \u015fu 3 liste ile t\u00fcm de\u011fi\u015fkenler se\u00e7ilmi\u015f olacakt\u0131r: cat_cols + num_cols + cat_but_car\n    # num_but_cat sadece raporlama i\u00e7in verilmi\u015ftir.\n\n    return cat_cols, cat_but_car, num_cols, num_but_cat\n\n","a7f3ac62":"grab_col_names(df)","63587568":"cat_cols, cat_but_car, num_cols, num_but_cat = grab_col_names(df)","0caaebae":"zero_list = [\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\"]\n\n[df[col].replace(0,np.NaN,inplace=True) for col in df[zero_list]]","3ebe0c38":"df.isnull().sum()","62d0a2f4":"df.BloodPressure = df.BloodPressure.fillna(df.BloodPressure.mean())\ndf.Insulin = df.Insulin.fillna(df.Insulin.median())\ndf.Glucose = df.Glucose.fillna(df.Glucose.mean())\n","cd2931f0":"imputer = KNNImputer(n_neighbors=5, weights='uniform', metric='nan_euclidean')\ndf[[\"BMI\",\"SkinThickness\"]] = imputer.fit_transform(df[[\"BMI\",\"SkinThickness\"]])\n","c7a05ab1":"df","ed2a16a3":"df.isnull().sum()","18710f1e":"def column_dplots():\n\n    f,ax=plt.subplots(1,5,figsize=(27,7))\n    \n    ax[0].set_xlabel('Insulin',fontsize=20)\n    sns.distplot(df.Insulin, ax = ax[0], color= \"purple\")\n    ax[1].set_xlabel('SkinThickness',fontsize=20)\n    sns.distplot(df.SkinThickness,ax=ax[1])\n    ax[2].set_xlabel('BloodPressure',fontsize=20)\n    sns.distplot(df.BloodPressure, ax=ax[2],color= \"purple\")\n    ax[3].set_xlabel('Glucose',fontsize=20)\n    sns.distplot(df.Glucose, ax=ax[3])\n    ax[4].set_xlabel('BMI',fontsize=20)\n    sns.distplot(df.BMI, ax=ax[4])\n\n\n    plt.show()\n\ncolumn_dplots()","245ce670":"def outlier_analysis(dataframe, numerical_columns):\n\n    '''\n    Outlier Analysis of the numerical columns\n    '''\n    df_without_outliers = dataframe.copy()\n    outlier_boundries_dict = {}\n    for col in numerical_columns:\n            print(f\"-----{col}------\")\n            lower_limit = dataframe[col].quantile(q=0.01)\n            upper_limit = dataframe[col].quantile(q=0.99)\n\n            number_of_outliers = len(dataframe[(dataframe[col] < lower_limit) | (dataframe[col] > upper_limit)])\n            if number_of_outliers>0:\n                print(f\"{number_of_outliers} outliers are found for {col} feature. \\n\")\n            # outlier_boundries_dict[col] = (lower_limit,upper_limit)\n            outlier_boundries_dict.update({col:(lower_limit,upper_limit)})\n\n            df_without_outliers.loc[df[col]<lower_limit, col] = lower_limit\n            df_without_outliers.loc[df[col]>upper_limit, col] = upper_limit\n    \n    return df_without_outliers, outlier_boundries_dict","0600f27e":"outlier_analysis(df,num_cols)","8c2b0f8b":"lower_limit = df[\"SkinThickness\"].quantile(q=0.0)\nupper_limit = df[\"SkinThickness\"].quantile(q=0.999)\nnumber_of_outliers = len(df[(df[\"SkinThickness\"] < lower_limit) | (df[\"SkinThickness\"] > upper_limit)])\n\nprint(lower_limit)\nprint(upper_limit)\nf\"{number_of_outliers}\"\n","f5bf88a3":"df = df[~((df[\"SkinThickness\"] < lower_limit) | (df[\"SkinThickness\"] > upper_limit))] ","048bc114":"df","e21da4c2":"# ortalama 69,5 y\u0131l ya\u015f\u0131yorlar\n\ndf.loc[df['Age'] <= 18, 'AGE_CAT'] = 'Kid'\ndf.loc[((df['Age'] <= 30) & (df['Age'] > 18)), 'AGE_CAT'] = 'Young'\ndf.loc[(df['Age'] > 30) & (df['Age'] < 50), 'AGE_CAT'] = 'Mature'\ndf.loc[df['Age'] >= 50, 'AGE_CAT'] = 'Senior'\n\ndf.AGE_CAT.value_counts()","c51f5b97":"df.loc[(df['Glucose'] <= 70), 'GLUCOSE_CAT'] = 'HIPOGLISEMI'\ndf.loc[(df['Glucose'] <= 100) & (df['Glucose'] > 70), 'GLUCOSE_CAT'] = 'NORMAL'\ndf.loc[(df['Glucose'] <= 125) & (df['Glucose'] > 100), 'GLUCOSE_CAT'] = 'PREDIABETES'\ndf.loc[(df['Glucose'] > 125), 'GLUCOSE_CAT'] = 'DIABETES'\n\ndf.GLUCOSE_CAT.value_counts()\n","d2b28a42":"df","c8756382":"for col in num_cols:\n    transformer = RobustScaler().fit(df[[col]])\n    df[col] = transformer.transform(df[[col]])","46cf7576":"df[\"AGE_CAT\"].value_counts()","21f5c1bc":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","dc244723":"df = one_hot_encoder(df,[\"AGE_CAT\",\"GLUCOSE_CAT\"])","f4658d1d":"y = df[\"Outcome\"]\nX = df.drop([\"Outcome\"], axis=1)","1df54fde":"X_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=42)","1ebe1c75":"cart_params = {'max_depth': range(1, 10),\n               \"min_samples_split\": [3, 4]}","6200b198":"\ncart_model = DecisionTreeClassifier(random_state=17)\n\ncart_cv = GridSearchCV(cart_model, cart_params, cv=10, n_jobs=-1, verbose=True)\ncart_cv.fit(X_train, y_train)\n\ncart_cv.best_params_","7528423b":"cart_tuned = DecisionTreeClassifier(**cart_cv.best_params_).fit(X_train, y_train)","e95c4444":"xgb = XGBClassifier(n_estimators=500)\nxgb.fit(X_train, y_train)\npreds = xgb.predict(X_test)\nacc_xgb = (preds == y_test).sum().astype(float) \/ len(preds)*100\n\nf\"XGBoost's prediction accuracy is: {acc_xgb}\"","5cbfa5c3":"y_pred = cart_tuned.predict(X_test)\ny_prob = cart_tuned.predict_proba(X_test)[:, 1]\nprint(classification_report(y_test, y_pred))\nroc_auc_score(y_test, y_prob)","17c1c792":"\ndef plot_confusion_matrix(y_test, y_pred):\n    acc = round(accuracy_score(y_test, y_pred), 2)\n    cm = confusion_matrix(y_test, y_pred)\n    sns.heatmap(cm, annot=True, fmt=\".0f\")\n    plt.xlabel('y_pred')\n    plt.ylabel('y')\n    plt.title('Accuracy Score: {0}'.format(acc), size=10)\n    plt.show()\n\nplot_confusion_matrix(y_test, y_pred)","6a08f8c2":"print(classification_report(y_test, y_pred))","b934f733":"plot_roc_curve(cart_tuned, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()","5df1e7b2":"### **UNDERSTANDING FEATURES**","5eeac613":"### **FEATURE ENGINEERING**","b38a0c54":"**AGE**","4fc3aded":"**Tahmin**","ff6acabd":"**Diabetes Dataset**\n\nPregnancies: Number of times pregnant\n\nGlucose: Plasma glucose concentration over 2 hours in an oral glucose tolerance test\n\nBloodPressure: Diastolic blood pressure (mm Hg)\n\nSkinThickness: Triceps skin fold thickness (mm)\n\nInsulin: 2-Hour serum insulin (mu U\/ml)\n\nBMI: Body mass index (weight in kg\/(height in m)2)\n\nDiabetesPedigreeFunction: Diabetes pedigree function (a function which scores likelihood of diabetes based on family history)\n\nAge: Age (years)\n\nOutcome: Class variable (0 if non-diabetic, 1 if diabetic)","c70f3537":"### **MISSING VALUE HANDLING**\n\n\n*   replaced zeros(missing values) with NaN \n*   imputed NaN values\n\n","fa1c026a":"### **ENCODING**","2e488908":"###**OUTLIER HANDLING**","a8b26d0c":"### **MODELING**","0138a62d":"GLUCOSE","cebf1524":"**SCALING**","1ba1f580":"##**DATA PREPROCESSING**","132b99d3":"\n## **Ke\u015fifsel Veri Analizi (Exploratory Data Analysis) - EDA**"}}