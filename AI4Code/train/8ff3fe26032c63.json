{"cell_type":{"a8974b9e":"code","0261b092":"code","1a53d5e5":"code","b8263c51":"code","73c69bf5":"code","6f581ae7":"code","95995e04":"code","1a8f0432":"code","94a4b4fb":"code","4660e625":"code","518c9e61":"code","9e7c7710":"code","95aa564d":"code","ed1f14c8":"code","f30afac5":"code","cc0eed3e":"code","957addc1":"code","25d2789b":"code","e91a0173":"code","1322f06f":"code","2ebb865f":"code","588c270c":"code","a80f1eb6":"code","aaaac50b":"code","e05525b6":"code","ba8667ea":"code","70701b27":"code","0245a440":"markdown","62dfc915":"markdown","0e1d34fa":"markdown","0ff989d5":"markdown","b2d10178":"markdown","b38bc2e7":"markdown","a5aa1c52":"markdown","29f8ceb8":"markdown","930406f4":"markdown","ad9f609b":"markdown","3ce9f9ac":"markdown","0cf59158":"markdown","8b9675a7":"markdown","da66a66f":"markdown","4da5224d":"markdown","d0e544bc":"markdown"},"source":{"a8974b9e":"import pandas as pd","0261b092":"advertising = pd.read_csv(\"..\/input\/tvmarketingcsv\/tvmarketing.csv\")","1a53d5e5":"# Display the first 5 rows\nadvertising.head()","b8263c51":"# Display the last 5 rows\nadvertising.tail()","73c69bf5":"# Let's check the columns\nadvertising.info()","6f581ae7":"# Check the shape of the DataFrame (rows, columns)\nadvertising.shape","95995e04":"# Let's look at some statistical information about the dataframe.\nadvertising.describe()","1a8f0432":"# Conventional way to import seaborn\nimport seaborn as sns\n\n# To visualise in the notebook\n%matplotlib inline","94a4b4fb":"# Visualise the relationship between the features and the response using scatterplots\nsns.pairplot(advertising, x_vars=['TV'], y_vars='Sales',size=7, aspect=0.7, kind='scatter')","4660e625":"# Putting feature variable to X\nX = advertising['TV']\n\n# Print the first 5 rows\nX.head()","518c9e61":"# Putting response variable to y\ny = advertising['Sales']\n\n# Print the first 5 rows\ny.head()","9e7c7710":"#random_state is the seed used by the random number generator, it can be any integer.\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7 , random_state=100)","95aa564d":"print(type(X_train))\nprint(type(X_test))\nprint(type(y_train))\nprint(type(y_test))","ed1f14c8":"train_test_split   #Press Tab to auto-fill the code\n#Press Tab+Shift to read the documentation","f30afac5":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","cc0eed3e":"#It is a general convention in scikit-learn that observations are rows, while features are columns. \n#This is needed only when you are using a single feature; in this case, 'TV'.\n\nimport numpy as np\n\nX_train = X_train[:, np.newaxis]\nX_test = X_test[:, np.newaxis]","957addc1":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","25d2789b":"# import LinearRegression from sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Representing LinearRegression as lr(Creating LinearRegression Object)\nlr = LinearRegression()\n\n# Fit the model using lr.fit()\nlr.fit(X_train, y_train)","e91a0173":"# Print the intercept and coefficients\nprint(lr.intercept_)\nprint(lr.coef_)","1322f06f":"# Making predictions on the testing set\ny_pred = lr.predict(X_test)","2ebb865f":"type(y_pred)","588c270c":"# Actual vs Predicted\nimport matplotlib.pyplot as plt\nc = [i for i in range(1,61,1)]         # generating index \nfig = plt.figure()\nplt.plot(c,y_test, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nplt.plot(c,y_pred, color=\"red\",  linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Sales', fontsize=16)                       # Y-label","a80f1eb6":"# Error terms\nc = [i for i in range(1,61,1)]\nfig = plt.figure()\nplt.plot(c,y_test-y_pred, color=\"blue\", linewidth=2.5, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","aaaac50b":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test, y_pred)","e05525b6":"r_squared = r2_score(y_test, y_pred)","ba8667ea":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","70701b27":"import matplotlib.pyplot as plt\nplt.scatter(y_test,y_pred)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","0245a440":"Now, let's check the structure of the advertising dataset.","62dfc915":"## Understanding the Data","0e1d34fa":"# Perfroming Simple Linear Regression","0ff989d5":"### Generic Steps in Model Building using ```sklearn```\n\nBefore you read further, it is good to understand the generic structure of modeling using the scikit-learn library. Broadly, the steps to build any model can be divided as follows: ","b2d10178":"<font color=\"blue\"><font>In this example we will consider sales based on 'TV' marketing budget. \n\nIn this notebook, we'll build a linear regression model to predict 'Sales' using 'TV' as the predictor variable.\n","b38bc2e7":"## Coefficients Calculation","a5aa1c52":"# Visualising Data Using Seaborn","29f8ceb8":"## Splitting Data into Training and Testing Sets","930406f4":"#### Computing RMSE and R^2 Values","ad9f609b":"## Predictions","3ce9f9ac":"## Preparing X and y\n\n-  The scikit-learn library expects X (feature variable) and y (response variable) to be NumPy arrays.\n-  However, X can be a dataframe as Pandas is built over NumPy.","0cf59158":"## Performing Linear Regression","8b9675a7":"$y = 6.989 + 0.0464 \\times TV $<br>\n\nNow, let's use this equation to predict our sales.","da66a66f":"# <font color=\"sky blue\">Simple Linear<\/font> Regression ","4da5224d":"Equation of linear regression<br>\n$y = c + m_1x_1 + m_2x_2 + ... + m_nx_n$\n\n-  $y$ is the response\n-  $c$ is the intercept\n-  $m_1$ is the coefficient for the first feature\n-  $m_n$ is the coefficient for the nth feature<br>\n\nIn our case:\n\n$y = c + m_1 \\times TV$\n\nThe $m$ values are called the model **coefficients** or **model parameters**.","d0e544bc":"Let's start with the following steps:\n\n1. Importing data using the pandas library\n2. Understanding the structure of the data"}}