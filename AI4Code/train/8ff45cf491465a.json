{"cell_type":{"445babfa":"code","db96bab1":"code","4f90fc89":"code","73679028":"code","8e0828ca":"code","05b7e0c3":"code","2d7ee5d5":"code","4fdc5d61":"code","a9ed0200":"code","ca9c9d09":"code","9981471c":"code","00d0a314":"code","4e45bd32":"code","2ff00d43":"code","adba73d1":"code","9741199e":"code","87c3f301":"code","88ae1ec2":"code","fd632224":"code","6e2edcd7":"code","f87641f7":"code","ae467c28":"code","9749fa0e":"markdown","045c6b8b":"markdown","195989f1":"markdown","6ae1f6f5":"markdown","91340817":"markdown","49e8ee2c":"markdown","752a86a2":"markdown","f26258a3":"markdown","bd35553e":"markdown","0206d420":"markdown","37870273":"markdown","da7d2d01":"markdown","18d2add3":"markdown","f00f9841":"markdown","5d6ffc23":"markdown"},"source":{"445babfa":"# for numbers and datasets\nimport numpy as np\nimport pandas as pd\n# for the plots\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# from sklearn import metrics\n# importamos el modulo para cross validation\n# from sklearn.model_selection import cross_val_score\n# el separador de datos en entrenamiento y testeo\n\n\npath = '\/kaggle\/input\/cov19-open-data-mexico\/data.csv'","db96bab1":"# read the dataset\ndataset = pd.read_csv(path, encoding='unicode_escape')\nprint('Shape:', dataset.shape)\ndataset.head()","4f90fc89":"# different values from column 'CLASIFICACION_FINAL'\ndataset['CLASIFICACION_FINAL'].value_counts().plot(kind='bar')","73679028":"dataset.isnull().any()","8e0828ca":"# values that are negative, that are going to be deleted\nnegative_values = (4,5,6,7,97)\n\n# then delete those rows\nfor val in negative_values:\n    dataset.drop(dataset[dataset['CLASIFICACION_FINAL'] == val].index, axis=0, inplace=True)\n\n# see the new shape\ndataset.shape","05b7e0c3":"# define the features (health issues and other interesting values) and the target\nfeatures = ['DIABETES','EPOC','ASMA','INMUSUPR','HIPERTENSION','CARDIOVASCULAR','OBESIDAD',\n                'RENAL_CRONICA','TABAQUISMO','INTUBADO','NEUMONIA','EDAD','FECHA_DEF']\n\n# then select the columns required\ndf = dataset[features]\ndf.head()","2d7ee5d5":"# See how many values there are in Diabetes column\ndf['DIABETES'].value_counts().plot(kind='bar')","4fdc5d61":"# this procees is for almost all the columns\nfor column in df.columns:\n    # drop the columns that has those unknown values\n    df = df.drop(df[df[column]==98].index, axis=0)\n    df = df.drop(df[df[column]==99].index, axis=0) ","a9ed0200":"# the we can see the new plot without that unknown values\ndf['DIABETES'].value_counts().plot(kind='bar')","ca9c9d09":"df['INTUBADO'].value_counts().plot(kind='bar')","9981471c":"# it's needed to change the values to only 1 and 0\n\n# in the \"INTUBADO\" column the values are different\n# 97 is not intubated and 2 is intubated\ndf['INTUBADO'] = df['INTUBADO'].replace({2: 1})\ndf['INTUBADO'] = df['INTUBADO'].replace({97: 0})\n\n\n# apply the process to all the columns\nfor column in df.columns:\n    # replace the 2 values to 0\n    df[column] = df[column].replace({2: 0})\n\ndf.head()","00d0a314":"target = []\n# iterate the defunction date column values\nfor value in df['FECHA_DEF'].values:\n    if value == '9999-99-99': # recovered\n        target.append(0)\n    else: # death\n        target.append(1)\n        \n# then convert the list to a numpy array\ntarget = np.array(target)\n# see a slice of the taregt\nprint(target[:30], target.shape)\n\n# finally drop the defunction date column\ndf.drop(['FECHA_DEF'], axis=1, inplace=True)","4e45bd32":"# this is the number of death patients in the dataset\nprint('Deaths:', list(target).count(1))","2ff00d43":"print('target: ', list(target.shape)[0])\nprint('Dataset: ', list(df.shape)[0])","adba73d1":"rows = 4\ncols = 3\n# create the plot\nfig, axs = plt.subplots(rows, cols)\n# are all the columns in exception of age\ntitles = list(df.columns[:-1])\n# ass the defunctions values\ntitles.append('DEFUNCIONES')\n# counter for the titles\ncount = 0\n\n# iterate the rows\nfor i in range(rows):\n    # iterate the columns\n    for j in range(cols):\n        #\u00a0data from the features\n        if count < 8:\n            # define the values, negative, positive\n            vals = [df[titles[count]].value_counts()[0], df[titles[count]].value_counts()[1]]\n            # plot the values\n            axs[i, j].pie(vals, labels=['Not','Yes'])\n        # data from the target\n        else:\n            vals = [list(target).count(0), list(target).count(1)]\n            axs[i, j].pie(vals, labels=['Not','Yes'])\n        # set the plot title\n        axs[i, j].set_title(titles[count])\n        count +=1","9741199e":"df.head()","87c3f301":"from sklearn.preprocessing import StandardScaler\n# instance the scaler\nscaler = StandardScaler()\n# fit the scaler\nscaler.fit(df.values)\n# and use the scaler\nX = scaler.transform(df.values)","88ae1ec2":"# reshape the target, it's needed for the nn\nY = target.reshape([-1,1])\n# check the sizes\nlen(X), len(Y)","fd632224":"from sklearn.model_selection import train_test_split\n\n# split the data\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=2020)\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=2020)\n\n# plot the shapes of the data sets\nplt.title('Data sets sizes')\nplt.pie([len(x_train), len(x_test), len(x_val)], labels=['Training', 'Testing', 'Validation'])\nplt.show()","6e2edcd7":"from tensorflow import keras\nfrom keras import Sequential, layers\nfrom keras.layers import Dense, Dropout, BatchNormalization\nfrom keras.callbacks import EarlyStopping\n\n\nmodel = Sequential([\n    # layers of the model\n    Dense(128, input_shape=[X.shape[1]], activation='relu'),\n    BatchNormalization(),\n    Dropout(rate=0.3),\n    Dense(64, activation='relu'),\n    BatchNormalization(),\n    Dropout(rate=0.3),\n    Dense(1, activation='sigmoid'),\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy'],\n)\n\nearly_stopping = EarlyStopping(\n    min_delta=0.001,\n    patience=10,\n    restore_best_weights=True,\n)\n\nhistory = model.fit(\n    x_train, y_train,\n    batch_size=256,\n    epochs=30,\n    validation_data=(x_val, y_val),\n    callbacks=[early_stopping]\n)","f87641f7":"results = model.evaluate(x_test, y_test, batch_size=128)\nprint(\"test loss, test acc:\", results)","ae467c28":"model.save(\"cov_model_nn.h5\")","9749fa0e":"## Select the Features\nThe most useful features are those that are `patients health issues`, so the model might show what patients are at greater risk of die. Also the target will be selected with the features.\n\n## Why the target says date of defunction?\nThis is because that column has fake or strange values (99\/99\/9999) for recovered patients, and normal dates for death patients. What it's needed is to change the dates to 1 or 0, recovered or death.","045c6b8b":"# Data Processing","195989f1":"## Data Normalization","6ae1f6f5":"## Cleaning the \"null\" values","91340817":"Then, having the positive cases the first value shows how many cases Mexico has (in the date the dataset was downloaded)","49e8ee2c":"## The Target","752a86a2":"Check the sizes","f26258a3":"# Analising The COVID-19 Mexico Database With Neural Networks\n### The purpose of this notebook is to estimate the patients death probability depending on the database features.\n","bd35553e":"## Convert to Numerical Values","0206d420":"## Final visualization of the features","37870273":"# Slice the data in Training, Validation and Testing","da7d2d01":"## Select Positive COVID-19 Tests\n\nFor this resarching it's needed to select only the positive COVID-19 tested patients. `Then, select only the rows that has 1 in the 'CLASIFICACION_FINAL' column or delete the rows that does not have that value`.","18d2add3":"## Labels\n\nThese are the labels for the columns:\n- Sexo(gender): 1-Woman, 2-Man\n- Enfermedades(issues): 1-sick, 2-not sick, 99-unknown.\n- Fecha de defuncion(defunction date): 9999-99-99 - recovered, `a normal date` - death.\n\n**Note:** The 98 or 99 values mean *unknown value*, so these are **like null values**, need to be cleaned.","f00f9841":"# The Model (a neural network)","5d6ffc23":"## See if the dataset has null values"}}