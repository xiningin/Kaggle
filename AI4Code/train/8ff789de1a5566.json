{"cell_type":{"90953112":"code","5ca812e0":"code","a49ab438":"code","b5129cdc":"code","f284a7f6":"code","0b8640c8":"code","c2775a37":"code","44847110":"code","1fba1fa2":"code","e6f42081":"code","8cbc28b1":"code","7568d731":"code","bf36e1f3":"code","69ebdf1f":"code","60bea6e9":"code","1e8af854":"code","629a6e7b":"code","206261f1":"code","02010135":"code","7c844028":"code","e657ed9c":"code","f0ac4f07":"code","d94cab90":"code","8056a080":"code","ba4bb6be":"code","b7b26dcc":"code","aa27d724":"code","5265c80c":"code","c9a7a1b1":"code","731cc2c6":"code","1ae64618":"code","9b0d216b":"code","e9fc530e":"code","34dc034c":"code","80e6e280":"code","f6c81960":"code","637c4ecb":"code","8244b06f":"code","81a48176":"code","fab193c7":"code","fb5f52e6":"code","eab6252b":"code","3bb80180":"code","90277f31":"code","094c92d7":"code","f1b17c27":"code","ee2ef9f8":"code","52393858":"code","0aa75751":"code","ea8368e1":"code","bbb778c5":"code","2660ff1e":"code","e7952e19":"code","898b7aba":"code","669c05c1":"code","4394f680":"code","9c41168d":"code","aefb4f61":"code","2ea6ccf4":"code","0a71a13b":"code","71152162":"code","956ac79a":"code","ed9e601f":"code","215c78d8":"code","6cc1bb74":"code","dc71fa78":"code","19c43cb6":"code","1329890c":"code","bf33804e":"code","39b0719a":"code","562dbd71":"code","f8b36d55":"code","6be6b46d":"code","eaeaa3c8":"code","055c101a":"code","cd316a4c":"code","6b668fa5":"code","6d7c99c7":"code","b22892af":"code","7cdee053":"code","8dfbe8cb":"code","6ba495ab":"code","0e42437e":"code","ff2b9f84":"code","860725bb":"code","ab0c1451":"code","3945ee14":"code","174c8b22":"code","d2095ffc":"code","959b88ca":"code","da8e3caa":"code","a8cff981":"code","7ed37ca5":"markdown","aca0830d":"markdown","fd31bbe2":"markdown","e72dbfa3":"markdown","2b9e9fc1":"markdown","38822157":"markdown","52d63ffb":"markdown","09f5bf2e":"markdown","3cbe5ce2":"markdown","6153a4ed":"markdown","376a84a4":"markdown","73d2b1a9":"markdown"},"source":{"90953112":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5ca812e0":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns ","a49ab438":"train = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv')\ntest = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","b5129cdc":"print(train.shape)","f284a7f6":"train.head()","0b8640c8":"train.info()","c2775a37":"train = train.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\n                              \"Unnamed: 1\":\"DateTimeOfAccident\",\n                              \"Unnamed: 3\":\"Age\",\n                              \"Unnamed: 4\":\"Gender\",\n                              \"Unnamed: 5\":\"MaritalStatus\",\n                              \"Unnamed: 6\":\"DependentChildren\",\n                              \"Unnamed: 8\":\"WeeklyWages\",\n                              \"Unnamed: 9\":\"PartTimeFullTime\",\n                              \"Unnamed: 10\":\"HoursWorkedPerWeek\",\n                              \"Unnamed: 12\":\"ClaimDescription\",\n                              \"Unnamed: 13\":\"InitialIncurredCalimsCost\",\n                              \"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)","44847110":"train.head()","1fba1fa2":"data_train = train.drop(train.index[0])","e6f42081":"data_train.head()","8cbc28b1":"data_train.describe()","7568d731":"data_train.isnull()","bf36e1f3":"data_train.isnull().sum()","69ebdf1f":"data_train['MaritalStatus'].describe()","60bea6e9":"data_train['MaritalStatus'].value_counts()","1e8af854":"data_train['MaritalStatus'] = data_train['MaritalStatus'].fillna(data_train['MaritalStatus'].mode()[0]).isnull().sum()","629a6e7b":"data_train['WeeklyWages'] = data_train['WeeklyWages'].fillna(data_train['WeeklyWages'].median()).isnull().sum()","206261f1":"data_train['HoursWorkedPerWeek'] = data_train['HoursWorkedPerWeek'].fillna(data_train['HoursWorkedPerWeek'].median()).isnull().sum()","02010135":"data_train['WeeklyWages']=data_train['WeeklyWages'].astype(np.float64)\ndata_train['WeeklyWages']=data_train['WeeklyWages'].astype(np.int64)","7c844028":"data_train['HoursWorkedPerWeek']=data_train['HoursWorkedPerWeek'].astype(np.float64)\ndata_train['HoursWorkedPerWeek']=data_train['HoursWorkedPerWeek'].astype(np.int64)","e657ed9c":"data_train.isnull().sum()","f0ac4f07":"data_train.plot.box(figsize=(10,5))","d94cab90":"data_train['DaysWorkedPerWeek'].value_counts()","8056a080":"data_train['DateTimeOfAccident'].value_counts()","ba4bb6be":"data_train['Gender'].value_counts()\n","b7b26dcc":"data_train['DependentsOther'].value_counts()","aa27d724":"data_train['DateTimeOfAccident'] = pd.to_datetime(data_train['DateTimeOfAccident'])\ndata_train[\"yearofAccident\"] =data_train[\"DateTimeOfAccident\"].dt.year\ndata_train[\"dayofweekAccident\"] = data_train[\"DateTimeOfAccident\"].dt.weekday\ndata_train['monthOfAccident'] =data_train['DateTimeOfAccident'].dt.month\n","5265c80c":"data_train['DateReported'] = pd.to_datetime(data_train['DateReported'])\ndata_train[\"yearReported\"] = data_train[\"DateReported\"].dt.year\ndata_train[\"dayweekReported\"] = data_train[\"DateReported\"].dt.weekday\ndata_train['monthReported'] = data_train['DateReported'].dt.month","c9a7a1b1":"data_train.head()","731cc2c6":"data_train['DaysWorkedPerWeek'].value_counts()","1ae64618":"data_train['yearReported'].value_counts()","9b0d216b":"data_train['Difference_month']=(data_train['yearReported']-data_train['yearofAccident'])*12+(data_train['monthReported']-data_train['monthOfAccident'])","e9fc530e":"data_train.columns","34dc034c":"data_col =['Age', 'Gender', 'MaritalStatus','DependentChildren','DependentsOther','WeeklyWages', 'PartTimeFullTime','HoursWorkedPerWeek','InitialIncurredCalimsCost','DaysWorkedPerWeek',\n           'UltimateIncurredClaimCost', 'dayofweekAccident','monthOfAccident', 'dayweekReported', 'monthReported','Difference_month']","80e6e280":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\nimport sklearn.linear_model as glm\nimport matplotlib.pyplot as plt","f6c81960":"data_model = data_train[data_col]","637c4ecb":"data_model.select_dtypes('object').head()","8244b06f":"data_model['InitialIncurredCalimsCost']=data_model['InitialIncurredCalimsCost'].astype(np.float64)\ndata_model['InitialIncurredCalimsCost']=data_model['InitialIncurredCalimsCost'].astype(np.int64)\ndata_model['UltimateIncurredClaimCost']=data_model['UltimateIncurredClaimCost'].astype(np.float64)\ndata_model['UltimateIncurredClaimCost']=data_model['UltimateIncurredClaimCost'].astype(np.int64)\ndata_model['DependentChildren']=data_model['DependentChildren'].astype(np.float64)\ndata_model['DependentChildren']=data_model['DependentChildren'].astype(np.int64)\ndata_model['Age']=data_model['Age'].astype(np.float64)\ndata_model['Age']=data_model['Age'].astype(np.int64)","81a48176":"import sklearn.preprocessing as pre","fab193c7":"data_model.dtypes","fb5f52e6":"le=pre.LabelEncoder()\ndata_model['Gender'] = le.fit_transform(data_model['Gender'])\ndata_model['MaritalStatus'] = le.fit_transform(data_model['MaritalStatus'])                                      \ndata_model['PartTimeFullTime']=le.fit_transform(data_model['PartTimeFullTime'])                                  \n","eab6252b":"sns.boxplot(data_model['UltimateIncurredClaimCost'])","3bb80180":"data_model[~data_model['MaritalStatus'].isin(['M', 'S', 'U'])]['Age'].plot(kind = 'hist')","90277f31":"plt.figure(figsize = (16, 10))\nplt.subplot(1, 2, 1)\nsns.distplot(data_model['InitialIncurredCalimsCost'])\nplt.subplot(1, 2, 2)\nplt.title('Log Scale')\nsns.distplot(np.log1p(data_model['InitialIncurredCalimsCost']));","094c92d7":"plt.figure(figsize = (6, 6))\nsns.barplot(x = 'Gender', y = 'UltimateIncurredClaimCost', data = data_model)\n\nplt.title('Age vs UltimateIncurredClaimCost')","f1b17c27":"plt.figure(figsize = (6, 6))\nsns.barplot(x = 'Gender', y = 'dayofweekAccident', data = data_model)\n\nplt.title('')","ee2ef9f8":"train[\"LogUltimateIncurredClaimCost\"] = np.log1p(data_model[\"UltimateIncurredClaimCost\"])\ntrain[\"LogInitialIncurredCalimsCost\"] = np.log1p(data_model[\"InitialIncurredCalimsCost\"])\n\n# plot distribution: claim costs (log)\nplt.subplots(figsize=(10, 6))\nsns.distplot(train.LogUltimateIncurredClaimCost, kde=False, label='Ultimate',bins=100)\nsns.distplot(train.LogInitialIncurredCalimsCost, kde=False, label='Initial', bins=100)\nplt.xlabel('claim costs (log)')\nplt.legend()\nplt.show()","52393858":"cat_list = [c for c in data_train.columns if( (data_train[c].dtype == np.object) & (data_train[c].value_counts().count() <= 25) )] \n\n# plot distributions\nfor name in cat_list:\n    f, ax = plt.subplots(figsize=(10, 5))\n    sns.countplot(x=name,data=data_train)\nplt.show()","0aa75751":"data_model.dtypes","ea8368e1":"data_model.head()","bbb778c5":"X_scale=pre.minmax_scale(data_model.drop('UltimateIncurredClaimCost',axis=1))","2660ff1e":"Y = data_model['UltimateIncurredClaimCost']","e7952e19":"Yscale=pre.minmax_scale(data_model['UltimateIncurredClaimCost'])","898b7aba":"x_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)","669c05c1":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","4394f680":"import sklearn.linear_model as lm","9c41168d":"glm=lm.LinearRegression()","aefb4f61":"glm.fit(x_train,y_train)","2ea6ccf4":"glm.score(x_test,y_test)","0a71a13b":"glm.score(x_train,y_train)","71152162":"from sklearn.metrics import r2_score\ny_pred = glm.predict(x_test)\n\nmse = np.mean((y_test - y_pred)**2, axis = None)\nprint(\"MSE :\", mse)\n\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\nr2 = r2_score(y_test, y_pred)\nprint(\"r2 score :\", r2)","956ac79a":"y_pred","ed9e601f":"from sklearn.ensemble import RandomForestRegressor\nSEED_NUM = 789","215c78d8":"rdm = RandomForestRegressor(n_estimators = 500, max_depth = 4, n_jobs = -1,random_state=SEED_NUM)\n","6cc1bb74":"rdm.fit(x_train,y_train)","dc71fa78":"rdm.score(x_test,y_test)","19c43cb6":"rdm.score(x_train,y_train)","1329890c":"from sklearn.metrics import r2_score\ny_predrdm = rdm.predict(x_test)\nmse = np.mean((y_test - y_predrdm)**2, axis = None)\nprint(\"MSE :\", mse)\n\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\nr2 = r2_score(y_test, y_predrdm)\nprint(\"r2 score :\", r2)","bf33804e":"test = pd.read_csv('\/kaggle\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')","39b0719a":"test.head()\n","562dbd71":"test.shape\n","f8b36d55":"test.isnull().sum()\n","6be6b46d":"test['MaritalStatus'] = test['MaritalStatus'].fillna(test['MaritalStatus'].mode()[0]).isnull().sum()","eaeaa3c8":"test.isnull().sum()\n","055c101a":"test['Gender'].value_counts()","cd316a4c":"test['MaritalStatus'].value_counts()","6b668fa5":"test.columns\n","6d7c99c7":"test['Accident_Year']  = pd.DatetimeIndex(test['DateTimeOfAccident']).year\ntest['Accident_Month']  = pd.DatetimeIndex(test['DateTimeOfAccident']).month\ntest['Accident_Day']  = pd.DatetimeIndex(test['DateTimeOfAccident']).day\ntest['Accident_WeekDay']  = pd.DatetimeIndex(test['DateTimeOfAccident']).day_name()\ntest['Accident_Hour']  = pd.DatetimeIndex(test['DateTimeOfAccident']).hour","b22892af":"test['DateReported']=pd.to_datetime(test['DateReported'],format=\"%Y-%m-%dT%H:%M:%S\")\ntest[\"Report_Year\"] =test[\"DateReported\"].dt.year\ntest[\"Report_Month\"] = test[\"DateReported\"].dt.weekday\ntest['Report_Day'] =test['DateReported'].dt.month","7cdee053":"test['Difference']=(test['Report_Year']-test['Accident_Year'])*12+(test['Report_Month']-test['Accident_Month'])","8dfbe8cb":"test.columns","6ba495ab":"test['WeeklyWages']=test['WeeklyWages'].astype(np.float64)\ntest['WeeklyWages']=test['WeeklyWages'].astype(np.int64)","0e42437e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntest['Gender'] = le.fit_transform(test['Gender'])\ntest['MaritalStatus'] = le.fit_transform(test['MaritalStatus'])\ntest['PartTimeFullTime']=le.fit_transform(test['PartTimeFullTime'])\ntest=test.astype({\"DateReported\":int})\n","ff2b9f84":"df_col = ['Age', 'Gender', 'MaritalStatus','DependentChildren','DependentsOther','WeeklyWages', 'PartTimeFullTime','HoursWorkedPerWeek','InitialIncurredCalimsCost','DaysWorkedPerWeek',\n         'Accident_Day','Accident_Month', 'Report_Day', 'Report_Month','Difference']","860725bb":"df_model = test[df_col]","ab0c1451":"df_model.dtypes","3945ee14":"import sklearn.preprocessing as pre\ndf_val = pre.minmax_scale(df_model,axis=1)","174c8b22":"y_predict  = glm.predict(df_val)","d2095ffc":"#from sklearn.metrics import r2_score\n#mse = np.mean((y_actual - y_predict), axis = None)\n#UltimateIncurredClaimCost = np.sqrt(mse)\n#print(\"RMSE :\", UltimateIncurredClaimCost)\n","959b88ca":"yrdm = rdm.predict(df_val)","da8e3caa":"#from sklearn.metrics import r2_score\n#mse = np.mean((y_act - yrdm)**2, axis = None)\n#UltimateIncurredClaimCost = np.sqrt(mse)\n#print(\"RMSE :\", UltimateIncurredClaimCost)\n","a8cff981":"#csv = pd.read_csv(\"\/kaggle\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\n#csv[\"UltimateIncurredClaimCost\"] = UltimateIncurredClaimCost\n#csv.to_csv(\"Sample_Submission.csv\", index = False)","7ed37ca5":"## Data Pre-processing\n * Data Cleaning\n * Data Transformation\n * Data Integrtion\n * Data Frame Summary","aca0830d":"## Model Selection\n-  Features and Outcomes\n\n- Create Train and Test Datasets\n\n-  A Machine learning Dataset\n\n- Check for model performance","fd31bbe2":"## EDA - Exploratory Data Analysis","e72dbfa3":"## Using Linear Model ","2b9e9fc1":"### ","38822157":"### Data Transformation\n\n- Treating Missing values\n- Binning\n- Type Casting","52d63ffb":"## Predicting models using Test data","09f5bf2e":"### Import packages for load, read, plot data","3cbe5ce2":"## Loading Library's for importing dataset","6153a4ed":"  ### Visualizing numerical features","376a84a4":"### visulizing catagorical variables","73d2b1a9":"## Using RandomForest because linear model performance is not well performed"}}