{"cell_type":{"60fec45c":"code","9470017d":"code","87a7e506":"code","c714c83c":"code","308b9e9e":"code","0338e976":"code","f5f8b260":"code","4e3a6b96":"code","a213a05b":"markdown","d76be6df":"markdown","82bd4f96":"markdown","da76330a":"markdown","37ff9af5":"markdown","e4d69a05":"markdown","41b07a7e":"markdown","f6d9ad07":"markdown","2036485e":"markdown","0b5c780a":"markdown"},"source":{"60fec45c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')","9470017d":"from sympy.ntheory.primetest import isprime\n\ncities = pd.DataFrame({'CityId': range(11), 'X' : range(11), 'Y' : [0]*11})\ncities.loc[11] = [11, 9, 1]\ncities.loc[12] = [12, 10, 1]\ncities = cities.drop(cities.index[[0]])\n\ncities['IsPrime'] = cities['CityId'].apply(lambda val: isprime(val))\ncities = cities.reset_index(drop=True)\ndisplay(cities)","87a7e506":"plt.figure(figsize=(15, 2))\nsns.regplot(data=cities, x=\"X\", y=\"Y\", fit_reg=False, marker=\"+\", color=\"blue\")\np1=sns.regplot(data=cities, x=\"X\", y=\"Y\", fit_reg=False, marker=\"o\", color=\"skyblue\", scatter_kws={'s':400})\n\n# add annotations one by one with a loop\nfor line in range(0, cities.shape[0]):\n    if cities.IsPrime[line]:\n        color = 'red'\n    else:\n        color = 'black'\n    p1.text(cities.X[line]+0.2, cities.Y[line], cities.CityId[line], \n             horizontalalignment='left', size='medium', color=color, weight='semibold')","c714c83c":"path_10th_step_regular = list(range(1, 13))\npath_10th_step_regular.remove(11)\ndisplay(path_10th_step_regular)","308b9e9e":"path_10th_step_prime = list(range(1, 13))\npath_10th_step_prime.remove(10)\ndisplay(path_10th_step_prime)","0338e976":"from scipy.spatial import distance\n\ndef compute_score(cities, path):\n    score = np.float64()\n    score = 0\n    for step in range(1,len(path)):\n        cityId_start = path[step-1]\n        cityId_end   = path[step]\n        \n        city_start = cities.loc[cities['CityId'] == cityId_start]\n        city_end   = cities.loc[cities['CityId'] == cityId_end]\n        \n        city_start_coord = np.array([city_start.iloc[0]['X'], city_start.iloc[0]['Y']])\n        city_end_coord   = np.array([city_end.iloc[0]['X'], city_end.iloc[0]['Y']])\n\n        distance_step = distance.euclidean(city_start_coord, city_end_coord)\n\n        if step%10 == 0 and  not city_start.iloc[0]['IsPrime']:\n            distance_step = 1.1 * distance_step\n\n        score = score + distance_step\n\n    return score","f5f8b260":"compute_score(cities, path_10th_step_regular)","4e3a6b96":"compute_score(cities, path_10th_step_prime)","a213a05b":"### Path with 10th step coming from a prime city (11)","d76be6df":"## Simplified map for evaluation purposes","82bd4f96":"## Tests","da76330a":"### Dataframe of the cities\nCoordinates of the cities and a column specifying wether the CityId is a prime number or not","37ff9af5":"### Path with 10th step coming from a prime city (11)","e4d69a05":"## Paths\nReaching the city 12 in 10 steps.\n### Path with 10th step coming from a regular city (10)","41b07a7e":"### Path with 10th step coming from a regular city (10)","f6d9ad07":"### Map of the cities\nIn red the ones with prime CityId","2036485e":"# Carrots rule - Compute score\nThis kernel is designed to propose a computation of the score taking into account the carrots rule","0b5c780a":"## Scoring function"}}