{"cell_type":{"fa9c48ff":"code","45915334":"code","5b2a9cac":"code","e2fc266a":"code","5d9cf7ff":"code","1241df92":"code","3e51bcc9":"code","686d03d3":"code","c185c038":"code","f3f61bec":"code","608c709d":"code","120c93da":"code","7f5efa29":"code","ba2c641a":"code","f5fd3bbe":"code","a6e5bf2e":"code","909ec8a2":"code","83160a2b":"code","cb854d64":"code","7f62deb8":"code","e8c9e0c7":"code","16b7dc1a":"code","7a38e157":"code","9cfd8e14":"markdown"},"source":{"fa9c48ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45915334":"import seaborn as sn\nimport matplotlib.pyplot as plt\nimport nltk","5b2a9cac":"dataset = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndataset.head()","e2fc266a":"import pandas_profiling\ndataset.profile_report(title='Netflix Reviews - Report' , progress_bar = False)\n","5d9cf7ff":"dataset = dataset[['title','director','listed_in','description']]\ndataset.head()","1241df92":"dataset.isna().sum()","3e51bcc9":"dataset.director.fillna(\"\", inplace = True)\n","686d03d3":"dataset['movie_info'] = dataset['director'] + ' ' + dataset['listed_in']+ ' ' + dataset['description']","c185c038":"dataset.head()","f3f61bec":"dataset  = dataset[['title','movie_info']]","608c709d":"from nltk.corpus import stopwords\nimport string\nstop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)\n","120c93da":"from nltk.stem import WordNetLemmatizer\nimport nltk\nnltk.download('wordnet')","7f5efa29":"lemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in text.split():\n         if i.strip().lower() not in stop:\n                word = lemmatizer.lemmatize(i.strip())\n                final_text.append(word.lower())\n                \n    return  \" \".join(final_text)      \n                ","ba2c641a":"dataset.movie_info = dataset.movie_info.apply(lemmatize_words)","f5fd3bbe":"dataset.head()","a6e5bf2e":"from sklearn.feature_extraction.text import CountVectorizer\ntf=CountVectorizer()","909ec8a2":"X=tf.fit_transform(dataset['movie_info'])  ","83160a2b":"from sklearn.metrics.pairwise import cosine_similarity","cb854d64":"cosine_sim = cosine_similarity(X)","7f62deb8":"liked_movie = 'Transformers Prime'","e8c9e0c7":"index_l = dataset[dataset['title'] == liked_movie].index.values[0]\nsimilar_movies = list(enumerate(cosine_sim[index_l]))\nsort_movies = sorted(similar_movies , key = lambda X:X[1] , reverse = True)\nsort_movies.pop(0)\nsort_movies = sort_movies[:10]","16b7dc1a":"sort_movies","7a38e157":"for movies in sort_movies:\n    print(dataset.title[movies[0]])","9cfd8e14":"finding misiing values "}}