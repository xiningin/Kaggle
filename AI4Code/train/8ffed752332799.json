{"cell_type":{"bb6eacc7":"code","02ecca29":"code","e33cb285":"code","8a03013e":"code","0e44a9a6":"code","be5393da":"code","9a97e1a4":"code","35df1c34":"code","d469e970":"code","db075603":"code","b0fec3ca":"code","6945bf12":"code","4c704fde":"code","e89a5e5e":"code","5a64e583":"code","67578ddb":"code","4f26264d":"code","7c64ee78":"code","86d69803":"code","ad18beee":"code","438cf252":"code","f4a2e374":"code","e4f16a1c":"code","05f71d55":"code","92e580fb":"code","01fcf181":"code","289c57c4":"code","9c068696":"code","58390b1e":"code","9fbb1dd1":"code","09a8b01d":"code","cd1fa6de":"code","0c41dc6e":"code","ead71892":"code","b5e45e4f":"code","8fad548b":"code","e9a67a13":"code","dcd7a97d":"code","01f7b52f":"code","742cfba1":"code","b945f918":"code","7b17a904":"code","9c609998":"code","e4d417b9":"code","04b03692":"code","c9314730":"code","e726cfe6":"code","3caed1d7":"code","ad3e462b":"code","900d067c":"code","42064ea1":"code","a3d9cf15":"code","9e368d2c":"code","2763994d":"code","1433a2e3":"code","9b5672e5":"code","3c0af01b":"code","524596d5":"code","480ecb22":"code","c819b15c":"code","0fe63bd3":"code","084a7eeb":"code","86023570":"code","5c743a16":"code","c21cc80d":"code","66da69f6":"code","bce36924":"code","d372bcb5":"code","0bec74c6":"code","089a5095":"code","ebc3f029":"code","a7e8a64f":"code","d9f56f44":"code","c1733b0c":"code","72a20bac":"code","d6afdf6d":"markdown","c040620d":"markdown","c75044ee":"markdown","f9873e3d":"markdown","1b60d37a":"markdown","497acb37":"markdown","5e96dab0":"markdown","8cb097bb":"markdown","2e962cfd":"markdown","7b128d14":"markdown","d305c82f":"markdown","7451b4d8":"markdown","89fa1fb8":"markdown","d52659c1":"markdown","16cca5b4":"markdown","2f2c4d06":"markdown","76bf64d9":"markdown","ee5207a6":"markdown"},"source":{"bb6eacc7":"!pip install pycaret","02ecca29":"import pandas as pd \nimport numpy as np\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport optuna\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\n","e33cb285":"%matplotlib inline\nsns.set(color_codes=True)\npal = sns.color_palette(\"Set2\", 10)\nsns.set_palette(pal)","8a03013e":"train = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')","0e44a9a6":"train.info()","be5393da":"train.head()","9a97e1a4":"sns.countplot(x='Sex',hue='Survived',data=train)","35df1c34":"train.isnull().sum()","d469e970":"##Age\nsns.displot(train, x=\"Age\", kind=\"kde\",hue='Survived')","db075603":"plt.hist(x=train.Age, bins=10)\nplt.grid(axis='y', alpha=0.5)\nplt.xlabel('Age')","b0fec3ca":"print('For Missing Values')\nprint('Total no. of observations:', train[train['Age'].isnull()].shape[0])\na = train[train['Age'].isnull()].groupby('Survived').Survived.count()\nb =  pd.DataFrame({'Survived': a.index, '%age':a.values*100\/a.values.sum()})\nprint(b.to_string(index=False))","6945bf12":"mu=int(train['Age'].mean())\nprint('For mean')\nprint('Total no. of observations:', train[train['Age']==mu].shape[0])\na = train[train['Age']==mu].groupby('Survived').Survived.count()\nb =  pd.DataFrame({'Survived': a.index, '%age':a.values*100\/a.values.sum()})\nprint(b.to_string(index=False))","4c704fde":"train['Age'].fillna(train['Age'].mean(),inplace=True)\ntest['Age'].fillna(train['Age'].mean(),inplace=True)","e89a5e5e":"##Ticket\nsns.displot(train, x=\"Fare\", kind=\"kde\",hue='Survived')","5a64e583":"train.groupby('Pclass').Fare.mean()","67578ddb":"c1 = 92.65\nc2 = 25.76\nc3 = 20.62\nl=[]\ns=set(train['Fare'])\nfor i in range(train['Fare'].shape[0]):\n    if train['Fare'][i] not in s:\n        if train['Pclass'][i]==1:\n            l.append(c1)\n        elif train['Pclass'][i]==2:\n            l.append(c2)\n        else:\n            l.append(c3)\n    else:\n        l.append(train['Fare'][i])\n        \ntrain['Fare'] = l\n\nl=[]\ns=set(test['Fare'])\nfor i in range(test['Fare'].shape[0]):\n    if test['Fare'][i] not in s:\n        if test['Pclass'][i]==1:\n            l.append(c1)\n        elif test['Pclass'][i]==2:\n            l.append(c2)\n        else:\n            l.append(c3)\n    else:\n        l.append(test['Fare'][i])\n        \ntest['Fare'] = l","4f26264d":"##Ticket\ntrain.groupby('Ticket').Ticket.count().sort_values(ascending=False).head(20)\n","7c64ee78":"train.groupby(['Ticket','Survived']).Survived.count().sort_values(ascending=False).head(20)","86d69803":"train['Ticket'] = train['Ticket'].str.replace('[^a-zA-Z]', 'r').str[:1]\n\ntest['Ticket'] = test['Ticket'].str.replace('[^a-zA-Z]', 'r').str[:1]","ad18beee":"train['Ticket'].fillna('Random',inplace=True)\nl=[]\nfor i in train['Ticket']:\n    if i == 'r':\n        l.append('Random')\n    else:\n        l.append(i)\n        \ntrain['Ticket'] = l\n\n\ntest['Ticket'].fillna('Random',inplace=True)\nl=[]\nfor i in test['Ticket']:\n    if i == 'r':\n        l.append('Random')\n    else:\n        l.append(i)\n        \ntest['Ticket'] = l\n","438cf252":"train.groupby('Ticket').Ticket.count().sort_values(ascending=False).head(20)","f4a2e374":"sns.countplot(x='Ticket',hue='Survived',data=train)","e4f16a1c":"#Embarked\ntrain.groupby('Embarked').Embarked.count()","05f71d55":"sns.countplot(x='Embarked',hue='Survived',data=train)","92e580fb":"train.groupby(['Embarked','Survived']).Survived.count()","01fcf181":"train[train['Embarked'].isnull()].groupby('Survived').Survived.count()","289c57c4":"# imputing Q\nl=[]\nfor i in train['Embarked']:\n    if i in[np.nan]:\n        l.append('S')\n    else:\n        l.append(i)\n\ntrain['Embarked']=l\n\nl=[]\nfor i in test['Embarked']:\n    if i in[np.nan]:\n        l.append('S')\n    else:\n        l.append(i)\n\ntest['Embarked']=l","9c068696":"train['Cabin'].value_counts()","58390b1e":"train['Cabin'] = train['Cabin'].str[0:1]\ntrain['Cabin'].fillna('Random',inplace=True)\ntest['Cabin'] = test['Cabin'].str[0:1]\ntest['Cabin'].fillna('Random',inplace=True)","9fbb1dd1":"train['Cabin'].value_counts()","09a8b01d":"sns.countplot(x='Cabin',hue='Survived',data=train)","cd1fa6de":"train.isnull().sum()","0c41dc6e":"test.isnull().sum()","ead71892":"train['LastName'] = train['Name'].str.split(', ').str[0:1]\ntest['LastName'] = test['Name'].str.split(', ').str[0:1]","b5e45e4f":"l=[]\nfor i in train['LastName']:\n    \n    l.append(i[0])\n    \ntrain['LastName'] = l\n\n\nl=[]\nfor i in test['LastName']:\n    l.append(i[0])\n    \ntest['LastName'] = l","8fad548b":"df = train.groupby('LastName').Survived.agg(['count','mean']).sort_values(by='count',ascending=False)\ndf = df.reset_index()\ndf.head(20)\n","e9a67a13":"df2 = test.groupby('LastName').LastName.agg(['count']).sort_values(by='count',ascending=False)\ndf2 = df2.reset_index()\ndf2.head(20)\n","dcd7a97d":"d = {}\nfor i in range(df.shape[0]):\n    d[df['LastName'][i]] = df['count'][i]\n\nfor i in range (df2.shape[0]):\n    if df2['LastName'][i] not in d.keys():\n        d[df2['LastName'][i]] = 0\n    d[df2['LastName'][i]] += df2['count'][i]","01f7b52f":"l=[]\nfor i in train['LastName']:\n    if(d[i]>=5):\n        l.append(i)\n    else:\n        l.append('RandomSurname')\n    \ntrain['LastName'] = l\n\n\nl=[]\nfor i in test['LastName']:\n    if(d[i]>=5):\n        l.append(i)\n    else:\n        l.append('RandomSurname')\n    \ntest['LastName'] = l","742cfba1":"## Encoding CATEGORICAL variables Sex, Embarked\nle =LabelEncoder()\ntrain['Sex'] = le.fit_transform(train['Sex'])\ntest['Sex'] = le.transform(test['Sex'])\ntrain['Embarked'] = le.fit_transform(train['Embarked'])\ntest['Embarked'] = le.transform(test['Embarked'])\ntrain['Ticket'] = le.fit_transform(train['Ticket'])\ntest['Ticket'] = le.transform(test['Ticket'])\nle.fit(list(train['LastName'])+list(test['LastName']))\ntrain['LastName']=le.transform(train['LastName'])\ntest['LastName'] = le.transform(test['LastName'])\ntrain['Cabin']=le.fit_transform(train['Cabin'])\ntest['Cabin'] = le.transform(test['Cabin'])","b945f918":"sns.countplot(x='Parch',hue='Survived',data=train)","7b17a904":"sns.countplot(x='SibSp',hue='Survived',data=train)","9c609998":"train['FamOnBoard'] = train['Parch']+train['SibSp']\ntest['FamOnBoard'] = test['Parch']+test['SibSp']\nl=[]\nl2=[]\nfor i in train['FamOnBoard']:\n    if i ==0:\n        l.append(1)\n    else:\n        l.append(0)\n\n\ntrain['Alone'] = l\n\n\n\n\nl=[]\nl2=[]\nfor i in test['FamOnBoard']:\n    if i ==0:\n        l.append(1)\n    else:\n        l.append(0)\n\ntest['Alone'] = l\n","e4d417b9":"X = train.drop(['PassengerId','Survived','Name'],axis=1)\nX_test = test.drop(['PassengerId','Name'],axis=1)   \ny = train['Survived']","04b03692":"X.head()","c9314730":"sns.countplot(x='FamOnBoard',hue='Survived',data=train)","e726cfe6":"sns.countplot(x='Alone',hue='Survived',data=train)","3caed1d7":"plt.figure(figsize=(10,7))\nsns.heatmap(X.corr(),annot=True,vmin=-1,vmax=1,cmap='coolwarm')","ad3e462b":"X_train, X_dev, y_train, y_dev = train_test_split(X, y, test_size=0.2,random_state=42)","900d067c":"from pycaret.classification import *\nclf1 = setup(data=train.drop(['PassengerId','Name'],axis=1),target='Survived',\n             categorical_features= ['Pclass','Sex','Ticket','Embarked','Cabin'],\n             silent=True,train_size=0.8,\n             normalize=True, \n             create_clusters=True,\n             ignore_low_variance=True,\n             polynomial_features=True, \n             trigonometry_features=True,\n             feature_interaction=True,\n             feature_ratio=True,\n             feature_selection=True )","42064ea1":"models()","a3d9cf15":"compare_models()","9e368d2c":"lgbm = create_model('lightgbm')","2763994d":"tuned_lgbm = tune_model(lgbm)","1433a2e3":"cb = create_model('catboost',fold=5)","9b5672e5":"tuned_cb = tune_model(cb,fold=5)","3c0af01b":"gbc = create_model('gbc',fold=5)\n","524596d5":"tuned_gbc = tune_model(gbc,fold=5)","480ecb22":"blender = blend_models(estimator_list = [tuned_lgbm,tuned_cb,tuned_gbc], method = 'soft')","c819b15c":"blender2 = blend_models(estimator_list = [lgbm,cb,gbc], method = 'soft')","0fe63bd3":"stacker = stack_models(estimator_list = [tuned_lgbm,tuned_cb,tuned_gbc], meta_model=tuned_lgbm)","084a7eeb":"plot_model(lgbm)","86023570":"plot_model(tuned_lgbm)","5c743a16":"plot_model(cb)","c21cc80d":"plot_model(tuned_cb)","66da69f6":"plot_model(gbc)","bce36924":"plot_model(tuned_gbc)","d372bcb5":"plot_model(blender)","0bec74c6":"plot_model(stacker)","089a5095":"df = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(tuned_lgbm,data=X_test)['Label']})\ndf.to_csv('submit.csv',index=False)","ebc3f029":"df2 = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(tuned_cb,data=X_test)['Label']})\ndf2.to_csv('submit2.csv',index=False)","a7e8a64f":"df3 = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(tuned_gbc,data=X_test)['Label']})\ndf3.to_csv('submit3.csv',index=False)","d9f56f44":"df4 = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(blender,data=X_test)['Label']})\ndf4.to_csv('submit4.csv',index=False)","c1733b0c":"df5 = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(stacker,data=X_test)['Label']})\ndf5.to_csv('submit5.csv',index=False)","72a20bac":"df6 = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict_model(lgbm,data=X_test)['Label']})\ndf6.to_csv('submit6.csv',index=False)","d6afdf6d":"### Stacker Model Predictions","c040620d":"### As we can see Fare is corelated to the Pclass so we can impute accordingly","c75044ee":"# Model Selection using Pycaret \ud83e\udd55  ","f9873e3d":"## Making Predictions","1b60d37a":"### Here we have two options to impute the mode that is **S** or impute the category which has most equal ratio as survived that is **Q** So we can do trial and error","497acb37":"### A very imbalanced distribution in which we can see high fare passengers survived more than others","5e96dab0":"### We can make another feature corelating with both Parch and Sibsp","8cb097bb":"## Creating and Tuning Top 3 models","2e962cfd":"## Sex-Survived Comparison","7b128d14":"## Handling Missing values for\n1. Age\n2. Ticket\n3. Fare\n4. Embarked\n5. Cabin","d305c82f":"## Comparing baselines","7451b4d8":"### Distribution matches with mean","89fa1fb8":"### Blender Model Predictions","d52659c1":"## Stacking","16cca5b4":"## Blending","2f2c4d06":"### Individual model predictions","76bf64d9":"## Cabin","ee5207a6":"## Every missing value has been handled"}}