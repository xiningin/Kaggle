{"cell_type":{"3d981903":"code","1f97860b":"code","e3c63afc":"code","8e79df8a":"code","f89aea93":"code","1f35ddfa":"code","4b1cde9b":"code","e130cf02":"code","83a12f60":"code","1faa061a":"code","95756c2e":"code","9b50350e":"code","d91f573a":"code","3e80c947":"code","7767c237":"code","0fe3323e":"code","d2d3d9f4":"code","cdd93303":"code","361fdda2":"code","8bef1ddf":"code","afeb7687":"code","4a50babe":"code","e2acff60":"code","8061bbee":"code","00012d4e":"code","72fc96c9":"code","8f073029":"code","f0e0a216":"code","d48334e0":"code","477626a8":"code","df024625":"code","c79e452f":"code","f9e08669":"code","23dc3ad1":"code","3aa466ae":"code","ee57fc79":"code","58fff780":"code","be4e2772":"code","97d2495c":"code","6eab793e":"code","01037110":"code","5871bafb":"code","69494a56":"code","dad81667":"code","afd03a90":"code","3eaaa4e4":"code","94ae2e70":"code","9a64f181":"code","731c0b7a":"code","a899402b":"code","82909907":"code","06bfe0cc":"code","4b557c1f":"code","33d6cd67":"code","2db27ea0":"code","32c65d59":"code","ef312db3":"code","713fd8ab":"code","6285bc40":"code","a913e38f":"code","182d65d9":"code","f46e5add":"code","5a71278f":"code","3dfa87ee":"code","f8950557":"code","e84851ce":"code","757312c2":"code","f36bb1d1":"code","227195e4":"code","3932ead4":"code","b3670025":"code","7cf88f9a":"code","523ad0b4":"code","69821954":"code","c3c972c4":"code","adacdd79":"code","3c7958ba":"code","d71d0217":"code","fa83b13d":"code","218978e6":"code","39b9bde4":"code","3d3c7eea":"code","6a0dfa5a":"code","cf0df2c1":"code","f992f322":"code","ef46600e":"code","2b2ad8c7":"code","1d31ee8b":"code","ebf5a507":"code","dbe1b3ee":"code","c6339125":"code","ef0a24f3":"code","3703e744":"code","0c293c03":"code","3666d36d":"markdown","06a9a9df":"markdown","a2edfca7":"markdown","b66242b7":"markdown","0b008465":"markdown","f39b7c2d":"markdown","6b7bc140":"markdown","fa3c9201":"markdown","d63d1c11":"markdown","13c5d0a4":"markdown","5693f578":"markdown","9b897f3d":"markdown","2f12081a":"markdown","a53b54f0":"markdown","e5a87341":"markdown","de20ed09":"markdown","6e52ac86":"markdown","86818ced":"markdown"},"source":{"3d981903":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1f97860b":"import os\nos.listdir('..\/input')","e3c63afc":"df=pd.read_csv('..\/input\/quality-prediction-in-a-mining-process\/MiningProcess_Flotation_Plant_Database.csv',decimal=',').drop_duplicates()\ndf.head()","8e79df8a":"df.shape","f89aea93":"df.columns","1f35ddfa":"df.groupby(['date'])","4b1cde9b":"plt.figure(figsize=(30,10))\ndf.groupby(['date']).mean()['% Silica Concentrate'].plot()\nplt.show()","e130cf02":"plt.figure(figsize=(30,10))\ndf.groupby(['date']).mean()['% Iron Concentrate'].plot()\nplt.show()","83a12f60":"df.groupby(['% Silica Concentrate']).mean()","1faa061a":"df.groupby(['% Iron Concentrate']).mean()","95756c2e":"# deleting date column","9b50350e":"df=df.drop(['date'],axis=1)","d91f573a":"from sklearn.model_selection import train_test_split","3e80c947":"train,test=train_test_split(df,test_size=0.3)","7767c237":"print('Train size',train.shape)\nprint('Test size',test.shape)","0fe3323e":"import missingno\nmissingno.matrix(train,figsize=(20,5))","d2d3d9f4":"import missingno\nmissingno.matrix(test,figsize=(20,5))","cdd93303":"plt.figure(figsize=(30,30))\nsns.heatmap(train.corr(),annot=True,linewidths=0.3)\nplt.show()","361fdda2":"train.columns[-1]","8bef1ddf":"train.info()","afeb7687":"train.describe()","4a50babe":"import statsmodels.api as sm","e2acff60":"# Deleting date columns and % Iron Concentration\ny=train['% Silica Concentrate']\nX=train.drop(['% Silica Concentrate'],axis=1)","8061bbee":"# Backward Elimination\ncols=list(X.columns)\npmax=1\nwhile len(cols)>0:\n    p=[]\n    C=X[cols]\n    xc=sm.add_constant(C)\n    model=sm.OLS(y,xc).fit()\n    p=pd.Series(model.pvalues.values[1:],index=cols)\n    pmax=max(p)\n    feature_with_p_max=p.idxmax()\n    if pmax>0.05:\n        cols.remove(feature_with_p_max)\n    else:\n        break\n        \nselected_cols=cols\nprint(selected_cols)","00012d4e":"import statsmodels.api as sm\nxc=sm.add_constant(X[selected_cols])\nxc=xc.drop([],axis=1)\nmodel=sm.OLS(y,xc).fit()\nmodel.summary()","72fc96c9":"residuals=model.resid\nsns.distplot(residuals)","8f073029":"import scipy.stats as stats\nstats.probplot(residuals,plot=plt)\nplt.show()","f0e0a216":"import statsmodels.tsa.api as smt\nacf=smt.graphics.plot_acf(residuals,lags=40)\nacf.show()","d48334e0":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\npd.DataFrame({'vif':vif},index=X.columns).T","477626a8":"from sklearn import metrics","df024625":"y=train['% Silica Concentrate']\nX=train.drop(['% Silica Concentrate'],axis=1)","c79e452f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                        test_size=0.30, random_state=42)","f9e08669":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()","23dc3ad1":"lr.fit(X_train,y_train)","3aa466ae":"y_train_pred=lr.predict(X_train)\nprint (\"intercept:\",lr.intercept_)\nprint (\"n_coefficients:         \",lr.coef_)","ee57fc79":"print('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","58fff780":"y_test_pred=lr.predict(X_test)","be4e2772":"print('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","97d2495c":"from sklearn.linear_model import Lasso,LassoCV\nlasso=Lasso(alpha=0.001,normalize=True)","6eab793e":"lasso.fit(X_train,y_train)","01037110":"y_train_pred=lasso.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","5871bafb":"y_test_pred=lasso.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","69494a56":"n_alphas = 50\nalphas = np.linspace(0.1,4.5, n_alphas)\ncoefs=[]\nlasso = Lasso()\nfor a in alphas:\n    lasso.set_params(alpha=a)\n    lasso.fit(X, y)\n    coefs.append(lasso.coef_)\n    \nplt.plot(alphas, coefs)\nplt.xlabel('alphas')\nplt.ylabel('coefs')\nplt.show()","dad81667":"n_alphas=50\nalphas=np.linspace(0.1,1, n_alphas)\n\nlasso_cv = LassoCV(alphas=alphas, cv=3, random_state=22)\nlasso_cv.fit(X,y)","afd03a90":"lasso_cv.alpha_","3eaaa4e4":"lasso = Lasso(alpha=lasso_cv.alpha_)\nlasso.fit(X_train, y_train)\nlasso.coef_\npd.DataFrame(lasso.coef_, X.columns, columns=['coefs'])","94ae2e70":"y_train_pred=lasso.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","9a64f181":"y_test_pred=lasso.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","731c0b7a":"from sklearn.linear_model import Ridge,RidgeCV\nridge=Ridge(alpha=0.05)","a899402b":"ridge.fit(X_train,y_train)","82909907":"y_train_pred=ridge.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","06bfe0cc":"y_test_pred=ridge.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","4b557c1f":"ridge.fit(X, y)\nridge.coef_\npd.DataFrame(ridge.coef_, X.columns, columns=['coefs'])","33d6cd67":"n_alphas = 200\nalphas = np.logspace(-3, 2, n_alphas)\ncoefs=[]\nmodel = Ridge()\nfor a in alphas:\n    model.set_params(alpha=a)\n    model.fit(X, y)\n    coefs.append(model.coef_)\n    \nplt.plot(alphas, coefs)\nplt.xlabel('alphas')\nplt.ylabel('coefs')\nplt.show()","2db27ea0":"n_alphas = 1000\nalphas = np.logspace(-2, 0)\n\nridge_cv = RidgeCV(alphas=alphas, store_cv_values=True)\nridge_cv.fit(X, y)\n\nridge_cv.alpha_","32c65d59":"ridge=Ridge(alpha=ridge_cv.alpha_)\nridge.fit(X_train,y_train)","ef312db3":"y_train_pred=ridge.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","713fd8ab":"y_test_pred=ridge.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","6285bc40":"from sklearn.linear_model import ElasticNet, ElasticNetCV\nenet = ElasticNet(alpha=0.1)\nenet.fit(X_train, y_train)","a913e38f":"y_train_pred=enet.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","182d65d9":"y_test_pred=enet.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","f46e5add":"pd.DataFrame(enet.coef_, X.columns, columns=['coefs'])","5a71278f":"n_alphas = 100\nalphas = np.logspace(-3, -1, n_alphas)\ncoefs=[]\nenet = ElasticNet()\nfor a in alphas:\n    enet.set_params(alpha=a)\n    enet.fit(X, y)\n    coefs.append(model.coef_)\n    \nplt.plot(alphas, coefs)\nplt.xlabel('alphas')\nplt.ylabel('coefs')\nplt.show()","3dfa87ee":"n_alphas = 100\nalphas = np.logspace(-3, 1, n_alphas)\n\nen_cv = ElasticNetCV(alphas=alphas, cv=3)\nen_cv.fit(X, y)\nen_cv.alpha_","f8950557":"enet = ElasticNet(alpha=en_cv.alpha_)\nenet.fit(X_train,y_train)","e84851ce":"y_train_pred=enet.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","757312c2":"y_train_pred=enet.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","f36bb1d1":"from sklearn.tree import DecisionTreeRegressor\n","227195e4":"train_accuracy=[]\ntest_accuracy=[]\n\nfor depth in range(5,20):\n    dt_model=DecisionTreeRegressor(max_depth=depth,random_state=42)\n    dt_model.fit(X_train,y_train)\n    train_accuracy.append(dt_model.score(X_train,y_train))\n    test_accuracy.append(dt_model.score(X_test,y_test))","3932ead4":"frame=pd.DataFrame({'max_depth':range(5,20),'train_accuracy':train_accuracy,'test_accuracy':test_accuracy})\nprint(frame)","b3670025":"plt.figure(figsize=(13,6))\nplt.plot(frame['max_depth'],frame['train_accuracy'],marker='o')\nplt.plot(frame['max_depth'],frame['test_accuracy'],marker='o')\nplt.xlabel('Depth of Tree')\nplt.ylabel('Accuracy Performance')\nplt.show()","7cf88f9a":"dtr=DecisionTreeRegressor()","523ad0b4":"dtr.fit(X_train,y_train)","69821954":"print (\"feature_importances:\",dtr.feature_importances_)\nprint (\"Best params: \\n        \",dtr.get_params)\nprint('n feature',dtr.n_features_)\nprint(dtr.n_outputs_)","c3c972c4":"y_train_pred=dtr.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","adacdd79":"y_test_pred=dtr.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","3c7958ba":"from sklearn.ensemble import RandomForestRegressor","d71d0217":"rfr=RandomForestRegressor()","fa83b13d":"rfr.fit(X_train,y_train)","218978e6":"print (\"feature_importances:\",rfr.feature_importances_)\nprint (\"n_coefficients:         \",rfr.get_params)\nprint('n feature',rfr.n_features_)\nprint(rfr.n_outputs_)","39b9bde4":"y_train_pred=rfr.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","3d3c7eea":"y_test_pred=rfr.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","6a0dfa5a":"test","cf0df2c1":"expected_output=train['% Silica Concentrate']\nexpected_input=train.drop(['% Silica Concentrate'],axis=1)","f992f322":"y_pred=rfr.predict(expected_input)","ef46600e":"print('R2 of Output: ', metrics.r2_score(expected_output,y_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(expected_output,y_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(expected_output,y_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(expected_output,y_pred)))","2b2ad8c7":"params = {\n    'n_estimators': 80,\n    'max_depth': 12,\n    'learning_rate': 0.1,\n    'criterion': 'mse'\n    }","1d31ee8b":"from sklearn.ensemble import GradientBoostingRegressor\ngbr=GradientBoostingRegressor(**params)","ebf5a507":"gbr.fit(X_train,y_train)","dbe1b3ee":"y_train_pred=gbr.predict(X_train)\nprint('R2 of Train: ', metrics.r2_score(y_train,y_train_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_train,y_train_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_train,y_train_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_train,y_train_pred)))","c6339125":"y_test_pred=gbr.predict(X_test)\nprint('R2 of Test: ', metrics.r2_score(y_test,y_test_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(y_test,y_test_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(y_test,y_test_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(y_test,y_test_pred)))","ef0a24f3":"expected_output=train['% Silica Concentrate']\nexpected_input=train.drop(['% Silica Concentrate'],axis=1)","3703e744":"y_pred=gbr.predict(expected_input)","0c293c03":"print('R2 of Output: ', metrics.r2_score(expected_output,y_pred))\nprint('Mean absolute Error: ',metrics.mean_absolute_error(expected_output,y_pred))\nprint('Mean square Error: ',metrics.mean_squared_error(expected_output,y_pred))\nprint('RMSE: ',np.sqrt(metrics.mean_squared_error(expected_output,y_pred)))","3666d36d":"# Date in Mining Ores","06a9a9df":"### 2.Linear Regression -ML","a2edfca7":"Since dataset is very huge .Considering to split the data into train and test ","b66242b7":"### 3.2 Ridge","0b008465":"## 4. Decision Tree","f39b7c2d":"### Changing max depth","6b7bc140":"## 1. Base Model","fa3c9201":"## Considering Random Forest Regressor Base Model as the final model. Implementing the model in the test data set","d63d1c11":"## Gradient Boosting","13c5d0a4":"## % for Silicon Concentration","5693f578":"### 3.Lasso\/Ridge\/ElasticNet","9b897f3d":"TEST DATASET","2f12081a":"### 3.3 Elastic Net\/Elastic Net CV","a53b54f0":"## 3.1 Lasso","e5a87341":"### Autocorrelation Check","de20ed09":"### Multicollinearity Check","6e52ac86":"### Model using Backward Elimination Model","86818ced":"## 5. Random Forest"}}