{"cell_type":{"67a8d0fd":"code","fa887ca1":"code","5c07dafe":"code","55454f03":"code","fec9a37e":"code","3f3155f2":"code","bba6ec5a":"code","f8d2491f":"code","ea3c8f02":"code","f10fd247":"code","13a07735":"code","c211b191":"code","bb7a11af":"markdown","0c7af9dd":"markdown","66a4bfae":"markdown","2673d0b7":"markdown"},"source":{"67a8d0fd":"# aqi = Air quality index ( Variable)\n\naqi_1 = 19                \naqi_2 = 22","fa887ca1":"# Addition by Syntax \n\naqi_add = aqi_1 + aqi_2                 # aqi = Air quality index ( Variable)\n\nprint('Addition by Syntax = ',aqi_add)  # to see the output\n\n\n\n# Addition by Function\n\nimport operator                         # import library\n\naqi_add1 = operator.add(aqi_1, aqi_2)\n\nprint('Addition by Function = ',aqi_add1)","5c07dafe":"# Subtraction by Syntax\n\naqi_subs = aqi_1 - aqi_2\n\nprint('Subtraction by Syntax = ',aqi_subs)\n\n\n# Subtraction by Function\n\naqi_subs1 = operator.sub(aqi_1, aqi_2)\n\nprint('Subtraction by Function = ',aqi_subs1)","55454f03":"# Multiplication by Syntax\n\naqi_mul = aqi_1 * aqi_2 \n\nprint('Multiplication by Syntax = ',aqi_mul)\n\n\n# Multiplication by Function\n\naqi_mul1 = operator.mul(aqi_1, aqi_2)\n\nprint('Multiplication by Function = ',aqi_mul1)","fec9a37e":"# division by Syntax\naqi_div = aqi_1 \/ aqi_2\n\nprint('division by Syntax = ',aqi_div)\n\n\n# division by Function\naqi_div1 = operator.truediv(aqi_1, aqi_2)\n\nprint('division by Function = ',aqi_div1)","3f3155f2":"# Floor division (results into whole number) by Syntax\n\naqi_fldiv = aqi_1 \/\/ aqi_2\n\nprint('Floor division by Syntax  = ',aqi_fldiv)\n\n\n\n# Floor division (results into whole number) by Function\n\naqi_fldiv1 = operator.floordiv(aqi_1, aqi_2)\n\nprint('Floor division by Function = ', aqi_fldiv1 )","bba6ec5a":"# Modulus (remainder) by Syntax\n\naqi_mod = aqi_1 % aqi_2\n\nprint('Modulus by Syntax = ',aqi_mod)\n\n\n# Modulus (remainder) by Function\n\naqi_mod1 = operator.mod (aqi_1, aqi_2)\n\nprint('Modulus by Function = ',aqi_mod1)","f8d2491f":"# Exponent (power) by Syntax\naqi_exp = aqi_1 ** aqi_2                 # a**b (5*5*5*5*5*5 = 15625)\n\nprint('Exponent by Syntax = ',aqi_exp)\n\n# Exponent (power) by Function\naqi_exp1 = operator.pow(aqi_1, aqi_2)          # The pow() function returns the value of x to the power of y.\n                                       # (5*5*5*5*5*5 = 15625)\n\nprint('Exponent by Function = ',aqi_exp1)","ea3c8f02":"#Impoting library \n\nimport pandas as pd","f10fd247":"aqi_dataset = pd.read_csv('..\/input\/computer-programming-and-data-analysis-with-python\/Arithmetic operators _Class_1.csv')\n","13a07735":"#print(dataset)\n\ncalifornia = aqi_dataset.california\ntexas = aqi_dataset.texas\nflorida = aqi_dataset.florida\nmississippi = aqi_dataset.mississippi\nvermont = aqi_dataset.vermont\n    \n# print('california = \\n',california)\n# print('texas = \\n',texas)\n# print('florida = \\n',florida)\n# print('vermont = \\n',vermont)\n\n\naqi_dataset.head()","c211b191":"# calculate average Air Quality Index(AQI) by Syntax\n\navg_aqi = (california + texas + florida )\/ 3\n\nprint('average Air Quality Index by Syntax = \\n',avg_aqi)\n","bb7a11af":"## Step 2: Addition, Subtraction , Multiplication, Modulo, Division, Exponentiation by syntax and by function \n\n## Step 3: Import operator libraty ","0c7af9dd":"## Step 4: Example of real data\n1. We will calculate average or arithmetic mean AQI from california and texas \t\n2. We will calculate median form california \n","66a4bfae":"## Step 1: Define the variable ","2673d0b7":"# Python Operators \n\n## Introcution \n\nThis code was developed by Md. Babul Miah  in 26 September, 2020. The main purpose of this code is to show how the operators work in Python and a practical example of Arithmetic Operator. Not to mention the reference for writing today's code is Md. Jalal Uddin. He has always been behind writing today's code.\n\n\n\n## What is it?\n\nWe have worked with operators in mathematics. This is what we say 10 + 15 = 25, here + (plus) and = (equal) is the operator. On the other hand 10, 15, 25 is the operand. Python also has many such operators. They can be divided into several types according to the type.\n\n\n## \nhttps:\/\/docs.python.org\/3\/library\/operator.html#module-operator\n \n## Arithmetic operators \n\nYou will probably already be familiar with these, since they come from basic mathematics.\n\nThe arithmetic operators are addition (+), subtraction (-), multiplication (*), division (\/), exponent (**), floor division (\/\/) and modulus (%). The first four are fairly simple; they are addition, subtraction, multiplication and division, and you will probably already be familiar with them.\n\n\n## Mapping Operators to Functions\n\nThis table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the operator module.\n\n\n## Operation ----------------------------Syntax--------------------------- Function\n\n    Addition                                            a + b                                         add(a, b)\n\n    Subtraction                                         a - b                                         sub(a, b)\n             \n    Multiplication                                      a * b                                         mul(a, b)            \n\n    Modulo                                              a % b                                         mod(a, b)\n\n    Division                                            a \/ b                                         truediv(a, b)\n\n    Division                                            a \/\/ b                                        floordiv(a, b)\n\n    Exponentiation                                      a ** b                                        pow(a, b)\n\n\nDo you more read please visit: https:\/\/docs.python.org\/3\/library\/operator.html#module-operator"}}