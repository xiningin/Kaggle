{"cell_type":{"cc099df8":"code","8ef9c09f":"code","ff9dce91":"code","96913853":"code","18278c76":"code","f86311f2":"code","bce912f0":"code","d9f035c4":"code","3f4964b2":"code","acd15ee2":"code","4c41d645":"code","5e393273":"code","5b20b44e":"code","fbe43af9":"code","1490644f":"code","0441a641":"code","7c8ed708":"code","d0beb39b":"code","519c305a":"code","c511e7ee":"code","2052584c":"code","aa977c04":"code","eeeb3ef2":"code","a54ca553":"code","62f651e0":"code","ca4a2c80":"code","f2b2e3dd":"code","a98ff4c6":"code","06e05df4":"markdown","7d36d1f5":"markdown","864f98e5":"markdown","44a3329a":"markdown","2334ab8b":"markdown","2e574b6c":"markdown","d17829e4":"markdown","55b5a999":"markdown","d488d701":"markdown","125f59a4":"markdown","3cfe82c2":"markdown","8381479e":"markdown","90bc9275":"markdown","7788b00d":"markdown","c774f31d":"markdown","008f7545":"markdown","3ec056d3":"markdown","8e17ea40":"markdown","77a2a4f8":"markdown"},"source":{"cc099df8":"import numpy as np\nimport pandas as pd\nimport os, sys\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import RidgeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import  LinearSVC\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier,ExtraTreesClassifier","8ef9c09f":"df=pd.read_csv(\"..\/input\/parkinsons-data-set\/parkinsons.data\")\ndf.head()","ff9dce91":"df.shape","96913853":"df.dtypes","18278c76":"df.describe()","f86311f2":"df.info()","bce912f0":"df.isnull().sum()","d9f035c4":"print(\"maximum value=\",df['MDVP:Fo(Hz)'].max())\nprint(\"maximum value=\",df['MDVP:Fhi(Hz)'].max())\nprint(\"maximum value=\",df['MDVP:Flo(Hz)'].max())\nprint(\"maximum value=\",df['MDVP:Jitter(%)'].max())\nprint(\"maximum value=\",df['PPE'].max())","3f4964b2":"print(\"manimum value=\",df['MDVP:Fo(Hz)'].min())\nprint(\"manimum value=\",df['MDVP:Fhi(Hz)'].min())\nprint(\"manimum value=\",df['MDVP:Flo(Hz)'].min())\nprint(\"manimum value=\",df['MDVP:Jitter(%)'].min())\nprint(\"manimum value=\",df['PPE'].min())","acd15ee2":"sns.catplot(x='status',kind='count',data=df)","4c41d645":"x=df['MDVP:Fo(Hz)']\ny=df['MDVP:Flo(Hz)']\nN = 195\ncolors = np.random.rand(N)\narea = (25 * np.random.rand(N))**2\ndf1 = pd.DataFrame({'X': x,'Y': y,'Colors': colors,\"bubble_size\":area})","5e393273":"plt.scatter('X', 'Y',  s='bubble_size', alpha=0.5, data=df1)\nplt.xlabel(\"X\", size=16)\nplt.ylabel(\"y\", size=16)\nplt.title(\"Bubble Plot with Matplotlib\", size=18)","5b20b44e":"box1=sns.catplot(x='status',y='MDVP:Jitter(Abs)',kind='box',data=df)\nplt.show ()\nbox1=sns.catplot(x='status',y='MDVP:Jitter(Abs)',kind='box',data=df)\nplt.show ()\nbox1=sns.catplot(y=\"MDVP:Flo(Hz)\", x=\"status\", data=df,kind='box')\nplt.show ()\nbox1=sns.catplot(y=\"MDVP:Jitter(%)\", x=\"status\", data=df,kind='box')\nplt.show ()\nbox1=sns.catplot(y=\"MDVP:Jitter(Abs)\", x=\"status\", data=df,kind='box')\nplt.show ()\nbox1=sns.catplot(y=\"MDVP:RAP\", x=\"status\", data=df,kind='box')\nplt.show ()","fbe43af9":"# Plot histograms for each variable\ndf.hist(figsize=(20,12))\nplt.show()","1490644f":"# Create scatter plot matrix\nfrom pandas.plotting import scatter_matrix\nscatter_matrix(df, figsize = (20,20),color='m')\nplt.show()","0441a641":"sns.pairplot(df,hue = 'status', vars = ['MDVP:Flo(Hz)','MDVP:Jitter(%)','MDVP:Jitter(Abs)','MDVP:RAP','MDVP:PPQ'] )","7c8ed708":"f,ax=plt.subplots(1,1,figsize=(25,4))\nsns.kdeplot(df.loc[(df['status']==1), 'RPDE'], color='r', shade=True, Label='1')\nsns.kdeplot(df.loc[(df['status']==0), 'RPDE'], color='g', shade=True, Label='0')\nplt.xlabel('RPDE') ","d0beb39b":"#Heat map for correlation matrix\ncorrmat = df.corr()\nfig = plt.figure(figsize = (45, 10))\nsns.heatmap(corrmat, vmax = 0.8, square = True,annot=True)","519c305a":"f,axes=plt.subplots (1,1,figsize=(15,4))\nsns.distplot(df['MDVP:Fo(Hz)'],kde=True,hist=True,color=\"r\")","c511e7ee":"f,ax=plt.subplots(1,2,figsize=(20,5))\nbox1=sns.violinplot(x=\"status\",y=\"MDVP:RAP\",data=df,ax=ax[0])\nbox2=sns.violinplot(x=\"status\",y=\"MDVP:Jitter(%)\",data=df,ax=ax[1])","2052584c":"x=df.drop(['status','name'],axis=1)\ny=df['status']","aa977c04":"#Scaling\nscaler=MinMaxScaler((-1,1))\nx=scaler.fit_transform(x)","eeeb3ef2":"#Dividing into Test and Train \nx_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=7)","a54ca553":"models = []\nmodels.append((\"LR\",LogisticRegression()))\nmodels.append((\"GNB\",GaussianNB()))\nmodels.append((\"KNN\",KNeighborsClassifier()))\nmodels.append((\"XGB\",XGBClassifier()))\nmodels.append((\"DecisionTree\",DecisionTreeClassifier()))\nmodels.append((\"LDA\",  LinearDiscriminantAnalysis()))\nmodels.append((\"QDA\",  QuadraticDiscriminantAnalysis()))\nmodels.append((\"AdaBoost\", AdaBoostClassifier()))\nmodels.append((\"SVM Linear\",SVC(kernel=\"linear\")))\nmodels.append((\"SVM RBF\",SVC(kernel=\"rbf\")))\nmodels.append((\"Random Forest\",  RandomForestClassifier()))\nmodels.append((\"Bagging\",BaggingClassifier()))\nmodels.append((\"Calibrated\",CalibratedClassifierCV()))\nmodels.append((\"GradientBoosting\",GradientBoostingClassifier()))\nmodels.append((\"LinearSVC\",LinearSVC()))\nmodels.append((\"Ridge\",RidgeClassifier()))","62f651e0":"results = []\nfor name,model in models:\n    kfold = KFold(n_splits=10, random_state=0)\n    cv_result = cross_val_score(model,x_train,y_train, cv = kfold,scoring = \"accuracy\")\n# It gives you an unbiased estimate of the actual performance you will get at runtime\n    results.append(tuple([name,cv_result.mean(), cv_result.std()]))\n    results.sort(key=lambda x: x[1], reverse = True)    \nfor i in range(len(results)):\n    print('{:20s} {:2.2f} (+\/-) {:2.2f} '.format(results[i][0] , results[i][1] * 100, results[i][2] * 100))","ca4a2c80":"from sklearn.metrics import classification_report, confusion_matrix\nxgb= XGBClassifier()\nxgb.fit(x_train,y_train)\ny_pred=xgb.predict(x_test)\nprint(classification_report(y_test,y_pred))\naccuracy1=xgb.score(x_test,y_test)\nprint (accuracy1*100,'%')\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot= True)","f2b2e3dd":"from sklearn.ensemble import RandomForestClassifier \ndes_class=DecisionTreeClassifier()\ndes_class.fit(x_train,y_train)\ndes_predict=des_class.predict(x_test)\nprint(classification_report(y_test,des_predict))\naccuracy3=des_class.score(x_test,y_test)\nprint(accuracy3*100,'%')\ncm = confusion_matrix(y_test, des_predict)\nsns.heatmap(cm, annot= True)","a98ff4c6":"from sklearn.naive_bayes  import GaussianNB \nfrom sklearn.metrics import classification_report, confusion_matrix\nnvclassifier = GaussianNB ()\nnvclassifier .fit(x_train,y_train)\ny_pred=nvclassifier .predict(x_test)\nprint(classification_report(y_test,y_pred))\nprint(accuracy_score(y_pred,y_test)*100,'%')\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot= True)","06e05df4":"**Train Test split**","7d36d1f5":"**Introduction:-**\n\nParkinson\u2019s disease is a progressive disorder of the central nervous system affecting movement and inducing tremors and stiffness. It has 5 stages to it and affects more than 1 million individuals every year in India. This is chronic and has no cure yet. It is a neurodegenerative disorder affecting dopamine-producing neurons in the brain.\n\n**Problem Statement**:- Prediction of disease\n\n**Datasetc contains following columns**\n\n\n* 1)name - object\n\n  2)MDVP:Fo(Hz) - float64\n\n  3)MDVP:Fhi(Hz) - float64\n\n  4)MDVP:Flo(Hz) - float64\n\n  5)MDVP:Jitter(%) - float64\n\n  6)MDVP:Jitter(Abs) - float64\n\n  7)MDVP:RAP - float64\n\n  8)MDVP:PPQ - float64\n\n  9)Jitter:DDP - float64\n\n  10)MDVP:Shimmer - float64\n\n  11)MDVP:Shimmer(dB) - float64\n\n  12)Shimmer:APQ3 - float64\n\n  13)Shimmer:APQ5 - float64\n\n  14)MDVP:APQ - float64\n\n  15)Shimmer:DDA - float64\n\n  16)NHR - float64\n\n  17)HNR - float64\n\n  18)status - int64\n\n  19)RPDE - float64\n\n  20)DFA - float64\n\n  21)spread1 - float64\n\n  22)spread2 - float64\n\n  23)D2 - float64\n\n  24)PPE - float64\n\nData visualization done with using various plots.\n\nMachine learning algorithm used\n\n1)XGBOOST\n\n2)Random Forest classifier\n\n3)Naive Bayes","864f98e5":"# violin plot ","44a3329a":"# K-Fold cross Validation ","2334ab8b":"# Random Forest classifier ","2e574b6c":"# Naive Bayes ","d17829e4":"# Histogram ","55b5a999":"# XGBOOST","d488d701":"# 1.Count plot","125f59a4":"# 2.Bubbleplot","3cfe82c2":"# Distplot ","8381479e":"**Health status:-** \n*                     1= parkinsons \n\n*                     0=healthy\n\nMore number of peoples suffering from parkisons.","90bc9275":"**KDE plot**","7788b00d":"**Maximum values for attributes:-**","c774f31d":"# Heatmap","008f7545":"# Importing important libraries ","3ec056d3":"# Box plot ","8e17ea40":"**Minimum values of attributes**","77a2a4f8":"# Scatter Plot "}}