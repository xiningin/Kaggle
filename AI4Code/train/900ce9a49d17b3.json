{"cell_type":{"7fabaed0":"code","ae38e491":"code","af83d8ad":"code","9c5d7c83":"code","eca865ff":"code","47932b9a":"code","4efe881d":"code","a231ed2c":"code","344a89f0":"code","4b5ab200":"code","bfdd915d":"code","41ca7eb5":"code","392d356d":"code","f5c91898":"code","59328a04":"code","eb83e74f":"code","a2acd19b":"code","24f067bf":"code","a61c5165":"code","8f3cf330":"code","da8aed58":"code","4f758e25":"code","e1360bc8":"code","83d95209":"code","716ce355":"code","cdf5c4e1":"code","159c0c00":"code","de5155cc":"code","39012495":"code","d0e1cb8a":"code","65a33a42":"code","7b16987f":"code","45f9879a":"code","611b5793":"code","5cee6537":"code","75ec2510":"code","26ef47bf":"code","40262c68":"code","8d6a7c47":"code","6b35cabf":"code","583a0dfb":"code","34d26a77":"code","a481e936":"markdown","0e164f94":"markdown","9c06a582":"markdown","e88c271d":"markdown","7cf4d89e":"markdown","4efd002f":"markdown","580a6705":"markdown"},"source":{"7fabaed0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae38e491":"import datetime\nimport pandas as pd\nimport requests\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport os\nimport plotly.express as px\n\nmpl.rcParams['figure.figsize'] = (10,8)\nmpl.rcParams['axes.grid'] = False\n","af83d8ad":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/srivatsan88\/YouTubeLI\/master\/dataset\/nyc_energy_consumption.csv')","9c5d7c83":"df.head()","eca865ff":"df.info()","47932b9a":"df['timeStamp']=pd.to_datetime(df['timeStamp'])","4efe881d":"df.info()","a231ed2c":"fig=px.line(df,x='timeStamp',y='demand',title='Energy consumption')\n\nfig.update_xaxes(\n    rangeslider_visible= True,\n    rangeselector=dict(\n                        buttons = list([\n                        dict(count = 1,label = '1m',step='month',stepmode = \"backward\"),\n                        dict(count = 2,label = '6m',step='month',stepmode = \"backward\"),\n                        dict(count = 3,label = '6mYTD',step='month',stepmode = \"todate\"),\n                        dict(count = 4,label = '2y',step='year',stepmode = \"backward\"),\n                        dict(count = 5,label = '3y',step='year',stepmode = \"backward\"),\n                        dict(step= 'all')\n                            ])        \n                        )\n                   )\nfig.show()","344a89f0":"ny_df=df.set_index('timeStamp')","4b5ab200":"ny_df.head()","bfdd915d":"ny_df.plot(subplots=True)","41ca7eb5":"ny_df.resample('D').mean()","392d356d":"ny_df.resample('D').mean().plot(subplots=True)","f5c91898":"df_daily=ny_df.resample('D').mean()","59328a04":"df_daily.head()","eb83e74f":"df_daily['demand']=df_daily['demand'].fillna(method='ffill')\ndf_daily['precip']=df_daily['precip'].fillna(method='ffill')\ndf_daily['temp']=df_daily['temp'].fillna(method='ffill')","a2acd19b":"from fbprophet import Prophet","24f067bf":"df_final=df_daily.reset_index()[['timeStamp','demand']].rename({'timeStamp':'ds','demand':'y'},axis='columns')","a61c5165":"df_final.head()","8f3cf330":"train = df_final[(df_final['ds']>='2012-01-01') & (df_final['ds']<='2017-04-30')]\ntest = df_final[(df_final['ds']>'2017-04-30')]","da8aed58":"train.shape","4f758e25":"test.shape","e1360bc8":"test.tail()","83d95209":"model=Prophet(interval_width=0.95,yearly_seasonality=True)","716ce355":"model.fit(train)","cdf5c4e1":"model.params","159c0c00":"future=model.make_future_dataframe(periods=104)\nfuture.tail()","de5155cc":"forecast=model.predict(future)","39012495":"forecast","d0e1cb8a":"forecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","65a33a42":"pd.concat([df_final.set_index('ds')['y'],forecast.set_index('ds')['yhat']],axis=1).plot()","7b16987f":"fig=model.plot(forecast)","45f9879a":"fig2=model.plot_components(forecast)","611b5793":"from fbprophet.plot import add_changepoints_to_plot\nfig=model.plot(forecast)\na=add_changepoints_to_plot(fig.gca(),model,forecast)","5cee6537":"deltas=model.params['delta'].mean(0)\ndeltas","75ec2510":"len(deltas)","26ef47bf":"fig = plt.figure(facecolor='w')\nax = fig.add_subplot(111)\nax.bar(range(len(deltas)),deltas)\nax.grid(True,which='major',c='red',ls='-',alpha=0.2)\nax.set_ylabel('Rate Chnages')\nax.set_xlabel('Changepoint')\nfig.tight_layout()","40262c68":"pro_change = Prophet(changepoint_range=0.9,yearly_seasonality=True)\nforecast = pro_change.fit(train).predict(future)\nfig = pro_change.plot(forecast)\na = add_changepoints_to_plot(fig.gca(),pro_change,forecast)","8d6a7c47":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\n\nfig = plot_plotly(model,forecast) \npy.iplot(fig)","6b35cabf":"from fbprophet.diagnostics import cross_validation\ncv_results = cross_validation(model = model,initial = '731 days',horizon='365 days')","583a0dfb":"\ncv_results.head(5)","34d26a77":"from fbprophet.diagnostics import performance_metrics\ndf_p = performance_metrics(cv_results)\ndf_p","a481e936":"**Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.**","0e164f94":"**As temperature increses, the electricity demand also increases**","9c06a582":"# Prophet model","e88c271d":"**We gave the parameters: confidence interval = 95 % and there is seasonality in the data so True**","7cf4d89e":"**We renamed the timestamp and demand columns in order to feed to the prophet model**","4efd002f":"# Facebook's prophet for time series forecasting","580a6705":"**As the data is hourly, we are converting to daily data by resampling**"}}