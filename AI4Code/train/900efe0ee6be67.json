{"cell_type":{"be6d9297":"code","529bc66e":"code","8021ea81":"code","bb64d326":"code","fa1f13ae":"code","3f3bdf48":"code","0bb783e3":"code","a019ecfd":"code","02416fa8":"code","de197c63":"code","8dd7df8c":"code","2aac13ed":"code","572a12be":"code","b79c0465":"code","1121097a":"code","f7af2579":"code","18c88874":"code","7e878c5d":"code","d4f5506c":"code","34bb91a5":"code","aca38b18":"code","22c09dad":"code","fbe1bdf8":"code","069f373c":"code","37f55ef6":"code","7d39793e":"code","d2e57943":"code","a4c5e5fa":"code","867e6ced":"code","3cadd82b":"markdown","afb0cee0":"markdown","ca084511":"markdown","18eef5b8":"markdown"},"source":{"be6d9297":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  #data visulization\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#import datasets\ntrain = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv')","529bc66e":"train.head()","8021ea81":"print(train.shape)\nprint(test.shape)","bb64d326":"#checking null values\nsns.heatmap(train.isnull(),cmap='viridis')","fa1f13ae":"sns.heatmap(test.isnull(),cmap='viridis')","3f3bdf48":"train['target'].unique()","0bb783e3":"X = train.drop(['id','target'],axis=1)\ny = train['target']","a019ecfd":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\n","02416fa8":"y","de197c63":"X","8dd7df8c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 100)","2aac13ed":"print(X_train.shape)\nprint(X_test.shape)","572a12be":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train,y_train)\nknn_pred = knn.predict(X_test)","b79c0465":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score\nprint(confusion_matrix(y_test,knn_pred))\nprint('\\n')\nprint(classification_report(y_test,knn_pred))\nprint('\\n')\n\nprint(f'Accuracy: {accuracy_score(y_test,knn_pred)*100:.2f}%')","1121097a":"#to find the k value, finding the error each time the model predicts between k value 1 to 100\nerror = []\n\nfor i in range(1,100):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred = knn.predict(X_test)\n    error.append(np.mean(pred != y_test))","f7af2579":"plt.figure(figsize=(10,8))\nplt.plot(range(1,100),error,color='red',marker='o',markerfacecolor='blue',markersize=4)\nplt.xlabel('K')\nplt.ylabel('Error')\n","18c88874":"#choosing k value = 70\nknn = KNeighborsClassifier(n_neighbors=80)\nknn.fit(X_train,y_train)\nknn_pred = knn.predict(X_test)\n\nprint(confusion_matrix(y_test,knn_pred))\nprint(classification_report(y_test,knn_pred))\n                            ","7e878c5d":"print(f'Accuracy: {accuracy_score(y_test,knn_pred)*100:.2f}%')","d4f5506c":"from sklearn.model_selection import GridSearchCV","34bb91a5":"#model training with whole train data set\nparam_grid = {'n_neighbors':list(range(85,100))} \ngrid = GridSearchCV(KNeighborsClassifier(n_neighbors=30),param_grid,refit=True,verbose=2)\ngrid.fit(X,y)","aca38b18":"print(grid.best_score_)\nprint(grid.best_estimator_)","22c09dad":"prediction = grid.predict_proba(test.drop('id',axis=1))","fbe1bdf8":"prediction","069f373c":"from sklearn.ensemble import GradientBoostingClassifier\ngb = GradientBoostingClassifier(learning_rate=0.1)\ngb.fit(X_train,y_train)\ny_pred = gb.predict(X_test)","37f55ef6":"print(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\n                            ","7d39793e":"gb.fit(X,y)\nprediction = gb.predict_proba(test.drop('id',axis=1))","d2e57943":"prediction","a4c5e5fa":"submission = pd.DataFrame({'id':test['id'],'Class_1': prediction[:,0:1].flatten(),'Class_2':prediction[:,1:2].flatten(),\n                           'Class_3':prediction[:,2:3].flatten(),'Class_4':prediction[:,3:].flatten()})\nsubmission.to_csv(f'submission.csv',index=False)","867e6ced":"submission","3cadd82b":"# KNN Classifier","afb0cee0":"# Gradient Boosting Classifier","ca084511":"# Submission","18eef5b8":"# GridSearchCV - KNN"}}