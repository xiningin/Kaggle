{"cell_type":{"df2eeaa7":"code","0c49a2de":"code","c29bf3d7":"code","30c264e8":"code","734403cd":"code","90020884":"code","2b626f8f":"code","2856992b":"code","14c0e723":"code","0a31d686":"code","7961c289":"code","94c2afe4":"code","1cdb8dce":"code","b7cd3006":"code","c66f5393":"code","5535102e":"code","6fbd3107":"code","08e072c1":"code","3d6dda1e":"code","152e6a78":"code","2517e903":"code","54eb337e":"code","06030601":"code","b643ded3":"code","6e9abf69":"code","e221bb82":"code","259e1d40":"code","3fc1e850":"code","527cc4ec":"code","2ce88c09":"code","21e6fdc3":"code","0e4db0b3":"code","47f70ae8":"code","153411b7":"code","7e4e6c0f":"code","4aae355f":"code","76864ede":"code","821e787a":"code","d085eea7":"code","96a1292b":"code","a93e57db":"code","65f805a3":"code","8b5b6075":"code","f5481f1d":"code","15d7dcf2":"code","6bee050c":"code","7a8223bd":"code","f66b59a0":"code","69dcc923":"code","ac3f9b52":"code","f98c1543":"code","00c2ab4e":"code","1765737a":"code","7f9b0ed4":"code","60e5b4d8":"code","a5d24a81":"code","5b7507d8":"code","f158c13e":"code","090f3657":"code","5f9b515d":"code","d376e648":"code","11c0caaa":"code","7d7b5928":"code","6b894165":"code","a64dbf54":"code","7701f984":"code","4f21c508":"code","099b9b20":"code","dfb2bda9":"code","73214a94":"code","e4e25580":"code","bfe493f6":"code","b03c8271":"code","6d7aeb67":"code","32dfd141":"code","0df94661":"code","ad76e5bc":"code","74fbaac5":"code","67f688d1":"code","3f67529d":"code","46dd01ff":"code","9931cfcd":"code","4fc47353":"code","0774b3e3":"code","2b048eb9":"code","bdba55dd":"markdown","18752a6e":"markdown","1225f06b":"markdown","2820305e":"markdown","113318a5":"markdown","573db54e":"markdown","cc5fce9b":"markdown","2df22575":"markdown","5992bd26":"markdown","31b774df":"markdown","5bbd8135":"markdown","8bc261b8":"markdown","d67a935b":"markdown","639a2cc5":"markdown","194f8425":"markdown","0d17eac7":"markdown","4527fec8":"markdown","cdae72cd":"markdown","37738d85":"markdown","ba4d1aef":"markdown","c191ed1d":"markdown","5d432f23":"markdown","216ee560":"markdown","4ed2138e":"markdown","431da129":"markdown","55fefd1d":"markdown","886afede":"markdown","b07925e4":"markdown","90dd3165":"markdown","f266f223":"markdown","024c585b":"markdown","c066e248":"markdown","ebabfca2":"markdown","f9653e92":"markdown","28fe6ecd":"markdown","6773e6b5":"markdown","c1533834":"markdown","c89a309a":"markdown","8019f669":"markdown","468247ec":"markdown","e15f8e63":"markdown","ea86c381":"markdown","1c646ef4":"markdown","f282beaf":"markdown","6b6bb8c4":"markdown","0843fd9c":"markdown","543d95f7":"markdown","22df0e7b":"markdown","c5385c49":"markdown","3ec7cc2a":"markdown","a9689c5f":"markdown","761035c6":"markdown","25ef31dc":"markdown","d93ad9e5":"markdown","459db063":"markdown","1dbb2f07":"markdown","e6aa8236":"markdown","a2811e8a":"markdown","30e8f6aa":"markdown","95daf592":"markdown","bb1e2459":"markdown","05099926":"markdown","28dc803c":"markdown","e7261402":"markdown","b691b841":"markdown","83f355cb":"markdown","648885af":"markdown","3d32392f":"markdown","88c058f3":"markdown","7ec6503e":"markdown","1e888ff0":"markdown","b66c4651":"markdown","98c34063":"markdown","b09f6adc":"markdown","202a1926":"markdown"},"source":{"df2eeaa7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","0c49a2de":"df = pd.read_csv('..\/input\/titanic\/train.csv')","c29bf3d7":"df.head()","30c264e8":"df.info()","734403cd":"df.describe()","90020884":"df[\"Cabin\"].value_counts()","2b626f8f":"df[\"Fare\"].value_counts()","2856992b":"df[\"Fare\"].describe()","14c0e723":"sns.displot(df[\"Fare\"])","0a31d686":"df[\"Ticket\"].value_counts()","7961c289":"df[\"Name\"].duplicated().sum()","94c2afe4":"# Apply function to make the new column\n\ndf[\"Title\"] = df[\"Name\"].apply(lambda p : p.split()[1])","1cdb8dce":"df[\"Title\"].value_counts()","b7cd3006":"accetable_titles = [\"Mr.\", \"Miss.\", \"Mrs.\", \"Master.\"]\ndef change_title(tit):\n    if tit in accetable_titles:\n        return tit\n    else:\n        return \"Pal.\"","c66f5393":"df [\"Title\"] = df[\"Title\"].apply(lambda p : change_title(p))","5535102e":"df.drop([\"Cabin\",\"Ticket\",\"PassengerId\",\"Name\"],axis = 1, inplace=True)","6fbd3107":"df.head(10)","08e072c1":"def missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent    ","3d6dda1e":"missing_percent(df)","152e6a78":"df[\"Age\"].isnull().sum()","2517e903":"import math\nfemale_mean, male_mean = df.groupby(\"Sex\")[\"Age\"].mean()\ndef fill_age(age,sex):\n    if math.isnan(age):\n        if sex == \"male\":\n            return male_mean\n        else:\n            return female_mean\n    else:\n        return age","54eb337e":"df[\"Age\"] = df.apply(lambda row : fill_age(row[\"Age\"],row[\"Sex\"]),axis = 1)\n# df['Q'] = df.apply(lambda row: EOQ(row['D'], row['p'], ck, ch), axis=1)\n","06030601":"df[\"Embarked\"].isnull().sum()","b643ded3":"df = df.dropna()","6e9abf69":"sns.barplot(x = df[\"Sex\"], y = df[\"Survived\"])\nplt.show()","e221bb82":"sns.barplot(x = df[\"Embarked\"], y = df[\"Survived\"])\nplt.show()","259e1d40":"df.head()","3fc1e850":"sns.boxplot(x = df[\"Embarked\"], y = df[\"Fare\"])\nplt.show()","527cc4ec":"index = df[df[\"Fare\"] > 450 ].index\ndf.drop(index, axis = 0, inplace=True)","2ce88c09":"plt.figure(figsize=(8,5))\nsns.boxplot(x = df[\"Embarked\"], y = df[\"Fare\"])\nplt.show()","21e6fdc3":"plt.figure(figsize=(9,7))\nsns.boxplot(x = df[\"Embarked\"], y = df[\"Fare\"],hue = df[\"Pclass\"])\nplt.show()","0e4db0b3":"sns.boxplot(y = df[\"Age\"], x = df[\"Embarked\"])\nplt.show()","47f70ae8":"sns.countplot(x = df[\"Pclass\"], hue = df[\"Survived\"])\nplt.show()","153411b7":"sns.factorplot('Pclass','Survived',hue='Sex',data=df)\nplt.show()","7e4e6c0f":"plt.figure(figsize=(10,8))\nplt.yticks(range(0,110,5))\nsns.violinplot(x = df[\"Pclass\"], y = df[\"Age\"], hue = df[\"Survived\"],split = True)","4aae355f":"sns.countplot(df[\"Pclass\"], hue = df[\"Embarked\"])","76864ede":"sns.countplot(df[\"Parch\"], hue=df[\"Survived\"])\nplt.show()","821e787a":"plt.plot(df.groupby(\"Parch\")[\"Survived\"].mean())\nplt.xlabel(\"Parch\")\nplt.ylabel(\"Chance of survival\")","d085eea7":"sns.countplot(df[\"Title\"], hue = df[\"Survived\"])\nplt.show()","96a1292b":"a = df.corr()\nplt.figure(figsize=(8,8))\nk = 10\ncols = a.nlargest(k, 'Survived')['Survived'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, annot=True, square=True, fmt='.2f', annot_kws={'size': 12}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","a93e57db":"df[\"Family\"] = df[\"Parch\"] + df[\"SibSp\"] + 1","65f805a3":"a = df.corr()\nplt.figure(figsize=(8,8))\nk = 10\ncols = a.nlargest(k, 'Survived')['Survived'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, annot=True, square=True, fmt='.2f', annot_kws={'size': 12}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","8b5b6075":"sns.scatterplot(x = df[\"Fare\"], y = df[\"Survived\"])\nplt.axvline(500, color = 'r')","f5481f1d":"index = df[df[\"Fare\"] > 500].index\ndf.loc[index,:]","15d7dcf2":"df.drop(index,inplace=True)","6bee050c":"sns.scatterplot(x = df[\"Fare\"], y = df[\"Survived\"])\nplt.axvline(500, color = 'r')","7a8223bd":"def change_sex(sex):\n    if sex == \"male\":\n        return 1\n    elif sex == \"female\":\n        return 0","f66b59a0":"df[\"Sex\"] = df.apply(lambda row : change_sex(row[\"Sex\"]),axis = 1)","69dcc923":"df[\"Embarked\"].value_counts()","ac3f9b52":"def change_em(em):\n    if em == \"S\":\n        return 0\n    elif em == \"C\":\n        return 1\n    elif em == \"Q\":\n        return 2","f98c1543":"df[\"Embarked\"] = df.apply(lambda row : change_em(row[\"Embarked\"]),axis = 1)","00c2ab4e":"emb = df[\"Embarked\"]\nsex = df[\"Sex\"]\ntitle = df[\"Title\"]\npcl = df[\"Pclass\"]","1765737a":"s = pd.get_dummies(sex, columns=[\"Sex\"], prefix=\"Sex_is\" )\ne = pd.get_dummies(emb, columns=[\"Embarked\"], prefix=\"Embarked_is\" )\nt = pd.get_dummies(title, columns=[\"Title\"], prefix=\"Title_is\" )\np = pd.get_dummies(pcl,columns=[\"Pclass\"],prefix=\"Pclass_is\")","7f9b0ed4":"main = s.join(e)\nmain = main.join(t)\nmain = main.join(p)","60e5b4d8":"df = df.join(main)","a5d24a81":"df = df.drop([\"Embarked\",\"Sex\",\"Pclass\",\"Title\"], axis = 1)","5b7507d8":"df","f158c13e":"X = df.drop(\"Survived\",axis = 1)\ny= df[\"Survived\"]","090f3657":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.33)","5f9b515d":"from sklearn.preprocessing import StandardScaler\n\nscaler= StandardScaler()","d376e648":"scaler.fit(X_train)","11c0caaa":"X_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","7d7b5928":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","6b894165":"y_pred = model.predict(X_test)\ny_pred","a64dbf54":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix","7701f984":"accuracy_score(y_test, y_pred)","4f21c508":"confusion_matrix(y_test, y_pred)","099b9b20":"plot_confusion_matrix(model, X_test, y_test)","dfb2bda9":"print(classification_report(y_test, y_pred))","73214a94":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\ntest_error_rate = []\n\nfor i in range(1,30):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    \n    y_pred_knn = knn.predict(X_test)\n    \n    e = 1 - accuracy_score(y_test,y_pred_knn)\n    test_error_rate.append(e)\n    ","e4e25580":"test_error_rate","bfe493f6":"plt.figure(figsize=(10, 6))\nplt.plot(range(1, 30), test_error_rate, label='Test Error')\nplt.legend()\nplt.ylabel('Error Rate')\nplt.xlabel('K Value')","b03c8271":"# Scaler for pipeline\n\nsc = StandardScaler()","6d7aeb67":"# Model for pipeline\n\nknn_model = KNeighborsClassifier()","32dfd141":"# Operations of pipeline\n\noperations = [(\"Scaler\",sc),(\"KNN\", knn_model)]","0df94661":"from sklearn.pipeline import Pipeline\n\npipe = Pipeline(operations)","ad76e5bc":"from sklearn.model_selection import GridSearchCV\n\nk_values= list(range(1,20))","74fbaac5":"# Pipeline keys\n\npipe.get_params().keys()","67f688d1":"param_grid = {\"KNN__n_neighbors\" : k_values}","3f67529d":"cv_classifier = GridSearchCV(pipe,param_grid=param_grid,scoring=\"accuracy\")\ncv_classifier.fit(X_train,y_train)","46dd01ff":"# Now let's see what's the best K values\n\ncv_classifier.best_estimator_.get_params()","9931cfcd":"# KNN for 5\n\nknn_model_5 = KNeighborsClassifier(n_neighbors=5)\nknn_model_5.fit(X_train,y_train)\ny_knn_pred_5 = knn_model_5.predict(X_test)","4fc47353":"# KNN for 15\n\nknn_model_15 = KNeighborsClassifier(n_neighbors=15)\nknn_model_15.fit(X_train,y_train)\ny_knn_pred_15 = knn_model_15.predict(X_test)","0774b3e3":"# Model Report for k = 5\n\nprint(classification_report(y_test, y_knn_pred_5))","2b048eb9":"# Model Report for k = 15\n\nprint(classification_report(y_test, y_knn_pred_15))","bdba55dd":"### Feature Engineering Alert!","18752a6e":"At least we can agree on that Q embark wasn't for riches.","1225f06b":"#### Grid search suggests for K values of 15","2820305e":"### So we have to deal with NaN values based on the info for (\"Age\", \"Cabin\", \"Embarked\")","113318a5":"## Now Let's try Logistic Reggresion","573db54e":"* About 38% of the passengers survived.\n* Mean age was around 30 years.\n* Passengers paid something around 32.\n* Half of the passengers travelled with siblings or spouse.","cc5fce9b":"* __\"Fare\"__ Distplot is pretty much skewed, maybe it's better to use the **log form**.\n* And clearly we don't have to remove \"Fare\" column.","2df22575":"First of all let's transform everything beside [Mr., Miss., Mrs., Master.] to `Pal.`  ","5992bd26":"But wait, maybe we can do a feature engineering and extract titles and form a new columns based on them!","31b774df":"* One outlier after 500 ","5bbd8135":"## 9. Scaling the features","8bc261b8":"First we check for duplicate names and then remove the Name column","d67a935b":"##### It's pretty much normal so nothing to be worry about!","639a2cc5":"###### Less survival rate by S embark, So there must be some relations!","194f8425":"__2. Now it's embarked time!__","0d17eac7":"## Now Let's see what the Grid search method predicts for the K value","4527fec8":"## 3. Inspecting data","cdae72cd":"Poor `Mr.`'s they're the real __martyrs__ of the titanic. `Mrs.` and `Miss.` did pretty well surviving. No more feminism talks for now then =))  ","37738d85":"## Update:","ba4d1aef":"### Updating...","c191ed1d":"* Ticket column is like Cabin, so spreaded so we just remove it!","5d432f23":"First of all we should find the best k value, and we use GridSearch and Elbow method for this purpose.","216ee560":"## 4. Removing unuseful columns","4ed2138e":"* S -> 0\n* C -> 1\n* Q -> 2","431da129":"Under 40 observations won't contribute much to the model. so let's just perform __one hot encoding__ to these titles and lets see what happens!","55fefd1d":"* No duplicates!","886afede":"## 5. Looking for missing data","b07925e4":"##### So now let's explore the mean age of each embark:","90dd3165":"* It's obvious that PassengerID has nothing to do with our model so simply just dropped it!","f266f223":"We have to change our categorical features to numerical.","024c585b":"## 16. Final KNN model","c066e248":"Now let's see the corr matrix again.","ebabfca2":"Now we're done with `Name` and it's time to say bye!","f9653e92":"Soon to be completed...","28fe6ecd":"##### 1. C embark is more expensive, maybe we can conclude that it's more premium than the others and maybe have better health guards and whatever, but clearly, if you paid more you had better chances of surviving.\n##### 2. But Q embark is cheaper than S and interestingly, it has a better survival rate, so maybe your placement in ship matters more because these embarks show each cluster of people who are entering the ship simultaneously.","6773e6b5":"#### Now we check for both 15 and 5","c1533834":"## 12. Evaluating the model","c89a309a":"__Roughly 20% of the age data is missing, so we just put the mean age for each sex__.","8019f669":"First things first lets see how `Sex` could affect your life back then!","468247ec":"## 14. Creating the pipeline","e15f8e63":"* It looks like that cabin number is to spreaded to be used in the model but let's visualise it and then make the decision.\n* At most 4 rows share the same cabin so it doens't help much and it's better to drop it.","ea86c381":"## 10. Train the model","1c646ef4":"Looks like rich kids stole the show! (Doin fancy stuff on board =))","f282beaf":"For example, in `Embarked` mapped `Q` to 2 and `C` to 1, so it means `Q`s values are double of `C`. It isn't the best way to deal with categorical data.","6b6bb8c4":"## 2. Loading dataset","0843fd9c":"* Only 2 rows are missing so we just delete those rows.","543d95f7":"### Scored 0.84 with Logistic Regression method","22df0e7b":"Now let's use dummy variable for the better performance","c5385c49":"##### Wow, such discrimination! unfortunately, class 3 almost didn't make it alive :(","3ec7cc2a":"__Male will be 1 and female will be 0__","a9689c5f":"## 17. Evaluating the KNN models","761035c6":"## 11. Predicting test data","25ef31dc":"#### So elbow method shows that best K Values = 5","d93ad9e5":"Early on, we concluded that rich people got on board from C embark Let's see now if Pclass agrees with us or Nah?","459db063":"Corr matrix time!","1dbb2f07":"#### As we can see `Parch` and `SubSp` don't contribute much to the corr matrix so let's do a feature engineering and create a new columns based on `Parch` and `SubSp`.","e6aa8236":"Huge dropoff in Parch = 4 and then a sudden rise in 5. \nMaybe some sort of correlation is there!","a2811e8a":"Money really could've bought you, your life!","30e8f6aa":"## 1. Importing libraries","95daf592":"##### So Q is mainly for the lower class and C can match our theory, Richer people got on board from C.","bb1e2459":"#### So clearly K = 5 is our best value for KNN method","05099926":"What about our new belvoed `Title` Column? ","28dc803c":"## 15. Finding the best K value with Grid Search","e7261402":" Strong outliers over 400 price, Let's just remove them for now and take a better look ","b691b841":"## 13. Elbow method for finding the best K values","83f355cb":"## 6. EDA!","648885af":"## 8. Split data","3d32392f":"But this approach isn't ideal because we're turning them into ordinal format and it's not right for our model.","88c058f3":"## Now Let's do it with KNN method","7ec6503e":"## 7. Feature Selection","1e888ff0":"### Feature Engineering Alert!","b66c4651":"Now let's see how this `Title` looks like","98c34063":"Women on class 1 and 2 was almost invincble, Hmmm...","b09f6adc":"__1. Let's deal with Age__","202a1926":"##### Females tend to survive more by a large margin!"}}