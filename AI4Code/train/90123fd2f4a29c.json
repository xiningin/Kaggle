{"cell_type":{"2f274ce4":"code","8d3eb01c":"code","18563188":"code","13bde070":"code","bc7e8bd2":"code","d15673c7":"code","5284b7e2":"code","e870956b":"code","ac435f63":"code","87de86b4":"code","50a28d88":"code","5b7ac4f1":"code","0f2765d4":"code","c8345b02":"code","224561dd":"code","36ad7ed7":"code","842798b6":"code","957b85f9":"code","e98abf39":"code","0162ad8e":"code","8b57284f":"code","dce68cbe":"code","58d60c1f":"code","ee5cd6d2":"code","a499b9fa":"code","6731085e":"code","98431f8b":"code","94b9065b":"code","f38c6df4":"code","07e23b36":"code","212981c1":"code","5c72c37b":"code","521cb47c":"code","4e638139":"code","be2f4e5c":"code","787e47c6":"code","e7ffa67d":"code","260933c3":"code","daf58282":"code","b54b2d64":"code","57c40e5c":"code","f2b42589":"code","442036d6":"code","46af9454":"code","a8d2b219":"code","babe7351":"code","0545bb14":"code","422b6fd1":"code","a238e4a7":"code","a1b0985c":"code","463d7132":"code","fd4a4e3a":"code","067467a6":"code","ebbaff14":"code","f0eb608e":"code","97249048":"code","febae028":"code","e6474891":"code","b1b3ee86":"code","a57ba500":"code","82507000":"code","d91436fc":"code","00cbf7be":"code","4c0dc918":"code","9faaf2ce":"code","84341038":"code","091fe7d7":"code","f64b2ca0":"code","06920c55":"code","860363a9":"code","88d668bb":"code","969c43c5":"code","911ff597":"code","1bcab7f0":"code","381a0668":"code","e55eb742":"code","eb0825f2":"code","ac3ef386":"code","a21cdc78":"code","ce15af18":"code","24072466":"code","b567bb28":"code","7664288b":"code","ce3b9231":"code","f038d0eb":"code","6ec15449":"code","4b51e3f9":"code","86f7b10c":"code","8438aa35":"code","016243e7":"code","ee721690":"code","67bf2026":"code","15047501":"code","754094cf":"code","15958496":"code","148d7140":"code","f9ed2c7a":"code","93725b9f":"code","be5e98d2":"code","1ba33b67":"code","908ac86b":"code","cc8fad0e":"code","9086963b":"code","1d3aa477":"code","bc0c83f4":"code","f788046b":"code","5ccf7388":"code","196c8fda":"code","5dcae91c":"code","558b4672":"code","6196eb1f":"code","59ec27fe":"code","8fc71775":"code","1e2075b5":"code","c037c9cd":"code","d3ae032b":"code","1ddedcd1":"code","4fe27683":"code","d3facdb8":"code","35ee7c25":"code","d8e3b481":"code","ef2cbed8":"code","d08b72cf":"code","097d00c7":"code","20eb0cc4":"code","2423e9ed":"code","0e7a6b4f":"code","25ff493a":"code","90c35f8f":"code","326df414":"code","502d07f1":"markdown","f2bda1f3":"markdown","eb931f18":"markdown","bdfcf83f":"markdown","2843a6a0":"markdown","879ccf81":"markdown","b7f8529e":"markdown","1662346a":"markdown","dead18b4":"markdown","b6f25959":"markdown","a9c138ba":"markdown","7e56dc4f":"markdown","7bef60a9":"markdown","209b8c68":"markdown","84a57a88":"markdown","47824e89":"markdown","5fa91fcf":"markdown","316e811f":"markdown","ce3eb566":"markdown","d22597c6":"markdown","cc69153f":"markdown","d730c7cf":"markdown","d1a023e0":"markdown","d945db24":"markdown","c6efd308":"markdown","f6829d3e":"markdown","7b89aeed":"markdown","15074b40":"markdown","b5ed65ae":"markdown","68a0810f":"markdown","13728c9a":"markdown","b0b684f3":"markdown","0a081ffa":"markdown","7ab1f405":"markdown","a58bca88":"markdown","0c3d8cfd":"markdown","3b9b7f16":"markdown","0f1d4fc9":"markdown","bbf0fa44":"markdown","51e51f76":"markdown","344cea84":"markdown","3aa29164":"markdown","7aeaff24":"markdown","a320a319":"markdown","6f10a3f6":"markdown","ce4ca64c":"markdown","9221aab6":"markdown","99dee6e0":"markdown","50f2dd82":"markdown","70affcd2":"markdown","755e6479":"markdown","c35acd35":"markdown","4f337350":"markdown","c159cb34":"markdown","3f646e50":"markdown","41cd5d55":"markdown","3c092346":"markdown","8ffc1aa1":"markdown","812d6033":"markdown","7a15106c":"markdown","48b55141":"markdown","118c6876":"markdown","27819f09":"markdown","1d303640":"markdown","25be5645":"markdown","34e3a0e3":"markdown","1ea3fac5":"markdown","f68caa8a":"markdown","e96d07fd":"markdown","8a86a3cf":"markdown","a9ddd996":"markdown","7d0fd11d":"markdown","d69ad9a0":"markdown","d5aa4d1f":"markdown","762b908f":"markdown","a419afb9":"markdown","8ce1597a":"markdown","c9353dd1":"markdown","9d023891":"markdown","a8e74a2d":"markdown","16e09179":"markdown","a84ddb07":"markdown","4185d373":"markdown","b0c6cb4d":"markdown","e252db0d":"markdown","3f470327":"markdown","4742cc86":"markdown","a85431f4":"markdown","e841f30e":"markdown","7b9159a0":"markdown","e00e1b7f":"markdown","1b9f8eff":"markdown","aa050387":"markdown","f02c4cb4":"markdown","2da793d6":"markdown","ddc89fd0":"markdown","8a095526":"markdown","6c23b619":"markdown","242cd2e9":"markdown","a3cc57f9":"markdown","c959cc7e":"markdown","4e7ac4af":"markdown","9e6df2e4":"markdown","792e4f0e":"markdown","9e21b36a":"markdown","152985f1":"markdown","cd823dda":"markdown","57b8a85d":"markdown","d2b361a2":"markdown","a3df2f30":"markdown","6eec4847":"markdown","4cc9ddd3":"markdown","feff8df7":"markdown"},"source":{"2f274ce4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d3eb01c":"# reading the data\nvirus = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\n\n# preview data\nvirus.head()","18563188":"# preview tail data\nvirus.tail()","13bde070":"# data dimesion\nvirus.shape\n# 36598 observations, 8 features","bc7e8bd2":"# columns\nvirus.keys()","d15673c7":"# get basic informaiton about missing values\nvirus.info()\n# we know taht not all countries have the Province\/State data.","5284b7e2":"# get summary information \nvirus.describe()\n# a high standard deviation means that the numbers are more spread out","e870956b":"# change the key\/feature name for future use\nvirus.rename(columns={\n    'Province\/State': 'ProvinceState',\n    'Country\/Region': 'Country',\n    'Last Update': 'Update'\n}, inplace=True)\n\nvirus.keys()","ac435f63":"# transfer observationDate to datetime format\nvirus['ObservationDate'] = pd.to_datetime(virus['ObservationDate'], format='%m\/%d\/%Y', errors='ignore')\nvirus.info() # ObservationDate is datetime64 data type","87de86b4":"# US dataset inspection\nus = virus[virus.Country == 'US']\nprint(us)","50a28d88":"# The SQL is \n# select ObservationDate, ProvinceState, sum(Confirmed) as Confirmed, \n#                  sum(Deaths) as Deaths, sum(Recovered) as Recovered\n#                  from data \n#                  where Country = '%s' \n#                  group by ProvinceState, ObservationDate\nusByStateDate = us.groupby(['ProvinceState', 'ObservationDate']).sum()\nprint(usByStateDate)","5b7ac4f1":"# The SQL is\n# select ObservationDate, sum(Confirmed) as Confirmed, sum(Deaths) as Deaths, \n#        sum(Recovered) as Recovered\n#        from countryData \n#        group by ObservationDate\nusByDate = usByStateDate.groupby(['ObservationDate']).sum()\nprint(usByDate)\n# now we have the daily confirmed\/deaths\/recovered cases by country","0f2765d4":"# calculate the delta between observations by date\nusByDate['ConfirmedNew'] = usByDate.sort_values('ObservationDate')['Confirmed'].diff().fillna(0)\nusByDate['DeathsNew'] = usByDate.sort_values('ObservationDate')['Deaths'].diff().fillna(0)\nusByDate['RecoveredNew'] = usByDate.sort_values('ObservationDate')['Recovered'].diff().fillna(0)\nusByDate","c8345b02":"from sklearn import preprocessing\n\n# define common function to calculate\ndef groupByProvinceStateDate(country):\n    '''\n    Group data by ProvinceState and Date to calculate the sum of confirmed, deaths, and recovered\n\n    Parameters\n    ----------\n    country : String\n        The string to filter out the specified country.\n    '''\n    \n    # because some data of the country has province and others don't.\n    # hence the groupby value could fail\n    # need to fill with specified string\n    \n    data = virus[virus.Country == country].fillna({'ProvinceState':'blank'}) # subset\n    \n    dataByStateDate = data.groupby(['ProvinceState', 'ObservationDate']).sum().reset_index()\n    print('\\n[****** The', country, 'data by province or state ******]')\n    \n    print(dataByStateDate)\n    return dataByStateDate\n\ndef calculateMetrics(data, country):\n    '''\n    Group data by Date to calculate the sum of confirmed, the sum of deaths, the sum of recovered, death rate, and recovered rate. Then calculate the delta of different observations by date.\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The original dataset to be group by.\n    country : String\n        The string to filter out the specified country.\n    '''\n    \n    data = data.groupby(['ObservationDate']).sum().reset_index()\n        \n    # we need to fix the first observation since it doesn't have the previous observation to calculate\n    # so we just use itself as the delta by fillna()\n    \n    # ConfirmedNew is calculated as confirmed-of-today minus confirmed-of-yesterday\n    data['ConfirmedNew'] = data.sort_values('ObservationDate')['Confirmed'].diff().fillna(data['Confirmed'])\n    \n    # DeathsNew is calculated as deaths-of-today minus deaths-of-yesterday\n    data['DeathsNew'] = data.sort_values('ObservationDate')['Deaths'].diff().fillna(data['Deaths'])\n    \n    # RecoveredNew is calculated as recovered-of-today minus recovered-of-yesterday\n    data['RecoveredNew'] = data.sort_values('ObservationDate')['Recovered'].diff().fillna(data['Recovered'])\n    \n    # DeathRate is calculated as deaths divided by confirmed\n    data['DeathRate'] = data['Deaths'] \/ data['Confirmed']\n    \n    # RecoveredRate is calculated as recovered divided by confirmed\n    data['RecoveredRate'] = data['Recovered'] \/ data['Confirmed']\n    \n    # The quantities trend in each country is different, we need to normalize it.\n    column_names_to_normalize = ['Confirmed', 'Deaths', 'Recovered', 'ConfirmedNew', 'DeathsNew', 'RecoveredNew']\n    column_names_normalize = ['ConfirmedN', 'DeathsN', 'RecoveredN', 'ConfirmedNewN', 'DeathsNewN', 'RecoveredNewN']\n    confirmedNew = data[column_names_to_normalize].values\n    confirmedNewNormal = preprocessing.MinMaxScaler().fit_transform(confirmedNew)\n    temp = pd.DataFrame(confirmedNewNormal, columns=column_names_normalize, index = data.index)\n    data = pd.concat([data, temp], axis=1, sort=False)\n    \n    # Because the country informaiton will be lost after sum(),\n    # so we need to add country back to the dastaset.\n    data['Country'] = country\n    \n    # add Day column to decide the happened day since the first confirmed cases\n    data.insert(0, 'Day', range(1, len(data) + 1))\n    \n    # remove SNo column since we have Day column\n    del data['SNo']\n    \n    \n    print('\\n[****** The', country, 'data by date ******]')\n    print(data)\n    return data","224561dd":"# the US has detailed information regarding states, so we need to group it.\nusByState = groupByProvinceStateDate('US')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nus = calculateMetrics(usByState, 'US')\n\nus\n# we can double-check the result by corresponding output from those two functions","36ad7ed7":"us.info()","842798b6":"# the Brazil has detailed information regarding states since 5\/21, so we need to group it.\nbrazilByProvince = groupByProvinceStateDate('Brazil')\n\n# because Brazil doesn't have any confirmed cases on 2020-01-23, the first row, we need to remove it\nbrazilByProvince = brazilByProvince[brazilByProvince['Confirmed'] != 0]\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nbrazil = calculateMetrics(brazilByProvince, 'Brazil')\n\nbrazil\n# we can double-check the result by corresponding output from those two functions","957b85f9":"# the Russia doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nrussia = calculateMetrics(virus[virus.Country == 'Russia'], 'Russia')\n\nrussia\n# we can double-check the result by corresponding output","e98abf39":"# the UK has detailed information regarding provinces, so we need to group it.\nukByState = groupByProvinceStateDate('UK')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nuk = calculateMetrics(ukByState, 'UK')\n\nuk\n# we can double-check the result by corresponding output from those two functions","0162ad8e":"# the Spain has detailed information regarding provinces, so we need to group it.\nspainByState = groupByProvinceStateDate('Spain')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nspain = calculateMetrics(spainByState, 'Spain')\n\nspain\n# we can double-check the result by corresponding output from those two functions","8b57284f":"# the Italy has detailed information regarding provinces, so we need to group it.\nitalyByState = groupByProvinceStateDate('Italy')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nitaly = calculateMetrics(italyByState, 'Italy')\n\nitaly\n# we can double-check the result by corresponding output from those two functions","dce68cbe":"# the France has detailed information regarding provinces, so we need to group it.\nfranceByState = groupByProvinceStateDate('France')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nfrance = calculateMetrics(franceByState, 'France')\n\nfrance\n# we can double-check the result by corresponding output from those two functions","58d60c1f":"# the Germany has detailed information regarding provinces, so we need to group it.\ngermanyByState = groupByProvinceStateDate('Germany')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\ngermany = calculateMetrics(germanyByState, 'Germany')\n\ngermany\n# we can double-check the result by corresponding output from those two functions","ee5cd6d2":"# the Turkey doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nturkey = calculateMetrics(virus[virus.Country == 'Turkey'], 'Turkey')\n\nturkey\n# we can double-check the result by corresponding output","a499b9fa":"# the India doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nindia = calculateMetrics(virus[virus.Country == 'India'], 'India')\n\nindia\n# we can double-check the result by corresponding output","6731085e":"# the Iran doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\niran = calculateMetrics(virus[virus.Country == 'Iran'], 'Iran')\n\niran\n# we can double-check the result by corresponding output","98431f8b":"# the Peru doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nperu = calculateMetrics(virus[virus.Country == 'Peru'], 'Peru')\n\nperu\n# we can double-check the result by corresponding output","94b9065b":"# the Canada has detailed information regarding provinces, so we need to group it.\ncanadaByState = groupByProvinceStateDate('Canada')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\ncanada = calculateMetrics(canadaByState, 'Canada')\n\ncanada\n# we can double-check the result by corresponding output from those two functions","f38c6df4":"# the China has detailed information regarding provinces, so we need to group it.\nchinaByState = groupByProvinceStateDate('Mainland China')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nchina = calculateMetrics(chinaByState, 'Mainland China')\n\nchina['Country'] = 'China' # shorten the name of China\nchina\n# we can double-check the result by corresponding output from those two functions","07e23b36":"# the Chile has detailed information regarding provinces since 5\/20, so we need to group it.\nchileByState = groupByProvinceStateDate('Chile')\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nchile = calculateMetrics(chileByState, 'Chile')\n\nchile\n# we can double-check the result by corresponding output from those two functions","212981c1":"# the Saudi Arabia doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\narabia = calculateMetrics(virus[virus.Country == 'Saudi Arabia'], 'Saudi Arabia')\n\narabia\n# we can double-check the result by corresponding output","5c72c37b":"# the Mexico has detailed information regarding provinces since 5\/20, so we need to group it.\nmexicoByState = groupByProvinceStateDate('Mexico')\n\n# because Mexico doesn't have any confirmed cases on 2020-01-23, the first row, we need to remove it\nmexicoByState = mexicoByState[mexicoByState['Confirmed'] != 0]\n\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nmexico = calculateMetrics(mexicoByState, 'Mexico')\n\nmexico\n# we can double-check the result by corresponding output from those two functions","521cb47c":"# the Pakistan doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\npakistan = calculateMetrics(virus[virus.Country == 'Pakistan'], 'Pakistan')\n\npakistan\n# we can double-check the result by corresponding output","4e638139":"# the Belgium doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nbelgium = calculateMetrics(virus[virus.Country == 'Belgium'], 'Belgium')\n\nbelgium\n# we can double-check the result by corresponding output","be2f4e5c":"# the Qatar doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nqatar = calculateMetrics(virus[virus.Country == 'Qatar'], 'Qatar')\n\nqatar\n# we can double-check the result by corresponding output","787e47c6":"# the Bangladesh doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nbangladesh = calculateMetrics(virus[virus.Country == 'Bangladesh'], 'Bangladesh')\n\nbangladesh\n# we can double-check the result by corresponding output","e7ffa67d":"# the South Africa doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\nafrica = calculateMetrics(virus[virus.Country == 'South Africa'], 'South Africa')\n\nafrica\n# we can double-check the result by corresponding output","260933c3":"# the Taiwan doesn't have detailed state or province information\n# calculate the delta of confirmed, deaths, recovered cases by grouping date\ntaiwan = calculateMetrics(virus[virus.Country == 'Taiwan'], 'Taiwan')\n\ntaiwan\n# we can double-check the result by corresponding output","daf58282":"# define custom function to add geographical informaiton\ndef addGeoInfo(data):\n    '''\n    add the continent, longitude, and latitude info by country\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The country dataset.\n    '''\n    country = data['Country'][0] # get the country name\n    \n    # we use the most cases city\/province\/state in the country\n    # the info comes from time_series_covid19_confirmed_global.csv\n    if (country in ['US', 'Brazil', 'Peru', 'Canada', 'Chile', 'Mexico']):\n        \n        data['Continent'] = 'America'\n        \n        if (country == 'US'):\n            addLatLong(data, 37.0902, -95.7129)\n        elif (country == 'Brazil'):\n            addLatLong(data, -14.235, -51.9253)\n        elif (country == 'Peru'):\n            addLatLong(data, -9.19, -75.0152)\n        elif (country == 'Canada'):\n            addLatLong(data, 51.2538, -85.3232)\n        elif (country == 'Chile'):\n            addLatLong(data, -35.6751, -71.543)\n        elif (country == 'Mexico'):\n            addLatLong(data, 23.6345, -102.5528)\n        else:\n            print('Can\\'t find the latitude\/longitude of country:', country)\n            \n    elif (country in ['Russia', 'UK', 'Spain', 'Italy', 'France', 'Germany', 'Belgium']) :\n        \n        data['Continent'] = 'Europe'\n        \n        if (country == 'Russia'):\n            addLatLong(data, 60, 90)\n        elif (country == 'UK'):\n            addLatLong(data, 49.3723, -2.3644)\n        elif (country == 'Spain'):\n            addLatLong(data, 40, -4)\n        elif (country == 'Italy'):\n            addLatLong(data, 43, 12)\n        elif (country == 'France'):\n            addLatLong(data, 46.2276, 2.2137)\n        elif (country == 'Germany'):\n            addLatLong(data, 51, 9)\n        elif (country == 'Belgium'):\n            addLatLong(data, 50.8333, 4)\n        else:\n            print('Can\\'t find the latitude\/longitude of country:', country)\n            \n    elif (country in [\"Turkey\", 'India', 'Iran', 'China', 'Saudi Arabia', 'Pakistan', 'Qatar', 'Bangladesh', 'Taiwan']) :\n        \n        data['Continent'] = 'Asia'\n        \n        if (country == 'Turkey'):\n            addLatLong(data, 38.9637, 35.2433)\n        elif (country == 'India'):\n            addLatLong(data, 21, 78)\n        elif (country == 'Iran'):\n            addLatLong(data, 32, 53)\n        elif (country == 'China'):\n            addLatLong(data, 30.9756, 112.2707)\n        elif (country == 'Saudi Arabia'):\n            addLatLong(data, 24, 45)\n        elif (country == 'Pakistan'):\n            addLatLong(data, 30.3753, 69.3451)\n        elif (country == 'Qatar'):\n            addLatLong(data, 25.3548, 51.1839)\n        elif (country == 'Bangladesh'):\n            addLatLong(data, 23.685, 90.3563)\n        elif (country == 'Taiwan'):\n            addLatLong(data, 23.7, 121)\n        else:\n            print('Can\\'t find the latitude\/longitude of country:', country)\n    elif (country in [\"South Africa\"]) :\n        data['Continent'] = 'Africa'\n        \n        if (country == 'South Africa'):\n            addLatLong(data, -30.5595, 22.9375)\n        else:\n            print('Can\\'t find the latitude\/longitude of country:', country)\n    else:\n        print('Can\\'t find the country:', country)\n        \ndef addLatLong(data, latitude, longitude):\n    '''\n    add the longitude and latitude info to dataframe\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The country dataset.\n    latitude : Float\n        A point on Earth's surface is the angle between the equatorial plane and the straight line that passes through that point and through (or close to) the center of the Earth.\n    longitude : Float\n        A point on Earth's surface is the angle east or west of a reference meridian to another meridian that passes through that point.\n    '''\n    data['Latitude'] = latitude\n    data['Longitude'] = longitude\n    print(data['Country'][0], ':', latitude, ',', longitude)","b54b2d64":"addGeoInfo(us)\naddGeoInfo(brazil)\naddGeoInfo(russia)\naddGeoInfo(uk)\naddGeoInfo(spain)\naddGeoInfo(italy)\naddGeoInfo(france)\naddGeoInfo(germany)\naddGeoInfo(turkey)\naddGeoInfo(india)\naddGeoInfo(iran)\naddGeoInfo(peru)\naddGeoInfo(canada)\naddGeoInfo(china)\naddGeoInfo(chile)\naddGeoInfo(arabia)\naddGeoInfo(mexico)\naddGeoInfo(pakistan)\naddGeoInfo(belgium)\naddGeoInfo(qatar)\naddGeoInfo(bangladesh)\naddGeoInfo(africa)\naddGeoInfo(taiwan)","57c40e5c":"print(us.info())\n\nus.tail() # show some info","f2b42589":"def clean(data):\n    '''\n    Remove the row if there is a negative number in ConfirmedNew, DeathsNew, or RecoveredNew. \n    After removing, print the logs.\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The country dataset.\n    '''\n    country = data.Country[0]\n    \n    if (len(data[data.ConfirmedNew < 0]) > 0):\n        print('The value of ConfirmedNew of', country, 'is negative.')\n        print(data[data.ConfirmedNew < 0])\n        data.drop(data[data.ConfirmedNew < 0].index, inplace = True)\n        print('ConfirmedNew cleaned up\\n')\n    \n    if (len(data[data.DeathsNew < 0]) > 0):\n        print('The value of DeathsNew of', country, 'is negative.')\n        print(data[data.DeathsNew < 0])\n        data.drop(data[data.DeathsNew < 0].index, inplace = True)\n        print('DeathsNew cleaned up\\n')\n    \n    if (len(data[data.RecoveredNew < 0]) > 0):\n        print('The value of RecoveredNew of', country, 'is negative.')\n        print(data[data.RecoveredNew < 0])\n        data.drop(data[data.RecoveredNew < 0].index, inplace = True)\n        print('RecoveredNew cleaned up\\n')\n        ","442036d6":"# clean data correspondingly\nclean(us)\nclean(brazil)\nclean(russia)\nclean(uk)\nclean(spain)\nclean(italy)\nclean(france)\nclean(germany)\nclean(turkey)\nclean(india)\nclean(iran)\nclean(peru)\nclean(canada)\nclean(china)\nclean(chile)\nclean(arabia)\nclean(mexico)\nclean(pakistan)\nclean(belgium)\nclean(qatar)\nclean(bangladesh) \nclean(africa)\nclean(taiwan)","46af9454":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nsns.set_style(\"darkgrid\")\n   \ndef scatterplot(data):\n    '''\n    draw scatter plot about related information.\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The original dataset to be group by.\n    '''\n    \n    print('The Scatter Plot of', data.Country[0])\n       \n    plt.figure(figsize=(20,6))\n    plt.subplot(1,2,1)\n    plt.plot(data.Day, data.ConfirmedNew, '.')\n    plt.xlabel('$Day$', fontsize=12)\n    plt.ylabel('$ConfirmedNew$', fontsize=12)\n\n    plt.subplot(1,2,2)\n    plt.plot(data.Day, data.Confirmed, '.')\n    plt.xlabel('$Day$', fontsize=12)\n    plt.ylabel('$Confirmed$', fontsize=12)\n    plt.show()\n\n    plt.figure(figsize=(20,6))\n    plt.subplot(1,2,1)\n    plt.plot(data.RecoveredNew, data.ConfirmedNew, '.')\n    plt.xlabel('$RecoveredNew$', fontsize=12)\n    plt.ylabel('$ConfirmedNew$', fontsize=12)\n\n    plt.subplot(1,2,2)\n    plt.plot(data.DeathRate, data.ConfirmedNew, '.')\n    plt.xlabel('$DeathsNew$', fontsize=12)\n    plt.ylabel('$ConfirmedNew$', fontsize=12)\n    plt.show()\n\n    plt.figure(figsize=(20,6))\n    plt.subplot(1,2,1)\n    plt.plot(data.DeathRate, data.DeathsNew, '.')\n    plt.xlabel('$DeathRate$', fontsize=12)\n    plt.ylabel('$DeathsNew$', fontsize=12)\n\n    plt.subplot(1,2,2)\n    plt.plot(data.RecoveredRate, data.RecoveredNew, '.')\n    plt.xlabel('$RecoveredRate$', fontsize=12)\n    plt.ylabel('$RecoveredNew$', fontsize=12)\n    plt.show()\n    \n    plt.figure(figsize=(20,6))\n    plt.subplot(1,2,1)\n    plt.plot(data.Day, data.DeathRate, '.')\n    plt.xlabel('$Day$', fontsize=12)\n    plt.ylabel('$DeathRate$', fontsize=12)\n\n    plt.subplot(1,2,2)\n    plt.plot(data.Day, data.RecoveredRate, '.')\n    plt.xlabel('$Day$', fontsize=12)\n    plt.ylabel('$RecoveredRate$', fontsize=12)\n    plt.show()\n    ","a8d2b219":"scatterplot(us)","babe7351":"scatterplot(brazil)","0545bb14":"scatterplot(russia)","422b6fd1":"scatterplot(uk)","a238e4a7":"scatterplot(spain)","a1b0985c":"scatterplot(italy)","463d7132":"scatterplot(france)","fd4a4e3a":"scatterplot(germany)","067467a6":"scatterplot(turkey)","ebbaff14":"scatterplot(india)","f0eb608e":"scatterplot(iran)","97249048":"scatterplot(peru)","febae028":"scatterplot(canada)","e6474891":"scatterplot(china)","b1b3ee86":"scatterplot(chile)","a57ba500":"scatterplot(arabia)","82507000":"scatterplot(mexico)","d91436fc":"scatterplot(pakistan)","00cbf7be":"scatterplot(belgium)","4c0dc918":"scatterplot(qatar)","9faaf2ce":"scatterplot(bangladesh)","84341038":"scatterplot(africa)","091fe7d7":"scatterplot(taiwan)","f64b2ca0":"# draw distribution plot\ndef distribution(data):\n    '''\n    Draw distribution plot of ConfirmedNew, DeathsNew, and RecoveredNew\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The dataset to draw distribution\n    '''\n    \n    country = data.Country[0]\n    plt.figure(figsize=(30,6))\n\n    plt.subplot(1,3,1)\n    plt.title('Confirmed New Distribution Plot of ' + country)\n    sns.distplot(data.ConfirmedNew)\n\n    # We won't show the plot of DeathsNew of Taiwan because there will occur an error with message \"You have categorical data, but your model needs something numerical. See our one hot encoding tutorial for a solution.\"\n    # The reason is because the DeathsNew of Taiwan is only 0, 1, or 3, which will be treated as categorical data\n    if (country != 'Taiwan'):\n        plt.subplot(1,3,2)\n        plt.title('Deaths New Distribution Plot of ' + country)\n        sns.distplot(data.DeathsNew)\n\n    plt.subplot(1,3,3)\n    plt.title('Recovered New Distribution Plot of ' + country)\n    sns.distplot(data.RecoveredNew)\n\n    plt.show()","06920c55":"distribution(us)","860363a9":"distribution(brazil)","88d668bb":"distribution(russia)","969c43c5":"distribution(uk)","911ff597":"distribution(spain)","1bcab7f0":"distribution(italy)","381a0668":"distribution(france)","e55eb742":"distribution(germany)","eb0825f2":"distribution(turkey)","ac3ef386":"distribution(india)","a21cdc78":"distribution(iran)","ce15af18":"distribution(peru)","24072466":"distribution(canada)","b567bb28":"distribution(china)","7664288b":"distribution(chile)","ce3b9231":"distribution(arabia)","f038d0eb":"distribution(mexico)","6ec15449":"distribution(pakistan)","4b51e3f9":"distribution(belgium)","86f7b10c":"distribution(qatar)","8438aa35":"distribution(bangladesh)","016243e7":"distribution(africa)","ee721690":"distribution(taiwan)","67bf2026":"world = pd.concat([us, brazil, russia, uk, spain, italy, france, germany, turkey, india, iran, peru, canada, china, chile, arabia, mexico, pakistan, belgium, qatar, bangladesh, africa, taiwan]) \n\n# show the related between box plot\nplt.figure(figsize=(20,8))\nplt.title('Country vs ConfirmedNew')\nsns.boxplot(x=world.Country, y=world.ConfirmedNew)\nplt.ylabel('Confirmed New')\nplt.xlabel('Country')\nplt.show()","15047501":"# exclude unnecessary columns\npairdata = world[world.columns[~world.columns.isin(['ObservationDate', 'Latitude', 'Longitude', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'ConfirmedNewN', 'DeathsNewN', 'RecoveredNewN'])]]\n\n# take america as sample\namerica = pairdata[pairdata.Continent == 'America']\n\n# ignore the categorical continent column\namerica = america[america.columns[~america.columns.isin(['Continent'])]]\n\n# draw pairplot\nsns.pairplot(america, hue='Country')","754094cf":"import statsmodels.api as sm\n\ndef evaluate(X, y, num):\n    '''\n    Perform linear regression on specified features\n\n    Parameters\n    ----------\n    X : array_like\n        A nobs x k array where nobs is the number of observations and k is the number of regressors. An intercept is not included by default and should be added by the user. See statsmodels.tools.add_constant.\n    y : array_like\n        A 1-d endogenous response variable. The dependent variable.\n    num : int\n        The evaluate number.\n    '''\n    model = sm.OLS(y, X).fit()\n    print('\\nModel #', num)\n    print(model.summary())\n\ndef evaluateByCountry(data):\n    '''    \n    Evulate different models by composition of features\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The dataset to train by linear regression\n    '''\n    \n    print('\\nThe evaluation of', data.Country[0])\n\n    \n    # model #1\n    X = data[['Day']]\n    y = data['ConfirmedNewN']\n    evaluate(X, y, 1)\n    \n    # model #2\n    X = data[['Day', 'ConfirmedN']]\n    evaluate(X, y, 2)\n    \n    # model #3\n    X = data[['Day', 'ConfirmedN', 'DeathsN']]\n    evaluate(X, y, 3)\n    \n    # model #4\n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN']]\n    evaluate(X, y, 4)\n\n    # model #5\n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN']]\n    evaluate(X, y, 5)\n\n    # model #6\n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN', 'RecoveredNewN']]\n    evaluate(X, y, 6)\n\n    # model #7\n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN', 'RecoveredNewN', 'DeathRate']]\n    evaluate(X, y, 7)\n\n    # model #8\n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN', 'RecoveredNewN', 'DeathRate', 'RecoveredRate']]\n    evaluate(X, y, 8)\n    \n","15958496":"evaluateByCountry(us)","148d7140":"evaluateByCountry(italy)","f9ed2c7a":"evaluateByCountry(india)","93725b9f":"from scipy import stats\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\ndef linearTrain(data):\n    '''\n    Perform linear regression on specified features\n\n    Parameters\n    ----------\n    data : Pandas Dataframe\n        The dataset to train by linear regression\n    '''\n    \n    X = data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN', 'RecoveredNewN']] # the features selected from model #6\n    y = data['ConfirmedNewN']\n    model = sm.OLS(y, X).fit()\n    return model\n\ndef cor(model, data):\n    '''\n    Perform predict by given model and calculate the correlation\n\n    Parameters\n    ----------\n    model: OLS data model\n        The trained linear model\n    data : Pandas Dataframe\n        The dataset to predict by trained model\n    '''\n\n    # predict ConfirmedNew by corresponding model given the test data\n    predictConfirmedNewN = model.predict(data[['Day', 'ConfirmedN', 'DeathsN', 'RecoveredN', 'DeathsNewN', 'RecoveredNewN']]) # the features selected from model #6\n    \n    print('\\nThe prediction of', data.Country[0])\n    \n    # calculate correlation by pearson's methond\n    pearson = stats.pearsonr(predictConfirmedNewN, data.ConfirmedNewN)\n    correlation = abs(pearson[0]) * 100\n    \n    # calculate Mean Absolute Error\n    mae = mean_absolute_error(data.ConfirmedNewN, predictConfirmedNewN)\n    \n    # calculate Mean Squared Error\n    mse = mean_squared_error(data.ConfirmedNewN, predictConfirmedNewN)\n    \n    # calculate Mean Root Squared Error\n    mqse = np.sqrt(mean_squared_error(data.ConfirmedNewN, predictConfirmedNewN))\n\n    # print predicted info\n    print('Correlation: %.3f' % correlation, ',       Mean Absolute Error: %.3f' % mae)\n    print('Mean Squared Error: %.3f' % mse, ', Mean Root Squared Error:%.3f' % mqse)\n    return correlation","be5e98d2":"# all country list\ncountryList = ['US', 'Brazil', 'Russia', 'UK', 'Spain', 'Italy', 'France', 'Germany', 'Turkey', 'India', 'Iran', 'Peru', 'Canada', 'China', 'Chile', 'Saudi Arabia', 'Mexico', 'Pakistan', 'Belgium', 'Qatar', 'Bangladesh', 'South Africa', 'Taiwan']\n\n#define a global dataframe to for calculating the correlations\ncorrelationScores = pd.DataFrame({'Country' : countryList,\n                                  'Correlation' : [0] * 23}) # initial score is 0 for 22 countries\n\n# show the correlation score are all 0\ncorrelationScores","1ba33b67":"def corBar(countries, correlations, country):\n    '''\n    Draw barplots about the countries and correlations.\n\n    Parameters\n    ----------\n    countries : list of countries\n        The specified country in list.\n    correlations : list of correlation score\n        The calculated correlation score in list\n    country : String\n        the country name\n    '''\n\n    df = pd.DataFrame({'country' : countries,\n                       'correlation' : correlations})\n\n    plt.figure(figsize=(20,10))\n    sns.barplot(data=df, x='country', y='correlation')\n    plt.title('Correlations by Linear Model of ' + country)\n\n    # add correlation score value to each bar\n    # Now the trick is here. credit: https:\/\/stackoverflow.com\/a\/55866275\/510320\n    # plt.text() , you need to give (x,y) location , where you want to put the numbers,\n    # So here index will give you x pos and data+1 will provide a little gap in y axis.\n    for index,data in enumerate(correlations):\n        plt.text(x=index-0.3 , y =data+1 , s='{:2.2f}'.format(data) , fontdict=dict(fontsize=16))\n\n    plt.show()\n    \n   \ndef barBasedOn(data):\n    '''\n    Calculate correlations and draw plot\n\n    Parameters\n    ----------\n    data : the pandas dataframe\n        The specified country dataset.\n    '''\n    country = data.Country[0]\n    countries = []\n    correlations = []\n    \n    model = linearTrain(data)\n    \n    if (country != 'US'):\n        corUs = cor(model, us) # calculate correlation score\n        countries.append('US') # append country to show in the bar graph\n        correlations.append(corUs) # append correlation score to show in the bar graph\n        correlationScores.iat[0, 1] = correlationScores.iat[0, 1] + corUs  # add correlation score to corresponding country\n        \n    if (country != 'Brazil'):\n        corBrazil = cor(model, brazil)\n        countries.append('Brazil')\n        correlations.append(corBrazil)\n        correlationScores.iat[1, 1] = correlationScores.iat[1, 1] + corBrazil\n        \n    if (country != 'Russia'):\n        corRussia = cor(model, russia)\n        countries.append('Russia')\n        correlations.append(corRussia)\n        correlationScores.iat[2, 1] = correlationScores.iat[2, 1] + corRussia\n        \n    if (country != 'UK'):\n        corUk = cor(model, uk)\n        countries.append('UK')\n        correlations.append(corUk)\n        correlationScores.iat[3, 1] = correlationScores.iat[3, 1] + corUk\n        \n    if (country != 'Spain'):\n        corSpain = cor(model, spain)\n        countries.append('Spain')\n        correlations.append(corSpain)\n        correlationScores.iat[4, 1] = correlationScores.iat[4, 1] + corSpain\n        \n    if (country != 'Italy'):\n        corItaly = cor(model, italy)\n        countries.append('Italy')\n        correlations.append(corItaly)\n        correlationScores.iat[5, 1] = correlationScores.iat[5, 1] + corItaly\n        \n    if (country != 'France'):\n        corFrance = cor(model, france)\n        countries.append('France')\n        correlations.append(corFrance)\n        correlationScores.iat[6, 1] = correlationScores.iat[6, 1] + corFrance\n        \n    if (country != 'Germany'):\n        corGermany = cor(model, germany)\n        countries.append('Germany')\n        correlations.append(corGermany)\n        correlationScores.iat[7, 1] = correlationScores.iat[7, 1] + corGermany\n        \n    if (country != 'Turkey'):\n        corTurkey = cor(model, turkey)\n        countries.append('Turkey')\n        correlations.append(corTurkey)\n        correlationScores.iat[8, 1] = correlationScores.iat[8, 1] + corTurkey\n        \n    if (country != 'India'):\n        corIndia = cor(model, india)\n        countries.append('India')\n        correlations.append(corIndia)\n        correlationScores.iat[9, 1] = correlationScores.iat[9, 1] + corIndia\n        \n    if (country != 'Iran'):\n        corIran = cor(model, iran)\n        countries.append('Iran')\n        correlations.append(corIran)\n        correlationScores.iat[10, 1] = correlationScores.iat[10, 1] + corIran\n        \n    if (country != 'Peru'):\n        corPeru = cor(model, peru)\n        countries.append('Peru')\n        correlations.append(corPeru)\n        correlationScores.iat[11, 1] = correlationScores.iat[11, 1] + corPeru\n        \n    if (country != 'Canada'):\n        corCanada = cor(model, canada)\n        countries.append('Canada')\n        correlations.append(corCanada)\n        correlationScores.iat[12, 1] = correlationScores.iat[12, 1] + corCanada\n        \n    if (country != 'China'):\n        corChina = cor(model, china)\n        countries.append('China')\n        correlations.append(corChina)\n        correlationScores.iat[13, 1] = correlationScores.iat[13, 1] + corChina\n        \n    if (country != 'Chile'):\n        corChile = cor(model, chile)\n        countries.append('Chile')\n        correlations.append(corChile)\n        correlationScores.iat[14, 1] = correlationScores.iat[14, 1] + corChile\n        \n    if (country != 'Saudi Arabia'):\n        corArabia = cor(model, arabia)\n        countries.append('Saudi Arabia')\n        correlations.append(corArabia)\n        correlationScores.iat[15, 1] = correlationScores.iat[15, 1] + corArabia\n        \n    if (country != 'Mexico'):\n        corMexico = cor(model, mexico)\n        countries.append('Mexico')\n        correlations.append(corMexico)\n        correlationScores.iat[16, 1] = correlationScores.iat[16, 1] + corMexico\n        \n    if (country != 'Pakistan'):\n        corPakistan = cor(model, pakistan)\n        countries.append('Pakistan')\n        correlations.append(corPakistan)\n        correlationScores.iat[17, 1] = correlationScores.iat[17, 1] + corPakistan\n        \n    if (country != 'Belgium'):\n        corBelgium = cor(model, belgium)\n        countries.append('Belgium')\n        correlations.append(corBelgium)\n        correlationScores.iat[18, 1] = correlationScores.iat[18, 1] + corBelgium\n        \n    if (country != 'Qatar'):\n        corQatar = cor(model, qatar)\n        countries.append('Qatar')\n        correlations.append(corQatar)\n        correlationScores.iat[19, 1] = correlationScores.iat[19, 1] + corQatar\n    \n    if (country != 'Bangladesh'):\n        corBangladesh = cor(model, bangladesh)\n        countries.append('Bangladesh')\n        correlations.append(corBangladesh)\n        correlationScores.iat[20, 1] = correlationScores.iat[20, 1] + corBangladesh\n        \n    if (country != 'South Africa'):\n        corAfrica = cor(model, africa)\n        countries.append('South Africa')\n        correlations.append(corAfrica)\n        correlationScores.iat[21, 1] = correlationScores.iat[21, 1] + corAfrica\n        \n    if (country != 'Taiwan'):\n        corTaiwan = cor(model, taiwan)\n        countries.append('Taiwan')\n        correlations.append(corTaiwan)\n        correlationScores.iat[22, 1] = correlationScores.iat[22, 1] + corTaiwan\n    \n    # start drawing bar plots\n    corBar(countries, correlations, country)\n    ","908ac86b":"barBasedOn(us)","cc8fad0e":"barBasedOn(brazil)","9086963b":"barBasedOn(russia)","1d3aa477":"barBasedOn(uk)","bc0c83f4":"barBasedOn(spain)","f788046b":"barBasedOn(italy)","5ccf7388":"barBasedOn(france)","196c8fda":"barBasedOn(germany)","5dcae91c":"barBasedOn(turkey)","558b4672":"barBasedOn(india)","6196eb1f":"barBasedOn(iran)","59ec27fe":"barBasedOn(peru)","8fc71775":"barBasedOn(canada)","1e2075b5":"barBasedOn(china)","c037c9cd":"barBasedOn(chile)","d3ae032b":"barBasedOn(arabia)","1ddedcd1":"barBasedOn(mexico)","4fe27683":"barBasedOn(pakistan)","d3facdb8":"barBasedOn(belgium)","35ee7c25":"barBasedOn(qatar)","d8e3b481":"barBasedOn(bangladesh)","ef2cbed8":"barBasedOn(africa)","d08b72cf":"barBasedOn(taiwan)","097d00c7":"correlationScores","20eb0cc4":"sortedScores = correlationScores.sort_values('Correlation')\n\nplt.figure(figsize=(20,10))\nsns.barplot(data=sortedScores, x='Country', y='Correlation')\nplt.title('Overall scores of Mutual Correlation')\n\n# add correlation score value to each bar\nfor index,data in enumerate(sortedScores.Correlation):\n    plt.text(x=index-0.3 , y =data+15 , s=data , fontdict=dict(fontsize=16))\n\nplt.show()\n","2423e9ed":"def trend(continent):\n    '''\n    Draw trend by continent\n    \n    Parameters\n    ----------\n    continent : the continent name\n        the trend will filter by continent\n    '''\n    \n    plt.figure(figsize=(20,10))\n    sns.lineplot(data=world[world['Continent'] == continent ], x='Day', y='ConfirmedNew', hue='Country', style='Country', markers=False, dashes=False, linewidth=1.5)\n    plt.show()","0e7a6b4f":"trend('America')","25ff493a":"trend('Europe')","90c35f8f":"trend('Asia')","326df414":"# pip install plotly==4.8.1\n# reference: https:\/\/towardsdatascience.com\/visualizing-worldwide-covid-19-data-using-python-plotly-maps-c0fba09a1b37\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Choropleth(\n    locationmode = \"country names\",\n    locations = correlationScores['Country'],\n    z = correlationScores['Correlation'],\n    text = correlationScores['Correlation'],\n    colorscale = 'matter',\n    reversescale=True,\n    colorbar_title = 'Correlation Score',\n))\n\nfig.update_layout(\n    title_text='COVID-19 TOP 22 Mutual Correlation Scores',\n    geo=dict(\n        showcoastlines=True,\n    ),\n)\n\nfig.show()","502d07f1":"The organized and transformed data contains 17 columns.","f2bda1f3":"### Quick analysis of US\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","eb931f18":"### The South Africa Data","bdfcf83f":"According to the plot, we can see that since the COVID-19 outbreak, China, Turkey, and Iran were increasing the new confirmed cases daily after 10 days. Other countries in Asia were increasing after 40 days. India, Iran, Saudi Arabia, Pakistan, Qatar, and Bangladesh are in the increasing trend of new confirmed cases. But Turkey seems slowly decrease the new confirmed cases daily. China and Taiwan are two special cases. China once had more than 15000 new confirmed cases a day, but the number drastically down to only double digits in 10 days, which is believed that the report from China may be fake. According to the media and news during the period after the highest peak, Xi Jinping, the president of China, said the disease is under control. After then, the report of new confirmed cases is drastically down. Taiwan reached 27 new confirmed cases daily at maximum. That is because Taiwan prepared for the COVID-19 outbreak in advance, which makes it become the only country that can prevent the coronavirus spread out while Taiwan is the closest country to China.","2843a6a0":"### Predict by the trained model of Italy ","879ccf81":"### Quick analysis of Turkey\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","b7f8529e":"### Quick analysis of Chile \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","1662346a":"### The Qatar Data","dead18b4":"### Predict by the trained model of Saudi Arabia ","b6f25959":"## 2.2 Perform data transformation\nWe only need data of top 22 confirmed cases countries, which are US, Brazil, Russia, United Kingdom, Spain, Italy, France, Germany, Turkey, India, Iran, Peru, Canada, China, Chile, Saudi Arabia, Mexico, Pakistan, Belgium, Qatar, Bangladesh, South Africa, and my country, Taiwan. Some countries have provinces or states information, but others do not have this information. We need to separate them and use several customed functions to calculate the daily new confirmed cases, new deaths, and new recovered cases.","a9c138ba":"### Quick analysis of France\nWe can see the first two plots show that the trend of ConfirmedNew cases is getting stable while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","7e56dc4f":"### The Russia Data","7bef60a9":"### Quick analysis of Brazil\nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","209b8c68":"### The United States Data","84a57a88":"## 3.4 Pairplot\nWe draw correlation matrix to view the relationship between variables.","47824e89":"We can see US data is separated by different states, but I only want to get the confirmed count in country level. Therefore, we group it by country and date to get whole data.","5fa91fcf":"We can see that each country has its own shape of plots.","316e811f":"### The Brazil Data","ce3eb566":"# The Analysis of Coronavirus (COVID-19) Comparison Between Top 22 Countries and Taiwan\n\n# 1. Introduction\n\nWhy should we not blame China for hiding coronavirus (COVID-19) information from the world in the first place? \n\n## 1.1 Project Description\n\nSince the novel coronavirus (COVID-19) had spread all over the whole world, I want to find out how the changes of new confirmed cases, new recovered, new deaths in the top 22 confirmed cases countries and my country, Taiwan. I use multiple linear regression to predict and fit between 23 countries, including US, Brazil, Russia, United Kingdom, Spain, Italy, France, Germany, Turkey, India, Iran, Peru, Canada, China, Chile, Saudi Arabia, Mexico, Pakistan, Belgium, Qatar, Bangladesh, South Africa, and Taiwan. Then I compare the trends of these countries and try to explain the differences and why the result comes out.\n\n`Note:` The country sequence is listed as the confirmed cases ranking on May 26, 2020. These countries may go up and down, so I will not change the processing sequence of these countries.\n","d22597c6":"### The Spain Data","cc69153f":"### Predict by the trained model of India ","d730c7cf":"### Predict by the trained model of Russia","d1a023e0":"### The Pakistan Data","d945db24":"Here, we build a dataframe contains 23 countries and related correlation scores. We use the score to test if the country has a correlation with other countries, which means how similar the pattern they have.","c6efd308":"### Predict by the trained model of Germany ","f6829d3e":"### Predict by the trained model of Qatar ","7b89aeed":"### Quick analysis of Iran\nWe can see the first two plots show that although the trend of ConfirmedNew cases was decreasing, it is in the second wave of increasing. Therefore, the trend of Confirmed cases is increasing.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","15074b40":"Add geographical information to each country.","b5ed65ae":"### The Canada Data","68a0810f":"### Predict by the trained model of Mexico ","13728c9a":"# 4. Machine Learning\n## 4.1 Multiple Linear Regression\nWe want to find out the COVID-19 correlations between these 23 countries.\nAlthough these countries adopt different policies and methods against the pandemic, we assume the coronavirus (COVID-19) outbreak has the same pattern in all countries.","b0b684f3":"### Predict by the trained model of Bangladesh","0a081ffa":"Then we need the data accumalated by observation date.","7ab1f405":"### The Italy Data","a58bca88":"### Predict by the trained model of UK ","0c3d8cfd":"### Quick analysis of South Africa \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","3b9b7f16":"### Predict by the trained model of US ","0f1d4fc9":"### The United Kingdom Data","bbf0fa44":"### Quick analysis of Russia\nWe can see the first two plots show that the trend of ConfirmedNew cases seems to start decreasing while the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","51e51f76":"We show the correlation score on the world map. The darker color means the lower correlation score, which means the country doesn't have a similar pattern regarding COVID-19 pandemic to others. As we can see, China is the darkest color when it has the lowest correlation score.","344cea84":"### Predict by the trained model of Canada ","3aa29164":"### Predict by the trained model of Taiwan ","7aeaff24":"### Quick analysis of Peru\nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","a320a319":"## 1.2 The Dataset\nThe dataset source is from https:\/\/www.kaggle.com\/sudalairajkumar\/novel-corona-virus-2019-dataset. I mainly use the `covid_19_data.csv` as my dataset, but I still use `time_series_covid_19_confirmed.csv`, `time_series_covid_19_deaths.csv`, and `time_series_covid_19_recovered.csv` as reference.\n\n### Column Description\n* SNo: The sequence number or data\n* ObservationDate: The date when confirmed observed\n* Province\/State: The province or state where found confirmed\n* Country\/Region: The country the confirmed case belongs to\n* Last Update: Last update time\n* Confirmed: The accumulated confirmed cases until the observation date\n* Deaths: The accumulated deaths until the observation date\n* Recovered: The accumulated recovered cases until the observation date\n\nThe dataset I used collected confirmed, deaths, and recovered data is from January 22, 2020, to Jun 14, 2020.","6f10a3f6":"### The Chile Data","ce4ca64c":"### Predict by the trained model of China ","9221aab6":"## 4.3 Trend comparison by continent\n\nI compare the trend of NEW confirmed cases of each country in three different categories.","99dee6e0":"We can see that almost all distribution plots are right-skewed. Iran has a more normal distribution than others. China, France, and Taiwan have a very long tail in distribution plots for different reasons. China's and France's data are very big to ten thousand but Taiwan's data is only double digits.","50f2dd82":"### The Bangladesh Data","70affcd2":"### Predict by the trained model of South Africa","755e6479":"### Quick analysis of India\nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","c35acd35":"### Quick analysis of Spain\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","4f337350":"### Predict by the trained model of Peru ","c159cb34":"### The Iran Data","3f646e50":"We train models by a country in turn, then use other countries as the test sets to validate the model and calculate the correlation score. Therefore, we can sum up the total correlation scores to check if all countries have the same or similar patterns.","41cd5d55":"### Trend of Asia continent","3c092346":"### The Belgium Data","8ffc1aa1":"## 4.2 Predicting with each country dataset","812d6033":"According to the plot, we can see that since the COVID-19 outbreak, almost all countries in Europe were increasing the new confirmed cases daily after 40 days. France once had the most daily new confirmed case, but France keeps decreasing now. We can see that Russia still has many new confirmed cases daily, which leads it to be one of the top 3 confirmed cases countries in the world.","7a15106c":"### Predict by the trained model of Brazil ","48b55141":"### Predict by the trained model of Turkey ","118c6876":"According to these boxplots, the boxplots of Iran and Turkey have a typical distribution of the data and quantitative variables. We can see there are outliners in the polts of Brazil, France, Germany, India, Peru, China, Pakistan, and South Africa. China has the most outliners.","27819f09":"### Quick analysis of Belgium\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","1d303640":"### Quick analysis of Mexico \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","25be5645":"### Quick analysis of Germany\nWe can see the first two plots show that the trend of ConfirmedNew cases is getting stable while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","34e3a0e3":"# 5 Summary\n## 5.1 Linear regression result comparison\nThe linear models trained by every country always suit for some other countries in our samples. The only two exceptions are China and Taiwan. As we all know, China government ignored and hid the disease at the very beginning time, and then it blocked the information from the world. In the end, the outbreak was boomed in Wuhan city, and the confirmed cases and deaths suddenly increased a lot. After that, President Xi Jinping controlled the media, news, and new confirmed cases. It is believed that the China government may report fake data to WHO when after Xi\u2019s talk to the citizens in China.\n\nTaiwan is in the other situation. Taiwan suffered SARS in 2003. Since then, Taiwan has always prepared for another disease outbreak. So when Taiwan first heard there might be new coronavirus appeared in Wuhan in the early of January 2020, Taiwan government soon decided to build the Central Epidemic Command Center (CECC) to manage all the information about COVID-19. The CECC arranged many policies to prevent the disease from spreading and monitor people who may be in danger. It turns out to make the incredible few confirmed cases in Taiwan, although Taiwan is the closest country to China in the world. Do not forget that there are two to three million people fly to and back between China and Taiwan every year.\n\nAccording to the above reasons, other countries are not so aware of COVID-19 or China like Taiwan. Even the WHO also declared that this disease is not dangerous in the first. So other countries will not prepare for the outbreak because they believe WHO. But people in Taiwan never trust China and know that China actually controls WHO. Hence, Taiwan prepared for it in advance. The population of Taiwan is 23 million people but only has less than 500 confirmed cases and less than ten deaths, despite the island\u2019s proximity to China, where the outbreak originated. It significantly showed why I said Taiwan indeed prevents the COVID-19 from spreading.\n\nEven if Taiwan has so few cases, it has a higher correlation score than China's. This is another evidence that China lies to the world and report the fake data regarding COVID-19.\n\nThese explanations tell us why the linear models trained by each country do not suit for China and Taiwan but suit other countries. The reasons are China\u2019s data is not precise, and Taiwan\u2019s situation is under control without any outbreak. We know that the first confirmed case in Taiwan is the same day as the first confirmed case in South Korea and Japan. But it turns out that South Korea has 11814 confirmed cases, and Japan has 17056 confirmed cases on June 08, which both are the severe COVID-19 affected area.\n\n## 5.2 Conclusion\nAccording to the trends and plots above, the top 22 confirmed cases countries have a similar situation since the disease appeared in those countries. The only exception is China in the top 22. By these comparisons, they showed the increasing of the new confirmed case would occur after 30 ~ 40 days since the first confirmed case. The linear models produced by all countries are properly suited for other countries except China and Taiwan. This means the COVID-19 outbreak has similar patterns in almost any country except China and Taiwan. For Taiwan, this is because it prepares and controls in advance before WHO\u2019s announcement. For China, its strange patterns about the disease are obviously controlled by the communist government. Until now, the new confirmed cases are still not transparent in China. \n\nSo, why should we not blame China for hiding the coronavirus (COVID-19) information from the world in the first place? \nYes, we should blame China for its lie and dishonor behavior regarding COVID-19. The world needs to fight the disease together, but China only cares about its reputation without following international rules.\n\nThis project states how strange the new confirmed cases in China dramatically down are. The project also shows how different the pattern China has with other top 22 countries. By machine learning, we not only can train models to know the related features with new confirmed cases but also can use trained models to find similar patterns regarding the COVID-9 pandemic.","1ea3fac5":"### The France Data","f68caa8a":"For some unknown reasons, the dataset is not 100% correctly, which occurred the negative value of ConfirmedNew, DeathsNew, and Recovered. So we try to clean it up.","e96d07fd":"### Quick analysis of Taiwan \nWe can see the first two plots show that the trend of ConfirmedNew cases is getting stable. Therefore, the trend of Confirmed cases is becoming flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","8a86a3cf":"Now, we have three new columns called ConfirmedNew, DeathsNew, and RecoveredNew. We use this pattern to produce each country's own dataset. Therefore, we define two functions for reusing.","a9ddd996":"### Trend of America continent","7d0fd11d":"### Predict by the trained model of Spain ","d69ad9a0":"### Quick analysis of China\nWe can see the first two plots show that the trend of ConfirmedNew cases is stable for a long time. Therefore, the trend of Confirmed cases keeps flat for a long time. This is kind of weird.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","d5aa4d1f":"# 2. Data Munging\n## 2.1 Basic knowledge of dataset\nThe dataset is loaded from the CSV file and assigned to a variable `virus`.","762b908f":"Based on the trained model of the US, the prediction of Russia, India, Peru, Canada, Chile, Saudi Arabia, Mexico, Pakistan, Belgium, Qatar, and Bangladesh have higher correlation scores than other countries. The barplot shows the correlation scores by each country.","a419afb9":"After we add more features, now the dataset contains 20 columns.","8ce1597a":"Based on the trained model of the Russia, the prediction of India, Chile, and Mexico have higher correlation scores than other countries. The barplot shows the correlation scores by each country.","c9353dd1":"### The Turkey Data","9d023891":"### Quick analysis of Saudi Arabia\nWe can see the first two plots show that although the trend of ConfirmedNew cases was decreasing, it is in the second wave of increasing. Therefore, the trend of Confirmed cases is increasing.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","a8e74a2d":"### The Taiwan Data","16e09179":"We need to calculate new confirmed, new deaths, and new recovered counts according to the previous day.","a84ddb07":"No surprise, China has the lowest correlation score with other countries. This means China doesn't have a similar pattern to other countries. China is the only exception. China's score is even lower than half of the average score. But we know that China was Top 1 confirmed cases country in the world, and even now China is still in the top 20 countries. The second-lowest correlation score is Taiwan, which is quite different from other countries because Taiwan only has less than 500 confirmed cases and less than 10 deaths cases. I will have detailed explanations for both of them in the conclusion.","4185d373":"#### Summary of Italy model evaluation\nAfter linear models trained by eight different compositions of features, we can see the model #5~#8 has the same best R-squared score, which is 0.974. The p-values in model #5 and model #6 are small on all features, which means features are significantly related to the ConfirmedNew.","b0c6cb4d":"#### Summary of India model evaluation\nAfter linear models trained by eight different compositions of features, we can see the model #5~#8 has the same best R-squared score, which is 0.993. The p-values in model #5 and model #6 are small on all features, which means features are significantly related to the ConfirmedNew.","e252db0d":"### Quick analysis of Italy\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","3f470327":"#### Summary of US model evaluation\nAfter linear models trained by eight different compositions of features, we can see the model #8 has the best R-squared score, which is 0.978. The p-values are very small on all features, which means all features are significantly related to the ConfirmedNew.","4742cc86":"# 3. EDA (Exploratory Data Analysis)\n## 3.1 Scatterplot\nWe use scatterplot to observe the relationship between Day and ConfirmedNew variables in each country.\n","a85431f4":"### Quick analysis of Qatar \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","e841f30e":"### Predict by the trained model of France","7b9159a0":"After comparing the above results, we decide to choose model #6 as the training variables, including Day, ConfirmedN, DeathsN, RecoveredN, DeathsNewN, and RecoveredNewN. Therefore, we use six features declared in model #6 as the selected variable features in the next training and prediction process.","e00e1b7f":"## 3.3 Boxplot\nWe use boxplots to view the quantitative distribution of each country\u2019s data.","1b9f8eff":"### The China Data","aa050387":"### The India Data","f02c4cb4":"### The Saudi Arabia Data","2da793d6":"### Add geographical information\nWe will need geographical information for categorical classification or visualization.","ddc89fd0":"Based on the trained model of the Brazil, the prediction of US, Russia, India, Peru, Canada, Chile, Saudi Arabia, Mexico, Pakistan, Belgium, Qatar, and Bangladesh have higher correlation scores than other countries. The barplot shows the correlation scores by each country.","8a095526":"### Predict by the trained model of Iran ","6c23b619":"### Trend of Europe continent","242cd2e9":"Based on the trained model of the UK, the prediction of US, Russia, Italy, Turkey, India, Peru, Canada, Chile, Mexico, Pakistan, Belgium, and Bangladesh have higher correlation scores than other countries. The barplot shows the correlation scores by each country.","a3cc57f9":"### The Germany Data","c959cc7e":"### Quick analysis of Canada\nWe can see the first two plots show that the trend of ConfirmedNew cases is still decreasing. Therefore, the trend of Confirmed cases is slowly increasing.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","4e7ac4af":"## 4.4 Choropleth map","9e6df2e4":"### Quick analysis of UK\nWe can see the first two plots show that the trend of ConfirmedNew cases is decreasing while the trend of Confirmed cases is getting flat.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","792e4f0e":"According to the plot, we can see that since the COVID-19 outbreak, almost all countries in America were increasing the new confirmed cases daily after 40~50 days. The US and Brazil both have severe situation than others. Only Canada and the US have confirmed cases for more than 130 days, and other countries are just affected by COVID-19 for 100 days. The daily new confirmed cases for Brazil, Chile, and Mexico are in the increasing trend.","9e21b36a":"### The Mexico Data","152985f1":"### The Peru Data","cd823dda":"Therefore, now we have define the functions for calculate the accumalated confirmed, deaths, recovered, and related data. We are going to making subset for each country.","57b8a85d":"### Predict by the trained model of Chile ","d2b361a2":"### Quick analysis of Pakistan \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","a3df2f30":"## 3.2 Distribution plot","6eec4847":"We will separate those 22 countries to the corresponding dataset. Then we will choose some of them to be the training sets, and others are the test sets. This method could compare the differences in the learning models of each country.","4cc9ddd3":"### Quick analysis of Bangladesh \nWe can see the first two plots show that the trend of ConfirmedNew cases is still increasing. Therefore, the trend of Confirmed cases is increasing dramatically.\n\nThe second row shows that the relationship between ConfirmedNew, RecoveredNew, and DeathsNew.\n\nThe third row shows DeathRate and RecoveredRate are increasing while DeathsNew and RecoveredNew are increasing.\n\nThe fourth row shows the trend of DeathRate and RecoveredRate.","feff8df7":"After all the linear regression training and validating, we have all the correlation scores about all countries. Then we can draw the plot."}}