{"cell_type":{"3d0abc93":"code","1742103a":"code","e9150065":"code","f0f00c81":"code","99052865":"code","c991adae":"code","1211fefb":"code","5c7c31ae":"code","6b69fe65":"code","ed0c4c0f":"code","0630a128":"code","3d5b0583":"code","8e55f84b":"code","bfa65bc7":"code","6c56b27a":"code","4487f39d":"code","8435c815":"code","923af343":"code","51dd8c09":"code","328f10e9":"code","fe6c8bb8":"code","f8d2987b":"code","a053d9b4":"code","facde7cd":"code","def18f65":"code","947fe5a8":"code","f776beac":"code","6fca2b9c":"code","780e20ad":"code","e2932074":"code","e5a4426f":"code","c7c76cdb":"code","6b2571e7":"code","7fc1ceee":"code","5985a8a2":"code","aee4b1bf":"code","2ec6b38e":"code","e56ed4a6":"code","7a809062":"code","271ea7bf":"code","48c8d3fd":"code","ac812d14":"code","f50a9e8d":"code","bdb0eb65":"code","f8147b44":"code","80026166":"code","bbfdb710":"code","23c94f7f":"code","d821159f":"code","f8e0f573":"code","ac6c5a6f":"code","79ec5a0a":"code","545615cf":"code","56e4868c":"code","872ae75c":"code","1a07b97f":"code","f595d33a":"code","088ec30f":"code","6e1a19cf":"code","da630d64":"code","a38846ad":"code","6f373149":"code","d54c89f7":"code","be82dfca":"code","3df553d2":"code","9290923a":"code","ff035be3":"code","453e6a7b":"code","5cb78d4f":"markdown","e69551c2":"markdown","8a1c2104":"markdown","0bf29b9a":"markdown","2f9908e6":"markdown","571c419f":"markdown","5ec1f5f5":"markdown","8020b142":"markdown","2ea04fc2":"markdown","76189f11":"markdown","b3b0fabb":"markdown","85232993":"markdown","09c5389f":"markdown","f066fb62":"markdown","786ffe2c":"markdown","3684742f":"markdown","908ea63b":"markdown","6dbf4424":"markdown","9fc51b0e":"markdown","58769b54":"markdown","3003dba5":"markdown","be12c8a6":"markdown","2bc6b59b":"markdown","4838c2dd":"markdown","16bbe761":"markdown","6443c7f1":"markdown","40853d58":"markdown","049c5c07":"markdown","0a24aead":"markdown","edf78be4":"markdown","e6560f95":"markdown","a622506d":"markdown","59c84177":"markdown","70e5d67e":"markdown","a77efa75":"markdown","8c179f2f":"markdown","d98401b4":"markdown","b4a40181":"markdown","f2bc7547":"markdown","02f017ca":"markdown","dfbf91fe":"markdown","50c4a1b3":"markdown","17a903b9":"markdown","aca0d1db":"markdown","ddfbdc7a":"markdown","71fde963":"markdown","3ac86111":"markdown","6738ba7e":"markdown","2749e225":"markdown","51d83d2c":"markdown","3f7890c1":"markdown","dba037fe":"markdown","bee8a0a2":"markdown","ca92a7f2":"markdown","661065c0":"markdown","e9b6d551":"markdown"},"source":{"3d0abc93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1742103a":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(f'Shape of training data: {train_df.shape}\\nShape of test data: {test_df.shape}')","e9150065":"train_df.head()","f0f00c81":"train_df.info()","99052865":"test_df.info()","c991adae":"train_df.describe().T","1211fefb":"test_df.describe().T","5c7c31ae":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nplt.rcParams['figure.figsize'] = (10, 5)","6b69fe65":"sns.countplot(x = 'Survived', data = train_df).set_title('Survival status of Passengers', fontsize = 15);","ed0c4c0f":"# Fraction of passengers survived\/died \ntrain_df.Survived.value_counts() \/ train_df.shape[0] ","0630a128":"ax = sns.countplot(x = 'Pclass', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers in each class', fontsize = 15)\n\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x() + 0.15, p.get_height() + 1))","3d5b0583":"ax = sns.countplot(x = 'Sex', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers based on gender', fontsize = 15)\n\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x() + 0.15, p.get_height() + 1))","8e55f84b":"ax = sns.countplot(x = 'SibSp', hue = 'Survived', data = train_df)\nax.set_title('Survival of passengers based on SibSp relations', fontsize = 15)\n\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x() + 0.05, p.get_height() + 1))\n    \nplt.legend(loc = 1);","bfa65bc7":"ax = sns.countplot(x = 'Parch', hue = 'Survived', data = train_df)\nax.set_title('Survival of passengers based on Parch relations', fontsize = 15)\n\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x() + 0.05, p.get_height() + 1))\n    \nplt.legend(loc = 1);","6c56b27a":"ax = sns.countplot(x = 'Embarked', hue = 'Survived', data = train_df)\nax.set_title('Survival of passengers based on Embarked feature', fontsize = 15)\n\nfor p in ax.patches:\n    ax.annotate('{}'.format(p.get_height()), (p.get_x() + 0.15, p.get_height() + 1))\n    \nplt.legend(loc = 1);","4487f39d":"# Number of unique values in the given column\ntrain_df.Ticket.nunique()","8435c815":"train_df.Ticket.value_counts()[:15]","923af343":"ax = sns.swarmplot(y = 'Pclass', x = 'Sex', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers in each class based on sex', fontsize = 15)\nplt.legend(loc = 1);","51dd8c09":"df_ps = train_df.groupby(['Pclass', 'Sex', 'Survived']).size().reset_index(name = \"Group_Count\")\ndf_ps","328f10e9":"ax = sns.swarmplot(y = 'SibSp', x = 'Sex', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers based on SibSp and sex', fontsize = 15)\nplt.legend(loc = 1);","fe6c8bb8":"df_sb = train_df.groupby(['SibSp', 'Sex', 'Survived']).size().reset_index(name = \"Group_Count\")\ndf_sb","f8d2987b":"ax = sns.swarmplot(x = 'Embarked', y = 'Pclass', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers based on Embarked and Pclass', fontsize = 15)\nplt.legend(loc = 1);","a053d9b4":"df_sb = train_df.groupby(['Pclass', 'Embarked', 'Survived']).size().reset_index(name = \"Group_Count\")\ndf_sb","facde7cd":"ax = sns.swarmplot(x = 'Embarked', y = 'SibSp', hue = 'Survived', data = train_df)\nax.set_title('Survival status of passengers based on Embarked and SibSp', fontsize = 15)\nplt.legend(loc = 1);","def18f65":"df_se = train_df.groupby(['SibSp', 'Embarked', 'Survived']).size().reset_index(name = \"Group_Count\")\ndf_se","947fe5a8":"fig, ax = plt.subplots(1, 2, figsize = (14, 6))\nsns.distplot(train_df.Age, ax = ax[0]).set_title('Distribution of Age in the train dataset', fontsize = 15)\nsns.distplot(test_df.Age, ax = ax[1]).set_title('Distribution of Age in the test dataset', fontsize = 15);","f776beac":"sns.boxplot(x = 'Sex', y = 'Age', hue = 'Survived', data = train_df).set_title(\n    'Distribution of Age for each gender', fontsize = 15);","6fca2b9c":"g = sns.catplot(x = 'Pclass', y = 'Age',hue = 'Survived', col = 'Sex',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","780e20ad":"g = sns.catplot(x = 'Embarked', y = 'Age',hue = 'Survived', col = 'Sex',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","e2932074":"g = sns.catplot(x = 'Pclass', y = 'Age',hue = 'Survived', col = 'Sex', row = 'Embarked',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","e5a4426f":"fig, ax = plt.subplots(1, 2, figsize = (14, 6))\nsns.distplot(train_df.Fare, ax = ax[0]).set_title('Distribution of Fare in the train dataset', fontsize = 15)\nsns.distplot(test_df.Fare, ax = ax[1]).set_title('Distribution of Fare in the test dataset', fontsize = 15);","c7c76cdb":"sns.boxplot(x = 'Sex', y = 'Fare', hue = 'Survived', data = train_df).set_title(\n    'Distribution of Fare for each gender', fontsize = 15);","6b2571e7":"g = sns.catplot(x = 'Pclass', y = 'Fare',hue = 'Survived', col = 'Sex',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","7fc1ceee":"g = sns.catplot(x = 'Embarked', y = 'Fare',hue = 'Survived', col = 'Sex',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","5985a8a2":"g = sns.catplot(x = 'Pclass', y = 'Fare',hue = 'Survived', col = 'Sex', row = 'Embarked',\n                data = train_df, kind = 'box', height = 5, aspect = 1.2);","aee4b1bf":"sns.scatterplot(x = 'Age', y = 'Fare', hue = 'Survived', data = train_df).set_title(\n    'Scatter plot of age and Fare based on survival status');","2ec6b38e":"sns.scatterplot(x = 'Age', y = 'Fare', hue = 'Sex', data = train_df).set_title('Scatter plot of age and Fare based on sex');","e56ed4a6":"g = sns.relplot(x = 'Age', y = 'Fare', col = 'Sex', hue = 'Survived', kind = 'scatter', data = train_df)\nplt.title('Age vs Fare based on survival status and sex of passengers');","7a809062":"# Fraction of passengers in SibSp column\nfig, ax = plt.subplots(1, 2, figsize = (15, 6))\ntrain = train_df.Pclass.value_counts() \/ train_df.shape[0]\ntrain.plot(kind = 'bar', title = 'Distribution of passengers in Pclass column in the train dataset', ax = ax[0])\n\ntest = test_df.Pclass.value_counts() \/ test_df.shape[0]\ntest.plot(kind = 'bar', title = 'Distribution of passengers in Pclass column in the test dataset', ax = ax[1]);","271ea7bf":"# Fraction of passengers in each gender in the train dataset\ntrain_df.Sex.value_counts() \/ train_df.shape[0]","48c8d3fd":"# Fraction of passengers in each gender in the test dataset\ntest_df.Sex.value_counts() \/ test_df.shape[0]","ac812d14":"# Fraction of passengers in SibSp column\nfig, ax = plt.subplots(1, 2, figsize = (15, 6))\ntrain = train_df.SibSp.value_counts() \/ train_df.shape[0]\ntrain.plot(kind = 'bar', title = 'Distribution of passengers in SibSp column in the train dataset', ax = ax[0])\n\ntest = test_df.SibSp.value_counts() \/ test_df.shape[0]\ntest.plot(kind = 'bar', title = 'Distribution of passengers in SibSp column in the test dataset', ax = ax[1]);","f50a9e8d":"fig, ax = plt.subplots(1, 2, figsize = (15, 6))\ntrain = train_df.Parch.value_counts() \/ train_df.shape[0]\ntrain.plot(kind = 'bar', title = 'Distribution of passengers in Parch column in the train dataset', ax = ax[0])\n\ntest = test_df.Parch.value_counts() \/ test_df.shape[0]\ntest.plot(kind = 'bar', title = 'Distribution of passengers in Parch column in the test dataset', ax = ax[1]);","bdb0eb65":"sns.heatmap(train_df.drop(['Survived', 'PassengerId'], axis = 1).corr(), annot = True);","f8147b44":"## Drop outliers \n\ndef find_outliers(data_frame, n, cols):\n    \"\"\"\n    This function will record the index of outliers present in the cols\n    Args:\n        data_frame: data_frame from which outliers needed to be recorded\n        n: threshold on number of outliers\n        cols: list of columns to find outliers\n    \"\"\"\n    outlier_indices = []\n    # iterate over the columns\n    for i in cols:\n        Q1 = np.percentile(data_frame[i], 25)\n        Q3 = np.percentile(data_frame[i], 75)\n        IQR = Q3 - Q1\n        outlier_step = 1.5 * IQR\n        outlier_index_list = data_frame[(data_frame[i] < Q1 - outlier_step) | (data_frame[i] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_index_list)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(k for k, v in outlier_indices.items() if v > n)  \n    return multiple_outliers","80026166":"outliers_to_drop = find_outliers(train_df, 3, ['Age', 'SibSp', 'Parch', 'Fare'])\ntrain_df = train_df.drop(outliers_to_drop, axis = 0).reset_index(drop = True)\ntrain_df.shape","bbfdb710":"## concatenate the training and test data to treat null values\ntrain_test = pd.concat([train_df.drop('Survived', axis = 1), test_df], axis = 0)\ntrain_test.shape","23c94f7f":"# Removing null values of Age using Pclass\ntrain_test['Age'] = train_test.groupby('Pclass')['Age'].transform(lambda x: x.fillna(x.median()))  \n\n# Removing null values of Fare using Pclass\ntrain_test['Fare'] = train_test.groupby('Pclass')['Fare'].transform(lambda x: x.fillna(x.median())) \n\n# Removing null values of Embarked with the most common\ntrain_test['Embarked'].fillna('S', inplace = True)  ","d821159f":"# Check for null values\ntrain_test.isnull().sum()","f8e0f573":"# separate the target variable\ntarget = train_df.Survived","ac6c5a6f":"from sklearn.preprocessing import LabelEncoder\n\n# instantiate LabelEncoder object \nencoder = LabelEncoder()\n\ntrain_test['Embarked'] = encoder.fit_transform(train_test['Embarked'])\ntrain_test['Sex'] = encoder.fit_transform(train_test['Sex'])\n\n# One hot encoding of Pclass and Embaked\ntrain_test = pd.get_dummies(train_test, columns = ['Pclass', 'Embarked'])\ntrain_test.head()","79ec5a0a":"train_test['Fare_S'] = train_test['Sex'] * train_test['Pclass_1'] * train_test['Embarked_2']","545615cf":"train_test['Name'].head(10)","56e4868c":"train_test['Name'].tail(10)","872ae75c":"# Extract different titles from the names column\ntrain_test['Title'] = train_test['Name'].str.extract('([A-Za-z]+)\\.', expand = False)\n\ntrain_test['Title'] = train_test['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don', 'Dr', 'Major', \n                                                   'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\ntrain_test['Title'] = train_test['Title'].replace(['Mlle', 'Ms'], 'Miss')\n\ntrain_test['Title'] = train_test['Title'].replace('Mme', 'Mrs')\n\n# Mapping titles to numerical data\ntitle_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 2, \"Master\": 3, \"Rare\": 4}\n\ntrain_test['Title'] = train_test['Title'].map(title_mapping)\ntrain_test['Title'] = train_test['Title'].fillna(0)\n\ntrain_test.head()","1a07b97f":"# Extracting Age column into groups\ntrain_test['Age_Cat'] = pd.qcut(train_test['Age'], q = [0, .16, .33, .49, .66, .83, 1], labels = False, precision = 1)\n\n# Fare group\ndef fare_category(fare): \n    if fare <= 7.91:\n        return 1\n    elif fare <= 14.454 and fare > 7.91:\n        return 2\n    elif fare <= 31 and fare > 14.454:\n        return 3\n    return 4\n\ntrain_test['Fare_Cat'] = train_test['Fare'].apply(fare_category) \n\n\n# Make Family Groups\ntrain_test['FamilySize'] = train_test['SibSp'] + train_test['Parch'] + 1\ntrain_test['FamilySize_Cat'] = train_test['FamilySize'].map(lambda x: 1 if x == 1 else (2 if 5 > x >= 2 \n                                                                         else (3 if 8 > x >= 5 else 4 )))   \n\ntrain_test.head()","f595d33a":"train_test.drop(['Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)\n\n# Dummy variable\ntrain_test = pd.get_dummies(train_test, columns = ['SibSp','Parch','Age_Cat','Title','FamilySize','Fare_Cat','FamilySize_Cat'])\n\ntrain_test['Age'] = train_test['Age'].astype(int)\n\ntrain_test.head()","088ec30f":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, f1_score, roc_auc_score\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler","6e1a19cf":"train_data = train_test[:len(train_df)]\ntest_data = train_test[len(train_df):]\n\nnp.random.seed(42)\n\n# Split into training and validation set\ntrain_x, val_x, train_y, val_y = train_test_split(train_data, target, test_size = 0.25) ","da630d64":"def performance_metric(model, val_x, val_y):\n    pred = model.predict(val_x)\n    print(f'F1_Score: {f1_score(val_y, pred)}')\n    print(f'Accuracy: {accuracy_score(val_y, pred)}')\n    print(f'ROC_AUC_Score: {roc_auc_score(val_y, pred)}')\n    return confusion_matrix(val_y, pred)","a38846ad":"rf = RandomForestClassifier(class_weight = 'balanced')\nrf.fit(train_x, train_y)\nperformance_metric(rf, val_x, val_y)","6f373149":"gb = GradientBoostingClassifier(n_estimators = 500)\ngb.fit(train_data, target)\nperformance_metric(gb, val_x, val_y)","d54c89f7":"import lightgbm as lgb\ndtrain = lgb.Dataset(train_x, label = train_y)\ndvalid = lgb.Dataset(val_x, label = val_y)\n\nparam = {'num_leaves': 64, 'objective': 'binary'}\nparam['metric'] = 'auc'\nnum_round = 1000\n\nbst = lgb.train(param, dtrain, num_round, valid_sets = [dvalid], early_stopping_rounds = 10)","be82dfca":"ypred = bst.predict(val_x)\nscore = roc_auc_score(val_y, ypred)\nprint(f\"Test score: {score}\")","3df553d2":"pred = gb.predict(test_data)\npred[:10]","9290923a":"classes = (pred > 0.415)\nclasses = classes.astype(int)\nclasses[:10]","ff035be3":"output = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': pred})\noutput.head()","453e6a7b":"output.to_csv('gb_2_model.csv', index = False)","5cb78d4f":"- Maximum number of passengers belonged to Pclass 3\n- Most of the passengers from **Pclass 3 didn't survived**\n- Maximum number of passengers from **Pclass 1 survived**","e69551c2":"- Both **train and test** data have **similar distribution of Age**\n- **Maximum number** of passengers have **age around 25 years**\n- **Very few** passengers have **age greater than 80 years**\n- **Significant number** of passengers have **age around 0 - 5 years**","8a1c2104":"### Explore the survival status of passengers in Pclass column","0bf29b9a":"### Explore the Parch column along with the survival status of the passengers","2f9908e6":"### Explore the interaction between Pclass and Sex column to see the survival status of passengers","571c419f":"### Explore the Embarked column along with the survival status of the passengers","5ec1f5f5":"### Explore the interaction between Embarked and Pclass column to see the survival status of passengers","8020b142":"### Check the relationship between Age and Fare","2ea04fc2":"### Survival status of passengers","76189f11":"- Median age is around 30 years for both male and females\n- Few outliers are present in the age distribution of males","b3b0fabb":"### Explore survival status based on age distribution along with different features","85232993":"### Explore the SibSp column along with the survival status of the passengers","09c5389f":"- For Pclass 3 passengers have least chance of survival for Embarked S and Q\n- For Pclass 1 passengers have maximum chance of survival for all Embarked","f066fb62":"- **Age, Cabin and Embarked column has missing values**","786ffe2c":"### Let's explore the Age column","3684742f":"- **Number of Male passengers are more than the number of Female passengers**\n- Most of the **male passengers didn't survived**\n- Large number of **female passengers survived**","908ea63b":"### Comparison of SibSp column distribution in the training and test dataset ","6dbf4424":"### Dealing with the categorical variables","9fc51b0e":"### EDA on training dataset","58769b54":"### From the above plots it can be seen that Gender column has similar distributions in the train and test dataset ","3003dba5":"### Explore the interaction between SibSp and Sex column to see the survival status of passengers","be12c8a6":"### From the above plots it can be seen that Parch column has similar distributions in the train and test dataset ","2bc6b59b":"### Read the training and test data into pandas dataframe","4838c2dd":"- **Distribution of Fare is similar in the training and test dataset** and **it is very skewed towards right**","16bbe761":"### Explore the interaction between Embarked and SibSp column to see the survival status of passengers","6443c7f1":"### Generating new features","40853d58":"# Gradient boosting Model","049c5c07":"- Large number of passengers **didn't have Parch relations** and most of them **didn't survived**\n- Passengers with **1 and 2 Parch relations** have almost equal chances of survival and death","0a24aead":"- Large number of passengers **didn't have sibling\/spouse relations** and most of them **didn't survived**\n- Passengers with **1 sibling\/spouse relations** have almost equal chances of survival and death","edf78be4":"### Explore the sex column along with the survival status of the passengers ","e6560f95":"- Many outliers are present in fare when males didn't survived and females survived","a622506d":"- Pclass 1 in both male and female has outlier around 500 and survived","59c84177":"### Comparison of Pclass column distribution in the training and test dataset","70e5d67e":"- Age and Fare columns are most strongly correlated with the Pclass column. This can be used to impute the missing values in these columns.","a77efa75":"- **Data is imbalanced** since the number of passengers who survived is less than the number of passengers who died.","8c179f2f":"### Explore survival status based on fare distribution along with different features","d98401b4":"- When SibSp = 0 and Embarked = S, maximum passengers died\n- When SibSp >= 5 and Embarked = S all passengers died ","b4a40181":"### Get basic information about the train and test data set","f2bc7547":"### Check the number of males and females in the training and test dataset","02f017ca":"## Random Forest Model","dfbf91fe":"- Females with Pclass 1 and 2 have the maximum chance of survival \n- Males with Pclass 2 and 3 have minimum chance of survival","50c4a1b3":"### Explore the Ticket column ","17a903b9":"### Let's explore the Fare column","aca0d1db":"- **Maximum Fare** is same in both the training and test data set\n- **Mean and std of SibSp column** is more in training data set than the test data set\n- **Parch column std in test set** is more than the training data set\n- Maximum value of **Parch in test set in 9 while in train it is 6**.","ddfbdc7a":"### Get description about the training and test dataset","71fde963":"### From the above plots it can be seen that Pclass column has similar distributions in the training and test dataset ","3ac86111":"### Drop the extra columns","6738ba7e":"## Data Cleaning","2749e225":"### Comparison of Parch column distribution in the train and test dataset ","51d83d2c":"- Maximum number of passengers boarded from S and most of them didn't survived\n- Passengers that have boarded from C have more chances of survival","3f7890c1":"- **Age and Cabin columns has missing values** similar to training dataset","dba037fe":"### From the above plots it can be seen that SibSp column has similar distributions in the training and test dataset ","bee8a0a2":"- Females with SibSp <= 3 have the maximum chance of survival \n- Males with SibSp >= 2 have minimum or no chance of survival","ca92a7f2":"- Males in Pclass = 2 with age < 30 has maximum survival chance\n- Youngest passengers were in Pclass = 3 with few outliers\n- Oldest male passengers were in Pclass = 1","661065c0":"### Explore survival status based on age distribution for each gender","e9b6d551":"## Split the data into train and validation data"}}