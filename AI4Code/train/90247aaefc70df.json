{"cell_type":{"6994fdfb":"code","ac52edd0":"code","f33896c0":"code","47082077":"code","2a4db34a":"code","c35ec2ac":"code","5f91a42c":"code","cc3d1a80":"code","d506f22f":"code","122fb22c":"code","7a1af864":"code","2b40ebf1":"code","47cc8463":"code","e71956d4":"code","38adacd2":"code","d6971230":"code","17417d10":"code","6ac8f2c4":"code","b9a49a6e":"code","b87a53a4":"code","0869f02f":"code","ab061b68":"code","90109614":"code","c4e49991":"code","0e191c50":"code","8932acdd":"code","5fe40bc8":"code","9a9f9624":"code","9258f8e9":"code","8b52cac0":"code","c2ec4e91":"code","6fb76d10":"code","4b27393e":"code","3a2a8d22":"code","2e44d85d":"code","2f7a23a6":"code","d99eca55":"code","05bc37b1":"code","a7ee5597":"code","84fbab91":"code","e4aaa6df":"code","b4dffca8":"code","7d103666":"code","14cdcc94":"code","e49c3158":"code","321b14b7":"code","e79fabc0":"code","4670d35c":"code","c27003aa":"code","7971339a":"code","c4610392":"markdown","9e2205b6":"markdown","d094c714":"markdown","4c2e7c61":"markdown","6fd3e601":"markdown","d5654265":"markdown","c22eee6b":"markdown","8db590a5":"markdown","58a0f982":"markdown","fe97f568":"markdown","537caeb6":"markdown","a9a5d2e7":"markdown","c82e1454":"markdown","5693af93":"markdown","5e09ebc2":"markdown","1c6133f8":"markdown","936db07a":"markdown","a14eb94b":"markdown","d4b09960":"markdown","53986677":"markdown","e4f4ae6a":"markdown","53c86c4a":"markdown","12dfb20c":"markdown","b5d71358":"markdown","6567f036":"markdown","341138e8":"markdown","b0aa116a":"markdown","7e9eef39":"markdown","7b5ea4d1":"markdown","d4517159":"markdown","af6486e4":"markdown","7e90ca9a":"markdown","956d8505":"markdown","9c3a025a":"markdown","d7c1dcbb":"markdown","4739b449":"markdown","ff084cb8":"markdown","acb64361":"markdown","933b7d87":"markdown"},"source":{"6994fdfb":"\"\"\"\nPrior to starting I created a spreadsheets mapping all questions from the 4 years of survey.\n\nhttps:\/\/docs.google.com\/spreadsheets\/d\/1HpVi0ipElWYxwXali7QlIbMWjCQWk6nuaZRAZLcksn4\/edit?usp=sharing\n\nSome questions were the same through the years and had exactly the same wording.\nOthers had changes that did not compromise too much the question meaning. For example:\n\n2020 - For how many years have you been writing code and\/or programming?\n2019 - How long have you been writing code to analyze data (at work or at school)?\n\nOr \n\n2020 - Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis? \n2019 - Which specific big data \/ analytics products do you use on a regular basis?\n\nOr\n\n2020 - Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?\n2019 - Which specific big data \/ analytics products do you use on a regular basis?\n2018 - Which of the following big data and analytics products have you used at work or school in the last 5 years?\n\n\n---\n\nOther questions had a different wording that implied in a different meaning, so they were excluded from this analysis.\n\nI picked only questions that were the same over the last 3 years (2020, 2019 and 2018). \nThe 2017 survey was very different from the others and only a few questions were useful, so I decided to exclude 2017 from the analysis.\n\n\n## ## ## ## ## \nI suggest that Kaggle keeps the survey consistent over the following years to allow better time-series analysis. \n## ## ## ## ##\n\n\nNote: I'm trying to write functions for all transformations following the single responsability principle.\n\"\"\"\npass","ac52edd0":"from enum import Enum\nimport numpy as np\n\n\nclass Mapping(Enum):\n    \"\"\"\n    Contains dicts mapping values found in the surveys to values we want to replace with.\n    \"\"\"\n    COMPENSATION={ \n        '$0-999': '0-10k',\n        '1,000-1,999': '0-10k',\n        '2,000-2,999': '0-10k',\n        '3,000-3,999': '0-10k',\n        '4,000-4,999': '0-10k',\n        '5,000-7,499': '0-10k',\n        '7,500-9,999': '0-10k',\n        '10,000-14,999': '10-20k',\n        '15,000-19,999': '10-20k',\n        '20,000-24,999': '20-30k',\n        '25,000-29,999': '20-30k',\n        '30,000-39,999': '30-40k',\n        '40,000-49,999': '40-50k',\n        '50,000-59,999': '50-60k',\n        '60,000-69,999': '60-70k',\n        '70,000-79,999': '70-80k',\n        '80,000-89,999': '80-90k',\n        '90,000-99,999': '90-100k',\n        '100,000-124,999': '100-125k',\n        '125,000-149,999': '125-150k',\n        '150,000-199,999': '150-200k',\n        '200,000-249,999': '200-250k',\n        '300,000-500,000': '300-500k',\n        '> $500,000': np.nan,\n        '0-10,000': '0-10k',\n        '10-20,000': '10-20k',\n        '20-30,000': '20-30k',\n        '30-40,000': '30-40k',\n        '40-50,000': '40-50k',\n        '50-60,000': '50-60k',\n        '60-70,000': '60-70k',\n        '70-80,000': '70-80k',\n        '80-90,000': '80-90k',\n        '90-100,000': '90-100k',\n        '100-125,000': '100-125k',\n        '125-150,000': '125-150k',\n        '150-200,00': '150-200k',\n        '200-250,000': '200-250k',\n        '300-400,000': '300-500k',\n        '400-500,000': '300-500k',\n        '500,000+': np.nan,\n        'I do not wish to disclose my approximate yearly compensation': np.nan\n    }\n    JOB_TITLE={\n        'Data Scientist': 'Data Scientist',\n        'Software Engineer': 'Software Engineer',\n        'Data Analyst': 'Data Analyst',\n        'Other': 'Other',\n        'Research Scientist': 'Research Scientist\/Statistician',\n        'Business Analyst': 'Business Analyst',\n        'Product\/Project Manager': 'Product\/Project Manager',\n        'Data Engineer': 'Data Engineer\/DBA',\n        'Not employed': 'Currently not employed',\n        'Machine Learning Engineer': 'Machine Learning Engineer',\n        'Statistician': 'Research Scientist\/Statistician',\n        'Consultant': 'Other',\n        'Research Assistant': 'Research Scientist\/Statistician',\n        'Manager': 'Manager\/C-level',\n        'DBA\/Database Engineer': 'Data Engineer\/DBA',\n        'Chief Officer': 'Manager\/C-level',\n        'Developer Advocate': 'Other',\n        'Marketing Analyst': 'Business Analyst',\n        'Salesperson': 'Other',\n        'Principal Investigator': 'Research Scientist\/Statistician',\n        'Data Journalist': 'Other',\n        'Currently not employed': 'Currently not employed', \n        'Student': 'Student'\n    } \n    GENDER={\n        'Male': 'Men',\n        'Female': 'Women',\n        'Man': 'Men',\n        'Woman': 'Women',\n        'Prefer not to say': np.nan, # Very few answers on those categories to do any meaningful analysis\n        'Prefer to self-describe':  np.nan, # Very few answers on those categories to do any meaningful analysis\n        'Nonbinary':  np.nan # Very few answers on those categories to do any meaningful analysis\n    }\n    AGE={\n        '18-21': '18-21', \n        '22-24': '22-24', \n        '25-29': '25-29',\n        '30-34': '30-34', \n        '35-39': '35-39', \n        '40-44': '40-44', \n        '45-49': '45-49', \n        '50-54': '50-54', \n        '55-59': '55-59', \n        '60-69': '60-69', \n        '70+': '70+',\n        '70-79': '70+',\n        '80+': '70+'\n    }\n    EDUCATION={\n        'Master\u2019s degree': 'Master\u2019s', \n        'Bachelor\u2019s degree': 'Bachelor\u2019s',\n        'Some college\/university study without earning a bachelor\u2019s degree': 'Some college',\n        'Doctoral degree': 'Doctoral',\n        'Professional degree': 'Professional',\n        'I prefer not to answer': np.nan,\n        'No formal education past high school': 'High school'\n    }\n    YEARS_WRITING_CODE={\n        '3-5 years': '3-5 years',\n        '1-2 years': '1-3 years',\n        '2-3 years': '1-3 years',\n        '5-10 years': '5-10 years',\n        '10-20 years': '10+ years',\n        '< 1 years': '< 1 year',\n        '< 1 year': '< 1 year',\n        '20+ years': '10+ years',\n        np.nan: 'None',\n        'I have never written code': 'None',\n        'I have never written code but I want to learn': 'None',\n        '20-30 years': '10+ years',\n        '30-40 years': '10+ years',\n        '40+ years': '10+ years'\n    }    \n    YEARS_WRITING_CODE_PROFILES={\n        '3-5 years': '3-10 years',\n        '1-2 years': '1-2 years',\n        '2-3 years': '2-3 years',\n        '5-10 years': '3-10 years',\n        '10-20 years': '10+ years',\n        '< 1 years': '0-1 years',\n        '< 1 year': '0-1 years',\n        '20+ years': '10+ years',\n        np.nan: 'None',\n        'I have never written code': 'None',\n        'I have never written code but I want to learn': 'None',\n        '20-30 years': '10+ years',\n        '30-40 years': '10+ years',\n        '40+ years': '10+ years'\n    } \n    RECOMMENDED_LANGUAGE={\n        'Python': 'Python',\n        'R': 'R',\n        'SQL': 'SQL',\n        'C++': 'C++',\n        'MATLAB': 'MATLAB',\n        'Other': 'Other',\n        'Java': 'Java',\n        'C': 'C',\n        'None': 'None',\n        'Javascript': 'Javascript',\n        'Julia': 'Julia',\n        'Scala': 'Other',\n        'SAS': 'Other',\n        'Bash': 'Bash',\n        'VBA': 'Other',\n        'Go': 'Other',\n        'Swift': 'Swift',\n        'TypeScript': 'Other'\n    } \n    LANGUAGES={\n        'SQL': 'SQL', \n        'R': 'R', \n        'Java': 'Java', \n        'MATLAB': 'MATLAB', \n        'Python': 'Python', \n        'Javascript\/Typescript': 'Javascript\/Typescript',\n        'Bash': 'Bash', \n        'Visual Basic\/VBA': 'VBA', \n        'Scala': 'Scala', \n        'PHP': 'Other', \n        'C\/C++': 'C\/C++',\n        'Other': 'Other', \n        'C#\/.NET': 'Other',\n        'Go': 'Other', \n        'SAS\/STATA': 'Other', \n        'Ruby': 'Other', \n        'Julia': 'Julia',\n        'None': 'None',\n         np.nan: 'None',\n        'Javascript': 'Javascript\/Typescript',\n        'C': 'C\/C++', \n        'TypeScript': 'Javascript\/Typescript', \n        'C++': 'C\/C++', \n        'Swift': 'Swift'\n    }\n    YEARS_USING_ML={\n        '1-2 years': '1-3 years',\n        '2-3 years': '1-3 years',\n        '< 1 year': '< 1 year',\n        'Under 1 year': '< 1 year',\n        '< 1 years': '< 1 year',\n        '3-4 years': '3-5 years',\n        '5-10 years': '5+ years',\n        '4-5 years': '3-5 years',\n        np.nan: 'None',\n        'I have never studied machine learning but plan to learn in the future': 'None',\n        'I do not use machine learning methods': 'None',\n        '10-15 years': '5+ years',\n        '20+ years': '5+ years',\n        '10-20 years': '5+ years',\n        '20 or more years': '5+ years',\n        'I have never studied machine learning and I do not plan to': 'None'\n    } \n    YEARS_USING_ML_PROFILES={\n        '1-2 years': '1-2 years',\n        '2-3 years': '2-3 years',\n        '< 1 year': '0-1 years',\n        'Under 1 year': '0-3 years',\n        '< 1 years': '0-1 years',\n        '3-4 years': '3-10 years',\n        '5-10 years': '3-10 years',\n        '4-5 years': '3-10 years',\n        np.nan: 'None',\n        'I have never studied machine learning but plan to learn in the future': 'None',\n        'I do not use machine learning methods': 'None',\n        '10-15 years': '10+ years',\n        '20+ years': '10+ years',\n        '10-20 years': '10+ years',\n        '20 or more years': '10+ years',\n        'I have never studied machine learning and I do not plan to': 'None'\n    } \n    PRIMARY_TOOL={\n        'Local development environments (RStudio, JupyterLab, etc.)': 'Local or hosted development environments',\n        'Basic statistical software (Microsoft Excel, Google Sheets, etc.)': 'Basic statistical software',\n        'Local or hosted development environments (RStudio, JupyterLab, etc.)': 'Local or hosted development environments',\n        'Cloud-based data software & APIs (AWS, GCP, Azure, etc.)': 'Cloud-based data software & APIs',\n        'Other': 'Other',\n        'Advanced statistical software (SPSS, SAS, etc.)': 'Advanced statistical software',\n        'Business intelligence software (Salesforce, Tableau, Spotfire, etc.)': 'Business intelligence software'\n    }\n    COUNTRY = {\n        'India': 'India',\n        'United States of America': 'United States',\n        'Other': 'Other',\n        'Brazil': 'Brazil',\n        'Russia': 'Russia',\n        'Japan': 'Japan',  \n        'United Kingdom of Great Britain and Northern Ireland': 'United Kingdom',\n        'Germany': 'Germany',\n        'China': 'China',\n        'Spain': 'Spain',\n        'France': 'France',\n        'Canada': 'Canada',\n        'Italy': 'Italy',\n        'Nigeria': 'Nigeria',\n        'Turkey': 'Turkey',\n        'Australia': 'Australia'\n    }\n    IDE={\n        'None': 'None', \n        'MATLAB': 'MATLAB', \n        'RStudio': 'RStudio', \n        'Jupyter\/IPython': 'Jupyter\/IPython', \n        'PyCharm': 'PyCharm', \n        'Atom': 'Vim\/Emacs\/Atom',\n        'Visual Studio': 'Visual Studio',\n        'Notepad++': 'Notepad++\/Sublime', \n        'Sublime Text': 'Notepad++\/Sublime', \n        'IntelliJ': 'PyCharm', \n        'Spyder': 'Spyder',\n        'Visual Studio Code': 'Visual Studio',\n        'Vim': 'Vim\/Emacs\/Atom', \n        'Other': 'Other', \n        'nteract': 'Other', \n        np.nan: 'Other',\n        'Jupyter (JupyterLab, Jupyter Notebooks, etc) ': 'Jupyter\/IPython', \n        ' RStudio ': 'RStudio',\n        ' PyCharm ': 'PyCharm', \n        ' MATLAB ': 'MATLAB', \n        '  Spyder  ': 'Spyder', \n        '  Notepad++  ': 'Notepad++\/Sublime',\n        '  Sublime Text  ': 'Notepad++\/Sublime', \n        ' Atom ': 'Vim\/Emacs\/Atom',\n        ' Visual Studio \/ Visual Studio Code ': 'Visual Studio',\n        '  Vim \/ Emacs  ': 'Vim\/Emacs\/Atom',\n        'Visual Studio Code (VSCode)': 'Visual Studio'\n    }\n    CLOUD={\n        'I have not used any cloud providers': 'None', \n        'Microsoft Azure': 'Azure',\n       'Google Cloud Platform (GCP)': 'GCP', \n        'Amazon Web Services (AWS)': 'AWS',\n       'IBM Cloud': 'IBM\/Red Hat', \n        'Other': 'Other', \n        'Alibaba Cloud': 'Alibaba', \n        np.nan: 'None',\n       ' Amazon Web Services (AWS) ': 'AWS', \n        ' Google Cloud Platform (GCP) ': 'GCP',\n       ' Microsoft Azure ': 'Azure', \n        'None': 'None', \n        ' Salesforce Cloud ': 'Other',\n       ' Red Hat Cloud ': 'IBM\/Red Hat', \n        ' VMware Cloud ': 'Other', \n        ' Alibaba Cloud ': 'Alibaba',\n       ' SAP Cloud ': 'Other', \n        ' IBM Cloud ': 'IBM\/Red Hat', \n        ' Oracle Cloud ': 'Other',\n       ' IBM Cloud \/ Red Hat ': 'IBM\/Red Hat',\n        ' Tencent Cloud ': 'Other'\n    }\n    ML_STATUS={ \n        'No (we do not use ML methods)': 'Do not use ML \/ Do not know',\n        'I do not know': 'Do not use ML \/ Do not know',\n        'We recently started using ML methods (i.e., models in production for less than 2 years)': 'Recently started using ML',\n        'We have well established ML methods (i.e., models in production for more than 2 years)':  'Well established ML',\n        'We are exploring ML methods (and may one day put a model into production)': 'Exploring ML',\n        'We use ML methods for generating insights (but do not put working models into production)': 'Use ML for generating insights',\n        np.nan: 'Do not use ML \/ Do not know',\n    }\n    ML_FRAMEWORKS={\n        'None': 'None', \n        'Prophet': 'Prophet', \n        'Scikit-Learn': 'Scikit-learn', \n        'Keras': 'Keras', \n        'TensorFlow': 'TensorFlow',\n        'Spark MLlib': 'Other', \n        'Xgboost': 'Xgboost', \n        'randomForest': 'Other', \n        'lightgbm': 'LightGBM',\n        'Caret': 'Caret',\n        'mlr': 'Other', \n        'PyTorch': 'PyTorch', \n        'Mxnet': 'Other', \n        'CNTK': 'Other', \n        'Caffe': 'Other', \n        'H20': 'H2O', \n        'catboost': 'CatBoost',\n        'Fastai': 'Fast.ai', \n        'Other': 'Other', \n        np.nan: 'None', \n        '  Scikit-learn ': 'Scikit-learn', \n        ' RandomForest': 'Other',\n        ' Xgboost ': 'Xgboost', \n        ' LightGBM ': 'LightGBM',\n        '  TensorFlow ': 'TensorFlow',\n        ' Keras ': 'Keras', \n        ' Caret ': 'Caret',\n        ' PyTorch ': 'PyTorch', \n        ' Spark MLib ': 'Spark MLlib',\n        ' Fast.ai ': 'Fast.ai', \n        ' Tidymodels ': 'Other',\n        ' CatBoost ': 'CatBoost', \n        ' JAX ': 'Other', \n        ' Prophet ': 'Prophet', \n        ' H2O 3 ': 'H2O', \n        ' MXNet ': 'Other'   \n    }\n    \n    \nclass Category(Enum):\n    COMPENSATION=[\n        'Not Disclosed', '0-10k', '10-20k', '20-30k', '30-40k', '40-50k', '50-60k', \n        '60-70k', '70-80k', '80-90k', '90-100k', '100-125k', '125-150k', '150-200k', \n        '200-250k', '300-500k'\n    ]\n    JOB_TITLE=[\n        'Other', 'Manager\/C-level', 'Product\/Project Manager', 'Business Analyst', 'Data Analyst', \n        'Research Scientist\/Statistician', 'Data Scientist', 'Machine Learning Engineer', \n        'Data Engineer\/DBA', 'Software Engineer'\n    ]  \n    GENDER = ['Women', 'Men'] \n    AGE=['18-21', '22-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-69', '70+']\n    YEARS_WRITING_CODE=['None', '< 1 year', '1-3 years', '3-5 years', '5-10 years', '10+ years']\n    YEARS_USING_ML=['None', '< 1 year', '1-3 years', '3-5 years', '5+ years']\n    SURVEY_YEAR=[2018, 2019, 2020]\n    EDUCATION=['High school', 'Some college', 'Professional', 'Bachelor\u2019s', 'Master\u2019s', 'Doctoral']\n    PROFILES=['Beginners', 'Others', 'Modern DS', 'Coders', 'ML Veterans']\n\nCOLORS = {\n    'India': '#FE9933', \n    'Brazil': '#179B3A',\n    'United States': '#002366', \n    'China': '#ED2124', \n    'Average': 'blueviolet',\n    'Canada': '#F60B00',\n    'Data Scientist': '#13A4B4',\n    'Product\/Project Manager': '#D70947',\n    'Software Engineer': '#E8743B', \n    'Data Analyst': '#BF399E',\n    'Data Engineer\/DBA': '#144B7F',\n    '< 1 year': 'lightgreen', \n    '10+ years': 'green', \n    'Women': 'hotpink', \n    'Men': 'midnightblue',\n    'Python': '#FEC331',\n    'SQL': '#66B900',\n    'R': '#2063b7',\n    'C\/C++': 'slateblue',\n    'Basic statistical software': '#0D7036', \n    'Local or hosted development environments': '#36B5E2',\n    'Visual Studio': '#349FED',\n    'Jupyter\/IPython': '#EC7426',\n    'AWS': '#F79500',\n    'GCP': '#1AA746',\n    'Azure': '#3278B1',\n    'Well established ML': 'dodgerblue', \n    'PyTorch': 'orangered', \n    'Scikit-learn': 'goldenrod',\n    'None': 'darkblue',\n    'Do not use ML \/ Do not know': 'slategrey',\n    'Exploring ML': 'lightseagreen', \n    'Recently started using ML': 'forestgreen'\n}\n\n","f33896c0":"from typing import List, Type, Tuple\nimport pandas as pd\nfrom abc import ABC, abstractmethod\n\n\nclass BaseKaggle(ABC):\n    \"\"\"\n    Base class to handle cleaning and transformation of datasets from different years.\n    \"\"\"\n    def __init__(self) -> None:\n        self.df = None\n        self.non_professionals = ['Student', 'Currently not employed', np.nan]\n        self.mapping = {}\n        self.questions_to_combine = []\n        self.survey_year = None\n   \n    @property\n    def questions_to_keep(self) -> List[str]:\n        \"\"\"\n        Select which questions we should keep in the dataframe using the mapping keys\n        \"\"\"\n        return [key for key, value in self.mapping.items()]\n\n    def remove_non_professionals(self) -> pd.DataFrame:\n        \"\"\"\n        Non-professionals were defined as students, unemployed and NaNs. \n        Also removed those who didn't disclose compensation.\n        \"\"\"\n        self.df = self.df.drop(self.df[self.df['Job Title'].isin(self.non_professionals)].index)\n        self.df.dropna(subset=['Yearly Compensation'], inplace=True)\n        return self.df\n    \n    @abstractmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        pass\n    \n    @staticmethod\n    def remove_nans_from_list(answers: List[str]) -> List[str]:\n        \"\"\"\n        This function removes all nans from a list\n        \"\"\"\n        return [x for x in answers if pd.notnull(x)]\n\n    def combine_answers_into_list(self, question: str) -> pd.DataFrame:\n        \"\"\"\n        This function will create a new column in the dataframe adding \n        all answers to a list and removing nans.\n        \"\"\"\n        filtered_columns = self.filter_question_columns(list(self.df.columns), question)\n        self.df[question] = self.df[filtered_columns].values.tolist()\n        self.df[question] = self.df[question].apply(self.remove_nans_from_list)\n        return self.df\n\n    def batch_combine_answers_into_list(self, questions_to_combine: List[str]) -> pd.DataFrame:\n        \"\"\"\n        Applyes combine_answers_into_list to multiple columns\n        \"\"\"\n        for question in questions_to_combine:\n            self.combine_answers_into_list(question=question)\n        return self.df\n    \n    def rename_columns(self) -> pd.DataFrame:\n        \"\"\"\n        Renames columns using mapping\n        \"\"\"\n        self.df = self.df.rename(columns=self.mapping)\n        return self.df\n    \n    def do_mapping(self, column: str, mapping: Mapping) -> pd.DataFrame:\n        \"\"\"\n        Maps values to have same classes accross all years\n        \"\"\"\n        self.df[column] = self.df[column].map(mapping.value)\n        return self.df\n    \n    def do_list_mapping(self, column: str, mapping: Mapping) -> pd.DataFrame:\n        \"\"\"\n        Maps values to have same classes accross all years for columns that are list type\n        \"\"\"\n        mapping_dict = mapping.value\n        self.df[column] = self.df[column].apply(lambda x: [mapping_dict[val] for val in x])\n        return self.df\n\n    def add_numeric_average_compensation(self) -> pd.DataFrame:\n        \"\"\"\n        Create a numeric value for compensation, taking the average between the max and min values for each class\n        \n        We are summing up the lowest and highest value for each category, and then dividing by 2.\n        Some regex needed to clean the text\n        \"\"\"\n        compensation = self.df['Yearly Compensation'].str.replace(r'(?:(?!\\d|\\-).)*', '').str.replace('500', '500-500').str.split('-')\n        self.df['Yearly Compensation Numeric'] = compensation.apply(lambda x: (int(x[0]) + int(x[1]))\/ 2) # it is calculated in thousand of dollars\n        return self.df\n\n    def add_survey_year_column(self) -> pd.DataFrame:\n        \"\"\"\n        Adds the year the survey was taken as a column\n        \"\"\"\n        self.df['Survey Year'] = self.survey_year\n        return self.df\n    \n    def add_dummy_column(self) -> pd.DataFrame:\n        \"\"\"\n        Adds Dummy = 1 to make easier to perform group by\n        \"\"\"\n        self.df['Dummy'] = 1\n        return self.df\n    \n    def select_questions(self) -> pd.DataFrame:\n        \"\"\"\n        Selects only the relevant questions from each survey year\n        \"\"\"\n        self.df = self.df[self.questions_to_keep]\n        return self.df\n    \n    def fill_na(self, column: str, value: str) -> pd.DataFrame:\n        \"\"\"\n        Fill column NaNs with a given value\n        \"\"\"\n        self.df[column] = self.df[column].fillna(value)\n        return self.df\n   \n    def calculate_profile(self, values: tuple) -> str:\n        \"\"\"\n        This function creates profiles for professionals adapted from the work developed by Teresa Kubacka on last years survey\n        https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\n        \"\"\"\n        years_code, years_ml = values\n        if years_code in ['0-1 years', '1-2 years'] and years_ml in ['0-1 years', '1-2 years']:\n            return 'Beginners'\n        elif years_code in ['2-3 years', '3-10 years'] and years_ml in ['1-2 years', '2-3 years', '3-10 years']:\n            return 'Modern DS'\n        elif years_code == '10+ years' and years_ml in ['0-1 years', '1-2 years']:\n            return 'Coders'\n        elif years_code == '10+ years' and years_ml == '10+ years':\n            return 'ML Veterans'\n        else:\n            return 'Others'\n\n    def create_profiles(self) -> None:\n        \"\"\"\n        This function creates a new columns with profiles for professionals adapted from the work developed by Teresa Kubacka on last years survey\n        https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\n        \"\"\"\n        self.df['Years Writing Code Profile'] = self.df['Tenure: Years Writing Code'].map(Mapping.YEARS_WRITING_CODE_PROFILES.value)\n        self.df['Years Using ML Profile'] = self.df['Tenure: Years Using Machine Learning Methods'].map(Mapping.YEARS_USING_ML_PROFILES.value)\n        \n        self.df['Profile'] = self.df[\n            ['Years Writing Code Profile', \n             'Years Using ML Profile']\n        ].apply(self.calculate_profile, axis=1)\n\n        \n    def transform(self) -> pd.DataFrame:\n        \"\"\"\n        Process and clean the dataset\n        \"\"\"\n\n        self.df.drop(0, axis=0, inplace=True)  # dropping first row (questions) from processed data\n\n        self.batch_combine_answers_into_list(questions_to_combine=self.questions_to_combine)\n        self.select_questions()\n        self.rename_columns()\n\n        self.create_profiles()\n        self.do_mapping(column='Yearly Compensation', mapping=Mapping.COMPENSATION)\n        self.do_mapping(column='Job Title', mapping=Mapping.JOB_TITLE)\n        self.do_mapping(column='Gender', mapping=Mapping.GENDER)\n        self.do_mapping(column='Age', mapping=Mapping.AGE)\n        self.do_mapping(column='Education', mapping=Mapping.EDUCATION)\n        self.do_mapping(column='Tenure: Years Writing Code', mapping=Mapping.YEARS_WRITING_CODE)\n        self.do_mapping(column='Recommended Programming Language', mapping=Mapping.RECOMMENDED_LANGUAGE)\n        self.do_mapping(column='Tenure: Years Using Machine Learning Methods', mapping=Mapping.YEARS_USING_ML)\n        self.do_mapping(column='Primary Tool to Analyze Data', mapping=Mapping.PRIMARY_TOOL)\n        self.do_mapping(column='Country', mapping=Mapping.COUNTRY)\n        self.do_mapping(column='Machine Learning Status in Company', mapping=Mapping.ML_STATUS)\n        self.do_list_mapping(column='Machine Learning Frameworks', mapping=Mapping.ML_FRAMEWORKS)\n        \n        self.do_list_mapping(column='Programming Languages', mapping=Mapping.LANGUAGES)\n        self.do_list_mapping(column='IDEs', mapping=Mapping.IDE)\n        self.do_list_mapping(column='Cloud Computing Platforms', mapping=Mapping.CLOUD)\n        self.fill_na(column='Country', value='Other')\n\n        self.remove_non_professionals()       \n        self.add_numeric_average_compensation()\n        self.add_survey_year_column()\n        self.add_dummy_column()\n                \n        self.df.reset_index(drop=True, inplace=True)\n    \n        return self.df\n    ","47082077":"class Kaggle2020(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2020 Dataset\n\n    Here we do the following:\n    * Group all multiple choice answers into a list in a single column.\n    * Remove Non-Professionals from the data set. Non-professionals were defined as students, unemployed and NaNs.\n    * Select the questions we want to keep, based on the spreadsheet analysis done previously.\n    * Remove all non-multiple choice answers\n    \"\"\"\n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2020\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False)\n        self.mapping = {\n            'Q1':'Age',\n            'Q2':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q5':'Job Title',\n            'Q6':'Tenure: Years Writing Code',\n            'Q7':'Programming Languages',\n            'Q8':'Recommended Programming Language',\n            'Q9':'IDEs',\n            'Q10':'Hosted Notebooks',\n            'Q14':'Data Visualization Libraries',\n            'Q15':'Tenure: Years Using Machine Learning Methods',\n            'Q16':'Machine Learning Frameworks',\n            'Q22':'Machine Learning Status in Company',\n            'Q23':'Daily activities',\n            'Q24':'Yearly Compensation',\n            'Q26_A':'Cloud Computing Platforms',\n            'Q27_A':'Cloud Computing Products',\n            'Q28_A':'Machine Learning Products',\n            'Q29_A':'Big Data Products',\n            'Q37':'Data Science Courses',\n            'Q38':'Primary Tool to Analyze Data',\n            'Q39':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q7', 'Q9', 'Q10', 'Q14', 'Q16', 'Q23', 'Q26_A', 'Q27_A', 'Q28_A', 'Q29_A', 'Q37', 'Q39'\n        ]\n           \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER')]\n","2a4db34a":"\nclass Kaggle2019(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2019 Dataset\n    \"\"\"\n    \n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2019\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2019\/multiple_choice_responses.csv', low_memory=False)\n        self.mapping = {\n            'Q1':'Age',\n            'Q2':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q5':'Job Title',\n            'Q15':'Tenure: Years Writing Code',\n            'Q18':'Programming Languages',\n            'Q19':'Recommended Programming Language',\n            'Q16':'IDEs',\n            'Q17':'Hosted Notebooks',\n            'Q20':'Data Visualization Libraries',\n            'Q23':'Tenure: Years Using Machine Learning Methods',\n            'Q28':'Machine Learning Frameworks',\n            'Q8':'Machine Learning Status in Company',\n            'Q9':'Daily activities',\n            'Q10':'Yearly Compensation',\n            'Q29':'Cloud Computing Platforms',\n            'Q30':'Cloud Computing Products',\n            'Q32':'Machine Learning Products',\n            'Q31':'Big Data Products',\n            'Q13':'Data Science Courses',\n            'Q14':'Primary Tool to Analyze Data',\n            'Q12':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q18', 'Q16', 'Q17', 'Q20', 'Q28', 'Q9', 'Q29', 'Q30', 'Q32', 'Q31', 'Q13', 'Q12'\n        ]\n           \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER_TEXT\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER_TEXT')]\n","c35ec2ac":"\nclass Kaggle2018(BaseKaggle):\n    \"\"\"\n    Processing and cleaning 2019 Dataset\n    \"\"\"\n    \n    def __init__(self) -> None:\n        super().__init__()\n        self.survey_year = 2018\n        self.df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv', low_memory=False)\n        self.mapping = {\n            'Q2':'Age',\n            'Q1':'Gender',\n            'Q3':'Country',\n            'Q4':'Education',\n            'Q6':'Job Title',\n            'Q24':'Tenure: Years Writing Code',\n            'Q16':'Programming Languages',\n            'Q18':'Recommended Programming Language',\n            'Q13':'IDEs',\n            'Q14':'Hosted Notebooks',\n            'Q21':'Data Visualization Libraries',\n            'Q25':'Tenure: Years Using Machine Learning Methods',\n            'Q19':'Machine Learning Frameworks',\n            'Q10':'Machine Learning Status in Company',\n            'Q11':'Daily activities',\n            'Q9':'Yearly Compensation',\n            'Q15':'Cloud Computing Platforms',\n            'Q27':'Cloud Computing Products',\n            'Q28':'Machine Learning Products',\n            'Q30':'Big Data Products',\n            'Q36':'Data Science Courses',\n            'Q12_MULTIPLE_CHOICE':'Primary Tool to Analyze Data',\n            'Q38':'Media Sources',\n        }\n        self.questions_to_combine = [\n            'Q16', 'Q13', 'Q14', 'Q21', 'Q19', 'Q11', 'Q15', 'Q27', 'Q28', 'Q30', 'Q36', 'Q38'\n        ]\n    \n    @staticmethod\n    def filter_question_columns(columns: List[str], question: str) -> List[str]:\n        \"\"\"\n        Filters only questions that starts with the question_number and do not end with the string _OTHER_TEXT\n        \"\"\"\n        return [col for col in columns if col.startswith(f'{question}_P') and not col.endswith('_OTHER_TEXT')]\n","5f91a42c":"class KaggleCombinedSurvey:\n    \"\"\"\n    This class combines surveys from multiple years into a concatenated dataframe.\n    \"\"\"\n    \n    def __init__(self, surveys: List[Type[BaseKaggle]]) -> None:\n        self.surveys = surveys\n        self._cached_df = None\n        \n    @property\n    def df(self) -> pd.DataFrame:\n        \"\"\"\n        If df was already processed get it from cache, otherwise process it and saves to cache.\n        \"\"\"\n        if isinstance(self._cached_df, type(None)):\n            self._cached_df = self._concatenate()\n        return self._cached_df\n    \n    def _get_surveys_dfs(self) -> List[pd.DataFrame]:\n        \"\"\"\n        Applies the transform method for each survey and return the dfs in a list\n        \"\"\"\n        return [survey().transform() for survey in self.surveys]\n    \n    def _concatenate(self) -> pd.DataFrame:\n        \"\"\"\n        Concatenate survey dataframes into a single dataframe\n        \"\"\"\n        df = pd.concat(self._get_surveys_dfs())\n        df = df.reset_index(drop=True)\n        return df","cc3d1a80":"import plotly.graph_objects as go\nimport plotly.offline as pyo\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom collections import namedtuple \n\n\nMetricData = namedtuple('MetricData', ['subplot_name','trace_name','y_values', 'x_values', \n                                       'subplot_y_position', 'subplot_x_position', 'highlighted_traces']) \n\n\nclass BaseMetric(ABC):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"\n    \n    def __init__(\n        self, \n        survey: KaggleCombinedSurvey, \n        traces_col: str, \n        y_col: str, \n        x_col: str,\n        explode: bool = False\n    ) -> None:\n        \"\"\"\n        traces: the column name we want to creaate traces from\n        y: the column name we will be ploting\n        x: Will always be survey year for our slopegraphs.\n        \"\"\"\n        self.traces_col = traces_col\n        self.y_col = y_col\n        self.x_col = x_col\n        self.survey = survey\n        self.traces = []\n        self.explode = explode\n        self.metric_df = None\n\n    @property\n    def traces_names(self) -> List[str]:\n        \"\"\"\n        Calculate unique values of traces_col\n        \"\"\"\n        return self.metric_df[self.traces_col].cat.categories\n    \n    @property\n    def subplots_names(self) -> List[str]:\n        \"\"\"\n        Calculate unique values of traces_col\n        \"\"\"\n        return self.metric_df[self.y_col].cat.categories\n\n    @property\n    def subplots_qty(self):\n        return len(self.subplots_names)\n    \n    @property\n    def traces_qty(self):\n        return len(self.traces_names)\n    \n    def apply_filter(self, df: pd.DataFrame, column: str, value: str) -> pd.DataFrame:\n        \"\"\"\n        filters data for a single trace\n        \"\"\"\n        return df[df[column] == value] \n\n    @abstractmethod\n    def calculate(self) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        pass\n   \n    def groupby(self, df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:\n        \"\"\"\"\n        Calculates quantity per x, y and traces col\n        \"\"\"\n        return df.groupby(columns, as_index=False)['Dummy'].sum()\n    \n    def join_dataframes(self, df1: pd.DataFrame, df2: pd.DataFrame, on_columns: List[str]) -> pd.DataFrame:\n        return df1.set_index(on_columns).join(df2.set_index(on_columns), rsuffix='_total').reset_index()\n    \n    def to_categorical(self, column: str, categories: Category) -> pd.DataFrame:\n        cat_dtype = pd.api.types.CategoricalDtype(categories=categories.value, ordered=True)\n        self.metric_df[column] = self.metric_df[column].astype(cat_dtype)\n        return self.metric_df\n    \n    def get_df(self):\n        \"\"\"\n        Returns a dataframe with or without lists exploded \n        \"\"\"\n        if self.explode:\n            return self.survey.df.explode(self.traces_col)\n        else:\n            return self.survey.df\n        \n    def get_subplots(self, highlighted_traces: List[str]) -> List[MetricData]:\n        self.apply_categories()\n        self.metric_df['subplot_y_position'] = self.metric_df[self.y_col].cat.codes + 1\n        self.metric_df['subplot_x_position'] = 1       \n\n        for index, row in self.metric_df.iterrows():\n            filtered_df = self.apply_filter(df=self.metric_df, column=self.y_col, value=row[self.y_col])\n            filtered_df = self.apply_filter(df=filtered_df, column=self.traces_col, value=row[self.traces_col])\n            \n            metric_data = MetricData(\n                subplot_name=row[self.y_col],\n                trace_name=row[self.traces_col],\n                y_values=filtered_df['Metric'].values,\n                x_values=filtered_df[self.x_col].values,\n                subplot_y_position=row['subplot_y_position'],\n                subplot_x_position=row['subplot_x_position'],\n                highlighted_traces=row[self.traces_col] in highlighted_traces\n            )\n            self.traces.append(metric_data)","d506f22f":"class PercentageMetric(BaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"   \n    \n    def calculate_average(self, df=pd.DataFrame) -> pd.DataFrame:\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        total = self.groupby(df=df, columns=[self.x_col])\n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        joined[self.traces_col] = 'Average'\n        return joined\n            \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        total = self.groupby(df=df, columns=[self.x_col, self.traces_col]) \n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col, self.traces_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        \n        if add_avg:\n            avg_df = self.calculate_average(df=joined)\n            joined = joined.append(avg_df)\n                \n        self.metric_df = joined\n        return joined\n\n    @abstractmethod\n    def apply_categories(self):\n        pass ","122fb22c":"class GenderProportionMetric(PercentageMetric):\n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Country', y_col='Gender', x_col='Survey Year')\n    \n    def apply_categories(self):\n        self.to_categorical(column='Gender', categories=Category.GENDER)\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)","7a1af864":"class BasePlot(ABC):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"\n    \n    def __init__(\n        self, \n        metric: Type[BaseMetric], \n        title: str, \n        yaxes_title: str, \n        shared_yaxes: bool, \n        yticks: List[float], \n        yticks_template: str, \n        annotation_template: str,\n        x_nticks: int,\n        hover_template: str\n    ) -> None:\n    \n        pyo.init_notebook_mode()\n        self.metric = metric\n        self.yaxes_title = yaxes_title\n        self.shared_yaxes = shared_yaxes\n        self.hover_template = hover_template\n        self.title = title\n        self.yticks = yticks\n        self.yticks_template = yticks_template\n        self.annotation_template = annotation_template\n        self.x_nticks = x_nticks\n        self.figure = go.Figure()\n        self.range = (0, 0)\n\n    def make_subplots(self) -> None:\n        \"\"\"\n        Creates subplots in the figure and add titles\n        \"\"\"\n        self.figure = make_subplots(\n            cols=self.metric.subplots_qty, # our subplots will have the number of unique values for the select column\n            rows=1, # and 1 row\n            subplot_titles=self.metric.subplots_names, # Add titles to subplots\n            specs=[[{'type': 'scatter'}]*self.metric.subplots_qty]*1, # Define chart type for each subplot\n            shared_yaxes=self.shared_yaxes,\n            shared_xaxes=True\n        )\n\n        for idx, subplot_title in enumerate(self.figure['layout']['annotations']):\n            subplot_title['font'] = dict(size=14,color='grey')  # Size and color of subplot title\n            subplot_title['align'] = 'left'\n            subplot_title['xanchor'] = 'left'\n            subplot_title['x'] = 0\n            subplot_title['xref'] = 'x' if idx == 0 else f'x{idx + 1}'\n            \n\n    def update_common_layout(self) -> None:\n        \"\"\"\n        Updates general layout characteristics\n        \"\"\"\n        self.figure.update_layout(\n            showlegend = False,\n            plot_bgcolor='white',\n            title_text = self.title,\n            title_font_color = 'grey',\n            title_font_size = 15,\n            title_x=0,\n            title_y=0.98,\n            margin_t=130,\n            margin_l=0,\n            margin_r=0,\n            height=600,\n            width=800,\n            yaxis_range=self.range\n        )\n\n    def get_yticks_text(self) -> List[str]:\n        \"\"\"\n        Calculates the y_ticks text for charts\n        \"\"\"\n        return [self.yticks_template.format(i) for i in self.yticks]\n    \n    def update_subplots_layout(self) -> None:\n        \"\"\"\n        Updates scatter subplots layout characteristics\n        \"\"\"\n        for subplot_idx in range(self.metric.subplots_qty):\n            self.figure.update_xaxes(\n                type='category',\n                color='lightgrey', # to not draw to much attention to axis\n                showgrid=False, \n                visible=subplot_idx == 0,  # Visible only to the first subplot\n                row=1,\n                nticks=self.x_nticks,               \n                col=subplot_idx + 1 # Subplots start at 1 \n            )\n            self.figure.update_yaxes(\n                showgrid=False,\n                visible=subplot_idx == 0 or not self.shared_yaxes,\n                title=self.yaxes_title if subplot_idx == 0 else None,  # Visible only to the first subplot\n                color='grey',\n                row=1, \n                col=subplot_idx + 1,\n                tickvals=self.yticks, # show ticks ate 25, 50 and 75\n                ticktext=self.get_yticks_text(),\n                tickmode='array',\n                tickfont_color='lightgrey',\n                autorange=True\n            )\n\n    def line_color(self, trace: MetricData) -> str:\n        \"\"\"\n        Sets color to the highlight color or to a tone of grey if not highlighted\n        \"\"\"\n        return self.highlight_color(trace=trace) if trace.highlighted_traces else 'lightslategrey'\n    \n    def highlight_color(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the highlight color\n        \"\"\"\n        return COLORS[trace.trace_name]\n    \n    def line_width(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the line width of traces depending if trace is highlighted or not\n        \"\"\"\n        return 1.6 if trace.highlighted_traces else 0.6\n   \n    def opacity(self, trace: MetricData) -> str:\n        \"\"\"\n        Returns the opacity depending if trace is highlighted or not\n        \"\"\"\n        return 0.8 if trace.highlighted_traces else 0.25\n\n    def add_trace(self, trace: MetricData) -> None:\n        \"\"\"\n        Adds a new trace to a figure\n        \"\"\"\n        self.figure.add_trace(\n            go.Scatter(\n                x=trace.x_values, \n                y=trace.y_values, \n                mode='lines',\n                name=trace.trace_name,\n                hoverinfo='name+text+y',\n                hovertemplate=self.hover_template,\n                text=trace.x_values,\n                line_color=self.line_color(trace=trace),\n                showlegend=False,\n                opacity= self.opacity(trace=trace),\n                line_shape='linear',\n                line_width=self.line_width(trace=trace),\n                connectgaps=True\n            ), \n            trace.subplot_x_position, \n            trace.subplot_y_position\n        )\n    \n    def get_annotation_text(self, trace: MetricData, idx: int) -> str:\n        \"\"\"\n        Calculates the annotation text to be added to the plot\n        \"\"\"\n        if trace.subplot_y_position == 1 and idx == 0:\n            template = '{}<br>' + f'{self.annotation_template}'\n            return template.format(trace.trace_name, trace.y_values[idx])\n        else:\n            return self.annotation_template.format(trace.y_values[idx])\n        \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                # Add left annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=0,\n                    xshift=-3,\n                    xanchor='right',\n                    x=trace.x_values.codes[0], \n                    y=trace.y_values[0],\n                    text=self.get_annotation_text(trace=trace, idx=0),\n                    showarrow=False\n                    )\n                # Add right annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=0,\n                    xshift=3,\n                    xanchor='left',\n                    x=trace.x_values.codes[-1], \n                    y=trace.y_values[-1],\n                    text=self.get_annotation_text(trace=trace, idx=-1),\n                    showarrow=False\n                    )\n\n    def add_subplot_axis_annotation(self) -> None:\n        \"\"\"\n        Add subplot axis annotation\n        \"\"\"\n        self.figure.add_annotation(\n            xref=\"x\", \n            yref=\"paper\",\n            font=dict(\n                size=14,\n                color='lightgrey'\n            ),\n            align='left',\n            x=0, \n            xanchor='left',\n            y=1.05,\n            yanchor='bottom',\n            text=f'{self.metric.y_col}',\n            showarrow=False\n        )\n        \n    def add_source_annotation(self) -> None:\n        \"\"\"\n        Add source annotation\n        \"\"\"\n        self.figure.add_annotation(\n            xref=\"paper\", \n            yref=\"paper\",\n            font=dict(\n                size=11,\n                color='lightgrey'\n            ),\n            align='left',\n            x=-0.07, \n            xanchor='left',\n            y=-0.13,\n            yanchor='bottom',\n            text='<b>Source:<\/b> Kaggle surveys from 2018 to 2020.',\n            showarrow=False\n        )\n        \n    def add_data(self) -> None:\n        \"\"\"\n        Adds a trace to the figure following the same standard for each trace\n        \"\"\"\n        # Add all non-highlighted traces.\n        for trace in self.metric.traces:\n            self.add_trace(trace=trace)\n            self.update_range(data=trace.y_values)\n\n        \n    def update_range(self, data: List[float]) -> None:\n        \"\"\"\n        Updates the range to be 90% of minimum values and 110% of maximum value of all traces\n        \"\"\"\n        if len(data) == 0:\n            return self.range\n        \n        max_range = max(data) * 1.2\n        min_range = min(data) * 0.8\n        self.range = (self.range[0], max_range) if max_range > self.range[1] else self.range \n        self.range = (min_range, self.range[1]) if min_range < self.range[0] else self.range\n        \n    def show(self) -> None:\n        \"\"\"\n        Renders and shows the plot\n        \"\"\"\n        self.make_subplots()\n        self.update_common_layout()\n        self.add_data()\n        self.add_annotations()\n        self.add_subplot_axis_annotation()\n        self.update_subplots_layout()\n        self.add_source_annotation()\n        self.figure.show()","2b40ebf1":"class GenderProportionPlot(BasePlot):\n    pass","47cc8463":"kaggle_combined_survey = KaggleCombinedSurvey(surveys=[Kaggle2018, Kaggle2019, Kaggle2020])","e71956d4":"metric = GenderProportionMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=True)\nmetric.get_subplots(highlighted_traces=['Average'])\n\nGenderProportionPlot(\n    metric=metric,\n    yaxes_title='% of Respondents per Survey Year',\n    shared_yaxes=True,\n    yticks=[20, 40, 60, 80],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=3,\n    title='<b>Gender Gap: Kaggle members are mostly men. <\/b><br>And there are no signs of increase in women participation since 2018.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents per country<\/i><\/span>'\n).show()","38adacd2":"metric = GenderProportionMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['India', 'Brazil', 'Canada'])\n\nGenderProportionPlot(\n    metric=metric, \n    yaxes_title='% of Respondents per Survey Year',\n    shared_yaxes=False,\n    yticks=[5, 10, 15, 20, 75, 80, 85, 90],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=3,\n    title='<b>Gender Gap: India, Brazil and Canada are countries where the gender gap is reducing. <\/b><br>However changes are still very small to make any difference.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents per country<\/i><\/span>'\n).show()","d6971230":"class AverageBaseMetric(BaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"   \n        \n    def groupby(self, df: pd.DataFrame, columns: List[str]) -> pd.DataFrame:\n        \"\"\"\"\n        Calculates quantity per x, y and traces col\n        \"\"\"\n        return df.groupby(columns, as_index=False).agg({'Yearly Compensation Numeric': lambda x: x.mean(skipna=False)})\n    \n    def calculate_average(self, df=pd.DataFrame) -> pd.DataFrame:\n        \"\"\"\n        Calculates the average trace\n        \"\"\"\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        detail['Metric'] = detail['Yearly Compensation Numeric'] \n        detail[self.traces_col] = 'Average'\n        return detail\n            \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        detail['Metric'] = detail['Yearly Compensation Numeric'] \n        if add_avg:\n            avg_df = self.calculate_average(df=detail)\n            detail = detail.append(avg_df)\n                \n        self.metric_df = detail\n        return detail","17417d10":"class CompensationGenderMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Gender', y_col='Education', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Education', categories=Category.EDUCATION)      \n        \nclass CompensationPlot5(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=5,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","6ac8f2c4":"metric = CompensationGenderMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Women', 'Men'])\n\nCompensationPlot5(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[20, 40, 60],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Gender Gap: In 2020 most women saw the pay gap increase regardless of their education.<\/b> '\\\n          '<br>The gap is greater at the extremes: those with either too little or too much education.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents.<\/i><\/span>'\n).show()","b9a49a6e":"class CompensationGenderMetric2(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Gender', y_col='Tenure: Years Writing Code', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Tenure: Years Writing Code', categories=Category.YEARS_WRITING_CODE)      \n        \nclass CompensationPlot6(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=5,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","b87a53a4":"metric = CompensationGenderMetric2(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Women', 'Men'])\n\nCompensationPlot6(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[20, 40, 60],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Gender Gap: comparing men and women by years of experience writing code also shows a gap.<\/b> '\\\n          '<br>Men are probably able to find better jobs and end up working for companies that pay more.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents.<\/i><\/span>'\n).show()","0869f02f":"class CompensationEducationMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Tenure: Years Writing Code', y_col='Education', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Education', categories=Category.EDUCATION)      \n        \nclass CompensationPlot4(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=10 if trace.trace_name == '10+ years' else -25,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","ab061b68":"metric = CompensationEducationMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['< 1 year', '10+ years'])\n\nCompensationPlot4(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90, 120],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Formal education has little impact on salary when compared to experience writing code.<\/b> <br>But dropping off university is better than no university at all.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents. Lines are years of experience writing code.<\/i><\/span>'\n).show()","90109614":"class CompensationJobTitleMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Job Title', y_col='Tenure: Years Writing Code', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Tenure: Years Writing Code', categories=Category.YEARS_WRITING_CODE)\n        ","c4e49991":"class CompensationPlot(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                # Add left annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=8,\n                    yanchor='bottom',\n                    xshift=0,\n                    xanchor='left',\n                    x=trace.x_values.codes[0], \n                    y=trace.y_values[0],\n                    text=self.get_annotation_text(trace=trace, idx=0),\n                    showarrow=False\n                    )\n                # Add right annotation\n                self.figure.add_annotation(\n                    xref=f'x{trace.subplot_y_position}',\n                    yref=f'y{trace.subplot_y_position}',\n                    font=dict(\n                        size=11,\n                        color=self.highlight_color(trace=trace)\n                    ),\n                    opacity=0.8,\n                    align='center',\n                    yshift=-8,\n                    yanchor='top',\n                    xshift=0,\n                    xanchor='right',\n                    x=trace.x_values.codes[-1], \n                    y=trace.y_values[-1],\n                    text=self.get_annotation_text(trace=trace, idx=-1),\n                    showarrow=False\n                    )\n","0e191c50":"metric = CompensationJobTitleMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=True)\nmetric.get_subplots(highlighted_traces=['Average'])\n\nCompensationPlot(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>The average salary increases with experience in writing code for all job titles.<\/b><br>But all salaries have been decreasing since 2018.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents by job title<\/i><\/span>'\n    ).show()","8932acdd":"class CompensationPlot2(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-90 if trace.trace_name == 'Data Scientist' else 45,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","5fe40bc8":"metric = CompensationJobTitleMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Product\/Project Manager', 'Data Scientist'])\n\nCompensationPlot2(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Data Scientists with coding skills benefit more from it than product managers.<\/b>'\\\n          '<br>Data Scientists with little coding experience are amongst the least paid professionals.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents per job title<\/i><\/span>'\n    ).show()","9a9f9624":"class CompensationCountryMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\"   \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Country', y_col='Tenure: Years Using Machine Learning Methods', x_col='Survey Year')\n        \n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Tenure: Years Using Machine Learning Methods', categories=Category.YEARS_USING_ML)\n        ","9258f8e9":"metric = CompensationCountryMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=True)\nmetric.get_subplots(highlighted_traces=['Average'])\n\ncompensation_plot = CompensationPlot(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90, 120],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>Looking at ML experience, average salaries are stable over time.<\/b> <br>However, those with less experience saw a drop in earnings in 2020.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents by country<\/i><\/span>'\n    )\ncompensation_plot.show()","8b52cac0":"class CompensationPlot3(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=10 if trace.trace_name == 'Brazil' else 50,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","c2ec4e91":"metric = CompensationCountryMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Brazil', 'United States'])\n\nCompensationPlot3(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[30, 60, 90, 120],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>The United States is certainly yhe country where ML experience is most valued (or overpriced).<\/b> <br>Other countries, such as Brazil, saw a decrease in compensation in 2020 even for the most experienced.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents<\/i><\/span>'\n    ).show()\n","6fb76d10":"class CompensationProfileMetric(AverageBaseMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Job Title', y_col='Profile', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES)   \n\nclass CompensationPlot5(BasePlot):\n            \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=15 if trace.trace_name == 'Product\/Project Manager' else -55,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","4b27393e":"metric = CompensationProfileMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Data Engineer\/DBA', 'Product\/Project Manager'])\n\nCompensationPlot5(\n    metric=metric,\n    yaxes_title='Average Yearly Compensation (USD)',\n    shared_yaxes=True,\n    yticks=[20, 50, 100, 150],\n    yticks_template='U$ {}k',\n    hover_template='U$ %{y:0.1f}k',\n    annotation_template='U$ {:0.1f}k',\n    x_nticks=1,\n    title='<b>ML Veterans working in Data Engineering and Product Management are in high demand.<\/b>'\\\n          '<br>Salaries for both professions are the ones that increased the most since the first survey.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Average Yearly Compensation in USD of professional respondents.<\/i><\/span>'\n).show()","3a2a8d22":"\nclass RecommendedLanguageMetric(PercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(survey=survey, traces_col='Recommended Programming Language', y_col='Profile', x_col='Survey Year')\n\n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        df = df[df[self.y_col] != 'None']\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        total = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col, self.y_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        \n        if add_avg:\n            avg_df = self.calculate_average(df=joined)\n            joined = joined.append(avg_df)\n                \n        self.metric_df = joined\n        return joined\n\n        \nclass RecommendedLanguagePlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-15 if trace.trace_name == 'SQL' else 10,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","2e44d85d":"metric = RecommendedLanguageMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Python', 'R', 'SQL'])\n\nRecommendedLanguagePlot(\n    metric=metric,\n    yaxes_title='% of Respondents',\n    shared_yaxes=True,\n    yticks=[0, 20, 40, 60, 80],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>R is losing space to Python as the most recommended language to learn first.<\/b> '\\\n          '<br>Those experienced in writing code are the ones that changed their minds the most over the past years.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents that recommend '\\\n          'a programming language <br>for an aspiring data scientist to learn first.<\/i><\/span>'\n).show()","2f7a23a6":"class ListColumnsPercentageMetric(PercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    \n    def calculate(self, add_avg: bool = False) -> pd.DataFrame:\n        \"\"\"\n        Group the data by y_col, perform count and convert it to a list\n        Transforms absolute values into percentages\n        Yeld the metrics for a given trace\n        \"\"\"\n        df = self.get_df()\n        detail = self.groupby(df=df, columns=[self.x_col, self.y_col, self.traces_col])\n        self.explode = False\n        df = self.get_df()\n        total = self.groupby(df=df, columns=[self.x_col, self.y_col])\n        joined = self.join_dataframes(df1=detail, df2=total, on_columns=[self.x_col, self.y_col]) \n        joined['Metric'] = joined['Dummy'] \/ joined['Dummy_total'] * 100  # get percentage\n        \n        if add_avg:\n            avg_df = self.calculate_average(df=joined)\n            joined = joined.append(avg_df)\n                \n        self.metric_df = joined\n        return joined","d99eca55":"class LanguagesMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Programming Languages', \n            y_col='Profile', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) ","05bc37b1":"class LanguagesPlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-15 if trace.trace_name == 'Python' else 10,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","a7ee5597":"metric = LanguagesMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Python', 'C\/C++'])\n\nLanguagesPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[30, 60, 90],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Python is the language most beginners use on a regular basis and adoption is increasing.<\/b> '\\\n          '<br>C\/C++ usage is also increasing for all profiles, but specially for Coders.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents that use a language on a regular basis.<\/i><\/span>'\n).show()","84fbab91":"class PrimaryToolMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Primary Tool to Analyze Data', \n            y_col='Profile', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) \n\nclass PrimaryToolPlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-20 if trace.trace_name == 'Basic statistical software' else 10,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","e4aaa6df":"metric = PrimaryToolMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Basic statistical software', 'Local or hosted development environments'])\n\nPrimaryToolPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[15, 30, 45, 60],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Basic statistical software gaining space in data analysis.<\/b> '\\\n          '<br>And Adoption of local or hosted dev environments is greater with Modern Data Scientists.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and their primary tool used to analyze data.<\/i><\/span>'\n).show()","b4dffca8":"class IDEMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='IDEs', \n            y_col='Profile', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) \n\nclass IDEPlot(BasePlot):\n                \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=10,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","7d103666":"metric = IDEMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Jupyter\/IPython', 'Visual Studio'])\n\nIDEPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[20, 40, 60, 80],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Visual Studio gained adoption with all professional profiles in 2020<\/b> '\\\n          '<br>Overall IDE usage is decreasing with time.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the IDEs they use.<\/i><\/span>'\n).show()","14cdcc94":"class CloudMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Cloud Computing Platforms', \n            y_col='Profile', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) \n\nclass CloudPlot(BasePlot):\n              \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=-60 if trace.trace_name == 'Azure' else 5,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","e49c3158":"metric = CloudMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['None'])\n\nCloudPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[10, 30, 50],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Cloud adoption is increasing amongst Kagglers since 2018!<\/b> '\\\n          '<br>Those who answered None for cloud platform are decreasing consistently.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the cloud platforms they use.<\/i><\/span>'\n).show()","321b14b7":"metric = CloudMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['AWS', 'Azure', 'GCP'])\n\nCloudPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[10, 30, 50],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>The three big providers remain the three big providers, with AWS losing marketshare.<\/b> '\\\n          '<br>GCP usage amongst coders has increased and now is above Azure'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the cloud platforms they use.<\/i><\/span>'\n).show()\n","e79fabc0":"class MLStatusMetric(ListColumnsPercentageMetric):\n    \"\"\"\n    Creates a plotly plot for slopegraphs\n    \"\"\" \n    def __init__(self, survey: KaggleCombinedSurvey) -> None:\n        super().__init__(\n            survey=survey, \n            traces_col='Machine Learning Status in Company', \n            y_col='Profile', \n            x_col='Survey Year', \n            explode=True\n        )\n        \n        \n    def apply_categories(self):\n        self.to_categorical(column='Survey Year', categories=Category.SURVEY_YEAR)\n        self.to_categorical(column='Profile', categories=Category.PROFILES) \n\nclass MLStatusPlot(BasePlot):\n              \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=5 if trace.trace_name == 'Exploring ML' else -30,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","4670d35c":"metric = MLStatusMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Well established ML'])\n\nMLStatusPlot(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[15, 30, 45],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Veterans usually work for companies that have well established models in production<\/b> '\\\n          '<br>Coders usually work for companies that are exploring ML an may one day put a model into production'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the incorporation of ML methods into the business.<\/i><\/span>'\n).show()\n","c27003aa":"class MLStatusPlot2(BasePlot):\n              \n    def add_annotations(self) -> None:\n        \"\"\"\n        Adds annotations to the plot\n        \"\"\"\n        for trace in self.metric.traces:\n            if trace.highlighted_traces:\n                if trace.subplot_y_position == 1:\n                    # Add left annotation\n                    self.figure.add_annotation(\n                        xref=f'x{trace.subplot_y_position}',\n                        yref=f'y{trace.subplot_y_position}',\n                        font=dict(\n                            size=11,\n                            color=self.highlight_color(trace=trace)\n                        ),\n                        opacity=0.8,\n                        align='center',\n                        yshift=65 if trace.trace_name == 'Do not use ML \/ Do not know' else 5,\n                        yanchor='bottom',\n                        xshift=0,\n                        xanchor='left',\n                        x=trace.x_values.codes[0], \n                        y=trace.y_values[0],\n                        text=trace.trace_name,\n                        showarrow=False\n                        )","7971339a":"metric = MLStatusMetric(survey=kaggle_combined_survey)\nmetric.calculate(add_avg=False)\nmetric.get_subplots(highlighted_traces=['Do not use ML \/ Do not know', 'Exploring ML', 'Recently started using ML'])\n\nMLStatusPlot2(\n    metric=metric,\n    yaxes_title='% of Professionals',\n    shared_yaxes=True,\n    yticks=[15, 30, 45],\n    yticks_template='{}%',\n    hover_template='%{y:0.1f}%',\n    annotation_template='{:0.1f}%',\n    x_nticks=1,\n    title='<b>Beginners usually work for companies that do not use machine learning<\/b> '\\\n          '<br>Modern Data Scientists might be driving ML adoption in their workplaces.'\\\n          '<br><span style=\"font-size:14px;color:lightgrey\"><i>Percentage of professional respondents and the incorporation of ML methods into the business.<\/i><\/span>'\n).show()\n","c4610392":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nHere we are seeing how many persons answered None to cloud platforms (meaning that they don't use a cloud platform on a regular basis). And it is decreasing over time! So... Cloud adoption is increasing amongst professionals with <mark>Modern Data Scientists being the ones that use cloud services the most.<\/mark> This is very good news, meaning that everyone is having more access to the best Data Science tools and they are also getting closer to productionizing Data Science!\n<br>\n<div class=\"alert alert-warning\">Now there is one thing I think it's curious... <b>I would expect ML Veterans to have a lot of experience with cloud, but they don't<\/b>. Are they too cool for using the cloud?<\/div>\n<br>\nHey Kaggle! This a good question for next years survey: How many years of experience with cloud platforms?\n<br><br>\nNow how about we have a look at cloud adoption per provider?\n\n<\/div>","9e2205b6":"<h1>Creating Professional Profiles<\/h1>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nFor the rest of this analysis we will create data professional profiles to help us iunderstand some behaviours. To create those profiles I used the definition created by <a href=\"https:\/\/www.kaggle.com\/tkubacka\">Teresa Kubacka<\/a> on the winning submission of the 2019 Kaggle Survey.\n<br><br>\n\nIn her notebook <a href=\"https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\">Who codes what and how long - a story told through a heatmap<\/a> she created professionals categories using the following two questions:\n<li> How long have you been writing code to analyze data (at work or at school)?\n<li> For how many years have you used machine learning methods?\n<br><br>\nThey are as follows:\n<\/div>\n\n\n","d094c714":"<div style=\"font-family:Helvetica Neue;  color:slategray;\">\n<i>Technology Hype Cycle. Adapted from <a href=\"https:\/\/www.gartner.com\/en\/research\/methodologies\/gartner-hype-cycle\">Gartner<\/a><\/i><\/div>\n<br><br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWe can check if this is true by looking at the actual Gartner Analysis for AI in 2020. Look at the Machine Learning position in the chart!\n<\/div>","4c2e7c61":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nI found this chart particularly interesting! The proportion of ML Veterans that work for companies with well established machine learning models in production is huge (and all other categories scored very low). I would say that <mark>ML Veterans are the ones responsible for putting all those models into production, and their experience allows them to do it fast!<\/mark>\n<br><br>\nModern Data Scientists also work for companies with well established models, but there is another aspect here that I woul like to explore. Let's see in the next chart.\n<\/div>","6fd3e601":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWhile most of other profiles remained stable or had a drop in their earnings in 2020, salaries for ML veterans in Data Engineering and Product management continued to increase sharply. This means that those seasoned professionals are being requested to deliver real value to companies, and the problems they are facing have nothing to do with ML algorithms...\n  <br>  \n<div class=\"alert alert-danger\">The real problems in 2020 are:<b><ul>\n<li>how to get and process data for ML<\/li>\n<li>how to manage projects so that they deliver what was promised<\/li><\/ul><\/b>\n<\/div>\n    <br>\n\nNow let's have a look at what they think is the best language for an aspiring data scientist learn first.\n<\/div>","d5654265":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nIn The united States, experienced ML professionals are very well paid (I would probably say that they are overpriced). There is clearly high demand for such professionals and their salaries tend to increase in such situations. <mark>This high demand often also causes data professionals to stay for very short periods (often less than a year) at their jobs, because they receive better offers from other companies.<\/mark> \n<br><br>\nI heard this once, and I think it describes this kind of professional. <b>They are POC engineers - because in such short time before changing jobs the only thing possible to deliver is a proof of concept.<\/b>\n<br><br>\nNow in Brazil, we see a more stable trend over time and over experience, with some decrease in the salary of most professionals in 2020. <mark>There is a currency effect to be considered here, the Brazilian Real lost ~25% of its value against US Dollar in 2020.<\/mark>\n<br><br>\nWe see a bigger drop for experienced professionals, probably due to expensive employees that were laid off due to the pandemic effects on economy and had to find other jobs at a lower salary.\n<\/div>\n","c22eee6b":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n\nNow there is one curious thing about getting into a university. <mark>Those with more than 10 years of experience, but that never attended an university, tend to earn less than those who did at least some college.<\/mark> And there is no noticeable distinction between the salary of experienced people who didn't finish university and those who went all the way up to a doctoral degree.\n<br>\n\n<div class=\"alert alert-success\">So if you are considering between getting more education or getting a job, the answer is crystal clear: <b>get a job!<\/b><\/div>\n<\/div>\n","8db590a5":"**Extra Chart - Added after the competition finished**","58a0f982":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWe can see straight away that on average experienced ML professionals did not notice reduction in their salaries. This is a sign that companies are finding professionals and that the global market is well balanced with offer and demand. <mark>However, different from experience writing code, gaining more ML experience does not increase your compensation so much.<\/mark>\n<br><br>\nNow I want to focus in two countries. The united states because it's the one that pays more, and Brazil, because it's where I came from.<\/div>","fe97f568":"\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n<div class=\"alert alert-info\">That old fight between Python fans and R lovers is in the past.<br><b>Python has consolidated itself as the most recommended language to start with. <\/b>\n<\/div>\n    <br>\n\nAround 80% of Beginners recommend Python as the first language. Because this group has little experience coding, this probably means that Python is also their first language.\n    <br><br>\n    The old ML veterans, that grew up using R for analysis, are also giving a chance to Python and started to recommend it more in the last year. SQL recommendations is consistent across all profiles.\n<br>\n    <div class=\"alert alert-success\">If you want to learn a programming language to do Data Science projects go with Python, you won't regret it. \n    <\/div>\n    <\/div>","537caeb6":"<div style=\"font-family:Helvetica Neue; color:slategray;\">\n<i> What\u2019s New In Gartner\u2019s Hype Cycle For AI, 2020. Source: <a href=\"https:\/\/www.forbes.com\/sites\/louiscolumbus\/2020\/10\/04\/whats-new-in-gartners-hype-cycle-for-ai-2020\/?sh=1b6f0992335c\"> Forbes<\/a><\/i>\n<br><br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nGiven that we are past the peak of inflated expectations, <mark>I would expect salaries to continue decreasing over the next two to five years<\/mark>, until Machine Learning reaches the plateau of productivity.\n<br><br>\nContinuing with the same chart I want to highlight two professions and show how experience writing code impacts their average salary.\n<\/div>","a9a5d2e7":"<h1>How experience using machine learning methods change compensation?<\/h1>\n<br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWe had two questions in the survey asking about respondents experience, one was experienc writing code to analize data. The other one was experience using machine learning methods. I wanted to know how each country values ML experience in terms of salary. This is the chart: <\/div>","c82e1454":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Here we have two Slope Graphs, one for women and another for men. Note that they share the y axis.\n\n<img src=\"https:\/\/i.imgur.com\/19JgPzl.png\" align=\"left\" style=\"width:600px;\"\/>\n    <\/div>","5693af93":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWe can clearly see that experience writing code increases salary for both Product\/Project Managers (PMs) and for Data Scientists. A PM doesn't need to have coding experience and to earn more than a Data Scientist. However, <mark>because writing code is much more important for Data Science than for Product Management, the lines switch places after 5 years of experience and Data Scientists start earning more than PMs.<\/mark>\n<br><br>\nAlso note that in 2020 Data scientists wit less than 3 years of experience are the ones with worse salaries. This might also be an indication of our current position in the Hype Cycle. \n<br>\n<div class=\"alert alert-info\">There are a lot of Data Science begginers available in the market, but companies want to hire experienced data scientists with proven records of delivering business results.<\/div>\n<br>\nThe next charts will be ploted by Machine Learning Experience instead of Years of Experience Writing Code.\n<\/div>","5e09ebc2":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    There is a noticeable increase in C\/C++ usage for all profiles, but specially for Coders, a group tha has already lot's of experience in writing code, this means that <mark>more people coming from a C\/C++ background (and that use it on a daily basis) want to dive in Machine Learning.<\/mark> They are coming to Kaggle to practice their skills and learn from the community.\n\n<br><br>\n    \nNow that we know the languages used on a regular basis for each profile let's have a look at the primary tool they use to analyse data.\n<\/div>\n","1c6133f8":"<img src=\"https:\/\/i.imgur.com\/J9gFPPi.png\" align=\"left\" style=\"width:500px;\"\/>","936db07a":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nJupyter\/IPython is very popular with Beginners and Modern Data Scientists, and less popular with coders and ML Veterans. <mark>Interesting to note that regular use of Ipython is slowly decreasing over time an giving way to IDEs traditionally used by Software Developers.<\/mark> Here it's important to highlight the increase in Visual Studio adoption in 2020. I believe this movement is due to the <a href=\"https:\/\/devblogs.microsoft.com\/python\/notebooks-are-getting-revamped\/\">native integration with notebooks released by mid 2020.<\/a>\n    \n    \n<div class=\"alert alert-info\">Do you wanna try a proper IDE that has all good features such as code-completion, variable inspection, debugging, etc and still work on your loved notebook environment? <b>Then I suggest you follow the lead and give a try to Visual Studio Code.<\/b><\/div>\n<\/div>","a14eb94b":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Unfortunately, there is a considerable gap in professionals participation in Kaggle: 84% of men against 16% of women.\n<br><br>\nAnd what is worse than that is that <mark>women participation did not increase over the past three years<\/mark>. I saw some <a href=\"https:\/\/www.kaggle.com\/chandramanaha\/kyc-know-your-community\">other notebooks<\/a> that showed an increase in female students. Maybe this will cause an increase in data professionals next year, but need a lot more women to close this gap.\n<br>\n<div class=\"alert alert-success\">Maybe Kaggle could host women only competitions, in a bid to attract more of them to the platform (and to Data Science).<\/div>\n<br>\n\nIf we zoom-in using the same chart, we can see which countries are getting more women into Data over the past few years.<\/div>","d4b09960":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n<ul>\n<li>Many Modern Data Scientists also work for companies that started using ML recently. <mark>Are they the ones driving this change?<\/mark><\/li>\n<li>Beginners usually work for companies that either don't use machine learning ore are starting to explore or use it.<\/li>\n<\/ul>\nI have heard this complaint from so many friends that you will probably relate to it as well: <b>Companies don't want to hire Juniors. It is very difficult to get a chance to join the Data Science market without having prior experience.<\/b><br><br>\nWell... Unfortunately this is true and the data confirms it.\n<\/div>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n<div class=\"alert alert-danger\"><ul>\n<li>Companies with well established ML models will only hire ML Veterans.<\/li>\n<li>Companies that are doing ok with ML, will only hire mid level Moder Data Scientists.<\/li>\n<li><b>Only companies that don't use ML or that have started using it recently will hire the beginners.<\/b><\/li>\n<\/ul><\/div>\n<\/div>","53986677":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nNo big surprises in the cloud providers adoption. Google Cloud and Microsoft are increasing marketshare due to discounts and policies for both startups and large corporations. AWS is the biggest provider and usually adopted by business that were \"cloud first\" a few years ago.\n<\/div>","e4f4ae6a":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Ok, there is a huge gap in participation, but the pay gap must be closing, no? We are past 2020 after all.\n<br><br>\nTo analyse the pay gap I decided to break down the average anual compensation of women and men for education levels. I was hoping to see the gap closing with higher degrees. \n    <\/div>","53c86c4a":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    \n<div class=\"alert alert-warning\">\n  <strong>Warning!<\/strong> For all charts in this study we applied a filter to select only Professionals (people who are actively working).\n<\/div>\n<\/div>\n<br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nNon-professionals were defined as those who answered Job Title (Q5) as either: \n<ul>\n<li>Student<\/li>\n<li>Currently not employed<\/li>\n<li>those who didn't answer the question (NaN)<\/li>\n<\/ul>\n<br>\n<h3 style=\"color:red;\">Professionals were defined as everyone but the non-professionals.<\/h3>\n<br>\n<b>Now let's start the fun part!<\/b>\n<\/div>","12dfb20c":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nAnd the truth is that <mark>experience is much more important than formal education.<\/mark> Just look at people with less than 1 year of experience writing code, their <mark>salary did not increase with more education<\/mark>. \n<br>\n\n<div class=\"alert alert-danger\">A PhD with no experience writing code will earn the same as someone fresh from High School without experience.<\/div> \n<\/div>","b5d71358":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Another effect here is due to <b>data science not being on the hype anymore<\/b>. A few years ago it was named the sexiest job of the century and there was a huge hype and inflated expectations around what data science could deliver to companies. Now business are starting to realise what is actually comercially viable. This well known as the technology hype cycle.\n<\/div><br>\n","6567f036":"## Slope Graphs - How to read them?\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Despite the fancy name, Slope Graphs are simple line charts, the ones you are already familiar with. But lets give you an intro to how to read the charts I'm presenting here. <b>I promise you only need to learn it only once!<\/b>\n<br><br>\nLet's look at this example:\n<\/div>\n<img src=\"https:\/\/i.imgur.com\/EX1X0Zi.png\" align=\"left\" style=\"width:600px;\"\/>","341138e8":"<img src=\"https:\/\/specials-images.forbesimg.com\/imageserve\/5f7a42499897d2d0a1c67cf5\/960x0.jpg\" align=\"left\" style=\"width:600px;\"\/>\n","b0aa116a":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    I have to confess that seeing this chart was very disappointing. First <mark>the distance between women and men salaries increased in 2020 for most education levels<\/mark>. The pandemic could partially explain the sharp drop in 2020, with women having to leave their jobs or reduce hours to take care of children at home, for example. However, the gap also slightly increased in 2019, we are in an alarming trend.\n<br><br>\nAnd the worst news is that <mark> even though the gap closes a little bit for Bachelor's and Master's degrees, it increases again for PhDs (Doctoral)!<\/mark> <b>This was something that I did not expect, and I feel sorry for all women that despite all effort  to achieve the highest education title are still treated unequally to men.<\/b>\n<br>\n<div class=\"alert alert-success\"><b>Let's do something to close the gap?<\/b> <br>Give more opportunities for women to ingress data careers even if they don't have all the required experience. And please, pay women the same you pay men for consistent education level and experience.<\/div>\n<br>\n    <\/div>","7e9eef39":"<img src=\"https:\/\/i.imgur.com\/DtArIoA.png\" align=\"left\" style=\"width:600px;\"\/>","7b5ea4d1":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n\n<i>Note: I swear I didn't tamper the results to confirm my bias :D (and you can always check the code as well)<\/i>\n\n<\/div>\n\n<br><br>\n<h1>Why are salaries decreasing?<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nFrom the previouis chart you might have noticed that salaries are dropping (a lot) since 2018. Let's have a closer look into that by breaking the data by Years of Experience Writing Code and Job Title. \n<\/div>","d4517159":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    While most countries increased the gender gap in 2020, <mark>India is the country that is closing the gap faster<\/mark>. But remember that we are still talking about 18.5% women against 80.3% of men in India.\n    <\/div>","af6486e4":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    Each line in this chart represents a country. This information is available in the subtitle and also when you hover your mouse over the data points.\n\n<img src=\"https:\/\/i.imgur.com\/1g0LdeL.png\" align=\"left\" style=\"width:600px;\"\/>\n    <\/div>","7e90ca9a":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nAnd here again I was very surprised with the results. <mark>Who would imagine that in 2020 Modern Data Scientists and Beginners would use Basic Statistical Software (Such as Excel and Google Sheets) as their <b>primary tool<\/b> to analyse data instead of local or hosted development environments.<\/mark>\n\n<br><br>\nI understand that Basic Statistical Software is common ground for everyone, and easy to use. But once I switched to writing code and gained experience, I could never conceive moving back to Spreadsheets as my primary tool. I can't remember of any release or market change in those tools that could justify moving back to them.\n<br><br>\n    \n <div class=\"alert alert-danger\">I'm aware that both Google and Microsoft <a href=\"https:\/\/techcrunch.com\/2020\/06\/30\/google-sheets-will-soon-be-able-to-autocomplete-data-for-you\/\">added some ML features into their products<\/a>...<br> <b>But no... Once you start coding you should never move back to spreadsheets. Or should you?<\/b>\n    <\/div>\n<\/div>","956d8505":"<h1>Education vs Experience<\/h1>\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n    This is one that I love, because I dropped-off university and never got a degree. And I'm always curious to see if someone who got more formal education could be earning more than I do. Are you curious to see the results?\n<\/div>","9c3a025a":"<div style=\"font-family:Helvetica Neue; color:slategray;\">\n<i>Professional subgroups based on the answers for the two questions. <br>Author: <a href=\"https:\/\/www.kaggle.com\/tkubacka\">Teresa Kubacka<\/a> <br>Source: <a href=\"https:\/\/www.kaggle.com\/tkubacka\/a-story-told-through-a-heatmap\">A story told through a heatmap<\/a><\/i>\n<\/div>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\n<br>\nHere I'm just shortening their names for better visualization in the charts:\n<ul>\n<li> <b>Beginners<\/b>: Those with less than 2 years of experience of both coding and ML methods.<\/li>\n<li> <b>Coders<\/b>: Those with lot's of coding experience, but that have started working with machine learning only recently.<\/li>\n<li> <b>ML Veterans<\/b>: Those that have been coding and doing machine learning for a very long time.<\/li>\n<li> <b>Moodern DS<\/b>: They have started their carreers in ML when it started to hype and have enough coding experience to provide measurable value.<\/li>\n<\/ul>\n\nNow lets look at the yearly compensation for each profile!\n    <\/div>","d7c1dcbb":"<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nWe can clearly see that on average all salaries are decreasing since 2018, regardless of the experience level or job title, and that there is a sharper drop in 2020.\n<br><br>\n2020 as we all know was an exceptional year. <mark>By around March 2020 practically all countries went into some sort of lockdown because of COVID-19.<\/mark> As result of that, many employees started working from home and many others were dismissed due to the global economic crisis caused by the pandemic.\n<br>\n<div class=\"alert alert-info\">If there are more professionals available, their market price will drop. <b>Simple economics.<\/b><\/div>\n<\/div>","4739b449":"# One chart, many answers: Kaggle Surveys in Slopes \n\n![](https:\/\/media.giphy.com\/media\/SwyVL4IjvWMfncmM9h\/giphy.gif)\n\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nOn previous surveys, I explored <a href=\"https:\/\/www.kaggle.com\/andresionek\/what-makes-a-kaggler-valuable\">What Makes a Kaggler Valuable<\/a> and a comparison between job posts and survey answers on <a href=\"https:\/\/www.kaggle.com\/andresionek\/is-there-any-job-out-there-kaggle-vs-glassdoor\">Is there any job out there? Kaggle vs Glassdoor<\/a>.\n<br><br>\nThis is the 4th Kaggle Survey, so I decided to explore trends over time. Unfortunately, the 2017 survey was very different from the others, so I decided to exclude it from the analysis. I was left with 2018, 2019 and 2020 surveys and tried to extract as much value as possible. \n<br><br>\n    <b>With one extra challenge: use only one chart type.<\/b>\n<\/div>\n<br>\n<h3>I present to you Kaggle Surveys in Slopes! Enjoy!<\/h3>\n","ff084cb8":"<h1>The Gender Gap<\/h1>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nI wanted to start with something simple and important at the same time. So I questioned myself: over the past three years, did the proportion of Men and Women change? I knew there was a gap, but I would like to see it decreasing (and a lot) in the recent years.\n    <\/div>","acb64361":"<h1>Conclusion<\/h1>\n<br>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\">\nMy main objective here was to study the trends in Data Professionals over three years of Kaggle Surveys using only one type of chart: the slopegraphs. It was very challenging to plot this data in a way that was both informative, useful and beautiful while trying to explore different facets at the same time.\n    <br><br>\nI won't use too much of your time in this conclusion. <b>Just would like to outline that seeing those results made me very sad, especially because of two things:<\/b>\n<\/div>\n<div style=\"font-family:Helvetica Neue; font-size:16px; line-height:1.7; color:slategray;\"> \n <ul>\n     <li>How the gender gap is wide and how we didn't do anything to solve it in the past three years<\/li>\n     <li>How it's difficult for new joiners to enter this very competitive market. <mark>I was lucky to start doing data science in the first hype (around 2015), and now I'm a happy Modern Data Scientist working for a company that already has well established machine learning models in production.<\/mark> But I understand how frustrating it must be to want to work with Data Science, but not being hired just because you lack the experience (that you need to acquire by working with Data Science).<\/li>\n<\/ul>\n<\/div>\n<br><br>\n<h3>Hope you have enjoyed this notebook. And good luck for both women and beginners!<\/h3>","933b7d87":"When breaking down by experience there is still a gap, smaller though.For me this is a symptom that men have better access to better-paying jobs when compared to women. The main reason is that men have privileges in selection processes and interviews. It gives them (including myself) an advantage in getting the best salaries out there.\n\nHow many women were turned down at interviews because they were pregnant? How many women are in leadership positions at your company?"}}