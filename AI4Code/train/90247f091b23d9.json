{"cell_type":{"72428e6a":"code","bbc4e210":"code","a6b6e667":"code","7b725885":"code","e4c8487a":"code","92c34b5c":"code","76dae204":"code","97dd69b5":"code","74432f8f":"code","d90a5c6a":"code","37249ae0":"code","5205da3d":"code","bb708328":"code","42b26a9a":"code","40a0ba62":"code","ec8dbf01":"code","e9193bd6":"code","ec4a3177":"code","472914c2":"code","9179bfa8":"code","2648d83f":"code","971d2e47":"code","aace6638":"code","35ca89f2":"code","30a76e50":"code","13b29911":"code","5a8a2a58":"code","5c618141":"code","b30dc5b2":"code","58a53652":"code","20bab18b":"markdown"},"source":{"72428e6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bbc4e210":"import pandas as pd\nimport numpy as np\nfrom random import *\nfrom collections import *\nfrom statistics import *\nfrom pprint import pprint\n\nfrom collections import defaultdict\n\nimport logging\nimport datetime\n\nimport glob\nimport csv\n\nimport matplotlib as plt\nimport seaborn as sns\nimport plotly\n\nimport calendar\n#calendar.month(2019,2)\n#print(calendar.month(2019,2))\n\npd.set_option('display.max_columns', None)\n\nimport tensorflow as tf\nfrom tensorflow import keras\n\nprint(f'The current time is',datetime.datetime.now())","a6b6e667":"myPath = '\/kaggle\/input\/titanic\/'\n\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntrain_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nsubmission0 = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","7b725885":"#Transform ln\ntrain_data['lnAge'] = np.log(train_data['Age']+1)\ntrain_data['lnSibSp'] = np.log(train_data['SibSp']+1)\ntrain_data['lnParch'] = np.log(train_data['Parch']+1)\ntrain_data['lnFare'] = np.log(train_data['Fare']+1)\n\ntrain_data.head()\n#Target = Survived\n#Pclass\n#Name - Miss vs Mrs.\n#Sex - 1-hot-encode\n#Age - lnAge\n#SibSp - lnSibSp\n#Parch - lnParch\n#Fare - lnFare\n#Embarked  - 1-hot-encode","e4c8487a":"train_data.info()","92c34b5c":"sns.countplot(train_data['Embarked'])","76dae204":"train_data['Embarked'].value_counts()","97dd69b5":"g = sns.FacetGrid(train_data, col='Embarked')\ng.map(sns.countplot,\"Survived\")","74432f8f":"g = sns.FacetGrid(train_data, col='Sex')\ng.map(sns.countplot,\"Survived\")","d90a5c6a":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(sns.kdeplot,\"lnFare\")","37249ae0":"sns.countplot(train_data['Parch'])","5205da3d":"sns.countplot(train_data['Pclass'])","bb708328":"sns.countplot(train_data['SibSp'])","42b26a9a":"sns.lmplot(x='Survived',y='Age',hue='Embarked',data=train_data[train_data['Sex']=='female'])","40a0ba62":"#Scatter\ntrain_data.sample(100).plot.scatter(x='Survived', y='Age')\n","ec8dbf01":"sns.pairplot(train_data[['Survived','lnAge','lnFare','Parch','SibSp']])","e9193bd6":"#Transform ln\ntest_data['lnAge'] = np.log(test_data['Age']+1)\ntest_data['lnSibSp'] = np.log(test_data['SibSp']+1)\ntest_data['lnParch'] = np.log(test_data['Parch']+1)\ntest_data['lnFare'] = np.log(test_data['Fare']+1)\n\ntest_data.head()","ec4a3177":"#Fill in embarked\ntrain_data['Embarked']=train_data['Embarked'].fillna('S')\n\ntrain_data['Embarked'].value_counts()","472914c2":"#Fill in embarked\ntest_data['Embarked']=test_data['Embarked'].fillna('S')\n\ntest_data['Embarked'].value_counts()","9179bfa8":"#One hot encode\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ntrain_data['Sex'] = le.fit_transform(train_data['Sex'])\ntrain_data['Embarked'] = le.fit_transform(train_data['Embarked'])\n\n\ntest_data['Sex'] = le.fit_transform(test_data['Sex'])\ntest_data['Embarked'] = le.fit_transform(test_data['Embarked'])\n","2648d83f":"# Y = 'Survived'\n# x = 'lnAge','lnFare','Parch','SibSp', 'Sex', 'Embarked' by 'PassengerId'\n\nY_train = train_data['Survived']\nx_train = train_data[['PassengerId','Age','lnFare','Parch','SibSp', 'Sex', 'Embarked']]\n\n\nx_test = test_data[['PassengerId','Age','lnFare','Parch','SibSp', 'Sex', 'Embarked']]\n\nimport xgboost as xgb\ngbm = xgb.XGBClassifier(max_depth=3, n_estimators=300, learning_rate=0.05).fit(x_train, Y_train)\npredictions = gbm.predict(x_test)\n\nsubmission2 = pd.DataFrame({ 'PassengerId': x_test['PassengerId'],\n                            'Survived': predictions })\nsubmission2.to_csv(\"submission2.csv\", index=False)\n\n","971d2e47":"print(submission2)","aace6638":"#Use h2o\nimport h2o\nh2o.init()","35ca89f2":"#Change to h2o datasets\n\n\nx_train_h2o = h2o.H2OFrame(train_data[['Survived','PassengerId','Age','lnFare','Parch','SibSp', 'Sex', 'Embarked']])\n\n\n\nx_test_h2o = h2o.H2OFrame(x_test)\n","30a76e50":"print(x_train_h2o)","13b29911":"from h2o.automl import H2OAutoML","5a8a2a58":"aml = H2OAutoML(max_runtime_secs = 60, seed = 1, project_name = \"Titanic_H2O\")\naml.train(y = 'Survived', training_frame = x_train_h2o, leaderboard_frame = x_train_h2o)\naml.leaderboard.head()\npred = aml.predict(x_test_h2o)\npred.head()\nperf = aml.leader.model_performance(x_test_h2o)\nperf","5c618141":"perf = aml.leader.model_performance(x_train_h2o)\nperf","b30dc5b2":"#Submission File\n## Prediction of Model 892 to 1309\n#PassengerID,Survived - starting at \nSurvived= aml.predict(x_test_h2o).as_data_frame()\nprint(Survived.head())\nprint(Survived.info())\nSurvived.to_csv('Survived_h2o.csv')\n","58a53652":"\n## Submission into kaggle\n## Used regression score to change to classification -- >.5 = 1, <.5 = 0\nsub = pd.DataFrame()\n\nsub.to_csv('Titanic_h2oaml.csv', index=False)","20bab18b":"Variable Notes\npclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nsibsp: The dataset defines family relations in this way...\nSibling = brother, sister, stepbrother, stepsister\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\nParent = mother, father\nChild = daughter, son, stepdaughter, stepson\nSome children travelled only with a nanny, therefore parch=0 for them."}}