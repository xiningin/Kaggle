{"cell_type":{"65c1ee59":"code","0cb150a6":"code","18c6987f":"code","1a5dd0cb":"code","e961f56f":"code","6f1c9ab0":"code","d5644453":"code","92c6f75d":"code","47f7d486":"code","9b021246":"code","b962dbef":"code","d7758331":"code","bb5a3794":"code","41d81b7e":"code","9c53a725":"code","27e38d4a":"code","7950a33d":"code","f10fdcfd":"code","7c684afb":"code","640a4cfa":"code","68e6e88c":"code","88353bff":"code","25cd37a3":"code","09535d4e":"code","6f3f3cc7":"code","33ddf66b":"code","e4f1cbce":"code","eecabedb":"code","0e7372cc":"code","9446f355":"code","78bac34c":"code","49db8246":"markdown","0a056644":"markdown","c4e8db63":"markdown","9f961a33":"markdown","0b5ec1e5":"markdown","7b078a7f":"markdown","2382afd7":"markdown","59fbcbac":"markdown","a21d795a":"markdown","2ed5f716":"markdown","6914d467":"markdown","1149a99e":"markdown","5c3ac770":"markdown","092cddb9":"markdown","c61096ed":"markdown","318189d0":"markdown","e8a09ade":"markdown","358dc92c":"markdown","c0877bb1":"markdown","5d9196a7":"markdown"},"source":{"65c1ee59":"import numpy as np \nimport pandas as pd \nimport plotnine \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfrom itertools import cycle\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])\n\n%matplotlib inline","0cb150a6":"df_train = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")\ndf_sell = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\ndf_calendar = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv\")","18c6987f":"print(\"Unit sales of all products, aggregated for each state\", df_train['state_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each store\", df_train['store_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each category\", df_train['cat_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each department\", df_train['dept_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each State and category\", df_train['state_id'].nunique() * df_train['cat_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each State and department\", df_train['state_id'].nunique() * df_train['dept_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each store and category\", df_train['store_id'].nunique() * df_train['cat_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each store and department\", df_train['store_id'].nunique() * df_train['dept_id'].nunique())\nprint(\"Unit sales of all products, aggregated for each  and category\", df_train['dept_id'].nunique() * df_train['cat_id'].nunique())\nprint(\"Unit sales of product x, aggregated for all stores\/states\", df_train['item_id'].nunique())\nprint(\"Unit sales of product x, aggregated for all states\", df_train['item_id'].nunique() * df_train['state_id'].nunique())\nprint(\"Unit sales of product x, aggregated for all stores\", df_train['item_id'].nunique() * df_train['store_id'].nunique())","1a5dd0cb":"df_calendar.head(8)","e961f56f":"df_calendar[df_calendar['event_name_1'].notnull()].head()","6f1c9ab0":"f, ax = plt.subplots(figsize = (16, 12))\nax.grid(axis='x', linestyle='--')\n\nsns.countplot(y = \"event_name_1\", data = df_calendar, ax = ax, palette = \"Greens_d\",edgecolor='black', linewidth=0.8)\nplt.title(\"Count of Event Name 1\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Count\", size = 18)\nplt.ylabel(\"Event Name\", size = 18)","d5644453":"f, ax = plt.subplots(figsize = (14, 8))\nax.grid(axis='x', linestyle='--')\n\nsns.countplot(y = \"event_type_1\", data = df_calendar, ax = ax, palette = \"Greens_d\",edgecolor='black', linewidth=0.8)\nplt.title(\"Count of Event Type 1\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Count\", size = 18)\nplt.ylabel(\"Event Type\", size = 18)","92c6f75d":"df_calendar[df_calendar['event_name_2'].notnull()].head()","47f7d486":"print(\"event_name_2 notnull shape : \", df_calendar[df_calendar['event_name_2'].notnull()].shape)\nprint(\"event_name_1 and 2 notnull shape : \", df_calendar[(df_calendar['event_name_2'].notnull()) & (df_calendar['event_name_1'].notnull())].shape)","9b021246":"df_calendar.loc[(df_calendar['event_name_2'].notnull()) & (df_calendar['event_name_1'].notnull())]","b962dbef":"df_calendar.loc[df_calendar['event_name_2'].notnull()]","d7758331":"f, ax = plt.subplots(figsize = (16, 12))\nax.grid(axis='x', linestyle='--')\n\nsns.countplot(y = \"event_name_2\", data = df_calendar, ax = ax, palette = \"Greens_d\",edgecolor='black', linewidth=0.8)\nplt.title(\"Count of Event Name 2\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Count\", size = 18)\nplt.ylabel(\"Event Name\", size = 18)","bb5a3794":"f, ax = plt.subplots(figsize = (14, 8))\nax.grid(axis='x', linestyle='--')\n\nsns.countplot(y = \"event_type_2\", data = df_calendar, ax = ax, palette = \"Greens_d\",edgecolor='black', linewidth=0.8)\nplt.title(\"Count of Event Type 2\", size = 20)\nplt.xticks(size = 15)\nplt.yticks(size = 15)\nplt.xlabel(\"Count\", size = 18)\nplt.ylabel(\"Event Type\", size = 18)","41d81b7e":"print(df_sell.shape)\ndf_sell.head()","9c53a725":"df_sell[\"sell_price\"].isnull().sum()","27e38d4a":"df_train[\"cat_id\"].unique()","7950a33d":"df_train[\"dept_id\"].unique()","f10fdcfd":"print(df_train.shape)\ndf_train.head()","7c684afb":"sub[\"id\"].unique","640a4cfa":"sub.head()","68e6e88c":"d_cols = [c for c in df_train.columns if 'd_' in c] \n\n# d_\ub85c \uc2dc\uc791\ud558\ub294 columns","88353bff":"len(df_train[\"id\"].unique())","25cd37a3":"df_item = df_train.loc[df_train['id'] == 'FOODS_3_090_CA_3_validation'][d_cols].T # \uc2dc\uacc4\uc5f4 \uc2dc\uac01\ud654\ub97c \uc704\ud574 \"d_\" \ubcc0\uc218\ub4e4\uacfc \ud558\ub098\uc758 \uc81c\ud488 \ubcc0\uc218\ub97c \uace8\ub77c\uc11c transpose\ud574\uc900\ub2e4. \ndf_item = df_item.rename(columns={8412:'FOODS_3_090_CA_3'}) # \uc778\ub371\uc2f1 \ud588\ub358 \ud589\uc758 \ubc88\ud638\ub85c \ub418\uc5b4\uc788\ub294 column name\uc744 \uc81c\ud488\uc758 id\ub85c \ubc14\uafd4\uc900\ub2e4.\ndf_item = df_item.reset_index().rename(columns={'index': 'd'}) # \uc778\ub371\uc2a4 \uc774\ub984\uc744 \"d\"\ub85c \ubc14\uafd4\uc900\ub2e4.\ndf_item = df_item.merge(df_calendar, how='left', validate='1:1') # \uc704\uc5d0\uc11c \ub9cc\ub4e4\uc5b4\uc900 \ub370\uc774\ud130\ud504\ub808\uc784\uacfc calendar \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubcd1\ud569\ud55c\ub2e4. (d\ub85c \ub9cc\ub4e4\uc5b4\uc900 \uceec\ub7fc\uacfc date \uceec\ub7fc\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud568)\ndf_item.set_index('date')['FOODS_3_090_CA_3'].plot(figsize=(15, 5),\n                                                   color=next(color_cycle))\n\nplt.title('FOODS_3_090_CA_3 sales by actual sale dates', size = 20)\nplt.xticks(size = 13)\nplt.yticks(size = 13)\nplt.xlabel(\"Date\", size = 15)\nplt.ylabel(\"Sales\", size = 15)\nplt.show()","09535d4e":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 4))\n\ndf_item.groupby('wday').mean()['FOODS_3_090_CA_3'].plot(kind='line', title='average sale: day of week', color=next(color_cycle), ax=ax1)\n# \uc694\uc77c\uc5d0 \ub530\ub978 \ud310\ub9e4\ub7c9 \ud655\uc778\n\ndf_item.groupby('month').mean()['FOODS_3_090_CA_3'].plot(kind='line', title='average sale: month', color=next(color_cycle), ax=ax2)\n# \uc6d4\ubcc4 \ud310\ub9e4\ub7c9 \ud655\uc778\n\ndf_item.groupby('year').mean()['FOODS_3_090_CA_3'].plot(kind='line', title='average sale: year', color=next(color_cycle), ax=ax3)\n# \uc5f0\ub3c4\ubcc4 \ud310\ub9e4\ub7c9 \ud655\uc778\n\nfig.suptitle('Trends for item: FOODS_3_090_CA_3', size=20, y=1.1)\nplt.tight_layout()\nplt.show()","6f3f3cc7":"item_id_split = df_sell['item_id'].str.split('_', expand=True)\nitem_id_split[0].unique()","33ddf66b":"past_sales = df_train.set_index('id')[d_cols].T.merge(df_calendar.set_index('d')['date'], left_index=True, right_index=True, validate='1:1').set_index('date')\n\nitem_type_list = item_id_split[0].unique()\n\nfor i in item_type_list:\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col].sum(axis=1).plot(figsize=(15, 5), alpha=0.8)\n\nplt.title('Total Sales by Item Type', size = 20)\nplt.xticks(size = 13)\nplt.yticks(size = 13)\nplt.xlabel(\"Date\", size = 15)\nplt.ylabel(\"Sales\", size = 15)\nplt.legend(item_type_list)\nplt.show()\n\n# \uc2dd\ub8cc\ud488\uc758 \ud310\ub9e4\ub7c9\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\uace0, \uadf8 \ub2e4\uc74c\uc774 \uac00\uc815\uc6a9\ud488 \uadf8\ub9ac\uace0 \ucde8\ubbf8\uc6a9\ud488 \uc21c\uc11c\uc778 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.","e4f1cbce":"store_list = df_sell['store_id'].unique()\n\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items].sum(axis=1).rolling(90).mean().plot(figsize=(18, 6), alpha=0.8) # .rolling\uc740 \uc774\ub3d9\ud3c9\uade0\uc744 \uc704\ud55c \ud568\uc218\n\n    \nplt.title('Rolling 90 Day Average Total Sales (10 stores)', size = 20)\nplt.xticks(size = 13)\nplt.yticks(size = 13)\nplt.xlabel(\"Date\", size = 15)\nplt.ylabel(\"Sales\", size = 15)    \nplt.legend(store_list)\nplt.show()","eecabedb":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\ntime_series_data = df_train[time_series_columns]","0e7372cc":"MA_x = 34  #play here\n\nforecast = time_series_data.iloc[:, -MA_x:].copy()\nfor i in range(28):\n    forecast['F'+str(i+1)] = forecast.iloc[:, -MA_x:].mean(axis=1)    \n    \nforecast = forecast[['F'+str(i+1) for i in range(28)]]\nforecast.head(20)","9446f355":"validation_ids = df_train['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]\nids = np.concatenate([validation_ids, evaluation_ids])\npredictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast] * 2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)\npredictions.to_csv('submission.csv', index=False)","78bac34c":"predictions.head()","49db8246":"### \ub9e4\uc7a5 \ubcc4 \ud310\ub9e4\ub7c9\n\n- \ub9e4\uc7a5\uc740 10\uac1c\uc758 unique\ud55c \uac12\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4. \n\n- \uc2dc\uac04\uc5d0 \ub530\ub978 \uc0c1\uc810\ub4e4\uc758 \ud310\ub9e4\ub7c9\uc744 \uc2dc\uac01\ud654 \ud574\ubcf8\ub2e4.","0a056644":"## Submission File\n\n- \uac01 \ud589\uc5d0 \ub300\ud574 \ud310\ub9e4\ub418\ub294 \ud488\ubaa9\uc758 \uc608\uce21\uc77c\uc218 28\uc77c(F1-F28)\uc744 \uc608\uce21\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \n- validation\ud589\uc758 \uacbd\uc6b0 \uc774\ub294 d_1914 - d_1941\uc5d0 \ud574\ub2f9\ud558\uba70, evaluation(test)\ud589\uc758 \uacbd\uc6b0 d_1942 - d_1969\uc5d0 \ud574\ub2f9\ub429\ub2c8\ub2e4.  (\ucc38\uace0: \uacbd\uae30\uac00 \uc885\ub8cc\ub418\uae30 \ud55c \ub2ec \uc804\uc5d0 validation\ud589\uc758 \uac12\uc774 \uc81c\uacf5\ub429\ub2c8\ub2e4)","c4e8db63":"## File 1: \"calendar.csv\"\n\uc81c\ud488\uc774 \ud310\ub9e4 \ub418\ub294 \ub0a0\uc9dc\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c.\n- date: \u201cy-m-d\u201d \ud615\uc2dd\uc758 \ub0a0\uc9dc\n- wm_yr_wk: \ud574\ub2f9 \ub0a0\uc9dc\uac00 \uc18d\ud55c \uc8fc(week)\uc758 ID\n- weekday: \uc694\uc77c\n- wday: \uc694\uc77c\uc758 ID, \ud1a0\uc694\uc77c \ubd80\ud130 \uc2dc\uc791\n- month: \ud574\ub2f9 \ub0a0\uc9dc\uc758 \ub2ec(month)\n- year: \ud574\ub2f9 \ub0a0\uc9dc\uc758 \ub144\ub3c4(year)\n- event_name_1: \ud574\ub2f9 \ub0a0\uc9dc\uc5d0 \uc774\ubca4\ud2b8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, \uc774\ubca4\ud2b8\uc758 \uc774\ub984\n- event_type_1: \ud574\ub2f9 \ub0a0\uc9dc\uc5d0 \uc774\ubca4\ud2b8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, \uc774\ubca4\ud2b8\uc758 \ud0c0\uc785\n- event_name_2: \ud574\ub2f9 \ub0a0\uc9dc\uc5d0 \ub450\ubc88\uc9f8 \uc774\ubca4\ud2b8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, \uc774\ubca4\ud2b8\uc758 \uc774\ub984\n- event_type_2: \ud574\ub2f9 \ub0a0\uc9dc\uc5d0 \ub450\ubc88\uc9f8 \uc774\ubca4\ud2b8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc744 \uacbd\uc6b0, \uc774\ubca4\ud2b8\uc758 \ud0c0\uc785\n- snap_CA, snap_TX, and snap_WI: \ud574\ub2f9 \ub0a0\uc9dc\uc5d0 CA, TX \ub610\ub294 WI\uc758 \uc2a4\ud1a0\uc5b4\uac00 SNAP2 \uad6c\ub9e4\ub97c \ud5c8\uc6a9\ud558\ub294\uc9c0 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0b4\ub294 \uc774\uc9c4 \ubcc0\uc218(0 \ub610\ub294 1). 1\uc740 SNAP \uad6c\ub9e4\uac00 \ud5c8\uc6a9\ub428\uc744 \ub098\ud0c0\ub0b8\ub2e4.","9f961a33":"### \uc81c\ud488\ubcc4\ub85c \uc2dc\uacc4\uc5f4 \uc2dc\uac01\ud654\n\n1. \uc2dc\uac01\ud654\ud560 \uc81c\ud488\uc744 \uc120\ud0dd\n \n2. ID\ub97c \uc778\ub371\uc2a4\ub85c \uc124\uc815, \ud310\ub9e4 \ub370\uc774\ud130 \uc5f4\ub9cc \ubcf4\uad00\n\n3. \uc5f4\ub85c \ubcc0\uc2e0\n\n4. plot \uadf8\ub9ac\uae30 ","0b5ec1e5":"## Benchmarks models\ncode : https:\/\/github.com\/Mcompetitions\/M4-methods\n\n- Naive\n- Seaonal Naive\n- Simple Exponential Smoothing \n- Moving Averages \n- Croston\u2019s method\n- Optimized Croston\u2019s method\n- Syntetos-Boylan Approximation\n- Teunter-Syntetos-Babai method\n- Aggregate-Disaggregate Intermittent Demand Approach\n- Intermittent Multiple Aggregation Prediction Algorithm\n- Exponential Smoothing\n- Exponential Smoothing with eXplanatory variables \n- AutoRegressive Integrated Moving Average\n- AutoRegressive Integrated Moving Average with eXplanatory variables \n- Multi-Layer Perceptron\n- Random Forest\n- Global Multi-Layer Perceptron\n- Global Random Forest (GRF)","7b078a7f":"## File 3: \u201csales_train.csv\u201d\n\n\uc81c\ud488\uacfc \ub9e4\uc7a5\uc5d0 \ub530\ub978 \uacfc\uac70 \uc77c\uc77c \ud310\ub9e4 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c. \n- item_id: \uc81c\ud488\uc758 ID.\n- dept_id: \uc81c\ud488\uc774 \uc18d\ud55c \ubd80\uc11c\uc758 ID.(cat_id\uc758 \ud558\uc704 \uce74\ud14c\uace0\ub9ac)\n- cat_id: \uc81c\ud488\uc774 \uc18d\ud55c \uce74\ud14c\uace0\ub9ac\uc758 ID.\n- store_id: \uc81c\ud488\uc774 \ud310\ub9e4\ub418\ub294 \ub9e4\uc7a5\uc758 ID\n- state_id: \ub9e4\uc7a5\uc774 \uc18d\ud574\uc788\ub294 \uc8fc(state)\n- d_1, d_2, \u2026, d_i, \u2026 d_1941: i\uc77c\uc5d0 \ud310\ub9e4\ub41c \ub2e8\uc704 \uc218. (2011-01-29\uc77c\ubd80\ud130 \uc2dc\uc791)","2382afd7":"## \ub370\uc774\ud130\ub97c \uc774\ud574\ud558\uae30 \uc27d\uac8c \uadf8\ub9bc\uc73c\ub85c \ud655\uc778","59fbcbac":"- calendar.csv - \uc81c\ud488\uc774 \ud310\ub9e4 \ub418\ub294 \ub0a0\uc9dc\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c.\n- sales_train_validation.csv - \uc81c\ud488\uacfc \ub9e4\uc7a5\uc5d0 \ub530\ub978 \uacfc\uac70 \uc77c\uc77c \ud310\ub9e4 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c. [d_1 - d_1913]\n- sample_submission.csv - submission \ud615\uc2dd \ud30c\uc77c\n- sell_prices.csv - \ub9e4\uc7a5 \ubc0f \ub0a0\uc9dc\ubcc4\ub85c \ud310\ub9e4\ub418\ub294 \uc81c\ud488\uc758 \uac00\uaca9\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c.\n- sales_train_evaluation.csv - **Available once month before competition deadline**. Will include sales [d_1 - d_1941]","a21d795a":"# EDA for Time Series","2ed5f716":"## File 2: \"sell_prices.csv\"\n\ub9e4\uc7a5 \ubc0f \ub0a0\uc9dc\ubcc4\ub85c \ud310\ub9e4\ub418\ub294 \uc81c\ud488\uc758 \uac00\uaca9\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c.\n- store_id: \uc81c\ud488\uc774 \ud310\ub9e4\ub418\ub294 \ub9e4\uc7a5\uc758 ID\n- item_id: \uc81c\ud488\uc758 ID\n- wm_yr_wk: \ud574\ub2f9 \uc8fc(week)\uc758 ID\n- sell_price: \uc9c0\uc815\ub41c \uc8fc(week)\/\ub9e4\uc7a5\uc758 \uc81c\ud488 \uac00\uaca9. \uac00\uaca9\uc740 \uc8fc(week) \ubcc4\ub85c \uc81c\uacf5\ub41c\ub2e4(\uc77c\uc8fc\uc77c\uc758 \ud3c9\uade0). \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0 \uc774\ub294 \ud574\ub2f9 \uc81c\ud488\uc774 \uac80\uc0ac\ub41c \uc8fc \uc911\uc5d0 \ud310\ub9e4\ub418\uc9c0 \uc54a\uc558\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. \n  (\uc8fc \ub2e8\uc704\ub85c \uac00\uaca9\uc774 \uc77c\uc815\ud558\uc9c0\ub9cc \uc2dc\uac04\uc774 \uc9c0\ub0a8\uc5d0 \ub530\ub77c \ubcc0\ud560 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud55c\ub2e4.)","6914d467":"### \uc704\uc758 \ucf54\ub4dc\ub4e4\uc744 \ubcf4\uba74 \ub450\ubc88\uc9f8 \uc774\ubca4\ud2b8\uc5d0 \ud574\ub2f9\ub418\ub294 \uad00\uce21\uce58\ub294 \uc804\ubd80 \uccab\ubc88\uc9f8 \uc774\ubca4\ud2b8\uac00 \uc120\ud589\ub418\uc5b4 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","1149a99e":"## Before competitions\n- M4 : https:\/\/github.com\/Mcompetitions\/M4-methods\n- Discussion by RDizzl3 : https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/133469","5c3ac770":"# Introduction\n## Dataset","092cddb9":"# M5 Forecasting \n## Estimate the unit sales of Walmart retail goods\n- All information is contained in the link below.\n- Link : https:\/\/mofc.unic.ac.cy\/m5-competition\/\n- \ucc38\uace0 \ucf54\ub4dc \ucd9c\ucc98 \n- https:\/\/www.kaggle.com\/sidharthkumar\/ma-model-new-baseline-0-86331\n- https:\/\/www.kaggle.com\/chocozzz\/the-m5-competition-guidelines\n\n\n### \ubcf8 \ucee4\ub110\uc740 M5 competition\uc744 \ucc98\uc74c \uc811\ud558\ub294 Korean Starter\ub4e4\uc744 \uc704\ud55c \ucee4\ub110\uc785\ub2c8\ub2e4.\n### \ub300\ubd80\ubd84\uc758 \ub0b4\uc6a9\uc740 \uc774\ubbf8 \uacf5\uac1c\ub418\uc5b4 \uc788\ub294 \ub178\ud2b8\ubd81\uc758 \ub0b4\uc6a9\uc744 \uc774\ud574\ud558\uae30 \uc27d\uac8c \ud55c\uae00\ub85c \ubc14\uafd4\ub193\uc740 \ucee4\ub110\uc785\ub2c8\ub2e4 \ucc38\uace0 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4!\n\n### *\ub370\uc774\ud130\ub97c \uc774\ud574\ud568\uc5d0 \uc788\uc5b4\uc11c \ub3c4\uc6c0\uc744 \uc8fc\uc2e0 \uae40\ud604\uc6b0\ub2d8 \uc88b\uc740\ucee4\ub110 \uac10\uc0ac\ud569\ub2c8\ub2e4! :)*","c61096ed":"# Simple MA Model\n\n- MA\ub780? \n- \uc77c\ubcc0\ub7c9 \uc815\uc0c1 \uc2dc\uacc4\uc5f4 \ubaa8\ud615\uc73c\ub85c\uc11c \uc774\ub3d9\ud3c9\uade0 \ubaa8\ud615\uc774\ub77c\uace0 \ubd80\ub978\ub2e4. (Moving Average model)\n- q\ucc28 MA(Moving Average) \ubaa8\ud615 MA(q)\ub294 \ud655\ub960\uacfc\uc815\uc758 \ud604\uc7ac \uac12 Yt\uc774 \ubc31\uc0c9 \uc7a1\uc74c\uc758 \ud604\uc7ac \uac12 \u03f5t\ubd80\ud130 q-\uc2dc\uac04 \uc9c0\uc5f0\ub41c \u03f5t\u2212q\uae4c\uc9c0 q+1\uac1c \ud56d\uc758 \uc120\ud615 \uac00\uc911\ud569\uc778 \ud655\ub960\uacfc\uc815 \ubaa8\ud615\uc774\ub2e4. MA(q)\ub77c\uace0 \uc4f4\ub2e4.\n\n### Yt=\u03f5t+\u03b81\u03f5t\u22121+\u03b82\u03f5t\u22122+\u22ef+\u03b8q\u03f5t\u2212q\n\n- \uac00\uc7a5 \uac04\ub2e8\ud55c \ud615\ud0dc\ub85c\ub294 \ubc14\ub85c \uc9c1\uc804 \ub370\uc774\ud130\uac00 \ub2e4\uc74c \ub370\uc774\ud130\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4\uace0 \uac00\uc815\ud55c MA(1)\ubaa8\ud615\uc774\ub2e4.\n- MA(2)\ubaa8\ud615\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ubc31\uc0c9 \uc7a1\uc74c\uc758 \ud604\uc7ac \uac12\uacfc 1-\uc2dc\uac04 \uc9c0\uc5f0\ub41c \uacfc\uac70 \uac12, \uadf8\ub9ac\uace0 2-\uc2dc\uac04 \uc9c0\uc5f0\ub41c \uacfc\uac70 \uac12\uc758 \uc120\ud615 \uac00\uc911\ud569\uc73c\ub85c \ub098\ud0c0\ub09c\ub2e4.\n- [\ucc38\uace0: (MA)\ubaa8\ud615 - \ub370\uc774\ud130\uc0ac\uc774\uc5b8\uc2a4 \uc2a4\ucfe8](https:\/\/datascienceschool.net\/view-notebook\/f1b89d145ef14bca8e5b6f1800985d52\/)","318189d0":"### \uc2dc\uac04 \ubcc0\uc218\uc5d0 \ub530\ub978 \ud310\ub9e4\ub7c9\n\n- \uc694\uc77c\n\n- \uc6d4\n\n- \uc5f0\ub3c4","e8a09ade":"![image.png](https:\/\/github.com\/choco9966\/Kaggle\/blob\/master\/M5%20Forecasting\/image\/overview.PNG?raw=true)\n\n![image.png](https:\/\/github.com\/choco9966\/Kaggle\/blob\/master\/M5%20Forecasting\/image\/aggtable.PNG?raw=true)","358dc92c":"### Event information \n\n- \uc774\ubca4\ud2b8 1, 2\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc2dc\uac01\ud654 \ud574\ubd05\ub2c8\ub2e4. \n- Countplot\uc744 \uc774\uc6a9\ud558\uc5ec \uc5b4\ub5a4 \uc774\ubca4\ud2b8\uac00 \uc5bc\ub9c8\ub098 \uc788\ub294\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.","c0877bb1":"### \uc81c\ud488 \uc720\ud615\uc5d0 \ub530\ub978 \ud310\ub9e4\ub7c9 \ud569\uacc4\n\n- Hobbies (\ucde8\ubbf8\uc6a9\ud488)\n \n- Household (\uac00\uc815\uc6a9\ud488)\n\n- Foods (\uc2dd\ub8cc\ud488)","5d9196a7":"![](https:\/\/media.foxbusiness.com\/BrightCove\/854081161001\/201906\/438\/854081161001_6044984334001_6044980817001-vs.jpg)"}}