{"cell_type":{"d64f06bd":"code","fe2ef167":"code","c671e36b":"code","58ed1b4b":"code","bd15c5d8":"code","1e5d9a4b":"code","c153cc07":"code","4770c3bc":"markdown","60e000f0":"markdown","12c9e477":"markdown","fbf33fd7":"markdown"},"source":{"d64f06bd":"!pip install git+https:\/\/github.com\/Desklop\/RNNoise_Wrapper","fe2ef167":"import librosa\nimport librosa.display as display\nimport pandas as pd\nimport soundfile as sf\n\nfrom IPython.display import Audio\nfrom pathlib import Path\n\nimport IPython\nimport matplotlib.pyplot as plt\nimport scipy.signal","c671e36b":"noise_path='..\/input\/birdsong-resampled-train-audio-00\/aldfly\/XC179417.wav'\nnoise_clip , sr = librosa.load(noise_path, sr=32000)\n\nfig, ax = plt.subplots(figsize=(20,3))\nax.plot(noise_clip)\nax.title.set_text('Orginal')\nIPython.display.Audio(data=noise_clip, rate=sr)","58ed1b4b":"denoiser = RNNoise()\n\naudio = denoiser.read_wav('..\/input\/birdsong-resampled-train-audio-00\/aldfly\/XC179417.wav')\nfiltered_audio = denoiser.filter(audio)\ndenoiser.write_wav('test_denoised.wav', filtered_audio)","bd15c5d8":"noise_path='.\/test_denoised.wav'\nnoise_clip , sr = librosa.load(noise_path, sr=32000)\n\nfig, ax = plt.subplots(figsize=(20,3))\nax.plot(noise_clip)\nax.title.set_text('Denoised')\nIPython.display.Audio(data=noise_clip, rate=sr)","1e5d9a4b":"audio = denoiser.read_wav('..\/input\/birdsong-resampled-train-audio-00\/aldfly\/XC179417.wav')\n\nfiltered_audio = b''\nbuffer_size_ms = 10\n\nfor i in range(buffer_size_ms, len(audio), buffer_size_ms):\n    filtered_audio += denoiser.filter(audio[i-buffer_size_ms:i].raw_data, sample_rate=audio.frame_rate)\nif len(audio) % buffer_size_ms != 0:\n    filtered_audio += denoiser.filter(audio[len(audio)-(len(audio)%buffer_size_ms):].raw_data, sample_rate=audio.frame_rate)\n\ndenoiser.write_wav('test_denoised_f.wav', filtered_audio, sample_rate=audio.frame_rate)","c153cc07":"noise_path='.\/test_denoised_f.wav'\nnoise_clip , sr = librosa.load(noise_path, sr=32000)\n\nfig, ax = plt.subplots(figsize=(20,3))\nax.plot(noise_clip)\nax.title.set_text('Denoised - Filtered')\nIPython.display.Audio(data=noise_clip, rate=sr)","4770c3bc":"**Orginal**","60e000f0":"**filtered_audio**\n\nNoise reduction in streaming audio (the buffer size is 10 milliseconds, i.e. 1 frame) (the example uses stream simulation by processing the test.wav audio recording in parts and saving the result as test_denoised_f. wav)","12c9e477":"**denoiser**","fbf33fd7":"RNNoise is a recurrent neural network with GRU cells designed to suppress noise in real-time audio recording.\n\nRNNoise_Wrapper simplifies RNNoise: relieves the user from having to extract the frames\/images from audio, removes restrictions on the parameters of the processed wav audio, hides all nuances of operation with library in C and, if using Linux or Mac, eliminating the need to manually compile RNNoise.\nMany thanks : https:\/\/github.com\/Desklop\/RNNoise_Wrapper"}}