{"cell_type":{"7e112219":"code","3686b9c5":"code","46c74f38":"code","9f35fa68":"code","fbbe6ac3":"code","667ac400":"code","0659b56c":"code","52d8110e":"code","cc001eba":"code","56c4a635":"code","6df4023b":"code","75e87d2d":"code","0da295ce":"code","59a0540b":"code","065f3ab6":"code","bd7145c6":"code","85927d45":"code","c78a6d32":"code","6a9189f6":"code","0582fa3c":"code","149d73dc":"code","35aaf68b":"code","35634394":"code","72332f91":"code","f1fb8ae0":"code","b477b3c7":"code","c3b663d2":"code","8b479c6f":"code","356b084b":"code","3739e09c":"code","f080fb67":"markdown","47a3f148":"markdown","a6af8690":"markdown","daaefdc1":"markdown","059f525d":"markdown","a2ef2e2d":"markdown","03f56435":"markdown","a1ee7cfc":"markdown","7b796f4b":"markdown","167be49d":"markdown","a47795ac":"markdown"},"source":{"7e112219":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import pyplot as plt","3686b9c5":"df = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/train.csv', index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/test.csv', index_col=0)","46c74f38":"df.head()","9f35fa68":"df.info()","fbbe6ac3":"df.drop(['Soil_Type15', 'Soil_Type7'], axis=1, inplace=True)\ndf_test.drop(['Soil_Type15', 'Soil_Type7'], axis=1, inplace=True)","667ac400":"df['Cover_Type'].value_counts()\ndf.drop(df[df['Cover_Type'] == 5].index, axis=0, inplace=True)","0659b56c":"import gc\ndef reduce_mem_usage(df, int_cast=True, obj_to_category=False, subset=None):\n\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2;\n    gc.collect()\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    cols = subset if subset is not None else df.columns.tolist()\n\n    for col in cols:\n        col_type = df[col].dtype\n\n        if col_type != object and col_type.name != 'category' and 'datetime' not in col_type.name:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            # test if column can be converted to an integer\n            treat_as_int = str(col_type)[:3] == 'int'\n\n            if treat_as_int:\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.uint8).min and c_max < np.iinfo(np.uint8).max:\n                    df[col] = df[col].astype(np.uint8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.uint16).min and c_max < np.iinfo(np.uint16).max:\n                    df[col] = df[col].astype(np.uint16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.uint32).min and c_max < np.iinfo(np.uint32).max:\n                    df[col] = df[col].astype(np.uint32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n                elif c_min > np.iinfo(np.uint64).min and c_max < np.iinfo(np.uint64).max:\n                    df[col] = df[col].astype(np.uint64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        elif 'datetime' not in col_type.name and obj_to_category:\n            df[col] = df[col].astype('category')\n    gc.collect()\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    print('Memory usage after optimization is: {:.3f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","52d8110e":"df = reduce_mem_usage(df)","cc001eba":"df.info()","56c4a635":"fig, axes = plt.subplots(5, 2, figsize=(14,20))\nsns.kdeplot(data=df, x='Elevation', hue='Cover_Type', ax=axes[0,0])\nsns.kdeplot(data=df, x='Aspect', hue='Cover_Type', ax=axes[0,1])\nsns.kdeplot(data=df, x='Slope', hue='Cover_Type', ax=axes[1,0])\nsns.kdeplot(data=df, x='Horizontal_Distance_To_Hydrology', hue='Cover_Type', ax=axes[1,1])\nsns.kdeplot(data=df, x='Vertical_Distance_To_Hydrology', hue='Cover_Type', ax=axes[2,0])\nsns.kdeplot(data=df, x='Horizontal_Distance_To_Roadways', hue='Cover_Type', ax=axes[2,1])\nsns.kdeplot(data=df, x='Hillshade_9am', hue='Cover_Type', ax=axes[3,0])\nsns.kdeplot(data=df, x='Hillshade_Noon', hue='Cover_Type', ax=axes[3,1])\nsns.kdeplot(data=df, x='Hillshade_3pm', hue='Cover_Type', ax=axes[4,0])\nsns.kdeplot(data=df, x='Horizontal_Distance_To_Fire_Points', hue='Cover_Type', ax=axes[4,1])\nplt.tight_layout()","6df4023b":"Wilderness_cols = [col for col in df.columns if 'Wilderness' in col]\nWilderness=df[Wilderness_cols]\nargmax_cols = Wilderness.columns[np.argmax(Wilderness.values, axis=1)]\ndf['Wilderness'] = argmax_cols\ndf['Wilderness'] = df['Wilderness'].astype('category')\ndf.drop(Wilderness_cols, axis=1, inplace=True)\n\nWilderness=df_test[Wilderness_cols]\nargmax_cols = Wilderness.columns[np.argmax(Wilderness.values, axis=1)]\ndf_test['Wilderness'] = argmax_cols\ndf_test['Wilderness'] = df_test['Wilderness'].astype('category')\ndf_test.drop(Wilderness_cols, axis=1, inplace=True)","75e87d2d":"Soil_cols = [col for col in df.columns if 'Soil_Type' in col]\nSoil=df[Soil_cols]\nargmax_cols = Soil.columns[np.argmax(Soil.values, axis=1)]\ndf['Soil_Type'] = argmax_cols\ndf['Soil_Type'] = df['Soil_Type'].str.replace('Soil_Type', '')\ndf['Soil_Type'] = df['Soil_Type'].astype('category')\ndf.drop(Soil_cols, axis=1, inplace=True)\n\n\nSoil=df_test[Soil_cols]\nargmax_cols = Soil.columns[np.argmax(Soil.values, axis=1)]\ndf_test['Soil_Type'] = argmax_cols\ndf_test['Soil_Type'] = df_test['Soil_Type'].str.replace('Soil_Type', '')\ndf_test['Soil_Type'] = df_test['Soil_Type'].astype('category')\ndf_test.drop(Soil_cols, axis=1, inplace=True)","0da295ce":"x, y = df.drop('Cover_Type', axis=1), df['Cover_Type']\ndel df","59a0540b":"def_cols = x.columns","065f3ab6":"x = x.reset_index()","bd7145c6":"import featuretools as ft\n\nes = ft.EntitySet(id = 'trees')\nes.add_dataframe(dataframe=x.iloc[:int(len(x)\/2), :], dataframe_name='trees', make_index=False, index='Id')\nfirst_x, feature_defs = ft.dfs(entityset = es, target_dataframe_name = 'trees', trans_primitives = ['add_numeric', 'multiply_numeric'], max_depth=1, chunk_size=20000, n_jobs=-1, verbose=True)\n\nfirst_x = reduce_mem_usage(first_x)\n","85927d45":"es = ft.EntitySet(id = 'trees')\nes.add_dataframe(dataframe=x.iloc[int(len(x)\/2):, :], dataframe_name='trees', make_index=False, index='Id')\nsecond_x, feature_defs = ft.dfs(entityset = es, target_dataframe_name = 'trees', trans_primitives = ['add_numeric', 'multiply_numeric'], max_depth=1, chunk_size=20000, n_jobs=-1, verbose=True)\n\nsecond_x = reduce_mem_usage(second_x)","c78a6d32":"del x\ngc.collect()","6a9189f6":"x = pd.concat([first_x, second_x], axis=0)","0582fa3c":"cor_matrix = x.corr().abs()\nupper_tri = cor_matrix.where(np.triu(np.ones(cor_matrix.shape),k=1).astype(np.bool))\nto_drop = [column for column in upper_tri.columns if any(upper_tri[column] > 0.95)]\nx = x.drop(set(to_drop) - set(def_cols), axis=1)","149d73dc":"x.info()","35aaf68b":"x.head()","35634394":"es = ft.EntitySet(id = 'trees')\nes.add_dataframe(dataframe=df_test, dataframe_name='trees', make_index=False, index='Id')\ntest, feature_defs = ft.dfs(entityset = es, target_dataframe_name = 'trees', trans_primitives = ['add_numeric', 'multiply_numeric'], max_depth=1, chunk_size=20000, n_jobs=-1, verbose=True)\n\ntest = reduce_mem_usage(test)","72332f91":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y)\ncat_cols_boost = x_train.select_dtypes(include='category').columns.values\n\ndel x, y","f1fb8ae0":"from catboost import CatBoostClassifier, Pool\ncat = CatBoostClassifier(task_type='GPU', early_stopping_rounds=75, iterations=1000)\neval_dataset = Pool(x_test, y_test, cat_cols_boost)","b477b3c7":"cat.fit(x_train, y_train, cat_cols_boost, eval_set=eval_dataset)","c3b663d2":"print(cat.score(x_test, y_test))","8b479c6f":"from sklearn.metrics import confusion_matrix, classification_report\npreds = cat.predict(x_test)\nprint(classification_report(y_test, preds))","356b084b":"print(confusion_matrix(y_test, preds))","3739e09c":"test_preds = cat.predict(test)\nsubmit = pd.read_csv('\/kaggle\/input\/tabular-playground-series-dec-2021\/sample_submission.csv', index_col=0)\nsubmit['Cover_Type'] = test_preds\nsubmit.to_csv('submit.csv')","f080fb67":"# Featuretools\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxASEBUQEREVFhUWFxgXGBgYFRUVGBcWGBcXFhkTFhUYHiggGholGxYVITEhJiorLy4uFx8zODMsNygtLisBCgoKDg0OGxAQGy8lHyUtNSstLS0tLS0uLS8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAGcB5gMBIgACEQEDEQH\/xAAbAAEAAgMBAQAAAAAAAAAAAAAABQYCAwQBB\/\/EAEIQAAICAQIEBAIGCAQEBwEAAAECAAMRBBIFBiExEyJBUTJhFCNxgZHRBxZCUlOSobEVJENyM2KCwSU0RGSy8PEX\/8QAGgEBAAIDAQAAAAAAAAAAAAAAAAMEAQIFBv\/EACwRAAICAQIEBAYDAQAAAAAAAAABAhEDITEEEkFhFFFxkQUTIoGh8DLB0bH\/2gAMAwEAAhEDEQA\/APuMREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBETzMA9ieRmAexEQBERAEREAREQBERAEREAREQBETnGprLmsOu8DJXI3AHsSO+IB0REQBERAEREAREQBETi4prRTWbCM9gB7k9prOahFylsjMYuTpHbPJCrbriM7Khn5n840vE7Vs8LUKqkgkMp6dO+cyuuLhatSSfVqkSvBLWmnXkybicf+IUfxU\/mE6VbIyO0sRnGWzTInFrdGcRE2MCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCIiAIiIAiIgCeGDK\/wAx8VKfVIfMR1PsPzkWbNHFBzkSYscskuWJ0cT47XVlV8ze3oPtMreq43e\/7ZA9l6Tgiedz8dlyvel5L9s7mHg8eNbW+\/7Rt+lW5z4j\/wAxnbouO31nq24ezfnI2JXjmyRdxkyeWHHJU0vYv\/Dtclybl+8eoM7ZReA6s13L7N5T9\/Y\/jLyJ6Tg+J+fjt7rf97nB4rB8mdLboexES2VhERAEREAruu504fS16W6hUagqtgII8zruVV6eYke0z5c5u0Ou3DS3B2X4lIKsB7lW64lL5a4XRdzJxS22tXaoUGvcMhS1YBYA9M4A6zLmahKOZeG2UqFa9LUt2jG5QpwWA\/8AvlEAtXHOfOG6Sw036gCwd0UM7L\/uCg4knwLjum1tXjaW1bEzgkdwfYjuDKrbzLpxq76dBw1tVcrf5iyta0UPjGHtfG5sDH3SH\/RQ7f4rxYGk0ZaljTlSEYiwn4enXv094BbNRz\/wxEd31IGyxqSNrbjYnxKqYyce4kpy9zDpddWbdLatig4OOhU98Mp6gygfog4VQ1\/EtS1ataNbdWGIyVTO7C57ZJnVydQtPMPE6qwFQ11WFR0G44yQPTufxgFm49zxw7R2eDqNQBZjJVQzlR7sFBwPtlU5a19Oo5m1F1FivW2irKspyD1Se\/od01do12stUNdZq7FZmAJCrjCdew6mYcs8Np0\/M+sSisIp0qvtXoNzMhJA9MmAWrjfP3DdJYabtQPEX4kVWdl\/3BQcSW4JxvTayoXaa1bEJxkeh9iO4MqX6y6f6TqKuHcMbU2K5GosrWqtPF7FWscjc3T+kjP0TgnV8VQ0mjNynwsqfDZlbIBXp+EAsmt\/SPwmq40vql3KdrEKzKp7YZwMDrLVW4YBgcggEEeoPUGfJOEPbwOl9Nr9D42jNjH6VWq2eVz\/AK6Hr98+raC+uypLKiDWyqyEdihAKkfLGIB0xEx3D3gGUTHcPeYWWqoLMwAHUkkAAe5MA2yF5p\/8v\/1r\/eTCsCMjqJq1OnWxSjjIMh4iDyYpQXVUb4p8k1J9DOvsPsEhuIqG1lSnqCjgj5EGZDgIHQX3Aeg3dp0aDhKVMX3MzEY3MckD5SvOObKlGUKVpt3e3atSWLx47albprbzVEfxjSaREK4RHI8pwSftwJv0nG9OqKhfsoHwn0kDzKf8y\/2L\/aRs5WTjJYc8vlxium3kdHFwiy4o88m+vufQbtai1G7OVAz065HynAnH6yQAlnUgfD06yP0J\/wDDrf8Aq\/7To4XrrwlaDTkrhRuz6fvS8+LnJwp0nFP+Ll1\/BT8PGKlaunW9dL+5YRGZCavi1nimqlAxX4izYH2Tbo+MK1bu42mv4h3\/AAlxcXic3C\/80317Fd4JqN15euu3uS0wewDuQPtkEOMajYbvAHh4yPN1x7n5Tk4xrHspofYOrZ7\/ALQ6BZDPj4KDlFO0rqmrXsSR4WTkk\/Ot1uWsGeyIr4jZ4tdToAXUseucEZ6f0m2vXE6h6dowqhs+\/QdP6ywuIg\/evvV\/8IvlS\/F\/a6JHMZkDw\/i2ouIK0jbnDNu7fZPH41azN4NalUOCWbGce0i8dh5VLXXbR6+hv4ed0607rQnHcAZJAEzErXF9d42j3qvQnDf8uD+c6RxJ66U3V\/WN5UQHuPQzHjYczXTlTvzv99zPhp8qfW2q9CdiQa8UuR1F9QVWOAwOcH2M267ibizwaU3vjJycAD5yTxeLlbd6aVTu3tpua\/Indfm9PfYlpH8J1xtDkqBtcr0+XrNXD+Js1hptTZZjI65BHynBwjU+FRdYRnbYen9JFLiYucGn9P1X9l19DdYGoyTWulfcssSL4Rrrbcl6wowCCDkHPp9sk5axZY5I80diCcXGXKz2JjuHvG4e8kNTKJgXA7kfjPKrVYBlYMD2IIIP2EQDZI7i3FqdOu61sZ7AdSfsEkDPknM2sa3VWMT8LFB8gpx+cscNhWWVPYq8XxDwwtbstX6+1Z\/4L498rn8JNcK5g0+o6I2G\/dbofu9\/unyeZIxByCQR1BHQg+4MvT4LG19OhzYfEMqf1an2p3wCT6DM+e6y8vYzk\/EZNcD40b9FZvP1laEE+4I6NK8xAGTPI\/GeaE44n3PX\/CHHJB5V1PZ6tbEZAM+f8D1DazVnUszEePtpXcdq1VDLOF7dcqPtafQquJqh8Lcm49QpYbvuXPynNngUJKMn0t6bfvmdGGZzjzRX5Mvo747TGysr3Hf\/APJldxVa18xRFPTzHAPyyTNd+sVycsuVGT1HQHJBPsO8jlGFXG\/Y2jKd1KjKn4l+0f3n0gT59wMJbfUAykHzDqDuC9SR7+ku511IDHxUwnxneuE\/3denb1nY+EwahKT8zl\/Eppyil5HXE1VWKyhlIIIyCDkEH1BHebZ1jmiIiAIiIB8a0vC9ZbzBxS3RakU21eBgOu6qxWrXKWL3\/ZGCO0tfLnKGq+nHiXEr0tvCbKkrUrXUp77Qeuep\/GWfR8E09Wou1VdeLb9vitlju2DC9CcDA9pu4jeUUMD6jP2dzgfYIBRxydxPSarUW8N1VC1al\/EdLq2Yo5zlk29+\/rJDknk+7Q6rV6m3U+O2pFZLFcNuXduJx0xlugHYCWfSaonarfFjr6YIAJ\/+Qm5VfPU9PtH5RQKzyXy8eHnVeJar\/SdU9y4BBAcgBSPUzZwrlp6uK6riJsUrfWiBADlSmMknt6SYSgtathBwAx64+I4wRj5ZnvjWB2LZCKPVR1756+3wzNGCl\/qbxHSaq+7heppSrUtveq5GYJYe7pt+2dPKnI92k4hZr7dWb2tp2OWGGNm4ElfQIAAAPlLnXcXUlRjqR1+XrND2utafvMUXtk47t\/QGYFlIp5P4po9RqG4dq6Fp1NrWst1bO1bt3K47\/f7CSPKHJt2ifWO+qNraraRYRhw4UgufT4myAPYS1aO5j0cYbqSPYZOB+EyTfvbOMYHv8+0GSg8Q5Z49qKG0V+v0xocbXsFLC5k9QR8IJEvfCNAmn09WnrzsqRa1z3woCjPz6TXXqnVAbB5jkkD7ug\/ESRgHhE5v8Pp\/hV\/yL+U6ogHL\/h9P8Kv+RfymL8NoIINNZB6EbF6j27TsiAa6q1UBVAAHQADAA9gBODj2paugshwSQAfbJxmSch+ZkJ05wM4ZSfsB6mV+KbWGbW9MkwpPJFPzNdfAyQCdRbn183rNdCvRqUq8RnR1J85yQR7GdtXGdNtH1qjpI6\/UC7VIaGB2I3m64BIOMyjOOCCjLE1zWtnr36+RZi8srWRaU91Xp08zTzDwmxrDcmCCBnqBgjpnr6SMXgmpPavv65X85O6nRa2xCjPVg9DgEf8AaTGlq2IqH9kAfgJp4GGfLKTjKK31rf8AJIuLnixqKaf+EQOHPXonqxucgnA69T6CSPCaytFasCCFGQfSd0TpY+HjjknHouX82U55ZTTT87KrrNDsvd3oa1H6grnKn1BxN+k4cz0Wr4Qq3\/CMnOB1G7MsWIxII8BjUm70d6Uuu+tWSPiZOKXp59O2xWhq7vANH0d9wUrnHlxjGfwnluks+i0KEbcrgkY6gZPUyzYjEeCtVKbenL02tPouw8RT+mKWt9e6\/sg+L1WLfXeqFwoKkDv69f6zHhdVj326hkKBlCgHucY64+6T2IxN3wieTn5nV81d6q\/M0+c+TlrpV9rv0IflyhkoKupU7j0PSQ66HwmdLNM1vXKsucY9jiXGeYms+BjKEI3\/ABVLRP8AD0NlxMlKUq\/l6r+yt3aKz6EUFW1ic7VyfUf1xN\/EtJZim1Fy1WMr6kYGfvk7iMTPgoU1b2S6dHafrf27GFxErvu3169P3XuVzUtbqSiClkUMGYsMdvQTZqK7KNS161l0cAEL3BGPT7pP4jEeEvVyfNad0unbYfPrRLSqrXr3ILSJZdqBqGQoqLhQe57+n3zXw6q1Kbs1biXJCt03A\/3lhEYmY8IlrzO9ddNW9PTSlSDzt6Vppp6Fa4Lp3+kF0reuvb1Vs43fISyxieyTh8Cwx5U71v8Aa0NMuR5HbOU6Cn+FX\/Iv5R\/h9P8ACr\/kX8p1RJyM5Tw+n+FX\/Iv5TPTaWutQtaKijsFAUfgJviAeGfJeZ9IatXapHQsXHzDdf75n1oyC5o4ANUgK9LF+E+\/\/ACn5SzwuZY567MqcbgeXHUd1qfLZ7OnW8PupO2ytl+7p9x7TlE7CaexwWmtGWPk3Ja9B2ak\/iCMf3kVzVeU0V7r3FbY\/DEtXIHDnHiWupUMoVcjGRnJP2dpo4zwhlLq1e6tsjtkFT6GeR+OwvPHIlaWj\/wCnsPgMq4d426b2PmnK2op0fChqAwa11cqO53AsRWqj0B6n+s5+A0V6jS06m+1FWu03WNuzbZaCQFP7o7ADqT0lz4Zy9pNPu8GhV3ZBPUkg+mWz0+U16HlnRU2eLVp0V+4PU4\/2g9B905UuLxPmett3ent2\/fI68eGn9KdUlXXtr3KhwXiyXHWa\/UEMy5rpqPUquCcKh9T0649DNPK+lFnC3oVybtU56A5KqpC7n9kAB7984E+gcO5Uo8V7adMN9mQzAH9rv36DPriWnlPkrT6MZWtVJOdo69fck9T9npLWKXzrWOLStPXZV0+z6bsr5KxU5tN09t3fX92PmPIfFqNJXrtXZqAzaas6XSocBztUsSlY64LKCT7KST0kFdoWq5eF1rF7Ndqfq1zgA5Ja1+vnY7MDPQb\/AJkz7tpuSOGp45TSIDqAy2nrllf4lBzlQfYYmev5O4fdp69JZplNNJ3VplgFPXsQc+p6es68Y0qOU3bs95Mrqq0dWmqcP9HRKnI6jeFBYbuxxn07SwTm0OjrprWqpFRFGFVQFUD2AE6ZkwIiIAiIgCYsgPcT1pROB\/pCS3LX1qiFVKtU1moIdn2LRYorBW09wo3ev3gXkIM5x1mWJXDztw8Fgb+q4HwWeYl1q8nl8+HZVO3OCQJu\/W3RfVk2keI2wZrsGHDbNj5XyNu6YbEAncTxlB6GV1OddAQhFxw\/wk12gYJChySvRCxwGPQnPXpMeN8yWae8af6OXe3aNNhjttfOLFc4+r2L5yeuVBx1GIBY1QDsJ6VkFp+a9G7bBb1yoHkcB9zioGslcOu9lXcMgZGe836HmLS3XfR6nLWAMSAj4UK71nc2MDzVuBk9dpxAJbaM59Z7iU\/Rc13nw7btMi6e216VsS5rHVkexAbKjWMBjWfhLdSOk6q+dtG1ldaGxt5dcim3yFFDkOCuV6EH7DmAWRqwe4BmcjeD8Zo1SM9D7grbGBVkZWwGwysAR0YH7DJKAIiIAiIgCYlczKIBy\/QKf4SfyiZ1adE+FQv2AD+03xNFCKdpL2MuTe7PAJ7ETcwIiUnh\/PKNZb4x09ddTWJgXO9+VtFK\/Uiv9piMAMT5h0OYBdolePOGh8mLSfEB24rsOSNw2Hy9HyrDaeuR2nnC+cNJfSt4ZkDCo7XRlYeMxSsEY65YEZGRALFErdXOmgbwyLjizbtJrsAIZgqsSV8qsxADHoT2nPxXml6teNEq0Y21MWsudGPiO6ba0WpgxGz1IzkfbALZErlfOegZSy2scbcDwrdz7iwU1pty4JRxlQfhPtOdOdtIWJ35rO0IVS17GctcrJ4QTIwaH9+x6D1AtcSvLzjw\/cq\/SV8yBw2G2bTX4ozZjaGKAttJzia3510WzKWEsdwVTXaDlVD+YbMquGU7iMYOYBZYlb0\/OOiOVe0Iyrl\/LZsUitbGQWFQGIVgcd8HtJHhHGaNTv8ABZia2CuGR62VioYAq4B7EH74BJxEQBERAEREAREQBERAE8M9kDVzFUKrrrvq1qven1csVbYuFAyWYn4RmATbID3GftmsaasdQi\/yiQy836E+Hi7\/AIgJU7LMeUsCpbbhWBRxtPXKkTDS85aCxkRLWzZs2k1WqCLCRWSzLgBiMKT39IBYhPMSq6znCurX2aWzK11pV18K5me20vtRNq4wFrPvnJ\/dM6n5z0A3ZuPlx\/p2+fLivNfl+sG9lU7c4JEAmn0lZ7op+4TxdFUO1afyiRnC+ZNNqiyadyzhSwDJZWDhth6soztfytjsehkXoudAxPi1GoVDZqM7mKaksFTTVKFzaT1bI\/ZKHHm6a8kfIzbLaqgdhMsSE0\/NGjdWZbuiist5XBXxLHpUMCMhvErdSO4I64nNruaF+ifStKvi5tqpUPvpVmssSvduKE7Rv7gHODNjBZYlVTm5afETXoKLKipbYXvQo4YrYHCAgYR87gMbZmvO+ixazGxVqs8MsabdpOzfuBC\/DjJz+YgFnia6nDAMDkEAg+4PUGbIAiIgCIiAYsJEU8ApWiigF9lDI6dRklMkbjjr3+UmYgFH1P6PqFLNp3ZGa2t\/9MGtRctz+G617iSV6by3t26Tov8A0f6V3Sx7b2dTuZi1ZNjizxd7Zr8h3fw9gIABBAAFwiAVO7kTRuaCd\/1CLWMipt9aNuVX3ocdSeqbT1IzJ7WcPSyyq1s7qSzLg9MujVncPXoxndEAqn6kafGPFv8AIAtPnT\/LKLEuxT5Oo311nz7+igdukkOA8u1aQsa3sYuAGLsGJxZbZnoB1LXP\/STcQCqpyVRgo92osrzayVtYAlbW79zJ4aqdw8R8FicZyOozNGn5B0yV+Gt14yzFirVIWDVClk8lYCqUA+EKcjOe8uMQCC5a5cp0KOlTO3iMHYt4Y8wRUGFrRVHlRew+cnYiAIiIAiIgCIiAIiIAiIgCV7Wcq6azStpG3bGsNucqWWw2m7cMqVOHPZgRjoQZYYgFPo5A0iWVWhrc1bD\/AKIDMjs4YhaxtOWbITaDkZHQY9r5E04Fa+PqdtfhDbvrwy0WGylW8mcISQMEEj4tx6y3xAKkeQ9ITpz5\/wDL11VDPhNvSk5QOWQkEH1TaTnr06SQ1vLws1J1S6nUVOVRGFbVBXWtmZQwetj+23YjvJ2IBTeJ8o4rqOlJFtK111s1mwqtZchlYIw3nxGHmUqR6TLl3kpKFrstsd7lY2Md2VLs+pfHVcnH0qwZ6ZwD07S4RAKXT+jfh6keVyvhisq3hncBV4Icvs3htn7rAZGcZnVw3knS0jys5O21ScVIStqqhBFdajoFGDjPUk5zLVEAqev5Noahql3E5d1DOQN7UijqUAYAKoPTqD1m\/lDg+o04vfU2myy6xWOX3lQta1gF9iA\/DnooHX7zZYgCIiAIiIAiIgCIiAIiIAlT13JNN3ih77yllhu8PNJrW0sG8RVaokkEdmLDqcgy2RAKZ\/8AzzR7q23W+RQMDwQGILtv6V+U5sfITapz26CSn6rUdOtnQaYfEP8A0jb6vT37+\/yk\/EAhtTwCmzUDUsX3g1HAI25pFwXpj\/3Fmfu9pH18laYOjF7mFRBpUuu2keKlxSvC52lq0zuLHAwCBLTEAheGcApocOhfKi8DJBH1930h\/T9\/t8phq+XKrBb57Fa25b96sA1dqKiK1eVI6BB0IIOTnOZOxAKk3ImmJBF2oBO024dPr2S5r1a3KdxY7nybR5sYwABIajlyptGmiD2KieGUdWXxFNTh0bJUjO5R6SdiAVDX8haa5Cttt7uzFnsZ63d8oa9pDoUUBSQNqqVySCCSZjr+QdNcCGuv2khtmaSoPhCliA9ZwWQLk9xjy7cnNxiAadLSERUGcKoUZ74AwM\/hN0RAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQBERAEREAREQD\/\/2Q==)","47a3f148":"Check target value","a6af8690":"Dividing dataset into **2 parts**, because Kaggle RAM have **limit of usage**","daaefdc1":"Creating **new features** with featuretools, it'll make model more flexiable","059f525d":"### Numerical distribution","a2ef2e2d":"We can reverse **onehot encoding** with **np.argmax** function\n![](https:\/\/miro.medium.com\/max\/1838\/1*O_pTwOZZLYZabRjw3Ga21A.png)","03f56435":"# Modeling Catboost\n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAASkAAACqCAMAAADGFElyAAABJlBMVEX\/\/\/\/qMyP3zkbqfjAAAADznZjpJg\/tLiK4Vwjy\/faEplzDXyvuLCDuJRvW1tb7\/\/b5+fk7Txzk5OT3yzXe3t73zT\/09PTs7Ozo6Oi7u7vl7dv51dPpGwD0NSQADgDe8eDWPxS9zKt1dXUoKCgfBgXaMCHGxsZHR0fpeSSwv5\/pdhkqSACLi4v7567767y3t7c9PT2amppdXV3++Ob99NpxcXGDg4OYmJhnZ2f+9+L41Wb745z52nz88c\/2z7empqb42cbsi0fzu5j65tn401kREREdHR341sDvoW\/zuJP756rummL64JP52XbrhTf87OHsj1Dt2qPp3Lfq1JHww6jks5Xzr4Tw1YPay8LzuZXjoXjh2tXvoGzsjk385+azYxzPclEfRgC+qz+uAAALq0lEQVR4nO1dC3vixhVVMGmaNhUUJAHbR1rcCpXwftrGGD\/wC4NxNthONrtp+\/\/\/REcSQiNpNCPQFbub3pMvnx0zuTM6996j0czVIEkRMZ6fLEa9qK2hkGmMRvXjREyfX94\/n8ObPZ7m1ZSq5hcZeNscjNS8Sno9he\/1\/KJqGEb14grYbjelpiyoU2DLXJzmnV6hqbqtHlgwjHNYwydrolKp\/BzWMg\/1vNOregprebkmyuRqCWl4vBkyGXQX0jIPmanbax5WIV8Ml6l7SMMjlRpzA9IyDx7\/jCAtZy8OXFxAWj6lmFJnkJZ5aNBMvUJaXh7QyAJappnK1wENc\/H2M2SqTo0ZWDE46NG9wkbyU1LZ13XHvM9pwtQNZeD7yKWr6NUVqOXRhqr8GNQwF65QQc9Nsu6t7xEy+Qhe7UGrwFkgwGxNVX4BbfnKsKPKOICepEvfT\/MEJ2+h7fLRsHpN\/QBveflgVMk\/Dz9DG87K2nGj0SU\/oC1zoRTH9XojqxTALReU5dnqbFnMQRtW1hYLMrRlHgqK\/VOTgcVE2rhcBnaCS5BShLXMgxvBCrTrNwahXe8yD+\/ecOQU5zforKeuAtYJ7pC9vycLjXJ3Edb1VM6BOsETR\/sTdU+ig+pJUQn7j5jwBui+RN17BZBZ73M2nBP81OxH1P2xC6gnPlNwTvBzvh9Rz\/mYgcv6QFJAOSEo4fsQ9aA7CgqQgwLzWCAnMCJoH6LOmJYD6QlDwWFEnaVKyYs6a+wwWc90M4QT2KQkLersqAXRE6YRDcD17ERLWtTZnEBkfQgn8Z0QJt7JinqYIwD0JCTPYjshNHaSFfVQ2Yi9\/BLKdVwnhOtRkqIePuq4Wc9xcDwn8OhITtR58RpTTzj\/ezxR56VYcqLOZYOb9UWBJnATIY4T+LKdlKjzXcDVk366yTXNnTZllZ2lVxA1SYm6QDB4V1tOl3j\/q0C1dxd1kRIlI+qi8fL8x2dK6NpdRV1MRBKiLo5UTtbzmRIK0a7SK06uJERdrKscLrlMRUgB\/0qPEMeN+jgTRbDNNplxowFSNEB6rfei3KvNS+6SxsF9\/xCmsrer1W2UTUPTCdnz1eosWp3e+MTet40SL3JhpFp7y7ELYLqnpiE1kiGlOLd6nfq5GqR1RvPVQdUwqo\/PESwXc2cXVXNv+T7C1TfydoVJ\/iSC5cLUqVeIWannlNyqaoQKEW1dBONWSeitionDtP2zRefn3bqms\/oSYRzPTuMnYVO3ZDAfoQp14VbKxosqtwAoQv2PW\/jmVN6Urg9NXKdvrJ9pKtEuq1vU\/9xuGht3orZulXCEi6cqMdUoIRgKqpRNXH3XY\/SaNWHplP3bBppbJRyh+o6q\/zQERTBdumJQWLQ0p6sa48j6gjKUEjWm63O9EchQ9FuKqeq5wDJVfH1gXPLbeup1hWFyQjMVowSNrqcWU74I7ZXB1L0R\/eI9tIrSj67XTQkLFaGYkj5Fpt7z29JVqOIXCzw1xXHeA6IpT4ne\/KBzXvX0ymDqjM6+W4HlK5opUUU\/\/V6B8M7viUBRYx5mlEgL\/TMOrc9lMOWRHuFTxyNFq6iskXpXJUKV8Da08pBJuTd+cWxSb\/F4e2Wtury4swTxex9uBBoPwsab95\/UCDOk3nqaGmnyxTWkOpPJCIxnnNmXv6RYnzAe3B6cyaT42l1eI5UUv5qv1Kn5aaSpZG9qt479WkvvxHqTL\/CAwkT31GqcivS6hfbOMJ9mIkQUQfbZsN77u4uw9lZQjkeLk9fIydR4PVnMYr\/VSZ5Ne6P5D5FLk49n83kj2kt\/SmG5enl5jvbQW1SWZy8vlz9GiKj1msZ+K1+lbM5e6kqkSDhr\/4jS2FlHirqQYmKfla+uYyB2vX1wVpMjlR44q2MR1tQ3i3P7rHyV3LUj8CLhTXQUIlyQG3jinHKZ31\/l6ydTJEwt9jlyEAp6uR+6pj0cdPxC1qdKHhERO6FYdMeh8Vt7jO1P1D2aCCrqnmsQOcFLJT+nvAEKrhkh8N6WQAVyqyJh302M19o3yD2JeoJFwr644Iu6P4d4OeVncT+i7u8FTtQDruY5IRuIofDWwTzeh6gHI7eYgyoS9t+\/eE4IhkVoa8YH+xB1hueAZr2Mafl2lVlhOcUKtuRFneUMIIHcqkiY6Z1g695sPmqw3jMlcdYdjxM6n2R8ejI9\/Z715JrLjUfz2e77Ysv7h4uHdz8yPtHkq8uXn86z\/tZP71gLd+QWcHv34cP71bp9117wSLGWD96eqObObgIvtGcWpNcUe3WnkSKf5fOLHV10aRjGAfmXsWy+fLAPU6LWiVdm6wODuSrz81PV+uzR4tFZRGOd3jCzV+oA1p8CcFbjGCuGs81i4k5U3TsLl8Fd4+X6lXZql3QV3lrKXjj7Fdbu3zSwI7sBdWAB9Lk38\/BVaHedfKftVmrbILAWvrnyzUdL6oyJwIaEe6SQ8eTZNVD9xxJss1+5HTKUZb+D6G3sHRxEn5jk27OjNmqcTSq6tX\/5WKN2wAiznt0z7yoivU0KfPZGI\/zEpO5WG2kBeE5M8u2v39GXbn\/kae27WXq2\/569m5JeyfBsa8Mq1asaSsd229gBFB7pa\/feWT9Qn6zTj+IucLzZimbqhceUZwsS9mSVUbjpN\/GY0jxMeaOEwRSHV8+uqvGTdx\/Ym3315I41Og4\/JS0THm6R8EApj68Kis4+I\/inDz5LS+\/+M0fRjxM8doqWx0zoR7uoIxUJ1bPQjxyxP6daB+ZfFOmm4lGzBD8b7l0oXnkUA8fhE5BezF6fNpOgQGHdk3vbdzLNKdk7MPwhZZ4o5OH82NnpDp7r5h7jCX\/i4lhdT2qDaV1f70yrwmIOJrLrXePqU+Dxcfm4PkyJmju9X7e+YDwSntszVWMdbuRpJh\/yNNM1j4Y1HzkSePTrvpoPSgtWfo2n5JP87kfDrh6NavWRVQO0vKuaG8oX53Tri6rZmvlUvrwjloyHTfNefT4LUYTGIpVaJHUwZa8XxsW4PotVu728CtszXp5drvxT9\/DWJEKvrvZ7khQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUB8TPzyJRT+tcHXSQz0612Q4WDbAfzpz78BQnqDNwkQ9e2\/f78D\/hiO7\/6+NVNfwOAv\/3CI+msiTP3tm+3xzzQHv16mdhjT\/ylTXyFTyBQyhUwhU8gUMoVMfaJMffMVCFymknma+ehM\/fLlf34Lg+8c\/DcZpv6wPb6AZOpzwZvfQePXyhQCgUAgEAgEAoFAIBAIBAKBQCAQiM8AkxqBRH0JkPV9gcPasFZrf7xRsaGXy6wvFHVQMk9WHpgjnyTRe6up6zp9JvGh+asu92v6fr97Rgy9osgtzvf5DszPdLkzTGbk9reYlgpyqa81+xNJTtesvw+bpNdmX5LLNdJicsT\/ZvS9YEiCPNeUtFqZMGGNSykPCpJcqg00SRsMyzaLAxJ3pdJA0vtDkh6TPlSAtSalZk7qyJOWrFcK\/aZ2Y\/dXI9QMjmS5kit1pEG7OEgkordC4aYzIV6r6EpFyd3I7U72Ri8dSs1ruVaWKk19\/V2\/Zmgd9RW9U2x2pNoQbOSt2qStSEfyZCgp18Mi+YOdiBZTujQot9vp4vWwXWvB9BcLei3dzB2220e1Cbl8rUnC\/4iElJTraGR4TkyZTMlSedCepHOtdruWhuncJoYwRUK70G4NaKaIfpbbOsn6tK5\/AqrVJyMrHuYqZDBFUxw04l2pLxO+lE6hstapDVNHEzJm7RBu5C3r0HmLKb0v5VrSoX0K\/ZopknrakdQpSfoQpr8YaB9liWBKNzmJaHZFkg+LN9lCOmsxJR0q2jWVfbLZUutIRF\/1AUz3fSuEakrJzLZWRZFqFes0wgnptk280W6R243WqXT29tVG4RhWKmVNkisk8qWJOdZSq6JL+kTKDchfOwM7eNq6eT2kdaulS9mjVmevX4qGQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCA+IfwPYbuTcJsHSqAAAAAASUVORK5CYII=)","a1ee7cfc":"# Feature engineering","7b796f4b":"## Change type of columns. It **reduce memory** of dataset\n![](https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2020\/02\/pandas.png)","167be49d":"# Data analysis","a47795ac":"Check that everyone column have at least **2 unique values**"}}