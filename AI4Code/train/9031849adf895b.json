{"cell_type":{"8104174e":"code","6eee4dc1":"code","00f4d203":"code","779ef60e":"code","a3dd06cd":"code","14250ab8":"code","a3e981ef":"code","9d2186c9":"code","565b9767":"code","7b0c0e49":"markdown"},"source":{"8104174e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 as cv # image processing\nimport matplotlib.pyplot as plt # plot images\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","6eee4dc1":"#Global Parameters\nRESHAPE_SIZE = 100\nRANDOM_STATE = 420\nMAX_ITER = 1000\nERR_TOL = 0.01","00f4d203":"\"\"\"\nConsultation taken from:\nhttps:\/\/stackoverflow.com\/questions\/41907598\/how-to-train-images-when-they-have-different-size\n\"\"\"\n\ndef load_resize_images_from_folder(folder):\n    \"\"\"\n    Function to load and resize the contents of a folder into a list of numpy arrays\n    Function adopted from:\n    https:\/\/stackoverflow.com\/questions\/30230592\/loading-all-images-using-imread-from-a-given-folder\n    \"\"\"\n    images = []\n    for filename in os.listdir(folder):\n        img = cv.imread(os.path.join(folder,filename))\n        if img is not None:\n            img = cv.resize(img, (RESHAPE_SIZE, RESHAPE_SIZE)).flatten()\n            images.append(img)\n    return images\n\ndef shuffle_index(x, y):\n    \"\"\"Shuffle the index of train or test data in order to ensure random cross-val folds\"\"\"\n    shuffle_index = np.random.permutation(len(x))\n    x, y = x[shuffle_index], y[shuffle_index]\n    return x, y\n\ndef label_y(len_x, len_train_cactus):\n    \"\"\"Make a list of labels to be used in training based on training indexes\"\"\"\n    y = []\n    for elem in range(len_x):\n        if elem <= len_train_cactus:\n            y.append(\"cact\")\n        else:\n            y.append(\"no_cact\")\n    return np.array([1 if elem == 'cact' else 0 for elem in y])","779ef60e":"#Returns lists of numpy arrays of shape depending on image size\ntrain_cactus = load_resize_images_from_folder(\"\/kaggle\/input\/training_set\/training_set\/cactus\")\ntrain_no_cactus = load_resize_images_from_folder(\"\/kaggle\/input\/training_set\/training_set\/no_cactus\")\ntest_cactus = load_resize_images_from_folder(\"\/kaggle\/input\/validation_set\/validation_set\/cactus\")\ntest_no_cactus = load_resize_images_from_folder(\"\/kaggle\/input\/validation_set\/validation_set\/no_cactus\")\n\nx_train = list()\nx_train += train_cactus\nx_train += train_no_cactus\nx_train = np.array(x_train)\n\ny_train = label_y(len(x_train), len(train_cactus))\n\nx_train, y_train = shuffle_index(x_train, y_train)\n\nx_test = list()\nx_test += test_cactus\nx_test += test_no_cactus\nx_test = np.array(x_test)\n\ny_test = label_y(len(x_test), len(test_cactus))\n\nx_test, y_test = shuffle_index(x_test, y_test)","a3dd06cd":"from random import randint\n\ndef plot_examples_RGB(cact_ind, no_cact_ind):\n    f, (ax1, ax2) = plt.subplots(1, 2, sharex=True)\n    ax1.set_title('Cactus')\n    ax1.imshow(train_cactus[cact_ind].reshape(RESHAPE_SIZE, RESHAPE_SIZE, 3))\n    ax2.set_title('Not Cactus')\n    ax2.imshow(train_no_cactus[no_cact_ind].reshape(RESHAPE_SIZE, RESHAPE_SIZE, 3))\n    \nplot_examples_RGB(\n    randint(0,len(train_cactus)), \n    randint(0,len(train_no_cactus)))","14250ab8":"from sklearn.linear_model import SGDClassifier\n\nsgd_clf = SGDClassifier(loss=\"hinge\", penalty=\"l2\", max_iter=MAX_ITER, tol=ERR_TOL, random_state=RANDOM_STATE)\nsgd_clf.fit(x_train, y_train) ","a3e981ef":"from sklearn.model_selection import cross_val_score\n\ntraining_score = cross_val_score(sgd_clf, x_train, y_train, cv=3, scoring=\"accuracy\")\ntest_score = cross_val_score(sgd_clf, x_test, y_test, cv=3, scoring=\"accuracy\")\n\nprint(\"Training Score: \"+str(sum(training_score)\/len(training_score)))\nprint(\"Cross-Validation Score: \"+str(sum(test_score)\/len(test_score)))","9d2186c9":"from sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\n\n#Display confusion matrix\ny_train_pred = cross_val_predict(sgd_clf, x_train, y_train, cv=3)\nconfusion_matrix = confusion_matrix(y_train, y_train_pred)\nprint(confusion_matrix)","565b9767":"from sklearn.externals import joblib\n\n# Dump model\nfilename = 'rgb_model_v1.sav'\njoblib.dump(sgd_clf, filename)","7b0c0e49":"## Due to differing sizes in the training data images must either be resized or a more robust model used\nReshape the data before training"}}