{"cell_type":{"cc72277f":"code","bf1b718d":"code","1ba2ae66":"code","50a2dbb0":"code","3c01466c":"code","57beb799":"code","58db30d9":"code","b61851f3":"code","a4d45f0c":"code","2655d899":"code","e08f120d":"code","168d2741":"code","38451d19":"code","0c32b214":"code","441b9f05":"code","cd1fa1c0":"code","4c3f1966":"code","43976452":"code","e5fff625":"code","ebf7087b":"code","af4fecfc":"code","5c0a561b":"code","268a8b2c":"code","6e39120f":"code","882f2ac6":"code","cb9ce506":"code","d921ad07":"code","da5eedec":"code","ba390886":"code","45c89864":"code","b2f43cf0":"code","603a6fe8":"code","924460d8":"code","25a32057":"code","19f48916":"code","0b610ae1":"code","eba52bd4":"code","aa9ca25b":"code","911c39ce":"code","4fdded95":"code","8ecf5f4e":"code","4be59d9a":"code","248ee77b":"code","d00e1d84":"code","945db396":"code","a36ea85b":"code","2e2021f6":"code","b171c2dd":"code","44348265":"code","250d78ea":"code","6af05096":"code","5090adce":"code","bece47cc":"code","eec03c7c":"code","acc33724":"code","414113f9":"code","5d71431a":"code","1736c71c":"code","3ab628e6":"code","46983f24":"code","c0e8b053":"code","43666e01":"code","c56e04d8":"code","25ae4ee5":"code","598138a1":"code","5e899ec8":"code","07749794":"code","7d07c5b2":"code","96c63085":"code","bede65a4":"code","8b06a6e8":"code","5163214d":"code","4eaa750f":"code","ff10777e":"code","d49e9bbe":"code","d50ec1b2":"code","a60f379f":"code","c611a0a9":"code","bff026e2":"code","e728cca3":"code","08f8f74c":"code","c9497383":"code","88da14a0":"code","3ec94420":"code","9ea596cd":"code","7eedc1ff":"code","4a5a4183":"code","5cc93ec7":"code","4eb5bb8c":"code","a2d554a4":"code","00158e50":"markdown","83f3159c":"markdown","178af88b":"markdown","196aba5c":"markdown","257817fc":"markdown","116650ad":"markdown","ead00462":"markdown","083de826":"markdown","897f638d":"markdown","a8d220ce":"markdown","82296c5a":"markdown","9b2b8791":"markdown","c5e3ee88":"markdown","e817d5fc":"markdown","d4fb5a05":"markdown","67f49dae":"markdown","b0b8b87c":"markdown","72efc64a":"markdown","6a0d0a82":"markdown","c26215b2":"markdown","5bffc702":"markdown","3ac1a71b":"markdown","d35e5fb5":"markdown","8ce0a868":"markdown","6254d856":"markdown","f8c9289c":"markdown","e53ecdb9":"markdown"},"source":{"cc72277f":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\nfrom scipy.io import loadmat\nimport nibabel as nib\nimport csv\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\nfrom IPython import display\nfrom scipy.ndimage import gaussian_filter\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.patches as patches\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose,\\\nLeakyReLU, GaussianNoise, GlobalMaxPooling2D, ReLU, Input, Concatenate\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\nfrom keras.models import Model\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","bf1b718d":"Dir_Path = Path(\"..\/input\/powehi-black-hole-real-time-simulation-set-eht\/Black_Hole_Real_Simulations\")","1ba2ae66":"MP4_Path = list(Dir_Path.glob(r\"*.mp4\"))\nMP4_Path.append(Dir_Path.glob(r\"*.mov\"))","50a2dbb0":"print(\"LEN VIDEO LIST: \",len(MP4_Path))","3c01466c":"Video_Series = pd.Series(MP4_Path,name=\"VIDEO\").astype(str)","57beb799":"print(Video_Series.head(-1))","58db30d9":"print(Video_Series[0])\nprint(\"---\"*10)\nprint(Video_Series[2])\nprint(\"---\"*10)\nprint(Video_Series[7])","b61851f3":"Black_Hole_Image = []\n\nfor file_name in Video_Series:\n    Video_File = file_name\n    \n    Video_Caption = cv2.VideoCapture(Video_File)\n    \n    while Video_Caption.isOpened():\n        \n        _,frame = Video_Caption.read()\n        \n        if _ != True:\n            break\n            \n        if Video_Caption.isOpened():\n            \n            Transformed_IMG = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)\n            Resized_IMG = cv2.resize(Transformed_IMG,(180,180),interpolation=cv2.INTER_CUBIC)\n            Black_Hole_Image.append(Resized_IMG)","a4d45f0c":"print(\"LEN LIST: \",len(Black_Hole_Image))\nprint(\"LEN ARRAY: \",np.shape(np.array(Black_Hole_Image)))","2655d899":"plt.style.use(\"dark_background\")","e08f120d":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\naxis[0].set_xlabel(Black_Hole_Image[0].shape)\naxis[0].set_ylabel(Black_Hole_Image[0].size)\naxis[0].set_title(\"EXAMPLE BH IMAGE\")\naxis[0].imshow(Black_Hole_Image[0])\n\naxis[1].set_xlabel(Black_Hole_Image[567].shape)\naxis[1].set_ylabel(Black_Hole_Image[567].size)\naxis[1].set_title(\"EXAMPLE BH IMAGE\")\naxis[1].imshow(Black_Hole_Image[567])\n\naxis[2].set_xlabel(Black_Hole_Image[3400].shape)\naxis[2].set_ylabel(Black_Hole_Image[3400].size)\naxis[2].set_title(\"EXAMPLE BH IMAGE\")\naxis[2].imshow(Black_Hole_Image[3400])\n\naxis[3].set_xlabel(Black_Hole_Image[7000].shape)\naxis[3].set_ylabel(Black_Hole_Image[7000].size)\naxis[3].set_title(\"EXAMPLE BH IMAGE\")\naxis[3].imshow(Black_Hole_Image[7000])","168d2741":"Accretion_Disk_Path = \"..\/input\/powehi-black-hole-real-time-simulation-set-eht\/Black_Hole_Real_Simulations\/Accretion Disk.mp4\"\n\nAcc_List = []\n\nAcc_Video = cv2.VideoCapture(Accretion_Disk_Path)\n\nwhile Acc_Video.isOpened():\n    \n    _,frame = Acc_Video.read()\n    \n    if _ != True:\n        break\n        \n    if Acc_Video.isOpened():\n        \n        Transformed_IMG = cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)\n        Resized_IMG = cv2.resize(Transformed_IMG,(180,180),interpolation=cv2.INTER_CUBIC)\n        Acc_List.append(Resized_IMG)","38451d19":"print(\"LEN LIST: \",len(Acc_List))\nprint(\"LEN ARRAY: \",np.shape(np.array(Acc_List)))","0c32b214":"figure,axis = plt.subplots(10,10,figsize=(20,20))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_IMG = Acc_List[indexing*5]\n    \n    operations.imshow(Picking_IMG)\n    operations.axis(\"off\")\n    \nplt.tight_layout()\nplt.show()","441b9f05":"figure,axis = plt.subplots(1,5,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO)\n_,Threshold_IMG_TOZERO_INV = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_IMG_BINARY = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_BINARY)\n_,Threshold_IMG_BINARY_INV = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_BINARY_INV)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG)\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO)\n\naxis[2].set_xlabel(Threshold_IMG_TOZERO_INV.shape)\naxis[2].set_ylabel(Threshold_IMG_TOZERO_INV.size)\naxis[2].set_title(\"TOZERO INV\")\naxis[2].imshow(Threshold_IMG_TOZERO_INV)\n\naxis[3].set_xlabel(Threshold_IMG_BINARY.shape)\naxis[3].set_ylabel(Threshold_IMG_BINARY.size)\naxis[3].set_title(\"BINARY\")\naxis[3].imshow(Threshold_IMG_BINARY)\n\naxis[4].set_xlabel(Threshold_IMG_BINARY_INV.shape)\naxis[4].set_ylabel(Threshold_IMG_BINARY_INV.size)\naxis[4].set_title(\"BINARY INV\")\naxis[4].imshow(Threshold_IMG_BINARY_INV)","cd1fa1c0":"figure,axis = plt.subplots(1,5,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO)\n_,Threshold_IMG_TOZERO_INV = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO_INV)\n_,Threshold_IMG_BINARY = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_BINARY)\n_,Threshold_IMG_BINARY_INV = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_BINARY_INV)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Threshold_IMG_TOZERO_INV.shape)\naxis[2].set_ylabel(Threshold_IMG_TOZERO_INV.size)\naxis[2].set_title(\"TOZERO INV\")\naxis[2].imshow(Threshold_IMG_TOZERO_INV,cmap=\"hot\")\n\naxis[3].set_xlabel(Threshold_IMG_BINARY.shape)\naxis[3].set_ylabel(Threshold_IMG_BINARY.size)\naxis[3].set_title(\"BINARY\")\naxis[3].imshow(Threshold_IMG_BINARY,cmap=\"hot\")\n\naxis[4].set_xlabel(Threshold_IMG_BINARY_INV.shape)\naxis[4].set_ylabel(Threshold_IMG_BINARY_INV.size)\naxis[4].set_title(\"BINARY INV\")\naxis[4].imshow(Threshold_IMG_BINARY_INV,cmap=\"hot\")","4c3f1966":"figure,axis = plt.subplots(1,4,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_OTSU = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_OTSU)\n_,Threshold_IMG_TRIANGLE = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TRIANGLE)\n_,Threshold_IMG_TRUNC = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TRUNC)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG)\n\naxis[1].set_xlabel(Threshold_IMG_OTSU.shape)\naxis[1].set_ylabel(Threshold_IMG_OTSU.size)\naxis[1].set_title(\"OTSU\")\naxis[1].imshow(Threshold_IMG_OTSU)\n\naxis[2].set_xlabel(Threshold_IMG_TRIANGLE.shape)\naxis[2].set_ylabel(Threshold_IMG_TRIANGLE.size)\naxis[2].set_title(\"TRIANGLE\")\naxis[2].imshow(Threshold_IMG_TRIANGLE)\n\naxis[3].set_xlabel(Threshold_IMG_TRUNC.shape)\naxis[3].set_ylabel(Threshold_IMG_TRUNC.size)\naxis[3].set_title(\"TRUNC\")\naxis[3].imshow(Threshold_IMG_TRUNC)","43976452":"figure,axis = plt.subplots(1,4,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_OTSU = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_OTSU)\n_,Threshold_IMG_TRIANGLE = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TRIANGLE)\n_,Threshold_IMG_TRUNC = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TRUNC)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_OTSU.shape)\naxis[1].set_ylabel(Threshold_IMG_OTSU.size)\naxis[1].set_title(\"OTSU\")\naxis[1].imshow(Threshold_IMG_OTSU,cmap=\"hot\")\n\naxis[2].set_xlabel(Threshold_IMG_TRIANGLE.shape)\naxis[2].set_ylabel(Threshold_IMG_TRIANGLE.size)\naxis[2].set_title(\"TRIANGLE\")\naxis[2].imshow(Threshold_IMG_TRIANGLE,cmap=\"hot\")\n\naxis[3].set_xlabel(Threshold_IMG_TRUNC.shape)\naxis[3].set_ylabel(Threshold_IMG_TRUNC.size)\naxis[3].set_title(\"TRUNC\")\naxis[3].imshow(Threshold_IMG_TRUNC,cmap=\"hot\")","e5fff625":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TRUNC = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TRUNC)\nCanny_IMG = cv2.Canny(Threshold_IMG_TRUNC,55,100)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TRUNC.shape)\naxis[1].set_ylabel(Threshold_IMG_TRUNC.size)\naxis[1].set_title(\"TRUNC\")\naxis[1].imshow(Threshold_IMG_TRUNC,cmap=\"hot\")\n\naxis[2].set_xlabel(Canny_IMG.shape)\naxis[2].set_ylabel(Canny_IMG.size)\naxis[2].set_title(\"CANNY\")\naxis[2].imshow(Canny_IMG,cmap=\"hot\")","ebf7087b":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TRUNC = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TRUNC)\nCanny_IMG = cv2.Canny(Threshold_IMG_TRUNC,55,100)\nBlend_IMG = cv2.addWeighted(Gray_IMG,0.8,Canny_IMG,0.8,0.1)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Canny_IMG.shape)\naxis[1].set_ylabel(Canny_IMG.size)\naxis[1].set_title(\"CANNY\")\naxis[1].imshow(Canny_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Blend_IMG.shape)\naxis[2].set_ylabel(Blend_IMG.size)\naxis[2].set_title(\"BLEND\")\naxis[2].imshow(Blend_IMG,cmap=\"jet\")","af4fecfc":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TRUNC = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TRUNC)\nCanny_IMG = cv2.Canny(Threshold_IMG_TRUNC,55,100)\nDiff_Image = cv2.absdiff(Gray_IMG,Canny_IMG,np.zeros((2,2)))\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Canny_IMG.shape)\naxis[1].set_ylabel(Canny_IMG.size)\naxis[1].set_title(\"CANNY\")\naxis[1].imshow(Canny_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Diff_Image.shape)\naxis[2].set_ylabel(Diff_Image.size)\naxis[2].set_title(\"DIFF\")\naxis[2].imshow(Diff_Image,cmap=\"hot\")","5c0a561b":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\nEqualize_IMG = cv2.equalizeHist(Gray_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_IMG.shape)\naxis[1].set_ylabel(Gray_IMG.size)\naxis[1].set_title(\"GRAY\")\naxis[1].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[2].set_xlabel(Equalize_IMG.shape)\naxis[2].set_ylabel(Equalize_IMG.size)\naxis[2].set_title(\"EQUALIZE\")\naxis[2].imshow(Equalize_IMG,cmap=\"hot\")","268a8b2c":"Single_Image = Acc_List[1]\n    \ncolors = (\"red\", \"green\", \"blue\")\nchannel_dim = (0, 1, 2)\n\nplt.xlim([0, 255])\nplt.ylim([0, 155])\n\nfor channel_id, c in zip(channel_dim, colors):\n    histogram, bin_edges = np.histogram(\n    Single_Image[:, :, channel_id], bins=256, range=(0, 256))\n    plt.plot(bin_edges[0:-1], histogram, color=c)\n\nplt.xlabel(\"Color value\")\nplt.ylabel(\"Pixels\")","6e39120f":"Single_Image = Acc_List[100]\n    \ncolors = (\"red\", \"green\", \"blue\")\nchannel_dim = (0, 1, 2)\n\nplt.xlim([0, 255])\nplt.ylim([0, 155])\n\nfor channel_id, c in zip(channel_dim, colors):\n    histogram, bin_edges = np.histogram(\n    Single_Image[:, :, channel_id], bins=256, range=(0, 256))\n    plt.plot(bin_edges[0:-1], histogram, color=c)\n\nplt.xlabel(\"Color value\")\nplt.ylabel(\"Pixels\")","882f2ac6":"Single_Image = Acc_List[433]\n    \ncolors = (\"red\", \"green\", \"blue\")\nchannel_dim = (0, 1, 2)\n\nplt.xlim([0, 255])\nplt.ylim([0, 155])\n\nfor channel_id, c in zip(channel_dim, colors):\n    histogram, bin_edges = np.histogram(\n    Single_Image[:, :, channel_id], bins=256, range=(0, 256))\n    plt.plot(bin_edges[0:-1], histogram, color=c)\n\nplt.xlabel(\"Color value\")\nplt.ylabel(\"Pixels\")","cb9ce506":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n\nClahe_Func = cv2.createCLAHE(clipLimit=5.0,tileGridSize=(8,8))\nApply_Clahe = Clahe_Func.apply(Gray_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_IMG.shape)\naxis[1].set_ylabel(Gray_IMG.size)\naxis[1].set_title(\"GRAY\")\naxis[1].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[2].set_xlabel(Apply_Clahe.shape)\naxis[2].set_ylabel(Apply_Clahe.size)\naxis[2].set_title(\"CLAHE\")\naxis[2].imshow(Apply_Clahe,cmap=\"hot\")","d921ad07":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n\nClahe_Func = cv2.createCLAHE(clipLimit=5.0,tileGridSize=(2,2))\nApply_Clahe = Clahe_Func.apply(Gray_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_IMG.shape)\naxis[1].set_ylabel(Gray_IMG.size)\naxis[1].set_title(\"GRAY\")\naxis[1].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[2].set_xlabel(Apply_Clahe.shape)\naxis[2].set_ylabel(Apply_Clahe.size)\naxis[2].set_title(\"CLAHE\")\naxis[2].imshow(Apply_Clahe,cmap=\"hot\")","da5eedec":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n\nClahe_Func = cv2.createCLAHE(clipLimit=1.0,tileGridSize=(2,2))\nApply_Clahe = Clahe_Func.apply(Gray_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Gray_IMG.shape)\naxis[1].set_ylabel(Gray_IMG.size)\naxis[1].set_title(\"GRAY\")\naxis[1].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[2].set_xlabel(Apply_Clahe.shape)\naxis[2].set_ylabel(Apply_Clahe.size)\naxis[2].set_title(\"CLAHE\")\naxis[2].imshow(Apply_Clahe,cmap=\"hot\")","ba390886":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(0,255,0),5)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.5,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.5,(0,0,255))\n                \n        i = i + 1\n        \n        \naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\")                ","45c89864":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[1]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n        \n        \naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\")  ","b2f43cf0":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[400]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n        \n        \naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") ","603a6fe8":"figure,axis = plt.subplots(1,3,figsize=(18,18))\nPicking_IMG = Acc_List[277]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n        \n        \naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") ","924460d8":"Picking_IMG = Acc_List[277]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)","25a32057":"print(n_count)\nprint(\"--\"*10)\nprint(n_count.shape)\nprint(\"--\"*10)","19f48916":"Reshaped_N = n_count.reshape(4,2)\n\nprint(Reshaped_N)\nprint(\"--\"*10)\nprint(Reshaped_N.shape)\nprint(\"--\"*10)","0b610ae1":"print(string_coor)","eba52bd4":"print(\"X: \",x)\nprint(\"Y: \",y)","aa9ca25b":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\nPicking_IMG = Acc_List[2]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nTotal_Approx = []\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for x_cor in n_count:\n        x_cor = int(x_cor)\n        Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(x_cor,int(Copy_Main_IMG.shape[1]\/2)),(255,0,255),thickness=1)\n    \n    print(n_count)\n    Total_Approx.append(n_count)\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG) ","911c39ce":"print(\"TOTAL ARRAY SHAPE: \",np.shape(np.array(Total_Approx)))","4fdded95":"Array_Approx = np.array(Total_Approx)","8ecf5f4e":"print(Total_Approx)","4be59d9a":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\nPicking_IMG = Acc_List[488]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,220,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for x_cor in n_count:\n        x_cor = int(x_cor)\n        Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(x_cor,int(Copy_Main_IMG.shape[1]\/2)),(255,0,255),thickness=1)\n    \n    print(n_count)\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG) ","248ee77b":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\nPicking_IMG = Acc_List[510]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,20,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(255,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n    \n    for x_cor in n_count:\n        x_cor = int(x_cor)\n        Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(x_cor,int(Copy_Main_IMG.shape[1]\/2)),(255,0,255),thickness=1)\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG) ","d00e1d84":"figure,axis = plt.subplots(1,5,figsize=(18,18))\n\nPicking_IMG = Acc_List[510]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(0,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(int(x),int(y)),(0,255,0),thickness=1)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG)\n\naxis[4].set_xlabel(Trans_Empty_Zeros.shape)\naxis[4].set_ylabel(Trans_Empty_Zeros.size)\naxis[4].set_title(\"TRANSFORMED\")\naxis[4].imshow(Trans_Empty_Zeros) ","945db396":"figure,axis = plt.subplots(1,6,figsize=(18,18))\n\nPicking_IMG = Acc_List[55]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,90,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(0,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(int(x),int(y)),(0,255,0),thickness=1)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=8,truncate=6*6)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG)\n\naxis[4].set_xlabel(Trans_Empty_Zeros.shape)\naxis[4].set_ylabel(Trans_Empty_Zeros.size)\naxis[4].set_title(\"TRANSFORMED\")\naxis[4].imshow(Trans_Empty_Zeros)\n\n\naxis[5].set_xlabel(Gaus_IMG.shape)\naxis[5].set_ylabel(Gaus_IMG.size)\naxis[5].set_title(\"GAUSSIAN TRANSFORMED\")\naxis[5].imshow(Gaus_IMG) ","a36ea85b":"figure,axis = plt.subplots(1,6,figsize=(18,18))\n\nPicking_IMG = Acc_List[100]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,55,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.09*cv2.arcLength(cnt,True),True)\n    \n    Drawing_Contour = cv2.drawContours(Gray_IMG,[approx],0,(0,255,0),3)\n    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            Marker_IMG = cv2.drawMarker(Copy_Main_IMG,(int(x),int(y)),(0,255,0),thickness=1)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n            \n            if (i == 0):\n                cv2.putText(Gray_IMG,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(255,0,255))\n            else:\n                cv2.putText(Gray_IMG,\"+\",(x,y),cv2.FONT_HERSHEY_COMPLEX,0.4,(0,0,255))\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=8,truncate=4*4)\n\naxis[0].set_xlabel(Gray_IMG.shape)\naxis[0].set_ylabel(Gray_IMG.size)\naxis[0].set_title(\"GRAY\")\naxis[0].imshow(Gray_IMG,cmap=\"gray\")\n\naxis[1].set_xlabel(Threshold_IMG_TOZERO.shape)\naxis[1].set_ylabel(Threshold_IMG_TOZERO.size)\naxis[1].set_title(\"TOZERO\")\naxis[1].imshow(Threshold_IMG_TOZERO,cmap=\"hot\")\n\naxis[2].set_xlabel(Drawing_Contour.shape)\naxis[2].set_ylabel(Drawing_Contour.size)\naxis[2].set_title(\"DRAWING\")\naxis[2].imshow(Drawing_Contour,cmap=\"hot\") \n\naxis[3].set_xlabel(Marker_IMG.shape)\naxis[3].set_ylabel(Marker_IMG.size)\naxis[3].set_title(\"LOC\")\naxis[3].imshow(Marker_IMG)\n\naxis[4].set_xlabel(Trans_Empty_Zeros.shape)\naxis[4].set_ylabel(Trans_Empty_Zeros.size)\naxis[4].set_title(\"TRANSFORMED\")\naxis[4].imshow(Trans_Empty_Zeros)\n\n\naxis[5].set_xlabel(Gaus_IMG.shape)\naxis[5].set_ylabel(Gaus_IMG.size)\naxis[5].set_title(\"GAUSSIAN TRANSFORMED\")\naxis[5].imshow(Gaus_IMG) ","2e2021f6":"figure,axis = plt.subplots(1,2,figsize=(18,18))\n\nPicking_IMG = Acc_List[100]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,20,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")","b171c2dd":"figure,axis = plt.subplots(1,2,figsize=(18,18))\n\nPicking_IMG = Acc_List[500]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")","44348265":"figure,axis = plt.subplots(1,2,figsize=(18,18))\n\nPicking_IMG = Acc_List[387]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")","250d78ea":"figure,axis = plt.subplots(1,3,figsize=(18,18))\n\nPicking_IMG = Acc_List[387]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\nSift_Function = cv2.SIFT_create()\nkeypoints,desc = Sift_Function.detectAndCompute(Threshold_IMG_TOZERO,None)\nKey_IMG = cv2.drawKeypoints(Gray_IMG,keypoints,Gray_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Key_IMG.shape)\naxis[2].set_ylabel(Key_IMG.size)\naxis[2].set_title(\"KEYPOINTS\")\naxis[2].imshow(Key_IMG)","6af05096":"figure,axis = plt.subplots(1,3,figsize=(18,18))\n\nPicking_IMG = Acc_List[387]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\nArray_Target = np.array(Gray_IMG > Gaus_IMG).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Array_Target)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Skeleton_IMG.shape)\naxis[2].set_ylabel(Skeleton_IMG.size)\naxis[2].set_title(\"SKELETON\")\naxis[2].imshow(Skeleton_IMG)","5090adce":"figure,axis = plt.subplots(1,3,figsize=(18,18))\n\nPicking_IMG = Acc_List[501]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\nArray_Target = np.array(Gray_IMG > Gaus_IMG).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Array_Target)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Skeleton_IMG.shape)\naxis[2].set_ylabel(Skeleton_IMG.size)\naxis[2].set_title(\"SKELETON\")\naxis[2].imshow(Skeleton_IMG)","bece47cc":"figure,axis = plt.subplots(1,3,figsize=(18,18))\n\nPicking_IMG = Acc_List[499]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\nArray_Target = np.array(Gray_IMG > Gaus_IMG).astype(int)\nSkeleton_IMG = skimage.morphology.skeletonize(Array_Target)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(Skeleton_IMG.shape)\naxis[2].set_ylabel(Skeleton_IMG.size)\naxis[2].set_title(\"SKELETON\")\naxis[2].imshow(Skeleton_IMG)","eec03c7c":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\nPicking_IMG = Acc_List[499]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\nHessian_IMG = hessian_matrix(Gaus_IMG,sigma=0.5,order=\"rc\")\nmax_IMG,min_IMG = hessian_matrix_eigvals(Hessian_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(max_IMG.shape)\naxis[2].set_ylabel(max_IMG.size)\naxis[2].set_title(\"MAX\")\naxis[2].imshow(max_IMG)\n\naxis[3].set_xlabel(min_IMG.shape)\naxis[3].set_ylabel(min_IMG.size)\naxis[3].set_title(\"MIN\")\naxis[3].imshow(min_IMG)","acc33724":"figure,axis = plt.subplots(1,4,figsize=(18,18))\n\nPicking_IMG = Acc_List[34]\nGray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n_,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\nContours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\nCopy_Main_IMG = Picking_IMG.copy()\nTrans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\nfor cnt in Contours:\n    \n    approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n    n_count = approx.ravel()\n    i = 0\n\n    \n    for j in n_count:\n        if (i % 2 == 0):\n            x = n_count[i]\n            y = n_count[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            Trans_Empty_Zeros[int(y),int(x)] = 1\n                \n        i = i + 1\n    \n    \n\nGaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n\nHessian_IMG = hessian_matrix(Gaus_IMG,sigma=0.5,order=\"rc\")\nmax_IMG,min_IMG = hessian_matrix_eigvals(Hessian_IMG)\n\naxis[0].set_xlabel(Picking_IMG.shape)\naxis[0].set_ylabel(Picking_IMG.size)\naxis[0].set_title(\"ORIGINAL\")\naxis[0].imshow(Picking_IMG)\n\naxis[1].set_xlabel(Gaus_IMG.shape)\naxis[1].set_ylabel(Gaus_IMG.size)\naxis[1].set_title(\"TARGET\")\naxis[1].imshow(Gaus_IMG,cmap=\"hot\")\n\naxis[2].set_xlabel(max_IMG.shape)\naxis[2].set_ylabel(max_IMG.size)\naxis[2].set_title(\"MAX\")\naxis[2].imshow(max_IMG)\n\naxis[3].set_xlabel(min_IMG.shape)\naxis[3].set_ylabel(min_IMG.size)\naxis[3].set_title(\"MIN\")\naxis[3].imshow(min_IMG)","414113f9":"Original_List = []\nTarget_List = []\n\nfor image_x in Acc_List:\n    \n    Picking_IMG = image_x\n    Gray_IMG = cv2.cvtColor(Picking_IMG,cv2.COLOR_RGB2GRAY)\n    _,Threshold_IMG_TOZERO = cv2.threshold(Gray_IMG,10,255,cv2.THRESH_TOZERO)\n    Contours,_ = cv2.findContours(Threshold_IMG_TOZERO,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n\n    Copy_Main_IMG = Picking_IMG.copy()\n    Trans_Empty_Zeros = np.zeros((Copy_Main_IMG.shape[0],Copy_Main_IMG.shape[1]),dtype=np.float32)\n\n    for cnt in Contours:\n\n        approx = cv2.approxPolyDP(cnt,0.009*cv2.arcLength(cnt,True),True)    \n        n_count = approx.ravel()\n        i = 0\n\n\n        for j in n_count:\n            if (i % 2 == 0):\n                x = n_count[i]\n                y = n_count[i + 1]\n\n                string_coor = str(x) + \" \" + str(y)\n                Trans_Empty_Zeros[int(y),int(x)] = 1\n\n            i = i + 1\n\n\n\n    Gaus_IMG = gaussian_filter(Trans_Empty_Zeros,sigma=5,truncate=4*4)\n    \n    Original_List.append(Picking_IMG)\n    Target_List.append(Gaus_IMG)","5d71431a":"print(\"WHEN IT IS ARRAY ORIGINAL SHAPE: \",np.shape(np.array(Original_List)))\nprint(\"WHEN IT IS ARRAY TARGET SHAPE: \",np.shape(np.array(Target_List)))","1736c71c":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Original_List[100])\naxis[0].set_xlabel(Original_List[100].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Target_List[100])\naxis[1].set_xlabel(Target_List[100].shape)\naxis[1].set_title(\"TARGET\")","3ab628e6":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Original_List[1])\naxis[0].set_xlabel(Original_List[1].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Target_List[1])\naxis[1].set_xlabel(Target_List[1].shape)\naxis[1].set_title(\"TARGET\")","46983f24":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Original_List[10])\naxis[0].set_xlabel(Original_List[10].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Target_List[10])\naxis[1].set_xlabel(Target_List[10].shape)\naxis[1].set_title(\"TARGET\")","c0e8b053":"figure,axis = plt.subplots(1,2,figsize=(10,10))\n\naxis[0].imshow(Original_List[300])\naxis[0].set_xlabel(Original_List[300].shape)\naxis[0].set_title(\"ORIGINAL\")\naxis[1].imshow(Target_List[300])\naxis[1].set_xlabel(Target_List[300].shape)\naxis[1].set_title(\"TARGET\")","43666e01":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 300 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","c56e04d8":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 30 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","25ae4ee5":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 3 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","598138a1":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 450 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","5e899ec8":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 500 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","07749794":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 22 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","7d07c5b2":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 2 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","96c63085":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 444 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","bede65a4":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 401 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","8b06a6e8":"figure,axis = plt.subplots(1,2,figsize=(15,15))\n\nCount_IMG = 230 \n\naxis[0].imshow(Original_List[Count_IMG])\naxis[0].axis(\"off\")\naxis[1].imshow(Target_List[Count_IMG])\naxis[1].axis(\"off\")\n\nplt.savefig(f\"IMG{Count_IMG}.png\")","5163214d":"figure,axis = plt.subplots(5,5,figsize=(20,20))\n\nfor indexing,operations in enumerate(axis.flat):\n    \n    Picking_IMG = Target_List[indexing*5]\n    \n    operations.imshow(Picking_IMG)\n    operations.axis(\"off\")\n    plt.savefig(f\"IMG_TOTAL{indexing}.png\")\n    \nplt.tight_layout()\nplt.show()","4eaa750f":"Train_Set = np.array(Original_List,dtype=\"float32\")\nTransformation_Set = np.array(Target_List,dtype=\"float32\")\n\nTrain_Set = Train_Set \/ 255.\nTransformation_Set = Transformation_Set \/ 255.","ff10777e":"print(Train_Set.shape)\nprint(Transformation_Set.shape)","d49e9bbe":"Checkpoint_Model = tf.keras.callbacks.ModelCheckpoint(monitor=\"val_accuracy\",\n                                                      save_best_only=True,\n                                                      save_weights_only=True,\n                                                      filepath=\".\/modelcheck\")\nReduce_Model = tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_accuracy\",\n                                                   factor=0.02,\n                                                    min_delta=0.0001,\n                                                   patience=5)\n\ncompile_loss = \"binary_crossentropy\"\ncompile_optimizer = Adam(lr=0.0000001)\noutput_class = 1","d50ec1b2":"Encoder_G = Sequential()\nEncoder_G.add(Conv2D(32,(7,7),kernel_initializer = 'he_normal',use_bias=True))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(64,(7,7),kernel_initializer = 'he_normal',use_bias=True))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n#\nEncoder_G.add(Conv2D(128,(2,2),kernel_initializer = 'he_normal',use_bias=True))\nEncoder_G.add(BatchNormalization())\nEncoder_G.add(ReLU())\n\n\nDecoder_G = Sequential()\nDecoder_G.add(Conv2DTranspose(64,(7,7)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(32,(7,7)))\nDecoder_G.add(ReLU())\n#\nDecoder_G.add(Conv2DTranspose(output_class,(2,2)))","a60f379f":"Auto_Encoder = Sequential([Encoder_G,Decoder_G])\nAuto_Encoder.compile(loss=compile_loss,optimizer=compile_optimizer,metrics=[\"mse\"])","c611a0a9":"Model_AutoEncoder = Auto_Encoder.fit(Train_Set,Transformation_Set,epochs=25,callbacks=[Checkpoint_Model,Reduce_Model])","bff026e2":"Prediction_IMG = Auto_Encoder.predict(Train_Set)","e728cca3":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 1\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","08f8f74c":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 5\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","c9497383":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 8\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","88da14a0":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 250\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","3ec94420":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 444\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","9ea596cd":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 450\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","7eedc1ff":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 500\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"hot\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","4a5a4183":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 288\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"jet\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","5cc93ec7":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 88\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"jet\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","4eb5bb8c":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 8\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"jet\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","a2d554a4":"figure,axis = plt.subplots(1,2,figsize=(15,15))\nprediction_img_number = 221\n\nOriginal_Img = Train_Set[prediction_img_number]\nPredict_Target = Prediction_IMG[prediction_img_number]\n\naxis[0].imshow(Original_Img)\naxis[0].set_xlabel(Original_Img.shape)\naxis[0].set_ylabel(Original_Img.size)\naxis[0].set_title(\"IMAGE\")\naxis[1].imshow(Predict_Target,cmap=\"jet\")\naxis[1].set_xlabel(Predict_Target.shape)\naxis[1].set_ylabel(Predict_Target.size)\naxis[1].set_title(\"PREDICTION\")","00158e50":"# DATA PROCESS","83f3159c":"* the distribution of the black hole can be observed depending on the distance between the lines","178af88b":"##### SKELETON WITH TARGET","196aba5c":"* it is our main process","257817fc":"#### VIDEO TRANSFORMATION","116650ad":"#### MOV \/ MP4","ead00462":"# MODEL PROCESS","083de826":"##### KEYPOINTS WITH COORDINATES","897f638d":"##### TOTAL","a8d220ce":"##### HESSIAN SPECTRUM WITH TARGET","82296c5a":"##### EQUALIZE HISTOGRAM","9b2b8791":"![](https:\/\/static.projects.iq.harvard.edu\/files\/styles\/os_slideshow_3%3A1_980\/public\/eht\/files\/20190410-78m-4000x2330.jpg?m=1570794239&itok=nPArMslB)","c5e3ee88":"#### PATH","e817d5fc":"# OVERVIEW AND ANALYSIS PROCESS","d4fb5a05":"# HISTORY\n\n* A long standing goal in astrophysics is to directly observe the immediate environment of a black hole with angular resolution comparable to the event horizon. Such observations could lead to images of strong gravity effects that are expected near a black hole, and to the direct detection of dynamics near the black hole as matter orbits at near light speeds. This capability would open a new window on the study of general relativity in the strong field regime, accretion and outflow processes at the edge of a black hole, the existence of event horizons, and fundamental black hole physics.\n\n* The EHT is an international collaboration that has formed to continue the steady long-term progress on improving the capability of Very Long Baseline Interferometry (VLBI) at short wavelengths in pursuit of this goal. This technique of linking radio dishes across the globe to create an Earth-sized interferometer, has been used to measure the size of the emission regions of the two supermassive black holes with the largest apparent event horizons: SgrA* at the center of the Milky Way and M87 in the center of the Virgo A galaxy. In both cases, the sizes match that of the predicted silhouette caused by the extreme lensing of light by the black hole. Addition of key millimeter and submillimeter wavelength facilities at high altitude sites has now opened the possibility of imaging such features and sensing the dynamic evolution of black hole accretion. The EHT project includes theoretical and simulation studies that are framing questions rooted at the black hole boundary that may soon be answered through observations.\n\n* By linking together existing telescopes using novel systems, the EHT leverages considerable global investment to create a fundamentally new instrument with angular resolving power that is the highest possible from the surface of the Earth. Over the coming years, the international EHT team will mount observing campaigns of increasing resolving power and sensitivity, aiming to bring black holes into focus.","67f49dae":"##### THRESHOLD TYPE","b0b8b87c":"##### TRANSFORMATION OF COORDINATES \/ Measuring the Distance Between Singularity Point and Spiral Arms","72efc64a":"#### TRANSFORMATION","6a0d0a82":"##### CONTOURS AND POLYDP","c26215b2":"##### APPROX OVERVIEW AND PROCESS","5bffc702":"* we will use just Accretion Disk Video, but I want to show hot to export all frames","3ac1a71b":"##### CANNY TYPE","d35e5fb5":"#### TO ARRAY","8ce0a868":"#### ANALYSIS","6254d856":"# PACKAGES AND LIBRARIES","f8c9289c":"##### SPECIFIC","e53ecdb9":"##### CLAHE TYPE"}}