{"cell_type":{"ec9fbb04":"code","214d7904":"code","45a78aff":"code","ec09178e":"code","eb2b1c84":"code","ee2e9b45":"code","931f7f56":"code","4eb44368":"code","bf43447c":"code","9daad37f":"code","e0a9499f":"code","b2a6038c":"code","736e9a3d":"code","5c91042f":"code","06c00b1f":"code","d3161fba":"code","baa7f817":"code","71a812ef":"code","413e164a":"code","55471b66":"code","8638da3e":"code","c1f743b4":"code","10d939c5":"code","0fdaf43f":"code","86dbb0eb":"code","b639db3b":"markdown","abd8bbe4":"markdown","44ccc064":"markdown","9085bc37":"markdown","5674dd23":"markdown","8721c98b":"markdown","0cd1cb6d":"markdown","f5125ca5":"markdown","8b6f758c":"markdown","567c731a":"markdown","b4b540fb":"markdown","20dcbef1":"markdown"},"source":{"ec9fbb04":"import gc\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\n# \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\nfrom sklearn.preprocessing import quantile_transform\nfrom category_encoders import OrdinalEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom tqdm import tqdm_notebook as tqdm\n\n# \u30e2\u30c7\u30ea\u30f3\u30b0\nfrom sklearn.ensemble import GradientBoostingClassifier\n#import lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\n#\u4ea4\u5dee\u691c\u5b9a\u3084\u78ba\u8a8d\u6642\u306b\u5229\u7528\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score, log_loss","214d7904":"df_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])\ndf_test = pd.read_csv('..\/input\/homework-for-students2\/test.csv', index_col=0, parse_dates=['issue_d', 'earliest_cr_line'])","45a78aff":"# \u53e4\u3044\u30c7\u30fc\u30bf\u306ftot_coll_amt\u3084tot_cur_bal\u306b\u5024\u304c\u5165\u3063\u3066\u304a\u3089\u305a\u3001\u4fe1\u3074\u3087\u3046\u6027\u304c\u4f4e\u3044\u305f\u3081\u30012013\u5e74\u4ee5\u964d\u306e\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u306b\u5229\u7528\ndf_train = df_train[df_train['issue_d'].dt.year >= 2013]","ec09178e":"y_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\nX_test = df_test\ndel df_train, df_test\ngc.collect()","eb2b1c84":"X_all = pd.concat([X_train, X_test], axis=0)","ee2e9b45":"# \u878d\u8cc7\u5b9f\u65bd\u65e5\u3068credit lin\u958b\u901a\u6708\u306e\u6708\u6570(\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0)\nif X_all.earliest_cr_line is not None:\n    X_all['cr_month'] = (X_all.issue_d.dt.year * 12 + X_all.issue_d.dt.month) - (X_all.earliest_cr_line.dt.year * 12 + X_all.earliest_cr_line.dt.month)","931f7f56":"# \u65e5\u4ed8\u3092YYYYMM\u306e\u6570\u5b57\u5f62\u5f0f\u306b\u5909\u63db\u3002issue_d\u306f\u5c06\u6765\u4e88\u6e2c\u306b\u610f\u5473\u304c\u306a\u3044\u305f\u3081\u524a\u9664\nX_all = X_all.drop(['issue_d'], axis=1)\nX_all['earliest_cr_line'] = X_all.earliest_cr_line.dt.year * 100 + X_all.earliest_cr_line.dt.month","4eb44368":"# \u7279\u5fb4\u91cf\u8ffd\u52a0\u3067\u4f7f\u3046\u9805\u76ee\u306f\u3001median\u3067\u88dc\u5b8c\nX_all['dti'].fillna(X_all['dti'].median(), inplace=True)","bf43447c":"#\u3000\u91d1\u984d\u7279\u5fb4\u91cf\u306e\u6bd4\u7387\u3092\u8a08\u7b97\nX_all['loan1'] = X_all['loan_amnt'] \/ X_all['installment']\nX_all['loan2'] = X_all['loan_amnt'] \/ X_all['annual_inc']\nX_all['loan3'] = X_all['loan_amnt'] \/ X_all['revol_bal']\nX_all['loan4'] = X_all['loan_amnt'] \/ X_all['tot_cur_bal']\n\nX_all['installment1'] = X_all['installment'] \/ X_all['annual_inc']\nX_all['installment2'] = X_all['installment'] \/ X_all['revol_bal']\nX_all['installment3'] = X_all['installment'] \/ X_all['tot_cur_bal']\n\nX_all['revol_bal1'] = X_all['revol_bal'] \/ X_all['annual_inc']\nX_all['revol_bal2'] = X_all['revol_bal'] \/ X_all['tot_cur_bal']\n\nX_all['tot_cur_bal1'] = X_all['tot_cur_bal'] \/ X_all['annual_inc']\n\nX_all['dti1'] = X_all['dti'] \/ 100 * X_all['annual_inc'] \/ 12\nX_all['dti2'] = X_all['dti1'] - X_all['installment']\n\n# 0\u9664\u7b97\u306b\u3088\u308b\u30a8\u30e9\u30fc\u5bfe\u5fdc\nX_all.replace([np.inf, -np.inf], np.nan, inplace=True)\n\nX_all.describe()","9daad37f":"nums = []\nfor col in X_all.columns:\n    if X_all[col].dtype != 'object':\n        nums.append(col)\n        print(col, X_all[col].nunique())","e0a9499f":"X_all[nums] = quantile_transform(X_all[nums], n_quantiles=100, random_state=0, output_distribution='normal')","b2a6038c":"# grade\u3068sub_grade\u306f\u9806\u5e8f\u304c\u3042\u308b\u305f\u3081\u3001\u9806\u5e8f\u306b\u5fdc\u3058\u3066\u5909\u63db\u3059\u308b\u3002\ngrade_map = {'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7}\nsub_grade_map = {'A1':1,'A2':2,'A3':3,'A4':4,'A5':5,\n                 'B1':6,'B2':7,'B3':8,'B4':9,'B5':10, \n                 'C1':11,'C2':12,'C3':13,'C4':14,'C5':15, \n                 'D1':16,'D2':17,'D3':18,'D4':19,'D5':10, \n                'E1':21,'E2':22,'E3':23,'E4':24,'E5':25, \n                 'F1':26,'F2':27,'F3':28,'F4':29,'F5':20, \n                 'G1':31,'G2':32,'G3':33,'G4':34,'G5':35}\nX_all['grade'] = X_all['grade'].map(grade_map)\nX_all['sub_grade'] = X_all['sub_grade'].map(sub_grade_map)","736e9a3d":"# emp_length\u306f\u52e4\u52d9\u5e74\u6570\u306a\u306e\u3067\u3001\u6570\u5024\u5316\u3059\u308b\u3002\nemp_len_map = {'< 1 year':0,'1 year':1,'2 years':2,'3 years':3,'4 years':4,'5 years':5,\n               '6 years':6,'7 years':7,'8 years':8,'9 years':9,'10+ years':10}\nX_all['emp_length'] = X_all['emp_length'].map(emp_len_map)\nX_all['emp_length'].fillna(-1,inplace=True)","5c91042f":"# zip_code\u306f\u5148\u982d3\u6587\u5b57\u5207\u308a\u51fa\u3057\nX_all['zip_code'] = X_all['zip_code'].str[:3]","06c00b1f":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067title\u306b\u5dee\u304c\u3042\u308b\u305f\u3081\u3001\u5171\u901a\u3057\u306a\u3044title\u3092\u7f6e\u63db\nX_all['title'] = X_all['title'].str.lower()\nstitle = set(X_test['title'].str.lower()) ^ set(X_train['title'].str.lower())\nX_all.loc[X_all['title'].isin(stitle),'title'] = '#train only#'\nX_all['title'].fillna('#null#',inplace=True)","d3161fba":"# emp_title\u306f\u30c6\u30ad\u30b9\u30c8\u5316\u3067\u884c\u3046\u305f\u3081\u3001\u4e00\u65e6\u524a\u9664\ntxt_all = X_all['emp_title'].str.lower()\nX_all.drop(['emp_title'], axis=1, inplace=True)","baa7f817":"# \u30ab\u30c6\u30b4\u30ea\u306e\u30e6\u30cb\u30fc\u30af\u6570\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3082\u51fa\u529b\u3059\u308b\u3068title\u306b\u5927\u304d\u306a\u5dee\u7570\u304c\u3042\u3063\u305f\uff09\ncats = []\nfor col in X_all.columns:\n    if X_all[col].dtype == 'object':\n        cats.append(col)\n        print(col, X_all[col].nunique())","71a812ef":"X_all['grade_cnt'] = X_all['grade'].map(X_all['grade'].value_counts())\nX_all['sub_grade_cnt'] = X_all['sub_grade'].map(X_all['sub_grade'].value_counts())\nX_all['emp_length_cnt'] = X_all['emp_length'].map(X_all['emp_length'].value_counts())\nX_all['zip_code_cnt'] = X_all['zip_code'].map(X_all['zip_code'].value_counts())\n#X_all['emp_title_cnt'] = X_all['emp_title'].map(X_all['emp_title'].value_counts())\nX_all['title_cnt'] = X_all['title'].map(X_all['title'].value_counts())\nX_all['home_ownership_cnt'] = X_all['home_ownership'].map(X_all['home_ownership'].value_counts())\nX_all['purpose_cnt'] = X_all['purpose'].map(X_all['purpose'].value_counts())\nX_all['addr_state_cnt'] = X_all['addr_state'].map(X_all['addr_state'].value_counts())\nX_all['initial_list_status_cnt'] = X_all['initial_list_status'].map(X_all['initial_list_status'].value_counts())\nX_all['application_type_cnt'] = X_all['application_type'].map(X_all['application_type'].value_counts())","413e164a":"# \u30ab\u30c6\u30b4\u30ea\u3092\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nencoder = OrdinalEncoder(cols=cats)\nX_all[cats] = encoder.fit_transform(X_all[cats])","55471b66":"tfidf = TfidfVectorizer(strip_accents='ascii', stop_words='english', max_features=300, ngram_range=(1,2))\ntxt_all = tfidf.fit_transform(txt_all.fillna('#'))\nX_all = pd.concat([X_all, pd.DataFrame(txt_all.todense(), index=X_all.index)], axis=1)","8638da3e":"X_all.fillna(-9999, inplace=True)","c1f743b4":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272\nX_train = X_all.iloc[:X_train.shape[0], :]\nX_test = X_all.iloc[X_train.shape[0]:, :]\ndel X_all\ngc.collect()","10d939c5":"skf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nscores = []\ntotal_score = 0\ny_tests = np.zeros(len(X_test.index))\n\nclf = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.71,\n                     importance_type='split', learning_rate=0.05, max_depth=-1,\n                     min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                     n_estimators=9999, n_jobs=-1, num_leaves=31, objective=None,\n                     random_state=71, reg_alpha=1.0, reg_lambda=1.0, silent=True,\n                     subsample=0.9, subsample_for_bin=200000, subsample_freq=0)\n\nfor i, (train_ix, test_ix) in enumerate(tqdm(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf.fit(X_train_, y_train_, early_stopping_rounds=200, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred = clf.predict_proba(X_val)[:,1]\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    y_tests += clf.predict_proba(X_test)[:,1]","0fdaf43f":"y_pred = y_tests\/len(scores)","86dbb0eb":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# \u3053\u3061\u3089\u3082\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b20\u5206\u306e\uff11\u306b\u9593\u5f15\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u756a\u3067\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u7528\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","b639db3b":"## \u6709\u76ca\u3068\u601d\u308f\u308c\u308b\u7279\u5fb4\u91cf\u306e\u8ffd\u52a0","abd8bbe4":"## \u30c7\u30fc\u30bf\u3092\u8aad\u8fbc\u307f\u3001X\uff1a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068y\uff1a\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u5206\u5272","44ccc064":"## submit","9085bc37":"## Ordinal Encoder","5674dd23":"# AI Academy FE&Modeling Notebook(Manabu Hirono)","8721c98b":"## Count Encording","0cd1cb6d":"## train\u3068test\u3092\u7d50\u5408","f5125ca5":"## \u30c6\u30ad\u30b9\u30c8\u306e\u5909\u63db","8b6f758c":"## RankGauss\u5909\u63db","567c731a":"## \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5206\u5272","b4b540fb":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","20dcbef1":"## \u30ab\u30c6\u30b4\u30ea\u5024\u306e\u5909\u63db\u3092\u884c\u3046"}}