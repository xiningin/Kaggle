{"cell_type":{"acb0c594":"code","d55b1b09":"code","bb9fd7a0":"code","88162372":"code","dfbcd005":"code","d356a172":"code","4b7eaf78":"code","334c7958":"code","cb1358be":"code","574e38e9":"code","570b1ac5":"code","a4a61322":"code","33cf9cd4":"code","a9861dfa":"code","801e6ec8":"code","b6593f12":"code","f5ad9d44":"code","21b91be0":"code","4802e08f":"code","c249dbf1":"code","fa99190e":"code","b18d2071":"code","7871f847":"code","dad1f2c8":"code","d286ea24":"code","016331cf":"code","36d4a7ed":"code","5529c10a":"code","076c1a51":"code","d967b0c5":"code","bd500a66":"code","9d34c338":"code","ff0dbc50":"code","e789af78":"markdown","75f4b25e":"markdown","8341939f":"markdown","86f0b32d":"markdown","3bfde64c":"markdown","0246908e":"markdown","86cf8f6d":"markdown","b1d6822f":"markdown","46807e62":"markdown","4141d61f":"markdown"},"source":{"acb0c594":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d55b1b09":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","bb9fd7a0":"dataset = pd.read_csv('..\/input\/titanic\/train.csv')\ndataset","88162372":"#Checking dataset description\ndataset.describe()","dfbcd005":"#going to delete unnecessary columns(columns that we dont need further)\ndataset.drop(['Name','Ticket','Cabin','Embarked','PassengerId'],axis=True,inplace=True)","d356a172":"#view dataset after removing unnecessary columns\ndataset","4b7eaf78":"#now going to remove some outliers from dataset( outliers = 'An outlier is an observation that lies an abnormal distance from other values in a random sample from a population' )\n\ndataset.quantile(1)     ##outliers at 100%","334c7958":"dataset.quantile(0.99)   ##outliers at 99%","cb1358be":"#From above we can see massive amount of outliers is from \"Fare\" column. So we going to clear outliers for batter dataset!\noutlierFare =  dataset.Fare.quantile(1)\nnewDataset = dataset[dataset.Fare < outlierFare]\nnewDataset","574e38e9":"#Now we deleted the outliers so now it's easy to work with missing values!","570b1ac5":"#Cheking which column has missing values and how much values are missing!\nnewDataset.isnull().sum()","a4a61322":"#from above you can see that \"Age\" column has 177 missing values \n#we need to fill that missing values by placing average values(\"using mean function\")\nnewDataset= newDataset.fillna(newDataset.Age.mean())\nnewDataset.isnull().sum()","33cf9cd4":"#now from above you can see that column \"Age\" does not have any missing values left!!","a9861dfa":"plt.figure(figsize=(15,8))\ncorr = newDataset.corr()\nsns.heatmap(corr)","801e6ec8":"passengers = newDataset['Sex']\nsurvived = newDataset['Survived']\nplt.figure(figsize=(10,6))\nplt.grid()\nsns.countplot(x = survived,hue=passengers)\n","b6593f12":"sns.catplot(data=newDataset,kind='violin',x=\"Survived\",y=\"Fare\",hue=\"Sex\")","f5ad9d44":"# N age of Passengers who are traveling on the titanic\nplt.figure(figsize = (10,6))\nplt.title(\"Passengers Age who are traveling on the titanic\")\nplt.grid()\nsns.histplot(data = newDataset,x='Age',color='#E0C3FC',binwidth=5)","21b91be0":"#So we can see from above chart that maximum age ratio is between 20 to 40\n\n#Passengers who can't survived\nplt.figure(figsize = (10,6))\nplt.title(\"Passengers Age who can't survived\")\nplt.grid()\nsns.histplot(x=newDataset.loc[newDataset['Survived'] == 0 ,'Age'],color='red',binwidth=5)","4802e08f":"#Passengers are survived\nplt.figure(figsize = (10,6))\nplt.title(\"Passengers Age who survived\")\nplt.grid()\nsns.histplot(x=newDataset.loc[newDataset['Survived'] == 1 ,'Age'],color='green',binwidth=5)","c249dbf1":"#Features \nx = newDataset.iloc[:,1:7].values\nx","fa99190e":"#Data Encoding on 'x' set!\n##Here we are converting column 'Sex' into integer\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nx[:,1] = le.fit_transform(x[:,1])\n\n##Feature Scaling (make all values between '-3 , 3')\nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nx = ss.fit_transform(x)\nx","b18d2071":"#Dependent Variable\ny = newDataset.iloc[:,0].values\ny","7871f847":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(random_state=0)\nclassifier.fit(x,y)\ny_test = classifier.predict(x)","dad1f2c8":"#we going to use 'accuracy score' to find out accuracy of our model\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nprint(accuracy_score(y,y_test))","d286ea24":"#here we going to use 'confusion matrix' to check our prediction\nprint(confusion_matrix(y,y_test))","016331cf":"final_x = pd.read_csv(\"..\/input\/titanic\/test.csv\")","36d4a7ed":"#going to delete unnecessary columns(columns that we dont need further)\nfinal_x = final_x.drop(['Name','Ticket','Cabin','Embarked','PassengerId'],axis=True)","5529c10a":"#checking if dataset \"final_x\" have any missing values.\nfinal_x.isnull().sum()","076c1a51":"#from above you can see that \"Age\" column has \"86\" missing values and \"Fare\" have \"1\". \n#we need to fill that missing values by placing average values(\"using mean function\")\nfinal_x = final_x.fillna(final_x.Age.mean())\nfinal_x.isnull().sum()","d967b0c5":"#Data Encoding on 'final_x' set!\n##Here we are converting column 'Sex' into integer\nfinal_x = final_x.values\nfinal_x[:,1] = le.fit_transform(final_x[:,1])\n\n##Feature Scaling (make all values between '-3 , 3')\nfinal_x = ss.fit_transform(final_x)\nfinal_x","bd500a66":"final_pred = classifier.predict(final_x)\nfinal_pred","9d34c338":"#preparing submission file's\nfinal_X = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nsubmission = pd.DataFrame(columns = ['PassengerId','Survived'])\nsubmission['PassengerId'] = final_X['PassengerId']\nsubmission['Survived'] = final_pred","ff0dbc50":"submission.to_csv(\"submission.csv\",header=True,index=False)","e789af78":"# **Predicting Result On \"test.csv\" using Decision Tree model!**","75f4b25e":"# **Data Cleaning** ( *Removing corrupt or inaccurate records from a given set*)","8341939f":"> ##  Male & Female From The Survived Passenger's ","86f0b32d":"# **Creating Dataset**","3bfde64c":"# **Splitting dataset into x(Features) and y(Dependent Variable) set's for model training**","0246908e":"# **Work on missing value from dataset**","86cf8f6d":"# **Data Visualization**","b1d6822f":"# **Importing Needed Libraries**","46807e62":"# **Training & Testing Our Model**","4141d61f":" > ## Decision Tree Classification"}}