{"cell_type":{"032b8b63":"code","45228e89":"code","556ecbb9":"code","1b9d90e6":"code","1480154c":"code","16ba543a":"code","e94a28cb":"code","dd8197e5":"code","ec09a0e9":"code","8a677572":"code","cab923ed":"code","a3e25e40":"code","56dfae75":"code","a43bf045":"code","819e722a":"code","60d1f550":"code","da8ad794":"code","e7579e48":"code","5270cda1":"code","abb062b9":"code","ac187e33":"code","203279cd":"code","dfa909ca":"code","4845644e":"code","3a2d4946":"code","3d095c96":"code","9f445133":"code","f0301a63":"code","00677ae0":"code","4a288910":"markdown","bf7fb1df":"markdown","cc03c9f6":"markdown","6facb771":"markdown","2b0c83af":"markdown","85c6e38c":"markdown","65d9328d":"markdown","e928e857":"markdown","28018044":"markdown","80878146":"markdown","784b5a9d":"markdown","2cd1e4b2":"markdown"},"source":{"032b8b63":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom collections import Counter\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report \n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","45228e89":"df = pd.read_csv('..\/input\/forest-cover-type-dataset\/covtype.csv')","556ecbb9":"df.head(3)","1b9d90e6":"df.tail(3)","1480154c":"# Find the shape of dataset\n\ndf.shape","16ba543a":"# Find the datatype of each attribute\n\ndf.info()","e94a28cb":"# Statistics for numeric attributes\n\ndf.describe()","dd8197e5":"# Check for duplicates\n\nduplicate = df[df.duplicated()]\nduplicate","ec09a0e9":"# Find the total number of missing values in each column\n\ndf.isna().sum()","8a677572":"plt.style.use('seaborn')","cab923ed":"# PLot Correlation Matrix\n\ncorr = df.corr()\ncorr.style.background_gradient(cmap='PuBu').set_precision(2)","a3e25e40":"# Display top 10 pairs with highest correlation \n\ndf.corr().unstack().sort_values().drop_duplicates()","56dfae75":"# Plotting all the attributes w.r.t its count\n\nfig, ax = plt.subplots(19, 3, figsize=(50, 120))\nfor variable, subplot in zip(df, ax.flatten()):\n    sns.histplot(df[variable], ax=subplot)\n    for label in subplot.get_xticklabels():\n        label.set_rotation(90)","a43bf045":"# Distribution of Cover_Type\n\nsns.countplot(data=df, x='Cover_Type')","819e722a":"cols = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points']\n\nscaler = StandardScaler()\nfor col in cols:\n    df[[col]] = scaler.fit_transform(df[[col]])","60d1f550":"# Dataset\n\ndf","da8ad794":"# Separate the independent and dependent variables\n\nX = df.iloc[:, :-1]        # Independent variables\ny = df.iloc[:, -1]         # Dependent variable","e7579e48":"# Transform the dataset\n\nsm = SMOTE(random_state=0)\nX, y = sm.fit_resample(X, y)","5270cda1":"# Split the dataset into train and test set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nprint(\"X_train:\", X_train.shape)\nprint(\"X_test:\", X_test.shape)\nprint(\"y_train:\", y_train.shape)\nprint(\"y_test:\", y_test.shape)","abb062b9":"classifier = Sequential()\nclassifier.add(Dense(units=54, kernel_initializer='he_uniform', activation='relu', input_dim = 54))\nclassifier.add(Dense(units=50, kernel_initializer='he_uniform', activation='relu'))\nclassifier.add(Dense(units=35, kernel_initializer='he_uniform', activation='relu'))\nclassifier.add(Dense(units=8, activation='softmax'))\n\n# Compiling the ANN\nclassifier.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","ac187e33":"classifier.summary()","203279cd":"model_history = classifier.fit(X_train, y_train, validation_split=0.33, batch_size=1000, epochs=100)","dfa909ca":"# List all data in history\nprint(model_history.history.keys())\n\n# Summarize history for accuracy\nplt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","4845644e":"# Summarize history for loss\n\nplt.plot(model_history.history['loss'])\nplt.plot(model_history.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","3a2d4946":"# Calculating score\n\nscore = classifier.evaluate(X_test, y_test)\nscore","3d095c96":"# Predicting on test data\n\ny_pred = classifier.predict(X_test)\ny_pred = np.argmax(y_pred, axis=1)\ny_pred","9f445133":"# Accuracy\n\naccuracy_score(y_pred, y_test)","f0301a63":"# Classification Report\n\nprint(classification_report(y_pred, y_test))","00677ae0":"# Confusion Matrix\n\ncm = confusion_matrix(y_test, y_pred)\n\nax= plt.subplot()\nsns.heatmap(cm, annot=True, ax=ax); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_xlabel('Predicted labels')\nax.set_ylabel('True labels')\nax.set_title('Confusion Matrix')","4a288910":"### The classification accuracy is 93.87%","bf7fb1df":"## Loading the dataset","cc03c9f6":"**The dataset has 5,81,012 records and 55 columns.**","6facb771":"<b>Observations:-<\/b>\n<ul>\n    <li>There is a negative correlation of 0.79 between Wilderness_Area3 and Wilderness_Area1.<\/li>\n    <li>There is a negative correlation of 0.78 between Hillshade_3pm and Hillshade_9am.<\/li>\n    <li>There is a negative correlation of 0.79 between Wildernedd_Area3 and Wilderness_Area1.<\/li>","2b0c83af":"<b> Simple statistics like count, mean, min, max, etc is calculated for attributes having numeric datatype.<br>\nSome of the conclusions drawn from the above table are:<br> <\/b>\n<ol>\n    <li>The average elevation is 2959.365 m whereas the median elevation is 2996.<\/li>\n    <li>The median aspect is 127 degree azimuth and the median slope is 13 degrees.<\/li>\n    <li>The average horizontal distance to hydrology is 269.428 m and average vertical distance to hydrology is 46.418 m<\/li>\n    <li>The maximum elevation is 3858 m.<\/li>\n    <li>The minimum distance to roadways is 0 m and maximum distance is 7117 m.<\/li>\n<\/ol>","85c6e38c":"**The dataset does not have any null values.**","65d9328d":"**The dataset has 55 integer columns.**","e928e857":"## Exploratory Data Analysis","28018044":"## Importing libraries","80878146":"**The dataset does not have any duplicate record.**","784b5a9d":"### Attribute Description\n\n1. Elevation: Eelevation in meters\n2. Aspect: Aspect in degrees azimuth\n3. Slope: Slope in degrees\n4. Horizontal_Distance_To_Hydrology: Horizontal distance to nearest surface water features\n5. Vertical_Distance_To_Hydrology: Vertical distance to nearest surface water features\n6. Horizontal_Distance_To_Roadways: Horizontal distance to nearest roadways\n7. Hillshade_9am: Hillshade index at 9AM\n8. Hillshade_Noon: Hillshade index at noon\n9. Hillshade_3pm: Hillshade index at 3PM\n10. Horizontal_Distance_To_Fire_Points: Horizontal distance to nearest wildfire ignition points\n11. Wilderness_Area: 4 binary columns. 0 indicates absent and 1 indicates present\n12. Soil_Type: 40 binary columns. 0 indicates absent and 1 indicates present\n13. Cover_Type: 7 forest cover types","2cd1e4b2":"## Model"}}