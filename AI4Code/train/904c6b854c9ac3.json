{"cell_type":{"968798a8":"code","1fc766d2":"code","80b739a4":"code","2b3cd3c6":"code","64d5cb62":"code","e4541efb":"code","cbce0bf9":"code","4ba7ef70":"code","c9096f6b":"code","63edc3b8":"code","ad5422b7":"code","b713b204":"code","8556842d":"code","c812b716":"code","6637d760":"code","a2152d80":"code","9ce6dd0c":"code","598fc6f3":"code","ec3366dc":"code","1e7dad28":"code","6fdbea21":"code","6d12cae5":"code","9b1fdebf":"markdown","c792addf":"markdown","aad47a01":"markdown","11d71ce4":"markdown","047178d8":"markdown","0e1644ef":"markdown","cb21130b":"markdown","4f05484b":"markdown"},"source":{"968798a8":"!pip install jcopdl\n!pip install jcopml","1fc766d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# COMMON PACKAGES\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport torch\nfrom torch import nn, optim\nfrom jcopdl.callback import Callback, set_config\n\nimport helper\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80b739a4":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\ndevice","2b3cd3c6":"# DATASET & DATALOADER\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader","64d5cb62":"bs = 32\ncrop_size = 224\n\ntrain_transform = transforms.Compose([\n    transforms.RandomRotation(10), #rotation 10%\n    transforms.RandomResizedCrop(crop_size, scale=(0.7, 1)), #max zoom 70% from data\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) \n])\n\ntest_transform = transforms.Compose([ \n    transforms.Resize(230), #256 replaced 230 so that the size is not far from CenterCrop 224\n    transforms.CenterCrop(224),\n    transforms.ToTensor(),\n    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n]) #rule\n\ntrain_set = datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\", transform=train_transform) \ntrainloader = DataLoader(train_set, batch_size=bs, shuffle=True, num_workers=4)\n\ntest_set = datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val\", transform=test_transform)\ntestloader = DataLoader(test_set, batch_size=bs, shuffle=True)","e4541efb":"len(train_set.classes)","cbce0bf9":"feature, target = next(iter(trainloader))\nfeature.shape","4ba7ef70":"#label category\nlabel2cat = train_set.classes\nlabel2cat","c9096f6b":"#how to use Pretrained-Models\nfrom torchvision.models import densenet161\n\nmnet = densenet161(pretrained=True) #True: download model & weightnya \n\n#freze weight\nfor param in mnet.parameters():\n    param.requires_grad = False","63edc3b8":"mnet","ad5422b7":"#replacing classifier sequential\nmnet.classifier = nn.Sequential(\n    nn.Linear(2208, 2), #2 total class\n    nn.LogSoftmax() \n)","b713b204":"#custom arsitektur\nclass Customdensenet161(nn.Module):\n    def __init__(self, output_size):\n        super().__init__()\n        self.mnet = densenet161(pretrained=True) #arsitektur\n        self.freeze()\n        self.mnet.classifier = nn.Sequential(  \n            #linear_block(2208, 1, activation=\"lsoftmax\")\n            nn.Linear(2208, output_size),\n            nn.LogSoftmax()\n        )\n        \n    def forward(self, x):\n        return self.mnet(x)\n\n    def freeze(self):\n        for param in self.mnet.parameters():\n            param.requires_grad = False\n            \n    def unfreeze(self):        \n        for param in self.mnet.parameters():\n            param.requires_grad = True        ","8556842d":"config = set_config({\n    \"output_size\": len(train_set.classes),\n    \"batch_size\": bs,\n    \"crop_size\": crop_size\n})","c812b716":"model = Customdensenet161(config.output_size).to(device)\ncriterion = nn.NLLLoss()\noptimizer = optim.AdamW(model.parameters(), lr=0.001)\ncallback = Callback(model, config, early_stop_patience=2, outdir=\"model\")","6637d760":"#training \nfrom tqdm.auto import tqdm\n\ndef loop_fn(mode, dataset, dataloader, model, criterion, optimizer, device):\n    if mode == \"train\":\n        model.train()\n    elif mode == \"test\":\n        model.eval()\n    cost = correct = 0\n    for feature, target in tqdm(dataloader, desc=mode.title()):\n        feature, target = feature.to(device), target.to(device)\n        output = model(feature)\n        loss = criterion(output, target)\n        \n        if mode == \"train\":\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        \n        cost += loss.item() * feature.shape[0]\n        correct += (output.argmax(1) == target).sum().item()\n    cost = cost \/ len(dataset)\n    acc = correct \/ len(dataset)\n    return cost, acc","a2152d80":"#training standart\nwhile True:\n    train_cost, train_score = loop_fn(\"train\", train_set, trainloader, model, criterion, optimizer, device)\n    with torch.no_grad():\n        test_cost, test_score = loop_fn(\"test\", test_set, testloader, model, criterion, optimizer, device)\n    \n    # Logging\n    callback.log(train_cost, test_cost, train_score, test_score)\n\n    # Checkpoint\n    callback.save_checkpoint()\n        \n    # Runtime Plotting\n    callback.cost_runtime_plotting()\n    callback.score_runtime_plotting()\n    \n    # Early Stopping\n    if callback.early_stopping(model, monitor=\"test_score\"):\n        callback.plot_cost()\n        callback.plot_score()\n        break","9ce6dd0c":"model.unfreeze()\noptimizer = optim.AdamW(model.parameters(), lr=1e-5)\n\ncallback.reset_early_stop()\ncallback.early_stop_patience = 5","598fc6f3":"#training standart \n\nwhile True:\n    train_cost, train_score = loop_fn(\"train\", train_set, trainloader, model, criterion, optimizer, device)\n    with torch.no_grad():\n        test_cost, test_score = loop_fn(\"test\", test_set, testloader, model, criterion, optimizer, device)\n    \n    # Logging\n    callback.log(train_cost, test_cost, train_score, test_score)\n\n    # Checkpoint\n    callback.save_checkpoint()\n        \n    # Runtime Plotting\n    callback.cost_runtime_plotting()\n    callback.score_runtime_plotting()\n    \n    # Early Stopping\n    if callback.early_stopping(model, monitor=\"test_score\"):\n        callback.plot_cost()\n        callback.plot_score()\n        break\n\n","ec3366dc":"test_set = datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\/\",transform=test_transform)\ntestloader = DataLoader(test_set,batch_size = bs)\n\nwith torch.no_grad():\n        test_cost, test_score = loop_fn(\"test\", test_set, testloader, model, criterion, optimizer, device)\n        print(f\"Test accuracy:{test_score}\")\n","1e7dad28":"feature, target = next(iter(testloader))\nfeature, target = feature.to(device), target.to(device)","6fdbea21":"with torch.no_grad():\n    model.eval()\n    output = model(feature)\n    preds = output.argmax(1)\npreds","6d12cae5":"fig, axes = plt.subplots(6, 6, figsize=(24, 24))\nfor image, label, pred, ax in zip(feature, target, preds, axes.flatten()):\n    ax.imshow(image.permute(1, 2, 0).cpu())\n    font = {\"color\": 'r'} if label != pred else {\"color\": 'g'}        \n    label, pred = label2cat[label.item()], label2cat[pred.item()]\n    ax.set_title(f\"L: {label} | P: {pred}\", fontdict=font);\n    ax.axis('off');","9b1fdebf":"## Phase 1: Adaptation (lr standard + patience low)","c792addf":"## Predict","aad47a01":"# Dataset & Dataloader","11d71ce4":"## Visualization","047178d8":"## Arsitektur & Config","0e1644ef":"<img src=\"https:\/\/www.drugs.com\/health-guide\/images\/022dc126-fc5d-4e54-9a78-75f2c9ea4bb6.jpg\">\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/2a\/Chest_X-ray_in_influenza_and_Haemophilus_influenzae_-_annotated.jpg\/300px-Chest_X-ray_in_influenza_and_Haemophilus_influenzae_-_annotated.jpg\"> ","cb21130b":"# [](http:\/\/)Pneumonia\n\nis an inflammatory condition of the lung affecting primarily the small air sacs known as alveoli, Typically symptoms include some combination of productive or dry cough, chest pain, fever, and trouble breathing. Severity is variable.\n\nPneumonia is usually caused by infection with viruses or bacteria and less commonly by other microorganisms, certain medications and conditions such as autoimmune diseases.  Risk factors include other lung diseases such as cystic fibrosis, COPD, and asthma, diabetes, heart failure, a history of smoking, a poor ability to cough such as following a stroke, or a weak immune system. Diagnosis is often based on the symptoms and physical examination. Chest X-ray, blood tests, and culture of the sputum may help confirm the diagnosis. The disease may be classified by where it was acquired with community, hospital, or health care associated pneumonia. **[See the source](https:\/\/en.wikipedia.org\/wiki\/Pneumonia)**","4f05484b":"## Phase 2: Fine-tuning (lr low, patience increases)"}}