{"cell_type":{"affc7a36":"code","b83bc976":"code","cdf777c5":"code","b0b5b2d5":"code","7c162749":"code","a0770b40":"code","1e400b3d":"code","76d5c60d":"code","7524f4d5":"code","019d9f32":"code","c8d47ef1":"code","c63591f5":"code","5b7e9e44":"code","4bd0883b":"code","f76f8b1b":"code","84ac0f74":"code","2c4140b7":"code","10121d67":"code","b36daa68":"code","6ac9943d":"code","6ead6a96":"code","2482239a":"code","18ee63fd":"code","d13cf751":"code","e1f6945d":"code","5fa2acc2":"code","63e0684f":"markdown","fcb92148":"markdown","5f36040e":"markdown","ae8bff58":"markdown","372db468":"markdown","b7eeae85":"markdown","d6b7ad47":"markdown","c44c9aad":"markdown","78ec31e0":"markdown","e7788e82":"markdown","c6a46cc5":"markdown","1a1fb4f2":"markdown","430aa7f5":"markdown","0f2edeac":"markdown","34312f5b":"markdown","bd71fb81":"markdown","42a0bda9":"markdown","e32c99ea":"markdown","cdbd4061":"markdown","dbfacacd":"markdown","b0b79103":"markdown","3991eaab":"markdown","aec48301":"markdown","964b5f73":"markdown"},"source":{"affc7a36":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport time\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","b83bc976":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntrain","cdf777c5":"test = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ntest","b0b5b2d5":"all_data = pd.concat([train, test])\nall_data","7c162749":"all_data.info()","a0770b40":"all_data['date_time'] = pd.to_datetime(all_data['date_time'])\nall_data['year'] = all_data['date_time'].dt.year\nall_data['month'] = all_data['date_time'].dt.month\nall_data['week'] = all_data['date_time'].dt.week\nall_data['day'] = all_data['date_time'].dt.day\nall_data['dayofweek'] = all_data['date_time'].dt.dayofweek\nall_data['time'] = all_data['date_time'].dt.date - all_data['date_time'].dt.date.min()\nall_data['hour'] = all_data['date_time'].dt.hour\nall_data['time'] = all_data['time'].apply(lambda x : x.days)\nall_data.drop(columns = 'date_time', inplace = True)\nall_data","1e400b3d":"all_data['dayofweek'] = all_data['dayofweek'].astype(object)\nall_data = pd.get_dummies(all_data)","76d5c60d":"# all_data['SMC'] = (all_data['absolute_humidity'] * 100) \/ all_data['relative_humidity']\n# all_data['Dew_Point'] = 243.12*(np.log(all_data['relative_humidity'] * 0.01) + (17.62 * all_data['deg_C'])\/(243.12+all_data['deg_C']))\/(17.62-(np.log(all_data['relative_humidity'] * 0.01)+17.62*all_data['deg_C']\/(243.12+all_data['deg_C'])))\n# all_data['relative_humidity'] = all_data['relative_humidity']\/100\n# all_data['deg_F'] = all_data['deg_C'] * 1.8 + 32","7524f4d5":"train2 = all_data[:len(train)]\ntest2 = all_data[len(train):]\n# train['SMC'] = train2['SMC']","019d9f32":"def log_scaling(col):\n  col = np.log1p(col)\n  return col","c8d47ef1":"cols = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\nfor col in cols:\n  train2[col] = log_scaling(train2[col])","c63591f5":"fig, ax = plt.subplots(len(cols), 2, figsize=(12,12))\nn = 0\nfor i in cols:\n  sns.histplot(train[i], ax=ax[n, 0]);\n  sns.histplot(train2[i], ax = ax[n, 1]);\n  n += 1\n\nfig.tight_layout()\nplt.show()","5b7e9e44":"train_3 = train2.drop(columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\ntest_3 = test2.drop(columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\n\ntrain_co = train2.drop(columns = ['target_benzene', 'target_nitrogen_oxides'])\ntrain_be = train2.drop(columns = ['target_carbon_monoxide', 'target_nitrogen_oxides'])\ntrain_no = train2.drop(columns = ['target_carbon_monoxide', 'target_benzene'])\n\ntest_co = test2.drop(columns = ['target_benzene', 'target_nitrogen_oxides'])\ntest_be = test2.drop(columns = ['target_carbon_monoxide', 'target_nitrogen_oxides'])\ntest_no = test2.drop(columns = ['target_carbon_monoxide', 'target_benzene'])","4bd0883b":"fig, ax = plt.subplots(4, 3, figsize = (12,10))\n\nax[0,0].plot(train2.groupby(train2['year'])['target_carbon_monoxide'].mean(), 'r');\nax[0,1].plot(train2.groupby(train2['year'])['target_benzene'].mean(), 'r');\nax[0,2].plot(train2.groupby(train2['year'])['target_nitrogen_oxides'].mean(), 'r');\n\nax[1,0].plot(train2.groupby(train2['month'])['target_carbon_monoxide'].mean(), 'b');\nax[1,1].plot(train2.groupby(train2['month'])['target_benzene'].mean(), 'b');\nax[1,2].plot(train2.groupby(train2['month'])['target_nitrogen_oxides'].mean(), 'b');\n\nax[2,0].plot(train2.groupby(train2['time'])['target_carbon_monoxide'].mean(), 'y');\nax[2,1].plot(train2.groupby(train2['time'])['target_benzene'].mean(), 'y');\nax[2,2].plot(train2.groupby(train2['time'])['target_nitrogen_oxides'].mean(), 'y');\n\nax[3,0].plot(train2.groupby(train2['hour'])['target_carbon_monoxide'].mean(), 'black');\nax[3,1].plot(train2.groupby(train2['hour'])['target_benzene'].mean(), 'black');\nax[3,2].plot(train2.groupby(train2['hour'])['target_nitrogen_oxides'].mean(), 'black');\n\nax[0,0].set_title('Year-CO')\nax[0,1].set_title('Year-Benzene')\nax[0,2].set_title('Year-NOx')\n\nax[1,0].set_title('month-CO')\nax[1,1].set_title('month-Benzene')\nax[1,2].set_title('month-NOx')\n\nax[2,0].set_title('time-CO')\nax[2,1].set_title('time-Benzene')\nax[2,2].set_title('time-NOx')\n\nax[3,0].set_title('hour-CO')\nax[3,1].set_title('hour-Benzene')\nax[3,2].set_title('hour-NOx')\n\nfig.tight_layout()\nplt.show()","f76f8b1b":"fig, ax = plt.subplots(3, 3, figsize = (10,10))\n\nax[0,0].plot(train2.groupby(train2['deg_C'])['target_carbon_monoxide'].mean(), 'r');\nax[0,1].plot(train2.groupby(train2['deg_C'])['target_benzene'].mean(), 'r');\nax[0,2].plot(train2.groupby(train2['deg_C'])['target_nitrogen_oxides'].mean(), 'r');\n\nax[1,0].plot(train2.groupby(train2['relative_humidity'])['target_carbon_monoxide'].mean(), 'b');\nax[1,1].plot(train2.groupby(train2['relative_humidity'])['target_benzene'].mean(), 'b');\nax[1,2].plot(train2.groupby(train2['relative_humidity'])['target_nitrogen_oxides'].mean(), 'b');\n\nax[2,0].plot(train2.groupby(train2['absolute_humidity'])['target_carbon_monoxide'].mean(), 'y');\nax[2,1].plot(train2.groupby(train2['absolute_humidity'])['target_benzene'].mean(), 'y');\nax[2,2].plot(train2.groupby(train2['absolute_humidity'])['target_nitrogen_oxides'].mean(), 'y');\n\nax[0,0].set_title('deg-CO')\nax[0,1].set_title('deg-Benzene')\nax[0,2].set_title('deg-NOx')\n\nax[1,0].set_title('rel_humid-CO')\nax[1,1].set_title('rel_humid-Benzene')\nax[1,2].set_title('rel_humid-NOx')\n\nax[2,0].set_title('ab_humid-CO')\nax[2,1].set_title('ab_humid-Benzene')\nax[2,2].set_title('ab_humid-NOx')\n\n\nfig.tight_layout()\nplt.show()","84ac0f74":"fig, ax = plt.subplots(5, 3, figsize = (10,13))\n\nax[0,0].plot(train2.groupby(train2['sensor_1'])['target_carbon_monoxide'].mean(), 'r');\nax[0,1].plot(train2.groupby(train2['sensor_1'])['target_benzene'].mean(), 'r');\nax[0,2].plot(train2.groupby(train2['sensor_1'])['target_nitrogen_oxides'].mean(), 'r');\n\nax[1,0].plot(train2.groupby(train2['sensor_2'])['target_carbon_monoxide'].mean(), 'b');\nax[1,1].plot(train2.groupby(train2['sensor_2'])['target_benzene'].mean(), 'b');\nax[1,2].plot(train2.groupby(train2['sensor_2'])['target_nitrogen_oxides'].mean(), 'b');\n\nax[2,0].plot(train2.groupby(train2['sensor_3'])['target_carbon_monoxide'].mean(), 'y');\nax[2,1].plot(train2.groupby(train2['sensor_3'])['target_benzene'].mean(), 'y');\nax[2,2].plot(train2.groupby(train2['sensor_3'])['target_nitrogen_oxides'].mean(), 'y');\n\nax[3,0].plot(train2.groupby(train2['sensor_4'])['target_carbon_monoxide'].mean(), 'black');\nax[3,1].plot(train2.groupby(train2['sensor_4'])['target_benzene'].mean(), 'black');\nax[3,2].plot(train2.groupby(train2['sensor_4'])['target_nitrogen_oxides'].mean(), 'black');\n\nax[4,0].plot(train2.groupby(train2['sensor_5'])['target_carbon_monoxide'].mean(), 'violet');\nax[4,1].plot(train2.groupby(train2['sensor_5'])['target_benzene'].mean(), 'violet');\nax[4,2].plot(train2.groupby(train2['sensor_5'])['target_nitrogen_oxides'].mean(), 'violet');\n\nax[0,0].set_title('sensor_1-CO')\nax[0,1].set_title('sensor_1-Benzene')\nax[0,2].set_title('sensor_1-NOx')\n\nax[1,0].set_title('sensor_2-CO')\nax[1,1].set_title('sensor_2-Benzene')\nax[1,2].set_title('sensor_2-NOx')\n\nax[2,0].set_title('sensor_3-CO')\nax[2,1].set_title('sensor_3-Benzene')\nax[2,2].set_title('sensor_3-NOx')\n\nax[3,0].set_title('sensor_4-CO')\nax[3,1].set_title('sensor_4-Benzene')\nax[3,2].set_title('sensor_4-NOx')\n\nax[4,0].set_title('sensor_5-CO')\nax[4,1].set_title('sensor_5-Benzene')\nax[4,2].set_title('sensor_5-NOx')\n\nfig.tight_layout()\nplt.show()","2c4140b7":"plt.figure(figsize=(12,12))\nsns.heatmap(train2.corr());","10121d67":"fig, ax = plt.subplots(3, 3, figsize = (20,15))\nsns.boxplot(train2['year'], train2['target_carbon_monoxide'], ax = ax[0, 0]);\nsns.boxplot(train2['year'], train2['target_benzene'], ax= ax[0, 1]);\nsns.boxplot(train2['year'], train2['target_nitrogen_oxides'], ax = ax[0, 2]);\n\nsns.boxplot(train2['month'], train2['target_carbon_monoxide'], ax = ax[1, 0]);\nsns.boxplot(train2['month'], train2['target_benzene'], ax= ax[1, 1]);\nsns.boxplot(train2['month'], train2['target_nitrogen_oxides'], ax = ax[1, 2]);\n\nsns.boxplot(train2['hour'], train2['target_carbon_monoxide'], ax = ax[2,0]);\nsns.boxplot(train2['hour'], train2['target_benzene'], ax= ax[2,1]);\nsns.boxplot(train2['hour'], train2['target_nitrogen_oxides'], ax = ax[2,2]);\n\nplt.show();","b36daa68":"# !pip install pycaret","6ac9943d":"from pycaret.regression import setup, compare_models, blend_models, finalize_model, predict_model, plot_model","6ead6a96":"def pycaret_model(train, target, test, n_select, fold, opt):\n  print('Setup Your Data....')\n  setup(data=train,\n              target=target,\n              numeric_imputation = 'mean',\n              silent= True)\n  \n  print('Comparing Models....')\n  best = compare_models(sort=opt, n_select=n_select, fold = fold, exclude = ['xgboost'])\n\n  print('Here is Best Model Feature Importances!')\n  plot_model(estimator = best[0], plot = 'feature')\n  time.sleep(5)\n  \n  print('Blending Models....')\n  blended = blend_models(estimator_list= best, fold=fold, optimize=opt)\n  pred_holdout = predict_model(blended)\n    \n  print('Finallizing Models....')\n  final_model = finalize_model(blended)\n  print('Done...!!!')\n\n  pred_esb = predict_model(final_model, test)\n  re = pred_esb['Label']\n\n  return re","2482239a":"sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsub['target_carbon_monoxide'] = np.exp(pycaret_model(train_co, 'target_carbon_monoxide', test_co, 5, 3, 'RMSLE'))-1","18ee63fd":"sub['target_benzene'] = np.exp(pycaret_model(train_be, 'target_benzene', test_be, 5, 3, 'RMSLE'))-1","d13cf751":"sub['target_nitrogen_oxides'] = np.exp(pycaret_model(train_no, 'target_nitrogen_oxides', test_no, 4, 3, 'RMSLE')) - 1","e1f6945d":"sub","5fa2acc2":"sub.to_csv('sub.csv', index=False)","63e0684f":"## One-Hot Encoding - Day of Week column\n\n### **This column seems categorical, not numeric**","fcb92148":"## **DATA LOAD**","5f36040e":"#### **Target & Sensors Relevance (Visualizaition)**\n\n*   Sensor 1\n*   Sensor 2\n*   Sensor 3\n*   Sensor 4\n*   Sensor 5\n\n##### **Three targets have similar tendency with above features**","ae8bff58":"#### **Target & Temp, Humid Relevance (Visualizaition)**\n\n*   deg_C\n*   Relative_Humidity\n*   Absolute_Humidity\n\n##### **Three targets have similar tendency with above features except NOx & Deg_c**","372db468":"## **Data Preprocessing**\n\n*   There are only numeric columns\n*   Maybe need to use linear regression!!\n\n","b7eeae85":"### **HeatMap**\n\n*   **Heatmap shows us that sensor 1~5 are influential feature**\n*   **But 'sensor_3' looks different from others**\n\n#### **Need to check sensor_3 feature_importance later!!**","d6b7ad47":"## **EDA**","c44c9aad":"#### **Predict Result**","78ec31e0":"## **Modeling**","e7788e82":"## [Click Here](https:\/\/www.kaggle.com\/junhyeok99\/pycaret-automl-baseline) to check pycaret baseline!","c6a46cc5":"### **Groupby Plot**","1a1fb4f2":"### **Split DataSets**","430aa7f5":"#### **Model**","0f2edeac":"## **Library Import**","34312f5b":"### **BoxPlot**\n\n#### **Shows that Month data, Hour data are influential because of the temp!**","bd71fb81":"# **TPS - July 2021**","42a0bda9":"### **Pycaret**","e32c99ea":"![](https:\/\/www.navy.ac.kr:10001\/intro\/images\/sang_01.jpg)","cdbd4061":"## **Feature Generation**\n\n*  **SMC**\n\n![SMC](https:\/\/t1.daumcdn.net\/cfile\/tistory\/992B21365C99ADDC18)\n\n*  **Dew Point**\n\n![Dew Point Equation](https:\/\/img1.daumcdn.net\/thumb\/R1280x0\/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F999094495C930FC311)","dbfacacd":"### **Datetime Preprocessing**","b0b79103":"### **Scaling**\n\n#### **Log Scaling - Target values are skewed**","3991eaab":"#### **Scaler**","aec48301":"#### **Compare with Visualization**","964b5f73":"#### **Target & Time Relevance (Visualizaition)**\n\n*   Year\n*   Month\n*   Time\n*   Hour\n\n##### **Three targets have similar tendency with above features**"}}