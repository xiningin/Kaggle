{"cell_type":{"567c2eb8":"code","99ce6aff":"code","49704f96":"code","229f8f44":"code","195fbbc5":"code","8ef0f2ed":"code","a8962a77":"code","d693b248":"code","8be2011a":"code","11ac4eca":"code","4e5599e9":"code","a89185e6":"code","181ab245":"code","7fc2dce9":"code","af37cacc":"code","4452749d":"code","a6b8a290":"code","76ff4037":"code","8e30c011":"code","7934eda4":"code","9cb86cbc":"code","593a8f57":"code","2fdc3063":"code","633ba3e5":"code","88af5b6e":"code","7d4c5894":"code","07f18868":"code","1901e30e":"code","b2ce3510":"code","2be50adb":"code","91d56220":"code","a5cc0565":"code","4ab0a625":"code","6eaf246a":"code","71bccdf3":"code","d291a9dc":"code","9dffe53d":"code","80033a3b":"code","57b26748":"code","f57ddad9":"code","31c5317b":"markdown","c0de549d":"markdown","e42f5bab":"markdown","751b0682":"markdown","c922e297":"markdown","19f30dc7":"markdown","77ee83a6":"markdown","986eb509":"markdown","06779751":"markdown","b91a35d9":"markdown","4a501885":"markdown","8000ce52":"markdown","5a9af104":"markdown","aa041305":"markdown","30685c50":"markdown","10fc9ec8":"markdown","6fc4a095":"markdown","6d321db1":"markdown","b781b13a":"markdown","fa8e8d25":"markdown","30b16e9a":"markdown","dbf8cab3":"markdown","2806afad":"markdown","e63ae850":"markdown","c10d9169":"markdown","a3eba457":"markdown"},"source":{"567c2eb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","99ce6aff":"import warnings\nwarnings.filterwarnings('ignore')","49704f96":"data = pd.read_csv(\"\/kaggle\/input\/us-gasoline-and-diesel-retail-prices-19952021\/PET_PRI_GND_DCUS_NUS_W.csv\")\ndata","229f8f44":"data_copy = data.copy()","195fbbc5":"import seaborn as sns\nimport matplotlib.pyplot as plt","8ef0f2ed":"data['Date'] = pd.to_datetime(data['Date'])\ndata['Year'] = data['Date'].dt.year\ndata['Month'] = data['Date'].dt.month\ndata['Day'] = data['Date'].dt.day","a8962a77":"years = data['Year'].unique()","d693b248":"for year in years:\n    data_to_plot = data[data['Year']==year].D1\n    plt.title(f'Data from {year}')\n    plt.plot(data_to_plot)\n    plt.show()","8be2011a":"for col in data.columns[1:12]:\n    plt.title(f'{col} vs D1')\n    plt.scatter(data[col], data['D1'], c='red')\n    plt.show()","11ac4eca":"for col in data.columns[1:12]:\n    plt.title(f'Distplot of {col}')\n    sns.distplot(data[col])\n    plt.show()","4e5599e9":"data.drop(['Date', 'Year', 'Month', 'Day'], axis=1, inplace=True)","a89185e6":"data.isnull().sum().any()","181ab245":"for col in data.columns:\n    plt.title(f'Boxplot of {col}')\n    sns.boxplot(data[col])\n    plt.show()","7fc2dce9":"corr = data.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr, annot=True, cmap='coolwarm', square=True, fmt='.2f')\nplt.show()","af37cacc":"from sklearn.preprocessing import RobustScaler, MinMaxScaler","4452749d":"robust = RobustScaler()\nminmax = MinMaxScaler()","a6b8a290":"for col in data.columns:\n  data[col] = robust.fit_transform(data[col].values.reshape(-1,1))\n  data[col] = minmax.fit_transform(data[col].values.reshape(-1,1))","76ff4037":"from sklearn.model_selection import train_test_split","8e30c011":"X, y = data.drop('D1', axis=1), data['D1']","7934eda4":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=56)","9cb86cbc":"x_train_, x_val, y_train_, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=56)","593a8f57":"from sklearn.ensemble import ExtraTreesRegressor, GradientBoostingRegressor, RandomForestRegressor, AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.linear_model import SGDRegressor, LinearRegression, Lasso, RidgeCV, ElasticNet","2fdc3063":"from sklearn.metrics import mean_squared_error, r2_score","633ba3e5":"def model_selection(x_train_, x_val, y_train_, y_val, model):\n  model = model()\n  model.fit(x_train_, y_train_)\n\n  pred = model.predict(x_val)\n\n  error = np.sqrt(mean_squared_error(y_val, pred))\n  acc = r2_score(y_val, pred)\n  train_score = model.score(x_train_, y_train_)\n  val_score = model.score(x_val, y_val)\n\n  print('Error:', error*100)\n  print('\\n')\n  print('ACC :', acc*100)\n  print('\\n')\n  print('Train Score:', train_score*100)\n  print('\\n')\n  print('Val Score:', val_score*100)\n  print('\\n')\n  print('Is overfitting:', True if train_score>val_score else False)\n  print('\\n')\n  print('Overfitting by:',train_score*100-val_score*100)","88af5b6e":"extratrees = model_selection(x_train_, x_val, y_train_, y_val, ExtraTreesRegressor)\nextratrees","7d4c5894":"gradient = model_selection(x_train_, x_val, y_train_, y_val, GradientBoostingRegressor)\ngradient","07f18868":"randomforest = model_selection(x_train_, x_val, y_train_, y_val, RandomForestRegressor)\nrandomforest","1901e30e":"ada = model_selection(x_train_, x_val, y_train_, y_val, AdaBoostRegressor)\nada","b2ce3510":"xgb = model_selection(x_train_, x_val, y_train_, y_val, XGBRegressor)\nxgb","2be50adb":"catboost = model_selection(x_train_, x_val, y_train_, y_val, CatBoostRegressor)\ncatboost","91d56220":"sgd = model_selection(x_train_, x_val, y_train_, y_val, SGDRegressor)\nsgd","a5cc0565":"linear = model_selection(x_train_, x_val, y_train_, y_val, LinearRegression)\nlinear","4ab0a625":"lasso = model_selection(x_train_, x_val, y_train_, y_val, Lasso)\nlasso","6eaf246a":"net = model_selection(x_train_, x_val, y_train_, y_val, ElasticNet)\nnet","71bccdf3":"ridge = model_selection(x_train_, x_val, y_train_, y_val, RidgeCV)\nridge","d291a9dc":"model = LinearRegression()\nmodel.fit(x_train, y_train)","9dffe53d":"pred = model.predict(x_test)\npred","80033a3b":"error = np.sqrt(mean_squared_error(y_test, pred))\nerror*100","57b26748":"acc = r2_score(y_test, pred)\nacc*100","f57ddad9":"overfitting_by = model.score(x_train, y_train)*100 - model.score(x_test, y_test)*100\noverfitting_by","31c5317b":"**r2 score**","c0de549d":"# **SPLITTING TRAINING DATA**","e42f5bab":"# Metric check","751b0682":"**detecting outliars**","c922e297":"# Predictions","19f30dc7":"**The model is not overfitting at all**","77ee83a6":"**all cols vs D1**","986eb509":"**lets look for a trend in the data**","06779751":"**mean squared error**","b91a35d9":"**scaling the data**","4a501885":"# Model building and training","8000ce52":"# If you like the notebook please upvote it","5a9af104":"**distplot of all columns**","aa041305":"# **EDA**","30685c50":"**overfitting rate**","10fc9ec8":"**null values?**","6fc4a095":"# **Loading the datasets**","6d321db1":"**Feature Correlation**","b781b13a":"# SPLITTING DATA INTO TRAINING AND TESTING SETS","fa8e8d25":"# **Saving a copy of the datasets**","30b16e9a":"**lets split the date column**","dbf8cab3":"**I will use Linear Regression**","2806afad":"**there are no outliars in the data**","e63ae850":"# **Model selection**","c10d9169":"# **Data processing**","a3eba457":"**lets drop the useless columns**"}}