{"cell_type":{"4b478d01":"code","9fd89694":"code","8a806485":"code","855de2da":"code","7ad2fa56":"code","ace4339b":"code","47641ba6":"code","c662eac0":"code","08405802":"code","ecd0ffc0":"code","ec1d40df":"code","8bbe25df":"code","afda76d8":"code","70b2d0d9":"code","cd22c374":"code","d0679f38":"code","2f436913":"code","342bcf6c":"code","43fcc6b7":"code","bf57a5b2":"code","c4266d9d":"code","b231eebd":"code","e6384262":"code","34166714":"code","a487e2b6":"code","f9b3e4b1":"code","5b97011d":"code","fdaa7939":"code","16d213c3":"code","749f26bf":"code","21e3d3ed":"markdown","c20113b0":"markdown","bf4c660b":"markdown","082159c8":"markdown"},"source":{"4b478d01":"# Basic library\nimport pandas as pd\nimport pandas.io.sql as psql\nimport numpy as np\nimport numpy.random as rd\nimport gc\nimport multiprocessing as mpa\nimport os\nimport sys\nimport pickle\nfrom collections import defaultdict\nfrom glob import glob\nimport math\nfrom datetime import datetime as dt\nfrom pathlib import Path\nimport scipy.stats as st\nimport re\n\n# Visualization\nimport matplotlib\nfrom matplotlib import font_manager\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib import rc\n\nfrom matplotlib import animation as ani\nfrom IPython.display import Image\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\n#rc('text', usetex=True)\nfrom IPython.display import display # Allows the use of display() for DataFrames\nimport seaborn as sns\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\nsns.set_style(\"whitegrid\", {'grid.linestyle': '--'})\nred = sns.xkcd_rgb[\"light red\"]\ngreen = sns.xkcd_rgb[\"medium green\"]\nblue = sns.xkcd_rgb[\"denim blue\"]\n\npd.set_option(\"display.max_colwidth\", 100)\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\npd.options.display.float_format = '{:,.5f}'.format\n\n%matplotlib inline\n#%config InlineBackend.figure_format='retina'\n","9fd89694":"print(os.listdir(\"..\/input\"))","8a806485":"HOME_PATH = Path(\"..\/\")\nINPUT_PATH = Path(HOME_PATH\/\"input\")\nSAVE_PATH = Path(HOME_PATH\/f\"processed\")\nSAVE_PATH.mkdir(parents=True, exist_ok=True)","855de2da":"train = pd.read_csv(INPUT_PATH\/\"train.csv\", index_col=0)\nidx_pos = train[train.target==1].index.values\nidx_neg = train[train.target==0].index.values\n\ntest = pd.read_csv(INPUT_PATH\/\"test.csv\", index_col=0)\nsample_sub = pd.read_csv(INPUT_PATH\/\"sample_submission.csv\", index_col=0)\n\ntarget = train.target.values\ndel train[\"target\"]\n\ndf_all = pd.concat([train, test],axis=0)","7ad2fa56":"train.shape, test.shape, sample_sub.shape","ace4339b":"train.head()","47641ba6":"test.head()","c662eac0":"sample_sub.head()","08405802":"feat_name, nunique, std = [], [], []\nfor c in df_all.columns:\n    #print(c, df_all[c].nunique())\n    feat_name.append(c)\n    nunique.append(df_all[c].nunique())\n    std.append(df_all[c].std())\ndf_unique = pd.DataFrame({\"feat\": feat_name, \"n_uniq\": nunique, \"std_\": std})","ecd0ffc0":"df_unique.sort_values(\"n_uniq\").head(30)","ec1d40df":"plt.figure(figsize=(10,4))\ndf_unique.plot.scatter(x=\"n_uniq\", y=\"std_\")","8bbe25df":"sns.countplot(x=\"target\", data=pd.DataFrame(target, columns=[\"target\"]))\npd.Series(target).value_counts()","afda76d8":"train_corr = train.corr()","70b2d0d9":"plt.figure(figsize=(12,10))\nsns.heatmap(train_corr)","cd22c374":"test_corr = test.corr()","d0679f38":"plt.figure(figsize=(12,10))\nsns.heatmap(test_corr)","2f436913":"corr_list = []\nfor i, c in enumerate(train.columns):\n    corr = pd.DataFrame({f\"{c}\":train[c], \"target\":target}).corr().iloc[0,1]\n    corr_list.append(corr)\n    #print(f\"{c},corr: {corr:.4f}\")","342bcf6c":"idx_good_corr = np.argsort(np.abs(corr_list))[::-1]","43fcc6b7":"df_good_corr_cols = pd.DataFrame({\"ID\":train.columns[idx_good_corr], \"corr\":np.array(corr_list)[idx_good_corr]}).head(50)\ndf_good_corr_cols","bf57a5b2":"plt.figure(figsize=(24,5))\nsns.barplot(x=\"col\", y=\"corr\", data=pd.DataFrame({\"col\":train.columns, \"corr\":corr_list}))\nplt.xticks(rotation=90)\nplt.show()","c4266d9d":"from itertools import combinations","b231eebd":"comb_list = combinations(df_good_corr_cols.ID.tolist()[:15], 2)\n#n_graph = len(comb_list)\nplt.figure(figsize=(20,80))\nfor i, (c1, c2) in enumerate(comb_list):\n    #print(c1, c2)\n    df_tmp = pd.DataFrame({f\"{c1}\":train[c1], f\"{c2}\":train[c2], \"target\":target})\n    \n    plt.subplot(21,5,i+1)\n    sns.scatterplot(x=f\"{c1}\", y=f\"{c2}\", hue=\"target\", data=df_tmp.sample(frac=0.05), alpha=0.3)\n    \n    #break\nplt.tight_layout()\nplt.show()","e6384262":"plt.figure(figsize=(20,80))\nfor i, c in enumerate(train.columns):\n    plt.subplot(40,5,i+1)\n    \n    max_, min_ = np.max(train[c]), np.min(train[c])\n    bins = np.linspace(min_,max_,51)\n\n    train[c].loc[idx_pos].hist(alpha=0.5,bins=bins, label=\"pos\", density=True)\n    train[c].loc[idx_neg].hist(alpha=0.5,bins=bins, label=\"neg\", density=True)\n    plt.legend(loc=\"best\")\n    plt.title(f\"{c}\")\nplt.tight_layout()\nplt.show()","34166714":"plt.figure(figsize=(20,80))\nfor i, c in enumerate(train.columns):\n    plt.subplot(40,5,i+1)\n    max_, min_ = np.max([train[c].max(), test[c].max()]), np.min([train[c].min(), test[c].min()])\n    bins = np.linspace(min_,max_,51)\n    train[c].hist(alpha=0.5,bins=bins, label=\"train\", density=True)\n    test[c].hist(alpha=0.5,bins=bins, label=\"test\", density=True)\n    plt.legend(loc=\"best\")\n    plt.title(f\"{c}\")\nplt.tight_layout()\nplt.show()","a487e2b6":"from itertools import combinations","f9b3e4b1":"comb = combinations(train.columns, 2)\ncorr_list = []\nfeat_list = []\nfor c1, c2 in comb:\n    div_feat1 = train[c1]\/train[c2]\n    corr = pd.DataFrame({f\"{c1}_{c2}_div\":div_feat1, \"target\":target}).corr().iloc[0,1]\n    corr_list.append(corr)    \n    feat_list.append(f\"{c1}_{c2}_div\")\n    \n    div_feat2 = train[c2]\/train[c1]\n    corr = pd.DataFrame({f\"{c2}_{c1}_div\":div_feat2, \"target\":target}).corr().iloc[0,1]\n    corr_list.append(corr)    \n    feat_list.append(f\"{c2}_{c1}_div\")\n    \n    mul_feat = train[c2]*train[c1]\n    corr = pd.DataFrame({f\"{c2}_{c1}_mul\":mul_feat, \"target\":target}).corr().iloc[0,1]\n    corr_list.append(corr)    \n    feat_list.append(f\"{c2}_{c1}_mul\")","5b97011d":"df_corr_feat = pd.DataFrame({\"feat\": feat_list,\"corr\": corr_list, \"abs_corr\": np.abs(corr_list)})\ndf_corr_feat.sort_values(\"abs_corr\", ascending=False, inplace=True)","fdaa7939":"df_corr_feat.head(50)","16d213c3":"plt.figure(figsize=(24,5))\nsns.barplot(x=\"feat\", y=\"corr\", data=df_corr_feat.iloc[:100])\nplt.xticks(rotation=90)\nplt.show()","749f26bf":"%%time\nimport hypertools as hyp\nrd.seed(71)\nidx = np.arange(train.shape[0])\nrd.shuffle(idx)\nhyp.plot(train.values[idx[:10000]], '.', reduce='TSNE', hue=target[idx[:10000]], ndims=2)","21e3d3ed":"# Basic Check","c20113b0":"### Train vs Test","bf4c660b":"### Positive vs Negativea","082159c8":"# EDA"}}