{"cell_type":{"cc370997":"code","5975c29f":"code","61791bae":"code","145621cb":"code","d293e442":"code","32bd749a":"code","04259ce0":"code","367e99ec":"code","dd4fcab8":"code","5e30d59e":"code","a1fd51a0":"code","c8f85f95":"code","372a68af":"code","3d723229":"code","1178ab5a":"code","d31312d9":"code","35e776b8":"markdown","887779c7":"markdown","9299a3e2":"markdown","6457b55b":"markdown","3fcb4601":"markdown","c74e3aeb":"markdown"},"source":{"cc370997":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set()\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt","5975c29f":"train_data = pd.read_csv(\"..\/input\/train.csv\",index_col=\"ID_code\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\",index_col=\"ID_code\")","61791bae":"train_data.info()","145621cb":"train_data.head()","d293e442":"sns.countplot(y=train_data.target ,data=train_data)\nplt.xlabel(\"Count of each Target class\")\nplt.ylabel(\"Target classes\")\nplt.show()","32bd749a":"train_data.hist(figsize=(30,24),bins = 15)\nplt.title(\"Features Distribution\")\nplt.show()","04259ce0":"from sklearn.preprocessing import MinMaxScaler\n\nmmscale = MinMaxScaler()  \nX_train = mmscale.fit_transform(train_data.drop(['target'],axis=1))  \nX_test = mmscale.transform(test_data) ","367e99ec":"from sklearn.decomposition import PCA\n\npca = PCA()  \na = pca.fit_transform(X_train) \nb = pca.transform(X_test)","dd4fcab8":"explained_variance = pca.explained_variance_ratio_  ","5e30d59e":"pd.DataFrame(explained_variance,columns=['explained_variance']).plot(kind='box')","a1fd51a0":"with plt.style.context('dark_background'):\n    plt.figure(figsize=(15, 12))\n\n    plt.bar(range(200), explained_variance, alpha=0.5, align='center',\n            label='individual explained variance')\n    plt.ylabel('Explained variance ratio')\n    plt.xlabel('Principal components')\n    plt.legend(loc='best')\n    plt.tight_layout()","c8f85f95":"sum(explained_variance[:100])","372a68af":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, train_data.target)","3d723229":"submission = pd.read_csv('..\/input\/sample_submission.csv')\ngnb_y_pred = gnb.predict_proba(X_test)[:,1]","1178ab5a":"submission['target'] = gnb_y_pred","d31312d9":"submission.to_csv('submission_gnb.csv', index=False)","35e776b8":"### Major class imbalance issue visible","887779c7":"## Naive Bayes Model is simple to implement and gives good enough scores in comparison with many other complex models that may be performing slightly better than this.","9299a3e2":"### Don't go for PCA as this data is not correlated or it has already been through something like PCA before. Hence it would not be fruitful","6457b55b":"## Creating Model with Gaussian Naive Bayes","3fcb4601":"# EDA","c74e3aeb":"## PCA"}}