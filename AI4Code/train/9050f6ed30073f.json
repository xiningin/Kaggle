{"cell_type":{"c35d0ceb":"code","6c6b74f3":"code","09073229":"code","d19d44a2":"code","583a37cb":"code","1c444a9b":"code","7dd26575":"code","aaa2a8c1":"code","7ab2d32f":"code","b0b98dc9":"code","ceeff1f1":"code","77f64267":"code","4b4c79fd":"code","35ff3bad":"code","4ae45d66":"code","03d03102":"code","7b3afc02":"code","409dd9da":"code","51d53885":"code","a7ac3ab8":"code","b905b31d":"code","eaa34c3b":"code","d0d9da30":"code","bcedf645":"code","cbcbae69":"code","cd81a857":"code","9dd351f0":"code","37ed9955":"code","211530be":"code","276afca9":"code","08d67de9":"code","8c374a45":"code","5d3754b8":"code","01b922a7":"markdown","1a54b9f0":"markdown","b010dfb2":"markdown","df9888ec":"markdown","f36299d6":"markdown","72daf4c6":"markdown","22b5f2d8":"markdown","ae4d1b76":"markdown"},"source":{"c35d0ceb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime \nimport os\nimport glob\nfrom itertools import groupby\nimport warnings \nplt.style.use(\"ggplot\")\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline ","6c6b74f3":"path = \"..\/input\/footballdatacouk\/Big 5 Leagues (05-06 to 18-19)\"\nall_files = glob.glob(os.path.join(path, \"*.csv\"))\ndf = pd.concat(pd.read_csv(f) for f in all_files)","09073229":"df = df[[\"Div\", \"Date\", \"HomeTeam\", \"AwayTeam\", \"FTHG\", \"FTAG\", \"HTHG\", \n         \"HTAG\", \"HTR\", \"FTR\", \"HS\", \"AS\", \"HST\", \"AST\", \"HC\", \"AC\", \n         \"HY\", \"AY\", \"HR\", \"AR\", \"B365H\", \"B365D\", \"B365A\"]] \ndf['Date'] = pd.to_datetime(df['Date'], dayfirst=True)\ndf['Div'] = df['Div'].map({\"E0\": \"EPL\", \"E1\" : \"Championship\", \"E2\": \"League 1\", \"E3\": \"League 2\", \n                           \"D1\": \"Bundesliga\", \"F1\" : \"Ligue 1\", \"I1\" : \"Serie A\",\n                           \"SP1\": \"La Liga\"})\ndf = df.sort_values(by=\"Date\")\nfull_df = df.copy()","d19d44a2":"for col in df.columns: # checking for null values\n    nulls = sum(pd.isnull(df[col]))\n    print(f\"{col}:{nulls}\")","583a37cb":"df = df.dropna(how = \"any\", axis = 0)\ndf.reset_index(inplace = True)\ndf.drop(\"index\", axis = 1, inplace = True)","1c444a9b":"def total_goals(team):\n    \"\"\"Total goals for a given team for the whole dataset.\"\"\"\n    \n    return df[df[\"HomeTeam\"] == team].sum()[\"FTHG\"] + df[df[\"AwayTeam\"] == team].sum()[\"FTAG\"]\n\ndef total_shots(team):\n    \"\"\"Total shots for a given team for the whole dataset.\"\"\"\n    \n    return df[df[\"HomeTeam\"] == team].sum()[\"HS\"] + df[df[\"AwayTeam\"] == team].sum()[\"AS\"]\n\ndef ratio(team):\n    \"\"\"Conversion rate for a given team.\"\"\"\n    \n    return total_goals(team)\/total_shots(team)\n\ndef winning_team(x):\n    \"\"\"Winning team name. x is a row of the DataFrame\"\"\"\n    \n    if x[\"FTR\"] == \"H\":\n        return x[\"HomeTeam\"]\n    elif x[\"FTR\"] == \"A\":\n        return x[\"AwayTeam\"]\n    else:\n        return \"D\"\n    \ndef winstreak(team):\n    \"\"\" Maximum number of consecutive wins for a given team.\"\"\"\n    \n    new_df = full_df[(full_df[\"HomeTeam\"] == team) | (full_df[\"AwayTeam\"] == team)]\n    lst = []\n    for n,c in groupby(new_df[\"Winner\"]):\n        num, count = n, sum(1 for i in c)\n        lst.append((num, count))\n        \n    max_win_streak = max(y for x,y in lst if x == team)\n    \n    return max_win_streak\n\ndef drawstreak(team):\n    \"\"\"Maximum number of consecutive draws for a given team.\"\"\"\n    \n    new_df = full_df[(full_df[\"HomeTeam\"] == team) | (full_df[\"AwayTeam\"] == team)]\n    lst = []\n    for n,c in groupby(new_df[\"Winner\"]):\n        num, count = n, sum(1 for i in c)\n        lst.append((num, count))\n        \n    max_draw_streak = max(y for x,y in lst if x == \"D\")\n    \n    return max_draw_streak\n\ndef losing(team):\n    \"\"\"Maximum number of consecutive losses for a given team.\"\"\"\n    \n    new_df = full_df[(full_df[\"HomeTeam\"] == team) | (full_df[\"AwayTeam\"] == team)]\n    best_sum = 0\n    current_sum = 0\n    for i in new_df[\"Winner\"]:\n        if i != team and i != \"D\":\n            current_sum = max(0, current_sum + 1)\n            best_sum = max(current_sum, best_sum)\n        else:\n            current_sum = 0\n    return best_sum\n\ndef winless(team):\n    \"\"\"Maximum number of consecutive games without a win for a given team.\"\"\"\n    \n    new_df = full_df[(full_df[\"HomeTeam\"] == team) | (full_df[\"AwayTeam\"] == team)]\n    best_sum = 0\n    current_sum = 0\n    for i in new_df[\"Winner\"]:\n        if i != team:\n            current_sum = max(0, current_sum + 1)\n            best_sum = max(current_sum, best_sum)\n        else:\n            current_sum = 0\n    return best_sum\n        \n\ndef unbeaten(team):\n    \"\"\"Maximum number of games unbeaten for a givent team.\"\"\"\n    \n    new_df = full_df[(full_df[\"HomeTeam\"] == team) | (full_df[\"AwayTeam\"] == team)]\n    best_sum = 0\n    current_sum = 0\n    for i in new_df[\"Winner\"]:\n        if i == team or i == \"D\":\n            current_sum = max(0, current_sum + 1)\n            best_sum = max(current_sum, best_sum)\n        else:\n            current_sum = 0\n    return best_sum\n\n    \ndef total_ht_home_deficits(team):\n    \"\"\"Total games where home team were behind at HT\"\"\"\n    \n    deficits = len(df[(df[\"HomeTeam\"] == team) & (df[\"HTR\"] == \"A\")])\n    return deficits\n\ndef total_ht_away_deficits(team):\n    \"\"\"\"Total games where away team were behind at HT\"\"\"\n    \n    deficits = len(df[(df[\"AwayTeam\"] == team) & (df[\"HTR\"] == \"H\")])\n    return deficits\n\ndef full_time_score(x):\n    \"\"\"Full time score. x is row of DataFrame.\"\"\"\n    \n    if x[\"FTHG\"] == x[\"FTAG\"]:\n        return str(x[\"FTHG\"]) + \" \" + \"-\" + \" \" + str(x[\"FTAG\"])\n    if x[\"FTHG\"] > x[\"FTAG\"]:\n        return str(x[\"FTHG\"]) + \" \" + \"-\" + \" \" + str(x[\"FTAG\"])\n    else:\n        return str(x[\"FTAG\"]) + \" \" + \"-\" + \" \" + str(x[\"FTHG\"])\n    \ndef missing_odds(x):\n    \"\"\"B365H = 0 for some entries, this deals with them.\"\"\"\n    if x[\"B365H\"] == float(0):\n        return round(1\/(1-(1\/x[\"B365D\"]) - (1\/x[\"B365A\"])),2)\n    else:\n        return x[\"B365H\"]","7dd26575":"df_home_vs_away_goals = df.groupby(\"Div\").agg({\"FTHG\":\"mean\",\"FTAG\":\"mean\"})\ndf_home_vs_away_goals.plot.bar(figsize = (15,8), title = \"Home Goals vs Away Goals\", \n                               colormap = \"Dark2\", rot = 45, alpha = 0.7,\n                               linewidth =1, edgecolor = \"k\")\nplt.xlabel(\"Divison\")\nplt.ylabel(\"Goals\")\nplt.yticks(weight=\"bold\")\nplt.xticks(weight=\"bold\")\nplt.title(\" Average Goals Per Game (2005-2019)\")\nplt.legend([\"Home Goals\", \"Away Goals\"], prop = {'size': 15});","aaa2a8c1":"df_most_goals = df[:]\ndf_most_goals[\"TG\"] = df_most_goals[\"FTHG\"] + df_most_goals[\"FTAG\"]\ndf_most_goals = df_most_goals.sort_values(by = \"TG\", ascending=False)[:20]\ndf_most_goals[\"Match\"] = df_most_goals[\"HomeTeam\"] + \" \" + \"vs\" + \" \" + df_most_goals[\"AwayTeam\"]\nwith plt.style.context(\"seaborn-whitegrid\"):\n    plt.figure(figsize = (12,8))\n    ax = sns.barplot(y=\"Match\", x=\"TG\", data=df_most_goals[:20],\n                linewidth = 1, edgecolor = \"k\", alpha = 0.7, palette=sns.dark_palette(\"green\", 20))\n    plt.ylabel(\"\")\n    plt.xlabel(\"Total Goals\")\n    plt.yticks(weight=\"bold\")\n    plt.yticks(weight=\"bold\")\n    plt.title(\"Most goals in a game (2005-2019)\")\n    for i, j in enumerate(df_most_goals[\"TG\"]):\n        ax.text(0.5,i+0.05, \n             str(df_most_goals[\"FTHG\"].iloc[i]) + \" \" + \"-\" + \" \" + str(df_most_goals[\"FTAG\"].iloc[i]),\n             weight = \"bold\", color = \"white\");","7ab2d32f":"df_goals_proportion = df[[\"Div\", \"FTHG\", \"FTAG\", \"HTHG\", \"HTAG\"]]\ndf_goals_proportion[\"Total Goals\"] = df_goals_proportion[\"FTHG\"] + df_goals_proportion[\"FTAG\"]\ndf_goals_proportion[\"First Half Goals\"] = df_goals_proportion[\"HTHG\"] + df_goals_proportion[\"HTAG\"]\ndf_goals_proportion[\"Second Half Goals\"] = df_goals_proportion[\"Total Goals\"] - df_goals_proportion[\"First Half Goals\"]\n(df_goals_proportion.groupby(\"Div\").mean()[[\"First Half Goals\", \"Second Half Goals\"]]\n            .plot.bar(figsize = (15,8), rot = 45, colormap = \"Dark2\", \n                      edgecolor = \"k\", linewidth = 1, \n                      alpha = 0.8))\nplt.xlabel(\"Division\")\nplt.ylabel(\"Goals\")\nplt.yticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.title(\"Average Goals per Half (2005-2019)\", fontsize = 15)\nplt.legend(prop = {\"size\":15});","b0b98dc9":"df_goals_percentage = df_goals_proportion.mean()[[\"Total Goals\", \"First Half Goals\", \"Second Half Goals\"]]\ndf_goals_percentage[\"First Half\"] = df_goals_percentage[\"First Half Goals\"]\/df_goals_percentage[\"Total Goals\"]\ndf_goals_percentage[\"Second Half\"] = df_goals_percentage[\"Second Half Goals\"]\/df_goals_percentage[\"Total Goals\"]\n\ndf_goals_percentage = pd.DataFrame({\"%\":[0.437, 0.563]}, index = [\"First Half\", \"Second Half\"])\n\ndf_goals_percentage.plot.pie(y = \"%\", figsize = (12,8), colors = [\"#e74c3c\", \"#34495e\"] )\nplt.title(\"Goals Ratio: First Half vs Second Half (2005-2019)\")\nplt.text(0.1, 0.5, \"43.7%\", weight = \"bold\", fontsize = 15)\nplt.text(-0.3, -0.5, \"56.3%\", weight = \"bold\", fontsize = 15)\nplt.ylabel(\"\");","ceeff1f1":"df_EPL = df[df[\"Div\"] == \"EPL\"]\ndf_EPL[\"Total Goals\"] = df_EPL[\"FTHG\"] + df_EPL[\"FTAG\"]\n\nax = (df_EPL[\"Total Goals\"].value_counts().reindex(index = [0,1,2,3,4,5,6,7,8,9,10,11])\n      .plot.bar(figsize = (15,8), fontsize = 15, colormap = \"tab10\", \n                edgecolor = \"k\", linewidth = 1))\nplt.title(\"Distribution of Goals Scored EPL 2005-2019\")\nplt.xlabel(\"Goals\")\nplt.ylabel(\"Count\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i,j in enumerate(df_EPL[\"Total Goals\"].value_counts().reindex(index = [0,1,2,3,4,5,6,7,8,9,10,11])):\n    ax.text(i-0.15, j + 50, j, va = \"center\", weight = \"bold\")","77f64267":"df_ENG = df[(df[\"Div\"] == \"Championship\") | (df[\"Div\"] == \"League 1\") | (df[\"Div\"] == \"League 2\")]\ndf_ENG[\"Total Goals\"] = df_ENG[\"FTHG\"]  + df_ENG[\"FTAG\"]\ndf_ENG.groupby([\"Total Goals\", \"Div\"]).count()[\"Date\"].unstack().plot.bar(figsize = (15,8))\nplt.xlabel(\"Goals\")\nplt.ylabel(\"Count\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.legend(prop = {\"size\": 15})\nplt.title(\"Distribution of Goals Scored \");","4b4c79fd":"home_goals = (df.groupby(\"HomeTeam\").mean()[\"FTHG\"].round(2).reset_index()\n              .sort_values(by = \"FTHG\", ascending = False))\naway_goals = (df.groupby(\"AwayTeam\").mean()[\"FTAG\"].round(2).reset_index()\n              .sort_values(by = \"FTAG\", ascending = False))\nplt.figure(figsize = (15,10))\nplt.subplot(121)\nax = sns.barplot(y = \"HomeTeam\", x = \"FTHG\",\n                data = home_goals[:15], palette = \"summer\",\n                linewidth = 1, edgecolor = \"k\")\nplt.title(\"Top Teams by Average Home Goals\")\nplt.ylabel(\"\")\nplt.xlabel(\"Average Home Goals\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(home_goals[\"FTHG\"][:15]):\n    ax.text(0.1,i,j,weight = \"bold\")\nplt.subplot(122)\nax = sns.barplot(y = \"AwayTeam\", x = \"FTAG\",\n                data = away_goals[:15], palette = \"summer\",\n                linewidth = 1, edgecolor = \"k\")\nplt.title(\"Top Teams by Average Away Goals\")\nplt.ylabel(\"\")\nplt.xlabel(\"Average Away Goals\")\nplt.xlim((0,3))\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(away_goals[\"FTAG\"][:15]):\n    ax.text(0.1,i,j,weight = \"bold\")\nplt.tight_layout()","35ff3bad":"goals_conceded_at_home = (df.groupby(\"HomeTeam\").mean()[\"FTAG\"].round(2).reset_index()\n                          .sort_values(by = \"FTAG\", ascending = True))\ngoals_conceded_away = (df.groupby(\"AwayTeam\").mean()[\"FTHG\"].round(2).reset_index()\n                       .sort_values(by = \"FTHG\", ascending = True))\nplt.figure(figsize = (15,10))\nplt.subplot(121)\nax = sns.barplot(y = \"HomeTeam\", x = \"FTAG\",\n                data = goals_conceded_at_home[:15], palette = \"GnBu_d\",\n                linewidth = 1, edgecolor = \"k\")\nplt.title(\"Top Teams by Average Home Goals Conceded\")\nplt.ylabel(\"\")\nplt.xlabel(\"Average Home Goals Conceded\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(goals_conceded_at_home[\"FTAG\"][:15]):\n    ax.text(0.1,i,j,weight = \"bold\")\nplt.xlim((0,1.5))\nplt.subplot(122)\nax = sns.barplot(y = \"AwayTeam\", x = \"FTHG\",\n                data = goals_conceded_away[:15], palette = \"GnBu_d\",\n                linewidth = 1, edgecolor = \"k\")\nplt.title(\"Top Teams by Average Away Goals Conceded\")\nplt.ylabel(\"\")\nplt.xlabel(\"Average Away Goals Conceded\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(goals_conceded_away[\"FTHG\"][:15]):\n    ax.text(0.1,i,j,weight = \"bold\")\nplt.xlim((0,1.5))\nplt.tight_layout()","4ae45d66":"df_conversion_rate_home = (df.groupby(\"HomeTeam\")\n                           .agg({\"HS\":\"sum\", \"FTHG\":\"sum\"}).reset_index())\ndf_conversion_rate_home[\"Conversion Rate\"] = df_conversion_rate_home[\"FTHG\"]\/df_conversion_rate_home[\"HS\"]\ndf_conversion_rate_away = (df.groupby(\"AwayTeam\")\n                           .agg({\"AS\":\"sum\", \"FTAG\":\"sum\"}).reset_index())\ndf_conversion_rate_away[\"Conversion Rate\"] = df_conversion_rate_away[\"FTAG\"]\/df_conversion_rate_away[\"AS\"]\n\ndf_conversion_rate_home.sort_values(by = \"Conversion Rate\", \n                                    inplace = True, ascending = False)\ndf_conversion_rate_away.sort_values(by = \"Conversion Rate\", \n                                    inplace = True, ascending = False)\n\nplt.figure(figsize=(15,10))\nplt.subplot(121)\nax = sns.barplot(y = \"HomeTeam\", x = \"Conversion Rate\",\n                data = df_conversion_rate_home[:20], linewidth = 1, edgecolor = \"k\", palette = \"Greens\")\nplt.title(\"Top Home Teams by Conversion Rate (2005-2019)\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.ylabel(\"\")\n\nfor i, j in enumerate(df_conversion_rate_home[\"Conversion Rate\"][:20]):\n                     ax.text(0.005,i,str(round(100*j, 2)) + \"%\", weight = \"bold\")\n\nplt.subplot(122)\nax = sns.barplot(y = \"AwayTeam\", x = \"Conversion Rate\",\n                data = df_conversion_rate_away[:20], linewidth = 1, edgecolor = \"k\", palette = \"Greens\")\nplt.title(\"Top Away Teams by Conversion Rate (2005-2019)\")\nplt.ylabel(\"\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(df_conversion_rate_away[\"Conversion Rate\"][:20]):\n                     ax.text(0.005,i,str(round(100*j, 2)) + \"%\", weight = \"bold\")\nplt.xlim((0,0.18))\n        \nplt.tight_layout()","03d03102":"df_yellows_by_league = df.groupby(\"Div\").agg({\"HY\":\"mean\", \"AY\": \"mean\"})\ndf_yellows_by_league.plot.bar(figsize = (15,8), title = \"Home Yellows vs Away Yellows\", \n                              colormap = \"inferno\", rot = 45, fontsize = 15, alpha = 0.6, \n                              linewidth = 1, edgecolor = \"k\")\nplt.xlabel(\"Divison\", fontsize = 20)\nplt.ylabel(\"Cards\", fontsize = 20)\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.title(\"Average Yellow Cards Per Game (2005-2019)\")\nplt.legend([\"Home Yellow Cards\", \"Away Yellow Cards\"], prop = {'size': 15});","7b3afc02":"df_EPL_reds_home = (df[df[\"Div\"] == \"EPL\"].groupby(\"HomeTeam\").agg({\"HR\": \"mean\"})\n                    .reset_index().sort_values(by = \"HR\", ascending = False))\ndf_EPL_reds_away = (df[df[\"Div\"] == \"EPL\"].groupby(\"AwayTeam\").agg({\"AR\": \"mean\"})\n                    .reset_index().sort_values(by = \"AR\", ascending = False))\n\ndf_EPL_reds_home[\"Red Cards\"] = (df_EPL_reds_home[\"HR\"] + df_EPL_reds_away[\"AR\"])\/2\ndf_EPL_reds = df_EPL_reds_home.sort_values(by = \"Red Cards\", ascending = False)\n\nmy_colors = sns.cubehelix_palette(50, start = 2, rot = 0, dark = 0, light = 0.95, reverse = True)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot( y = \"HomeTeam\", x = \"Red Cards\", \n                 data = df_EPL_reds, palette = \"Reds_r\", linewidth = 1, edgecolor = \"k\")\nplt.ylabel(\"\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.title(\"Red Cards per game EPL  (2005-2019)\");\n","409dd9da":"df_EPL_yellows_home = (df[df[\"Div\"] == \"EPL\"].groupby(\"HomeTeam\").agg({\"HY\": \"mean\"})\n                       .reset_index().sort_values(by = \"HY\", ascending = False))\ndf_EPL_yellows_away = (df[df[\"Div\"] == \"EPL\"].groupby(\"AwayTeam\").agg({\"AY\": \"mean\"})\n                       .reset_index().sort_values(by = \"AY\", ascending = False))\n\ndf_EPL_yellows_home[\"Yellow Cards\"] = (df_EPL_yellows_home[\"HY\"] + df_EPL_yellows_away[\"AY\"])\/2\ndf_EPL_yellows = df_EPL_yellows_home.sort_values(by = \"Yellow Cards\", ascending = False)\n\nplt.figure(figsize = (15,10))\nax = sns.barplot(y = \"HomeTeam\", x = \"Yellow Cards\", \n                 data = df_EPL_yellows, palette = \"YlOrBr_r\", edgecolor = \"k\", linewidth = 1)\nplt.ylabel(\"\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.title(\"Yellow Cards per game EPL  (2005-2019)\");\n","51d53885":"plt.figure(figsize = (15,10))\ndf_corners = df[[\"Div\", \"HC\", \"AC\"]]\ndf_corners = df_corners.melt(value_vars = [\"HC\", \"AC\"], id_vars = \"Div\")\nsns.boxplot(y = \"Div\", x = \"value\", hue = \"variable\", data = df_corners, orient = \"h\",\n           showfliers = False, palette = \"pastel\")\nplt.title(\"Corners per Game\")\nplt.ylabel(\"Division\")\nplt.xlabel(\"Corners\")\nplt.xlim((0,16))\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.legend(bbox_to_anchor=(1.04,1), loc=\"upper left\", prop = {\"size\": 15});","a7ac3ab8":"colors = [\"#e74c3c\", \"#34495e\", \"#2ecc71\"]\ncolors1 = sns.color_palette(\"hls\",3)\nplt.figure(figsize=(10,10))\ndf[\"FTR\"].value_counts().plot.pie(autopct = \"%1.0f%%\",\n                                  colors = colors,\n                                  wedgeprops = {\"linewidth\":2,\"edgecolor\":\"white\"},\n                                  textprops = {\"fontsize\": 15})\nmy_circ = plt.Circle((0,0),.7,color = \"white\")\nplt.gca().add_artist(my_circ)\nplt.title(\"Results Breakdown\", fontsize = 15)\nplt.ylabel(\"\");","b905b31d":"df_results_distribution = df.groupby([\"Div\", \"FTR\"]).count()[\"Date\"]\ndf_results_distribution = (df_results_distribution.groupby(\"Div\")\n                           .apply(lambda g: (g\/g.sum()*100)).unstack()[[\"H\", \"D\", \"A\"]])\ndf_results_distribution.plot.bar(figsize = (18,8), rot = 45, colormap = \"Pastel2\",\n                                 linewidth = 2, edgecolor = \"k\", fontsize = 15)\nplt.xlabel(\"Division\", fontsize = 15)\nplt.ylabel(\"Percentage\", fontsize = 15)\nplt.xticks(weight=\"bold\")\nplt.xticks(weight=\"bold\")\nplt.title(\"Result Breakdown per League (2005-2019)\", fontsize = 20)\nplt.legend([\"Home Win\", \"Draw\", \"Away Win\"], bbox_to_anchor=(1.04,1), \n           loc=\"upper left\", prop = {\"size\": 15});","eaa34c3b":"# longest winstreaks\nfull_df[\"Winner\"] = full_df.apply(lambda x: winning_team(x), axis=1)\n\n           \nwinstreaks = (pd.Series({team: winstreak(team) for team in full_df[\"HomeTeam\"].unique()}) \n                      .sort_values(ascending=False)[:15].reset_index(name=\"Streak\"))\n\ndrawstreaks = (pd.Series({team: drawstreak(team) for team in full_df[\"HomeTeam\"].unique()}) \n                       .sort_values(ascending=False)[:15].reset_index(name=\"Streak\"))\n\nlosingstreaks = (pd.Series({team: losing(team) for team in full_df[\"HomeTeam\"].unique()})  \n                          .sort_values(ascending=False)[:15].reset_index(name=\"Streak\"))\n\nunbeaten = (pd.Series({team: unbeaten(team) for team in full_df[\"HomeTeam\"].unique()}) \n                     .sort_values(ascending=False)[:15].reset_index(name=\"Streak\"))\n\nwinless = (pd.Series({team: winless(team) for team in full_df[\"HomeTeam\"].unique()}) \n                   .sort_values(ascending=False)[:15].reset_index(name=\"Streak\"))\n\nplt.figure(figsize = (14,12))\nplt.subplot(221)\n\nax = sns.barplot(y=\"index\", x=\"Streak\", data=winstreaks, linewidth = 1, \n                 edgecolor = \"k\", palette = sns.cubehelix_palette(20))\nplt.ylabel(\"\")\nplt.title(\"Longest Win Streaks (05\/06-18\/19)\")\nplt.xlim((0,20))\nplt.xticks(np.arange(0,19,2))\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(winstreaks[\"Streak\"]):\n    ax.text(1,i,j,weight = \"bold\")\n\nplt.subplot(222)\n\nax = sns.barplot(y=\"index\", x=\"Streak\", data=losingstreaks, linewidth = 1, edgecolor = \"k\",\n                palette=sns.light_palette(\"navy\", 20))\nplt.ylabel(\"\")\nplt.title(\"Longest Losing Streaks (05\/06-18\/19)\")\nplt.xlim((0,20))\nplt.xticks(np.arange(0,19,2))\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(losingstreaks[\"Streak\"]):\n    ax.text(1,i,j,weight = \"bold\")\n\nplt.subplot(223)\n\nax = sns.barplot(y=\"index\", x=\"Streak\", data=unbeaten, linewidth = 1, edgecolor = \"k\",\n                palette=sns.light_palette(\"green\", 15))\nplt.ylabel(\"\")\nplt.title(\"Longest Unbeaten Streaks (05\/06-18\/19)\")\nplt.xlim((0,55))\nplt.xticks(np.arange(0,55,5))\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(unbeaten[\"Streak\"]):\n    ax.text(1,i,j,weight = \"bold\")\n\nplt.subplot(224)\n\n\nax = sns.barplot(y=\"index\", x=\"Streak\", data=winless, linewidth = 1, edgecolor = \"k\",\n                palette=sns.color_palette(\"Blues\", 15))\nplt.ylabel(\"\")\nplt.title(\"Longest Win-less Streaks (05\/06-18\/19)\")\nplt.xlim((0,50))\nplt.xticks(np.arange(0,50,5))\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(winless[\"Streak\"]):\n    ax.text(1,i,j,weight = \"bold\")\n\nplt.tight_layout();\n\n","d0d9da30":"df_EPL[\"Winner\"]  = df_EPL.apply(lambda x: winning_team(x), axis = 1)\nwinners = df_EPL[\"Winner\"].value_counts()[1:].reset_index()\nplt.figure(figsize = (15,10))\nax = sns.barplot(y = \"index\", x = \"Winner\", data = winners, orient = \"h\")\nplt.title(\"EPL: Number of Wins (2005-2019)\")\nplt.ylabel(\"\")\nplt.xlabel(\"Goals\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nfor i, j in enumerate(winners[\"Winner\"]):\n    ax.text(0.1,i,j,weight = \"bold\")","bcedf645":"# biggest comebacks from HT \ndf_comebacks = df.copy()\ndf_comebacks[\"HTGD\"] = abs(df_comebacks[\"HTHG\"] - df_comebacks[\"HTAG\"])\ndf_comebacks = df_comebacks.sort_values(by = \"HTGD\", ascending = False)\nhalf_time_leads_squandered = (df_comebacks[df_comebacks[\"HTR\"] != \n                              df_comebacks[\"FTR\"]][:15][[\"HomeTeam\", \"AwayTeam\", \"HTGD\"]])\nhalf_time_leads_squandered[\"Match\"] = (half_time_leads_squandered[\"HomeTeam\"] + \" \" + \"vs\" + \" \" + \n                                       half_time_leads_squandered[\"AwayTeam\"])\nplt.figure(figsize = (12,8))\nax = sns.barplot(y = \"Match\", x = \"HTGD\", data = half_time_leads_squandered, \n                 palette = \"GnBu_d\", linewidth = 1, edgecolor = \"k\")\nplt.xlabel(\"HT Goal Lead\")\nplt.ylabel(\"\")\nplt.xticks(weight=\"bold\")\nplt.yticks(weight=\"bold\")\nplt.title(\"Biggest HT leads squandered\")\nplt.xlim((0,5))\nplt.xticks(np.arange(0, 5, 1.0))\ni = 0\nfor j in half_time_leads_squandered.index:\n    ax.text(0.1, i, \"HT:\" + \" \" + str(int(df.iloc[j][\"HTHG\"])) +  \" - \" +\n            str(int(df.iloc[j][\"HTAG\"])) + \",\" +  \" \"*2 + \"FT:\" + \" \" + \n            str(int(df.iloc[j][\"FTHG\"])) +  \"-\" + str(int(df.iloc[j][\"FTAG\"])) + \" \" + \n            \"(\" + str(df.iloc[j][\"Date\"].year) + \")\", weight = \"bold\")\n    i += 1;","cbcbae69":"# Who's best from being behind at HT\n# proportion of games won from behind at half time\n# number of games won at FT\/number of games down at HT\n\ndf_comeback_home = df[(df[\"HTR\"] == \"A\") & (df[\"FTR\"] == \"H\")]\ndf_comeback_away = df[(df[\"HTR\"] == \"H\") & (df[\"FTR\"] == \"A\")]\n   \n\nhome_comebacks = (df_comeback_home.groupby(\"HomeTeam\").count()[\"HTR\"]\n                  .sort_values(ascending=False).reset_index())\naway_comebacks = (df_comeback_away.groupby(\"AwayTeam\").count()[\"HTR\"]\n                  .sort_values(ascending=False).reset_index())\n\n\nhome_comebacks[\"HTR\"] = (home_comebacks\n                         .apply(lambda x: (x[\"HTR\"]\/total_ht_home_deficits(x[\"HomeTeam\"]))*100, \n                                             axis = 1))\naway_comebacks[\"HTR\"] = (away_comebacks\n                         .apply(lambda x: (x[\"HTR\"]\/total_ht_away_deficits(x[\"AwayTeam\"]))*100, \n                                             axis = 1))\n\n\nplt.figure(figsize = (15,8))\nplt.subplot(121)\nsns.barplot(y=\"HomeTeam\", x=\"HTR\", orient=\"h\", \n            data=home_comebacks.sort_values(by=\"HTR\", ascending=False)[:15],\n            edgecolor = \"k\", linewidth = 2)\nplt.ylabel(\"\")\nplt.xlabel(\"Percentage\")\nplt.title(\"Percentage of home games won when behind at HT\")\n\nplt.subplot(122)\n\nsns.barplot(y=\"AwayTeam\", x=\"HTR\", orient=\"h\", \n            data=away_comebacks.sort_values(by=\"HTR\", ascending=False)[:15],\n            edgecolor = \"k\", linewidth = 2)\nplt.ylabel(\"\")\nplt.xlabel(\"Percentage\")\nplt.title(\"Percentage of away games won when behind at HT\")\nplt.xlim((0,45))\n\nplt.tight_layout();\n\n","cd81a857":"df_full_time_score = df[[\"Div\", \"FTHG\", \"FTAG\"]]\n\ndf_full_time_score[\"FTS\"] = df_full_time_score.apply(lambda x: full_time_score(x), axis = 1)\ndf_full_time_score = df_full_time_score[\"FTS\"].value_counts()[:12].reset_index()\nplt.figure(figsize = (15,8))\nax = sns.barplot(y = \"index\", x = \"FTS\", data = df_full_time_score, \n                 palette = \"viridis\", edgecolor = \"k\", linewidth = 1)\nplt.ylabel(\"Full Time Score\")\nplt.xlabel(\"Count\")\nplt.title(\"Most popular football results (2005-2019)\")\nfor i,j in enumerate(df_full_time_score[\"FTS\"]):\n    ax.text(50, i,str(round(j\/len(df.index)*100,2)) + \"%\", \n            color = \"white\", weight = \"bold\")","9dd351f0":"df_heatmap = pd.crosstab(df[\"FTHG\"], df[\"FTAG\"]).div(len(df.index))\n\n# CREATE LABELS FOR THE DATAFRAME VIA ANNOT\n\ndf_heatmap_labels = df_heatmap.copy()\ncondition = (df_heatmap_labels < 1\/2000) & (df_heatmap_labels > 0)  # less than 0.05% was rounded to 0%, losing vital info\ndf_heatmap_labels[condition] = \"< 0.1\"\ndf_heatmap_labels[df_heatmap_labels == 0] = \"0.0\"\ncondition2 = (df_heatmap_labels != \"< 0.1\") & (df_heatmap_labels != \"0.0\")\ndf_heatmap_labels[condition2] = df_heatmap_labels*100\ns = df_heatmap_labels.stack()\ndf_heatmap_labels = pd.to_numeric(s,errors='coerce').round(1).fillna(s).unstack()\ndf_heatmap_labels = df_heatmap_labels.applymap(str)\ndf_heatmap_labels = df_heatmap_labels + \"%\"\ndf_heatmap_labels = df_heatmap_labels.values # transposes to a numpy array needed for annot in heatmap\n\n# PLOT HEATMAP\nwith sns.axes_style(\"white\"):\n\n    plt.figure(figsize = (12,12))\n    cmap1 = sns.cubehelix_palette(90, start = 5, rot = 0, dark = 0, \n                                  light = 0.9, as_cmap = True, gamma = 1.2)\n    ax = sns.heatmap(df_heatmap, annot = df_heatmap_labels, cmap=cmap1, \n                     linewidths = 5, fmt = \"\", cbar = False)\n    ax.set_ylim(11, 0)\n    ax.xaxis.tick_top()\n    ax.xaxis.set_label_position('top')\n    kwargsy = {\"weight\": \"bold\", \"position\":(0,0.85)}\n    kwargsx = {\"weight\": \"bold\", \"position\":(0.1,0)}\n    plt.ylabel(\"FT Home Goals\", fontsize = 20, labelpad = 20, **kwargsy)\n    plt.xlabel(\"FT Away Goals\", fontsize = 20, labelpad = 20, **kwargsx)\n    plt.xticks(fontsize = 15, weight = \"bold\")\n    plt.yticks(fontsize = 15, weight = \"bold\")\n    ax.tick_params(axis = \"both\", length = 0)\n    plt.title(\"Distribution of Full Time Results \\n2005-2019\", \n              fontsize = 20, loc = \"left\", pad = 20, weight = \"bold\");","37ed9955":"df_inf_overround = df[(df[\"B365H\"] == 0) | (df[\"B365D\"] == 0) | (df[\"B365A\"] == 0)]\ndf_inf_overround #  check for infinite overround","211530be":"df[\"B365H\"] = df.apply(lambda x: missing_odds(x), axis = 1)\ndf[\"Overround\"] = ((1\/df['B365H'] + 1\/df['B365D'] + 1\/df['B365A']) - 1)*100","276afca9":"plt.figure(figsize = (15,8))\nsns.boxplot(y = \"Div\", x = \"Overround\", data = df, orient = \"h\", \n            showfliers = False, palette = \"pastel\")\nplt.ylabel(\"\")\nplt.title(\"Distribution of Overround (2005-2019)\");","08d67de9":"plt.figure(figsize=(15,12))\nfor i,league in enumerate([\"EPL\", \"Bundesliga\", \"Championship\", \"Ligue 1\", \n                           \"League 1\", \"La Liga\", \"League 2\", \"Serie A\"]):\n    plt.subplot(4,2,i+1)\n    data = df[(df[\"Div\"] == league) & (df[\"Date\"] > datetime.datetime(2006,1,1))].groupby(\n        [df[\"Date\"].dt.year]).agg({\"Overround\": \"mean\"}).reset_index()\n    ax =  sns.lineplot(x = \"Date\", y = \"Overround\", data = data, marker = \"o\", \n                       color = \"blue\", linewidth = 2, palette = \"pastel\")\n    plt.title(f\"{league}: Average Overround per Year\")\n    plt.ylim((0, 12))\nplt.tight_layout();","8c374a45":"df_biggest_away_upsets = (df[df[\"FTR\"] == \"A\"]\n                          .sort_values(by = \"B365A\", \n                                       ascending = False)[[\"HomeTeam\", \"AwayTeam\", \"B365A\"]][:15])\ndf_biggest_home_upsets = (df[df[\"FTR\"] == \"H\"]\n                          .sort_values(by = \"B365H\", \n                                       ascending = False)[[\"HomeTeam\", \"AwayTeam\", \"B365H\"]][:15])\ndf_biggest_away_upsets[\"Match\"] = (df_biggest_away_upsets[\"HomeTeam\"] + \" \" + \"vs\" + \n                                   \" \" + df_biggest_away_upsets[\"AwayTeam\"])\ndf_biggest_home_upsets[\"Match\"] = (df_biggest_home_upsets[\"HomeTeam\"] + \" \" + \"vs\" + \n                                   \" \" + df_biggest_home_upsets[\"AwayTeam\"])\nplt.figure(figsize = (15,8))\nplt.subplot(121)\ncolor = sns.cubehelix_palette(10, start=.5, rot=-.75, reverse = True)\nax = sns.barplot(y = df_biggest_away_upsets.reset_index().index, \n                 x = \"B365A\", data = df_biggest_away_upsets, palette = \"GnBu_d\",\n                orient = \"h\")\nax.set_yticklabels(df_biggest_away_upsets[\"Match\"])\nplt.xlabel(\"B365 Odds\")\nplt.title(\"Biggest Away Upsets (2005-2019)\")\nplt.ylabel(\"\")\nfor i, j in enumerate(df_biggest_away_upsets[\"B365A\"]):\n    ax.text(0.5,i+0.05, \n            df_biggest_away_upsets[\"AwayTeam\"].iloc[i].upper() + \" \" + \"@\" + \" \" + \n            str(round(j-1)) + \"\/1\" + \" \" + \" \" + \"(\" +\n            str(df.iloc[df_biggest_away_upsets.index[i]][\"Date\"].year) + \")\",\n            weight = \"bold\")\nplt.subplot(122)\nax = sns.barplot(y = df_biggest_home_upsets.reset_index().index, x = \"B365H\", \n                 data = df_biggest_home_upsets, orient = \"h\",\n                 palette = \"GnBu_d\")\nax.set_yticklabels(df_biggest_home_upsets[\"Match\"])\nplt.xlabel(\"B365 Odds\")\nplt.title(\"Biggest Home Upsets (2005-2019)\")\nplt.tight_layout()\nfor i, j in enumerate(df_biggest_home_upsets[\"B365H\"]):\n    ax.text(0.5,i+0.05, \n            df_biggest_home_upsets[\"HomeTeam\"].iloc[i].upper() + \" \" + \"@\" + \" \" + \n            str(round(j-1)) + \"\/1\" + \" \" + \" \" + \"(\" +\n            str(df.iloc[df_biggest_home_upsets.index[i]][\"Date\"].year) + \")\",\n            weight = \"bold\", color = \"black\")\n","5d3754b8":"plt.figure(figsize = (15,8))\nsns.scatterplot(x = \"B365A\", y = \"B365H\", data = df, palette = \"cmap\")\nplt.xlabel(\"B365 Away Odds\")\nplt.ylabel(\"B365 Home Odds\")\nplt.title(\"Home Odds vs Away Odds\");","01b922a7":"# Cards","1a54b9f0":"# EPL, Championship, League 1, League 2, Bundesliga, Serie A, La Liga & Ligue 1 Data 2005\/2006 - 2018\/2019\n\n\n","b010dfb2":"# Results","df9888ec":"# Importing\\Cleaning Data","f36299d6":"# Goals\/Shots","72daf4c6":"# Corners","22b5f2d8":"# Betting Analysis","ae4d1b76":"# Functions"}}