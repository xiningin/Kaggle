{"cell_type":{"4951173e":"code","ea413de9":"code","5d28fc8f":"code","448db9ce":"code","7a119c7e":"code","9edef290":"code","a2278337":"code","689ade98":"code","f521aa7a":"code","1c0719c8":"code","8c947a5d":"code","a0527645":"code","27e08d81":"code","f4d5c789":"code","56420969":"code","00992bb0":"code","decf51ef":"code","ea93f8e0":"code","37b9a5b0":"code","84bc9098":"code","8bcc42ca":"code","e7674c29":"code","2d839459":"code","98baab8f":"code","a8d83387":"code","a81ab379":"code","f8b50ea7":"code","0bd88520":"code","39d8a664":"code","fc66d13b":"code","72c841e6":"code","2bdc9ecf":"code","0789a337":"code","e5ef8a7a":"code","410dd90e":"code","919e9768":"code","8984f4f6":"code","e67c7d91":"code","929dda17":"code","0b51044a":"code","e55b6ce6":"code","f983da6d":"code","27948dc1":"code","a951c780":"code","8eefa0c4":"code","fba8b7a3":"code","da42ff50":"code","48a4debd":"code","ced5310c":"code","26759ec7":"code","0679550b":"code","73ecefc6":"code","e7a74d69":"code","a4a3808d":"markdown","af2cbb81":"markdown","3a7a555a":"markdown"},"source":{"4951173e":"from transformers import BertTokenizer, BertModel\nfrom transformers import XLNetModel, XLNetTokenizer\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GroupKFold\nimport re\nimport pandas as pd","ea413de9":"\nsample_submission = pd.read_csv(\"..\/input\/google-quest-challenge\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/google-quest-challenge\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/google-quest-challenge\/train.csv\")","5d28fc8f":"test_v3 = pd.read_csv(\"..\/input\/google-quest-qa-add-on\/test_v3.csv\")\ntrain_v3 = pd.read_csv(\"..\/input\/google-quest-qa-add-on\/train_v3.csv\")","448db9ce":"test_v3.columns.values","7a119c7e":"l_cols = ['question_asker_intent_understanding', 'question_body_critical',\n       'question_conversational', 'question_expect_short_answer',\n       'question_fact_seeking', 'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","9edef290":"columns = ['question_title', 'question_cleaned', 'answer_cleaned', 'category',\n       'question_asker_intent_understanding', 'question_body_critical',\n       'question_conversational', 'question_expect_short_answer',\n       'question_fact_seeking', 'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","a2278337":"def txt_re(content):\n    res_list = []\n    for txt in content:\n        if pd.isnull(txt):\n            res_list.append('code')\n        else:\n            txt = txt.strip()\n            txt = re.sub('https?.*$', '', txt)\n            txt = re.sub('https?.*\\s', '', txt)\n            txt = re.sub('\\n+', '', txt)\n            txt = re.sub('\\r+', '', txt)\n            txt = re.sub('&gt;', '>', txt)\n            txt = re.sub('&lt;', '<', txt)\n            txt = re.sub('&amp;', '&', txt)\n            txt = re.sub('&quot;', '\\\"', txt)\n            res_list.append(txt)\n    return res_list","689ade98":"content = []\nlabels = []\nfor col in zip(train_v3[columns].values.tolist()):\n    cont = col[0][:3]\n    cont = txt_re(cont)\n    label = col[0][4:]\n    content.append(cont)\n    labels.append(label)","f521aa7a":"test_content = []\nfor col in zip(test_v3[['question_title', 'question_body', 'answer']].values.tolist()):\n    cont = col[0]\n    cont = txt_re(cont)\n    test_content.append(cont)","1c0719c8":"tokenizer = BertTokenizer.from_pretrained('..\/input\/bert-base-uncased-huggingface')","8c947a5d":"q_inputs = []\nq_input_masks = []\nq_segment_masks = []\n\na_inputs = []\na_input_masks = []\na_segment_masks = []\n\nfor cont in content:    \n    q_input = tokenizer.encode_plus(cont[0], text_pair=cont[1],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(q_input['input_ids']) == len(q_input['token_type_ids']) == len(q_input['attention_mask'])\n    q_inputs.append(q_input['input_ids'])\n    q_segment_masks.append(q_input['token_type_ids'])\n    q_input_masks.append(q_input['attention_mask'])\n    \n    a_input = tokenizer.encode_plus(cont[0], text_pair=cont[2],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(a_input['input_ids']) == len(a_input['token_type_ids']) == len(a_input['attention_mask'])\n    a_inputs.append(a_input['input_ids'])\n    a_segment_masks.append(a_input['token_type_ids'])\n    a_input_masks.append(a_input['attention_mask'])","a0527645":"q_title_len = []\nq_body_len = []\na_len = []\nfor col in zip(train_v3[['question_title', 'question_body', 'answer']].values.tolist()):\n    q_title_len.append(len(tokenizer.tokenize(col[0][0])))\n    q_body_len.append(len(tokenizer.tokenize(col[0][1])))\n    a_len.append(len(tokenizer.tokenize(col[0][2])))","27e08d81":"len(q_title_len)","f4d5c789":"t_q_inputs = []\nt_q_input_masks = []\nt_q_segment_masks = []\n\nt_a_inputs = []\nt_a_input_masks = []\nt_a_segment_masks = []\nfor cont in test_content:\n    t_q_input = tokenizer.encode_plus(cont[0], text_pair=cont[1],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(t_q_input['input_ids']) == len(t_q_input['token_type_ids']) == len(t_q_input['attention_mask'])\n    t_q_inputs.append(t_q_input['input_ids'])\n    t_q_segment_masks.append(t_q_input['token_type_ids'])\n    t_q_input_masks.append(t_q_input['attention_mask'])\n    \n    t_a_input = tokenizer.encode_plus(cont[0], text_pair=cont[2],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(t_a_input['input_ids']) == len(t_a_input['token_type_ids']) == len(t_a_input['attention_mask'])\n    t_a_inputs.append(t_a_input['input_ids'])\n    t_a_segment_masks.append(t_a_input['token_type_ids'])\n    t_a_input_masks.append(t_a_input['attention_mask'])","56420969":"len(t_q_inputs)","00992bb0":"t_q_title_len = []\nt_q_body_len = []\nt_a_len = []\nfor col in zip(test_v3[['question_title', 'question_body', 'answer']].values.tolist()):\n    t_q_title_len.append(len(tokenizer.tokenize(col[0][0])))\n    t_q_body_len.append(len(tokenizer.tokenize(col[0][1])))\n    t_a_len.append(len(tokenizer.tokenize(col[0][2])))","decf51ef":"len(t_q_title_len)","ea93f8e0":"train_text = [[q_input, q_input_mask, q_segment_mask, a_input, a_input_mask, a_segment_mask]\\\n        for q_input, q_input_mask, q_segment_mask, a_input, a_input_mask, a_segment_mask in \\\n        zip(q_inputs, q_input_masks, q_segment_masks, a_inputs, a_input_masks, a_segment_masks)]","37b9a5b0":"train_num = [[q_t, q_b, a] for q_t, q_b, a in zip(q_title_len, q_body_len, a_len)]","84bc9098":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain_num = scaler.fit_transform(train_num).tolist()","8bcc42ca":"train_num[0]","e7674c29":"test_text = [[t_q_input, t_q_input_mask, t_q_segment_mask, t_a_input, t_a_input_mask, t_a_segment_mask] \\\n          for t_q_input, t_q_input_mask, t_q_segment_mask, t_a_input, t_a_input_mask, t_a_segment_mask in \\\n          zip(t_q_inputs, t_q_input_masks, t_q_segment_masks, t_a_inputs, t_a_input_masks, t_a_segment_masks)]","2d839459":"test_num = [[q_t, q_b, a] for q_t, q_b, a in zip(t_q_title_len, t_q_body_len, t_a_len)]","98baab8f":"test_num = scaler.transform(test_num).tolist()","a8d83387":"test_num[0]","a81ab379":"ls","f8b50ea7":"import os\nos.mkdir('.\/t7')","0bd88520":"data = {'txt': train_text, 'num': train_num,  'label': labels}","39d8a664":"t_data = {'txt': test_text, 'num': test_num}","fc66d13b":"import torch\ntorch.save(data, '.\/t7\/data.t7')","72c841e6":"torch.save(t_data, '.\/t7\/test.t7')","2bdc9ecf":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom transformers import BertTokenizer, BertModel\nfrom scipy.stats import spearmanr","0789a337":"class Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.bert = BertModel.from_pretrained('..\/input\/bert-base-uncased-huggingface')\n        self.dropout = nn.Dropout(0.2)\n        self.pool = nn.AvgPool2d((512, 1))\n        self.output = nn.Linear(768 * 2 + 3, 30) \n        \n    def forward(self, q_inputs, q_input_masks, q_segment_masks, a_inputs, a_input_masks, a_segment_masks, q_a_len):\n        q_outputs = self.bert(q_inputs, attention_mask=q_input_masks, token_type_ids=q_segment_masks)\n        q_x = q_outputs[0]\n        q_x = self.dropout(q_x)\n        q_x = q_x.unsqueeze(1)\n        q_x = self.pool(q_x)\n        q_x = q_x.squeeze(1).squeeze(1)\n        \n        a_outputs = self.bert(a_inputs, attention_mask=a_input_masks, token_type_ids=a_segment_masks)\n        a_x = a_outputs[0]\n        a_x = self.dropout(a_x)\n        a_x = a_x.unsqueeze(1)\n        a_x = self.pool(a_x)\n        a_x = a_x.squeeze(1).squeeze(1)\n        \n        x = torch.cat((q_x, a_x, q_a_len), -1)\n\n        x = torch.sigmoid(self.output(x))\n        return x","e5ef8a7a":"import numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader,Dataset, TensorDataset\nfrom sklearn.model_selection import train_test_split\nfrom transformers import AdamW, get_linear_schedule_with_warmup","410dd90e":"data = torch.load('.\/t7\/data.t7')","919e9768":"test_data = torch.load('.\/t7\/test.t7')","8984f4f6":"test_set = TensorDataset(torch.LongTensor(np.array(test_data['txt'])), \n                          torch.FloatTensor(np.array(test_data['num'])))","e67c7d91":"test_loader = DataLoader(\n        test_set,\n        batch_size=1,\n        shuffle=False)","929dda17":"criterion = nn.BCELoss()","0b51044a":"def compute_spearmanr_ignore_nan(trues, preds):\n    rhos = []\n    for tcol, pcol in zip(np.transpose(trues), np.transpose(preds)):\n        rhos.append(spearmanr(tcol, pcol).correlation)\n    return np.nanmean(rhos)","e55b6ce6":"gkf = GroupKFold(n_splits=5).split(X=train.question_body, groups=train.question_body)\nfinal_predicts = []\nfor fold, (train_idx, valid_idx) in enumerate(gkf):   \n    if fold in [0, 1, 2]:\n        model = Model()\n        model.cuda()\n        optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)\n        train_set = TensorDataset(torch.LongTensor(np.array(data['txt'])[train_idx]),\\\n                                  torch.FloatTensor(np.array(data['num'])[train_idx]), \\\n                                  torch.FloatTensor(np.array(data['label'])[train_idx])) \n        dev_set = TensorDataset(torch.LongTensor(np.array(data['txt'])[valid_idx]),\\\n                                torch.FloatTensor(np.array(data['num'])[valid_idx]), \\\n                                  torch.FloatTensor(np.array(data['label'])[valid_idx]))\n        train_loader = DataLoader(\n            train_set,\n            batch_size=6,\n            shuffle=True, drop_last=True)\n        dev_loader = DataLoader(\n            dev_set,\n            batch_size=min(len(dev_set), 1),\n            shuffle=False)\n        for epoch_idx in range(3):\n            for batch_idx, (model_in, model_num_in, labels) in enumerate(train_loader):\n                model.train()\n                optimizer.zero_grad()\n                model_in = model_in.cuda()\n                model_num_in = model_num_in.cuda()\n                labels = labels.cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                model_num_in = Variable(model_num_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], model_in[:, 3], \\\n                               model_in[:, 4], model_in[:, 5], model_num_in)\n                labels = Variable(labels, requires_grad=False)\n                labels = labels.transpose(0, 1)\n                scores = scores.transpose(0, 1)\n                losses = [criterion(score, label) for score, label in zip(scores, labels)]\n                loss = sum(losses)\n                loss.backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n                optimizer.step()\n                # scheduler.step()\n            print(\"train epoch: {} loss: {}\".format(epoch_idx, loss.item()\/30))\n        # torch.save(model.state_dict(), '.\/t7\/model_{}.t7'.format(epoch_idx))\n        \n        torch.cuda.empty_cache()\n        model.eval()\n        pre_list = []\n        tru_list = []\n        with torch.no_grad():\n            for model_in, model_num_in, labels in dev_loader:\n                model_in = model_in.cuda()\n                model_num_in = model_num_in.cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                model_num_in = Variable(model_num_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], \\\n                               model_in[:, 3], model_in[:, 4], model_in[:, 5], model_num_in)\n                pre_list.append(scores)\n                tru_list.append(labels)\n        dev_predicts = [pre.squeeze(0).cpu().numpy().tolist() for pre in pre_list]\n        truthes = [t.squeeze(0).numpy().tolist() for t in tru_list]\n        dev_rho = compute_spearmanr_ignore_nan(dev_predicts, truthes)\n        print(\"dev score: \", dev_rho)\n        \n        torch.cuda.empty_cache()\n        model.eval()\n        test_predicts = []\n        with torch.no_grad():\n            for model_in, model_num_in in test_loader:\n                model_in = model_in.cuda()\n                model_num_in = model_num_in.cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                model_num_in = Variable(model_num_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], \\\n                               model_in[:, 3], model_in[:, 4], model_in[:, 5], model_num_in)\n                test_predicts.append(scores.reshape(scores.shape[-1]))\n        final_predicts.append(test_predicts)\n        torch.cuda.empty_cache()","f983da6d":"pres = np.average(final_predicts, axis=0)","27948dc1":"len(pres)","a951c780":"test_output = [[p.item() for p in pre] for pre in pres]","8eefa0c4":"output_cols = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","fba8b7a3":"output_values = np.transpose(test_output).tolist()","da42ff50":"output_dict = {k: v for k, v in zip(output_cols, output_values)}","48a4debd":"output_dict['qa_id'] = sample_submission['qa_id'].values.tolist()","ced5310c":"output = pd.DataFrame.from_dict(output_dict)","26759ec7":"order = ['qa_id', 'question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","0679550b":"output = output[order]","73ecefc6":"output.head()","e7a74d69":"output.to_csv('submission.csv', index=False)","a4a3808d":"## DATA","af2cbb81":"## RUN","3a7a555a":"## MODEL"}}