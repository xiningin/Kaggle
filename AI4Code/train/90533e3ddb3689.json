{"cell_type":{"54382ad0":"code","a685083b":"code","cd4a6ec4":"code","e53fdcb7":"code","ab225878":"code","7759b7a7":"code","efd4196a":"code","624bc114":"code","d3afd736":"code","6d3702bb":"code","9e77d23b":"code","caab2bbf":"code","0941386d":"code","73755441":"code","26f745ef":"code","4bf4b03b":"code","cc380072":"code","b0e93510":"code","95d3a618":"code","a204669f":"code","6d5bc42f":"code","0aba0a51":"code","ebeaf2fb":"code","3cc34e2c":"code","7b69ecd0":"code","cc7c98a2":"code","3cb64715":"code","2e63b6f8":"code","b63bbaef":"code","510c692f":"code","7744b596":"code","0a7a5f89":"code","d9d80913":"markdown","83473e59":"markdown","fab08084":"markdown","d59eab9d":"markdown","42f4afaf":"markdown","465a72d4":"markdown","c07a4cde":"markdown","3813f822":"markdown"},"source":{"54382ad0":"import os\nimport torch\nimport torchvision\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nimport torchvision.models as models\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid","a685083b":"TRAIN_DIR = \"..\/input\/100-bird-species\/train\"\nVAL_DIR = \"..\/input\/100-bird-species\/valid\"","cd4a6ec4":"transform_ds = T.Compose([\n    T.Resize((128, 128)),\n    T.RandomHorizontalFlip(),\n    T.ToTensor()\n])\n\ntrain_ds = torchvision.datasets.ImageFolder(root=TRAIN_DIR,\n                                           transform=transform_ds)","e53fdcb7":"num_classes= len(train_ds.classes)\nnum_classes","ab225878":"val_ds = torchvision.datasets.ImageFolder(root=VAL_DIR,\n                                         transform=transform_ds)","7759b7a7":"batch_size= 128","efd4196a":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size, num_workers=4, pin_memory=True)","624bc114":"def show_images(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(10,10))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:32], nrow=8).permute(1,2,0))\n        break","d3afd736":"bird_images = show_images(train_dl)\nbird_images","6d3702bb":"def get_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance(data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n            \n    def __len__(self):\n        return len(self.dl)","9e77d23b":"device = get_device()\ndevice","caab2bbf":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","0941386d":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","73755441":"class ImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, epochs, result):\n        print(\"Epoch: [{}\/{}], last_lr: {:.6f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch+1, epochs, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","26f745ef":"class model(ImageClassificationBase):\n    def __init__(self, num_classes):\n        super().__init__()\n        self.network = models.resnet18(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, num_classes)\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad= False\n        for param in self.network.fc.parameters():\n            param.requires_grad= True\n        \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad= True","4bf4b03b":"model = to_device(model(num_classes=225), device)\nmodel","cc380072":"def conv_block(in_channels, out_channels, pool=False):\n    layers = [nn.Sequential(nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1),\n                           nn.BatchNorm2d(out_channels),\n                          nn.ReLU())]\n    \n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n    \n    \nclass resnet9(ImageClassificationBase):\n    def __init__(self, in_channels, num_classes):\n        super().__init__()\n        self.conv1 = conv_block(in_channels, 64)\n        self.conv2 = conv_block(64, 128, pool=True)\n        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128,128))\n        self.conv3 = conv_block(128, 256, pool=True)\n        self.conv4 = conv_block(256, 512, pool=True)\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(8), nn.Flatten(), nn.Linear(512, num_classes))\n        \n    def forward(self, xb):\n        out = self.conv1(xb)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out","b0e93510":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, weight_decay=0, grad_clip=None,\n                 opt_func=torch.optim.Adam):\n    torch.cuda.empty_cache()\n    \n    history = []\n    \n    opt = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(opt, max_lr, epochs=epochs,\n                                               steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            opt.step()\n            opt.zero_grad()\n            \n            lrs.append(get_lr(opt))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, epochs, result)\n        history.append(result)\n    return history\n            ","95d3a618":"result = [evaluate(model, val_dl)]\nresult","a204669f":"model.freeze()","6d5bc42f":"epochs = 10\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 10e-4\nopt_func = torch.optim.Adam","0aba0a51":"%%time\n\nhistory = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                        weight_decay=weight_decay, grad_clip=grad_clip,\n                        opt_func=opt_func)","ebeaf2fb":"model.unfreeze()","3cc34e2c":"epochs = 5\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 10e-4\nopt_func = torch.optim.Adam","7b69ecd0":"%%time\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                        weight_decay=weight_decay, grad_clip=grad_clip,\n                        opt_func=opt_func)","cc7c98a2":"TEST_DIR = \"..\/input\/100-bird-species\/test\"","3cb64715":"transform_test = T.Compose([\n    T.Resize((128,128)),\n    T.ToTensor()\n])","2e63b6f8":"test_ds = torchvision.datasets.ImageFolder(root=TEST_DIR,\n                                          transform=transform_test)","b63bbaef":"def prediction(model, images):\n    xb = to_device(images.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    predictions = test_ds.classes[preds[0].item()]\n    return predictions","510c692f":"images, labels = test_ds[60]\nprint(\"Label: \", test_ds.classes[labels])\nprint(\"Prediction: \", prediction(model, images))\nplt.imshow(images.permute(1,2,0))","7744b596":"accuracy = [x[\"val_acc\"] for x in history]\nplt.plot(accuracy, \"-rx\")\nplt.title(\"Accuracy vs number of epochs\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")","0a7a5f89":"val_loss = [x[\"val_loss\"] for x in history]\ntrain_loss = [x.get(\"train_loss\") for x in history]\nplt.plot(val_loss, \"-bx\")\nplt.plot(train_loss, \"-rx\")\nplt.legend([\"Train loss\", \"Validation Loss\"])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Losses\")","d9d80913":"# Bird identification","83473e59":"## Moving the data to the GPU","fab08084":"## Training","d59eab9d":"## Performance","42f4afaf":"## Preparing the data","465a72d4":"## Predictions","c07a4cde":"## The Model","3813f822":"## Importing the modules"}}