{"cell_type":{"5d5000cf":"code","109ffcc9":"code","0f590d59":"code","f142145a":"code","617335ae":"code","f4132481":"code","50544cc9":"code","39ed3121":"code","992f0a7c":"code","72b3d4ab":"code","ed4d393d":"code","92a2f5d1":"code","95a2ba05":"code","676bed10":"code","6ddfad79":"code","5fb638c0":"code","edd57c4b":"code","4775db48":"code","02f587a7":"code","9e6b9c06":"code","bbc078cb":"code","d0ad790f":"code","6ef9d969":"code","b9091093":"code","f3470276":"code","9717393a":"code","7734ad4c":"code","a324ae75":"code","9a00ab35":"code","4d8621af":"code","d541985f":"code","3bf61383":"code","c3ed81ad":"code","e3d819f1":"code","57a95b85":"code","5436a870":"code","964bf497":"code","18507ef6":"code","7fdcd3af":"code","e4a78be4":"code","d7fd861a":"code","52dc3d14":"code","e81bc702":"code","f3e74127":"code","565cf297":"code","9d2443e8":"code","7d11181a":"code","fce7c8e6":"code","338db0b3":"code","f6a6cfde":"code","215cde01":"code","ae42c2c3":"code","8c372302":"code","867277b8":"code","8124e4f2":"code","5e18bc6e":"code","64ffc286":"code","d779454e":"code","6accabc9":"code","0b8cad83":"code","9a92818d":"code","61bd34c2":"code","d6563765":"code","74bf5cbf":"code","84357939":"code","f7819b49":"code","02d62764":"code","d10e243e":"code","8a36e82c":"code","1efc47a4":"code","f3badd03":"code","51d5f4a7":"code","896363da":"code","06fd8288":"code","56cd5d3e":"code","014feeac":"code","8344c9fa":"code","c12306eb":"code","70508be2":"code","41a0ff1c":"code","2ab169ba":"code","4704f493":"code","53154766":"code","f3b81754":"code","f385ff5c":"code","73509230":"code","128e3ab4":"code","68a859d6":"code","466a480a":"code","12e7e7e9":"code","4619d7f5":"code","efe3824d":"code","3d1dddff":"code","f6abf5eb":"code","51fc882e":"code","eca9ba67":"code","e1f18160":"code","f1390442":"code","319b4b09":"code","c6abe29b":"code","1b93aa94":"code","6ce22b4e":"code","4e4e638a":"code","5c232e87":"code","90ad06cd":"code","4df50c1f":"code","6342f3fd":"code","aca74a37":"code","d3f19f84":"code","26f9f181":"code","b76e1b55":"code","714a0291":"code","933296e6":"code","1b33ba3e":"code","31746364":"code","78f3553d":"code","8a33302a":"code","bdb7d33a":"code","d38b290b":"code","22e5376a":"code","08dc39df":"code","cae61857":"code","8b920dea":"code","f200dc63":"code","bde27bb4":"code","24077f30":"code","4abd16a3":"code","737436d9":"code","d7bb88e2":"code","0f17f38a":"code","85a4ab75":"markdown","48015de6":"markdown","9df49145":"markdown","ebce4d6a":"markdown","b7527f5b":"markdown","471563f2":"markdown","17387f0a":"markdown","997b3390":"markdown","22f36234":"markdown","97f98e86":"markdown","44f87908":"markdown","a9003152":"markdown","bce58008":"markdown","5bc8996e":"markdown","1f4b4857":"markdown","5896d2e8":"markdown","e4fb140c":"markdown","e5c69086":"markdown","00b141f0":"markdown","a71979bb":"markdown","2c1ff53a":"markdown","d49022ce":"markdown","20d2f735":"markdown","632e576d":"markdown","b49047b1":"markdown","d6e9e003":"markdown","b4af241b":"markdown","03bc4055":"markdown","50284464":"markdown","3ba5582b":"markdown","74acb274":"markdown","b94f7d65":"markdown","3f556234":"markdown","3832ee40":"markdown","5eca95c7":"markdown","5a022af1":"markdown","e06d713d":"markdown","8daff735":"markdown","8d0741ae":"markdown","4dd1b07a":"markdown","cc351f3b":"markdown","dceddf4c":"markdown","c958ebe1":"markdown","10a7cd85":"markdown","9d782ab9":"markdown","4232b238":"markdown","9d704a9b":"markdown","2c563d73":"markdown","01b004ca":"markdown","29e29f68":"markdown","429ae1a5":"markdown","dce20863":"markdown","5e13bf64":"markdown","b616dc73":"markdown","c472f9d1":"markdown","a7545409":"markdown","b43e6c08":"markdown","ccb3ce48":"markdown","cb163654":"markdown","e0cdac30":"markdown","7841bef7":"markdown","4e7d7c43":"markdown","72a42592":"markdown","59a84eb1":"markdown","7e42820c":"markdown","78737edf":"markdown","f543b584":"markdown","e7db7401":"markdown","1b460af1":"markdown","4c5a758c":"markdown","40cf5d16":"markdown","06057642":"markdown","1ce5b3d9":"markdown","0eb01964":"markdown","2c8d693d":"markdown","20ab0d87":"markdown","db846eb8":"markdown","b8568fa9":"markdown","2eec397b":"markdown","b683940a":"markdown","9741442b":"markdown","9ed05972":"markdown","6cdd213e":"markdown","105714ab":"markdown","f5f04d6b":"markdown","8a71f453":"markdown","fbe59b88":"markdown","31107d3b":"markdown","fa2feb5a":"markdown","6751272c":"markdown","4c767a88":"markdown","e4d53eb5":"markdown","d43053c2":"markdown","5cffed77":"markdown","9e7df016":"markdown","7b9e0b8d":"markdown","5a613c97":"markdown","8ae7ab04":"markdown","6d957774":"markdown","51fd7d71":"markdown","db726dfb":"markdown","51fe6f1b":"markdown","20f4a19e":"markdown","c91d1a72":"markdown","df01f76c":"markdown","66edd9fe":"markdown","8c643e07":"markdown","80237cdc":"markdown","a3f43928":"markdown","f44d19a4":"markdown","e85afbc7":"markdown"},"source":{"5d5000cf":"texto = 'machine learning python IESB'","109ffcc9":"texto.lower()","0f590d59":"texto.upper()","f142145a":"texto","617335ae":"texto[:4]","f4132481":"texto[10:14]","50544cc9":"texto[::-1]","39ed3121":"texto.split()","992f0a7c":"texto_dividido = texto.split()","72b3d4ab":"texto_dividido","ed4d393d":"texto_dividido[0]","92a2f5d1":"texto_dividido[-1]","95a2ba05":"' | '.join(texto_dividido)","676bed10":"texto.replace('machine', 'deep')","6ddfad79":"len(texto)","5fb638c0":"lista = [1, 3, 5, 7]","edd57c4b":"lista_quadrado = []\nfor x in lista:\n    lista_quadrado.append(x ** 2)","4775db48":"lista_quadrado","02f587a7":"lista_quadrado[:2]","9e6b9c06":"lista_quadrado[-2:]","bbc078cb":"lista_quadrado[::-1]","d0ad790f":"len(lista_quadrado)","6ef9d969":"lista_quadrado = [numero ** 2 for numero in lista]","b9091093":"lista_quadrado","f3470276":"def eleva_quadrado(lista):\n    return [numero ** 2 for numero in lista]","9717393a":"eleva_quadrado(lista)","7734ad4c":"0 == False","a324ae75":"1 == True","9a00ab35":"lista[False]","4d8621af":"lista[True]","d541985f":"lista = []\nlista_par = []\nfor i in range(8):\n    if i % 2:\n        lista.append(i)\n    else:\n        lista_par.append(i)","3bf61383":"lista","c3ed81ad":"lista_par","e3d819f1":"a = [1,2,3,4,5]","57a95b85":"a[::-1]","5436a870":"alfabeto = {'A': 1, 'B': 2, 'C' : 3}","964bf497":"alfabeto['A']","18507ef6":"lista = [1,2,3]","7fdcd3af":"a,b,c = lista","e4a78be4":"a","d7fd861a":"for k in alfabeto:\n    print(k)","52dc3d14":"for v in alfabeto.values():\n    print(v)","e81bc702":"for k, v in alfabeto.items():\n    print(k, v)","f3e74127":"len(alfabeto)","565cf297":"import pandas as pd","9d2443e8":"df = pd.read_csv('..\/input\/train.csv')","7d11181a":"df.shape","fce7c8e6":"df.head()","338db0b3":"df.tail()","f6a6cfde":"df.sample(5)","215cde01":"df.sample(5).T","ae42c2c3":"df.info()","8c372302":"df.describe()","867277b8":"df[20:30]","8124e4f2":"df.iloc[20:30]","5e18bc6e":"df.loc[20:30]","64ffc286":"df['humidity']","d779454e":"df.humidity","6accabc9":"df.loc[:,'humidity']","0b8cad83":"df.iloc[:, 7]","9a92818d":"type(df)","61bd34c2":"type(df['temp'])","d6563765":"df['temp'].describe()","74bf5cbf":"df['temp'].value_counts()","84357939":"df[['workingday','humidity']]","f7819b49":"df.loc[20:30, 'workingday':'humidity']","02d62764":"df.at[20, 'humidity']","d10e243e":"df.dtypes","8a36e82c":"df['datetime'] = pd.to_datetime(df['datetime'])","1efc47a4":"df.dtypes","f3badd03":"df = pd.read_csv('..\/input\/train.csv', parse_dates=[0])","51d5f4a7":"df['datetime'].dt.month","896363da":"df['month'] = df['datetime'].dt.month","06fd8288":"df['month'] == 1","56cd5d3e":"df[df['month'] == 1]","014feeac":"df[(df['month'] == 1) & (df['temp'] < 14)]","8344c9fa":"df[(df['month'] == 1) | (df['temp'] < 14)]","c12306eb":"df[(df['month'] == 1) & (df['temp'] < 14)].shape, df[(df['month'] == 1) | (df['temp'] < 14)].shape ","70508be2":"df.nunique()","41a0ff1c":"df['temp'].hist()","2ab169ba":"df['temp'].plot.box()","4704f493":"import seaborn as sns","53154766":"sns.distplot(df['temp'], bins=10)","f3b81754":"sns.boxplot(y='temp', data=df)","f385ff5c":"sns.boxplot(y='temp', x='season', data=df)","73509230":"sns.violinplot(y='temp', data=df)","128e3ab4":"sns.violinplot(y='temp', x='season', data=df)","68a859d6":"sns.violinplot(y='temp', x='season', data=df, hue='weather')","466a480a":"df.groupby('workingday')['count'].mean()","12e7e7e9":"df.groupby('workingday')['count'].mean().plot.bar()","4619d7f5":"sns.barplot(y='count', x='workingday', data=df)","efe3824d":"sns.barplot(y='count', x='season', data=df)","3d1dddff":"sns.barplot(y='count', x='season', hue='workingday', data=df)","f6abf5eb":"df.groupby('month')['count'].describe()","51fc882e":"df.groupby('month')['count'].describe()['mean'].sort_index(ascending=False).plot()","eca9ba67":"df.groupby('month')['count'].describe()['50%'].sort_index(ascending=False).plot()","e1f18160":"sns.pairplot(x_vars='temp', y_vars='count', data=df, size=7)","f1390442":"sns.pairplot(x_vars='temp', y_vars='count', data=df, hue='season', size=7)","319b4b09":"sns.pairplot(x_vars='humidity', y_vars='count', data=df, hue='season', size=7, kind='reg')","c6abe29b":"df[['humidity', 'count']].corr()","1b93aa94":"df.groupby('season')[['humidity', 'count']].corr()","6ce22b4e":"df.sort_index()","4e4e638a":"df.sort_index(inplace=True)","5c232e87":"df.sort_values(by='count', ascending=False)","90ad06cd":"df.sort_values(['count', 'registered'])","4df50c1f":"df['count'].shift(1)","6342f3fd":"df['last_count_1'] = df['count'].shift(1)","aca74a37":"df","d3f19f84":"for i in range(1, 6):\n    df['last_count_'+str(i)] = df['count'].shift(i)","26f9f181":"df","b76e1b55":"df.info()","714a0291":"df.dropna()","933296e6":"df.fillna(-1)","1b33ba3e":"df.groupby('month')['count'].mean().plot.barh()","31746364":"df['month'] = df['month'].astype('category')","78f3553d":"df['month'].cat.categories","8a33302a":"df['month'].cat.codes","bdb7d33a":"df['month'].cat.categories = ['Janeiro', 'Fevereiro', 'Mar\u00e7o', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']","d38b290b":"df.groupby('month')['count'].mean().plot.barh()","22e5376a":"df['month'].cat.as_ordered(True)","08dc39df":"df.groupby('month')['count'].mean().sort_index(ascending=False).plot.barh()","cae61857":"df.set_index('datetime', inplace=True)","8b920dea":"df.head()","f200dc63":"df.resample('M')['count'].mean()","bde27bb4":"df.resample('M')['count'].mean().plot.barh(figsize=(20,10))","24077f30":"df.resample('2M')['count'].mean().plot.barh()","4abd16a3":"df.resample('Q')['count'].mean().plot.barh()","737436d9":"df.resample('Y')['count'].mean().plot.barh()","d7bb88e2":"df.groupby(['month'])['count'].transform('mean')","0f17f38a":"df['media_mensal'] = df.groupby(['month'])['count'].transform('mean')","85a4ab75":"**Exerc\u00edcio**\n\n1. Crie uma coluna com o desvio padr\u00e3o da coluna `temp` agrupado pela coluna `month`.\n\n(Dica: o desvio padr\u00e3o se chama 'std' no `pandas`)\n","48015de6":"## Primeira Etapa: An\u00e1lise Explorat\u00f3ria dos Dados","9df49145":"**Exerc\u00edcio**\n\n1. Crie um resample semestral.\n2. Plote um gr\u00e1fico de barras do resultado do passo anterior.","ebce4d6a":"**Exerc\u00edcio**\n\nCrie uma fun\u00e7\u00e3o que transforme uma lista de listas (a lista interna sempre com 2 elementos) em um dicion\u00e1rio:\n\n    animals = [[\"cat\", \"dog\"], [\"duck\", \"cow\"]] --> {\"cat\" : \"dog\", \"duck\" : \"cow\"}\n","b7527f5b":"Abaixo segue uma breve revis\u00e3o sobre `strings`:","471563f2":"**Exerc\u00edcio**\n1. Use o `.fillna(-1)` com o par\u00e2metro `inplace=True`","17387f0a":"Vamos olhar como est\u00e1 o nosso `DataFrame`:","997b3390":"## Usando o Seaborn","22f36234":"Existem algumas formas diferentes de selecionar colunas, sendo que `.loc` e `.iloc` s\u00e3o mais recomendadas por terem o comportamento mais previs\u00edvel.","97f98e86":"## If e Else","44f87908":"## Compara\u00e7\u00f5es e Booleanos","a9003152":"Podemos calcular a correla\u00e7\u00e3o passando o m\u00e9todo `.corr()` para um `DataFrame`:","bce58008":"## Plotando Gr\u00e1ficos Similares no Seaborn","5bc8996e":"O split gera uma lista de strings, separando a nossa string original em todos os lugares que existem espa\u00e7os.","1f4b4857":"Podemos inclusive fazer isso ap\u00f3s um `.groupby()`:","5896d2e8":"O `.shift()` serve para deslocar uma coluna para cima ou para baixo em rela\u00e7\u00e3o a uma refer\u00eancia horizontal.","e4fb140c":"## Sort","e5c69086":"Ao mostrarmos um gr\u00e1fico dos meses agrupados, n\u00e3o temos os nomes dos meses no eixo y. ","00b141f0":"**Exerc\u00edcio**\n1. Agrupe as visitas por `month` e tire a mediana da coluna `count`.\n\n(Dica: Existe um m\u00e9todo chamado `.median()` que segue o mesmo funcionamento do `.mean()`\n","a71979bb":"## Filtros","2c1ff53a":"Alguns dos comportamentos do `.resample()` funcionam de forma muito parecida com um `.groupby()` para datas:","d49022ce":"## Fun\u00e7\u00f5es","20d2f735":"## Group By","632e576d":"**Exerc\u00edcio:**\n1. Crie um `for` para criar as colunas `last_registered_1` a `last_registered_5` a partir da coluna `registered`","b49047b1":"O dicion\u00e1rio mapeia uma chave a um valor.","d6e9e003":"`False` \u00e9 representado como `0`, e `True` \u00e9 representado como `1`:","b4af241b":"## Shift","03bc4055":"**Exerc\u00edcio**\n\n1. Fa\u00e7a um boxplot usando as vari\u00e1veis `humidity` e `weather`.\n2. Fa\u00e7a um violinplot usando as vari\u00e1veis `humidity` e `weather`.","50284464":"O tipo de dados `Category` \u00e9 muito \u00fatil para reduzir a utiliza\u00e7\u00e3o de espa\u00e7o em disco e ao mesmo tempo facilitar a visualiza\u00e7\u00e3o e compreens\u00e3o dos dados.\n\nEle pega textos \/ objetos e guarda isso na mem\u00f3ria em forma de n\u00famero e cria um mapa desses n\u00fameros com os textos \/ objetos correspondentes.","3ba5582b":"## Base de dados\nNesse notebook usaremos os dados disponibilizados na plataforma Kaggle sobre os sistemas de empr\u00e9timo de bicicletas, que hoje existem em diversas cidades.\n\nNa maioria desses sistemas, as pessoas podem alugar as bicicletas em um ponto da cidade e devolv\u00ea-las em outro, usando esta\u00e7\u00f5es de coleta espec\u00edficas. Os dados gerados por esses sistemas s\u00e3o interessantes para an\u00e1lise e trabalhos de Machine Learning uma vez que as informa\u00e7\u00f5es sobre a dura\u00e7\u00e3o da viagem, os pontos de partida e chegada, e o tempo gasto na viagem normalmente s\u00e3o registrados.\n\nNo caso espec\u00edfico, s\u00e3o disponibilizados dados sobre o sistema de empr\u00e9stimo de bicicletas da cidade de Washington, D.C., agregados com dados de clima. Os dados correspondem a empr\u00e9stimos realizados durante 2 anos, separados por hora. Os dados de treino correspondem aos primeiros 19 dias de cada m\u00eas, enquanto os dados de teste v\u00e3o do dia 20 at\u00e9 o final do m\u00eas.\n\nNosso objetivo \u00e9 usar Machine Learning para prever o total de bicicletas que ser\u00e3o alugadas a cada hora, usando como base os dados anteriores de aluguel.\n\nMais detalhes sobre a base de dados -> [Bike Sharing Demand](https:\/\/www.kaggle.com\/c\/bike-sharing-demand)","74acb274":"## Como selecionar c\u00e9lulas com `.at` e `.iat`?","b94f7d65":"## Lidando com NaNs","3f556234":"## Explorando uma Series","3832ee40":"Outro plot bem legal \u00e9 o gr\u00e1fico de violino, que mostra um `boxplot` e a distribui\u00e7\u00e3o dos valores:","5eca95c7":"## Categorias","5a022af1":"Podemos resolver isso transformando em uma coluna categ\u00f3rica.","e06d713d":"Ou um conjunto de colunas:","8daff735":"**Exerc\u00edcio:**\n\nO DNA \u00e9 composto por 4 bases: Guanine ('G'), Cytosine ('C'), Adenine ('A'), e Thymine ('T').\nO RNA \u00e9 composto por 4 bases, mas em vez de Thymine ('T'), tem Uracil ('U').\n\nVamos pegar um texto na forma `GCATATAC` e retornar a convers\u00e3o para RNA, que seria `GCAUAUAC`.","8d0741ae":"Agora temos valores em branco no nosso `DataFrame`:","4dd1b07a":"## Sele\u00e7\u00f5es de linhas:","cc351f3b":"Temos a op\u00e7\u00e3o de adicionar o par\u00e2metro `hue='workingday'` para avaliarmos uma terceira vari\u00e1vel no mesmo gr\u00e1fico:","dceddf4c":"## Fazendo An\u00e1lise Explorat\u00f3ria de Grupos","c958ebe1":"Podemos remover eles:","10a7cd85":"**Exerc\u00edcio:**\n\nSelecione o equivalente de `df.loc[20:30, 'workingday':'humidity']` usando o comando `.iloc`:","9d782ab9":"**Exerc\u00edcio**\n\n1. Plote um gr\u00e1fico de barras usando as vari\u00e1veis `casual` e `weather`","4232b238":"**Exerc\u00edcio:**\n\nCrie novas colunas usando os atributos de `df['datetime'].dt` assim como fizemos no comando acima:\n    \n    year\n    day\n    dayofweek\n    hour","9d704a9b":"Se quisermos ordernar os mapas, temos que usar o `.cat.as_ordered(True)` para dizer ao `pandas` que essa categoria \u00e9 orden\u00e1vel na ordem que est\u00e1:","2c563d73":"Podemos usar dados categ\u00f3ricos na coluna `x` para fazermos gr\u00e1ficos como o abaixo:","01b004ca":"Podemos tra\u00e7ar regress\u00f5es lineares com o par\u00e2metro `kind=reg`:","29e29f68":"## Importando Bibliotecas","429ae1a5":"## Histogramas e Boxplot","dce20863":"Ao transformarmos a coluna `datetime` no tipo `datetime64[ns]` temos uma s\u00e9rie de funcionalidades quee podemos acessar por meio do atributo `.dt`:","5e13bf64":"## Strings","b616dc73":"Link para site com v\u00e1rios exerc\u00edcios de programa\u00e7\u00e3o: https:\/\/www.codewars.com","c472f9d1":"Uma forma bem legal de avaliar os grupos \u00e9 fazendo um `.describe()` ap\u00f3s um `.groupby()`:","a7545409":"**Exerc\u00edcio**\n1. Retorne um DataFrame ordenado por `humidity` e `weather`","b43e6c08":"O `barplot` do `seaborn` faz algo muito parecido ao que fizemos acima com o `.groupby()`:","ccb3ce48":"Para avaliarmos a distribui\u00e7\u00e3o dos valores podemos usar os gr\u00e1ficos abaixo:","cb163654":"Uma outra forma de executar um `for` e criar uma lista ao mesmo tempo \u00e9 fazendo um listcomp, que \u00e9 mais r\u00e1pido e mais enxuto. \u00c9 uma pr\u00e1tica muito boa em Python.","e0cdac30":"## Listas e For","7841bef7":"## Atributos de `.dt`:","4e7d7c43":"O m\u00e9todo `.join()` junta strings que est\u00e3o em uma lista em uma \u00fanica string.","72a42592":"Para trabalharmos com dados tabulares, iremos utilizar a biblioteca `pandas`","59a84eb1":"# Revis\u00e3o de Python","7e42820c":"Temos dois atributos importantes, `.categories` que \u00e9 o mapa dos c\u00f3digos:","78737edf":"**Exerc\u00edcio**\n1. Fa\u00e7a um `.describe()` na coluna `atemp`\n2. Fa\u00e7a um `.value_counts()` na coluna `atemp`\n3. Fa\u00e7a um `.mode()` na coluna `atemp`","f543b584":"E temos o `.codes` que \u00e9 o c\u00f3digo que est\u00e1 sendo usado para a representa\u00e7\u00e3o interna:","e7db7401":"Podemos ordenar o \u00edndice:","1b460af1":"## Dicas de Jupyter Notebook\n\nEste programa que estamos usando no navegador se chama Jupyter Notebook e \u00e9 um interpretador de Python interativo. Podemos digitar um comando de Python, apertar _Shift + Enter_ e esse comando \u00e9 executado, tendo seu resultado impresso na tela.\n\nExistem alguns atalhos bastante \u00fateis para trabalhar com Jupyter Notebook:\n    0. 'Esc' - Sa\u00ed do modo edi\u00e7\u00e3o da c\u00e9lula atual (modo navega\u00e7\u00e3o)\n    1. 'Enter' - Edita a c\u00e9lula selecionada (modo navega\u00e7\u00e3o)\n    2. 'Shift + Enter' - Executa a c\u00e9lula selecionada (modo edi\u00e7\u00e3o)\n    3. 'A' - Adiciona uma nova c\u00e9lula acima da c\u00e9lula atual (modo navega\u00e7\u00e3o)\n    4. 'B' - Adiciona uma nova c\u00e9lula abaixo da c\u00e9lula atual (modo navega\u00e7\u00e3o)\n    5. 'X' - Recorta a c\u00e9lula selecionada (modo navega\u00e7\u00e3o)\n    6. 'Z' - Desfaz a dele\u00e7\u00e3o de uma c\u00e9lula (modo navega\u00e7\u00e3o)\n    7. 'Ctrl + Z' - Desfaz as \u00faltimas edi\u00e7\u00f5es (modo edi\u00e7\u00e3o)\n    8. 'Ctrl + Shift + Z' - Refaz o \u00faltimo comando de desfazer (modo edi\u00e7\u00e3o)\n    9. 'H' - Abre um arquivo de ajuda com todos os atalhos (modo navega\u00e7\u00e3o)\n    10. 'Tab' - Faz sugest\u00f5es para completar o c\u00f3digo (modo edi\u00e7\u00e3o)\n    11. 'Shift + Tab' - Faz sugest\u00f5es de assinatura de um m\u00e9todo ou fun\u00e7\u00e3o (modo edi\u00e7\u00e3o)\n    12. '?fun\u00e7\u00e3o' - Mostra a documenta\u00e7\u00e3o de uma dada fun\u00e7\u00e3o (modo edi\u00e7\u00e3o)\n    \n","4c5a758c":"Criar uma fun\u00e7\u00e3o que recebe uma lista de n\u00fameros e retorna a soma dos n\u00fameros n\u00e3o negativos:\n\n    Exemplo: [1,-4,7,12] => 1 + 7 + 12 = 20\n\nObs: se n\u00e3o houver nada para somar, retorne 0.","40cf5d16":"Podemos criar um c\u00f3digo de cores de acordo com a coluna `season`:","06057642":"Quando jogamos uma sequ\u00eancia de `True` e `False` dentro de um `DataFrame` ou `Series`, ela retorna apenas os valores que cumpram esse crit\u00e9rio.","1ce5b3d9":"## Como selecionar linhas e colunas com `.loc` e `.iloc`?","0eb01964":"Quando selecionamos uma coluna temos um objeto do tipo `Series`.","2c8d693d":"**Exerc\u00edcio:**","20ab0d87":"A fun\u00e7\u00e3o `len()` serve para nos dizer qual o tamanho do texto, isto \u00e9, quantos caracteres ele tem.","db846eb8":"**Exerc\u00edcio:**","b8568fa9":"**Exerc\u00edcio**\n\n1. Plote um gr\u00e1fico de linha com os valores m\u00e1ximos por m\u00eas\n2. Plote um gr\u00e1fico de linha com os valores m\u00ednimos por m\u00eas","2eec397b":"**Exerc\u00edcio**\n\n1. Fa\u00e7a um `pairplot` entre `temp` e `casual`, usando `hue='holiday'`.\n2. Adicione o par\u00e2metro `kind='reg'`","b683940a":"O m\u00e9todo `.replace()` serve para trocar uma parte do texto por outro texto.","9741442b":"## Listcomp","9ed05972":"**Exerc\u00edcio **","6cdd213e":"Podemos acessar direto o `.cat.categories` e salvar os meses por cima para mudar o mapa:","105714ab":"## Transform","f5f04d6b":"Selecione o equivalente ao comando `df.at[20, 'humidity']` usando o comando `.iat`:","8a71f453":"Vamos mudar o \u00edndice do nosso `DataFrame` para podermos usar o `.resample()`:","fbe59b88":"Ou uma coluna:","31107d3b":"A nossa vari\u00e1vel `df` \u00e9 um `DataFrame`:","fa2feb5a":"## Selecionando  V\u00e1rias Colunas:","6751272c":"**Exerc\u00edcio**\n1. Fa\u00e7a um `.describe` em uma sele\u00e7\u00e3o composta pelas colunas `temp` e `atemp`.","4c767a88":"## Trabalhando com Datas","e4d53eb5":"## Correla\u00e7\u00e3o","d43053c2":"# Avaliando N\u00famero de Valores Diferentes por Coluna","5cffed77":"Ou podemos preenche-los:","9e7df016":"O `.transform()` serve para juntar resultados de uma agrega\u00e7\u00e3o a tabela original:","7b9e0b8d":"## Criando novas colunas:","5a613c97":"## Vari\u00e1veis Cont\u00ednuas","8ae7ab04":"**Exerc\u00edcio:**\n    \n1. Fa\u00e7a um histograma da coluna `humidity`\n2. Fa\u00e7a um boxplot da coluna `humidity`","6d957774":"Selecione os valores maiores do que a mediana para a coluna `temp` e maiores do que os maiores 25% da coluna `count`.","51fd7d71":"Um gr\u00e1fico interessante para vari\u00e1veis cont\u00ednuas \u00e9 o `pairplot`:","db726dfb":"O pandas tem um `.groupby` similar ao do `SQL`:","51fe6f1b":"O `seaborn` tem uma documenta\u00e7\u00e3o bem legal, vale a pena conferir:\n\nhttps:\/\/seaborn.pydata.org\/tutorial\/distributions.html","20f4a19e":"**Exerc\u00edcio:**\n    \n1. Calcule a correla\u00e7\u00e3o entre `temp` e `casual`.\n2. Calcule a correla\u00e7\u00e3o entre `temp` e `casual` agrupando por `holiday`","c91d1a72":"**Exerc\u00edcio**\n1. Fa\u00e7a um `.value_counts()` na coluna `season` e compare com os valores da c\u00e9lula acima.\n","df01f76c":"Alternativamente, poder\u00edamos ter feito:","66edd9fe":"## Resample","8c643e07":"## Series e DataFrame","80237cdc":"## Dicion\u00e1rios","a3f43928":"**Exerc\u00edcio:**\n    \n1) Fa\u00e7a com a coluna `season` o mesmo que foi feito com a coluna `month`, isto \u00e9, transforme ela em uma coluna com tipo de dados categ\u00f3rico.\n\nLembre-se que os c\u00f3digos correspondem a:\n    1. Primavera\n    2. Ver\u00e3o\n    3. Outono\n    4. Inverno\n    \n2) Plote um gr\u00e1fico de barras com a temperatura m\u00e9dia por `season`.","f44d19a4":"## Sele\u00e7\u00f5es de Colunas:","e85afbc7":"Existem algumas formas de selecionar colunas. Indicamos usar `df['humidity']` porque funciona com nomes de colunas com espa\u00e7o e \u00e9 enxuto."}}