{"cell_type":{"c3a922be":"code","f8850706":"code","95ec4c8b":"code","53c038c6":"code","7cd6d04a":"code","c837ba62":"code","91fa165a":"code","dcbad74b":"code","414a6704":"code","42d148c0":"code","45ef8812":"code","46af24d2":"code","59d4b6de":"code","b99ae6cf":"code","6db69b51":"code","178f499f":"code","8b4417f7":"code","b1125604":"code","d9f8f497":"code","1e264286":"code","f08793e4":"code","6fbf78a4":"code","e090fd5d":"code","93467a0c":"code","bb735b39":"code","defea894":"markdown","a33cd969":"markdown","6b5dae28":"markdown","3ccf9d0d":"markdown"},"source":{"c3a922be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport skimage \nimport tqdm\nimport tensorflow \n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom tqdm import tqdm\n\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, Dense, Dropout, BatchNormalization,Flatten, Activation\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\n\n%matplotlib inline","f8850706":"data = pd.read_csv('..\/input\/facial-key\/facial_keypoint_identification\/facial_keypoint_identification.csv')\n\nprint(\"Data Imported Successfully\")","95ec4c8b":"# Top Rows\n\ndata.head(3)","53c038c6":"# Storing images in numpy array \n\nX = []\n\nfor image in data.image_name:\n    img = imread('..\/input\/facial-key\/facial_keypoint_identification\/images\/' + image)\n    X.append(img)\n    \nX = np.array(X)","7cd6d04a":"# Viewing Images \n\nfig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\n\nfor i in tqdm(range(5)):\n    rand = np.random.randint(len(data.image_name))\n    ax[i].imshow(X[rand])\n    ax[i].axis('off')\n    ax[i].scatter(data.left_eye_center_x.iloc[rand], data.left_eye_center_y.iloc[rand], marker='x', c='r')\n    ax[i].scatter(data.right_eye_center_x.iloc[rand], data.right_eye_center_y.iloc[rand], marker='x', c='r')","c837ba62":"# Checking Size \n\nX.shape","91fa165a":"# Left Eye Centre X\n\nerror_left_eye_x = []\nmean = data.left_eye_center_x.mean()\nnos_of_values = len(data.left_eye_center_x)\n\nfor value in data.left_eye_center_x:\n    ans = (value - mean) * (value - mean)\n    error_left_eye_x.append(ans)\n    \nerror_left_eye_x = np.array(error_left_eye_x)\n\nerror_left_eye_x = error_left_eye_x.sum() \/ nos_of_values\nprint(\"MSE: \", error_left_eye_x)","dcbad74b":"# Left Eye Centre Y\n\nerror_left_eye_y = []\nmean = data.left_eye_center_y.mean()\nnos_of_values = len(data.left_eye_center_y)\n\nfor value in data.left_eye_center_y:\n    ans = (value - mean) * (value - mean)\n    error_left_eye_y.append(ans)\n    \nerror_left_eye_y = np.array(error_left_eye_y)\n\nerror_left_eye_y = error_left_eye_y.sum() \/ nos_of_values\nprint(\"MSE: \", error_left_eye_y)","414a6704":"# Right Eye Centre X\n\nerror_right_eye_x = []\nmean = data.right_eye_center_x.mean()\nnos_of_values = len(data.right_eye_center_x)\n\nfor value in data.right_eye_center_x:\n    ans = (value - mean) * (value - mean)\n    error_right_eye_x.append(ans)\n    \nerror_right_eye_x = np.array(error_right_eye_x)\n\nerror_right_eye_x = error_right_eye_x.sum() \/ nos_of_values\nprint(\"MSE: \", error_right_eye_x)","42d148c0":"# Right Eye Centre Y\n\nerror_right_eye_y = []\nmean = data.right_eye_center_y.mean()\nnos_of_values = len(data.right_eye_center_y)\n\nfor value in data.right_eye_center_y:\n    ans = (value - mean) * (value - mean)\n    error_right_eye_y.append(ans)\n    \nerror_right_eye_y = np.array(error_right_eye_y)\n\nerror_right_eye_y = error_right_eye_y.sum() \/ nos_of_values\nprint(\"MSE: \", error_right_eye_y)","45ef8812":"# Final Error\n\nerror = ((error_left_eye_x * error_left_eye_x) + (error_left_eye_y * error_left_eye_y) + (error_right_eye_x * error_right_eye_x) + (error_right_eye_y * error_right_eye_y)) \/ 4\nerror","46af24d2":"# Resizing Images \n\nImages = []\n\nfor image in data.image_name:\n    img = imread('..\/input\/facial-key\/facial_keypoint_identification\/images\/' + image)\n    img = resize(img, (96,96,3))\n    Images.append(img)\n    \nImages = np.array(Images)","59d4b6de":"# Checking Shape \n\nImages.shape","b99ae6cf":"# Setting Independent and Dependent Variable \n\nX = Images \ny = data.iloc[:, 1:].values","6db69b51":"# Checking min and max values \n\nX.min(), X.max()","178f499f":"# Setting Train & Test Data \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nX_train.shape, X_test.shape","8b4417f7":"# Base Model\n\nbase_model = VGG16(include_top = False,\n                   weights = 'imagenet',\n                   input_shape = (96,96,3))","b1125604":"# Freezing Layers \n\nfor layers in base_model.layers:\n    layers.trainable = False","d9f8f497":"# Building Layers \n\nmodel = Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(4,activation='linear'))\n\nprint(model.summary())","1e264286":"# Compiling Model\n\nmodel.compile(optimizer=tensorflow.keras.optimizers.Adam(lr = 0.001), \n              loss='mean_squared_error')","f08793e4":"# Defining Callbacks \n\nearlystopping  = EarlyStopping(monitor = 'val_loss',\n                               mode = 'min',\n                               patience = 15,\n                               min_delta = 0.001)\n\ncallback_list = [earlystopping]","6fbf78a4":"# Fitting Model\n\nmodel_history = model.fit(x = X_train, \n                          y = y_train, \n                          validation_data = (X_test, y_test),\n                          batch_size = len(X_train) \/\/ 256,\n                          epochs = 200,\n                          callbacks = callback_list)","e090fd5d":"predictions = model.predict(X_test)\npredictions[0:5]","93467a0c":"rand = np.random.randint(len(X_test))\nimshow(X_test[rand])","bb735b39":"fig, ax = plt.subplots(nrows = 1, ncols = 5, figsize = (20,20))\npredictions = model.predict(X_test)\n\nfor i in tqdm(range(5)):\n    rand = np.random.randint(len(X_test))\n    ax[i].imshow(X_test[rand])\n    ax[i].axis('off')\n    ax[i].scatter(data.left_eye_center_x.iloc[rand], data.left_eye_center_y.iloc[rand], marker='x', s=50, c='r')\n    ax[i].scatter(data.right_eye_center_x.iloc[rand], data.right_eye_center_y.iloc[rand], marker='x', s=50, c='r')\n    \n    predicted_left_eye_center_x, predicted_left_eye_center_y, predicted_right_eye_center_x, predicted_right_eye_center_y = predictions[rand]\n    \n    ax[i].scatter(predicted_left_eye_center_x, predicted_left_eye_center_y, marker='o', s=50, c='w')\n    ax[i].scatter(predicted_right_eye_center_x, predicted_right_eye_center_y, marker='o', s=50, c='w')","defea894":"After plotting the values we can see that the location of eye is approximatly at the same location. \nUsing this we will create simple prediction model that the position of eyes is the mean of all position of the eye. \nThis is not the ideal solution and cannot be used in real life but the purpose here is to create benchmark model. \nFor doing this we calculate mean square error between our original targets and predictions which is the mean of the column.","a33cd969":"### IMPORTING \/ VIEWING DATASET ","6b5dae28":"### IMPORTING LIBRARIES","3ccf9d0d":"### STEP 3: BUILDING MODEL"}}