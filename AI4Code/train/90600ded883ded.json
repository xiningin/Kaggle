{"cell_type":{"bfbed833":"code","8bc7a6ac":"code","f05676e0":"code","b6d5566b":"code","2d68d25b":"code","a862fb92":"code","525ab0b5":"code","7d797e7d":"code","ec8a6b9c":"code","f93f0fb9":"code","28e74f8c":"code","49319ba3":"code","bb9693ed":"code","d1e6d375":"code","22f804ad":"code","c18b1016":"code","39ee5150":"code","7d5e8f1f":"code","5b20b889":"code","326ba720":"code","1cd35b8d":"code","f759c921":"code","a28f0ca5":"code","dfddc6f0":"code","21a9aca7":"code","4b4867e6":"code","8b3b9f8f":"code","2330784a":"code","51d0dcfe":"code","db924aaf":"code","3d409f26":"code","3ac9c5da":"code","031445ca":"markdown","435435d0":"markdown","af8cffe0":"markdown"},"source":{"bfbed833":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nos.listdir('\/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/wheat_detection')\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\nimport torch\nprint(torch.cuda.is_available())\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bc7a6ac":"!pip install ..\/input\/mmcvwhl\/addict-2.2.1-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/mmcv-0.5.1-cp37-cp37m-linux_x86_64.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminal-0.4.0-py3-none-any.whl\n!pip install ..\/input\/mmdetection20-5-13\/terminaltables-3.1.0-py3-none-any.whl","f05676e0":"!ls -l \/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/mmdet\/models\/detectors","b6d5566b":"!cat \/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/mmdet\/models\/detectors\/base.py","2d68d25b":"!cp -r \/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/ \/kaggle\/working\/mmdetection_feng","a862fb92":"os.listdir('\/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng')\nos.listdir('.')","525ab0b5":"os.listdir('\/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/configs\/wheat_detection\/')\nos.listdir('\/kaggle\/input\/clone-mmdetection-feng\/mmdetection_feng\/mmdet\/datasets')","7d797e7d":"!cp -r \/kaggle\/input\/mmdetection20-5-13\/cocoapi\/cocoapi .","ec8a6b9c":"cd \/kaggle\/working\/cocoapi\/PythonAPI","f93f0fb9":"os.listdir('\/kaggle\/working\/')","28e74f8c":"!make","49319ba3":"!make install","bb9693ed":"import pycocotools","d1e6d375":"cd \/kaggle\/working\/mmdetection_feng","22f804ad":"!pip install -v -e.","c18b1016":"cd \/kaggle\/working\/mmdetection_feng","39ee5150":"# !cat .\/mmdet\/models\/detectors\/base.py","7d5e8f1f":"import sys\nsys.path.append('\/kaggle\/working\/mmdetection_feng') # To find local version","5b20b889":"# os.listdir()","326ba720":"# !ls -l \/kaggle\/working\/mmdetection_feng\/mmdet\/models\/detectors","1cd35b8d":"# !cat \/kaggle\/working\/mmdetection_feng\/mmdet\/models\/detectors\/base.py","f759c921":"import mmdet","a28f0ca5":"import time\n\nfrom mmdet.apis import init_detector, inference_detector\nfrom tqdm import tqdm\nimport os\nimport cv2\n\nimport pandas as pd","dfddc6f0":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n\n    return \" \".join(pred_strings)\n","21a9aca7":"# def submission_test(config_file, checkpoint_file):\n\n#     model = init_detector(config_file, checkpoint_file, device='cuda:0')\n\n#     results = []\n#     test_path = '\/kaggle\/input\/global-wheat-detection\/test'\n#     bar = tqdm(os.listdir(test_path))\n#     for file in bar:\n#         img = f'{test_path}\/{file}'\n#         result = inference_detector(model, img)\n#         result = [_ for _ in result if len(_) != 0]\n#         boxes = []\n#         scores = []\n\n#         image = cv2.imread(img)\n#         for class_result in result:\n#             for item in class_result:\n#                 box = item[:4]\n#                 x1, y1, x2, y2 = box\n#                 score = item[4]\n#                 boxes.append([x1, y1, x2 - x1, y2 - y1])\n#                 scores.append(float(score))\n\n#         cur_image_result = {\n#             'image_id': file[:-4],\n#             'PredictionString': format_prediction_string(boxes, scores)\n#         }\n#         results.append(cur_image_result)\n\n\n#     test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\n#     return test_df","4b4867e6":"\ndef submission_test(config_file, checkpoint_file):\n\n    model = init_detector(config_file, checkpoint_file, device='cuda:0')\n\n    results = []\n    test_path = '\/kaggle\/input\/global-wheat-detection\/test'\n    # test_path = '\/home\/fengyouliang\/datasets\/WHD\/test'\n\n    bar = tqdm(os.listdir(test_path))\n    for file in bar:\n        img = f'{test_path}\/{file}'\n        result = inference_detector(model, img)\n        if isinstance(result, tuple):\n            bbox_result, segm_result = result\n            if isinstance(segm_result, tuple):\n                segm_result = segm_result[0]  # ms rcnn\n        else:\n            bbox_result, segm_result = result, None\n        result = [_ for _ in bbox_result if len(_) != 0]\n        boxes = []\n        scores = []\n\n        for class_result in result:\n            for item in class_result:\n                box = item[:4]\n                x1, y1, x2, y2 = box\n                score = item[4]\n                boxes.append([x1, y1, x2 - x1, y2 - y1])\n                scores.append(float(score))\n\n        cur_image_result = {\n            'image_id': file[:-4],\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n        results.append(cur_image_result)\n\n    test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\n    return test_df\n","8b3b9f8f":"import os\n\npath = '\/kaggle\/input\/maskrcnn\/'\nos.listdir(path)","2330784a":"root_path = path\n\nconfig_file = f'{root_path}\/maskrcnn.py'\ncheckpoint_file = f'{root_path}\/epoch_12.pth'\n\n# with open(config_file, 'r') as f:\n#     py = f.readlines()\n    \nimport os\nos.path.isfile(config_file), os.path.isfile(checkpoint_file)","51d0dcfe":"# for _ in py:\n#     print(_[:-1])","db924aaf":"test_df = submission_test(config_file, checkpoint_file)\n\n# save_path = '\/kaggle\/working'\n#     if not os.path.exists(save_path):\n#         os.makedirs(save_path)\n#     test_df.to_csv(f'{save_path}\/submission.csv', index=False)","3d409f26":"! rm -rf \/kaggle\/working","3ac9c5da":"test_df.to_csv('\/kaggle\/working\/submission.csv', index=False)","031445ca":"#### Copy the MMDetection framework to the writeable directoy.","435435d0":"#### compile the coco toolbox","af8cffe0":"## Inference"}}