{"cell_type":{"607bef00":"code","8c9a59e8":"code","cdb7cdb4":"code","a83e12a1":"code","111277e7":"code","0083a7ed":"code","f05b8c19":"code","fe3079d5":"code","beac8ffe":"code","db699ac0":"code","f6f336b8":"code","9a743695":"code","68af484d":"markdown"},"source":{"607bef00":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport cv2\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt","8c9a59e8":"train=pd.read_csv('\/kaggle\/input\/classification-of-images\/dataset\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/classification-of-images\/dataset\/test.csv')\ntrain.head()","cdb7cdb4":"\nClass_map={'Food':0,'Attire':1,'Decorationandsignage':2,'misc':3}\ninverse_map={0:'Food',1:'Attire',2:'Decorationandsignage',3:'misc'}\ntrain['Class']=train['Class'].map(Class_map)","a83e12a1":"train['Class']","111277e7":"train_img=[]\ntrain_label=[]\nj=0\npath='\/kaggle\/input\/classification-of-images\/dataset\/Train Images'\nfor i in tqdm(train['Image']):\n    final_path=os.path.join(path,i)\n    img=cv2.imread(final_path)\n    img=cv2.resize(img,(150,150))\n    img=img.astype('float32')\n    train_img.append(img)\n    train_label.append(train['Class'][j])\n    j=j+1","0083a7ed":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen=ImageDataGenerator(rescale=1.\/255.,validation_split=0.20)\ndatagen.fit(train_img)\n\n","f05b8c19":"test_img=[]\npath='\/kaggle\/input\/classification-of-images\/dataset\/Test Images'\nfor i in tqdm(test['Image']):\n    final_path=os.path.join(path,i)\n    img=cv2.imread(final_path)\n    img=cv2.resize(img,(150,150))\n    img=img.astype('float32')\n    test_img.append(img)","fe3079d5":"train_img=np.array(train_img)\ntest_img=np.array(test_img)\ntrain_label=np.array(train_label)\nprint(train_img.shape)\nprint(test_img.shape)\nprint(train_label.shape)","beac8ffe":"from tensorflow.keras.applications.inception_v3 import InceptionV3\n\nfrom tensorflow.keras.layers import Flatten,Dense,Dropout,BatchNormalization\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import GlobalAveragePooling2D\n\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nbase_model=InceptionV3(input_shape = (150, 150, 3), \n                                include_top = False, \n                                weights = 'imagenet')\n","db699ac0":"model=Sequential()\n\nmodel.add(Conv2D(32, (3, 3), padding = 'same', activation = 'relu', input_shape = (150,150,3))) \nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(32, (3, 3), padding = 'same', activation = 'relu', input_shape = (150,150,3))) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32, (3, 3), padding = 'same', activation = 'relu')) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64, (3, 3), padding = 'same', activation = 'relu')) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(128, (3, 3), padding = 'same', activation = 'relu')) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(256, (3, 3), padding = 'same', activation = 'relu')) \nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(4,activation='softmax'))\n\nmodel.summary()\n","f6f336b8":"from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\n\n\nreduce_learning_rate = ReduceLROnPlateau(monitor='loss',\n                                         factor=0.1,\n                                         patience=2,\n                                         cooldown=2,\n                                         min_lr=0.00001,\n                                         verbose=1)\n\ncallbacks = [reduce_learning_rate]\n    \n\n\nmodel.compile( optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nmodel.fit_generator(datagen.flow(train_img, to_categorical(train_label,4), batch_size=32),\n                    epochs=120,callbacks=callbacks)","9a743695":"labels = model.predict(test_img)\nprint(labels[:4])\nlabel = [np.argmax(i) for i in labels]\nclass_label = [inverse_map[x] for x in label]\nprint(class_label[:3])\nsubmission = pd.DataFrame({ 'Image': test.Image, 'Class': class_label })\nsubmission.head(10)\nsubmission.to_csv('submission.csv', index=False)","68af484d":"# predict for test dataset"}}