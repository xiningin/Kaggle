{"cell_type":{"9debd731":"code","4de39504":"code","a0885b67":"code","dd69730a":"code","ecdae7b7":"code","a0225405":"code","3e01bc17":"code","c47656ff":"code","37089139":"code","ba834c39":"markdown","a9fb8b20":"markdown"},"source":{"9debd731":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4de39504":"import numpy as np\nimport random\nimport gym\n\nenv = gym.make(\"FrozenLake8x8-v1\") \nenv.reset()\nenv.render()","a0885b67":"actions = env.action_space.n\nstates = env.observation_space.n\neposides = 100000\nepsilon = 0.8\ngamma = 0.9\nalpha = 0.01","dd69730a":"# Create Q table with all rewards = 0\nq_table = np.zeros((states, actions))","ecdae7b7":"# Training\navg_reward = 0\navg_steps = 0\nfor i in range(eposides):\n    env.reset()\n    done = False\n    state = 0\n    steps = 0\n    total_reward = 0\n    while not done:\n        # epsilon-greedy\n        if random.random() < epsilon:\n            action = env.action_space.sample() # Explore\n        else:\n            action = np.argmax(q_table[state,:]) # Exploit\n        \n        # Move one step\n        next_state, reward, done, _ = env.step(action)\n        \n        # Update Q table\n        q_table[state, action] = q_table[state, action] + alpha*(reward + gamma*np.max(q_table[next_state, :]) - q_table[state, action])\n        state = next_state\n        \n        # Update statistics\n        steps = steps + 1\n        total_reward = total_reward + reward\n    \n    avg_reward += total_reward\n    avg_steps += steps\n    \n    if i % 10000 == 0:\n        avg_reward \/= 1000\n        avg_steps \/= 1000\n        print(\"At Episode {}, the average steps {}, reward {}\".format(i, avg_steps, avg_reward))\n        avg_reward = 0","a0225405":"q_table","3e01bc17":"# Testing: Calculating the average reward of 1000 eposides\ntest_episodes = 1000 # DON'T CHANGE THIS VALUE\nsteps = 0\ntotal_reward = 0\nfor i in range(test_episodes):\n    env.reset()\n    done = False\n    while not done:\n        action = np.argmax(q_table[state,:])\n        next_state, reward, done, _ = env.step(action)\n        state = next_state\n        steps = steps + 1\n        total_reward = total_reward + reward\n    \nprint(\"The average results of {} episodes are steps {}, reward {}\".format(test_episodes, steps\/test_episodes, total_reward\/test_episodes))","c47656ff":"total_avg_reward = total_reward\/test_episodes\n# Print results in CSV format and upload to Kaggle\nwith open('rewards.csv', 'w') as f:\n    f.write('Id,Predicted\\n')\n    f.write('FrozenLake8x8_public,{}\\n'.format(total_avg_reward))\n    f.write('FrozenLake8x8_private,{}\\n'.format(total_avg_reward))","37089139":"from IPython.display import FileLink\nFileLink('rewards.csv')","ba834c39":"#### What are you trying to do in this notebook?\nThe goal of FrozenLake is to go from the starting state (S) to the goal state (G) by walking only on frozen tiles (F) and avoid holes (H). However, the ice is slippery, so you won't always move in the direction you intend (stochastic environment).\n\nThe Frozen Lake environment is a 4\u00d74 grid which contain four possible areas  \u2014 Safe (S), Frozen (F), Hole (H) and Goal (G). The agent moves around the grid until it reaches the goal or the hole. If it falls into the hole, it has to start from the beginning and is rewarded the value 0. The process continues until it learns from every mistake and reaches the goal eventually.\n\n#### Why are you trying it?\nWe use OpenAI Gym FrozenLake 8x8 as environment. \nReinforcement Learning With OpenAI Gym. \nOpenAI gym is an environment where one can learn and implement the Reinforcement Learning algorithms to understand how they work. It gives us the access to teach the agent from understanding the situation by becoming an expert on how to walk through the specific task.","a9fb8b20":"#### Did it work?\nWe will be working on the Frozen Lake environment where we teach the agent to move from one block to another and learn from the mistakes.\nIn the Q-Learning method of reinforcement learning, the value is updated by an off-policy. \nThe agent in the environment has four possible moves \u2014 Up, Down, Left and Right. We will be implementing one of the Reinforcement Learning techniques, Q-Learning, here. This environment will allow the agent to move accordingly.\n\n#### What did you not understand about this process?\nWell, everything provides in the competition data page. I've no problem while working on it. If you guys don't understand the thing that I'll do in this notebook then please comment on this notebook.\n\n#### What else do you think you can try as part of this approach?\nOnce we have all the required resources, we can start training our agent to deal with the Frozen Lake situation. At first, the random movement allows the agent to move around and understand the environment. Later, we will reduce this random action which allows the agent to move in the direction which is likely to be either a frozen state or the goal. Every episode starts with the position Safe (S) and then the agent continues to move around the grid trying new blocks. The episode ends once the agent has reached the Goal for which the reward value is 1."}}