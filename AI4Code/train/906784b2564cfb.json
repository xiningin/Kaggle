{"cell_type":{"64d29a3b":"code","eeae0f34":"code","fdc2cdb4":"code","7a643bd4":"code","5e0fe72e":"code","ce839dd0":"code","6873f879":"code","d5553425":"code","b5eb5aa3":"code","adeaf273":"code","6a2bcbb4":"code","11883581":"code","e2678592":"code","e6c989dd":"code","2ac77902":"code","9cb9f71c":"code","9681f634":"code","bcf1685f":"code","eae0a714":"markdown","e19d0613":"markdown","9cf9d41c":"markdown","ebbd040f":"markdown","68a09784":"markdown","fc725442":"markdown","91a9f569":"markdown","1d875953":"markdown","ec17b90d":"markdown","6ac69c0e":"markdown","b4d6dd70":"markdown","4028b799":"markdown","426220f1":"markdown"},"source":{"64d29a3b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()","eeae0f34":"# Load the data & check what's inside\ncustomers = pd.read_csv ('..\/input\/customerssegmentation\/customers-segmentation.csv')\ncustomers.head()","fdc2cdb4":"customers.info()","7a643bd4":"customers.describe().round(1)","5e0fe72e":"plt.scatter(customers['Satisfaction'], customers['Loyalty'])\nplt.xlabel('Satisfaction')\nplt.ylabel('Loyalty')","ce839dd0":"from sklearn import preprocessing\n# defining X \nX = customers\n# Scale the inputs using 'preprocessing.scale()' which scales each variable (column in X) with respect to itself\nx_scaled = preprocessing.scale(X)\nx_scaled","6873f879":"from sklearn.cluster import KMeans","d5553425":"X = customers.copy()","b5eb5aa3":"# Now selecting the number of the cluster i aimed in this case i choose 2\nkmeans = KMeans(2)","adeaf273":"# fit the data\nkmeans.fit(X)","6a2bcbb4":"# Create a copy of the input data\nclusters = X.copy()","11883581":"# Take note of the predicted clusters\nclusters['cluster_pred'] = kmeans.fit_predict(X)","e2678592":"# Plot the data using the longitude and the latitude\nplt.scatter(clusters['Satisfaction'], clusters['Loyalty'], c=clusters['cluster_pred'], cmap='coolwarm')\nplt.xlabel('Satisfaction')\nplt.ylabel('Loyalty')","e6c989dd":"# First we defined (Within-Cluster Sum of Square) as wcss and make the empty list\nwcss = []\n\n# Create all possible cluster solution with a loop\n# I have chosen to get solutions from 1 to 10 clusters\nfor i in range(1,11):\n    # Cluster solution with i clusters\n    kmeans = KMeans(i)\n    #Fit the standardized data\n    kmeans.fit(x_scaled)\n    # Append the WCSS for the iteration\n    wcss.append(kmeans.inertia_)\n\n# Check the result\nwcss","2ac77902":"# Plot the number of clusters vs. WCSS\nplt.plot(range(1,11),wcss)\nplt.xlabel('Number of the cluster')\nplt.ylabel('WCSS')","9cb9f71c":"# Fiddle with K (the number of clusters)\nkmeans_new = KMeans(5)\n\n#fit the data\nkmeans_new.fit(x_scaled)\n\n# Create a new data frame with the predicted clusters\nclusters_new = X.copy()\nclusters_new['cluster_pred'] = kmeans_new.fit_predict(x_scaled)","9681f634":"# Check if everything going well\nclusters_new.head()","bcf1685f":"# PLotting the final clusters\n#plt.figure(figsize=(15,10))\nplt.scatter(clusters_new['Satisfaction'], clusters_new['Loyalty'], c=clusters_new['cluster_pred'], cmap='rainbow')\nplt.xlabel('Satisfactioln')\nplt.ylabel('Loyalty')","eae0a714":"### Importing Libraries","e19d0613":"**by using logic loop**","9cf9d41c":"### Model Training & Prediction","ebbd040f":"![](https:\/\/www.converted.in\/blog\/wp-content\/uploads\/2020\/05\/Customer-segmentation.png)","68a09784":"# Unsupervised Learning | Clustering (K-Means) ","fc725442":"### Loading & Inspecting Data","91a9f569":"## Customers Segmentation","1d875953":"**The figure show that the optimal number are (5)**","ec17b90d":"### Finding the Optimal Number of Clusters (Elbow \/ Knee Method) ","6ac69c0e":"### Exploring Data","b4d6dd70":"Explor the data by creating a scatter plot for the two variables using matplotlib","4028b799":"### Data Preprocessing","426220f1":"#### **Introduction:**\n#### **In this project i will use unsupervised K-mean clustering algorithms to measure customers segmentation and prepare it to final supervised model** "}}