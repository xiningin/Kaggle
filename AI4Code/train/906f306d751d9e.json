{"cell_type":{"d5f69834":"code","9bebfc0b":"code","6d8d48da":"code","a6a63749":"code","375d377c":"code","5eb85770":"code","0084c269":"code","ee74f203":"code","f7d33467":"code","76d239d3":"code","b4ef263c":"code","8ba91bc3":"code","2d480a53":"code","85250e90":"code","fe81280b":"code","d69535d2":"code","ebdef431":"code","d76014dc":"code","aa373d87":"code","ed20a8f1":"code","7e50c3d0":"code","6cd6d8f9":"markdown","ca41fc0b":"markdown","61a167ad":"markdown","25dc7b88":"markdown"},"source":{"d5f69834":"import torch\nimport torch.nn as nn","9bebfc0b":"class Discriminator(nn.Module):\n    def __init__(self, channel_img, features_d):\n        super(Discriminator, self).__init__()\n        self.disc = nn.Sequential(\n            nn.Conv2d(channel_img, features_d, kernel_size=4, stride=2, padding=1),\n            nn.LeakyReLU(0.2),\n            \n            self._block(features_d, features_d*2, 4, 2 , 1 ),\n            self._block(features_d * 2, features_d*4, 4, 2, 1),\n            self._block(features_d * 4, features_d*8, 4, 2, 1),\n            nn.Conv2d(features_d*8, 1, kernel_size=4, stride=2, padding=0),\n            nn.Sigmoid()\n        )\n        \n    def _block(self,in_channels, out_channels, kernel_size, stride, padding):\n        return nn.Sequential(\n            nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, padding=padding, stride=stride, bias=False),\n            nn.LeakyReLU(0.2)\n        )\n    \n    def forward(self, x):\n        return self.disc(x)","6d8d48da":"class demoGenerator(nn.Module):\n    def __init__(self, channels_noise, channels_img, features_g):\n        super(demoGenerator, self).__init__()\n        self.net = nn.Sequential(\n            # Input: N x channels_noise x 1 x 1\n            self._block(channels_noise, features_g * 16, 4, 1, 0),  # img: 4x4\n            self._block(features_g * 16, features_g * 8, 4, 2, 1),  # img: 8x8\n            self._block(features_g * 8, features_g * 4, 4, 2, 1),  # img: 16x16\n            self._block(features_g * 4, features_g * 2, 4, 2, 1),  # img: 32x32\n            nn.ConvTranspose2d(\n                features_g * 2, channels_img, kernel_size=4, stride=2, padding=1\n            ),\n            # Output: N x channels_img x 64 x 64\n            nn.Tanh(),\n        )\n\n    def _block(self, in_channels, out_channels, kernel_size, stride, padding):\n        return nn.Sequential(\n            nn.ConvTranspose2d(\n                in_channels,\n                out_channels,\n                kernel_size,\n                stride,\n                padding,\n                bias=False,\n            ),\n            #nn.BatchNorm2d(out_channels),\n            nn.ReLU(),\n        )\n\n    def forward(self, x):\n        return self.net(x)","a6a63749":"class Generator(nn.Module):\n    def __init__(self, channel_noise, channel_img, features_g):\n        super(Generator, self).__init__()\n        self.net = nn.Sequential(\n            self._block(channel_noise, features_g * 16, 4, 1, 0),\n            self._block(features_g * 16,features_g * 8, 4, 2, 1),\n            self._block(features_g * 8, features_g * 4, 4, 2, 1),\n            self._block(features_g * 4, features_g * 2, 4, 2, 1),\n            nn.ConvTranspose2d(\n                features_g * 2, channel_img, kernel_size=4, stride=2, padding=1\n            ),\n            nn.Tanh()\n        )\n    \n    def _block(self, in_channels, out_channels, kernel_size, stride, padding):\n        return nn.Sequential(\n            nn.ConvTranspose2d(\n                in_channels,\n                out_channels,\n                kernel_size,\n                stride,\n                padding,\n                bias=False,\n            ),\n            #nn.BatchNorm2d(out_channels),\n            nn.ReLU(),\n        )\n\n    def forward(self, x):\n        return self.net(x)","375d377c":"def initialise_weights(model):\n    for m in model.modules():\n        if isinstance(m , (nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d)):\n            nn.init.normal_(m.weight.data, 0.0, 0.2)\n    ","5eb85770":"#checking\n\nN, in_channels, H, W = 8, 3, 64, 64\nnoise_dim = 100\nx = torch.randn(N, in_channels, H , W)\ndisc = Discriminator(in_channels, 8)\nassert disc(x).shape == (N, 1, 1, 1), \"Discriminator test failed\"\nprint(disc(x).shape)\ngen = demoGenerator(noise_dim, in_channels,  8)\nz = torch.randn(N, noise_dim, 1,1)\n\nprint(gen(z).shape)\n\ngen = Generator(noise_dim, in_channels, 8)\n\nprint(gen(z).shape)\n# assert gen(z).shape == (N, 3, 64, 64) , \"Generator test failed\"","0084c269":"import torch.optim as optim\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torchvision.datasets import ImageFolder","ee74f203":"# Hyperparameters etc.\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nLEARNING_RATE = 2e-4  # could also use two lrs, one for gen and one for disc\nBATCH_SIZE = 128\nIMAGE_SIZE = 64\nCHANNELS_IMG = 1\nNOISE_DIM = 100\nNUM_EPOCHS = 5\nFEATURES_DISC = 64\nFEATURES_GEN = 64","f7d33467":"from PIL import Image\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/chinese-mnist\/chinese_mnist.csv')\n\ndf.head()\n","76d239d3":"my_transforms = transforms.Compose(\n    [\n        transforms.Resize(IMAGE_SIZE),\n        transforms.ToTensor(),\n#         transforms.Normalize(\n#             [0.5 for _ in range(CHANNELS_IMG)], [0.5 for _ in range(CHANNELS_IMG)]\n#         ),\n    ]\n)","b4ef263c":"train_dataset = ImageFolder(root=\"..\/input\/chinese-mnist\/data\", transform=my_transforms)","8ba91bc3":"x, _= train_dataset[1030]\n\nx.shape","2d480a53":"import matplotlib.pyplot as plt\n\nplt.imshow(x.permute(1,2,0))","85250e90":"dataloader = DataLoader(dataset=train_dataset, batch_size=BATCH_SIZE, shuffle=True)","fe81280b":"gen = Generator(NOISE_DIM, CHANNELS_IMG, FEATURES_GEN).to(device)\ndisc = Discriminator(CHANNELS_IMG, FEATURES_DISC).to(device)\ninitialise_weights(gen)\ninitialise_weights(disc)","d69535d2":"optim_gen = optim.Adam(gen.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))\noptim_disc = optim.Adam(disc.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))","ebdef431":"loss_criterion = nn.BCELoss()","d76014dc":"fixed_noise = torch.randn(32, NOISE_DIM, 1, 1).to(device)\nstep = 0","aa373d87":"gen.train()\ndisc.train()","ed20a8f1":"\nfrom torch.utils.tensorboard import SummaryWriter\n\n# Hyperparameters etc.\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nLEARNING_RATE = 2e-4  # could also use two lrs, one for gen and one for disc\nBATCH_SIZE = 128\nIMAGE_SIZE = 64\nCHANNELS_IMG = 3\nNOISE_DIM = 100\nNUM_EPOCHS = 5\nFEATURES_DISC = 64\nFEATURES_GEN = 64\n\n\ndataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)\ngen = Generator(NOISE_DIM, CHANNELS_IMG, FEATURES_GEN).to(device)\ndisc = Discriminator(CHANNELS_IMG, FEATURES_DISC).to(device)\ninitialise_weights(gen)\ninitialise_weights(disc)\n\nopt_gen = optim.Adam(gen.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))\nopt_disc = optim.Adam(disc.parameters(), lr=LEARNING_RATE, betas=(0.5, 0.999))\ncriterion = nn.BCELoss()\n\nfixed_noise = torch.randn(32, NOISE_DIM, 1, 1).to(device)\nwriter_real = SummaryWriter(f\"logs\/real\")\nwriter_fake = SummaryWriter(f\"logs\/fake\")\nstep = 0\n\ngen.train()\ndisc.train()\n\nfor epoch in range(NUM_EPOCHS):\n    # Target labels not needed! <3 unsupervised\n    for batch_idx, (real, _) in enumerate(dataloader):\n        real = real.to(device)\n        noise = torch.randn(BATCH_SIZE, NOISE_DIM, 1, 1).to(device)\n        fake = gen(noise)\n\n        ### Train Discriminator: max log(D(x)) + log(1 - D(G(z)))\n        disc_real = disc(real).reshape(-1)\n        loss_disc_real = criterion(disc_real, torch.ones_like(disc_real))\n        disc_fake = disc(fake.detach()).reshape(-1)\n        loss_disc_fake = criterion(disc_fake, torch.zeros_like(disc_fake))\n        loss_disc = (loss_disc_real + loss_disc_fake) \/ 2\n        disc.zero_grad()\n        loss_disc.backward()\n        opt_disc.step()\n\n        ### Train Generator: min log(1 - D(G(z))) <-> max log(D(G(z))\n        output = disc(fake).reshape(-1)\n        loss_gen = criterion(output, torch.ones_like(output))\n        gen.zero_grad()\n        loss_gen.backward()\n        opt_gen.step()\n\n        # Print losses occasionally and print to tensorboard\n        if batch_idx % 100 == 0:\n            print(\n                f\"Epoch [{epoch}\/{NUM_EPOCHS}] Batch {batch_idx}\/{len(dataloader)} \\\n                  Loss D: {loss_disc:.4f}, loss G: {loss_gen:.4f}\"\n            )\n\n            with torch.no_grad():\n                fake = gen(fixed_noise)\n                # take out (up to) 32 examples\n                img_grid_real = torchvision.utils.make_grid(\n                    real[:32], normalize=True\n                )\n                img_grid_fake = torchvision.utils.make_grid(\n                    fake[:32], normalize=True\n                )\n\n                writer_real.add_image(\"Real\", img_grid_real, global_step=step)\n                writer_fake.add_image(\"Fake\", img_grid_fake, global_step=step)\n\n            step += 1","7e50c3d0":"# train_one_loop(disc, gen, dataloader, show_image=1)","6cd6d8f9":"## Testing on Chinese dataset","ca41fc0b":"## Testing the model on dataset","61a167ad":"## Model creation","25dc7b88":"#sd"}}