{"cell_type":{"bc422d03":"code","fde3907b":"code","cac8e587":"code","22776322":"code","b1d4c3c1":"code","45923713":"code","15ec93c0":"code","6a565d7e":"code","217899e2":"code","89c5f0d1":"code","e157d10d":"code","b828753f":"code","2ac69ebf":"code","ab0b9ebe":"code","f0f40852":"code","f4e9fac4":"code","c042f087":"code","b998407c":"code","19a178bc":"code","f93d7ac2":"code","19d823f0":"code","56a143d2":"code","acb0609f":"code","49af9a79":"code","5df7a08b":"code","13eacbd9":"code","cba1ccb0":"code","e657c024":"code","1f571110":"code","ed6fdd55":"code","eb20a663":"code","4e875355":"code","390feaae":"code","c9076c49":"code","942dfc32":"code","0f7b0df0":"code","9a81a0cf":"code","a31a25de":"code","abe0fbcd":"code","8883c5b5":"code","8774f5ad":"code","12ce92f0":"code","89673570":"code","dad984c2":"code","76b2d353":"code","6444477a":"code","5d4e8047":"code","5a2acbbb":"code","15fa0e1d":"code","7dacbfec":"markdown","c50bd161":"markdown","fb32b9ee":"markdown","2e12e1cf":"markdown","b6bad8fc":"markdown","b5f902d3":"markdown","ef66a22e":"markdown","5440202e":"markdown","f04a1a6e":"markdown","754af3b7":"markdown","e95b6158":"markdown","4ec76fee":"markdown","fa572797":"markdown"},"source":{"bc422d03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fde3907b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.rcParams[\"figure.figsize\"]=10,6\nplt.rcParams[\"axes.grid\"]=True\nplt.gray()","cac8e587":"df = pd.read_csv(\"\/kaggle\/input\/data-police-shootings\/fatal-police-shootings-data.csv\")","22776322":"df.head()","b1d4c3c1":"#import pandas_profiling as pf","45923713":"#from pandas_profiling import ProfileReport\n#prof = ProfileReport(df)\n#prof.to_file(output_file='Episode.html')","15ec93c0":"#prof","6a565d7e":"df.info()","217899e2":"df.columns","89c5f0d1":"def missing_percentage(df):\n    percentage = pd.Series(list(round((df.isnull().sum()\/len(df)*100),2)),name=\"Percentage\")\n    col_name = pd.Series(df.columns,name=\"Col_name\")\n    missing_percentage = pd.concat([col_name,percentage],axis=1).sort_values(by=\"Percentage\",ascending=False).reset_index(drop=True)\n    return missing_percentage","e157d10d":"ts = missing_percentage(df)\nprint(ts)","b828753f":"# sns.set(rc={'figure.figsize':(18,6)})\nplt.figure(figsize=(18,6))\ng= sns.barplot(x=\"Col_name\",y=\"Percentage\",data=ts)\nfor index, row in ts.iterrows():\n    g.text(row.name,row.Percentage, round(row.Percentage), color='black', ha=\"center\")\nplt.xlabel(\"Columns_Name\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Percentage\",weight=\"bold\",fontsize=12)\nplt.title(\"Missing_values_along_different_columns\",weight=\"bold\",fontsize=14)\nplt.show()","2ac69ebf":"df.head()","ab0b9ebe":"df[\"month\"] = pd.to_datetime(df[\"date\"]).dt.month\ndf[\"year\"] = pd.to_datetime(df[\"date\"]).dt.year","f0f40852":"df.head()","f4e9fac4":"df['manner_of_death'].value_counts()","c042f087":"# sns.set(rc={'figure.figsize':(10,6)})\nsns.countplot(x=\"gender\",data=df,palette='winter')\nplt.xlabel(\"Gender\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Count\",weight=\"bold\",fontsize=12)\nplt.title(\"Distribution of Gender\",weight=\"bold\",fontsize=14)\nplt.show()","b998407c":"ds = df.loc[df[\"manner_of_death\"]==\"shot\"]\n\n# sns.set(rc={'figure.figsize':(10,6)})\ng=sns.countplot(x=\"race\",data=ds,palette='winter')\nplt.xlabel(\"Race\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Count\",weight=\"bold\",fontsize=12)\nplt.title(\"Distribution of Shootout by Police\",weight=\"bold\",fontsize=14)\n\nplt.show()","19a178bc":"unarmed = df.loc[df[\"armed\"]==\"unarmed\"]\n# sns.set(rc={'figure.figsize':(10,6)})\nsns.countplot(x=\"race\",data=unarmed,palette='winter')\nplt.xlabel(\"Race\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Count\",weight=\"bold\",fontsize=12)\nplt.title(\"Distribution of Shootout by Police unarmed people\",weight=\"bold\",fontsize=14)\nplt.show()","f93d7ac2":"shoot_by_states = df[\"state\"].value_counts()[:10]\nshoot_by_states = pd.DataFrame(shoot_by_states).reset_index()\nshoot_by_states","19d823f0":"states = shoot_by_states['index'].tolist()\ndata_counts  = shoot_by_states['state'].tolist()","56a143d2":"fig, ax = plt.subplots(figsize=(10,10), subplot_kw=dict(aspect=\"equal\"))\n\nstates = states\n\ndata = data_counts\n\ndef func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\\n({:d} )\".format(pct, absolute)\n\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, states,\n          title=\"States\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Top 10 US states\",weight=\"bold\",fontsize=14)\n\nplt.show()","acb0609f":"df.columns","49af9a79":"sns.distplot(df['age'])\nplt.xlabel(\"Age\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Frequency\",weight=\"bold\",fontsize=12)\nplt.title(\"Age distribution\",weight=\"bold\",fontsize=14)\nplt.show()","5df7a08b":"body_camera = df['body_camera'].value_counts()","13eacbd9":"sns.barplot(body_camera.index, body_camera.values, alpha=0.8)\nplt.xlabel(\"Body Camnera\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Frequency\",weight=\"bold\",fontsize=12)\nplt.title(\"How many Police wearing body camera??\",weight=\"bold\",fontsize=14)\nplt.show()","cba1ccb0":"no_camera = df[df[\"body_camera\"]==False]","e657c024":"no_camera_pol =no_camera['race'].value_counts()","1f571110":"g=sns.barplot(no_camera_pol.index, no_camera_pol.values, alpha=0.8)\nplt.xlabel(\"Race\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Frequency\",weight=\"bold\",fontsize=12)\nplt.title(\"Nnumber Peope shot when Police not wearing camera\",weight=\"bold\",fontsize=14)\n\n\nplt.show()","ed6fdd55":"camera_yes = df[df[\"body_camera\"]==True]\nyes_camera_pol =camera_yes['race'].value_counts()\nsns.barplot(yes_camera_pol.index, yes_camera_pol.values, alpha=0.8,palette=\"winter\")\nplt.xlabel(\"Race\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Frequency\",weight=\"bold\",fontsize=12)\nplt.title(\"Number Peope shot when Police wearing camera\",weight=\"bold\",fontsize=14)\nplt.show()","eb20a663":"daily_shootouts = df[['date']]\ndaily_shootouts['kills']=1\ndaily_shootouts=daily_shootouts.groupby('date').sum()\ndaily_shootouts = daily_shootouts.reset_index()\n","4e875355":"daily =daily_shootouts ","390feaae":"daily.set_index(\"date\").plot()\nplt.xlabel(\"Date\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Count of Shootouts\",weight=\"bold\",fontsize=12)\nplt.title(\"Distribution of daywise\",weight=\"bold\",fontsize=14)\nplt.show()\nplt.show()","c9076c49":"df.head()","942dfc32":"innocent = df[(df.signs_of_mental_illness==False) & (df.armed == \"unarmed\") & (df.flee==\"Not fleeing\")]","0f7b0df0":"innnocent_people = innocent[\"race\"].value_counts()\ninnnocent_people = pd.DataFrame(innnocent_people).reset_index()\ninnnocent_people","9a81a0cf":"race = innnocent_people['index'].tolist()\ndata_counts  = innnocent_people['race'].tolist()","a31a25de":"fig, ax = plt.subplots(figsize=(10,10), subplot_kw=dict(aspect=\"equal\"))\n\nstates = race\n\ndata = data_counts\n\ndef func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\\n({:d} )\".format(pct, absolute)\n\n\nwedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"))\n\nax.legend(wedges, states,\n          title=\"States\",\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=8, weight=\"bold\")\n\nax.set_title(\"Innocent People by Race\",weight=\"bold\",fontsize=14)\n\nplt.show()","abe0fbcd":"year_wise = df['year'].value_counts()","8883c5b5":"g=sns.barplot(year_wise.index, year_wise.values, alpha=0.8)\nplt.xlabel(\"Race\",weight=\"bold\",fontsize=12)\nplt.ylabel(\"Frequency\",weight=\"bold\",fontsize=12)\nplt.title(\"Nnumber Peope shot by every year\",weight=\"bold\",fontsize=14)\n\n\nplt.show()","8774f5ad":"kills_per_year = df[['year','race']]\nkills_per_year ['kills'] =1\ntemp = kills_per_year[[\"year\",\"race\",'kills']].groupby([\"year\",\"race\"]).sum().add_prefix(\"Sum_of_\").reset_index()\ntemp1 = temp.pivot(\"year\",\"race\",\"Sum_of_kills\")\nax = temp1.plot(kind='bar',stacked=True)\nplt.xticks(rotation=0)\nplt.xlabel(\"Year\",fontweight =\"bold\",fontsize=14)\nplt.ylabel('Frequency',fontweight =\"bold\",fontsize=14)\nplt.title(\"Year wise distribution of shot death\",fontweight =\"bold\",fontsize=16)\nplt.show()","12ce92f0":"kills_per_month = df[['month','race']]\nkills_per_month ['kills'] =1\ntemp = kills_per_month[[\"month\",\"race\",'kills']].groupby([\"month\",\"race\"]).sum().add_prefix(\"Sum_of_\").reset_index()\ntemp1 = temp.pivot(\"month\",\"race\",\"Sum_of_kills\")\nax = temp1.plot(kind='bar',stacked=True)\nplt.xticks(rotation=0)\nplt.xlabel(\"Monht\",fontweight =\"bold\",fontsize=14)\nplt.ylabel('Frequency',fontweight =\"bold\",fontsize=14)\nplt.title(\"Month wise distribution of shot death\",fontweight =\"bold\",fontsize=16)\nplt.show()","89673570":"mental_illness = df[df.signs_of_mental_illness==True]\nkills_per_year = mental_illness[['year','race']]\nkills_per_year ['kills'] =1\ntemp = kills_per_year[[\"year\",\"race\",'kills']].groupby([\"year\",\"race\"]).sum().add_prefix(\"Sum_of_\").reset_index()\ntemp1 = temp.pivot(\"year\",\"race\",\"Sum_of_kills\")\nax = temp1.plot(kind='bar',stacked=True)\nplt.xticks(rotation=0)\nplt.xlabel(\"Year\",fontweight =\"bold\",fontsize=14)\nplt.ylabel('Frequency',fontweight =\"bold\",fontsize=14)\nplt.title(\"Mental illnes and shooting across different races\",fontweight =\"bold\",fontsize=16)\nplt.show()","dad984c2":"kills_per_year = df[['year','city']]\nkills_per_year ['kills'] =1\ntemp = kills_per_year[[\"year\",\"city\",'kills']].groupby([\"year\",\"city\"]).sum().add_prefix(\"Sum_of_\").reset_index()[:20]\n# temp1 = temp.pivot(\"year\",\"city\",\"Sum_of_kills\")\n# ax = temp1.plot(kind='bar',stacked=True)\n# plt.xticks(rotation=0)\n# plt.xlabel(\"Year\",fontweight =\"bold\",fontsize=14)\n# plt.ylabel('Frequency',fontweight =\"bold\",fontsize=14)\n# plt.title(\"City with most Poeple killing year wise\",fontweight =\"bold\",fontsize=16)\n# plt.show()","76b2d353":"temp","6444477a":"import datetime","5d4e8047":"# Feature Generation\ndf['date']=pd.to_datetime(df['date'])\n# df['year']=pd.to_datetime(df['date']).dt.year\n# df['month']=pd.to_datetime(df['date']).dt.month\ndf['month_name']=df['date'].dt.strftime('%B')\ndf['month_num']=df['date'].dt.strftime('%m')\ndf['weekdays']=df['date'].dt.strftime('%A')  \ndf['date_num']=df['date'].dt.strftime('%d').astype(int)\ndf['date_categ']=np.where(df['date_num']<16,\"First Half\",\"Second Half\")\ndf['date_mon']=df.date.dt.to_period(\"M\")","5a2acbbb":"df.head()","15fa0e1d":"kills_per_year_gen = mental_illness[['year','gender']]\nkills_per_year_gen ['kills'] =1\ntemp = kills_per_year_gen[[\"year\",\"gender\",'kills']].groupby([\"year\",\"gender\"]).sum().add_prefix(\"Sum_of_\").reset_index()\ntemp1 = temp.pivot(\"year\",\"gender\",\"Sum_of_kills\")\nax = temp1.plot(kind='bar',stacked=False)\nplt.xticks(rotation=0)\nplt.xlabel(\"Year\",fontweight =\"bold\",fontsize=14)\nplt.ylabel('Frequency',fontweight =\"bold\",fontsize=14)\nplt.title(\"Shootouts year wise by gender\",fontweight =\"bold\",fontsize=16)\nplt.show()","7dacbfec":"#### Race wise summary when Police no wearing the body camera","c50bd161":"### Year wise distribution of the shootout","fb32b9ee":"Top 10 states in US in famous for police shootings","2e12e1cf":"> From the above graph we can clearly see the most of the police man where not wearing body camera","b6bad8fc":"From the graph it seem that white american ,Hispanic ,Black were shot by Police in there engagement","b5f902d3":"> Racewise summary of the shootouts when police was using body camera","ef66a22e":"### Usage of body camera","5440202e":"In California having most number of shootout","f04a1a6e":"### Number of Innocent people shot by Police","754af3b7":"### Day wise distribution","e95b6158":"### In the data, acronymns used and their meanings:\nA - Asian, W - White, H - Hispanic, B - Black, O - Others, N - Native","4ec76fee":"Most of the white american followed by black where killed by Police","fa572797":"### Age wise distribuiton who where shot"}}