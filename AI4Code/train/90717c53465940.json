{"cell_type":{"0f368c6c":"code","25af7a17":"code","c8cfcffb":"code","a6cf7e41":"code","e7875d5b":"code","94c6690a":"code","3525f9f0":"code","bb3c7c77":"code","3ce99b92":"code","eb42069b":"code","961ffa5e":"code","61e06470":"code","f74712e2":"code","8aba0720":"code","9305cd15":"code","91d5aefe":"code","4c30ffae":"code","c5fd97db":"code","142e51ea":"code","b7dfbf5e":"code","d9d2100e":"code","2b67e110":"code","06022df0":"code","3e493468":"code","adae95a6":"code","b075c08f":"code","76ec4c4e":"markdown","340b8b12":"markdown","d92c6066":"markdown","a7e6b4aa":"markdown","71f53c8b":"markdown","03c6df28":"markdown","cf92a7ec":"markdown","d0e2d420":"markdown","ad89e4ad":"markdown","be748752":"markdown","91d38976":"markdown","9709866c":"markdown","12b36a76":"markdown","57c5c828":"markdown"},"source":{"0f368c6c":"!pip install yahoo_fin\n!pip install yfinance\n\nimport pandas as pd\nimport yahoo_fin.stock_info as si\nimport yfinance as yf\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport squarify\n\n%matplotlib inline","25af7a17":"company = 'MSFT'   # Ticker of company to be analysed","c8cfcffb":"df = yf.Ticker(company).history(period='5y',interval='1d')","a6cf7e41":"fig = go.Figure(data=[go.Candlestick(x=df.index,\n                open=df['Open'],\n                high=df['High'],\n                low=df['Low'],\n                close=df['Close'])])\n\nfig.update_layout(title = f'{company}: Candlestick Price Chart', xaxis_tickfont_size = 14)\nfig.update_layout(xaxis_rangeslider_visible = False)\n    \nfig.show()","e7875d5b":"plt.style.use('ggplot')","94c6690a":"top = plt.subplot2grid((4,4), (0, 0), rowspan=3, colspan=4)\ntop.plot(df.index, df[\"Close\"], color='blue')\nplt.title(f'{company}: Price Chart')\n\nbottom = plt.subplot2grid((4,4), (3,0), rowspan=1, colspan=4)\nbottom.bar(df.index, df['Volume'], color='black')\nplt.title('Volume')\n\nplt.gcf().set_size_inches(15,8)","3525f9f0":"try:\n    bs = si.get_balance_sheet(company).iloc[:,0]\n    bs.loc['cashAndShortTermInvestments'] = bs.loc['cash'] + bs.loc['shortTermInvestments']\nexcept: \n    bs.loc['cashAndShortTermInvestments'] = bs.loc['cash']","bb3c7c77":"temp = bs.loc[['totalAssets','totalStockholderEquity','totalLiab'],]\n\nlabels = ['Assets','Stockholder Equity','Liabilities']\ncolors = ['lightblue','green','red']\nplt.figure(figsize=(12,7))\nsquarify.plot(temp, label=labels, color=colors) #value=temp\nplt.title(f'{company}: Balance Sheet')\nplt.show()\n\nta = bs.loc['totalAssets']\ntl = bs.loc['totalLiab']\nte = bs.loc['totalStockholderEquity']\nprint(f'Total Assets: ${ta:,}')\nprint(f'Total Liabilities: ${tl:,}')\nprint(f'Total Equity: ${te:,}')","3ce99b92":"colors = ['green','red']\n\nca = bs.loc['totalCurrentAssets']\ncash = bs.loc['cashAndShortTermInvestments']\ncl = bs.loc['totalCurrentLiabilities']\ntl = bs.loc['totalLiab']\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n\nfig.set_figheight(7)\nfig.set_figwidth(12)\n\nfig.suptitle(f'{company}: Liquidity Check')\nax1.bar(['Current Asset','Current Liabilities'],[ca,cl], color=['darkgreen','pink'])\nax2.bar(['Cash','Current Liabilities'],[cash,cl], color=['blue','pink'])\nax3.bar(['Current Asset','Total Liabilities'],[ca,tl], color=['darkgreen','red'])\nax4.bar(['Cash','Total Liabilities'],[cash,tl], color=['blue','red'])\n\nplt.show()\n\nprint(f'Current Assets: ${ca:,}')\nprint(f'Cash and Cash Equivalents : ${cash:,}')\nprint(f'Current Liabilities: ${cl:,}')\nprint(f'Total Liabilities: ${tl:,}')","eb42069b":"i_s = si.get_income_statement(company)\ntemp = i_s.loc[['totalRevenue','grossProfit','operatingIncome','netIncome']]\ntemp = temp.T\ntemp","961ffa5e":"trace0 = go.Bar(x = temp.index, y=temp['totalRevenue'],name='Total Revenue')\ntrace1 = go.Bar(x = temp.index, y=temp['grossProfit'],name='Gross Profit')\ntrace2 = go.Bar(x = temp.index, y=temp['operatingIncome'],name='Operating Profit')\ntrace3 = go.Bar(x = temp.index, y=temp['netIncome'],name='Net Profit')\n\ndata = [trace0,trace1,trace2,trace3]\nlayout=go.Layout(title = f'{company}: Revenue and Profits', barmode='group')\nfigure = go.Figure(data=data,layout=layout)\n\nfigure.show()","61e06470":"cf = si.get_cash_flow(company)\n\ntemp = cf.loc[['totalCashFromOperatingActivities','capitalExpenditures']]\ntemp = temp.T\ntemp['freeCashFlow'] = temp['totalCashFromOperatingActivities'] + temp['capitalExpenditures']\ntemp","f74712e2":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = temp.index, y = temp['freeCashFlow'],mode = 'lines+markers', name=\"Free Cash Flow\", marker_color='crimson'))\nfig.add_trace(go.Bar(x=temp.index, y=temp['totalCashFromOperatingActivities'],name='Operating Income',marker_color='darkblue'))\nfig.add_trace(go.Bar(x=temp.index, y=temp['capitalExpenditures'],name='Capital Expenditure',marker_color='darkred'))\n\nfig.update_layout(title = f'{company}: Cash Flow Analaysis', xaxis_tickfont_size = 14)\nfig.show()","8aba0720":"try: \n    div = si.get_dividends(company)\n\n    fig = go.Figure(data=[go.Table(\n        header=dict(values=['Date','Dividends'],fill_color='grey',align='left',font=dict(color='white', size=12)),\n        cells=dict(values=[div.index, div.dividend],fill_color=[['white','lightgrey']*len(div)],align='left',font = dict(color = 'darkslategray', size = 11)))\n    ])\n\n    fig.update_layout(\n        title=f'{company}: Dividends per Share')\n\n    fig.show()\nexcept: \n    print(f'{company} does not provide dividends')","9305cd15":"try: \n    div = si.get_dividends(company)\n    fig = px.bar(div, x=div.index, y='dividend', title=f'{company}: Dividends', \n                 labels={\"index\":'Year', \"dividend\": \"Dividends\"})\n    \n    fig.show()\n    \nexcept: \n    print(f'{company} does not provide dividends')","91d5aefe":"try:\n    div = si.get_dividends(company)\n    temp = div.groupby(pd.Grouper(freq=\"Y\")) \n    div_per_year = temp.sum()\n\n    fig = px.bar(div_per_year, x=div_per_year.index, y='dividend', title=f'{company}: Dividends per Year', \n                 labels={\"index\":'Year', \"dividend\": \"Dividends\"})\n    fig.update_traces(marker_color='#19D3F3')\n    fig.show()\nexcept: \n    print(f'{company} does not provide dividends')","4c30ffae":"holders = yf.Ticker(company).major_holders\nholders = holders.iloc[0:2,]\nholders.columns = ['a','b']\nholders['a'] = holders['a'].apply(lambda x: x[:-1])\nholders['a'] = pd.to_numeric(holders['a'])\nholders.loc[len(holders),'a'] = 100 - holders.iloc[0,0] - holders.iloc[1,0]\nholders.loc[len(holders),'b'] = 'Others'","c5fd97db":"labels = ['% of Shares Held by All Insider','% of Shares Held by Institutions','Others']\nvalues = holders.a\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0.2, 0.2, 0.2])])\n\nfig.update_layout(title = 'Major Holders Breakdown')\nfig.show()","142e51ea":"compare = ['FB', 'AAPL', 'AMZN', 'NFLX', 'GOOG']   # Key in tickers of companies you want to compare","b7dfbf5e":"compare.insert(0,company)","d9d2100e":"company_stats = {}\nfor ticker in compare:\n    temp = si.get_stats_valuation(ticker)\n    temp = temp.iloc[:,:2]\n    temp.columns = [\"Attribute\", \"Current\"]\n    company_stats[ticker] = temp\n    \nstats = pd.concat(company_stats)\n\ncompany_extra_stats = {}\nfor ticker in compare:\n    company_extra_stats[ticker] = si.get_stats(ticker)\n\nstats2 = pd.concat(company_extra_stats)","2b67e110":"stats = stats.reset_index()\ndel stats['level_1']\nstats.columns = ['Ticker','Attribute','Current']\nstats = stats.pivot(index = \"Ticker\", columns=\"Attribute\", values=\"Current\")","06022df0":"stats.columns = ['Enterprise Value','Enterprise Value\/EBITDA','Enterprise Value\/Revenue','Forward P\/E',\n                 'Market Cap','PEG Ratio (5 yr expected)','Price\/Book','Price\/Sales (ttm)','Trailing P\/E']\n\ndel stats['Enterprise Value'] \ndel stats['Market Cap']\nstats = stats.astype(float)","3e493468":"stats2 = stats2.reset_index()\ndel stats2[\"level_1\"]\nstats2.columns = [\"Ticker\", \"Attribute\", \"Value\"]\n\nstats2 = stats2.pivot(index = 'Ticker', columns=\"Attribute\", values=\"Value\")\nstats2 = stats2.loc[:,['Quarterly Earnings Growth (yoy)','Return on Equity (ttm)']]\n\nstats2['Quarterly Earnings Growth (yoy)'] = stats2['Quarterly Earnings Growth (yoy)'].str.strip('%').astype('float') \/ 100.0\nstats2['Return on Equity (ttm)'] = stats2['Return on Equity (ttm)'].str.strip('%').astype('float') \/ 100.0","adae95a6":"stats = pd.concat([stats, stats2], axis=1, join='inner')\nstats","b075c08f":"fig = px.scatter(stats,\n                 x='Quarterly Earnings Growth (yoy)', y='Enterprise Value\/EBITDA',size='Return on Equity (ttm)', height = 700,\n                 text=stats.index, title=\"Value to Growth Comparison\",color=stats.index)\n\nfig.update_traces(textposition = 'top center')\nfig.update_layout(showlegend = False)\nfig.update_layout(xaxis_rangeslider_visible = False)\nfig.show()","76ec4c4e":"# Dividends","340b8b12":"# Stock Fundamental Analysis and Visualization","d92c6066":"# Financials","a7e6b4aa":"### Cash Flow","71f53c8b":"# Major Holders","03c6df28":"- All Dividend payouts ","cf92a7ec":"- Size of data point represents Return on Equity","d0e2d420":"# Stock Chart","ad89e4ad":"# Competitor Analysis","be748752":"- Dividend payouts in each year","91d38976":"### Balance Sheet","9709866c":"### Income Statement","12b36a76":"- Drag and pull to zoom in\n- Double click to reset","57c5c828":"![unnamed.jpg](attachment:unnamed.jpg)"}}