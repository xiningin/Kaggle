{"cell_type":{"7d687df0":"code","91d90d74":"code","4c67ca21":"code","51d9e11f":"code","595c9d22":"code","d7ae9563":"code","f3bb9e7a":"code","74d3b4a4":"code","20f8d776":"code","e483618e":"code","563564c7":"code","21bc0cd4":"code","f0752a05":"code","ac690f09":"code","d4dee814":"code","e09fd619":"code","5ebacef9":"code","5db3f675":"code","d36e8e05":"code","78acb388":"code","d203108b":"code","6f86e19f":"code","9735305c":"code","42fe2fc6":"markdown","ea504266":"markdown","9a24dd72":"markdown","cc2eb100":"markdown","8a7ebad3":"markdown","79093c69":"markdown","351198a0":"markdown","7f48cdc9":"markdown","78295442":"markdown","162e766a":"markdown","62321c27":"markdown","77557849":"markdown","d5f78ae9":"markdown","bb5c94c4":"markdown","96860238":"markdown","d250397e":"markdown","cc93d685":"markdown","105916f4":"markdown","0ad52d8f":"markdown","03a3be04":"markdown","ef751a53":"markdown","878c0123":"markdown","a19a3053":"markdown","a9642e2d":"markdown","be3a0312":"markdown","d01ae3c5":"markdown","3ec5f558":"markdown","f62c70e2":"markdown","4186c864":"markdown","8a2d8743":"markdown","65049b02":"markdown","8a3c34c2":"markdown","10c02429":"markdown","e55c4537":"markdown","b35c7518":"markdown","e4197b74":"markdown","5b802dbc":"markdown","89f0a08d":"markdown"},"source":{"7d687df0":"from csv import reader\nimport matplotlib.pyplot as plt\nimport numpy as np","91d90d74":"#____Basic CSV Open Function____\ndef csv_to_list(file_name, encode=None):\n    if encode ==\"utf8\":\n        csv_file = open(file_name, encoding=\"utf8\")\n        reade_file = reader(csv_file)\n        new_list = list(reade_file)\n        list_header = new_list[0]\n        list_body = new_list[1:]\n        return list_header, list_body\n    elif encode ==\"Latin-1\":\n        csv_file = open(file_name, encoding=\"latin-1\")\n        reade_file = reader(csv_file)\n        new_list = list(reade_file)\n        list_header = new_list[0]\n        list_body = new_list[1:]\n        return list_header, list_body\n    else:\n        csv_file = open(file_name)\n        reade_file = reader(csv_file)\n        new_list = list(reade_file)\n        list_header = new_list[0]\n        list_body = new_list[1:]\n        return list_header, list_body        \n    ","4c67ca21":"#____Opening AppleStore Dataset____\nappstore = \"..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv\"\nencode = \"utf8\"\napple_header, apple_dataset = csv_to_list(appstore, encode)\nprint(\"AppStore dataset size: \", len(apple_dataset))\n\n#____Opening GoogleAppStore Dataset____\niosStore = \"..\/input\/google-play-store-apps\/googleplaystore.csv\"\nencode = \"utf8\"\nios_header, ios_dataset = csv_to_list(iosStore, encode)\nprint(\"GooglePlay dataset size: \", len(ios_dataset))","51d9e11f":"print(ios_dataset[10472])","595c9d22":"# this entry has missing 'Rating' \ndel ios_dataset[10472]\nprint('Test:\\n', ios_dataset[10472])","d7ae9563":"name_list = []\ncnt = 0\nrepeated_index_list = []\n\nfor name in ios_dataset:\n    if name[0] in name_list:\n        repeated_index_list.append(cnt)\n    else:\n        name_list.append(name[0])\n    cnt+=1\n\nprint('There is ', len(repeated_index_list), 'duplicated apps.')","f3bb9e7a":"#___Changing the order of the repeated index, so we can delete without changing the others\nrepeated_index_list.sort(key=int, reverse=True)\n\nfor n in repeated_index_list:\n    del ios_dataset[n]","74d3b4a4":"#___Locating___\ncnt = 0\nnon_english_index = []\n\nfor name in ios_dataset:\n    for character in name[0]:\n        if ord(character) > 127 and ord(character) != 8211 and ord(character) != 8482 and ord(character) != 174 and ord(character) != 8212:\n            non_english_index.append(cnt)\n            break\n    cnt+=1\n\ncnt = 0\nprint('Examples of apps tracedown:')\nfor n in non_english_index:\n    print(ios_dataset[n][0])\n    cnt+=1\n    if cnt>5:\n        break\n\n#___Deleting___\nnon_english_index.sort(key=int,reverse=True)\nfor index in non_english_index:\n    del ios_dataset[index]\n    \n#___Confirming___\ncnt = 0\ntest_non_english_index = []\n\nfor name in ios_dataset:\n    for character in name[0]:\n        if ord(character) > 127 and ord(character) != 8211 and ord(character) != 8482 and ord(character) != 174 and ord(character) != 8212:\n            test_non_english_index.append(cnt)\n            break\n    cnt+=1\n\nprint('\\nTest: Applications not deleted:', test_non_english_index)\n","20f8d776":"#___Locating___\ncnt = 0\nnon_english_index = []\n\nfor name in apple_dataset:\n    for character in name[2]:\n        if ord(character) > 127 and ord(character) != 8211 and ord(character) != 8482 and ord(character) != 174 and ord(character) != 8212:\n            non_english_index.append(cnt)\n            break\n    cnt+=1\n\nprint('Examples of apps tracedown:')\ncnt = 0\nfor n in non_english_index:\n    print(apple_dataset[n][2])\n    cnt+=1\n    if cnt>5:\n        break\n\n#___Deleting___\nnon_english_index.sort(key=int,reverse=True)\nfor index in non_english_index:\n    del apple_dataset[index]\n    \n#___Confirming___\ncnt = 0\ntest_non_english_index = []\n\nfor name in ios_dataset:\n    for character in name[2]:\n        if ord(character) > 127 and ord(character) != 8211 and ord(character) != 8482 and ord(character) != 174 and ord(character) != 8212:\n            test_non_english_index.append(cnt)\n            break\n    cnt+=1\n\nprint('\\nTest: Applications not deleted:', test_non_english_index)\n\n\n","e483618e":"apple_dataset_free = []\nfor row in apple_dataset:\n    if row[5] == '0':\n        apple_dataset_free.append(row)\n\nios_dataset_free = []\nfor row in ios_dataset:\n    if row[6] == 'Free':\n        ios_dataset_free.append(row)\n        ","563564c7":"print(\"AppleAppStore dataset size: \", len(apple_dataset_free))\nprint(\"GooglePlay dataset size: \", len(ios_dataset_free))","21bc0cd4":"apple_genre_dictionarie = {}\n\nfor genre in apple_dataset_free:\n    if genre[12] in apple_genre_dictionarie:\n        apple_genre_dictionarie[genre[12]] +=1\n    else:\n        apple_genre_dictionarie[genre[12]] = 1\n\napple_dataset_free_size = len(apple_dataset_free)\nfor key in apple_genre_dictionarie:\n    apple_genre_dictionarie[key] = round((apple_genre_dictionarie[key]\/apple_dataset_free_size)*100, 2)\n\nprint(\"Percentage of apps in the store per genre in AppStore:\\n\")\nsorted_by_value = sorted(apple_genre_dictionarie.items(), key=lambda kv: kv[1], reverse = True)\n\nfor item in sorted_by_value:\n    print(item)\n","f0752a05":"ios_genre_dictionarie = {}\n\nfor genre in ios_dataset_free:\n    if genre[1] in ios_genre_dictionarie:\n        ios_genre_dictionarie[genre[1]] += 1\n    else:\n        ios_genre_dictionarie[genre[1]] = 1\n\nios_dataset_free_size = len(ios_dataset_free)\nfor key in ios_genre_dictionarie:\n    ios_genre_dictionarie[key] = round((ios_genre_dictionarie[key]\/ios_dataset_free_size)*100, 2) \n\nprint(\"Percentage of apps in the store per genre in PlayStore:\\n\")\nsorted_by_value = sorted(ios_genre_dictionarie.items(), key=lambda kv: kv[1], reverse = True)\n\nfor item in sorted_by_value:\n    print(item)","ac690f09":"for row in apple_dataset_free:\n    if row[12] == 'Navigation':\n        print(row[2], ':', row[6]) ","d4dee814":"cnt = 0\nfor row in apple_dataset_free:\n    cnt +=1\n    if row[12] == 'Social Networking':\n        print(cnt, \" \", row[2], ':', row[6])\n    if cnt>300 :\n        break","e09fd619":"#LOCATING MOST RATED APPS\n\n#___Creating a list of Genre___\napple_genre_list = []\nfor genre in apple_dataset_free:\n    if genre[12] not in apple_genre_list:\n        apple_genre_list.append(genre[12])\n        \n        \n#___Initializing Variables___\napple_onepercent_list = ['Weather', 'Food & Drink', 'Reference','Business','Book', 'Navigation','Medical','Catalogs']\ncnt_index = 0\ncnt_first_apps = 0\nlist_position = 0\nlist_of_index = []\nlist_of_ratings = []\nlist_position = 0\n\n\n\n#Looping throught genres\nfor genre in apple_genre_list:\n    cnt_first_apps = 0\n    cnt_index = 0\n    \n    #Looping throught dataset for each genre\n    for rating in apple_dataset_free:\n               \n        if rating[12] == genre:\n            cnt_first_apps += 1\n            \n            #Treating items with one percent\n            if rating[12] in apple_onepercent_list:\n                if cnt_first_apps == 1:\n                    list_of_index.append(cnt_index)\n                    list_of_ratings.append(int(rating[6]))\n                else:\n                    if int(rating[6]) > list_of_ratings[-1]:\n                        list_of_ratings[-1] = int(rating[6])\n                        list_of_index[-1] = cnt_index\n            #Treating items with more than one percent   \n            else:\n                if cnt_first_apps < 5:\n                    list_of_index.append(cnt_index)\n                    list_of_ratings.append(int(rating[6]))\n                    \n                else:\n                    for i in range(4):\n                        if list_of_ratings[list_position + i] < int(rating[6]):\n                            list_of_ratings[list_position + i] = int(rating[6])\n                            list_of_index[list_position + i] = cnt_index\n                            break\n        cnt_index += 1\n    if genre in apple_onepercent_list:\n        list_position += 1\n        \n    else:\n        list_position += 4\n            ","5ebacef9":"#DELETING THEN\n\napple_dataset_free_nobigapps = apple_dataset_free.copy()\n\nlist_of_index.sort(key=int, reverse=True)\n\nfor n in list_of_index:\n    del apple_dataset_free_nobigapps[n]\n","5db3f675":"#MAKING THE ANALYZES:\napple_genre_rating_dictionarie = {}\nsum_per_genre = 0\ncnt = 0\n\nfor genre in apple_genre_list:\n    sum_per_genre = 0 \n    cnt = 0\n    \n    for rating in apple_dataset_free_nobigapps:\n        \n        if genre == rating[12]:\n            sum_per_genre += int(rating[6])\n            cnt +=1 \n    \n    apple_genre_rating_dictionarie[genre] = round(sum_per_genre \/cnt, 2)\n        \n\nprint(\"Download average per app in diferent genres in AppStore:\\n\")\nsorted_by_value = sorted(apple_genre_rating_dictionarie.items(), key=lambda kv: kv[1], reverse = True)\n\nfor item in sorted_by_value:\n    print(item)\n    ","d36e8e05":"#The Install column must be treated:\na ='10,000+'\nprint(a[:-1].replace(\",\",\"\"))","78acb388":"#LOCATING MOST RATED APPS\n\n#___Creating a list of Genre___\nios_genre_list = []\nfor genre in ios_dataset_free:\n    if genre[1] not in ios_genre_list:\n        ios_genre_list.append(genre[1])\n        \n        \n#___Initializing Variables___\nios_onepercent_list = ['AUTO_AND_VEHICLES', 'LIBRARIES_AND_DEMO','HOUSE_AND_HOME','WEATHER','EVENTS','ART_AND_DESIGN','PARENTING','BEAUTY','COMICS']\ncnt_index = 0\ncnt_first_apps = 0\nlist_position = 0\nlist_of_index = []\nlist_of_ratings = []\nlist_position = 0\n\n\n\n#Looping throught genres\nfor genre in ios_genre_list:\n    cnt_first_apps = 0\n    cnt_index = 0\n    \n    #Looping throught dataset for each genre\n    for rating in ios_dataset_free:\n               \n        if rating[1] == genre:\n            cnt_first_apps += 1\n            \n            #Treating items with one percent\n            if rating[1] in ios_onepercent_list:\n                if cnt_first_apps == 1:\n                    list_of_index.append(cnt_index)\n                    list_of_ratings.append(int(rating[5][:-1].replace(\",\",\"\")))\n                else:\n                    if int(rating[5][:-1].replace(\",\",\"\")) > list_of_ratings[-1]:\n                        list_of_ratings[-1] = int(rating[5][:-1].replace(\",\",\"\"))\n                        list_of_index[-1] = cnt_index\n            #Treating items with more than one percent   \n            else:\n                if cnt_first_apps < 5:\n                    list_of_index.append(cnt_index)\n                    list_of_ratings.append(int(rating[5][:-1].replace(\",\",\"\")))\n                    \n                else:\n                    for i in range(4):\n                        if list_of_ratings[list_position + i] < int(rating[5][:-1].replace(\",\",\"\")):\n                            list_of_ratings[list_position + i] = int(rating[5][:-1].replace(\",\",\"\"))\n                            list_of_index[list_position + i] = cnt_index\n                            break\n        cnt_index += 1\n    if genre in ios_onepercent_list:\n        list_position += 1\n        \n    else:\n        list_position += 4\n            \n            ","d203108b":"#DELETING THEN\n\nios_dataset_free_nobigapps = ios_dataset_free.copy()\n\nlist_of_index.sort(key=int, reverse=True)\n\nfor n in list_of_index:\n    del ios_dataset_free_nobigapps[n]\n","6f86e19f":"#MAKING THE ANALYZES:\nios_genre_rating_dictionarie = {}\nsum_per_genre = 0\ncnt = 0\n\nfor genre in ios_genre_list:\n    sum_per_genre = 0 \n    cnt = 0\n    \n    for rating in ios_dataset_free_nobigapps:\n        \n        if genre == rating[1]:\n            sum_per_genre += int(rating[5][:-1].replace(\",\",\"\"))\n            cnt +=1 \n    \n    ios_genre_rating_dictionarie[genre] = round(sum_per_genre \/cnt, 2)\n        \n\nprint(\"Download average per app in diferent genres in PlayStore:\\n\")\nsorted_by_value = sorted(ios_genre_rating_dictionarie.items(), key=lambda kv: kv[1], reverse = True)\n\nfor item in sorted_by_value:\n    print(item)\n    ","9735305c":"#PlayStore\nios_genre_popular_and_low_competition = []\n\nfor genre in ios_genre_list:\n    if ios_genre_rating_dictionarie[genre] > 2000000 and ios_genre_dictionarie[genre] < 3:\n        ios_genre_popular_and_low_competition.append(genre)\n\n#AppStore\napple_genre_popular_and_low_competition = []\n\nfor genre in apple_genre_list:\n    if apple_genre_rating_dictionarie[genre] > 15000 and apple_genre_dictionarie[genre] < 3:\n        apple_genre_popular_and_low_competition.append(genre)\n        \nprint(ios_genre_popular_and_low_competition)\nprint(apple_genre_popular_and_low_competition)","42fe2fc6":"**AppStore**","ea504266":"The AppStore dataset doesn't have a number of downloads of a specific app, so it will be used the number of ratings that those apps have.","9a24dd72":"## <img src=\"https:\/\/cdn2.iconfinder.com\/data\/icons\/business-colored\/48\/23-512.png\" alt=\"Drawing\" style=\"width:30px; float:left\"\/>   &ensp;    Data Analyzes","cc2eb100":"* **GooglePlay DataSet**","8a7ebad3":"Differently from the AppleAppStore dataset, the GooglePlay dataset has a column called 'Install', that shows how many times that has been installed, so there is no need to work with the ratings of the apps. But the same idea that the big apps like Facebook makes a big difference in the analyses, apply for the PlayStore. Therefore, if the genre has more than 1%, the most 4 installed apps will be deleted, otherwise just the most installed.","79093c69":"This study is looking for an app genre that has low market competition and high numbers of downloads. With that said the study must point to a gender that attends both stores within those parameters. ","351198a0":" ### Most Popular Apps by Genre","7f48cdc9":"## <img src=\"https:\/\/www.invensis.net\/blog\/wp-content\/uploads\/2016\/04\/5-Best-Practices-in-Accounts-Payable-invensis1.png\" alt=\"Drawing\" style=\"width:50px; float:left\"\/> Data Cleaning ","78295442":"**Deleting**","162e766a":"---","62321c27":"The genres that attend all the criteria in both stores are: **Weather** and **Shopping**.","77557849":"<img src=\"http:\/\/www.internetsegura.pt\/sites\/default\/files\/1065.jpg\" alt=\"Drawing\" style=\"width:550px;\"\/>","d5f78ae9":"Criteria: The way to calculate the popularity of our interest is to count how many apps have been downloaded\/Installed.","bb5c94c4":"**Isolating genres with stipulated criteria:**","96860238":"---","d250397e":"**Adopted Criteria**:\n* Every genre with less than 15.000 reviews on average per app in apple app store data_set will be considered not popular.\n* Every genre with less than 2.000.000 downloads on average per app in play store data_set will be considered not popular.\n* Every genre with more than 3% of apps in both stores will be considered with high competition.","cc93d685":"It's clear that on Apple AppStore the apps designed for fun are the majority, with 'Games' representing more 58% of the apps. While Education comes in third position and it is the better positioning category that doesn't aim recreation, and representing only 3,72% of the apps on the store. \n\nHowever in GooglePlayStore the situation is different, this store shows a more balanced distribution of the apps per genre, and it seems that a good number of apps are designed for practical purposes(business, productivity, lifestyle and etc). \nAlso, it is noticeable that content for kids has very relevant numbers, but it should be considered that within this content for children a good amount are games.","105916f4":"## <img src=\"http:\/\/pngimages.net\/sites\/default\/files\/file-png-image-11230.png\" alt=\"Drawing\" style=\"width:40px; float:left\"\/>   &ensp; Opening Files","0ad52d8f":"#### DataSets:  \n * [GooglePlayStore](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/home)\n * [AppStore](https:\/\/www.kaggle.com\/ramamet4\/app-store-apple-data-set-10k-apps\/home)","03a3be04":"### Non English Apps\n\nSince the analyzes must be made only on english apps, it's necessary to remove non english apps.\n   \nCriteria: Apps with names that contain non english characters (ASCII > 127) will be removed.\nAn exception for '\u00ae', '\u2122', '\u2014' and '\u2013', that are not in the range, but are frequently used in english apps.","ef751a53":"A company that wants to develop a free english app for AppleAppStore and GooglePlayStore and choose not to compete with large enterprise applications will probably have more success developing or a Weather or a Shopping application, since they are the two genres that have low competition and high interest of download in both stores.","878c0123":"**GooglePlayStore**","a19a3053":"**DataSets sizes after cleaning**","a9642e2d":"* **AppStore DataSet**","be3a0312":"**GooglePlay**","d01ae3c5":"### Duplicated data \nOnly on GooglePlayStore DataSet","3ec5f558":"**AppStore**","f62c70e2":"**Locating by duplicated name**","4186c864":"-----","8a2d8743":"## <img src=\"https:\/\/png.pngtree.com\/svg\/20160526\/conclusion_717735.png\" alt=\"Drawing\" style=\"width:30px; float:left\"\/>  &ensp;     Conclusion","65049b02":"# Mobile Free Apps Profitable Analyzes","8a3c34c2":" This study is meant to help companies who develop free apps in GooglePlayStore and AppleAppStore.\n \n Since the revenue of those companies is highly influenced by the number of people using their apps, the aim is to determine the kinds of    **English - Free - Apps**    that are likely to attract more users.","10c02429":"As we can see above, in genres like Navigation and Social media, as in others, a few giant apps like GoogleMaps, Facebook, Pinterest, can make a big difference in the popularity analyzes.\nMost companies that develop english free apps don't have an interest in competing with this giant apps, the idea is to research which genre might be a better field to invest independent of this massive apps. Therefore will be excluded from these analyses the four apps of each genre with the biggest ratings. Although there are some genres that have too few apps, if 4 apps of those are deleted will substantially affect the average, creating inaccurate results. Therefore genres that represent less than 1% of the store will only have the app with most rating deleted.","e55c4537":"### One-time error\n","b35c7518":"### Isolating free apps","e4197b74":"### <img src=\"https:\/\/image.flaticon.com\/icons\/svg\/2\/2291.svg\" alt=\"Drawing\" style=\"width:30px; float:left\"\/>             &ensp; Crossing Data","5b802dbc":"### Frequency by genre in percentage","89f0a08d":"This error was pointed in a [discussion](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/discussion\/66015) inside the dataset origin website."}}