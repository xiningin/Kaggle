{"cell_type":{"b15c0ee6":"code","0838eeb0":"code","891c7f36":"code","28031d99":"code","d79443b1":"code","f6afe308":"code","2075b13e":"code","f75573c2":"code","aa009906":"code","797ac062":"code","a102cbc6":"code","3b00bd29":"code","bccd4401":"code","98d02fb0":"code","dbd584bf":"code","83eaeb95":"code","569670a2":"code","4db0e230":"markdown"},"source":{"b15c0ee6":"!git clone https:\/\/github.com\/CellProfiling\/HPA-competition-solutions.git","0838eeb0":"import sys\nsys.path.append('.\/HPA-competition-solutions\/bestfitting\/src\/')","891c7f36":"from config.config import *\nfrom networks.densenet import *\nfrom networks.resnet_ml import *\nfrom datasets.tool import *\nfrom torch.utils.data import Dataset\nimport pandas as pd\nimport torchvision\nfrom tqdm import tqdm\nimport torch\nimport cv2\nimport os","28031d99":"opj = os.path.join","d79443b1":"def read_rgby_test(img_id):\n    img_dir = '..\/input\/hpa-public-768-excl-0-16\/hpa_public_excl_0_16_768\/small'\n    suffix = '.png'\n    colors = ['red', 'green', 'blue', 'yellow']\n    flags = cv2.IMREAD_GRAYSCALE\n    img = [cv2.imread(opj(img_dir, img_id + '_' + color + suffix), flags)\n           for color in colors]\n    img = np.stack(img, axis=-1)\n    return img","f6afe308":"class ProteinTestDataset(Dataset):\n    def __init__(self,\n                 test_df,\n                 img_size=512,\n                 transform=None,\n                 in_channels=4\n                 ):\n        self.test_df = test_df\n        self.img_size = img_size\n        self.in_channels = in_channels\n        self.transform = transform\n\n    def __getitem__(self, index):\n        img_id = self.test_df.ID.loc[index]\n        image = read_rgby_test(img_id)\n        image = cv2.resize(image, (512,512))\n        image = image \/ 255.0\n        image = image_to_tensor(image)\n        return image\n\n    def __len__(self):\n        return len(self.test_df)","2075b13e":"df = pd.read_csv('..\/input\/hpa-public-768-excl-0-16\/hpa_public_excl_0_16_768.csv')","f75573c2":"df.head()","aa009906":"len(df)","797ac062":"#DEBUG\n# df = df.iloc[:30]","a102cbc6":"test_dataset = ProteinTestDataset(\n    df\n)\ntest_loader = torch.utils.data.DataLoader(\n    test_dataset,\n    sampler=torch.utils.data.SequentialSampler(test_dataset),\n    batch_size=4,\n    drop_last=False,\n    num_workers=2,\n    pin_memory=True,\n)","3b00bd29":"def convert_probs(all_probs):\n    new_probs = np.zeros((all_probs.shape[0],19))\n    new_probs[:,:8] = all_probs[:,:8]\n    new_probs[:,8] = all_probs[:,11]\n    new_probs[:,9] = (all_probs[:,12] + all_probs[:,13]) \/ 2\n    new_probs[:,10] = all_probs[:,14]\n    new_probs[:,11] = all_probs[:,17]\n    new_probs[:,12] = all_probs[:,19]\n    new_probs[:,13] = (all_probs[:,21] + all_probs[:,22]) \/ 2\n    new_probs[:,14] = all_probs[:,23]\n    new_probs[:,15] = all_probs[:,24]\n    new_probs[:,16] = all_probs[:,25]\n    new_probs[:,17] = (all_probs[:,8] + all_probs[:,9] + all_probs[:,10] + all_probs[:,26]) \/ 4\n    new_probs[:,18] = 1 - np.max(all_probs, axis=-1)\n    return new_probs","bccd4401":"dm = torchvision.models.resnet50(pretrained=True)\nmodel = class_resnet50_dropout(num_classes=12815, in_channels=4, pretrained_file='\/root\/.cache\/torch\/hub\/checkpoints\/resnet50-19c8e357.pth')\nweights = torch.load('..\/input\/bestfittingml\/045.pth')\nmodel.load_state_dict(weights['state_dict'])","98d02fb0":"model.set_configs(extract_feature=True)\nmodel.cuda() # .cuda()\nmodel.eval()\n\nwith torch.no_grad():\n    all_feats = []\n    for it, iter_data in tqdm(enumerate(test_loader, 0), total=len(test_loader)):\n        images = iter_data\n        images = Variable(images.cuda(), volatile=True) ### .cuda()\n        outputs = model(images)\n        logits, feats = outputs\n        feats = feats.data.cpu().numpy()\n        all_feats.append(feats)\n    all_feats = np.vstack(all_feats)","dbd584bf":"all_feats.shape","83eaeb95":"import pickle\nwith open('feats_ext.pickle', 'wb') as handle:\n    pickle.dump(all_feats, handle)","569670a2":"df.to_csv('feats_df_ext.csv', index=False)","4db0e230":"# Need to restart the kernel after this"}}