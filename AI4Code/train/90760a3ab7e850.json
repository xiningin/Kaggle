{"cell_type":{"328ee660":"code","57cd0d99":"code","628f2595":"code","eac14c89":"code","39b0ccb3":"code","3a7ef947":"code","50dbc6b3":"code","56833adf":"code","1537adc9":"code","75c0573f":"code","48a04e63":"code","56a439d3":"code","1804f76b":"markdown","a33bc759":"markdown","9bb2ff5b":"markdown","da6a3259":"markdown","60165cfc":"markdown","9581a60c":"markdown","713dced4":"markdown","e4d64a91":"markdown"},"source":{"328ee660":"!pip install -q tensorflow_decision_forests","57cd0d99":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nimport tensorflow_decision_forests as tfdf\nimport pandas as pd\nimport sklearn\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","628f2595":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","eac14c89":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","39b0ccb3":"train.head()","3a7ef947":"test.head()","50dbc6b3":"row_count = 15\ncol_count = 15\nimages = np.array(train.iloc[np.random.choice(train.shape[0], row_count * col_count)])[:, :784].reshape((-1, 28, 28))\nsample_images(images, row_count, col_count)","56833adf":"test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test)","1537adc9":"kfold = sklearn.model_selection.StratifiedKFold(5, shuffle=True)\nmodels = []\nfor fold, (train_indices, val_indices) in enumerate(kfold.split(train, train[\"label\"])):\n    print(\"Training with fold %d\"%(fold + 1))\n    train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train.iloc[train_indices], label=\"label\").shuffle(len(train_indices))\n    valid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train.iloc[val_indices], label=\"label\")\n    model = tfdf.keras.RandomForestModel(num_trees=30)\n    model.compile(metrics=[\"accuracy\"])\n    model.fit(train_ds, validation_data=valid_ds)\n    models.append(model)","75c0573f":"result = np.mean([model.predict(test_ds) for model in models], axis=0)","48a04e63":"result.shape","56a439d3":"test_labels = np.argmax(result, axis=-1)\nimage_ids = np.arange(1, test_labels.shape[0]+1)\nresult = np.concatenate((image_ids.reshape(image_ids.shape[0], 1), test_labels.reshape(test_labels.shape[0], 1)), axis=1)\ndf = pd.DataFrame(result, columns=[\"ImageId\", \"Label\"], dtype='int')\ndf.to_csv(\"submission.csv\", index=False)","1804f76b":"In this notebook, I will use TensorFlow Decision Forest to create a MNIST classifier. You can find documents [here](https:\/\/www.tensorflow.org\/decision_forests).","a33bc759":"## Summary","9bb2ff5b":"## Model Development","da6a3259":"## Load data","60165cfc":"## Import necessary Libraries","9581a60c":"## Utilities","713dced4":"## Submission","e4d64a91":"let's see what this data look like."}}