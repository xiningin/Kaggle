{"cell_type":{"35c31f21":"code","f92ecdd1":"code","1c28189d":"code","697cba60":"code","80887683":"code","7e751d5a":"code","b06aadc7":"code","42d4ae64":"code","2530e09b":"code","43f48dde":"code","ccd5a2a8":"code","3e322da7":"code","1ed7ef9d":"code","5e5bccf3":"code","438dd160":"code","cab37b88":"code","3497fd1d":"code","46e82b25":"code","da976e13":"code","19f4d708":"code","c491a9ce":"code","dab22be9":"code","0bbf99f8":"code","3158138d":"code","8f2244de":"code","64a61b1d":"code","7db352ed":"code","b717412d":"code","b2c0b247":"code","d6cbdea7":"code","a7bd400e":"code","2a341ebf":"markdown","838b8427":"markdown","588084f2":"markdown","ed599f14":"markdown","bfa360cb":"markdown","e6030924":"markdown"},"source":{"35c31f21":"!pip install git+https:\/\/github.com\/qubvel\/efficientnet","f92ecdd1":"from efficientnet import EfficientNetB3","1c28189d":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport json\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Flatten, Activation, Dropout, GlobalAveragePooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers, applications\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, TensorBoard, EarlyStopping\nfrom keras import backend as K ","697cba60":"ann_file = '..\/input\/inaturalist-2019-fgvc6\/train2019.json'\nwith open(ann_file) as data_file:\n        train_anns = json.load(data_file)","80887683":"train_anns_df = pd.DataFrame(train_anns['annotations'])[['image_id','category_id']]\ntrain_img_df = pd.DataFrame(train_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ndf_train_file_cat = pd.merge(train_img_df, train_anns_df, on='image_id')\ndf_train_file_cat['category_id']=df_train_file_cat['category_id'].astype(str)\ndf_train_file_cat.head()","7e751d5a":"len(df_train_file_cat['category_id'].unique())","b06aadc7":"# Example of images for category_id = 400\nimg_names = df_train_file_cat[df_train_file_cat['category_id']=='400']['file_name'][:30]\n\nplt.figure(figsize=[15,15])\ni = 1\nfor img_name in img_names:\n    img = cv2.imread(\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\/%s\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(6, 5, i)\n    plt.imshow(img)\n    i += 1\nplt.show()","42d4ae64":"valid_ann_file = '..\/input\/inaturalist-2019-fgvc6\/val2019.json'\nwith open(valid_ann_file) as data_file:\n        valid_anns = json.load(data_file)","2530e09b":"valid_anns_df = pd.DataFrame(valid_anns['annotations'])[['image_id','category_id']]\nvalid_anns_df.head()","43f48dde":"valid_img_df = pd.DataFrame(valid_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\nvalid_img_df.head()","ccd5a2a8":"df_valid_file_cat = pd.merge(valid_img_df, valid_anns_df, on='image_id')\ndf_valid_file_cat['category_id']=df_valid_file_cat['category_id'].astype(str)\ndf_valid_file_cat.head()","3e322da7":"nb_classes = 1010\nbatch_size = 256\nimg_size = 96\nnb_epochs = 10","1ed7ef9d":"%%time\ntrain_datagen=ImageDataGenerator(rescale=1.\/255, \n    validation_split=0.25,\n    horizontal_flip = True,    \n    zoom_range = 0.3,\n    width_shift_range = 0.3,\n    height_shift_range=0.3\n    )\n\ntrain_generator=train_datagen.flow_from_dataframe(    \n    dataframe=df_train_file_cat,    \n    directory=\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",    \n    target_size=(img_size,img_size))","5e5bccf3":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator=test_datagen.flow_from_dataframe(    \n    dataframe=df_valid_file_cat,    \n    directory=\"..\/input\/inaturalist-2019-fgvc6\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"categorical\",    \n    target_size=(img_size,img_size))","438dd160":"model = EfficientNetB3(weights='imagenet', include_top=False, input_shape=(img_size, img_size, 3))","cab37b88":"model.trainable = False","3497fd1d":"# Freeze some layers\n# for layer in model.layers[:-4]:\n#     layer.trainable = False","46e82b25":"#Adding custom layers \nx = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(nb_classes, activation=\"softmax\")(x)\nmodel_final = Model(input = model.input, output = predictions)\n\nmodel_final.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])","da976e13":"# Callbacks\n\ncheckpoint = ModelCheckpoint(\"vgg16_1.h5\", monitor='val_loss', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)\nearly = EarlyStopping(monitor='val_loss', min_delta=0, patience=5, verbose=1, mode='auto')","19f4d708":"%%time\nhistory = model_final.fit_generator(generator=train_generator,  \n                                    \n                                    steps_per_epoch=500,\n                                    \n                                    validation_data=valid_generator, \n                                    \n                                    validation_steps=200,\n                                    \n                                    epochs=nb_epochs,\n                                    callbacks = [checkpoint, early],\n                                    verbose=2)","c491a9ce":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","dab22be9":"test_ann_file = '..\/input\/inaturalist-2019-fgvc6\/test2019.json'\nwith open(test_ann_file) as data_file:\n        test_anns = json.load(data_file)","0bbf99f8":"test_img_df = pd.DataFrame(test_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ntest_img_df.head()","3158138d":"%%time\n\ntest_generator = test_datagen.flow_from_dataframe(      \n    \n        dataframe=test_img_df,    \n    \n        directory = \"..\/input\/inaturalist-2019-fgvc6\/test2019\",    \n        x_col=\"file_name\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle = False,\n        class_mode = None\n        )","8f2244de":"%%time\ntest_generator.reset()\npredict=model_final.predict_generator(test_generator, steps = len(test_generator.filenames))","64a61b1d":"len(predict)","7db352ed":"predicted_class_indices=np.argmax(predict,axis=1)","b717412d":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","b2c0b247":"sam_sub_df = pd.read_csv('..\/input\/inaturalist-2019-fgvc6\/kaggle_sample_submission.csv')\nsam_sub_df.head()","d6cbdea7":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"file_name\":filenames,\n                      \"predicted\":predictions})\ndf_res = pd.merge(test_img_df, results, on='file_name')[['image_id','predicted']]\\\n    .rename(columns={'image_id':'id'})\n\ndf_res.head()","a7bd400e":"df_res.to_csv(\"submission.csv\",index=False)","2a341ebf":"### Train data","838b8427":"### Test data","588084f2":"### Model","ed599f14":"### Validation data","bfa360cb":"### Prediction","e6030924":"**Example of transfer learning from pretrained model using Keras  and Efficientnet (https:\/\/pypi.org\/project\/efficientnet\/).**"}}