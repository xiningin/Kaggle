{"cell_type":{"70561efc":"code","142873b7":"code","ecdd878b":"code","73ee23d0":"code","e4535f9a":"code","eaba788c":"code","8cdf8873":"code","41d5999c":"code","983779ef":"code","a913917d":"code","3c6168af":"code","c0beb660":"code","d1f23437":"code","b16998cb":"code","162a7730":"code","90ee8fa3":"code","14b96ca5":"code","efcc762c":"code","9601ad01":"code","e6201318":"code","9824e197":"code","571ff5f7":"code","0003813e":"code","425996d0":"code","add046c0":"code","96f6e907":"code","b3c822a0":"code","f3908122":"code","a572fac3":"markdown","b6645a23":"markdown","48dc312b":"markdown","70cad404":"markdown","3ff718e9":"markdown","727f7283":"markdown","3f771729":"markdown","a6cf479a":"markdown"},"source":{"70561efc":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","142873b7":"#libraries \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\n\n#models \nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.naive_bayes import GaussianNB\n","ecdd878b":"titanic_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntitanic_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n# pclass:    Ticket class \n# sibsp:     siblings \/ spouses  in the ship\n# parch:     parents \/ children in the ship\n# cabin:     Cabin number\n# embarked:  Port of Embarkation","73ee23d0":"titanic_train.describe()","e4535f9a":"# Extracting  sign of respect(Mr, Mrs, Miss, Master)\n#Function to Extract status ( need to pass exact colomn to function in dataframe)\nimport re\ndef Ext(col):\n    #col = titanic_train['Name']\n    names = []\n    for val in col:\n        names.append(val)\n    def splitter(name): \n        result = re.split('(?<!\\d)[,.]|[,.](?!\\d)', name)\n        result = result[1]\n        return result\n    final_res = []\n    for name in names:\n        add = splitter(name)\n        final_res.append(add)\n    return final_res \ntitanic_train['Status'] = Ext(titanic_train[\"Name\"])\ntitanic_test['Status'] = Ext(titanic_test[\"Name\"])\n# titanic_train['status'] = final_res\n# titanic_train['status'].value_counts()","eaba788c":"titanic_train['Status'].value_counts()","8cdf8873":"titanic_test['Status'].value_counts()","41d5999c":"titanic_train['Survived'].value_counts()","983779ef":"#checking for missing values \nmissing_total = titanic_train.isnull().sum()\nmissing_total","a913917d":"#plotting \n#attributes = ['Survived','Pclass','Sex','Age','SibSp','Parch','Ticket','Fare','Embarked']\ncorr_matrix = titanic_train.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","3c6168af":"sns.barplot(x='SibSp', y='Survived', data=titanic_train)","c0beb660":"sns.barplot(x='Parch', y='Survived', data=titanic_train)","d1f23437":"Grid = sns.FacetGrid(titanic_train, row='Embarked', size=4.5, aspect=1.6)\nGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette=None,  order=None, hue_order=None )\nGrid.add_legend()","b16998cb":"grid = sns.FacetGrid(titanic_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","162a7730":"# Trying out attribute combinations \ntitanic_train['SibSpParch'] = (titanic_train['SibSp'] + titanic_train['Parch']) % 2\n#titanic_train.corr()['Survived']['SibSpParch']\ncorr_matrix = titanic_train.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","90ee8fa3":"titanic_test['SibSpParch'] = (titanic_test['SibSp'] + titanic_test['Parch']) % 2","14b96ca5":"# Dropping out useless features \ntitanic_train_labels = titanic_train['Survived'].copy()\ntitanic_train = titanic_train.drop(['Survived','PassengerId','Name','Ticket','Cabin'], axis=1)\ntitanic_test = titanic_test.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)\n#Too much missing values in Cabin but here a cabin number looks like \u2018C123\u2019 and the letter refers to the deck\n#so you can try to find something which makes sense using Cabin \ntitanic_train.head()","efcc762c":"# fill missing values in Embarked using common value\ntitanic_train['Embarked'].describe()\n# since common values is S \ncommon ='S'\ndatasets = [titanic_train, titanic_test]\nfor val in datasets:\n    val['Embarked']=val['Embarked'].fillna(common)\n# titanic_test.isnull().sum()\n# titanic_train.isnull().sum()","9601ad01":"# Fill Age with median \nmedian = titanic_train['Age'].median()\ntitanic_train = titanic_train.fillna(median)\ntitanic_test = titanic_test.fillna(median)","e6201318":"# 1. Sex\ngender = {\"male\":1, \"female\":0}\ndatasets = [titanic_train, titanic_test]\nfor val in datasets:\n    val['Sex'] = val['Sex'].map(gender)","9824e197":"# 2. Embarked and Status  \n# Here you can use sklearn one hot encoder or pandas get dummies \ntitanic_train = pd.get_dummies(titanic_train)\ntitanic_test = pd.get_dummies(titanic_test)","571ff5f7":"titanic_train.describe()","0003813e":"# Filling train and test set with unavlible features \ntitanic_train['Status_ Dona'] = 0 \nfeatures = ['Status_Major','Status_Mlle','Status_Jonkheer','Status_Don','Status_Capt','Status_Mme','Status_Sir','Status_the Countess','Status_Lady']\nfor ft in features:\n    titanic_test[ft] = 0 \n\ntitanic_test.describe()","425996d0":"# Put feature names into a order \ntitanic_train = titanic_train.sort_index(axis=1)\ntitanic_test = titanic_test.sort_index(axis=1)","add046c0":"#Standardization \nfrom sklearn.pipeline import Pipeline \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.preprocessing import MinMaxScaler\nmy_pip = Pipeline([\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('std_scaler', StandardScaler()),\n    #('min_max', MinMaxScaler())\n])\ntitanic_train[['Pclass','Age','Fare','SibSp','Parch']] = my_pip.fit_transform(titanic_train[['Pclass','Age','Fare','SibSp','Parch']])\ntitanic_test[['Pclass','Age','Fare','SibSp','Parch']] = my_pip.fit_transform(titanic_test[['Pclass','Age','Fare','SibSp','Parch']])\ntitanic_train","96f6e907":"model = RandomForestClassifier(n_estimators=100)\n#model = DecisionTreeClassifier()\n#model = KNeighborsClassifier(n_neighbors = 3)\nmodel.fit(titanic_train, titanic_train_labels)\nscore = round(model.score(titanic_train, titanic_train_labels)*100, 2)\nscore","b3c822a0":"pred = model.predict(titanic_test)","f3908122":"# final_dframe = pd.DataFrame()\n# titanic_test = pd.read_csv(\"test.csv\")\n# final_dframe['PassengerId'] = titanic_test['PassengerId']\n# final_dframe['Survived'] = pred\n# print(final_dframe)\n#final_dframe.to_csv('sub_9_24.csv',index=False)","a572fac3":"# Preprocessing ","b6645a23":"## Predicting using test set ","48dc312b":"### Converting categorical data into numerical data  ","70cad404":"### To be cont.\n## 2. Logistic Regression\n## 3. K Nearest Neighbor\n## 4. Gaussian Naive Bayes\n## 5. Stochastic Gradient Descent (SGD)\n## 6. Linear Support Vector Machine\n## 7. Decision Tree\n## 8. Perceptron","3ff718e9":"## Saving predictions ","727f7283":"### 1. Random Forest ","3f771729":"# Training using machine learning models ","a6cf479a":"## And then we have K-Fold Cross Validation"}}