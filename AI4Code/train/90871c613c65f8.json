{"cell_type":{"03634ba3":"code","708effcf":"code","ed9ff6a4":"code","92000d5b":"code","1ff4db2c":"code","209cb73f":"code","7c87412b":"code","56081acc":"code","d3cd9378":"code","aa457bad":"code","27594e68":"code","6495a602":"code","e0320ec3":"code","48060127":"code","be1db2ea":"code","8384a409":"code","af7a2abd":"code","f39c41db":"code","fa0f09d4":"code","34717f5f":"code","cf27418e":"code","637fd65e":"code","05d9dd56":"markdown","e7ed6f12":"markdown","95564e56":"markdown","061cc2d7":"markdown","7559a19c":"markdown","7f09b777":"markdown","649e8e82":"markdown","92ca3fe1":"markdown","565b8d07":"markdown","280919ba":"markdown","b77723a1":"markdown","2d311acd":"markdown","dc3dbaea":"markdown","895b09e1":"markdown","c0ccb22a":"markdown","dca6cbae":"markdown"},"source":{"03634ba3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(color_codes=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","708effcf":"auto = pd.read_csv('\/kaggle\/input\/automobile-dataset\/Automobile_data.csv')","ed9ff6a4":"auto.head()","92000d5b":"sns.distplot(auto['engine-size']);","1ff4db2c":"sns.distplot(auto['city-mpg'], kde=False, rug=True);","209cb73f":"sns.jointplot(auto['engine-size'],auto['wheel-base'])","7c87412b":"sns.jointplot(auto['engine-size'], auto['wheel-base'], kind=\"hex\")","56081acc":"sns.jointplot(auto['engine-size'], auto['wheel-base'], kind=\"kde\")","d3cd9378":"sns.pairplot(auto[['city-mpg', 'engine-size', 'wheel-base']])","aa457bad":"sns.stripplot(auto['fuel-type'], auto['city-mpg'])","27594e68":"sns.stripplot(auto['fuel-type'], auto['city-mpg'],jitter=True)","6495a602":"sns.swarmplot(auto['fuel-type'], auto['city-mpg'])","e0320ec3":"sns.boxplot(auto['num-of-doors'], auto['city-mpg'], hue=auto['fuel-type'])","48060127":"sns.violinplot(auto['city-mpg'])","be1db2ea":"sns.violinplot(auto['num-of-doors'], auto['city-mpg'], hue=auto['fuel-type'])","8384a409":"sns.barplot(auto['body-style'], auto['city-mpg'], hue=auto['engine-location'])","af7a2abd":"sns.countplot(auto['body-style'])","f39c41db":"sns.catplot(x=\"body-style\", kind=\"count\", palette=\"ch:.25\", data=auto)","fa0f09d4":"sns.pointplot(auto['fuel-system'], auto['engine-size'], hue=auto['num-of-doors'])","34717f5f":"sns.catplot(x=\"fuel-type\", \n               y=\"engine-size\", \n               hue=\"num-of-doors\", \n               col=\"engine-location\", \n               data=auto, \n               kind=\"swarm\")","cf27418e":"sns.lmplot(x=\"city-mpg\", y=\"engine-size\", data=auto)","637fd65e":"sns.lmplot(x=\"city-mpg\", y=\"engine-size\",hue=\"fuel-type\", data=auto)","05d9dd56":"In a strip plot, the scatterplot points will usually overlap. This makes it difficult to see the full distribution of data. One easy solution is to adjust the positions (only along the categorical axis) using some random \u201cjitter\"","e7ed6f12":"## Drawing multi-panel categorical plots","95564e56":"### Kernel Density Estimation\n\n","061cc2d7":"## Plotting bivariate distributions\n\nIt can also be useful to visualize a bivariate distribution of two variables. The easiest way to do this in seaborn is to just use the jointplot() function, which creates a multi-panel figure that shows both the bivariate (or joint) relationship between two variables along with the univariate (or marginal) distribution of each on separate axes.\n\n### Scatterplots\n\nThe most familiar way to visualize a bivariate distribution is a scatterplot, where each observation is shown with point at the x and y values. This is analgous to a rug plot on two dimensions. You can draw a scatterplot with the matplotlib plt.scatter function, and it is also the default kind of plot shown by the jointplot() function:","7559a19c":"## Plotting univariate distributions\n\nThe most convenient way to take a quick look at a univariate distribution in seaborn is the distplot() function. By default, this will draw a histogram and fit a kernel density estimate (KDE).","7f09b777":"## Bar plots\n\nA familiar style of plot that accomplishes this goal is a bar plot. In seaborn, the barplot() function operates on a full dataset and shows an arbitrary estimate, using the mean by default. When there are multiple observations in each category, it also uses bootstrapping to compute a confidence interval around the estimate and plots that using error bars:\n\nBar plots include 0\nin the quantitative axis range, and they are a good choice when 0 is a\nmeaningful value for the quantitative variable, and you want to make\ncomparisons against it.","649e8e82":"## Point plots\n\nAn alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than show a full bar it just plots the point estimate and confidence interval. Additionally, pointplot connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of a second variable, because your eyes are quite good at picking up on differences of slopes:","92ca3fe1":"## Plotting with categorical data","565b8d07":"# Violin Plots\n\nA violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","280919ba":"## Histograms\n\nHistograms are likely familiar, and a hist function already exists in matplotlib. A histogram represents the distribution of data by forming bins along the range of the data and then drawing bars to show the number of observations that fall in each bin.\n\nTo illustrate this, let\u2019s remove the density curve and add a rug plot, which draws a small vertical tick at each observation. You can make the rug plot itself with the rugplot() function, but it is also available in distplot():","b77723a1":"## Function to draw linear regression models\n\nlmplot() is one of the most widely used function to quickly plot the Linear Relationship b\/w 2 variables","2d311acd":"# Please upvote if you like this kernel for further encouragement\n","dc3dbaea":"## Boxplots\n\nThe first is the familiar boxplot(). This kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. Importantly, this means that each value in the boxplot corresponds to an actual observation in the data:","895b09e1":"## Visualizing pairwise relationships in a dataset\n\nTo plot multiple pairwise bivariate distributions in a dataset, you can use the pairplot() function. This creates a matrix of axes and shows the relationship for each pair of columns in a DataFrame. by default, it also draws the univariate distribution of each variable on the diagonal Axes:","c0ccb22a":"A different approach would be to use the function swarmplot(), which positions each scatterplot point on the categorical axis with an algorithm that avoids overlapping points:","dca6cbae":"### Hex Bin Plots"}}