{"cell_type":{"cb8ee4c1":"code","49671053":"code","84613dbf":"code","fc02c5fd":"markdown","b99581ce":"markdown"},"source":{"cb8ee4c1":"%%writefile pup.py\n\n# for discussion, see https:\/\/daniel.lawrence.lu\/programming\/rps\n\nimport random\n\nhist = [[], [], []]  # history of my moves, your moves, and combination thereof\n\ndicts_last = [{}, {}, {}]\ndicts_first = [{}, {}, {}]\ndicts_freq = [{}, {}, {}]\n\nmax_dict_keys = [8, 4, 2, 1]\nlast_move = 0\nn_pred = len(max_dict_keys) * 18\nn_meta = 8\np_score = [[5 for i in range(n_pred * 3)] for i in range(n_meta)]\nm_score = [5 for i in range(n_meta * 3)]\npredictions = [random.choice([0, 1, 2]) for i in range(n_pred * 3)]\nmeta_predictions = [random.choice([0, 1, 2]) for i in range(n_meta * 3)]\n\n\ndef beat(x):\n    return (x + 1) % 3\n\n\ndef maxind(a):\n    return a.index(max(a))\n\n\ndef predict():\n    global hist\n    global dicts\n    global max_dict_keys\n    global n_pred\n\n    predictions = [random.choice([0, 1, 2]) for i in range(n_pred * 3)]\n\n    for mi, m in enumerate(max_dict_keys):\n        for k in range(3):\n            for i in reversed(range(min(m, len(hist[0])))):\n                t = tuple(hist[k][-i:])\n                if t in dicts_first[k]:\n                    for j in range(2):\n                        predictions[len(max_dict_keys) * (6 * k + j) +\n                                    mi] = dicts_first[k][t][j]\n                        predictions[len(max_dict_keys) * (6 * k + j + 2) +\n                                    mi] = dicts_last[k][t][j]\n                    predictions[len(max_dict_keys) * (6 * k + 4) +\n                                mi] = maxind([\n                                    d + random.random() * 0.1\n                                    for d in dicts_freq[k][t][:3]\n                                ])\n                    predictions[len(max_dict_keys) * (6 * k + 5) +\n                                mi] = maxind([\n                                    d + random.random() * 0.1\n                                    for d in dicts_freq[k][t][3:]\n                                ])\n                    break\n    for p in range(2 * n_pred):\n        predictions[p + n_pred] = beat(predictions[p])\n\n    return predictions\n\n\ndef metapredict():\n    global predictions\n    global meta_predictions\n    for i in range(0, n_meta, 2):\n        meta_predictions[i] = predictions[maxind(p_score[i])]\n        meta_predictions[i + 1] = beat(predictions[maxind(p_score[i + 1])])\n\n    for p in range(2 * n_meta):\n        meta_predictions[p + n_meta] = beat(meta_predictions[p])\n    return meta_predictions[maxind(\n        [m + random.random() * 0.1 for m in m_score])]\n\n\ndef update(move, op_move):\n    global hist\n    global dicts\n    global n_pred\n    global n_meta\n    global p_score\n    global m_score\n    global predictions\n    global max_dict_keys\n    global meta_predictions\n    if op_move is None:\n        op_move = random.choice([0, 1, 2])\n\n    for i in range(min(max_dict_keys[0], len(hist[0]))):\n        for k in range(3):\n            t = tuple(hist[k][-i:])\n            dicts_last[k][t] = (move, op_move)\n            if t not in dicts_first[k]:\n                dicts_first[k][t] = (move, op_move)\n            if t not in dicts_freq[k]:\n                dicts_freq[k][t] = [0 for j in range(6)]\n            dicts_freq[k][t][move] += 1\n            dicts_freq[k][t][op_move + 3] += 1\n    hist[0].append(move)\n    hist[1].append(op_move)\n    hist[2].append(move * 3 + op_move)\n\n    for i in range(n_pred * 3):\n        pp = predictions[i]\n        bpp = beat(pp)\n        bbpp = beat(beat(pp))\n\n        p_score[0][i] = 0.9 * p_score[0][i] + ((op_move == pp) -\n                                               (op_move == bbpp)) * 3\n        p_score[1][i] = 0.9 * p_score[1][i] + ((move == pp) -\n                                               (move == bbpp)) * 3\n\n        p_score[2][i] = 0.87 * p_score[2][i] + (op_move == pp) * 3.3 - (\n            op_move == bpp) * 1.2 - (op_move == bbpp) * 2.3\n        p_score[3][i] = 0.87 * p_score[3][i] + (move == pp) * 3.3 - (\n            move == bpp) * 1.2 - (move == bbpp) * 2.3\n\n        p_score[4][i] = (p_score[4][i] +\n                         (op_move == pp) * 3) * (1 - (op_move == bbpp))\n        p_score[5][i] = (p_score[5][i] + (move == pp) * 3) * (1 -\n                                                              (move == bbpp))\n\n        p_score[6][i] = (p_score[6][i] - 1) \/ 1.05 + 2 + (op_move == bbpp) * 1\n        p_score[7][i] = (p_score[7][i] - 1) \/ 1.05 + 2 + (move == pp) * 1\n    for i in range(n_meta * 3):\n        m_score[i] = 0.97 * (m_score[i] + (op_move == meta_predictions[i]) -\n                             (op_move == beat(beat(meta_predictions[i]))))\n\n\ndef run(observation, configuration):\n    global last_move\n    if observation.step == 0:\n        last_move = random.choice([0, 1, 2])\n        return last_move\n    global predictions\n    update(last_move, observation.lastOpponentAction)\n    global dicts_freq\n    global m_score\n    global p_score\n\n    predictions = predict()\n    move = beat(metapredict())\n    if max(m_score) < 0.07 or random.randint(20, 40) > len(hist[0]):\n        move = random.choice([0, 1, 2])\n    last_move = move\n    return move\n","49671053":"%%writefile rfind.py\n\nimport random\nhist = []  # history of your moves\ndict_last = {}\nmax_dict_key = 10\nlast_move = 0\n\n\ndef beat(x):\n    return (x + 1) % 3\n\n\ndef predict():\n    global dict_last\n    global max_dict_key\n    for i in reversed(range(min(len(hist), max_dict_key))):\n        t = tuple(hist[-i:])\n        if t in dict_last:\n            return dict_last[t]\n    return random.choice([0, 1, 2])\n\n\ndef update(move, op_move):\n    global hist\n    global dict_last\n    global max_dict_key\n    hist.append(move)\n    for i in reversed(range(min(len(hist), max_dict_key))):\n        t = tuple(hist[-i:])\n        dict_last[t] = op_move\n\n\ndef run(observation, configuration):\n    global last_move\n    if observation.step == 0:\n        last_move = random.choice([0, 1, 2])\n        return last_move\n    update(last_move, observation.lastOpponentAction)\n    move = beat(predict())\n\n    return move","84613dbf":"from kaggle_environments import make, evaluate\n\ntrials = 10\nwins = 0\nties = 0\nlosses = 0\navg = 0\n\nprint('Running {} matches; this may take a few seconds'.format(trials))\nfor trial in range(trials):\n    current_score = evaluate(\"rps\", [\"pup.py\", \"rfind.py\"],\n                                 configuration={\"episodeSteps\": 1000})\n    score = 0\n    if current_score[0][0] > 0:\n        wins += 1\n    elif current_score[0][1] > 0:\n        losses += 1\n    else:\n        ties += 1\n    avg += current_score[0][0] - current_score[0][1]\n\nprint(\n    '{:>3} {:>3} {:>3}'.format('+' + str(wins),\n                               '=' + str(ties),\n                               '-' + str(losses)),\n    '| {}{}{} |'.format('+' * wins, '=' * ties, '-' * losses),\n    'avg score: {}'.format(avg \/ trials))","fc02c5fd":"# Purple Puppy RPS bot\n\n![pup](https:\/\/purplepuppy.com\/puphooray.png)\n\nThe main predictors are of the history matching type, similar to the `rfind` bot or variants.\n\nWe keep track of:\n\n* the last time the latest sequence of your moves was seen.\n* the last time the latest sequence of my moves was seen.\n* the last time the latest sequence of a combination of my moves and your moves was seen.\n* the first time the latestsequence of your moves was seen.\n* the first time the latest sequence of my moves was seen.\n* the first time the latest sequence of a combination of my moves and your moves was seen.\n\nFor each of these, we look at what was played next. We store the next move you played, the next move I played. And, we store the distribution of moves that was played next.\n\nSequences are matched for lengths of 8, 4, 2, 1.\n\nThen we have a variety of metapredictors that score the likelihood of seeing each of the 3 rotations of the predictors. These use varying types of decaying frequency counting of how much each predictor wins.\n\nA metametapredictor then ranks the metapredictors.\n\n## Future ideas\n\n* We can implement a metapredictor based on history matching rather than simple decaying frequency counting.\n* We can get rid of useless metapredictors\n* We can consider weighted random sampling instead of picking the top one\n* We can use better predictors (LSTM etc)\n","b99581ce":"We can now run our bot against a simple bot, such as this one (an original bot that I just wrote).\n"}}