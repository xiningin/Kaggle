{"cell_type":{"773f3e7f":"code","b1fd9157":"code","ff79a83c":"code","926d353b":"markdown","b74f1b8d":"markdown"},"source":{"773f3e7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1fd9157":"#assignment 10\nclass CallDetail:\n    def __init__(self,phoneno,called_no,duration,call_type):\n        self.__phoneno=phoneno\n        self.__called_no=called_no\n        self.__duration=duration\n        self.__call_type=call_type\n        \n    \n\nclass Util:\n    def __init__(self):\n        self.list_of_call_objects=None\n\n    def parse_customer(self,list_of_call_string):\n        self.list_of_call_objects=[]\n        for i in list_of_call_string:\n            phoneno,called_no,duration,call_type=map(str,i.split(\",\"))\n            self.list_of_call_objects.append(CallDetail(phoneno,called_no,duration,call_type))\n\n\ncall='9990000001,9330000001,23,STD'\ncall2='9990000001,9330000002,54,Local'\ncall3='9990000001,9330000003,6,ISD'\n\nlist_of_call_string=[call,call2,call3]\nUtil().parse_customer(list_of_call_string)","ff79a83c":"#assignment 13\nclass Classroom:\n    classroom_list=[]\n    \n    @staticmethod\n    def search_classroom(class_room):\n        if class_room.lower() in [i.lower() for i in Classroom.classroom_list]:\n            return \"Found\"\n        else:\n            return -1","926d353b":"![image.png](attachment:image.png)","b74f1b8d":"![image.png](attachment:image.png)"}}