{"cell_type":{"7d46acb9":"code","a11ed7b1":"code","525d2280":"code","fe446693":"code","7d55a23c":"code","a7b0fc89":"code","4cc99d3d":"code","d0f8339d":"code","ea2408da":"code","702fc23c":"code","6a140a7a":"code","ccf2c92c":"code","857f77b9":"code","27ef303e":"code","8db3f062":"code","32a7852e":"code","a9e8574b":"markdown","b9174480":"markdown","fce2d500":"markdown","7a0aced3":"markdown","d2458129":"markdown","26498a58":"markdown","d3f8e12b":"markdown","7e0ca427":"markdown","23dfef25":"markdown","f0af13b8":"markdown"},"source":{"7d46acb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a11ed7b1":"import os\nfrom pathlib import Path\nimport torch\nfrom torch.utils.data import TensorDataset ,DataLoader\nfrom torch import nn,optim\nimport torch.nn.functional as F\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nPATH=Path(\"..\/input\/\")\nprint(os.listdir(\"..\/input\/\"))","525d2280":"train=pd.read_csv(PATH\/'train.csv')\ntest=pd.read_csv(PATH\/'test.csv')\ntrain.shape,test.shape","fe446693":"x=train.drop(\"label\",axis=1)\ny=np.array(train['label'])","7d55a23c":"torch_X_train = torch.from_numpy(x.values).type(torch.FloatTensor)\/255\ntorch_y_train = torch.from_numpy(y).type(torch.LongTensor)\nmyDataset = torch.utils.data.TensorDataset(torch_X_train,torch_y_train)\nvalid_no  = int(0.2 * len(myDataset))\n# so divide the data into trainset and testset\ntrainSet,testSet = torch.utils.data.random_split(myDataset,(len(myDataset)-valid_no,valid_no))\nprint(f\"len of trainSet {len(trainSet)} , len of testSet {len(testSet)}\")\nbatch_size=64\ntrain_loader  = DataLoader(trainSet , batch_size=batch_size ,shuffle=True) \ntest_loader  = DataLoader(testSet , batch_size=batch_size ,shuffle=True)","a7b0fc89":"from torchvision import datasets, transforms\nclass Network(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 256)\n        self.fc2 = nn.Linear(256, 128)\n        self.fc3 = nn.Linear(128, 64)\n        self.fc4 = nn.Linear(64, 10)\n\n        # Dropout module with 0.2 drop probability\n        self.dropout = nn.Dropout(p=0.2)\n\n    def forward(self, x):\n        # make sure input tensor is flattened\n        x = x.view(x.shape[0], -1)\n\n        # Now with dropout\n        x = self.dropout(F.relu(self.fc1(x)))\n        x = self.dropout(F.relu(self.fc2(x)))\n        x = self.dropout(F.relu(self.fc3(x)))\n\n        # output so no dropout here\n        x = F.log_softmax(self.fc4(x), dim=1)\n\n        return x\n        \nmodel=Network()\noptimizer=optim.Adam(model.parameters(),lr=0.01)\ncriterion=nn.NLLLoss()","4cc99d3d":"epochs=2\ntrain_losses,test_losses=[],[]\nfor e in range(epochs):\n    running_loss=0\n    for images,labels in train_loader:\n        optimizer.zero_grad()\n        log_ps=model(images)\n        loss=criterion(log_ps,labels)\n        loss.backward()\n        optimizer.step()\n        running_loss+=loss.item()\n        \n    else:\n        test_loss=0\n        accuracy=0\n        \n        with torch.no_grad():\n            model.eval()\n            for images,labels in test_loader:\n                log_ps=model(images)\n                test_loss+=criterion(log_ps,labels)\n                ps=torch.exp(log_ps)\n                top_p,top_class=ps.topk(1,dim=1)\n                equals=top_class==labels.view(*top_class.shape)\n                accuracy+=torch.mean(equals.type(torch.FloatTensor))\n        model.train()\n        train_losses.append(running_loss\/len(train_loader))\n        test_losses.append(test_loss\/len(test_loader))\n\n        print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n              \"Training Loss: {:.3f}.. \".format(running_loss\/len(train_loader)),\n              \"Test Loss: {:.3f}.. \".format(test_loss\/len(test_loader)),\n              \"Test Accuracy: {:.3f}\".format(accuracy\/len(test_loader)))   ","d0f8339d":"print(\"Our model: \\n\\n\", model, '\\n')\nprint(\"The state dict keys: \\n\\n\", model.state_dict().keys())","ea2408da":"torch.save(model.state_dict(), 'checkpoint.pth')","702fc23c":"state_dict = torch.load('checkpoint.pth')\nprint(state_dict.keys())\n","6a140a7a":"model.load_state_dict(state_dict)","ccf2c92c":"checkpoint = {'input_size': 784,\n              'output_size': 10,\n              'hidden_layers': [256,128,64],\n              'state_dict': model.state_dict()}\n\ntorch.save(checkpoint, 'checkpoint.pth')","857f77b9":"test_images = pd.read_csv(\"..\/input\/test.csv\")\ntest_image = test_images.loc[:,test_images.columns != \"label\"].values\ntest_dataset = torch.from_numpy(test_image).type(torch.FloatTensor)\/255\nprint(test_dataset.shape)\n#test_dataset = torch.utils.data.TensorDataset(test_dataset)\nnew_test_loader = torch.utils.data.DataLoader(test_dataset, batch_size = 100, shuffle = False)","27ef303e":"results = []\nwith torch.no_grad():\n    model.eval()\n    for images in new_test_loader:\n        output = model(images)\n        ps = torch.exp(output)\n        top_p, top_class = ps.topk(1, dim = 1)\n        results += top_class.numpy().tolist()","8db3f062":"predictions = np.array(results).flatten()\nprint(predictions[:5])\nprint(predictions.shape)","32a7852e":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"my_submissions.csv\", index=False, header=True)","a9e8574b":"# Train -Test Split -Pytorch","b9174480":"# Train","fce2d500":"# Load our model","7a0aced3":"# Extracting Input and Target Variable","d2458129":"# Check the results","26498a58":"# Network","d3f8e12b":"# Load Test Data","7e0ca427":"# Save our model","23dfef25":"# Load Data","f0af13b8":"# Submit for Scoring"}}