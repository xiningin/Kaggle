{"cell_type":{"fadc36c6":"code","ef9d007a":"code","278fbfdd":"code","609f6977":"code","56161857":"code","9e20351b":"code","7bc6be70":"code","9640d76c":"code","5b40651e":"code","8448c2bf":"code","d4aa89b1":"code","9759b22a":"code","22408396":"code","c49b090f":"code","6b839e2d":"code","1e6c5a83":"code","a9e29117":"code","2491492e":"code","ef105cdc":"code","ca76819d":"code","20bbc15f":"code","1b2bec3d":"code","135ce128":"code","83a52f73":"code","c352a7ed":"code","60e148e4":"code","87b469d9":"code","6aa7937f":"code","c95d2b33":"code","df1a4cb8":"code","4b908bf5":"code","d4b118b3":"code","14f51c1a":"code","656ff33c":"code","93399b88":"code","20dcaef4":"code","57a6d7a3":"code","4dd9e96b":"code","0ce47655":"code","5079eb55":"code","6f3ba6f8":"code","3259499e":"code","a64b47c0":"code","80c20bc1":"code","d071d90b":"code","82c8b83e":"code","dcbc06b5":"code","eac57c39":"code","29c96f80":"code","d0cd6a78":"code","856622c6":"code","80302844":"code","774682a0":"code","ada8d763":"code","e1b43e86":"code","c7b4f30b":"code","2ed60516":"code","60de12f2":"code","a796457c":"code","0786f85c":"code","d11b25a4":"code","e4b707f1":"code","ea18d026":"code","58c6cebb":"code","d17d1016":"code","4b300225":"code","a324732e":"code","5050999a":"code","58392f07":"code","8ed695fc":"code","b1167600":"code","1a961c88":"code","7c2e908c":"markdown","1cce3b7d":"markdown","6b55ea35":"markdown","4609cf32":"markdown","5781de71":"markdown","b93b5f20":"markdown","2d38221b":"markdown","79ce69ef":"markdown","2af32cbf":"markdown","df1851d8":"markdown","b636b794":"markdown","ff1bccc3":"markdown"},"source":{"fadc36c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ef9d007a":"%load_ext autoreload\n%autoreload 2\n\n%matplotlib inline","278fbfdd":"import os\nfrom pandas_summary import DataFrameSummary\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom IPython.display import display\n\nfrom sklearn import metrics\nfrom sklearn_pandas import DataFrameMapper\nfrom sklearn.preprocessing import LabelEncoder, Imputer, StandardScaler\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype\nfrom sklearn.ensemble import forest\nfrom sklearn.tree import export_graphviz\nimport IPython, graphviz, re","609f6977":"def draw_tree(t, df, size=10, ratio=0.6, precision=0):\n    \"\"\" Draws a representation of a random forest in IPython.\n\n    Parameters:\n    -----------\n    t: The tree you wish to draw\n    df: The data used to train the tree. This is used to get the names of the features.\n    \"\"\"\n    s=export_graphviz(t, out_file=None, feature_names=df.columns, filled=True,\n                      special_characters=True, rotate=True, precision=precision)\n    IPython.display.display(graphviz.Source(re.sub('Tree {',\n       f'Tree {{ size={size}; ratio={ratio}', s)))","56161857":"def get_sample(df,n):\n    \"\"\" Gets a random sample of n rows from df, without replacement.\n\n    Parameters:\n    -----------\n    df: A pandas data frame, that you wish to sample from.\n    n: The number of rows you wish to sample.\n\n    Returns:\n    --------\n    return value: A random sample of n rows of df.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    >>> get_sample(df, 2)\n       col1 col2\n    1     2    b\n    2     3    a\n    \"\"\"\n    idxs = sorted(np.random.permutation(len(df))[:n])\n    return df.iloc[idxs].copy()","9e20351b":"def train_cats(df):\n    \"\"\"Change any columns of strings in a panda's dataframe to a column of\n    categorical values. This applies the changes inplace.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. Any columns of strings will be changed to\n        categorical values.\n\n    Examples:\n    ---------\n\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category\n    \"\"\"\n    for n,c in df.items():\n        if is_string_dtype(c): df[n] = c.astype('category').cat.as_ordered()\n\ndef apply_cats(df, trn):\n    \"\"\"Changes any columns of strings in df into categorical variables using trn as\n    a template for the category codes.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. Any columns of strings will be changed to\n        categorical values. The category codes are determined by trn.\n\n    trn: A pandas dataframe. When creating a category for df, it looks up the\n        what the category's code were in trn and makes those the category codes\n        for df.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category {a : 1, b : 2}\n\n    >>> df2 = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['b', 'a', 'a']})\n    >>> apply_cats(df2, df)\n\n           col1 col2\n        0     1    b\n        1     2    a\n        2     3    a\n\n    now the type of col is category {a : 1, b : 2}\n    \"\"\"\n    for n,c in df.items():\n        if (n in trn.columns) and (trn[n].dtype.name=='category'):\n            df[n] = c.astype('category').cat.as_ordered()\n            df[n].cat.set_categories(trn[n].cat.categories, ordered=True, inplace=True)\n\ndef fix_missing(df, col, name, na_dict):\n    \"\"\" Fill missing data in a column of df with the median, and add a {name}_na column\n    which specifies if the data was missing.\n\n    Parameters:\n    -----------\n    df: The data frame that will be changed.\n\n    col: The column of data to fix by filling in missing data.\n\n    name: The name of the new filled column in df.\n\n    na_dict: A dictionary of values to create na's of and the value to insert. If\n        name is not a key of na_dict the median will fill any missing data. Also\n        if name is not a key of na_dict and there is no missing data in col, then\n        no {name}_na column is not created.\n\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col1'], 'col1', {})\n    >>> df\n       col1 col2 col1_na\n    0     1    5   False\n    1     2    2    True\n    2     3    2   False\n\n\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col2'], 'col2', {})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n\n    >>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})\n    >>> df\n       col1 col2\n    0     1    5\n    1   nan    2\n    2     3    2\n\n    >>> fix_missing(df, df['col1'], 'col1', {'col1' : 500})\n    >>> df\n       col1 col2 col1_na\n    0     1    5   False\n    1   500    2    True\n    2     3    2   False\n    \"\"\"\n    if is_numeric_dtype(col):\n        if pd.isnull(col).sum() or (name in na_dict):\n            df[name+'_na'] = pd.isnull(col)\n            filler = na_dict[name] if name in na_dict else col.median()\n            df[name] = col.fillna(filler)\n            na_dict[name] = filler\n    return na_dict\n\ndef numericalize(df, col, name, max_n_cat):\n    \"\"\" Changes the column col from a categorical type to it's integer codes.\n\n    Parameters:\n    -----------\n    df: A pandas dataframe. df[name] will be filled with the integer codes from\n        col.\n\n    col: The column you wish to change into the categories.\n    name: The column name you wish to insert into df. This column will hold the\n        integer codes.\n\n    max_n_cat: If col has more categories than max_n_cat it will not change the\n        it to its integer codes. If max_n_cat is None, then col will always be\n        converted.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category { a : 1, b : 2}\n\n    >>> numericalize(df, df['col2'], 'col3', None)\n\n       col1 col2 col3\n    0     1    a    1\n    1     2    b    2\n    2     3    a    1\n    \"\"\"\n    if not is_numeric_dtype(col) and ( max_n_cat is None or len(col.cat.categories)>max_n_cat):\n        df[name] = col.cat.codes+1\n\ndef scale_vars(df, mapper):\n    warnings.filterwarnings('ignore', category=sklearn.exceptions.DataConversionWarning)\n    if mapper is None:\n        map_f = [([n],StandardScaler()) for n in df.columns if is_numeric_dtype(df[n])]\n        mapper = DataFrameMapper(map_f).fit(df)\n    df[mapper.transformed_names_] = mapper.transform(df)\n    return mapper\n\ndef proc_df(df, y_fld=None, skip_flds=None, ignore_flds=None, do_scale=False, na_dict=None,\n            preproc_fn=None, max_n_cat=None, subset=None, mapper=None):\n    \"\"\" proc_df takes a data frame df and splits off the response variable, and\n    changes the df into an entirely numeric dataframe. For each column of df \n    which is not in skip_flds nor in ignore_flds, na values are replaced by the\n    median value of the column.\n\n    Parameters:\n    -----------\n    df: The data frame you wish to process.\n\n    y_fld: The name of the response variable\n\n    skip_flds: A list of fields that dropped from df.\n\n    ignore_flds: A list of fields that are ignored during processing.\n\n    do_scale: Standardizes each column in df. Takes Boolean Values(True,False)\n\n    na_dict: a dictionary of na columns to add. Na columns are also added if there\n        are any missing values.\n\n    preproc_fn: A function that gets applied to df.\n\n    max_n_cat: The maximum number of categories to break into dummy values, instead\n        of integer codes.\n\n    subset: Takes a random subset of size subset from df.\n\n    mapper: If do_scale is set as True, the mapper variable\n        calculates the values used for scaling of variables during training time (mean and standard deviation).\n\n    Returns:\n    --------\n    [x, y, nas, mapper(optional)]:\n\n        x: x is the transformed version of df. x will not have the response variable\n            and is entirely numeric.\n\n        y: y is the response variable\n\n        nas: returns a dictionary of which nas it created, and the associated median.\n\n        mapper: A DataFrameMapper which stores the mean and standard deviation of the corresponding continuous\n        variables which is then used for scaling of during test-time.\n\n    Examples:\n    ---------\n    >>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})\n    >>> df\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    note the type of col2 is string\n\n    >>> train_cats(df)\n    >>> df\n\n       col1 col2\n    0     1    a\n    1     2    b\n    2     3    a\n\n    now the type of col2 is category { a : 1, b : 2}\n\n    >>> x, y, nas = proc_df(df, 'col1')\n    >>> x\n\n       col2\n    0     1\n    1     2\n    2     1\n\n    >>> data = DataFrame(pet=[\"cat\", \"dog\", \"dog\", \"fish\", \"cat\", \"dog\", \"cat\", \"fish\"],\n                 children=[4., 6, 3, 3, 2, 3, 5, 4],\n                 salary=[90, 24, 44, 27, 32, 59, 36, 27])\n\n    >>> mapper = DataFrameMapper([(:pet, LabelBinarizer()),\n                          ([:children], StandardScaler())])\n\n    >>>round(fit_transform!(mapper, copy(data)), 2)\n\n    8x4 Array{Float64,2}:\n    1.0  0.0  0.0   0.21\n    0.0  1.0  0.0   1.88\n    0.0  1.0  0.0  -0.63\n    0.0  0.0  1.0  -0.63\n    1.0  0.0  0.0  -1.46\n    0.0  1.0  0.0  -0.63\n    1.0  0.0  0.0   1.04\n    0.0  0.0  1.0   0.21\n    \"\"\"\n    if not ignore_flds: ignore_flds=[]\n    if not skip_flds: skip_flds=[]\n    if subset: df = get_sample(df,subset)\n    else: df = df.copy()\n    ignored_flds = df.loc[:, ignore_flds]\n    df.drop(ignore_flds, axis=1, inplace=True)\n    if preproc_fn: preproc_fn(df)\n    if y_fld is None: y = None\n    else:\n        if not is_numeric_dtype(df[y_fld]): df[y_fld] = df[y_fld].cat.codes\n        y = df[y_fld].values\n        skip_flds += [y_fld]\n    df.drop(skip_flds, axis=1, inplace=True)\n\n    if na_dict is None: na_dict = {}\n    else: na_dict = na_dict.copy()\n    na_dict_initial = na_dict.copy()\n    for n,c in df.items(): na_dict = fix_missing(df, c, n, na_dict)\n    if len(na_dict_initial.keys()) > 0:\n        df.drop([a + '_na' for a in list(set(na_dict.keys()) - set(na_dict_initial.keys()))], axis=1, inplace=True)\n    if do_scale: mapper = scale_vars(df, mapper)\n    for n,c in df.items(): numericalize(df, c, n, max_n_cat)\n    df = pd.get_dummies(df, dummy_na=True)\n    df = pd.concat([ignored_flds, df], axis=1)\n    res = [df, y, na_dict]\n    if do_scale: res = res + [mapper]\n    return res\n\ndef rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)\n\ndef set_rf_samples(n):\n    \"\"\" Changes Scikit learn's random forests to give each tree a random sample of\n    n random rows.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n))\n\ndef reset_rf_samples():\n    \"\"\" Undoes the changes produced by set_rf_samples.\n    \"\"\"\n    forest._generate_sample_indices = (lambda rs, n_samples:\n        forest.check_random_state(rs).randint(0, n_samples, n_samples))\n\ndef get_nn_mappers(df, cat_vars, contin_vars):\n    # Replace nulls with 0 for continuous, \"\" for categorical.\n    for v in contin_vars: df[v] = df[v].fillna(df[v].max()+100,)\n    for v in cat_vars: df[v].fillna('#NA#', inplace=True)\n\n    # list of tuples, containing variable and instance of a transformer for that variable\n    # for categoricals, use LabelEncoder to map to integers. For continuous, standardize\n    cat_maps = [(o, LabelEncoder()) for o in cat_vars]\n    contin_maps = [([o], StandardScaler()) for o in contin_vars]\n    return DataFrameMapper(cat_maps).fit(df), DataFrameMapper(contin_maps).fit(df)","7bc6be70":"# Memory saving function credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                #if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                #    df[col] = df[col].astype(np.float16)\n                #el\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        #else:\n            #df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB --> {:.2f} MB (Decreased by {:.1f}%)'.format(\n        start_mem, end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","9640d76c":"PATH = \"..\/input\/\"","5b40651e":"%%time \ndf_raw_train = pd.read_csv(f'{PATH}train_V2.csv', low_memory=False)\ndf_raw_train = reduce_mem_usage(df_raw_train)\ndf_raw_test = pd.read_csv(f'{PATH}test_V2.csv', low_memory = False)\ndf_raw_test = reduce_mem_usage(df_raw_test)","8448c2bf":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000): \n        display(df)","d4aa89b1":"display_all(df_raw_train.describe(include='all').T)","9759b22a":"null_cnt = df_raw_train.isnull().sum().sort_values()\nprint('null count:', null_cnt[null_cnt > 0])","22408396":"df_raw_train.dropna(inplace=True)","c49b090f":"df_raw_train = df_raw_train.sort_values(by = ['matchId'])","6b839e2d":"mapper = lambda x: 'solo' if ('solo' in x) else 'duo' if ('duo' in x) or ('crash' in x) else 'squad'","1e6c5a83":"df_raw_train['matchType'] = df_raw_train['matchType'].apply(mapper)","a9e29117":"train_cats(df_raw_train)","2491492e":"df, y, nas = proc_df(df_raw_train, 'winPlacePerc')","ef105cdc":"def split_vals(a,n): return a[:n].copy(), a[n:].copy()","ca76819d":"n_valid = 1000000\nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(df, n_trn)\nX_train, X_valid = split_vals(df, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","20bbc15f":"def rmse(x,y): return np.sqrt(((x-y)**2).mean())\n\ndef print_score(m):\n    res = [rmse(m.predict(X_train[features]), y_train), rmse(m.predict(X_valid[features]), y_valid),\n                m.score(X_train[features], y_train), m.score(X_valid[features], y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","1b2bec3d":"# Training on subset of the data initially to do analysis fast.\nX_train = X_train[:1000000]\ny_train = y_train[:1000000]","135ce128":"X_train.head()","83a52f73":"# Training on simple model without removing matchId, Id and groupId. Just to visualise the decision tree\nm = RandomForestRegressor(n_estimators=1, max_depth=3, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)","c352a7ed":"rmse(m.predict(X_train), y_train)","60e148e4":"draw_tree(m.estimators_[0], X_train, precision=3)","87b469d9":"def fillInf(df, val):\n    numcols = df.select_dtypes(include='number').columns\n    cols = numcols[numcols != 'winPlacePerc']\n    df[df == np.Inf] = np.NaN\n    df[df == np.NINF] = np.NaN\n    for c in cols: df[c].fillna(val, inplace=True)","6aa7937f":"features = list(X_train.columns)\nfeatures","c95d2b33":"features.remove('Id')\nfeatures.remove('groupId')\nfeatures.remove('matchId')","df1a4cb8":"# Fitting using a basic Random Forest\nm = RandomForestRegressor(n_jobs=-1)\nm.fit(X_train[features], y_train)\nprint_score(m)","4b908bf5":"fi = rf_feat_importance(m, X_train[features]); fi","d4b118b3":"def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","14f51c1a":"plot_fi(fi[:30])","656ff33c":"X_train['headshot_percentage'] = X_train['headshotKills']\/X_train['kills']\nX_valid['headshot_percentage'] = X_valid['headshotKills']\/X_valid['kills']\n\nX_train['totalDistance'] = X_train['rideDistance'] + X_train['walkDistance'] + X_train['swimDistance']\nX_valid['totalDistance'] = X_valid['rideDistance'] + X_valid['walkDistance'] + X_valid['swimDistance']\n\nX_train['health_items'] = X_train['heals'] + X_train['boosts']\nX_train['killPlaceOverMaxPlace'] = X_train['killPlace'] \/ X_train['maxPlace']\nX_train['killsOverWalkDistance'] = X_train['kills'] \/ X_train['walkDistance']\n\nX_valid['health_items'] = X_valid['heals'] + X_train['boosts']\nX_valid['killPlaceOverMaxPlace'] = X_valid['killPlace'] \/ X_train['maxPlace']\nX_valid['killsOverWalkDistance'] = X_valid['kills'] \/ X_train['walkDistance']\n\nX_train['killStreakRate'] = X_train['killStreaks']\/X_train['kills']\nX_valid['killStreakRate'] = X_valid['killStreaks']\/X_valid['kills']\n\nX_train['killMinute'] = X_train['kills'] \/ X_train['matchDuration']\nX_valid['killMinute'] = X_valid['kills'] \/ X_valid['matchDuration']\n\nX_train['damageDealtMinute'] = X_train['damageDealt'] \/ X_train['matchDuration']\nX_valid['damageDealtMinute'] = X_valid['damageDealt'] \/ X_valid['matchDuration']\n\nX_train['participateKills'] = X_train['kills'] + X_train['assists'] + X_train['DBNOs']\nX_valid['participateKills'] = X_valid['kills'] + X_valid['assists'] + X_valid['DBNOs']\n\nX_train['vehicleDestroysMinute'] = X_train['vehicleDestroys'] \/ X_train['matchDuration']\nX_valid['vehicleDestroysMinute'] = X_valid['vehicleDestroys'] \/ X_valid['matchDuration']\n\nX_train['killsMiter'] = X_train['roadKills'] \/ X_train['rideDistance']\nX_valid['killsMiter'] = X_valid['roadKills'] \/ X_valid['rideDistance']\n\nX_train['playersJoined'] = X_train.groupby('matchId')['matchId'].transform('count')\n\nX_train['killsNorm'] = X_train['kills']*((100-X_train['playersJoined'])\/100)\nX_train['damageDealtNorm'] = X_train['damageDealt']*((100-X_train['playersJoined'])\/100)\n\nX_train['boostsPerWalkDistance'] = X_train['boosts']\/(X_train['walkDistance']) \n\nX_train['healsPerWalkDistance'] = X_train['heals']\/(X_train['walkDistance'])\n\nX_train['healsAndBoosts'] = X_train['heals']+X_train['boosts']\n\nX_train['healsAndBoostsPerWalkDistance'] = X_train['healsAndBoosts']\/(X_train['walkDistance'])\n\nX_valid['playersJoined'] = X_valid.groupby('matchId')['matchId'].transform('count')\n\nX_valid['killsNorm'] = X_valid['kills']*((100-X_valid['playersJoined'])\/100)\nX_valid['damageDealtNorm'] = X_valid['damageDealt']*((100-X_valid['playersJoined'])\/100)\n\nX_valid['boostsPerWalkDistance'] = X_valid['boosts']\/(X_train['walkDistance']) \n\nX_valid['healsPerWalkDistance'] = X_valid['heals']\/(X_train['walkDistance'])\n\nX_valid['healsAndBoosts'] = X_valid['heals'] + X_valid['boosts']\n\nX_valid['healsAndBoostsPerWalkDistance'] = X_valid['healsAndBoosts']\/(X_valid['walkDistance'])","93399b88":"train_group_agg = X_train.groupby(['matchId', 'groupId', 'matchType'])\nval_group_agg =  X_valid.groupby(['matchId', 'groupId', 'matchType'])\n\ntrain_match_agg = X_train.groupby(['matchId'])\nval_match_agg = X_valid.groupby(['matchId'])\n","20dcaef4":"X_train.columns","57a6d7a3":"features = list(X_train.columns)\nfeatures.remove('matchId')\nfeatures.remove('groupId')\nfeatures.remove('Id')","4dd9e96b":"agg_col = features\nagg_col.remove('matchType')\nagg_col.remove('numGroups')\nagg_col.remove('maxPlace')\nagg_col","0ce47655":"features","5079eb55":"fillInf(X_train, 0)\nfillInf(X_valid, 0)","6f3ba6f8":"for col in agg_col :\n    X_train['percentage_match_' + col] = train_match_agg[col].rank(pct=True).values\n    X_valid['percentage_match_' + col] = val_match_agg[col].rank(pct=True).values","3259499e":"X_train = X_train.merge(train_match_agg[agg_col].max().rename(columns=lambda s: 'match_max_' + s), on = 'matchId', how = 'left')\nX_valid = X_valid.merge(val_match_agg[agg_col].max().rename(columns=lambda s: 'match_max_' + s), on = 'matchId', how = 'left')","a64b47c0":"X_train = X_train.merge(train_match_agg[agg_col].min().rename(columns=lambda s: 'match_min_' + s), on = 'matchId', how = 'left')\nX_valid = X_valid.merge(val_match_agg[agg_col].min().rename(columns=lambda s: 'match_min_' + s), on = 'matchId', how = 'left')","80c20bc1":"X_train = X_train.merge(train_match_agg[agg_col].mean().rename(columns=lambda s: 'match_mean_' + s), on = 'matchId', how = 'left')\nX_valid = X_valid.merge(val_match_agg[agg_col].mean().rename(columns=lambda s: 'match_mean_' + s), on = 'matchId', how = 'left')","d071d90b":"display_all(X_train.head().T)","82c8b83e":"features = list(X_train.columns)\nfeatures.remove('matchId')\nfeatures.remove('groupId')\nfeatures.remove('Id')\nfeatures","dcbc06b5":"# Chooses random set for each tree. Helpful in reducing overfitting as it increases variance per each treee \nset_rf_samples(100000)","eac57c39":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.5,min_samples_leaf=3)\nm.fit(X_train[features], y_train)\nprint_score(m)","29c96f80":"fi = rf_feat_importance(m, X_train[features]); \ndisplay_all(fi)","d0cd6a78":"plot_fi(fi[:30])","856622c6":"to_keep = fi[fi.imp > 0.0005].cols\nlen(to_keep)","80302844":"X_train = X_train[to_keep]\nX_valid = X_valid[to_keep]","774682a0":"features = list(X_train.columns)","ada8d763":"features","e1b43e86":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.5,min_samples_leaf=3)\nm.fit(X_train[features], y_train)\nprint_score(m)","c7b4f30b":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.5,min_samples_leaf=10)\nm.fit(X_train[features], y_train)\nprint_score(m)","2ed60516":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.5,min_samples_leaf=25)\nm.fit(X_train[features], y_train)\nprint_score(m)","60de12f2":"fi = rf_feat_importance(m, X_train[features]); \ndisplay_all(fi)","a796457c":"plot_fi(fi[:15])","0786f85c":"to_keep = fi[fi.imp > 0.0005].cols\nlen(to_keep)","d11b25a4":"X_train = X_train[to_keep]\nX_valid = X_valid[to_keep]","e4b707f1":"features = X_train.columns","ea18d026":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.6,min_samples_leaf=3)\nm.fit(X_train[features], y_train)\nprint_score(m)","58c6cebb":"from scipy.cluster import hierarchy as hc\nimport scipy\nfrom matplotlib import pyplot as plt","d17d1016":"corr = np.round(scipy.stats.spearmanr(X_train[features]).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=X_train[features].columns, orientation='left', leaf_font_size=16)\nplt.show()","4b300225":"def get_score(X_train, y_train, X_valid, y_valid) :\n    m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.6,min_samples_leaf=3)\n    m.fit(X_train, y_train)\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]    \n    return res","a324732e":"for c in ('percentage_match_killPlaceOverMaxPlace', 'percentage_match_killPlace','percentage_match_health_items', 'percentage_match_killMinute'):\n    print(c, get_score(X_train.drop(c, axis=1), y_train, X_valid.drop(c, axis = 1), y_valid))","5050999a":"X_train = X_train.drop(['percentage_match_killPlaceOverMaxPlace'], axis = 1)\nX_valid = X_valid.drop(['percentage_match_killPlaceOverMaxPlace'], axis = 1)","58392f07":"features = list(X_train.columns)","8ed695fc":"m = RandomForestRegressor(n_jobs=-1, n_estimators=40, max_features=0.6,min_samples_leaf=3)\nm.fit(X_train, y_train)\nprint_score(m)","b1167600":"fi = rf_feat_importance(m, X_train[features]); \ndisplay_all(fi)","1a961c88":"plot_fi(fi[:15])","7c2e908c":"**Let's try removing some of these related features to see if the model can be simplified without impacting the accuracy.**","1cce3b7d":"# **Removing redundant features**\nVariable which have similar meaning makes it very hard to interpret the model. So here we try to remove such features with help of dendogram","6b55ea35":"# **Helper Method to reduce memory Usage**","4609cf32":"**From the above results, we can safely remove percentage_match_killPlaceOverMaxPlace **","5781de71":"# **Analysing the feature importance with basic features**","b93b5f20":"**Final feature importance interpretation**","2d38221b":"**Removing columns which are not at all important**","79ce69ef":"# **Helper functions**","2af32cbf":"# **Handling null values**","df1851d8":"**Removing some more features**","b636b794":"# **Adding new features.**\nThe features which we can be broadly categorised into three categories. Individual, Group wise, Match wise. In **solo** matchtype no of groups will  be equal to no of players and in **duo** players will participate in groups of two and in **squad** players will participate in groups of 4. Using stats which summarise the group and match may be helpful","ff1bccc3":"**There are lot of variations of MatchType but basically we can categorise them all to solo, duo or squad**"}}