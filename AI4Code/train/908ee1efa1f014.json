{"cell_type":{"c1483c46":"code","decae952":"code","713a2bae":"code","8bcba231":"code","4fa511bb":"code","5540b4ec":"code","8ba3c617":"code","9cbe5764":"code","10b0d2f2":"code","90466ad2":"code","b04319cf":"code","7eec9d10":"code","0cd777f0":"code","c6cf8671":"code","affd4e9e":"code","a1bdd0d5":"code","f3a09ab5":"code","c3ce9805":"code","4a1defbb":"code","f4e27f2c":"code","de5c3341":"code","be8c6054":"code","fd91c814":"code","8b76308d":"code","0785ec69":"code","0cc4ea81":"code","dcf7a8c5":"code","047d4548":"code","640e0ffb":"code","a51e69b4":"code","4e389800":"code","11dad81e":"code","11448a48":"code","2ca5606f":"code","76d02e91":"code","6398506f":"code","f299f4a7":"code","a9ee027d":"code","2d001d55":"markdown","54cdf46d":"markdown","4d9732dc":"markdown","bff0992b":"markdown"},"source":{"c1483c46":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import f1_score","decae952":"data = pd.read_csv(\"..\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","713a2bae":"data","8bcba231":"pd.set_option('display.max_columns', None)","4fa511bb":"data.drop('Date', axis=1, inplace=True)","5540b4ec":"data.isnull().sum()","8ba3c617":"data.dtypes","9cbe5764":"data['WindDir9am'].unique()","10b0d2f2":"data['RainToday'] = data['RainToday'].fillna('No')","90466ad2":"encoder = LabelEncoder()\n\nlabel_encoder_columns = ['RainToday', 'RainTomorrow']\n\nfor column in label_encoder_columns:\n    data[column] = encoder.fit_transform(data[column])","b04319cf":"def add_column_prefixes(data, column, prefix):\n    return data[column].apply(lambda x: prefix + str(x))","7eec9d10":"data['WindDir9am'] = add_column_prefixes(data, 'WindDir9am', \"9_\")\ndata['WindDir3pm'] = add_column_prefixes(data, 'WindDir3pm', \"3_\")","0cd777f0":"data","c6cf8671":"pd.get_dummies(data['WindGustDir'])","affd4e9e":"def onehot_encoder(data, columns):\n    for column in columns:\n        dummies = pd.get_dummies(data[column])\n        data = pd.concat([data, dummies], axis=1)\n        data.drop(column, axis=1, inplace=True)\n    return data","a1bdd0d5":"categorical_features = ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm']\n\ndata = onehot_encoder(data, categorical_features)","f3a09ab5":"data","c3ce9805":"data.isnull().sum()","4a1defbb":"def impute_means(data, columns):\n    for column in columns:\n        data[column] = data[column].fillna(data[column].mean())","f4e27f2c":"na_columns = ['MinTemp',\n              'MaxTemp',\n              'Rainfall',\n              'Evaporation',\n              'Sunshine',\n              'WindGustSpeed',\n              'WindSpeed9am',\n              'WindSpeed3pm',\n              'Humidity9am',\n              'Humidity3pm',\n              'Pressure9am',\n              'Pressure3pm',\n              'Cloud9am',\n              'Cloud3pm',\n              'Temp9am',\n              'Temp3pm']\n\nimpute_means(data, na_columns)","de5c3341":"y = data['RainTomorrow']\nX = data.drop('RainTomorrow', axis=1)","be8c6054":"scaler = RobustScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","fd91c814":"X","8b76308d":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)","0785ec69":"inputs = tf.keras.Input(shape=(117,))\nx = tf.keras.layers.Dense(16, activation='relu')(inputs)\nx = tf.keras.layers.Dense(16, activation='relu')(x)\noutputs = tf.keras.layers.Dense(2, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)","0cc4ea81":"model.summary()","dcf7a8c5":"model.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)","047d4548":"EPOCHS = 6\nBATCH_SIZE = 32","640e0ffb":"history = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    epochs=EPOCHS,\n    batch_size=BATCH_SIZE,\n    verbose=1\n)","a51e69b4":"plt.figure(figsize=(14, 10))\n\nplt.plot(range(EPOCHS), history.history['loss'], color='b')\nplt.plot(range(EPOCHS), history.history['val_loss'], color='r')\n\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\n\nplt.show()","4e389800":"np.argmin(history.history['val_loss'])","11dad81e":"print(f\"Model Accuracy: {model.evaluate(X_test, y_test, verbose=0)[1]}\")","11448a48":"y.sum() \/ len(y)","2ca5606f":"y_pred = model.predict(X_test)","76d02e91":"y_pred","6398506f":"y_test","f299f4a7":"y_pred = list(map(lambda x: np.argmax(x), y_pred))","a9ee027d":"print(f\"Model F1 Score: {f1_score(y_test, y_pred)}\")","2d001d55":"# Getting Started","54cdf46d":"# Training","4d9732dc":"# Preprocessing","bff0992b":"# Results"}}