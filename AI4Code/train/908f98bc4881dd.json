{"cell_type":{"6936cdbb":"code","919ad709":"code","1aca6816":"code","9e219e9f":"code","801c4289":"code","c2f332ef":"code","d8b1a0fa":"code","a1f46451":"code","679147a1":"code","cd0bf21b":"code","90f29c9e":"code","0dc2deac":"code","7589fa6a":"code","f890e29c":"code","1ec6a17b":"code","b5bf1607":"code","cbad99d9":"code","d4bffbd0":"code","80d6b638":"code","ecbab4f0":"code","b8a28a38":"code","dca83888":"code","30bf24c4":"code","71b34126":"code","e310e1e7":"code","3e1cc660":"markdown","0f6e2563":"markdown","c70ef0eb":"markdown","bc67b74f":"markdown"},"source":{"6936cdbb":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","919ad709":"import os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1aca6816":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport torch\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg19 import VGG19\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom keras.models import Model\nfrom keras.layers import Activation, Dense, Input, Flatten, Conv2D, Dropout, MaxPooling2D, BatchNormalization\nfrom keras.optimizers import SGD\nfrom keras.callbacks import History\nfrom keras import metrics\nfrom sklearn.model_selection import train_test_split","9e219e9f":"batch_size = 32\nfiles_directory = '..\/input\/dogs-vs-cats\/train\/train\/'\n# img_width, img_height = 224, 224\nimg_width, img_height = 96,96","801c4289":"files = os.listdir(files_directory)\ncat_files = [f for f in files if 'cat' in f]\ndog_files = [f for f in files if 'dog' in f]\n\nprint(cat_files[:3])\nprint(dog_files[:3])","c2f332ef":"df_cat = pd.DataFrame({\n    'filename': cat_files,\n    'label': 'cat',\n})\ndf_dog = pd.DataFrame({\n    'filename': dog_files,\n    'label': 'dog',\n})\ndf = pd.concat([df_cat, df_dog])\ndf = df.sample(frac=1).reset_index(drop=True)\n\ndf.head(15)","d8b1a0fa":"datagen = ImageDataGenerator(\n                             #validation_split=0.01,\n                             rescale=1.\/255., \n#                              width_shift_range=0.2,\n#                              height_shift_range=0.2,\n                             horizontal_flip=True,\n                             rotation_range=40,\n                             shear_range=0.2,\n                             zoom_range=[0.8, 1.2])\ntrain_gen = datagen.flow_from_dataframe(dataframe=df,\n                                        directory=files_directory,\n                                        x_col='filename',\n                                        y_col='label',\n                                        target_size=(img_height, img_width),\n                                        batch_size=batch_size,\n                                        class_mode='binary',\n                                        shuffle=True\n#                                         subset='training'\n                                       )\n# valid_gen = datagen.flow_from_dataframe(dataframe=df,\n#                                         directory=files_directory,\n#                                         x_col='filename',\n#                                         y_col='label',\n#                                         target_size=(img_height, img_width),\n#                                         batch_size=batch_size,\n#                                         class_mode='binary',\n#                                         shuffle=True,\n#                                         subset='validation')","a1f46451":"print(train_gen.class_indices)\n# print(valid_gen.class_indices)","679147a1":"valid_gen.filenames","cd0bf21b":"dog_label = train_gen.class_indices['dog']\nbatch_features, batch_labels = next(train_gen)\n# batch_features, batch_labels = next(valid_gen)\n\nrows = 4\ncols = 4\nplt.figure(figsize=(24,24))\nfor i in range(1, rows*cols + 1):\n    plt.subplot(rows,cols,i)\n    plt.imshow(batch_features[i-1])\n    plt.text(0, 0, 'dog' if batch_labels[i-1] == dog_label else 'cat',  # i don't know why this is suddenly getting flipped\n             fontsize=24,\n             color='r')\nplt.show()","90f29c9e":"def get_base_model(architecture):\n    if architecture == 'resnet' or architecture == 'resnet50':\n        base_model = ResNet50(weights='..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, pooling='average')\n    elif architecture == 'vgg19':\n        base_model = VGG19(weights='..\/input\/vgg19\/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, pooling='average')\n    else:\n        base_model = VGG16(weights='..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False, pooling='average')\n    \n    for layer in base_model.layers:\n        layer.trainable = True\n    \n    return base_model","0dc2deac":"def get_model():\n    base_model = get_base_model('resnet50')\n    X_input = Input(shape=(img_width, img_height, 3), name='input')\n    \n    X = base_model(X_input)\n    X = Flatten()(X)\n    X = Dropout(0.3)(X)\n    out = Dense(1, activation='sigmoid')(X)\n    return Model(X_input, [out])","7589fa6a":"model = get_model()","f890e29c":"all_history = {\n    'loss': [],\n    'val_loss': [],\n    'acc': [],\n    'val_acc': []\n}","1ec6a17b":"model.compile(optimizer='sgd',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])","b5bf1607":"epochs = 14\nhistory = History()\nmodel.fit_generator(train_gen,\n                    epochs=epochs,\n                    #validation_data=valid_gen,\n                    callbacks=[history])","cbad99d9":"all_history['loss'] += history.history['loss']\n# all_history['val_loss'] += history.history['val_loss']\nall_history['acc'] += history.history['acc']\n# all_history['val_acc'] += history.history['val_acc']","d4bffbd0":"plt.figure(figsize=(8,4))\nplt.plot(all_history['loss'])\nplt.plot(all_history['val_loss'])\nplt.title('Training and Validation Loss')\nplt.legend(['train loss', 'valid loss'])\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.show()","80d6b638":"test_dir = '..\/input\/dogs-vs-cats\/test1'\ntest_files = pd.DataFrame({\n    'filename': os.listdir(test_dir),\n})","ecbab4f0":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_gen = test_datagen.flow_from_directory(test_dir,\n                                            target_size=(img_height, img_width),\n                                            batch_size=batch_size,\n                                            class_mode=None,\n                                            shuffle=False)","b8a28a38":"test_gen.reset()\npred = model.predict_generator(test_gen, verbose=1)","dca83888":"pred = [1 if p[0] > 0.5 else 0 for p in pred]","30bf24c4":"test_filenames = test_gen.filenames","71b34126":"test_filenames = [f.replace('test1\/', '') for f in test_filenames]","e310e1e7":"submission = pd.DataFrame({\n    'id': test_filenames,\n    'label': pred\n})\nsubmission.to_csv('.\/submission.csv', index=False)","3e1cc660":"# Prepare the data\nFirst things first, we need to split the data into a list of cat and dog images. Next, we need to put it through Keras's \nImageDataGenerator because there's too many images to fit in memory. Plus, this opens up the possibility of using \nlarger images!\n\nWe'll actually create two ImageDataGenerators, one for training and one for validation!","0f6e2563":"# Let's view a batch of images","c70ef0eb":"# Make Predictions","bc67b74f":"# Transfer Learning\nWe'll use transfer learning to help figure out if the images are cats \/ dogs \nWe'll test out 3 pre-trained networks:\n- VGG19\n- VGG16\n- ResNet50"}}