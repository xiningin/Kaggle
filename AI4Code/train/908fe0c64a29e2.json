{"cell_type":{"98810863":"code","1e92d2be":"code","1a812ecb":"code","741904c9":"code","fc6676ac":"code","8f3f6a6d":"code","f3bf0ec4":"code","57cee8a1":"code","32045a6e":"code","17e59dc2":"code","077906d4":"code","f6e77c46":"code","eaa33756":"code","5c7af1d3":"code","c869febd":"code","210d2985":"markdown"},"source":{"98810863":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e92d2be":"import keras\nimport pandas as pd\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Flatten, Activation, Dropout, Conv2D, MaxPooling2D\nfrom keras.models import Sequential\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nfrom keras.applications import Xception\nfrom keras.models import Sequential\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom PIL import ImageFile\nImageFile.LOAD_TRUNCATED_IMAGES = True","1a812ecb":"path_t = '\/kaggle\/input\/person-images\/dogImages\/dogImages\/train\/'\npath_te = '\/kaggle\/input\/person-images\/dogImages\/dogImages\/test\/'","741904c9":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range=30,\n                                  width_shift_range=0.3,\n                                  height_shift_range=0.3,\n                                  fill_mode='nearest')\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(path_t,\n                                                   target_size = (299,299),\n                                                   batch_size = 64,\n                                                   class_mode = 'categorical')\n\ntest_generator = test_datagen.flow_from_directory(path_te,\n                                                 target_size = (299,299),\n                                                 batch_size = 64,\n                                                 class_mode = 'categorical')","fc6676ac":"image_path_1 = '\/kaggle\/input\/person-images\/dogImages\/dogImages\/train\/019.Bedlington_terrier\/Bedlington_terrier_01360.jpg'\nimage_path_2 = '\/kaggle\/input\/person-images\/dogImages\/dogImages\/train\/004.Akita\/Akita_00229.jpg'\nimage = cv2.imread(image_path_1)\nimage_1 = cv2.imread(image_path_2)\nplt.figure(figsize= (8,8))\nplt.subplot(1,2,1)\nplt.imshow(image)\nplt.subplot(1,2,2)\nplt.imshow(image_1)\nimage.shape","8f3f6a6d":"model_full = Xception(weights='imagenet', include_top = True, input_shape=(299,299,3))\nprint(model_full.summary())","f3bf0ec4":"model = Xception(weights='imagenet', include_top = False, input_shape=(299,299,3))\nprint(model.summary())","57cee8a1":"for layer in model.layers:\n    layer.trainable = False\n    #print(layer.trainable)","32045a6e":"xception_net = Sequential()\nxception_net.add(model)\nxception_net.add(GlobalAveragePooling2D())\nxception_net.add(Dense(133, activation = 'softmax'))\nxception_net.summary()","17e59dc2":"xception_net.compile(optimizer= 'adam' , loss= 'categorical_crossentropy', metrics=['accuracy'])","077906d4":"checkpoint = ModelCheckpoint('\/kaggle\/working\/model.h5',\n                             monitor=\"val_loss\",\n                             mode=\"min\",\n                             save_best_only = True,\n                             verbose=1)\n\nearlystop = EarlyStopping(monitor = 'val_loss', \n                          min_delta = 0, \n                          patience = 10,\n                          verbose = 1,\n                          restore_best_weights = True)\n\n# we put our call backs into a callback list\ncallbacks = [earlystop, checkpoint]","f6e77c46":"history = xception_net.fit(train_generator,\n                               steps_per_epoch = 104,\n                               epochs = 25,\n                               verbose = 1,\n                               validation_data = test_generator,\n                               validation_steps = 13,\n                               callbacks = callbacks\n                               \n                              )","eaa33756":"score = xception_net.evaluate_generator(test_generator, 13)\nprint('Test Loss', score[0])\nprint('Test Accuracy', score[1])","5c7af1d3":"history_dict = history.history\n\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\nepochs = range(1, len(loss_values) + 1)\n\nline1 = plt.plot(epochs, val_loss_values, label='Validation\/Test Loss')\nline2 = plt.plot(epochs, loss_values, label='Training Loss')\nplt.setp(line1, linewidth=2.0, marker = '+', markersize=10.0)\nplt.setp(line2, linewidth=2.0, marker = '4', markersize=10.0)\nplt.xlabel('Epochs') \nplt.ylabel('Loss')\nplt.grid(True)\nplt.legend()\nplt.show()","c869febd":"history_dict = history.history\n\nacc_values = history_dict['accuracy']\nval_acc_values = history_dict['val_accuracy']\nepochs = range(1, len(loss_values) + 1)\n\nline1 = plt.plot(epochs, val_acc_values, label='Validation\/Test Accuracy')\nline2 = plt.plot(epochs, acc_values, label='Training Accuracy')\nplt.setp(line1, linewidth=2.0, marker = '+', markersize=10.0)\nplt.setp(line2, linewidth=2.0, marker = '4', markersize=10.0)\nplt.xlabel('Epochs') \nplt.ylabel('Accuracy')\nplt.grid(True)\nplt.legend()\nplt.show()","210d2985":"# About the Dataset\n- This dataset provided with a training set and a test set of images of dogs. Each image has a filename that is its unique id. The dataset comprises 120 breeds of dogs. The goal of the competition is to create a classifier capable of determining a dog's breed from a photo"}}