{"cell_type":{"9ab366a1":"code","1de51ccc":"code","fb7efc36":"code","67e9d108":"code","530d79e0":"code","4107dcce":"code","6d47d38a":"code","3c5056d5":"code","42d3cf65":"code","8247ba78":"code","54677889":"code","30596566":"code","18f6679b":"code","1b4dd2af":"code","0dea085c":"code","5cc0f0d1":"code","902a3073":"code","7e52476f":"code","ebce25cd":"code","4a2ceee4":"code","9f8d885a":"code","caa1f363":"code","ccc43297":"code","5bdcc08e":"code","b66d0ecf":"markdown","57dad1e1":"markdown","c599deb2":"markdown","412439c9":"markdown","b5c7c6da":"markdown","d521c11c":"markdown","c454f3c8":"markdown","67250190":"markdown","41c1bae4":"markdown","1a2cd3c1":"markdown","c137cddc":"markdown","73edb057":"markdown","ef2555ae":"markdown","c9b387cc":"markdown","7c07d913":"markdown","cdfcc0e1":"markdown","0112f7d5":"markdown"},"source":{"9ab366a1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport scipy\nimport scipy.stats\nfrom sklearn.preprocessing import LabelEncoder","1de51ccc":"data = pd.read_csv('\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndata","fb7efc36":"data.isna().sum()","67e9d108":"data.drop(['salary', 'sl_no'], axis=1, inplace=True)\ndata.isna().sum()","530d79e0":"data.nunique()","4107dcce":"corr = data.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","6d47d38a":"data","3c5056d5":"unique_vals = data.nunique()\ncol_log = data.columns\nfor i in range(0, len(unique_vals)):\n    coln = str(col_log[i])\n    \n    # If its less than 5, convert to one hot. Do not convert Status yet\n    if int(unique_vals[i]) < 5 and coln != 'status':\n        data = pd.concat([data.drop(coln, axis=1), pd.get_dummies(data[coln], prefix=coln)], axis=1)","42d3cf65":"data","8247ba78":"data_y = pd.DataFrame(data['status'])\ndata_x = data.drop('status', axis=1)\n\nstatus_encoder = LabelEncoder()\ndata_y = status_encoder.fit_transform(data_y)","54677889":"print('Guessing always placed accuracy: %f' % (((data['status'] == 'Placed').sum() \/ data['status'].count()) * 100))","30596566":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import svm","18f6679b":"train_x, test_x, train_y, test_y = train_test_split(data_x, data_y, test_size=0.20, random_state=1)\ntrain_x, val_x, train_y, val_y = train_test_split(train_x, train_y, test_size=0.20, random_state=1)","1b4dd2af":"best_score = -1\nbest_estimators = 0\nfor i in range(10,250):\n    model = RandomForestClassifier(n_estimators=i, random_state=0)\n    model.fit(train_x, train_y)\n    pred = model.predict(test_x)\n    score = accuracy_score(pred, test_y)\n    if score > best_score:\n        best_score = score\n        best_estimators = i\n        \nprint(\"The best number of estiamtors was %d with accuracy score %f\" % (best_estimators, (best_score * 100)))","0dea085c":"model = RandomForestClassifier(n_estimators=best_estimators, random_state=0)","5cc0f0d1":"model.fit(train_x, train_y)","902a3073":"pred = model.predict(test_x)\nscore = accuracy_score(pred, test_y)\nprint(\"Test Accuracy: %f\" % (score * 100))","7e52476f":"from sklearn.metrics import confusion_matrix, precision_score, plot_confusion_matrix\nimport matplotlib.pyplot as plt\n\nprint(\"True Negatives: %d, False Positives: %d, False Negatives: %d, True Positives: %d\" % tuple(confusion_matrix(test_y, pred).ravel()))\nprint(\"Precision Score: %f\" % (precision_score(test_y, pred) * 100))\nplot_confusion_matrix(model, test_x, test_y, cmap=plt.cm.Reds)\nplt.title(\"Confusion Matrix\")\nplt.show()","ebce25cd":"from sklearn.metrics import precision_recall_curve, plot_precision_recall_curve\n\n# Get the predicted probabilties of the positive label (placed)\ny_pred_prob = model.predict_proba(val_x)[:, 1]\n\n# Get curve\nprecision, recall, thresholds = precision_recall_curve(val_y, y_pred_prob)\n\n# Plot\nplt.plot(recall, precision, label=\"Random Forest\")\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")\nplt.plot([0, 1], [0.68837209, 0.68837209], label=\"Baseline\")\nplt.legend()\nplt.show()","4a2ceee4":"# Remove final one for dataframe.\ndf = pd.DataFrame(data={'Precision': precision[:-1], 'Recall': recall[:-1], 'Thresholds': thresholds})\ndf","9f8d885a":"targets = df.loc[(df['Precision'] >= 1) & (df['Thresholds'] != 1)]\ntargets","caa1f363":"best = -1\nthresh_best = -1\n\ny_test_prob = model.predict_proba(test_x)[:, 1]\nfor target in targets.to_numpy():\n    true_prediction = (y_test_prob > target[2]).astype(int)\n    score = precision_score(test_y, true_prediction)\n    \n    # Since the dataframe is in order from thresholds, we want the lowest threshold with 100%\n    # precision. This does slightly bias it towards the train set, but if safety is the highest\n    # priority the threshold could be futher increased at the cost of accuracy \n    # (meaning when its positive we know with high probability but we will get more false negatives)\n    if score > best:\n        best = score\n        thresh_best = target[2]\n    print(\"Score for threshold %f: %f\" % (target[2], score * 100))\nprint(\"Best precision score of %f achieved with threshold %f.\" % (best, thresh_best))","ccc43297":"ypred = (model.predict_proba(test_x)[:, 1] > thresh_best).astype(int)\nscore = accuracy_score(ypred, test_y)\nprint(\"Test accuracy with threshold: %f\" % (score * 100))\nprint(\"True Negatives: %d, False Positives: %d, False Negatives: %d, True Positives: %d\" % tuple(confusion_matrix(test_y, ypred).ravel()))","5bdcc08e":"ypred = (model.predict_proba(val_x)[:, 1] > thresh_best).astype(int)\nscore = accuracy_score(ypred, val_y)\nprint(\"Test accuracy with threshold: %f\" % (score * 100))\nprint(\"True Negatives: %d, False Positives: %d, False Negatives: %d, True Positives: %d\" % tuple(confusion_matrix(val_y, ypred).ravel()))","b66d0ecf":"# Objective\nGiven the data provided, predict if a student will be placed in the future.","57dad1e1":"We want precision to be 1 to prevent all possible false positives. Lets grid search thresholds with precision 1 to determine what produces the best false positive rate on the test set.","c599deb2":"# Model Training","412439c9":"# Accuracy Goal","b5c7c6da":"# Confusion Matrix + Precision Recall Curve\nLets say placement is used in production and requires no false positives (we want to know only those who should get placed). A confusion matrix and a precision recall curve can help fix this issue. As stated [on this machine learning blog](https:\/\/machinelearningmastery.com\/roc-curves-and-precision-recall-curves-for-classification-in-python\/), a ROC curve is not sufficient because of the dataset imbalance.","d521c11c":"Lets examine the possible threshold values we could use.","c454f3c8":"There are zero false positives in the model now (validation and testing sets) at the cost of some accuracy.","67250190":"Train the final model","41c1bae4":"# Data Analysis and Preparation","1a2cd3c1":"Check if there is strong correlation between variables.","c137cddc":"Salary is missing 67 values. As we only care about if they got placed or not, status needs to be Placed for there to be a salary value. We can remove it as its dependent on status.","73edb057":"To make the confusion matrix in the future unbias, I split it into train, test and val where val is used for the precision recall curves. Random state is fixed to maintain values.","ef2555ae":"Performing a grid search on n_estimators 50 - 500 on a stable seed classifier.","c9b387cc":"There are no highly correlated features present, so none will be removed.\n\nI will be using a one hot encoding for gender, ssc_b, hsc_b, hsc_s, degree_t, workex, and specialization. Status will be converted to a label for binary training.","7c07d913":"This is good testing accuracy, but it reports false positives which we may or may not want.","cdfcc0e1":"the model will be learning then whenever the accuracy is > 68.84%. If its less than or equal, it is worse than predicting Placed for everyone.","0112f7d5":"The precision score ok, but there are false positives present. Lets examine the precision recall curve."}}