{"cell_type":{"4b5dcbd2":"code","06df52ff":"code","c731b60e":"code","1e57bc4f":"code","8f49e1f6":"code","4e8b0829":"code","80d0a6d9":"code","99cd1808":"code","9d732534":"code","3c72ef6f":"code","8f6b1d76":"code","f8251b9d":"code","e0faab4e":"code","5f2f266a":"code","288987fe":"code","98b2d366":"code","4e7f1be4":"code","fc6194bf":"code","8305f0ab":"code","9b1d65b8":"code","76371a42":"code","d54ea978":"code","0d154940":"code","803eee00":"code","8dabb5f0":"code","0532a4d5":"code","745b7810":"code","fd8a2cca":"code","2932da97":"code","69e15129":"code","5011aced":"code","d66e0b48":"markdown","71bc845a":"markdown","91a16b3e":"markdown","c4f51e25":"markdown","b9eca9ef":"markdown","d4f4b8d4":"markdown","682fe13c":"markdown","f76bb445":"markdown","11d3ae65":"markdown","eb477f23":"markdown","45fe64fc":"markdown","59ff6ec0":"markdown","e927bbe6":"markdown"},"source":{"4b5dcbd2":"import math\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter as FF, StrMethodFormatter as SMF\nimport seaborn as sns\nfrom sklearn.model_selection import cross_val_predict, cross_val_score, KFold\nfrom sklearn.linear_model import Lasso, Ridge, LinearRegression, LogisticRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, confusion_matrix, accuracy_score, r2_score, classification_report\nfrom sklearn.model_selection import train_test_split,cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import model_selection, metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","06df52ff":"df = pd.read_csv('..\/input\/bank-marketing\/bank-additional-full.csv',sep = ';')\npd.set_option(\"display.max_columns\", None)\ndf.head()","c731b60e":"df.describe","1e57bc4f":"df.info()","8f49e1f6":"#Term Deposit Subscription (Target) \n# Yes = 1 and No = 0\ndf['y'] = 1 * (df['y']== 'yes')","4e8b0829":"sns.set()\n\n#Graph 1\ng1 = sns.heatmap(df.corr(), cmap='Blues')","80d0a6d9":"#Graph 2\ng2 = sns.histplot(data=df,x='age', hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscription vs Client Age', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Age\", fontsize = 24)\n#ax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\nax.set_ylim(0, 2000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Previous count\nprevious_count = df['age'].value_counts().sort_index().to_frame().rename(columns = {'age': \"# of Clients\"})\nprevious_count.index.name = \"Age\"\nprevious_count.T","99cd1808":"#Graph 3\ng3 = sns.countplot(data=df,x='previous', hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscription vs Number of Previous Contacts', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Number of Contacts\", fontsize = 24)\n#ax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 5000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Previous count\nprevious_count = df['previous'].value_counts().sort_index().to_frame().rename(columns = {'previous': \"# of Clients\"})\nprevious_count.index.name = \"Previous\"\nprevious_count.T","9d732534":"#Graph 4\ng4 = sns.countplot(data=df,x='previous', hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscription vs Number of Previous Contacts', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Number of Contacts\", fontsize = 24)\n#ax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\nax.set_ylim(0, 3700)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Age count\nage_count = df['previous'].value_counts().sort_index().to_frame().rename(columns = {'previous': \"# of Clients\"})\nage_count.index.name = \"# of Previous Contacts\"\nage_count.T","3c72ef6f":"#Graph 5\ng5 = sns.countplot(data = df, x = 'job',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Job', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Job\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\nax.set_ylim(0, 10000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Job count\njob_count = df['job'].value_counts().sort_index().to_frame().rename(columns = {'job': \"# of Clients\"})\njob_count.index.name = \"Job\"\njob_count.T","8f6b1d76":"#Graph 6\ng6 = sns.countplot(data = df, x = 'marital',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Marital Status', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Marital Status\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\nax.set_ylim(0, 25000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Marital count\nmarital_count = df['marital'].value_counts().sort_index().to_frame().rename(columns = {'marital': \"# of Clients\"})\nmarital_count.index.name = \"Marital Status\"\nmarital_count.T","f8251b9d":"#Graph 7\ng7 = sns.countplot(data = df, x = 'education',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Education', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Education\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 12000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Education count\neducation_count = df['education'].value_counts().sort_index().to_frame().rename(columns = {'education': \"# of Clients\"})\neducation_count.index.name = \"Education\"\neducation_count.T","e0faab4e":"#Graph 8\ng8 = sns.countplot(data = df, x = 'default',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Credit Default', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Credit Default\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 12000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Education count\nmarital_count = df['default'].value_counts().sort_index().to_frame().rename(columns = {'default': \"# of Clients\"})\nmarital_count.index.name = \"Default\"\nmarital_count.T","5f2f266a":"#Graph 9\ng9 = sns.countplot(data = df, x = 'housing',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Housing Loan', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Housing Loan\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 12000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Education count\nmarital_count = df['housing'].value_counts().sort_index().to_frame().rename(columns = {'housing': \"# of Clients\"})\nmarital_count.index.name = \"Housing Loan\"\nmarital_count.T","288987fe":"#Graph 10\ng10 = sns.countplot(data = df, x = 'loan',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Personal Loans', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Personal Loan\", fontsize = 24)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 12000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Education count\nmarital_count = df['loan'].value_counts().sort_index().to_frame().rename(columns = {'loan': \"# of Clients\"})\nmarital_count.index.name = \"Personal Loans\"\nmarital_count.T","98b2d366":"#Graph 11\ng11 = sns.countplot(data = df, x = 'campaign',hue = 'y', palette = 'viridis_r')\nplt.gcf().set_size_inches(16, 9)\n\n#Axes\nax = plt.gca()\n\n#Title\nax.set_title('Client Subscriptions vs Campaign', fontsize = 24)\n\n#X-axis\nax.set_xlabel(\"Campaign\", fontsize = 24)\n#ax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')\n\n#Y-axis\nax.set_ylabel(\"Number of Clients\", fontsize = 24)\n#ax.set_ylim(0, 12000)\n#ax.yaxis.set_major_formatter(SMF('${x:,.0f}'))\nax.tick_params(axis = 'both', which = 'major', labelsize = 16)\n\n#Education count\nmarital_count = df['campaign'].value_counts().sort_index().to_frame().rename(columns = {'campaign': \"# of Clients\"})\nmarital_count.index.name = \"Campaign\"\nmarital_count.T","4e7f1be4":"le = LabelEncoder()\n\ncat_var =['job','marital','education','default','housing','loan','contact','month','day_of_week','poutcome']\nfor i in cat_var:\n    df[i]= le.fit_transform(df[i]) \n\ndf","fc6194bf":"X = df.reset_index(drop=True).drop(['y'],axis=1)\ny = df['y']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","8305f0ab":"ss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)","9b1d65b8":"lr = LogisticRegression() \nlr.fit(X_train,y_train)\nlr_pred = lr.predict(X_test)\nk_fold = KFold(n_splits=10, shuffle=False, random_state=None)","76371a42":"print(confusion_matrix(y_test, lr_pred))\nprint(round(accuracy_score(y_test, lr_pred),2)*100)\nlr_cvs = (cross_val_score(lr, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, lr_pred))","d54ea978":"X_trainK, X_testK, y_trainK, y_testK = train_test_split(df, y, test_size = 0.2, random_state = 42)\n\nneighbors = np.arange(0,50)\ncv_scores = []\n\nfor k in neighbors:\n    k_value = k+1\n    knn = KNeighborsClassifier(n_neighbors = k_value, weights='uniform', p=2, metric='euclidean')\n    kfold = model_selection.KFold(n_splits=10, shuffle=True, random_state=42)\n    scores = model_selection.cross_val_score(knn, X_trainK, y_trainK, cv=kfold, scoring='accuracy')\n    cv_scores.append(scores.mean()*100)\n    print(\"k=%d %0.2f (+\/- %0.2f)\" % (k_value, scores.mean()*100, scores.std()*100))\n\noptimal_k = neighbors[cv_scores.index(max(cv_scores))]\nprint (\"The optimal number of neighbors is %d with %0.1f%%\" % (optimal_k, cv_scores[optimal_k]))\n\nplt.plot(neighbors, cv_scores)\nplt.xlabel('Number of Neighbors K')\nplt.ylabel('Train Accuracy')\nplt.show()","0d154940":"knn = KNeighborsClassifier(n_neighbors=28)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)\n\nprint(confusion_matrix(y_test, knn_pred))\nprint(round(accuracy_score(y_test, knn_pred),2)*100)\nknn_cvs = (cross_val_score(knn, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, knn_pred))","803eee00":"svc= SVC(kernel = 'sigmoid')\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)\n\nprint(confusion_matrix(y_test, svc_pred))\nprint(round(accuracy_score(y_test, svc_pred),2)*100)\nsvc_cvs = (cross_val_score(svc, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, svc_pred))","8dabb5f0":"dtree = DecisionTreeClassifier(criterion='gini')\ndtree.fit(X_train, y_train)\ndtree_pred = dtree.predict(X_test)\n\nprint(confusion_matrix(y_test, dtree_pred))\nprint(round(accuracy_score(y_test, dtree_pred),2)*100)\ndtree_cvs = (cross_val_score(dtree, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, dtree_pred))","0532a4d5":"rf = RandomForestClassifier() \nrf.fit(X_train, y_train)\nrf_pred = rf.predict(X_test)\n\nprint(confusion_matrix(y_test, rf_pred))\nprint(round(accuracy_score(y_test, rf_pred),2)*100)\nrf_cvs = (cross_val_score(rf, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, rf_pred))","745b7810":"gnb= GaussianNB()\ngnb.fit(X_train, y_train)\ngnb_pred = gnb.predict(X_test)\nprobs = gnb.predict(X_test)\n\nprint(confusion_matrix(y_test,gnb_pred))\nprint(round(accuracy_score(y_test, gnb_pred),2)*100)\ngnb_cvs = (cross_val_score(gnb, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, gnb_pred))","fd8a2cca":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\nxgb_pred = xgb.predict(X_test)\n\nprint(confusion_matrix(y_test, xgb_pred ))\nprint(round(accuracy_score(y_test, xgb_pred),2)*100)\nxgb_cvs = (cross_val_score(estimator = xgb, X = X_train, y = y_train, cv = 10).mean())\nprint(classification_report(y_test, xgb_pred))","2932da97":"gb= GradientBoostingClassifier()\ngb.fit(X_train, y_train)\ngb_pred = gb.predict(X_test)\nprint(confusion_matrix(y_test, gb_pred ))\nprint(round(accuracy_score(y_test, gb_pred),2)*100)\ngb_cvs = (cross_val_score(gb, X_train, y_train, cv=k_fold, n_jobs=1, scoring = 'accuracy').mean())\nprint(classification_report(y_test, gb_pred))","69e15129":"models = pd.DataFrame({\n                'Models': ['Random Forest Classifier', 'Decision Tree Classifier', 'Support Vector Machine',\n                           'K-Near Neighbors', 'Logistic Model', 'Gausian NB', 'XGBoost', 'Gradient Boosting'],\n                'Score':  [rf_cvs, dtree_cvs, svc_cvs, knn_cvs, lr_cvs, gnb_cvs, xgb_cvs, gb_cvs]})\n\nmodels.sort_values(by='Score', ascending=False)","5011aced":"#ROC AUC graphs for the top 3 models with the best precision\/recall scores\n\nfig, (ax, ax1, ax2) = plt.subplots(nrows = 1, ncols = 3, figsize = (21,9))\n#Gradient Boost\nprobs = gb.predict_proba(X_test)\npreds = probs[:,1]\nfpr_gb, tpr_gb, threshold_gb = metrics.roc_curve(y_test, preds)\nroc_auc_gb = metrics.auc(fpr_gb, tpr_gb)\n\nax.plot(fpr_gb, tpr_gb, 'b', label = 'AUC = %0.2f' % roc_auc_gb)\nax.plot([0, 1], [0, 1],'r--')\nax.set_title('Gradient Boost ',fontsize=24)\nax.set_ylabel('True Positive Rate',fontsize=20)\nax.set_xlabel('False Positive Rate',fontsize=20)\nax.legend(loc = 'lower right', prop={'size': 16})\n\n#Random Forest\nprobs = lr.predict_proba(X_test)\npreds = probs[:,1]\nfpr_rf, tpr_rf, threshold_rf = metrics.roc_curve(y_test, preds)\nroc_auc_rf = metrics.auc(fpr_rf, tpr_rf)\n\nax1.plot(fpr_rf, tpr_rf, 'b', label = 'AUC = %0.2f' % roc_auc_rf)\nax1.plot([0, 1], [0, 1],'r--')\nax1.set_title('Random Forest ',fontsize=24)\nax1.set_ylabel('True Positive Rate',fontsize=20)\nax1.set_xlabel('False Positive Rate',fontsize=20)\nax1.legend(loc = 'lower right', prop={'size': 16})\n\n#XG Boost\nprobs = xgb.predict_proba(X_test)\npreds = probs[:,1]\nfpr_xgb, tpr_xgb, threshold_xgb = metrics.roc_curve(y_test, preds)\nroc_auc_xgb = metrics.auc(fpr_xgb, tpr_xgb)\n\nax2.plot(fpr_xgb, tpr_xgb, 'b', label = 'AUC = %0.2f' % roc_auc_xgb)\nax2.plot([0, 1], [0, 1],'r--')\nax2.set_title('XGBoost',fontsize=24)\nax2.set_ylabel('True Positive Rate',fontsize=20)\nax2.set_xlabel('False Positive Rate',fontsize=20)\nax2.legend(loc = 'lower right', prop={'size': 16})\n\nplt.subplots_adjust(wspace=1)","d66e0b48":"## 3) Data Cleaning and Feature Engineering\nThe data is only appears clean, but after examining the categorical variables I found that many of them had unknown values. It's hard to say what to do since many of the variables didn't have a clear value to replace the unknown value to. For now, I will examine the variables as they are while changing the target variable into a quantitative one. ","71bc845a":"## 2) Load Data","91a16b3e":"rf_parameters = {'n_estimators':range(10,300,10),'criterion':('gini', 'entropy'),'max_features':('auto','sqrt','log2')}\ngs_rf = GridSearchCV(rf,rf_parameters,scoring='roc_auc',cv=10)\ngs_rf.fit(X_train,y_train)\n\nprint(gs_rf.best_score_)\nprint(gs_rf.best_estimator_)","c4f51e25":"From the initial heatmap, there doesn't appear to be a strong correlation between a term deposit subscription and our quantitative variables. Duration and previous have the strongest correlations, but we will not keep duration in mind because of the concern from the dataset provider.","b9eca9ef":"# Bank Marketing","d4f4b8d4":"gb_parameters = {#'nthread':[3,4], #when use hyperthread, xgboost may become slower\n               \"criterion\": [\"friedman_mse\",  \"mae\"],\n              \"loss\":[\"deviance\",\"exponential\"],\n              \"max_features\":[\"log2\",\"sqrt\"],\n              'learning_rate': [0.01,0.05,0.1,1,0.5], #so called `eta` value\n              'max_depth': [3,4,5],\n              'min_samples_leaf': [4,5,6],\n\n              'subsample': [0.6,0.7,0.8],\n              'n_estimators': [5,10,15,20],#number of trees, change it to 1000 for better results\n              'scoring':'roc_auc'\n              }\n\ngs_gb = GridSearchCV(rf,rf_parameters,scoring='roc_auc',cv=10)\ngs_gb.fit(X_train,y_train)\n\nprint(gs_gb.best_score_)\nprint(gs_gb.best_estimator_)","682fe13c":"#### Classification models used:\n- Random Forest Classifier\n- Decision Tree Classifier\n- Support Vector Classifier\n- K-Nearest Neighbors\n- Logistic Regression Model\n- Gausian Naive Bayes\n- XGBoost\n- Gradient Boosting\n","f76bb445":"## 4) Exploratory Data Analysis\n","11d3ae65":"## 1) Load relevant packages","eb477f23":"I'm using the same graph as above, but I wanted to zoom into the number of contacts 1-7. Clearly, the chances of the client subscribing to a deposit increases as you have more previous contacts.","45fe64fc":"## 5) Data Modeling","59ff6ec0":"### Hyperparameter Optimization (Too expensive)","e927bbe6":"The data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be ('yes') or not ('no') subscribed. The csv comes with all examples (41188) and 20 inputs, ordered by date (from May 2008 to November 2010), very close to the data analyzed in (Moro et al., 2014). The classification goal is to predict if the client will subscribe (yes\/no) a term deposit (variable y).\n\nAttribute Information:\n\nInput variables:\n#### Bank client data\n1 - age (numeric)\n2 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','unknown')\n3 - marital : marital status (categorical: 'divorced','married','single','unknown'; note: 'divorced' means divorced or widowed)\n4 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','unknown')\n5 - default: has credit in default? (categorical: 'no','yes','unknown')\n6 - housing: has housing loan? (categorical: 'no','yes','unknown')\n7 - loan: has personal loan? (categorical: 'no','yes','unknown')\n#### Related with the last contact of the current campaign:\n8 - contact: contact communication type (categorical: 'cellular','telephone')\n9 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')\n10 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri')\n11 - duration: last contact duration, in seconds (numeric).\n#### Other attributes\n12 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n13 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)\n14 - previous: number of contacts performed before this campaign and for this client (numeric)\n15 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success')\n#### Social and economic context attributes\n16 - emp.var.rate: employment variation rate - quarterly indicator (numeric)\n17 - cons.price.idx: consumer price index - monthly indicator (numeric)\n18 - cons.conf.idx: consumer confidence index - monthly indicator (numeric)\n19 - euribor3m: euribor 3 month rate - daily indicator (numeric)\n20 - nr.employed: number of employees - quarterly indicator (numeric)\n\nOutput variable:\n21 - y - has the client subscribed a term deposit? (binary: 'yes','no')"}}