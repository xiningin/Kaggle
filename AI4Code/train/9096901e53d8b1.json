{"cell_type":{"eaaedf50":"code","7211b5c9":"code","cb962913":"code","2bd331c7":"code","531aced7":"code","b41580a3":"code","1ee55785":"code","0adcbd5c":"code","a555c42b":"code","eecd3394":"code","326b7dc8":"code","b99d92f0":"code","9eac1a6a":"code","40da0b1b":"code","0b76ea4e":"code","cb966739":"code","c1ef8213":"markdown","cead85d6":"markdown","730336da":"markdown","923d70b0":"markdown","fd2605f1":"markdown","e0c5133c":"markdown"},"source":{"eaaedf50":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom keras.utils.np_utils import to_categorical\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7211b5c9":"train, test = pd.read_csv('..\/input\/digit-recognizer\/train.csv'), \\\n              pd.read_csv('..\/input\/digit-recognizer\/test.csv')\n\ntrain.head()","cb962913":"y_train = train['label']\nx_train, x_test = train.iloc[:,1:], test","2bd331c7":"sns.countplot(y_train)\nplt.show()","531aced7":"x_train, x_test = x_train \/ 255., x_test \/ 255. \nx_train, x_test = x_train.values.reshape(-1,28,28,1),\\\n                  x_test.values.reshape(-1,28,28,1)","b41580a3":"y_train = to_categorical(y_train, num_classes=10)","1ee55785":"for i in range(10):\n    plt.imshow(x_train[i].reshape(28, 28), cmap='gray')\n    plt.title('Label: ' + str(np.argmax(y_train[i])))\n    plt.show()","0adcbd5c":"# ANN\n\"\"\"\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dropout(.2),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\"\"\"\n\n# CNN\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(filters=32, kernel_size=(5,5), \\\n                           activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=64, kernel_size=(3,3), \\\n                           activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Conv2D(filters=128, kernel_size=(3,3), \\\n                           activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.Dropout(.4),\n    tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(.4),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nmodel.summary()","a555c42b":"# ANN\n\"\"\"\nnum_epochs = 5\nhistory = model.fit(x_train, y_train, \n                    epochs=num_epochs, validation_split=0.3)\n\"\"\"\n\n# CNN\nnum_epochs = 50\nhistory = model.fit(x_train, y_train, \n                    epochs=num_epochs,\n                    callbacks=[\n                        tf.keras.callbacks.EarlyStopping(monitor='loss', patience=6), \n                        tf.keras.callbacks.ReduceLROnPlateau(monitor='loss', patience=4)\n                    ],\n                    validation_split=0.2,\n                    verbose=0)","eecd3394":"scores = model.evaluate(x_train, y_train, batch_size=32)\nprint(f'Loss: {scores[0]} Accuracy: {scores[1]}')","326b7dc8":"loss_train = history.history['loss']\nloss_validation = history.history['val_loss']\nepochs = range(1, len(history.history['loss']) + 1)\nplt.plot(epochs, loss_train, 'g', label='Training')\nplt.plot(epochs, loss_validation, 'b', label='Validation')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Loss')\nplt.legend()\nplt.show()","b99d92f0":"acc_train = history.history['accuracy']\nacc_validation = history.history['val_accuracy']\nepochs = range(1, len(history.history['accuracy']) + 1)\nplt.plot(epochs, acc_train, 'g', label='Training')\nplt.plot(epochs, acc_validation, 'b', label='Validation')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy')\nplt.legend()\nplt.show()","9eac1a6a":"y_predicted = model.predict(x_test)\ny_test_labels = np.argmax(y_predicted, axis=1)","40da0b1b":"x_test_ids = [(i + 1) for i in range(x_test.shape[0])]","0b76ea4e":"for i in range(10):\n    plt.imshow(x_test[i].reshape(28, 28), cmap='gray')\n    plt.title('Predicted: ' + str(y_test_labels[i]))\n    plt.show()","cb966739":"results = pd.DataFrame({\n    'ImageId': x_test_ids,\n    'Label': y_test_labels\n})\nresults.to_csv('submission.csv', index=False)","c1ef8213":"## Dependencies\n\n  - **NumPy**\n  - **Pandas**\n  - **SeaBorn**\n  - **Matplotlib**\n  - **Scikit-Learn**\n  - **Keras**\n  - **TensorFlow**","cead85d6":"## Model Building\n\nConvolutional Neural Network\n\n  - Spatial Convolutional Kernel for 2D Images with 5x5 2D convolution window.\n  - Downsampling Data using Max Pooling Operations.\n  - Spatial Convolutional Kernel for 2D Images with 3x3 2D convolution window.\n  - Spatial Convolutional Kernel for 2D Images with 3x3 2D convolution window.\n  - Dropout.\n  - Downsampling Data using Max Pooling Operations.\n  - Flatten Input for next Layer.\n  - Hidden Layer with 256-nodes.\n  - Dropout.\n  - Output Layer with 10-nodes.","730336da":"## MNIST Digit Recognizer\n\n**Objective**: Take an image of a handwritten single digit, and determine what that digit is.\n\n**Metrics**: The categorization accuracy of your predictions.","923d70b0":"## Data Pre-processing\n\n  - **Data Exploration**\n  - **Feature Normalization**","fd2605f1":"## Submission Dataset\n\nPredicting Digits and Data Preparation.","e0c5133c":"## Model Evaluation\n\nAnalysis Loss and Accuracy with Evolution."}}