{"cell_type":{"88602060":"code","5bbece71":"code","fa8babd3":"code","c1a385d7":"code","a81e6115":"code","8af57faa":"code","3ad2c524":"code","540dbeed":"code","736aa0cf":"code","df808eb9":"code","4d661ecf":"code","afd681f7":"code","5f079559":"code","4edd5445":"code","fd5e70a4":"code","c8020c61":"code","cb30e16c":"code","c94b9cb5":"code","e36e5da7":"code","135dca62":"code","809146ba":"code","a5723483":"code","2882ee7c":"code","f22f8bcc":"code","809464e2":"code","ae84f3cd":"code","a05dbaa4":"code","365b2b00":"markdown","5beca8dc":"markdown","0d242291":"markdown","e56b8e96":"markdown","7e21c469":"markdown","b0c61d7c":"markdown","afb243a2":"markdown","008a1804":"markdown","69783833":"markdown","21c3b3a1":"markdown","b8ed93d4":"markdown"},"source":{"88602060":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5bbece71":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","fa8babd3":"df.head()","c1a385d7":"df.info()","a81e6115":"df.isna().sum()","8af57faa":"df.shape","3ad2c524":"df.describe()","540dbeed":"df.hist(figsize=(12,12), grid=False);","736aa0cf":"sns.pairplot(df.loc[:, ['age','trestbps','chol','thalach','oldpeak', 'target']], hue='target')","df808eb9":"sns.countplot(data=df, x='target');","4d661ecf":"corr = df.corr()\nplt.figure(figsize=(12,8))\nsns.heatmap(corr, annot=True, vmax=1, vmin=-1, cmap='viridis_r');","afd681f7":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","5f079559":"X = np.array(df.iloc[:, : -1])\ny = np.array(df.iloc[:, -1])","4edd5445":"# # Normalizando os dados\n# scaler = StandardScaler()\n# X = scaler.fit_transform(X)\n\n# Normalizando os dados\n# scaler = MinMaxScaler()\n# X = scaler.fit_transform(X)","fd5e70a4":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","c8020c61":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier","cb30e16c":"# Definindo a fun\u00e7\u00e3o para avaliar os modelos\ndef model_evaluation(test, prediction):\n    print('Confusion Matrix\\n', metrics.confusion_matrix(test, prediction)) \n    print('\\nAccuracy\\n', metrics.accuracy_score(test, prediction)) \n    print('\\nClass Balanced Accuracy\\n', metrics.balanced_accuracy_score(test, prediction)) \n    print('\\nPrecision\\n', metrics.precision_score(test, prediction)) \n    print('\\nRecall\\n', metrics.recall_score(test, prediction)) \n    print('\\nF1\\n', metrics.f1_score(test, prediction))\n    print('\\nClassification Report\\n', metrics.classification_report(test, prediction))","c94b9cb5":"# Iniciando o modelo\ntree = DecisionTreeClassifier(random_state=0)\n\n# Treinando o modelo\ntree.fit(X_train, y_train)\n\n# Realizando previs\u00f5es\ny_pred = tree.predict(X_test)","e36e5da7":"model_evaluation(y_test, y_pred)","135dca62":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(random_state=1)\nrfc.fit(X_train, y_train)\ny_pred = rfc.predict(X_test)","809146ba":"model_evaluation(y_test, y_pred)","a5723483":"# Iniciando o modelo\nlr = LogisticRegression(penalty='l2',solver='liblinear',random_state=0)\n\n# Treinando o modelo\nlr.fit(X_train, y_train)\n\n# Realizando previs\u00f5es\ny_pred = lr.predict(X_test)","2882ee7c":"model_evaluation(y_test, y_pred)","f22f8bcc":"# Iniciando o modelo\nsvc = SVC(\n    kernel='linear',\n    probability=True,\n    random_state=1\n)\n\n# Treinando o modelo\nsvc.fit(X_train, y_train)\n\n# Realizando as predi\u00e7\u00f5es\ny_pred = svc.predict(X_test)","809464e2":"model_evaluation(y_test, y_pred)","ae84f3cd":"from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\n\nrf = RandomForestClassifier(max_depth=2, random_state=0)\n\nada = AdaBoostClassifier(\n    base_estimator=rf,\n    n_estimators=100,\n    random_state=0,\n)\n\nada.fit(X_train, y_train)\n\ny_pred = ada.predict(X_test)","a05dbaa4":"model_evaluation(y_test, y_pred)","365b2b00":"* age\n* sex\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by flourosopy\n* thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","5beca8dc":"## \u00c1rvore de Decis\u00e3o","0d242291":"## Regress\u00e3o Log\u00edstica","e56b8e96":"https:\/\/www.kaggle.com\/ronitf\/heart-disease-uci","7e21c469":"## Avaliando o modelo SVC","b0c61d7c":"# Treinando os modelos","afb243a2":"## Avaliando o modelo Random Forest","008a1804":"## AdaBoost","69783833":"## Random Forest","21c3b3a1":"## SVC","b8ed93d4":"## Avaliando o Modelo de \u00c1rvore de Decis\u00e3o"}}