{"cell_type":{"9a70fa8a":"code","981cf7ed":"code","af8f5ad7":"code","4ee9aa78":"code","71549fa7":"code","aebcae00":"code","67ef006b":"code","14c3a445":"code","14d8afcc":"code","ee00bf70":"code","7fef3a77":"code","9dc4d615":"code","74c2923c":"code","0194465c":"code","ff8abc96":"code","21f15408":"code","7e00dc63":"code","11539973":"code","3512fdf6":"code","90a94c16":"code","652a9419":"code","e470ced7":"code","c03f669a":"code","a07f4aa7":"code","0402e08d":"code","4546c74d":"code","e6a870de":"code","54ac86df":"code","dddcb40b":"code","767e8461":"code","9a5e7f44":"code","9382fb83":"code","8d6c5cc0":"code","5da87aea":"code","3e651529":"code","124cc06d":"code","a1aa5ce5":"markdown","b6516aad":"markdown","38b30b5f":"markdown","ae5078ca":"markdown","c7f4be43":"markdown","f1653207":"markdown","eb177df6":"markdown","c83b08c4":"markdown","c7717edc":"markdown","239aa3da":"markdown","456d9793":"markdown","2adba4a7":"markdown","4b40ab5d":"markdown","433519be":"markdown"},"source":{"9a70fa8a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings \nwarnings.filterwarnings('ignore')","981cf7ed":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head()","af8f5ad7":"df['stroke'].value_counts()","4ee9aa78":"df['work_type'].value_counts().plot(kind='bar', color='cyan')","71549fa7":"labels = ['Private', 'Self-employed', 'children', 'Govt_job', 'Never_worked']\n\n\nfig1, ax1 = plt.subplots(figsize=(10, 5))\ncolors = ['green', 'brown', 'yellow', 'maroon', 'blue']\nax1.pie(df['work_type'].value_counts(),  labels=labels, autopct='%1.1f%%',shadow=True, startangle=30, colors=colors)\n#Theme\nax1.axis('equal')\nplt.show()","aebcae00":"df['Residence_type'].value_counts().plot(kind='bar', color=['grey', 'orange'])\nplt.xlabel('Resedence')\nplt.ylabel('Count')\n\n#Set the style \nplt.style.use('seaborn-whitegrid')\n","67ef006b":"labels = ['Private', 'Self-employed', 'children', 'Govt_job', 'Never_worked']\n\n\nfig1, ax1 = plt.subplots(figsize=(10, 5))\ncolors = ['green', 'brown', 'yellow', 'maroon', 'blue']\nax1.pie(df['work_type'].value_counts(),  labels=labels, autopct='%1.1f%%',shadow=True, startangle=30, colors=colors)\n#Theme\nax1.axis('equal')\nplt.show()","14c3a445":"plt.figure(figsize=(30, 10))\ndf['age'].value_counts().plot(kind='bar', color='chocolate')\nplt.xlabel('Age', fontsize=40)\nplt.ylabel('Counts', fontsize=50)","14d8afcc":"df['smoking_status'].value_counts()\n","ee00bf70":"labels = ['never smoked', 'Unknown', 'formerly smoked', 'smokes']\n\n\nfig1, ax1 = plt.subplots(figsize=(10, 10))\ncolors = ['lightblue', 'salmon', 'gold', 'lightgreen']\nax1.pie(df['smoking_status'].value_counts(),  labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=30, colors=colors)\n#Theme\nax1.axis('equal')\nplt.show()","7fef3a77":"df.columns","9dc4d615":"## OO method from scratch\nfig, ax = plt.subplots(figsize=(10,6))\n## plot the data\nscatter = ax.scatter(x= df[\"age\"],\n                    y=df[\"avg_glucose_level\"],\n                    c=df[\"stroke\"], cmap='YlGn');\n# Customize the plot\nax.set(\n      xlabel = \"Age\",\n     ylabel =\"Gloucose level\");\n# Addd a legend\nax.legend(*scatter.legend_elements(),title=\"Stroke\");\n\n# Add a horizontal line\nax.axhline(df[\"avg_glucose_level\"].mean(),linestyle='--');\n","74c2923c":"plt.figure(figsize=(10, 5))\nsns.barplot(data=df, x='age', y='gender')\n","0194465c":"plt.figure(figsize=(30,20))\nsns.barplot(data=df, x='age', y='stroke')\nplt.xticks(rotation=90)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Stroke', fontsize=20)","ff8abc96":"plt.figure(figsize=(30,10))\nsns.boxplot(data=df, x='age', y='hypertension')\nplt.xticks(rotation=90)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Hypertension', fontsize=20)","21f15408":"df.columns","7e00dc63":"plt.figure(figsize=(20,10))\nsns.violinplot(data=df, x='age', y='heart_disease')\nplt.xticks(rotation=90)\nplt.xlabel('Age', fontsize=20)\nplt.ylabel('Hear Disease', fontsize=20)","11539973":"df.isna().sum()","3512fdf6":"df.dtypes","90a94c16":"def preprocess_image(df):\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                df[label] = content.fillna(content.median())\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label] = pd.Categorical(content).codes+1\n    return df","652a9419":"df = preprocess_image(df=df)\ndf.head()","e470ced7":"# Check again\ndf.isna().sum()","c03f669a":"df.dtypes","a07f4aa7":"X = df.drop('stroke', axis=1)\ny = df['stroke']\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","0402e08d":"from sklearn.metrics import confusion_matrix, classification_report,accuracy_score, precision_score, recall_score, f1_score","4546c74d":"from sklearn.ensemble import RandomForestClassifier\nnp.random.seed(42)\n\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\ny_preds = clf.predict(X_test)\nclf_score = clf.score(X_test, y_test)*100\nprint(f\"Score : {clf.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","e6a870de":"from sklearn.ensemble import GradientBoostingClassifier\n\nnp.random.seed(42)\n\nclf2 = GradientBoostingClassifier()\nclf2.fit(X_train, y_train)\ny_preds = clf2.predict(X_test)\nclf2_score = clf2.score(X_test, y_test)*100\n\nprint(f\"Score : {clf2.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf2, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","54ac86df":"from sklearn.ensemble import AdaBoostClassifier\n\nnp.random.seed(42)\nclf3 = AdaBoostClassifier()\nclf3.fit(X_train, y_train)\ny_preds = clf3.predict(X_test)\nclf3_score = clf3.score(X_test, y_test)*100\nprint(f\"Score : {clf3.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf3, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","dddcb40b":"from sklearn.linear_model import LogisticRegression\nnp.random.seed(42)\nclf4 = LogisticRegression()\nclf4.fit(X_train, y_train)\ny_preds = clf4.predict(X_test)\nclf4_score = clf4.score(X_test, y_test)*100\n\nprint(f\"Score : {clf4.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf4, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","767e8461":"from sklearn.tree import DecisionTreeClassifier\n\nnp.random.seed(42)\nclf5= DecisionTreeClassifier()\nclf5.fit(X_train, y_train)\n\ny_preds = clf5.predict(X_test)\nclf5_score = clf5.score(X_test, y_test)*100\nprint(f\"Score : {clf5.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf5, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","9a5e7f44":"from sklearn.svm import LinearSVC\nnp.random.seed(42)\nclf6 = LinearSVC()\nclf6.fit(X_train, y_train)\ny_preds = clf6.predict(X_test)\n\nclf6_score = clf6.score(X_test, y_test)*100\nprint(f\"Score : {clf6.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf6, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","9382fb83":"from sklearn.neighbors import KNeighborsClassifier\nnp.random.seed(42)\nclf7 = KNeighborsClassifier()\nclf7.fit(X_train, y_train)\ny_preds = clf7.predict(X_test)\n\nclf7_score = clf7.score(X_test, y_test)*100\nprint(f\"Score : {clf7.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf7, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","8d6c5cc0":"from xgboost import XGBClassifier\nnp.random.seed(42)\nclf8 = XGBClassifier()\nclf8.fit(X_train, y_train)\n\ny_preds = clf8.predict(X_test)\nclf8_score = clf8.score(X_test, y_test)*100\n\nprint(f\"Score : {clf8.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf8, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","5da87aea":"from catboost import CatBoostClassifier\nnp.random.seed(42)\nclf9 = CatBoostClassifier(verbose=0)\nclf9.fit(X_train, y_train)\ny_preds = clf9.predict(X_test)\n\nclf9_score = clf9.score(X_test, y_test)*100\nprint(f\"Score : {clf9.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf9, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","3e651529":"from lightgbm import LGBMClassifier\nnp.random.seed(42)\nclf10 = LGBMClassifier()\nclf10.fit(X_train, y_train)\ny_preds = clf10.predict(X_test)\n\nclf10_score = clf10.score(X_test, y_test)*100\nprint(f\"Score : {clf10.score(X_test, y_test)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(clf10, X, y, cv=5))}\")\nprint(\"*\"* 50)\nprint(f\"Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\"Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\"Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\"F1_score : {f1_score(y_test, y_preds)}\")\nprint(\"*\"*50)\nsns.heatmap(confusion_matrix(y_test, y_preds), annot=True)\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')\nplt.title('Confusion Matrix')\nprint(\"Classification Report\")\nprint(f\"{classification_report(y_test, y_preds)}\")","124cc06d":"scores = pd.DataFrame({\n    \"Model\" : ['KNN', 'LGBM', 'CatBoost','XGBoost', 'RandomForest',\n               'Decision Tree', 'LogisticRegression','LinearSVC', 'GradientBoost', 'AdaBoost'],\n    \n    'Score': [\n          95.12,94.50,94.73,94.38,94.99,\n        90.76,95.06,77.47,94.75,94.99]\n})\n\nprint('-----Cross-validation Accuracy Scores-----')\nscores.sort_values(by='Score', ascending=False)","a1aa5ce5":"### RandomForestClassifier","b6516aad":"# split the dataset\n","38b30b5f":"## GradientBoostClassifier","ae5078ca":"### Catboost","c7f4be43":"## Datacleaning","f1653207":"### AdaBoostClassifier","eb177df6":"### LGBMClassifier","c83b08c4":"## LogisticRegression","c7717edc":"### Import required libraries","239aa3da":"### LinearSVC","456d9793":"### XGBoost","2adba4a7":"### KNN","4b40ab5d":"# Modelling","433519be":"# Decision Tree"}}