{"cell_type":{"e68b25c5":"code","ed24af56":"code","c2aeb10b":"code","16292e05":"code","7870cbf5":"code","3c609fa6":"code","824527ea":"code","ce8e871b":"markdown","170c984a":"markdown","c60cb54b":"markdown","2c02b379":"markdown","c437bdaa":"markdown"},"source":{"e68b25c5":"!pip install --upgrade scikit-learn scikit-learn-intelex --progress-bar off >> pip.log","ed24af56":"import pandas as pd\nimport numpy as np\n\nfrom sklearnex import patch_sklearn\npatch_sklearn()","c2aeb10b":"train_df = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nss = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\n\nX = train_df.drop(['target', 'id'], axis = 1).values\ny = train_df['target'].values\nX_test = test_df.drop('id', axis = 1).values\n\ndel train_df, test_df","16292e05":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import QuantileTransformer, StandardScaler\nfrom sklearn.decomposition import FastICA\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.svm import LinearSVC\nfrom sklearn.kernel_approximation import Nystroem\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import StackingClassifier\n\nlogistic_pipeline = make_pipeline(FastICA(),\n                                  LogisticRegression(C = 10, max_iter = 1_000))\n\nnaivebayes_pipeline = make_pipeline(QuantileTransformer(output_distribution = 'normal'),\n                                    GaussianNB())\n\nsvm_pipeline = make_pipeline(StandardScaler(),\n                             LinearSVC(C = 0.001775, max_iter = 100))\n\nrbf_svm_pipeline = make_pipeline(StandardScaler(),\n                                 Nystroem(gamma=0.001, n_components=500),\n                                 LinearSVC(C=0.005655653341918836, max_iter=100))\n\nestimators = [\n    ('logistic', logistic_pipeline),\n    ('naivebayes', naivebayes_pipeline),\n    ('linear_svm', svm_pipeline),\n    ('rbf_svm', rbf_svm_pipeline)\n]\n\nmeta_clf = StackingClassifier(\n    estimators = estimators,\n    final_estimator = LogisticRegressionCV(Cs = 20),\n    cv = 15\n)","7870cbf5":"# Visualize our pipeline\n# You can click the resulting diagrams to see more details\nfrom sklearn import set_config\nset_config(display = 'diagram')\n\nmeta_clf","3c609fa6":"import warnings\nfrom sklearn.exceptions import ConvergenceWarning\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\", category=ConvergenceWarning)\n    \n    # Suppress convergence warnings to not pollute the output\n    simple_submit = meta_clf.fit(X, y).predict_proba(X_test)[:, 1]\n\n# Save submissions\nss['target'] = simple_submit\nss.to_csv('submission.csv', index = False)","824527ea":"# Out of curiosity, let's display the weights assigned to each base prediction\nmeta_clf.final_estimator_.coef_","ce8e871b":"# Read data","170c984a":"# Closing\n\nWell, that was short and quick. I hope you can take away something from it!\n\nFeel free to upvote or fork if you think this notebook is useful or you're interested in modifying it.\n\nKeep learning and happy data sciencing!","c60cb54b":"# Train model and predict to submit","2c02b379":"# Introduction\n\nThis notebook will push the use of scikit-learn to the maxx.<sup><font color='blue'>[citation needed]<\/font><\/sup>\n\n- stacking\/blending: the popular thing to do nowadays, apparently. Fitting a meta-estimator on top of base estimators using prediction on holdout sets.\n- pipelining: implemented in base models, so different base models can use different preprocessing scheme best suited for them individually.\n- simplicity: all codes will be from scikit-learn, our beloved popular-for-starters Python machine learning library. It will be concise but nonetheless powerful and does complex things under the hood.\n\nTo boost scikit-learn's speed, we will use the [scikit-learn-intelex](https:\/\/github.com\/intel\/scikit-learn-intelex) package, although it has limited coverage it's still worth including here.","c437bdaa":"# Build model"}}