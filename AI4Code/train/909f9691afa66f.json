{"cell_type":{"8259070d":"code","e6be4d6a":"code","28b6b341":"code","85b62255":"code","0bf163de":"code","82028021":"code","d396d21a":"code","9d195ce3":"code","443aa215":"code","8fb1ba06":"code","fb80acce":"code","3fca5c42":"code","a3eb95c6":"code","3de50695":"code","263e9fba":"code","b9ae3dff":"code","6ea8f463":"code","fa197224":"code","b94ec683":"code","b8ac4711":"markdown","826ffd29":"markdown","0c7a1fb7":"markdown","04ff2adb":"markdown","59c8cf6f":"markdown","d721621f":"markdown","e68f1eed":"markdown","f0009225":"markdown","79840dc5":"markdown","59fd6b65":"markdown","6359abce":"markdown"},"source":{"8259070d":"import os\nfrom pathlib import Path\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import Adam\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nPATH=Path(\"..\/input\/\")\nprint(os.listdir(\"..\/input\/\"))","e6be4d6a":"train=pd.read_csv(PATH\/'train.csv')\ntest=pd.read_csv(PATH\/'test.csv')\ntrain.shape,test.shape","28b6b341":"x=train.drop(\"label\",axis=1)\ny=np.array(train['label'])\nx.shape,y.shape","85b62255":"from sklearn.model_selection import train_test_split","0bf163de":"x_train, x_valid, y_train, y_valid = train_test_split(x,y,test_size=0.2,random_state=123)\nprint(x_train.shape,x_valid.shape)\nx_train = x_train.values.reshape(33600, 784)\nx_valid = x_valid.values.reshape(8400, 784)\nx_train = x_train.astype('float32')\nx_valid = x_valid.astype('float32')\nx_train \/= 255\nx_valid \/= 255\nprint(x_train.shape[0], 'train samples')\nprint(x_valid.shape[0], 'valid samples')","82028021":"y_train.shape,y_train[:2]","d396d21a":"num_classes=10\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_valid = keras.utils.to_categorical(y_valid, num_classes)\nprint(y_train.shape,y_valid.shape)","9d195ce3":"model = Sequential()\nmodel.add(Dense(256, activation='relu', input_shape=(784,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.summary()","443aa215":"model.compile(loss='categorical_crossentropy',\n              optimizer=Adam(lr=0.01),\n              metrics=['accuracy'])","8fb1ba06":"epochs=5\nbatch_size=64\nhistory = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_data=(x_valid, y_valid))","fb80acce":"score = model.evaluate(x_valid, y_valid, verbose=0)\nprint('Valid loss:', score[0])\nprint('Valid accuracy:', score[1])","3fca5c42":"#from pathlib import Path\n#import simplejson\n#serialize model to JSON\n#filepath_json=Path('..\/input\/')\n#model_json = model.to_json()\n#with open(filepath_json\/\"mnist_keras.json\", \"w\") as json_file:\n #   json_file.write(simplejson.dumps(simplejson.loads(model_json), indent=4))","a3eb95c6":"model.save_weights(\"mnist_keras.h5\")","3de50695":"test = pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)","263e9fba":"x_test=test.loc[:,test.columns != \"label\"]\nx_test = x_test.astype('float32')\nx_test \/= 255\nprint(x_test.shape[0], 'test samples')","b9ae3dff":"score = model.predict(x_test, verbose=0)\nprint(score.shape)","6ea8f463":"np.argmax(score,axis=1)[:4],np.argmax(score,axis=1).shape","fa197224":"predictions=np.argmax(score,axis=1)\nprint(\"Prediction shape\",predictions.shape)","b94ec683":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"my_submissions_keras.csv\", index=False, header=True)","b8ac4711":"# Imports","826ffd29":"# Preprocessing","0c7a1fb7":"# Take a look","04ff2adb":"# Load Data","59c8cf6f":"# Create Submission File","d721621f":"# Extract Input and Target Variable","e68f1eed":"# Train Test Split","f0009225":"# Generate Predictions","79840dc5":"# Load Test Data","59fd6b65":"# Convert class vectors to binary class matrices","6359abce":"# Model Architecture"}}