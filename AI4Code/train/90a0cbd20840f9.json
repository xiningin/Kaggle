{"cell_type":{"55eee652":"code","4313bd5f":"code","70f59da0":"code","ad1d605c":"code","1e9c8c40":"code","9d95a9ab":"code","f8cae316":"code","85a4d156":"code","154c9d50":"code","fbe62712":"code","b73659c1":"code","641f9387":"code","35aa472c":"code","6d636bde":"code","1ffc37c1":"code","1d0aa133":"markdown","11b129b4":"markdown"},"source":{"55eee652":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n%matplotlib inline","4313bd5f":"df = pd.read_csv('..\/input\/BlackFriday.csv')\ndf.sample(5, random_state=1984)","70f59da0":"features = [ 'Gender', 'Age', 'Occupation', 'City_Category',\n            'Stay_In_Current_City_Years', 'Marital_Status',\n            'Product_Category_1', 'Product_Category_2', 'Product_Category_3']\nprint(\"num_features: \", len(features))","ad1d605c":"fig, axs_tup = plt.subplots(3, 3, figsize=(20,10),\n                            gridspec_kw=dict(hspace=0.5))\nfor i in range(len(features)):\n    df[features[i]].value_counts().plot(kind='bar', title='Value counts of {}'.format(features[i]), ax=axs_tup[int(i\/3),i%3])\nplt.show()","1e9c8c40":"fig, axs_tup = plt.subplots(3, 3, figsize=(20,10),\n                            gridspec_kw=dict(hspace=0.5))\nfor i in range(len(features)):\n    sns.boxplot(y=\"Purchase\", x= features[i], data=df , ax=axs_tup[int(i\/3),i%3])\nplt.show()","9d95a9ab":"# How many null values are there?\ndf.isnull().sum() \/ df.isnull().count()","f8cae316":"df['Purchase'].plot(kind='hist', bins=40, alpha=0.7, grid=True, figsize=(14,4))\nplt.show()","85a4d156":"# We would like to use XGBoost, we aknowledge that as of May 2019 it doesn't support categoricals features natively as LighGBM","154c9d50":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split","fbe62712":"label_transformer = OrdinalEncoder()\nX_all = df[features].copy()\nX_all.loc[:,features] = label_transformer.fit_transform(df[features].fillna(-1))\nX_all.head()","b73659c1":"y_all = df['Purchase'].copy()","641f9387":"X_train, X_test, y_train, y_test = train_test_split(X_all, y_all, test_size=0.05)","35aa472c":"import xgboost as xgb","6d636bde":"bst = xgb.XGBRegressor(min_child_weight=100, n_estimators=10000)\\\n                    .fit(X_train, y_train, verbose=30, eval_set=[(X_test, y_test)], early_stopping_rounds=5)","1ffc37c1":"df_prediction = pd.DataFrame()\ndf_prediction['true'] = y_test\ndf_prediction['prediction'] = bst.predict(X_test)\n\ndf_prediction.plot(x='true', y='prediction', kind='scatter', lw=0, s=0.5, figsize=(10,5), c='indigo')\nplt.show()","1d0aa133":"## Train a model ","11b129b4":"## Feature Extraction"}}