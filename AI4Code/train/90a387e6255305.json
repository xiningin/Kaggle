{"cell_type":{"19712f42":"code","cce03fb7":"code","42ad1c29":"code","c0c4a00a":"code","3099dbc9":"code","759ffd62":"code","2beb8fa6":"code","b711118a":"code","1585cfff":"code","a45de7b5":"code","80632483":"code","0d68de5e":"code","6396e1cb":"code","1ca51d24":"code","c9f3df93":"code","31adc7dd":"markdown","7235ea02":"markdown","366ed5e1":"markdown","cca384b1":"markdown","41141bc7":"markdown","aa90ecbb":"markdown","d8c9bb8d":"markdown","68ff1324":"markdown","5778810f":"markdown","8bc548f5":"markdown","8886b1f7":"markdown","c9994808":"markdown","af100ae1":"markdown"},"source":{"19712f42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cce03fb7":"lista = list(range(100000))\narray = np.array(lista)\n\n# Representaci\u00f3n similar\nprint(lista[:10])\nprint(array)\n\n# Distintio tipo de objeto\nprint(type(lista))\nprint(type(array))\n\n# Los arrays solo pueden tener un tipo de elemento\nprint(array.dtype)","42ad1c29":"print(type(array.tolist()))\n\na = [2, 1.1, \"np\"]\n\nprint(a)\n\nb = np.array(a)\n\n# print(b)","c0c4a00a":"a = pd.Series(range(3), index=[\"a\", \"b\", \"c\"])\nb = pd.Series(np.array([1, 2, 3]), index=[\"a\", \"b\", \"c\"])\nc = pd.Series(range(3))\n\nprint(a)\nprint(b)\nprint(c)","3099dbc9":"df1 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\nprint(df1)\n\nprint(\"-------------------\")\n\ndf2 = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]}, index=[\"a\", \"b\", \"c\"])\nprint(df2)\n\nprint(\"-------------------\")\n\ndf = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")\nprint(df.head())","759ffd62":"print(type(df))\nprint(type(df[\"App\"]))","2beb8fa6":"# Tu codigo","b711118a":"print(df[\"App\"])\nprint(\"--------------------\")\nprint(df.App)\nprint(\"--------------------\")\nprint(df.iloc[:, 0])\nprint(\"--------------------\")\nprint(df.loc[:, \"App\"])","1585cfff":"print(df.Rating > 4)\nprint(\"--------------------\")\n\nbuenas_apps = df.loc[df.Rating > 4]\nprint(buenas_apps.App)\nprint(\"--------------------\")\n\njovenes = df.loc[df[\"Content Rating\"].isin([\"Teen\"])]\nprint(jovenes.App)\nprint(\"--------------------\")\n\nnulos = df.loc[df.Rating.isna()]\nprint(nulos.App)\n","a45de7b5":"# Tu codigo","80632483":"print(df.Rating.mean())\nprint(\"--------------------\")\nprint(df.count())\nprint(\"--------------------\")\nprint(df.max())","0d68de5e":"rating10 = df.Rating.apply(lambda x: x+5)\nprint(rating10)","6396e1cb":"print(df.groupby(\"Category\").Rating.mean())\nprint(df.groupby(\"Category\").Rating.agg([\"min\", \"max\", \"mean\"]))","1ca51d24":"# Tu codigo","c9f3df93":"df.Rating.loc[df.Rating.isna()]","31adc7dd":"Genera una tabla con solo las aplicaciones que tengan entre 1,000 y 20,000 reviews y sean para todos los publicos","7235ea02":"Se pueden realizar funciones sobre las columnas","366ed5e1":"Tambien podemos trabajar con agrupaciones de datos","cca384b1":"## Variables categoricas\n\nVariables no numericas del dataset que pueden aportarnos informaci\u00f3n.\nAlgunas de las cosas que se pueden hacer para extraer informaci\u00f3n son:\n\n- Encodings\n- Creaci\u00f3n un corpus\n- An\u00e1lisis del texto o frecuencias\n- Gr\u00e1ficos de densidad","41141bc7":"# Pandas\n\n## Dataframes y series","aa90ecbb":"## Manejo de las tablas\n\nTenemos distintas formas de acceder a los datos","d8c9bb8d":"- Saca la media de las reviews por cada categoria y sus minimos y maximos.\n- Haz lo mismo pero con los tipos de aplicaci\u00f3n. \n- De nuevo utiliza las categorias para saber maximos, media y mediana de los precios por cada una.","68ff1324":"## Valores perdidos\n\nEstos son un gran problema ya que los modelos de machine learning no pueden trabajar con columnas que contengan nulls.\nTambien pueden dificultar el trabajo con dichas columnas. \u00bfQue soluciones se te ocurren?","5778810f":"Se pueden realizar comprobaciones y aplicar mascaras","8bc548f5":"Tambien existen funciones para operar directamente con las series o los dataframes","8886b1f7":"\u00bfPuedes crear una nueva variable reviews use la otra tabla del dataset y mostrar los 10 primeros elementos de cada columna?","c9994808":"Un array de numpy siempre se puede tranformar en una lista. \u00bfAl contrafio funciona igual?","af100ae1":"# Numpy"}}