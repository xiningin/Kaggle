{"cell_type":{"b19e36aa":"code","85836cac":"code","cee641f2":"code","0851c0e6":"code","2af02e04":"code","bbc9d299":"code","d68bd4d5":"code","e852ef59":"code","1fdd5c7b":"code","76cf28b0":"code","172053ea":"code","a5d03e8b":"code","9ac65374":"code","0ec39ec0":"code","f7adab88":"code","e2ac6dff":"code","8ab6a8d8":"code","79def4df":"code","07a6e8a8":"code","9d4eb8b3":"code","fac646af":"code","23f6ebf3":"code","09842b4f":"code","3649ad8d":"code","c7aa1e19":"code","ce2bca7e":"code","0166dfec":"markdown","ac318a26":"markdown","a27353b0":"markdown","e41027d3":"markdown","9354c8b5":"markdown","7e840da0":"markdown","dc8d31b9":"markdown","e1c13e93":"markdown","7698bf7a":"markdown","d82282b7":"markdown","05838a1e":"markdown","3f7c516d":"markdown","eb4b180c":"markdown","cc411186":"markdown","21e672a2":"markdown","7b9f802c":"markdown","2941a1a2":"markdown","c56ee43e":"markdown","2a7fb552":"markdown","c2ec79f0":"markdown","14482052":"markdown","ef9ea9b6":"markdown","29a11cc4":"markdown","2793925d":"markdown","f5947137":"markdown","c75bdeb3":"markdown","ebe0aafd":"markdown","38d18f43":"markdown","15d87579":"markdown","3c0ee7e8":"markdown","1a111292":"markdown","5932b638":"markdown"},"source":{"b19e36aa":"def test_for_prime_for_loop(x):\n    if isinstance(x, int) and x > 0:\n        if x == 1: \n            is_prime = (True, f'it is divisible by 1 and {x}')\n        elif x == 2:\n            is_prime = (False, f'it is divisible by 1 and {x}')\n        else:\n            i = 2\n            for i in range(2, abs(x), 1):\n                if x % i == 0:\n                    is_prime = (False, f'it is divisible by 1 and {i}')\n                    break\n                else:\n                    is_prime = (True, f'it is divisible by 1 and {x}')\n        return is_prime\n    else:\n        return (False, 'non integer input or not greater than 0')","85836cac":"for test in range(1, 50, 1):\n    is_prime = test_for_prime_for_loop(test)[0]\n    if is_prime:\n        print(f'number: {test} is prime? {test_for_prime_for_loop(test)}')","cee641f2":"def test_for_prime_while_loop(x):\n    if isinstance(x, int) and x > 0:\n        if x == 1: \n            is_prime = (True, f'it is divisible by 1 and {x}')\n        elif x == 2:\n            is_prime = (False, f'it is divisible by 1 and {x}')\n        else:\n            i = 2\n            while i < x:\n                if x % i == 0:\n                    is_prime = (False, f'it is divisible by 1 and {i}')\n                    break\n                else:\n                    is_prime = (True, f'it is divisible by 1 and {x}')\n                i += 1\n        return is_prime\n    else:\n        return (False, 'non integer input or not greater than 0')","0851c0e6":"for test in range(1, 50, 1):\n    is_prime = test_for_prime_while_loop(test)[0]\n    if is_prime:\n        print(f'number: {test} is prime? {test_for_prime_while_loop(test)}')","2af02e04":"def is_cpf(cpf):\n    # checks if it is an string and then converts to integer\n    # if the conversion fails it means that the input is not numeric.\n    if isinstance(cpf, str):\n        try:\n            cpf = int(cpf)\n        except ValueError:\n            return (False, 'non valid input')\n        \n    # convert the result from above operation to a string with 11 characters and leading zeros. \n    if isinstance(cpf, int):\n        if len(str(cpf)) < 12 and int(cpf) > 0:\n            cpf = \"{:0>11d}\".format(cpf)\n            # checks if there is repetition in the input data\n            if (str(cpf) + str(cpf)).find(str(cpf), 1, -1)  != -1: \n                return (False, 'repeated numbers')\n\n            # extract cpf root for check digit calculation\n            root_cpf = cpf[0:9]\n            \n            # calculates the first check digit\n            digt_1 = 0\n            for c, i in zip(root_cpf, list(range(10, 1, -1))):\n                digt_1 = int(c) * i + digt_1\n            digt_1 = digt_1 * 10 % 11\n            if digt_1 == 10: digt_1 = 0\n            \n            # concatenates the first check digit to cpf root to calculate the second check digit\n            root_cpf = cpf[0:9] + str(digt_1)\n            \n            # calculates the second check digit\n            digt_2 = 0\n            for c, i in zip(root_cpf, list(range(11, 1, -1))):\n                digt_2 = int(c) * i + digt_2\n            digt_2 = digt_2 * 10 % 11\n            if digt_2 == 10: digt_2 = 0\n            \n            # concatenates first and second digits to compare to the digits informed in the input data.\n            digt = str(digt_1) + str(digt_2)\n            if(digt == cpf[9:11]):\n                return (True, 'valid check digits')\n            else:\n                return (False, 'invalid check digits')\n        else:\n            if int(cpf) < 0:\n                return (False, 'input is negatuve')\n            return (False, 'input greater than 11 digits')\n    else:\n        return (False, \"can't convert to integer\")","bbc9d299":"cpfs_to_test = ['04697398947', 4697398947, \n                1720217904, '017202179045',\n                4697398948, '44444444444', \n                '40469739894z', -4697398947, \n                ['04697398947', 1720217904],\n               True, False, 1, 0]\n\nfor cpf in cpfs_to_test:\n    print(f'is cpf\\t {cpf} \\tvalid? {is_cpf(cpf)}')","d68bd4d5":"from math import sqrt\n\nclass Rocket():\n     \n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n        \n    def move_rocket(self, x_increment=0, y_increment=1):\n        self.x += x_increment\n        self.y += y_increment\n        \n    def print_rocket(self):\n        print(self.x, self.y)","e852ef59":"roc1 = Rocket(x = 5, y = 10)","1fdd5c7b":"roc1.print_rocket()\nprint(f'x = {roc1.x} \\t y = {roc1.y}')","76cf28b0":"roc1.move_rocket(x_increment = 2, y_increment = 20)","172053ea":"roc1.print_rocket()\nprint(f'x = {roc1.x} \\t y = {roc1.y}')","a5d03e8b":"import re","9ac65374":"class Person():\n    \n    def __init__ (self, name, city, phone, email):\n        self.name = name\n        self.city = city\n        self.phone = phone\n        self.email = email\n    \n    # this method just prints a contact card\n    def print_contact_card(self):\n        print(f'Name:\\t {self.name}')\n        print(f'City:\\t {self.city}')\n        print(f'Phone:\\t {self.phone}')\n        print(f'e-mail:\\t {self.email}')\n    \n    # this method splits name and phone number in its components using some regular expressions.\n    def get_components(self):\n        self.first_name, self.last_name = self.name.split(' ')\n        self.phone_contry_code = re.findall('\\+\\d+', self.phone)[0]\n        self.ddd = re.findall('\\(\\d+\\)', self.phone)[0]\n        self.phone_number = re.findall('\\d \\d{4}-\\d{4}', self.phone)[0]","0ec39ec0":"Rodrigo = Person('Rodrigo Goncalves', 'S\u00e3o Paulo', '+55 (11) 9 2035-3045', 'user.name@mail.com')","f7adab88":"Rodrigo.print_contact_card()","e2ac6dff":"Rodrigo.get_components()","8ab6a8d8":"print(Rodrigo.first_name)\nprint(Rodrigo.last_name)\nprint(Rodrigo.phone_contry_code)\nprint(Rodrigo.ddd)\nprint(Rodrigo.phone_number)","79def4df":"class SmartPhone():\n\n    def __init__ (self, size = '', interface = ''):\n        self.size = size\n        self.interface = interface\n    \n    def call(self, number):\n        print(f'calling {number} ...')\n    \n    def send_msg(self, number, msg):\n        print(f\"message '{msg[0:10]}...' sent to {number}\")","07a6e8a8":"class MP3Player(SmartPhone):\n    \n    def __init__ (self, mp3_name, size, interface):\n        SmartPhone.__init__(self, size, interface)\n        self.mp3_name = mp3_name\n        \n    def play_song(self, song):\n        print(f\"playing '{song}'\")","9d4eb8b3":"My_Phone = SmartPhone(interface = 'Android', size = '5 by 7')","fac646af":"print(f'Phone: \\t {My_Phone.interface} \\t Size: \\t {My_Phone.size}')","23f6ebf3":"My_Phone.call('+55 (11) 9 3256-8956')\nMy_Phone.send_msg(msg = 'hey, how r u?', number = '+55 (11) 9 5689-2356')","09842b4f":"My_MP3 = MP3Player(mp3_name = 'google music', size = '5 by 7', interface = 'Android')","3649ad8d":"print(f'Phone: \\t {My_MP3.interface} \\t Size: \\t {My_MP3.size} \\t Name: \\t {My_MP3.mp3_name}')","c7aa1e19":"My_MP3.call('+55 (11) 9 5689-4578')\nMy_MP3.send_msg(msg = 'hey, how r u?', number = '+55 (11) 9 2356-4512')","ce2bca7e":"My_MP3.play_song(song = 'My way')","0166dfec":"<span style=\"color:green\"> Print new atributes created by our get_componets() method <\/span>","ac318a26":"<span style=\"color:green\"> Calling **roc1** methods <\/span>","a27353b0":"<span style=\"color:green\"> Create a SmartPhone object. <\/span>","e41027d3":"<span style=\"color:green\"> Checking the SmartPhone methods. <\/span>","9354c8b5":"<span style=\"color:green\"> Checking MP3Player attributes. <\/span>","7e840da0":"## 1.1) Exerc\u00edcio 1\n**Build a Python program that tests if an integer is prime.\nUse a FOR loop.**","dc8d31b9":"## 2.1 ) Exerc\u00edcio 1\n\nDesenvolver e testar uma fun\u00e7\u00e3o que valide se um n\u00famero de CPF \u00e9 v\u00e1lido.\n\nCondi\u00e7\u00f5es:\n\n - Deve conter 11 d\u00edgitos.\n - Deve ser uma entrada de d\u00edgitos exclusivamente, sem texto.\n - Os n\u00fameros n\u00e3o podem ser todos repetidos.\n - Os d\u00edgitos devem ser c\u00e1lculados corretamente, pelo c\u00e1lculo oficial.","e1c13e93":"## 3.1) Exerc\u00edcio 1\n\nCreate an object called roc1 from the class below, passing 2 parameters, and then call attributes and methods.","7698bf7a":"## 1.2) Exerc\u00edcio 2\nBuild a Python program that tests if an integer is prime.\nUse a WHILE loop.","d82282b7":"<span style=\"color:green\"> Calling **roc1** attributes. <\/span>","05838a1e":"<span style=\"color:green\"> Checking the SmartPhone attributes. <\/span>","3f7c516d":"## 3.2) Exerc\u00edcio 2\nCreate a class called Person () with attributes: name, city, phone, and email. Use at least 2 special methods in your class. \n<p> Create an object of your class and make a call to at least one of its special methods.","eb4b180c":"<span style=\"color:green\"> Print it's contact card <\/span>","cc411186":"# 2) Atividade - Functions","21e672a2":"<span style=\"color:green\"> Creating **roc1** object. <\/span>","7b9f802c":"<span style=\"color:green\"> Here are some sample inputs to test our function. <\/span>","2941a1a2":"<span style=\"color:green\"> A prime number (or a prime) is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n<br><br> Let's define a function to test is a givem number is prime or not.\n<br><br>The function first check if the input is and integer or not, than it will loop trough a range from 2 to the given number and check the remainder, if any remainder is greater than zero it means that the number is divisible not only by itself and 1 and therefore it is a prime number. <\/span>","c56ee43e":"# 3) Atividade - Object Oriented Programing","2a7fb552":"<span style=\"color:green\"> Call our method to get name and phone components <\/span>","c2ec79f0":"<span style=\"color:green\"> Let's create a person using our class <\/span>","14482052":"<span style=\"color:green\"> Creating MP3Player object. <\/span>","ef9ea9b6":"<span style=\"color:green\"> Let's import re module to be used inside a class method we will create. <\/span>","29a11cc4":"<span style=\"color:green\"> Checking MP3 Player own method. <\/span>","2793925d":"<span style=\"color:green\"> Define class SmartPhone. <\/span>","f5947137":"# 1) Atividade - Loops","c75bdeb3":"<span style=\"color:green\"> Calling **roc1** attributes after calling its method. <\/span>","ebe0aafd":"<span style=\"color:green\"> Define class MP3Player. <\/span>","38d18f43":"<span style=\"color:green\"> Defining the class called Person <\/span>","15d87579":"<span style=\"color:green\"> Checking MP3 Player methods inherited from SmartPhone. <\/span>","3c0ee7e8":"To test the function let's print all the prime numbest ranging from 1 to 50","1a111292":"## 3.3) Exerc\u00edcio 3\nCreate the Smartphone class with 2 attributes, size and interface and create the MP3Player class with the attributes capacity. The MP3player class must inherit the attributes from the Smartphone class.","5932b638":"# 0) Introdu\u00e7\u00e3o\n\n* **Curso:** FGV MBA - Business Analytics and Big Data\n* **Disciplina:** Modelagem Estat\u00edstica Avan\u00e7ada\n* **Professor:** Rodrigo Marotti Togneri\n* **Aluno:** Rodrigo Jose Borges Goncalves\n* **Matricula:** A57566093\n* **e-mail:** rodrigo.goncalves@me.com\n* **Github:** [RodriGonca](https:\/\/github.com\/RodriGonca)"}}