{"cell_type":{"bb31db7e":"code","714119a2":"code","6da19856":"code","eba91416":"code","f3c024de":"code","8b570ef6":"code","7ba3932e":"code","ed925fe3":"code","fcce718f":"code","51c62a46":"code","ff393a14":"code","43d2a57d":"code","add9384b":"code","f941b71c":"code","4488d06f":"code","a4fbc73e":"code","eabe9cdb":"code","a83f73fb":"code","6be1649b":"code","21e2266b":"code","c38b9236":"code","c45e1639":"code","a21a3f79":"code","12098008":"code","46a8eb8d":"code","3e3c2211":"code","f5974ec7":"code","5dc80cb7":"code","dd43e78c":"code","135f0113":"code","99ad1d84":"markdown","eb620fb6":"markdown","590e799b":"markdown","c14cab31":"markdown","ac040cff":"markdown","5e88eba3":"markdown","36f9ba9f":"markdown","1ceee61e":"markdown","ed1df59b":"markdown","8d74ab69":"markdown","32380423":"markdown","1eff964d":"markdown","850e7cd6":"markdown","ded81078":"markdown","639da5a7":"markdown","5c42f23b":"markdown","e05272e4":"markdown","b36a9f4b":"markdown","fa5129bf":"markdown","b146fd6c":"markdown","4901df08":"markdown","72b7ba7e":"markdown","b321e59b":"markdown","b03e051a":"markdown","f34c945b":"markdown","112b229b":"markdown","1d14a910":"markdown","32243fb8":"markdown","08915f71":"markdown","742ad749":"markdown","b7aec77a":"markdown","7c6d0e3b":"markdown","d8d4eb48":"markdown","09937839":"markdown","377f3cd7":"markdown","d4c5deb4":"markdown","5678cf66":"markdown","255140ff":"markdown","8a169f48":"markdown","d89ec8b4":"markdown"},"source":{"bb31db7e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport matplotlib.patches as patches\nfrom pylab import text\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import AnnotationBbox, OffsetImage\n\n\ndef frame_image(img, frame_width):\n   \n    \n    b = frame_width # border size in pixel\n    ny, nx = img.shape[0], img.shape[1] # resolution \/ number of pixels in x and y\n    if img.ndim == 3: # rgb or rgba array\n        framed_img = np.zeros((b+ny+b, b+nx+b, img.shape[2]))\n    elif img.ndim == 2: # grayscale image\n        framed_img = np.zeros((b+ny+b, b+nx+b))\n    framed_img[b:-b, b:-b] = img\n    return framed_img\n\ndef offset_png(x, y, path, ax, zoom, offset, border=2):\n\n    \n    img = plt.imread(path)\n    img = frame_image(img, border)\n    im = OffsetImage(img, zoom=zoom)\n    im.image.axes = ax\n    x_offset = offset\n    ab = AnnotationBbox(im, (x, y), xybox=(x_offset, 0), frameon=False,\n                        xycoords='data', boxcoords=\"offset points\", pad=0)\n    ax.add_artist(ab)\n    ","714119a2":"match_2k8_2k19 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv')\n\nmatch_2k8_2k19[\"city\"].fillna(\"Dubai\", inplace = True)\n\nchange_name_team ={'Delhi Daredevils':'Delhi Capitals',\n                    'Rising Pune Supergiants':'Rising Pune Supergiant',\n                    'Deccan Chargers':'Sunrisers Hyderabad'}\n\nchange_name_stadium = {'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n              'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association IS Bindra',\n              'MA Chidambaram Stadium, Chepauk':'M. A. Chidambaram Stadium',\n              'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi Intl. Cricket Stadium',\n              'IS Bindra Stadium':'Punjab Cricket Association IS Bindra Stadium',\n              'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n              'Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium':'ACA-VDCA Stadium ',\n              'Sheikh Zayed Stadium':'Sheikh Zayed Stadium, Abu Dhabi'}\n\nmatch_2k8_2k19['team1']=match_2k8_2k19['team1'].replace(change_name_team)\n\nmatch_2k8_2k19['team2']=match_2k8_2k19['team2'].replace(change_name_team)\n\nmatch_2k8_2k19['winner']=match_2k8_2k19['winner'].replace(change_name_team)\n\nmatch_2k8_2k19['toss_winner']=match_2k8_2k19['toss_winner'].replace(change_name_team)\n\nmatch_2k8_2k19['venue'] = match_2k8_2k19['venue'].replace(change_name_stadium)\n\n\n\n\ndf = pd.read_csv('..\/input\/ipl-2020-player-performance\/Training.csv')\n\nfrom tqdm import tqdm\nname=[]\nfor id in tqdm(df['Id']):\n    name.append(id.split('_'))\n\nmatch_id=[]\nids=[]\nfor i in tqdm((range(len(name)))):\n    ids.append(name[i][1])\n    match_id.append(name[i][0])\n\n    \ndf['id']=ids\ndf['match_id']=match_id\ndfs = df.drop(columns='Id')\n#train = train.iloc[:,-1:] + train.iloc[1:,:-1]\ntrain_data=dfs[['id','match_id','Runs','Boundaries','Six',\n          'Fifty','Hundred','Duck','Batting_Points',\n          'Wickets','4W_Haul','5W_Haul','Maidens','Bowling_Points','Total Points']]\n\n\n\nplayers = {'S Gill':'Shubman Gill', 'C Ingram':'CA Ingram',\n            'P Krishna':'Prasidh Krishna', 'S Mavi':'Shivam Mavi',\n            'H Vihari':'GH Vihari','S Warrier':'Sandeep Warrier'}\n\n\ntrain_data['id'] = train_data['id'].replace(players)\ntrain_data['match_id'] = train_data['match_id'].astype(int)\n\ntr = pd.merge(train_data,match_2k8_2k19, how = 'inner', on = 'match_id')\n\ntr['id']=tr['id'].replace(['Axar Patel','Suryakumar Yadav','Ankit Sharma','Sheldon Cottrell','Deepak Chahar','Pavan Deshpande','Hardik Pandya',\n                                 'Harshal Patel','Harpreet Brar','Krunal Pandya','Karn Sharma','Josh Philippe','Prabhsimran Singh','Rinku Singh',\n                                 'Rahul Chahar','Rohit Sharma','Suryakumar Yadav','Sarfaraz Khan','Simran Singh','Umesh Yadav'],\n                                ['AR Patel','AS Yadav','Ankit Sharma','Cottrell','DL Chahar','Deshpande', 'HH Pandya','HV Patel','Harpreet Singh',\n                                 'KH Pandya','KV Sharma','Philippe','Prabhsimran Singh','R Singh','RD Chahar','RG Sharma','SA Yadav' ,\n                                 'SN Khan' ,'Simran Singh', 'UT Yadav'])\n\n\ntrain = tr[['id','venue', 'match_id', 'Runs', 'Boundaries', 'Six', 'Fifty', 'Hundred',\n       'Duck', 'Batting_Points', 'Wickets', '4W_Haul', '5W_Haul',\n       'Maidens', 'Bowling_Points', 'Total Points']]\n\ntrain\n","6da19856":"match =  match_2k8_2k19[['city','season']].dropna()\n\ncountry = match['city'].unique()\n\nfrom geopy.geocoders import Nominatim\nfrom tqdm import tqdm\n\ngeolocator = Nominatim(user_agent='myapplication')\n\nlatit =[]\nlong = []\n\nfor i in tqdm(country):\n        location = geolocator.geocode(i)\n        latit.append(location.raw['lat'])\n        long.append(location.raw['lon'])","eba91416":"import plotly.graph_objects as go\n\nfig = go.Figure()\n\n\nfig.add_trace(\n    go.Scattermapbox(\n        name='Matches held around the World',\n        lat=latit,\n        lon=long,\n        mode='markers',\n        marker=dict(\n            size=14\n        ),\n        \n        text=country,\n        subplot='mapbox'\n    ))\n\n\nfig.update_layout(\n    autosize=True,\n    width=800,\n    height=800,\n    hovermode='closest',\n    mapbox=dict(\n        style='open-street-map',\n        bearing=0,\n        center=dict(\n            lat=10,\n            lon=50\n        ),\n        pitch=0,\n        zoom=2\n    ),\n)\n","f3c024de":"import seaborn as sns\nimport matplotlib.pyplot as plt\n#plt.rcParams[\"figure.figsize\"] = (10,10)\n\n#plt.style.use(\"dark_background\")\n\nfig2=plt.subplots(figsize =(10,6))\nfig2=sns.countplot(y=match['city'],palette=\"viridis\",order = match['city'].value_counts().index);\nfig2.set_xticks([])\nfig2.set_xlabel('')\n\n\nfig2.set_ylabel(\"No. of Matches per cities\")\n\nfor rect in fig2.patches:\n    fig2.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 1.2, rect.get_width(), weight='bold' )\n \n\nplt.tight_layout()","8b570ef6":"fig,ax1 = plt.subplots(figsize=(8, 8))\nfig.suptitle('Most Matches held in Stadiums', size = 20, weight='bold')\n\nlabel= match_2k8_2k19['venue'].unique()\nvenue= match_2k8_2k19['venue'].value_counts()\n             \n#explode = (0.05)\n             \nax1.pie(venue, autopct='%1.0f%%',pctdistance=1.1, labeldistance=1.5)\n\nax1.legend(label, loc = 'upper right',bbox_to_anchor=(-0.01, 1.2))\n\n\noffset_png(x=0, y=0, path=\"..\/input\/stadium-logo\/stadium_logo.png\", \n           ax=ax1, zoom=1.2, offset=0, border=1)","7ba3932e":"team_eda =match_2k8_2k19[['season','toss_winner','toss_decision','result','winner']].dropna()\n\nimport seaborn as sns\n\n\nfig2=plt.subplots(figsize =(10,6))\nfig2=sns.countplot(y=team_eda['winner'],palette=\"viridis\",order = team_eda['winner'].value_counts().index);\nfig2.set_xticks([])\nfig2.set_xlabel('')\n\n\nfig2.set_ylabel(\"Most Wins in All Seasons\")\n    \nfor rect in fig2.patches:\n    fig2.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, rect.get_width(), weight='bold' )\n    \nplt.tight_layout()","ed925fe3":"\nteam = team_eda['toss_winner'].unique()\n\n\nfield = team_eda[team_eda['toss_decision']=='field']['toss_winner'].value_counts()\nbat = team_eda[team_eda['toss_decision']=='bat']['toss_winner'].value_counts().reindex(team_eda.toss_winner.unique(), fill_value=0)\nwin_field = team_eda[team_eda['toss_decision']=='field']['winner'].value_counts()\nwin_bat = team_eda[team_eda['toss_decision']=='bat']['winner'].value_counts().reindex(team_eda.winner.unique(), fill_value=0)\n\n\nfig4, axs = plt.subplots(ncols=2, sharey=True, figsize=(12, 11))\nfig4.suptitle(' Wins when Toss Decission was Fielding', size = 22, weight='bold')\n\n\n    #define male and female bars\naxs[0].barh(team, field, align='center', color='steelblue')\naxs[0].set_title('Field', weight='bold', size=10)\naxs[1].barh(team, win_field, align='center', color='firebrick')\naxs[1].set_title('Wins', weight='bold', size=10)\n\n\naxs[1].grid()\naxs[0].invert_xaxis()\naxs[0].grid()\n#axs[0].set(yticks=team)\naxs[0].tick_params(axis=\"y\",direction=\"in\", pad=-425)\naxs[0].set_yticklabels(team, ha='center')\n\nfor rect in axs[1].patches:\n    axs[1].text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, int(rect.get_width()), weight='bold' )\n    \nfor rect in axs[0].patches:\n    axs[0].text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, int(rect.get_width()), weight='bold' )\n  \n\nplt.tight_layout()","fcce718f":"fig5, axs = plt.subplots(ncols=2, sharey=True, figsize=(12, 11))\nfig5.suptitle(' Wins when Toss Decission was Bating', size = 22, weight='bold')\n\n\naxs[0].barh(team, bat, align='center', color='steelblue')\naxs[0].set_title('Bat', weight='bold', size=10)\naxs[1].barh(team, win_bat, align='center', color='firebrick')\naxs[1].set_title('Wins', weight='bold', size=10)\n\n    #adjust grid parameters and specify labels for y-axis\naxs[1].grid()\naxs[0].invert_xaxis()\naxs[0].grid()\n#axs[0].set(yticks=team)\naxs[0].tick_params(axis=\"y\",direction=\"in\", pad=-425)\naxs[0].set_yticklabels(team, ha='center')\nfor rect in axs[1].patches:\n    axs[1].text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, int(rect.get_width()), weight='bold' )\n    \nfor rect in axs[0].patches:\n    axs[0].text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, int(rect.get_width()), weight='bold' )\n  \n\nplt.tight_layout()","51c62a46":"man = match_2k8_2k19['player_of_match'].value_counts().head(5)\nlabels = match_2k8_2k19['player_of_match'].value_counts().head(5).index\nfig6,ax1=plt.subplots(figsize =(8,8))\n\nfig6=plt.suptitle(\" Top 5 Players having Man of the match Title All Season \", size = 18, weight='bold')\n\nax1=sns.barplot(x=man,y=labels);\n\nax1.set_xlabel(\"\")\nax1.set_xticks([])\nax1.tick_params(axis=\"y\",direction=\"in\", pad=-300)\n\n\nfor rect in ax1.patches:\n    ax1.text (rect.get_width(), rect.get_y() + rect.get_height() \/ 2, int(rect.get_width()), weight='bold' )\n    \nplt.tight_layout()\n\n\npath='..\/input\/manmatch'\noffset_png(x=21, y=0, path=f'{path}\/236.png', ax=ax1, zoom=1, offset=-22, border=1)\noffset_png(x=20, y=1, path=f'{path}\/233.png', ax=ax1, zoom=1, offset=-22, border=1)\noffset_png(x=17, y=2, path=f'{path}\/107.png', ax=ax1, zoom=1, offset=-22, border=1)\noffset_png(x=17, y=3, path=f'{path}\/1.png', ax=ax1, zoom=1, offset=-22, border=1)\noffset_png(x=17, y=4, path=f'{path}\/170.png', ax=ax1, zoom=1, offset=-22, border=1)","ff393a14":"train_ball = train.iloc[:,9:15]\ntrain_ball['id'] = train['id']\nc=train_ball.index[train_ball['Bowling_Points'] == 0]\ntrain_ball=train_ball.drop(train_ball.index[c])\n#train_ball.set_index(\"id\", inplace = True)\n\nplayers_ball = train_ball['id'].unique()\n\ntotal_bowl=pd.DataFrame()\nplayer=[]\nWickets=[]\nW4_Haul=[]\nW5_Haul=[]\nMaidens=[]\npoint=[]\nfor ball in tqdm(players_ball):\n    player.append(ball)\n    Wickets.append(train_ball[train_ball['id']==ball]['Wickets'].sum())\n    W4_Haul.append(train_ball[train_ball['id']==ball]['4W_Haul'].sum())\n    W5_Haul.append(train_ball[train_ball['id']==ball]['5W_Haul'].sum())\n    Maidens.append(train_ball[train_ball['id']==ball]['Maidens'].sum())\n    point.append(train_ball[train_ball['id']==ball]['Bowling_Points'].sum())\n    \n    \ntotal_bowl = pd.DataFrame({'player':player,\n                           'Wickets':Wickets,\n                           'W4_Haul':W4_Haul,\n                           'W5_Haul':W5_Haul,\n                           'Maidens':Maidens,\n                            'point':point})\n\n","43d2a57d":"train_bat = train.iloc[:,2:10]\ntrain_bat['id'] = train['id']\ntrain_bat = train_bat.dropna()\nc=train_bat.index[train_bat['Batting_Points'] == 0]\ntrain_bat=train_bat.drop(train_bat.index[c])\n#train_bat.set_index(\"id\", inplace = True)\n\n\n\nplayers_bat = train_bat['id'].unique()\n\ntotal_bat=pd.DataFrame()\nplayer=[]\nRuns=[]\nBoundaries=[]\nSix=[]\nFifty=[]\nHundred=[]\nDuck=[]\nbat_point=[]\nfor bat in tqdm(players_ball):\n    player.append(bat)\n    Runs.append(train_bat[train_bat['id']==bat]['Runs'].sum())\n    Boundaries.append(train_bat[train_bat['id']==bat]['Boundaries'].sum())\n    Six.append(train_bat[train_bat['id']==bat]['Six'].sum())\n    Fifty.append(train_bat[train_bat['id']==bat]['Fifty'].sum())\n    Hundred.append(train_bat[train_bat['id']==bat]['Hundred'].sum()) \n    Duck.append(train_bat[train_bat['id']==bat]['Duck'].sum()) \n    \n    \n    \ntotal_bat = pd.DataFrame({'player':player,\n                          'Runs':Runs,\n                           'Boundaries':Boundaries,\n                           'Six':Six,\n                           'Fifty':Fifty,\n                           'Hundred':Hundred,\n                            'Duck':Duck})\n#train_bat[train_bat['id']==bat]['Batting_Points'].sum()\n\ntotal_bat","add9384b":"top_runs =total_bat.nlargest(3,'Runs')\ntop_Boundaries =total_bat.nlargest(3,'Boundaries')\ntop_Six =total_bat.nlargest(3,'Six')\ntop_Fifty =total_bat.nlargest(3,'Fifty')\ntop_Hundred =total_bat.nlargest(3,'Hundred')\ntop_Duck =total_bat.nlargest(3,'Duck')\n\n\nfig8, axes = plt.subplots(nrows =2, ncols=3, figsize=(13, 8))\nfig8.suptitle('Top 3 Batsmen with respect to Runs,Boundaries,Six,Fifty,Hundred,Duck', size=20)\n\n# Runs\nsns.barplot(x=top_runs['player'].unique(), y=top_runs['Runs'].values,ax=axes[0,0],palette='mako')\naxes[0,0].set_title('Runs')\naxes[0,0].set_ylabel(\"\")\naxes[0,0].set_yticks([])\naxes[0,0].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[0,0].patches:\n    axes[0,0].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# Boundaries\nsns.barplot(ax=axes[0,1], x=top_Boundaries['player'].unique(), y=top_Boundaries['Boundaries'].values,palette='magma')\naxes[0,1].set_title('Boundaries')\naxes[0,1].set_ylabel(\"\")\naxes[0,1].set_yticks([])\naxes[0,1].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[0,1].patches:\n    axes[0,1].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n    \n# Six\nsns.barplot(ax=axes[0,2], x=top_Six['player'].unique(), y=top_Six['Six'].values,palette='viridis')\naxes[0,2].set_title('Six')\naxes[0,2].set_ylabel(\"\")\naxes[0,2].set_yticks([])\naxes[0,2].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[0,2].patches:\n    axes[0,2].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# Fifty\nsns.barplot(ax=axes[1,0], x=top_Fifty['player'].unique(), y=top_Fifty['Fifty'].values,palette='YlOrBr')\naxes[1,0].set_title('Fifty')\naxes[1,0].set_ylabel(\"\")\naxes[1,0].set_yticks([])\naxes[1,0].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[1,0].patches:\n    axes[1,0].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# Hundred\nsns.barplot(ax=axes[1,1], x=top_Hundred['player'].unique(), y=top_Hundred['Hundred'].values,palette='icefire')\naxes[1,1].set_title('Hundred')\naxes[1,1].set_ylabel(\"\")\naxes[1,1].set_yticks([])\naxes[1,1].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[1,1].patches:\n    axes[1,1].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# Duck\nsns.barplot(ax=axes[1,2], x=top_Duck['player'].unique(), y=top_Duck['Duck'].values,palette='Blues')\naxes[1,2].set_title('Duck')\naxes[1,2].set_ylabel(\"\")\naxes[1,2].set_yticks([])\naxes[1,2].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[1,2].patches:\n    axes[1,2].text(rect.get_x() + rect.get_width()\/3,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n\noffset_png(x=0, y=2000, path=f'..\/input\/top-run\/V Kohli.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=2000, path=f'..\/input\/top-run\/SK Raina.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=2000, path=f'..\/input\/manmatch\/107.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=260, path=f'..\/input\/top-run\/CH Gayle.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=260, path=f'..\/input\/top-run\/SK Raina.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=260, path=f'..\/input\/top-run\/V Kohli.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=120, path=f'..\/input\/top-run\/CH Gayle.png', ax=axes[0,2], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=120, path=f'..\/input\/top-run\/SK Raina.png', ax=axes[0,2], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=120, path=f'..\/input\/manmatch\/107.png', ax=axes[0,2], zoom=0.8, offset=0, border=1)\n\noffset_png(x=0, y=15, path=f'..\/input\/top-run\/SK Raina.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=15, path=f'..\/input\/top-run\/V Kohli.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=15, path=f'..\/input\/fifty-top\/Dhawan.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=3, path=f'..\/input\/top-run\/CH Gayle.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=3, path=f'..\/input\/top-run\/V Kohli.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=3, path=f'..\/input\/fiffty\/Wats.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=5, path=f'..\/input\/duck-top\/Harbhajan.png', ax=axes[1,2], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=5, path=f'..\/input\/duck-top\/Chawla.png', ax=axes[1,2], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=5, path=f'..\/input\/manmatch\/107.png', ax=axes[1,2], zoom=0.8, offset=0, border=1)\n\n\n\nplt.tight_layout()","f941b71c":"top_Wick =total_bowl.nlargest(3,'Wickets')\ntop_W4 =total_bowl.nlargest(3,'W4_Haul')\ntop_W5 =total_bowl.nlargest(3,'W5_Haul')\ntop_Maidens =total_bowl.nlargest(3,'Maidens')\n\n\nfig9, axes = plt.subplots(nrows =2, ncols=2, figsize=(13, 8))\nfig9.suptitle('Top 3 Bowlers with respect to Wickets,4W,5W,Maiden', size=20)\n\n# Wickets\nsns.barplot(x=top_Wick['player'].unique(), y=top_Wick['Wickets'].values,ax=axes[0,0],palette='mako')\naxes[0,0].set_title('Most Wickets')\naxes[0,0].set_ylabel(\"\")\naxes[0,0].set_yticks([])\naxes[0,0].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[0,0].patches:\n    axes[0,0].text(rect.get_x() + rect.get_width()\/2.5,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# W4_Haul\nsns.barplot(ax=axes[0,1], x=top_W4['player'].unique(), y=top_W4['W4_Haul'].values,palette='magma')\naxes[0,1].set_title('Most 4W')\naxes[0,1].set_ylabel(\"\")\naxes[0,1].set_yticks([])\naxes[0,1].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[0,1].patches:\n    axes[0,1].text(rect.get_x() + rect.get_width()\/2.5,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n    \n# W5_Haul\nsns.barplot(ax=axes[1,0], x=top_W5['player'].unique(), y=top_W5['W5_Haul'].values,palette='viridis')\naxes[1,0].set_title('Most 5W')\naxes[1,0].set_ylabel(\"\")\naxes[1,0].set_yticks([])\naxes[1,0].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[1,0].patches:\n    axes[1,0].text(rect.get_x() + rect.get_width()\/2.5,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \n# Maidens\nsns.barplot(ax=axes[1,1], x=top_Maidens['player'].unique(), y=top_Maidens['Maidens'].values,palette='YlOrBr')\naxes[1,1].set_title('Most Madiens')\naxes[1,1].set_ylabel(\"\")\naxes[1,1].set_yticks([])\naxes[1,1].tick_params(axis=\"x\",direction=\"in\", pad=-50)\nfor rect in axes[1,1].patches:\n    axes[1,1].text(rect.get_x() + rect.get_width()\/2.5,rect.get_height(),int(rect.get_height()), weight='bold' )\n    \noffset_png(x=0, y=60, path=f'..\/input\/bowler\/Kalinga.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=60, path=f'..\/input\/bowler\/Mishra.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=60, path=f'..\/input\/bowler\/Harbhajan.png', ax=axes[0,0], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=2.2, path=f'..\/input\/bowler\/Kalinga.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=2.3, path=f'..\/input\/bowler\/Narine.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=2.3, path=f'..\/input\/bowler\/Tahir.png', ax=axes[0,1], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=0.7, path=f'..\/input\/bowler\/Unadkat.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=0.7, path=f'..\/input\/bowler\/james-faulkner.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=0.7, path=f'..\/input\/bowlers\/Bkumar.png', ax=axes[1,0], zoom=0.8, offset=0, border=1)\noffset_png(x=0, y=4.5, path=f'..\/input\/bowler\/Praveen.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\noffset_png(x=1, y=4.5, path=f'..\/input\/bowler\/Pathan.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\noffset_png(x=2, y=4.5, path=f'..\/input\/bowler\/Kalinga.png', ax=axes[1,1], zoom=0.8, offset=0, border=1)\n\n\nplt.tight_layout()","4488d06f":"from sklearn import preprocessing\n  \nlabel_encoder = preprocessing.LabelEncoder()\n\ntrain['venue']=label_encoder.fit_transform(train['venue'])\ntrain['id']=label_encoder.fit_transform(train['id'])\n#train['Venue_name']=tr['venue']\ntrain['player_name']=df['id']\n\ntrain_df = train.drop(['Batting_Points','Bowling_Points','player_name','match_id'], axis = 1)","a4fbc73e":"train_df","eabe9cdb":"feat = train_df.iloc[:,:-1]\nvalue = train_df.iloc[:,-1:]\n\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(feat, value.values,test_size = 0.20, random_state = 42)","a83f73fb":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport xgboost as xgb\n\nmodel = xgb.XGBRegressor()\n\ntrain_model = model.fit(xtrain, ytrain)","6be1649b":"y_pred_test = xgb_model.predict(xtest)\n\nprint(\"Accuracy Score of the model:\",accuracy_score(ytest, np.round(y_pred_test)))\n","21e2266b":"print(classification_report(ytest, np.round(y_pred_test)));","c38b9236":"from sklearn.metrics import mean_squared_error\n\nprint('RMSE:', np.sqrt(mean_squared_error(ytest,y_pred_test)))","c45e1639":"print('MSE',mean_squared_error(ytest,y_pred_test))","a21a3f79":"from sklearn.metrics import mean_absolute_error\nprint('MAE:',mean_absolute_error(ytest,y_pred_test))","12098008":"sample = pd.read_csv('..\/input\/ipl-2020-player-performance\/sample_submission.csv')\n\nsample['match_id'] = [int(i.split('_')[0]) for i in list(sample.Id)]\nsample['player_name'] = [i.split('_')[-1] for i in list(sample.Id)]\nsample['player_name'] = sample['player_name'].apply(lambda x:x.strip())\n\n\nmatch_20 = pd.read_csv('..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv')\n\ndata_test_00 = pd.merge(sample,match_20, how='inner',on= 'match_id')\ndata_test_00","46a8eb8d":"data_test_01 = pd.merge(data_test_00,train, how='left',on= 'player_name')\ndata_test_01=data_test_01.drop_duplicates(subset=\"Id\",keep='first').dropna()\n\n\nencoding={\"Sheikh Zayed Stadium, Abu Dhabi\":30,\"Dubai International Cricket Stadium\":7,\"Sharjah Cricket Stadium\":29}\n\ndata_test_01=data_test_01.replace(encoding)","3e3c2211":"players = data_test_01['id'].unique()\n\n#test=pd.DataFrame()\nplayer=[]\nRuns=[]\nBoundaries=[]\nSix=[]\nFifty=[]\nHundred=[]\nDuck=[]\nWickets=[]\nW4_Haul=[]\nW5_Haul=[]\nMaidens=[]\nfor p in tqdm(players):\n    player.append(round(p))\n    Runs.append(round(data_test_01[data_test_01['id']==p]['Runs'].median()))\n    Boundaries.append(round(data_test_01[data_test_01['id']==p]['Boundaries'].median()))\n    Six.append(round(data_test_01[data_test_01['id']==p]['Six'].median()))\n    Fifty.append(round(data_test_01[data_test_01['id']==p]['Fifty'].median()))\n    Hundred.append(round(data_test_01[data_test_01['id']==p]['Hundred'].median())) \n    Duck.append(round(data_test_01[data_test_01['id']==p]['Duck'].median())) \n    Wickets.append(round(data_test_01[data_test_01['id']==p]['Wickets'].median()))\n    W4_Haul.append(round(data_test_01[data_test_01['id']==p]['4W_Haul'].median()))\n    W5_Haul.append(round(data_test_01[data_test_01['id']==p]['5W_Haul'].median()))\n    Maidens.append(round(data_test_01[data_test_01['id']==p]['Maidens'].median()))\n    \ndata_test = pd.DataFrame({'id':player,\n                          'Runs':Runs,\n                           'Boundaries':Boundaries,\n                           'Six':Six,\n                           'Fifty':Fifty,\n                           'Hundred':Hundred,\n                            'Duck':Duck,\n                            'Wickets':Wickets,\n                           '4W_Haul':W4_Haul,\n                           '5W_Haul':W5_Haul,\n                           'Maidens':Maidens\n                    })\n\n\ndata_test['id']=data_test['id'].astype(int)","f5974ec7":"df_test = data_test_01[['id','venue_x','Id']]\n\ndf_test.columns=['id','venue','Id']\n\n\ntest_df = pd.merge(df_test,data_test, how='inner',on= 'id')\n\ntest_df['id'] = test_df['id'].astype(int)\n\ntest=test_df.drop(columns='Id')","5dc80cb7":"pred = train_model.predict(test)\n\ntest_df['Total Points'] = np.round(pred).astype(int)\ntest_df['Total Points']","dd43e78c":"Sub = pd.merge(data_test_00, test_df, on='Id', how='left')\n\nsubmission = Sub[['Id','Total Points_y']].copy()\nsubmission['Total Points_y']=submission['Total Points_y'].fillna(0)\nsubmission.columns=['Id','Total Points']","135f0113":"submission.to_csv('submission.csv',index=False)","99ad1d84":"### Here, We are going to see which Cities hosted IPL for season 2008 to 2019!\n","eb620fb6":"## Using XGBOOST.","590e799b":"## Model Accuracy Score","c14cab31":"> **\u201cEvery batsman surveys the field before taking strike, and usually the fielders get imprinted on his mind. They can almost see every fielder in their mind\u2019s eye. But in my head, I don\u2019t see the fielders. I only see the gaps!\u201d \u2013 Ricky Ponting**","ac040cff":"### The Three venues are hosting the IPLT20 Season so we are going to change to numbers which are being used by training model.","5e88eba3":" > **\u201c A wise man learns by the mistakes of others, A foll by own.\u201d \u2013 Adam Gilchrist.**","36f9ba9f":"> \u201cMy first bat was shaped of a coconut branch and from that day, all I wanted to do was to be a crickter.\u201d \u2013 Brian Lara","1ceee61e":"## Players Having Most Man of the Match Title\ud83d\udc51.","ed1df59b":"## Here, we see the decission of taking batting \ud83c\udfcf after toss win haveturned out to be Winning Match:\n* Dellhi Capital ,Chennia Super Kings and Royal Challengers  seems to obatian win after selecting batting.","8d74ab69":"* Wow Mumbai Indians Seems to have the most wins between 2008 to 2019 seasons\n* Chennai Super Kings is second and Followed by Kolkata Knight Riders.","32380423":"### Cleaning Data.","1eff964d":"For this we are going to use \"geopy\" library to get Longitude and Latitude of cities.","850e7cd6":"## Team Wins \ud83c\udfc6 when Fielding was choosen  ","ded81078":"# MAE of Model","639da5a7":"## Most Wins\ud83c\udfc6 A Team Have from All Season.","5c42f23b":"## Here, I am creating a testing data for the submission of sample set by taking out median of player's previous performance from Training dataset.","e05272e4":"* **After some \u2728\ud83e\uddd9  magic with data it looks like Mumbai have hosted the most Matches followed by Kolkata and Delhi.**","b36a9f4b":"## Top 3 Batsmen with respect to Runs,Boundaries,Six,Fifty,Hundred,Duck","fa5129bf":"### Here, I am going to add Venue to the training dataset and going to use Players Name and Venue as Categorical Feature for the Model","b146fd6c":"### Now the Venues which hosted Matches the most\n\n![CityStadium](https:\/\/emojipedia-us.s3.dualstack.us-west-1.amazonaws.com\/thumbs\/160\/twitter\/259\/stadium_1f3df.png)\n","4901df08":"> An out-and-out fast bowler is one of the great sights in cricket.\n> -James Anderson.","72b7ba7e":"# IPL All Season EDA+Player Performance Prediction Using RandomForest Regressor","b321e59b":"### Splitting training dataset ","b03e051a":"### After Obtaining Desired Lat and Long Coordinates we are going plot a map to see the cities hosted the matches for that we going to use Plotly and Scattermabox for it. ","f34c945b":"![Photo by Yogendra Singh from Pexels](https:\/\/images.pexels.com\/photos\/4747326\/pexels-photo-4747326.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=680)","112b229b":"## The final sample submission","1d14a910":"## Team Wins \ud83c\udfc6 when Batting was choosen  ","32243fb8":"## RMSE of Model","08915f71":"## Here, we see the decission of taking fielding after toss win haveturned out to be Winning Match:\n* Royal Challengers seems to obatian most win after selecting fielding followed by Chennia Super Kings.","742ad749":"## Our Dataset for sample Submission is ready ","b7aec77a":"* M. Chinnaswamy Stadium hosted Most IPL Matches Followed by Punjab Cricket Association, Feroz Shah Kotla and Wankhede Stadium.","7c6d0e3b":"# Hoping This Notebook might capture what was being expected.\n## Please Leave a Comment and also share your thoughts too.\n\n<img src='https:\/\/media.giphy.com\/media\/3o85xnFlxP2sy1swDu\/giphy.gif'>","d8d4eb48":"> **\u201cIf you want to do something, achieve something, you can\u2019t be thinking all the time of what you don\u2019t have.\u201d \u2013 Kapil Dev**","09937839":"# MSE of Model","377f3cd7":"# XGBOOST Regressor Model for predicting player's performance.","d4c5deb4":"# So..... Ya Chris Tops it.\n\n<img src=\"https:\/\/tenor.com\/view\/ipl-chris-gayle-kxip-muaah-kiss-gif-18694368.gif#\">","5678cf66":"# Okay One last EDA of Players based on Training Dataset","255140ff":"Photo by Yogendra Singh from Pexels.\n\n# \ud83d\udcdaEDA of IPL Match of seasons 2008 to 2019.","8a169f48":"Scoring the model","d89ec8b4":"## Top 3 Bowlers with respect to Wickets,4W,5W,Maiden"}}