{"cell_type":{"84a18cba":"code","a1a92790":"code","4576c528":"code","91bb0c71":"code","0e292ffd":"code","103acc80":"code","40ba57b1":"code","b249efec":"code","401e903f":"code","faa3993e":"code","1b93cd6d":"code","0d1570db":"code","53090010":"code","18266a9e":"code","3a6f7071":"code","5c0490eb":"code","bab7cb3f":"code","9bcd0386":"code","cc98940c":"code","3bdc935c":"code","a54b18a1":"code","82721c2a":"code","fb656e31":"code","16a706a6":"code","aae694a4":"code","fd8d8644":"code","360ebea1":"code","5f7ad55c":"code","ae6824b6":"code","d03071a1":"code","4ca7ccaf":"code","e453e7c4":"code","25533e98":"markdown","7a3e2cc5":"markdown","786b0507":"markdown","bd7c91f5":"markdown","31970284":"markdown","7a52871b":"markdown","dd0de975":"markdown","4692c647":"markdown","e8ad29e2":"markdown","7c7d471a":"markdown","7de705c0":"markdown","4be9bf0f":"markdown","8ab2f6e1":"markdown","21141273":"markdown","a9fa3b35":"markdown","7e92f824":"markdown","ce1f1144":"markdown"},"source":{"84a18cba":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import GridSearchCV","a1a92790":"tourney_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneyCompactResults.csv')\ntourney_seed = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MNCAATourneySeeds.csv')","4576c528":"# deleting unnecessary columns\ntourney_result = tourney_result.drop(['DayNum', 'WScore', 'LScore', 'WLoc', 'NumOT'], axis=1)\ntourney_result","91bb0c71":"tourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'WSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'LSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result","0e292ffd":"def get_seed(x):\n    return int(x[1:3])\n\ntourney_result['WSeed'] = tourney_result['WSeed'].map(lambda x: get_seed(x))\ntourney_result['LSeed'] = tourney_result['LSeed'].map(lambda x: get_seed(x))\ntourney_result","103acc80":"season_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MDataFiles_Stage1\/MRegularSeasonCompactResults.csv')","40ba57b1":"season_win_result = season_result[['Season', 'WTeamID', 'WScore']]\nseason_lose_result = season_result[['Season', 'LTeamID', 'LScore']]\nseason_win_result.rename(columns={'WTeamID':'TeamID', 'WScore':'Score'}, inplace=True)\nseason_lose_result.rename(columns={'LTeamID':'TeamID', 'LScore':'Score'}, inplace=True)\nseason_result = pd.concat((season_win_result, season_lose_result)).reset_index(drop=True)\nseason_result","b249efec":"season_score = season_result.groupby(['Season', 'TeamID'])['Score'].sum().reset_index()\nseason_score","401e903f":"tourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'WScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'LScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result","faa3993e":"tourney_win_result = tourney_result.drop(['Season', 'WTeamID', 'LTeamID'], axis=1)\ntourney_win_result.rename(columns={'WSeed':'Seed1', 'LSeed':'Seed2', 'WScoreT':'ScoreT1', 'LScoreT':'ScoreT2'}, inplace=True)\ntourney_win_result","1b93cd6d":"tourney_lose_result = tourney_win_result.copy()\ntourney_lose_result['Seed1'] = tourney_win_result['Seed2']\ntourney_lose_result['Seed2'] = tourney_win_result['Seed1']\ntourney_lose_result['ScoreT1'] = tourney_win_result['ScoreT2']\ntourney_lose_result['ScoreT2'] = tourney_win_result['ScoreT1']\ntourney_lose_result","0d1570db":"tourney_win_result['Seed_diff'] = tourney_win_result['Seed1'] - tourney_win_result['Seed2']\ntourney_win_result['ScoreT_diff'] = tourney_win_result['ScoreT1'] - tourney_win_result['ScoreT2']\ntourney_lose_result['Seed_diff'] = tourney_lose_result['Seed1'] - tourney_lose_result['Seed2']\ntourney_lose_result['ScoreT_diff'] = tourney_lose_result['ScoreT1'] - tourney_lose_result['ScoreT2']","53090010":"tourney_win_result['result'] = 1\ntourney_lose_result['result'] = 0\ntourney_result = pd.concat((tourney_win_result, tourney_lose_result)).reset_index(drop=True)\ntourney_result","18266a9e":"test_df = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MSampleSubmissionStage1_2020.csv')","3a6f7071":"test_df['Season'] = test_df['ID'].map(lambda x: int(x[:4]))\ntest_df['WTeamID'] = test_df['ID'].map(lambda x: int(x[5:9]))\ntest_df['LTeamID'] = test_df['ID'].map(lambda x: int(x[10:14]))\ntest_df","5c0490eb":"test_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df","bab7cb3f":"test_df['Seed1'] = test_df['Seed1'].map(lambda x: get_seed(x))\ntest_df['Seed2'] = test_df['Seed2'].map(lambda x: get_seed(x))\ntest_df['Seed_diff'] = test_df['Seed1'] - test_df['Seed2']\ntest_df['ScoreT_diff'] = test_df['ScoreT1'] - test_df['ScoreT2']\ntest_df = test_df.drop(['ID', 'Pred', 'Season', 'WTeamID', 'LTeamID'], axis=1)\ntest_df","9bcd0386":"import h2o\nh2o.init(\n  nthreads=-1,            ## -1: use all available threads\n  max_mem_size = \"8G\")  ","cc98940c":"train_list=list(tourney_result.columns)[:-1]","3bdc935c":"train_1=h2o.H2OFrame(tourney_result)\ntrain_1['result']=train_1['result'].asfactor()","a54b18a1":"param = {\n      \"ntrees\" : 2000\n    , \"max_depth\" : 20\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True,\"booster\":\"dart\"\n}\nfrom h2o.estimators import H2OXGBoostEstimator\nmodel_xgb = H2OXGBoostEstimator(**param)\nmodel_xgb.train(x = train_list, y = 'result', training_frame = train_1)","82721c2a":"model_xgb.summary","fb656e31":"param={\n    \"ntrees\" : 1000\n    , \"max_depth\" : 20\n    , \"learn_rate\" : 0.02\n    , \"sample_rate\" : 0.7\n    , \"col_sample_rate_per_tree\" : 0.9\n    , \"min_rows\" : 5\n    , \"seed\": 4241\n    , \"score_tree_interval\": 100,\"stopping_metric\" :\"MSE\",\"nfolds\":8,\"fold_assignment\":\"AUTO\",\"keep_cross_validation_predictions\" : True\n\n }\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator  # import gbm estimator\nmodel_gbm = H2OGradientBoostingEstimator(**param)\nmodel_gbm.train(x = train_list, y = 'result', training_frame = train_1)","16a706a6":"model_gbm.summary","aae694a4":"from h2o.estimators import H2OStackedEnsembleEstimator\nstack = H2OStackedEnsembleEstimator(model_id=\"ensemble11\",\n                                       training_frame=train_1,\n                                       #validation_frame=test,\n                                       base_models=[model_xgb.model_id,model_gbm.model_id],metalearner_algorithm=\"glm\")\nstack.train(x=train_list, y=\"result\", training_frame=train_1)\n#stack.model_performance()","fd8d8644":"stack.summary","360ebea1":"#test_df.head()","5f7ad55c":"test_1=h2o.H2OFrame(test_df)","ae6824b6":"pred1=model_xgb.predict(test_1)\npred2=model_gbm.predict(test_1)\n","d03071a1":"pred_df1=pred1.as_data_frame()\npred_df2=pred2.as_data_frame()\n","4ca7ccaf":"#pred_df","e453e7c4":"submission_df = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-mens-tournament\/MSampleSubmissionStage1_2020.csv')\nsubmission_df['Pred'] = pred_df2['p1']*0.9+pred_df1['p1']*0.1\nsubmission_df\nsubmission_df.to_csv('submission.csv', index=False)","25533e98":"#### Ensemble of GBM with weight 0.9 and XGB weight 0.1","7a3e2cc5":"#### Not using the stacked ensemble model as it is performing relatively bad, so doing manual emsemble below","786b0507":"#### Summary of ensemble model","bd7c91f5":"### To be continued.... will add random forest and deep learning models. Stay Tuned. Please upvote if found useful","31970284":"#### Hi everyone welcome to this kernel,In this kernel i am building XGBoost model and GBM model using H2o framework. <br>\n#### <font color='blue'>If you find this kernel useful please upvote.Also dont forget to upvote the original kernel.<\/font> <br>","7a52871b":"# Overview\n#### This kernel is based on last year's [Basic Starter Kernel](https:\/\/www.kaggle.com\/addisonhoward\/basic-starter-kernel-ncaa-men-s-dataset-2019).\n#### Adding XGB and GBM Models","dd0de975":"### Ensembling the XGBoost and GBM Model using GLM as meta algorithm","4692c647":"#### GBM Model summary","e8ad29e2":"#### Importing h2o framework library which runs on local host","7c7d471a":"## Prepare Training Data","7de705c0":"## Import Library & Load Data","4be9bf0f":"### GBM Model training parameters","8ab2f6e1":"## Merge Score","21141273":"## Merge Seed","a9fa3b35":"# Preparing testing data","7e92f824":"### XGBoost Model training parameters","ce1f1144":"#### Summary Of XGBoost Model"}}