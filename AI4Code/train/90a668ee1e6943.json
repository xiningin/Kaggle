{"cell_type":{"75abb9e7":"code","49eff24d":"code","907aa8c0":"code","c214c770":"code","28e8b4a9":"code","7824f05e":"code","3581218f":"code","6f1485c4":"code","12430db7":"code","c97932bc":"code","ee387b0e":"code","17ca5d82":"code","b6b82cb8":"code","6da648d9":"code","07bdca8f":"code","b521bff4":"code","b3cf6786":"code","e65b3592":"code","454d87db":"code","8799cc0e":"code","d7d64a33":"code","9d162c4b":"code","b52efede":"code","df0077f6":"code","ece54821":"code","02172911":"code","37e58e2b":"code","c8744102":"code","3aa5ece4":"code","efc3639c":"code","8b32c665":"code","14f34bc8":"code","99c733c6":"code","f7c05ce8":"code","ec5773f8":"code","b0578148":"code","1ab5da83":"code","cb97f0c1":"code","355bbd44":"code","6ce79fca":"code","a86f5eea":"code","9d6d7683":"code","2096dc4f":"code","a16d2a76":"code","eef8beaa":"code","60260236":"code","e3a24388":"code","de5440ab":"code","7dd79ee4":"code","be04a73c":"code","289f20a1":"code","afcc4ce8":"code","887de158":"code","2fab728b":"code","bd071b72":"code","d2e4838f":"code","eef288d8":"code","65b7b1f4":"code","b43374db":"code","b27a8dfa":"code","ebc51d8f":"code","ed72e5f1":"code","721ca76e":"code","acca64ef":"code","5577c79f":"code","05eed22e":"code","7b05a031":"code","d26349b9":"code","0ca9b43c":"code","3669216d":"code","bfbab6bd":"code","ab5a79fe":"code","d478eea9":"code","e44d8b8c":"code","2064b6af":"code","8ca0dd75":"code","714d3197":"code","c35c14ea":"code","2222dea5":"code","8f592bd4":"code","0f6fea54":"code","f448e8af":"code","8b64943f":"code","3a71e4d2":"code","4bec5b1a":"code","ee4b06f2":"code","f35c6014":"code","8411ca51":"code","dfed3941":"code","20696de0":"code","f3cd52a9":"code","ed8d02bf":"code","c1681e20":"code","207a4581":"code","59719a21":"code","508697de":"code","f760fa91":"code","d86d3de5":"code","0d2e148e":"code","3f534147":"code","36d98d19":"code","84f5b7da":"code","2378773d":"code","1649dc9d":"code","68635f37":"code","3a5b737b":"code","5fe4772a":"code","41fa738b":"code","e9eaa057":"code","c160b624":"code","9ef3fef7":"code","028dc36b":"code","1a9b7271":"code","f6e06306":"code","ec815dab":"code","6dea63d0":"code","b7f82c7e":"code","6c7cf2cf":"code","e64446fa":"code","06d4fb48":"code","8321b663":"code","28083a27":"code","ddec6e33":"code","6f3889fe":"code","136ffc05":"code","9bea9525":"code","b7428a5c":"code","5c5796fd":"code","4a8fe4dd":"code","359a9950":"code","d0c42d0d":"code","26b7ed1f":"code","e4802d01":"code","9fc1c2c6":"code","a1a8b34d":"code","c8e993dc":"code","9f3f9292":"code","c6f7c130":"code","38bfa2c6":"code","61b97101":"code","c3b4be78":"code","d4a385df":"code","b072ece8":"code","2b516a6d":"code","9a7b7d1a":"code","751fb1d9":"code","73acc032":"code","383610f7":"markdown","d5130b8c":"markdown","31b985e2":"markdown","98570412":"markdown","c0f24927":"markdown","b46ee09a":"markdown","cc7968b9":"markdown","e8a986a9":"markdown","d73f7db8":"markdown","f90b3f72":"markdown","7e84f0ae":"markdown","4f8ecd59":"markdown","733084f8":"markdown","85ed9b5d":"markdown","b5ad485f":"markdown","38697c91":"markdown","484673f3":"markdown","ef37f28a":"markdown","2e3f924f":"markdown","e7e21d9e":"markdown","d9a2d517":"markdown","2c0c8a7a":"markdown","9fe6ee41":"markdown","547ea301":"markdown","da45a89c":"markdown","2a2e6632":"markdown","5d5fb209":"markdown","0b89be1e":"markdown","92e08f6c":"markdown","8b73b1dc":"markdown","d34978fc":"markdown","6c22c21c":"markdown","2ed34f5c":"markdown","8951bfef":"markdown","8dcae928":"markdown","444ac4f6":"markdown","c52203d3":"markdown","f120d55d":"markdown","422094dc":"markdown","52cacb83":"markdown","6457d3a0":"markdown","53274f45":"markdown","250ce60d":"markdown","70a9605d":"markdown","6abbddb2":"markdown","19a0aa00":"markdown","6fc2ef2a":"markdown","824105eb":"markdown","a204ed56":"markdown","e05d5940":"markdown","d8dc98c4":"markdown","d59909fa":"markdown","5f3c4657":"markdown","89b26ec5":"markdown","20a62634":"markdown","b19dce54":"markdown","a450a982":"markdown","5b5852af":"markdown","26800965":"markdown","6fdf65d2":"markdown","0cba34b0":"markdown","45cadedb":"markdown","f265c691":"markdown","04eb1c16":"markdown","df0e1bfa":"markdown","29a9484b":"markdown","0de06aad":"markdown","47ff1e79":"markdown","92805994":"markdown","5d6775f8":"markdown","5bd7dfa6":"markdown","bd85f908":"markdown","5d64ae0a":"markdown","9f1e5b45":"markdown","94248ad2":"markdown","dac2ff4f":"markdown","d892d688":"markdown","513944a1":"markdown","39f5b3d9":"markdown","84e463c6":"markdown","bdf49420":"markdown","bb5c9c26":"markdown","cbc15405":"markdown","8cdc25f8":"markdown","41010f63":"markdown","8fe62444":"markdown","943a4ab4":"markdown","803368d7":"markdown","3d3a9632":"markdown","87da3ca6":"markdown"},"source":{"75abb9e7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)","49eff24d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","907aa8c0":"# Read the dataset Leads.csv\n\ndf = pd.read_csv(\"\/kaggle\/input\/lead-scoring-dataset\/Lead Scoring.csv\")\ndf.head()","c214c770":"\ndf.head()","28e8b4a9":"# Take a copy of the original dataset to assign the Lead score to the original rows. \n\ndf_orig = df.copy()","7824f05e":"df.describe()","3581218f":"df.shape","6f1485c4":"#df.info()","12430db7":"# Dividing the dataset into two dataset with Converted = 0 and Converted = 1\n\ndf_0=df.loc[df[\"Converted\"]==0]\ndf_1=df.loc[df[\"Converted\"]==1]","c97932bc":"# Calculating Imbalance percentage \n# Since the majority is target0 and minority is target1\nprint (f'Count of Converted = 0: {len(df_0)} \\nCount of Converted = 1: {len(df_1)}')\nprint (f'Imbalance Ratio is : {round(len(df_0)\/len(df_1),2)}')","ee387b0e":"# Plotting the imbalance Analysis:\nsns.set_style('whitegrid')\nfig, ax = plt.subplots(figsize = (6,4))\nplt.title('Imbalance Analysis',  fontsize=20)\nchart = sns.countplot(data=df, x='Converted', palette='muted')\nplt.xlabel('Converted', fontsize=18)\nplt.ylabel('count', fontsize=18)","17ca5d82":"# Converting 'Select' values to NaN.\ndf = df.replace('Select', np.nan)","b6b82cb8":"row1 , column1 = df.shape[0], df.shape[1]\n\n# delete duplicates\ndf = df.drop_duplicates() ","6da648d9":"row2 , column2 = df.shape[0], df.shape[1]\n\npercentRows = round ((row2\/row1 * 100), 2)\nprint (f'Rows retained after Duplicate Deletion: {row2} or {percentRows} percent')","07bdca8f":"# To find percent of Nan values\n# We can define a function to get the missing values and missing percentage for the dataframes.\ndef missing_data(data):\n    count_missing = data.isnull().sum().sort_values(ascending=False)\n    percent_missing = (data.isnull().sum() * 100 \/ len(data)).sort_values(ascending=False)\n    missing_value_df = pd.DataFrame({'count_missing': count_missing,\n                                 'percent_missing': percent_missing})\n    return missing_value_df","b521bff4":"#To find percent of Nan values \nmissing_data(df).head(20).transpose()","b3cf6786":"# To check if there are any duplicate values in Prospect ID and Lead Number columns\n\nprint (f'Duplicates in Prospect ID - {any(df[\"Prospect ID\"].duplicated())}')\nprint (f'Duplicates in Lead Number - {any(df[\"Lead Number\"].duplicated())}')","e65b3592":"# Dropping the columns as mentioned in the above comment. \ndropFeatures = ['Prospect ID', 'Lead Number']\ndf.drop(df[dropFeatures], axis=1, inplace=True)","454d87db":"# we will drop the columns having more than 70% NA values.\ndef drop_columns(data, miss_per):\n    cols_to_drop = list(round(100*(data.isnull().sum()\/len(data.index)), 2) >= miss_per )\n    dropcols = data.loc[:,cols_to_drop].columns\n    print (f'Features dropping now: {dropcols}')\n    data = data.drop(dropcols, axis=1)\n    return data","8799cc0e":"df = drop_columns(df, 70.0)","d7d64a33":"#missing_data(df).head(20)","9d162c4b":"# Analyse the score columns assigned by the sales team to the dataset before dropping them\n\nscoreFeatures = ['Lead Quality', 'Asymmetrique Activity Index', 'Asymmetrique Profile Index' ]\n\n# Count plot for the categorical variables\nsns.set(style='ticks',color_codes=True)\ncolors =['Accent', 'PiYG' , 'RdPu']\n\nplt.figure(figsize = (15,5))\nfor i in enumerate(scoreFeatures):\n    plt.subplot(1, 3, i[0]+1)\n    chart = sns.countplot(x = i[1], hue = 'Converted', data = df, palette = colors[i[0]])\n    chart.set_xticklabels(chart.get_xticklabels(), rotation=45, ha='right',)\n    plt.tight_layout()","b52efede":"# Analyse the score columns assigned by the sales team to the dataset\n\nfig, axis = plt.subplots(1, 2, figsize = (12,4))\nplt1 = sns.distplot(df_0['Asymmetrique Activity Score'], hist=False, kde=True , color='b' , ax = axis[0])\nplt1 = sns.distplot(df_1['Asymmetrique Activity Score'], hist=False, kde=True , color='r' , ax = axis[0])\nplt2 = sns.distplot(df_0['Asymmetrique Profile Score'], hist=False, kde=True , color='b' , ax = axis[1])\nplt2 = sns.distplot(df_1['Asymmetrique Profile Score'], hist=False, kde=True , color='r' , ax = axis[1])\nplt.tight_layout()","df0077f6":"# Drop the score columns assigned by the sales team to the dataset\n\ndf = drop_columns(df, 45.0)","ece54821":"df.columns","02172911":"# Drop the unwanted features\ndropFeatures = ['Tags', 'Last Notable Activity']\n\ndf.drop(dropFeatures, axis=1, inplace=True)","37e58e2b":"# A function to find the constant features. Constant features are those features which have only one distinct value.\n\ndef find_constant_features(df):\n    constFeatures = []\n    for column in list(df.columns):\n        if df[column].unique().size < 2:\n            constFeatures.append(column)\n    return constFeatures\n\nconstFeatures = find_constant_features(df)\nprint(constFeatures)","c8744102":"# Drop the constant features as they will not add value to the analysis\n\ndf = df.drop(constFeatures, axis=1)","3aa5ece4":"df.shape","efc3639c":"# Look at the number of unique categories in a column\ndef unique_count(data):\n    data_type = data.dtypes\n    unique_count = data.nunique()\n    \n    unique_count_df = pd.DataFrame({'data_type': data_type,\n                                 'unique_count': unique_count})\n    return unique_count_df","8b32c665":"unique_count(df).transpose() # Used transpose so as to avoid using more space. `","14f34bc8":"# Identify and separate all the Categorical, boolean and numeric features for analysis\ntargetFeature = []\ncatFeatures = []\nboolFeatures = []\nnumFeatures = []\n\nfor each in df.columns:\n    if each in ('Converted'):\n        targetFeature.append(each)\n    elif df[each].nunique() == 2:  #Features with only 2 unique values as boolean\n        boolFeatures.append(each)\n    elif df[each].dtype == 'object':\n        catFeatures.append(each)\n    elif df[each].dtype in ('int64','float64'):\n        numFeatures.append(each)\n    else:\n        numFeatures.append(each)","99c733c6":"print (f'The Target Feature is : \\n {targetFeature} \\n')\nprint (f'The Boolean Features are : \\n {boolFeatures} \\n')\nprint (f'The Categorical Features are : \\n {catFeatures} \\n')\nprint (f'The Numeric Features are :\\n {numFeatures} \\n')","f7c05ce8":"boolFeatures","ec5773f8":"# Convert the values 'Yes' and 'No' to 1 and 0 in the Binary Features. \n# value_counts is checked each time to ensure the mapping is done only once \n# If mapped multiple times, the values are converted to NaNs\n\nfor each in boolFeatures:\n    if df[each].value_counts().values.sum() > 0:  # To check if the step was already completed\n        df[each] = df[each].map(dict(Yes=1, No=0))\n        print (f'Binary mapping is completed for {each}')","b0578148":"# Convert the boolean features to type boolean\ndf[boolFeatures] = df[boolFeatures].astype('int64')","1ab5da83":"boolFeatures","cb97f0c1":"df.shape","355bbd44":"# Count plot for the Boolean variables\n# colors = ['Accent', 'PiYG' , 'RdPu', 'icefire' , 'ocean' , 'gist_earth', 'magma', 'plasma', 'rocket']\ncolors = ['Accent', 'ocean', 'rocket'] * 3\nsns.set(style='ticks',color_codes=True)\nplt.figure(figsize = (10,10))\nfor i, x_var in enumerate(boolFeatures):\n    plt.subplot(3, 3, i+1)\n    chart = sns.countplot(x = x_var, data = df, hue='Converted', palette=colors[i])\n    chart.set_xticklabels(chart.get_xticklabels())\n    plt.tight_layout()","6ce79fca":"# Identify the value counts of the boolean features to confirm if they have only one value\n\nfor each in boolFeatures:\n    print (df[each].value_counts(dropna=False))","a86f5eea":"# we can drop the boolean Features with most values as 0 as they all have the value True and do not help in the analysis\n\ndropFeatures = [ 'Do Not Call',\n                 'Search',\n                 'Newspaper Article',\n                 'X Education Forums',\n                 'Newspaper',\n                 'Digital Advertisement',\n                 'Through Recommendations']","9d6d7683":"# Drop the unwanted features\n\ndf.drop(dropFeatures, axis=1, inplace=True)","2096dc4f":"#To find percent of Nan values \nmissing_data(df).head(10)","a16d2a76":"df.shape","eef8beaa":"numFeatures","60260236":"# Analyze the numeric features\n\nsns.set(style='ticks',color_codes=True)\nfig = plt.figure(figsize = (15, 15))\ng = sns.pairplot(data=df, hue='Converted', vars=numFeatures + targetFeature);","e3a24388":"# Frequency Ditribution for Numeric Features\nsns.set(style='ticks',color_codes=True)\nplt.figure(figsize = (12, 12))\nfor i, x_var in enumerate(numFeatures):\n    plt.subplot(3, 2, i+1)\n    sns.distplot(df_0[x_var], hist=False, kde=True , color='b')\n    sns.distplot(df_1[x_var], hist=False, kde=True , color='r')\n    plt.tight_layout()","de5440ab":"df.Converted.dtype","7dd79ee4":"numFeatures","be04a73c":"# Box plot to identify the outliers\n# Frequency Ditribution for Numeric Features\nsns.set(style='ticks',color_codes=True)\ncolors = ['Accent', 'ocean' , 'RdPu']\nplt.figure(figsize = (12, 12))\nfor i, var in enumerate(numFeatures):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(x='Converted', y = var, data = df, palette =colors[i])\n    plt.tight_layout()","289f20a1":"cap_outliers = ['TotalVisits', 'Page Views Per Visit']","afcc4ce8":"# Cap the outliers for the Numeric features at 0.01 and 0.99\n\nfor i, var in enumerate(cap_outliers):\n    q1 = df[var].quantile(0.01)\n    q4 = df[var].quantile(0.99)\n    df[var][df[var]<=q1] = q1\n    df[var][df[var]>=q4] = q4","887de158":"# Box plot to visualise numeric features after outlier capping\nsns.set(style='ticks',color_codes=True)\ncolors = ['Accent', 'ocean' , 'RdPu'] # 'icefire' , 'ocean' , 'gist_earth', 'magma', 'prism', 'rocket', 'seismic']\nplt.figure(figsize = (12, 12))\nfor i, var in enumerate(numFeatures):\n    plt.subplot(3,3,i+1)\n    sns.boxplot(x = 'Converted', y = var, data = df, palette=colors[i])\n    plt.tight_layout()","2fab728b":"# Impute the missing values for the columns with Mean\n\ndf['TotalVisits'].fillna((df['TotalVisits'].mean()), inplace=True)\ndf['Page Views Per Visit'].fillna((df['Page Views Per Visit'].mean()), inplace=True)","bd071b72":"# Correlation Heat map for the numeric features\n\ncorrFeatures = numFeatures + targetFeature\n\nsns.set(style='ticks',color_codes=True)\nplt.figure(figsize = (6,6))\n\nsns.heatmap(df[corrFeatures].corr(), cmap=\"YlGnBu\", annot=True, square=True)\nplt.show()","d2e4838f":"numFeatures","eef288d8":"#To find percent of Nan values \n#missing_data(df).head(10)","65b7b1f4":"# Identify the Unique Counts for the categorical Features\n\nunique_count(df[catFeatures]).transpose() # Used transpose so as to avoid using more space. `","b43374db":"catFeatures","b27a8dfa":"unique_count(df[catFeatures]).sort_values(by = 'unique_count', ascending=False)","ebc51d8f":"catFeatures[:4]\ncatFeatures[4:]","ed72e5f1":"# Count plot for the categorical variables\nsns.set(style='ticks',color_codes=True)\n# colors =['Accent', 'PiYG' , 'RdPu', 'icefire' , 'ocean' , 'gist_earth', 'magma', 'prism', 'rocket', 'seismic']\ncolors =['gist_earth', 'magma', 'ocean', 'rocket'] * 2\nplt.figure(figsize = (15,12))\nfor i, x_var in enumerate(catFeatures[:4]):\n    plt.subplot(2, 2, i+1)\n    chart = sns.countplot(x = x_var, hue = 'Converted', data = df, palette = colors[i])\n    chart.set_xticklabels(chart.get_xticklabels(), fontsize=14, rotation=45, ha='right',)\n    plt.xlabel(x_var, fontsize=14)\n    plt.ylabel('count', fontsize=14)\n    plt.tight_layout()","721ca76e":"# Count plot for the categorical variables\nsns.set(style='ticks',color_codes=True)\n# colors =['Accent', 'PiYG' , 'RdPu', 'icefire' , 'ocean' , 'gist_earth', 'magma', 'prism', 'rocket', 'seismic']\ncolors =['gist_earth', 'magma', 'ocean', 'rocket'] * 2\nplt.figure(figsize = (15,12))\nfor i, x_var in enumerate(catFeatures[4:]):\n    plt.subplot(2, 2, i+1)\n    chart = sns.countplot(x = x_var, hue = 'Converted', data = df, palette = colors[i])\n    chart.set_xticklabels(chart.get_xticklabels(), fontsize=14, rotation=45, ha='right',)\n    plt.xlabel(x_var, fontsize=14)\n    plt.ylabel('count', fontsize=14)\n    plt.tight_layout()","acca64ef":"df.columns","5577c79f":"dropFeatures = ['Country', 'What matters most to you in choosing a course']\n\ndf.drop(dropFeatures, axis=1, inplace=True)","05eed22e":"df.columns","7b05a031":"catFeatures = []\n\nfor each in df.columns:\n    if df[each].dtype == 'object':\n        catFeatures.append(each)\n\ncatFeatures","d26349b9":"df['Lead Source'] = df['Lead Source'].replace(['google'], 'Google')","0ca9b43c":"# Replace all the NaN values for categorical variables\ndf['City'] = df['City'].replace(np.nan, 'Mumbai')","3669216d":"for each in catFeatures:\n    print (f'Value Counts for {each}: \\n {df[each].value_counts(dropna=False)} \\n')","bfbab6bd":"# Since there are so many categories in the categorical features with less than 2% counts each, we can \n# combine all those categories into one category called 'Others'\n\nfor each in catFeatures:\n    replaceFeatures = []\n    categories = df[each].value_counts()\n    list1 = df[each].value_counts().keys().tolist()\n    for i, v in enumerate (categories):\n        if v <= 200:  ## Anything less than 200\n            replaceFeatures.append(list1[i])\n    df[each] = df[each].replace(replaceFeatures, 'Others')\n    print (f'Categories replaced for column {each} are: \\n {replaceFeatures} \\n')","ab5a79fe":"#To find percent of Nan values \n# missing_data(df).head(20)","d478eea9":"# Replace all the NaN values with 'Missing' for the remaining Categorical variables with NaN in them\nnanFeatures = ['Specialization', 'What is your current occupation', 'Lead Source', 'Last Activity']\n\nfor each in nanFeatures:\n    df[each].replace(np.nan,'Missing', inplace=True)\n    print (f'NaNs are converted to \"Missing\" category for column {each}')","e44d8b8c":"catFeatures","2064b6af":"# Count plot for the categorical variables\nsns.set(style='ticks',color_codes=True)\nplt.figure(figsize = (25, 18))\ncolors = [ 'RdBu', 'rocket' , 'gist_earth'] * 2\nfor i, x_var in enumerate(catFeatures):\n    plt.subplot(2, 3, i+1)\n    chart = sns.countplot(x = x_var, hue = 'Converted', data = df, palette = colors[i])\n    chart.set_xticklabels(chart.get_xticklabels(), fontsize=16, rotation=45, ha='right')\n    plt.xlabel(x_var, fontsize=16)\n    plt.ylabel('count', fontsize=16)\n    plt.tight_layout()","8ca0dd75":"#To find percent of Nan values \nmissing_data(df).head()","714d3197":"catFeatures","c35c14ea":"# Getting dummy variables and adding the results to the master dataframe\n\nfor each in catFeatures:\n    dummy = pd.get_dummies(df[each], drop_first=False, prefix=each)\n    df = pd.concat([df,dummy],1)\n    print (f'dummy columns are added for the feature {each}')","2222dea5":"# Drop the sepcific dummy columns created after the dummy variables are added for these categorical columns\n\ndummydropFeatures = ['Lead Origin_Others', \n                     'City_Others',\n                     'Lead Source_Missing',\n                     'Specialization_Missing',\n                     'What is your current occupation_Missing',\n                     'Last Activity_Missing']\n\ndf.drop(dummydropFeatures, axis=1, inplace=True )","8f592bd4":"catFeatures","0f6fea54":"# Drop the original categorical columns since the dummy variables are added for these categorical columns\n\ndf.drop(catFeatures, axis=1, inplace=True )","f448e8af":"df.head()","8b64943f":"df.columns","3a71e4d2":"from sklearn.model_selection import train_test_split\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LogisticRegression\n#from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler","4bec5b1a":"# The target variable in y\ny = df['Converted']\ny.head()","ee4b06f2":"# The feature variables in X\n\nX=df.drop('Converted', axis=1)\nX.head()","f35c6014":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.7, test_size=0.3, random_state=101)","8411ca51":"numFeatures","dfed3941":"#### Scaling the numerical columns\nscaler = MinMaxScaler()\n\nX_train[numFeatures] = scaler.fit_transform(X_train[numFeatures])\n\nX_train.head()","20696de0":"# Build the Logistic Regression Model\nlogmodel = LogisticRegression()\n\nfrom sklearn.feature_selection import RFE\nrfe = RFE(logmodel, 20)             # running RFE with 20 variables as output\nrfe = rfe.fit(X_train, y_train)","f3cd52a9":"# print (rfe.support_)\n# list(zip(X_train.columns, rfe.support_, rfe.ranking_))","ed8d02bf":"#list of RFE supported columns\ncols = X_train.columns[rfe.support_]\ncols","c1681e20":"# Defining a function to generate the model by passing the model name and the columns used for the model \n\ndef gen_model(model_no, cols):\n    X_train_sm = sm.add_constant(X_train[cols])\n    model_no = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n    res = model_no.fit()\n    print (res.summary())\n    return res","207a4581":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\ndef calcVIF(col):\n    vif = pd.DataFrame()\n    vif['Features'] = X_train[col].columns\n    vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return vif","59719a21":"# Generate the first model using the RFE features\n\nlogm1 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm1, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","508697de":"res","f760fa91":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Specialization_Supply Chain Management',1)\nlogm2 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm2, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","d86d3de5":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Specialization_Banking, Investment And Insurance',1)\nlogm3 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm3, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","0d2e148e":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Specialization_Finance Management',1)\nlogm4 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm4, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","3f534147":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Specialization_Marketing Management',1)\nlogm5 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm5, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","36d98d19":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Lead Source_Reference',1)\nlogm6 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm6, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","84f5b7da":"# Dropping the next unwanted variable to pass to the model.\ncols = cols.drop('Page Views Per Visit',1)\nlogm7 = LogisticRegression()\n\n#Pass the columns to generate the model and print summary\nres = gen_model(logm7, cols)\n\n# Check the VIF for the features\ncalcVIF(cols).head(3)","2378773d":"# # Dropping the next unwanted variable to pass to the model.\n# cols = cols.drop('',1)\n# logm8 = LogisticRegression()\n\n# #Pass the columns to generate the model and print summary\n# res = gen_model(logm8, cols)\n\n# # Check the VIF for the features\n# calcVIF(cols).head(3)","1649dc9d":"# Getting the predicted values on the train set\n\nX_train_sm = sm.add_constant(X_train[cols])\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","68635f37":"y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Converted_prob':y_train_pred})\ny_train_pred_final['Prospect ID'] = y_train.index\ny_train_pred_final.head()","3a5b737b":"y_train_pred_final['Predicted'] = y_train_pred_final.Converted_prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","5fe4772a":"from sklearn.metrics import classification_report","41fa738b":"print (classification_report(y_train_pred_final['Converted'], y_train_pred_final['Predicted']))","e9eaa057":"from sklearn import metrics\nfrom sklearn.metrics import confusion_matrix","c160b624":"def get_metrics(actual, predicted):\n    confusion = confusion_matrix(actual, predicted)\n\n    # Let's check the overall accuracy.\n    Accuracy = metrics.accuracy_score(actual, predicted)\n\n    TN = confusion[0,0] # true negatives\n    FP = confusion[0,1] # false positives\n    FN = confusion[1,0] # false negatives\n    TP = confusion[1,1] # true positive \n\n    # Calculate the different Metrics\n    Sensitivity = TP \/ float(TP+FN) # calculate Sensitivity\n    Specificity = TN \/ float(TN+FP) # calculate specificity\n    Precision   = TP \/ float(TP+FP) # calculate Precision\n    Recall      = TN \/ float(TN+FP) # calculate Recall\n    FPR = (FP\/ float(TN+FP))        # Calculate False Postive Rate - predicting conversion when customer does not convert\n    PPV = (TP \/ float(TP+FP))       # positive predictive value \n    NPV = (TN \/ float(TN+ FN))      # Negative predictive value\n    \n    F1 = 2*(Precision*Recall)\/(Precision+Recall)\n\n    # Print the Metrics\n    print (f'The Confusion Matrix is \\n {confusion}')\n    print (f'The Accuracy is    : {round (Accuracy,2)} ({Accuracy})')\n    print (f'The Sensitivity is : {round (Sensitivity,2)} ({Sensitivity})')\n    print (f'The Specificity is : {round (Specificity,2)} ({Specificity})')\n    print (f'The Precision is   : {round (Precision, 2)} ({Precision})')\n    print (f'The Recall is      : {round (Recall, 2)} ({Recall})')\n    print (f'The f1 score is    : {round (F1, 2)} ({F1})')\n    print (f'The False Positive Rate is       : {round (FPR, 2)} ({FPR})')\n    print (f'The Positive Predictive Value is : {round (PPV, 2)} ({PPV})')\n    print (f'The Negative Predictive Value is : {round (NPV, 2)} ({NPV})')\n","9ef3fef7":"def plot_confusion_metrics(actual, predicted):\n    sns.set_style('white')\n    cm = confusion_matrix(actual, predicted)\n    plt.clf()\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Wistia)\n    classNames = ['Negative','Positive']\n    plt.title('True Converted and Predicted Converted Confusion Matrix', fontsize=14)\n    plt.ylabel('True Converted', fontsize=14)\n    plt.xlabel('Predicted Converted', fontsize=14)\n    tick_marks = np.arange(len(classNames))\n    plt.xticks(tick_marks, classNames, fontsize=14)\n    plt.yticks(tick_marks, classNames, fontsize=14)\n    s = [['TN','FP'], ['FN', 'TP']]\n    for i in range(2):\n        for j in range(2):\n            plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]), fontsize=14, ha='center')\n    plt.show()","028dc36b":"get_metrics(y_train_pred_final.Converted, y_train_pred_final.Predicted)","1a9b7271":"plot_confusion_metrics(y_train_pred_final.Converted, y_train_pred_final.Predicted)","f6e06306":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.show()","ec815dab":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Converted, \n                                          y_train_pred_final.Converted_prob, drop_intermediate = False )","6dea63d0":"draw_roc(y_train_pred_final.Converted, y_train_pred_final.Converted_prob)","b7f82c7e":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Converted_prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","6c7cf2cf":"numbers","e64446fa":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['probability','accuracy','sensitivity','specificity'])\nfrom sklearn.metrics import confusion_matrix\n\n#     TN = confusion[0,0] # true negatives\n#     FP = confusion[0,1] # false positives\n#     FN = confusion[1,0] # false negatives\n#     TP = confusion[1,1] # true positive \n    \nfor i in numbers:\n    cm1 = metrics.confusion_matrix(y_train_pred_final['Converted'], y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    specificity = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensitivity = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i , accuracy, sensitivity, specificity]\nprint(cutoff_df)","06d4fb48":"# Let's plot accuracy sensitivity and specificity for various probabilities.\n\nsns.set_style(\"whitegrid\") # white\/whitegrid\/dark\/ticks\nsns.set_context(\"paper\") # talk\/poster\ncutoff_df.plot.line(x='probability', y=['accuracy','sensitivity','specificity'], figsize=(10,6))\n\nplt.xticks(np.arange(0, 1, step=0.05), size = 12)\nplt.yticks(size = 12)\nplt.title('Accuracy, Sensitivity and Specificity for various probabilities', fontsize=14)\nplt.xlabel('Probability', fontsize=14)\nplt.ylabel('Metrics', fontsize=14)\nplt.show()","8321b663":"#### From the curve above, 0.36 is the optimum point to take it as a cutoff probability.\n\ny_train_pred_final['final_Predicted'] = y_train_pred_final.Converted_prob.map( lambda x: 1 if x > 0.36 else 0)\ny_train_pred_final.head()","28083a27":"# Get all the necessary Metrics for the Training dataset for cut-off 0.36\nprint (f'The Final Evaluation Metrics for the train Dataset: ')\nprint (f'----------------------------------------------------')\n\nget_metrics(y_train_pred_final['Converted'], y_train_pred_final['final_Predicted'])","ddec6e33":"# Plot Confusion metrics for final predicted for train data\n\nplot_confusion_metrics(y_train_pred_final.Converted, y_train_pred_final.final_Predicted)","6f3889fe":"# Classification report for the training dataset\nprint (classification_report(y_train_pred_final['Converted'], y_train_pred_final['final_Predicted']))","136ffc05":"# Assign a Lead score based on the predictions\n\ny_train_pred_final['Lead_Score'] = y_train_pred_final.Converted_prob.map( lambda x: round(x*100))\n\ny_train_pred_final[['Converted','Converted_prob','Prospect ID','final_Predicted','Lead_Score']].head()","9bea9525":"y_train_pred_final.head()","b7428a5c":"from sklearn.metrics import precision_recall_curve\n\np, r, thresholds = precision_recall_curve(y_train_pred_final['Converted'], y_train_pred_final['Converted_prob'])","5c5796fd":"# Plot the Precision \/ Recall tradeoff chart\nsns.set_style(\"whitegrid\") # white\/whitegrid\/dark\/ticks\nsns.set_context(\"paper\") # talk\/poster\n\nplt.figure(figsize=(8, 4), dpi=100, facecolor='w', edgecolor='k', frameon='True')\nplt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.xticks(np.arange(0, 1, step=0.05))\nplt.title('Precision and Recall for various probabilities', fontsize=14)\nplt.xlabel('Probability', fontsize=14)\nplt.ylabel('Metrics', fontsize=14)\nplt.show()","4a8fe4dd":"X_test.head()","359a9950":"# Fit the Numeric features of the Test dataset with the Scaler method\nX_test[numFeatures] = scaler.transform(X_test[numFeatures])\nX_test.head()","d0c42d0d":"X_test.shape","26b7ed1f":"cols","e4802d01":"# Making Predictions on the X_test dataset\n\nX_test = X_test[cols]\nX_test_sm = sm.add_constant(X_test)\nX_test.head()","9fc1c2c6":"y_test_pred = res.predict(X_test_sm)","a1a8b34d":"y_test_pred[:5]","c8e993dc":"# Converting y_pred to a dataframe from an array\ny_test_pred_df = pd.DataFrame(y_test_pred)\n\n# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)\n\n# Putting CustID to index\ny_test_pred_df['Prospect ID'] = y_test_df.index\n\n# Removing index for both dataframes to append them side by side \ny_test_pred_df.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)\n\n# Appending y_test_df and y_testest_pred_1\ny_test_pred_final = pd.concat([y_test_df, y_test_pred_df],axis=1)\n\n# Renaming the column \ny_test_pred_final= y_test_pred_final.rename(columns={ 0 : 'Converted_prob'})\ny_test_pred_final.head(10)","9f3f9292":"# Rearranging the columns\ny_test_pred_final = y_test_pred_final[['Prospect ID','Converted','Converted_prob']]\ny_test_pred_final['Lead_Score'] = y_test_pred_final.Converted_prob.map( lambda x: round(x*100))\ny_test_pred_final.head()","c6f7c130":"# Predict the final y values based on the threshold of 0.3\ny_test_pred_final['final_Predicted'] = y_test_pred_final['Converted_prob'].map(lambda x: 1 if x > 0.36 else 0)\n\ny_test_pred_final.head()","38bfa2c6":"# Get all the necessary Metrics for the Test dataset \n\nprint (f'The Final Evaluation Metrics for the test Dataset: ')\nprint (f'---------------------------------------------------')\nget_metrics(y_test_pred_final['Converted'], y_test_pred_final['final_Predicted'])","61b97101":"# Plot Confusion metrics for final predicted for test data\n\nplot_confusion_metrics(y_test_pred_final.Converted, y_test_pred_final.final_Predicted)","c3b4be78":"# Print the classification report for the Test Dataset\nprint (classification_report(y_test_pred_final['Converted'], y_test_pred_final['final_Predicted']))","d4a385df":"y_train_pred_final.head()","b072ece8":"# Create Dataset with y_train Prospect ID and Lead score\ny_train_score = y_train_pred_final[['Prospect ID','Lead_Score']]\n\n# Create Dataset with y_test Prospect ID and Lead score\ny_test_score = y_test_pred_final[['Prospect ID','Lead_Score']]\n\n# Concatenate the y_train scores and the y_test scores\ndf_score = pd.concat([y_train_score, y_test_score], ignore_index=True)\n\n# Set the index of the final score dataset as the Prospect ID to concatenate the score dataset to the original data\ndf_score.set_index('Prospect ID', inplace=True)\n\n# Inner Join the Original Leads dataset with the scores dataset. This will add a new column 'Lead_Score' to the \n# Original dataset. \ndf_orig = df_orig.join(df_score['Lead_Score'])\n\ndf_orig.head()","2b516a6d":"pd.options.display.float_format = '{:.2f}'.format\nmodel_params = res.params[1:]\nmodel_params","9a7b7d1a":"#feature_importance = abs(new_params)\n\nfeature_importance = model_params\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nfeature_importance","751fb1d9":"# Sort the feature variables based on their relative coefficient values\n\nsorted_idx = np.argsort(feature_importance,kind='quicksort',order='list of str')\nsorted_idx","73acc032":"# Plot to show the realtive Importance of each feature in the model \npos = np.arange(sorted_idx.shape[0]) + .5\n\nfig = plt.figure(figsize=(10,6))\nax = fig.add_subplot(1, 1, 1)\nax.barh(pos, feature_importance[sorted_idx], align='center', color = 'tab:blue',alpha=0.8)\nax.set_yticks(pos)\nax.set_yticklabels(np.array(X_train[cols].columns)[sorted_idx], fontsize=12)\nax.set_xlabel('Relative Feature Importance', fontsize=14)\n\nplt.tight_layout()   \nplt.show()","383610f7":"**Create a Dataset with the Prospect ID and the conversion probability for the test dataset**","d5130b8c":"----------","31b985e2":"**Define a function to get the missing values and missing percentage for the dataframes.**","98570412":"#### Impute the missing values with mean for 'TotalVisits' and 'Page Views Per Visit' \n\n* After the outlier handling, the mean of the columns for the columns 'TotalVisits' and 'Page Views Per Visit' are same for \n  converted and non converted leads. \n* We can impute the missing values with mean for the columns.","c0f24927":"#### Observations:\n\n* Only two fields, 'A free copy of Mastering The Interview' and 'Do Not Email' have values for 1 and 0\n* All the other binary features have a very high percent of values as No.\n* We can drop these columns as they will not contribute to the analysis.","b46ee09a":"### <span style=\"color:navy\">  2.3. Drop the unwanted variables \n\nSince we do not need all the columns provided in the dataset for our analysis, we can drop some of the columns based on our analysis.  ","cc7968b9":"--------------","e8a986a9":"**Get the Final evaluation Metrics for the test dataset with the actual converted values and final predicted values**","d73f7db8":"#### Bucketing the categories with lesser count for the categorical features","f90b3f72":"## <span style=\"color:navy\"> 7. Determining Feature Importance","7e84f0ae":"### <span style=\"color:navy\"> 4.7 Evaluation Metrics for the Train dataset\n    \n**Derive the Classification report and Classification metrics with the initial cutoff and predictions**","4f8ecd59":"------","733084f8":"**Derive the Area under the ROC curve for the initial cut-off and predictions**","85ed9b5d":"-------------","b5ad485f":"-----------------","38697c91":"###  <span style=\"color:navy\"> 4.8 Getting the Optimal cutoff and final evaluation Metrics for Train Dataset\n    \n**Calculate the predicted values for the different cut-offs to arrive at the optimal cutoff**","484673f3":"#### Replace the missing values for 'City' column with the mode","ef37f28a":"**Splitting the data into train and test**","2e3f924f":"* **Drop the columns 'Tag' and 'Last Activity' as the columns are added by Sales team while working on the leads and does not directly contribute to identifying the hot leads**","e7e21d9e":"#### Sorting the feature variables based on their relative coefficient values","d9a2d517":"#### Identify all the Categorical, boolean and numeric features","2c0c8a7a":"## <span style=\"color:navy\"> 4. Model Building\n    \nNow that the data analysis is completed, data is cleaned and outliers handled, we can proceed to building the model. ","9fe6ee41":"### <span style=\"color:navy\"> 3.3 EDA and missing values handling for the Numeric Features","547ea301":"---------------","da45a89c":"### <span style=\"color:navy\">   2.2 Find missing values and delete columns with a lot of missing values\n\nFor our analysis, we have to find the columns with missing values and handle them by either deleting or imputing. ","2a2e6632":"### <span style=\"color:navy\"> 4.4 Build the Logistic Regression model with RFE features","5d5fb209":"**Get the final Predicted values using the optimal threshold value**","0b89be1e":"### Model - Iteration 3","92e08f6c":"#### Drop the duplicate rows if any","8b73b1dc":"### <span style=\"color:navy\"> 4.1 Get Dummy Variables:\n    \n* For all the categorical features, dummy variables need to be created.\n* Instead of dropping the first dummy varibale for each categorical variable (using drop_first = True), we can select a specified dummy variable and drop it, so that we can have explainable features. ","d34978fc":"**Calculate the percentage of the retained rows**","6c22c21c":"**Generate the Lead Score for the test dataset based on the predicted probability from the model**","2ed34f5c":"#### Getting a relative coeffient value for all the features wrt the feature with the highest coefficient","8951bfef":"### <span style=\"color:navy\"> 1.2 Imbalance Analysis\n\n**To check the balance and data with respect to the target variable - 'Converted'**\n    \nThe data is not too much imbalanced. As such, we can proceed with the data for analysis and model building","8dcae928":"## <span style=\"color:navy\"> 2. Data Cleaning\n1. Replace the 'Select' value in the categorical values to NaN. \n2. Check Percentage of Missing values for all columns\n3. Drop columns with a high percentage of missing values\n4. Drop categorical columns that are highly skewed\n5. Impute columns with less percentage of missing values\n6. We can also drop the columns that were completed by the Sales team after progressing with the leads. ","444ac4f6":"-------------","c52203d3":"#### Replace the values with spelling corrections in the categories for categorical columns","f120d55d":"### <span style=\"color:navy\"> 3.2 Univariate Analysis of Boolean Features\n\n* Convert the values 'Yes' and 'No' to 1 and 0 in the Binary Features. \n* Check if the columns are skewed and drop them if they are skewed.","422094dc":"**Get the final_Predictions and the metrics for the Predictions with the optimal cut-off**","52cacb83":"### <span style=\"color:navy\"> 1. Import Libraries and Initial Data Analysis","6457d3a0":"### <span style=\"color:navy\"> 4.6 Getting the predicted values on the train set\n    \nThe following steps are done after building the model\n    \n* Get the predictions on the training dataset with the final model \n* Use the cut-off with 0.5 for the initial predictions\n* Derive the Classification report and Classification metrics with the initial cutoff and predictions\n* Derive the Area under the ROC curve for the initial cut-off and predictions\n* Calculate the predicted values for the different cut-offs to arrive at the optimal cutoff\n* Plot the Sensitivity \/ Specificity curve for the different cut-offs and identify the optimal cut-off\n* Get the final_Predictions and the metrics for the Predictions with the optimal cut-off\n* Assign a Lead Score to the Training dataset based on the Conversion probability of the final_Predictions\n* Measuring the Precision Recall Trade-off","53274f45":"-------------","250ce60d":"### Model - Iteration 4","70a9605d":"### Model - Iteration 1","6abbddb2":"#### Outlier Handling for the Numeric Features\n\nThe features 'TotalVisits', 'Page Views Per Visit' have outliers and they can be capped at 0.01 and 0.99 th quantiles","19a0aa00":"#### Create a funtion to drop the columns with a certain percentage of NaN values\n\nWe can drop certain columns with more than certain percentage of missing values. As they have high value of missing percentage, they will not be indicative of the correct weight of the columns in prediction.","6fc2ef2a":"**Plot the Sensitivity \/ Specificity curve for the different cut-offs and identify the optimal cut-off**","824105eb":"#### Selecting the coefficients of the selected features from our final model excluding the intercept","a204ed56":"### Model - Iteration 8","e05d5940":"#### Drop the columns with more than 70% NaN values","d8dc98c4":"#### <span style=\"color:blue\"> From the curve above, 0.36 can be taken as the optimum point to take it as a cutoff probability","d59909fa":"**Assign a Lead Score to the Training dataset based on the Conversion probability of the final_Predictions**","5f3c4657":"**There are no missing values and we can proceed with the model building**","89b26ec5":"### Model - Iteration 6","20a62634":"#### Identify the number of unique features in a column","b19dce54":"#### Drop the columns with more than 45% NaN values\n\nAs all the score features have more than 45% Nan values, these can be dropped without affecting our analysis. ","a450a982":"#### Drop Prospect ID and Lead Number as they are unique identifiers and need not be used in prediction\n\nClearly Prospect ID and Lead Number are two variables that represent the unique identfier of the Contacted People and as such will not add value to the model. These columns can be dropped. There are no duplicates int he Prospect ID and the Lead Number columns.","5b5852af":"**Making Predictions on the X_test dataset using the final model**","26800965":"### <span style=\"color:navy\"> 4.3 Scaling the Numerical features \n    \n* The Numeric features need to be scaled before building the model. \n* 'TotalVisits', 'Total Time Spent on Website', 'Page Views Per Visit' are the numeric features to be scaled. ","6fdf65d2":"---------------","0cba34b0":"#### Replace the missing values with 'Missing' category for categorical columns","45cadedb":"# <span style=\"color:navy\"> Lead Scoring for X Education \n#### <span style=\"color:navy\"> A case study in Logistic Regression","f265c691":"### <span style=\"color:navy\">  1.1 Summary Data Analysis","04eb1c16":"### <span style=\"color:navy\"> Problem Statement\n\nAn education company named X Education sells online courses to industry professionals. The professionals who are interested in the courses land on their website and browse for courses. \n\nThe company markets its courses on several websites and search engines like Google. Once these people land on the website, they might browse the courses or fill up a form for the course or watch some videos. When these people fill up a form providing their email address or phone number, they are classified to be a lead. The company also gets leads through past referrals. Once these leads are acquired, employees from the sales team start making calls, writing emails, etc. Through this process, some of the leads get converted while most do not. The typical lead conversion rate at X education is around 30%. \n\nNow, although X Education gets a lot of leads, its lead conversion rate is very poor. To make this process more efficient, the company wishes to identify the most potential leads, also known as \u2018Hot Leads\u2019. If they successfully identify this set of leads, the lead conversion rate should go up as the sales team will now be focusing more on communicating with the potential leads rather than making calls to everyone. \n\n### <span style=\"color:navy\"> Objective: \n\nThe objective is to help X Education select the most promising leads by building a model and assigning a lead score to each of the leads such that the customers with higher lead score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%.","df0e1bfa":"### <span style=\"color:navy\"> 5.2 Final Evaluation Metrics for the Test Dataset","29a9484b":"#### Drop the unwanted columns: \n* **Drop the columns 'Country' and 'What matters most to you in choosing a course' as these are highly skewed**\n","0de06aad":"---------------","47ff1e79":"## <span style=\"color:navy\"> 6. Assigning the Lead score for each Prospect ID from the original data\n\nThe final step is to merge the datasets from Train and Test datasets with the predicted Lead Score and attach the Lead score to the original dataset. ","92805994":"**Delete the constant features**","5d6775f8":"**Get the predictions on the training dataset with the final model.**\n* Use the cut-off with 0.5 for the initial predictions.","5bd7dfa6":"## <span style=\"color:navy\"> 5. Model Validation \n    \nThe next step is to validate the model with the test dataset. \n\nThe following are the steps invoved:\n* Fit the Numeric features of the Test dataset with the Scaler method\n* Making Predictions on the X_test dataset\n* Create a Dataset with the Prospect ID and the conversion probability for the test dataset\n* Generate the Lead Score for the test dataset based on the predicted probability from the model\n* Get the final Predicted values using the optimal threshold value\n* Get the Final evaluation Metrics for the test dataset with the actual converted values and final predicted values\n\n    \n### <span style=\"color:navy\"> 5.1 Making Predictions for the Test Dataset","bd85f908":"------------------","5d64ae0a":"#### <span style=\"color:navy\"> The Final Evaluation Metrics for the train Dataset: \n\n* The Accuracy is    : 0.80\n* The Sensitivity is : 0.80\n* The Specificity is : 0.81\n* The Precision is   : 0.73\n* The Recall is      : 0.81\n* The f1 score is    : 0.76\n    \n#### <span style=\"color:navy\"> The Final Evaluation Metrics for the test Dataset: \n\n* The Accuracy is    : 0.81\n* The Sensitivity is : 0.81\n* The Specificity is : 0.81\n* The Precision is   : 0.72\n* The Recall is      : 0.81\n* The f1 score is    : 0.76\n    \n#### <span style=\"color:navy\"> X-Education has a better chance of converting a potential lead when:\n* **The total time spent on the Website is high:**\nLeads who have spent more time on the website have converted\n* **Current Occupation is specified:**\nLeads who are working professionals have high chances of getting converted. People who were looking for better prospects like Unemployed, students, Housewives and Business professionals were also good prospects to focus on. \n* **When the Lead origin was Lead Add form**\nLeads who have responded\/ or engaged through Lead Add Forms have had a higher chances of getting converted\n* **Number of Total Visits were high** \nLeads who have made a greater number of visits have higher chances of getting converted. \n* **When the last activity was SMS sent or Email opened**\nMembers who have sent an SMS for enquiry or who have opened the email have a higher chance of getting converted.","9f1e5b45":"#### Visualize the Categorical variables after handling missing values and bucketing","94248ad2":"-------------","dac2ff4f":"### <span style=\"color:navy\"> 2.1 Convert 'Select' values to NaN\n\nReplace the 'Select' value in the categorical values to NaN. These values are mostly from dropdown menus where nothing is selected","d892d688":"#### Measuring the Precision Recall Trade-off","513944a1":"## <span style=\"color:navy\"> 3. EDA and Data Visualizations for futher analysis\n\nThe next step is to visualise the data using matplotlib and seaborn.\n\nThis is one of the most important step - understanding the data. This step will help us understand the properties of data.\n\n* Helps to identify any outliers.\n* If there is some obvious multicollinearity going on, this can be identified here.\n* Identify the data types of the features and make any conversions if needed.\n    \n### <span style=\"color:navy\"> 3.1 Check the data types of all the columns and make changes if needed\n\n* The Constant features can be removed. Constant features are those features that have only one value.\n* The Categorical features should be identified to create the Dummy variables for them later.\n* The Boolean features ('Yes' or 'No' features) can be mapped to 0 and 1 to prepare them for modeling. ","39f5b3d9":"**Analysis of Score columns assigned by the Sales Team**\n\nThe following are the score columns assigned by the sales team to the dataset after progressing with the leads. \nThese columns can be dropped as they will not add to the model building. \n\nAnalyse the following features before dropping them. \n\n* Lead Quality \n* Asymmetrique Activity Index\n* Asymmetrique Profile Index\n* Asymmetrique Activity Score\n* Asymmetrique Profile Score","84e463c6":"### Model - Iteration 5","bdf49420":"### Model - Iteration 7","bb5c9c26":"#### Plot showing the feature variables based on their relative coefficient values","cbc15405":"### <span style=\"color:navy\"> 4.2 Train-Test Split and Logistic Regression Model Building:\n\nThe following steps are followed in building a model: \n    \n* Import the necessary packages for model preprocessing and model building\n* Split the train data and test data at 70% and 30%\n* Scale the Numeric features using MinMaxScaler\n* Build the model using a combination of automatic and manual processing\n* Start the model with RFE features (automatic) and use feature reduction by dropping one feature at a time. \n* Build the model and fit the training data.","8cdc25f8":"### <span style=\"color:navy\"> 4.5 Building Iterations of the model after reducing the features\n    \nThe next step is to build iterations of the model after dropping one feature at a time using P values and VIFs","41010f63":"### Model - Iteration 2","8fe62444":"-----","943a4ab4":"-------------------","803368d7":"### <span style=\"color:navy\"> 3.4 EDA and Data analysis for Categorical Features","3d3a9632":"## <span style=\"color:navy\"> 8. Final Observations and Recommendations","87da3ca6":"**Fit the Numeric features of the Test dataset with the Scaler method**"}}