{"cell_type":{"bc9bb4df":"code","b8eaa668":"code","2215f99c":"code","794e3fe3":"code","7d40a97d":"code","77dc4334":"code","253e6ad3":"code","7e2815f8":"code","1e94b737":"code","fa20c388":"code","4875d0d4":"code","8fba0567":"code","8d476f15":"code","a79c9ffa":"code","2964b153":"code","54585d6b":"code","58b17105":"code","9aed1a3c":"code","ca3eb2a7":"code","c2c14d4c":"markdown","6a4246c2":"markdown","502f6bf9":"markdown","e6d25c1d":"markdown","cccc6cfe":"markdown","9e745cdc":"markdown","149adde9":"markdown","cb8e3d36":"markdown","2fae74a0":"markdown","ab5a5a82":"markdown","1e62c29f":"markdown","40ffe14b":"markdown","6940963a":"markdown","89ea07b0":"markdown","fdf5cf3c":"markdown","6744ca22":"markdown","2a27dbc1":"markdown","2356a56e":"markdown"},"source":{"bc9bb4df":"# .. Modules\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.widgets import Slider, Button\nimport datetime as dt","b8eaa668":"# Propagate Equations 1-5 forward in time\ndef propagate(beta0, gamma, theta, delta, N, total_days):\n    '''\n    This code propagates Equations 1-5 forward in time.\n    \n    Here, beta is constant\n    and there is no parameter alpha\n    '''\n    # .. Preallocate terms\n    S = np.zeros(total_days)\n    I = np.zeros(total_days)\n    R = np.zeros(total_days)\n    D = np.zeros(total_days)\n    C = np.zeros(total_days)\n    \n    # .. Set 0th elements\n    S[0] = N-1\n    I[0] = 1\n    \n    # Propagate disease forward in time\n    for t in range(total_days-1):\n        # .. For each time step, get Eqns 1-5\n        delta_S = - beta0 * S[t] * I[t]\/N                   # Eqn (1)\n        delta_I = beta0 * S[t] * I[t]\/N - gamma * I[t]      # Eqn (2)\n        delta_R = gamma * I[t] - theta * R[t]               # Eqn (3)\n        delta_D = delta * theta * R[t]                      # Eqn (4)\n        delta_C = (1-delta) * theta * R[t]                  # Eqn (5)\n        \n        # .. Increment S, I, R, D, and C\n        S[t+1] = S[t] + delta_S                  # Susceptible\n        I[t+1] = I[t] + delta_I                  # Infectious\n        R[t+1] = R[t] + delta_R                  # Resolving\n        D[t+1] = D[t] + delta_D                  # Deceased\n        C[t+1] = C[t] + delta_C                  # ReCovered\n    return S, I, R, D, C","2215f99c":"#%matplotlib notebook","794e3fe3":"# .. Parameters\nN = 1e6                                # Total number of people\nnumber_of_days_infectious = 5.         # length of time a person is infectious (days)\ndays_to_resolve = 10.                  # time for case to resolve after infectious (days)\ndelta = 0.008                          # death rate\nbeta0 = 0.44                           # infections\/day\/person\n\n# .. Derived terms\ngamma = 1\/number_of_days_infectious   \ntheta = 1\/days_to_resolve\nR0 = beta0 \/ gamma                     # Basic reproduction number","7d40a97d":"# .. Print the basic reproduction number\nprint('R0 = beta \/ gamma: ', np.round(R0,2))       ","77dc4334":"total_days = 150\n\n# .. Propagate COVID-19 with a constant beta\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\n# .. Plot the SIRD model results\n%matplotlib notebook\n\nfig, ax1 = plt.subplots(num = 1)\n\n# .. Curves that use the left-hand y-axis\nax1.plot(S\/1000, linewidth=2, label = 'Susceptible')\nax1.plot(I\/1000, linewidth=2, color ='red', label = 'Infectious')\nax1.plot(R\/1000, linewidth=2, color = 'orange', label = 'Resolving')\nax1.plot(C\/1000, linewidth=2, color = 'green', label = 'ReCovered')\n\nax1.legend(loc=[.01,.6])\nax1.set_xlabel('Days')\nax1.set_ylabel('People (thousands)')\nax1.axis([0, 100, -.005, 1.02e3])\n\n# .. Curves that use the right-hand y-axis\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.plot(D\/1000, 'k--', linewidth=2, label='Deceased \\n(right y-axis)')\nax2.set_ylabel('Deceased (thousands)', color = 'k')\nax2.tick_params(axis='y') \nax2.legend(loc=[.65,.5])\nax2.axis([0, total_days, -.05, 10])\nplt.title(r'SIRD model, constant R$_0 = \\beta\/ \\gamma$ = ' + str(np.round(R0,2)))\n","253e6ad3":"# .. Set slider attributes that can be used here and reused later\n\n# .. The reset button on the slider\ndef slider_reset(event):\n    s_beta.reset()\n    \n# .. Color for slider elements\naxcolor = 'grey'","7e2815f8":"total_days = 600\n\n# .. Repeat the above but with a slider\nfig, ax1 = plt.subplots(num=2)\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nplt.subplots_adjust(bottom=0.3)\n\n# .. Propagate COVID-19 with a constant beta\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\nsusceptible, = ax1.plot(S\/1000, linewidth=2, label='Susceptible')\ninfectious, = ax1.plot(I\/1000, color = 'red', linewidth=2, label='Infectious')\nresolving, = ax1.plot(R\/1000, color = 'orange', linewidth=2, label='Resolving')\nrecovered, = ax1.plot(C\/1000, color = 'green', linewidth=2, label='Recovered')\n\nax1.legend(loc=[.01,.5])\nax1.set_xlabel('Days')\nax1.set_ylabel('People (thousands)')\nax1.axis([0, total_days, -.005, 1050])\nax1.set_title('SIRD model, 1 million people, constant R$_0$ = ' + str(np.round(beta0 \/ gamma,2)))\n\ndead, = ax2.plot(D\/1000, 'k--', linewidth=2, label='Deceased \\n(right y-axis)')\nax2.legend(loc=[.65,.3])\nax2.axis([0, total_days, -.05, 10.5])\nax2.set_ylabel('Deceased (Thousands)')\n\n# sliders\nax_beta = plt.axes([0.2, 0.1 , 0.65, 0.03], facecolor=axcolor)\ns_beta = Slider(ax_beta, 'beta', 0.18, 1., valinit=beta0, valstep=0.01)\n\ndef update(val):\n    \n    beta0 = s_beta.val\n    \n    # .. Propagate COVID-19 with a constant beta\n    S, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\n    susceptible.set_ydata(S\/1000)\n    infectious.set_ydata(I\/1000)\n    resolving.set_ydata(R\/1000)\n    recovered.set_ydata(C\/1000)    \n    dead.set_ydata(D\/1000)\n    ax1.set_title('SIRD model, constant R$_0$ = ' + str(np.round(beta0 \/ gamma, 2)))\n\n    fig.canvas.draw_idle()\n    \ns_beta.on_changed(update)\nresetax = plt.axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')\n    \nbutton.on_clicked(slider_reset)","1e94b737":"# .. Propagate COVID-19 with a constant beta\nbeta0 = 0.44                                       # infections\/day\/person\ntotal_days = 200\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)","fa20c388":"# .. Look at daily results for SIRD model\nfig, ax1 = plt.subplots(num = 3)\nax2 = ax1.twinx()\n\nax1.plot(I\/1000, linewidth = 2, label = 'Infectious')\nax1.plot(-(S[1:]-S[:-1])\/1000, linewidth = 2, label = 'Infections\/day')\nax1.legend(loc = [.02, .82])\nax1.set_xlabel('Days')\nax1.set_ylabel('People (Thousands)')\nax1.axis([10, 150, 0, 220])\n\nax2.plot((D[1:]-D[:-1]), 'k--', linewidth = 2, label = 'Deaths\/day')\nax2.set_ylabel('People, deceased')\nax2.legend(loc = [.72, .9])\nax2.axis([10, 150, 0, 400])\n\nplt.title(r'SIRD model, 1 million people, constant R$_0$ = ' + str(np.round(beta0\/gamma,2)))","4875d0d4":"beds_per_person = 34.7\/100000        # Critical care beds in the U.S.\nhospitalization_rate = 0.02*0.693    # Fraction of infectious+resolving who are hospitalized on any given day","8fba0567":"# .. Propagate COVID-19 with a constant beta\nbeta0 = 0.44                                       # infections\/day\/person\ntotal_days = 200\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\n# .. Available and necessary critical care beds\nplt.figure(4); plt.cla()\nplt.semilogy(I+R, linewidth = 2, color = 'r', label = 'Infectious+Resolving')\nplt.plot(beds_per_person*N + (I*0), linewidth = 2, label = 'Beds available')\nplt.plot(hospitalization_rate*(I+R), linewidth = 2, label = 'Beds needed')\nplt.legend()\nplt.xlabel('Days')\nplt.ylabel('People')\nplt.axis([0, 200, 1, 1e6])\nplt.title(r'SIRD model, 1 million people, constant R$_0$ = ' + str(np.round(beta0\/gamma,2)))","8d476f15":"total_days = 365*2\nbeta0 = 0.44\n\n# .. Propagate COVID-19 with a constant beta\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\n# .. Repeat the above but with a slider\nfig, ax1 = plt.subplots(num=5)\nplt.subplots_adjust(bottom=0.3)\n\ninfectious, = ax1.semilogy(I+R, linewidth = 2, label = 'Total Infectious and Resolving')\nbeds_needed, = ax1.semilogy(hospitalization_rate*(I+R), linewidth = 2, label = 'Beds needed')\nbeds_available, = ax1.plot(beds_per_person*N+(I*0), linewidth = 2, label = 'Beds available')\nax1.legend()\nax1.set_xlabel('Days')\nax1.set_ylabel('People')\nax1.set_title(r'SIRD model, 1 million people, constant R$_0$ = ' + str(np.round(beta0\/gamma,2)))\nax1.axis([0, total_days, 1, 1e6])\n\n# sliders\nax_beta = plt.axes([0.2, 0.1 , 0.65, 0.03], facecolor=axcolor)\ns_beta = Slider(ax_beta, 'beta', 0.2, 1.0, valinit=beta0, valstep=0.01)\n\ndef update(val):    \n    beta0 = s_beta.val\n    \n    # .. Propagate COVID-19 with a constant beta\n    S, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n    \n    infectious.set_ydata(I+R)\n    beds_needed.set_ydata(hospitalization_rate*(I+R))\n    \n    ax1.set_title(r'SIRD model, 1 million people, constant R$_0$ = ' + str(np.round(beta0\/gamma,2)))\n    ax1.axis([0, total_days, 1, 1e6])\n    fig.canvas.draw_idle()\n    \ns_beta.on_changed(update)\nresetax = plt.axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')\nbutton.on_clicked(slider_reset)","a79c9ffa":"# Propagate Equations 1-5 forward in time\ndef propagate_beta_t(gamma, theta, delta, N, total_days, beta0, beta_esd, beta_rsd, \n                     fraction_to_open, fraction_to_distance):\n    '''\n    This code propagates Equations 1-5 forward in time\n    for a time-varying beta\n    \n    We start with beta0 infections\/person\/day, assuming no social distancing.\n    When the fraction of available beds that are full exceeds fraction_to_distance,\n    we implement extreme social distancing (esd), using beta_esd.\n    When a certain fraction of beds frees up (fraction_to_open), we relax \n    social distancing to beta_rsd.\n    '''\n    \n    # .. The total number of beds available is constant\n    beds_available = beds_per_person * N\n\n    # .. Preallocate terms\n    S = np.zeros(total_days)\n    I = np.zeros(total_days)\n    R = np.zeros(total_days)\n    D = np.zeros(total_days)\n    C = np.zeros(total_days)\n    \n    # .. Set 0th elements\n    S[0] = N-1\n    I[0] = 1\n    \n    beta = beta0                                        # Start with non-social-distancing beta\n    state = np.zeros(total_days)                        # 0=> open, 1=> closed               \n    beta_t = beta0*np.ones(total_days)                  # beta as a function of time             \n    # Propagate disease forward in time\n    for t in range(total_days-1):\n        \n        state[t+1] = state[t]\n        \n        # .. For each time step, get Eqns 1-5\n        delta_S = - beta * S[t] * I[t]\/N                    # Eqn (1)\n        delta_I = beta * S[t] * I[t]\/N - gamma * I[t]       # Eqn (2)\n        delta_R = gamma * I[t] - theta * R[t]               # Eqn (3)\n        delta_D = delta * theta * R[t]                      # Eqn (4)\n        delta_C = (1-delta) * theta * R[t]                  # Eqn (5)\n        \n        # .. Increment S, I, R, D, and C\n        S[t+1] = S[t] + delta_S                  # Susceptible\n        I[t+1] = I[t] + delta_I                  # Infectious\n        R[t+1] = R[t] + delta_R                  # Resolving\n        D[t+1] = D[t] + delta_D                  # Deceased\n        C[t+1] = C[t] + delta_C                  # ReCovered\n        \n        # .. Calculate how many beds are needed\n        #    (note that hhospitalization_rate and days_in_hospital are global, not inputs.)\n        beds_needed = hospitalization_rate * (I[t+1] + R[t+1])\n        \n        # .. Criterion for closing\n        if (state[t] == 0) and (beds_needed >= fraction_to_distance * beds_available):        \n            beta = beta_esd                          # Too many beds needed! Start extreme social distancing\n            state[t+1] = 1                           # Switch state to closed\n        elif (state[t] == 1) and (beds_needed < fraction_to_open * beds_available): \n            beta = beta_rsd                          # many beds, relax social distancing\n            state[t+1] = 0                           # switch state to open\n        \n        beta_t[t+1] = beta\n    return S, I, R, D, C, state, beta_t","2964b153":"# .. Propagate COVID-19 with a changing beta\ntotal_days = 600              # length of simulation (days)\nbeta0 = 0.4                   # infections\/day\/person before social distancing\nbeta_esd = 0.16               # infections\/day\/person with extreme social distancing\nbeta_rsd = 0.3                # infections\/day\/person with relaxed social distancing\nfraction_to_open = 0.05       # fraction of beds occupied to trigger opening\nfraction_to_distance = 0.9    # fraction of beds occupied to trigger distancing\n\nS, I, R, D, C, state, beta_t = propagate_beta_t(gamma, theta, delta, N, total_days, beta0, beta_esd, \n                                                beta_rsd, fraction_to_open, fraction_to_distance)\n\nR0 = beta0 \/ gamma                     # Basic reproduction number\nprint('Starting R0 = beta0 \/ gamma: ', np.round(beta0 \/ gamma,2))       \nprint('Extreme social distancing R0 = beta_esd \/ gamma: ',  np.round(beta_esd \/ gamma,2))        \nprint('Relaxed social distancing R0 = beta_rsd \/ gamma: ',  np.round(beta_rsd \/ gamma,2))      ","54585d6b":"# Add the date, starting with day 0 = March 1, 2020\ndate_vec = [dt.datetime(2020,3,7) + dt.timedelta(i) for i in range(total_days)]\n\n# .. Available and necessary critical care beds\nplt.figure(6); plt.cla()\nplt.subplot(211)\nplt.plot(date_vec, 0*I + beds_per_person*N, 'g', label = 'Beds available')\nplt.plot(date_vec, hospitalization_rate*(I+R), '.-', color = 'orange', linewidth = 2, label = 'Beds needed')\nplt.fill_between(date_vec, 1000*state*beds_per_person*N, 0,\n                 color='navy',                           # The outline color\n                 alpha=0.2, label = 'Closures')          # Transparency of the fill\nplt.legend()\nplt.ylabel('beds')\nplt.ylim(top=420)\nplt.ylim(bottom=0)\nplt.title(r'SIRD model, 1 million people, varying R$_0$')\nplt.subplot(212)\nplt.plot(date_vec, beta_t\/gamma)\nplt.ylabel(r'R$_0$ (infections\/person)')\nplt.xlabel('date')\n","58b17105":"# .. Propagate COVID-19 with a changing beta\ntotal_days = 600              # length of simulation (days)\nbeta0 = 0.4                   # infections\/day\/person before social distancing\nbeta_esd = 0.16               # infections\/day\/person with extreme social distancing\nbeta_rsd = 0.3                # infections\/day\/person with softer social distancing\nfraction_to_open = 0.05       # fraction of beds occupied to trigger opening\nfraction_to_distance = 0.9    # fraction of beds occupied to trigger distancing\n\ndate_vec = [dt.datetime(2020,3,7) + dt.timedelta(i) for i in range(total_days)]\n\n# .. Repeat the above but with a slider\nfig, ax1 = plt.subplots(num = 7)\nplt.subplots_adjust(bottom = 0.35)\n\n# .. Propagate COVID-19 with changing beta\nS, I, R, D, C, state, beta_t = propagate_beta_t(gamma, theta, delta, N, total_days, beta0, beta_esd, \n                                                beta_rsd, fraction_to_open, fraction_to_distance)\n\nbeds_needed, = ax1.plot(date_vec, hospitalization_rate*(I+R), '.-', linewidth = 2, label = 'Beds needed')\nax1.plot(date_vec, 0*I + beds_per_person*N, 'g', label = 'Beds available')\nfillbet = ax1.fill_between(date_vec, 10*state*beds_per_person*N, 0,\n                 color='navy',                                 # The outline color\n                 alpha=0.2 , label = 'Closures')               # Transparency of the fill       \n\nax1.legend()\nax1.set_xlabel('Days')\nax1.set_ylabel('Beds')\nax1.set_title(r'SIRD model, 1 million people, varying R$_0$: starting = ' + str(np.round(beta0\/gamma,2)))\nax1.set_ylim([0, 500])\n\n# sliders\nax_beta0     = plt.axes([0.35, 0.2, 0.5, 0.03], facecolor=axcolor)\nax_beta_esd  = plt.axes([0.35, 0.15, 0.5, 0.03], facecolor=axcolor)\nax_beta_rsd  = plt.axes([0.35, 0.1, 0.5, 0.03], facecolor=axcolor)\n\ns_beta0    = Slider(ax_beta0, r'starting $\\beta$', 0.0, 1.0, valinit=beta0, valstep=0.01)\ns_beta_esd = Slider(ax_beta_esd, r'extreme social distance $\\beta$', 0.0, 1.0, valinit=beta_esd, valstep=0.01)\ns_beta_rsd = Slider(ax_beta_rsd, r'relaxed social distance $\\beta$', 0.0, 1.0, valinit=beta_rsd, valstep=0.01)\n\n# .. The reset button on the slider\ndef multi_slider_reset(event):\n    s_beta0.reset()\n    s_beta_esd.reset()\n    s_beta_rsd.reset()\n\ndef update(val):    \n    beta0 = s_beta0.val\n    beta_esd = s_beta_esd.val\n    beta_rsd = s_beta_rsd.val\n    \n    # .. Propagate COVID-19 with a constant beta\n    S, I, R, D, C, state, beta = propagate_beta_t(gamma, theta, delta, N, \n                                                  total_days, beta0, beta_esd, \n                                                  beta_rsd, fraction_to_open, \n                                                  fraction_to_distance)\n    beds_needed.set_ydata(hospitalization_rate*(I+R))\n    global fillbet\n    fillbet.remove()\n    fillbet = ax1.fill_between(date_vec, 10*state*beds_per_person*N, 0,\n                 color='navy',             # The outline color\n                 alpha=0.2 )               # Transparency of the fill\n    \n    ax1.set_title(r'SIRD model, 1 million people, varying R$_0$')\n    ax1.set_ylim([0, 500])\n    fig.canvas.draw_idle()\n    \ns_beta0.on_changed(update)\ns_beta_esd.on_changed(update)\ns_beta_rsd.on_changed(update)\n\nresetax = plt.axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')\n    \nbutton.on_clicked(multi_slider_reset)","9aed1a3c":"total_days = 365\nday_no = np.arange(total_days)\nbeta0 = 0.44\n\n# .. Repeat the above but with a slider\nfig, ax1 = plt.subplots(num=8)\n\nplt.subplots_adjust(bottom=0.3)\n\n# .. Propagate COVID-19 with a constant beta\nS, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\ninfected, = ax1.semilogy((N-S), linewidth=2, label='Total infected')\nrecovered, = ax1.plot(C, color = 'green', linewidth=2, label='ReCovered')\ndead, = ax1.semilogy(D, 'k--', linewidth=2, label='Deceased')\n\n# .. Draw a verical line to the graph point intersection\nrecovered_interp, = ax1.plot([102, 102], [2714, np.interp(102, day_no, C)], 'go:')\ninfected_interp, = ax1.plot([119, 119], [5500, np.interp(119, day_no, N-S)], 'bo:')\n\n# .. Plot some actual data\nax1.plot(102, 2714, 'g^', markersize = 12, label='recovered, US')\nax1.plot(119, 5500, 'b^', markersize = 12, label='infected, US')\nax1.plot(106, 393.6 ,'ko', label='deceased, US')\n\nax1.legend(loc=[.7,.2])\nax1.set_xlabel('Days')\nax1.set_ylabel('People')\nax1.axis([0, total_days, 1, 1e6])\nax1.set_title('SIRD model, constant R$_0$ = ' + str(np.round(beta0 \/ gamma,2)))\n\n# sliders\naxcolor = 'grey'\nax_beta = plt.axes([0.2, 0.1 , 0.65, 0.03], facecolor=axcolor)\ns_beta = Slider(ax_beta, 'beta', 0.2, 1.0, valinit=beta0, valstep=0.005)\n\ndef update(val):\n    \n    beta0 = s_beta.val\n    \n    # .. Propagate COVID-19 with a constant beta\n    S, I, R, D, C = propagate(beta0, gamma, theta, delta, N, total_days)\n\n    infected.set_ydata((N-S))\n    recovered.set_ydata(C)    \n    dead.set_ydata(D)\n    \n    recovered_interp.set_ydata([2714, np.interp(102, day_no, C)])\n    infected_interp.set_ydata([5500, np.interp(119, day_no, N-S)])\n    \n    ax1.set_title('SIRD model, 1 million people, R$_0$ = ' + str(np.round(beta0 \/ gamma, 2)))\n    fig.canvas.draw_idle()\n    \ns_beta.on_changed(update)\nresetax = plt.axes([0.8, 0.025, 0.1, 0.04])\nbutton = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')\n\nbutton.on_clicked(slider_reset)","ca3eb2a7":"# Hack for showcode\ns=\"<br>\"*1000\nHTML(s)","c2c14d4c":"### R$_0$, the basic reproduction number\n\n<p>The number of cases an infected individual causes is called the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Basic_reproduction_number\"><strong>basic reproduction number<\/strong><\/a>, R$_0$. (Not to be confused with $R_t$).\n\nWhen R$_0 > 1$, the infection will spread in a population, whereas when R$_0 < 1$, the infection will not spread. \n               \nAccording to Wikipedia, \"Generally, the larger the value of R$_0$, the harder it is to control the epidemic. For simple models, the proportion of the population that needs to be effectively immunized ... to prevent sustained spread of the infection has to be larger than 1 \u2212 1 \/ R$_0$. Conversely, the proportion of the population that remains susceptible to infection in the endemic equilibrium is 1 \/ R$_0$. \n    \nR$_0$ depends on \u03b2, where \u03b2 is the number of contacts per day that result in an infection. When \u03b2 is a constant, R$_0$ is given by (Fernandez-Villaverde and Jones, 2020): <\/p>\n","6a4246c2":"The goal of social distancing is to reduce R$_0$ by reducing \u03b2. For that reason, Fernandez-Villaverde and Jones (2020) prefer a time-dependent value $\u03b2_t$, that depends on the degree of social distancing. They fit to real data by inverting the standard SIRD equations to solve for $\u03b2_t$.\n\nIn the code that follows, we will work through an example of a constant $\u03b2$ and then experiment with a time-varying $\u03b2_t$.  ","502f6bf9":"### Hospitalizations\n\nNow we'll think about keeping hospitals from getting overwhelmed. To do this, we'll consider the fraction of infected who are hospitalized and the available critical care beds at hospitals.\n\nAn article from February says 14% of cases are severe and 4.7% are critical (https:\/\/www.forbes.com\/sites\/niallmccarthy\/2020\/03\/12\/the-countries-with-the-most-critical-care-beds-per-capita-infographic\/#1028dac27f86). Fergeson et al. (2020) assume that 4.4% of those who contract COVID-19 are hospitalized. Since the numbers from both the articles were based on data from China, we assume they are overestimates and instead assume 2% of those who get COVID-19 are hospitalized.\n\nFurther, Fergeson et al. (2020) assume that the average duration of the hospitalization is 10.4 days. We assumed cases were infectious for 5 days and resolving for 10 days; thus patients would spend on averate 10.4\/15 days in the hospital, or 69.3% of the time. This gives a hospitalization rate of 0.02 * 0.693 times the number of infectious and resolving, or 0.02 * 0.693 * (I + R).\n\nFinally, we will assume there are 34.7 critical care beds per 100,000 people (https:\/\/www.forbes.com\/sites\/niallmccarthy\/2020\/03\/12\/the-countries-with-the-most-critical-care-beds-per-capita-infographic\/#1028dac27f86). \n\n*We will plot this as a log plot so we can see the entire y scale.*","e6d25c1d":"Compare the plot above to Figure 4 of Fergusson et al. (2020). ","cccc6cfe":"## Can we use the model to estimate the true number of cases?\n\nTrue values for total infected and recovered are not known because only a small fraction of the population was tested. \n\nIn the following plot, dotted lines connect the reported values to the model. \n\nMove the slider until the model value for deceased matches the reported value to get a sense of what the true values for recovered and infected might be.","9e745cdc":"What are the values of $\\beta$ (infections per infected person per day) and R$_0$ (total infections per infected person) that keep the beds needed within the available beds?\n\nA:  \n$\\beta$ = 0.23 infections\/person\/day  \nR$_0$ = 1.15 infections\/person","149adde9":"### Laws of virus movement\n\nAccording to Fernandez-Villaverde and Jones (2020), \"After the infectious period is over, a person is in the 'Resolving' state, $R_t$.\"\n\n- $\\theta$ is the fraction of people that exit the resolving state each period. This can happen through death or recovery, and is parametrized by $\\delta$:\n\n- Fraction of $\\theta$ that become deceased: $\\delta$  \n- Fraction of $\\theta$ that recover: 1 - $\\delta$\n\nThese lead to Equations (4) and (5) below (from Fernandez-Villaverde and Jones, 2020). We will use the other equations without going into them.\n\n","cb8e3d36":"![image.png](attachment:image.png)","2fae74a0":"### What is the R$_0$ value that keeps hospitals from being overwhelmed?\nIn the case shown above, we exceed bed capacity. What is the R$_0$ value that keeps us under capacity? to determine this, we'll again work with a slider that lets your change $\\beta$.","ab5a5a82":"## SIRD model with changing $\\beta_t$, due to social distancing\n\nNow let's experiment with what happens if we use a time-varying $\\beta_t$.  Let's say that:\n\n- We start with a high infection rate given by $\\beta_0$.\n- Whenever hospitals approach critical care bed capacity, we introduce extreme social distancing, dropping $\\beta_t$  to $\\beta_{esd}$.  \n- Whenever hospitals have a high fraction of beds available, we relax social distancing, with associated $\\beta_{rsd}$.\n\nIf you are experienced with coding, you can add a code cell and try to code this up yourself, otherwise, just run the code blocks below.","1e62c29f":"### Effect of changing parameters\nWhat changes with a change in $\\beta$ (but keeping $\\beta$ constant with time)?\n\nNext lets look at what is happening daily. We'll do this again for $\\beta = 0.44$, or R$_0$ = 2.2.","40ffe14b":"1. Adust the sliders and see what happens.\n2. Reset all the sliders (you may have click reset up to 3 times).\n3. Move the starting $\\beta$ slider to adjust the first closure to when your state instituted closures.\n4. Move the extreme and relaxed social distance sliders to adjust to how you think your state responded to closures.\n5. How many closures do you think your state will need?\n6. How could we improve the model?","6940963a":"### Examining the SIRD model with constant $\\beta$  \n\nNote in the above that the number of deceased are referenced to the right-hand y-axis, with all other variables referenced to the left-hand y-axis.\n\n1) About how long does it take for everyone to get COVID-19?  \n2) Is this a realistic model of what has happened?  \n3) How do you think social distancing affected $\\beta$ (the infection rate) in your state? On what day did social distancing start? How much do you think it lowered R$_0$?\n\nNext we'll replot that but with a slider that allows you to change $\\beta$, but while still keeping it constant.","89ea07b0":"![image.png](attachment:image.png)","fdf5cf3c":"### Additional references\n\n- The blog of John Cochrane (https:\/\/johnhcochrane.blogspot.com\/2020\/05\/an-sir-model-with-behavior.html) was a useful starting point for this exercise and includes Matlab code.\n\n- The following link discusses the SIR model: https:\/\/www.lewuathe.com\/covid-19-dynamics-with-sir-model.html\n\n- Video about the spread of COVID-19: https:\/\/www.youtube.com\/embed\/gxAaO2rsdIs\"\n\n- Article on the CDC website, which says \"During March 1\u201328, 2020, the overall laboratory-confirmed COVID-19\u2013associated hospitalization rate was 4.6 per 100,000 population\" (https:\/\/www.cdc.gov\/mmwr\/volumes\/69\/wr\/mm6915e3.htm).\n\n- 2.8 hospital beds per 1000 people: https:\/\/www.statnews.com\/2020\/03\/10\/simple-math-alarming-answers-covid-19\/.\n","6744ca22":"### Expand plots by holding and dragging the lower right corner.","2a27dbc1":"# Modeling the spread of COVID-19 \n#### By Penny Rowe, with the help of Augustin Kalytiak-Davis and Daniel Neshyba-Rowe.\n\nReferences  \n- Model of Fernandez-Villaverde, Jesus and Jones, Charles I. (2020), Estimating and Simulating a SIRD Model of COVID-19 for Many Countries, States, and Cities, from https:\/\/web.stanford.edu\/~chadj\/sird-paper.pdf.\n- Triggered closures implemented following Ferguson et al 2020 (but in a much simpler way here).\n- See also: https:\/\/web.stanford.edu\/~chadj\/Covid\/Dashboard.html  \n- Wikipedia: https:\/\/en.wikipedia.org\/wiki\/Basic_reproduction_number (and references within).\n\n","2356a56e":"\n## SIRD model\n\n<p>In the SIRD model used by Fernandez-Villaverde and Jones (2020), there is a population of N people. Each person may be in one of five states:\n\n- $S_t$: Susceptible: vulnerable, can catch the disease  \n- $I_t$: Infectious: currently infected, can spread the desease\n- $R_t$: Resolving: No longer infectious\n- $D_t$: Deceased: Removed from population\n- $C_t$: ReCovered: Assumed to have immunity, no longer susceptible  \n\nThe subscript $t$ is to remind us that these values may depend on time $t$. The total number of people is defined to be:\n\n$N = S_t + I_t + R_t + D_t + C_t$."}}