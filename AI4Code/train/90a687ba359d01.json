{"cell_type":{"309cb5a1":"code","9a8f911c":"code","19b7fe64":"code","33644cc2":"code","94d5cc68":"code","d2296d27":"code","9f871e68":"code","2c7a8119":"code","f1b46d52":"code","fc3950ca":"code","103137bc":"code","f634a084":"code","64c52a47":"code","aa2c73f6":"code","c417743f":"code","d0b58a05":"code","f32b9472":"code","38a294c4":"code","bac58431":"code","326d9650":"code","a5337f9c":"code","f1a02bf2":"code","64d95352":"code","d3921c19":"code","c7670933":"code","ef15c8cb":"code","002b93a6":"code","f3522aa6":"code","34701639":"code","1ed44ae9":"code","cae79fcf":"code","83ac4a2e":"code","cd1937a5":"code","ba551e0a":"code","dafe3def":"code","733542f0":"code","4617abfb":"code","7a679c35":"markdown","36544d2c":"markdown","ad92eb50":"markdown","38acdd99":"markdown","0509a2e8":"markdown","63fba0d8":"markdown","60de5dcb":"markdown","49175b95":"markdown","76ba9c11":"markdown","caa8a049":"markdown","34605afa":"markdown","2ffb1766":"markdown","95a2bbbb":"markdown"},"source":{"309cb5a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a8f911c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom pandas.plotting import scatter_matrix\nfrom scipy import stats\nimport sklearn.metrics as sm\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Lasso\nfrom xgboost import XGBRegressor\n","19b7fe64":"item_set = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_category_set = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\ntrain_set = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nshop_set = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest_set = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","33644cc2":"item_set.head()","94d5cc68":"item_set.shape","d2296d27":"item_set[\"item_name\"].nunique()","9f871e68":"item_category_set.head()","2c7a8119":"item_category_set.shape","f1b46d52":"item_category_set['item_category_name'].nunique()","fc3950ca":"shop_set.head()","103137bc":"shop_set.shape","f634a084":"shop_set['shop_name'].nunique()","64c52a47":"train_set.head(20)\n","aa2c73f6":"item_price = train_set['item_price']\nitem_price.sort_values( ascending=False)\n","c417743f":"train_set.shape","d0b58a05":"train_set.info()","f32b9472":"train_set.describe()","38a294c4":"train_set.isnull().sum()","bac58431":"train_set.hist(figsize=(15,15), bins=6)\nplt.show()","326d9650":"train_set['item_cnt_day'].hist(range=[-1, 10], facecolor='green', align='mid')\nplt.show()\n","a5337f9c":"sns.displot(train_set['item_cnt_day'])","f1a02bf2":"train_set['item_cnt_day'].describe()","64d95352":"correlation_matrix = train_set.corr()\ncorrelation_matrix['item_cnt_day'].sort_values(ascending = False)\n","d3921c19":"correlation_num = 6\ncorrelation_cols = correlation_matrix.nlargest(correlation_num,'item_cnt_day')['item_cnt_day'].index\ncorrelation_mat_sales = np.corrcoef(train_set[correlation_cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(correlation_mat_sales, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 7}, yticklabels=correlation_cols.values, xticklabels=correlation_cols.values)\nplt.show()","c7670933":"train_set = train_set.drop(columns=['date','date_block_num','item_price'])","ef15c8cb":"train_set.head()","002b93a6":"y= train_set['item_cnt_day']\nx= train_set.drop(columns=['item_cnt_day'])\nprint(len(x.columns))","f3522aa6":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))\n ","34701639":"linear_model = LinearRegression()\nlinear_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(linear_model.predict(X_test))\n\n#Measure Performance \nlinear_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",linear_mse)\nlinear_SqMse = np.sqrt(linear_mse)\nprint(\"Root Mean Squared error: \", linear_SqMse)\n\nprint(\"Explain variance score for Linear Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Linear Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","1ed44ae9":"lasso_model= Lasso(max_iter=5000)\n\n# Train the model with training data\nlasso_model.fit(X_train,Y_train)\n#make predictions \nprice_predict =(lasso_model.predict(X_test))\n\n\nlasso_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , lasso_mse)\nlasso_SqMse = np.sqrt(lasso_mse)\nprint(\"Root Mean Squared error: \", lasso_SqMse)\n\nprint(\"Explain variance score for Lasso Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Lasso Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","cae79fcf":"# Create a model with 50 decision trees\nforest_model= RandomForestRegressor(n_estimators = 50, random_state = 42)\n\n# Train the model with training data\nforest_model.fit(X_train,Y_train)\n#make predictions using random forest model\nprice_predict =(forest_model.predict(X_test))\n\n\nforest_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , forest_mse)\nforest_SqMse = np.sqrt(forest_mse)\nprint(\"Root Mean Squared error: \", forest_SqMse)\n\nprint(\"Explain variance score for Random Forest Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Random Forest Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","83ac4a2e":"# Create a model with 50 decision trees\nxgbr=  XGBRegressor()\n\n# Train the model with training data\nxgbr.fit(X_train,Y_train)\n#make predictions using random forest model\nprice_predict =(xgbr.predict(X_test))\n\n\nxgbr_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , xgbr_mse)\nxgbr_SqMse = np.sqrt(xgbr_mse)\nprint(\"Root Mean Squared error: \", xgbr_SqMse)\n\nprint(\"Explain variance score for XGB Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for XGB Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","cd1937a5":"test_set.head()","ba551e0a":"test_id = test_set['ID']\ntest_x= test_set.drop(columns=['ID'])\nprint(len(test_x.columns))","dafe3def":"y_prdict = forest_model.predict(test_x)","733542f0":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['ID', 'item_cnt_month'])\nsubmission.head(20)","4617abfb":"submission.to_csv('submission.csv', index=False)","7a679c35":"# 1.Linear Regression","36544d2c":"# Check null values","ad92eb50":"# Train Model with Train data","38acdd99":"# 1. Item set","0509a2e8":"# Data Visualization","63fba0d8":"# Adout Data","60de5dcb":"# Item Price","49175b95":"# 4.train set","76ba9c11":"# Read Files","caa8a049":"# 3. shop set","34605afa":"# Test Set","2ffb1766":"# 2. item category set","95a2bbbb":"# Split Dataset"}}