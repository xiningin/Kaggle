{"cell_type":{"f0cbc218":"code","f69d0acd":"code","dceb4d55":"code","868e617e":"code","7231dbb0":"code","da927099":"code","8f2fe144":"code","fefe4511":"code","524616b6":"code","00ac6179":"code","fdbf3490":"code","231805ea":"code","31c5c412":"code","54000e07":"code","7f082bdf":"code","a60943e4":"code","4ca1baae":"code","5c561255":"code","e99a1653":"code","8e42ff73":"code","14c9162c":"code","794cd2f6":"code","add899ba":"code","23d65ba5":"code","9bec86fd":"code","f71e272b":"code","eed490bb":"code","5611dc37":"code","621a84bf":"code","4a758841":"code","89d587d6":"code","a8a7d2d6":"code","1d205893":"code","9ba9bdca":"code","7f6106ed":"code","c74a0c80":"code","c4f5bf78":"code","b9424585":"code","25e1a4d3":"code","99948449":"code","0b7a074d":"code","6bd3ab6c":"code","37fd55ae":"code","6b9db81e":"code","8c142f75":"code","a868c4cf":"code","1cc4b5c8":"code","d329e0ec":"code","6e552ca7":"code","e0001d97":"code","524fa26f":"code","06df64ce":"markdown","88d50ec6":"markdown","6228234c":"markdown","80422875":"markdown","8769e179":"markdown","51db929c":"markdown","6716706b":"markdown","f9af7f89":"markdown","f817c010":"markdown","932720d1":"markdown","cab69055":"markdown","345707ea":"markdown","e59bcbdd":"markdown","c49e819b":"markdown","39916109":"markdown","f352e762":"markdown","445cfae0":"markdown","6b844680":"markdown","be309249":"markdown","86a25465":"markdown","736611d4":"markdown","31c48513":"markdown","cc29caf8":"markdown","101e5ca5":"markdown","43d670cb":"markdown","e376dc74":"markdown","bbc6e776":"markdown","0e8918e6":"markdown","920b01fa":"markdown","9cff29ff":"markdown","49417703":"markdown","aff25ad4":"markdown","be791dcd":"markdown","89ca2347":"markdown","dead3c89":"markdown","df3adcde":"markdown","14088731":"markdown","cb007e29":"markdown","922681ad":"markdown","a6e703a0":"markdown","dd118d51":"markdown","3501b44e":"markdown","e47b8cd5":"markdown","987d6eb4":"markdown","55fc980a":"markdown","e4da8daa":"markdown","2e19b8ee":"markdown","e546fe52":"markdown","06d45e89":"markdown","cb44650e":"markdown"},"source":{"f0cbc218":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom wordcloud import WordCloud\nimport re\nimport nltk\nnltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\nimport gensim\nfrom gensim import corpora\nimport pyLDAvis\nimport pyLDAvis.gensim\nfrom gensim.models.coherencemodel import CoherenceModel","f69d0acd":"df=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","dceb4d55":"df.shape","868e617e":"df.isnull().sum()","7231dbb0":"plt.figure(figsize=(14,7))\ndf[\"type\"].value_counts().plot(kind=\"pie\",shadow=True,autopct = '%1.1f%%')","da927099":"count=list(df['country'].dropna().unique())\ncloud=WordCloud(colormap=\"cool\",width=800,height=400).generate(\" \".join(count))\nfig=plt.figure(figsize=(14,10))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')","8f2fe144":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"Movie\"][\"country\"].value_counts()[:20].plot(kind=\"bar\",color=\"lightcoral\")\nplt.title(\"Top 20 countries in terms of maximum number of movies on netflix\",size=18)","fefe4511":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"TV Show\"][\"country\"].value_counts()[:20].plot(kind=\"bar\",color=\"mediumslateblue\")\nplt.title(\"Top 20 countries in terms of maximum number of TV shows on netflix\",size=18)","524616b6":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[\"release_year\"].value_counts()[:20].plot(kind=\"bar\",color=\"green\")\nplt.title(\"Frequency of both TV Shows and movies which are released in different years\",size=16)","00ac6179":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"Movie\"][\"release_year\"].value_counts()[:20].plot(kind=\"bar\",color=\"darkorange\")\nplt.title(\"Frequency of Movies which are released in different years and are there in netflix\",size=16)","fdbf3490":"df[(df[\"type\"]==\"Movie\") & (df[\"release_year\"]==2017)][\"title\"].sample(10)","231805ea":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"TV Show\"][\"release_year\"].value_counts()[:20].plot(kind=\"bar\",color=\"mediumblue\")\nplt.title(\"Frequency of TV shows which are released in different years and are there in netflix\",size=16)","31c5c412":"df[(df[\"type\"]==\"TV Show\") & (df[\"release_year\"]==2019)][\"title\"].sample(10)","54000e07":"listed=list(df['listed_in'].unique())\ncloud=WordCloud(colormap=\"Wistia\",width=600,height=400).generate(\" \".join(listed))\nfig=plt.figure(figsize=(12,18))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')\nplt.title(\"WordCloud for genre for all category\",size=18)","7f082bdf":"listed2=list(df[df[\"type\"]==\"Movie\"]['listed_in'].unique())\ncloud=WordCloud(colormap=\"summer\",width=600,height=400).generate(\" \".join(listed2))\nfig=plt.figure(figsize=(12,18))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')\nplt.title(\"WordCloud for genre for movie category\",size=18)","a60943e4":"listed3=list(df[df[\"type\"]==\"TV Show\"]['listed_in'].unique())\ncloud=WordCloud(colormap=\"YlOrRd\",width=600,height=400).generate(\" \".join(listed3))\nfig=plt.figure(figsize=(12,18))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')\nplt.title(\"WordCloud for genre for TV show category\",size=18)","4ca1baae":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"Movie\"][\"listed_in\"].value_counts()[:20].plot(kind=\"barh\",color=\"red\")\nplt.title(\"20 most frequent genre for movie type for all the years\",size=18)","5c561255":"df[(df[\"listed_in\"]==\"Documentaries\") & (df[\"type\"]==\"Movie\")][\"title\"].sample(10)","e99a1653":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(11,6))\ndf[df[\"type\"]==\"TV Show\"][\"listed_in\"].value_counts()[:20].plot(kind=\"barh\",color=\"darkviolet\")\nplt.title(\"20 most frequent genre for TV show type for all the years\",size=18)","8e42ff73":"df[(df[\"listed_in\"]==\"Kids' TV\") & (df[\"type\"]==\"TV Show\")][\"title\"].sample(10)","14c9162c":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[(df[\"type\"]==\"Movie\") & (df[\"release_year\"]==2019)][\"listed_in\"].value_counts()[:20].plot(kind=\"barh\",color=\"lime\")\nplt.title(\"20 most frequent Genre for movie type for the year 2019\",size=18)","794cd2f6":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(11,6))\ndf[(df[\"type\"]==\"TV Show\") & (df[\"release_year\"]==2019)][\"listed_in\"].value_counts()[:20].plot(kind=\"barh\",color=\"teal\")\nplt.title(\"20 most frequent genre for TV show type for the year 2019\",size=18)","add899ba":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[\"rating\"].value_counts().plot(kind=\"bar\",color=\"orange\")\nplt.title(\"Frequency of ratings for both TV shows & movies for all the years\",size=18)","23d65ba5":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"Movie\"][\"rating\"].value_counts().plot(kind=\"bar\",color=\"royalblue\")\nplt.title(\"Frequency of ratings for movie category for all the years\",size=18)","9bec86fd":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[df[\"type\"]==\"TV Show\"][\"rating\"].value_counts().plot(kind=\"bar\",color=\"orangered\")\nplt.title(\"Frequency of ratings for TV show category for all the years\",size=18)","f71e272b":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[(df[\"country\"]==\"United States\") & (df[\"type\"]==\"Movie\")][\"rating\"].value_counts().plot(kind=\"bar\",color=\"slateblue\")\nplt.title(\"Rating for Movies that are released in USA\",size=18)","eed490bb":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[(df[\"country\"]==\"India\") & (df[\"type\"]==\"Movie\")][\"rating\"].value_counts().plot(kind=\"bar\",color=\"deeppink\")\nplt.title(\"Rating for Movies that are released in India\",size=18)","5611dc37":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[(df[\"country\"]==\"United States\") & (df[\"type\"]==\"TV Show\")][\"rating\"].value_counts().plot(kind=\"bar\",color=\"fuchsia\")\nplt.title(\"Rating for TV Shows that are released in USA\",size=18)","621a84bf":"plt.style.use(\"ggplot\")\nplt.figure(figsize=(12,6))\ndf[(df[\"country\"]==\"India\") & (df[\"type\"]==\"TV Show\")][\"rating\"].value_counts().plot(kind=\"bar\",color=\"gold\")\nplt.title(\"Rating for TV Shows that are released in India\",size=18)","4a758841":"listed4=list(df[(df[\"release_year\"]==2019) & (df[\"type\"]==\"Movie\")]['title'])\ncloud=WordCloud(colormap=\"YlOrRd\",width=600,height=400).generate(\" \".join(listed4))\nfig=plt.figure(figsize=(12,18))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')\nplt.title(\"WordCloud for movie names which are released in the year 2019\",size=18)","89d587d6":"listed4=list(df[(df[\"release_year\"]==2019) & (df[\"type\"]==\"TV Show\")]['title'])\ncloud=WordCloud(colormap=\"winter\",width=600,height=400).generate(\" \".join(listed4))\nfig=plt.figure(figsize=(12,18))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')\nplt.title(\"WordCloud for genre for TV Show category released in 2019\",size=18)","a8a7d2d6":"data=pd.DataFrame(df[\"description\"])\npd.set_option(\"display.max_colwidth\", 200)\ndata.head()","1d205893":"data['Number of words'] = data['description'].apply(lambda x:len(str(x).split()))\ndata.head()","9ba9bdca":"plt.figure(figsize=(12,6))\nsns.distplot(data[\"Number of words\"], kde=False, color=\"red\",bins=8)\nplt.xlabel(\"Number of words\",size=15)\nplt.ylabel(\"count\",size=15)\nplt.title(\"Distribution of number of words in the documents\",size=15)","7f6106ed":"data[\"Number of words\"].describe()","c74a0c80":"def clean_text(text):\n    clean=text.lower()\n    clean=re.sub(\"[^a-z]\",\" \",clean)\n    clean=re.sub(r\"\\s+[a-z]\\s+\",\" \",clean)\n    clean=clean.lstrip()\n    clean=re.sub(\"\\s{2,}\",\" \",clean)\n    return clean\ndata[\"cleaned_text\"]=data[\"description\"].apply(clean_text)","c4f5bf78":"cloud=WordCloud(colormap=\"PuBuGn\",width=800,height=400).generate(str(data[\"cleaned_text\"]))\nfig=plt.figure(figsize=(14,10))\nplt.axis(\"off\")\nplt.imshow(cloud,interpolation='bilinear')","b9424585":"nltk.download(\"stopwords\")\nfrom nltk.corpus import stopwords\nstop=stopwords.words('english')\ndata[\"stops_removed\"]=data[\"cleaned_text\"].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))","25e1a4d3":"data[\"tokenized\"]=data[\"stops_removed\"].apply(lambda x: nltk.word_tokenize(x))","99948449":"def word_lemmatizer(text):\n    lem_text = [WordNetLemmatizer().lemmatize(i,pos='v') for i in text]\n    return lem_text\ndata[\"lemmatized\"]=data[\"tokenized\"].apply(lambda x: word_lemmatizer(x))\ndata[\"joined\"]=data[\"lemmatized\"].apply(lambda x: ' '.join(x))","0b7a074d":"data[\"stops_removed_2\"]=data[\"joined\"].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))","6bd3ab6c":"dictionary = corpora.Dictionary(data[\"lemmatized\"])\ndoc_term_matrix = [dictionary.doc2bow(rev) for rev in data[\"lemmatized\"]]","37fd55ae":"LDA = gensim.models.ldamodel.LdaModel\n\n# Build LDA model\nlda_model = LDA(corpus=doc_term_matrix, id2word=dictionary, num_topics=15, random_state=100,\n                chunksize=1000, passes=50)","6b9db81e":"lda_model.print_topics()","8c142f75":"coherence_model_lda = CoherenceModel(model=lda_model,\ntexts=data[\"lemmatized\"], dictionary=dictionary, coherence='c_v')\ncoherence_lda = coherence_model_lda.get_coherence()\nprint('\\nCoherence Score: ', coherence_lda)","a868c4cf":"pyLDAvis.enable_notebook(sort=True)\nvis_2 = pyLDAvis.gensim.prepare(lda_model, doc_term_matrix, dictionary, sort_topics=False)\npyLDAvis.display(vis_2)","1cc4b5c8":"def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=3):\n    \"\"\"\n    Compute c_v coherence for various number of topics\n\n    Parameters:\n    ----------\n    dictionary : Gensim dictionary\n    corpus : Gensim corpus\n    texts : List of input texts\n    limit : Max num of topics\n\n    Returns:\n    -------\n    model_list : List of LDA topic models\n    coherence_values : Coherence values corresponding to the LDA model with respective number of topics\n    \"\"\"\n    coherence_values = []\n    model_list = []\n    for num_topics in range(start, limit, step):\n        model=gensim.models.ldamodel.LdaModel(corpus=corpus, id2word=dictionary, num_topics=num_topics)\n        model_list.append(model)\n        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')\n        coherence_values.append(coherencemodel.get_coherence())\n\n    return model_list, coherence_values","d329e0ec":"model_list, coherence_values = compute_coherence_values(dictionary=dictionary, corpus=doc_term_matrix, texts=data[\"lemmatized\"], start=2, limit=40, step=6)\n# Show graph\nimport matplotlib.pyplot as plt\nlimit=40; start=2; step=6;\nx = range(start, limit, step)\nplt.figure(figsize=(12,6))\nplt.plot(x, coherence_values)\nplt.xlabel(\"Num Topics\")\nplt.ylabel(\"Coherence score\")\nplt.legend((\"coherence_values\"), loc='best')\nplt.show()","6e552ca7":"lda_model_2 = LDA(corpus=doc_term_matrix, id2word=dictionary, num_topics=37, random_state=120,\n                chunksize=1000, passes=50)","e0001d97":"coherence_model_lda_2 = CoherenceModel(model=lda_model_2,\ntexts=data[\"lemmatized\"], dictionary=dictionary, coherence='c_v')\ncoherence_lda_2 = coherence_model_lda_2.get_coherence()\nprint('\\nCoherence Score: ', coherence_lda_2)","524fa26f":"pyLDAvis.enable_notebook(sort=True)\nvis = pyLDAvis.gensim.prepare(lda_model_2, doc_term_matrix, dictionary, sort_topics=False)\npyLDAvis.display(vis)","06df64ce":"Now we will check the data shape, that is how many rows and columns are there in the dataset.","88d50ec6":"Now we will do some EDA for the rating variable. But before starting anything else, let's know some about the ratings that are there in our dataset. The rating categories given in our dataset are as follows, also a short description of the ratings are also given:\n1. TV-MA - Programming rated TV-MA in the United States by the TV Parental Guidelines signifies content for mature audiences only. Programs with this rating are usually not suitable for anyone under 17 years of age (under 18 in some cases). \n\n2. TV-14 - Programming rated TV-14 in the United States TV Parental Guidelines signifies content with parents strongly cautioned. Content may be inappropriate for children younger than 14 years of age.\n\n3. TV-PG - Programming rated TV-PG as stated in the United States TV Parental Guidelines signifies content with parental guidance suggested. \n\n4. R(restricted) - No one under 17 admitted without an accompanying parent or guardian.\n\n5. PG-13 - Some Material May Be Inappropriate for Children Under 13. Oh, also, here's a reason. Rated PG-13 for intense violence\/sci-fi violence, language, peril and thematic elements.\n\n6. NR - (Not rated) This film has not yet been rated by the MPAA.\n\n7. PG - Some material may not be suitable for children. The movie may have mildly strong language and some violence, but no substance use or physical abuse.\n\n8. TV-Y7 - Programming rated TV-Y7 in the United States TV Parental Guidelines signifies content that is suitable for children who are at least 7 years old. Many of these programs contain cartoon slapstick violence, humor that may be considered too ribald or morbid for younger viewers, mild innuendo, and\/or themes and stories that would be considered too controversial, scary or incomprehensible for younger audiences. \n\n9. TV-G - Programming rated TV-G in the United States TV Parental Guidelines signifies content that is suitable for all audiences. Some children's programs that have content that teens or adults will relate to use a TV-G rating, as opposed to a TV-Y rating. This rating is also used for shows with inoffensive content (such as cooking shows, religious programming, nature documentaries, shows about pets and animals, classic television shows, and many shows on Disney Channel carry this rating\n\n10. TV-Y - Programming rated TV-Y in the United States TV Parental Guidelines, signifies content that is suitable for all children ages newborn-6 (particularly those of preschool or kindergarten age, as this rating is commonly seen in early childhood shows, and non-preschool or kindergarten age).\n\n11. TV-Y7-FV - Programming rated TV-Y7-FV is recommended for ages 7 and older, with the unique advisory that the program contains fantasy violence. Mohana Shashi: The Series is the only Series on Nick Jr. that has the rating of TV-Y7-FV, but in April 8, 2020, when The Second Generation Series has premiered on Nick Jr. and Discovery Family, it was changed to TV-Y because it has became a popular preschool and kids show and it can be viewed for babies, toddlers, preschoolers, and little kids.\n\n12. G - G ratings are most notable for what the films don\u2019t include: sex and nudity, substance abuse, or realistic\/noncartoon violence.\n\n13. UR - Typically reserved for previews of films not yet officially rated by the MPAA. A green title card indicates the preview is safe for all viewers, while red is for mature audiences. Also there is slight difference between NR and UR, and that is NR movie or show has not yet presented to the board, but UR has been presented.\n\n14. NC-17 - An NC-17 rated motion picture is one that, in the view of the Rating Board, most parents would consider patently too adult for children 17 and under.****","6228234c":"Next we will calculate the word count for each description.","80422875":"So our text seems pretty clear, so now we will move to our next text preprocessing steps, which are stopwords removal, tokenization and lemmatization.","8769e179":"So now we are going to start our second part of the analysis, here we will only deal with the description column, and our intention is to see whether we can successfully extract topics from the description column or not, and we will start with bringing the description column, and then cleaning it.","51db929c":"**Netflix, Inc. is an American media-services provider and production company headquartered in Los Gatos, California, founded in 1997 by Reed Hastings and Marc Randolph in Scotts Valley, California. The company's primary business is its subscription-based streaming service, which offers online streaming of a library of films and television programs, including those produced in-house. As of April 2020, Netflix had over 182 million paid subscriptions worldwide, including 69 million in the United States. Members can watch as much as they want, anytime, anywhere, on any internet-connected screen. Members can play, pause and resume watching, all without commercials or commitments.**","6716706b":"So coherence model is suggesting that we should go with something around 37 topics, so let's try that.","f9af7f89":"So TV Shows released in the year 2019 are mostly of the Kids' TV type.","f817c010":"So from the above visualization we can see that netflix has more movies than TV shows till the last updated date. It has 68.4% movies and 31.6% TV shows.","932720d1":"# Netflix Data Analysis","cab69055":"# Now let's compare rating between India and USA.","345707ea":"Now we will see for TV shows.","e59bcbdd":"![highcompress-Netflix-Shows-2017.jpg](attachment:highcompress-Netflix-Shows-2017.jpg)","c49e819b":"Now we will generate wordcloud to see whether processed text doesn't carry much noise.","39916109":"So we can see that most frequent genre in the TV Show category is Kids' TV, so now let's see some of the names in this category.","f352e762":"Now we will see for TV shows for both the countries.","445cfae0":"Now we will generate a wordcloud for the countries which will show the frequency where both the movies and TV shows release is maximum.","6b844680":"First we will see with 15 topics, and see its coherence score, then in the later stage we will try more number of topics and will see which one is giving us high coherence score, then we will move with that. Basically coherence score helps us in determining how many topics should we select, we should select number of topics with high coherence score.","be309249":"So we can see that TV shows that are released in the year 2019, are mostly there in the netflix, then which are released in the year 2018 are there. Now let's see some of the TV show names released in the year 2019.","86a25465":"Finally I will conclude first part of the analysis by creating some wordclouds for the movie and TV show names for the year 2019.","736611d4":"Now we will check whether there is any missing values for any of the columns or not.","31c48513":"Now we will explore a little more \"listed_in\" variable, which is the genre here and we will see the top 20 most frequent genres for movie category for all the years.","cc29caf8":"Now we will see rating frequency for only movie category.","101e5ca5":"# **Topic Modelling**","43d670cb":"Now we will see 20 most frequent genre for the TV Shows.","e376dc74":"So from the above we can say that most of the movies in the netflix are of the documentary genre, next is stand up comedy. Now let's see some of the movie names in the documantary category.","bbc6e776":"So from above we can see that director column has highest number of missing values, then cast and then country. Others like date_added and rating has also missing values but they are quite marginal.","0e8918e6":"**Now we will start our exploration for the variables mostly using visualization.**","920b01fa":"So from the above we can see that movies and TV shows that are released in the year 2018 are mostly in netflix. Now we will see individually for both movies and TV series.","9cff29ff":"Now we will generate wordcloud for the genres for both movie and TV shows.","49417703":"Now we will load the dataset.","aff25ad4":"Now let's see the frequency of genre in the movie category only for the year 2019.","be791dcd":"So we can see from above that most movies and TV shows that are there in netflix is in USA. Also we will see the actual frequency using barplot in the next visualization.","89ca2347":"Now we will see rating frequency for only TV Show category.","dead3c89":"Now we will check the coherence score for it.","df3adcde":"Now we will start our text processing steps.","14088731":"Now let's visualize this.","cb007e29":"Now we will import the necessary libraries.","922681ad":"So from the above we can see that movies that are released in the 2017, are mostly there in the netflix, then movies that are released in the year 2018 is there, and so on, you can see from the above graph.","a6e703a0":"Now we will generate wordcloud for the genre for TV Show category.","dd118d51":"Now we will see frequency of ratings for all the movies and TV shows for all the years. ","3501b44e":"Now let's visualize it.","e47b8cd5":"So we can see that both in terms of movies and TV show, USA is on the top. Next we will see year wise frequency in descending order for both TV shows and movies. First we will see for combined TV shows and movies, then we will see frequency for both individually.","987d6eb4":"Now we will create wordcloud for the TV shows name which are released in the year 2019.","55fc980a":"**But clearly, coherence score suggesting higher score for 37 than for topic number 15, but we can see that there is lot of overlapping in the topics in case of 37, than that of topics 15, so very soon we will come up with the optimum number of topics and finish the business.**","e4da8daa":"So movies that are released in the year 2019 is mostly stand-up comedy. Now we will see for the TV Shows for the year 2019. You can do for any year, I just want to check for the year 2019.","2e19b8ee":"Next we will generate wordcloud for the genre for movie category.","e546fe52":"Now our text is all clear, now we will proceed towards creating the LDA model, basically we will use LDA for topic modelling here. Also before creating the model we need to prepare the input, the input will be basically in the form of document term matrix, after converting that using the below step, we will then feed that into the LDA model.","06d45e89":"Now let's check coherence score for different number of topics, basically this is not a good idea, we should find the optimum number of topics, and there is another way of doing it, but here we will try this approach.","cb44650e":"Now let's see some of the movie names that are released in the year 2017."}}