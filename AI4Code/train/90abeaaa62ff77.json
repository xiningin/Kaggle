{"cell_type":{"dfc3c2ce":"code","6cdd1609":"code","92d4f18d":"code","ae7ad245":"code","cf55f707":"code","9174e72b":"code","f18d953b":"code","7b25c464":"code","291a056d":"code","6c3f6db0":"code","ab5f81b0":"code","3f49bba6":"code","572cd259":"code","7bf8c0ec":"code","0a66c263":"code","d39dc1fa":"code","4c11a361":"code","df3b7cc5":"code","636eabe6":"code","1a41d269":"code","87d9fa3f":"code","575e4a89":"code","782db50f":"code","80b4d0f0":"code","126952a6":"code","7bcac1af":"code","678a202c":"code","8b11899b":"code","dc7f8ce2":"code","74c0601b":"code","5d26891c":"code","efcf681e":"code","c2ded8b5":"code","48c1187d":"code","c3d4a1aa":"code","a2d185b5":"code","6aecff32":"code","e45f8827":"code","dd5efa0d":"code","72f434bb":"code","36113b4e":"code","72514a88":"code","67eff435":"code","6ecf0881":"code","04b49b52":"code","bc9afb3c":"code","9feea6ff":"code","f61c4b8a":"code","2351ab71":"code","6efb53cf":"code","5c7ec02d":"code","8b470f65":"markdown","833015a7":"markdown","9cbbb26e":"markdown","74e7248b":"markdown","47212e6d":"markdown","8461d018":"markdown","59c11235":"markdown","9eda3c8d":"markdown","6fc909ad":"markdown","107f8358":"markdown","a0ac5d42":"markdown","268e4c23":"markdown","54d24f46":"markdown","6fb43680":"markdown","7124ed5c":"markdown","dd7b16a0":"markdown","297aa27d":"markdown","e0474e6b":"markdown","6d90b5ae":"markdown","3f5cb70c":"markdown"},"source":{"dfc3c2ce":"pip install bubbly","6cdd1609":"import pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.offline as py\nfrom bubbly.bubbly import bubbleplot","92d4f18d":"# reading the dataset\ndata = px.data.iris()","ae7ad245":"data.head()","cf55f707":"sns.scatterplot(data['sepal_width'], data['sepal_length'], hue = data['species'])","9174e72b":"px.scatter(data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\")","f18d953b":"px.scatter(data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\", marginal_x=\"box\")","7b25c464":"px.scatter(data, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\")","291a056d":"# reading the dataset\ndf = px.data.tips()\ndf.head()","6c3f6db0":"px.sunburst(df, path=['sex','smoker'], values='total_bill')","ab5f81b0":"px.sunburst(df, path=['day', 'time',], values='total_bill')","3f49bba6":"px.sunburst(df, path=['day', 'time','sex'], values='total_bill')","572cd259":"df2 = px.data.gapminder()\ndf2.head()","7bf8c0ec":"px.histogram(df, x=\"total_bill\", y=\"tip\", color=\"sex\")","0a66c263":"px.strip(df, x=\"total_bill\", y=\"time\", orientation=\"h\")","d39dc1fa":"px.strip(df, x=\"total_bill\", y=\"time\", orientation=\"h\", color=\"smoker\")","4c11a361":"px.box(df, x=\"day\", y=\"total_bill\")","df3b7cc5":"px.box(df, x=\"day\", y=\"total_bill\", color=\"smoker\")","636eabe6":"px.violin(df, y=\"tip\", x=\"smoker\", color=\"sex\")","1a41d269":"px.violin(df, y=\"tip\", x=\"smoker\", color=\"sex\", box=True, points=\"all\")","87d9fa3f":"px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\")","575e4a89":"px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\",\n       barmode=\"group\",\n       facet_row=\"time\",\n       facet_col=\"day\",\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})","782db50f":"px.scatter(df, x=\"tip\", y=\"total_bill\", color=\"smoker\",\n       facet_row=\"time\",\n       facet_col=\"day\",\n       category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"], \"time\": [\"Lunch\", \"Dinner\"]})","80b4d0f0":"import plotly.figure_factory as ff\n","126952a6":"df = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28'),\n      dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15'),\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30')]\n\nfig = ff.create_gantt(df)\nfig.show()","7bcac1af":"df = [dict(Task=\"Job-1\", Start='2017-01-01', Finish='2017-02-02', Resource='Complete'),\n      dict(Task=\"Job-1\", Start='2017-02-15', Finish='2017-03-15', Resource='Incomplete'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Not Started'),\n      dict(Task=\"Job-2\", Start='2017-01-17', Finish='2017-02-17', Resource='Complete'),\n      dict(Task=\"Job-3\", Start='2017-03-10', Finish='2017-03-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-04-01', Finish='2017-04-20', Resource='Not Started'),\n      dict(Task=\"Job-3\", Start='2017-05-18', Finish='2017-06-18', Resource='Not Started'),\n      dict(Task=\"Job-4\", Start='2017-01-14', Finish='2017-03-14', Resource='Complete')]\n\ncolors = {'Not Started': 'rgb(220, 0, 0)',\n          'Incomplete': (1, 0.9, 0.16),\n          'Complete': 'rgb(0, 255, 100)'}\n\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', show_colorbar=True,\n                      group_tasks=True)\nfig.show()","678a202c":"px.parallel_coordinates(data, color=\"species_id\",) ","8b11899b":"px.scatter_3d(data, x='sepal_length', y='sepal_width', z='petal_width')","dc7f8ce2":"px.scatter_3d(data, x='sepal_length', y='sepal_width', z='petal_width', color='species')","74c0601b":"px.scatter_3d(data, x='sepal_length', y='sepal_width', z='petal_width',\n                    color='petal_length', symbol='species')","5d26891c":"g = px.data.wind()\npx.scatter_polar(g, r=\"frequency\", theta=\"direction\")","efcf681e":"px.scatter_polar(g, r=\"frequency\", theta=\"direction\", color=\"strength\")","c2ded8b5":"px.line_polar(g, r=\"frequency\", theta=\"direction\", color=\"strength\")","48c1187d":"px.bar_polar(g, r=\"frequency\", theta=\"direction\", color=\"strength\")","c3d4a1aa":"data = px.data.gapminder()\ndata.head()\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfigure = bubbleplot(dataset = data,\n                    y_column = 'gdpPercap',\n                    x_column = 'lifeExp', \n                    bubble_column = 'continent',\n                    time_column = 'year',\n                    size_column = 'pop',\n                    color_column = 'continent',\n    title = 'Life Expectancy vs GDP',\n    y_logscale = True,\n    scale_bubble = 5,\n    height = 650)\npy.iplot(figure, config={'scrollzoom': True})","a2d185b5":"# reading the dataset\ndata = px.data.tips()\n\npx.scatter(data,\n           x=\"total_bill\",\n           y=\"tip\")","6aecff32":"px.scatter(data,\n           x=\"total_bill\",\n           y=\"tip\", \n           color=\"size\")","e45f8827":"px.scatter(data,\n          x=\"total_bill\",\n          y=\"tip\", \n          color=\"size\", \n          color_continuous_scale=px.colors.sequential.Viridis)","dd5efa0d":"df = px.data.gapminder()\npx.scatter(df, x=\"gdpPercap\", y=\"lifeExp\",\n           animation_frame=\"year\",\n           animation_group=\"country\",\n           size=\"pop\",\n           color=\"continent\",\n           hover_name=\"country\",\n           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])","72f434bb":"px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\",\n           animation_frame=\"year\",\n           animation_group=\"country\",\n           size=\"pop\",\n           color=\"continent\",\n           hover_name=\"country\",\n           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])","36113b4e":"px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\",\n           animation_frame=\"year\",\n           animation_group=\"country\",\n           size=\"pop\",\n           color=\"continent\",\n           hover_name=\"country\",\n           facet_col=\"continent\",\n           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])","72514a88":"import matplotlib.pyplot as plt\ndata = px.data.iris()\nplt.rcParams['figure.figsize'] = (15, 8)\n\nplt.subplot(2, 2, 1)\nsns.scatterplot(data['sepal_length'], data['sepal_width'])\n\nplt.subplot(2, 2, 2)\nsns.scatterplot(data['sepal_length'], data['petal_width'])\n\nplt.subplot(2, 2, 3)\nsns.scatterplot(data['petal_length'], data['sepal_width'])\n\nplt.subplot(2, 2, 4)\nsns.scatterplot(data['petal_width'], data['sepal_length'])\nplt.show()","67eff435":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, start_cell=\"bottom-left\")\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),\n              row=2, col=2)\n\nfig.show()","6ecf0881":"import networkx as nx\n# reading the dataset\ndata = px.data.gapminder()\ndata.shape","04b49b52":"data['nation'] = 'Country'\ndata = nx.from_pandas_edgelist(data, source='nation', target='country', edge_attr=True,)","bc9afb3c":"import warnings\n#warnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize']  = (22, 20)\nplt.style.use('fivethirtyeight')\nplt.title('Countries in the World', fontsize = 30)\nplt.grid()\nplt.axis('off')\n\npos = nx.spring_layout(data)\n\n# drawing nodes\nnx.draw_networkx_nodes(data, pos, node_size = 1200, node_color = 'pink')\n\n# labels\nnx.draw_networkx_labels(data, pos, font_size = 20, font_family = 'sans-serif')\n\n# drawing edges\nnx.draw_networkx_edges(data, pos, width = 6, alpha = 0.1, edge_color = 'brown')\n\n\nplt.show()","9feea6ff":"pip install pywaffle","f61c4b8a":"# python program to generate Waffle Chart \n\n# importing all necessary requirements \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom pywaffle import Waffle \n\n# creation of a dataframe \ndata ={'phone': ['Xiaomi', 'Samsung', \n            'Apple', 'Nokia', 'Realme'], \n    'stock': [44, 12, 8, 5, 3] \n    } \n\ndf = pd.DataFrame(data) \n\n# To plot the waffle Chart \nfig = plt.figure( \n    FigureClass = Waffle, \n    rows = 5, \n    values = df.stock, \n    labels = list(df.phone) \n) \n","2351ab71":"df = px.data.carshare()\ndf.head()","6efb53cf":"px.scatter_mapbox(df, lat=\"centroid_lat\",\n                  lon=\"centroid_lon\",\n                  color=\"peak_hour\",\n                  size=\"car_hours\",\n                  size_max=15, zoom=10,\n                  mapbox_style=\"carto-positron\")","5c7ec02d":"df = px.data.gapminder()\ndf.head()\npx.scatter_geo(df, locations=\"iso_alpha\",\n               color=\"continent\",\n               hover_name=\"country\",\n               size=\"pop\",\n               projection=\"natural earth\")","8b470f65":"### First 1: Scatterplot:\n**A scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.**\n\n#### When you should use a scatter plot:\n1. Scatter plots\u2019 primary uses are to observe and show relationships between two numeric variables. The dots in a scatter plot not only report the values of individual data points, but also patterns when the data are taken as a whole.\n\n2. Identification of correlational relationships are common with scatter plots. In these cases, we want to know, if we were given a particular horizontal value, what a good prediction would be for the vertical value. You will often see the variable on the horizontal axis denoted an independent variable, and the variable on the vertical axis the dependent variable. Relationships between variables can be described in many ways: positive or negative, strong or weak, linear or nonlinear.","833015a7":"### Using scatter form library Express","9cbbb26e":"### Network Charts","74e7248b":"### Polar+ Charts:\n**are circular charts that use values and angles to show information as polar coordinates. Polar charts are useful for showing scientific data. ... The distance along the radial axis represents quantity, and the angle around the polar axis represents revenue**","47212e6d":"### Gantt Charts:\n**A Gantt chart, commonly used in project management, is one of the most popular and useful ways of showing activities (tasks or events) displayed against time.**\n\n*  On the left of the chart is a list of the activities and along the top is a suitable time scale. Each activity is represented by a bar; the position and length of the bar reflects the start date, duration and end date of the activity. This allows you to see at a glance:\n\n    * What the various activities are\n    * When each activity begins and ends\n    * How long each activity is scheduled to last\n    * Where activities overlap with other activities, and by how much\n    * The start and end date of the whole project","8461d018":"#### Maps","59c11235":"### This charts using for Statical .\n1. Histogram\n2. Strip Plot\n3. Box Plot\n4. Vilolin Plot","9eda3c8d":"### Map based on Latitude and Longitude","6fc909ad":"### Parallel Co-ordinate Charts:\n**A parallel coordinate plot maps each row in the data table as a line, or profile. Each attribute of a row is represented by a point on the line. This makes parallel coordinate plots similar in appearance to line charts, but the way data is translated into a plot is substantially different.**\n","107f8358":"### Subplots","a0ac5d42":"### Animation with Bubbelplot:\n**is an extension of the scatter plot used to look at relationships between three numeric variables. Each dot in a bubble chart corresponds with a single data point, and the variables' values for each point are indicated by horizontal position, vertical position, and dot size**","268e4c23":"### 3D+charst:\n**power of 3D to help Information Workers (IWs) create engaging and insightful visualizations which can be shared and presented to people on Windows 10 PCs and Surface Hub. Using this app, IWs can effortlessly create immersive visualization at scale to interact with data**","54d24f46":"### Bar:\n**is a way of summarizing a set of categorical data (continuous data can be made categorical by auto-binning.... The bar chart displays data using a number of bars, each representing a particular category. The height of each bar is proportional to a specific aggregation (for example the sum of the values in the category it represents). The categories could be something like an age group or a geographical location. It is also possible to color or split each bar into another categorical column in the data, which enables you to see the contribution from different categories to each bar or group of bars in the bar chart.**\n","6fb43680":"### This is sunburst plot:\n**visualize hierarchical data spanning outwards radially from root to leaves.**\n","7124ed5c":"### Scatter Polar Plot","dd7b16a0":"![hbjh](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUTExMWFhUXGBoXFRUYGRcaGBcZGBYYFxoYGBcbHSggGBolHhcYITEhJSkrLi8uFx82ODMsNygtLi0BCgoKDg0OGxAQGi8lHyYtLS0tLS81LS0tLS0tLS0tLS0tLS8rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAAAwECBAUGBwj\/xABQEAABAwIDBAUHBwkEBwkAAAABAgMRACEEEjEFE0FRBiJhcZEHFDKBobHRI0JSU2LB0hYzkpOiwuHw8TRVgtMVRGNyg7TjJENUc3SUo7Kz\/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAEDBAIFBv\/EADQRAAIBAgQDBgYBAwUAAAAAAAABAgMRBBIhMUFRYQUTcZGx8DJSgaHB0SIUFfEzNEKy4f\/aAAwDAQACEQMRAD8A9xpSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQHAeWLFON4XDltb6CrGMoV5utSHVIUHApCCCJJ4A2mK5HB4jGsvMqcXjkYM49jdDGrnEQGHlPBUGd3ITCTIsIvNepdJdjs4pLIeUpAafbfQUlIlbUkAyDKdZ0sNRV23NlMYosl1RHm7u\/SAUwShKkkLBBlELuLcL0BzOD6d4lYZWrA5GsWFjBrL6cy1hCltJeTl+S3gTYgqy8Z1rQbH6TY\/FDZLzqEhbi8Rkyu5UYjKw7AcSlPyQCkpGiufZXW7I6F4TDvNLS8+4lrMrCsOOlbTOdKhLaYk9XNGYqgAxpNR7F6D4XDBhxGIfU3hluOsJWtJQ2FpUlSR1JydcnWZAvQFNhdPk4x3CsNsfKuodXiUFcKwgaVuyFjLKiXOqPR4GuS6RLfd2tjWgrai0NpYKEYJ\/IlsqaElSVKAvEiOINdX0Y6O7tW0H38rL2MWtXySgFtMAEIUFCcrhlSyofOjlVj3k\/YW6XUY\/HtuqbbbWtrEBKnAygNhThCJUvqkkn5xVppQEu3OmDuDxKMH5op1x0IGDVvbP3CXd6rJ8kUDrEwqRyqPH9NMWHsY2zgA6jB5S8vfhJUFNhwhtBbuoAqtPAcTFZOP6CYTFqW+448t1YbDT2dOfDhk5k+bqy9Q5pJJmSTzrUHoOHsVjlv4l9tt9xpuGXkoD6QyhKm3khMSTIgZTCyBYxQGTgfKEt8vONYWcIwlLr2IU7BDSmEv9VrISpwJJlMxYXvbF2P5U0vLCVsJ+UZdeYQw8h907psulp1tIBadKBIBm9tQa6bZfR7BsDEIRBbfCd40opKEoSyGghIiyC2njPGsbYnRZnC2bxOJLZSpptpTgKWgrg2oIDgUkCASokCYoDRNeU4nBDFbhmVOtNgJxKVNth5JUFYhYRmYywUkFOsRrbddIulDjWyHMe2hO83QUlKVpdQlS1BEhaeq4lJVMjUJqHD9DGG0uqGNxm9cW2HMTvkl35JJShswjIUwoyFJJJVe8Rt9nbDwuGwgwQALASpCkuHMVZyVLzntKyToOtwtQHFtJGzcRhXX8dtLELxGVJJIXg3HHpSlFxDV+sACSEi1q2OL6d58LhXNwpPnrOJV1XilTW5YW51VhFycsBUDKb3rI2Z0AwTLqFl7EPIYVLOHefLjLCxAG7bj0hmAEk6jjVMP5NMGgoUl7FZG0uhpsvZm2kPtKbWltKkmBCyZ1kCSQIoDVMdMcQ7g1N4XCreSzgmlPvOYiHAp3DBwBKskvOBJCirqyeUisDZ\/lOGGwzDWVDq2cIw5iFO4hLS1FbSV5WUrBL7mU5j2kDU10avJ\/gilIRiMQ2lTKMO6G3QgYlDSQynfAJ6ygIQSnL6RHGKuPQXCICC1iMQwpDbeGWtpaQp1LYCUB0FspKwLBSQDeOVAddszGofZbebkodQlxEiDlWkKEjgYNZdYvnDaAQVJAQLyQAANSeAi08pqQPpkDMJMwO6QfcfA0BNSo3HQmJMSYHfVnnKL9YW18Y94I7xFAT0qJDyToQbA2vYzB9h8KtGJRAVmEESDzFhI56jxFAT0qFD6SQAoEkZhHI6HuqagFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoCB1kKiZEaEEg3EESP58KsVgWySSkSqQr7QMSDzHVFZVKAxUYJsFJCbpACewAKAA7Osbd3KpNynJkjqxEdhtU1cZiHtqKW9uBYFxLe9DQbzB1rdkR8oW8m9zk3Iy5b0B1ruGSqZGqSg\/7p1FWDCoCgoCCBAi1r+GvCuZ2ojHuIUhCXUg4YpSc2HSovFtwKLqkqlNy1kLREKzzCYquIG0krCUZlpCl9c+b9ZJSnKFiAQQoqgpj0etOpA6dhgIEJmBw7zJqI4Bu4y+kSTciSc0q7+sb93IVqtipxDS3RiFuuZy3u1ZW1JTLSQsANJlELCpzWjLBN60jeI2k00GyXVLbYQtaylpSy6SWi0CE5FA\/nQrW0Kibgdgdnt\/R4FOpuCkJg35Ae3makRhkiDcnNmkm5OXLJ9Vq5RtO1SqCYQUuAEhjNfzgI3pQbOf2cgtgp9KRe2JtPAbQddTl3yGQQmEraSjded4JQygHOpQYQ\/mzg3zJTIVCgO0Tg0CYESoKPaoKzZj2zF+wUdwaFSSNZm5uCACD2HKPCtDj8ZjVutbhtxKShlxSFhoJTmd+VQ6oknMG5ADZMKAm2uFhDtYolYUCAqEThc5KtwBKgCiUZsQREA5ETrcDqjgUSTF1Ag3N5Vm0019ltKkQyAnLeIiCdBAETrw4865RtG1SjMVELCLIAw8KUGWyJMGMzocSYIEExFiLH0bWMqSeslbmRPyIbJ3OICCog5lMZ\/N4FliVEz80DqUYBsBIAgJki\/NQX\/9gD6u+piwkzbVQV6wQR7hXJKG1MiyFLkIRu0xhc6lF93PnM5AQ0Gri3WJykgiuk2WlYSrOIJWohJMxOt+IKsxHYRppQEvmaJJjWbTYZiCqO8gGrU4BAyxIy5st5jNM6959nIVmUoCxaAYngQR3isfzJF9bmdTY588j\/Ff+Fqy6UBjtYdKTIkWjXWCTftlRM9tUOEQQEkWCcoF9Orbt9EVk0oCBOGSFBQEEJyiNAOUVPSlAKUpQClKUApSlAKUpQClKUApSlAKVE6sgSElXYIn21CcSq3yS9PsyDftj28aAy6VjNvkmN2sa3OWLdxOtZNAKVCpKpsoC8xGogiNecGeyqlKvpcuHfPHu8KAlpVkHn3W7PjWO424csOAQoFfU9JIEKSL9WTebxQGXSlR59bG39aAkpVmbsPspn7D7KAvpUSngNbd8fGm+ETw52+NAS0qJLwOl\/D41dn7D7KAvpVmfsPsqmfsPsoCSrZHPtqmbsPsq0ga5bxGg05d1AXBY5iqbxPMcteWtUAA0TppYWoEpJ9ETroOPGgC3ki5IEAqMkWA1Pd20ZdStIUlQUkiQoEEEHiCNRVFsIVqlJsUmQD1Tqnu7Kqy2lICUgACwAEADkBQEtKVg7R2i0wnM6sJHDiT3DU0OZSUU5SdkjOpXnXTfFrWll5tbm4cEFMkAKBIggGJ8fRNZnk+xbbeGWXFoRLgEqISCcmknjY+FURrOVXu1H34Hof0cf6VYlTTTs\/Prf8AB3NKiYfQsShSVDmkgjxFS1eYRSlKAUpWLvl5gN3aTfMNB86PXpQEqhfQ6cD\/ABrHwy1KKwptSAkwklU5he4g209tSvZJEkTw0n+ddaJKeOT2VFnfcXRLk7\/E0yd\/iatlH2fZURcRmjL6+rHvn2V0QT5O\/wATTJ3+Jq2UfZ9lJR9n2UBdk7\/E03ff4mrCpvmn2VZnSdAnvMD2a1FybE2Tv8TVhI4Se4n36VZlRxKT4R4fGpOp9n2U1GhQNniY7ifaTU1RAo+z7KloBWi27isSy0+thpDihBbBVEmEghSTAPE+lJ0re1YjVXf+6KA4PYfSPaxSV4vBoabyyFgEGZ+c3vFKSIkyQKq9jn1LKt8qD8y4An6MGLWg6gia76vCun\/R7H4fEOONOOFhxRW2EOLSEAm7eSQEwTAi0R3CqrTnN3jLL6G3DOnJ5ZQ14W9Dr8Ngd3LxUhZiFJUcxJmOukmRaSCCeGkV1WzUpU2hTaUWEKQn5qhpEwQNbd0cz5p0R2NtZa22cRmaZXK98spW9lABKG1SqFHMLLFhmi4ivWdnbMaYENpi0EySTBJEzrqfE1MKc6ctWn4c+eyOMRKm1ZPX7Jciw4M50qISoDWbQbXmDmtPL4Y20NqMlAgpXnUUJM9XMk3HabG3Hnets64EgkmANa87w3RTeOKfecUXXHJlJCEJSBYboGMxAlRB14VNSXC+r292ZRTjHd7G2R0iUgZN20pEAADMkRF9ZChM39\/GBXSB4XSQDNyZNidMtki1pibViPbOUlQSVIgXJ3bma1in85F4MQPic9+Q0pTK0A3yhQzJUbwLRpx7BWKUq17KS99bG+PcRS\/hdvx9DAe2i8tQUpZzDQiEkdgKQDHZWS30hxCbZwq3zgJ75EGa4FvbWPwucuISQpV962lQClCYSUkQDl0Bjq99b7oTsdWMKsYvOpYWUZEqDTagACLpTOQEkEDiON6sWGrJOSnp0d7s11VShG8oLLtpb\/z1OtY2ljGwhJQF57JzRmVbgQoDtNq32y1vKBLyUpVIgJM2jjc3meNTYDDbttCDBKREgACeMACwqdPpHuH31ojBx4t+Nv0ePUqqW0UvC\/7PNvJP0gxOJdxoxLm83amw3DTacoUp4G7aBM5E68q9MryryONlLmPuEytvXj1n69Vq+pbNoTiKfd1HHw9EyxagBJsBqa856RBGMWtxhWYoMKQr56BAzI+zz4jXjXa9I2s2HcGcoEXIEyPox26euvNvM3WlBxpU5esFo1Ec06jv0760YSnRqXhKaU38K97+C1W5RVwEMXRcZ\/R8nzNrsQecYV7DaqR12ueZM2Hfp6zWrV\/YT\/6lP\/4rraYF5JWnFNJAcbu6yninQrQPonMZHzZ5VJ0twQbZWU3Q5iEuII0hbKyY9c+qKjDYeVPtGm2rNNp+Tt76lfZ9WrQwFXA1\/ig04vnFvh+uFupyeGxC21ZkKUhXNJIPsruei\/TAuKDOIgKNkOaBR5KGgJ5ix7OPCMsqWYSCTyFHWlJsoEHWCCLV9NicNSxCyz358V75FMZOOx7lSuf6GbW84w4zGVoORR4m0pV6x7Qa6Cvk6tOVObhLdGpO6uKgxLWZJA11SZIg8DIqerFrA1MVWSWuKuPgTxHL11ZnVz\/YV8arveISo68AOPJRH8mqF9XBtRPej8VQTdlc55\/sq599RlwzrccAhXGO239PXXOo6oV3AoH701eHCNG1fsfiqRexrtsNvuNKSysIWYgwoHWfSvlt2Gsbo5g8S0VnEu55Ay9ZSoiZ1SI4Vut6fq1eKPxVXfH6tXij8VVulFzU3e666eWxYq0lTcFaz6a8OO\/D15l+8Hb4H4VTeDt8D8Ks3p+rV4o\/FUbhWTosdnyf3qq0pMjeDt8D8KbwdvgfhUe9P1avFH4qjdJN8jnDRSRx7F1BJkZx2+B+FX1Alw2GRXeSn29ap6AVGjVXf+6KkqNGqu\/90UBVKQBAsBoKixWGQ4gocSFJVYpNwayKUBz+KwKMOnqHqq4LzuFJCYBSoqzAAACKysLtMzlWkpHBWvKxEkzrfsrM2ghJbVm0AKu6ATWlwjalqKAIsDNyE+v7qy1Z1ISShrfgXwjGSbl5m8xLe8QQk6wQbESCCPdWrVh1N9ZwgyUgZecyBcffW5bQEgAaC1Q45MoOtrwIvF4vWiUb6tXt5FKZqXsIVEJEE8LRJmTJ7uUcatxG0cDui15ywnl10WVYzBV2jjoargcOs51pzJIEIzGxMRMcYBj+beOeaPxAfxEGw6yYI7fliRzgiq4RTT03v7\/J024ta7Hpu1sdgFpYbTimAQtIO7ebmSkiSknrCVTe\/ia3WCxwCiSFNthKUhsoPVuQlVrAG4PKE14ixggHk5t+pedHWyJINwbqC1Tf+bV7TilqzKypyBMglAiwOqlAaQAeVJtU9beSOopz0N22+hXoqBtNjwPGr0+ke4ffWs2ScyVJgSkyFQNSCPEC08orYtG5vOnqiQR4g13TkpxUkcTi4tpnnnkuYheM6oMrRrw6z19K9IriOgzASrETmupHo5ubmuXhfjXb0pzzxUjX2j\/uZW6f9UaHpc\/kw881JBuBpfX1Vx2GxwN8qh266domu16UMKXh1ZSQpJCge4wfYSfVXKYXAKUOu6e0A\/ij3Uqf0eXLXp5m+rv9Et\/IwKGKUs9LFqnG9suVTbfHS19ej+pRK0FQWFBKwZDiTkVPbIhXbIvUvSzEpXg2wkXS6JAByxkcuLwBJ0kxpWYxg0JuAD2qur\/CTYVleaJfQttforGWeIkEhXeFAK8K0UMS6dROztDhKWZrpe1+K0vLLxii+vGWVKrJNvRPLlevNKc0r25352djzlpzKZgHhcT\/ACaPO5jOVItHVED+tRLSpDimXBDqFFJHBUaEd4IIHER3UBr62hXp1dY78vz1XVeG6aMFSnKm7Pjt18P1urp7NX7PyZuEOvJ4FCT+ioj9416HXCeTTCn5Z3h1UA9t1K96fGu7r53tRp4mVunoi6l8JG4iQRe4ixIPqIuKiZwqUmQV6Rda1DwJI9dZNK88sIVzIAjTnfhpb21cJGgHifhUlKAjzHkPE\/Ckq5DxPwqSlARlR5DxPwpKuQ8T8KkqJxBMQojui\/fINAVKjyHifhSVch4n4VJSgIyo8h4n4UlXIeJ+FSUoCJSyLmAOJn+FS1SaTQFajRqrv\/dFSVjKcUCqE8bG54Dh\/GgMmla5C3rzPZA99qFK4Ild++fUYt6qmxFybaLKltqSmJItMgesjSmAQEojqyPSgz1vnSe+eVQONqIiVgcfSmOU1VreJASlIgHiFacuw9tRkV7k30sbGlYGZwzM68EkW5c\/XVuQ8lHvzH31NiLmxq0GdKwC2eKSe8E1Tc8cp8DU26i5sTVM45iteGfs\/s\/wquQ\/RPgaZeouZbbKUg5bSSbczxFW4ZkIkDvJ1JJmSTxNYhaPAEeoj2jSszDkmZBGgvPDvqGlcGj6OMFJdggSU6iZ9Ptro6wsNhcpMgGb90f1rNrPhouNNJ9fUvxFTvKjl4eiLSJsa5THYJTTnEpPo8o+P9a62on2UrGVQkVbJSs1CWVvS6Sulxs+F9r\/AF4EUarpu6RyK3hFtP3SYrPw4ypT2H+lVxewl5syVlQOqTrHAD+RV7mEegdWTN7jSTfXurunGMEoxVleyXJa+u7fNmWrKUqsptaRirP5pNqUmuitGKVv+L+vJeVDYuZKcYkXSAh2PoTKV21KSYPYeSa5rYuGdfUGspLk+mIMi3pHsBBzeOleveYlbRbcAKVDKoGDIIykRyIqPYWwWcKkhsEqPpLVdaj3wAB2AAVZTruMF8y2fHo0+atZ30nBxi\/gjbU5LI6b1Xu31W8ZLXWS2lpkbG2anDsoaTfKLn6Sjcnx+6thSlcSk5ScnuypKxG42FWNR+ap5q46KVxJPPtrIrynbWDb37i3drOYcrccKWi+lACQ6tAypU6m3V5VyD07zYc1fpK7db31qvmo5q\/SV8a8k8zw39+r\/wDdN\/53Ctu10NWRP+lcSP8AiHxs4aEnorbIBkFXrJPv0qavNvyKX\/euJ\/WK\/wAyqDoUv+9cT+sV\/mVGZLclRb2PSqV5oOhyv73xH60\/5lU\/I8\/3viP1p\/zK57yPMnup\/Kz0yleQOdH3kqUnz7GHKoiQtfAx9OrDsJ\/\/AMbjP01\/ip3kevk\/0SqUunmv2exUrydWx1QZxOMH\/Hf9lq9XFWyg47lEKinsVpSlcnYqJToBg2++paw8Ub1KVyGT79PP303yefvrENUrrKiLmWrEJFyax07VZIkLBHr4+rsNW0plQuy5e1WQYKxz0OmnKn+lWfpjhz4iRw7atNKZULsmDjt5Qns65k6fZtx8KqFOSnqJj5xzmRroMvW4cRx9eTSuDogfQsxlXl59WZ+FRhl36wT\/ALnfPHu8Ks2iqEzC5AJBSSACBqq4kePGtF0UxGIWgrdUVBUFsnLpebDS\/Ouc38lG2\/4LY0r0pVLrRpW4u\/LwOqFVrB3qudN6rnVmUozGdSsHeq51Xeq50yjMZtKwd6rnTeq50yk5jOpWFvVc6oXVc6ZRmM6la9TyrX1+Htq7eq50yi5nUrXYl8hSE5gMwUfm\/NE6HX7qoh5SpIXaf9mfbNRYnbc2VfPPlRxTiMbCFrSMqzCVKH+t4nka+hq+c\/Kx\/bv8K\/8Am8TV2G\/1F9fQpr\/AcWrSvonCIAQkgCSlMnn1RXzurQ19I4LCLLaIAuhMXT9EcJrZXaTV+v4MkItp2XvUuYFler31VDYnQeArF20XWGSsdU5kieqrnwM8q5fGdI8QhoqzXzoSCEtAgFLhOrZB9EcK8PFSTq+R9D2dh5zoac3vpx8DdYZsBSYAFxoBzFQqbAJIAm94Fcy70neCELBVdaxOVmYCWyP+6I+eeHjaIsd0oeTlI+chJMJY1IJvLJk90dwrJ3btuezHD1HJWS1vx5NneOpG8cJA\/Orvb6VWu+ie4+6rcQ4UuLg6rWfRBAlRHFX3VE64cqusNPo8yB9Ltr14YulFJN7Jcz5OpgK85OUY7tvePHbiDs5d\/k+fBF\/2K9AFcSdt\/wCzPiK7aqYV3V3tpyNFXCKhtfXnbh\/krSlK7KhWuxucq6pTAEGQSZmdQRw99bGsTFm\/qqY7kMwIdmMyD\/gVbXXr3vH8mq5Hvpt\/oK5\/+ZyrJNUqw4ImEuCc6knSMqSnvmVGeFXOBXzYB7eVX0oSWtTAnWrqGlCDY0pSqiwwdpq6h9LRXogkafOgWFef9G9vLQtDbiwGgCIKU2sYuBOtd3iXSpkKKikqQTAEzKdDIMDwryRpEqjt4XrHiqkoSi11\/B7nZNCnWpVYVLW01dtNJK6urJrmelflDhvrk+34VJh9s4daghLiSo2Avf2Vzmydj4NxlKlrhRmRnTbrEDha0VssHsnBNLS4lzrJMiXAR4RWhSr31UfM8uNTs2dJThOequr5eKur\/a50NUokzcVWtJjFKUoBRXw91KK+HuoDHxGIQlSQTBJsL8QR76nrDxuDK1tqzRlNhE9pvPGAKyibiuY3uyyaioxs9ePmZe6BykzYWgkC4i4Bv91V81HNf6a\/jUjeg7hV9ckJIV4n08caGIIWylaochSgk\/60\/AMiYn317ZXhXlD\/ALV+s\/5l+tODinVs+TKcS2qbaOeU8iPzDP6sV9AbPQN00YHoI4adUaV87r0Ne94N5wNogpjImJT9kdtWdpKMFGy5\/g47Pc6jld8jH6bOJThpVpvE8Y4K45T7q832ptFCWTlTm+UbFy2oXQ9pmaIBty413fTdxKsLDiiE503A4wrkDXArJDK\/NVnNnbzSoJhOV3irLxjnXiStKdz6rBxy0NefW263Zi+cuOMNlDKDKl6+apIPUGimrzA0A0qu0HHrQ22cqEJJzYKEqy3SZbN5CuWhgCsfG4ZxzzZT7zSVharKWVEjOiMpQFD1Tx7axsfhOpiP+1N3fT85zqiMR1TCLG+n2TVuVWOnNKSatu\/mfHnfU9J2ptAIdWkoUesq4IA9InSK1O0OkiGjkKR1kg3WZEn7LSh83nxqbbz7YfcCnEg5jY66k1odsIQpSSGt51BChMG6rWcHGs2X+TujuhCGWOa+y6cOpmv9JG0n0U+ilV1qHpJCvqj9L+mlezivnraiYCFJwalySD+ckJQlpKQcqlDQkTaYr6FFaaEUr2PP7TyWhlvxve3QrSsF151NylJH2c6joY6oTp66jGOc60o09GEuGdfs9ntrTY8q5sqxMUL+qoBjXCQA3c6SHAJiTKskAWN+7nVmKwiVEFxKc0XgmNT3T4VMVqQyU1SokYdKTmAgmZPeZNTTXZyKpVZqhvQFTUe+TpmHiKuQgJsLVD5qL3VftNCDZ71OmYTMRI15d9jUtYowieavHvM996yqqLDC2ioBBGcJkEQYvbQfzxrzTYeEaddCFZkJUCFEkAWE65RXpu0CciiCBYzImbaC4g142Hv5mtFDAzxLzQjdxtxta\/1XI83tCvjYZYYd\/wAJXzxvFKS2s78Grp24M75PRPDESCojmCPhT8kcP9Jfj\/CtBszpaWWkthoKyTfORMqJ0y9tZX5dK+oT+mfw1s\/teK+T7r9lUMFg5RTlSinZXVtnxV+NtjtG0QAOQjwEVdXE\/l0r6hP6Z\/DT8uVfUJ\/TP4af2zFfJ94\/s395DmdtSuJ\/LpX1Cf0z+GpU9NSQPkP2z+Gqa2DrUUnUjb6r8Mor46hQipVJWT02f4R2NFfD3Vzmx+k5edS3ucuab5piElWkdldA44kESQJiJIE2rNY7w2KpYmGek7q9uK1snxtzRUpmOz+la7HA79vrEA8JMdWffpWzrCxODzuJXMRw7vjpUHVeLlCy5r11+xukaDuFX1YjQdwq+qzUK89290CVinS4opF1gQvVKnnHASC2YPyka8KUrqE5Qd4uzOZRjJWkrmvPksP0\/wBv\/pV2jWBfSkJyN2AH508BH1VKUqTlVspu4pRVO7grGFtvYD2Ja3SkoSMwVIcM2nm121zzvk2UpBRnIlSVSHL9VKxH5rQ5j4UpVSpx5GqOMrQWWMtNyJXkvUQ2C4Tu1FQJcuZIN\/kvs1HiPJRnDgLh+UcDh64sRvLD5LT5Q+ApSpyIPF1m\/i97+psNq9BHn3VukoSVGYDht\/8AFUDnk+fOUB1IATljMDxJm7Jg0pXPdR3O1j66SipaLbRfoxMV5MH1pA30GVEkOROZKEwYa0G7Hia9WilK7UUtimrXnVd5u5WlKVJUKj3Y5eNKUBQNDl3dn8\/fVd0nkKUqRYBocqbpPIUpQWG6HKaFlPKqUoRYkFVpSoJLFpkEe3l203Q5VSlAA0KpuhPZypSgLXUAJMT6hJ8KNhKhMEd8ilKAqhoAXueelV3V54cvvmlKBaBbOkWvftHKrt0OVUpUh6jcjlTcp5UpQixeBVaUqCT\/2Q==)\n\n\n<h1><center>If YOU FIND THIS NOTEBOOK USEFUL FOR YOU DON'T FORGET TO VOTE<\/center><\/h1>","297aa27d":"### waffle charts","e0474e6b":"### Line Polar Charst","6d90b5ae":"### Scatter Map","3f5cb70c":"### Bar Polar Chart"}}