{"cell_type":{"f28a2431":"code","ce428c48":"code","e4225f57":"code","6d2bcc68":"code","67394809":"code","dcc64ec6":"code","3f6186db":"code","052c3818":"code","533fe7ee":"code","a812cf22":"code","690f3204":"code","a6f22ce2":"code","ef699966":"code","84f46f0a":"code","71cb963a":"code","a8189710":"code","855f59dc":"code","1452eccf":"code","614167b2":"code","e5da8c18":"markdown","809a8765":"markdown","41fe2ff7":"markdown","5661f71b":"markdown","fa2e43b6":"markdown"},"source":{"f28a2431":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom itertools import chain\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      pass\n        #print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce428c48":"results2002 = pd.read_csv('\/kaggle\/input\/predict-pakistan-elections-2018\/National Assembly 2002 - Updated.csv')","e4225f57":"results2002['Constituency_title'].unique().size","6d2bcc68":"# getting winner of each seat (Constituency_title)\ndic = {}\ncount = 1\nfor result in results2002.iterrows() :\n    na = result[1][2]\n    row = dic.get(na)\n    if(row != None):\n        if(row[1][5] < result[1][5]):\n            dic[na] = result\n    else:\n        dic[na] = result","67394809":"df = pd.DataFrame([ [ vv for vv in v[1]] for k,v in dic.items() ] ) \ndf.columns  = ['District', 'Seat', 'Constituency_title', 'Candidate_Name', 'Party',\n       'Votes', 'Total_Valid_Votes', 'Total_Rejected_Votes', 'Total_Votes',\n       'Total_Registered_Voters', 'Turnout']\n#df.head()","dcc64ec6":"# Some cleaning.\ndf.loc[df['Party']=='Indepndent','Party'] = 'Independent'\n\ndf.loc[df['Party']=='Muttahidda Majlis-e-Amal','Party'] = 'Muttahidda Majlis-e-Amal Pakistan'\n\ndf.loc[df['Party']=='Pakistan Mulim League(QA)','Party'] = 'Pakistan Muslim League(QA)'\n\ndf.loc[df['Party']=='Pakistan Peoples Party Parliamentarian','Party'] = 'Pakistan Peoples Party Parliamentarians'\ndf.loc[df['Party']=='Pakistan Peoples Party Parlimentarians','Party'] = 'Pakistan Peoples Party Parliamentarians'\n\ndf.loc[df['Party']=='Pakistan peoples Party Parlimentarians','Party'] = 'Pakistan Peoples Party Parliamentarians'\n","3f6186db":"df.to_csv('winner_2002.csv')","052c3818":"winner2002 = pd.read_csv('winner_2002.csv')\nwinner2002['District'] = winner2002['District'].str.lower()\nwinner2002.loc[winner2002['District']=='killa', 'District'] = 'pishin'\n\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split(' cum ')))\n\nlens = winner2002['District'].str.split(' cum ').map(len)\n\nwinner2002 = pd.DataFrame({\n                            'District': chainer(winner2002['District']),\n                            'Seat':np.repeat(winner2002['Seat'], lens),\n                            'Constituency_title':np.repeat(winner2002['Constituency_title'], lens),\n                            'Candidate_Name':np.repeat(winner2002['Candidate_Name'], lens),\n                            'Party':np.repeat(winner2002['Party'], lens),\n                            'Votes':np.repeat(winner2002['Votes'], lens),\n                            'Total_Valid_Votes':np.repeat(winner2002['Total_Valid_Votes'], lens),\n                            'Total_Rejected_Votes':np.repeat(winner2002['Total_Rejected_Votes'], lens),\n                            'Total_Votes':np.repeat(winner2002['Total_Votes'], lens),\n                            'Total_Registered_Voters':np.repeat(winner2002['Total_Registered_Voters'], lens),\n                            'Turnout':np.repeat(winner2002['Turnout'], lens)\n                           })\n#winner2002.head()","533fe7ee":"for g, group in winner2002.groupby(['Party',]):\n    winner2002.loc[winner2002['Party']==g,'Total_seats'] = len(group)","a812cf22":"import geopandas as gpd\nfname = '..\/input\/pakistan-administrative-bounderies\/pak_adm_ocha_pco_gaul_20181218_shp\/pak_adm_ocha_pco_gaul_20181218_SHP\/'\ngeo = gpd.read_file(fname + 'pak_admbnda_adm3_ocha_pco_gaul_20181218.shp')\n\ngeo = geo[['ADM2_EN','geometry']]\ngeo.columns = ['District','geometry']\n\ngeo['District'] = geo['District'].str.lower()\ngeo.head()","690f3204":"plot_data = geo.merge(winner2002,on=\"District\")\n\nplot_data['District_Turnout'] = plot_data.apply(lambda x: x['District'] + '<br>' + str(x['Turnout']), axis=1)\n\nplot_data['District_Party_Total_seats'] = plot_data.apply(lambda x: '<b>' + x['District'] + '<\/b><br> Turnover:' + x['Party'] + '<br>Seats: '+ str(x['Total_seats'])  , axis=1)\n\nplot_data.head()","a6f22ce2":"import geopandas as gpd\nimport folium\nimport branca.colormap as cm","ef699966":"\nmymap = folium.Map(location=[33.738045, 72.084488], zoom_start=6,tiles=None)\nfolium.TileLayer('CartoDB positron',name=\"Light Map\",control=False).add_to(mymap)\n\n\nmyscale = (plot_data['Turnout'].quantile((0,0.2,0.4,0.6,0.8,1))).tolist()\n\n\nchoropleth = folium.Choropleth(\n    geo_data=plot_data,\n    name='Choropleth',\n    data=plot_data,\n    columns=['District','Turnout','Party','District_Turnout'],\n    key_on=\"feature.properties.District\",\n    fill_color='YlGnBu',\n    threshold_scale=myscale,\n    fill_opacity=1,\n    line_opacity=0.2,\n    legend_name='Turnout',\n    smooth_factor=0\n).add_to(mymap)\n\nfolium.LayerControl(collapsed=True).add_to(mymap)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['District_Turnout'] ,labels=False)\n)\n\nmymap","84f46f0a":"#Seat WIN by each party in each district\n\nwins_in_district = {}\n\nfor g, group in winner2002.groupby(['District','Party']):\n    district = g[0]\n    val = wins_in_district.get(district)\n    if(val == None):\n        wins_in_district[district] = '<b>' + district + '<\/b><br>' + str(len(group)) + ':' + g[1]\n    else:\n        wins_in_district[district] = val + '<br>' + str(len(group)) + ':' + g[1]\n\n","71cb963a":"\npartiesMap = folium.Map(width=1000,height=1000, location=[33.738045, 72.084488], zoom_start=6)\nfolium.TileLayer('CartoDB positron',name=\"Light Map\",control=False).add_to(mymap)\n\n\nmyscale = (plot_data['Total_seats'].quantile((0, 0.2, 0.4, 0.6, 0.8, 1))).tolist()\nchoropleth = folium.Choropleth(\n geo_data=plot_data,\n name='Choropleth',\n data=plot_data,\n columns=['District','Total_seats','District_Party_Total_seats'],\n key_on=\"feature.properties.District\",\n fill_color='YlGnBu',\n threshold_scale=myscale,\n fill_opacity=0.7,\n line_opacity=0.5,\n legend_name='Total_seats',\n smooth_factor=0\n).add_to(partiesMap)\n\nfolium.LayerControl(collapsed=True).add_to(partiesMap)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['District_Party_Total_seats'] ,labels=False)\n)\n\npartiesMap","a8189710":"wins_in_district_df = pd.DataFrame.from_dict(wins_in_district, orient='index')\nwins_in_district_df = wins_in_district_df.reset_index()","855f59dc":"wins_in_district_df.columns = ['District','Winners']","1452eccf":"winners_plot_data = wins_in_district_df.merge(winner2002,on=\"District\")\nwinners_plot_data = geo.merge(winners_plot_data,on=\"District\")\nwinners_plot_data.head()","614167b2":"winnersMap = folium.Map(width=1000,height=1000, location=[33.738045, 72.084488], zoom_start=6)\nfolium.TileLayer('CartoDB positron',name=\"Light Map\",control=False).add_to(winnersMap)\n\n\nmyscale = (plot_data['Total_seats'].quantile((0, 0.2, 0.4, 0.6, 0.8, 1))).tolist()\nchoropleth = folium.Choropleth(\n geo_data=winners_plot_data,\n name='Choropleth',\n data=winners_plot_data,\n columns=['District','Total_seats','Winners'],\n key_on=\"feature.properties.District\",\n fill_color='YlGnBu',\n threshold_scale=myscale,\n fill_opacity=0.7,\n line_opacity=0.5,\n legend_name='',\n smooth_factor=0\n).add_to(winnersMap)\n\nfolium.LayerControl(collapsed=True).add_to(winnersMap)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['Winners'] ,labels=False)\n)\n\nwinnersMap","e5da8c18":"# Winning Party in each district","809a8765":"# Turnover per district","41fe2ff7":"# Just divided work into 2 part, \n# Here is 2nd part with analysis","5661f71b":"# Number of seats by each Part in each district","fa2e43b6":"# **IN Sha Allah Will do some more analysis**. \n\nThis is for now. In order to show Winner in each NA, we need geo coordinates for each NA. As we have only district level geo coordinates, so try to desing in district level results.\n"}}