{"cell_type":{"951dbee9":"code","716c5dc3":"code","ca854af8":"code","45a3eb3c":"code","dcdfdf58":"code","8a5fefba":"code","f9140100":"code","d1b7091b":"code","4eab479f":"code","c4d152c5":"code","cffdea1d":"code","269579ac":"code","9f6c5c04":"code","e68e6221":"code","ecd9fc69":"code","1c632639":"code","9eabf9d8":"code","55a28592":"code","e51066d8":"code","5fe673f4":"code","ee3dd1f7":"code","9270d5f6":"code","99b532ef":"markdown","29112150":"markdown","f20dc51a":"markdown","928d3630":"markdown","6df9b161":"markdown","e29757e1":"markdown","5902ce71":"markdown","a4bc4056":"markdown","75cd149d":"markdown","683e6c42":"markdown","7de82f92":"markdown","3a7acd61":"markdown","38a33f1c":"markdown","34991f51":"markdown","00b6a146":"markdown","02508e57":"markdown","3a3d9834":"markdown","1a084302":"markdown","450d8969":"markdown","293b6ef3":"markdown","7c0abb92":"markdown","7689c388":"markdown","46a2ae02":"markdown","aa91580b":"markdown"},"source":{"951dbee9":"def generate_bigrams(x):\n    n_grams = set(zip(*[x[i:] for i in range(2)]))\n    for n_gram in n_grams:\n        x.append(' '.join(n_gram))\n    return x","716c5dc3":"generate_bigrams(['This', 'film', 'is', 'terrible'])","ca854af8":"import torch\nfrom torchtext import data\nfrom torchtext import datasets\n\nSEED = 1234\n\ntorch.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True\n\nTEXT = data.Field(tokenize = 'spacy', preprocessing = generate_bigrams)\nLABEL = data.LabelField(dtype = torch.float)","45a3eb3c":"import random\n\ntrain_data, test_data = datasets.IMDB.splits(TEXT, LABEL)\n\ntrain_data, valid_data = train_data.split(random_state = random.seed(SEED))","dcdfdf58":"MAX_VOCAB_SIZE = 25_000\n\nTEXT.build_vocab(train_data, \n                 max_size = MAX_VOCAB_SIZE, \n                 vectors = \"glove.6B.100d\", \n                 unk_init = torch.Tensor.normal_)\n\nLABEL.build_vocab(train_data)","8a5fefba":"BATCH_SIZE = 64\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\ntrain_iterator, valid_iterator, test_iterator = data.BucketIterator.splits(\n    (train_data, valid_data, test_data), \n    batch_size = BATCH_SIZE, \n    device = device)","f9140100":"import torch.nn as nn\nimport torch.nn.functional as F\n\nclass FastText(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, output_dim, pad_idx):\n        \n        super().__init__()\n        \n        self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx=pad_idx)\n        \n        self.fc = nn.Linear(embedding_dim, output_dim)\n        \n    def forward(self, text):\n        \n        #text = [sent len, batch size]\n        \n        embedded = self.embedding(text)\n                \n        #embedded = [sent len, batch size, emb dim]\n        \n        embedded = embedded.permute(1, 0, 2)\n        \n        #embedded = [batch size, sent len, emb dim]\n        \n        pooled = F.avg_pool2d(embedded, (embedded.shape[1], 1)).squeeze(1) \n        \n        #pooled = [batch size, embedding_dim]\n                \n        return self.fc(pooled)","d1b7091b":"INPUT_DIM = len(TEXT.vocab)\nEMBEDDING_DIM = 100\nOUTPUT_DIM = 1\nPAD_IDX = TEXT.vocab.stoi[TEXT.pad_token]\n\nmodel = FastText(INPUT_DIM, EMBEDDING_DIM, OUTPUT_DIM, PAD_IDX)","4eab479f":"def count_parameters(model):\n    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n\nprint(f'The model has {count_parameters(model):,} trainable parameters')","c4d152c5":"pretrained_embeddings = TEXT.vocab.vectors\n\nmodel.embedding.weight.data.copy_(pretrained_embeddings)","cffdea1d":"UNK_IDX = TEXT.vocab.stoi[TEXT.unk_token]\n\nmodel.embedding.weight.data[UNK_IDX] = torch.zeros(EMBEDDING_DIM)\nmodel.embedding.weight.data[PAD_IDX] = torch.zeros(EMBEDDING_DIM)","269579ac":"import torch.optim as optim\n\noptimizer = optim.Adam(model.parameters())","9f6c5c04":"criterion = nn.BCEWithLogitsLoss()\n\nmodel = model.to(device)\ncriterion = criterion.to(device)","e68e6221":"def binary_accuracy(preds, y):\n    \"\"\"\n    Returns accuracy per batch, i.e. if you get 8\/10 right, this returns 0.8, NOT 8\n    \"\"\"\n\n    #round predictions to the closest integer\n    rounded_preds = torch.round(torch.sigmoid(preds))\n    correct = (rounded_preds == y).float() #convert into float for division \n    acc = correct.sum() \/ len(correct)\n    return acc","ecd9fc69":"def train(model, iterator, optimizer, criterion):\n    \n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.train()\n    \n    for batch in iterator:\n        \n        optimizer.zero_grad()\n        \n        predictions = model(batch.text).squeeze(1)\n        \n        loss = criterion(predictions, batch.label)\n        \n        acc = binary_accuracy(predictions, batch.label)\n        \n        loss.backward()\n        \n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        epoch_acc += acc.item()\n        \n    return epoch_loss \/ len(iterator), epoch_acc \/ len(iterator)","1c632639":"def evaluate(model, iterator, criterion):\n    \n    epoch_loss = 0\n    epoch_acc = 0\n    \n    model.eval()\n    \n    with torch.no_grad():\n    \n        for batch in iterator:\n\n            predictions = model(batch.text).squeeze(1)\n            \n            loss = criterion(predictions, batch.label)\n            \n            acc = binary_accuracy(predictions, batch.label)\n\n            epoch_loss += loss.item()\n            epoch_acc += acc.item()\n        \n    return epoch_loss \/ len(iterator), epoch_acc \/ len(iterator)","9eabf9d8":"import time\n\ndef epoch_time(start_time, end_time):\n    elapsed_time = end_time - start_time\n    elapsed_mins = int(elapsed_time \/ 60)\n    elapsed_secs = int(elapsed_time - (elapsed_mins * 60))\n    return elapsed_mins, elapsed_secs","55a28592":"N_EPOCHS = 5\n\nbest_valid_loss = float('inf')\n\nfor epoch in range(N_EPOCHS):\n\n    start_time = time.time()\n    \n    train_loss, train_acc = train(model, train_iterator, optimizer, criterion)\n    valid_loss, valid_acc = evaluate(model, valid_iterator, criterion)\n    \n    end_time = time.time()\n\n    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n    \n    if valid_loss < best_valid_loss:\n        best_valid_loss = valid_loss\n        torch.save(model.state_dict(), 'tut3-model.pt')\n    \n    print(f'Epoch: {epoch+1:02} | Epoch Time: {epoch_mins}m {epoch_secs}s')\n    print(f'\\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%')\n    print(f'\\t Val. Loss: {valid_loss:.3f} |  Val. Acc: {valid_acc*100:.2f}%')","e51066d8":"model.load_state_dict(torch.load('tut3-model.pt'))\n\ntest_loss, test_acc = evaluate(model, test_iterator, criterion)\n\nprint(f'Test Loss: {test_loss:.3f} | Test Acc: {test_acc*100:.2f}%')","5fe673f4":"import spacy\nnlp = spacy.load('en')\n\ndef predict_sentiment(model, sentence):\n    model.eval()\n    tokenized = generate_bigrams([tok.text for tok in nlp.tokenizer(sentence)])\n    indexed = [TEXT.vocab.stoi[t] for t in tokenized]\n    tensor = torch.LongTensor(indexed).to(device)\n    tensor = tensor.unsqueeze(1)\n    prediction = torch.sigmoid(model(tensor))\n    return prediction.item()","ee3dd1f7":"predict_sentiment(model, \"This film is terrible\")","9270d5f6":"predict_sentiment(model, \"This film is great\")","99b532ef":"Build the vocab and load the pre-trained word embeddings.","29112150":"## Train the Model","f20dc51a":"We implement the function to calculate accuracy...","928d3630":"An example negative review...","6df9b161":"Not forgetting to zero the initial weights of our unknown and padding tokens.","e29757e1":"TorchText `Field`s have a `preprocessing` argument. A function passed here will be applied to a sentence after it has been tokenized (transformed from a string into a list of tokens), but before it has been numericalized (transformed from a list of tokens to a list of indexes). This is where we'll pass our `generate_bigrams` function.\n\nAs we aren't using an RNN we can't use packed padded sequences, thus we do not need to set `include_lengths = True`.","5902ce71":"We define a function for testing our model...\n\n**Note**: again, we leave `model.eval()` even though we do not use dropout.","a4bc4056":"Looking at the number of parameters in our model, we see we have about the same as the standard RNN from the first notebook and half the parameters of the previous model.","75cd149d":"Finally, we train our model.","683e6c42":"An example positive review...","7de82f92":"As previously, we'll create an instance of our `FastText` class.","3a7acd61":"As an example:","38a33f1c":"And copy the pre-trained vectors to our embedding layer.","34991f51":"And create the iterators.","00b6a146":"Training the model is the exact same as last time.\n\nWe initialize our optimizer...","02508e57":"## Preparing Data\n\nOne of the key concepts in the FastText paper is that they calculate the n-grams of an input sentence and append them to the end of a sentence. Here, we'll use bi-grams. Briefly, a bi-gram is a pair of words\/tokens that appear consecutively within a sentence. \n\nFor example, in the sentence \"how are you ?\", the bi-grams are: \"how are\", \"are you\" and \"you ?\".\n\nThe `generate_bigrams` function takes a sentence that has already been tokenized, calculates the bi-grams and appends them to the end of the tokenized list.","3a3d9834":" Faster Sentiment Analysis\n\nIn the previous notebook we managed to achieve a decent test accuracy of ~84% using all of the common techniques used for sentiment analysis. In this notebook, we'll implement a model that gets comparable results whilst training significantly faster and using around half of the parameters. More specifically, we'll be implementing the \"FastText\" model from the paper [Bag of Tricks for Efficient Text Classification](https:\/\/arxiv.org\/abs\/1607.01759).","1a084302":"We define the criterion and place the model and criterion on the GPU (if available)...","450d8969":"As before, we load the IMDb dataset and create the splits.","293b6ef3":"## User Input\n\nAnd as before, we can test on any input the user provides making sure to generate bigrams from our tokenized sentence.","7c0abb92":"We define a function for training our model...\n\n**Note**: we are no longer using dropout so we do not need to use `model.train()`, but as mentioned in the 1st notebook, it is good practice to use it.","7689c388":"...and get the test accuracy!\n\nThe results are comparable to the results in the last notebook, but training takes considerably less time!","46a2ae02":"## Build the Model\n\nThis model has far fewer parameters than the previous model as it only has 2 layers that have any parameters, the embedding layer and the linear layer. There is no RNN component in sight!\n\nInstead, it first calculates the word embedding for each word using the `Embedding` layer (blue), then calculates the average of all of the word embeddings (pink) and feeds this through the `Linear` layer (silver), and that's it!\n\n![](assets\/sentiment8.png)\n\nWe implement the averaging with the `avg_pool2d` (average pool 2-dimensions) function. Initially, you may think using a 2-dimensional pooling seems strange, surely our sentences are 1-dimensional, not 2-dimensional? However, you can think of the word embeddings as a 2-dimensional grid, where the words are along one axis and the dimensions of the word embeddings are along the other. The image below is an example sentence after being converted into 5-dimensional word embeddings, with the words along the vertical axis and the embeddings along the horizontal axis. Each element in this [4x5] tensor is represented by a green block.\n\n![](assets\/sentiment9.png)\n\nThe `avg_pool2d` uses a filter of size `embedded.shape[1]` (i.e. the length of the sentence) by 1. This is shown in pink in the image below.\n\n![](assets\/sentiment10.png)\n\nWe calculate the average value of all elements covered by the filter, then the filter then slides to the right, calculating the average over the next column of embedding values for each word in the sentence. \n\n![](assets\/sentiment11.png)\n\nEach filter position gives us a single value, the average of all covered elements. After the filter has covered all embedding dimensions we get a [1x5] tensor. This tensor is then passed through the linear layer to produce our prediction.","aa91580b":"As before, we'll implement a useful function to tell us how long an epoch takes."}}