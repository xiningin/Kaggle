{"cell_type":{"6a71ceb6":"code","52a7f55e":"code","d71d91df":"code","e861d477":"code","897836ff":"code","56629509":"code","38c00773":"code","7ee9378d":"code","ab561fff":"code","bd3e87c0":"code","d6691846":"code","2fa66ee6":"code","dccb27a1":"code","270a79a4":"code","f9277ff2":"code","233b3917":"code","096d5196":"code","7cbf740d":"code","93622bfb":"code","1d565df0":"code","eb97feed":"code","0edada41":"markdown","46dcebc5":"markdown","ffdce6cb":"markdown","5f3578e1":"markdown","59e14776":"markdown","5ee3c375":"markdown"},"source":{"6a71ceb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52a7f55e":"!pip install pycaret[full] --quiet","d71d91df":"import warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#ignore warnings\nwarnings.filterwarnings(\"ignore\")\n\n# import the regression module\nfrom pycaret.regression import *","e861d477":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\", index_col=0, parse_dates=True)\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\", index_col=0, parse_dates=True)","897836ff":"train['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])","56629509":"#creating a 12 month moving average\ndf = train.copy()\ndf['mov_avg'] = df['num_sold'].rolling(12).mean()\n\n# plotting the data and moving average\nimport plotly.express as px\nfig = px.line(df, x=\"date\", y=[\"num_sold\", \"mov_avg\"], template = 'plotly_dark')\nfig.show()","38c00773":"import holidays\nholiday_list = []\nholiday_dict = {}\nfor date, name in holidays.Finland(years=[2015, 2016, 2017, 2018, 2019]).items():\n    holiday_list.append([date, name])\n    \nfor date, name in holidays.Norway(years=[2015, 2016, 2017, 2018, 2019]).items():\n    holiday_list.append([date, name])\n    \nfor date, name in holidays.Sweden(years=[2015, 2016, 2017, 2018, 2019]).items():\n    if name!='S\u00f6ndag':\n        holiday_list.append([date, name.replace(\", S\u00f6ndag\", \"\")])\n        \n\nfor i in range(len(holiday_list)):\n    holiday_dict[holiday_list[i][0]] = holiday_list[i][1]","7ee9378d":"def create_features(df):\n    df['day'] = df['date'].dt.day\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['DayOfYear'] = df['date'].dt.dayofyear\n    df['weekday'] = df['date'].dt.weekday\n    df['WeekOfYear'] = df['date'].dt.weekofyear\n    df['quarter'] = df['date'].dt.quarter\n#     df['IsLeapYear'] = df['date'].dt.is_leap_year\n    df['weekend'] = (df['date'].dt.weekday>=5).astype(int)\n    df['holiday_name'] = df['date'].map(holiday_dict)\n    df['is_holiday'] = np.where(df['holiday_name'].notnull(), 1, 0)\n    df['holiday_name'] = df['holiday_name'].fillna(\"No holiday\")\n    df['DayOfMonth'] = df['date'].dt.days_in_month\n    df['daysinmonth'] = df['date'].dt.days_in_month\n    df.drop(columns=['date'], inplace=True)\n    \ncreate_features(train)\ncreate_features(test)","ab561fff":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","bd3e87c0":"# initialize setup\nreg = setup(data = train,\n            target = 'num_sold',\n            normalize=True,\n            normalize_method='robust',\n            transform_target = True,\n            data_split_shuffle = False, #so that we do not use \"future\" observations to predict \"past\" observations\n            create_clusters = False,\n            use_gpu = True,\n            silent = True,\n            fold=10,\n            n_jobs = -1)","d6691846":"#see available models\nmodels()","2fa66ee6":"# add SMAPE to PyCaret\nadd_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better=False)","dccb27a1":"best = compare_models(sort='SMAPE', n_select=3)","270a79a4":"blend = blend_models(best)\npredict_model(blend)","f9277ff2":"final_blend = finalize_model(blend)\npredict_model(final_blend)","233b3917":"predictions = predict_model(final_blend, data=test)","096d5196":"predictions","7cbf740d":"predictions.columns","93622bfb":"predictions['Label']","1d565df0":"submission = pd.DataFrame(list(zip(test.index,predictions.Label)),columns = ['row_id', 'num_sold'])\n\n#The ground truth values are integers so rounding on average gets you closer to the actual values.\n#For more info: refer https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/299162\nsubmission.num_sold = np.round(submission.num_sold).astype(int)\nsubmission","eb97feed":"submission.to_csv('.\/submission.csv', index=False)","0edada41":"Refer: [this discussion](https:\/\/www.kaggle.com\/c\/web-traffic-time-series-forecasting\/discussion\/36414)","46dcebc5":"Refer: [this notebook](https:\/\/www.kaggle.com\/maxencefzr\/tps-jan22-eda-simple-catboost?scriptVersionId=84486229&cellId=26)","ffdce6cb":"## Making predictions","5f3578e1":"Refer: [this notebook](https:\/\/www.kaggle.com\/bernhardklinger\/tps-jan-2022\/notebook)","59e14776":"## Creating some features","5ee3c375":"## Using Pycaret"}}