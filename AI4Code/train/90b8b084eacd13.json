{"cell_type":{"ff746c7b":"code","f4bba4b8":"code","8c12df29":"code","893f43a8":"code","c067b116":"code","56b8d9e0":"code","18263103":"code","fa2be09b":"code","e2c7eeaf":"code","7e712ca3":"code","27a3d7db":"code","944b376e":"code","d64e91e4":"code","dc6c572e":"code","53fe4f89":"code","4dc490a9":"code","c1e6a09b":"code","6bfc19b8":"code","da4d1ab3":"code","b33730c9":"code","80c6e07d":"code","9531dbcf":"code","1a156fc6":"code","c181d1f8":"markdown","003099d6":"markdown","6da223ad":"markdown","632210aa":"markdown","7e36f6e9":"markdown","161b4761":"markdown","b86f5cfa":"markdown","f35aee00":"markdown","60067bb8":"markdown","483d554d":"markdown","242362c9":"markdown","97380bb6":"markdown","50c96354":"markdown","369ee31d":"markdown","a7d64a7e":"markdown"},"source":{"ff746c7b":"import warnings\nimport numpy as np \nimport pandas as pd\nimport plotly as py\nimport seaborn as sns\nimport statistics as stat\nfrom datetime import date\nimport plotly.express as px\nimport plotly.graph_objs as go\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected = True)\nimport matplotlib.lines as lines\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\n\ncust = pd.read_csv('..\/input\/customer-personality-analysis\/marketing_campaign.csv', sep = '\\t')","f4bba4b8":"cust.head(3)","8c12df29":"cust['Kids'] = cust['Kidhome'] + cust['Teenhome']\n\nre_marital = {\n    'Single': 'Not in relationship',\n    'Together': 'In relationship',\n    'Married': 'In relationship',\n    'Divorced': 'Not in relationship',\n    'Widow': 'Not in relationship',\n    'Alone': 'Not in relationship',\n    'Absurd': 'Not in relationship',\n    'YOLO': 'Not in relationship'\n}\n\ncust['Marital_Status'] = cust['Marital_Status'].map(re_marital)\n\ncust['Family_size'] = 0\nfor i in range(len(cust)):\n    if cust['Marital_Status'][i] == 'In relationship':\n        cust['Family_size'][i] = 2 + cust['Kids'][i]\n    else:\n        cust['Family_size'][i] = 1 + cust['Kids'][i]","893f43a8":"cust['Dt_Customer'] = pd.to_datetime(cust['Dt_Customer'])\ncust['Dt_Customer'].max()","c067b116":"cust['Age'] = 2014 - cust['Year_Birth']\ncust['Collected'] = '2014-12-07'\ncust['Collected'] = pd.to_datetime(cust['Collected'])\ncust['Days_is_client'] = (cust['Collected'] - cust['Dt_Customer']).dt.days","56b8d9e0":"cust['MntTotal'] = cust['MntWines']+cust['MntFruits']+cust['MntMeatProducts']+cust['MntFishProducts']+cust['MntSweetProducts']+cust['MntGoldProds']\ncust['NumAllPurchases'] = cust['NumWebPurchases']+cust['NumCatalogPurchases']+cust['NumStorePurchases']\ncust['AverageCheck'] = round((cust['MntTotal'] \/ cust['NumAllPurchases']), 1)\ncust['ShareDealsPurchases'] = round((cust['NumDealsPurchases'] \/ cust['NumAllPurchases']) * 100, 1)\ncust['TotalAcceptedCmp'] = cust['AcceptedCmp1']+cust['AcceptedCmp2']+cust['AcceptedCmp3']+cust['AcceptedCmp4']+cust['AcceptedCmp5']+cust['Response']","18263103":"cust = cust.query(\"NumAllPurchases != 0\")","fa2be09b":"cust['Income'].fillna(cust['Income'].mean(), inplace = True)","e2c7eeaf":"cust.drop(['ID', 'Year_Birth', 'Kidhome', 'Teenhome', 'Dt_Customer', 'Z_CostContact', 'Z_Revenue', 'Collected'], axis = 1, inplace = True)","7e712ca3":"cust['Income'] = np.where(cust['Income'] > 120000, 120000, cust['Income'])\ncust['AverageCheck'] = np.where(cust['AverageCheck'] > 200, 200, cust['AverageCheck'])","27a3d7db":"cust['ActiveDays'] = cust['Days_is_client'] - cust['Recency']","944b376e":"cust.head(3)","d64e91e4":"cust_clust = cust[['AverageCheck', 'Days_is_client', 'NumAllPurchases']].copy()\n\nfor i in cust_clust.columns:\n    cust_clust[i] = StandardScaler().fit_transform(np.array(cust_clust[[i]]))","dc6c572e":"wcss = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters = i, random_state = 228)\n    km.fit(cust_clust)\n    wcss.append(km.inertia_)\n    \nplt.figure(figsize = (12, 8))\nplt.title('The Elbow Method', size = 25, y = 1.03, fontname = 'monospace')\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.lineplot(x = range(1, 11), y = wcss, color = '#336b87', linewidth = 3)\nsns.scatterplot(x = range(1, 11), y = wcss, color = '#336b87', s = 60, edgecolor = 'black', zorder = 5)\nplt.ylabel('WCSS', size = 15, fontname = 'monospace')\nplt.xlabel('Number of clusters', size = 15, fontname = 'monospace')\nplt.xticks(size = 13, fontname = 'monospace')\nplt.yticks(size = 13, fontname = 'monospace')\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\na.spines['bottom'].set_linewidth(1.3)\na.spines['left'].set_linewidth(1.3)\n\nplt.annotate('''Optimal number\nof clusters''', xy = (4.05, 2400), xytext = (5, 2800),\n             arrowprops = dict(facecolor = 'steelblue', arrowstyle = \"->\", connectionstyle = \"arc3,rad = 0.4\",color = '#dd4124'), \n             fontsize = 13, fontfamily = 'monospace', ha = 'center', color = '#dd4124')\n\nplt.show()","53fe4f89":"gmm = GaussianMixture(n_components = 4, covariance_type = 'spherical', max_iter = 3000, random_state = 228).fit(cust_clust)\nlabels = gmm.predict(cust_clust)\n\ncust['Cluster'] = labels\nre_clust = {\n    0: 'Ordinary client',\n    1: 'Elite client',\n    2: 'Good client',\n    3: 'Potential good client'\n}\ncust['Cluster'] = cust['Cluster'].map(re_clust)","4dc490a9":"fig = px.pie(cust['Cluster'].value_counts().reset_index(), values = 'Cluster', names = 'index', width = 700, height = 700)\nfig.update_traces(textposition = 'inside', \n                  textinfo = 'percent + label', \n                  hole = 0.8, \n                  marker = dict(colors = ['#dd4124','#009473', '#336b87', '#b4b4b4'], line = dict(color = 'white', width = 2)),\n                  hovertemplate = 'Clients: %{value}')\n\nfig.update_layout(annotations = [dict(text = 'Number of clients <br>by cluster', \n                                      x = 0.5, y = 0.5, font_size = 28, showarrow = False, \n                                      font_family = 'monospace',\n                                      font_color = 'black')],\n                  showlegend = False)\n                  \nfig.show()","c1e6a09b":"plot = go.Figure()\n\ncolors = ['#b4b4b4', '#dd4124', '#009473', '#336b87']\nnames = ['Ordinary client', 'Elite client', 'Good client', 'Potential good client']\n\nfor i in range(4):\n    cl = names[i]\n    plot.add_trace(go.Scatter3d(x = cust.query(\"Cluster == @cl\")['NumAllPurchases'],\n                                y = cust.query(\"Cluster == @cl\")['AverageCheck'],\n                                z = cust.query(\"Cluster == @cl\")['Days_is_client'],\n                                mode = 'markers',\n                                name = names[i],\n                                marker = dict(\n                                    size = 2,\n                                    color = colors[i],  \n                                    opacity = 0.6)))\n\nplot.update_traces(hovertemplate = 'Purchases: %{x} <br>Average Check: %{y} <br>Days is client: %{z}')\n\nplot.update_layout(width = 800, height = 800, autosize = True, showlegend = False,\n                   scene = dict(xaxis = dict(title = 'Count of purchases', titlefont_color = 'black'),\n                                yaxis = dict(title = 'Average check', titlefont_color = 'black'),\n                                zaxis = dict(title = 'Days is client', titlefont_color = 'black')),\n                   font = dict(family = \"monospace\", color  = 'black', size = 14),\n                   title_text = 'Customers clusters', title_x = 0.5)","6bfc19b8":"plt.figure(figsize = (16, 10))\nsns.set_style(\"white\")\nplt.title('''Correlation between income and \nthe total amount of money spent''', size = 25, y = 1.05, fontname = 'monospace', color = 'black', ha = 'center')\na = sns.scatterplot(data = cust, x = \"Income\", y = \"MntTotal\", hue = \"Cluster\", palette = ['#dd4124', '#b4b4b4', '#009473', '#336b87'], sizes = (1, 8), linewidth = 0.5, edgecolor = \"black\")\nplt.xticks(fontname = 'monospace', size = 14, color = 'black')\nplt.yticks(fontname = 'monospace', size = 14, color = 'black')\nplt.xlabel('Income', labelpad = 20, fontname = 'monospace', fontsize = 15, color = 'black')\nplt.ylabel('Total spent of money', labelpad = 20, fontname = 'monospace', fontsize = 16, color = 'black')\n\n\nfor j in ['right', 'top']:\n        a.spines[j].set_visible(False)\nfor j in ['bottom', 'left']:\n    a.spines[j].set_linewidth(1.5)\n    \nplt.show()","da4d1ab3":"cust = cust.rename(columns = {'MntWines': 'Wines', \n                       'MntFruits': 'Fruits', \n                       'MntMeatProducts': 'Meat', \n                       'MntFishProducts': 'Fish', \n                       'MntSweetProducts': 'Sweet', \n                       'MntGoldProds': 'Gold'})\n\ncl = ['Ordinary client', 'Potential good client', 'Good client', 'Elite client']\ncolors = {\n    'Ordinary client': '#b4b4b4',\n    'Potential good client': '#336b87',\n    'Good client': '#009473',\n    'Elite client': '#dd4124'\n}\n\nfig = plt.figure(figsize = (13, 15))\np = 1\nfor i in range(len(cust.columns.tolist()[4:10])):\n    for k in cl:\n        plt.subplot(6, 4, p)\n        sns.set_style(\"white\")\n        a = sns.kdeplot(cust.query(\"Cluster == @k\")[cust.columns.tolist()[4:10][i]], color = colors[k], alpha = 1, shade = True, linewidth = 1.3, edgecolor = 'black')\n        plt.ylabel('')\n        plt.xlabel('')\n        plt.xticks(fontname = 'monospace')\n        plt.yticks([])\n        for j in ['right', 'left', 'top']:\n            a.spines[j].set_visible(False)\n            a.spines['bottom'].set_linewidth(1.2)\n        p += 1  \n\nplt.figtext(0., 1.11, 'Distribution of purchases by clusters and product categories', fontname = 'monospace', size = 28.5, color = 'black')        \n\nplt.figtext(0.07, 1.03, 'Ordinary', fontname = 'monospace', size = 20, color = '#b4b4b4')      \nplt.figtext(0.28, 1.03, 'Potential good', fontname = 'monospace', size = 20, color = '#336b87') \nplt.figtext(0.59, 1.03, 'Good', fontname = 'monospace', size = 20, color = '#009473') \nplt.figtext(0.83, 1.03, 'Elite', fontname = 'monospace', size = 20, color = '#dd4124') \n\nplt.figtext(1.015, 0.98, 'Wines', fontname = 'monospace', size = 20)   \nplt.figtext(1.01, 0.814, 'Fruits', fontname = 'monospace', size = 20)\nplt.figtext(1.02, 0.648, 'Meat', fontname = 'monospace', size = 20)\nplt.figtext(1.02, 0.482, 'Fish', fontname = 'monospace', size = 20)\nplt.figtext(1.012, 0.316, 'Sweet', fontname = 'monospace', size = 20)\nplt.figtext(1.02, 0.15, 'Gold', fontname = 'monospace', size = 20)\n\nl1 = lines.Line2D([0.99, 0.99], [1.08, 0], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l1])\nl2 = lines.Line2D([0.0, 1.1], [1, 1], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l2])\nl3 = lines.Line2D([0.991, 1.1], [1, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l3])\nl4 = lines.Line2D([0, 1.1], [1.08, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l4])\nl5 = lines.Line2D([1.1, 1.1], [0, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l5])\nl6 = lines.Line2D([0, 0], [0, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l6])\nl7 = lines.Line2D([0, 1.1], [0, 0], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l7])\nl8 = lines.Line2D([0, 1.1], [0.84, 0.84], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l8])\nl9 = lines.Line2D([0, 1.1], [0.674, 0.674], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l9])\nl10 = lines.Line2D([0, 1.1], [0.508, 0.508], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l10])\nl11 = lines.Line2D([0, 1.1], [0.342, 0.342], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l11])\nl12 = lines.Line2D([0, 1.1], [0.176, 0.176], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l12])\nl13 = lines.Line2D([0.25, 0.25], [0, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l13])\nl14 = lines.Line2D([0.495, 0.495], [0, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l14])\nl15 = lines.Line2D([0.745, 0.745], [0, 1.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.2)\nfig.lines.extend([l15])\n\nplt.figtext(1.027, 1.02, '''Customers\nclusters''', fontname = 'monospace', size = 12, rotation = 41, ha = 'center')   \nplt.figtext(1.025, 1.003, '''Products\ncategory''', fontname = 'monospace', size = 12, rotation = 41)\n\ny = 0.94\nfor i in range(6):\n    plt.figtext(0.998, y, 'mean values:', fontname = 'monospace', size = 13)\n    y -= 0.1666\n    \ny = 0.92\nfor i in cust.columns.tolist()[4:10]:\n    plt.figtext(1.045, y, round(cust.query(\"Cluster == 'Ordinary client'\")[i].mean(), 1), fontname = 'monospace', size = 14, color = '#b4b4b4', ha = 'center')\n    y -= 0.1666\n    \ny = 0.9\nfor i in cust.columns.tolist()[4:10]:\n    plt.figtext(1.045, y, round(cust.query(\"Cluster == 'Potential good client'\")[i].mean(), 1), fontname = 'monospace', size = 14, color = '#336b87', ha = 'center')\n    y -= 0.1666\n    \ny = 0.88\nfor i in cust.columns.tolist()[4:10]:\n    plt.figtext(1.045, y, round(cust.query(\"Cluster == 'Good client'\")[i].mean(), 1), fontname = 'monospace', size = 14, color = '#009473', ha = 'center')\n    y -= 0.1666\n    \ny = 0.86\nfor i in cust.columns.tolist()[4:10]:\n    plt.figtext(1.045, y, round(cust.query(\"Cluster == 'Elite client'\")[i].mean(), 1), fontname = 'monospace', size = 14, color = '#dd4124', ha = 'center')\n    y -= 0.1666\n\nfig.tight_layout(h_pad = 2)\nplt.show()","b33730c9":"fig = plt.figure(figsize = (14, 12))\nk = 1\n\nfor i in cl:\n    ass = cust.groupby(['Cluster']).agg({'Wines': 'sum', 'Fruits': 'sum', 'Meat': 'sum', 'Fish': 'sum', 'Sweet': 'sum', 'Gold': 'sum'}).transpose().reset_index().rename(columns = {'index': 'Category'})[['Category', i]]\n    plt.subplot(2, 2, k)\n    plt.title(i, size = 20, x = 0.5, y = 1.03)\n    plt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\n    a = sns.barplot(data = ass, x = 'Category', y = i, color = colors[i], linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\n    plt.xticks(fontname = 'monospace', size = 13, color = 'black')\n    plt.yticks(fontname = 'monospace', size = 13, color = 'black')\n    plt.xlabel('')\n    plt.ylabel('')\n    for p in a.patches:\n        height = p.get_height()\n        a.annotate(f'{round((height \/ sum(ass[i])) * 100, 1)}%', (p.get_x() + p.get_width() \/ 2, p.get_height()), \n                   ha = 'center', va = 'center', \n                   size = 13,\n                   xytext = (0, 5), \n                   textcoords = 'offset points',\n                   fontname = 'monospace', color = 'black')\n        \n    for j in ['right', 'top', 'left']:\n        a.spines[j].set_visible(False)\n    for j in ['bottom']:\n        a.spines[j].set_linewidth(1.5)\n    k += 1\n    \nplt.figtext(0.05, -0.05, 'Conclusion', fontname = 'monospace', size = 22, color = '#dd4124')\nplt.figtext(0.05, -0.14, '''We are definitely dealing with a store that sells very good wine, which is almost equally bought by all clusters\nof buyers. In general, there are no major differences, except that customers from ordinary and potential\ngood clusters are more likely to buy gold and customers from good and elite clusters are more likely to\nbuy meat more often.''', fontname = 'monospace', size = 14, color = 'black')\n    \nplt.figtext(0.2, 1.05, 'What do customers from different clusters buy?', fontname = 'monospace', size = 25)\nfig.tight_layout(h_pad = 3)    \nplt.show()","80c6e07d":"fig = plt.figure(figsize = (13, 4))\npalette = ['#dd4124', '#009473', '#b4b4b4', '#336b87']\nplt.title('Which clients take part in the promotions the most?', size = 25, x = 0.47, y = 1.1)\na = sns.barplot(data = cust.groupby(['Cluster']).agg({'TotalAcceptedCmp': 'sum'}).reset_index(), \n                x = 'TotalAcceptedCmp', y = 'Cluster', palette = palette, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 16, color = 'black')\nplt.xlabel('')\nplt.ylabel('')\n\nfor p in a.patches:\n    width = p.get_width()\n    plt.text(23 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ 1001) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 16, color = 'black')\n    \nfor j in ['right', 'top', 'bottom']:\n    a.spines[j].set_visible(False)\na.spines['left'].set_linewidth(1.5)\n\nplt.show()","9531dbcf":"df = cust.groupby(['Cluster']).agg({'AcceptedCmp1': 'sum','AcceptedCmp2': 'sum', \n                               'AcceptedCmp3': 'sum','AcceptedCmp4': 'sum', \n                               'AcceptedCmp5': 'sum', 'Response': 'sum'}).stack().reset_index().rename(columns = {'level_1':'Cmp', 0: 'value'})\ndf['sum'] = df.groupby(['Cmp'])['value'].transform('sum')\ndf['percentage'] = round(df['value'] \/ df['sum'] * 100, 1)\n\nfig = plt.figure(figsize = (15, 10))\nplt.title('Participation of customer clusters in marketing campaigns', size = 25, x = 0.5, y = 1.1)\nplt.grid(color = 'gray', linestyle = '-', axis = 'y', alpha = 0.1)\na = sns.barplot(data = df, x = 'Cmp', y = 'percentage', hue = 'Cluster', dodge = True, palette = palette, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks(fontname = 'monospace', size = 16, color = 'black')\nplt.yticks(fontname = 'monospace', size = 16, color = 'black')\nplt.xlabel('')\nplt.ylabel('')\n\na.yaxis.set_major_formatter(FixedFormatter(['10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%']))\na.yaxis.set_major_locator(FixedLocator([10, 20, 30, 40, 50, 60, 70, 80]))\n\nfor j in ['right', 'top', 'left']:\n    a.spines[j].set_visible(False)\nfor j in ['bottom']:\n    a.spines[j].set_linewidth(1.5)\n\nl1 = lines.Line2D([0.1, 0.9], [0.05, 0.05], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.5)\nfig.lines.extend([l1])\n\nplt.figtext(0.15, 0, 'The number of customers who took part in the promotion', fontname = 'monospace', size = 23, color = 'black')\n\nx = 0.17\nfor i in df[:6]['sum'].tolist():\n    plt.figtext(x, -0.05, i, fontname = 'monospace', size = 18, color = 'black')\n    x += 0.13\n\nl2 = lines.Line2D([0.1, 0.9], [-0.08, -0.08], transform = fig.transFigure, figure = fig, color = '#dbdbdb', linestyle = '-',linewidth = 1.5)\nfig.lines.extend([l2])\n\nplt.figtext(0.12, -0.13, 'Conclusion', fontname = 'monospace', size = 23, color = 'black')\nplt.figtext(0.12, -0.25, '''The last marketing campaign was the best. The cluster of elite clients shows the greatest activity.\nIt's strange that wealthy people are chasing sales, usually the opposite is true. I dare to assume\nthat we have information about a fairly good store for wealthy people. In the future, based on\nthese results, company can plan campaigns more correctly.''', fontname = 'monospace', size = 14, color = 'black')\n\n\nplt.show()","1a156fc6":"fig = plt.figure(figsize = (13, 4))\nplt.title('Who most often complains about the service?', size = 25, x = 0.45, y = 1.1)\na = sns.barplot(data = cust.groupby(['Cluster']).agg({'Response': 'sum'}).reset_index(), \n                x = 'Response', y = 'Cluster', palette = palette, linestyle = \"-\", linewidth = 1, edgecolor = \"black\")\nplt.xticks([])\nplt.yticks(fontname = 'monospace', size = 16, color = 'black')\nplt.xlabel('')\nplt.ylabel('')\n\nfor p in a.patches:\n    width = p.get_width()\n    plt.text(8 + width, p.get_y() + 0.55*p.get_height(), f'{round((width \/ 334) * 100, 1)}%',\n             ha = 'center', va = 'center', fontname = 'monospace', fontsize = 16, color = 'black')\n\nfor j in ['right', 'top', 'bottom']:\n    a.spines[j].set_visible(False)\na.spines['left'].set_linewidth(1.5)\n\nl1 = lines.Line2D([-0.1, 0.95], [0, 0], transform = fig.transFigure, figure = fig, color = 'black', linestyle = '-',linewidth = 1.5)\nfig.lines.extend([l1])\n\nplt.figtext(-0.05, -0.1, 'What is the percentage of dissatisfied customers for each cluster?', fontname = 'monospace', size = 23, color = 'black')\n\nx = 0\ncl = 0\ncolors = ['#dd4124', '#009473', '#336b87', '#b4b4b4']\nfor i in round(cust.groupby(['Cluster']).agg({'Response': 'mean'}).reset_index()['Response'] * 100, 1):\n    plt.figtext(x, -0.24, f'{i}%', fontname = 'monospace', size = 23, color = colors[cl])\n    x += 0.25\n    cl += 1\n\nl2 = lines.Line2D([-0.1, 0.95], [-0.3, -0.3], transform = fig.transFigure, figure = fig, color = 'black', linestyle = '-',linewidth = 1.5)\nfig.lines.extend([l2])\n\nplt.figtext(-0.05, -0.4, 'Conclusion', fontname = 'monospace', size = 23, color = 'black')\nplt.figtext(-0.05, -0.63, '''More than half of the complaints come from a cluster of elite customers, more than 1\/4 of the customers\nfrom this cluster have complained in the last two years, which is a big indicator.\nThe number of complaints for the remaining clusters is within the normal range.''', fontname = 'monospace', size = 14, color = 'black')\n\nplt.show()","c181d1f8":"We will assume that the customer information was collected 2014-12-07.","003099d6":"It is very interesting dataset from which we can get much information.\n\nFirst, we need to understand the family details.","6da223ad":"Converting outliers.","632210aa":"And some more information about purchases.","7e36f6e9":"# Basic information","161b4761":"![](https:\/\/www.merchantcardservicespro.com\/wp-content\/uploads\/6-Ways-to-Increase-Repeat-Customers-01.jpg)","b86f5cfa":"And finally, calculate the difference between how long a person has been a client and the count of days from the last purchase.","f35aee00":"Don't forget that we have missing values.","60067bb8":"Remove all unnecessary columns.","483d554d":"Result:","242362c9":"Let's highlight the age and time that a person is a client.","97380bb6":"There are some logic errors in data, so 6 clients spent money, but did not make a single order - I will delete them.","50c96354":"# Clustering and EDA","369ee31d":"# Preprocessing","a7d64a7e":"Clustering will be done based on average check, count of all purchases and the time that person is a client."}}