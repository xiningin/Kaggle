{"cell_type":{"e30e2cb7":"code","883cb92e":"code","c768b301":"code","72e18f7b":"code","1b036d92":"code","f9f84b6b":"code","dc1a95fc":"code","83fbb499":"code","3b6a0c54":"code","f0c99f35":"code","53132a46":"markdown","1b1022d9":"markdown","0d41d05e":"markdown","0a17fd12":"markdown","4d86bf65":"markdown","e1e841f3":"markdown","26b22978":"markdown","cb31fad5":"markdown","8536cabc":"markdown","2dcc73d1":"markdown"},"source":{"e30e2cb7":"# print(df_train.columns)\n# print(df_train.describe())\n# print(df_train.shape)\n\n# check info for each column to see which lines are empty and then we will process the data\n# train data age, cabin and embarked has some missing data\nprint(df_train.info())\n\nprint('-' * 30)\n# test data age, fare, cabin and embarked has some missing data\nprint(df_test.info())","883cb92e":"# calculate average age by passenger class to fill empty age cells\nprint('Age breakdown by passenger class: ')\nprint(df_train.groupby('Pclass').mean()[['Age']])\n\n# Fill empty values in age column\ndf_train['Age'].fillna(df_train['Age'].median(), inplace=True)\ndf_test['Age'].fillna(df_test['Age'].median(), inplace=True)\n\n# fill empty data in embarked and fare column\ndf_train['Embarked'].fillna(df_train['Embarked'].mode()[0], inplace=True)\ndf_test['Fare'].fillna(df_test['Fare'].median(), inplace=True)\n\n# check out rows if there are any empty cell left in Age column\nprint('Number of empty cells in train data: ')\nprint(df_train.isnull().sum())\nprint('-' * 30)\nprint('Number of empty cells in test data: ')\nprint(df_test.isnull().sum())\n\n# drop Cabin, passenger ID and Ticket value from train and test data\ndrop_columns = ['Cabin', 'PassengerId', 'Ticket', 'Name']\ndf_train = df_train.drop(drop_columns, axis=1)\ndf_test = df_test.drop(drop_columns, axis=1)","c768b301":"# change non numerical value to numerical values\ndf_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1}).astype(int)\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1}).astype(int)\n\ndf_train['Embarked'] = df_train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\ndf_test['Embarked'] = df_test['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)\n\n#check if non numerical values are converted\nprint(df_train.head())","72e18f7b":"# correlation matrix\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(df_train.astype(float).corr(), linewidths=0.1, vmax=1.0,\n            square=True, cmap=\"BuPu\", linecolor='white', annot=True)","1b036d92":"# create scatter plot to check sex, Pclass, fare and embarked relationship with survived\nplt.figure(figsize=(10, 5))\nsns.boxplot(x='Survived', y='Age', data=df_train)\n\n# mean of ages by Survived\nprint(df_train.groupby('Survived').mean()[['Age']])\n\nplt.figure(figsize=(10, 5))\nsns.boxplot(x='Survived', y='Fare', data=df_train)\n\n# mean of ages by Survived\nprint(df_train.groupby('Survived').mean()[['Fare']])","f9f84b6b":"# as you may remember I changed female\/male value to 0 and 1 to create correlation matrix.\n# I reversed that action to create the plot and reversed again. This seems like repetitive task. Please advise how to improve my code\n\ndf_train['Sex'] = df_train['Sex'].map({0: 'female', 1: 'male'}).astype(str)\nsns.countplot(x='Sex', data=df_train, hue='Survived')\ndf_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1}).astype(int)","dc1a95fc":"df_train['Embarked'] = df_train['Embarked'].map({0: 'S', 1: 'C', 2: 'Q'}).astype(str)\nsns.countplot(x='Embarked', data=df_train, hue='Survived')\ndf_train['Embarked'] = df_train['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)","83fbb499":"features = ['Age', 'Fare', 'Sex', 'Embarked']\n\n# split train and test data\nX = df_train[features]\n\n# Normalize Data\nX = preprocessing.StandardScaler().fit_transform(X)\n\ny = df_train['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)","3b6a0c54":"# try 3 different Ks to pick the best one to train the model\n\nneigh6 = KNeighborsClassifier(n_neighbors=6).fit(X_train, y_train)\nyhat6 = neigh6.predict(X_test)\ncm6 = metrics.confusion_matrix(y_test, yhat6)\nprint('Test set Accuracy of K=6:', metrics.accuracy_score(y_test, yhat6))\nprint(cm6)\n\nneigh17 = KNeighborsClassifier(n_neighbors=17).fit(X_train, y_train)\nyhat17 = neigh17.predict(X_test)\ncm17 = metrics.confusion_matrix(y_test, yhat17)\nprint('Test set Accuracy of K=17: ', metrics.accuracy_score(y_test, yhat17))\nprint(cm17)\n\n\nneigh29 = KNeighborsClassifier(n_neighbors=29).fit(X_train, y_train)\nyhat29 = neigh29.predict(X_test)\ncm29 = metrics.confusion_matrix(y_test, yhat29)\nprint('Test set Accuracy of K=29 : ', metrics.accuracy_score(y_test, yhat29))\nprint(cm29)","f0c99f35":"# use model to predict on test data and submit the file\nX_submit = np.array(df_test[features])\ny_submit = neigh29.predict(X_submit)\n\nsubmit = df_test_copy[['PassengerId']].copy()\nsubmit['Survived'] = y_submit\n\nprint('Length of an survived value array: ', len(y_submit))\nprint(submit.head())\n\nsubmit.to_csv('result_knn_titanic.csv', index=False)","53132a46":"About Titanic\n\nTitanic, in full Royal Mail Ship (RMS) Titanic, British luxury passenger liner that sank on April 14\u201315, 1912, during its maiden voyage, en route to New York City from Southampton, England, killing about 1,500 passengers and ship personnel. One of the most famous tragedies in modern history","1b1022d9":"**2 Data Cleaning**\n\nAfter realizing some data are in columns are missing, we need to clean the data.\n\nAge - empty data is filled with mean of age by passenger class breakdown\nEmbarked - empty data is filled with mode of rest of the data  \nFare - empty data is filled with median of rest of the data\n\nI also dropped 3 column because name, passenger ID and ticket is irrelevant to survival chance and cabin should also be inline with fare data so using only fare data should be sufficient","0d41d05e":"**1 Data Exploration   **   \n it is essential to check and try to understand what your data looks like and what kind of cleaning action you need to take.\nIn this data, you can see that some columns has missing data. Before start working with the data,i have to fill those missing values","0a17fd12":"**4 Training the model**\n\nI tried 3 different K to see which one is the best to increase the accuracy","4d86bf65":"**5 Model Usage and Submission**","e1e841f3":" I wanted to use my knowledge on kNN which I acquired just couple days ago on ccbp Course. By using kNN model, I tried to estimate survival chance of passengers based on different features such as age, fare, sex and embarked.\n\n**work path**\n\n1 Data Exploration   \n2 Data Cleaning   \n3 Correlation Matrix    \n4 Train the Model    \n5 Model Usage and Submission","26b22978":"Importing libraries and Data","cb31fad5":"To use non numerical values in the model, need to convert those values to numerical values.","8536cabc":"**3 Correlation Matrix**\n\nCreating correlation matrix is also helpful to see the relationship between all variables to effectively choose features.","2dcc73d1":" create scatter plot to check sex, Pclass, fare and embarked relationship with survived"}}