{"cell_type":{"b8421995":"code","9e93ee00":"code","fe912386":"code","5acb3ade":"code","99c7cf79":"code","df142f52":"code","0dac9dd7":"code","72217d91":"code","a154476f":"code","d2aebd83":"markdown","5204781d":"markdown","8765beb1":"markdown","3790ef1a":"markdown","72d12647":"markdown","dfe01a98":"markdown","d91e2924":"markdown","e2c0e857":"markdown","27cb2e58":"markdown","2e0ba4b9":"markdown","a9b84948":"markdown","63c6e55e":"markdown","bd0a3f5c":"markdown"},"source":{"b8421995":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mpl_toolkits.basemap import Basemap #Plot onto map\nfrom geopy.geocoders import Nominatim #Get coordinates\nimport matplotlib.pyplot as plt #Plotting\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (15,10) #Set the default figure size\nplt.style.use('ggplot') #Set the plotting method\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e93ee00":"station = pd.read_csv(\"..\/input\/shinkansen-stations-in-japan\/Shinkansen_stations_inJapan.csv\") #Load the station data\nstation.head() #Take a peek at the data","fe912386":"print(len(station.index))","5acb3ade":"print(station.isnull().any()) #Check for null values","99c7cf79":"geolocator = Nominatim(user_agent = \"my_user_agent\") #Build a model to get LatLong data\nlat = [] #List to hold latitude data\nlon = [] #List to hold longitude data\n\n#Fix up some names so the geolocator did not have problems\nstation[\"Station_Name\"] = station[\"Station_Name\"].apply(lambda x: \"Shizukuishi\" if x == \"Shizukuichi\" \n                                                        else (\"Shin-Hakodate-Hokuto\" if x == \"Shin-Hakodatehokuto\" else x))\n\n#For each station, give the coordinates\nfor stat in station[\"Station_Name\"]:\n    \n    #Hard code Shin-Tamana, which was throwing errors for some reason\n    if stat == \"Shin-Tamana\":\n        lat.append(32.9425) #Append the latitude\n        lon.append(130.5736) #Append the longitude\n        \n    #Hard code Tokyo, as for some reason it keeps getting equated to somewhere in Poland\n    elif stat == \"Tokyo\":\n        lat.append(35.6812) #Append the latitude\n        lon.append(139.7671) #Append the longitude\n    \n    #Hard code Asa, since the geolocator got it confused with Asha in Russia for some reason\n    elif stat == \"Asa\":\n        lat.append(34.0540) #Append the latitude\n        lon.append(131.1606) #Append the longitude\n        \n    #Hard code Shin-Fuji, since it equates it with somewhere near Nemuro in the locator\n    elif stat == \"Shin-Fuji\":\n        lat.append(35.1420) #Append the latitude\n        lon.append(138.6636) #Append the longitude\n        \n    #If the station is not one of those weird ones\n    else:\n        loc = geolocator.geocode(stat + \" Station\") #Find the station\n        lat.append(loc.latitude) #Append its latitude\n        lon.append(loc.longitude) #Append its longitude","df142f52":"station[\"Latitude\"] = lat #Put the latitude into the dataset\nstation[\"Longitude\"] = lon #Put the longitude into the dataset\n\n#Print the min and max of the metrics to make sure the range is right\nprint(\"LAT: \", station[\"Latitude\"].min(), \", \", station[\"Latitude\"].max())\nprint(\"LON: \", station[\"Longitude\"].min(), \", \", station[\"Longitude\"].max())\n\nstation.head() #Take a peek at the dataset","0dac9dd7":"lat = list(station[\"Latitude\"]) #Get the list of latitudes\nlon = list(station[\"Longitude\"]) #Get the list of longitudes\n\nplt.title(\"Shinkansen Stations\") #Add a title for Japan\n\n#Set a basemap for Japan\nmJP = Basemap(width = 1875000, height = 1750000, projection = \"lcc\",\n            resolution = \"l\", lat_1 = 33.0, lat_2 = 43.0, lat_0 = 38.0, lon_0 = 135.0)\n\nmJP.drawcoastlines() #Draw the coastlines\nmJP.fillcontinents(color = \"lightgreen\") #Make the land light green\nxlon, ylat = mJP(lon, lat) #Fit the coordinates to fit with the map\nmJP.plot(xlon, ylat, \"b.\") #Plot Japan with our station","72217d91":"colors = [\"r.\", \"c.\", \"g.\", \"b.\", \"k.\"] #Add different colors for the different companies\n\nplt.title(\"Shinkansen Stations by Company\") #Add a title for Japan\ni = 0 #Set an iterator variable for the color\n\n#For each unique company, plot its stations\nfor comp in station[\"Company\"].unique():\n    newStat = station.loc[station[\"Company\"] == comp] #Get the station of the companies\n    lat = list(newStat[\"Latitude\"]) #Get the list of latitudes\n    lon = list(newStat[\"Longitude\"]) #Get the list of longitudes\n\n\n    #Set a basemap for Japan\n    mJP = Basemap(width = 1875000, height = 1750000, projection = \"lcc\",\n                resolution = \"l\", lat_1 = 33.0, lat_2 = 43.0, lat_0 = 38.0, lon_0 = 135.0)\n\n    mJP.drawcoastlines() #Draw the coastlines\n    mJP.fillcontinents(color = \"lightgreen\") #Make the land light green\n    xlon, ylat = mJP(lon, lat) #Fit the coordinates to fit with the map\n    mJP.plot(xlon, ylat, colors[i]) #Plot Japan with our station data\n    i += 1","a154476f":"colors = [\"r.\", \"k.\"] #Add colors\nplt.title(\"Shinkansen Stations by Age\") #Add a title for Japan\nstatAge = [station.loc[station[\"Year\"] > 2000], station.loc[station[\"Year\"] < 2000]] #Put a list of stations built after and before 2000 respectively\n\n#For each age in the list above, plot the stations in the new (red) or old (black)\nfor i in range(0,2):\n    newStat = statAge[i] #Get the age data\n    lat = list(newStat[\"Latitude\"]) #Get the list of latitudes\n    lon = list(newStat[\"Longitude\"]) #Get the list of longitudes\n\n\n    #Set a basemap for Japan\n    mJP = Basemap(width = 1875000, height = 1750000, projection = \"lcc\",\n                resolution = \"l\", lat_1 = 33.0, lat_2 = 43.0, lat_0 = 38.0, lon_0 = 135.0)\n\n    mJP.drawcoastlines() #Draw the coastlines\n    mJP.fillcontinents(color = \"lightgreen\") #Make the land light green\n    xlon, ylat = mJP(lon, lat) #Fit the coordinates to fit with the map\n    mJP.plot(xlon, ylat, colors[i]) #Plot Japan with our station data","d2aebd83":"---","5204781d":"# Station by Company","8765beb1":"# New vs Old Stations (1900's vs 2000's)","3790ef1a":"---","72d12647":"---","dfe01a98":"There are no null values.","d91e2924":"Coded by Luna McBride","e2c0e857":"This program appears to have some problems that display in the plotting (namely some Kyushu stations near Sendai). Though, this is better than paying for the google maps API version. Some of it is partially some oddity in how the routes are distinguished, as well as the high bulk of stations in central Honshu","27cb2e58":"---","2e0ba4b9":"It looks like the stations before 2000 (black) were built mostly to connect the majority of Honshu. The newer ones (red) appear to mostly be a few additional stops on old routes, as well as connecting to Kyushu, Hokkaido (only slightly, but to be fair, Hokkaido's train infrastructure is not as deeply connected as the rest of Japan), and through to Kanazawa and Aomori on Honshu.","a9b84948":"# Map the Stations","63c6e55e":"# Check for Null Values","bd0a3f5c":"# Japan Shinkansen Location Exploration"}}