{"cell_type":{"28b99298":"code","0b36fc6a":"code","ccf8c745":"code","c1a54c78":"code","8eeafce2":"code","0a0db649":"code","18b66108":"code","ec2d2f64":"code","6abaf837":"code","9039fd0c":"code","7687a209":"code","4f326742":"markdown","1a8ef9bc":"markdown","f405af0d":"markdown","2abaeacc":"markdown","ed426b73":"markdown","c8e3d8a6":"markdown","93b489f3":"markdown"},"source":{"28b99298":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport datetime as dt\n\n#Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b36fc6a":"# load file and called it plane_data\nplane_data = pd.read_csv(\"..\/input\/plane-crash\/planecrashinfo_20181121001952.csv\", index_col=\"date\", parse_dates = True)\nplane_data.head()\n","ccf8c745":"# Like to see what the dataset variables looks like\n\nplane_data.info()\n","c1a54c78":"# separating the Aboard data\nseperate = plane_data.aboard.str.split()\n\n# the zip(*variable) actually unpack the list after you split. Is that not the same as expand = True?\na,b,c = zip(*seperate)\n\n# isolate the passenger figure\nplane_data['pax'] = b\nsep = plane_data.pax.str.split(\":\")\ng,h = zip(*sep)\nplane_data.pax = h\n\n# separating the number of crew as it is in the same line as the Aboard data. However I cant get rid of the )??\nplane_data['crew'] = c\nplane_data.crew = plane_data.crew.replace(')','')\nsep = plane_data.crew.str.split(':')\ny,z = zip(*sep)\nplane_data.crew = z\nplane_data.crew = plane_data.crew.replace(')','')\n\n# isolate the fatalities figures\nseperate = plane_data.fatalities.str.split()\nd,e,f = zip(*seperate)\nplane_data.aboard = a\nplane_data.fatalities = d\n\n#data.dropna(inplace = True)\nplane_data.aboard.replace(['?'],0,inplace = True)\nplane_data.ac_type.replace(['?'],'a b',inplace = True)\nplane_data.fatalities.replace(['?'],0,inplace = True)\nplane_data.crew.replace(['?'],0,inplace = True)\n\n#plane_data.head(6)","8eeafce2":"# convert the isolated aboard and fatalities string to interger\nplane_data.aboard = plane_data.aboard.astype(int)\nplane_data.fatalities = plane_data.fatalities.astype(int)\n#plane_data.pax = plane_data.pax.astype(int)\n","0a0db649":"# separate the aircraft types \nsep = plane_data.ac_type.str.split()\nprint(sep)\n\nac_b = []\nfor s in sep:\n    ac_b.append(s[0])\n    \nplane_data.ac_type = ac_b\n#plane_data.head()","18b66108":"x = Counter(plane_data.ac_type)\n\ny = x.most_common(9)\n\na,b = zip(*y)\n\n#print(a,b)\n\ntrace1 = go.Pie(values = b,labels = a,hole = 0.3, pull=[0.4, 0.3, 0, 0, 0, 0, 0, 0, 0])\n\ndata2 = [trace1]\n\nlayout = dict(title = 'Top 9 Aircraft Types Prone to Accidents between 1908 to 2018')\n\nfig = dict(data = data2,layout = layout)\n\niplot(fig)","ec2d2f64":"# I want to see the most common airline operators in the dataset against fatalities \nu = Counter(plane_data.operator)\n\nv = u.most_common(51)\n\ns,t = zip(*v)\n\na = plane_data[plane_data.operator == s[0]]\nb = plane_data[plane_data.operator == s[1]]\nc = plane_data[plane_data.operator == s[2]]\nd = plane_data[plane_data.operator == s[3]]\ne = plane_data[plane_data.operator == s[4]]\nf = plane_data[plane_data.operator == s[49]]\n\n\nair_operator = pd.concat([a,b,c,d,e,f],axis = 0)\ndata2 = air_operator.groupby('operator').size()\n\n#print(data2)\n\nplt.figure(figsize=(15,10))\nh = sns.countplot(x='operator', data=air_operator)\n\nplt.title(\"Top 5 Operators Compare with Qantas\", fontweight='bold', fontsize=20)\nplt.xlabel(\"Operators\", fontsize=15)\nplt.ylabel(\"Number of Accidents\", fontsize=15)\n\n","6abaf837":"# How Qantas and Aeroflot stacked up in the level of fatalities when they have an accident from 1908 to 2018\n# I divided the total number of fatalities \/ total number of pax aboarded and called it operator-record\n# Total no of fatalities \/ total no of aboarded = 1 means no survivors\n# if 0.0 it means some survivors\n\nplane_data['operator_record'] = (round(plane_data.fatalities\/plane_data.aboard, 1))\n\nmost_deadly = plane_data.loc[plane_data.loc[:, 'operator_record']==1.0]\nleast_deadly = plane_data.loc[plane_data.loc[:, 'operator_record']==0.0]\n\nqf = most_deadly.loc[most_deadly.loc[:, 'operator']=='Qantas']\nqf1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Qantas']\nsu = most_deadly.loc[most_deadly.loc[:, 'operator']=='Aeroflot']\nsu1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Aeroflot']\n\ncx = most_deadly.loc[most_deadly.loc[:, 'operator']=='Cathay Pacific Airways']\ncx1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Cathay Pacific Airways']\nba = most_deadly.loc[most_deadly.loc[:, 'operator']=='British Airways']\nba1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='British Airways']\n\nmilus = most_deadly.loc[most_deadly.loc[:, 'operator']=='Military - U.S. Air Force']\nmilus1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Military - U.S. Air Force']\naf = most_deadly.loc[most_deadly.loc[:, 'operator']=='Air France']\naf1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Air France']\n\nlh = most_deadly.loc[most_deadly.loc[:, 'operator']=='Deutsche Lufthansa']\nlh1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='Deutsche Lufthansa']\nua = most_deadly.loc[most_deadly.loc[:, 'operator']=='United Air Lines']\nua1 = least_deadly.loc[least_deadly.loc[:, 'operator']=='United Air Lines']\n\naq = pd.concat([su,su1,milus,milus1,af,af1,lh,lh1,ua,ua1,qf,qf1])\n#d = aq.groupby(['operator','operator_record']).size()\n#print(d)\n\nsns.set_style('darkgrid')\ng = sns.FacetGrid(aq, col='operator', hue='operator_record', col_wrap=2, palette='bright',\n                  height=4, aspect=1.5, margin_titles=True,)\ng.map(sns.stripplot,'fatalities', size=7, linewidth=2, jitter=0.29, \n      order=['Aeroflot','Military - U.S. Air Force'])\ng.add_legend(loc='upper right', fontsize=15)\ng.set_axis_labels('Number of Fatalities', fontsize=15)\ng.fig.subplots_adjust(top=0.9) # adjust the space between Heading and Chart Figures in g\ng.fig.suptitle(\"Comparing the Top 5 Operators' Fatality levels with Qantas\", fontweight='bold', fontsize=15)\n\n# title\nnew_title = 'Level of Fatalities'\ng._legend.set_title(new_title)\n# replace labels\nnew_labels = ['Nearly All Survived', 'No Survivors']\nfor t, l in zip(g._legend.texts, new_labels):\n    t.set_text(l)\n    \n\n","9039fd0c":"# separate location into Area and County\/Country\nseparate = plane_data.location.str.split(',')\n\narea = []\ncounty = []\nfor s in separate:\n    area.append(s[0])\n    county.append(s[-1])\n\n#Created 2 new columns\nplane_data['Area'] = area\nplane_data['County\/Country'] = county\n\nprint(plane_data.location, plane_data.Area)\n\n","7687a209":"date = []\nfor each in plane_data.index:\n    x = pd.to_datetime(each)\n    date.append(x)\n    \nplane_data.index = date\n","4f326742":"# Operators Accident Performance\n\n**Looked at the top 5 operators which have the most accidents recorded and compare with Qantas' ranking. Qantas safety record is one of its selling point**\n\n>It seems that the top 5 operators are:\n>> - Aeroflot\n>> - Military - US Air Force\n>> - Air France\n>> - Lufthansa\n>> - United Airlines","1a8ef9bc":"\n# How Bad are Plane Crashes?\n\n____________________________________________________________________________________________\n","f405af0d":"**Unfortunately the aboard and fatalities data are in a string format. They contain the total number of passenger and the number of crew. Therefore the first thing to do is to separate the string and convert them to numeric.**\n\n> **Passenger Aboard from 2 (passengers:1 crew:1) to:**\n> - 2 total people aboard\n> - 1 passenger\n> - 1 crew","2abaeacc":"\n# Aircraft Types involved in Crashes \n\n**This next section is to isolate the main aircraft brand.**","ed426b73":"\n**By looking at the aircraft brands that have experienced the most accidents. It seems that the Douglas and Boeing have the most accidents recorded.**","c8e3d8a6":"**Further comparison of the top 5 operators to Qantas regarding fatality levels**\n\nThere are indeed fatal crashes by Qantas but when compare with the top 5 operators, it is indeed 'safe'\n","93b489f3":"\n**Everyone tells me that flying is the safest mode of transport. I am interested in this dataset to see what it shows about plane crashes!!**\n\n\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\n\n>## But first lets see what data we have.\n>\n>In particular, what interesting values are there such as:\n> - The years covered are from 17th Sep 1908 to 6th Nov 2018\n> - The time of accident\n> - The operator involved\n> - The aircraft which include the make and type\n> - The total number of people boarded and fatalities per accident\n> - The number of passengers and crew aboard and fatalities per accident\n\n\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb\ud83d\udeeb"}}