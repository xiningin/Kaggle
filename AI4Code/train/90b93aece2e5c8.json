{"cell_type":{"10026c64":"code","c46d7e53":"code","8cd6bec0":"code","25e12b4b":"code","520dabfa":"code","ca298a5e":"code","0e6c3620":"code","4cb84c00":"code","f2bf558a":"code","9fd9772b":"code","c57e83ee":"code","e29a4275":"code","263e17f9":"code","bb4d486c":"code","84c48aa3":"code","c6638e27":"code","55de5240":"code","35caef76":"code","af189059":"code","051f33d4":"code","c69f2323":"code","71b285a2":"code","35ebbb64":"markdown","d6b20b0d":"markdown","6840f33e":"markdown","2667f8ca":"markdown","bd609b54":"markdown","56688029":"markdown","c6038349":"markdown","b9fb9cb3":"markdown","3c81f8cd":"markdown","4cec78d8":"markdown","1066b787":"markdown"},"source":{"10026c64":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c46d7e53":"from sklearn.model_selection import train_test_split, KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import Ridge, Lasso, LinearRegression","8cd6bec0":"data_dir = '\/kaggle\/input\/tabular-playground-series-jan-2021'\ntrain_path = os.path.join(data_dir, 'train.csv')\ntest_path = os.path.join(data_dir, 'test.csv')\nsam_sub_path = os.path.join(data_dir, 'sample_submission.csv')\n\ndf = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\nsam_sub_df = pd.read_csv(sam_sub_path)","25e12b4b":"df","520dabfa":"features_names = df.drop(['id', 'target'], axis=1).columns.values\nfeatures_names","ca298a5e":"plt.figure(figsize=(10, 6))\nsns.distplot(df['target'], kde=True)\nplt.show()","0e6c3620":"len(df[df['target'] <= 5])","4cb84c00":"# remove outliers (points less than 5)\ndf.drop(df[df['target'] <= 5].index, axis=0, inplace=True)\nplt.figure(figsize=(10, 6))\nsns.distplot(df['target'], kde=True)\nplt.show()","f2bf558a":"def show_correlation_matrix(correlation_matrix):\n    f, ax = plt.subplots(figsize=(11, 9))\n    sns.heatmap(\n        correlation_matrix,\n        cmap='YlGnBu',\n        linewidths=.5,\n        cbar_kws={\"shrink\": .5},\n        square=True,\n        annot=True\n    )\n    plt.yticks(rotation=0)\n    plt.show()","9fd9772b":"correlation_matrix = df[features_names].corr()\nshow_correlation_matrix(correlation_matrix)","c57e83ee":"np.linalg.det(correlation_matrix)","e29a4275":"u, s, v = np.linalg.svd(correlation_matrix)\nsigmas = pd.DataFrame(data=s, columns=['singular values'])\nsigmas.T","263e17f9":"scaler = StandardScaler()\nscaler.fit(df[features_names])\n\ntarget = df['target'].values\ndata = scaler.transform(df[features_names])\ntest = scaler.transform(test_df.drop('id', axis=1).values)\n\n\nX_train, X_val, y_train, y_val = train_test_split(data, target, test_size=0.3, random_state=17, shuffle=False)","bb4d486c":"kf = KFold(n_splits=10, shuffle=True, random_state=17)\n\nalphas = np.logspace(-3, -1, 30)\nlasso_scores = np.array(\n    [cross_val_score(Lasso(alpha), X_train, y_train, cv=kf, scoring='neg_root_mean_squared_error').mean() \n     for alpha in alphas]\n)\nridge_scores = np.array(\n    [cross_val_score(Ridge(alpha), X_train, y_train, cv=kf, scoring='neg_root_mean_squared_error').mean() \n     for alpha in alphas]\n)\n\nplt.plot(alphas, lasso_scores, label='Lasso')\nplt.plot(alphas, ridge_scores, label='Ridge')\n\nplt.xlabel('alpha')\nplt.ylabel('Negative RMSE')\nplt.show()","84c48aa3":"best_lasso_alpha = alphas[lasso_scores.argmax()]\nbest_lasso_alpha","c6638e27":"best_ridge_alpha = alphas[ridge_scores.argmax()]\nbest_ridge_alpha","55de5240":"def print_errors(model):\n    train_loss = mean_squared_error(model.predict(X_train), y_train, squared=False)\n    val_loss = mean_squared_error(model.predict(X_val), y_val, squared=False)\n    print(f'Train RMSE = {train_loss}')\n    print(f'Valid RMSE = {val_loss}')","35caef76":"lasso_model = Lasso(\n    alpha=best_lasso_alpha\n).fit(X_train, y_train)\n\nridge_model = Ridge(\n    alpha=best_ridge_alpha\n).fit(X_train, y_train)","af189059":"print('Ridge:')\nprint_errors(ridge_model)","051f33d4":"print('Lasso:')\nprint_errors(lasso_model)","c69f2323":"lasso_model = Lasso(\n    alpha=best_lasso_alpha\n).fit(data, target)\n\nridge_model = Ridge(\n    alpha=best_ridge_alpha\n).fit(data, target)","71b285a2":"lasso_submission = pd.DataFrame(data={'id': test_df['id'], 'target': lasso_model.predict(test)})\nridge_submission = pd.DataFrame(data={'id': test_df['id'], 'target': ridge_model.predict(test)})\n\nprint((sam_sub_df['id'] == lasso_submission['id']).all())\nprint((sam_sub_df['id'] == ridge_submission['id']).all())\n\noutput_dir=''\n\nlasso_submission.to_csv(os.path.join(output_dir, 'submission_lasso.csv'), index=False)\nridge_submission.to_csv(os.path.join(output_dir, 'submission_ridge.csv'), index=False)","35ebbb64":"# Training final models","d6b20b0d":"# Data Preprocessing","6840f33e":"## Distribution chart and outliers","2667f8ca":"# Brief EDA and  Motivation","bd609b54":"# Make Prediction and Save Submission","56688029":"As we can see below, the correlation matrix has almost zero determinant. It means that there is [multicollinearity problem](https:\/\/en.wikipedia.org\/wiki\/Multicollinearity). In this case we can try to use [regularization methods](https:\/\/en.wikipedia.org\/wiki\/Regularization_(mathematics)) like [Ridge](https:\/\/en.wikipedia.org\/wiki\/Tikhonov_regularization) and [Lasso](https:\/\/en.wikipedia.org\/wiki\/Lasso_(statistics)).","c6038349":"# Importing Libraries","b9fb9cb3":"# Loading and Data","3c81f8cd":"# Check RMSE on validation set","4cec78d8":"# Optimizing the alpha parameter","1066b787":"## Correlation matrix and multicollinearity problem"}}