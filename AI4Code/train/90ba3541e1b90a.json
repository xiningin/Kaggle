{"cell_type":{"fe8741c4":"code","c538bf28":"code","cd40f446":"code","c5f55a10":"code","839ea80b":"code","eab2d902":"code","afc2c2e7":"code","88770cf8":"code","72938011":"code","3b9a74c6":"code","095b9892":"code","9b94810e":"code","90d0e58d":"code","3e532a2a":"code","846638b6":"code","f3ee86c7":"markdown","e65b5065":"markdown"},"source":{"fe8741c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c538bf28":"#import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nd0=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\nprint(d0.head())  # print first five rows of d0.\n\n\n","cd40f446":"# save the labels into a variable l.\nl=d0['label']\n\n# Drop the label feature and store the pixel data in d.\nd=d0.drop('label',axis=1)","c5f55a10":"print(d.shape)\nprint(l.shape)","839ea80b":"# display or plot a number.\nplt.figure(figsize=(7,7))\nidx=500\n\ngrid_data=d.iloc[idx].to_numpy().reshape(28,28) # reshape from 1d to 2d pixel array\nplt.imshow(grid_data,interpolation='none',cmap='gray')\nplt.show()\n\nprint(l[idx])","eab2d902":"labels=l.copy()\ndata=d.copy()\n\nprint(\"The shape of the data\",data.shape)","afc2c2e7":"# Data-preprocessing: Standardizing the data\n\nfrom sklearn.preprocessing import StandardScaler\nstandardized_data=StandardScaler().fit_transform(data)\nprint(standardized_data.shape)","88770cf8":"#find the co-variance matrix which is : A^T * A\nsample_data=standardized_data\n\n# Matrix multiplication using numpy\ncovar_matrix=np.matmul(sample_data.T,sample_data)\n\nprint(\"The shape of the variance matrix = \",covar_matrix.shape)","72938011":"# finding the top two eigen-values and corresponding eigen-vectors \n# for projecting onto a 2-Dim space.\n\nfrom scipy.linalg import eigh\n\n# the parameter 'eigvals' is defined (low value to high value) \n# eigh function will return the eigen values in asending order\n# this code generates only the top 2 (782 and 783) eigenvalues.\nvalues,vectors=eigh(covar_matrix,eigvals=(782,783))\n\nprint(\"Shape of eigen vectors = \",vectors.shape)\n\n# converting the eigen vectors into (2,d) shape for easyness of further computations\nvectors=vectors.T\nprint(\"updated shape of eigen vectors =\",vectors.shape)\n\n# here the vectors[1] represent the eigen vector corresponding 1st principal eigen vector\n# here the vectors[0] represent the eigen vector corresponding 2nd principal eigen vector\n","3b9a74c6":"# projecting the original data sample on the plane \n#formed by two principal eigen vectors by vector-vector multiplication.\nimport matplotlib.pyplot as plt\nnew_coordinates=np.matmul(vectors,sample_data.T)\n\nprint (\" resultant new data points' shape \", vectors.shape, \"X\", sample_data.T.shape,\" = \", new_coordinates.shape)","095b9892":"import pandas as pd\n\n# appending label to the 2d projected data\nnew_coordinates=np.vstack((new_coordinates,labels)).T\n\n\n# creating a new data frame for ploting the labeled points.\ndataframe=pd.DataFrame(new_coordinates,columns=(\"1st_principle\",\"2nd_principle\",\"label\"))\nprint(dataframe.head())","9b94810e":"# ploting the 2d data points with seaborn\nimport seaborn as sns\nsns.FacetGrid(dataframe,hue=\"label\",size=8).map(plt.scatter,'1st_principle','2nd_principle').add_legend()\nplt.show()","90d0e58d":"# Initializing the pca\nfrom sklearn import decomposition\npca=decomposition.PCA()","3e532a2a":"# configuring the parameteres\n# the number of components = 2\npca.n_components=2\npca_data=pca.fit_transform(sample_data)\n\n# pca_reduced will contain the 2-d projects of simple data\nprint(\"shape of pca_reduced data= \",pca_data.shape)","846638b6":"# attaching the label for each 2-d data point \npca_data = np.vstack((pca_data.T, labels)).T\n\n# creating a new data fram which help us in ploting the result data\npca_df = pd.DataFrame(data=pca_data, columns=(\"1st_principal\", \"2nd_principal\", \"label\"))\nsns.FacetGrid(pca_df, hue=\"label\", size=6).map(plt.scatter, '1st_principal', '2nd_principal').add_legend()\nplt.show()","f3ee86c7":"# PCA using Scikit-Learn","e65b5065":"#  2D Visualization using PCA "}}