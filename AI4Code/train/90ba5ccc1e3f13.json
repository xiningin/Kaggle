{"cell_type":{"b3f96ea5":"code","7407b4a2":"code","6bd6406f":"code","512bd7f7":"code","3c22916a":"markdown"},"source":{"b3f96ea5":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport cv2\nfrom matplotlib import pyplot as plt\n\ntrain_dir = '\/kaggle\/input\/deepfake-detection-challenge\/train_sample_videos\/'\nsample_submission = pd.read_csv(\"..\/input\/deepfake-detection-challenge\/sample_submission.csv\")","7407b4a2":"# download face_recognition\n! pip install face_recognition\nimport face_recognition as fr","6bd6406f":"# find all fake videos\nmetadata = pd.read_json('\/kaggle\/input\/deepfake-detection-challenge\/train_sample_videos\/metadata.json').T\nprint(metadata.head())\nprint(len(metadata))\n\nlist_fake_videos = list(metadata.loc[metadata['label']=='FAKE',:].index.values)\nprint(len(list_fake_videos))\n","512bd7f7":"#prepare plotting of ten videos and their first frame\nfig, axes = plt.subplots(10, 2, figsize=(15, 40))\naxes = np.array(axes)\naxes = axes.reshape(-1)\nax_ix = 0\nax_max = 20\n\n# choose from which videos to display the frames\nind0 = 0\nind1 = 100\npadding = 0\n\nfor vid in list_fake_videos[ind0:ind1]:\n    orig_vid = metadata.loc[vid,'original']\n    # check if original video exists in the directory, many do not exist\n    if not(os.path.isfile(train_dir + orig_vid) ):\n        #print(f'could not find real {orig_vid} for {vid}:')\n        continue\n    # image from fake video\n    cap = cv2.VideoCapture(train_dir + vid)\n    success, image = cap.read()\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    cap.release()\n    face_locations = fr.face_locations(image)\n    if len(face_locations) == 0:\n        print(f'Could not find face in {vid} FAKE')\n        continue\n    \n    top, right, bottom, left = face_locations[0] #first face only\n    image = image[top-padding:bottom+padding, left-padding:right+padding]\n    \n    # image from corresponding real video\n    cap = cv2.VideoCapture(train_dir + orig_vid)\n    success, orig_image = cap.read()\n    if not(success):\n        print(f'could capture in {orig_vid} for {vid}:')\n        continue\n    orig_image = cv2.cvtColor(orig_image, cv2.COLOR_BGR2RGB)\n    cap.release() \n    face_locations = fr.face_locations(orig_image)\n    if len(face_locations) == 0:\n        print(f'Could not find face in {orig_vid}')\n        continue\n    top, right, bottom, left = face_locations[0] #first face only\n    orig_image = orig_image[top-padding:bottom+padding, left-padding:right+padding]\n    # plot\n    \n    axes[ax_ix].imshow(image)\n    axes[ax_ix].xaxis.set_visible(False)\n    axes[ax_ix].yaxis.set_visible(False)\n    axes[ax_ix].set_title(f'{vid} FAKE')\n    ax_ix = ax_ix +1\n    \n    axes[ax_ix].imshow(orig_image)\n    axes[ax_ix].xaxis.set_visible(False)\n    axes[ax_ix].yaxis.set_visible(False)\n    axes[ax_ix].set_title(f'{orig_vid} REAL')\n    ax_ix = ax_ix +1\n    if ax_ix >=ax_max:\n        break\n\nplt.grid(False)\nplt.show()    ","3c22916a":"skript to compare real and fake face images from the first frame of the train videos\nwith inspiration from https:\/\/www.kaggle.com\/robikscube\/kaggle-deepfake-detection-introduction\nthanks rob mulla!"}}