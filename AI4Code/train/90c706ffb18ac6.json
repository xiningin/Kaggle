{"cell_type":{"915f8332":"code","17a2f173":"code","db7fd01f":"code","18ee1143":"code","6d930fff":"code","cdceee73":"code","bc98006b":"code","d5ea76e1":"code","d75a2141":"code","6781d287":"code","657d6c07":"code","99afd0bc":"code","1e05b2b5":"code","660ac8e6":"code","fa806f26":"code","59b458a5":"code","21a17c52":"code","cf684aa1":"code","2159dde7":"code","a523384c":"code","93358d54":"code","883fc596":"code","330733d0":"code","b9f935e1":"code","7917e734":"code","990ed4f5":"code","34384727":"markdown"},"source":{"915f8332":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","17a2f173":"df=pd.read_table('..\/input\/fruit_data_with_colors.txt')","db7fd01f":"df.head()","18ee1143":"df.describe()","6d930fff":"df['fruit_name'].value_counts().plot(kind='bar')","cdceee73":"def barchart(feature):\n    orange=df[df['fruit_name']=='orange'][feature].value_counts()\n    apple=df[df['fruit_name']=='apple'][feature].value_counts()\n    lemon=df[df['fruit_name']=='lemon'][feature].value_counts()\n    mandarin=df[df['fruit_name']=='mandarin'][feature].value_counts()\n    #survived1=survived[1]\n    #dead1=dead[0]\n    df1 = pd.DataFrame([orange,apple,lemon,mandarin])\n    df1.index=['orange','apple','lemon','mandarin']\n    df1.plot(kind='bar',stacked=True,figsize=(10,5))","bc98006b":"barchart('fruit_subtype')","d5ea76e1":"df['fruit_subtype'].value_counts().plot(kind='bar')","d75a2141":"df['color_score'].value_counts().plot(kind='bar')","6781d287":"df['fruit_label'].value_counts().plot(kind='bar')","657d6c07":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier","99afd0bc":"df.head()","1e05b2b5":"X=df[['mass','width','height','color_score']]","660ac8e6":"Y=df[['fruit_label']]\nX1=np.array(X)\nY1=np.array(Y)","fa806f26":"X_train,X_test,y_train,y_test = train_test_split(X,Y,test_size=0.3)","59b458a5":"# testting with different types of nearest neighbour in KNN\nfrom sklearn import metrics\nklist = list(range(1,30))\nscores = []\nfor k in klist:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    y_pred = knn.predict(X_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))\n    \nplt.plot(klist, scores)\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')\nplt.show()","21a17c52":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC,LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier","cf684aa1":"sample_result=[]\nMachineLearningAlgo=[]\nX=['LinearSVC','DecisionTreeClassifier','KNeighborsClassifier','SVC','GradientBoostingClassifier','RandomForestClassifier']\nZ=[LinearSVC(),DecisionTreeClassifier(),KNeighborsClassifier(),SVC(),GradientBoostingClassifier(),RandomForestClassifier()]","2159dde7":"for model in Z:\n    model.fit(X_train,y_train)      ## training the model this could take a little time\n    accuracy=model.score(X_test,y_test)    ## comparing result with the test data set\n    MachineLearningAlgo.append(accuracy) \n    ## saving the accuracy","a523384c":"d={'Accuracy':MachineLearningAlgo,'Algorithm':X}\ndf1=pd.DataFrame(d)","93358d54":"df1","883fc596":"model1=RandomForestClassifier()","330733d0":"model1.fit(X1,Y1)","b9f935e1":"model.predict(X1)","7917e734":"df2=pd.DataFrame(model.predict(X1))","990ed4f5":"df2.head()","34384727":"# KNN classification "}}