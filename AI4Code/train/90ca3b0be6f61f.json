{"cell_type":{"afb85c19":"code","9b80838d":"code","b4383d5d":"code","05abf0b0":"code","bdc6b135":"code","e23f1410":"code","84727ab3":"code","a405c618":"code","7b70c8f7":"code","68525e5a":"code","31ec26f1":"code","3f5d4331":"code","9a8f8407":"code","d5ea4aca":"code","8efb8fcd":"code","0718841b":"code","2bc409b6":"code","4e81325e":"code","76838116":"code","3f8eb5c4":"code","99e8bfbb":"code","d5e387fc":"code","4900b597":"code","7a618b63":"code","227d63c4":"code","bc508e06":"code","14854841":"code","b642ed64":"code","77733021":"code","a551de73":"code","1d82ff0b":"code","9f4f1a35":"code","13b645d4":"markdown","6212169a":"markdown","18e10f28":"markdown","9d46c52c":"markdown","c4438a6b":"markdown","1760c73f":"markdown","fac28d9a":"markdown"},"source":{"afb85c19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b80838d":"#load the dataset\ndata=pd.read_csv('..\/input\/churn-analysis-prediction-score\/data.csv')\n","b4383d5d":"#check the dataset\ndata","05abf0b0":"#check the first 5 rows\ndata.head()","bdc6b135":"#check the last 5 rows\ndata.tail()","e23f1410":"data.info()","84727ab3":"data.describe(include='all')","a405c618":"data.isnull().sum()","7b70c8f7":"# Unnamed: 32 column has high number of null values . it can not be replace with top,mean,min so i can drop it\n#unrelevent column id so i droped it\ndata.drop(['id','Unnamed: 32'],axis=1,inplace=True)","68525e5a":"#Pearson's Correlation\ncorr=data.corr()\nplt.figure(figsize=(18,12))\nsns.heatmap(corr,annot=True,cmap=\"coolwarm\")\nplt.show()","31ec26f1":"sns.countplot(x=data.diagnosis)\nplt.show()","3f5d4331":"plt.figure(figsize=(12,5))\nsns.histplot(data.radius_mean[data.diagnosis=='M'],color='r')\nsns.histplot(data.radius_mean[data.diagnosis=='B'],color='y')\nplt.legend(['Malignant','Benign'])\nplt.show()","9a8f8407":"plt.figure(figsize=(12,5))\nsns.histplot(data.texture_mean[data.diagnosis=='M'],color='b')\nsns.histplot(data.texture_mean[data.diagnosis=='B'],color='r')\nplt.legend(['Malignant','Benign'])\nplt.show()","d5ea4aca":"plt.figure(figsize=(12,5))\nsns.histplot(data.perimeter_mean[data.diagnosis=='M'],color='y')\nsns.histplot(data.perimeter_mean[data.diagnosis=='B'],color='b')\nplt.legend(['Malignant','Benign'])\nplt.show()","8efb8fcd":"plt.figure(figsize=(15,10))\ndata['diagnosis'].value_counts().plot.pie(autopct=\"%.1f%%\")\nplt.show()","0718841b":"plt.figure(figsize=(12,5))\nsns.histplot(data.smoothness_mean[data.diagnosis=='M'],color='b')\nsns.histplot(data.smoothness_mean[data.diagnosis=='B'],color='r')\nplt.legend(['Malignant','Benign'])\nplt.show()","2bc409b6":"x=data.groupby('diagnosis')['compactness_se'].count()\nx=x.sort_values(ascending=False)\nx.plot(kind='barh',figsize=(10,6),color='c')\nplt.title(\"Diagnosis Vs Compactness_se\")\nplt.show()","4e81325e":"x=data.groupby('diagnosis')['concave points_se'].count()\nx=x.sort_values(ascending=False)\nx.plot(kind='barh',figsize=(10,6),color='g')\nplt.title(\"Diagnosis Vs concave points_se\")\nplt.show()","76838116":"plt.figure(figsize=(12,5))\nsns.histplot(data.concavity_worst[data.diagnosis=='M'],color='b')\nsns.histplot(data.concavity_worst[data.diagnosis=='B'],color='c')\nplt.legend(['Malignant','Benign'])\nplt.show()","3f8eb5c4":"plt.figure(figsize=(12,5))\nsns.histplot(data.symmetry_worst[data.diagnosis=='M'],color='b')\nsns.histplot(data.symmetry_worst[data.diagnosis=='B'],color='r')\nplt.legend(['Malignant','Benign'])\nplt.show()","99e8bfbb":"plt.figure(figsize=(12,5))\nsns.histplot(data.radius_worst[data.diagnosis=='M'],color='g')\nsns.histplot(data.radius_worst[data.diagnosis=='B'],color='r')\nplt.legend(['Malignant','Benign'])\nplt.show()","d5e387fc":"sns.swarmplot(x=data.diagnosis,y=data.perimeter_worst,hue=data.diagnosis)\nplt.show()","4900b597":"#label encoding\nfrom sklearn.preprocessing import LabelEncoder\nle= LabelEncoder()\ndata.diagnosis= le.fit_transform(data.diagnosis)\n","7a618b63":"data","227d63c4":"#i\/p o\/p selection\n\nip=data.drop(['diagnosis'],axis=1)\nop=data['diagnosis']","bc508e06":"from sklearn.model_selection import train_test_split\nxtr,xts,ytr,yts=train_test_split(ip,op,test_size=0.2)","14854841":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nsc.fit(xtr)\nxtr=sc.transform(xtr)\nxts=sc.transform(xts)","b642ed64":"from sklearn.linear_model import LogisticRegression\nalg=LogisticRegression()","77733021":"#train the algorithm with the training data\nalg.fit(xtr,ytr)\nyp=alg.predict(xts)","a551de73":"from sklearn import metrics\ncm=metrics.confusion_matrix(yts,yp)\nprint(cm)","1d82ff0b":"accuracy=metrics.accuracy_score(yts,yp)\nprint(accuracy)","9f4f1a35":"recall=metrics.recall_score(yts,yp)\nprint(recall)","13b645d4":"# Train and test dataset","6212169a":"# Scalling our dataset","18e10f28":"Attribute Information:\n\n* 1) ID number\n* 2) Diagnosis (M = malignant, B = benign)\n* a) radius (mean of distances from center to points on the perimeter)\n* b) texture (standard deviation of gray-scale values)\n* c) perimeter\n* d) area\n* e) smoothness (local variation in radius lengths)\n* f) compactness (perimeter^2 \/ area - 1.0)\n* g). concavity (severity of concave portions of the contour)\n* h). concave points (number of concave portions of the contour)\n*  i). symmetry\n* j). fractal dimension (\"coastline approximation\" - 1)","9d46c52c":"# Analyzing the Dataset","c4438a6b":"Churn dataset contain text or categorical values\n* To make the data understandable or in human readable form, the training data is often labeled in words.\n* Label Encoding refers to converting the labels into numeric form so as to convert it into the machine-readable form.","1760c73f":"# checking accuracy of the model","fac28d9a":"# LOGISTIC REGRESSION"}}