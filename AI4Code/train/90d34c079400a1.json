{"cell_type":{"3731a56b":"code","b1030be9":"code","5eb0e3b4":"code","5710355a":"code","0d00a922":"code","c258ff79":"code","da3e698e":"code","6ad937b3":"code","40e601e6":"code","7ff33a67":"code","bed047e1":"code","7840809d":"code","3aae116d":"code","49fbb344":"code","4f6c96ff":"code","2c9ee096":"code","469f0c2f":"code","4d8657f6":"code","80622406":"code","9a21e8de":"code","730a8718":"code","f39a8aac":"code","5c648db8":"code","0b0a3339":"code","958de46b":"code","d417c704":"markdown"},"source":{"3731a56b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1030be9":"Data = pd.read_csv(\"\/..\/kaggle\/input\/advertising\/advertising.csv\")\nData.head()","5eb0e3b4":"Data.describe()","5710355a":"Data.info()","0d00a922":"Data.corr()","c258ff79":"Data.City.value_counts()","da3e698e":"import seaborn as sns","6ad937b3":"sns.heatmap(Data.corr());","40e601e6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,auc,roc_curve,precision_score","7ff33a67":"X = Data[['Daily Time Spent on Site','Age','Area Income','Daily Internet Usage']]","bed047e1":"y =Data['Clicked on Ad']","7840809d":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","3aae116d":"y.value_counts()","49fbb344":"model = LogisticRegression()","4f6c96ff":"model.fit(X_train,y_train)","2c9ee096":"model.score(X_train,y_train)","469f0c2f":"pred_test = model.predict(X_test)","4d8657f6":"accuracy_score(y_test,pred_test)","80622406":"pred_train = model.predict_proba(X_train)\npred_train[:]","9a21e8de":"pred_train[:,1]","730a8718":"fpr,tpr,t = roc_curve(y_train,pred_train[:,1],pos_label=1)       ","f39a8aac":"import matplotlib.pyplot as plt\nfrom matplotlib.collections import LineCollection\nimport matplotlib as npl\nl1 = []\nfor i in range(len(fpr)-1):\n    l1.append([(fpr[i],tpr[i]),(fpr[i+1],tpr[i+1])])\n#print(l1)\n\nlc = LineCollection(l1,cmap='hsv')\nplt.figure(figsize=(10,5))\nfig, ax = plt.subplots()\nline=ax.add_collection(lc)\nlc.set_array(t[1:])\n\nplt.colorbar(line, ticks=np.arange(0,1,0.1))\n\nplt.title('ROC Curve')\nplt.xlabel('False Postive Rate (FPR)')\nplt.ylabel('True Positive Rate (TPR)')","5c648db8":"pred_test_prob = model.predict_proba(X_test)\npred_test_prob[:5]","0b0a3339":"pred_t_test = np.where(pred_test_prob[:,1]>=0.8,1,0)\npred_t_test","958de46b":"accuracy_score(y_test,pred_t_test)","d417c704":"**Base line Accuracy**"}}