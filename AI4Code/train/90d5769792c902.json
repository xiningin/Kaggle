{"cell_type":{"c21b9188":"code","95ebe151":"code","2b5047e8":"code","1fe2d3c7":"code","8108fd79":"code","24beff42":"code","7f831504":"code","927f8de8":"code","18e8f684":"code","f141191e":"code","4a88d0ff":"code","52c32423":"code","7bb951ce":"code","96a09020":"code","69a2b8be":"code","64accaf1":"code","df715d07":"code","845f2f19":"code","37f9e54b":"markdown","50deedfb":"markdown","12befe60":"markdown"},"source":{"c21b9188":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","95ebe151":"train = pd.read_csv(r'\/kaggle\/input\/random-linear-regression\/train.csv', encoding='iso-8859-1')\ntest = pd.read_csv(r'\/kaggle\/input\/random-linear-regression\/test.csv', encoding='iso-8859-1')\n","2b5047e8":"train.head(2)","1fe2d3c7":"test.head(2)","8108fd79":"from bokeh.plotting import *\nfrom bokeh.models import *\nfrom bokeh.layouts import *\nfrom bokeh.io import *\nfrom bokeh.embed import *\nfrom bokeh.resources import *\nimport pandas as pd\n\n\ndef bokeh_regg_plot(x,y):\n    output_notebook()\n    df = pd.DataFrame(list(zip(x, y)),columns =['X','Y']) \n    source = ColumnDataSource(data=df)\n    regg_plot = figure(plot_width=800,plot_height=400,title=\"Regression Plot\")\n    regg_plot.circle(x, y)   \n    html_name = 'regression.html'\n    output_file(html_name,mode='inline')\n    show(regg_plot)\n    save(regg_plot)","24beff42":"bokeh_regg_plot(train['x'],train['y'])","7f831504":"#Length of training data \nm = train['x'].size\nprint(m)","927f8de8":"one=np.ones((m,1))","18e8f684":"#Join the one vector and the train dataset to form X Matrix\nX = np.hstack((one, train['x'][:,np.newaxis]))\nprint(\"X Original Shape = {}\".format(X.shape))\nY = train['y'].to_numpy()\nprint(\"Y Original Shape = {}\".format(Y.shape))\nY = Y[:,np.newaxis]\nprint(\"Y Modified Shape = {}\".format(Y.shape))\n","f141191e":"#Initialize theta vector \ntheta = np.random.rand(2, 1)\nprint(theta.shape)","4a88d0ff":"#h(theta) = X*theta = (m,1) hypothesis matrix\n#hypo will be caluculated for every iteration of gradient descent to optimize the cost\ndef h(theta,X): #Linear hypothesis function\n    hypo = np.nan_to_num(np.dot(X,theta))\n#     print(\"Hypothesis Matrix Shape = {}\".format(hypo.shape))\n    return hypo","52c32423":"h(theta,X)","7bb951ce":"def compute_cost(X,y,mytheta):\n    \n#     return float((1\/(2*m)) * np.nan_to_num(np.dot((h(mytheta,X)-y).T,(h(mytheta,X)-y))))\n\n    m= len(X[0])\n#     print('m = {}'.format(m))\n    \n    hypo = h(mytheta,X)\n    \n    diff  = hypo - y\n#     print(\"Diff Matrix Shape = {}\".format(diff.shape))\n\n    power = np.power(diff, 2)\n#     print(\"Power Matrix Shape = {}\".format(power.shape))\n\n    cost =  (np.nansum(power)\/(2*m))\n#     print(\"Cost = {}\".format(cost))\n\n    return cost","96a09020":"def gradientDescent(X, y, theta, alpha, iterations):\n#     for _ in range(iterations):\n#         hypo = np.nan_to_num(np.dot(X,theta))\n#         temp = hypo - y\n        \n#         temp = np.nansum(np.multiply(temp,X))\n#         theta = theta - (alpha\/m) * temp\n#     return theta\n    \n    for i in range(iterations):\n        tmptheta = theta\n        for j in range(len(tmptheta)):\n            temp = h(tmptheta,X) - y\n            temp = np.nansum(np.multiply(temp,X))\n            tmptheta[j] = theta[j] - np.multiply((alpha\/m),temp)\n        theta = tmptheta\n    return theta\n            \n        \n        \n    \n    \n#     jvec = [] #Used to plot cost as function of iteration\n#     thetahistory = [] #Used to visualize the minimization path later on\n#     for meaninglessvariable in range(iterations):\n#         tmptheta = theta\n#         jvec.append(compute_cost(X,y,theta))\n#         # Buggy line\n#         #thetahistory.append(list(tmptheta))\n#         # Fixed line\n#         thetahistory.append(list(theta[:,0]))\n#         #Simultaneously updating theta values\n#         for j in range(len(tmptheta)):\n#             tmptheta[j] = theta[j] - (alpha\/m)*np.nansum((h(theta,X) - y)*np.array(X[:,j]).reshape(m,1))\n#         theta = tmptheta\n#     return theta, thetahistory, jvec\n","69a2b8be":"J = compute_cost(X,train['y'][:,np.newaxis],theta)\nprint(J)","64accaf1":"iterations = 1500\nalpha = 0.01\ntheta= gradientDescent(X, Y, theta, alpha, iterations)\nprint(theta)","df715d07":"from bokeh.plotting import *\nfrom bokeh.models import *\nfrom bokeh.layouts import *\nfrom bokeh.io import *\nfrom bokeh.embed import *\nfrom bokeh.resources import *\nimport pandas as pd\n\n\ndef bokeh_regg_hypo_plot(x,y,X,theta):\n    output_notebook()\n    df = pd.DataFrame(list(zip(x, y)),columns =['X','Y']) \n    source = ColumnDataSource(data=df)\n    regg_plot = figure(plot_width=800,plot_height=400,title=\"Regression Plot\")\n    regg_plot.circle(x, y) \n    html_name = 'regression.html'\n    output_file(html_name,mode='inline')\n    show(regg_plot)\n    save(regg_plot)\n    hypo_plot = figure(plot_width=regg_plot.plot_width,plot_height=regg_plot.plot_height,title=\"Hypothesis Plot\")\n    hypo_plot.line([X[:,1],y=np.nan_to_num(np.dot(X, theta)))\n    html_name = 'hypothesis.html'\n    output_file(html_name,mode='inline')\n    show(hypo_plot)\n    save(hypo_plot)\n\n   ","845f2f19":"bokeh_regg_hypo_plot(train['x'],train['y'],X,theta)","37f9e54b":"Least Square Cost Function\n![Cost.JPG](attachment:Cost.JPG)\n\nHypothesis \n![hypo.JPG](attachment:hypo.JPG)\n\nGradient Descent\n![Capture.JPG](attachment:Capture.JPG)","50deedfb":"Resources --\n* https:\/\/github.com\/dibgerge\/ml-coursera-python-assignments\n* https:\/\/github.com\/kaleko\/CourseraML","12befe60":"**Plotting the data using Bokeh**"}}