{"cell_type":{"65274670":"code","7d115e7b":"code","793f5bfa":"code","8909638d":"code","d96d75c8":"code","4a54d41c":"code","32443fb0":"code","d240c922":"code","7703f695":"code","d8f5deda":"code","728a0646":"code","4f7152b6":"code","5c4d9f90":"code","b84d1be9":"code","957d3dee":"markdown","3fef712a":"markdown","f892e2ed":"markdown","4cc8e924":"markdown"},"source":{"65274670":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport torch\nimport cv2\nimport matplotlib.patches as patches\nfrom tqdm import tqdm\nimport os\nimport shutil\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import model_selection","7d115e7b":"df_train =  pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ndf_train.head()","793f5bfa":"def get_image_file_path(image_id):\n    return f'\/kaggle\/input\/petfinder-pawpularity-score\/train\/{image_id}.jpg'\n\ndf_train['file_path'] = df_train['Id'].apply(get_image_file_path)\ndf_train.head()","8909638d":"!mkdir \/root\/.config\/Ultralytics\/\n!cp ..\/input\/yolo-arial\/Arial.ttf \/root\/.config\/Ultralytics\/Arial.ttf","d96d75c8":"yolov5x6_model = torch.hub.load('..\/input\/yolov5', 'custom', source='local', force_reload=True, path='..\/input\/ultralyticsyolov5aweights\/yolov5x6.pt')","4a54d41c":"def get_image_info(file_path, plot=False):\n    img = plt.imread(file_path)\n    h, w, c = img.shape\n    \n    if plot:\n        fig, ax = plt.subplots(1, 2, figsize=(8,8))\n        ax[0].set_title('Detected pets', size=16)\n        ax[0].imshow(img)\n        \n    results = yolov5x6_model(img, augment=True)\n\n    pet_pixels = np.zeros(shape=[h, w], dtype=np.uint8)\n\n    image_info = { \n        'n_pets': 0,\n        'n_dogs': 0,\n        'n_cats': 0,\n        'labels': [],\n        'x_min': 0,\n        'x_max': w - 1,\n        'y_min': 0,\n        'y_max': h - 1,\n        'avg_w': 0,\n        'avg_h': 0,\n        'avg_area': 0\n    }\n    \n    pets_found = []\n    \n    for x1, y1, x2, y2, threshold, label in results.xyxy[0].cpu().detach().numpy():\n        label = results.names[int(label)]\n        if label in ['cat', 'dog']:\n            image_info['n_pets'] += 1\n            image_info['labels'].append(label)\n            image_info['x_min'] = max(x1, image_info['x_min'])\n            image_info['x_max'] = min(x2, image_info['x_max'])\n            image_info['y_min'] = max(y1, image_info['y_min'])\n            image_info['y_max'] = min(y2, image_info['y_max'])\n            image_info['avg_w'] += abs(x2-x1)\n            image_info['avg_h'] += abs(y2-y1)\n            image_info['avg_area'] += image_info['avg_w']*image_info['avg_h']\n            \n            if label == 'cat':\n                image_info['n_cats'] += 1\n            else:\n                image_info['n_dogs'] += 1\n            \n            pet_pixels[int(y1):int(y2), int(x1):int(x2)] = 1\n            \n            pets_found.append([x1, x2, y1, y2, label])\n            \n        res = 0.1 if image_info['n_pets'] == 0 else 0\n            \n        image_info['avg_w'] \/= (image_info['n_pets']+res)\n        image_info['avg_h'] \/= (image_info['n_pets']+res)\n        image_info['avg_area'] \/= (image_info['n_pets']+res)\n\n    if plot:\n        for x1, x2, y1, y2, label in pets_found:\n            c = 'red' if label == 'dog' else 'blue'\n            rect = patches.Rectangle((x1, y1), x2-x1, y2-y1, linewidth=2, edgecolor=c, facecolor='none')\n            ax[0].add_patch(rect)\n            ax[0].text(max(25, (x2+x1)\/2), max(25, y1-h*0.02), label, c=c, ha='center', size=14)\n                \n    image_info['pet_ratio'] = pet_pixels.sum() \/ (h*w)\n\n    if plot:\n        ax[1].set_title('Pixels Containing Pets', size=16)\n        ax[1].imshow(pet_pixels)\n        plt.show()\n        \n    return image_info","32443fb0":"%matplotlib inline\nfor file_path in df_train['file_path'].head(5):\n    get_image_info(file_path, plot=True)","d240c922":"IMAGES_INFO = {\n    'Id': [],\n    'n_pets': [],\n    'n_cats': [],\n    'n_dogs': [],\n    'label': [],\n    'x_min': [],\n    'x_max': [],\n    'y_min': [],\n    'y_max': [],\n    'avg_w': [],\n    'avg_h': [], \n    'avg_area': [],\n    'pet_ratio': []\n}\n\nfor idx, file_path in tqdm(enumerate(df_train['file_path']),total=len(df_train)):\n    image_info = get_image_info(file_path, plot=False)\n    IMAGES_INFO['Id'].append(file_path.split('\/')[-1].split('.')[0])\n    IMAGES_INFO['n_pets'].append(image_info['n_pets'])\n    IMAGES_INFO['n_cats'].append(image_info['n_cats'])\n    IMAGES_INFO['n_dogs'].append(image_info['n_dogs'])\n    IMAGES_INFO['x_min'].append(image_info['x_min'])\n    IMAGES_INFO['x_max'].append(image_info['x_max'])\n    IMAGES_INFO['y_min'].append(image_info['y_min'])\n    IMAGES_INFO['y_max'].append(image_info['y_max'])\n    IMAGES_INFO['avg_w'].append(image_info['avg_w'])\n    IMAGES_INFO['avg_h'].append(image_info['avg_h'])\n    IMAGES_INFO['avg_area'].append(image_info['avg_area'])\n    IMAGES_INFO['pet_ratio'].append(image_info['pet_ratio'])\n    \n    labels = image_info['labels']\n    if len(set(labels)) == 1:\n        IMAGES_INFO['label'].append(labels[0])\n    elif len(set(labels)) > 1:\n        IMAGES_INFO['label'].append(labels[0])\n    else:\n        IMAGES_INFO['label'].append('unknown')","7703f695":"img_info_train = pd.DataFrame(IMAGES_INFO)\nimg_info_train.head()","d8f5deda":"def create_folds(data, num_splits):\n    data[\"kfold\"] = -1\n    num_bins = int(np.floor(1 + np.log2(len(data))))\n\n    data.loc[:, \"bins\"] = pd.cut(data[\"Pawpularity\"], bins=num_bins, labels=False)\n\n    kf = model_selection.StratifiedKFold(n_splits=num_splits, shuffle=True, random_state=42)\n    \n    for f, (t_, v_) in enumerate(kf.split(X=data, y=data.bins.values)):\n        data.loc[v_, 'kfold'] = f\n    \n    data = data.drop(\"bins\", axis=1)\n\n    return data","728a0646":"train_data = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ndf_train = pd.merge(img_info_train, train_data, on='Id')\n\nle = LabelEncoder()\ndf_train['label'] = le.fit_transform(df_train['label'])\ndf_train.head()","4f7152b6":"df_5 = create_folds(df_train, num_splits=5)\ndf_6 = create_folds(df_train, num_splits=6)\ndf_7 = create_folds(df_train, num_splits=7)\ndf_8 = create_folds(df_train, num_splits=8)\ndf_9 = create_folds(df_train, num_splits=9)\ndf_10 = create_folds(df_train, num_splits=10)\n\ndf_5.to_csv(\"train_5folds.csv\", index=False)\ndf_6.to_csv(\"train_6folds.csv\", index=False)\ndf_7.to_csv(\"train_7folds.csv\", index=False)\ndf_8.to_csv(\"train_8folds.csv\", index=False)\ndf_9.to_csv(\"train_9folds.csv\", index=False)\ndf_10.to_csv(\"train_10folds.csv\", index=False)","5c4d9f90":"df_10.head()","b84d1be9":"plt.figure(figsize=(20,20))\nsns.heatmap(df_train.corr(), linewidths=.5, annot=True)\nplt.show()","957d3dee":"## Add image path to training data","3fef712a":"## Yolov5 features","f892e2ed":"## Load libraries","4cc8e924":"## Create folds"}}