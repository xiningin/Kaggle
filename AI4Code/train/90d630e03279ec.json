{"cell_type":{"dd428b66":"code","c2a55a09":"code","b63a8868":"code","11819276":"code","019d70c6":"code","b5b9169a":"code","f799f26b":"code","684e330f":"code","930cd026":"code","5dceda92":"code","ee47e76d":"code","9743f8df":"code","d578b588":"code","07fb8d53":"code","1e3576fc":"markdown"},"source":{"dd428b66":"import numpy as np\nimport pandas as pd\nimport os\nimport folium","c2a55a09":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b63a8868":"data = pd.read_csv(\"\/kaggle\/input\/kriging\/data.csv\")","11819276":"data.head()","019d70c6":"data.plot(x=\"lon\", y=\"lat\", kind=\"scatter\", c=\"mm\",\n        colormap=\"YlOrRd\")","b5b9169a":"locations = data[['lat', 'lon']]\nlocationlist = locations.values.tolist()","f799f26b":"folium_map = folium.Map(location=[40.582, -119.79], zoom_start=5)\nfor point in range(0, len(locationlist)):\n    folium.CircleMarker(\n        locationlist[point],\n        radius=.15*data['mm'][point],\n        popup = data['mm'][point],\n        color='blue',\n        fill=True,\n        fill_opacity=0.3\n        ).add_to(folium_map)\nfolium_map","684e330f":"pip install scikit-gstat","930cd026":"import skgstat as skg","5dceda92":"V = skg.Variogram(locationlist, data[\"mm\"].values,normalize=False, model=\"spherical\", n_lags=20, maxlag=0.5 , bin_func = 'uniform' , verbose = True ,use_nugget = True)\nV.plot()","ee47e76d":"pip install pykrige","9743f8df":"from pykrige.ok import OrdinaryKriging\nOK = OrdinaryKriging(\n    data[\"lon\"].values,\n    data[\"lat\"].values,\n    data[\"mm\"].values,\n    variogram_model=\"spherical\",\n    variogram_parameters = {'sill' : 785.92 , 'nugget' : 0.00, 'range' :1.89 , 'n_lags':20 },\n    verbose=True,\n    enable_plotting=True,\n    coordinates_type=\"geographic\",\n    nlags=20,\n)\n\nz1, ss1 = OK.execute(\"points\",-120.3601, 36.1397)\nprint(\"Predicted_Value:    \", np.array(z1))\nprint(\"Sigma?:   \", np.array(ss1))","d578b588":"# import numpy as np\n# import matplotlib.pyplot as plt   \n# import math\n\n# def spherical(h, r, C):\n#     '''\n#     Spherical model of the semivariogram\n#     h: lag distance\n#     r: variogram range, must be >0\n#     C: sill\n#     '''\n#     if h <= r:\n#         return C*( 1.5*h\/r - 0.5*((h\/r)**3.0) )\n#     else:\n#         return C\n    \n# def gaussian(h,r,C):\n#     '''Gaussian model of the semivariogram'''\n#     return C*(1-math.exp(-3*((h\/r)**2)))\n    \n    \n# def exponential(h, r, C):\n#     '''Exponential model of the semivariogram''' \n#     return C*(1-math.exp(-3*h\/r))","07fb8d53":"# def variogram_model (C0,C1,s1,r1,C2,s2,r2,h_max,h_step, sill=1):\n#     h = np.arange(0,50,1)\n#     vario = np.zeros(int(50\/1))\n#     if s1 == 'spherical' and s2 == 'spherical':\n#         for i in range(0,int(50\/1)):\n#             vario[i] = sill*(C0 + C1*spherical(h[i],r1,1) + C2*spherical(h[i],r2,1))\n#     if s1 == 'spherical' and s2 == 'gaussian':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*spherical(h[i],r1,1) + C2*gaussian(h[i],r2,1))\n#     if s1 == 'spherical' and s2 == 'exponential':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*spherical(h[i],r1,1) + C2*exponential(h[i],r2,1))\n#     if s1 == 'gaussian' and s2 == 'spherical':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*gaussian(h[i],r1,1) + C2*spherical(h[i],r2,1))\n#     if s1 == 'gaussian' and s2 == 'gaussian':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*gaussian(h[i],r1,1) + C2*gaussian(h[i],r2,1))\n#     if s1 == 'gaussian' and s2 == 'exponential':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*gaussian(h[i],r1,1) + C2*exponential(h[i],r2,1))\n#     if s1 == 'exponential' and s2 == 'spherical':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*exponential(h[i],r1,1) + C2*spherical(h[i],r2,1))\n#     if s1 == 'exponential' and s2 == 'gaussian':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*exponential(h[i],r1,1) + C2*gaussian(h[i],r2,1))\n#     if s1 == 'exponential' and s2 == 'exponential':\n#         for i in range(0,int(h_max\/h_step)):\n#             vario[i] = sill*(C0 + C1*exponential(h[i],r1,1) + C2*exponential(h[i],r2,1))\n            \n#     plt.plot(h,vario)\n#     plt.xlabel('Lag(m)')\n#     plt.ylabel('Semivariogram')\n      \n#     return h, vario\n","1e3576fc":"# UDF"}}