{"cell_type":{"c5e5588d":"code","8d06721c":"code","641106ba":"code","eed9945b":"code","6fa438cc":"code","76b92533":"code","2af5e3f1":"code","2d6b9754":"code","11e333fd":"code","19e99016":"code","95d98df7":"code","1385adb3":"code","308d6ded":"code","47263e20":"code","d8af0223":"markdown"},"source":{"c5e5588d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        pass\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d06721c":"ridge = pd.read_csv('\/kaggle\/input\/trends-master-ensemble\/submission_ridge.csv')\nmodra = pd.read_csv('\/kaggle\/input\/trends-master-ensemble\/sub.csv')\ntunguz_n_IC20 = pd.read_csv('\/kaggle\/input\/rapids-ensemblenoic20\/submission_rapids_ensemble (1).csv')\nrapids = pd.read_csv('\/kaggle\/input\/trends-master-ensemble\/submission1.csv')\nbagging = pd.read_csv('\/kaggle\/input\/baggingregressor-rapids-ensemble\/submission_rapids_ensemble_with_baggingregressor.csv')\nSS_skewed = pd.read_csv('\/kaggle\/input\/rapids-ensemblenoic20\/06163.csv')\nstack = pd.read_csv('\/kaggle\/input\/trends-multi-layer-model\/submission.csv')","641106ba":"all_subs = pd.DataFrame(columns=['Id', 'modra', 'bagging', 'SS_skewed']) #'rapids', 'ridge', , 'tunguz'\nall_subs['Id'] = ridge['Id']\nall_subs['modra'] = modra['Predicted']\nall_subs['bagging'] = bagging['Predicted']\nall_subs['SS_skewed'] = SS_skewed['Predicted']","eed9945b":"all_subs['stack'] = all_subs.merge(stack, how='left', left_on='Id', right_on='Id')['Predicted']","6fa438cc":"import math\nprint(math.e)","76b92533":"all_subs","2af5e3f1":"scores = {\n    'modra' : math.e ** (5.0 - 0.33),\n    'bagging': math.e ** (5.0 - 0.31),\n    'SS_skewed' : math.e ** (5.0 - 0.1),\n    'stack' : math.e ** (5.0 - 0.0)\n}","2d6b9754":"scores","11e333fd":"columns = list(all_subs.columns)\ncolumns.remove('Id')\n\ntotal = 0\nfor col in columns:\n    total += scores[col]\ntotal","19e99016":"weight_sum = 0\n\nfor col in columns:\n    weight = scores[col] \/ total\n    weight_sum += weight\n    print(weight)\n    all_subs[col] = all_subs[col] * weight\nweight_sum","95d98df7":"all_subs['Predicted'] =  + all_subs['modra'] + all_subs['bagging'] + all_subs['SS_skewed'] + all_subs['stack']  #+ all_subs['rapids'] + all_subs['ridge'] + all_subs['tunguz']","1385adb3":"all_subs","308d6ded":"sub = all_subs[['Id', 'Predicted']]\nsub","47263e20":"sub.to_csv('blend_sub.csv', index=False)","d8af0223":"# Blending\nSince I was afraid of overfitting to the public lb, for ensembling, instead of fine tuning weights, I just decided them using a formula I made, which involves only the score of the subs. Below is the way I have done it. Note that some of the submissions mixed were my team's subs."}}