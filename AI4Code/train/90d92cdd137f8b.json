{"cell_type":{"5119924f":"code","d79dc4bf":"code","beca365a":"code","04bc59bb":"code","64441b5b":"code","9e8cbb4b":"code","a8f71c37":"code","4983d33e":"code","69efb6f4":"code","6fb996c8":"code","652ac62f":"code","ca59958a":"code","f4e9925c":"code","5fcd3017":"code","acd5dacc":"code","0f9b086c":"code","6add4fd5":"code","3c475c33":"code","9391bf4c":"code","0c566bb9":"code","f572be6b":"code","c21e3a92":"code","5889597f":"code","981d6789":"code","d1a808dc":"code","3e97288d":"code","208d23bd":"code","577af5ee":"code","90179414":"code","9f7fced1":"code","591343b2":"code","d0dc0659":"code","6d3d0bf5":"code","156c3d13":"code","f53007f2":"code","6aff5c2b":"code","65d3a796":"code","a402234b":"code","3f150736":"code","3ad67808":"code","eda3f08c":"code","4d77b6f9":"code","c29da7d5":"code","518939fe":"code","6e3855bd":"code","e4602d3f":"code","edbba801":"code","c1d30725":"code","78cc8082":"code","5ead521e":"code","5d813427":"code","48904ff0":"code","802150fe":"code","943f639c":"code","c1a380ce":"code","59fbc9ac":"code","2616da2d":"code","4dcfd2ea":"code","c7451c7a":"code","85f24592":"markdown","46397a9e":"markdown","955693c3":"markdown","f99bc332":"markdown","37dfa806":"markdown","d519869e":"markdown","de466660":"markdown","828b8347":"markdown","8ca58d49":"markdown","1930cfc6":"markdown","e5c2e344":"markdown","e8774988":"markdown","62d401ad":"markdown","9605d99b":"markdown","64eef333":"markdown","64942b06":"markdown","2c4d19f7":"markdown","3772ff35":"markdown","050a6ab5":"markdown","28e288e5":"markdown","33c22a8a":"markdown","b931c7f6":"markdown","bd689a02":"markdown","d8bd332b":"markdown","a9c9bcaa":"markdown","fa0e9d13":"markdown","e15a2a22":"markdown","11dc81f8":"markdown","61309c0d":"markdown","85be83e8":"markdown","92e7fb20":"markdown","ee62bd14":"markdown"},"source":{"5119924f":"import pandas as pd\nimport numpy as np\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\nfrom catboost import CatBoost, CatBoostClassifier, Pool\nfrom catboost.utils import get_roc_curve\nimport lightgbm\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split, GridSearchCV, RandomizedSearchCV, RepeatedStratifiedKFold\nfrom xgboost import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n%matplotlib inline\n\n# settings to display all columns\npd.set_option(\"display.max_columns\", None)\n\nRANDOM_SEED = 42","d79dc4bf":"def get_boxplot(df, col):\n    fig, axes = plt.subplots(figsize = (14, 4))\n    sns.boxplot(x='default', y=col, data=df[df['sample']==1], ax=axes)\n    axes.set_title('Boxplot for ' + col)\n    plt.show()\n    \n    \ndef age_to_cat(age):\n    if age <= 28:\n        cat_age = 0\n        return cat_age             \n    if 28 < age <= 35:\n        cat_age = 1\n        return cat_age\n    if 35 < age <= 50:\n        cat_age = 2\n        return cat_age\n    if age > 50:\n        cat_age = 3\n        return cat_age\n    \n    \ndef show_metrics(y_test, y_pred, probs):\n    print('accuracy_score:\\t\\t {:.4}'.format(accuracy_score(y_test, y_pred)))\n    print('precision_score:\\t {:.4}'.format(precision_score(y_test, y_pred, zero_division=0)))\n    print('recall_score:\\t\\t {:.4}'.format(recall_score(y_test, y_pred, zero_division=0)))\n    print('f1_score:\\t\\t {:.4}'.format(f1_score(y_test, y_pred, zero_division=0)))\n    print('roc_auc_score:\\t\\t {:.4}'.format(roc_auc_score(y_test, probs)))\n    \ndef show_basic_models(df):\n    train_df = df.query('sample == 1').drop(['sample', 'client_id'], axis=1)\n\n    X = train_df.drop(['default'], axis=1).values\n    y = train_df['default'].values\n\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=RANDOM_SEED)\n    \n    # models with default settings\n    lr = LogisticRegression(max_iter=1000) # \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439\n    tree = DecisionTreeClassifier()\n    rforest = RandomForestClassifier()\n\n\n    models = [lr,tree,rforest]\n\n    for model in models:\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        probs = model.predict_proba(X_test)\n        probs = probs[:,1]\n\n        # zero_division=0 to fix zero division Warning\n        print('Results for:', model)\n        show_metrics(y_test, y_pred, probs)\n        print('-'*10)\n        print()\n        \n    \ndef compute_selected_model(model):\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    probs = model.predict_proba(X_test)\n    probs = probs[:,1]\n    show_metrics(y_test, y_pred, probs)\n    return y_pred, probs","beca365a":"path = '\/kaggle\/input\/credit-scoring\/'","04bc59bb":"train = pd.read_csv(path +'train.csv')\ntest = pd.read_csv(path +'test.csv')\nsample = pd.read_csv(path +'sample_submission.csv')","64441b5b":"print(train.info())\nprint()\nprint('Train size: ', train.shape)\nprint()\ntrain.head()","9e8cbb4b":"print(test.info())\nprint()\nprint('Test size: ', test.shape)\nprint()\ntest.head(5)","a8f71c37":"print(sample.info())\nprint()\nprint('Sample size: ', sample.shape)\nprint()\nsample.head(5)","4983d33e":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\nsns.countplot(x='default', data=train);","69efb6f4":"# \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \ntrain['sample'] = 1   # train\ntest['sample'] = 0    # test\ntest['default'] = -1    \n\ndata = pd.concat([train, test], ignore_index=True)\n\n# num of unique values, first 10 unique values, null values count, type\ndata_agg = data.agg({'nunique', lambda s: s.unique()[:10]})\\\n    .append(pd.Series(data.isnull().sum(), name='null'))\\\n    .append(pd.Series(data.dtypes, name='dtype'))\\\n    .transpose()\n\ndata_agg","6fb996c8":"print(data.info())\nprint()\nprint(data.shape)","652ac62f":"sns.countplot(x='sex', data=data);","ca59958a":"data['sex'].value_counts()\/data.shape[0]","f4e9925c":"fig, axes = plt.subplots(figsize = (14, 4))\nsns.countplot(x='age', data=data, ax=axes);\n","5fcd3017":"data['age'].describe()","acd5dacc":"sns.countplot(x='car', data=data);","0f9b086c":"sns.countplot(x='car_type', data=data);","6add4fd5":"plt.hist(train['decline_app_cnt'], bins=50);","3c475c33":"sns.countplot(x='good_work', data=data);","9391bf4c":"plt.hist(train['score_bki'], bins=50);","0c566bb9":"# sns.countplot(x='home_address', data=train);\n\n\ntrain['home_address']\ntrain['work_address']\n\n\nfig, ax =plt.subplots(1,2)\nsns.countplot(train['home_address'], ax=ax[0])\nsns.countplot(train['work_address'], ax=ax[1])\nfig.show()","f572be6b":"plt.hist(train['income'], bins=30);","c21e3a92":"\ntrain['sna']\ntrain['first_time']\n\n\nfig, ax =plt.subplots(1,2)\nsns.countplot(train['sna'], ax=ax[0])\nsns.countplot(train['first_time'], ax=ax[1])\nfig.show()","5889597f":"sns.countplot(x='foreign_passport', data=train);","981d6789":"# \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u0432 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 (\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435) \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430. \n\nnum_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt']\n\ncat_cols = ['education','work_address','home_address','region_rating','sna','first_time']\n\nbin_cols = ['sex','car','car_type','good_work','foreign_passport']","d1a808dc":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfor i in num_cols:\n    plt.figure()\n    sns.displot(data[i].dropna(), kde = False, rug=False) \n    plt.title(f'Distribution of {i}')\n    plt.show()","3e97288d":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\nfor col in num_cols:\n    get_boxplot(data, col)","208d23bd":"data.education.value_counts().plot(\n    kind=\"bar\",\n    figsize=(8,6),\n    color=\"r\",\n    title='Distribution of clients by Education',\n    xlabel='education level',\n    ylabel='number of clients'\n)\n\nprint(\"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\", data.education.isna().sum())\nprint()","577af5ee":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata.education = data.education.fillna(\"SCH\")","90179414":"# \u043e\u0446\u0435\u043d\u0438\u043c \u0434\u043e\u0445\u043e\u0434 \u043e\u0442 \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nplt.figure(figsize=(15, 8))\nplt.title('Distribution of Income by Education level')\nsns.boxplot(\n    x=\"education\", \n    y=\"income\", \n    data=data, \n    showfliers=False\n)","9f7fced1":"# \u043e\u0446\u0435\u043d\u0438\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\nplt.figure(figsize=(15, 8))\nplt.title('Distribution of Education level by Region')\nsns.boxplot(\n    x=\"education\", \n    y=\"region_rating\", \n    data=data, \n    showfliers=False\n)","591343b2":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n\nplt.figure(figsize=[20, 20])\ni = 1\n\nfor k in cat_cols:\n    plt.subplot(4, 3, i)\n    sns.barplot(\n        x=k, \n        y='proportion', \n        hue='default',  \n        data=data[[k, 'default']].value_counts(normalize=True).rename('proportion').reset_index()\n    )\n    plt.title('Clients default distribution according to\\n' + k, fontsize=15)\n    i += 1\nplt.tight_layout()\nplt.show()","d0dc0659":"# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nmappc = {}\nlabel_encoder = LabelEncoder()\nfor col in cat_cols:\n    data[col] = label_encoder.fit_transform(data[col])\n    mappc[col] = dict(enumerate(label_encoder.classes_))\n    \nprint(mappc)","6d3d0bf5":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043f\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\n\nplt.figure(figsize=[20, 20])\ni = 1\n\nfor k in bin_cols:\n    plt.subplot(4, 3, i)\n    sns.barplot(\n        x=k,\n        y='proportion',\n        hue='default',\n        data=data[[k, 'default']].value_counts(normalize=True).rename('proportion').reset_index()\n    )\n    plt.title('Clients default distribution according to\\n' + k, fontsize=15)\n    i += 1\nplt.tight_layout()\nplt.show()","156c3d13":"# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\nmapp = {}\nlabel_encoder = LabelEncoder()\nfor col in bin_cols:\n    data[col] = label_encoder.fit_transform(data[col])\n    mapp[col] = dict(enumerate(label_encoder.classes_))\n    \nprint(mapp)","f53007f2":"plt.title('Correlation Matrix of dataset features')\nplt.rcParams['figure.figsize'] = (40,40)\nsns.heatmap(data.corr(), vmin=-1, vmax=1, annot = True)","6aff5c2b":"plt.title('Correlation Matrix of dataset features (numerical)')\nplt.rcParams['figure.figsize'] = (10,10)\nsns.heatmap(data[num_cols].corr(), vmin=-1, vmax=1, annot = True)","65d3a796":"plt.title('Correlation Matrix of dataset features (categorical)')\nplt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data[cat_cols].corr(), vmin=-1, vmax=1, annot = True)","a402234b":"plt.title('Correlation Matrix of dataset features (binary)')\nplt.rcParams['figure.figsize'] = (5,5)\nsns.heatmap(data[bin_cols].corr(), vmin=-1, vmax=1, annot = True)","3f150736":"# \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446,\n# \u0432\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndf = data.drop(['app_date'], axis=1)","3ad67808":"show_basic_models(df)","eda3f08c":"# \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \"\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043f\u043e\u0445\u0438\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata['app_date'] = pd.to_datetime(data['app_date'], format='%d%b%Y')\ndata_min = min(data['app_date'])\ndata['days'] = (data['app_date'] - data_min).dt.days.astype('int')\ndata['day'] = data['app_date'].dt.day\ndata['month'] = data['app_date'].dt.month\n\ndata.drop(['app_date'],  axis = 1, inplace = True)\n\n# \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\nmean_income = data.groupby('age')['income'].mean().to_dict()\ndata['mean_income_age'] = data['age'].map(mean_income)\n\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\nmax_income = data.groupby('age')['income'].max().to_dict()\ndata['max_income_age'] = data['age'].map(max_income)\n\n# \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\nmin_income = data.groupby('age')['income'].min().to_dict()\ndata['min_income_age'] = data['age'].map(min_income)\n\n# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u043e\u0445\u043e\u0434\ndata[\"normalized_income\"] = abs((data.income - data.mean_income_age)\/data.max_income_age)\ndata.drop(['mean_income_age', 'max_income_age'],  axis = 1, inplace = True)\n\n# \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmean_bki = data.groupby('age')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_age'] = data['age'].map(mean_bki)\n\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u043f\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmax_bki = data.groupby('age')['bki_request_cnt'].max().to_dict()\ndata['max_requests_age'] = data['age'].map(max_bki)\n\n# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c requests\ndata[\"normalized_req\"] = abs((data.bki_request_cnt - data.mean_requests_age)\/data.max_requests_age)\ndata.drop(['mean_requests_age', 'max_requests_age'],  axis = 1, inplace = True)\n\n# \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u043e\u0445\u043e\u0434\u0430\nmean_bki_inc = data.groupby('income')['bki_request_cnt'].mean().to_dict()\ndata['mean_requests_income'] = data['income'].map(mean_bki_inc)\n\n# \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0443\nmean_income_rat = data.groupby('region_rating')['income'].mean().to_dict()\ndata['mean_income_region'] = data['region_rating'].map(mean_income_rat)\n\ndata.drop(['income'],  axis = 1, inplace = True)\n\n# \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\n# 0 - \u043d\u0435\u0442 \u043c\u0430\u0448\u0438\u043d\u044b, 1 - \u0435\u0441\u0442\u044c \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0430, 2 - \u0435\u0441\u0442\u044c \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0430\ndata['car_comb'] = data['car'] + data['car_type']\ndata['car_comb'] = data['car_comb'].astype('category')\ndata.drop(['car', 'car_type'], axis=1, inplace=True)\n\n# \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0447\u0435\u0442\u044b\u0440\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\ndata['age_cat'] = data['age'].map(lambda x: age_to_cat(x))\ndata.drop('age', axis=1, inplace=True)\n\nlabel_encoder = LabelEncoder()\ndata['age_cat'] = label_encoder.fit_transform(data['age_cat'])\n    \n# Sort out decline_app_cnt and bki_request_cnt by groups:\ndata['decline_cat'] = data['decline_app_cnt'].apply(lambda x: 4 if x >= 4 else x) \ndata['bki_request_cat'] = data['bki_request_cnt'].apply(lambda x: 6 if x >= 6 else x)\ndata.drop(['decline_app_cnt', 'bki_request_cnt'], axis=1, inplace=True)\n\n# \u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n\n# \u0432\u044b\u0442\u0430\u0449\u0438\u043c \u0434\u0432\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ndata_addresses = data[['work_address', 'home_address']].values\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c Scaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data_addresses)\n\n# \u0423 \u043d\u0430\u0441 \u0434\u0432\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430. \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0434\u043e \u043e\u0434\u043d\u043e\u0433\u043e, \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.\npca = PCA(n_components=1)\npca.fit(scaled_data)\npca_data = pca.transform(scaled_data)\ndata['pca_address'] = pca_data\ndata['pca_address'] = data['pca_address'] + 5\ndata['pca_address'] = data['pca_address'].apply(lambda x: np.log(x) + 1)\n\n# \u0443\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\ndata.drop(['home_address','work_address'], axis=1, inplace=True)\n\ndata = data.fillna(data.mean())","4d77b6f9":"# \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n# exclude day, month (high correlation)\nnum_cols = [\n    'score_bki',\n    'days',\n    'min_income_age',\n    'normalized_income',\n    'normalized_req',\n    'mean_requests_income',\n    'mean_income_region',\n]\ncat_cols = [\n    'education',\n    'region_rating',\n    'sna',\n    'first_time',\n    'car_comb',\n    'age_cat',\n    'decline_cat',\n    'bki_request_cat',\n    'pca_address',\n]\nbin_cols = [\n    'sex',\n    'good_work',\n    'foreign_passport',\n]","c29da7d5":"for col in num_cols:\n    median = data[col].median()\n    IQR = data[col].quantile(0.75) - data[col].quantile(0.25)\n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    \n    print(\"Column: \", col)\n    print(' 25%: {:.4},\\n'.format(perc25), '75%: {:.4},\\n'.format(perc75),\n          \"IQR: {:.4}, \\n\".format(IQR), \"Borderline: [{f:.4}, {l:.4}].\\n\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    print()\n    \n    # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \n    data[col] = np.where(data[col] > (perc75 + 1.5*IQR), (perc75 + 1.5*IQR), data[col])\n    data[col] = np.where(data[col] < (perc25 - 1.5*IQR), (perc25 - 1.5*IQR), data[col])","518939fe":"scaler = RobustScaler()\ndata[num_cols] = scaler.fit_transform(data[num_cols].values)","6e3855bd":"data.info()","e4602d3f":"data.head()","edbba801":"show_basic_models(data)","c1d30725":"train_df = data.query('sample == 1').drop(['sample', 'client_id'], axis=1)\ntest_df = data.query('sample == 0').drop(['sample', 'client_id'], axis=1)\n\nX = train_df.drop(['default'], axis=1).values\ny = train_df['default'].values\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.20, random_state=RANDOM_SEED)","78cc8082":"# default model\n\nlr = LogisticRegression(max_iter=500)\ny_pred, probs = compute_selected_model(lr)\n","5ead521e":"# penalty=none is stronger than penalty=l2\n\nlr_penalty_none = LogisticRegression(penalty='none', max_iter=1000)\ny_pred, probs = compute_selected_model(lr_penalty_none)\n","5d813427":"# multi_class=multinominal is weaker than auto or ovr (them equal)\n\nlr_ovr = LogisticRegression(penalty='l2', max_iter=1000, multi_class='ovr')\ny_pred, probs = compute_selected_model(lr_ovr)\n","48904ff0":"# saga is weaker than sag with equal max_iter\n# both sag and saga weaker than default solver\n\nlr_saga = LogisticRegression(penalty='l2', max_iter=1500, solver='saga')\ny_pred, probs = compute_selected_model(lr_saga)\n","802150fe":"# balanced is weaker than default settings in roc_auc\n# but f1_score is significant stronger\n\nlr_balanced = LogisticRegression(class_weight='balanced', max_iter=500)\ny_pred, probs = compute_selected_model(lr_balanced)\n","943f639c":"# best LogReg model from previous chapter with balanced class weights\n\nlr_penalty_none = LogisticRegression(penalty='none', max_iter=1000)\ny_pred, probs = compute_selected_model(lr_penalty_none)","c1a380ce":"fpr, tpr, threshold = roc_curve(y_test, probs)\nroc_auc = roc_auc_score(y_test, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","59fbc9ac":"cm = confusion_matrix(y_test, y_pred)\ncmd = ConfusionMatrixDisplay(cm, display_labels=['non_default', 'default'])\ncmd.plot()\ncmd.ax_.set(xlabel='Predicted', ylabel='True')","2616da2d":"train_data = data.query('sample == 1').drop(['sample', 'client_id'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample', 'client_id'], axis=1)\n\nX_train = train_data.drop(['default'], axis=1)\ny_train = train_data.default.values\nX_test = test_data.drop(['default'], axis=1)\ny_test = test_data.default.values","4dcfd2ea":"params = {'C' : np.logspace(-4, 4, 20)}\n\nmodel = LogisticRegression(penalty='none', max_iter=1000, n_jobs=4)\nmodel.fit(X_train, y_train)\n\nclf = GridSearchCV(model, params, cv=5, verbose=3)\n\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","c7451c7a":"y_pred = best_model.predict_proba(X_test)\nresults_df = pd.DataFrame(data={'client_id':test['client_id'], 'default':y_pred[:,1]})\nresults_df.to_csv('submission.csv', index=False)\nresults_df","85f24592":"## \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","46397a9e":"score_bki 93% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435.","955693c3":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a age \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u044b \u0432\u043b\u0435\u0432\u043e:\n\nMinimum 21\nmedian 37\nMean 39.2\nMaximum 72\nInterquartile range (IQR) 18\n\n\n","f99bc332":"## \u0412\u044b\u0432\u043e\u0434\u044b\n\n\u041f\u043e \u0438\u0442\u043e\u0433\u0443 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 logisticRegression \u0441\u043e \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 - \u0442\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0432\u0441\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c.","37dfa806":"## EDA\n\n\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u044b\u0445 \u0435\u0441\u0442\u044c 19 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 (\u0441\u0442\u0440\u043e\u043a) \u0440\u0430\u0432\u043d\u043e 110 148.\n\n\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0435\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 education.\n\n\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043d\u0435\u0442.\n\n\u0423 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 client_id \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435.\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a app_date \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e 120 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u0444\u0435\u0432\u0440\u0430\u043b\u044c-\u0430\u043f\u0440\u0435\u043b\u044c 2014 \u0433\u043e\u0434\u0430\n\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a education \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 5 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0438 \u0442\u0430\u043a\u0436\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n1. SCH (52%) - School;\n2. GRD (31%) - Graduated (Master degree);\n3. UGR (13%) - UnderGraduated (Bachelor degree);\n4. PGR (1.7%) - PostGraduated;\n5. ACD (0.3%) - Academic Degree.","d519869e":"#### ROC AUC = 0.7393","de466660":"## \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b\n\n\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n* Car \u0438 car_type \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a car_comb \u0441 \u0442\u0440\u0435\u043c\u044f \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438.\n* \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043b\u0436\u043d\u0438\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d \u0438 \u0436\u0435\u043d\u0449\u0438\u043d \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435, \u043d\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0431\u0435\u0440\u0443\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0447\u0430\u0449\u0435.\n\n\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n* \u041b\u044e\u0434\u0438 \u0441\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u043d\u0438\u0436\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u044b \u0440\u0435\u0436\u0435, \u0447\u0435\u043c \u043b\u044e\u0434\u0438 \u0441 \u0432\u044b\u0441\u0448\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c.\n* \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0432 \u0431\u0430\u043d\u043a\u0435 - \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435 \u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u0435\u043d\u043d\u044b\u0445 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432.\n* \u041b\u044e\u0434\u0438 \u0441 \u0432\u044b\u0441\u0448\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0436\u0438\u0432\u0443\u0442 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c.\n* \u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430, \u0442\u0435\u043c \u043d\u0438\u0436\u0435 \u0440\u0438\u0441\u043a \u0434\u0435\u0444\u043e\u043b\u0442\u0430.\n\nNumerical:\n* score_bki \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0431\u043b\u0438\u0437\u043a\u043e\u0435 \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443\n* \u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u0423\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Scaler\n* \u041c\u0435\u0436\u0434\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043d\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\n* \u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0434\u043e\u0445\u043e\u0434\u0430\n* \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u0437\u0430\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u043e\u0433\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n\n\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n* sna\n* pca_address (home & work addresses)\n* first_time\n* score_bki\n* mean_income_region\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u043c\u0435\u0435\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043d\u0435\u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0445 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c logistic regressions (\u043f\u0440\u0438 \u044d\u0442\u043e\u043c descicion tree models \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u0430\u0431\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b).","828b8347":"## \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\n","8ca58d49":"# \u041f\u0440\u043e\u0435\u043a\u0442 5 - \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0435\u0442\n\n\u0417\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0434\u0435\u043d\u0435\u0433- \u044d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u0431\u0430\u043d\u043a\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c. \u0415\u0441\u043b\u0438 \u0431\u0430\u043d\u043a \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u0435 \u0445\u043e\u0440\u043e\u0448\u0435\u043c\u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0443 \u2014 \u043e\u0448\u0438\u0431\u043a\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u043e\u0434\u0430. \u041d\u043e \u0435\u0441\u043b\u0438 \u0431\u0430\u043d\u043a \u0434\u0430\u0441\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u043f\u043b\u043e\u0445\u043e\u043c\u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0442\u043e\u043c \u0435\u0433\u043e \u043d\u0435 \u043e\u0442\u0434\u0430\u0441\u0442, \u0442\u043e \u0431\u0430\u043d\u043a \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u0442 \u0434\u0435\u043d\u044c\u0433\u0438 - \u044d\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0434\u0430.\n\t\n\u0414\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 \u0431\u0430\u043d\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0441\u043a\u043e\u0440\u0438\u043d\u0433 - \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438. \u0421\u0430\u043c\u043e \u0441\u043b\u043e\u0432\u043e \u0441\u043a\u043e\u0440\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043e\u0442 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u00abscore\u00bb \u2014 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043e\u0447\u043a\u043e\u0432. \u0412 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0441 \u0431\u0430\u043d\u043a\u0430\u043c\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0435 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0435\u0434\u0443\u0442 \u00ab\u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043e\u0447\u043a\u043e\u0432\u00bb, \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u044f \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e \u044d\u0442\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438\u0434\u0435\u0442 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u043b\u043e\u0445\u0438\u0445 \u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u044d\u0442\u0443 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a \u0431\u0430\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u044c, \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043a\u0440\u0435\u0434\u0438\u0442 \u0438\u043b\u0438 \u043d\u0435\u0442. \u0411\u0430\u043d\u043a\u0438 \u0441\u0430\u043c\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0434\u043b\u044f \u0441\u0435\u0431\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d\u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0442\u043a\u0430\u0437\u0435 \u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u0435.\n\n\u0426\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430.","1930cfc6":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a sex \u0432\u044b\u0440\u0430\u0436\u0435\u043d \u0432 \u0432\u0438\u0434\u0435 2 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439:\n\nFemale (56%);\nMale (44%);","e5c2e344":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a car -  \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a,\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f.\n","e8774988":"\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a good_work \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","62d401ad":"Default  - \u043d\u0430\u0448 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043f\u043e\u0434\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c \u0442\u0435\u0445, \u043a\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442 \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u043b\u0435\u043c. \u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f, \u043f\u0440\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c undersampling.","9605d99b":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439\n* client_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n* education - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n* sex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* age - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* car - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n* car_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n* decline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n* good_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n* bki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0411\u041a\u0418 \u043e \u0441\u0432\u043e\u0435\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n* home_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* work_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n* income - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n* foreign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n* default - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","64eef333":"\u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b:\n* \u0447\u0435\u043c \u043d\u0438\u0436\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u0435\u043d \u0434\u0435\u0444\u043e\u043b\u0442 \n* \u0447\u0435\u043c \u0432\u044b\u0448\u0435 score_bki, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u0435\u043d \u0434\u0435\u0444\u043e\u043b\u0442\n* \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0435\u0444\u043e\u043b\u0442\u0430","64942b06":"## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0441 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0438\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442 \u0431\u041e\u043b\u044c\u0448\u0443\u044e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u0445\u043e\u0442\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0438 \u0438 \u0445\u043e\u0442\u044f\u0442 \u0432\u0437\u044f\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e.\n\n\u0427\u0435\u043c \u043d\u0438\u0436\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430, \u0442\u0435\u043c \u0447\u0430\u0449\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u0434\u0435\u0444\u043e\u043b\u0442 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0430\u043c. ","2c4d19f7":"## \u041e\u0446\u0435\u043d\u043a\u0430 ROC AUC \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u0435\u0442\u0440\u0438\u043a","3772ff35":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 home_address \u0438 work_address  - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 3 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","050a6ab5":"## \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n\u0416\u0435\u043d\u0449\u0438\u043d\u044b \u0447\u0430\u0449\u0435 \u0431\u0435\u0440\u0443\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u044b, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d\u044b. \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u043e\u0432 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435.\n\n\u0417\u0430\u0435\u043c\u0449\u0438\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043c\u0430\u0448\u0438\u043d\u0430, \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u044b. \n\n\u0417\u0430\u0435\u043c\u0449\u0438\u043a\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c, \u0431\u043e\u043b\u0435\u0435 \u043d\u0430\u0434\u0435\u0436\u043d\u044b, \u0447\u0435\u043c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0438 \u0441 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438.\n\n\u0417\u0430\u0435\u043c\u0449\u0438\u043a\u0438 \u0441 \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 \u0438 \u0437\u0430\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u043c \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u043e\u043c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u043e\u043b\u0433 \u0447\u0430\u0449\u0435, \u0447\u0435\u043c \u0431\u0435\u0437.","28e288e5":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 sna \u0438 first_time -  \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435, \u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 4 \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","33c22a8a":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a  - decline_app_cnt \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u0432\u043b\u0435\u0432\u043e. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439  - \u043d\u0443\u043b\u0435\u0432\u044b\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043e \u043f\u043e \u043f\u0440\u043e\u0448\u043b\u044b\u043c \u0437\u0430\u044f\u0432\u043a\u0430\u043c.","b931c7f6":"foreign_passport \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, 67% \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u0430\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u043f\u0430\u0441\u043f\u043e\u0440\u0442","bd689a02":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\n\n\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0438 \u043c\u0435\u0441\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b. \n\n\u0421\u0438\u043b\u044c\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 car, car_type. \n\n\u0415\u0441\u0442\u044c \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 sna, first_time. ","d8bd332b":"\u041b\u044e\u0434\u0438 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0436\u0438\u0432\u0443\u0442 \u0432 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c. \u0418 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442.","a9c9bcaa":"## \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n\u0421\u0440\u0430\u0432\u043d\u0438\u043c logisticRegression \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u043e\u0439 class_weight='balanced'.","fa0e9d13":"income \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 1000 \u0434\u043e 1000000; \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c","e15a2a22":"car_type  - \u044d\u0442\u043e \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438\u043b\u0438 \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430. \u0423 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u043e\u0432 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c. ","11dc81f8":"## \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f","61309c0d":"## \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n","85be83e8":"## \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432","92e7fb20":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n### \u0414\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n\n\u041a\u0430\u043a \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b\u0438 \u0440\u0430\u043d\u0435\u0435, home_address and work address \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0435\u0439.","ee62bd14":"\u0421\u0440\u0430\u0437\u0443 \u0431\u0440\u043e\u0441\u0430\u0435\u0442\u0441\u044f \u0432 \u0433\u043b\u0430\u0437\u0430, \u0447\u0442\u043e \u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f."}}