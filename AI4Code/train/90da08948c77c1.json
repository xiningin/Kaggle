{"cell_type":{"af4cbf74":"code","f64d0b66":"code","849fd31a":"code","7c210b83":"code","75b0ec27":"code","f91ac45c":"code","73702245":"code","fa4f10db":"code","e55d751e":"code","ddc93afc":"code","e7ec12e1":"code","c283e7b1":"code","47495255":"code","aaee790b":"code","fbd23c33":"code","16346c67":"code","5ee2271c":"code","78a9dd16":"code","fa71c7e3":"markdown","7a6b7126":"markdown","677dfd47":"markdown","89bb8eaa":"markdown","a8aeeae5":"markdown","d8d146f8":"markdown","e3f736b3":"markdown","aa9abe9f":"markdown","3a4d123a":"markdown","deb2f2d3":"markdown","a17bcc81":"markdown","025f1f3b":"markdown","8975a64e":"markdown","4ba83c86":"markdown","f6c829e1":"markdown","0c17a922":"markdown","fbd42aef":"markdown","39590064":"markdown"},"source":{"af4cbf74":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt","f64d0b66":"import warnings\nwarnings.filterwarnings(\"ignore\")","849fd31a":"path = '\/kaggle\/input\/'\nos.listdir(path)","7c210b83":"data_2020 = pd.read_csv(path+'kaggle-survey-2020\/'+'kaggle_survey_2020_responses.csv',\n                        low_memory=False)\ndata_2019 = pd.read_csv(path+'kaggle-survey-2019\/'+'multiple_choice_responses.csv',\n                        low_memory=False)\ndata_2018 = pd.read_csv(path+'kaggle-survey-2018\/'+'multipleChoiceResponses.csv',\n                        low_memory=False)\n\nquestions = pd.read_csv(path+'kaggle-survey-2017\/'+'schema.csv',\n                        low_memory=False, encoding = \"ISO-8859-1\")\ndata_2017 = pd.read_csv(path+'kaggle-survey-2017\/'+'multipleChoiceResponses.csv',\n                        low_memory=False, encoding = \"ISO-8859-1\")\nquestions.index=questions['Column']\nnew_row = questions[questions.index.isin(data_2017.columns)]['Question'].to_dict()\nnew_row = pd.DataFrame(new_row, index=[0])\ndata_2017 = pd.concat([new_row, data_2017]).reset_index(drop = True) ","75b0ec27":"data_user = pd.read_csv('\/kaggle\/input\/meta-kaggle\/'+'Users.csv') ","f91ac45c":"def plot_bar(data, text='', rotation=False):\n    fig = plt.figure(figsize=(10, 5))\n    x = data.keys()\n    y = data.values\n    plt.bar(x, y)\n    plt.title(text, loc='center')\n    plt.xlabel('Year')\n    if rotation:\n        plt.xticks(rotation='vertical')\n    plt.grid()\n    plt.show()\n    \ndef plot_compare_distribution(data, text=''):\n    fig = plt.figure(figsize=(10, 5))\n    x = data.columns\n    for row in range(len(data.index)):\n        y = data.iloc[row].values\n        plt.plot(x, y, marker='o', fillstyle='none', ls='-',label=data.index[row])\n    plt.title(text, loc='center')\n    plt.xlabel('Year')\n    plt.ylabel('Distribution')\n    plt.grid()\n    plt.legend(bbox_to_anchor=(1.05, 1))\n    plt.show()","73702245":"data_user.index=pd.to_datetime(data_user['RegisterDate'])\nusers = data_user.resample('A').count()['UserName']\nusers.index = users.index.year\nplot_bar(users, text='Number of new users', rotation=False)","fa4f10db":"s = pd.Series(dtype='float64')\ns['2017'] = len(data_2017.index)-1\ns['2018'] = len(data_2018.index)-1\ns['2019'] = len(data_2019.index)-1\ns['2020'] = len(data_2020.index)-1\nplot_bar(s, text='Number of participations', rotation=False)","e55d751e":"s = pd.Series(dtype='float64')\ns['2017'] = len(data_2017.columns)\ns['2018'] = len(data_2018.columns)\ns['2019'] = len(data_2019.columns)\ns['2020'] = len(data_2020.columns)\nplot_bar(s, text='Number of columns', rotation=False)","ddc93afc":"def group_age_2017(s):\n    if s == 'Unknown':\n        return 'Unknown'\n    elif (s >= 18) & (s <= 21):\n        return '18-21'\n    elif (s >= 22) & (s <= 24):\n        return '22-24'\n    elif (s >= 25) & (s <= 29):\n        return '25-29'\n    elif (s >= 30) & (s <= 34):\n        return '30-34'\n    elif (s >= 35) & (s <= 39):\n        return '35-39'\n    elif (s >= 40) & (s <= 44):\n        return '40-44'\n    elif (s >= 45) & (s <= 49):\n        return '45-49'\n    elif (s >= 50) & (s <= 54):\n        return '50-54'\n    elif (s >= 55) & (s <= 59):\n        return '55-59'\n    elif (s >= 60) & (s <= 69):\n        return '60-69'\n    elif (s >= 70):\n        return '70+'\n\ndef group_age_2018(s):\n    if s == 'Unknown':\n        return 'Unknown'\n    elif (s=='70-79') | (s=='80+'):\n        return '70+'\n    else:\n        return s\n    \ndata_2017['Age'].fillna('Unknown', inplace=True)\ndata_2017[1:]['Age'] = data_2017[1:]['Age'].apply(group_age_2017)\ndata_2018[1:]['Q2'] = data_2018[1:]['Q2'].apply(group_age_2018)\n\ndf_age = pd.DataFrame()\ndf_age['2017'] = 100*data_2017[1:]['Age'].value_counts().sort_index()\/len(data_2017[1:])\ndf_age['2018'] = 100*data_2018[1:]['Q2'].value_counts().sort_index()\/len(data_2018[1:])\ndf_age['2019'] = 100*data_2019[1:]['Q1'].value_counts().sort_index()\/len(data_2019[1:])\ndf_age['2020'] = 100*data_2020[1:]['Q1'].value_counts().sort_index()\/len(data_2020[1:])\ndf_age.drop(['Unknown'], inplace=True)","e7ec12e1":"plot_compare_distribution(df_age[0:5])","c283e7b1":"def rename_gender_2020(s):\n    if s == 'Man':\n        return 'Male'\n    elif s == 'Woman':\n        return 'Female'\n    else:\n        return s\n\ndata_2017[1:]['GenderSelect'].fillna('NoSelection', inplace=True)\ndata_2020[1:]['Q2'] = data_2020[1:]['Q2'].apply(rename_gender_2020)\n\ns_2017 = 100*data_2017[1:]['GenderSelect'].value_counts()\/len(data_2017[1:])\ns_2018 = 100*data_2018[1:]['Q1'].value_counts()\/len(data_2018[1:])\ns_2019 = 100*data_2019[1:]['Q2'].value_counts()\/len(data_2019[1:])\ns_2020 = 100*data_2020[1:]['Q2'].value_counts()\/len(data_2020[1:])\ndf_gender = pd.concat([s_2017, s_2018, s_2019, s_2020], axis=1)\ndf_gender.columns=['2017', '2018', '2019', '2020']","47495255":"plot_compare_distribution(df_gender[0:2])","aaee790b":"data_2017[1:]['Country'].fillna('Unknown', inplace=True)\ndata_2018[1:]['Q3'].fillna('Unknown', inplace=True)\ndata_2019[1:]['Q3'].fillna('Unknown', inplace=True)\ndata_2020[1:]['Q3'].fillna('Unknown', inplace=True)\n\ndict_country = {'United States': 'United States of America'}\n\ndata_2017[1:]['Country'].replace(dict_country, inplace=True)\n\ns_2017 = 100*data_2017[1:]['Country'].value_counts()\/len(data_2017[1:])\ns_2018 = 100*data_2018[1:]['Q3'].value_counts()\/len(data_2018[1:])\ns_2019 = 100*data_2019[1:]['Q3'].value_counts()\/len(data_2019[1:])\ns_2020 = 100*data_2020[1:]['Q3'].value_counts()\/len(data_2020[1:])\ndf_country = pd.concat([s_2017, s_2018, s_2019, s_2020], axis=1)\ndf_country.columns=['2017', '2018', '2019', '2020']\n\ndf_country.sort_values(by=['2020'], ascending=False, inplace=True)","fbd23c33":"plot_compare_distribution(df_country[0:6])","16346c67":"print('2017:', data_2017.loc[0, 'Tenure'])\nprint('2018:', data_2018.loc[0, 'Q24'])\nprint('2019:', data_2019.loc[0, 'Q15'])\nprint('2020:', data_2020.loc[0, 'Q6'])","5ee2271c":"data_2017[1:]['Tenure'].fillna('NoSelection', inplace=True)\ndata_2018[1:]['Q24'].fillna('NoSelection', inplace=True)\ndata_2019[1:]['Q15'].fillna('NoSelection', inplace=True)\ndata_2020[1:]['Q6'].fillna('NoSelection', inplace=True)\n\ndef adjust_answers_2017(s):\n    if s=='Less than a year':\n        return '< 1 years'\n    elif s=='1 to 2 years':\n        return '1-2 years'\n    elif s=='3 to 5 years':\n        return '3-5 years'\n    elif s=='6 to 10 years':\n        return '5-10 years'\n    elif s=='More than 10 years':\n        return '10+'\n    elif s==\"I don't write code to analyze data\":\n        return \"I don't write code\"\n    else:\n        return s\n\ndef adjust_answers_2018_2020(s):\n    if s=='NoSelection':\n        return 'NoSelection'\n    elif s=='< 1 year':\n        return '< 1 years'\n    elif (s=='10-20 years')or(s=='20-30 years') or (s=='30-40 years') or (s=='40+ years') or (s=='20+ years'):\n        return '10+'\n    elif ((s==\"I have never written code but I want to learn\") or\n          (s==\"I have never written code and I do not want to learn\") or\n          (s==\"I have never written code\")):\n        return \"I don't write code\"\n    else:\n        return s\n\ndata_2017[1:]['Tenure'] = data_2017[1:]['Tenure'].apply(adjust_answers_2017)\ndata_2018[1:]['Q24'] = data_2018[1:]['Q24'].apply(adjust_answers_2018_2020)\ndata_2019[1:]['Q15'] = data_2019[1:]['Q15'].apply(adjust_answers_2018_2020)\ndata_2020[1:]['Q6'] = data_2020[1:]['Q6'].apply(adjust_answers_2018_2020)\n\ns_2017 = 100*data_2017[1:]['Tenure'].value_counts()\/len(data_2017[1:])\ns_2018 = 100*data_2018[1:]['Q24'].value_counts()\/len(data_2018[1:])\ns_2019 = 100*data_2019[1:]['Q15'].value_counts()\/len(data_2019[1:])\ns_2020 = 100*data_2020[1:]['Q6'].value_counts()\/len(data_2020[1:])\ndf_code_exp = pd.concat([s_2017, s_2018, s_2019, s_2020], axis=1)\ndf_code_exp.columns=['2017', '2018', '2019', '2020']\nindex_series = ['< 1 years', '1-2 years', '3-5 years', '5-10 years', '10+', \"I don't write code\", 'NoSelection']","78a9dd16":"df_code_exp.reindex(index_series).round(2)","fa71c7e3":"## Code Experience\nSince 2020 the question for code experience is more general than the years before.","7a6b7126":"Load user data of the Kaggle meta dataset:","677dfd47":"## Gender","89bb8eaa":"# Functions\nWe define some helper functions for visualization.","a8aeeae5":"As we can see there is a slight decrease of male users and a slight increase of female users. And there is a significant imbalance between male and female users.","d8d146f8":"# No Perfect Match Questions\nThe questions and answers above are easy to compare. But there are also questions which do not or do not perfectly match.  ","e3f736b3":"## Age\nWe want to compare the distrubution of the age groups. Before we have to align the age groups for the years 2017 and 2018.","aa9abe9f":"# EDA","3a4d123a":"As we can see there is a significant increase of members in the group 18-21 from 7% to 17%.","deb2f2d3":"## Number Of Survey Participations","a17bcc81":"# Libraries","025f1f3b":"## Number Of Yearly New Users\nThe number of new users increases rapidly.","8975a64e":"# Overview","4ba83c86":"## Number Of Features","f6c829e1":"## Country","0c17a922":"# Path","fbd42aef":"# Intro\nIn this notebook we want to compare the results of the survey of the years [2017](https:\/\/www.kaggle.com\/kaggle\/kaggle-survey-2017), [2018](https:\/\/www.kaggle.com\/kaggle\/kaggle-survey-2018), [2019](https:\/\/www.kaggle.com\/c\/kaggle-survey-2019) and [2020](https:\/\/www.kaggle.com\/c\/kaggle-survey-2020).\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/23724\/logos\/header.png) \n\nWe focus on the multiple choice responses and do not consider \n* the freeformResponses in 2017 and 2018,\n* the other text responses in 2019.\n\nAdditonally we include the [Kaggle meta dataset](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle). \n\nThe challenge of this notebook is to make them comparable over time. \n\nFor an analysis focused on 2020 we consider this [notebook](https:\/\/www.kaggle.com\/drcapa\/2020-kaggle-ml-ds-survey-eda).\n\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Thank you. <\/span>","39590064":"# Load And Prepare Data\nFor the data of the year 2017 we have to add the questions separately."}}