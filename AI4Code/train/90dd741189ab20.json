{"cell_type":{"db6ff181":"code","582474ed":"code","7ab4b598":"code","60acf3d3":"code","050dccf6":"code","f7adb5ac":"code","881a2279":"code","37a3ba9f":"code","1dea43c1":"code","64cb64af":"code","78bdc6c5":"code","8c5d4242":"code","d9695ac0":"code","c7ba61a0":"code","10699ba4":"code","07d916a6":"code","24b5fe58":"code","dfbbd270":"code","7867194e":"code","3da7b53b":"code","0e3bc6ef":"code","0fbd0e2a":"code","e33c113a":"code","b76c2ce6":"code","e7d6578a":"code","f96ac334":"code","292c0508":"code","065af71e":"code","55fe88b8":"code","e2536446":"code","ce60d7fe":"code","0f92c437":"code","357dc06c":"code","19ed2dd7":"code","8d4af63b":"code","0a908bd6":"code","23e98bd1":"code","120fa24b":"code","3b3fab7f":"code","64471ddf":"code","53379b0c":"code","de4678ea":"code","9fe8efa5":"code","e9a01cd1":"code","e9ba2186":"code","85b91d18":"code","685008b6":"code","34832693":"code","99eab8f7":"code","444966f2":"code","80109aec":"code","daa630a5":"code","3209e8c3":"code","27007be7":"code","8c257ecd":"code","263a2580":"code","1ce1e0ae":"code","4f4a6494":"code","02896c93":"code","c36704d7":"code","f31cc7b8":"code","d2b0b581":"code","929b8c6f":"code","54eab661":"code","617ce364":"code","3e0e40aa":"code","588570b7":"code","2060ddc7":"code","6e1d031d":"code","32e834b5":"code","f2da3af0":"code","97683c79":"code","83b25745":"code","0f5c28b8":"code","715e72ec":"code","d55a57a4":"code","07461771":"code","92d298d7":"code","7a2d1749":"markdown","ccc9ceed":"markdown","6643ecda":"markdown","6671225d":"markdown","e4de7e85":"markdown","226aac37":"markdown","c70cae25":"markdown","512b0389":"markdown","8c3d57b6":"markdown","b44c9563":"markdown","d4418a01":"markdown","5a5d448c":"markdown","8c3cca5a":"markdown","cd30723d":"markdown","83a12bce":"markdown","3d827593":"markdown"},"source":{"db6ff181":"import numpy as np\nimport pandas as pd\nimport gc\nimport time\nfrom contextlib import contextmanager\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) ","582474ed":"application_train     = pd.read_csv(r\"..\/input\/home-credit-default-risk\/application_train.csv\")\napplication_test      = pd.read_csv(r\"..\/input\/home-credit-default-risk\/application_test.csv\")\nbureau                = pd.read_csv(r\"..\/input\/home-credit-default-risk\/bureau.csv\")\nbureau_balance        = pd.read_csv(r\"..\/input\/home-credit-default-risk\/bureau_balance.csv\")\ncredit_card_balance   = pd.read_csv(r\"..\/input\/home-credit-default-risk\/credit_card_balance.csv\")\ninstallments_payments = pd.read_csv(r\"..\/input\/home-credit-default-risk\/installments_payments.csv\")\npos_cash_balance      = pd.read_csv(r\"..\/input\/home-credit-default-risk\/POS_CASH_balance.csv\")\nprevious_application  = pd.read_csv(r\"..\/input\/home-credit-default-risk\/previous_application.csv\")","7ab4b598":"print (\"application_train     :\",application_train.shape)\nprint (\"application_test      :\",application_test.shape)\nprint (\"bureau                :\",bureau.shape)\nprint (\"bureau_balance        :\",bureau_balance.shape)\nprint (\"credit_card_balance   :\",credit_card_balance.shape)\nprint (\"installments_payments :\",installments_payments.shape)\nprint (\"pos_cash_balance      :\",pos_cash_balance.shape)\nprint (\"previous_application  :\",previous_application.shape)","60acf3d3":"def timer(title):\n    t0 = time.time()\n    yield\n    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))","050dccf6":"def application_train_test(num_rows = None, nan_as_category = False):\n    # Read data and merge\n    df = pd.read_csv('..\/input\/application_train.csv', nrows= num_rows)\n    test_df = pd.read_csv('..\/input\/application_test.csv', nrows= num_rows)\n    print(\"Train samples: {}, test samples: {}\".format(len(df), len(test_df)))\n    df = df.append(test_df).reset_index()","f7adb5ac":"print(application_train.dtypes)","881a2279":"df = application_train\ntest_df = application_test  ","37a3ba9f":"df.shape","1dea43c1":"df.head()","64cb64af":" lbe = LabelEncoder()\n","78bdc6c5":" for col in ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY']:\n            df[col] = lbe.fit_transform(df[col])","8c5d4242":"df.head()","d9695ac0":" df = pd.get_dummies(df, dummy_na = True)","c7ba61a0":" df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace = True)\n   ","10699ba4":"df = df.append(test_df).reset_index()\ndf = df[df['CODE_GENDER'] != 'XNA']\n\n# NEW FEATURES\n\ndf['NEW_DAYS_EMPLOYED_PERC'] = df['DAYS_EMPLOYED'] \/ df['DAYS_BIRTH']\ndf['NEW_INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] \/ df['AMT_CREDIT']\ndf['NEW_INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] \/ df['CNT_FAM_MEMBERS']\ndf['NEW_ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] \/ df['AMT_INCOME_TOTAL']\ndf['NEW_PAYMENT_RATE'] = df['AMT_ANNUITY'] \/ df['AMT_CREDIT']\ndf.drop(\"index\", axis = 1, inplace =  True)\ndf.columns = pd.Index([\"APP_\" + col for col in df.columns.tolist()])\ndf.rename(columns={\"APP_SK_ID_CURR\":\"SK_ID_CURR\"}, inplace = True)\ndf.rename(columns={\"APP_TARGET\":\"TARGET\"}, inplace = True)","07d916a6":"bbb = bureau_balance    ","24b5fe58":"print(bbb.dtypes)","dfbbd270":"bbb.shape","7867194e":"bbb = pd.get_dummies(bbb, dummy_na = True)\nagg_list = {\"MONTHS_BALANCE\":\"count\",\n                \"STATUS_0\":[\"sum\",\"mean\"],\n                \"STATUS_1\":[\"sum\"],\n                \"STATUS_2\":[\"sum\"],\n                \"STATUS_3\":[\"sum\"],\n                \"STATUS_4\":[\"sum\"],\n                \"STATUS_5\":[\"sum\"],\n                \"STATUS_C\":[\"sum\",\"mean\"],\n                \"STATUS_X\":[\"sum\",\"mean\"] }\n","3da7b53b":"bbb.head()","0e3bc6ef":" bbb_agg = bbb.groupby(\"SK_ID_BUREAU\").agg(agg_list)","0fbd0e2a":"bbb.head()","e33c113a":"  bbb_agg.columns = pd.Index([col[0] + \"_\" + col[1].upper() for col in bbb_agg.columns.tolist()])\n","b76c2ce6":"# NEW FEATURES\nbbb_agg['NEW_STATUS_SCORE'] = bbb_agg['STATUS_1_SUM'] + bbb_agg['STATUS_2_SUM']^2 + bbb_agg['STATUS_3_SUM']^3 + bbb_agg['STATUS_4_SUM']^4 + bbb_agg['STATUS_5_SUM']^5\n\n","e7d6578a":"bbb_agg.drop(['STATUS_1_SUM','STATUS_2_SUM','STATUS_3_SUM','STATUS_4_SUM','STATUS_5_SUM'], axis=1,inplace=True)\n","f96ac334":" bureau_and_bb = bureau.join(bbb_agg, how='left', on='SK_ID_BUREAU')","292c0508":"#CREDIT_TYPE degiskeninin sinif sayisini 3'e d\u00fcs\u00fcrmek\n\nbureau_and_bb['CREDIT_TYPE'] = bureau_and_bb['CREDIT_TYPE'].replace(['Car loan',\n              'Mortgage',\n              'Microloan',\n              'Loan for business development', \n              'Another type of loan',\n              'Unknown type of loan', \n              'Loan for working capital replenishment',\n              \"Loan for purchase of shares (margin lending)\",                                                \n              'Cash loan (non-earmarked)', \n              'Real estate loan',\n              \"Loan for the purchase of equipment\", \n              \"Interbank credit\", \n              \"Mobile operator loan\"], 'Rare')\n","065af71e":"#CREDIT_ACTIVE degiskeninin sinif sayisini 2'ye d\u00fcs\u00fcrmek (Sold' u Closed a dahil etmek daha mi uygun olur ???)\nbureau_and_bb['CREDIT_ACTIVE'] = bureau_and_bb['CREDIT_ACTIVE'].replace(['Bad debt','Sold'], 'Active')\n\n# bureau_bb tablosundaki kategorik degiskenlere One Hot Encoding uygulanmasi\nbureau_and_bb = pd.get_dummies(bureau_and_bb, columns = [\"CREDIT_TYPE\",\"CREDIT_ACTIVE\"])\n\n# CREDIT_CURRENCY degiskeninin %99u currency1, bu sebeple ayirt ediciligi olmayacagini dusundugumuz icin sildik  \nbureau_and_bb.drop([\"SK_ID_BUREAU\",\"CREDIT_CURRENCY\"], inplace = True, axis = 1)","55fe88b8":"#NEW FEATURES 2\n\nbureau_and_bb[\"NEW_MONTHS_CREDIT\"]= round((bureau_and_bb.DAYS_CREDIT_ENDDATE - bureau_and_bb.DAYS_CREDIT)\/30)\n\nagg_list = {\n          \"SK_ID_CURR\":[\"count\"],\n          \"DAYS_CREDIT\":[\"min\",\"max\"],\n          \"CREDIT_DAY_OVERDUE\":[\"sum\",\"mean\",\"max\"],     \n          \"DAYS_CREDIT_ENDDATE\":[\"max\",\"min\"],\n          \"DAYS_ENDDATE_FACT\":[\"max\",\"min\"],\n          \"AMT_CREDIT_MAX_OVERDUE\":[\"mean\",\"max\",\"min\"],\n          \"CNT_CREDIT_PROLONG\":[\"sum\",\"mean\",\"max\",\"min\"],\n          \"AMT_CREDIT_SUM\":[\"mean\",\"max\",\"min\"],            \n          \"AMT_CREDIT_SUM_DEBT\":[\"sum\",\"mean\",\"max\"],\n          \"AMT_CREDIT_SUM_LIMIT\":[\"sum\",\"mean\",\"max\"],\n          'AMT_CREDIT_SUM_OVERDUE':[\"sum\",\"mean\",\"max\"], \n          'DAYS_CREDIT_UPDATE':[\"max\",\"min\"],\n          'AMT_ANNUITY':[\"sum\",\"mean\"],\n          'MONTHS_BALANCE_COUNT':[\"sum\"], \n          'STATUS_0_SUM':[\"sum\"],         \n          'STATUS_0_MEAN':[\"mean\"], \n          'STATUS_C_SUM':[\"sum\"], \n          'STATUS_C_MEAN':[\"mean\"],\n          'CREDIT_ACTIVE_Active':[\"sum\",\"mean\"], \n          'CREDIT_ACTIVE_Closed':[\"sum\",\"mean\"], \n          'CREDIT_TYPE_Rare':[\"sum\",\"mean\"],      \n          'CREDIT_TYPE_Consumer credit':[\"sum\",\"mean\"], \n          'CREDIT_TYPE_Credit card':[\"sum\",\"mean\"],\n          \"NEW_MONTHS_CREDIT\":[\"count\",\"sum\",\"mean\",\"max\",\"min\"]}","e2536446":"bureau_and_bb_agg = bureau_and_bb.groupby(\"SK_ID_CURR\").agg(agg_list).reset_index()","ce60d7fe":"  bureau_and_bb_agg.columns = pd.Index([\"BB_\" + col[0] + \"_\" + col[1].upper() for col in bureau_and_bb_agg.columns.tolist()])","0f92c437":"#NEW FEATURES 3\nbureau_and_bb_agg[\"BB_NEW_AMT_CREDIT_SUM_RANGE\"] = bureau_and_bb_agg[\"BB_AMT_CREDIT_SUM_MAX\"] - bureau_and_bb_agg[\"BB_AMT_CREDIT_SUM_MIN\"]\n\nbureau_and_bb_agg[\"BB_NEW_DAYS_CREDIT_RANGE\"]= round((bureau_and_bb_agg[\"BB_DAYS_CREDIT_MAX\"] - bureau_and_bb_agg[\"BB_DAYS_CREDIT_MIN\"])\/(30 * bureau_and_bb_agg[\"BB_SK_ID_CURR_COUNT\"]))\n","357dc06c":"# Bureau: Active credits - using only numerical aggregations\n\nagg_list = { 'DAYS_CREDIT': ['min', 'max', 'mean', 'var'],\n            'DAYS_CREDIT_ENDDATE': ['min', 'max', 'mean'],\n            'DAYS_CREDIT_UPDATE': ['mean'],\n            'CREDIT_DAY_OVERDUE': ['max', 'mean'],\n            'AMT_CREDIT_MAX_OVERDUE': ['mean'],\n            'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n            'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n            'AMT_CREDIT_SUM_OVERDUE': ['mean'],\n            'AMT_CREDIT_SUM_LIMIT': ['mean', 'sum'],\n            'AMT_ANNUITY': ['max', 'mean'],\n            'CNT_CREDIT_PROLONG': ['sum'] }\n","19ed2dd7":"active = bureau_and_bb[bureau_and_bb['CREDIT_ACTIVE_Active'] == 1]\nactive_agg = active.groupby('SK_ID_CURR').agg(agg_list)\nactive_agg.columns = pd.Index(['BB_NEW_ACTIVE_' + e[0] + \"_\" + e[1].upper() for e in active_agg.columns.tolist()])\nbureau_and_bb_agg.rename(columns = {'BB_SK_ID_CURR_': 'SK_ID_CURR'}, inplace = True)\nbureau_and_bb_agg = bureau_and_bb_agg.join(active_agg, how='left', on='SK_ID_CURR')\n\n# Bureau: Closed credits - using only numerical aggregations\nclosed = bureau_and_bb[bureau_and_bb['CREDIT_ACTIVE_Closed'] == 1]\nclosed_agg = closed.groupby('SK_ID_CURR').agg(agg_list)\nclosed_agg.columns = pd.Index(['BB_NEW_CLOSED_' + e[0] + \"_\" + e[1].upper() for e in closed_agg.columns.tolist()])\nbureau_and_bb_agg = bureau_and_bb_agg.join(closed_agg, how='left', on='SK_ID_CURR')","8d4af63b":"ins = installments_payments","0a908bd6":"print(ins.dtypes)","23e98bd1":"ins.shape","120fa24b":"ins.head()","3b3fab7f":"\n  \nins['NEW_PAYMENT_DIFFERENCE'] =  ins['AMT_INSTALMENT'] -  ins['AMT_PAYMENT']\nins['NEW_PAYMENT_RATIO'] =  ins['AMT_INSTALMENT'] \/  ins['AMT_PAYMENT']\nins['NEW_PAID_OVER_AMOUNT'] =  ins['AMT_PAYMENT'] -  ins['AMT_INSTALMENT']\n\nins['NEW_DAYS_PAID_EARLIER'] = ins['DAYS_INSTALMENT']-ins['DAYS_ENTRY_PAYMENT']\nins['NEW_NUM_PAID_LATER'] = ins['NEW_DAYS_PAID_EARLIER'].map(lambda x: 1 if x<0 else 0)\n\nagg_list = {'NUM_INSTALMENT_VERSION':['nunique'],\n               'NUM_INSTALMENT_NUMBER':'max',\n               'DAYS_INSTALMENT':['min','max'],\n               'DAYS_ENTRY_PAYMENT':['min','max'],\n               'AMT_INSTALMENT':['min','max','sum','mean'],\n               'AMT_PAYMENT':['min','max','sum','mean'],\n               'NEW_DAYS_PAID_EARLIER':'mean',\n               'NEW_NUM_PAID_LATER':'sum'}\n\n\nins_agg = ins.groupby('SK_ID_PREV').agg(agg_list)","64471ddf":"ins['NEW_INSTALMENT_PAYMENT_RATIO'] = ins['AMT_PAYMENT'] \/ ins['AMT_INSTALMENT']\n","53379b0c":"ins['NEW_LATE_PAYMENT'] = ins['NEW_PAYMENT_DIFFERENCE'].apply(lambda x: 1 if x > 0 else 0)","de4678ea":"ins['NEW_LATE_PAYMENT_RATIO'] = ins.apply(lambda x: x['NEW_INSTALMENT_PAYMENT_RATIO'] if x['NEW_LATE_PAYMENT'] == 1 else 0, axis=1)","9fe8efa5":"ins['NEW_SIGNIFICANT_LATE_PAYMENT'] = ins['NEW_LATE_PAYMENT_RATIO'].apply(lambda x: 1 if x > 0.05 else 0)","e9a01cd1":"agg_list_previous_application = {}\n    \nfor col in ins_agg.columns:\n    agg_list_previous_application[col] = ['mean',\"min\",\"max\",\"sum\"]\n    \nins_agg.reset_index(inplace = True) \n    \n","e9ba2186":"pos = pos_cash_balance  ","85b91d18":"print(pos.dtypes)","685008b6":"pos.shape","34832693":"pos.head()","99eab8f7":" pos = pd.get_dummies(pos, columns=['NAME_CONTRACT_STATUS'], dummy_na = True)","444966f2":"agg_list = {'MONTHS_BALANCE':['min','max'],\n                                            'CNT_INSTALMENT':['min','max'],\n                                            'CNT_INSTALMENT_FUTURE':['min','max'],\n                                            'SK_DPD':['max','mean'],\n                                            'SK_DPD_DEF':['max','mean'],\n                                            'NAME_CONTRACT_STATUS_Active':'sum',\n                                            'NAME_CONTRACT_STATUS_Amortized debt':'sum',\n                                            'NAME_CONTRACT_STATUS_Approved':'sum',\n                                            'NAME_CONTRACT_STATUS_Canceled':'sum',\n                                            'NAME_CONTRACT_STATUS_Completed':'sum',\n                                            'NAME_CONTRACT_STATUS_Demand':'sum',\n                                            'NAME_CONTRACT_STATUS_Returned to the store':'sum',\n                                            'NAME_CONTRACT_STATUS_Signed':'sum',\n                                            'NAME_CONTRACT_STATUS_XNA':'sum',\n                                            'NAME_CONTRACT_STATUS_nan':'sum'\n                                          }\n\npos_agg = pos.groupby('SK_ID_PREV').agg(agg_list)","80109aec":"sort_pos = pos.sort_values(by=['SK_ID_PREV', 'MONTHS_BALANCE'])\ngp = sort_pos.groupby('SK_ID_PREV')\ndf = pd.DataFrame()\ndf['SK_ID_CURR'] = gp['SK_ID_CURR'].first()\ndf['MONTHS_BALANCE_MAX'] = gp['MONTHS_BALANCE'].max()","daa630a5":"df['NEW_POS_LOAN_COMPLETED_MEAN'] = gp['NAME_CONTRACT_STATUS_Completed'].mean()\ndf['NEW_POS_COMPLETED_BEFORE_MEAN'] = gp['CNT_INSTALMENT'].first() - gp['CNT_INSTALMENT'].last()\ndf['NEW_POS_COMPLETED_BEFORE_MEAN'] = df.apply(lambda x: 1 if x['NEW_POS_COMPLETED_BEFORE_MEAN'] > 0\n                                                and x['NEW_POS_LOAN_COMPLETED_MEAN'] > 0 else 0, axis=1)","3209e8c3":"df['NEW_POS_REMAINING_INSTALMENTS'] = gp['CNT_INSTALMENT_FUTURE'].last()\ndf['NEW_POS_REMAINING_INSTALMENTS_RATIO'] = gp['CNT_INSTALMENT_FUTURE'].last()\/gp['CNT_INSTALMENT'].last()","27007be7":"for col in pos_agg.columns:\n    agg_list_previous_application[col] = ['mean',\"min\",\"max\",\"sum\"]\n\npos_agg.reset_index(inplace = True)   ","8c257ecd":"ccb = credit_card_balance   ","263a2580":"print(ccb.dtypes)","1ce1e0ae":"ccb = pd.get_dummies(ccb, columns= ['NAME_CONTRACT_STATUS'] )","4f4a6494":"ccb['NEW_LIMIT_USE'] = ccb['AMT_BALANCE'] \/ ccb['AMT_CREDIT_LIMIT_ACTUAL']\nccb['NEW_PAYMENT_DIV_MIN'] = ccb['AMT_PAYMENT_CURRENT'] \/ ccb['AMT_INST_MIN_REGULARITY']","02896c93":"ccb['NEW_LATE_PAYMENT'] = ccb['SK_DPD'].apply(lambda x: 1 if x > 0 else 0)","c36704d7":"ccb['NEW_DRAWING_LIMIT_RATIO'] = ccb['AMT_DRAWINGS_ATM_CURRENT'] \/ ccb['AMT_CREDIT_LIMIT_ACTUAL']","f31cc7b8":"df_prev = previous_application ","d2b0b581":"print(df_prev.dtypes)","929b8c6f":"df_prev.shape\n ","54eab661":"df_prev.head()","617ce364":"df_prev[\"WEEKDAY_APPR_PROCESS_START\"] = df_prev[\"WEEKDAY_APPR_PROCESS_START\"].replace(['MONDAY','TUESDAY', 'WEDNESDAY','THURSDAY','FRIDAY'], 'WEEK_DAY')\ndf_prev[\"WEEKDAY_APPR_PROCESS_START\"] = df_prev[\"WEEKDAY_APPR_PROCESS_START\"].replace(['SATURDAY', 'SUNDAY'], 'WEEKEND')\n\na = [8,9,10,11,12,13,14,15,16,17]\ndf_prev[\"HOUR_APPR_PROCESS_START\"] = df_prev[\"HOUR_APPR_PROCESS_START\"].replace(a, 'working_hours')\n\nb = [18,19,20,21,22,23,0,1,2,3,4,5,6,7]\ndf_prev[\"HOUR_APPR_PROCESS_START\"] = df_prev[\"HOUR_APPR_PROCESS_START\"].replace(b, 'off_hours')","3e0e40aa":"df_prev.head()","588570b7":"df_prev[\"NAME_TYPE_SUITE\"] = df_prev[\"NAME_TYPE_SUITE\"].replace('Unaccompanied', 'alone')\n\nb = ['Family', 'Spouse, partner', 'Children', 'Other_B', 'Other_A', 'Group of people']\ndf_prev[\"NAME_TYPE_SUITE\"] = df_prev[\"NAME_TYPE_SUITE\"].replace(b, 'not_alone')","2060ddc7":"a = ['Auto Accessories', 'Jewelry', 'Homewares', 'Medical Supplies', 'Vehicles', 'Sport and Leisure', \n         'Gardening', 'Other', 'Office Appliances', 'Tourism', 'Medicine', 'Direct Sales', 'Fitness', 'Additional Service', \n         'Education', 'Weapon', 'Insurance', 'House Construction', 'Animals'] \ndf_prev[\"NAME_GOODS_CATEGORY\"] = df_prev[\"NAME_GOODS_CATEGORY\"].replace(a, 'others')\n","6e1d031d":"a = ['Auto technology', 'Jewelry', 'MLM partners', 'Tourism'] \ndf_prev[\"NAME_SELLER_INDUSTRY\"] = df_prev[\"NAME_SELLER_INDUSTRY\"].replace(a, 'others')\n    \ndf_prev[\"LOAN_RATE\"] = df_prev.AMT_APPLICATION\/df_prev.AMT_CREDIT\n","32e834b5":"df_prev = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')","f2da3af0":"#NEW FEATURES \n\ndf_prev[\"NEW_LOAN_RATE\"] = df_prev.AMT_APPLICATION\/df_prev.AMT_CREDIT\n\n\ndf_prev[(df_prev['AMT_CREDIT'] == 0) | (df_prev['AMT_GOODS_PRICE'] == 0)]['NEW_INSURANCE'] = np.nan\ndf_prev['sigorta_miktari'] = df_prev['AMT_CREDIT'] - df_prev['AMT_GOODS_PRICE']\ndf_prev[\"NEW_INSURANCE\"] = df_prev['sigorta_miktari'].apply(lambda x: 1 if x > 0 else (0 if x <= 0 else np.nan))\ndf_prev.drop('sigorta_miktari', axis=1, inplace=True)\n\nk = df_prev.DAYS_LAST_DUE_1ST_VERSION - df_prev.DAYS_LAST_DUE\ndf_prev[\"NEW_CHURN_PREV\"] = [1 if i >= 0 else (0 if i < 0  else \"NaN\") for i in k]\n\ndf_prev[(df_prev['AMT_CREDIT'] == 0) | (df_prev['AMT_GOODS_PRICE'] == 0)]['NEW_INSURANCE'] = np.nan\ndf_prev['sigorta_miktari'] = df_prev['AMT_CREDIT'] - df_prev['AMT_GOODS_PRICE']\ndf_prev[\"NEW_INSURANCE\"] = df_prev['sigorta_miktari'].apply(lambda x: 1 if x > 0 else (0 if x <= 0 else np.nan))\ndf_prev.drop('sigorta_miktari', axis=1, inplace=True)","97683c79":"drop_list = ['AMT_DOWN_PAYMENT', 'SELLERPLACE_AREA', 'CNT_PAYMENT', 'PRODUCT_COMBINATION', 'DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE',\n                'DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE','DAYS_TERMINATION','NFLAG_INSURED_ON_APPROVAL']\ndf_prev.drop(drop_list, axis = 1, inplace = True)","83b25745":"def previous_application(agg_list_previous_application):\n\n    prev_agg_list = {\"SK_ID_CURR\":[\"count\"], \n                \"AMT_ANNUITY\":[\"max\"],\n                \"AMT_APPLICATION\":[\"min\",\"mean\",\"max\"],\n                \"AMT_CREDIT\":[\"max\"], \n                \"AMT_GOODS_PRICE\":[\"sum\", \"mean\"],\n                \"NFLAG_LAST_APPL_IN_DAY\":[\"sum\",\"mean\"], \n                \"RATE_DOWN_PAYMENT\":[\"sum\", \"mean\"],\n                \"RATE_INTEREST_PRIMARY\":[\"sum\", \"mean\"],\n                \"RATE_INTEREST_PRIVILEGED\":[\"sum\", \"mean\"],\n                \"DAYS_DECISION\":[\"sum\"],\n                \"NEW_LOAN_RATE\":[\"sum\", \"mean\", \"min\", \"max\"],\n                \"NEW_INSURANCE\":[\"sum\", \"mean\"],\n                #\"INTEREST_RATE\":[\"sum\", \"mean\", \"min\", \"max\"],\n                \"NAME_CONTRACT_TYPE_Cash loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Consumer loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Revolving loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEKEND\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEK_DAY\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_off_hours\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_working_hours\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_N\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_Y\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Building a house or an annex\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Business development\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a garage\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a holiday home \/ land\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a home\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a new car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a used car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Car repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Education\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Everyday expenses\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Gasification \/ water supply\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Hobby\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Journey\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Medicine\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Money for a third person\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Other\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Payments on other loans\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Purchase of electronic equipment\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Refusal to name the goal\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Urgent needs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Wedding \/ gift \/ holiday\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XAP\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Approved\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Canceled\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Refused\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Unused offer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cash through the bank\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cashless from the account of the employer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Non-cash from your account\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_CLIENT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_HC\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_LIMIT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCO\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCOFR\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SYSTEM\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_VERIF\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XAP\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XNA\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_alone\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_not_alone\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_New\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Refreshed\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Repeater\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Audio\/Video\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Clothing and Accessories\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Computers\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Construction Materials\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Consumer Electronics\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Mobile\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Photo \/ Cinema Equipment\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_others\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cards\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cars\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cash\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_POS\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_walk-in\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_x-sell\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_AP+ (Cash loan)\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Car dealer\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Channel of corporate sales\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Contact center\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Country-wide\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Credit and cash offices\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Regional \/ Local\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Stone\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Clothing\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Connectivity\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Construction\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Consumer electronics\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Industry\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_XNA\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_others\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_XNA\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_high\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_action\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_normal\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_middle\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_0\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_1\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_NaN\":[\"sum\", \"mean\"]}\n\n    prev_agg_list.update(agg_list_previous_application)\n    \n    \n    return prev_agg_list, df_prev\n    ","0f5c28b8":"def pre_processing_and_combine():\n\n    \n    with timer(\"Process application train\"):\n        df = application_train()\n        print(\"application train & test shape:\", df.shape)\n        \n    \n    with timer(\"Bureau and Bureau Balance\"):\n        bureau_and_bb_agg = bureau_bb()\n        print(\"Bureau and Bureau Balance:\", bureau_and_bb_agg.shape)\n        \n    with timer(\"Installment Payments\"):\n        agg_list_previous_application, ins_agg = installments_payments()\n        print(\"Installment Payments:\", ins_agg.shape)    \n    \n    with timer(\"Pos Cash Balance\"):\n        agg_list_previous_application, pos_agg = pos_cash_balance(agg_list_previous_application)\n        print(\"Pos Cash Balance:\", pos_agg.shape)  \n        \n    \n    with timer(\"Credit Card Balance\"):\n        ccb_agg = credit_card_balance()\n        print(\"Credit Card Balance:\", ccb_agg.shape) \n    \n    with timer(\"previous_application\"):\n        prev_agg_list, df_prev = previous_application(agg_list_previous_application)\n        print(\"previous_application:\", df_prev.shape) \n        \n        \n    with timer(\"All tables are combining\"):\n        df_prev_ins = df_prev.merge(ins_agg, how = 'left', on = 'SK_ID_PREV')\n        df_prev_ins_pos = df_prev_ins.merge(pos_agg, how = 'left', on = 'SK_ID_PREV')\n        df_prev_ins_pos_agg = df_prev_ins_pos.groupby(\"SK_ID_CURR\").agg(prev_agg_list).reset_index()\n        df_prev_ins_pos_agg.columns = pd.Index([\"PREV_\" + col[0] + \"_\" + col[1].upper() for col in df_prev_ins_pos_agg.columns.tolist()])\n        df_prev_ins_pos_agg.rename(columns={\"PREV_SK_ID_CURR_\":\"SK_ID_CURR\"}, inplace = True)\n        #prev_son ile ana tablo\n        df_prev_others = df.merge(df_prev_ins_pos_agg, how = 'left',on = 'SK_ID_CURR')\n    \n        #credit_card_balance\n        df_prev_ins_pos_ccb = df_prev_others.merge(CCB_agg, how = 'left',on = 'SK_ID_CURR')\n    \n        #bureau_balance\n        all_data = df_prev_ins_pos_ccb.merge(bureau_and_bb_agg, how = 'left',on = 'SK_ID_CURR')\n        \n        print(\"all_data process:\", all_data.shape) \n\n    \n    \n    return all_data\n    ","715e72ec":"sample_submission  = pd.read_csv(\"..\/input\/home-credit-default-risk\/sample_submission.csv\")","d55a57a4":"def modeling(all_data):\n    \n    all_data.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in all_data.columns]\n    \n    train_df = all_data[all_data['TARGET'].notnull()]\n    test_df = all_data[all_data['TARGET'].isnull()]\n\n    folds = KFold(n_splits = 10, shuffle = True, random_state = 1001)\n\n    oof_preds = np.zeros(train_df.shape[0])\n    sub_preds = np.zeros(test_df.shape[0])\n    feature_importance_df = pd.DataFrame()\n\n    feats = [f for f in train_df.columns if f not in ['TARGET','SK_ID_CURR']]\n\n    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['TARGET'])):\n\n        train_x, train_y = train_df[feats].iloc[train_idx], train_df['TARGET'].iloc[train_idx]\n\n        valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['TARGET'].iloc[valid_idx]\n\n        clf = LGBMClassifier(\n                n_jobs = -1,\n                n_estimators=10000,\n                learning_rate=0.02,\n                num_leaves=34,\n                colsample_bytree=0.9497036,\n                subsample=0.8715623,\n                max_depth=8,\n                reg_alpha=0.041545473,\n                reg_lambda=0.0735294,\n                min_split_gain=0.0222415,\n                min_child_weight=39.3259775,\n                silent=-1,\n                verbose=-1, )\n\n        clf.fit(train_x, train_y, eval_set = [(train_x, train_y), (valid_x, valid_y)], \n                eval_metric = 'auc', verbose = 200, early_stopping_rounds = 200)\n\n        #y_pred_valid\n        oof_preds[valid_idx] = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]\n        sub_preds += clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] \/ folds.n_splits\n\n        fold_importance_df = pd.DataFrame()\n        fold_importance_df[\"feature\"] = feats\n        fold_importance_df[\"importance\"] = clf.feature_importances_\n        fold_importance_df[\"fold\"] = n_fold + 1\n        feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n\n\n        print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(valid_y, oof_preds[valid_idx]))) \n\n\n    print('Full AUC score %.6f' % roc_auc_score(train_df['TARGET'], oof_preds)) #y_pred_valid   \n\n    test_df['TARGET'] = sub_preds\n    test_df[['SK_ID_CURR', 'TARGET']].to_csv(\"submission_lightgbm.csv\", index= False)\n\n    display_importances(feature_importance_df)\n    \n    return feature_importance_df\n","07461771":"def main():\n    \n    with timer(\"Preprocessing Time\"):\n        all_data = pre_processing_and_combine()\n    \n    with timer(\"Modeling\"):\n        feat_importance = modeling(all_data)","92d298d7":"if __name__ == \"__main__\":\n    with timer(\"Full model run\"):\n        main()","7a2d1749":"# application_train","ccc9ceed":"# model tunig","6643ecda":"2.Importing Data","6671225d":"# **DESCRIPTION**","e4de7e85":"# ","226aac37":"application_{train|test}.csv\n\nThis is the main table, broken into two files for Train (with TARGET) and Test (without TARGET).\nStatic data for all applications. One row represents one loan in our data sample.\nbureau.csv\n\nAll client's previous credits provided by other financial institutions that were reported to Credit Bureau (for clients who have a loan in our sample).\nFor every loan in our sample, there are as many rows as number of credits the client had in Credit Bureau before the application date.\nbureau_balance.csv\n\nMonthly balances of previous credits in Credit Bureau.\nThis table has one row for each month of history of every previous credit reported to Credit Bureau \u2013 i.e the table has (#loans in sample * # of relative previous credits * # of months where we have some history observable for the previous credits) rows.\nPOS_CASH_balance.csv\n\nMonthly balance snapshots of previous POS (point of sales) and cash loans that the applicant had with Home Credit.\nThis table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample \u2013 i.e. the table has (#loans in sample * # of relative previous credits * # of months in which we have some history observable for the previous credits) rows.\ncredit_card_balance.csv\n\nMonthly balance snapshots of previous credit cards that the applicant has with Home Credit.\nThis table has one row for each month of history of every previous credit in Home Credit (consumer credit and cash loans) related to loans in our sample \u2013 i.e. the table has (#loans in sample * # of relative previous credit cards * # of months where we have some history observable for the previous credit card) rows.\nprevious_application.csv\n\nAll previous applications for Home Credit loans of clients who have loans in our sample.\nThere is one row for each previous application related to loans in our data sample.\ninstallments_payments.csv\n\nRepayment history for the previously disbursed credits in Home Credit related to the loans in our sample.\nThere is a) one row for every payment that was made plus b) one row each for missed payment.\nOne row is equivalent to one payment of one installment OR one installment corresponding to one payment of one previous Home Credit credit related to loans in our sample.\nHomeCredit_columns_description.csv\n\nThis file contains descriptions for the columns in the various data files.","c70cae25":"# bureau & bureau_balance","512b0389":"3.Data Dimensions","8c3d57b6":"1. IMPORTING LIBRARIES","b44c9563":"# credit_card_balance","d4418a01":"# previous_application","5a5d448c":"# Combine","8c3cca5a":"# installments_payments","cd30723d":"* # Data Description","83a12bce":"Many people struggle to get loans due to insufficient or non-existent credit histories. And, unfortunately, this population is often taken advantage of by untrustworthy lenders.\n\nHome Credit strives to broaden financial inclusion for the unbanked population by providing a positive and safe borrowing experience. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a variety of alternative data--including telco and transactional information--to predict their clients' repayment abilities.\n\nWhile Home Credit is currently using various statistical and machine learning methods to make these predictions, they're challenging Kagglers to help them unlock the full potential of their data. Doing so will ensure that clients capable of repayment are not rejected and that loans are given with a principal, maturity, and repayment calendar that will empower their clients to be successful.","3d827593":"# pos_cash_balance"}}