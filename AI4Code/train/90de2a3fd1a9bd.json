{"cell_type":{"49f701c7":"code","37832548":"code","0209d4bc":"code","db53f00a":"code","9a2f16df":"code","d2f3daaf":"code","8842f89e":"code","f8b82c1d":"code","56535ab4":"code","c84e5341":"code","0458feb3":"code","162a74d7":"code","71c1d334":"code","3c2f687e":"code","4f228ff2":"markdown"},"source":{"49f701c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# To plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37832548":"import tensorflow as tf\nfrom tensorflow import keras\n\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","0209d4bc":"X_train_full = train[train.columns[1:]]\ny_train_full = train[train.columns[0]]\n\nX_valid, X_train = X_train_full[:5000] \/ 255., X_train_full[5000:] \/ 255.\ny_valid, y_train = y_train_full[:5000], y_train_full[5000:]\nX_test = test \/ 255.","db53f00a":"# X_train[0:1].values[0].reshape(28,28)","9a2f16df":"plt.imshow(X_train[0:1].values[0].reshape(28,28), cmap=\"binary\")\nplt.axis('off')\nplt.show()","d2f3daaf":"model = keras.models.Sequential()\nmodel.add(keras.layers.Flatten(input_shape=[28, 28]))\nmodel.add(keras.layers.Dense(300, activation=\"relu\"))\nmodel.add(keras.layers.Dense(100, activation=\"relu\"))\nmodel.add(keras.layers.Dense(10, activation=\"softmax\"))\nkeras.backend.clear_session()\nnp.random.seed(42)\ntf.random.set_seed(42)","8842f89e":"keras.utils.plot_model(model, \"my_fashion_mnist_model.png\", show_shapes=True)","f8b82c1d":"model.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=\"sgd\",\n              metrics=[\"accuracy\"])","56535ab4":"history = model.fit(X_train, y_train, epochs=50,\n                    validation_data=(X_valid, y_valid))","c84e5341":"model.save(\"simple_keras_model.h5\")\n# Epoch 30\/30\n# 1157\/1157 [==============================] - 4s 3ms\/step - loss: 0.0390 - accuracy: 0.9907 - val_loss: 0.0906 - val_accuracy: 0.9728","0458feb3":"model = keras.models.load_model(\"simple_keras_model.h5\")\n","162a74d7":"X_new = X_test[:1]\n\nplt.imshow(X_new[0:1].values[0].reshape(28,28), cmap=\"binary\")\n# plt.imshow(X_test[0:1].values[0].reshape(28,28), cmap=\"binary\")\nplt.axis('off')\nplt.show()\ny_proba = model.predict(X_test)\n\ny_proba.round(2)\n","71c1d334":"y_proba = model.predict(X_test)\n#y_proba.argmax(axis=1)\nsubmission = pd.DataFrame({'ImageId': range(1, len(y_proba) + 1), 'Label': y_proba.argmax(axis=1)})\n#submission\nsubmission.to_csv('submission.csv', index=False)","3c2f687e":"X_test","4f228ff2":"Helpful link:\n\nhttps:\/\/colab.research.google.com\/github\/ageron\/handson-ml2\/blob\/master\/10_neural_nets_with_keras.ipynb#scrollTo=gRN4T-Ta5wLK"}}