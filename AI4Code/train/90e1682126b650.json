{"cell_type":{"fa0a79ad":"code","492b2a73":"code","f872c17c":"code","9427a4b1":"code","d3ed30b5":"code","08484d1a":"code","85f52fa4":"code","34e677d9":"code","f8821fa6":"code","c5e8c70d":"code","10f60c08":"code","5228afd9":"code","27d10901":"code","b263a0bb":"code","1255357f":"code","b8ac2c4f":"code","72c41266":"code","2d0343b8":"code","9c8f6cd3":"code","4de911c8":"code","1002b779":"code","e6df9024":"code","64fd23ee":"code","841e1e96":"code","47999884":"code","a1518e59":"code","d931f0e9":"code","30a9a836":"code","c2408456":"code","d8d3f9fe":"code","f9ea99c0":"code","37279acf":"code","4ba1cc5c":"code","43484d16":"code","b6547028":"code","e726ce3b":"code","c39ef1b1":"code","d26aafa9":"code","e368c7a7":"code","c213bdbd":"markdown","7aed9d0f":"markdown","db4cb559":"markdown","27cfa938":"markdown"},"source":{"fa0a79ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","492b2a73":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n","f872c17c":"train_df.head()","9427a4b1":"test_df.head()","d3ed30b5":"train_df.info()","08484d1a":"test_df.info()","85f52fa4":"train_df['Survived'].unique()","34e677d9":"train_df['Survived'].value_counts(normalize=True) * 100","f8821fa6":"survival_perc = train_df['Survived'].value_counts(normalize=True) * 100\nsurvival_perc.plot(kind='bar')\n\nplt.ylabel('Percentage of Survival')\nplt.ylim(0, 65)\nplt.show()","c5e8c70d":"train_df['Pclass'].unique()","10f60c08":"train_df['Sex'].unique()\n","5228afd9":"def name_to_title(name) :\n    if \"Mr.\" in name:\n        return \"Mr\"\n    elif \"Mrs.\" in name:\n        return \"Mrs\"\n    elif \"Master\" in name:\n        return \"Master\"\n    elif \"Miss\" in name:\n        return \"Miss\"\n    else :\n        return \"Highness\"\n\nname_df = train_df[['Name', 'Survived']]\nname_df['Title'] = name_df['Name'].apply(name_to_title)\nname_df = name_df.drop('Name', axis=1)\n\nname_df.groupby(['Title']).mean().plot(kind='bar')\nplt.show()","27d10901":"train_df['Age'].describe()","b263a0bb":"train_df['Age'].isnull().sum()","1255357f":"print(train_df['Age'].mean())\n\nplt.hist(train_df['Age'])\nplt.show()","b8ac2c4f":"name_df = train_df[['Name', 'Survived', 'Age']]\nname_df['Title'] = name_df['Name'].apply(name_to_title)\n\nmean_adult_male_age = round(name_df[name_df['Title'] == 'Mr']['Age'].mean(), 2)\nmean_adult_female_age = round(name_df[name_df['Title'] == 'Mrs']['Age'].mean(), 2)\nmean_young_female_age = round(name_df[name_df['Title'] == 'Miss']['Age'].mean(), 2)\nmean_young_male_age = round(name_df[name_df['Title'] == 'Master']['Age'].mean(), 2)\n\n# TODO: row mapper for null values\ndef missing_age_mapper(row) :\n    if np.isnan(row['Age']):\n        if row['Title'] == 'Mr':\n            return (mean_adult_male_age)\n        elif row['Title'] == 'Mrs':\n            return (mean_adult_female_age)\n        elif row['Title'] == 'Miss':\n            return (mean_young_female_age)\n        else:\n            return (mean_young_male_age)\n    else:\n        return row['Age']\n    \nname_df['Age'] = name_df.apply(missing_age_mapper, axis=1)\n\nplt.hist(train_df['Age'])\nplt.show()","72c41266":"test_age = train_df[['Survived', 'Age']]\ndead_age = test_age[test_age['Survived'] == 0]\nsurvived_age = test_age[test_age['Survived'] == 1]\n\nplt.subplot(1, 2, 1)\nplt.hist(dead_age['Age'])\n\nplt.subplot(1, 2, 2)\nplt.hist(survived_age['Age'])\n\nplt.show()\n","2d0343b8":"test_df = train_df[['Survived', 'Embarked']]\ngrouped_by_sx_em = test_df.groupby(['Embarked']).mean()\n\ngrouped_by_sx_em","9c8f6cd3":"grouped_by_sx_em.plot(kind='bar')\nplt.show()","4de911c8":"mean_srv_pclass = train_df[['Survived', 'Pclass']].groupby('Pclass').mean()\nmean_srv_pclass.plot(kind='bar')","1002b779":"train_df[['Survived', 'Cabin']].info()\n\n","e6df9024":"train_df[['Survived', 'Ticket']].info()","64fd23ee":"train_df[['Survived', 'Ticket']].head()","841e1e96":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n","47999884":"train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)\n","a1518e59":"train_df.info()\n","d931f0e9":"test_df.info()\n","30a9a836":"def name_to_title(name) :\n    if \"Mr.\" in name:\n        return 1\n    elif \"Mrs.\" in name:\n        return 2\n    elif \"Master\" in name:\n        return 3\n    elif \"Miss\" in name:\n        return 4\n    else :\n        return 5\n\ntrain_df['Title'] = train_df['Name'].apply(name_to_title)\ntest_df['Title'] = test_df['Name'].apply(name_to_title)\n\nmean_adult_male_age = round(name_df[train_df['Title'] == 1]['Age'].mean(), 2)\nmean_adult_female_age = round(name_df[train_df['Title'] == 2]['Age'].mean(), 2)\nmean_young_female_age = round(name_df[train_df['Title'] == 3]['Age'].mean(), 2)\nmean_young_male_age = round(name_df[train_df['Title'] == 4]['Age'].mean(), 2)\n\n# TODO: row mapper for null values\ndef missing_age_mapper(row) :\n    if np.isnan(row['Age']):\n        if row['Title'] == 1:\n            return (mean_adult_male_age)\n        elif row['Title'] == 2:\n            return (mean_adult_female_age)\n        elif row['Title'] == 3:\n            return (mean_young_female_age)\n        else:\n            return (mean_young_male_age)\n    else:\n        return row['Age']\n    \ntrain_df['Age'] = train_df.apply(missing_age_mapper, axis=1)\ntest_df['Age'] = test_df.apply(missing_age_mapper, axis=1)\n","c2408456":"train_df['Embarked'] = train_df['Embarked'].fillna(method='ffill')\n\ntrain_df.head()","d8d3f9fe":"train_df = train_df.drop(['Name', 'PassengerId', 'SibSp', 'Parch'], axis=1)\ntest_df = test_df.drop(['Name', 'SibSp', 'Parch'], axis=1)\n\n","f9ea99c0":"# train_df['Pclass'].unique()","37279acf":"train_df.info()","4ba1cc5c":"test_df = test_df.fillna(method='ffill')","43484d16":"test_df.info()","b6547028":"train_df['Title'].unique()","e726ce3b":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\n# make TensorFlow less verbose\ntf.logging.set_verbosity(tf.logging.ERROR)\n\n# read the dataset\ntrain_data = train_df\ntest_data = test_df\n\n# drop unused columns\n","c39ef1b1":"# sample 80% for train data\ntrain_set = train_data.sample(frac=0.8, replace=False, random_state=42)\n# the other 20% is reserved for cross validation\ncv_set = train_data.loc[ set(train_data.index) - set(train_set.index)]\n\n# define features\nsex_feature = tf.feature_column.categorical_column_with_vocabulary_list(\n    'Sex', ['female','male']\n)\n\npclass_feature = tf.feature_column.categorical_column_with_vocabulary_list(\n    'Pclass', [1, 2, 3]\n)\n\nembarked_feature = tf.feature_column.categorical_column_with_vocabulary_list(\n    'Embarked', ['S', 'C', 'Q']\n)\n\ntitle_feature = tf.feature_column.categorical_column_with_vocabulary_list(\n    'Title', [1, 2, 4, 3, 5]\n)\n\n\nfeature_columns = [ \n    tf.feature_column.indicator_column(sex_feature),\n    tf.feature_column.indicator_column(pclass_feature),\n    tf.feature_column.indicator_column(embarked_feature),\n    tf.feature_column.indicator_column(title_feature)\n]\n\nn_batches = 1\nestimator = tf.estimator.BoostedTreesClassifier(feature_columns,n_batches_per_layer=n_batches)\n\n# train input function\ntrain_input_fn = tf.estimator.inputs.pandas_input_fn(\n      x=train_set.drop('Survived', axis=1),\n      y=train_set.Survived,\n      num_epochs=None, # for training, use as many epochs as necessary\n      shuffle=True,\n      target_column='target',\n)\n\ncv_input_fn = tf.estimator.inputs.pandas_input_fn(\n      x=cv_set.drop('Survived', axis=1),\n      y=cv_set.Survived,\n      num_epochs=1, # only to score\n      shuffle=False\n)\n","d26aafa9":"\n\nestimator.train(input_fn=train_input_fn, steps=50)\n\nscores = estimator.evaluate(input_fn=cv_input_fn)\nprint(\"\\nTest Accuracy: {0:f}\\n\".format(scores['accuracy']))","e368c7a7":"\n\ntest_input_fn = tf.estimator.inputs.pandas_input_fn(\n      x=test_data,\n      num_epochs=1, # only to predict\n      shuffle=False \n)\n\npredictions = list(estimator.predict(input_fn=test_input_fn))\npredicted_classes = [prediction['class_ids'][0] for prediction in predictions]\nevaluation = test_data['PassengerId'].copy().to_frame()\nevaluation[\"Survived\"] = predicted_classes\nevaluation.to_csv(\"evaluation_submission.csv\", index=False)\n\nevaluation.head()\n\n","c213bdbd":"### Processing","7aed9d0f":"### Prediction","db4cb559":"### Observations\n\n- Gender and Age has a high correlation to the survival rate.\n- We can extract title from Names column\n- Ticket and Cabin columns do not have any correlation to survival rate\n- We can fill in empty Age data from mean of each title\n- We can improve performance by changing data types of some columns","27cfa938":"## Work on analysis and cleaning"}}