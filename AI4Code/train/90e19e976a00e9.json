{"cell_type":{"d5bbd8d9":"code","a8f1e0c9":"code","3722abf4":"code","bcc25a11":"code","5dd153ea":"code","fbbb388c":"code","1345a4b4":"code","743591e7":"code","8483cea5":"code","e97d5b01":"code","8b3760aa":"code","ddd5b2f5":"code","2e0f0083":"code","01daa4e0":"markdown","8033fcd4":"markdown","3048e07e":"markdown","a16699da":"markdown","a910a488":"markdown","eaa3cbe7":"markdown","c7ce8e65":"markdown","743b8382":"markdown","19371991":"markdown","a48a6d60":"markdown","23b0f1e4":"markdown","6958264f":"markdown","f7a2373c":"markdown","ab5325b1":"markdown"},"source":{"d5bbd8d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport math\nimport datetime\nfrom collections import Counter\nfrom collections import OrderedDict\n\nwarnings.filterwarnings('ignore')\nsns.set_palette('Set2')\nsns.set_style('darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8f1e0c9":"df = pd.read_csv(\"\/kaggle\/input\/7k-indian-famous-women\/data.csv\")\nprint (df.shape)\ndf.head()","3722abf4":"df_NA = pd.DataFrame(data=[df.isna().sum().tolist(), [\"{:.2f}\".format(i)+'%' for i in (df.isna().sum()\/df.shape[0]*100).tolist()]], \n            columns=df.columns, index=['NA Count', 'NA Percent']).transpose()\ndf_NA.style.background_gradient(cmap=\"summer\", subset=['NA Count'])","bcc25a11":"df.drop(columns = ['Education Place', 'Native Language', 'Father', 'Mother', 'Spouse'], inplace=True)","5dd153ea":"df['Birth Date'] = pd.to_datetime(df['Birth Date'], errors = 'coerce')\ndf['Death Date'] = pd.to_datetime(df['Death Date'], errors = 'coerce')\ndf['Age'] = np.where(df['Death Date'].isna(),datetime.datetime.now().date() - df['Birth Date'].dt.date, df['Death Date'].dt.date - df['Birth Date'].dt.date)\ndf['Age'] = round(df['Age']\/np.timedelta64(1, 'Y'))","fbbb388c":"plt.rcParams['font.size'] = 12\nplt.figure(figsize=(14,8))\nsns.countplot(y='Job', data=df, order=df['Job'].value_counts().index[:20])\nplt.xlabel('Number of Women', weight='bold', fontsize=16)\nplt.ylabel('Job', weight='bold', fontsize=16)\nplt.show()","1345a4b4":"dict_ = Counter(df['Description'].value_counts().to_dict())\ndict_ = dict(dict_.most_common(5))\n\nplt.figure(figsize=(8,8))\nplt.pie(x=dict_.values(), labels=dict_.keys(), autopct='%1.1f%%', shadow=True, startangle=90)\nplt.show()","743591e7":"plt.rcParams['font.size'] = 12\nplt.figure(figsize=(14,8))\nsns.countplot(y='Country', data=df, order=df['Country'].value_counts().index[:20])\nplt.xlabel('Number of Women', weight='bold', fontsize=16)\nplt.ylabel('Country', weight='bold', fontsize=16)\nplt.xscale('log')\nplt.show()","8483cea5":"dict_ = df['Birth Date'].dt.year.value_counts().to_dict()\ndict_ = dict(OrderedDict(sorted(dict_.items())))\n\nplt.figure(figsize=(20,8))\nplt.bar(dict_.keys(), dict_.values())\nplt.xlabel('Year', weight='bold', fontsize=16)\nplt.ylabel('Number of Women', weight='bold', fontsize=16)\nplt.show()","e97d5b01":"dict_ = Counter(df['Birth Date'].dt.year.value_counts().to_dict())\ndict_ = dict(dict_.most_common(10))\n\nplt.figure(figsize=(8,8))\nplt.pie(x=dict_.values(), labels=dict_.keys(), autopct='%1.1f%%', shadow=True, startangle=90)\nplt.show()","8b3760aa":"plt.figure(figsize=(14,6))\nsns.boxplot(y='Age', x='Job', data=df, order=df['Job'].value_counts().index[:15], palette=\"Set2\")\nplt.xticks(rotation=90)\nplt.xlabel(\"Job\", weight='bold', fontsize=16)\nplt.ylabel(\"Age\", weight='bold', fontsize=16)\nplt.show()","ddd5b2f5":"df_temp = df[~df['Death Date'].isna()].reset_index(drop=True)\nplt.rcParams['font.size'] = 12\nplt.figure(figsize=(14,6))\nsns.countplot(x='Death Method', data=df_temp, order=df_temp['Death Method'].value_counts().index[:4])\nplt.ylabel('Number of Women', weight='bold', fontsize=16)\nplt.xlabel('Death Method', weight='bold', fontsize=16)\nplt.show()","2e0f0083":"plt.figure(figsize=(14,6))\nsns.boxplot(y='Age', x='Death Method', data=df, order=df['Death Method'].value_counts().index[:4], palette=\"Set2\")\nplt.ylabel('Age', weight='bold', fontsize=16)\nplt.xlabel('Death Method', weight='bold', fontsize=16)\nplt.show()","01daa4e0":"## **Load the Dataset**","8033fcd4":"## **Create a new feature - AGE** ","3048e07e":"## **NA values in each column**","a16699da":"## **Deceased Women and their Cause of Death**","a910a488":"## **Women with different Job Description**","eaa3cbe7":"## **Drop the irrelevant columns with high NA %**","c7ce8e65":"## **Women born across different timelines**","743b8382":"# **EDA**","19371991":"## **Age of Deceased Women with their cause of Death**","a48a6d60":"## **Women in differnt Job Roles**","23b0f1e4":"# **Feel free to <span style=\"color:red\"> Upvote <\/span> and give <span style=\"color:blue\"> Feedback<\/span>**","6958264f":"# **Famous Indian Women**","f7a2373c":"## **Women born in different Countries**","ab5325b1":"## **Age of Women across different Job Roles**"}}