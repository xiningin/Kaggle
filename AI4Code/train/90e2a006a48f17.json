{"cell_type":{"95ec5c21":"code","7ef3d61a":"code","e874a491":"code","439ba0b7":"code","41b917e3":"code","090c0ed2":"code","5db90eb5":"code","1805ebe5":"code","c586deef":"code","44a371b8":"code","62e96640":"code","a54d8d1d":"code","74da084b":"code","4adbf5a0":"code","e320ec06":"code","a3615b1a":"code","9f48c45a":"code","5f15e96a":"code","55957f1d":"code","8f5da1bf":"code","70f9c43a":"code","ac210bb9":"code","bd0b651a":"code","51dcc29b":"code","92b1cb6e":"code","4256b3b6":"code","c126b41e":"code","0d69465a":"code","faabc6a9":"code","e01e4b9e":"markdown","a07a9145":"markdown","0fbf8812":"markdown","1da2682d":"markdown","efbb7b08":"markdown"},"source":{"95ec5c21":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ef3d61a":"RTEC_HYD_6OCT_RTEC = pd.read_csv(\"..\/input\/rtec-hyd-6oct-rtec-new\/RTEC_HYD_6OCT_RTEC_new.csv\")\n# pd.set_option('display.max_columns',None)\n# RTEC_HYD_6OCT_RTEC.head()\n","e874a491":"def SOR_volume_percent(input_file,period_start_month,period_end_month,brand,category):\n    brand_hierarchy = [\"brand\",\"sub_brand\",\"variant\"]\n    category_hierarchy = [\"cat\",\"scat\",\"sscat\"]\n    period = list(range(period_start_month,period_end_month+1))\n    filtered = input_file.loc[input_file.month_adj.isin(period),[\"bintix_uid\",\"volume\"]+brand_hierarchy+category_hierarchy]\n    purchases_category_filtered = filtered\n    for i in range(len(category)):\n        purchases_category_filtered = purchases_category_filtered.loc[purchases_category_filtered[category_hierarchy[i]]==category[i]]\n    brand_buyer_uid_filter = purchases_category_filtered.loc[:,[\"bintix_uid\"]+brand_hierarchy]\n    for i in range(len(brand)):\n        brand_buyer_uid_filter = brand_buyer_uid_filter.loc[brand_buyer_uid_filter[brand_hierarchy[i]]==brand[i]]\n    brand_buyer_uid = brand_buyer_uid_filter.bintix_uid.unique()\n    brand_buyer_all_purchases = purchases_category_filtered.loc[purchases_category_filtered.bintix_uid.isin(brand_buyer_uid)]\n    total_volume = brand_buyer_all_purchases.volume.sum()\n    brand_purchase = brand_buyer_all_purchases\n    for i in range(len(brand)):\n        brand_purchase = brand_purchase.loc[brand_purchase[brand_hierarchy[i]]==brand[i]]\n    brand_volume = brand_purchase.volume.sum()\n    SOR = brand_volume\/total_volume\n    return pd.DataFrame([[brand[0],SOR]],columns=[\"Brand\",\"Loyalty\"])","439ba0b7":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"KELLOGG'S\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])\n","41b917e3":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"SOULFULL\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])","090c0ed2":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"KELLOGG'S\",\"CHOCOS\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])","5db90eb5":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"SOULFULL\",\"RAGI BITES\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])\n","1805ebe5":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"SOULFULL\",\"RAGI BITES\",\"CHOCO FILLS\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])\n","c586deef":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"KELLOGG'S\",\"CHOCOS\",\"CRUNCHY BITES\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\",\"KIDS FLAKES\"])","44a371b8":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"KELLOGG'S\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\"])","62e96640":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"SOULFULL\"],[\"SNACKS & BRANDED FOODS\",\"READY TO EAT CEREALS\"])\n","a54d8d1d":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"KELLOGG'S\"],[\"SNACKS & BRANDED FOODS\"])","74da084b":"SOR_volume_percent(RTEC_HYD_6OCT_RTEC,25,27,[\"SOULFULL\"],[\"SNACKS & BRANDED FOODS\"])","4adbf5a0":"df = pd.read_csv(\"..\/input\/allcities-jan5\/allcities_Jan5.csv\",encoding = \"latin-1\")","e320ec06":"df = df.loc[(df.sscat==\"CHOCOLATE SPREAD\")&(df.city_id.isin([1,2,3]))]","a3615b1a":"df = df.loc[df.month_adj.isin(range(22,34))]\ndf","9f48c45a":"df.month_adj.unique()\ndf.city_id.unique()\ndf.sscat.unique()\n","5f15e96a":"df.sscat","55957f1d":"pip install openpyxl","8f5da1bf":"with pd.ExcelWriter(\"Loyalty_indiv_cities_quarter_wise_chocospread.xlsx\") as writer:\n    for city in df.city.unique():\n        filt = df.loc[df.city==city]\n        fdf=pd.DataFrame()\n        for t1 in [22,25,28,31]:\n            tdf=pd.DataFrame()\n            for b in filt.brand.unique():\n                tdf = pd.concat([tdf,SOR_volume_percent(filt,t1,t1+2,[b],[\"SNACKS & BRANDED FOODS\",\"SPREADS, SAUCES, KETCHUP\",\"CHOCOLATE SPREAD\"])])\n            fdf = pd.concat([fdf,tdf],axis=1)\n        \n        fdf.fillna(\"NA\").to_excel(writer,sheet_name=city)","70f9c43a":"fdf.fillna(\"NA\").to_csv(\"Loyalty_Chocospread_Quarter_wise.csv\")","ac210bb9":"fdf_1=pd.DataFrame()\nfor t1 in [22]:\n    tdf=pd.DataFrame()\n    for b in df.brand.unique():\n        tdf = pd.concat([tdf,SOR_volume_percent(df,t1,t1+11,[b],[\"SNACKS & BRANDED FOODS\",\"SPREADS, SAUCES, KETCHUP\",\"CHOCOLATE SPREAD\"])])\n    fdf_1 = pd.concat([fdf_1,tdf],axis=1)","bd0b651a":"fdf_1.to_csv(\"Loyalty_Choco_spread_YTD_Sep21.csv\")","51dcc29b":"df.loc[df.brand==\"NUTRALITE\"].volume.sum()\/","92b1cb6e":"nb = df.loc[(df.month_adj.isin([28,29,30]))&(df.brand==\"VEEBA\")&(df.city==\"Bangalore\")].bintix_uid.unique()","4256b3b6":"nb_data = df.loc[(df.month_adj.isin([28,29,30]))&(df.bintix_uid.isin(nb))&(df.city==\"Bangalore\")]","c126b41e":"nb_data.volume.sum()","0d69465a":"nb_data.loc[nb_data.brand==\"VEEBA\"].volume.sum()","faabc6a9":"31328\/32673","e01e4b9e":"# Loading and viewing data","a07a9145":"# Currently for individual city","0fbf8812":"Time period for all the examples is jan-21 to mar-21","1da2682d":"# SOR function","efbb7b08":"# Examples"}}