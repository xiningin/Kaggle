{"cell_type":{"7cb912ae":"code","084cb883":"code","c485b55c":"code","4a9f862b":"code","f093c5eb":"code","e74ae342":"code","d2e4583a":"code","c849a779":"code","02bacf04":"code","02507143":"code","02e24cb6":"code","c7a103ba":"code","f0fa5d6e":"code","5e18f207":"code","266f66f5":"code","79d5038d":"code","73dfba6c":"code","0759e329":"code","9a6ac5a0":"code","4c2ff85f":"code","5dd97bbe":"code","a83f96ce":"code","721363cb":"code","3ecbf88c":"code","b59091ab":"code","e8b67071":"code","f1b0bea1":"code","cc3d9b1e":"code","d988d80f":"code","f0671a21":"code","e2199f34":"code","2ba3fbb0":"code","30fe91c0":"code","87ef9d5b":"code","15021e56":"code","c1c9ad40":"markdown","49d51086":"markdown","e7a31b96":"markdown","b62087a9":"markdown","462e68ad":"markdown","8fcfdb4b":"markdown","5270a088":"markdown","7e94a8cf":"markdown","a3773c16":"markdown"},"source":{"7cb912ae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file = os.path.join(dirname, filename) \n        print(os.path.join(dirname, filename))\n","084cb883":"df = pd.read_csv(file)\ndf.head()","c485b55c":"df['Class'].value_counts()","4a9f862b":"x = df.drop('Class', axis=1)\ny = df.Class","f093c5eb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import KFold\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split","e74ae342":"train_x, test_x, train_y, test_y = train_test_split(x, y, train_size=0.7)","d2e4583a":"log_class = LogisticRegression()\ngrid = {'C':10.0 **np.arange(-2,3), 'penalty':['l1','l2']}\ncv = KFold(n_splits=5, shuffle=False, random_state=None)","c849a779":"clf = GridSearchCV(log_class, grid, cv=cv, n_jobs=-1, scoring='f1_macro')\nclf.fit(train_x, train_y)","02bacf04":"clf.best_params_","02507143":"pred_y = clf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","02e24cb6":"from sklearn.ensemble import RandomForestClassifier\nclf_rf = RandomForestClassifier()\nclf_rf.fit(train_x, train_y)","c7a103ba":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","f0fa5d6e":"class_weight={0:1,1:100}\nclf_rf = RandomForestClassifier(class_weight=class_weight)\nclf_rf.fit(train_x, train_y)","5e18f207":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","266f66f5":"### Under Sampling","79d5038d":"train_y.value_counts()","73dfba6c":"pip install imbalanced-learn","0759e329":"from collections import Counter\nfrom imblearn.under_sampling import NearMiss\nns = NearMiss(0.8)\ntrain_x_ns, train_y_ns = ns.fit_resample(train_x, train_y)\nprint(f\"#Class before fit {Counter(train_y)}\")\nprint(f\"#Class after fit {Counter(train_y_ns)}\")","9a6ac5a0":"print(0.8*426)\nprint(341\/0.8)","4c2ff85f":"clf_rf = RandomForestClassifier()\nclf_rf.fit(train_x_ns, train_y_ns)","5dd97bbe":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","a83f96ce":"class_weight={0:1,1:100}\nclf_rf = RandomForestClassifier(class_weight=class_weight)\nclf_rf.fit(train_x_ns, train_y_ns)","721363cb":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","3ecbf88c":"from collections import Counter\nfrom imblearn.over_sampling import RandomOverSampler\nos = RandomOverSampler(0.5)\ntrain_x_os, train_y_os = os.fit_resample(train_x, train_y)\nprint(f\"#Class before fit {Counter(train_y)}\")\nprint(f\"#Class after fit {Counter(train_y_os)}\")","b59091ab":"199023*0.5","e8b67071":"clf_rf = RandomForestClassifier()\nclf_rf.fit(train_x_os, train_y_os)","f1b0bea1":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","cc3d9b1e":"os = RandomOverSampler(0.75)\ntrain_x_os, train_y_os = os.fit_resample(train_x, train_y)\nprint(f\"#Class before fit {Counter(train_y)}\")\nprint(f\"#Class after fit {Counter(train_y_os)}\")","d988d80f":"clf_rf = RandomForestClassifier()\nclf_rf.fit(train_x_os, train_y_os)","f0671a21":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","e2199f34":"from imblearn.combine import SMOTETomek\nsmote = SMOTETomek(0.5)\ntrain_x_smote, train_y_smote = smote.fit_resample(train_x, train_y)\nprint(f\"#Class before fit {Counter(train_y)}\")\nprint(f\"#Class after fit {Counter(train_y_smote)}\")","2ba3fbb0":"clf_rf = RandomForestClassifier()\nclf_rf.fit(train_x_smote, train_y_smote)","30fe91c0":"pred_y = clf_rf.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","87ef9d5b":"from imblearn.ensemble import EasyEnsembleClassifier\nclf_easy = EasyEnsembleClassifier()\nclf_easy.fit(train_x, train_y)","15021e56":"pred_y = clf_easy.predict(test_x)\nprint('Confusion Matrix\\n',confusion_matrix(test_y, pred_y))\nprint('\\nAccuracy Score\\n',accuracy_score(test_y, pred_y))\nprint('\\nClassification Report\\n',classification_report(test_y, pred_y))","c1c9ad40":"### 1. Cross Validation with KFold and HyperParameter Tuning with GridSearchCV","49d51086":"Without Hyperparameter Tuning RF gives a lot better result than LR.\\\nLet's try HP Tuning now!","e7a31b96":"### Over Sampling","b62087a9":"#### We can see that the number of False Positives has increased a lot and Precision of True has decreased significantly.","462e68ad":"### SMOTETomek","8fcfdb4b":"Since the total number of samples has decreased the F1 scores should decrease as well.","5270a088":"### So, there is no significant improvement from 50% to 75% oversampling!!!","7e94a8cf":"### We can say that Precision and F1 score for True has increased significantly after performing over-sampling.\nWe have over sampled to only 50%. Let's see if performance increases if we oversample to 75% !!!","a3773c16":"### Ensemble Techniques"}}