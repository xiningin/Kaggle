{"cell_type":{"dac89a36":"code","6321db00":"code","028338a5":"code","f32ddce7":"code","309bdcc4":"code","089104c3":"code","102ec69e":"code","076748fe":"code","4097295e":"code","3530d1b7":"code","24458287":"code","342bf264":"code","371c53a6":"code","3eb72dde":"code","cac05e5e":"code","7fa70bcc":"code","32fa76f4":"code","cb3f5a0e":"code","42a85ad6":"code","796ae50a":"code","a5c371e1":"code","5c8644ac":"code","4150bcf7":"code","012bdb37":"code","7103b4db":"code","3fcdd481":"code","8be5a130":"code","b8de30dd":"code","b2a3b83f":"code","a505cf10":"code","c309d9c7":"code","faaa20b4":"code","4dd5cec0":"code","9d33fd22":"code","ea82b2b9":"code","fc07de7d":"code","8799d3d5":"markdown","af200369":"markdown","1b9eca61":"markdown","30f4dfe8":"markdown","3f4cd13a":"markdown","46bf85fb":"markdown","495ea28f":"markdown","fcd01335":"markdown","f96e1eb5":"markdown","098c60e6":"markdown","6a825bf5":"markdown","489781e3":"markdown","58b12c46":"markdown","954977cd":"markdown","bf57d12b":"markdown","4f05c2c9":"markdown","2a541d61":"markdown","d12d6556":"markdown","ee2b10f9":"markdown","d282c7a2":"markdown"},"source":{"dac89a36":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6321db00":"# Import modules for model analysis\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Import lightgbm modules\nimport lightgbm as lgb","028338a5":"# Read in the data\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv',index_col=0)\ntest  = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv', index_col=0)\n\ntrain.head()","f32ddce7":"# Check the memory consumed by the DataFrame\ntrain.info(memory_usage='deep')","309bdcc4":"# Memory usage by variable in MB\ntrain.memory_usage(deep=True) * 1e-6","089104c3":"# Lets reduce the memory usage of the features\n# First - check the integer values and downcast\ndef int_downcast(df):\n    int_cols = df.select_dtypes(include=['int64'])\n\n    for col in int_cols.columns:\n        print(col, 'min:',df[col].min(),'; max:',df[col].max())\n        df[col] = pd.to_numeric(df[col], downcast ='integer')\n    return df\n\nint_downcast(train)\ntrain.memory_usage(deep=True) * 1e-6","102ec69e":"# Second - check the float values and downcast. Method will have to be applied to the train and test DataFrames\ndef float_downcast(df):\n    float_cols = df.select_dtypes(include=['float64'])\n\n    for col in float_cols.columns:\n#         print(col, 'min:',df[col].min(),'; max:',df[col].max())\n        df[col] = pd.to_numeric(df[col], downcast ='float')\n    return df\n\nfloat_downcast(train)\nfloat_downcast(test)","076748fe":"# Check the memory usage by feature\ntrain.memory_usage(deep=True) * 1e-6\ntest.memory_usage(deep=True) * 1e-6","4097295e":"# Review the memory usage by DataFrame\ntrain.info(memory_usage='deep')\ntest.info(memory_usage='deep')","3530d1b7":"# Check for missing values\ntrain.isnull().sum()\ntest.isnull().sum()\n\n# Add a dummy missing value for a row with missing data\nfeatures = [x for x in train.columns.values if x[0]==\"f\"]\ntrain['n_missing'] = train[features].isna().sum(axis=1)\ntest['n_missing'] = test[features].isna().sum(axis=1)","24458287":"X = train.drop('claim', axis=1)\ny = train['claim']","342bf264":"# Prepare the data to be used within the model. Make use of the lgb.Dataset() method to optimise the memory usage\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=6, stratify=y)","371c53a6":"# Review using the LGB dataset and model build methods\nlgb_train = lgb.Dataset(X_train, label=y_train)\nlgb_eval = lgb.Dataset(X_test, label=y_test, reference=lgb_train)\n\nprint(f'{type(lgb_train)}')\nprint(f'{lgb_train.data.info()}')","3eb72dde":"print(type(lgb_train))\nlgb_train.data.head()","cac05e5e":"# Specify the configurations as a dict\nparams = {\n    'objective': 'binary',\n    'metric': 'auc',\n    'is_unbalance': 'true',\n    'boosting': 'gbdt',\n    'num_leaves': 31,\n    'feature_fraction': 0.5,\n    'bagging_fraction': 0.5,\n    'bagging_freq': 20,\n    'learning_rate': 0.05,\n    'verbose': 0,\n    'device': 'gpu'\n}\n\n# train - verbose_eval option switches off the log outputs\ngbm = lgb.train(\n    params,\n    lgb_train,\n    num_boost_round=5000,\n    valid_sets=lgb_eval,\n    early_stopping_rounds=100,\n    verbose_eval=-1,\n)\n\n# predict\ny_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)\n# Compute and print metrics\nprint(f\"AUC : {roc_auc_score(y_test, y_pred)}\")","7fa70bcc":"# Feature importance\nlgb.plot_importance(gbm, max_num_features=15);\nplt.show()","32fa76f4":"# Let's create a function to allow for future quick reviews of the same baseline model. Will allow for easy review of feature engineering and selection processing steps\ndef base_model(train, dep):\n    \n    # Create feature variables\n    X = train\n    y = dep\n    \n    # Prepare the data to be used within the model. Make use of the lgb.Dataset() method to optimise the memory usage\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=6, stratify=y)\n    \n    # Review using the LGB dataset and model build methods\n    lgb_train = lgb.Dataset(X_train, label=y_train)\n    lgb_eval = lgb.Dataset(X_test, label=y_test, reference=lgb_train)\n    \n    # Run the model\n    params = {\n        'objective': 'binary',\n        'metric': 'auc',\n        'is_unbalance': 'true',\n        'boosting': 'gbdt',\n        'num_leaves': 31,\n        'feature_fraction': 0.5,\n        'bagging_fraction': 0.5,\n        'bagging_freq': 20,\n        'learning_rate': 0.05,\n        'verbose': 0,\n        'device': 'gpu'\n    }\n\n    # train - verbose_eval option switches off the log outputs\n    model = lgb.train(\n        params,\n        lgb_train,\n        num_boost_round=5000,\n        valid_sets=lgb_eval,\n        early_stopping_rounds=100,\n        verbose_eval=-1,\n    )\n\n    # predict\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n    # Compute and print metrics\n    print(f\"AUC : {roc_auc_score(y_test, y_pred)}\")\n    return model","cb3f5a0e":"def submission_sample(model, df_test, model_name):\n    sample = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')\n    sample['claim'] = model.predict(df_test)\n    return sample.to_csv(f'submission_{model_name}.csv',index=False)","42a85ad6":"# Lets confirm the feature data types\nprint(f'Train : \\n{train.dtypes.value_counts()}')\nprint(f'Test : \\n{test.dtypes.value_counts()}')","796ae50a":"# List of column names for review\n# column_names = [col for col in train_miss.columns]\ncolumn_names = [col for col in X.columns]","a5c371e1":"# Create function for the missing value review\ndef impute_miss_values(df_train, df_test, strategy='mean'):\n    # create the imputer, the strategy can be mean and median.\n    imputer = SimpleImputer(missing_values=np.nan, strategy=strategy)\n\n    # fit the imputer to the train data\n    imputer.fit(df_train)\n\n    # apply the transformation to the train and test\n    train_imp = pd.DataFrame(imputer.transform(df_train), columns=column_names)\n    test_imp = pd.DataFrame(imputer.transform(df_test), columns=column_names)\n    return train_imp, test_imp","5c8644ac":"# Update the train and test set to have the missing values as median\nX, test = impute_miss_values(X, test, strategy='median')\n# Confirm the model output still aligns to previous versions\nlgb_median = base_model(X, dep=train['claim'])","4150bcf7":"# Aiming to review the impact of using the scaling features\n# MinMaxScaler()\n# Create function for the scaling review\n# def impute_scaler(df_train, df_test, scaler=MinMaxScaler()):\n    \n#     # apply the transformation to the train and test\n#     train_imp = pd.DataFrame(scaler.fit_transform(df_train), columns=column_names)\n#     test_imp = pd.DataFrame(scaler.fit_transform(df_test), columns=column_names)\n#     return train_imp, test_imp","012bdb37":"# # Update the train and test set to have the missing values as median\n# X, test = impute_scaler(X, test, scaler=StandardScaler())\n# # Confirm the model output still aligns to previous versions\n# lgb_standard = base_model(X, dep=train['claim'])","7103b4db":"# submission_sample(lgb_standard, test, 'lgb_standard')","3fcdd481":"# def impute_winsor(df, prob=0.01):\n    \n#     # Review each of the columns and apply the clipping\n#     for col in df.columns:\n#         quant = np.quantile(df[col], [prob, (1-prob)])\n#         df.loc[(df[col] <= quant[0]), col] = quant[0]\n#         df.loc[(df[col] >= quant[1]), col] = quant[1]\n    \n#     return df","8be5a130":"# X_new = impute_winsor(X)\n# test_new = impute_winsor(test)\n# # Review the model output\n# lgb_winsor = base_model(X_new, dep=train['claim'])\n# submission_sample(lgb_winsor, test_new, 'lgb_winsor')","b8de30dd":"# from sklearn.preprocessing import PolynomialFeatures\n\n# # Interactions between features\n# def poly_interactions(df_train, df_test):\n    \n#     # Set-up the interactions feature\n#     interactions = PolynomialFeatures(interaction_only=True)\n    \n#     # apply the transformation to the train and test\n#     train_imp = pd.DataFrame(interactions.fit_transform(df_train), columns=column_names)\n#     test_imp = pd.DataFrame(interactions.fit_transform(df_test), columns=column_names)\n#     return train_imp, test_imp\n\n# Polynomial Features\n# def poly_features(df_train, df_test, num_features=2):\n    \n#     # Set-up the interactions feature\n#     poly = PolynomialFeatures(num_features)\n    \n#     # apply the transformation to the train and test\n#     train_imp = pd.DataFrame(poly.fit_transform(df_train), columns=column_names)\n#     test_imp = pd.DataFrame(poly.fit_transform(df_test), columns=column_names)\n#     return train_imp, test_imp","b2a3b83f":"# Update the train and test set\n# X_pi, test_pi = poly_interactions(X, test)\n# # Run the model\n# lgb_poly_i = base_model(X_pi, dep=train['claim'])\n# submission_sample(lgb_poly_i, test_pi, 'lgb_poly_i')","a505cf10":"# Update the train and test set\n# X_pf, test_pf = poly_features(X, test)\n# # Run the model\n# lgb_poly_f = base_model(X_pf, dep=train['claim'])\n# submission_sample(lgb_poly_f, test_pf, 'lgb_poly_f')","c309d9c7":"# Threshold for removing correlated variables\nthreshold = 0.9\n\n# Absolute value correlation matrix\ncorr_matrix = X.corr().abs()\n\n# Upper triangle of correlations\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Select columns with correlations above threshold\nto_drop = [column for column in upper.columns if any(upper[column] > threshold)]\nto_drop\n\n# Remove the columns from the train and test set\n# X = X.drop(columns = to_drop)","faaa20b4":"# Lets review thresholds for removing co-linear features\nthreshold_range = np.arange(0, 0.91, 0.025)\n\nto_drop_dict = dict()\nfor thres in threshold_range:\n    to_drop_dict[thres] = [column for column in upper.columns if any(upper[column] > thres)]\n\nto_drop_dict","4dd5cec0":"# Lets review a heatmap of the correlations\nsns.heatmap(upper);","9d33fd22":"# Remove features with zero importance - doesn't appear to be working. Review in future work.\n# feature_importances = pd.DataFrame({'feature': list(X.columns), \n#                             'importance': lgb_median.feature_importance})\n# # Find the features with zero importance\n# zero_features = list(feature_importances[feature_importances['importance'] == 0.0]['feature'])\n# print('\\nThere are %d features with 0.0 importance' % len(zero_features))","ea82b2b9":"# Let's create a function to allow for future quick reviews of the same baseline model. Will allow for easy review of feature engineering and selection processing steps\ndef model_tuning(train, dep):\n    \n    # Create feature variables\n    X = train\n    y = dep\n    \n    # Prepare the data to be used within the model. Make use of the lgb.Dataset() method to optimise the memory usage\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=6, stratify=y)\n    \n    # Review using the LGB dataset and model build methods\n    lgb_train = lgb.Dataset(X_train, label=y_train)\n    lgb_eval = lgb.Dataset(X_test, label=y_test, reference=lgb_train)\n    \n    # Run the model\n    params = {\n        'objective': 'binary',\n        'metric': 'auc',\n        'is_unbalance': 'true',\n        'boosting': 'gbdt',\n#         'num_leaves': 31,\n#         'feature_fraction': 0.5,\n#         'bagging_fraction': 0.5,\n        'bagging_freq': 20,\n#         'learning_rate': 0.05,\n        'verbose': 0,\n        'device': 'gpu'\n    }\n\n    # train - verbose_eval option switches off the log outputs\n    model = lgb.train(\n        params,\n        lgb_train,\n        num_boost_round=5000,\n        valid_sets=lgb_eval,\n        early_stopping_rounds=100,\n        verbose_eval=-1,\n    )\n\n    # Hyperparameter tuning\n    parameters = {'num_leaves':[20,40,60,80,100], \n                  'min_child_samples':[5,10,15],\n                  'max_depth':[-1,5,10,20],\n                  'learning_rate':[0.05,0.1,0.2],\n                  'reg_alpha':[0,0.01,0.03],\n                  'feature_fraction': [0.5, 0.6, 0.7],\n                  'bagging_fraction': [0.5, 0.6, 0.7]\n                 }\n    \n    # Setup the random grid search\n    gs = RandomizedSearchCV(\n        estimator=model, \n        param_distributions=parameters, \n        n_iter=100,\n        scoring='roc_auc',\n        cv=3,\n        refit=True,\n        random_state=6,\n        verbose=True)\n\n    # predict\n    y_pred = model.predict(X_test, num_iteration=gs.best_params_)\n    # Compute and print metrics\n    print(f\"AUC : {roc_auc_score(y_test, y_pred)}\")\n    return model","fc07de7d":"# Confirm the model output - doesn't seem to be working\n# lgb_median_hyper = model_tuning(X, dep=train['claim'])","8799d3d5":"### Winsorizing","af200369":"# Using LGB dataset method and train","1b9eca61":"Lets go back to reviewing the Train and Test DataFrames\n","30f4dfe8":"* Making use of the quartile binning, none of the variables appear to have added to the most important features\n* Appears to be a slight improvement by adding decile values for the features\n***\nThey could be a feature to add in future iterations of the model but they are not adding a lot to the final AUC improvements","3f4cd13a":"### Review missing value replacement","46bf85fb":"### Binning","495ea28f":"# Light Gradient Boosting Model testing\nAim of this notebook is to review the light gradient boosting model which can be used during a binary classification challenge.","fcd01335":"# Make submission","f96e1eb5":"### Polynomial Features","098c60e6":"Median value replacement has helped to benefit the score accuracy the most. Lets review end of tail imputation as a comparison","6a825bf5":"# Missing value treatment","489781e3":"## Feature Engineering\n***\nAfter creating the initial baseline model we can start to perform some feature engineering steps. With feature engineering we are aiming to see if additional variables can be created that will help to improve the model.\n***\n1. Binning\n    * Create binned values (quantiles, deciles)\n2. Feature scaling\n    * MinMax scaling\n    * Standardization\n    * Winsorizing \n3. Statistical transformations\n    * Log\n    * Polynomials\n4. Feature Interactions\n    * Use PolynomialFeatures\n***\nPrior to this feature engineering we can review teh missing value replacement assessment.\n* Replace with mean \/ median \/ mode\n* End of tail imputation - works best with normally distributed features","58b12c46":"It appears that the majority of the features are randomly correlated","954977cd":"### Hyperparameter tuning","bf57d12b":"# Feature Selection\n***\nAims to reduce the dimensionality of the dataset\n***\n1. Remove co-linear features\n2. Remove features with large number of missing values\n3. Keep importance features","4f05c2c9":"Doesn't appear to like creating the polynomial features. May have to try in the future with less input features.","2a541d61":"# Model Analysis","d12d6556":"Making use of the clipping didn't really benefit the model","ee2b10f9":"# Light Gradient Boosting","d282c7a2":"### Feature scaling"}}