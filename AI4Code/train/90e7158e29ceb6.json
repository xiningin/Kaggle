{"cell_type":{"34e4af7c":"code","6525d0d1":"code","881db516":"code","fdb66b81":"code","8c9b5d59":"code","a59f2d15":"code","30154ef1":"code","776ccf39":"code","3754f63c":"code","592fb0ae":"code","0c088402":"code","b9402c08":"code","c82eba86":"code","5b419ba9":"code","b6e68beb":"code","79d8fc73":"code","ad5c15e8":"code","36ae266c":"code","044a421e":"code","d46a2d39":"code","8a26c756":"code","6b0725d1":"code","bd70550d":"code","a988fdf8":"code","2de0f3dc":"code","9f06bbc1":"code","76a7246e":"code","f4b5511e":"code","4d4d67aa":"code","7ba7163e":"code","ebcd8195":"code","3008d919":"code","c0b3ad60":"code","6c7b4343":"code","881f000c":"code","8409cd80":"code","04a32074":"code","81b1af6c":"code","1475ae4c":"code","86a59a13":"code","72c1fe6e":"code","b1829add":"code","7994b8d4":"code","7a4d0e74":"code","ef2b6f04":"code","4152cadc":"code","cb8caca3":"code","581ce7df":"code","6c08b497":"code","4b2d33a5":"code","7f4d9684":"code","4c607a88":"code","2f001f1d":"code","d20735e3":"code","5706d9d0":"code","c044416e":"code","4f470f82":"code","648ac5b7":"code","323ec28e":"code","df8b0254":"code","5b86d30a":"code","c0923cad":"code","5a3389eb":"code","5f2ea834":"code","e610d81a":"code","e88d1475":"code","542ef10c":"code","a83703fa":"code","8f6d19f5":"code","739d88fb":"code","66a3df15":"code","49693aa7":"code","75a3c838":"code","708d6b1b":"code","965bb1bd":"code","7725b255":"code","f44fca79":"code","296b1da4":"code","926c820e":"code","8dc33b5c":"code","b8e40dd0":"code","e77702fa":"code","b9b4b69f":"code","530e0dc1":"markdown"},"source":{"34e4af7c":"# Importing libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\nsns.set(font_scale=2.5) \nimport missingno as msno\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","6525d0d1":"#Reading the data from the CSV file.\n\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\n","881db516":"df_train.isnull().sum()","fdb66b81":"msno.matrix(df=df_train.iloc[:, :], figsize=(7, 5), color=(0.5, 0.1, 0.2))","8c9b5d59":"msno.bar(df=df_train.iloc[:, :], figsize=(7, 5), color=(0.2, 0.5, 0.2))","a59f2d15":"f,ax=plt.subplots(1,2,figsize=(16,6))\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=False)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=df_train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","30154ef1":"df_train['Sex'].value_counts()","776ccf39":"df_train.groupby(['Sex','Survived'])['Survived'].count()","3754f63c":"f,ax=plt.subplots(1,2,figsize=(14,4))\ndf_train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')\nplt.show()","592fb0ae":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","0c088402":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","b9402c08":"pd.crosstab(df_train.Pclass,df_train.Survived,margins=True)","c82eba86":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","5b419ba9":"f,ax=plt.subplots(1,2,figsize=(16,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['black','silver','yellow'],ax=ax[0])\nax[0].set_title('Number Of Passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Pclass:Survived vs Dead')\nplt.show()","b6e68beb":"pd.crosstab([df_train.Sex,df_train.Survived],df_train.Pclass,margins=True)\n","79d8fc73":"sns.factorplot('Pclass','Survived',hue='Sex',data=df_train)\nplt.show()","ad5c15e8":"pd.crosstab([df_train.SibSp],df_train.Survived)","36ae266c":"fig, ax = plt.subplots(figsize=(20, 15))\n\ndf_train.groupby(['SibSp', 'Survived']).size().unstack().plot(kind='bar', stacked=False, ax=ax)\nax.set_title('SibSp vs Survived - Count - Side by Side')\nplt.show()\n","044a421e":"f,ax=plt.subplots(1,2,figsize=(20,8))\nsns.barplot('SibSp','Survived',data=df_train,ax=ax[0])\nax[0].set_title('SibSp vs Survived')\nsns.factorplot('SibSp','Survived',data=df_train,ax=ax[1])\nax[1].set_title('SibSp vs Survived')\nplt.close(2)\nplt.show()\n","d46a2d39":"pd.crosstab(df_train.SibSp,df_train.Pclass)","8a26c756":"pd.crosstab(df_train.Parch,df_train.Pclass)","6b0725d1":"f, ax = plt.subplots(figsize=(18, 10))\ndf_train.groupby(['Parch', 'Survived']).size().unstack().plot(kind='bar', stacked=False, ax=ax)\nax.set_title('Parch vs Survived - Count - Side by Side')\nplt.show()","bd70550d":"f,ax=plt.subplots(1,2,figsize=(20,8))\nsns.barplot('Parch','Survived',data=df_train,ax=ax[0])\nax[0].set_title('Parch vs Survived')\nsns.factorplot('Parch','Survived',data=df_train,ax=ax[1])\nax[1].set_title('Parch vs Survived')\nplt.close(2)\nplt.show()","a988fdf8":"df_train.head()","2de0f3dc":"df_train['Ticket'].value_counts()","9f06bbc1":"sns.heatmap(df_train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) #df_train.corr()-->correlation matrix\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","76a7246e":"df_train['Embarked'].value_counts()\n","f4b5511e":"df_train['Embarked'].fillna('S', inplace=True)\n","4d4d67aa":"df_train['Embarked'].value_counts()\n","7ba7163e":"df_train[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean()\n","ebcd8195":"pd.crosstab(df_train['Embarked'],df_train['Survived'])\n","3008d919":"sns.catplot('Embarked','Survived', data=df_train, kind='point')\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","c0b3ad60":"pd.crosstab(df_train['Embarked'],df_train['Pclass'])","6c7b4343":"f, ax = plt.subplots(1,2, figsize=(18, 6))\ndf_train.groupby(['Embarked', 'Survived']).size().unstack().plot(kind='bar', stacked=False, ax=ax[0])\ndf_train.groupby(['Embarked', 'Pclass']).size().unstack().plot(kind='bar', stacked=False, ax=ax[1])\nax[0].set_title('Embarked vs Survived')\nax[1].set_title('Embarked vs Pclass')\nplt.show()","881f000c":"sns.catplot('Pclass', 'Survived', hue='Sex', col='Embarked', data=df_train, kind='point')\nplt.show()","8409cd80":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch']\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch']","04a32074":"df_train[['FamilySize','Survived']].groupby(['FamilySize'], as_index=False).mean()\n","81b1af6c":"pd.crosstab(df_train['FamilySize'], df_train['Survived'])\n","1475ae4c":"f, ax = plt.subplots(1, 2, figsize=(18, 5))\nsns.barplot('FamilySize', 'Survived', data=df_train, ax=ax[0])\nax[0].set_title('Family Size vs Survived')\nsns.catplot('FamilySize', 'Survived', data=df_train, ax=ax[1], kind='point')\nax[0].set_title('Family Size vs Survived')\nplt.close(2)\nplt.show()","86a59a13":"from sklearn.preprocessing import LabelEncoder\n","72c1fe6e":"df_test['Fare'].fillna(df_test['Fare'].median(), inplace = True)\n\ndf_train['FareCategory'] = pd.qcut(df_train['Fare'], 5)\ndf_test['FareCategory'] = pd.qcut(df_test['Fare'], 5)","b1829add":"df_train['Fare_Code'] = LabelEncoder().fit_transform(df_train['FareCategory'])","7994b8d4":"df_test['Fare_Code'] = LabelEncoder().fit_transform(df_test['FareCategory'])","7a4d0e74":"df_train[['Fare_Code', 'Survived']].groupby(['Fare_Code']).mean()","ef2b6f04":"pd.crosstab(df_train['Fare_Code'], df_train['Survived'])","4152cadc":"f, ax = plt.subplots(1,2, figsize=(18, 6))\ndf_train.groupby(['Fare_Code','Survived']).size().unstack().plot(kind='bar', ax=ax[0])\nsns.catplot('Fare_Code', 'Survived', data=df_train, kind='bar', ax=ax[1])\nax[0].set_title('Fare_Code vs Survived')\nax[1].set_title('Fare_Code vs Survived')\nplt.close(2)\nplt.show()","cb8caca3":"df_train['Title'] = 0\nfor salut in df_train:\n    df_train['Title'] = df_train.Name.str.extract('([A-Za-z]+)\\.')\n    \ndf_test['Title'] = 0\nfor salut in df_test:\n    df_test['Title'] = df_test.Name.str.extract('([A-Za-z]+)\\.')  ","581ce7df":"pd.crosstab(df_train['Title'], df_train['Sex'])\n","6c08b497":"mapping = {'Mlle': 'Miss', \n           'Major': 'Mr', \n           'Col': 'Mr', \n           'Sir': 'Mr', \n           'Don': 'Mr',\n           'Mme': 'Miss',\n           'Jonkheer': 'Mr',\n           'Lady': 'Mrs', \n           'Capt': 'Mr', \n           'Countess': 'Mrs', \n           'Ms': 'Miss', \n           'Dona': 'Mrs'\n           }\ndf_train.replace({'Title': mapping}, inplace=True)\ndf_test.replace({'Title': mapping}, inplace=True)","4b2d33a5":"data_df = df_train.append(df_test)\n\ntitles = ['Dr', 'Master', 'Miss', 'Mr', 'Mrs', 'Rev']\nfor title in titles:\n    age_to_impute = data_df.groupby('Title')['Age'].median()[titles.index(title)]\n    data_df.loc[(data_df['Age'].isnull()) & (data_df['Title'] == title), 'Age'] = age_to_impute    ","7f4d9684":"# TRAIN_DF and TEST_DF\uc5d0\uc11c Age\uac12 \ub300\uccb4\ud558\uae30:\ndf_train['Age'] = data_df['Age'][:891]\ndf_test['Age'] = data_df['Age'][891:]","4c607a88":"df_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","2f001f1d":"plt.style.use('fivethirtyeight')\nsns.catplot('Pclass','Survived', col='Title', data=df_train, kind='point')\nplt.show()","d20735e3":"plt.style.use('default')\n","5706d9d0":"df_train['AgeCategory'] = pd.qcut(df_train['Age'], 4)\ndf_test['AgeCategory'] = pd.qcut(df_test['Age'], 4)","c044416e":"df_train['Age_Code'] = LabelEncoder().fit_transform(df_train['AgeCategory'])\ndf_test['Age_Code'] = LabelEncoder().fit_transform(df_test['AgeCategory'])","4f470f82":"data_df['Last_Name'] = data_df['Name'].apply(lambda x: str.split(x, \",\")[0])\n\nDEFAULT_SURVIVAL_VALUE = 0.5\ndata_df['Family_Survival'] = DEFAULT_SURVIVAL_VALUE\n\nfor grp, grp_df in data_df[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId',\n                           'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):\n    \n    if (len(grp_df) != 1):\n        # A Family group is found.\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 0\n                \nprint(\"Number of passengers with family survival information:\", \n      data_df.loc[data_df['Family_Survival']!=0.5].shape[0])","648ac5b7":"for _, grp_df in data_df.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    data_df.loc[data_df['PassengerId'] == passID, 'Family_Survival'] = 0\n                        \nprint(\"Number of passenger with family\/group survival information: \" \n      +str(data_df[data_df['Family_Survival']!=0.5].shape[0]))\n\n# # Family_Survival in TRAIN_DF and TEST_DF:\ndf_train['Family_Survival'] = data_df['Family_Survival'][:891]\ndf_test['Family_Survival'] = data_df['Family_Survival'][891:]","323ec28e":"df_train['Sex'].replace(['male','female'],[0,1],inplace=True)\ndf_test['Sex'].replace(['male','female'],[0,1],inplace=True)\n","df8b0254":"drop_elements = ['PassengerId', 'Name', 'SibSp', 'Parch','Ticket', 'Cabin', 'FareCategory', 'AgeCategory','Age', 'Fare', 'Title', 'Embarked']","5b86d30a":"df_train = df_train.drop(drop_elements, axis=1)\ndf_test = df_test.drop(drop_elements, axis=1)","c0923cad":"y = df_train['Survived']\n","5a3389eb":"X = df_train[df_train.columns[1:]]\n","5f2ea834":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler","e610d81a":"all_features = ['Pclass', 'Sex', 'FamilySize', 'Fare_Code', 'Age_Code', 'Family_Survival']","e88d1475":"all_transformer = Pipeline(steps = [\n    ('stdscaler', StandardScaler())\n])\n","542ef10c":"all_preprocess = ColumnTransformer(\n    transformers = [\n        ('allfeatures', all_transformer, all_features),\n    ]\n)","a83703fa":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=df_train['Survived'])\n","8f6d19f5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.model_selection import cross_val_score","739d88fb":"classifiers = [\n    LogisticRegression(random_state=42),\n    RandomForestClassifier(random_state=42),\n    SVC(random_state=42),\n    KNeighborsClassifier(),\n    SGDClassifier(random_state=42),\n    ]","66a3df15":"first_round_scores = {}\nfor classifier in classifiers:\n    pipe = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', classifier)])\n    pipe.fit(X_train, y_train)   \n    print(classifier)\n    score = pipe.score(X_test, y_test)\n    first_round_scores[classifier.__class__.__name__[:10]] = score\n    print(\"model score: %.3f\" % score)","49693aa7":"grid_scores = {}\nlog_clf = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', LogisticRegression(random_state=42))])\n\nlog_param_grid = {\n    'classifier__C': [0.01, 0.1, 1.0, 10],\n    'classifier__solver' : ['liblinear','lbfgs','sag', 'saga'],\n    'classifier__max_iter' : [500],\n}\n\nlog_grid_search = GridSearchCV(log_clf, log_param_grid, cv=10, iid=True)\nlog_grid_search.fit(X_train, y_train)\n\nprint('Logistic Regression - grid_search.best_params_ and best_scores_', log_grid_search.best_params_, log_grid_search.best_score_)\nlog_model_score = log_grid_search.score(X_test, y_test)\nprint(\"Logistic Regression - model score: \", log_model_score)\ngrid_scores['log'] = log_model_score","75a3c838":"rf_clf = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', RandomForestClassifier(random_state=42))])\n\nrf_param_grid = {\n    'classifier__n_estimators' : [50, 100],\n    'classifier__max_features' : [2, 3],\n    'classifier__criterion' : ['gini', 'entropy']\n}\n\nrf_grid_search = GridSearchCV(rf_clf, rf_param_grid, cv=10, iid=True)\nrf_grid_search.fit(X_train, y_train)\n\nprint('Random Forest grid_search.best_params_ and best_scores_', rf_grid_search.best_params_, rf_grid_search.best_score_)\nrf_model_score = rf_grid_search.score(X_test, y_test)\nprint(\"Random Forest - model score: \", rf_model_score)\ngrid_scores['rf'] = rf_model_score","708d6b1b":"svm_clf = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', SVC(random_state=42))])\nsvm_param_grid = [\n    {'classifier__kernel': ['linear'], 'classifier__C': [10., 30., 100., 300.]},\n    {'classifier__kernel': ['rbf'], 'classifier__C': [1.0, 3.0, 10., 30., 100., 300.],\n     'classifier__gamma': [0.01, 0.03, 0.1, 0.3, 1.0]},\n    ] \n\nsvm_grid_search = GridSearchCV(svm_clf, svm_param_grid, cv=10, iid=True)\nsvm_grid_search.fit(X_train, y_train)\n\nprint('SVM grid_search.best_params_ and best_scores_', svm_grid_search.best_params_, svm_grid_search.best_score_)\nsvm_model_score = svm_grid_search.score(X_test, y_test)\nprint(\"SVM - model score: \", svm_model_score)\ngrid_scores['svm'] = svm_model_score","965bb1bd":"knn_clf = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', KNeighborsClassifier())])\nknn_param_grid = {\n    'classifier__n_neighbors': [5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26 ],\n    'classifier__weights': ['uniform', 'distance' ],\n    'classifier__leaf_size': list(range(1,50,5)),\n}\n\nknn_grid_search = GridSearchCV(knn_clf, knn_param_grid, cv=10, iid=True, scoring ='roc_auc')\nknn_grid_search.fit(X_train, y_train)\n\nprint('KNN grid_search.best_params_ and best_scores_', knn_grid_search.best_params_, knn_grid_search.best_score_)\nknn_model_score = knn_grid_search.score(X_test, y_test)\nprint(\"KNN - model score: \", knn_model_score)\ngrid_scores['knn'] = knn_model_score","7725b255":"sgd_clf = Pipeline(steps=[('preprocessor', all_preprocess),\n                      ('classifier', SGDClassifier(random_state=42))])\n\nsgd_param_grid = {\n    'classifier__max_iter': [100, 200],\n    'classifier__alpha': [0.0001, 0.001, 0.01, 0.1],\n}\n\nsgd_grid_search = GridSearchCV(sgd_clf, sgd_param_grid, cv=10, iid=True)\nsgd_grid_search.fit(X_train, y_train)\n\nprint('SGD grid_search.best_params_ and best_scores_', sgd_grid_search.best_params_, sgd_grid_search.best_score_)\nsgd_model_score = sgd_grid_search.score(X_test, y_test)\nprint(\"SGD - model score: \", sgd_model_score)\ngrid_scores['sgd'] = sgd_model_score","f44fca79":"final_pipe = Pipeline(steps=[('preprocessor', all_preprocess)])\n","296b1da4":"X_final_processed = final_pipe.fit_transform(X)\n","926c820e":"df_test_final_processed = final_pipe.transform(df_test)\n","8dc33b5c":"knn_hyperparameters = {\n    'n_neighbors': [6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22],\n    'algorithm' : ['auto'],\n    'weights': ['uniform', 'distance'],\n    'leaf_size': list(range(1,50,5)),\n}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = knn_hyperparameters,  \n                cv=10, scoring = \"roc_auc\")\n\ngd.fit(X_final_processed, y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","b8e40dd0":"gd.best_estimator_.fit(X_final_processed, y)\ny_pred = gd.best_estimator_.predict(df_test_final_processed)","e77702fa":"knn = KNeighborsClassifier(algorithm='auto', leaf_size=26, metric='minkowski', \n                           metric_params=None, n_jobs=None, n_neighbors=6, p=2, \n                           weights='uniform')\nknn.fit(X_final_processed, y)\ny_pred = knn.predict(df_test_final_processed)","b9b4b69f":"submission = pd.DataFrame(pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'])\nsubmission['Survived'] = y_pred\nsubmission.to_csv(\"submission.csv\", index = False)","530e0dc1":"<footer id=\"attribution\" style=\"float:right; color:#999; background:#fff;\">\ngithub.com\/sumitmukhija\n<\/footer>"}}