{"cell_type":{"efb2dd42":"code","1ac00125":"code","4619c67f":"code","cf3fcc2c":"code","94ead96f":"code","9ee6dfc7":"code","6618676a":"code","b7c32cf6":"code","b1aa433d":"code","45bfd962":"code","2b45b584":"code","9708cb1e":"code","26896203":"code","8c6b13ca":"code","1ed872fc":"code","87e12769":"code","30698b01":"code","d6dd2d41":"code","30775da9":"code","891651fc":"code","6f20fb2d":"code","cbb5e2d5":"code","dec90547":"code","606d844d":"code","78f553a1":"code","12aea9b2":"code","7bd2382c":"code","30891982":"code","61bcdb98":"code","f2b03022":"code","dfd9420d":"code","a811eaa6":"code","01c5b4a8":"code","9fd24209":"code","bdc4e85a":"code","210e1bee":"code","d2bc30ad":"code","38dbaefb":"code","8ec9564b":"code","d6a853cd":"code","4ca0d1fc":"code","fe271ad5":"code","d1fbe5d2":"code","7dfaafb7":"code","292eed39":"code","45930339":"code","e5b56789":"code","bd7d9dc5":"code","82a9b8d6":"code","5a1e482e":"code","94835b76":"code","e978a037":"code","f9511c0a":"code","22774263":"code","51f1d3fc":"code","345ae7c7":"code","eec2af6a":"code","d6c23bce":"code","7856e33b":"code","082d2e91":"code","b41e51fd":"code","d7044f1f":"code","c9b51d58":"code","c91ade6e":"code","c3a31884":"code","1b075a26":"code","35d54d7a":"code","83e78d29":"code","743ddc27":"code","21b6740c":"code","8bf884de":"code","883f1481":"code","18720c3e":"code","2456e4fe":"code","6f9645af":"code","53b81487":"code","4b18ec78":"code","a6a0a079":"code","00ff9beb":"code","41ff792e":"code","4ded44d8":"code","210ab473":"code","3f884256":"code","6a94dcdb":"code","99c4c39c":"code","250fb366":"code","ec6f189d":"markdown","814c2bc2":"markdown","40970a34":"markdown","c705467b":"markdown"},"source":{"efb2dd42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # matplotlib'i tan\u0131mlad\u0131m yani import ettim\nimport seaborn as sns # seaborn'u tan\u0131mlad\u0131m yani import ettim \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ac00125":"df = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\") #burada df yi import ettik\ndf.head()","4619c67f":"df.head(15) #burada ilk 15 tanesini yazd\u0131rd\u0131m","cf3fcc2c":"df.info() \n#df.info ile df'nin i\u00e7erisi hakk\u0131nda daha \u00e7ok bilgi elde ettim mesela i\u00e7erisinde 4 object var.","94ead96f":"df.corr() \n# i\u00e7indeki \u00f6zellikler aras\u0131ndaki ili\u015fkiyi g\u00f6sterdik mesela rank ile global_sales aras\u0131nda hi\u00e7bir alaka yok","9ee6dfc7":"f ,ax = plt.subplots(figsize = (15,5)) # burada df.corr'u heatmap ile g\u00f6rselle\u015ftirtik\nsns.heatmap(df.corr(),annot=True,linewidths=5,fmt=\".1f\",ax=ax)\nplt.show()","6618676a":"df.columns # burada i\u00e7indeki \u00f6zellikleri yazd\u0131rd\u0131k ","b7c32cf6":"df.Global_Sales .plot(kind=\"line\",color=\"green\",label = \"Global_Sales \",linewidth=1,alpha=1,grid = True,linestyle =\"-\")\ndf.EU_Sales.plot(color=\"red\",label=\"EU_Sales\",linewidth=1,alpha=1,grid=True,linestyle=\":\" )\nplt.legend(loc = \"upper right\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.title(\"Line plot\")\nplt.show() #burada oyunlar\u0131n avrupadaki ve d\u00fcnyadaki sat\u0131\u015flar\u0131 ile tablo \u00e7izdirdik","b1aa433d":"df.plot(kind =\"scatter\",x='Global_Sales',y='EU_Sales',alpha=0.5,grid=True,color=\"red\")\n#df.scatter(data.Attack,data.Defense) bu \u015fekildede tabloyu \u00e7izdirebiliriz\nplt.xlabel(\"Global_Sales\")\nplt.ylabel(\"EU_Sales\")\nplt.title(\"Global_Sales and EU_Sales scatter plot\")\n#plt.show() ile altta \u00e7\u0131kan yaz\u0131y\u0131 kald\u0131rabiliriz","45bfd962":"df.Global_Sales.plot(kind=\"hist\",bins=25,figsize=(5,5))\nplt.xlabel(\"Global_Sales\")\nplt.show() #burada global_sales tablosunu hist ile \u00e7izdirdik\n#plt.clf() bunu yazarsak \u00e7izdirdi\u011fimiz bu tabloyu siler","2b45b584":"cikis_yili = df[\"Year\"] > 2016\ndf[cikis_yili] # burada \u00e7iki\u015f yili 2016 dan sonra olan oyunlar\u0131 yazd\u0131rd\u0131k\n","9708cb1e":"df[np.logical_and(df[\"Year\"]>2010,df[\"Global_Sales\"]>14.5)] \n#burada \u00e7\u0131k\u0131\u015f y\u0131l\u0131>2010 ve global_sales>14.5 olanlar\u0131 yazd\u0131rd\u0131m","26896203":"for index,value in df[[\"Global_Sales\"]][0:5].iterrows():\n    print(\"index: \",index,\"value:\",value)\n#Burada iterrows metodu ile 0,1,2,3,4 indexli elemanlar\u0131n global_sales oran\u0131n\u0131 yazd\u0131rd\u0131m","8c6b13ca":"x=3\ndef f():\n   y = x**2\n   return y\nprint(f())\nprint(x)#burada x i tan\u0131mlad\u0131k global olarak sonra fonksiyon i\u00e7inde kulland\u0131k ve sonucu yazd\u0131rd\u0131k sonra birde x i yazd\u0131rd\u0131k","1ed872fc":"def tupl():\n    t = (1,2,3,4,5)\n    return t\na,b,c,d,e = tupl()\nprint(a,b,c,d,e) #burada fonk. i\u00e7ine tuple tan\u0131mlad\u0131m sonra onu a,b,c,d,e ye e\u015fitledim ve yazd\u0131rd\u0131m i\u00e7indeki degerler s\u0131rayla a,b,c,d,e oldu ","87e12769":"def circle(): #burada i\u00e7 i\u00e7e fonksiyon yazd\u0131k circle i\u00e7inde alan hesaplayan bi fonksiyon yazd\u0131k ve onu return ettirdik\n    def area():\n        r = 2\n        pi = 3.14\n        a = pi*r**2\n        return a\n    return area()\nprint(circle()) ","30698b01":"def circle(r,pi=3.14):\n    area = pi*r**2\n    return area\nprint(circle(2)) # burada sadece r ye deger atad\u0131k pi nin zaten degeri var\nprint(circle(2,5)) # burada hem r i\u00e7in hem de pi i\u00e7in deger atat\u0131k ve alan hesaplad\u0131k","d6dd2d41":"def a(*args):\n    return args\na(1,2,3)#burada *args ile fonksiyon i\u00e7ine 1 veya daha fazla eleman atayabiliriz esnek arg\u00fcman olarak ge\u00e7iyor\ndef f(**kwargs):#kwargs dictionary i\u00e7in kullan\u0131l\u0131r\n    for key,value in kwargs.items():               \n        print(key, value)\nf(ulke = 'Turkey', baskent = 'Ankara', nufus =1234567)","30775da9":"circle = lambda r,pi=3.14:pi*r**2 #burada lambda fonksiyon ile circle alan\u0131n\u0131 hesaplad\u0131k normal fonk. g\u00f6re \u00e7ok daha k\u0131sa oluyor\nprint(circle(2))\n","891651fc":"listem = [1,2,3,4,5]\na = map(lambda x : x+1 , listem) #burada map ile lambda fonk. kullanarak listem i\u00e7indeki degerlerin hepsine 1 ekledik ve asag\u0131da yazd\u0131rd\u0131k\nprint(list(a))","6f20fb2d":"num1 = [5,6,7]\nnum2 = [i-2 for i in num1]\nprint(num2) #burada i yi num1 deki elemanlara g\u00f6nderdik tek tek ve 2 \u00e7\u0131kard\u0131k sonrada yazd\u0131rd\u0131k","cbb5e2d5":"num1 = [10,20,30,40,50,60,70]\nort = sum(num1)\/7\nprint(ort)\nnum2 =[\"b\u00fcy\u00fck\" if i>ort else \"k\u00fc\u00e7\u00fck\" for i in num1 ]\nprint(num2)# burada num1'in ortalamas\u0131n\u0131 ald\u0131rd\u0131m sonra num2 yapt\u0131m ve i yi num1 i\u00e7indeki elemanlara\n#g\u00f6nderdim sonra i>ort i\u00e7in b\u00fcy\u00fck i<ort i\u00e7in k\u00fc\u00e7\u00fck yazd\u0131rcak \u015fekilde ayarlad\u0131m ve ekran \u00e7\u0131kt\u0131s\u0131 ald\u0131m","dec90547":"a = [15,30,50]\nb = [i%10 if i==30 else i+5 if i<25 else i-25 for i in a] # burada i=30 i\u00e7in modunu ald\u0131rd\u0131m \n#10 g\u00f6re ,degilse ve i<25 ise 5 eklettim i<25 degilse 25 \u00e7\u0131kard\u0131m \nprint(b)","606d844d":"threshop = sum(df.JP_Sales)\/len(df.JP_Sales)#burda JP_Sales ortalamas\u0131n\u0131 ald\u0131k\nprint(\"threshop:\",threshop)#ortalamay\u0131 yazd\u0131rd\u0131k \ndf[\"Sat\u0131s_Oran\u0131\"] = [\"y\u00fcksek\" if i>threshop else \"d\u00fc\u015f\u00fck\" for i in df.JP_Sales]# burda yeni bir feature ekledik Sat\u0131s_oran\u0131\n#sonra i yi JP_Sales i\u00e7\u00e7ine koyduk sonra i>threshop i\u00e7in y\u00fcksek i<threshop i\u00e7in d\u00fc\u015f\u00fck\ndf.loc[:99,[\"Sat\u0131s_Oran\u0131\",\"JP_Sales\"]] #sonrada ilk 100 eleman\u0131 yazd\u0131rd\u0131k ","78f553a1":"df.head() # burda videogamesales ilk 5 i ni yazd\u0131rd\u0131m df.tail() ile son 5 yazd\u0131r\u0131l\u0131r","12aea9b2":"df.columns # s\u00fctunlar\u0131n isimlerini yazd\u0131rd\u0131k","7bd2382c":"df.shape #burada videogamesales dosyam\u0131zdaki sat\u0131r say\u0131s\u0131 ve s\u00fct\u00fcn say\u0131s\u0131n\u0131 \u00f6\u011frendik (sat\u0131r,s\u00fct\u00fcn)","30891982":"df.info() # bununla daha \u00e7ok bilgi elde ettik i\u00e7indeki str say\u0131s\u0131 int say\u0131s\u0131 objectler ","61bcdb98":"print(df['Platform'].value_counts(dropna =False)) # burada oyunlar\u0131n platformlar\u0131n\u0131 ve ka\u00e7 say\u0131da olduklar\u0131n\u0131 \u00f6\u011frendik","f2b03022":"df.describe() # burada columnlar\u0131n ortalamas\u0131 min max degerleri \u00f6\u011frendik","dfd9420d":"df.boxplot(column='NA_Sales',by = 'Year') #burada boxplot ile NA_Sales in y\u0131la g\u00f6re sat\u0131\u015f\u0131n\u0131n grafi\u011fini \u00e7izdirdik\nplt.show()","a811eaa6":"df_new = df.tail()    # Burada son 5 index i df_new e tan\u0131mlay\u0131p yazd\u0131rd\u0131m\ndf_new","01c5b4a8":"melted = pd.melt(frame=df_new,id_vars = 'Name', value_vars= ['NA_Sales','Year'])\nmelted # burada df_new de tan\u0131mlad\u0131\u011f\u0131m son 5 indexin NA_sales teki oran\u0131n\u0131 ve \u00e7\u0131k\u0131\u015f y\u0131l\u0131n\u0131 yazd\u0131rd\u0131m melted ile di\u011fer \n#columnlar\u0131 yazd\u0131rmad\u0131m sadece 2 si yaz\u0131ld\u0131 bunlarda variable ile value ","9fd24209":"melted.pivot(index = 'Name', columns = 'variable',values='value') \n#melted.pivot ile bize normal eski df_new'i yazd\u0131rd\u0131","bdc4e85a":"df1 = df.head()\ndf2 = df.tail()\nconc_df_row = pd.concat([df1,df2],axis =0,ignore_index =True) # axisi=0 olmas\u0131 df leri dikey olarak birle\u015ftirir\n#ignore_index ile yeni indexler atad\u0131k 0-9 olarak \nconc_df_row","210e1bee":"df1 = df['Global_Sales'].head()\ndf2= df['NA_Sales'].head()\nconc_df_col = pd.concat([df1,df2],axis =1) # buradada axis = 1 ile yatay olarak birle\u015ftirdik\nconc_df_col","d2bc30ad":"df.dtypes #burada column lar\u0131m\u0131z\u0131n typelar\u0131n\u0131 \u00f6\u011frendik hepsinin","38dbaefb":"df.info() #tekrardan bilgi ald\u0131k year da 271 tane NaN eleman varm\u0131\u015f","8ec9564b":"df[\"Year\"].value_counts(dropna = False) # year daki nan lar\u0131 bide hangi y\u0131lda \n# ka\u00e7 oyun var videogamesales dosyam\u0131zda onlar\u0131 g\u00f6sterdik","d6a853cd":"data = df # df i dataya e\u015fitledik ikiside ayn\u0131 dataframe oldular  \ndata[\"Year\"].dropna(inplace = True)#data ile Year da ki Nan olanlar\u0131 drop yap dedik ve dataya kaydet dedik\n# bunu kontrol ettemk i\u00e7in assert kullan\u0131r\u0131z ","4ca0d1fc":"assert 1==1 #do\u011fru ve bir\u015fey d\u00f6nd\u00fcrmez\n# assert 1=3 yanl\u0131\u015f oldu\u011fu i\u00e7in hata verir","fe271ad5":"assert  df[\"Year\"].notnull().all() #burada year daki NaN lar\u0131 listeden atm\u0131\u015f\u0131z ","d1fbe5d2":"df[\"Year\"].fillna('empty',inplace = True) #Burada Year'\u0131 empty ile dolduruyoruz","7dfaafb7":"assert  df[\"Year\"].notnull().all() # kontrol ettik burada ve nan degeri yok ","292eed39":"assert df.Rank.dtype == np.int # benim rank s\u00fct\u00fcn\u00fcmun dtype \u0131 int mi\u015f burda onu kontrol ettik","45930339":"assert df.columns[1] == 'Name' # benim 1 s\u00fct\u00fcn\u00fcm name mi\u015f bunuda kontrol ettik","e5b56789":"sehir = [\"Kayseri\",\"\u0130stanbul\"] #\u00fclke listesi yapt\u0131m\nnufus = [\"8\",\"10\"] # n\u00fcf\u00fcs listesi\nlist_label = [\"sehir\",\"nufus\"] \nlist_col = [sehir,nufus]\nzipped = list(zip(list_label,list_col)) # ikisini s\u0131k\u0131\u015ft\u0131r\u0131yoruz burada birle\u015ftirme \ndata_dict = dict(zipped) #dictionary e cevirdim\ndf2 = pd.DataFrame(data_dict) #dict'den df mi elde ettik \ndf2","bd7d9dc5":"df2[\"plaka\"] = [\"38\",\"34\"] # yeni bir columns ekledim ve df2 ye ekledim\ndf2","82a9b8d6":"df2[\"income\"] = 0 # gelir belirledik ve df2 i\u00e7ine atad\u0131k\ndf2","5a1e482e":"data1 = data.loc[:,[\"Global_Sales\",\"NA_Sales\",\"EU_Sales\"]] \n#NA,EU ve global sale'i tek bir plotta \u00e7izdirdik\ndata1.plot()","94835b76":"data1.plot(subplots = True)\nplt.show() # kar\u0131\u015f\u0131kl\u0131\u011f\u0131 \u00e7\u00f6zmek i\u00e7in subplot ekliyoruz daha g\u00fczel bir \u015fekilde inceleriz bu \u015fekilde","e978a037":"data1.plot(kind = \"scatter\",color=\"r\" ,x=\"Global_Sales\",y = \"NA_Sales\")\nplt.show() # scatter ile \u00e7izdirdik bu kez","f9511c0a":"data1.plot(kind = \"hist\",y = \"EU_Sales\",bins = 50,range= (0,250)) # hist ile \u00e7izdirdik frekans \u00f6l\u00e7\u00fcyor\n# burada normed = True diyince hata veriyodu o y\u00fczeden sildim normed = normalize etmemiz 0-1 aras\u0131nda yap\u0131yo say\u0131lar\u0131","22774263":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"NA_Sales\",bins = 50,range= (0,250),ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"NA_Sales\",bins = 50,range= (0,250),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt\n# burada normed = True diyince hata veriyodu o y\u00fczeden sildim ","51f1d3fc":"time_liste = [\"1992-03-08\",\"1992-04-12\"] # liste olu\u015fturdum\nprint(type(time_liste[1]))  #typen\u0131 yazd\u0131rd\u0131m\ndatetime_object = pd.to_datetime(time_liste) # pandas.to_datetime cevirdim ve datetime index oldu\nprint(type(datetime_object))","345ae7c7":"data2 = data.head() d#ata2 ye ilk 5 eleman\u0131m\u0131z\u0131 ekledik\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"] #time list olu\u015fturdum\ndatetime_object = pd.to_datetime(date_list) # date time objesine \u00e7evirdim\ndata2[\"date\"] = datetime_object # datam\u0131za ekledim burada\ndata2 = data2.set_index(\"date\")\n# datam\u0131z\u0131n index yerine yazd\u0131rd\u0131k ve art\u0131k yeni bir indeximiz oldu\ndata2 \n\n","eec2af6a":"print(data2.loc[\"1993-03-16\"]) # index olarak yazd\u0131k ve pokemon red isimli oyunu yazd\u0131k \u00f6zellikleriyle beraber\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"]) # burada da 3 oyunu \u00e7ektik \u00f6zelliklerini yazd\u0131rd\u0131k","d6c23bce":"data2.resample(\"A\").mean() # y\u0131la g\u00f6re resampling ettik (A = y\u0131l) ve ortalamas\u0131n\u0131 al","7856e33b":"data2.resample(\"M\").mean() # Aylara g\u00f6re resample ediyoruz 4 5 6 aylar falan olmad\u0131g\u0131ndan NaN degeri yapar\n# en erken y\u0131l ve en ge\u00e7 y\u0131l aras\u0131n\u0131 aylara g\u00f6re doldurur","082d2e91":"data2.resample(\"M\").first().interpolate(\"linear\")\n#first().interpolate(\"linear\") = liner bi \u015fekilde interpole ediyoruz yani aras\u0131n\u0131 dolduruyoruz\n#aray\u0131 e\u015fit bir \u015fekilde doldurur degerlerin e\u015fit degerleri doldurmaz \n# mesela 1992-03-31 ile 1993-03-31 aras\u0131n\u0131 doldurdu year degeri ile year degerini liner sekilde aras\u0131n\u0131 doldurdu \n# Global_sales,NA_sales,EU_sales,JP_sales bunlar\u0131da liner \u015fekilde doldurdu iki index aras\u0131n\u0131","b41e51fd":"data2.resample(\"M\").mean().interpolate(\"linear\")\n#ortalamalar\u0131 ayn\u0131 olacak \u015fekilde interpole ediyor burada da","d7044f1f":"df[\"Name\"][1]  # index i 1 olan eleman\u0131 yazd\u0131rd\u0131k -> df.Name[1] b\u00f6ylede yazd\u0131r\u0131la bilir ","c9b51d58":"df.loc[1,[\"Name\"]] # burada 1.sat\u0131r ve isim s\u00fct\u00fcn\u00fcn\u00fcn kesi\u015fimini ald\u0131k","c91ade6e":"df[[\"NA_Sales\",\"EU_Sales\"]] # burda NA_sales ve EU_sales i \u015fe\u00e7ip liste \u015feklinde koyduk ve yazd\u0131rd\u0131k","c3a31884":"df.loc[1:10,\"Name\":\"Platform\"] #1 den 10 kadar index olarak ve Name den Platforma kadar s\u00fct\u00fcn olarak\n# al\u0131p yazd\u0131rd\u0131k df.loc[1:10,\"Name\":\"Global_Sales\"] olsayd\u0131 isimden Global_Sales e kadar aradaki s\u00fct\u00fcnlar olucakt\u0131","1b075a26":"df.loc[10:1:-1,\"Name\":\"Platform\"] # tersten yazd\u0131rd\u0131k ","35d54d7a":"boolean = df.Year > 2016 # df y\u0131l\u0131>2016 filtre true lar\u0131 yazd\u0131r\u0131r false lar\u0131 yazd\u0131rmaz\ndf[boolean]","83e78d29":"filtre1 = df.Global_Sales > 35 # Global_Sales > 150\nfiltre2 = df.EU_Sales > 10  # EU_sales > 35 \ndf[filtre1 & filtre2] # burda iki filtrenin kesi\u015fimini al\u0131yoruz","743ddc27":"def c\u0131kar(a) : # burada method yazd\u0131k bir tane a parametresinden 2000 c\u0131kar\u0131yoruz\n    return a - 2000\ndf.Year.apply(c\u0131kar)  # burda methodu year s\u00fct\u00fcn\u00fcna aktar\u0131yoruz ve t\u00fcm degerlerden 2000 c\u0131kar\u0131p yaz\u0131yor","21b6740c":"df.Year.apply(lambda a : a - 2000) # \u00fcstekini bu \u015fekilde de yapabiliriz lambda fonk ile\n","8bf884de":"df[\"EU_NA_Sales\"] = df.EU_Sales + df.NA_Sales # bu \u015fekilde yeni bir column yapt\u0131k ve bu column i\u00e7ine \ndf.head() # EU_sales ve NA_sales toplam\u0131n\u0131 koyduk ","883f1481":"df.index.name = \"index_no\" # index ismimi de\u011fi\u015ftirdik\ndf.head()","18720c3e":"df.tail()","2456e4fe":"df3 = df.copy() # burada datam\u0131z\u0131 ba\u015fka bir dataya kopyalad\u0131k  \ndf3.index = range(100,16698,1) # burada kopyalanan datay\u0131 range ile 100 den 16698 e kadar 1 er 1 er art\u0131rd\u0131k  \ndf3.head() # ilk 5 tanesini yazd\u0131rd\u0131k\ndf3.tail()  # son 5 yazd\u0131rd\u0131m 16698 dahil mi diye 16698 dahil degil ","6f9645af":"df1 = df.set_index([\"Platform\",\"Year\"]) # Platform ve Year \u0131 index  yapt\u0131k\ndf1.head(10)","53b81487":"new_dic = {\"takim\":[\"GS\",\"GS\",\"FB\",\"FB\"],\"F_No\":[10,99,1,4],\"yas\":[17,35,25,22],\"ayak\":[\"Sa\",\"So\",\"Sa\",\"So\"]}\ndf5 = pd.DataFrame(new_dic)\ndf5\n# burada yeni bir dic yaratt\u0131m ve bunu df ye aktard\u0131m yazd\u0131rd\u0131m ","4b18ec78":"df5.pivot(index=\"takim\",columns = \"F_No\",values=\"ayak\")\n#pivot ile burada index im takim oldu s\u00fct\u00fcnlar\u0131m F_No oldu Degerlerde ayak oldu ","a6a0a079":"df6 = df5.set_index([\"takim\",\"ayak\"]) # ikiside index oldu \ndf6","00ff9beb":"df6.unstack(level=0) \n# index 0 \u0131 \u00e7\u0131kard\u0131k yukar\u0131daki takim'\u0131 indexten c\u0131kard\u0131","41ff792e":"df7 = df6.swaplevel(0,1) # bunun ile indexlerin yerini de\u011fi\u015ftiriyoruz \ndf7","4ded44d8":"pd.melt(df5,id_vars=\"takim\",value_vars=[\"F_No\",\"yas\"])\n# df5 i melt et ama takim sabit kals\u0131n \/ di\u011ferlerinin yerine variable ve value ekle \n# benim F_No al deger olarak yaz ya\u015f\u0131m\u0131 al ve deger olarak yaz ","210ab473":"df5.groupby(\"ayak\").mean()\n# kullan\u0131lan aya\u011fa g\u00f6re grupland\u0131rd\u0131m ve di\u011ferlerinin ortalamas\u0131 ald\u0131","3f884256":"df5.groupby(\"takim\").yas.mean() #takima g\u00f6re grupland\u0131rd\u0131m ve yas ortalamalar\u0131n\u0131 ald\u0131rd\u0131m","6a94dcdb":"df5.groupby(\"takim\").yas.max() \n#takima g\u00f6re grupland\u0131rd\u0131m ve en b\u00fcy\u00fck oyuncular\u0131 yazd\u0131rd\u0131m yas olarak","99c4c39c":"df5.groupby(\"takim\")[[\"yas\",\"F_No\"]].min() \n# takima g\u00f6re grupland\u0131rd\u0131m yas ve F_No nun min degerlerini yazd\u0131rd\u0131m\n","250fb366":"df5.groupby(\"takim\")[[\"yas\",\"F_No\"]].max() # ayni \u015fekilde max da yapabiliriz ","ec6f189d":"# DATA\u0130 TEAM \u00d6DEV B\u00f6l\u00fcm-4","814c2bc2":"# DATA\u0130 TEAM \u00d6DEV B\u00d6L\u00dcM-6","40970a34":"# DATA\u0130 TEAM \u00d6DEV B\u00f6l\u00fcm-7","c705467b":"#  DATA\u0130 TEAM \u00d6DEV B\u00f6l\u00fcm-5"}}