{"cell_type":{"a5dfae7e":"code","9fe9cdb4":"code","b77a8c76":"code","8dc02921":"code","6bd16fb6":"code","87356717":"code","d0df0aac":"code","2ef5ff58":"code","f6d829f0":"code","8dde09af":"code","d34b5552":"code","bf89c1e5":"code","8c47ae34":"code","e95ab4fd":"markdown","f2451776":"markdown","34ee4f8b":"markdown","36129dd6":"markdown","17b12d1a":"markdown","866a5303":"markdown","59c8b4b0":"markdown"},"source":{"a5dfae7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fe9cdb4":"import matplotlib.pyplot as plt\nimport seaborn as sns","b77a8c76":"df = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf","8dc02921":"df.info()","6bd16fb6":"df['neighbourhood'].value_counts()","87356717":"df.isnull().sum()","d0df0aac":"df_new = df[['neighbourhood','price','latitude','longitude']] \ndf_new = df_new.groupby('neighbourhood').agg({'price':'mean','latitude':'mean','longitude': 'mean'})\ndata1 = df_new\ndata1","2ef5ff58":"import scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfig = plt.figure(figsize=(30,27))\ndendogram = sch.dendrogram(sch.linkage(data1,method='ward'),leaf_rotation=90, leaf_font_size=12,labels=data1.index) \nplt.title(\"Dendrograms\")  \nplt.show()","f6d829f0":"plt.figure(figsize=(30, 27))  \nplt.title(\"Dendrograms\")  \ndend = sch.dendrogram(sch.linkage(data1, method='ward'),leaf_rotation=90, leaf_font_size=12,labels=data1.index)\nplt.axhline(y=1000, color='r', linestyle='--')\nplt.show()","8dde09af":"hc = AgglomerativeClustering(n_clusters=2,affinity='euclidean',linkage='ward')\ny_hc = hc.fit_predict(data1)\nprint(y_hc)\n    \nfig = plt.figure(figsize=(20,18))\nplt.scatter(data1.index,data1['price'], c=y_hc) \nplt.title('K = 2')\nplt.xlabel('neighbourhood')\nplt.xticks(rotation=90)\nplt.ylabel('price')\nplt.show()","d34b5552":"import folium\nfrom folium.plugins import MarkerCluster","bf89c1e5":"cluster_map = folium.Map(location=[40.64749,-73.97237],tiles='cartodbpositron',zoom_start=10) \n\nfor i in range(len(y_hc)):\n    lat = df_new.iloc[i]['latitude']\n    long = df_new.iloc[i]['longitude']\n    radius = 6\n\n    if y_hc[i] == 0:\n        folium.CircleMarker(location = [lat, long], radius=radius,  fill =True, color='red').add_to(cluster_map)\n    elif y_hc[i] == 1:\n        folium.CircleMarker(location = [lat, long], radius=radius,  fill =True, color='blue').add_to(cluster_map)\n    else:\n        pass\n\ncluster_map","8c47ae34":"\nh_map = folium.Map(location=[40.64749,-73.97237],zoom_start = 10) \n\ndf_new['latitude'] = df_new['latitude'].astype(float)\ndf_new['longitude'] = df_new['longitude'].astype(float)\n\nheat_df = df_new[['latitude', 'longitude']]\nheat_df = heat_df.dropna(axis=0, subset=['latitude','longitude'])\n\nheat_data = [[row['latitude'],row['longitude']] for index, row in heat_df.iterrows()]\n\nHeatMap(heat_data).add_to(h_map)\n\nh_map","e95ab4fd":"# \u0e08\u0e32\u0e01 dendogram \u0e40\u0e2a\u0e49\u0e19\u0e23\u0e30\u0e22\u0e30\u0e41\u0e19\u0e27\u0e15\u0e31\u0e49\u0e07\u0e17\u0e35\u0e48\u0e21\u0e35 maximum distance \u0e04\u0e37\u0e2d\u0e40\u0e2a\u0e49\u0e19\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e40\u0e07\u0e34\u0e19 \u0e25\u0e32\u0e01\u0e40\u0e2a\u0e49\u0e19\u0e41\u0e19\u0e27\u0e19\u0e2d\u0e19\u0e2a\u0e35\u0e41\u0e14\u0e07\u0e1c\u0e48\u0e32\u0e19\u0e08\u0e30\u0e44\u0e14\u0e49\u0e08\u0e38\u0e14\u0e15\u0e31\u0e14 2 \u0e08\u0e38\u0e14\u0e19\u0e31\u0e48\u0e19\u0e04\u0e37\u0e2d\u0e04\u0e48\u0e32 k \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e21\u0e35\u0e04\u0e48\u0e32\u0e40\u0e17\u0e48\u0e32\u0e01\u0e31\u0e1a 2","f2451776":"# \u0e41\u0e2a\u0e14\u0e07\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\u0e08\u0e38\u0e14 centroid \u0e02\u0e2d\u0e07\u0e22\u0e48\u0e32\u0e19\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e2a\u0e35\u0e41\u0e14\u0e07\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e23\u0e32\u0e04\u0e32\u0e2a\u0e39\u0e07 \u0e2a\u0e35\u0e19\u0e49\u0e33\u0e40\u0e07\u0e34\u0e19\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e23\u0e32\u0e04\u0e32\u0e15\u0e48\u0e33","34ee4f8b":"# \u0e2a\u0e23\u0e38\u0e1b\u0e44\u0e14\u0e49\u0e27\u0e48\u0e32 \u0e41\u0e1a\u0e48\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e08\u0e32\u0e01\u0e23\u0e32\u0e04\u0e32\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e15\u0e32\u0e21\u0e22\u0e48\u0e32\u0e19\u0e44\u0e14\u0e49 2 \u0e01\u0e25\u0e38\u0e48\u0e21 \u0e04\u0e37\u0e2d \u0e01\u0e25\u0e38\u0e48\u0e21\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e17\u0e35\u0e48\u0e21\u0e35\u0e23\u0e32\u0e04\u0e32\u0e2a\u0e39\u0e07\u0e41\u0e25\u0e30\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e17\u0e35\u0e48\u0e21\u0e35\u0e23\u0e32\u0e04\u0e32\u0e15\u0e48\u0e33","36129dd6":"# \u0e01\u0e23\u0e32\u0e1f heatmap \u0e41\u0e2a\u0e14\u0e07\u0e04\u0e27\u0e32\u0e21\u0e2b\u0e19\u0e32\u0e41\u0e19\u0e48\u0e19\u0e02\u0e2d\u0e07\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e43\u0e19\u0e22\u0e48\u0e32\u0e19\u0e15\u0e48\u0e32\u0e07\u0e46","17b12d1a":"# \u0e08\u0e32\u0e01 dendogram \u0e08\u0e33\u0e19\u0e27\u0e19 cluster \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21 \u0e40\u0e25\u0e37\u0e2d\u0e01\u0e43\u0e0a\u0e49 k = 2","866a5303":"# Dendogram","59c8b4b0":"# \u0e41\u0e1a\u0e48\u0e07\u0e01\u0e25\u0e38\u0e48\u0e21\u0e08\u0e32\u0e01\u0e23\u0e32\u0e04\u0e32\u0e40\u0e09\u0e25\u0e35\u0e48\u0e22\u0e2b\u0e49\u0e2d\u0e07\u0e1e\u0e31\u0e01\u0e15\u0e32\u0e21\u0e17\u0e33\u0e40\u0e25\u0e17\u0e35\u0e48\u0e15\u0e31\u0e49\u0e07\u0e43\u0e19\u0e22\u0e48\u0e32\u0e19\u0e15\u0e48\u0e32\u0e07\u0e46"}}