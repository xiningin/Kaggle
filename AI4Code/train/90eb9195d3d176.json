{"cell_type":{"55146003":"code","720fe156":"code","fa290ce7":"code","2a94cd98":"code","84206063":"code","d41d6713":"code","9c0c5500":"code","11ad4c71":"code","704db979":"code","d6aa9f2b":"code","07739eeb":"code","2cf57815":"code","07c7a03d":"code","5bfab708":"code","9c98bb27":"code","9d6009eb":"code","6da53b6e":"code","98537bc6":"code","14ebdd70":"code","266c9b27":"code","89958e63":"code","ad7fb319":"code","c3294583":"code","253a2ed5":"code","8f0b536f":"code","91d90cf4":"code","1a9993e2":"code","06d5e0ab":"code","c75328d8":"code","96f653dd":"code","bff26922":"code","d2f817e3":"code","caacc7b9":"code","32f9886d":"code","8733b377":"code","c353e93d":"code","c1636cfb":"code","f2f6a039":"code","418f6d02":"code","42da8a02":"code","50524a63":"code","878696d8":"code","941e6d6e":"code","af74f506":"markdown","86a18ecc":"markdown","ad31cda3":"markdown","54e10e51":"markdown","698aaf58":"markdown","2a376721":"markdown","3b8cf990":"markdown","dba88cd2":"markdown","2c32e845":"markdown","6e5d1f67":"markdown","e1ab9269":"markdown","52e81bdd":"markdown","c046b9e5":"markdown","adbd0946":"markdown","8b315679":"markdown","f489169e":"markdown","a91e2283":"markdown","ed37cebb":"markdown","7ea12c8f":"markdown","d90503c8":"markdown"},"source":{"55146003":"%%time\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings(\"ignore\")","720fe156":"train = pd.read_csv(\"\/kaggle\/input\/predict-the-housing-price\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/predict-the-housing-price\/Test.csv\")\ntest1 = pd.read_csv(\"\/kaggle\/input\/predict-the-housing-price\/Test.csv\")\ntrain.head(3)\n#test.head(3)","fa290ce7":"train.info()","2a94cd98":"print(test.shape)\nprint(train.shape)","84206063":"nul =  train.isnull().sum().reset_index()\nnul[nul[0]>0]","d41d6713":"for i in train.columns:\n    print(i)\n    print(train[i].unique())","9c0c5500":"train = train.drop([\"Id\"],axis=1)\ntest = test.drop([\"Id\"],axis=1)","11ad4c71":"obj_col = train.select_dtypes(object).columns\nnum_col = train.select_dtypes(exclude=object).columns\n\n#Fill nan values with None \ntrain[obj_col] = train[obj_col].fillna(\"None\")\ntest[obj_col] = test[obj_col].fillna(\"None\")\n\n#viewing null values\nnul =  train.isnull().sum().reset_index()\nnul[nul[0]>0]","704db979":"a = list(nul[nul[0]>0][\"index\"])\ntrain[a].describe()","d6aa9f2b":"test[\"MasVnrArea\"].mode()","07739eeb":"#masvnrarea has only 6 null values & Quantile of 50% is also vary much from mean. so, drop it\ntrain = train[np.isfinite(train['MasVnrArea'])]\n\n#Both LotFrontage & GarageYrBlt has mean mostly near to quantile 50%\ntrain[\"LotFrontage\"] = train[\"LotFrontage\"].fillna(train[\"LotFrontage\"].mean())\ntrain[\"GarageYrBlt\"] = train[\"GarageYrBlt\"].fillna(train[\"GarageYrBlt\"].mean())\ntest[\"LotFrontage\"] = test[\"LotFrontage\"].fillna(test[\"LotFrontage\"].mean())\ntest[\"GarageYrBlt\"] = test[\"GarageYrBlt\"].fillna(test[\"GarageYrBlt\"].mean())\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].fillna(0)\n\n\nnul =  test.isnull().sum().reset_index()\nnul[nul[0]>0]","2cf57815":"#countplot\n\nfor i in obj_col:\n    #plt.figure(figsize=[8,8])\n    sns.set(style=\"whitegrid\")\n    sns.countplot(x = i,data=train)\n    plt.show()","07c7a03d":"# to find outlier\nfor i in num_col:\n    #plt.figure(figsize=[8,8])\n    sns.set(style=\"whitegrid\")\n    sns.violinplot(train[i])\n    plt.show()\n    ","5bfab708":"num_col1 = num_col.drop('SalePrice')\nfor i in num_col1:\n    #plt.figure(figsize=[8,8])\n    sns.set(style=\"whitegrid\")\n    sns.jointplot(train[i],y=train[\"SalePrice\"],kind=\"reg\")\n    plt.show()","9c98bb27":"from sklearn.preprocessing import MinMaxScaler\nscalar = MinMaxScaler()\ntrain[num_col1] = scalar.fit_transform(train[num_col1])\ntrain[num_col1].describe()","9d6009eb":"sns.pairplot(data = train,x_vars=train.columns,y_vars=\"SalePrice\")","6da53b6e":"corr = train.corr()\nplt.figure(figsize=[20,20])\nsns.heatmap(corr, linewidths=1, annot=True)","98537bc6":"#Geting top 10 corr attributes\ntrain.corr()[\"SalePrice\"].reset_index().sort_values([\"SalePrice\"], ascending=False)[:10]","14ebdd70":"train_dum = pd.get_dummies(train)\ntrain_dum.head()\n\ntest_dum = pd.get_dummies(test)\ntest_dum.head()\ntrain_dum.head()\n\nprint(train_dum.shape)\nprint(test_dum.shape)","266c9b27":"from sklearn.model_selection import train_test_split\n\nX= train_dum[[]]\ny = train_dum[[\"SalePrice\"]]\nX_train,X_test,y_train,y_test = train_test_split(X, y, train_size=0.7,test_size=0.3,random_state=100)\nprint (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)","89958e63":"from sklearn.model_selection import train_test_split\n\nX= train_dum.drop([\"SalePrice\"],axis=1)\ny = train_dum[[\"SalePrice\"]]\nX_train,X_test,y_train,y_test = train_test_split(X, y, train_size=0.7,test_size=0.3,random_state=100)\nprint (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)","ad7fb319":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import r2_score\nmodel = linear_model.LinearRegression()","c3294583":"model.fit(X_train[num_col1],y_train)\npreds = model.predict(X_test[num_col1])\n\nprint(\"R2 score : %.2f\" % r2_score(y_test,preds))","253a2ed5":"model.fit(X_train[[\"OverallQual\"]],y_train)\npreds = model.predict(X_test[[\"OverallQual\"]])\n\nprint(\"R2 score : %.2f\" % r2_score(y_test,preds))","8f0b536f":"model.fit(X_train[[\"GrLivArea\"]],y_train)\npreds = model.predict(X_test[[\"GrLivArea\"]])\n\nprint(\"R2 score : %.2f\" % r2_score(y_test,preds))","91d90cf4":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","1a9993e2":"from sklearn.feature_selection import RFE\nrfe = RFE(logreg, n_features_to_select=10)","06d5e0ab":"rfe = rfe.fit(X_train, y_train)","c75328d8":"#print(rfe.support_)\nrank = rfe.ranking_\nprint(rfe.ranking_)           ","96f653dd":"sel_fea = X_train.columns[rfe.ranking_<175]\nsel_fea.size","bff26922":"a = zip(X_train,rank)\nrfe_col = pd.DataFrame(a, columns = ['Col', 'Rank']).sort_values(\"Rank\")\ntop_col = list(rfe_col[\"Col\"])\n\n#print(top_col)\n#rfe_col","d2f817e3":"logreg2 = LogisticRegression()\nmodel2 = logreg2.fit(X_train[sel_fea], y_train)\n#model2.coef_\n#model2.intercept_","caacc7b9":"from statsmodels.stats.outliers_influence import variance_inflation_factor","32f9886d":"vif = pd.DataFrame()\nvif['Features'] = X_train[sel_fea].columns\nvif['VIF'] = [variance_inflation_factor(X_train[sel_fea].values, i) for i in range(X_train[sel_fea].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif[:5]","8733b377":"vif_col = vif[:180]\ncol = list(vif_col[\"Features\"])\nprint(col)","c353e93d":"from statsmodels.sandbox.regression.predstd import wls_prediction_std\nX = sm.add_constant(X_train[col])\ny = y_train","c1636cfb":"model = sm.OLS(y, X)\nresults = model.fit()\nprint(results.summary())","f2f6a039":"x = [\"BsmtFinType1_GLQ\",\"HouseStyle_1Story\",\"HeatingQC_Ex\",\"BsmtQual_Gd\",\"MSZoning_RL\",\"KitchenQual_Gd\",\"FireplaceQu_None\",\n     \"BsmtCond_TA\",\"SaleType_WD\",\"ExterQual_Gd\",\"RoofStyle_Hip\",\"Functional_Typ\",\"PavedDrive_Y\",\"ExterQual_TA\",\n     \"RoofMatl_CompShg\",\"Condition2_Norm\",\"BsmtFinType1_Unf\",\"HeatingQC_TA\",\"Exterior2nd_VinylSd\",\"BsmtExposure_Av\",\n    \"BsmtFinType1_ALQ\",\"Neighborhood_CollgCr\",\"HouseStyle_2Story\",\"FireplaceQu_Gd\",\"SaleCondition_Abnorml\",\"OverallQual\",\n    \"FireplaceQu_TA\",\"YearRemodAdd\",\"SaleType_WD\",\"FullBath\",\"Neighborhood_OldTown\",\"BldgType_TwnhsE\",\"Neighborhood_NridgHt\",\n     \"HalfBath\",\"LandSlope_Gtl\",\"Neighborhood_CollgCr\",\"Neighborhood_Edwards\",\"Neighborhood_SawyerW\",\"OverallQual\",\n    \"SaleCondition_Abnorml\",\"BldgType_Twnhs\",\"LandContour_Lvl\",\"YearRemodAdd\",\"BedroomAbvGr\",\"BsmtFullBath\",\"Neighborhood_CollgCr\",\n    \"Neighborhood_NridgHt\",\"Neighborhood_Edwards\",\"Exterior1st_BrkFace\",\"Neighborhood_NoRidge\",\"Neighborhood_SawyerW\",\n    \"OpenPorchSF\",\"WoodDeckSF\",\"ScreenPorch\",\"Neighborhood_NoRidge\",\"FireplaceQu_Ex\",\"Neighborhood_Crawfor\",\"Functional_Typ\",\n    \"Neighborhood_StoneBr\",\"Neighborhood_Timber\",\"OpenPorchSF\",\"WoodDeckSF\",\"ScreenPorch\"]\n","418f6d02":"model = linear_model.LinearRegression()\nmodel.fit(X_train[x],y_train)\npreds = model.predict(X_test[x])\n\n#print(\"R2 score : %.2f\" % r2_score(y_test,preds))","42da8a02":"test_dum[num_col1].head()","50524a63":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import r2_score\n\nmodel = linear_model.LinearRegression()\nmodel1 = LogisticRegression()\n\nX_train = train_dum[x]\nX_test = test_dum[x]\ny_train = train_dum[\"SalePrice\"]\n\nmodel.fit(X_train,y_train)\nmodel1.fit(X_train,y_train)\n\npreds = model.predict(X_test)\npre_log = model1.predict(X_test)\n","878696d8":"ids = test1[\"Id\"].to_list()","941e6d6e":"file = open(\"result.csv\", \"w\")\nfile.write(\"Id,SalePrice\\n\")\n    \nfor id_, pred in zip(ids, pre_log):\n    file.write(\"{},{}\\n\".format(id_, pred))\nfile.close()","af74f506":"Hence, OverallQual is highly corr with Sales Price\n\nOverallQual:\n It is highly dependent. but it is overall rating considered from other attributes\n \nGrLivArea:\n It is also highly dependent to sales price of house","86a18ecc":"# MLR - Using all Numeric Attributes","ad31cda3":"# Creating Dummy variables","54e10e51":"From, Future selection values. The r2 score is low when compare to mlr r2 score","698aaf58":"R2 score is poor","2a376721":"# SLR","3b8cf990":"# VIF","dba88cd2":"### R2 score by SLR using OverallQual Variable","2c32e845":"### R2 score by SLR using GrLivAre Variable","6e5d1f67":"### Min Max Scaler\nTo Increase calculation speed","e1ab9269":"R2 Score is still not good","52e81bdd":"# SLR","c046b9e5":"# Description","adbd0946":"# Feature Selection\n### RFE","8b315679":"# EDA","f489169e":"# Data Exploration","a91e2283":"# Test Train Split","ed37cebb":"# Logistic Reg Model","7ea12c8f":"# Model Building & Testing","d90503c8":"Hence, all null value is calculated"}}