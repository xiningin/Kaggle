{"cell_type":{"bfb7ca37":"code","a575c660":"code","7b1a36ab":"code","85f49e17":"code","f307e2ff":"code","a44bf4c3":"code","5d2c95f7":"code","1fe8740d":"code","3ea15a85":"code","1ec4266e":"code","a0cf4445":"code","ac67925e":"code","1b733e35":"code","be8bfddb":"code","b54c9cd0":"code","e5dff55f":"code","0c46f07e":"code","786da646":"code","b7523f38":"code","e5375e01":"code","273f981e":"code","dd40ed64":"markdown","2e546b2f":"markdown","b1e58c45":"markdown","651c0db3":"markdown","63241b8d":"markdown","c0d15c47":"markdown","dfe126d4":"markdown","4650db9e":"markdown","a7c638e6":"markdown","3cb8b9a3":"markdown","e17dfe67":"markdown"},"source":{"bfb7ca37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a575c660":"# Python Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Split and Scale functions\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# ML models\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\n# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\n\n# Resampling\nfrom sklearn.utils import resample\n\n# Metrics\nfrom sklearn.metrics import accuracy_score, f1_score, classification_report\n\nimport warnings \nwarnings.filterwarnings(action='ignore')","7b1a36ab":"data = pd.read_csv('..\/input\/lower-back-pain-symptoms-dataset\/Dataset_spine.csv')","85f49e17":"data","f307e2ff":"# Column names from dataset\ncols = ['pelvic_incidence','pelvic_tilt','lumbar_lordosis_angle','sacral_slope','pelvic_radius',\n        'degree_spondylolisthesis','pelvic_slope','direct_tilt','thoracic_slope','cervical_tilt',\n        'sacrum_angle','scoliosis_slope','normality']\n\n# Read in data with column names, \ndata = pd.read_csv('..\/input\/lower-back-pain-symptoms-dataset\/Dataset_spine.csv', header=0, names=cols, usecols=range(13))","a44bf4c3":"data","5d2c95f7":"corr = data.corr()\n\nplt.figure(figsize=(12, 8))\nsns.heatmap(corr, annot=True, vmin=-1.0)\nplt.title(\"Lower Back Pain Correlation Heatmap\")\nplt.show()","1fe8740d":"data.isna().sum()","3ea15a85":"low_corr_cols = ['pelvic_slope', 'direct_tilt', 'thoracic_slope', 'cervical_tilt', 'sacrum_angle', 'scoliosis_slope','pelvic_radius']\n\nfor i in low_corr_cols:\n    data = data.drop(i, axis=1)","1ec4266e":"data","a0cf4445":"def preprocessing_inputs(df):\n    df = df.copy()\n    \n    # Split df X and Y\n    y = df['normality']\n    X = df.drop('normality', axis=1)\n    \n    # Train-test Split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    return X_train, X_test, y_train, y_test","ac67925e":"X_train, X_test, y_train, y_test = preprocessing_inputs(data)","1b733e35":"X_train","be8bfddb":"print(y_train.value_counts())\nprint()\ny_train.value_counts().sort_index().plot.bar()","b54c9cd0":"models = {\n    \"                 Logistic Regression\": LogisticRegression(),\n    \"Logistic Regression Cross-Validation\": LogisticRegressionCV(),\n    \"                       Decision Tree\": DecisionTreeClassifier(),\n    \"                      Neural Network\": MLPClassifier(),\n    \"                       Random Forest\": RandomForestClassifier(),\n    \"                   Gradient Boosting\": GradientBoostingClassifier()\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(name + ' trained.')","e5dff55f":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    print(f'{name} Accuracy: {acc * 100}')","0c46f07e":"for name, model in models.items():\n    y_pred = model.predict(X_test)\n    f1 = f1_score(y_test, y_pred, pos_label='Abnormal')\n    print(f'{name} F1-Score: {f1}')","786da646":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)\nmodel.score(X_test, y_test)","b7523f38":"# Confusion Matrix\ny_true = np.array(y_test) #expected\ny_pred = model.predict(X_test) #predicted","e5375e01":"cm = confusion_matrix(y_true, y_pred)\n\nplt.figure(figsize=(6, 6))\n\nsns.heatmap(cm, annot=True, vmin=0, fmt='g', cbar=False,cmap=\"YlGnBu\", xticklabels=['Abnormal', 'Normal'], yticklabels=['Abnormal', 'Normal'])\n\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Expected\")\nplt.title(\"Confusion Matrix\")\n\nplt.show()","273f981e":"print(classification_report(y_true, y_pred))","dd40ed64":"## 1. Project Overview \n\nChronic lower back pain (CLBP) is a major cause of disability worldwide. CLBP prevalence in adults has increased by more than 100% in the last decade and continues to rise in older populations (Allegri et al. 2016). Given, the complexity of lower back pain the severity of symptoms can differ from person to person. For this reason, CLBP is often difficult to diagnose requiring complex clinical decision-making, which can still result in misdiagnosis (Allegri et al. 2016).\n \nConsidering the clinical importance of lower back pain, I have chosen the lower back pain dataset which contains various measurements of physical spine data. The purpose of this analysis is to predict whether a patient will display abnormal (pain) or normal (no pain) given physical spine data. \n","2e546b2f":"Let's take a look at the raw data","b1e58c45":"## References\n\n1. Allegri, M., Montella, S., Salici, F., Valente, A., Marchesini, M., Compagnone, C., . . . Fanelli, G. (2016). Mechanisms of low back pain: A guide for diagnosis and therapy. F1000Research, 5, 1530. doi:10.12688\/f1000research.8105.1","651c0db3":"## 7. Model Selection","63241b8d":"## 6. Training Results\nFrom training results, I choose to move forward with the Random Forest model. ","c0d15c47":"## 2. Import Data and Libraries\nWhen importing the raw data, we can see that the column names are not labeled, and the last column has no values (NaN). Therefore, we can read in the data by specifying column names.","dfe126d4":"## Lower Back Pain Classification\n**Author:** Khadija Hammawa<br>\n\n**Date:** 19\/05\/2021<br>\n\n**Table of Contents:**<br>\n1. Overview\n2. Import Data and Libraries\n3. Data Cleaning\n4. Data Preprocessing\n5. Training\n6. Training Results\n7. Model Selection\n8. Confusion Matrix\n\n","4650db9e":"## 3. Data Cleaning\n\nIn this section, we will begin cleaning the data to check for missing values. However, because we are interested in features that will best help our model make predictions, we will first visualize a correlation heatmap. \n \nUsing seaborn, we can see that five features are highly correlated: *pelvic incidence, pelvic tilt, lumbar lordosis angle, sacral slope, and degree spondylolisthesis*. For this reason, we can drop the remaining (i.e., low correlation) columns. \n","a7c638e6":"## 4. Preprocessing\n\nSince there were no missing values, we can move onto preprocessing. First, I created a preprocessing function that will take in a DataFrame (df). This function will split the df into X and y-y contains the data from our target column (normality) while X will be the entire df without the target column. Next, we split X and y into train and test sets. Before, returning the train and test sets we will scale X such that all columns have a unit variance of 1 and a mean of 0.\n \nBefore training our model, we want to look at values in y_train. As we can see y_train has a class imbalance with 68% as abnormal and 32% normal. To address this, we will re-sample y_train such that the abnormal condition represents 58% of values and the normal condition represents 42%.\n","3cb8b9a3":"## 8. Confusion Matrix","e17dfe67":"## 5. Training\nIn this section, we train several models to find which model will make the best predictions"}}