{"cell_type":{"0b96e3b3":"code","a29ac2dc":"code","e43c93eb":"code","f0e199d9":"code","80fef7cc":"code","3db1a707":"code","46caf5be":"code","8d707b29":"code","66b3a76f":"code","ef791df4":"code","0e39e43e":"code","467f9274":"markdown"},"source":{"0b96e3b3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom wordcloud import WordCloud\n\ninit_notebook_mode(connected=True) \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a29ac2dc":"df_train = pd.read_csv(\"..\/input\/data-science-bowl-2019\/train.csv\", parse_dates=[\"timestamp\"])\ndf_train_labels = pd.read_csv(\"..\/input\/data-science-bowl-2019\/train_labels.csv\")\ndf_specs = pd.read_csv(\"..\/input\/data-science-bowl-2019\/specs.csv\")\ndf_sample_submission = pd.read_csv(\"..\/input\/data-science-bowl-2019\/sample_submission.csv\")\ndf_test = pd.read_csv(\"..\/input\/data-science-bowl-2019\/test.csv\", parse_dates=[\"timestamp\"])","e43c93eb":"df_train.info()","f0e199d9":"df_test.info()","80fef7cc":"df_train.head()","3db1a707":"print(df_train.loc[:, df_train.isnull().any()].isnull().sum())","46caf5be":"train_types = df_train[\"type\"].value_counts()\ntest_types = df_test[\"type\"].value_counts()","8d707b29":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\n\nfig.add_trace(\n    go.Pie(values=train_types, labels=train_types.index.tolist(), name=\"Train\" , hole=.3),\n    1, 1)\n\nfig.add_trace(\n    go.Pie(values=test_types, labels=test_types.index.tolist(), name=\"Test\" , hole=.3),\n    1, 2)\n\nfig.update_traces(hoverinfo='label+percent+value', textinfo='percent', textfont_size=17, textposition=\"inside\",\n                  marker=dict(colors=['gold', 'mediumturquoise', 'darkorange', 'plum'],  \n                              line=dict(color='#000000', width=2)))\n\nfig.update_layout(\n    title_text=\"Media Type of The Game or Video\",\n    height=500, width=800,\n    annotations=[dict(text='Train', x=0.18, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Test', x=0.81, y=0.5, font_size=20, showarrow=False)])\n\nfig.show()","66b3a76f":"train_worlds = df_train[\"world\"].value_counts()\ntest_worlds = df_test[\"world\"].value_counts()","ef791df4":"fig = make_subplots(rows=1, cols=2, specs=[[{'type':'xy'}, {'type':'xy'}]])\n\nfig.add_trace(\n    go.Bar(y=train_worlds.values, x=train_worlds.index),\n    row=1, col=1)\n\nfig.add_trace(\n    go.Bar(y=test_worlds.values, x=test_worlds.index),\n    row=1, col=2)\n\nfig.update_layout(\n    title_text=\"World of Apps\",\n    height=500, width=800, showlegend=False)\n\nfig['layout']['xaxis1'].update(title='Train')\nfig['layout']['xaxis2'].update(title='Test')\n\nfig.show()","0e39e43e":"eventbyinstallation = df_train.groupby([\"installation_id\"])[\"event_code\"].nunique()\n\nfig = px.histogram(x=eventbyinstallation,\n                   title='Unique Event Code Count by Installation Id',\n                   opacity=0.8,\n                   color_discrete_sequence=['indianred'])\n\nfig.update_layout(\n    yaxis_title_text='',\n    xaxis_title_text='',\n    height=500, width=800)\n\nfig.update_traces(marker_line_color='rgb(8,48,107)',\n                  marker_line_width=1.5, opacity=0.8\n                 )\n\nfig.show()\n","467f9274":"**EDA & Data Visualization**"}}