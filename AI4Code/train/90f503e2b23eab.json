{"cell_type":{"c2c32f95":"code","a00f4f21":"code","c4f82b69":"code","7f1617a9":"code","36a9a43d":"code","796c2c2a":"code","3851ebec":"code","15b777fe":"code","c4aeb6b5":"code","2f88c1fd":"code","6aea2382":"code","80caea03":"markdown","625fc6d1":"markdown","58759ab1":"markdown","ed69bc3e":"markdown","2b118ead":"markdown","3b75a545":"markdown","90e94696":"markdown"},"source":{"c2c32f95":"# importing libraries\nimport numpy as np\nimport pandas as pd\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","a00f4f21":"# read data into dataframe\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","c4f82b69":"# first five rows\ntrain.head()","7f1617a9":"# descriptive statistics\ntrain.describe()","36a9a43d":"# checking for missing values\ntrain.isnull().any()","796c2c2a":"# predictor\nX = train.drop(columns=['id','claim'])\n\n# target\ny = train['claim']\n\n# test data \ntest_df = test.drop(columns=['id'])","3851ebec":"# preprocessing pipeline\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\npipeline = Pipeline([\n    ('impute', SimpleImputer(strategy='mean')),\n    ('scale', StandardScaler())\n])\n\nX = pd.DataFrame(columns=X.columns,\n                 data=pipeline.fit_transform(X))\n\ntest_df = pd.DataFrame(columns=test_df.columns,\n                       data=pipeline.transform(test_df))","15b777fe":"# parameters\n\nbest_params = {\n    'iterations': 15585, \n    'objective': 'CrossEntropy', \n    'bootstrap_type': 'Bernoulli', \n    'od_wait': 1144, \n    'learning_rate': 0.023575206684596582, \n    'reg_lambda': 36.30433203563295, \n    'random_strength': 43.75597655616195, \n    'depth': 7, \n    'min_data_in_leaf': 11, \n    'leaf_estimation_iterations': 1, \n    'subsample': 0.8227911142845009,\n    'task_type' : 'GPU',\n    'devices' : '0',\n    'verbose' : 0\n}","c4aeb6b5":"from catboost import CatBoostClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_curve, auc\n\n# k fold cross validation\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\npred_fol = []\nscores_list = []\n\nfor fold, (idx_train, idx_valid) in enumerate(kf.split(X)):\n    X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n    X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n    \n    # CatBoost Classifier\n    model = CatBoostClassifier(**best_params)\n    model.fit(X_train, y_train)\n\n    # validation prediction\n    pred_valid = model.predict_proba(X_valid)[:,1]\n    fpr, tpr, _ = roc_curve(y_valid, pred_valid)\n    score = auc(fpr, tpr)\n    scores_list.append(score)\n    \n    print(\"Fold : {} Score : {}\".format(fold + 1, score))\n    print('--'*18)\n    \n    # test prediction\n    y_pred = model.predict_proba(test_df)[:,1]\n    pred_fol.append(y_pred)\n    \nprint(\"Overall Validation Score : {}\".format(np.mean(scores_list)))","2f88c1fd":"# average predictions\npred = np.mean(np.column_stack(pred_fol),axis=1)","6aea2382":"# submission\nsubmission['claim'] = pred\nsubmission.to_csv('submission.csv', index=False)","80caea03":"## Exploratory Data Analysis","625fc6d1":"**Kaggle** competitions are incredibly fun and rewarding, but they can also be intimidating for people who are relatively new in their data science journey. In the past, Kaggle have launched many Playground competitions that are more approachable than Featured competition, and thus more beginner-friendly.<p>\n\nThe dataset is used for this competition,[**Tabular Playground Series - Sep 2021**](https:\/\/www.kaggle.com\/c\/tabular-playground-series-sep-2021), is synthetic, but based on a real dataset and generated using a CTGAN. The original dataset deals with predicting whether a claim will be made on an insurance policy. Although the features are anonymized, they have properties relating to real-world features.<p>\n\nThe ground truth claim is binary valued, but a prediction may be any number from **0.0 to 1.0**, representing the probability of a claim. The features in this dataset have been anonymized and may contain missing values.<p>\nSubmissions are evaluated on **area under the ROC curve** between the predicted probability and the observed target.","58759ab1":"**Thank You**","ed69bc3e":"## Preprocessing","2b118ead":"Params used for tuning this model was taken from this [notebook](https:\/\/www.kaggle.com\/mlanhenke\/tps-09-optuna-study-catboostclassifier). Thanks @mlanhenke","3b75a545":"## Model - CatBoost Classifier","90e94696":"## Introduction"}}