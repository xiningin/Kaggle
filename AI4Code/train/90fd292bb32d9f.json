{"cell_type":{"57a093e2":"code","719e08a8":"code","d31593c5":"code","26635afb":"code","04cfad4d":"code","7c5d998f":"code","a47908c4":"markdown","e7ec7ba6":"markdown","6d4c23d4":"markdown","1f4e7a59":"markdown"},"source":{"57a093e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","719e08a8":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Road the data\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\nprint(X_full.shape, X_test_full.shape)\n\n# Remove rows with missing target, seperate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y,\n                                                               train_size=0.8, test_size=0.2,\n                                                               random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].nunique() < 10 and\n                   X_train_full[cname].dtype == 'object']\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if X_train_full[cname].dtype in ['float64', 'int64']]\n\n# keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","d31593c5":"X_full.head()","26635afb":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n\n# Define model\nmodel = RandomForestRegressor(n_estimators=100, random_state=0)\n\n# Bundle preprocessing and modeling code in a pipeline\nclf = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', model)\n    ])\n\n# Preprocessing of training data, fit model\nclf.fit(X_train, y_train)\n\n# preprocessing of validation data, get predictions\npreds = clf.predict(X_valid)\n\nprint(\"MAE: \", mean_absolute_error(y_valid, preds))","04cfad4d":"# Preprocessing of test data, fit model\npreds_test = clf.predict(X_test)\npreds_test","7c5d998f":"output = pd.DataFrame({'Id': X_test.index,\n                     'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","a47908c4":"## Step1. Pipelines for Training\n* numerical_transformer\/categorical_transformer\n* preprocessor(ColumnTransformer)\n* define model\n* Bundle preprocessing and modeling\n* Preprocessing of training data, fit model\n* Preprocessing of validation data, get predictions","e7ec7ba6":"## Step2. Generate test predictions","6d4c23d4":"# Import Library","1f4e7a59":"## Step3: Submit your results"}}