{"cell_type":{"0b184249":"code","dec2778d":"code","628bb7f4":"code","97e776b2":"code","ac605798":"code","76b9a8d4":"code","73a5ab3f":"code","7512d9b8":"code","4c6d31d5":"code","c193d007":"code","ed825ffc":"code","5faee3dc":"code","563f52c4":"code","76118247":"code","b3442d94":"code","b13d8256":"code","c61a620f":"code","825a6d61":"code","b1c26d1c":"code","2e8fdb2c":"code","e0d7dded":"code","370a04c9":"code","68d6650b":"code","65d20ee1":"code","eb2d1758":"code","ba632bb8":"code","c1617cea":"code","af6f44ec":"code","ebe77348":"code","96e40747":"code","cb97f8d9":"code","0ec9d495":"code","f4267937":"markdown","4756567c":"markdown","020d7216":"markdown","49464bdd":"markdown","3984553d":"markdown","c72664b3":"markdown","e8a1a424":"markdown","253b83df":"markdown","ac10f122":"markdown","f5d67404":"markdown","2b631964":"markdown"},"source":{"0b184249":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dec2778d":"df = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndf.head()","628bb7f4":"X = df.iloc[:,:-1]\nY = df.iloc[:,-1]","97e776b2":"print(X)","ac605798":"print(Y)","76b9a8d4":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)","73a5ab3f":"print(X_test)","7512d9b8":"print(X_train)","4c6d31d5":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","c193d007":"print(X_train)","ed825ffc":"print(X_test)","5faee3dc":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, Y_train)","563f52c4":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","76118247":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","b3442d94":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train)","b13d8256":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","c61a620f":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","825a6d61":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, Y_train)","b1c26d1c":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","2e8fdb2c":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","e0d7dded":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, Y_train)","370a04c9":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","68d6650b":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","65d20ee1":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'rbf', random_state = 0)\nclassifier.fit(X_train, Y_train)","eb2d1758":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","ba632bb8":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","c1617cea":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, Y_train)","af6f44ec":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","ebe77348":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","96e40747":"from sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, Y_train)","cb97f8d9":"Y_pred = classifier.predict(X_test)\nprint(Y_pred)\nprint(Y_test)","0ec9d495":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(Y_test, Y_pred)\nprint(cm)\naccuracy_score(Y_test, Y_pred)","f4267937":"# Train Test Split","4756567c":"## Logistic Regression","020d7216":"## SVM","49464bdd":"# Model Building","3984553d":"## Decision Tree","c72664b3":"## Highest Accuracy without tuning is given by SVM","e8a1a424":"# Feature Scailing","253b83df":"## KNN","ac10f122":"## Random Forest","f5d67404":"## Naive Bayes","2b631964":"## Kernel SVM"}}