{"cell_type":{"7fac6212":"code","2e944a63":"code","c0c52dab":"code","fce43919":"code","0b5deef7":"code","11140039":"code","5a87b6e4":"code","34cf2ff4":"code","c07084aa":"code","fd9da505":"code","d27506c4":"code","4a9ca620":"code","e634c22c":"code","fdf5577a":"code","eb253f5a":"code","cbcc5db8":"code","69fd2c94":"code","e7996efd":"code","893bdace":"code","9d776302":"code","35e8f4c5":"code","7ec5034e":"code","107c88f5":"code","57924f72":"code","8c39a922":"code","c121b22c":"code","bacc35aa":"code","8abf36eb":"code","10eaac7d":"code","8800e527":"code","c610d68e":"code","877a4fa3":"code","1885ae57":"code","5741c42b":"code","f2ccd40e":"code","d2f0321a":"code","02c7c218":"code","d652dfdd":"code","ad4e06e3":"code","940f077e":"code","72aa4309":"markdown","d2ca1fce":"markdown","3b6c5513":"markdown","daf75b87":"markdown","8649008a":"markdown","9e1a3122":"markdown","d8e56617":"markdown","820028d3":"markdown","fc7962be":"markdown","2259eb5d":"markdown"},"source":{"7fac6212":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2e944a63":"train = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/sample_submission.csv\")\ntrain","c0c52dab":"TARGET = 'SalePrice'\n\nX = pd.concat([train.drop([TARGET], axis = 1), test], axis = 0)\ny = train[TARGET]","fce43919":"X.info()","0b5deef7":"num_features = [col for col in X.columns if X[col].dtype in ['int64', 'float64']\n               and col not in ['Id']]\ncat_features = [col for col in X.columns if X[col].dtype == 'object']","11140039":"len(cat_features)","5a87b6e4":"# Features like 'MiscFeature', 'PoolQC', 'Alley' have mostly missing values, \n# So we remove cols which have 75% of the missing values\n\nthreshold = 0.75\nless_useful_cat_features = [col for col in cat_features if train[col].isnull().sum() > threshold * len(train)]      \nless_useful_cat_features","34cf2ff4":"cat_features = list(set(cat_features) - set(less_useful_cat_features))\nlen(cat_features)","c07084aa":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize = (18, 20))\nfor index in range(len(cat_features)):\n    plt.subplot(8, 5, index + 1)\n    sns.countplot(data = train.dropna(), x = train.loc[:, cat_features[index]])\n    plt.xticks(rotation = 90)\n    plt.tight_layout()","fd9da505":"1400 \/ 1460","d27506c4":"# Features like 'Street', 'Utilities' have mostly only one value, \n# So we remove cols which have 96% of the same values\n\nthreshold = 0.96\nless_useful_cat_features = []\nfor col in cat_features:\n    cnt = train[col].value_counts().iloc[0]\n    if cnt > threshold * len(train):\n        less_useful_cat_features.append(col)\n        \nless_useful_cat_features","4a9ca620":"cat_features = list(set(cat_features) - set(less_useful_cat_features))\nlen(cat_features)","e634c22c":"len(num_features) ","fdf5577a":"# Unlike cat_features, features in num_features don't have many missing values\n\nthreshold = 0.75\n[col for col in num_features if train[col].isnull().sum() > threshold * len(train)]","eb253f5a":"plt.figure(figsize = (8, 4))\nplt.xlabel('Nuber of uniques')\nplt.xticks(rotation = 90)\nplt.yticks([0, 1, 2, 3, 4])\nplt.title('Count of number of features having these many uniques')\nsns.countplot(x = [train[col].nunique() for col in num_features])\nplt.show()","cbcc5db8":"threshold = 12\ndisc_num_features = [col for col in num_features if train[col].nunique() <= threshold]\ncont_num_features = list(set(num_features) - set(disc_num_features))\nlen(cont_num_features)","69fd2c94":"fig = plt.figure(figsize = (18, 20))\n\nfor index in range(len(cont_num_features)):\n    plt.subplot(6, 4, index + 1)\n    sns.histplot(train.loc[:, cont_num_features[index]].dropna(), kde = False)\n    plt.xticks(rotation = 90)\n    plt.tight_layout()","e7996efd":"# Features like 'ScreenPorch', 'LowQualFinSF' are highly skewed\n# So we remove these cols \n        \nskewed_num_features = ['ScreenPorch', 'LowQualFinSF', '3SsnPorch', 'BsmtFinSF2', 'MiscVal', 'EnclosedPorch']\ncont_num_features = list(set(cont_num_features) - set(skewed_num_features))\nlen(cont_num_features)","893bdace":"len(disc_num_features)","9d776302":"fig = plt.figure(figsize = (15, 12))\n\nfor index, col in enumerate(disc_num_features):\n    plt.subplot(4, 4, index + 1)\n    sns.countplot(x = train.loc[:, disc_num_features[index]].dropna())\n    plt.tight_layout()","35e8f4c5":"# 'PoolArea' is highly skewed\ndisc_num_features.remove('PoolArea')","7ec5034e":"plt.figure(figsize = (12, 9))\n\ncorr_matrix = train[disc_num_features + cont_num_features].corr()\nsns.heatmap(corr_matrix, mask = corr_matrix < 0.8, linewidth = 0.5)","107c88f5":"# We remove the highly correlated features:\n# GarageYrBlt and YearBuilt, TotRmsAbvGrd and GrLivArea, stFlrSF and TotalBsmtSF, \n# GarageArea and GarageCars\n\nhighly_corr_features = ['GarageYrBlt','TotRmsAbvGrd','1stFlrSF','GarageCars']\n\nfor feature in highly_corr_features:\n    if feature in disc_num_features: \n        disc_num_features.remove(feature)\n    if feature in cont_num_features: \n        cont_num_features.remove(feature)","57924f72":"# Now we're left with 59 features\nlen(num_features) + len(cat_features)","8c39a922":"fig = plt.figure(figsize = (15, 9))\nfor index,col in enumerate(cont_num_features):\n    plt.subplot(3, 5, index + 1)\n    sns.boxplot(y = col, data = train[cont_num_features].dropna())\n    plt.tight_layout()\nplt.show()","c121b22c":"# Extreme ouliers are present in 'LotArea', 'BsmtFinSF1', 'TotalBsmtSF', \n# 'LotFrontage' and 'GrLivArea'\n\ntrain = train.drop(train[train['LotFrontage'] > 200].index)\ntrain = train.drop(train[train['LotArea'] > 100000].index)\ntrain = train.drop(train[train['BsmtFinSF1'] > 4000].index)\ntrain = train.drop(train[train['TotalBsmtSF'] > 5000].index)\ntrain = train.drop(train[train['GrLivArea'] > 4000].index)","bacc35aa":"from sklearn.pipeline import Pipeline \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n    ('num_imputer', SimpleImputer(strategy = 'median')), \n    ('num_scaler', StandardScaler()), \n])","8abf36eb":"from sklearn.preprocessing import OneHotEncoder\n\ncat_pipeline = Pipeline([\n    ('cat_imputer', SimpleImputer(strategy = 'most_frequent')), \n    ('cat_encoder', OneHotEncoder(sparse = False, handle_unknown = 'ignore')), \n])","10eaac7d":"from sklearn.compose import ColumnTransformer\n\npreprocess_pipeline = ColumnTransformer([\n    ('num', num_pipeline, num_features), \n    ('cat', cat_pipeline, cat_features), \n])","8800e527":"X_train = preprocess_pipeline.fit_transform(train[num_features + cat_features])\ny_train = train[TARGET]\nX_test = preprocess_pipeline.transform(test[num_features + cat_features])","c610d68e":"from sklearn.model_selection import cross_val_score\n\ndef get_model_accuracy(model, X = X_train, y = y_train, cv = 5):\n    scores = -1 * cross_val_score(model, X, y, cv = cv, \n                                  scoring = 'neg_mean_squared_error', \n                                  n_jobs = -1, \n                                 )\n    return np.sqrt(scores).mean()","877a4fa3":"from sklearn.linear_model import SGDRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, ExtraTreesRegressor\n\nmodels = [\n    SGDRegressor(), \n    SVR(), \n    DecisionTreeRegressor(), \n    RandomForestRegressor(), \n    GradientBoostingRegressor(),\n    AdaBoostRegressor(), \n    ExtraTreesRegressor(), \n]\n# Removed LinearSVC and LinearRegression as they had very high errors\n\nmodels_acc = []\n\nfor model in models:\n    models_acc.append(get_model_accuracy(model))","1885ae57":"models_summary = pd.DataFrame()\n\nmodels_summary['Model'] = [str(model).split('(')[0] for model in models]\nmodels_summary['RMSE'] = models_acc\n  \nmodels_summary.sort_values(by = 'RMSE')","5741c42b":"sns.barplot(x = models_summary['RMSE'], y = models_summary['Model'])","f2ccd40e":"# from xgboost import XGBRegressor\n# from sklearn.model_selection import RandomizedSearchCV\n\n# xgb = XGBRegressor(booster = 'gbtree', objective = 'reg:squarederror')\n\n# param_distribs = {\n#     'learning_rate': [0.01, 0.1, 0.15, 0.3, 0.5], \n#     'max_depth': [3, 6, 9], \n#     'min_child_weight' : [1, 5, 10, 20],\n#     'reg_alpha': [0.001, 0.01, 0.1], \n#     'reg_lambda': [0.001, 0.01, 0.1], \n# }\n\n# xgb_reg = RandomizedSearchCV(xgb, param_distributions = param_distribs, \n#                             scoring = 'neg_root_mean_squared_error', \n#                             n_iter = 100, cv = 5, n_jobs = -1)\n\n# xgb_search = xgb_reg.fit(X_train, y_train)\n\n# XGB with tuned hyperparameters\n# best_param = xgb_search.best_params_\n# xgb = XGBRegressor(**best_param)","d2f0321a":"from sklearn.model_selection import RandomizedSearchCV\nfrom lightgbm import LGBMRegressor\n\nlgbm = LGBMRegressor(boosting_type = 'gbdt', objective = 'regression')\n\nparam_distribs = {\n    'max_depth' : [2, 5, 8, 10],\n    'learning_rate' : [0.001, 0.01, 0.1, 0.2],\n    'n_estimators' : [100, 300, 500, 1000, 1500],\n    'lambda_l1' : [0.0001, 0.001, 0.01],\n    'lambda_l2' : [0, 0.0001, 0.001, 0.01],\n    'feature_fraction' : [0.4, 0.6, 0.8],\n    'min_child_samples' : [5, 10, 20, 25], \n}\n\nlgbm_reg = RandomizedSearchCV(lgbm, param_distributions = param_distribs, \n                             scoring = 'neg_root_mean_squared_error', \n                             n_iter = 100, cv = 5, n_jobs = -1)\n\nlgbm_search = lgbm_reg.fit(X_train, y_train)\n\n# LightGBM with tuned hyperparameters\nbest_param = lgbm_search.best_params_\nlgbm = LGBMRegressor(**best_param)","02c7c218":"# from catboost import CatBoostRegressor\n\n# cb = CatBoostRegressor(loss_function = 'RMSE', logging_level = 'Silent')\n\n# param_distribs = {\n#     'n_estimators' : [100, 300, 500, 1000, 1300, 1600],\n#     'learning_rate' : [0.0001, 0.001, 0.01, 0.1],\n#     'l2_leaf_reg' : [0.001, 0.01, 0.1],\n#     'random_strength' : [0.25, 0.5 ,1],\n#     'max_depth' : [3, 6, 9],\n#     'min_child_samples' : [2, 5, 10, 15, 20],\n#     'rsm' : [0.5, 0.7, 0.9],\n# }\n\n# cb_reg = RandomizedSearchCV(cb, param_distributions = param_distribs, \n#                            scoring = 'neg_root_mean_squared_error', \n#                            n_iter = 100, cv = 5, n_jobs = -1)\n\n# cb_search = cb_reg.fit(X_train, y_train)\n\n# LightGBM with tuned hyperparameters\n# best_param = cb_search.best_params_\n# cb = CatBoostRegressor(**best_param)","d652dfdd":"# The code in this cell is directly taken from https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py\n# with a few modifications done along the way\n\nfrom sklearn.model_selection import learning_curve, ShuffleSplit\n\ndef plot_learning_curve(\n    estimator,\n    title,\n    X,\n    y,\n    axes=None,\n    ylim=None,\n    cv=None,\n    n_jobs=None,\n    train_sizes=np.linspace(0.1, 1.0, 5),\n):\n    \"\"\"\n    Generate 3 plots: the test and training learning curve, the training\n    samples vs fit times curve, the fit times vs score curve.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        An estimator instance implementing `fit` and `predict` methods which\n        will be cloned for each validation.\n\n    title : str\n        Title for the chart.\n\n    X : array-like of shape (n_samples, n_features)\n        Training vector, where ``n_samples`` is the number of samples and\n        ``n_features`` is the number of features.\n\n    y : array-like of shape (n_samples) or (n_samples, n_features)\n        Target relative to ``X`` for classification or regression;\n        None for unsupervised learning.\n\n    axes : array-like of shape (3,), default=None\n        Axes to use for plotting the curves.\n\n    ylim : tuple of shape (2,), default=None\n        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n\n    cv : int, cross-validation generator or an iterable, default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 5-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like of shape (n_ticks,)\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the ``dtype`` is float, it is regarded\n        as a fraction of the maximum size of the training set (that is\n        determined by the selected validation method), i.e. it has to be within\n        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n        sets. Note that for classification the number of samples usually have\n        to be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(15, 8))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n        estimator,\n        X,\n        y,\n        cv=cv,\n        n_jobs=n_jobs,\n        train_sizes=train_sizes,\n        return_times=True,\n    )\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(\n        train_sizes,\n        train_scores_mean - train_scores_std,\n        train_scores_mean + train_scores_std,\n        alpha=0.1,\n        color=\"r\",\n    )\n    axes[0].fill_between(\n        train_sizes,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n        color=\"g\",\n    )\n    axes[0].plot(\n        train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\"\n    )\n    axes[0].plot(\n        train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\"\n    )\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, \"o-\")\n    axes[1].fill_between(\n        train_sizes,\n        fit_times_mean - fit_times_std,\n        fit_times_mean + fit_times_std,\n        alpha=0.1,\n    )\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, \"o-\")\n    axes[2].fill_between(\n        fit_times_mean,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n    )\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt\n\n\n# fig, axes = plt.subplots(3, 3, figsize=(15, 24))\n# title = \"Learning Curves (XGBoost)\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\n# cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\n\n# estimator = xgb\n# plot_learning_curve(\n#     estimator, title, X_train, y_train, axes=axes[:, 0], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n# )\n\ntitle = \"Learning Curves (LightGBM)\"\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator = lgbm\nplot_learning_curve(\n    estimator, title, X_train, y_train, axes=None, ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n)\n\n# title = \"Learning Curves (CatBoost)\"\n# cv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\n# estimator = cb\n# plot_learning_curve(\n#     estimator, title, X_train, y_train, axes=axes[:, 2], ylim=(0.7, 1.01), cv=cv, n_jobs=-1\n# )\n\nplt.show()","ad4e06e3":"# from sklearn.ensemble import VotingClassifier\n\n# voting_clf = VotingClassifier(\n#     estimators = [('xgboost', xgb), \n#                   ('lightgbm', lgbm), \n#                   ('catboost', cb),  \n#                  ], \n#     voting = 'soft', n_jobs = -1)\n\n# voting_clf.fit(X_train, y_train)","940f077e":"lgbm.fit(X_train, y_train)\ny_pred = lgbm.predict(X_test)\n\nsubmission[TARGET] = y_pred\nsubmission.to_csv('submission.csv', index = False)","72aa4309":"## EDA","d2ca1fce":"## Modelling","3b6c5513":"## Learning Curves","daf75b87":"## Numeric features","8649008a":"## Preprocessing Pipeline","9e1a3122":"## Outlier Detection","d8e56617":"## Submission","820028d3":"## Categorical features","fc7962be":"## LightGBM","2259eb5d":"## References\n\nhttps:\/\/www.kaggle.com\/angqx95\/data-science-workflow-top-2-with-tuning\/notebook\n\nhttps:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_learning_curve.html#sphx-glr-auto-examples-model-selection-plot-learning-curve-py"}}