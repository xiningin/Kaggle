{"cell_type":{"c64bd305":"code","0112b113":"code","460f7466":"code","61b370de":"code","3848dba2":"code","451428ef":"code","d0c0966f":"code","6576ca9e":"code","071e7561":"code","87b8c886":"code","fee40688":"code","1b4fa4d8":"code","55569e4b":"code","e578bfb9":"code","04b14b7f":"code","06139200":"code","cd02bc22":"code","7746e844":"code","9cb5550f":"code","b8511dd1":"code","fd68a098":"code","2cad5892":"code","02395660":"code","8782cdbe":"code","bc3e343e":"code","e5bcd4ce":"code","6929dfd5":"code","74a78db0":"code","e4637244":"code","68444d16":"code","7d15a762":"code","5e80f5b9":"code","473d27cc":"code","782fc3f7":"code","6548b6f8":"code","7484b950":"code","bbe5ac9f":"code","8d15405b":"code","03af9615":"code","a32058b6":"code","58171acd":"markdown","d63dfec0":"markdown","727dd8fc":"markdown","6a8c6e68":"markdown","5b8e14b7":"markdown","f58f147a":"markdown","863221b9":"markdown","9c078c20":"markdown","0e4c3585":"markdown","d6b524ae":"markdown","0a0fd28f":"markdown","efddfbae":"markdown"},"source":{"c64bd305":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0112b113":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","460f7466":"def combine_data(train,test):\n    return pd.concat([train,test],sort=True).reset_index(drop=True)\n\ndef divide_data(data):\n    return data.loc[:890],data.loc[891:].drop(['Survived'],axis=1)\n\nall_data = combine_data(train_df,test_df)\nall_data.info()","61b370de":"# We can see that most of the values in cabin are empty, so we can drop it\ntrain_df.drop('Cabin',axis=1,inplace=True)\ntest_df.drop('Cabin',axis=1,inplace=True)","3848dba2":"whole_df = train_df.append(test_df)\nwhole_df['Title'] = whole_df.Name.str.extract(r'([A-Za-z]+)\\.',expand=False)\nwhole_df.Title.value_counts()","451428ef":"Common_Title = ['Mr','Mrs','Master']\nwhole_df['Title'].replace(['Lady','Mlle','Ms','Mme','Miss'],'Mrs',inplace=True)\nwhole_df['Title'].replace(['Sir', 'Rev'], 'Mr', inplace=True)\nwhole_df['Title'][~whole_df.Title.isin(Common_Title)] = 'Others'","d0c0966f":"train_df = whole_df[:len(train_df)]\ntest_df = whole_df[len(train_df):]\nAgeMedian_by_titles = train_df.groupby('Title')['Age'].median()\n","6576ca9e":"for title in AgeMedian_by_titles.index:\n    train_df['Age'][(train_df.Age.isnull()) & (train_df.Title == title)] = AgeMedian_by_titles[title]\n    test_df['Age'][(test_df.Age.isnull()) & (test_df.Title == title)] = AgeMedian_by_titles[title]","071e7561":"test_df.info()","87b8c886":"train_df['Embarked'].fillna('S',inplace=True)","fee40688":"test_df[test_df['Fare'].isnull()]","1b4fa4d8":"test_df['Fare'].fillna(7.854, inplace=True)","55569e4b":"train_df['Fare'].sort_values(ascending=False).head()\ntrain_df.loc[train_df.Fare>512, 'Fare'] = 263","e578bfb9":"train_df['Sex'] = train_df['Sex'].map({'female':1,'male':0}).astype('int')\ntest_df['Sex'] = test_df['Sex'].map({'female':1, 'male':0}).astype('int')\n\ntrain_df['Embarked'] = train_df['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')\ntest_df['Embarked'] = test_df['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype('int')","04b14b7f":"train_df['AgeBin_5'] = pd.qcut(train_df['Age'], 5)\ntest_df['AgeBin_5'] = pd.qcut(test_df['Age'], 5)\n\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x='AgeBin_5', y='Survived', data=train_df)\nplt.show()","06139200":"train_df['FareBin_5'] = pd.qcut(train_df['Fare'], 5)\ntest_df['FareBin_5'] = pd.qcut(test_df['Fare'], 5)\n\nfig = plt.figure(figsize=(12,5))\nsns.barplot(x='FareBin_5', y='Survived', data=train_df)\nplt.show()","cd02bc22":"label = LabelEncoder()\ntrain_df['AgeBin_Code_5'] = label.fit_transform(train_df['AgeBin_5'])\ntest_df['AgeBin_Code_5'] = label.fit_transform(test_df['AgeBin_5'])\nlabel = LabelEncoder()\ntrain_df['FareBin_Code_5'] = label.fit_transform(train_df['FareBin_5'])\ntest_df['FareBin_Code_5'] = label.fit_transform(test_df['FareBin_5'])","7746e844":"train_df['FamilySize'] = train_df.SibSp + train_df.Parch + 1\ntest_df['FamilySize'] = test_df.SibSp + test_df.Parch + 1\n\ntrain_df['Alone'] = train_df.FamilySize.map(lambda x: 1 if x == 1 else 0)\ntest_df['Alone'] = test_df.FamilySize.map(lambda x: 1 if x == 1 else 0)","9cb5550f":"train_df['Title_Code'] = train_df.Title.map({'Mr':0, 'Mrs':1, 'Master':2, 'Others':3}).astype('int')\ntest_df['Title_Code'] = test_df.Title.map({'Mr':0, 'Mrs':1, 'Master':2, 'Others':3}).astype('int')","b8511dd1":"whole_df = train_df.append(test_df)\nwhole_df['Surname'] = whole_df.Name.str.extract(r'([A-Za-z]+),', expand=False)\nwhole_df['TixPref'] = whole_df.Ticket.str.extract(r'(.*\\d)', expand=False)\nwhole_df['SurTix'] = whole_df['Surname'] + whole_df['TixPref']\nwhole_df['IsFamily'] = whole_df.SurTix.duplicated(keep=False)*1\nsns.countplot(whole_df.IsFamily)\nplt.show()","fd68a098":"whole_df['Child'] = whole_df.Age.map(lambda x: 1 if x <= 13 else 0)\nFamilyWithChild = whole_df[(whole_df.IsFamily==1)&(whole_df.Child==1)]['SurTix'].unique()\nprint('There are {} families with children.'.format(len(FamilyWithChild)))","2cad5892":"whole_df['FamilyId'] = 0\nx = 1\nfor tix in FamilyWithChild:\n    whole_df.loc[whole_df.SurTix==tix, ['FamilyId']] = x\n    x += 1","02395660":"whole_df['SurvivedDemo'] = whole_df['Survived'].fillna(9)\npd.crosstab(whole_df.FamilyId, whole_df.SurvivedDemo).drop([0]).plot(kind='bar', stacked=True, color=['black','g','grey'], figsize=(13,5))\nplt.show()","8782cdbe":"whole_df['ConnectedSurvival'] = 1 \nSurvived_by_FamilyId = whole_df.groupby('FamilyId').Survived.sum()\nfor i in range(1, len(FamilyWithChild)+1):\n    if Survived_by_FamilyId[i] >= 1:\n        whole_df.loc[whole_df.FamilyId==i, ['ConnectedSurvival']] = 2\n    elif Survived_by_FamilyId[i] == 0:\n        whole_df.loc[whole_df.FamilyId==i, ['ConnectedSurvival']] = 0\ntrain_df = whole_df[:len(train_df)]\ntest_df = whole_df[len(train_df):]\nsns.barplot(x='ConnectedSurvival', y='Survived', data=train_df)\nplt.show()","bc3e343e":"X = train_df.drop(['Name', 'Parch', 'PassengerId', 'SibSp', \n                           'Ticket', 'Title', 'AgeBin_5', 'FareBin_5',  \n                           'Surname', 'TixPref', 'SurTix', 'IsFamily', 'Child', \n                           'FamilyId', 'Survived', 'SurvivedDemo', 'Age', 'Fare'], axis=1)\n\ny = train_df['Survived']","e5bcd4ce":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y)","6929dfd5":"final = ['Title_Code', 'ConnectedSurvival', 'FareBin_Code_5', 'Pclass',  'FamilySize']","74a78db0":"model = LogisticRegression()\nmodel.fit(X_train[final],y_train)","e4637244":"print(f\"Accuracy score for logistic regression model is {model.score(X_test[final],y_test)*100}\")","68444d16":"# Checking cross val score for this model\ncross_val_score(model, X[final],y,cv=3)","7d15a762":"predict = model.predict(X_test[final])\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)","5e80f5b9":"\nmodel = RandomForestClassifier(n_estimators=100, bootstrap=True, criterion='entropy',\n                               min_samples_leaf=5, min_samples_split=4, random_state=42)\n\nmodel.fit(X_train[final],y_train)\n\nmodel.score(X_test[final],y_test)","473d27cc":"# Checking cross val score for this model\ncross_val_score(model, X[final],y,cv=3)","782fc3f7":"# Plotting the confusion matrix for this model\npredict = model.predict(X_test[final])\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)\n","6548b6f8":"# Classification report for Logistic Regression\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test,predict))","7484b950":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train[final],y_train)","bbe5ac9f":"print(f\"Accuracy score for Decision Tree Classifier is {model.score(X_test[final],y_test)*100}\")","8d15405b":"# Checking cross val score for this model\ncross_val_score(model, X[final],y,cv=3)","03af9615":"# Plotting the confusion matrix for this model\npredict = model.predict(X_test[final])\ncf = confusion_matrix(y_test,predict)\nsns.heatmap(cf, cmap='Reds',annot=True)","a32058b6":"# Classification report for Decision Tree Classifier\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test,predict))","58171acd":"### Fare","d63dfec0":"### Cabin","727dd8fc":"# Reading Data","6a8c6e68":"## Decision Tree Classifier","5b8e14b7":"### Age and Title","f58f147a":"## Logistic Regression","863221b9":"### Embarked","9c078c20":"### RandomForestClassifier","0e4c3585":"# Data Transformation","d6b524ae":"## UPVOTE if you liked the work","0a0fd28f":"# MODELS","efddfbae":"# Data Exploration"}}