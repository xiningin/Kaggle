{"cell_type":{"04ce1b0a":"code","d98b1f96":"code","8648d6ba":"code","3aa397c9":"code","c5112c6a":"code","60901bc7":"code","a892af1d":"code","b8bcf8b5":"code","6e9aa0ca":"code","603ef33f":"code","f633ad00":"code","cf889830":"code","395009fd":"code","485a5358":"code","3cdf3c0f":"code","f0a6e9d5":"code","7e23277b":"code","0ecbe627":"code","4f41ad9a":"code","96361a57":"code","15734dbd":"code","1153543b":"code","dd90df02":"code","65feb915":"code","fe9d3183":"code","01269f17":"code","16ae664e":"code","8ad0123d":"code","14ff5060":"code","9346b168":"code","de298600":"code","4f712965":"code","b6418d8c":"code","bd0f3780":"code","263f8ef7":"code","7fd6f294":"markdown","dc6c905e":"markdown"},"source":{"04ce1b0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d98b1f96":"test = pd.read_csv(\"..\/input\/hackerearth-ml-challenge-pet-adoption\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/hackerearth-ml-challenge-pet-adoption\/train.csv\")","8648d6ba":"test","3aa397c9":"train","c5112c6a":"test","60901bc7":"train.drop(['breed_category','pet_category'],axis=1)","a892af1d":"dataset = pd.concat([train.drop(['breed_category','pet_category'],axis=1),test])\ndataset['issue_date'] = pd.to_datetime(dataset['issue_date'])\ndataset['listing_date'] = pd.to_datetime(dataset['listing_date'])\ndataset['duration'] = (dataset['listing_date'] - dataset['issue_date']).dt.days  \ndataset = dataset.drop(['pet_id','issue_date','listing_date'],axis=1)\ndataset ","b8bcf8b5":"info = pd.DataFrame()\ninfo['length(m)'] = [np.percentile(dataset['length(m)'],25*i) for i in range(1,4)]\ninfo['height(cm)'] = [np.percentile(dataset['height(cm)'],25*i) for i in range(1,4)]\ninfo['duration'] = [np.percentile(dataset['duration'],25*i) for i in range(1,4)]\ninfo","6e9aa0ca":"info.loc[3] = [2.5*info.loc[0,column] - 1.5*info.loc[2,column] for column in info.columns]\ninfo.loc[4] = [2.5*info.loc[2,column] - 1.5*info.loc[0,column] for column in info.columns]\ninfo","603ef33f":"def range_part(column,value):\n    if value > info.loc[4,column]:\n        return 5\n    elif value > info.loc[2,column]:\n        return 4\n    elif value > info.loc[1,column]:\n        return 3\n    elif value > info.loc[0,column]:\n        return 2\n    elif value > info.loc[3,column]:\n        return 1\n    else:\n        return 0","f633ad00":"dataset.dtypes","cf889830":"df = dataset['color_type'].value_counts().plot(kind='barh')\ndf.plot(figsize=(10,10));","395009fd":"numerical = dataset.dtypes[dataset.dtypes != object].index","485a5358":"dataset['condition'].value_counts().plot(kind='barh')","3cdf3c0f":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2,3,figsize=(10,10))\n\nfor i in range(3):\n    dataset.boxplot(column=list(numerical)[i], ax=ax[0,i])\n    ax[0,i].title.set_text(numerical[i])\n\nfor i in range(3):\n    dataset.boxplot(column=list(numerical)[i+3], ax=ax[1,i])\n    ax[1,i].title.set_text(numerical[3+i])","f0a6e9d5":"from tqdm import tqdm\ntqdm.pandas()\ndataset['length_range'] = dataset['length(m)'].progress_apply(lambda x:range_part('length(m)',x))\ndataset['height_range'] = dataset['height(cm)'].progress_apply(lambda x:range_part('height(cm)',x))\ndataset['duration_range'] = dataset['duration'].progress_apply(lambda x:range_part('duration',x))\ndataset","7e23277b":"from sklearn.preprocessing import LabelEncoder\ndataset['color_number'] = LabelEncoder().fit_transform(dataset['color_type'])\ndataset = dataset[['condition','length_range','height_range','duration_range','color_number','X1','X2']].fillna(-1)\ndataset","0ecbe627":"dataset['X2'].value_counts().plot(kind='barh')","4f41ad9a":"dataset['X1'].value_counts().plot(kind='barh')","96361a57":"from sklearn.linear_model import LogisticRegression\nX_tr, y_tr = dataset.iloc[:len(train)], train['breed_category']\nX_test = dataset.iloc[len(train):]\nLR = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial').fit(X_tr, y_tr)\ny_LR = LR.predict(X_test)\npd.DataFrame(y_LR, columns=['Value'])['Value'].value_counts().plot(kind='barh')","15734dbd":"from sklearn.svm import SVC\nSVM = SVC(decision_function_shape=\"ovo\").fit(X_tr, y_tr)\ny_SVC = SVM.predict(X_test)\npd.DataFrame(y_SVC, columns=['Value'])['Value'].value_counts().plot(kind='barh')","1153543b":"from sklearn.ensemble import RandomForestClassifier\nRF = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0).fit(X_tr, y_tr)\ny_RF = RF.predict(X_test)\npd.DataFrame(y_RF, columns=['Value'])['Value'].value_counts().plot(kind='barh')","dd90df02":"from sklearn.neural_network import MLPClassifier\nNN = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(150, 10), random_state=1).fit(X_tr, y_tr)\ny_NN = NN.predict(X_test)\npd.DataFrame(y_NN, columns=['Value'])['Value'].value_counts().plot(kind='barh')","65feb915":"z_tr = train['pet_category']\nLR = LogisticRegression(random_state=0, solver='lbfgs', multi_class='multinomial').fit(X_tr, z_tr)\nz_LR = LR.predict(X_test)\nSVM = SVC(decision_function_shape=\"ovo\").fit(X_tr, z_tr)\nz_SVC = SVM.predict(X_test)\nRF = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0).fit(X_tr, z_tr)\nz_RF = RF.predict(X_test)\nNN = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(150, 10), random_state=1).fit(X_tr, z_tr)\nz_NN = NN.predict(X_test)","fe9d3183":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2,2,figsize=(10,10))\n\ntitle = ['LR', 'SVC', 'RF','NN']\ny_value = [y_LR, y_SVC, y_RF,y_NN]\nz_value = [z_LR, z_SVC, z_RF,z_NN]\n\nfor i in range(2):\n    pd.DataFrame(y_value[i], columns=['Value'])['Value'].value_counts().plot(kind='barh', ax=ax[0,i])\n    ax[0,i].title.set_text(title[i])\n\nfor i in range(2):\n    pd.DataFrame(y_value[2+i], columns=['Value'])['Value'].value_counts().plot(kind='barh', ax=ax[1,i])\n    ax[1,i].title.set_text(title[2+i])","01269f17":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(2,2,figsize=(10,10))\n\ntitle = ['LR', 'SVC', 'RF','NN']\ny_value = [y_LR, y_SVC, y_RF,y_NN]\nz_value = [z_LR, z_SVC, z_RF,z_NN]\n\nfor i in range(2):\n    pd.DataFrame(z_value[i], columns=['Value'])['Value'].value_counts().plot(kind='barh', ax=ax[0,i])\n    ax[0,i].title.set_text(title[i])\n\nfor i in range(2):\n    pd.DataFrame(z_value[2+i], columns=['Value'])['Value'].value_counts().plot(kind='barh', ax=ax[1,i])\n    ax[1,i].title.set_text(title[2+i])","16ae664e":"train.boxplot(column='X1')","8ad0123d":"train['breed_category'].value_counts().plot(kind='barh')","14ff5060":"train['pet_category'].value_counts().plot(kind='barh')","9346b168":"[y_LR, y_SVC, y_RF,y_NN]","de298600":"test","4f712965":"submission = pd.DataFrame()\nsubmission['pet_id'] = test['pet_id']\nsubmission['breed_category'] = y_LR\nsubmission['pet_category'] = z_LR\nsubmission.to_csv('submission_LogisticRegression.csv',index=False)","b6418d8c":"submission = pd.DataFrame()\nsubmission['pet_id'] = test['pet_id']\nsubmission['breed_category'] = y_SVC\nsubmission['pet_category'] = z_SVC\nsubmission.to_csv('submission_SupportVectorMachine.csv',index=False)","bd0f3780":"submission = pd.DataFrame()\nsubmission['pet_id'] = test['pet_id']\nsubmission['breed_category'] = y_RF\nsubmission['pet_category'] = z_RF\nsubmission.to_csv('submission_RandomForest.csv',index=False)","263f8ef7":"submission = pd.DataFrame()\nsubmission['pet_id'] = test['pet_id']\nsubmission['breed_category'] = y_NN\nsubmission['pet_category'] = z_NN\nsubmission.to_csv('submission_NeuralNetwork.csv',index=False)","7fd6f294":"* Q1 - 1.5 * IQR or Q3 + 1.5 * IQR\n* Q1 - 1.5 * (Q3-Q1) or Q3 + 1.5 * (Q3-Q1)\n* 2.5 Q1 - 1.5 Q3 or 2.5 Q3 - 1.5 Q1 ","dc6c905e":"https:\/\/stackabuse.com\/classification-in-python-with-scikit-learn-and-pandas\/"}}