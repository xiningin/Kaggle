{"cell_type":{"f4c6a1e9":"code","4348e1a8":"code","c19247ce":"code","23132782":"code","70dd0080":"code","ad4febb4":"code","3dcfcc53":"code","a31a1623":"code","d5b90d2b":"markdown","9b29b780":"markdown","adeca86f":"markdown","9a9aa5f4":"markdown","572a496b":"markdown","a89402ee":"markdown"},"source":{"f4c6a1e9":"# Install paperai project\n!pip install git+https:\/\/github.com\/neuml\/paperai","4348e1a8":"from paperai.highlights import Highlights\nfrom paperai.tokenizer import Tokenizer\n\nfrom nltk.corpus import stopwords\n\nfrom wordcloud import WordCloud\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nimport pycountry\n\nSTOP_WORDS = set(stopwords.words(\"english\")) \n\n# Tokenizes text and removes stopwords\ndef tokenize(text, case_sensitive=False):\n    # Get list of accepted tokens\n    tokens = [token for token in Tokenizer.tokenize(text) if token not in Highlights.STOP_WORDS]\n    \n    if case_sensitive:\n        # Filter original tokens to preserve token casing\n        return [token for token in text.split() if token.lower() in tokens]\n\n    return tokens\n\n# Country data\ncountries = [c.name for c in pycountry.countries]\ncountries = countries + [\"USA\"]\n\n# Lookup country name for alpha code. If already an alpha code, return value\ndef countryname(x):\n    country = pycountry.countries.get(alpha_3=x)\n    return country.name if country else x\n    \n# Resolve alpha code for country name\ndef countrycode(x):\n    return pycountry.countries.get(name=x).alpha_3\n\n# Tokenize and filter only country names\ndef countrynames(x):\n    return [countryname(country) for country in countries if country.lower() in x.lower()]\n\n# Word Cloud colors\ndef wcolors(word=None, font_size=None, position=None,  orientation=None, font_path=None, random_state=None):\n    colors = [\"#7e57c2\", \"#03a9f4\", \"#011ffd\", \"#ff9800\", \"#ff2079\"]\n    return np.random.choice(colors)\n\n# Word Cloud visualization\ndef wordcloud(df, title, recent):\n    # Set random seed to have reproducible results\n    np.random.seed(64)\n    \n    wc = WordCloud(\n        background_color=\"white\" if recent else \"black\",\n        max_words=200,\n        max_font_size=40,\n        scale=5,\n        random_state=0\n    ).generate_from_frequencies(df)\n\n    wc.recolor(color_func=wcolors)\n    \n    fig = plt.figure(1, figsize=(15,15))\n    plt.axis('off')\n\n    if title:\n        fig.suptitle(title, fontsize=14)\n        fig.subplots_adjust(top=2.3)\n\n    plt.imshow(wc),\n    plt.show()\n\n# Map visualization\ndef mapplot(df, title, bartitle, color1, color2):\n    fig = go.Figure(data=go.Choropleth(\n        locations = df[\"Code\"],\n        z = df[\"Count\"],\n        text = df[\"Country\"],\n        colorscale = [(0, color1), (1, color2)],\n        showscale = False,\n        marker_line_color=\"darkgray\",\n        marker_line_width=0.5,\n        colorbar_title = bartitle,\n    ))\n\n    fig.update_layout(\n        title={\n            'text': title,\n            'y':0.9,\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n        geo=dict(\n            showframe=False,\n            showcoastlines=False,\n            projection_type='equirectangular'\n        )\n    )\n    \n    fig.show(config={\"displayModeBar\": False, \"scrollZoom\": False})\n","c19247ce":"# Build a word cloud for Top 25 cited articles\ndef citecloud(recent):\n    # Connect to database\n    db = sqlite3.connect(\"..\/input\/cord-19-analysis-with-sentence-embeddings\/cord19q\/articles.sqlite\")\n\n    # Citations\n    citations = pd.read_sql_query(\"select text from sections where article in \" + \n                                \"(select a.id from articles a join citations c on a.title = c.title \" + \n                                 \"where tags is %s null %s order by mentions desc limit 25)\" % (\"not\" if recent else \"\", \"and published <= '2020-01-01' and a.title != \" + \n                                                                                                                        \"'World Health Organization'\" if not recent else \"\"), db)\n    freqs = pd.Series(np.concatenate([tokenize(x) for x in citations.Text])).value_counts()\n    wordcloud(freqs, \"Most Frequent Words In Highly Cited %s Papers\" % (\"COVID-19\" if recent else \"Historical\"), recent)","23132782":"# Show top countries for Top 25 cited articles\ndef citemap(recent):\n    # Connect to database\n    db = sqlite3.connect(\"..\/input\/cord-19-analysis-with-sentence-embeddings\/cord19q\/articles.sqlite\")\n\n    sections = pd.read_sql_query(\"select text from sections where article in (select id from articles a join citations c on a.title = c.title \" + \n                                 \"where tags is %s null %s order by mentions desc limit 25)\" % (\"not\" if recent else \"\", \"and published <= '2020-01-01' and a.title != \" + \n                                                                                                                         \"'World Health Organization'\" if not recent else \"\"), db)\n    \n    # Filter tokens to only country names. Build dataframe of Country, Count, Code\n    mentions = pd.Series(np.concatenate([countrynames(x) for x in sections.Text])).value_counts()\n    mentions = mentions.rename_axis(\"Country\").reset_index(name=\"Count\")\n    mentions[\"Code\"] = [countrycode(x) for x in mentions[\"Country\"]]\n\n    mapplot(mentions, \"Highly Cited %s Papers - Country Mentioned\" % (\"COVID-19\" if recent else \"Historical\"), \"Articles by Country\", \n            \"#fffde7\" if recent else \"#ffcdd2\", \"#f57f17\" if recent else \"#b71c1c\")","70dd0080":"import datetime\nimport os\nimport sqlite3\n\nimport pandas as pd\n\nfrom IPython.core.display import display, HTML\n\n# Workaround for mdv terminal width issue\nos.environ[\"COLUMNS\"] = \"80\"\n\nfrom paperai.query import Query\n\ndef design(df):\n    # Study Design\n    return \"%s\" % Query.design(df[\"Design\"]) + (\"<br\/><br\/>\" + Query.text(df[\"Sample\"]) if df[\"Sample\"] else \"\")\n\ndef citations(recent):\n    # Connect to database\n    db = sqlite3.connect(\"..\/input\/cord-19-analysis-with-sentence-embeddings\/cord19q\/articles.sqlite\")\n\n    # Citations\n    citations = pd.read_sql_query(\"select published, authors, publication, a.title, reference, mentions as Cited from articles a join citations c on a.title = c.title \" + \n                                  \"where tags is %s null %s order by mentions desc limit 25\" % (\"not\" if recent else \"\", \"and published <= '2020-01-01' and a.title != \" + \n                                                                                                                         \"'World Health Organization'\" if not recent else \"\"), db)\n    citations[\"Published\"] = citations[\"Published\"].apply(Query.date)\n    citations[\"Authors\"] = citations[\"Authors\"].apply(Query.authors)\n    citations[\"Title\"] = \"<a href='\" + citations[\"Reference\"] + \"'>\" + citations[\"Title\"] + \"<\/a>\"\n\n    citations.style.bar(subset=[\"Cited\"], color='#d65f5f')\n    citations.style.hide_index()\n\n    # Remove unnecessary columns\n    citations = citations.drop(\"Reference\", 1)\n\n    # Set index to be 1-based\n    citations.index = np.arange(1, len(citations) + 1)\n\n    ## Show table as HTML\n    display(HTML(citations.to_html(escape=False)))\n","ad4febb4":"citecloud(True)","3dcfcc53":"citemap(True)","a31a1623":"citations(True)","d5b90d2b":"## Highly Cited COVID-19 Papers by Country Mentioned\nThe following map shows the papers by country mentioned. Once again, China is mentioned significantly more given that the outbreak started there and the most cited papers cover the period of the initial outbreak.","9b29b780":"# How these rankings work\nEach paper in the CORD-19 dataset has a references section with citations. The citations for the full dataset have been loaded into a database via [another notebook](https:\/\/www.kaggle.com\/davidmezzetti\/cord-19-analysis-with-sentence-embeddings). Each paper that exists in the dataset is stored along with the number of times it's cited. This method doesn't count citations that are not in the CORD-19 dataset. It only considers a citation if it's a citation within a COVID-19 tagged paper. ","adeca86f":"# CORD-19 Most Influential Papers\n\n![CORD19](https:\/\/pages.semanticscholar.org\/hs-fs\/hubfs\/covid-image.png?width=300&name=covid-image.png)\n\nThis notebook shows the most cited and influential papers within the CORD-19 dataset. This notebook focuses on citations related to articles tagged as COVID-19. The goal with this notebook is to give a good starting point in learning more about COVID-19. The more times researchers are citing a paper, the more likely it's to be good quality work that is worth reviewing. \n","9a9aa5f4":"## The Highly Cited COVID-19 Papers\nBelow is the table with the Top 25 papers. Based on the titles, you can once again see the theme of covering the initial outbreak. The cited column is the number of documents within the CORD-19 dataset that reference that document. ","572a496b":"# Highly Cited COVID-19 Papers\nThe following papers are the most cited recent papers. Papers that have been around longer will be cited more than recent papers. But even with that being said, these papers are typically well respected, full of good background information and educational on how we got here with COVID-19. Many of these papers discuss the origins of the virus when the world was just first finding out what was about to be unleashed. ","a89402ee":"## Most Frequent Words in Highly Cited COVID-19 Papers\nThe following wordcloud shows the most frequent words for the highly cited COVID-19 papers. Given that many of these articles are from when the outbreak first started, you'll see a lot of terms related to Wuhan and China. "}}