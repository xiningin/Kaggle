{"cell_type":{"e49d7199":"code","323644e7":"code","62979a7c":"code","530f4d59":"code","4e1e3865":"code","9e155f40":"code","d20fd44b":"code","91282f83":"code","e156ec24":"code","c38869bc":"code","cba8c91c":"code","818dc197":"code","3077bc6e":"code","c9504189":"code","f0a0bc86":"code","ad9859f6":"code","03241783":"code","08f7c26b":"markdown","6fba4f6c":"markdown","f9e42e82":"markdown","74829c52":"markdown","f4ca1274":"markdown","0cb12ea1":"markdown","ee2e17cb":"markdown","2dd73da8":"markdown","ddf28c77":"markdown","24fddfb2":"markdown","ee6dfdd8":"markdown","d1597b01":"markdown","b97109a8":"markdown","d471b640":"markdown","7338da8e":"markdown","9b28e716":"markdown"},"source":{"e49d7199":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score\n\nimport os\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# Any results you write to the current directory are saved as output.","323644e7":"os.listdir('\/kaggle\/input')","62979a7c":"!python3 \/kaggle\/input\/itis-hackathon\/make_dataset_kaggle.py \/kaggle\/input\/itis-hackathon\/","530f4d59":"interim_test = pd.read_csv('\/kaggle\/working\/interim_test.csv')\ninterim_train_09 = pd.read_csv('\/kaggle\/working\/interim_train_09.csv')\ninterim_train_10 = pd.read_csv('\/kaggle\/working\/interim_train_10.csv')","4e1e3865":"interim_train_09 = interim_train_09.drop(columns=['ID','SERVICE_INT_ID',\n                                                  'ADMIN_QUESTION_INT_ID',\n                                                  'FEATURE_INT_ID','CHANNEL_INT_ID',\n                                                  'ACTIVATE_DATE', 'PHYZ_TYPE',\n                                                  'CITY_NAME'])","9e155f40":"interim_train_10 = interim_train_10.drop(columns=['ID','SERVICE_INT_ID',\n                                                  'ADMIN_QUESTION_INT_ID',\n                                                  'FEATURE_INT_ID','CHANNEL_INT_ID',\n                                                  'ACTIVATE_DATE', 'PHYZ_TYPE',\n                                                  'CITY_NAME'])","d20fd44b":"interim_test = interim_test.drop(columns=['ACTIVATE_DATE', 'PHYZ_TYPE',\n                                                  'CITY_NAME'])","91282f83":"interim_train_09.fillna(0, inplace=True)\ninterim_train_10.fillna(0, inplace=True)\ninterim_test.fillna(0, inplace=True)","e156ec24":"def align_data(train: pd.DataFrame, test: pd.DataFrame) -> (pd.DataFrame, pd.DataFrame):\n    \"\"\"\u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 train \u0438 test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\n    \n    Arguments:\n        train {pd.DataFrame} -- train \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n        test {pd.DataFrame} -- test \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n    Returns:\n        train {pd.DataFrame}, test {pd.DataFrame} - \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438\n    \"\"\"\n    intersect_list = np.intersect1d(train.columns, test.columns)\n    if \"TARGET\" not in intersect_list:\n        train = train[np.append(intersect_list, \"TARGET\")]\n    else:\n        train = train[intersect_list]\n    test = test[intersect_list]\n    return train, test","c38869bc":"train_09, test_10 = align_data(interim_train_09, interim_train_10)","cba8c91c":"train_09.shape, test_10.shape","818dc197":"def fit_and_pred_logreg(train, test):\n    \"\"\"Fit and predict LogisticRegression\n    \n    Arguments:\n        train {pd.DataFrame} -- processed train dataset\n        test {pd.DataFrame} -- processed test dataset\n    \n    Returns:\n        model {sklearn.BaseEstimator} -- fit sklearn model\n        y_pred {np.array} -- predictions\n    \"\"\"\n    model = LogisticRegression(class_weight=\"balanced\", random_state=17, n_jobs=-1)\n    x_train = train.drop(columns=[\"TARGET\"])\n    y_train = train.TARGET\n    scaler = StandardScaler()\n    x_train = scaler.fit_transform(x_train)\n    x_test = scaler.transform(test)\n\n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n\n    return model, y_pred","3077bc6e":"y_test = test_10.TARGET\nmodel, y_pred = fit_and_pred_logreg(train_09, test_10.drop(columns='TARGET'))","c9504189":"print(classification_report(y_true=y_test, y_pred=y_pred))\nprint(confusion_matrix(y_true=y_test, y_pred=y_pred))","f0a0bc86":"train_10, test = align_data(interim_train_10, interim_test)","ad9859f6":"model, y_pred = fit_and_pred_logreg(train_10, test)","03241783":"interim_test['PREDICT'] = y_pred\ninterim_test[['USER_ID', 'PREDICT']].to_csv('baseline_submission.csv', index=False) # \u0412 \u043f\u0430\u043f\u043a\u0435 output. \u0412\u044b\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0440\u0443\u0447\u043a\u0430\u043c\u0438","08f7c26b":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0432 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0435-\u043e\u043a\u0442\u044f\u0431\u0440\u0435-\u043d\u043e\u044f\u0431\u0440\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u044b \u043e\u0431\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043c\u0435\u0441\u044f\u0446\u0430\u0445.\n\u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u043e\u044f\u0431\u0440\u044f, \u043e\u0431\u0443\u0447\u0430\u044f\u0441\u044c \u043d\u0430 \u043e\u043a\u0442\u044f\u0431\u0440\u0435. (\u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u0447\u0442\u043e \u0438 \u0432 \u043a\u043e\u0434\u0435 \u0432\u044b\u0448\u0435)","6fba4f6c":"### \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u0435 \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u043a\u0442\u044f\u0431\u0440\u044c","f9e42e82":"### \u0423\u0437\u043d\u0430\u0435\u043c \u0433\u0434\u0435 \u043b\u0435\u0436\u0430\u0442 \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b (\u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0432 \u043a\u0435\u0440\u043d\u0435\u043b\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u043f\u0440\u0430\u0432\u0430)","74829c52":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c (\u0438\u0437 \"\u0441\u044b\u0440\u044b\u0445\" \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432)","f4ca1274":"### \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435","0cb12ea1":"### \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0448\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","ee2e17cb":"# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","2dd73da8":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","ddf28c77":"### \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0421\u043a\u0440\u0438\u043f\u0442 \u043d\u0435 \u0438\u0437 \u0432\u0441\u0435\u0445 \"\u0441\u044b\u0440\u044b\u0445\" \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438!","24fddfb2":"`ID`,`SERVICE_INT_ID`,`ADMIN_QUESTION_INT_ID`,`FEATURE_INT_ID`,`CHANNEL_INT_ID` - \u042d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043a \u0422\u0430\u0440\u0433\u0435\u0442\u0443, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u044b \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0435\u043c (\u044d\u0442\u043e \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f\u0445)","ee6dfdd8":"# \u0421\u0430\u043c\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","d1597b01":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0417\u0434\u0435\u0441\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u0442\u0430\u043a\u0436\u0435 \u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438!","b97109a8":"# \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043d\u043e\u0433\u043e, \u043e\u043d\u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e One-Hot Encoding, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0431\u044b\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435","d471b640":"### \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","7338da8e":"### \u0421\u043e\u0433\u043b\u0430\u0441\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","9b28e716":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c submission"}}