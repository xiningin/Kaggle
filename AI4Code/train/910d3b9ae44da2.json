{"cell_type":{"7a65ab82":"code","770f0c7e":"code","eaa5b819":"code","23480a37":"code","9faea2c6":"code","dcabeccb":"code","cc34a347":"code","eb983a3c":"code","f6ccaaa0":"code","bf33e805":"code","19a2d934":"code","248a6c71":"code","c549d41f":"markdown","e05320cd":"markdown","41101e80":"markdown","cd02a227":"markdown","6f0b1174":"markdown","695d3356":"markdown","ba139073":"markdown"},"source":{"7a65ab82":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn import preprocessing\nfrom sklearn import linear_model","770f0c7e":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsubmission = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv')","eaa5b819":"FOLDS = 5\nSEED = 43","23480a37":"# suffle dataset\ntrain = train.sample(frac=1, random_state=SEED).reset_index(drop=True)\n# create kfold columns\ntrain['kfold'] = -1\n# initiate kfold class\nkf = KFold(n_splits = FOLDS, random_state=SEED, shuffle=True)\n\n# fill the new column kfold\nfor f, (t_, v_) in enumerate(kf.split(X=train)):\n    train.loc[v_, 'kfold'] = f","9faea2c6":"train.kfold.value_counts()","dcabeccb":"# Calculate Means of targets\ntrain['reactivity'] = train['reactivity'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_pH10'] = train['deg_Mg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_pH10'] = train['deg_pH10'].apply(lambda x: np.mean(x))\ntrain['deg_Mg_50C'] = train['deg_Mg_50C'].apply(lambda x: np.mean(x))\ntrain['deg_50C'] = train['deg_50C'].apply(lambda x: np.mean(x))","cc34a347":"def mcrmse_loss(y_true, y_pred, N=3):\n    \"\"\"\n    Calculates competition eval metric.\n    From: https:\/\/www.kaggle.com\/kaushal2896\/openvaccine-xgboost-baseline\n    \"\"\"\n    assert len(y_true) == len(y_pred)\n    n = len(y_true)\n    return np.sum(np.sqrt(np.sum((y_true - y_pred)**2, axis=0)\/n)) \/ N","eb983a3c":"features = ['sequence', 'structure', 'predicted_loop_type']\ntargets = ['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C']\npreds_list = []\n\ndef run(fold):\n    \n    # training and validation sets\n    X_train = train[train.kfold != fold].reset_index(drop=True)\n    X_valid = train[train.kfold == fold].reset_index(drop=True)\n    \n    # training and validation labels\n    y_train = X_train[targets]\n    y_valid = X_valid[targets]\n    \n    # encode features\n    # initialize OneHotEncoder from sklearn\n    # we use handle_unknown='ignore' just because it is a baseline\n    # but we should figure it out a better way to encode the unknown values\n    # that we are going to find in the test dataset\n    ohe = preprocessing.OneHotEncoder(handle_unknown='ignore')\n    \n    # fit ohe on training and validation features\n    full_data = pd.concat(\n        [X_train[features], X_valid[features]],\n        axis=0\n    )\n    ohe.fit(full_data[features])\n    \n    # transform training and validation data\n    X_train = ohe.transform(X_train[features])\n    X_valid = ohe.transform(X_valid[features])\n    x_test = ohe.transform(test[features])\n    \n    # initialize regression model\n    model = linear_model.LinearRegression()\n    \n    # fit the model on training data\n    model.fit(X_train, y_train)\n    \n    # predict on validation data\n    valid_preds = model.predict(X_valid)\n    \n    mcrmse = mcrmse_loss(y_valid, valid_preds)\n    print(f\"FOLD {fold}\")\n    print(f\"Valid MCRMSE: {mcrmse}\")\n    print(\"\")\n    \n    # predict on test dataset\n    preds = model.predict(x_test)\n    preds_list.append(preds)","f6ccaaa0":"for f in range(FOLDS):\n    run(f)","bf33e805":"# average predictions of each of the folds models\npredictions = (preds_list[0] + preds_list[1] + preds_list[2] +\n               preds_list[3] + preds_list[4]) \/ FOLDS\n\npredictions = pd.DataFrame(predictions)","19a2d934":"# Create submission csv\nsubmission_df = predictions.loc[predictions.index.repeat(list(test['seq_length']))].reset_index(drop=True)\nsubmission_df = submission_df.rename(columns={0: 'reactivity', 1: 'deg_Mg_pH10', 2: 'deg_Mg_50C'})\nsubmission_df['id_seqpos'] = submission['id_seqpos']\nsubmission_df['deg_pH10'] = 0.0\nsubmission_df['deg_50C'] = 0.0\nsubmission_df = submission_df[['id_seqpos', 'reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']]\nsubmission_df.head()","248a6c71":"submission_df.to_csv('submission.csv', index=False)","c549d41f":"## Constants","e05320cd":"## Means of targets","41101e80":"## Create Folds","cd02a227":"## MCRMSE metric function","6f0b1174":"## Predictions and submission","695d3356":"## Training","ba139073":"## Run for all folds"}}