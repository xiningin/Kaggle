{"cell_type":{"6df8f4a9":"code","3d61cbc8":"code","73c2f622":"code","12e60fa7":"code","d18053cb":"code","7bce62e6":"code","6ccfb45d":"code","a2e69ea0":"code","a8f49020":"code","8669ef70":"code","7713d7a8":"code","531a1f9e":"code","d90436f0":"code","20f75088":"code","0825f01e":"code","5293af85":"code","89434c65":"code","00c999c4":"code","cf1de380":"code","7908010a":"code","76b0fbcc":"code","6ff9d43d":"code","08c5b172":"code","24fc615d":"code","f6656e71":"code","e7727529":"code","d81293ea":"code","3a46020d":"code","ed397fc4":"code","c159dd8d":"code","6314086d":"code","52d4ef0f":"code","204ba623":"code","15521bfe":"code","b6302841":"code","5bdb1d21":"code","d4913bdb":"code","c6f36d9e":"code","9e5bd5c2":"code","c3f25a98":"code","dd1ad94a":"code","95d0f5ee":"code","576f25d1":"code","e3c33fbd":"code","3c2b2b48":"code","851b7f2b":"code","f5b06487":"code","e7e96d76":"code","d671a8ac":"code","be260756":"code","55734d50":"code","c0991c19":"code","fa6416ae":"code","5e2b7e83":"code","ff81284d":"code","6a02fb18":"code","cf702be4":"code","0efef738":"code","b282b2e0":"code","ab3b75db":"code","8578823e":"code","ce94fed8":"code","fd70b4d0":"code","12f1ffaa":"code","b72f9600":"code","ec56f7d1":"code","bae11abd":"code","22aae70f":"code","06bff3ce":"code","27877637":"code","1d09a306":"code","b4a9c520":"code","d081b0b6":"code","00d3bee5":"code","7bbadfb5":"code","b6c6f05a":"code","fee76cd4":"code","ac83e29e":"code","046a698a":"code","748e24cd":"code","06fa25b8":"code","f858a2d5":"code","fad41a95":"code","c6b9810e":"code","7c6b339f":"code","2cec2ac5":"code","7c210ca1":"code","d8e21f69":"code","603daf8f":"code","512f47f8":"code","9a3e614a":"code","daf01a37":"code","60233e81":"code","247db1ac":"code","0ea1fea3":"code","704c184b":"code","247f46ae":"code","39d6c800":"code","9fad2165":"code","97739258":"code","66e79ce8":"code","8a4bafe3":"code","9ed3947d":"code","a527530b":"code","5c91e0e2":"code","db9eda01":"code","9d4f02d3":"code","8679f839":"code","64b7de38":"code","301a1a01":"code","d6786199":"code","9ed70707":"code","13c3f96b":"code","3044bc40":"code","c92c277a":"code","b4de2bbf":"code","30716801":"code","4db807e2":"code","1f16a48f":"code","0dab08a3":"code","45f29aac":"code","e183dbbc":"code","3ce39b48":"code","c9af9315":"code","c3a6f853":"code","cd7296d8":"code","e312c325":"code","145b282a":"code","5eee816d":"code","2909ed30":"code","b14dba8b":"code","77960eae":"code","58fad89e":"code","6eba09a4":"code","33f3abce":"code","833e9917":"code","9458055b":"code","2f0a5c97":"code","0dc24909":"code","14283581":"code","656e7d8b":"code","d594713d":"code","69c92bd7":"code","81dea8ca":"code","2b10dfee":"code","579b872a":"code","4a68a2b4":"code","7daba195":"code","925b782c":"code","0451a298":"code","c54e359d":"markdown","48949708":"markdown","8cfc24cc":"markdown","c0c1ccb8":"markdown","53162e47":"markdown","96744a94":"markdown","ed329dec":"markdown","2b2859d4":"markdown","c701e7e1":"markdown","bf0b78ca":"markdown","f6c50c56":"markdown","31b4ac43":"markdown","28db73e3":"markdown","9556337a":"markdown","cff8c070":"markdown","de6e284b":"markdown","24201bce":"markdown","6b4fcad8":"markdown","c28e3551":"markdown","02396c12":"markdown","6a28be54":"markdown","150f06b9":"markdown","aea95ba3":"markdown","ab4b2823":"markdown","b370d919":"markdown","ff8a35e9":"markdown","0e2a8dd2":"markdown","2dd47899":"markdown","1069efc9":"markdown","15892b04":"markdown","6ceddc40":"markdown","7949acb3":"markdown","31231384":"markdown","abf711b6":"markdown","cc162dc7":"markdown","2a4b9be3":"markdown","f11857fa":"markdown","0a7cd467":"markdown","0d651367":"markdown","ee48ee07":"markdown","fbd47b88":"markdown","04726843":"markdown","cc531cc8":"markdown","3e7a6ffb":"markdown","b277f4db":"markdown","ff588290":"markdown","22c207e8":"markdown","789ae1a5":"markdown","9f96b4ee":"markdown","9562a0ae":"markdown","3c3a1526":"markdown","e60c785c":"markdown","5fd46d87":"markdown","cae47291":"markdown","31ecf14a":"markdown","8d708938":"markdown","492e995a":"markdown","ad382d47":"markdown","ea179bf9":"markdown","72f1cb51":"markdown","c7d82a58":"markdown","eb7c2e3e":"markdown","8709da1a":"markdown","cc7ce50c":"markdown","d4a0981a":"markdown"},"source":{"6df8f4a9":"import warnings\nwarnings.filterwarnings('ignore')","3d61cbc8":"import pandas as pd, numpy as np, seaborn as sns,matplotlib.pyplot as plt","73c2f622":"train= pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","12e60fa7":"train.shape","d18053cb":"train.info()","7bce62e6":"train.describe()","6ccfb45d":"test=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","a2e69ea0":"test.shape","a8f49020":"test.info()","8669ef70":"test.describe()","7713d7a8":"test.info()","531a1f9e":"train.info()","d90436f0":"train['Pclass'].value_counts(ascending=False)","20f75088":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","0825f01e":"train['Pclass']=train['Pclass'].astype('object')\ntest['Pclass']=test['Pclass'].astype('object')","5293af85":"print(\"Train['Pclass']  : \",train.Pclass.dtype)\nprint(\"Test['Pclass']   : \",test.Pclass.dtype)","89434c65":"train['Survived'].value_counts(ascending=False)","00c999c4":"print(\"Train['Survived']  : \",train.Survived.dtype)","cf1de380":"train['Survived']=train['Survived'].astype('object')","7908010a":"print(\"Train['Survived']  : \",train.Survived.dtype)","76b0fbcc":"train['Pclass'] = train['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')\ntest['Pclass'] = test['Pclass'].replace({ 1 : '1st', 2: '2nd',3: '3rd'}).astype('category')","6ff9d43d":"train['Pclass'].value_counts(ascending=False)","08c5b172":"test['Pclass'].value_counts(ascending=False)","24fc615d":"train['Embarked'] = train['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')\ntest['Embarked'] = test['Embarked'].replace({ 'C' : 'Cherbourg', 'Q': 'Queenstown','S': 'Southampton'}).astype('object')","f6656e71":"train['Embarked'].value_counts(ascending=False)","e7727529":"test['Embarked'].value_counts(ascending=False)","d81293ea":"train.head()","3a46020d":"train.shape","ed397fc4":"train.describe()","c159dd8d":"train.info()","6314086d":"round(test.isnull().sum()*100\/len(test),2)","52d4ef0f":"test.isnull().sum()","204ba623":"round(train.isnull().sum()*100\/len(train),2)","15521bfe":"train.isnull().sum()","b6302841":"round(test.Cabin.isnull().sum()*100\/len(test),2)","5bdb1d21":"test.Cabin.isnull().sum()","d4913bdb":"pd.set_option('display.max_rows', None)\ntest.Cabin.value_counts(ascending=False)","c6f36d9e":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=test)\nplt.xticks(rotation=90)\nplt.show()","9e5bd5c2":"test['Cabin'] = test['Cabin'].replace(np.nan,'X')","c3f25a98":"test['Cabin'].isnull().sum()","dd1ad94a":"train.Cabin.value_counts(ascending=False)","95d0f5ee":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=test)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","576f25d1":"round(train.Cabin.isnull().sum()*100\/len(train),2)","e3c33fbd":"train.Cabin.isnull().sum()","3c2b2b48":"pd.set_option('display.max_rows', None)\ntrain.Cabin.value_counts(ascending=False)","851b7f2b":"plt.figure(figsize=(30,8))\nsns.countplot(x='Cabin',data=train)\nplt.xticks(rotation=90)\nplt.show()","f5b06487":"train['Cabin'] = train['Cabin'].replace(np.nan,'X')","e7e96d76":"train['Cabin'].isnull().sum()","d671a8ac":"test.Cabin.value_counts(ascending=False)","be260756":"plt.figure(figsize=(32,8))\nax=sns.countplot(x='Cabin',data=train)\nax.set_yscale('log')\nplt.xticks(rotation=90)\nplt.show()","55734d50":"round(test.Fare.isnull().sum()*100\/len(test),2)","c0991c19":"test.Fare.isnull().sum()","fa6416ae":"test.Fare.describe()","5e2b7e83":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Fare',data=test)\nplt.show()","ff81284d":"test['Fare'] = test['Fare'].replace(np.nan,train.Fare.median())","6a02fb18":"test.Fare.isnull().sum()","cf702be4":"round(train.Age.isnull().sum()*100\/len(train),2)","0efef738":"train.Age.isnull().sum()","b282b2e0":"train.Age.describe()","ab3b75db":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=train)\nplt.show()","8578823e":"train['Age'] = train['Age'].replace(np.nan,train.Age.median())","ce94fed8":"train['Age'].isnull().sum()","fd70b4d0":"round(test.Age.isnull().sum()*100\/len(test),2)","12f1ffaa":"test.Age.isnull().sum()","b72f9600":"test.Age.describe()","ec56f7d1":"plt.figure(figsize=(8,8))\nsns.violinplot(x='Age',data=test)\nplt.show()","bae11abd":"test['Age'] = test['Age'].replace(np.nan,train.Age.median())","22aae70f":"test['Age'].isnull().sum()","06bff3ce":"round(train.Embarked.isnull().sum()*100\/len(train),2)","27877637":"train.Embarked.isnull().sum()","1d09a306":"train.Embarked.value_counts(ascending=False)","b4a9c520":"train['Embarked'] = train['Embarked'].replace(np.nan,train.Embarked.mode()[0])","d081b0b6":"train.Embarked.mode()","00d3bee5":"train.Embarked.isnull().sum()","7bbadfb5":"train.isnull().sum()","b6c6f05a":"test.isnull().sum()","fee76cd4":"plt.figure(figsize = (10,10))\nsns.heatmap(train.corr(),annot = True,cmap=\"tab20c\")\nplt.show()","ac83e29e":"sns.pairplot(train)\nplt.show()","046a698a":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Pclass',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","748e24cd":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Sex',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","06fa25b8":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Age',x='Survived',hue='Survived',data=train)\nplt.show()","f858a2d5":"train.Age[train.Survived==1].describe()\n","fad41a95":"train.Age[train.Survived==0].describe()","c6b9810e":"train['Family']= train['SibSp']+ train['Parch']+ 1 #including the passenger him\/herself\ntrain=train.drop(['SibSp','Parch'],axis=1)\ntrain.head()","7c6b339f":"plt.figure(figsize=(20,8))\nsns.violinplot(y='Age',x='Family',hue='Survived',data=train)\nplt.show()","2cec2ac5":"train.Family[train.Survived==1].describe()","7c210ca1":"print('Percentage of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train)","d8e21f69":"print('Number of People Survived with their family member count')\ntrain.Family[train.Survived==1].value_counts()","603daf8f":"print('Perceptage in total Survival with family count as ')\ntrain.Family[train.Survived==1].value_counts()* 100\/len(train.Family[train.Survived==1])","512f47f8":"train.Family[train.Survived==0].describe()","9a3e614a":"print('Perecentage of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train)","daf01a37":"print('Perceptage in total Death with family count as ')\ntrain.Family[train.Survived==0].value_counts()* 100\/len(train.Family[train.Survived==0])","60233e81":"print('Number of People Not Survived with their family member count')\ntrain.Family[train.Survived==0].value_counts()","247db1ac":"plt.figure(figsize=(20,8))\nax = sns.countplot(x='Family',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","0ea1fea3":"test['Family']= test['SibSp']+ test['Parch']+ 1 #including the passenger him\/herself\ntest=test.drop(['SibSp','Parch'],axis=1)\ntest.head()","704c184b":"train=train.drop(['Name','Ticket'],axis=1)\ntrain.head()","247f46ae":"test=test.drop(['Name','Ticket'],axis=1)\ntest.head()","39d6c800":"plt.figure(figsize=(8,8))\nsns.violinplot(y='Fare',x='Survived',hue='Survived',data=train)\nplt.show()","9fad2165":"train.Fare[train.Survived==1].describe()","97739258":"train.Fare[train.Survived==0].describe()","66e79ce8":"train.Cabin.value_counts()","8a4bafe3":"plt.figure(figsize=(32,8))\nax=sns.barplot(x='Cabin',y='Fare',hue='Survived',data=train)\nplt.xticks(rotation=90)\nplt.show()","9ed3947d":"train.Cabin[train.Survived==0].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==0])","a527530b":"train.Cabin[train.Survived==1].value_counts(ascending=False)*100\/len(train.Cabin[train.Survived==1])","5c91e0e2":"plt.figure(figsize=(8,8))\nax = sns.countplot(x='Embarked',data=train,hue=\"Survived\")\nbars = ax.patches\nhalf = int(len(bars)\/2)\nleft_bars = bars[:half]\nright_bars = bars[half:]\n\nfor left, right in zip(left_bars, right_bars):\n    height_l = left.get_height()\n    height_r = right.get_height()\n    total = height_l + height_r\n\n    ax.text(left.get_x() + left.get_width()\/2., height_l + 10, '{0:.0%}'.format(height_l\/total), ha=\"center\")\n    ax.text(right.get_x() + right.get_width()\/2., height_r + 10, '{0:.0%}'.format(height_r\/total), ha=\"center\")","db9eda01":"train.Embarked.value_counts()","9d4f02d3":"train.Embarked.value_counts()*100\/len(train)","8679f839":"train.Embarked[train.Survived==0].value_counts(ascending=False)","64b7de38":"train.Embarked[train.Survived==0].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==0])","301a1a01":"train.Embarked[train.Survived==1].value_counts(ascending=False)","d6786199":"train.Embarked[train.Survived==1].value_counts(ascending=False)*100\/len(train.Embarked[train.Survived==1])","9ed70707":"len(train.Cabin.unique())","13c3f96b":"test=test.drop(['Cabin'],axis=1)\ntest.head()","3044bc40":"train=train.drop(['Cabin'],axis=1)\ntrain.head()","c92c277a":"train.info()","b4de2bbf":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain[['Age', 'Fare','Family']]= scaler.fit_transform(train[['Age', 'Fare','Family']])\ntrain.head()","30716801":"test[['Age', 'Fare','Family']]= scaler.transform(test[['Age', 'Fare','Family']])\ntest.head()","4db807e2":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(train[['Pclass', 'Sex','Embarked']], drop_first=True)\n\n# Adding the results to the master dataframe\ntrain = pd.concat([train, dummy1], axis=1)\ntrain.head()","1f16a48f":"train=train.drop(['Pclass', 'Sex','Embarked'],axis=1)\ntrain.head()","0dab08a3":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy2 = pd.get_dummies(test[['Pclass', 'Sex','Embarked']], drop_first=True)\n\n# Adding the results to the master dataframe\ntest = pd.concat([test, dummy2], axis=1)\ntest.head()","45f29aac":"test=test.drop(['Pclass', 'Sex','Embarked'],axis=1)\ntest.head()","e183dbbc":"### Checking the Survived Rate\nSurvived = (sum(train['Survived'])\/len(train['Survived'].index))*100\nSurvived","3ce39b48":"train['Survived']=train['Survived'].astype('uint8')","c9af9315":"# Let's see the correlation matrix \nplt.figure(figsize = (10,10))   \nsns.heatmap(train.corr(),annot = True,cmap=\"tab20c\")\nplt.show()","c3a6f853":"# seperate the independent and target variable on training data\ntrain_x = train.drop(columns=['Survived'],axis=1)\ntrain_y = train['Survived']","cd7296d8":"train_x.head()","e312c325":"train_x.shape","145b282a":"train_y.head()","5eee816d":"train_y.shape","2909ed30":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score\nmodel=AdaBoostClassifier(random_state=1)\n\n","b14dba8b":"# fit the model with the training data\nmodel.fit(train_x,train_y)","77960eae":"# predict the target on the train dataset\npredict_train = model.predict(train_x)\npredict_train","58fad89e":"accuracy_train = accuracy_score(train_y,predict_train)\nprint('accuracy_score on train dataset : ', accuracy_train)","6eba09a4":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = train_x.columns\nvif['VIF'] = [variance_inflation_factor(train_x.values, i) for i in range(train_x.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","33f3abce":"from sklearn import metrics\n# Confusion matrix \nconfusion = metrics.confusion_matrix(train_y, predict_train )\nprint(confusion)","833e9917":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","9458055b":"# Let's see the sensitivity of our Decision Tree model\nTP \/ float(TP+FN)","2f0a5c97":"# Let us calculate specificity\nTN \/ float(TN+FP)","0dc24909":"# Calculate false postive rate - \nprint(FP\/ float(TN+FP))","14283581":"# positive predictive value \nprint (TP \/ float(TP+FP))","656e7d8b":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","d594713d":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","69c92bd7":"fpr, tpr, thresholds = metrics.roc_curve( train_y,predict_train, drop_intermediate = False )","81dea8ca":"draw_roc(train_y,predict_train)","2b10dfee":"#Looking at the confusion matrix again","579b872a":"confusion = metrics.confusion_matrix(train_y,predict_train)\nconfusion","4a68a2b4":"from sklearn.metrics import precision_score, recall_score\nprecision_score(train_y,predict_train)","7daba195":"recall_score(train_y,predict_train)","925b782c":"# predict the target on the test dataset\npredict_test = model.predict(test)\nprint('Target on test data\\n\\n',predict_test)","0451a298":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": predict_test \n    })\nsubmission.to_csv('titanic_2218.csv', index=False)","c54e359d":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 9 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n9. XGBoost https:\/\/www.kaggle.com\/gauravduttakiit\/predict-the-survival-using-xgboost\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","48949708":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled in 1st pclass : 216\n- Number of People travelled in 1st pclass & Survived : 136\n- Number of People travelled in 1st pclass & Non Survived : 80\n- Number of People travelled in 2nd pclass : 184\n- Number of People travelled in 2nd pclass & Survived : 86\n- Number of People travelled in 2nd pclass & Non Survived : 98\n- Number of People travelled in 3rd pclass : 491\n- Number of People travelled in 3rd pclass & Survived : 118\n- Number of People travelled in 3rd pclass & Non Survived : 373\n- Percentage of People Travelling in 1st pclass : 24.24\n- Percentage of People Travelling in 2nd pclass : 20.65\n- Percentage of People Travelling in 3rd pclass : 55.10\n- Percentage of Survial in total Survial if travelling in 1st plass : 39.78\n- Percentage of Survial if total Survial travelling in 2nd plass : 25.15\n- Percentage of Survial if total Survial travelling in  3rd plass : 34.50\n- Percentage of Survial if travelling in 1st plass : 63\n- Percentage of Survial if travelling in 2nd plass : 47\n- Percentage of Survial if travelling in  3rd plass : 24\n\n- **Premium cost increased the chance of survival in that accident**\n\n","8cfc24cc":"# Step 3: Feature Scaling","c0c1ccb8":"Final Check()","53162e47":"Fare","96744a94":"To make sure corr shows correct represtations ","ed329dec":"## Add new feature ","2b2859d4":"# Precision and Recall","c701e7e1":"Using sklearn utilities for the same","bf0b78ca":"- People who survived has bought a ticket with a mean 48.40 compared to  22.11, who are dead\n- People who survived has bought a ticket with a median 26 compared to 10.5, who are dead\n- Premium tickets bought safer seat","f6c50c56":"Similarly, For testdata, we perform same action","31b4ac43":"Fare","28db73e3":"Pclass","9556337a":"Age","cff8c070":"# Age","de6e284b":"-  There are outliers for this variable, hence, Median is prefered over mean","24201bce":"We found few missing values in few of Columns","6b4fcad8":"# Name & Ticket Number are not an important feature for prediction ","c28e3551":"I solved this problem statement, Titanic: Machine Learning from Disaster (  https:\/\/lnkd.in\/e3vg9ZY ) with 8 different approaches :\nYou can check other approaches by clicking either of the link below added.\n1. GBM : https:\/\/lnkd.in\/eDD_FSP\n2. XGBClassifier https:\/\/lnkd.in\/e_2fe7y\n3. Random Forest  https:\/\/lnkd.in\/eAXXtR7\n4. kNN https:\/\/lnkd.in\/eFuJRu5\n5. Naive Bayes https:\/\/lnkd.in\/ens-x37 \n6. SVM https:\/\/lnkd.in\/eDxKCRJ\n7. Decision Tree https:\/\/lnkd.in\/eQ4AsTb\n8. Logistic Regression  https:\/\/lnkd.in\/edqXmeD\n9. XGBoost https:\/\/www.kaggle.com\/gauravduttakiit\/predict-the-survival-using-xgboost\n\n**If you find this interesting, do upvote this notebook. Thanks for the valuable time spend & sharing love with us**","02396c12":"Survived","6a28be54":"Drop Already existing Columns ","150f06b9":"- Since, it's catergorical datatype, we opt for Mode","aea95ba3":"- There are outliers for this variable, hence, Median is prefered over mean","ab4b2823":"# Insights\n- Total number of people travelled : 891\n- Number of People travelled were Female : 314\n- Number of People travelled were Female & Survived : 232\n- Number of People travelled were Female & Non Survived : 82\n- Number of People travelled were Male : 577\n- Number of People travelled were Male & Survived : 110\n- Number of People travelled were Male & Non Survived : 467\n- Percentage of People Travelling were Male : 35.24\n- Percentage of People Travelling were Female : 64.75\n- Percentage of Survial in total Survial if Male : 32.16\n- Percentage of Survial in total Survial if Female : 67.83\n\n\n- **Sex increased the chance of survival in that accident**","b370d919":"An ROC curve demonstrates several things:\n\n* It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n* The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n* The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","ff8a35e9":"# The Challenge","0e2a8dd2":"# EDA","2dd47899":"### Correcting Datatype for the variable in data","1069efc9":"There 148 unique values for Cabin , this's not important field to be considered. Drop Cabin from both dataset","15892b04":"### Checking the Correlation Matrix","6ceddc40":"All variables have a good value of VIF. So we need not drop any more variables and we can proceed with making predictions using this model only","7949acb3":"it's Catergorical data","31231384":"Let replace missing value with a variable X, which means it's Unknown ","abf711b6":"Similarly, For train data ","cc162dc7":"Few Columns' datatype are defaulted as int64 but they are catergorical in nature ","2a4b9be3":"# Decoding Values","f11857fa":"# Step 1: Importing and Merging Data","0a7cd467":"# Step 5: Model Building","0d651367":"Similarly, For testdata, we perform same action","ee48ee07":"No Nan records are availble in any datasets","fbd47b88":"# Step 6: Plotting the ROC Curve","04726843":"Pclass","cc531cc8":"## Impute Data for missing value ","3e7a6ffb":"## Variable are all decoded & added in dataset","b277f4db":"Embarked","ff588290":"Embarked","22c207e8":"- People from Cherbourg have more survial than Deaths\n- 72% of poeple have Embarked at Southampton\n","789ae1a5":"# Embarked","9f96b4ee":"# AdaBoost","9562a0ae":"- There are outliers for this variable, hence, Median is prefered over mean","3c3a1526":"- People with  family member count as  2,3,4 has better chance of surviving than people with family member count as  1,5,6,8 & 11\n- Single Traveller may be tried to help others , resulting max death in total death i.e. 68%\n- Family having members as 8 & 11 died all , may because they were too busy in panic to collect family members before they exit.\n- Single Traveller Couple (Family with 2 members), couple with 1 or 2 children survived the most, i.e. 90% of total survival.\n- Single Traveller has both Survial & Death when account in total dealth or total survival.\n","e60c785c":"# VIF","5fd46d87":"Cabin","cae47291":"# Cabin","31ecf14a":"It's Catergorical data","8d708938":"Let replace missing value with a variable X, which means it's Unknown","492e995a":" - Mean Age for people who survived is 28 years, which is less compared with Mean Age for people who didn't survived is 30 years.\n - Median , 75th percentitle is same for both cases","ad382d47":"# Step 2: Inspecting the Dataframe","ea179bf9":"- 87% of total death toll are from X Cabin , which means they don't had any cabin. They were Class 3 who paid little so, they have no premium service.\n- 60% of total Surviour are from X Cabin , which means they don't had any cabin. They were first who got alert and act fastest.\n- Luxury brough confort & premium services, same was the reason they were last who were alerted.","72f1cb51":"Metrics beyond simply accuracy","c7d82a58":"We can create a column 'Family' which will store values of sibsp + parch, \n\n- sibsp\t-> # of siblings \/ spouses aboard the Titanic\t\n- parch\t-> # of parents \/ children aboard the Titanic  \n\n& later drop these 2 columns from both dataset for uniformity ","eb7c2e3e":"Step 4: Looking at Correlations","8709da1a":"\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we neeedto build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","cc7ce50c":"## Variable are correctly classified & added in dataset","d4a0981a":"We have almost 38.38% Survived rate"}}