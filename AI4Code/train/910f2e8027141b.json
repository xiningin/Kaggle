{"cell_type":{"1b394193":"code","d474a8ad":"code","9c6d9e84":"code","bcc97ba1":"code","2a7f4907":"code","1b1b1da4":"code","f5ead93d":"code","9e4f034a":"code","5eee1169":"code","89ce3e1f":"code","c31a45a0":"code","2c60d19d":"markdown","3e088722":"markdown","59109562":"markdown","c963d5f4":"markdown","14d088fa":"markdown","cae574c2":"markdown","42324f60":"markdown","c95fc726":"markdown","d81b4bd4":"markdown","0ef78660":"markdown","d43c7846":"markdown"},"source":{"1b394193":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d474a8ad":"data = pd.read_csv(\"..\/input\/voice.csv\")\ndata.info()\n# predicted label value cannot be object . It must be integer or category . So we convert label column to integer \nprint(data.label.unique())\ndata.label = [1 if each =='female' else 0 for each in data.label ]\n\ny = data.label.values.reshape(-1,1)\nx_data = data.drop([\"label\"], axis=1)","9c6d9e84":"x = (x_data - np.min(x_data)) \/(np.max(x_data) - np.min(x_data)).values\nx.head()\n","bcc97ba1":"from sklearn.model_selection import train_test_split \nx_train, x_test, y_train, y_test = train_test_split (x,y, test_size =0.2, random_state = 42)\n\n# we get transposes since in the next step we will use Transposes \nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train shape: \",x_train.shape )\nprint(\"y_train shape: \",y_train.shape )\nprint(\"x_test shape: \",x_test.shape )\nprint(\"y_test shape: \",y_test.shape )\n\n# we have 20 features and 2534 sample for train data\n# we have 20 features and 634  sample for test data","2a7f4907":"def initialize_weights_and_bias (dimension):\n    w = np.full( (dimension, 1 ), 0.01)\n    b =0.0\n    return w,b\n\ndef sigmoid (z):\n    y_head = 1 \/(1 + np.exp(-z))\n    return y_head","1b1b1da4":"def forward_backward_propagation (w,b, x_train, y_train ):\n    #forward propagation\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)    \n    \n    # loss = -(1-y)log(1-y^) - y*og(y^)\n    # cost = sum of loss \n    loss =  - (1-y_train)*np.log(1-y_head) - y_train * np.log(y_head)\n    cost = (np.sum(loss)) \/ x_train.shape[1] #  x_train.shape[1]  for scaling \n    \n    #backward propagation\n    derivative_weight = (np.dot(x_train, (( y_head - y_train).T))) \/ x_train.shape[1]  # x_train.shape[1] for scaling. x.shape deki axis =1 adetini veriyor. Su anda xaxis=1'de ornek adeti var , xaxis=0 da feature adeti \n    derivative_bias = np.sum(y_head - y_train)\/ x_train.shape[1]\n    gradients = {\"derivative_weight\":derivative_weight, \"derivative_bias\": derivative_bias }\n    \n    return cost, gradients","f5ead93d":"def update(w, b, x_train, y_train, learning_rate,number_of_iteration):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iteration):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]  #derivative_weight weight in costa gore turevi\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 100 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","9e4f034a":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        #print (\"probabilty of tumor for \" , i , \" : \" ,  z[0,i] )  \n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","5eee1169":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n","89ce3e1f":"#lets  run\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 1000)","c31a45a0":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(x_train.T, y_train.T)\n\nprint(\"test accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))","2c60d19d":"## In conclusion, We  can predict our test data by accuracy of % 98**","3e088722":"<a id=\"3\">3. Train Test Split<\/a> <br>\nHere we will use 80% of our data as train data and 20% of data as test data ","59109562":"  <a id=\"2\">2. Normalize data<\/a> <br>\n\nNormalization  = (x - min (x))\/ (max(x) - min(x))\n\nEach feature can have different type of measures . So we must normalize them into same scalar.\n","c963d5f4":"<a id=\"7\">7. Logistic Regression with sklearn<\/a> <br>\n\nThis is simplest way by using sklearn  library ","14d088fa":"<a id=\"5\">5. Predict  Data<\/a> <br>\n\nWe find weight and bias parameters until now. That means we have our algorithm and our program learned from train data.<br>\nWe can predict test data now","cae574c2":"<a id=\"4.3\">4.3. Update parameters using Forward Backward function<\/a> <br>\n\nWe learn weight and bias parameters by using back and forward updates ","42324f60":"<a id=\"6\">6. Logistic Regression Function<\/a> <br>\n\nHere we combine learn (train) and predict data in logistic_regression function ","c95fc726":"<a id=\"4\">4. Train data and find parameters<\/a> <br>\n<a id=\"4.1\">4.1. Initialization function<\/a> <br>","d81b4bd4":"## Introduction\nIn this homework , I will train data with logistic regression classification algorithm. Steps : <br>\n[1. Read data](#1) <br>\n[2. Normalize data](#2) <br>\n[3. Train Test Split](#3) <br>\n[4. Train data and find parameters ](#4) <br>\n       &nbsp;&nbsp;&nbsp;&nbsp; [4.1. Initialization function ](#4.1) <br>\n       &nbsp;&nbsp;&nbsp;&nbsp; [4.2. Forward Backward Function ](#4.2) <br>\n       &nbsp;&nbsp;&nbsp;&nbsp; [4.3. Update parameters using Forward Backward function ](#4.3) <br>\n[5. Predict  Data ](#5) <br>\n[6. Logistic Regression Function](#6) <br> \n[7. Logistic Regression with sklearn](#7) <br>","0ef78660":"<a id=\"1\">1. Read data<\/a> <br>","d43c7846":"   <a id=\"4.2\">4.2. Forward Backward Function<\/a> <br>       "}}