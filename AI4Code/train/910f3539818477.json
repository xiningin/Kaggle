{"cell_type":{"b95c22b4":"code","92c7dffd":"code","684a261a":"code","2a01cf92":"code","17cd3e1b":"code","25f170f6":"code","1f653c2f":"code","f31e30ee":"code","ed6f9cbb":"code","6efd8a09":"code","6051dc13":"code","e13d0b2b":"code","8d7697a6":"code","a1a123c7":"code","05a5056b":"code","1cfd3851":"code","aaf3e5e1":"code","a522ceae":"code","3c86a77c":"code","c30807a8":"code","f39b14a0":"code","f1eefde5":"code","234074a3":"code","5904955f":"code","29fb36b7":"code","6d3fc3d9":"code","847dae88":"code","3b11553d":"code","4f9c54f6":"code","e4adce58":"code","44e08580":"code","63ba24f7":"code","bdf63ff6":"code","8ef53e54":"code","4de71210":"code","894659ec":"code","7ff635ac":"code","9754e672":"code","bca24580":"code","ecb519fd":"code","796dabaf":"code","9cbe05d0":"code","4471417e":"code","176e9924":"code","fbae8a0e":"code","4f92d31c":"code","b9ea4951":"code","c6270f53":"code","06a48738":"code","7b78d76f":"code","a3ea5a23":"code","1233b488":"code","64b28317":"code","292c4ff7":"code","caea1601":"code","0c22a411":"code","7980a2fe":"code","f007fe6b":"code","ebd2be14":"code","398fe670":"code","b1101524":"code","15adbefa":"code","78b413f3":"code","ba7838f2":"code","cab79dfc":"code","463156df":"code","b406739c":"code","d54596a2":"code","a36ae98c":"code","132a80d0":"code","66fe359b":"code","a8e88c61":"code","638a5962":"code","cd58ef22":"code","f322f185":"code","fae1f096":"code","6f7f6de0":"code","d2189260":"code","46cb6880":"code","f99eb07c":"code","a990b103":"code","ede1ffd0":"code","88d7626e":"code","4cdaaae8":"code","4772d07a":"code","dc10a3e1":"code","e75956a4":"code","3e845137":"code","f7902f65":"code","92615b86":"code","075d1e64":"code","eca4fad9":"code","4016eedd":"code","12e6fc1c":"code","e43014b8":"code","a31c2fe9":"code","b73a389d":"code","ec1a9a60":"code","1dd2c6ad":"code","8cdfbdce":"code","cf09f508":"code","77e430da":"code","0f4fe4b2":"code","18fa507e":"code","c035748f":"code","1eb5f604":"code","a1086bbb":"markdown","561f3015":"markdown","79202d19":"markdown","61651893":"markdown","b97dd8d0":"markdown","166b5110":"markdown","431d201b":"markdown","9679ca6a":"markdown","cc58ab75":"markdown","a1e21b9f":"markdown","540f3fc0":"markdown","3ef57803":"markdown","2536b60a":"markdown","904f4840":"markdown","72408ac2":"markdown","dfe8c7bd":"markdown","936072b1":"markdown","cbd4f322":"markdown","75a98839":"markdown","dbb99e5d":"markdown","618f3bde":"markdown","02698212":"markdown","c0c0a35c":"markdown","569dbe79":"markdown","904e11ef":"markdown","d06b723c":"markdown","7a1577d9":"markdown","018a20ae":"markdown","0297feb9":"markdown","c4cde82b":"markdown","8c0bb03b":"markdown","7f22cc7a":"markdown","86570c19":"markdown","8f2f4c86":"markdown","bfdadbac":"markdown","7f52407c":"markdown","94ee2f8e":"markdown","020bbf9e":"markdown","263268fb":"markdown","9bb02802":"markdown","93ab1d43":"markdown","8377ca84":"markdown","8ab1b151":"markdown","22d51d40":"markdown","006918f3":"markdown","f9cf9a81":"markdown","8d496cd8":"markdown","b887abba":"markdown","becdc208":"markdown","fc199e2d":"markdown","b5ae0cb4":"markdown","a8f3f5dc":"markdown","ed400eb4":"markdown","67c5e4ab":"markdown","22da191f":"markdown","2f0ff7ec":"markdown","af654b03":"markdown","988d2935":"markdown","024fda1d":"markdown","fbf17106":"markdown","973d89b0":"markdown"},"source":{"b95c22b4":"# Installs\n!pip install pycountry_convert \n!pip install folium\n!pip install calmap\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_deaths_v2.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_confirmed_v2.h5\n!wget https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/models\/model_usa_c.h5","92c7dffd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker \nimport pycountry_convert as pc\nimport folium\nimport branca\nfrom datetime import datetime, timedelta,date\nfrom scipy.interpolate import make_interp_spline, BSpline\nimport plotly.express as px\nimport json, requests\nimport calmap\n\nfrom keras.layers import Input, Dense, Activation, LeakyReLU\nfrom keras import models\nfrom keras.optimizers import RMSprop, Adam\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","684a261a":"# Retriving Dataset\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\n\n# Depricated\n# df_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')\ndf_covid19 = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\")\ndf_table = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_time.csv\",parse_dates=['Last_Update'])","2a01cf92":"# new dataset \ndf_covid19 = df_covid19.drop([\"People_Tested\",\"People_Hospitalized\",\"UID\",\"ISO3\",\"Mortality_Rate\"],axis =1)\ndf_covid19.head(2)","17cd3e1b":"df_confirmed.head(2)","25f170f6":"df_confirmed = df_confirmed.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_deaths = df_deaths.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})\ndf_covid19 = df_covid19.rename(columns={\"Country_Region\": \"country\"})\ndf_covid19[\"Active\"] = df_covid19[\"Confirmed\"]-df_covid19[\"Recovered\"]-df_covid19[\"Deaths\"]\n# df_recovered = df_recovered.rename(columns={\"Province\/State\":\"state\",\"Country\/Region\": \"country\"})","1f653c2f":"# Changing the conuntry names as required by pycountry_convert Lib\ndf_confirmed.loc[df_confirmed['country'] == \"US\", \"country\"] = \"USA\"\ndf_deaths.loc[df_deaths['country'] == \"US\", \"country\"] = \"USA\"\ndf_covid19.loc[df_covid19['country'] == \"US\", \"country\"] = \"USA\"\ndf_table.loc[df_table['Country_Region'] == \"US\", \"Country_Region\"] = \"USA\"\n# df_recovered.loc[df_recovered['country'] == \"US\", \"country\"] = \"USA\"\n\n\ndf_confirmed.loc[df_confirmed['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_deaths.loc[df_deaths['country'] == 'Korea, South', \"country\"] = 'South Korea'\ndf_covid19.loc[df_covid19['country'] == \"Korea, South\", \"country\"] = \"South Korea\"\ndf_table.loc[df_table['Country_Region'] == \"Korea, South\", \"Country_Region\"] = \"South Korea\"\n# df_recovered.loc[df_recovered['country'] == 'Korea, South', \"country\"] = 'South Korea'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_deaths.loc[df_deaths['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\ndf_covid19.loc[df_covid19['country'] == \"Taiwan*\", \"country\"] = \"Taiwan\"\ndf_table.loc[df_table['Country_Region'] == \"Taiwan*\", \"Country_Region\"] = \"Taiwan\"\n# df_recovered.loc[df_recovered['country'] == 'Taiwan*', \"country\"] = 'Taiwan'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Kinshasa)\", \"country\"] = \"Democratic Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Kinshasa)\", \"Country_Region\"] = \"Democratic Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Kinshasa)', \"country\"] = 'Democratic Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_deaths.loc[df_deaths['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_covid19.loc[df_covid19['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\ndf_table.loc[df_table['Country_Region'] == \"Cote d'Ivoire\", \"Country_Region\"] = \"C\u00f4te d'Ivoire\"\n# df_recovered.loc[df_recovered['country'] == \"Cote d'Ivoire\", \"country\"] = \"C\u00f4te d'Ivoire\"\n\ndf_confirmed.loc[df_confirmed['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_deaths.loc[df_deaths['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_covid19.loc[df_covid19['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\ndf_table.loc[df_table['Country_Region'] == \"Reunion\", \"Country_Region\"] = \"R\u00e9union\"\n# df_recovered.loc[df_recovered['country'] == \"Reunion\", \"country\"] = \"R\u00e9union\"\n\ndf_confirmed.loc[df_confirmed['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_deaths.loc[df_deaths['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\ndf_covid19.loc[df_covid19['country'] == \"Congo (Brazzaville)\", \"country\"] = \"Republic of the Congo\"\ndf_table.loc[df_table['Country_Region'] == \"Congo (Brazzaville)\", \"Country_Region\"] = \"Republic of the Congo\"\n# df_recovered.loc[df_recovered['country'] == 'Congo (Brazzaville)', \"country\"] = 'Republic of the Congo'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_deaths.loc[df_deaths['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\ndf_covid19.loc[df_covid19['country'] == \"Bahamas, The\", \"country\"] = \"Bahamas\"\ndf_table.loc[df_table['Country_Region'] == \"Bahamas, The\", \"Country_Region\"] = \"Bahamas\"\n# df_recovered.loc[df_recovered['country'] == 'Bahamas, The', \"country\"] = 'Bahamas'\n\ndf_confirmed.loc[df_confirmed['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_deaths.loc[df_deaths['country'] == 'Gambia, The', \"country\"] = 'Gambia'\ndf_covid19.loc[df_covid19['country'] == \"Gambia, The\", \"country\"] = \"Gambia\"\ndf_table.loc[df_table['Country_Region'] == \"Gambia\", \"Country_Region\"] = \"Gambia\"\n# df_recovered.loc[df_recovered['country'] == 'Gambia, The', \"country\"] = 'Gambia'\n\n# getting all countries\ncountries = np.asarray(df_confirmed[\"country\"])\ncountries1 = np.asarray(df_covid19[\"country\"])\n# Continent_code to Continent_names\ncontinents = {\n    'NA': 'North America',\n    'SA': 'South America', \n    'AS': 'Asia',\n    'OC': 'Australia',\n    'AF': 'Africa',\n    'EU' : 'Europe',\n    'na' : 'Others'\n}\n\n# Defininng Function for getting continent code for country.\ndef country_to_continent_code(country):\n    try:\n        return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country))\n    except :\n        return 'na'\n\n#Collecting Continent Information\ndf_confirmed.insert(2,\"continent\", [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_deaths.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]])\ndf_covid19.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in countries1[:]])\ndf_table.insert(1,\"continent\",  [continents[country_to_continent_code(country)] for country in df_table[\"Country_Region\"].values])\n# df_recovered.insert(2,\"continent\",  [continents[country_to_continent_code(country)] for country in countries[:]] )   ","f31e30ee":"df_table = df_table[df_table[\"continent\"] != \"Others\"]","ed6f9cbb":"df_deaths[df_deaths[\"continent\" ]== 'Others']","6efd8a09":"# df_active = df_confirmed.copy()\n# df_active.iloc[:,5:] = df_active.iloc[:,5:] - df_recovered.iloc[:,5:] - df_deaths.iloc[:,5:]\n# df_active.head(5)","6051dc13":"df_confirmed = df_confirmed.replace(np.nan, '', regex=True)\ndf_deaths = df_deaths.replace(np.nan, '', regex=True)\n# df_recovered = df_recovered.replace(np.nan, '', regex=True)\n# df_active = df_active.replace(np.nan, '', regex=True)","e13d0b2b":"def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = 'linear' ):\n    # Tick-Parameters\n    ax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\n    ax.tick_params(which='both', width=1,labelsize=label_size)\n    ax.tick_params(which='major', length=6)\n    ax.tick_params(which='minor', length=3, color='0.8')\n    \n    # Grid\n    plt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\n    plt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n    # Plot Title\n    plt.title( plt_title,{'fontsize':title_fsize})\n    \n    # Yaxis sacle\n    plt.yscale(scale)\n    plt.minorticks_on()\n    # Plot Axes Labels\n    xl = plt.xlabel(axis_label[0],fontsize = axis_fsize)\n    yl = plt.ylabel(axis_label[1],fontsize = axis_fsize)\n    \ndef visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = \"linear\"):\n    x = 0\n    if figure == None:\n        f = plt.figure(figsize=(10,10))\n        # Sub plot\n        ax = f.add_subplot(111)\n    else :\n        f = figure[0]\n        # Sub plot\n        ax = f.add_subplot(figure[1],figure[2],figure[3])\n    ax.set_axisbelow(True)\n    plt.tight_layout(pad=10, w_pad=5, h_pad=5)\n    \n    stats = [confirmed, deaths]\n    label = [\"Confirmed\", \"Deaths\"]\n    \n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else: \n        params = [\"All\", \"All\"]\n    color = [\"darkcyan\",\"crimson\"]\n    marker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=4, markerfacecolor='#ffffff')\n    for i,stat in enumerate(stats):\n        if params[1] == \"All\" :\n            cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:]\n        else :\n            cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        date = np.arange(1,cases.shape[0]+1)[x:]\n        plt.plot(date,cases,label = label[i]+\" (Total : \"+str(cases[-1])+\")\",color=color[i],**marker_style)\n        plt.fill_between(date,cases,color=color[i],alpha=0.3)\n\n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:]\n    else :\n        Total_confirmed =  np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:]\n        \n    text = \"From \"+stats[0].columns[5]+\" to \"+stats[0].columns[-1]+\"\\n\"\n    text += \"Mortality rate : \"+ str(int(Total_deaths[-1]\/(Total_confirmed[-1])*10000)\/100)+\"\\n\"\n    text += \"Last 5 Days:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-6])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-6])+\"\\n\"\n    text += \"Last 24 Hours:\\n\"\n    text += \"Confirmed : \" + str(Total_confirmed[-1] - Total_confirmed[-2])+\"\\n\"\n    text += \"Deaths : \" + str(Total_deaths[-1] - Total_deaths[-2])+\"\\n\"\n    \n    plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n    \n    # Plot Axes Labels\n    axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"No of Cases\"]\n    \n    # Plot Parameters\n    plot_params(ax,axis_label,scale = scale)\n    \n    # Plot Title\n    if params[1] == \"All\" :\n        plt.title(\"COVID-19 Cases World\",{'fontsize':25})\n    else:   \n        plt.title(\"COVID-19 Cases for \"+params[1] ,{'fontsize':25})\n        \n    # Legend Location\n    l = plt.legend(loc= \"best\",fontsize = 15)\n    \n    if figure == None:\n        plt.show()\n        \ndef get_total_cases(cases, country = \"All\"):\n    if(country == \"All\") :\n        return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1]\n    else :\n        return np.sum(np.asarray(cases[cases[\"country\"] == country].iloc[:,5:]),axis = 0)[-1]\n    \ndef get_mortality_rate(confirmed,deaths, continent = None, country = None):\n    if continent != None:\n        params = [\"continent\",continent]\n    elif country != None:\n        params = [\"country\",country]\n    else :\n        params = [\"All\", \"All\"]\n    \n    if params[1] == \"All\" :\n        Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    else :\n        Total_confirmed =  np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0)\n        mortality_rate = np.round((Total_deaths\/(Total_confirmed+1.01))*100,2)\n    \n    return np.nan_to_num(mortality_rate)\ndef dd(date1,date2):\n    return (datetime.strptime(date1,'%m\/%d\/%y') - datetime.strptime(date2,'%m\/%d\/%y')).days\n\n\nout = \"\"#+\"output\/\"","8d7697a6":"df_countries_cases = df_covid19.copy().drop(['Lat','Long_','continent','Last_Update'],axis =1)\ndf_countries_cases.index = df_countries_cases[\"country\"]\ndf_countries_cases = df_countries_cases.drop(['country'],axis=1)\n\ndf_continents_cases = df_covid19.copy().drop(['Lat','Long_','country','Last_Update'],axis =1)\ndf_continents_cases = df_continents_cases.groupby([\"continent\"]).sum()\n\ndf_countries_cases.fillna(0,inplace=True)\ndf_continents_cases.fillna(0,inplace=True)","a1a123c7":"df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"Deaths\"]\/df_t[\"Confirmed\"],2)\ndf_t.style.background_gradient(cmap='Wistia',axis=1).format(\"{:.0f}\",subset=[\"Confirmed\"])","05a5056b":"df_continents_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_continents_cases[\"Deaths\"]\/df_continents_cases[\"Confirmed\"],2)\ndf_continents_cases.style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","1cfd3851":"# df_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Wistia')\ndf_countries_cases[\"Mortality Rate (per 100)\"] = np.round(100*df_countries_cases[\"Deaths\"]\/df_countries_cases[\"Confirmed\"],2)\ndf_countries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Pastel1_r',subset=[\"Incident_Rate\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","aaf3e5e1":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_countries_cases.sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 Countries (Confirmed Cases).png')","a522ceae":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Deaths')[\"Deaths\"].index[-10:],df_countries_cases.sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Deaths Cases).png')","3c86a77c":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Active')[\"Active\"].index[-10:],df_countries_cases.sort_values('Active')[\"Active\"].values[-10:],color=\"darkorange\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Active Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Active Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Active Cases).png')","c30807a8":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_countries_cases.sort_values('Recovered')[\"Recovered\"].index[-10:],df_countries_cases.sort_values('Recovered')[\"Recovered\"].values[-10:],color=\"limegreen\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Recovered Cases\",fontsize=18)\nplt.title(\"Top 10 Countries (Recovered Cases)\",fontsize=20)\nplt.grid(alpha=0.3,which='both')\nplt.savefig(out+'Top 10 Countries (Recovered Cases).png')","f39b14a0":"f = plt.figure(figsize=(20,10))\nf.add_subplot(2,1,1)\ncalmap.yearplot(df_table.groupby('Last_Update')['Confirmed'].sum().diff(), fillcolor='white', cmap='Blues', linewidth=0.5,linecolor=\"#fafafa\",year=2020,)\nplt.title(\"Daily Confirmed Cases\",fontsize=20)\nplt.tick_params(labelsize=15)\n\nf.add_subplot(2,1,2)\ncalmap.yearplot(df_table.groupby('Last_Update')['Deaths'].sum().diff(), fillcolor='white', cmap='Reds', linewidth=1,linecolor=\"#fafafa\",year=2020,)\nplt.title(\"Daily Deaths Cases\",fontsize=20)\nplt.tick_params(labelsize=15)\nplt.show()","f1eefde5":"df_countries_cases.iloc[:,:].corr().style.background_gradient(cmap='Reds')","234074a3":"df_continents_cases.iloc[:,:].corr().style.background_gradient(cmap='Reds')","5904955f":"world_map = folium.Map(location=[10,0], tiles=\"cartodbpositron\", zoom_start=2,max_zoom=6,min_zoom=2)\nfor i in range(0,len(df_confirmed)):\n    folium.Circle(\n        location=[df_confirmed.iloc[i]['Lat'], df_confirmed.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_confirmed.iloc[i]['country']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_confirmed.iloc[i]['state']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_confirmed.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_deaths.iloc[i,-1])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_deaths.iloc[i,-1]\/(df_confirmed.iloc[i,-1]+1.00001)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int((np.log(df_confirmed.iloc[i,-1]+1.00001)))+0.2)*50000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(world_map)\n\nworld_map\n","29fb36b7":"temp_df = pd.DataFrame(df_countries_cases['Confirmed'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Confirmed\"]), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Confirmed\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Confirmed Cases Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Confirmed Cases(Log Scale)\",colorscale=\"Blues\")\n# fig.to_image(\"Global Heat Map confirmed.png\")\nfig.show()","6d3fc3d9":"temp_df = pd.DataFrame(df_countries_cases['Deaths'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df[\"Deaths\"]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Deaths\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Deaths Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Deaths (Log Scale)\",colorscale=\"Reds\")\n# fig.to_image(\"Global Heat Map deaths.png\")\nfig.show()","847dae88":"temp_df = pd.DataFrame(df_countries_cases['Recovered'])\ntemp_df = temp_df.reset_index()\nfig = px.choropleth(temp_df, locations=\"country\",\n                    color=np.log10(temp_df.iloc[:,-1]+1), # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    hover_data=[\"Recovered\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,locationmode=\"country names\")\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title_text=\"Recovered Heat Map (Log Scale)\")\nfig.update_coloraxes(colorbar_title=\"Recovered\",colorscale=\"Greens\")\n# fig.to_image(\"Global Heat Map deaths.png\")\nfig.show()","3b11553d":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths'].max().reset_index()\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter_geo(df_data, locations=\"Country_Region\", locationmode='country names', \n                     color=np.power(df_data[\"Confirmed\"],0.3)-2 , size= np.power(df_data[\"Confirmed\"]+1,0.3)-1, hover_name=\"Country_Region\",\n                     hover_data=[\"Confirmed\"],\n                     range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                     projection=\"natural earth\", animation_frame=\"Last_Update\", \n                     color_continuous_scale=px.colors.sequential.Plasma,\n                     title='COVID-19: Progression of spread'\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","4f9c54f6":"case_nums_country = df_confirmed.groupby(\"country\").sum().drop(['Lat','Long'],axis =1).apply(lambda x: x[x > 0].count(), axis =0)\nd = [datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in case_nums_country.index]\n\nf = plt.figure(figsize=(15,8))\nf.add_subplot(111)\nmarker_style = dict(c=\"crimson\",linewidth=6, linestyle='-', marker='o',markersize=8, markerfacecolor='#ffffff')\nplt.plot(d, case_nums_country,**marker_style)\nplt.tick_params(labelsize = 14)\nplt.xticks(list(np.arange(0,len(d),int(len(d)\/5))),d[:-1:int(len(d)\/5)]+[d[-1]])\n\n#labels\nplt.xlabel(\"Dates\",fontsize=18)\nplt.ylabel(\"Number of Countries\/Regions\",fontsize=1)\nplt.grid(alpha = 0.3)\n\nplt.savefig(out+'spread.png')\nplt.show()\nplt.close()","e4adce58":"cols = 1\nrows = 1\nf = plt.figure(figsize=(10,10*rows))\n\nvisualize_covid_cases(df_confirmed, df_deaths,continent = \"All\",figure = [f,rows,cols, 1])\n\nplt.savefig(out+'COIVD-19-World.png')\nplt.show()","44e08580":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\n\ncols =2\nrows = int(np.ceil(continents.shape[0]\/cols))\nf = plt.figure(figsize=(20,9*rows))\nfor i,continent in enumerate(continents):\n    visualize_covid_cases(df_confirmed, df_deaths, continent = continent,figure = [f,rows,cols, i+1])\n\nplt.show()","63ba24f7":"df_countries = df_confirmed.groupby([\"country\"]).sum()\ndf_countries = df_countries.sort_values(df_countries.columns[-1],ascending = False)\ncountries = df_countries[df_countries[df_countries.columns[-1]] >= 4000].index\n\ncols =2\nrows = int(np.ceil(countries.shape[0]\/cols))\nf = plt.figure(figsize=(18,7*rows))\nfor i,country in enumerate(countries):\n    visualize_covid_cases(df_confirmed, df_deaths,country = country,figure = [f,rows,cols, i+1])\n\nplt.show()","bdf63ff6":"temp = df_confirmed.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 9:\n        if country != \"India\" and country != \"Japan\" :\n            continue\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    if country != \"India\":\n        plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n    else:\n        marker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n        plt.plot(date,t,\"-.\",label = country,**marker_style)\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-12))\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,int(days-4))\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# India is following trend similar to doulbe the cases in 4 days but it may increase the rate \nx = np.arange(0,int(days-5))\ny = 2**(x\/4+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. every 4 days\",(x[-3],y[-1]),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries\\n and India (confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison with India (confirmed).png')\nplt.show()","8ef53e54":"temp = df_deaths.groupby('country').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Countries \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison countries deaths.png')\nplt.show()","4de71210":"temp = df_confirmed.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_confirmed.columns[-1], ascending= False)\n\nthreshold = 50\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 30)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-2)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=17)\nplt.title(\"Trend Comparison of Different Continents \\n(confirmed) \",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison of continents (Confirmed).png')\nplt.show()","894659ec":"temp = df_deaths.groupby('continent').sum().drop([\"Lat\",\"Long\"],axis =1).sort_values(df_deaths.columns[-1], ascending= False)\n\nthreshold = 10\nf = plt.figure(figsize=(10,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    if i >= 10:\n        break\n    days = 45\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>threshold][:days]\n     \n    date = np.arange(0,len(t[:days]))\n    xnew = np.linspace(date.min(), date.max(), 10)\n    spl = make_interp_spline(date, t, k=1)  # type: BSpline\n    power_smooth = spl(xnew)\n    plt.plot(xnew,power_smooth,'-o',label = country,linewidth =3, markevery=[-1])\n\n\nplt.tick_params(labelsize = 14)        \nplt.xticks(np.arange(0,days,7),[ \"Day \"+str(i) for i in range(days)][::7])     \n\n# Reference lines \nx = np.arange(0,18)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of cases doubles every day\",(x[-2],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-12)\ny = 2**(x\/2+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every second day\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every week\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days-3)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. every month\",(x[-3],y[-1]),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\n# plot Params\nplt.xlabel(\"Days\",fontsize=17)\nplt.ylabel(\"Number of Deaths\",fontsize=17)\nplt.title(\"Trend Comparison of Different Continents \\n(Deaths)\",fontsize=22)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+'Trend Comparison continents (deaths).png')\nplt.show()","7ff635ac":"temp_data = df_confirmed.iloc[:,5:].sum(axis =0)\nf = plt.figure(figsize=(20,12))\nf.add_subplot(111)\n\nthreshold = 100000\n\nt = temp_data.values\nt = t[t >threshold]\n\ndate = np.arange(0,len(t[:]))\nxnew = np.linspace(date.min(), date.max(), 10)\nspl = make_interp_spline(date, t, k=1)  # type: BSpline\npower_smooth = spl(xnew)\n\nmarker_style = dict(linewidth=4, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\nplt.plot(date,t,\"-.\",label=\"Confirmed Cases\",**marker_style)\n\ndays  = 52\n# Reference lines \nx = np.arange(0,days)\ny = 2**(x+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"No. of Cases Doubles Every Day\",(np.log2((t.max()-threshold)\/threshold),t.max()-threshold\/2),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/3+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"...Every Third Day\",(np.log2((t.max()-threshold)\/threshold)*3,t.max()-threshold),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/7+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\"... Every Week\",(np.log2((t.max()-threshold)\/threshold)*7,t.max()-threshold),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/30+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"gray\")\nplt.annotate(\".. Every Month\",(18,2**(17\/30+np.log2(threshold))),xycoords=\"data\",fontsize=14,alpha = 0.5)\n\nx = np.arange(0,days)\ny = 2**(x\/9+np.log2(threshold))\nplt.plot(x,y,\"--\",linewidth =2,color = \"Red\")\nplt.annotate(\".. Every 9 Days\",(np.log2((t.max()-threshold)\/threshold)*9,t.max()-threshold),color=\"Red\",xycoords=\"data\",fontsize=14,alpha = 0.8)\n\n\nplt.xlim(date[0],date[-1])\nplt.ylim(threshold - threshold\/10,2*t.max())\n# plot Params\n# plt.tight_layout()\nplt.tick_params(labelsize = 16)        \nplt.xticks(np.arange(0,len(t[:])+7,7),[ \"Day \"+str(i) for i in range(len(t[:])+7)][::7]) \nplt.xlabel(\"Days\",fontsize=19)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize=19)\nplt.title(\"World Trend\",fontsize=24)\nplt.legend(loc = \"upper left\")\nplt.yscale(\"log\")\nplt.grid(which=\"both\")\nplt.savefig(out+\"World Trend Confirmed cases.png\")\nplt.show()","9754e672":"# Visible = Input(shape=(1,))\n# Dense_l1 = Dense(80,name=\"Dense_l1\")(Visible)\n# LRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\n\n# Dense_l2 = Dense(80,name = \"Dense_l2\")(LRelu_l1)\n# LRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\n\n# Dense_l3 = Dense(80,name = \"Dense_l3\")(LRelu_l2)\n# LRelu_l3 = LeakyReLU(name = \"LRelu_l3\")(Dense_l3)\n\n# Dense_l4 = Dense(1,name=\"Dense_l4\")(LRelu_l3)\n# LRelu_l4 = LeakyReLU(name = \"Output\")(Dense_l4\n#                                      )\n# model = models.Model(inputs=Visible, outputs=LRelu_l4)\n# model.compile(optimizer=Adam(lr=0.001), \n#               loss='mean_squared_error',\n#               metrics=['accuracy'])\n# model.summary()","bca24580":"data_y = np.log10(np.asarray(df_confirmed.iloc[:,5:].sum(axis =0)).astype(\"float32\"))\ndata_x = np.arange(1,len(data_y)+1)","ecb519fd":"# epochs = 5000\n# model.fit(data_x.reshape([data_y.shape[0],1]),data_y.reshape([data_y.shape[0],1]),epochs=epochs)","796dabaf":"# model.save('model_confirmed_v2.h5')","9cbe05d0":"model = models.load_model(\"model_confirmed_v2.h5\")\nmodel.summary()","4471417e":"lakh = 100000\nprediction_days = 10\n\ntemp_data = df_confirmed.iloc[:,5:].sum(axis =0)\ndata = np.power(10,model.predict(np.arange(1,len(temp_data)+prediction_days+1)))\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data\/lakh,\"-.\",color=\"darkcyan\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data\/lakh,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal = d + nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-3)[0]\/lakh)+\" L\\n\"\n\nplt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),d[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 10 day Prediction Curve-Global Confirmed Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Confirmed Cases (Lakh)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve-Confirmed.png\")\nplt.show()","176e9924":"# Visible = Input(shape=(1,))\n# Dense_l1 = Dense(80,name=\"Dense_l1\")(Visible)\n# LRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\n\n# Dense_l2 = Dense(80,name = \"Dense_l2\")(LRelu_l1)\n# LRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\n\n# Dense_l3 = Dense(80,name = \"Dense_l3\")(LRelu_l2)\n# LRelu_l3 = LeakyReLU(name = \"LRelu_l3\")(Dense_l3)\n\n# Dense_l4 = Dense(1,name=\"Dense_l4\")(LRelu_l3)\n# LRelu_l4 = LeakyReLU(name = \"Output\")(Dense_l4\n#                                      )\n# model2 = models.Model(inputs=Visible, outputs=LRelu_l4)\n# model2.compile(optimizer=Adam(lr=0.001), \n#               loss='mean_squared_error',\n#               metrics=['accuracy'])\n# model2.summary()","fbae8a0e":"data1_y = np.log10(np.asarray(df_deaths.iloc[:,5:].sum(axis =0)).astype(\"float32\"))\ndata1_x = np.arange(1,len(data1_y)+1)","4f92d31c":"# epochs=5000\n# model2.fit(data1_x.reshape([data1_y.shape[0],1]),data1_y.reshape([data1_y.shape[0],1]),epochs=epochs)","b9ea4951":"# model2.save('model_deaths_v2.h5')","c6270f53":"model2 = models.load_model(\"model_deaths_v2.h5\")\nmodel2.summary()","06a48738":"thousand = 1000\nprediction_days = 10\n\ntemp_data = df_deaths.iloc[:,5:].sum(axis =0)\ndata = np.power(10,model2.predict(np.arange(1,len(temp_data)+prediction_days+1)))\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\n\ndate = np.arange(0,len(temp_data))\n# xnew = np.linspace(date.min(), date.max(), 10)\n# spl = make_interp_spline(date, t, k=1)  # type: BSpline\n# power_smooth = spl(xnew)\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data\/thousand,\"-.\",color=\"maroon\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data\/thousand,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-1)[0]\/thousand)+\"K\\n\"\n\nplt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=12)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 10 day Prediction Curve-Global Deaths Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Deaths Cases (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve2.png\")\nplt.show()","7b78d76f":"start_date = \"4\/5\/20\"\nsd= dd(start_date,\"1\/22\/20\")\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\ndata_confirmed = np.power(10,model.predict(np.arange(1,len(data_y)+prediction_days+1)))\ndata_deaths = np.power(10,model2.predict(np.arange(1,len(data_y)+prediction_days+1)))\npd.DataFrame([total[sd:],\n              list(np.int64(np.round(data_confirmed[sd:].reshape(-1)\/lakh,2)*lakh)),\n              list(df_confirmed.iloc[:,5:].sum(axis =0)[sd:]),\n              list(np.int64(np.round(data_deaths[sd:].reshape(-1)\/thousand,2)*thousand)),\n             list(df_deaths.iloc[:,5:].sum(axis =0)[sd:])],\n             [\"Date\",\"Confirmed(Predicted)\",\"Confirmed(Actual)\",\"Deaths(Predicted)\",\"Deaths(Actual)\"]\n            ).transpose().set_index(\"Date\")","a3ea5a23":"# Data\ntemp_data = np.nan_to_num(df_confirmed.sum()[5:].diff())\n\n\n# Plot\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=2, linestyle='-', marker='o',markersize=5)\nplt.plot(date,temp_data\/thousand,\"-.\",color=\"red\",**marker_style)\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=12)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Global Daily New Confirmed Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Confirmed Cases (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"daily confirmed cases global.png\")\nplt.show()","1233b488":"# Data\ntemp_data = np.nan_to_num(df_deaths.sum()[5:].diff())\n\n\n# Plot\nf = plt.figure(figsize=(15,10))\nax = f.add_subplot(111)\n\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=2, linestyle='-', marker='o',markersize=5)\nplt.plot(date,temp_data\/thousand,\"-.\",color=\"red\",**marker_style)\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Global Daily Deaths Reported\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Deaths Reported (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.savefig(out+\"daily deaths cases Global.png\")\nplt.show()","64b28317":"thoudand = 1000\ntemp = df_confirmed.groupby('country').sum().diff(axis=1).sort_values(df_deaths.columns[-1],ascending =False).head(10).replace(np.nan,0)\nthreshold = 0\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>=threshold]\n    \n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/thoudand,'-o',label = country,linewidth =2, markevery=[-1])\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Daily Confirmed Cases in Different Countries\",{'fontsize':24})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Confirmed Cases (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize=18) \nplt.savefig(out+\"daily confirmed cases countrywise.png\")\nplt.show()","292c4ff7":"thoudand = 1000\ntemp = df_deaths.groupby('country').sum().diff(axis=1).sort_values(df_deaths.columns[-1],ascending =False).head(10).replace(np.nan,0)\nthreshold = 0\nf = plt.figure(figsize=(20,12))\nax = f.add_subplot(111)\nfor i,country in enumerate(temp.index):\n    t = temp.loc[temp.index== country].values[0]\n    t = t[t>=threshold]\n    \n    date = np.arange(0,len(t[:]))\n    plt.plot(date,t\/thoudand,'-o',label = country,linewidth =2, markevery=[-1])\n\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=15)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.85\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.95\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Daily Deaths Reported in Different Countries\",{'fontsize':24})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Daily Deaths Reported (Thousand)\",fontsize =18)\n\n# plt.yscale(\"log\")\nplt.legend(fontsize=18) \nplt.savefig(out+\"daily deaths reported countrywise.png\")\nplt.show()","caea1601":"df_test = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/tarunk04\/COVID-19-CaseStudy-and-Predictions\/master\/v53\/test.csv\")[:-1]\n# df_test","0c22a411":"df_test.drop(df_test[df_test[\"Entity\"]==\"India - people tested\"].index[0],inplace=True)\ndf_test[\"country\"] = [ c.split(\" \")[0] for c in df_test[\"Entity\"].values]\ndf_test.loc[17,\"country\"] =\"USA\"\ndf_test.loc[16,\"country\"] = \"United Kingdom\"\ndf_test.loc[15,\"country\"] = \"South Korea\"\ndf_test = df_test.loc[:,[\"country\",\"Cumulative total\",\"Cumulative total per million\"]]\n# df_test","7980a2fe":"df_test[\"confirmed\"] = [ df_countries_cases.loc[c,'Confirmed'] for c in df_test[\"country\"].values]\ndf_test[\"deaths\"] = [ df_countries_cases.loc[c,'Deaths'] for c in df_test[\"country\"].values]\ndf_test[\"MR\"] = np.round(100*df_test[\"deaths\"]\/df_test[\"confirmed\"],2)\ndf_test[\"Positive\"] = np.round(100*df_test[\"confirmed\"]\/df_test[\"Cumulative total\"],2)\ndf_test.style.background_gradient(cmap='Blues',subset=[\"Cumulative total\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Cumulative total per million\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"MR\"])\\\n                        .background_gradient(cmap='bone_r',subset=[\"Positive\"])","f007fe6b":"df_test.corr().style.background_gradient(cmap='Blues').format(\"{:.2f}\")","ebd2be14":"fig = px.bar(df_test.sort_values(\"Cumulative total\"),\n            x='country', y=\"Cumulative total\",\n            text = \"MR\",\n            hover_name=\"country\",\n            hover_data=[\"confirmed\",\"deaths\",\"Cumulative total\",\"Positive\"],\n            title='COVID-19: Tests Over Countries',\n)\nfig.update_xaxes(title_text=\"Country\")\nfig.update_yaxes(title_text=\"Number of Tests (Text on bars is MR %)\")\nfig.show()","398fe670":"fig = px.bar(df_test.sort_values(\"Positive\"),\n            x='country', y=\"Positive\",\n            text = \"MR\",\n            hover_name=\"country\",\n            hover_data=[\"confirmed\",\"deaths\",\"Cumulative total\",\"Positive\"],\n            title='COVID-19: Test(Positive) Over Countries',\n)\nfig.update_xaxes(title_text=\"Country\")\nfig.update_yaxes(title_text=\"Positive Tests(%)- (Text on bars is MR %)\")\nfig.show()","b1101524":"fig = px.bar(df_test.sort_values(\"MR\"),\n            x='country', y=\"MR\",\n            text = \"Positive\",\n            hover_name=\"country\",\n            hover_data=[\"confirmed\",\"deaths\",\"Cumulative total\",\"Positive\"],\n            title='COVID-19: MR Over Countries',\n)\nfig.update_xaxes(title_text=\"Country\")\nfig.update_yaxes(title_text=\"MR(%)- (Text on bars is Positive %)\")\nfig.show()","15adbefa":"fig = px.bar(df_test.sort_values(\"Cumulative total per million\"),\n            x='country', y=\"Cumulative total per million\",\n            text = \"MR\",\n            hover_name=\"country\",\n            hover_data=[\"confirmed\",\"deaths\",\"Cumulative total\",\"Positive\"],\n            title='COVID-19: Tests per million Over Countries',\n)\nfig.update_xaxes(title_text=\"Country\")\nfig.update_yaxes(title_text=\"Tests per million(%)- (Text on bars is MR %)\")\nfig.show()","78b413f3":"fig = px.scatter(df_test, y=df_test.loc[:,\"MR\"],\n                    x= df_test.loc[:,\"Positive\"],\n                    color= \"country\", hover_name=\"country\",\n                    hover_data=[\"confirmed\",\"deaths\",\"Cumulative total\"],\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='COVID-19: Test(Positive) vs Mortality rate',\n                    size = np.power(df_test[\"confirmed\"]+1,0.3)-0.5,\n                    size_max = 30,\n                    height =600,\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.update_yaxes(title_text=\"Mortality Rate (%)\")\nfig.update_xaxes(title_text=\"Tests Positive (%)\")\nfig.show()","ba7838f2":"rows = 4\nf = plt.figure(figsize=(15,10*rows))\n\nstats = [df_covid19.loc[:,['country','Confirmed']],df_covid19.loc[:,['country','Deaths']],df_covid19.loc[:,['country','Active']],df_covid19.loc[:,['country','Recovered']]]\nlabel = [\"Confirmed\",\"Deaths\",\"Active\",\"Recovered\"]\nthreshold = [20000,1000,15000,2000]\nfor i, stat in enumerate(stats):\n    plt.tight_layout()\n    df_countries = stat.groupby([\"country\"]).sum()\n    df_countries = df_countries.sort_values(df_countries.columns[-1],ascending= False)\n    others = df_countries[df_countries[df_countries.columns[-1]] < threshold[i] ].sum()[-1]\n    df_countries = df_countries[df_countries[df_countries.columns[-1]] > threshold[i]]\n    df_countries = df_countries[df_countries.columns[-1]]\n    df_countries[\"others\"] = others\n    labels = [df_countries.index[i] +\" (\" + str(int(df_countries[i])) +\") \"for i in range(df_countries.shape[0])]\n\n    ax = f.add_subplot(rows,1,i+1)\n    plt.pie(df_countries, labels=labels,autopct='%1.1f%%',pctdistance=0.85, labeldistance=1.1,textprops = {'fontsize':10.5})\n    my_circle=plt.Circle( (0,0), 0.7, color='white')\n    p=plt.gcf()\n    p.gca().add_artist(my_circle)\n    plt.text(0.5,0.5,\"World Total \"+label[i]+ \" COVID-19 Cases\\n\"+str(stat.sum().values[1]), horizontalalignment='center',verticalalignment='center',transform=ax.transAxes, size=18, alpha = 0.6)\n\n\nplt.show()\n","cab79dfc":"df_continents= df_confirmed.groupby([\"continent\"]).sum()\ncontinents = df_continents.sort_values(df_continents.columns[-1],ascending = False).index\ncontinents = [\"All\"]+list(continents)\n\ncols =1\nrows = 2\naxis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"Mortality Rate (of 100)\"]\n\nf = plt.figure(figsize=(15,10*rows))\n\n#SubPlot 1\nax = f.add_subplot(211)\nmortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\nplt.plot(np.arange(1,mortality_rate.shape[0]+1),mortality_rate,label = \"World : Current Mortality Rate \"+str(mortality_rate[-1]),linewidth=3)\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\nplt_title = \"COVID-19: World Mortality Rate Curve\"\nplot_params(ax,axis_label,plt_title)\n# Legend Location\nl = plt.legend(loc= \"best\")\n\n\n#SubPlot 2\nax = f.add_subplot(212)\nfor i, continent in enumerate(continents[1:]):\n    mortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continent)\n#     mortality_rate = mortality_rate.replace(np.nan, 0, regex=True)\n    plt.plot(np.arange(1+mortality_rate[mortality_rate == 0].shape[0],mortality_rate[mortality_rate == 0].shape[0]+mortality_rate[mortality_rate > 0].shape[0]+1),mortality_rate[mortality_rate > 0],label = continents[i+1]+\" \"+str(mortality_rate[-1]),linewidth=3)\n\n\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n    \nplt_title = \"COVID-19: Mortality Rate Curve for all Continents\"\nplot_params(ax,axis_label,plt_title)\n\n# Legend Location\nl = plt.legend(loc= \"best\")\n\nplt.minorticks_on()\nplt.savefig(out+'Mortality rate.png')\nplt.show()\n","463156df":"\ndf_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths','continent'].max().reset_index()\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter(df_data, y=100*df_data[\"Deaths\"]\/(df_data[\"Confirmed\"]+1),\n                    x= df_data[\"Confirmed\"]+1,\n                    range_y = [-1,18],\n                    range_x = [1,df_data[\"Confirmed\"].max()+10000],\n                    color= \"continent\", hover_name=\"Country_Region\",\n                    hover_data=[\"Confirmed\",\"Deaths\"],\n                    range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                    animation_frame=\"Last_Update\", \n                    animation_group=\"Country_Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='COVID-19: Change in Mortality Rate of Each Countries Over Time',\n                    size = np.power(df_data[\"Confirmed\"]+1,0.3)-0.5,\n                    size_max = 30,\n                    log_x=True,\n                    height =700,\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.update_xaxes(title_text=\"Confirmed Cases (Log Scale)\")\nfig.update_yaxes(title_text=\"Mortality Rate (%)\")\nfig.show()","b406739c":"# cols =1\n# rows = 2\n# axis_label = [\"Days (\"+df_confirmed.columns[5]+\" - \"+df_confirmed.columns[-1]+\")\",\"Mortality Rate\/ Recovery Rate (of 100)\"]\n\n# f = plt.figure(figsize=(15,10*rows))\n\n# #SubPlot 1\n# ax = f.add_subplot(211)\n# mortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\n# recovered_rate = get_mortality_rate(df_confirmed,df_recovered,continent=continents[0])\n# plt.plot(np.arange(1,mortality_rate.shape[0]+1),mortality_rate,label = \"World : Current Mortality Rate \"+str(mortality_rate[-1]))\n# plt.plot(np.arange(1,recovered_rate.shape[0]+1),recovered_rate,label = \"World : Current Recovery Rate \"+str(recovered_rate[-1]))\n\n# plt_title = \"COVID-19: World Mortality and Recovery Rate Comparision\"\n# plot_params(ax,axis_label,plt_title,scale = \"log\")\n# # Legend Location\n# l = plt.legend(loc= \"best\")","d54596a2":"cols =1\nrows = 2\n\nf = plt.figure(figsize=(15,10*rows))\n\n# SubPlot 1\nax = f.add_subplot(211)\nplt.plot(np.sum(np.asarray(df_confirmed.iloc[:,5:]),axis = 0),np.sum(np.asarray(df_deaths.iloc[:,5:]),axis = 0))\n\naxis_label = [\"Cumulative Confirmed Cases\",\"Cumulative Deaths\"]\nplt_title = \"COVID-19: World - \\nCumulative Confirmed Cases Vs Cumulative Deaths Curve\"\nplot_params(ax,axis_label,plt_title)\n\n\n# # SubPlot 2\n# ax = f.add_subplot(212)\n# mortality_rate = get_mortality_rate(df_confirmed,df_deaths,continent=continents[0])\n# plt.plot(np.sum(np.asarray(df_recovered.iloc[:,5:]),axis = 0),np.sum(np.asarray(df_deaths.iloc[:,5:]),axis = 0))\n\n# axis_label = [\"Cumulative Recoveries\",\"Cumulative Deaths\"]\n# plt_title = \"COVID-19: World - Cumulative Recovery Vs Cumulative Deaths Curve\"\n\n# plot_params(ax,axis_label,plt_title)\nplt.minorticks_on()\nplt.savefig(out+'Cumulative Confirmed Cases Vs Cumulative Deaths Curve.png')\nplt.show()","a36ae98c":"df_data = df_table.groupby(['Last_Update', 'Country_Region'])['Confirmed', 'Deaths','continent'].max().reset_index()\ndf_data[\"Last_Update\"] = pd.to_datetime( df_data[\"Last_Update\"]).dt.strftime('%m\/%d\/%Y')\n\nfig = px.scatter(df_data, y=df_data[\"Deaths\"],\n                    x= df_data[\"Confirmed\"]+1,\n                    range_y = [1,df_data[\"Deaths\"].max()+1000],\n                    range_x = [1,df_data[\"Confirmed\"].max()+10000],\n                    color= \"continent\", hover_name=\"Country_Region\",\n                    hover_data=[\"Confirmed\",\"Deaths\"],\n                    range_color= [0, max(np.power(df_data[\"Confirmed\"],0.3))], \n                    animation_frame=\"Last_Update\", \n                    animation_group=\"Country_Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='COVID-19: Change Deaths vs Cofirmed of Each Countries Over Time',\n                    size = np.power(df_data[\"Confirmed\"]+1,0.3)-0.5,\n                    size_max = 30,\n                    log_x=True,\n                    log_y=True,\n                    height =700,\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.update_xaxes(title_text=\"Confirmed Cases (Log Scale)\")\nfig.update_yaxes(title_text=\"Deaths Rate (Log Scale)\")\nfig.show()","132a80d0":"# Getting data for China and Oouside China\n# df - Cumulative data for china, outside china and world total  (confirmed cases)\n# df_newcases- new cases reported per day  (confirmed cases)\ndf_confirmed_report = df_confirmed.copy()\ndf_confirmed_report.loc[df_confirmed_report['country'] != \"China\",\"country\"] = \"Outside China\"\ndf_confirmed_report = df_confirmed_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_confirmed_report.loc[\"Total\"] = df_confirmed_report.sum()\ndf_confirmed_newcases = df_confirmed_report.groupby(level =0).diff(axis =1)\ndf_confirmed_newcases = df_confirmed_newcases.replace(np.nan, 0, regex=True) \nf = plt.figure(figsize=(15,8))\nax1 = f.add_subplot(111)\n\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"China\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].values[0], label = \"China (New)\",color='dodgerblue')\nax1.bar(df_confirmed_report[df_confirmed_report.index == \"Outside China\"].columns,df_confirmed_newcases[df_confirmed_newcases.index == \"Outside China\"].values[0],bottom=df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# Labels\nax1.set_xlabel(\"Dates\",fontsize=17)\nax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\nax1.tick_params(size=10,labelsize=15)\nax1.set_xticks(np.arange(0.5, len(df_confirmed_report.columns), 6))\nax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::6],fontsize=15)\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]\/10+10000, 5000)\nax1.set_yticks(l[::int(len(l)\/5)])\n# ax1.spines['bottom'].set_position('zero')\n\nax2 = ax1.twinx()\nmarker_style = dict(linewidth=6, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Total\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"China\"].columns ,df_confirmed_report[df_confirmed_report.index == \"China\"].values[0],**marker_style,label = \"China (Cumulative)\",color=\"limegreen\",clip_on=False)\nax2.plot(df_confirmed_report[df_confirmed_report.index == \"Outside China\"].columns ,df_confirmed_report[df_confirmed_report.index == \"Outside China\"].values[0],**marker_style,label =\"Outside China (Cumulative)\",color=\"darkviolet\",clip_on=False)\nax2.bar([0],[0])\n\n# Label\nax2.tick_params(labelsize=15)\nax2.set_ylabel(\"Cumulative\",fontsize =17)\nax2.set_xticks(np.arange(0.5, len(df_confirmed_report.columns), 6))\nax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_report.columns][::6])\nl = np.arange(0, df_confirmed_report.max(axis = 1)[2]+100000, 100000)\nax2.set_yticks(l[::int(len(l)\/5)])\n\nf.tight_layout()\nf.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Confirmed Cases: China Vs Rest of the World\",fontsize = 22)\nplt.savefig(out+'China vs Rest of the world.png')\nplt.show()","66fe359b":"# Getting data for China and Oouside China\n# df - Cumulative data for china, outside china and world total (deaths)\n# df_newcases- new cases reported per day (deaths)\ndf_deaths_report = df_deaths.copy()\ndf_deaths_report.loc[df_deaths_report['country'] != \"China\",\"country\"] = \"Outside China\"\ndf_deaths_report = df_deaths_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\ndf_deaths_report.loc[\"Total\"] = df_deaths_report.sum()\ndf_deaths_newcases = df_deaths_report.groupby(level =0).diff(axis =1)\ndf_deaths_newcases = df_deaths_newcases.replace(np.nan, 0, regex=True)\n\nf = plt.figure(figsize=(15,8))\nax1 = f.add_subplot(111)\n\nax1.bar(df_deaths_report[df_deaths_report.index == \"China\"].columns,df_deaths_newcases[df_deaths_newcases.index == \"China\"].values[0], label = \"China (New)\",color='dodgerblue')\nax1.bar(df_deaths_report[df_deaths_report.index == \"Outside China\"].columns,df_deaths_newcases[df_deaths_newcases.index == \"Outside China\"].values[0],bottom=df_deaths_newcases[df_deaths_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# Labels\nax1.set_xlabel(\"Dates\",fontsize=17)\nax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\nax1.tick_params(size=10,labelsize=15)\nax1.set_xticks(np.arange(0.5, len(df_deaths_report.columns), 6))\nax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_deaths_report.columns][::6],fontsize=15)\nl = np.arange(0, df_deaths_report.max(axis = 1)[2]\/10+500, 500)\nax1.set_yticks(l[::int(len(l)\/5)])\n# ax1.spines['bottom'].set_position('zero')\n\nax2 = ax1.twinx()\nmarker_style = dict(linewidth=6, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n\nax2.plot(df_deaths_report[df_deaths_report.index == \"Total\"].columns ,df_deaths_report[df_deaths_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\nax2.plot(df_deaths_report[df_deaths_report.index == \"China\"].columns ,df_deaths_report[df_deaths_report.index == \"China\"].values[0],**marker_style,label = \"China (Cumulative)\",color=\"limegreen\",clip_on=False)\nax2.plot(df_deaths_report[df_deaths_report.index == \"Outside China\"].columns ,df_deaths_report[df_deaths_report.index == \"Outside China\"].values[0],**marker_style,label =\"Outsdte China (Cumulative)\",color=\"darkviolet\",clip_on=False)\nax2.bar([0],[0])\n\n# Label\nax2.tick_params(labelsize=15)\nax2.set_ylabel(\"Cumulative\",fontsize =17)\nax2.set_xticks(np.arange(0.5, len(df_deaths_report.columns), 6))\nax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_deaths_report.columns][::6])\nl = np.arange(0, df_deaths_report.max(axis = 1)[2]+4000, 2000)\nax2.set_yticks(l[::int(len(l)\/5)])\n\nf.tight_layout()\nf.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Deaths Reported: China Vs Rest of the World\",fontsize = 22)\nplt.savefig(out+'China vs Rest of the world1.png')\nplt.show()","a8e88c61":"# # Getting data for China and Oouside China\n# # df - Cumulative data for china, outside china and world total (deaths)\n# # df_newcases- new cases reported per day (deaths)\n# df_recovered_report = df_recovered.copy()\n# df_recovered_report.loc[df_recovered_report['country'] != \"China\",\"country\"] = \"Outside China\"\n# df_recovered_report = df_recovered_report.groupby(\"country\").sum().drop([\"Lat\",\"Long\"],axis =1)\n# df_recovered_report.loc[\"Total\"] = df_recovered_report.sum()\n# df_recovered_newcases = df_recovered_report.groupby(level =0).diff(axis =1)\n\n# f = plt.figure(figsize=(15,8))\n# ax1 = f.add_subplot(111)\n\n# ax1.bar(df_recovered_report[df_recovered_report.index == \"China\"].columns,df_recovered_newcases[df_recovered_newcases.index == \"China\"].values[0], label = \"China (New)\",color='dodgerblue')\n# ax1.bar(df_recovered_report[df_recovered_report.index == \"Outside China\"].columns,df_recovered_newcases[df_recovered_newcases.index == \"Outside China\"].values[0],bottom=df_recovered_newcases[df_recovered_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# # Labels\n# ax1.set_xlabel(\"Dates\",fontsize=17)\n# ax1.set_ylabel(\"New Cases Reported\",fontsize =17)\n\n# ax1.tick_params(size=10,labelsize=15)\n# ax1.set_xticks(np.arange(0.5, len(df_recovered_report.columns), 6))\n# ax1.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_recovered_report.columns][::6],fontsize=15)\n# ax1.set_yticks(np.arange(0, df_recovered_newcases.max(axis = 1)[2]+1000, 1000))\n# # ax1.spines['bottom'].set_position('zero')\n\n# ax2 = ax1.twinx()\n# marker_style = dict(linewidth=6, linestyle='-', marker='o',markersize=10, markerfacecolor='#ffffff')\n\n# ax2.plot(df_recovered_report[df_recovered_report.index == \"Total\"].columns ,df_recovered_report[df_recovered_report.index == \"Total\"].values[0],**marker_style,label = \"World Total (Cumulative)\",color=\"darkorange\",clip_on=False)\n# ax2.plot(df_recovered_report[df_recovered_report.index == \"China\"].columns ,df_recovered_report[df_recovered_report.index == \"China\"].values[0],**marker_style,label = \"China (Cumulative)\",color=\"limegreen\",clip_on=False)\n# ax2.plot(df_recovered_report[df_recovered_report.index == \"Outside China\"].columns ,df_recovered_report[df_recovered_report.index == \"Outside China\"].values[0],**marker_style,label =\"Outside China (Cumulative)\",color=\"darkviolet\",clip_on=False)\n# ax2.bar([0],[0])\n\n# # Label\n# ax2.tick_params(labelsize=15)\n# ax2.set_ylabel(\"Cumulative\",fontsize =17)\n# ax2.set_xticks(np.arange(0.5, len(df_recovered_report.columns), 6))\n# ax2.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_recovered_report.columns][::6])\n# ax2.set_yticks(np.arange(0, df_recovered_report.max(axis = 1)[2]+10000, 10000))\n\n# f.tight_layout()\n# f.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\n# plt.title(\"COVID-19 Recovered Cases: China Vs Rest of the World\",fontsize = 22)\n# plt.savefig('China vs Rest of the world2.png')\n# plt.show()","638a5962":"# pd.DataFrame([df_confirmed_report.iloc[:,-1],df_deaths_report.iloc[:,-1],df_recovered_report.iloc[:,-1]],[\"Confirmed\",\"Deaths\",\"Recovered\"]).transpose()","cd58ef22":"f = plt.figure(figsize=(15,8))\nax = f.add_subplot(111)\n\nax.bar(0.05+np.arange(len(df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].columns)),df_confirmed_newcases[df_confirmed_newcases.index == \"China\"].values[0], label = \"Confirmed Cases\",color='dodgerblue',width = 0.45)\nax.bar(0.5+np.arange(len(df_deaths_newcases[df_deaths_newcases.index == \"China\"].columns)),df_deaths_newcases[df_deaths_newcases.index == \"China\"].values[0], label = \"Deaths\",color='red',width = 0.45)\n# ax.bar(0.67+np.arange(len(df_recovered_newcases[df_recovered_newcases.index == \"China\"].columns)),df_recovered_newcases[df_recovered_newcases.index == \"China\"].values[0], label = \"Recoveries\",color='orange',width = 0.33)\n\n# ax.bar(df_recovered_report[df_recovered_report.index == \"Outside China\"].columns,df_newcases[df_newcases.index == \"Outside China\"].values[0],bottom=df_newcases[df_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# Labels\nax.set_xlabel(\"Dates\",fontsize=17)\nax.set_ylabel(\"Cases Reported\",fontsize =17)\n\nax.tick_params(labelsize=15)\nax.set_xticks(np.arange(0.5, len(df_confirmed_newcases.columns), 6))\nax.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_newcases.columns][::6],fontsize=15)\nax.set_yticks(np.arange(0, df_confirmed_newcases.loc[\"China\"].max()+4000, 4000))\nax.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Cases: China\",fontsize = 22)\nplt.grid(alpha = 0.3)\nplt.savefig(out+'China vs Rest of the world3.png')\nplt.show()","f322f185":"f = plt.figure(figsize=(15,8))\nax = f.add_subplot(111)\n\nax.bar(0.05+np.arange(len(df_confirmed_newcases[df_confirmed_newcases.index == \"Outside China\"].columns)),df_confirmed_newcases[df_confirmed_newcases.index == \"Outside China\"].values[0], label = \"Confirmed Cases\",color='dodgerblue',width = 0.45)\nax.bar(0.5+np.arange(len(df_deaths_newcases[df_deaths_newcases.index == \"Outside China\"].columns)),df_deaths_newcases[df_deaths_newcases.index == \"Outside China\"].values[0], label = \"Deaths\",color='red',width = 0.45)\n# ax.bar(0.67+np.arange(len(df_recovered_newcases[df_recovered_newcases.index == \"Outside China\"].columns)),df_recovered_newcases[df_recovered_newcases.index == \"Outside China\"].values[0], label = \"Recoveries\",color='orange',width = 0.33)\n\n# ax.bar(df_recovered_report[df_recovered_report.index == \"Outside China\"].columns,df_newcases[df_newcases.index == \"Outside China\"].values[0],bottom=df_newcases[df_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# Labels\nax.set_xlabel(\"Dates\",fontsize=17)\nax.set_ylabel(\"Cases Reported\",fontsize =17)\n\nax.tick_params(labelsize=15)\nax.set_xticks(np.arange(0, len(df_confirmed_newcases.columns), 6))\nax.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_newcases.columns][::6],fontsize=15)\nax.set_yticks(np.arange(0, df_confirmed_newcases.loc[\"Outside China\"].max()+10000, 20000))\nax.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Cases: Rest of the World\",fontsize = 22)\nplt.grid(alpha = 0.3)\nplt.savefig(out+'China vs Rest of the world4.png')\nplt.show()","fae1f096":"f = plt.figure(figsize=(15,8))\nax = f.add_subplot(111)\n\nax.bar(0.05+np.arange(len(df_confirmed_newcases[df_confirmed_newcases.index == \"Total\"].columns)),df_confirmed_newcases[df_confirmed_newcases.index == \"Total\"].values[0], label = \"Confirmed Cases\",color='dodgerblue',width = 0.45)\nax.bar(0.5+np.arange(len(df_deaths_newcases[df_deaths_newcases.index == \"Total\"].columns)),df_deaths_newcases[df_deaths_newcases.index == \"Total\"].values[0], label = \"Deaths\",color='red',width = 0.45)\n# ax.bar(0.67+np.arange(len(df_recovered_newcases[df_recovered_newcases.index == \"Total\"].columns)),df_recovered_newcases[df_recovered_newcases.index == \"Total\"].values[0], label = \"Recoveries\",color='orange',width = 0.33)\n\n# ax.bar(df_recovered_report[df_recovered_report.index == \"Outside China\"].columns,df_newcases[df_newcases.index == \"Outside China\"].values[0],bottom=df_newcases[df_newcases.index == \"China\"].values[0],label = \"Outside China (New)\",color='orangered')\n\n# Labels\nax.set_xlabel(\"Dates\",fontsize=17)\nax.set_ylabel(\"Cases Reported\",fontsize =17)\n\nax.tick_params(labelsize=15)\nax.set_xticks(np.arange(0, len(df_confirmed_newcases.columns), 6))\nax.set_xticklabels([datetime.strptime(date,'%m\/%d\/%y').strftime(\"%d %b\") for date in df_confirmed_newcases.columns][::6],fontsize=15)\nax.set_yticks(np.arange(0, df_confirmed_newcases.loc[\"Total\"].max()+10000, 20000))\nax.legend(loc = \"upper left\", bbox_to_anchor=(0.1,0.95))\nplt.title(\"COVID-19 Cases: All over the Globe\",fontsize = 22)\nplt.grid(alpha = 0.3)\nplt.savefig(out+'China vs Rest of the world5.png')\nplt.show()","6f7f6de0":"df_india_test = pd.io.json.json_normalize(requests.get('https:\/\/api.rootnet.in\/covid19-in\/stats\/testing\/history').json()['data']).rename(columns = {\"totalIndividualsTested\":\"c_individualtest\",\"totalPositiveCases\":\"c_positive\",\"totalSamplesTested\":\"c_tests\"})","d2189260":"df_india_test[\"p2t_ratio\"]= np.round(100*df_india_test[\"c_positive\"]\/df_india_test[\"c_tests\"],2)\ndf_india_test[\"positive\"] = df_india_test[\"c_positive\"].diff()\ndf_india_test[\"tests\"] = df_india_test[\"c_tests\"].diff()\ndf_india_test[\"p2t_ratio\"]= np.round(100*df_india_test[\"positive\"]\/df_india_test[\"tests\"],2)\ndf_india_test = df_india_test[1:]","46cb6880":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.bar(df_india_test[\"day\"],df_india_test[\"tests\"].values[:],color=\"darkcyan\",label=\"Test (Negetive)\"+str())\nplt.bar(df_india_test[\"day\"],df_india_test[\"positive\"].values[:],bottom=df_india_test[\"tests\"].values[:]-df_india_test[\"positive\"].values[:],color=\"Red\",label=\"Test (Positive)\")\nplt.tick_params(size=5,labelsize = 13)\nplt.tick_params(axis=\"x\",size=5,labelsize = 13,labelrotation=60 )\nplt.xlabel(\"Date\",fontsize=18)\nplt.ylabel(\"Test Results\",fontsize=18)\n\nplt.title(\"Tests in India\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.legend()\nplt.savefig(out+'Test_India.png')","f99eb07c":"df_india_test[\"c_tests\"][-1:].values[0]","a990b103":"np.round(1000000*df_india_test[\"c_tests\"][-1:].values[0]\/1300000000,2)","ede1ffd0":"india_data_json = requests.get('https:\/\/api.rootnet.in\/covid19-in\/unofficial\/covid19india.org\/statewise').json()\ndf_india = pd.io.json.json_normalize(india_data_json['data']['statewise'])\ndf_india = df_india.set_index(\"state\")","88d7626e":"total = df_india.sum()\ntotal.name = \"Total\"\ndf_t = pd.DataFrame(total,dtype=float).transpose()\ndf_t[\"Mortality Rate (per 100)\"] = np.round(100*df_t[\"deaths\"]\/df_t[\"confirmed\"],2)\ndf_t.style.background_gradient(cmap='Purples',axis=1)","4cdaaae8":"df_india[\"Mortality Rate (per 100)\"]= np.round(np.nan_to_num(100*df_india[\"deaths\"]\/df_india[\"confirmed\"]),2)\ndf_india.style.background_gradient(cmap='Blues',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","4772d07a":"df_india[df_india['deaths'] > 0].style.background_gradient(cmap='Blues',subset=[\"confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"active\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate (per 100)\"])","dc10a3e1":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_india.sort_values('confirmed')[\"confirmed\"].index[-10:],df_india.sort_values('confirmed')[\"confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 States: India (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 States_India (Confirmed Cases).png')","e75956a4":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_india.sort_values('deaths')[\"deaths\"].index[-10:],df_india.sort_values('deaths')[\"deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths\",fontsize=18)\nplt.title(\"Top 10 States: India (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 States_India (Deaths Cases).png')","3e845137":"df_india.corr().style.background_gradient(cmap='Reds')","f7902f65":"# Adding Location data (Latitude,Longitude)\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\ndf_india[\"Lat\"] = \"\"\ndf_india[\"Long\"] = \"\"\nfor index in df_india.index :\n    df_india.loc[df_india.index == index,\"Lat\"] = locations[index][0]\n    df_india.loc[df_india.index == index,\"Long\"] = locations[index][1]","92615b86":"# url = \"https:\/\/raw.githubusercontent.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/master\/Indian_States\"\n# state_json = requests.get(url).json()\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\nfor i in range(0,len(df_india[df_india['confirmed']>0].index)):\n    folium.Circle(\n        location=[df_india.iloc[i]['Lat'], df_india.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_india.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_india.iloc[i]['confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_india.iloc[i]['active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_india.iloc[i]['recovered'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(df_india.iloc[i]['deaths'])+\"<\/li>\"+\n        \n        \"<li>Mortality Rate:   \"+str(np.round(df_india.iloc[i]['Mortality Rate (per 100)'],2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(df_india.iloc[i]['confirmed']+1)))*15000,\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia","075d1e64":"date_usa = datetime.strptime(df_confirmed.columns[-1],'%m\/%d\/%y').strftime(\"%m-%d-%Y\")\ndf_temp = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/\"+date_usa+\".csv\")\ndf_usa = df_temp.loc[df_temp[\"Country_Region\"]== \"US\"]\ndf_usa = df_usa.rename(columns={\"Admin2\":\"County\"})","eca4fad9":"total = df_usa.sum()\ntotal.name = \"Total\"\npd.DataFrame(total).transpose().loc[:,[\"Confirmed\",\"Deaths\"]].style.background_gradient(cmap='Purples',axis=1)","4016eedd":"df_usa.loc[:,[\"Confirmed\",\"Deaths\",\"Province_State\"]].groupby([\"Province_State\"]).sum().sort_values(\"Confirmed\",ascending=False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"]).background_gradient(cmap='Reds',subset=[\"Deaths\"])","12e6fc1c":"df_usa.loc[:,[\"Province_State\",\"Confirmed\",\"Deaths\",\"County\"]].sort_values(\"Confirmed\",ascending=False).set_index(\"County\")[:15].style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])","e43014b8":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_usa.groupby([\"Province_State\"]).sum().sort_values('Confirmed')[\"Confirmed\"].index[-10:],df_usa.groupby([\"Province_State\"]).sum().sort_values('Confirmed')[\"Confirmed\"].values[-10:],color=\"darkcyan\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Confirmed Cases\",fontsize=18)\nplt.title(\"Top 10 States: USA (Confirmed Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 States_USA (Confirmed Cases).png')","a31c2fe9":"f = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nplt.axes(axisbelow=True)\nplt.barh(df_usa.groupby([\"Province_State\"]).sum().sort_values('Deaths')[\"Deaths\"].index[-10:],df_usa.groupby([\"Province_State\"]).sum().sort_values('Deaths')[\"Deaths\"].values[-10:],color=\"crimson\")\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Deaths\",fontsize=18)\nplt.title(\"Top 10 States: USA (Deaths Cases)\",fontsize=20)\nplt.grid(alpha=0.3)\nplt.savefig(out+'Top 10 States_USA (Deaths Cases).png')","b73a389d":"# url = \"https:\/\/raw.githubusercontent.com\/Subhash9325\/GeoJson-Data-of-Indian-States\/master\/Indian_States\"\n# state_json = requests.get(url).json()\ndf_usa = df_usa.replace(np.nan, 0, regex=True)\nusa = folium.Map(location=[37, -102], zoom_start=4,max_zoom=8,min_zoom=4)\nfor i in np.int32(np.asarray(df_usa[df_usa['Confirmed'] > 0].index)):\n    folium.Circle(\n        location=[df_usa.loc[i]['Lat'], df_usa.loc[i]['Long_']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_usa.loc[i]['Province_State']+\"<\/h5>\"+\n                    \"<div style='text-align:center;'>\"+str(np.nan_to_num(df_usa.loc[i]['County']))+\"<\/div>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(df_usa.loc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Active:   \"+str(df_usa.loc[i]['Active'])+\"<\/li>\"+\n        \"<li>Recovered:   \"+str(df_usa.loc[i]['Recovered'])+\"<\/li>\"+       \n        \"<li>Deaths:   \"+str(df_usa.loc[i]['Deaths'])+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(df_usa.loc[i]['Deaths']\/(df_usa.loc[i]['Confirmed']+1)*100,2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=int((np.log2(df_usa.loc[i]['Confirmed']+1))*6000),\n        color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(usa)\n\nusa","ec1a9a60":"state_geo = requests.get('https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\/us-states.json').json()\ncounty_geo = requests.get('https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\/us_counties_20m_topo.json').json()\n# county_geo","1dd2c6ad":"data_temp = df_usa.groupby([\"Province_State\"]).sum().reset_index().drop([\"Lat\",\"Long_\"],axis=1)\ndata_temp[\"Confirmed_log\"] = np.log10(data_temp[\"Confirmed\"]+1)\nbins = list(data_temp['Confirmed_log'].quantile([0, 0.25, 0.5, 0.75,0.95 ,1]))\nm = folium.Map(location=[37, -102], zoom_start=4,max_zoom=6,min_zoom=3)\n \n# Add the color for the chloropleth:\nfolium.Choropleth(\n    geo_data=state_geo,\n    name='choropleth',\n    data = data_temp,\n    columns=['Province_State', 'Confirmed_log'],\n    key_on='feature.properties.name',\n    fill_color='Reds',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    bins = bins,\n    reset=True,\n    legend_name='Confirmed cases log (10^x)'\n).add_to(m)\nfolium.LayerControl().add_to(m)\n\nlegend_html = \"<div style='padding:10px;background-color:rgba(255,255,255,0.5);position:fixed;bottom:20px;left:20px;z-index:1000'>\"\nlegend_html += \"<div style='width:100%;text-align:center;'><h4>Index for Legend<\/h4><\/div><hr style='border-top-color: rgba(25,25,25,0.5);'>\"\nlegend_html += \"<ul style='margin:0;padding:0;color: #555;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"\nfor i in bins:\n    legend_html += \"<li style='margin:0;padding:0;line-height: 0;'>Value \"+str(np.round(i,2))+\" : \"+str(int(10**i)-1)+\"<\/li><br>\"\nlegend_html += \"<\/ul><\/div>\"\nm.get_root().html.add_child(folium.Element(legend_html))\nm","8cdfbdce":"# binsurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\n# county_data = f'{url}\/us_county_data.csv'\n# county_geo = f'{url}\/us_counties_20m_topo.json'\n\ndata_temp = df_usa.groupby([\"FIPS\"]).sum().reset_index().drop([\"Lat\",\"Long_\"],axis=1)\ndata_temp[\"Confirmed_log\"] = np.log10(data_temp[\"Confirmed\"]+1)\n\ndf_usa_series = data_temp.set_index('FIPS')['Confirmed_log']\ncolorscale = branca.colormap.linear.Reds_09.scale(0,data_temp[\"Confirmed_log\"].max()-1)\n# print(df_usa_series.max())\ndef style_function(feature):\n    employed = df_usa_series.get(int(feature['id'][-5:]), 0)\n    return {\n        'fillOpacity': 0.5,\n        'weight': 0,\n        'fillColor': '#black' if employed is None else colorscale(employed)\n    }\n\n\nm = folium.Map(\n    location=[37, -102],\n    tiles='cartodbpositron',\n    zoom_start=4,\n    min_zoom=3,\n    max_zoom=7\n)\n\nfolium.TopoJson(\n    county_geo,\n    'objects.us_counties_20m',\n    style_function=style_function\n).add_to(m)\nm","cf09f508":"# Visible = Input(shape=(1,))\n# Dense_l1 = Dense(80,name=\"Dense_l1\")(Visible)\n# LRelu_l1 = LeakyReLU(name = \"LRelu_l1\")(Dense_l1)\n# Dense_l2 = Dense(80,name = \"Dense_l2\")(LRelu_l1)\n# LRelu_l2 = LeakyReLU(name = \"LRelu_l2\")(Dense_l2)\n# Dense_l3 = Dense(1,name=\"Dense_l3\")(LRelu_l2)\n# LRelu_l3 = LeakyReLU(name = \"Output\")(Dense_l3)\n# model_usa_c = models.Model(inputs=Visible, outputs=LRelu_l3)\n# model_usa_c.compile(optimizer=Adam(lr=0.0001), \n#               loss='mean_squared_error',\n#               metrics=['accuracy'])\n# model_usa_c.summary()","77e430da":"# model_usa_c.save('model_usa_c.h5')","0f4fe4b2":"# df_temp = df_confirmed.groupby([\"country\"]).sum()\n# df_temp = np.asarray(df_temp[df_temp.index == \"USA\"].iloc[:,2:])[0]\n# data_y = np.log(df_temp).astype(\"float32\")\n# data_x = np.arange(1,len(data_y)+1)\n# data_x.shape[0]","18fa507e":"# epochs = 3000\n# model_usa_c.fit(data_x.reshape([data_x.shape[0],1]),data_y.reshape([data_x.shape[0],1]),epochs=epochs,batch_size=64)","c035748f":"model_usa_c = models.load_model(\"model_usa_c.h5\")\nmodel_usa_c.summary()","1eb5f604":"lakh = 100000\nprediction_days = 5\ndata = np.power(2,model_usa_c.predict(np.arange(1,len(data_y)+prediction_days+1)))\ndf_temp = df_confirmed.groupby([\"country\"]).sum()\ntemp_data = np.asarray(df_temp[df_temp.index == \"USA\"].iloc[:,2:])[0]\n# temp_data = df_confirmed.iloc[:,5:].sum(axis =0)\nf = plt.figure(figsize=(12,8))\nax = f.add_subplot(111)\n\ndate = np.arange(0,len(temp_data))\n\nmarker_style = dict(linewidth=3, linestyle='-', marker='o',markersize=7, markerfacecolor='#ffffff')\nplt.plot(date,temp_data,\"-.\",color=\"darkcyan\",**marker_style, label=\"Actual Curve\")\n\ndate = np.arange(0,len(data))\nplt.plot(date,data,\"-.\",color=\"orangered\",label=\"Predicted Curve\")\n\nnextdays = [(datetime.strptime(d[-1],'%d %b')+timedelta(days=i)).strftime(\"%d %b\") for i in range(1,prediction_days+1)]\ntotal =d+nextdays\n\ntext = \"Prediction for next \"+str(prediction_days) +\" days:\\n\"\nfor i in range(prediction_days):\n    text += nextdays[i]+\" : \"+str(np.round(data[-1*(prediction_days-i)],-3)[0]\/lakh)+\" L\\n\"\n\n# plt.text(0.02, 0.78, text, fontsize=17, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes,bbox=dict(facecolor='white', alpha=0.4))\n\n# X-axis\nplt.xticks(list(np.arange(0,len(total),int(len(total)\/5))),total[:-1:int(len(total)\/5)]+[total[-1]])\n\n# Tick-Parameters\nax.xaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.yaxis.set_minor_locator(ticker.AutoMinorLocator())\nax.tick_params(which='both', width=1,labelsize=14)\nax.tick_params(which='major', length=6)\nax.tick_params(which='minor', length=3, color='0.8')\n\n# Grid\nplt.grid(lw = 1, ls = '-', c = \"0.7\", which = 'major')\nplt.grid(lw = 1, ls = '-', c = \"0.9\", which = 'minor')\n\n# Plot Title\nplt.title(\"COVID-19 Next 5 day Prediction Curve-USA Confirmed Cases\",{'fontsize':22})\n\n# Axis Lable\nplt.xlabel(\"Date\",fontsize =18)\nplt.ylabel(\"Number of Confirmed Cases\",fontsize =18)\n\nplt.yscale(\"log\")\nplt.legend(fontsize =18)\nplt.tick_params(labelsize = 13) \nplt.savefig(out+\"Prediction Curve-Confirmed (USA).png\")\nplt.show()","a1086bbb":"#### Loading Model","561f3015":"### Variation of Deaths vs Confirmed cases of different cuntries over time","79202d19":"# COVID-19 : INDIA\n<hr>\n**Few basic visualization related to India. I will be updating with more visualization in further commits. i am also working on Paitent Data Insights. Adding Soon**\n### Dataset:\nThis dataset is provided by https:\/\/api.rootnet.in\/","61651893":"### Prediction Curve for USA","b97dd8d0":"## Graphical Analysis of Testing Data\n<hr>\n### Countrywise\n","166b5110":"This is far less than the tests happening in South Korea, Singapore and Other countries. Here is a comparison table for India and South Korea <br>**(Last Update: 31 Mar 2020)**\n<table>\n    <tr>\n        <th style = \"text-align:Left\">Parameters<\/th>\n        <th>India<\/th>\n        <th>South Korea<\/th>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">Population<\/th>\n        <td>130 Cr<\/td>\n        <td>5.15 Cr<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">First Case Reported<\/th>\n        <td>28 Jan 2020<\/td>\n        <td>23 Jan 2020<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">Total Tests<\/th>\n        <td>37000<\/td>\n        <td>395194<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">Tests Per Million Peoples<\/th>\n        <td>28.46<\/td>\n        <td>7674<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">Positives<\/th>\n        <td>1250<\/td>\n        <td>9661<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">No. Positives in 100 Tests<\/th>\n        <td>3.38<\/td>\n        <td>2.44<\/td>\n    <\/tr>\n    <tr>\n        <th style = \"text-align:Left\">Current Mortality Rate<\/th>\n        <td>3.76<\/td>\n        <td>1.63<\/td>\n    <\/tr>\n<\/table><br>\nFrom this table, this can be concluded that India is far behind in terms of testing, and testing is very important to keep track of COVID19 spread and also to quarantine those people or isolate them to control the spread of COVID19 as done by South Korea.","431d201b":"## Global Deaths Heat Map \n<hr>","9679ca6a":"### 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE ([LINK](https:\/\/github.com\/CSSEGISandData\/COVID-19)) \n<hr>\nDataset consists of time-series data from 22 JAN 2020 to Till date (Updated on daily Basis).<br>\n**Three Time-series dataset (Depricated):**\n* time_series_19-covid-Confirmed.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv))\n* time_series_19-covid-Deaths.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv))\n* time_series_19-covid-Recovered.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv))\n\n**New Time-series dataset:**\n* time_series_covid19_confirmed_global.csv ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv))\n* time_series_covid19_deaths_global ([Link Raw File](https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv))\n\n**New Dataset (Updated more frequently by web crawler of JHU):**\n* cases_country.csv ([Link Raw File](\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv\"))","cc58ab75":"## 2.Daily New Cases in Different Countries","a1e21b9f":"# Cumulative Confirmed Cases and Cumulative Recovery Vs Cumulative Deaths Analysis \n<hr>\nThe variation of Cumulative Confirmed Cases and Cumulative Recovery with Cumulative Deaths can show a trend. These 2 curves depict the same. Also, these curves should be a straight line as shown in the 1st curve, but the 2nd curve is not showing that trend, and as the number of recovered cases is increasing, death is increasing at a faster rate.\n* 1st curve: Cumulative Confirmed Cases VS Cumulative Deaths \n* 2nd curve: Cululative Recovery VS Cumulative Deaths","540f3fc0":"### Most Affected States: USA","3ef57803":"### 10 Most effected States","2536b60a":"# **COVID-19 Analysis, Visualization, Comparison and Pridictions**","904f4840":"# Visualization on Map\n<hr>","72408ac2":"### 4. COVID-19 Spread Comparison of few most affected countries and INDIA","dfe8c7bd":"## Prediction Curve for Global Confirmed Cases\nBuliding Model","936072b1":"# COVID-19 Spread Analysis\n<hr>\n\nSpread Analysis is in two sections \n1. Spread Across Globe\n2. Spread Trends in the World, Continents and few most affected Countries","cbd4f322":"## Analysis of Tests done in India and Comparission with South Korea\n<hr>\n**Note:** I am working on more on testing data and comparisions insights and will adding soon.","75a98839":"## COVID19 Cases in India\n<hr>","dbb99e5d":"# General Analysis of Data\n<hr>\nGetting country wise and continent wise data.","618f3bde":"### Continent Wise Correlation","02698212":"## COVID-19: Spread Progression","c0c0a35c":"### 5. COVID-19 Spread Comparison of in different continents","569dbe79":"#### Loading Model","904e11ef":"### Affected Counties : USA\n<hr>","d06b723c":" # Defining Functions\n <hr>\n* plot_params()\n* visualize_covid_cases()\n* get_mortality_rate()","7a1577d9":"# Imports and Datasets\n<hr> \n* Pandas - for dataset handeling\n* Numpy - Support for Pandas and calculations \n* Matplotlib - for visualization (Platting graphas)\n* pycountry_convert - Library for getting continent (name) to from their country names\n* folium - Library for Map\n* keras - Prediction Models\n* plotly - for interative plots","018a20ae":"# COVID-19 Mortality Rate Variation Over Period of Time\n<hr>\nFor any epidemic the one of the most important evaluation is Mortality Rate. It is the measure of number of deaths in a particular population during a specific interval.\n* 1st curve shows how the mortality rate varies from 22 JAN 2020 to till date all over the world. \n* 2nd Curve shows the variation of mortality rate in different continents over time.\n","0297feb9":"## Global Recovered Heat Map \n<hr>","c4cde82b":"# Calander Map\n<hr>","8c0bb03b":"# Global Prediction\n<hr>\n\n## Global Trend: \nIt is useful to understand the global trend of an increase in the number of cases over time. There is always a pattern in any data, but the concern is how strongly data follows a pattern. COVID-19 spreads exponentially, positive cases of COVID-19 takes 67 days to reach 1 Lakhs while it takes only 11 days to reach 2 Lakhs, 4 days to reach 3 Lakhs, and just 2 days to reach 5 Lakhs. This trend shows how fast it spreads.\n<br><br>\n**Note: This prediction is only based on the current spread trend, and no other factor is included, so this trend may vary a lot. Also, at some point in time, the testing capacity will become the limiting factor, so it may affect the actual figure a lot. This is to estimate the possible values that could reach with the consideration of any measures taken by different countries to control the spread.**  ","7f22cc7a":"### COVID-19: Change in Mortality Rate of Each Countries Over Time","86570c19":"### Correlation","8f2f4c86":"### Country Wise Reported Cases\nCountry Wise reported confirmed cases, recovered cases, deaths, active cases","bfdadbac":"# COVID-19 Case (Confirmed and Deaths) Percent Split in Different countries (Pie Viz)\n<hr>\nThese pie plots are showing the proportion of the spread of this Pandemic across the world. Each pie is showing a few major contributor countries, and rest countries are shown as \"Others\". Criteria : \n* Confirmed Cases: Any countries reported more than 20000 confirmed cases are shown the rest of the countries are under \"others\" Category.\n* Deaths: Any Countries reported more than 1000 deaths are shown rest of the countries are under \"others\" Category.\n* Active Cases: Any Countries reported more than 15000 active cases are shown the rest of the countries are under \"others\" Category.\n* Recovered Cases: Any Countries reported more than 2000 recoveries are shown rest of the countries are under \"others\" Category.","7f52407c":"# Preprocessing \n<hr>","94ee2f8e":"### States with Reported Deaths","020bbf9e":"## 1. Spread Across Globe \n<hr> \n### Number of countries affected over the time","263268fb":"# COVID-19 : USA","9bb02802":"## Global Confirmed Cases Heat Map \n<hr>","93ab1d43":"### 2 . COVID-19 Spread Trends in Different Continents","8377ca84":"### Global Reported Cases till Date\nTotal number of confirmed cases, deaths reported, revoveries and active cases all across the world","8ab1b151":"This analysis is made using Machine Learning to predict the best fit curve. The actual curve is following the expected trajectory, if this happens for the next five days, then it may be possible that confirmed cases reach about 400K+. It is a very fast growth, and the actual figure may vary significantly. I will update the prediction curve as more data available.","22d51d40":"# Testing Analysis\n<hr>\n**Dataset :** [Link](https:\/\/ourworldindata.org\/covid-testing)\n<hr>\nTesting is important in controling the spread. As it helps controls further spread of disease by any individual once the suspect found positive, by isolation or quarantine. This section, provides insights based on the data provided by https:\/\/ourworldindata.org.","006918f3":"### Total tests done till date (1 April 2020) in India ","f9cf9a81":"# COVID-19 Daily Analysis\n<hr>\n\n\n## 1. Daily New Confirmed Cases and Deaths","8d496cd8":"# Correlation Analysis\n<hr>\nPlotting Heat map of correlation of confirmed cases, recovered cases, deaths and active cases.\n\n### Country wise Correlation","b887abba":"### Map Visualization (Demographic)","becdc208":"### Test Conducted per Million People","fc199e2d":"### Coninent Wise Reported Cases \nConinent Wise reported confirmed cases, recovered cases, deaths, active cases","b5ae0cb4":"## Map Visualization (Statewise Inida)\n<hr>","a8f3f5dc":"# Comparision of Mortality and Recovery Rate \nIn any Epidemic or Pandemic, the study of Mortality Rate and Recovery Rate has an important role. This plot compares the variation of MR and RR over time through the World. \n","ed400eb4":"# China Vs Outside China","67c5e4ab":"### Correlation","22da191f":"##  2. Spread Trends in the World, Continents and few most affected Countries\n<hr>\n1. COVID-19 Global Spread Trends\n2. COVID-19 Spread Trends in Different Continents\n3. COVID-19 Spread Trends in Few Most Affected Countries\n4. COVID-19 Spread Comparison of few most affected countries\n5. COVID-19 Spread Comparison of in different continents\n\n\n### 1. COVID-19 Global Spread Trends\n<h>\nThis graph shows the confirmed, deaths, recovered and active caes trends over the world.\n","2f0ff7ec":"### 3. COVID-19 Spread Trends in Few Most Affected Countries","af654b03":"## Prediction Curve for Global Death Cases\nBuliding Model","988d2935":"### Top 10 countries (Confirmed Cases and Deaths)","024fda1d":"### Top 15 affected Cities or Counties:","fbf17106":"## Total Test vs Positive (per 100 Test)","973d89b0":"## Tabulation of prediction and actual figure after 5th April-Global"}}