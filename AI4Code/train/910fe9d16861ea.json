{"cell_type":{"58c23f4b":"code","d19ffa50":"code","aaae28ca":"code","e9d58b2c":"code","68b2034d":"code","fb08f4ea":"code","b297ef0e":"code","bc009eae":"code","4983e7f9":"code","a462ef6e":"code","78e51c81":"code","69752b2a":"code","61524567":"markdown","70aaa9ae":"markdown","f0808344":"markdown","adf72e5b":"markdown"},"source":{"58c23f4b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport folium\n%matplotlib inline\ndf = pd.read_csv('\/kaggle\/input\/ontarioproperties\/properties.csv')\nprint(df.shape)\nprint(df.isnull().sum())\ndf.drop(columns='Unnamed: 0', inplace=True)\ndf.rename(columns={'Price ($)':\"Price\"}, inplace=True)\nprint(df.head())","d19ffa50":"fig,axes = plt.subplots(1,3,figsize=(16,2))\ndf['Price'].plot.box(whis=3, grid=True, ax = axes[0])\ndf['lat'].plot.box(whis=3, grid=True, ax = axes[1])\ndf['lng'].plot.box(whis=3, grid=True, ax = axes[2])\nplt.show()","aaae28ca":"def remove_outliers(data, *cols):\n    for col in cols:\n        q1 = data[col].quantile(q = 0.25)\n        q3 = data[col].quantile(q = 0.75) \n        iqr = q3 - q1\n        t1 = q1 - 3 * iqr\n        t2 = q3 + 3 * iqr\n        data = data[(data[col] > t1) & (data[col] < t2)]\n    return data\n\ndata_c = remove_outliers(df, 'Price','lng', 'lat')\ndata_c.shape\nfig,axes = plt.subplots(1,3,figsize=(16,2))\ndata_c['Price'].plot.box(whis=3, grid=True, ax = axes[0])\ndata_c['lat'].plot.box(whis=3, grid=True, ax = axes[1])\ndata_c['lng'].plot.box(whis=3, grid=True, ax = axes[2])\nplt.show()\nprint(data_c.columns,data_c.shape)","e9d58b2c":"# Seperate data with\/without null:\ndata_withna = data_c.loc[data_c['AreaName'].isna()]\ndata_wona = data_c.loc[data_c['AreaName'].notna()]\nprint(data_withna.shape, data_wona.shape)","68b2034d":"# Split train\/test dataset:\nfrom sklearn.model_selection import train_test_split\ntraining, testing = train_test_split(data_wona,test_size=0.25, random_state=1)\n\nx_train = training.copy()[['lat','lng']]\ny_train = training.copy()['AreaName']\n\nx_test = testing.copy()[['lat','lng']]\ny_test = testing.copy()['AreaName']\n\nprint(training.shape)\nprint(testing.shape)","fb08f4ea":"# Build Random Forest Classifier workflow:\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler, PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier \nrf_model = RandomForestClassifier(criterion='gini',\n                                  n_jobs=16,\n                                  max_features = 'auto',\n                                  n_estimators = 100,\n                                  max_depth = None,\n                                  random_state=133)\npipe_clf = Pipeline([\n        ('sc',StandardScaler()),\n        ('power_trans',PowerTransformer()),\n        ('polynom_trans',PolynomialFeatures(degree=2)),\n        ('rf_clf', rf_model)\n        ])\nprint(pipe_clf)","b297ef0e":"# Fit model & Check the accuracy score of the random forest model:\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\npipe_clf.fit(x_train,y_train)\ny_predict = pipe_clf.predict(x_test)\nprint(f'accuracy score is: {accuracy_score(y_test,y_predict)}')","bc009eae":"import warnings\nwarnings.filterwarnings('ignore') \ndata_withna['AreaName'] = pipe_clf.predict(data_withna[['lat','lng']])\ndata_withna.head()","4983e7f9":"# Combine two forms & export\ndata_f = pd.concat([data_wona, data_withna])\ndata_f.head()\n# data_f.to_csv('properties_output.csv')","a462ef6e":"data_g = data_f.groupby('AreaName').mean()\ndata_g['Count'] = data_f.groupby('AreaName').count()['lat']\nmean_lat = data_g['lat'].mean()\nmean_lng = data_g['lng'].mean()\n\ndata_g.sort_values('Price', ascending=False, inplace=True)\n\nprint(data_g)","78e51c81":"from folium.plugins import MarkerCluster\non_map_c = folium.Map(location=[mean_lat, mean_lng], zoom_start=10)\n\n# create a mark cluster object\nmarker_cluster = MarkerCluster().add_to(on_map_c)\n\n# add data point to the mark cluster\nfor i in range(len(data_g)):\n    area_name = data_g.iloc[i].name\n    price = round(data_g.iloc[i]['Price'])\n    lat = data_g.iloc[i]['lat']\n    lng = data_g.iloc[i]['lng']\n    cnt = round(data_g.iloc[i]['Count'])\n    marker_text = f'{area_name}\\nPrice:{price}\\nSize: {cnt}'\n    folium.Marker(\n        location=[lat, lng],\n        popup=marker_text,\n        icon=None\n    ).add_to(marker_cluster)\non_map_c.add_child(marker_cluster)","69752b2a":"# HeatMap of House Prices\nfrom folium.plugins import HeatMap\non_map_c = folium.Map(location=[mean_lat, mean_lng], zoom_start=10)\nHeatMap(data_g[['lat','lng','Price']]).add_to(on_map_c)\non_map_c","61524567":"### Use Random Forest to fill the null AreaName, classify the area of property based on lng and lat information:","70aaa9ae":"### Apply the model to fill any missing AreaName:","f0808344":"*This model seems pretty reliable. :)*","adf72e5b":"### Remove outliers:"}}