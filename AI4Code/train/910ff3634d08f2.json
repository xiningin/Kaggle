{"cell_type":{"549fd758":"code","4ea6973e":"code","c6ee8aba":"code","a9d3d8c0":"code","5d93316c":"code","2b7aaba3":"code","ee5ac8dd":"markdown","65a80f06":"markdown","146b0bdc":"markdown","f61025a0":"markdown","bd1f9027":"markdown"},"source":{"549fd758":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nplt.style.use(\"seaborn-pastel\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4ea6973e":"df_movies = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-only-movie-ratings-and-crew\/df_movies.csv\")\ndf_movies.drop(['Unnamed: 0'],axis=1,inplace=True)\ndf_movies.head(10)","c6ee8aba":"df_names = pd.read_csv(\"\/kaggle\/input\/imdb-dataset-only-movie-ratings-and-crew\/df_names.csv\")\ndf_names.set_index(\"nconst\",drop=True,inplace=True)\ndf_names.head(10)","a9d3d8c0":"grouped = df_movies.groupby(\"ID_title\").first()\ngrouped.head(10)","5d93316c":"top_dirs = grouped[grouped.numVotes>25000].groupby(\"director\").agg(\n                                              av_years=(\"startYear\",\"median\"),\n                                              av_runtime=(\"runtimeMinutes\",\"median\"),\n                                              av_rating=(\"averageRating\",\"median\"),\n                                              av_vote_count=(\"numVotes\",\"median\"),\n                                              no_of_films=(\"director\",\"count\")\n                                              )\n\ndirs_top10_by_rating = pd.merge(df_names[\"primaryName\"],top_dirs[top_dirs.no_of_films>=5],left_index=True,right_index=True).\\\nsort_values(\"av_rating\",ascending=False).head(10)\n\nsns.barplot(data=dirs_top10_by_rating,x=\"av_rating\",y=\"primaryName\",orient=\"h\")\nfor i,name in enumerate(dirs_top10_by_rating.primaryName):\n    plt.text(dirs_top10_by_rating.av_rating[i],i,round(dirs_top10_by_rating.av_rating[i],1),va=\"center\")\n    plt.text(7.05,i,f\"Av. Vote: {int(dirs_top10_by_rating.av_vote_count[i])}\",va=\"center\")\nplt.xlim(7,8.5)\nplt.show()","2b7aaba3":"top_wris = grouped[grouped.numVotes>25000].groupby(\"writer\").agg(\n                                              av_years=(\"startYear\",\"median\"),\n                                              av_runtime=(\"runtimeMinutes\",\"median\"),\n                                              av_rating=(\"averageRating\",\"median\"),\n                                              av_vote_count=(\"numVotes\",\"median\"),\n                                              no_of_films=(\"writer\",\"count\")\n                                              )\n\nwris_top10_by_rating = pd.merge(df_names[\"primaryName\"],top_wris[top_wris.no_of_films>=5],left_index=True,right_index=True).\\\nsort_values(\"av_rating\",ascending=False).head(10)\n\nsns.barplot(data=wris_top10_by_rating,x=\"av_rating\",y=\"primaryName\",orient=\"h\")\nfor i,name in enumerate(wris_top10_by_rating.primaryName):\n    plt.text(wris_top10_by_rating.av_rating[i],i,round(wris_top10_by_rating.av_rating[i],1),va=\"center\")\n    plt.text(7.05,i,f\"Av. Vote: {int(wris_top10_by_rating.av_vote_count[i])}\",va=\"center\")\nplt.xlim(7,8.5)\nplt.show()","ee5ac8dd":"## Top 10 directors with highest rating average\nCondition: Only directors having at least 5 films which are voted 25K or more are considered","65a80f06":"## Top 10 writers with highest rating average\nCondition: Only writers having at least 5 films which are voted 25K or more are considered","146b0bdc":"# df_movies table\n\nThe table consists some of the important information about the movie titles. The table is the merged and trimmed version of the following IMDb original tables:\n* **title_basics** (tconst a.k.a. ID_title, primaryTitle, originalTitle, startYear, runtimeMinutes, genres, averageRating, numVotes,)\n* **title_principals** (nconst a.k.a. ID_crew, category, job, characters)\n* **title_crew** (director, writer)\n\nThe table is sorted by ID_title, missing titles are the ones which are not either movie or tv_movie. \n* **Each title have it's number of crew times rows**\n* Also note that the above number multiplies by number of directors and writers (due to merging tables, therefore groupby function need to be used for single entries for each film)","f61025a0":"# df_names table\n\nThe table is the trimmed version of \"**names_basics**\" table of IMDb's. It contains only the names which are involved in the movies.","bd1f9027":"## Sample use of groupby for titles\n* By taking first rows from each group (movie title), you will miss information from the following columns:\n    * ID_crew, category, job and characters"}}