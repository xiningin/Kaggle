{"cell_type":{"df228dd0":"code","ae102932":"code","e4095594":"code","80684cc2":"code","6e77cf76":"code","dd660c99":"code","b20725f4":"code","5c24664c":"code","b47d26f7":"code","89630841":"code","559dfae0":"code","d9519e2f":"code","2d367c24":"code","842dc466":"code","e9031a41":"code","3094b094":"code","42c1d2f6":"code","66eea71c":"code","1edf5d34":"code","d094834a":"code","cb73d1a7":"code","c8d35fc9":"code","d428f7b6":"code","7f491e96":"code","e0e87495":"code","df1a6ad0":"code","c34df9c8":"code","6c146d68":"code","656e3a81":"code","a19b79fc":"code","5e569bce":"code","f62d81e8":"markdown","08e112be":"markdown","48aa6a25":"markdown"},"source":{"df228dd0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae102932":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns\nfrom sklearn.model_selection import KFold, RandomizedSearchCV, GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA, IncrementalPCA\nfrom sklearn.pipeline import Pipeline","e4095594":"submission = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\nsubmission.head()","80684cc2":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf = df.sample(n=round(len(df)*0.1))\ndf.head()","6e77cf76":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ntest.head()","dd660c99":"useless = [i for i in df.columns if len(df[i].value_counts())==1]","b20725f4":"df = df.drop(useless, axis=1)\ndf.head()","5c24664c":"test = test.drop(useless, axis=1)\ntest.head()","b47d26f7":"y = df.label\nX = df[df.columns[1:]]\nX.head()","89630841":"X_train,X_test, y_train,y_test = train_test_split(X,y, train_size=0.7, random_state=100)","559dfae0":"pca = PCA()\nX_train_pca = pca.fit_transform(X_train)\n\nvar_ratio = np.cumsum(pca.explained_variance_ratio_)\n\nplt.plot(range(1,len(var_ratio)+1), var_ratio)\nplt.show()","d9519e2f":"# Hyperparameter tuning\n\nfolds = KFold(n_splits=5, shuffle=True, random_state=50)\npipeline = Pipeline([('scaler',StandardScaler()),\n                    ('pca', PCA(random_state=20)),\n                    ('svc',SVC(random_state=60))])\n\nhyp = {'pca__n_components':[0.85,0.88,0.9,0.95,0.98,1],\n       'svc__C':[0.1,0.5,1,5,10,20,40,70,100,200,300,500,750,1000],\n        'svc__gamma':[1e-2, 1e-3, 1e-4, 1e-5, 1e-6]}\n\nrnd_2 = RandomizedSearchCV(estimator=pipeline, param_distributions=hyp, n_iter=80, n_jobs=-1, cv=folds,\n                         scoring='accuracy', verbose=3, return_train_score=True, random_state=40)\nrnd_2.fit(X,y)","2d367c24":"rnd_2.best_estimator_, rnd_2.best_score_","842dc466":"# Cross validation of the model using X_train and y_train\nmodel2 = rnd_2.best_estimator_\nfolds = KFold(n_splits=5, shuffle=True, random_state=42)\ncv_score = cross_val_score(model2, X_train, y_train, cv=folds, scoring='accuracy')\ncv_score.mean()","e9031a41":"# Predicting accuracy of X_test\nmodel2.fit(X_train,y_train)\ny_test_pred = model2.predict(X_test)\naccuracy_score(y_test, y_test_pred)","3094b094":"# Using the model to predict 'test' data\nmodel2.fit(X,y)\ntest_pred = model2.predict(test)","42c1d2f6":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf.head()","66eea71c":"# Splitting the data\ntrain,test = train_test_split(df, train_size=0.7, random_state=100)\n\nX_train = train.drop('label', axis=1)\ny_train = train.label\n\nX_test = test.drop('label', axis=1)\ny_test = test.label","1edf5d34":"index = 45\nplt.imshow((np.array(X_train.iloc[index])).reshape(28,28))\nplt.show()","d094834a":"# Function to one hot encode the labels\ndef one_hot(lst):\n    p = np.zeros([len(lst),np.array(lst).max()+1])\n    for i in enumerate(lst):\n        p[i[0],i[1]] = 1\n    return p","cb73d1a7":"# Above function is used to one hot encode the labels\ny_train = one_hot(y_train)\ny_test = one_hot(y_test)","c8d35fc9":"# Library imports\nfrom keras.models import Sequential\nfrom keras.layers import Dense","d428f7b6":"# Model initialization and training\nmodel = Sequential()\nmodel.add(Dense(35, input_dim=784, activation='relu'))\nmodel.add(Dense(21, activation='relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss='CategoricalCrossentropy', optimizer='adam', metrics='accuracy')\n\nmodel.fit(X_train,y_train, batch_size=25, epochs=30)","7f491e96":"model.evaluate(X_train,y_train)","e0e87495":"model.evaluate(X_test,y_test)","df1a6ad0":"# Function to compare image and predictions\ndef show(index,df):\n    preds = [np.argmax(i) for i in model.predict(df)]\n    plt.imshow(np.array(df.iloc[index]).reshape(28,28))\n    plt.show()\n    print('Prediction =',preds[index])","c34df9c8":"index = [np.random.random_integers(1000) for i in range(10)]\nfor i in index:\n    show(i,X_test)","6c146d68":"submission_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nsubmission_test.head()","656e3a81":"index = [np.random.random_integers(1000) for i in range(10)]\nfor i in index:\n    show(i,submission_test)","a19b79fc":"preds = [np.argmax(i) for i in model.predict(submission_test)]\nsubmission.Label = preds","5e569bce":"submission.to_csv('\/kaggle\/working\/submission.csv')","f62d81e8":"## Splitting and scaling","08e112be":"## PCA","48aa6a25":"## Neural Network"}}