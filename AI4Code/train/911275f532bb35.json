{"cell_type":{"3869a05f":"code","44b22bb8":"code","5b32152c":"code","2b2ac2d0":"code","486d44c5":"code","ea111a52":"code","11983f07":"code","dc7adca3":"code","e208e9ed":"code","e2f363c7":"code","48e921b8":"code","15817722":"code","f9f1d3c7":"code","6525e2c8":"code","32bd3f05":"code","a5e8a65e":"code","077a695c":"code","4f218294":"code","d3718751":"code","6b3b7789":"code","8df1244a":"markdown","9dd8db35":"markdown","cac532a2":"markdown","a18f9824":"markdown"},"source":{"3869a05f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","44b22bb8":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5b32152c":"df = pd.read_csv('\/kaggle\/input\/honey-production\/honeyproduction.csv')","2b2ac2d0":"df.info()","486d44c5":"df.head()","ea111a52":"## Scatter plot depicts the joint distribution of two variables using a cloud of points, \n## where each point represents an observation in the dataset. This is very useful in finding any\n## substantial relationship between 2-variables if any. So for any continuous variables, this should\n## be your first choice of visualization\nplt.figure(figsize=(10,4))\nsns.scatterplot(x='priceperlb', y='totalprod', data=df)","11983f07":"##  In case you want to plot scatter plot between multiple variables, one can use pairplot\nsns.pairplot(df[['numcol', 'yieldpercol', 'totalprod', 'stocks', 'priceperlb', 'prodvalue']])","dc7adca3":"sns.jointplot(x='numcol', y='totalprod', data=df, kind='reg')","e208e9ed":"##With some datasets, you may want to understand changes in one variable as a function of time, \n## or a similarly continuous variable. In this situation, a good choice is to draw a line plot\n## In below one can clerly understand that there is decrease in production every consecutive year\nsns.lineplot(x='year', y='totalprod', data=df)","e2f363c7":"plt.figure(figsize=(10,4))\nsns.stripplot(df.year, df.totalprod)","48e921b8":"plt.figure(figsize=(20,10))\nchart = sns.boxplot(x='year', y='totalprod', data=df)","15817722":"plt.figure(figsize=(10,4))\nsns.pointplot(x='year', y='totalprod', data=df)","f9f1d3c7":"plt.figure(figsize=(10,4))\nsns.barplot(x='year', y='totalprod', data=df)","6525e2c8":"g = sns.FacetGrid(df, col='state', col_wrap=10, size=3)\ng.map(plt.plot, \"year\", \"totalprod\", marker=\"+\")","32bd3f05":"df.describe().transpose()","a5e8a65e":"#Total unique states\nprint(df.state.unique())\nprint(\"Total number of states = \", df.state.nunique())","077a695c":"## State with max production with year\ndf[df.totalprod == df.totalprod.max()][['state', 'year', 'totalprod']]","4f218294":"## average yield per col \ndf.groupby('year').mean().round(3)[['yieldpercol']]","d3718751":"corr = df[['numcol', 'yieldpercol', 'totalprod', 'stocks', 'priceperlb', 'prodvalue']].corr()\ncorr","6b3b7789":"sns.heatmap(corr, annot=True, cmap='plasma', vmax=1, vmin=-1)","8df1244a":"**BOX plot**: This kind of plot shows the three quartile values of the distribution along with extreme values.The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, \nand then observations that fall outside this range are displayed independently. This graph gives a five point summary (Lowest, Q1, Median, Q3, Largest) in a graphical manner, however misses the mode of the data. For getting the mode of the data, one can use histograms which can easily point the mode.","9dd8db35":"Jointplot by default makes the scatter plot and you can also try to fit the linear regression line.  This is very usefult for finding any linear relationship between 2-variables","cac532a2":"Above plots are good for continuous variables, in case one of the variable is categorial then different kind of plots are present in seaborn. It\u2019s helpful to think of the different categorical plot kinds as belonging to three different families, which we\u2019ll discuss in detail below. \n\nThey are:\n**Categorical scatterplots:**\n* stripplot() (with kind=\u201dstrip\u201d; the default)\n* swarmplot() (with kind=\u201dswarm\u201d)\n\n**Categorical distribution plots:**\n* boxplot() (with kind=\u201dbox\u201d)\n* violinplot() (with kind=\u201dviolin\u201d)\n* boxenplot() (with kind=\u201dboxen\u201d)\n\n**Categorical estimate plots:**\n* pointplot() (with kind=\u201dpoint\u201d)\n* barplot() (with kind=\u201dbar\u201d)\n* countplot() (with kind=\u201dcount\u201d)","a18f9824":"For other applications, rather than showing the distribution within each category, you might want to show an estimate of the central tendency of the values. A familiar style of plot that accomplishes this goal is a bar plot. In seaborn, the barplot() function operates on a full dataset and applies a function to obtain the estimate (taking the mean by default). When there are multiple observations in each category, it also uses bootstrapping to compute a confidence interval around the estimate and plots that using error bars"}}