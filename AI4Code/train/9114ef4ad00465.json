{"cell_type":{"d710d190":"code","13825bd2":"code","b4e7a05b":"code","32df7747":"code","ea3b629e":"code","2fbd0cea":"code","9f4e3bbc":"markdown","a68ed324":"markdown","297b74e9":"markdown","f5f56e10":"markdown","40bcf96a":"markdown","06c82f09":"markdown"},"source":{"d710d190":"import numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\nimport os","13825bd2":"img = cv.imread('..\/input\/gradpng\/gradpng.png')\nimg = cv.cvtColor(img, cv.COLOR_BGR2GRAY)\nimg = (img - img.flatten().mean()) \/ img.flatten().std() # zero-center","b4e7a05b":"plt.imshow(img, cmap='gray')\nplt.colorbar()\nplt.show()","32df7747":"def relu(X):\n    return np.where(X <=0, 0, X)","ea3b629e":"nonlin_img = relu(img)","2fbd0cea":"plt.imshow(nonlin_img, cmap='gray')\nplt.colorbar()\nplt.show()","9f4e3bbc":"# Need for ReLU\n\nBasically, makes sure that the whole network doesn't decompose into single linear model\n\n**Note:** `conv -> relu -> pool` is same as `conv -> pool -> relu` ","a68ed324":"> **Note:** left side became darker","297b74e9":"> *Converts linear transition in images into setp-wise transitions, giving it ability to distinguish edges and plain surfaces*","f5f56e10":"# But More importantly and intuitively","40bcf96a":"With activations, now we can differentiate between surface and edge better now","06c82f09":"Imagine we had a blurry image, where we cannot differentiate between surface edge and surface - "}}