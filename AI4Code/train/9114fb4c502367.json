{"cell_type":{"f4f4221b":"code","373f2fc9":"code","fd3bdb1d":"code","e6d726d9":"code","a56b897d":"code","72a0b985":"code","23081af6":"code","65edf990":"code","355cad23":"code","7b0064d7":"code","c4f536b4":"code","e03b77cd":"code","34cd2654":"code","bf153bb7":"code","1af816c1":"code","7f12abde":"code","39c54135":"code","6ff9f430":"code","c397238b":"code","1fb77c3d":"code","c41fb49b":"code","4924fd00":"code","53b3f4b9":"code","ac1ada0f":"code","83eb2fa6":"code","590350da":"code","57bdead7":"code","55171846":"code","b6b7288f":"code","257d8ed1":"code","00c9cbd2":"markdown","40154940":"markdown","6a549c6c":"markdown","deab65ca":"markdown","b692f8d1":"markdown","92ca4166":"markdown","023eaff1":"markdown","7ce2a23c":"markdown","e8596e96":"markdown","894204ed":"markdown","e5edfa12":"markdown","eff73a65":"markdown","c0b762c1":"markdown"},"source":{"f4f4221b":"# Manipula\u00e7\u00e3o de dados:\nimport pandas as pd \nimport missingno as msno \nfrom collections import Counter\nfrom warnings import filterwarnings\n\n\n# Visualiza\u00e7\u00e3o Gr\u00e1fica:\nimport seaborn as sns\nimport matplotlib as plt\nimport plotly.express as px \n\n\n# Pr\u00e9-processamento de dados: \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import StandardScaler\n\n# Modelos de Classifica\u00e7\u00e3o \nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,SGDClassifier,PassiveAggressiveClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.svm import SVC,LinearSVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier,NearestCentroid\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.ensemble import VotingClassifier\n\n\n\n# Evolu\u00e7\u00e3o :\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold","373f2fc9":"data = pd.read_csv(\"..\/input\/water-potability\/water_potability.csv\")","fd3bdb1d":"data.head()","e6d726d9":"data.info()","a56b897d":"data.describe()","72a0b985":"data.isnull().sum()","23081af6":"\nfig = msno.matrix(data, color=(0,0.6,0.8))","65edf990":"fig = px.histogram(data, x='ph', y =Counter(data['ph']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\nfig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\n#fig.add_annotation(text='<7 Acid', x = 4, y= 70, showarrow=False, font_size=14)\n#fig.add_annotation(text=\">7 Basic\", x=10, y=70, showarrow=False, font_size=14)\nfig.update_layout(font_family='monospace', title=dict(text=\"pH Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='pH',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()\n","355cad23":"fig = px.histogram(data, x='Hardness', y =Counter(data['ph']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\n#fig.add_annotation(text='<7 Acid', x = 4, y= 70, showarrow=False, font_size=14)\n#fig.add_annotation(text=\">7 Basic\", x=10, y=70, showarrow=False, font_size=14)\nfig.update_layout(font_family='monospace', title=dict(text=\"Hardness Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Hardness (mg\/L)',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","7b0064d7":"fig = px.histogram(data, x='Solids', y =Counter(data['ph']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\n#fig.add_annotation(text='<7 Acid', x = 4, y= 70, showarrow=False, font_size=14)\n#fig.add_annotation(text=\">7 Basic\", x=10, y=70, showarrow=False, font_size=14)\nfig.update_layout(font_family='monospace', title=dict(text=\"STD Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='STD (ppm)',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","c4f536b4":"fig = px.histogram(data, x='Chloramines', y =Counter(data['ph']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Chloramines Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Chloramines (ppm)',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","e03b77cd":"fig = px.histogram(data, x='Sulfate', y =Counter(data['ph']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Sulfate Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Sulfate (mg\/L)',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","34cd2654":"fig = px.histogram(data, x='Conductivity', y =Counter(data['Conductivity']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Conductivity Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Conductivity (S\/cm)',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","bf153bb7":"fig = px.histogram(data, x='Organic_carbon', y =Counter(data['Organic_carbon']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Organic Carbon Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Organic Carbon',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","1af816c1":"fig = px.histogram(data, x='Trihalomethanes', y =Counter(data[\"Trihalomethanes\"]), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Trihalomethanes Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Trihalomethanes',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","7f12abde":"fig = px.histogram(data, x='Turbidity', y =Counter(data['Turbidity']), color=\"Potability\", template='plotly_white',marginal='box', opacity=0.8, nbins=100,color_discrete_sequence=[\"#c9d179\",\"#3344dd\"], barmode='group',histfunc='count')\n#fig.add_vline(x=7, line_width=3,line_color=\"#333333\", line_dash='dot',opacity=0.7)\n\nfig.update_layout(font_family='monospace', title=dict(text=\"Turbidity Distribution\", x=0.5, y=0.95), \n                 xaxis_title_text='Turbidity',\n                 yaxis_title_text='Count'\n                 )\n\nfig.show()","39c54135":"cor = data.drop(\"Potability\", axis = 1).corr()\ncor ","6ff9f430":"#fig,ax = plt.subplots(figsize=(10,10))\n#plt.figure(figsize=(16, 6))\nsns.heatmap(data.corr(), annot=True, fmt='.1g',cmap='crest',)","c397238b":"data.isnull().sum()","1fb77c3d":"data.dropna(inplace=True)","c41fb49b":"from sklearn.model_selection import train_test_split ","4924fd00":"X = data.drop(\"Potability\", axis = 1)","53b3f4b9":"y = data['Potability']","ac1ada0f":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 24 )","83eb2fa6":"scaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test=scaler.transform(x_test)","590350da":"filterwarnings('ignore')\nmodels = [(\"LR\", LogisticRegression(max_iter=1000)),\n          (\"SVC\", SVC()),\n          (\"KNC\", KNeighborsClassifier(n_neighbors=10)),\n          (\"DTC\", DecisionTreeClassifier()),\n          (\"GNB\", GaussianNB()),\n          (\"SGDC\", SGDClassifier()),\n          (\"Perc\", Perceptron()),\n          (\"NC\", NearestCentroid()),\n          (\"Ridge\", RidgeClassifier()),\n          (\"NuSVC\", NuSVC()),\n          (\"BNB\", BernoulliNB()),\n          (\"RF\", RandomForestClassifier()),\n          (\"ADA\", AdaBoostClassifier()),\n          (\"XGB\", GradientBoostingClassifier()),\n          (\"PAC\", PassiveAggressiveClassifier())\n]\n\nresults = []\nnames = []\nfinalresults = []\n\nfor name, model in models:\n    model.fit(x_train, y_train)\n    model_results = model.predict(x_test)\n    score = precision_score(y_test, model_results, average ='macro')\n    results.append(score)\n    names.append(name)\n    finalresults.append((name,score))\n    \nfinalresults.sort(key=lambda k:k[1],reverse=True)\n","57bdead7":"finalresults","55171846":"# Grid search  and Space:\n\nmodel_params = {\n    \"RF\":{'model':RandomForestClassifier(),\n         'params':{\n             'max_features': list(range(1,10)),\n             'n_estimators':[10,100,1000]\n         }},\n    'SVC':{'model':SVC(),\n           'params':{\n               'kernel':['lienar','poly','rbf','sigmoid'],\n               'C':[100,10,1.0,0.1,0.001]\n           }},\n    'KNC':{'model':KNeighborsClassifier(),\n           'params':{\n               'n_neighbors':list(range(1,21)),\n               'metric':['euclidean','manhattan','minkowski'],\n               'weights':['uniform','distance']\n           }}\n    }\n\n# Evaluation:\n\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=2)\n\n#Search:\nscores=[]\nfor model_name, params in model_params.items():\n    rs = RandomizedSearchCV(params['model'],params['params'],cv=cv , n_iter=10)\n    rs.fit(x_train, y_train)\n    scores.append([model_name,dict(rs.best_params_),rs.best_score_])\ndata=pd.DataFrame(scores,columns=['Model','Parameters','Score'])\ndata","b6b7288f":"rf = RandomForestClassifier(n_estimators=100, max_features=3)\n\nrf.fit(x_train,y_train)\npotability = rf.predict(x_test)","257d8ed1":"# Grid Search:\n\nmodel = LogisticRegression()\n\n# Search Space:\n\nspace = {'solver':['newton-cg','lbfgs', 'liblinear', 'sag', 'saga'],\n        'penalty':['none', 'l1', 'l2', 'elasticnet'],\n        'C':[100, 10, 1.0, 0.1, 0.01]}\n# Evaluation:\ncv = RepeatedStratifiedKFold(n_splits = 10, n_repeats=3, random_state=1)\n# Search:\n\nsearch = GridSearchCV(model, space, cv=cv , scoring='accuracy', n_jobs=-1)\n\nresult=search.fit(x_train, y_train)\n\nprint('Best Score: %s' % result.best_score_)\nprint('Best Hyperparameters: %s' % result.best_params_)\n","00c9cbd2":"# <html>\n\n    \n<div  style=\"background-color:w; color:#636363;border:#107ab0; border-width:5px; border-style:solid;\">\n\n    \n<p><center><img src=\"https:\/\/drive.google.com\/thumbnail?id=1yPGYO8HkTanlqsIXozDIUvUVuvawAdG_\" width =\"6%\"  \/><font size=8> <b>Modelo Preditivo Qualidade de \u00c1gua<\/b><\/font> <\/p>\n<p ><font size=6><center>Ives Tulio<\/font> <\/p>\n<p ><font size=4><center><b>email:<\/b> ivestulio@gmail.com <br> \n<b>Linkedin:<\/b> in\/ives-tulio\/<br>\n<b>GitHub:<\/b> ivestulio<\/p>\n\n<\/div>\n<\/html>","40154940":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h1><center>Modelling <\/center><\/h1>\n<\/div>","6a549c6c":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h1><center>Libraries<\/center><\/h1>\n<\/div>","deab65ca":"## Descri\u00e7\u00e3o dos Dados: \n\nResultado da an\u00e1lise de 3276 amostras de \u00e1gua: \n* pH\n* Hardness (Dureza Total)\n* Solids (S\u00f3lidos Totais Dissolvidos)\n* Chloromines\n* Sulfate\n* Conductivity\n* Organic Carbom\n* Trihalomethanes\n* Turbidity\n* **Potability**\n\n## Avalia\u00e7\u00f5es:\n\n* Qual a distribui\u00e7\u00e3o de dados \n* Qual a rela\u00e7\u00e3o entre os par\u00e3metros f\u00edsico-qu\u00edmicos e a qualidade da \u00e1gua.\n","b692f8d1":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h4><center>Standardizing the Data:<\/center><\/h4>\n<\/div>\n","92ca4166":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h4><center>Divindindo os Dados:<\/center><\/h4>\n<\/div>","023eaff1":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h1><center>Data Tratament <\/center><\/h1>\n<\/div>","7ce2a23c":"* The 3 best models are : RF , SVC , KNC","e8596e96":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h1><center>Importing the Dataset<\/center><\/h1>\n<\/div>","894204ed":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h1><center>Visualizations <\/center><\/h1>\n<\/div>","e5edfa12":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h4><center>Hyperparameter Tuning<\/center><\/h4>\n<\/div>","eff73a65":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h4><center>Spot Checking<\/center><\/h4>\n<\/div>","c0b762c1":"<div style=\"background-color:#ccc; color:#06c;\">\n    <h4><center>Modelo Final<\/center><\/h4>\n<\/div"}}