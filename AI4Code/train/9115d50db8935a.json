{"cell_type":{"5a32bfcc":"code","19d2d4e4":"code","aaaf4e4f":"code","8ce675bf":"code","67a4ff53":"code","83b5239f":"code","065515c8":"code","ffe2bf9d":"code","deb54586":"code","65fb99b8":"code","67ce6451":"code","0c502df1":"code","cfd1cd79":"code","e14d6d0c":"code","f4d866b3":"code","b81061bf":"code","8797a8d2":"code","29812133":"code","4ed503bc":"code","abac7cc2":"code","bb42fb3b":"code","93ca78d9":"code","d77e5d14":"code","335c0ba1":"code","280d5545":"code","a30854ac":"code","f1276342":"code","72097c8b":"code","a9fa5663":"code","2d44bc7b":"code","de3b115d":"markdown","ccc6f1ad":"markdown","d78327db":"markdown","56752c97":"markdown","1de609ec":"markdown","4816f921":"markdown","fe20f392":"markdown","45baa486":"markdown","b92255c1":"markdown","d74fdb48":"markdown","35772911":"markdown","3e3c7006":"markdown","cb0d2e02":"markdown","e1bf5c34":"markdown","0ffeb862":"markdown","3a32497a":"markdown","364b8832":"markdown","d3b7a23f":"markdown","2512df95":"markdown"},"source":{"5a32bfcc":"import pandas as pd\nimport numpy as np\nimport scipy.stats as sy\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\n\nfrom sklearn.metrics import confusion_matrix, f1_score\nfrom sklearn.metrics import accuracy_score,classification_report\nfrom sklearn.metrics import auc,roc_curve,make_scorer","19d2d4e4":"# Reading Training data and creating the dataframe \ndf = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/TrainingWiDS2021.csv',index_col=0).set_index('encounter_id')\n\n# Checking the first 5 rows of the data\ndf.head()","aaaf4e4f":"# Reading Unlabeled data and creating the dataframe \nunlabel = pd.read_csv('\/kaggle\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv',index_col=0).set_index('encounter_id')\n\n# Checking the first 5 rows of the data\nunlabel.head()","8ce675bf":"print(\"# of observations in given dataset: \",df.shape[0])","67a4ff53":"# number of rows and columns in dataset \ndf.shape","83b5239f":"# Display the column labels \ndf.columns","065515c8":"# to print the full summary \ndf.info()","ffe2bf9d":"#Column Data Type Assessment\ndf.dtypes.value_counts()","deb54586":"# Statistical Summary of Numeric Variables\ndf.describe()","65fb99b8":"## # visualize distribution of classes \nsns.set(style=\"darkgrid\")\nsns.countplot(data=df, x='diabetes_mellitus', label='Count')\n\nN, Y = df['diabetes_mellitus'].value_counts()\nprint('Number of patients with diabetes mellitus : NO ',N)\nprint('Number of patients with diabetes mellitus : YES :',Y)","67ce6451":"#  Vizualize relationship between age & bmi using Scatterplot\nfig, ax = plt.subplots(figsize=(15, 6))\ntmp = df.head(1000)\nsns.scatterplot(x=tmp.age, y=tmp.glucose_apache,\n                     hue=tmp.diabetes_mellitus)","0c502df1":"unwanted = ['hospital_id','hospital_admit_source','icu_admit_source','icu_id'\n            ,'icu_stay_type','icu_type','readmission_status']\n\ndf.drop(unwanted,axis=1,inplace=True)\nunlabel.drop(unwanted,axis=1,inplace=True)","cfd1cd79":"# checking column wise null values\ndf.isnull().any().sum()","e14d6d0c":"# checking column wise null values\nfig, ax = plt.subplots(figsize=(16, 5))\nsns.heatmap(df.isnull(), yticklabels=False, cmap=\"viridis\")","f4d866b3":"df = df.fillna(-9999).copy()\nunlabel = unlabel.fillna(-9999)\n# checking column wise null values\ndf.isnull().any().sum()","b81061bf":"# checking column wise null values\nfig, ax = plt.subplots(figsize=(16, 5))\nsns.heatmap(df.isnull(), yticklabels=False, cmap=\"viridis\")","8797a8d2":"cat_cols = df.dtypes[df.dtypes == \"object\"].index\nprint(cat_cols)","29812133":"lbl_encode = LabelEncoder()\nfor col in cat_cols:\n    df[col] = lbl_encode.fit_transform(df[col].astype(str))\n    unlabel[col] = lbl_encode.fit_transform(unlabel[col].astype(str))","4ed503bc":"#Extracting Independent and dependent Variable \nX = df.drop(['diabetes_mellitus'], axis = 1) \ny = df['diabetes_mellitus']","abac7cc2":"# Feature scaling using min max Scaler\n\ncolumns = df.columns[:-1]\n\nmm_X = MinMaxScaler()\nX = mm_X.fit_transform(X)\nX = pd.DataFrame(X,columns=columns)\n\nX.head()","bb42fb3b":"#Split data into training and testing datasets 70% for training and 30% for testing\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42, stratify=y)\n\nprint ('Training set :',X_train.shape)\nprint ('Testing set :',X_test.shape)","93ca78d9":"# A parameter grid for XGBoost\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5],\n        'missing':[-9999]\n        }\n\n\nxgb = XGBClassifier(learning_rate=0.02, n_estimators=600, eval_metric ='logloss',\n                    nthread=1, use_label_encoder=False)\n\nskf = StratifiedKFold(n_splits=3, shuffle = True, random_state = 1001)\n\nrandom_search = RandomizedSearchCV(xgb, param_distributions=params, n_iter=5, scoring='roc_auc', \n                                   n_jobs=4, cv=skf.split(X_test[:100], y_test[:100]), verbose=1, random_state=1001 )\nrandom_search.fit(X_train[:1000], y_train[:1000])\nprint(random_search.best_params_)","d77e5d14":"xgb = XGBClassifier(alpha=0.1, colsample_bytree=1, learning_rate=0.01, max_depth=4, n_estimators= 250,\n                     eval_metric = 'error',\n                     use_label_encoder=False)\nxgb.fit(X_train, y_train)","335c0ba1":"#Predicting the test set result  \ny_pred= xgb.predict(X_test) \n\n#Model Accuracy\naccuracy = accuracy_score(y_test, y_pred) \nprint('XGB - Accuracy : %.2f%%' % (accuracy*100))","280d5545":"cm= confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cm), annot=True, fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","a30854ac":"# ROC curv\nfig = plt.figure(figsize=(10,6))\ny_pred_prob = xgb.predict_proba(X_test)[:,1]\nfalse_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred_prob)\nroc_auc = auc(false_positive_rate, true_positive_rate)\nplt.title('Receiver Operating Characteristic')\nplt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)\nplt.legend(loc='lower right')\nplt.plot([0,1],[0,1],'r--')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","f1276342":"# Feature scaling using min max Scaler\ncolumns = unlabel.columns\n\nmm_X = MinMaxScaler()\nUX = mm_X.fit_transform(unlabel)\nUX = pd.DataFrame(UX,columns=columns)\n\n#Predicting the test set result  \ny_unlabel_pred= xgb.predict(UX)","72097c8b":"#Submission dataframe\ny_unlabel_prob = xgb.predict_proba(UX)[:,1]\nresult_df = pd.DataFrame(data={'encounter_id':unlabel.index, \n                                'diabetes_mellitus':y_unlabel_prob})\n\nresult_df = result_df.sort_values(by=['encounter_id'])\nresult_df.to_csv('Wells Army_random_grid_search-xgb.csv', index=False)","a9fa5663":"from sklearn.calibration import calibration_curve\n\ndef model_comparison(X_train,X_test, y_train,y_test):\n    plt.figure(figsize=(10, 10))\n    ax1 = plt.subplot2grid((3, 1), (0, 0), rowspan=2)\n    ax2 = plt.subplot2grid((3, 1), (2, 0))\n    \n    ax1.plot([0, 1], [0, 1], \"k:\", label=\"Perfectly calibrated\")\n    for clf, name in [\n                     (xgb, 'XGBoost')]:\n        #clf.fit(X_train, y_train)\n        if hasattr(clf, \"predict_proba\"):\n            prob_pos = clf.predict_proba(X_test)[:, 1]\n        else:  # use decision function\n            prob_pos = clf.decision_function(X_test)\n            prob_pos = \\\n                (prob_pos - prob_pos.min()) \/ (prob_pos.max() - prob_pos.min())\n        fraction_of_positives, mean_predicted_value = \\\n            calibration_curve(y_test, prob_pos, n_bins=10)\n    \n        ax1.plot(mean_predicted_value, fraction_of_positives, \"s-\",\n                 label=\"%s\" % (name, ))\n    \n        ax2.hist(prob_pos, range=(0, 1), bins=10, label=name,\n                 histtype=\"step\", lw=2)\n    \n    ax1.set_ylabel(\"Fraction of positives\")\n    ax1.set_ylim([-0.05, 1.05])\n    ax1.legend(loc=\"lower right\")\n    ax1.set_title('Calibration plots  (reliability curve)')\n    \n    ax2.set_xlabel(\"Mean predicted value\")\n    ax2.set_ylabel(\"Count\")\n    ax2.legend(loc=\"upper center\", ncol=2)\n    \n    plt.tight_layout()\n    plt.show()","2d44bc7b":"model_comparison(X_train,X_test, y_train,y_test)","de3b115d":"### <span style=\"color:#FF00FF\">Testing<\/span>","ccc6f1ad":"### <span style=\"color:#FF00FF\">Load the datasets<\/span>","d78327db":"### <span style=\"color:#FF00FF\">Converting Categorical features into numeric<\/span>","56752c97":"### <span style=\"color:#FF00FF\">Building model - XGBoost<\/span>","1de609ec":"### <span style=\"color:#FF00FF\">Visualizing Dataset<\/span>","4816f921":"#### Note: The 50% row represents the median value","fe20f392":"### <span style=\"color:#FF00FF\">Confusion matrix<\/span>","45baa486":"### <span style=\"color:#FF00FF\">Evaluating Model<\/span>","b92255c1":"### <span style=\"color:#FF00FF\">Finding & Filling Missing Values<\/span>","d74fdb48":"Objective of this competition is to develop models and make predictions to determine whether a patient admitted to ICU has been diagnosed with a particular type of diabetes, Diabetes Mellitus, using labeled training data from the first 24 hours of intensive care.","35772911":"### <span style=\"color:#FF00FF\">Import libraries<\/span>","3e3c7006":"### <span style=\"color:#FF00FF\">Submission<\/span>","cb0d2e02":"### Wells Army - WiDS Datathon 2021","e1bf5c34":"### <span style=\"color:#FF00FF\">Predicting Unlabeled data<\/span>","0ffeb862":"### <span style=\"color:#FF00FF\">Exploratory data analysis<\/span>","3a32497a":"### <span style=\"color:#FF00FF\">Split train and test data<\/span>","364b8832":"### <span style=\"color:#FF00FF\">Split features and labels<\/span>","d3b7a23f":"### <span style=\"color:#FF00FF\">Removing unwanted Features<\/span>","2512df95":"### <span style=\"color:#FF00FF\">Features Scaling<\/span>"}}