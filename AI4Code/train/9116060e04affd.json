{"cell_type":{"ac7ef877":"code","75926464":"code","3e368017":"code","6f78b2a3":"code","d69f5878":"code","fd236fa0":"code","0c04976f":"code","0dff9333":"code","a42cc82c":"code","d0c5052d":"code","9daaaa3c":"markdown","397d22ef":"markdown","72caefda":"markdown","92e64b4a":"markdown","b365b70b":"markdown","3cceca77":"markdown","93462aed":"markdown"},"source":{"ac7ef877":"P = {}\nP['EPOCHS'] = 30\nP['BACKBONE'] = 'efficientnetb4' \nP['NFOLDS'] = 4\nP['SEED'] = 0\nP['VERBOSE'] = 0\nP['DISPLAY_PLOT'] = True \nP['BATCH_COE'] = 8 # BATCH_SIZE = P['BATCH_COE'] * strategy.num_replicas_in_sync\nP['DIM'] = 512 # 256 128\nP['LR'] = 5e-4 \nP['OVERLAPP'] = True\n\n# create parameters file\nimport yaml\nwith open(r'params.yaml', 'w') as file:\n    yaml.dump(P, file)","75926464":"! pip install segmentation_models -q\n%matplotlib inline\n\nimport os\nos.environ['SM_FRAMEWORK'] = 'tf.keras'\nimport glob\nimport segmentation_models as sm\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import KFold\n\nimport tensorflow as tf\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.utils import get_custom_objects\n\nfrom kaggle_datasets import KaggleDatasets\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE","3e368017":"try: # detect TPUs\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() # TPU detection\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu) # \u8c03\u7528TPU\nexcept ValueError: # no TPU found, detect GPUs\n    #strategy = tf.distribute.MirroredStrategy() # for GPU or multi-GPU machines\n    strategy = tf.distribute.get_strategy() # default strategy that works on CPU and single GPU\n    #strategy = tf.distribute.experimental.MultiWorkerMirroredStrategy() # for clusters of multi-GPU machines\n\nBATCH_SIZE = P['BATCH_COE'] * strategy.num_replicas_in_sync\n# \u8f93\u51fa\u8bbe\u5907\u6570\u91cf\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)\nprint(\"BATCH_SIZE: \", str(BATCH_SIZE))","6f78b2a3":"GCS_PATH = KaggleDatasets().get_gcs_path(f'hubmap-tfrecords-1024-{P[\"DIM\"]}')\n# \u9009512\u7ef4\u7684\u6570\u636e\nALL_TRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrec')\nALL_TRAINING_FILENAMES","d69f5878":"if P['OVERLAPP']:\n    GCS_PATH2 = KaggleDatasets().get_gcs_path(f'hubmap-tfrecords-1024-{P[\"DIM\"]}-2')\n    ALL_TRAINING_FILENAMES2 = tf.io.gfile.glob(GCS_PATH2 + '\/train2\/*.tfrec')\n    #print(ALL_TRAINING_FILENAMES2)","fd236fa0":"import re\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\nprint('NUM_TRAINING_IMAGES:' )\nif P['OVERLAPP']:\n    print(count_data_items(ALL_TRAINING_FILENAMES2)+count_data_items(ALL_TRAINING_FILENAMES))\nelse:\n    print(count_data_items(ALL_TRAINING_FILENAMES))","0c04976f":"DIM = P['DIM'] # 512\u7ef4\n# \u597d\u50cf\u662f\u5bf9\u56fe\u50cf\u8fdb\u884c\u53d8\u6362\u3001\u505a\u56fe\u50cf\u589e\u5f3a\ndef _parse_image_function(example_proto,augment = True):\n    image_feature_description = {\n        'image': tf.io.FixedLenFeature([], tf.string),\n        'mask': tf.io.FixedLenFeature([], tf.string)\n    }\n    single_example = tf.io.parse_single_example(example_proto, image_feature_description)\n    image = tf.reshape( tf.io.decode_raw(single_example['image'],out_type=np.dtype('uint8')), (DIM,DIM, 3))\n    # \u8fd9\u662f\u7528\u6765\u906e\u7f69\u56fe\u50cf\u7684\u5c0f\u65b9\u5757\n    mask =  tf.reshape(tf.io.decode_raw(single_example['mask'],out_type='bool'),(DIM,DIM,1))\n    \n    if augment: # https:\/\/www.kaggle.com\/kool777\/training-hubmap-eda-tf-keras-tpu\n        # \u6c34\u5e73\u7ffb\u8f6c\u56fe\u50cf\u3001\u4ece\u5de6\u5230\u53f3\n        if tf.random.uniform(()) > 0.5:\n            image = tf.image.flip_left_right(image)\n            mask = tf.image.flip_left_right(mask)\n        # \u4e0a\u4e0b\u7ffb\u8f6c\u56fe\u50cf\n        if tf.random.uniform(()) > 0.4:\n            image = tf.image.flip_up_down(image)\n            mask = tf.image.flip_up_down(mask)\n        # \u56fe\u50cf\u9006\u65f6\u9488\u65cb\u8f6c90\u5ea6\n        if tf.random.uniform(()) > 0.5:\n            image = tf.image.rot90(image, k=1)\n            mask = tf.image.rot90(mask, k=1)\n        # \u7528\u968f\u673a\u56e0\u5b50\u8c03\u6574RGB\u56fe\u50cf\u7684\u9971\u548c\u5ea6\n        if tf.random.uniform(()) > 0.45:\n            image = tf.image.random_saturation(image, 0.7, 1.3)\n        # \u901a\u8fc7\u968f\u673a\u56e0\u5b50\u8c03\u6574\u56fe\u50cf\u7684\u5bf9\u6bd4\u5ea6\n        if tf.random.uniform(()) > 0.45:\n            image = tf.image.random_contrast(image, 0.8, 1.2)\n    return tf.cast(image, tf.float32),tf.cast(mask, tf.float32)\n\n# \u5bfc\u5165\u6570\u636e\u96c6\uff0c\u5e76\u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u50cf\u505a\u968f\u673a\u53d8\u6362\ndef load_dataset(filenames, ordered=False, augment = True):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO)\n    dataset = dataset.with_options(ignore_order)\n    dataset = dataset.map(lambda ex: _parse_image_function(ex, augment = augment), num_parallel_calls=AUTO)\n    return dataset\n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES)\n    dataset = dataset.repeat()\n    dataset = dataset.shuffle(128, seed = P['SEED'])\n    dataset = dataset.batch(BATCH_SIZE,drop_remainder=True)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_validation_dataset(ordered=True):\n    dataset = load_dataset(VALIDATION_FILENAMES, ordered=ordered, augment = False)\n    dataset = dataset.batch(BATCH_SIZE,drop_remainder=True)\n    #dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset","0dff9333":"# https:\/\/tensorlayer.readthedocs.io\/en\/latest\/_modules\/tensorlayer\/cost.html#dice_coe\n# \u5b9a\u4e49dice\u635f\u5931\u51fd\u6570\ndef dice_coe(output, target, axis = None, smooth=1e-10):\n    output = tf.dtypes.cast( tf.math.greater(output, 0.5), tf. float32 )\n    target = tf.dtypes.cast( tf.math.greater(target, 0.5), tf. float32 )\n    inse = tf.reduce_sum(output * target, axis=axis)\n    l = tf.reduce_sum(output, axis=axis)\n    r = tf.reduce_sum(target, axis=axis)\n    dice = (2. * inse + smooth) \/ (l + r + smooth)\n    dice = tf.reduce_mean(dice, name='dice_coe')\n    return dice\n\n# https:\/\/www.kaggle.com\/kool777\/training-hubmap-eda-tf-keras-tpu\n# tversky\u635f\u5931\u51fd\u6570\n'''\ntversky\u635f\u5931\u51fd\u6570\u662fdice\u635f\u5931\u51fd\u6570\u7684\u4e00\u79cd\u62d3\u5c55\u5f62\u5f0f\uff0c\u56e0\u4e3adice\u635f\u5931\u51fd\u6570\u4f1a\u5e73\u7b49\u5f97\u6743\u8861FP\/PN\uff0c\n\u7136\u800c\u533b\u5b66\u6570\u636e\u4e2d\u75c5\u53d8\u4f53\u7684\u6837\u672c\u6570\u91cf\u8fdc\u8fdc\u5927\u4e8e\u975e\u75c5\u53d8\u4f53\u7684\u6837\u672c\u6570\u91cf\uff0c\u4f7f\u7528\u4e0d\u5e73\u8861\u7684\u6570\u636e\u96c6\u4f1a\u5bfc\u81f4\n\u4e25\u91cd\u504f\u5411\u4e8e\u9ad8\u7cbe\u5ea6\u4f46\u4f4e\u53ec\u56de\u7387\uff08\u7075\u654f\u5ea6\uff09\u7684\u9884\u6d4b\uff0c\u56e0\u6b64Tversky loss\u5e0c\u671b\u5728\u8bad\u7ec3\u9ad8\u5ea6\u4e0d\u5e73\u8861\n\u6570\u636e\u7684\u7f51\u7edc\u65f6\u6743\u8861FN\uff08\u53ec\u56de\uff09\u800c\u4e0d\u662fFP\u3002\n'''\ndef tversky(y_true, y_pred, alpha=0.7, beta=0.3, smooth=1):\n    y_true_pos = K.flatten(y_true)\n    y_pred_pos = K.flatten(y_pred)\n    true_pos = K.sum(y_true_pos * y_pred_pos)\n    false_neg = K.sum(y_true_pos * (1 - y_pred_pos))\n    false_pos = K.sum((1 - y_true_pos) * y_pred_pos)\n    return (true_pos + smooth) \/ (true_pos + alpha * false_neg + beta * false_pos + smooth)\ndef tversky_loss(y_true, y_pred):\n    return 1 - tversky(y_true, y_pred)\ndef focal_tversky_loss(y_true, y_pred, gamma=0.75):\n    tv = tversky(y_true, y_pred)\n    return K.pow((1 - tv), gamma)\n\nget_custom_objects().update({\"focal_tversky\": focal_tversky_loss})","a42cc82c":"M = {}\nmetrics = ['loss','dice_coe','accuracy']\nfor fm in metrics:\n    M['val_'+fm] = []\n\n# k\u6298\u4ea4\u53c9\u9a8c\u8bc1\n# \u672c\u5b9e\u9a8c\u53d64\u6298\nfold = KFold(n_splits=P['NFOLDS'], shuffle=True, random_state=P['SEED'])\nfor fold,(tr_idx, val_idx) in enumerate(fold.split(ALL_TRAINING_FILENAMES)):\n    \n    print('#'*35); print('############ FOLD ',fold+1,' #############'); print('#'*35);\n    print(f'Image Size: {DIM}, Batch Size: {BATCH_SIZE}')\n    \n    # CREATE TRAIN AND VALIDATION SUBSETS\n    TRAINING_FILENAMES = [ALL_TRAINING_FILENAMES[fi] for fi in tr_idx]\n    if P['OVERLAPP']:\n        TRAINING_FILENAMES += [ALL_TRAINING_FILENAMES2[fi] for fi in tr_idx]\n    \n    VALIDATION_FILENAMES = [ALL_TRAINING_FILENAMES[fi] for fi in val_idx]\n    STEPS_PER_EPOCH = count_data_items(TRAINING_FILENAMES) \/\/ BATCH_SIZE\n    \n    # BUILD MODEL\n    # \u6a21\u578b\u4e3aUnet\n    K.clear_session()\n    with strategy.scope():   \n        model = sm.Unet(P['BACKBONE'], encoder_weights='imagenet')\n        model.compile(optimizer = tf.keras.optimizers.Adam(lr = P['LR']),\n                      loss = tf.keras.losses.BinaryCrossentropy(),#'focal_tversky',\n                      metrics=[dice_coe,'accuracy'])\n        \n    # CALLBACKS\n    checkpoint = tf.keras.callbacks.ModelCheckpoint('\/kaggle\/working\/model-fold-%i.h5'%fold,\n                                 verbose=P['VERBOSE'],monitor='val_dice_coe',patience = 10,\n                                 mode='max',save_best_only=True)\n    \n    early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_dice_coe',mode = 'max', patience=10, restore_best_weights=True)\n    reduce = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=8, min_lr=0.00001)\n        \n    print(f'Training Model Fold {fold+1}...')\n    history = model.fit(\n        get_training_dataset(),\n        epochs = P['EPOCHS'],\n        steps_per_epoch = STEPS_PER_EPOCH,\n        callbacks = [checkpoint, reduce,early_stop],\n        validation_data = get_validation_dataset(),\n        verbose=P['VERBOSE']\n    )   \n    \n    # SAVE METRICS\n    # \u6d4b\u8bd5\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u7684\u6548\u679c\n    m = model.evaluate(get_validation_dataset(),return_dict=True)\n    for fm in metrics:\n        M['val_'+fm].append(m[fm])\n    \n    # PLOT TRAINING\n    # https:\/\/www.kaggle.com\/cdeotte\/triple-stratified-kfold-with-tfrecords\n    # \u6a21\u578b\u6548\u679c\u7ed8\u56fe\n    if P['DISPLAY_PLOT']:        \n        plt.figure(figsize=(15,5))\n        n_e = np.arange(len(history.history['dice_coe']))\n        plt.plot(n_e,history.history['dice_coe'],'-o',label='Train dice_coe',color='#ff7f0e')\n        plt.plot(n_e,history.history['val_dice_coe'],'-o',label='Val dice_coe',color='#1f77b4')\n        x = np.argmax( history.history['val_dice_coe'] ); y = np.max( history.history['val_dice_coe'] )\n        xdist = plt.xlim()[1] - plt.xlim()[0]; ydist = plt.ylim()[1] - plt.ylim()[0]\n        plt.scatter(x,y,s=200,color='#1f77b4'); plt.text(x-0.03*xdist,y-0.13*ydist,'max dice_coe\\n%.2f'%y,size=14)\n        plt.ylabel('dice_coe',size=14); plt.xlabel('Epoch',size=14)\n        plt.legend(loc=2)\n        plt2 = plt.gca().twinx()\n        plt2.plot(n_e,history.history['loss'],'-o',label='Train Loss',color='#2ca02c')\n        plt2.plot(n_e,history.history['val_loss'],'-o',label='Val Loss',color='#d62728')\n        x = np.argmin( history.history['val_loss'] ); y = np.min( history.history['val_loss'] )\n        ydist = plt.ylim()[1] - plt.ylim()[0]\n        plt.scatter(x,y,s=200,color='#d62728'); plt.text(x-0.03*xdist,y+0.05*ydist,'min loss',size=14)\n        plt.ylabel('Loss',size=14)\n        plt.legend(loc=3)\n        plt.show()","d0c5052d":"### WRITE METRICS\nimport json\nfrom datetime import datetime\nM['datetime'] = str(datetime.now())\nfor fm in metrics:\n    M['oof_'+fm] = np.mean(M['val_'+fm])\n    print('OOF '+ fm + ' '+ str(M['oof_'+fm]))\nwith open('metrics.json', 'w') as outfile:\n    json.dump(M, outfile)","9daaaa3c":"# Model fit","397d22ef":"# Datasets pipeline","72caefda":"# Init - parameters, packages, gcs_paths, tpu","92e64b4a":"## GCS_PATHS","b365b70b":"This is HuBMAP TF keras training with TPU notebook - full inference and submission using GPU notebook can be found here:\nhttps:\/\/www.kaggle.com\/wrrosa\/hubmap-tf-with-tpu-efficientunet-512x512-subm\n\n# Versions\n* V1-V6 init\n* V7: 4-CV efficientunetb0 512x512 (LB .834)\n* V8: loss bce, fixed dice_coe function for tpu (LB .835)\n* V9: efficientunetb1, added oof metrics.json (CV .871, LB .830)\n* V10: efficientunetb4 (CV .874, LB .839) \n* V11: \n    * updated files paths (moved files to train folder)\n    * efficientunetb7 (memory issue on 3-rd fold)\n* V12: P['BATCH_COE'] = 4, efficientunetb7 (CV .858, LB .835)\n* V13: efficientunetb4, P['BATCH_COE'] = 8, P['SEED'] = 1 (just rerun nb V10 with best lb and consume tpu quota ;) ) (CV .877, LB 0.836)\n* V14: efficientunetb4, add overlapped tiles and P['EPOCHS'] = 30 and P['SEED'] = 0 (...)\n\n","3cceca77":"# Refferences:\n* @marcosnovaes  https:\/\/www.kaggle.com\/marcosnovaes\/hubmap-looking-at-tfrecords and https:\/\/www.kaggle.com\/marcosnovaes\/hubmap-unet-keras-model-fit-with-tpu\n* @mgornergoogle https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n* qubvel https:\/\/github.com\/qubvel\/segmentation_models  !! 25 available backbones for each of 4 architectures\n* @kool777, @joshi98kishan https:\/\/www.kaggle.com\/kool777\/training-hubmap-eda-tf-keras-tpu\n* @cdeotte https:\/\/www.kaggle.com\/cdeotte\/triple-stratified-kfold-with-tfrecords\n","93462aed":"# Model"}}