{"cell_type":{"c8fd7e19":"code","bbc42a3b":"code","290c61a7":"code","03dfec7c":"code","697d63e9":"code","0ee0dc06":"code","82922126":"code","1f26a978":"code","2541f319":"code","b740421b":"code","92ef95b6":"code","6bba6c4f":"code","e9220905":"code","8d8c7f3e":"code","ad862067":"code","e2cbaa30":"code","4e840ae2":"code","04d76aed":"code","9ef3ae1f":"code","bed77ff1":"code","7ed0d130":"code","ececddf1":"code","5ca10649":"code","3302eb53":"code","658b3ae7":"markdown","43608a08":"markdown","b5b56b74":"markdown","857b1d06":"markdown","2dd875a1":"markdown","b947ff25":"markdown","1a4c5f1d":"markdown","3e1596e7":"markdown","bc7cf7d6":"markdown","edc17d40":"markdown","798ceede":"markdown","28e06a2b":"markdown","377da55c":"markdown"},"source":{"c8fd7e19":"#Basic array creation\nimport numpy as np\n#numpy.array(object, dtype=None, copy=True, order='K',.....)\na = np.array([2,3,4])\nprint(a)\n# Checking the data type\nprint(a.dtype)\nb = np.array([1.2, 3.5, 5.1])\nprint(b.dtype)","bbc42a3b":"b = np.array([[1.5,2,3], [4,5,6]])\nprint(b)\n# finding size of an array\nprint(b.size)","290c61a7":"#Sequence of Numbers\nprint(np.arange( 10, 30, 5 ))\nprint(np.arange( 0, 2, 0.3 ))\nprint(np.arange( 5 ))\n# Question: What are the default values?","03dfec7c":"# Random Number\nnp.random.rand(1)  # Creates a randome number between 0 to 1 and assumes uniform distribution\nnp.random.rand(5,3) # Creating a Matrix\nnp.random.randn(5,5) # Creating numbers from a normal distribution\nnp.random.randint(1,100,10)\nnp.random.seed(42)","697d63e9":"#array with string\nstring_arr=np.array(['Ganga','Jamuna','Kaveri'])\nstring_arr[1]='Godavari'\nstring_arr\n# Assignment change the second element to Godavari and print the array","0ee0dc06":"print(a)\n#Accesing Single Element\nprint(a[2])\n\n#Accesing Multiple Elements\n# First and second element\nprint(a[0:2]) \n# Any one bound can be used\nprint(a[: 3])\nprint(a[1: ])\n# If the end limit crosses the bound of the array\nprint(a[0:200])\n# Assigning to another array\nb=a[0:5]\n# What happens if we do not specify neither start and stop\nb[:]=99\n\n# Element wise operation\na = np.arange(10)**3\na= a*2\nprint(a)","82922126":"l=[1,2,3]\nprint(l*2)\na=np.array([1,2,3])\nprint(a*2)","1f26a978":"a = np.array([2,3,4,25])\nb=np.arange( 0, a.size, 2)\nb\nprint(a[b])","2541f319":"# 2D Array\na2d=np.array([[1,3,5],[2,5,8],[3,6,9]])\n# Accessing the element 8\na2d[1][2]\na2d[1,2]\n# Aceessing 0th and 1st row and 1st and 2nd columns\na2d[:2,1:]","b740421b":"arrlog= np.arange(2,25,2)\n# Creating boolean indicator\narrlog>10\n# Accesing elements based on \narrlog[arrlog>10]","92ef95b6":"a2d.sum()\n# Can we do row wise or column wise sum\na2d.sum(axis = 0)\na2d.sum(axis = 1)","6bba6c4f":"print (np.zeros( (3,4) ))\nprint (np.ones( (2,3,4), dtype=np.int16 ))\nprint (np.empty( (2,3)))","e9220905":"b = np.arange(12).reshape(4,3)\nprint(b)\nc = np.arange(24).reshape(2,3,4)\nprint(c)","8d8c7f3e":"# Two sepecial cases are NaN and Inf\nspecial=np.array([-1,0,1])\nspecial=special\/0\nprint(special)\n#How to detect if such cases are presnet already in a big Array\n# Equalto does not work with NaN\nnp.isnan(special)\nnp.isinf(special)","ad862067":"#Basic Operations\na = np.array( [20,30,40,51] )\nb = np.arange( 4 )\nprint (b)\nc = a-b\nprint (c)\n#Operations on all elements\nprint(b**2)\nprint(10*np.sin(a))\nprint(a[a<35])\n# Assigment Declare an NP Array, Find Sum all odd elements\n","e2cbaa30":"#Matrix Operations\nA = np.array( [[1,1],\n            [0,1]] )\nB = np.array( [[2,0],\n               [3,4]] )\n\n# Elementwise multiplication\nprint(A*B)\n# Matrix multiplication\nprint(A @ B )\nprint(A.dot(B))","4e840ae2":"#Finding the array type\na = np.ones(3, dtype=np.int32)\n# Returns num evenly spaced samples, calculated over the interval [start, stop].\n# .linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)[source]\nb = np.linspace(0,3.14,3)\nprint(b.dtype.name)\nc = a+b\nprint(c)\nprint(c.dtype.name)\nd = np.exp(c*1j)\nprint (d)\nprint(d.dtype.name)","04d76aed":"#Unary operations\na = np.random.random((2,3))\nprint(a)\nprint(a.sum())\nprint(a.min())\nprint(a.max())","9ef3ae1f":"#Universal functions\nB = np.arange(3)\nprint(B)\nprint(np.exp(B))\nprint(np.sqrt(B))\nC = np.array([2., -1., 4.])\nprint(C)","bed77ff1":"#Shape Manipulation\na = np.floor(10*np.random.random((3,4)))\nprint(a)\nprint(a.shape)\n# numpy.ravel(a, order='C')[source]\u00b6\n# Return a contiguous flattened array.\nprint(a.ravel())\nprint(a.reshape(6,2))\n# Same as self.transpose(), except that self is returned if self.ndim < 2.\nprint(a.T)\nprint(a.T.shape)\nprint(a.shape)","7ed0d130":"#Stacking together different arrays \na = np.floor(10*np.random.random((2,2)))\nprint(a)\nb = np.floor(10*np.random.random((2,2)))\nprint(b)\n# Stack arrays in sequence vertically (row wise).\nprint(np.vstack((a,b)))\n# Stack arrays in sequence horizontally (column wise).\nprint(np.hstack((a,b)))","ececddf1":"#Splitting one array into several smaller ones\nx = np.arange(16.0).reshape(4, 4)\nprint(np.hsplit(x,2))","5ca10649":"#Copies and Views\na = np.arange(12)\nb=a\nprint(b is a)\nb.shape = 3,4 \nprint(a.shape)\n# New view of array with the same data.\nc = a.view()\nprint(c is a)\nprint(c.base is a)\nprint(c.flags.owndata)\nc.shape = 2,6\nprint(a.shape)\nc[0,4] = 1234\nprint(a)\nd = a.copy() \n# Return a copy of the array.\nprint(d is a)\nprint(d.base is a)\nd[0,0] = 9999\nprint(a)","3302eb53":"# Identity matrix\na= np.eye(5)","658b3ae7":"**Task 1: Create an array of three elements with intergers**\n**Task 2: Create an array of floats**\n**Task 3: Check the dtype and size of the np array**","43608a08":"**Zeros, Ones and Empty functions**","b5b56b74":"**Accessing the elements of a 2D Array**","857b1d06":"**#Indexing, Slicing and iterating**","2dd875a1":"**Using functions on array**","b947ff25":"**#Basic array creation two dimensional**","1a4c5f1d":"**Creating Random number and matrix**","3e1596e7":"# Assignment print every odd indexed element of the array","bc7cf7d6":"**# logical  statement**","edc17d40":"# Reshaping\n#ndarray.reshape(shape, order='C')","798ceede":"* ndarray is the way numpy stores data.\n* It treats them as mathemetical objects\n* ndarray though created for numeric data types, supports string\n* ndarray supports one kind of datatype denoted as dtype\n* dtype is diffrent from python datatype and are more generic\n* if a 1D array then vector, if 2d array then matrix, if 3d array then tensor","28e06a2b":"**Creating a sequence using NUMPY array**\n**numpy.arange([start, ]stop, [step, ]dtype=None)**","377da55c":"** # List versus Array **"}}