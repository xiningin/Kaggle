{"cell_type":{"2728da78":"code","855952fb":"code","cc461f8e":"code","3594fe2c":"code","6c24dedc":"code","cee30948":"code","5b1f41c5":"code","dc48935b":"code","dcb5677f":"code","88503a48":"code","4c10a3eb":"code","3752a588":"code","c0fd137c":"code","ddbf58a5":"code","68e8ec0b":"code","cc2086a4":"code","6c225bbf":"code","6751b45d":"code","bd146bb8":"code","036dc102":"code","ed4704d2":"code","3d98f5ce":"code","51c5ad1c":"code","6c7e8ca0":"code","cf4edb9f":"code","394620a4":"code","2a24814f":"code","e7cf4599":"code","91945c7e":"code","cc5e258a":"code","0fbf1033":"code","8bd54fd5":"code","a312bed1":"code","20da1dc5":"code","7b2d7f37":"code","102188c5":"code","88fa8933":"code","a24abc07":"code","8e1988f5":"code","4bb0eed0":"code","b1d92c41":"code","de64ed4d":"code","053b92dd":"code","45741578":"code","5690566e":"code","51bfe059":"markdown","cff89a4c":"markdown"},"source":{"2728da78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","855952fb":"from pandas import Series,DataFrame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nimport statistics\nimport random as ran\nfrom scipy import stats\nfrom datetime import datetime","cc461f8e":"from sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,mean_squared_error\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import PolynomialFeatures ","3594fe2c":"from statsmodels.formula.api import ols","6c24dedc":"from sklearn.model_selection import RandomizedSearchCV,GridSearchCV\nimport statsmodels.api as sm","cee30948":"def past(dff,lo,lt,ci,fc):               #gives the past details\n    lo1=lo-ci\n    lo2=lo+ci\n    lt1=lt-ci\n    lt2=lt+ci\n    lo3=[]\n    lt3=[]\n    fc1=[]\n    time=[]\n    for i in np.arange(len(dff[fc])):\n        if (dff[\"Latitude\"][i]>lt1 and  dff[\"Latitude\"][i]<lt2) and (dff[\"Longitude\"][i]>lo1 and dff[\"Longitude\"][i]<lo2):\n            lt3=np.append(lt3,dff[\"Latitude\"][i])\n            lo3=np.append(lo3,dff[\"Longitude\"][i])\n            fc1=np.append(fc1,dff[fc][i])\n            time=np.append(time,dff[\"Date\"][i])\n    dff1=DataFrame([])\n    dff1[\"Date\"]=time\n    dff1[\"Lattitude\"]=lt3\n    dff1[\"Longitude\"]=lo3\n    dff1[fc]=fc1\n    return(dff1)               \n\ndef dte(lst):                               #converts date formate\n    r=[]\n    for i in np.arange(len(lst)):\n        y=int(lst[i][6:10])\n        m=int(lst[i][0:2])\n        d=int(lst[i][3:5])\n        dt=datetime(y,m,d)\n        r=np.append(r,dt)\n    return(r)","5b1f41c5":"df=pd.read_csv(\"..\/input\/earthquake\/earthquake1.csv\")\ndf.head(2)\ndf.shape\ndf.columns\ndf.dtypes\ndf['Type'].value_counts()","dc48935b":"#row=['Magnitude Type','Source', 'Location Source', 'Magnitude Source', 'Status']\n#for i in row:\n#        value=df[i].value_counts()\n#        print(value)\ndf1=df[[\"Date\",\"Time\",\"Latitude\",\"Longitude\",\"Depth\",\"Magnitude\"]]\ndf1.head(2)\n#there are the only factors which we are considering for the prediction of the earthquake","dcb5677f":"#Data PreProcessing","88503a48":"n1=len(df['Date'])\np1=[];a1=df['Date'];day=[];\nfor no in range(n1):\n    p1=a1[no]\n    p3=(p1[3:5])\n    day=np.append(day,p3)\ndf['day']=day\ndf['day']=df['day'].replace(to_replace='5-',value='30')\ndf['day']=df['day'].replace(to_replace='1-',value='31')\ndf['day']=df['day'].astype(int)    ","4c10a3eb":"df['Location Source'].value_counts()\n#Max number of earthquake location is US and ISCGEM","3752a588":"df2=df[['Date', 'Time', 'Latitude','Type', 'Longitude','Magnitude','Source','Location Source','Magnitude Source','day']]\nmulti_group=df2[:1500].groupby(['day','Source','Location Source',])[['Magnitude']].count()\nprint(multi_group)","c0fd137c":"from mpl_toolkits.basemap import Basemap\nm = Basemap(projection='cyl',llcrnrlat=-80,urcrnrlat=80, llcrnrlon=-180,urcrnrlon=180,lat_ts=20,resolution='c')\ndf_u=df2[:1000]\nlongitudes = df_u[\"Longitude\"].tolist()\nlatitudes = df_u[\"Latitude\"].tolist()\nx,y = m(longitudes,latitudes)","ddbf58a5":"fig = plt.figure(figsize=(12,10))\nplt.title(\"All affected areas\")\nm.plot(x, y, \"p\", markersize = 2, color = 'blue')\nm.drawcoastlines()\nm.fillcontinents(color='coral',lake_color='aqua')\nm.drawmapboundary()\nm.drawcountries()\nplt.show()","68e8ec0b":"\nint(df1[\"Date\"][0][6:11])\ndf=df1\nn1=len(df['Date'])\ns1=[];\nd1=df['Date']\nyear=[];month=[]\nfor no in range(n1):\n    s1=d1[no]\n    s2=int(s1[6:10])\n    s3=int(s1[0:2])\n    year=np.append(year,s2)\n    month=np.append(month,s3)\ndf['year']=year\ndf['month']=month\ndf['month']=df['month'].replace(to_replace=23.0,value=1.0)\ndf['month']=df['month'].replace(to_replace=28.0,value=2.0)\ndf['month']=df['month'].replace(to_replace=13.0,value=3.0)\nchange_mon = {1.0: 'Jan', 2.0: 'Feb', 3.0: 'Mar', 4.0: 'Apr', 5.0: 'May',6.0: 'Jun', 7.0: 'Jul', 8.0: 'Aug',\n              9.0: 'Sep', 10.0: 'Oct', 11.0: 'Nov', 12.0: 'Dec'}\ndf['month'] = df['month'].apply(lambda x: change_mon[x])\n\ndf1=df[[\"Date\",\"Time\",\"Latitude\",\"Longitude\",\"Depth\",\"Magnitude\",\"year\",\"month\"]]\n#plt.plot(df1['month'].value_counts())\nco1=df1.groupby('month')['Magnitude'].count()\n#co1.plot(figsize=(20,5))\ndf_m=(DataFrame([co1.values,[4,8,12,2,1,7,6,3,5,11,8,9]],index=[\"freq\",\"mon\"])).T\ndf_m1=df_m.sort_values(by=['mon'])\ndf_m1[\"prob\"]=df_m1[\"freq\"]\/sum(df_m1[\"freq\"])\ndf_m1.index=np.arange(1,13,1)\ndf_m1[\"prob\"].plot(figsize=(20,5))\n#so if any how i come to know that in which year how many quakes are going to occur than we can obtain the expected quakes in each mon","cc2086a4":"def past(dff,lo,lt,ci,fc):\n    lo1=lo-ci\n    lo2=lo+ci\n    lt1=lt-ci\n    lt2=lt+ci\n    lo3=[]\n    lt3=[]\n    fc1=[]\n    time=[]\n    for i in np.arange(len(dff[fc])):\n        if (dff[\"Latitude\"][i]>lt1 and  dff[\"Latitude\"][i]<lt2) and (dff[\"Longitude\"][i]>lo1 and dff[\"Longitude\"][i]<lo2):\n            lt3=np.append(lt3,dff[\"Latitude\"][i])\n            lo3=np.append(lo3,dff[\"Longitude\"][i])\n            fc1=np.append(fc1,dff[fc][i])\n            time=np.append(time,dff[\"Date\"][i])\n    dff1=DataFrame([])\n    dff1[\"Date\"]=time\n    dff1[\"Lattitude\"]=lt3\n    dff1[\"Longitude\"]=lo3\n    dff1[fc]=fc1\n    return(dff1)               ","6c225bbf":"df_tem=past(df1,82,25,5,\"Magnitude\")\ndf_tem.head()                    #so this is the data frame of quakes in varanasi since 1966","6751b45d":"plt.plot(df[\"Latitude\"],df[\"Longitude\"],\"o\")","bd146bb8":"df5050=past(df,50,50,10,\"Magnitude\")\ndf5050.head(2)","036dc102":"#my_date = datetime.strptime(df5050[\"Date\"][0], \"%Y-%m-%d\")","ed4704d2":"lat= (list(map(int, (df[\"Latitude\"]))))\nlon= (list(map(int, (df[\"Longitude\"]))))","3d98f5ce":"x = datetime(1920, 5, 17)\ny=datetime(1921, 5, 17)\nprint(x-y)","51c5ad1c":"df5050[\"Date\"][0][3:5]","6c7e8ca0":"def dte(lst):\n    r=[]\n    for i in np.arange(len(lst)):\n        y=int(lst[i][6:10])\n        m=int(lst[i][0:2])\n        d=int(lst[i][3:5])\n        dt=datetime(y,m,d)\n        r=np.append(r,dt)\n    return(r)","cf4edb9f":"df5050[\"ndate\"]=dte(df5050[\"Date\"].values)","394620a4":"df5050=df5050.sort_values(by=['ndate'], ascending=True)","2a24814f":"np.min(df5050[\"ndate\"])","e7cf4599":"plt.plot(df5050[\"ndate\"].values,df5050[\"Magnitude\"].values)","91945c7e":"#clearly no trend obtained","cc5e258a":"df5050_t=(df5050[\"ndate\"]-df5050[\"ndate\"].shift(1)) #the difference between consicutive quakes\ndf5050_t[1:]","0fbf1033":"#now from here i can have two approches for tracing patterns of occurance of quakes\n#time_series \n#model_building ","8bd54fd5":"#model_building_approch \n#we have to determine the number of previous quakes to be taken under consideration for future prediction (this will be optimised in future)","a312bed1":"#int((str(df5050_t[1]))[:-14])\ndf5050_t1=[]\nfor i in np.arange(1,len(df5050_t)):\n    df5050_t1=np.append(df5050_t1,int((str(df5050_t[i]))[:-14]))","20da1dc5":"#plt.plot(df5050_t[1:])\nplt.plot(DataFrame(df5050_t1)[0].rolling(window=5).mean(),color=\"black\")\n#(DataFrame(df5050_t1)[0].rolling(window=3).mean())","7b2d7f37":"#visualization_part","102188c5":"#prediction_part","88fa8933":"#first of all we aim to predict that at what day how many quakes are expected\nco=df1.groupby('year')['Magnitude'].count()\nco.plot(figsize=(20,5))","a24abc07":"df_c=DataFrame([(np.unique(year)),co],index=[\"year\",\"count\"]).T\nsns.lmplot(\"year\",\"count\",df_c,order=1)","8e1988f5":"#clearly the frequency ofquakes per year is increasing per year\n#so the question is how much quakes to be expected in next years\np1=0\np2=0\np3=0\np4=0\nfor j in np.arange(len(df_c[\"year\"])):\n    if (df_c[\"year\"][j]>1969) and (df_c[\"year\"][j]<=1979):\n        p1=p1+(df_c[\"count\"][j])\n    elif (df_c[\"year\"][j]>1979) and (df_c[\"year\"][j]<=1989):\n        p2=p2+(df_c[\"count\"][j])\n    elif (df_c[\"year\"][j]>1989) and (df_c[\"year\"][j]<=1999):\n        p3=p3+(df_c[\"count\"][j])\n    elif (df_c[\"year\"][j]>1999) and (df_c[\"year\"][j]<=2009):\n        p4=p4+(df_c[\"count\"][j])\np=[p1,p2,p3,p4]\nplt.plot(np.arange(1970,2010,10),p)","4bb0eed0":"#cleary the linear trend in the increase of frequency of quakes was observed'","b1d92c41":"model_fr=LinearRegression()\ny=DataFrame(p).values\nx=DataFrame(np.arange(1970,2010,10)).values\nmodel_fr.fit(x.reshape(-1,1),y.reshape(-1,1))\ny_pre=model_fr.predict(x.reshape(-1,1))\nDataFrame([DataFrame(y_pre)[0].values,DataFrame(y)[0].values,DataFrame(x)[0].values],index=[\"predicted\",\"observed\",\"year\"]).T\nee=model_fr.predict([[2010]])  #so in year 2010 to 2020 we are expecting approximatly this frequency of quakes\nee","de64ed4d":"df_co=DataFrame(co)\nt_s=0\nfor i in np.arange(len(df_co[\"Magnitude\"])):\n    if df_co.index[i]>2010:\n        t_s=t_s+(df_co[\"Magnitude\"].values)[i]\nt_s           #these are the quakes which occured till year 2016","053b92dd":"int(ee-t_s)              # so this much quakes are yet to occur till 2020(including 2020) after 2016","45741578":"y_20=model_fr.predict([[2020]])\ny_20                       #this is the frequency of quakes we are expecting in 2020 \nm20=[]\nfor i in df_m1[\"prob\"]:\n    m20=np.append(m20,int(y_20*i))\ndf_m1[\"m_20\"]=m20\ndf_m1[\"m_20\"]               #so we got to know that in which mon of 2020 how many quakes are expected","5690566e":"#so now for the prediction of quakes per day we consider the history  of quakes at that area for last 100 days or few years","51bfe059":"# 1. # > **here we are trying to predict that when, where and the with what initensity the earthquake will ocuur****","cff89a4c":"# #function_box*"}}