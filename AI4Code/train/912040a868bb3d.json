{"cell_type":{"ba0fa365":"code","c975a662":"code","97e301b1":"code","68a98de2":"code","33968a10":"code","1a725d44":"code","b7898a11":"code","0e08ce35":"code","35fa82ed":"code","05e91337":"code","8c60dcb3":"code","0f8d0030":"code","11f34564":"code","370aa1ca":"code","92ae2809":"code","f241fc0c":"code","5b970e84":"code","c53d0e1a":"code","cdc575f3":"code","4e5d2743":"code","a1fabf98":"code","a5988e3c":"code","771972aa":"code","d26aedc1":"code","e40a9979":"code","50a45a64":"code","7ddb90e6":"code","549d3e64":"code","d14cdc4e":"code","7cb2e003":"code","093d5b0e":"code","4f123721":"code","3c2f8494":"code","98b82ed8":"code","74224852":"markdown","1b1e9f52":"markdown","662e4c4b":"markdown","6d8201a0":"markdown","fbd0487c":"markdown","f1e7fc75":"markdown","d0abd453":"markdown","f74940e4":"markdown","cb09c359":"markdown","d10ca293":"markdown","298743cf":"markdown","453d374d":"markdown","c044166a":"markdown","124ab64b":"markdown","544df042":"markdown","ecb46482":"markdown","eec859a9":"markdown","95a9c4fd":"markdown","23a40ec0":"markdown","1f3620e6":"markdown","9824fcf0":"markdown","0e5db315":"markdown","597ab611":"markdown"},"source":{"ba0fa365":"import pandas as pd\nimport csv\nimport numpy\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c975a662":"#read data into a datagrame\ntitle_ratings=pd.read_csv(\"..\/input\/movie-ratings-dataset\/title.ratings.tsv\/title.ratings.tsv\", sep='\\t')","97e301b1":"title_ratings.head()","68a98de2":"#number of rows in the dataframe\ntitle_ratings.shape","33968a10":"#check if we have unique ratings for the titles\ntitle_ratings.groupby(['tconst'], as_index=False).count()","1a725d44":"title_basics=pd.read_csv(\"..\/input\/movie-ratings-dataset\/title.basics.tsv\/title.basics.tsv\", sep='\\t')\ntitle_basics=title_basics.drop_duplicates()","b7898a11":"title_basics=title_basics[['titleType','tconst','primaryTitle', 'originalTitle', 'startYear']]\ntitle_basics=title_basics[title_basics.titleType=='movie']\ntitle_basics=title_basics[title_basics.startYear.apply(lambda x: str(x).isnumeric())]\ntitle_basics.head()","0e08ce35":"title_basics.shape","35fa82ed":"grouped=title_basics.groupby(['primaryTitle', 'startYear'], as_index=False).count()\ngrouped.head()","05e91337":"ratings_and_titles=pd.merge(title_ratings.set_index('tconst'), title_basics.set_index('tconst'), left_index=True, right_index=True, how='inner')\nratings_and_titles=ratings_and_titles.drop_duplicates()","8c60dcb3":"ratings_and_titles.head()","0f8d0030":"ratings_and_titles.shape","11f34564":"netflix_titles=pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\", index_col=\"show_id\")","370aa1ca":"netflix_titles=netflix_titles.dropna(subset=['release_year'])","92ae2809":"netflix_titles.release_year=netflix_titles.release_year.astype(numpy.int64)","f241fc0c":"ratings_and_titles=ratings_and_titles[ratings_and_titles.startYear.apply(lambda x: str(x).isnumeric())]","5b970e84":"ratings_and_titles.startYear=ratings_and_titles.startYear.astype(numpy.int64)","c53d0e1a":"netflix_titles['title']=netflix_titles['title'].str.lower()\nratings_and_titles['originalTitle']=ratings_and_titles['originalTitle'].str.lower()\nratings_and_titles['primaryTitle']=ratings_and_titles['primaryTitle'].str.lower()","cdc575f3":"##subset movies\nnetflix_titles=netflix_titles[netflix_titles.type=='Movie']","4e5d2743":"netflix_titles.shape","a1fabf98":"netflix_titles_rating=pd.merge(netflix_titles, ratings_and_titles, left_on=['title', 'release_year'], right_on=['primaryTitle', 'startYear'], how='inner')","a5988e3c":"netflix_titles_rating.sort_values(by=['averageRating', 'numVotes'], inplace=True, ascending=False)","771972aa":"#look at titles where we have more than 2000 votes\nnetflix_titles_rating_2000=netflix_titles_rating[netflix_titles_rating.numVotes>2000]","d26aedc1":"netflix_titles_rating_2000.head(10)","e40a9979":"plt.figure(figsize=(20, 6))\nsns.distplot(netflix_titles_rating['averageRating']);","50a45a64":"plt.figure(figsize=(20, 6))\nsns.distplot(netflix_titles_rating['numVotes']);","7ddb90e6":"netflix_titles_rating_2000.head(10)['title']","549d3e64":"plt.figure(figsize=(20, 6))\nchart=sns.countplot(x=\"country\", data=netflix_titles_rating_2000.head(100), order = netflix_titles_rating_2000.head(100)['country'].value_counts().index)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'  \n)","d14cdc4e":"from itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split(',')))\n\n# calculate lengths of splits\nlens = netflix_titles_rating_2000.head(100)['listed_in'].str.split(',').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\nres = pd.DataFrame({'title': numpy.repeat(netflix_titles_rating_2000.head(100)['title'], lens),\n                    'listed_in': chainer(netflix_titles_rating_2000.head(100)['listed_in']),\n                    })\nres['listed_in']=res['listed_in'].str.strip()\n\nprint(res)","7cb2e003":"top_genres=res['listed_in'].value_counts()","093d5b0e":"top_genres","4f123721":"plt.figure(figsize=(20, 6))\nchart=sns.countplot(x=\"listed_in\", data=res, order = res['listed_in'].value_counts().index)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-large'  \n)","3c2f8494":"#save plot\nchart.figure.savefig(\"pop_genres.png\")","98b82ed8":"#save to the file\n#netflix_titles_rating.to_csv('netflix_titles_rating_movies.csv')","74224852":"## Exploratory data analysis","1b1e9f52":"Sort the obtained data frame by averageRating and number of votes.","662e4c4b":"Now we load netflix titles dataset and join it with ratings_and_titles dataframe on title and primaryTitle.","6d8201a0":"Now we can join netflix titles with IMDb ratings on title name and release year.","fbd0487c":"Since movies may be listed in many genres, we need firstly to split them.","f1e7fc75":"Import modules","d0abd453":"### What are the top genres of the 100 most popular films?","f74940e4":"Convert titles to lowercase.","cb09c359":"The output above shows something similar to the normal distribution.","d10ca293":"# Netflix titles and IMDb ratings - EDA","298743cf":"Now we join titles_basics and title_ratings dataframes on tconst (Index).","453d374d":"We drop rows where we dont have release_year.","c044166a":"We need to change to integer the release_year column first.","124ab64b":"Note: the movies will be merged on title and the release year. Some films from the netflix dataset will not be found in the IMDb dataset. Further improvement of the merging can be implemented, as well as imputing the missing values.","544df042":"### What is the distribution of the average ratings?","ecb46482":"In this notebook I am going to merge a netflix titles dataset from https:\/\/www.kaggle.com\/shivamb\/netflix-shows\/kernels with IMDb dataset\nin order to get ratings values for the MOVIES available on netflix, and try to find some insights. \n\n\nMy exploratory data analysis of the netflix titles dataset can be foud here - https:\/\/www.kaggle.com\/mykytazharov\/eda-of-a-netflix-dataset-with-plotly-in-r .\n\nMy sentiment analysis of IMDb reviews using word embedings and Neural Network in Keras can be found here - https:\/\/www.kaggle.com\/mykytazharov\/imdb-text-classification-embedding-nn-in-keras .","eec859a9":"### What are the countries producing the 100 most populat films?","95a9c4fd":"### What are the top ten movies on netflix according to the IMDb rating?","23a40ec0":"From the above output we see that we have unique rating values for each title.","1f3620e6":"Load IMDb data in .tsv format and save it into dataframes.\nI am going to use two datasets from the https:\/\/www.imdb.com\/interfaces\/. \nInformation courtesy of IMDb (http:\/\/www.imdb.com). Used with permission.\nThe two datasets are: \n* \"title.basics.tsv.gz\" - here I take a title of the movie and release year\n* \"title.ratings.tsv.gz\" - here I take ratings for the titles","9824fcf0":"## Data reading and cleaning","0e5db315":"### What is the distribution of number of votes?","597ab611":"Drop rows in ratings_and_titles with non-numeric values for startYear and convert to integer."}}