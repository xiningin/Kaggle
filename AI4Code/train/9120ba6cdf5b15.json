{"cell_type":{"cc323390":"code","924eb5f7":"code","62144b64":"code","40a0013f":"code","41c2e459":"code","d3b19bae":"code","e27dd5c6":"code","75f0c2d8":"code","8bf8c81a":"code","4339d5fb":"code","b43bfa96":"code","2914135a":"markdown","beecfa60":"markdown"},"source":{"cc323390":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import ensemble\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn import decomposition\nfrom sklearn import pipeline","924eb5f7":"df = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')\nX  = df.drop('price_range', axis = 1).values\ny  = df['price_range'].values","62144b64":"def optimize(params, param_names, x, y):\n    print(params, param_names)\n    params = dict(zip(param_names, params))  #this will not work if we are tuning the params of different models\n    model  = ensemble.RandomForestClassifier(**params) #**params to read the dict\n    kf     = model_selection.StratifiedKFold(n_splits = 5)\n    \n    accuracies = []\n    for idx in kf.split(X=x, y=y):\n        train_idx, test_idx = idx[0], idx[1]\n        \n        xtrain = x[train_idx]\n        ytrain = y[train_idx]\n        xtest = x[test_idx]\n        ytest = y[test_idx]\n        \n        model.fit(xtrain, ytrain)\n        preds = model.predict(xtest)\n        fold_acc = metrics.accuracy_score(ytest, preds)\n        \n        accuracies.append(fold_acc)\n    \n    return -1*np.mean(accuracies)","40a0013f":"from functools import partial\nfrom skopt import space\nfrom skopt import gp_minimize","41c2e459":"param_space = [\n    space.Integer(3,15, name = \"max_depth\"),\n    space.Integer(100, 600, name = \"n_estimators\"),\n    space.Categorical( [\"gini\", \"entropy\"], name = \"criterion\"),\n    \n    space.Real(0.1,1, prior = \"uniform\", name = \"max_features\")\n]","d3b19bae":"param_names  = [\"max_depth\", \"n_estimators\", \"criterion\", \"max_features\" ]\nparam_names","e27dd5c6":"optimization_func = partial(optimize, param_names = param_names, x = X, y = y)","75f0c2d8":"result = gp_minimize(optimization_func, dimensions = param_space, n_calls = 15, n_random_starts = 10, verbose = 10)","8bf8c81a":"print(dict(zip(param_names, result.x)))","4339d5fb":"classifier = ensemble.RandomForestClassifier(criterion ='entropy', max_depth = 12, n_estimators = 448,\n                                             max_features = 0.5306651750933808, n_jobs=-1)","b43bfa96":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(classifier,X,y, cv=10)\nprint('scores\\n',score)\nprint('\\ncv values', score.shape)\nprint('\\nScore_Mean', score.mean())","2914135a":"https:\/\/scikit-optimize.github.io\/stable\/modules\/generated\/skopt.gp_minimize.html","beecfa60":"#  Bayesian Optimization with Gaussian Process"}}