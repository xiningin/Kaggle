{"cell_type":{"2f328f54":"code","c43e79d2":"code","ad0eac08":"code","f9e3e259":"code","12590600":"code","f98d4b86":"code","90702471":"code","0c676f9e":"code","37ab3de9":"code","81ca08e0":"code","37e3d487":"code","74a1e5ca":"code","1b965fb5":"code","f332f9ee":"code","8c815edd":"code","6125502e":"code","6385e012":"code","08448231":"code","0376ed1c":"code","80d8b768":"code","0a307510":"code","c9b60732":"code","0cfaed8c":"code","7eb0cd5b":"code","5d070c75":"code","69e5fb61":"code","62873e9e":"code","61dfda5b":"code","55bb2800":"code","9633ef7f":"code","3e0bfa23":"code","7e8ce45a":"code","4b20cf13":"code","041047f2":"code","55e00139":"code","3525fc5c":"code","0ebc2845":"code","5d4d78f4":"code","8e777500":"code","b9ebc30a":"code","d7e8824b":"markdown","a5b79722":"markdown","7e9ef806":"markdown","745afdd7":"markdown","8c856c0a":"markdown"},"source":{"2f328f54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","c43e79d2":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","ad0eac08":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","f9e3e259":"train.info()","12590600":"test.info()","f98d4b86":"all = pd.concat([train, test], sort = False)\nall.info()","90702471":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","0c676f9e":"all.info()","37ab3de9":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","81ca08e0":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","37e3d487":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","74a1e5ca":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","1b965fb5":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","f332f9ee":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","8c815edd":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","6125502e":"all.info()","6385e012":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","08448231":"all.info()","0376ed1c":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","80d8b768":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","0a307510":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","c9b60732":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","0cfaed8c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","7eb0cd5b":"from sklearn.ensemble import RandomForestClassifier","5d070c75":"RF_Model = RandomForestClassifier()","69e5fb61":"#from sklearn.model_selection import GridSearchCV","62873e9e":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","61dfda5b":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","55bb2800":"#RF_grid_model = RF_grid.fit(X_train, y_train)","9633ef7f":"#RF_grid_model.best_estimator_","3e0bfa23":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","7e8ce45a":"RF_Model.fit(X_train, y_train)","4b20cf13":"predictions = RF_Model.predict(X_test)\npredictions","041047f2":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","55e00139":"all_test.head()","3525fc5c":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","0ebc2845":"t_pred = RF_Model.predict(TestForPred).astype(int)","5d4d78f4":"PassengerId = all_test['PassengerId']","8e777500":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","b9ebc30a":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","d7e8824b":"****Final Predictions","a5b79722":"### Build Random Forest","7e9ef806":"****Train\/Test Split","745afdd7":"****Extra Features:","8c856c0a":"****Check Accuracy"}}