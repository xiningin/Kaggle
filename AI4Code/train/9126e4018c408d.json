{"cell_type":{"d8ba09ca":"code","fdd335ba":"code","46bbdf4c":"code","fe9081b5":"code","e8f90e31":"code","d5f749f3":"code","0106c8ec":"code","180fca89":"code","2e12c3a2":"code","e274a58e":"code","08f40431":"code","5188fc5f":"code","4095eed9":"code","f0a17dc6":"code","56aa6582":"code","4e4d690e":"code","65605631":"code","9a9eae3c":"code","9dfff822":"code","58fe67bc":"code","5ca6ec67":"code","32762a57":"code","b35eda36":"code","a1ec5ecd":"code","ef19a580":"code","fb51a696":"code","1a4d701e":"code","67c1759b":"code","1fae716e":"code","6220ad43":"code","016b4bf9":"code","3b5a68ff":"code","651e7bcd":"code","166b9ea6":"code","917f49df":"code","92e43652":"code","a296c821":"code","0c4e56a9":"code","583bab7a":"code","14a4b29c":"code","52e79d77":"code","81be00e9":"code","d189ac3f":"code","3b453243":"code","9d5d2643":"code","d2e28807":"code","2bf0c215":"code","9fbd2963":"code","d62bdc5e":"code","994f02b0":"code","e32302a1":"code","9990d70b":"code","ee5aa45e":"code","65d1bd05":"code","e211e3f3":"code","ec9fb4c7":"code","182d31fe":"code","291f2668":"code","e5767e01":"code","a0d7025e":"code","70b2e41e":"code","ccc89c07":"code","f27a37da":"code","a553216a":"code","65f47f08":"code","cd8af86c":"code","78343938":"code","01aab18a":"code","f1d9c350":"code","99b02b9e":"code","4ca5e5c7":"code","14674184":"code","95068c5a":"code","03c7cb02":"code","7a02ed7d":"code","62cd9f19":"code","ca373f2e":"code","8ae6b0ba":"code","c3d0109e":"code","24a4acd9":"code","11a3da53":"code","adfdb837":"code","fa8b10bd":"markdown","b6afd970":"markdown","a93e6bbc":"markdown","a7490456":"markdown","1bdaaae6":"markdown","a3225e12":"markdown","6e18c35c":"markdown","eee6b4db":"markdown","d607e426":"markdown","47e78bca":"markdown","b0f3df8d":"markdown","5c42fbba":"markdown","ad69b7b0":"markdown","e15f8ad9":"markdown","ccf6ed82":"markdown","aaee6965":"markdown","f300523b":"markdown","cd5450f6":"markdown","50f6cc40":"markdown","b38676ed":"markdown","1f03930d":"markdown","9e8f50ae":"markdown","2044c8ef":"markdown","a1dc4552":"markdown","c13d6e86":"markdown","866d609f":"markdown","cd047fda":"markdown","e7df3263":"markdown","d06d2132":"markdown","2e01eb49":"markdown","b4084a32":"markdown","c610efbc":"markdown","f0b0d0a8":"markdown","15539a39":"markdown","bb855c14":"markdown","79ae9708":"markdown","e6e4513f":"markdown","e0278142":"markdown","edc4111b":"markdown","e68b3675":"markdown","f9a2585a":"markdown","d0e6f447":"markdown","7f4c3f40":"markdown"},"source":{"d8ba09ca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdd335ba":"train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_passengerId=test['PassengerId']","46bbdf4c":"train.columns","fe9081b5":"train.describe()\n ","e8f90e31":"train.info()\n","d5f749f3":"test.info()","0106c8ec":"def bar_plot(variable):\n    var = train[variable]\n    varValue = var.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"number of sample\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}:\\n {}\".format(variable, varValue))","180fca89":"Category1=['Survived','Pclass','Sex','SibSp','Parch','Embarked']\nfor c in Category1:\n     bar_plot(c)  ","2e12c3a2":"Category2=['Cabin','Name','Ticket']\nfor c in Category2:\n    print(\"{}:\\n\".format(train[c].value_counts()))","e274a58e":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train[variable] ,bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Number of sample\")\n    plt.title(\"{} distribution with hist\".format(variable))\n","08f40431":"numericalVal=['Age','Fare']\nfor n in numericalVal:\n    plot_hist(n)","5188fc5f":"#Pclass-Survived\ntrain[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by='Survived',ascending=False)","4095eed9":"#Sex-Survived\ntrain[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by='Survived',ascending=False)","f0a17dc6":"#SibSp-Survived\ntrain[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by='Survived',ascending=False)","56aa6582":"#Parch-Survived\ntrain[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by='Survived',ascending=False)","4e4d690e":"#Embarked-Survived\ntrain[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"],as_index=False).mean().sort_values(by='Survived',ascending=False)","65605631":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = (i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","9a9eae3c":"train.loc[detect_outliers(train,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","9dfff822":"train=train.drop(detect_outliers(train,['Age','SibSp','Parch','Fare']),axis=0).reset_index(drop=True)","58fe67bc":"train_len=len(train)","5ca6ec67":"#combine my train and test at first\n\ntrain=pd.concat([train,test],axis=0).reset_index(drop=True)","32762a57":"train.columns[train.isnull().any()]","b35eda36":"#where isnull\ntrain.isnull().sum()","a1ec5ecd":"#Isnull in Embarked\ntrain[train[\"Embarked\"].isnull()]","ef19a580":"#reviewed the Fare features for Embarked\ntrain.boxplot(column='Fare',by='Embarked')","fb51a696":"#If I fill the spaces in the embarked featured according to the fare features\ntrain['Embarked'] =train['Embarked'].fillna('C')\ntrain[train[\"Embarked\"].isnull()]","1a4d701e":"#look at Fare feature\ntrain[train['Fare'].isnull()]\n","67c1759b":"train[(train['Pclass'] == 3) & (train['Embarked'] == 'S')]['Fare'].mean()\n","1fae716e":"# writing the missing data on the Fare\ntrain['Fare'] =train['Fare'].fillna(13.64)  ","6220ad43":"list1=['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp','Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\nsns.heatmap(train[list1].corr(),annot=True, fmt=\".2f\")\nplt.show()  ","016b4bf9":"g=sns.factorplot(x='SibSp', y='Survived',data=train,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()","3b5a68ff":"g=sns.factorplot(x='Parch', y='Survived',data=train,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()","651e7bcd":"g=sns.factorplot(x='Pclass', y='Survived',data=train,kind='bar',size=6)\ng.set_ylabels('Survived Probability')\nplt.show()","166b9ea6":"g=sns.FacetGrid(train,col='Survived')\ng.map(sns.distplot,'Age',bins=25)\nplt.show()","917f49df":"g=sns.FacetGrid(train,col='Survived')\ng.map(sns.distplot,'Age',bins=25)\nplt.xlim(15,35)\nplt.show()\n\n","92e43652":"g=sns.FacetGrid(train,col='Survived')\ng.map(sns.distplot,'Age',bins=25)\nplt.ylim(0.00,0.05)\nplt.show()\n\n","a296c821":"g=sns.FacetGrid(train,col='Survived',row='Pclass',size = 5)\ng.map(plt.hist,'Age',bins=25)\ng.add_legend()\nplt.show()","0c4e56a9":"g=sns.FacetGrid(train,row='Embarked',size=4)\ng.map(sns.pointplot,'Pclass','Survived','Sex')\ng.add_legend()\nplt.show()","583bab7a":"g=sns.FacetGrid(train,row='Embarked',col='Survived',size=4)\ng.map(sns.barplot,'Sex','Fare')\ng.add_legend()\nplt.show()","14a4b29c":"train[train[\"Age\"].isnull()]","52e79d77":"kont=train[train['Age'].isnull()]\nsns.factorplot(x='Sex', y='Age',data=train,kind='box')\nplt.show()","81be00e9":"sns.factorplot(x='Parch', y='Age',data=train,kind='box')\nplt.show()\n\n","d189ac3f":"sns.factorplot(x='SibSp', y='Age',data=train,kind='box')\nsns.factorplot(x = \"Parch\", y = \"Age\",data = train, kind = \"box\")\nplt.show()","3b453243":"\nsns.heatmap(train[['Age','SibSp','Parch','Pclass']].corr(),annot = True)","9d5d2643":"index_nan_age=list(train['Age'][train['Age'].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train['Age'][((train['SibSp']==train.iloc[i]['SibSp'])&\n                          (train['Parch']==train.iloc[i]['Parch'])&\n                          (train['Pclass']==train.iloc[i]['Pclass']))].median()\n    age_med=train['Age'].median()\n    if not np.isnan(age_pred):\n        train['Age'].iloc[i]=age_pred\n    else:\n        train['Age'].iloc[i]=age_med","d2e28807":"train[train[\"Age\"].isnull()]","2bf0c215":"train[\"Name\"].head(10)","9fbd2963":"name = train[\"Name\"]\ntrain[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","d62bdc5e":"train[\"Title\"].head(10)","994f02b0":"sns.countplot(x='Title',data=train)\nplt.xticks(rotation = 60)\nplt.show()","e32302a1":"train[\"Title\"] = train[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\"  else 2 if i == \"Mrs\" else 3 if i == \"Mr\"else 4 for i in train[\"Title\"]]\ntrain[\"Title\"].head()","9990d70b":"sns.countplot(x='Title',data=train)\nplt.xticks(rotation=60)\nplt.show()","ee5aa45e":"g=sns.factorplot(x='Title', y='Survived',data=train,kind='bar')\ng.set_xticklabels(['Master',\"Miss or Ms or Mlle\",'Mrs',\"Mr\",'Other'])\ng.set_ylabels('Survived Probability')\nplt.show()","65d1bd05":"train=pd.get_dummies(train,columns=['Title'])\ntrain.head()","e211e3f3":"train.drop(labels = [\"Name\"], axis = 1, inplace = True)","ec9fb4c7":"train.head()","182d31fe":"train.head()","291f2668":"train['FamilySize']=train['Parch'] + train['SibSp'] + 1   ","e5767e01":"g=sns.factorplot(x='FamilySize', y='Survived',data=train,kind='bar')\ng.set_ylabels('Survived Probabilty')\nplt.show() ","a0d7025e":"train['FamilySize_Survived']=[1 if i<5 else 0 for i in train['FamilySize']]","70b2e41e":"g=sns.countplot(x='FamilySize_Survived',data=train)\ng.set_xticklabels(['Big families','SmalFamilies'])\nplt.show()","ccc89c07":"g=sns.factorplot(x='FamilySize_Survived', y='Survived',data=train,kind='bar')\ng.set_xticklabels(['Big families','SmalFamilies'])\ng.set_ylabels('Survival')\nplt.show()","f27a37da":"#FEATURE ENG\u0130NEER\u0130NG----> EMBARKED\ntrain=pd.get_dummies(train,columns=['Embarked'])","a553216a":"#FEATURE ENG\u0130NEER\u0130NG----> TICKET\ntrain.drop(labels=['Ticket'],axis=1,inplace=True)","65f47f08":"#FEATURE ENG\u0130NEER\u0130NG----> PCLASS\ntrain['Pclass']=train['Pclass'].astype('category')\ntrain=pd.get_dummies(train,columns=['Pclass'])","cd8af86c":"#FEATURE ENG\u0130NEER\u0130NG----> SEX\ntrain[\"Sex\"]=train[\"Sex\"].astype(\"category\")\ntrain=pd.get_dummies(train,columns=['Sex'])\ntrain.head()","78343938":"#FEATURE ENG\u0130NEER\u0130NG----> PASSENGERID,CAB\u0130N\ntrain.drop(labels=['PassengerId','Cabin'],axis=1,inplace=True)","01aab18a":"#FEATURE ENG\u0130NEER\u0130NG----> Family size\ntrain = pd.get_dummies(train, columns= [\"FamilySize_Survived\"])\ntrain.head()","f1d9c350":"train.columns","99b02b9e":"train.head()","4ca5e5c7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","14674184":"train_len","95068c5a":"test_data=train[train_len:]\ntest_data.drop(labels=['Survived'],axis=1,inplace=True)","03c7cb02":"test_data.head()","7a02ed7d":"train_data = train[:train_len]\nX_train = train_data.drop(labels=\"Survived\", axis=1)\ny_train=train_data[\"Survived\"]\nX_train, X_test,y_train, y_test = train_test_split(X_train,y_train,test_size=0.30,random_state = 42) \nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"train_data\",len(train_data))","62cd9f19":"# call this function\nlogreg=LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train=round(logreg.score(X_train, y_train)*100,2)\nacc_log_test=round(logreg.score(X_test, y_test)*100,2)\nprint(\"Training Accuarcy: %{}\".format(acc_log_train))\nprint(\"Testing Accuarcy: %{}\".format(acc_log_test))","ca373f2e":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state =  random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n            KNeighborsClassifier()]\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                 \"max_depth\" : range(1,20,2)}\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\":[0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\nrf_param_grid = {\"max_features\":[1,3,10],\n                \"min_samples_split\": [2,3,10],\n                \"min_samples_leaf\": [1,3,10],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\nknn_param_grid = {\"n_neighbors\":np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\", \"distance\"],\n                 \"metric\": [\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid, svc_param_grid, rf_param_grid,logreg_param_grid,knn_param_grid]","8ae6b0ba":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid = classifier_param[i], cv = StratifiedKFold(n_splits = 5), scoring = \"accuracy\",n_jobs= -1, verbose =1)\n    clf.fit(X_train, y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","c3d0109e":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","24a4acd9":"voting_classifier = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                                   (\"rfc\", best_estimators[2]),\n                                                   (\"lr\",best_estimators[3])],\n                                    voting=\"soft\", n_jobs = -1)\nvoting_classifier =voting_classifier.fit(X_train,y_train)\nprint(accuracy_score(voting_classifier.predict(X_test),y_test))\n#(\"c_svc\",best_estimators[1]),","11a3da53":"test_survived = pd.Series(voting_classifier.predict(test_data),name = \"Survived\").astype(int)\nresults = pd.concat([test_passengerId,test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index =False)","adfdb837":"test_survived","fa8b10bd":"1st class passengers are older than 2nd, and 2nd is older than 3rd class. ","b6afd970":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","a93e6bbc":"* Having a lot of SibSp have less chance to survive.\n* if sibsp == 0 or 1 or 2, passenger has more chance to survive\n* we can consider a new feature describing these categories.","a7490456":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","1bdaaae6":"<a id = \"16\"><\/a><br>\n## Age -- Survived","a3225e12":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small familes have more chance to survive.\n* there is a std in survival of passenger with parch = 3","6e18c35c":"# Introduction\nThe sinkig of Titanic is one the most notorious shipwredcks in the history.In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. \n<font color = 'blue'>\n\nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)","eee6b4db":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","d607e426":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","47e78bca":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","b0f3df8d":"* So I can say this: small families are very likely to survive while large families are unlikely to survive.","5c42fbba":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","ad69b7b0":"<a id = \"23\"><\/a><br>\n## Family Size","e15f8ad9":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","ccf6ed82":"* Female passengers have much better survival rate than males.\n* males have better surv\u015fval rate in pclass 3 in C.\n* embarked and sex will be used in training.","aaee6965":"<a id = \"30\"><\/a><br>\n## Train - Test Split","f300523b":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","cd5450f6":"<a id = \"7\"><\/a><br>\n# Outlier Detection","50f6cc40":"Small familes have more chance to survive than large families.","b38676ed":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","1f03930d":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","9e8f50ae":"\n* I saw too many passengers in Pclass 1 and this people survived...If i group this people in named others","2044c8ef":"Here we look at the numerical statistics of the data in numeric columns.","a1dc4552":"<a id = \"20\"><\/a><br>\n## Fill Missing: Age Feature\n* Can I fill in the age feature based on gender?\n* Can I fill it by looking at the pclass feature?\n* What if I check Parch and SipSp?\n* What happens loot at Age,Pclass,Parch, Sibsp\n","c13d6e86":"* I saw that I can start with nicknames(Mrs,Miss,Mr...)","866d609f":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived","cd047fda":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","e7df3263":"Sex is not informative for age prediction, age distribution seems to be same.","d06d2132":"<a id = \"11\"><\/a><br>\n# Visualization","2e01eb49":"* We also see here that the number of small families is 120 times higher than the other.","b4084a32":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive,\n* most passengers are in 15-35 age range,\n* use age feature in training\n* use age distribution for missing value of age","c610efbc":"* pclass is important feature for model training.","f0b0d0a8":"<a id = \"21\"><\/a><br>\n# Feature Engineering","15539a39":"<a id = \"1\"><\/a><br>\n## Load and Check Data","bb855c14":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","79ae9708":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","e6e4513f":"<a id = \"5\"><\/a><br>\n## Numerical Variable","e0278142":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","edc4111b":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId: unique id number to each passenger\n1. Survived: passenger survive(1) or died(0)\n1. Pclass: passenger class\n1. Name: name\n1. Sex: gender of passenger \n1. Age: age of passenger \n1. SibSp: number of siblings\/spouses\n1. Parch: number of parents\/children \n1. Ticket: ticket number \n1. Fare: amount of money spent on ticket\n1. Cabin: cabin category\n1. Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)\n","e68b3675":"<a id = \"22\"><\/a><br>\n## Name -- Title","f9a2585a":"<a id = \"4\"><\/a><br>\n## Categorical Variable","d0e6f447":"<a id = \"29\"><\/a><br>\n# Modeling","7f4c3f40":"* Passsengers who pay higher fare have better survival. Fare can be used as categorical for training."}}