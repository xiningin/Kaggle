{"cell_type":{"1dc4d7b6":"code","3de0540b":"code","dfe02c50":"code","7c52d105":"code","939bab06":"code","465b4056":"code","c734686f":"code","5f359744":"code","7584f482":"code","e8db5f72":"code","ba099e4d":"code","9468e7f9":"code","b3da7905":"code","42ddc3d9":"code","88fc0bd2":"code","d1a4a1e4":"code","17dbe6d8":"code","d87fa019":"code","27b8db5f":"code","a4c49633":"code","198aabf4":"markdown","ea8e1b19":"markdown","56e1308c":"markdown","b7f6baa8":"markdown","3ba605cc":"markdown","02d6fc3c":"markdown","5969a356":"markdown","3c818f35":"markdown","8c07b671":"markdown","f071811f":"markdown","97109c03":"markdown","f1edd8f0":"markdown","a17428bf":"markdown","3a3e1c0a":"markdown"},"source":{"1dc4d7b6":"import os\nimport random\nimport subprocess\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nfrom joblib import Parallel, delayed\nfrom scipy.signal import convolve2d\nfrom sklearn.metrics import mean_absolute_error\nfrom sympy.logic import POSform","3de0540b":"TIME_BUDGET = 8.9 * 3600  # Maximum time allowed for our notebook\nMAX_BUDGET = 10  # Maximum time spent on a single puzzle\nN = 25  # grid dimension\nDELTAS=(1, )  #\u00a0list of deltas we are trying to solve","dfe02c50":"!git clone https:\/\/github.com\/arminbiere\/kissat.git >\/dev\/null\n!cd kissat && .\/configure && make all >\/dev\/null","7c52d105":"# a b c\n# d e f\n# g h i\n\nlive = []\ndead = []\nfor a in (0,1):\n    for b in (0,1):\n        for c in (0,1):\n            for d in (0,1):\n                for e in (0,1):\n                    for f in (0,1):\n                        for g in (0,1):\n                            for h in (0,1):\n                                for i in (0,1):\n                                    crown = (a+b+c+d+ f+g+h+i)\n                                    var = [a, b, c, d, e, f, g, h, i]\n                                    if crown == 3 or (e == 1 and crown == 2):\n                                        live.append(var)\n                                    else:\n                                        dead.append(var)\n\nlive = POSform(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], live)\ndead = POSform(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], dead)","939bab06":"live","465b4056":"# x\n\n# a b c\n# d e f\n# g h i\n\nvalid = []\nfor a in (0,1):\n    for b in (0,1):\n        for c in (0,1):\n            for d in (0,1):\n                for e in (0,1):\n                    for f in (0,1):\n                        for g in (0,1):\n                            for h in (0,1):\n                                for i in (0,1):\n                                    crown = (a+b+c+d+ f+g+h+i)\n                                    x = 1 if crown == 3 or (e == 1 and crown == 2) else 0\n                                    var = [x, a, b, c, d, e, f, g, h, i]\n                                    valid.append(var)\n\nvalid = POSform(['x', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], valid)","c734686f":"def life_step(X):\n    nbrs_count = convolve2d(X, np.ones((3, 3)), mode='same', boundary='wrap') - X\n    return (nbrs_count == 3) | (X & (nbrs_count == 2))\n\n\ndef individual_scores(pred):\n    scores = []\n    for i in df.index:\n        delta = df.loc[i][0]\n        start = np.asarray(pred.loc[i]).reshape(N, N)\n        end   = np.asarray(df.loc[i][1:]).reshape(N, N)\n        x = start\n        for _ in range(delta):\n            x = life_step(x)\n        scores.append(mean_absolute_error(x, end))\n    return scores","5f359744":"def templatize(cnf):\n    return (\n        str(cnf)\n        .replace(' & ', ' 0\\n')\n        .replace(' | ', ' ')\n        .replace('(', '')\n        .replace(')', '')\n        .replace('~', '-')\n        + ' 0\\n'\n    )","7584f482":"template_live = templatize(live)\ntemplate_dead = templatize(dead)\ntemplate_intermediate = templatize(valid)","e8db5f72":"def replace(template, a, b, c, d, e, f, g, h, i, x=None):\n    return (\n        template\n        .replace('a', str(a))\n        .replace('b', str(b))\n        .replace('c', str(c))\n        .replace('d', str(d))\n        .replace('e', str(e))\n        .replace('f', str(f))\n        .replace('g', str(g))\n        .replace('h', str(h))\n        .replace('i', str(i))\n        .replace('x', str(x))\n    )","ba099e4d":"def wrap(val):\n    return (val + N) % N","9468e7f9":"# convert a position (x, y) at layed d to a variable number\ndef v(x, y, d):\n    return 1 + wrap(x) + wrap(y) * N + d * N * N","b3da7905":"def get_clauses(puzzle, delta):\n    clauses = ''\n    \n    for x in range(N):\n        for y in range(N):\n\n            clauses += replace(template_live if puzzle[x, y] else template_dead,\n                            v(x-1, y-1, 0), v(x, y-1, 0), v(x+1, y-1, 0),\n                            v(x-1, y  , 0), v(x, y  , 0), v(x+1, y  , 0),\n                            v(x-1, y+1, 0), v(x, y+1, 0), v(x+1, y+1, 0))\n\n    for d in range(1, delta):\n        for x in range(N):\n            for y in range(N):\n                clauses += replace(template_intermediate,\n                                v(x-1, y-1, d), v(x, y-1, d), v(x+1, y-1, d),\n                                v(x-1, y  , d), v(x, y  , d), v(x+1, y  , d),\n                                v(x-1, y+1, d), v(x, y+1, d), v(x+1, y+1, d),\n                                v(x, y, d-1))\n    return clauses","42ddc3d9":"def error(idx, pred):\n    delta = df.loc[idx][0]\n    end = np.asarray(df.loc[idx][1:]).reshape(N, N)\n\n    x = pred\n    for _ in range(delta):\n        x = life_step(x)\n\n    return mean_absolute_error(x, end)","88fc0bd2":"def solve(idx):\n    budget = TIME_BUDGET - (time.time() - start_time)\n    budget = min(budget, MAX_BUDGET)\n    if budget <= 0:\n        return None\n    \n    # load puzzle\n    delta = df.loc[idx][0]\n    puzzle = np.asarray(df.loc[idx][1:]).reshape(N,N)\n\n    # get SAT clauses\n    clauses = get_clauses(puzzle, delta)\n    nb = clauses.count('\\n')\n\n    # write .cnf file\n    filename = f'puzzles_cnf\/{idx}.cnf'\n    with open(filename, 'w') as f:\n        f.write(f'c puzzle {idx}, delta {delta}\\n')\n        f.write(f'p cnf {N*N*delta} {nb}\\n')\n        f.write(clauses)\n    \n    # invoke kissat\n    cmd = [\"timeout\", f'{budget}s', \".\/kissat\/build\/kissat\", \"-q\", filename]\n    cmd = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    solution = cmd.communicate()[0]\n    solution = solution.decode('utf8')\n    os.remove(filename)\n    \n    if solution == '':\n        print(idx, \"timeout\")\n        return None\n        \n    print(idx, \"solved\")\n\n    # parse solution\n    parsed = []\n    for x in solution.split():\n        try:\n            parsed.append(int(x))\n        except:\n            pass\n    parsed = set(parsed)\n\n    # format solution\n    solution = np.zeros((N, N), dtype=int)\n    for x in range(N):\n        for y in range(N):\n            z = v(x, y, delta-1)\n            if z in parsed:\n                solution[x, y] = 1\n\n    return solution","d1a4a1e4":"df = pd.read_csv('..\/input\/conways-reverse-game-of-life-2020\/test.csv', index_col='id')","17dbe6d8":"!mkdir -p puzzles_cnf\nsubmission = df.copy()\nsubmission.drop(['delta'], inplace=True, axis=1)\nsubmission['score'] = individual_scores(submission)","d87fa019":"to_solve = list(set(df[df.delta.isin(DELTAS)].index).intersection(set(submission[submission.score > 0].index)))\nto_solve = [x for _, x in sorted(zip(submission.loc[to_solve].score \/ df.loc[to_solve].delta, to_solve), reverse=True)]","27b8db5f":"start_time = time.time()\n\nsolutions = Parallel(n_jobs=-1)(\n    delayed(solve)(i) for i in to_solve\n)\n\nprint(f'Completely solved {sum([x is not None for x in solutions])} puzzles in {time.time() - start_time:.2f} seconds \ud83d\udd25\ud83d\udd25\ud83d\udd25')","a4c49633":"submission.drop(['score'], axis=1, inplace=True)\n\nfor i, s in zip(to_solve, solutions):\n    if s is not None:\n        submission.loc[i] = s.reshape(N*N)\n\nsubmission.rename(columns={f'stop_{x}': f'start_{x}' for x in range(N*N)}, inplace=True)\nsubmission.to_csv(f'submission.csv')","198aabf4":"### Run Jobs in Parallel","ea8e1b19":"# Perfect Solve of Puzzles using a SAT solver\n\nKaggle's [Conway's Reverse Game of Life 2020](https:\/\/www.kaggle.com\/c\/conways-reverse-game-of-life-2020\/overview) can be viewed as a [boolean satisfiability problem](https:\/\/en.wikipedia.org\/wiki\/Boolean_satisfiability_problem).\n\nIn this notebook, we will:\n - presents the problem in a form solvable by SAT solver\n - use in a notebook the [kissat SAT solver](http:\/\/fmv.jku.at\/kissat\/), which won first place in the main track of the [SAT Competition 2020](https:\/\/satcompetition.github.io\/2020) and first place on unsatisfiable instances.\n","56e1308c":"### Compute score of each puzzle","b7f6baa8":"### Load puzzles","3ba605cc":"### Generate CNF for one cell (live or dead)\n\nTo use a SAT solver we must express the problem in the [conjunctive normal form](https:\/\/en.wikipedia.org\/wiki\/Conjunctive_normal_form) (CNF).\n\nThe easiest way I found to generate the proble in CNF, is to create the truth table of the problem and use the [Quine\u2013McCluskey algorithm](https:\/\/en.wikipedia.org\/wiki\/Quine%E2%80%93McCluskey_algorithm) to generate an optimal CNF.\n\nWe are lucky `sympy` implements it.\n\n\nFollowing code will generate all cases of a 3x3 grid on which we apply the Game Of Life rules. Two lists keep results of combinations resulting in `live` or `dead`  cell. Each cell of the 3x3 grid is represented by a letter `a` to `i`:","02d6fc3c":"### Turn into a template","5969a356":"# Conclusion\n\nThis approach helped to solve all puzzles with `delta` equal to 1 or 2.\n\nI learnt a lot about SAT and CNF during this competition.\n\nIf you like this notebook, please leave a comment \ud83d\udd8a, upvote \ud83d\udc4d, and put a smile on your face \ud83d\ude00.","3c818f35":"### Order puzzles to solve easy ones first","8c07b671":"### Use test.csv as baseline of our submission","f071811f":"### CNF for the general case\n\n`x` is the resulting cell.","97109c03":"### Save submission","f1edd8f0":"### Solve one puzzle","a17428bf":"### Install and compile kissat SAT solver from sources","3a3e1c0a":"Here is the CNF that a live cell shall validate:"}}