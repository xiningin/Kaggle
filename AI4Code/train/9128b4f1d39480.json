{"cell_type":{"1f268fa0":"code","27fd7de4":"code","b3dbe0da":"code","a1956050":"code","73a3c850":"code","7806fec7":"code","789f554d":"code","482d66ed":"code","11109550":"code","d6fe6c69":"code","b2b8debf":"code","508b6254":"code","a3b6cdea":"code","a96118fe":"code","2a3bd6ae":"code","e729bc43":"code","12a6a635":"code","7a2f4086":"code","fce391d8":"markdown","8e1a861e":"markdown","e0ecdbe4":"markdown","37d5dcf6":"markdown","ef2195ba":"markdown","c264a2b6":"markdown","bc1636a0":"markdown","3e5b332e":"markdown"},"source":{"1f268fa0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport gc\nimport tensorflow as tf\nimport keras.backend as K\nfrom keras import regularizers\nfrom keras.utils import to_categorical\nfrom keras.callbacks import EarlyStopping, TensorBoard\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, Conv1D, MaxPooling1D, Lambda\nfrom keras.layers import GRU, Dense, Activation, Dropout, concatenate, Input, BatchNormalization\nfrom keras.callbacks import ReduceLROnPlateau,ModelCheckpoint\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport warnings\nimport os\nimport pickle\nimport time\nfrom tensorflow.python.client import timeline\nimport re\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","27fd7de4":"train = pd.read_csv('..\/input\/training_set.csv')\ntrain.head(20)","b3dbe0da":"ss1 = StandardScaler()\ntrain[['mjd', 'flux', 'flux_err']] = ss1.fit_transform(train[['mjd', 'flux', 'flux_err']])\ntrain.head()","a1956050":"train = train.sort_values(['object_id', 'passband', 'mjd'])\ntrain.head()","73a3c850":"train_timeseries = train.groupby(['object_id', 'passband'])['flux', 'flux_err', 'detected'].apply(lambda df: df.reset_index(drop=True)).unstack()\ntrain_timeseries.fillna(0, inplace=True)\n\n# rename column names\ntrain_timeseries.columns = ['_'.join(map(str,tup)).rstrip('_') for tup in train_timeseries.columns.values]\ntrain_timeseries.head(7)","7806fec7":"num_columns = len(train_timeseries.columns)\nnum_columns","789f554d":"X_train = train_timeseries.values.reshape(-1, 6, num_columns).transpose(0, 2, 1)\nX_train","482d66ed":"meta_train = pd.read_csv('..\/input\/training_set_metadata.csv')\nmeta_train.head()","11109550":"classes = sorted(meta_train.target.unique())\nclasses","d6fe6c69":"class_map = dict()\nfor i,val in enumerate(classes):\n    class_map[val] = i\nclass_map","b2b8debf":"train_timeseries0 = train_timeseries.reset_index()\ntrain_timeseries0 = train_timeseries0[train_timeseries0.passband == 0]\ntrain_timeseries0.head()","508b6254":"merged_meta_train = train_timeseries0.merge(meta_train, on='object_id', how='left')\nmerged_meta_train.fillna(0, inplace=True)","a3b6cdea":"y = merged_meta_train.target\nclasses = sorted(y.unique())\n\n# Taken from Giba's topic : https:\/\/www.kaggle.com\/titericz\n# https:\/\/www.kaggle.com\/c\/PLAsTiCC-2018\/discussion\/67194\n# with Kyle Boone's post https:\/\/www.kaggle.com\/kyleboone\nclass_weight = {\n    c: 1 for c in classes\n}\nfor c in [64, 15]:\n    class_weight[c] = 2\n\nprint('Unique classes : ', classes)","a96118fe":"targets = merged_meta_train.target\ntarget_map = np.zeros((targets.shape[0],))\ntarget_map = np.array([class_map[val] for val in targets])\nY = to_categorical(target_map)\nY.shape","2a3bd6ae":"Y","e729bc43":"def multi_weighted_logloss(y_ohe, y_p):\n    \"\"\"\n    @author olivier https:\/\/www.kaggle.com\/ogrellier\n    multi logloss for PLAsTiCC challenge\n    \"\"\"\n    classes = [6, 15, 16, 42, 52, 53, 62, 64, 65, 67, 88, 90, 92, 95]\n    class_weight = {6: 1, 15: 2, 16: 1, 42: 1, 52: 1, 53: 1, 62: 1, 64: 2, 65: 1, 67: 1, 88: 1, 90: 1, 92: 1, 95: 1}\n    # Normalize rows and limit y_preds to 1e-15, 1-1e-15\n    y_p = np.clip(a=y_p, a_min=1e-15, a_max=1-1e-15)\n    # Transform to log\n    y_p_log = np.log(y_p)\n    # Get the log for ones, .values is used to drop the index of DataFrames\n    # Exclude class 99 for now, since there is no class99 in the training set \n    # we gave a special process for that class\n    y_log_ones = np.sum(y_ohe * y_p_log, axis=0)\n    # Get the number of positives for each class\n    nb_pos = y_ohe.sum(axis=0).astype(float)\n    # Weight average and divide by the number of positives\n    class_arr = np.array([class_weight[k] for k in sorted(class_weight.keys())])\n    y_w = y_log_ones * class_arr \/ nb_pos    \n    loss = - np.sum(y_w) \/ np.sum(class_arr)\n    return loss\n\ndef plot_loss_acc(history):\n    plt.plot(history.history['loss'][1:])\n    plt.plot(history.history['val_loss'][1:])\n    plt.title('model loss')\n    plt.ylabel('val_loss')\n    plt.xlabel('epoch')\n    plt.legend(['train','Validation'], loc='upper left')\n    plt.show()\n    \n    plt.plot(history.history['acc'][1:])\n    plt.plot(history.history['val_acc'][1:])\n    plt.title('model Accuracy')\n    plt.ylabel('val_acc')\n    plt.xlabel('epoch')\n    plt.legend(['train','Validation'], loc='upper left')\n    plt.show()","12a6a635":"batch_size = 256\n\ndef weight_variable(shape, name=None):\n    return np.random.normal(scale=.01, size=shape)\n\ndef build_model():\n    input = Input(shape=(X_train.shape[1], 6), dtype='float32', name='input0')\n    output = Conv1D(256,\n                 kernel_size=80,\n                 strides=4,\n                 padding='same',\n                 kernel_initializer='glorot_uniform',\n                 kernel_regularizer=regularizers.l2(l=0.0001))(input)\n    output = BatchNormalization()(output)\n    output = Activation('relu')(output)\n    output = MaxPooling1D(pool_size=4, strides=None)(output)\n    output = Conv1D(256,\n                 kernel_size=3,\n                 strides=1,\n                 padding='same',\n                 kernel_initializer='glorot_uniform',\n                 kernel_regularizer=regularizers.l2(l=0.0001))(output)\n    output = BatchNormalization()(output)\n    output = Activation('relu')(output)\n    output = MaxPooling1D(pool_size=4, strides=None)(output)\n    output = Lambda(lambda x: K.mean(x, axis=1))(output) # Same as GAP for 1D Conv Layer\n    output = Dense(len(classes), activation='softmax')(output)\n    model = Model(inputs=input, outputs=output)\n    return model\n\n# https:\/\/www.kaggle.com\/c\/PLAsTiCC-2018\/discussion\/69795\ndef mywloss(y_true,y_pred):  \n    yc=tf.clip_by_value(y_pred,1e-15,1-1e-15)\n    loss=-(tf.reduce_mean(tf.reduce_mean(y_true*tf.log(yc),axis=0)\/wtable))\n    return loss","7a2f4086":"epochs = 1000\ny_count = Counter(target_map)\nwtable = np.zeros((len(classes),))\nfor i in range(len(classes)):\n    wtable[i] = y_count[i] \/ target_map.shape[0]\n\ny_map = target_map\ny_categorical = Y\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\nstart = time.time()\nclfs = []\noof_preds = np.zeros((len(X_train), len(classes)))\n\nmodel_file = \"model.weigths\"\n\nfor fold_, (trn_, val_) in enumerate(folds.split(y_map, y_map)):\n    checkPoint = ModelCheckpoint(model_file, monitor='val_loss',mode = 'min', save_best_only=True, verbose=0)\n\n    x_train, y_train = X_train[trn_], Y[trn_]\n    x_valid, y_valid = X_train[val_], Y[val_]\n    \n    model = build_model()    \n    optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\n    stopping = EarlyStopping(monitor='val_loss', patience=60, verbose=0, mode='auto')\n\n    model.compile(loss=mywloss, optimizer=optimizer, metrics=['accuracy'])\n    history = model.fit(x_train, y_train,\n                    validation_data=[x_valid, y_valid], \n                    epochs=epochs,\n                        batch_size=batch_size,\n                    shuffle=False,verbose=1,callbacks=[checkPoint, stopping])           \n    plot_loss_acc(history)\n    \n    print('Loading Best Model')\n    model.load_weights(model_file)\n    # # Get predicted probabilities for each class\n    oof_preds[val_, :] = model.predict(x_valid,batch_size=batch_size)\n    print(multi_weighted_logloss(y_valid, model.predict(x_valid,batch_size=batch_size)))\n    clfs.append(model)\n    \nprint('MULTI WEIGHTED LOG LOSS : %.5f ' % multi_weighted_logloss(Y,oof_preds))\n\nelapsed_time = time.time() - start\nprint(\"elapsed_time:\", elapsed_time)","fce391d8":"## Ideas for improvement\n- We need to find a proper size of the model, I think it's currently overfitting.\n    -  Or more data, I believe we can't use data augmantation though\n- Add more derived features.","8e1a861e":"We reshape the data into [None, num_columns, num_passbands.","e0ecdbe4":"## (Updated) Keras + CNN: Use time series data as is \nI previously posted [Keras + RNN(GRU) to handle passbands as timeseries](https:\/\/www.kaggle.com\/higepon\/keras-rnn-gru-to-handle-passbands-as-timeseries). Although it's natural to use GRU for time series input, it turns out that GRU is relatively slow to train and it was painful.  [Mithrillion](https:\/\/www.kaggle.com\/mithrillion) kindly advised me to use CNN instead. Here I put up relatively simple CNN based model.\n\nValidation accuracy is not very high for this model, but I think this woudl be great starter who wants to use CNN.\nI'd appreciate your feedback!\n\nFYI: I got great improvement on my validation accuracy with this setup + alpha. I think this is generally right direction.","37d5dcf6":"## Time series transformation\nThis maybe not be very easy to understand, but basically we are transforming train data into 2D data [num_passbands, len(flux) + len(flux_err) + len(detected)] as below. So we can say, for each object_id we have one monotone image which has width=num_passbands, height=len(flux) + len(flux_err) + len(detected.","ef2195ba":"## Sort\nSort train data before we group them just in case.","c264a2b6":"## Standardize input\nNeural networks works better when inputs are standardized.","bc1636a0":"## Load metadata and construct target value","3e5b332e":"## Actual CNN begins here"}}