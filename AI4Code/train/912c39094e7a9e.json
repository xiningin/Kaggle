{"cell_type":{"431f4944":"code","5dcbc074":"code","517a4ba9":"code","9970fe9f":"code","5248ddb3":"code","041200aa":"code","45e145ac":"code","9aec243c":"code","a9a33bfd":"code","d0454304":"code","b0e3a1bb":"code","0219367d":"code","2d4fd8cd":"code","3d5d562b":"code","76ae5d44":"code","4cceaf02":"code","9f3a3585":"code","a4826264":"code","cd22ce91":"code","49c8cd18":"code","8c06c580":"code","c13ae1e7":"code","cd2fa9e3":"code","f9c3edcc":"code","3a5d103c":"code","df173ec2":"code","ffad7686":"code","726d0b51":"code","9228832d":"code","3e6da5be":"code","c6e9d368":"code","b941ebc4":"code","1d7960e9":"code","0221e161":"code","718473bf":"code","8cf5f691":"code","5fafdcde":"code","b5574020":"code","b3d2eba8":"code","47816f94":"code","dfdfab53":"code","0138f356":"code","6490636a":"code","b3a3adfa":"code","6d6cda07":"code","77772a0e":"code","22103734":"code","db265322":"code","2f698ed1":"code","a4b8e0d1":"code","452907ea":"code","d42da14d":"code","3502cfb1":"code","0a944875":"code","29eea29a":"code","ab25454e":"code","1ae4b20e":"code","2db6f421":"code","5a98a790":"code","932238b0":"code","d420b75b":"code","e2740b06":"markdown","45b84d32":"markdown","1ed6ddfa":"markdown","4a4e047d":"markdown","3d996bab":"markdown","5cd9c7b5":"markdown","a7d1b855":"markdown","64a5a173":"markdown","b9cf2323":"markdown","417eeb8a":"markdown","044fb978":"markdown","70c674d7":"markdown","0fb0a17d":"markdown","e828d819":"markdown","67086928":"markdown","b20c256c":"markdown","6eb30615":"markdown","e0ba776d":"markdown"},"source":{"431f4944":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dcbc074":"#\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\ndf1 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","517a4ba9":"#\u30c7\u30fc\u30bf\u306e\u5927\u304d\u3055\ndef data_size(df):\n    display(str(df.shape))\n    \nprint('train data')\ndata_size(df1)\nprint('test data')\ndata_size(df2)","9970fe9f":"#\u5909\u6570\u306e\u78ba\u8a8d\ndef keys_data(df):\n    display(df.keys())\n    \nprint('train data')\nkeys_data(df1)\nprint('test data')\nkeys_data(df2)","5248ddb3":"#\u5909\u6570\u306e\u578b\u306e\u78ba\u8a8d\ndef data_type(df):\n    display(df.dtypes)\n    \nprint('train data')\ndata_type(df1)\nprint('test data')\ndata_type(df2)","041200aa":"#train data, test data\u306e\u78ba\u8a8d\ndef all_data(df):\n    display(df.head().append(df.tail()))\n    \nprint('train data')\nall_data(df1)\nprint('test data')\nall_data(df2)","45e145ac":"#SalePrice\u306e\u7d71\u8a08\u91cf\ndf1['SalePrice'].describe()","9aec243c":"#SalePrice\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nsns.distplot(df1['SalePrice'])","a9a33bfd":"#\u6b6a\u5ea6\u3001\u5c16\u5ea6\nprint(\"\u6b6a\u5ea6: %f\" % df1['SalePrice'].skew())\nprint(\"\u5c16\u5ea6: %f\" % df1['SalePrice'].kurt())","d0454304":"#\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\nsns.distplot(np.log(df1['SalePrice']))","b0e3a1bb":"#train data\u3092\u76ee\u7684\u5909\u6570\u3068\u305d\u308c\u4ee5\u5916\u306b\u5206\u3051\u308b\u3002\ntrain_x = df1.drop('SalePrice', axis=1)\ntrain_y = df1['SalePrice'].values\n#train data\u3068test data\u3092\u7d50\u5408\nall_data = pd.concat([train_x,df2],axis=0,sort=True)","0219367d":"#\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint('train_x: '+str(train_x.shape)) #\u8aac\u660e\u5909\u6570\u306e\u30b5\u30a4\u30ba\nprint('train_y: '+str(train_y.shape)) #\u76ee\u7684\u5909\u6570\u306e\u30b5\u30a4\u30ba\nprint('all_data: '+str(all_data.shape)) #train data\u3068test data\u306e\u8aac\u660e\u5909\u6570\u306e\u30b5\u30a4\u30ba\u306e\u5408\u8a08","2d4fd8cd":"#\u6b20\u640d\u5024\u306e\u78ba\u8a8d\nnan_data = all_data.isnull().sum()[all_data.isnull().sum()>0].sort_values(ascending=False)\nnan_data","3d5d562b":"#\u6b20\u640d\u5024\u306e\u6570\u306e\u30b0\u30e9\u30d5\u5316\nplt.figure(figsize=(20,15))\nplt.xticks(rotation='90')\nsns.barplot(x=nan_data.index, y=nan_data)","76ae5d44":"# \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u78ba\u8a8d\nna_col_list = all_data.isnull().sum()[all_data.isnull().sum()>0].index.tolist() # \u6b20\u640d\u3092\u542b\u3080\u30ab\u30e9\u30e0\u3092\u30ea\u30b9\u30c8\u5316\nall_data[na_col_list].dtypes.sort_values() #\u30c7\u30fc\u30bf\u578b","4cceaf02":"#feature importance\ndef random_frg(df):\n    train_x = df.drop(['SalePrice'], axis=1)\n    train_y = df['SalePrice']\n    rf = RandomForestRegressor()\n    rf.fit(train_x, train_y)\n    ranking = np.argsort(rf.feature_importances_)\n    fig, ax = plt.subplots(figsize=(20,10))\n    plt.barh(range(len(ranking)), rf.feature_importances_[ranking], color='r')\n    plt.yticks(range(len(ranking)), train_x.columns[ranking])\n    ax.set_xlabel('feature importance')\n    ax.set_title('Feature Importance')\n    plt.tight_layout()\n    plt.show()\n    fig.savefig('figure.png')","9f3a3585":"#float64\u578b\u306e\u5909\u6570\u306b\u306f0\u3092\u3001object\u578b\u306e\u5909\u6570\u306b\u306fNA\u3092\u6b20\u640d\u306b\u4ee3\u5165\nfor col in df1:\n    if df1[col].dtype !='object':\n        df1[col].fillna(0.0, inplace=True)\n    else:\n        df1[col].fillna('NA', inplace=True)\ndf1 = df1._get_numeric_data()\nrandom_frg(df1)","a4826264":"#train data \n#\u8aac\u660e\u5909\u6570\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nTotalBsmtSF= df1['TotalBsmtSF']\nFlrSF1st = df1['1stFlrSF']\nFlrSF2nd = df2['2ndFlrSF']\nBsmtFinSF1 = df1['BsmtFinSF1']\nGarageCars = df1['GarageCars']\nLotArea = df1['LotArea']\nGarageArea = df1['GarageArea']\nYearBuilt = df1['YearBuilt']\nYearRemodAdd = df1['YearRemodAdd']\nGarageYrBlt = df1['GarageYrBlt']\nTotRmsAbvGrd = df1['TotRmsAbvGrd']\nLotFrontage = df1['LotFrontage']\nBsmtUnfSF = df1['BsmtUnfSF']\nWoodDeckSF = df1['WoodDeckSF']\nOpenPorchSF = df1['OpenPorchSF']\nOverallCond = df1['OverallCond']\nFullBath = df1['FullBath']\n#\u76ee\u7684\u5909\u6570\nSalePrice = df1['SalePrice']","cd22ce91":"#\u30c7\u30fc\u30bf\u306e\u62bd\u51fa\ndf3 = pd.concat([OverallQual, GrLivArea, TotalBsmtSF, FlrSF1st, FlrSF2nd, BsmtFinSF1, GarageCars, LotArea, GarageArea, YearBuilt, YearRemodAdd,  GarageYrBlt, TotRmsAbvGrd, LotFrontage, BsmtUnfSF, WoodDeckSF, OpenPorchSF, OverallCond, FullBath, SalePrice], axis=1)\ndf3","49c8cd18":"#salePrice\u3068\u306e\u76f8\u95a2\u3092\u8868\u3059\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\ncorrmat = df3.corr()\ncorr = corrmat.nlargest(18, 'SalePrice')['SalePrice'].index\ncc = np.corrcoef(df1[corr].values.T)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.set(font_scale=2.2)\nsns.heatmap(cc, cbar=True, annot=True, fmt='2f', annot_kws={'size': 8}, yticklabels=corr.values, xticklabels=corr.values)\nplt.show()\nfig.savefig('figure3.png')","8c06c580":"#\u8aac\u660e\u5909\u6570(train)\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nFlrSF2nd = df1['2ndFlrSF']\nGarageArea = df1['GarageArea']\nTotalBsmtSF= df1['TotalBsmtSF']\nYearBuilt = df1['YearBuilt']\nYearRemodAdd = df1['YearRemodAdd']\n#\u8aac\u660e\u5909\u6570(test)\nOverallQual_2 = df2['OverallQual']\nGrLivArea_2 = df2['GrLivArea']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nFlrSF2nd_2 = df2['2ndFlrSF']\nGarageArea_2 = df2['GarageArea']\nYearBuilt_2 = df2['YearBuilt']\nYearRemodAdd_2 = df2['YearRemodAdd']\n#\u76ee\u7684\u5909\u6570\nSalePrice = df1['SalePrice']","c13ae1e7":"#\u30c7\u30fc\u30bf\u306e\u62bd\u51fa(train)\ndf4 = pd.concat([OverallQual, GrLivArea, FlrSF2nd, GarageArea, TotalBsmtSF, YearBuilt, YearRemodAdd, SalePrice], axis=1)\ndf4","cd2fa9e3":"#\u30c7\u30fc\u30bf\u306e\u62bd\u51fa(test)\ndf5 = pd.concat([OverallQual_2, GrLivArea_2, FlrSF2nd_2, GarageArea_2, TotalBsmtSF_2, YearBuilt_2, YearRemodAdd_2], axis=1)\ndf5","f9c3edcc":"#\u6b20\u640d\u306e\u78ba\u8a8d(train)\ndf4.isnull().sum()","3a5d103c":"#\u6b20\u640d\u306e\u78ba\u8a8d(test)\ndf5.isnull().sum()","df173ec2":"df2['GarageArea'] = df2['GarageArea'].fillna(0)\ndf2['TotalBsmtSF'] = df2['TotalBsmtSF'].fillna(0)","ffad7686":"df5 = pd.concat([OverallQual_2, GrLivArea_2, FlrSF2nd_2, GarageArea_2, TotalBsmtSF_2, YearBuilt_2, YearRemodAdd_2], axis=1)\ndf5.isnull().sum()","726d0b51":"#\u8aac\u660e\u5909\u6570\u306e\u7d71\u8a08\u91cf\ndf4.describe()","9228832d":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['OverallQual'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('OverallQual', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('OverallQual', fontsize=15)\nplt.show()","3e6da5be":"#\u5916\u308c\u5024\u304cOverallQual=10,SalePrice<200000\u3068\u3059\u308b\u3002\ndf1 = df1.drop(df1[(df1['OverallQual'] == 10) & (df1['SalePrice'] < 200000)].index)\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['OverallQual'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('OverallQual', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('OverallQual', fontsize=15)\nplt.show()","c6e9d368":"sns.distplot(df1['2ndFlrSF'])","b941ebc4":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['2ndFlrSF'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('2ndFlrSF', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('2ndFlrSF', fontsize=15)\nplt.show()","1d7960e9":"sns.distplot(df1['GarageArea'])","0221e161":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['GarageArea'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('GarageArea', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('GarageArea', fontsize=15)\nplt.show()","718473bf":"#GarageArea>1200, SalePrice<300000\u3092\u5916\u308c\u5024\u3068\u8003\u3048\u308b\ndf1 = df1.drop(df1[(df1['GarageArea'] > 1200) & (df1['SalePrice'] < 300000)].index)\nfig, ax = plt.subplots(figsize=(15,15))\nx=df1['GarageArea'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('GarageArea', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('GarageArea', fontsize=15)\nplt.show()","8cf5f691":"sns.distplot(df1['TotalBsmtSF'])","5fafdcde":"fig, ax = plt.subplots(figsize=(15,15))\nx=df1['TotalBsmtSF'].values\ny=df1['SalePrice'].values\nplt.scatter(x, y)\nplt.xlabel('TotalBsmtSF', fontsize=15)\nplt.ylabel('SalePrice', fontsize=15)\nplt.title('TotalBsmtSF', fontsize=15)\nplt.show()","b5574020":"plt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='YearBuilt',y='SalePrice',data=df1)","b3d2eba8":"#YearBuilt<2000,SalePrice>600000\u3092\u5916\u308c\u5024\u3068\u8003\u3048\u308b\u3002\ndf1 = df1.drop(df1[(df1['YearBuilt']<2000) & (df1['SalePrice']>600000)].index)\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='YearBuilt',y='SalePrice',data=df1)","47816f94":"plt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x='YearRemodAdd',y='SalePrice',data=df1)","dfdfab53":"#\u8aac\u660e\u5909\u6570(train)\nOverallQual = df1['OverallQual']\nGrLivArea = df1['GrLivArea']\nFlrSF2nd = df1['2ndFlrSF']\nGarageArea = df1['GarageArea']\nTotalBsmtSF= df1['TotalBsmtSF']\nYearBuilt = df1['YearBuilt']\nYearRemodAdd = df1['YearRemodAdd']\ndf4 = pd.concat([OverallQual, GrLivArea, FlrSF2nd, GarageArea, TotalBsmtSF, YearBuilt, YearRemodAdd], axis=1)\n#\u8aac\u660e\u5909\u6570(test)\nOverallQual_2 = df2['OverallQual']\nGrLivArea_2 = df2['GrLivArea']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nFlrSF2nd_2 = df2['2ndFlrSF']\nGarageArea_2 = df2['GarageArea']\nYearBuilt_2 = df2['YearBuilt']\nYearRemodAdd_2 = df2['YearRemodAdd']\ndf5 = pd.concat([OverallQual_2, GrLivArea_2, FlrSF2nd_2, GarageArea_2, TotalBsmtSF_2, YearBuilt_2, YearRemodAdd_2], axis=1)","0138f356":"#train data, test data, \u76ee\u7684\u5909\u6570\u306e3\u3064\u306b\u5206\u3051\u308b\ntrain_data = df4.values\ntest_data = df5.values\ntarget = df1['SalePrice'].values","6490636a":"#\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\ntree_1 = tree.DecisionTreeClassifier()\ntree_1 = tree_1.fit(train_data, target)","b3a3adfa":"#test data\u306e\u8aac\u660e\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u4e88\u6e2c\nprediction_1 = tree_1.predict(test_data)\n#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d\nprediction_1.shape","6d6cda07":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\nprint(prediction_1)","77772a0e":"ID_0 = np.array(df2['Id']).astype(int)\nsolution = pd.DataFrame(prediction_1, ID_0, columns = ['SalePrice'])","22103734":"solution.to_csv('tree3.csv', index_label = ['Id'])","db265322":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nprint(solution)","2f698ed1":"#train data\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\nsns.distplot(df1['SalePrice'])\nplt.show()\nsns.distplot(solution)\nplt.show()","a4b8e0d1":"train_X = df4\ntrain_y = df1['SalePrice']\nrf = RandomForestRegressor()\n#feature importance\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d\ntree_1 = tree.DecisionTreeClassifier(random_state=0)\ntree_1 = tree_1.fit(train_X, train_y)\nrank = np.argsort(-tree_1.feature_importances_)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.barplot(x=tree_1.feature_importances_[rank], y=train_X.columns.values[rank], orient='h')\nplt.title('Feature Importance')\nplt.tight_layout()\nplt.show()","452907ea":"#\u4e88\u6e2c\u7d50\u679c\u7b97\u51fa\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nX = df4\nY = df1['SalePrice']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=60)\n\ntree_1 = DecisionTreeRegressor(max_depth=6, random_state=60)\ntree_1 = tree_1.fit(X_train, Y_train)\n\nprint('train:', tree_1.score(X_train, Y_train))\nprint('test:', tree_1.score(X_test, Y_test))","d42da14d":"#\u8aac\u660e\u5909\u6570(train)\nGrLivArea = df1['GrLivArea']\nGarageArea = df1['GarageArea']\nTotalBsmtSF= df1['TotalBsmtSF']\nYearBuilt = df1['YearBuilt']\nYearRemodAdd = df1['YearRemodAdd']\nFlrSF2nd = df1['2ndFlrSF']\ndf6 = pd.concat([GrLivArea, GarageArea, TotalBsmtSF, YearBuilt, YearRemodAdd, FlrSF2nd], axis=1)\n#\u8aac\u660e\u5909\u6570(test)\nGrLivArea_2 = df2['GrLivArea']\nTotalBsmtSF_2 = df2['TotalBsmtSF']\nGarageArea_2 = df2['GarageArea']\nYearBuilt_2 = df2['YearBuilt']\nYearRemodAdd_2 = df2['YearRemodAdd']\nFlrSF2nd_2 = df2['2ndFlrSF']\ndf7 = pd.concat([GrLivArea_2, GarageArea_2, TotalBsmtSF_2, YearBuilt_2, YearRemodAdd_2, FlrSF2nd_2], axis=1)","3502cfb1":"#train data, test data, \u76ee\u7684\u5909\u6570\u306e3\u3064\u306b\u5206\u3051\u308b\ntrain_data = df6.values\ntest_data = df7.values\ntarget = df1['SalePrice'].values","0a944875":"#\u6c7a\u5b9a\u6728\u7cfb\u306e\u30e2\u30c7\u30eb\u3092\u5229\u7528\ntree_2 = tree.DecisionTreeClassifier()\ntree_2 = tree_1.fit(train_data, target)","29eea29a":"#test data\u306e\u8aac\u660e\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u4e88\u6e2c\nprediction_2 = tree_2.predict(test_data)\n#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u78ba\u8a8d\nprediction_2.shape","ab25454e":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\nprint(prediction_2)","1ae4b20e":"ID_1 = np.array(df2['Id']).astype(int)\nsolution_1 = pd.DataFrame(prediction_2, ID_1, columns = ['SalePrice'])\nsolution_1.to_csv('tree4.csv', index_label = ['Id'])","2db6f421":"#\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nprint(solution_1)","5a98a790":"#train data\u3068\u4e88\u6e2c\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\nsns.distplot(df1['SalePrice'])\nplt.show()\nsns.distplot(solution_1)\nplt.show()","932238b0":"train_x = df6\ntrain_y = df1['SalePrice']\nrf = RandomForestRegressor()\n#feature importance\u3067\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d\ntree_2 = tree.DecisionTreeClassifier(random_state=0)\ntree_2 = tree_2.fit(train_x, train_y)\nrank = np.argsort(-tree_2.feature_importances_)\nfig, ax = plt.subplots(figsize=(15,15))\nsns.barplot(x=tree_2.feature_importances_[rank], y=train_x.columns.values[rank], orient='h')\nplt.title('Feature Importance')\nplt.tight_layout()\nplt.show()","d420b75b":"#\u4e88\u6e2c\u7d50\u679c\u7b97\u51fa\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nx = df6\ny = df1['SalePrice']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state=60)\n\ntree_2 = DecisionTreeRegressor(max_depth=6, random_state=60)\ntree_2 = tree_2.fit(x_train, y_train)\n\nprint('train:', tree_2.score(x_train, y_train))\nprint('test:', tree_2.score(x_test, y_test))","e2740b06":"\u76f8\u95a2\u4fc2\u6570\u304c0.5\u4ee5\u4e0a\u306e\u5909\u6570\n* OverallQual\n* GrLivArea\n* 2ndFlrSF\n* GarageArea\n* TotalBsmtSF\n* YearBuilt\n* YearRemodAdd","45b84d32":"# \u53ef\u8996\u5316","1ed6ddfa":"\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u30b0\u30e9\u30d5\u306e\u4e2d\u304b\u3089\u3001OverallQual, GrLivArea, TotalBsmtSF, 2ndFlrSF, BsmtFinSF1, GarageCars, 1stFlrSF, LotArea, GarageArea, YearBuilt, YearRemodAdd, GarageYrBlt, TotRmsAbvGrd, LotFrontage, BsmtUnfSF, WoodDeckSF, OpenPorchSF, OverallCond, FullBath\u306e\u5909\u6570\u3092\u53d6\u308a\u51fa\u3059\u3002\u3053\u3053\u304b\u3089\u8aac\u660e\u5909\u6570\u3092\u9078\u629e\u3059\u308b\u3002","4a4e047d":"* GarageArea","3d996bab":"* YearBuilt","5cd9c7b5":"* GarageArea, TotalBsmtSF\u306f\u5909\u6570\u306e\u610f\u5473\u304b\u3089\u63a8\u6e2c\u3059\u308b\u306b\u6b20\u640d\u5024\u306e\u30c7\u30fc\u30bf\u306f\u305d\u306e\u5bb6\u306b\u5b58\u5728\u3057\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3068\u4e88\u60f3\u3002\u3088\u3063\u3066\u6b20\u640d\u5024\u306b\u306f\uff10\u3092\u4ee3\u5165\u3059\u308b\u3002","a7d1b855":"\u5909\u6570\u306e\u610f\u5473\n* OverallQual\uff1a\u54c1\u8cea\n* GrLivArea\uff1a\u5730\u4e0a\u306e\u30ea\u30d3\u30f3\u30b0\u306e\u5e83\u3055\n* TotalBsmtSF\uff1a\u5730\u4e0b\u306e\u5408\u8a08\u9762\u7a4d\n* 2ndFlrSF\uff1a\uff12\u968e\u306e\u5e83\u3055\n* BsmtFinSF1\uff1a\u5730\u4e0b\u5ba4\u306e\u30bf\u30a4\u30d7\uff11\u306e\u4ed5\u4e0a\u3052\u6e08\u307f\u306e\u5e83\u3055\n* GarageCars\uff1a\u30ac\u30ec\u30fc\u30b8\u306b\u53ce\u5bb9\u3067\u304d\u308b\u8eca\u306e\u53f0\u6570\n* 1stFlrSF\uff1a\uff11\u968e\u306e\u5e83\u3055\n* LotArea\uff1a\u30ed\u30c3\u30c8\u306e\u5927\u304d\u3055\n* GarageArea\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u5e83\u3055\n* YearBuilt\uff1a\u5efa\u3066\u3089\u308c\u305f\u5e74\n* YearRemodAdd\uff1a\u6539\u7bc9\u3055\u308c\u305f\u5e74\n* GarageYrBlt\uff1a\u30ac\u30ec\u30fc\u30b8\u306e\u3067\u304d\u305f\u5e74\n* TotRmsAbvGrd\uff1a\u5730\u4e0a\u306e\u90e8\u5c4b\u306e\u5408\u8a08\n* LotFrontage\uff1a\u5bb6\u3068\u96a3\u63a5\u3057\u3066\u3044\u308b\u9053\u8def\u306e\u9577\u3055\n* BsmtUnfSF\uff1a\u672a\u5b8c\u6210\u306e\u5730\u4e0b\u5ba4\u306e\u5e83\u3055\n* WoodDeckSF\uff1a\u30a6\u30c3\u30c9\u30c7\u30c3\u30ad\u306e\u5e83\u3055\n* OpenPorchSF\uff1a\u30aa\u30fc\u30d7\u30f3\u30dd\u30fc\u30c1\u306e\u5927\u304d\u3055\n* OverallCond\uff1a\u5168\u4f53\u306e\u8a55\u4fa1\n* FullBath\uff1a\u30d0\u30b9\u30eb\u30fc\u30e0\u306e\u500b\u6570","64a5a173":"# \u30e2\u30c7\u30eb\u69cb\u7bc9","b9cf2323":"* SalePrice","417eeb8a":"* 2ndFlrSF","044fb978":"# \u524d\u51e6\u7406","70c674d7":"* \u8aac\u660e\u5909\u6570\u306e\u9078\u629e","0fb0a17d":"* YearRemodAdd","e828d819":"* OverallQual\u306e\u91cd\u8981\u5ea6\u304c\u4e00\u756a\u4f4e\u304b\u3063\u305f\u306e\u3067\u8aac\u660e\u5909\u6570\u3068\u8003\u3048\u305a\u306b\u30e2\u30c7\u30eb\u69cb\u7bc9\u3092\u884c\u3046","67086928":"* \u30c7\u30fc\u30bf\u306e\u7d50\u5408","b20c256c":"* \u5148\u307b\u3069\u884c\u3063\u305f\u7d50\u679c\u304b\u3089FullBath, GarageCars\u306e\u91cd\u8981\u5ea6\u304c\u4f4e\u3044\u306e\u3067\u8aac\u660e\u5909\u6570\u3068\u3057\u3066\u8003\u3048\u306a\u3044\u3002\n* TotRmsAbvGrd, 1stFlrSF\u306e2\u3064\u306e\u5909\u6570\u306f\u591a\u91cd\u5171\u7dda\u6027\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u8aac\u660e\u5909\u6570\u3068\u306f\u8003\u3048\u306a\u3044\u3002\n* \u307e\u305f\u3001SalePrice\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c0.5\u4ee5\u4e0a\u306e\u5909\u6570\u3092\u8aac\u660e\u5909\u6570\u3068\u8003\u3048\u308b\u3002","6eb30615":"* TotalBsmtSF","e0ba776d":"* OverallQual"}}