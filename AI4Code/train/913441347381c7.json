{"cell_type":{"a7847baf":"code","b6437e4b":"code","17aa9342":"code","47f12bc1":"code","23a9a9db":"code","8d6aa05b":"code","3e242e0b":"code","5e46bc09":"code","753d3e15":"code","92958ebb":"code","f9dd9805":"code","68e10d81":"code","0f445e87":"code","84bc811a":"code","b286298b":"markdown","338d8d95":"markdown","2aacfe29":"markdown","cebd2085":"markdown"},"source":{"a7847baf":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n## for statistical tests\nimport scipy\nimport statsmodels.formula.api as smf\nimport statsmodels.api as sm\n\n# Loading Data \ntrain = pd.read_csv('..\/input\/placecom-challenge-btds\/train_data.csv')\ntest = pd.read_csv('..\/input\/placecom-challenge-btds\/test_data.csv')\noverall = pd.DataFrame()\noverall = overall.append((test,train))\noverall.info()","b6437e4b":"def utils_recognize_type(dt, col, max_cat=20):\n    if (dt[col].dtype == \"O\") | (dt[col].nunique() < max_cat):\n        return \"cat\"\n    else:\n        return \"num\"\n    \ndic_cols = {col:utils_recognize_type(overall, col, max_cat=20) for col in overall.columns}\nheatmap = overall.isnull()\nfor k,v in dic_cols.items():\n    if v == \"num\":\n        heatmap[k] = heatmap[k].apply(lambda x: 0.5 if x is False else 1)\n    else:\n        heatmap[k] = heatmap[k].apply(lambda x: 0 if x is False else 1)\n\nsns.heatmap(heatmap, cbar=False).set_title('Dataset Overview')\nplt.show()\nprint(\"\\033[1;37;40m Categerocial \", \"\\033[1;30;41m Numeric \", \"\\033[1;30;47m NaN \")","17aa9342":"y = overall[\"education\"].dropna().value_counts()\nlab = [\"Bachelor's\",\"Master's & above\", \"Below Secondary\"]\n\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99',\"#AD9AEB\"]\nfig1, ax1 = plt.subplots()\nax1.pie(y, labels=lab, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.title(\"Overall Education Status\\n\")\nplt.show()","47f12bc1":"y = overall[\"recruitment_channel\"].value_counts()\nlab = [\"other\",\"sourcing\",\"referred\"]\n\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99',\"#AD9AEB\"]\nfig1, ax1 = plt.subplots()\nax1.pie(y, labels=lab, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.title(\"Recruitment Channel\\n\")\nplt.show()","23a9a9db":"y = overall[\"previous_year_rating\"].value_counts()\nlab = y.keys().to_list()\n\ncolors = ['#ff9999','#66b3ff','#99ff99','#ffcc99',\"#AD9AEB\"]\nfig1, ax1 = plt.subplots()\nax1.pie(y, labels=lab, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')\nplt.tight_layout()\nplt.title(\"Previous Year Ratings\\n\")\nplt.show()","8d6aa05b":"fig=plt.figure(figsize=(15,10))\nax=fig.gca()\noverall.hist(ax=ax)\nplt.show()","3e242e0b":"boxplot = overall[['age', 'avg_training_score']].boxplot(figsize=(8,6))\nplt.xticks(rotation=90)\nplt.show()","5e46bc09":"boxplot = overall[['length_of_service']].boxplot(figsize=(8,6))\nplt.xticks(rotation=90)\nplt.show()","753d3e15":"cat, num = \"length_of_service\", 'is_promoted'\nmodel = smf.ols(num+' ~ '+cat, data=train).fit()\ntable = sm.stats.anova_lm(model)\np = table[\"PR(>F)\"][0]\ncoeff, p = None, round(p, 3)\nconclusion = \"Correlated\" if p < 0.05 else \"Non-Correlated\"\nprint(\"Anova F: the variables \",cat,\"and\", num,\" are\", conclusion, \"(p-value: \"+str(p)+\")\")","92958ebb":"cat, num = \"age\", 'is_promoted'\nmodel = smf.ols(num+' ~ '+cat, data=train).fit()\ntable = sm.stats.anova_lm(model)\np = table[\"PR(>F)\"][0]\ncoeff, p = None, round(p, 3)\nconclusion = \"Correlated\" if p < 0.05 else \"Non-Correlated\"\nprint(\"Anova F: the variables \",cat,\"and\", num,\" are\", conclusion, \"(p-value: \"+str(p)+\")\")","f9dd9805":"cat, num = \"no_of_trainings\", 'is_promoted'\nmodel = smf.ols(num+' ~ '+cat, data=train).fit()\ntable = sm.stats.anova_lm(model)\np = table[\"PR(>F)\"][0]\ncoeff, p = None, round(p, 3)\nconclusion = \"Correlated\" if p < 0.05 else \"Non-Correlated\"\nprint(\"Anova F: the variables \",cat,\"and\", num,\" are\", conclusion, \"(p-value: \"+str(p)+\")\")","68e10d81":"corr_matrix = train.corr(method=\"pearson\")\nsns.heatmap(corr_matrix, vmin=-1., vmax=1., annot=True, fmt='.2f', cmap=\"YlGnBu\", cbar=True, linewidths=0.5)\nplt.title(\"Pearson Correlation\")","0f445e87":"# Encoding all the categorical fields\n\noverall_temp = train\n\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\noverall_temp['education']=le.fit_transform(overall_temp['education'])\noverall_temp['region']=le.fit_transform(overall_temp['region'])\noverall_temp['department']=le.fit_transform(overall_temp['department'])\noverall_temp['gender']=le.fit_transform(overall_temp['gender'])\noverall_temp['recruitment_channel']=le.fit_transform(overall_temp['recruitment_channel'])\noverall_temp['previous_year_rating']=le.fit_transform(overall_temp['previous_year_rating'])\noverall_temp['awards_won?']=le.fit_transform(overall_temp['awards_won?'])\n\noverall_temp = overall_temp.drop(['employee_id'], axis = 1)\noverall_temp.head()","84bc811a":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif['VIF']=[variance_inflation_factor(overall_temp.drop(['is_promoted'], axis = 1).values,i) for i in range(overall_temp.drop(['is_promoted'], axis = 1).shape[1])]\nvif['Features']=overall_temp.drop(['is_promoted'], axis = 1).columns\nvif.sort_values('VIF',ascending=False)","b286298b":"The VIF test statistic tells us wheter or not a predictor is correlated to other variables, a predictor with VIF test statistic = 1 is not correlated to other parameters.\n","338d8d95":"All the missing values in the is_promoted column come from the test data and hence can be ignored for now","2aacfe29":"Using One Way Anova Test (for numeric variables) as well as  Pearson's Correlation Coefficient Test (for categorical variables) to see if any variables are correlated.\n","cebd2085":"# An overview of the entire dataset "}}