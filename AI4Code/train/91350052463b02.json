{"cell_type":{"994aaaac":"code","d4c1cd5a":"code","da3c1134":"code","867cb1c5":"code","173e1959":"code","742c2500":"code","30bd5ae9":"markdown","32146bfe":"markdown","4c4337d4":"markdown","a1c47510":"markdown","803e8bcc":"markdown","6fdbd6ea":"markdown"},"source":{"994aaaac":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Function For Plotting Images\ndef plot(img):\n    plt.axis(\"off\")\n    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)) #Since Opencv store image as BGR\n    plt.show()","d4c1cd5a":"original=cv2.imread('\/kaggle\/input\/natural-images\/data\/natural_images\/person\/person_0097.jpg')\nplot(original)\nedges=cv2.Canny(original,50,100) # 50 and 100 are min and max thresholds respectively. \nplot(edges)","da3c1134":"original=cv2.imread('\/kaggle\/input\/four-shapes\/shapes\/triangle\/958.png')\nplot(original)\nedges = cv2.Canny(original,50,150) # Hough transforms requires binary image as input\nlines = cv2.HoughLines(edges,1,np.pi\/180,50) # 50 is the threshold value\nfor line in lines:\n    rho,theta=line[0]\n    a = np.cos(theta)\n    b = np.sin(theta)\n    x0 = a*rho\n    y0 = b*rho\n    x1 = int(x0 + 1000*(-b))\n    y1 = int(y0 + 1000*(a))\n    x2 = int(x0 - 1000*(-b))\n    y2 = int(y0 - 1000*(a))\n    cv2.line(original,(x1,y1),(x2,y2),(0,0,255),2)\nplot(original)","867cb1c5":"original=cv2.imread('\/kaggle\/input\/natural-images\/data\/natural_images\/person\/person_0505.jpg')\ngray = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY) \ngray_blurred = cv2.blur(gray, (3, 3)) \nplot(original)\ndetected_circles = cv2.HoughCircles(gray_blurred,  \n                   cv2.HOUGH_GRADIENT, 1, 20, param1 = 50, \n               param2 = 30, minRadius = 1, maxRadius = 40) \nif detected_circles is not None: \n  \n    # Convert the circle parameters a, b and r to integers. \n    detected_circles = np.uint16(np.around(detected_circles)) \n  \n    for pt in detected_circles[0, :]: \n        a, b, r = pt[0], pt[1], pt[2] \n  \n        # Draw the circumference of the circle. \n        cv2.circle(original, (a, b), r, (0, 255, 0), 2) \n  \n        # Draw a small circle (of radius 1) to show the center. \n        cv2.circle(original, (a, b), 1, (0, 0, 255), 3) \nplot(original)","173e1959":"original = cv2.imread('\/kaggle\/input\/four-shapes\/shapes\/star\/591.png')\ngray = cv2.cvtColor(original,cv2.COLOR_BGR2GRAY) #Input should be grayscale image\nplot(original) #plot original Image\ngray = np.float32(gray)\n\ncorners = cv2.cornerHarris(gray,2,3,0.04) #detect corners\n\ncorners = cv2.dilate(corners,None)\noriginal[corners>0.2*corners.max()]=[0,0,255]\nplot(original) # Plot detected corners","742c2500":"img = cv2.imread('\/kaggle\/input\/natural-images\/data\/natural_images\/person\/person_0145.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nplot(img) # Plot original image\n\nfast =cv2.FastFeatureDetector_create(threshold=20)\n\nkp = fast.detect(gray,None) \n\nresult = cv2.drawKeypoints(img, kp, None, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\nplot(result) # Plot Detected Corners","30bd5ae9":"## Hough transform to detect circles.","32146bfe":"## Harris and Stephen operator for corner.\nCorners are used as important features of image. Harris Corner Detector is a corner detection operator that is commonly used in computer vision algorithms to extract corners and infer features of an image","4c4337d4":"I have used few basic functions of Opencv ","a1c47510":"## Hough transform to detect lines.\nHough transformation are used to detect many shapes in images if they can be represented mathematically.\nIts main advantage is that it can even detect break or distorted shapes.","803e8bcc":"## FAST corner detector.\nThere are several feature detectors and many of them are really good. But when looking from a real-time application point of view, they are not fast enough.\nFast corner detector comes to rescue here.","6fdbd6ea":"## Canny edge detector\nThe Canny edge detector is an edge detection operator that uses a multi-stage algorithm to detect a wide range of edges in images. It is a very amazing technique for detecting edges."}}