{"cell_type":{"eaae7b91":"code","918a4680":"code","51161f77":"code","cf38a6fc":"code","52e9b923":"code","8d7d6c18":"code","c0f7049e":"code","0f3a665e":"code","37673ba8":"code","0f839d67":"code","2841e7c7":"code","1c3ddd3b":"code","ccacc725":"code","6674d912":"code","4599c3b7":"code","18d485d6":"code","c3ed7a41":"code","780e17cf":"code","351e19d8":"code","f08a37e9":"code","ee4f5503":"code","fc43d0ed":"code","c52b72b4":"code","6968df61":"code","7385fb93":"code","0f641af5":"code","8f4d9d4a":"code","5172a271":"code","27b32791":"code","6c00a97a":"code","90d7cf39":"code","12088bce":"code","82851b1d":"code","62e6ac9d":"code","6f786d48":"code","958813f7":"code","621ae999":"code","4c9f3905":"code","8ad70fe4":"markdown","bb71996b":"markdown","2ea56319":"markdown","47586f41":"markdown","5bc5a502":"markdown","7500e9b7":"markdown","c01ad7b2":"markdown"},"source":{"eaae7b91":"# \u73af\u5883\u51c6\u5907\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","918a4680":"# 0 \u8bfb\u53d6\u8bad\u7ec3\u6570\u636e, \u5e76\u4ece\u4e2d\u63d0\u53d6\u8981\u9884\u6d4b\u7684salePrice.\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","51161f77":"\n# \u67e5\u770b\u6570\u636e\ntrain.head(5)","cf38a6fc":"test.head(5)","52e9b923":"# 1.1 \u4e86\u89e3\u6570\u636e\u96c6\u6574\u4f53\u60c5\u51b5.\uff0c\ntrain.describe()\ntest.describe()","8d7d6c18":"train.info()","c0f7049e":"test.info()","0f3a665e":"# 1.2 \u4e86\u89e3train\u4e0etest\u7684\u5927\u5c0f.\n# train\u6570\u636e\u96c61460\u6761\u6570\u636e, 81\u4e2a\u7279\u5f81.\n# test\u6570\u636e\u96c61459\u6761\u6570\u636e,80\u4e2a\u7279\u5f81.\nprint(\"train-------------------shape\")\nprint(train.shape)\nprint(\"test--------------------shape\")\nprint(test.shape)","37673ba8":"# 1.3 \u4fdd\u5b58\u8981\u9884\u6d4b\u503c\ny = train['SalePrice']\ny","0f839d67":"# 2 \u6e05\u6d17\u6570\u636e\n# \u7f3a\u5931\u5bf9null\u503c\u7684\u5904\u7406\n# \u8bbe\u7f6e\u5904\u7406\u6570\u636e\u7684\u96c6\u5408\u4e3adf_train\u4e0edf_tes","2841e7c7":"# \u5b9a\u4e49\u6e05\u6d17\u6570\u636e\u96c6,\u6e05\u6d17\u5b8c\u540e\u4e3adf...\ndf_train = train.copy()\ndf_test  = test.copy()","1c3ddd3b":"# \u7edf\u8ba1\u7a7a\u503c\ndef df_statistics_null(dfset):\n    total = dfset.isnull().sum().sort_values(ascending=False)\n    percent = (dfset.isnull().sum()\/dfset.shape[0]).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return missing_data","ccacc725":"# \u7edf\u8ba1\u7f3a\u5931\u60c5\u51b5\uff1atrain\u96c6\nmissing_data_train = df_statistics_null(df_train)\nmissing_data_train.head(20)","6674d912":"# \u7edf\u8ba1\u7f3a\u5931\u60c5\u51b5\uff1atest\u96c6\nmissing_data_test = df_statistics_null(df_test)\nmissing_data_test.head(20)","4599c3b7":"# columns where NaN values have meaning e.g. no pool etc.\ncols_fillna = ['PoolQC','MiscFeature','Alley','Fence','MasVnrType','FireplaceQu',\n               'GarageQual','GarageCond','GarageFinish','GarageType', 'Electrical',\n               'KitchenQual', 'SaleType', 'Functional', 'Exterior2nd', 'Exterior1st',\n               'BsmtExposure','BsmtCond','BsmtQual','BsmtFinType1','BsmtFinType2',\n               'MSZoning', 'Utilities']\n\n# replace 'NaN' with 'None' in these columns\nfor col in cols_fillna:\n    df_train[col].fillna('None',inplace=True)\n    df_test[col].fillna('None',inplace=True)\n    \n","18d485d6":"# fillna with mean for the remaining columns: LotFrontage, GarageYrBlt, MasVnrArea\n# \u4e3a\u4ec0\u4e48\u8fd9\u4e24\u4e2a\u53d8\u91cf\u4e0d\u8fdb\u884c\u586bnone\ndf_train.fillna(df_train.mean(), inplace=True)\ndf_test.fillna(df_test.mean(), inplace=True)","c3ed7a41":"a = df_statistics_null(df_test)\na.head(20)","780e17cf":"# 3 \u6316\u6398\u6570\u636e \u5904\u7406\u5b8c\u540e\u7684\u6570\u636e\u96c6\u4e3adf_XX_ml\n# \u6570\u636e\u7684\u5904\u7406\u65b9\u5f0f\u5206\u4e3anumerical\u4e0ecategories\u7684\u5904\u7406\n# 3.1 numerical\u5404\u4e2afeature\u4e4b\u95f4\u76f8\u5173\u6027\ncorrmat = df_train.corr()\nf,ax = plt.subplots(figsize=(20,15))# \u8c03\u8282\u753b\u5e03\u7684\u5927\u5c0f,\u73b0\u5728\u7684\u662f20*15\nsns.heatmap(corrmat, vmax=.8, annot=True)","351e19d8":"# \u8fdb\u4e00\u6b65\u7edf\u8ba1\u51fa\u76f8\u5173\u6027>0.5\u7684features\ncorrmat = df_train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","f08a37e9":"# \u6839\u636e\u4e0a\u9762\u7684\u70ed\u529b\u76f8\u5173\u56fe, \u53ef\u4ee5\u5f97\u51fa: \n# 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'TotalBsmtSF', '1stFlrSF',\n# 'GrLivArea',   'FullBath',  'TotRmsAbvGrd', 'GarageCars',  'GarageArea',\n#  \u8fd910\u4e2afeatures\u4e0esalePrice\u6709\u5f88\u5f3a\u7684\u76f8\u5173\u6027, \u521d\u6b65\u9009\u51fa\u8fd910features\nnumerical_features = top_corr_features[:-1]\nnumerical_features","ee4f5503":"train_num = df_train[numerical_features]\ntrain_num.head(5)","fc43d0ed":"test_num = df_test[numerical_features]","c52b72b4":"# 3.2 categories\u7684features\u5904\u7406\ncategorical_features = df_train.select_dtypes(include=['object']).columns\ncategorical_features","6968df61":"# \u5c06\u5b57\u7b26\u578b\u6570\u636e\u96c6\u8f6c\u6362\u6210\u6570\u503c\u578b\ntrain_cat = df_train[categorical_features]\ntest_cat  = df_test[categorical_features]\nmix       = pd.concat([test_cat,train_cat])\nall_cat   = pd.get_dummies(mix)","7385fb93":"train_cat_ecode = all_cat[-1460:]\ntest_cat_ecode  = all_cat[:1459]","0f641af5":"df_train_ml = pd.concat([train_cat_ecode,train_num],axis=1)#axis=1,\u4e3a\u5217\u5408\u5e76\ndf_test_ml  = pd.concat([test_cat_ecode,test_num],axis=1)","8f4d9d4a":"# 4.0\u521b\u5efa\u6a21\u578b, \u7528\u7b5b\u9009\u51fa\u7684features\u8bad\u7ec3\u6a21\u578b.\nfrom sklearn.linear_model import LinearRegression\nlReg = LinearRegression()\nlReg.fit(df_train_ml,y)","5172a271":"pred = lReg.predict(df_test_ml)\npred","27b32791":"# \u9009\u62e9feature\n# cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\n# df_train = train[cols]\n# df_train.head(5)","6c00a97a":"# \u5206\u79bb\u51fa\u8981\u9884\u6d4b\u7684\u53d8\u91cf\n# y = df_train.SalePrice\n# y.head(5)","90d7cf39":"# \u5207\u5206dateset in train\n# from sklearn.model_selection import cross_val_score, train_test_split\n# X_train, X_test, y_train, y_test = train_test_split(df_train, y, test_size = 0.3, random_state = 0)\n# print(\"X_train : \" + str(X_train.shape))\n# print(\"X_test : \" + str(X_test.shape))\n# print(\"y_train : \" + str(y_train.shape))\n# print(\"y_test : \" + str(y_test.shape))","12088bce":"# # \u5bf9features\u8fdb\u884c\u6b63\u5219\u5316\u5904\u7406\n# from sklearn.preprocessing import StandardScaler\n# sc = StandardScaler()\n# df_train_ml_sc = sc.fit_transform(x_train)\n# df_test_ml_sc = sc.transform(x_test)","82851b1d":"# df_train_ml_sc = pd.DataFrame(df_train_ml_sc)\n# df_test_ml_sc = pd.DataFrame(df_test_ml_sc)","62e6ac9d":"# # model, \u521b\u5efa\u6a21\u578b\n# from sklearn.linear_model import LinearRegression\n# LR = LinearRegression()\n# LR.fit(df_train_ml_sc,y)","6f786d48":"# accuracy = LR.score(X_test, y_test)\n# accuracy","958813f7":"# pred = LR.predict(df_test_ml_sc)\n# # pred = pd.DataFrame(pred)\n# # id = test['Id']\n# # result = pd.concat([id,pred],axis=1)\n# # print(type(pred))\n# # print(type(id))\n# # result.head(5)","621ae999":"# \u63d0\u4ea4\u7b54\u6848\npred.astype(int)\nsubmission = pd.DataFrame()\nsubmission['Id'] = test.Id\nsubmission['SalePrice'] = pred\nsubmission.to_csv('output.csv', index=False)","4c9f3905":"submission.head(5)","8ad70fe4":"# Part 4: \u521b\u5efa\u6a21\u578b","bb71996b":"\u53ef\u4ee5\u770b\u51fatest\u6570\u636e\u4e0etrain\u6570\u636e\u7684\u4e0d\u540c: test\u5c11\u4e86salePrice.","2ea56319":"# Part1 \u6570\u636e\u7edf\u8ba1","47586f41":"# Part 2: \u6e05\u6d17\u6570\u636e","5bc5a502":"\u603b\u7ed3: \u6839\u636e\u4e0a\u9762\u7edf\u8ba1,\u6211\u4eec\u53ef\u4ee5\u5927\u81f4\u4e86\u89e3\u5230\u8fd9\u4e2a\u6570\u636e\u96c6\u4e2dtrain\u67091460\u6761\u6570\u636e,\u6bcf\u6761\u670981\u4e2a\u7279\u5f81,test\u5219\u4e3a1459*80. \u5176\u4e2d81\u4e2afeatures\u53c8\u53ef\u4ee5\u5206\u4e3a\u6570\u503c\u578b\u4e0e\u5b57\u7b26\u578b(object\u7c7b\u578b)","7500e9b7":"\u91cd\u65b0\u6392\u7248    \n\u6570\u636e\u7edf\u8ba1-->\u6570\u636e\u6e05\u6d17-->\u6570\u636e\u6316\u6398    \n\u8fd9\u5176\u4e2d\u7684\u903b\u8f91\u662f:\u7edf\u8ba1\u53caEDA\u53ef\u4ee5\u77e5\u9053\u6570\u636e\u7684\u5927\u6982\u60c5\u51b5,\u8fd9\u6837\u4e0b\u4e00\u6b65\u5c31\u53ef\u4ee5\u6e05\u6d17\u6570\u636e, \u7136\u540e\u662f\u6316\u6398\u51fa\u6709\u7528\u7684features.\n\n","c01ad7b2":"# Part 3: \u6316\u6398\u6570\u636e"}}