{"cell_type":{"70e67dc1":"code","2e1b013f":"code","5ebf1c79":"code","9d54bd2a":"code","9166dfbe":"code","2c64c914":"code","1f2e4700":"code","3897f1c3":"code","b639e26f":"code","c5947d6f":"code","d6f6250e":"code","0292e931":"code","c03173ee":"code","7f69e6a0":"code","3cc60324":"code","fc77b1f8":"code","be5edb19":"code","d127f235":"code","d47d45a3":"code","8d86aba7":"code","94b10377":"code","d4e75db1":"code","6ae8b91b":"code","eaa0981b":"code","6662e787":"code","91e24854":"code","f704242e":"code","ba02e7aa":"code","b0359045":"markdown","c9f1bce6":"markdown","a5469227":"markdown","88c2029c":"markdown","f4fe0d6d":"markdown","f710eb85":"markdown","063bea8e":"markdown","469f7e55":"markdown","505fe492":"markdown","a26973a2":"markdown","4ed70293":"markdown","d915b246":"markdown","5065d936":"markdown","65d8b7af":"markdown","92e8a6da":"markdown","9fb06897":"markdown","d52098dc":"markdown","3e840ab1":"markdown","16c115bc":"markdown"},"source":{"70e67dc1":"import pandas as pd\n\nimport plotly.express as px\n\nimport plotly.graph_objects as go\n\nfrom plotly.subplots import make_subplots\n\nimport plotly.figure_factory as ff","2e1b013f":"#df=pd.read_csv('netflix_titles.csv')\n#df.head()\n\ndf = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","5ebf1c79":"df.info()","9d54bd2a":"df.isnull().sum()","9166dfbe":"df.shape","2c64c914":"df.nunique()","1f2e4700":"df=df.dropna(how='any',subset=['cast','director'])","3897f1c3":"#put 'missing' in place of na\n\ndf['country'].fillna('Missing',inplace=True)\ndf['date_added'].fillna('Missing',inplace=True)\ndf['rating'].fillna('Missing',inplace=True)\n\n#check null values\ndf.isnull().sum().sum()","b639e26f":"df['date_added'].head()","c5947d6f":"# converting to proper datetime format\n# adding two more additional columns year_added and month_added\n\ndf['date_added']=pd.to_datetime(df['date_added'])\ndf['date_added'].head()","d6f6250e":"df['year_added']=df['date_added'].dt.year\ndf['year_added'].head()","0292e931":"df['month_added']=df['date_added'].dt.month\ndf['month_added'].head()","c03173ee":"## finding  no of seasons from duration and extracting\n\ndf['season_count']=df.apply(lambda x: x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\" , axis=1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)","7f69e6a0":"# replacing listed_in column by genre\n\ndf=df.rename(columns={'listed_in':'genre'})\ndf['genre'] = df['genre'].apply(lambda x: x.split(\",\")[0])\ndf.head()","3cc60324":"df.describe(include='O')","fc77b1f8":"# Heatmap\n# Correlation between the feature show with the help of visualisation\ncorrs = df.corr()\nfig_heatmap = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\nfig_heatmap.update_layout(title= 'Correlation of whole Data',  \n                          plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                          title_font=dict(size=25, color='#a5a7ab', family=\"Muli, sans-serif\"),\n                          font=dict(color='#8a8d93'))","be5edb19":"fig_donut = px.pie(df, names='type', height=300, width=600, hole=0.7,\n\ntitle='Most watched on Netflix',\n\ncolor_discrete_sequence=['#b20710', '#221f1f'])\n\nfig_donut.update_traces(hovertemplate=None, textposition='outside',\n\ntextinfo='percent+label', rotation=90)\n\nfig_donut.update_layout(margin=dict(t=60, b=30, l=0, r=0), showlegend=False,\n\nplot_bgcolor='#333', paper_bgcolor='#333',\n\ntitle_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n\nfont=dict(size=17, color='#8a8d93'),\n\nhoverlabel=dict(bgcolor=\"#444\", font_size=13,\n\nfont_family=\"Lato, sans-serif\"))","d127f235":"df_rating = pd.DataFrame(df['rating'].value_counts()).reset_index().rename(columns={'index':'rating','rating':'count'})\n\nfig_bar = px.bar(df_rating, y='rating', x='count', title='Distribution of Rating',\n\ncolor_discrete_sequence=['#b20710'], text='count')\n\nfig_bar.update_xaxes(showgrid=False)\n\nfig_bar.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\n\nfig_bar.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\n\nfig_bar.update_layout(margin=dict(t=80, b=0, l=70, r=40),\n\nhovermode=\"y unified\",\n\nxaxis_title=' ', yaxis_title=\" \", height=400,\n\nplot_bgcolor='#333', paper_bgcolor='#333',\n\ntitle_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n\nfont=dict(color='#8a8d93'),\n\nlegend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n\nhoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\")) ","d47d45a3":"# making a copy of df\ndff = df.copy()\n# making 2 df one for tv show and another for movie with rating \ndf_tv_show = dff[dff['type']=='TV Show'][['rating', 'type']].rename(columns={'type':'tv_show'})\ndf_movie = dff[dff['type']=='Movie'][['rating', 'type']].rename(columns={'type':'movie'})\ndf_tv_show = pd.DataFrame(df_tv_show.rating.value_counts()).reset_index().rename(columns={'index':'tv_show'})\ndf_tv_show['rating_final'] = df_tv_show['rating'] \n# making rating column value negative\ndf_tv_show['rating'] *= -1\ndf_movie = pd.DataFrame(df_movie.rating.value_counts()).reset_index().rename(columns={'index':'movie'})","8d86aba7":"fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_yaxes=True, horizontal_spacing=0)\n# bar plot for tv shows\nfig.append_trace(go.Bar(x=df_tv_show.rating, y=df_tv_show.tv_show, orientation='h', showlegend=True, \n                        text=df_tv_show.rating_final, name='TV Show', marker_color='#221f1f'), 1, 1)\n# bar plot for movies\nfig.append_trace(go.Bar(x=df_movie.rating, y=df_movie.movie, orientation='h', showlegend=True, text=df_movie.rating,\n                        name='Movie', marker_color='#b20710'), 1, 2)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(title='Which has the highest rating TV shows or Movies?',\n                  margin=dict(t=80, b=0, l=70, r=40),\n                  hovermode=\"y unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                  hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))\nfig.add_annotation(dict(x=0.81, y=0.6, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"97% people prefer Movies over TV Shows on Netflix.\"\n                  ))\nfig.add_annotation(dict(x=0.2, y=0.2, ax=0, ay=0,\n                    xref = \"paper\", yref = \"paper\",\n                    text= \"3% people prefer TV Shows on Netflix.\"\n                  ))","94b10377":"fig = make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_yaxes=True, horizontal_spacing=0)\n# bar plot for tv shows\nfig.append_trace(go.Bar(x=df_tv_show.rating, y=df_tv_show.tv_show, orientation='h', showlegend=True, \n                        text=df_tv_show.rating_final, name='TV Show', marker_color='#221f1f'), 1, 1)\n# bar plot for movies\nfig.append_trace(go.Bar(x=df_movie.rating, y=df_movie.movie, orientation='h', showlegend=True, text=df_movie.rating,\n                        name='Movie', marker_color='#b20710'), 1, 2)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig.update_layout(title='Which has the highest rating TV shows or Movies?',\n                  margin=dict(t=80, b=0, l=70, r=40),\n                  hovermode=\"y unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1, xanchor=\"center\", x=0.5),\n                  hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))\n","d4e75db1":"df_month = pd.DataFrame(df.month_added.value_counts()).reset_index().rename(columns={'index':'month','month_added':'count'})\n# converting month number to month name\ndf_month['month_final'] = df_month['month'].replace({1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May', 6:'June', 7:'July', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'})\ndf_month[:2]","6ae8b91b":"fig_month = px.funnel(df_month, x='count', y='month_final', title='Best month for releasing Content',\n                      height=350, width=600, color_discrete_sequence=['#b20710'])\nfig_month.update_xaxes(showgrid=False, ticksuffix=' ', showline=True)\nfig_month.update_traces(hovertemplate=None, marker=dict(line=dict(width=0)))\nfig_month.update_layout(margin=dict(t=60, b=20, l=70, r=40),\n                        xaxis_title=' ', yaxis_title=\" \",\n                        plot_bgcolor='#333', paper_bgcolor='#333',\n                        title_font=dict(size=25, color='#8a8d93', family=\"Lato, sans-serif\"),\n                        font=dict(color='#8a8d93'),\n                        hoverlabel=dict(bgcolor=\"black\", font_size=13, font_family=\"Lato, sans-serif\"))","eaa0981b":"df_genre = pd.DataFrame(df.genre.value_counts()).reset_index().rename(columns={'index':'genre', 'genre':'count'})\nfig_tree = px.treemap(df_genre, path=[px.Constant(\"Distribution of Geners\"), 'count','genre'])\nfig_tree.update_layout(title='Highest watched Geners on Netflix',\n                  margin=dict(t=50, b=0, l=70, r=40),\n                  plot_bgcolor='#333', paper_bgcolor='#333',\n                  title_font=dict(size=25, color='#fff', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'),\n                  hoverlabel=dict(bgcolor=\"#444\", font_size=13, font_family=\"Lato, sans-serif\"))","6662e787":"d2 = df[df[\"type\"] == \"Movie\"]\nd2[:2]","91e24854":"col ='year_added'\n\nvc2 = d2[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\n\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\n\nvc2 = vc2.sort_values(col)\n\nvc2[:3]","f704242e":"fig1 = go.Figure(go.Waterfall(\n    name = \"Movie\", orientation = \"v\", \n    x = vc2['year_added'].values,\n    textposition = \"auto\",\n    text = [\"1\", \"2\", \"1\", \"13\", \"3\", \"6\", \"14\", \"48\", \"204\", \"743\", \"1121\", \"1366\", \"1228\", \"84\"],\n    y = [1, 2, -1, 13, -3, 6, 14, 48, 204, 743, 1121, 1366, -1228, -84],\n    connector = {\"line\":{\"color\":\"#b20710\"}},\n    increasing = {\"marker\":{\"color\":\"#b20710\"}},\n    decreasing = {\"marker\":{\"color\":\"orange\"}},\n))\nfig1.show()","ba02e7aa":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\ncol = \"year_added\"\nvc1 = d1[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\nvc2 = d2[col].value_counts().reset_index().rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\ntrace1 = go.Scatter(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"orange\"), )\ntrace2 = go.Scatter(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"#b20710\"))\ndata = [trace1, trace2]\nfig_line = go.Figure(data)\nfig_line.update_traces(hovertemplate=None)\nfig_line.update_xaxes(showgrid=False)\nfig_line.update_yaxes(showgrid=False)\nlarge_title_format = 'Tv Show and Movies impact over the Year'\nsmall_title_format = \"Due to Covid updatation of content is slowed.\" \nfig_line.update_layout(title=large_title_format + \" \" + small_title_format, \n    height=400, margin=dict(t=130, b=0, l=70, r=40), \n    hovermode=\"x unified\", xaxis_title=' ', \n    yaxis_title=\" \", plot_bgcolor='#333', paper_bgcolor='#333', \n    title_font=dict(size=25, color='#8a8d93',\n    family=\"Lato, sans-serif\"),\n    font=dict(color='#8a8d93'),\n    legend=dict(orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1,\n    xanchor=\"center\",\n    x=0.5)) \nfig_line.add_annotation(dict\n    (x=0.8, \n    y=0.3,\n    ax=0, \n    ay=0,\n    xref = \"paper\",\n    yref = \"paper\",\n    text= \"Highest number of Tv Shows were released in 2019 followed by 2017.\" )) \nfig_line.add_annotation(dict\n    (x=0.9, \n    y=1,\n    ax=0,\n    ay=0,\n    xref = \"paper\",\n    yref = \"paper\",\n    text= \"Highest number of Movies were relased in 2019 followed by 2020\" )) \nfig_line.show()","b0359045":"Now lets try to answer some questions like\n\n1.What is the ratio of Movie and TV Shows on Netflix\n\n2.Distribution of Rating in Netflix\n\n3.Which has the highest rating Tv Shows or Movies on Netflix","c9f1bce6":"we can see the most of the shows have been watched in december and january months so immediate prior to december  looks the best time for releasing a show.\n","a5469227":"which has the highest ratings tv shows or movies?\n","88c2029c":"lets drop rows containing cast and director as nan ","f4fe0d6d":"this shows that Drama is the highest preferred show by the audience then comes the comedy show and action show, the least preferred show is of LGBTQ movies.","f710eb85":"this shows that audience prefers movies over TV shows","063bea8e":"##EDA of netflix dataset using plotly","469f7e55":"###distribution of rating and finding out what audience prefers to watch","505fe492":"now lets find out the preferred genre to watch by users","a26973a2":"Finding if dataset contains any null values?\n","4ed70293":"looking for unique values in the dataset","d915b246":"The audience prefers TV-MA and TV-14 shows more and the least preferred rating shows are Nc-17.  Most of the content watched by the audience is for a mature audience. The TV-MA rating is a type of rating given by the TV parental guidelines to a television program.\n\nThe second largest type of rating watched by the audience is TV-14 which is inappropriate for children younger than age 14. The conclusion is drawn here is most of the audience is of mature age.","5065d936":"one day i woke up with google notification of a data science blog on analytics vidhya, written by kashish rastogi.she had done incredible work with plotly. i wanted to learn all the things she had done. so i tried to learn plotly charts from her work and came up with this notebook .for more details checkout her blog on https:\/\/www.analyticsvidhya.com\/blog\/2021\/09\/performing-eda-of-netflix-dataset-with-plotly\/","65d8b7af":"lets find out which month is best for releasing the show?\n","92e8a6da":"lets see the release of movies with years","9fb06897":"lets see most watched shows on netflix\n\nfrom this one can say netflix should produce this type of content as user loves it","d52098dc":"#lets see correlation between features","3e840ab1":"After the year 2019 covid came that badly affects Netflix for producing content. Movies have exponential growth from the start but due to covid, it is going downwards.","16c115bc":"The highest number of movies were released in 2019 and 2018 due to the covid releasing of movies were significantly dropped.\n\nNote: Here yellow color shows the decrement and the red color shows the increment"}}