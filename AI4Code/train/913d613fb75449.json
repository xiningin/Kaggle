{"cell_type":{"0d2a745c":"code","5a7413bf":"code","fc7bf2dc":"code","c46bc406":"code","0f30121f":"code","1325f7c9":"code","555503c6":"code","8792e2ad":"code","949cd0dd":"code","850e99c3":"code","6625841e":"code","004cb9bf":"code","d7207497":"code","61df6d1a":"code","f6ce78bb":"code","e07b2f81":"code","7766817b":"markdown","f437bf95":"markdown","df7eafc2":"markdown","b2979dab":"markdown","5ae528b0":"markdown","1a99da96":"markdown","c7a6d682":"markdown","5acce972":"markdown","f5909bdb":"markdown","a5b138b2":"markdown"},"source":{"0d2a745c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os.path\nimport glob\nimport PIL\nimport plotly.express as px\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import layers","5a7413bf":"data=Path(\"..\/input\/face-mask-lite-dataset\")\n\nFilePath=list(data.glob(r\"**\/*.png\"))\nLabels=list(map(lambda x:os.path.split(os.path.split(x)[0])[1],FilePath))\n\nFile=pd.Series(FilePath,name=\"File\").astype(str)\nLabels=pd.Series(Labels,name=\"Label\")\n\ndf=pd.concat([File,Labels],axis=1)\ndf.head()","fc7bf2dc":"df.shape","c46bc406":"with_mask=list(data.glob(\"with_mask\/*.png\"))\nplt.figure(figsize=(10,10))\n\nfor item in range(9):\n    plt.subplot(3,3,item+1)\n    img=PIL.Image.open(str(with_mask[item]))\n    plt.imshow(img)\n    plt.axis(\"off\")\n    \nplt.show()","0f30121f":"train , test =train_test_split(df,test_size=0.1,shuffle=True)","1325f7c9":"train_gen=tf.keras.preprocessing.image.ImageDataGenerator(\n\nrescale=1.\/255,\nhorizontal_flip=True,\nvertical_flip=True,\nheight_shift_range=0.2,\nwidth_shift_range=0.2,\nvalidation_split=0.1)\n\ntest_gen=tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)","555503c6":"train_images = train_gen.flow_from_dataframe(\n    dataframe=train,\n    x_col='File',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)","8792e2ad":"val_images = train_gen.flow_from_dataframe(\n    dataframe=train,\n    x_col='File',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)","949cd0dd":"test_images=test_gen.flow_from_dataframe(\n\ndataframe=test,\nx_col='File',\ny_col='Label',\ntarget_size=(224,224),\ncolor_mode=\"rgb\",\nclass_mode=\"binary\",\nbatch_size=32,\nshuffle=False)","850e99c3":"base_model=tf.keras.applications.InceptionResNetV2(weights=\"imagenet\",input_shape=(224,224,3),include_top=False)\n\nbase_model.trainable=False\n\ninput=base_model.input\n\nx=layers.GlobalAveragePooling2D()(base_model.output)\nx=layers.Dense(64,activation=\"relu\")(x)\nx=layers.Dropout(0.2)(x)\nx=layers.Dense(64,activation=\"relu\")(x)\n\noutput=layers.Dense(1,activation=\"sigmoid\")(x)\n\nmodel=Model(input,output)\n\nmodel.summary()","6625841e":"model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","004cb9bf":"history=model.fit(train_images,validation_data=val_images,epochs=100,callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ])","d7207497":"fig=px.line(history.history,\n           y=[\"loss\",\"val_loss\"],\n           labels={\"index\":\"epochs\",\"value\":\"loss\"},\n           title=\"train & val loss\")\nfig.show()","61df6d1a":"fig = px.line(\n    history.history,\n    y=['accuracy', 'val_accuracy'],\n    labels={'index': \"Epoch\", 'value': \"acc\"},\n    title=\"Model\"\n)\n\nfig.show()","f6ce78bb":"results = model.evaluate(test_images, verbose=1)\nprint(\"    Loss: {:.5f}\".format(results[0]))\nprint(\"Accuracy: {:.3f}%\".format(results[1] * 100))","e07b2f81":"samples = test_images.next()\n\npredictions = np.squeeze(model.predict(samples[0]) >= 0.5).astype(np.int)\nlabels = samples[1].astype(np.int)\n\nplt.figure(figsize=(20, 20))\n\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.imshow(samples[0][i])\n    plt.axis('off')\n    plt.title((\"NO MASK\" if predictions[i] == 1 else \"MASK\"), color=('blue' if labels[i] == predictions[i] else 'red'))\n\nplt.show()","7766817b":"# 7-Compile and fit our model to train and validation data","f437bf95":"# 8-Now let's plot loss and accuracy figures","df7eafc2":"# 4-Split dataset into train and test ","b2979dab":"# 1-Import packages","5ae528b0":"# 2-Read data from directory and convert it to dataframe","1a99da96":"# 3-Let's plot some Mask data","c7a6d682":"# 5-Use ImageDataGenerator to expand dataset","5acce972":"# 6-create model based on InceptionResNetV2 pretrained model","f5909bdb":"# 10-Final step is to predict some test data","a5b138b2":"# 9-Now evaluate on test data"}}