{"cell_type":{"656c91a4":"code","b23373b9":"code","2d48edb3":"code","01af9461":"code","1b93ddde":"code","42694818":"code","48a68b66":"code","49957b02":"code","12e9db95":"code","dc62d549":"code","0ebb22d8":"code","fa5df9d5":"code","f5afc76e":"code","a968d1ff":"code","6050b290":"code","7fa7927f":"code","cf18f7d4":"code","55799b37":"code","b8721d0e":"code","abf6f786":"code","9dda16c0":"code","7761140f":"code","3d1d13c4":"code","56b091a5":"code","7085168d":"code","9aa610aa":"code","72dc91b4":"code","94a05239":"code","1301f04a":"code","72d1a00e":"code","76395859":"code","6355001d":"code","86b6e614":"markdown","72fbd84a":"markdown","62b3e8a1":"markdown","4ff9490d":"markdown","26383501":"markdown","3e4baa7e":"markdown","23e1280d":"markdown","600b2a4a":"markdown","77ded66e":"markdown","6c311aff":"markdown","dcb40d86":"markdown","045e388d":"markdown","32f27fce":"markdown","a49764de":"markdown"},"source":{"656c91a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b23373b9":"df=pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","2d48edb3":"df.head()","01af9461":"df.shape","1b93ddde":"#let us check the data type for features\ndf.info()","42694818":"df.isnull().sum()","48a68b66":"df.duplicated().sum()","49957b02":"#There are 240 duplicate entries out of 1599","12e9db95":"df=df.drop_duplicates(keep='first')","dc62d549":"df.shape","0ebb22d8":"import matplotlib.pyplot as plt\nimport seaborn as sns","fa5df9d5":"df.columns","f5afc76e":"#Univariated Data Analysis\ndf['quality'].value_counts()","a968d1ff":"sns.countplot(x=df['quality'])","6050b290":"sns.pairplot(df, hue='quality')","7fa7927f":"plt.figure(figsize=(40,20))\nsns.boxplot(data=df)\n","cf18f7d4":"q1=df.quantile(0.25)\nq2=df.quantile(0.75)\nIQR=q2-q1","55799b37":"df=df[~((df<(q1-1.5*IQR))|(df>(q2+1.5*IQR))).any(axis=1)]","b8721d0e":"plt.figure(figsize=(40,20))\nsns.boxplot(data=df)","abf6f786":"def cat(x):\n    if x>6.5:\n        return 'good'\n    else:\n        return 'poor'\n    ","9dda16c0":"df['rating']=df['quality'].apply(lambda x: cat(x))","7761140f":"X=df.drop(labels=['quality','rating'],axis=1)\ny=df['rating']","3d1d13c4":"from sklearn.preprocessing import LabelEncoder\nencode=LabelEncoder()\ny_encode=encode.fit_transform(y)","56b091a5":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX=scaler.fit_transform(X)","7085168d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y_encode, test_size=0.33, random_state=42)","9aa610aa":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\ndef fit_predict(model1):\n    model = model1\n    model.fit(X_train, y_train)\n    y_pred=model.predict(X_test)\n    print(\"Accuracy score: {}\".format(accuracy_score(y_test, y_pred)))\n    print(\"classification report\\n\")\n    print(classification_report(y_test,y_pred))\n    print(\"\\n\")\n    sns.heatmap(confusion_matrix(y_test,y_pred), annot=True)\n    print(\"\\n\")\n    print(\"{} model has accuracy of {}\".format(str(model),accuracy_score(y_test, y_pred)))\n    return model","72dc91b4":"fit_predict(LogisticRegression())","94a05239":"fit_predict(KNeighborsClassifier(n_neighbors=2))","1301f04a":"from sklearn.svm import SVC\nfit_predict(SVC())","72d1a00e":"from sklearn.tree import DecisionTreeClassifier\nfit_predict(DecisionTreeClassifier())","76395859":"from sklearn import tree\nmodel=fit_predict(DecisionTreeClassifier())\n","6355001d":"plt.figure(figsize=(40,60))\ntree.plot_tree(model)","86b6e614":"# Logistic regression","72fbd84a":"# Standradise & Label Encoding","62b3e8a1":"Dataset contains 12 features including Target Variable Quality","4ff9490d":"# Explore Data","26383501":"# KNeighbourClassifier","3e4baa7e":"Quality above 6.5 is good quality wine","23e1280d":"# Read Data","600b2a4a":"Dataset after outlier removal","77ded66e":"# Decision Tree","6c311aff":"# Train & Test Split","dcb40d86":"# Remove outliers","045e388d":"There is no null value and duplicates have been removed","32f27fce":"# Eploratory Data Analysis","a49764de":"All features are either Int or float data type"}}