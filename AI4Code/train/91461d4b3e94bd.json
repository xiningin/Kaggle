{"cell_type":{"7b41b545":"code","608f49a0":"code","5d3d8270":"code","23f5f5ef":"code","b7c3d39b":"code","73b68618":"code","e731d6f8":"code","96867dcd":"code","33c2d754":"code","145ec013":"code","06a15b68":"code","de0179b4":"code","cdb2e95f":"code","81e25c65":"code","b6f8f68e":"code","117ff86f":"code","8c95b795":"code","2b5af55f":"code","7911abb6":"code","d06cf534":"code","d230c230":"code","1e19348a":"code","60f48c1e":"code","e4af065a":"code","1c9c23d2":"code","62f5ebf0":"code","63579fe6":"code","70c052fb":"code","86dccf47":"code","c9151414":"code","0744cc2b":"code","0cebf24a":"code","f2971976":"code","accb1ed8":"code","7425e947":"code","53b6542e":"markdown","78489e4f":"markdown","08c89fd5":"markdown","4c377a7f":"markdown","26df8c27":"markdown","18449c40":"markdown","d7211e72":"markdown","54bb2fa8":"markdown","7a6b7748":"markdown","f189cc5c":"markdown","be5b89dc":"markdown"},"source":{"7b41b545":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","608f49a0":"import pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.dates as mdates\nfrom matplotlib.dates import DateFormatter\nimport os\nimport glob\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","5d3d8270":"############################# Read Covid_19_india data into the datatframe Covid19India #######################################\nprint(\"Read Covid_19_india data into the dataframe Covid19India\\n\")\nCovid19India = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')","23f5f5ef":"print(\"How does the data look like\\n\", Covid19India.head())","b7c3d39b":"print(\"The columns in the data\\n\", list(Covid19India.columns))","73b68618":"print(\"We can drop 2 columns ['ConfirmedIndianNational', 'ConfirmedForeignNational']\\n\")\nCovid19India = Covid19India.drop(['ConfirmedIndianNational', 'ConfirmedForeignNational'], axis = 1)","e731d6f8":"print(\"## Verify to see whether the 2 columns are dropped\\n\",Covid19India.head())","96867dcd":"print(\"Some Infomation \\n\", Covid19India.info())","33c2d754":"Covid19India['Date'] = pd.to_datetime(Covid19India['Date'], format = '%Y-%m-%d')\nCovid19India.columns = ['Sno', 'Date', 'Time', 'State','Cured','Deaths','Confirmed']\nprint(\"No of States: \",Covid19India.State.nunique())\nprint(\"The states are: \\n\", Covid19India.State.unique())","145ec013":"dropIndex = Covid19India.loc[Covid19India['State'] == 'Cases being reassigned to states'].index\nCovid19India.drop(dropIndex, inplace = True)\ndropIndex = Covid19India.loc[Covid19India['State'] == 'Unassigned'].index\nCovid19India.drop(dropIndex, inplace = True)\nprint(\"After dropping 'Cases being reassigned to states' and 'Unassigned,the dataframe has :\\n\",Covid19India.shape)","06a15b68":"########################### Sorting Covid19India in descending order of 'Date' and 'Confirmed' ###############################\n######################################## into Covid19ToDate ##########################################################\n\nCovid19ToDate = Covid19India.sort_values(['Date', 'Confirmed'],ascending = False)\nCovid19ToDate.drop('Sno', axis =1)","de0179b4":"################## Plot the curve of Confirmed, Cured and Death cases in India from Feb 2020 till date #########################\n\nprint(\"Plotting the curve of Confirmed, Cured and Death Cases in India from Feb 2020 till date\\n\\n\")\n\nCovid19ByDay = Covid19India.groupby('Date')['Cured', 'Deaths', 'Confirmed'].sum()\nCovid19ByDay['CuredPerDay'] = Covid19ByDay.Cured - Covid19ByDay.Cured.shift(1)\nCovid19ByDay['DeathsPerDay'] = Covid19ByDay.Deaths - Covid19ByDay.Deaths.shift(1)\nCovid19ByDay['ConfirmedPerDay'] = Covid19ByDay.Confirmed - Covid19ByDay.Confirmed.shift(1)\n\n## Calculate Rolling Mean of 7 days\nCovid19ByDay['CuredPerDay7MM'] = Covid19ByDay['CuredPerDay'].rolling(window = 7).mean()\nCovid19ByDay['DeathsPerDay7MM'] = Covid19ByDay['DeathsPerDay'].rolling(window = 7).mean()\nCovid19ByDay['ConfirmedPerDay7MM'] = Covid19ByDay['ConfirmedPerDay'].rolling(window = 7).mean()\n\nCovid19ByDay = Covid19ByDay[(Covid19ByDay.index >= '2020-02-01')]\n\n\nfig,ax = plt.subplots(ncols=1,nrows=3,dpi=100,figsize=(20,18))\n\n\nax[0].plot(Covid19ByDay.Confirmed, color = 'dodgerblue')\nax[0].plot(Covid19ByDay.Cured, color = 'green')\nax[0].plot(Covid19ByDay.Deaths, color = 'red')\nax[0].legend(['Confirmed','Cured', 'Deaths'], prop={'size': 20})\nax[0].set_ylabel(\"Cumulative graph \\n In Crores\", fontsize=16)\nax[0].tick_params(axis='both', labelsize=16)\n\nax[0].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[0].xaxis.set_major_formatter(DateFormatter('%b%y'))\nfor label in ax[0].xaxis.get_ticklabels():\n            label.set_rotation(45)\n\nXstart, Xend = ax[0].get_xlim()\nax[0].hlines(y=[0.5e+7, 1.0e+7, 1.5e+7], xmin=Xstart, xmax=Xend,  color='gray', linewidth = 0.7)\n\n\nax[1].plot(Covid19ByDay.ConfirmedPerDay, color = 'dodgerblue')\nax[1].plot(Covid19ByDay.CuredPerDay, color = 'green')\nax[1].plot(Covid19ByDay.DeathsPerDay, color = 'red')\nax[1].legend(['Confirmed','Cured', 'Deaths'], prop={'size': 20})\nax[1].set_ylabel(\"Daywise pattern\", fontsize =16)\nax[1].tick_params(axis='both', labelsize=16)\n\nax[1].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[1].xaxis.set_major_formatter(DateFormatter('%b%y'))\nfor label in ax[1].xaxis.get_ticklabels():\n            label.set_rotation(45)\n        \nXstart, Xend = ax[1].get_xlim()\nax[1].hlines(y=[100000, 200000, 300000], xmin=Xstart, xmax=Xend,  color='gray', linewidth = 0.7)\n\n\n\n\nax[2].plot(Covid19ByDay.ConfirmedPerDay7MM, color = 'dodgerblue')\nax[2].plot(Covid19ByDay.CuredPerDay7MM, color = 'green')\nax[2].plot(Covid19ByDay.DeathsPerDay7MM, color = 'red')\nax[2].legend(['Confirmed','Cured', 'Deaths'], prop={'size': 20})\nax[2].set_ylabel('7 Day Rolling Average', fontsize =16)\nax[2].tick_params(axis='both', labelsize=16)\n\nax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax[2].xaxis.set_major_formatter(DateFormatter('%b%y'))\nfor label in ax[2].xaxis.get_ticklabels():\n            label.set_rotation(45)\n        \nXstart, Xend = ax[2].get_xlim()\nax[2].hlines(y=[100000, 200000, 300000], xmin=Xstart, xmax=Xend,  color='gray', linewidth = 0.7)\n\n\nplt.show()","cdb2e95f":"### Plot the 5 Worst Affected States \nprint(\"What are the worst 5 affected states of India?\\n\")\nLatestDate = Covid19ToDate.reset_index().Date[0]\nCovid19ToDate = Covid19ToDate[Covid19ToDate['Date'] == LatestDate].sort_values(by='Confirmed', ascending=False)\n\nfig,ax = plt.subplots(ncols=3,nrows=1,dpi=100,figsize=(18,8))\nCovidWorstStates = Covid19ToDate.head(5)\n\nsns.barplot(data = CovidWorstStates, x='State', y='Confirmed', ax=ax[0])\nax[0].set_yticklabels([5, 10, 15, 20, 25, 30, 35, 40, 45])\nax[0].set_ylabel('Confirmed (in lakhs)', fontsize =15)\nax[0].set_xticklabels(CovidWorstStates.State, rotation=90, fontsize = 14)\nax[0].set_xlabel(\" \")\n\nsns.barplot(data = CovidWorstStates, x='State', y='Cured', ax=ax[1])\nax[1].set_yticklabels([5, 10, 15, 20, 25, 30, 35, 40])\nax[1].set_ylabel('Cured (in lakhs)', fontsize =15)\nax[1].set_xticklabels(CovidWorstStates.State, rotation=90, fontsize = 14)\nax[1].set_xlabel(\" \")\n\n\nsns.barplot(data = CovidWorstStates, x='State', y='Deaths', ax=ax[2])\nax[2].set_ylabel('Deaths', fontsize =15)\nax[2].set_xticklabels(CovidWorstStates.State, rotation=90, fontsize = 14)\nax[2].set_xlabel(\" \")\n\n##plt.suptitle(\"Worst Indian States Affected\", fontsize=20, fontweight='bold')\nplt.show()","81e25c65":"### Lets look at the data of top 5 states more closely - Maharashtra, Kerala, Karnataka, UP, Tamil Nadu.\n# Gathering data of 5 states\n\nprint(\"How is the situation in 5 worst affected states?\\n\")\n\nCovidStates = list(CovidWorstStates.State.head(5))\ncol = ['teal', 'green', 'tomato', 'purple', 'mediumseagreen']\n\nfig, ax = plt.subplots(nrows=5, ncols=1, dpi=100, figsize=(20,18))\n\nfor i in range(len(CovidStates)):\n    CovidData = Covid19India[Covid19India['State'] == CovidStates[i]]\n    CovidData['CuredPerDay'] = CovidData.Cured - CovidData.Cured.shift(1)\n    CovidData['DeathsPerDay'] = CovidData.Deaths - CovidData.Deaths.shift(1)\n    CovidData['ConfirmedPerDay'] = CovidData.Confirmed - CovidData.Confirmed.shift(1)\n    CovidData = CovidData.fillna(0)\n            \n    sns.lineplot(x=CovidData.Date, y=CovidData.CuredPerDay.rolling(window=7).mean(), label = 'Cured',color='dodgerblue', ax=ax[i])\n    sns.lineplot(x=CovidData.Date, y=CovidData.DeathsPerDay.rolling(window=7).mean(), label = 'Deaths', color='red', ax=ax[i])\n    sns.lineplot(x=CovidData.Date, y=CovidData.ConfirmedPerDay.rolling(window=7).mean(), label = 'Confirmed',color='green', ax=ax[i])\n    ax[i].set_ylabel(CovidStates[i], fontsize=20)\n    ax[i].set_xlabel(\" \")\n    ax[i].tick_params(axis='both', labelsize=14)\n    ax[i].legend(['Cured', 'Deaths','Confirmed'], prop={'size': 14})\n    ax[i].xaxis.set_major_locator(mdates.MonthLocator(interval=2))\n    ax[i].xaxis.set_major_formatter(DateFormatter('%b%y'))\n    Xstart, Xend = ax[i].get_xlim()\n    Ystart, Yend = ax[i].get_ylim()\n    Ystep = round((Yend-Ystart)\/3, 2)\n    ax[i].hlines(y=[Ystep, 2*Ystep, 3*Ystep], xmin=Xstart, xmax=Xend,  color='gray', linewidth = 0.7)\n    \n    \n#plt.sca(ax[0])\n#plt.title('Cases Affected ', fontsize=24)\n\nplt.show()\n","b6f8f68e":"######################################################################################################\n############################## How bad is the situation of 7 worst States? ##########################\n######################################################################################################\n\nprint(\"Comparing the worst affected states with rest of India\\n\")\n\nNumsConfirmed = list(Covid19ToDate['Confirmed'][:5].values)\nNumsDeaths = list(Covid19ToDate.sort_values(by='Deaths', ascending = False)['Deaths'][:5])\nlabels = list(Covid19ToDate['State'][:5].values)\n\nNumsConfirmed.append(Covid19ToDate['Confirmed'][5:].sum())\nNumsDeaths.append(Covid19ToDate.sort_values(by='Deaths', ascending = False)['Deaths'][5:].sum())\nlabels.append('Rest of India')\n\nfig, ax = plt.subplots(ncols=2, nrows=1, figsize = (16,16))\n\nax[0].pie(NumsConfirmed, labels=labels, autopct = '%1.1f%%', explode=[0.05]*len(labels))\nax[0].set_title('% share of Confirmed Cases', fontsize = 16)\n\nax[1].pie(NumsDeaths, labels=labels, autopct = '%1.1f%%', explode=[0.05]*len(labels))\nax[1].set_title('% share of Deaths', fontsize = 16)\n\nplt.show()","117ff86f":"####################################################################################################\n######################################### All About Cured  ###########################################\n######################################################################################################\nprint(\"There are some good news too\\n\")\n\nNumsCured = list(Covid19ToDate.sort_values(by='Cured', ascending = False)['Cured'][:5])\nNumsCured.append(Covid19ToDate.sort_values(by='Cured', ascending = False)['Cured'][5:].sum())\n\nlabels = list(Covid19ToDate['State'][:5].values)\nlabels.append('Rest of India')\n\nfig, ax = plt.subplots(ncols=1, nrows=1, figsize = (8,8))\n\nax.pie(NumsDeaths, labels=labels, autopct = '%1.1f%%', explode=[0.05]*len(labels))\nax.set_title('% share of Cured', fontsize = 16)\n\nplt.show()","8c95b795":"#############################################################################################################################\n############## We compare the mean of Confirmed cases of last 1 month(30 days) with the Confirmed case of latestDate ##########\n###############################################################################################################################\n\nprint(\"For 5 Worst Affected States\\n\")\nprint(\"Comparing the Mean of Confirmed Cases of last 1 month(30 days) with Confirmed Cases of latest date\")\nCovidStates = list(CovidWorstStates.State.head(5))\ncol = ['teal', 'green', 'tomato', 'purple', 'mediumseagreen']\n\n\nfig, ax = plt.subplots(nrows=1, ncols=1, dpi=100, figsize=(6,4))\n\nfor i in range(len(CovidStates)):\n    CovidStateData = Covid19India[(Covid19India['State']==CovidStates[i])].reset_index().sort_values(by='index',ascending=False)\n    CovidStateData['ConfirmedPerDay'] = CovidStateData.Confirmed.shift(1) - CovidStateData.Confirmed\n    StateMean = round(CovidStateData['ConfirmedPerDay'].fillna(0).rolling(window=30).mean().values[29])\n    StateLatest = CovidStateData.reset_index().ConfirmedPerDay[1]\n    sns.scatterplot(y = i, x= [StateMean], color = 'mediumseagreen', s=50, edgecolor='black',ax=ax)\n    sns.scatterplot(y= i, x= [StateLatest], color = 'coral', edgecolor='black', s = 50, ax=ax)\n\nax.set_yticks([0,1,2,3,4])\nXstart, Xend = ax.get_xlim()\nax.hlines(y=[0,1,2,3,4], xmin=Xstart, xmax=Xend, color='gray', linewidth = 0.7)\nax.set_yticklabels(CovidStates)\n\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.legend(['Mean of last 30 days', 'Number of cases of latest date'], labelcolor=('green', 'coral'), loc = 'upper right')\n\nplt.show()\n","2b5af55f":"## Lets bring in the population of each state and find out the ratio of the number of people getting infected and cured.\nStatePop = pd.read_csv('..\/input\/population-of-indian-states\/StatePopulation.csv')\nStatePop.info()","7911abb6":"StatePop.columns = ['State', 'Population']","d06cf534":"## Plotting the statewise % of population affected \n\nprint(\"Plotting Statewise % of Population Affected\\n\")\n\nCovid19Pop = pd.merge(Covid19ToDate, StatePop, on = 'State')\n\nCovid19Pop['Cured%'] = (Covid19Pop.Cured\/Covid19Pop.Population)* 100\nCovid19Pop['Deaths%'] = (Covid19Pop.Deaths\/Covid19Pop.Population)* 100\nCovid19Pop['Confirmed%'] = (Covid19Pop.Confirmed\/Covid19Pop.Population)* 100\nCovid19Pop = Covid19Pop.sort_values(by = 'Confirmed', ascending = False)\n\nx = Covid19Pop.State.head(5)\nind = np.arange(5)\nw = 0.2\n\nfig, ax = plt.subplots(ncols=1, nrows=1, dpi = 100, figsize=(12,5))\nplt.bar(data = Covid19Pop.head(5), x= ind, height= 'Confirmed%', width=w, label = 'Confirmed', color = 'dodgerblue')\nplt.bar(data = Covid19Pop.head(5), x= ind+w, height = 'Cured%', width=w, label = 'Cured',color = 'green')\nplt.bar(data = Covid19Pop.head(5), x= ind+(2*w), height = 'Deaths%', width=w, label='Deaths',color = 'red')\n\nplt.xticks(ind+w,x)\nax.legend(['Confirmed in %', 'Cured in %', 'Deaths in %'])\n\nfor bar in ax.patches:\n    ax.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=10, xytext=(0, 8),\n                   textcoords='offset points')\nax.set_title('% of State Population Affected By Covid-19 Till Date')\nax.set_ylabel('In %')\nplt.show()\n","d230c230":"###################################################################################################\n########################### Now we analyse the vaccination details ############################\n######################################################################################################\n\nprint(\"Let's analyse the Vaccination Details\\n\")\nCovidVaccine = pd.read_csv('..\/input\/covid19-in-india\/covid_vaccine_statewise.csv')\nCovidVaccine.info()","1e19348a":"CovidVaccine.rename(columns={'Updated On': 'Date',\n                                            'Total Individuals Vaccinated': 'TotalVaccinated',\n                                           'First Dose Administered':'FirstDose',\n                                           'Second Dose Administered':'SecondDose',\n                                           'Male(Individuals Vaccinated)':'Male',\n                                           'Female(Individuals Vaccinated)':'Female',\n                                           'Transgender(Individuals Vaccinated)':'Transgender',\n                                           'Total Covaxin Administered':'TotalCovaxin',\n                                           'Total CoviShield Administered':'TotalCoviShield'}, inplace=True)","60f48c1e":"print(\"How many Nan rows of data?\\n\")\nCovidVaccine.isna().sum()","e4af065a":"################################# We drop the rows with Nan values in 'TotalVaccinated' ######################################\nCovidVaccine = CovidVaccine[CovidVaccine['TotalVaccinated'].notna()]","1c9c23d2":"################################## Convert datetime and get the latest date #################################################\nCovidVaccine['Date'] = pd.to_datetime(CovidVaccine['Date'], format = '%d\/%m\/%Y')\nlatest_date = max(CovidVaccine['Date'])\nprint(\"Latest Date : \", latest_date)","62f5ebf0":"print('There are ',CovidVaccine.State.nunique(), 'unique entries for State column\\n')\nprint('The States are \\n\\n',CovidVaccine.State.unique())","63579fe6":"CovidVaccine[CovidVaccine['State'] == \"Dadra and Nagar Haveli and Daman and Diu\"]","70c052fb":"CovidVaccine[CovidVaccine['State'] == \"Jammu and Kashmir\"]","86dccf47":"CovidVaccine[CovidVaccine['State'] == \"Odisha\"]","c9151414":"############################################################################################################################\n##################### We change the name of CovidVaccine.State to match with StatePop.State ################################\n\nCovidVaccine.loc[920:1031, 'State'] = 'Dadra and Nagar Haveli & Daman and Diu'\nCovidVaccine.loc[1610:1723, 'State'] = 'Jammu and Kashmir + Ladakh'\nCovidVaccine.loc[2990:3103, 'State'] = 'Orissa'\n\n#############################################################################################################################\n##################### Add the numbers of Jammu and Kashmir with Ladakh of TotalVaccinated, FirstDose, #######################\n############################ SecondDose, Male, Female, Transgender, TotalCovaxin, TotalCoviShield ################################\n\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalVaccinated'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalVaccinated'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['TotalVaccinated']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['FirstDose'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['FirstDose'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['FirstDose']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['SecondDose'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['SecondDose'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['SecondDose']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Male'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Male'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['Male']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Female'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Female'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['Female']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Transgender'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['Transgender'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['Transgender']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalCovaxin'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalCovaxin'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['TotalCovaxin']\nCovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalCoviShield'] = CovidVaccine[CovidVaccine['State']=='Jammu and Kashmir + Ladakh']['TotalCoviShield'] + CovidVaccine[CovidVaccine['State']=='Ladakh']['TotalCoviShield']\n                               \n    ","0744cc2b":"print(\"After some data cleaning and organising, the rows with Nan values \\n\")\nCovidVaccine.isna().sum()","0cebf24a":"########################################## How is India vaccinating ########################################################\nprint(\"How is India Vaccinating?\\n\")\nfig, ax = plt.subplots(ncols=1, nrows=1, dpi=100, figsize=(8,6))\n\nsns.lineplot(data=CovidVaccine[CovidVaccine['State']=='India'], x='Date', y='TotalVaccinated', ax=ax)\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\nax.xaxis.set_major_formatter(DateFormatter('%b%y'))\nax.set_ylabel('Total Indians Vaccinated so far in millions', fontsize=14)\nax.set_yticklabels([0,0,20,40,60,80,100,120])\n\nXstart, Xend = ax.get_xlim()\nax.hlines(y=[20e6, 60e6, 100e6], xmin=Xstart, xmax=Xend,  color='gray', linewidth = 0.7)\n\nplt.show()","f2971976":"VaccineLatest = CovidVaccine[CovidVaccine['Date'] == latest_date]\nStateVaccineLatest = CovidVaccine[(CovidVaccine['State'] != 'India') & (CovidVaccine['Date']==latest_date)]\n\n######################################## Bringing in the State population #############################################\n\n\nStateVaccineLatest = pd.merge(StateVaccineLatest, StatePop, on ='State')\n","accb1ed8":"########################## ########################## Top 10 states leading in vaccinating its people on percent of population #####################\n###################### COMPARED with how much the worst affected States are Vaccinating? ###################################\n\nprint(\" Top 10 states leading in vaccinating its people on percent of population \\n\")\nprint(\" COMPARED with how much the worst affected States are Vaccinating? \\n\")\n      \nfig, ax = plt.subplots(ncols=2, nrows=1, dpi=100, figsize=(16,8))\n\nStateVaccineLatest['PopVacc']=(StateVaccineLatest.TotalVaccinated\/StateVaccineLatest.Population)*100\nStateVaccineLatest = StateVaccineLatest.sort_values(by='PopVacc', ascending=False)\n\nsns.barplot(data=StateVaccineLatest.head(10), x='State', y='PopVacc', ax=ax[0])\nax[0].set_ylabel('% of State Population Vaccinated', fontsize=16)\nax[0].set_xlabel('States', fontsize=16)\nax[0].set_xticklabels(StateVaccineLatest.head(10).State, rotation=90, fontsize = 14)\nfor bar in ax[0].patches:\n    ax[0].annotate(format(bar.get_height(), '.1f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points')\n\ndata = pd.DataFrame(columns=['State', 'PopVacc'])\nfor i in range(len(CovidStates)):\n    data = data.append(StateVaccineLatest[StateVaccineLatest['State'] == CovidStates[i]][['State', 'PopVacc']])   \n\nsns.barplot(data=data.sort_values(by='PopVacc',ascending=False), x='State', y='PopVacc', ax=ax[1])\nax[1].set_ylabel('% of State Population Vaccinated', fontsize=16)\nax[1].set_xlabel('States', fontsize=20)\nax[1].set_xticklabels(data.sort_values(by='PopVacc',ascending=False).State, rotation=90, fontsize = 14)\nfor bar in ax[1].patches:\n    ax[1].annotate(format(bar.get_height(), '.1f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=14, xytext=(0, 8),\n                   textcoords='offset points')","7425e947":"######################## How the Better Vaccinated States are doing in the Corona #############################################\n\nprint(\"How the Better Vaccinated States are doing in Corona?\\n\")\nStateVacc = list(StateVaccineLatest.State.head(5))\n\nfig, ax= plt.subplots(ncols=1, nrows=5, dpi=100, figsize=(14,8))\n\nfor i in range(len(StateVacc)):\n    StateVaccData = Covid19India[Covid19India['State'] == StateVacc[i]]\n    sns.lineplot(data=StateVaccData, x='Date', \n                 y=(StateVaccData.Confirmed-StateVaccData.Confirmed.shift(1)).rolling(window=7).mean(),\n                 ax=ax[i], label = StateVacc[i])\n    ax[i].set_ylabel(\" \")\n    ax[i].xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    ax[i].xaxis.set_major_formatter(DateFormatter('%b%y'))","53b6542e":"The worst affected states are : Maharashtra, Karnataka, Kerala, Uttar Pradesh and Tamil Nadu in that order","78489e4f":"From the above graph we can say that the worst is over for the states Maharashtra and Tamil Nadu as of today. \nThe state of Kerala is reaching its peak.\nBut the southern states of Tamil Nadu and Karnataka are still having their bad days.","08c89fd5":"There are 14,690 rows of data of Cured, Deaths and Confirmed numbers distributed statewise from 30th Jan 2020 till 03rd May 2021. We apply pd.to_datetime to 'Date'","4c377a7f":"****From the graph it shows that, till date, around 130 million people have been vaccinated. If we consider the approximate population of India as 1350 million then (130\/1350)*100 = 9.62% of the population has been vaccinated till date. Considering that the Vaccination drive for common Indian started from March 01, 2021 and going by the rate of vaccination, it would take 15 months to completele vaccinate India. Or, in other words, India would be able to vaccinate 50% population not before September-October 2021.","26df8c27":"Lakshadweep is successful in vaccinating 31.5% of its population, followed by the Eastern Indian States of Sikkim and Tripura.\nOf the 5 worst covid affected Indian States, the Southern State of Kerala has vaccinated 18.5% of its population and is among the top 10 Indian States leading in vaccination drive.","18449c40":"Lakshwadeep and Andaman and Nicobar Islands are showing a dip in Corona cases as compared to the other states.","d7211e72":"The above graph shows that the Northern States of Maharashtra and Uttar Pradesh are doing very good in conquering the sudden surge in Covid19 cases.\nThe Southern States of Karnataka, Kerala and Tamil Nadu are still reeling under the steep rise.","54bb2fa8":"Task Details\nFollowing are the inspirations to work in this dataset :\n1.\tHow many states have fully vaccinated?\n2.\tWhat is the number of positive cases rising in India?\n3.\tWhich states are more affected by the virus?\n4.\tAnalyze to show insights regarding coronavirus","7a6b7748":"When taking into consideration of the population of a state, then Kerala seems to be affected more followed by Maharashtra and Karnaka for Confirmed cases.\nBut the Death % is highest in Maharashtra.","f189cc5c":"The cummulative graph of India shows a steady increase in cases from June 2020 to Oct 2020 and then a sudden spike in cases in the month of Oct-Nov 2020. The graph was steady for a while till early April 2021 when there was a very sudden increase in Covid19 cases.\nThis is corroborated from the next \"Daywise Pattern\" graph.\nThe last \"7 Day Rolling Average\" graph gives a much clearer picture. There is an enormous increase in Covid19 cases in India from early April 2021. The graph is started to taper towards the end signifying that the worst might be behind us.","be5b89dc":"There are 2 instances of 'State' that we shall drop, 'Cases being reassigned to states' and 'Unassigned'"}}