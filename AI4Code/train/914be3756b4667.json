{"cell_type":{"cf6c9b71":"code","f691bb9e":"code","28251e3d":"code","e445b140":"code","f30b4629":"code","62c4c104":"code","7c65754a":"code","c5238e58":"code","4a88b5f2":"code","5798ce78":"code","01d03126":"markdown","04382a24":"markdown","1fceeae1":"markdown"},"source":{"cf6c9b71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f691bb9e":"# Import Libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom haversine import haversine, Unit\n\npd.set_option('display.max_columns', None)\n#!pip3 install haversine","28251e3d":"# Import Data\ntrain_Data = pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTrain.csv')\ntest_Data = pd.read_csv('\/kaggle\/input\/fraud-detection\/fraudTest.csv')","e445b140":"train_Data.head(3)","f30b4629":"# Check for null values\ntrain_Data.isnull().sum()","62c4c104":"# Check for datatypes\ntrain_Data.dtypes","7c65754a":"train_Data.drop(columns = ['Unnamed: 0', 'unix_time', 'trans_num', 'first', 'last', 'street'], inplace = True)","c5238e58":"def update_Datatypes(data):\n    data['trans_date_trans_time'] = pd.to_datetime(data['trans_date_trans_time'])\n    data['dob'] = pd.to_datetime(data['dob'])\n    return data\n    \ntrain_Data = update_Datatypes(train_Data)","4a88b5f2":"def calculate_Distance(row):\n    distance = haversine((row['merch_lat'], row['merch_long']), (row['lat'], row['long']), unit=Unit.MILES)\n    return distance\n\ndef calculate_Age(row):\n    age = row['trans_date_trans_time'].year - row['dob'].year\n    return age\n\ndef label_CityPopulation(row):\n    age = 'Urban' if row['city_pop'] > 2000000 else 'Semi-Urban' if row['city_pop'] > 500000 else 'Rural'\n    return age\n    \ntrain_Data['Distance'] = train_Data.apply(lambda row: calculate_Distance(row), axis = 1)\ntrain_Data['Age'] = train_Data.apply(lambda row: calculate_Age(row), axis = 1)\ntrain_Data['city_Category'] = train_Data.apply(lambda row: label_CityPopulation(row), axis = 1)","5798ce78":"train_Data.drop(columns = ['dob', 'merch_lat', 'merch_long', 'lat', 'long', 'city_pop', 'city', 'job', 'state'], inplace = True)","01d03126":"# Libraries and Data","04382a24":"# Feature Engineering","1fceeae1":"# Data Cleaning and Exploration"}}