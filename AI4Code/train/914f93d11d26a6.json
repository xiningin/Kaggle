{"cell_type":{"d79eed65":"code","739e58c8":"code","9198f70a":"code","e4b3d0ab":"code","3afc1802":"code","b2eb3f9c":"code","b4c5062d":"code","0c26ed01":"code","f1dd69fb":"code","af5952c8":"code","2b7ecdc4":"code","4c0ae183":"code","0ed04e49":"code","0f573800":"code","17a82f00":"code","b538d2fa":"code","ebaceabf":"code","d4d6266a":"code","aca5f432":"code","f584d44a":"code","097b959f":"code","f86b3d1c":"code","e61896da":"code","ccaed90f":"code","e21df560":"code","07c84c0f":"code","b73d562d":"code","fafd27e1":"markdown","4a834fcc":"markdown","63e7f7e9":"markdown","63bf47c1":"markdown","e4ea4956":"markdown"},"source":{"d79eed65":"#for genral opeartions\nimport pandas as pd\n\n#for visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#for warnings\nimport warnings\n\n%matplotlib inline\nwarnings.simplefilter('ignore')","739e58c8":"#reading the data from csv file\ndata = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndata.head(3)","9198f70a":"#dropping the id column\ndata.drop('Id', axis = 1, inplace = True)\ndata.head(3)","e4b3d0ab":"#checking the null values in dataset\ndata.isnull().any()","3afc1802":"#spliting the dataset into X and y variables as independent and target feature\n\ny=data.Species #the target feature\n\nX=data[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']] #the independent features\nX.describe()# for the brief statistics of the dataset","b2eb3f9c":"#plotting pairplot to check the target feature spread with respect to indpendent variables\nsns.set_style(\"ticks\")\nsns.pairplot(data,hue = 'Species',diag_kind = \"kde\",kind = \"scatter\",palette = \"husl\")\nplt.show()","b4c5062d":"sns.set(style=\"dark\", palette=\"muted\", color_codes=True)\nf, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n#sns.despine(left=True)\n\nsns.swarmplot(x=\"Species\", y=\"PetalLengthCm\", data=data, ax=axes[0, 0])\nsns.swarmplot(x=\"Species\", y=\"PetalWidthCm\", data=data, ax=axes[0, 1])\nsns.swarmplot(x=\"Species\", y=\"SepalLengthCm\", data=data, ax=axes[1, 0])\nsns.swarmplot(x=\"Species\", y=\"SepalWidthCm\", data=data, ax=axes[1, 1])\nplt.xticks()\nplt.tight_layout()","0c26ed01":"sns.lmplot(x=\"PetalLengthCm\", y=\"SepalLengthCm\",data=data)","f1dd69fb":"sns.lmplot(x=\"PetalWidthCm\", y=\"SepalWidthCm\",data=data)","af5952c8":"sns.lmplot(x=\"PetalLengthCm\", y=\"PetalWidthCm\",data=data)\nfig=plt.gcf()","2b7ecdc4":"sns.lmplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\",data=data)","4c0ae183":"sns.set(style=\"white\", palette=\"muted\", color_codes=True)\nf, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n#sns.despine(left=True)\n\nsns.distplot(data['SepalLengthCm'], hist = True, color=\"b\", kde_kws={\"shade\": True}, ax=axes[0, 0])\nsns.distplot(data['SepalWidthCm'], hist=True, rug=False, color=\"r\", ax=axes[0, 1])\nsns.distplot(data['PetalLengthCm'], hist=True, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\nsns.distplot(data['PetalWidthCm'], color=\"m\", ax=axes[1, 1])\n\nplt.xticks()\nplt.tight_layout()","0ed04e49":"#individual distribuition of length and width\ndata.hist(edgecolor='black', linewidth=1.2)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","0f573800":"#Species wise variation of length and width\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=data)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=data)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=data)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=data)","17a82f00":"#checking the outliers and data quartiles\nplt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.boxplot(x='Species',y='PetalLengthCm',data=data)\nplt.subplot(2,2,2)\nsns.boxplot(x='Species',y='PetalWidthCm',data=data)\nplt.subplot(2,2,3)\nsns.boxplot(x='Species',y='SepalLengthCm',data=data)\nplt.subplot(2,2,4)\nsns.boxplot(x='Species',y='SepalWidthCm',data=data)","b538d2fa":"#checking on the correaltion between features\nplt.figure(figsize=(7,4)) \nsns.heatmap(data.corr(),annot=True,cmap='cubehelix_r')\nplt.show()","ebaceabf":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm \nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","d4d6266a":"#defining logistic regression model\ndef logreg(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    lr = LogisticRegression()\n    lr.fit(X_train,y_train)\n    y_pred = lr.predict(X_val)\n    print(\"Train Data Accuracy {0} \".format(lr.score(X_train, y_train)))\n    print(\"Test Data Accuracy {0} \".format(lr.score(X_val, y_val)))","aca5f432":"#defining random forest model\ndef randfrst(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    rfc= RandomForestClassifier()\n    rfc.fit(X_train,y_train)\n    y_pred = rfc.predict(X_val)\n    print(\"Train Data Accuracy {0} \".format(rfc.score(X_train, y_train)))\n    print(\"Test Data Accuracy {0} \".format(rfc.score(X_val, y_val)))","f584d44a":"#defining decision tree model\ndef destree(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    dtc= RandomForestClassifier()\n    dtc.fit(X_train,y_train)\n    y_pred = dtc.predict(X_val)\n    print(\"Train Data Accuracy {0} \".format(dtc.score(X_train, y_train)))\n    print(\"Test Data Accuracy {0} \".format(dtc.score(X_val, y_val)))","097b959f":"#defining k nearest neighbour model\ndef knn_mod(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    a_index=list(range(1,11))\n    a=pd.Series()\n    x=[1,2,3,4,5,6,7,8,9,10]\n    for i in list(range(1,11)):\n        model=KNeighborsClassifier(n_neighbors=i) \n        model.fit(X_train,y_train)\n        prediction=model.predict(X_val)\n        a=a.append(pd.Series(metrics.accuracy_score(prediction,y_val)))\n    plt.plot(a_index, a)\n    plt.xticks(x)\n    print(\"Train Data Accuracy {0} \".format(model.score(X_train, y_train)))\n    print(\"Test Data Accuracy {0} \".format(model.score(X_val, y_val)))","f86b3d1c":"#defining support vector machine model\ndef svm_mod(X,y):\n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25, random_state=42)\n    model = svm.SVC()\n    model.fit(X_train,y_train)\n    prediction=model.predict(X_val)\n    print(\"Train Data Accuracy {0} \".format(model.score(X_train, y_train)))\n    print(\"Test Data Accuracy {0} \".format(model.score(X_val, y_val)))","e61896da":"logreg(X,y)","ccaed90f":"randfrst(X,y)","e21df560":"destree(X,y)","07c84c0f":"svm_mod(X,y)","b73d562d":"knn_mod(X,y)","fafd27e1":"# IRIS\n\nThe Iris dataset was used in R.A. Fisher's classic 1936 paper, The Use of Multiple Measurements in Taxonomic Problems, and can also be found on the UCI Machine Learning Repository.\n\nIt includes three iris species with 50 samples each as well as some properties about each flower. One flower species is linearly separable from the other two, but the other two are not linearly separable from each other.\n\nThe columns in this dataset are:\n\n- Id\n- SepalLengthCm\n- SepalWidthCm\n- PetalLengthCm\n- PetalWidthCm\n- Species\n\n<img src = \"https:\/\/miro.medium.com\/max\/361\/0*1lgB-Yqej6VPER00\" alt=\"Drawing\" width=\"400\">\n<figcaption> <h6> Iris Flower : Getting started with Machine Learning since 1988 .<\/h6>","4a834fcc":"### Building Machine Learning Models","63e7f7e9":"# THE END!!!","63bf47c1":"### Checking Accuracy Modelwise","e4ea4956":"sns.set_style('darkgrid')\nf,axes=plt.subplots(2,2,figsize=(15,15))\n\nk1=sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=data,ax=axes[0,0])\nk2=sns.violinplot(x='Species',y='PetalLengthCm',data=data,ax=axes[0,1])\nk3=sns.stripplot(x='Species',y='SepalLengthCm',data=data,jitter=True,edgecolor='gray',size=8,palette='winter',orient='v',ax=axes[1,0])\n#axes[1,1].hist(iris.hist,bin=10)\naxes[1,1].hist(data.PetalLengthCm,bins=100)\n#k2.set(xlim=(-1,0.8))\nplt.show()"}}