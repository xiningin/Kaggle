{"cell_type":{"7d222856":"code","d2c09dc7":"code","668affe4":"code","427496a8":"code","7a790160":"code","ffb167ed":"code","fafbcf80":"code","810d62ab":"code","c6c5e4f6":"code","0b1a48f9":"code","7883f7ff":"code","08f787d5":"code","6b005ab5":"code","39f7d67b":"code","220cc582":"code","2e0016af":"code","41d48e4f":"code","7050ae71":"code","03114029":"code","4d29f964":"code","95d1b08c":"code","1b14d17c":"code","3550a9c8":"code","4e29f39c":"code","4b69309f":"code","1509b207":"code","0a4e56cb":"code","e977edc7":"code","4f711d93":"code","94f35679":"code","d0191d30":"code","82d592e0":"code","011c0525":"code","f96592b4":"code","2c5a22bb":"code","14957a1b":"code","064e9c62":"code","b392109e":"code","48c1497a":"code","55624b7c":"code","68387781":"code","45516745":"code","197d43c4":"code","9adb57a4":"code","37f35f22":"code","5ba331ac":"code","e1a31948":"code","5e9aa895":"code","13fd417a":"code","1c017731":"code","16cb80ea":"code","b30d6aa2":"code","cdd2c847":"code","c13f67c1":"code","b3b8365e":"code","97ea15f8":"code","c8320523":"code","f0788e37":"markdown","8c6f154e":"markdown","1a6f3517":"markdown","c53c7cc1":"markdown","4427a018":"markdown","a3940521":"markdown","14934eeb":"markdown","3e4f8069":"markdown","db28cbf7":"markdown","eaffffff":"markdown","4c53d751":"markdown","8c64f747":"markdown","70f01830":"markdown","e2f0816a":"markdown","202d257d":"markdown","51e401b6":"markdown","5b809e54":"markdown","6dc63dbe":"markdown","f8748eac":"markdown","fda1dda7":"markdown","d6582f4c":"markdown","d5d4953c":"markdown","83c2de92":"markdown","c139eca1":"markdown","b3590f58":"markdown","301aacb2":"markdown","36524bc5":"markdown","3f4a615c":"markdown","a696ce03":"markdown","3d975016":"markdown","25e0c5a2":"markdown","22f96aa3":"markdown","82382152":"markdown","ebc271e3":"markdown","1ce2d468":"markdown","af265558":"markdown","f28dada8":"markdown","a204b0d2":"markdown","0f08b079":"markdown","8f43a691":"markdown","25d43aed":"markdown","b2dc6114":"markdown","090f4137":"markdown","7beb44ee":"markdown","5e457955":"markdown","6499b570":"markdown"},"source":{"7d222856":"import networkx as nx","d2c09dc7":"G = nx.Graph()","668affe4":"G.add_node('a')\nG.add_node('b')\nG.add_node('c')\nG.add_node('d')","427496a8":"G.add_edge('a','b')\nG.add_edge('a','c')\nG.add_edge('a','d')\nG.add_edge('c','d')","7a790160":"nx.draw(G)","ffb167ed":"nx.draw(G, with_labels=True)","fafbcf80":"nx.draw(G, with_labels=True, node_color='yellow')","810d62ab":"nx.draw(G, with_labels=True, node_color='yellow', edge_color='red')","c6c5e4f6":"nx.draw(G, with_labels=True, node_color='yellow', edge_color='red', node_size=1000)","0b1a48f9":"nx.draw(G, with_labels=True, node_color='yellow', edge_color='red', node_size=1000, font_size=30)","7883f7ff":"G = nx.Graph()\nG.add_nodes_from(['$v_1$','$v_2$','$v_3$','$v_4$','$v_5$','$v_6$'])\nG.add_edges_from([('$v_1$','$v_2$'),('$v_1$','$v_3$'),('$v_1$','$v_4$'),('$v_1$','$v_4$'),\n                  ('$v_1$','$v_6$'),('$v_2$','$v_3$'),('$v_4$','$v_5$'),('$v_4$','$v_2$'),\n                  ('$v_4$','$v_6$'), ('$v_3$','$v_4$')])\n\nnx.draw(G, with_labels=True, node_color='yellow', edge_color='blue', font_size=15, node_size=500)\n","08f787d5":"G = nx.MultiDiGraph()\nG.add_nodes_from(['a','b','c','d'])\nG.add_edges_from([('b','c'),('c','d'),('a','d'),('c','a')])\nG.add_edge('a', 'b')\nG.add_edge('b', 'a')\nnx.draw(G,with_labels=True, node_color='skyblue',connectionstyle='arc3, rad = 0.1')","6b005ab5":"G = nx.Graph()\nG.add_nodes_from(['a','b','c','d','e','f'])\nG.add_edges_from([('a','b'),('a','c'),('a','d'),('a','d'),('a','f'),\n                  ('b','c'),('d','e'),('d','b'),('d','f'),('c','d')])\nnx.draw(G, with_labels=True, node_color='skyblue')","39f7d67b":"print('Number of vertices are', G.number_of_nodes())\nprint('These vertices are',G.nodes())","220cc582":"print('Number of edges are',G.number_of_edges())\nprint('These edges are',G.edges())","2e0016af":"print('Neigbours of vertex c are',list(G.neighbors('c')))","41d48e4f":"for i in G.nodes():\n    print('Neigbours of vertex',i,'are',list(G.neighbors(i)))","7050ae71":"print('Degree of all the vertices of graph G are',G.degree())","03114029":"print('Degree of vertex a is', G.degree('a'))","4d29f964":"for i in G.nodes():\n    print('Degree of vertex',i,'are',G.degree(i))","95d1b08c":"Kn = nx.complete_graph(5)\n# nx.draw(KnC)\nnx.draw_circular(Kn)","1b14d17c":"C = nx.cycle_graph(7)\nnx.draw(C)\n# nx.draw_circular(C)","3550a9c8":"W = nx.wheel_graph(6)\nnx.draw(W)\n# nx.draw_circular(W)","4e29f39c":"Kmn = nx.complete_bipartite_graph(3,3)\n#nx.draw(Kmn, pos = nx.drawing.layout.bipartite_layout([0,1,2], [3,4,5]))\nnx.draw(Kmn, node_color='k')","4b69309f":"G = nx.Graph()\nG.add_nodes_from(['a','b','c','d','e','f'])\nG.add_edges_from([('a','b'),('a','c'),('a','d'),('a','d'),('a','f'),\n                  ('b','c'),('d','e'),('d','b'),('d','f'),('c','d')])\nnx.draw(G, with_labels=True, node_color='skyblue')","1509b207":"A = nx.adjacency_matrix(G)\nprint(A.todense())","0a4e56cb":"A = nx.incidence_matrix(G)\nprint(A.todense())","e977edc7":"G = nx.Graph()\nG.add_nodes_from(['a','b','c','d'])\nG.add_edges_from([('a','b'),('a','c'),('b','c')])\nnx.draw(G)","4f711d93":"nx.is_connected(G)","94f35679":"G = nx.Graph()\nG.add_nodes_from(['a','b','c','d'])\nG.add_edges_from([('a','b'),('a','c'),('b','c'),('c','d')])\nnx.draw(G)","d0191d30":"nx.is_connected(G)","82d592e0":"G = nx.Graph()\nG.add_nodes_from(['a','b','c','d','e','f'])\nG.add_edges_from([('a','b'),('a','c'),('a','d'),('a','d'),('a','f'),\n                  ('b','c'),('d','e'),('d','b'),('d','f'),('c','d')])\nnx.draw(G, with_labels=True, node_color='skyblue')","011c0525":"for path in nx.all_simple_paths(G, 'a', 'b'):\n    print(path)","f96592b4":"nx.shortest_path(G,'a','e')","2c5a22bb":"nx.shortest_path_length(G,'a','e')","14957a1b":"G = nx.MultiGraph()\nG.add_nodes_from(['a','b','c','d'])\nG.add_edges_from([('a','b'),('a','b'),('a','c'),('a','c'),('a','d'),('b','d'),('c','d')])\nfor i in G.nodes():\n    print(i, G.degree(i))\nnx.is_eulerian(G)","064e9c62":"H = nx.dodecahedral_graph()\nnx.draw_networkx(H, with_labels=True, node_color='yellow', edge_color='blue', font_size=10, node_size=500)","b392109e":"print('\\nNumber of vertices =',H.number_of_nodes())\nprint('\\nNumber of edges =',H.number_of_edges())\nprint('\\nList of nodes =',list(H.nodes()))\nprint('\\nList of edges =',list(H.edges()))\nprint('\\nDegree of each vertices =',list(H.degree()))","48c1497a":"G = nx.complete_graph(4)\nnx.draw(G, with_labels=True, node_color='skyblue')","55624b7c":"nx.check_planarity(G)[0]","68387781":"nx.draw(G, nx.planar_layout(G) , with_labels=True, node_color='skyblue')","45516745":"K1 = nx.complete_graph(5)\nnx.draw(K1, with_labels=True, node_color='skyblue')","197d43c4":"nx.check_planarity(K1)[0]","9adb57a4":"K2 = nx.complete_bipartite_graph(3,3)\nnx.draw(K2, pos = nx.drawing.layout.bipartite_layout([0,1,2], [3,4,5]))","37f35f22":"nx.check_planarity(K2)[0]","5ba331ac":"Kn = nx.complete_graph(5)\nnx.greedy_color(Kn).values()","e1a31948":"W = nx.wheel_graph(8)\nnx.greedy_color(W).values()","5e9aa895":"C = nx.cycle_graph(5)\nnx.greedy_color(C).values()","13fd417a":"Kmn = nx.complete_bipartite_graph(3,3)\nnx.greedy_color(Kmn).values()","1c017731":"import pandas as pd\nsheet1 = pd.DataFrame(pd.read_excel('\/kaggle\/input\/graph-theory-using-python\/Districts of Gujarat.xlsx', sheet_name='Sheet1', header=None))\nsheet2 = pd.DataFrame(pd.read_excel('\/kaggle\/input\/graph-theory-using-python\/Districts of Gujarat.xlsx', sheet_name='Sheet2', header=None))\ndistricts = list(sheet1[0])\ndistricts","16cb80ea":"neighbors=[]\nfor i in range(len(sheet2)):\n    neighbors.append([sheet2[0][i], sheet2[1][i]])\nneighbors","b30d6aa2":"G = nx.Graph()\nG.add_nodes_from(districts)\nG.add_edges_from(neighbors)\nprint('Number of vertices =',G.number_of_nodes())\nprint('Number of edges =',G.number_of_edges())","cdd2c847":"nx.draw(G, with_labels=True, node_color='yellow', font_size=7)","c13f67c1":"#%matplotlib qt5\nnx.draw(G, with_labels=True, node_color='yellow', font_size=7)","b3b8365e":"print(nx.check_planarity(G)[0])","97ea15f8":"colouring = nx.greedy_color(G)\nnx.greedy_color(G).values()","c8320523":"my_colours = []\nfor i in districts:\n    if colouring[i]==0:\n        my_colours.append('coral')\n    if colouring[i]==1:\n        my_colours.append('greenyellow')\n    if colouring[i]==2:\n        my_colours.append('skyblue')\n    if colouring[i]==3:\n        my_colours.append('plum')\n\n#%matplotlib qt5\nnx.draw(G, with_labels=True, node_color=my_colours, node_size=400, edge_color='y', font_size=8)","f0788e37":"We can draw directed graph.","8c6f154e":"# 5. Adjacency matrix and Incidence matrix","1a6f3517":"We can find neighbours of all the vertices using following loop.","c53c7cc1":"Step 4: Defining edges of the Graph","4427a018":"Wheels","a3940521":"Adjacency matrix","14934eeb":"Reading destricts from Excel file","3e4f8069":"Euler circuit and Solution of Konigsberg 7 bridge problem","db28cbf7":"Kurtowski\u2019s first graph\u00b6","eaffffff":"Complete Bipartite Graphs","4c53d751":"Drawing dual of a map","8c64f747":"Step 3: Defining vertices of the Graph","70f01830":"We can create a graph with Labels.","e2f0816a":"# 3. Neighbours and degree of vertices","202d257d":"This Jupyter notebook is prepared by Shardav Bhatt as a part of webinar on Graph theory and its applications using Python which was conducted on 7 November 2020. <br> The webinar is available on YouTube: https:\/\/www.youtube.com\/watch?v=vQryGm0HoNY \n<br> The presentation is avaialble on https:\/\/www.researchgate.net\/profile\/Shardav_Bhatt","51e401b6":"Check whether it is plannar or not","5b809e54":"Incidence matricx","6dc63dbe":"The neighbours of particular vertex can be listed.","f8748eac":"# 1. Creating graphs using Python","fda1dda7":"# 2. Listing vertices and edges of the graph","d6582f4c":"We can print degree of a single vertex as well as degree of all the vertices.","d5d4953c":"We can print number of edges and list out these edges of the graph.","83c2de92":"# 7. Paths and Circuits","c139eca1":"Making a list of districts","b3590f58":"Step 1: Importing a Networkx module","301aacb2":"# Graph theory using Python <br>\n# By Shardav Bhatt\nThis Jupyter notebook is prepared by Shardav Bhatt as a part of webinar on Graph theory and its applications using Python which was conducted on 7 November 2020. <br> The webinar is available on YouTube: https:\/\/www.youtube.com\/watch?v=vQryGm0HoNY \n<br> The presentation is avaialble on https:\/\/www.researchgate.net\/profile\/Shardav_Bhatt\n","36524bc5":"Cycles","3f4a615c":"# 8. Plannar graphs","a696ce03":"We can change size of node and fonts of node.","3d975016":"Complete Graph","25e0c5a2":"We can change font size of nodes.","22f96aa3":"Traveler's Dodecahedron","82382152":"# 9. Graph colouring","ebc271e3":"A graph G can be created in python using just 5 lines","1ce2d468":"Step 5: Drawing a Graph","af265558":"We can define all nodes in a single command.","f28dada8":"Creating dual of a map","a204b0d2":"Kurtowski\u2019s first graph ","0f08b079":"# 4. Some special graphs","8f43a691":"Colouring of all the vertices","25d43aed":"We can cange edge colour also.","b2dc6114":"# 9. Colouring of map of Guajrat using Four colour problem","090f4137":"Step 2: Defining a graph","7beb44ee":"We can print number of vertices and list out these edges of the graph.","5e457955":"# 6. Connected or Disconnected Graph","6499b570":"We can change node colours."}}