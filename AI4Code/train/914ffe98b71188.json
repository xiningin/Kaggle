{"cell_type":{"033a9a16":"code","44ff0eb8":"code","774d692e":"code","b378b4d8":"code","0ed198bc":"code","938b5f84":"code","ebae0938":"code","6f2ad23f":"code","242293d5":"code","5e795e1b":"code","17ace13b":"code","1fdfae1c":"code","f6781ed3":"code","9f62c6f5":"code","36b95330":"code","23f3457a":"code","dfd62c32":"code","ce43643f":"code","6dfa553c":"code","54204043":"code","8712c446":"code","87ced747":"code","a1e46a3c":"code","470a68a2":"code","f3ece10f":"code","3724b56a":"code","98627733":"code","cbc88091":"code","c31e4e43":"code","04eff5e5":"code","a859f25d":"code","ab27d57a":"code","45598665":"code","3bc5cdac":"code","b08622e0":"code","97a1e63e":"code","8e14c902":"code","8eac923c":"code","1a196f0d":"code","952cb080":"code","af7802d4":"code","72af4e3c":"markdown","d1ccebf2":"markdown","8341a256":"markdown","7290035a":"markdown","a7608a72":"markdown","6fd1ea72":"markdown","d4396009":"markdown","23f45d6f":"markdown","7ba1214f":"markdown","5ed8a84e":"markdown","c816203f":"markdown"},"source":{"033a9a16":"# import required libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report, average_precision_score, recall_score, precision_score, accuracy_score, f1_score, jaccard_score, plot_precision_recall_curve, plot_roc_curve\n\n\n\n\n","44ff0eb8":"data = pd.read_csv('..\/input\/churn-prediction\/churn_.txt')\ndata.head()","774d692e":"data.shape","b378b4d8":"data.isna().sum()","0ed198bc":"data.info()","938b5f84":"data.describe()","ebae0938":"from sklearn.model_selection import train_test_split\n\nX = data.iloc[:, :7]\ny = data.iloc[:, 7]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 1234)\n\n\nprint(f'The shape of X_train is: {X_train.shape}')\nprint(f'The shape of y_train is: {y_train.shape}')\nprint(f'The shape of X_test is: {X_test.shape}')\nprint(f'The shape of y_test is: {y_test.shape}')\n\n","6f2ad23f":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nmodel1 = LinearDiscriminantAnalysis()\nmodel1.fit(X_train, y_train)","242293d5":"y_pred_model1 = model1.predict(X_test)\nconfusion_matrix_model1 = confusion_matrix(y_pred_model1, y_test)\nconfusion_matrix_model1","5e795e1b":"plot_roc_curve(model1, X_test, y_test)\nplt.title('Roc Curve')","17ace13b":"from scipy.stats import iqr\n\nmodel_comp = pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model1), \n                           'Percision': precision_score(y_test, y_pred_model1), \n                           'Recall': recall_score(y_test, y_pred_model1), \n                           'F1_score': f1_score(y_test, y_pred_model1), \n                           'Jaccard_score': jaccard_score(y_test, y_pred_model1)}, index = ['Model1: LDA'])\n\nmodel_comp","1fdfae1c":"from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nmodel2 = QuadraticDiscriminantAnalysis()\nmodel2.fit(X_train, y_train)\ny_pred_model2 = model2.predict(X_test)\nconfusion_matrix_model2 = confusion_matrix(y_pred_model2, y_test)\nconfusion_matrix_model2\n\n","f6781ed3":"plot_roc_curve(model2, X_test, y_test)\nplt.title('Roc Curve')","9f62c6f5":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model2), \n                                             'Percision': precision_score(y_test, y_pred_model2), \n                                             'Recall': recall_score(y_test, y_pred_model2), \n                                             'F1_score': f1_score(y_test, y_pred_model2), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model2)}, index = ['Model2: QDA']))\nmodel_comp","36b95330":"from sklearn.naive_bayes import GaussianNB\nmodel3 = GaussianNB()\nmodel3.fit(X_train, y_train)\ny_pred_model3 = model3.predict(X_test)\nconfucsion_matrix_model3 = confusion_matrix(y_test, y_pred_model3)\nconfucsion_matrix_model3","23f3457a":"plot_roc_curve(model3, X_test, y_test)\nplt.title('Roc Curve')","dfd62c32":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model3), \n                                             'Percision': precision_score(y_test, y_pred_model3), \n                                             'Recall': recall_score(y_test, y_pred_model3), \n                                             'F1_score': f1_score(y_test, y_pred_model3), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model3)}, index = ['Model2: Naive Bayes']))\nmodel_comp","ce43643f":"from sklearn.linear_model import LogisticRegression\nmodel4 = LogisticRegression()\nmodel4.fit(X_train, y_train)\ny_pred_model4 = model4.predict(X_test)\nconfusion_matrix_model4 = confusion_matrix(y_test, y_pred_model4)\nconfusion_matrix_model4","6dfa553c":"plot_roc_curve(model4, X_test, y_test)\nplt.title('Roc Curve')","54204043":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model4), \n                                             'Percision': precision_score(y_test, y_pred_model4), \n                                             'Recall': recall_score(y_test, y_pred_model4), \n                                             'F1_score': f1_score(y_test, y_pred_model4), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model4)}, index = ['Model4: Logistic Regression']))\nmodel_comp","8712c446":"from sklearn.neighbors import KNeighborsClassifier\nmodel5 = KNeighborsClassifier(n_neighbors = 2, metric = 'minkowski', p = 2)\nmodel5.fit(X_train, y_train)\ny_pred_model5 = model5.predict(X_test)\nconfusion_matrix_model5 = confusion_matrix(y_test, y_pred_model5)\nconfusion_matrix_model5","87ced747":"plot_roc_curve(model5, X_test, y_test)\nplt.title('Roc Curve')","a1e46a3c":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model5), \n                                             'Percision': precision_score(y_test, y_pred_model5), \n                                             'Recall': recall_score(y_test, y_pred_model5), \n                                             'F1_score': f1_score(y_test, y_pred_model5), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model5)}, index = ['Model5: KNN Classifier']))\nmodel_comp","470a68a2":"{'min_samples_leaf': 2,\n 'max_features': 6,\n 'max_depth': 7,\n 'criterion': 'entropy'}","f3ece10f":"from sklearn.tree import DecisionTreeClassifier\nmodel6 = DecisionTreeClassifier(max_depth = 7, \n                                max_features = 6,\n                                criterion = 'entropy', \n                                min_samples_leaf = 2)\nmodel6.fit(X_train, y_train)\ny_pred_model6 = model6.predict(X_test)\nconfusion_matrix_model6 = confusion_matrix(y_pred_model6, y_test)\nconfusion_matrix_model6","3724b56a":"plot_roc_curve(model6, X_test, y_test)\nplt.title('Roc Curve')","98627733":"from scipy.stats import randint\nfrom sklearn.model_selection import RandomizedSearchCV\n\nparam_dist = {'max_depth': [3, 4, 5, 6, 7, 8, 9,2], \n              'max_features': [2, 3, 4, 5, 6, 7], \n              'min_samples_leaf': [2, 3, 4, 5, 6, 7, 8], \n              'criterion': ['gini', 'entropy']}\n\ntree_cv = RandomizedSearchCV(model6, param_dist, cv = 5)\n\ntree_cv.fit(X_train, y_train)\ntree_cv.best_params_","cbc88091":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model6), \n                                             'Percision': precision_score(y_test, y_pred_model6), \n                                             'Recall': recall_score(y_test, y_pred_model6), \n                                             'F1_score': f1_score(y_test, y_pred_model6), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model6)}, index = ['Model6: Decision Tree Classifier']))\nmodel_comp","c31e4e43":"from sklearn.ensemble import BaggingClassifier\n\nmodel7 = BaggingClassifier()\nmodel7.fit(X_train, y_train)\ny_pred_model7 = model7.predict(X_test)\nconfusion_matrix_model7 = confusion_matrix(y_pred_model7, y_test)\nconfusion_matrix_model7","04eff5e5":"plot_roc_curve(model7, X_test, y_test)\nplt.title('Roc Curve')","a859f25d":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model7), \n                                             'Percision': precision_score(y_test, y_pred_model7), \n                                             'Recall': recall_score(y_test, y_pred_model7), \n                                             'F1_score': f1_score(y_test, y_pred_model7), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model7)}, index = ['Model7: Bagging Classifier']))\nmodel_comp","ab27d57a":"from sklearn.ensemble import RandomForestClassifier\nmodel8 = RandomForestClassifier()\nmodel8.fit(X_train, y_train)\ny_pred_model8 = model8.predict(X_test)\nconfusion_matrix_model8 = confusion_matrix(y_pred_model8, y_test)\nconfusion_matrix_model8","45598665":"plot_roc_curve(model8, X_test, y_test)\nplt.title('Roc Curve')","3bc5cdac":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model8), \n                                             'Percision': precision_score(y_test, y_pred_model8), \n                                             'Recall': recall_score(y_test, y_pred_model8), \n                                             'F1_score': f1_score(y_test, y_pred_model8), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model8)}, index = ['Model7: Random Forest Classifier']))\nmodel_comp","b08622e0":"from sklearn.ensemble import GradientBoostingClassifier\nmodel9 = GradientBoostingClassifier()\nmodel9.fit(X_train, y_train)\ny_pred_model9 = model9.predict(X_test)\nconfusion_matrix_model9 = confusion_matrix(y_pred_model9, y_test)\nconfusion_matrix_model9","97a1e63e":"plot_roc_curve(model9, X_test, y_test)\nplt.title('Roc Curve')","8e14c902":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model9), \n                                             'Percision': precision_score(y_test, y_pred_model9), \n                                             'Recall': recall_score(y_test, y_pred_model9), \n                                             'F1_score': f1_score(y_test, y_pred_model9), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model9)}, index = ['Model9: Gradient Boost Classifier']))\nmodel_comp","8eac923c":"from xgboost import XGBClassifier\n\nmodel10 = XGBClassifier()\nmodel10.fit(X_train, y_train)\ny_pred_model10 = model10.predict(X_test)\nconfusion_matrix_model10 = confusion_matrix(y_pred_model10, y_test)\nconfusion_matrix_model10\n","1a196f0d":"plot_roc_curve(model10, X_test, y_test)\nplt.title('Roc Curve')","952cb080":"model_comp = model_comp.append(pd.DataFrame({'Accuracy': accuracy_score(y_test, y_pred_model10), \n                                             'Percision': precision_score(y_test, y_pred_model10), \n                                             'Recall': recall_score(y_test, y_pred_model10), \n                                             'F1_score': f1_score(y_test, y_pred_model10), \n                                             'Jaccard_score': jaccard_score(y_test, y_pred_model10)}, index = ['Model10: XGradient Boost Classifier']))\nmodel_comp","af7802d4":"imanjowkar99@gmail.com\niman.da.99@aut.ac.ir","72af4e3c":"## Data Splitting","d1ccebf2":"## Model 7: Bagging","8341a256":"## Model2: QDA","7290035a":"## Model5: KNN","a7608a72":"# Model 9: Gradient Boost","6fd1ea72":"## Model4: Logistic Regression","d4396009":"## Model6: Decisoin Tree","23f45d6f":"# Model10: XGBoost","7ba1214f":"## Model3: Naive Bayes","5ed8a84e":"## Model8: Random Forest","c816203f":"# Model1: LDA"}}