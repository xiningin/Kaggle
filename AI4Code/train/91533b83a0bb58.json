{"cell_type":{"cc530860":"code","d820bf5b":"code","77c573b4":"code","5ed0c32b":"code","b7d306d8":"markdown","8199156f":"markdown","d0029d40":"markdown","710a4356":"markdown","1bf41685":"markdown"},"source":{"cc530860":"\"\"\"\nThe Euclid's algorithm is based on the below facts. \n1. If we subtract a smaller number from a larger (we reduce a larger number), GCD doesn\u2019t change. So if we keep subtracting repeatedly the larger of two, we end up with GCD.\n2. Now instead of subtraction, if we divide the smaller number, the algorithm stops when we find remainder 0.\n\"\"\"\ndef GCD_euclid(m,n):\n#     Let's consider m > n, if not swap them\n    if m < n: \n        (m,n) = (n,m)\n    \"\"\"\n    Consider the fact that 'd' divides m and n, hence it will divide the reminder of m and n which is (say)'r'\n    Hence, 'd' will be the gcd of \"n\" and \"r\"\n    \"\"\"\n    while m%n != 0:\n        (m,n) = (n,m%n)\n    return n\n\n\nGCD_euclid(15, 36)","d820bf5b":"def shuffle(l1,l2):\n    if len(l1) < len(l2):\n        minlength = len(l1)\n    else:\n        minlength = len(l2)\n    shuffled = []   \n    for i in range(minlength):\n        shuffled.append(l1[i])\n        shuffled.append(l2[i])\n    shuffled += l1[minlength:] + l2[minlength:] \n    return shuffled\n\n\nprint(shuffle([0,2,4],[1,3,5]))\nprint(shuffle([0,2,4],[1]))\nprint(shuffle([0],[1,3,5]))","77c573b4":"def build_table(l):\n    \"\"\"\n    Using dictionary build a table to count the frequency of numbers\n    \"\"\"\n    frequency = {}\n    for n in l:\n        if n in frequency.keys():           # If number already in dictionary, add one to the count \n            frequency[n] = frequency[n] + 1 \n        else:\n            frequency[n] = 1                # Else: add the number to dict and assign the value 1.\n    return frequency\n# build_table([13,12,11,13,14,13,7,7,13,14,12])\n\n\"\"\"Sort the Frequency dictionary\"\"\"\ndef sort_table(freq_dict):\n    # build a list in the form of repeatations(r), number(n)\n    freq_list = [(r,n) for n,r in freq_dict.items()]\n    \n    # sort the list \n    freq_list.sort()\n    \n    #return the fliped pair\n    return [(n,r) for r,n in freq_list]\n    \n# sort_table(a)\n    \n\"\"\"Final histogram function\"\"\"\ndef histogram(l):\n    frequency_table = build_table(l)\n    return sort_table(frequency_table)\n\nhistogram([13,7,12,7,11,13,14,13,7,11,13,14,12,14,14,7])","5ed0c32b":"def even(n):\n    return(n%2 == 0)\n\ndef sumsquare(l):\n    oddsum = 0\n    evensum = 0\n    for n in l:\n        if even(n):\n            evensum += n*n\n        else:\n            oddsum += n*n\n    return([oddsum,evensum])\n\nsumsquare([2,4,6])\nsumsquare([0,1,-1,0,2,-2,3,-3])","b7d306d8":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">\n1. Greatest Common Divisors (GCD) using Euclid's Algorithm<\/div>","8199156f":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">Data Structures and Programming in Python\n    \n<p style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">1. Greatest Common Divisors (GCD) using Euclid's Algorithm <\/p>\n\n<p style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\"> 2. Write a function shuffle(l1,l2) that takes as input two lists, l1 and l2, and returns a list consisting of the first elment in l1, then the first element in l2, then the second element in l2, then the second element in l2, and so on. If the two lists are not of equal length, the remaining elements of the longer list are appended at the end of the shuffled output.<\/p>\n\n    \nHere are some examples to show how your function should work.\n<ul >\n    <li>shuffle([0,2,4],[1,3,5])------\n        [0, 1, 2, 3, 4, 5]<\/li>\n    <li>shuffle([0,2,4],[1])------\n[0, 1, 2, 4]\n<\/li>\n    <li>shuffle([0],[1,3,5])------\n[0, 1, 3, 5]<\/li>\n    <\/ul>\n    \n    \n3. Write a Python function histogram(l) that takes as input a list of integers with repetitions and returns a list of pairs as follows:.\n\n <ul>   \n<li>for each number n that appears in l, there should be exactly one pair (n,r) in the list returned by the function, where r is the number of repetitions of n in l.<\/li>\n<li>the final list should be sorted in ascending order by r, the number of repetitions. For numbers that occur with the same number of repetitions, arrange the pairs in ascending order of the value of the number.<\/li>\n    <li>histogram([13,12,11,13,14,13,7,7,13,14,12])----\n[(11, 1), (7, 2), (12, 2), (14, 2), (13, 4)]<\/li>\n    <li>histogram([7,12,11,13,7,11,13,14,12])------\n[(14, 1), (7, 2), (11, 2), (12, 2), (13, 2)]\n<\/li>\n    <li>([13,7,12,7,11,13,14,13,7,11,13,14,12,14,14,7])-----\n[(11, 2), (12, 2), (7, 4), (13, 4), (14, 4)]<\/li>\n    <\/ul>\n  \n4. Write a Python function sumsquare(l) that takes a nonempty list of integers and returns a list [odd,even], where odd is the sum of squares all the odd numbers in l and even is the sum of squares of all the even numbers in l.\nHere are some examples to show how your function should work:   \n    \n- sumsquare([1,3,5])----[35, 0]\n- sumsquare([2,4,6])----[0, 56]\n    \n\n\n\n\n\n<\/div>","d0029d40":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">\n2. Write a function shuffle(l1,l2) that takes as input two lists, l1 and l2, and returns a list consisting of the first elment in l1, then the first element in l2, then the second element in l2, then the second element in l2, and so on. If the two lists are not of equal length, the remaining elements of the longer list are appended at the end of the shuffled output.\n\n    \nHere are some examples to show how your function should work.\n<ul>\n    <li>shuffle([0,2,4],[1,3,5])------\n        [0, 1, 2, 3, 4, 5]<\/li>\n    <li>shuffle([0,2,4],[1])------\n[0, 1, 2, 4]\n<\/li>\n    <li>shuffle([0],[1,3,5])------\n[0, 1, 3, 5]<\/li>\n    <\/ul><\/div>\n\n\n","710a4356":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">\n3. Write a Python function histogram(l) that takes as input a list of integers with repetitions and returns a list of pairs as follows:.\n\n <ul>   \n<li>for each number n that appears in l, there should be exactly one pair (n,r) in the list returned by the function, where r is the number of repetitions of n in l.<\/li>\n<li>the final list should be sorted in ascending order by r, the number of repetitions. For numbers that occur with the same number of repetitions, arrange the pairs in ascending order of the value of the number.<\/li>\n    <li>histogram([13,12,11,13,14,13,7,7,13,14,12])----\n[(11, 1), (7, 2), (12, 2), (14, 2), (13, 4)]<\/li>\n    <li>histogram([7,12,11,13,7,11,13,14,12])------\n[(14, 1), (7, 2), (11, 2), (12, 2), (13, 2)]\n<\/li>\n    <li>([13,7,12,7,11,13,14,13,7,11,13,14,12,14,14,7])-----\n[(11, 2), (12, 2), (7, 4), (13, 4), (14, 4)]<\/li>\n    <\/ul><\/div>","1bf41685":"<div style=\"background:#2b6684;color:white; font-family:cursive;padding:0.5em;border-radius:0.2em;font-size:20px;color:white\">4. Write a Python function sumsquare(l) that takes a nonempty list of integers and returns a list [odd,even], where odd is the sum of squares all the odd numbers in l and even is the sum of squares of all the even numbers in l.\nHere are some examples to show how your function should work:   \n    \n- sumsquare([1,3,5])----[35, 0]\n- sumsquare([2,4,6])----[0, 56]\n<\/div>"}}