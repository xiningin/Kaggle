{"cell_type":{"b5172a4f":"code","90a5bed0":"code","35fafaa5":"code","8ac95141":"code","546f8a8f":"code","f9aca404":"code","e11f8fe4":"code","23bfa9ef":"code","7a05dfee":"code","c7ed1dd9":"code","4daee110":"code","1fe752fc":"markdown"},"source":{"b5172a4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90a5bed0":"import pickle \nimport joblib\nimport json\nimport numpy as np\nimport base64\nimport cv2\nimport pywt\nimport joblib\nimport matplotlib.pyplot as plt","35fafaa5":"global __model\nglobal __class_number_to_name\nwith open('\/kaggle\/input\/dataset-for-facial-recognition-using-ml-approach\/data\/data\/saved_model.pkl', 'rb') as f:\n     __model = joblib.load(f)","8ac95141":"with open(\"\/kaggle\/input\/dataset-for-facial-recognition-using-ml-approach\/data\/data\/class_dictionary.json\", \"r\") as f:\n        class_name_to_number = json.load(f)\n        __class_number_to_name = {v:k for k,v in class_name_to_number.items()}","546f8a8f":"face_cascade = cv2.CascadeClassifier('\/kaggle\/input\/dataset-for-facial-recognition-using-ml-approach\/opencv\/opencv\/haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('\/kaggle\/input\/dataset-for-facial-recognition-using-ml-approach\/opencv\/opencv\/haarcascade_eye.xml')","f9aca404":"def crop_img_2eye(img_path):\n    img = cv2.imread(img_path)\n    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    for (x,y,w,h) in faces:\n        img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,255,255),2)\n        roi_gray = gray[y:y+h, x:x+w]\n        roi_color = img[y:y+h, x:x+w]\n        eyes = eye_cascade.detectMultiScale(roi_gray)\n        if len(eyes) >=2:\n            return roi_color\n            ","e11f8fe4":"def w2d(img, mode='haar', level=1):\n    imArray = img\n\n    imArray = cv2.cvtColor( imArray,cv2.COLOR_RGB2GRAY )\n    #convert to float\n    imArray =  np.float32(imArray)   \n    imArray \/= 255;\n\n    coeffs=pywt.wavedec2(imArray, mode, level=level)\n\n\n    coeffs_H=list(coeffs)  \n    coeffs_H[0] *= 0;  \n\n    imArray_H=pywt.waverec2(coeffs_H, mode);\n    imArray_H *= 255;\n    imArray_H =  np.uint8(imArray_H)\n\n    return imArray_H","23bfa9ef":"def predict(path):\n    img = crop_img_2eye(path)\n    scalled_raw_img = cv2.resize(img, (32, 32))\n    img_har = w2d(img,'db1',5)\n    scalled_img_har = cv2.resize(img_har, (32, 32))\n    test_img = np.vstack((scalled_raw_img.reshape(32*32*3,1),scalled_img_har.reshape(32*32,1)))\n    return __class_number_to_name[__model.predict(test_img.reshape(1,-1))[0]]","7a05dfee":"import os\npth = '\/kaggle\/input\/dataset-for-facial-recognition-using-ml-approach\/test\/test\/'\ndata = os.listdir(pth)","c7ed1dd9":"data","4daee110":"\nfor test_img in data:\n    print('Test image is,')\n    img = cv2.imread(pth+test_img)\n    plt.imshow(img)\n    plt.axis('off')\n    plt.show()\n    try:\n        pred = predict(pth+test_img)\n        print('Predicted Person is : {}'.format(pred))\n    except:\n        print('Image isn\\'t clear')\n\n    \n    ","1fe752fc":"# [Modeling code link](https:\/\/github.com\/RashikRahman\/Face_Match_Classifier\/blob\/master\/model\/Data%20Prep%20%26%20Modeling.ipynb)"}}