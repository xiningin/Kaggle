{"cell_type":{"0d59e1f9":"code","03d76572":"code","cb6b361f":"code","85fac864":"code","eb9c1c37":"code","a1fe5f60":"code","04903253":"code","9deff675":"code","05125b67":"markdown","0e46abf2":"markdown","4446d5ac":"markdown","14f82a14":"markdown","b7977912":"markdown","401f24d4":"markdown","1ecc5dfb":"markdown","b9cfb20c":"markdown","4e573145":"markdown"},"source":{"0d59e1f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport unicodedata\nimport requests\nimport json\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03d76572":"df_cities_full = pd.read_csv('\/kaggle\/input\/brazilian-cities-informations\/brazilian_cities_geo.csv')\ndf_cities_full.head()","cb6b361f":"capitals_filtered = df_cities_full[df_cities_full.capital_flag == 1]\ncapitals_list = capitals_filtered.city_name\ncapitals_list","85fac864":"converted_capitals_list = []\n\nfor item in capitals_list:\n    converted = unicodedata.normalize(u'NFKD', item).encode('ascii', 'ignore').decode('utf8')\n    converted_capitals_list.append(converted)\nconverted_capitals_list","eb9c1c37":"capitals_filtered['converted_city_name'] = converted_capitals_list\ncapitals_filtered.head()","a1fe5f60":"distances = []\n\nfor item_origin, line_origin in capitals_filtered.iterrows():\n    \n    origin = line_origin.converted_city_name\n    origin_lat = line_origin.city_latitude\n    origin_long = line_origin.city_longitude\n#     print(origin, origin_lat, origin_long)\n    \n    for item_destination, line_destination in capitals_filtered.iterrows():\n    \n        destination = line_destination.converted_city_name\n        destination_lat = line_destination.city_latitude\n        destination_long = line_destination.city_longitude\n#         print(origin, origin_lat, origin_long)\n            \n        # call the OSMR API\n        r = requests.get(f\"http:\/\/router.project-osrm.org\/route\/v1\/car\/{origin_long},{origin_lat};{destination_long},{destination_lat}?overview=false\"\"\")\n        # then you load the response using the json libray\n        # by default you get only one alternative so you access 0-th element of the `routes`\n        routes = json.loads(r.content)\n        route_1 = routes.get(\"routes\")[0]\n        \n        distance = route_1['legs'][0]['distance']\n        duration = route_1['legs'][0]['duration']\n        \n#         print(route_1)\n        distances.append([origin, destination, distance\/1000, duration\/3600])\n","04903253":"df_distances = pd.DataFrame(distances)\ndf_distances.columns = ['origin', 'destination', 'distance_km', 'time_hours']\ndf_distances.head()","9deff675":"df_distances = df_distances[df_distances.distance_km > 0]\ndf_distances.head()","05125b67":"### Transform the results into a dataframe","0e46abf2":"# Find the distances and time travel between the states capitals using Open Street Map","4446d5ac":"Some steps are necessary to find the distancies between the capitals. The list below summarizes the process:\n* First, select all the state capitals from dataset and save it into a subset dataframe.\n* Convert the city names to unicode format (just to avoid broken charachters).\n* Create a list with the capital cities to be iterated on Open Street Map API.\n* Iterate over the routes origin and destination calling the API.\n* Save the results into a dataframe.\n \nIt is important to remark that the distance mapped is in kilometers and the time travel in hours.","14f82a14":"### Transform the characters","b7977912":"# Read input file","401f24d4":"### Evaluate the distances between the origins and destiations","1ecc5dfb":"### Add the converted names into the filtered dataframe","b9cfb20c":"### Get the cities list","4e573145":"### Remove the distances origin equals to the destination"}}