{"cell_type":{"d691cbf8":"code","8455db2d":"code","d09f1237":"code","43b94413":"code","69bbb8a1":"code","f188bbda":"code","adfb91dc":"code","7073a0eb":"code","4640c4dc":"code","fb230028":"code","efb34bff":"code","bbaa71db":"code","13622a6e":"code","4f70ba60":"code","c85f775d":"code","c764101e":"code","981ca0da":"code","2a469328":"code","d570cd36":"code","ccdf9aa9":"code","e3d3ec9d":"code","1bc70158":"code","631295c3":"code","7574875b":"code","cc1dfe2d":"code","5aaa3c16":"code","1c7d9461":"code","0cd16509":"code","900e4f5e":"code","23e6fae4":"code","2461c775":"code","a97a5875":"markdown","2dae050a":"markdown","d679b0b7":"markdown","2012cb90":"markdown","5a6e7b30":"markdown","2f05918e":"markdown","1ccf9b09":"markdown","f19bcaa8":"markdown","daad671f":"markdown"},"source":{"d691cbf8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","8455db2d":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","d09f1237":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","43b94413":"train.info()","69bbb8a1":"test.info()","f188bbda":"all = pd.concat([train, test], sort = False)\nall.info()","adfb91dc":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","7073a0eb":"all.info()","4640c4dc":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","fb230028":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","efb34bff":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","bbaa71db":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","13622a6e":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","4f70ba60":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","c85f775d":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","c764101e":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","981ca0da":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","2a469328":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","d570cd36":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","ccdf9aa9":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","e3d3ec9d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","1bc70158":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","631295c3":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","7574875b":"predictions = ada.predict(X_test)","cc1dfe2d":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","5aaa3c16":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","1c7d9461":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","0cd16509":"t_pred = ada.predict(TestForPred).astype(int)","900e4f5e":"PassengerId = all_test['PassengerId']","23e6fae4":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","2461c775":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","a97a5875":"****Train\/Test Split","2dae050a":"****Check Accuracy","d679b0b7":"# Import Data","2012cb90":"****Check Accuracy","5a6e7b30":"****Extra Features:","2f05918e":"# Import Libraries","1ccf9b09":"## Combine train and test","f19bcaa8":"****Build AdaBoost","daad671f":"****Final Predictions"}}