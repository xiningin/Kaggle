{"cell_type":{"b2ac2530":"code","d3a32491":"code","57b50b60":"code","870abeae":"code","66a68283":"code","fc8172f9":"markdown","75f0bac7":"markdown","9805cfb4":"markdown","de4601df":"markdown","bf8e71f4":"markdown","3d43350e":"markdown"},"source":{"b2ac2530":"import torch\nimport torchvision\nfrom torchvision import transforms, datasets\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim","d3a32491":"# Training data\ntrain = datasets.MNIST(\"\", train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))\n\n# Testing data\ntest = datasets.MNIST(\"\", train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))\n\n# Loading the datasets\ntrainset = torch.utils.data.DataLoader(train, batch_size=10, shuffle=True)\ntestset = torch.utils.data.DataLoader(test, batch_size=10, shuffle=True)","57b50b60":"# Creating a class with a forward NN with 3 hidden layers with 64 output size\n\nclass Net(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(28*28, 64)\n        self.fc2 = nn.Linear(64, 64)\n        self.fc3 = nn.Linear(64, 64)\n        self.fc4 = nn.Linear(64, 10)\n    \n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = F.relu(self.fc3(x))\n        x = F.log_softmax(self.fc4(x), dim=1)\n        \n        return x\n\nnet = Net()\nprint(net)","870abeae":"# Using Adam optimizer to optimize weights of the Neural Network\n\noptimizer = optim.Adam(net.parameters(), lr =0.001)\n\nEPOCHS = 3\n\nfor epoch in range(EPOCHS):\n    for data in trainset:\n        X, y = data\n        net.zero_grad()\n        output = net(X.view(-1, 28*28))\n        loss = F.nll_loss(output, y)\n        loss.backward()\n        optimizer.step()\n    print(loss)","66a68283":"# Calculating Accuracy\n\ncorrect = 0\ntotal = 0\n\nwith torch.no_grad():\n     for data in trainset:\n            X, y = data\n            output = net(X.view(-1, 784))\n            for idx, i in enumerate(output):\n                if torch.argmax(i) == y[idx]:\n                    correct += 1\n                total +=1\n                \nprint(\"Accuracy: \", round(correct\/total, 3))","fc8172f9":"## Building a Dense Neural Network for the MNIST dataset using PyTorch\n","75f0bac7":"Calculating the accuracy of the model","9805cfb4":"Getting MNIST data","de4601df":"Training the model using the MNIST dataset","bf8e71f4":"Creating a dense NN model with 3 hidden layers","3d43350e":"Importing necessary libraries"}}