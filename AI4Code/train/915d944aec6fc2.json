{"cell_type":{"5035db69":"code","14f172d1":"code","90214a11":"code","c599ee15":"code","f5cc6918":"code","f1f4f2cf":"code","52c94f1c":"code","1692a57c":"code","ca6875b3":"code","f816d485":"code","7ca466d1":"code","11b153bb":"code","1d4be4ab":"code","eae49073":"code","25e7929f":"code","9f3bd98e":"code","0dce2292":"code","0d973902":"code","5198913f":"code","61855272":"code","cb04494a":"code","474fe69a":"code","17cc5269":"code","568a6558":"code","64db9e5d":"code","7aaad6e0":"code","1ae96dbd":"code","1cb0d128":"code","a0a23292":"code","e8e23c7f":"code","ee057f5f":"code","0a57b697":"code","e6c04757":"code","57265075":"code","c172602d":"code","0cce0ead":"code","e4ce66bd":"markdown","a370eb0e":"markdown","da5f1e30":"markdown","3ef8db14":"markdown","dbc48adc":"markdown","4ba6f79a":"markdown","9f327908":"markdown","69dc5074":"markdown","468bd11c":"markdown","dfd698b1":"markdown","83e676d0":"markdown","0134a99d":"markdown","a458d234":"markdown","bdc0d3a0":"markdown"},"source":{"5035db69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","14f172d1":"import datetime\nimport pandas as pd\nimport requests\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport os\nimport plotly.express as px","90214a11":"mpl.rcParams['figure.figsize']=(10,8)\nmpl.rcParams['axes.grid']=False\n","c599ee15":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/srivatsan88\/YouTubeLI\/master\/dataset\/amazon_revenue_profit.csv')","f5cc6918":"df.head()","f1f4f2cf":"df.info()","52c94f1c":"df['Quarter']=pd.to_datetime(df['Quarter'])","1692a57c":"df.shape","ca6875b3":"df.isnull().any()","f816d485":"fig = px.line(df,x='Quarter',y='Revenue',title='Amazon profits')\n\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1,label='1m',step='month',stepmode='backward'),\n            dict(count=2,label='6m',step='month',stepmode='backward'),\n            dict(count=3,label='6mYTD',step='month',stepmode='backward'),\n            dict(count=4,label='2y',step='year',stepmode='backward'),\n            dict(count=5,label='3y',step='year',stepmode='backward'),\n            dict(step='all')\n        ])\n    )\n)\nfig.show()","7ca466d1":"from fbprophet import Prophet","11b153bb":"amazon_df=df.reset_index()[['Quarter','Revenue']].rename({'Quarter':'ds','Revenue':'y'},axis='columns')","1d4be4ab":"amazon_df.head()","eae49073":"amazon_df.tail()","25e7929f":"train=amazon_df[(amazon_df['ds']>='2005-03-31')&(amazon_df['ds']<='2019-03-31')]\ntest=amazon_df[amazon_df['ds']>'2019-03-31']","9f3bd98e":"train.shape","0dce2292":"test.shape","0d973902":"model=Prophet(interval_width=0.95)","5198913f":"model.fit(train)","61855272":"future=model.make_future_dataframe(periods=4,freq='Q') #as the time stamp is Quaterly & 4 is for test data records\nfuture\n","cb04494a":"forecast=model.predict(future)","474fe69a":"forecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","17cc5269":"fig1=model.plot(forecast)","568a6558":"model.plot_components(forecast)","64db9e5d":"pd.concat([amazon_df.set_index('ds')['y'],forecast.set_index('ds')['yhat']],axis=1).plot()","7aaad6e0":"holiday_sale=pd.DataFrame({\n    'holiday':'dec_jan_sale',\n    'ds':pd.to_datetime(['2019-12-31',\n                        '2018-12-31',\n                        '2017-12-31',\n                        '2016-12-31',\n                        '2015-12-31',\n                        '2014-12-31',\n                        '2013-12-31',\n                        '2012-12-31',\n                        '2011-12-31',\n                        '2010-12-31',\n                        '2009-12-31',\n                        '2008-12-31',\n                        '2007-12-31',\n                        '2006-12-31',\n                        '2005-12-31']),\n    'lower_window':0,\n    'upper_window':1,\n})","1ae96dbd":"holiday_sale","1cb0d128":"model2=Prophet(holidays=holiday_sale,seasonality_mode='multiplicative',interval_width=0.95)","a0a23292":"model2.fit(train)","e8e23c7f":"forecast=model2.predict(future)","ee057f5f":"forecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","0a57b697":"pd.concat([amazon_df.set_index('ds')['y'],forecast.set_index('ds')['yhat']],axis=1).plot()","e6c04757":"figure=model2.plot(forecast)","57265075":"model2.plot_components(forecast)","c172602d":"ypred=model2.predict(test)","0cce0ead":"pd.concat([amazon_df.set_index('ds')['y'],ypred.set_index('ds')['yhat']],axis=1).plot()","e4ce66bd":"**As quareter field is of object type, converting that to date type**","a370eb0e":"## Additive - no trend and stationary\n## Multiplicative - trend and non stationary","da5f1e30":"# Prophet model","3ef8db14":"**We are going to retrain the model such that it capture the seasonality at the year end and start, and the trend correctly**","dbc48adc":"**we can see that there is a positive trend in the data and the time series is not stationary about mean, and there is seasonality at the end of each year.**","4ba6f79a":"**The above dataset gives the quarter revenue of each years in Amazon,We are going to build a model to predict the future revenue of the company**","9f327908":"# Train test split","69dc5074":"# Retraining","468bd11c":"**This model is pretty good than the previous one, it captures the trend and seasonality ( holiday sales) very well**","dfd698b1":"**It works very well on the test data too ............... : )**","83e676d0":"**From the plots, we can understand that there is seasonality in the end of December and start of january**","0134a99d":"# Test prediction","a458d234":"**Here the model is multiplicative as there is trend and seasonality**","bdc0d3a0":"**We can able to find that the yhat which is the model prediction doesn't capture the time series data well, because there is variations in data during the seasonality and there are some wrong predictions too apart from the confidence interval**"}}