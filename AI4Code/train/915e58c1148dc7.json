{"cell_type":{"86ace226":"code","6b5bf768":"code","45b5976a":"code","4cfad832":"code","9bc7a404":"code","a76e2b8b":"code","0221d296":"code","d9e208f0":"code","a7396c0c":"code","39ad2d3d":"code","5788bcaa":"code","a523fc17":"code","8f8e5baf":"code","f49c6edb":"code","69fbd2ac":"markdown","47dcd787":"markdown","2cf98663":"markdown","531fbef3":"markdown","0ab3074e":"markdown","3d19aa55":"markdown","da1611b0":"markdown","c5dc5ad7":"markdown","13e02171":"markdown"},"source":{"86ace226":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\n\nimport tensorflow as tf\nfrom matplotlib import pyplot as plt","6b5bf768":"data_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/'\n\ntrain_dir = data_dir + 'train\/'\ntest_dir = data_dir + 'test\/'\nval_dir = data_dir + 'val\/'","45b5976a":"from glob import glob\n\nnormal_img = glob(train_dir + \"NORMAL\/*.jpeg\")\npneumonia_img = glob(train_dir + \"PNEUMONIA\/*.jpeg\")\n\nplt.figure(figsize=(12,8))\n\nplt.subplot(1,2,1)\nplt.imshow(cv2.imread(normal_img[0]))\nplt.title(\"Normal\")\n\n\nplt.subplot(1,2,2)\nplt.imshow(cv2.imread(pneumonia_img[0]))\nplt.title(\"Pneumonia\")","4cfad832":"labels = ['NORMAL','PNEUMONIA']\n\n#Image dimensions\nimg_size = 200\n\n\ndef read_data(image_path):\n    print(\"Reading from Directory : \",image_path)\n    \n    #read, reshape and save images to dataframe,\n    #label according to subfoldera\n    X = []\n    y = [] #0 -> NORMAL & 1 -> PNEUMONIA\n    \n    \n    for label in labels:\n        print(\"Subfolder : \", label)\n        \n        img_cnt = 0;\n        path = image_path + label\n        \n        #Read all images from\n        for image in os.listdir(path):\n            \n            img = cv2.imread(path + '\/' + image,cv2.IMREAD_GRAYSCALE)\n            img = cv2.resize(img,(img_size,img_size))\n                \n            X.append(img)\n            y.append(labels.index(label))\n            \n            img_cnt += 1\n        pass        \n            \n        print(\"Done. Read \",img_cnt,\" Images\")\n    \n    ## Normalize\n    X = np.array(X)\/255\n    X = X.reshape(-1,img_size,img_size,1)\n    y = np.array(y)\n        \n    return X,y    ","9bc7a404":"X_train,y_train = read_data(train_dir)\nX_test,y_test = read_data(test_dir)\nX_val,y_val = read_data(val_dir)","a76e2b8b":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32,(5,5),activation='relu',input_shape=(img_size,img_size,1)))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Conv2D(48,(5,5),activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.MaxPooling2D(2,2))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128,activation='relu'))\nmodel.add(tf.keras.layers.Dropout(0.4))\nmodel.add(tf.keras.layers.Dense(1,activation='sigmoid'))","0221d296":"#Train Model\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nhistory = model.fit(X_train,y_train,epochs=10,batch_size=50,validation_data=(X_val,y_val),shuffle=True)","d9e208f0":"model.summary()","a7396c0c":"plt.plot(history.history['accuracy'],label='Train Accuracy')\nplt.plot(history.history['val_accuracy'],label='Test Accuracy')\nplt.legend()","39ad2d3d":"plt.plot(history.history['loss'],label='Train Loss')\nplt.plot(history.history['val_loss'],label='Validation Loss')\nplt.legend()","5788bcaa":"score = model.evaluate(X_test,y_test)\nprint('Loss : ',score[0],' Accuracy ',round(score[1]*100,2),\" %\")","a523fc17":"y_pred = model.predict(X_test)\ny_pred = np.where(y_pred>0.5,1,0)","8f8e5baf":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncm = confusion_matrix(y_true=y_test, y_pred=y_pred)\n\nsns.heatmap(cm,annot=True,fmt='g',xticklabels=labels,yticklabels=labels)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","f49c6edb":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test,y_pred))","69fbd2ac":"#### Plotting model Training History","47dcd787":"#### Loading Train,Validation and Test data","2cf98663":"## Evaluating CNN using Test Data","531fbef3":"### Sample Images","0ab3074e":"## Defining and Training CNN Model","3d19aa55":"## Generating Dataset\n\nImages are stored in three directories train,test and val, each containing two subdirectories NORMAL and PNEUMONIA","da1611b0":"# Introduction\n\nTraining a CNN model to detect, if a patient has pneumonia form his\/her chest's X-Ray Image","c5dc5ad7":"### Plot Confusion Matrix","13e02171":"##### Import Libraries"}}