{"cell_type":{"21fc7b9d":"code","6cf2ec4b":"code","240debd9":"code","276dc0db":"code","08a6826d":"code","899f8751":"code","d75c70f0":"code","8a289ed9":"code","0cac76fc":"code","fa6d3caa":"code","8dec36a9":"code","3c479729":"code","3e70b325":"code","f9cb414d":"code","1a8b13e1":"code","4fa28b90":"code","567de8cc":"code","b7f22557":"code","a0fa6808":"code","1602195b":"code","f234f074":"code","2d0b4b27":"code","b1faba8b":"code","2ac66d50":"code","9a278699":"code","7e7cda63":"code","ad914e73":"code","29c4e5b7":"code","144c2bdf":"code","2f6fced1":"code","30470e2c":"code","ec1405af":"code","c1401564":"code","75cfa754":"code","79b97c33":"code","fb2cb547":"code","5e462939":"code","c46e1c42":"code","244fdeeb":"code","280f0eab":"code","a89a4c84":"code","215b4bd5":"code","0c0c2b53":"code","ec31107a":"code","7e4d0e6d":"code","9636a173":"code","18916ff7":"code","6b1145ac":"code","4c2bfffd":"code","f48fd779":"code","edd1d05a":"code","54a4f443":"code","cb04910f":"code","524451af":"code","e2d1d4d1":"code","217ef10b":"code","0a6f223a":"code","ad3c94ef":"code","74e32a78":"code","36028054":"code","da2045ce":"code","e4b01251":"code","66c02be0":"code","7f0a4bb2":"code","35f944b5":"code","dc4c006a":"code","f71efdeb":"code","68b57d75":"code","e7701fbb":"code","94b99489":"code","3b359efb":"code","9ffa7bba":"code","833fc2ac":"code","c21c4285":"code","9e3dbc71":"code","d11ab7be":"code","608e139d":"code","6352c7a8":"code","12478045":"code","32be934e":"code","d965749e":"code","87b91956":"code","51aa6cb5":"code","442031d8":"code","54b975cd":"code","cdc8024d":"code","0051ecd4":"code","cb267e5f":"code","81352233":"code","4992c1ed":"code","0d78afb3":"code","0b76d187":"code","812503b3":"code","b18e450f":"code","2875d3c5":"code","45aa54ef":"code","1def128e":"code","748d9353":"code","9824030c":"code","9bee552d":"code","67a283f4":"code","a70c4e29":"code","002f6038":"code","715bf3c0":"code","1834290b":"code","68b13194":"code","01331808":"code","abe9af47":"code","bb9894c5":"markdown","193cedfb":"markdown","191a04f2":"markdown","406f3ca9":"markdown","65158886":"markdown","9711b595":"markdown","166b2a6f":"markdown","4903686b":"markdown","e6886191":"markdown","2063c0e3":"markdown","288d2c53":"markdown","f1042ec3":"markdown","d7297f4c":"markdown","de7fcc54":"markdown","c8621b66":"markdown","2b7cca3d":"markdown","402bf69b":"markdown","0a482cf6":"markdown","389328ec":"markdown","dff63ec6":"markdown","d79345a8":"markdown","27ac5a7b":"markdown","3e6a67dd":"markdown","16c4bd2b":"markdown","f6cf7683":"markdown","32b1c566":"markdown","e9244410":"markdown","f37e1c34":"markdown","0dbeda71":"markdown","c9c657be":"markdown","e3d05cfb":"markdown","dd0685c3":"markdown","ee9f046f":"markdown"},"source":{"21fc7b9d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nimport datetime\nfrom sklearn.model_selection import train_test_split\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom collections import Counter\nimport re\nfrom sklearn.preprocessing import StandardScaler","6cf2ec4b":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","240debd9":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","276dc0db":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","08a6826d":"df_train.info()","899f8751":"df_train.head(5)","d75c70f0":"df_test.info()","8a289ed9":"df_test.head(5)","0cac76fc":"sample_submission.head(5)","fa6d3caa":"sample_submission.info()","8dec36a9":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","3c479729":"data.info()","3e70b325":"#\u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\n\ndata['Cuisine Style']","f9cb414d":"data['Cuisine Style'].value_counts()","1a8b13e1":"data['NAN_Cuisine Style'] = pd.isna(data['Cuisine Style']).astype('float64')\ndata['Cuisine Style'].fillna(\"['Other']\", inplace=True)","4fa28b90":"data.info()","567de8cc":"data['NAN_Price Range'] = pd.isna(data['Price Range']).astype('float64')\n\ndata['Price Range'] = data['Price Range'].fillna(0)\n","b7f22557":"data.info()","a0fa6808":"data['NAN_Number_of_Reviews_is'] = pd.isna(data['Number of Reviews']).astype('float64')","1602195b":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 0, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u0442\u0434...\ndata['Number of Reviews'].fillna(0, inplace=True)","f234f074":"data.info()","2d0b4b27":"data['NAN_Reviews'] = pd.isna(data['Reviews']).astype('float64')\ndata['Reviews'].fillna(\"[[], []]\", inplace=True)","b1faba8b":"data.info()","2ac66d50":"data.Restaurant_id.value_counts()","9a278699":"def change_id(x):\n    if 'id_' in str(x):\n        return str(x).replace('id_', '')\n    else: return x\ndata.Restaurant_id = data.Restaurant_id.apply(change_id)\ndata.Restaurant_id = pd.to_numeric(data.Restaurant_id)","7e7cda63":"data.info()","ad914e73":"data.City.value_counts()","29c4e5b7":"data['City_origin'] = data['City']","144c2bdf":"#data = pd.get_dummies(data, columns=[ 'City',], dummy_na=True)","2f6fced1":"data.info()","30470e2c":"type(data['Cuisine Style'].iloc[0])","ec1405af":"data['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: re.findall('\\w+\\s*\\w+\\s*\\w+', str(x)))","c1401564":"type(data['Cuisine Style'].iloc[15])","75cfa754":"data.info()","79b97c33":"data.Ranking.value_counts()","fb2cb547":"data['Price Range'].value_counts()","5e462939":"#\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c\n\nprice_dict = {\"0\": 0, \"$\": 1, \"$$ - $$$\": 2, \"$$$$\": 3}\n\ndata['Price Range'] = data['Price Range'].replace(to_replace=price_dict)\ndata['Price Range'].value_counts()","c46e1c42":"data['Number of Reviews'].value_counts()","244fdeeb":"type(data.Reviews.iloc[0])","280f0eab":"data['Reviews'].value_counts()","a89a4c84":"def fill_na_reviews(x):\n    if x == '[[], []]':\n        return None\n    else:\n        return x\ndata['Reviews'] = data['Reviews'].fillna(fill_na_reviews)","215b4bd5":"data['Review_date'] = data['Reviews'].str.findall('\\d+\/\\d+\/\\d+')\n","0c0c2b53":"data['Review_date']","ec31107a":"data.info()","7e4d0e6d":"data.URL_TA","9636a173":"data.drop(['URL_TA'], axis=1, inplace=True)","18916ff7":"data.info()","6b1145ac":"data.ID_TA","4c2bfffd":"def change_id_TA(x):\n    if 'd' in str(x):\n        return str(x).replace('d', '')\n    else: return x\ndata.ID_TA = data.ID_TA.apply(change_id_TA)\ndata.ID_TA = pd.to_numeric(data.ID_TA)","f48fd779":"data.info()","edd1d05a":"data.columns","54a4f443":"cuisines = set()\n\nfor i in data['Cuisine Style']:\n    for j in i:\n        cuisines.add(j)","cb04910f":"cuisines","524451af":"food = {}  # \u0441\u043e\u0437\u0434\u0430\u0451\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430\u0445\nfor item in cuisines:  # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432\n    food[item] = 0 # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043b\u044e\u0447, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c\u0443 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0443\n\nfor i in data['Cuisine Style']:   # \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432\n    for j in i:   # \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u0446\u0435\u043f\u0442\u0435\n        food[j] += 1   # \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043d\u0430 1","e2d1d4d1":"food","217ef10b":"pop_cuisine = []\nfor key, value in food.items():\n    if value > 3000:\n        pop_cuisine.append(key)\npop_cuisine","0a6f223a":"type(data['Cuisine Style'].iloc[0])","ad3c94ef":"def popular_cuisine(x):\n    for element in pop_cuisine:\n        if element in x:\n            return 1\n        else:\n            continue\ndata['Popular_cuisine'] = data['Cuisine Style'].apply(popular_cuisine)","74e32a78":"data['Popular_cuisine'].value_counts(dropna = False)","36028054":"data['Popular_cuisine'].fillna(0, inplace = True)","da2045ce":"data.info()","e4b01251":"data['Count_cuisines'] = data['Cuisine Style'].apply(lambda x: len(x))","66c02be0":"data['Count_cuisines'].value_counts(dropna=False)","7f0a4bb2":"data.info()","35f944b5":"data['Review_date'] = data['Reviews'].str.findall('\\d+\/\\d+\/\\d+')\ndata['len_of_reviews'] = data['Review_date'].apply(lambda x: x if x == None else len(x))\ndata['len_of_reviews'].value_counts(dropna = False)","dc4c006a":"data['len_of_reviews'].fillna(2, inplace = True)","f71efdeb":"def days_to_now(row):\n    if row['Review_date'] == None:\n        return None\n    return datetime.datetime.now() - pd.to_datetime(row['Review_date']).max()\n\ndef days_between_reviews(row):\n    if row['Review_date'] == None:\n        return None\n    return pd.to_datetime(row['Review_date']).max() - pd.to_datetime(row['Review_date']).min()\n\ndata['Days_to_now'] = data.apply(days_to_now, axis = 1).dt.days\ndata['Days_between_reviews'] = data[data['len_of_reviews']==2].apply(days_between_reviews, axis = 1).dt.days\n","68b57d75":"data.info()","e7701fbb":"data['Days_between_reviews'].value_counts(dropna = False)","94b99489":"data['Days_to_now'] = data['Days_to_now'].fillna(data['Days_to_now'].median())\ndata['Days_between_reviews'] = data['Days_between_reviews'].fillna(data['Days_between_reviews'].median())\n","3b359efb":"data.info()","9ffa7bba":"data['City_origin'].value_counts()","833fc2ac":"\u0421ity_population_dict = {'London' : 8908, 'Paris' : 2206, 'Madrid' : 3223, 'Barcelona' : 1620, \n                        'Berlin' : 6010, 'Milan' : 1366, 'Rome' : 2872, 'Prague' : 1308, \n                        'Lisbon' : 506, 'Vienna' : 1888, 'Amsterdam' : 860, 'Brussels' : 179, \n                        'Hamburg' : 1841, 'Munich' : 1457, 'Lyon' : 506, 'Stockholm' : 961, \n                        'Budapest' : 1752, 'Warsaw' : 1764, 'Dublin' : 553, \n                        'Copenhagen' : 616, 'Athens' : 665, 'Edinburgh' : 513, \n                        'Zurich' : 415, 'Oporto' : 240, 'Geneva' : 201, 'Krakow' : 769, \n                        'Oslo' : 681, 'Helsinki' : 643, 'Bratislava' : 426, \n                        'Luxembourg' : 119, 'Ljubljana' : 284}\ndata['\u0421ity_population'] = data.apply(lambda row: \u0421ity_population_dict[row['City_origin']], axis = 1)","c21c4285":"data.info()","9e3dbc71":"data['\u0421ount_of_rest'] = data['City_origin'].map(data.groupby('City_origin')['Ranking'].max().to_dict())","d11ab7be":"data['\u0421ount_of_rest'].value_counts()","608e139d":"data['Rest_on_person'] = data['\u0421ity_population']\/data['\u0421ount_of_rest']","6352c7a8":"data['Rest_on_person']","12478045":"data['Ranking_on_city'] = data['Ranking'] \/ data['\u0421ount_of_rest']","32be934e":"data.info()","d965749e":"data.columns","87b91956":"correlation = data[data['sample'] == 1][['Ranking', 'Price Range','Number of Reviews', 'Rating','Popular_cuisine', 'Count_cuisines', 'len_of_reviews', 'Days_to_now', 'Days_between_reviews', '\u0421ity_population', '\u0421ount_of_rest']].corr()\nplt.figure(figsize=(20, 10))\nsns.heatmap(correlation, annot=True, cmap='coolwarm')","51aa6cb5":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","442031d8":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","54b975cd":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","cdc8024d":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","0051ecd4":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","cb267e5f":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","81352233":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","4992c1ed":"mn = data.groupby('City_origin')['Ranking'].mean()\nst = data.groupby('City_origin')['Ranking'].std()\ndata['Std_Ranking'] = (data['Ranking'] - data['City_origin'].map(mn))\/data['City_origin'].map(st)","0d78afb3":"data.info()","0b76d187":"data.columns","812503b3":"data.drop(['Restaurant_id','NAN_Cuisine Style', 'NAN_Price Range', 'Cuisine Style', 'Reviews', 'ID_TA', 'NAN_Cuisine_Style', 'len_of_reviews','NAN_Price_Range', 'NAN_Number_of_Reviews_is','NAN_Reviews', 'City_origin', 'City', 'Review_date'], axis=1, inplace=True, errors='ignore')","b18e450f":"data.columns","2875d3c5":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = data.query('sample == 1').drop(['sample'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","45aa54ef":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","1def128e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","748d9353":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","9824030c":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","9bee552d":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","67a283f4":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","a70c4e29":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","002f6038":"test_data.sample(10)","715bf3c0":"test_data = test_data.drop(['Rating'], axis=1)","1834290b":"sample_submission","68b13194":"predict_submission = model.predict(test_data)","01331808":"predict_submission","abe9af47":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","bb9894c5":"****Reviews","193cedfb":"# DATA","191a04f2":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","406f3ca9":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","65158886":"# import","9711b595":"City Origin","166b2a6f":"\u041f\u043e\u043a\u0430 \u043d\u0435 \u0437\u043d\u0430\u0435\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u043b\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a","4903686b":"# Cleaning and Prepping Data","e6886191":"# Model \n\u0421\u0430\u043c ML","2063c0e3":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a Number of Reviews","288d2c53":"# EDA ","f1042ec3":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d7297f4c":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","de7fcc54":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","c8621b66":"# Data Preprocessing\n","2b7cca3d":"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","402bf69b":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","0a482cf6":"Number of Reviews","389328ec":"Cuisine Style","dff63ec6":"Ranking","d79345a8":"# Feature Engeneering","27ac5a7b":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","3e6a67dd":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430, \u0430 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435. \u041e\u0441\u0442\u0430\u0432\u0438\u043c, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0432","16c4bd2b":"\u041e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c","f6cf7683":"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435","32b1c566":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","e9244410":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a Price Range","f37e1c34":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a Cuisine Style","0dbeda71":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a City","c9c657be":"Restaurant_id","e3d05cfb":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","dd0685c3":"****Reviews","ee9f046f":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?"}}