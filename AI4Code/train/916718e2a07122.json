{"cell_type":{"99f81927":"code","af410ed5":"code","6e8f51db":"code","89b488bd":"code","d7f68bb8":"code","0834f1f1":"code","3dd92851":"code","1bea60da":"code","aa19c286":"code","442ba04c":"code","8476b061":"code","f177d90b":"code","d744fd13":"code","9187d341":"code","2d748123":"code","11b75d46":"code","2d77bc34":"code","7207206c":"code","d2a4874d":"code","3fcd5cb1":"code","3e28150b":"code","0525e8d0":"code","2eaebce2":"code","c52b337d":"code","49cfc59f":"code","2d723ae7":"code","257658c9":"code","2d6dd938":"code","9c893e72":"code","056b0a6d":"code","8a3e1f76":"code","c5cfa9f1":"code","b85ce722":"code","83182155":"code","2de01edd":"code","0c0c9beb":"code","6cc2eb51":"code","1ae7158a":"code","c204886d":"code","01916604":"code","c3c30b45":"code","77e6e437":"code","053b68c6":"code","2e7b9f24":"code","0e588683":"code","d39acf8b":"code","0fbfb3cf":"code","94732e18":"code","8cce4528":"code","0401c5d7":"markdown","8aab1f47":"markdown","d3fdc968":"markdown","c3de99fd":"markdown","be9d094b":"markdown","506ac0b2":"markdown","696f97e9":"markdown","c204b99a":"markdown","1a1df79c":"markdown","6e526f23":"markdown","e16775e0":"markdown","7cf2677b":"markdown","839d2f1c":"markdown","ded323b1":"markdown","98ba8fdd":"markdown","0ee9b448":"markdown","ce6b8afc":"markdown","0cd73492":"markdown","001621a9":"markdown","9d3a436d":"markdown","423991b1":"markdown","4a2009b4":"markdown","e6a221d8":"markdown","4270110d":"markdown","edc46ef9":"markdown","d88e3c10":"markdown","7999ad59":"markdown","772f2637":"markdown","ea185eae":"markdown","86e14650":"markdown","ed5fc500":"markdown","f8305996":"markdown","ac54e58f":"markdown","a650296a":"markdown","22bb5ef3":"markdown","eac4066b":"markdown","247335bb":"markdown","91e20555":"markdown","621c5f74":"markdown","352f8518":"markdown","eac6339a":"markdown","53cd939a":"markdown","e0c61dab":"markdown","38715bd5":"markdown","ab7ff141":"markdown","3b1a9df8":"markdown","9cd4dbaa":"markdown","67500dd9":"markdown","30eae71b":"markdown","034d7a72":"markdown","90638556":"markdown","d676ea5f":"markdown","d82dc9b4":"markdown","3a243b70":"markdown","6ec52fac":"markdown","28f0ea92":"markdown","3b417b29":"markdown","14eb13b0":"markdown","00c7eca4":"markdown","43408828":"markdown"},"source":{"99f81927":"import numpy as np \nimport pandas as pd","af410ed5":"df = pd.read_excel('..\/input\/Canada.xlsx', sheet_name='Canada by Citizenship', skiprows=range(20), skipfooter=2)\ndf.head()","6e8f51db":"df.info()","89b488bd":"# in pandas axis=0 represents rows (default) and axis=1 represents columns.\ndf.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)\ndf.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)\ndf.head()","d7f68bb8":"df['Total'] = df.sum(axis=1)\ndf.isnull().sum().any()","0834f1f1":"df.describe()","3dd92851":"df.set_index('Country', inplace=True)\n\n# optional: to remove the name of the index\ndf.index.name = None","1bea60da":"df.columns = list(map(str, df.columns))\n\n# useful for plotting later on\nyears = list(map(str, range(1980, 2014)))","aa19c286":"import matplotlib.pyplot as plt\n\n# we are using the inline backend\n%matplotlib inline ","442ba04c":"print(plt.style.available)\nplt.style.use(['ggplot']) # for ggplot-like style","8476b061":"import seaborn as sns","f177d90b":"haiti = df.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column\nhaiti.head()","d744fd13":"haiti.plot()","9187d341":"haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting\nhaiti = haiti.astype(int)\n\nfig = plt.figure(figsize=(20, 8))\nax = fig.add_subplot(121)\nhaiti.plot(kind='line',ax=ax)\n\nax.set_title('Immigration from Haiti Matplotlib')\nax.set_ylabel('Number of immigrants')\nax.set_xlabel('Years')\n\n# ax = fig.add_subplot(122)\n# sns.lineplot(x=haiti.index, y=haiti.values, ax=ax)\n\n# ax.set_title('Immigration from Haiti Seaborn')\n# ax.set_ylabel('Number of immigrants')\n# ax.set_xlabel('Years')\n\nplt.tight_layout()\nplt.show() # need this line to show the updates made to the figure","2d748123":"fig = plt.figure(figsize=(20, 8))\nax = fig.add_subplot(121)\nhaiti.plot(kind='line',ax=ax)\n\nax.set_title('Immigration from Haiti Matplotlib')\nax.set_ylabel('Number of immigrants')\nax.set_xlabel('Years')\n# annotate the 2010 Earthquake. \n# syntax: text(x, y, label)\nax.text(2005, 6000, '2010 Earthquake') # see note below\n\nax = fig.add_subplot(122)\nsns.lineplot(x=haiti.index, y=haiti.values, ax=ax)\n\nax.set_title('Immigration from Haiti Seaborn')\nax.set_ylabel('Number of immigrants')\nax.set_xlabel('Years')\n\nax.text(2005, 6000, '2010 Earthquake') \n\nplt.tight_layout()\nplt.show() # need this line to show the updates made to the figure","11b75d46":"data = df.loc[['China', 'India'], years]\ndata.head()","2d77bc34":"data = data.T\ndata.head()","7207206c":"data.index = data.index.map(int) # let's change the index values of data to type integer for plotting\ndata = data.astype(int)\n\nfig = plt.figure(figsize=(20, 8))\nax = fig.add_subplot(121)\ndata.plot(kind='line', ax=ax)\n\nax.set_title('Immigrants from China and India Matplotlib')\nax.set_ylabel('Number of immigrants')\nax.set_xlabel('Years')\n\n\nax = fig.add_subplot(122)\nsns.lineplot(data=data, ax=ax)\n\nax.set_title('Immigrants from China and India Seaborn')\nax.set_ylabel('Number of immigrants')\nax.set_xlabel('Years')\n\n\nplt.tight_layout()\nplt.show() # need this line to show the updates made to the figure","d2a4874d":"# Step 1: Get the dataset. We will sort on this column to get our top 5 countries \n# using pandas sort_values() method\ndf.sort_values(by='Total', ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_top5 = df.head()\n\n# transpose the dataframe\ndf_top5 = df_top5[years].T \n\ndf_top5.index = df_top5.index.map(int) \n\n# Step 2: Plot the dataframe.\nfig = plt.figure(figsize=(20,7))\nax = fig.add_subplot(121)\ndf_top5.plot(kind='line', ax=ax) \n\nax.set_title('Immigration Trend of Top 5 Countries Matplotlib')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')\n\nax = fig.add_subplot(122)\nsns.lineplot(data=df_top5, ax=ax) \n\nax.set_title('Immigration Trend of Top 5 Countries Seaborn')\nax.set_ylabel('Number of Immigrants')\nax.set_xlabel('Years')\n\nplt.tight_layout()\nplt.show()","3fcd5cb1":"# np.histogram returns 2 values\ncount, bin_edges = np.histogram(df['2013'])\n\nprint(count) # frequency count\nprint(bin_edges) # bin ranges, default = 10 bins","3e28150b":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf['2013'].plot(kind='hist', ax=ax)\n\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Matplotlib') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.distplot(df['2013'], kde=False, ax=ax) \n\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Seaborn') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants')\n\nplt.tight_layout()\nplt.show()","0525e8d0":"# 'bin_edges' is a list of bin intervals\ncount, bin_edges = np.histogram(df['2013'])\n\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf['2013'].plot(kind='hist', ax=ax)\n\nax.set_xticks(bin_edges)\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Matplotlib') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.distplot(df['2013'], kde=False, bins=bin_edges, ax=ax) \n\nax.set_xticks(bin_edges)\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Seaborn') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants')\n\nplt.tight_layout()\nplt.show()","2eaebce2":"df.loc[['Denmark', 'Norway', 'Sweden'], years].T.columns.tolist()","c52b337d":"# transpose dataframe\ndf_t = df.loc[['Denmark', 'Norway', 'Sweden'], years].T\n\n# generate histogram\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_t.plot(kind='hist', ax=ax)\n\nax.set_title('Immigration from Denmark, Norway, and Sweden from 1980 - 2013 Matplotlib')\nax.set_ylabel('Number of Years')\nax.set_xlabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.distplot(df_t, kde=False, ax=ax, color=['r', 'g', 'b'], label=df_t.columns.tolist()) \n\nax.legend()\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Seaborn') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants')\n\nplt.tight_layout()\nplt.show()","49cfc59f":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_t.plot(kind='hist', bins=15, alpha=0.6, ax=ax, color=['coral', 'darkslateblue', 'mediumseagreen'])\n\nax.set_xticks(bin_edges)\nax.set_title('Immigration from Denmark, Norway, and Sweden from 1980 - 2013 Matplotlib')\nax.set_ylabel('Number of Years')\nax.set_xlabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.distplot(df_t, kde=False, bins=15, hist_kws={'alpha':0.6},\n             color=['coral', 'darkslateblue', 'mediumseagreen'], ax=ax,\n             label=df_t.columns.tolist()) \n\nax.legend()\nax.set_xticks(bin_edges)\nax.set_title('Histogram of Immigration from 195 Countries in 2013 Seaborn') \nax.set_ylabel('Number of Countries') \nax.set_xlabel('Number of Immigrants')\n\nplt.tight_layout()\nplt.show()","2d723ae7":"# step 1: get the data\ndf_iceland = df.loc['Iceland', years]\ndf_iceland = df_iceland.astype(int)\n\n# step 2: plot data\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_iceland.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Year') \nax.set_ylabel('Number of immigrants') \nax.set_title('Icelandic immigrants to Canada from 1980 to 2013 Matplotlib') \n\nax = fig.add_subplot(122)\nsns.barplot(x=df_iceland.index, y=df_iceland.values, palette='deep', ax=ax) \n\nax.tick_params(axis='x', rotation=90)\nax.set_xlabel('Year') \nax.set_ylabel('Number of immigrants') \nax.set_title('Icelandic immigrants to Canada from 1980 to 2013 Seaborn') \n\nplt.tight_layout()\nplt.show()","257658c9":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_iceland.plot(kind='bar', ax=ax)\n\nax.set_xlabel('Year') \nax.set_ylabel('Number of immigrants') \nax.set_title('Icelandic immigrants to Canada from 1980 to 2013 Matplotlib') \n\n# Annotate arrow\nax.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2))\n\n# Annotate Text\nax.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=77,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nax = fig.add_subplot(122)\nsns.barplot(x=df_iceland.index, y=df_iceland.values, palette='deep', ax=ax) \n\nax.tick_params(axis='x', rotation=90)\nax.set_xlabel('Year') \nax.set_ylabel('Number of immigrants') \nax.set_title('Icelandic immigrants to Canada from 1980 to 2013 Seaborn') \n\n# Annotate arrow\nax.annotate('',                      # s: str. Will leave it blank for no text\n             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',         # will use the coordinate system of the object being annotated \n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2))\n\n# Annotate Text\nax.annotate('2008 - 2011 Financial Crisis', # text to display\n             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)\n             rotation=77,                  # based on trial and error to match the arrow\n             va='bottom',                    # want the text to be vertically 'bottom' aligned\n             ha='left',                      # want the text to be horizontally 'left' algned.\n            )\n\nplt.tight_layout()\nplt.show()","2d6dd938":"# sort dataframe on 'Total' column (descending)\ndf.sort_values(by='Total', ascending=True, inplace=True)\n\n# get top 15 countries\ndf_top15 = df['Total'].tail(15)\n\n# generate plot\nfig = plt.figure(figsize=(15, 20))\nax = fig.add_subplot(211)\ndf_top15.plot(kind='barh', ax=ax)\n\nax.set_xlabel('Number of Immigrants')\nax.set_title('Top 15 Countries Contributing to the Immigration to Canada between 1980 - 2013 Matplotlib')\n\n# annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 57000 from x, and 0.1 from y to make it fit within the bar)\n    ax.annotate(label, xy=(value - 51000, index - 0.10), color='white')\n\nax = fig.add_subplot(212)\nsns.barplot(x=df_top15.values, y=df_top15.index, palette='deep', ax=ax)  \n\nax.set_xlabel('Number of Immigrants')\nax.set_title('Top 15 Countries Contributing to the Immigration to Canada between 1980 - 2013 Seaborn') \n\n# annotate value labels to each country\nfor index, value in enumerate(df_top15): \n    label = format(int(value), ',') # format int with commas\n    \n    # place text at the end of bar (subtracting 47000 from x, and 0.1 from y to make it fit within the bar)\n    ax.annotate(label, xy=(value - 47000, index), color='white')\n\n# invert for largest on top \nax.invert_yaxis()\n\nplt.tight_layout()\nplt.show()","9c893e72":"# group countries by continents and apply sum() function \ndf_continents = df.groupby('Continent', axis=0).sum()\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(df.groupby('Continent', axis=0)))\n\ndf_continents.head()","056b0a6d":"colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","8a3e1f76":"explode_list = [0.1, 0, 0, 0, 0.1, 0.2] # ratio for each continent with which to offset each wedge.\n\ndf_continents['2013'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,                 # turn off labels on pie chart\n                            pctdistance=1.12,            # the ratio between the pie center and start of text label\n                            explode=explode_list         # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent in 2013', y=1.12) \nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\n# show plot\nplt.show()","c5cfa9f1":"# to get a dataframe, place extra square brackets around 'Japan'.\ndf_japan = df.loc[['Japan'], years].T\ndf_japan.head()","b85ce722":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_japan.plot(kind='box', ax=ax)\n\nax.set_title('Box plot of Japanese Immigrants from 1980 - 2013 Matplotlib')\nax.set_ylabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.boxplot(data=df_japan, palette='deep', width=0.15, ax=ax) \n\nax.set_title('Box plot of Japanese Immigrants from 1980 - 2013 Seaborn')\nax.set_ylabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","83182155":"df_japan.describe()","2de01edd":"data.describe()","0c0c9beb":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndata.plot(kind='box', ax=ax)\n\nax.set_title('Box plot of Immigrants from China and India 1980 - 2013 Matplotlib')\nax.set_ylabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.boxplot(data=data, palette='deep', width=0.15, ax=ax) \n\nax.set_title('Box plot of Immigrants from China and India 1980 - 2013 Seaborn')\nax.set_ylabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","6cc2eb51":"# horizontal box plots\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndata.plot(kind='box', ax=ax, vert=False)\n\nax.set_title('Box plot of Immigrants from China and India 1980 - 2013 Matplotlib')\nax.set_xlabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.boxplot(data=data, palette='deep', width=0.15, orient='h', ax=ax) \n\nax.set_title('Box plot of Immigrants from China and India 1980 - 2013 Seaborn')\nax.set_xlabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","1ae7158a":"df_top15 = df.sort_values(['Total'], ascending=False, axis=0).head(15)\n\n# create a list of all years in decades 80's, 90's, and 00's\nyears_80s = list(map(str, range(1980, 1990))) \nyears_90s = list(map(str, range(1990, 2000))) \nyears_00s = list(map(str, range(2000, 2010))) \n\n# slice the original dataframe df_can to create a series for each decade\ndf_80s = df_top15.loc[:, years_80s].sum(axis=1) \ndf_90s = df_top15.loc[:, years_90s].sum(axis=1) \ndf_00s = df_top15.loc[:, years_00s].sum(axis=1)\n\n# merge the three series into a new data frame\nnew_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) \n\n# display dataframe\nnew_df.head()","c204886d":"new_df.describe()","01916604":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\nnew_df.plot(kind='box', ax=ax)\n\nax.set_title('Immigration from top 15 countries for decades 80s, 90s and 2000s Matplotlib')\nax.set_ylabel('Number of Immigrants') \n\nax = fig.add_subplot(122)\nsns.boxplot(data=new_df, palette='deep', width=0.20, ax=ax) \n\nax.set_title('Immigration from top 15 countries for decades 80s, 90s and 2000s Seaborn')\nax.set_ylabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","c3c30b45":"# let's check how many entries fall above the outlier threshold \nnew_df[new_df['2000s']> 209611.5]","77e6e437":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df[years].sum(axis=0))\n\n# change the years to type int (useful for regression later on)\ndf_tot.index = map(int, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace = True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","053b68c6":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_tot.plot(kind='scatter', x='year', y='total', ax=ax)\n\nax.set_title('Total Immigration to Canada from 1980 - 2013 Matplotlib')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants')\n\nax = fig.add_subplot(122)\nsns.scatterplot(x=df_tot.year, y=df_tot.total, palette='deep', ax=ax) \n\nax.set_title('Total Immigration to Canada from 1980 - 2013 Seaborn')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","2e7b9f24":"x = df_tot['year']      # year on x-axis\ny = df_tot['total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","0e588683":"fig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_tot.plot(kind='scatter', x='year', y='total', ax=ax)\n\nax.set_title('Total Immigration to Canada from 1980 - 2013 Matplotlib')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants')\n\n# plot line of best fit\nax.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\n\nax = fig.add_subplot(122)\nsns.regplot(x=df_tot.year, y=df_tot.total, ax=ax) \n\nax.set_title('Total Immigration to Canada from 1980 - 2013 Seaborn')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants') \n\nplt.tight_layout()\nplt.show()","d39acf8b":"df_countries = df.loc[['Denmark', 'Norway', 'Sweden'], years].T\n\n# create df_total by summing across three countries for each year\ndf_total = pd.DataFrame(df_countries.sum(axis=1))\n\n# reset index in place\ndf_total.reset_index(inplace=True)\n\n# rename columns\ndf_total.columns = ['year', 'total']\n\n# change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n\n# show resulting dataframe\ndf_total.head()\n\n# generate scatter plot\nfig = plt.figure(figsize=(20,8))\nax = fig.add_subplot(121)\ndf_total.plot(kind='scatter', x='year', y='total', ax=ax)\n\nax.set_title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013 Matplotlib')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants')\n\nax = fig.add_subplot(122)\nsns.scatterplot(x=df_total.year, y=df_total.total, palette='deep', ax=ax) \n\nax.set_title('Immigration from Denmark, Norway, and Sweden to Canada from 1980 - 2013 Seaborn')\nax.set_xlabel('Year')\nax.set_ylabel('Number of Immigrants')\n\nplt.tight_layout()\nplt.show()","0fbfb3cf":"df_t = df[years].T\n\n# cast the Years (the index) to type int\ndf_t.index = map(int, df_t.index)\n\n# let's label the index. This will automatically be the column name when we reset the index\ndf_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndf_t.reset_index(inplace=True)\n\n# view the changes\ndf_t.head()","94732e18":"from sklearn.preprocessing import MinMaxScaler\n\nscale_bra = MinMaxScaler()\nscale_arg = MinMaxScaler()\nnorm_brazil = scale_bra.fit_transform(df_t['Brazil'].values.reshape(-1, 1))\nnorm_arg = scale_arg.fit_transform(df_t['Argentina'].values.reshape(-1, 1))","8cce4528":"df_t['weight_arg'] = norm_arg\ndf_t['weight_brazil'] = norm_brazil\n\nfig = plt.figure(figsize=(20,9))\nax = fig.add_subplot(121)\n\n# Brazil\ndf_t.plot(kind='scatter', x='Year', y='Brazil',\n            alpha=0.5,                  # transparency\n            s=norm_brazil * 2000 + 10,  # pass in weights \n            ax=ax)\n\n# Argentina\ndf_t.plot(kind='scatter', x='Year', y='Argentina',\n            alpha=0.5,\n            color=\"blue\",\n            s=norm_arg * 2000 + 10,\n            ax=ax)\n\nax.set_ylabel('Number of Immigrants')\nax.set_title('Immigration from Brazil and Argentina from 1980 - 2013 Matplotlib')\nax.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')\n\nax = fig.add_subplot(122)\nsns.scatterplot(x=df_t['Year'], y=df_t['Argentina'], palette='deep', \n                size=df_t['weight_arg'], sizes=(10, 2000), alpha=0.5, ax=ax)\nsns.scatterplot(x=df_t['Year'], y=df_t['Brazil'], palette='deep', \n                size=df_t['weight_brazil'], sizes=(10, 2000), alpha=0.5, ax=ax) \n\nax.set_ylabel('Number of Immigrants')\nax.set_title('Immigration from Brazil and Argentina from 1980 - 2013 Seaborn')\nax.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')\n\nplt.tight_layout()\nplt.show()","0401c5d7":"Using the equation of line of best fit, we can estimate the number of immigrants in 2015:\n```python\nNo. Immigrants = 5567 * Year - 10926195\nNo. Immigrants = 5567 * 2015 - 10926195\nNo. Immigrants = 291,310\n```\nWhen compared to the actuals from Citizenship and Immigration Canada's (CIC) [2016 Annual Report](http:\/\/www.cic.gc.ca\/english\/resources\/publications\/annual-report-2016\/index.asp), we see that Canada accepted 271,845 immigrants in 2015. Our estimated value of 291,310 is within 7% of the actual number, which is pretty good considering our original data came from United Nations (and might differ slightly from CIC data).\n\nAs a side note, we can observe that immigration took a dip around 1993 - 1997. Further analysis into the topic revealed that in 1993 Canada introcuded Bill C-86 which introduced revisions to the refugee determination system, mostly restrictive. Further amendments to the Immigration Regulations cancelled the sponsorship required for \"assisted relatives\" and reduced the points awarded to them, making it more difficult for family members (other than nuclear family) to immigrate to Canada. These restrictive measures had a direct impact on the immigration numbers for the next several years.","8aab1f47":"Let's learn more about the statistics associated with the dataframe using the `describe()` method.","d3fdc968":"## Table of Contents\n\n<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n\n1. [Exploring Datasets with *pandas*](#1)<br>\n2. [Matplotlib: Standard Python Visualization Library](#2) <br>\n3. [Seaborn](#3)<br>\n4. [Line Plots](#4)<br>\n5. [Histograms](#5) <br>\n6. [Bar Charts](#6) <br>\n7. [Pie Charts](#7) <br>\n8. [Box Plots](#8) <br>\n9. [Scatter Plots](#9) <br>\n10. [Bubble Plots](#10) <br> \n<\/div>","c3de99fd":"China and India are both considered as outliers since their population for the decade exceeds 209,611.5. ","be9d094b":"For a full listing of colors available in Matplotlib, \n```python\nimport matplotlib\nfor name, hex in matplotlib.colors.cnames.items():\n    print(name, hex)\n```","506ac0b2":"The bar plot above shows the total number of immigrants broken down by each year. We can clearly see the impact of the financial crisis; the number of immigrants to Canada started increasing rapidly after 2008. \n\nLet's annotate this on the plot using the `annotate` method. We will pass in the following parameters:\n- `s`: str, the text of annotation.\n- `xy`: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).\n- `xytext`: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).\n- `xycoords`: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).\n- `arrowprops`: Takes a dictionary of properties to draw the arrow:\n    - `arrowstyle`: Specifies the arrow style, `'->'` is standard arrow.\n    - `connectionstyle`: Specifies the connection type. `arc3` is a straight line.\n    - `color`: Specifes color of arror.\n    - `lw`: Specifies the line width.\n\n\nLet's also annotate a text to go over the arrow.  We will pass in the following additional parameters:\n- `rotation`: rotation angle of text in degrees (counter clockwise)\n- `va`: vertical alignment of text [\u2018center\u2019 | \u2018top\u2019 | \u2018bottom\u2019 | \u2018baseline\u2019]\n- `ha`: horizontal alignment of text [\u2018center\u2019 | \u2018right\u2019 | \u2018left\u2019]","696f97e9":"Step 1: Gather data. \n\nWe will use *pandas* `groupby` method to summarize the immigration data by `Continent`. The general process of `groupby` involves the following steps:\n\n1. **Split:** Splitting the data into groups based on some criteria.\n2. **Apply:** Applying a function to each group independently:\n       .sum()\n       .count()\n       .mean() \n       .std() \n       .aggregate()\n       .apply()\n       .etc..\n3. **Combine:** Combining the results into a data structure.\n\n<img src=\"https:\/\/ibm.box.com\/shared\/static\/tkfhxqkehfzpclco8f0eazhie33uxj9j.png\" height=400 align=\"center\">","c204b99a":"Next, we will plot a line plot by appending `.plot()` to the `haiti` dataframe.","1a1df79c":"Using a pie chart, let's explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.","6e526f23":"*Side Note:* We could use `df['2013'].plot.hist()`, instead. In fact, using `some_data.plot(kind='type_plot', ...)` is equivalent to `some_data.plot.type_plot(...)`. That is, passing the type of the plot as argument or method behaves the same. \n\nSee the *pandas* documentation for more [info](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.plot.html).\n\nWe can also plot multiple histograms on the same plot. For example, let's try to answer the immigration distribution for Denmark, Norway, and Sweden for years 1980 - 2013\n\n\n`df.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist()`\n\nThat will not work! We'll often come across situations like this when creating plots. The solution often lies in how the underlying dataset is structured.\n\nInstead of plotting the population frequency distribution of the population for the 3 countries, *pandas* instead plots the population frequency distribution for the `years`.\n\nThis can be easily fixed by first transposing the dataset, and then plotting as shown below.","e16775e0":"One of the key benefits of box plots is comparing the distribution of multiple datasets. Let's compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.","7cf2677b":"Column names that are integers (such as the years) might introduce some confusion. For example, when we are referencing the year 2013, one might confuse that when the 2013th positional index. \n\nTo avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'.","839d2f1c":"Step 2: Plot the data. In `Matplotlib`, we can create a `scatter` plot set by passing in `kind='scatter'` as plot argument. We will also need to pass in `x` and `y` keywords to specify the columns that go on the x- and the y-axis.","ded323b1":"Let's make a few modifications to improve the impact and aesthetics of the previous plot:\n* increase the bin size to 15 by passing in `bins` parameter\n* set transparency to 60% by passing in `alpha` paramemter\n* label the x-axis by passing in `x-label` paramater\n* change the colors of the plots by passing in `color` parameter","98ba8fdd":"# Pie Charts <a id=\"7\"><\/a>\n\nA `pie chart` is a circular graphic that displays numeric proportions by dividing a circle (or pie) into proportional slices. You are most likely already familiar with pie charts as it is widely used in business and media. We can create pie charts in Matplotlib by passing in the `kind=pie` keyword. Seaborn doesn't support pie charts so for this part we will only use matplotlib.\n\nLet's use a pie chart to explore the proportion (percentage) of new immigrants grouped by continents for the entire time period from 1980 to 2013. ","0ee9b448":"# Box Plots <a id=\"8\"><\/a>\n\nA `box plot` is a way of statistically representing the *distribution* of the data through five main dimensions: \n\n- **Minimun:** Smallest number in the dataset.\n- **First quartile:** Middle number between the `minimum` and the `median`.\n- **Second quartile (Median):** Middle number of the (sorted) dataset.\n- **Third quartile:** Middle number between `median` and `maximum`.\n- **Maximum:** Highest number in the dataset.","ce6b8afc":"*pandas* will auomatically graph the two countries on the same graph. Go ahead and plot the new transposed dataframe. Make sure to add a title to the plot and label the axes.","0cd73492":"Finally, let's view a quick summary of each column in our dataframe using the `describe()` method.","001621a9":"Note how the box plot differs from the summary table created. The box plot scans the data and identifies the outliers. In order to be an outlier, the data value must be:<br>\n* larger than Q3 by at least 1.5 times the interquartile range (IQR), or,\n* smaller than Q1 by at least 1.5 times the IQR.\n\nLet's look at decade 2000s as an example: <br>\n* Q1 (25%) = 36,101.5 <br>\n* Q3 (75%) = 105,505.5 <br>\n* IQR = Q3 - Q1 = 69,404 <br>\n\nUsing the definition of outlier, any value that is greater than Q3 by 1.5 times IQR will be flagged as outlier.\n\nOutlier > 105,505.5 + (1.5 * 69,404) <br>\nOutlier > 209,611.5","9d3a436d":"Step 3: Plot the box plots.","423991b1":"*pandas* automatically populated the x-axis with the index values (years), and the y-axis with the column values (population). However, notice how the years were not displayed because they are of type *string*. Therefore, let's change the type of the index values to *integer* for plotting.\n\nAlso, let's label the x and y axis using `plt.title()`, `plt.ylabel()`, and `plt.xlabel()` as follows:","4a2009b4":"**Horizontal Bar Plot**\n\nSometimes it is more practical to represent the data horizontally, especially if you need more room for labelling the bars. In horizontal bar graphs, the y-axis is used for labelling, and the length of bars on the x-axis corresponds to the magnitude of the variable being measured. As you will see, there is more room on the y-axis to  label categetorical variables.\n\nUsing the scripting layer and the dataset, let's create a *horizontal* bar plot showing the *total* number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013.","e6a221d8":"# Bar Charts (Dataframe) <a id=\"6\"><\/a>\n\nA bar plot is a way of representing data where the *length* of the bars represents the magnitude\/size of the feature\/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals. \n\nTo create a bar plot, we can pass one of two arguments via `kind` parameter in `plot()`:\n\n* `kind=bar` creates a *vertical* bar plot\n* `kind=barh` creates a *horizontal* bar plot\n\n**Vertical bar plot**\n\nIn vertical bar graphs, the x-axis is used for labelling, and the length of bars on the y-axis corresponds to the magnitude of the variable being measured. Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar. \n\n**Let's start off by analyzing the effect of Iceland's Financial Crisis:**\n\nThe 2008 - 2011 Icelandic Financial Crisis was a major economic and political event in Iceland. Relative to the size of its economy, Iceland's systemic banking collapse was the largest experienced by any country in economic history. The crisis led to a severe economic depression in 2008 - 2011 and significant political unrest.\n\nLet's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013. ","4270110d":"## Conclusions\n\nWe can see that in some case with default values, we get different kinds of outputs. Seaborn is just a high level API version of Matplotlib with different parameters. I hope you liked my kernel and don't forget to give me a upvote :)","edc46ef9":"By default, the `histrogram` method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013. We can see that in 2013:\n* 178 countries contributed between 0 to 3412.9 immigrants \n* 11 countries contributed between 3412.9 to 6825.8 immigrants\n* 1 country contributed between 6285.8 to 10238.7 immigrants, and so on..\n\n<img src=\"https:\/\/ibm.box.com\/shared\/static\/g54s9q97mrjok0h4272o7g09cyigei0v.jpg\" align=\"center\" width=800>","d88e3c10":"## Seaborn<a id=\"3\"><\/a>\n\nSeaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n\nWe will visualize both of the libraries as we go along, plot them side by side.","7999ad59":"To make a `box plot`, we can use `kind=box` in `plot` method invoked on a *pandas* series or dataframe. For seaborn we call boxplot function.\n\nLet's plot the box plot for the Japanese immigrants between 1980 - 2013.\n\nStep 1: Get the dataset. Even though we are extracting the data for just one country, we will obtain it as a dataframe. This will help us with calling the `dataframe.describe()` method to view the percentiles.","772f2637":"From the above plot, we can observe that the China and India have very similar immigration trends through the years. \n\nSo how come we didn't need to transpose Haiti's dataframe before plotting?\n\nThat's because `haiti` is a series as opposed to a dataframe, and has the years as its indices as shown below. \n```python\nprint(type(haiti))\nprint(haiti.head())\n```\n>class 'pandas.core.series.Series' <br>\n>1980    1666 <br>\n>1981    3692 <br>\n>1982    3498 <br>\n>1983    2860 <br>\n>1984    1418 <br>\n>Name: Haiti, dtype: int64 <br>\n\nLine plot is a handy tool to display several dependent variables against one independent variable. However, it is recommended that no more than 5-10 lines on a single graph; any more than that and it becomes difficult to interpret.\n\nLet's compare the trend of top 5 countries that contributed the most to immigration to Canada.","ea185eae":"We can immediately make a few key observations from the plot above:\n1. The minimum number of immigrants is around 200 (min), maximum number is around 1300 (max), and  median number of immigrants is around 900 (median).\n2. 25% of the years for period 1980 - 2013 had an annual immigrant count of ~500 or fewer (First quartile).\n2. 75% of the years for period 1980 - 2013 had an annual immigrant count of ~1100 or fewer (Third quartile).\n\nWe can view the actual numbers by calling the `describe()` method on the dataframe.","86e14650":"Let's view the percentages associated with both countries using the `describe()` method.","ed5fc500":"<h1>Introduction to Data Visualization<\/h1>","f8305996":"Step 2: Create the normalized weights. \n\nThere are several methods of normalizations in statistics, each with its own use. In this case, we will use [feature scaling](https:\/\/en.wikipedia.org\/wiki\/Feature_scaling) to bring all values into the range [0,1].","ac54e58f":"Let's clean the data set to remove a few unnecessary columns. Then we rename the columns so that they make sense.","a650296a":"Let's try something a little more advanced. \n\nPreviously we identified the top 15 countries based on total immigration from 1980 - 2013.\nLet's create a box plot to visualize the distribution of the top 15 countries (based on total immigration) grouped by the *decades* `1980s`, `1990s`, and `2000s`.\n\nStep 1: Get the dataset. Get the top 15 countries based on Total immigrant population.\n\nStep 2: Create a new dataframe which contains the aggregate for each decade. One way to do that:\n   1. Create a list of all years in decades 80's, 90's, and 00's.\n   2. Slice the original dataframe df_can to create a series for each decade and sum across all years for each country.\n   3. Merge the three series into a new data frame. Call your dataframe **new_df**.","22bb5ef3":"The output is an array with the polynomial coefficients, highest powers first. Since we are plotting a linear regression `y= a*x + b`, our output has 2 elements `[5.56709228e+03, -1.09261952e+07]` with the the slope in position 0 and intercept in position 1. \n\nStep 2: Plot the regression line on the `scatter plot`.","eac4066b":"Step 2: Plot the data. We will pass in `kind = 'pie'` keyword, along with the following additional parameters:\n- `autopct` -  is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be `fmt%pct`.\n- `startangle` - rotates the start of the pie chart by angle degrees counterclockwise from the x-axis.\n- `shadow` - Draws a shadow beneath the pie (to give a 3D feel).\n\nLet's also make a few modifications to improve the visuals:\n\n* Remove the text labels on the pie chart by passing in `legend` and add it as a seperate legend using `ax.legend()`.\n* Push out the percentages to sit just outside the pie chart by passing in `pctdistance` parameter.\n* Pass in a custom set of colors for continents by passing in `colors` parameter.\n* **Explode** the pie chart to emphasize the lowest three continents (Africa, North America, and Latin America and Carribbean) by pasing in `explode` parameter.\n","247335bb":"# Exploring Dataset <a id=\"1\"><\/a>\n\n## The Dataset: Immigration to Canada from 1980 to 2013 \n\nThe dataset contains annual data on the flows of international immigrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. The current version presents data pertaining to 45 countries.","91e20555":"## Line Plots (Series\/Dataframe) <a id=\"4\"><\/a>\n\n**What is a line plot and why use it?**\n\nA line chart or line plot is a type of plot which displays information as a series of data points called 'markers' connected by straight line segments. It is a basic type of chart common in many fields.\nUse line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.\n\n**Let's start with a case study:**\n\nIn 2010, Haiti suffered a catastrophic magnitude 7.0 earthquake. The quake caused widespread devastation and loss of life and aout three million people were affected by this natural disaster. As part of Canada's humanitarian effort, the Government of Canada stepped up its effort in accepting refugees from Haiti. We can quickly visualize this effort using a `Line` plot:\n\nFirst, we will extract the data series for Haiti.","621c5f74":"We will also add a 'Total' column that sums up the total immigrants by country over the entire period 1980 - 2013, check to see how many null objects we have in the dataset.","352f8518":"### Other Plots\n\nThere are many other plotting styles available other than the default Line plot, all of which can be accessed by passing `kind` keyword to `plot()`. The full list of available plots are as follows:\n\n* `bar` for vertical bar plots\n* `barh` for horizontal bar plots\n* `hist` for histogram\n* `box` for boxplot\n* `kde` or `density` for density plots\n* `area` for area plots\n* `pie` for pie plots\n* `scatter` for scatter plots\n* `hexbin` for hexbin plot","eac6339a":"The size of the bubble corresponds to the magnitude of immigrating population for that year, compared to the 1980 - 2013 data. The larger the bubble, the more immigrants in that year.\n\nFrom the plot above, we can see a corresponding increase in immigration from Argentina during the 1998 - 2002 great depression. We can also observe a similar spike around 1985 to 1993. In fact, Argentina had suffered a great depression from 1974 - 1990, just before the onset of 1998 - 2002 great depression. \n\nOn a similar note, Brazil suffered the *Samba Effect* where the Brazilian real (currency) dropped nearly 35% in 1999. There was a fear of a South American financial crisis as many South American countries were heavily dependent on industrial exports from Brazil. The Brazilian government subsequently adopted an austerity program, and the economy slowly recovered over the years, culminating in a surge in 2010. The immigration data reflect these events.","53cd939a":"<img src=\"https:\/\/ibm.box.com\/shared\/static\/9nkxsfihu8mgt1go2kfasf61sywlu123.png\" width=440, align=\"center\">","e0c61dab":"We can observe that, while both countries have around the same median immigrant population (~20,000),  China's immigrant population range is more spread out than India's. The maximum population from India for any year (36,210) is around 15% lower than the maximum population from China (42,584).\n\n\nIf you prefer to create horizontal box plots, you can pass the `vert` parameter in the **plot** function and assign it to *False*. You can also specify a different color in case you are not a big fan of the default red color.","38715bd5":"Notice how the scatter plot does not connect the datapoints together. We can clearly observe an upward trend in the data: as the years go by, the total number of immigrants increases. We can mathematically analyze this upward trend using a regression line (line of best fit). \n\nSo let's try to plot a linear line of best fit, and use it to  predict the number of immigrants in 2015. The below steps, we don't need to do it for seaborn as it has a `regplot` function which will do it.\n\nStep 1: Get the equation of line of best fit. We will use **Numpy**'s `polyfit()` method by passing in the following:\n- `x`: x-coordinates of the data. \n- `y`: y-coordinates of the data. \n- `deg`: Degree of fitting polynomial. 1 = linear, 2 = quadratic, and so on.","ab7ff141":"In the above plot, the x-axis represents the population range of immigrants in intervals of 3412.9. The y-axis represents the number of countries that contributed to the aforementioned population. \n\nNotice that the x-axis labels do not match with the bin size. This can be fixed by passing in a `xticks` keyword that contains the list of the bin sizes, as follows:","3b1a9df8":"## Matplotlib: Standard Python Visualization Library<a id=\"2\"><\/a>\n\nMatplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, the jupyter notebook, web application servers, and four graphical user interface toolkits.\n\nIf you are aspiring to create impactful visualization with python, Matplotlib is an essential tool to have at your disposal.\n\n### Matplotlib.Pyplot\n\nOne of the core aspects of Matplotlib is `matplotlib.pyplot`. It is Matplotlib's scripting layer. It is a collection of command style functions that make Matplotlib work like MATLAB. Each `pyplot` function makes some change to a figure: e.g., creates a figure, creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc. We will work both with the scripting and artist layer.\n\n### Two types of plotting\n\nThere are two styles\/options of ploting with `matplotlib`. Plotting using the Artist layer and plotting using the scripting layer.\n\n**Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' **\n\nYou can use `plt` i.e. `matplotlib.pyplot` and add more elements by calling different methods procedurally; for example, `plt.title(...)` to add title or `plt.xlabel(...)` to add label to the x-axis.\n\n\n**Option 2: Artist layer (Object oriented method) - using an `Axes` instance from Matplotlib (preferred) **\n\nYou can use an `Axes` instance of your current plot and store it in a variable (eg. `ax`). You can add more elements by calling methods with a little change in syntax (by adding \"*set_*\" to the previous methods). For example, use `ax.set_title()` instead of `plt.title()` to add title,  or `ax.set_xlabel()` instead of `plt.xlabel()` to add label to the x-axis. \n\nThis option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots). ","9cd4dbaa":"We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let's annotate this spike in the plot by using the `plt.text()` or `ax.text()` method.","67500dd9":"Step 3: Plot the data. \n- To plot two different scatter plots in one plot, we can include the axes one plot into the other by passing it via the `ax` parameter. \n- We will also pass in the weights using the `s` parameter. Given that the normalized weights are between 0-1, they won't be visible on the plot. Therefore we will:\n    - multiply weights by 2000 to scale it up on the graph, and,\n    - add 10 to compensate for the min value (which has a 0 weight and therefore scale with x2000).","30eae71b":"Step 2: Plot data.","034d7a72":"Quick note on x and y values in `plt.text(x, y, label)`:\n    \n     Since the x-axis (years) is type 'integer', we specified x as a year. The y axis (number of immigrants) is type 'integer', so we can just specify the value y = 6000.\n    \n```python\n    plt.text(2005, 6000, '2010 Earthquake') # years stored as type int\n```\n    If the years were stored as type 'string', we would need to specify x as the index position of the year. Eg 25th index is year 2005 since it is the 25th year with a base year of 1980.\n```python\n    plt.text(25, 6000, '2010 Earthquake') # years stored as type str\n```\n\nWe can easily add more countries to line plot to make meaningful comparisons immigration from different countries. \n\nLet's compare the number of immigrants from India and China from 1980 to 2013.\n\nStep 1: Get the data set for China and India, and display dataframe.","90638556":"Let's create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013\n\nStep 1: Get the data:\n   1. Create a dataframe the consists of the numbers associated with Denmark, Norway, and Sweden only.\n   2. Sum the immigration numbers across all three countries for each year and turn the result into a dataframe.\n   3. Reset the index in place.\n   4. Rename the columns to **year** and **total**.\n   5. Display the resulting dataframe.","d676ea5f":"# Histograms<a id=\"5\"><\/a>\n\nA histogram is a way of representing the *frequency* distribution of numeric dataset. The way it works is it partitions the x-axis into *bins*, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.\n\nLet's find out the the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013.\n\nBefore we proceed with creating the histogram plot, let's first examine the data split into intervals. To do this, we will us **Numpy**'s `histrogram` method to get the bin ranges and frequency counts as follows:","d82dc9b4":"Step 2: Plot by passing in `kind='box'`.","3a243b70":"When analyzing a dataset, it's always a good idea to start by getting basic information about your dataframe. We can do this by using the `info()` method.","6ec52fac":"Step 1: Get the dataset for China and India which we already did and named it as `data`","28f0ea92":"**Subplots**\n\nOften times we might want to plot multiple plots within the same figure. For example, we might want to perform a side by side comparison of the box plot with the line plot of China and India's immigration.\n\nTo visualize multiple plots together, we can create a **`figure`** (overall canvas) and divide it into **`subplots`**, each containing a plot. With **subplots**, we usually work with the **artist layer** instead of the **scripting layer**. \n\nTypical syntax is : <br>\n```python\n    fig = plt.figure() # create figure\n    ax = fig.add_subplot(nrows, ncols, plot_number) # create subplots\n```\nWhere\n- `nrows` and `ncols` are used to notionally split the figure into (`nrows` \\* `ncols`) sub-axes,  \n- `plot_number` is used to identify the particular subplot that this function is to create within the notional grid. `plot_number` starts at 1, increments across rows first and has a maximum of `nrows` * `ncols` as shown below.\n\n<img src=\"https:\/\/ibm.box.com\/shared\/static\/03rhrfcealyoi83tigscovgglfchfyor.png\" width=500 align=\"center\">\n\nIn the case when `nrows`, `ncols`, and `plot_number` are all less than 10, a convenience exists such that the a 3 digit number can be given instead, where the hundreds represent `nrows`, the tens represent `ncols` and the units represent `plot_number`. For instance,\n```python\n   subplot(211) == subplot(2, 1, 1) \n```\nproduces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 rows by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).","3b417b29":"# Scatter Plots <a id=\"9\"><\/a>\n\nA `scatter plot` (2D) is a useful method of comparing variables against each other. `Scatter` plots look similar to `line plots` in that they both map independent and dependent variables on a 2D graph. While the datapoints are connected together by a line in a line plot, they are not connected in a scatter plot. The data in a scatter plot is considered to express a trend. With further analysis using tools like regression, we can mathematically calculate this relationship and use it to predict trends outside the dataset.\n\nLet's start by exploring the following:\n\nUsing a `scatter plot`, let's visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013.\n\nStep 1: Get the dataset. Since we are expecting to use the relationship betewen `years` and `total population`, we will convert `years` to `int` type.","14eb13b0":"# Bubble Plots <a id=\"10\"><\/a>\n\nA `bubble plot` is a variation of the `scatter plot` that displays three dimensions of data (x, y, z). The datapoints are replaced with bubbles, and the size of the bubble is determined by the third variable 'z', also known as the weight. In `matplotlib`, we can pass in an array or scalar to the keyword `s` to `plot()`, that contains the weight of each point.\n\n**Let's start by analyzing the effect of Argentina's great depression**.\n\nArgentina suffered a great depression from 1998 - 2002, which caused widespread unemployment, riots, the fall of the government, and a default on the country's foreign debt. In terms of income, over 50% of Argentines were poor, and seven out of ten Argentine children were poor at the depth of the crisis in 2002. \n\nLet's analyze the effect of this crisis, and compare Argentina's immigration to that of it's neighbour Brazil. Let's do that using a `bubble plot` of immigration from Brazil and Argentina for the years 1980 - 2013. We will set the weights for the bubble as the *normalized* value of the population for each year.\n\nStep 1: Get the data for Brazil and Argentina. We will convert the `Years` to type int and bring it in the dataframe.","00c7eca4":"Step 2: Plot graph. We will explicitly specify line plot by passing in `kind` parameter to `plot()`.\n\n`data.plot(kind='line')`\n\nThat won't look right...\n\nRecall that *pandas* plots the indices on the x-axis and the columns as individual lines on the y-axis. Since `data` is a dataframe with the `country` as the index and `years` as the columns, we must first transpose the dataframe.","43408828":"### Plotting in *pandas*\n\nFortunately, pandas has a built-in implementation of Matplotlib that we can use. Plotting in *pandas* is as simple as appending a `.plot()` method to a series or dataframe.\n\nDocumentation:\n- [Plotting with Series](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#plotting)<br>\n- [Plotting with Dataframes](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/api.html#api-dataframe-plotting)"}}