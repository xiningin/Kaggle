{"cell_type":{"13dd4d42":"code","f253aeb3":"code","aea1ba73":"code","0d7e883d":"code","b3133fd3":"code","3408b5ff":"code","1fe42793":"code","1c21c00e":"code","00ffc66a":"code","cf42902d":"code","f438e0fb":"code","09d78236":"code","8f41da4b":"code","8ea93961":"code","2635cdef":"markdown","23578321":"markdown","5e892fa9":"markdown","d2e09954":"markdown","143b43b1":"markdown","6486f222":"markdown","fa73a62a":"markdown","30b706de":"markdown","358628bd":"markdown","e3fff215":"markdown"},"source":{"13dd4d42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f253aeb3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Visiulazation\nimport matplotlib.pyplot as plt\n\n#image processing\nimport cv2\n\n#extracting zippped file\nimport tarfile\n\n#systems\nimport os\nprint(os.listdir(\"..\/input\/haarcascades\"))\nprint(os.listdir(\"..\/input\/lfwpeople\"))","aea1ba73":"class faceDetector():\n    def __init__(self,facecascadepath):\n        self.faceCascade=cv2.CascadeClassifier(facecascadepath)\n    \n    def detect(self,image,scaleFactor=1.1,minNeighbors=5,minSize=(30,30)):\n        rects=self.faceCascade.detectMultiScale(image,scaleFactor=scaleFactor,\n                                                minNeighbors=minNeighbors,\n                                                minSize=minSize)\n        return rects","0d7e883d":"frontal_cascade_path='\/kaggle\/input\/haarcascades\/haarcascade_frontalface_default.xml'\nfd=faceDetector(frontal_cascade_path)","b3133fd3":"def show_image(image):\n    plt.figure(figsize=(18,15))\n    #Before showing image, bgr color order transformed to rgb order\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","3408b5ff":"def detect_face(image, scaleFactor, minNeighbors, minSize):\n    image_gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n    faces=fd.detect(image_grey)\n    for(x,y,w,h) in faces:\n        c2.reactangle(image,(x,y),(x+w,y+h),(127,255,0),3)\n    show_image(image)","1fe42793":"class FetchLFW:\n    def  __init__(self,path):\n        self.path=path\n    \n    def _initalize(self,dim):\n        self.dim_of_photo_gallery=dim\n        self.number_of_images=self.dim_of_photo_gallery*self.dim_of_photo_gallery\n        \n        total_number_images=13233\n        self.random_face_indexes=np.arange(total_number_images)\n        np.random.shuffle(self.random_face_indexes)\n        self.n_random_face_indexes=self.random_face_indexes[:self.number_of_images]\n        \n    def get_lfw_image(self,dim=5):\n        self._initalize(dim)\n        self.lfw_images=self._get_images()\n        return self.lfw_images\n    def _get_images(self):\n        image_list=[]\n        tar=tarfile.open(path,'r:gz')\n        counter=0\n        for tarinfo in tar:\n            tar.extract(tarinfo.name)\n            if tarinfo.name[-4:]=='.jpg':\n                if counter in self.n_random_face_indexes:\n                    image=cv2.imread(tarinfo.name,cv2.IMREAD_COLOR)\n                    image=cv2.resize(image,None,fx=0.4, fy=0.4, interpolation=cv2.INTER_AREA)\n                    image_list.append(np.array(image))\n                counter+=1\n            if tarinfo.isdir():\n                pass\n            else:\n                os.remove(tarinfo.name)\n        tar.close()\n        return np.array(image_list)","1c21c00e":"path=\"..\/input\/lfwpeople\/lfw-funneled.tgz\"\nfetchLFW=FetchLFW(path)\ndimension=15\nimages=fetchLFW.get_lfw_image(dim=dimension)","00ffc66a":"images.shape","cf42902d":"def get_photo_gallery():\n    counter=0\n    himages=[]\n    vimages=[]\n    for i in range(dimension):\n        for j in range(dimension):\n            himages.append(images[counter])\n            counter+=1\n        himage=np.hstack((himages))\n        vimages.append(himage)\n        himages=[]\n    images_matrix=np.vstack((vimages))\n    return images_matrix","f438e0fb":"photo_gallery=get_photo_gallery()\nprint(\"photo_gallery:{}\".format(photo_gallery.shape))\nshow_image(photo_gallery)","09d78236":"fd=faceDetector(frontal_cascade_path)","8f41da4b":"face_counter=0\nfor image_org in images:\n    image_gray=cv2.cvtColor(image_org,cv2.COLOR_BGR2GRAY)\n    faceRect=fd.detect(image_gray,\n                       scaleFactor=1.1,\n                       minNeighbors=5,\n                       minSize=(30,30))\n    #print(\"I found {} faces\".format(len(faceRect)))\n    first_detection=False\n    for (x,y,w,h) in faceRect:\n        if first_detection==False:\n            face_counter+=1\n            cv2.rectangle(image_org,(x,y),(x+w,y+h),(127,255,0),2)\n            first_detection=True\n        else:\n            print(\"Second detection ignored in a image\")\n\nprint(\"{} images have been scaned\".format(dimension*dimension))\nprint(\"{} faces have been detected\".format(face_counter))","8ea93961":"photo_gallery=get_photo_gallery()\nshow_image(photo_gallery)","2635cdef":"**detect face function it first convert image into grey images and than run detect function from above class**","23578321":"**class which raed images from zipfile and organize them into a array of given size which is square of given dimension as this wil be converted into matrix to show images...using tarfile package for zip**","5e892fa9":"rference-https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv","d2e09954":"**arranging image variable into matrix or collage of photos**","143b43b1":"**making facedetctor class with ahving function detect which detect the faces with harcasscade classifier in opencv**","6486f222":"**using harcasscade for face detection**","fa73a62a":"**storing the array of images from data in images varible**","30b706de":"**running face detection in above images**","358628bd":"**function to show particular image**","e3fff215":"**if you like plz upvote it **"}}