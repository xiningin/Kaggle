{"cell_type":{"1f735395":"code","34b08397":"code","186b876f":"code","c67dc122":"code","cc2b65f9":"code","1374ce32":"code","56687ed2":"code","ccff304a":"code","a23cdb95":"code","6777495d":"code","3c853dab":"markdown","77c4921d":"markdown","0b2879b3":"markdown"},"source":{"1f735395":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nimport random\nimport re\n\nimport matplotlib.colors as mc\nimport colorsys\nfrom random import randint\nimport warnings\nwarnings.filterwarnings('ignore')","34b08397":"full_table = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                         parse_dates=['Date'])\nfull_table.head()","186b876f":"full_table = full_table.groupby(['Date', 'Country\/Region']).sum().reset_index()","c67dc122":"full_table['Date'] = full_table['Date'].astype('str')\ndf = full_table[['Date', 'Country\/Region', 'Confirmed']]\ndf.columns = ['date', 'Country\/Region', 'value']\nfnames_list = df['date'].unique().tolist()","cc2b65f9":"def random_color_generator(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color\n\ncountry_list = df['Country\/Region'].unique().tolist()\n\nnum_of_elements = 10","1374ce32":"def transform_color(color, amount = 0.5):\n\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n        c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])\n\nrandom_hex_colors = []\nfor i in range(len(country_list)):\n    random_hex_colors.append('#' + '%06X' % randint(0, 0xFFFFFF))\n\nrgb_colors = [transform_color(i, 1) for i in random_hex_colors]\nrgb_colors_opacity = [rgb_colors[x] + (0.825,) for x in range(len(rgb_colors))]\nrgb_colors_dark = [transform_color(i, 1.12) for i in random_hex_colors]","56687ed2":"normal_colors = dict(zip(country_list, rgb_colors_opacity))\ndark_colors = dict(zip(country_list, rgb_colors_dark))","ccff304a":"fig, ax = plt.subplots(figsize = (36, 20))\n\ndef draw_barchart(current_date):\n    dff = df[df['date'].eq(current_date)].sort_values(by='value', ascending=True).tail(num_of_elements)\n    ax.clear()\n    \n    ax.barh(dff['Country\/Region'], dff['value'], color=[normal_colors[p] for p in dff['Country\/Region']],\n                edgecolor =([dark_colors[x] for x in dff['Country\/Region']]), linewidth = '6')\n    dx = dff['value'].max() \/ 200\n\n\n    for i, (value, name) in enumerate(zip(dff['value'], dff['Country\/Region'])):\n        ax.text(value + dx, \n                i + (num_of_elements \/ 50), '    ' + name,\n                size = 32,\n                ha = 'left',\n                va = 'center',\n                fontdict = {'fontname': 'Trebuchet MS'})\n\n        ax.text(value + dx,\n                i - (num_of_elements \/ 50), \n                f'    {value:,.0f}', \n                size = 32, \n                ha = 'left', \n                va = 'center')\n\n    time_unit_displayed = re.sub(r'\\^(.*)', r'', str(current_date))\n    ax.text(1.0, \n            1.1, \n            time_unit_displayed,\n            transform = ax.transAxes, \n            color = '#666666',\n            size = 32,\n            ha = 'right', \n            weight = 'bold', \n            fontdict = {'fontname': 'Trebuchet MS'})\n\n    ax.text(-0.005, \n            1.05, \n            'Confirmed', \n            transform = ax.transAxes, \n            size = 32, \n            color = '#666666')\n\n    ax.text(-0.005, \n            1.1, \n            'Confirmed from 2020-01-22 to 2020-03-20', \n            transform = ax.transAxes,\n            size = 32, \n            weight = 'bold', \n            ha = 'left')\n\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis = 'x', colors = '#666666', labelsize = 28)\n    ax.set_yticks([])\n    ax.set_axisbelow(True)\n    ax.margins(0, 0.01)\n    ax.grid(which = 'major', axis = 'x', linestyle = '-')\n\n    plt.locator_params(axis = 'x', nbins = 4)\n    plt.box(False)\n    plt.subplots_adjust(left = 0.075, right = 0.75, top = 0.825, bottom = 0.05, wspace = 0.2, hspace = 0.2)\n    plt.box(False)    \ndraw_barchart('2020-03-20')","a23cdb95":"fig, ax = plt.subplots(figsize = (36, 20))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=fnames_list)\nani = HTML(animator.to_jshtml())","6777495d":"ani","3c853dab":"# Reference","77c4921d":"- https:\/\/towardsdatascience.com\/bar-chart-race-in-python-with-matplotlib-8e687a5c8a41\n- https:\/\/medium.com\/@6berardi\/how-to-create-a-smooth-bar-chart-race-with-python-ad2daf6510dc","0b2879b3":"- More smoothed video can be shown in this link\n- https:\/\/youtu.be\/wN6acdJAtQo"}}