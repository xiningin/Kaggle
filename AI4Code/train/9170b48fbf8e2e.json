{"cell_type":{"4732325d":"code","e4365c16":"code","5826a8f8":"code","a403ce20":"code","54e81600":"code","fe6fc671":"code","7de41584":"code","05972302":"code","1e9fa41a":"code","731d42ca":"code","b6199481":"code","3dd7a9e4":"code","7829801a":"code","3a421e18":"code","c42d4b0d":"code","80c5cd17":"code","c1d5e5a9":"code","3053a074":"markdown","49216d74":"markdown","0ae9f494":"markdown","9d24802e":"markdown"},"source":{"4732325d":"import cudf\nimport xgboost as xgb\nfrom cuml import train_test_split\nfrom cuml import metrics\nfrom cuml.ensemble import RandomForestClassifier as cuRF\nfrom cuml.linear_model import LogisticRegression\nimport gc","e4365c16":"!tree ..\/input","5826a8f8":"train = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv', dtype='float32')\n\ntest = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv', dtype='float32')\n\nsubmission = cudf.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv', dtype='float32')","a403ce20":"train['std'] = train.std(axis=1)\ntrain['min'] = train.min(axis=1)\ntrain['max'] = train.max(axis=1)\n\ntest['std'] = test.std(axis=1)\ntest['min'] = test.min(axis=1)\ntest['max'] = test.max(axis=1)","54e81600":"y = train['target']\nX = train.drop(['target'], axis=1)\ndel train\ngc.collect()","fe6fc671":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)\ndel X\ndel y\ngc.collect()","7de41584":"params = {\n    'max_depth': 6,\n    'n_estimators': 9500,\n    'learning_rate': 0.007279718158350149,\n    'subsample': 0.7,\n    'colsample_bytree': 0.2,\n    'colsample_bylevel': 0.6000000000000001,\n    'min_child_weight': 56.41980735551558,\n    'reg_lambda': 75.56651890088857,\n    'reg_alpha': 0.11766857055687065,\n    'gamma': 0.6407823221122686,\n    'booster' : 'gbtree',\n    'eval_metric' : 'auc',\n    'tree_method': 'gpu_hist',\n     'predictor' :'gpu_predictor',\n    'use_label_encoder': False\n    }","05972302":"xgb_classifier = xgb.XGBClassifier(**params)\nxgb_classifier.fit(X_train, \n                   y_train, \n                   eval_set=[(X_val, y_val)],\n                   early_stopping_rounds=100,\n                   verbose=True)","1e9fa41a":"sub = cudf.DataFrame()\nsub['id'] = submission['id']\nsub['target_1'] = xgb_classifier.predict_proba(test)[:,-1]\nsub.head(5)","731d42ca":"curf_params = { 'max_depth' : 16,\n    'n_estimators' : 2000,\n    'random_state' : 42,\n    'n_streams': 1,\n    'min_samples_leaf': 10,\n    'min_samples_split': 50\n}","b6199481":"rf = cuRF(**curf_params)\nrf.fit(X_train, y_train)\npredict = rf.predict_proba(X_val)\nmetrics.roc_auc_score(y_val, predict[1])","3dd7a9e4":"predict_2 = rf.predict_proba(test)\nsub['target_2'] = predict_2[1]\nsub.head(5)","7829801a":"sub['target'] = (sub['target_1']*10 +\\\n                 sub['target_2']*2)\/12","3a421e18":"sub = sub.drop(['target_1', 'target_2'], axis=1)\nsub.head(5)","c42d4b0d":"sub['id'] = sub['id'].astype('int32')","80c5cd17":"sub.dtypes","c1d5e5a9":"sub.to_csv('submission.csv', index=False)","3053a074":"# PART 2 - Blending with NVIDIA RAPIDS\n\n**This notebook is built on top of my earlier work on the competition with Nvidia Rapids - https:\/\/www.kaggle.com\/anirudhg15\/tps-oct-21-baseline-w-nvidia-rapids**\n\nFor explanations on NVIDIA RAPIDS and a much more beginner friendly introduction please refer the same","49216d74":"Parameter values from https:\/\/www.kaggle.com\/mohammadkashifunique\/tsp-single-xgboost-model","0ae9f494":"# Kindly upvote \ud83d\udc4d\ud83c\udffb if you found this kernel helpful\n\n**Also, kindly upvote if you are forking the kernel** \ud83d\ude0a","9d24802e":"![Nvidia Rapids](https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/rapids\/rapids-logo.png)"}}