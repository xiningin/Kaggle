{"cell_type":{"94dd33cc":"code","4c24cee7":"code","b4b089f8":"code","87faa56a":"code","6c83c074":"code","c7b358c7":"code","10579cbc":"code","70bf0f35":"markdown","79ca0d1a":"markdown","97a68485":"markdown","6676bf7e":"markdown","e8e9955f":"markdown","9a417ff6":"markdown","904b0b0f":"markdown"},"source":{"94dd33cc":"import pandas as pd\nimport seaborn as sns\nimport json\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# https:\/\/stackoverflow.com\/a\/42392805\n# https:\/\/www.dataquest.io\/blog\/jupyter-notebook-tips-tricks-shortcuts\/\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nsns.set()\nflatui = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\nsns.palplot(sns.color_palette(flatui))\n\n%matplotlib inline","4c24cee7":"# Les sources sont disponibles ici: https:\/\/developer.riotgames.com\/docs\/lol#data-dragon_champions\nwith open('..\/input\/champions-10.14.1.json') as json_file:\n    champions = json.load(json_file)\n    all_champions_info = pd.DataFrame.from_dict(champions['data'], orient='index')\n\n\nall_champions_info['main_role'] = all_champions_info['tags'].apply(lambda x: x[0])\nall_champions_info['secondary_role'] = all_champions_info['tags'].apply(lambda x: x[1] if len(x) > 1 else None)\nchampions = all_champions_info.drop(['tags', 'key', 'title', 'blurb', 'image', 'version', 'info', 'stats'], axis=1)\nchampions.set_index('id', inplace=True)\n\nchampions.head(8)","b4b089f8":"import pandas_profiling as pp\n\nprofile = pp.ProfileReport(champions, title=\"Analyse des champions de League of Legends\");\nprofile","87faa56a":"sns.countplot(x='main_role', data = champions);","6c83c074":"# R\u00e9partition des champions selon leur r\u00f4le principal et secondaire\nchamps_with_two_roles = champions[champions['secondary_role'].isnull() == False]\n\nsns.countplot(x='main_role', hue='secondary_role', data = champs_with_two_roles);","c7b358c7":"# R\u00e9cup\u00e9ration des statistiques des champions\nstats = pd.DataFrame.from_dict(all_champions_info['stats'].to_list())\nstats['id'] = all_champions_info['id'].to_list()\nstats.set_index('id', inplace=True)\n\n# Capacit\u00e9 \u00e0 prendre des d\u00e9gats, des niveaux 1 \u00e0 18\nstats['main_role'] = all_champions_info['main_role']\n\nstats['tankiness_lvl1'] = stats['hp'] + stats['armor'] + stats['spellblock']\nstats['tankiness_lvl6'] = (stats['hp'] + stats['hpperlevel'] * 6) + (stats['armor'] + stats['armorperlevel'] * 6) + (stats['spellblock'] + stats['spellblockperlevel'] * 6)\nstats['tankiness_lvl11'] = (stats['hp'] + stats['hpperlevel'] * 11) + (stats['armor'] + stats['armorperlevel'] * 11) + (stats['spellblock'] + stats['spellblockperlevel'] * 11)\nstats['tankiness_lvl16'] = (stats['hp'] + stats['hpperlevel'] * 16) + (stats['armor'] + stats['armorperlevel'] * 16) + (stats['spellblock'] + stats['spellblockperlevel'] * 16)\nstats['tankiness_lvl18'] = (stats['hp'] + stats['hpperlevel'] * 18) + (stats['armor'] + stats['armorperlevel'] * 18) + (stats['spellblock'] + stats['spellblockperlevel'] * 18)\n\ntankiness_stats = stats[['tankiness_lvl1', 'tankiness_lvl6', 'tankiness_lvl11', 'tankiness_lvl16', 'tankiness_lvl18', 'main_role']]\ntankiness_stats.head(5)","10579cbc":"lvl1_ranking = tankiness_stats.sort_values('tankiness_lvl1', ascending=False)[['tankiness_lvl1', 'main_role']]\nlvl6_ranking = tankiness_stats.sort_values('tankiness_lvl6', ascending=False)[['tankiness_lvl6', 'main_role']]\nlvl11_ranking = tankiness_stats.sort_values('tankiness_lvl11', ascending=False)[['tankiness_lvl11', 'main_role']]\nlvl16_ranking = tankiness_stats.sort_values('tankiness_lvl16', ascending=False)[['tankiness_lvl16', 'main_role']]\nlvl18_ranking = tankiness_stats.sort_values('tankiness_lvl18', ascending=False)[['tankiness_lvl18', 'main_role']]\n\ntankiness_stats.head()\n\nlvl6_ranking.head(10)\nlvl11_ranking.head(10)\nlvl16_ranking.head(10)\nlvl18_ranking.head(10)","70bf0f35":"### Incroyable !\n\nEn termes de **tankiness** et si on consid\u00e8re uniquement les statistiques du champion (hors comp\u00e9tences) les champions les plus \"tanky\" ne sont pas les champions consid\u00e9r\u00e9s comme des Tanks par Riot Games \ud83d\ude32.\n\nPar exemple, nulle trace ici de [Leona](https:\/\/euw.leagueoflegends.com\/fr-fr\/champions\/leona\/) ou [Nautilus](https:\/\/euw.leagueoflegends.com\/fr-fr\/champions\/nautilus\/) qui sont les champions consid\u00e9r\u00e9s comme les meilleurs Tanks du jeu.\n\nSi l'essentiel des places du classement sont prises par des Guerriers, on remarque qu'assez rapidement les Tanks se positionnent dans le haut du classement.\n\n* Au niveau **1**, le premier Tank est **TOP 4** ;\n* Au niveau **6**, le premier Tank est **TOP 1** ;\n* Au niveau **11**, le premier Tank est **TOP 2** ;\n* Au niveau **16**, le premier Tank est **TOP 2** ;\n* Au niveau **18**, le premier Tank est **TOP 2** ;\n\nIl est aussi tr\u00e8s _surprenant_ de voir un Tireur tr\u00e8s tanky au level 1 ([Twitch](https:\/\/euw.leagueoflegends.com\/fr-fr\/champions\/twitch\/)) puisque ce r\u00f4le est consid\u00e9r\u00e9 comme \u00e9tant \"tr\u00e8s fragile\" et n\u00e9cessite d'\u00eatre assist\u00e9 d'un champion Tank et\/ou Support sur la ligne du bas.","79ca0d1a":"# R\u00e9partition des champions\n\nLeague of Legends est un jeu connu pour la tr\u00e8s grande diversit\u00e9 des champions propos\u00e9s.\n\nUn champion dans LoL a un r\u00f4le principal et parfois un r\u00f4le secondaire.\n\n> Il serait int\u00e9ressant de voir d'ailleurs si les champions qui n'ont qu'un seul r\u00f4le sont \"meilleurs\" sur leur r\u00f4le que les champions plus polyvalents.\n\nVoici la liste des r\u00f4les possibles dans League of Legends:\n\n* Guerrier (Fighter)\n* Mage\n* Assassin\n* Tank\n* Tireur (Marksman)\n* Support\n\nCe sera l'occasion de r\u00e9pondre \u00e0 de premi\u00e8res questions:\n\n* Combien dans chaque r\u00f4le ?\n* Combien ont 2 r\u00f4les ?\n* Quelle est la corr\u00e9lation entre les r\u00f4les pour ceux qui en ont 2 ?\n","97a68485":"# Une premi\u00e8re exploration des donn\u00e9es\n\nComme souvent face \u00e0 une nouvelle source de donn\u00e9es, nous avons besoin de rapidement prendre connaissance de ce qui\npourrait avoir un int\u00e9r\u00eat \"statistique\": les valeurs \"\u00e9loign\u00e9es\" (outliers), les valeurs manquantes etc.\n\nPour cela nous allons utiliser pandas profiling, une librairie qui g\u00e9n\u00e8re un [rapport au format HTML sur un DataFrame donn\u00e9](https:\/\/pandas-profiling.github.io\/pandas-profiling\/docs\/master\/rtd\/).\n\nPuisque nous ne savons rien du jeu de donn\u00e9 t\u00e9l\u00e9charg\u00e9, cet outil va nous donner quelques informations.\n\nPour l'installer, utilisez pip:\n\n```\npip install pandas_profiling\n```\n\nIl faudra ensuite d\u00e9clencher la g\u00e9n\u00e9ration du rapport:\n\n```python\nfrom pandas_profiling import ProfileReport\n\nprofile = ProfileReport(champions)\nprofile.to_file(output_file='exploration_lol.html')\n```\n\nLes utilisateurs de Jupyter pr\u00e9f\u00e9reront afficher ce rapport directement dans leur IDE. Pour cela, remplacer la derni\u00e8re instruction:\n\n```python\nprofile = ProfileReport(champions)\nprofile.to_notebook_iframe() # Rapport HTML\nprofile.to_widgets() # Affichage adapt\u00e9 \u00e0 Jupyter\n```\n\nC'est ce que nous allons faire pour obtenir de premi\u00e8res informations sur notre jeu de donn\u00e9es.","6676bf7e":"# Quels sont les champions les plus aptes \u00e0 \u00eatre des Tanks ?\n\nOn va prendre en compte une partie des statistiques disponibles pour les champions.\n\nLes statistiques prises en compte vont \u00eatre les suivantes:\n\n* Points de vie\n* Armure\n* R\u00e9sistance magique (d\u00e9crite par \"spell block)\n\nParce qu'il va \u00eatre difficile de repr\u00e9senter l'\u00e9volution des 149 champions, nous allons nous int\u00e9resser aux 10 plus \"forts\" \u00e0 diff\u00e9rents niveaux de la partie:\n\n* Au niveau 1\n* Au niveau 6\n* Au niveau 11\n* Au niveau 16\n* Et au niveau 18\n\n> Le niveau 18 est le niveau maximal d'\u00e9volution sur League of Legends, en parties normales et comp\u00e9titives.\n\nTout d'abord, nous allons cr\u00e9er une nouvelle variable appel\u00e9e `tankiness` qui sera la somme de ces facult\u00e9s d\u00e9fensives. Il est \u00e9vident que chacune de ces\nvariables n'a pas le m\u00eame impact selon le type de d\u00e9gats pris, nous affinerons au besoin par la suite.\n\nLe but \u00e9tant d'\u00e9tablir un premier classement des champions les plus \"tanky\" au niveau 1, et de voir ensuite au fil de la partie si ce classement \u00e9volue (qui entre, qui sort par exemple).\n\nEn effet, dans League of Legends il est connu et admis que chaque champion a des \"power spikes\" (pics de puissance) \u00e0 diff\u00e9rents moments de la partie.\nCertains champions sont consid\u00e9r\u00e9s tr\u00e8s forts dans les premiers niveaux, puis \"s'essoufflent\" en cours de partie. D'autres deviennent tr\u00e8s forts en milieu de partie, et enfin certains ont une courbe de puissance qui atteint son pic en fin de partie (on dira de ces champions qu'ils \"scalent\").\n\nNous allons essayer de confirmer cela par la Data:\n\n* Etablissement de la liste des champions les plus forts aux niveaux **1**, **6**, **11**, **16** et **18**\n* Evolution du classement\n* Pour les champions de la cat\u00e9gorie \"Tanks\", courbe d'\u00e9volution de leur \"tankiness\" sur la dur\u00e9e de la partie\n","e8e9955f":"## Interpr\u00e9tation du rapport\n\nTout d'abord nous obtenons de bonnes informations sur la r\u00e9partition des champions.\n\nIl y a majoritairement plus de Guerriers et de Mages, et si une majorit\u00e9 des champions ont un r\u00f4le secondaire, ce n'est pas une obligation.\n\nLe jeu de donn\u00e9es obtenu est plut\u00f4t propre ! Aucune donn\u00e9e manquante dans les variables \u00e0 disposition.\n\nEnfin, une analyse de corr\u00e9lation Phik montre une corr\u00e9lation significative entre r\u00f4le principal et r\u00f4le secondaire: nous allons commencer notre \u00e9tude\nen essayant de confirmer ces premiers \u00e9l\u00e9ments sur le jeu de donn\u00e9es.","9a417ff6":"### Classement des meilleurs tanks\n\nIl nous reste maintenant \u00e0 trier les diff\u00e9rentes variables pour en ressortir le classement final !\n\n","904b0b0f":"Int\u00e9ressant: on note que les Guerriers sont souvent des Tanks et qu'une bonne partie des supports peuvent aussi \u00eatre jou\u00e9s en tant que Mage (et vice versa: logique). Il y a aussi une bonne synergie entre les r\u00f4les de Support et Mage."}}