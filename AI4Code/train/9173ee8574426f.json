{"cell_type":{"f21209ff":"code","edccff8b":"code","0db12656":"code","6097dd70":"code","d0d4d01f":"code","884d3fdd":"code","fb198298":"code","58a375e1":"code","9d419320":"code","8858ec82":"code","809dac60":"code","24b4a46a":"code","247f1252":"code","9618cce8":"code","8258e82a":"code","37fa5bc8":"code","0d0d3e0b":"code","cdd20cd8":"code","e379abe8":"code","66f6d568":"code","2852a95d":"code","40a0f0a7":"code","19b6ad05":"code","a9dd9b64":"code","3512df33":"code","b9ba419c":"code","8691e757":"code","a7860dc0":"code","ce829b3c":"markdown","2c273965":"markdown","6ffd377d":"markdown","abdde19a":"markdown","65143930":"markdown","e842b7e3":"markdown","6e49a28f":"markdown","2fb4a8ef":"markdown","0d1c6d11":"markdown","ecac9f3b":"markdown","b8869ef0":"markdown","7d230e3f":"markdown","e71e8e0a":"markdown"},"source":{"f21209ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","edccff8b":"#import all the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0db12656":"#Read the file\niris = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\niris.head()","6097dd70":"print('The different types of Iris Flower are ',np.unique(iris['Species']))","d0d4d01f":"print('The shape of the IRIS dataset', iris.shape)\n#It has 150 rows and 6 columns","884d3fdd":"#The information of iris dataset is as follows\niris.info()\n#no missing data","fb198298":"iris.describe()","58a375e1":"#Drop the unnecesary column\n\niris.drop('Id', axis=1, inplace=True)","9d419320":"iris.head()","8858ec82":"#iris['SepalLengthCm'].hist(), iris['SepalWidthCm'].hist()\nfig,ax = plt.subplots(2,2,figsize=(10,6))\nax[0,0].hist(iris['SepalLengthCm'])\nax[0,1].hist(iris['SepalWidthCm'])\nax[1,0].hist(iris['PetalLengthCm'])\nax[1,1].hist(iris['PetalWidthCm'])\n\nax[0,0].set(xlabel='Sepal Length')\nax[0,1].set(xlabel='Sepal Width')\nax[1,0].set(xlabel = 'Petal Length')\nax[1,1].set(xlabel = 'Petal Width')\n","809dac60":"iris.plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm')","24b4a46a":"#setosa flower\nfig = iris[iris['Species'] == 'Iris-setosa'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='blue',label='Setosa')\n\n#Versicolor\n\niris[iris['Species'] == 'Iris-versicolor'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='red',label='Versicolor', ax=fig)\n\n#virginica\n\niris[iris['Species'] == 'Iris-virginica'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='green',label='Virginica', ax=fig)\n\nfig.set_title('SepalLength vs Sepal Width')","247f1252":"#setosa flower\nfig = iris[iris['Species'] == 'Iris-setosa'].plot(kind='scatter',x='PetalLengthCm',y='PetalWidthCm',color='blue',label='Setosa')\n\n#Versicolor\n\niris[iris['Species'] == 'Iris-versicolor'].plot(kind='scatter',x='PetalLengthCm',y='PetalWidthCm',color='red',label='Versicolor', ax=fig)\n\n#virginica\n\niris[iris['Species'] == 'Iris-virginica'].plot(kind='scatter',x='PetalLengthCm',y='PetalWidthCm',color='green',label='Virginica', ax=fig)\n\nfig.set_title('Petal Length vs Petal Width')","9618cce8":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='Species',y='PetalLengthCm',data=iris)\nplt.subplot(2,2,2)\nsns.violinplot(x='Species',y='PetalWidthCm',data=iris)\nplt.subplot(2,2,3)\nsns.violinplot(x='Species',y='SepalLengthCm',data=iris)\nplt.subplot(2,2,4)\nsns.violinplot(x='Species',y='SepalWidthCm',data=iris)","8258e82a":"#Correlation matrix\n\nsns.heatmap(iris.corr(),cmap=sns.diverging_palette(20, 220, n=200),annot=True)","37fa5bc8":"#split the train-test data\n\ny = iris['Species']\nX = iris.drop('Species',axis=1)\n\n#Label Encoder\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y)","0d0d3e0b":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","cdd20cd8":"#standardise the features\n\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","e379abe8":"from sklearn.linear_model import LogisticRegression\n\nlr = LogisticRegression(C=100.0)\nlr.fit(X_train_std, y_train)","66f6d568":"y_pred = lr.predict(X_test_std)\n\nfrom sklearn.metrics import accuracy_score\n\nprint('Accuracy score : %.2f' % accuracy_score(y_test, y_pred))","2852a95d":"from sklearn.svm import SVC\n\nsvm = SVC(kernel = 'rbf', random_state=1, gamma=0.2, C=100.0)\nsvm.fit(X_train_std, y_train)","40a0f0a7":"y_pred = svm.predict(X_test_std)\n\nfrom sklearn.metrics import accuracy_score\n\nprint('Accuracy score : %.2f' % accuracy_score(y_test, y_pred))","19b6ad05":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(criterion = 'gini',\n                             random_state=1,\n                              max_depth=4\n                             )\n\ntree.fit(X_train_std, y_train)","a9dd9b64":"y_pred = tree.predict(X_test_std)\nprint('Accuracy Score %0.2f' % accuracy_score(y_pred, y_test))","3512df33":"from sklearn.ensemble import RandomForestClassifier\n\nforest = RandomForestClassifier(criterion='gini',\n                               n_estimators=25,\n                               random_state=1,\n                               n_jobs=2)\n\nforest.fit(X_train_std, y_train)\n","b9ba419c":"y_pred = forest.predict(X_test_std)\nprint('Accuracy score %.2f' %accuracy_score(y_pred,y_test))","8691e757":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=5,\n                          p=2,\n                          metric = 'minkowski')\nknn.fit(X_train_std, y_train)","a7860dc0":"y_pred = knn.predict(X_test_std)\nprint('Accuracy score %.2f' %accuracy_score(y_pred,y_test))","ce829b3c":"Logistic Regression","2c273965":"### Modelling\n\n","6ffd377d":"### Visualization","abdde19a":"From the above graph, it is clearly seen that the setosa flower is clearly separable while the others two are not.","65143930":"All the flowers are separable.\n\nNow, lets see the impact of violin plot on each features","e842b7e3":"RandomForest Classifier","6e49a28f":"SVM","2fb4a8ef":"KNN","0d1c6d11":"Now, lets us see how each features are distributed.","ecac9f3b":"The features of the iris dataset are Sepal Length , SepalWidth, PetalLength and PetalWidth. All measurements are in cm. The target variable is Species which has three different flower categories Iris-Setosa, Iris-versicolor and Iris-virginica.","b8869ef0":"Now lets see the distribution of Sepal length versus Sepal width","7d230e3f":"Decision Tree","e71e8e0a":"Sepal Length and sepal width are not correlated.\nPetal Length adn Petal Width are highly correlated.\n"}}