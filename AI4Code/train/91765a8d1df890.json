{"cell_type":{"1964361d":"code","821076ca":"code","32c1ea9f":"code","2c2859c5":"code","de461459":"code","6972a896":"code","30723682":"code","2b1b94b0":"code","634f4585":"code","92452150":"code","4e7349cc":"code","bf7acde2":"code","45dcf0ad":"code","3dee8eac":"markdown","e1ef31e4":"markdown","9b42422f":"markdown"},"source":{"1964361d":"import requests\nimport pandas as pd\nimport sys\nimport threading, logging","821076ca":"# comment all lines of this cell\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\napi_key = user_secrets.get_secret(\"moviedb_apikey\")","32c1ea9f":"# uncomment next line and add your tmdb api key\n# api_key = \"<moviedb_apikey>\"\nlanguage_count = {\n    'en':7000,\n    'hi':2000,\n    'bn':1000,\n}","2c2859c5":"def get_movies(lang, freq):\n  url = 'https:\/\/api.themoviedb.org\/3\/movie\/popular?api_key={api_key}&with_original_language={lang}'.format(api_key=api_key,lang=lang)\n  # print(url)\n  movies = []\n  page = 1\n  progress = 0\n  while movies.__len__()<freq:\n    try:\n        res = requests.get(url+\"&page=\"+str(page))\n    except:\n        raise ('not connected to internet or movidb issue')\n\n    if res.status_code != 200:\n        print ('error')\n        return []\n\n    res = res.json()\n    \n    if 'errors' in res.keys():\n      print('api error !!!')\n      return movies\n\n    movies = movies + res['results']\n\n    if progress != round(len(movies)\/freq*100):\n      progress = round(len(movies)\/freq*100)\n      if progress%5==0:\n        print( progress, end=\"%, \")\n        \n    page = page + 1\n    # break\n    # print(res)\n  return movies","de461459":"all_movies = []\n\nfor key in language_count:\n  # print(key,language_count[key])\n  print(\"Downloading \", key, end=\" : \")\n  movies = get_movies(key,language_count[key])\n  all_movies = all_movies + movies\n  print('Total movies found : ', movies.__len__())\n  # break","6972a896":"df = pd.DataFrame(all_movies, columns=['genre_ids', 'id', 'original_language',\n       'overview', 'popularity', 'release_date', 'title', 'vote_average', 'vote_count'])\ndf.to_csv('movies_dataset.csv', index=False)\ndf.to_pickle('movies_dataset.pk',)\ndf","30723682":"ids = df['id'].tolist()","2b1b94b0":"def get_credits(ids):\n  total_len = len(ids)\n  progress = 0\n  done_items = 0\n  credits = []\n\n  def get_credit(id):\n    url = 'https:\/\/api.themoviedb.org\/3\/movie\/{movie_id}\/credits?api_key={api_key}'.format(api_key=api_key,movie_id=id)\n    try:\n        res = requests.get(url)\n    except:\n        raise ('not connected to internet or movidb issue')\n\n    if res.status_code != 200:\n        print ('error')\n        return []\n\n    res = res.json()\n    \n    if 'errors' in res.keys():\n      print('api error !!!')\n      return credits\n    # print(res)\n    credits.append(res)\n\n  threads = list()\n  for id in ids:\n    x = threading.Thread(target=get_credit,args=(id,))\n    threads.append(x)\n    x.start()\n  for index, thread in enumerate(threads):\n      # logging.info(\"Main    : before joining thread %d.\", index)\n      thread.join()    \n\n  return credits\n\nmovie_credits = get_credits(ids)\n\nnew_movie_credits = {'cast':[],'crew':[]}\nfor movie_credit in movie_credits:\n  \n  new_movie_credits['cast'].append( {'id' : movie_credit['id'], 'cast' :[]} )\n  for credit in movie_credit['cast']:\n    new_movie_credits['cast'][ -1 ][ 'cast' ].append({\n        'cast_id': credit['id'],\n        'name': credit['name'],\n        'character': credit['character'],\n    })\n    # break\n  \n  new_movie_credits['crew'].append( {'id' : movie_credit['id'], 'crew' :[]} )\n  for crew in movie_credit['crew']:\n    new_movie_credits['crew'][ -1 ][ 'crew' ].append({\n        'crew_id': crew['id'],\n        'name': crew['name'],\n        'department': crew['department'],\n    })\n  # break\n\ncast_df = pd.DataFrame(new_movie_credits['cast'])\ncrew_df = pd.DataFrame(new_movie_credits['crew'])\n\ncast_df.to_csv('cast_dataset.csv', index=False)\ncrew_df.to_csv('crew_dataset.csv', index=False)\n    ","634f4585":"cast_df","92452150":"crew_df","4e7349cc":"def get_keywords(ids):\n  total_len = len(ids)\n  progress = 0\n  keywords = []\n\n  def get_keyword(id):\n    url = 'https:\/\/api.themoviedb.org\/3\/movie\/{movie_id}\/keywords?api_key={api_key}'.format(api_key=api_key,movie_id=id)\n    try:\n        res = requests.get(url)\n    except:\n        raise ('not connected to internet or movidb issue')\n\n    if res.status_code != 200:\n        print ('error')\n        return []\n\n    res = res.json()\n    \n    if 'errors' in res.keys():\n      print('api error !!!')\n      return keywords\n    # print(res)\n    keywords.append(res)\n\n    # for id in ids:\n    #   get_cred\n\n  threads = list()\n  for id in ids:\n    x = threading.Thread(target=get_keyword,args=(id,))\n    threads.append(x)\n    x.start()\n  for index, thread in enumerate(threads):\n    logging.info(\"Main    : before joining thread %d.\", index)\n    thread.join()\n\n  return keywords\n\n\nmovie_keywords = get_keywords(ids)\n    ","bf7acde2":"len(movie_keywords)","45dcf0ad":"keywords_df = pd.DataFrame(movie_keywords)\nkeywords_df.to_csv('keywords_dataframe.csv')\nkeywords_df","3dee8eac":"# Get latest movie data using moviedb api\nthis guide will give you a starting point on how to fetch data from moviedb, process that data and save as Pandas DataFrame\n\n<br>\n\n## Steps :\n1. follow this [guide](https:\/\/developers.themoviedb.org\/3) and get your own MovieDB api.\n2. in cell 2, configure with the api key you got and language and number of movies for this language\n3. run all the cells, you will have dataframes saved as csv.\n\n<br>\n\n## Notes :\n- currently there is some biased towards popular movies but for learning purposes it should be ok.\n- read the MoviDB [docs](https:\/\/developers.themoviedb.org\/3) and fetch extra datas you need.","e1ef31e4":"## language_count object :\n1. find ISO-639-1  [codes](https:\/\/en.wikipedia.org\/wiki\/List_of_ISO_639-1_codes) for required languages\n2. int the key is the laguage and value is the number of movies of the same laguage to be downloaded\n\n``` \nlanguage_count = {\n  ...,\n  'language' :number_of_movies,\n  ...\n}\n```","9b42422f":"## Approximate time taken (in Google Colab)\n- get_movies()   ~6mins\n- get_credits()  ~3mins\n- get_keywords() ~3mins\n- **Total**      ~12mins"}}