{"cell_type":{"e1245f49":"code","ceb5d472":"code","4457d76a":"code","9ec4bcfc":"code","dfca2cd7":"code","0fe57475":"code","05ca4744":"code","77da49b4":"code","f2e9c69d":"code","737f9b10":"code","9a82bcca":"code","1ca222ee":"code","6e7b82c0":"code","004924dd":"code","c37251d6":"code","0bed143d":"code","e9111f10":"code","e66a544a":"code","dfd1fcc2":"code","14e5b687":"code","99b01a8e":"code","c652de23":"code","14eeb67a":"code","90c397d2":"markdown","5d9f21a4":"markdown","189a56f7":"markdown"},"source":{"e1245f49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ceb5d472":"from pathlib import Path\nfrom functools import reduce\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport urllib.parse","4457d76a":"np.random.seed(25)","9ec4bcfc":"BASE_DIR = Path(\"\/kaggle\/input\/landmark-retrieval-2020\")\nTRAIN_CSV = BASE_DIR \/ \"train.csv\"\nTRAIN_DATA = BASE_DIR \/ \"train\"\nTEST_DATA = BASE_DIR \/ \"test\"\nIDX_DATA = BASE_DIR \/ \"index\"","dfca2cd7":"df = pd.read_csv(TRAIN_CSV)","0fe57475":"df.shape","05ca4744":"df.head(5)","77da49b4":"# check if any data is missing\ndf.isna().sum()","f2e9c69d":"# Get the number of images in each folders\n\ntrain_imgs = TRAIN_DATA.rglob(\"*.jpg\")\nreduce(lambda acc, e: acc + 1, train_imgs, 0)","737f9b10":"idx_imgs = IDX_DATA.rglob(\"*.jpg\")\nreduce(lambda acc, e: acc + 1, idx_imgs, 0)","9a82bcca":"test_imgs = TEST_DATA.rglob(\"*.jpg\")\nreduce(lambda acc, e: acc + 1, test_imgs, 0)","1ca222ee":"# Check if id i.e image id column is unique, as mentioned in the data description\ndf['id'].is_unique","6e7b82c0":"# Get the number of images per landmark\nlandmark_dist = df['landmark_id'].value_counts().rename_axis('landmark_id')\\\n.reset_index(name=\"count\")\\\n.sort_values(by=['count'], ascending=[False])\n\n(\"Max : {} | Min : {}\".format(landmark_dist['count'].max(), landmark_dist['count'].min()))","004924dd":"landmark_dist['count'].describe()","c37251d6":"# Check the distribution of landmark's images\nsns.set(style=\"darkgrid\")\nfig, (ax1, ax2) = plt.subplots(2, 1)\nfig.set_size_inches(20, 12)\nsns.countplot(\n    df['landmark_id'],\n    order=df['landmark_id'].value_counts().index[:25],\n    ax=ax1\n)\nsns.countplot(\n    df['landmark_id'],\n    order=df['landmark_id'].value_counts().index[-25:],\n    ax=ax2\n)\nax1.set_title('distribution of landmark images | top 25')\nax2.set_title('distribution of landmark images | last 25')\nax2.set(ylim=(0, 50))\nplt.show()","0bed143d":"# Courtesy :: https:\/\/www.kaggle.com\/sudeepshouche\/identify-landmark-name-from-landmark-id\n\nurl = 'https:\/\/s3.amazonaws.com\/google-landmark\/metadata\/train_label_to_category.csv'\ndf_classes = pd.read_csv(url, index_col = 'landmark_id', encoding='latin', engine='python')\n\nget_landmark_name = lambda x: urllib.parse.unquote(x['category'].replace('http:\/\/commons.wikimedia.org\/wiki\/Category:', ''))\ndf_classes['landmark_name'] = df_classes.apply(get_landmark_name, axis=1)","e9111f10":"df_classes.head(5)","e66a544a":"# Randomly chooses at max 12 images for any landmark based on its id\ndef render(img_path, nrow, col, ax, row):\n    print(\"Loading : {}\".format(img_path))\n    img = cv2.imread(img_path)\n    ax[nrow, col].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n    \n    if row is not None:\n        ax[nrow, col].set_title(row['landmark_name'])\n\n\ndef get_images(landmark_id):    \n    _df = df.loc[df['landmark_id'] == landmark_id, :]\n    \n    plt.rcParams[\"axes.grid\"] = False\n    \n    _df = _df.sample(n=12).reset_index()\n    \n    _df = pd.merge(_df, df_classes, on=['landmark_id'], how=\"inner\")\n    \n    no_row = np.math.ceil(min(len(_df), 12)\/3)\n    f, ax = plt.subplots(no_row, 3, figsize=(24, 20))\n    print(\"Fig Shape : {0}\".format((no_row, 3)))\n        \n    \n    nrow = 0\n    for idx, row in _df.iterrows():\n        image_id = row['id'] + \".jpg\"\n        \n        img_path = TRAIN_DATA \/ image_id[0] \/ image_id[1] \/ image_id[2] \/ image_id\n        \n        col = int(idx % 3)\n        render(str(img_path), nrow, col, ax, row)\n                \n        # when all columns are filled in a row\n        if col == 2:\n            nrow += 1\n    ","dfd1fcc2":"get_images(138982)","14e5b687":"# 2nd Landmark Imgs\nget_images(126637)","99b01a8e":"# Get random images from folders\n\ndef get_images_from_dir(img_dir):\n    imgs = np.random.choice(list(TEST_DATA.rglob(\"*.jpg\")), 12)\n    \n    fig, ax = plt.subplots(4, 3, figsize=(24, 20))\n    \n    row = 0\n    for idx, img_path in enumerate(imgs):\n        \n        col = idx % 3\n        \n        render(str(img_path), row, col, ax, row=None)\n        \n        if col == 2:\n            row += 1","c652de23":"# Random images from test dir\nget_images_from_dir(TEST_DATA)","14eeb67a":"# Random images from index dir\nget_images_from_dir(IDX_DATA)","90c397d2":"The landmark id `138982` weirdly has too many images, so it could be the class label to show non-labeled images or it could be a valid landmark but just have two many images. One way to check is too see few images randomly that belongs to that landmark id.","5d9f21a4":"As seen in the above block, about 75% landmarks have less than or equal to 20 images. Looks like data is highly imbalanced","189a56f7":"After couple of runs, it looks like the images belong to `138982` are unlabeled ones"}}