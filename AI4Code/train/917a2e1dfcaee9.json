{"cell_type":{"af657e47":"code","60403154":"code","b50500ca":"code","a8f401b9":"code","1c135e12":"code","12e9c601":"code","ab20e4b9":"code","099cc299":"code","d4cc935b":"code","54e344ca":"code","b7621243":"code","db14360e":"code","2ff20309":"code","24de078b":"code","fb7c75dc":"code","80cfeefb":"code","9b1c3958":"code","929afd0d":"code","d811299b":"code","dcfbb016":"code","119b8c40":"code","d6e21f31":"code","9d947cd3":"code","9daf0c17":"code","27aec777":"code","10a3a720":"code","5f9d49f2":"code","af31b252":"code","17c2465e":"code","d11f6488":"markdown","b49eb06a":"markdown","edda747e":"markdown","68e89ebb":"markdown","c26333e9":"markdown","c6955c2a":"markdown","1e6dee19":"markdown","e11a4475":"markdown","81129c11":"markdown","89726936":"markdown","20656cb6":"markdown","c2607861":"markdown","ac8446f1":"markdown","8427b17d":"markdown","c11e4c72":"markdown","e0f7c253":"markdown","04f913e8":"markdown","aa6b8e34":"markdown","879d768d":"markdown","c2b12d52":"markdown","697f1b6c":"markdown","9b45ec13":"markdown","8f6fbda2":"markdown","264656c3":"markdown","5544a301":"markdown"},"source":{"af657e47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.plotly as py\nimport calendar\nimport folium\nfrom mpl_toolkits.basemap import Basemap\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","60403154":"df911 = pd.read_csv(\"..\/input\/911.csv\")\ndf911 = df911.drop(columns = \"e\")\nprint(df911.head())\nprint(type(df911))\nprint(df911.info())\nprint(df911.dtypes)","b50500ca":"lat = df911['lat'].values\nlon = df911['lng'].values\n\n# 1. Draw the map background\nfig = plt.figure(figsize=(8, 8))\nm = Basemap(projection='lcc', resolution='l', \n            lat_0=39, lon_0=-79,\n            width=1E6, height=1.2E6)\nm.shadedrelief()\nm.drawcoastlines(color='gray')\nm.drawcountries(color='gray')\nm.drawstates(color='gray')\n\n# 2. scatter lat and long values\n\nm.scatter(lon, lat, latlon=True,\n          cmap='Reds', alpha=0.5)\nplt.show()","a8f401b9":"print(\"Number of unique ZIP codes:\",df911['zip'].nunique())\nprint(\"Number of unique township:\",df911['twp'].nunique())\nprint(\"Number of unique title:\",df911['title'].nunique())","1c135e12":"df911[\"title\"].value_counts()","12e9c601":"#df = df911[df911[\"title\"].str.match(\"EMS\")]\nprint(df911[\"title\"][df911[\"title\"].str.match(\"EMS\")].value_counts())\nprint(df911[\"title\"][df911[\"title\"].str.match(\"Traffic\")].value_counts())\nprint(df911[\"title\"][df911[\"title\"].str.match(\"Fire\")].value_counts())","ab20e4b9":"df911[\"type\"] = df911[\"title\"].apply(lambda x: x.split(':')[0])\nprint(df911[\"type\"].value_counts())\n#df911[\"type1\"] = df911[\"title\"].apply(lambda x: x.split(':')[1])\ndf911[\"type\"].value_counts().plot(fontsize = 18,\n                                       kind = 'pie',\n                                      autopct = \"%1.0f%%\",\n                                     colors = ['#ff9999','#66b3ff','#99ff99'],\n                                   )\nplt.title(\"Distribution of Emergency category\", fontsize=30)\nplt.show()","099cc299":"df911['zip'].value_counts().head(10).plot.bar(color = 'chocolate')\nplt.xlabel('Zip Codes',labelpad = 20)\nplt.ylabel('Number of Calls')\nplt.title('Zip Codes with Most Calls')\nplt.show()","d4cc935b":"df911['twp'].value_counts().head(10).plot.bar(color = 'gold')\nplt.xlabel('Townships', labelpad = 20)\nplt.ylabel('Number of Calls')\nplt.title('Townships with Most Calls')\nplt.show()","54e344ca":"plt.figure(figsize=(18,6))\nsns.countplot( x='twp',data=df911,order=df911['twp'].value_counts().index[:10], hue='type', palette='rocket')\nplt.title('Township wise type of calls')\nplt.show()","b7621243":"plt.figure(figsize=(18,6))\nsns.countplot( x='zip',data=df911,order=df911['zip'].value_counts().index[:10], hue='type', palette='rocket')\nplt.title('ZIP wise type of calls')\nplt.show()","db14360e":"print(\"EMS categories count\",pd.unique(df911[\"title\"][df911[\"title\"].str.match(\"EMS\")]).size)\nprint(\"Traffic categories count\",pd.unique(df911[\"title\"][df911[\"title\"].str.match(\"Traffic\")]).size)\nprint(\"Fire categories count\",pd.unique(df911[\"title\"][df911[\"title\"].str.match(\"Fire\")]).size)","2ff20309":"df911[\"timeStamp\"] = pd.to_datetime(df911[\"timeStamp\"])\ndf911['Hour'] = df911['timeStamp'].apply(lambda x: x.hour)\ndf911['Month'] = df911['timeStamp'].apply(lambda x: x.month)\ndf911['Day of Week'] = df911['timeStamp'].apply(lambda x: x.dayofweek)\ndmap= {0:'Monday',1:'Tuesday',2:'Wednesday',3:'Thursday',4:'Friday',5:'Saturday',6:'Sunday'}\ndmonth = {1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}\ndf911['Month']= df911['Month'].map(dmonth)\ndf911['Day of Week']= df911['Day of Week'].map(dmap)\ndf911.head()","24de078b":"worder = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\nplt.figure(figsize=(12,8))\nsns.countplot(x='Day of Week',data=df911,hue=\"type\",order = worder,palette = 'viridis')\nplt.legend(loc=[0,1])\nplt.title('Day wise count plot for different types')\nplt.show()","fb7c75dc":"morder = ['January','February','March','April','May','June','July','August','September','October','November','December']\nplt.figure(figsize=(12,8))\nsns.countplot(x='Month',data=df911,hue=\"type\",order = morder,palette = 'deep') \nplt.legend(loc=[0,1])\nplt.title('Month wise count plot for different types')\nplt.show()","80cfeefb":"plt.figure(figsize=(12,8))\nsns.countplot(x='Hour',data=df911,hue=\"type\",palette = 'bright' )\nplt.legend(loc=[0,1])\nplt.title('Hour wise count plot for different types')\nplt.show()","9b1c3958":"plt.xlabel('EMS Category')\nplt.ylabel('Count')\nplt.title('Count of Top 10 Emergencies under EMS Cataegory')\ndf911[\"title\"][df911[\"title\"].str.match(\"EMS\")].value_counts().sort_values(ascending=False).head(10).plot.bar(color = 'salmon')\nplt.show()","929afd0d":"plt.xlabel('Fire Category')\nplt.ylabel('Count')\nplt.title('Count of Top 10 Emergencies under Fire Cataegory')\ndf911[\"title\"][df911[\"title\"].str.match(\"Fire\")].value_counts().sort_values(ascending=False).head(10).plot.bar(color = 'sienna')\nplt.show()","d811299b":"plt.xlabel('Traffic Category')\nplt.ylabel('Count')\nplt.title('Count of Top 5 Emergencies under Traffic Cataegory')\ndf911[\"title\"][df911[\"title\"].str.match(\"Traffic\")].value_counts().sort_values(ascending=False).head().plot.bar(color = 'turquoise')\nplt.show()","dcfbb016":"df911['Date'] = df911['timeStamp'].apply(lambda time:time.date())\nplt.figure(figsize=(15,6))\nplt.title('Traffic')\nplt.ylabel('Number of Calls')\ndf911[df911['type'] == 'Traffic'].groupby('Date').count()['twp'].plot()\nplt.tight_layout\nplt.show()","119b8c40":"plt.figure(figsize=(15,6))\nplt.title('Fire')\nplt.ylabel('Number of Calls')\ndf911[df911['type'] == 'Fire'].groupby('Date').count()['lat'].plot(color='green')\nplt.tight_layout\nplt.show()","d6e21f31":"plt.figure(figsize=(15,6))\nplt.title('EMS')\ndf911[df911['type'] == 'EMS'].groupby('Date').count()['lat'].plot(color='teal')\nplt.tight_layout\nplt.show()","9d947cd3":"df_heatHour = df911.groupby(by = ['Day of Week', 'Hour']).count()['type'].unstack()\ndf_heatHour.index = pd.CategoricalIndex(df_heatHour.index, categories=worder)\ndf_heatHour.sort_index(level=0, inplace=True)\ndf_heatHour.head()","9daf0c17":"plt.figure(figsize=(10,7))\nsns.heatmap(df_heatHour, cmap='viridis')\nplt.title('Relationship of calls between Hour and Days of the week')\nplt.show()","27aec777":"m_p = {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',\n       8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\ndf_heat_Month = df911.groupby(by = ['Day of Week', 'Month']).count()['type'].unstack()\ndf_heat_Month.index = pd.CategoricalIndex(df_heat_Month.index,categories = worder)\ndf_heat_Month.sort_index(level=0, inplace=True)\ndf_heat_Month.rename(columns = m_p,inplace=True)\ndf_heat_Month.head()","10a3a720":"plt.figure(figsize=(10,5))\nsns.heatmap(df_heat_Month, cmap='viridis')\nplt.xlabel('Month')\nplt.title('Relationship of calls between Month and Day of the week')\nplt.show()","5f9d49f2":"sns.clustermap(df_heat_Month)\nplt.show()","af31b252":"locations = df911[['lat', 'lng']]\nlocationlist = locations.values.tolist()\nprint(len(locationlist))\nprint(locationlist[1])\nmap = folium.Map(location=[40.2172859, -75.405182], zoom_start=12)\nfolium.Marker(locationlist[1], popup=df911['title'][1]).add_to(map)\nmap","17c2465e":"#map = folium.Map(location=[40.2172859, -75.405182], zoom_start=12)\n#for point in range(0, len(locationlist)):\n#    folium.Marker(locationlist[point], popup=df911['title'][point]).add_to(map)\n#map    ","d11f6488":"# Count of Top 5 emergencies in Traffic category","b49eb06a":"# Finding the top 10 Zip codes with most calls","edda747e":"# Identifying the unique Zip,township and title","68e89ebb":"# Date wise distribution of Fire calls","c26333e9":"# Heatmap for relationship of calls between Month and Day of the week","c6955c2a":"# Count of all emergencies under each type(EMS,Traffic,Fire)","1e6dee19":"# Day wise count for each type","e11a4475":"# Plotting the latitude and longitude values in the base map","81129c11":"# Date wise distribution of Emergency calls","89726936":"# Marking all the location using Folium map(Commented because it is taking a huge time to execute marking 300k +  records on the folium map) ","20656cb6":"# Splitting the timestamp to hour, month and day of the week","c2607861":"## Importing all the libraries required for the analysis","ac8446f1":"# Marking one of the location using Folium Map","8427b17d":"# Finding the top 10 townships with most calls","c11e4c72":"# Analyzing the number of calls in top 10 Zip in each category type","e0f7c253":"# Number of unique category in each type(EMS,Traffic and Fire)","04f913e8":"# Hour wise count for each type","aa6b8e34":"# Analyzing the number of calls in top 10 township in each category type","879d768d":"# Month wise count for each type","c2b12d52":"# Date wise distribution of Traffic calls","697f1b6c":"# Distribution of emergency category","9b45ec13":"# Reading the data and analysing the structure of the data","8f6fbda2":"# Count of Top 10 emergencies in Fire category","264656c3":"# Heatmap for relationship of calls between Hour and Days of the week","5544a301":"# Count of Top 10 emergencies in EMS category"}}