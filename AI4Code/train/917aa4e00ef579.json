{"cell_type":{"2a7bf911":"code","271b7f83":"code","38283ada":"code","d36eb29a":"code","9c59f102":"code","346de497":"code","042c0df9":"code","c9aba503":"code","d456fbd8":"code","65ff6238":"code","9ef8f830":"code","d6b602ff":"code","ca3fb585":"code","6f1e09ff":"code","4de855c2":"code","910ea0f8":"code","a35f68c3":"code","aa2d70ee":"markdown","63ea1c30":"markdown","836c899c":"markdown","48478038":"markdown","09f98e54":"markdown","7f9676dd":"markdown","8a5dcbcb":"markdown","8f9e8446":"markdown","7c9ab3a7":"markdown","96fcf875":"markdown","b2f8a07d":"markdown","a8c52df0":"markdown","353d16aa":"markdown","8a70e30b":"markdown","c0c97b5a":"markdown","c31f5470":"markdown","82405f54":"markdown","1428e4cd":"markdown","b86a2c73":"markdown"},"source":{"2a7bf911":"import os, cv2, re, random\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img\nfrom keras import layers, models, optimizers\nfrom keras import backend as K\nfrom sklearn.model_selection import train_test_split","271b7f83":"img_width = 150\nimg_height = 150\nTRAIN_DIR = '..\/input\/train\/'\nTEST_DIR = '..\/input\/test\/'\ntrain_images_dogs_cats = [TRAIN_DIR+i for i in os.listdir(TRAIN_DIR)] # use this for full dataset\ntest_images_dogs_cats = [TEST_DIR+i for i in os.listdir(TEST_DIR)]","38283ada":"def atoi(text):\n    return int(text) if text.isdigit() else text\n\ndef natural_keys(text):\n    return [ atoi(c) for c in re.split('(\\d+)', text) ]","d36eb29a":"train_images_dogs_cats.sort(key=natural_keys)\ntrain_images_dogs_cats = train_images_dogs_cats[0:1300] + train_images_dogs_cats[12500:13800] \n\ntest_images_dogs_cats.sort(key=natural_keys)","9c59f102":"def prepare_data(list_of_images):\n    \"\"\"\n    Returns two arrays: \n        x is an array of resized images\n        y is an array of labels\n    \"\"\"\n    x = [] # images as arrays\n    y = [] # labels\n    \n    for image in list_of_images:\n        x.append(cv2.resize(cv2.imread(image), (img_width,img_height), interpolation=cv2.INTER_CUBIC))\n    \n    for i in list_of_images:\n        if 'dog' in i:\n            y.append(1)\n        elif 'cat' in i:\n            y.append(0)\n        #else:\n            #print('neither cat nor dog name present in images')\n            \n    return x, y","346de497":"X, Y = prepare_data(train_images_dogs_cats)\nprint(K.image_data_format())","042c0df9":"# First split the data in two sets, 80% for training, 20% for Val\/Test)\nX_train, X_val, Y_train, Y_val = train_test_split(X,Y, test_size=0.2, random_state=1)","c9aba503":"nb_train_samples = len(X_train)\nnb_validation_samples = len(X_val)\nbatch_size = 16","d456fbd8":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Conv2D(32, (3, 3)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Conv2D(64, (3, 3)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1))\nmodel.add(layers.Activation('sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\nmodel.summary()","65ff6238":"train_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\nval_datagen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)","9ef8f830":"train_generator = train_datagen.flow(np.array(X_train), Y_train, batch_size=batch_size)\nvalidation_generator = val_datagen.flow(np.array(X_val), Y_val, batch_size=batch_size)","d6b602ff":"history = model.fit_generator(\n    train_generator, \n    steps_per_epoch=nb_train_samples \/\/ batch_size,\n    epochs=30,\n    validation_data=validation_generator,\n    validation_steps=nb_validation_samples \/\/ batch_size\n)\n","ca3fb585":"model.save_weights('model_wieghts.h5')\nmodel.save('model_keras.h5')","6f1e09ff":"X_test, Y_test = prepare_data(test_images_dogs_cats) #Y_test in this case will be []","4de855c2":"test_datagen = ImageDataGenerator(rescale=1. \/ 255)","910ea0f8":"test_generator = val_datagen.flow(np.array(X_test), batch_size=batch_size)\nprediction_probabilities = model.predict_generator(test_generator, verbose=1)","a35f68c3":"counter = range(1, len(test_images_dogs_cats) + 1)\nsolution = pd.DataFrame({\"id\": counter, \"label\":list(prediction_probabilities)})\ncols = ['label']\n\nfor col in cols:\n    solution[col] = solution[col].map(lambda x: str(x).lstrip('[').rstrip(']')).astype(float)\n\nsolution.to_csv(\"dogsVScats.csv\", index = False)","aa2d70ee":"**Now the images have to be represented in numbers. For this, using the openCV library read and resize the image.  **\n\n**Generate labels for the supervised learning set.**\n\n**Below is the helper function to do so.**","63ea1c30":"**We will be using the Sequential model from Keras to form the Neural Network. Sequential Model is  used to construct simple models with linear stack of layers. **\n\n**More info on Sequential model and Keras in general at https:\/\/keras.io\/getting-started\/sequential-model-guide\/ and https:\/\/github.com\/keras-team\/keras**","836c899c":"**Data dimensions and paths**","48478038":"**Perform the necessary imports.**","09f98e54":"**This is the augmentation configuration we will use for training and validation**","7f9676dd":"**Generate .csv for submission**","8a5dcbcb":"**Helper function to sort the image files based on the numeric value in each file name.**","8f9e8446":"**This is the augmentation configuration we will use for testing. Only rescaling.**","7c9ab3a7":"**Building a strong image classification model from less data**\n\nThe implementation is a slight variation of the one in https:\/\/gist.github.com\/fchollet\/0830affa1f7f19fd47b06d4cf89ed44d\n\nMainly, in this kernel , the method flow(x,y) is used whereas, in the above gist, method flow_from_directory(directory) is used.\nFor more info, you can refer https:\/\/keras.io\/preprocessing\/image\/\n\nThe change is made to have an appropriate kernel to deal with the way data is structured in kaggle. Appropriate changes in other parts of the source code is also done.","96fcf875":"**Time to predict classification using the model on the test set.**\n\n**Generate X_test and Y_test**","b2f8a07d":"**Prepare generators for training and validation sets**","a8c52df0":"**Well done for a small training set and a small Epoch! Accuracy on the training set is close to 84% while on the validation set is close to 79%**","353d16aa":"**Sort the traning set. Use 1300 images each of cats and dogs instead of all 25000 to speed up the learning process.**\n\n**Sort the test set**","8a70e30b":"**Split the data set containing 2600 images into 2 parts, training set and validation set. Later, you will see that accuracy and loss on the validation set will also be reported while fitting the model using training set.**","c0c97b5a":"**Start training the model!**\n\n**For better accuracy and lower loss, we are using an epoch of 30. Epoch value can be increased for better results.**","c31f5470":"**Prepare generator for test set and start predicting on it.**","82405f54":"**Generate X and Y using the helper function above**\n\n**Since K.image_data_format() is channel_last,  input_shape to the first keras layer will be (img_width, img_height, 3). '3' since it is a color image**","1428e4cd":"**Kindly upvote if you find this kernel useful**","b86a2c73":"**Saving the model in Keras is simple as this! ** \n\n**It is quite helpful for reuse.**"}}