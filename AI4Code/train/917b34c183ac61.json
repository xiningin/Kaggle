{"cell_type":{"aed6f2a9":"code","4c6ae24c":"code","7d0bb7c7":"code","5a83fd22":"code","54a2d260":"code","84817530":"code","6cdad405":"code","dbfbba57":"code","4bd2a7a9":"code","751844b4":"code","037b7326":"code","6058aa12":"code","c1cf1f26":"code","91088007":"code","6dcdcf32":"code","5ac9f612":"code","76d6be83":"code","c8153a88":"code","c9788e05":"code","4d38935d":"code","363342e1":"code","7767e254":"code","eb992bb1":"code","0e7c8f15":"code","73798803":"code","de9eed3b":"code","8287ebbc":"code","da84d33c":"code","cc181ece":"code","ae7a1609":"code","2eb72c83":"code","e3270873":"code","3aedc218":"code","4655d5bf":"code","6b0fe0ef":"code","0827e392":"code","962d307e":"code","1f53a229":"code","c4f8401e":"code","079f93c7":"code","b08b4244":"code","d9c728ef":"code","08e3c73f":"code","45a53508":"code","33a69ac3":"code","5b484a74":"code","3f9138a5":"markdown","5784faa3":"markdown","66b38859":"markdown","7a15d3a6":"markdown","6c0b0901":"markdown","56b3ca84":"markdown","e30347cc":"markdown","34e95e05":"markdown","8d0689df":"markdown","1c3ffc21":"markdown","47249e3e":"markdown","3f0304cf":"markdown"},"source":{"aed6f2a9":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='income', null_name='?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","4c6ae24c":"# \uc2dc\ud5d8\ud658\uacbd\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc81c\uacf5\ub428\n# import pandas as pd\n# X_test = pd.read_csv(\"data\/X_test.csv\")\n# X_train = pd.read_csv(\"data\/X_train.csv\")\n# y_train = pd.read_csv(\"data\/y_train.csv\")","7d0bb7c7":"import pandas as pd\nimport numpy as np","5a83fd22":"import warnings\nwarnings.filterwarnings('ignore')","54a2d260":"# \ub370\uc774\ud130 \ud06c\uae30 \ud655\uc778\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","84817530":"# \ub370\uc774\ud130 \ud655\uc778\nX_train.head()","6cdad405":"y_train","dbfbba57":"# \ud0c0\uac9f \uc218 \ud655\uc778\ny_train['income'].value_counts()","4bd2a7a9":"# type\ud655\uc778\nX_train.info()","751844b4":"# \ud53c\ucc98 \uad6c\ubd84\n# Numeric features\nnumeric_features = [\n                    'age',\n                    'fnlwgt', \n                    'education.num',\n                    'capital.gain', \n                    'capital.loss', \n                    'hours.per.week',                     \n                   ]\n\n# Categorical features\ncat_features = [\n                 'workclass',              \n                 'education',            \n                 'marital.status', \n                 'occupation', \n                 'relationship', \n                 'race', \n                 'sex',\n                 'native.country'\n]","037b7326":"X_train[numeric_features].describe()","6058aa12":"X_train[cat_features].describe()","c1cf1f26":"X_train.isnull().sum()","91088007":"X_test.isnull().sum()","6dcdcf32":"X_train['workclass'].value_counts()","5ac9f612":"X_train['occupation'].value_counts()","76d6be83":"X_train['native.country'].value_counts()","c8153a88":"def data_fillna(df):\n    df['workclass'] = df['workclass'].fillna(df['workclass'].mode()[0])\n    df['occupation'] = df['occupation'].fillna(\"null\")\n    df['native.country'] = df[\"native.country\"].fillna(df['native.country'].mode()[0])\n    return df\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)","c9788e05":"X_train.isnull().sum()","4d38935d":"X_test.isnull().sum()","363342e1":"print(X_train.shape, X_test.shape)","7767e254":"from sklearn.preprocessing import LabelEncoder","eb992bb1":"all_df = pd.concat([X_train.assign(ind=\"train\"), X_test.assign(ind=\"test\")])","0e7c8f15":"all_df.head(3)","73798803":"all_df.tail(3)","de9eed3b":"le = LabelEncoder()\nall_df[cat_features] = all_df[cat_features].apply(le.fit_transform)","8287ebbc":"all_df.head(3)","da84d33c":"X_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind',axis=1)\nX_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind',axis=1)","cc181ece":"print(X_train.shape, X_test.shape)","ae7a1609":"from sklearn.preprocessing import MinMaxScaler","2eb72c83":"scaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])","e3270873":"X_train.head(3)","3aedc218":"X_test.head(3)","4655d5bf":"y_train","6b0fe0ef":"# target\uac12 \ubcc0\uacbd\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","0827e392":"print(X_train.shape, X_test.shape)","962d307e":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \uac80\uc99d\uc6a9 \ub370\uc774\ud130\ub85c \uad6c\ubd84\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size=0.15, random_state=2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","1f53a229":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","c4f8401e":"model = SVC(random_state=1234)\nmodel.fit(X_tr, y_tr)\nprint(model.score(X_val, y_val))","079f93c7":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprint(model.score(X_val, y_val))","b08b4244":"model = XGBClassifier()\nmodel.fit(X_tr, y_tr)\nprint(model.score(X_val, y_val))","d9c728ef":"final_model = XGBClassifier()\nfinal_model.fit(X_train, y)\n\nprediction = final_model.predict(X_test)","08e3c73f":"submission = pd.DataFrame({\n    'income' : prediction\n})","45a53508":"submission.head(3)","33a69ac3":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\nsubmission.to_csv('2021.csv', index=False)","5b484a74":"round(final_model.score(X_val, y_val)*100, 2)","3f9138a5":"## \uacb0\uce21\uce58 \ucc98\ub9ac","5784faa3":"# \uc0ac\uc6a9\uc790 \ucf54\ub529","66b38859":"## scaling","7a15d3a6":"## EDA","6c0b0901":"## \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30(\uc0dd\ub7b5)","56b3ca84":"## \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac","e30347cc":"## label encoding","34e95e05":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","8d0689df":"# \uc131\uc778 \uc778\uad6c\uc870\uc0ac \uc18c\ub4dd \uc608\uce21\n\n- age: \ub098\uc774\n- workclass: \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt: \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education: \uad50\uc721 \uc218\uc900\n- education.num: \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status: \uacb0\ud63c \uc0c1\ud0dc\n- occupation: \uc5c5\uc885\n- relationship: \uac00\uc871 \uad00\uacc4\n- race: \uc778\uc885\n- sex: \uc131\ubcc4\n- capital.gain: \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss: \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week: \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country: \uad6d\uc801\n- income: \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)","1c3ffc21":"## \ucc44\uc810 (\uc218\ud5d8\uc790\ub294 \ud655\uc778 \ubd88\uac00)","47249e3e":"- \uacb0\uce21\uce58\ub294 \ucd5c\ube48\uac12\uacfc \ucc28\uc774\uac00 \ud06c\uba74 \ucd5c\ube48\uac12\uc73c\ub85c \uac12\uc774 \ube44\uc2b7\ud558\uba74 \ubcc4\ub3c4\uc758 \uac12\uc73c\ub85c \ub300\uccb4\ud568","3f0304cf":"## \ubaa8\ub378 & \ud3c9\uac00"}}