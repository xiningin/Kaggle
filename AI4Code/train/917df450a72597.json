{"cell_type":{"8f327f97":"code","b36f852e":"code","320bca76":"code","9ac7cc92":"code","fff82976":"code","420d1ceb":"code","c09f4905":"code","e45683e8":"code","671b24c1":"code","18dfd2eb":"code","699e1390":"code","17a5e3e1":"code","7e1c62de":"code","311c6536":"code","8f94c7de":"code","aaa57b6e":"code","25024143":"code","d4584d2e":"code","2c6902ab":"code","841b04d7":"code","58eba1e1":"code","cfd936ff":"code","a82d4da7":"code","a471291d":"code","4149eac4":"code","ab513b13":"code","db14413e":"code","ba578094":"code","dff684e9":"code","f28ba2bf":"code","fef41a6f":"code","6a2c8ec7":"code","cd90f8c1":"code","da6d5952":"code","fae6b98a":"code","d12a7211":"code","9a7d4a15":"code","dec75a41":"code","7146fe16":"code","0acb5146":"code","3ee86332":"code","d51143e0":"code","4f379a54":"code","79be2474":"code","77961a47":"code","a8e12f23":"code","964087db":"code","fccc5009":"code","233411fa":"code","7354c85d":"code","b26b1fe3":"markdown","d91e4a0e":"markdown","2a702a30":"markdown","46c09c7e":"markdown","b7ec3bec":"markdown","1a73fcec":"markdown","f3d71617":"markdown","28517b83":"markdown","aae1021a":"markdown","ad092a7b":"markdown","613ea5d6":"markdown","631ef03d":"markdown","49276f86":"markdown","e395a247":"markdown"},"source":{"8f327f97":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b36f852e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","320bca76":"df = pd.read_csv('\/kaggle\/input\/star-type-classification\/Stars.csv')","9ac7cc92":"df.head()","fff82976":"df.shape","420d1ceb":"df.info()","c09f4905":"df.describe().T","e45683e8":"# numerical columns\nnumerical_columns = df.dtypes[df.dtypes != 'object']\nnumerical_columns","671b24c1":"# categorical columns\ncategorical_columns = df.dtypes[df.dtypes == 'object']\ncategorical_columns","18dfd2eb":"df['Color'].value_counts()","699e1390":"df['Color'].value_counts().index","17a5e3e1":"remap_cat_dict = {\n    'Red' : 'Red', \n    'Blue' : 'Blue', \n    'Blue-white' : 'Blue-white', \n    'Blue White' : 'Blue-white', \n    'yellow-white' : 'White-Yellow', \n    'White' : 'White',\n    'Blue white' : 'Blue-white', \n    'white' : 'White', \n    'Yellowish White' : 'White-Yellow', \n    'yellowish' : 'Yellow', \n    'Orange' : 'Orange',\n    'Whitish' : 'White', \n    'Yellowish' : 'Yellow', \n    'Blue-White' : 'Blue-white', \n    'Pale yellow orange' : 'Orange',\n    'Orange-Red' : 'Orange', \n    'White-Yellow' : 'White-Yellow' \n}","7e1c62de":"df.Color = df.Color.map(remap_cat_dict).astype('category')","311c6536":"df['Color'].value_counts()","8f94c7de":"df['Spectral_Class'].value_counts()","aaa57b6e":"df.shape","25024143":"# df = pd.get_dummies(df, drop_first = True)","d4584d2e":"df.shape","2c6902ab":"numerical_columns","841b04d7":"# def plot_qq(df,feature):\n#     plt.figure(figsize = (10,6))\n#     plt.subplot(1,2,1)\n#     df[feature].hist()\n#     plt.subplot(1,2,2)\n#     stats.probplot(df[feature], dist= 'norm', plot=pylab)\n#     plt.show()","58eba1e1":"# plot_qq(df,'Temperature')","cfd936ff":"features = [\"Temperature\",\"L\",\"R\",\"A_M\"]","a82d4da7":"corrPearson = df[features].corr(method=\"pearson\")\ncorrSpearman = df[features].corr(method=\"spearman\")","a471291d":"figure = plt.figure(figsize=(10,8))\nsns.heatmap(corrPearson,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title(\"PEARSON\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","4149eac4":"figure = plt.figure(figsize=(10,8))\nsns.heatmap(corrSpearman,annot=True,cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title(\"Spearman\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","ab513b13":"figure = plt.figure(figsize=(20,8))\nsns.lineplot(x=\"Type\",y=\"Temperature\",data=df)\nplt.show()","db14413e":"figure = plt.figure(figsize=(20,8))\nsns.lineplot(x=\"Type\",y=\"L\",data=df)\nplt.show()","ba578094":"figure = plt.figure(figsize=(20,8))\nsns.lineplot(x=\"Type\",y=\"R\",data=df)\nplt.show()","dff684e9":"figure = plt.figure(figsize=(20,8))\nsns.lineplot(x=\"Type\",y=\"A_M\",data=df)\nplt.show()","f28ba2bf":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"Spectral_Class\",y=\"Type\",data=df)\nplt.show()","fef41a6f":"figure = plt.figure(figsize=(20,8))\nsns.barplot(x=\"Color\",y=\"Type\",data=df)\nplt.show()","6a2c8ec7":"df = pd.get_dummies(df, drop_first = True)","cd90f8c1":"### A_M is highly correlated with temp, L and R\n### A_M feature is inversely proportional to all the above features","da6d5952":"from sklearn.model_selection import train_test_split","fae6b98a":"X = df.drop(['Type'], axis = 1)","d12a7211":"X.head()","9a7d4a15":"y = df['Type']","dec75a41":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","7146fe16":"X_train.shape","0acb5146":"X_test.shape","3ee86332":"from sklearn.preprocessing import StandardScaler","d51143e0":"sc = StandardScaler()","4f379a54":"X_train_scaled = sc.fit_transform(X_train)","79be2474":"X_test_scaled = sc.transform(X_test)","77961a47":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_score\n# from sklearn.metrics import mean_squared_error, r2_score","a8e12f23":"lj = LogisticRegression(solver=\"liblinear\").fit(X_train_scaled,y_train)\nknnc = KNeighborsClassifier().fit(X_train_scaled,y_train)\ncartc = DecisionTreeClassifier(random_state=42).fit(X_train_scaled,y_train)\nrfc = RandomForestClassifier(random_state=42,verbose=False).fit(X_train_scaled,y_train)\ngbmc = GradientBoostingClassifier(verbose=False).fit(X_train_scaled,y_train)\nlgbmc = LGBMClassifier().fit(X_train_scaled,y_train)","964087db":"modelsc = [lj,knnc,cartc,rfc,gbmc,lgbmc]","fccc5009":"for model in modelsc:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,X_test,y_test,cv=3,verbose=False).mean()\n    error = -cross_val_score(model,X_test,y_test,cv=3,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(R2CV)\n    print(np.sqrt(error))\n    print(\"-\" * 30)","233411fa":"r = pd.DataFrame(columns=[\"MODELS\",\"R2CV\"])\nfor model in modelsc:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,X_test,y_test,cv=10,verbose=False).mean()\n    result = pd.DataFrame([[name,R2CV*100]],columns=[\"MODELS\",\"R2CV\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"R2CV\",y=\"MODELS\",data=r,color=\"k\")\nplt.xlabel(\"R2CV\")\nplt.ylabel(\"MODELS\")\nplt.xlim(30,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","7354c85d":"r = pd.DataFrame(columns=[\"MODELS\",\"error\"])\nfor model in modelsc:\n    name = model.__class__.__name__\n    error = -cross_val_score(model,X_test,y_test,cv=10,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    result = pd.DataFrame([[name,np.sqrt(error)]],columns=[\"MODELS\",\"error\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"error\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"Error\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,2)\nplt.title(\"MODEL ERROR COMPARISON\")\nplt.show()","b26b1fe3":"## EDA","d91e4a0e":"We could improve the model accuracy by performing more feature engineering and also making data normally distributed","2a702a30":"Random Forest is the best predicted model","46c09c7e":"So we dont have any null values lets check for the distribution of data","b7ec3bec":"## Models","1a73fcec":"### Observations\n#### Features are not normally Distributed","f3d71617":"## Read Data","28517b83":"#### One hot encoding","aae1021a":"#### One hot encoding","ad092a7b":"#### We can group all the values with less than 4 values into UNKNOWN category, this will also handle if in future a new color comes up. Also some of the colors are same such as Yellow White and yellowish white","613ea5d6":"#### Numerical Columns","631ef03d":"## Conclusion ","49276f86":"## Correlation","e395a247":"### Imports"}}