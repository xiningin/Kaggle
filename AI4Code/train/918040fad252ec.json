{"cell_type":{"ae97f447":"code","84b690a3":"code","0bea9080":"code","4d19d965":"code","c6fb17db":"code","f454bf6b":"code","b9a3cfb6":"code","1f238cc1":"code","c74f8469":"code","e5538018":"code","f61d4e86":"code","65ac2976":"code","b7065fa5":"code","080aeeaa":"code","bc682569":"code","bfcf2d18":"code","698f76ef":"code","2b4d751f":"code","b747929f":"code","87d35aef":"code","3d221f7a":"code","13a9d36c":"code","5438182e":"code","317a4b48":"code","83ea2895":"code","464be7d6":"code","685217e7":"code","8a2363c6":"code","6bf562e4":"code","1d87fd06":"code","c8f266bf":"code","cd527798":"code","b7db37c7":"markdown","aa63c8fa":"markdown","db5941c2":"markdown","d3fd9c28":"markdown","ea4de21d":"markdown","4f3dadff":"markdown","40d822e9":"markdown","265ffeff":"markdown","bc38b21f":"markdown","feffbd93":"markdown","0e82adad":"markdown","433fce53":"markdown","7e035d72":"markdown","cabafe6b":"markdown","294f7c64":"markdown","aebee404":"markdown","61b21add":"markdown","d43600f5":"markdown","6e20499c":"markdown","85dcb2e9":"markdown","fc1ed504":"markdown","b8cc6886":"markdown","6e30623d":"markdown","89385231":"markdown","ad038d0b":"markdown","9af2dd31":"markdown","b68aed43":"markdown","6574dbce":"markdown","76423889":"markdown"},"source":{"ae97f447":"from __future__ import absolute_import, division, print_function, unicode_literals\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/final-datasets-skin-diseases-505\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","84b690a3":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,classification_report,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nimport itertools\nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image","0bea9080":"X = []\nZ = []\nIMG_SIZE = 35\n\nacne_fulminans = '..\/input\/final-datasets-skin-diseases-505\/train\/acne fulminans'\nacne_nodules = '..\/input\/final-datasets-skin-diseases-505\/train\/acne nodules'\nblackhead = '..\/input\/final-datasets-skin-diseases-505\/train\/blackhead'\ndermatitis_perioral = '..\/input\/final-datasets-skin-diseases-505\/train\/dermatitis perioral'\neksim = '..\/input\/final-datasets-skin-diseases-505\/train\/eksim'\nflek_hitam = '..\/input\/final-datasets-skin-diseases-505\/train\/flek hitam'\nfolikulitis = '..\/input\/final-datasets-skin-diseases-505\/train\/folikulitis'\nfungal_acne = '..\/input\/final-datasets-skin-diseases-505\/train\/fungal acne'\nherpes = '..\/input\/final-datasets-skin-diseases-505\/train\/herpes'\nkarsinoma = '..\/input\/final-datasets-skin-diseases-505\/train\/karsinoma'\nkutil_filiform = '..\/input\/final-datasets-skin-diseases-505\/train\/kutil filiform'\nmelanoma = '..\/input\/final-datasets-skin-diseases-505\/train\/melanoma'\nmilia = '..\/input\/final-datasets-skin-diseases-505\/train\/milia'\npanu = '..\/input\/final-datasets-skin-diseases-505\/train\/panu'\npapula = '..\/input\/final-datasets-skin-diseases-505\/train\/papula'\npsoriasis = '..\/input\/final-datasets-skin-diseases-505\/train\/psoriasis'\npustula = '..\/input\/final-datasets-skin-diseases-505\/train\/pustula'\nrosacea = '..\/input\/final-datasets-skin-diseases-505\/train\/rosacea'\ntinea_facialis = '..\/input\/final-datasets-skin-diseases-505\/train\/tinea facialis'\nwhitehead = '..\/input\/final-datasets-skin-diseases-505\/train\/whitehead'","4d19d965":"def assign_label(img,face_skin_disease):\n    return face_skin_disease","c6fb17db":"def make_train_data(face_skin_disease,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        label=assign_label(img,face_skin_disease)\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","f454bf6b":"make_train_data('Acne fulminans', acne_fulminans)\nprint(len(X))\n\nmake_train_data('Acne nodules', acne_nodules)\nprint(len(X))\n\nmake_train_data('Blackhead', blackhead)\nprint(len(X))\n\nmake_train_data('Dermatitis perioral', dermatitis_perioral)\nprint(len(X))\n\nmake_train_data('Eksim', eksim)\nprint(len(X))\n\nmake_train_data('Flek hitam',flek_hitam)\nprint(len(X))\n\nmake_train_data('Folikulitis',folikulitis)\nprint(len(X))\n\nmake_train_data('Fungal acne',fungal_acne)\nprint(len(X))\n\nmake_train_data('Herpes',herpes)\nprint(len(X))\n\nmake_train_data('Karsinoma',karsinoma)\nprint(len(X))\n\nmake_train_data('Kutil_filiform',kutil_filiform)\nprint(len(X))\n\nmake_train_data('Melanoma',melanoma)\nprint(len(X))\n\nmake_train_data('Milia',milia)\nprint(len(X))\n\nmake_train_data('Panu',panu)\nprint(len(X))\n\nmake_train_data('Papula',papula)\nprint(len(X))\n\nmake_train_data('Psoriasis',psoriasis)\nprint(len(X))\n\nmake_train_data('Pustula',pustula)\nprint(len(X))\n\nmake_train_data('Rosacea',rosacea)\nprint(len(X))\n\nmake_train_data('Tinea facialis',tinea_facialis)\nprint(len(X))\n\nmake_train_data('Whitehead',whitehead)\nprint(len(X))","b9a3cfb6":"fig,ax=plt.subplots(12,2)\nfig.set_size_inches(20,20)\nfor i in range(12):\n    for j in range (2):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l])\n        ax[i,j].set_title('Face skin disease: '+Z[l])\n        \nplt.tight_layout()","1f238cc1":"le = LabelEncoder()\nY = le.fit_transform(Z)\nY = to_categorical(Y,20)\nX = np.array(X)\nX = X\/255","c74f8469":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=2)","e5538018":"np.random.seed(20)\nrn.seed(20)\ntf.random.set_seed(20)","f61d4e86":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (17,17),padding = 'Same',activation ='relu', input_shape = (IMG_SIZE,IMG_SIZE,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n \nmodel.add(Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nmodel.add(Dense(20, activation = \"softmax\"))","65ac2976":"from keras.callbacks import ReduceLROnPlateau\nred_lr= ReduceLROnPlateau(monitor='val_acc',patience=3,verbose=1,factor=0.1)","b7065fa5":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(x_train)","080aeeaa":"model.compile(optimizer=Adam(lr=0.001),loss='categorical_crossentropy',metrics=['accuracy'])","bc682569":"batch = 20\nepoch = 50\nstep = np.ceil(x_train.shape[0] \/ batch)\nHistory = model.fit_generator(\n    datagen.flow(x_train,y_train, batch_size = batch),\n    epochs = epoch,\n    validation_data = (x_test,y_test),\n    verbose = 1,\n    steps_per_epoch = step\n)","bfcf2d18":"model.save('\/kaggle\/working\/face_skin_disease.h5')","698f76ef":"saved_model_dir = '\/kaggle\/working\/'\ntf.saved_model.save(model, saved_model_dir)\n\nconverter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir)\ntflite_model = converter.convert()\n\nwith open('model.tflite', 'wb') as f:\n  f.write(tflite_model)\n\ntarget_names = ['acne fulminans','acne nodules','blackhead','dermatitis perioral','eksim','flek hitam','folikulitis','fungal acne','herpes','karsinoma','kutil filiform','melanoma','milia','panu','papula','psoriasis','pustula','rosacea','tinea facialis','whitehead']\nlabels = '\\n'.join(target_names)\n\nwith open('labels.txt', 'w') as f:\n  f.write(labels)","2b4d751f":"model.summary()","b747929f":"Y_pred = model.predict_generator(x_test)\ny_pred = np.argmax(Y_pred, axis=1)\ny_test = np.argmax(y_test, axis=1)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","87d35aef":"print(classification_report(y_test, y_pred, target_names=target_names))","3d221f7a":"def plot_confusion_matrix(cm, classes, normalize=True, title='Confusion matrix', cmap=plt.cm.Blues):\n\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n\n    plt.figure(figsize=(15,15))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=90)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        cm = np.around(cm, decimals=2)\n        cm[np.isnan(cm)] = 0.0\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n    thresh = cm.max() \/ 2.\n\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","13a9d36c":"plot_confusion_matrix(cm, target_names, title='Confusion Matrix')","5438182e":"new_model = tf.keras.models.load_model('\/kaggle\/working\/face_skin_disease.h5')","317a4b48":"new_model.summary()","83ea2895":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","464be7d6":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","685217e7":"pred=new_model.predict(x_test)\npred_digits=np.argmax(pred,axis=1)","8a2363c6":"i=0\nprop_class=[]\nmis_class=[]\n\nfor i in range(len(y_test)):\n    if(np.argmax(y_test[i])==pred_digits[i]):\n        prop_class.append(i)\n    if(len(prop_class)==8):\n        break\n\ni=0\nfor i in range(len(y_test)):\n    if(not np.argmax(y_test[i])==pred_digits[i]):\n        mis_class.append(i)\n    if(len(mis_class)==8):\n        break","6bf562e4":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n      \n        count+=1","1d87fd06":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[mis_class[count]])\n        plt.tight_layout()\n        count+=1","c8f266bf":"warnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\ncount=0\nfig,ax=plt.subplots(4,2)\nfig.set_size_inches(20,20)\nfor i in range (4):\n    for j in range (2):\n        ax[i,j].imshow(x_test[prop_class[count]])\n        ax[i,j].set_title(\"Face skin disease : \"+str(le.inverse_transform([pred_digits[prop_class[count]]])))\n        plt.tight_layout()\n        count+=1","cd527798":"# new_model.fit(x_train,y_train,epochs=epoch,batch_size=batch,validation_data = (x_test,y_test))","b7db37c7":"Menampilkan patch dan label yang sudah dibuat beserta nama penyakit","aa63c8fa":"Membuat val akurasi pada saat epoch data","db5941c2":"Membuat train data path dan penamaan","d3fd9c28":"Menampilkan squential tabel","ea4de21d":"Menampilkan *Normalized Confusion matrix* dalam bentuk tabel","4f3dadff":"Menampilkan *Confusion Matrix*","40d822e9":"Memuat model ke model.fit_generator","265ffeff":"Membuat model data CNN untuk sequential tabel atau summary data","bc38b21f":"Memberikan akurasi dan loss ke data model alias","feffbd93":"Deklarasi **PATH** gambar","0e82adad":"Membuat nama dari isi tabel yang digunakan untuk test dan train","433fce53":"Menyatukan data menjadi path atau satuan dan memberikan label","7e035d72":"Membuat variable","cabafe6b":"Membuat variabel alias untuk model format .h5","294f7c64":"Menampilkan squential tabel","aebee404":"Memberikan keterangan loss akurasi dan metric akurasi","61b21add":"Membuat pangilan singkat untuk variable","d43600f5":"Konversi model h5 ke TFlite","6e20499c":"Menampilkan tabel grafik Loss","85dcb2e9":"Membuat Datagen","fc1ed504":"**Import** file training dari Kaggle input","b8cc6886":"Mengambil data secara acak yang digunakan pada train dan test data","6e30623d":"**Import** Kebutuhan Plugin","89385231":"Menampilkan *Classification Report*","ad038d0b":"Memanggil dan mengetest gambar","9af2dd31":"Menyimpan hasil model ke format .h5","b68aed43":"Menyimpan beberapa indeks yang salah diklasifikasikan","6574dbce":"Menampilkan tabel grafik Accuracy","76423889":"Membuat variabel untuk memulai prediksi"}}