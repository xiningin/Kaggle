{"cell_type":{"f8eb4f72":"code","56157dad":"code","33a02f48":"code","14509d57":"code","a8024039":"code","3979fb7f":"code","dd59ec80":"code","d6a9b835":"code","2e2c2649":"code","8d08135a":"code","412e63b3":"code","0e799957":"code","a5955bc1":"code","9b336f8f":"code","6b068acd":"code","27da409d":"code","7948989a":"code","b406cd32":"code","e98479a5":"code","3c073e2f":"code","ef82119b":"code","60d4bf54":"code","a3cdbd66":"code","5895ecb3":"code","a140786f":"code","fda593f2":"code","d64eee9e":"code","37a94533":"code","7c814174":"code","5d600aae":"code","748313af":"code","a7be82ab":"code","be32ea5a":"code","d923303f":"markdown","990bc014":"markdown","9e61d106":"markdown","d2bb4378":"markdown","9c9a2d0a":"markdown","47629e94":"markdown"},"source":{"f8eb4f72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","56157dad":"train_df = pd.read_csv(\"..\/input\/liverpool-ion-switching\/train.csv\")","33a02f48":"train_df.info()","14509d57":"train_df.head()","a8024039":"train_df.tail()","3979fb7f":"ax = sns.countplot(x=\"open_channels\", data=train_df)\nplt.title(\"Count plot for open_channels\")","dd59ec80":"train_df.loc[:,\"open_channels\"].plot()\nplt.title(\"open_channels by time\")","d6a9b835":"train_df[train_df[\"open_channels\"]==0].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with no channels\")","2e2c2649":"train_df[train_df[\"open_channels\"]==1].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 1 open channels\")","8d08135a":"train_df[train_df[\"open_channels\"]==2].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 2 open channels\")","412e63b3":"train_df[train_df[\"open_channels\"]==3].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 3 open channels\")","0e799957":"train_df[train_df[\"open_channels\"]==4].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 4 open channels\")","a5955bc1":"train_df[train_df[\"open_channels\"]==5].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 5 open channels\")","9b336f8f":"train_df[train_df[\"open_channels\"]==6].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 6 open channels\")","6b068acd":"train_df[train_df[\"open_channels\"]==7].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 7 open channels\")","27da409d":"train_df[train_df[\"open_channels\"]==8].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 8 open channels\")","7948989a":"train_df[train_df[\"open_channels\"]==9].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 9 open channels\")","b406cd32":"train_df[train_df[\"open_channels\"]==10].loc[:,\"signal\"].plot()\nplt.title(\"signals by time with 10 open channels\")","e98479a5":"def signal2class(signal):\n    \"\"\"\n    input: signal(float)\n    output: signal_class(int)\n    --------------\n    convert signal to class label.\n    signal is...\n       ~ -2   -> 1\n     -2 ~ 0 -> 2\n      0 ~ 2  -> 3\n      2 ~ 4  -> 4\n      4 ~    -> 5\n    \"\"\"\n    if signal < -2:\n        return int(1)\n    elif signal < 0:\n        return int(2)\n    elif signal < 2:\n        return int(3)\n    elif signal < 4:\n        return int(4)\n    else:\n        return int(5)","3c073e2f":"train_df[\"signal_class\"] = train_df[\"signal\"].map(signal2class)","ef82119b":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[:500000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\", bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch1\")","60d4bf54":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[500000:1000000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\", bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch2\")","a3cdbd66":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[1000000:1500000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch3\")","5895ecb3":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[1500000:2000000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch4\")","a140786f":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[2000000:2500000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch5\")","fda593f2":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[2500000:3000000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch6\")","d64eee9e":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[3000000:3500000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch7\")","37a94533":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[3500000:4000000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch8\")","7c814174":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[4000000:4500000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch9\")","5d600aae":"plt.figure(figsize=(20, 10))\nax = sns.countplot(x=\"signal_class\", data=train_df[4500000:5000000],hue=\"open_channels\")\nplt.legend(title=\"open_channels\",bbox_to_anchor=(1, 1), loc='upper left', borderaxespad=0, fontsize=18)\nplt.title(\"Open-Channels Count Plot by signal class of batch10\")","748313af":"batch1_conditions = (train_df[0:500000][\"open_channels\"] == 0) | \\\n                     (train_df[0:500000][\"open_channels\"] == 1) \nbatch2_4_conditions = (train_df[500000:2500000][\"open_channels\"] == 11)\nbatch5_conditions = (train_df[2500000:3000000][\"open_channels\"] == 4) | \\\n                    (train_df[2500000:3000000][\"open_channels\"] == 5) | \\\n                    (train_df[2500000:3000000][\"open_channels\"] == 6) | \\\n                    (train_df[2500000:3000000][\"open_channels\"] == 7) | \\\n                    (train_df[2500000:3000000][\"open_channels\"] == 8) \nbatch6_9_conditions = (train_df[3000000:4500000][\"open_channels\"] == 11)\nbatch10_conditions = (train_df[4500000:5000000][\"open_channels\"] == 8) | \\\n                     (train_df[4500000:5000000][\"open_channels\"] == 9) | \\\n                     (train_df[4500000:5000000][\"open_channels\"] == 10) ","a7be82ab":"df_concat = pd.concat([batch1_conditions, batch2_4_conditions, batch5_conditions, batch6_9_conditions, batch10_conditions])","be32ea5a":"train_df_filtered = train_df[df_concat]\ntrain_df_filtered.to_csv(\".\/train_df_filtered.csv\", header=False, index=False)","d923303f":"# Overview","990bc014":"# signal perspective\n\n\nI try to see count of open chanels sliced by signal.\n\nI found that open chanels have different trend by batch, so I plot then by batches.\n\nI define signal_class by signal2class.\n\n\n","9e61d106":"# open_channels perspective\n\n\nWe can find several expectations like below:\n\n\u30fb 6 of more channels open only between 200.0000 ~ 250.0000 and between 450.0000 ~ 500.0000. \n\n\u30fb In specific time range, if signal higer, more chanels seems open.","d2bb4378":"We might find below:\n\n\u30fb 0 ~ 1 Open-chanels trend seems appear in batch 1.\n\n\u30fb 1 ~ 3 Open-chanels trend seems appear in batch 9.\n\n\u30fb 4 ~ 8 Open-chanels trend sees appear in batch 5.\n\n\u30fb 8 ~ 10 Open-chanels trend seems appear in batch 10(?)","9c9a2d0a":"You can use above\u3000data as csv.","47629e94":"Thank you for your reading! "}}