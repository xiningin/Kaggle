{"cell_type":{"c24fbe39":"code","f79f9fa7":"code","da96d592":"code","8e8ff2b0":"code","4a8c79c7":"code","1bea0aaa":"code","4d4461fa":"code","e898cc13":"code","f1c94e78":"code","ae2afdc1":"code","ed4bebbb":"code","f898f336":"code","6db141c7":"code","76da9b6d":"code","70549dc2":"code","d13f9284":"code","7719e6ba":"code","3ab41087":"code","7f709b4f":"code","593fb7ea":"code","ba6b83af":"code","85985214":"code","4ad86746":"code","cb5eacf4":"code","22d68fc3":"code","5ec48a05":"code","bbef5633":"code","e49f3e61":"code","e57da853":"code","ed7040bb":"code","b09f982f":"code","d7240e26":"code","7bb57bbc":"code","9b0faca4":"code","0504c3a4":"code","1c89fa4c":"code","267913da":"code","55f93fdc":"code","92d491b3":"code","7b7948b8":"code","d6fb5e00":"code","e7fbf6e0":"code","3e183fba":"code","4f067a7c":"markdown","77c0cd07":"markdown","684bbc74":"markdown","c4c902b8":"markdown","6f4a4863":"markdown","71a3bbcf":"markdown","5966c289":"markdown","ebae4b0c":"markdown","cd88be23":"markdown","0a3f61d2":"markdown","25a5c179":"markdown","498591ac":"markdown","7bae2359":"markdown"},"source":{"c24fbe39":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","f79f9fa7":"data = pd.read_csv(\"..\/input\/winequality-red.csv\")\ndata.head()","da96d592":"data.info()","8e8ff2b0":"data.describe()","4a8c79c7":"from sklearn.preprocessing import LabelEncoder\n\nbins = (2, 6, 8)\ngroup_names = ['bad', 'good']\n\ndata['quality'] = pd.cut(data[\"quality\"], bins = bins, labels = group_names)\n\nlabel_quality = LabelEncoder()\n\ndata['quality'] = label_quality.fit_transform(data['quality'].astype(str))\ndata['quality'].value_counts()","1bea0aaa":"sns.countplot(data['quality'])\nplt.show()","4d4461fa":"X = data.drop(\"quality\", axis=1)\ny = data[\"quality\"]","e898cc13":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.25, random_state=10)","f1c94e78":"from sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","ae2afdc1":"import warnings\nwarnings.filterwarnings(\"ignore\")","ed4bebbb":"# prepare configuration for cross validation test harness\nseed = 7\n\n# prepare models\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('SVM', SVC()))\nmodels.append((\"RFC\",RandomForestClassifier()))\n\n# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10, random_state=seed)\n    cv_results = model_selection.cross_val_score(model, X_train, y_train, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n","f898f336":"# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","6db141c7":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nparams_dict={'C':[0.001, 0.01, 0.1, 1, 10, 100, 1000],'penalty':['l1','l2']}\nclf_lr=GridSearchCV(estimator=LogisticRegression(),param_grid=params_dict,scoring='accuracy',cv=10)\nclf_lr.fit(X_train,y_train)","76da9b6d":"clf_lr.best_params_","70549dc2":"clf_lr.best_score_ ","d13f9284":"pred=clf_lr.predict(X_test)\naccuracy_score(pred,y_test)","7719e6ba":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(clf_lr, X_train, y_train,n_jobs=-1, cv=10)\nscores","3ab41087":"def display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\ndisplay_scores(scores)","7f709b4f":"y_test.value_counts()","593fb7ea":"from sklearn.metrics import confusion_matrix,  roc_auc_score\nconfusion_matrix(pred, y_test)","ba6b83af":"roc_auc_score(y_test, pred)","85985214":"from sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_test, pred)\n\nplt.plot(fpr, tpr)\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.rcParams['font.size'] = 12\nplt.title('ROC curve LR')\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.grid(True)","4ad86746":"auc = np.trapz(tpr,fpr)\nprint('AUC:', auc)","cb5eacf4":"def evaluate_threshold(threshold):\n    print('Sensitivity:', tpr[thresholds > threshold][-1])\n    print('Specificity:', 1 - fpr[thresholds > threshold][-1])","22d68fc3":"evaluate_threshold(0.5)","5ec48a05":"evaluate_threshold(.3)","bbef5633":"# calculate cross-validated AUC\ncross_val_score(clf_lr, X_train, y_train, cv=10, scoring='roc_auc').mean()","e49f3e61":"params_dict={'C':[0.01,0.1,1,10],'gamma':[0.01,0.1,1,10],'kernel':['linear','rbf']}\nclf=GridSearchCV(estimator=SVC(),param_grid=params_dict,scoring='accuracy',cv=5)\nclf.fit(X_train,y_train)","e57da853":"clf.best_params_","ed7040bb":"clf.best_score_ ","b09f982f":"pred_svm=clf.predict(X_test)\naccuracy_score(pred_svm,y_test)","d7240e26":"confusion_matrix(pred_svm, y_test)","7bb57bbc":"roc_auc_score(y_test, pred_svm)","9b0faca4":"# calculate cross-validated AUC\ncross_val_score(clf, X_train, y_train, cv=4, scoring='roc_auc').mean()","0504c3a4":"scores = cross_val_score(clf, X_train, y_train, cv=5)\ndisplay_scores(scores)","1c89fa4c":"params_dict={'n_estimators':[500],'max_features':['auto','sqrt','log2']}\nclf_rf=GridSearchCV(estimator=RandomForestClassifier(n_jobs=-1),param_grid=params_dict,scoring='accuracy',cv=5)\nclf_rf.fit(X_train,y_train)","267913da":"clf_rf.best_params_","55f93fdc":"clf_rf.best_score_ ","92d491b3":"pred_rf=clf_rf.predict(X_test)\naccuracy_score(pred_rf,y_test)","7b7948b8":"confusion_matrix(pred_rf, y_test)","d6fb5e00":"roc_auc_score(y_test, pred_rf)","e7fbf6e0":"cross_val_score(clf_rf, X_train, y_train, cv=4, scoring='roc_auc').mean()","3e183fba":"scores = cross_val_score(clf_rf, X_train, y_train, cv=5)\ndisplay_scores(scores)","4f067a7c":"**Evaluate threshold**","77c0cd07":"**3. Random Forest**","684bbc74":"### Compare Models:","c4c902b8":"**Evaluate a score by cross-validation**","6f4a4863":"**Lets see cross_validation in AUC scores:**","71a3bbcf":"### Fine tuning the models:","5966c289":"![](http:\/\/cancerdiscovery.aacrjournals.org\/content\/candisc\/3\/2\/148\/F1.large.jpg?width=800&height=600&carousel=1)","ebae4b0c":"Better than previous auc score(.65)","cd88be23":"### Import packages","0a3f61d2":"**2. SVM **","25a5c179":"**1. Logistic Regression**","498591ac":"### Import data","7bae2359":"It seems like changing the threshold values does not implies any changes in sensitivity and specificity."}}