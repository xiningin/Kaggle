{"cell_type":{"172bcbbb":"code","d702e86d":"code","1a307e46":"code","3ac9ae08":"code","f3a17ab6":"code","dc6dab30":"code","a4d6e912":"code","82ca98ab":"code","3ddfc881":"code","ca582ae1":"code","a5de81d6":"code","6e23c202":"code","6f54cc1d":"code","6616512c":"code","9e979f8a":"code","47ac9a59":"code","0f02af6b":"code","d0183e28":"code","11568bed":"code","80b9dc79":"code","dfae0259":"code","13177281":"code","d3a5ed50":"code","1604fc34":"code","eace32fd":"code","7570565e":"code","778a7cd7":"code","2a3eb739":"code","abf547ba":"code","8cf2ea8a":"code","a7c61d12":"code","b959ce0e":"code","57618a19":"code","ec046d55":"code","b0d15687":"code","1c1bd4ee":"code","1cfd8380":"code","5471397f":"code","16045bb2":"code","13b89660":"code","dc8295a0":"code","fe47ebd1":"code","413cb475":"code","f899e1bb":"code","a4a9d858":"code","c0a20ce3":"code","d1e5bdca":"code","5805d948":"code","d4092e2f":"code","688a4b84":"code","3a91ef17":"code","f7c98e33":"code","3d192497":"code","240467fe":"code","55c4d863":"code","7b54a9d9":"code","8501a002":"code","4bfa5d0e":"code","8bd4b737":"code","977ffedc":"code","11a538ad":"code","dcef0fd7":"code","2f582e6b":"code","b6f16d69":"code","cc04152f":"code","e59a4fce":"code","17ad23d2":"code","00caaff4":"code","7d93c7f1":"code","fe3c49a5":"code","f54c1207":"code","e9e49cb7":"code","4d776e12":"code","94d07a5a":"code","71b801d8":"code","0b0031c2":"code","e33a4310":"code","55e21a97":"code","0acd3b4d":"code","f21e0ac3":"code","7543c86a":"markdown","3cdeafba":"markdown","980c50bf":"markdown","e6984b01":"markdown","2a3de82a":"markdown","61cc723c":"markdown","1bad7990":"markdown","594ef09d":"markdown","1f9a3759":"markdown","486cd271":"markdown","fbf5f103":"markdown","b175d107":"markdown","c74df3ef":"markdown","3d73a7a9":"markdown","bd3c8611":"markdown","3a831dff":"markdown","c0ee9304":"markdown","2ef0c191":"markdown"},"source":{"172bcbbb":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndata.head()","d702e86d":"#Copie du dataframe\ndf = data.copy()","1a307e46":"df.shape","3ac9ae08":"df","f3a17ab6":"cat_col = ['sex','cp','fbs', 'restecg','exng', 'slp', 'caa', 'thall']\nnum_col = ['age','trtbps','chol', 'thalachh','oldpeak' ]","dc6dab30":"for col in cat_col : \n    df[[col]] = df[[col]].astype(int)\n    \nfor col in num_col : \n    df[[col]] = df[[col]].astype(float)","a4d6e912":"print('Nombre de variables num\u00e9riques :' , df.select_dtypes(float).shape[1])\nprint('Nombre de variables cat\u00e9gorielles :' ,df.select_dtypes(int).shape[1])","82ca98ab":"# Analyse des valeurs manquantes\n\nplt.figure(figsize = (10,7))\n    \nsns.heatmap(df.isna(), cbar = False)","3ddfc881":"df.isna().sum()","ca582ae1":"# VARIABLE CIBLE \ndf['output'].value_counts(normalize = True)","a5de81d6":"# VARIABLES NUM\u00c9RIQUES\n\nfor col in num_col : \n    plt.figure()\n    sns.distplot(df[col], bins = 20)","6e23c202":"# VARIABLE AGE\n\nsns.boxplot(df['age'], data = df)","6f54cc1d":"plt.figure(figsize = (12,8))\nsns.distplot(df['age'], bins = 100)","6616512c":"print(df['age'].min())\nprint(df['age'].max())","9e979f8a":"# VARIABLES CAT\u00c9GORIELLES\n\nfor col in cat_col : \n    plt.figure()\n    df[col].value_counts().plot.pie()","47ac9a59":"df_positive = df[df['output'] == 1]\ndf_negative = df[df['output'] == 0]","0f02af6b":"plt.figure(figsize = (12,8))\nax = sns.countplot(y=\"age\", hue=\"output\", data=df)","d0183e28":"for col in num_col : \n    plt.figure()\n    sns.distplot(df_negative[col], label = 'negative')\n    sns.distplot(df_positive[col], label = 'positive')\n    plt.legend()","11568bed":"ncount = len(df)\n\nax = sns.countplot(x=\"sex\", hue=\"output\", data=df, palette = \"cubehelix\")\n             \nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.1f}%'.format(100.*y\/ncount), (x.mean(), y),ha='center', va='bottom') # set the alignment of the text\n","80b9dc79":"for i,j in zip(cat_col, range(len(cat_col))[-7:]) : \n    ncount = len(df)\n    plt.figure(figsize = (10,30))\n    plt.subplot(9,1,j)\n    ax = sns.countplot(x= i, hue=\"output\", data=df, palette = \"cubehelix\")\n    \n    for p in ax.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        ax.annotate('{:.1f}%'.format(100.*y\/ncount), (x.mean(), y),ha='center', va='bottom') # set the alignment of the text\n\n\n","dfae0259":"sns.countplot(x= 'thall', hue=\"output\", data=df, palette = \"cubehelix\")","13177281":"plt.figure(figsize = (12,8))\nsns.heatmap(df.corr(),cmap='coolwarm',  annot = True)","d3a5ed50":"corr = df.corr()\ncorr[(df.corr() >= 0.4) | (df.corr() <= - 0.39)]","1604fc34":"num_col","eace32fd":"cat_col","7570565e":"from scipy.stats import chi2_contingency\n\ndef chitest_target (col): \n    table = pd.crosstab(df[col], df['output'])\n    result_test = chi2_contingency(table)\n\n    print(col)\n    \n    print('statistique du test',result_test[0] )\n    print('p_value', \"%.16f\" % float(result_test[1]))\n    print('degr\u00e9 de libert\u00e9',result_test[2] )\n    ","778a7cd7":"test_col = ['cp','exng','caa' ]\n\nfor col in test_col : \n    print(f'{col}{chitest_target(col)}')","2a3eb739":"def chitest_exng (col): \n    table = pd.crosstab(df[col], df['exng'])\n    result_test = chi2_contingency(table)\n\n    print(col)\n    \n    print('statistique du test',result_test[0] )\n    print('p_value', \"%.16f\" % float(result_test[1]))\n    print('degr\u00e9 de libert\u00e9',result_test[2] )","abf547ba":"\n\ntest_col = ['cp','slp' ]\n\nfor col in test_col : \n    print(f'{col}{chitest_exng(col)}')","8cf2ea8a":"sns.pairplot(df[num_col])","a7c61d12":"#Relation Olpeak \/ Slt\n\nsns.catplot(x = 'slp', y =df['oldpeak'], data = df, hue = 'output')","b959ce0e":"# Realtion thalach \/rest_ecg :\n    \nsns.catplot(x = 'restecg', y =df['thalachh'], data = df, hue = 'output')","57618a19":"# Realtion chol \/fbs :\n\nsns.catplot(x = 'fbs', y =df['chol'], data = df)","ec046d55":"#Relation sexe \/ thalachh\n\nplt.figure(figsize=(10,6))\n\ndf[df['sex']==1]['thalachh'].hist(alpha=0.5,color='blue',\n                                              bins=30,label='sex=1')\ndf[df['sex']==0]['thalachh'].hist(alpha=0.5,color='red',\n                                              bins=30,label='sex=0')\nplt.legend()\nplt.xlabel('Thalachh')","b0d15687":"figure = plt.figure(figsize=(20,8))\n\nsns.boxplot(x= 'sex',y='thalachh',hue = 'restecg',data=df)","1c1bd4ee":"#Relation age\/ thall\n\nfigure = plt.figure(figsize=(15,6))\nsns.barplot(x= 'age', y ='thall',data=df)","1cfd8380":"cat_col ","5471397f":"num_col","16045bb2":"del num_col[0]","13b89660":"key_col = ['age', 'output']","dc8295a0":"df = data.copy()\n\ndf = df[cat_col+num_col + key_col]","fe47ebd1":"from sklearn.model_selection import train_test_split\n\ntrainset, testset = train_test_split(df, test_size = 0.2, random_state = 0)","413cb475":"trainset['output'].value_counts(normalize = True)","f899e1bb":"testset['output'].value_counts(normalize = True)","a4a9d858":"df['cp'] = df['cp'].map({ 0 :'asympto',\n                             1 :'typ angina',\n                             2 :'atyp angina',\n                        3 :'non angina pain'})\n    \n    \ndf['restecg'] = df['restecg'].map({ 0 :'normal',\n                             1 :'ST wave anormal',\n                             2 :'hypertrophy'})\n\n    \ndf['slp'] = df['slp'].map({ 2 :'croissant',\n                             1 :'plat',\n                             0 :'descendant'})\n\ndf['thall'] = df['restecg'].map({ 0 :'result0',\n                             1 :'result1',\n                             2 :'result2',\n                        3 :'result3'})\n\ndf_dumm = pd.get_dummies(df[['cp', 'restecg','slp', 'thall']])\n\ndf = df.join(df_dumm)\n\ndf = df.drop(['cp', 'restecg','slp', 'thall'], axis = 1)","c0a20ce3":"df['age_cat'] = pd.cut(df['age'], bins=[x for x in range(0,100, 10)],labels=[x for x in range(10,100, 10)], right=True)","d1e5bdca":"df['ST_problem'] = 0\ndf.loc[(df['oldpeak'] <= 0.9), 'ST_problem'] = 1\ndf.loc[(df['slp_croissant'] == 1), 'ST_problem'] = 1\ndf.loc[(df['slp_descendant'] == 1), 'ST_problem'] = 1\ndf.loc[(df['restecg_ST wave anormal'] == 1),'ST_problem'] = 1\ndf.loc[(df['restecg_hypertrophy'] == 1),'ST_problem'] = 1\n\n","5805d948":"df['angor'] = 0\ndf.loc[(df['exng'] == 1), 'angor'] = 1\ndf.loc[(df['cp_typ angina'] == 1), 'angor'] = 1","d4092e2f":"df","688a4b84":"def preprocessing (df) : \n    \n    #df = encodage (df) \n    #df = feature_engineering (df)\n    \n    X = df.drop('output', axis = 1)\n    y = df['output']\n    \n    print(y.value_counts(normalize = True))\n    \n    return X,y\n    ","3a91ef17":"trainset, testset = train_test_split(df, test_size = 0.2, random_state = 0)","f7c98e33":"X_train, y_train = preprocessing(trainset)\nX_test, y_test = preprocessing (testset)\n#X_test['restecg_hypertrophy'] = 0","3d192497":"y_test.value_counts()","240467fe":"import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.ensemble import  RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_selection import SelectKBest, f_classif, chi2\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.decomposition import PCA\n","55c4d863":"#model = DecisionTreeClassifier(random_state = 0)\n\nmodel = make_pipeline(PolynomialFeatures(2),SelectKBest(chi2,k=17), \n                      RandomForestClassifier(random_state = 0))\n\n#model = make_pipeline(PolynomialFeatures(2),PCA(n_components = 17),\n                      #RandomForestClassifier(random_state = 0))","7b54a9d9":"def evaluation(model) : \n    \n    model.fit(X_train,y_train)\n    y_pred = model.predict(X_test)\n    \n    print(confusion_matrix(y_test,y_pred))\n    print(classification_report(y_test,y_pred))\n    \n    N,train_score, val_score = learning_curve(model,X_train,y_train, \n                                              cv = 4, scoring = 'f1', \n                                             train_sizes = np.linspace(0.1,1,10))\n    \n    plt.figure()\n    plt.plot(train_score.mean(axis = 1), label = 'train score')\n    plt.plot(val_score.mean(axis = 1), label = 'val score')\n    plt.legend()","8501a002":"evaluation(model)","4bfa5d0e":"# pd.DataFrame(data = model.feature_importances_, index = X_train.columns).plot.bar()","8bd4b737":"df.columns.to_list()","977ffedc":"u = np.arange(1,21,1)\n\nfor i in u :\n    model = make_pipeline(SelectKBest(f_classif,k=i), \n                      RandomForestClassifier(random_state = 0))\n    \n    print(i)\n    evaluation(model)","11a538ad":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline","dcef0fd7":"preprocessor = make_pipeline(PolynomialFeatures(2),SelectKBest(chi2, k = 17))\n\nSGDClassifier = make_pipeline(preprocessor,StandardScaler(),SGDClassifier(random_state = 0))\n\nSVC = make_pipeline(preprocessor, StandardScaler(), SVC(random_state = 0))\n\nAdaBoost = make_pipeline(preprocessor, AdaBoostClassifier(random_state = 0))\n\nKNN = make_pipeline(preprocessor,StandardScaler(), KNeighborsClassifier())\n","2f582e6b":"dict_of_model = {'SGD' : SGDClassifier, \n                 'SVC' : SVC , \n                 'AdaBoost' : AdaBoost, \n                 'KNN' : KNeighborsClassifier }\n","b6f16d69":"for name, model in dict_of_model.items():\n    print(name)\n    evaluation(model)","cc04152f":"model = make_pipeline(preprocessor,StandardScaler(), KNeighborsClassifier())\nevaluation(model)","e59a4fce":"evaluation(SVC)","17ad23d2":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV","00caaff4":"hyper_params = {'svc__gamma' : [1e-3, 1e-4, 0.01,1,10,100,1000],\n                'svc__C' : [1,10,100,1000],\n                'svc__kernel' :['linear', 'poly', 'rbf', 'sigmoid']\n}","7d93c7f1":"grid = GridSearchCV(SVC, hyper_params, scoring = 'f1', cv=4)\n\ngrid.fit(X_train,y_train)\n\nprint(grid.best_params_)","fe3c49a5":"y_pred = grid.predict(X_test)\nevaluation(grid.best_estimator_)","f54c1207":"hyper_params = {'svc__gamma' : [1e-4, 0.01,1],\n                'svc__C' : [1,10],\n                'svc__kernel' :['linear', 'poly'],\n               'pipeline__polynomialfeatures__degree' : [2,3,4],\n               'pipeline__selectkbest__k' : range(15,22)}","e9e49cb7":"grid = RandomizedSearchCV(SVC, hyper_params, scoring = 'f1', cv=4)\n\ngrid.fit(X_train,y_train)\n\nprint(grid.best_params_)","4d776e12":"y_pred = grid.predict(X_test)\n\nevaluation(grid.best_estimator_)","94d07a5a":"preprocessor = make_pipeline(PolynomialFeatures(2),SelectKBest(chi2, k = 17))\nKNN = make_pipeline(preprocessor, StandardScaler(), KNeighborsClassifier())\n\nevaluation(KNN)","71b801d8":"hyper_params = { 'kneighborsclassifier__n_neighbors' : range(2,10),\n                'kneighborsclassifier__weights' : ['uniform', 'distance'],\n                'kneighborsclassifier__algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute']}\n\n","0b0031c2":"grid = GridSearchCV(KNN, hyper_params, scoring = 'recall', cv = 4)\ngrid.fit(X_train, y_train)\n\nprint(grid.best_params_)","e33a4310":"y_pred = grid.predict(X_test)\n\nevaluation(grid.best_estimator_)","55e21a97":"hyper_params = {'kneighborsclassifier__n_neighbors' : range(4,10),\n                'kneighborsclassifier__weights' : ['uniform', 'distance'],\n                'kneighborsclassifier__algorithm' : ['auto', 'ball_tree', 'kd_tree', 'brute'],\n               'pipeline__polynomialfeatures__degree' : [2,3,4],\n               'pipeline__selectkbest__k' : range(15,22)}","0acd3b4d":"from sklearn.model_selection import RandomizedSearchCV\n\ngrid = RandomizedSearchCV(KNN, hyper_params, scoring = 'f1', cv = 4)\ngrid.fit(X_train, y_train)\n\nprint(grid.best_params_)","f21e0ac3":"y_test = grid.predict(X_test)\n\nevaluation(grid.best_estimator_)","7543c86a":"# KNN : OPTIMISATION RANDOMIZED SEARCH CV","3cdeafba":"## Objectif : \n- Comprendre au maximum les donn\u00e9es dont on dispose pour d\u00e9finir une strat\u00e9gie de mod\u00e9lisation\n\n- D\u00e9volopper une premi\u00e8re strat\u00e9gie de mod\u00e9lisation\n\n#### ANALYSE DE LA FORME : \n\n- **Identification de la target** : output\n\n- **Nombre de lignes et de colonnes** : 303 lignes et 14 colonnes\n\n- **Types de variables** : qualitatives : 9, quantitatives : 5\n\n- **Identification des valeurs manquantes** : aucune NaN","980c50bf":"#### TRAIN TEST SET","e6984b01":"# KNN : OPTIMISATION GRID SEARCH CV","2a3de82a":"#### FONCTIONS DE PREPROCESSING","61cc723c":"# SVM : OPTIMISATION AVEC RANDOMIZEDSEARCHCV","1bad7990":"#### ANALYSE PLUS DETAILLEE\n\n- **Relations variables \/ Variables** : \n\n- L\u2019age est corr\u00e9l\u00e9 avec la thalach (fr\u00e9quence cardiaque maximale atteinte)\n- La douleur au c\u0153ur cp est corr\u00e9l\u00e9 avec exng (angine du c\u0153ur)\n- L\u2019angine du c\u0153ur(exng) est corr\u00e9l\u00e9 avec la fr\u00e9quence cardiaque maximale atteinte (thalach)\n\n- Slope (slp) La pente du segment ST de l'effort de pointe est corr\u00e9l\u00e9 avec la fr\u00e9quence cardiaque maximale atteinte (thalach)\n\n- Slope (slp) La pente du segment ST de l'effort de pointe est corr\u00e9l\u00e9 avec oldpeak la d\u00e9pression ST induite par l'exercice par rapport au repos\n\n- Toutes les variables semblent corr\u00e9l\u00e9es avec la variables cible sauf : \n \u2022\tchol(cholesterol), \n \u2022\tfbs (glyc\u00e9mie \u00e0 jeun), \n \u2022\tresecg(r\u00e9sultats \u00e9lectrocardiographiques au repos), \n \u2022\ttrtbps (tension art\u00e9rielle au repos (en mm Hg))\n\n  \n\n\n##### Hypoth\u00e8ses nulles (H0) : \n- L\u2019age est corr\u00e9l\u00e9 avec output : Anova\n- L\u2019angine du c\u0153ur (exng) est corr\u00e9l\u00e9 avec (thalach ) : Anova\n- L\u2019angine du c\u0153ur (exng) est ind\u00e9pendante de (cp) et (slp) : khi 2\n- Output est corr\u00e9l\u00e9 avec cp, exng, caa: khi2\n- Output est corr\u00e9l\u00e9 avec thallach, oldpeak,  : Anova\n","594ef09d":"# SVM : OPTIMISATION GRID SEARCH CV","1f9a3759":"# 3.1- MODELISATION AVEC SVC","486cd271":"#### ANALYSE DE LA FORME","fbf5f103":"## INTRODUCTION","b175d107":"# 3.2- MODELISATION AVEC KNN","c74df3ef":"#### ANALYSE DE FOND : \n\n- **Visualisation de la target (Histogramme si c\u2019est une valeur continue \/ Boxplot si c\u2019est une valeur discr\u00e8te** : \n    - Dataset \u00e9quilibr\u00e9 avec 54% de cas positifs\n\n- **Signification des diff\u00e9rentes variables** :\n    - Variables continues : non-standardis\u00e9es, oldpeak n'a pas une distribution normale\n    - Variables age : age varie de 29 et 77 ans, on pourra cr\u00e9er une variable pour les cat\u00e9gories d'age plus tard\n    - Variables qualitatives :\n      \n       binaire : \n    - fbs (gyc\u00e9mie a jeun), \n    - exng(angine du coeur)\n    \n      cat\u00e9gorielles : \n    - thall (test majorit\u00e9 3 et 1 : d\u00e9faut r\u00e9versible ou ordinaire)\n    - caa (vaissaux pricipaux color\u00e9s : maj 0 - normal puis 1 - ST anormal puis 2- ventricule     hypertrophi\u00e9)\n    - slope (majorit\u00e9 de 2 et 1 : plate ou descendante)\n    - restecg \u00e9l\u00e9ctrocardiogramme au repos (moiti\u00e9 0 et 1 et tres peu de 2)\n    - cp douleur cardiaque (0- asymptomatique et 2- angine atypique peu de 1- angine typique     et 3- pas de douleurs )\n    \n\n- **Relations features \u2013 target (Histogramme \/ Boxplot)** :\n    - target \/ cat\u00e9gorie : \n    \n     - sex : Les hommes semblent plus touch\u00e9s par les arr\u00eats cardiaques\n     - cp : Les douleurs cardiaques \u00ab typical angina \u00bb et \u00ab atipical angina\u201d semblent causer plus d\u2019arr\u00eats cardiaques\n     - restecg : Les r\u00e9sultats d\u2019\u00e9l\u00e9ctrocardiogrammes qui montrent une anomalie de l\u2019onde  ST-T semblent mener \u00e0 plus d\u2019arr\u00eats cardiaques \n     - exng : Pas d\u2019angore pendant l\u2019exercice semble augmenter les chances d\u2019arr\u00eat cardiaque \n     - slp : Une pente descendante du segment ST lors l'effort de pointe semble augmenter les  chances d\u2019arr\u00eat cardiaque \n     - caa : 0 vaisseaux color\u00e9s par la fluotherapie semble augmenter les chances d\u2019arr\u00eat cardiaque \n\n    - target \/ age : \n     - l'age ne semble pas corr\u00e9l\u00e9 aux probl\u00e8mes cardiaques qui augmentent autour de 40-44 ans puis 50-54 ans puis dimimnuent apres 56 ans\n   \n    - target \/ variables num\u00e9riques :les variables qui semblent avoir le plus d'impact sont  : \n     - thalach :les personnes qui font des arrets cardiaques ont un taux old peak pr\u00e8s de 0\n     - oldpeak : les personnes qui font des arrets cardiaquesune fr\u00e9quence maximale atteinte diff\u00e9rente (plus \u00e9lev\u00e9e) ","3d73a7a9":"# 2- PRE TRAITEMENT DES DONN\u00c9ES","bd3c8611":"# 1- EXPLORATORY DATA ANALYSE","3a831dff":"#### Relation Target \/ Variables\n\n##### Cr\u00e9ation de sous-ensembles positifs et n\u00e9gatifs","c0ee9304":"# 3- MODELISATION","2ef0c191":"#### 1iere Mod\u00e9lisation"}}