{"cell_type":{"46cca13e":"code","fd1e6652":"code","c960bb20":"code","8144a203":"code","71a814d5":"code","eabf4d87":"code","75413813":"code","1950d352":"code","6839bb55":"code","d03a1a00":"code","c8ed0da3":"code","d8b59e78":"code","8834eace":"code","0437f5d7":"code","e91aa49c":"code","918f95eb":"code","685bc6a5":"code","645f644e":"code","dc8712d4":"markdown","809721b8":"markdown","e0fbcc42":"markdown","77b387f9":"markdown","4c1ff6f7":"markdown","aef4cda2":"markdown","1650b68f":"markdown","7faf6521":"markdown","b2aa4446":"markdown","a160cde3":"markdown","e4844806":"markdown","7a0d399a":"markdown"},"source":{"46cca13e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","fd1e6652":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","c960bb20":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\n\nY_train.value_counts()","8144a203":"# Check the data\nX_train.isnull().any().describe()","71a814d5":"# Check the data\ntest.isnull().any().describe()","eabf4d87":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","75413813":"# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","1950d352":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","6839bb55":"# Split the train and the validation set for the fitting\nrandom_seed=1\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","d03a1a00":"# Set the CNN model \n# my CNN architechture is In -> [[Conv2D->relu]*2 -> MaxPool2D -> Dropout]*2 -> Flatten -> Dense -> Dropout -> Out\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","c8ed0da3":"# Define the optimizer\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n","d8b59e78":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","8834eace":"epochs = 5 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 64","0437f5d7":"model.fit(X_train, Y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1,\n          validation_data=(X_val, Y_val))","e91aa49c":"# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nconfusion_mtx","918f95eb":"model.evaluate(X_val,Y_val)","685bc6a5":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\nresults.value_counts()","645f644e":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"mnist_cnn_prediction.csv\",index=False)\n","dc8712d4":"### Model fitting","809721b8":"### Model Architecture","e0fbcc42":"### One-Hot encoding of Y-Label","77b387f9":"### Reshape Data\n\nTrain and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices.\n\nKeras requires an extra dimension in the end which correspond to channels. MNIST images are gray scaled so it use only one channel. For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices.","4c1ff6f7":"### Define Optimiser and model compilation","aef4cda2":"### Split training dataset into train and validation set","1650b68f":"### Evaluating the performance on validation dataset","7faf6521":"### Load Data","b2aa4446":"## This is a basic implementation just to give the beginners a head-start on different steps of using a CNN for digit classification. The next steps include using augmentation, experimentation with model architecture, etc.","a160cde3":"### Prediction on Test Dataset","e4844806":"### Check for data sanity - missing values","7a0d399a":"### Normalize the Data"}}