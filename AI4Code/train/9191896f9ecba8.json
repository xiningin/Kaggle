{"cell_type":{"10eb293e":"code","64c76bb4":"code","740a2c96":"code","e4774c8b":"code","3b472f39":"code","858de930":"code","3f2e9a95":"code","06c93418":"code","1423f6c4":"code","06561dde":"code","807c372d":"code","d9991f4b":"code","e96f7102":"code","ee6c10cf":"markdown","5ead12b7":"markdown","f1ea751d":"markdown","871d62bf":"markdown","0472a0a5":"markdown","7145f574":"markdown","b771e6c5":"markdown","3e926179":"markdown","fb1d680f":"markdown","46b35bc9":"markdown","c0f97f00":"markdown"},"source":{"10eb293e":"#import all required libraries and functions\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline","64c76bb4":"#import file\nlink=\"..\/input\/tsf-ds-ba-task-1\/st_record.csv\"\ndataset=pd.read_csv(link)\ndataset.head()","740a2c96":"# iloc function : divide the data into features and target\nX = dataset.iloc[:,:-1].values  \ny = dataset.iloc[:,1].values","e4774c8b":"dataset.info(verbose=True)","3b472f39":"#plot hours vs score\nplt.scatter(X,y,c=\"r\",marker=\"s\",label=\"score\")\nplt.title('Hours Vs Scores')\nplt.xlabel('hours')\nplt.ylabel('marks')\nplt.legend()\nplt.show()","858de930":"# train_test_split : split the data for training and testing purpose ,0]\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)","3f2e9a95":"regression=LinearRegression()\nregression.fit(X_train,y_train)","06c93418":"# coefficient and Intercept\ncoef = regression.coef_\nintercept = regression.intercept_","1423f6c4":"#plot of regression line\nline = coef * X + intercept\n# Plotting for the test data\nplt.scatter(X, y,c='r')\nplt.plot(X, line,'-g');\nplt.show()","06561dde":"# prediction of scores based on training\ny_pred=regression.predict(X_test)\n\nprediction = pd.DataFrame()\nprediction['Hours'] = pd.Series(X_test.flatten())\nprediction['Original Scores'] = y_test\nprediction['Predicted Scores'] = y_pred\n# concat([X_test,y_test,y_pred])\n# prediction.columns = ['Hours','Original Scores','Predicted Scores']\nprediction.head()","807c372d":"print('Mean Absolute Error:',metrics.mean_absolute_error(y_test, y_pred))","d9991f4b":"print('Coefficient of determination :',metrics.r2_score(y_test,y_pred))","e96f7102":"student_score = coef * 9.25 + intercept\nprint(\"Student studying for 9.25 hrs\/day may score {:.2f}\".format(*student_score))","ee6c10cf":"#### Testing the data","5ead12b7":"#### Using linear regression, successfully predicted the score of student studying for 9.25 hrs & would score 92.92 marks","f1ea751d":"#### Split data into Training and Testing","871d62bf":"#### Training the data","0472a0a5":"#### Predict the score for a student studied for 9.25 hrs\/day","7145f574":"#### Accuracy Estimation","b771e6c5":"## Data Preparation","3e926179":"Only two variables are involved , one is Hours which is Independent Variable and other one is Scores which is Dependent Variable. Using Hourse, we have to predict the students score.\n#### For this prediction, Linear Regression would be the best choice.","fb1d680f":"> ##### Data filled completely","46b35bc9":"### Task 1 : Predict the percentage of an student based on the number of study hours.","c0f97f00":"## Importing libraries and collecting data"}}