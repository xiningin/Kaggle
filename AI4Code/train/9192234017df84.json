{"cell_type":{"86383381":"code","2cdf55d4":"code","d242b7e9":"code","0bf47697":"code","f4353ac0":"code","8c1293e5":"code","f7d10a27":"code","353af9dc":"code","44ae8c52":"code","f757e715":"code","68f40eba":"code","7e34d3ab":"code","32bde2a9":"code","b91ee78f":"code","133fc8dd":"code","19cd72c1":"code","4a584fd3":"code","0b720b34":"code","5e071ee6":"code","5ce7d818":"code","41d86980":"code","3e1e35ea":"code","f79d45c7":"code","0d36906d":"code","25b21a16":"code","9a3b5573":"code","9b3ff275":"code","0eab1417":"code","fce50bbe":"code","3d86eea7":"code","8648ad00":"code","b86a3ccc":"code","1fae4830":"code","8a705532":"code","2dc51743":"code","0e7c5b92":"code","b22eed35":"code","e0b6b66d":"code","4c6a643a":"code","fea6fe9b":"markdown","64730f1a":"markdown","948cdcb6":"markdown","87586317":"markdown","90cd7148":"markdown","62a8fe9d":"markdown","dcc23f06":"markdown"},"source":{"86383381":"import numpy as np\nimport pandas as pd\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import DBSCAN\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","2cdf55d4":"train = pd.read_csv('..\/input\/train.csv').drop(columns=['ID'])","d242b7e9":"def build_histograms(df):\n    df_X = (df.replace(0, np.nan).apply(np.log) * 10).round()\n    start = int(df_X.min().min())\n    stop = int(df_X.max().max())\n    return pd.DataFrame(data={f'bucket{cnt}': (df_X == cnt).sum() for cnt in range(start, stop + 1)})","0bf47697":"df = build_histograms(train)","f4353ac0":"tsne_res = TSNE(n_components=2, verbose=10, \n                perplexity=40, early_exaggeration=60, \n                learning_rate=150).fit_transform(df)","8c1293e5":"FEATURES40 = ['f190486d6', '58e2e02e6', 'eeb9cd3aa', '9fd594eec', '6eef030c1', \n              '15ace8c9f', 'fb0f5dbfe', '58e056e12', '20aa07010', '024c577b9', \n              'd6bb78916', 'b43a7cfd5', '58232a6fb', '1702b5bf0', '324921c7b', \n              '62e59a501', '2ec5b290f', '241f0f867', 'fb49e4212', '66ace2992', \n              'f74e8f13d', '5c6487af1', '963a49cdc', '26fc93eb7', '1931ccfdd', \n              '703885424', '70feb1494', '491b9ee45', '23310aa6f', 'e176a204a', \n              '6619d81fc', '1db387535', 'fc99f9426', '91f701ba2', '0572565c2', \n              '190db8488', 'adb64ff71', 'c47340d97', 'c5a231d81', '0ff32eb98']\n\ndef get_int_cols(df):\n    return df.columns[df.dtypes == np.int64]\n\ndef get_colors(df):\n    colors = pd.Series(index=df.columns, data='b')\n    colors[FEATURES40] = 'y'\n    colors[get_int_cols(train)] = 'g'\n    colors['target'] = 'red'   \n    return colors","f7d10a27":"#Simple function to find centroid of a cluster:\n\ndef centroids(X, lbls):\n    \n    centroids = np.zeros((len(np.unique(lbls)), 2))\n    \n    for l in np.unique(lbls):\n        mask = lbls == l\n        centroids[l] = np.mean(X[mask], axis=0)\n    \n    return centroids","353af9dc":"# Sclae and clusterize, we use DBSCAN as it does not assume that cluster is convex:\nX = StandardScaler().fit_transform(tsne_res)\ndb = DBSCAN(eps=0.085, min_samples=15).fit(X)","44ae8c52":"# Take a look at clusters' sizes:\nunique, counts = np.unique(db.labels_, return_counts=True)\nnp.unique(counts, return_counts=True)","f757e715":"cluster_mask  = (counts <= 157) #& (counts >= 35)\ndot_mask = np.array([(l in unique[cluster_mask]) for l in db.labels_])\nnp.sum(dot_mask)","68f40eba":"fig, ax = plt.subplots(figsize=(20, 20))\n\n# Split meaningful clusters from the noise:\nplt.scatter(X[~dot_mask][:, 0], X[~dot_mask][:, 1], c='g')\nplt.scatter(X[dot_mask][:, 0], X[dot_mask][:, 1], c='b')\n\n# Add centroids to the picture:\ndb_centroids = centroids(X, db.labels_)\nplt.scatter(db_centroids[cluster_mask][:, 0], \n            db_centroids[cluster_mask][:, 1], c='r')\nplt.scatter(db_centroids[~cluster_mask][:, 0], \n            db_centroids[~cluster_mask][:, 1], c='orange')","7e34d3ab":"tsne_no_noise = TSNE(n_components=2, verbose=0, \n                 perplexity=20, early_exaggeration=50, \n                 learning_rate=150).fit_transform(df[dot_mask])","32bde2a9":"#vis_x = tsne_no_noise[:, 0]\n#vis_y = tsne_no_noise[:, 1]\n#plt.figure(figsize=(20,20))\n#plt.scatter(vis_x, vis_y, c=get_colors(train)[dot_mask]);\n# Red = target, yellow = leak, green = ints, blue = floats","b91ee78f":"X4 = StandardScaler().fit_transform(tsne_no_noise)","133fc8dd":"dbf = DBSCAN(eps=0.095, min_samples=25).fit(X4)","19cd72c1":"# Mask labels for xlusters of size 40:\nuniquef, countsf = np.unique(dbf.labels_, return_counts=True)\nnp.unique(countsf, return_counts=True)","4a584fd3":"#Simple function to find centroid of a cluster:\n\ndef centroids(X, lbls):\n    \n    cds_array = np.zeros((len(np.unique(lbls)), 2))\n    \n    for i, l in enumerate(np.unique(lbls)):\n        mask = lbls == l\n        cds_array[i] = np.mean(X[mask], axis=0)\n    \n    return cds_array","0b720b34":"dbs_maskf  = (countsf <= 45) & (countsf >= 30)\ndot_maskf = np.array([(l in uniquef[dbs_maskf]) for l in dbf.labels_])","5e071ee6":"dbf_c = centroids(X4, dbf.labels_)\n\n# Add centroids to the picture:\nfig, ax = plt.subplots(figsize=(20, 20))\nplt.scatter(X4[~dot_maskf][:, 0], X4[~dot_maskf][:, 1], c='g')\nplt.scatter(X4[dot_maskf][:, 0], X4[dot_maskf][:, 1], c='b')\n\nplt.scatter(dbf_c[dbs_maskf][:, 0], dbf_c[dbs_maskf][:, 1], c='r')\nplt.scatter(dbf_c[~dbs_maskf][:, 0], dbf_c[~dbs_maskf][:, 1], c='orange')","5ce7d818":"groups = pd.DataFrame([dbf.labels_[dot_maskf]]).T\ngroups.index = df.index[dot_mask][dot_maskf]\n\ng_list = []\nfor g in pd.unique(groups[0]):\n    g_list += [list(groups[groups[0] == g].index)]  \n\nlen(g_list), len(g_list[0])","41d86980":"with open('groups.txt', 'w') as file_handler:\n    for item in g_list:\n        file_handler.write(\"{}\\n\".format(item))","3e1e35ea":"groups.shape","f79d45c7":"groups['x'] = X4[dot_maskf][:, 0]\ngroups['y'] = X4[dot_maskf][:, 1]","0d36906d":"groups.columns = ['group', 'x', 'y']","25b21a16":"def align_m(v1,v2):\n    #Returns rotation matrix to align v1 to v2:\n    \n    # Unit vectors:\n    x1, y1 = v1\/np.sqrt(np.dot(v1,v1))\n    x2, y2 = v2\/np.sqrt(np.dot(v2,v2))\n    \n    #Cos of the angle between two vectors:\n    cosv = x1*x2+y1*y2\n    \n    #Sin of the angle between two vectors:\n    sinv = x1*y2-x2*y1\n    \n    #Rotation\n    rotation_matrix = np.matrix([[cosv, -sinv],[sinv, cosv]])  \n    \n    return rotation_matrix","9a3b5573":"def direction(a):\n    #Returns direction of a group:\n    \n    rng = np.max(a, axis=0) - np.min(a, axis=0)\n    if rng[0] > rng[1]:\n        a = a[a[:, 0].argsort()]\n    else:\n        a = a[a[:, 1].argsort()]\n    \n    return a[-1] - a[0]","9b3ff275":"#Lets align all groups with x-axis:\n\nfor g in groups['group'].unique():\n    \n    # Extract dots:\n    t_dots = np.copy(groups[groups['group']==g].iloc[:,1:])\n\n    # Find center of the group:\n    t_center = np.mean(t_dots, axis=0)\n\n    # Find direction of the goup and calculate rotation matrix:\n    rotate = align_m(direction(t_dots),[1,0])\n\n    # Rotate all dots:\n    for i, d in enumerate(t_dots - t_center):\n        t_dots[i] = (rotate*np.matrix(d).T).A1 + t_center\n\n    # Save rotated dots in df:\n    groups.loc[groups[groups['group']==g].index, ['x','y']] = t_dots","0eab1417":"# Plot rotated groups:\nfig, ax = plt.subplots(figsize=(15, 15))\nplt.scatter(groups['x'], groups['y'], c='g')","fce50bbe":"#Save the labels, we'll use them a lot:\ngrps = groups['group'].unique()\n\n#Array to hold standard deviations:\nxy_std = np.zeros((len(grps), 2))\n\n# Find standard deviations for every group:\nfor i, g in enumerate(grps):\n    xy_std[i] = groups[groups['group']==g].describe()[['x','y']].loc['std',:]","3d86eea7":"# Mask groups that have standard deviations considerably higher than the mean:\nk = 1.0\nstd_mask = xy_std[:,1] < xy_std.mean(axis=0)[1]*k\n\n# Mask dots, plot dots:\ndots_std_mask = groups['group'].apply(lambda x: x in grps[std_mask])\n\nfig, ax = plt.subplots(figsize=(20, 20))\n\nplt.scatter(groups[~dots_std_mask]['x'], groups[~dots_std_mask]['y'], c='g')\nplt.scatter(groups[dots_std_mask]['x'], groups[dots_std_mask]['y'], c='b')","8648ad00":"grps[std_mask]","b86a3ccc":"groups[groups['group']==8].sort_values(by=['x'], ascending=False).index","1fae4830":"with open('sorted_groups.txt', 'w') as file_handler:\n    for good_group in grps[std_mask]:\n        sorted_group = list(groups[groups['group']==good_group]\\\n                            .sort_values(by=['x'], ascending=False).index)\n        file_handler.write(\"{}\\n\".format(sorted_group))","8a705532":"C = [1757, 3809,  511, 3798,  625, 3303, 4095, 1283, 4209, 1696, 3511, 816,  \n     245, 1383, 2071, 3492,  378, 2971, 2366, 4414, 2790, 3979, 193, 1189, \n     3516,  810, 4443, 3697,  235, 1382, 4384, 3418, 4396, 921, 3176,  650]","2dc51743":"g_list = []\nfor good_group in grps[std_mask]:\n    g_list += [list(groups[groups['group']==good_group]\\\n                          .sort_values(by=['x'], ascending=False).index)]","0e7c5b92":"cols_mask = [item for sublist in g_list for item in sublist]\n\ncol_labels = [[i]*len(g) for i, g in enumerate(g_list)]\ncol_labels = [item for sublist in col_labels for item in sublist]","b22eed35":"len(col_labels), len(cols_mask)","e0b6b66d":"Y = train.iloc[C,:][cols_mask].T\nY['labels'] = col_labels\n\nsorted_col = Y.sort_values(list(C))","4c6a643a":"writer = pd.ExcelWriter('eyeball_notes.xlsx')\nsorted_col.to_excel(writer,'Sheet1')\nwriter.save()","fea6fe9b":"## Noiseless TSNE","64730f1a":"# Finished grouping & sorting with t-SNE\n\nSpecial thanks to **Dmitry Frumkin** for his post\n### Feature grouping with t-SNE\n* https:\/\/www.kaggle.com\/dfrumkin\/feature-grouping-with-t-sne\n\n\nPS: I have not had time to check them in action, yet.","948cdcb6":"## Clustering with DBSCAN","87586317":"## Sorting groups:\n\nThe goups are directed. The easiest way to put them in order is to sort along the dimension with greater variance. But the best way would be to rotate them and then sort. ","90cd7148":"## Printing groups:","62a8fe9d":"**I ended up reversing some groups in excel and then exporting to a csv that I have immported to the kernel to finally test each one of the groups.**","dcc23f06":"## Eyeballing\nTo check direction of the gcoups, export to excel, sort all rows on last column 'labels'."}}