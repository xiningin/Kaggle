{"cell_type":{"3dbe5b37":"code","2d6664a4":"code","742228cd":"code","2450b843":"code","b2158c17":"code","ae1b38ce":"code","1044098c":"code","6e953647":"code","3b30f275":"code","64d2ebce":"code","698d2d92":"code","a6d1d8f6":"code","f230df34":"code","3063c48d":"code","d981d02e":"code","79574f72":"code","3bbec8a4":"code","100821b4":"code","9600e026":"code","9854347a":"code","52eb6fab":"code","7b565f3f":"markdown","1a875446":"markdown","ec8615ae":"markdown","a4b2c9af":"markdown","d14b7e42":"markdown","ca7d5e90":"markdown","bc301348":"markdown","283c165a":"markdown","af9d91db":"markdown","e983bedb":"markdown","a9f9eb3e":"markdown","b7be804b":"markdown","571a3d44":"markdown","c6c41912":"markdown","815c9bd7":"markdown","9c554f2a":"markdown","f265b042":"markdown"},"source":{"3dbe5b37":"# Import libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport pandas as pd\nfrom textblob import TextBlob\nfrom pandas.io.json import json_normalize\nfrom wordcloud import WordCloud\nimport math\nimport re\nimport json","2d6664a4":"# Preprocessing functions\n\ndef clean_tweet(tweet):\n    return ' '.join(re.sub(\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)\", \" \", tweet).split())\n    \ndef analyze_sentiment(tweet):\n    analysis = TextBlob(clean_tweet(tweet))\n    if analysis.sentiment.polarity > 0:\n        return 1\n    elif analysis.sentiment.polarity == 0:\n        return 0\n    else:\n        return -1\n    \ndef convert_month_to_number(month):\n    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    return months.index(month)+1\n\ndef set_timestamp(df):\n    dates = pd.DataFrame(columns = ['Year', 'Month', 'Day'])\n    dates['Year'] = df['Date'].apply(lambda x: int(x[-4:]))\n    dates['Month'] = df['Date'].apply(lambda x: x[4:7]).apply(lambda x:int(convert_month_to_number(x)))\n    dates['Day'] = df['Date'].apply(lambda x: int(x[8:10].rsplit()[0]))\n\n    df.Date = pd.to_datetime(dates)\n    return df","742228cd":"column_names = ['Date', 'Text', 'Likes', 'Retweets', 'Sentiment', 'Source', 'Length']\n\n# Create empty dataframe with column names\nvalorant_df = pd.DataFrame(columns = column_names)\n\nwith open('..\/input\/valorant-tweets\/tweets.txt') as f:\n    for line in f:\n        if len(line) > 10: # Dont take into account empty lines\n            to_append = {}\n            obs = json.loads(line)\n            \n            to_append['Date'] = obs['created_at']\n            to_append['Text'] = obs['text']\n            to_append['Likes'] = obs['favorite_count'] \n            to_append['Retweets'] = obs['retweet_count']\n            \n            valorant_df = valorant_df.append(to_append, ignore_index = True)\n\nvalorant_df = set_timestamp(valorant_df)\nvalorant_df['Sentiment'] = valorant_df['Text'].apply(lambda x:analyze_sentiment(x))\nvalorant_df['Source'] = 'random_user'\nvalorant_df['Length'] = valorant_df['Text'].apply(len)\nvalorant_df['Word_counts'] = valorant_df['Text'].apply(lambda x:len(str(x).split()))","2450b843":"valorant_df.head()","b2158c17":"print(f'{valorant_df.shape[0]} observations, {valorant_df.shape[1]} columns')","ae1b38ce":"# Find emoji patterns\nemoji_pattern = re.compile(\"[\"\n        u\"\\U0001F600-\\U0001F64F\"  # emoticons\n        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                           \"]+\", flags=re.UNICODE)\n\n# Basic function to clean the text\ndef clean_text(text):\n    text = str(text)\n    # Remove emojis\n    text = emoji_pattern.sub(r'', text)\n    # Remove identifications\n    text = re.sub(r'@\\w+', '', text)\n    # Remove links\n    text = re.sub(r'http.?:\/\/[^\/s]+[\/s]?', '', text)\n    return text.strip().lower()","1044098c":"valorant_df['Text'] = valorant_df['Text'].apply(lambda x:clean_text(x))","6e953647":"# Count of observations per category\nvalorant_df['Sentiment'].value_counts(normalize = True)","3b30f275":"x = ['Neutral', 'Positive', 'Negative']\ny = [6959, 3177, 1338]\n\n# Use the hovertext kw argument for hover text\nfig = go.Figure(data=[go.Bar(x=x, y=y,\n            hovertext=['61% of tweets', '28% of tweets', '11% of tweets'])])\n\n# Customize aspect\n#marker_color='rgb(158,202,225)'\nfig.update_traces(marker_line_color='midnightblue',\n                  marker_line_width=1.)\nfig.update_layout(title_text='Distribution of sentiment')\nfig.show()","64d2ebce":"neutral = valorant_df[valorant_df['Sentiment'] == 0]\npositive = valorant_df[valorant_df['Sentiment'] == 1]\nnegative = valorant_df[valorant_df['Sentiment'] == -1]","698d2d92":"#neutral_text\nprint(\"Neutral tweet example  :\",neutral['Text'].values[1])\n# Positive tweet\nprint(\"Positive Tweet example :\",positive['Text'].values[1])\n#negative_text\nprint(\"Negative Tweet example :\",negative['Text'].values[1])","a6d1d8f6":"x = valorant_df.Length.values\n#x = [math.log10(i) for i in list(valorant_df.Length.values) if i!= 0]\n\nfig = go.Figure(data=[go.Histogram(x=x,\n                                   marker_line_width=1, \n                                   marker_line_color=\"midnightblue\", \n                                   xbins_size = 5)])\n\nfig.update_layout(title_text='Distribution of tweet lengths')\nfig.show()","f230df34":"x1 = neutral.Length.values\nx2 = positive.Length.values\nx3 = negative.Length.values\n\nfig = go.Figure(data=[go.Histogram(x=x1,\n                                   marker_line_width=1, \n                                   marker_line_color=\"midnightblue\", \n                                   xbins_size = 5,\n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of neutral tweet lengths')\nfig.show()\n\nfig = go.Figure(data=[go.Histogram(x=x2,\n                                   marker_line_width=1, \n                                   marker_color='rgb(50,202,50)', \n                                   marker_line_color=\"midnightblue\", \n                                   xbins_size = 5,\n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of positive tweet lengths')\nfig.show()\n\nfig = go.Figure(data=[go.Histogram(x=x3,\n                                   marker_line_width=1, \n                                   marker_color='crimson', \n                                   marker_line_color=\"midnightblue\", \n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of negative tweet lengths')\nfig.show()","3063c48d":"y1 = neutral.Length.values\ny2 = positive.Length.values\ny3 = negative.Length.values\n\nfig = go.Figure()\n\nfig.add_trace(go.Box(y=y1, \n                     name=\"Neutral\", \n                     marker_line_width=1, \n                     marker_line_color=\"midnightblue\"))\n\nfig.add_trace(go.Box(y=y2, \n                     name=\"Positive\", \n                     marker_line_width=1, \n                     marker_color = 'rgb(50,202,50)'))\n\nfig.add_trace(go.Box(y=y3, \n                     name=\"Negative\", \n                     marker_line_width=1, \n                     marker_color = 'crimson'))\n\nfig.update_layout(title_text=\"Box Plot tweet lengths\")\n\nfig.show()","d981d02e":"x = valorant_df.Word_counts.values\n#x = [math.log10(i) for i in list(valorant_df.Length.values) if i!= 0]\n\nfig = go.Figure(data=[go.Histogram(x=x,\n                                   marker_line_width=1, \n                                   marker_line_color=\"midnightblue\")])\n\nfig.update_layout(title_text='Distribution of tweet lengths')\nfig.show()","79574f72":"x1 = neutral.Word_counts.values\nx2 = positive.Word_counts.values\nx3 = negative.Word_counts.values\n\nfig = go.Figure(data=[go.Histogram(x=x1,\n                                   marker_line_width=1, \n                                   marker_line_color=\"midnightblue\", \n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of neutral tweet lengths')\nfig.show()\n\nfig = go.Figure(data=[go.Histogram(x=x2,\n                                   marker_line_width=1, \n                                   marker_color='rgb(50,202,50)', \n                                   marker_line_color=\"midnightblue\", \n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of positive tweet lengths')\nfig.show()\n\nfig = go.Figure(data=[go.Histogram(x=x3,\n                                   marker_line_width=1, \n                                   marker_color='crimson', \n                                   marker_line_color=\"midnightblue\", \n                                   opacity = 0.5)])\n\nfig.update_layout(title_text='Distribution of negative tweet lengths')\nfig.show()","3bbec8a4":"y1 = neutral.Word_counts.values\ny2 = positive.Word_counts.values\ny3 = negative.Word_counts.values\n\nfig = go.Figure()\n\nfig.add_trace(go.Box(y=y1, \n                     name=\"Neutral\", \n                     marker_line_width=1, \n                     marker_line_color=\"midnightblue\"))\n\nfig.add_trace(go.Box(y=y2, \n                     name=\"Positive\", \n                     marker_line_width=1, \n                     marker_color = 'rgb(50,202,50)'))\n\nfig.add_trace(go.Box(y=y3, \n                     name=\"Negative\", \n                     marker_line_width=1, \n                     marker_color = 'crimson'))\n\nfig.update_layout(title_text=\"Box Plot word counts\")\n\nfig.show()","100821b4":"def wordcloud(df, text = 'Text'):\n    \n    # Join all tweets in one string\n    corpus = \" \".join(str(review) for review in df[text])\n    \n    print (f\"There are {len(corpus)} words in the combination of all review.\")\n    \n    wordcloud = WordCloud(max_font_size=50, \n                          max_words=100, \n                          collocations=False,\n                          background_color=\"white\").generate(corpus)\n    \n    plt.figure(figsize=(15,15))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()","9600e026":"print('Neutral Wordcloud')\nwordcloud(df = neutral)\n\nprint('Positive Wordcloud')\nwordcloud(df = positive)\n\nprint('Negative Wordcloud')\nwordcloud(df = negative)","9854347a":"# This dataset contains all tweets from official Valorant accounts\nfrom_RIOT = pd.read_csv('..\/input\/valorant-tweets\/Valorant.csv', usecols = ['Date', 'Text', 'Likes', 'Retweets', 'Sentiment', 'Source', 'Length'])\nfrom_RIOT = from_RIOT.reindex(columns=['Date', 'Text', 'Likes', 'Retweets', 'Sentiment', 'Source', 'Length'])\nfrom_RIOT['Date'] = pd.to_datetime(from_RIOT['Date'], format ='%Y\/%m\/%d')\nfrom_RIOT['Word_counts'] = from_RIOT['Text'].apply(lambda x:len(str(x).split()))","52eb6fab":"# Merge the dataframes is possible has we have the source of accounts each tweet comes from\ndataframe = pd.concat([valorant_df, from_RIOT])\ndataframe.to_csv('all_tweets.csv')","7b565f3f":"# <font color ='#261E26'>4. Quick EDA<\/font>","1a875446":"### <font color ='#FF4654'>Distribution of tweet lengths<\/font>","ec8615ae":"### <font color ='#FF4654'>Merging tweets with tweets posted by community managers<\/font>","a4b2c9af":"<div align='center'><font size=\"5\" color='#353B47'>Valorant BETA<\/font><\/div>\n<div align='center'><font size=\"4\" color=\"#353B47\">Will they dethrone Counter Strike ?<\/font><\/div>\n<br>\n<div align='center'><img src = \"https:\/\/www.kolpaper.com\/wp-content\/uploads\/2020\/04\/valorant-wallpaper-4k-scaled.jpg\"><\/div>\n<br>\n<hr>","d14b7e42":"# <font color ='#261E26'>5. Wordclouds<\/font>","ca7d5e90":"# <font color ='#261E26'>3. Cleaning tweets<\/font>","bc301348":"-----","283c165a":"# <font color ='#261E26'>6. Final Dataframe<\/font>","af9d91db":"<div align=\"justify\"><font size='3' color ='#FF4654'>Here is a quick notebook to parse the tweets.txt file into a regular pandas dataframe. The data were retrieved using Twitter API and stored into a JSON file. The second part of this notebook will perform a quick EDA on the data. The EDA can be generalized to any tweets dataframe with the same structure. I hope you'll enjoy !<\/font><\/div>","e983bedb":"<div align=\"center\"><img src = \"https:\/\/images6.alphacoders.com\/107\/thumb-1920-1072679.jpg\"><\/div>","a9f9eb3e":"* <font size = '3' color ='#FF4654'>Negative words in this wordcloud like bored, bad, suck...<\/font>\n* <font size = '3' color ='#0F6105'>Positive words: good, great, thank, nice...<\/font>","b7be804b":"# <font color ='#261E26'>1. Libraries<\/font>","571a3d44":"### <font color ='#FF4654'>Distribution of word counts<\/font>","c6c41912":"### <font color ='#FF4654'>Examples of sentiment<\/font>","815c9bd7":"### <font color ='#FF4654'>Distribution of sentiment<\/font>","9c554f2a":"# <font color ='#261E26'>2. From JSON to Pandas Dataframe<\/font>","f265b042":"<hr>\n<br>\n<div align='justify'><font color=\"#353B47\" size=\"4\">Thank you for taking the time to read this notebook. I hope that I was able to answer your questions or your curiosity and that it was quite understandable. <u>any constructive comments are welcome<\/u>. They help me progress and motivate me to share better quality content. I am above all a passionate person who tries to advance my knowledge but also that of others. If you liked it, feel free to <u>upvote and share my work.<\/u> <\/font><\/div>\n<br>\n<div align='center'><font color=\"#353B47\" size=\"3\">Thank you and may passion guide you.<\/font><\/div>"}}