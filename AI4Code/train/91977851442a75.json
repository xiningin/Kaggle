{"cell_type":{"d5902486":"code","837b9b10":"code","ae79d42d":"code","5bd5a2de":"code","bb546531":"code","6f5683bf":"code","821566e7":"code","d869b851":"code","da52dd44":"code","fd93b620":"code","f93e385b":"code","1e8032d5":"code","4a22a41f":"code","3c741d79":"code","4b125ea9":"code","e5ff1eca":"code","41210bc8":"code","13a3f048":"code","c0d3e1ad":"code","3d8857be":"code","8ab1cb98":"code","34c2155f":"code","78418d66":"code","405c9ca8":"code","069fa8c1":"code","8fd943c4":"code","c9632ecc":"code","56a4e46e":"code","03baa18e":"code","62373aa1":"code","17aeaf06":"code","8f6626e4":"code","c77d226f":"code","aba579a9":"code","e448ac8c":"code","23d8b5f4":"code","89577f38":"code","e2f743c8":"code","e568dabe":"code","2e44d67a":"code","f7a99708":"markdown","7ed963ef":"markdown","d76dd344":"markdown","768e4be8":"markdown"},"source":{"d5902486":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","837b9b10":"import numpy as np\nfrom transformers import BertTokenizer, BertModel\nimport re\nimport pandas as pd","ae79d42d":"sample_submission = pd.read_csv(\"..\/input\/google-quest-challenge\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/google-quest-challenge\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/google-quest-challenge\/train.csv\")","5bd5a2de":"train.columns.values","bb546531":"output_columns = train.columns.values[11:]\ninput_columns = train.columns.values[[1, 2, 5]]","6f5683bf":"question_output_columns = [col for col in output_columns \\\n                           if 'question' in col]\nanswer_output_colmns = [col for col in output_columns \n                        if col not in question_output_columns]","821566e7":"len(question_output_columns)","d869b851":"tokenizer = BertTokenizer.from_pretrained('..\/input\/huggingfacetransformermodels\/model_classes\/bert\/bert-base-uncased-tokenizer')","da52dd44":"max_length_map = {'question_title': 32,\n                   'question_body': 512,\n                   'answer': 512\n                   }","fd93b620":"def txt_re(txt):\n    txt = txt.strip()\n    txt = re.sub('https?.*$', '', txt)\n    txt = re.sub('https?.*\\s', '', txt)\n    txt = re.sub('\\n+', ' ', txt)\n    txt = re.sub('\\r+', ' ', txt)\n    txt = re.sub('\\t+', ' ', txt)\n    txt = re.sub('&gt;', '>', txt)\n    txt = re.sub('&lt;', '<', txt)\n    txt = re.sub('&amp;', '&', txt)\n    txt = re.sub('&quot;', '\\\"', txt)\n    return txt","f93e385b":"def get_input(txt, pair_txt, tokenizer, max_length):\n    txt = txt_re(txt)\n    txt = tokenizer.encode_plus(txt, pair_txt, add_special_tokens=True,max_length=max_length, \\\n                          pad_to_max_length='right')\n    input_ids = txt['input_ids']\n    segment_masks = txt['token_type_ids']\n    input_masks = txt['attention_mask']\n    \n    return input_ids, segment_masks, input_masks","1e8032d5":"def computer_input_array(df):\n    # t_input_ids, t_segment_masks, t_input_masks = [], [], []\n    q_input_ids, q_segment_masks, q_input_masks = [], [], []\n    a_input_ids, a_segment_masks, a_input_masks = [], [], []\n    for _, instance in df[input_columns].iterrows():\n        title, question, answer = instance.question_title, instance.question_body, instance.answer\n        \"\"\"\n        input_ids, segment_masks, input_masks = get_input(title, tokenizer, max_length_map['question_title'])\n        t_input_ids.append(input_ids)\n        t_segment_masks.append(segment_masks)\n        t_input_masks.append(input_masks)\n        \"\"\"\n    \n        input_ids, segment_masks, input_masks = get_input(title, question, tokenizer, max_length_map['question_body'])\n        q_input_ids.append(input_ids)\n        q_segment_masks.append(segment_masks)\n        q_input_masks.append(input_masks)\n    \n        input_ids, segment_masks, input_masks = get_input(answer, None, tokenizer, max_length_map['answer'])\n        a_input_ids.append(input_ids)\n        a_segment_masks.append(segment_masks)\n        a_input_masks.append(input_masks)\n    # title = [[input_id, segment_mask, input_mask] for input_id, segment_mask, input_mask in \\\n              # zip(t_input_ids, t_segment_masks, t_input_masks)]\n    question = [[input_id, segment_mask, input_mask] for input_id, segment_mask, input_mask in \\\n              zip(q_input_ids, q_segment_masks, q_input_masks)]\n    answer = [[input_id, segment_mask, input_mask] for input_id, segment_mask, input_mask in \\\n              zip(a_input_ids, a_segment_masks, a_input_masks)]\n    \n    return question, answer","4a22a41f":"# title_train,question_train, answer_train = computer_input_array(train)\nquestion_train, answer_train = computer_input_array(train)\n# title_test, question_test, answer_test = computer_input_array(test)\nquestion_test, answer_test = computer_input_array(test)","3c741d79":"answer_test","4b125ea9":"labels = train[output_columns].values.tolist()","e5ff1eca":"# train_dict = {'title': title_train, 'question': question_train, 'answer': answer_train, 'label': labels}\ntrain_dict = {'question': question_train, 'answer': answer_train, 'label': labels}\n# test_dict = {'title': title_test, 'question': question_test, 'answer': answer_test}\ntest_dict = {'question': question_test, 'answer': answer_test}","41210bc8":"ls","13a3f048":"import os\nos.mkdir('.\/data')\n","c0d3e1ad":"os.mkdir('.\/model')","3d8857be":"import torch\ntorch.save(train_dict, '.\/data\/train_data.t7')\ntorch.save(test_dict, '.\/data\/test_data.t7')","8ab1cb98":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom transformers import BertTokenizer, BertModel\nfrom scipy.stats import spearmanr","34c2155f":"class Model_v1(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.bert = BertModel.from_pretrained('..\/input\/huggingfacetransformermodels\/model_classes\/bert\/bert-base-uncased-pytorch-model')\n        self.dropout = nn.Dropout(0.2)\n        self.pool = nn.AvgPool2d((512, 1))\n\n        self.output = nn.Linear(768 * 2, 30)\n        \n    def forward(self, q_inputs, q_input_masks, q_segment_masks, \\\n                a_inputs, a_input_masks, a_segment_masks):\n\n        q_outputs = self.bert(q_inputs, attention_mask=q_input_masks, token_type_ids=q_segment_masks)\n        q_x = q_outputs[0]\n        q_x = self.dropout(q_x)\n        q_x = q_x.unsqueeze(1)\n        q_x = self.pool(q_x)\n        q_x = q_x.squeeze(1).squeeze(1)\n        \n        a_outputs = self.bert(a_inputs, attention_mask=a_input_masks, token_type_ids=a_segment_masks)\n        a_x = a_outputs[0]\n        a_x = self.dropout(a_x)\n        a_x = a_x.unsqueeze(1)\n        a_x = self.pool(a_x)\n        a_x = a_x.squeeze(1).squeeze(1)\n        \n        t_q_a = torch.cat((q_x, a_x), -1)\n        output = self.output(t_q_a)\n        \n        x = torch.sigmoid(output)\n        return x","78418d66":"class Model_v2(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.bert = BertModel.from_pretrained('..\/input\/huggingfacetransformermodels\/model_classes\/bert\/bert-base-uncased-pytorch-model')\n        self.dropout = nn.Dropout(0.2)\n        self.pool = nn.AvgPool2d((512, 1))\n\n        self.output_q = nn.Linear(768, 21)\n        self.output_a = nn.Linear(768, 9)    \n        \n    def forward(self, q_inputs, q_input_masks, q_segment_masks, \\\n                a_inputs, a_input_masks, a_segment_masks):\n        \"\"\"\n        t_outputs = self.bert(t_inputs, attention_mask=t_input_masks, token_type_ids=t_segment_masks)\n        t_x = t_outputs[0]\n        t_x = self.dropout(t_x)\n        t_x = t_x.unsqueeze(1)\n        t_x = self.pool_t(t_x)\n        t_x = t_x.squeeze(1).squeeze(1)\n        \"\"\"\n        q_outputs = self.bert(q_inputs, attention_mask=q_input_masks, token_type_ids=q_segment_masks)\n        q_x = q_outputs[0]\n        q_x = self.dropout(q_x)\n        q_x = q_x.unsqueeze(1)\n        q_x = self.pool(q_x)\n        q_x = q_x.squeeze(1).squeeze(1)\n        \n        a_outputs = self.bert(a_inputs, attention_mask=a_input_masks, token_type_ids=a_segment_masks)\n        a_x = a_outputs[0]\n        a_x = self.dropout(a_x)\n        a_x = a_x.unsqueeze(1)\n        a_x = self.pool(a_x)\n        a_x = a_x.squeeze(1).squeeze(1)\n        \n        output_q = self.output_q(q_x)\n        output_a = self.output_a(a_x)\n        \n        output = torch.cat((output_q, output_a), -1)\n        \n        x = torch.sigmoid(output)\n        return x","405c9ca8":"import numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader,Dataset, TensorDataset\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GroupKFold\nfrom transformers import AdamW, get_linear_schedule_with_warmup","069fa8c1":"data = torch.load('.\/data\/train_data.t7')\ntest_data = torch.load('.\/data\/test_data.t7')","8fd943c4":"test_set = TensorDataset(torch.LongTensor(np.array(test_data['question'])),\n                        torch.LongTensor(np.array(test_data['answer'])))","c9632ecc":"test_loader = DataLoader(\n        test_set,\n        batch_size=1,\n        shuffle=False)","56a4e46e":"criterion = nn.BCELoss()","03baa18e":"def compute_spearmanr_ignore_nan(trues, preds):\n    rhos = []\n    for tcol, pcol in zip(np.transpose(trues), np.transpose(preds)):\n        rhos.append(spearmanr(tcol, pcol).correlation)\n    return np.nanmean(rhos)","62373aa1":"\"\"\"\ngkf = GroupKFold(n_splits=5).split(X=train.question_body, groups=train.question_body)\nfinal_predicts = []\nfor fold, (train_idx, valid_idx) in enumerate(gkf):   \n    if fold in [1]:\n        model = Model()\n        model.cuda()\n        optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)\n        train_set = TensorDataset(torch.LongTensor(np.array(data['question'])[train_idx]), \\\n                                  torch.LongTensor(np.array(data['answer'])[train_idx]), \\\n                                  torch.FloatTensor(np.array(data['label'])[train_idx])) \n        dev_set = TensorDataset(torch.LongTensor(np.array(data['question'])[valid_idx]), \\\n                                  torch.LongTensor(np.array(data['answer'])[valid_idx]), \\\n                                  torch.FloatTensor(np.array(data['label'])[valid_idx]))\n        train_loader = DataLoader(\n            train_set,\n            batch_size=6,\n            shuffle=True, drop_last=True)\n        dev_loader = DataLoader(\n            dev_set,\n            batch_size=min(len(dev_set), 1),\n            shuffle=False)\n        for epoch_idx in range(3):\n            for batch_idx, (input_question, input_answer, labels) in enumerate(train_loader):\n                model.train()\n                optimizer.zero_grad()\n                \n                input_question, input_answer = input_question.cuda(), input_answer.cuda()\n                labels = labels.cuda()\n                \n                input_question, input_answer = Variable(input_question, requires_grad=False), Variable(input_answer, requires_grad=False)\n                scores = model(input_question[:,0],\n                               input_question[:,2], \n                               input_question[:,1],\n                               input_answer[:,0], \n                               input_answer[:,2], \n                               input_answer[:,1])\n                \n                labels = Variable(labels, requires_grad=False)\n                labels = labels.transpose(0, 1)\n                scores = scores.transpose(0, 1)\n                losses = [criterion(score, label) for score, label in zip(scores, labels)]\n                loss = sum(losses)\n                loss.backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n                optimizer.step()\n                # scheduler.step()\n            print(\"train epoch: {} loss: {}\".format(epoch_idx, loss.item()\/30))\n            torch.save(model.state_dict(), '.\/model\/model_{}_{}.t7'.format(fold, epoch_idx))\n        \n        torch.cuda.empty_cache()\n        model.eval()\n        pre_list = []\n        tru_list = []\n        with torch.no_grad():\n            for input_question, input_answer, labels in dev_loader:\n                input_question, input_answer = input_question.cuda(), input_answer.cuda()\n                \n                input_question, input_answer = Variable(input_question, requires_grad=False), Variable(input_answer, requires_grad=False)\n                \n                scores = model(input_question[:,0],\n                               input_question[:,2], \n                               input_question[:,1],\n                               input_answer[:,0], \n                               input_answer[:,2], \n                               input_answer[:,1])\n                pre_list.append(scores)\n                tru_list.append(labels)\n        dev_predicts = [pre.squeeze(0).cpu().numpy().tolist() for pre in pre_list]\n        truthes = [t.squeeze(0).numpy().tolist() for t in tru_list]\n        dev_rho = compute_spearmanr_ignore_nan(dev_predicts, truthes)\n        print(\"dev score: \", dev_rho)\n\"\"\"","17aeaf06":"models = []\nfor fold in range(5):\n    model_path = f'..\/input\/google-qa-labeling-pretrained-v3\/model_{fold}_2.t7'\n    if os.path.exists(model_path):\n        print(f'model available for prediction at {model_path}')\n        model = Model_v1()\n        model.load_state_dict(torch.load(model_path))\n        models.append(model)\nfor fold in range(5):\n    model_path = f'..\/input\/google-qa-labeling-pretrained-v4\/model_{fold}_2.t7'\n    if os.path.exists(model_path):\n        print(f'model available for prediction at {model_path}')\n        model = Model_v2()\n        model.load_state_dict(torch.load(model_path))\n        models.append(model)","8f6626e4":"len(models)","c77d226f":"final_predicts = []\nfor model in models:\n    model = model.cuda()\n    model.eval()\n    test_predicts = []\n    with torch.no_grad():\n        for input_question, input_answer in test_loader:\n            print(input_answer.shape)\n            input_question, input_answer = input_question.cuda(), input_answer.cuda()\n                \n            input_question, input_answer = Variable(input_question, requires_grad=False), Variable(input_answer, requires_grad=False)\n                \n            scores = model(input_question[:,0],\n                           input_question[:,2], \n                           input_question[:,1],\n                           input_answer[:,0], \n                           input_answer[:,2], \n                           input_answer[:,1])\n            test_predicts.append(scores.reshape(scores.shape[-1]))\n    final_predicts.append(test_predicts)","aba579a9":"pres = np.average(final_predicts, axis=0)\ntest_output = [[p.item() for p in pre] for pre in pres]","e448ac8c":" output_cols = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","23d8b5f4":"output_values = np.transpose(test_output).tolist()\noutput_dict = {k: v for k, v in zip(output_cols, output_values)}\noutput_dict['qa_id'] = sample_submission['qa_id'].values.tolist()\noutput = pd.DataFrame.from_dict(output_dict)","89577f38":"order = ['qa_id', 'question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","e2f743c8":"output = output[order]","e568dabe":"output.head()","2e44d67a":"output.to_csv('submission.csv', index=False)","f7a99708":"## DATA","7ed963ef":"## RUN","d76dd344":"## MODEL","768e4be8":"## INFERENCE"}}