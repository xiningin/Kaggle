{"cell_type":{"543bfc86":"code","a22f588b":"code","1332fdfc":"code","93fb8381":"code","fd44b8c4":"code","d1c1f854":"code","fc919143":"code","3af12976":"code","ee30caed":"code","e8d84aba":"code","f95bdc82":"code","ce2e3b07":"code","dff7f170":"markdown","80daad56":"markdown","acf890f1":"markdown","834a9352":"markdown","c1ba8087":"markdown","5eb98326":"markdown","90aa2c67":"markdown","53ec8232":"markdown"},"source":{"543bfc86":"import numpy as np\nimport pandas as pd\nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom nltk import word_tokenize","a22f588b":"f = open(\"..\/input\/glove840b300dtxt\/glove.840B.300d.txt\", encoding=\"utf-8\")\nembeddings_index = {}\nfor line in f:\n    values = line.split()\n    word = \"\".join(values[:-300])   \n    coefs = np.asarray(values[-300:], dtype=\"float32\")\n    embeddings_index[word] = coefs\nf.close()\nprint(\"Found {} word vectors of glove.\".format(len(embeddings_index)))","1332fdfc":"train_orig = pd.read_csv(\"..\/input\/quora-question-pairs-data-cleaning\/train_orig.csv\")\ntrain_stop = pd.read_csv(\"..\/input\/quora-question-pairs-data-cleaning\/train_stop.csv\")\n\ntrain_orig.fillna(\"\", inplace = True)\ntrain_stop.fillna(\"\", inplace = True)\n\ntrain = pd.read_csv(\"..\/input\/quora-question-pairs-feature-extraction-1\/train.csv\")\ntrainlabel = pd.read_csv(\"..\/input\/quora-question-pairs-feature-extraction-1\/trainlabel.csv\")","93fb8381":"def get_word_vector(row):\n    wordlist1 = word_tokenize(row[\"question1\"])\n    wordlist2 = word_tokenize(row[\"question2\"])\n    \n    rarity = 0  # \u7528\u4e8e\u6807\u8bb0\u95ee\u9898\u5bf9\u662f\u5426\u542b\u6709\u975e\u5e38\u7f55\u89c1\u7684\u8bcd\u7684\u7279\u5f81\n    \n    embeddings_list1 = []\n    for string in wordlist1:\n        try:\n            embeddings_list1.append(embeddings_index[string])\n        except KeyError:\n            if string in wordlist2:  # \u5982\u679c\u4e24\u4e2a\u95ee\u9898\u5305\u542b\u8fd9\u4e2a\u8bcd\uff0c\u4ee4rarity=1\uff0c\u5426\u5219\u4e0d\u8fdb\u884c\u5904\u7406\n                rarity = 1\n            else:\n                pass          \n    \n    embeddings_list2 = []\n    for string in wordlist2:\n        try:\n            embeddings_list2.append(embeddings_index[string])\n        except KeyError:\n            if string in wordlist1:\n                rarity = 1\n            else:\n                pass  \n    \n    return pd.Series([embeddings_list1, embeddings_list2, rarity])","fd44b8c4":"vector_orig = train_orig.apply(get_word_vector, axis = 1)\nvector_orig.columns = [\"question1\", \"question2\", \"rarity\"]","d1c1f854":"def diff_word_vector(row):\n    mean1 = np.mean(np.array(row[\"question1\"]), axis = 0)\n    mean2 = np.mean(np.array(row[\"question2\"]), axis = 0)\n    diff = mean1 - mean2\n    L1 = np.sum(np.abs(diff))  # np.linalg.norm\u4e0d\u80fd\u5bf9\u7a7a\u7684\u6570\u7ec4\u8ba1\u7b971-\u8303\u6570\u548c2-\u8303\u6570\uff0c\u6240\u4ee5\u53ea\u80fd\u624b\u52a8\u8ba1\u7b97\n    L2 = np.sum(diff ** 2) ** 0.5\n    norm1 = np.sum(mean1 ** 2) ** 0.5\n    norm2 = np.sum(mean2 ** 2) ** 0.5\n    cos = np.sum(mean1 * mean2) \/ (norm1 * norm2)\n    return pd.Series([L1, L2, cos])","fc919143":"diff_vector_orig = vector_orig.apply(diff_word_vector, axis = 1)\nfeatures_vector_orig = pd.concat([diff_vector_orig, vector_orig[\"rarity\"]], axis = 1)\nfeatures_vector_orig.columns = [\"diff_word_vector_L1_orig\", \"diff_word_vector_L2_orig\", \n                                \"word_vector_cos_orig\", \"varity\"]\ntrain = pd.concat([train, features_vector_orig], axis = 1)\n\ndel vector_orig, diff_vector_orig, features_vector_orig","3af12976":"vector_stop = train_stop.apply(get_word_vector, axis = 1)\nvector_stop.columns = [\"question1\", \"question2\", \"rarity\"]\n\ndiff_vector_stop = vector_stop.apply(diff_word_vector, axis = 1)\ndiff_vector_stop.columns = [\"diff_word_vector_L1_stop\", \"diff_word_vector_L2_stop\", \n                            \"word_vector_cos_stop\"]\ntrain = pd.concat([train, diff_vector_stop], axis = 1)\n\ndel vector_stop, diff_vector_stop","ee30caed":"train.to_csv(\"train.csv\", index = False)\ntrainlabel.to_csv(\"trainlabel.csv\", index = False)\n\ndel train, trainlabel, train_orig, train_stop","e8d84aba":"test_orig = pd.read_csv(\"..\/input\/quora-question-pairs-data-cleaning\/test_orig.csv\")\ntest_orig.fillna(\"\", inplace = True)\n\nvector_orig = test_orig.apply(get_word_vector, axis = 1)\nvector_orig.columns = [\"question1\", \"question2\", \"rarity\"]\ndel test_orig\n\ndiff_vector_orig = vector_orig.apply(diff_word_vector, axis = 1)\nfeatures_vector_orig = pd.concat([diff_vector_orig, vector_orig[\"rarity\"]], axis = 1)\nfeatures_vector_orig.columns = [\"diff_word_vector_L1_orig\", \"diff_word_vector_L2_orig\", \n                                \"word_vector_cos_orig\", \"varity\"]\ndel vector_orig, diff_vector_orig","f95bdc82":"test_stop = pd.read_csv(\"..\/input\/quora-question-pairs-data-cleaning\/test_stop.csv\")\ntest_stop.fillna(\"\", inplace = True)\n\nvector_stop = test_stop.apply(get_word_vector, axis = 1)\nvector_stop.columns = [\"question1\", \"question2\", \"rarity\"]\ndel test_stop, embeddings_index\n\ndiff_vector_stop = vector_stop.apply(diff_word_vector, axis = 1)\ndiff_vector_stop.columns = [\"diff_word_vector_L1_stop\", \"diff_word_vector_L2_stop\", \n                            \"word_vector_cos_stop\"]\ndel vector_stop\n\ntest = pd.read_csv(\"..\/input\/quora-question-pairs-feature-extraction-1\/test.csv\")\ntest = pd.concat([test, features_vector_orig, diff_vector_stop], axis = 1)\ndel features_vector_orig, diff_vector_stop","ce2e3b07":"test.to_csv(\"test.csv\", index = False)","dff7f170":"\u5b9a\u4e49\u51fd\u6570get_word_vector\u5f97\u5230\u6bcf\u4e2a\u95ee\u9898\u5305\u542b\u7684\u6240\u6709\u8bcd\u5411\u91cf\u3002\u6d4b\u8bd5\u96c6\u6216\u6570\u636e\u96c6\u91cc\u53ef\u80fd\u6709\u4e00\u4e9b\u975e\u5e38\u7f55\u89c1\u7684\u5355\u8bcd\uff0c\u5373\u4fbfGloVe\u7684\u8bad\u7ec3\u6570\u636e\u91cf\u5df2\u7ecf\u8fbe\u5230\u4e8660B\u7ea7\u522b\u4e5f\u672a\u80fd\u8986\u76d6\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u5224\u65ad\u4e24\u4e2a\u95ee\u9898\u662f\u5426\u90fd\u5305\u542b\u4e86\u8fd9\u4e2a\u8bcd\uff0c\u5982\u679c\u662f\u5219\u6709\u53ef\u80fd\u542b\u6709\u8f83\u591a\u4fe1\u606f\uff0c\u7528varity\u8bb0\u5f55\u4e0b\u6765\uff0c\u5426\u5219\u5ffd\u7565\u3002","80daad56":"### \u6d4b\u8bd5\u96c6","acf890f1":"# 2.2 \u7279\u5f81\u63d0\u53d6\u4e8c\n\n## GloVe\u76f8\u4f3c\u5ea6\n\nGloVe\u76f8\u4f3c\u5ea6\u662f\u672c\u8282\u8981\u63d0\u53d6\u7684\u552f\u4e00\u4e00\u4e2a\u7279\u5f81\u3002\u6ca1\u6709\u57282.1\u8282\u4e2d\u5b8c\u6210\u6b64\u9879\u5de5\u4f5c\uff0c\u662f\u56e0\u4e3a\u5bfc\u5165\u8bad\u7ec3\u597d\u7684GloVe\u6a21\u578b\u540e\uff0c\u5185\u5b58\u903c\u8fd1Kernel\u768416GB\u4e0a\u9650\uff0c\u56e0\u6b64\u4e0d\u5f97\u4e0d\u5f00\u8bbe\u4e00\u4e2a\u65b0\u7684Kernel\u4e13\u95e8\u63d0\u53d6GloVe\u76f8\u5173\u7684\u7279\u5f81\u3002\n\n**GloVe\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f**\n\n- \u6839\u636e\u8bed\u6599\u5e93\u6784\u5efa\u5171\u73b0\u77e9\u9635$X$\uff0c\u77e9\u9635\u4e2d\u7684\u5143\u7d20$X_{ij}$\u4ee3\u8868\u5355\u8bcd$i$\u548c\u4e0a\u4e0b\u6587\u5355\u8bcd$j$\u5728\u7279\u5b9a\u5927\u5c0f\u7684\u4e0a\u4e0b\u6587\u7a97\u53e3\u5185\u5171\u540c\u51fa\u73b0\u7684\u6b21\u6570\u3002GloVe\u5bf9\u4e0a\u4e0b\u6587\u7a97\u53e3\u5185\u4e0d\u540c\u8ddd\u79bb\u7684\u5355\u8bcd\u8d4b\u4e88\u4e0d\u540c\u7684\u6743\u91cd\uff0c\u8870\u51cf\u51fd\u6570\u4e3a$decay = 1\/d$\uff0c\u8ddd\u79bb\u8fdc\u7684\u4e24\u4e2a\u5355\u8bcd\u5360\u603b\u8ba1\u6570\u7684\u6743\u91cd\u66f4\u5c0f\u3002\n\n- \u6784\u5efa\u8bcd\u5411\u91cf\u548c\u5171\u73b0\u77e9\u9635\u7684\u8fd1\u4f3c\u5173\u7cfb\uff1a\n\n<center>$w_{i}^{T}\\overset{\\sim}w_{j}+b_{i}+\\overset{\\sim}b_{j}=log(X_{ij})$<\/center>\n\n&ensp;&ensp;&ensp;\u5176\u4e2d\uff0c$w_{i}^{T}$\u548c$\\overset{\\sim}w_{j}$\u662f\u8981\u6700\u7ec8\u6c42\u89e3\u7684\u8bcd\u5411\u91cf\uff0c\u800c$b_{i}$\u548c$\\overset{\\sim}b_{j}$\u5206\u522b\u662f\u4e24\u4e2a\u8bcd\u5411\u91cf\u7684\u504f\u7f6e\u9879\u3002\n\n- \u6784\u9020\u635f\u5931\u51fd\u6570\uff1a\n\n<center>$J=\\sum_{i,j=1}^{V}f(X_{ij})(w_{i}^{T}\\overset{\\sim}w_{j}+b_{i}+\\overset{\\sim}b_{j}-log(X_{ij}))^{2}$<\/center>\n\n&ensp;&ensp;&ensp;\u4e0a\u9762\u7684\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u7406\u89e3\u4e3a\u7531\u5e73\u65b9\u635f\u5931\u51fd\u6570\u52a0\u4e0a\u4e00\u4e2a\u6743\u91cd\u51fd\u6570$f(X_{ij})$\u5f97\u5230\uff0c$f(X_{ij})$\u53ef\u53d6\u4e3a\n\n$$f(x)=\n\\begin{cases}\n(x\/x_{max})^{\\alpha}& x<x_{max}\\\\\n1& otherwise\n\\end{cases}$$\n\n&ensp;&ensp;&ensp;\u5176\u4e2d\uff0c$\\alpha$\u7684\u53d6\u503c\u90fd\u662f0.75\uff0c\u800c$x_{max}$\u53d6\u503c\u90fd\u662f100\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8d8a\u7ecf\u5e38\u4e00\u8d77\u51fa\u73b0\u7684\u5355\u8bcd\u6743\u91cd\u8d8a\u5927\uff0c\u800c\u5f53\u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u4e4b\u540e\u53c8\u4e0d\u518d\u589e\u52a0\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4ece\u6765\u6ca1\u6709\u4e00\u8d77\u51fa\u73b0\u8fc7\u7684\u5355\u8bcd\uff0c\u4e5f\u5c31\u662f$X_{ij}=0$\u65f6\uff0c\u6709$f(X_{if})$\u4e5f\u4e3a0\u3002\n\n- GloVe\u7684\u5b66\u4e60\u540c\u6837\u57fa\u4e8e\u68af\u5ea6\u4e0b\u964d\u529e\u6cd5\n\n**\u4e3a\u4ec0\u4e48\u4e0d\u9002\u7528Word2Vec\uff1f**\n\n\u4f7f\u7528Word2Vec\u6709\u4e24\u79cd\u529e\u6cd5\uff0c\u4e00\u79cd\u662f\u81ea\u5df1\u5bf9\u8bad\u7ec3\u96c6\u5efa\u7acb\u8bed\u6599\u5e93\uff0c\u7136\u540e\u4f7f\u7528Gensim\u7684Word2Vec\u51fd\u6570\u5b9e\u73b0\uff0c\u7f3a\u70b9\u662f\u8bed\u6599\u5e93\u592a\u5c0f\uff0c\u53c2\u6570\u8bbe\u5b9a\u4e5f\u7f3a\u4e4f\u6307\u5bfc\uff0c\u53e6\u4e00\u79cd\u529e\u6cd5\u662f\u4e0b\u8f7dGoogle\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u4f46\u5948\u4f55\u76f8\u5173\u9875\u9762\u6700\u8fd1\u4e24\u5929\u597d\u50cf\u5d29\u6e83\u4e86\uff1f\u4e8e\u662f\u672c\u6587\u8f6c\u5411\u4e86GloVe\u3002\n\nKaggle\u7684DataSet\u4e2d\u521a\u597d\u6709\u672c\u6765\u9700\u8981\u5728GloVe\u5b98\u7f51\u4e0a\u4e0b\u8f7d\u7684\u6587\u672c\u6587\u4ef6\uff0c\u5bfc\u5165Kernel\u540e\u5b58\u653e\u5728embeddings_index\u4e2d\uff0c\u5b83\u5305\u542b\u4e86\u7edd\u5927\u591a\u6570\u5355\u8bcd\u5230\u4ed6\u4eec\u7684\u8bcd\u5411\u91cf\u7684\u6620\u5c04\u3002","834a9352":"\u5bf9\u53bb\u9664\u505c\u7528\u8bcd\u524d\u548c\u53bb\u9664\u505c\u7528\u8bcd\u540e\u4e24\u4e2a\u8bad\u7ec3\u96c6\u90fd\u8ba1\u7b97GloVe\u7684\u76f8\u5173\u7279\u5f81\uff0c\u9996\u5148\u5904\u7406train_orig\u3002","c1ba8087":"**\u901a\u8fc7\u8bcd\u5411\u91cf\u7684\u5e73\u5747\u503c\u6765\u8861\u91cf\u53e5\u5b50\u7684\u8bed\u4e49\uff0c\u6784\u5efa1-\u8303\u6570\u548c2-\u8303\u6570\u4ee5\u53ca\u5939\u89d2\u4f59\u5f26\u503c\u4e09\u4e2a\u7279\u5f81\u3002**\u5b9a\u4e49\u51fd\u6570diff_word_vector\u5b8c\u6210\u8ba1\u7b97\u3002","5eb98326":"\u4ee5\u540c\u6837\u7684\u65b9\u6cd5\u5bf9\u53bb\u9664\u505c\u7528\u8bcd\u540e\u7684\u8bad\u7ec3\u96c6\u8ba1\u7b97\u76f8\u5173\u7279\u5f81\u3002","90aa2c67":"### \u8bad\u7ec3\u96c6","53ec8232":"\u7b2c\u4e09\u90e8\u5206\u6a21\u578b\u8bad\u7ec3\u89c1[Quora Question Pairs: XGBoost](https:\/\/www.kaggle.com\/benjaminkz\/quora-question-pairs-xgboost)\u3002"}}