{"cell_type":{"700615fd":"code","4c028e8b":"code","c6e6f149":"code","de33372a":"code","3be9a1ec":"code","c4322831":"code","30199d72":"code","65c85db0":"code","367207f1":"code","00c9a386":"code","80c3fdaf":"code","70549a45":"code","2a67a718":"code","4959c763":"code","d98d01e1":"code","10db53b7":"code","4775d915":"code","8e64e2ff":"code","d9e445ad":"code","218d39d1":"code","f4ea9bf4":"code","d6e4f6ec":"code","21dac802":"code","21b5d66b":"code","46bcdb46":"code","4eba282c":"code","26cc4deb":"code","d8227cf3":"code","4ef7bdc0":"code","e7b82e53":"code","ae24861b":"code","6421f9bb":"code","0338d5dc":"code","0d8f1cd4":"code","5d62c5e3":"code","cb32cbd7":"code","9dc02b88":"code","c7aa59f9":"code","b6843c40":"code","df57d6ef":"code","cae39672":"code","c8a35466":"code","90fd2c50":"code","3da76ae7":"code","9a270627":"code","b6e8858e":"code","2f816e76":"code","68f5dacc":"code","57398159":"code","692a926c":"code","61d60bcf":"code","f81fa505":"code","2dafef9b":"code","c26a4b94":"code","007e896b":"code","c942669d":"code","1ba03ab8":"code","43743a11":"code","fc5e159c":"code","9cbd0803":"code","dd09da8e":"markdown","5ac71863":"markdown","56e9a069":"markdown","07483238":"markdown","9b8daf41":"markdown","45734fda":"markdown","e50423b5":"markdown","a35f36a4":"markdown","9064a256":"markdown","c9ec6f06":"markdown","c1971101":"markdown","6efc6657":"markdown","9ce383cc":"markdown","2ea538f4":"markdown","08413709":"markdown","cb913f6b":"markdown","7749c166":"markdown","40380c05":"markdown","69429d62":"markdown","8de4b0c2":"markdown","8a3171d1":"markdown","bb3f72b8":"markdown","4f94233d":"markdown","9f4f989d":"markdown"},"source":{"700615fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4c028e8b":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')","c6e6f149":"data.info()","de33372a":"data.corr()","3be9a1ec":"#correlation map\nf,ax = plt.subplots(figsize=(10,10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5,ax=ax)\nplt.show()","c4322831":"data.head(15)","30199d72":"data.columns ","65c85db0":"#Line plot using\ndata.Height.plot(kind = 'line', color = 'g',label = 'Height',linewidth=1,alpha = 0.5,grid = True,linestyle = '-')\ndata.Weight.plot(color='r', label='Weight', linewidth=1, alpha=0.5, grid=True, linestyle =':')\nplt.legend(loc='lower left') #legend = puts to label in plot\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Weight-Heigt Line Plot')\nplt.show()","367207f1":"#Scatter plot using\ndata.plot(kind='scatter',x='Height',y='Weight',color='b',alpha=0.3)\nplt.xlabel('Height')\nplt.ylabel('Weight')\nplt.title('Height-Weight Scatter Plot')     \nplt.show()","00c9a386":"#Histogram plot using\ndata.Height.plot(kind = 'hist',bins = 25,figsize = (8,8),color='r')\nplt.title('Height Histogram Plot')\nplt.show()","80c3fdaf":"#create dictionary\ndictionary = {'name':'Mertcan','name2':'Sena'} #Keys Names should not same.\nprint(dictionary.keys())\nprint(dictionary.values())","70549a45":"dictionary['name']='Mertcan2' #update keys\nprint(dictionary)\ndictionary['name3']='Canmert' #add new entry\nprint(dictionary)\ndel dictionary['name3'] #remove entry\nprint(dictionary)\nprint('name' in dictionary) #check in \ndictionary.clear() #remove all entry in dictionary\nprint(dictionary)","2a67a718":"data=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')","4959c763":"x=data['Height']>185 #comparison operator\nvalues=data[x]\nvalues.head(15)","d98d01e1":"x=data[np.logical_and(data['Weight']>90, data['Height']>180 )] #logical\nx.head(10)","10db53b7":"y=data[(data['Weight']>90) & (data['Height']>180)] #boolean operator\ny.head(10)","4775d915":"#while loop\ni=0\nwhile i != 8:\n    print('i is: ',i)\n    i+=1\nprint(i,'is equal to 8')","8e64e2ff":"#for loop\nlist1=[1,2,3,5,4,8]\nfor i in list1:\n    print(i)","d9e445ad":"for index,values in enumerate(list1):\n    print(index,'-->',values)\n    ","218d39d1":"dictionary = {'name':'Mertcan','name2':'Sena'}\nfor key,values in dictionary.items():\n    print(key,'-->',values)","f4ea9bf4":"for index,values in data[['Height']][0:1].iterrows():\n    print(index,'-->',values)","d6e4f6ec":"def tuble():\n    t=(1,2,3)\n    return t\na,b,c=tuble()\nprint(b)","21dac802":"x=3 #global scope\ndef f():\n    x=5\n    return x #local scope\nprint(x)\nprint(f())\n\ndef f(x):\n    x=x+5\n    return x\nprint(f(7))","21b5d66b":"def square():\n    def add():\n        x=3\n        y=5\n        z=x+y\n        return z\n    return add()**2\nprint(square())","46bcdb46":"def f(a,b=1,c=1):\n    y=a+b+c\n    return y\nprint(f(5))# if not writing b and c,inside function is valid.\nprint(f(5,2,3)) #if writing value inside to f of b and c, b and c changed\n","4eba282c":"#flexible --> *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint('-------')\nf(1,2,3,4,5)\n\n#flexible --> **kwargs that is dictionary\ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print(key,':',value)\nf(name1='Mertcan',name2='Sena')","26cc4deb":"square=lambda x: x**2\nprint(square(5))\ntotal=lambda x,y: x+y+y\nprint(total(5,2))","d8227cf3":"number_list=[1,2,3]\ny=map(lambda x:x**2,number_list)\nprint(list(y))","4ef7bdc0":"num1=[1,2,3]\nnum2=[i+1 for i in num1]\nprint(list(num2))","e7b82e53":"#example2\nnum1=[10,20,30]\nnum2=[i**2 if i == 30 else i-10 if i < 20 else i+5 for i in num1]\nprint(num2)\n\n#example3\nnum3=[5,15,25,35,45]\nnum4=[i**2 if i==5 else i+5 if i<20 else i-10 for i in num3]\nprint(num4)","ae24861b":"#example with data\n\n#threshold=sum(data.Height)\/len(data.Height) -->sum function is not working. I don't know why because of that i used to syntax1\nthreshold=180 #syntax1\ndata['heigh_level']=['high' if i > threshold else 'low' for i in data.Height]\ndata.loc[:10,['heigh_level','Heigh']] #I don't know, Why It didn't take heigh values? Please can you help me?","6421f9bb":"data.shape","0338d5dc":"data.columns","0d8f1cd4":"data.info","5d62c5e3":"print(data.Name.value_counts(dropna=False)) #Dropna--> not including nan\n#value_counts--> how many people with the same name? ","cb32cbd7":"data.describe() #Returns Quantile values ","9dc02b88":"data2=data.head(200)\ndata2.boxplot(column='Height',by='Year')","c7aa59f9":"data_new=data.head(10)\ndata_new","b6843c40":"melt1=pd.melt(frame=data_new,id_vars='Name',value_vars=['Height','Weight']) \nmelt1","df57d6ef":"melt1.pivot(index = 'Name', columns = 'variable',values='value')\n#I don't solving this error. When I searching to find this error cause from same values to valueError. Can you help me please?","cae39672":"data1=data.head(10)\ndata2=data.tail(5)\nconca_data_r=pd.concat([data1,data2],axis=0,ignore_index=True)\nconca_data_r","c8a35466":"data1=data['Height'].head(10)\ndata2=data['Weight'].head(10)\nconca_data_c=pd.concat([data1,data2],axis=1)\nconca_data_c\n","90fd2c50":"data.dtypes","3da76ae7":"data['Sport']= data['Sport'].astype('category')\ndata.dtypes","9a270627":"data.Sport.value_counts(dropna=False)","b6e8858e":"data1=data\ndata1.Weight.dropna(inplace=True)\ndata\n","2f816e76":"assert data.Weight.notnull().all()","68f5dacc":"data.Weight.fillna('empty',inplace=True)","57398159":"assert data.Weight.notnull().all()","692a926c":"country=[\"Turkey\",\"Spain\"]\npopulation=[\"9\",\"11\"]\nlist_title=[\"Country\",\"Population\"]\nlist_column=[country,population]\nzipped=list(zip(list_title,list_column))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","61d60bcf":"df[\"Capital\"]=[\"Ankara\",\"Madrid\"]\ndf","f81fa505":"#plot\ndata1=data.loc[:,['Age','Height','Weight']]\ndata1.plot()\nplt.show()","2dafef9b":"data1.plot(subplots=True)\nplt.show()","c26a4b94":"#scatter\ndata1.plot(kind=\"scatter\",x=\"Height\",y=\"Weight\")\nplt.show()","007e896b":"#histogram\ndata1.plot(kind=\"hist\", y=\"Age\" , bins=10 , range=(0,80) , normed=True)\nplt.show()","c942669d":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind=\"hist\", y=\"Age\" , bins=10 , range=(0,80) , normed=True, ax= axes[0])\ndata1.plot(kind=\"hist\", y=\"Age\" , bins=10 , range=(0,80) , normed=True, ax= axes[1], cumulative=True)\nplt.show()","1ba03ab8":"time_list=[\"1998-02-15\",\"1998-01-15\"]\nprint(type(time_list))\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","43743a11":"#close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndata2=data.head()\ndate_list=[\"1998-01-15\",\"1998-02-15\",\"1993-07-17\",\"1993-08-02\",\"1993-08-05\"]\ndatetime_object=pd.to_datetime(date_list)\ndata2[\"Date\"]=datetime_object\n#let's make index to date columns\ndata2=data2.set_index(\"Date\")\ndata2","fc5e159c":"print(data2.loc[\"1998-02-15\"])\nprint(data2.loc[\"1998-02-15\":\"1993-08-05\"]) #why did it say to \"Empty DataFrame\"? I don't understand.","9cbd0803":"data2.resample(\"M\").mean # By Year","dd09da8e":"Pivoting Data","5ac71863":"**Pandas**","56e9a069":"Anonymous Function","07483238":"**USER DEFINED FUNCTION**","9b8daf41":"Indexing Pandas Time Series","45734fda":"**Logical,comparison and boolean operators using in pandas library**\n\nComparison operator: ==, <, >, <=  \nBoolean operators: and, or ,not ","e50423b5":"Visual Exploratory Data Analysis","a35f36a4":"DICTIONARY","9064a256":"Concatenating Data","c9ec6f06":"NESTED FUNCTION\n-Function inside function","c1971101":"SCOPE","6efc6657":"Visual exploratory","9ce383cc":"Resampling pandas time series","2ea538f4":"Missing Data and Testing with assert","08413709":"Cleaning Data","cb913f6b":"Building Dataframes from scratch","7749c166":"Exploratory Data Analysis","40380c05":"List Comprehension","69429d62":"Lambda Function","8de4b0c2":"Pandas Foundation","8a3171d1":"Default and Flexible arguments","bb3f72b8":"WHILE and FOR LOOPS","4f94233d":"Data Type","9f4f989d":"Tidy Data"}}