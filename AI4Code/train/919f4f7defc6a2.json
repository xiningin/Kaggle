{"cell_type":{"bbb588a3":"code","d2221559":"code","b640b830":"code","24e94e4d":"code","50c32ef8":"code","1c3b3b85":"code","ce131f15":"code","44350034":"code","1fbfacc1":"code","51a1955e":"code","6e1f4fd6":"code","bb34ac7d":"code","1c924425":"code","4076ba01":"code","3b6e0e17":"code","61c93c7f":"code","818bac00":"code","30c68bdd":"code","2bb60019":"code","4f6373ea":"code","d1fa0188":"code","6d31e190":"code","96b59d18":"code","5e480808":"code","aa6f1138":"code","af419e48":"code","c79d91fb":"code","46d22d34":"code","57be6a60":"code","41371cde":"code","c873b3fc":"code","0977fb2b":"code","b93bc126":"markdown","57e9b638":"markdown","4f79540e":"markdown","47219923":"markdown","cf0b5a7b":"markdown","c1641875":"markdown","7835c198":"markdown","546e6dfa":"markdown","e915a9df":"markdown","493196a2":"markdown","706e1905":"markdown","9321727a":"markdown","a782afc1":"markdown","dece0654":"markdown","96654c48":"markdown","f03d28f4":"markdown","78119414":"markdown","25e8af10":"markdown","b22da86d":"markdown","5590cba0":"markdown"},"source":{"bbb588a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2221559":"train = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntrain.head()","b640b830":"test = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\ntest.head()","24e94e4d":"print(\"Train data shape : rows :-{0} , columns:- {1}\".format(train.shape[0], train.shape[1]))","50c32ef8":"train.info()","1c3b3b85":"print('Number of empty records :', train.isnull().any().sum())","ce131f15":"path = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/'\n\nfor i in train['image_id'][:5]:\n    print(i)","44350034":"from PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","1fbfacc1":"image_index = 5\nfull_path = path + train['image_id'][image_index] + '.jpg'\nimg = Image.open(full_path)\nplt.imshow(img)\n\nprint('Image default size', img.size)\n","51a1955e":"train_healthy = train[train['healthy'] == 1][:5]\n\nfig, axs = plt.subplots(1,5, figsize=(25,6))\n\nfor i, j in enumerate(train_healthy['image_id']):\n    axs[i].set_axis_off()\n    print(path + j + '.jpg')\n    full_path = path + j + '.jpg'\n    img = Image.open(full_path)\n    axs[i].imshow(img)\n    axs[i].set_title('Healthy')\nplt.show()","6e1f4fd6":"train_healthy = train[train['scab'] == 1][:5]\n\nfig, axs = plt.subplots(1,5, figsize=(25,6))\n\nfor i, j in enumerate(train_healthy['image_id']):\n    axs[i].set_axis_off()\n    print(path + j + '.jpg')\n    full_path = path + j + '.jpg'\n    img = Image.open(full_path)\n    axs[i].imshow(img)\n    axs[i].set_title('scab')\n# plt.show()","bb34ac7d":"train_healthy = train[train['rust'] == 1][:5]\n\nfig, axs = plt.subplots(1,5, figsize=(25,6))\n\nfor i, j in enumerate(train_healthy['image_id']):\n    axs[i].set_axis_off()\n    print(path + j + '.jpg')\n    full_path = path + j + '.jpg'\n    img = Image.open(full_path)\n    axs[i].imshow(img)\n    axs[i].set_title('rust')\nplt.show()","1c924425":"train_healthy = train[train['multiple_diseases'] == 1][:5]\n\nfig, axs = plt.subplots(1,5, figsize=(25,6))\n\nfor i, j in enumerate(train_healthy['image_id']):\n    axs[i].set_axis_off()\n    print(path + j + '.jpg')\n    full_path = path + j + '.jpg'\n    img = Image.open(full_path)\n    axs[i].imshow(img)\n    axs[i].set_title('multiple_diseases')\nplt.show()","4076ba01":"train.shape","3b6e0e17":"train.head()","61c93c7f":"data = train[['healthy', 'multiple_diseases', 'rust', 'scab']].sum(axis=0)\ndata.plot(kind='bar')\nplt.title('Frequency count')\n","818bac00":"## pie chart","30c68bdd":"colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\n\ndata.plot(kind='pie', colors=colors, title='Data with pie chart', figsize=(10,10)\n)\n","2bb60019":"from keras.preprocessing import image \nimport numpy as np","4f6373ea":"img_size  = 224 # image size during training ","d1fa0188":"load_features = []\n\nfor i in train['image_id']:\n    full_path = path + i + '.jpg'\n    img = image.load_img(full_path, target_size=(img_size,img_size,3), color_mode = \"rgb\")\n    img = image.img_to_array(img)\n    load_features.append(img)","6d31e190":"X = np.asarray(load_features)","96b59d18":"print('Shape of features:',X.shape)","5e480808":"train.head()\ny = train.iloc[:, 1:]\ny = y.to_numpy()\n\ny.shape","aa6f1138":"y[:5]","af419e48":"y.sum(axis=0)","c79d91fb":"from sklearn.model_selection import train_test_split\nx_train ,x_test, y_train, y_test = train_test_split(X, y , test_size=0.25, random_state=42)","46d22d34":"print('x_train: ', x_train.shape)\nprint('y_train: ', y_train.shape)\nprint('x_test: ', x_test.shape)\nprint('y_test: ', y_test.shape)","57be6a60":"x_train_final = x_train \/255\nx_train_final.shape","41371cde":"x_test_final = x_test \/255\nx_test_final.shape","c873b3fc":"y_train_final = y_train\ny_train_final.shape","0977fb2b":"y_test_final = y_test\ny_test_final.shape","b93bc126":"## Sample images","57e9b638":"# Exploratory Data Analysis","4f79540e":"## Y train","47219923":"## Standerdization","cf0b5a7b":"## Train shape","c1641875":"## Scab Images","7835c198":"## Distribution","546e6dfa":"## Rust Images","e915a9df":"## Y test","493196a2":" ## Multiple Diseases Images","706e1905":"## X test final","9321727a":"* # Data preprocessing","a782afc1":"## Check for any empty records ","dece0654":"Note: Found that dataset is imbalance","96654c48":"## Test data","f03d28f4":"##  Healthy Images","78119414":"## Features","25e8af10":"## Labels data","b22da86d":"## Model evaluation","5590cba0":"## Train data"}}