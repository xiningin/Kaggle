{"cell_type":{"52496cfc":"code","a38395ac":"code","9c51f4b1":"code","2dd9328f":"code","b5f41ebc":"code","3c29a748":"code","37c2d468":"code","5adee246":"code","2a0947a2":"code","6ece86a1":"code","4e5f9969":"code","b77d0a6b":"code","58dde004":"code","9e56cdcf":"code","cd6884a0":"code","ff218f5c":"code","7a0906e6":"code","81979d2f":"code","0e991d15":"code","e95025ca":"code","328b55d1":"code","eadacd63":"code","8dc42ebf":"code","d3abf825":"code","de0bdbf5":"code","afc44616":"code","47975538":"code","4bace716":"code","fe1960cc":"code","de7df094":"code","2de78b5f":"code","51c44be8":"code","1b19f84c":"code","5e0ad6e0":"code","441daece":"code","7ef1f383":"code","5b1afffa":"code","7ea341ea":"code","e779b9e5":"code","3d5e655f":"code","0a58a746":"code","b5738b82":"code","800cf480":"code","d28f2213":"code","7f2651bc":"code","48073098":"markdown","f3f0a6b7":"markdown","2b5a2fee":"markdown","74778ce0":"markdown","4ad7cf6c":"markdown","8de8aaf7":"markdown","3f316d9d":"markdown","b5bacab5":"markdown","db20191f":"markdown","11a8b59f":"markdown","2dbf65dd":"markdown","1624e0a7":"markdown","5c75bcce":"markdown","8761cfde":"markdown","bc64b3d4":"markdown"},"source":{"52496cfc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a38395ac":"import pandas as pd\nimport geopandas as gpd\nimport scipy.stats as ss\nimport matplotlib.pyplot as plt","9c51f4b1":"data_df = pd.read_csv(\"\/kaggle\/input\/gasoline-prices-in-italy-20211201\/gasoline.csv\")","2dd9328f":"regions = gpd.read_file(\"\/kaggle\/input\/gasoline-prices-in-italy-20211201\/Reg01012021_g_WGS84.shp\")\n# Convert crs to EPSG:4326\nregions.to_crs(crs=\"EPSG:4326\", inplace=True)","b5f41ebc":"print(\"\"\"There are {0} data points from {1} gas stations.\nPrices range from {2} to {3} with a Standard Deviation of {4}.\nNewest data has been updated on {5}, while oldest is from {6}.\"\"\".format(data_df.shape[0], data_df.pump_id.nunique(), data_df.price.min(),\n                                                                        data_df.price.max(), data_df.price.std(), data_df.last_update.max(),\n                                                                        data_df.last_update.min()))","3c29a748":"data_df.tail()","37c2d468":"data_df.hist(column=[\"days_last_update\", \"price\"], bins=20, density=True, cumulative=True, figsize=(14, 6))","5adee246":"data_df.gasoline_type.value_counts().head(10)","2a0947a2":"data_df.pump_type.value_counts()","6ece86a1":"data_df.isna().sum()","4e5f9969":"# Clean data older than 60 days\ndata_df = data_df[data_df[\"days_last_update\"] <= 60]","b77d0a6b":"# Remove data with no latitude or longitude information\ndata_df.dropna(subset=[\"lat\", \"lon\"], inplace=True)","58dde004":"# Relabel type of gas station location\ndata_df[\"pump_type\"] = data_df[\"pump_type\"].map({\"Autostradale\": \"toll_motorway\", \"Strada Statale\": \"highway\", \"Altro\": \"other\"})","9e56cdcf":"# Separate data by fuel type and relabel\ngasoline_df = data_df.loc[data_df[\"gasoline_type\"] == \"Benzina\"].copy()\ngasoline_df[\"gasoline_type\"] = \"gasoline\"\ndiesel_df = data_df.loc[data_df[\"gasoline_type\"] == \"Gasolio\"].copy()\ndiesel_df[\"gasoline_type\"] = \"diesel\"\nmethane_df = data_df.loc[data_df[\"gasoline_type\"] == \"Metano\"].copy()\nmethane_df[\"gasoline_type\"] = \"methane\"\nlpg_df = data_df.loc[data_df[\"gasoline_type\"] == \"GPL\"].copy()\nlpg_df[\"gasoline_type\"] = \"lpg\"","cd6884a0":"# Function to remove prices below mean minus 3 stdev\ndef clean_low_prices(df):\n    mean_price = df.price.mean()\n    stdev = df.price.std()\n    price_cutoff = mean_price - (3 * stdev)\n    df = df[df[\"price\"] >= price_cutoff]\n    return df","ff218f5c":"# Cleaning suspect low prices\ngasoline_df = clean_low_prices(gasoline_df)\ndiesel_df = clean_low_prices(diesel_df)\nmethane_df = clean_low_prices(methane_df)\nlpg_df = clean_low_prices(lpg_df)","7a0906e6":"# Formula to test equality of price mean and likeliness of price distribution across types of gas station\ndef test_mean_and_distribution_pump_type(name, df):\n    print(\">> {}\".format(name))\n    print(\"T-Test on price mean equality\")\n    print(\"other and highway\")\n    print(\"{}\".format(ss.ttest_ind(df[df[\"pump_type\"] == \"other\"].price, df[df[\"pump_type\"] == \"highway\"].price, equal_var=False)))\n    print(\"other and toll_motorway\")\n    print(\"{}\".format(ss.ttest_ind(df[df[\"pump_type\"] == \"other\"].price, df[df[\"pump_type\"] == \"toll_motorway\"].price, equal_var=False)))\n    print(\"highway and toll_motorway\")\n    print(\"{}\".format(ss.ttest_ind(df[df[\"pump_type\"] == \"highway\"].price, df[df[\"pump_type\"] == \"toll_motorway\"].price, equal_var=False)))\n    print(\"\\nKolmogorov-Smirnov test on distributions\")\n    print(\"other and highway\")\n    print(\"{}\".format(ss.ks_2samp(df[df[\"pump_type\"] == \"other\"].price, df[df[\"pump_type\"] == \"highway\"].price)))\n    print(\"other and toll_motorway\")\n    print(\"{}\".format(ss.ks_2samp(df[df[\"pump_type\"] == \"other\"].price, df[df[\"pump_type\"] == \"toll_motorway\"].price)))\n    print(\"highway and toll_motorway\")\n    print(\"{}\\n<<\\n\\n\".format(ss.ks_2samp(df[df[\"pump_type\"] == \"highway\"].price, df[df[\"pump_type\"] == \"toll_motorway\"].price)))\n","81979d2f":"# Formula to test equality of mean and distribution across served and self service pumps\ndef test_mean_and_distribution_self(name, df):\n    print(\">> {}\".format(name))\n    print(\"T-Test on price mean equality\")\n    print(\"Self service and served\")\n    print(\"{}\".format(ss.ttest_ind(df[df[\"self_service\"] == 0].price, df[df[\"self_service\"] == 1].price, equal_var=False)))\n    print(\"\\nKolmogorov-Smirnov test on distributions\")\n    print(\"Self service and served\")\n    print(\"{}\".format(ss.ks_2samp(df[df[\"self_service\"] == 0].price, df[df[\"self_service\"] == 1].price)))\n    print(\"<<\\n\\n\")","0e991d15":"for name, df in zip([\"Gasoline\", \"Diesel\", \"Methane\", \"LPG\"],[gasoline_df, diesel_df, methane_df, lpg_df]):\n    test_mean_and_distribution_pump_type(name, df)","e95025ca":"# Testing for gasoline only, for other fuels the process is the same\nfor name, df in zip([\"Gasoline Toll Motorway\", \"Gasoline Highway\", \"Gasoline Other\"],\n                    [gasoline_df[gasoline_df[\"pump_type\"] == \"toll_motorway\"],\n                     gasoline_df[gasoline_df[\"pump_type\"] == \"highway\"],\n                     gasoline_df[gasoline_df[\"pump_type\"] == \"other\"],]):\n    test_mean_and_distribution_self(name, df)","328b55d1":"# Function to transform dataframe with lon-lat columns in GeoDataFrame\n# Using EPSG 4326 to map lon-lat data\ndef df_to_gdf(df):\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.lon, df.lat, crs=\"EPSG:4326\"))\n    return gdf","eadacd63":"# Transform into GeoDataFrame\ngasoline_gdf = df_to_gdf(gasoline_df)\ndiesel_gdf = df_to_gdf(diesel_df)\nmethane_gdf = df_to_gdf(methane_df)\nlpg_gdf = df_to_gdf(lpg_df)","8dc42ebf":"lpg_served_gdf = lpg_gdf[lpg_gdf[\"self_service\"]==0].copy()","d3abf825":"ax = regions.plot(figsize=(10,10), color='none', edgecolor='gainsboro', zorder=3)\nlpg_served_gdf.plot(color='black', markersize=1,ax=ax)","de0bdbf5":"# Get Region attribute in the price dataframe via spatial join\nlpg_served_gdf = lpg_served_gdf.sjoin(regions, how=\"left\")","afc44616":"# Calculate average regional prices accotding to gas station type (toll_motorway, highway, other)\nlpg_toll_motorway_regional_prices_gdf = lpg_served_gdf[lpg_served_gdf[\"pump_type\"] == \"toll_motorway\"].groupby(\"COD_REG\")[\"price\"].mean()\nlpg_highway_regional_prices_gdf = lpg_served_gdf[lpg_served_gdf[\"pump_type\"] == \"highway\"].groupby(\"COD_REG\")[\"price\"].mean()\nlpg_other_regional_prices_gdf = lpg_served_gdf[lpg_served_gdf[\"pump_type\"] == \"other\"].groupby(\"COD_REG\")[\"price\"].mean()","47975538":"# Choropleth for regional motorway prices\nlpg_choroplet_toll_motorway = regions.merge(lpg_toll_motorway_regional_prices_gdf, how=\"left\", on=\"COD_REG\")\nbase = lpg_choroplet_toll_motorway.plot(column=\"price\", cmap=\"Blues\", legend=True, edgecolor = \"lightgrey\", linewidth = 0.5, figsize=(10,10),\n                                        missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"})\nlpg_gdf[lpg_gdf[\"pump_type\"] == \"toll_motorway\"].plot(ax=base, color='grey', markersize=1)\nbase.set_title(\"LPG prices in Toll Motorway gas stations\")\nbase.set_axis_off()","4bace716":"import folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import MarkerCluster","fe1960cc":"lpg_choroplet_toll_motorway.head()","de7df094":"# Base map with Folium\nlpg_toll_motorway_folium = folium.Map(location=[42.50,12.50], tiles='cartodbpositron', zoom_start=6)\n# Adding LPG gas station on Toll Motorways grouping the markers\nmc = MarkerCluster(name=\"LPG gas stations on Toll Motorways\")\nfor idx, row in lpg_gdf[lpg_gdf[\"pump_type\"] == \"toll_motorway\"].iterrows():\n    Marker([row['lat'], row['lon']],\n           popup=\"LPG Price: {}\".format(row[\"price\"]),\n           icon=folium.Icon(prefix=\"fa\", icon=\"car\")).add_to(mc)\nlpg_toll_motorway_folium.add_child(mc)\n# Add Choropleth\nchoro = Choropleth(geo_data=lpg_choroplet_toll_motorway, \n                   data=lpg_choroplet_toll_motorway,\n                   columns=[\"COD_REG\",\"price\"],\n                   key_on=\"feature.properties.COD_REG\",\n                   fill_color='PuBu', \n                   legend_name='LPG prices on Toll Motorway gas stations, Eur\/L',\n                   nan_fill_color=\"lightgrey\",\n                   fill_opacity=0.5,\n                   name=\"Average Regional LPG price on Toll Motorways\",\n                   highlight=True,\n                   bins=9\n                  ).add_to(lpg_toll_motorway_folium)\n# Add tip to choropleth\nchoro.geojson.add_child(folium.features.GeoJsonTooltip(\n    fields=['DEN_REG', 'price'],\n    aliases=['Region: ', 'Average LPG price on Toll Motorways: '],\n    style=('background-color: grey; color: white;'),\n    localize=True\n))\n# Add layer controller\nfolium.LayerControl(collapsed=False).add_to(lpg_toll_motorway_folium)\n# Display map\nlpg_toll_motorway_folium","2de78b5f":"# Separating self service and served\ngasoline_self_df = gasoline_df[gasoline_df[\"self_service\"]==1].copy()\ngasoline_served_df = gasoline_df[gasoline_df[\"self_service\"]==0].copy()\ndiesel_self_df = diesel_df[diesel_df[\"self_service\"]==1].copy()\ndiesel_served_df = diesel_df[diesel_df[\"self_service\"]==0].copy()\nmethane_self_df = methane_df[methane_df[\"self_service\"]==1].copy()\nmethane_served_df = methane_df[methane_df[\"self_service\"]==0].copy()\nlpg_self_df = lpg_df[lpg_df[\"self_service\"]==1].copy()\nlpg_served_df = lpg_df[lpg_df[\"self_service\"]==0].copy()","51c44be8":"# Add a specific suffix to all prices columns names\ngasoline_self_df.rename(columns={\"price\": \"price_gasoline_self\"}, inplace=True)\ngasoline_served_df.rename(columns={\"price\": \"price_gasoline_served\"}, inplace=True)\ndiesel_self_df.rename(columns={\"price\": \"price_diesel_self\"}, inplace=True)\ndiesel_served_df.rename(columns={\"price\": \"price_diesel_served\"}, inplace=True)\nmethane_self_df.rename(columns={\"price\": \"price_methane_self\"}, inplace=True)\nmethane_served_df.rename(columns={\"price\": \"price_methane_served\"}, inplace=True)\nlpg_self_df.rename(columns={\"price\": \"price_lpg_self\"}, inplace=True)\nlpg_served_df.rename(columns={\"price\": \"price_lpg_served\"}, inplace=True)","1b19f84c":"# Merge all dataframes on pump id\nfuel_df = gasoline_self_df.merge(gasoline_served_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                           ).merge(diesel_self_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                                  ).merge(diesel_served_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                                         ).merge(methane_self_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                                             ).merge(methane_served_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                                                 ).merge(lpg_self_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"]\n                                                     ).merge(lpg_served_df, how=\"outer\", on=\"pump_id\", suffixes=[None, \"_delete\"])","5e0ad6e0":"# Remove redundant columns\ndel_cols = [col for col in fuel_df if \"_delete\" in col]\nfuel_df.drop(columns=del_cols, inplace=True)\nfuel_df.drop(columns=[\"gasoline_type\", \"self_service\"], inplace=True)","441daece":"fuel_df.head()","7ef1f383":"# Transform in GeoDataFrame\nfuel_gdf = df_to_gdf(fuel_df)","5b1afffa":"# Get Region attribute in the price dataframe via spatial join\nfuel_gdf = fuel_gdf.sjoin(regions, how=\"left\")","7ea341ea":"# Calculate average regional prices according to gas station type (toll_motorway, highway, other)\ntoll_motorway_regional_prices_gdf = fuel_gdf[fuel_gdf[\"pump_type\"] == \"toll_motorway\"].groupby(\"COD_REG\")[\n    [\"price_gasoline_self\", \"price_gasoline_served\", \"price_diesel_self\", \"price_diesel_served\",\"price_methane_self\", \"price_methane_served\",\n    \"price_lpg_self\", \"price_lpg_served\"]].mean()\nhighway_regional_prices_gdf = fuel_gdf[fuel_gdf[\"pump_type\"] == \"highway\"].groupby(\"COD_REG\")[\n    [\"price_gasoline_self\", \"price_gasoline_served\", \"price_diesel_self\", \"price_diesel_served\",\"price_methane_self\", \"price_methane_served\",\n    \"price_lpg_self\", \"price_lpg_served\",]].mean()\nother_regional_prices_gdf = fuel_gdf[fuel_gdf[\"pump_type\"] == \"other\"].groupby(\"COD_REG\")[\n    [\"price_gasoline_self\", \"price_gasoline_served\", \"price_diesel_self\", \"price_diesel_served\",\"price_methane_self\", \"price_methane_served\",\n    \"price_lpg_self\", \"price_lpg_served\",]].mean()","e779b9e5":"toll_motorway_regional_prices_gdf.head()","3d5e655f":"# Choropleth for gasoline self service regional toll motorway prices\nchoroplet_toll_motorway = regions.merge(toll_motorway_regional_prices_gdf, how=\"left\", on=\"COD_REG\")\nbase = choroplet_toll_motorway.plot(column=\"price_gasoline_self\", cmap=\"Blues\", legend=True, edgecolor = \"lightgrey\", linewidth = 0.5, figsize=(10,10),\n                                        missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"})\nfuel_gdf[(fuel_gdf[\"pump_type\"] == \"toll_motorway\") & (fuel_gdf[\"price_gasoline_self\"].notna())].plot(ax=base, color='grey', markersize=1)\nbase.set_title(\"Gasoline self service prices in Toll Motorway gas stations\")\nbase.set_axis_off()","0a58a746":"# Choropleth for diesel self service regional highway prices\nchoroplet_highway = regions.merge(highway_regional_prices_gdf, how=\"left\", on=\"COD_REG\")\nbase = choroplet_highway.plot(column=\"price_diesel_self\", cmap=\"Blues\", legend=True, edgecolor = \"lightgrey\", linewidth = 0.5, figsize=(10,10),\n                                        missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"})\nfuel_gdf[(fuel_gdf[\"pump_type\"] == \"highway\") & (fuel_gdf[\"price_diesel_self\"].notna())].plot(ax=base, color='grey', markersize=1)\nbase.set_title(\"Diesel self service prices in highway gas stations\")\nbase.set_axis_off()","b5738b82":"# Choropleth for methane served regional other prices\nchoroplet_other = regions.merge(other_regional_prices_gdf, how=\"left\", on=\"COD_REG\")\nbase = choroplet_other.plot(column=\"price_methane_served\", cmap=\"Blues\", legend=True, edgecolor = \"lightgrey\", linewidth = 0.5, figsize=(10,10),\n                                        missing_kwds={\"color\": \"lightgrey\", \"label\": \"Missing values\"})\nfuel_gdf[(fuel_gdf[\"pump_type\"] == \"other\") & (fuel_gdf[\"price_methane_served\"].notna())].plot(ax=base, color='grey', markersize=1)\nbase.set_title(\"Methane served prices in other gas stations\")\nbase.set_axis_off()","800cf480":"# Utility function to create gas station popup only with relevant info\ndef gas_station_info(row):\n    res = \"\"\n    self_prices = row[[col for col in row.index if \"_self\" in col]].notna()\n    served_prices = row[[col for col in row.index if \"_served\" in col]].notna()\n    if self_prices.any():\n        res += \"Self Service\\n\"\n        if self_prices[\"price_gasoline_self\"]:\n            res += \"-Gasoline: {:.3f} Eur\/L\\n\".format(row[\"price_gasoline_self\"])\n        if self_prices[\"price_diesel_self\"]:\n            res += \"-Diesel: {:.3f} Eur\/L\\n\".format(row[\"price_diesel_self\"])\n        if self_prices[\"price_methane_self\"]:\n            res += \"-Methane: {:.3f} Eur\/Kg\\n\".format(row[\"price_methane_self\"])\n        if self_prices[\"price_lpg_self\"]:\n            res += \"-LPG: {:.3f} Eur\/L\\n\".format(row[\"price_lpg_self\"])\n    # Add a return in the middle if both self and served are rpesent\n    if self_prices.any() and served_prices.any():\n        res +=\"\\n\\n\"\n    if served_prices.any():\n        res += \"Served\\n\"\n        if served_prices[\"price_gasoline_served\"]:\n            res += \"-Gasoline: {:.3f} Eur\/L\\n\".format(row[\"price_gasoline_served\"])\n        if served_prices[\"price_diesel_served\"]:\n            res += \"-Diesel: {:.3f} Eur\/L\\n\".format(row[\"price_diesel_served\"])\n        if served_prices[\"price_methane_served\"]:\n            res += \"-Methane: {:.3f} Eur\/Kg\\n\".format(row[\"price_methane_served\"])\n        if served_prices[\"price_lpg_served\"]:\n            res += \"-LPG: {:.3f} Eur\/L\\n\".format(row[\"price_lpg_served\"])\n    return res","d28f2213":"# Base map with Folium\nfuel_folium = folium.Map(location=[42.50,12.50], tiles='cartodbpositron', zoom_start=6)\n# Adding gas station on Toll Motorways grouping the markers\nmc_toll_motorways = MarkerCluster(name=\"Toll Motorway Gas Stations\")\nfor idx, row in fuel_gdf[fuel_gdf[\"pump_type\"] == \"toll_motorway\"].iterrows():\n    Marker([row['lat'], row['lon']],\n           popup=gas_station_info(row),\n           icon=folium.Icon(prefix=\"fa\", icon=\"car\", color=\"red\"),\n          ).add_to(mc_toll_motorways)\nfuel_folium.add_child(mc_toll_motorways)\n    \n# Adding gas station on Highways grouping the markers\nmc_higways = MarkerCluster(name=\"Highway Gas Stations\")\nfor idx, row in fuel_gdf[fuel_gdf[\"pump_type\"] == \"highway\"].iterrows():\n    Marker([row['lat'], row['lon']],\n           popup=gas_station_info(row),\n           icon=folium.Icon(prefix=\"fa\", icon=\"car\", color=\"blue\"),\n          ).add_to(mc_higways)\nfuel_folium.add_child(mc_higways)\n    \n# Adding gas station on other roads grouping the markers\nmc_other = MarkerCluster(name=\"Other Gas Stations\")\nfor idx, row in fuel_gdf[fuel_gdf[\"pump_type\"] == \"other\"].iterrows():\n    Marker([row['lat'], row['lon']],\n           popup=gas_station_info(row),\n           icon=folium.Icon(prefix=\"fa\", icon=\"car\", color=\"green\"),\n          ).add_to(mc_other)\nfuel_folium.add_child(mc_other)\n\n# Add Choropleth Gasoline self Other\nchoro_gasoline_self_other = Choropleth(geo_data=choroplet_other, \n                   data=choroplet_other,\n                   columns=[\"COD_REG\",\"price_gasoline_self\"],\n                   key_on=\"feature.properties.COD_REG\",\n                   fill_color='PuBu', \n                   legend_name='Gasoline Self Service prices on other gas stations, Eur\/L',\n                   nan_fill_color=\"lightgrey\",\n                   fill_opacity=0.5,\n                   name=\"Average Regional Gasoline Self Service price on other gas stations\",\n                   highlight=True,\n                   bins=9\n                  ).add_to(fuel_folium)\n# Add tip to choropleth\nchoro_gasoline_self_other.geojson.add_child(folium.features.GeoJsonTooltip(\n    fields=['DEN_REG', 'price_gasoline_self'],\n    aliases=['Region: ', 'Gasoline Self Service Other (Eur\/L): '],\n    style=('background-color: grey; color: white;'),\n    localize=True\n))\n\n# Add Choropleth Diesel Self Other\nchoro_diesel_self_other = Choropleth(geo_data=choroplet_other, \n                   data=choroplet_other,\n                   columns=[\"COD_REG\",\"price_diesel_self\"],\n                   key_on=\"feature.properties.COD_REG\",\n                   fill_color='PuBu', \n                   legend_name='Diesel Self Service prices on other gas stations, Eur\/L',\n                   nan_fill_color=\"lightgrey\",\n                   fill_opacity=0.5,\n                   name=\"Average Regional Diesel Self Service price on other gas stations\",\n                   highlight=True,\n                   bins=9\n                  ).add_to(fuel_folium)\n# Add tip to choropleth\nchoro_diesel_self_other.geojson.add_child(folium.features.GeoJsonTooltip(\n    fields=['DEN_REG', 'price_diesel_self'],\n    aliases=['Region: ', 'Diesel Self Service Other (Eur\/L): '],\n    style=('background-color: grey; color: white;'),\n    localize=True\n))\n\n\n# Add layer controller\nfolium.LayerControl(collapsed=False).add_to(fuel_folium)\n# Display map\nfuel_folium","7f2651bc":"fuel_gdf.to_file(\"fuel_data_20211201.shp\")\nfuel_gdf.to_csv(\"fuel_data_20211201.csv\")","48073098":"We can see that prices and distributions are significantly different amongst gas stations in different locations, with the exception of methane between other locations and highways. It would make sense then to analyze the different locations separately.","f3f0a6b7":"# Export\nSave the fuel GeoDataFrame in shapefile and pdf","2b5a2fee":"Exploratory example with LPG GeoDataFrame with served prices (removing self service pumps)","74778ce0":"We see that specialty fuels are quite fragmented, as commercial names vary across brands.","4ad7cf6c":"# Data import and initial discovery","8de8aaf7":"To clean the data and prepare for further analysis I took the following decisions:\n* Remove data point older than 60 days, as they may no longer represent a valid information\n* Remove data points with no latitude or longitude information\n* Select the 4 main non-specialty type of fuel: Benzina, Gasolio, GPL, and Metano (Gasoline, Diesel, LPG (liquefied petroleum gas), Methane) and rename in English\n* For each fuel type, remove prices that are lower than the mean minus 3 standard deviations of prices as they woud be unrealistic\n* Separate gas stations according to location type (Autostradale, Strada Statale, Altro), rename labels in English (TollMotorways, Highways, Other). Test if price means across types are the same and if prices come from the same distribution across types\n* Check equality of prices according to self service or served, in series homogeneous for fuel type and location type","3f316d9d":"In order to simplify analysis and graphical representation, we separate served and self service price, then we rearrange and merge the data by gas station id","b5bacab5":"While buying gasoline at 0.001 \u20ac\/liter would be nice, it seems clear there is some issue with those data points.\nAlso, the fact there is some old data from over 1 year ago does not look very good.","db20191f":"There are data points that do not have latitude and longitude. We need to clear those or geocode them from address to avoid issues","11a8b59f":"Transform DataFrames in GeoDataFrames","2dbf65dd":"Also in this case, we see prices and distributions are different with high significance. A disjoint analysis of served and self service prices seems then the best approach to follow","1624e0a7":"# Plotting gas stations","5c75bcce":"# Extending the analysis and graphical representation","8761cfde":"We see that majority of pumps are in the \"Altro\" (Other) category. A minority are of \"Autostradale\" type (Motorways with toll payment), and the remaining are placed on \"Strada Statale\" (Highway \/ State Road).\nThere is a reasonable expectation prices in Motorways are different from other types of gas stations, we will verify it after cleaning.","bc64b3d4":"# Data cleaning and preparation"}}