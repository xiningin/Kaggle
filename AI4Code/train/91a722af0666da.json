{"cell_type":{"f17aaf72":"code","2f021186":"code","20787edd":"code","c4ffb916":"code","2e413fca":"code","b08b3bdf":"code","518aba36":"code","30a766bf":"code","1a24763b":"code","2536fd27":"code","c4bbb8ba":"code","cb49fdd4":"code","750f3565":"code","4da86a79":"code","119a2b48":"code","31ed818f":"code","99e6f324":"code","c8e1f091":"code","6be77db6":"code","1cec2ed2":"code","a9d0f08e":"code","29d00f90":"code","f468d498":"code","510031ee":"code","bbbb4d4e":"code","147018c2":"code","4af5993a":"code","d22e6133":"code","8a2fd65f":"code","4735c271":"code","96da73af":"code","32c60e07":"code","214d9d52":"markdown","ce9c22bd":"markdown","07c9dfaa":"markdown","eeb187d9":"markdown","29998bde":"markdown","a83e2f81":"markdown"},"source":{"f17aaf72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2f021186":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","20787edd":"df_sentences = pd.read_csv('..\/input\/sentiment-labelled-sentences-data-set\/amazon_cells_labelled.txt', sep=\"\\t\", header=None)","c4ffb916":"df_sentences.head()","2e413fca":"import string\nimport re\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text","b08b3bdf":"train.head()\n","518aba36":"train['text'] = train['text'].apply(lambda x: clean_text(x))\ntest['text'] = test['text'].apply(lambda x: clean_text(x))\n\n# Let's take a look at the updated text\ntrain['text'].head()","30a766bf":"print(train.shape,\ntest.shape)","1a24763b":"train.head()\ntrain.drop(['id','keyword','location'],axis = 1,inplace = True)","2536fd27":"train.head()","c4bbb8ba":"# Import libraries","cb49fdd4":"import numpy as np\nimport pandas as pd\nimport torch\nimport transformers as ppb # pytorch transformers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split","750f3565":"train.head(20)","4da86a79":"model_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')","119a2b48":"tokenizer = tokenizer_class.from_pretrained(pretrained_weights)\nmodel = model_class.from_pretrained(pretrained_weights)","31ed818f":"tokenized = train[\"text\"].apply((lambda x: tokenizer.encode(x, add_special_tokens=True)))","99e6f324":"tokenized.shape","c8e1f091":"tokenized","6be77db6":"max_len = 0\nfor i in tokenized.values:\n    if len(i) > max_len:\n        max_len = len(i)\n\npadded = np.array([i + [0]*(max_len-len(i)) for i in tokenized.values])","1cec2ed2":"np.array(padded).shape\n","a9d0f08e":"attention_mask = np.where(padded != 0, 1, 0)\nattention_mask.shape","29d00f90":"#Model #1: And Now, Deep Learning!\u00b6\n","f468d498":"input_ids = torch.tensor(padded)  \nattention_mask = torch.tensor(attention_mask)\n\nwith torch.no_grad():\n    last_hidden_states = model(input_ids, attention_mask=attention_mask)","510031ee":"features = last_hidden_states[0][:,0,:].numpy()\n","bbbb4d4e":"labels = train['target']","147018c2":"train_features, test_features, train_labels, test_labels = train_test_split(features, labels)","4af5993a":"#Grid Search for Parameters","d22e6133":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'C': np.linspace(0.01, 100, 20)}\ngrid_search = GridSearchCV(LogisticRegression(), parameters)\ngrid_search.fit(train_features, train_labels)\n\nprint('best parameters: ', grid_search.best_params_)\nprint('best scrores: ', grid_search.best_score_)","8a2fd65f":"lr_clf = LogisticRegression()\nlr_clf.fit(train_features, train_labels)","4735c271":"lr_clf.score(test_features, test_labels)\n","96da73af":"from xgboost import XGBClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline\nfrom sklearn.model_selection import GridSearchCV,StratifiedKFold,RandomizedSearchCV","32c60e07":"# Fitting a simple Naive Bayes on Counts\nfrom sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier(n_estimators=100)\nclf.fit(train_features, train_labels)\n\nclf.score(test_features, test_labels)\n","214d9d52":"Importing pre-trained DistilBERT model and tokenizer\n","ce9c22bd":"# Masking\nIf we directly send padded to BERT, that would slightly confuse it. We need to create another variable to tell it to ignore (mask) the padding we've added when it's processing its input. That's what attention_mask is:","07c9dfaa":"# Padding\nAfter tokenization, tokenized is a list of sentences -- each sentences is represented as a list of tokens. We want BERT to process our examples all at once (as one batch). It's just faster that way. For that reason, we need to pad all lists to the same size, so we can represent the input as one 2-d array, rather than a list of lists (of different lengths).","eeb187d9":"The model() function runs our sentences through BERT. The results of the processing will be returned into last_hidden_states.","29998bde":"We can dive into Logistic regression directly with the Scikit Learn default parameters, but sometimes it's worth searching for the best value of the C parameter, which determines regularization strength.","a83e2f81":"# References\nhttp:\/\/jalammar.github.io\/a-visual-guide-to-using-bert-for-the-first-time\/\n"}}