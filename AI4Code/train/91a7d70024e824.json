{"cell_type":{"11ab4903":"code","9631474f":"code","627efeaa":"code","e3e8cafa":"code","35b81345":"code","d72c2cb3":"code","f3d9d622":"code","407c6527":"code","32dbb3b0":"code","005f5cab":"code","03a1ace1":"code","af3673ea":"code","4681cb3b":"code","c42c5c8e":"code","51c92400":"code","cf121831":"code","d2249fbe":"code","2510006c":"code","dc6a2510":"code","60a07b5f":"code","b8fc0773":"code","ebabff46":"code","2e2a9688":"code","dac6a905":"code","ed69515d":"code","4552864b":"code","7d37fc77":"code","1ce91a57":"code","9430094e":"code","47a465e0":"code","6218f7be":"code","3ba5eaa1":"code","12ecd732":"code","98080ace":"code","711c8ad8":"code","c8da9343":"code","5a1eec62":"code","1896a182":"code","e07702df":"code","9cf374eb":"code","578b69ea":"code","772536cb":"code","815e160f":"code","eb284bf8":"code","176335f8":"code","b05d36d6":"code","a79c2cc0":"code","41b35947":"code","9f003dec":"code","42db0c55":"code","754f745a":"code","4678f86b":"code","8056bb97":"code","e8396548":"code","811afb6a":"code","89fdcb14":"code","2698d39a":"code","bc846a01":"markdown","3aed561e":"markdown","6c8bc482":"markdown","d1e36ec7":"markdown","17161a3f":"markdown","1d2fc05a":"markdown","617efe19":"markdown","d444d8b4":"markdown","30ad8b0d":"markdown","aa77941b":"markdown","a29f7168":"markdown","364b785c":"markdown","e9dcd186":"markdown","5ae731b9":"markdown"},"source":{"11ab4903":"# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# assign constant features for the following plots\nplt.rcParams['font.size']=14\nplt.rcParams['legend.fontsize']=11\nplt.rcParams['font.serif'] = 'Time New Roman'\nplt.rcParams['lines.linewidth'] = 2","9631474f":"# Read the dataset in a dataframe\nhousing_df = pd.read_csv('..\/input\/ames-housing-dataset\/Housing_Data.csv')\nhousing_df.info()","627efeaa":"housing_df.head()","e3e8cafa":"#Removing the PID (We already have an index, so we don't need PID unique identifier. )\nhousing_df.drop('PID' , axis =1 , inplace = True)","35b81345":"# the distribution plot of the sale price\nplt.figure(dpi=100)\nsns.displot(housing_df['SalePrice'] , kde = True ,color= 'g' )","d72c2cb3":"# correlation between inputs and the output\nhousing_df.corr()['SalePrice'].sort_values(ascending = False)","f3d9d622":"# sale price_ ovarall qual(it has the most correlation with sale price)\nplt.figure()\nsns.scatterplot(data= housing_df, x= 'Overall Qual', y='SalePrice', color='g')\nplt.plot(list(range(1,11)), 200000*np.ones(10), color='r')","407c6527":"# check with Gr Liv Area- the second most correlated data with sale price\nplt.figure()\nsns.scatterplot(data= housing_df, x= 'Gr Liv Area' , y='SalePrice' , color='g')\nplt.axhline(y=200000 , color='r')\nplt.axvline(x=4000 , color='y')","32dbb3b0":"housing_df[(housing_df['Overall Qual']>= 9)& (housing_df['SalePrice']<200000) ][['SalePrice','Overall Qual', 'Gr Liv Area']]","005f5cab":"housing_df[(housing_df['Gr Liv Area']> 4000)& (housing_df['SalePrice']<200000) ][['SalePrice','Overall Qual', 'Gr Liv Area']]","03a1ace1":"# Remove the outliers\noutlier_index = housing_df[(housing_df['Gr Liv Area']> 4000)& (housing_df['SalePrice']<200000) ].index\nhousing_df.drop(outlier_index,inplace=True)","af3673ea":"#Lets check if the problem is solved or not!\nplt.figure()\nsns.scatterplot(data= housing_df, x= 'Gr Liv Area' , y='SalePrice' , color='g')\nplt.axhline(y=200000 , color='r')\nplt.axvline(x=4000 , color='y')\n\nplt.figure()\nsns.scatterplot(data= housing_df, x= 'Overall Qual', y='SalePrice', color='g')\nplt.plot(list(range(1,11)), 200000*np.ones(10), color='r')\n","4681cb3b":"# Lets open the description file to see the explanation of each column and their missing data\nwith open('..\/input\/ames-housing-dataset\/Ames_Housing_Feature_Description.txt','r') as f:\n    print(f.read())","c42c5c8e":"# count the missing data in each feature:\nhousing_df.isnull().sum().sort_values(ascending=False)","51c92400":"# Lets calculate the percentage missing data to understand the better, and save the columns with missing data in a series named nan_percent:\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()","cf121831":"nan_percent","d2249fbe":"# plot the columns with missing data(the plot shows the percentage of missing data of each eature)\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","2510006c":"# pool qc, alley, misc feature, and fence have more than 80% nan. According to the description file and with this many nan\n# they can be removed, so now remove the fore columns with more than 80% missing data\nthreshold = len(housing_df)-(80*len(housing_df))\/100\nhousing_df.dropna(axis =1 , inplace = True , thresh=threshold)\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","dc6a2510":"housing_df.info()","60a07b5f":"housing_df['Bsmt Qual']","b8fc0773":"housing_df['BsmtFin SF 1']","ebabff46":"# Bsmt means basement\n# all the columns with Bsmt, nan means there is no basement, so it can be replaced by none, or if \n# it is numerical it can be replace by 0\nnumerical_basement= ['BsmtFin SF 1', 'BsmtFin SF 2', 'Bsmt Unf SF','Total Bsmt SF' ,'Bsmt Full Bath', 'Bsmt Half Bath']\nstring_basements= ['Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2']\nhousing_df[numerical_basement]= housing_df[numerical_basement].fillna(0)\nhousing_df[string_basements]= housing_df[string_basements].fillna('None')","2e2a9688":"\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","dac6a905":"# if the building has no masonry, the data of 'Mas Vnr Type' , 'Mas Vnr Area' will be nan\n# they can be treated likewise Bsmt columns\nhousing_df['Mas Vnr Type'].fillna('None' , inplace= True)\nhousing_df[ 'Mas Vnr Area'].fillna(0, inplace = True)\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","ed69515d":"# when there is no fire place, its value is missing, so it should be replaced by 'None'\nhousing_df['Fireplace Qu'].fillna('None', inplace=True)","4552864b":"\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","7d37fc77":"# Lets check how many rows are missing within Electrical column\nhousing_df[housing_df['Electrical'].isnull()]","1ce91a57":"# there is just one row, so it can be removed\nhousing_df.dropna(subset=['Electrical'] , inplace= True)\n\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","9430094e":"# Based on the dataset documentation, NaN in Garage Columns seems to indicate no garage.\n# Decision: Fill with 'None' or 0\nstring_garage = ['Garage Type','Garage Finish', 'Garage Qual' , 'Garage Cond' ]\nnum_garage = ['Garage Cars' , 'Garage Area' , 'Garage Yr Blt']\nhousing_df[string_garage]=housing_df[string_garage].fillna('None')\nhousing_df[num_garage]=housing_df[num_garage].fillna(0)\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","47a465e0":"# LotFrontage: Linear feet of street connected to property\nhousing_df['Lot Frontage']\n","6218f7be":"#We assume that the Lot Frontage is related to what a Neighborhood a house is in\nhousing_df['Neighborhood'].unique()","3ba5eaa1":"# Lets check their connection with box plot\nplt.figure(figsize=(15,6), dpi=100)\nsns.boxplot(data=housing_df, x='Neighborhood', y='Lot Frontage')\nplt.xticks(rotation=90)","12ecd732":"# the amount of lot frontage for same neighborhoods are rather close to each other for most neighborhoods\n# replace the missing values with the average values for the same neighborhood\nhousing_df.groupby('Neighborhood').mean()['Lot Frontage']","98080ace":"housing_df['Lot Frontage']= housing_df.groupby('Neighborhood')['Lot Frontage'].transform(lambda a:a.fillna(a.mean()))\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()","711c8ad8":"nan_percent","c8da9343":"\nplt.figure(figsize = (15,5))\nsns.barplot(x = nan_percent.index , y = nan_percent)\nplt.xticks(rotation=90)","5a1eec62":"housing_df['Lot Frontage'].fillna(0,inplace=True)\nnan_percent = (housing_df.isnull().sum())*100\/len(housing_df)\nnan_percent = nan_percent[nan_percent>0].sort_values()\nnan_percent","1896a182":"housing_df.info()\nhousing_df['MS SubClass']","e07702df":"#MS SubClass: Identifies the type of dwelling involved in the sale.\n# so MS SubClass should be string and categorical\nhousing_df['MS SubClass']=housing_df['MS SubClass'].apply(str)\nhousing_df.info()","9cf374eb":"housing_df['MS SubClass']","578b69ea":"housing_df.select_dtypes(exclude=object)","772536cb":"df_num = housing_df.select_dtypes(exclude=object)\ndf_obj = housing_df.select_dtypes(include=object)","815e160f":"df_obj.info()","eb284bf8":"df_obj.head()","176335f8":"df_obj = pd.get_dummies(df_obj, drop_first=True)\ndf_obj.info()","b05d36d6":"df_obj.shape","a79c2cc0":"housing_df_final = pd.concat([df_obj , df_num] , axis=1)","41b35947":"housing_df_final.head()","9f003dec":"housing_df_final.corr()['SalePrice'].sort_values(ascending=False).head(7)","42db0c55":"# The scatter plot of the 6 variable above and SalePrice\nfig , axes = plt.subplots(6, figsize=(10,25))\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= 'Overall Qual' , ax=axes[0])\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= 'Gr Liv Area' , ax=axes[1])\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= 'Total Bsmt SF' , ax=axes[2])\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= 'Garage Cars', ax=axes[3])\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= '1st Flr SF', ax=axes[4])\nsns.scatterplot(data= housing_df_final , x= 'SalePrice' , y= 'Garage Area',ax=axes[5])\nplt.tight_layout()","754f745a":"# Necessary libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","4678f86b":"# Determine the features and target variables and devide them into train and test dataset\nX = housing_df_final.drop('SalePrice', axis=1)\ny = housing_df_final['SalePrice']\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.3)\n\n# design the model and train it with train dataset\nMyModel = LinearRegression()\nMyModel.fit(X_train , y_train)","8056bb97":"# coefficients of the model\npd.DataFrame(MyModel.coef_ , index=X.columns , columns=['coefficient'])","e8396548":"# evaluating the model\nfrom sklearn import metrics\ny_pred = MyModel.predict(X_test)\nMAE= metrics.mean_absolute_error(y_test , y_pred)\nRMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred))\npd.DataFrame([[MAE,(MAE*100)\/y_test.mean()], [RMSE, (RMSE*100)\/ y_test.mean()]] , index=['Mean absolute error', 'Root mean square error'], columns=['Error','percentage of error to average of target (%)'])","811afb6a":"test_residuals = y_test - y_pred\nsns.displot(test_residuals)","89fdcb14":"sns.scatterplot(x=y_test,  y=y_pred)","2698d39a":"plt.figure()\nsns.scatterplot( x=y_test , y=test_residuals)\nplt.axhline(y=0,color='r')","bc846a01":"# Predict the sale prices of houses according to the dataset","3aed561e":"**Linear regression**","6c8bc482":"**creatin dummy variables**","d1e36ec7":"**** We need to be careful when it comes to encoding categorical as numbers. We want to make sure that the numerical relationship makes sense for model.categoricals shouldnt have sequential values as numbers****","17161a3f":"**now there is no missing data**","1d2fc05a":"**Residuals**","617efe19":"The three dots below the red line and after the yellow line are outliers.\nLets check are the presented outliers in these plots the same, if yes, lets remove them, as they will make problem to our model:","d444d8b4":"Residuals are randomn around 0","30ad8b0d":"**Dealing with outliers**\n* The SalePrice is target or y, so the other feature or the other columns are inputs (x)\n* First check the correlation between each input with the sale price\n* Second plot a figure for most correlated features with the output to find the outliers\n* Also chech the distribution plot of the output\n","aa77941b":"It can be seen that with the rise of overall qual, the sale price increases, too. \nfor the overallqualss equal to 9 and ten there are three datas with high sale price but low overall qual.\nthey are approximately under the line y=200000. \nthey can be considered as as outliers. Lets check them in another way, too.","a29f7168":"**Dealing with missing data**","364b785c":"The two result have 3 similar rows that are outliers and should be deleted.","e9dcd186":"they have normal distribution with mean = 0","5ae731b9":"**The outliers are now removed**"}}