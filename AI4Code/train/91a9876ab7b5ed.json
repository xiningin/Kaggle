{"cell_type":{"926adda9":"code","de800a1c":"code","08c65471":"code","0109cb99":"code","112030cb":"code","02b971bc":"code","be91ee90":"code","e9bb7c79":"code","02e0d01e":"code","0bde47e6":"code","de0c56c9":"code","8114be32":"code","002d6d06":"code","239582a4":"code","5f5a5978":"code","c023a04e":"code","1d6c7dad":"code","ede604a0":"code","622934e8":"code","224c5619":"code","ff7c7d10":"code","6b3ae62c":"code","fd2a27ca":"code","6e28519d":"code","d9b6ffec":"code","bdc9395b":"code","cb0476ed":"code","4d4f4797":"code","91889f17":"code","85eea897":"code","4f6fbec0":"code","1e60f308":"code","0b57b474":"code","bad7276a":"code","ed63ffe9":"code","1a3e6d69":"code","d0ad4810":"code","0039dc6c":"code","348c7855":"code","2d3c61ae":"markdown","ca850e17":"markdown","e3f769a1":"markdown","03233c2e":"markdown","21dfa530":"markdown","9d5aeec3":"markdown","2515678e":"markdown","35e24409":"markdown","c4e89c8b":"markdown","03816cf3":"markdown","aaa8a1e8":"markdown","f2c6400c":"markdown","b7b25d4f":"markdown"},"source":{"926adda9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","de800a1c":"df = pd.read_csv('..\/input\/hourly-power-consumption-of-turkey-20162020\/RealTimeConsumption-01012016-04082020.csv', encoding='cp1254')","08c65471":"df.head()","0109cb99":"df['Date'] =pd.to_datetime(df['Date'] +' '+ df['Hour'], format='%d.%m.%Y %H:%M')","112030cb":"pd.date_range(start = '2016-01-01 00:00:00', end = '2020-03-24 00:00:00', freq = 'D').difference(df.Date)","02b971bc":"df = df.drop('Hour', axis = 1)","be91ee90":"df.head()","e9bb7c79":"df['Consumption (MWh)'] = df['Consumption (MWh)'].str.replace(',','')\ndf['Consumption (MWh)'] = pd.to_numeric(df['Consumption (MWh)'])","02e0d01e":"df = df.sort_values('Date')","0bde47e6":"df.head()","de0c56c9":"print(df['Date'].min(), df['Date'].max())","8114be32":"df = df.set_index('Date').loc[:'2020-03-24 23:00:00', :].reset_index()","002d6d06":"df.tail()","239582a4":"df.info()","5f5a5978":"df.set_index('Date').plot(style='.', figsize=(15,5), title='Consumption vs. Date')\nplt.show()","c023a04e":"import matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfig, ax = plt.subplots(figsize=(30, 5))\nplot_acf(df.set_index('Date'),lags = 720, ax=ax)\nplt.show()\n\n\nsns.set(style='whitegrid')\nfig, ax = plt.subplots(figsize=(35, 5))\nplot_pacf(df.set_index('Date'),lags = 205, ax=ax)\nplt.xticks(np.arange(0, 210, step=5))\nplt.show()","1d6c7dad":"plt.figure(figsize = (15, 7))\nax = sns.boxplot(x=df['Date'].dt.hour, y=\"Consumption (MWh)\", data=df)\nplt.title('Hourly Consumption', fontsize=11)","ede604a0":"df['Consumption (MWh)'] = np.log1p(df['Consumption (MWh)'])","622934e8":"df['rolling_mean_t41'] = df['Consumption (MWh)'].shift(38)\ndf['rolling_mean_t41'] = df['Consumption (MWh)'].shift(41)\ndf['rolling_mean_t48'] = df['Consumption (MWh)'].shift(48)\ndf['rolling_mean_t72'] = df['Consumption (MWh)'].shift(72) \ndf['rolling_mean_t168'] = df['Consumption (MWh)'].shift(168)","224c5619":"df","ff7c7d10":"df['rolling_mean_t38'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(12).mean())\ndf['rolling_mean_t50'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(24).mean())\ndf['rolling_mean_t62'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(48).mean())\ndf['rolling_median_t38'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(12).median())\ndf['rolling_median_t50'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(24).median())\ndf['rolling_median_t62'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(48).median())\ndf['rolling_std_t38'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(12).std())\ndf['rolling_std_t50'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(24).std())\ndf['rolling_std_t62'] = df['Consumption (MWh)'].transform(lambda x: x.shift(38).rolling(48).std())","6b3ae62c":"df","fd2a27ca":"df = df.dropna(axis=0, how='any').reset_index(drop=True)","6e28519d":"df['hourofday'] = df['Date'].dt.hour\ndf['quarter'] = df['Date'].dt.quarter\ndf['month'] = df['Date'].dt.month\ndf['year'] = df['Date'].dt.year\ndf['dayofyear'] = df['Date'].dt.dayofyear\ndf['dayofmonth'] = df['Date'].dt.day\ndf['weekofyear'] = df['Date'].dt.weekofyear\ndf['days_in_month'] = df['Date'].dt.days_in_month","d9b6ffec":"df.head()","bdc9395b":"df.tail()","cb0476ed":"split_date = '01-Jan-2016'\nsplit_date1 = '01-Jan-2020'\nsplit_date2 = '14-Mar-2020'\nsplit_date3 = '15-Mar-2020'\ndf_train = df.set_index('Date').loc[split_date:'31-Dec-2019', :].reset_index()\ndf_test = df.set_index('Date').loc[split_date1:split_date2, :].reset_index()","4d4f4797":"df_test[['Date','Consumption (MWh)']].set_index('Date').rename(columns={'Consumption (MWh)': 'TEST SET'})\\\n        .join(df_train[['Date','Consumption (MWh)']].set_index('Date')\\\n              .rename(columns={'Consumption (MWh)': 'TRAINING SET'}),how='outer').plot(figsize=(25,5), title='T\u00fcketim Miktar\u0131 (MWh)', style='.')\nplt.ylim(9.8, 10.8)\nplt.show()","91889f17":"df_train.to_csv('energy_cons_train.csv', index = None) #Keeping the train and test data for another notebook :)\ndf_test.to_csv('energy_cons_test.csv', index = None)","85eea897":"df_train = df_train.drop(['Date'], axis=1)\ndf_test = df_test.drop(['Date'], axis=1)","4f6fbec0":"def percentage_error(actual, predicted):\n    res = np.empty(actual.shape)\n    for j in range(actual.shape[0]):\n        if actual[j] != 0:\n            res[j] = (actual[j] - predicted[j]) \/ actual[j]\n        else:\n            res[j] = predicted[j] \/ np.mean(actual)\n    return res\n\ndef mean_absolute_percentage_error(y_true, y_pred): \n    return np.mean(np.abs(percentage_error(np.asarray(y_true), np.asarray(y_pred)))) * 100","1e60f308":"print(df_train.shape, df_test.shape) ","0b57b474":"y_train = df_train['Consumption (MWh)'].values\nX_train = df_train.drop('Consumption (MWh)', axis=1).values\n\ny_test = df_test['Consumption (MWh)'].values\nX_test = df_test.drop('Consumption (MWh)', axis=1).values","bad7276a":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n#!pip install lightgbm\nfrom lightgbm import LGBMRegressor","ed63ffe9":"model_lgbm = LGBMRegressor(objective='rmse', n_estimators=3000, learning_rate=0.01, num_leaves=36, min_child_samples = 15, \n                           n_jobs=-1,  random_state = None, max_depth = 3, reg_lambda = 0.0, reg_alpha = 0.0, min_split_gain=0.0)\neval_set_ALLRESTS = [(X_train, y_train), (X_test, y_test)]\nmodel_lgbm.fit(X_train, y_train, eval_set = eval_set_ALLRESTS ,eval_metric='rmse', early_stopping_rounds=15, verbose=20)","1a3e6d69":"y_train_lgbm = model_lgbm.predict(X_train)\nprint(\"Train set RMSE (Log): \" + str(np.sqrt(mean_squared_error(y_train_lgbm, y_train))))\nprint(\"Train set MAPE (Log): \" + str(mean_absolute_percentage_error(y_train, y_train_lgbm)))\nprint(\"Train set RMSE (Non-Log): \" + str(np.sqrt(mean_squared_error(np.expm1(y_train_lgbm), np.expm1(y_train)))))\nprint(\"Train set MAPE (Non-Log): \" + str(mean_absolute_percentage_error(np.expm1(y_train), np.expm1(y_train_lgbm))))\nprint(\"% Success (Non-Log): \" + str(100 - mean_absolute_percentage_error(np.expm1(y_train), np.expm1(y_train_lgbm))))","d0ad4810":"y_test_lgbm = model_lgbm.predict(X_test)\nprint(\"Validation set RMSE (Log): \" + str(np.sqrt(mean_squared_error(y_test_lgbm, y_test))))\nprint(\"Validation set MAPE (Log): \" + str(mean_absolute_percentage_error(y_test, y_test_lgbm)))\nprint(\"Validation set RMSE (Non-Log): \" + str(np.sqrt(mean_squared_error(np.expm1(y_test_lgbm), np.expm1(y_test)))))\nprint(\"Validation set MAPE (Non-Log): \" + str(mean_absolute_percentage_error(np.expm1(y_test), np.expm1(y_test_lgbm))))\nprint(\"% Success (Non-Log): \" + str(100 - mean_absolute_percentage_error(np.expm1(y_test), np.expm1(y_test_lgbm))))","0039dc6c":"from matplotlib import pyplot\n# retrieve performance metrics\nresults = model_lgbm.evals_result_\nepochs = len(results['training']['rmse'])\nx_axis = range(0, epochs)\n# plot MAE\nplt.figure(figsize=(17,8))\nfig, ax = pyplot.subplots()\nax.plot(x_axis, results['training']['rmse'], label='Train')\nax.plot(x_axis, results['valid_1']['rmse'], label='Validation')\nax.legend();\npyplot.ylabel('RMSE')\npyplot.xlabel('# of iterations (or # of estimators)')\npyplot.title('LGBM RMSE')\npyplot.show()","348c7855":"# Create a pd.Series of features importances\nimportances = pd.Series(data=model_lgbm.feature_importances_,\n                        index= df_train.drop('Consumption (MWh)', axis=1).columns)\n\n# Sort importances\nimportances_sorted = importances.sort_values()\nplt.figure(figsize=(12,20))\n# Draw a horizontal barplot of importances_sorted\nimportances_sorted.plot(kind='barh', color='lightblue')\nplt.title('Features Importances')\nplt.show()","2d3c61ae":"## The Model","ca850e17":"### Rolling Features","e3f769a1":"Let's check whether we miss any entry in the time series \"Data\" feature:","03233c2e":"## Importing and Processing the Data","21dfa530":"Predicting the power demand with high accuracy might introduce a great set of values for a country, for a city or even for households. Stakeholders might adjust their power production accordingly to reduce cost; or they can buy sufficient amounts of energy if they meet their power needs from external sources. In some certain cases, such as in tendering processes in a daily energy exchange, the stakeholders may generate addtional profit, too. \n\nIn this notebook I will introduce basics of training a Machine Learning model predicting Power Consumption of Turkey for the next 24 hours, using Ensemble Methods.","9d5aeec3":"### Train-Test Split","2515678e":"This entire code is for educational purposes, for an industry level production ready application, one needs to perform an eloborate feature engineering and an iterative hyperparameter-tuning. For the production phase, time-series spesific cross validation would also help for understanding the generalization power of the model to the future unseen data. In addition, there may be many domain spesific features or some fundamental features those higly affecting the model performance, a few examples to these might be given as: hourly weather condition, Vacation & Special days, features regarding energy consuming factories and sun set & rise data. \n\nIt might be good exercise to try these and further features, selecting the highly correlated ones and also tuning the hyperparameters, finally trying other models such as Random-Forest, XGBoost, NGBoost, Prophet or DNNs (LSTM, etc.).","35e24409":"### Lag Features","c4e89c8b":"### Time Features","03816cf3":"For the purposes of this notebook, I will not be including the Covid period as approximately started in Turkey:","aaa8a1e8":"We may say that our model performed ~96.2% on train set and ~96.7% on the test set, not bad isn't it!","f2c6400c":"## Basic Feature Engineering","b7b25d4f":"# Prediction of Hourly Energy Consumption of Turkey"}}