{"cell_type":{"09544a01":"code","8b36ddf0":"code","3f3728f8":"code","6b08149a":"code","cb18d5d4":"code","34467c9b":"code","4ac983ff":"code","1925b594":"code","007f87a6":"code","73031c34":"code","8af89a53":"code","f85b452a":"code","0d95be53":"code","9c14d7d7":"code","1c7f9a7e":"code","30966c49":"code","d2836739":"code","1f68b984":"code","1ae1c607":"code","c5c8812b":"code","30f94557":"code","94102c00":"code","8443c72e":"code","468370dd":"code","83706871":"code","e3b6290f":"markdown","cd919029":"markdown","47d55fca":"markdown","731f15a8":"markdown","cda5d25e":"markdown","8cd6323c":"markdown"},"source":{"09544a01":"###Loading in useful packages\n\n#for linear algebra\nimport numpy as np\n\n#for data manipulation\nimport pandas as pd\n\n#for plotting\nimport matplotlib.pyplot as pp\nimport seaborn as sns\n%matplotlib inline\n\n#For surpressing warnings\nimport warnings\nwarnings.filterwarnings('ignore')","8b36ddf0":"#Loading in the data\n\nmini_train = pd.read_pickle(\"..\/input\/mctrain\/train.pkl\")\ntest = pd.read_pickle(\"..\/input\/mctest\/test.pkl\")\nmini_train = mini_train.reset_index().drop('index',axis=1)","3f3728f8":"#Let's take a look at the  training data\nmini_train.head()","6b08149a":"#Lets look at the data types\nmini_train.info()","cb18d5d4":"#Let's make a list of the categorical variables here\n\ncategorical_vars = list(mini_train.dtypes[mini_train.dtypes== 'category'].index)[1:]\n\nfor i in categorical_vars:\n  print(\"Variable Name:\",i)\n  print(i,\"has\",len(list(mini_train.loc[:,i].unique())),\"unique values\",sep=\" \")\n  print(i,\"has\",mini_train.loc[:,i].isnull().sum(),\"missing values\",sep=\" \")\n  print(\" \")","34467c9b":"#Dealing with the PuaMode missing values\nmini_train['PuaMode']=mini_train['PuaMode'].replace(np.nan,'absent')\n\n#Let's make the same changes to the testing data too\ntest['PuaMode']=test['PuaMode'].replace(np.nan,'absent')\n\n#Let's take a look at the values\nmini_train['PuaMode'].value_counts()\n","4ac983ff":"#Dealing with SmartScreen missing values\n\nmini_train['SmartScreen']= mini_train['SmartScreen'].replace([np.nan,'&#x01;','&#x02;','Off','off','absent','OFF','0','of','Deny','ABSENT','ting','ExistsNotSet','Block','BLOCK','Not-there'],'NOT-THERE')\nmini_train['SmartScreen']= mini_train['SmartScreen'].replace(['RequireAdmin','requireadmin','RequiredAdmin','Admin','requireAdmin'],'ADMIN')\nmini_train['SmartScreen']= mini_train['SmartScreen'].replace(['On','ON','on','Enabled'],'oN')\nmini_train['SmartScreen']= mini_train['SmartScreen'].replace(['Prompt','warn','Warn','Promprt','Promt'],'prompt')\ntest['SmartScreen']= test['SmartScreen'].replace([np.nan,'&#x01;','&#x02;','Off','off','absent','OFF','0','of','Deny','ABSENT','ting','ExistsNotSet','Block','BLOCK','Not-there','&#x03;','00000000'],'NOT-THERE')\ntest['SmartScreen']= test['SmartScreen'].replace(['RequireAdmin','requireadmin','RequiredAdmin','Admin'],'ADMIN')\ntest['SmartScreen']= test['SmartScreen'].replace(['On','ON','on'],'oN')\ntest['SmartScreen']= test['SmartScreen'].replace(['Prompt','warn','Warn','Promprt'],'prompt')\n\n#Let's take a look at the values\n\nmini_train['SmartScreen'].value_counts()","1925b594":"#Dealing with Census_ProcessorClass missing values\nmini_train['Census_ProcessorClass']=mini_train['Census_ProcessorClass'].replace(np.nan,'absent')\ntest['Census_ProcessorClass']=test['Census_ProcessorClass'].replace(np.nan,'absent')\n\n#Let's take a look at the values\nmini_train['Census_ProcessorClass'].value_counts()","007f87a6":"#Dealing with Census Primary Disk Type Name\nmini_train['Census_PrimaryDiskTypeName']=mini_train['Census_PrimaryDiskTypeName'].replace(['UNKNOWN','Unspecified'],'Generic')\ntest['Census_PrimaryDiskTypeName']=test['Census_PrimaryDiskTypeName'].replace(['UNKNOWN','Unspecified'],'Generic')\n\n#Let's take a look at the values\nmini_train['Census_PrimaryDiskTypeName'].value_counts()","73031c34":"#Dealing with Census_ChasisTypeName\nmini_train['Census_ChassisTypeName']=mini_train['Census_ChassisTypeName'].replace([ 'MiniTower', 'Other', 'UNKNOWN',\n                  'LowProfileDesktop', 'Detachable', 'HandHeld', 'SpaceSaving',\n                  'Tablet', 'Tower', 'Unknown', 'MainServerChassis',\n                  'LunchBox', 'MiniPC', 'RackMountChassis',\n                  'BusExpansionChassis', 'SubNotebook', '30', '0', 'Blade',\n                  '35', 'StickPC', 'SealedCasePC', 'SubChassis', 'PizzaBox',\n                  '39', '36', '127', '81', 'BladeEnclosure', '112',\n                  'CompactPCI', '49', '45', 'DockingStation', '76', '44',\n                  'EmbeddedPC', '28', '25', '88', 'ExpansionChassis', '31',\n                  '32', 'MultisystemChassis', 'IoTGateway', '82',np.nan],'OTHER')\ntest['Census_ChassisTypeName']=test['Census_ChassisTypeName'].replace([ 'MiniTower', 'Other', 'UNKNOWN',\n                 'LowProfileDesktop', 'Detachable', 'HandHeld', 'SpaceSaving',\n                  'Tablet', 'Tower', 'Unknown', 'MainServerChassis',\n                  'LunchBox', 'MiniPC', 'RackMountChassis',\n                  'BusExpansionChassis', 'SubNotebook', '30', '0', 'Blade',\n                  '35', 'StickPC', 'SealedCasePC', 'SubChassis', 'PizzaBox',\n                  '39', '36', '127', '81', 'BladeEnclosure', '112',\n                  'CompactPCI', '49', '45', 'DockingStation', '76', '44',\n                  'EmbeddedPC', '28', '25', '88', 'ExpansionChassis', '31',\n                  '32', 'MultisystemChassis', 'IoTGateway', '82','120','93','64','84','120','PeripheralChassis','83',np.nan],'OTHER')\n\n#Let's take a look at the values\nmini_train['Census_ChassisTypeName'].value_counts()","8af89a53":"#Dealing with Census_InternalBatteryType\n\nmini_train['Census_InternalBatteryType']=mini_train['Census_InternalBatteryType'].replace(['li-i', '#', 'lip', 'liio', 'li p', 'li', 'nimh',\n                  'real', 'bq20', 'pbac', 'vbox', 'lhp0', 'unkn', '4cel',\n                  'lipo', 'lgi0', 'ithi', 'li-l', 'ram', '4ion', '\u00ed\u0003-i',\n                  '\u00f7\u00ff\u00f3\u00f6', 'lio', 'cl53', '\u00ff\u00ff\u00ff\u00ff', 'a132', 'd', 'virt', 'ca48',\n                  'batt', 'asmb', 'bad', 'a140', 'lit', '\u0004lio', 'lipp', 'li\u00ff\u00ff',\n                  '0x0b', 'l\u00ff\u00ff\u00ff', '3ion', '6ion', '4lio', 'lp', 'li?', '\u0004ion',\n                  'pbso', 'a138', 'li-h', '3500', 'ots0', 'h00j', 'li\u0010',\n                  'sams', '\u0003ip', '8', '#TAB#', 'l\u0006&#TAB#', 'li\u0090o', '@i\uf8f5\uf8f5',\n                  'l\u0015', 'lgl0', 'lai0', 'lilo', 'pa50', 'h4\u00b0s', '5nm1', 'li-p',\n                  'lhpo', '0ts0', 'pad0', 'sail', 'p-sn', 'icp3', 'a130',\n                  '2337', '\u001f\u02d9\u02d9\u02d9', 'lgs0',np.nan],'not-lion')\n\ntest['Census_InternalBatteryType']=test['Census_InternalBatteryType'].replace(['li-i', '#', 'lip', 'liio', 'li p', 'li', 'nimh',\n                  'real', 'bq20', 'pbac', 'vbox', 'lhp0', 'unkn', '4cel',\n                  'lipo', 'lgi0', 'ithi', 'li-l', 'ram', '4ion', '\u00ed\u0003-i',\n                  '\u00f7\u00ff\u00f3\u00f6', 'lio', 'cl53', '\u00ff\u00ff\u00ff\u00ff', 'a132', 'd', 'virt', 'ca48',\n                  'batt', 'asmb', 'bad', 'a140', 'lit', '\u0004lio', 'lipp', 'li\u00ff\u00ff',\n                  '0x0b', 'l\u00ff\u00ff\u00ff', '3ion', '6ion', '4lio', 'lp', 'li?', '\u0004ion',\n                  'pbso', 'a138', 'li-h', '3500', 'ots0', 'h00j', 'li\u0010',\n                  'sams', '\u0003ip', '8', '#TAB#', 'l\u0006&#TAB#', 'li\u0090o', '@i\uf8f5\uf8f5',\n                  'l\u0015', 'lgl0', 'lai0', 'lilo', 'pa50', 'h4\u00b0s', '5nm1', 'li-p',\n                  'lhpo', '0ts0', 'pad0', 'sail', 'p-sn', 'icp3', 'a130',\n                  '2337', '\u001f\u02d9\u02d9\u02d9', 'lgs0','2','l?', 'pcs0', 'ioon', 'pgd0', '9ion', '5ion','45n1', 'fake', 'nion', '@nn', 'lo\u00ff\u00ff', '\u0090\u00f1\u00b1\u00bf', 'lgco','l\\x0b?','\\x0c@nn',np.nan],'not-lion')\n\n#Let's take a look at the values\nmini_train['Census_InternalBatteryType'].value_counts()\n","f85b452a":"#Looking at the data\nmini_train.head()","0d95be53":"#Let's start with EngineVersion\n\nnew_var =list()\n\na = list(mini_train['EngineVersion'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n  \n\n#Make the change\nmini_train['EngineVersion']=pd.Series(new_var)\n","9c14d7d7":"#Making the same change to the testing data\n\nnew_var =list()\n\na = list(test['EngineVersion'])\n\nfor i in range(len(a)):\n  new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  \n\n#Make the change\ntest['EngineVersion']=pd.Series(new_var)\n","1c7f9a7e":"#Next,let's go to AppVersion\n\nnew_var = list()\n\na = list(mini_train['AppVersion'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n  \n#Make the change\nmini_train['AppVersion'] = pd.Series(new_var)","30966c49":"#Making the change to the testing data\nnew_var = list()\n\na = list(test['AppVersion'])\n\nfor i in range(len(a)):\n  new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  \n#Make the change\ntest['AppVersion'] = pd.Series(new_var)","d2836739":"#Next, let's go to AvSigVersion\n\nnew_var = list()\n\na = list(mini_train.loc[:,'AvSigVersion'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n\n\n#Make the change\nmini_train['AvSigVersion'] = pd.Series(new_var)","1f68b984":"#Making the change to the testing data\n\nnew_var = list()\n\na = list(test.loc[:,'AvSigVersion'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n\n\n#Make the change\ntest['AvSigVersion'] = pd.Series(new_var)","1ae1c607":"#Next, let's go to OsVer\nnew_var = list()\na = list(mini_train['OsVer'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n\n#Make the change\nmini_train['OsVer'] = pd.Series(new_var)","c5c8812b":"#Making the change to the testing data\n\nnew_var = list()\na = list(test['OsVer'])\n\nfor i in range(len(a)):\n  new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n\n#Make the change\ntest['OsVer'] = pd.Series(new_var)","30f94557":"#Next, let's go to OsVer\nnew_var = list()\na = list(mini_train['Census_OSVersion'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n  except:\n    pass\n  \n\n#Make the change\nmini_train['Census_OSVersion'] = pd.Series(new_var)","94102c00":"#Making the change to the testing data\n\nnew_var = list()\na = list(test['Census_OSVersion'])\n\nfor i in range(len(a)):\n  new_var.append(np.array(a[i].split('.')[0]).astype(np.int)*(1+np.sum(np.array(a[i].split('.')[1:3]).astype(np.float)*np.array([1,1\/100000]))))\n\n#Make the change\ntest['Census_OSVersion'] = pd.Series(new_var)","8443c72e":"#Next, let's go to OsVer\nnew_var = list()\na = list(mini_train['OsBuildLab'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.sum(np.array(a[i].split('.')[-1].split('-')).astype(np.int)*np.array([1,1\/10000])))\n  except:\n    pass\n\n#Make the change\nmini_train['OsBuildLab'] = pd.Series(new_var)","468370dd":"#Making the change to the testing data\n\nnew_var = list()\na = list(test['OsBuildLab'])\n\nfor i in range(len(a)):\n  try:\n    new_var.append(np.sum(np.array(a[i].split('.')[-1].split('-')).astype(np.int)*np.array([1,1\/10000])))\n  except:\n    pass\n\n#Make the change\ntest['OsBuildLab'] = pd.Series(new_var)","83706871":"#Let's these datasets to pickles\n#mini_train.to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/train_reduced_1.pkl\")\n#test.to_pickle(\"\/content\/drive\/My Drive\/Microsoft\/test_reduced_1.pkl\")","e3b6290f":"Awesome, so we've managed to deal with the missing value issue among our categorical variables.\n\nWe do still have an issue with some of them. The  issue is that some of our categorical variables such as EngineVersion have a high number of variables, and this will make it hard for encoding. Fortunately, they do have a relatively numeric structure, and we will use that to our advantage and turn them into numeric variables.........\n\nLet's take a look at the data to identify these variables...","cd919029":"Hmmm, PuaMode has quite a few missing values, let's do something about them......","47d55fca":"Let's examine the categorical variables further...","731f15a8":"# Microsoft Malware Prediction Data Exploration Part 2\n\nWelcome back to the next part of our data exploration. We took out some variables from the orginal data and made new training and testing datasets with less variable.\n","cda5d25e":"Okay, that is it for now, we'll start a new kernel for the third part of our data exploation.","8cd6323c":"So it looks like EngineVersion, AppVersion, AvSigVersion,CensusOsVersion, OsBuildLab are the only probalmatic ones"}}