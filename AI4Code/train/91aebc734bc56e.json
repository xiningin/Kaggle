{"cell_type":{"5ff6e945":"code","1028a24f":"code","5390ea2a":"code","227fc969":"code","0f40f4ef":"code","1f85b813":"code","da4e602d":"code","c9ae36ae":"code","efd1be74":"markdown"},"source":{"5ff6e945":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1028a24f":"heart = pd.read_csv(\"..\/input\/heart.csv\")\nheart.head(10)","5390ea2a":"heart.isnull().sum()\n#Wow this data looks so Clean, Let's See what else can we do!","227fc969":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,recall_score,precision_score,confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\nX = heart.loc[:,'thal':].as_matrix().astype('float')\ny= heart['target']","0f40f4ef":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\nprint(X_train.shape,X_test.shape)\nprint(y_train.shape,y_test.shape)","1f85b813":"model = LogisticRegression(random_state=0)\nmodel.fit(X_train,y_train)\nprint('Score: {0:.2f}'.format(model.score(X_test,y_test)))\nprint('Confusion Matrix : \\n{0}'.format(confusion_matrix(y_test,model.predict(X_test))))\nprint(\"Accuracy of Model : {0:.2f}\".format(accuracy_score(y_test,model.predict(X_test))))\nprint('Precision: {0:.2f}'.format(precision_score(y_test,model.predict(X_test))))\nprint('Recall: {0:.2f}'.format(recall_score(y_test,model.predict(X_test))))\n# Wow Our One Time Model gives 100% Accuracy. That is some serious Model.","da4e602d":"#To chaeck, let's pick a Sklearn Dummy Model\nfrom sklearn.dummy import DummyClassifier\ndummy = DummyClassifier(strategy = 'most_frequent',random_state = 0)\ndummy.fit(X_train,y_train)","c9ae36ae":"print('Accuracy: {0:.2f}'.format(accuracy_score(y_test,dummy.predict(X_test))))\nprint('Confusion Matrix : \\n{0}'.format(confusion_matrix(y_test,dummy.predict(X_test))))\nprint('Precision: {0:.2f}'.format(precision_score(y_test,dummy.predict(X_test))))\nprint('Recall: {0:.2f}'.format(recall_score(y_test,dummy.predict(X_test))))\n# So to compare, we can See that a most Requent Used Dummy Model has 56% of Accuracy.!","efd1be74":"##Hola! We tried a model and It best fits our data Set!\nNext we'll try to EDA this clean Data Set.\n#Contribute towards the Kernel to show what else can be performed.\n"}}