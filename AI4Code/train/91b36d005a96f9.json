{"cell_type":{"9bdb905f":"code","482f0bec":"code","3072d13c":"code","8c493d55":"code","10dec527":"code","dc7086bf":"code","f0b20cef":"code","06962615":"code","9eefcfbb":"code","9edcd962":"code","f0f163d7":"code","e4b50a66":"code","112a527d":"code","558d7063":"code","7ddcd3d2":"code","d9c6f83e":"code","960d2932":"code","ad116325":"code","841529b1":"code","24bd2a00":"code","4f1cd544":"code","65a2825a":"code","be4ac318":"code","256a02e0":"code","5c9dcd0f":"code","59f67871":"code","73d1ca56":"code","7288a66f":"code","31a1050b":"code","598733ea":"code","8fd43c78":"code","ed5dba7c":"markdown","dfc3a24e":"markdown","876fd4d9":"markdown","f6defa18":"markdown","6817c3ed":"markdown"},"source":{"9bdb905f":"# First up -\n# Add Data source for the kernel output to use for path data e.g. Concorde for 5 hours\n# Internet connected for kernel\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sympy   # for Primes\n\n# Input data files are available in the \"..\/input\/\" directory.\n# can list the files in the input directory and subdirectories when add data is used\nimport os\n#print(os.listdir(\"..\/input\"))\n# + Add Data e.g. Concorde for 5 hours kernel output\n#print(os.listdir(\"..\/input\/traveling-santa-2018-prime-paths\"))\n#print(os.listdir(\"..\/input\/concorde-for-5-hours\")) # V1\n#print(os.listdir(\"..\/input\/not-a-3-and-3-halves-opt\"))  # V2\n# Any results you write to the current directory are saved as output. ","482f0bec":"# Data load & prep\ncities = pd.read_csv('..\/input\/traveling-santa-2018-prime-paths\/cities.csv')\n#df_sub = pd.read_csv('..\/input\/concorde-for-5-hours\/submission.csv') # V2\ndf_sub = pd.read_csv('..\/input\/not-a-3-and-3-halves-opt\/1516094.5810868025.csv') #V2\n\nprimeset  = sympy.ntheory.generate.primerange(min(cities.CityId), max(cities.CityId))  \n\ncityprimes = np.zeros((max(cities.CityId)+1), dtype=int )\nfor p in primeset:\n    cityprimes[p] = 1     \n\ncities.loc[:,'isPrime'] = cityprimes \n\ndf_sub = pd.merge(df_sub,cities, how='left', left_on=['Path'], right_on=['CityId']  )\n# steps 1-10 every 10th would like prime\nsteps = (df_sub.index + 1) % 10\nsteps = np.array(steps, dtype=np.int64)\ndf_sub.loc[:,'steps'] = steps \ndf_sub.loc[:,'hitPrime'] = 0\ndf_sub.loc[((df_sub['isPrime'] ==1) & (df_sub['steps']==0)  ), 'hitPrime' ] = 1\ndf_sub.loc[:,'missPrime'] = 0\ndf_sub.loc[((df_sub['isPrime'] ==1) & (df_sub['steps']!=0)  ), 'missPrime' ] = 1\n#df_sub.head()\n","3072d13c":"# Set up Segments for frames  \n\nx = df_sub.X.values\ny = df_sub.Y.values\nhits = df_sub.hitPrime.values\nmisses = df_sub.missPrime.values\n\n# using 100 for segment length to keep movie size small \nseglength = 100  \nsegs = []\nseghits = []\nsegmisses = []\ncarrots = []\nmissed_carrots = []\ntotc = []\ntotmiss = []\nmaxseg = (len(df_sub.Path)\/\/ seglength)\nif (len(df_sub.Path) % seglength) != 0:\n    maxseg = (len(df_sub.Path)\/\/seglength) + 1\nfor i in range(0, maxseg ):\n    ifr = i*seglength\n    ito = ito = ifr + seglength\n    if ito > len(df_sub.Path):\n        ito = len(df_sub.Path)\n    segs.append([x[ifr:ito],y[ifr:ito]])\n    seghits.append([x[ifr:ito][hits[ifr:ito]==1], y[ifr:ito][hits[ifr:ito]==1]] )\n    carrots.append(len(seghits[i][0]))\n    totc.append(sum(carrots[:i+1]))\n    segmisses.append([x[ifr:ito][misses[ifr:ito]==1], y[ifr:ito][misses[ifr:ito]==1]] )\n    missed_carrots.append(len(segmisses[i][0]))\n    totmiss.append(sum(missed_carrots[:i+1]))\n\nn_frames = len(segs)\n#print(n_frames)\n","8c493d55":"# ffmpeg setup \n\n# inside a docker get ffmpeg binary to be able to use html5 animation and to save as mp4 & for audio edits, merge video and audio, etc.\n# N.B. may have to run twice to unpack - \n#      also date embedded in git build may change ","10dec527":"%%bash -e\nif ! [[ -f .\/ffmpeg-git-20181225-amd64-static\/ffmpeg ]]; then\n  echo 'not found' \n  wget https:\/\/johnvansickle.com\/ffmpeg\/builds\/ffmpeg-git-amd64-static.tar.xz\n  wget https:\/\/johnvansickle.com\/ffmpeg\/builds\/ffmpeg-git-amd64-static.tar.xz.md5\n  md5sum -c ffmpeg-git-amd64-static.tar.xz.md5\n  tar xvf ffmpeg-git-amd64-static.tar.xz\nfi","dc7086bf":"\n#%%bash\n#ls .\/ffmpeg-git-20181225-amd64-static","f0b20cef":"# imports and setup for matplotlib animation\n\n# set ffmpeg path before animation import - N.B. include ffmpeg not just dir\nfrom matplotlib import pyplot as plt\nplt.rcParams[\"animation.ffmpeg_path\"] = '\/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg'\nplt.rcParams[\"animation.html\"] = \"html5\" \nplt.rcParams[\"animation.embed_limit\"] = 200.0   # default is 20.0\n\n\nfrom IPython.display import HTML\nfrom matplotlib.animation import FFMpegWriter\nwriter = FFMpegWriter(fps=10, metadata=dict(artist='Rudolph'), bitrate=-1 ) # fps=10, ,extra_args=['-vcodec', 'libx264']) \n# defaults will use interval for fps, if -1  matplotlib chooses best bitrate - works best here\n\nimport matplotlib.animation as animation\nfrom matplotlib.lines import Line2D\nimport matplotlib.path as mpath\nfrom matplotlib import markers\nfrom matplotlib import colors\n\n\n%matplotlib inline\n","06962615":"# custom markers - cut wedg for carrots (prime on 0 step)\n\nhalfcirc = mpath.Path.unit_circle_righthalf()\nwedg = mpath.Path.wedge(60,120)\nwverts = np.concatenate([halfcirc.vertices, wedg.vertices[::-1, ...]])\nwcodes = np.concatenate([halfcirc.codes, wedg.codes])\ncut_wedg = mpath.Path(wverts, wcodes)\n","9eefcfbb":"# animation setup\n\ndef f(t):\n    x=segs[t][0]  \n    y=segs[t][1]  \n    return x,y\n\ndef f2(t):\n    x2=seghits[t][0]\n    y2=seghits[t][1]\n    return x2,y2\n    \ndef f3(t):\n    x3=segmisses[t][0]\n    y3=segmisses[t][1]\n    return x3,y3\n\nfig, ax = plt.subplots(figsize=(12.8,12.8))   # 20,20\nfig.suptitle('          Travelling Santa 2018 Prime Paths          ', color = 'r',fontsize=14, linespacing=14)\nplt.close()   # close plot to not display an empty plot \nax.set_aspect('equal')\nax.set_xlim(0,5100)\nax.set_ylim(0,3400)\nline = Line2D([],[])\nax.add_line(line)\n\ndef init_f():    \n    line = Line2D([],[])\n    line1 = Line2D([],[])\n    line2 = Line2D([],[])\n    ax.add_line(line)\n    ax.add_line(line1)\n    ax.add_line(line2)\n\n\ndef update(t):\n    x,y = f(t)\n    # optionally clear axes and reset limits\n    #plt.gca().cla() \n    #ax.set_aspect('equal')\n    #ax.set_xlim(0,5100)\n    #ax.set_ylim(0,3400)\n    line = Line2D(x,y,lw=2, color='tab:cyan',  marker=7, markevery=10, markerfacecolor= 'tab:gray' )\n    ax.add_line(line)\n        \n    x3,y3 = f3(t) \n    if len(x3)!=0:\n        line3 = Line2D(x3,y3, ls='None', marker=7,  markevery=1, markerfacecolor='k'  ) \n        ax.add_line(line3)  \n    \n    x2,y2 = f2(t)\n    if len(x2)!=0:\n        line2 = Line2D(x2,y2,ls='None', markevery=1, marker=cut_wedg, markersize=8, markeredgecolor='g', markerfacecolor='tab:orange')\n        ax.add_line(line2)\n        \n    # review spacing in title     \n    ax.set_title(' Frame: ' + str(t) + '      Carrots (orange):  ' + str(carrots[t]) + '  Total Carrots:  ' + str(totc[t])  \n                 + '   |    Missed 0 Primes (black):  ' + str(missed_carrots[t]) + '  Total Missed:  ' \n                 + str(totmiss[t]), color='g', fontweight=\"bold\", fontsize=14 )\n\nani = animation.FuncAnimation(fig, update, init_func=init_f, frames=n_frames, interval=100, blit=False, repeat=False) # fargs=None, repeat_delay=10 ,repeat=False)\n# interval in ms so depends how fast to set e.g. 100,200,500? set slow enough to see animation\n","9edcd962":"# to show animation in notebook as html5 video - \n#  (note this starts running as soon as notebook is opened) \n\n#HTML(ani.to_html5_video()) #  N.B. this needs ffmpeg to work\n\n# clear & reset plot after for animation save after to get fresh start\n#plt.gca().cla()  # if to_html5_video run clear before save \n#plt.close()   # close plot to not display an empty plot\n#fig, ax = plt.subplots(figsize=(12.8,12.8))   # 20,20\n#fig.suptitle('Travelling Santa 2018 Prime Paths', color = 'r',fontsize=14, linespacing=14)\n#plt.close()   # close plot to not display an empty plot \n#ax.set_aspect('equal')\n#ax.set_xlim(0,5100)\n#ax.set_ylim(0,3400)\n#line = Line2D([],[])\n#ax.add_line(line)\n","f0f163d7":"# save animation file\n\nani.save(\"travelling_santa.mp4\", writer=writer)  ","e4b50a66":"# to check file saved \n#print(os.listdir(\"\/kaggle\/working\/\"))","112a527d":"# Audio for movie creation\n\n# atm these are the downloads - codes may change, works to open this link in another window, may want to rename \n# TODO use bs to get from span class=\"playicn\"\n# http:\/\/freemusicarchive.org\/music\/Various_Artists_from_Dawn_of_Sound\/Voices_of_Christmas_Past\n# get the codes for each to use on wget, then they will be the same on commit\n\n# atm these are the downloads - codes may change, works to open this link in another window \n# http:\/\/freemusicarchive.org\/music\/Various_Artists_from_Dawn_of_Sound\/Voices_of_Christmas_Past\n# get the codes for each to use on wget, then they will be the same on commit\n\n# On a good old time sleigh ride [1913] by Peerless Quartet  \n#### https:\/\/freemusicarchive.org\/music\/download\/53ff20190913a4f6fefa0fd248dcabfac06a5130\n#### https:\/\/freemusicarchive.org\/music\/download\/63a63f4e6ee7ec1c71916ebe41d9e250aea2ccd4\n\n#https:\/\/freemusicarchive.org\/music\/download\/826050a8b9a82b57b8bffd6bd96a284b7e0aad74\n\n# Sleigh ride party \/ jingle bells [1898] by Edison Male Quartet   \n#### https:\/\/freemusicarchive.org\/music\/download\/1b94713d23b65f2588019fb530e10a11307d8b1a\n#### https:\/\/freemusicarchive.org\/music\/download\/5e1b73ab53ad38e75a27c86bd0d6f72b1a1d35ae\n\n#https:\/\/freemusicarchive.org\/music\/download\/5e9d25ecc1fffb4e6388649807664263f70b672e\n\n# Chinese Dance, Dance of the Mirilitons (from the Nutcracker) [1913] by Victor Herbert Orchestra \n#### https:\/\/freemusicarchive.org\/music\/download\/26fc3aa9132ffe2e90df4c42ec10faa30f376e28\n#### https:\/\/freemusicarchive.org\/music\/download\/84ce2911fc4e55de4b7a8ac5f622c8092a79060b\n\n#https:\/\/freemusicarchive.org\/music\/download\/922dd6d36f4da17e2c9ec8133a85aaf0d27e93d1\n\n","558d7063":"%%bash \nwget https:\/\/freemusicarchive.org\/music\/download\/826050a8b9a82b57b8bffd6bd96a284b7e0aad74\n","7ddcd3d2":"%%bash\nwget https:\/\/freemusicarchive.org\/music\/download\/5e9d25ecc1fffb4e6388649807664263f70b672e\n","d9c6f83e":"%%bash\nwget https:\/\/freemusicarchive.org\/music\/download\/922dd6d36f4da17e2c9ec8133a85aaf0d27e93d1\n","960d2932":"# to check downloads\n#print(os.listdir(\"\/kaggle\/working\/\"))","ad116325":"#%%bash\n#rmdir .\/ffmpeg-git-20181225-amd64-static","841529b1":"# imports for audio,video \n\nfrom IPython.display import display,Audio\nimport io\nimport base64\n","24bd2a00":"# to  test audio -   this works provided download is OK\n#audio = io.open('\/kaggle\/working\/84ce2911fc4e55de4b7a8ac5f622c8092a79060b', 'r+b').read()\n#encoded = base64.b64encode(audio)\n#HTML(data='''<audio alt=\"test\" controls>\n#                <source src=\"data:audio\/mp3;base64,{0}\" type=\"audio\/mp3\" \/>\n#             <\/audio>'''.format(encoded.decode('ascii')))\n","4f1cd544":"# some audio editing with ffmpeg \n# get a clip edit for a section of audio then concat with another audio at start\/end, e.g., use to extend audio to match video length","65a2825a":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i \/kaggle\/working\/5e9d25ecc1fffb4e6388649807664263f70b672e -af atrim=140:150  sleigh_edit.mp3\n","be4ac318":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i \/kaggle\/working\/922dd6d36f4da17e2c9ec8133a85aaf0d27e93d1 -af atrim=0:14  nut_edit.mp3\n","256a02e0":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i  \"concat:\/kaggle\/working\/sleigh_edit.mp3|\/kaggle\/working\/826050a8b9a82b57b8bffd6bd96a284b7e0aad74\" -codec copy out_sleigh_mix.mp3","5c9dcd0f":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i  \"concat:\/kaggle\/working\/922dd6d36f4da17e2c9ec8133a85aaf0d27e93d1|\/kaggle\/working\/nut_edit.mp3\" -codec copy out_nut_mix.mp3\n","59f67871":"# to test audio mix \n#audio = io.open('\/kaggle\/working\/out_sleigh_mix.mp3', 'r+b').read()\n#encoded = base64.b64encode(audio)\n#HTML(data='''<audio alt=\"test\" controls>\n#                <source src=\"data:audio\/mp3;base64,{0}\" type=\"audio\/mp3\" \/>\n#             <\/audio>'''.format(encoded.decode('ascii')))\n","73d1ca56":"# now to make the movies with animation saved and audio edits","7288a66f":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i \/kaggle\/working\/travelling_santa.mp4 -i \/kaggle\/working\/out_sleigh_mix.mp3 -codec copy sleigh_mix_travelling_santa2.mp4\n","31a1050b":"%%bash \n  \/kaggle\/working\/ffmpeg-git-20181225-amd64-static\/ffmpeg -i \/kaggle\/working\/travelling_santa.mp4 -i \/kaggle\/working\/out_nut_mix.mp3 -codec copy nutcracker_mix_travelling_santa2.mp4\n","598733ea":"# this works note controls like for HTML5 are hidden  \nvideo = io.open('\/kaggle\/working\/sleigh_mix_travelling_santa2.mp4', 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<video alt=\"travelling santa\" controls>\n                <source src=\"data:video\/mp4;base64,{0}\" type=\"video\/mp4\" \/>\n             <\/video>'''.format(encoded.decode('ascii')))\n","8fd43c78":"# this works note controls like for HTML5 are hidden  \nvideo = io.open('\/kaggle\/working\/nutcracker_mix_travelling_santa2.mp4', 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<video alt=\"travelling santa (nutcracker)\" controls>\n                <source src=\"data:video\/mp4;base64,{0}\" type=\"video\/mp4\" \/>\n             <\/video>'''.format(encoded.decode('ascii')))\n","ed5dba7c":"Start  the movie!!  (also available for download from here via right click  or from output for kernel as usual)   \n\n<h2>Travelling Santa - The Movie <\/h2>","dfc3a24e":"<h1>Travelling Santa 2018 Prime Paths - The Movie <\/h1>","876fd4d9":"<h2>Travelling Santa - The Movie (Nutcracker's Cut) <\/h2>","f6defa18":"<h3>Credits <\/h3> \n\n<b>Path data<\/b> courtesy of Concorde 5hr kernel  https:\/\/www.kaggle.com\/blacksix\/concorde-for-5-hours    V1\n<br>\n<b>Path data<\/b> courtesy of Not a 3 and 3 Halves kernel https:\/\/www.kaggle.com\/kostyaatarik\/not-a-3-and-3-halves-opt   V2 <i>(even more carrots!!)<\/i>\n\n<b>ffmpeg<\/b> with thanks to http:\/\/johnvansickle.com\/ffmpeg\/\n\n<b>Audio tracks - Attribution-Noncommercial-Share Alike 2.5 Canada<\/b>\nhttp:\/\/freemusicarchive.org\/music\/Various_Artists_from_Dawn_of_Sound\/Voices_of_Christmas_Past\n\nOn A Good Old Time Sleigh Ride [1913] by Peerless Quartet\n\nSleigh Ride Party, Jingle Bells [1898] by Edison Male Quartette\n\nChinese Dance, Dance of the Mirilitons (from the Nutcracker) [1913] by Victor Herbert Orchestra\n\n","6817c3ed":"<h3>Now in kernels this Christmas... <\/h3>\n\nThis leaked footage follows Santa's path as he travels to all the cities on his list.\n\nDid Rudolph's elf boffins find the shortest path for the reindeer's \"Prime\" carrot stopovers? \n\nWithout them, his reindeer, far from the Pole, overworked, energy depleted, exhausted... may wander off course... as the trip gets longer... they may give up entirely!! \n\nToo few carrots. Too much distance.  Too little time.  \n\nOh the Cervidae!!  (Not to mention the presents!!)\n\nWill Santa make it to all the cities in time?  Will the reindeer survive the ordeal? \n\nWatch this space!  Same Christmas Time!  Same Reindeer Station! \n\n\nSpoiler Alert - Some reindeer may not make it back to the Pole this year due to lack of carrots. \nApproach with caution and A BIG BAG of CARROTS, if they are found wandering around your neighbourhood.\n\n \n<i>No reindeer were harmed in the making of this film.<\/i>\n"}}