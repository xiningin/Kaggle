{"cell_type":{"0450b0c2":"code","2dd67b82":"code","ff22cd5b":"code","1b87cae1":"code","815efa9f":"code","ff34ba96":"code","b23e044c":"code","ea6bee46":"code","623f6b4f":"code","b4f0442a":"code","a52bd534":"code","947e7638":"code","248cc5bb":"code","6be40b31":"code","684aaa14":"code","670f81ac":"code","2c8c4061":"code","d4d6403a":"code","38b880a3":"code","f7d1c2f1":"code","4271e6b3":"code","927532f2":"code","17427017":"code","410dcd1b":"code","d3a9ec56":"code","3f1fe1d2":"code","ed52f660":"code","638effd7":"code","64775de0":"code","74fcd211":"code","16cdcffe":"code","44859434":"code","1bcf00b6":"code","8c50ad1e":"code","3d9f449b":"code","392687ba":"markdown","bb4e121c":"markdown","b70d6a79":"markdown","9c2badc2":"markdown","1f43f96e":"markdown","69e87bdb":"markdown","9cff685b":"markdown","ed3f2c9a":"markdown","609f9a5a":"markdown","2b9e9ea0":"markdown","fbfab20b":"markdown","4442f943":"markdown","c1836494":"markdown","70f26e2b":"markdown","c4f61c01":"markdown","040668b8":"markdown","2cc644cf":"markdown","4448d3db":"markdown","6f85f35a":"markdown","6b3b0068":"markdown","dfe65836":"markdown","42a0993e":"markdown","688df2c6":"markdown","cd6258d9":"markdown","244e3363":"markdown","71eebbc8":"markdown","075df1fd":"markdown","bffe2dd0":"markdown","937cdecc":"markdown","9f36dba1":"markdown","4ee48951":"markdown","e1f590f4":"markdown"},"source":{"0450b0c2":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2dd67b82":"covid_data = pd.read_excel('..\/input\/covid19\/dataset.xlsx')","ff22cd5b":"covid_data.head()","1b87cae1":"covid_data.shape","815efa9f":"covid_data[covid_data['SARS-Cov-2 exam result']=='positive'].shape[0]","ff34ba96":"positive_data = covid_data[covid_data['SARS-Cov-2 exam result']=='positive']","b23e044c":"sns.countplot(x='Patient age quantile', data=positive_data)","ea6bee46":"positive_data['Patient age quantile'].mean()","623f6b4f":"sns.countplot(x='SARS-Cov-2 exam result', data=covid_data, )","b4f0442a":"sns.countplot(x='Patient addmited to regular ward (1=yes, 0=no)', data=positive_data)","a52bd534":"sns.countplot(x='Patient addmited to semi-intensive unit (1=yes, 0=no)', data=positive_data)","947e7638":"sns.countplot(x='Patient addmited to intensive care unit (1=yes, 0=no)', data=positive_data)","248cc5bb":"covid_data = covid_data.fillna(0)","6be40b31":"results = pd.get_dummies(covid_data['SARS-Cov-2 exam result'])","684aaa14":"type_urine = pd.get_dummies(covid_data['Urine - Aspect'])","670f81ac":"cristais_urine = pd.get_dummies(covid_data['Urine - Crystals'])","2c8c4061":"color_urine = pd.get_dummies(covid_data['Urine - Color'])","d4d6403a":"cristais_urine = cristais_urine.drop([0], axis=1)\ntype_urine = color_urine.drop([0], axis=1)\ncolor_urine = color_urine.drop([0], axis=1)","38b880a3":"covid_data = pd.concat([covid_data,type_urine, cristais_urine, color_urine], axis=1)","f7d1c2f1":"covid_data = covid_data.drop(['Patient ID', 'Urine - Aspect', 'Urine - Crystals', 'Urine - Color'], axis=1)","4271e6b3":"covid_data = covid_data.replace(\"not_detected\", 0)\ncovid_data = covid_data.replace(\"detected\", 1)\ncovid_data = covid_data.replace(\"negative\", 0)\ncovid_data = covid_data.replace(\"positive\", 1)\ncovid_data = covid_data.replace(\"not_done\", 0)\ncovid_data = covid_data.replace(\"done\", 1)\ncovid_data = covid_data.replace(\"absent\", 0)\ncovid_data = covid_data.replace(\"Ausentes\", 0)\ncovid_data = covid_data.replace(\"present\", 1)\ncovid_data = covid_data.replace(\"normal\", 1)\ncovid_data = covid_data.replace(\"<1000\", 999)\ncovid_data = covid_data.replace(\"N\u00e3o Realizado\", 0)","927532f2":"covid_data['SARS-Cov-2 exam result'] = results['positive']","17427017":"X = covid_data.drop(['SARS-Cov-2 exam result'], axis=1)\ny = covid_data['SARS-Cov-2 exam result']","410dcd1b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","d3a9ec56":"rfc = RandomForestClassifier(n_estimators=600, max_depth=2, class_weight=\"balanced\")\nrfc.fit(X_train,y_train)\npredictions = rfc.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","3f1fe1d2":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","ed52f660":"knn = KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\npredictions = knn.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","638effd7":"svc_model = SVC(class_weight='balanced')\nsvc_model.fit(X_train,y_train)\npredictions = svc_model.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","64775de0":"covid_data['Triagem'] = covid_data.apply(lambda row: 1 if row['Patient addmited to regular ward (1=yes, 0=no)']==1 and row['Patient addmited to semi-intensive unit (1=yes, 0=no)']==0 and row['Patient addmited to intensive care unit (1=yes, 0=no)']==0 else 0, axis=1)\ncovid_data['Triagem'] = covid_data.apply(lambda row: 2 if row['Triagem']==0 and row['Patient addmited to regular ward (1=yes, 0=no)']==0 and row['Patient addmited to semi-intensive unit (1=yes, 0=no)']==1 and row['Patient addmited to intensive care unit (1=yes, 0=no)']==0 else row['Triagem'], axis=1)\ncovid_data['Triagem'] = covid_data.apply(lambda row: 3 if row['Triagem']==0 and row['Patient addmited to regular ward (1=yes, 0=no)']==0 and row['Patient addmited to semi-intensive unit (1=yes, 0=no)']==0 and row['Patient addmited to intensive care unit (1=yes, 0=no)']==1 else row['Triagem'], axis=1)","74fcd211":"covid_data = covid_data.drop(['Patient addmited to regular ward (1=yes, 0=no)','Patient addmited to semi-intensive unit (1=yes, 0=no)', 'Patient addmited to intensive care unit (1=yes, 0=no)'], axis=1)","16cdcffe":"X = covid_data.drop(['Triagem'], axis=1)\ny = covid_data['Triagem']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","44859434":"rfc = RandomForestClassifier(n_estimators=600, max_depth=2, class_weight=\"balanced\")\nrfc.fit(X_train,y_train)\npredictions = rfc.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","1bcf00b6":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","8c50ad1e":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train,y_train)\npredictions = knn.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","3d9f449b":"svc_model = SVC(class_weight='balanced')\nsvc_model.fit(X_train,y_train)\npredictions = svc_model.predict(X_test)\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","392687ba":"### Qnty data of positive","bb4e121c":"### Category of admission","b70d6a79":"## Data prep","9c2badc2":"### Suport Vector Machine","1f43f96e":"### Verify a qtdy positive cases per age","69e87bdb":"Analyzing the data, i got it that have minus that 600 cases confirmed. This is can hindered the results of model.\nBut, with data i chosen a Random Forest Classifier for represents a classification, because have a best performance in relationship of others models.","9cff685b":"### Using Get dummies for codification strings","ed3f2c9a":"## Conclusion","609f9a5a":"### Data Concatenate","2b9e9ea0":"### Filter positive cases","fbfab20b":"## Analyzing the Data","4442f943":"## Predict admission to general ward, semi-intensive unit or intensive care unit","c1836494":"### Knowing the data base","70f26e2b":"### KNN","c4f61c01":"### Logistic Regression","040668b8":"### Mean of age for positive cases","2cc644cf":"### Data Cleaning","4448d3db":"### Proportion of positive cases","6f85f35a":"### Import Libs","6b3b0068":"### Train test split","dfe65836":"### Random Forest Classifier - **Chosen**","42a0993e":"## Introduction","688df2c6":"### Replace nan for ","cd6258d9":"### Train test split","244e3363":"### Replace strings that are binary","71eebbc8":"### Logistic Regression","075df1fd":"### Analyzing a addmited in hospital","bffe2dd0":"## Predict confirmed COVID-19 cases among suspected cases","937cdecc":"## Machine Learning","9f36dba1":"### KNN","4ee48951":"### Random Forest Classifier - Chosen","e1f590f4":"### Suport Vector Machine"}}