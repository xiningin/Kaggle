{"cell_type":{"0402dbcf":"code","0f48f496":"code","82725e9a":"code","743fa4ef":"code","ef30a43c":"code","70b1844c":"code","811825a2":"code","237d6d81":"code","5c29b6c2":"code","4e16c1db":"code","cc3b758c":"code","e41d664b":"code","15a142a8":"code","5282bb7c":"code","d4669a20":"code","9f12c73f":"code","d86a7438":"code","259dc89d":"code","30b8d711":"code","6a7c3453":"code","67747568":"code","6818cc53":"code","fe16076b":"code","ae87f72d":"code","c4be5f1f":"code","33d951fe":"code","1c0bb99e":"code","abe653ab":"code","2e6a889a":"code","8b0cdae0":"markdown","0a2e1b22":"markdown","4a16428b":"markdown","336904c5":"markdown","aa5b2bf1":"markdown","e1f2761c":"markdown","417fa06f":"markdown"},"source":{"0402dbcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f48f496":"players = pd.read_excel('\/kaggle\/input\/ipl-data-set\/Players.xlsx')\nteams = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/teams.csv\")\ndeliveries = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/deliveries.csv\")\nmatches = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/matches.csv\",parse_dates=['date'])\nteamwise_home_and_away = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/teamwise_home_and_away.csv\")\nmost_runs_average_strikerate = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/most_runs_average_strikerate.csv\")","82725e9a":"players.head()","743fa4ef":"teams.head()","ef30a43c":"deliveries.head()","70b1844c":"matches.head()","811825a2":"teamwise_home_and_away.head()","237d6d81":"most_runs_average_strikerate.head()","5c29b6c2":"print(\"Number of teams:- \",teams['team1'].nunique())\nteams['team1'].unique()","4e16c1db":"deliveries.info()","cc3b758c":"matches.info()","e41d664b":"#Replacing the Full names by short names\nmatches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)","15a142a8":"deliveries.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)","5282bb7c":"print(\"No. of Umpires 1: \",matches['umpire1'].nunique())\nprint(\"No. of Umpires 2: \",matches['umpire2'].nunique())\nprint(\"No. of Umpires 3: \",matches['umpire3'].nunique())\nump_set1= set(matches['umpire1'].unique())\nump_set2=set(matches['umpire2'].unique())\nump_set3=set(matches['umpire3'].unique())\nall_set = ump_set1.intersection(ump_set2)\nall_set=all_set.intersection(ump_set3)\nprint(\"Umpires who umpired as 1st, 2nd & 3rd umpires: \",all_set)\nprint(\"Total Umpires:- \",len(all_set))","d4669a20":"#Number of matches umpired by each\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.subplots(figsize=(14,6))\nax=matches['umpire1'].value_counts().plot.bar(width=0.9,color=sns.color_palette('pastel',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()),(p.get_x()+0.15,p.get_height()+1))\nplt.xlabel(\"umpires \", fontsize=14)\nplt.ylabel(\"Counts \", fontsize=14)\nplt.title(\"Umpires-1 who have umpires most (from highest to lowest)\", fontsize=20)\nplt.show()\n","9f12c73f":"plt.subplots(figsize=(14,6))\nax=matches['umpire2'].value_counts().plot.bar(width=0.9,color=sns.color_palette('pastel',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xlabel(\"Umpires\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"Umpires-2 who have umpired most (from highest to lowest)\", fontsize=20)\nplt.show()","d86a7438":"plt.subplots(figsize=(14,6))\nax=matches['umpire3'].value_counts().plot.bar(width=0.9,color=sns.color_palette('pastel',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xlabel(\"Umpires\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"Umpires-3 who have umpired most (from highest to lowest)\", fontsize=20)\nplt.show()","259dc89d":"plt.subplots(figsize=(10,6))\nax=matches['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('RdYlGn',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.title(\"Teams that won the toss (from highest to lowest)\", fontsize=20)\nplt.xlabel(\"Teams\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.show()","30b8d711":"plt.subplots(figsize=(10,6))\nsns.countplot(x='Season',hue='toss_decision',data=matches,palette=sns.color_palette('bright',20))\nplt.title(\"decision to field or bat across seasons \")\nplt.show()","6a7c3453":"MOM = matches['player_of_match'].tolist()\ndef CountFrequency(MOM): \n    freq = {} \n    names=[]\n    win=[]\n    for item in MOM: \n        if (item in freq): \n            freq[item] += 1\n        else: \n            freq[item] = 1\n    for key, value in freq.items(): \n        names.append(key)\n        win.append(value)\n    dic={\"NAMES\":names,\"No. of MOM\": win}\n    return dic\ndata=CountFrequency(MOM)\nPoM=pd.DataFrame.from_dict(data)\nPoM","67747568":"df_sorted=PoM.nlargest(10, ['No. of MOM']) \ndf_sorted","6818cc53":"plt.figure(figsize=(10,6),dpi=200)\nplt.bar(df_sorted['NAMES'],df_sorted['No. of MOM'])\nplt.xticks(df_sorted['NAMES'], rotation=70,fontsize=10,fontweight='bold')\nplt.yticks(np.arange(0,23),fontsize=11)\nplt.title('Player of the match', fontsize=14,fontweight='bold')\nplt.ylabel('no. of wins', fontsize=12,fontweight='bold')\nplt.legend()\nplt.grid()\nplt.show()","fe16076b":"print(\"Total number of Cities played: \",matches['city'].nunique())\nprint(\"Total number of Venues played: \",matches['venue'].nunique())","ae87f72d":"plt.figure(figsize=[14,7],dpi=250)\nplt.xticks(rotation=90)\nsns.countplot('venue',data=matches)\nax=plt.gca()\nax.set_xlabel('Grounds')\nax.set_ylabel('Count')\nplt.title(\"Venues played \")\nplt.show()","c4be5f1f":"per=matches.pivot_table(index=['winner','Season'],aggfunc='size')\nper=pd.DataFrame(per)\nper.rename(columns={0:'wins'},inplace=True)\nper.reset_index(inplace=True)\nCSK=per[per['winner'] == 'CSK']\nRCB=per[per['winner']=='RCB']\nMI=per[per['winner']=='MI']\nKKR=per[per['winner']=='KKR']\nKXIP=per[per['winner']=='KXIP']\nRR=per[per['winner']=='RR']\nDD=per[per['winner']=='DD']","33d951fe":"fig = plt.figure(figsize=(14,12))\n#  subplot #1\nplt.subplot(331)\nplt.title('Chennai Super King', fontsize=14)\nplt.plot(CSK['Season'],CSK['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n#  subplot #2\nplt.subplot(332)\nplt.title('Royal Challanger Bangalore', fontsize=14)\nplt.plot(RCB['Season'],RCB['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n\n#  subplot #3\nplt.subplot(333)\nplt.title('Mumbai Indians', fontsize=14)\nplt.plot(MI['Season'],MI['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n\n#  subplot #4\nplt.subplot(334)\nplt.title('Kolkata Knight Riders', fontsize=14)\nplt.plot(KKR['Season'],KKR['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n\n#  subplot #5\nplt.subplot(335)\nplt.title('Rajasthan Royals', fontsize=14)\nplt.plot(RR['Season'],RR['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n#subplot 6\nplt.subplot(336)\nplt.title('Kings XI Punjab', fontsize=14)\nplt.plot(KXIP['Season'],KXIP['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\n\n#subplot 7\nplt.subplot(337)\nplt.title('Delhi Daredevils', fontsize=14)\nplt.plot(DD['Season'],DD['wins'],'-o')\nplt.xticks(ticks=np.arange(13),labels= DD['Season'], rotation=70)\nplt.tight_layout()\nplt.show()\n","1c0bb99e":"#Total number of matches\nprint(len(matches[matches['team1']=='CSK']) + len(matches[matches['team2']=='CSK']))\nprint(len(matches[matches['team1']=='MI']) + len(matches[matches['team2']=='MI']))\nprint(len(matches[matches['team1']=='KKR']) + len(matches[matches['team2']=='KKR']))\nprint(len(matches[matches['team1']=='RR']) + len(matches[matches['team2']=='RR']))\nprint(len(matches[matches['team1']=='RCB']) + len(matches[matches['team2']=='RCB']))\nprint(len(matches[matches['team1']=='KXIP']) + len(matches[matches['team2']=='KXIP']))\nprint(len(matches[matches['team1']=='SRH']) + len(matches[matches['team2']=='SRH']))\nprint(len(matches[matches['team1']=='DD']) + len(matches[matches['team2']=='DD']))","abe653ab":"Stat=deliveries.groupby('batting_team')['total_runs'].sum()","2e6a889a":"print('chennai average score :',  Stat['CSK']\/162)\nprint('Mumbai average score :',  Stat['MI']\/184)\nprint('Kolkata average score :',  Stat['KKR']\/177)\nprint('Rajasthan average score :',  Stat['RR']\/144)\nprint('Banglore average score :',  Stat['RCB']\/175)\nprint('punjab average score :',  Stat['KXIP']\/175)\nprint('Hyderabad average score :',  Stat['SRH']\/106)\nprint('Delhi average score :',  Stat['DD']\/157)","8b0cdae0":"We can clearly see that HDPK Dharmasena is umpires most the matches.","0a2e1b22":"## Winning Team","4a16428b":"## Performance(no. of wins) of each team throughout different seasons(2008-2019)","336904c5":"## Toss Decisions","aa5b2bf1":"## Data Cleaning","e1f2761c":"## Umpires stats","417fa06f":"## Highest average batting score"}}