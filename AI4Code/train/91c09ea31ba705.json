{"cell_type":{"e6707cfb":"code","e908b533":"code","47ce57ff":"code","b6b60660":"code","037330c9":"code","1e3929fc":"code","bde1690d":"code","29b680d3":"code","a47dfe61":"code","01c7a105":"code","631a93f4":"code","eb1d568e":"code","312903c9":"code","f058408b":"code","5f0e35ff":"code","a882a579":"code","9a88f052":"code","8dd21f0b":"code","12a372a9":"code","2a80a185":"code","ec5b396a":"code","e2e0c464":"code","92a0346d":"code","1fe433e2":"markdown","b131fef5":"markdown","1aa842dc":"markdown","4af09008":"markdown","35e73765":"markdown","304a9adb":"markdown","5ae3ff92":"markdown","be8e66bc":"markdown","f19423b9":"markdown","307e3f33":"markdown","ee832de0":"markdown","c2639b14":"markdown","bba0a7bf":"markdown"},"source":{"e6707cfb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('mode.chained_assignment', None)\nfrom sklearn import svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.preprocessing import LabelEncoder\nimport pylab as pl","e908b533":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","47ce57ff":"train.head()","b6b60660":"test.head()","037330c9":"train.pivot_table('PassengerId', 'Sex', 'Survived', 'count').plot(kind='bar', stacked=True)","1e3929fc":"train.pivot_table('PassengerId', 'Pclass', 'Survived', 'count').plot(kind='bar', stacked=True)","bde1690d":"fig, axes = plt.subplots(ncols=2)\ntrain.pivot_table('PassengerId', ['SibSp'], 'Survived', 'count').plot(ax=axes[0], title='SibSp')\ntrain.pivot_table('PassengerId', ['Parch'], 'Survived', 'count').plot(ax=axes[1], title='Parch')","29b680d3":"train.isnull().count()","a47dfe61":"train.PassengerId[train.Cabin.notnull()].count()","01c7a105":"train.PassengerId[train.Age.notnull()].count()","631a93f4":"train.Age = train.Age.median()","eb1d568e":"train[train.Embarked.isnull()]","312903c9":"MaxPassEmbarked = train.groupby('Embarked').count()['PassengerId']\ntrain.Embarked[train.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]","f058408b":"train.PassengerId[train.Fare.isnull()]","5f0e35ff":"train = train.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)\ntrain","a882a579":"label = LabelEncoder()\ndicts = {}\n\nlabel.fit(train.Sex.drop_duplicates()) \ndicts['Sex'] = list(label.classes_)\ntrain.Sex = label.transform(train.Sex)\n\nlabel.fit(train.Embarked.drop_duplicates())\ndicts['Embarked'] = list(label.classes_)\ntrain.Embarked = label.transform(train.Embarked)","9a88f052":"train","8dd21f0b":"test.Age[test.Age.isnull()] = test.Age.mean()\ntest.Fare[test.Fare.isnull()] = test.Fare.median()\nMaxPassEmbarked = test.groupby('Embarked').count()['PassengerId']\ntest.Embarked[test.Embarked.isnull()] = MaxPassEmbarked[MaxPassEmbarked == MaxPassEmbarked.max()].index[0]\nresult = pd.DataFrame(test.PassengerId)\ntest = test.drop(['Name','Ticket','Cabin','PassengerId'],axis=1)\n\nlabel.fit(dicts['Sex'])\ntest.Sex = label.transform(test.Sex)\n\nlabel.fit(dicts['Embarked'])\ntest.Embarked = label.transform(test.Embarked)","12a372a9":"test","2a80a185":"target = train.Survived\npredictors = train.drop(['Survived'], axis=1)\nkfold = 5\nitog_val = {} ","ec5b396a":"ROCtrainTRN, ROCtestTRN, ROCtrainTRG, ROCtestTRG = train_test_split(train, target, test_size=0.25)","e2e0c464":"model_rfc = RandomForestClassifier(n_estimators = 80, max_features='auto', criterion='entropy',max_depth=4)","92a0346d":"model_rfc.fit(predictors, target)\nresult.insert(1,'Survived', model_rfc.predict(test))\nresult.to_csv('HuzaifahSaleem_predictions.csv', index=False)","1fe433e2":"# Data Exploration","b131fef5":"## Importing necessary packages","1aa842dc":"## Importing Datasets and printing them out","4af09008":"## Checking out the relationship between ticket class and survivor","35e73765":"We can see that there were more passengers in ticket class 3 and therefore there were more fatalities in 3rd class","304a9adb":"Enough with the data exploration lets process the data so that its ready for the ML model since we can see their are some columns which need encoding too. After that we will split the data in training and testing parts too.","5ae3ff92":"## Checking the relationship of PassengerId with their number of Siblings\/Parents","be8e66bc":"### Preprocess the Test data set with the same commands to get the max testing score as well","f19423b9":"lets see if there are any null or empty values. we will have to fill the necessary fields up with either mean or zscore or median","307e3f33":"lets split training data into predictors and target","ee832de0":"We can see that it is true that there are more female survivors than men but its not enough to claim that survivors were all females","c2639b14":"## Data Preparation","bba0a7bf":"## Checking out the relationship between survivor and gender"}}