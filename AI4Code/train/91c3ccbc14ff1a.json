{"cell_type":{"9d2983c9":"code","eb483a4a":"code","0e8fd6b8":"code","e3872d5a":"code","86540408":"code","4501fca5":"code","e81728bc":"code","5da078e6":"code","5e1d92aa":"code","266b083b":"code","7d1c261e":"code","f5e24f47":"code","06ed10d8":"code","700b00b7":"code","e952baf8":"code","4623061f":"code","586f7a09":"code","a3be9bad":"code","fd779f5d":"code","48389e7c":"code","72f24cef":"code","7be0e898":"code","b4b7ec6d":"code","9afbd58e":"code","5d16230f":"code","b53fb906":"code","51a99e19":"code","4e422707":"code","11158c66":"code","3a410e70":"code","9519a0d7":"code","730a3f82":"code","3af2f4dd":"code","1e662ba5":"code","21119d99":"code","b2859767":"code","611e93fe":"code","7afb9877":"code","01b823e6":"code","56158e59":"code","91bc1631":"code","001b4fd0":"code","e7c3e239":"code","149c4c7d":"code","ed92a7c8":"code","b8725642":"markdown","82fbd0a1":"markdown","7047b46e":"markdown","e85897c8":"markdown","8dbe732f":"markdown","e286fdd9":"markdown","a8578834":"markdown","4c7543fb":"markdown","969ae815":"markdown","dfd62db7":"markdown","3bb66fe0":"markdown","ea856956":"markdown","68a5b236":"markdown","ac7e29c3":"markdown","c9ceedb4":"markdown","68785d06":"markdown","cbd8c5c9":"markdown","c528f845":"markdown","e436c151":"markdown","f59f2e6c":"markdown","a9804801":"markdown","c0b0c824":"markdown","9462b1ba":"markdown","ace81099":"markdown","7727385f":"markdown"},"source":{"9d2983c9":"import math\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\n\nimport plotly.offline as pyo\nfrom datetime import datetime\n\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npyo.init_notebook_mode()","eb483a4a":"#packages\n#if needs, use 'pip install beautifulsoup4' in console to install \n#--Web scrapping packages\n\n!pip install beautifulsoup4\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n#-- COVID-19 statistics\nwebsite='https:\/\/www.worldometers.info\/coronavirus\/' # url for the site \nwebsite_url=requests.get(website).text\nsoup = BeautifulSoup(website_url,'html.parser')\n\nmy_table1 = soup.find('tbody')\n\ntable_data1 = []\nfor row in my_table1.findAll('tr'):\n    row_data = []\n    for cell in row.findAll('td'):\n        row_data.append(cell.text)\n    if(len(row_data) > 0):\n        data_item1 = {\"country\": row_data[1],\n                     \"TotalCases\": row_data[2],\n                     \"NewCases\": row_data[3],\n                     \"TotalDeaths\": row_data[4],\n                     \"NewDeaths\": row_data[5],\n                     \"TotalRecovered\": row_data[6],\n                     \"ActiveCases\": row_data[8],\n                     \"CriticalCases\": row_data[9],\n                     \"Totcase1M\": row_data[10],\n                     \"Totdeath1M\": row_data[11],\n                     \"TotalTests\": row_data[12],\n                     \"Tottest1M\": row_data[13],\n                     \"Population\": row_data[14],\n        }\n        \n        table_data1.append(data_item1)\n        df=pd.DataFrame(table_data1)\n        \n        #remove the rows which has information on contient- that is not going to be use- better to remove\n        df=df.tail(-8)","0e8fd6b8":"df.head()","e3872d5a":"#Remove '+' from the select columns\ndf['NewCases'] = df['NewCases'].str.replace('+','')\ndf['NewDeaths'] = df['NewDeaths'].str.replace('+','')\ndf['ActiveCases'] = df['ActiveCases'].str.replace('+','')","86540408":"df.head(100)","4501fca5":"#-- GDP per capita (2017)\nwebsite='https:\/\/www.worldometers.info\/gdp\/gdp-per-capita\/' # url for the site \nwebsite_url=requests.get(website).text\nsoup = BeautifulSoup(website_url,'html.parser')\n\nmy_table2 = soup.find('tbody')\n\ntable_data2 = []\nfor row in my_table2.findAll('tr'):\n    row_data = []\n    for cell in row.findAll('td'):\n        row_data.append(cell.text)\n    if(len(row_data) > 0):\n        data_item2 = {\"country\": row_data[1],\n                     \"GDP_ppp\": row_data[2],\n                     \"GDP_nominal\": row_data[3],\n                     \"vsWorld_ppp\": row_data[4]\n        }\n        table_data2.append(data_item2)","e81728bc":"df2 = pd.DataFrame(table_data2)\n\n#Remove '+' from the select columns\ndf2['GDP_ppp'] = df2['GDP_ppp'].str.replace('$','')\ndf2['GDP_nominal'] = df2['GDP_nominal'].str.replace('$','')\ndf2['vsWorld_ppp'] = df2['vsWorld_ppp'].str.replace('%','')\n\n#revise the name of few countries\n\ndf2.country = df2.country.replace().replace({\n    \"Czechia\": \"Czech Republic\", \n    \"United States\": \"USA\", \n    \"United Kingdom\": \"UK\", \n    \"Isle of Man\": \"Isle Of Man\"\n})\n\n#Also remove these three states as they are already part of UK.\ndf2 = df2[df2.country.apply(lambda x: x not in ['England', 'Scotland', 'Wales'])]\n\ndf2.head(200)","5da078e6":"vacc_df = pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\nvacc_df.head()\n\n#revise the name of few countries\n\nvacc_df.country = vacc_df.country.replace().replace({\n    \"Czechia\": \"Czech Republic\", \n    \"United States\": \"USA\", \n    \"United Kingdom\": \"UK\", \n    \"Isle of Man\": \"Isle Of Man\"\n})\n\n#Also remove these three states as they are already part of UK.\nvacc_df = vacc_df[vacc_df.country.apply(lambda x: x not in ['England', 'Scotland', 'Wales'])]","5e1d92aa":"print(vacc_df.country.unique().tolist())\nprint(df.country.unique().tolist())\nprint(df2.country.unique().tolist())","266b083b":"\nlist(vacc_df.columns)\n#vacc_df.head(200)","7d1c261e":"# define agrregate columns\ndef aggregate(df: pd.Series, agg_col: str) -> pd.DataFrame:\n    \n    data = df.groupby(\"country\")[agg_col].max()\n    data = pd.DataFrame(data)\n    \n    return data","f5e24f47":"#--merging: i) Vaccination data, ii) COVID-19 data, and iii) GDP data\n\n# variables included in summarization\ncols_to_summarize = ['people_vaccinated', \n                     'people_vaccinated_per_hundred', \n                     'people_fully_vaccinated', \n                     'people_fully_vaccinated_per_hundred', \n                     'total_vaccinations_per_hundred', \n                     'total_vaccinations', 'daily_vaccinations']\n\nsummary = df.set_index(\"country\")\nvaccines = vacc_df[['country', 'vaccines']].drop_duplicates().set_index('country')\nsummary = summary.join(vaccines)\n\nfor col in cols_to_summarize:   \n    summary1 = summary.join(aggregate(vacc_df, col))\n    \n#--GDP per capita (2017)\n\nGDP = df2[['country', 'GDP_nominal']].drop_duplicates().set_index('country')\nsummary1 = summary1.join(GDP)","06ed10d8":"summary1.head(200)\n#print(type('TotalDeaths\t')) \n#list(summary1.columns)","700b00b7":"#Since all the quantatitive variables are in Str format, they have to be changed to numeric\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\nsummary1.TotalDeaths= labelencoder.fit_transform(summary1.TotalDeaths)\nsummary1.Population= labelencoder.fit_transform(summary1.Population)\nsummary1.TotalCases= labelencoder.fit_transform(summary1.TotalCases)\nsummary1.daily_vaccinations= labelencoder.fit_transform(summary1.daily_vaccinations)\nsummary1.TotalTests= labelencoder.fit_transform(summary1.TotalTests)\nsummary1.GDP_nominal[pd.isnull(summary1.GDP_nominal)]  = 'NaN' #Since it has both str and float types so converting everything into 'NaN'\nsummary1.GDP_nominal= labelencoder.fit_transform(summary1.GDP_nominal)\n","e952baf8":"summary1['COVIDdeaths'] = summary1.TotalDeaths \/ summary1.Population * 10000\nsummary1['tested_positive'] = summary1.TotalCases \/ summary1.TotalTests * 10000\nsummary1['GDPvacc'] = summary1.daily_vaccinations \/ summary1.GDP_nominal * 10000\nsummary1['GDPtest'] = summary1.TotalTests \/ summary1.GDP_nominal * 10000","4623061f":"summary1.head(200)\n#list(summary1.columns)","586f7a09":"#helper function\ndef get_multi_line_title(title:str, subtitle:str):\n    return f\"{title}<br><sub>{subtitle}<\/sub>\"\n\ndef visualize_column(data: pd.DataFrame, xcolumn: str, ycolumn:str, title:str, colors:str, ylabel=\"Count\", n=None):\n    hovertemplate ='<br><b>%{x}<\/b>'+f'<br><b>{ylabel}: <\/b>'+'%{y}<br><extra><\/extra>'    \n    data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])        \n    \n    if n is not None: \n        data = data.iloc[:n]\n    else:\n        n = \"\"\n    fig = go.Figure(go.Bar(\n                    hoverinfo='skip',\n                     x=data[xcolumn], \n                     y=data[ycolumn], \n                     hovertemplate = hovertemplate,\n                     marker=dict(\n                         color = data[ycolumn],\n                         colorscale=colors,\n                        ),\n                    ),\n                )\n    \n    fig.update_layout(\n        title=title,\n        xaxis_title=f\"Top {n} {xcolumn.title()}\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgba(0,0,0,0)',\n        hovermode=\"x\"\n    )\n    \n    fig.show()  ","a3be9bad":"vaccine = vacc_df.groupby([\"vaccines\"])['total_vaccinations','total_vaccinations_per_hundred',\n                                       'daily_vaccinations','daily_vaccinations_per_million'].max().reset_index()\nvaccine.columns = [\"Vaccines\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\"]\ndef draw_trace_bar_vaccine(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['Vaccines'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Vaccines']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest'\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')\n    \ndraw_trace_bar_vaccine(vaccine, 'Total vaccinations', 'Total per vaccine scheme', 'Vaccine', 'Vaccination total', \"darkmagenta\" )\n","fd779f5d":"country = vacc_df.groupby([\"country\"])['total_vaccinations','total_vaccinations_per_hundred',\n                                       'daily_vaccinations','daily_vaccinations_per_million'].max().reset_index()\ncountry.columns = [\"country\", \"Total vaccinations\", \"Percent\", \"Daily vaccinations\", \n                           \"Daily vaccinations per million\"]\ndef draw_trace_bar_country(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)\n    trace = go.Bar(\n            x = data['country'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['country']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=10,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest'\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')\n    \ndraw_trace_bar_country(country, 'Total vaccinations', 'Total per country scheme', 'country', 'Vaccination total', \"darkmagenta\" )\n","48389e7c":"#Daily vaccination trend\/day\n#step 1\nvacc_df.to_csv('dataframe.csv', index=False)\ndf_f = vacc_df.pivot_table(values='daily_vaccinations', index=['date'], columns = 'iso_code')\ndf_f[:20]","72f24cef":"vacc_df['iso_code'].value_counts()[:10]","7be0e898":"a = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'USA']['total_vaccinations'].cumsum()).reset_index()\nb = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'GBR']['total_vaccinations'].cumsum()).reset_index()\nc = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'CAN']['total_vaccinations'].cumsum()).reset_index()\nd = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'CHN']['total_vaccinations'].cumsum()).reset_index()\ne = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'ISR']['total_vaccinations'].cumsum()).reset_index()\nf = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'RUS']['total_vaccinations'].cumsum()).reset_index()\ng = pd.DataFrame(vacc_df[vacc_df['iso_code']== 'MEX']['total_vaccinations'].cumsum()).reset_index()\n\nan = a.append(b)\nbn = an.append(c)\ncn = bn.append(d)\ndn = cn.append(e)\nen = dn.append(f)\n\nfinal = en.append(g)","b4b7ec6d":"final.head(200)","9afbd58e":"vacc_df = vacc_df.reset_index()\nfinal['TOTAL VACC'] = final['total_vaccinations']*1","5d16230f":"df_5 = vacc_df.merge(final, left_on='index', right_on='index', how='inner')","b53fb906":"df_5.info()","51a99e19":"fig = px.scatter(df_5, x=\"daily_vaccinations\", y=\"TOTAL VACC\", animation_frame=\"date\", animation_group=\"iso_code\",\n           hover_name=\"iso_code\", text='iso_code',range_x=[0,1500000], range_y=[0,175000000])\n\nfig.update_traces(marker=dict(size=40,  color='DarkSlateGrey'))\n\nfig.show()","4e422707":"list(summary1.columns)","11158c66":"#Total vaccinated per 10,000 population around the globe (GIS)\nfig = go.Choropleth(locations = vacc_df[\"country\"],locationmode = 'country names',z = vacc_df['daily_vaccinations'],\n                                         text= vacc_df['country'],\n                    colorbar = dict(title= \"Daily vaccinations\"),reversescale =True,colorscale = 'viridis')\ndata = [fig]\n\nlayout = go.Layout(title = 'Daily Vaccinations according to each Country')\nfig = dict(data = data,layout = layout)\niplot(fig)","3a410e70":"summary1.head()","9519a0d7":"# follow the same steps as above\n#Total confirmed per 10,000 tested around the globe (GIS)\n#summary1['percentage_vaccinated'] = summary1.TotalDeaths \/ summary1.Population * 100\n#summary1['tested_positive'] = summary1.TotalCases \/ summary1.TotalTests * 10000\n#summary1['GDPvacc'] = summary1.daily_vaccinations \/ summary1.GDP_nominal * 10000\n#summary1['GDPtest'] = summary1.TotalTests \/ summary1.GDP_nominal * 10000\n\ndf3=summary1.reset_index('country')\n\nfig = go.Choropleth(locations = df3[\"country\"],locationmode = 'country names',z = df3['tested_positive'],\n                                         text= df3['country'],colorbar = dict(title= \"tested_positive\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'Total Cases per Countries')\nfig = dict(data = data,layout = layout)\niplot(fig)","730a3f82":"# follow the same steps as above\n#Total vaccinated per 10,000 USD GDP (nominal) around the globe (GIS)\nfig = go.Choropleth(locations = df3[\"country\"],locationmode = 'country names',z = df3['GDPvacc'],\n                                         text= df3['country'],colorbar = dict(title= \"GDPvacc\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'Total vaccinated per 10,000 GDP per capita')\nfig = dict(data = data,layout = layout)\niplot(fig)","3af2f4dd":"# follow the same steps as above\n#Total tested per 10,000 USD GDP (nominal) around the globe (GIS)\nfig = go.Choropleth(locations = df3[\"country\"],locationmode = 'country names',z = df3['GDPtest'],\n                                         text= df3['country'],colorbar = dict(title= \"GDPtest\") )\ndata = [fig]\n\nlayout = go.Layout(title = 'Total tested per 10,000 GDP per capita')\nfig = dict(data = data,layout = layout)\niplot(fig)","1e662ba5":"list(df3.columns)\n#df3.head(300)","21119d99":"def plot_custom_scatter(df3, x, y, size, color, hover_name, title):\n    fig = px.scatter(df3, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title)\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.2))\n    fig.update_layout({'legend_title':'Vaccine scheme'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.show() ","b2859767":"df3.head()","611e93fe":"# follow the same steps as above\n# 2-D Graph: Daily vaccination vs GDP per capita \nplot1=pd.DataFrame(df3,columns=['country','GDP_nominal','daily_vaccinations','Population','vaccines'])\nplot2=plot1.dropna()\nplot_custom_scatter(plot2, x=\"GDP_nominal\", y=\"daily_vaccinations\", size=\"Population\", color=\"vaccines\",\n           hover_name=\"country\", title = \"Daily vaccination vs GDP per capita, grouped per country and vaccines\")","7afb9877":"# 2-D Graph: Total tests vs GDP per capita\nplot1=pd.DataFrame(df3,columns=['country','GDP_nominal','TotalTests','Population','vaccines'])\nplot2=plot1.dropna()\n\nplot_custom_scatter(plot2, x=\"GDP_nominal\", y=\"TotalTests\", size=\"Population\", color=\"vaccines\",\n           hover_name=\"country\", title = \"Total tests vs GDP per capita, grouped per country and vaccines\")\n","01b823e6":"# 2-D Graph: Total cases vs deaths\nplot1=pd.DataFrame(df3,columns=['country','GDP_nominal','TotalCases','Population','TotalDeaths'])\nplot2=plot1.dropna()\n\nplot_custom_scatter(plot2, x=\"TotalCases\", y=\"TotalDeaths\", size=\"Population\", color=\"GDP_nominal\",\n           hover_name=\"country\", title = \"Total cases vs total deaths, grouped per country and GDP per capita\")","56158e59":"# 2-D Graph: Total tests vs population \nplot1=pd.DataFrame(df3,columns=['country','GDP_nominal','TotalTests','Population','vaccines'])\nplot2=plot1.dropna()\n\nplot_custom_scatter(plot2, x=\"TotalTests\", y=\"Population\", size=\"GDP_nominal\", color=\"vaccines\",\n           hover_name=\"country\", title = \"Total tests vs population, grouped per country and GDP per capita\")","91bc1631":"#The daily vaccination drive around the globe\ndates = vacc_df.date.unique().tolist()\n# countries without repetition use 'unique'\ncountries = vacc_df.country.unique().tolist()\nshort = vacc_df[['date', 'country', 'daily_vaccinations']]\n\n# i.e we want to make sure we have some data for each, even if it is 0 \nkeys= list(zip(short.date.tolist(), short.country.tolist()))\nfor date in dates:\n    for country in countries:\n        idx = (date, country)\n        if idx not in keys:\n            if date == min(dates):\n                # this means there's no entry for {country} on the earliest date \n                short = short.append({\n                    \"date\": date, \n                    \"country\": country, \n                    \"daily_vaccinations\": 0\n                }, ignore_index=True)\n            else:\n                # entry for {country} is missing on a date other than the earliest\n                short = short.append({\n                    \"date\": date, \n                    \"country\": country, \n                    \"daily_vaccinations\": pd.NA\n                }, ignore_index=True)\n                \n#fill missing values with previous day values (this is OK since it is cumulative)\nshort = short.sort_values(['country', 'date'])\n\nshort.daily_vaccinations = short.daily_vaccinations.fillna(method='ffill')\n\n# scale the number by log to make the color transitions smoother\nvaccines = short.sort_values('date')\nvaccines['log_scale'] = vaccines['daily_vaccinations'].apply(lambda x : math.log2(x+1))\n\nfig =px.choropleth(vaccines, locations=\"country\", \n                    locationmode='country names',\n                    color=\"log_scale\", \n                    hover_name=\"country\", \n                    hover_data=['log_scale', \"daily_vaccinations\"],\n                    animation_frame=\"date\",\n                    color_continuous_scale=\"blues\",\n                   )\n\ntitle = get_multi_line_title(\"Vaccination Progress\", \"Daily Vaccination Around the Globe\")\nfig.update_layout(coloraxis={\"cmax\":25,\"cmin\":0})\nfig.update_layout(title=title, title_x=0.5, coloraxis_showscale=False)\n\nfig.show()","001b4fd0":"#-Trend in Daily vaccination per 10,000 population by country - (trend line for each country)\ndef plot_trend(dataframe,feature,title,country):\n    plt.style.use('fast')\n    plt.figure(figsize=(20,25))\n    \n    for i,country in enumerate(country):\n        plt.subplot(8,4,i+1)\n        data = dataframe[dataframe['country'] == country]\n        sns.lineplot(x=data['date'] ,y=data[feature],label = feature)\n        plt.xlabel('')\n        plt.tick_params(axis='x',which='both',top=False,bottom=False,labelbottom=False)\n        plt.title(country)\n        \n    plt.suptitle(title,y=1.05)\n    plt.tight_layout()\n    plt.show()\n    \ncountry = ['Argentina', 'Brazil', 'Austria', 'Belgium', 'Brazil','Canada','China','Denmark', 'Finland', 'France',\n       'Germany','India','Ireland', 'Israel', 'Italy', 'Kuwait','India', 'Nepal','Mexico', 'Netherlands','Norway', 'Poland','Russia',\n        'Saudi Arabia', 'Singapore','Spain', 'Sweden', 'Switzerland', 'Turkey',\n        'United Arab Emirates', 'UK', 'USA']\nplot_trend(vacc_df,'total_vaccinations','Trend of total vaccination',country)\n\n#also try using plot_till_date\n#example code: plot_till_date('people_fully_vaccinated', 'people_vaccinated','People vaccinated vs Fully vaccinated till date', '#c4eb28', '#35eb28')","e7c3e239":"list(df3.columns)","149c4c7d":"#-Heat Map (Daily vaccination by GDP per capita)\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf4 = df3[['country','GDP_nominal', 'TotalCases']]\nheatmap2_data = pd.pivot_table(df4,values='TotalCases', index=['country'], columns='GDP_nominal')\nplt.figure(figsize=(8, 12))\nsns.heatmap(heatmap2_data, cmap=\"RdBu\")","ed92a7c8":"#-Heat Map (Total tests by GDP per capita)\ndf4 = df3[['country','GDP_nominal', 'TotalTests']]\nheatmap2_data = pd.pivot_table(df4,values='TotalTests', index=['country'], columns='GDP_nominal')\nplt.figure(figsize=(8, 12))\nsns.heatmap(heatmap2_data, cmap=\"RdBu\")","b8725642":"<center><img \nsrc=\"https:\/\/images.unsplash.com\/photo-1612277795511-39caabca8185?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\" width=\"700\" height=\"700\"><\/img><\/center>\n\n<br>","82fbd0a1":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Bonus material \ud83d\ude4c <\/center><\/h1>","7047b46e":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Dataset information <\/center><\/h1>\n\n* **Country** \u261e this is the country for which the vaccination information is provided;\n* **Country ISO Code** \u261e ISO code for the country;\n* **Date** \u261e date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n* **Total number of vaccinations** \u261e this is the absolute number of total immunizations in the country;\n* **Total number of people vaccinated** \u261e a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n* **Total number of people fully vaccinated** \u261e this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n* **Daily vaccinations (raw)** \u261e for a certain data entry, the number of vaccination for that date\/country;\n* **Daily vaccinations** \u261e for a certain data entry, the number of vaccination for that date\/country;\n* **Total vaccinations per hundred** \u261e ratio (in percent) between vaccination number and total population up to the date in the country;\n* **Total number of people vaccinated per hundred** \u261e ratio (in percent) between population immunized and total population up to the date in the country;\n* **Total number of people fully vaccinated per hundred** \u261e ratio (in percent) between population fully immunized and total population up to the date in the country;\n* **Number of vaccinations per day** \u261e number of daily vaccination for that day and country;\n* **Daily vaccinations per million** \u261e ratio (in ppm) between vaccination number and total population for the current date in the country;\n* **Vaccines used in the country** \u261e total number of vaccines used in the country (up to date);\n* **Source name** \u261e source of the information (national authority, international organization, local organization etc.);\n* **Source website** \u261e website of the source of infomation.\n\n***\n\nFollow the Original Post \"[COVID-19 Vaccination Progress](https:\/\/www.kaggle.com\/gpreda\/covid-19-vaccination-progress\/comments)\" for further information in this dataset and the project itself.\n\n***\n","e85897c8":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Daily vaccination by country - Geograph <\/center><\/h1>","8dbe732f":"# b. Total vaccinated per 10,000 GDP per capita","e286fdd9":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Introduction <\/center><\/h1>\n\nCOVID-19 has posed a significant threat to the health and well-being. Nearly 105 million cases have been diagnosed, resulting in 2.3 million deaths around the world. While the COVID-19 infections are still surging, the world is patiently waiting for the rollout of a wide-scale vaccination program. Countries such as Isreal (61.7%), UK (16.2%), and the USA (10.5%) among the high-income countries have achieved a rapid expansion in vaccination program. However, the countries like India (0.4%) and Nepal (0.4%) are still waiting for wide-scale vaccination. Further, information on [COVID-19 vaccination](https:\/\/ourworldindata.org\/covid-vaccinations) is available elsewhere.\n\nIn this blog, I will summarize the latest information on COVID-19 vaccination and analyse important facets in global vaccination program, including:\n      1. How equitable the vaccination program has been thuse far?\n      2. The challenges that lies ahead.\nI will also use **webscrapping** from [WorldoDometer](https:\/\/www.worldometers.info\/), a popular website for COVID-19 statistics, to extend the information on vaccine coverage. \n\nA massive thanks to [@josephassaker](https:\/\/www.kaggle.com\/josephassaker) and [@pawanbhandarkar](https:\/\/www.kaggle.com\/pawanbhandarkar\/covid-19-eda-man-vs-disease) for the data and inspirations for carrying out these analyses, with further insights from [@andreshg](https:\/\/www.kaggle.com\/andreshg), [@soumyadipghorai](https:\/\/www.kaggle.com\/soumyadipghorai),[@umerkk12](https:\/\/www.kaggle.com\/umerkk12) and [@taha07](https:\/\/www.kaggle.com\/taha07). \ud83d\ude4f\ud83c\udffd\n\nWhen you are finished reading, please leave your comments and suggestions. Your **upvote** will motivate me to continuously update this blog and bring awesome contents.\n\n**Let's get started.** ","a8578834":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Vaccination progression: are there equity gaps? <\/center><\/h1>","4c7543fb":"# a. Daily vaccination trend (per 10,000 population) for 32 high, middle and low income countries","969ae815":"# c. Total tested per 10,000 GDP per capita","dfd62db7":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Data analysis and visualization<\/center><\/h1>\n\n<span style=\"color:green;\"> This blog uses Python environment (using Kaggle) for exploratory data analysis and data visualization. The data preparation and analysis is done using Pandas and Numpy libraries. Visualization is done using Matplotlib, Seaborn and Ploty libraries. Please check the documentation guides for respective libraries for further information.\ud83d\udc4f <\/span>\n\n<div class=\"alert alert-block alert-info\"> \ud83d\udccc Please note that data in this blog may not have been updated therefore look out for original data sources for day-to-day process in vaccination.<\/div>\n\n<br>\n\n\ud83d\ude0e Resources: How to style your markdown: [follow this amazing blog](https:\/\/www.kaggle.com\/shubhamksingh\/create-beautiful-notebooks-formatting-tutorial)\n\n***","3bb66fe0":"# a.Total cases of COVID-19 per countries","ea856956":"COVID-19 has threatened the health system and economic integrity of countries worldwide; developing countries are significantly affected. On the positive side, the COVID-19 vaccines have been rolled out in many countries. Many marginalized and vulnerable populations in high and low-income countries are still waiting for their first vaccine. If unchecked, these population risks being left out from vaccine rollout. Therefore, my aim here is to critically analyze the vaccine coverage data, identify gaps to inform policy discussion and advocacy, with a focus on low and middle-income countries. \n\nOn the totality, the findings showed that vaccine administration is primarily focused on high-income countries. Some vaccine companies (e.g., Pfizer and BioNTech) are making massive progress in vaccine expansion, though limited geographically. With the health systems in these countries coming back to their full speed, vaccination programs' rollout will become more effective in the coming days.\n\nThank you for reading the notebook. This is my first notebook in Kaggle, so excited about continuing writing in the future. Your **UPVOTE** will massively help me in keeping motivated and bring further resources on this topic. I will try to keep the notebook updated (The **web scrapping framework** will make the updating easy) and bring in more exciting visualization as we move along. See you around!\n\n\n# Blogger\nI recently completed my Ph.D. studies (*Thesis submitted*) focusing on epidemiology and clinical biostatistics from the University of Queensland, Australia. My aim in Kaggle is to combine data visualization and storytelling to convey powerful message in global health. \n\nBesides that, I am interested in cardiovascular epidemiology & on development, use, and interpretation of statistical & ML tools for observational studies and RCTs. I am also interested in statistical programming & visualization using SAS, Stata, R & Python (https:\/\/bit.ly\/37n0kQG). From 2015-16, I worked as a commissioner in The Lancet YCEMP & as a freelance writer until 2018 (https:\/\/bit.ly\/37qKVBF).\n\n\n# My socials:\n\ud83c\ude3a[Linkedin](https:\/\/www.linkedin.com\/in\/shivarajmishra\/)\n<br>\n\ud83c\ude3a[YouTube](https:\/\/www.youtube.com\/watch?v=WROuFKmYPVQ&t=13s)\n<br>\n\ud83c\ude3a[Researchgate](https:\/\/www.researchgate.net\/profile\/Shiva_Mishra2)\n<br>\n\u2622\ufe0f[Facebook](https:\/\/www.facebook.com\/shivarajmishra)\n\n**Work completed: 7.02.2021**\n","68a5b236":"# g.Total tests vs population, grouped per country and GDP per capita","ac7e29c3":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Burden of COVID-19 across countries <\/center><\/h1>","c9ceedb4":"# d. Daily vaccination vs GDP per capita, grouped per country and vaccines","68785d06":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Web-Scrapping from WorldMeter Website (new data) \ud83d\ude4c <\/center><\/h1>","cbd8c5c9":"# f.Total cases vs total deaths, grouped per country and GDP per capita","c528f845":"<a id=\"4\"><\/a><h1 style='background:#555413; border:3; color:white'><center> Equity in the COVID-19 Vaccination: ideas, codes and worked examples <\/center><\/h1>","e436c151":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Conclusions <\/center><\/h1>","f59f2e6c":"# b. COVID-19 infection, vaccination by GDP per capita","a9804801":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> COVID-19, and vaccination statistics by country<\/center><\/h1>","c0b0c824":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Data sources <\/center><\/h1>\n\nI will combine information on total population size (2020) and GDP per capita (2017) for the each countries with information on vaccination into the [original dataset](..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv) listed above, by webscrapping the WoldoMeter website:\n\n1. [GDP per capita (2017)](https:\/\/www.worldometers.info\/gdp\/gdp-per-capita\/) \u261e Okey to use 2017 data. Not likely to have got a lot of changes coming at 2021.  \n    1.1 GDP per capita (PPP)\n    1.2 GDP per capita (nominal)\n    1.3 GDP per capita (nominal) vs world average (i.e. 17,100 USD)\n2. [Population (2020)](https:\/\/www.worldometers.info\/coronavirus\/) \u261e These data are yearly updated.","9462b1ba":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> How the vaccination has progressed <\/center><\/h1>","ace81099":"# e.Total tests vs GDP per capita, grouped per country and vaccines","7727385f":"<a id=\"4\"><\/a><h1 style='background:#aba926; border:0; color:black'><center> Using the vaccination data from Kaggle <\/center><\/h1>"}}