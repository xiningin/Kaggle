{"cell_type":{"1ebe90d7":"code","4587c555":"code","e98f4792":"code","b4d4c2bf":"code","55ea0f57":"code","8e9ff014":"code","ff9af0ce":"code","b7d3e365":"code","d1103dd0":"code","097df324":"code","e29eda67":"markdown","9a3f3dea":"markdown","767ef750":"markdown","6287df16":"markdown"},"source":{"1ebe90d7":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.metrics import mean_squared_error\n\nfrom IPython.display import clear_output\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","4587c555":"!pip install autoviz\n!pip install xlrd\n\nfrom autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\n\nclear_output()","e98f4792":"sample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")","b4d4c2bf":"ff = AV.AutoViz('..\/input\/30-days-of-ml\/train.csv')","55ea0f57":"!nvidia-smi","8e9ff014":"from xgboost import XGBRegressor\nxgb_params = {\n    'n_estimators': 10000,\n    'learning_rate': 0.05,\n    'subsample': 0.96,\n    'colsample_bytree': 0.12,\n    'max_depth': 2,\n    'booster': 'gbtree', \n    'reg_lambda': 65.1,\n    'reg_alpha': 15.9,\n    'random_state':40\n}\n","ff9af0ce":"df = pd.read_csv(\"\/kaggle\/input\/train-folds\/train_folds.csv\")\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/30-days-of-ml\/sample_submission.csv\")\n\nuseful_features = [c for c in df.columns if c not in (\"id\", \"target\", \"kfold\")]\nobject_cols = [col for col in useful_features if 'cat' in col]\ndf_test = df_test[useful_features]","b7d3e365":"final_predictions = []\nfor fold in range(5):\n    xtrain =  df[df.kfold != fold].reset_index(drop=True)\n    xvalid = df[df.kfold == fold].reset_index(drop=True)\n    xtest = df_test.copy()\n\n    ytrain = xtrain.target\n    yvalid = xvalid.target\n    \n    xtrain = xtrain[useful_features]\n    xvalid = xvalid[useful_features]\n    \n    ordinal_encoder = OrdinalEncoder()\n    xtrain[object_cols] = ordinal_encoder.fit_transform(xtrain[object_cols])\n    xvalid[object_cols] = ordinal_encoder.transform(xvalid[object_cols])\n    xtest[object_cols] = ordinal_encoder.transform(xtest[object_cols])\n    \n    model = XGBRegressor(**xgb_params)\n    model.fit(xtrain, ytrain)\n    preds_valid = model.predict(xvalid)\n    test_preds = model.predict(xtest)\n    final_predictions.append(test_preds)\n    print(f\"fold: {fold}, rmse: {mean_squared_error(yvalid, preds_valid, squared=False)}\")","d1103dd0":"print(final_predictions)","097df324":"preds = np.mean(np.column_stack(final_predictions), axis=1)\nsample_submission.target = preds\nsample_submission.to_csv(\"xgb_submission_k\", index=False)","e29eda67":"# PREDICTIONS","9a3f3dea":"# AUTO EDA","767ef750":"# MODELING","6287df16":"# KFOLDS\n\nThis dataset is the same as abishek thakur created!"}}