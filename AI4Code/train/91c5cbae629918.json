{"cell_type":{"dbe84d35":"code","9fda8f34":"code","796cafd1":"code","cc4a1390":"code","0eed3628":"code","94d6b1ef":"code","d933d377":"code","f0c5253c":"code","c860d07f":"code","a0a4e95b":"code","dd9d769a":"code","c97a91a4":"code","64023fbd":"code","c265b8e6":"code","30a36264":"code","251472a5":"code","8177880e":"code","019dc504":"code","ce06f4eb":"code","547aa812":"code","4b067b16":"markdown"},"source":{"dbe84d35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9fda8f34":"from sklearn.datasets import fetch_openml\nfrom sklearn import metrics\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","796cafd1":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","cc4a1390":"train.head()","0eed3628":"test.head()","94d6b1ef":"from sklearn.model_selection import train_test_split\ntrains,tests= train_test_split(train, train_size=0.7, random_state=42)","d933d377":"y_train = trains[\"label\"]\nX_train = trains.drop(labels = [\"label\"],axis = 1) \ny_test = tests[\"label\"]\nX_test = tests.drop(labels = [\"label\"],axis = 1) ","f0c5253c":"X_train.info()","c860d07f":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn import tree\nmodel = BaggingClassifier(tree.DecisionTreeClassifier(random_state=42))","a0a4e95b":"model.fit(X_train,y_train)","dd9d769a":"from sklearn.metrics import accuracy_score\ntestaccuracy= accuracy_score(y_test,model.predict(X_test))\ntestaccuracy\nprint(\"Test Data Accuracy    :{} %\".format(round((testaccuracy*100),2)))","c97a91a4":"cm= metrics.confusion_matrix(y_test,model.predict(X_test))\ncm","64023fbd":"model.score(X_test,y_test)","c265b8e6":"plt.figure(figsize=(9,9))\nplt.imshow(cm,cmap='rainbow_r')\nplt.title(\"Confusion Matrix for MNIST Data\")\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\nplt.ylabel('Actual Label')\nplt.xlabel('Predicted Label')\nplt.colorbar()\nwidth,height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]),xy=(y,x),horizontalalignment='center',verticalalignment='center')\nplt.show()","30a36264":"y_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) ","251472a5":"from sklearn.ensemble import BaggingClassifier\nfrom sklearn import tree\nmodel = BaggingClassifier(tree.DecisionTreeClassifier(random_state=42))","8177880e":"model.fit(X_train,y_train)","019dc504":"# predict result\npred = model.predict(test)\nresult=pd.DataFrame(pred)\nresult= result.rename(columns={ 0 : 'Label'})\nresult.head()","ce06f4eb":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)\n\n","547aa812":"submission.head()","4b067b16":"Looks Promising !!"}}