{"cell_type":{"18b18182":"code","3530a3c4":"code","9594814a":"code","11621b5a":"code","7a154fb1":"code","f3f3d4f0":"code","ae7ca3b3":"code","7ed9c7f1":"code","cf25273f":"code","cb32ffc5":"code","fd951595":"code","9d1d365c":"code","8bfd5c4e":"code","f84ea089":"code","7c9da7e6":"code","c1e56036":"code","48a7ea77":"code","777e60ec":"code","173ed646":"code","ce1ac4e0":"code","a6f60027":"code","fce4d124":"code","e4a36e55":"code","58693c1d":"code","24a247bd":"code","11ae416d":"code","a265d0bb":"markdown","b80a4203":"markdown","e8e6eadd":"markdown","a2e36221":"markdown","93cbcd1b":"markdown","5fc02af9":"markdown","572ccfaf":"markdown","72a7d547":"markdown"},"source":{"18b18182":"ROOT = \"\/content\/drive\/MyDrive\/\"","3530a3c4":"import os\nos.chdir(ROOT)","9594814a":"os.getcwd()","11621b5a":"import numpy as np\nimport matplotlib.pyplot as plt\nimport joblib\nimport pandas as pd\n\nplt.style.use(\"fivethirtyeight\")","7a154fb1":"class Perceptron:\n  def __init__(self, eta, epochs, activationFunction):\n    self.weights = np.random.randn(3) * 1e-4\n    print(f\"self.weights: {self.weights}\")\n    self.eta = eta\n    self.epochs = epochs\n    self.activationFunction = activationFunction\n\n  def fit(self, X, y):\n    self.X = X\n    self.y = y\n\n    X_with_bias = np.c_[self.X, -np.ones((len(self.X), 1))] # concactination\n    print(f\"X_with_bias: \\n{X_with_bias}\")\n\n    for epoch in range(self.epochs):\n      print(f\"for epoch: {epoch}\")\n      y_hat = self.activationFunction(X_with_bias, self.weights)\n      print(f\"predicted value: \\n{y_hat}\")\n      error = self.y - y_hat\n      print(f\"error: \\n{error}\")\n      self.weights = self.weights + self.eta * np.dot(X_with_bias.T, error)\n      print(f\"updated weights: \\n{self.weights}\")\n      print(\"#############\\n\")\n\n  def predict(self, X):\n    X_with_bias = np.c_[X, -np.ones((len(self.X), 1))]\n    return self.activationFunction(X_with_bias, self.weights)\n","f3f3d4f0":"activationFunction = lambda inputs, weights: np.where(np.dot(inputs, weights) > 0 , 1, 0)","ae7ca3b3":"data = {\"x1\": [0,0,1,1], \"x2\": [0,1,0,1], \"y\": [0,0,0,1]}\n\nAND = pd.DataFrame(data)\nAND","7ed9c7f1":"X = AND.drop(\"y\", axis=1) # axis = 1 >>> dropping accross column\nX","cf25273f":"y = AND['y']\ny.to_frame()","cb32ffc5":"model = Perceptron(eta = 0.5, epochs=10, activationFunction=activationFunction)","fd951595":"model.fit(X,y)","9d1d365c":"model.predict(X)","8bfd5c4e":"data = {\"x1\": [0,0,1,1], \"x2\": [0,1,0,1], \"y\": [0,1,1,1]}\n\nOR = pd.DataFrame(data)\nOR","f84ea089":"X = OR.drop(\"y\", axis=1) # axis = 1 >>> dropping accross column\nX","7c9da7e6":"y = OR['y']\ny.to_frame()","c1e56036":"model = Perceptron(eta = 0.5, epochs=10, activationFunction=activationFunction)","48a7ea77":"model.fit(X,y)","777e60ec":"data = {\"x1\": [0,0,1,1], \"x2\": [0,1,0,1], \"y\": [0,1,1,0]}\n\nXOR = pd.DataFrame(data)\nXOR","173ed646":"X = XOR.drop(\"y\", axis=1) # axis = 1 >>> dropping accross column\nX","ce1ac4e0":"y = XOR['y']\ny.to_frame()","a6f60027":"model = Perceptron(eta = 0.5, epochs=50, activationFunction=activationFunction)\n","fce4d124":"model.fit(X,y)","e4a36e55":"model.predict(X)","58693c1d":"AND.plot(kind=\"scatter\", x=\"x1\", y=\"x2\", c=\"y\", s=50, cmap=\"winter\")\nplt.axhline(y=0, color=\"black\", linestyle=\"--\", linewidth=2)\nplt.axvline(x=0, color=\"black\", linestyle=\"--\", linewidth=2)\n\nx = np.linspace(0, 1.4) # >>> 50 \ny = 1.5 - 1*np.linspace(0, 1.4) # >>> 50 \n\nplt.plot(x, y, \"r--\")","24a247bd":"OR.plot(kind=\"scatter\", x=\"x1\", y=\"x2\", c=\"y\", s=50, cmap=\"winter\")\nplt.axhline(y = 0, color =\"black\", linestyle =\"--\", linewidth=2)\nplt.axvline(x = 0, color =\"black\", linestyle =\"--\", linewidth=2)\nplt.plot(np.linspace(0,0.75), 0.75 - 1*np.linspace(0,0.75), 'r--');","11ae416d":"XOR.plot(kind=\"scatter\", x=\"x1\", y=\"x2\", c=\"y\", s=500, cmap=\"winter\")\n","a265d0bb":"# AND","b80a4203":"```python\ndef activationFunction(inputs, weights):\n  z = np.dot(inputs, weights)\n  y_hat = np.where(z > 0, 1, 0)\n  return y_hat\n\ndef activationFunction(inputs, weights):\n  z = np.dot(inputs, weights)\n  if z > 0:\n    y_hat = 1\n  else:\n    y_hat = 0\n  return y_hat\n\n\n```","e8e6eadd":"### OR","a2e36221":"# XOR","93cbcd1b":"### AND GATE","5fc02af9":"# Analysis with the graph","572ccfaf":"# XOR","72a7d547":"# OR"}}