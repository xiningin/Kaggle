{"cell_type":{"a2541fa6":"code","d73f15fa":"code","6f842e85":"code","3995cc0c":"code","9c769c3f":"code","671d8249":"code","ce780ebf":"code","9d9eb951":"code","886f9688":"code","5196bbdd":"code","7b25e129":"code","55b5b3dd":"code","1cf3a5e2":"code","96ef7a29":"code","7bfade12":"code","b915f3ec":"code","d665b2b6":"code","c06e055e":"code","dec5f6d8":"code","0bbc72e7":"code","2007123d":"code","f18583f1":"code","3caff562":"code","c4bab962":"code","b050bd7f":"code","050c1c65":"code","dd31623a":"code","27e6da53":"code","e1a804e7":"code","296a1739":"code","4c8b618a":"code","405dc4f2":"code","3947a1d9":"code","4c4bc9f4":"code","8e41d709":"code","cbd1ac38":"code","2e1c9eca":"code","6765530d":"code","0d8865cc":"code","f53a5855":"code","95e457c8":"code","0686e9eb":"code","32822541":"code","d6197b93":"markdown","db33f82a":"markdown","dc6371b0":"markdown","5dd623d3":"markdown","24fdbf68":"markdown","a28c7569":"markdown","9bd02f2e":"markdown","0e54dd83":"markdown","3c913652":"markdown","a69d0e18":"markdown","70f78ceb":"markdown","cac2e444":"markdown","52ddad65":"markdown","8694f1a3":"markdown","9b8f3175":"markdown","94e94417":"markdown","7edc757c":"markdown"},"source":{"a2541fa6":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_profiling import ProfileReport\n\n\nimport plotly.express as px    ## for visualization\nimport matplotlib.pyplot as plt  ## for visualization\n","d73f15fa":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest =  pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")","6f842e85":"train_profile = ProfileReport(train, title='Pandas Profiling Report', html={'style':{'full_width':True}})\ntrain_profile\n","3995cc0c":"train.isna().sum()","9c769c3f":"# dropped 2 columns\ntrain = train.drop([\"Id\", 'Province_State'], axis = 1)","671d8249":"train_grp_date = train.groupby(['Date'])\n   \ntrain_grp_country = train.groupby(['Country_Region'])","ce780ebf":"train_grp_date.head()","9d9eb951":"\n#plt.bar(train_grp_date.mean(), height = train_grp_date['ConfirmedCases'])\n\nplt.figure(figsize = (25,5))\nplt.xticks(rotation = 90)\np1 = plt.bar(train_grp_date.mean().index, train_grp_date.mean()['ConfirmedCases'])\np2 = plt.bar(train_grp_date.mean().index, train_grp_date.mean()['Fatalities'])\n\nplt.legend((p1[0], p2[0]), (\"Confirmed_cases\", 'Fatalities'))","886f9688":"plt.figure(figsize = (28,5))\n#plt.bar(train_grp_country.mean().index, train_grp_country.mean())\np1 = plt.bar(train_grp_country.mean().index, train_grp_country.mean()['ConfirmedCases'])\np2 = plt.bar(train_grp_country.mean().index, train_grp_country.mean()['Fatalities'])\nplt.xticks(rotation = 90)\nplt.legend((p1[0],p2[0]), (\"Confirmed_cases\", 'Fatalities'))","5196bbdd":"train_grp_country_1 = train.groupby(['Country_Region'])['ConfirmedCases','Fatalities'].sum().sort_values('ConfirmedCases',ascending= False).reset_index().head(10)","7b25e129":"train_grp_country_1 =train_grp_country_1.set_index(train_grp_country_1['Country_Region'])\n\ntrain_grp_country_1.drop('Country_Region', axis =1)","55b5b3dd":"plt.figure(figsize = (28,5))\n#plt.bar(train_grp_country.mean().index, train_grp_country.mean())\np1 = plt.bar(train_grp_country_1.index, train_grp_country_1['ConfirmedCases'])\np2 = plt.bar(train_grp_country_1.index, train_grp_country_1['Fatalities'])\nplt.xticks(rotation = 90)\nplt.legend((p1[0],p2[0]), (\"Confirmed_cases\", 'Fatalities'))","1cf3a5e2":"train_grp_country.mean()","96ef7a29":"top10 = train_grp_country_1.head(10)\n\nfig = px.bar(top10, x=top10.index, y='ConfirmedCases', labels={'x':'Country'},\n             color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.Brwnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases by country')\nfig.show()","7bfade12":"df_by_date = train.groupby(['Country_Region','Date'])['ConfirmedCases'].sum().sort_values().reset_index()\n\ndef country_conf_plot(country):\n    fig = px.bar(df_by_date.loc[(df_by_date['Country_Region'] == country) &(df_by_date.Date >= '2020-03-01')].sort_values('ConfirmedCases',ascending = False), \n             x='Date', y='ConfirmedCases', color=\"ConfirmedCases\", color_continuous_scale=px.colors.sequential.BuGn)\n    fig.update_layout(title_text='Confirmed COVID-19 cases per day')\n    fig.show()","b915f3ec":"country_conf_plot('Italy')","d665b2b6":"country_conf_plot('Spain')\n","c06e055e":"country_conf_plot('Germany')\n","dec5f6d8":"country_conf_plot('Iran')\n","0bbc72e7":"country_conf_plot('China')\n","2007123d":"\ncountry_conf_plot('India')","f18583f1":"country_conf_plot('US')","3caff562":"top10 = train_grp_country.sum().sort_values('ConfirmedCases', ascending = False).head(10)\n","c4bab962":"train_grp_country.head()","b050bd7f":"#top10 = train_grp_country_1\n\nplt.figure(figsize = (15,5))\nplt.pie(top10['ConfirmedCases'], labels =top10.index , radius = 0.9, frame = True)\n#train_grp_country.mean()['ConfirmedCases'])\nplt.show()","050c1c65":"test = test.drop(['ForecastId','Province_State'], axis = 1)","dd31623a":"test.shape","27e6da53":"train.head(), train.shape","e1a804e7":"test.head(), test.shape","296a1739":"# converting the dtypes to datetime format\ntrain[\"Date\"] = pd.to_datetime(train[\"Date\"])\ntest['Date'] = pd.to_datetime(test['Date'])\n\ntrain = train.set_index(train['Date'])\ntest = test.set_index(test['Date'])","4c8b618a":"def create_features(df,label=None):\n    \"\"\"\n    Creates time series features from datetime index.\n    \"\"\"\n    #df = df.copy()\n    df['Date'] = df.index\n    df['hour'] = df['Date'].dt.hour\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['quarter'] = df['Date'].dt.quarter\n    df['month'] = df['Date'].dt.month\n    df['year'] = df['Date'].dt.year\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['dayofmonth'] = df['Date'].dt.day\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    \n    #X = df[['hour','dayofweek','quarter','month','year','dayofyear','dayofmonth','weekofyear']]\n   \n    return df","405dc4f2":"train = create_features(train)\ntest = create_features(test)","3947a1d9":"train.head()","4c4bc9f4":"train.dtypes","8e41d709":"# labelencodinng the columns \n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndef encoding_col(df):\n    for col in df.columns:\n        if df.dtypes[col] == object:\n            df[col] =le.fit_transform(df[col])\n            \n            #le.fit(df[col].astype(str))\n            #df[c] = le.transform(df[c].astype(str))\n                      \n    return df\n    ","cbd1ac38":"encoding_col(train)\nencoding_col(test)\n","2e1c9eca":"x_train= train[['Country_Region','month', 'dayofyear', 'dayofmonth' , 'weekofyear']]\ny1 = train[['ConfirmedCases']]\ny2 =train[['Fatalities']]\nx_test = test[['Country_Region', 'month', 'dayofyear', 'dayofmonth' , 'weekofyear']]","6765530d":"x_train.dtypes, x_test.dtypes","0d8865cc":"\nx_train = x_train.astype(float)\nx_test = x_test.astype(float)","f53a5855":"x_train.dtypes, x_test.dtypes","95e457c8":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error","0686e9eb":"xg_reg = XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\n\nxg_reg.fit(x_train,y1)\n\nConfirmedCases = xg_reg.predict(x_test)","32822541":"\nxg_reg.fit(x_train,y2)\n\nFatalities = xg_reg.predict(x_test)","d6197b93":"### Visualization on test Data","db33f82a":"# EDA of the dataset\n### Train data Visualization generated by Pandasprofiling library with just one line of code\n\n\n","dc6371b0":"## EDA of test set","5dd623d3":"### We can see that number of positive cases is increasing day by day \n### Lets look at country stats\n","24fdbf68":"### We have dropped Province State and ID from train, we will do similar thing with test data.","a28c7569":"### Lets look at the top 10 countries from the figure","9bd02f2e":"# Feature Generation","0e54dd83":"### Grouping columns by Date and Country for generating visualizations","3c913652":"## This is time series problem, we can use various forecasting techniques. For starters I am using XGBoost Regression.","a69d0e18":"## Confirmed cases country wise analysis","70f78ceb":"### Plotting Stacked bar chart from the Dataframe Grouped by 'Date' Column","cac2e444":"### Using Date column we can generate a few features","52ddad65":"## This notebook is focused on getting the basics right. I have covered the following:\n\n1. **EDA** <br>\nPandas Profiling library for data Summary. <br>\nUse of Plotly Express and Matplotlib.pyplot for Visualization<br>\n<br>\n\n2. **Feature Generation** <br>\nUsed Date Column to generate features.<br>\n<br>\n3. **Modelling** <br>\nXGBoost for data Modelling. <br>\n\nThere are very few data points in Covid dataset. We can also make use of other forecasting techniques like ARIMA, Holts Winter, LSTMs, which I will do for Week-3 dataset.\n ","8694f1a3":"### Province_State is the only column that has missing values. Missing values are over 55%. hence I have dropped Id and Province State Columns.","9b8f3175":"### Converting the columns type to float format to feed it to xgboost","94e94417":"### We can not draw any inferences from the bar graph , lets look at the top 10 countries","7edc757c":"### We can also plot using Plotly express, I found them more interactive. Youu can also hover over the bar chart and find about the data."}}