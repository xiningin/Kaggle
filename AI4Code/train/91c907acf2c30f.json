{"cell_type":{"2542ebc7":"code","cfd6603f":"code","76c429a3":"code","b25a5c03":"code","f1f32962":"code","7b6b63b1":"code","3385e260":"code","a656ed6e":"code","87a3b1d0":"code","999fdd80":"code","e52e9652":"code","d9cec157":"code","d81b4f1c":"code","9f171c79":"code","b8d299bd":"code","73ef9a39":"code","5f627f6f":"code","8a8a1dc9":"code","bf5b27bd":"code","1523f9bd":"code","f88b3026":"code","c1ad17bd":"code","a29719a0":"code","5b548ef8":"code","795a7d63":"markdown","94129d3a":"markdown","c0117f30":"markdown","f8c06829":"markdown","d658358d":"markdown","4d4644ff":"markdown","30a84efd":"markdown"},"source":{"2542ebc7":"import pandas as pd\nimport numpy as np\n\n#from sklearn.model_selection import StratifiedKFold,KFold,GroupKFold\n#from sklearn.metrics import accuracy_score\n\n#Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\n\n#For Missing Value and Feature Engineering\nfrom sklearn.feature_selection import SelectKBest, chi2, f_classif, VarianceThreshold\nfrom sklearn.impute import SimpleImputer, KNNImputer, MissingIndicator\nfrom sklearn.preprocessing import KBinsDiscretizer, OneHotEncoder, MinMaxScaler\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom xgboost import XGBClassifier\n#from catboost import CatBoostClassifier\n\nimport time\n","cfd6603f":"train = pd.read_csv(\"..\/input\/santander-customer-satisfaction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/santander-customer-satisfaction\/test.csv\")","76c429a3":"train.head()","b25a5c03":"#create X and y datasets for splitting \nX = train.drop(['ID', 'TARGET'], axis=1)\ny = train['TARGET']","f1f32962":"all_features = X.columns","7b6b63b1":"all_features = all_features.tolist()","3385e260":"numerical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind in ['i','f'] and c !='PassengerId']\ncategorical_features = [c for c, dtype in zip(X.columns, X.dtypes)\n                     if dtype.kind not in ['i','f']]","a656ed6e":"numerical_features","87a3b1d0":"categorical_features","999fdd80":"#import train_test_split library\nfrom sklearn.model_selection import train_test_split\n\n# create train test split\nX_train, X_test, y_train, y_test = train_test_split( X,  y, test_size=0.3, random_state=0)  ","e52e9652":"preprocessor = make_column_transformer(\n    \n    (make_pipeline(\n    #SimpleImputer(strategy = 'median'),\n    KNNImputer(n_neighbors=2, weights=\"uniform\"),\n    MinMaxScaler()), numerical_features),\n    \n    (make_pipeline(\n    SimpleImputer(strategy = 'constant', fill_value = 'missing'),\n    OneHotEncoder(categories = 'auto', handle_unknown = 'ignore')), categorical_features),\n    \n)","d9cec157":"preprocessor_best = make_pipeline(preprocessor, \n                                  VarianceThreshold(), \n                                  SelectKBest(f_classif, k = 15), \n                                  PCA(n_components = 4))","d81b4f1c":"XGB_Model = make_pipeline(preprocessor_best, XGBClassifier())","9f171c79":"# Create the param grid - xgbclassifier\nparam_grid = {\n \"xgbclassifier__learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"xgbclassifier__max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"xgbclassifier__min_child_weight\" : [ 1, 3, 5, 7 ],\n \"xgbclassifier__gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"xgbclassifier__colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]   \n}\n","b8d299bd":"from sklearn.model_selection import RandomizedSearchCV\nxgb_RandomGrid = RandomizedSearchCV(estimator = XGB_Model, param_distributions = param_grid, cv = 5, verbose=3, n_jobs = -1, scoring = 'roc_auc', n_iter = 5)","73ef9a39":"xgb_RandomGrid.fit(X_train, y_train)","5f627f6f":"xgb_RandomGrid.best_estimator_","8a8a1dc9":"print(f'Train : {xgb_RandomGrid.score(X_train, y_train):.3f}')\nprint(f'Test : {xgb_RandomGrid.score(X_test, y_test):.3f}')","bf5b27bd":"from sklearn.metrics import roc_auc_score","1523f9bd":"print(f'Train AUC : {roc_auc_score(y_train, xgb_RandomGrid.predict_proba(X_train)[:,1]):.3f}')\nprint(f'Train AUC : {roc_auc_score(y_test, xgb_RandomGrid.predict_proba(X_test)[:,1]):.3f}')","f88b3026":"test_pred = xgb_RandomGrid.predict_proba(test[X.columns])[:,1]\n#test_pred = rf_RandomGrid.predict(test[X.columns])","c1ad17bd":"AllSub = pd.DataFrame({ 'ID': test['ID'],\n                       'TARGET' : test_pred\n    \n})","a29719a0":"#AllSub['TARGET'] = AllSub['TARGET'].apply(lambda x: 1 if x > 0.5 else 0)","5b548ef8":"AllSub.to_csv('Santander_XGB_Better_Pipe.csv', index = False)","795a7d63":"## Import Libraries","94129d3a":"## Accuracy","c0117f30":"## Divide Dataset into X and Y","f8c06829":"## Submission ","d658358d":"## Setup Pipeline ","4d4644ff":"## Import Data","30a84efd":"## Grid Search"}}