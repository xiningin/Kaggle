{"cell_type":{"a001d1f1":"code","ed23c441":"code","c2e16596":"code","bfea3410":"code","191a1008":"code","495fd106":"code","3026d2a6":"code","b5a0344e":"code","3628131a":"code","b85d41e8":"code","ef6a50e5":"code","984c5793":"code","d5fc2045":"code","3e1b2cdd":"code","6da5f260":"code","cae326eb":"code","b9479aab":"code","25f26141":"code","8301900b":"code","a39c3dea":"code","8a3fef44":"code","88b83462":"code","5153597b":"code","56b83774":"code","8e8f0a75":"code","ba58ba7d":"code","75b8fde3":"code","efdc5ce8":"code","9930c0bd":"code","c2112a2d":"code","c257266a":"code","ae8b146c":"code","c10d4dbe":"code","f86b214d":"code","9d55524e":"code","8ab36ac9":"code","ceed21a5":"code","42f452e6":"code","67019c5c":"code","698beee6":"code","d97663a9":"code","d8ae58fe":"code","68cb2609":"code","5eb7ba98":"code","c3f444c5":"code","93e2e1fc":"code","578b87b8":"code","8dc929aa":"code","877c2a3a":"code","3f9bfbe4":"code","1b38e70b":"code","5445ca04":"code","9853ebf5":"code","432b43c1":"code","3c2b372d":"code","b3a7aaff":"code","95e73c31":"code","dc9248fb":"code","233edec5":"code","ebe30824":"code","16b3f105":"code","79dd814f":"code","5b0afd4e":"code","cd93241b":"code","44adcadf":"code","c1943a16":"code","3301760e":"code","b8158209":"code","0a7a67d5":"code","b5a2e657":"code","54da9509":"code","7fe8496c":"code","6efe5252":"code","f04ce405":"code","df6b7ecd":"code","ec559a50":"code","7b710f24":"code","38992465":"code","5b126fa7":"code","8b545b7f":"code","09a68e91":"code","d75c60be":"code","26d201ef":"code","53c10448":"code","6fba17a5":"code","5e297970":"code","39040f1f":"code","14e14581":"code","6c878303":"code","ae88d742":"code","9051816d":"code","727d8a60":"code","a0762a0e":"code","aea96237":"code","41534ca5":"code","7f227d14":"code","586cbbe1":"code","a5ec36e4":"code","d397ea0c":"code","b11ec9d8":"code","f7de3fa2":"code","028fde2c":"code","ade91c48":"code","142d5a3a":"code","11f69b88":"code","b4fb6d5c":"code","92c0d27c":"code","630fefd8":"code","1a290282":"code","67d4cd34":"code","91f632e2":"code","52e4cb90":"code","ebf1082a":"code","76738353":"code","bf58648d":"code","aaece83f":"code","31bea7a3":"code","b37a1344":"code","8a29399d":"code","7a0f9a71":"code","e62cbe01":"code","57001afd":"code","818b20e6":"code","452ff4ce":"code","f7dc829c":"code","951a491e":"code","0ba05d04":"code","060b3506":"code","6f126bd1":"code","249adff4":"code","1c9a9915":"code","0b9c4ec8":"code","f1543f97":"code","dee89c73":"code","3b36a30b":"code","e61c37a5":"code","cd62a710":"code","cd96767e":"code","d4083de5":"code","52432bb8":"code","99189f33":"code","e22c628c":"markdown","0d115b37":"markdown","75b76eb1":"markdown","aa8510a0":"markdown","74ac0f69":"markdown","509ac81c":"markdown","9e6f20ec":"markdown","f9e43a4a":"markdown","63dd9a97":"markdown","9cbe8228":"markdown","c508387b":"markdown","299bb3c4":"markdown","58c2fc17":"markdown","ddf721b4":"markdown","b0a41a59":"markdown","2ee912ed":"markdown","726e1af2":"markdown","4966f9d4":"markdown","44419848":"markdown","8fb78ffa":"markdown","628af2ec":"markdown","6dba7f8e":"markdown","29548476":"markdown","14a0cf38":"markdown","717836da":"markdown","5e44f22b":"markdown","1b1ed802":"markdown","536c53a3":"markdown","b0b046cf":"markdown","0f49afbe":"markdown","52bdfe40":"markdown","336a76e6":"markdown","ff41a5b7":"markdown","22f805e3":"markdown","e034684f":"markdown","c8d4e7b8":"markdown","da30bc55":"markdown","af0c5f60":"markdown","b926475a":"markdown","09b7f680":"markdown","c31966b3":"markdown","2be3b211":"markdown","92945ae8":"markdown","ee9e7e76":"markdown","f177900e":"markdown","51baa767":"markdown","5e194db9":"markdown","3b75ce5d":"markdown","2befd6c3":"markdown","3772b8ee":"markdown","e0b885fc":"markdown","4f92c6fc":"markdown","948994f3":"markdown","5236c86c":"markdown","c47d122a":"markdown","87ffaff2":"markdown","78de277c":"markdown","d4acf4a3":"markdown","8e59cdfb":"markdown","3a192e46":"markdown","f79cb63a":"markdown","b0186cc6":"markdown","d96c0de8":"markdown","740bbc0c":"markdown","93376f4a":"markdown","6e2fa7ef":"markdown","07eb7545":"markdown","474f19e9":"markdown","f83357a0":"markdown","5322559b":"markdown","00a81ea9":"markdown","a577317e":"markdown","c0dced33":"markdown","78b02190":"markdown","e2f6b8dd":"markdown","4f9d440e":"markdown","fdab5a8d":"markdown","819f359a":"markdown","f4622c0a":"markdown","86378d73":"markdown","545213c7":"markdown","19265a78":"markdown","561a7279":"markdown","d4cd6335":"markdown","379e0f9b":"markdown","06ddcd17":"markdown","6bdaad5d":"markdown","4c11ab00":"markdown","9f66f6d2":"markdown","20a59629":"markdown","514574d3":"markdown","355e349e":"markdown","7a2a3615":"markdown","9805bdec":"markdown","a1a0f319":"markdown","3aa52457":"markdown","b98f1f02":"markdown","487e7a8d":"markdown","91d9cc36":"markdown","38415c89":"markdown","8b4aadd8":"markdown","de50b3cb":"markdown","41c3b0b5":"markdown","2ed2b9ee":"markdown","0f33b77f":"markdown","32583ac4":"markdown","48954b56":"markdown","35b95ff3":"markdown","77149f00":"markdown"},"source":{"a001d1f1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set() # Set default seaborn setting on plots","ed23c441":"# read the data\nraw_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\n# print the first five rows of the data\nraw_data.head()","c2e16596":"# get the shape\nraw_data.shape","bfea3410":"# check the data types for variables\nraw_data.info()","191a1008":"data = raw_data.copy(deep = True)","495fd106":"# get the count of missing values\nmissing_values = data.isnull().sum()\n\n# get features with missing values greater than 0 \nmissing_values = missing_values[missing_values > 0]\nmissing_values.shape","3026d2a6":"# sort in descending order \nmissing_values.sort_values(inplace = True, ascending = False)","b5a0344e":"_missing = pd.DataFrame()\n_missing[\"Features\"] = missing_values.index\n_missing[\"Count\"] = missing_values.values\n_missing[\"Percentage\"] = missing_values.values \/ data.shape[0] * 100\n_missing","3628131a":"sns.barplot(y = \"Features\", x = \"Count\", data = _missing)","b85d41e8":"no_missing_data = data.copy(deep = True)","ef6a50e5":"no_missing_data['PoolQC'] = no_missing_data.loc[:, \"PoolQC\"].fillna(\"No\")\nno_missing_data.PoolQC","984c5793":"no_missing_data['MiscFeature'] = no_missing_data.loc[:, \"MiscFeature\"].fillna(\"None\")\nno_missing_data.MiscFeature","d5fc2045":"no_missing_data['Alley'] = no_missing_data.loc[:, \"Alley\"].fillna(\"None\")\nno_missing_data.Alley","3e1b2cdd":"no_missing_data['Fence'] = no_missing_data.loc[:, \"Fence\"].fillna(\"No\")\nno_missing_data.Fence","6da5f260":"no_missing_data['FireplaceQu'] = no_missing_data.loc[:, \"FireplaceQu\"].fillna(\"No\")\nno_missing_data.FireplaceQu","cae326eb":"no_missing_data['LotFrontage'] = no_missing_data.loc[:, \"LotFrontage\"].fillna(0)\nno_missing_data.LotFrontage","b9479aab":"no_missing_data['GarageType'] = no_missing_data.loc[:, \"GarageType\"].fillna(\"No\")\nno_missing_data.GarageType","25f26141":"no_missing_data['GarageFinish'] = no_missing_data.loc[:, \"GarageFinish\"].fillna(\"No\")\nno_missing_data.GarageFinish","8301900b":"no_missing_data['GarageQual'] = no_missing_data.loc[:, \"GarageQual\"].fillna(\"No\")\nno_missing_data.GarageQual","a39c3dea":"no_missing_data['GarageCond'] = no_missing_data.loc[:, \"GarageCond\"].fillna(\"No\")\nno_missing_data.GarageCond","8a3fef44":"no_missing_data['BsmtExposure'] = no_missing_data.loc[:, \"BsmtExposure\"].fillna(\"None\")\nno_missing_data.BsmtExposure","88b83462":"no_missing_data['BsmtFinType2'] = no_missing_data.loc[:, \"BsmtFinType2\"].fillna(\"No\")\nno_missing_data.BsmtFinType2","5153597b":"no_missing_data['BsmtFinType1'] = no_missing_data.loc[:, \"BsmtFinType1\"].fillna(\"No\")\nno_missing_data.BsmtFinType1","56b83774":"no_missing_data['BsmtCond'] = no_missing_data.loc[:, \"BsmtCond\"].fillna(\"No\")\nno_missing_data.BsmtCond","8e8f0a75":"no_missing_data['BsmtQual'] = no_missing_data.loc[:, \"BsmtQual\"].fillna(\"No\")\nno_missing_data.BsmtQual","ba58ba7d":"# For MasVnrType replace null with None\nno_missing_data['MasVnrType'] = no_missing_data.loc[:, \"MasVnrType\"].fillna(\"None\")\n\n# For MasVnrArea replace null with 0\nno_missing_data['MasVnrArea'] = no_missing_data.loc[:, \"MasVnrArea\"].fillna(0)","75b8fde3":"print(set(no_missing_data.GarageType.values))\nprint(set(no_missing_data.GarageFinish.values))\nprint(set(no_missing_data.GarageQual.values))\nprint(set(no_missing_data.GarageCond.values))","efdc5ce8":"# We will get index where GarageType, GarageFinish, GarageQual, GarageCond having values as no garage.\na = no_missing_data.loc[(no_missing_data.GarageType == \"No\") \n                        & (no_missing_data.GarageFinish == \"No\") \n                        & (no_missing_data.GarageQual == \"No\") \n                        & (no_missing_data.GarageCond == \"No\")].index.values\na","9930c0bd":"# Getting index where GarageYrBlt is None\nb = no_missing_data[no_missing_data['GarageYrBlt'].isnull()].index.values\nb","c2112a2d":"a == b","c257266a":"no_missing_data.drop(['GarageYrBlt'], axis = 1, inplace = True)","ae8b146c":"# Check for missing values\nm = no_missing_data.isnull().sum()\nm[m > 0]","c10d4dbe":"# We will drop all missing values\ndata_cleaned = no_missing_data.dropna()","f86b214d":"# Check for final missing values\nm = data_cleaned.isnull().sum()\nm[m > 0]","9d55524e":"print(\"Shape of original dataset - \", data.shape)\nprint(\"Shape of dataset after handling missing values - \", data_cleaned.shape)\nprint(f\"Percentage of data dropped - {(data.shape[0] - data_cleaned.shape[0]) \/ data.shape[0] * 100}%\")","8ab36ac9":"# Drop Id feature as it is redundant\ndata_cleaned = data_cleaned.drop(['Id'], axis = 1).reset_index(drop = True)","ceed21a5":"data_cleaned.head()","42f452e6":"# data frame with numerical features\ndata_cleaned.describe()","67019c5c":"# data frame with categorical features\ndata.describe(include='object')","698beee6":"sns.displot(data_cleaned.SalePrice)","d97663a9":"# Get numeric features\nnumeric_features = [i for i in data_cleaned.columns.values if data_cleaned[i].dtype != \"object\"]\nnumeric_features","d8ae58fe":"# Plot histplot of all numeric features\nf = pd.melt(data_cleaned, value_vars = numeric_features)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False)\ng = g.map(sns.histplot, \"value\")","68cb2609":"# Get list of  features with datatype as object\ncategorical_features = [i for i in data_cleaned.columns.values if data_cleaned[i].dtype == \"object\"]\ncategorical_features","5eb7ba98":"# Function to plot categorical features with respect to SalePrice\ndef boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)\n","c3f444c5":"# Function to convert datatype to category\ndef convert_type(data, features):\n    for feature in features:\n        data[feature] = data[feature].astype('category')\n        \n    return data","93e2e1fc":"# Converting object type to categorical\ndata_cleaned = convert_type(data_cleaned, categorical_features)\ndata_cleaned.info()","578b87b8":"# Visualize categorical features\nf = pd.melt(data_cleaned, id_vars=['SalePrice'], value_vars = categorical_features)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, height = 5)\ng = g.map(boxplot, \"value\", \"SalePrice\")","8dc929aa":"mssubclass = {20 : \"SC20\", 30 : \"SC30\", 40 : \"SC40\", 45 : \"SC45\", \n                                       50 : \"SC50\", 60 : \"SC60\", 70 : \"SC70\", 75 : \"SC75\", \n                                       80 : \"SC80\", 85 : \"SC85\", 90 : \"SC90\", 120 : \"SC120\", \n                                       150 : \"SC150\", 160 : \"SC160\", 180 : \"SC180\", 190 : \"SC190\"}\nmssubclass","877c2a3a":"msold = {1 : \"Jan\", 2 : \"Feb\", 3 : \"Mar\", 4 : \"Apr\", 5 : \"May\", 6 : \"Jun\",\n                                   7 : \"Jul\", 8 : \"Aug\", 9 : \"Sep\", 10 : \"Oct\", 11 : \"Nov\", 12 : \"Dec\"}\nmsold","3f9bfbe4":"# Create a copy\ndata_preprocessed = data_cleaned.copy(deep = True)\n\n# Convert features to category\ndata_preprocessed[\"MSSubClass\"] = data_preprocessed.MSSubClass.map(mssubclass)\ndata_preprocessed[\"MoSold\"] = data_preprocessed.MoSold.map(msold)\ndata_preprocessed = convert_type(data_preprocessed, [\"MSSubClass\", \"MoSold\"])\n\n# Get datatype\ndata_preprocessed.info()","1b38e70b":"# Encode some categorical features as ordered numbers when there is information in the order\ndata_preprocessed = data_preprocessed.replace({\"Alley\" : {\"None\": 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"CentralAir\" : {\"N\" : 0, \"Y\" : 1},\n                       \"BsmtCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\" : {\"No\" : 0, \"None\": 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\" : {\"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageFinish\" : {'Fin' : 3, 'RFn' : 2, 'Unf' : 1, 'No' : 0},\n                       \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                       \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"Fence\" : {'GdPrv' : 4, 'GdWo' : 2, 'MnPrv' : 3, 'MnWw' : 1, 'No' : 0},\n                       \"SaleCondition\" : {\"Abnorml\" : 0, \"Alloca\" : 0, \"AdjLand\" : 0, \"Family\" : 0, \"Normal\" : 0, \"Partial\" : 1},\n                       \"MasVnrType\" : {'BrkCmn' : 1, 'BrkFace' : 1, 'None' : 0, 'Stone' : 1, \"CBlock\" : 1},\n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                     )","5445ca04":"# Get dataset info\ndata_preprocessed.info()","9853ebf5":"data_preprocessed[\"OverallQual\"] = data_preprocessed.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ndata_preprocessed[\"OverallCond\"] = data_preprocessed.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ndata_preprocessed[\"PoolQC\"] = data_preprocessed.PoolQC.replace({1 : 1, 2 : 1, # average\n                                             3 : 2, 4 : 2 # good\n                                            })\ndata_preprocessed[\"GarageCond\"] = data_preprocessed.GarageCond.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ndata_preprocessed[\"GarageQual\"] = data_preprocessed.GarageQual.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ndata_preprocessed[\"FireplaceQu\"] = data_preprocessed.FireplaceQu.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\ndata_preprocessed[\"Functional\"] = data_preprocessed.Functional.replace({1 : 1, 2 : 1, # bad\n                                                     3 : 2, 4 : 2, # major\n                                                     5 : 3, 6 : 3, 7 : 3, # minor\n                                                     8 : 4 # typical\n                                                    })\ndata_preprocessed[\"KitchenQual\"] = data_preprocessed.KitchenQual.replace({1 : 0, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\ndata_preprocessed[\"HeatingQC\"] = data_preprocessed.HeatingQC.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\ndata_preprocessed[\"BsmtFinType1\"] = data_preprocessed.BsmtFinType1.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ndata_preprocessed[\"BsmtFinType2\"] = data_preprocessed.BsmtFinType2.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ndata_preprocessed[\"BsmtCond\"] = data_preprocessed.BsmtCond.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ndata_preprocessed[\"BsmtQual\"] = data_preprocessed.BsmtQual.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ndata_preprocessed[\"ExterCond\"] = data_preprocessed.ExterCond.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\ndata_preprocessed[\"ExterQual\"] = data_preprocessed.ExterQual.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\n\n","432b43c1":"data_preprocessed.info()","3c2b372d":"# Extracting numerical features list\nnumerical_features = data_preprocessed.select_dtypes(include = [\"int64\", \"float64\"]).columns\n\n# Extracting categorical features list\ncategorical_features = data_preprocessed.select_dtypes(exclude = [\"int64\", \"float64\"]).columns","b3a7aaff":"# Numerical dataset\nnumeric_data = data_preprocessed[numerical_features]\n\n# Categorical dataset\ncat_data = data_preprocessed[categorical_features]\n\n# Dependent variable as pandas series\ny = numeric_data[\"SalePrice\"]\n\n# Remove dependent variable from numerical dataset\nnumeric_data = numeric_data.drop('SalePrice', axis = 1)\nnumerical_features = numeric_data.columns.values","95e73c31":"# Function to return spearman coeffient for numerical features\ndef correlation_spearman(data, features, saleprice):\n    correlations = pd.DataFrame()\n    correlations[\"features\"] = features\n    \n    # Calculating spearman correlation\n    correlations[\"Correlation\"] = [data[i].corr(saleprice, 'spearman') for i in features]\n    \n    # Sort with respective to correlation\n    correlations.sort_values('Correlation', inplace = True)\n    correlations.reset_index(drop = True, inplace = True)\n    \n    return correlations\n    ","dc9248fb":"# Get correlation of nuemric features\ncorrelations = correlation_spearman(numeric_data, numerical_features, y)\ncorrelations.head()","233edec5":"# Visualizing correlation as barplot\nplt.figure(figsize=(6, 0.25*len(numerical_features)))\nsns.barplot(data = correlations, y='features', x='Correlation', orient='h')","ebe30824":"#correlation heat map\nf,ax = plt.subplots(figsize=(35, 18))\nsns.heatmap(numeric_data.corr(method = 'spearman'), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","16b3f105":"corr = numeric_data.corr(method = 'spearman')\nplt.figure(figsize=(30, 15))\nsns.heatmap(corr[(corr >= 0.9) | (corr <= -0.9)], \n            cmap='YlGnBu', vmax=1.0, vmin=-1.0,\n            annot=True, annot_kws={\"size\": 1})\nplt.title('Correlation between features', fontsize=15)\nplt.show()","79dd814f":"from scipy.stats import skew\n\n# Get skewness of all nuemric features\nskewness = numeric_data.apply(lambda x: skew(x))\n\n# Getfeatures with skewness greater than 0.5\nskewness = skewness[abs(skewness) > 0.5]\n\nprint(str(skewness.shape[0]) + \" skewed numerical features to log transform\")\n\nprint(\"Skewed features - \")\nskewed_features = list(skewness.index)\nprint(skewed_features)","5b0afd4e":"# Applying log transformation for skewed features\nnumeric_data = numeric_data.copy()\nnumeric_data.loc[:,skewed_features] = np.log1p(data_preprocessed[skewed_features])","cd93241b":"numeric_data.head()","44adcadf":"numerical_features = numeric_data.columns","c1943a16":"from scipy.stats import f_oneway\ndef anova_test(data, categorical_features, y):\n    data = pd.concat([data, y], axis = 1)\n    anova = pd.DataFrame()\n    anova['features']  = categorical_features\n    pvalues = list()\n    for category in categorical_features:\n        samples = []\n        for cls in data[category].unique():\n            s = data[data[category] == cls]['SalePrice'].values\n            samples.append(s)\n        pvalue = f_oneway(*samples)[1]\n        pvalues.append(pvalue)\n    \n    anova['pvalues'] = pvalues\n    anova.sort_values('pvalues', inplace = True)\n    anova.reset_index(drop  = True, inplace = True)\n    return anova","3301760e":"anova = anova_test(cat_data, categorical_features, y)\nanova.head()","b8158209":"anova['disparity'] = np.log(1.\/anova['pvalues'].values)\nanova","0a7a67d5":"plt.figure(figsize=(6, 0.25 * len(categorical_features)))\nsns.barplot(data = anova, y = 'features', x = 'disparity', orient = 'h')\nx = plt.xticks(rotation = 90)","b5a2e657":"y = np.log(y)\ny","54da9509":"cat_data = pd.get_dummies(cat_data)\ncat_data.head()","7fe8496c":"cat_data","6efe5252":"cat_data.shape","f04ce405":"len([0 for i in range(1459)])","df6b7ecd":"cat_data.insert(1, 'MSSubClass_SC150', [0 for i in range(1459)])\ncat_data","ec559a50":"from sklearn.preprocessing import StandardScaler","7b710f24":"scaler = StandardScaler()\nscaler.fit(numeric_data)\nnumeric_data = scaler.transform(numeric_data)","38992465":"numeric_data = pd.DataFrame(numeric_data, columns = numerical_features)\nnumeric_data.head()","5b126fa7":"train = pd.concat([numeric_data, cat_data], axis = 1)\ntrain.head()","8b545b7f":"from sklearn.model_selection import train_test_split","09a68e91":"X_train, X_test, y_train, y_test = train_test_split(train.values, y.values, test_size = 0.2, random_state = 0)\nprint(\"X_train : \" + str(X_train.shape))\nprint(\"X_test : \" + str(X_test.shape))\nprint(\"y_train : \" + str(y_train.shape))\nprint(\"y_test : \" + str(y_test.shape))","d75c60be":"import math\nfrom sklearn.metrics import mean_squared_error\n\n# Function to calculate RMSE\ndef error(actual, pred):\n    return np.sqrt(mean_squared_error(actual, pred))","26d201ef":"# Function to plot actual and predicted value \ndef scatter_plot(actual, pred):\n    plt.scatter(actual, pred)\n    plt.title(\"Linear regression\")\n    plt.xlabel(\"Real values\")\n    plt.ylabel(\"Predicted values\")\n    plt.legend()\n    plt.show()","53c10448":"# Dataframe to store RMSE of all models\nreport = pd.DataFrame(columns = ['Model', 'train_rmse', 'test_rmse'])","6fba17a5":"from sklearn.linear_model import LinearRegression","5e297970":"# Train the model\nlinear_reg = LinearRegression()\n\nlinear_reg.fit(X_train, y_train)","39040f1f":"# Test model\ny_train_11 = linear_reg.predict(X_train)\ny_pred = linear_reg.predict(X_test)","14e14581":"# Get rmse score\ntrain_rmse = error(y_train, y_train_11)\nprint(\"Train RMSE Score : \", train_rmse)\ntest_rmse = error(y_test, y_pred)\nprint(\"Test RMSE Score : \", test_rmse)","6c878303":"scatter_plot(y_train, y_train_11)\nscatter_plot(y_test, y_pred)","ae88d742":"# Generate report\nreport.loc[report.shape[0]] = ['linear_reg', train_rmse, test_rmse]\nreport","9051816d":"from sklearn.linear_model import RidgeCV","727d8a60":"# Train the model\nridge_reg = RidgeCV(alphas = [1e-3, 1e-2, 1e-1, 1])\nridge_reg.fit(X_train, y_train)","a0762a0e":"# Test model\ny_train_12 = ridge_reg.predict(X_train)\ny_pred = ridge_reg.predict(X_test)","aea96237":"# Get rmse score\ntrain_rmse = error(y_train, y_train_12)\nprint(\"Train RMSE Score : \", train_rmse)\ntest_rmse = error(y_test, y_pred)\nprint(\"Test RMSE Score : \", test_rmse)","41534ca5":"scatter_plot(y_train, y_train_12)\nscatter_plot(y_test, y_pred)","7f227d14":"# Generate report\nreport.loc[report.shape[0]] = ['ridge_reg', train_rmse, test_rmse]\nreport","586cbbe1":"from sklearn.linear_model import LassoCV","a5ec36e4":"lasso_reg = LassoCV(alphas = [0.0001, 0.0003, 0.0006, 0.001, 0.003, 0.006, 0.01, 0.03, 0.06, 0.1, \n                          0.3, 0.6, 1], \n                max_iter = 50000, cv = 10)\nlasso_reg.fit(X_train, y_train)\nalpha = lasso_reg.alpha_\nprint(\"Best alpha :\", alpha)","d397ea0c":"# Chossing alphas centered around 0.0003\nlasso_reg = LassoCV(alphas = [alpha * .3, alpha * .35, alpha * .7, alpha * .75, alpha * .8, \n                          alpha * .85, alpha * .9, alpha * .95, alpha, alpha * 1.05, \n                          alpha * 1.1, alpha * 1.15, alpha * 1.25, alpha * 1.3, alpha * 1.35, \n                          alpha * 1.4], \n                max_iter = 50000, cv = 10)\nlasso_reg.fit(X_train, y_train)\nalpha = lasso_reg.alpha_\nprint(\"Best alpha :\", alpha)","b11ec9d8":"# Test model\ny_train_13 = lasso_reg.predict(X_train)\ny_pred = lasso_reg.predict(X_test)","f7de3fa2":"# Get rmse score\ntrain_rmse = error(y_train, y_train_13)\nprint(\"Train RMSE Score : \", train_rmse)\ntest_rmse = error(y_test, y_pred)\nprint(\"Test RMSE Score : \", test_rmse)","028fde2c":"scatter_plot(y_train, y_train_13)\nscatter_plot(y_test, y_pred)","ade91c48":"# Plot important coefficients\ncoefs = pd.Series(lasso_reg.coef_, index = train.columns)\nprint(\"Lasso picked \" + str(sum(coefs != 0)) + \" features and eliminated the other \" +  str(sum(coefs == 0)) + \" features\")\n\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")\nplt.show()","142d5a3a":"# Generate report\nreport.loc[report.shape[0]] = ['lasso_reg', train_rmse, test_rmse]\nreport","11f69b88":"from sklearn.linear_model import ElasticNetCV","b4fb6d5c":"# Train the model\nelasticnet_reg = ElasticNetCV(l1_ratio = [0.1, 0.3, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1],\n                          alphas = [0.0001, 0.0003, 0.0006, 0.001, 0.003, 0.006, \n                                    0.01, 0.03, 0.06, 0.1, 0.3, 0.6, 1, 3, 6], \n                          max_iter = 50000, cv = 10)\nelasticnet_reg.fit(X_train, y_train)","92c0d27c":"# Test model\ny_train_14 = elasticnet_reg.predict(X_train)\ny_pred = elasticnet_reg.predict(X_test)","630fefd8":"# Get rmse score\ntrain_rmse = error(y_train, y_train_14)\nprint(\"Train RMSE Score : \", train_rmse)\ntest_rmse = error(y_test, y_pred)\nprint(\"Test RMSE Score : \", test_rmse)","1a290282":"scatter_plot(y_train, y_train_14)\nscatter_plot(y_test, y_pred)","67d4cd34":"# Plot important coefficients\ncoefs = pd.Series(elasticnet_reg.coef_, index = train.columns)\nprint(\"ElasticNet picked \" + str(sum(coefs != 0)) + \" features and eliminated the other \" +  str(sum(coefs == 0)) + \" features\")\n\nimp_coefs = pd.concat([coefs.sort_values().head(10),\n                     coefs.sort_values().tail(10)])\nimp_coefs.plot(kind = \"barh\")\nplt.title(\"Coefficients in the ElasticNet Model\")\nplt.show()","91f632e2":"# Generate report\nreport.loc[report.shape[0]] = ['elasticnet_reg', train_rmse, test_rmse]\nreport","52e4cb90":"import xgboost as xgb\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV","ebf1082a":"def hyperParameterTuning(X_train, y_train):\n    param_tuning = {\n        'learning_rate': [0.01, 0.1],\n        'max_depth': [3, 5, 7, 10],\n        'min_child_weight': [1, 3, 5],\n        'subsample': [0.5, 0.7],\n        'colsample_bytree': [0.5, 0.7],\n        'n_estimators' : [100, 200, 500],\n        'objective': ['reg:squarederror']\n    }\n\n    xgb_model = XGBRegressor()\n\n    gsearch = GridSearchCV(estimator = xgb_model,\n                           param_grid = param_tuning,                        \n                           cv = 3,\n                           n_jobs = -1,\n                           verbose = 1)\n\n    gsearch.fit(X_train,y_train)\n\n    return gsearch.best_params_","76738353":"best_params = hyperParameterTuning(X_train, y_train)","bf58648d":"best_params","aaece83f":"# Train the model on best parameters\nxgb_model = XGBRegressor(objective = 'reg:squarederror',\n        colsample_bytree = 0.7,\n        learning_rate = 0.1,\n        max_depth = 3,\n        min_child_weight = 1,\n        n_estimators = 500,\n        subsample = 0.7)\n\nxgb_model.fit(X_train, y_train)","31bea7a3":"# Test model\ny_train_14 = xgb_model.predict(X_train)\ny_pred = xgb_model.predict(X_test)","b37a1344":"# Get rmse score\ntrain_rmse = error(y_train, y_train_14)\nprint(\"Train RMSE Score : \", train_rmse)\ntest_rmse = error(y_test, y_pred)\nprint(\"Test RMSE Score : \", test_rmse)","8a29399d":"scatter_plot(y_train, y_train_14)\nscatter_plot(y_test, y_pred)","7a0f9a71":"# Generate report\nreport.loc[report.shape[0]] = ['xgb_reg', train_rmse, test_rmse]\nreport","e62cbe01":"report","57001afd":"best_model = xgb_model","818b20e6":"# Reading test file from kaggle\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.head()","452ff4ce":"# get the count of missing values\nmissing_test = test.isnull().sum()\n\n# get features with missing values greater than 0 \nmissing_test = missing_test[missing_test > 0]\n\nmissing_test.sort_values(inplace = True, ascending = False)\n_missingtest = pd.DataFrame()\n_missingtest[\"Features\"] = missing_test.index\n_missingtest[\"Count\"] = missing_test.values\n_missingtest[\"Percentage\"] = missing_test.values \/ test.shape[0] * 100\n_missingtest[\"Type\"] = [test[i].dtype for i in missing_test.index]\n_missingtest","f7dc829c":"cleaned_test = test.copy(deep = True)","951a491e":"# Handling Missing values - similar to that of training data\ncleaned_test['PoolQC'] = cleaned_test.loc[:, \"PoolQC\"].fillna(\"No\")\ncleaned_test['MiscFeature'] = cleaned_test.loc[:, \"MiscFeature\"].fillna(\"None\")\ncleaned_test['Alley'] = cleaned_test.loc[:, \"Alley\"].fillna(\"None\")\ncleaned_test['Fence'] = cleaned_test.loc[:, \"Fence\"].fillna(\"No\")\ncleaned_test['FireplaceQu'] = cleaned_test.loc[:, \"FireplaceQu\"].fillna(\"No\")\ncleaned_test['LotFrontage'] = cleaned_test.loc[:, \"LotFrontage\"].fillna(0)\ncleaned_test['GarageCond'] = cleaned_test.loc[:, \"GarageCond\"].fillna(\"No\")\ncleaned_test['GarageQual'] = cleaned_test.loc[:, \"GarageQual\"].fillna(\"No\")\ncleaned_test['GarageFinish'] = cleaned_test.loc[:, \"GarageFinish\"].fillna(\"No\")\ncleaned_test['GarageType'] = cleaned_test.loc[:, \"GarageType\"].fillna(\"No\")\ncleaned_test['BsmtCond'] = cleaned_test.loc[:, \"BsmtCond\"].fillna(\"No\")\ncleaned_test['BsmtExposure'] = cleaned_test.loc[:, \"BsmtExposure\"].fillna(\"None\")\ncleaned_test['BsmtQual'] = cleaned_test.loc[:, \"BsmtQual\"].fillna(\"No\")\ncleaned_test['BsmtFinType1'] = cleaned_test.loc[:, \"BsmtFinType1\"].fillna(\"No\")\ncleaned_test['BsmtFinType2'] = cleaned_test.loc[:, \"BsmtFinType2\"].fillna(\"No\")\ncleaned_test['MasVnrType'] = cleaned_test.loc[:, \"MasVnrType\"].fillna(\"None\")\ncleaned_test['MasVnrArea'] = cleaned_test.loc[:, \"MasVnrArea\"].fillna(0)\ncleaned_test['BsmtFullBath'] = cleaned_test.loc[:, \"BsmtFullBath\"].fillna(0)\ncleaned_test['BsmtHalfBath'] = cleaned_test.loc[:, \"BsmtHalfBath\"].fillna(0)\ncleaned_test['Functional'] = cleaned_test.loc[:, \"Functional\"].fillna(\"None\")\ncleaned_test['Utilities'] = cleaned_test.loc[:, \"Utilities\"].fillna(\"NoSeWa\")\ncleaned_test['GarageCars'] = cleaned_test.loc[:, \"GarageCars\"].fillna(0)\ncleaned_test['GarageArea'] = cleaned_test.loc[:, \"GarageArea\"].fillna(0)\ncleaned_test['TotalBsmtSF'] = cleaned_test.loc[:, \"TotalBsmtSF\"].fillna(0)\ncleaned_test['KitchenQual'] = cleaned_test.loc[:, \"KitchenQual\"].fillna(\"Po\")\ncleaned_test['BsmtUnfSF'] = cleaned_test.loc[:, \"BsmtUnfSF\"].fillna(0)\ncleaned_test['BsmtFinSF2'] = cleaned_test.loc[:, \"BsmtFinSF2\"].fillna(0)\ncleaned_test['BsmtFinSF1'] = cleaned_test.loc[:, \"BsmtFinSF1\"].fillna(0)\ncleaned_test['Exterior2nd'] = cleaned_test.loc[:, \"Exterior2nd\"].fillna(\"Other\")\ncleaned_test['Exterior1st'] = cleaned_test.loc[:, \"Exterior1st\"].fillna(\"Stone\")\ncleaned_test['SaleType'] = cleaned_test.loc[:, \"SaleType\"].fillna(\"Oth\")\n\n","0ba05d04":"# Converting object features to categorical\ncleaned_test = convert_type(cleaned_test, [i for i in cleaned_test.columns.values if cleaned_test[i].dtype == \"object\"])","060b3506":"# Converting categorical features to numeric\ncleaned_test[\"MSSubClass\"] = cleaned_test.MSSubClass.map(mssubclass)\ncleaned_test[\"MoSold\"] = cleaned_test.MoSold.map(msold)\ncleaned_test = convert_type(cleaned_test, [\"MSSubClass\", \"MoSold\"])\n\n\ncleaned_test = cleaned_test.replace({\"Alley\" : {\"None\": 0, \"Grvl\" : 1, \"Pave\" : 2},\n                       \"CentralAir\" : {\"N\" : 0, \"Y\" : 1},\n                       \"BsmtCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"BsmtExposure\" : {\"No\" : 0, \"None\": 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n                       \"BsmtFinType1\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtFinType2\" : {\"No\" : 0, \"Unf\" : 1, \"LwQ\": 2, \"Rec\" : 3, \"BLQ\" : 4, \n                                         \"ALQ\" : 5, \"GLQ\" : 6},\n                       \"BsmtQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"ExterCond\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"ExterQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\": 3, \"Gd\": 4, \"Ex\" : 5},\n                       \"FireplaceQu\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"Functional\" : {\"None\" : 0, \"Sal\" : 1, \"Sev\" : 2, \"Maj2\" : 3, \"Maj1\" : 4, \"Mod\": 5, \n                                       \"Min2\" : 6, \"Min1\" : 7, \"Typ\" : 8},\n                       \"GarageCond\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageQual\" : {\"No\" : 0, \"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"GarageFinish\" : {'Fin' : 3, 'RFn' : 2, 'Unf' : 1, 'No' : 0},\n                       \"HeatingQC\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"KitchenQual\" : {\"Po\" : 1, \"Fa\" : 2, \"TA\" : 3, \"Gd\" : 4, \"Ex\" : 5},\n                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3},\n                       \"LotShape\" : {\"IR3\" : 1, \"IR2\" : 2, \"IR1\" : 3, \"Reg\" : 4},\n                       \"PavedDrive\" : {\"N\" : 0, \"P\" : 1, \"Y\" : 2},\n                       \"PoolQC\" : {\"No\" : 0, \"Fa\" : 1, \"TA\" : 2, \"Gd\" : 3, \"Ex\" : 4},\n                       \"Street\" : {\"Grvl\" : 1, \"Pave\" : 2},\n                       \"Fence\" : {'GdPrv' : 4, 'GdWo' : 2, 'MnPrv' : 3, 'MnWw' : 1, 'No' : 0},\n                       \"SaleCondition\" : {\"Abnorml\" : 0, \"Alloca\" : 0, \"AdjLand\" : 0, \"Family\" : 0, \"Normal\" : 0, \"Partial\" : 1},\n                       \"MasVnrType\" : {'BrkCmn' : 1, 'BrkFace' : 1, 'None' : 0, 'Stone' : 1, \"CBlock\" : 1},\n                       \"Utilities\" : {\"ELO\" : 1, \"NoSeWa\" : 2, \"NoSewr\" : 3, \"AllPub\" : 4}}\n                     )\n\n# Simplying numeric features\n\ncleaned_test[\"OverallQual\"] = cleaned_test.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ncleaned_test[\"OverallCond\"] = cleaned_test.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n                                                       4 : 2, 5 : 2, 6 : 2, # average\n                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n                                                      })\ncleaned_test[\"PoolQC\"] = cleaned_test.PoolQC.replace({1 : 1, 2 : 1, # average\n                                             3 : 2, 4 : 2 # good\n                                            })\ncleaned_test[\"GarageCond\"] = cleaned_test.GarageCond.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ncleaned_test[\"GarageQual\"] = cleaned_test.GarageQual.replace({1 : 1, # bad\n                                                     2 : 1, 3 : 1, # average\n                                                     4 : 2, 5 : 2 # good\n                                                    })\ncleaned_test[\"FireplaceQu\"] = cleaned_test.FireplaceQu.replace({1 : 1, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\ncleaned_test[\"Functional\"] = cleaned_test.Functional.replace({1 : 1, 2 : 1, # bad\n                                                     3 : 2, 4 : 2, # major\n                                                     5 : 3, 6 : 3, 7 : 3, # minor\n                                                     8 : 4 # typical\n                                                    })\ncleaned_test[\"KitchenQual\"] = cleaned_test.KitchenQual.replace({1 : 0, # bad\n                                                       2 : 1, 3 : 1, # average\n                                                       4 : 2, 5 : 2 # good\n                                                      })\ncleaned_test[\"HeatingQC\"] = cleaned_test.HeatingQC.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\ncleaned_test[\"BsmtFinType1\"] = cleaned_test.BsmtFinType1.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ncleaned_test[\"BsmtFinType2\"] = cleaned_test.BsmtFinType2.replace({1 : 1, # unfinished\n                                                         2 : 1, 3 : 1, # rec room\n                                                         4 : 2, 5 : 2, 6 : 2 # living quarters\n                                                        })\ncleaned_test[\"BsmtCond\"] = cleaned_test.BsmtCond.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ncleaned_test[\"BsmtQual\"] = cleaned_test.BsmtQual.replace({1 : 1, # bad\n                                                 2 : 1, 3 : 1, # average\n                                                 4 : 2, 5 : 2 # good\n                                                })\ncleaned_test[\"ExterCond\"] = cleaned_test.ExterCond.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\ncleaned_test[\"ExterQual\"] = cleaned_test.ExterQual.replace({1 : 0, # bad\n                                                   2 : 1, 3 : 1, # average\n                                                   4 : 2, 5 : 2 # good\n                                                  })\n\ncleaned_test.info()","6f126bd1":"# Dropping GarageYrBlt as it is dropped while training\ncleaned_test.drop(\"GarageYrBlt\", inplace = True, axis = 1)","249adff4":"# Get dataframe of only numerical features\nnumeric_test = cleaned_test[cleaned_test.select_dtypes(include = [\"int64\", \"float64\"]).columns]\n\n# Get dataframe of only categorical features\ncat_test = cleaned_test[cleaned_test.select_dtypes(exclude = [\"int64\", \"float64\"]).columns]","1c9a9915":"# Reducing Skewness of features\nnumeric_test = numeric_test.copy()\nnumeric_test.loc[:,skewed_features] = np.log1p(numeric_test[skewed_features])","0b9c4ec8":"# Creating dummies variables\ncat_test = pd.get_dummies(cat_test)\ncat_test","f1543f97":"# Including dummy variables present in training set\ndef include_train_dummies(train, test):\n    a = list(train.columns.values)\n    b = list(test.columns.values)\n    c = [i for i in a if i not in b]\n    k = [0 for j in range(1459)]\n    indexs = []\n    for i in c:\n        indexs.append(a.index(i))\n    \n    for i in range(len(c)):\n        test.insert(indexs[i], c[i], k)\n        \n    return test\n        \ncat_test = include_train_dummies(cat_data, cat_test)\ncat_test","dee89c73":"# Removing redundant features\nId = numeric_test['Id'].values.tolist()\nnumeric_test.drop('Id', inplace = True, axis = 1)\nnumeric_test","3b36a30b":"# List of numeric features\ntest_numeric_features = numeric_test.columns.values.tolist()","e61c37a5":"# Standardizing test set\nnumeric_test = scaler.transform(numeric_test)","cd62a710":"# Converting numpy array object to dataframe\nnumeric_test = pd.DataFrame(numeric_test, columns = test_numeric_features)\nnumeric_test.head()","cd96767e":"# Concatenate numeric and categorical dataframes\nfinal_test = pd.concat([numeric_test, cat_test], axis = 1)\nfinal_test.head()","d4083de5":"# Make predictions using best model\nfinal_predictions = best_model.predict(final_test.values)","52432bb8":"# Creating a dataframe for submission\nfinal_submission = pd.DataFrame()\nfinal_submission[\"Id\"] = Id\nfinal_submission[\"SalePrice\"] = np.exp(final_predictions)","99189f33":"# Saving submissions as a csv file\nfinal_submission.to_csv(\"submission.csv\", index=False)","e22c628c":"**6. Plot important coeffients considerd by lasso regressor**","0d115b37":"**Go to [table of contents](#toc)**","75b76eb1":"### Handling PoolQC\n\nWe will replace NaN with No as data descryption of NA in PoolQC is No Pool","aa8510a0":"**1. Get best alpha**","74ac0f69":"**6. Tabulate Result**","509ac81c":"### Handling GarageYrBlt\n\nTo handle GarageYrBlt we need to explore GarageType, GarageFinish, GarageQual, GarageCond","9e6f20ec":"**Go to [table of contents](#toc)**","f9e43a4a":"### Handling FireplaceQu\n\nWe will replace NaN with No as data descryption of NA in FireplaceQu is No fire place","63dd9a97":"<a id='Statistical_Summary'><\/a>\n## 3.3. Statistical Summary\nHere we take a look at the summary of each attribute. This includes the count, mean, the min and max values as well as some percentiles for numeric variables. **Go to [table of contents](#toc)**","9cbe8228":"### Handling MiscFeature\n\nWe will replace NaN with None as data descryption of NA in MiscFeature is No features covered","c508387b":"**3. Make predictions**","299bb3c4":"**5. Plot RMSE Score**","58c2fc17":"**6. Tabulate Result**","ddf721b4":"### Analysis of Numerical features","b0a41a59":"### Handling Electrical\n\nSince there is only one missing value we can drop the tuple","2ee912ed":"### Handling LotFrontage\n\nWe will replace NaN with None as data descryption of NA in Alley is No alley access","726e1af2":"<a id='EDA'><\/a>\n## 4. Exploratiory Data Analysis(EDA)\n","4966f9d4":"# Problem Statement\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","44419848":"**Go to [table of contents](#toc)**","8fb78ffa":"**1. Hyperparameter Tuning**","628af2ec":"There are 18 features with missing values. But before handling them let's visualize missing values count","6dba7f8e":"**4. Calculate metrics**","29548476":"**4. Plot RMSE**","14a0cf38":"There are no missing values present in the data.","717836da":"### Handling BsmtQual\n\nWe will replace NaN with No as data descryption of NA in BsmtQual is No basement","5e44f22b":"### Handling GarageType\n\nWe will replace NaN with No as data descryption of NA in GarageType is No garage","1b1ed802":"<a id='Label_Encoding_for_categorical_Variable'><\/a>\n## 5. Encoding categorical Features\nCreating dummies for categorical data. **Go to [table of contents](#toc)**","536c53a3":"<a id=\"model_cmp\"> <\/a>\n## 8. Model Comparision","b0b046cf":"**4. Plot rmse**","0f49afbe":"Concatenate numerical and categorical features using concat() function from pandas","52bdfe40":"**3. Compute the accuracy**","336a76e6":"From the above output,we see that\n* There are almost equal number of continous and categorical features. \n* And some categorical features can be reperesented as numerical","ff41a5b7":"### Handling Fence\n\nWe will replace NaN with No as data descryption of NA in Fence is No fence","22f805e3":"**Encoding categorical features as numerical features**","e034684f":"**4. Plot RMSE Score**","c8d4e7b8":"Before we move any furthure let's create a copy of our dataset so as to preserve the original data","da30bc55":"  <tr>\n        <td width=\"15%\">\n        <\/td>\n        <td>\n            <div align=\"left\">\n                <font size=25px>\n                    <b>House Prices - Advanced Regression Techniques\n                    <\/b>\n                <\/font>\n            <\/div>\n        <\/td>\n    <\/tr>","af0c5f60":"### Handling BsmtExposure\n\nWe will replace NaN with None as data descryption of NA in BsmtExposure is No basement","b926475a":"**Converting numerical to categorical features to do so let's create dictonaries**","09b7f680":"1. **[Import Packages](#import_packages)**\n\n2. **[Read Data](#Read_Data)**\n\n3. **[Understand and Prepare the Data](#data_preparation)**\n    - 3.1 - [Data Types and Dimensions](#Data_Types)\n    - 3.2 - [Missing Data Treatment](#Missing_Data_Treatment)\n    - 3.3 - [Statistical Summary](#Statistical_Summary)\n\n4. **[Exploratory Data Analysis](#EDA)**    \n    - 4.1 - [Univariate Analysis](#Univariate_Analysis)\n    - 4.2 - [Multivariate Analysis](#Multivariate_Analysis)\n\n5. **[Label Encoding for categorical Variable](#Label_Encoding_for_categorical_Variable)**\n\n6. **[Standardizing numeric features](#Standardise_Data)**\n\n7. **[ML Models](#ML_Models)**\n    - 7.1 - [Linear Regression](#Linear_Regression)\n    - 7.2 - [Rigde Regression](#Rigde_Regression)\n    - 7.3 - [Lasso Regression](#Lasso_Regression)\n    - 7.4 - [ElasticNet Regression](#ElasticNet_Regression)\n    - 7.5 - [Xgboost](#Xgboost)\n\n8. **[Model Comparision](#model_cmp)**  \n9. **[Kaggle Submission](#kaggle)**  \n    \n  ","c31966b3":"### Analysis of Sales Price","2be3b211":"<a id='Data_Types'><\/a>\n## 3.1 Data Types and Dimensions","92945ae8":"### Handling GarageFinish\n\nWe will replace NaN with No as data descryption of NA in GarageFinish is No Garage","ee9e7e76":"**5. Tabulate Result**","f177900e":"From final result we can see that xgboost have lower test rmse as compared to other models","51baa767":"<a id='import_packages'><\/a>\n## 1. Import Packages\n\n**Go to [table of contents](#toc)**","5e194db9":"**Go to [table of contents](#toc)**","3b75ce5d":"### Handling MasVnrArea and MasVnrType","2befd6c3":"<a id='Multivariate_Analysis'><\/a>\n## 4.2. Multivariate Analysis","3772b8ee":"<a id=\"Lasso_Regression\"> <\/a>\n## 7.3 Lasso Regression","e0b885fc":"**5. Plot RMSE score**","4f92c6fc":"<a id='Univariate_Analysis'><\/a>\n## 4.1. Univariate Analysis","948994f3":"We will get list of numeric features with skewness greater than 0.5 so that we can perform logarithm tranformation","5236c86c":"**2. Build the model**","c47d122a":"**2. Make predictions**","87ffaff2":"**5. Tabulate result**","78de277c":"<a id=\"Standardise_Data\"> <\/a>\n## 6. Standardizing numerical features\n\nDataset is standardized using StandardScaler from sklearn package. **Go to [table of contents](#toc)**","d4acf4a3":"<a id=\"toc\"> <\/a>\n# Table of Contents","8e59cdfb":"**For numerical variables, we use .describe(). For categorical variables we use describe(include='object').**\n","3a192e46":"<a id=\"ML_Models\"> <\/a>\n## 7. ML Models","f79cb63a":"<a id='data_preparation'><\/a>\n## 3. Understand and Prepare the Data\n\nThe process of data preparation entails cleansing, structuring and integrating data to make it ready for analysis.\n**Go to [table of contents](#toc)**","b0186cc6":"### Handling BsmtFinType1\n\nWe will replace NaN with No as data descryption of NA in BsmtFinType1 is No basement","d96c0de8":"### Handling BsmtCond\n\nWe will replace NaN with No as data descryption of NA in BsmtCond is No basement","740bbc0c":"**5. Plot features picked by elastic net regressor**","93376f4a":"### Handling GarageCond\n\nWe will replace NaN with No as data descryption of NA in GarageCond is No garage","6e2fa7ef":"<a id=\"ElasticNet_Regression\"> <\/a>\n## 7.4 ElasticNet Regression","07eb7545":"**2. Build model using best alpha**","474f19e9":"**We will create modify exisiting features to make them more precise**","f83357a0":"Before multivariate analysis we will divide dataset to muerical data and categorical data so that we can analyse them in depth","5322559b":"**7. Tabulate result**","00a81ea9":"**2. Predict the values**","a577317e":"There is negeative skew in saleprice so to remove skewness we need to perform normalization","c0dced33":"### Handling Alley\n\nWe will replace NaN with None as data descryption of NA in Alley is No alley access","78b02190":"## Correlation \n\nWe will use spearman correlation to identify relationship between numeric features and dependent variable","e2f6b8dd":"**3. Make predictions**","4f9d440e":"The above output illustrates the summary statistics of all the numeric variables like the mean, median(50%), minimum, and maximum values, along with the standard deviation","fdab5a8d":"**GridSearchCV params:**\n\n- **estimator:** estimator object\n- **param_grid :** dict or list of dictionaries\n- **scoring:** A single string or a callable to evaluate the predictions on the test set. If None, the estimator\u2019s score method is used.\n- **n_jobs:** Number of jobs to run in parallel. None means. -1 means using all processors.\n- **cv:** cross-validation, None, to use the default 3-fold cross validation. Integer, to specify the number of folds in a (Stratified)KFold.\n\n**Hyper Parameters :**\n\n* **learning rate** - Learning rate for training model\n* **early_stopping_rounds** -  The number of rounds without improvements after which we should stop\n* **max_depth** - It is the maximum number of nodes allowed from the root to the farthest leaf of a tree\n* **min_child_weight** - It is the minimum weight required in order to create a new node in the tree.\n* **subsample** - Subsample ratio of the training instances. Setting it to 0.5 means that XGBoost would randomly sample half of the training data prior to growing trees. and this will prevent overfitting.\n* **colsample_bytree** - specify the fraction of columns to be subsampled.","819f359a":"# Data Description","f4622c0a":"**Exploring individual features**","86378d73":"## ANOVA test \n\nWe will perform one way anova to identify categorical features having higher impact on SalePrice","545213c7":"**3. Compute metrics**","19265a78":"Since both index are same we can drop all GarageYrBlt feature","561a7279":"### Handling GarageQual\n\nWe will replace NaN with No as data descryption of NA in GarageQual is No garage","d4cd6335":"<a id='Missing_Data_Treatment'><\/a>\n## 3.2. Missing Data Treatment","379e0f9b":"<div align=\"left\", style=\"font-size:120%\">\n                     Here we will analyze and prepare data :<br><br>\n                        a. Check dimensions and data types of the dataframe <br>\n                        b. Check for missing values<br>\n                        c. Study summary statistics<br>   \n    \n<\/div>","06ddcd17":"**Go to [table of contents](#toc)**","6bdaad5d":"**Note - We need to check index where GarageYrBlt is None and it should match with index where other features like GarageType, GarageFinish, GarageQual, GarageCond are None**","4c11ab00":"**2. Make predictions**","9f66f6d2":"<a id=\"kaggle\"> <\/a>\n## 9. Kaggle Submission\n\n**Go to [table of contents](#toc)**","20a59629":"**1. Build the model**","514574d3":"Conclusion of Univariate Analysis - \n* There are some columns which hold categorical importance like MSSubClass, MoSold but are represented as numeric features\n* Some numeric feature are skewed so to overcome this we need to apply log transformation\n* Some categorical features hold numeric importance\n* Need to simply categorical features to make them more precise","355e349e":"**3. Computer metrics**","7a2a3615":"**Go to [table of contents](#toc)**","9805bdec":"**4. Compute metrics**","a1a0f319":"### Analysis of Categorical features","3aa52457":"Splitting data into train and test","b98f1f02":"**Go to [table of contents](#toc)**","487e7a8d":"Perform Logarithmic tranformation on SalePrice to reduce skewness","91d9cc36":"## Independent variables\nMSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\nMSZoning: Identifies the general zoning classification of the sale.\n\t\t\n       A\tAgriculture\n       C\tCommercial\n       FV\tFloating Village Residential\n       I\tIndustrial\n       RH\tResidential High Density\n       RL\tResidential Low Density\n       RP\tResidential Low Density Park \n       RM\tResidential Medium Density\n\t\nLotFrontage: Linear feet of street connected to property\n\nLotArea: Lot size in square feet\n\nStreet: Type of road access to property\n\n       Grvl\tGravel\t\n       Pave\tPaved\n       \t\nAlley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access\n\t\t\nLotShape: General shape of property\n\n       Reg\tRegular\t\n       IR1\tSlightly irregular\n       IR2\tModerately Irregular\n       IR3\tIrregular\n       \nLandContour: Flatness of the property\n\n       Lvl\tNear Flat\/Level\t\n       Bnk\tBanked - Quick and significant rise from street grade to building\n       HLS\tHillside - Significant slope from side to side\n       Low\tDepression\n\t\t\nUtilities: Type of utilities available\n\t\t\n       AllPub\tAll public Utilities (E,G,W,& S)\t\n       NoSewr\tElectricity, Gas, and Water (Septic Tank)\n       NoSeWa\tElectricity and Gas Only\n       ELO\tElectricity only\t\n\t\nLotConfig: Lot configuration\n\n       Inside\tInside lot\n       Corner\tCorner lot\n       CulDSac\tCul-de-sac\n       FR2\tFrontage on 2 sides of property\n       FR3\tFrontage on 3 sides of property\n\t\nLandSlope: Slope of property\n\t\t\n       Gtl\tGentle slope\n       Mod\tModerate Slope\t\n       Sev\tSevere Slope\n\t\nNeighborhood: Physical locations within Ames city limits\n\n       Blmngtn\tBloomington Heights\n       Blueste\tBluestem\n       BrDale\tBriardale\n       BrkSide\tBrookside\n       ClearCr\tClear Creek\n       CollgCr\tCollege Creek\n       Crawfor\tCrawford\n       Edwards\tEdwards\n       Gilbert\tGilbert\n       IDOTRR\tIowa DOT and Rail Road\n       MeadowV\tMeadow Village\n       Mitchel\tMitchell\n       Names\tNorth Ames\n       NoRidge\tNorthridge\n       NPkVill\tNorthpark Villa\n       NridgHt\tNorthridge Heights\n       NWAmes\tNorthwest Ames\n       OldTown\tOld Town\n       SWISU\tSouth & West of Iowa State University\n       Sawyer\tSawyer\n       SawyerW\tSawyer West\n       Somerst\tSomerset\n       StoneBr\tStone Brook\n       Timber\tTimberland\n       Veenker\tVeenker\n\t\t\t\nCondition1: Proximity to various conditions\n\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nCondition2: Proximity to various conditions (if more than one is present)\n\t\t\n       Artery\tAdjacent to arterial street\n       Feedr\tAdjacent to feeder street\t\n       Norm\tNormal\t\n       RRNn\tWithin 200' of North-South Railroad\n       RRAn\tAdjacent to North-South Railroad\n       PosN\tNear positive off-site feature--park, greenbelt, etc.\n       PosA\tAdjacent to postive off-site feature\n       RRNe\tWithin 200' of East-West Railroad\n       RRAe\tAdjacent to East-West Railroad\n\t\nBldgType: Type of dwelling\n\t\t\n       1Fam\tSingle-family Detached\t\n       2FmCon\tTwo-family Conversion; originally built as one-family dwelling\n       Duplx\tDuplex\n       TwnhsE\tTownhouse End Unit\n       TwnhsI\tTownhouse Inside Unit\n\t\nHouseStyle: Style of dwelling\n\t\n       1Story\tOne story\n       1.5Fin\tOne and one-half story: 2nd level finished\n       1.5Unf\tOne and one-half story: 2nd level unfinished\n       2Story\tTwo story\n       2.5Fin\tTwo and one-half story: 2nd level finished\n       2.5Unf\tTwo and one-half story: 2nd level unfinished\n       SFoyer\tSplit Foyer\n       SLvl\tSplit Level\n\t\nOverallQual: Rates the overall material and finish of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\n       5\tAverage\n       4\tBelow Average\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\nOverallCond: Rates the overall condition of the house\n\n       10\tVery Excellent\n       9\tExcellent\n       8\tVery Good\n       7\tGood\n       6\tAbove Average\t\n       5\tAverage\n       4\tBelow Average\t\n       3\tFair\n       2\tPoor\n       1\tVery Poor\n\t\t\nYearBuilt: Original construction date\n\nYearRemodAdd: Remodel date (same as construction date if no remodeling or additions)\n\nRoofStyle: Type of roof\n\n       Flat\tFlat\n       Gable\tGable\n       Gambrel\tGabrel (Barn)\n       Hip\tHip\n       Mansard\tMansard\n       Shed\tShed\n\t\t\nRoofMatl: Roof material\n\n       ClyTile\tClay or Tile\n       CompShg\tStandard (Composite) Shingle\n       Membran\tMembrane\n       Metal\tMetal\n       Roll\tRoll\n       Tar&Grv\tGravel & Tar\n       WdShake\tWood Shakes\n       WdShngl\tWood Shingles\n\t\t\nExterior1st: Exterior covering on house\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\t\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nExterior2nd: Exterior covering on house (if more than one material)\n\n       AsbShng\tAsbestos Shingles\n       AsphShn\tAsphalt Shingles\n       BrkComm\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       CemntBd\tCement Board\n       HdBoard\tHard Board\n       ImStucc\tImitation Stucco\n       MetalSd\tMetal Siding\n       Other\tOther\n       Plywood\tPlywood\n       PreCast\tPreCast\n       Stone\tStone\n       Stucco\tStucco\n       VinylSd\tVinyl Siding\n       Wd Sdng\tWood Siding\n       WdShing\tWood Shingles\n\t\nMasVnrType: Masonry veneer type\n\n       BrkCmn\tBrick Common\n       BrkFace\tBrick Face\n       CBlock\tCinder Block\n       None\tNone\n       Stone\tStone\n\t\nMasVnrArea: Masonry veneer area in square feet\n\nExterQual: Evaluates the quality of the material on the exterior \n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nExterCond: Evaluates the present condition of the material on the exterior\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nFoundation: Type of foundation\n\t\t\n       BrkTil\tBrick & Tile\n       CBlock\tCinder Block\n       PConc\tPoured Contrete\t\n       Slab\tSlab\n       Stone\tStone\n       Wood\tWood\n\t\t\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n\t\t\nBsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\t\t\nBsmtFinSF1: Type 1 finished square feet\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinSF2: Type 2 finished square feet\n\nBsmtUnfSF: Unfinished square feet of basement area\n\nTotalBsmtSF: Total square feet of basement area\n\nHeating: Type of heating\n\t\t\n       Floor\tFloor Furnace\n       GasA\tGas forced warm air furnace\n       GasW\tGas hot water or steam heat\n       Grav\tGravity furnace\t\n       OthW\tHot water or steam heat other than gas\n       Wall\tWall furnace\n\t\t\nHeatingQC: Heating quality and condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       Po\tPoor\n\t\t\nCentralAir: Central air conditioning\n\n       N\tNo\n       Y\tYes\n\t\t\nElectrical: Electrical system\n\n       SBrkr\tStandard Circuit Breakers & Romex\n       FuseA\tFuse Box over 60 AMP and all Romex wiring (Average)\t\n       FuseF\t60 AMP Fuse Box and mostly Romex wiring (Fair)\n       FuseP\t60 AMP Fuse Box and mostly knob & tube wiring (poor)\n       Mix\tMixed\n\t\t\n1stFlrSF: First Floor square feet\n \n2ndFlrSF: Second floor square feet\n\nLowQualFinSF: Low quality finished square feet (all floors)\n\nGrLivArea: Above grade (ground) living area square feet\n\nBsmtFullBath: Basement full bathrooms\n\nBsmtHalfBath: Basement half bathrooms\n\nFullBath: Full bathrooms above grade\n\nHalfBath: Half baths above grade\n\nBedroom: Bedrooms above grade (does NOT include basement bedrooms)\n\nKitchen: Kitchens above grade\n\nKitchenQual: Kitchen quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       \t\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n\nFunctional: Home functionality (Assume typical unless deductions are warranted)\n\n       Typ\tTypical Functionality\n       Min1\tMinor Deductions 1\n       Min2\tMinor Deductions 2\n       Mod\tModerate Deductions\n       Maj1\tMajor Deductions 1\n       Maj2\tMajor Deductions 2\n       Sev\tSeverely Damaged\n       Sal\tSalvage only\n\t\t\nFireplaces: Number of fireplaces\n\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\n\t\t\nGarageYrBlt: Year garage was built\n\t\t\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\n\t\t\nGarageCars: Size of garage in car capacity\n\nGarageArea: Size of garage in square feet\n\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nPavedDrive: Paved driveway\n\n       Y\tPaved \n       P\tPartial Pavement\n       N\tDirt\/Gravel\n\t\t\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\nPoolArea: Pool area in square feet\n\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\t\t\nFence: Fence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n\t\t\nMiscVal: $Value of miscellaneous feature\n\nMoSold: Month Sold (MM)\n\nYrSold: Year Sold (YYYY)\n\nSaleType: Type of sale\n\t\t\n       WD \tWarranty Deed - Conventional\n       CWD\tWarranty Deed - Cash\n       VWD\tWarranty Deed - VA Loan\n       New\tHome just constructed and sold\n       COD\tCourt Officer Deed\/Estate\n       Con\tContract 15% Down payment regular terms\n       ConLw\tContract Low Down payment and low interest\n       ConLI\tContract Low Interest\n       ConLD\tContract Low Down\n       Oth\tOther\n\t\t\nSaleCondition: Condition of sale\n\n       Normal\tNormal Sale\n       Abnorml\tAbnormal Sale -  trade, foreclosure, short sale\n       AdjLand\tAdjoining Land Purchase\n       Alloca\tAllocation - two linked properties with separate deeds, typically condo with a garage unit\t\n       Family\tSale between family members\n       Partial\tHome was not completed when last assessed (associated with New Homes)","38415c89":"Explore the features(independent variables) and check if they are inter-related to each other. **Go to [table of contents](#toc)**<br><br>\nThis is acheived using following steps:\n1. Univariate Analysis\n2. Multivariate Analysis","8b4aadd8":"**1. Build the model**","de50b3cb":"<a id=\"Rigde_Regression\"> <\/a>\n## 7.2 Ridge Regression","41c3b0b5":"<a id=\"xgb\"> <\/a>\n## 7.5 XGBRegressor","2ed2b9ee":"<a id=\"Linear_Regression\"> <\/a>\n## 7.1 Linear Regression","0f33b77f":"**We see the dataframe has 81 columns and 1460 observations**","32583ac4":"## Dependent variable\nSalePrice - The property's sale price in dollars. This is the target variable that you're trying to predict.","48954b56":"**1. Build the model**","35b95ff3":"<a id='Read_Data'><\/a>\n## 2. Read the Data\n\nRead the data using read_csv() function from pandas. **Go to [table of contents](#toc)**","77149f00":"### Handling BsmtFinType2\n\nWe will replace NaN with No as data descryption of NA in BsmtFinType2 is No basement"}}