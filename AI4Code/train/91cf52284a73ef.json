{"cell_type":{"57a2fbf8":"code","de628f30":"code","9424ea60":"code","ef28c423":"code","16a40f1d":"code","22efadf3":"code","b6829218":"code","dc2f4e81":"code","c1c46f77":"code","50c393a2":"code","3ddd88e9":"code","22baf4b3":"code","5f5c1f05":"code","94abeb63":"code","dbe7750d":"code","bf3e0678":"code","388ca0cf":"code","6af31011":"code","c2f66d7d":"code","93226fcf":"code","aeb36d2b":"code","1c80cbd4":"code","a6c69c3c":"code","f5e838a9":"code","018d8a70":"code","0b887604":"code","fb9c84e5":"code","d5890359":"code","51889fbd":"code","1c0e7185":"code","75b04535":"code","80000f6f":"code","622c2105":"code","30ab5166":"code","d877c5ab":"code","108e3d13":"code","f3791f35":"code","7b4eccea":"code","23307009":"code","46fc02fe":"code","8192097c":"code","c47f6c3b":"code","f8b75ccc":"code","bc4bfed2":"code","b6848f06":"code","f502da30":"code","1fecff64":"code","0a48cf7d":"code","c783726c":"code","30164bf9":"code","49bb7e85":"code","24ae7c24":"code","1ae18f78":"code","1f5fea17":"code","bb1e20d8":"code","ef420730":"code","ffb959d6":"code","403810ff":"code","2b10670d":"markdown","6cd30b9c":"markdown","4cce1c7d":"markdown","59384f01":"markdown","d06ca5c5":"markdown","5705a12a":"markdown","ef780d0e":"markdown","7c4cb9c9":"markdown","4ec3395d":"markdown","c24b7e0f":"markdown","72cf55c9":"markdown","d4cc3ebc":"markdown","22eb8416":"markdown","70be0f5d":"markdown","619ef9a2":"markdown","80964f24":"markdown","95fc1348":"markdown","b141d67d":"markdown","6359e34b":"markdown","74cbe591":"markdown","0a80334d":"markdown","28227677":"markdown","aec60ff1":"markdown","ab1f11bc":"markdown","d7f351a1":"markdown","f14317ec":"markdown","b38fe335":"markdown","e1fb58c3":"markdown","0be5d6f2":"markdown","7ccd9218":"markdown"},"source":{"57a2fbf8":"def plot_periodogram(ts, detrend='linear', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta(\"365D\") \/ pd.Timedelta(\"1D\")\n    freqencies, spectrum = periodogram(ts, fs=fs, detrend=detrend, window=\"boxcar\", scaling='spectrum')\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color=\"purple\")\n    ax.set_xscale(\"log\")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels([\"Annual (1)\", \"Semiannual (2)\", \"Quarterly (4)\", \n                        \"Bimonthly (6)\", \"Monthly (12)\", \"Biweekly (26)\", \n                        \"Weekly (52)\", \"Semiweekly (104)\"], rotation=90)\n    ax.ticklabel_format(axis=\"y\", style=\"sci\", scilimits=(0, 0))\n    ax.set_ylabel(\"Variance\")\n    ax.set_title(\"Periodogram\")\n    return ax","de628f30":"def seasonal_plot(X, y, period, freq, ax=None):\n    if ax is None:\n        _, ax = plt.subplots()\n    palette = sns.color_palette(\"husl\", n_colors=X[period].nunique(),)\n    ax = sns.lineplot(x=X[freq], \n                      y=X[y],\n                      ax=ax, \n                      hue=X[period],\n                      palette=palette, \n                      legend=False)\n    ax.set_title(f\"Seasonal Plot ({period}\/{freq})\")\n    for line, name in zip(ax.lines, X[period].unique()):\n        y_ = line.get_ydata()[-1]\n        ax.annotate(name, \n                    xy=(1, y_), \n                    xytext=(6, 0), \n                    color=line.get_color(), \n                    xycoords=ax.get_yaxis_transform(), \n                    textcoords=\"offset points\", \n                    size=14, \n                    va=\"center\")\n    return ax","9424ea60":"def seasonality(df, key, freq, col):\n    df_grouped = grouped(df, key, freq, col)\n    df_grouped['date'] = pd.to_datetime(df_grouped['date'], format = \"%Y-%m-%d\")\n    df_grouped.index = df_grouped['date'] \n    df_grouped = df_grouped.drop(columns=['date'])\n    df_grouped.index.freq = freq # manually set the frequency of the index\n    \n    X = df_grouped.copy()\n    X.index = pd.to_datetime(X.index, format = \"%Y-%m-%d\") \n    X.index.freq = freq \n    # days within a week\n    X[\"day\"] = X.index.dayofweek   # the x-axis (freq)\n    X[\"week\"] = pd.Int64Index(X.index.isocalendar().week)  # the seasonal period (period)\n    # days within a year\n    X[\"dayofyear\"] = X.index.dayofyear\n    X[\"year\"] = X.index.year\n    fig, (ax0, ax1, ax2) = plt.subplots(3, 1, figsize=(20, 30))\n    seasonal_plot(X, y='mean', period=\"week\", freq=\"day\", ax=ax0)\n    seasonal_plot(X, y='mean', period=\"year\", freq=\"dayofyear\", ax=ax1)\n    X_new = (X['mean'].copy()).dropna()\n    plot_periodogram(X_new, ax=ax2)","ef28c423":"def make_lags(ts, lags, lead_time=1):\n    return pd.concat(\n        {\n            f'y_lag_{i}': ts.shift(i)\n            for i in range(lead_time, lags + lead_time)\n        },\n        axis=1)","16a40f1d":"def make_multistep_target(ts, steps):\n    return pd.concat(\n        {f'y_step_{i + 1}': ts.shift(-i)\n         for i in range(steps)},\n        axis=1)","22efadf3":"class BoostedHybrid:\n    def __init__(self, model_1, model_2):\n        self.model_1 = model_1\n        self.model_2 = model_2\n        self.y_columns = None  # store column names from fit method\n        \n        \n    def fit(self, X_1, X_2, y):\n        self.model_1.fit(X_1,y)\n\n        y_fit = pd.DataFrame(\n            self.model_1.predict(X_1),\n            index=X_1.index, columns=y.columns,\n        )\n\n        y_resid = y-y_fit\n\n        self.model_2.fit(X_2, y_resid)\n\n        self.y_columns = y.columns\n        self.y_fit = y_fit\n        self.y_resid = y_resid\n        self.feature_importances_ = self.model_2.feature_importances_\n    \n    def predict(self, X_1, X_2):\n        y_pred = pd.DataFrame(\n            self.model_1.predict(X_1),\n            index=X_1.index, columns=self.y_columns,\n        )\n        y_pred += self.model_2.predict(X_2)\n\n        return y_pred.unstack()  # long to wide","b6829218":"import time\nfrom datetime import datetime\n\n#notebook\n#from learntools.time_series.utils import plot_periodogram, seasonal_plot\nfrom learntools.time_series.style import *\n\n#measure notebook running time\nstart_time = time.time()\n\n%matplotlib inline\n\n# backbone\nimport numpy as np \nfrom numpy.random import seed\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# DNN\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import BatchNormalization\nfrom keras.callbacks import EarlyStopping\nfrom keras import metrics\nimport tensorflow\n\n\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.multioutput import RegressorChain\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nimport xgboost as xgb\n\n# Model 1 (trend)\nfrom pyearth import Earth\nfrom sklearn.linear_model import ElasticNet, Lasso, Ridge\n\n# Model 2\nfrom sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\n\npd.options.display.float_format = '{:.2f}'.format\nsns.set(style='white', context='notebook', palette='deep')\nprint(\"loaded ...\")","dc2f4e81":"store_sales = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'sales': 'float32',\n        'onpromotion': 'int32',\n    }, usecols=['store_nbr', 'family', 'date', 'sales','onpromotion'])\n\ntest_data = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/test.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'store_nbr': 'category',\n        'family': 'category',\n        'onpromotion': 'int32',\n    })\nOIL = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv', parse_dates=['date'], infer_datetime_format=True, dtype = {'dcoilwtico':'float32'})\nHOLIDAY = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/holidays_events.csv', parse_dates=['date'], infer_datetime_format=True, dtype={\n        'type': 'category',\n        'locale': 'category',\n        'locale_name': 'category',\n        'description': 'category',\n        'transferred': 'bool',\n    })\nSTORES = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/stores.csv')\nTRANS = pd.read_csv('\/kaggle\/input\/store-sales-time-series-forecasting\/transactions.csv', parse_dates=['date'], infer_datetime_format=True, \n                    dtype={'store_nbr':'int32','transactions':'float32'})","c1c46f77":"#start_date = '2016-01-01'\n#start_date = '2014-01-01'\n#start_date = '2017-01-01'\nstart_date = '2017-04-01'","50c393a2":"fam = 'AUTOMOTIVE'\nstore = '1'\nfig, ax = plt.subplots(figsize=(20,8))\nshow = (store_sales.family == fam) & (store_sales.store_nbr == store) & (store_sales.date >= start_date)\nsns.lineplot(data = store_sales, x = \"date\", y= store_sales[show]['sales']);","3ddd88e9":"store_sales['date'] = store_sales.date.dt.to_period('D')\ntest_data['date'] = test_data.date.dt.to_period('D')","22baf4b3":"store_sales = store_sales.set_index(['store_nbr', 'family', 'date']).sort_index()\ntest_data = test_data.set_index(['store_nbr', 'family', 'date']).sort_index()","5f5c1f05":"store_sales.tail()","94abeb63":"STORES.head()\n#STORES.city.value_counts()\n#STORES.state.value_counts()\n#STORES.type.value_counts()\n#STORES.cluster.value_counts()","dbe7750d":"TRANS['date'] = TRANS.date.dt.to_period('D')\nTRANS = TRANS.set_index(['store_nbr', 'date']).sort_index()\nTRANS = TRANS.unstack(['store_nbr'])\nTRANS.iloc[0,:].fillna(0, inplace=True)\nTRANS.apply(lambda col: col.fillna(col.median(), inplace = True), axis=0)\nTRANS = TRANS.loc[start_date:]\nTRANS.iloc[0,:] = 0.0 #jan 1","bf3e0678":"TRANS.loc(axis=1)['transactions',1][:22].plot();","388ca0cf":"plot_periodogram(TRANS.loc(axis=1)['transactions',1]);","6af31011":"fourier_trans = CalendarFourier(freq=\"W\", order=52)\ndp_trans = DeterministicProcess(\n    index=TRANS.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier_trans],\n    drop=True,\n)\nX_trans = dp_trans.in_sample()\nX_trans['day'] = X_trans.index.dayofweek\nX_trans['week'] = X_trans.index.week","c2f66d7d":"%%time\ntransaction_model = LinearRegression(fit_intercept=False).fit(X_trans, TRANS)","93226fcf":"X_trans_test = dp_trans.out_of_sample(steps=16)\nX_trans_test['day'] = X_trans_test.index.dayofweek\nX_trans_test['week'] = X_trans_test.index.week","aeb36d2b":"Trans_forecast = pd.DataFrame(transaction_model.predict(X_trans_test), index = X_trans_test.index, columns = TRANS.columns)","1c80cbd4":"plot_periodogram(Trans_forecast.loc(axis=1)['transactions',1]);","a6c69c3c":"Trans_forecast.loc(axis=1)['transactions',1].plot();","f5e838a9":"sns.lineplot(data = OIL, x = \"date\", y= OIL.dcoilwtico);","018d8a70":"OIL['date'] = OIL.date.dt.to_period('D')\nOIL = OIL.set_index(['date']).sort_index()\nidx = pd.DataFrame(pd.period_range(start='2013-01-01', end = '2017-08-31'),columns=['date'])\nOIL= idx.join(OIL, on='date')\nOIL.ffill(inplace=True)\nOIL.bfill(inplace=True)","0b887604":"y = store_sales.drop(['onpromotion'], axis=1).unstack(['store_nbr', 'family']).loc[start_date:,'sales']\ny.head()","fb9c84e5":"fourier = CalendarFourier(freq=\"M\", order=4)\ndp = DeterministicProcess(\n    index=y.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX_seasonal = dp.in_sample()","d5890359":"X_promo = store_sales.drop('sales', axis=1)\nX_promo = X_promo.reset_index(['store_nbr','family'])\nX_promo['store_nbr'] = X_promo['store_nbr'].astype('int32')\nX_promo = X_promo.reset_index()\nX_promo = X_promo.pivot(index = 'date', columns = ['store_nbr','family'], values = ['onpromotion']).loc[start_date:]","51889fbd":"X_days = pd.DataFrame(X_seasonal.index)\nX_days['Weekday'] =X_days.date.dt.dayofweek\nX_days['Week'] =X_days.date.dt.week\nX_days['Day'] =X_days.date.dt.day\nX_days = X_days.set_index(['date']).sort_index()\nX_days.shape","1c0e7185":"HOLIDAY['Day'] = HOLIDAY.date.dt.dayofweek","75b04535":"HOLIDAY.head(10)","80000f6f":"HOLIDAY.locale.value_counts()","622c2105":"X_holidays = (\n    HOLIDAY.query(\"locale in ['National']\")\n    .loc[:,['date','description']]\n    .assign(description=lambda x: x.description.cat.remove_unused_categories())\n)\n            \nX_holidays['date'] = X_holidays.date.dt.to_period('D')\nX_holidays = X_holidays.set_index(['date']).sort_index().loc['2016-01-01':]\nX_holidays = X_holidays.rename(columns={'description':'holiday'})\nX_holidays = X_holidays[~X_holidays.index.duplicated()]\nX_holidays = pd.get_dummies(X_holidays)","30ab5166":"isHoliday = pd.DataFrame(pd.period_range(start=start_date, end = '2017-08-31'),columns=['date'])\nfor store in range(1,55):\n    isHoliday[store] = 0\n    \nMap = {'Regional':'state', 'Local':'city'}\n\nfor i in isHoliday.index:\n    selection = HOLIDAY[(HOLIDAY.locale != \"National\") & (HOLIDAY.date.dt.to_period('D') == isHoliday.iloc[i]['date'])]\n    if len(selection): \n        for h in selection.index:\n            field = Map[HOLIDAY.iloc[h]['locale']]\n            name = HOLIDAY.iloc[h]['locale_name']\n            stores = STORES[(STORES[field] == name)]\n            nbrs = stores.store_nbr.to_list()\n            for store in nbrs:\n                isHoliday.loc[isHoliday.index[i], store] = 1\n\nisHoliday = isHoliday.set_index(['date']).sort_index()","d877c5ab":"HOLY_train = isHoliday.loc[start_date:'2017-08-15']\nHOLY_test = isHoliday.loc['2017-08-16':]","108e3d13":"OIL['14_Mean'] = OIL.dcoilwtico.rolling(14).mean() \nOIL['7_Mean'] = OIL.dcoilwtico.rolling(7).mean() \nOIL['14_Median'] = OIL.dcoilwtico.rolling(14).median() \nOIL['14_Std'] = OIL.dcoilwtico.rolling(14).std() \nOIL = OIL.set_index(['date']).sort_index()\nOIL = OIL.loc[start_date:]","f3791f35":"OIL.plot(figsize=(20,10));","7b4eccea":"OIL_train = OIL.loc[start_date:'2017-08-15']\nOIL_test = OIL.loc['2017-08-16':]\nOIL_train.head()","23307009":"X1 = X_seasonal.join(OIL_train, on= 'date').join(TRANS, on='date')","46fc02fe":"X2 = X_promo.join(X_days, on='date').join(X_holidays, on='date').fillna(0).join(HOLY_train, on='date')","8192097c":"%%time\nlinear_model = LinearRegression(fit_intercept=False).fit(X_seasonal, y)\ny_pred_linear = pd.DataFrame(linear_model.predict(X_seasonal), index=X_seasonal.index, columns=y.columns)","c47f6c3b":"X_test_seasonal = dp.out_of_sample(steps=16)\nX_test_seasonal.index.name = 'date'","f8b75ccc":"X_lags = store_sales.drop(['onpromotion'], axis=1).unstack(['store_nbr', 'family']).loc[start_date:,'sales']\ncols = X_lags.columns\nX_lags = X_lags.stack(['store_nbr', 'family'])\nX_lags = X_lags.reset_index()\nX_lags = X_lags.rename(columns={0:\"sales\"}).set_index(['date', 'store_nbr', 'family']).sort_index()\n\ny_forecast_linear = pd.DataFrame(linear_model.predict(X_test_seasonal).clip(0.0), index=X_test_seasonal.index, columns=cols)\ny_forecast_linear = y_forecast_linear.stack(['store_nbr', 'family'])\ny_forecast_linear= y_forecast_linear.reset_index()\ny_forecast_linear = y_forecast_linear.rename(columns={0:\"sales\"}).set_index(['date', 'store_nbr', 'family']).sort_index()\n\ny_complete = X_lags.append(y_forecast_linear)\ny_complete = y_complete.unstack(['store_nbr', 'family'])","bc4bfed2":"LagsX = make_lags(y_complete, 3).fillna(0)","b6848f06":"Train_lags = LagsX.loc[start_date:'2017-08-15']\nTest_lags = LagsX.loc['2017-08-16':]","f502da30":"EX1 = X1.merge(Train_lags, on='date')","1fecff64":"%%time\nBH_model = BoostedHybrid(model_1 = LinearRegression(), model_2 = ExtraTreesRegressor(random_state=13, bootstrap=True, verbose=1,n_jobs=-1)) \nBH_model.fit(EX1, X2, y)\ny_pred = BH_model.predict(EX1, X2).clip(0.0)","0a48cf7d":"y_pred_display = y_pred.unstack(['store_nbr','family'])\ny_pred_display.head()","c783726c":"families = y.columns[0:6]\naxs = y.loc(axis=1)[families].plot(\n    subplots=True, sharex=True, figsize=(20, 12), **plot_params, alpha=0.5,\n)\n_ = y.loc(axis=1)[families].plot(subplots=True, sharex=True, color='C0', ax=axs)\n_ = y_pred_display.loc(axis=1)[families].plot(subplots=True, sharex=True, color='C3', ax=axs)\nfor ax, family in zip(axs, families):\n    ax.legend([])\n    ax.set_ylabel(family)","30164bf9":"train_rmse = mean_squared_error(y,y_pred_display)**0.5\nprint('train_rmse:', train_rmse)\nlin_train_rmse = mean_squared_error(y,y_pred_linear)**0.5\nprint('linear train_rmse:', lin_train_rmse)","49bb7e85":"X_days_test = pd.DataFrame(X_test_seasonal.index)\nX_days_test['Weekday'] = X_days_test.date.dt.dayofweek\nX_days_test['Week'] = X_days_test.date.dt.week\nX_days_test['Day'] = X_days_test.date.dt.day\nX_days_test = X_days_test.set_index(['date']).sort_index()","24ae7c24":"X_promo_test = test_data.drop('id', axis=1)\nX_promo_test = X_promo_test.reset_index(['store_nbr','family'])\nX_promo_test = X_promo_test.reset_index()\nX_promo_test = X_promo_test.pivot(index = 'date', columns = ['store_nbr','family'], values = ['onpromotion'])","1ae18f78":"X1_test = X_test_seasonal.join(OIL_test, on='date').join(Trans_forecast, on=\"date\").merge(Test_lags, on='date')","1f5fea17":"X2_test = X_promo_test.join(X_days_test, on='date').join(X_holidays, on='date').fillna(0).join(HOLY_test, on='date')","bb1e20d8":"y_forecast = BH_model.predict(X1_test, X2_test).clip(0.0)\ny_submit = pd.DataFrame(y_forecast).rename(columns={0:\"sales\"}).reset_index().set_index(['date', 'store_nbr', 'family']).sort_index()\ny_submit = y_submit.join(test_data.id).reindex(columns=['id', 'sales'])\ny_submit = y_submit.sort_index(level=['date',\"store_nbr\",\"family\"])\ny_submit.head(20)","ef420730":"fams = ['AUTOMOTIVE','BEAUTY','BEVERAGES','GROCERY I', \"BOOKS\", \"BABY CARE\", \"CELEBRATION\"]\nSTORE_NBR = '1'\nfig, axs = plt.subplots(len(fams), figsize=(20,16))\nfor i in range(len(fams)):\n    #axs[i] = store_sales.unstack(['store_nbr', 'family']).loc(axis=1)['sales', STORE_NBR, fams[i]].loc[start_date:].plot(ax=axs[i],label=\"sales\")\n    axs[i] = store_sales.unstack(['store_nbr', 'family']).loc(axis=1)['sales', STORE_NBR, fams[i]].iloc[-90:].plot(ax=axs[i],label=\"sales\")\n    axs[i] = y_submit.unstack(['store_nbr', 'family']).loc(axis=1)['sales', STORE_NBR, fams[i]].plot(ax=axs[i],label=\"hybrid forecast\")\n    axs[i] = y_forecast_linear.unstack(['store_nbr', 'family']).loc(axis=1)['sales', STORE_NBR, fams[i]].plot(ax=axs[i],label=\"linear forecast\")\n    axs[i].set_title(f'{fams[i]} Sales at Store {STORE_NBR}');\n    axs[i].legend();\n","ffb959d6":"y_submit.to_csv('submission.csv', index=False)\nprint('Submission completed')","403810ff":"end_time = time.time()\nprint(\"Notebook run time: {:.1f} seconds. Finished at {}\".format(end_time - start_time, datetime.now()) )","2b10670d":"# Functions\nfrom course ...","6cd30b9c":"# Features for test set","4cce1c7d":"## Oil","59384f01":"# Target","d06ca5c5":"## Weekday, Day of month","5705a12a":"How one example looks ... <br>","ef780d0e":"Further reading:<br>\nhttps:\/\/www.kaggle.com\/xholisilemantshongo\/modeling-sales-3-types-of-regression <br>\nhttps:\/\/www.kaggle.com\/howoojang\/first-kaggle-notebook-following-ts-tutorial <br>\nhttps:\/\/www.kaggle.com\/maricinnamon\/store-sales-time-series-forecast-visualization <br>","7c4cb9c9":"# Predict","4ec3395d":"## Explore OIL","c24b7e0f":"### Train RMSE","72cf55c9":"# Model","d4cc3ebc":"Forecasted transactions can now be used as feature<br>","22eb8416":"## Merge X1 test","70be0f5d":"## Linear Regression","619ef9a2":"# Load and check data","80964f24":"# Imports & config","95fc1348":"## Holidays","b141d67d":"## Merge X1","6359e34b":"## Explore transactions\nunused, not available for target dates<br>\nshould that also be predicted? to use then as predicted feature? -> see: Trans_forecast<br>\nthis slightly improved  score<br>\n","74cbe591":"# Store Sales","0a80334d":"## Merge X2 test","28227677":"## Extend X1","aec60ff1":"## Explore stores","ab1f11bc":"# Features","d7f351a1":"## Boosted hybrid\nRandomForestRegressor: ~ 11 min to run,  <br>\nExtraTreesRegressor: ~ 5 min to run,  1.5 min with 4 cores<br>","f14317ec":"## Merge X2","b38fe335":"Results were consistently better if only 2017- was considered<br>","e1fb58c3":"## Onpromotion","0be5d6f2":"### Lags from Linear regression","7ccd9218":"## Seasonal features"}}