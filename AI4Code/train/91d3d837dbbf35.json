{"cell_type":{"39ef47c2":"code","c44dc662":"code","90bb18dd":"code","c1ab7623":"code","543a15e8":"code","089ebb31":"code","5913c893":"code","c3b87877":"code","5af71d66":"code","de807340":"code","e43efe4a":"code","681e242a":"code","ea3a3484":"code","f2ae3211":"code","ab65b264":"code","1ae70472":"code","e9de825c":"code","e2dca7a3":"code","a5f932bb":"code","2fe18ea6":"code","037b1754":"code","0d63258f":"code","8a36db8a":"code","33cac0e5":"code","0d70b2cf":"code","dfb78e6c":"code","f04ab3be":"code","87151d61":"code","df0d3a96":"code","b3882d44":"code","6400cd44":"code","ab369539":"code","027320c3":"code","58f6f8e3":"code","8935964f":"code","af49cc2b":"code","0afeccc7":"markdown","564d34d0":"markdown","cbeae9d1":"markdown","cc0b3f10":"markdown","f7cf5708":"markdown","b6e82daa":"markdown","2d0380ec":"markdown","df1f26a6":"markdown","daf60438":"markdown","7805bee0":"markdown","6fb013f6":"markdown","029137de":"markdown","39151fd9":"markdown","6ba2fb30":"markdown","9963bc60":"markdown","755d0315":"markdown","6d04122a":"markdown","916dc9a7":"markdown","d13b70ff":"markdown"},"source":{"39ef47c2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_graphviz\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport graphviz","c44dc662":"cars = pd.read_csv('..\/input\/quickest-electric-cars-ev-database\/Quickestelectriccars-EVDatabase.csv')\ncars","90bb18dd":"# Check null values by columns\ncars.isnull().sum()","c1ab7623":"# Remove rows which has nulll values\ncars.dropna(axis=0, inplace=True)\ncars","543a15e8":"# Remove rows which is '-'\nidx = cars[cars['FastChargeSpeed'] == '-'].index\ncars = cars.drop(idx)\ncars","089ebb31":"# Reset index\ncars.reset_index(drop=True, inplace=True)\ncars","5913c893":"# Create 'Compnay' Column\ncars['Company'] = cars['Name'].str.split(' ').str[0]\ncars","c3b87877":"# Remove units of each column\ncars['BatteryCapacity[kWh]'] = cars['Subtitle'].str.extract(r'(\\d+[.\\d]*)').astype(float)\ncars['Acceleration[sec]'] = cars['Acceleration'].str.extract(r'(\\d+[.\\d]*)').astype(float)\ncars['TopSpeed[km\/h]'] = cars['TopSpeed'].str.extract(r'(\\d+)').astype(int)\ncars['Range[km]'] = cars['Range'].str.extract(r'(\\d+)').astype(int)\ncars['Efficiency[Wh\/km]'] = cars['Efficiency'].str.extract(r'(\\d+)').astype(int)\ncars['FastChargeSpeed[km\/h]'] = cars['FastChargeSpeed'].str.extract(r'(\\d+)').astype(int)\ncars['Drive_Class'] = cars['Drive'].str.split(' ').str[0]\ncars['PriceinGermany[\u20ac]'] = cars['PriceinGermany'].str.replace(pat=r'[^\\w]', repl=r'', regex=True).astype(int)\ncars['PriceinUK[\u00a3]'] = cars['PriceinUK'].str.replace(pat=r'[^\\w]', repl=r'', regex=True).astype(int)\n\ncars","5af71d66":"# Remove old ones\ncars.drop(['Subtitle', 'Acceleration', 'TopSpeed', 'Range', 'Efficiency', 'FastChargeSpeed', 'Drive', 'NumberofSeats', 'PriceinGermany', 'PriceinUK'], axis=1, inplace=True)\ncars","de807340":"# Create groupby processed DataFrame\n# We can visualize between all features and companies\ncars_groupby = cars.groupby('Company').mean()\ncars_groupby","e43efe4a":"# Normalization\n# Unit of each columns is differenct each other.\n# Therfore, with Normalization, we can compare columns with same level\ndef mean_norm(df_input):\n    return df_input.apply(lambda x: (x - x.mean()) \/ x.std(), axis=0)\n\ncars_norm = mean_norm(cars_groupby)\ncars_norm","681e242a":"# Heatmap\nplt.figure(figsize=(10, 10))\nsns.heatmap(data=cars_norm, linewidths=.5, cmap=\"YlGnBu\")\nplt.title('Feature - Companies')\nplt.show()","ea3a3484":"# Function which creates Pivot Table\n# We can choose Feature which we want to select\ndef cars_pivot(data, index, columns, values):\n    global cars_pt\n    cars_pt = pd.pivot_table(data=data, index=index, columns=columns, values=values, aggfunc='mean', fill_value=0)\n\ncars_pivot(cars, 'Company', 'Drive_Class', 'BatteryCapacity[kWh]')","f2ae3211":"cars_pt","ab65b264":"plt.figure(figsize=(10, 10))\nsns.heatmap(data=cars_pt, annot=True, annot_kws={\"size\":10}, linewidths=.5, cmap=\"YlGnBu\", fmt=\"\")\nplt.title('Drive_Class - Companies')\nplt.show()","1ae70472":"cars_BatteryCapacity = cars.sort_values(by='BatteryCapacity[kWh]', ascending=False)\ncars_BatteryCapacity","e9de825c":"# Single Plot\n\nsns.set_theme(style='whitegrid')\nfig, ax = plt.subplots(figsize=(18, 18))\nsns.barplot(x='BatteryCapacity[kWh]', y='Company', data=cars_BatteryCapacity, color='b')\nplt.title('Companies - BatteryCapacity[kWh]', fontdict={'size': 20})\n\nplt.show()","e2dca7a3":"cars_Range = cars.sort_values(by='Range[km]', ascending=False)\ncars_Range","a5f932bb":"# Single Plot\n\nsns.set_theme(style='whitegrid')\nfig, ax = plt.subplots(figsize=(18, 18))\nsns.barplot(x='Range[km]', y='Company', data=cars_Range, color='b')\nplt.title('Companies - Range[km]', fontdict={'size': 20})\n\nplt.show()","2fe18ea6":"# All features are important\n# But most of all, Battery Capacity and Range is more considered when we choose electric cars\n# Multiplots\ncars_norm_sorted = cars_norm.sort_values(by=['BatteryCapacity[kWh]', 'Range[km]'], ascending=False)\ncars_norm_sorted.reset_index(inplace=True)\ncars_norm_sorted","037b1754":"# Batplots with multi index: BatteryCapacity[kWh], Range[km]\n\nsns.set_theme(style='whitegrid')\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 15))\n\n# Plot the BatteryCapacity[kWh]\nsns.set_color_codes(\"pastel\")\nsns.barplot(x='BatteryCapacity[kWh]', y='Company', data=cars_norm_sorted, label='BatteryCapacity[kWh]', color='b')\n\n# Plot the Range[km]\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Range[km]', y='Company', data=cars_norm_sorted, label='Range[km]', color='b')\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc='lower right', frameon=True)\nax.set(xlim=(-2, 3), xlabel='Features', ylabel='Company', title='Feature by Companies')\nsns.despine(left=True, bottom=True)\n\nplt.show()","0d63258f":"# Price Compairson between Germany and UK\n\nf, ax = plt.subplots(figsize=(15, 15))\nsns.distplot(cars_norm_sorted['PriceinGermany[\u20ac]'], hist=True, label='PriceinGermany[\u20ac]')\nsns.distplot(cars_norm_sorted['PriceinUK[\u00a3]'], hist=True, label='PriceinUK[\u00a3]')\n\nax.legend(ncol=2, loc='lower right', frameon=True)\nax.set(xlim=(-3, 5), xlabel='Company', ylabel='Price', title='Price Compairson between Germany and UK')\nsns.despine(left=True, bottom=True)","8a36db8a":"# Reload for the data\ncars","33cac0e5":"# For training precisely, we should process Normalization of data\n# Use following function: 'mean_norm'\n# Extract feature columns and process Normalization\ncars_before_norm = cars[['BatteryCapacity[kWh]', 'Acceleration[sec]', 'TopSpeed[km\/h]', 'Range[km]', 'Efficiency[Wh\/km]', 'FastChargeSpeed[km\/h]']]\ncars_after_norm = mean_norm(cars_before_norm)\ncars_after_norm","0d70b2cf":"# Concatenate and check the basic data for training\ncars_data = pd.concat([cars[['Name', 'Company']], cars_after_norm], axis=1)\ncars_data","dfb78e6c":"# ValueError: Unknown label type: 'continuous'\n# We should convert 'label' from float to int in order to avoid above error\ncars_data = cars_data.astype({'Range[km]': 'int'})","f04ab3be":"# Define 'Feature' & 'Label' for Supervised Learning\nX = cars_data[['BatteryCapacity[kWh]', 'Acceleration[sec]', 'TopSpeed[km\/h]', 'Efficiency[Wh\/km]', 'FastChargeSpeed[km\/h]']]\ny = cars_data['Range[km]']\nX, y","87151d61":"# Check shape of features and labels\nX.shape, y.shape","df0d3a96":"# Create datasets for training and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","b3882d44":"# Check shape of train dataset and test datatset\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","6400cd44":"# DecisionTreeClassifier\ndt_clf = DecisionTreeClassifier()","ab369539":"# fit and accuracy score\ndt_clf.fit(X_train, y_train)\npred = dt_clf.predict(X_test)\nprint(\"accuracy score: \", accuracy_score(y_test, pred))","027320c3":"# cross_val_score\nscore = cross_val_score(dt_clf, X, y, scoring=\"accuracy\", cv=3)\nprint('accuracy per cv:', np.round(score, 4))\nprint('average of accuracies:', np.round(np.mean(score), 4))","58f6f8e3":"# RandomForestRegression\nrf = RandomForestRegressor(random_state=42, n_estimators=1000)","8935964f":"neg_mse_scores = cross_val_score(rf, X, y, scoring='neg_mean_squared_error', cv=5)\nrmse_scores = np.sqrt(-1 * neg_mse_scores)\navg_rmse = np.mean(rmse_scores)","af49cc2b":"print('Individual Negative MSE scores per 5 cross value scores: ', np.round(neg_mse_scores, 2))\nprint('Individual RMSE scores per 5 cross value scores: ', np.round(rmse_scores, 2))\nprint('Average RMSE scores per 5 cross value scores: {0:.3f}'.format(avg_rmse))","0afeccc7":"#### Range","564d34d0":"### Bar Plot","cbeae9d1":"#### Battery Capacity","cc0b3f10":"### Heatmap","f7cf5708":"# Quickest Electric Cars EDA","b6e82daa":"#### Cross Value Score","2d0380ec":"### Classification","df1f26a6":"## Data Preprocessing","daf60438":"### Regression","7805bee0":"#### Heatmap across the DataFrame","6fb013f6":"#### Dataset","029137de":"## Preidiction","39151fd9":"## Visualization","6ba2fb30":"## Import libraries and data","9963bc60":"#### Price","755d0315":"#### Predict","6d04122a":"#### Heatmap Drive_Class - Companies","916dc9a7":"### Summary\n1. Generally, the performance of German manufacturers is very poweful.\n2. Most of manufacturers has chosen for All Wheel Drive\n3. Prices between Germany and U.K. is similar by Normalized Data","d13b70ff":"#### Battery Capacity & Range"}}