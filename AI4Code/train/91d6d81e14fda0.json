{"cell_type":{"97ac31dd":"code","81151538":"code","290fd6e9":"code","6d876ec6":"code","7d315289":"code","6fdbc52c":"code","d37f622c":"code","96ff6107":"code","c54efe18":"code","a5528710":"code","46f47dd4":"code","cf309feb":"code","e06f098d":"code","4abf4fd5":"code","67076512":"code","330de0ce":"code","faf68950":"code","1abe008a":"code","ec6994cc":"code","8e0cf655":"code","165361f5":"code","ae859231":"code","5cc6915e":"code","e380ca5a":"code","eabd5958":"code","0da7540b":"code","60c5128e":"code","28aec482":"code","0d4e12da":"code","04f4aafa":"code","5a4f4b89":"code","584933bf":"code","faaa565f":"markdown","d8b42227":"markdown","0ad99389":"markdown","39733600":"markdown","861c2207":"markdown","d07ea55c":"markdown","4bff6196":"markdown","f5ceb4e4":"markdown","36470da3":"markdown","a32ae619":"markdown","3d899249":"markdown","81da2cef":"markdown","229545c2":"markdown","47f022d6":"markdown","4ebabd1d":"markdown","f4097f72":"markdown","e8e3d50b":"markdown","27b603a1":"markdown","fc3cfcfa":"markdown","5812593a":"markdown"},"source":{"97ac31dd":"import requests\nimport bs4\nimport re\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom scipy import stats\nfrom math import floor\n\ninit_notebook_mode(connected=True)","81151538":"# Regular expression used to only select numeric data in a list\ndef getNumbers(array): \n    arr = re.findall(r'[0-9]', array) \n    return arr \n\n# Removes commas in lists\ndef clean(data):\n    strings = [str(num) for num in data]\n    concatenated = \"\".join(strings)\n    return(concatenated)","290fd6e9":"res = requests.get('https:\/\/www.worldometers.info\/coronavirus\/country\/ghana\/')\ntext = bs4.BeautifulSoup(res.text)\ncases = clean(getNumbers(str(text.select('div span')[4])))\ndeaths = clean(getNumbers(str(text.select('div span')[5])))\nrecoveries = clean(getNumbers(str(text.select('div span')[6])))\n\nprint(\"This is Ghana's current Covid-19 situation:\\n\")\nprint(\"Total Cases:\", cases, \"\\n\")\nprint(\"Total Recoveries:\", recoveries, \"\\n\")\nprint(\"Total Deaths:\", deaths,'\\n')","6d876ec6":"js = text.select('script[type=\"text\/javascript\"]') #Js contains the javascript of the website\n\n#Js is a list and the various list indices extract the useful part of the list needed\ndata_for_days = list(js[7])\ndata_for_cases = list(js[7])\ndata_for_deaths = list(js[10])\nactive = list(js[9])\n","7d315289":"#Regular expression \\w\\w\\w\\s\\d+ matches any three digit word with a space followed by one or more numbers\ndays_reg = re.compile(r'\\w\\w\\w\\s\\d+')\ndays = days_reg.findall(data_for_days[0])\n\n#Regular expression d{1,7} matches any number with at most 7 digits. \ncases_reg = re.findall(r'\\d{1,7}',data_for_cases[0]) \ndeaths_reg = re.findall(r'\\d{1,7}',data_for_deaths[0]) \nactive_reg = re.findall(r'\\d{1,7}',active[0])\n\ndata_for_cases = [int(i) for i in cases_reg]\ndata_for_deaths = [int(i) for i in deaths_reg]\n\n#unwanted data from the 0th to the 350th elements are removed\ndata_for_cases = data_for_cases[350::]\ndata_for_deaths = data_for_deaths[350::]\n\ndata_for_active = [int(i) for i in active_reg]\n\n#Unwanted data from the 0th to the 222th elements are removed\ndata_for_active = data_for_active[223::]\nactive_index = data_for_active.index(2)\n\ncase_index = data_for_cases.index(0)\ndeath_index = data_for_deaths.index(0)","6fdbc52c":"total_cases = data_for_cases[case_index:len(data_for_cases) - 1]\ntotal_cases = [int(i) for i in total_cases]\n\ntotal_deaths = data_for_deaths[death_index:len(data_for_deaths) - 1]\ntotal_deaths = [int(i) for i in total_deaths]\n\nactive_cases = data_for_active[active_index:len(data_for_active) - 1]\nactive_cases = [int(i) for i in active_cases]\n\n#The required data starts from the 26th element\ntotal_cases = total_cases[692::]\ntotal_deaths = total_deaths[692::]\nactive_cases = active_cases[135::]\n\n#The first case of covid-19 was recorded in Ghana on March 12,2020\nind = days.index('Jul 29')\ndays = days[ind::]\n\nind = days.index('Mar 12')\ndays = days[ind::]","d37f622c":"data = {'Dates':days,\n        'Total Cases':total_cases,\n        'Total Deaths': total_deaths,\n         'Active Cases': active_cases}\n\ndf = pd.DataFrame(data)\n","96ff6107":"# Finds the number of daily cases based on the difference of a current number\n# and it's previous number \ndef daily_values(data,array):\n    for i in range(len(data) - 1):\n        hold = data[i+1] - data[i]\n        array.append(hold)","c54efe18":"daily_cases = []\ndaily = list(df[\"Total Cases\"])\n\ndaily_values(daily,daily_cases) \n# 2 is inserted at the first position because Ghana first recorded 2 cases\ndaily_cases.insert(0,2)\n\ndf[\"Daily Cases\"] = daily_cases","a5528710":"'''\nUses recursion to find the cumulative sum of all the elements in an array from \ntheir respective indices to the start of the array. This is used in the \ncalculation of average daily statistics as everyday's value can be summed with\nall the previous values and divided by the index + 1.\n\nExample:\nInput: [2,14,17,36]\n\nOutput: [2, 14+2, 17+14+2, 36+17+14+2]\n\nnb: division of the values is not performed in the cumulative_sum function\n    but in the daily_average function\n\n'''\n\ndef cumulative_sum(data,array):\n    total = 0\n    values = []\n    for i,j in enumerate(data):\n        total = total+j \n        values.append(total)\n    if total <= 1000 | total<=100:\n        array.append(values)\n        return cumulative_sum(data,array)\n    else:\n        return array.append(values)\n    ","46f47dd4":"'''\nFinds the average of every element in an array. Each element\nis divided by the index + 1\n\n'''\ndef daily_average(data,array):\n    for i in data:\n        for y,k in enumerate(i):\n            array.append( (k) \/\/ (y+1) )    \n            ","cf309feb":"# average daily cases\ndaily_cases_sum = []\ncumulative_sum(daily_cases,daily_cases_sum)\n\navg_daily_cases = []\ndaily_average([daily_cases_sum[0]],avg_daily_cases)\ndf[\"Average Daily Cases\"] = avg_daily_cases","e06f098d":"# daily deaths\ndeaths = list(df[\"Total Deaths\"])\ndeath_list = []\ndaily_values(deaths,death_list)\ndeath_list.insert(0,0)\ndf[\"Daily Deaths\"] = death_list\n\n# average daily deaths\nsummed_deaths = []\ncumulative_sum(death_list,summed_deaths)\navg_deaths = []\ndaily_average([summed_deaths[0]],avg_deaths)\ndf[\"Average Daily Deaths\"] = avg_deaths","4abf4fd5":"# Cumulative recovered cases\ntotal = df[\"Total Cases\"]\ndead = df[\"Total Deaths\"]\ncurrent = df[\"Active Cases\"]\nrecovered = total - dead - current\ndf[\"Recovered\"] = recovered\n\n# Daily recovered cases\ndaily_recovered = []\ndaily_values(recovered,daily_recovered)\ndaily_recovered.insert(0,0)\ndf[\"Daily Recovered Cases\"] = daily_recovered\n\n#Average daily recovered cases\nsummed_recovered = []\ncumulative_sum(daily_recovered,summed_recovered)\navg_recovered = []\ndaily_average( [summed_recovered[0]], avg_recovered)\ndf[\"Average Daily Recovered Cases\"] = avg_recovered","67076512":"df.head()","330de0ce":"nRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","faf68950":"df.describe()","1abe008a":"df.isnull().values.any()\n","ec6994cc":"dates = df[\"Dates\"]\ntotal_active_cases = df[\"Active Cases\"]\n\ntotal_cases = df[\"Total Cases\"]\ndaily_cases = df[\"Daily Cases\"]\naverage_daily_cases = df[\"Average Daily Cases\"]\n\ntotal_deaths = df[\"Total Deaths\"]\ndaily_deaths = df[\"Daily Deaths\"]\ndaily_average_deaths = df[\"Average Daily Deaths\"]\n\ntotal_recovered = df[\"Recovered\"]\ndaily_recovered = df[\"Daily Recovered Cases\"]\ndaily_average_recovered_cases = df[\"Average Daily Recovered Cases\"]","8e0cf655":"# current average is calculated\navg_0 = list(total_cases)\navg = floor( avg_0[-1] \/ len(avg_0) )\n\n# average is multiplied by number of days in order to draw a horizontal line of average\navg = [avg] * len(dates)\n","165361f5":"labels = [\"Confirnmed Cases\", \"Confirmed Deaths\",\"Recovered\"]\npie_chart_data = [daily_cases.sum(),daily_deaths.sum(), daily_recovered.sum()]\ndata = go.Pie(labels=labels,values=pie_chart_data)\nlayout = dict(\ntitle= \"Ghana's Covid-19 Cases\",title_x=0.5\n)\n\ngo.Figure(data=data, layout = layout)","ae859231":"style = go.Layout(xaxis={'title':\"Days\"},yaxis={\"title\":\"Cases\"})\nfig = go.Figure(layout = style)\n\ntrace_0 = fig.add_trace(go.Scatter(x=dates, y=total_cases,name=\"Cumulative Cases Count\"\n    ))\n\n\nfig.update_layout(\n    title_text=\"Ghana's Corona Virus Cumulative Cases\", title_x=0.5,\n    xaxis=dict(\n        showgrid=True,    \n        linewidth=2,\n        ticks='outside',\n        tickangle = -67,\n        tickfont=dict(\n            family='Arial',\n            size=12\n        ),\n    )\n    )\n\nfig.show()","5cc6915e":"months = [ df.iloc[0:19],\ndf.loc[20:49],\ndf.iloc[50:80],\ndf.iloc[81:110],\ndf.iloc[111:141],\ndf.iloc[142:172],\ndf.iloc[173:203],\ndf.iloc[203:234],\ndf.iloc[234:264],\ndf.iloc[264:295],\ndf.iloc[295:-1]]\n\ndef monthly(data,array,field):\n    for i,j in enumerate(data):\n        array.append(data[i][field].sum())\n\n","e380ca5a":"monthly_cases = []\nmonthly(months,monthly_cases,\"Daily Cases\")\n\nmonthly_recovered = []\nmonthly(months,monthly_recovered,\"Daily Recovered Cases\")\n\nmonthly_deaths = []\nmonthly(months,monthly_deaths,\"Daily Deaths\")\n\n","eabd5958":"x_axis = [\"March\", \"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"January\"]\nstyle = go.Layout(xaxis={'title':\"Months\"},yaxis={\"title\":\"Numbers\"})\n\nfig = go.Figure(go.Bar(x=x_axis, y=monthly_cases, name='Monthly Cases'),layout = style)\nfig.add_trace(go.Bar(x=x_axis, y=monthly_recovered, name='Monthly Recovered'))\nfig.add_trace(go.Bar(x=x_axis, y=monthly_deaths, name='Monthly Deaths'))\n\n\nfig.update_layout(barmode='stack', title_text=\"Corona Virus Statistics For Every Month\", title_x=0.5,\n)\nfig.show()","0da7540b":"style = go.Layout(xaxis={'title':\"Days\"},yaxis={\"title\":\"Cases\"}, width =850)\n\nfig2 = go.Figure(layout=style)\n\ntrace_2 = fig2.add_trace(go.Scatter(x=dates, y=daily_cases,  name=\"Daily Case Count\"\n    ))\n\ntrace_3 = fig2.add_trace(go.Scatter (x = dates, y=avg, name=\"Current Average Cases\"))\ntrace_4 = fig2.add_trace(go.Scatter(x=dates, y = average_daily_cases, name=\"Average Daily Cases\"))\n\nfig2.update_layout(\n    title_text=\"Ghana's Daily Corona Virus Cases\", title_x=0.5,\n    xaxis=dict(\n        showgrid=True,    \n        linewidth=2,\n        ticks='outside',\n        tickangle = -67,\n        tickfont=dict(\n            family='Arial',\n            size=12\n        ),\n    )\n    )\nfig2.show()","60c5128e":"style = go.Layout(width=850)\nfig = go.Figure(go.Bar(x=dates, y=daily_recovered, name='Daily Recovered Cases'),layout = style)\nfig.add_trace(go.Scatter(x=dates,y=daily_average_recovered_cases, name = \"Average Recovered Cases\" ))\nfig.update_layout(\n    title_text=\"Ghana's Daily Corona Virus Recovered Cases\", title_x=0.5,\n    xaxis=dict(\n        showgrid=True,    \n        linewidth=2,\n        ticks='outside',\n        tickangle = -67,\n        tickfont=dict(\n            family='Arial',\n            size=12\n        ),\n        \n    )\n    )\nfig.show()","28aec482":"style = go.Layout(width=850)\nfig = go.Figure(go.Bar(x=dates, y=daily_deaths, name='Daily Deaths'),layout = style)\nfig.add_trace(go.Scatter(x=dates,y=daily_average_deaths, name = \"Daily Average Deaths\" ))\nfig.update_layout(\n    title_text=\"Ghana's Daily Corona Virus Deaths Cases\", title_x=0.5,\n    xaxis=dict(\n        showgrid=True,    \n        linewidth=2,\n        ticks='outside',\n        tickangle = -67,\n        tickfont=dict(\n            family='Arial',\n            size=12\n        ),\n        \n    )\n    )\nfig.show()","0d4e12da":"\n\nslope, intercept, r, p, std_err = stats.linregress(total_cases, total_deaths)\n\ndef regression_line(x):\n  return slope * x + intercept\n\nmodel = list(map(regression_line, total_cases))\n\ntrace_1 = go.Scatter(x = total_cases, y=total_deaths, mode='markers', name=\"Total Cases\")\ntrace_2 = go.Scatter(x=total_cases, y=model, name=\"Regression Line\")\nstyle = go.Layout(yaxis={'title':\"Deaths\"},xaxis={\"title\":\"Cases\"},width = 850)\ndata = [trace_1,trace_2]\n\nfig = go.Figure(data = data,layout = style)\nfig.update_layout(\n    title_text=\" Linear Regression Model On Ghana's Covid-19 Data\", title_x=0.5,\n    xaxis=dict(\n        showgrid=True,    \n        linewidth=2,\n        ticks='outside',\n        tickfont=dict(\n            family='Arial',\n            size=12\n        ),\n    )\n    )\nfig.show()\n","04f4aafa":"print('Estimated Forecast of total deaths if everyone in Ghana was to contract Covid-19:',\n        slope * 30000000 + intercept)","5a4f4b89":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for{filename}', fontsize=15)\n    plt.show()\n","584933bf":"df.dataframeName = \" Ghana's Corona Virus Data\"\nplotCorrelationMatrix(df, 10)","faaa565f":"The number of people who would die from covid-19 in ghana based on the total cases is represented by the equation **y =0.00532x+1.7643** where x is the total number of cases. From this, I can predict that in the worst case scenario where every Ghanaian contracts the virus(with a population of 30 million), about 175,000 - 180,000 people would die.","d8b42227":"Congratulations for reaching the end of my notebook. If you fell you liked my work, kindly give me an upvote or follow me :) to see more interesting stuff I would be doing in the future.","0ad99389":"Now, I can find the average daily cases.","39733600":"In order to find the average daily cases for each day, I will have to find the **cumulative sum of the daily cases** from March 12, 2020 to each day, divided by the number of days. ","861c2207":"From the graph above, we can infer that Ghana recorded its highest daily case on August 1, 2020(1513 cases) and the current daily cases being in a steady decline (Yaaayyyy xD).","d07ea55c":"Awesome :) \nI can now define variabels I will be using through the code.","4bff6196":"I repeat the same process for recovered cases, and deaths to get their daily values and average daily values.\n","f5ceb4e4":"Now that I have written a function to find the cumulative sum, the next thing I do is to divide that sum by the number of numbers(in this cases, the indices) to get an average for every single day.","36470da3":"What I'm about to do may not be considered the best of methods, I know pandas has  to_datetime and grouby methods but I'm currently having trouble with the date format so for the mean time, I'll be selecting data ranges manually","a32ae619":"Just to be sure I don't have any missing data, I can use the isnull function from pandas","3d899249":"The html that I would be downloading with requests is messy(a lot of unwanted data) so I will have to clean it.","81da2cef":"Now, I plot a correlation matrix. A correlation matrix is a table showing correlation coefficients between variables. When the correlation is greater than 0, it means there is a positive relationship between the two variables, a correlation of 0 means there is no relationship between the variables and a negative correlation shows that there is a negative relationship between the two variables. It ranges from -1 to 1.","229545c2":"**Statistics On Covid-19 In Ghana**\n\nThe first case of the novel corona virus was first reported in Ghana on March 12, 2020. From that day till now,\nmassive amounts of data have been generated from it and as a 17 year old Ghanaian student with not much to do at home. I decided to gather data on it, and perform some data analysis. I will be scraping the data I require from https:\/\/www.worldometers.info\/coronavirus\/country\/ghana\/ with python. ","47f022d6":"Ghana has so few deaths that, you can hardly even see it in a plot. If you find it hard to see the number of deaths every month has, you can interact with the plot by double clicking and dragging the box which will appear around your preferred area to expand it. (Use autoscale to revert changes)","4ebabd1d":"I first start by importing the libraries I would be using. requests for downloading the html, beautiful soup for parsing the html, re for regular expressions, pandas for working with csv files, plotly and matplotlib for visualization, scipy for linear regression and the standard math library for floor operations.\n","f4097f72":"From this, it's clear how very minute the number of deaths are and about 96% of all people who contracted the disease in the country have recovered.","e8e3d50b":"These are functions I have created to enable me to retrieve, the data I need from the parsed html with ease.","27b603a1":"Now, I have data on the cumulative number of cases, cumulative recorded cases, active cases, cumulative deaths and days they were recorded on. I can can find from this, the daily number of cases, recovered cases and deaths each day and also the average daily number of cases, recovered cases and deaths each day. \nIn finding the daily number of cases, I can perform a simple trick by subtracting the cases of a day from the previous day for all the days to get the daily cases.","fc3cfcfa":"Now I can take a look at the data","5812593a":"Now with the data of the cumulative cases and the number of people who die, I can develop a linear regression model to predict the number of deaths based on Ghana's total number of confirmed cases. "}}