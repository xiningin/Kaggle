{"cell_type":{"e3f487ee":"code","8063407c":"code","5f0369bb":"code","1bcd78a2":"code","8e7569b8":"code","0c14ab8c":"code","4c49d92c":"code","948cb509":"code","374f59fc":"code","9f3a998e":"code","226e3c86":"code","1553928a":"markdown","3b3ae147":"markdown","371ce0c0":"markdown","69ed1ae5":"markdown","4168d380":"markdown","54788239":"markdown","632049ff":"markdown"},"source":{"e3f487ee":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import confusion_matrix, classification_report","8063407c":"data = pd.read_csv('..\/input\/course-study\/appendix.csv')","5f0369bb":"data","1bcd78a2":"data.info()","8e7569b8":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop unused columns\n    df = df.drop(['Course Number', 'Course Title', 'Instructors'], axis=1)\n    \n    # Fill missing values\n    df['% Played Video'] = df['% Played Video'].replace('---', np.NaN).astype(np.float)\n    df['% Played Video'] = df['% Played Video'].fillna(df['% Played Video'].mean())\n    \n    # Extract date features\n    df['Launch Date'] = pd.to_datetime(df['Launch Date'])\n    df['Launch Year'] = df['Launch Date'].apply(lambda x: x.year)\n    df['Launch Month'] = df['Launch Date'].apply(lambda x: x.month)\n    df['Launch Day'] = df['Launch Date'].apply(lambda x: x.day)\n    df = df.drop('Launch Date', axis=1)\n    \n    # Split df into X and y\n    y = df['Honor Code Certificates']\n    X = df.drop('Honor Code Certificates', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    return X_train, X_test, y_train, y_test","0c14ab8c":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","4c49d92c":"X_train","948cb509":"y_train.value_counts()","374f59fc":"onehot_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(sparse=False, drop='if_binary'))\n])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('onehot', onehot_transformer, ['Institution', 'Course Subject'])\n], remainder='passthrough')\n\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('scaler', StandardScaler()),\n    ('classifier', RandomForestClassifier(\n        random_state=1,\n        class_weight={\n            0: 1.0,\n            1: 1.0\n        }\n    ))\n])","9f3a998e":"model.fit(X_train, y_train)","226e3c86":"y_pred = model.predict(X_test)\n\nacc = model.score(X_test, y_test)\ncm = confusion_matrix(y_test, y_pred, labels=[0, 1])\nclr = classification_report(y_test, y_pred, labels=[0, 1], target_names=[\"Negative\", \"Positive\"])\n\nprint(\"Accuracy: {:.2f}%\".format(acc * 100))\n\nplt.figure(figsize=(6, 6))\nsns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)\nplt.xticks(ticks=[0.5, 1.5], labels=[\"Negative\", \"Positive\"])\nplt.yticks(ticks=[0.5, 1.5], labels=[\"Negative\", \"Positive\"])\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Actual\")\nplt.title(\"Confusion Matrix\")\nplt.show()\n\nprint(\"Classification Report:\\n---------------------\\n\", clr)","1553928a":"# Preprocessing","3b3ae147":"# Building Pipeline","371ce0c0":"# Results","69ed1ae5":"# Task for Today  \n\n***\n\n## Online Course Certificate Type Prediction  \n  \nGiven *data about online courses from MIT and Harvard*, let's try to predict whether a given course offers **honor code certificates**.  \n  \nWe will use a random forest classification model within a scikit-learn pipeline to make our predictions.","4168d380":"# Getting Started","54788239":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/PLRZW6Az4hw","632049ff":"# Training"}}