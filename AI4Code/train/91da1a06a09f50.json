{"cell_type":{"c4e3b6a6":"code","97f8dc90":"code","e05f5b97":"code","44f9bf5a":"code","82a04f3c":"code","05f60a79":"code","b0ceca25":"code","a1ff61b0":"code","9958ac2c":"code","79a8bfd0":"code","f3b33b97":"code","f1262d0c":"code","50f0bc19":"code","bc71619a":"code","a9cae091":"code","58e0c5cd":"code","c4d88990":"code","b5926ab3":"code","fd6c62be":"code","2a0891ed":"code","a27c4973":"code","90df0660":"code","fe5a2aff":"code","aa3d2e24":"code","076ec1e9":"code","ec96cfe5":"code","a657b13c":"code","57947c94":"code","128d0a84":"code","ce39edb9":"code","26d38136":"code","1cfd4ef9":"markdown","74137760":"markdown","015b0bc5":"markdown","b429d8a2":"markdown","0cc54ba4":"markdown","970297c8":"markdown","82e7978c":"markdown","53509de6":"markdown"},"source":{"c4e3b6a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","97f8dc90":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom random import randint\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import Lasso, Ridge, ElasticNet\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","e05f5b97":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain.shape, test.shape","44f9bf5a":"data = pd.concat([train, test], ignore_index=True, sort=False)\ndata.sample(5)","82a04f3c":"data['MSSubClass'] = data['MSSubClass'].astype(str)","05f60a79":"num = data.select_dtypes(include=['int', 'float'])\ncat = data.select_dtypes(include='object')\n\nnum.shape, cat.shape","b0ceca25":"num.isna().sum().sort_values(ascending=False)[:15]","a1ff61b0":"# labels = data[['Id', 'SalePrice']]\n# data.drop(columns=['SalePrice'], inplace=True)\n\nnum_feat = list(data.dtypes[data.dtypes != 'object'].index)\nnum_feat.remove('SalePrice')\ncat_feat = data.dtypes[data.dtypes == 'object'].index\n\ndata['LotFrontage'] = data['LotFrontage'].fillna(data['LotFrontage'].mean())\ndata[num_feat] = data[num_feat].fillna(0)\n\ndata[num_feat].isna().sum().sort_values(ascending=False)","9958ac2c":"cat.isna().sum().sort_values(ascending=False)[:25]","79a8bfd0":"for col in ('Alley','Utilities','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n            'BsmtFinType2','Electrical','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n           'PoolQC','Fence','MiscFeature'):\n    data[col]=data[col].fillna('None')\n    \nfor col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    data[col]=data[col].fillna(data[col].mode()[0])\n    \ndata.isna().sum().sort_values(ascending=False)[:5]","f3b33b97":"skewed = [col for col in num_feat if np.abs(data[col].skew())>0.7]\nskewed","f1262d0c":"lam = 0.15\ndata[skewed] = boxcox1p(data[skewed], lam)","50f0bc19":"data[num_feat].skew()","bc71619a":"train_df = data.dropna()\ntest_df = data.drop(index=train_df.index)","a9cae091":"train_df['Log_SalePrice'] = np.log1p(train_df['SalePrice'])","58e0c5cd":"def scatter_machine(col, data=train_df):\n    plt.figure(figsize=(12,7.5))\n    plt.scatter(data[col], data['Log_SalePrice'])\n    plt.title(\"%s Distribution\" % col)","c4d88990":"scatter_machine(col='GrLivArea')\nplt.axvline(17)","b5926ab3":"train_df = train_df[train_df['GrLivArea']<17]\nscatter_machine(col='LotArea')\nplt.axvline(30)","fd6c62be":"train_df = train_df[train_df['LotArea']<30]\nscatter_machine(col='PoolArea')","2a0891ed":"scatter_machine(col='KitchenAbvGr')","a27c4973":"scatter_machine(col='TotRmsAbvGrd')","90df0660":"labels = train_df['SalePrice']\nfeatures = pd.concat([train_df, test_df], sort=False).drop(columns=['SalePrice', 'Log_SalePrice'])","fe5a2aff":"scaler = RobustScaler()\nfeatures[num_feat] = scaler.fit_transform(features[num_feat])\nfeatures.head()","aa3d2e24":"features = pd.get_dummies(features)\nfeatures.drop(columns=['Id'])\nfeatures.shape","076ec1e9":"labels = np.log1p(labels)","ec96cfe5":"X_train = features.iloc[:len(train_df)]\nX_test = features.drop(index=X_train.index)\ny = labels\nlen(X_train), len(X_test), len(y)","a657b13c":"lasso = Lasso()\nenet = ElasticNet()\nridge = Ridge()\nrfr = RandomForestRegressor()\ngbr = GradientBoostingRegressor()\n\nimport xgboost as xgb\nxgbr = xgb.XGBRegressor()","57947c94":"import warnings\nwarnings.filterwarnings('ignore')\nmodels = [lasso, enet, ridge, rfr, gbr, xgbr]\nscores = []\nfor model in models:\n#     model.fit(X_train, y)\n    means = cross_val_score(model, X_train, y, cv=5).mean()\n    scores.append(means)\nscores","128d0a84":"from sklearn.model_selection import KFold\n\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(X_train.values)\n    rmse= np.sqrt(-cross_val_score(model, X_train.values, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)\n\nmodels = [lasso, enet, ridge, rfr, gbr, xgbr]\n# rmsle_cv(ridge)\nfor model in models:\n    score = rmsle_cv(model)\n    print(score.mean())","ce39edb9":"ridge.fit(X_train, y) # 0.012\nrfr.fit(X_train, y)   # 0.015\ngbr.fit(X_train, y)   # 0.012\nxgbr.fit(X_train, y)  # 0.012\npred1 = ridge.predict(X_test)\npred2 = rfr.predict(X_test)\npred3 = gbr.predict(X_test)\npred4 = xgbr.predict(X_test)\nprediction = 0.27*pred1 + 0.19*pred2 + 0.27*pred3 + 0.27*pred4\n\ntest['SalePrice'] = np.expm1(prediction)\nsubmission = test[['Id', 'SalePrice']]\nsubmission.to_csv('submission7.csv', index=False)","26d38136":"submission.head()","1cfd4ef9":"# 2. Modeling","74137760":"## 1-4. Handling Outliers","015b0bc5":"# 1. Data Preprocessing","b429d8a2":"# 3. Submission","0cc54ba4":"## 1-2. Missing Value Replacement","970297c8":"## 1-1. Type Issue","82e7978c":"## 1-5. Scaling and Encoding","53509de6":"## 1-3. Handling Skewness"}}