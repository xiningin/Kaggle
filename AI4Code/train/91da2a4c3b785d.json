{"cell_type":{"d8fb4e9c":"code","2ee1cd9f":"code","9162cdc9":"code","8c42de87":"code","cd8cfd68":"code","26b239a8":"code","6dfaa963":"code","29436803":"code","493dd62d":"code","2878dd85":"code","e2a1983b":"code","aed7a138":"code","c49d6b05":"code","2bce3209":"code","6aaab568":"code","c10d77b8":"code","3a1298a3":"code","238b8d8d":"code","86f74a98":"code","3f47bf40":"code","ddeac298":"code","7f6729bd":"code","e20b9bd1":"code","c8cb2d66":"code","5a4df41b":"code","81fdb8a7":"code","775d6949":"code","689415c8":"code","af08fdc1":"code","3031b70c":"code","d1ba0242":"code","b70ac508":"code","bf1c2646":"code","7935659b":"code","b827550b":"code","d17dac87":"code","72b4f8ba":"code","986c7964":"code","0e6386b2":"code","7808dd5b":"code","41479436":"code","bc73d75a":"code","c5d6dc45":"code","14ba03ee":"markdown"},"source":{"d8fb4e9c":"import numpy as np\nimport pandas as pd\ndata_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndata_train.head()","2ee1cd9f":"data_train.shape","9162cdc9":"data_train.isnull().sum().sort_values(ascending=False).head(20)","8c42de87":"data_train.drop(['Id','PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)\n","cd8cfd68":"import seaborn as sb\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,9))\nsb.set(font_scale=1.2)\nsb.distplot(data_train['SalePrice'],color='violet')\nplt.xlabel('SalePrice',fontsize=20)\nprint('Skew Dist:',data_train['SalePrice'].skew())\nprint('Kurtosis Dist:',data_train['SalePrice'].kurt())","26b239a8":"data_train[['SalePrice']].describe()\n","6dfaa963":"data_train[data_train.SalePrice>600000].shape[0]\n","29436803":"data_train=data_train[data_train.SalePrice<550000]\ny=data_train[\"SalePrice\"]","493dd62d":"data_train.corr()","2878dd85":"corr=data_train.corr()\ncorr=corr[['SalePrice']].reset_index(inplace=False)\nlist_corr=corr[(corr['SalePrice']<-0.01)|(corr['SalePrice']>0.05)]['index'].tolist()\nlist_corr.remove('SalePrice')","e2a1983b":"len(list_corr) ","aed7a138":"list_corr","c49d6b05":"data_train=data_train[list_corr]\ndata_train.head()","2bce3209":"list1=[]\nfor f in data_train.columns:\n    if data_train[f].dtype=='object':\n        list1.append(f)\nlist1[:2]       ","6aaab568":"for f in list1:\n    if data_train[f].isnull().sum()!=0:\n        p=data_train[f].describe().unique()[-1]\/data_train[f].describe().unique()[0]\n        print(\"The percentage of the most frequent item in the column\",f,\"is\",p)","c10d77b8":"for f in list1:\n    if data_train[f].isnull().sum()!=0:\n        t=data_train[f].describe().top\n        data_train[f].fillna(t,inplace=True)\n        ","3a1298a3":"data_train.isnull().sum().sort_values(ascending=False).head(5)","238b8d8d":"for f in data_train.columns:\n    if f in list1:\n         if data_train[f].isnull().sum()!=0:\n            t=data_train[f].describe().top\n            data_train[f].fillna(t,inplace=True)\n    else:\n        m=data_train[f].mean()\n        data_train[f].fillna(m,inplace=True)","86f74a98":"data_train.isnull().sum().sort_values() ","3f47bf40":"data_train.head()\n","ddeac298":"X=data_train\nX.shape","7f6729bd":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\n","e20b9bd1":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\nfor lab in X.columns:\n    if lab in list1:\n        X[lab]=LE.fit_transform(X[lab])\n","c8cb2d66":"X.shape","5a4df41b":"X.head()","81fdb8a7":"X.columns","775d6949":"X.describe()","689415c8":"X.describe().iloc[7].sort_values(ascending=False).head(30)","af08fdc1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nridge_reg = Ridge()","3031b70c":"X_train[:2]","d1ba0242":"ridge_reg=Ridge(alpha=1.0,fit_intercept=False,random_state=3,solver ='cholesky')\nridge_reg.fit(X_train,y_train)\n","b70ac508":"y_pred=ridge_reg.predict(X_test)\n","bf1c2646":"X_test.shape","7935659b":"from sklearn.metrics import r2_score\nprint(\"r2_score :\",r2_score(y_test,y_pred))","b827550b":"from sklearn.linear_model import Lasso\nlr=Lasso(normalize=True)\nlr.fit(X_train,y_train)","d17dac87":"pred2=lr.predict(X_test)\nprint(\"r2_score :\",r2_score(y_test,pred2))","72b4f8ba":"import xgboost as xgb\nxgbr = xgb.XGBRegressor(verbosity=0) \nxgbr.fit(X_train,y_train)\npred2=xgbr.predict(X_test)\nprint(\"r2_score :\",r2_score(y_test,pred2))","986c7964":"test_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\niddata=test_data[['Id']]","0e6386b2":"test_data=test_data[list_corr]\nlist2=[]\nfor f in test_data.columns:\n    if test_data[f].dtype=='object':\n        list2.append(f)\nlist2[:2]       \nfor f in test_data.columns:\n    if f in list2:\n         if test_data[f].isnull().sum()!=0:\n            t=test_data[f].describe().top\n            test_data[f].fillna(t,inplace=True)\n    else:\n        m=test_data[f].mean()\n        test_data[f].fillna(m,inplace=True)\n        ","7808dd5b":"from sklearn.preprocessing import LabelEncoder\nLE = LabelEncoder()\nfor lab in X.columns:\n    if lab in list1:\n        test_data[lab]=LE.fit_transform(test_data[lab])\n","41479436":"predicted_prices=(xgbr.predict(test_data)+lr.predict(test_data))\/2","bc73d75a":"predicted_prices[:2]","c5d6dc45":"my_submission = pd.DataFrame({'Id': iddata.Id, 'SalePrice': predicted_prices})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission101.csv', index=False)","14ba03ee":"# * We got the best accuracy when using XGBRegressor model"}}