{"cell_type":{"8b13ef58":"code","709f0fbe":"code","39a71160":"code","162426eb":"code","d188aaf1":"code","28d44dac":"code","8ab6a5ff":"code","544e5e3c":"code","7ac068a9":"code","4ac46f39":"code","93b688db":"code","fe2a81ef":"code","cae9f464":"code","fb0a2385":"code","a363f965":"code","584327f6":"code","63a6a755":"code","95743494":"code","64b3a466":"code","df00b1b8":"code","3892060b":"code","f78d4542":"code","06b5e562":"code","530e9114":"code","d8b4349d":"code","62aa11e2":"code","5673e28f":"code","80e9ddaf":"code","56122a6a":"code","c14b8171":"code","2a204d03":"code","723bbc2f":"code","d61cb695":"code","88002170":"code","25f69373":"code","b0fcf8b8":"code","19b16b78":"code","18873f9f":"code","c9761f26":"code","e3bf9d6d":"code","b4e8a684":"code","2cdcb0a6":"code","589d2d73":"code","677280e2":"code","26733640":"code","c3e09496":"code","0b93cd23":"code","5e9d2988":"code","b9c60b63":"code","37dcc01c":"code","17ed2aed":"code","2a9d2364":"code","30c57583":"markdown","571171ee":"markdown","1c04e348":"markdown","c579dabd":"markdown","4f046d89":"markdown","052bacd9":"markdown","f45bfc99":"markdown","f3624499":"markdown","f654895a":"markdown","1c950f65":"markdown","ee67eae7":"markdown","4d5f3b4a":"markdown","7bc0ddd8":"markdown","c56ea9ad":"markdown","56490de9":"markdown","f861f3ba":"markdown","403e0cab":"markdown","f3f1166c":"markdown","bdd57f34":"markdown","eaaa165a":"markdown","70fd8024":"markdown","ae9186a7":"markdown","83ba86da":"markdown","5b440823":"markdown","53c1076c":"markdown"},"source":{"8b13ef58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","709f0fbe":"import pandas as pd \nimport numpy as np \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n%matplotlib inline\ndf = pd.read_csv('..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv') \ncombine = [df] \nmpl.style.use(\"ggplot\")\nprint(\"Done\")","39a71160":"df.head(10)","162426eb":"df.dtypes","d188aaf1":"df.describe()","28d44dac":"df.corr()","8ab6a5ff":"df.describe(include='all')","544e5e3c":"df.info","7ac068a9":"df.replace(\"?\",np.nan,inplace= True) \ndf.head()","4ac46f39":"missing_data = df.isnull() \nmissing_data.tail()","93b688db":"for col in missing_data.columns.values.tolist(): \n    print(col) \n    print(missing_data[col].value_counts()) \n    print('-'*20)","fe2a81ef":"print(\"Total Employees in each department :\")\ndf.Department.value_counts().head() ","cae9f464":"df['Department'].value_counts().head().plot(kind='bar',figsize=(10,6)) \nplt.ylabel(\"No. of employees\") \nplt.xlabel(\"Department\")\nplt.title(\"Comparision of total no. of employees vs Department\")","fb0a2385":"df_copy = df.copy() \ndf_copy.head()","a363f965":"\ndf_t = df_copy[['EmployeeNumber','MonthlyIncome']]\ndf_t.set_index('EmployeeNumber',inplace=True) \ndf_t.head()\n","584327f6":"count,bin_edges=np.histogram(df_t) \nprint(count) \nprint(bin_edges)","63a6a755":"df_t.plot(kind='hist', figsize=(8, 5),color='chartreuse') \nplt.xlabel(\"Monthly Salary\")\n","95743494":"df_b=df[['Education', 'MonthlyIncome']].groupby(['Education'], as_index=False).mean().sort_values(by='MonthlyIncome', ascending=False) \ndf_b.set_index('Education',inplace=True) \ndf_b.head()","64b3a466":"df_b.plot(kind='bar',figsize=(10,6),color='Rybgm') \nplt.ylabel(\"Average Monthly income\") \nplt.title(\"Comparison of average monthly income by education. \\n\\n Education: 1.'Below College', 2.'College', 3.'Bachelor', 4.'Master', 5.'Doctor'\")","df00b1b8":"df_s=df[['YearsAtCompany', 'PercentSalaryHike']].groupby(['YearsAtCompany'], as_index=False).mean().sort_values(by='PercentSalaryHike', ascending=False) \ndf_s.head()","3892060b":"df_s.plot(kind='scatter', x='YearsAtCompany', y='PercentSalaryHike', figsize=(10, 6), color='c')\n\nplt.title('Comparison of PercentSalaryHike by YearsAtCompany.')\nplt.xlabel('YearsAtCompany')\nplt.ylabel('PercentSalaryHike')\n\nplt.show()","f78d4542":"for dataset in combine:\n    dataset['Attrition'] = dataset['Attrition'].map( {'Yes': 1, 'No': 0} ).astype(int)\n\ndf.head()","06b5e562":"for dataset1 in combine:\n    dataset1['OverTime'] = dataset1['OverTime'].map( {'Yes': 1, 'No': 0} ).astype(int)\n\ndf.head()","530e9114":"for dataset2 in combine:\n    dataset2['Gender'] = dataset2['Gender'].map( {'Female': 1, 'Male': 0} ).astype(int)\n\ndf.head()","d8b4349d":"sns.regplot(x='Age',y='Attrition',data=df) \nplt.ylim(0,)","62aa11e2":"df[['Age','Attrition']].corr() \n#weak linear relationship","5673e28f":"df[['EducationField', 'Attrition']].groupby(['EducationField'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","80e9ddaf":"from scipy import stats","56122a6a":"pearson_coef, p_value = stats.pearsonr(df['DistanceFromHome'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","c14b8171":"pearson_coef, p_value = stats.pearsonr(df['Age'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","2a204d03":"pearson_coef, p_value = stats.pearsonr(df['Education'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","723bbc2f":"pearson_coef, p_value = stats.pearsonr(df['EnvironmentSatisfaction'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","d61cb695":"pearson_coef, p_value = stats.pearsonr(df['JobInvolvement'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","88002170":"pearson_coef, p_value = stats.pearsonr(df['OverTime'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","25f69373":"\npearson_coef, p_value = stats.pearsonr(df['TotalWorkingYears'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","b0fcf8b8":"#YearsSinceLastPromotion \npearson_coef, p_value = stats.pearsonr(df['YearsSinceLastPromotion'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","19b16b78":"pearson_coef, p_value = stats.pearsonr(df['YearsWithCurrManager'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","18873f9f":"pearson_coef, p_value = stats.pearsonr(df['NumCompaniesWorked'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","c9761f26":"pearson_coef, p_value = stats.pearsonr(df['YearsInCurrentRole'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","e3bf9d6d":"pearson_coef, p_value = stats.pearsonr(df['MonthlyIncome'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","b4e8a684":"pearson_coef, p_value = stats.pearsonr(df['JobLevel'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","2cdcb0a6":"pearson_coef, p_value = stats.pearsonr(df['Gender'], df['Attrition'])\nprint(\"The Pearson Correlation Coefficient is\", pearson_coef, \" with a P-value of P =\", p_value)","589d2d73":"df= df[['JobInvolvement','Age','MonthlyIncome','YearsInCurrentRole','YearsWithCurrManager','TotalWorkingYears','HourlyRate','OverTime','Attrition']] \ndf['Attrition'] = df['Attrition'].astype('int') \ndf.head()","677280e2":"x = np.asarray(df[['JobInvolvement','MonthlyIncome','YearsInCurrentRole','YearsWithCurrManager','TotalWorkingYears','HourlyRate','OverTime','Age']]) \n","26733640":"y = np.asarray(df['Attrition'])","c3e09496":"from sklearn import preprocessing \nx = preprocessing.StandardScaler().fit(x).transform(x) \nx[:5]","0b93cd23":"from sklearn.model_selection import train_test_split \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=4) \nprint('Train set:  ', x_train.shape, y_train.shape) \nprint('Test set: ', x_test.shape, y_test.shape)","5e9d2988":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import confusion_matrix \nLR = LogisticRegression(C=0.01, solver='liblinear').fit(x_train,y_train)  \nLR","b9c60b63":"yhat = LR.predict(x_test)\nyhat","37dcc01c":"from sklearn.metrics import jaccard_similarity_score\njaccard_similarity_score(y_test, yhat)","17ed2aed":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\ny_pred","2a9d2364":"jaccard_similarity_score(y_test, y_pred)","30c57583":"YearsInCurrentRole vs Attrition","571171ee":" We can infer that:\n\n1. 365 employees have monthly income between 1009 to 2908\n2. 349 employees have monthly income between 2908 to 4807\n3. 290 employees have monthly income between 4807 to 6706, and so on..\n","1c04e348":"Age vs Attrition","c579dabd":"Overtime vs Attrition ","4f046d89":"NumCompaniesWorked vs Attrition","052bacd9":"DistanceFromHome vs Attrition","f45bfc99":"YearsWithCurrManager vs Attrition","f3624499":"**Pearson Correlation**","f654895a":"**Prediction using Logistic Knn model.**","1c950f65":"TotalWorkingYears vs Attrition","ee67eae7":"YearsSinceLastPromotion vs Attrition","4d5f3b4a":"Gender vs Attrition","7bc0ddd8":"**Data Aquisition and Read data**","c56ea9ad":"**Identify and handle missing values.**","56490de9":"EnvironmentSatisfaction vs Attrition","f861f3ba":"**Correlation and Causation.**","403e0cab":"**Data Visualization**","f3f1166c":"**jaccard index**","bdd57f34":"JobLevel vs Attrition","eaaa165a":"MonthlyIncome vs Attrition","70fd8024":"Education vs Attrition","ae9186a7":"**Data pre-processing and selection**","83ba86da":"JobInvolvement vs Attrition","5b440823":"**Basic Insight Of Dataset.**","53c1076c":"**Prediction using Logistic Regression model.**"}}