{"cell_type":{"9cdf3f40":"code","0d1625b4":"code","6e9ba77d":"code","1d19990f":"code","7a9b6862":"code","639a13a0":"code","12a4a8fc":"code","b65c96c9":"code","6c8fc430":"code","6cc6cf27":"code","aa04ce0b":"code","cdd44f68":"code","39115602":"code","d8866d14":"code","e43e61cd":"code","f52316bb":"code","dfc2a1b5":"code","adb1b556":"code","f12c3bed":"code","1010f026":"code","79a58a90":"code","6a3cb94d":"code","fbbadfd3":"code","f916ee8e":"code","386916b4":"code","8f9df708":"code","67c5e433":"code","230005ed":"code","775bf05a":"markdown","aae6c1ef":"markdown","7ff220dd":"markdown","628c48a9":"markdown","9a9a0f00":"markdown","468d097d":"markdown","b0c8a4bc":"markdown","4debf056":"markdown","8768c112":"markdown","f8de3e48":"markdown","bf5c1077":"markdown","5c639ca3":"markdown","28e1e4b7":"markdown","c5ff3064":"markdown","8b518c07":"markdown","c2d1ff69":"markdown","a0cf0d1d":"markdown","49126f62":"markdown","997c8e98":"markdown","d55e0207":"markdown","ebdf0260":"markdown"},"source":{"9cdf3f40":"import pandas as pd\nimport datetime as dt\nfrom matplotlib import pyplot as plt\n\n%matplotlib notebook\n%matplotlib inline","0d1625b4":"data = pd.read_csv('https:\/\/covid.ourworldindata.org\/data\/ecdc\/full_data.csv') # read_csv is a function to read csv files\nprint(data.head()) # returns the top 5 records of the dataset\nprint(data.dtypes) # returns the data type of the dataset","6e9ba77d":"data","1d19990f":"# converting to date datatype by using datetime library. \n# strptime is used to specify the format of the date. In our case its year\n# followed by month and day\ndata['date'] = [dt.datetime.strptime(x,'%Y-%m-%d') for x in data['date']] ","7a9b6862":"print(data.dtypes)","639a13a0":"countries=['United States', 'Spain', 'Italy']\ndata_country = data[data.location.isin(countries)] ","12a4a8fc":"data_country","b65c96c9":"data_country.set_index('date', inplace=True) ","6c8fc430":"data_country","6cc6cf27":"data_by_date = data_country.loc['2020-02-20':'2020-04-30']","aa04ce0b":"data_by_date","cdd44f68":"data_country.tail(1)","39115602":"data['mortality_rate'] = data['total_deaths']\/data['total_cases']\n","d8866d14":"data.loc[20000:21000]","e43e61cd":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14,14))\n\ndata_country.groupby('location')['new_cases'].plot(ax=axes[0,0], legend=True) #for log scale add logy=True\ndata_country.groupby('location')['new_deaths'].plot(ax=axes[0,1], legend=True)\ndata_country.groupby('location')['total_cases'].plot(ax=axes[1,0], legend=True)\ndata_country.groupby('location')['total_deaths'].plot(ax=axes[1,1], legend=True)\n\naxes[0, 0].set_title(\"New Cases\")\naxes[0, 1].set_title(\"New Deaths\")\naxes[1, 0].set_title(\"Total Cases\")\naxes[1, 1].set_title(\"Total Deaths\")","f52316bb":"print(data.isnull().sum())","dfc2a1b5":"data.columns = ['Date', 'Country', 'New Cases', 'New deaths', 'Total Cases', 'Total Deaths','weekly_cases','weekly_deaths','biweekly_cases','biweekly_deaths','mortality_rate']","adb1b556":"data.head(1)","f12c3bed":"data_no_china = data.loc[~(data['Country'].isin([\"China\", \"World\"]))]\n# backtick used to specify not equals","1010f026":"data_no_china","79a58a90":"import seaborn as sns","6a3cb94d":"#Reset index because groupby by default makes grouped columns indices\ndata_no_china = pd.DataFrame(data_no_china.groupby(['Country', 'Date'])['Total Cases', 'Total Deaths'].sum()).reset_index()","fbbadfd3":"data_no_china","f916ee8e":"data_no_china = data_no_china.sort_values(by = ['Country','Date'], ascending=False)","386916b4":"data_no_china","8f9df708":"def plot_bar(feature, value, title, df, size):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    df = df.sort_values([value], ascending=False).reset_index(drop=True)\n    g = sns.barplot(df[feature][0:10], df[value][0:10], palette='Set3')\n    g.set_title(\"Number of {} - highest 10 values\".format(title))\n    plt.show()    ","67c5e433":"filtered_data_no_china = data_no_china.drop_duplicates(subset = ['Country'], keep='first') # keep = 'first' drop duplicates except first occurence\nplot_bar('Country', 'Total Cases', 'Total cases in the World except China', filtered_data_no_china, size=4)\nplot_bar('Country', 'Total Deaths', 'Total deaths in the World except China', filtered_data_no_china, size=4)","230005ed":"def plot_world_aggregate(df, title='Aggregate plot', size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,2*size))\n    g = sns.lineplot(x=\"Date\", y='Total Cases', data=df, color='blue', label='Total Cases')\n    g = sns.lineplot(x=\"Date\", y='Total Deaths', data=df, color='red', label='Total Deaths')\n    plt.xlabel('Date')\n    plt.ylabel(f'Total {title} cases')\n    plt.xticks(rotation=90)\n    plt.title(f'Total {title} cases')\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show()  \n\n#Group by dates. \n#Reset index because groupby by default makes grouped columns indices\n#Sum values from all countries per given date\ndata_no_china_aggregate = data_no_china.groupby(['Date']).sum().reset_index()\nplot_world_aggregate(data_no_china_aggregate, 'Rest of the World except China', size=4)\n","775bf05a":"# \ud83d\udc69\u200d\ud83d\udcbbChecking for Missing Data","aae6c1ef":"# \ud83d\udcccPlotting the cases and deaths for the top 10 countries with Seaborn","7ff220dd":"# \ud83d\ude80Libraries that we are going to use:\n\u2705 Pandas for Data Manipulation, Data Cleaning and Analysis<br>\n\u2705 Matplotlib to visualize the data and generate interesting insights from the data<br>\n","628c48a9":"### \ud83d\udccd Let's group the data by Country and Date and filter only the Total Cases and Total Deaths column","9a9a0f00":"# \u2753 What are the records for the countries US, Spain and Italy?","468d097d":"There is some missing data. We will be dealing with it later on","b0c8a4bc":"**Total Aggregate Cases of the World Except China plotted by Date**","4debf056":"**That's all for now! I will be updating the notebook soon with more analysis. Stay Tuned!**\n\n**If you have any queries\/suggestions on how I can improve my EDA, please comment down below**","8768c112":"# \u2753 What are the COVID Case between x and y dates?","f8de3e48":"# \u2753What is the mortality rate\ud83e\udd14\n\n**Mortality Rate = No Of Deaths \/ No of Cases**","bf5c1077":"# \u2753Latest date that a country has recorded a COVID case","5c639ca3":"# \ud83d\ude37 Exploratory Data Analysis of COVID 19 Data\n\nIn this notebook, I will be demonstrating a complete hands on Exploratoy Data Analysis session using COVID19 Data with more that 60,000 records.","28e1e4b7":"# \ud83d\udcca Let's Visualize Data and Derive Insights","c5ff3064":"# \ud83d\udccdSorting the Values By Dates So that Plot Interpretation is Easy","8b518c07":"# \ud83d\ude80Changing the index to `date` for simplifying the plotting later on","c2d1ff69":"## \ud83d\ude80Selecting all country records except China and The World","a0cf0d1d":"## \ud83d\udccaWorld Aggregate Data Analysis","49126f62":"## \ud83d\udc69\u200d\ud83d\udcbbProcess\n\n\n*   Create a list of countries that we want the data of\n*   Make a subset of the data by filtering the original dataset usinf `isin` function\n","997c8e98":"# \ud83d\ude80Convert the Date to the proper datatype \nCurrently the date field is an object. Let's convert it to date format by looping through the records and using a list comprehension to loop through the records and change the datatype","d55e0207":"## \ud83d\ude80Changing the column names to something that makes sense","ebdf0260":"# \ud83d\ude80Importing Libraries"}}