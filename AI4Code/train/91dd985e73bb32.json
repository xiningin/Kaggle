{"cell_type":{"8a086f07":"code","ea822ae9":"code","6901f06c":"code","75163ccf":"code","8e1da977":"code","ede2a8f9":"code","f65d11a1":"code","c50edee2":"code","b5c3c57e":"code","97f8e5a7":"code","2b5f9f1c":"code","b0c1a789":"code","f7a44670":"code","e43f8879":"code","21bca6ed":"code","b0a46728":"code","3781a852":"code","9cf8e18a":"code","f283c408":"markdown","1d7cd381":"markdown","6954c34f":"markdown","64f4e0a7":"markdown","75e67cb9":"markdown","6b99bdca":"markdown","9be676a0":"markdown"},"source":{"8a086f07":"\nimport os\nimport zipfile\nimport random\nimport shutil\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom shutil import copyfile\nfrom os import getcwd\nfrom os import listdir\nimport cv2\nfrom tensorflow.keras.layers import Conv2D, Input, ZeroPadding2D, BatchNormalization, Activation, MaxPooling2D, Flatten, Dense\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.utils import shuffle\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image  as mpimg\nimport shutil","ea822ae9":"#Creating the directories\nos.mkdir('Temp')\nos.mkdir('Temp\/Mask')\nos.mkdir('Temp\/No Mask')\n\n#Spliting the images\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if 'face_with_mask' in filename:\n            print('image : {} '.format(filename)+' Added to the directory Mask')\n            shutil.copy('\/kaggle\/input\/mask-detection\/face_mask_data\/'+filename, '\/kaggle\/working\/Temp\/Mask')\n        elif 'face_without_mask' in filename:\n            print('image : {} '.format(filename)+' Added to the directory No Mask')\n            shutil.copy('\/kaggle\/input\/mask-detection\/face_mask_data\/'+filename, '\/kaggle\/working\/Temp\/No Mask')","6901f06c":"data_path='\/kaggle\/working\/Temp\/'\ncategories=os.listdir(data_path)\nlabels = [i for i in range(len(categories))]\nlabel_dict=dict(zip(categories,labels)) #empty dictionary\n\nprint(labels)\nprint(categories)\nprint(label_dict)\n    ","75163ccf":"img_size=100\ndata=[]\ntarget=[]\n\n\nfor category in categories:\n    folder_path=os.path.join(data_path,category)\n    img_names=os.listdir(folder_path)\n        \n    for img_name in img_names:\n        img_path=os.path.join(folder_path,img_name)\n        img=cv2.imread(img_path)\n\n        try:\n            img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)           \n            resized=cv2.resize(img,(img_size,img_size))\n            #resizing the gray scale into 50x50, since we need a fixed common size for all the images in the dataset\n            data.append(resized)\n            target.append(label_dict[category])\n            #appending the image and the label(categorized) into the list (dataset)\n\n        except Exception as e:\n            print('Exception:',e)\n            #if any exception rasied, the exception will be printed here. And pass to the next image","8e1da977":"import numpy as np\n\ndata=np.array(data)\/255.0\ndata=np.reshape(data,(data.shape[0],img_size,img_size,3))\ntarget=np.array(target)\n\nfrom keras.utils import np_utils\n\nnew_target=np_utils.to_categorical(target)","ede2a8f9":"from keras.models import Sequential\nfrom keras.layers import Dense,Activation,Flatten,Dropout\nfrom keras.layers import Conv2D,MaxPooling2D\nfrom keras.callbacks import ModelCheckpoint\n\nmodel=Sequential()\n\n#The first CNN layer followed by Relu and MaxPooling layers\nmodel.add(Conv2D(200,(3,3),input_shape=(100, 100, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n#The second convolution layer followed by Relu and MaxPooling layers\nmodel.add(Conv2D(100,(3,3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n#Flatten layer to stack the output convolutions from second convolution layer\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\n\n#Dense layer of 64 neurons\nmodel.add(Dense(64,activation='relu'))\n\n#The Final layer with two outputs for two categories\nmodel.add(Dense(2,activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","f65d11a1":"from sklearn.model_selection import train_test_split\n\ntrain_data,test_data,train_target,test_target=train_test_split(data,target,test_size=0.2)","c50edee2":"plt.figure(figsize=(10,5))\npie = [len(os.listdir('\/kaggle\/working\/Temp\/Mask')),len(os.listdir('\/kaggle\/working\/Temp\/No Mask'))]\nplt.pie(pie,\n        labels = ['Mask','No Mask'],\n        autopct='%1.1f%%'       \n       )\nplt.title('Proportion of each observed category')","b5c3c57e":"def display_examples(class_names, images, labels):\n    \"\"\"\n        Display 25 images from the images array with its corresponding labels\n    \"\"\"\n    \n    fig = plt.figure(figsize=(10,10))\n    fig.suptitle(\"Some examples 25 images of the dataset\", fontsize=16)\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        plt.imshow(images[i], cmap=plt.cm.binary)\n        plt.xlabel(class_names[labels[i]])\n    plt.show()","97f8e5a7":"display_examples(categories,test_data,test_target)","2b5f9f1c":"checkpoint = ModelCheckpoint('model-{epoch:03d}.model',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')\nhistory=model.fit(train_data,train_target,epochs=20,callbacks=[checkpoint],validation_split=0.2)","b0c1a789":"# if you want to save the model to use it later uncomment the line below\n#model.save('my_model.h5')\n\n#to load it later uncomment the lines below\n#from keras.models import load_model\n#new_model = tf.keras.models.load_model('PATH') PATH represent the path of the saved model","f7a44670":"def plot_accuracy_loss(history):\n    \"\"\"\n        Plot the accuracy and the loss during the training of the nn.\n    \"\"\"\n    fig = plt.figure(figsize=(18,8))\n\n    # Plot accuracy\n    plt.subplot(221)\n    plt.plot(history.history['accuracy'],'bo--', label = \"acc\")\n    plt.plot(history.history['val_accuracy'], 'ro--', label = \"val_acc\")\n    plt.title(\"train_acc vs val_acc\")\n    plt.ylabel(\"accuracy\")\n    plt.xlabel(\"epochs\")\n    plt.legend()\n\n    # Plot loss function\n    plt.subplot(222)\n    plt.plot(history.history['loss'],'bo--', label = \"loss\")\n    plt.plot(history.history['val_loss'], 'ro--', label = \"val_loss\")\n    plt.title(\"train_loss vs val_loss\")\n    plt.ylabel(\"loss\")\n    plt.xlabel(\"epochs\")\n\n    plt.legend()\n    plt.show()\nplot_accuracy_loss(history)","e43f8879":"predictions = model.predict(test_data)     # Vector of probabilities\npred_labels = np.argmax(predictions, axis = 1) # We take the highest probability","21bca6ed":"\ndef display_random_image(class_names, images, labels):\n    \"\"\"\n        Display a random image from the images array and its correspond label from the labels array.\n    \"\"\"\n    \n    index = np.random.randint(images.shape[0])\n    plt.figure()\n    plt.imshow(images[index])\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.title('Image #{} : '.format(index) + class_names[labels[index]])\n    plt.show()\n\n\n","b0a46728":"display_random_image(categories, test_data, test_target)","3781a852":"def print_mislabeled_images(class_names, test_images, test_labels, pred_labels):\n    \"\"\"\n        Print 25 examples of mislabeled images by the classifier, e.g when test_labels != pred_labels\n    \"\"\"\n    BOO = (test_labels == pred_labels)\n    mislabeled_indices = np.where(BOO == 0)\n    mislabeled_images = test_images[mislabeled_indices]\n    mislabeled_labels = pred_labels[mislabeled_indices]\n\n    title = \"Some examples of mislabeled images by the classifier:\"\n    display_examples(class_names,  mislabeled_images, mislabeled_labels)\n","9cf8e18a":"print_mislabeled_images(categories, test_data, test_target, pred_labels)","f283c408":"# Face Mask Detector (CNN - Keras)\n\nHello, I hope you are having a great day.\n\nIn this notebook, I will try the process of implementing CNN with Keras in order to classify images.\n\n   1. Firstly, we'll import usefull packages.\n   2. Then, we'll load the data, before visualize and preprocess it.\n   3. We'll try a simple CNN model and then we will evaluate its performances.","1d7cd381":"Creating two folders to split the images with masks and no masks","6954c34f":"\n# Error analysis\n\nWe can try to understand on which kind of images the classifier has trouble.\n","64f4e0a7":"\n# Import Packages\n","75e67cb9":"Testing the model on a random image from the dataset","6b99bdca":"# Reporocessing \nthe dataset is given in one folder and the main parametre to split into two classes is the name\nthe images containing faces with face mask in named face_with_mask_X\nthe images containing faces with no mask in named face_without_mask_X\n\n","9be676a0":"# Convolutional Neural Network Architecture\n\n\n\n1.      Build the model,\n2.     Compile the model,\n3.     Train \/ fit the data to the model,\n4.   Evaluate the model on the testing set,\n5.    Carry out an error analysis of our model.\n\n"}}