{"cell_type":{"803a60b2":"code","1a0d9d9a":"code","7c8ee0c0":"code","39f0dbc4":"code","3fd46128":"code","7c6cd6a4":"code","e5fd78b7":"code","5f0c4653":"code","2cdda799":"code","f5504e2c":"code","ff9455ca":"code","b63cec79":"code","9c2dd7bd":"code","7c3009b2":"code","3be67bbd":"code","f31603d0":"code","363310a0":"code","e65106aa":"code","ac5fbb05":"code","aa18ad49":"code","32eea135":"code","214bbd72":"code","24af66f7":"code","81cf2f50":"code","b4e8e541":"code","e0687ee2":"code","0ed61309":"code","4a98c330":"code","edfe6fb0":"code","aa606e6b":"code","eff91368":"code","d67c40a4":"code","2088b501":"code","9dbacaea":"code","841c8422":"code","c8296547":"code","c9ce0980":"code","28adf3f6":"code","21b48ad0":"code","872e581a":"code","d2c2b563":"code","637e7cbc":"code","173b6530":"code","69a6bb69":"code","6d73be06":"code","b09460c1":"code","7a654488":"code","b49f10c4":"code","98098a40":"code","7796bc42":"code","4061330b":"code","ebb7cb57":"code","3a6dd672":"code","2b8d6ed6":"code","f71a144d":"code","88c181c0":"code","e76d103a":"code","c0a41b3d":"code","43a2309d":"code","0c4a26ec":"code","b1a070ca":"code","9556a00e":"code","89f6b503":"code","a7c50546":"code","bcc35979":"code","e051c9e6":"code","14c30045":"code","4f1144a5":"code","80969888":"code","dc4bf514":"code","e7275de6":"code","b1c18fd2":"code","0e877b7c":"code","bd8a860f":"code","a27c4aec":"code","a8c75673":"code","0cf174f1":"code","c1bff5c4":"code","aa6d4f6a":"code","7ea45c7a":"code","ab7eaeb5":"code","e00585e3":"markdown","296d53ab":"markdown","7ef138d1":"markdown","9415a795":"markdown","638416a3":"markdown","773a254b":"markdown","6096d55c":"markdown","bf509a31":"markdown","90981a4c":"markdown","7d8fd3a7":"markdown","ec7a0514":"markdown","ccccbfa6":"markdown","6ed02d5f":"markdown","e7da424d":"markdown","2bb39240":"markdown","7090a64e":"markdown","4478f2e2":"markdown","b55eea87":"markdown","ac4f656e":"markdown","91e60a71":"markdown"},"source":{"803a60b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a0d9d9a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom matplotlib import rcParams\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nimport xgboost as xgb","7c8ee0c0":"sns.set(style='darkgrid')","39f0dbc4":"train=pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ntest=pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","3fd46128":"pd.pandas.set_option('display.max_columns',None)","7c6cd6a4":"train.head()","e5fd78b7":"test.head()","5f0c4653":"train.info()","2cdda799":"train.shape","f5504e2c":"test.shape","ff9455ca":"train.isna().sum()","b63cec79":"test.isna().sum()","9c2dd7bd":"train=train.drop(['New_Price'],axis=1)\ntest=test.drop(['New_Price'],axis=1)","7c3009b2":"train['Name'].unique()","3be67bbd":"print(len(train['Name'].unique()))","f31603d0":"train['Name'].value_counts()","363310a0":"for i in range(train.shape[0]):\n    train.at[i, 'Manufacturing_Name'] = train['Name'][i].split()[0]","e65106aa":"train['Manufacturing_Name'].unique()","ac5fbb05":"train=train.drop(['Name'],axis=1)\ntrain.head()","aa18ad49":"train.groupby('Manufacturing_Name')['Unnamed: 0'].count()","32eea135":"for i in range(test.shape[0]):\n    test.at[i, 'Manufacturing_Name'] = test['Name'][i].split()[0]\n    \ntest=test.drop(['Name'],axis=1)\ntest.head()","214bbd72":"train['Mileage']=train['Mileage'].str.extract(r'(\\d+\\.\\d+)').astype(float)","24af66f7":"train.groupby('Mileage')['Unnamed: 0'].count()","81cf2f50":"train['Mileage'][train['Mileage']==0.0]=np.nan","b4e8e541":"train['Mileage']=train['Mileage'].fillna(train['Mileage'].mode()[0])","e0687ee2":"train.isna().sum()","0ed61309":"test['Mileage']=test['Mileage'].str.extract(r'(\\d+\\.\\d+)').astype(float)\ntest.groupby('Mileage')['Unnamed: 0'].count()","4a98c330":"train['Mileage'][train['Mileage']==0.0]=np.nan\ntrain['Mileage']=train['Mileage'].fillna(train['Mileage'].mode()[0])","edfe6fb0":"train.groupby('Engine')['Unnamed: 0'].count()","aa606e6b":"train['Engine']=train['Engine'].str.extract(r'(\\d+)').astype(float)","eff91368":"train['Engine']=train['Engine'].fillna(train['Engine'].mode()[0])","d67c40a4":"test.groupby('Engine')['Unnamed: 0'].count()","2088b501":"test['Engine']=test['Engine'].str.extract(r'(\\d+)').astype(float)\ntest['Engine']=test['Engine'].fillna(test['Engine'].mode()[0])","9dbacaea":"test.isna().sum()","841c8422":"train.groupby('Power')['Unnamed: 0'].count()","c8296547":"train['Power']=train['Power'].str.extract(r'(\\d+\\.\\d+)').astype(float)\ntrain['Power']=train['Power'].fillna(train['Power'].mode()[0])","c9ce0980":"test['Power']=test['Power'].str.extract(r'(\\d+\\.\\d+)').astype(float)\ntest['Power']=test['Power'].fillna(test['Power'].mode()[0])","28adf3f6":"train.groupby('Seats')['Unnamed: 0'].count()","21b48ad0":"train['Seats'][train['Seats']==0.0]=np.nan\ntrain['Seats']=train['Seats'].fillna(train['Seats'].mode()[0])","872e581a":"train.groupby('Seats')['Unnamed: 0'].count()","d2c2b563":"test['Seats']=test['Seats'].fillna(test['Seats'].mode()[0])","637e7cbc":"train.isna().sum()","173b6530":"train.isna().sum()","69a6bb69":"plt.figure(figsize=(15,10))\nsns.heatmap(train.corr(),annot=True)","6d73be06":"plt.figure(figsize=(15,10))\nchart=sns.countplot(x='Location',data=train)\nchart.set_xticklabels(chart.get_xticklabels(),rotation=90)","b09460c1":"plt.figure(figsize=(15,10))\nsns.countplot(x='Year',data=train)","7a654488":"plt.figure(figsize=(10,6))\nsns.countplot(x='Fuel_Type',data=train)","b49f10c4":"plt.figure(figsize=(10,6))\nsns.countplot(x='Transmission',data=train)","98098a40":"plt.figure(figsize=(10,6))\nsns.countplot(x='Owner_Type',data=train)","7796bc42":"plt.figure(figsize=(10,6))\nsns.countplot(x='Seats',data=train)","4061330b":"plt.figure(figsize=(15,10))\nchart=sns.countplot(x='Manufacturing_Name',data=train)\nchart.set_xticklabels(chart.get_xticklabels(),rotation=90)","ebb7cb57":"px.histogram(x='Price',data_frame=train)","3a6dd672":"plt.figure(figsize=(15,10))\nsns.countplot(x='Owner_Type',hue='Fuel_Type',data=train)","2b8d6ed6":"plt.figure(figsize=(15,10))\nsns.countplot(x='Year',hue='Fuel_Type',data=train)","f71a144d":"plt.figure(figsize=(15,10))\nsns.countplot(x='Year',hue='Owner_Type',data=train)","88c181c0":"px.bar(data_frame=train,x='Manufacturing_Name',y='Price')","e76d103a":"train.head()","c0a41b3d":"train_Location=pd.get_dummies(train.Location,drop_first=True)\ntrain_Location.head(2)","43a2309d":"test_Location=pd.get_dummies(test.Location,drop_first=True)\ntest_Location.head(2)","0c4a26ec":"train['Fuel_Type'].value_counts()","b1a070ca":"test['Fuel_Type'].value_counts()","9556a00e":"train['Fuel_Type']=train['Fuel_Type'].replace({'Electric':'LPG'})","89f6b503":"train_Fuel_Type=pd.get_dummies(train.Fuel_Type,drop_first=True)\ntrain_Fuel_Type.head(2)","a7c50546":"test_Fuel_Type=pd.get_dummies(test.Fuel_Type,drop_first=True)\ntest_Fuel_Type.head(2)","bcc35979":"Trans={'Automatic':0,'Manual':1 }\ntrain['Transmission']=train['Transmission'].map(Trans)","e051c9e6":"Trans={'Automatic':0,'Manual':1 }\ntest['Transmission']=test['Transmission'].map(Trans)","14c30045":"own={'First':4, 'Second':3, 'Third':2, 'Fourth & Above':1 }\ntrain['Owner_Type']=train['Owner_Type'].map(own)","4f1144a5":"own={'First':4, 'Second':3, 'Third':2, 'Fourth & Above':1 }\ntest['Owner_Type']=test['Owner_Type'].map(own)","80969888":"train_Manuf=pd.get_dummies(train.Manufacturing_Name,drop_first=True)\ntrain_Manuf.head(2)","dc4bf514":"test_Manuf=pd.get_dummies(test.Manufacturing_Name,drop_first=True)\ntest_Manuf.head(2)","e7275de6":"train.head(2)","b1c18fd2":"train=pd.concat([train,train_Location,train_Fuel_Type,train_Manuf],axis=1)\ntrain=train.drop(['Unnamed: 0','Location','Fuel_Type','Manufacturing_Name'],axis=1)\ntrain.head(2)","0e877b7c":"test=pd.concat([test,test_Location,test_Fuel_Type,test_Manuf],axis=1)\ntest=test.drop(['Unnamed: 0','Location','Fuel_Type','Manufacturing_Name'],axis=1)\ntest.head(2)","bd8a860f":"X=train.drop(['Price'],axis=1)\ny=train['Price']","a27c4aec":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25, random_state=5)","a8c75673":"knr=KNeighborsRegressor(n_neighbors=2)\nknr.fit(X_train,y_train)\ny_pred=knr.predict(X_test)","0cf174f1":"score=r2_score(y_test,y_pred)\nscore","c1bff5c4":"regressor=RandomForestRegressor(n_estimators = 100, random_state = 15)\nregressor.fit(X_train,y_train)\ny_Pred=regressor.predict(X_test)","aa6d4f6a":"scores=r2_score(y_test,y_Pred)\nscores","7ea45c7a":"regressor1 = xgb.XGBRegressor(n_estimators=200,gamma=0,max_depth=4)\n\nregressor1.fit(X_train,y_train)\ny_Pred=regressor1.predict(X_test)","ab7eaeb5":"score1=r2_score(y_test,y_Pred)\nscore1","e00585e3":"### Here i used plotly. Plotly's Python graphing library makes interactive, publication-quality graphs.source:-https:\/\/plotly.com\/python\/\n### feel free to touch any where in the graphs for geeting more indepth information\n### there are 820 car b\/w the Price 3-3.99 lac which is highest Number","296d53ab":"## RandomForestRegressor","7ef138d1":"### now its perfect","9415a795":"### Maruti & Hyundai have highest num of cars in this dataset","638416a3":"### lets extract the company name from the Name column","773a254b":"#### similarly for test data set","6096d55c":"#### similarly for test dataset","bf509a31":"# Data Visualization","90981a4c":"## KNeighborsRegressor","7d8fd3a7":"### Lets handle missing values","ec7a0514":"### okk now its looks good\n#### now we can drop name column","ccccbfa6":"##### same steps for test dataset","6ed02d5f":"## Handling Categorical Features","e7da424d":"#### I think there is no car which give 0 kmpl mileage so we will just replace it with nan value","2bb39240":"## Importing Libraries","7090a64e":"#### wohhhhh! this is a lot of number","4478f2e2":"### Dropping unnecessary columns ","b55eea87":"### After 2011 there is a huge difference b\/w petrol & Disel cars \n### Disel cars > Petrol cars (which is not good)\n### One diesel vehicle causes pollution equivalent to 24 petrol vehicles or 40 CNG vehicles. source :- https:\/\/www.airveda.com\/blog\/Petrol-or-Diesel-Which-will-be-your-next-car","ac4f656e":"## XGBRegressor","91e60a71":"### As expected the number of CNG cars is very much less than disel and petrol cars "}}