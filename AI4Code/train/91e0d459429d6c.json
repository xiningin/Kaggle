{"cell_type":{"703e8454":"code","9501f4ba":"code","b505f6ec":"code","9dc19237":"code","cbf9326f":"code","91201a7b":"code","b86e8fd8":"code","00b8ade6":"code","98606162":"code","9066e04d":"code","7f2e3b03":"code","35d460c9":"code","0ee4c6b0":"code","ca64a45f":"code","c4914d1b":"code","8499e61b":"code","f688dcdc":"code","bc484df9":"code","a9c4656f":"code","4f6fbdbc":"code","e417b65b":"code","f40ef44f":"code","f3382543":"code","159cfe10":"code","5101289b":"code","f1c284fc":"code","615b3827":"code","ff22ee6e":"code","39a63991":"code","0a42e2ec":"code","4d17f23d":"code","fd415412":"code","e415f29f":"code","081ab07c":"markdown","6b458c01":"markdown"},"source":{"703e8454":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport re\nimport string\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9501f4ba":"train=pd.read_csv('..\/input\/google-quest-challenge\/train.csv')\ntest=pd.read_csv('..\/input\/google-quest-challenge\/test.csv')\nsample_submission=pd.read_csv('..\/input\/google-quest-challenge\/sample_submission.csv')","b505f6ec":"train.head()","9dc19237":"train.columns","cbf9326f":"test.columns","91201a7b":"sample_submission.columns","b86e8fd8":"train_col=test.columns[1:]\ntarget_col=sample_submission.columns[1:]","00b8ade6":"train[train_col].head()","98606162":"train[target_col].head()","9066e04d":"len(target_col)","7f2e3b03":"#distplot of train dataframe's target_col\nf, axes=plt.subplots(6,5, figsize=(20,20))\nax=axes.ravel()\n\nfor i, col in enumerate(target_col):\n    sns.distplot(train[col], ax=ax[i])","35d460c9":"#check the null_value of train, test dataframe\nprint(train.isnull().sum(),'\\n','-'*50)\nprint(test.isnull().sum())","0ee4c6b0":"#check the unique value in train, test dataframe\nfor i in train_col:\n    print(i,' : ', len(train[i].value_counts()))\nprint(\"-\"*30)\nfor i in train_col:\n    print(i,' : ', len(test[i].value_counts()))","ca64a45f":"print(np.shape(train)[0])\ntrain[train_col].head()","c4914d1b":"#in train_col,i think question_user_name, answer_user_name column is not useful so drop this columns\ntrain_col=[i for i in train_col if i not in ['question_user_name','answer_user_name']]","8499e61b":"train[train_col].head()","f688dcdc":"train['answer'][4]","bc484df9":"def lower(text):#lowercase translation\n    return text.lower()\n\ndef remove_number(text):#remove_number\n    new_text=re.sub('[0-9]+','',text)\n    return new_text\n\ndef remove_punctuation(text):#remove_punctuation\n    new_text=''.join(c for c in text if c not in string.punctuation)\n    return new_text\n\ndef remove_special_character(text):#remove special character\n    new_text=re.sub(r'https:\/\/','',text)\n    new_text=re.sub(r'http:\/\/','',new_text)\n    new_text=re.sub(r'\\n',' ',new_text)\n    return new_text","a9c4656f":"train_col","4f6fbdbc":"for i in ['question_title','question_body','answer']:\n    \n    train[i]=train[i].apply(lambda i:remove_special_character(i))\n    test[i]=test[i].apply(lambda i:remove_special_character(i))\n    \n    train[i]=train[i].apply(lambda i:lower(i))\n    test[i]=test[i].apply(lambda i:lower(i))\n    \n    train[i]=train[i].apply(lambda i:remove_number(i))\n    test[i]=test[i].apply(lambda i:remove_number(i))\n    \n    train[i]=train[i].apply(lambda i:remove_punctuation(i))\n    test[i]=test[i].apply(lambda i:remove_punctuation(i))","e417b65b":"train[train_col].head()","f40ef44f":"def remove_anoter_character(text):\n    new_text=re.sub('\/',' ',text)\n    new_text=re.sub('\\.',' ',new_text)\n    new_text=re.sub('-',' ',new_text)\n    return new_text\n\nfor i in ['question_user_page','answer_user_page','url','host']:\n    \n    train[i]=train[i].apply(lambda i:remove_special_character(i))\n    test[i]=test[i].apply(lambda i:remove_special_character(i))\n    \n    train[i]=train[i].apply(lambda i:remove_number(i))\n    test[i]=test[i].apply(lambda i:remove_number(i))\n    \n    train[i]=train[i].apply(lambda i:remove_anoter_character(i))\n    test[i]=test[i].apply(lambda i:remove_anoter_character(i))","f3382543":"train[train_col].head()","159cfe10":"#make tokenizing without category column\n\nfrom nltk.tokenize import word_tokenize\ndef tokenizer(text):\n    return word_tokenize(text)\n\nfor i in [col for col in train_col if col not in ['category']]:\n    train[i]=train[i].apply(lambda i:tokenizer(i))\n    test[i]=test[i].apply(lambda i:tokenizer(i))\n\ntrain[train_col].head()","5101289b":"#remove 'com', 'users' in user_pages, host columns\ndef remove_com_users(text):\n    new_text=[i for i in text if i not in ['com','users']]\n    return new_text\n\nfor i in ['question_user_page','answer_user_page','host']:\n    train[i]=train[i].apply(lambda i:remove_com_users(i))\n    test[i]=test[i].apply(lambda i:remove_com_users(i))\n\ntrain[train_col].head()","f1c284fc":"#remove stopword, normalization\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer, PorterStemmer\n\ndef remove_stopwords(text):#remove stopwords\n    new_text=[i for i in text if i not in stopwords.words('english')]\n    return new_text\n\ndef trans_Lemmatize(text):\n    return [WordNetLemmatizer().lemmatize(w) for w in text]\n\ndef trans_stem(text):\n    return [PorterStemmer().stem(w) for w in text]\n\n\nfor i in ['question_title','question_body','answer','url']:\n    train[i]=train[i].apply(lambda i:remove_stopwords(i))\n    test[i]=test[i].apply(lambda i:remove_stopwords(i))\n    \n    train[i]=train[i].apply(lambda i:trans_Lemmatize(i))\n    test[i]=test[i].apply(lambda i:trans_Lemmatize(i))\n    \ntrain[train_col].head()","615b3827":"#again join the list for CountVector\ndef join_list(text):\n    return ' '.join(text)\n\nfor i in [col for col in train_col if col not in ['category']]:\n    train[i]=train[i].apply(lambda i:join_list(i))\n    test[i]=test[i].apply(lambda i:join_list(i))\n    \ntrain[train_col].head()","ff22ee6e":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\n\nCT=ColumnTransformer([('onehotencoding', OneHotEncoder(), ['category']),\n                     ('dropout','drop',['question_title', 'question_body', 'question_user_page', 'answer', 'answer_user_page', 'url', 'host'])])\n\nCT.fit(train[train_col])\nX_train_category=CT.transform(train[train_col])\nX_test_category=CT.transform(test[train_col])\n\n\ncv=CountVectorizer(min_df=5)\n\nX_train_1=cv.fit_transform(train['question_title'])\nX_test_1=cv.transform(test['question_title'])\n\nX_train_2=cv.fit_transform(train['question_body'])\nX_test_2=cv.transform(test['question_body'])\n\nX_train_3=cv.fit_transform(train['question_user_page'])\nX_test_3=cv.transform(test['question_user_page'])\n\nX_train_4=cv.fit_transform(train['answer'])\nX_test_4=cv.transform(test['answer'])\n\nX_train_5=cv.fit_transform(train['answer_user_page'])\nX_test_5=cv.transform(test['answer_user_page'])\n\nX_train_6=cv.fit_transform(train['url'])\nX_test_6=cv.transform(test['url'])\n\nX_train_7=cv.fit_transform(train['host'])\nX_test_7=cv.transform(test['host'])","39a63991":"from scipy import sparse\n\nX_train=sparse.hstack((X_train_1,\n               X_train_2,\n               X_train_3,\n               X_train_4,\n               X_train_5,\n               X_train_6,\n               X_train_7,\n               X_train_category))\n\nX_test=sparse.hstack((X_test_1,\n               X_test_2,\n               X_test_3,\n               X_test_4,\n               X_test_5,\n               X_test_6,\n               X_test_7,\n               X_test_category))","0a42e2ec":"target_col","4d17f23d":"from sklearn.model_selection import GridSearchCV, KFold\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\n\nforest=RandomForestRegressor()\nforest.fit(X_train, train[target_col])","fd415412":"predict=forest.predict(X_test)\n\nv=np.shape(predict)[0]\nh=np.shape(predict)[1]\n\nfor i in range(v):\n    for j in range(h):\n        if predict[i][j]>=1:predict[i][j]=0.9999\n        elif predict[i][j]<=0:predict[i][j]=0.0001\n\nsub=pd.read_csv('..\/input\/google-quest-challenge\/sample_submission.csv')\nsub[target_col]=predict","e415f29f":"sub.to_csv('submission.csv', index=False)","081ab07c":"## At NLP, process this works\n* lowercase translation\n* remove number\n* remove punctuation\n* remove stopword\n* remove special character\n* normalization(stemming or lemmatization)","6b458c01":"* 'category' : OneHotEncoding\n* 'question_title', 'question_body', 'question_user_page', 'answer', 'answer_user_page', 'url', 'host' : CountVectorizer"}}