{"cell_type":{"21cfcc4a":"code","51725e7c":"code","c0b5bc4b":"code","4e4c7600":"code","29dc15d6":"code","87a6e5bd":"code","330890d3":"code","71217804":"code","a1189ca2":"code","568deea1":"code","dd7628a6":"code","193a58e6":"code","35a42283":"code","03bfc803":"markdown"},"source":{"21cfcc4a":"from tensorflow.python.client import device_lib\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split # sklearn, train_test_split\nimport matplotlib.pyplot as plt # matplotlib, plt\nfrom keras.utils.np_utils import to_categorical # categorical - one-hot-encoding\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n# CNN libraries\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Any results you write to the current directory are saved as output.","51725e7c":"print(os.listdir(\"..\/input\"))\ndirectory_train = \"..\/input\/Kannada-MNIST\/train.csv\"\ndirectory_test = \"..\/input\/Kannada-MNIST\/test.csv\"","c0b5bc4b":"test_data = pd.read_csv(directory_test)\ntest_data.head(10)","4e4c7600":"train_data = pd.read_csv(directory_train)\ntrain_data.head(10)","29dc15d6":"print('Test Shape:',test_data.shape)\nprint('Train Shape:',train_data.shape)","87a6e5bd":"y_train = train_data[\"label\"]\nx_train = train_data.drop(['label'],axis=1)\ny_train = to_categorical(y_train,num_classes=10)\n\nx_test = test_data.drop(['id'], axis=1)","330890d3":"print(y_train.shape[0])\nprint(x_train.shape[0])\nprint(test_data.shape[0])","71217804":"\nx_train \/= 255.0\nx_test \/= 255.0\nx_train = x_train.values.reshape(x_train.shape[0],28, 28,1)\nx_test = x_test.values.reshape(x_test.shape[0],28, 28,1)\n","a1189ca2":"def separating_data():\n    return train_test_split(x_train, \n                            y_train, \n                            test_size = 0.05,\n                            random_state = 42\n                           )\n\nx_train, x_validation, y_train, y_validation = train_test_split(x_train, \n                                                                y_train, \n                                                                test_size = 0.05,\n                                                                random_state = 42)","568deea1":"max_epochs = 2\nmodel = Sequential()\n\nactivations = ['relu', 'softmax'] \n\nmodel.add(Conv2D(filters = 32, \n                 kernel_size = (5,5),\n                 padding = 'Same', \n                 activation = activations[0], \n                 input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, \n                 kernel_size = (5,5),\n                 padding = 'Same', \n                 activation = activations[0]))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, \n                 kernel_size = (3,3),\n                 padding = 'Same', \n                 activation = activations[0]))\nmodel.add(Conv2D(filters = 64, \n                 kernel_size = (3,3),\n                 padding = 'Same', \n                 activation = activations[0]))\n\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = activations[0]))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = activations[1]))\n\nmodel.compile(loss='categorical_crossentropy', \n              optimizer='adam', \n              metrics=[\"accuracy\"])","dd7628a6":"model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","193a58e6":"generator = ImageDataGenerator()\nbatches = generator.flow(x_train, \n                         y_train, \n                         batch_size=32)\nbatches_value = generator.flow(x_validation, \n                               y_validation, \n                               batch_size=32)\n\nhistory = model.fit_generator(generator=batches, \n                              steps_per_epoch=batches.n, \n                              epochs=max_epochs, \n                              validation_data=batches_value, \n                              validation_steps=batches_value.n)","35a42283":"my_predictions = model.predict_classes(x_test)\nsubmission = pd.read_csv('..\/input\/Kannada-MNIST\/sample_submission.csv')\nsubmission['label'] = my_predictions\nsubmission.to_csv(\"submission.csv\",index=False)","03bfc803":"# Using CNN in Kannada Digits Resolution"}}