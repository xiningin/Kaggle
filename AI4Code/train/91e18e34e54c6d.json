{"cell_type":{"d3fee59e":"code","8c609af5":"code","713f9c33":"code","b2af6aad":"code","38925711":"code","a3e5cb2a":"code","f93a735a":"code","cd94ec7c":"code","0ddcb3f7":"code","737ecf78":"code","869790a6":"code","84c8e366":"code","7dd6047e":"code","ab3c6d6e":"code","a57a746e":"code","76dab202":"code","c0b91ec3":"code","f17c2503":"code","74c83723":"markdown","98cd62a2":"markdown","54af8e52":"markdown","1459b413":"markdown","07013f8f":"markdown","7902b043":"markdown","ab3178fd":"markdown","00e05af7":"markdown"},"source":{"d3fee59e":"import numpy as np \nimport pandas as pd\nfrom pandas import datetime\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.arima_model import ARMA\n\nfrom sklearn.metrics import mean_squared_error","8c609af5":"def parser(x):\n    return datetime.strptime(x, '%Y-%m-%d')\n\n# Load the dataset\ndf = pd.read_csv(\"..\/input\/amazon-stocks-lifetime-dataset\/AMZN.csv\", index_col=0, parse_dates=[0], date_parser=parser)","713f9c33":"# Show first 5 rows\ndf.head()","b2af6aad":"# Statistic summary of the dataset\ndf.describe()","38925711":"# Keep only 'Close' column\namzn = df.drop(['Open', 'High', 'Low', 'Adj Close', 'Volume'], axis=1)\namzn = amzn[amzn.index >= '2015-01-01']","a3e5cb2a":"plt.figure(figsize=(14, 5))\nplt.title('Amazon stock closing prices for last 5 years', fontsize=14)\nplt.plot(amzn.Close)","f93a735a":"Q1_2019_mean = amzn[(amzn.index >= '2019-01-01') & (amzn.index < '2019-03-31')].mean()\nQ1_2019_var  = amzn[(amzn.index >= '2019-01-01') & (amzn.index < '2019-03-31')].var()\nQ1_2017_mean = amzn[(amzn.index >= '2017-01-01') & (amzn.index < '2017-03-31')].mean()\nQ1_2017_var  = amzn[(amzn.index >= '2017-01-01') & (amzn.index < '2017-03-31')].var()\nQ4_2015_mean = amzn[(amzn.index >= '2015-10-01') & (amzn.index < '2015-12-31')].mean()\nQ4_2015_var  = amzn[(amzn.index >= '2015-10-01') & (amzn.index < '2015-12-31')].var()\n\nprint('2019 Quarter 1 closing price mean     : %.2f ' % (Q1_2019_mean))\nprint('2019 Quarter 1 closing price variance : %.2f ' % (Q1_2019_var))\nprint(\"---------------------------------------------- \")\nprint('2017 Quarter 1 closing price mean     : %.2f ' % (Q1_2017_mean))\nprint('2017 Quarter 1 closing price variance : %.2f ' % (Q1_2017_var))\nprint(\"---------------------------------------------- \")\nprint('2015 Quarter 4 closing price mean     : %.2f ' % (Q4_2015_mean))\nprint('2015 Quarter 4 closing price variance : %.2f ' % (Q4_2015_var))","cd94ec7c":"plot_acf(amzn, lags=40)\nplt.show()","0ddcb3f7":"# Calculate the differnce of a element compared with a prevous row element\namzn_diff = amzn.diff(periods=1)\n# Drop rows with NAN value. First row element will have NAN value because there is no previous element for calculating the differnce.\namzn_diff = amzn_diff.dropna()\n# Display first five rows\namzn_diff.head()","737ecf78":"plt.figure(figsize=(14,5))\nplt.title(\"Amazon closing prices with differencing\/integrated order of 1\",fontsize=14)\nplt.plot(amzn_diff)","869790a6":"plot_acf(amzn_diff, lags=40)\nplt.show()","84c8e366":"X = amzn.values\nsize = int(len(X) * 0.70)  # 70 % \n# Training set\ntrain = X[:size]\n# testing set\ntest  = X[size:len(X)]\n\nprint(\"Total Samples    : %d\" % len(X))\nprint(\"Training Samples : %d\" % len(train))\nprint(\"Testing Samples  : %d\" % len(test))","7dd6047e":"# train autoregression\nar_model = AR(train)\nar_model_fit = ar_model.fit()\nprint(\"Lags : %s\" % ar_model_fit.k_ar)\nprint(\"Coefficients : %s\" % ar_model_fit.params)","ab3c6d6e":"# make predictions\npreds = ar_model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)\n\nprint(\"AR MModel Mean Squared Error : %.2f\" % mean_squared_error(test, preds))\nplt.figure(figsize=(14,5))\nplt.title(\"Autoregression Model\",fontsize=14)\nplt.plot(test)\nplt.plot(preds, color='r')","a57a746e":"stock_history = [x for x in train ]\npreds = []\n\n# order=(p,d,q)\np = 5   # AR parameters\/Lags\nq = 1    # Differencing order\nd = 0    # MA parameters\n\n#arima_model = ARIMA(train, order=(5,1,0))\n#arima_model_fit = arima_model.fit()\n\nfor i in range(len(test)):\n    # initiate ARIMA model\n    arima_model = ARIMA(stock_history, order=(p,q,d))\n    # fit ARIMA mode;\n    arima_model_fit = arima_model.fit()\n    # forecast price\n    output = arima_model_fit.forecast()[0]\n    # append the test price to a stock history data\n    stock_history.append(test[i])  \n    # append the forcasted price to a list\n    preds.append(output)","76dab202":"print(\"Mean Squared Error : %.2f\" % mean_squared_error(test, preds))\nplt.figure(figsize=(14,5))\nplt.title(\"Autoregressive Integrated Moving Average Model\",fontsize=14)\nplt.plot(test, label='Actual Stock Price')\nplt.plot(preds, color='r', label='Predicted Stock Price')\nplt.legend()","c0b91ec3":"train_test = np.concatenate((train, test))\nstock_history = [x for x in train_test]\npreds = []\nforecasting_days = 300\n\nfor i in range(forecasting_days):\n    # initiate ARIMA model\n    arima_model = ARIMA(stock_history, order=(p,q,d))\n    # fit ARIMA mode;\n    arima_model_fit = arima_model.fit()\n    # forecast price\n    output = arima_model_fit.forecast()[0]\n    # append the forecasted price to a stock history data\n    stock_history.append(output)  \n    # append the forcasted price to a prediction list\n    preds.append(output)","f17c2503":"start = len(train_test)\nend = len(train_test) + int(forecasting_days)\nhistory = pd.Series(stock_history)\n\nplt.figure(figsize=(14,5))\nplt.title(\"ARIMA Forecasting for Next 300 Days\",fontsize=14)\nplt.plot(history[0:start], label='Actual Stock Price')\nplt.plot(history[start:end], color='r', label='Forecasted Stock Price')\nplt.legend()","74c83723":"**Statistical properties such as the mean and variance is not constant over a time hence it is a non-stationary series.**","98cd62a2":"# Stationary Series ?","54af8e52":"# Autoregression Model","1459b413":"# Convert series into Stationary series.","07013f8f":"# Forecasting Stock Prices for next 300 days","7902b043":"**Plot the autocorrelation function. The ACF value decreases to zero quickly for stationary series.**","ab3178fd":"# Autoregressive Integrated Moving Average ARIMA(p,d,q) Model","00e05af7":"**Plot the autocorrelation function (ACF). The ACF value decreases very slowely for non-stationary series.**"}}