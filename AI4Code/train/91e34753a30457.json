{"cell_type":{"00cf5e48":"code","a7cbf638":"code","07120f50":"code","d842a265":"code","8c4febe5":"code","9d5ed5ed":"code","6b414931":"code","e24df44c":"code","ea428b4c":"code","4846ea62":"code","ca253d70":"code","84f77c04":"code","1a048a9d":"code","f19de0de":"code","32b15211":"code","d91aa0c7":"code","a92969a3":"code","bd5e50ff":"code","f8509bde":"markdown","c70831d5":"markdown","3602d4a6":"markdown","8b55099b":"markdown","b5aa1bda":"markdown","742f6321":"markdown","51553c3b":"markdown","d35f70bc":"markdown","903b9ea1":"markdown","505ab791":"markdown","8a95e09e":"markdown","ed5fc9cf":"markdown"},"source":{"00cf5e48":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7cbf638":"import os\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom matplotlib.image import imread\n%matplotlib inline\n\n# tensorflow libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, Model\nfrom keras.layers import Flatten, InputLayer, Dense, Conv2D, MaxPooling2D, Dropout\nfrom keras import optimizers\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.inception_v3 import InceptionV3\n","07120f50":"sample_submission= pd.read_csv(\"\/kaggle\/input\/cassava-leaf-disease-classification\/sample_submission.csv\")\ntrain_df= pd.read_csv(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv\")\nclass_labels= pd.read_json(\"\/kaggle\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\", orient=\"index\")\n\n# class_labels = class_labels.values.flatten().tolist()","d842a265":"train_df.head()","8c4febe5":"base_dir= \"\/kaggle\/input\/cassava-leaf-disease-classification\"\ntrain_img_dir=  \"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/\"\n\nprint(\"training images:\\n\", os.listdir(train_img_dir)[:5])\nprint(\"\\n Number of training images :\", len(os.listdir(train_img_dir)))","9d5ed5ed":"print(class_labels)","6b414931":"print(\"Number of healthy leaves images :\" , train_df[train_df[\"label\"] == 4].shape[0])\nprint(\"Number of diseased leaves images :\", train_df[train_df[\"label\"] != 4].shape[0])","e24df44c":"nrows = 4\nncols = 4\n\npic_index = 0 \n\nfig = plt.gcf()\nfig.set_size_inches(ncols*4, nrows*4)\n\npic_index+=8\n\nimages = [os.path.join(train_img_dir, image) \n                for image in os.listdir(train_img_dir)[ pic_index-8:pic_index] ]\n\n\nfor i, image_path in enumerate(images):\n  \n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off')\n\n  img = mpimg.imread(image_path)\n  plt.imshow(img)\n\nplt.show()","ea428b4c":"image= imread(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/1235188286.jpg\")\nimage.shape","4846ea62":"train_df['label'] = train_df['label'].astype('string')\n\n# generating traning set\nprint(\"training set :\")\ntrain_datagen= ImageDataGenerator(rescale=1\/255, zoom_range=0.3, rotation_range=50,\n                                   width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, \n                                   horizontal_flip=True, fill_mode='nearest', validation_split = 0.2)\n\ntrain_data= train_datagen.flow_from_dataframe(train_df,\n                                              train_img_dir,\n                                              target_size = (300, 300),\n                                              class_mode = \"categorical\",\n                                              batch_size = 20,\n                                              x_col = \"image_id\", y_col = \"label\",\n                                              shuffle = True, subset = \"training\")\n\n\n# generating validation set\nprint(\"\\nvalidation set :\")\nval_datagen= ImageDataGenerator(rescale=1\/255, validation_split = 0.2)\n\nval_data= val_datagen.flow_from_dataframe(train_df,\n                                          train_img_dir,\n                                          target_size = (300, 300),\n                                          class_mode = \"categorical\",\n                                          batch_size = 20,\n                                          x_col = \"image_id\", y_col = \"label\",\n                                          shuffle = False, subset = \"validation\")","ca253d70":"from keras.applications import InceptionResNetV2\n\n# with include_top= False we are not using fully connected layer of the Inception_resnet model, instead we\n# will create our own Fully Connected and Output Layer according to our training data\ninception_resnet= InceptionResNetV2(input_shape= (300, 300,3), include_top= False, \n                       weights=\"..\/input\/keras-pretrained-models\/inception_resnet_v2_weights_tf_dim_ordering_tf_kernels_notop.h5\")\n\n\n# Since we are creating our own fully connected layer we need output of the last inception model layer and flatten them\nlast_output= inception_resnet.layers[-1].output\n\n# Flattening the last output\nlast_output= Flatten()(last_output)\n\n# pretrained model\ninception_model= Model(inception_resnet.input, last_output)","84f77c04":"inception_model.summary()","1a048a9d":"from keras import optimizers\n\nx= Dense(units= 512, activation= \"relu\")(last_output)\nx= Dropout(0.2)(x)\n\nx= Dense(units= 128, activation= \"relu\")(x)\nx= Dropout(0.2)(x)\n\nx= Dense(units= 5, activation= \"softmax\")(x)\n\n# final model\nmodel= Model(inception_model.input, x)\n\nmodel.compile(loss= \"categorical_crossentropy\", optimizer=optimizers.RMSprop(lr=1e-4), metrics=[\"accuracy\"])\nmodel.summary()","f19de0de":"# Since the layers of Inception_resnet model are already trained, we don't want them to be trained again. \n# So we will freeze them\nfor layer in inception_model.layers:\n    layer.trainable= False\n\n# fitting only Top layers     \nhistory= model.fit(train_data, epochs=20,\n                   steps_per_epoch= train_data.samples\/\/train_data.batch_size,\n                   validation_data= val_data,\n                   validation_steps= val_data.samples\/\/val_data.batch_size,\n                   batch_size= 20, verbose= 2)  ","32b15211":"history.history.keys()","d91aa0c7":"epochs= range(len(history.history[\"accuracy\"]))\n# accuracy plot\nplt.plot(epochs, history.history[\"accuracy\"])\nplt.plot(epochs, history.history[\"val_accuracy\"])\nplt.xlabel(\"epoch\")\nplt.ylabel(\"accuracy\")\nplt.title(\"Model Accuracy\")\nplt.legend([\"train\", \"validation\"])\nplt.show()\n\n# loss plot\nplt.plot(epochs, history.history[\"loss\"])\nplt.plot(epochs, history.history[\"val_loss\"])\nplt.xlabel(\"epoch\")\nplt.ylabel(\"loss\")\nplt.title(\"Model Loss\")\nplt.legend([\"train\", \"validation\"])\nplt.show()","a92969a3":"preds = []\nsample_submission = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\n\nfor image in sample_submission.image_id:\n    img = tf.keras.preprocessing.image.load_img('..\/input\/cassava-leaf-disease-classification\/test_images\/' + image)\n    img = tf.keras.preprocessing.image.img_to_array(img)\n    img = tf.keras.preprocessing.image.smart_resize(img, (300, 300))\n    img = tf.reshape(img, (-1, 300, 300, 3))\n    prediction = model.predict(img\/255)\n    preds.append(np.argmax(prediction))\n\nsubmission = pd.DataFrame({'image_id': sample_submission.image_id, 'label': preds})\nsubmission.to_csv('submission.csv', index=False)        ","bd5e50ff":"submission","f8509bde":"#### *Classes to which these training images belong to*","c70831d5":"#### *Let's define image directories*","3602d4a6":"### Creating Top Layers","8b55099b":"\n#### *Let's find out the total number of Diseased and Healthy images*","b5aa1bda":"# Inception ResnetV2 Model","742f6321":"# Model Submission","51553c3b":"## Reading Data","d35f70bc":"### Model Fitting","903b9ea1":"### Data Augmentation","505ab791":"## Import Libraries","8a95e09e":"#### *Now let's take a look at a few pictures of what the diseased and healthy cells look like.*","ed5fc9cf":"### Model Evaluation"}}