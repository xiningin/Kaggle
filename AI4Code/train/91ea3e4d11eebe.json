{"cell_type":{"cbe7be22":"code","b1f2c4e8":"code","2116737c":"code","4dbb8012":"code","4b66cf52":"code","fbe59aed":"markdown"},"source":{"cbe7be22":"#PyPI has a wraper for the api: https:\/\/pypi.org\/project\/altmetric\/\n#quite pip install\n!pip -q install 'altmetric'\nfrom altmetric import Altmetric\na = Altmetric()","b1f2c4e8":"#Load the metadata file that was the output of notebook 1\n#https:\/\/www.kaggle.com\/dannellyz\/cord-19-metadata-enrichment-1-x\n#Found at URL: https:\/\/www.kaggle.com\/dannellyz\/cord19-metadata-enrichment\nimport pandas as pd\nimport numpy as np\nbase_file_path = \"\/kaggle\/input\/cord19-metadata-enrichment\/\"\nmetadata_v2 = pd.read_csv(base_file_path + \"metadata_v2.csv\")\n\n#Split the data in order to run batch API requests\n#This is incase the conneciton to the API breaks\nmetadata_batches = np.array_split(metadata_v2,500)","2116737c":"from tqdm.notebook import tqdm\nimport glob\nimport uuid\n\n#Setup the funciton calls to the API\ndef altmetric_doi(doi):\n    return a.doi(doi)\ndef altmetric_pmid(pmid):\n    return a.pmid(pmid)\n\n#Main funciton to query the altmetric service\ndef altmetric_query(journal):\n    function_type_dict = {\"doi\": altmetric_doi,\n                        \"pmid\": altmetric_pmid}\n    #Get query type\n    #If doi present start with that\n    if pd.notnull(journal.doi):\n        query_type = \"doi\"\n        journal_id = str(journal.doi)\n    #Try pmid next\n    elif pd.notnull(journal.pubmed_id): \n        query_type = \"pmid\"\n        journal_id = str(journal.pubmed_id)\n    #Skip if neither id present\n    else:\n        return {}\n    \n    #Run query based on ids present\n    response = function_type_dict[query_type](journal_id)\n    if response:\n        response[\"query_type\"] = query_type\n        return response\n    #If empty fill in the info that is available\n    else:\n        return {\"doi\":str(journal.doi), \"pmid\":str(journal.pubmed_id)}\n    \ndef batch_altmetric(metadata_batch):\n    return metadata_batch.apply(altmetric_query, axis=1)\n\n#Only run for two branches jsut to show funcitonality\n#Running for all takes about 2 hours\n#Already processed data is available in the Cord 19 Metadata Enrichment Dataset\n#Found at URL: https:\/\/www.kaggle.com\/dannellyz\/cord19-metadata-enrichment\ndef make_batches(batch_folder):\n    for batch in tqdm(metadata_batches[:2]):\n        #Unique File Name\n        unique_id = str(uuid.uuid4())\n        batch_df = pd.DataFrame(list(batch_altmetric(batch)))\n        batch_df.to_csv(batch_folder + \"batch-\"+unique_id+\".csv\")\n\nmake_batches(\"altmetric_data\")","4dbb8012":"#Code to load the batches\ndef load_batches(batch_folder):\n    all_batches = glob.glob(batch_folder + \"\/*.csv\")\n    batch_df_list = []\n    for filename in tqdm_notebook(all_batches):\n        batch_df = pd.read_csv(filename, header=0, index_col=0)\n        batch_df_list.append(batch_df)\n    if len(batch_df_list) == 0:\n        return pd.DataFrame()\n    return pd.concat(batch_df_list, axis=0, ignore_index=True, sort=False)","4b66cf52":"#Read Altmetric data\naltmetric_metadata = pd.read_csv(base_file_path + \"altmetric_metadata.csv\", index_col=False)\n#Available Data\nval_counts = pd.DataFrame(altmetric_metadata.notna().sum(axis=0), columns=[\"present_count\"])\nval_counts[\"pct_avail_altmetric\"] = val_counts[\"present_count\"] \/ len(altmetric_metadata)\nval_counts[\"pct_avail_all_data\"] = val_counts[\"present_count\"] \/ len(metadata_v2)\nval_counts[val_counts[\"present_count\"] > 0].sort_values(by=\"present_count\", ascending=False)","fbe59aed":"# Get enriching information from Altmetric\n\nThis notebook will take the IDs data  captured in the [first notebook](https:\/\/www.kaggle.com\/dannellyz\/cord-19-metadata-enrichment-1-x) and query the Altmetric API in order to provide enriching information for the journals.\n\n[<img src=\"https:\/\/staticaltmetric.s3.amazonaws.com\/uploads\/2015\/10\/dark-logo-for-site.png\">](https:\/\/www.altmetric.com\/)\n>Altmetrics data is provided by Altmetric.com, a research metrics company who track and collect the online conversations around millions of scholarly outputs. Altmetric continually monitors a variety of non-traditional sources to provide real-time updates on new mentions and shares of individual research outputs, which are collated and presented to users via the Altmetric details pages and badge visualisations. Each research output that Altmetric finds attention for is also given a score; a weighted count of the online attention it has received. Further information about how the Altmetric Attention Score is calculated is available here."}}