{"cell_type":{"e2d77956":"code","e31d584d":"code","fc4cae68":"code","96c691dc":"code","e9517eea":"code","8f8c9104":"code","e2a7ffe7":"code","ba540093":"code","2831c7c2":"code","e8a9227f":"code","7c86f55b":"code","07b681aa":"code","3162914b":"code","d784a311":"code","fdc248e8":"code","3ed632b5":"code","fcba5491":"code","6c8b6fa3":"code","c0613c63":"code","1f828424":"code","e24e4a4a":"code","9cbdaa8e":"code","edeb3647":"code","71803027":"code","f3d7f753":"code","a55b33b5":"code","218f83dd":"code","71c0feab":"code","218688da":"code","404484fb":"code","97c52b4c":"code","a3b6b96a":"code","f1d2dd0c":"code","7fe79cf1":"code","71ed0c8e":"code","052af8f8":"code","8c788578":"code","1e9f279e":"code","9cf02966":"code","3dac427e":"code","cfcb2396":"code","2e63e9e5":"code","7bbf43b7":"code","6fbd53a0":"code","841860a0":"code","bf5e8463":"code","a401be39":"code","db39e463":"code","c2bfa408":"markdown","a0a13052":"markdown","9edb97d3":"markdown","b9c68de7":"markdown","6e579ada":"markdown","b64ca0f6":"markdown","df1914f9":"markdown"},"source":{"e2d77956":"%matplotlib inline","e31d584d":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","fc4cae68":"img1 = mpimg.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/10008.jpg')\nprint(img1)","96c691dc":"imgplot = plt.imshow(img1)","e9517eea":"img2 = mpimg.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/10495.jpg')\nprint(img2)","8f8c9104":"imgplot = plt.imshow(img2)","e2a7ffe7":"#Importing Image data into Numpy arrays\nimg3 = mpimg.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/1599.jpg')\nprint(img3)","ba540093":"#Plotting numpy array as images\nimgplot = plt.imshow(img3)","2831c7c2":"#Importing Image data into Numpy arrays\nimg4 = mpimg.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/12168.jpg')\nprint(img4)","e8a9227f":"#Plotting numpy array as images\nimgplot = plt.imshow(img4)","7c86f55b":"#Importing Image data into Numpy arrays\nimg5 = mpimg.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/12172.jpg')\nprint(img5)","07b681aa":"imgplot = plt.imshow(img5)","3162914b":"#Applying pseudocolor schemes to image plots\nlum_img1 = img1[:, :, 0]\nplt.imshow(lum_img1)","d784a311":"#Applying pseudocolor schemes to image plots\nlum_img2 = img2[:, :, 0]\nplt.imshow(lum_img2)","fdc248e8":"#Applying pseudocolor schemes to image plots\nlum_img5 = img5[:, :, 0]\nplt.imshow(lum_img5)","3ed632b5":"plt.imshow(lum_img2, cmap=\"hot\")","fcba5491":"imgplot = plt.imshow(lum_img1)\nimgplot.set_cmap('nipy_spectral')","6c8b6fa3":"imgplot = plt.imshow(lum_img5)\nimgplot.set_cmap('nipy_spectral')","c0613c63":"#Color Scale reference\nimgplot = plt.imshow(lum_img5)\nplt.colorbar()","1f828424":"#Color Scale reference\nimgplot = plt.imshow(lum_img2)\nplt.colorbar()","e24e4a4a":"#Examining a specific data range\nplt.hist(lum_img5.ravel(), bins=256, range=(0.0, 1.0), fc='k', ec='k')","9cbdaa8e":"from PIL import Image\nim = Image.open(\"..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/10717.jpg\")","edeb3647":" print(im.format, im.size, im.mode)","71803027":"plt.imshow(im)","f3d7f753":"#Scaling\nimport numpy as np\nimport cv2 as cv\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/1599.jpg')\nres = cv.resize(img,None,fx=2, fy=2, interpolation = cv.INTER_CUBIC)\n#OR\nheight, width = img.shape[:2]\nres = cv.resize(img,(2*width, 2*height), interpolation = cv.INTER_CUBIC)\nres","a55b33b5":"plt.imshow(res)","218f83dd":"#Rotation at 90 degree angle\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/val\/1636.jpg',0)\nrows,cols = img.shape\n# cols-1 and rows-1 are the coordinate limits.\nM = cv.getRotationMatrix2D(((cols-1)\/2.0,(rows-1)\/2.0),90,1)\ndst = cv.warpAffine(img,M,(cols,rows))\nplt.imshow(dst)\n","71c0feab":"#Affine Transformation\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/val\/11342.jpg')\nrows,cols,ch = img.shape\npts1 = np.float32([[50,50],[200,50],[50,200]])\npts2 = np.float32([[10,100],[200,50],[100,250]])\nM = cv.getAffineTransform(pts1,pts2)\ndst = cv.warpAffine(img,M,(cols,rows))\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()","218688da":"#Perspective Transformation\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11386.jpg')\nrows,cols,ch = img.shape\npts1 = np.float32([[56,65],[368,52],[28,387],[389,390]])\npts2 = np.float32([[0,0],[300,0],[0,300],[300,300]])\nM = cv.getPerspectiveTransform(pts1,pts2)\ndst = cv.warpPerspective(img,M,(300,300))\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()","404484fb":"#Perspective Transformation\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11239.jpg')\nrows,cols,ch = img.shape\npts1 = np.float32([[56,65],[368,52],[28,387],[389,390]])\npts2 = np.float32([[0,0],[300,0],[0,300],[300,300]])\nM = cv.getPerspectiveTransform(pts1,pts2)\ndst = cv.warpPerspective(img,M,(300,300))\nplt.subplot(121),plt.imshow(img),plt.title('Input')\nplt.subplot(122),plt.imshow(dst),plt.title('Output')\nplt.show()","97c52b4c":"#Simple Thresholding\nimport cv2 as cv\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11694.jpg',0)\nret,thresh1 = cv.threshold(img,127,255,cv.THRESH_BINARY)\nret,thresh2 = cv.threshold(img,127,255,cv.THRESH_BINARY_INV)\nret,thresh3 = cv.threshold(img,127,255,cv.THRESH_TRUNC)\nret,thresh4 = cv.threshold(img,127,255,cv.THRESH_TOZERO)\nret,thresh5 = cv.threshold(img,127,255,cv.THRESH_TOZERO_INV)\ntitles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']\nimages = [img, thresh1, thresh2, thresh3, thresh4, thresh5]\nfor i in range(6):\n    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')\n    plt.title(titles[i])\n    plt.xticks([]),plt.yticks([])\nplt.show()","a3b6b96a":"#Adaptive Thresholding\nimport cv2 as cv\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11383.jpg',0)\nimg = cv.medianBlur(img,5)\nret,th1 = cv.threshold(img,127,255,cv.THRESH_BINARY)\nth2 = cv.adaptiveThreshold(img,255,cv.ADAPTIVE_THRESH_MEAN_C,\\\n            cv.THRESH_BINARY,11,2)\nth3 = cv.adaptiveThreshold(img,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,\\\n            cv.THRESH_BINARY,11,2)\ntitles = ['Original Image', 'Global Thresholding (v = 127)',\n            'Adaptive Mean Thresholding', ' Adaptive Gaussian Thresholding']\nimages = [img, th1, th2, th3]\nfor i in range(4):\n    plt.subplot(2,2,i+1),plt.imshow(images[i],'gray')\n    plt.title(titles[i])\n    plt.xticks([]),plt.yticks([])\nplt.show()","f1d2dd0c":"#2D Convolution (Image Filtering)\nimport numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/10712.jpg')\nkernel = np.ones((5,5),np.float32)\/25\ndst = cv.filter2D(img,-1,kernel)\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(dst),plt.title('Averaging')\nplt.xticks([]), plt.yticks([])\nplt.show()","7fe79cf1":"#Averaging\nimport cv2 as cv\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11008.jpg')\nblur = cv.blur(img,(5,5))\nplt.subplot(121),plt.imshow(img),plt.title('Original')\nplt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(blur),plt.title('Blurred')\nplt.xticks([]), plt.yticks([])\nplt.show()","71ed0c8e":"#Gaussian Blurring\nblur = cv.GaussianBlur(img,(5,5),0)\nplt.imshow(blur)","052af8f8":"#median Blurring\nmedian = cv.medianBlur(img,5)\nplt.imshow(median)","8c788578":"blu = cv.bilateralFilter(img,9,75,75)\nplt.imshow(blu)","1e9f279e":"#Erosion\nimport cv2 as cv\nimport numpy as np\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/test\/10267.jpg',0)\nkernel = np.ones((5,5),np.uint8)\nerosion = cv.erode(img,kernel,iterations = 1)\nplt.imshow(erosion)","9cf02966":"#Dilation\ndilation = cv.dilate(img,kernel,iterations = 1)\nplt.imshow(dilation)","3dac427e":"#opening\nopening = cv.morphologyEx(img, cv.MORPH_OPEN, kernel)\nplt.imshow(opening)","cfcb2396":"#morphological gradient\ngradient = cv.morphologyEx(img, cv.MORPH_GRADIENT, kernel)\nplt.imshow(gradient)","2e63e9e5":"tophat = cv.morphologyEx(img, cv.MORPH_TOPHAT, kernel)\nplt.imshow(tophat)","7bbf43b7":"blackhat = cv.morphologyEx(img, cv.MORPH_BLACKHAT, kernel)\nplt.imshow(blackhat)","6fbd53a0":"import numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/test\/11245.jpg',0)\nlaplacian = cv.Laplacian(img,cv.CV_64F)\nsobelx = cv.Sobel(img,cv.CV_64F,1,0,ksize=5)\nsobely = cv.Sobel(img,cv.CV_64F,0,1,ksize=5)\nplt.subplot(2,2,1),plt.imshow(img,cmap = 'gray')\nplt.title('Original'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')\nplt.title('Laplacian'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,3),plt.imshow(sobelx,cmap = 'gray')\nplt.title('Sobel X'), plt.xticks([]), plt.yticks([])\nplt.subplot(2,2,4),plt.imshow(sobely,cmap = 'gray')\nplt.title('Sobel Y'), plt.xticks([]), plt.yticks([])\nplt.show()","841860a0":"import numpy as np\nimport cv2 as cv\nfrom matplotlib import pyplot as plt\nimg = cv.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11387.jpg',0)\nedges = cv.Canny(img,100,200)\nplt.subplot(121),plt.imshow(img,cmap = 'gray')\nplt.title('Original Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(edges,cmap = 'gray')\nplt.title('Edge Image'), plt.xticks([]), plt.yticks([])\nplt.show()","bf5e8463":"import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/10496.jpg')\n\ndst = cv2.fastNlMeansDenoisingColored(img,None,10,10,7,21)\n\nplt.subplot(121),plt.imshow(img)\nplt.subplot(122),plt.imshow(dst)\nplt.show()","a401be39":"import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11244.jpg')\n\ndst = cv2.fastNlMeansDenoisingColored(img,None,10,10,7,21)\n\nplt.subplot(121),plt.imshow(img)\nplt.subplot(122),plt.imshow(dst)\nplt.show()","db39e463":"import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('..\/input\/finding-railway-fasteners-in-image-data-prorail\/dataset_kaggle\/train\/11388.jpg')\n\ndst = cv2.fastNlMeansDenoisingColored(img,None,10,10,7,21)\n\nplt.subplot(121),plt.imshow(img)\nplt.subplot(122),plt.imshow(dst)\nplt.show()","c2bfa408":"# Smoothing Images\n**As in one-dimensional signals, images also can be filtered with various low-pass filters (LPF), high-pass filters (HPF), etc. LPF helps in removing noise, blurring images, etc. HPF filters help in finding edges in images.**","a0a13052":"# Morphological Transformations","9edb97d3":"# Thresholding in OpenCV\n**For every pixel, the same threshold value is applied. If the pixel value is smaller than the threshold, it is set to 0, otherwise it is set to a maximum value. The function cv.threshold is used to apply the thresholding. The first argument is the source image, which should be a grayscale image.**","b9c68de7":"> Image blurring is achieved by convolving the image with a low-pass filter kernel. It is useful for removing noise. It actually removes high frequency content (eg: noise, edges) from the image. So edges are blurred a little bit in this operation (there are also blurring techniques which don't blur the edges)","6e579ada":"# Image denoising","b64ca0f6":"# Geometric Transformation of Images in Opencv","df1914f9":"# Canny Edge Detection in OpenCV"}}