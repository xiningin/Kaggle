{"cell_type":{"62b1d3ec":"code","672aeeb0":"code","179b3189":"code","cfd7ce56":"code","3c2b5430":"code","919eee5d":"code","3721465f":"code","d9a5136c":"code","c0fde0d2":"code","91c291d1":"code","e41b71af":"code","28f83f0f":"code","f8ab5976":"code","4baf0900":"code","77890563":"code","1f35f1f2":"code","60925461":"code","9803b7d8":"code","2c389959":"code","37fd048d":"code","1fc0f047":"code","40ced942":"code","0a8d1dc7":"code","9e0517dc":"code","ed48de66":"markdown","b02c576c":"markdown","7c377106":"markdown","9396733d":"markdown"},"source":{"62b1d3ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","672aeeb0":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\nstyle.use('fivethirtyeight')\nfrom scipy import stats","179b3189":"train = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')\ntrain.head()\ncolumns = train.columns","cfd7ce56":"train.shape, test.shape","3c2b5430":"combi = pd.concat([train, test], sort = False, ignore_index=True)","919eee5d":"combi.tail()","3721465f":"num_col = [col for col in combi.columns if combi[col].dtype != 'object']\ncat_col = [col for col in combi.columns if combi[col].dtype == 'object']","d9a5136c":"nan_num = [col for col in num_col if combi[col].isnull().any()]\nnan_num","c0fde0d2":"combi['LotFrontage'].fillna(combi['LotFrontage'].mean(), inplace = True)\ncombi['MasVnrArea'].fillna(combi['MasVnrArea'].mean(), inplace = True)","91c291d1":"for col in nan_num:\n    if combi[col].isnull().any():\n        combi[col].fillna(0, inplace = True)","e41b71af":"for col in cat_col:\n    if combi[col].isnull().any():\n        combi[col].fillna('Missing', inplace = True)","28f83f0f":"combi[num_col].head()","f8ab5976":"for col in num_col:\n    combi[col] = np.log1p(combi[col])\n       \ncombi.head()","4baf0900":"train_hot = combi.iloc[:train.shape[0], 1:-1]\ny = combi.iloc[:train.shape[0], -1]\ntrain_hot.shape, y.shape\ntest_hot = combi.iloc[train.shape[0] : , 1:-1]","77890563":"from sklearn.preprocessing import OneHotEncoder\n\nmyOneHot = OneHotEncoder(handle_unknown= 'ignore', sparse=False)\n\ntrain_OneHot_cat_col = pd.DataFrame(myOneHot.fit_transform(train_hot[cat_col]))\ntest_OneHot_cat_col = pd.DataFrame(myOneHot.transform(test_hot[cat_col]))\n\n# add the index back\ntrain_OneHot_cat_col.index = train_hot.index\ntest_OneHot_cat_col.index = test_hot.index\n\n#remove the object columns \ntrain_hot.drop(cat_col, axis = 1, inplace = True)\ntest_hot.drop(cat_col, axis = 1, inplace = True)\n\n#add the onehot columns to the train, valid and test\ntrain_hot_encoded = pd.concat([train_hot, train_OneHot_cat_col], axis = 1)\ntest_hot_encoded = pd.concat([test_hot, test_OneHot_cat_col], axis = 1)","1f35f1f2":"train_hot_encoded.shape, test_hot_encoded.shape","60925461":"import pandas as pd\nfrom statistics import *\nfrom math import sqrt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression,Ridge, Lasso\nfrom sklearn.model_selection import cross_val_score\nimport matplotlib\n# %pylab inline","9803b7d8":"train_hot_encoded.head()","2c389959":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\n\nlin_reg = LinearRegression()\n\nscore = mean(np.sqrt((-cross_val_score(lin_reg, train_hot_encoded, y, scoring='neg_mean_squared_error', cv=10))))\nprint(score)\n\n\n# score = mean(sqrt(-cross_val_score(lin_reg, train_hot_encoded, y, scoring='neg_mean_squared_error', cv=10)))\n# print(score)\n","37fd048d":"alphas = np.logspace(-5, 2, 20)\nscores = []\n\nfor i in alphas:\n    model_ridge = Ridge(alpha = i)\n    score = mean(np.sqrt(-cross_val_score(model_ridge, train_hot_encoded, y, scoring='neg_mean_squared_error', cv=10 )))\n    scores.append(score)\n    \ndf = pd.DataFrame(list(zip(alphas, scores)), columns = ['alphas', 'scores'])\nmin_score = df['scores'].idxmin()\ndf.iloc[min_score, :]    ","1fc0f047":"alphas = np.logspace(-5, 2, 20)\nscores_lass = []\n\nfor i in alphas:\n    model_lass = Lasso(alpha = i)\n    score = mean(np.sqrt(-cross_val_score(model_lass, train_hot_encoded, y, scoring='neg_mean_squared_error', cv=10 )))\n    scores_lass.append(score)\n    \nmin(scores_lass)\n","40ced942":"df_lasso = pd.DataFrame(list(zip(alphas, scores_lass)), columns = ['alphas', 'scores_lass'])\nmin_score = df_lasso['scores_lass'].idxmin()\ndf_lasso.iloc[min_score, :][0]","0a8d1dc7":"model_final = Lasso(alpha = df_lasso.iloc[min_score, :][0])\nmodel_final.fit(train_hot_encoded, y)\nprediction = model_final.predict(test_hot_encoded)\nconverted_prediction = np.expm1(prediction)","9e0517dc":"submission2 = pd.DataFrame({\"Id\" : test['Id'],\n                           'SalePrice': converted_prediction}, index = None)\n\nsubmission2.to_csv('Submission2.csv')","ed48de66":"MasVnrArea does have a corelation of 0.5 with the Sales price of the house, so will not be dropping them. I will be filling the nan values with mean of MasVnrArea.","b02c576c":"One Hot imputing","7c377106":"> Since the Lasso Regression has the minimum score, we will pick it.","9396733d":"Baseline Run - Linear Regression, Ridge and Lasso"}}