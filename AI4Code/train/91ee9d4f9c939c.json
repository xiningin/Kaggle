{"cell_type":{"0206256b":"code","5b1af7ef":"code","03dc605e":"code","84be10f6":"code","3dadc356":"code","b7924fac":"code","d659c831":"code","119e1558":"code","27a99d15":"code","435d15d2":"markdown","0c2c9215":"markdown","8722c949":"markdown","dfa8f005":"markdown","6ddb831e":"markdown","7b27f922":"markdown","b497dbb6":"markdown","e7fcb617":"markdown","48885a65":"markdown","f2649094":"markdown"},"source":{"0206256b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom scipy.integrate import simps\nfrom numpy import trapz\nfrom numpy import mean\nfrom wordcloud import WordCloud\n%matplotlib inline\n\n\n# Keeps pandas from truncating output of df.head() too much.\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n# csv to DataFrame\ndata = pd.read_csv(\"\/kaggle\/input\/most-popular-programming-languages-since-2004\/Most Popular Programming Languages from 2004 to 2020.csv\")\ndata.head(1)","5b1af7ef":"data[\"Date\"] = pd.to_datetime(data[\"Date\"])\ndata.set_index(\"Date\", inplace = True)\ndata.head(1)","03dc605e":"# Moving average with a window of 10\ndata_mov = pd.DataFrame()\nfor i in data.columns:\n    data_mov[i] = data[i].rolling(window=10).mean()\n#remove first 9 rows which are NaN now\ndata_mov = data_mov.iloc[9:]\ndata_mov.head(1)","84be10f6":"data_mov['Python'].plot(kind=\"line\",figsize=(15,10),color='skyblue',linewidth=10)\ntitle = plt.title(\"Popularity over time: Python\",fontsize=22)\ntitle.set_position([.5, 1.009])\nplt.xlabel(\"Time\",fontsize=15,labelpad=20)\nplt.ylabel(\"Popularity\",fontsize=15, labelpad=20)\nplt.fill_between(x=data_mov.index.values,y1=data_mov['Python'].values,color='lightseagreen')\naxes = plt.gca()\naxes.set_ylim([0,35])\nplt.show()","3dadc356":"programming_languages = []\npopularity_mean = []\npopularity_simps = []\npopularity_trapz = []\n\nfor i in data.columns:\n    programming_languages.append(i)\n    popularity_mean.append(mean(data[i].values))\n    popularity_simps.append(simps(data[i].values))\n    popularity_trapz.append(trapz(data[i].values))\n\npopularity_list = list(zip(popularity_mean,popularity_simps,popularity_trapz))\npopularity_df = pd.DataFrame(popularity_list, columns=['Mean','Simpsons','Trapezoidal'],index=programming_languages)\npopularity_df.head(2)","b7924fac":"top_ten_mean = popularity_df.nlargest(10,'Mean')['Mean']\ntop_ten_simps = popularity_df.nlargest(10,'Simpsons')['Simpsons']\ntop_ten_trapz = popularity_df.nlargest(10,'Trapezoidal')['Trapezoidal']\nresults_list = [top_ten_mean,top_ten_simps,top_ten_trapz]","d659c831":"def wordclouds_tiled(n, df_list):\n    plt.figure(figsize=(12,12))\n    j = np.ceil(n\/3)\n    subtitles = [\"Mean\",\"Simpson's Rule\",\"Trapezoidal\"]\n    for t in range(n):\n        i=t+1\n        title = plt.subplot(j, 3, i).set_title(\"Top ten: \" + subtitles[t])\n        plt.plot()\n        title.set_position([.5, 1.1])\n        plt.imshow(WordCloud(background_color=\"white\",width=200,height=200,prefer_horizontal=1,colormap='Dark2').generate_from_frequencies(frequencies=df_list[t]))\n        plt.axis(\"off\")\n    plt.show()\n\nwordclouds_tiled(3,results_list)","119e1558":"top_ten_simps.sort_values(ascending=True).plot(kind=\"bar\",figsize=(12,5),color='lightseagreen',linewidth=10)\ntitle = plt.title(\"Top ten programming languages (since 2004)\",fontsize=22)\ntitle.set_position([.5, 1.009])\nplt.xticks(size=12,rotation=0, horizontalalignment=\"center\")\nplt.xlabel(\"Programming Language\",fontsize=15,labelpad=20)\nplt.ylabel(\"Popularity\",fontsize=15, labelpad=20)\nplt.show()","27a99d15":"top_tens = list(top_ten_simps.index)\n\ndata_mov[top_tens].plot(kind=\"line\",figsize=(11,8),linewidth=3.5,legend=None)\ntitle = plt.title(\"Programming language popularity over time\",fontsize=22)\ntitle.set_position([.5, 1.009])\n\nplt.xlabel(\"Time\",fontsize=17,labelpad=20)\nplt.ylabel(\"Popularity\",fontsize=17, labelpad=20)\naxes = plt.gca()\naxes.set_ylim([0,35])\naxes.set_xlim(['2005-04-01','2020-08-01'])\n\nfor squiggle, lang in zip(axes.lines, data_mov[top_tens].columns):\n    y_val = squiggle.get_ydata()[-1]\n    if lang == 'PHP':\n        axes.annotate(lang, xy=(1,y_val), xytext=(5,5), color=squiggle.get_color(), \n                xycoords = axes.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n    elif lang == 'Visual Basic':\n        axes.annotate(lang, xy=(1,y_val), xytext=(5,3), color=squiggle.get_color(), \n                xycoords = axes.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\n    else:\n        axes.annotate(lang, xy=(1,y_val), xytext=(5,0), color=squiggle.get_color(), \n                xycoords = axes.get_yaxis_transform(), textcoords=\"offset points\",\n                size=10, va=\"center\")\nplt.show()","435d15d2":"### Comparing Popularity Measures - Same top ten chosen\n\n* **Wordclouds:** Not really necessary, but more fun than just outputting top-ten lists for each popularity measure. Below we see each measure came up with the same top ten with similar scaling (Java, PHP, and Python stand out as winners); we'll stick to one measure (Simpson's) for the remainder of this notebook.","0c2c9215":"#### We'll try 3 overall popularity measures: Mean, Area under curve (Simpson's Rule), and Area under curve (Trapezoidal).\n\n* **Mean** total of each column \/ # of records\n* **Simpson's Rule:** approximation of integral, based on known area under a parabola\n* **Trapezoidal Rule:** approximation of integral, based on subdividing into multiple trapezoids with known areas\n\n* A new DataFrame (**popularity_df**) is created below with the results of each above computation for each programming language.","8722c949":"### Reset Index To Date - Easier plotting time series","dfa8f005":"### Imports and Data\n\n* Basics and a couple mathematical functions for summarizing the data later.","6ddb831e":"#### Filtering each measure for top ten programming languages...","7b27f922":"## Popularity over time: Python\n\n* Here we see the popularity of Python over time. We can think about overall popularity between 2004 and 2020 as a mean of the data in this range, but also we can find the area under the plotted line (shaded below) as a measure of overall popularity.\n* Python's trend looks like a wave building that will soon come into the frame and crash over the chart.","b497dbb6":"### The Data\n\n* We have records every month (2004-present) for popularity of each programming language. We can easily take a look at how popularity has changed over time with lineplots. We will plot the moving average for smoother line and more pleasing chart.","e7fcb617":"### Comparing Programming Language Popularity - Quantity Visualization\n\n* **Bar Chart:** It's very easy to see differences in quantity using bars. Below, we see Java has the overwhelming win.","48885a65":"# Quick Look: Top ten programming languages\n\n* **Visualization Focus:** What are the top ten programming languages since 2004? How can we measure and compare popularity between programming languages in the top ten?\n***","f2649094":"### Popularity Trends Over Time (since 2004) - Moving Average Plot\n\n* **Nice smooth lines:** Python showing incredible growth in recent years while other languages either only maintain or dwindle. "}}