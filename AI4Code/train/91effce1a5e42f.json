{"cell_type":{"4ab9de43":"code","e47aa2c1":"code","c880e7d0":"code","6359dc2b":"code","623ff181":"code","47e6a5bf":"code","077a691d":"code","0810b977":"code","c35f195c":"markdown","58ef45fd":"markdown","5a27233a":"markdown","47b728ba":"markdown","32822976":"markdown","77a8af6c":"markdown","6fb3a4c4":"markdown"},"source":{"4ab9de43":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\nfrom scipy.ndimage.filters import generic_filter\nfrom scipy.ndimage.measurements import find_objects, label\n","e47aa2c1":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_tasks = sorted(os.listdir(evaluation_path))","c880e7d0":"cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#EEEEEE', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow, 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\nplot_size=2\n# reusable list of tick for performance optimization\nmax_ticks = [x-0.5 for x in range(32)]\n\ndef plot_image(ax, matrix, title):\n    ax.imshow(matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)\n    ax.set_yticks(max_ticks[:1+matrix.shape[0]])\n    ax.set_xticks(max_ticks[:1+matrix.shape[1]])\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(title)\n\ndef plot_hist(ax, matrices, title):\n    matrices = [m.ravel() for m in matrices]\n    ax.hist(matrices, bins=max_ticks[:11])\n    ax.set_xticks(range(10))\n    ax.set_title(title)\n\ndef plot_hist_relative(ax, matrices, title):\n    matrices = [m.ravel() for m in matrices]\n    weights=[np.zeros_like(m) + 100. \/ m.size for m in matrices]\n    ax.hist(matrices, bins=max_ticks[:11], weights=weights)\n    ax.set_xticks(range(10))\n    ax.set_title(title)\n\ndef plot_task_item(plot_func, axis, prefix, index, item, same_plot = False, prediction_func = None, plot_out = True):\n    t_in, t_out, t_pred = np.array(item[\"input\"]), np.array(item[\"output\"]), None\n    if prediction_func is not None:\n        t_pred = prediction_func(t_in.copy())\n    if same_plot:\n        matrices = [t_in, t_out, t_pred] if t_pred is not None else [t_in, t_out]\n        plot_func(axis[index], matrices, f'{prefix}')\n    else:\n        plot_func(axis[0][index], t_in, f'{prefix} in')\n        plot_func(axis[1][index], t_out if plot_out else np.zeros(t_out.shape), f'{prefix} out')\n        if t_pred is not None:\n            plot_func(axis[2][index], t_pred, f'{prefix} pred')\n        \ndef plot_task(task, plot_func, vscale = 1., same_plot = False, prediction_func = None):\n    num_train = len(task[\"train\"])\n    num_test = len(task[\"test\"])\n    num_all = num_train + num_test\n    num_rows = 1 if same_plot else 2 if prediction_func is None else 3 \n    fig, axis = plt.subplots(num_rows, num_all, figsize=(num_all*plot_size,num_rows*vscale*plot_size), dpi=50)\n    \n    for index, item in enumerate(task[\"train\"]):\n        plot_task_item(plot_func, axis, f'Train-{index}', index, item, same_plot, prediction_func, True)\n        \n    for index, item in enumerate(task[\"test\"]):\n        plot_task_item(plot_func, axis, f'Test-{index}', num_train + index, item, same_plot, prediction_func, True)\n\n    plt.tight_layout()\n    plt.show()","6359dc2b":"indices = [\n    [1,2,2,3,3,3],\n    [0,1,0,2,1,0]\n]\nsize_vars = ['K','L','M','N']\n\ndef get_prop_ratio_info(target, ratio):\n    return target if ratio == 1. else f'{int(ratio)}*{target}' if int(ratio) == ratio else f'{ratio:.2f}*{target}'\n\ndef get_prop_divmod_info(target, quotient, reminder):\n    return f'{target}+{reminder}' if quotient == 1. else f'{int(quotient)}*{target}+{reminder}'\n\ndef get_prop_divmodinv_info(target, quotient, reminder):\n    return f'{target}-{reminder}' if quotient == 1. else f'({target}-{reminder})\/{int(quotient)}'\n\ndef get_prop_info(prop, variables):\n    n = prop.shape[1]\n    nn = n * (n-1) \/\/ 2\n    prop0 = prop[:, indices[0][:nn]]\n    prop1 = prop[:, indices[1][:nn]]\n\n    ratio = prop0 \/ prop1\n    quotient1, reminder1 = np.divmod(prop0, prop1)\n    quotient2, reminder2 = np.divmod(prop1, prop0)\n\n    same_ratio = np.all(ratio == ratio[0], axis=0)\n    same_divmod1 = np.all((quotient1 > 0) * (quotient1 == quotient1[0]) * (reminder1 == reminder1[0]), axis=0)\n    same_divmod2 = np.all((quotient2 > 0) * (quotient2 == quotient2[0]) * (reminder2 == reminder2[0]), axis=0)\n    same_prop = np.all(prop == prop[0], axis=0)\n\n    info = np.where(same_prop, prop[0], variables[:n])\n    for i in range(nn):\n        i0, i1 = indices[0][i], indices[1][i]\n        if same_prop[i0]:\n            continue\n        elif same_ratio[i]:\n            info[i0] = get_prop_ratio_info(info[i1], ratio[0][i])\n        elif same_divmod1[i]:\n            info[i0] = get_prop_divmod_info(info[i1], quotient1[0][i], reminder1[0][i])\n        elif same_divmod2[i]:\n            info[i0] = get_prop_divmodinv_info(info[i1], quotient2[0][i], reminder2[0][i])\n\n    factor = np.gcd.reduce(np.absolute(prop - prop[0]), axis=0)\n    reminder = prop[0] % np.maximum(factor, 1)\n\n    constraints = []\n    \n    expand = np.all(ratio >= 1, axis=0)\n    shrink = np.all(ratio <= 1, axis=0)\n    for i in range(nn):\n        i0, i1 = indices[0][i], indices[1][i]\n        if info[i0] == variables[i0] and info[i1] == variables[i1]:\n            if expand[i]:\n                constraints.append(f'{info[i1]} < {info[i0]}')\n            if shrink[i]:\n                constraints.append(f'{info[i1]} > {info[i0]}')\n\n    lower_variables = [v.lower() for v in variables]\n    for i0 in range(n):\n        if info[i0] == variables[i0] and factor[i0] > 1:\n            constraints.append(f'{info[i0]} = {factor[i0]}*{lower_variables[i0]}' + ('' if reminder[i0] == 0 else f'+{reminder[i0]}'))\n\n    return info, constraints","623ff181":"def load_task(task_index, task_name, base_path):\n    task_file = str(base_path \/ task_name)\n    \n    with open(task_file, 'r') as f:\n        task = json.load(f)\n        \n    print(task_index)\n    print(task_name)\n    return task\n    \ndef describe_task(task):\n    size_prop = np.array([[len(t[\"input\"][0]), len(t[\"input\"]), len(t[\"output\"][0]), len(t[\"output\"])] for t in task[\"train\"]])\n    info, constraints = get_prop_info(size_prop, size_vars)\n    print(f'Size pattern: {info[0]} x {info[1]} -> {info[2]} x {info[3]}')\n    if len(constraints):\n        constraints_str =  '; '.join(constraints)\n        print(f'Size constraints: {constraints_str}')","47e6a5bf":"w3 = np.ones([3,3])\nw3_cross = np.array([[0,1,0],[1,1,1],[0,1,0]])\n\ndef solver0(x):\n    x = np.kron(x, x != 0)\n    return x\n\ndef solver1(x):\n    x = np.where(x == 0, 4, x)\n    for i in range((x.size+1)\/\/2):\n        x = generic_filter(x, lambda y: y[2] if y[2] != 4 or all(y) else 0, footprint=w3_cross, mode='constant', cval=0)\n    return x\n\ndef solver2(x):\n    for i in range(1,x.shape[0]):\n        if np.all(x[:-i] == x[i:]):\n            x = x[:i]\n            break\n    x = np.tile(x, (30,30))[:9,:3]\n    x = np.where(x == 1, 2, x)\n    return x\n\ndef filter4(x):\n    x = x.reshape((5,5))\n    c = np.max(x[1:4,1:4])\n    return c if np.sum(x==c) == np.sum(x[1:4,1:4]==c) and np.sum(x==c) > 3 else 0\n\ndef solver4(x):\n    m, n = x.shape\n    i, j = np.unravel_index(np.argmax(generic_filter(x, filter4, size=5, mode='constant', cval=0)), x.shape)\n    for di in range(-1,2):\n        for dj in range(-1,2):\n            c = np.max(x[max(0,i+4*di-1):max(0,i+4*di+2),max(0,j+4*dj-1):max(0,j+4*dj+2)])\n            for k in range(1,5):\n                si, sj = 4*k*di, 4*k*dj\n                i_min, i_max = min(m, max(0,i+si-1)), min(m, max(0,i+si+2))\n                j_min, j_max = min(n, max(0,j+sj-1)), min(n, max(0,j+sj+2))\n                x[i_min:i_max,j_min:j_max] = np.where(x[i_min-si:i_max-si,j_min-sj:j_max-sj], c, 0)\n    return x\n\ndef solver5(x):\n    x = x[:,:3] & x[:,4:]\n    x = np.where(x == 1, 2, x)\n    return x\n\ndef solver6(x):\n    y = x.ravel()[:-1].reshape((-1,3))\n    y = np.max(y, axis=0)\n    x = np.tile(y, x.size)[:x.size].reshape(x.shape)\n    return x\n\ndef solver7(x):\n    m2,n2 = np.nonzero(x == 2)\n    m8,n8 = np.nonzero(x == 8)\n    if m2.min() > m8.max()+1:\n        x = np.split(x,(m8.max()+1,m2.min()), axis=0)\n        x = np.concatenate((x[0],x[2],x[1]), axis=0)\n    if m8.min() > m2.max():\n        x = np.split(x,(m2.max()+1,m8.min()), axis=0)\n        x = np.concatenate((x[1],x[0],x[2]), axis=0)\n    if n2.min() > n8.max()+1:\n        x = np.split(x,(n8.max()+1,n2.min()), axis=1)\n        x = np.concatenate((x[0],x[2],x[1]), axis=1)\n    if n8.min() > n2.max():\n        x = np.split(x,(n2.max()+1,n8.min()), axis=1)\n        x = np.concatenate((x[1],x[0],x[2]), axis=1)\n    return x\n\ndef filter8(x):\n    x = x.reshape((19,19))\n    if x[9,9]:\n        return x[9,9]\n    i1 = np.argmax(x[8::-1,9]>0)\n    i2 = np.argmax(x[10:,9]>0)\n    j1 = np.argmax(x[9,8::-1]>0)\n    j2 = np.argmax(x[9,10:]>0)\n    if x[8-i1,9] > 0 and x[8-i1,9] == x[10+i2,9]:\n        return x[8-i1,9]\n    if x[9,8-j1] > 0 and x[9,8-j1] == x[9,10+j2]:\n        return x[9,8-j1]\n    return 0\n\ndef solver8(x):\n    y = x[0::3,0::3]\n    y = generic_filter(y, filter8, size=19, mode='constant', cval=0)\n    x[0::3,0::3] = y\n    x[1::3,0::3] = y\n    x[0::3,1::3] = y\n    x[1::3,1::3] = y\n    return x\n\ndef solver9(x):\n    y = label(x, structure=w3)[0]\n    return y\n\ndef solver10(x):\n    y = np.array([[np.sum(x[4*i:4*i+3,4*j:4*j+3] > 0) for i in range(3)] for j in range(3)])\n    j, i = np.unravel_index(np.argmin(y), y.shape)\n    y = x[4*i:4*i+3,4*j:4*j+3]\n    y = np.kron(y, np.ones([4,4]))[:-1,:-1]\n    y[3::4,:] = x[3::4,:]\n    y[:,3::4] = x[:,3::4]\n    return y\n\ndef filter11(x):\n    n = np.sum(x[1::2]>0)\n    if n>1:\n        return np.max(x[n%2::2])\n    return x[12]\n\ndef solver11(x):\n    x = generic_filter(x, filter11, size=5, mode='constant', cval=0)\n    return x\n\ndef solver12(x):\n    a = 0 if x.shape[0] < x.shape[1] else 1 \n    y = np.max(x, axis=a)\n    z, = np.nonzero(y)\n    d = z[-1] - z[0]\n    for i in range(z.size):\n        y[z[i]::2*d] = y[z[i]]\n    y = np.tile(y, (x.shape[a], 1))\n    if a: y = y.T\n    return y\n\ndef solver13(x):\n    y = [y for y in find_objects(x) if y is not None and x[y].size != x.size][0]\n    return x[y]\n\nsolvers = [\n    solver0,\n    solver1,\n    solver2,\n    None,\n    solver4,\n    solver5,\n    solver6,\n    solver7,\n    solver8,\n    solver9,\n    solver10,\n    solver11,\n    solver12,\n    solver13,\n]\n\n# solvers = []\n\ndef default_solver(x):\n    y = label(x, structure=w3)[0]%10\n    return y\n\ndef get_solver(task, task_index):\n    return solvers[task_index] if task_index < len(solvers) else default_solver\n\ndef get_solver_eval(task, task_index):\n    return None","077a691d":"for task_index, task_name in enumerate(training_tasks[:]):\n    task = load_task(task_index, task_name, training_path)\n    describe_task(task)\n    solver = get_solver(task, task_index)\n    plot_task(task, plot_hist_relative, vscale = .5, same_plot=True)\n    plot_task(task, plot_image, prediction_func = solver)","0810b977":"for task_index, task_name in enumerate(evaluation_tasks[:]):\n    task = load_task(task_index, task_name, evaluation_path)\n    describe_task(task)\n    solver = get_solver_eval(task, task_index)\n    plot_task(task, plot_hist_relative, vscale = .5, same_plot=True)\n    plot_task(task, plot_image, prediction_func = solver)","c35f195c":"Define task solver functions","58ef45fd":"Define size analysis functions","5a27233a":"## training set","47b728ba":"Define common functions with tasks","32822976":"forked from: https:\/\/www.kaggle.com\/t88take\/check-the-purpose\n\nVersion 1:\n1. Added gridlines\n2. For each task, showing all the train pairs instead of only the first one\n3. Showing evaluation set also\n\nVersion 2: \n\nadded task index and filename (for easy lookup)\n\nforked from: https:\/\/www.kaggle.com\/boliu0\/visualizing-all-task-pairs-with-gridlines\n\nVersion 1:\n1. Merged plot function with one from https:\/\/www.kaggle.com\/nagiss\/manual-coding-for-the-first-10-tasks\n2. Added histogram plots, improved plotting functions\n\nVersion 2: \n\nAdded size pattern description\n\nVersion 3:\n\n1. Improved size pattern description\n2. Added size pattern constraints detection\n\nAdded reference to interesting approach: https:\/\/www.kaggle.com\/arsenynerinovsky\/cellular-automata-as-a-language-for-reasoning","77a8af6c":"Define plotting functions","6fb3a4c4":"## evaluation set"}}