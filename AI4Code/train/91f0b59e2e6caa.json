{"cell_type":{"19d5ab6b":"code","45dbc7d1":"markdown"},"source":{"19d5ab6b":"# first import the libraries and all \nimport matplotlib.pyplot as plt\nimport  numpy as np\nimport pandas as pd\n# y = \u03b20 + \u03b21 x + error # Yeah Dont freak out , b0 or b1 , notations may change , but the format and sum of it will be the same . Its just a basic simple math\n\ndef coeiff_data(xs,ys):  # where we find out the B1 and B0 \n    mean_x = np.mean(xs)\n    mean_y = np.mean(ys)\n    m = len(xs)\n    numer = 0\n    denom = 0\n    for i in range(m):  # we can use any other ways for calcuating the b1 or b0 by using loop , of you are familiar with loops and all .. (I was too) \n        numer += (xs[i] - mean_x) * (ys[i]-mean_y)\n        denom += (xs[i]- mean_x)**2   \n    b1 = numer \/ denom # B1\n    b0 = mean_y - (b1*mean_x) # B2\n    return b1,b0   # That's it , the main work is done ! rest is like flowing water ....\n\nxs = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # our x-axis \nys = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) # y-axis\n# try with other regression datasets also , like house prediction .\nb1,b0 = coeiff_data(xs,ys)\n\nx_pred = np.array([3]) # The value we want to precict from x , gives us the Y(axis)\ny_pred = b0 + (b1*x_pred) # The formula y^ = b0 + b1 + x\n\nm = len(xs)\n## thats it ! The work is done ! now all we have to do is plotting it for visualization and better grasp ...\n\nss_t = 0 # finding r2 is also simple , you find the error (the differnce between the actual values and our predicted values . for now it does nothing in our program, just for understanding)\nss_r = 0\nfor i in range(m):\n    y_predd = b0 + b1 * xs[i]\n    ss_t += (ys[i] - np.mean(ys))**2\n    ss_r += (ys[i] - y_predd)**2\nr2 = 1 - (ss_r\/ss_t)\nprint(f\"The r2 is : {r2}\")\nif r2 > 0.60 : print(\"Its a good r2 score \")\nprint(f\"The predcition  is : {y_pred}\")\n#regression_line\nreg_line = [(b1*i)+b0 for i in xs] # looping ... you can do it like for i in : then plotting reg_line inside it .....\n\n#plotting for  visualization\nplt.scatter(xs,ys,color=\"blue\",label=\"x axis and y axis\") #our data points\nplt.plot(xs,reg_line,color=\"pink\",label=\"regression line\") #reg_line\nplt.scatter(x_pred,y_pred,color=\"r\",marker=\"*\",s=150,label=\"the predicted\") #our predicted values\nplt.legend()\nplt.show()\n\n#Done , hope the way it represented to ou may find in a better way .... \n# Inspired by SentDex and Brandon Foltz ","45dbc7d1":"**Simple-_LinearRegression_From_Scratch**\n\n> Let's create a simple linear regression from Scratch , and how it works under the Hood (sklearn and all) . We will use simple notations to describe the word formula's (b1,b0,etc.) . After undertstanding sim.Linear regression ,I thought i should post it , and learn more about it . So lets go directly to the coding ..."}}