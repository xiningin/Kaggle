{"cell_type":{"2ed4f4a8":"code","5a22fcf3":"code","d9a82b3a":"code","71100344":"code","4ae21364":"code","d030a2dd":"code","1c1423fd":"code","2fd17cc1":"code","0bf9c418":"markdown","47fd5a44":"markdown"},"source":{"2ed4f4a8":"import sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nfrom timm import create_model\nfrom IPython.display import display\nimport gc\n\nfrom fastai.vision.all import *","5a22fcf3":"seed = 402\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed(seed)\ntorch.backends.cudnn.deterministic = True\ntorch.use_deterministic_algorithms = True","d9a82b3a":"class Data:\n    def __init__(self, data_path='..\/input\/petfinder-pawpularity-score\/', n_split=5):\n        self.batch_size = batch_size\n        self.img_size = img_size\n        \n        self.dataset_path = Path('..\/input\/petfinder-pawpularity-score\/')\n        train_val_df = self.preprocess_df(pd.read_csv(self.dataset_path\/'train.csv'), is_train=True)\n        self.test_df = self.preprocess_df(pd.read_csv(self.dataset_path\/'test.csv'), is_train=False)\n        self.train_val_df = self.get_split_df(train_val_df, n_split=n_split)\n        \n    def preprocess_df(self, df, is_train):\n        if is_train:\n            img_dirname = \"train\"\n            df['norm_score'] = df['Pawpularity']\/100\n        else:\n            img_dirname = \"test\"\n            \n        df['path'] = df['Id'].map(lambda x:str(self.dataset_path\/img_dirname\/x)+'.jpg')\n        df = df.drop(columns=['Id'])\n        df = df.sample(frac=1).reset_index(drop=True) #shuffle dataframe\n        return df\n    \n    def get_split_df(self, df, n_split=5):\n        from sklearn.model_selection import StratifiedKFold\n        \n        num_bins = int(np.floor(1+(3.3)*(np.log2(len(df)))))\n        print(num_bins)\n\n        df['bins'] = pd.cut(df['norm_score'], bins=num_bins, labels=False)\n        print()\n        display(df['bins'].hist())\n        plt.show()\n\n        df['fold'] = -1\n\n        strat_kfold = StratifiedKFold(n_splits=n_split, random_state=seed, shuffle=True)\n        for i, (_, train_index) in enumerate(strat_kfold.split(df.index, df['bins'])):\n            df.iloc[train_index, -1] = i\n\n        df['fold'] = df['fold'].astype('int')\n        df.fold.value_counts().plot.bar()\n        plt.show()\n        return df\n    \n    def get_dls(self, img_size, batch_size, fold):\n        train_df_f = self.train_val_df.copy()\n        train_df_f['is_valid'] = (train_df_f['fold'] == fold)\n\n        dls = ImageDataLoaders.from_df(train_df_f, #pass in train DataFrame\n                                       valid_col='is_valid', #\n                                       seed=seed, #seed\n                                       fn_col='path', # filename\/path is in the second column of the DataFrame\n                                       label_col='norm_score', # label is in the first column of the DataFrame\n                                       y_block=RegressionBlock, # The type of target\n                                       bs=batch_size, # pass in batch size\n                                       num_workers=2,\n                                       item_tfms=Resize(img_size), #pass in item_tfms\n                                       batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) #pass in batch_tfms\n        return dls","71100344":"def petfinder_rmse(input,target):\n    return 100*torch.sqrt(F.mse_loss(torch.sigmoid(input.flatten()), target))\n\ndef get_learner(data, batch_size, img_size, fold, model_name):\n    dls = data.get_dls(batch_size=batch_size, img_size=img_size, fold=fold)\n    print(\"\u7c7b\u522b\u4e3a%d\"%dls.c)\n    model = create_model(model_name, pretrained=True, num_classes=dls.c)\n    learn = Learner(dls, model, loss_func=BCEWithLogitsLossFlat(), metrics=petfinder_rmse).to_fp16()\n    return learn","4ae21364":"# if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n#     os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n# !cp '..\/input\/swin-transformer\/swin_large_patch4_window7_224_22kto1k.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/swin_large_patch4_window7_224_22kto1k.pth'","d030a2dd":"n_split=5\nimg_size = 384\nif img_size == 224:\n    model_name = 'swin_large_patch4_window7_224_in22k'\n    batch_size = 16\nelse:\n    model_name = 'swin_large_patch4_window12_384_in22k'\n    batch_size = 8\ndata = Data(n_split=n_split)\n\nall_preds = []\n\nfor fold in range(n_split):\n    print(f'Fold {fold} results')\n    learn = get_learner(data, batch_size, img_size, fold, model_name)\n    learn.fit_one_cycle(4, 2e-5, cbs=[SaveModelCallback(), EarlyStoppingCallback(monitor='petfinder_rmse', comp=np.less, patience=2)]) \n    learn.recorder.plot_loss()\n\n    learn = learn.to_fp32()\n    learn.save(f'model_fold_{fold}.pkl')\n    \n    # TTA\n    dls = data.get_dls(batch_size=batch_size, img_size=img_size, fold=fold)\n    test_dl = dls.test_dl(data.test_df)\n    preds, _ = learn.tta(dl=test_dl, n=5, beta=0)\n    all_preds.append(preds)\n    \n    del learn, dls, test_dl\n    torch.cuda.empty_cache()\n    gc.collect()","1c1423fd":"sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\npreds = np.median(np.stack(all_preds), axis=0)\nsample_df['Pawpularity'] = preds*100\nsample_df.to_csv('submission.csv',index=False)\ndisplay(pd.read_csv('submission.csv').head())","2fd17cc1":"# def test(model_path):\n    # path = '.\/models'\n    # learn1 = load_learner('model_fold_2.pkl')\n\n    # test_df = pd.read_csv(dataset_path\/'test.csv')\n    # test_df.head()\n\n    # test_df['Pawpularity'] = [1]*len(test_df)\n    # test_df['path'] = test_df['Id'].map(lambda x:str(dataset_path\/'test'\/x)+'.jpg')\n    # test_df = test_df.drop(columns=['Id'])\n    # train_df['norm_score'] = train_df['Pawpularity']\/100\n\n    # dls = ImageDataLoaders.from_df(train_df, #pass in train DataFrame\n    #                                valid_pct=0.2, #80-20 train-validation random split\n    #                                seed=999, #seed\n    #                                fn_col='path', #filename\/path is in the second column of the DataFrame\n    #                                label_col='norm_score', #label is in the first column of the DataFrame\n    #                                y_block=RegressionBlock, #The type of target\n    #                                bs=8,                                       #was32, #pass in batch size\n    #                                num_workers=8,\n    #                                item_tfms=Resize(224), #pass in item_tfms\n    #                                batch_tfms=setup_aug_tfms([Brightness(), Contrast(), Hue(), Saturation()])) \n    # test_dl = dls.test_dl(test_df)\n\n    # test_dl.show_batch()\n\n    # preds, _ = learn1.tta(dl=test_dl, n=5, beta=0)\n\n    # sample_df = pd.read_csv(dataset_path\/'sample_submission.csv')\n    # sample_df['Pawpularity'] = preds.float().numpy()*100\n    # sample_df.to_csv('submission.csv',index=False)\n\n    # pd.read_csv('submission.csv').head()","0bf9c418":"# 1 Data","47fd5a44":"# 2 Trainer"}}