{"cell_type":{"0ede39b6":"code","b4bbe932":"code","1d4a4c09":"code","558ca8e4":"code","a3a05a2f":"code","4575d136":"code","71d943f6":"code","b9bff05c":"code","19a000a6":"code","f240b6a1":"code","15b75c78":"code","896b2b0f":"code","f784dfcb":"code","12261869":"code","455bc173":"code","a3989cfa":"code","7837b176":"code","7b4f62d6":"code","d036822b":"markdown","54f5f624":"markdown","4480020a":"markdown","0eafec29":"markdown","e7fb9d37":"markdown"},"source":{"0ede39b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas.plotting import scatter_matrix\nfrom matplotlib import pyplot \nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier, ExtraTreesClassifier, AdaBoostClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import confusion_matrix\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4bbe932":"# Discovering the data\ndataset = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\nprint(dataset.head(10))","1d4a4c09":"# Generating statistical summary about the data\npd.set_option('precision', 3)\nprint('Number of Columns: '+str(len(dataset.columns)))\nprint('Number of rows: '+str(len(dataset)))\nprint(dataset.describe())","558ca8e4":"# Understand different features' types\nprint(dataset.dtypes)","a3a05a2f":"# Checking dataset balance \nprint(dataset.groupby(['RainTomorrow']).size())","4575d136":"# View attributes distributions\ndataset.hist()\npyplot.show()","71d943f6":"# Plot correlation matrix\ncorrelations = dataset.corr()\nfig = pyplot.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(correlations, vmin=-1, vmax=1)\nfig.colorbar(cax)\npyplot.show()","b9bff05c":"# Plot scatter plot matrix\nscatter_matrix(dataset)\npyplot.show()","19a000a6":"# Drop irrelevant columns: 'Date' and 'Location'\ndataset = dataset.drop(['Date', 'Location'], axis=1)\nprint(dataset.columns)","f240b6a1":"# Perform undersampling to balance dataset\nno_Yes = len(dataset[dataset['RainTomorrow'] == 'Yes'])\nno_No = len(dataset[dataset['RainTomorrow'] == 'No'])\nYes_indices = dataset[dataset.RainTomorrow == 'Yes'].index\nNo_indices = dataset[dataset.RainTomorrow == 'No'].index\nrandom_indices = np.random.choice(No_indices,no_Yes, replace=False)\nunder_sample_indices = np.concatenate([Yes_indices,random_indices])\nunder_sample = dataset.loc[under_sample_indices]\nprint(under_sample.groupby(['RainTomorrow']).size())","15b75c78":"# Fill missing values\ncategorical_features = under_sample[['WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow']]\nnumerical_features = under_sample.drop(['WindGustDir','WindDir9am','WindDir3pm','RainToday','RainTomorrow'], axis = 1)\nnumerical_imputer = SimpleImputer(strategy='mean')\ncategorical_imputer = SimpleImputer(strategy='most_frequent')\ncomplete_numerical = numerical_imputer.fit_transform(numerical_features)\ncomplete_categorical = categorical_imputer.fit_transform(categorical_features)\ncomplete_data = pd.concat([numerical_features,categorical_features], axis=1)","896b2b0f":"# Encode categorical attributes\ninputData = complete_data.to_numpy()\nencodedDataset = pd.get_dummies(pd.DataFrame(inputData))\nprint(encodedDataset.shape)","f784dfcb":"# Rescale attributes to have same scale between 0 and 1\ndata = encodedDataset.values\nX = data[:,0:4342]\nY = data[:,4342]\nfirstScaler = MinMaxScaler(feature_range=(0, 1))\nrescaledX = firstScaler.fit_transform(X)","12261869":"# Standardize attributes\nscaler = StandardScaler().fit(rescaledX)\nstandardX = scaler.transform(rescaledX)","455bc173":"# Performe PCA to reduce redundant features\npca = PCA(n_components=10)\npca.fit(standardX)\ntransformed = pca.transform(standardX)","a3989cfa":"test_size = 0.33\nseed = 7\nX_train, X_test, Y_train, Y_test = train_test_split(transformed, Y, test_size=test_size,\nrandom_state=seed)\n\ncart = DecisionTreeClassifier()\nnum_trees = 100\nmax_features = 3\nmodel = BaggingClassifier(base_estimator=cart, n_estimators=num_trees, random_state=seed)\nmodel.fit(X_train, Y_train)","7837b176":"result = model.score(X_test, Y_test)\nprint(result*100.0)","7b4f62d6":"conf_mat = confusion_matrix(y_true=Y_test, y_pred=model.predict(X_test))\nprint('Confusion matrix:\\n', conf_mat)\n\nfig = pyplot.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(conf_mat, cmap=pyplot.cm.Blues)\nfig.colorbar(cax)\npyplot.xlabel('Predicted')\npyplot.ylabel('Expected')\npyplot.show()","d036822b":"# **Data Visualization**","54f5f624":"# **Data Preparation**","4480020a":"# **Data Analysis**","0eafec29":"# **Model Training**","e7fb9d37":"# **Model Evaluation**"}}