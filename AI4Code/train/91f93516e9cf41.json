{"cell_type":{"d9acc86c":"code","96f4f167":"code","efe4a1ca":"code","d37ad121":"code","27939758":"code","b20eceaa":"code","5acf2b05":"code","5d6aebf1":"code","aa487a7e":"code","33e15a23":"code","a28ed682":"code","fb77d671":"code","e3161872":"code","e766c330":"code","9a4b23cd":"code","578d7846":"code","f580aa8b":"code","eb77bf7f":"code","62dca4f0":"code","f40876e5":"code","14933459":"code","a1697051":"code","2703af6a":"code","f2c6c0b2":"code","771822af":"code","4731fdb4":"code","f69c9896":"code","2235c886":"code","6b3f4c04":"code","8f2d1178":"code","b307de90":"code","b55491a0":"code","2d044764":"code","ae236233":"code","d7e702a5":"code","6f8c061b":"code","715df5a7":"code","c2e59dce":"code","e37b0443":"code","7a6bba55":"markdown","c1ff0d83":"markdown","74dde49f":"markdown","a95e375d":"markdown","c39d3034":"markdown","319bcaff":"markdown","97a10806":"markdown"},"source":{"d9acc86c":"# Importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error\nimport scipy.stats as stat\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import cross_val_score\nimport warnings\nwarnings.filterwarnings('ignore')","96f4f167":"# Reading the dataset\n\ndf = pd.read_csv('..\/input\/medical-insurance\/med-insurance.csv')\ndf.head()","efe4a1ca":"print('Shape of data {}'.format(df.shape))","d37ad121":"df.columns","27939758":"# Creating Weight status column for easy visualization.\n\ndf['weight_status']=['Underweight' if x<18.5 else 'Healthy' if x>18.5 and x<25 else 'Overweight' if x>25 and x<30 \n                     else 'Obese' for x in df['bmi']]","b20eceaa":"# Creating age interval column for easy visualization.\n\ndf['age_']=df['age'].replace((np.arange(18,30),np.arange(30,70)),('18-30','30-70'))","5acf2b05":"# Counts of categories in variables\n\nplt.figure(figsize=(24,14))\nplt.subplot(231)\nsns.countplot(df['sex'],palette=['r','c'])\nplt.title('sex Counts')\n\nplt.subplot(232)\nsns.countplot(df['age_'],palette=['g','b'])\nplt.title('Age Counts')\n\nplt.subplot(233)\nsns.countplot(df['smoker'],palette=['m','violet'])\nplt.title('Smoker Counts')\n\nplt.subplot(234)\nsns.countplot(df['region'])\nplt.title('Region Counts')\n\nplt.subplot(235)\nsns.countplot(df['children'])\nplt.title('children Counts')\n\nplt.subplot(236)\nsns.countplot(df['weight_status'])\nplt.title('weight_status Counts')\nplt.show()","5d6aebf1":"# Distribution of columns\n\nplt.figure(figsize=(24,14))\nplt.subplot(221)\nsns.distplot(df['age'],color='black')\nplt.title('Age Distribution',color='r')\n\nplt.subplot(222)\nsns.distplot(df['bmi'],color='y')\nplt.title('BMI Distribution',color='y')\n\nplt.subplot(223)\nsns.distplot(df['expenses'],color='g')\nplt.title('Expenses Distribution',color='g')\n\nplt.subplot(224)\nsns.distplot(df['children'],color='b')\nplt.title('Children Distribution',color='b')\nplt.show()","aa487a7e":"# Checking outliers\n\nplt.figure(figsize=(24,14))\nplt.subplot(221)\nsns.boxplot(df['age'],color='orange')\nplt.title('Checking outliers on age',color='orange')\n\nplt.subplot(222)\nsns.boxplot(df['bmi'],color='m')\nplt.title('Checking outliers on bmi',color='m')\n\nplt.subplot(223)\nsns.boxplot(df['children'],color='violet')\nplt.title('Checking outliers on children',color='violet')\n\nplt.subplot(224)\nsns.boxplot(df['expenses'],color='r')\nplt.title('Checking outliers on age',color='r')\nplt.show()","33e15a23":"df.head()","a28ed682":"# Creating expence range column for easy visualization.\n\ndf['expence_range']=['1,000 - 10,000' if x<=10000 else '10,001 - 20,000' if x>10000 and x<=20000 \n                     else '20,001 - 30,000' if x>20000 and x<=30000 else '30,001 - 40,000' if x>30000 and x<=40000 \n                    else '40,001 - 50,000' if x>40000 and x<=50000 else '50,000 +' \n                    for x in df['expenses']]","fb77d671":"\nplt.figure(figsize=(24,14))\nplt.subplot(231)\nsns.countplot(df['expence_range'],hue=df['age_'],order=['1,000 - 10,000','10,001 - 20,000','20,001 - 30,000','30,001 - 40,000',\n                                                        '40,001 - 50,000','50,000 +'],palette=['g','y'])\nplt.xticks(rotation=20)\n\nplt.subplot(232)\nsns.countplot(df['expence_range'],hue=df['region'],order=['1,000 - 10,000','10,001 - 20,000','20,001 - 30,000','30,001 - 40,000',\n                                                          '40,001 - 50,000','50,000 +'])\nplt.xticks(rotation=20)\n\nplt.subplot(233)\nsns.countplot(df['weight_status'],hue=df['age_'],order=['Underweight','Healthy','Overweight','Obese'],palette=['g','y'])\n\nplt.subplot(234)\nsns.countplot(df['smoker'],hue=df['sex'],palette=['pink','orange'])\n\nplt.subplot(235)\nsns.countplot(df['expence_range'],hue=df['sex'],order=['1,000 - 10,000','10,001 - 20,000','20,001 - 30,000','30,001 - 40,000',\n                                                       '40,001 - 50,000','50,000 +'],palette=['pink','orange'])\nplt.xticks(rotation=20)\n\nplt.subplot(236)\nsns.countplot(df['age_'],hue=df['sex'],palette=['pink','orange'])\nplt.show()","e3161872":"# Checking the corr\n\nsns.heatmap(df.corr())","e766c330":"df.head()","9a4b23cd":"df.drop(['age_','expence_range','weight_status'],axis=1,inplace=True)","578d7846":"df.select_dtypes('object').head()","f580aa8b":"# Converting object to int\n\ndf['sex']=df['sex'].replace(('male','female'),(2,1))\ndf['smoker']=df['smoker'].replace(('yes','no'),(2,1))\ndf['region']=df['sex'].replace(('northeast','northwest','southwest','southeast'),(1,2,3,4))","eb77bf7f":"df.head()","62dca4f0":"x = df.drop(['expenses'],axis=1)\ny = df['expenses']","f40876e5":"print('Shape of x data {}'.format(x.shape))\nprint('Shape of y data {}'.format(y.shape))","14933459":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=10)","a1697051":"print('Shape of xtrain {}'.format(xtrain.shape))\nprint('Shape of xtest {}'.format(xtest.shape))\nprint('Shape of ytrain {}'.format(ytrain.shape))\nprint('Shape of ytest {}'.format(ytest.shape))","2703af6a":"# Data Normalization\n\nst=StandardScaler()\nxtrain_scaled=st.fit_transform(xtrain)\nxtest_scaled=st.transform(xtest)","f2c6c0b2":"def linear_reg(xtrain_scaled,xtest_scaled,ytrain,ytest):\n    lr=LinearRegression()\n    lr.fit(xtrain_scaled,ytrain)\n    ypred=lr.predict(xtest_scaled)\n    score=r2_score(ytest,ypred)\n    rmse=np.sqrt(mean_squared_error(ytest,ypred))\n    print('***Linear Regression model***')\n    print('Score for Linear Regression model is {}'.format(score))\n    print('RMSE for Linear Regression model is {}'.format(rmse))","771822af":"def random_forest_regressor(xtrain_scaled,xtest_scaled,ytrain,ytest):\n    rf=RandomForestRegressor()\n    rf.fit(xtrain_scaled,ytrain)\n    ypred=(rf.predict(xtest_scaled))\n    score=r2_score(ytest,ypred)\n    rmse=np.sqrt(mean_squared_error(ytest,ypred))\n    print('***Random Forest Regressor Model***')\n    print('Score for Random Forest Regressor Model is {}'.format(score))\n    print('RMSE for Random Forest Regressor Model is {}'.format(rmse))","4731fdb4":"def gradient_boosting_regressor(xtrain_scaled,xtest_scaled,ytrain,ytest):\n    gb=GradientBoostingRegressor()\n    gb.fit(xtrain_scaled,ytrain)\n    ypred=(gb.predict(xtest_scaled))\n    score=r2_score(ytest,ypred)\n    rmse=np.sqrt(mean_squared_error(ytest,ypred))\n    print('***Gradient Boosting Regressor Model***')\n    print('Score for Gradient Boosting Regressor Model is {}'.format(score))\n    print('RMSE for Gradient Boosting Regressor Model is {}'.format(rmse))\n    return gb","f69c9896":"def model_compare(xtrain_scaled,xtest_scaled,ytrain,ytest):\n    linear_reg(xtrain_scaled,xtest_scaled,ytrain,ytest)\n    print('-'*100)\n    random_forest_regressor(xtrain_scaled,xtest_scaled,ytrain,ytest)\n    print('-'*100)\n    gradient_boosting_regressor(xtrain_scaled,xtest_scaled,ytrain,ytest)\n    print('-'*100)","2235c886":"model_compare(xtrain_scaled,xtest_scaled,ytrain,ytest)","6b3f4c04":"# From the above models Gradient boosting regressor model is best\n# Cross validation on Gradient boosting regressor\n\ngb=GradientBoostingRegressor()\ngb.fit(xtrain_scaled,ytrain)\nypred=(gb.predict(xtest_scaled))\nscore=r2_score(ytest,ypred)\nprint('Score for Gradient Boosting Regressor Model is {}'.format(score))\n\nscores=cross_val_score(gb,x,y,cv=5)\nprint(scores)\nprint(np.mean(scores))","8f2d1178":"# Gaussian transformation\n\ndef transform(data):\n    plt.figure(figsize=(16,6))\n    plt.subplot(121)\n    sns.distplot(data)\n    plt.subplot(122)\n    stat.probplot(data,plot=plt)","b307de90":"transform(y)","b55491a0":"transform(np.sqrt(y))","2d044764":"transform(np.cbrt(y))","ae236233":"transform(np.log(y))","d7e702a5":"boxcox,params=stat.boxcox(y)\ntransform(boxcox)","6f8c061b":"# From the above log transformation is best\nytrain_log=np.log(ytrain)\nytest_log=np.log(ytest)","715df5a7":"model_compare(xtrain_scaled,xtest_scaled,ytrain_log,ytest_log)","c2e59dce":"# From the above models Gradient boosting regressor model is best\n# Cross validation on Gradient boosting regressor\n\ngb2=GradientBoostingRegressor()\ngb2.fit(xtrain_scaled,ytrain_log)\nypred=(gb2.predict(xtest_scaled))\nscore=r2_score(ytest_log,ypred)\nprint('Score for Gradient Boosting Regressor Model is {}'.format(score))\n\nscores2=cross_val_score(gb2,x,y,cv=5)\nprint(scores2)\nprint(np.mean(scores2))","e37b0443":"print('Before model improvement the mean of cross_val_score is {}'.format(np.mean(scores)))\nprint('After model improvement the mean of cross_val_score is {}'.format(np.mean(scores2)))","7a6bba55":"# Feature Engineering","c1ff0d83":"# Machine Learning models","74dde49f":"# Multivariate Analysis","a95e375d":"# Bivariate Analysis","c39d3034":"# Univariate Analysis","319bcaff":"# Data Processing","97a10806":"# Model Improvement"}}