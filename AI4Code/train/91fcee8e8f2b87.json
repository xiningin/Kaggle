{"cell_type":{"fad0e0fb":"code","0cb76236":"code","f86f57e2":"code","a48160e1":"code","dcea5d2d":"code","5f06c967":"code","54523588":"code","52909121":"code","d931a314":"code","347d7834":"code","9f737fc3":"code","b2459b68":"code","60c0e57f":"code","dd0521ea":"code","58bbf5b3":"code","9ef440e5":"code","a1027e69":"code","e587e2cf":"code","cbec6d17":"code","fb6cf007":"code","ad9deee5":"code","fade2d09":"code","380c6cab":"code","59f782cf":"code","84719041":"code","04e66008":"code","47b4501f":"code","58592bbc":"code","c2618c6e":"code","2978f353":"code","3c225afa":"markdown","d8bf9e80":"markdown","d083dd8a":"markdown","2fc532b3":"markdown","8df3a5ae":"markdown","b0cc0a9a":"markdown","3a76783a":"markdown","eda1fea7":"markdown","e8a4e286":"markdown","e6aeb0cf":"markdown","e30de82a":"markdown","e3f8cd7a":"markdown","a5274062":"markdown","5ca56bf9":"markdown","6315f9bf":"markdown","fca55dc7":"markdown","4726cd78":"markdown","dc8e81e8":"markdown","9ca38861":"markdown","45a1b510":"markdown","2d8e4918":"markdown","d909574d":"markdown","bf8ae8ff":"markdown","6af9e024":"markdown","bc718229":"markdown","1b83a603":"markdown","e5447c33":"markdown","67b89c77":"markdown","ed16e557":"markdown","f8ebd52b":"markdown","4da653c6":"markdown","ec198872":"markdown"},"source":{"fad0e0fb":"import numpy as np, pandas as pd, seaborn as sns, matplotlib.pyplot as plt \nimport warnings, time, gc\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\n\ncolor = sns.color_palette(\"Set2\")\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\n\ntrain = pd.read_csv(\"..\/input\/train.csv\")","0cb76236":"import random\n\ndef generate_color():\n    color = \"#{:02x}{:02x}{:02x}\".format(*map(lambda x: random.randint(0, 255), range(3)))\n    return color","f86f57e2":"train.head()","a48160e1":"train.describe()","dcea5d2d":"groups = train[\"groupId\"].unique()\nmatches = train[\"matchId\"].unique()","5f06c967":"sample_match = train[train[\"matchId\"] == matches[0]]\nsample_match.head(10)","54523588":"sample_match_winner = sample_match[sample_match[\"winPlacePerc\"] == max(sample_match[\"winPlacePerc\"])]\nsample_match_winner","52909121":"solo_match = train[train[\"numGroups\"] == 100]","d931a314":"solo_match_id = solo_match[\"matchId\"].unique()\nprint(\"There are {} solo matches.\".format(len(solo_match_id)))","347d7834":"solo_winners = solo_match[solo_match[\"winPlacePerc\"] == 1.0]\nsolo_winners","9f737fc3":"trace = go.Scatter(x = solo_match[\"winPoints\"],\n                   y = solo_match[\"winPlacePerc\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Solo Match: Win Points v.s. Win Place Percentage\",\n              xaxis = dict(title = \"Win Points\"),\n              yaxis = dict(title = \"Win Place Percentage\"))\niplot(dict(data = [trace], layout = layout))","b2459b68":"temp = solo_match[solo_match[\"kills\"] == 0]\ntrace1 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"No Kills\")\n\ntemp = solo_match[(0 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 2)]\ntrace2 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"1-2 Kills\")\n\ntemp = solo_match[(2 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 5)]\ntrace3 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"3-5 Kills\")\n\ntemp = solo_match[(5 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 10)]\ntrace4 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"6-10 Kills\")\n\n\ntemp = solo_match[10 < solo_match[\"kills\"]]\ntrace5 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"More Than 10 Kills\")\nlayout = dict(title = \"Win Points v.s. Win Place Percentage (separated by kills)\",\n              xaxis = dict(title = \"Win Points\"),\n              yaxis = dict(title = \"Win Place Percentage\"))\niplot(dict(data = [trace1, trace2, trace3, trace4, trace5], layout = layout))","60c0e57f":"temp = solo_match[solo_match[\"killPlace\"] >= 75]\ntrace1 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"100th - 75th Player\")\n\ntemp = solo_match[(50 <= solo_match[\"killPlace\"]) & (solo_match[\"killPlace\"] < 75)]\ntrace2 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"74th - 50th Players\")\n\ntemp = solo_match[(25 <= solo_match[\"killPlace\"]) & (solo_match[\"killPlace\"] < 50)]\ntrace3 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"50th - 25th Player\")\n\ntemp = solo_match[(4 <= solo_match[\"killPlace\"]) & (solo_match[\"killPlace\"] < 25)]\ntrace4 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"25th - 4th Player\")\n\n\ntemp = solo_match[solo_match[\"killPlace\"] < 4]\ntrace5 = go.Scatter(x = temp[\"winPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"First 3 Player\")\nlayout = dict(title = \"Win Points v.s. Win Place Percentage (separated by kill place)\",\n              xaxis = dict(title = \"Win Points\"),\n              yaxis = dict(title = \"Win Place Percentage\"))\niplot(dict(data = [trace1, trace2, trace3, trace4, trace5], layout = layout))","dd0521ea":"trace = go.Scatter(x = solo_match[\"killPoints\"],\n                   y = solo_match[\"winPlacePerc\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Solo Match: Kill Points v.s. Win Place Percentage\",\n              xaxis = dict(title = \"Kill Points\"),\n              yaxis = dict(title = \"Win Place Percentage\"))\niplot(dict(data = [trace], layout = layout))","58bbf5b3":"temp = solo_match[solo_match[\"kills\"] == 0]\ntrace1 = go.Scatter(x = temp[\"killPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"No Kills\")\n\ntemp = solo_match[(0 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 2)]\ntrace2 = go.Scatter(x = temp[\"killPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"1-2 Kills\")\n\ntemp = solo_match[(2 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 5)]\ntrace3 = go.Scatter(x = temp[\"killPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"3-5 Kills\")\n\ntemp = solo_match[(5 < solo_match[\"kills\"]) & (solo_match[\"kills\"] <= 10)]\ntrace4 = go.Scatter(x = temp[\"killPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"6-10 Kills\")\n\n\ntemp = solo_match[10 < solo_match[\"kills\"]]\ntrace5 = go.Scatter(x = temp[\"killPoints\"],\n                    y = temp[\"winPlacePerc\"],\n                    mode = \"markers\",\n                    name = \"More Than 10 Kills\")\nlayout = dict(title = \"Kill Points v.s. Win Place Percentage (separated by kills)\",\n              xaxis = dict(title = \"Kill Points\"),\n              yaxis = dict(title = \"Win Place Percentage\"))\niplot(dict(data = [trace1, trace2, trace3, trace4, trace5], layout = layout))","9ef440e5":"trace = go.Scatter(x = solo_match[\"kills\"],\n                   y = solo_match[\"headshotKills\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Kills v.s. Headshot Kills\",\n              xaxis = dict(title = \"Num of Kills\"),\n              yaxis = dict(title = \"Num of Headshot Kills\"))\niplot(dict(data = [trace], layout = layout))","a1027e69":"trace = go.Scatter(x = solo_match[\"kills\"],\n                   y = solo_match[\"damageDealt\"],\n                   mode = \"markers\",\n                   marker = dict(color = \"red\"))\nlayout = dict(title = \"Kills v.s. Damage Dealt\",\n              xaxis = dict(title = \"Num of Kills\"),\n              yaxis = dict(title = \"Damage Dealt\"))\niplot(dict(data = [trace], layout = layout))","e587e2cf":"trace = go.Scatter(x = solo_match[\"kills\"],\n                   y = solo_match[\"weaponsAcquired\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Kills v.s. Weapons Acquired\",\n              xaxis = dict(title = \"Kills\"),\n              yaxis = dict(title = \"Weapons Acquired\"))\niplot(dict(data = [trace], layout = layout))","cbec6d17":"fig = tools.make_subplots(rows = 1, cols = 2, subplot_titles = [\"Boosts v.s. Kills\", \n                                                                \"Heals v.s. Kills\"])\n\ntrace1 = go.Scatter(x = solo_match[\"boosts\"],\n                    y = solo_match[\"kills\"],\n                    mode = \"markers\",\n                    marker = dict(color = \"blue\"))\ntrace2 = go.Scatter(x = solo_match[\"heals\"],\n                    y = solo_match[\"kills\"],\n                    mode = \"markers\",\n                    marker = dict(color = \"red\"))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig[\"layout\"][\"xaxis1\"].update(title = \"Num of Boost Items\")\nfig[\"layout\"][\"xaxis2\"].update(title = \"Num of Healing Items\")\nfig[\"layout\"][\"yaxis1\"].update(title = \"Kills\")\nfig[\"layout\"].update(height = 600, width = 800)\n\niplot(fig)","fb6cf007":"import plotly.figure_factory as ff\n\nhist1 = solo_match[\"swimDistance\"]\nhist2 = solo_match[\"walkDistance\"]\nhist_data = [hist1, hist2]\n\ngroup_labels = [\"Swim Distance\", \"Walk Distance\"]\nfig = ff.create_distplot(hist_data, group_labels, bin_size = 1000, curve_type = \"normal\")\nfig[\"layout\"].update(title = \"Walk\/Swim Distance Distplot\")\niplot(fig)","ad9deee5":"trace = go.Scatter(x = solo_match[\"boosts\"],\n                   y = solo_match[\"swimDistance\"] + solo_match[\"walkDistance\"],\n                   mode = \"markers\",\n                   marker = dict(color = \"orange\"))\nlayout = dict(title = \"Boosts v.s. Total Distance\",\n              xaxis = dict(title = \"Num of Boost Items\"),\n              yaxis = dict(title = \"Total Distance\"))\niplot(dict(data = [trace], layout = layout))","fade2d09":"trace = go.Scatter(x = solo_match[\"vehicleDestroys\"],\n                   y = solo_match[\"rideDistance\"],\n                   mode = \"markers\",\n                   marker = dict(color = \"black\"))\nlayout = dict(title = \"Vehicle Destroys v.s. Ride Distance\",\n              xaxis = dict(title = \"Vehicle Destroys\"),\n              yaxis = dict(title = \"Ride Distance\"))\niplot(dict(data = [trace], layout = layout))","380c6cab":"duo_match = train[(train[\"numGroups\"] == 50) & (train[\"maxPlace\"] == 50)]","59f782cf":"duo_match.head()","84719041":"duo_winners = duo_match[duo_match[\"winPlacePerc\"] == 1.0]\nsample_duo_winner = duo_winners[duo_winners[\"groupId\"] == min(duo_winners[\"groupId\"])]\nsample_duo_winner","04e66008":"avg_points = duo_match.groupby([\"groupId\", \"matchId\"])[[\"winPoints\", \"winPlacePerc\"]].mean()\ntrace = go.Scatter(x = avg_points[\"winPoints\"],\n                   y = avg_points[\"winPlacePerc\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Avg Win Points v.s. Win Place Percentage\",\n              xaxis = dict(title = \"Avg Win Points\"),\n              yaxis = dict(title = \"Win Place %\"))\niplot(dict(data = [trace], layout = layout))","47b4501f":"total_kills = duo_match.groupby([\"groupId\", \"matchId\"])[\"kills\"].sum()","58592bbc":"temp = pd.merge(avg_points, total_kills.to_frame(), on = [\"groupId\", \"matchId\"], how = \"left\")\ntrace = go.Scatter(x = temp[\"kills\"],\n                   y = temp[\"winPlacePerc\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Duo: Total Kills v.s. Win Place %\",\n              xaxis = dict(title = \"Total Kills\"),\n              yaxis = dict(title = \"Win Place %\"))\niplot(dict(data = [trace], layout = layout))","c2618c6e":"total_headshot = duo_match.groupby([\"groupId\", \"matchId\"])[\"headshotKills\"].sum()","2978f353":"temp = pd.merge(total_kills.to_frame(), total_headshot.to_frame(), on = [\"groupId\", \"matchId\"], how = \"left\")\ntrace = go.Scatter(x = temp[\"kills\"],\n                   y = temp[\"headshotKills\"],\n                   mode = \"markers\")\nlayout = dict(title = \"Duo: Num of Headshot Kills over Total Kills\")\niplot(dict(data = [trace], layout = layout))","3c225afa":"## Duo","d8bf9e80":"### Boosts v.s. Swim\/Walk Distance","d083dd8a":"#### A peak of solo winners","2fc532b3":"## To Be Continued...","8df3a5ae":"* Skilled playeres tend to aim on heads","b0cc0a9a":"## Solo","3a76783a":"### A Peak of a Winner","eda1fea7":"### Overview of Dataset","e8a4e286":"### Duo: Win Points v.s. Win Place Percentage","e6aeb0cf":"### Kills v.s. Headshot Kills","e30de82a":"* Killing more enemies don't obtain more win win points\n* Longer time stay in the battle field provide higher chance to win","e3f8cd7a":"* Teams have equal win rate but win points are vary","a5274062":"* Players who eliminate $0-5$ enemies get about $1,000$ kill points if no headshot kills","5ca56bf9":"### Killpoints v.s. Win Place Percentage","6315f9bf":"* Win points in duo mode are calculated in the same method in solo mode","fca55dc7":"### Duo: Kills v.s. Win Place Percentage","4726cd78":"In Solo mode\n* As players eliminate more enemies, they utilize more boost items\n* On the other hand, players that elimiate less enemies utilize more healing items","dc8e81e8":"### Boosts\/Heals v.s. Kills","9ca38861":"* Skilled players are good at aimming at head","45a1b510":"#### Sample Winner","2d8e4918":"* There are $3$ winner players helped enemies\n* Some winner players are not even an MVP","d909574d":"* Surprisingly, there are teams won the games without any enemy eliminations\n* More enemy killings increase the winning chance","bf8ae8ff":"* Without loss of generality, more kills give more damage dealt.","6af9e024":"## EDA\n\nThere are three modes in PUBG:\n* Solo (100 teams, each team has only one player)\n* Duo (50 teams, each team has two players)\n* Squad (less than 50 teams as each team has 2 to 4 players)\n\nWe will analyze this dataset in three separated sections (Solo, Duo, Squad) since different modes have different battle styles\/strategies.","bc718229":"### Kills v.s. Weapons Acquired","1b83a603":"* There are weapon-collectors\n* Skilled players acquire less weapons. We assume that they prefer some specific weapons","e5447c33":"### Ride Distance v.s. Vehicle Destroys","67b89c77":"#### A Peak of a Match","ed16e557":"### Win Points v.s. Win Place Percentage","f8ebd52b":"### Kills v.s. Damage Dealt","4da653c6":"* There are $1888732$ groups in the dataset\n* This dataset contains $47734$ matches ","ec198872":"* Surprisingly, there is no single vehible being destroyed by players in solo mode."}}