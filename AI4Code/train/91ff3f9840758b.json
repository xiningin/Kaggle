{"cell_type":{"df1ed03a":"code","b5d0eff6":"code","8a393c0d":"markdown"},"source":{"df1ed03a":"# change this!\nUSERNAME = 'jtrotman'","b5d0eff6":"%matplotlib inline\nimport gc, os, sys, time\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MaxNLocator\nfrom itertools import combinations\nfrom IPython.display import HTML, display\n\nCOLORS = dict(Public='blue', Private='red')\n\nIN_DIR = '..\/input'\n\nMEDALS = {\n    'gold':'&#129351;',\n    'silver':'&#129352;',\n    'bronze':'&#129353;',\n    1.:'&#129351;',\n    2.:'&#129352;',\n    3.:'&#129353;',\n}\n\ndef read_csv_filtered(csv, col, values):\n    dfs = [df.loc[df[col].isin(values)]\n           for df in pd.read_csv(f'{IN_DIR}\/{csv}', chunksize=100000, low_memory=False)]\n    return pd.concat(dfs, axis=0)\n\nusers = read_csv_filtered('Users.csv', 'UserName', {USERNAME})\nassert users.shape[0] == 1\nUSERID = users.iloc[0].Id\n\ntmemb = read_csv_filtered('TeamMemberships.csv', 'UserId', {USERID})\nteams = read_csv_filtered('Teams.csv', 'Id', tmemb.TeamId).set_index('Id')\n\ncomps = read_csv_filtered('Competitions.csv', 'Id', teams.CompetitionId).set_index('Id')\nidx = comps.EvaluationAlgorithmName.isnull()\ncomps.loc[idx, 'EvaluationAlgorithmName'] = comps.loc[idx, 'EvaluationAlgorithmAbbreviation']\ncomps['Year'] = pd.to_datetime(comps.DeadlineDate).dt.year\ncomps['RewardQuantity'].fillna('', inplace=True)\n\nsubs = read_csv_filtered('Submissions.csv', 'TeamId', tmemb.TeamId)\n\nasfloats = ['PublicScoreLeaderboardDisplay',\n            'PublicScoreFullPrecision',\n            'PrivateScoreLeaderboardDisplay',\n            'PrivateScoreFullPrecision',]\n\nsubs[asfloats] = subs[asfloats].astype(float)\n# subs.IsAfterDeadline.mean()\n\nsubs = subs.query('not IsAfterDeadline').copy()\nsubs['CompetitionId'] = subs.TeamId.map(teams.CompetitionId)\nsubs['SubmissionDate'] = pd.to_datetime(subs['SubmissionDate']).dt.date\n\nteams = teams.dropna(subset=['PublicLeaderboardSubmissionId', 'PrivateLeaderboardSubmissionId'])\n\n# key to define sort order competitions are displayed in: best results first\nc2key = teams.set_index('CompetitionId').apply(lambda r: f'{r.PrivateLeaderboardRank:4.0f} {r.name}', 1)\nsubs['Key'] = subs.CompetitionId.map(c2key.get)\n\ndef comp_id_for_field(value, field='Slug'):\n    idx = comps[field]==value\n    if idx.sum() < 1:\n        return -1\n    return comps.loc[idx].index[0]\n\n# replace mercari score 99 with nan\nidx = (subs.CompetitionId==comp_id_for_field('mercari-price-suggestion-challenge'))\nscols = ['PrivateScoreFullPrecision','PrivateScoreLeaderboardDisplay']\nsubs.loc[idx, scols] = subs.loc[idx, scols].replace({99.0:np.nan})\n\nFIGSIZE=(14, 6)\n\nfor comp, df in subs.groupby('Key'):\n    if df.shape[0] < 3:\n        continue\n    if df.PublicScoreFullPrecision.count() < 1:\n        continue\n    if df.PrivateScoreFullPrecision.count() < 1:\n        continue\n    \n    df = df.sort_values('Id').reset_index()\n    comp_id = df.iloc[0].CompetitionId\n    scores = (df.PublicScoreFullPrecision.dropna().tolist() +\n              df.PrivateScoreFullPrecision.dropna().tolist())\n    c = comps.loc[comp_id]\n    if c.EvaluationAlgorithmIsMax:\n        f = 'max'\n        top = eval(f)(scores)\n        bottom = np.quantile(scores, 0.05)\n    else:\n        f = 'min'\n        top = np.quantile(scores, 0.95)\n        bottom = eval(f)(scores)\n    \n    rg = (top - bottom)\n    top += rg \/ 20\n    bottom -= rg \/ 20\n    \n    xs = np.arange(df.shape[0])\n    yb = np.ones(df.shape[0])\n\n    team = teams.query(f'CompetitionId=={c.name}').iloc[0]\n    nusers = df.SubmittedUserId.nunique()\n    \n    display(HTML(f'<h1 id=\"{c.Slug}\">{c.Title}<\/h1>'))\n\n    display(HTML(f'Type: {c.HostSegmentTitle} &mdash; <i>{c.Subtitle}<\/i> &mdash; <a href=\"https:\/\/www.kaggle.com\/c\/{c.Slug}\/leaderboard\">Leaderboard<\/a><br\/>'\n             f'Dates: <b>{c.EnabledDate}<\/b> &mdash; <b>{c.DeadlineDate}<\/b><br\/>'\n             f'<b>{c.TotalTeams}<\/b> teams; <b>{c.TotalCompetitors}<\/b> competitors; <b>{c.TotalSubmissions}<\/b> submissions<br\/>'\n             f'Leaderboard percentage: <b>{c.LeaderboardPercentage}<\/b><br\/>'\n             f'Evaluation: <a title=\"{c.EvaluationAlgorithmDescription}\">{c.EvaluationAlgorithmName}<\/a><br\/>'\n             f'Reward: <b>{c.RewardType}<\/b> {c.RewardQuantity} [{c.NumPrizes} prizes]<br\/>'))\n\n    display(HTML(\n        f' <h3>Team \"{team.TeamName}\"<\/h3>'\n        f' Submissions: <b>{df.shape[0]}<\/b> by <b>{nusers}<\/b> user{\"s\" if nusers>1 else \"\"}'\n        f'; From kernels: <b>{df.SourceKernelVersionId.count()}<\/b>'\n        f' (Kernel versions: <b>{df.SourceKernelVersionId.nunique()}<\/b>)'\n        '<br\/>'\n        f' First sub: <b>{df.SubmissionDate.min()}<\/b>'\n        f'; Last sub: <b>{df.SubmissionDate.max()}<\/b>'\n        f'; Duration: <b>{(df.SubmissionDate.max()-df.SubmissionDate.min()).days}<\/b>'\n        f'; Days active: <b>{df.SubmissionDate.nunique()}<\/b>'\n        '<br\/>'\n        f'  Public rank: <b>{team.PublicLeaderboardRank:.0f}<\/b>'\n        f'; Private rank: <b>{team.PrivateLeaderboardRank:.0f}<\/b>'\n        f' <b>{MEDALS.get(team.Medal, \"\")}<\/b>'\n    ))\n    \n    title = f'{c.Title} - \"{team.TeamName}\" - [public {team.PublicLeaderboardRank:.0f} | private {team.PrivateLeaderboardRank:.0f}]'\n    \n    for t in ['Public', 'Private']:\n        ax = df[f'{t}ScoreFullPrecision'].plot(legend=True, color=COLORS[t], figsize=FIGSIZE)\n\n        ser = df.Id.isin(teams[f'{t}LeaderboardSubmissionId'])\n        q = df.loc[ser]\n        plt.scatter(np.where(ser)[0], q[f'{t}ScoreFullPrecision'], color=COLORS[t])\n\n        # dotted line of peak score\n        plt.plot(xs, yb * df[f'{t}ScoreFullPrecision'].apply(f), linestyle=':', color=COLORS[t])\n\n    if df.shape[0] > 4:\n        plt.ylim(bottom, top)\n    plt.title(title, fontsize=16)\n    plt.ylabel(c.EvaluationAlgorithmName, fontsize=14)\n    plt.xlabel('Submission Index', fontsize=14)\n    plt.xticks(fontsize=14)\n    plt.yticks(fontsize=14)\n    plt.xlim(-1, df.shape[0])\n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))\n    plt.show()","8a393c0d":"# User\/Competition Submission Traces\n\nThis notebook shows public\/private submission scores over time for nearly all competitions a user has submitted to. (Xmas optimization competitions don't have scores available in Meta Kaggle, and competitions with few submissions are skipped.)\n\nEvaluation metrics vary over competitions and the direction of 'better' submissions changes - to indicate this, the peak score in each competition for both public & private scores are shown as a dotted line.\n\nPublic leaderboard scores are in blue and private in red; and the submissions that are used for the public and private LB are marked with a dot.\n\nSo, the name of the game when Kaggling is to get the red line, the red dotted line, and the red point all to coincide at the same point, that is: to select your submission with the best private test set score.\n\nI'm using my own username as a demo, and if you want to ask about any of the traces shown, feel free! But the real purpose is for you to fork and see your own submissions history, so fork it with the \"Copy and edit\" button, set your username below and commit it to see your own competitions history :)\n\nSee also [this notebook][1] that generates these traces for the winning team of each competition.\n\n [1]: https:\/\/www.kaggle.com\/jtrotman\/winning-team-submission-traces\n\n"}}