{"cell_type":{"fcaf371e":"code","ed4dfa7d":"code","0f889ac3":"code","26a38994":"code","0447c234":"code","7d1567f1":"code","a31efe50":"code","43f08da5":"code","b0602124":"code","69a6708c":"code","f3be4b5b":"code","1c4b387d":"code","9b5e6d8b":"code","7caf657f":"code","4f9692e3":"code","2cdbc91e":"code","3471dcef":"code","4d4d67c0":"code","fc5b3424":"code","e10c0352":"code","8d8815b5":"code","e6538f8f":"code","9f24db5b":"code","353f0b67":"code","87467116":"code","e9b071dc":"code","c019354b":"code","ccb05c1c":"code","3f1ad0ee":"code","c6ac222e":"code","e0df0c84":"code","0d0533b5":"code","1b2f8669":"code","52b73e29":"code","ff5dc4a5":"code","8af68a9a":"code","fa4c3dbe":"code","d021e93a":"code","003e75e8":"code","b25fa741":"code","99d6d386":"code","3e949eb3":"markdown","f54b7126":"markdown","cae67a6e":"markdown"},"source":{"fcaf371e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","ed4dfa7d":"train = pd.read_csv(\"..\/input\/train.csv\");\ntrain.head()","0f889ac3":"train['PassengerId'].head(20)","26a38994":"train['PassengerId'].tail(20)","0447c234":"train['PassengerId'].describe()","7d1567f1":"train['Survived'].corr(train['PassengerId'])","a31efe50":"train.drop(['PassengerId'], axis=1, inplace=True)\ntrain.head()","43f08da5":"train['Pclass'].head(20)","b0602124":"train['Pclass'].tail(20)","69a6708c":"train['Pclass'].describe()","f3be4b5b":"train['Pclass'].unique()","1c4b387d":"train['Survived'].corr(train['Pclass'])","9b5e6d8b":"import seaborn as sns\nsns.regplot(x=\"Pclass\", y=\"Survived\", data=train);","7caf657f":"train.groupby(['Pclass'])['Survived'].mean()","4f9692e3":"train['Pclass'] = train['Pclass'].astype('category')\ntrain['Pclass'].dtype","2cdbc91e":"train['Name'].head(20)","3471dcef":"train['Title'] = train['Name'].str.replace('(.*, )|(\\\\..*)', '')\ntrain.head()","4d4d67c0":"train.groupby(['Title'])['Survived'].mean()","fc5b3424":"train.groupby(['Title'])['Survived'].count()","e10c0352":"TITLE = {\n    'Mr': 1, \n    'Mrs': 2, \n    'Miss': 3, \n    'Master': 4, \n    'Don': 5, \n    'Rev': 6, \n    'Dr': 7, \n    'Mme': 8, \n    'Ms': 9,\n    'Major': 10, \n    'Lady': 11, \n    'Sir': 12, \n    'Mlle': 13, \n    'Col': 14, \n    'Capt': 15, \n    'the Countess': 16,\n    'Jonkheer': 17,\n    'Dona': 18\n}\ntrain['Title'] = train['Title'].replace(TITLE).astype('category')\ntrain.head()","8d8815b5":"train['Sex'].unique()","e6538f8f":"train.groupby(['Sex'])['Survived'].mean()","9f24db5b":"SEX = {\n    'male': 1, \n    'female': 2\n}\ntrain['Sex'] = train['Sex'].replace(SEX).astype('category')\ntrain.head()","353f0b67":"train['Age'].mean()","87467116":"train['Age'].fillna(29.69911764705882, inplace=True)\ntrain.head(10)","e9b071dc":"def f(train):\n    return int(round(train['Age'] \/ 5)) + 1;\n\n\ntrain['Age1'] = train.apply(f, axis=1).astype('category')\ntrain.head()","c019354b":"train.groupby(['Age1'])['Survived'].mean()","ccb05c1c":"train['family_size'] = train['SibSp'] + train['Parch']","3f1ad0ee":"train.groupby(['family_size'])['Survived'].mean()","c6ac222e":"def fare(train):\n    return int(round(train['Fare'] \/ 5));\n\n\ntrain['fare1'] = train.apply(fare, axis=1).astype('category')\ntrain.head()","e0df0c84":"train.groupby(['fare1'])['Survived'].mean()","0d0533b5":"train.groupby(['Embarked'])['Survived'].mean()","1b2f8669":"train['Embarked'].fillna('N', inplace=True)\ntrain.head(10)","52b73e29":"train.groupby(['Embarked'])['Survived'].mean()","ff5dc4a5":"Embarked = {\n    'S': 1, \n    'C': 2,\n    'Q': 3,\n    'N': 4\n}\ntrain['Embarked'] = train['Embarked'].replace(Embarked).astype('category')\ntrain.head()","8af68a9a":"from sklearn.model_selection import train_test_split\ntrain_X = train[['Pclass', 'Title', 'Sex', 'Age1', 'family_size', 'fare1', 'Embarked']]\ntrain_Y = train['Survived']\nX_train, X_test, y_train, y_test = train_test_split(train_X, train_Y, test_size=0.4, random_state=4)","fa4c3dbe":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\n\nsvc = SVC()\nsvc.fit(X_train, y_train)\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\n\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\n\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)","d021e93a":"from sklearn import metrics\n\ny_pred = logreg.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = svc.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = knn.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = gaussian.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = perceptron.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = linear_svc.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = sgd.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = decision_tree.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\ny_pred = random_forest.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))","003e75e8":"test = pd.read_csv(\"..\/input\/test.csv\");\ntest.head()","b25fa741":"test['Title'] = test['Name'].str.replace('(.*, )|(\\\\..*)', '')\ntest['Title'] = test['Title'].replace(TITLE).astype('category')\n\ntest['Sex'] = test['Sex'].replace(SEX).astype('category')\n\ntest['Age'].fillna(29.69911764705882, inplace=True)\ntest['Age1'] = test.apply(f, axis=1).astype('category')\n\n\ntest['family_size'] = test['SibSp'] +test['Parch']\ntest['Fare'].fillna(0, inplace=True)\ntest['fare1'] = test.apply(fare, axis=1).astype('category')\n\ntest['Embarked'].fillna('N', inplace=True)\n\ntest['Embarked'] = test['Embarked'].replace(Embarked).astype('category')\n\ntest.head()","99d6d386":"y_pred = logreg.predict(test[['Pclass', 'Title', 'Sex', 'Age1', 'family_size', 'fare1', 'Embarked']])\ny_pred","3e949eb3":"## PassengerId\n1. PassengerId has no correlation with Survived.\n2. Removing PassengerId.","f54b7126":"## Pclass\n1. Pclass has correlation with Survived.\n2. Setting Pclass as categorical variable.","cae67a6e":"## Name\n1. Extract title from Name."}}