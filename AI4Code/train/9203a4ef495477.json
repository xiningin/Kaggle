{"cell_type":{"ec46bec2":"code","43dd6192":"code","e931232a":"code","34de3f4a":"code","11405d0c":"code","9a29a683":"code","f73515cd":"code","f124042e":"code","d3b8c1e0":"code","b990a90d":"code","bab9850b":"code","bbd0d0d2":"code","0839806d":"code","56c5c06c":"code","04047ac7":"code","79191b20":"code","1fdc7725":"code","65eb6a0d":"code","86cfc21d":"code","cf38173e":"markdown","85114941":"markdown","da25b513":"markdown","a29cbb33":"markdown","db876754":"markdown","39e4595e":"markdown","5aca0f87":"markdown","3f5fe9d6":"markdown","1f5aa420":"markdown","19e7b79f":"markdown","3400aebd":"markdown","af22db49":"markdown"},"source":{"ec46bec2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style('darkgrid')\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'","43dd6192":"df=pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')\ndf.sample(10)","e931232a":"df.describe()","34de3f4a":"df['state'].unique()","11405d0c":"df['region'].unique()","9a29a683":"df['flavor_profile'].unique()","f73515cd":"df[df['state']== '-1']","f124042e":"#Impute the missing values for State and Region\n\ndf.iloc[[7,94,109,115],[7,8]] = ['Delhi','North']\ndf.iloc[[9,117],[7,8]] = ['Uttar Pradesh','North']\ndf.iloc[[10,96,145,149,154,158,164],[7,8]] = ['Andhra Pradesh', 'South']\ndf.iloc[[12,98],[7,8]] = ['Gujarat','West']\ndf.iloc[[111,128,130,144,156,161,162,231,248],[7,8]] = ['Tamil Nadu','South']\n\n##Replace the nan for region \ndf[\"region\"]=df[\"region\"].fillna(df[\"region\"].mode()[0])\n\n##Replace \"-1\" for flavor_profile with 'unique' word\ndf['flavor_profile'].replace('-1', 'unique', regex = True, inplace = True)\n\n##Replace prep_time and cook_time with respective median values\ndf['prep_time'].replace(-1, df['prep_time'].median(), regex = True, inplace = True)\ndf['cook_time'].replace(-1, df['cook_time'].median(), regex = True, inplace = True)","d3b8c1e0":"df_diet = df['diet'].value_counts().reset_index()\ndf_course = df['course'].value_counts().reset_index()\ndf_flavor = df['flavor_profile'].value_counts().reset_index()\n\nplt.figure(figsize=(15,8))\nplt.subplot(1,3,1)\n\nplt.pie(df_diet['diet'], labels = df_diet['index'], autopct='%1.1f%%')\nplt.title(\"Recipes by Diet\")\n\nplt.subplot(1,3,2)\nplt.pie(df_course['course'], labels = df_course['index'], autopct='%1.1f%%')\nplt.title(\"Recipes by Course\")\n\nplt.subplot(1,3,3)\nplt.pie(df_flavor['flavor_profile'], labels = df_flavor['index'], autopct='%1.1f%%', explode=[0.01]*len(df_flavor))\nplt.title(\"Recipes by Flavor\")\nplt.show()","b990a90d":"# df_state_flavor = df.groupby(['state','flavor_profile'])['name'].count().to_frame('count').reset_index()\n# df_state_flavor.loc[df_state_flavor.groupby([\"state\"])[\"count\"].idxmax()]\n\n#df['total_ingredients'] = df['ingredients'].apply(lambda x: len(set(x.split(','))))\n\n# df1 = df.groupby(['diet','course','flavor_profile'])['total_ingredients'].count().to_frame()\n# df1.sort_values(by='total_ingredients', ascending=False).reset_index()","bab9850b":"!pip install sentence_transformers","bbd0d0d2":"from sentence_transformers import SentenceTransformer\nbert = SentenceTransformer('bert-base-nli-mean-tokens')","0839806d":"## Helper function to retrieve receipes\n\ndef get_index(recp):\n    return df[df.name == recp].index.values[0]\n\ndef get_receipe(index):\n    return df[df.index == index][\"name\"].values[0]","56c5c06c":"sentence_embeddings = bert.encode(df['ingredients']).tolist()","04047ac7":"from sklearn.metrics.pairwise import cosine_similarity\nsimilarity = cosine_similarity(sentence_embeddings)","79191b20":"def getRecipeRecommentation(recipe_name):\n    return sorted(list(enumerate(similarity[get_index(recipe_name)])), key = lambda x: x[1], reverse=True)","1fdc7725":"recommendations = getRecipeRecommentation('Kheer')\nfor x in range(10):\n    print(get_receipe(recommendations[x][0]), sep = \"\\n\")","65eb6a0d":"recommendations = getRecipeRecommentation('Dosa')\nfor x in range(10):\n    print(get_receipe(recommendations[x][0]), sep = \"\\n\")","86cfc21d":"recommendations = getRecipeRecommentation('Tandoori Fish Tikka')\nfor x in range(10):\n    print(get_receipe(recommendations[x][0]), sep = \"\\n\")","cf38173e":"BERT (Bidirectional Encoder Representations from Transformers), released in late 2018, is the model we will use in this tutorial to provide readers with a better understanding of and practical guidance for using transfer learning models in NLP. BERT is a method of pretraining language representations that was used to create models that NLP practicioners can then download and use for free. You can either use these models to extract high quality language features from your text data, or you can fine-tune these models on a specific task (classification, entity recognition, question answering, etc.) with your own data to produce state of the art predictions.\n\nIn the next part, we will use BERT to extract features, namely word and sentence embedding vectors, from ingredients data. What can we do with these word and sentence embedding vectors? \n\nThese embeddings will be useful for keyword\/search expansion, semantic search and information retrieval.","85114941":"**Basic EDA & Visualizations**","da25b513":"**Read the dataset**","a29cbb33":"## Why BERT Embedding?\n\nBERT has an advantage over models like Word2Vec because while each word has a fixed representation under Word2Vec regardless of the context within which the word appears, BERT produces word representations that are dynamically informed by the words around them","db876754":"**Dataset Information**\n\nThe dataset consists of about 255 Indian dishes and 9 columns associated with each of them.\n\nThe 9 columns are as follows:-\n\n**name** : name of the dish\n\n**ingredients** : main ingredients used\n\n**diet** : type of diet - either vegetarian or non vegetarian\n\n**prep_time** : preparation time\n\n**cook_time** : cooking time\n\n**flavor_profile** : flavor profile includes whether the dish is spicy, sweet, bitter, etc\n\n**course** : course of meal - starter, main course, dessert, etc\n\n**state** : state where the dish is famous or is originated\n\n**region** : region where the state belongs","39e4595e":"## **Recipe Embedding using BERT**","5aca0f87":"Now, let us see how BERT helps us in providing recommendations","3f5fe9d6":"In 2018, the Google AI team made a revolutionary change in the field of Natural Language Processing ( NLP) by introducing Bidirectional Encoder Representations from Transformers (BERT). Due to its highly pragmatic approach, and higher performance, BERT is highlighted for achieving state-of-the-art performance in many NLP tasks","1f5aa420":"**Data Cleaning and Imputing**","19e7b79f":"I hope you enjoyed the notebook and hopefully got a view of BERT embedding. \n\nIn the comments section, feel free to post your feedback.","3400aebd":"In this notebook, we will explore BERT model for food recommendation.\nIf you like this notebook, please upvote !","af22db49":"![image.png](attachment:19f50f7d-1214-44f5-8846-5b80fc7532b5.png)\n\nSource : (https:\/\/www.greatcontent.com\/google-bert\/)"}}