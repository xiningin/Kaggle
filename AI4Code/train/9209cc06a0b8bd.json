{"cell_type":{"5a6f9a31":"code","1b479f86":"code","194c2c08":"code","4d7c9d01":"code","8458540f":"code","bc274f4f":"code","1d291b06":"code","afbb1adf":"code","ef724f26":"code","ed41bfc9":"code","3c2ca9df":"code","971dd969":"code","5fb1d24a":"code","831a8d18":"code","996cb0d6":"code","ea2fa30f":"code","3d9b23b5":"code","a09d274d":"code","c0dda769":"code","88af1513":"code","d9beeb08":"code","5376ba91":"code","735ba610":"code","bd8b6397":"code","7aff7fca":"code","ef161377":"code","a5f4ef99":"code","052e6795":"code","41f0b6d8":"code","028af93d":"code","2b651392":"code","ad13072e":"code","8be3ceed":"code","ee537f14":"code","2c61e127":"code","b3714eae":"code","41f7cc15":"code","b1f6773e":"code","80dde64d":"code","be9e6bc0":"code","94b3a03a":"code","351d622e":"code","d79812c0":"code","d7ad53af":"code","37e0baf3":"code","a820886b":"code","9fcda4b2":"code","c04edf71":"code","6ebb7ef4":"code","3bf3ae92":"code","d790e76b":"code","286e1af7":"code","101c22ce":"code","24ffb3ee":"code","32ca4f32":"code","a419564d":"code","3d1f8fe1":"code","d6d3f638":"code","fe22a0ca":"code","82584777":"code","79b45782":"markdown","f1068642":"markdown","76fc2567":"markdown","7d0f0357":"markdown","bb1ed981":"markdown","a4121909":"markdown","9f8baf82":"markdown","17d902a0":"markdown","adc2c5be":"markdown","8a1ee6ca":"markdown","9a2ceca2":"markdown","47c7f56a":"markdown","e7d89f6f":"markdown","60ca9227":"markdown","68332096":"markdown","00fedcf6":"markdown","bffdff74":"markdown","caf56169":"markdown","9382bdd0":"markdown","f5d40919":"markdown"},"source":{"5a6f9a31":"#Importing the Numpy Package\nimport numpy as np","1b479f86":"#Array with just zeros\n#zeros(shape, dtype=float, order='C')\na = np.zeros(5)\na","194c2c08":"#Type of the Numpy object\ntype(a)","4d7c9d01":"#Type of the individual array element\ntype(a[0])","8458540f":"#shape of the array\na.shape","bc274f4f":"#We can change the dimension with shape\na.shape = (5,1)","1d291b06":"a","afbb1adf":"#Array with ones\nb = np.ones(10)\nb","ef724f26":"#Return a new array of given shape and type, without initializing entries. Almost similar to np.zeros\nc = np.empty(3)\nc","ed41bfc9":"#from 10 to 50 with 5 elements. Helpful in plots\nd = np.linspace(10,50,5) \nd","3c2ca9df":"#Defining array with our elements\ne = np.array([10,20])\ne","971dd969":"# Returns number of dimensions of the array\ne.ndim","5fb1d24a":"#Two Dimensional Array\nlist1 = [[1,2,3,4],[5,6,7,8,]]\nf = np.array(list1)\nf","831a8d18":"# Returns number of dimensions of the array\nf.ndim","996cb0d6":"#Total number of elements\nf.size","ea2fa30f":"#3 dimensional array\nb = np.array([[[1,2,3,4],[5,6,7,8],[11,12,13,14]],[[15,16,17,18],[2,3,4,5],[7,8,9,0]]])\nb","3d9b23b5":"b.ndim","a09d274d":"#Array filled with described value\nnp.full((3,3),99,dtype='float16')","c0dda769":"# array with random numbers in a range\n#randint(low, high=None, size=None, dtype='l')\nnp.random.seed(0)\nx = np.random.randint(10,size=6)\nx","88af1513":"# array with random numbers in a range\n#randint(low, high=None, size=None, dtype='l')\nnp.random.seed(0)\nx = np.random.randint(5,10,size=6)\nx","d9beeb08":"x[0]","5376ba91":"x[:-1]","735ba610":"x[-1]","bd8b6397":"#Example of Broadcasting with single element getting added to every other element of the first list\nx[:-1]+x[-1]","7aff7fca":"a = [5,0,3,3,7,9]","ef161377":"a[-1]","a5f4ef99":"a[:-1]","052e6795":"#We cannot add an elementary object with a list. Hence we will pass the element in a list\n#List addition just results in appending the values and no broadcasting similar to Numpy ndarray\na[:-1] + [a[-1]]","41f0b6d8":"list1 = [1,2,3,4,5]\nlist1 + [6]","028af93d":"array1 = np.array([1,2,3,4,5])\narray1 + 6","2b651392":"array1 = np.array([1,2,3,4,5])\narray2 = np.array([6])\narray1 + array2","ad13072e":"print(np.sum(array1))\nprint(np.prod(array1))\nprint(np.mean(array1))\nprint(np.std(array1))\nprint(np.var(array1))\nprint(np.min(array1))\nprint(np.max(array1))\nprint(np.argmin(array1))\nprint(np.argmax(array1))","8be3ceed":"#Matrix Multiplication\na = np.ones((2,3))\nprint(a)\n\nb = np.full((3,2),2)\nprint(b)\n\n#a*b \n# Trying to multiply two arrays like above will result in error.Hence use Matmul function\nnp.matmul(a,b)","ee537f14":"#Identitiy matrix\nc = np.identity(3)\nc","2c61e127":"#determinant\nnp.linalg.det(c)","b3714eae":"#Dot operation\narray1 = np.array([1,2,3,4,5],dtype='int8')\narray2 = np.ones(5,dtype='int8')\narray1 @ array2","41f7cc15":"z = np.array([1,2,3,4,5])\nz","b1f6773e":"#Below operation gives us Boolean output with condition TRUE or FALSE\nz<3","80dde64d":"#We can provie the above condition within and filter out the values accordingly\nz[z<3]","be9e6bc0":"#STEP1 -> Creating full 5*5 matrix filled with Ones\na = np.ones((5,5),dtype='int8')\na","94b3a03a":"#STEP2 -> Creating a 3*3 matrix with zeroes which can fit in our pattern\nz = np.zeros((3,3))\nz","351d622e":"#Replacing the centre element\nz[1,1]=5\nz","d79812c0":"#Creating the pattern with replacing the elements by Slicing\na[1:4,1:4] = z","d7ad53af":"a","37e0baf3":"#Load data from a text file\n#data.txt contains values in a comma seperated fashion\n#We can pullin those values with genfromtxt function\ndata1 = np.genfromtxt('..\/input\/data-for-intro-to-numpy-kernel\/data.txt',delimiter=',')\ndata1 = data1.astype('int32')\ndata1","a820886b":"#pip install skimage if it is not installed in your machine\nfrom skimage import io\n#Reading an image present in my Local computer\nphoto = io.imread(\"..\/input\/data-for-intro-to-numpy-kernel\/cards.jpg\")","9fcda4b2":"#pip install matplotlib if it is not installed in your machine\n#Plotting the image read in the previous cell\nimport matplotlib.pyplot as plt\nplt.imshow(photo)","c04edf71":"#Cropping out a part of the image by slicing \n#You can provide a range for the rows and columns inorder to Slice the image\nphoto2 = photo[200:500,100:400]\nplt.imshow(photo2)","6ebb7ef4":"#We can clearly see the image here is nothing but a nd array. Hence we can very well utilise Numpy package for operations.\ntype(photo)","3bf3ae92":"#pip install opencv-python if it is not already present\n#cv stands for computer vision\nimport cv2\nimg1 = cv2.imread(\"..\/input\/data-for-intro-to-numpy-kernel\/cards.jpg\")","d790e76b":"cv2.imshow(\"Output window\",img1)\ncv2.waitKey(0)","286e1af7":"#Again we can see that the type of the image is numpy array\ntype(img1)","101c22ce":"#Cropping a part of the iamge\nimg2 = img1[250:400]","24ffb3ee":"cv2.imshow(\"Output window cropped\",img2)\ncv2.waitKey(0)","32ca4f32":"#Shape of the Image\nimg1.shape","a419564d":"#Creating an RGB image of shape 512 * 512\nnew_img = np.zeros((512,512,3))","3d1f8fe1":"new_img.shape","d6d3f638":"#We can see that we have created a RGB image now\ncv2.imshow(\"new window\",new_img)\ncv2.waitKey(0)","fe22a0ca":"new_img[:] = 0,255,0\n#For OpenCV colors are in the format BGR. Hence 0,255,0 represents color Green ON","82584777":"cv2.imshow(\"new window\",new_img)\ncv2.waitKey(0)","79b45782":"Trying to see similar action in Lists.","f1068642":"## Practise Example","76fc2567":"#### Another example of list vs numpy array","7d0f0357":"## Slice Operations","bb1ed981":"|h1|h2|h3|h4|h5|\n|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 1 |\n| 1 | 0 | 0 | 0 | 1 |\n| 1 | 0 | 5 | 0 | 1 |\n| 1 | 0 | 0 | 0 | 1 |\n| 1 | 1 | 1 | 1 | 1 |","a4121909":"#### Numpy array from data in text file","9f8baf82":"## NUMPY with Images","17d902a0":"## REFERENCES\n- https:\/\/numpy.org\/\n- https:\/\/numpy.org\/devdocs\/user\/absolute_beginners.html\n- PYTHON PROGRAMMER - https:\/\/www.youtube.com\/watch?v=xECXZ3tyONo\n- KEITH GALLI - https:\/\/www.youtube.com\/watch?v=GB9ByFAIAH4","adc2c5be":"Similarly we can find other functions for the following -> determinant,trace,svd,eigenvalues,matrix norm,inverse","8a1ee6ca":"## Reading an image with OpenCV and creating a greyscale and RGB image with Numpy array","9a2ceca2":"### <font color='green'>This is an Intro Notebook to Numpy! Hope it helps anyone who are beginners to Numpy or anyone else who wants to refresh different Numpy Functions! <\/font>\n### <font color='green'>CHEERS!!!<\/font>","47c7f56a":"#### <font color='green'> DO UPVOTE IF YOU FIND THIS KERNEL USEFUL IN ANY WAYS!! IT WOULD MOTIVATE ME TO CREATE MORE OF SUCH KERNELS! THANK YOU!!!\n### <font color='green'> CHEERS!","e7d89f6f":" NOTE: Images as we know are made up of Pixels, which are the smallest addresable element of a picture. Pixels of a image can be thought of a stacked up n dimensional array which then can be easily referred by our Numpy package. <br>\nFor Eg: HD size is 1280 * 720 which means it can be considered as a nd array of dimensions 1280 * 720","60ca9227":"We will try to create a pattern in the below format <br>\n[[1,1,1,1,1]<br>\n  [1,0,0,0,1]<br>\n  [1,0,5,0,1]<br>\n  [1,0,0,0,1]<br>\n  [1,1,1,1,1]]<br>","68332096":"pip install numpy <br>\nPip install the Numpy module from your Python\/Anaconda promt or alternatively you can use !pip install numpy from your Jupyter Notebook","00fedcf6":"### Numpy -> Numerical Python - multidimensional array object\nFunctionalities in the area of linear algebra, mathematical functions, plotting etc","bffdff74":"## Boolean Function and selection of elements","caf56169":"## Mathematical Operations","9382bdd0":"Here we can see an extra element, for the shape of the ndarray. For that we can try to understand, what is the difference between Greyscale and RGB image.<br>\nSo the 3 here represents number of channels of the image. A typical greyscale image(or black and white) is something without any channel mentioned. <br>\nNumber of Channels for a RGB colour image is 3. Hence we need to represent this if we are creating an RGB image <br>","f5d40919":"## <u> LISTS VS NUMPY <\/u> \n1.  Lists are slow whereas numpy arrays are fast. <br>\n    Numpy uses fixed type<br>\n    Numpy repesents any value as four bytes - int32 by default. <br>\n    We can also specify the dtype of elements as int16 or int8 accordignly. less bytes of memory hence faster<br>\n    Where as in lists the builtin type is `int` and needs to store following for each value - object value,object type,reference count,size. Hence more size <br>\n2. No need of type checking bcoz in numpy everything is ndarray type <br>\n3. Numpy uses contiguous memory<br>\n   Benefits of contiguous memory - SIMD(Single Instruction Multiple Data) Vector Processing <br>\n   Also, effective Cache utilisation\n4. Error while performing mathematical operations such as Multiplication of two lists\n\n<b> Some of the applications of Numpy <\/b>\n- mathematics - matlab replacement\n- plotting\n- image processing\/ computer vision\n"}}