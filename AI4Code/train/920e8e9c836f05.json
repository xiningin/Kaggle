{"cell_type":{"8323632e":"code","28ccfe68":"code","6cef3a47":"code","b0da5eec":"code","8216bb23":"code","80448e51":"code","63ca5267":"code","8bf1dd51":"code","a605729a":"code","d42e049a":"code","62b7542c":"code","b3359e62":"code","7ed14913":"markdown","a904bc50":"markdown","5e61c81f":"markdown","bd8077ee":"markdown","4e75ada4":"markdown","2aab4b21":"markdown","0bf41163":"markdown","f49b4258":"markdown","de03f806":"markdown"},"source":{"8323632e":"import numpy as np\nimport pandas as pd\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import Dense, Flatten, AveragePooling2D, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.models import load_model\nimport matplotlib.pyplot as plt\nimport cv2","28ccfe68":"train_data_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train'\nvalidation_data_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation'\n\nIMG_SIZE = [224, 224]\nINIT_LR = 1e-4\nEPOCHS = 20\nBS = 64\n\ntrain_datagen = ImageDataGenerator(rescale = 1.\/225,\n                                  samplewise_center = True,\n                                   samplewise_std_normalization = True,\n                                  rotation_range = 10,\n                                  horizontal_flip = True)\n\nval_datagen = ImageDataGenerator(rescale = 1.\/225)\n\ntrain_generator = train_datagen.flow_from_directory(directory = train_data_dir,\n                                                        target_size = tuple(IMG_SIZE),\n                                                        batch_size = 64,\n                                                        shuffle = True,\n                                                        class_mode = 'categorical')\nval_generator = val_datagen.flow_from_directory(directory = validation_data_dir,\n                                                        target_size = tuple(IMG_SIZE),\n                                                        batch_size = 64,\n                                                        shuffle = False,\n                                                        class_mode = 'categorical')\n","6cef3a47":"masked_images = os.listdir('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/WithMask')\nunmasked_images = os.listdir('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/WithoutMask')\n\nplt.figure(figsize = (6, 2))\nfor i in range(3):\n    plt.subplot(1, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join(train_data_dir + \"\/WithMask\",masked_images[i])))\n    plt.title(\"With Mask\")\n\nplt.figure(figsize = (6, 2))\nfor i in range(3):\n    plt.subplot(1, 3, i + 1)\n    plt.imshow(plt.imread(os.path.join(train_data_dir + \"\/WithoutMask\",unmasked_images[i])))\n    plt.title(\"Without Mask\")","b0da5eec":"mobilenet = MobileNetV2(input_shape = (224, 224, 3), weights = 'imagenet', include_top = False)\nfor layer in mobilenet.layers:\n    layer.trainable = False\n    \n#mobilenet.summary()","8216bb23":"X = AveragePooling2D(pool_size=(7, 7))(mobilenet.output)\nX = Flatten(name=\"flatten\")(X)\nX = Dense(128, activation=\"relu\")(X)\nX = Dropout(0.5)(X)\nprediction = Dense(2, activation= 'softmax')(X)\nmodel = Model(inputs = mobilenet.input, outputs = prediction)\n# model.summary()","80448e51":"opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])","63ca5267":"history = model.fit(train_generator,\n                    epochs = EPOCHS,\n                    validation_data= val_generator,\n                    verbose = 1)","8bf1dd51":"model.save('face_mask-2.h5')","a605729a":"import matplotlib.pyplot as plt\n\ndef plotting(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_' + string])\n    plt.ylabel(string)\n    plt.xlabel(\"Epochs\")\n    plt.legend([string, \"val_\"+string])\n    plt.show()\n\nplotting(history, \"accuracy\")\nplotting(history, \"loss\")","d42e049a":"test_data = ImageDataGenerator().flow_from_directory(directory= '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test',\n                                                    target_size = tuple(IMG_SIZE),\n                                                    shuffle = True,\n                                                     class_mode = 'categorical')\nmodel.evaluate(test_data)","62b7542c":"model = load_model(\"..\/input\/facemaskdetectionmodelsoftmax\/face_mask-2.h5\")\n\nIMG_SIZE = [224, 224]\n\npred_img_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/WithoutMask\/1202.png'\nimage = tf.keras.preprocessing.image.load_img(path=pred_img_dir,\n                                             target_size=tuple(IMG_SIZE))\n\ninput_arr = tf.keras.preprocessing.image.img_to_array(image)\nprint(input_arr.shape)\ninput_arr = np.array([input_arr])  # Convert single image to a batch.\nprint(input_arr.shape)\npredictions = model.predict(input_arr)\nprint(np.argmax(predictions, axis=1))\n# print(predictions)\nfor i in predictions[0]:\n    print(i)\n\n# Image Display and Prediction\nif np.argmax(predictions, axis = 1) == 1:\n    plt.title('Without Mask')\nelse:\n    plt.title(\"With Mask\")\nplt.imshow(plt.imread(pred_img_dir))","b3359e62":"pred_img_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/WithMask\/1175.png'\nimage = tf.keras.preprocessing.image.load_img(path=pred_img_dir,\n                                             target_size=tuple(IMG_SIZE))\n\ninput_arr = tf.keras.preprocessing.image.img_to_array(image)\nprint(input_arr.shape)\ninput_arr = np.array([input_arr])  # Convert single image to a batch.\nprint(input_arr.shape)\npredictions = model.predict(input_arr)\nprint(np.argmax(predictions, axis=1))\n# print(predictions)\nfor i in predictions[0]:\n    print(i)\n\n# Image Display and Prediction\nif np.argmax(predictions, axis = 1) == 1:\n    plt.title('Without Mask')\nelse:\n    plt.title(\"With Mask\")\nplt.imshow(plt.imread(pred_img_dir))","7ed14913":"## Prediction on Model","a904bc50":"### Adding Base Layers to the Model","5e61c81f":"## Model Training","bd8077ee":"## Transfer Learning - Loading MobileNetV2 Architechure\n### Model Prepration","4e75ada4":"## Data Preprocessing","2aab4b21":"## Data Visualization","0bf41163":"## Model Compilation ","f49b4258":"## Assessing the Model Metrics","de03f806":"## Evaluation on Test Data"}}