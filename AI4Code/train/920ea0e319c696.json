{"cell_type":{"57eb0c25":"code","9414802e":"code","73f3a7ad":"code","8ec12cfe":"code","ed14fa17":"code","8e10f4c1":"code","82b8cca3":"code","85325b62":"code","c2362b10":"code","dccd3140":"code","e488c89f":"code","a90940bc":"code","1ba2d5d8":"code","14f3f6f6":"code","785d0195":"code","1477e439":"code","099dee73":"code","ebd7a9c6":"code","96a42b88":"code","c923ba9b":"code","ad9e25ec":"code","e6a977e9":"code","52b03e7e":"code","dfbc5329":"code","1a0152b2":"code","95149616":"code","6954442c":"code","48468729":"code","4bf7a52e":"code","316acbef":"code","4afa52b5":"code","cf7d2b1a":"code","c23b1897":"code","2f9c3862":"code","7c80fea7":"code","09986648":"code","0e09fdf3":"code","da88c74d":"code","4ad6f2fa":"code","e2557d7d":"code","91c1ff63":"code","0fb4f6c6":"code","499a9f77":"code","14913b92":"code","054a4371":"code","2e4a40f6":"code","05ac5a48":"code","088afdfd":"code","dabcdc3f":"code","dc19af58":"code","b8e8834c":"code","e5773154":"code","71ceb80e":"code","49e59adb":"markdown","26ab0e82":"markdown","48cce8e6":"markdown","ed620a4d":"markdown","0b528219":"markdown","f0c0cae7":"markdown","7c9f5a16":"markdown","a25fa265":"markdown","df8689a9":"markdown","dd35cdf7":"markdown","f959930a":"markdown","8a42958c":"markdown","f1b75503":"markdown","bd2e1b8e":"markdown","53e73737":"markdown","5ede83d9":"markdown","8c072454":"markdown","adff7c32":"markdown","84b0d0b1":"markdown","0d5acaf6":"markdown","bbd3bb17":"markdown","32162656":"markdown","1c27e56f":"markdown","e27d8cdd":"markdown","05373544":"markdown","2aa5d865":"markdown","d259ea4c":"markdown","be1eda41":"markdown","13f5e653":"markdown"},"source":{"57eb0c25":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as transforms\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","9414802e":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","73f3a7ad":"!head \"{TRAIN_CSV}\"","8ec12cfe":"!head \"{TEST_CSV}\"","ed14fa17":"!ls \"{TRAIN_DIR}\" | head","8e10f4c1":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","82b8cca3":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","85325b62":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    ","c2362b10":"encode_label('2 4 5')","dccd3140":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","e488c89f":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","a90940bc":"class HumanProteinDataset(Dataset):\n    def __init__(self, csv_file, root_dir, transform=None):\n        self.df = pd.read_csv(csv_file)\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","1ba2d5d8":"transform = transforms.Compose([transforms.ToTensor()])\ndataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","14f3f6f6":"len(dataset)","785d0195":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    ","1477e439":"show_sample(*dataset[0], invert=False)","099dee73":"show_sample(*dataset[0])","ebd7a9c6":"torch.manual_seed(10)","96a42b88":"val_pct = 0.15\nval_size = int(val_pct * len(dataset))\ntrain_size = len(dataset) - val_size","c923ba9b":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","ad9e25ec":"batch_size = 16","e6a977e9":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","52b03e7e":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","dfbc5329":"show_batch(train_dl)","1a0152b2":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","95149616":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","6954442c":"class ProteinCnnModel(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n             nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            \n            nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.AdaptiveAvgPool2d(1),\n\n            nn.Flatten(), \n            nn.Linear(512, 256),\n            nn.ReLU(),\n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Linear(128, 64),\n            nn.ReLU(),\n            nn.Linear(64, 10),\n            nn.Sigmoid()\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","48468729":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet18(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))","4bf7a52e":"model = ProteinCnnModel2()\nmodel","316acbef":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","4afa52b5":"device = get_default_device()\ndevice","cf7d2b1a":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","c23b1897":"def try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break\n\ntry_batch(train_dl)","2f9c3862":"from tqdm.notebook import tqdm","7c80fea7":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","09986648":"model = to_device(ProteinCnnModel2(), device)","0e09fdf3":"evaluate(model, val_dl)","da88c74d":"num_epochs = 10\nopt_func = torch.optim.Adam\nlr = 1e-5","4ad6f2fa":"history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)","e2557d7d":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","91c1ff63":"test_dataset = HumanProteinDataset(TEST_CSV, TEST_DIR, transform=transform)","0fb4f6c6":"img, target = test_dataset[0]\nimg.shape","499a9f77":"predict_single(test_dataset[100][0])","14913b92":"predict_single(test_dataset[74][0])","054a4371":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","2e4a40f6":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","05ac5a48":"test_preds = predict_dl(test_dl, model)","088afdfd":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","dabcdc3f":"sub_fname = 'resnet34_submission.csv'","dc19af58":"submission_df.to_csv(sub_fname, index=False)","b8e8834c":"!pip install jovian --upgrade","e5773154":"import jovian","71ceb80e":"jovian.commit(project='zerogans-protein-competition')","49e59adb":"Here's the same image viewed with the colors inverted","26ab0e82":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","48cce8e6":"### Data Loaders","ed620a4d":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","0b528219":"Here's a sample image without the colors inverted.","f0c0cae7":"## Training the model","7c9f5a16":"## Save to Jovian","a25fa265":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","df8689a9":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","dd35cdf7":"Let's load the `train.csv` file into a Pandas dataframe","f959930a":"You can now upload this submission file here: https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g\/submit","8a42958c":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","f1b75503":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","bd2e1b8e":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","53e73737":"If your kernel runs out of memory here, you might need to reduce your batch size.","5ede83d9":"I'm using a validation percentage of 10%, but you can use a smaller or larger percentage. One good strategy is to determine a good set of hyperparameters, and then retrain on a smaller validation set for your final submission.","8c072454":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","adff7c32":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","84b0d0b1":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","0d5acaf6":"Let's check how many samples the dataset contains","bbd3bb17":"Let us know create a submission file with these predictions","32162656":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","1c27e56f":"## Creating a submission file","e27d8cdd":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","05373544":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","2aa5d865":"Let's also put the textual labels in a dictionary for later use.","d259ea4c":"## Model","be1eda41":"## Human Protein Multi Label Image Classification \n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)","13f5e653":"Let's try predicting the labels for some sample images"}}