{"cell_type":{"2020e3ed":"code","d28880f4":"code","4c30ae3c":"code","f27c8f63":"code","1974b18a":"code","47727125":"code","6f0b400f":"code","9aa304c6":"code","97ec8cd4":"code","a9a204e6":"code","35170e96":"code","6f3a4447":"code","95f40293":"code","dd3de630":"code","cf905a08":"code","ce62b94a":"code","55b916dd":"code","f69b2ac4":"code","2b61380e":"code","fee51a28":"markdown","f781cec6":"markdown","7fe5facf":"markdown","e260e21f":"markdown","39cc3b7c":"markdown","9aa2bdbe":"markdown","443389fe":"markdown","4206f4a9":"markdown","23eb6c69":"markdown","1b5cbc9e":"markdown","3f0f681c":"markdown","dd780fbb":"markdown","73324c5c":"markdown","c8be4efc":"markdown","81686470":"markdown","2db0174d":"markdown","d4b8267d":"markdown","390a13b7":"markdown","a1c688db":"markdown","a393d04d":"markdown","e738ab9f":"markdown","5cea7340":"markdown"},"source":{"2020e3ed":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d28880f4":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')\n","4c30ae3c":"df.isnull().sum()","f27c8f63":"df.info()","1974b18a":"df = df[df.App != 'Life Made WI-Fi Touchscreen Photo Frame'] # this app had bad featurs so I droped it !","47727125":"df[\"Installs\"] = [ float(i.replace('+','').replace(',', '')) if '+' in i or ',' in i else float(0) for i in df[\"Installs\"] ]\nprint('new form of installs column:')\ndf[\"Installs\"]","6f0b400f":"def convert_str_to_numeric(value):\n\n    if value.endswith(\"M\"):\n        return float(value.split(\"M\")[0]) * 1000\n\n    elif value.endswith(\"k\"):\n        return float(value.split(\"k\")[0])\n\n\ndf['Size'] = df['Size'].apply(convert_str_to_numeric)\nprint('new form of size columns :')\ndf['Size']\n","9aa304c6":"df['Price'] = df['Price'].str.replace('$', '').astype(float)","97ec8cd4":"data = df.sort_values(by='Installs', ascending=False)[['App', 'Installs']][:10]\ndata","a9a204e6":"df_ = df[df['Size'] != 'Varies with device']\ndf_ = df_.sort_values(by='Size', ascending=False)[['App', 'Size']][:10]\ndf_","35170e96":"sns.distplot(df['Rating'] , color='y')","6f3a4447":"df2 = df.copy()\ndf2['Reviews'] = df2['Reviews'].astype(float)\ndf2 = df2[df2['Reviews'] >= df2['Reviews'].mean()]\ndf2 = df2.sort_values(by='Rating', ascending=False)[['App', 'Rating', 'Reviews']][:10]\ndf2","95f40293":"uniq_category = df['Category'].value_counts()[:5]\nuniq_category\n\nsns.countplot(df['Category'])\nplt.xticks(rotation=90)\nplt.title('count of apps in each category',fontsize = 15)\n\n\n","dd3de630":"print('count of most 10 genres :')\ngenres = df['Genres'].value_counts()[:10]\ngenres = genres.to_frame()\ngenres.columns = ['Genres count']\ngenres","cf905a08":"\na = df[(df['Price'] > 0) & (df['Price'] <= 1)]\nb = df[(df['Price'] > 1) & (df['Price'] <= 2)]\nc = df[(df['Price'] > 2) & (df['Price'] <= 3)]\nd = df[(df['Price'] > 3) & (df['Price'] <= 4)]\ne = df[(df['Price'] > 4) & (df['Price'] <= 5)]\nf = df[df['Price'] > 5]\n\narray = []\narray_column_name = ['<1$', '1$<2$$', '2$<3$$', '3$<4$$', '4$<5$$', '5$<']\nfor i in [a, b, c, d, e, f]:\n    array.append(i['App'].count())\n\ndf_ = pd.DataFrame({'lable' : array_column_name,'value' : array})\n\nfrom matplotlib import cm\ncolor = cm.inferno_r(np.linspace(.25, .8, 6))\ndf_.plot.bar(x='lable', y='value', rot=70\n              ,color=color ,legend= False)\nplt.title(\"*$* count of price ranges *$$*\", fontsize = 15)\nplt.show()\n","ce62b94a":"from sklearn import preprocessing\n\nlb = preprocessing.LabelEncoder()\ndf['Genres'] = lb.fit_transform(df['Genres'])\ndf['Category'] = lb.fit_transform(df['Category'])\ndf['Content Rating'] = lb.fit_transform(df['Content Rating'])\ndf['Reviews'] = df['Reviews'].apply(lambda x: int(x))\n\nsns.heatmap(df[['Category','Rating','Reviews','Installs', 'Size' ,'Genres','Price']].corr(),\\\n            annot=True, linewidths=0.5, fmt=\".2f\",cmap='winter')\n","55b916dd":"from sklearn import preprocessing\n\nlb = preprocessing.LabelEncoder()\nms = preprocessing.MinMaxScaler()\n\ndf['Genres'] = lb.fit_transform(df['Genres'])\ndf['Category'] = lb.fit_transform(df['Category'])\ndf['Type'] = df['Type'].map({'Free': 1, 'Paid': 0})\ndf['Content Rating'] = lb.fit_transform(df['Content Rating'])\ndf[['Size', 'Installs', 'Reviews']] = ms.fit_transform(df[['Size', 'Installs', 'Reviews']])\ndf = df.dropna()\n","f69b2ac4":"from sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score, mean_squared_error, mean_absolute_error, r2_score\n\nreg = tree.DecisionTreeRegressor(max_depth=5, min_samples_leaf=5, random_state=45)\n\ny = df['Rating']\nx = df[['Category', 'Rating', 'Reviews', 'Installs', 'Size', 'Genres', 'Price', 'Content Rating', 'Type']]\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.25, random_state=45)\n\nreg.fit(x_train, y_train)\nacc = reg.score(x_test, y_test)\npred = reg.predict(x_test)\n\nprint('Accuracy :{0:.7f}'.format(acc))\nprint('Mean Absolute Error:{0:.5f}'.format(metrics.mean_absolute_error(y_test, pred)))\nprint('Mean Squared Error:{0:.5f}'.format(metrics.mean_squared_error(y_test, pred)))\nprint('Root Mean Squared Error:{0:.5f}'.format(np.sqrt(metrics.mean_squared_error(y_test, pred))))\n","2b61380e":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\n\ncv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)\nprint(cross_val_score(reg, x_test, y_test, cv=5))\n\n","fee51a28":"* Distribution of Rating ","f781cec6":"* Correlation among columns :\nat first i should encode some of my features","7fe5facf":"**Predicting Rating by DecisionTreeRegressor**","e260e21f":"![google-play.jpg](attachment:google-play.jpg)","39cc3b7c":"*  Categories values **","9aa2bdbe":"* clean $ from Price column :","443389fe":"* some coulmn most change cause of bad forms","4206f4a9":"* Model","23eb6c69":"*** *data cleaning* :**","1b5cbc9e":"* *most installed applications*","3f0f681c":"* *important libraries :*","dd780fbb":"corss_validation for cheking validation","73324c5c":"* Null values :","c8be4efc":"* change form of 'Size' column:","81686470":"* Genres values : ","2db0174d":"* *hugest applications by size*","d4b8267d":"* *Best apps by rating points and Reviews*","390a13b7":"* Encoding data","a1c688db":"Thank you for being patient and reading this kernel.\n\nand thank you for your attention to this matter.\n\nif there is any mistake in model,please comment me.","a393d04d":"Hi everyone ! \nThis's my first kernel in kaggel ! \nif there is any suggestions and advices please feel free to tell me .","e738ab9f":"* **Price range values","5cea7340":"* Drop this unusual application that I faced in data"}}