{"cell_type":{"5bf6f325":"code","092d0421":"code","0d2717dd":"code","df150ef0":"code","d898e884":"code","1315955e":"code","7b8c895b":"code","dc1bfa44":"code","ba6721b5":"code","d7bf3c2a":"code","10195141":"code","c8877a46":"code","6fe38da2":"code","e0258ad1":"code","13922d1a":"code","8136436a":"code","f65c39b0":"code","4e561539":"code","11b704fb":"code","4d1c8ec1":"markdown","74a7351e":"markdown","58189331":"markdown"},"source":{"5bf6f325":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","092d0421":"df=pd.read_csv(\"\/kaggle\/input\/imdb-dataset-of-50k-movie-reviews\/IMDB Dataset.csv\")","0d2717dd":"df.head(2)","df150ef0":"df['review']","d898e884":"sent_1=df['review'].values[1]\nprint(sent_1)\nprint(\"=\"*100)\nsent_10=df['review'].values[10]\nprint(sent_10)\nprint(\"=\"*100)\nsent_5=df['review'].values[5]\nprint(sent_5)","1315955e":"df.shape","7b8c895b":"df=df.drop_duplicates(keep=\"first\")","dc1bfa44":"df.shape","ba6721b5":"sent_1=df['review'].values[1]\nprint(sent_1)\nprint(\"=\"*100)\nsent_10=df['review'].values[10]\nprint(sent_10)\nprint(\"=\"*100)\nsent_5=df['review'].values[5]\nprint(sent_5)","d7bf3c2a":"def decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","10195141":"#Exluding NO, NOR, NOT from the stop words as they play keyrole\nstopwords= set(['br', 'the', 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"])","c8877a46":"from tqdm import tqdm\nimport re\nfrom bs4 import BeautifulSoup\npreprocessed_data=[]\nfor sent in tqdm(df['review'].values):\n    sent = re.sub(r\"http\\S+\", \"\", sent)\n    sent = BeautifulSoup(sent, 'lxml').get_text()\n    sent = decontracted(sent)\n    sent = re.sub(\"\\S*\\d\\S*\", \"\", sent).strip()\n    sent = re.sub('[^A-Za-z]+', ' ', sent)\n    sent = ' '.join(e.lower() for e in sent.split() if e.lower() not in stopwords)\n    preprocessed_data.append(sent.strip())\n    ","6fe38da2":"preprocessed_data[1]","e0258ad1":"type(preprocessed_data)","13922d1a":"preprocessed_data[10]","8136436a":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer","f65c39b0":"#BOW - \ncv=CountVectorizer()\ncv.fit(preprocessed_data)\nout=cv.transform(preprocessed_data)\nprint(type(out))\nprint(cv.get_feature_names()[:10])","4e561539":"#Bi-gram, tri-gram,n-gram\ncount_vec=CountVectorizer(ngram_range=(2,4))\ncount_vec.fit(preprocessed_data)\ncount_vec_out=count_vec.transform(preprocessed_data)\nprint(type(count_vec_out))\nprint(count_vec.get_feature_names()[:10])","11b704fb":"#TFIDF\ntf_=TfidfVectorizer()\nX_tf=tf_.fit(preprocessed_data)\nX_tf_transform=tf_.transform(preprocessed_data)\nprint(type(X_tf_transform))\nprint(X_tf.get_feature_names()[:10])","4d1c8ec1":"Notice that, we have the duplicated data. Let's remove the duplicated data first.","74a7351e":"Goal is to **\"Predict the number of positive and negative reviews using either classification or deep learning algorithms.\"**","58189331":"Let's preprocess the data before moving further"}}