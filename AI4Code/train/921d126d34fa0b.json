{"cell_type":{"942fc793":"code","d82deee0":"code","574f85c9":"code","fb433e84":"code","491c22ee":"code","962aad96":"code","087629c9":"code","6585c292":"code","7d31e9d4":"code","c52178f8":"code","0e356be2":"code","d97be182":"code","e8416488":"code","eac58651":"code","1829c4e6":"code","2e79a756":"code","5ae87de6":"code","a4051163":"code","4f2722a6":"code","486326c0":"code","a2b50fee":"code","84d650fb":"code","bd65eac3":"code","4e4b0d9d":"code","8957dbe3":"code","b632a592":"code","ad457bbd":"code","d210a25b":"code","86276f09":"code","a41f605d":"code","21815c80":"code","d6d9f855":"code","52e92af7":"code","f0558d0e":"code","efacbfc5":"code","9b8945f5":"code","43ae1c2b":"markdown","78d9a210":"markdown","57eedac5":"markdown","9418c7b0":"markdown","fbc2e1b6":"markdown","4f3f9a96":"markdown","4f3dad22":"markdown","9f6f99c9":"markdown","60fb663c":"markdown","7d6fc3ae":"markdown","264d9731":"markdown","213a82c2":"markdown","897b487e":"markdown","889593d8":"markdown","6b12259a":"markdown","5066d692":"markdown","c58b9d43":"markdown","7a942ca7":"markdown","dfe446a1":"markdown","e4064613":"markdown","a35e0bc9":"markdown","354afdd7":"markdown","b5b19e00":"markdown"},"source":{"942fc793":"!pip install lofo-importance","d82deee0":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\n\n#from sklearn.preprocessing import RobustScaler, MinMaxScaler\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os, sys\npd.set_option('display.max_columns', None)","574f85c9":"DEBUG = False\n# DEBUG = True\n\nPATH = \"..\/input\/ventilator-pressure-prediction\"\ntrain = pd.read_csv(f\"{PATH}\/train.csv\")\nprint(train.shape)\ntrain.head()","fb433e84":"if DEBUG:\n    df = train[:80*1000]\nelse:\n    df = train   \ndf.tail()","491c22ee":"# from Version 1: https:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance\ndef engineer_features(df):\n    df = df.copy()\n    df[\"u_in_sum\"] = df.groupby(\"breath_id\")[\"u_in\"].transform(\"sum\")\n    df[\"u_in_cumsum\"] = df.groupby(\"breath_id\")[\"u_in\"].cumsum()\n    df[\"u_in_std\"] = df.groupby(\"breath_id\")[\"u_in\"].transform(\"std\")\n    df[\"u_in_min\"] = df.groupby(\"breath_id\")[\"u_in\"].transform(\"min\")\n    df[\"u_in_max\"] = df.groupby(\"breath_id\")[\"u_in\"].transform(\"max\")\n    df[\"u_in_cumsum_reverse\"] = df[\"u_in_sum\"] - df[\"u_in_cumsum\"]\n    \n    df[\"u_in_lag1\"] = df.groupby(\"breath_id\")[\"u_in\"].shift(1)\n    df[\"u_in_lead1\"] = df.groupby(\"breath_id\")[\"u_in\"].shift(-1)\n    df[\"u_in_lag1_diff\"] = df[\"u_in\"] - df[\"u_in_lag1\"]\n    df[\"u_in_lead1_diff\"] = df[\"u_in\"] - df[\"u_in_lead1\"]\n    \n    df[\"u_out_sum\"] = df.groupby(\"breath_id\")[\"u_out\"].transform(\"sum\")\n    \n    df[\"time_passed\"] = df.groupby(\"breath_id\")[\"time_step\"].diff()\n    \n    return df\n    \ndf = engineer_features(df)","962aad96":"in_df = df[df[\"u_out\"] == 0].reset_index(drop=True)\nin_df.shape","087629c9":"from lofo import Dataset, LOFOImportance, plot_importance\nfrom sklearn.model_selection import GroupKFold\n\ncv = list(GroupKFold(n_splits=4).split(in_df, in_df[\"pressure\"], groups=in_df[\"breath_id\"]))\n\nfeatures = [\"time_step\", \"u_in\", \"R\", \"C\",\n            \"u_in_sum\", \"u_in_cumsum\", \"u_in_std\", \"u_in_min\", \"u_in_max\", \"u_in_cumsum_reverse\",\n            \"u_in_lead1\", \"u_in_lag1\", \"u_in_lag1_diff\", \"u_in_lead1_diff\",\n            \"u_out_sum\", \"time_passed\"]\n\nds = Dataset(in_df, target=\"pressure\", features=features,\n    feature_groups=None,\n    auto_group_threshold=0.9\n)","6585c292":"lofo_imp = LOFOImportance(ds, cv=cv, scoring=\"neg_mean_absolute_error\")\n\nimportance_df = lofo_imp.get_importance()\n# add coefficient of variation\nimportance_df['CoV'] = importance_df['importance_std'] \/ importance_df['importance_mean']\nimportance_df","7d31e9d4":"plot_importance(importance_df, figsize=(8, 8))","c52178f8":"def LOFO_features(df, features, threshold=0.9, figsize=(8,8)):\n    cv = list(GroupKFold(n_splits=4).split(df, in_df[\"pressure\"], groups=in_df[\"breath_id\"]))\n    ds = Dataset(df, target=\"pressure\", features=features,\n                feature_groups=None,\n                auto_group_threshold=threshold)\n    lofo_imp = LOFOImportance(ds, cv=cv, scoring=\"neg_mean_absolute_error\")\n\n    importance_df = lofo_imp.get_importance()\n    importance_df['CoV'] = importance_df['importance_std'] \/ importance_df['importance_mean']\n    \n#     plot_importance(importance_df, figsize=(12, 12))\n    plot_importance(importance_df, figsize=figsize, kind='box')\n    \n    return importance_df\n","0e356be2":"def lab_features(df):\n    '''\n    Small experiments during inspiratory phase (u_out=0) for some relevant features. \n    '''\n    df = df.copy()\n    ## Top 5 Permutation features from LSTM (LB 0.152 after rounding)\n    ## Refer: https:\/\/www.kaggle.com\/cdeotte\/lstm-feature-importance\n    df['u_in_diff1'] = df.groupby('breath_id')['u_in'].diff(1)\n    df['u_in_diff2'] = df.groupby('breath_id')['u_in'].diff(2)\n    df['u_in_diff3'] = df.groupby('breath_id')['u_in'].diff(3)\n    df['u_in_diff4'] = df.groupby('breath_id')['u_in'].diff(4)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    \n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4) \n    \n    df['u_in_cumsum'] = df.groupby('breath_id')['u_in'].cumsum()       \n    \n    df['u_in_first'] = df.groupby(['breath_id'])['u_in'].transform('first')\n    df['u_in_last'] = df.groupby(['breath_id'])['u_in'].transform('last')\n    df['u_in_max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['u_in_min'] = df.groupby(['breath_id'])['u_in'].transform('min')\n    df['u_in_mean'] = df.groupby(['breath_id'])['u_in'].transform('mean')\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']    \n   \n    df['R_cat'] = df['R'].astype(str)\n    df['C_cat'] = df['C'].astype(str)    \n    df['RC'] = df['R'].astype(str) + '__' + df['C'].astype(str)\n    df = pd.get_dummies(df)\n    \n    df = df.fillna(0)\n    \n    return df\n","d97be182":"if DEBUG:\n    df = train[:80*1000]\nelse:\n    df = train    \ndf.tail()","e8416488":"df.shape","eac58651":"df = lab_features(df)\nsorted(df.columns)","1829c4e6":"in_df = df[df[\"u_out\"] == 0].reset_index(drop=True)\nin_df.shape","2e79a756":"in_df","5ae87de6":"## Keep numerical R and C, but not inclue their dummies for now\nfeatures_1a = [col for col in df.columns if col not in ['pressure', 'id', 'breath_id',\n                                                    'C_cat_10', 'C_cat_20', 'C_cat_50', \n                                                    'R_cat_5', 'R_cat_20', 'R_cat_50',                                  \n                                                    ]]    \nlen(features_1a), sorted(features_1a) ","a4051163":"Dataset(in_df, target=\"pressure\", features=features_1a,\n    feature_groups=None,\n    auto_group_threshold=0.9\n)","4f2722a6":"importance_1a = LOFO_features(df = in_df,features = features_1a, threshold=1, figsize=(8,8))\nimportance_1a = importance_1a.reset_index(drop=True)\nimportance_1a","486326c0":"features_1b = [col for col in df.columns if col not in ['pressure', 'id', 'breath_id']]\nlen(features_1b), sorted(features_1b) ","a2b50fee":"Dataset(in_df, target=\"pressure\", features=features_1b,\n    feature_groups=None,\n    auto_group_threshold=0.9\n)","84d650fb":"importance_1b = LOFO_features(df = in_df,features = features_1b, threshold=1, figsize=(8,8))\nimportance_1b = importance_1b.reset_index(drop=True)\nimportance_1b","bd65eac3":"features_1c = [col for col in df.columns if col not in ['pressure', 'id', 'breath_id', 'C', 'R']]\nlen(features_1c), sorted(features_1c)","4e4b0d9d":"Dataset(in_df, target=\"pressure\", features=features_1c,\n    feature_groups=None,\n    auto_group_threshold=0.9\n),\n\nimportance_1c = LOFO_features(df = in_df,features = features_1c, threshold=1, figsize=(8,8))\nimportance_1c = importance_1c.reset_index(drop=True)\nimportance_1c","8957dbe3":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 8))\n\nax1.barh(importance_1a['feature'], importance_1a['importance_mean'])\nax1.invert_yaxis()\nax1.set_xlabel('LOFO Feature Importance')\nax1.title.set_text('1a.Numeric R\/C + Combinations')\nax1.annotate('Numeric R\/C still\\n top features', xy=(0.43, .82), xycoords='axes fraction', fontsize=16, color='green')\n\nax2.barh(importance_1b['feature'], importance_1b['importance_mean'])\nax2.invert_yaxis()\nax2.set_xlabel('LOFO Feature Importance')\nax2.title.set_text('1b.Numeric R\/C + Combinations + Dummies')\nax2.annotate('After their dummies included,\\nnumeric R\/C move down\\nto non-importance', xy=(0.15, .3), xycoords='axes fraction', fontsize=16, color='green')\n            \nax3.barh(importance_1c['feature'], importance_1c['importance_mean'])\nax3.invert_yaxis()\nax3.set_xlabel('LOFO Feature Importance')\nax3.title.set_text('1c.Numeric R\/C Removed')\nax3.annotate('R_cat_50 and\\n C_cat_10 move up', xy=(0.22, .75), xycoords='axes fraction', fontsize=16, color='red')\n#ax3.text(0.3, 0.8, 'R_cat_50 and C_cat_10 move up', transform=ax3.transAxes)\n\nfig.tight_layout()\nplt.show()","b632a592":"# from https:\/\/www.kaggle.com\/tenffe\/finetune-of-tensorflow-bidirectional-lstm\/notebook\ndef add_features(df):\n    df = df.copy()\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    ## The following two lines would be deleted per zhangxin' the https:\/\/www.kaggle.com\/tenffe\/finetune-of-tensorflow-bidirectional-lstm\/comments\n    ## They were just duplicate u_in_diffmax, u_in_diffmean, not intended u_out_diffmax and u_out_diffmean\n#     df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n#     df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    return df\n","ad457bbd":"if DEBUG:\n    df = train[:80*1000]\nelse:\n    df = train    \ndf.tail()","d210a25b":"df = add_features(df)","86276f09":"df.shape, sorted(df.columns)","a41f605d":"features_LSTM = [col for col in df.columns if col not in ['pressure', 'id', 'breath_id']]","21815c80":"in_df = df[df[\"u_out\"] == 0].reset_index(drop=True)\nin_df.shape","d6d9f855":"Dataset(in_df, target=\"pressure\", features=features_LSTM,\n    feature_groups=None,\n    auto_group_threshold=0.9\n)","52e92af7":"cv = list(GroupKFold(n_splits=4).split(in_df, in_df[\"pressure\"], groups=in_df[\"breath_id\"]))","f0558d0e":"ds = Dataset(in_df, target=\"pressure\", features=features_LSTM,\n    feature_groups=None,\n    auto_group_threshold=1\n)\n\nlofo_imp = LOFOImportance(ds, cv=cv, scoring=\"neg_mean_absolute_error\")\nimportance_LSTM_in = lofo_imp.get_importance().reset_index(drop=True)\nimportance_LSTM_in['CoV'] = importance_LSTM_in['importance_std'] \/ importance_LSTM_in['importance_mean']\nimportance_LSTM_in","efacbfc5":"importance_LSTM_in.to_csv('LOFO_importance_LSTM_in.csv')","9b8945f5":"# some negative features\nplot_importance(importance_LSTM_in, figsize=(12, 12))","43ae1c2b":"When `breath_id__u_in__diffmean` was removed from the LSTM, oof val_loss slightly reduced by 0.0004.","78d9a210":"## Lab Data","57eedac5":"## Re-loading data: ","9418c7b0":"# 50 Features by LSTM","fbc2e1b6":"## Side-by-Side Comparison","4f3f9a96":"-  `u_in_last` was the top 1 feature here even during the inspiratory phase `u_out` = 0\n-  `u_in_diff1` to `u_in_diff4` were not among the top 5 LOFO importance. \n    -  vs. top 4 [permutation features](https:\/\/www.kaggle.com\/cdeotte\/lstm-feature-importance) by LSTM. LOFO uses LGBM which is different from LSTM though.\n-  `u_in_lag4` had much less LOFO importance than `u_in_lag2`","4f3dad22":"### After adding categorical R and C dummies, the numerical raw features became less importance.","9f6f99c9":"## All Data `u_out` = 0 & 1\n(Took > 2hr and failed twice)","60fb663c":"## Function","7d6fc3ae":"# What we know","264d9731":"## References\n1. https:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance\n1. https:\/\/www.kaggle.com\/manabendrarout\/single-bi-lstm-model-pressure-predict-gpu-infer\n1. https:\/\/www.kaggle.com\/cdeotte\/lstm-feature-importance","213a82c2":"# SBAR\nSBAR communication technique was originally developed by the military and specifically for nuclear submarines. Now also popular in healthcare. ","897b487e":"### Set correlation threshold = 1, not auto-grouping features","889593d8":"[LOFO](https:\/\/github.com\/aerdem4\/lofo-importance) states some advantages:\n*  It is model agnostic\n*  It gives negative importance to features that hurt performance upon inclusion\n*  It can group the features, such as highly correlated features ","6b12259a":"## Lab1A: Numeric R\/C + Cat Combinations","5066d692":"## Situation\nThis post is a fork of [Ahmet Erdem's][1] notebook [here][2].\nLOFO (Leave One Feature Out) Importance recent results: **numerical** `R` and `C` were the top 2 features, both with more than 5 times higher importance than `u_in_cumsum`.\n## Background\n-  Both `R` and `C` only have 3 different values by design from the Google Ventilator data, lack of variations for a usual good continuous numerical feature.\nMany shared ventilator kernels only used **cateogrical** dummy coding of `R` and `C`, such as LGBM and LSTM models. \n-  Additionally, thanks to [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte), [LSTM permutation featrue importance](https:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance) has also been posted, where `u_in_diff1` to `u_in_diff4` were the top 4 features.\n\n## Assessment\nHow useful is LOFO here? Two simple experiments:\n-  `R` and `C`: the predictive ability of the raw numerical varaibles were basically absorbed by categorical codings.\n-  Evaluated on the same 50 features from the LSTM.\n    -  `u_in_diff1` to `u_in_diff4` were not among the top 5 features anymore by LOFO.\n    -  Categorical`R_50` and `C_10` were among the top 5 features.            \n    -  Most `u_out` derived new feature had little importance.\n    -  Negative importance: `breath_id__u_in__diffmean` \n        -  When it was removed from the LSTM, oof val_loss slightly reduced by 0.0004.\n\n## Recommendation\n* Categorical OHE are better than raw numerical features for `R` and `C`.\n* Feature Importance can differ a lot between LOFO and Permutation, or between LGBM and LSTM as they are very different models.\n* LOFO only needs few lines of codes and don't need TPU or other acceleratos. \n\n[1]: https:\/\/www.kaggle.com\/aerdem4\n[2]: https:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance\n[3]: https:\/\/www.kaggle.com\/manabendrarout\/single-bi-lstm-model-pressure-predict-gpu-infer\n","c58b9d43":"-  u_in_diff1 ~ u_in_diff4 were not the top 9 features by LOFO \n- The importance of the numerical R and C were reduced but still among top 5 features after including their combinations ","7a942ca7":"LOFO will run **LightGBM** as a default model, if a model is not passed to it.","dfe446a1":"The output is the same as the original [kernel](https:\/\/www.kaggle.com\/aerdem4\/google-ventilator-lofo-feature-importance)","e4064613":"## Lab1C: Remove Numeric R\/C","a35e0bc9":"# R\/C: Numeric vs Categorical Coding","354afdd7":"## Lab1B: Numeric + Cat Combinations + Dummies","b5b19e00":"My guess on CoV: Although some features had larger coefficient of variations, their boxplot sizes look comparable to other features. Given only 4 folds cross-validation,coefficient of variations might not be a good exclusion indicator. A small CoV (say <10%) and high importance mean is  likely to be a good inclusion indicator for a feature, such as `u_in_cumsum`  "}}