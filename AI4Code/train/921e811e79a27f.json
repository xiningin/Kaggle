{"cell_type":{"ff6496c6":"code","ebbd9ed2":"code","26d425a9":"code","e7244a7d":"code","e17a6f4e":"code","ab3a9988":"code","0e423f2d":"code","dbefc4a2":"code","677f2f7d":"code","35dc5846":"code","ae8f4fa2":"code","d4fc77f5":"code","88a4508f":"code","816dc761":"code","c250bcc4":"code","0f652a3e":"code","6c4e00ca":"code","188db670":"code","0971ddec":"code","32dc6d0c":"code","416b30de":"code","2a5c7dd5":"code","70d03cec":"code","6e317b57":"code","b0ba7de4":"code","e51b59b1":"code","50960aac":"code","c6560b84":"code","b2093afa":"code","c2490225":"code","073507ce":"markdown","b0fa06bf":"markdown","de8efcb3":"markdown","2272bd5b":"markdown","ffb47338":"markdown","ebf10f9f":"markdown","20e86925":"markdown","e77fb145":"markdown","52f92507":"markdown","c9b9eac2":"markdown","00c6c486":"markdown","c77e2990":"markdown","916c99dd":"markdown"},"source":{"ff6496c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebbd9ed2":"df = pd.read_csv('..\/input\/iris\/Iris.csv', index_col='Id')\ndf","26d425a9":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ndf['Species'] = label_encoder.fit_transform(df['Species'])\ndf","e7244a7d":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","e17a6f4e":"tf.__version__","ab3a9988":"df_val = df.sample(frac=0.2, random_state=33)\ndf_val","0e423f2d":"df_val.shape","dbefc4a2":"df_train = df.drop(df_val.index)\ndf_train","677f2f7d":"# A utility method to create a tf.data dataset from a Pandas Dataframe\ndef df_to_dataset(dataframe, target, shuffle=True, batch_size=10):\n  dataframe = dataframe.copy()\n  labels = dataframe.pop(target)\n  ds = tf.data.Dataset.from_tensor_slices((dict(dataframe), labels))\n  if shuffle:\n    ds = ds.shuffle(buffer_size=len(dataframe))\n  ds = ds.batch(batch_size)\n  return ds","35dc5846":"train_ds = df_to_dataset(dataframe=df_train, target='Species')\nval_ds = df_to_dataset(dataframe=df_val, target='Species')","ae8f4fa2":"for b in train_ds.take(1):\n    print(b)","d4fc77f5":"from tensorflow import feature_column\n\nfeature_columns = []\n# numeric cols\nfor col in df.columns:\n  if col == 'Species':\n    continue\n  feature_columns.append(feature_column.numeric_column(col, dtype=tf.float16)) \nfeature_columns","88a4508f":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.DenseFeatures(feature_columns))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(3, activation='softmax'))","816dc761":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', \n             metrics=['accuracy'])","c250bcc4":"model.evaluate(val_ds)","0f652a3e":"model.fit(train_ds, epochs=10, validation_data=val_ds)","6c4e00ca":"model.summary()","188db670":"model.evaluate(val_ds)","0971ddec":"model.predict(val_ds)","32dc6d0c":"np.argmax([0.2, 0.9, 0.01])","416b30de":"np.argmax([0.8, 0.19, 0.01])","2a5c7dd5":"np.argmax([0.08, 0.19, 0.71])","70d03cec":"predictions = np.argmax(model.predict(val_ds), axis=1)\npredictions","6e317b57":"len(predictions)","b0ba7de4":"df.keys()","e51b59b1":"df.columns","50960aac":"new_data = {\n    'SepalLengthCm': [5.0],\n    'SepalWidthCm': [1.2], \n    'PetalLengthCm': [3.5],\n    'PetalWidthCm': [0.7]\n}\nnew_data","c6560b84":"input_dict = {name: tf.convert_to_tensor([value]) for name, value in new_data.items()}\ninput_dict","b2093afa":"model.predict(input_dict)","c2490225":"np.argmax(model.predict(input_dict))","073507ce":"# predict a new example ","b0fa06bf":"# model summary ","de8efcb3":"# compile model\n\n1. optimizer\n2. loss\n3. metircs ","2272bd5b":"# prepare input layer ","ffb47338":"# get predickions as 0, 1, 2","ebf10f9f":"# evaluate (after training)","20e86925":"# define model ","e77fb145":"# evalute before training (evalute on random wieghts) ","52f92507":"# import Keras","c9b9eac2":"# get predictions ","00c6c486":"# train the model using fit fucntion ","c77e2990":"# convert dataframe to tensor data ","916c99dd":"# split data into train and val"}}