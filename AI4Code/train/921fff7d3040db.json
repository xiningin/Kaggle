{"cell_type":{"726302d8":"code","d27fa343":"code","f4c8938d":"code","c2b71693":"code","66630b91":"code","31931db9":"code","bc22362e":"code","3b4108b7":"code","9acef7a5":"code","38fa3588":"code","90ca4e81":"code","1ec0600c":"code","18c7da8f":"code","53be89d6":"code","62dc0b10":"code","cc47161e":"code","c33feeec":"code","9798aeb9":"code","2a6bbc96":"code","56677330":"code","294b9287":"code","2127a234":"markdown","e7042caa":"markdown","c54856ee":"markdown","ebbd8a86":"markdown","ed1e3f92":"markdown","9a5f2c45":"markdown","e67309df":"markdown","92c64ae5":"markdown","0ae1c830":"markdown","8c661d0b":"markdown"},"source":{"726302d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    print(dirname)","d27fa343":"import pandas as pd\nimport os\nimport email\nimport email.policy\nfrom bs4 import BeautifulSoup\nimport regex as re\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, roc_auc_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","f4c8938d":"ham_files = os.listdir('\/kaggle\/input\/ham-and-spam-dataset\/ham\/')\nprint(\"Number of ham files:\", len(ham_files))\n\nspam_files = os.listdir('\/kaggle\/input\/ham-and-spam-dataset\/spam\/')\nprint(\"Number of spam files:\", len(spam_files))\n\nprint(\"Precentage of spam files:\", round(len(spam_files)*100\/(len(ham_files)+len(spam_files)), 2))\n\n#draw plot\nnames = ['Ham emails', 'Spam emails']\nvalues = [len(ham_files),len(spam_files)]\nplt.bar(names, values)\nplt.show()","c2b71693":"def load_email(path, filename):\n    with open(os.path.join(path, filename), 'rb') as file:\n          email_file = email.parser.BytesParser(policy=email.policy.default).parse(file)\n    return email_file\n\nham_emails = [load_email('\/kaggle\/input\/ham-and-spam-dataset\/ham\/', filename) for filename in ham_files]\nspam_emails = [load_email('\/kaggle\/input\/ham-and-spam-dataset\/spam\/', filename) for filename in spam_files]","66630b91":"print(ham_emails[2].get_content())","31931db9":"import re\n\ndef cleanhtml(raw_html):\n  cleanr = re.compile('<.*?>')\n  cleantext = re.sub(cleanr, '', raw_html)\n  return cleantext\n\nspam_df = []\nfor email in spam_emails:\n    try:\n        if email.get_content_type() == 'text\/plain' or email.get_content_type() == 'text\/html' :\n            l = email.get_content()\n            l = cleanhtml(l)\n            l = l.replace('\\n',' ')\n            s = re.sub(r\"[^a-zA-Z0-9]+\", ' ', l)\n            spam_df.append(s.lower())      \n    except LookupError: pass\nspam_df = pd.DataFrame(spam_df, columns = ['Content'])\nspam_df['Label'] = 0\nspam_df.head()","bc22362e":"spam_df.shape","3b4108b7":"ham_df = []\nfor email in ham_emails:\n    try:\n        if email.get_content_type() == 'text\/plain' or email.get_content_type() == 'text\/html' :\n            l = email.get_content()\n            l = cleanhtml(l)\n            l = l.replace('\\n',' ')\n            s = re.sub(r\"[^a-zA-Z0-9]+\", ' ', l)\n            ham_df.append(s.lower())      \n    except LookupError: pass\nham_df = pd.DataFrame(ham_df, columns = ['Content'])\nham_df['Label'] = 1\nham_df.head()","9acef7a5":"type(df.iloc[3]['Label'])","38fa3588":"df = pd.concat([ham_df,spam_df], axis=0)\ndf = df.sample(frac=1)\ndf.head(10)","90ca4e81":"for i in df['Content']:\n    if type(i) != str:\n        print(type(i),end = ',')","1ec0600c":"from sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nx = vectorizer.fit_transform(df[\"Content\"])\nx = x.toarray()\n\nX = []            #Vector after encode email\nfor i in x:\n    X.append(i.flatten())\nY = df['Label']   #Email label 0: is spam and 1 is ham\n","18c7da8f":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n\nprint(\"Number of emails in traning: \",len(y_train))\nprint(\"Number of emails in testing: \",len(y_test))","53be89d6":"#Decision tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n\nclf_DT = DecisionTreeClassifier()\nclf_DT = clf_DT.fit(X_train,y_train)\n","62dc0b10":"y_pred = clf_DT.predict(X_train)\nprint(\"Accuracy in training dataset:\",metrics.accuracy_score(y_train, y_pred))\n\ny_pred = clf_DT.predict(X_test)\nprint(\"Accuracy in testing dataset:\",metrics.accuracy_score(y_test, y_pred))\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","cc47161e":"#KNN model\nfrom sklearn import neighbors\n\nclf_KNN = neighbors.KNeighborsClassifier(n_neighbors = 10,weights = 'distance',p = 2,algorithm='brute')\nclf_KNN.fit(X_train, y_train)","c33feeec":"y_pred = clf_KNN.predict(X_train)\nprint (\"Accuracy in training dataset:\",(100*accuracy_score(y_train, y_pred)))\n\ny_pred = clf_KNN.predict(X_test)\nprint (\"Accuracy in testing dataset:\",(100*accuracy_score(y_test, y_pred)))\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","9798aeb9":"#NB model \nfrom sklearn.naive_bayes import GaussianNB\nclf_NB = GaussianNB()\nclf_NB.fit(X_train, y_train)","2a6bbc96":"y_pred = clf_NB.predict(X_train)\nprint (f\"Accuracy in testing dataset:\",(100*accuracy_score(y_train, y_pred)))\n\ny_pred = clf_NB.predict(X_test)\nprint (f\"Accuracy in testing dataset:\",(100*accuracy_score(y_test, y_pred)))\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","56677330":"def preprocess_input(demo_email):\n    demo = re.sub(r\"[^a-zA-Z0-9]+\", ' ', demo_email)\n    demo = vectorizer.transform([demo_email])\n    return demo\n\ndef printRes(y_pred):\n    if y_pred[0] == 0:\n        return 'This is spam email'\n    return \"This is ham email\"\n\ndef demo(email,label):\n\n    demo_email = preprocess_input(email)\n\n    y_DT = clf_DT.predict(demo_email)\n    y_KNN = clf_KNN.predict(demo_email)\n    y_NB = clf_NB.predict(demo_email.toarray())\n\n    print('Ground truth:       ',printRes([int(label)]))\n    print('Decision tree model:',printRes(y_DT))\n    print('KNN model:          ',printRes(y_KNN))\n    print('Naive Bayes model:  ',printRes(y_NB))\n    print('\\nEmail content:\\n',email)\n  ","294b9287":"for i in range(10):\n    print(f'Email number {i} \\n')\n    randint = np.random.randint(len(df) - 1)\n    demo_email = df.iloc[randint]['Content']\n    label = df.iloc[randint]['Label']\n    demo(demo_email,label)\n    print(\"-------------------\\n\")\n","2127a234":"# 5. Decision tree model","e7042caa":"|                              | Decision tree | KNN     | Naive Bayes |\n|------------------------------|---------------|---------|-------------|\n| Accuracy in training dataset | 100%          | 100%  | 100%        |\n| Accuracy in testing dataset  | 95.27%        | 95.27%  | 98.77%      |","c54856ee":"# 4. Encode and split data","ebbd8a86":"# 6. KNN model","ed1e3f92":"# 3. Preprocess\n","9a5f2c45":"# 2. Load emails","e67309df":"# 7. Naive Bayes model","92c64ae5":"# 1. Setup environment","0ae1c830":"# 8. Compare the models","8c661d0b":"# 9. Demo"}}