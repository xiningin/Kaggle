{"cell_type":{"04942e7c":"code","6f2affcf":"code","b9566855":"code","d4992eb1":"code","ed00d7c5":"code","221758f2":"code","46e7f36b":"code","4f4aa6f3":"code","36dad2f8":"code","419e1e83":"code","dff9a052":"code","00ab1089":"code","87d24ce6":"code","741242cf":"code","c98a24f8":"markdown","67bf0528":"markdown","3883c711":"markdown","ae7a1e15":"markdown","e4d0e897":"markdown","ed2135cd":"markdown","0e1e517e":"markdown","7350c3a3":"markdown","22f3872c":"markdown","20d3ea44":"markdown","374fff6d":"markdown","73002506":"markdown","da1a755f":"markdown","c7ebbd4b":"markdown","619ad650":"markdown","19cc7526":"markdown","aab5136b":"markdown","04881e07":"markdown","64c824ac":"markdown","a4bc3ad7":"markdown","1fb4a058":"markdown","71ff05e4":"markdown","0df65913":"markdown","f6bafe68":"markdown","3aa1769e":"markdown","98424b23":"markdown","a8935da5":"markdown"},"source":{"04942e7c":"!pip install astropy\n\n#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom mpl_toolkits.mplot3d import Axes3D\nimport random\nimport time\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\nfrom scipy.io import loadmat\nimport nibabel as nib\nimport csv\nfrom astropy.visualization import astropy_mpl_style\nfrom astropy.utils.data import get_pkg_data_filename\nfrom astropy.io import fits\nimport astropy\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\nimport skimage\nfrom skimage.morphology import convex_hull_image, erosion\nfrom IPython import display\nfrom scipy.ndimage import gaussian_filter\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nimport matplotlib.patches as patches\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#MUSIC PROCESS\nimport pydub\nfrom scipy.io.wavfile import read, write\nimport librosa\nimport librosa.display\nimport IPython\nfrom IPython.display import Audio\nimport scipy\nfrom scipy import signal\nfrom scipy.fft import fftshift\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN,\\\nLSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, Convolution2D, ZeroPadding2D,Reshape, Conv2DTranspose,\\\nLeakyReLU, GaussianNoise, GlobalMaxPooling2D, ReLU, Input, Concatenate\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.datasets import mnist\nimport keras\nfrom keras.models import Model\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","6f2affcf":"FITS_PATH = Path(\"..\/input\/proxima-centauri-b-exp-center-objects-esa\/HST-OPTICAL\")\nALL_FITS = list(FITS_PATH.glob(r\"**\/*.fits\"))\n\nprint(\"LEN FITS LIST: \", len(ALL_FITS))\n\nFITS_SERIES = pd.Series(ALL_FITS,name=\"FITS\").astype(str)\n\nprint(\"LEN FITS SERIES: \", len(FITS_SERIES))","b9566855":"IMG_DATA_LIST = []\nFLATTEN_DATA_LIST = []\nSCI_KEYS_LIST = []\nPRIMARY_KEYS_LIST = []\nSCI_COMMENTS_LIST = []\nPRIMARY_COMMENTS_LIST = []\nREADING_LIST = []\nTABLEHDU_LIST = []\n\nfor i_steps in range(len(FITS_SERIES)):\n    \n    locals()[\"DOCUMENT_\" + str(i_steps)] = random.choice(list(FITS_SERIES.values))\n    locals()[\"READING_\" + str(i_steps)] = fits.open(locals()[\"DOCUMENT_\" + str(i_steps)])\n    \n    locals()[\"PRIMARY_KEYS_\" + str(i_steps)] = list(locals()[\"READING_\" + str(i_steps)][0].header.keys())\n    locals()[\"SCI_KEYS_\" + str(i_steps)] = list(locals()[\"READING_\" + str(i_steps)][1].header.keys())\n    \n    locals()[\"PRIMARY_KEYS_\" + str(i_steps)] = list(filter(None,locals()[\"PRIMARY_KEYS_\" + str(i_steps)]))\n    locals()[\"SCI_KEYS_\" + str(i_steps)] = list(filter(None,locals()[\"SCI_KEYS_\" + str(i_steps)]))\n    \n    locals()[\"PRIMARY_COMMENT_\" + str(i_steps)] = locals()[\"READING_\" + str(i_steps)][0].header\n    locals()[\"SCI_COMMENT_\" + str(i_steps)] = locals()[\"READING_\" + str(i_steps)][1].header\n    \n    if (locals()[\"READING_\" + str(i_steps)][1].data).size < 10:\n        \n    \n        locals()['TABLEHDU_' + str(i_steps)] = locals()['READING_' + str(i_steps)][1].data\n        TABLEHDU_LIST.append(locals()['TABLEHDU_' + str(i_steps)])\n        \n    else:\n        \n        locals()['IMG_' + str(i_steps)] = locals()['READING_' + str(i_steps)][1].data\n        locals()['FLATTEN_' + str(i_steps)] = locals()['IMG_' + str(i_steps)].flatten()\n        \n        IMG_DATA_LIST.append(locals()['IMG_' + str(i_steps)])\n        FLATTEN_DATA_LIST.append(locals()['FLATTEN_' + str(i_steps)])\n        READING_LIST.append(locals()[\"READING_\" + str(i_steps)])\n        PRIMARY_KEYS_LIST.append(locals()[\"PRIMARY_KEYS_\" + str(i_steps)])\n        SCI_KEYS_LIST.append(locals()[\"SCI_KEYS_\" + str(i_steps)])\n        PRIMARY_COMMENTS_LIST.append(locals()[\"PRIMARY_COMMENT_\" + str(i_steps)])\n        SCI_COMMENTS_LIST.append(locals()[\"SCI_COMMENT_\" + str(i_steps)])","d4992eb1":"plt.style.use(\"dark_background\")","ed00d7c5":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\n_,THRESHOLD_BINARY_INV = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY_INV)\n_,THRESHOLD_TOZERO = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_TOZERO)\n_,THRESHOLD_TOZERO_INV = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_TOZERO_INV)\n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[1].set_title(\"BINARY\")\n\naxis[2].imshow(THRESHOLD_BINARY_INV,cmap=\"gray\")\naxis[2].set_title(\"BINARY_INV\")\n\naxis[3].imshow(THRESHOLD_TOZERO,cmap=\"gray\")\naxis[3].set_title(\"TOZERO\")\n\naxis[4].imshow(THRESHOLD_TOZERO_INV,cmap=\"gray\")\naxis[4].set_title(\"TOZERO_INV\")\n\nplt.tight_layout()\nplt.show()","221758f2":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_OTSU = cv2.threshold(GAUSSIAN_TARGET.astype(np.uint8),250,255,cv2.THRESH_OTSU)\n_,THRESHOLD_THRESH_TRUNC = cv2.threshold(GAUSSIAN_TARGET.astype(np.uint8),250,255,cv2.THRESH_TRUNC)\n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(THRESHOLD_OTSU,cmap=\"gray\")\naxis[1].set_title(\"OTSU\")\n\naxis[2].imshow(THRESHOLD_THRESH_TRUNC,cmap=\"gray\")\naxis[2].set_title(\"TRUNC\")\n\nplt.tight_layout()\nplt.show()","46e7f36b":"figure,axis = plt.subplots(1,3,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCANNY_IMG = cv2.Canny(THRESHOLD_BINARY.astype(np.uint8),10,150)\n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[1].set_title(\"THRESHOLD_BINARY\")\n\naxis[2].imshow(CANNY_IMG,cmap=\"gray\")\naxis[2].set_title(\"CANNY\")","4f4aa6f3":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCANNY_IMG = cv2.Canny(THRESHOLD_BINARY.astype(np.uint8),10,150)\n\nDIFFERENT_IMG_THRESHOLD = cv2.absdiff(GAUSSIAN_TARGET.astype(np.uint8),THRESHOLD_BINARY.astype(np.uint8))\nDIFFERENT_IMG_CANNY = cv2.absdiff(GAUSSIAN_TARGET.astype(np.uint8),CANNY_IMG)\n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[1].set_title(\"THRESHOLD_BINARY\")\n\naxis[2].imshow(CANNY_IMG,cmap=\"gray\")\naxis[2].set_title(\"CANNY\")\n\naxis[3].imshow(DIFFERENT_IMG_CANNY,cmap=\"gray\")\naxis[3].set_title(\"DIFFERENT_CANNY\")\n\naxis[4].imshow(DIFFERENT_IMG_THRESHOLD,cmap=\"gray\")\naxis[4].set_title(\"DIFFERENT_THRESHOLD\")","36dad2f8":"figure,axis = plt.subplots(1,2,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\nEQU_IMG = cv2.equalizeHist(GAUSSIAN_TARGET.astype(np.uint8))\n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(EQU_IMG,cmap=\"gray\")\naxis[1].set_title(\"EQUALIZING\")","419e1e83":"figure,axis = plt.subplots(1,4,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCONTOURS_IMG,_ = cv2.findContours(THRESHOLD_BINARY.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nMAIN_COPY = THRESHOLD_BINARY.copy()\nMAIN_COPY_DRAW = GAUSSIAN_TARGET.copy()\n\nfor cnt in CONTOURS_IMG:\n    \n    approx = cv2.approxPolyDP(cnt, 0.09 * cv2.arcLength(cnt,True),True)\n    \n    Draw_Func = cv2.drawContours(MAIN_COPY_DRAW,[approx],0,(255,0,0),10)\n    \n    Counting_Approx = approx.ravel()\n    \n    i = 0\n    \n    for j in Counting_Approx:\n        if (i % 2 == 0):\n            x = Counting_Approx[i]\n            y = Counting_Approx[i + 1]\n            \n            string_coor = str(x) + \" \" + str(y)\n            \n            if (i == 0):\n                cv2.putText(MAIN_COPY,f\"{x},{y}\",(x,y),cv2.FONT_HERSHEY_DUPLEX,1.8,(255,0,255))\n            else:\n                cv2.putText(MAIN_COPY,\"+\",(x,y),cv2.FONT_HERSHEY_DUPLEX,1.8,(255,0,255))\n                \n        i = i + 1 \n        \n\naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(Drawing_IMG,cmap=\"hot\")\naxis[1].set_title(\"LIGHTING CENTER\")\n\naxis[2].imshow(MAIN_COPY,cmap=\"gray\")\naxis[2].set_title(\"POLY_COORDINATES\")\n\naxis[3].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[3].set_title(\"BINARY\")\n\nplt.tight_layout()\nplt.show()","dff9a052":"figure,axis = plt.subplots(1,4,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCONTOURS_IMG,_ = cv2.findContours(THRESHOLD_BINARY.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nMAIN_COPY = THRESHOLD_BINARY.copy()\nMAIN_COPY_DRAW = THRESHOLD_BINARY.copy()\n\nfor cnt in CONTOURS_IMG:\n    \n    approx = cv2.approxPolyDP(cnt, 0.09 * cv2.arcLength(cnt,True),True)\n    \n    Draw_Func = cv2.drawContours(MAIN_COPY,[approx],0,(255,0,0),10)\n    \n    Counting_Approx = approx.ravel()\n    \n    for x_cor in approx:\n        coor_x = int(x_cor[0][0])\n        coor_y = int(x_cor[0][1])\n        Marker_IMG = cv2.drawMarker(MAIN_COPY_DRAW,(coor_x,coor_y),(255,0,0),thickness=5,markerType=cv2.MARKER_CROSS)\n        \n        \naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(Draw_Func,cmap=\"hot\")\naxis[1].set_title(\"LIGHTING CENTER\")\n\naxis[2].imshow(Marker_IMG,cmap=\"prism\")\naxis[2].set_title(\"MARKERS\")\n\naxis[3].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[3].set_title(\"BINARY\")\n\nplt.tight_layout()\nplt.show()","00ab1089":"figure,axis = plt.subplots(1,5,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCONTOURS_IMG,_ = cv2.findContours(THRESHOLD_BINARY.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\nMAIN_COPY = THRESHOLD_BINARY.copy()\nMAIN_COPY_DRAW = THRESHOLD_BINARY.copy()\nMAIN_COPY_LINE = THRESHOLD_BINARY.copy()\n\nIMG_H = MAIN_COPY_LINE.shape[0] \nIMG_W = MAIN_COPY_LINE.shape[1] \/ 2\n\nfor cnt in CONTOURS_IMG:\n    \n    approx = cv2.approxPolyDP(cnt, 0.09 * cv2.arcLength(cnt,True),True)\n    \n    Draw_Func = cv2.drawContours(MAIN_COPY,[approx],0,(255,0,0),10)\n    \n    Counting_Approx = approx.ravel()\n    \n    for x_cor in approx:\n        coor_x = int(x_cor[0][0])\n        coor_y = int(x_cor[0][1])\n        Marker_IMG = cv2.drawMarker(MAIN_COPY_DRAW,(coor_x,coor_y),(255,0,0),thickness=5,markerType=cv2.MARKER_CROSS)\n        Line_IMG = cv2.line(MAIN_COPY_LINE,(int(IMG_H),int(IMG_W)),(coor_x,coor_y),(255,255,255),5)\n        \n        \naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(Draw_Func,cmap=\"hot\")\naxis[1].set_title(\"LIGHTING CENTER\")\n\naxis[2].imshow(Marker_IMG,cmap=\"prism\")\naxis[2].set_title(\"MARKERS\")\n\naxis[3].imshow(THRESHOLD_BINARY,cmap=\"gray\")\naxis[3].set_title(\"BINARY\")\n\naxis[4].imshow(Line_IMG,cmap=\"gray\")\naxis[4].set_title(\"LINE\")\n\nplt.tight_layout()\nplt.show()","87d24ce6":"figure,axis = plt.subplots(1,2,figsize=(20,20))\n\nTARGET_IMAGE = IMG_12\nGAUSSIAN_TARGET = gaussian_filter(TARGET_IMAGE,sigma=4)\n\n_,THRESHOLD_BINARY = cv2.threshold(GAUSSIAN_TARGET,250,255,cv2.THRESH_BINARY)\nCONTOURS_IMG,_ = cv2.findContours(THRESHOLD_BINARY.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(GAUSSIAN_TARGET)\n\nMAIN_COPY = THRESHOLD_BINARY.copy()\n\nfor (i, c) in enumerate(CONTOURS_IMG):\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Light_Circle = cv2.circle(MAIN_COPY, (int(cX), int(cY)), int(radius),(255, 255, 255), 2)\n    \naxis[0].imshow(GAUSSIAN_TARGET,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(Light_Circle,cmap=\"jet\")\naxis[1].set_title(\"LIGHTING_CIRCLE\")","741242cf":"figure,axis = plt.subplots(1,4,figsize=(20,20))\n\nTARGET_IMAGE_ONE = IMG_12\nTARGET_IMAGE_TWO = IMG_55\nGAUSSIAN_TARGET_ONE = gaussian_filter(TARGET_IMAGE_ONE,sigma=4)\nGAUSSIAN_TARGET_TWO = gaussian_filter(TARGET_IMAGE_TWO,sigma=4)\n\n_,THRESHOLD_BINARY_ONE = cv2.threshold(GAUSSIAN_TARGET_ONE,250,255,cv2.THRESH_BINARY)\n_,THRESHOLD_BINARY_TWO = cv2.threshold(GAUSSIAN_TARGET_TWO,250,255,cv2.THRESH_BINARY)\nCONTOURS_IMG_ONE,_ = cv2.findContours(THRESHOLD_BINARY_ONE.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\nCONTOURS_IMG_TWO,_ = cv2.findContours(THRESHOLD_BINARY_TWO.astype(np.uint8),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(GAUSSIAN_TARGET_ONE)\n\nMAIN_COPY_ONE = THRESHOLD_BINARY_ONE.copy()\n\nfor (i, c) in enumerate(CONTOURS_IMG_ONE):\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Light_Circle = cv2.circle(MAIN_COPY_ONE, (int(cX), int(cY)), int(radius),(255, 255, 255), 3)\n\n\n\n(minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(GAUSSIAN_TARGET_TWO)\nMAIN_COPY_TWO = THRESHOLD_BINARY_TWO.copy()\n\nfor (i, c) in enumerate(CONTOURS_IMG_TWO):\n    (x, y, w, h) = cv2.boundingRect(c)\n    ((cX, cY), radius) = cv2.minEnclosingCircle(c)\n    Light_Circle_TWO = cv2.circle(MAIN_COPY_TWO, (int(cX), int(cY)), int(radius),(255, 255, 255), 3)\n    \naxis[0].imshow(GAUSSIAN_TARGET_ONE,cmap=\"gray\")\naxis[0].set_title(\"ORIGINAL\")\n\naxis[1].imshow(Light_Circle,cmap=\"hot\")\naxis[1].set_title(\"LIGHTING_CIRCLE\")\n\naxis[2].imshow(GAUSSIAN_TARGET_TWO,cmap=\"gray\")\naxis[2].set_title(\"ORIGINAL\")\n\naxis[3].imshow(Light_Circle_TWO,cmap=\"hot\")\naxis[3].set_title(\"LIGHTING_CIRCLE\")","c98a24f8":"#### DIFFERENT","67bf0528":"#### MAIN","3883c711":"### THANK YOU SO MUCH","ae7a1e15":"#### POLY 2D POINTS","e4d0e897":"![](https:\/\/research.reading.ac.uk\/marine-ecosystem\/wp-content\/uploads\/sites\/68\/logos\/42_digital_logo_dark_blue_sign_A.png)","ed2135cd":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/9\/95\/New_shot_of_Proxima_Centauri%2C_our_nearest_neighbour.jpg)","0e1e517e":"* We will show general examples through a single image. Then we will compare it with another picture","7350c3a3":"* we marked all bright areas based on binary class only","22f3872c":"* ICRS coord. (ep=J2000) : 14 29 42.9451234609 -62 40 46.170818907 (Optical) [ 0.0577 0.1050 90 ] A 2018yCat.1345....0G\n\nhttp:\/\/simbad.u-strasbg.fr\/simbad\/sim-ref?bibcode=2018yCat.1345....0G\n\n* FK4 coord. (ep=B1950 eq=1950) : 14 26 18.9987217508 -62 28 04.393715964 [ 0.0577 0.1050 90 ]\n\n* Gal coord. (ep=J2000) : 313.9398596229609 -01.9271500019602 [ 0.0577 0.1050 90 ]\n\n* Proper motions mas\/yr : -3781.306 769.766 [0.085 0.189 90]\n\nhttp:\/\/simbad.u-strasbg.fr\/simbad\/sim-ref?bibcode=2018yCat.1345....0G","20d3ea44":"#### END OF THE PROJECT\n\n#### PLEASE GET TO THIS STAGE BY CHECKING THE PREVIOUS SECTIONS\n\n* https:\/\/www.kaggle.com\/brsdincer\/proxima-centauri-b-analysis-all-process-fits-i\n\n* https:\/\/www.kaggle.com\/brsdincer\/proxima-centauri-b-all-data-analysis-ii","374fff6d":"#### THRESHOLD","73002506":"# LIGHT-DISTANCE VISION","da1a755f":"* We supported it with another example","c7ebbd4b":"![](https:\/\/earthsky.org\/upl\/2017\/06\/neighbors-closest-to-sun.jpg)\n\n* Bottom line: Proxima Centauri, one of three stars in the Alpha Centauri system, is the nearest star to our sun. It\u2019s 4.22 light-years away.","619ad650":"* we drew the bright areas and determined the points outside the main center and gave coordinate numbers","19cc7526":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSE8B3-dtSdbcGCskxy9oF2kAMkP99zwXOQKA&usqp=CAU)","aab5136b":"* THE BEST SEEMS BINARY CLASS FOR LIGHT-DISTANCE PROCESS\n* WE CAN ALSO TRY SIMPLE TOZERO","04881e07":"* We will use IMG_12\n* We will use non-slide image","64c824ac":"#### EQUALIZING HISTOGRAM","a4bc3ad7":"* that's the reality we're trying to capture\n* these methods show the diameter and distance of the glows\n* this ring can also contain the busiest areas","1fb4a058":"#### CANNY","71ff05e4":"#### RE-BUILTING OBJECTS","0df65913":"# INFORMATION PROXIMA CENTAURI","f6bafe68":"# PATH PROCESS AND RE-BUILTING","3aa1769e":"*  you can specify the center point as you wish, a line is drawn from that center point to all luminances","98424b23":"# PACKAGES AND LIBRARIES","a8935da5":"# HISTORY\n\n#### Proxima Centauri b \/ EXP Center Objects \/ ESA\n\nAll files converted as FITS\n\n#### Context\n\n* Proxima Centauri b (also called Proxima b or Alpha Centauri Cb) is an exoplanet orbiting in the habitable zone of the red dwarf star Proxima Centauri, which is the closest star to the Sun and part of a triple star system. It is approximately 4.2 light-years (4.0\u00d71013 km) from Earth in the constellation Centaurus, making it and Proxima c the closest known exoplanets to the Solar System.\n\n* Proxima Centauri b orbits the star at a distance of roughly 0.05 AU (7,500,000 km; 4,600,000 mi) with an orbital period of approximately 11.2 Earth days, and has an estimated mass of at least 1.2 times that of Earth. It is subject to stellar wind pressures of more than 2,000 times those of Earth from the solar wind, and its habitability has not yet been definitively established.\n\n* The planet's discovery was announced in August 2016. It was found using the radial velocity method, where periodic Doppler shifts of the parent star's spectral lines suggest an orbiting object. From these readings, the parent star's radial velocity relative to the Earth is varying with an amplitude of about 1.4 metres (4.5 feet) per second. According to Guillem Anglada\u2010Escud\u00e9, the planet's proximity to Earth offers an opportunity for robotic exploration with the Starshot project or, at least, \"in the coming centuries\".\n\n* Without its orbital inclination known, Proxima Centauri b's exact mass is unknown. If its orbit is nearly edge-on, it would have a mass of 1.173\u00b10.086 M\u2295 (Earth masses).Statistically, there is a roughly 90% chance that its mass is less than 2.77 M\u2295.\n\n* In May 2019, a paper presenting recent Spitzer Space Telescope data concluded that Proxima Centauri b did not transit its sun relative to Earth, and attributed previous transit detections to correlated noise"}}