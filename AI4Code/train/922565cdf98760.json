{"cell_type":{"31d430ce":"code","478f3b65":"code","58e9f09f":"code","f5d840d5":"code","a093cf02":"code","52022e5f":"code","5f20309e":"code","f5abf30d":"code","fef3c160":"code","f0b44fa3":"code","ec323b2a":"code","8bdecb03":"code","d744332e":"code","46f272ee":"code","ec3214d4":"code","35dfec84":"code","bfa3994e":"code","e93d2fdc":"code","b2fb25c8":"code","25bc59cd":"code","26b77332":"code","c4532951":"code","041afaed":"code","89b7e77b":"code","83dd80a1":"code","f5f5b94e":"code","0eb31e1a":"code","58c6609c":"code","3d8e479d":"code","30a0f72b":"code","35b7e7af":"code","8e8107a1":"code","4c91b25e":"code","c8aa6ae6":"code","81608948":"code","797168a5":"code","7bc1ce29":"code","4f59ccb9":"code","e2060ed8":"markdown","64b52f98":"markdown","c31567ee":"markdown","384230cd":"markdown","970b12f3":"markdown","1f207bdb":"markdown","914c9862":"markdown","5ddeb847":"markdown","08cdfa6f":"markdown","f1511e46":"markdown","45a0c077":"markdown","19a8a10d":"markdown"},"source":{"31d430ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport sqlite3\nfrom sqlalchemy import create_engine\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\ninput_files=os.listdir('\/kaggle\/input\/formula-1-world-championship-1950-2020')\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","478f3b65":"conn = sqlite3.connect(\"f1_info.db\")","58e9f09f":"engine = create_engine(\"sqlite:\/\/\/f1_info.db\")","f5d840d5":"def preprocess_cat_cols(df):\n    cat_col=df.select_dtypes(include='object').columns\n    for col in cat_col:\n        for val in df[col].tolist():\n            try:\n                if '\\\\N' in val:\n                    df[col].replace({'\\\\N':'nan'}, inplace=True)\n                    break\n            except:\n                print('Column:',col,'Value:',val)\n        df[col].str.strip()\n        \n        \ndef duplicate_index(df):\n    dup=df.duplicated()\n    indices=dup[dup==True].index\n    return indices","a093cf02":"ckt=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('circuits.csv')])\n#Column alt has nothing but '\\N' so we drop that column\npreprocess_cat_cols(ckt)\nprint(ckt.head())\nckt.to_sql('circuit', con=engine, if_exists='replace')","52022e5f":"constr=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructors.csv')])\npreprocess_cat_cols(constr)\nprint(constr.head())\nconstr.to_sql('constructors', con=engine, if_exists='replace')","5f20309e":"constr_rsl=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructor_results.csv')])\npreprocess_cat_cols(constr_rsl)\nprint(constr_rsl.head())\nconstr_rsl.to_sql('constructor_results', con=engine, if_exists='replace')","f5abf30d":"constr_std=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('constructor_standings.csv')])\npreprocess_cat_cols(constr_std)\nprint(constr_std)\nconstr_std.to_sql('constr_std', con=engine, if_exists='replace')\n","fef3c160":"drivers=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('drivers.csv')])\n\ndrivers['name']=drivers['forename']+' '+drivers['surname']\ndrivers.drop(['forename','surname'],axis=1,inplace=True)\n\npreprocess_cat_cols(drivers)\nprint(drivers.head())\ndrivers.to_sql('drivers', con=engine, if_exists='replace')","f0b44fa3":"drivers_std=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('driver_standings.csv')])\npreprocess_cat_cols(drivers_std)\nprint(drivers_std)\ndrivers_std.to_sql('drivers_std', con=engine, if_exists='replace')","ec323b2a":"lap_time=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('lap_times.csv')])\npreprocess_cat_cols(lap_time)\nprint(lap_time.head())\nlap_time.to_sql('lap_time', con=engine, if_exists='replace')","8bdecb03":"pit_stops=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('pit_stops.csv')])\npreprocess_cat_cols(pit_stops)\nprint(pit_stops.head())\npit_stops.to_sql('pit_stops', con=engine, if_exists='replace')","d744332e":"quali=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('qualifying.csv')])\npreprocess_cat_cols(quali)\nprint(quali.head())\nquali.to_sql('quali', con=engine, if_exists='replace')","46f272ee":"races=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('races.csv')])\npreprocess_cat_cols(races)\nprint(races)\nraces.to_sql('races', con=engine, if_exists='replace')","ec3214d4":"results=pd.read_csv('\/kaggle\/input\/formula-1-world-championship-1950-2020\/'+input_files[input_files.index('results.csv')])\nresults.position.replace({'\\\\N':1000},inplace=True)\nresults['position']=results.position.astype('int32').tolist()\ngrouped=results.groupby(by='raceId')['position']\nvalues=grouped.transform(lambda x: len(x))\nindices_to_replace=results[results.position==1000].index.tolist()\nvalues_to_replace=values[indices_to_replace]\nresults['position'].iloc[indices_to_replace]=values_to_replace\n\npreprocess_cat_cols(results)\nprint(results.head())\nresults.to_sql('results', con=engine, if_exists='replace')","35dfec84":"query=\"\"\"\n        select name,r.constructorId,count(raceId) wins from constructors c\n        join results r on c.constructorId=r.constructorId\n        where r.position=1\n        group by r.constructorId\n        order by wins desc\n\"\"\"","bfa3994e":"team_race_wins=pd.read_sql_query(query,conn).copy()\nfig,ax=plt.subplots(figsize=(15,7))\nax=team_race_wins.wins.plot.bar(x='name',y='wins', color='tab:blue')\nax.set_xticks(range(team_race_wins.shape[0]))\nax.set_xticklabels(team_race_wins.name, fontsize=12)\nplt.xlabel('Constructors that have won atleast one race', fontsize=12)\nplt.ylabel('Number of race wins', fontsize=12);","e93d2fdc":"query=\"\"\"\n    select ssq.year, cs.name, max(ssq.total_pts) win_pts from\n    (select sq.constructorId, sq.year, sum(sq.pts) total_pts from\n    (select rs.constructorId,r.year,sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.raceId, rs.constructorId) sq\n    group by sq.constructorId,sq.year) ssq\n    join constructors cs\n    on ssq.constructorId=cs.constructorId\n    group by ssq.year\n\"\"\"","b2fb25c8":"q=pd.read_sql_query(query,conn)\nconstr_champs_by_year=q.copy()\n\nconstr_champs_by_team=constr_champs_by_year.name.value_counts()\n\nfig,ax=plt.subplots(figsize=(15,7))\nax=constr_champs_by_team.plot.bar(color='tab:purple')\nax.set_xticks(range(team_race_wins.shape[0]))\nax.set_xticklabels(team_race_wins.name, fontsize=12)\nplt.ylabel('Number of constructors championships', fontsize=12)\nplt.xlabel('Constructors', fontsize=15);\n","25bc59cd":"query=\"\"\"\n    select cs.name, driver_champs from\n    (select sqq.constructorId, count(sqq.constructorId) driver_champs from\n    (select sq.year, sq.driverId, sq.constructorId, max(pts) season_pts from\n    (select rs.driverId, rs.constructorId, r.year, sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.driverId, r.year) sq\n    group by sq.year) sqq\n    group by sqq.constructorId) sqqq join\n    constructors cs on sqqq.constructorId=cs.constructorId\n    order by driver_champs desc\n\"\"\"","26b77332":"q=pd.read_sql_query(query,conn)\ndriver_champs_by_team=q.copy()\n\nfig,ax=plt.subplots(figsize=(13,8))\ndriver_champs_by_team.plot.bar(x='name',y='driver_champs',ax=ax, color='darkorange')\nax.set_xlabel('Constructors',fontsize=14)\nax.set_ylabel('Number of driver championships won by constructor',fontsize=14);","c4532951":"query=\"\"\"\n    select sssq.name, sq2.num_seasons ,sssq.num_champ from\n    (select ssq.name, count(ssq.name) num_champ from\n    (select sq.year, sq.name, max(sq.season_points) win_points from\n    (select r.year, cs.name, sum(rs.points) season_points from results rs join\n    races r on rs.raceId=r.raceId join\n    constructors cs on rs.constructorId=cs.constructorId\n    group by cs.name, r.year) sq\n    group by sq.year) ssq\n    group by ssq.name) sssq join \n    \n    (select sq1.name, count(sq1.year) num_seasons from\n    (select r.year, cs.name from results rs join\n    races r on rs.raceId=r.raceId join\n    constructors cs on rs.constructorId=cs.constructorId\n    group by cs.name, r.year) sq1\n    group by sq1.name) sq2\n    \n    on\n    \n    sssq.name=sq2.name\n\"\"\"\n","041afaed":"q=pd.read_sql_query(query,conn)\nconst_champs_seasons=q.copy()\nconst_champs_seasons['perc_season_champs']=round((const_champs_seasons['num_champ']\/const_champs_seasons['num_seasons'])*100,2)\nconst_champs_seasons.sort_values(by=['perc_season_champs'],ascending=False,inplace=True)\n\nfig=plt.figure(figsize=(17,17))\nfig.tight_layout()\n\nax1=fig.add_subplot(221)\nax2=fig.add_subplot(222)\nax3=fig.add_subplot(212)\n\nconst_champs_seasons.plot.barh(x='name',y='num_seasons',ax=ax1, color='purple' ,label='Number of seasons participated')\nconst_champs_seasons.plot.barh(x='name',y='num_champ',ax=ax2, sharey=ax1, color='tab:green' ,label='Number of championships won')\nconst_champs_seasons.plot.bar(x='name',y='perc_season_champs',ax=ax3, color='brown' ,label='Percentage of championship wins');","89b7e77b":"champ_teams=constr_champs_by_team.index\nohe_teams=pd.get_dummies(constr_champs_by_year.name)\nchamp_teams_by_year=dict()\nfor team in champ_teams:    \n    champ_teams_by_year[team]=np.cumsum(ohe_teams[team])\n\nfig,ax=plt.subplots(figsize=(15,9))\nfor team,performance in champ_teams_by_year.items():\n    ax.plot(performance)\n    ax.scatter(range(len(performance)),performance,label=team)\nax.set_ylabel('Number of championships', fontsize=14)\nax.set_xlabel('Season Year', fontsize=14)\nax.set_xticks(range(constr_champs_by_year.shape[0]))\nax.set_xticklabels(constr_champs_by_year.year.tolist(), rotation='vertical', fontsize=15)\nplt.legend();","83dd80a1":"query=\"\"\"\n    select sqq.year, cs.name from\n    (select sq.year, sq.driverId, sq.constructorId, max(pts) season_pts from\n    (select rs.driverId, rs.constructorId, r.year, sum(rs.points) pts from results rs\n    join races r on rs.raceId=r.raceId\n    group by rs.driverId, r.year) sq\n    group by sq.year) sqq join\n    constructors cs on\n    cs.constructorId=sqq.constructorId\n    order by sqq.year\n\"\"\"","f5f5b94e":"q=pd.read_sql_query(query,conn)\ndrivers_champs_by_team_yearly=q.copy()\n\nchamp_teams_for_drivers=drivers_champs_by_team_yearly.name.tolist()\nohe_champ_teams_for_drivers=pd.get_dummies(drivers_champs_by_team_yearly)\nchamp_teams_for_drivers=dict()\nfor team in ohe_champ_teams_for_drivers.columns[1:]:\n    champ_teams_for_drivers[team.split('_')[1]]=np.cumsum(ohe_champ_teams_for_drivers[team])\n\nfig,ax=plt.subplots(figsize=(15,9))\nfor team,driver_champs in champ_teams_for_drivers.items():\n    ax.plot(driver_champs, label=team)\n    ax.scatter(range(drivers_champs_by_team_yearly.shape[0]),driver_champs)\nax.set_xticks(range(drivers_champs_by_team_yearly.shape[0]))\nax.set_xticklabels(drivers_champs_by_team_yearly.year.tolist(), rotation='vertical', fontsize=15)\nplt.legend();","0eb31e1a":"query=\"\"\"\n    select sssq.name, sq2.num_seasons ,sssq.num_champ from\n    (select ssq.name, count(ssq.name) num_champ from\n    (select sq.year, sq.name, max(sq.season_points) win_points from\n    (select r.year, dr.name, sum(rs.points) season_points from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    group by dr.name, r.year) sq\n    group by sq.year) ssq\n    group by ssq.name) sssq join \n    \n    (select sq1.name, count(sq1.year) num_seasons from\n    (select r.year, dr.name from results rs join\n    races r on rs.raceId=r.raceId join\n    drivers dr on rs.driverId=dr.driverId\n    group by dr.name, r.year) sq1\n    group by sq1.name) sq2\n    \n    on\n    \n    sssq.name=sq2.name\n\"\"\"","58c6609c":"q=pd.read_sql_query(query,conn)\ndr_champs_seasons=q.copy()\ndr_champs_seasons['perc_season_champs']=round((dr_champs_seasons['num_champ']\/dr_champs_seasons['num_seasons'])*100,2)\ndr_champs_seasons.sort_values(by=['perc_season_champs'],ascending=False,inplace=True)\n\nfig=plt.figure(figsize=(17,17))\nfig.tight_layout()\n\nax1=fig.add_subplot(221)\nax2=fig.add_subplot(222)\nax3=fig.add_subplot(212)\n\ndr_champs_seasons.plot.barh(x='name',y='num_seasons',ax=ax1, color='navy')\nax1.set_xticks(range(1,max(dr_champs_seasons['num_seasons'])+1))\nax1.set_title('Number season participated')\n\ndr_champs_seasons.plot.barh(x='name',y='num_champ',ax=ax2, color='green')\nax2.set_title('Number of driver championships won')\n\ndr_champs_seasons.plot.bar(x='name',y='perc_season_champs',ax=ax3, color='pink')\nax3.set_title('Percentage of championships won');","3d8e479d":"query=\"\"\"\n    select sq.name, count(*) num_wins from\n    (select dr.name from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.position==1) sq\n    group by sq.name\n    order by num_wins desc limit(25)\n\"\"\"","30a0f72b":"dr_race_wins=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(14,6))\ndr_race_wins.plot.bar(x='name',y='num_wins',ax=ax, color='firebrick')\nax.set_title('Drivers by number race wins')\nax.set_ylabel('Number of race wins');\n","35b7e7af":"query=\"\"\"\n    select sq.name, count(*) num_pole_positions from\n    (select dr.name from results rs join\n    drivers dr on rs.driverId=dr.driverId\n    where rs.grid==1) sq\n    group by sq.name\n    order by num_pole_positions desc limit(25)\n\"\"\"\n","8e8107a1":"q=pd.read_sql_query(query,conn)\nfig,ax=plt.subplots(figsize=(14,6))\nq.plot.bar(x='name',y='num_pole_positions',ax=ax, color='olive')\nax.set_title('Drivers by number of pole positions')\nax.set_ylabel('Number of pole positions');\n\n","4c91b25e":"def import_all():\n    data = {}\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            name = filename.replace('.csv', '')\n            data[name] = pd.read_csv(os.path.join(dirname, filename))\n            \n    return data\n\n\ndef add_ids(data, key):\n    \n    df = data[key]\n    n_lines = df.shape[0]\n\n    df = pd.merge(df, data['races'][['raceId', \n                                     'year', 'round', \n                                     'circuitId', 'date', 'time']], \n                  on='raceId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging raceId went wrong')\n        \n    df = pd.merge(df, data['circuits'][['circuitId', \n                                        'circuitRef', 'location', 'country']], \n                  on='circuitId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging circuitId went wrong')\n        \n    df = pd.merge(df, data['drivers'][['driverId', \n                                       'driverRef', 'forename', 'surname', \n                                       'dob', 'nationality']].rename(columns={'nationality': 'drv_nat'}), \n                  on='driverId', how='left')\n    if df.shape[0] != n_lines:\n        raise ValueError('Merging driverId went wrong')\n    \n    if (key != 'lap_times') and (key != 'pit_stops'):\n        df = pd.merge(df, data['constructors'][['constructorId', \n                                                'constructorRef', \n                                                'name', 'nationality']].rename(columns={'nationality': 'cstr_nat'}), \n                      on='constructorId', how='left')\n        if df.shape[0] != n_lines:\n            raise ValueError('Merging constructorId went wrong')\n        \n    if key == 'results':\n        df = pd.merge(df, data['status'], \n                      on='statusId', how='left')\n        if df.shape[0] != n_lines:\n            raise ValueError('Merging statusId went wrong')\n        \n    return df","c8aa6ae6":"data = import_all()\n\nres = add_ids(data, 'results')\nqual = add_ids(data, 'qualifying')\nlaps = add_ids(data, 'lap_times')\npits = add_ids(data, 'pit_stops')\n\nlaps.rename(columns={'time_x': 'lap_time', 'time_y': 'time'}, inplace=True)\nres.rename(columns={'time_x': 'race_time', 'time_y': 'time'}, inplace=True)\npits.rename(columns={'time_x': 'pit_time', 'time_y': 'time'}, inplace=True)\n\nlaps = pd.merge(laps, res[['raceId', 'driverId', \n                           'constructorRef', 'name', 'cstr_nat']], \n                on=['raceId', 'driverId'], how='left')\npits = pd.merge(pits, res[['raceId', 'driverId', \n                           'constructorRef', 'name', 'cstr_nat']], \n                on=['raceId', 'driverId'], how='left')","81608948":"res[['lap_mins', 'lap_secs']] = res['fastestLapTime'].str.split(':', expand=True)\nres[['lap_secs', 'lap_millisecs']] = res['lap_secs'].str.split('.', expand=True)\nres['lap_mins'] = pd.to_numeric(res['lap_mins'], errors='coerce').fillna(99)\nres['lap_secs'] = pd.to_numeric(res['lap_secs'], errors='coerce').fillna(99)\nres['lap_millisecs'] = pd.to_numeric(res['lap_millisecs'], errors='coerce').fillna(99)\n\nres['fastestLapTime_ms'] = (60 * res['lap_mins'] + res['lap_secs']) * 1000 + res['lap_millisecs']\n\nres['race_fastestTime'] = res.groupby('raceId').fastestLapTime_ms.transform('min')\nres['FastLap'] = np.where(res['race_fastestTime'] == res['fastestLapTime_ms'], 1, 0)\n\nres.drop(['lap_mins', 'lap_secs', 'lap_millisecs'], axis=1, inplace=True)\n\npoints = {1: 25, 2: 18, 3: 15, 4: 12, 5: 10, 6: 8, 7: 6, 8: 4, 9: 2, 10: 1}\n\nres['points'] = res['positionOrder'].map(points).fillna(0)\n#res.loc[res.FastLap == 1, 'points'] = res['points'] + 1\n\nres['fastestLap'] = pd.to_numeric(res['fastestLap'], errors='coerce')\n\nres['DriverName'] = res['forename'].str[0] + '. ' + res['surname']\n\n\nres['net_gain'] = -(res['positionOrder'] - res['grid'])\nres['abs_gain'] = abs(res['net_gain'])\n\nres['finished'] = np.where(res.status == 'Finished', 1, 0)","797168a5":"def plot_frame(ax):\n    ax.set_facecolor('#fff')\n    ax.spines['bottom'].set_color('black')\n    ax.tick_params(axis='x', colors='black')\n    ax.xaxis.label.set_color('black')\n    ax.spines['left'].set_color('black')\n    ax.tick_params(axis='y', colors='black')\n    ax.yaxis.label.set_color('black')\n    return ax\n\ndef get_drv_ann(data, year, ax, adjust, count=False, measure='Pts.'):\n    \n    yr_data = data[data.year==year].groupby(['driverId', 'DriverName', 'name']).points.sum().sort_values(ascending=False)\n    if count:\n        yr_data = data[data.year==year].groupby(['driverId', 'DriverName', 'name']).resultId.count().sort_values(ascending=False)\n    drv_name = yr_data.index[0][1]\n    ctr_name = yr_data.index[0][2]\n    pts = yr_data[0]\n    value = pts \/ data[data.year==year].raceId.nunique()\n    \n    text = f'{drv_name}\\n{ctr_name}, {year}\\n{int(pts)} {measure}'\n    \n    ax.annotate(text, xy=(year, value), xycoords='data', xytext=adjust, textcoords='offset points', color='w')\n    \n    return ax\n\n\ndef get_ctr_ann(data, year, ax, adjust, count=False, measure='Pts.'):\n    \n    yr_data = data[data.year==year].groupby(['name']).points.sum().sort_values(ascending=False)\n    if count:\n        yr_data = data[data.year==year].groupby(['name']).resultId.count().sort_values(ascending=False)\n    ctr_name = yr_data.index[0]\n    pts = yr_data[0]\n    value = pts \/ data[data.year==year].raceId.nunique()\n    \n    text = f'{ctr_name}, {year}\\n{int(pts)} {measure}'\n    \n    ax.annotate(text, xy=(year, value), xycoords='data', xytext=adjust, textcoords='offset points', color='w')\n    \n    return ax\n\n\ndef plot_bars(bars, ax, color):\n    \n    colors = [color if (c == 2020) else 'w' for c in bars.index]\n    bars.plot(color=colors, kind='bar', ax=ax)\n    ax.set_title('Top Years vs 2020', fontsize=14, color='w')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=0)\n    \n    return ax","7bc1ce29":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#fff')\nfig.suptitle(f'Position changes per Season', fontsize=18, color='black')\n\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').mean().plot(label='Mean', color='grey')\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').min().plot(label='Min', color='r')\n(res.groupby(['year', 'circuitRef']).abs_gain.sum() \/ res.groupby(['year', 'circuitRef']).size()).groupby('year').max().plot(label='Max', color='b')\n\nleg = ax.legend(facecolor=\"#fff\")\nfor text in leg.get_texts():\n    text.set_color(\"black\")\n\nax = plot_frame(ax)","4f59ccb9":"fig, ax = plt.subplots(1, 1, figsize=(15, 7), facecolor='#fff')\nfig.suptitle(f'Proportion of Drivers that finished the race per Season', fontsize=18, color='black')\n\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').mean().plot(color='grey', label='Mean')\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').max().plot(color='b', label='Max')\nres.groupby(['year', 'circuitRef']).finished.mean().groupby('year').min().plot(color='r', label='Min')\n\nleg = ax.legend(facecolor=\"#fff\")\nfor text in leg.get_texts():\n    text.set_color(\"black\")\n\nax = plot_frame(ax)","e2060ed8":"But as we can see on the driver's championship wins, Ferrari don't have this much of a difference with the second most decorated constructor which is McLaren.","64b52f98":"\n## The Best Season ##\n\nOne way of defining how interesting a season is, we can use the number of overtakes of a driver. We can calculate this indicator by observing the difference between starting and finishing positions. \n","c31567ee":"## Drivers Analysis\n\nAs seen with this graph, winning a driver's championship is very difficult. We can see lots of big names in this plot, but not much are at more than 10% of winning a title in their entier F1 career.","384230cd":"We can observe that 1989 was a special season since there is a lot of position changes and after this season, the number of position changes slowly reduced and is now pretty much the same every year while being a lot lower than from before the 90s.\n\nBut an other thing to take in consideration is the number of drivers that have finished the race with as much laps as the leader of the race.","970b12f3":"But as we can see by comparing the number of seasons participated with the number of championship won, Ferrari is not on the podium this time. This can be explained by the fact that Ferrari is the only constructor that participated at every season since 1950.\n\nWe can also see with these percentages that Brawn is a quite unique constructor with his 100% win that can be explained by the fact that Brawn has only participated in one season.\n\nWe can also see that Mercedes is a rather effective constructor since they have participated in 12 seasons and have won 7 of them. They now have more than 50% percent chance of winning. They currently are the number one since 2014.","1f207bdb":"We can also see that most of the race winners were also in pole position.","914c9862":"We can observe that on contrary to the number of position changes, the proportion of drivers that finished the race has improved since the 90s proportionnaly. It can be explicained by the improvement of the cars reliability and has helped lowering the difference between the top teams and the rest.\n\nIn conclusion we can determine from our markers that the best season was probably the 1989's since it has a lot position change and less drivers who have finished the race with the same number of laps as the leader. **From our data we can say that the 89s season was pivotal and was the last of a genre of F1 we will probably never see again because of the improvement in technology.**","5ddeb847":"As we can see with this timeline, there is moment in the history of Ferrari when they have not been winning the constructor's title for a long period of time. In theses periods, other constructor gain their glory such as McLaren and Williams on the 1982-1998 period and Red Bull and Mercedes on the 2009-2020 period.","08cdfa6f":"As we can see here, Lewis Hamilton is on the verge of surpassing Michael Schumacher and take his throne of greatest race winner.","f1511e46":"## Constructor's Analysis\n\nTo begin this analysis of the constructors, we will do a disclaimer. Due to the fact that there is a lot of constructor, we will only concentrate our presentation on the most famous and the most well known such as Ferrari, McLaren, Mercedes and such.\n\nAs we can see, Ferrari is the constructor with the most races wons in all the history of the modern f1","45a0c077":"Consequently, Ferrari has also won most of the constructor's championship with almost 25 wins.","19a8a10d":"Just as the timeline above, in the driver's championship too, Ferrari had periods of time when it's pilots weren't winning driver's title as well. The same other constructor's pilots have won their titles during theses periods."}}