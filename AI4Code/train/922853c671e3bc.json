{"cell_type":{"6535cdf3":"code","de039fc6":"code","5ebbbc7e":"code","acb9dd2d":"code","4a77131c":"code","bf4eafee":"code","414f37c5":"code","105bc14d":"code","bc6d980d":"code","42189b50":"code","547b975d":"code","711d3c0f":"code","061c487d":"code","d7272273":"code","885fe089":"code","33714300":"code","8d655c69":"code","99223c33":"code","a61cb66b":"code","c8b5c9d9":"code","bf2744e9":"code","647930a4":"code","ab86dd68":"code","81bf6b99":"code","3e988a04":"code","273597ad":"code","0d1dbcbb":"code","a9d27f12":"code","c4a4aebf":"code","cbfd682e":"code","bf814f09":"code","ae56192f":"code","c0400644":"code","6919cee9":"code","8f38dd7a":"code","2cc084a0":"code","af7e3f15":"code","b0078962":"code","586eb024":"code","34d7384b":"code","2c3f5901":"code","0231f751":"code","f1741c77":"markdown","f83c9526":"markdown","ab1bd367":"markdown","958fbfef":"markdown","a1ca925b":"markdown","dc2f37b1":"markdown","ddc9b654":"markdown","e2ba1761":"markdown","6bb52977":"markdown","f75f564f":"markdown","dfc2507e":"markdown","67b65160":"markdown","75fbd0db":"markdown"},"source":{"6535cdf3":"# Code from the my kernel \"Titanic Top 3% : one line of the prediction code\": \n# https:\/\/www.kaggle.com\/vbmokin\/titanic-top-3-one-line-of-the-prediction-code\n#\nimport pandas as pd\nimport numpy as np \ntraindf = pd.read_csv('..\/input\/titanic\/train.csv').set_index('PassengerId')\ntestdf = pd.read_csv('..\/input\/titanic\/test.csv').set_index('PassengerId')\ndf = pd.concat([traindf, testdf], axis=0, sort=False)\ndf['Title'] = df.Name.str.split(',').str[1].str.split('.').str[0].str.strip()\ndf['IsWomanOrBoy'] = ((df.Title == 'Master') | (df.Sex == 'female'))\ndf['LastName'] = df.Name.str.split(',').str[0]\nfamily = df.groupby(df.LastName).Survived\ndf['WomanOrBoyCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).count())\ndf['WomanOrBoyCount'] = df.mask(df.IsWomanOrBoy, df.WomanOrBoyCount - 1, axis=0)\ndf['FamilySurvivedCount'] = family.transform(lambda s: s[df.IsWomanOrBoy].fillna(0).sum())\ndf['FamilySurvivedCount'] = df.mask(df.IsWomanOrBoy, df.FamilySurvivedCount - df.Survived.fillna(0), axis=0)\ndf['WomanOrBoySurvived'] = df.FamilySurvivedCount \/ df.WomanOrBoyCount.replace(0, np.nan)\ndf.WomanOrBoyCount = df.WomanOrBoyCount.replace(np.nan, 0)\ndf['Alone'] = (df.WomanOrBoyCount == 0)\ntrain_y = df.Survived.loc[traindf.index]\ndf2 = pd.concat([df.WomanOrBoySurvived.fillna(0), df.Alone, df.Sex.replace({'female': 0, 'male': 1})], axis=1)\ntest_x = df2.loc[testdf.index]\n\n# The one line of the code for prediction : LB = 0.83253 (Titanic Top 3%) \ny_pred_top3 = (((test_x.WomanOrBoySurvived <= 0.238) & (test_x.Sex < 0.5) & (test_x.Alone > 0.5)) | \\\n          ((test_x.WomanOrBoySurvived > 0.238) & \\\n           ~((test_x.WomanOrBoySurvived > 0.55) & (test_x.WomanOrBoySurvived <= 0.633)))).astype(int)\n\n# Saving the result\npd.DataFrame({'Survived': y_pred_top3}, \\\n             index=testdf.index).reset_index().to_csv('survived_top3.csv', index=False)\nprint('Mean =', y_pred_top3.mean(), ' Std =', y_pred_top3.std())","de039fc6":"from sklearn import cluster, datasets, mixture\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.neighbors import kneighbors_graph\nfrom itertools import cycle, islice\nfrom scipy.spatial.distance import cosine\n\nimport time\nimport graphviz\nimport matplotlib.pyplot as plt\nprint(__doc__)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nnp.random.seed(0)","5ebbbc7e":"# FE","acb9dd2d":"#Thanks to: https:\/\/www.kaggle.com\/kpacocha\/top-6-titanic-machine-learning-from-disaster\n#Title\ndf['Title'] = df['Title'].replace('Ms','Miss')\ndf['Title'] = df['Title'].replace('Mlle','Miss')\ndf['Title'] = df['Title'].replace('Mme','Mrs')","4a77131c":"#Thanks to: https:\/\/www.kaggle.com\/kpacocha\/top-6-titanic-machine-learning-from-disaster\n# Embarked\ndf['Embarked'] = df['Embarked'].fillna('S')","bf4eafee":"# Thanks to: https:\/\/www.kaggle.com\/erinsweet\/simpledetect\n# Fare\nmed_fare = df.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\ndf['Fare'] = df['Fare'].fillna(med_fare)","414f37c5":"#Thanks to: https:\/\/www.kaggle.com\/kpacocha\/top-6-titanic-machine-learning-from-disaster\n# Cabin, Deck\ndf['Deck'] = df['Cabin'].apply(lambda s: s[0] if pd.notnull(s) else 'M')\ndf.loc[(df['Deck'] == 'T'), 'Deck'] = 'A'","105bc14d":"#Thanks to: https:\/\/www.kaggle.com\/erinsweet\/simpledetect\n#Age\ndf['Age'] = df.groupby(['Sex', 'Pclass', 'Title'])['Age'].apply(lambda x: x.fillna(x.median()))","bc6d980d":"#Thanks to: https:\/\/www.kaggle.com\/erinsweet\/simpledetect\n# Family_Size\ndf['Family_Size'] = df['SibSp'] + df['Parch'] + 1","42189b50":"pd.set_option('max_columns',100)\ntraindf.head(3)","547b975d":"df.WomanOrBoySurvived = df.WomanOrBoySurvived.fillna(0)\ndf.WomanOrBoyCount = df.WomanOrBoyCount.fillna(0)\ndf.FamilySurvivedCount = df.FamilySurvivedCount.fillna(0)\ndf.Alone = df.Alone.fillna(0)","711d3c0f":"df.head(3)","061c487d":"train_y = df.Survived.loc[traindf.index]","d7272273":"cols_to_drop = ['Name','Ticket','Cabin','Survived']\ndf = df.drop(cols_to_drop, axis=1)","885fe089":"numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ncategorical_columns = []\nfeatures = df.columns.values.tolist()\nfor col in features:\n    if df[col].dtype in numerics: continue\n    categorical_columns.append(col)\ncategorical_columns","33714300":"for col in categorical_columns:\n    if col in df.columns:\n        le = LabelEncoder()\n        le.fit(list(df[col].astype(str).values))\n        df[col] = le.transform(list(df[col].astype(str).values))","8d655c69":"train_x_all, test_x_all = df.loc[traindf.index], df.loc[testdf.index]\ntrain_x_all.head(3)","99223c33":"# The minimal percentage of similarity of the clustered feature with \"Survived\" for inclusion in the final dataset\nlimit_opt = 0.7","a61cb66b":"n_clusters_opt = 3 # number of clusters\n# Thanks to: https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\ndefault_base = {'quantile': .2,\n                'eps': .3,\n                'damping': .9,\n                'preference': -200,\n                'n_neighbors': 10,\n                'n_clusters': n_clusters_opt,\n                'min_samples': 3,\n                'xi': 0.05,\n                'min_cluster_size': 0.05}","c8b5c9d9":"train_x_all.columns","bf2744e9":"# Features list for clustering\nfeature_first = 'WomanOrBoySurvived'\nclustered_features = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title', 'WomanOrBoyCount', 'Alone', 'Deck', 'Family_Size']","647930a4":"def generate_data(x1,x2,df,t):\n    # x1, x2 as string - name of features from dataframe df\n    # t=1 - with train_y, t=0 - without its\n    X = pd.concat([df[x1], df[x2]], axis=1).values\n    if t==1:\n        y = train_y.values.astype(int)\n        return (X, y)\n    else:\n        return X","ab86dd68":"title_plot = {}\ni = -1\nfor features in clustered_features:\n    i += 1\n    if (features != 'WomanOrBoyCount') and (features != 'Family_Size'):\n        title_plot[i] = 'W-' + features\n    elif (features == 'WomanOrBoyCount'):\n        title_plot[i] = 'W-W|B-Count'\n    elif (features == 'Family_Size'):\n        title_plot[i] = 'W-FamSize'\n    \ntitle_plot","81bf6b99":"# train dataset\ndatasets = []\nfor i in range(len(clustered_features)):\n    datasets.append((generate_data(feature_first,clustered_features[i],train_x_all,1),{}))","3e988a04":"# test dataset\ndatasets_test = []\nrez = pd.DataFrame(index = test_x.index)\nfor i in range(len(clustered_features)):\n    datasets_test.append(generate_data(feature_first,clustered_features[i],test_x_all,0))","273597ad":"# Thanks to: https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\ndef generate_clustering_algorithms(Z,n_clusters):\n    # generate clustering algorithms\n    \n    # estimate bandwidth for mean shift\n    bandwidth = cluster.estimate_bandwidth(df, quantile=params['quantile'])\n\n    # connectivity matrix for structured Ward\n    connectivity = kneighbors_graph(\n        Z, n_neighbors=params['n_neighbors'], include_self=False)\n    \n    # make connectivity symmetric\n    connectivity = 0.5 * (connectivity + connectivity.T)\n\n    # ============\n    # Create cluster objects\n    # ============\n    ms = cluster.MeanShift(bandwidth=bandwidth, bin_seeding=True)\n    kmeans = cluster.KMeans(n_clusters=n_clusters, random_state = 1000)\n    two_means = cluster.MiniBatchKMeans(n_clusters=n_clusters)\n    ward = cluster.AgglomerativeClustering(n_clusters=n_clusters, linkage='ward',\n        connectivity=connectivity)\n    spectral = cluster.SpectralClustering(n_clusters=n_clusters, eigen_solver='arpack',\n        affinity=\"nearest_neighbors\")\n    dbscan = cluster.DBSCAN(eps=params['eps'])\n    optics = cluster.OPTICS(min_samples=params['min_samples'],\n                            xi=params['xi'],\n                            min_cluster_size=params['min_cluster_size'])\n    affinity_propagation = cluster.AffinityPropagation(damping=params['damping'])\n    average_linkage = cluster.AgglomerativeClustering(linkage=\"average\", affinity=\"cityblock\",\n        n_clusters=params['n_clusters'], connectivity=connectivity)\n    birch = cluster.Birch(n_clusters=params['n_clusters'])\n    gmm = mixture.GaussianMixture(n_components=n_clusters, covariance_type='full')\n\n    clustering_algorithms = (\n        ('MiniBatchKMeans', two_means),\n        ('KMeans', kmeans),\n        ('AffinityPropagation', affinity_propagation),\n        ('MeanShift', ms),\n        ('SpectralClustering', spectral),\n        ('Ward', ward),\n        ('AgglomerativeClustering', average_linkage),\n        ('DBSCAN', dbscan),\n        ('OPTICS', optics),\n        ('Birch', birch),\n        ('GaussianMixture', gmm)\n    )\n    return clustering_algorithms","0d1dbcbb":"# Thanks to: https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\n# ============\n# Set up cluster parameters\n# ============\nplt.figure(figsize=(10 * 2 + 2, 15))\nplt.subplots_adjust(left=.02, right=.98, bottom=.01, top=.98, wspace=.05,\n                    hspace=.01)\n\nplot_num = 1\ncoord_xy_lim = 2.5\nfor i_dataset, (dataset, algo_params) in enumerate(datasets):\n    # update parameters with dataset-specific values\n    params = default_base.copy()\n    params.update(algo_params)\n\n    X, y = dataset\n    \n    # normalize dataset for easier parameter selection\n    X = StandardScaler().fit_transform(X)\n    datasets_test[i_dataset] = StandardScaler().fit_transform(datasets_test[i_dataset])        \n\n    clustering_algorithms = generate_clustering_algorithms(X,params['n_clusters'])\n    clustering_algorithms_test = generate_clustering_algorithms(datasets_test[i_dataset],params['n_clusters'])\n\n    simil = {}\n    i = 0\n\n    for name, algorithm in clustering_algorithms:\n        t0 = time.time()\n\n        # catch warnings related to kneighbors_graph\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\n                \"ignore\",\n                message=\"the number of connected components of the \" +\n                \"connectivity matrix is [0-9]{1,2}\" +\n                \" > 1. Completing it to avoid stopping the tree early.\",\n                category=UserWarning)\n            warnings.filterwarnings(\n                \"ignore\",\n                message=\"Graph is not fully connected, spectral embedding\" +\n                \" may not work as expected.\",\n                category=UserWarning)\n            algorithm.fit(X)\n\n        t1 = time.time()\n        \n        if hasattr(algorithm, 'labels_'):\n            y_pred = algorithm.labels_.astype(np.int)\n        else:\n            y_pred = algorithm.predict(X)       \n        \n        simil[name] = 1 - cosine(y, y_pred)\n        print(i_dataset, i, round(simil[name], 3), title_plot[i_dataset], name)\n\n        if (i == len(clustering_algorithms)-1):\n            # determine the optimal clustering method \n            max_simil = max(simil, key=simil.get)\n            print('Optimal ==> ', max_simil)\n           \n            # clustering data by the optimal method - synthesis of a new feature\n            if simil[max_simil] > limit_opt:\n                train_x_all[title_plot[i_dataset]] = y_pred\n                algorithm_opt = dict(clustering_algorithms_test)[max_simil]\n                algorithm_opt.fit(datasets_test[i_dataset])\n                if hasattr(algorithm_opt, 'labels_'):\n                    rez[title_plot[i_dataset]] = algorithm_opt.labels_.astype(np.int)\n                else:\n                    rez[title_plot[i_dataset]] = algorithm_opt.predict(datasets_test[i_dataset])          \n\n        plt.subplot(len(datasets), len(clustering_algorithms) + 1, plot_num)\n        if i_dataset == 0:\n            plt.title(name, size=14)\n        if name == 'MiniBatchKMeans':\n            yt = plt.ylabel(title_plot[i_dataset], size=14,rotation=90)\n            \n        colors = np.array(list(islice(cycle(['#377eb8', '#ff7f00', '#4daf4a',\n                                             '#f781bf', '#a65628', '#984ea3',\n                                             '#999999', '#e41a1c', '#dede00']),\n                                      int(max(y_pred) + 1))))\n        # add black color for outliers (if any)\n        colors = np.append(colors, [\"#000000\"])\n        plt.scatter(X[:, 0], X[:, 1], s=10, color=colors[y_pred])\n\n        plt.xlim(-coord_xy_lim, coord_xy_lim)\n        plt.ylim(-coord_xy_lim, coord_xy_lim)\n        plt.xticks(())\n        plt.yticks(())\n        plt.text(.99, .01, ('%.2fs' % (t1 - t0)).lstrip('0'),\n                 transform=plt.gca().transAxes, size=15,\n                 horizontalalignment='right')\n        plot_num += 1\n        i += 1\n    # Survived\n    plt.subplot(len(datasets), len(clustering_algorithms)+1, plot_num)\n    if i_dataset == 0:\n        plt.title(\"Survived\", size=14)\n    plt.scatter(X[:, 0], X[:, 1], c=y)\n    plt.xlim(-coord_xy_lim, coord_xy_lim)\n    plt.ylim(-coord_xy_lim, coord_xy_lim)\n    plt.xticks(())\n    plt.yticks(())\n    plot_num += 1\n\nplt.show()","a9d27f12":"rez.head(3)","c4a4aebf":"train_x = pd.concat([train_x_all.WomanOrBoySurvived.fillna(0), \n                     train_x_all.Alone, \n                     train_x_all.Sex,\n                     ], axis=1)\ntest_x = pd.concat([test_x_all.WomanOrBoySurvived.fillna(0), \n                     test_x_all.Alone, \n                     test_x_all.Sex,\n                     ], axis=1)","cbfd682e":"rez_col = rez.columns.values.tolist()\nrez_col","bf814f09":"train_x = train_x.join(train_x_all[rez_col], how='left', lsuffix=\"_rez\")\ntrain_x.head(2)","ae56192f":"test_x = test_x.join(rez[rez_col], how='left', lsuffix=\"_rez\")\ntest_x.head(2)","c0400644":"# Tuning the DecisionTreeClassifier by the GridSearchCV\nparameters = {'max_depth' : np.arange(2, 9, dtype=int),\n              'min_samples_leaf' :  np.arange(1, 4, dtype=int)}\nclassifier = DecisionTreeClassifier(random_state=1000)\nmodel = GridSearchCV(estimator=classifier, param_grid=parameters, scoring='accuracy', cv=10, n_jobs=-1)\nmodel.fit(train_x, train_y)\nbest_parameters = model.best_params_\nprint(best_parameters)","6919cee9":"model=DecisionTreeClassifier(max_depth = best_parameters['max_depth'], \n                             random_state = 1118)\nmodel.fit(train_x, train_y)","8f38dd7a":"# plot tree\ndot_data = export_graphviz(model, out_file=None, feature_names=train_x.columns, class_names=['0', '1'], \n                           filled=True, rounded=False,special_characters=True, precision=7) \ngraph = graphviz.Source(dot_data)\ngraph ","2cc084a0":"# Prediction by the DecisionTreeClassifier\ny_pred = model.predict(test_x).astype(int)\nprint('Mean =', y_pred.mean(), ' Std =', y_pred.std())\n# Mean = 0.3349282296650718  Std = 0.4719653701687156 ==> LB = 0.83253","af7e3f15":"train_y_pred = model.predict(train_x).astype(int)\ndiff = sum(abs(train_y-train_y_pred))*100\/len(train_y)\ndiff\n# LB = 0.83253 ==> 7.744107744107744 ","b0078962":"# Saving the result\npd.DataFrame({'Survived': y_pred}, index=testdf.index).reset_index().to_csv('survived_new.csv', index=False)","586eb024":"train_x_all['Pred'] = train_y_pred\ntrain_x_all['Survived'] = train_y","34d7384b":"pd.set_option('max_columns',100)\npd.set_option('max_rows',100)","2c3f5901":"train_x_all[train_x_all['Survived'] != train_x_all['Pred']].sort_values(by=['Survived'])","0231f751":"diff_nrow = len(train_x_all[train_x_all['Survived'] != train_x_all['Pred']])\ndiff_nrow\n# LB = 0.83253 ==> Top 2-3%","f1741c77":"Thanks to:\n\n* https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-15\n* https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-20 \n* https:\/\/www.kaggle.com\/mauricef\/titanic\n* https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\n* https:\/\/www.kaggle.com\/kpacocha\/top-6-titanic-machine-learning-from-disaster\n* https:\/\/www.kaggle.com\/erinsweet\/simpledetect\n","f83c9526":"## Tuning model","ab1bd367":"### Prediction","958fbfef":"Early I developed kernels (https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-20) and (https:\/\/www.kaggle.com\/vbmokin\/three-lines-of-code-for-titanic-top-15) which had three lines of code based on 3 and 4 statements and provides an LB of at least 80% and 85% of teams - Titanic Top 20% and 15% respectively. later I improved the result: \"Titanic Top 3%\" - I will give code with forecasting not in the context of the classes of cabins and ports, but in the context of the surnames of passengers (Thanks to https:\/\/www.kaggle.com\/mauricef\/titanic): https:\/\/www.kaggle.com\/vbmokin\/titanic-top-3-one-line-of-the-prediction-code\n\nI try to improve the result by using the clustering of different features relative to those that were selected in solution \"Titanic Top3%\". The kernel is devoted to an overview of clustering methods and attempts to create new features that will improve the solution in one line of code to prediction them.\n\nI will also give new features (FE&FC).\n\nThe kernel allows to apply different clustering methods (they can be easily added into clustering_algorithms) to pairs of features feature_first (by default: \"WomanOrBoySurvived\") and a feature from the list clustered_features. The given number of clusters n_clusters_opt is used for classification methods.\n\nThe optimal method determined for each pair of features automatically by the criterion of the maximum cosine similarity with the target feature \"Survived\" in the training dataset (complete similarity is 1). If this criterion for the optimal method exceeds a threshold limit_opt then a new feature is synthesized by this method in the train and test datasets. After that, the optimal decision tree DecisionTreeClassifier is built by the criterion of max_depth (optimization method GridSearchCV).\n\nThe kernel allows trying to improve the accuracy of the kernel \"Titanic Top 3% : one line of the prediction code\" (https:\/\/www.kaggle.com\/vbmokin\/titanic-top-3-one-line-of-the-prediction-code).\n\nThe restriction to only pairs of features is due to the desire to provide a high-quality visualization of the clustering process by analogy with the kernel: https:\/\/scikit-learn.org\/stable\/auto_examples\/cluster\/plot_cluster_comparison.html#sphx-glr-auto-examples-cluster-plot-cluster-comparison-py\n\nMy attempts to find a solution giving accuracy above LB = 0.83253 have not yet been successful. If a solution is found, I will post it.","a1ca925b":"I hope you find this kernel useful and enjoyable.\n\nYour comments and feedback are most welcome.","dc2f37b1":"### Plot tree","ddc9b654":"## Residues of train dataset view","e2ba1761":"### Preparing to prediction (including FE) ","6bb52977":"# Preparing to prediction (including FE)","f75f564f":"# Titanic Top 3% (now is maybe 6%) : cluster analysis - attempts for imrovement the solution \"Titanic Top 3% : one line of the prediction code\" with LB = 0.83253","dfc2507e":"# Clustering","67b65160":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6e\/St%C3%B6wer_Titanic.jpg)","75fbd0db":"### Saving the result"}}