{"cell_type":{"ace670a1":"code","e1c1b12e":"code","7d27872a":"code","65d5b6a8":"code","142de0e2":"code","e4dbfeef":"code","218c2aa0":"code","217fb1ba":"code","390f5356":"code","c86b4802":"code","7746bfe0":"code","39c4947f":"code","67bde22f":"code","38648e5e":"code","158eb060":"code","4fd587a8":"code","1b9316d7":"code","b3020033":"code","574ae0b0":"code","56901608":"code","7c3de3c3":"code","1fc5e1d2":"code","ee524efd":"code","8921d23f":"code","99ffefe0":"code","bf277c4d":"code","d4182386":"markdown","7b92ba92":"markdown","9782d837":"markdown","071d9f37":"markdown","c00e7c22":"markdown","765fdb49":"markdown","ab3fa780":"markdown","74b5d7f9":"markdown","8fe2e0dd":"markdown","63965b3c":"markdown","480918d3":"markdown","f1d4808b":"markdown","f36c3bd3":"markdown","68c6affa":"markdown","a4a3acb7":"markdown","7fec340b":"markdown","fb7b296e":"markdown","62406728":"markdown","d6f1b20e":"markdown","98b1a2b0":"markdown","27a27277":"markdown","34a302fd":"markdown"},"source":{"ace670a1":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport tensorflow_addons as tfa\n\nfrom kaggle_datasets import KaggleDatasets\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)\n\nAUTOTUNE = tf.data.experimental.AUTOTUNE\n    \nprint(tf.__version__)","e1c1b12e":"GCS_PATH = KaggleDatasets().get_gcs_path()","7d27872a":"MONET_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/monet_tfrec\/*.tfrec'))\nprint('Monet TFRecord Files:', len(MONET_FILENAMES))\n\nPHOTO_FILENAMES = tf.io.gfile.glob(str(GCS_PATH + '\/photo_tfrec\/*.tfrec'))\nprint('Photo TFRecord Files:', len(PHOTO_FILENAMES))","65d5b6a8":"IMAGE_SIZE = [256, 256]\n\ndef decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = (tf.cast(image, tf.float32) \/ 127.5) - 1\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n\ndef read_tfrecord(example):\n    tfrecord_format = {\n        \"image_name\": tf.io.FixedLenFeature([], tf.string),\n        \"image\": tf.io.FixedLenFeature([], tf.string),\n        \"target\": tf.io.FixedLenFeature([], tf.string)\n    }\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example['image'])\n    return image","142de0e2":"def load_dataset(filenames, labeled=True, ordered=False):\n    dataset = tf.data.TFRecordDataset(filenames)\n    dataset = dataset.map(read_tfrecord, num_parallel_calls=AUTOTUNE)\n    return dataset","e4dbfeef":"monet_ds = load_dataset(MONET_FILENAMES, labeled=True).batch(1)\nphoto_ds = load_dataset(PHOTO_FILENAMES, labeled=True).batch(1)\n#photo_ds = photo_ds.take(30)\n#monet_ds = monet_ds.take(30)","218c2aa0":"example_monet = next(iter(monet_ds))\nexample_photo = next(iter(photo_ds))","217fb1ba":"plt.subplot(121)\nplt.title('Photo')\nplt.imshow(example_photo[0] * 0.5 + 0.5)\n\nplt.subplot(122)\nplt.title('Monet')\nplt.imshow(example_monet[0] * 0.5 + 0.5)","390f5356":"OUTPUT_CHANNELS = 3\n\ndef downsample(filters, size, apply_instancenorm=True):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = keras.Sequential()\n    result.add(layers.Conv2D(filters, size, strides=2, padding='same',\n                             kernel_initializer=initializer, use_bias=False))\n\n    if apply_instancenorm:\n        result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    result.add(layers.LeakyReLU())\n\n    return result","c86b4802":"def upsample(filters, size, apply_dropout=False):\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    result = keras.Sequential()\n    result.add(layers.Conv2DTranspose(filters, size, strides=2,\n                                      padding='same',\n                                      kernel_initializer=initializer,\n                                      use_bias=False))\n\n    result.add(tfa.layers.InstanceNormalization(gamma_initializer=gamma_init))\n\n    if apply_dropout:\n        result.add(layers.Dropout(0.5))\n\n    result.add(layers.ReLU())\n\n    return result","7746bfe0":"# bs = batch size\ndown_stack = [\n    downsample(64, 4, apply_instancenorm=False), # (bs, 128, 128, 64)\n    downsample(128, 4), # (bs, 64, 64, 128)\n    downsample(256, 4), # (bs, 32, 32, 256)\n    downsample(512, 4), # (bs, 16, 16, 512)\n    downsample(512, 4), # (bs, 8, 8, 512)\n    downsample(512, 4), # (bs, 4, 4, 512)\n    downsample(512, 4), # (bs, 2, 2, 512)\n    downsample(512, 4), # (bs, 1, 1, 512)\n]\n\nup_stack = [\n    upsample(512, 4, apply_dropout=True), # (bs, 2, 2, 1024)\n    upsample(512, 4, apply_dropout=True), # (bs, 4, 4, 1024)\n    upsample(512, 4, apply_dropout=True), # (bs, 8, 8, 1024)\n    upsample(512, 4), # (bs, 16, 16, 1024)\n    upsample(256, 4), # (bs, 32, 32, 512)\n    upsample(128, 4), # (bs, 64, 64, 256)\n    upsample(64, 4), # (bs, 128, 128, 128)\n]\n\ndef reshape_out():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    last = layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,\n                                  strides=2,\n                                  padding='same',\n                                  kernel_initializer=initializer,\n                                  activation='tanh') # (bs, 256, 256, 3)\n    return last","39c4947f":"def Generator():\n    inputs = layers.Input(shape=[256,256,3])\n\n    last = reshape_out()\n\n    x = inputs\n\n    # Downsampling through the model\n    skips = []\n    for down in down_stack:\n        x = down(x)\n        skips.append(x)\n\n    skips = reversed(skips[:-1])\n\n    # Upsampling and establishing the skip connections\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        x = layers.Concatenate()([x, skip])\n\n    x = last(x)\n\n    return keras.Model(inputs=inputs, outputs=x)","67bde22f":"def RescaleTF(aBlock):\n    x1 = tf.math.reduce_max(aBlock)\n    x2 = tf.math.reduce_min(aBlock)\n    s = 2\/(x2-x1)\n    p = -x1*s - 1\n    return aBlock * s + p\n\ndef Enc():\n    encoder_inputs = layers.Input(shape=[256,256,3])\n    x = encoder_inputs\n    skips = []\n    #skips.append(x)\n\n    # Downsampling through the model\n    for i,down in enumerate(down_stack):\n        #print(i,\"E \", x.shape,\"\\t\",type(x))\n        x = down(x)\n        #print(i,\"skips \", x.shape,\"\\t\", type(x))\n        \n        # x is zeros for i = 7\n        #if i != 7 and i > 1:\n        #    x = RescaleTF(x)\n        skips.append(x)\n\n    return keras.Model(encoder_inputs, skips, name=\"encoder\")\n\ndef Dec1(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[0](inp)\n    return keras.Model(inp, x, name=\"dec1\")\n                      \ndef Dec2(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[1](inp)\n    return keras.Model(inp, x, name=\"dec2\")\n        \ndef Dec4(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[2](inp)\n    return keras.Model(inp, x, name=\"dec4\")\n         \ndef Dec8(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[3](inp)\n    return keras.Model(inp, x, name=\"dec8\")\n         \ndef Dec16(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[4](inp)\n    return keras.Model(inp, x, name=\"dec16\")\n         \ndef Dec32(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[5](inp)\n    return keras.Model(inp, x, name=\"dec32\")\n         \ndef Dec64(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    x = up_stack[6](inp)\n    return keras.Model(inp, x, name=\"dec64\")\n\ndef Dec128(shapeIn):\n    inp = layers.Input(shape=shapeIn)\n    last = reshape_out()\n    x = last(inp)\n    return keras.Model(inp, x, name=\"dec128\")","38648e5e":"def RescaleNP(aBlock):\n    x1 = np.amin(aBlock)\n    x2 = np.amax(aBlock)\n    #print(x1,x2)\n    s = 2\/(x2-x1)\n    p = -x1*s - 1\n    print(\"sp\",s,p)\n    return aBlock * s + p\n\ndef Decode(pskips): \n    x = pskips[-1]\n    skip = pskips[-2]\n    #skip = np.zeros((1,2,2,512))\n    x = dec1(x)\n    x = layers.Concatenate()([x, skip])\n\n    skip = pskips[-3]\n    #skip = np.zeros((1,4,4,512))\n    x = dec2(x)\n    x = layers.Concatenate()([x, skip])\n    #x = np.zeros((1,4,4,1024))\n    #RescaleNP(x)\n\n    skip = pskips[-4]\n    #Uncommenting the following line may remove some artifacts\n    #depending on the final network.\n    #skip = np.zeros((1,8,8,512))\n    x = dec4(x)\n    x = layers.Concatenate()([x, skip])\n\n    skip = pskips[-5]\n    #skip = np.zeros((1,16,16,512))\n    x = dec8(x)\n    x = layers.Concatenate()([x, skip])\n\n    skip = pskips[-6]\n    #skip = np.zeros((1,32,32,256))\n    x = dec16(x)\n    x = layers.Concatenate()([x, skip])\n\n    skip = pskips[-7]\n    #skip = np.zeros((1,64,64,128))\n    x = dec32(x)\n    x = layers.Concatenate()([x, skip])\n\n    skip = pskips[-8]\n    #skip = np.zeros((1,128,128,64))\n    x = dec64(x)\n    x = layers.Concatenate()([x, skip])\n\n    x = dec128(x)\n    return x","158eb060":"def Discriminator():\n    initializer = tf.random_normal_initializer(0., 0.02)\n    gamma_init = keras.initializers.RandomNormal(mean=0.0, stddev=0.02)\n\n    inp = layers.Input(shape=[256, 256, 3], name='input_image')\n\n    x = inp\n\n    down1 = downsample(64, 4, False)(x) # (bs, 128, 128, 64)\n    down2 = downsample(128, 4)(down1) # (bs, 64, 64, 128)\n    down3 = downsample(256, 4)(down2) # (bs, 32, 32, 256)\n\n    zero_pad1 = layers.ZeroPadding2D()(down3) # (bs, 34, 34, 256)\n    conv = layers.Conv2D(512, 4, strides=1,\n                         kernel_initializer=initializer,\n                         use_bias=False)(zero_pad1) # (bs, 31, 31, 512)\n\n    norm1 = tfa.layers.InstanceNormalization(gamma_initializer=gamma_init)(conv)\n\n    leaky_relu = layers.LeakyReLU()(norm1)\n\n    zero_pad2 = layers.ZeroPadding2D()(leaky_relu) # (bs, 33, 33, 512)\n\n    last = layers.Conv2D(1, 4, strides=1,\n                         kernel_initializer=initializer)(zero_pad2) # (bs, 30, 30, 1)\n\n    return tf.keras.Model(inputs=inp, outputs=last)","4fd587a8":"with strategy.scope():\n    monet_generator = Generator() # transforms photos to Monet-esque paintings\n    photo_generator = Generator() # transforms Monet paintings to be more like photos\n\n    monet_discriminator = Discriminator() # differentiates real Monet paintings and generated Monet paintings\n    photo_discriminator = Discriminator() # differentiates real photos and generated photos\n    \n    monet_enc = Enc()\n    #monet_enc.summary()\n    #stop\n    dec1 = Dec1((1,1,512))\n    #dec1.summary()\n    dec2 = Dec2((2,2,1024))\n    dec4 = Dec4((4,4,1024))\n    dec8 = Dec8((8,8,1024))\n    dec16 = Dec16((16,16,1024))\n    dec32 = Dec32((32,32,512))\n    dec64 = Dec64((64,64,256))\n    dec128 = Dec128((128,128,128))","1b9316d7":"plt.subplot(1, 2, 1)\nplt.title(\"Original Photo\")\nplt.imshow(example_photo[0] * 0.5 + 0.5)\n\n#to_monet = monet_generator(example_photo)\npskips = monet_enc.predict(example_photo)\nto_monet = Decode(pskips)\n\nplt.subplot(1, 2, 2)\nplt.title(\"Monet-esque Photo\")\nplt.imshow(to_monet[0] * 0.5 + 0.5)\nplt.show()","b3020033":"class CycleGan(keras.Model):\n    def __init__(\n        self,\n        monet_generator,\n        photo_generator,\n        monet_discriminator,\n        photo_discriminator,\n        monet_encoder,\n        dec1,\n        dec2,\n        dec4,\n        dec8,\n        dec16,\n        dec32,\n        dec64,\n        dec128,\n        lambda_cycle=10,\n    ):\n        super(CycleGan, self).__init__()\n        self.m_gen = monet_generator\n        self.p_gen = photo_generator\n        self.m_disc = monet_discriminator\n        self.p_disc = photo_discriminator\n        self.m_enc = monet_encoder\n        self.p_dec1 = dec1\n        self.p_dec2 = dec2\n        self.p_dec4 = dec4\n        self.p_dec8 = dec8\n        self.p_dec16 = dec16\n        self.p_dec32 = dec32\n        self.p_dec64 = dec64\n        self.p_dec128 = dec128#'''\n        self.lambda_cycle = lambda_cycle\n        \n    def compile(\n        self,\n        m_gen_optimizer,\n        p_gen_optimizer,\n        m_disc_optimizer,\n        p_disc_optimizer,\n        gen_loss_fn,\n        disc_loss_fn,\n        cycle_loss_fn,\n        photo_dec1_opt,\n        photo_dec2_opt,\n        photo_dec4_opt,\n        photo_dec8_opt,\n        photo_dec16_opt,\n        photo_dec32_opt,\n        photo_dec64_opt,\n        photo_dec128_opt,\n        use_enc_dec,\n        identity_loss_fn\n    ):\n        super(CycleGan, self).compile()\n        self.m_gen_optimizer = m_gen_optimizer\n        self.p_gen_optimizer = p_gen_optimizer\n        self.m_disc_optimizer = m_disc_optimizer\n        self.p_disc_optimizer = p_disc_optimizer\n        self.gen_loss_fn = gen_loss_fn\n        self.disc_loss_fn = disc_loss_fn\n        self.cycle_loss_fn = cycle_loss_fn\n        self.p_dec1_opt = photo_dec1_opt\n        self.p_dec2_opt = photo_dec2_opt\n        self.p_dec4_opt = photo_dec4_opt\n        self.p_dec8_opt = photo_dec8_opt\n        self.p_dec16_opt = photo_dec16_opt\n        self.p_dec32_opt = photo_dec32_opt\n        self.p_dec64_opt = photo_dec64_opt\n        self.p_dec128_opt = photo_dec128_opt\n        self.identity_loss_fn = identity_loss_fn\n        self.use_enc_dec = use_enc_dec\n        \n        def Dec(skips):                \n            #skips[-2] = tf.zeros((1,2,2,512))\n            #skips[-3] = tf.zeros((1,4,4,512))            \n            #skips[-4] = tf.zeros((1,8,8,512))\n            #skips[-5] = tf.zeros((1,16,16,512))\n            #skips[-6] = tf.zeros((1,32,32,256))\n            #skips[-7] = tf.zeros((1,64,64,128))\n            #skips[-8] = tf.zeros((1,128,128,64))\n\n            x = skips[-1]\n            #x = np.random.rand(1,1,1,512)\n            skip = skips[-2]\n            x = self.p_dec1(x, training=True)\n            #L2 = self.identity_loss_fn(x, skip, self.lambda_cycle).numpy()\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-3]\n            x = self.p_dec2(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-4]\n            x = self.p_dec4(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-5]\n            x = self.p_dec8(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-6]\n            x = self.p_dec16(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-7]\n            x = self.p_dec32(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            skip = skips[-8]\n            x = self.p_dec64(x, training=True)\n            x = layers.Concatenate()([x, skip])\n\n            return self.p_dec128(x, training=True)\n        \n        self.skip_dec = Dec\n    \n    def train_step(self, batch_data):\n        real_monet, real_photo = batch_data\n        \n        with tf.GradientTape(persistent=True) as tape:            \n            # photo to monet back to photo\n            if use_enc_dec:\n                skips = self.m_enc(real_photo, training=True)\n                fake_monet = self.skip_dec(skips)\n            else:\n                fake_monet = self.m_gen(real_photo, training=True) \n                \n            cycled_photo = self.p_gen(fake_monet, training=True)\n           \n            # monet to photo back to monet\n            fake_photo = self.p_gen(real_monet, training=True)\n            if use_enc_dec:\n                skips = self.m_enc(fake_photo, training=True)\n                cycled_monet = self.skip_dec(skips)\n            else:\n                cycled_monet = self.m_gen(fake_photo, training=True)\n\n            # generating itself\n            if use_enc_dec:\n                skips = self.m_enc(real_monet, training=True)\n                same_monet = self.skip_dec(skips)\n            else:\n                same_monet = self.m_gen(real_monet, training=True)\n                \n            same_photo = self.p_gen(real_photo, training=True)\n            \n            # discriminator used to check, inputing real images\n            disc_real_monet = self.m_disc(real_monet, training=True)\n            disc_real_photo = self.p_disc(real_photo, training=True)\n\n            # discriminator used to check, inputing fake images\n            disc_fake_monet = self.m_disc(fake_monet, training=True)\n            disc_fake_photo = self.p_disc(fake_photo, training=True)\n\n            # evaluates generator loss\n            monet_gen_loss = self.gen_loss_fn(disc_fake_monet)\n            photo_gen_loss = self.gen_loss_fn(disc_fake_photo)\n\n            # evaluates total cycle consistency loss\n            total_cycle_loss = self.cycle_loss_fn(real_monet, cycled_monet, self.lambda_cycle) + self.cycle_loss_fn(real_photo, cycled_photo, self.lambda_cycle)\n\n            # evaluates total generator loss\n            total_monet_gen_loss = monet_gen_loss + total_cycle_loss + self.identity_loss_fn(real_monet, same_monet, self.lambda_cycle)\n            total_photo_gen_loss = photo_gen_loss + total_cycle_loss + self.identity_loss_fn(real_photo, same_photo, self.lambda_cycle)\n\n            # evaluates discriminator loss\n            monet_disc_loss = self.disc_loss_fn(disc_real_monet, disc_fake_monet)\n            photo_disc_loss = self.disc_loss_fn(disc_real_photo, disc_fake_photo)\n\n        # Calculate the gradients for generator and discriminator\n        monet_generator_gradients = tape.gradient(total_monet_gen_loss,\n                                                  self.m_gen.trainable_variables)\n        photo_generator_gradients = tape.gradient(total_photo_gen_loss,\n                                                  self.p_gen.trainable_variables)\n\n        monet_discriminator_gradients = tape.gradient(monet_disc_loss,\n                                                      self.m_disc.trainable_variables)\n        photo_discriminator_gradients = tape.gradient(photo_disc_loss,\n                                                      self.p_disc.trainable_variables)\n\n        # Apply the gradients to the optimizer\n        self.m_gen_optimizer.apply_gradients(zip(monet_generator_gradients,\n                                                 self.m_gen.trainable_variables))\n\n        self.p_gen_optimizer.apply_gradients(zip(photo_generator_gradients,\n                                                 self.p_gen.trainable_variables))\n\n        self.m_disc_optimizer.apply_gradients(zip(monet_discriminator_gradients,\n                                                  self.m_disc.trainable_variables))\n\n        self.p_disc_optimizer.apply_gradients(zip(photo_discriminator_gradients,\n                                                  self.p_disc.trainable_variables))\n        if use_enc_dec:\n            photo_grad_dec1 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec1.trainable_variables)\n            photo_grad_dec2 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec2.trainable_variables)\n            photo_grad_dec4 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec4.trainable_variables)\n            photo_grad_dec8 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec8.trainable_variables)\n            photo_grad_dec16 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec16.trainable_variables)\n            photo_grad_dec32 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec32.trainable_variables)\n            photo_grad_dec64 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec64.trainable_variables)\n            photo_grad_dec128 = tape.gradient(total_monet_gen_loss,\n                                                      self.p_dec128.trainable_variables)\n\n            self.p_dec1_opt.apply_gradients(zip(photo_grad_dec1,\n                                                     self.p_dec1.trainable_variables))\n            self.p_dec2_opt.apply_gradients(zip(photo_grad_dec2,\n                                                     self.p_dec2.trainable_variables))\n            self.p_dec4_opt.apply_gradients(zip(photo_grad_dec4,\n                                                     self.p_dec4.trainable_variables))\n            self.p_dec8_opt.apply_gradients(zip(photo_grad_dec8,\n                                                     self.p_dec8.trainable_variables))\n            self.p_dec16_opt.apply_gradients(zip(photo_grad_dec16,\n                                                     self.p_dec16.trainable_variables))\n            self.p_dec32_opt.apply_gradients(zip(photo_grad_dec32,\n                                                     self.p_dec32.trainable_variables))\n            self.p_dec64_opt.apply_gradients(zip(photo_grad_dec64,\n                                                     self.p_dec64.trainable_variables))\n            self.p_dec128_opt.apply_gradients(zip(photo_grad_dec128,\n                                                 self.p_dec128.trainable_variables))\n        \n        return {\n            \"monet_gen_loss\": total_monet_gen_loss,\n            \"photo_gen_loss\": total_photo_gen_loss,\n            \"monet_disc_loss\": monet_disc_loss,\n            \"photo_disc_loss\": photo_disc_loss\n        }","574ae0b0":"with strategy.scope():\n    def discriminator_loss(real, generated):\n        real_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(real), real)\n\n        generated_loss = tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.zeros_like(generated), generated)\n\n        total_disc_loss = real_loss + generated_loss\n\n        return total_disc_loss * 0.5","56901608":"with strategy.scope():\n    def generator_loss(generated):\n        return tf.keras.losses.BinaryCrossentropy(from_logits=True, reduction=tf.keras.losses.Reduction.NONE)(tf.ones_like(generated), generated)","7c3de3c3":"with strategy.scope():\n    def calc_cycle_loss(real_image, cycled_image, LAMBDA):\n        loss1 = tf.reduce_mean(tf.abs(real_image - cycled_image))\n\n        return LAMBDA * loss1","1fc5e1d2":"with strategy.scope():\n    def identity_loss(real_image, same_image, LAMBDA):\n        loss = tf.reduce_mean(tf.abs(real_image - same_image))\n        return LAMBDA * 0.5 * loss","ee524efd":"with strategy.scope():\n    monet_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n\n    monet_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n        \n    photo_dec1_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec2_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec4_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec8_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec16_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec32_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec64_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)\n    photo_dec128_opt = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)","8921d23f":"use_enc_dec = True\n\nwith strategy.scope():\n    cycle_gan_model = CycleGan(\n        monet_generator, photo_generator, monet_discriminator, photo_discriminator,\n        monet_enc,\n        dec1,\n        dec2,\n        dec4,\n        dec8,\n        dec16,\n        dec32,\n        dec64,\n        dec128  \n    )\n\n    cycle_gan_model.compile(\n        m_gen_optimizer = monet_generator_optimizer,\n        p_gen_optimizer = photo_generator_optimizer,\n        m_disc_optimizer = monet_discriminator_optimizer,\n        p_disc_optimizer = photo_discriminator_optimizer,\n        gen_loss_fn = generator_loss,\n        disc_loss_fn = discriminator_loss,\n        cycle_loss_fn = calc_cycle_loss,\n        photo_dec1_opt = photo_dec1_opt,\n        photo_dec2_opt = photo_dec2_opt,\n        photo_dec4_opt = photo_dec4_opt,\n        photo_dec8_opt = photo_dec8_opt,\n        photo_dec16_opt = photo_dec16_opt,\n        photo_dec32_opt = photo_dec32_opt,\n        photo_dec64_opt = photo_dec64_opt,\n        photo_dec128_opt = photo_dec128_opt,\n        use_enc_dec = use_enc_dec,\n        identity_loss_fn = identity_loss\n    )","99ffefe0":"cycle_gan_model.fit(\n    tf.data.Dataset.zip((monet_ds, photo_ds)),\n    epochs=25\n)","bf277c4d":"if use_enc_dec:\n    print(\"Min and max skip values\")\n    \n_, ax = plt.subplots(5, 2, figsize=(25, 25))\nfor i, img in enumerate(photo_ds.take(5)):\n    \n    if use_enc_dec:\n        pskips = monet_enc.predict(img)\n        prediction = Decode(pskips)\n        if i<=1:\n            for j,sk in enumerate(pskips):\n                print(\"[\",i,\",\",j,\"]\\t\", np.amin(sk),\":\",np.amax(sk))\n            print()\n    else:\n        prediction = monet_generator(img, training=False)\n    \n    img = (img[0] * 127.5 + 127.5).numpy().astype(np.uint8)\n\n    ax[i, 0].imshow(img)\n    ax[i, 1].imshow(prediction[0]*0.5 + 0.5)\n    ax[i, 0].set_title(\"Input Photo\")\n    ax[i, 1].set_title(\"Monet-esque\")\n    ax[i, 0].axis(\"off\")\n    ax[i, 1].axis(\"off\")\nplt.show()","d4182386":"Let's  visualize a photo example and a Monet example.","7b92ba92":"# Build the generator\n\nWe'll be using a UNET architecture for our CycleGAN. To build our generator, let's first define our `downsample` and `upsample` methods.\n\nThe `downsample`, as the name suggests, reduces the 2D dimensions, the width and height, of the image by the stride. The stride is the length of the step the filter takes. Since the stride is 2, the filter is applied to every other pixel, hence reducing the weight and height by 2.\n\nWe'll be using an instance normalization instead of batch normalization. As the instance normalization is not standard in the TensorFlow API, we'll use the layer from TensorFlow Add-ons.","9782d837":"The identity loss compares the image with its generator (i.e. photo with photo generator). If given a photo as input, we want it to generate the same image as the image was originally a photo. The identity loss compares the input with the output of the generator.","071d9f37":"Define the function to extract the image from the files.","c00e7c22":"Let's load in our datasets.","765fdb49":"External decoder","ab3fa780":"Let's build our generator!\n\nThe generator first downsamples the input image and then upsample while establishing long skip connections. Skip connections are a way to help bypass the vanishing gradient problem by concatenating the output of a layer to multiple layers instead of only one. Here we concatenate the output of the downsample layer to the upsample layer in a symmetrical fashion.","74b5d7f9":"Since our generators are not trained yet, the generated Monet-esque photo does not show what is expected at this point.","8fe2e0dd":"All the images for the competition are already sized to 256x256. As these images are RGB images, set the channel to 3. Additionally, we need to scale the images to a [-1, 1] scale. Because we are building a generative model, we don't need the labels or the image id so we'll only return the image from the TFRecord.","63965b3c":"# Introduction and Setup\n\nThis notebook utilizes a CycleGAN architecture to add Monet-style to photos. For this tutorial, we will be using the TFRecord dataset. Import the following packages and change the accelerator to TPU.\n\nFor more information, check out [TensorFlow](https:\/\/www.tensorflow.org\/tutorials\/generative\/cyclegan) and [Keras](https:\/\/keras.io\/examples\/generative\/cyclegan\/) CycleGAN documentation pages.","480918d3":"Split encoder decoder","f1d4808b":"# Load in the data\n\nWe want to keep our photo dataset and our Monet dataset separate. First, load in the filenames of the TFRecords.","f36c3bd3":"We want our original photo and the twice transformed photo to be similar to one another. Thus, we can calculate the cycle consistency loss be finding the average of their difference.","68c6affa":"# Build the discriminator\n\nThe discriminator takes in the input image and classifies it as real or fake (generated). Instead of outputing a single node, the discriminator outputs a smaller 2D image with higher pixel values indicating a real classification and lower values indicating a fake classification.","a4a3acb7":"# Train the CycleGAN\n\nLet's compile our model. Since we used `tf.keras.Model` to build our CycleGAN, we can just ude the `fit` function to train our model.","7fec340b":"# Visualize our Monet-esque photos","fb7b296e":"The generator wants to fool the discriminator into thinking the generated image is real. The perfect generator will have the discriminator output only 1s. Thus, it compares the generated image to a matrix of 1s to find the loss.","62406728":"This is the Encoder Decoder demo.  The original Generator() function has been split into seperate encoder and decoder functions. The numerical loss reduction is compariable to the original but the errors appear differently.  This can be corrected some by setting skips[-4] = zeros in the decoder.  It is also not clear why the final skip produced by the encoder is identically zero.","d6f1b20e":"# Build the CycleGAN model\n\nWe will subclass a `tf.keras.Model` so that we can run `fit()` later to train our model. During the training step, the model transforms a photo to a Monet painting and then back to a photo. The difference between the original photo and the twice-transformed photo is the cycle-consistency loss. We want the original photo and the twice-transformed photo to be similar to one another.\n\nThe losses are defined in the next section.","98b1a2b0":"External Decoder","27a27277":"`Upsample` does the opposite of downsample and increases the dimensions of the of the image. `Conv2DTranspose` does basically the opposite of a `Conv2D` layer.","34a302fd":"# Define loss functions\n\nThe discriminator loss function below compares real images to a matrix of 1s and fake images to a matrix of 0s. The perfect discriminator will output all 1s for real images and all 0s for fake images. The discriminator loss outputs the average of the real and generated loss."}}