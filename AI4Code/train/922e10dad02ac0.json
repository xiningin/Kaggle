{"cell_type":{"210d6abc":"code","de8b34c5":"code","2219deb2":"code","b68d8c45":"code","248a18b7":"code","a13940b0":"code","e8cfe2cf":"code","89f1585b":"code","a4479ba2":"code","c9f6537b":"code","b68e78e5":"code","7459a93f":"code","68519f43":"code","97cc59da":"code","251cd53a":"code","fb172070":"code","3c54bf59":"code","65493673":"code","00974146":"code","77d52fa8":"code","0c22fff1":"code","9e783d41":"code","d3c3f065":"code","52e3a46d":"code","4313c30e":"code","aec9494f":"code","ac815823":"code","4046d6f8":"code","8fe5128e":"code","b4f03b87":"code","1ec614e5":"code","b0c4e4be":"code","1d481af0":"code","4e8bcc01":"code","b0350e3b":"code","0be5abb0":"code","a5680048":"code","30193139":"code","71640f0f":"code","3d18bb82":"code","9086fb88":"code","1721c0e0":"markdown","af3a4d15":"markdown","b41a0062":"markdown","ffcfcf19":"markdown"},"source":{"210d6abc":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","de8b34c5":"data0=pd.read_csv('..\/input\/shark-attack-dataset\/attacks.csv')\ndata0","2219deb2":"print(data0.columns.tolist())","b68d8c45":"data1=data0.loc[0:6301]\ndata1=data1.drop(['Unnamed: 22', 'Unnamed: 23'],axis=1)\ndata2=data1[['Year', 'Type', 'Country', 'Area', 'Location', 'Activity', 'Name', 'Sex ', 'Age', 'Injury', 'Fatal (Y\/N)', 'Time', 'Species ', ]]\ndata2[0:2].T","248a18b7":"data2=data2.fillna('NaN')\ndata2[0:2].T","a13940b0":"print(data2.columns.tolist())","e8cfe2cf":"year=[]\nfor item in data2['Year']:\n    if item=='NaN':\n        year+=['NaN']\n    elif item<1000:\n        year+=['NaN']\n    else:\n        year+=[int(item)]\ndata2['Year']=year","89f1585b":"Name1=list(data2['Type'].unique())\nprint(Name1)\nName2=['Boating', 'Unprovoked', 'NaN', 'Provoked','NaN','Sea Disaster', 'NaN', 'Boating', 'Boating']\nnormal_mapping=dict(zip(Name1,Name2)) ","a4479ba2":"data2['Type']=data2['Type'].map(normal_mapping)","c9f6537b":"Name1a=list(data2['Fatal (Y\/N)'].unique())\nprint(Name1a)\nName2a=['N', 'Y', 'NaN', 'NaN', 'NaN', 'NaN', 'N', 'N', 'Y']\nnormal_mapping_a=dict(zip(Name1a,Name2a)) ","b68e78e5":"data2['Fatal (Y\/N)']=data2['Fatal (Y\/N)'].map(normal_mapping_a)","7459a93f":"drop_index=data2[data2['Fatal (Y\/N)']=='NaN'].index.tolist()\nprint(len(drop_index))\nprint(drop_index)\ndata2=data2.drop(index=data2.index[drop_index]).reset_index(drop=True)\ndata2","68519f43":"list_cols = ['Year', 'Type', 'Country', 'Area', 'Location', 'Activity', 'Name', 'Sex ', \n             'Age', 'Injury', 'Fatal (Y\/N)', 'Time', 'Species ']\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata3 = ce_ohe.fit_transform(data2)\ndata3","97cc59da":"target=['Fatal (Y\/N)']\ndatay=data3['Fatal (Y\/N)']\ndatax=data3.drop('Fatal (Y\/N)',axis=1)","251cd53a":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","fb172070":"n=len(data3)\nprint(n)","3c54bf59":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","65493673":"trainX=datax.loc[N[0:(n\/\/4)*3]]\ntrainY=datay.loc[N[0:(n\/\/4)*3]]\ntestX=datax.loc[N[(n\/\/4)*3:]]\ntestY=datay.loc[N[(n\/\/4)*3:]]","00974146":"print(trainX.shape)\nprint(testX.shape)","77d52fa8":"df_columns = list(datax.columns)\nprint(df_columns)","0c22fff1":"train_df=trainX\ntest_df=testX","9e783d41":"train_df.columns=df_columns\ntest_df.columns=df_columns","d3c3f065":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","52e3a46d":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","4313c30e":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","aec9494f":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","ac815823":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","4046d6f8":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","8fe5128e":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","b4f03b87":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('trainY of '+target[i],fontsize=12)\n    ax.set_ylabel('oof of '+target[i],fontsize=12)\n    ax.scatter(y,oof)","1ec614e5":"print(target)","b0c4e4be":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","1d481af0":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","4e8bcc01":"data2[data2['Fatal (Y\/N)']=='Y']['Injury'].unique()[0:100]","b0350e3b":"df = data2[data2['Fatal (Y\/N)']=='Y']['Injury']","0be5abb0":"import re\nimport nltk\nnltk.download(\"stopwords\")\nnltk.download('punkt')\nfrom nltk import word_tokenize,sent_tokenize\nnltk.download('wordnet')\nimport nltk as nlp","a5680048":"cult_list=[]\n\nfor cult in df:\n    cult=re.sub(\"[^a-zA-z]\",\" \",cult)\n    cult=cult.lower()\n    cult=nltk.word_tokenize(cult)\n    lemma=nlp.WordNetLemmatizer()\n    cult=[lemma.lemmatize(word) for word in cult]\n    cult=\" \".join(cult)\n    cult_list.append(cult)","30193139":"from sklearn.feature_extraction.text import CountVectorizer\nmax_features=200\ncount_vectorizer=CountVectorizer(max_features=max_features,stop_words=\"english\")\nsparce_matrix=count_vectorizer.fit_transform(cult_list).toarray()","71640f0f":"data3 = pd.DataFrame(count_vectorizer.get_feature_names(),columns=[\"Words\"])\ndata3","3d18bb82":"random.seed(2019)\nrandom.shuffle(data3.Words)\ndata3[0:10]","9086fb88":"from wordcloud import WordCloud \nimport matplotlib.pyplot as plt\n\nplt.subplots(figsize=(16,16))\nwordcloud=WordCloud(background_color=\"black\",width=1024,height=768).generate(\" \".join(data3.Words))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","1721c0e0":"# Model","af3a4d15":"## For fatality('Fatal (Y\/N)'), 'Injury' is the most important factor.","b41a0062":"# Target setting","ffcfcf19":"# Visualize Importance and Predict"}}