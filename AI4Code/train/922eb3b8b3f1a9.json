{"cell_type":{"475271c7":"code","ddeca32c":"code","f3102f57":"code","c8d4cb2e":"code","531a91b4":"code","5ccc6fbf":"code","c878ee19":"code","1ca63cc3":"code","1a2162d7":"code","d9482d1e":"code","128750cf":"code","26c0bb22":"code","0c672c06":"code","9200f204":"code","e0febf0e":"code","f5913c1e":"code","5ccb88b5":"code","a94ad7de":"code","56dff1ac":"code","e17e80eb":"code","af397ac8":"code","f0d1530a":"code","737810cb":"code","980d7a06":"code","24eca2b1":"code","c0187c0a":"code","93714e58":"code","404e9990":"code","5c094bb6":"code","30b3ab81":"markdown","a2a2025e":"markdown","ad4dc2fe":"markdown","59e073fe":"markdown","8abf970d":"markdown","97953cbc":"markdown","70944bfa":"markdown","8e202a47":"markdown"},"source":{"475271c7":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQshap7jt9b6sowfrbO9wo6Xkd6mFPl3V0TPA&usqp=CAU',width=400,height=400)","ddeca32c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nfrom plotly.offline import iplot\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3102f57":"df= pd.read_csv('\/kaggle\/input\/persian-books-dataset\/data.csv',error_bad_lines = False)\ndf.head()","c8d4cb2e":"joint_df=pd.merge(df,df,left_on='book_id',right_on='book_id',how='inner')","531a91b4":"#Ascending order False\ntop_rated=df.sort_values('rating', ascending=False)\ntop10=top_rated.head(10)\nf=['title','coveruri']\ndispl=(top10[f])\ndispl.set_index('title', inplace=True)","5ccc6fbf":"from IPython.display import Image, HTML\n\ndef path_to_image_html(path):\n    '''\n     This function essentially convert the image url to \n     '<img src=\"'+ path + '\"\/>' format. And one can put any\n     formatting adjustments to control the height, aspect ratio, size etc.\n     within as in the below example. \n    '''\n\n    return '<img src=\"'+ path + '\"\"\/width=\"200\" height=\"40\" alt=\"Computer Hope\">'\n\nHTML(displ.to_html(escape=False ,formatters=dict(coveruri=path_to_image_html),justify='center'))","c878ee19":"#Ascending order True\npop10=df.sort_values(by='rating', ascending=True)\nf=['title','coveruri']\npop10=pop10.head(10)\n\npop10=(pop10[f])\npop10=pop10.set_index('title')","1ca63cc3":"HTML(pop10.to_html(escape=False ,formatters=dict(coveruri=path_to_image_html),justify='center'))","1a2162d7":"import seaborn as sns\nplt.figure(figsize=(10,6))\nsns.distplot(a=df['rating'], kde=True, color='r')","d9482d1e":"no_of_ratings_per_book=ratings.groupby('book_id').count()","128750cf":"no_of_ratings_per_book","26c0bb22":"plt.figure(figsize=(10,4))\nsns.distplot(a=no_of_ratings_per_book['rating'], color='g')","0c672c06":"f=['author_name', 'rating']\ntop_author_name=top_rated[f]\ntop_author_name=top_author_name.head(20)","9200f204":"fig = px.bar(top_author_name, x='author_name', y='rating', color ='rating')\nfig.show()","e0febf0e":"cnt_srs = df['categories'].value_counts().head()\ntrace = go.Bar(\n    y=cnt_srs.index[::-1],\n    x=cnt_srs.values[::-1],\n    orientation = 'h',\n    marker=dict(\n        color=cnt_srs.values[::-1],\n        colorscale = 'Greens',\n        reversescale = True\n    ),\n)\n\nlayout = dict(\n    title='Categories Distribution',\n    )\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"categories\")","f5913c1e":"fillnadf= df.fillna('')","5ccb88b5":"def clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","a94ad7de":"features=['title','author_name','rating']\nfillednadf=fillnadf[features]","56dff1ac":"fillednadf = fillednadf.astype(str)\nfillednadf.dtypes","e17e80eb":"for feature in features:\n    fillednadf[feature] = fillednadf[feature].apply(clean_data)\n    \nfillednadf.head(2)","af397ac8":"def create_soup(x):\n    return x['title']+ ' ' + x['author_name'] + ' ' + x['rating']","f0d1530a":"fillednadf['soup'] = fillednadf.apply(create_soup, axis=1)","737810cb":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(fillednadf['soup'])\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","980d7a06":"fillednadf=fillednadf.reset_index()\nindices = pd.Series(fillednadf.index, index=fillednadf['title'])","24eca2b1":"def get_recommendations_new(title, cosine_sim=cosine_sim2):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return list(df['title'].iloc[movie_indices])","c0187c0a":"l=get_recommendations_new('The Prince', cosine_sim2)\nfig = go.Figure(data=[go.Table(header=dict(values=l,fill_color='orange'))\n                     ])\nfig.show()","93714e58":"l=get_recommendations_new('\u0645\u0631\u062f \u0639\u0646\u06a9\u0628\u0648\u062a\u06cc - \u062f\u062f\u067e\u0648\u0644 (\u06f2\u06f2)', cosine_sim2)\nfig = go.Figure(data=[go.Table(header=dict(values=l,fill_color='orange'))\n                     ])\nfig.show()","404e9990":"usecols=['book_id', 'title']\ndf_col=df[usecols]","5c094bb6":"df_col.dropna()","30b3ab81":"#Creating a \"soup\" or a \"bag of words\" for all rows.","a2a2025e":"#Most Common Rating Values","ad4dc2fe":"indianpersian.com","59e073fe":"Some books have ratings less than 10. Other books got ratings greater than 80.","8abf970d":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","97953cbc":"#Codes from Niharika Pandit https:\/\/www.kaggle.com\/niharika41298\/netflix-vs-books-recommender-analysis-eda  The resize I got from #https:\/\/www.computerhope.com\/issues\/ch000055.htm\n<width=\"200\" height=\"40\" alt=\"Computer Hope\">","70944bfa":"As we can read the distplot above, the most common rating is somewhere between 3 to 5.","8e202a47":" Dropping null values."}}