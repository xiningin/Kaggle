{"cell_type":{"8db40bbf":"code","c75a9941":"code","9da9054c":"code","1f8a818f":"code","0ba2ceaa":"code","9d8f6da5":"code","4cecec0a":"code","60676d6d":"code","13581e93":"code","2f37db3f":"code","f982c0a6":"code","03b5b091":"code","20b1ba59":"code","968c31a4":"code","03e6bf09":"code","3dca32b4":"code","b953cc4e":"code","5a42fcaf":"code","bc23ea8b":"code","433a3991":"code","36154c53":"code","05d4d305":"markdown","05074b3c":"markdown","5c14ae8d":"markdown","ff555daa":"markdown","d2664ded":"markdown"},"source":{"8db40bbf":"#Kutuphanelerin yuklenmesi\nimport pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom scipy.stats import shapiro\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n# to display all columns and rows:\n#pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)\n","c75a9941":"df = pd.read_csv(\"..\/input\/churn-123\/churn kopyas.csv\")\n#ilk 5 sat\u0131r\u0131n gozlenmesi\ndf.head(2)","9da9054c":"#Eksik deger var m\u0131 sorgulanmas\u0131\ndf.isnull().sum()\n","1f8a818f":"#baz\u0131 degiskenlerin dusurulmesi\nneed_drops = [\"RowNumber\", \"CustomerId\", \"Surname\"]\ndf.drop(need_drops, axis=1, inplace=True)\n\n#degiskenleri kategorik ve say\u0131sal olarak ay\u0131rma\ncat = [col for col in df.columns if df[col].nunique() < 10]\nnum = [col for col in df.columns if df[col].nunique() >= 10 and\n       df[col].dtypes != \"O\"]\n\n","0ba2ceaa":"\n#Degiskenlerin(s\u00fctunlar) normal dag\u0131l\u0131p dag\u0131lmad\u0131g\u0131n\u0131 gosterir.\n#Yap\u0131lan normallik testlerinde t\u00fcm degiskenlerin pvalue degerleri 0.05'den kucuk old. icin H0 reddedilir.\n#Yani tum degiskenler normal dag\u0131lmam\u0131st\u0131r.\n\nfor i in ['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary']:\n    print(i)\n    t_test , p_value = shapiro(df[i])\n    print('Test \u0130statisti\u011fi = %.4f, p-de\u011feri = %.4f' % (t_test, p_value))\n\n","9d8f6da5":"\n#Baz\u0131 degiskenlerin unique degerlerine bak\u0131lmas\u0131.\n\ndf[\"Geography\"].nunique() # 3 tane ulke var\ndf[\"Age\"].nunique()\n\n#Tum degiskenlerin unique degerlerine bak\u0131lmas\u0131\nfor col in df.columns:\n    print(col, \"unique number : \", df[col].nunique())\n\n","4cecec0a":"#Kategorik degiskenlerin ozellikleri\ndef cat_summary(dataframe, categorical_columns, target, plot=False):\n    \"\"\"\n    -> Kategorik de\u011fi\u015fkenlerin s\u0131n\u0131flar\u0131n\u0131n oran\u0131n\u0131 ve targettaki medyan\u0131 g\u00f6sterir.\n    :param dataframe: \u0130\u015flem yap\u0131lacak dataframe\n    :param categorical_columns: Kategorik de\u011fi\u015fkenlerin adlar\u0131\n    :param target: Dataframe'de ilgilendi\u011fimiz de\u011fi\u015fken.\n    :param plot: Grafik \u00e7izdirmek i\u00e7in arg\u00fcman : True\/False\n    \"\"\"\n    for col in categorical_columns:\n        print(col, \" : \", dataframe[col].nunique(), \" unique classes.\\n\")\n        print(col, \" : \", dataframe[col].value_counts().sum(), \"\\n\")\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO ( % )\": 100 * dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEDIAN\": dataframe.groupby(col)[target].median(),\n                            \"TARGE_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")\n        if plot:\n            sns.countplot(x=col, data=dataframe)\n            plt.show()\n\ncat_summary(df, cat, \"Exited\")\n\n\n","60676d6d":"#Histogram cizilmesi\ndef hist_for_nums(data, numeric_cols):\n    col_counter = 0\n    data = data.copy()\n    for col in numeric_cols:\n        data[col].hist(bins=20)\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        col_counter += 1\n    print(col_counter, \"variables have been plotted\")\n\n\n    \n#Enkod fonksiyonun yaz\u0131lmas\u0131\ndef one_hot_encoder(dataframe, category_freq=10, nan_as_category=False):\n    categorical_cols = [col for col in dataframe.columns if len(dataframe[col].value_counts()) < category_freq\n                        and dataframe[col].dtypes == 'O']\n\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, dummy_na=nan_as_category, drop_first=True)\n\n    return dataframe\n","13581e93":"#Say\u0131sal degiskenler icin histogram\u0131n cizdirilmesi.\nhist_for_nums(df, num)  \n\n#Enkod islemi\n\ndf = one_hot_encoder(df)\n\n#ilk iki gozlem\ndf.head(2)\n","2f37db3f":"#Kategorik degerler a listesinde , say\u0131sal degiskenlerse b listesinde bulunmaktad\u0131r.\na = [\"NumOfProducts\",\"HasCrCard\",\"Tenure\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]\nb = ['CreditScore' , 'Age', 'Balance', 'EstimatedSalary']","f982c0a6":"#Y eksenine CreditScore sab\u0131tleyerek, x ekseninde Exited baz\u0131nda tum kategorilerin gorsel olarak incelenmesi.\nfor i in [\"NumOfProducts\",\"HasCrCard\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]:\n    if cat == \"Exited\":\n        pass\n    else:\n        \n        sns.catplot(x =\"Exited\" , y=\"CreditScore\", hue = i ,data = df , kind=\"violin\")\n        plt.show()","03b5b091":"#Y eksenine Age sab\u0131tleyerek, x ekseninde Exited baz\u0131nda tum kategorilerin gorsel olarak incelenmesi.\nfor i in [\"NumOfProducts\",\"HasCrCard\",\"Tenure\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]:\n    if cat == \"Exited\":\n        pass\n    else:\n        \n        sns.catplot(x =\"Exited\" , y=\"Age\", hue = i ,data = df , kind=\"violin\")\n        plt.show()","20b1ba59":"#Y eksenine Balance sab\u0131tleyerek, x ekseninde Exited baz\u0131nda tum kategorilerin gorsel olarak incelenmesi.\nfor i in [\"NumOfProducts\",\"HasCrCard\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]:\n    if cat == \"Exited\":\n        pass\n    else:\n        \n        sns.catplot(x =\"Exited\" , y=\"Balance\", hue = i ,data = df , kind=\"violin\")\n        plt.show()","968c31a4":"#Y eksenine EstimatedSalary sab\u0131tleyerek, x ekseninde Exited baz\u0131nda tum kategorilerin gorsel olarak incelenmesi.\nfor i in [\"NumOfProducts\",\"HasCrCard\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]:\n    if cat == \"Exited\":\n        pass\n    else:\n        \n        sns.catplot(x =\"Exited\" , y=\"EstimatedSalary\", hue = i ,data = df , kind=\"violin\")\n        plt.show()","03e6bf09":"#Y eksenine Tenure sab\u0131tleyerek, x ekseninde Exited baz\u0131nda tum kategorilerin gorsel olarak incelenmesi.\nfor i in [\"NumOfProducts\",\"HasCrCard\",\"IsActiveMember\",\"Geography_Germany\",\"Geography_Spain\",\"Gender_Male\"]:\n    if cat == \"Exited\":\n        pass\n    else:\n        \n        sns.catplot(x =\"Exited\" , y=\"Tenure\", hue = i ,data = df , kind=\"violin\")\n        plt.show()","3dca32b4":"#Korelasyonlar\u0131n hesaplanmas\u0131\ndf.corr().T","b953cc4e":"#yeni degisken uretilmesi\n\ndf[\"b_a\"] = (df.Age * df.Balance)\n\n#Degiskenlere yap\u0131lan bask\u0131lama islemleri\ndf.Balance = (df.Balance + 1)\ndf.loc[(df.Exited == 0) & (df.Age > 50) , \"Age\"] = 50\ndf.loc[(df.Age < 20) , \"Age\"] = 20\ndf.loc[(df.Exited == 0) & (df.Balance > 200000) , \"Balance\"] = 200000\ndf.loc[(df.NumOfProducts == 1) & (df.NumOfProducts == 2) & (df.NumOfProducts == 3) , \"NumOfProducts\"] = 1\ndf.drop(\"HasCrCard\" , axis = 1 , inplace=True)\ndf.head(2)","5a42fcaf":"#Exited degiskeninin dusurulmesi\nX = df.drop('Exited', axis=1)\ny = df[[\"Exited\"]]\n\n#Veri setinin egitim ve test seti olarak bolunmesi\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, stratify = y , random_state=46)\n","bc23ea8b":"# LightGBM\n\n#Model olusturma\nlgbm = LGBMClassifier(random_state=12345)\ncross_val_score(lgbm, X, y, cv=10).mean()\n\n# model tuning\nlgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [500, 1000],\n               \"max_depth\": [3, 5]}\n\n#GridSearchCV hesaplanmas\u0131\ngs_cv = GridSearchCV(lgbm,\n                     lgbm_params,\n                     cv=5,\n                     n_jobs=-1,\n                     verbose=2).fit(X, y)\n","433a3991":"#En iyi parametrelerle model kurma\nlgbm_tuned = LGBMClassifier(**gs_cv.best_params_).fit(X_train, y_train)\ncross_val_score(lgbm_tuned, X_test, y_test, cv=10).mean()\n\n\nfeature_imp = pd.Series(lgbm_tuned.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n#Degisken onem duzeylerinin grafiksel gosterimi\nsns.barplot(x=feature_imp, y=feature_imp.index)\nplt.xlabel('De\u011fi\u015fken \u00d6nem Skorlar\u0131')\nplt.ylabel('De\u011fi\u015fkenler')\nplt.title(\"De\u011fi\u015fken \u00d6nem D\u00fczeyleri\")\nplt.show()\n\n#cv islemleri(caprazlama)\nkfold = KFold(n_splits=10, random_state=123456)\ncv_results = cross_val_score(LGBMClassifier(), X_train, y_train, cv=kfold, scoring=\"accuracy\")\n","36154c53":"cv_results.mean()","05d4d305":"# Modelleme","05074b3c":"# Cesitli caprazlamalarla veri setinin incelenmesi","5c14ae8d":"**S\u0131n\u0131fland\u0131rma Sonucu**","ff555daa":"# Yeni degisken olusturulmas\u0131","d2664ded":"- **Problem**:\n\n\u015eirketi terk edecek m\u00fc\u015fterileri tahmin edebilecek bir makine \u00f6\u011frenmesi modeli geli\u015ftirebilir misiniz?\nAma\u00e7 bir bankan\u0131n m\u00fc\u015fterilerinin bankay\u0131 terk etme ya da terk etmeme durumunun tahmin edilmesidir.\nM\u00fc\u015fteri terkini tan\u0131mlayan olay m\u00fc\u015fterinin banka hesab\u0131n\u0131 kapatmas\u0131d\u0131r.\n\n- **Veri Seti Hikayesi**:\n10000 g\u00f6zlemden ve 12 de\u011fi\u015fkenden olu\u015fmaktad\u0131r.\nBa\u011f\u0131ms\u0131z de\u011fi\u015fkenler m\u00fc\u015fterilere ili\u015fkin bilgiler bar\u0131nd\u0131rmaktad\u0131r.\nBa\u011f\u0131ml\u0131 de\u011fi\u015fken m\u00fc\u015fteri terk durumunu ifade etmektedir.\n- ***De\u011fi\u015fkenler***:\n- Surname : Soy isim\n- CreditScore : Kredi skoru\n- Geography : \u00dclke (Germany\/France\/Spain)\n- Gender : Cinsiyet (Female\/Male)\n- Age : Ya\u015f\n- Tenure : Ka\u00e7 y\u0131ll\u0131k m\u00fc\u015fteri\n- Balance : Bakiye\n- NumOfProducts : Kullan\u0131lan banka \u00fcr\u00fcn\u00fc\n- HasCrCard : Kredi kart\u0131 durumu (0=No,1=Yes)\n- IsActiveMember : Aktif \u00fcyelik durumu (0=No,1=Yes)\n- EstimatedSalary : Tahmini maa\u015f\n- Exited : Terk mi de\u011fil mi? (0=No,1=Yes)"}}