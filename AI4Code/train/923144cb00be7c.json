{"cell_type":{"cd5e010c":"code","1dfa1947":"code","d34d55b8":"code","54864b0d":"code","48753b2e":"code","01c339fd":"code","0c035fde":"code","bbfc11b1":"code","a3085833":"code","20638e5b":"code","41e3d409":"code","bc0e0e0a":"code","bee87f9e":"code","b052c638":"code","b14c78b9":"code","1b53c914":"code","c9015b8f":"code","33e222e2":"code","deb2d4bb":"code","f0774149":"code","ae1c4feb":"code","ceaa336f":"code","430d0a35":"code","84968d98":"code","3cdea684":"code","843ab4fa":"code","83cd08ff":"code","4bae45c6":"code","d95e4dbb":"code","b4a2885b":"code","5a1a2402":"code","bedc6351":"code","f61b366f":"code","00479619":"code","1f9f972b":"code","9a5a2cf7":"code","8ab0fa7c":"code","d734b121":"code","cd709a2e":"code","5bddb3b0":"code","4e140cee":"code","72488c2e":"code","48711d66":"code","d50b5e06":"code","355df663":"code","6a1ea5e6":"markdown","ee1e788c":"markdown","b909e3c5":"markdown","ec820acf":"markdown","3bacc890":"markdown","bbe913f5":"markdown","a7eca088":"markdown","8b0c92d8":"markdown","2525cebf":"markdown"},"source":{"cd5e010c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dfa1947":"df_train = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/o2Saturation.csv')","d34d55b8":"df_train.head()","54864b0d":"df_train.shape","48753b2e":"df_train.info()","01c339fd":"# Checking null values \ndf_train.isnull().sum().sort_values(ascending = False)","0c035fde":"df_train.describe()","bbfc11b1":"# Correlation\nplt.figure(figsize = (15,8))\nsns.heatmap(df_train.corr(),center = 0, annot =True)","a3085833":"df_train.duplicated().sort_values(ascending = False)","20638e5b":"# droping duplicate values\npd.options.display.min_rows= 15\ndf_train.drop_duplicates(inplace =True)","41e3d409":"#checking duplicates again\ndf_train.duplicated().sort_values(ascending = False)","bc0e0e0a":"df_train.shape","bee87f9e":"df_train.nunique()","b052c638":"# now Looking at the age \nplt.figure(figsize = (15,8))\nsns.countplot(x ='age', data = df_train)\nplt.title('No of peoples by their age', fontsize = 20)\nplt.xlabel('Age',fontsize =15 )\nplt.ylabel('Numbers of peooples',fontsize =15 )\nplt.show()","b14c78b9":"#distribution plot of age \nsns.distplot(df_train['age'], color='red')\nplt.title('Distribution of Ages', fontsize=15, pad = 10)\nplt.xlabel('Ages', fontsize=10)\nplt.ylabel('Count', fontsize=10)\nplt.show()","1b53c914":"# countplot of age with respect to output\nplt.figure(figsize =(20,8))\nsns.countplot(x = df_train['age'],hue=df_train['output'])","c9015b8f":"print(df_train[\"age\"].max())","33e222e2":"plt.figure(figsize = (12,8))\n\nsex_data = df_train.sex.map({1: 'Male', 0: 'Female'})\ntarget_data = df_train.output.map({1: 'more chance of heart attack', 0: 'less chance of heart attack'})\nsns.countplot(hue = target_data, x = sex_data, data = df_train)\nplt.title(\"No.of heart attacks w.r.to gender \", fontsize = 20)\n\n# male having high risk of heart attack than female\n# 0= less chance of heart attack 1= more chance of heart attack","deb2d4bb":"target_data = df_train.output.map({1: 'more chance of heart attack', 0: 'less chance of heart attack'})\nsns.barplot(x = 'fbs',y = target_data, data = df_train)\nplt.title(\"Distribution of fasting Blood Sugar w.r.t. Heart Attack\" , fontsize= 10)","f0774149":"sns.barplot(x = 'cp', y = 'output', data = df_train)\nplt.title(\"Distribution of Chest Pain w.r.t. Heart Attack\" , fontsize= 15)","ae1c4feb":"target_data = df_train.output.map({1: 'more chance of heart attack', 0: 'less chance of heart attack'})\nsns.countplot(x = 'caa', hue = target_data, data = df_train)\nplt.title(\"Distribution of no. of major blood vessels w.r.t. Heart Attack\" , fontsize= 15)","ceaa336f":"cp_data = df_train.cp.map({0:'typical angina',1:'atypical angina',2:'non-anginal pain',3:'asymptomatic'})\nsns.violinplot(x = cp_data, y= 'trtbps', data = df_train)\nplt.title('resting blood pressure (in mm Hg) vs Chest Pain')\nplt.xticks(rotation =90)\nplt.show()\n#trtbps:resting blood pressure (in mm Hg)\n# cp : Chest Pain type chest pain type\n# Value 1: typical angina\n# Value 2: atypical angina\n# Value 3: non-anginal pain\n# Value 4: asymptomatic","430d0a35":"sns.histplot(x = 'thalachh', data = df_train)\n# thalach : maximum heart rate achieved\nplt.title(' Max heart bits count while heart attack')\nplt.xlabel('heart bits rate')","84968d98":"\nsns.histplot(x = 'oldpeak', data = df_train)\n# oldpeak: Previous peak\nplt.xlabel('Previous peak')","3cdea684":"plt.figure(figsize = (3,5))\ntarget_data = df_train.output.map({0:'less chance',1:'more chance'})\nsns.countplot(x = target_data,data = df_train)\nplt.xticks(rotation=90)\nplt.ylabel('No. of people')\nplt.xlabel('people are suffured or not')\nplt.title('No. of people who got heart attack', fontsize = 20)","843ab4fa":"print(df_train['output'].value_counts())\nratio = df_train['output'].value_counts()\/len(df_train['output']) *100\nratio\n# below result shows 54.3% people are suffered from heart attack \n## below result shows 45.7% people are not suffered from heart attack \n","83cd08ff":"#blood pressure \nsns.distplot(x=df_train['trtbps'],hist_kws=dict(edgecolor=\"k\", linewidth=2))\nplt.xlabel('Blood pressure')\nplt.ylabel('Density of blood pressue')\nplt.title('Distribution of blood pressure w.r. to intensity of blood pressure')","4bae45c6":"#cholesterol rate\nsns.distplot(x= df_train['chol'],hist_kws=dict(edgecolor=\"k\", linewidth=2))\nplt.xlabel('Cholesterol rate')\nplt.ylabel('Density of cholesterol rate')\nplt.title('Distribution of Cholesterol rate w.r. to intensity of Cholesterol rate')\nplt.show()","d95e4dbb":"#Making list of disease\ndisease = ['cp','fbs','restecg','exng','slp','caa','thall']\nlist(enumerate(disease))","b4a2885b":"df_train['restecg'].value_counts()\n#resting electrocardiographic results\n# 0 : Normal\n# 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n# 2: showing probable or definite left ventricular hypertrophy by Estes' criteria","5a1a2402":"plt.figure(figsize = (13,30))\nfor i in enumerate(disease):\n    plt.subplot(6,2,i[0]+1)\n    sns.countplot(x=i[1], hue = 'output',data =df_train)\n    \nplt.show()","bedc6351":"df_train.head()","f61b366f":"X = df_train.iloc[:,:-1]\nY = df_train.iloc[:,-1]","00479619":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = (0.3),random_state = 5)","1f9f972b":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV","9a5a2cf7":"model_params = {'svm':{'model':svm.SVC(gamma ='auto'),'params':{\"C\":[1,20,40],'kernel':['rbf','linear']}},\n               'random_forest':{'model':RandomForestClassifier(),'params':{'n_estimators':[1,20,40]}},\n               'logistic_regression':{'model':LogisticRegression(solver = 'liblinear',multi_class ='auto',penalty='l1'),'params':{'C':[1,20,40],}}\n              }\n    \n    ","8ab0fa7c":"model_params.items()","d734b121":"scores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(x_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf2 = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf2","cd709a2e":"model_lg = LogisticRegression(solver = 'liblinear',multi_class  = 'auto')\nmodel_lg.fit(x_train,y_train)","5bddb3b0":"pred = model_lg.predict(x_test)\npred","4e140cee":"Y.values","72488c2e":"from sklearn.metrics import f1_score\nf1_score(y_test, pred)\n","48711d66":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","d50b5e06":"from sklearn.metrics import precision_score\nprecision_score(y_test, pred)","355df663":"from sklearn.metrics import recall_score\nrecall_score(y_test, pred)","6a1ea5e6":"### Distribution plot of blood pressure and Cholesterol rate","ee1e788c":"***Other metrics score***","b909e3c5":"Logistic regresion - Best score","ec820acf":"### Relation of output with respect to other disease ","3bacc890":"The people with maximum heart rate have more risk of heart attack - (thall) - maximum heart rate achieved","bbe913f5":"## Visualization ","a7eca088":"### Conclude that maximum heart attack patients are from the age of 41 to 65 (approximately).","8b0c92d8":"### Lets Check on the basis Of Blood pressure","2525cebf":"## Training Different ML Models \n### Hyperparameter tuning "}}