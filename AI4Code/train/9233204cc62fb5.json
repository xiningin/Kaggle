{"cell_type":{"c30e9263":"code","1b5773ec":"code","3d7e8939":"code","175b3e8b":"code","418816b4":"code","467dec0a":"code","8119541b":"code","1bbc2267":"code","3d998b60":"code","a4f9d9d5":"code","ba6df798":"code","08a4ff9d":"code","3d5771a9":"code","8befa730":"code","c02b0e0e":"code","87a94816":"code","56c79299":"code","ae1741b4":"code","004e7324":"code","16210a34":"code","6654615f":"code","dbfe9e0d":"code","370123a6":"code","6b03cfa9":"code","e6f3ab88":"code","c79ce820":"code","0942ea1f":"code","e98e0946":"code","c1f9da63":"code","61b534c0":"code","74f090a2":"code","ce0c7510":"code","8a1a74e5":"code","6691af4c":"code","b691ae21":"code","13794f4f":"code","2ea2000f":"code","42f2003f":"code","1a13b4b5":"code","38b9ec88":"code","01def089":"code","87d26183":"code","9dfb74b1":"code","a2ca6103":"code","df24f8b7":"code","e98451ce":"code","dc5a6117":"code","582af4c9":"code","af827955":"code","8bbf1112":"code","b29e2dee":"code","74253f23":"code","027473f0":"code","1f32d646":"code","4aa69972":"code","1cc15bef":"code","2e6b4e9f":"code","be731745":"code","4a948908":"code","47760152":"code","fcd663db":"code","ac405da9":"code","7b7edc2c":"code","e131a401":"code","54cb46de":"code","5e21f96f":"code","65153a4e":"code","c964569d":"code","e32924d6":"code","08fd91fa":"code","da98003b":"code","dcbe32fc":"code","cb25e53d":"code","d28d2ca7":"code","4a45851b":"code","b7d76c63":"code","07255b47":"code","bc9e7425":"code","07709c0a":"code","9b344a43":"code","a9717408":"code","36844cb0":"code","32b79f90":"code","9fe22dca":"code","2d793259":"code","ac57b3a0":"code","b2edee8e":"code","b07a146b":"code","2b9669dd":"code","cc5562ea":"code","bbba9f09":"code","df93896d":"code","7fd0a12d":"code","a7a8912f":"code","f94a36b5":"code","9e072b84":"code","0ccd3b9d":"code","74966c5d":"code","06dbecb0":"markdown","3caddf10":"markdown","e0d63644":"markdown","bec8ffe0":"markdown","c1059043":"markdown","2aedda6d":"markdown","7265cd6d":"markdown","d236d35a":"markdown","28bc3406":"markdown","77c068e9":"markdown","a97b6c03":"markdown","5e3edfcb":"markdown","75cc8170":"markdown","6364b844":"markdown","b012bfa3":"markdown","1d395512":"markdown","3dde15f0":"markdown","3a973ee8":"markdown"},"source":{"c30e9263":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib.pylab import rcParams\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","1b5773ec":"from fbprophet import Prophet","3d7e8939":"def mean_abs_percentage_error(y_true,y_pred):\n    y_true,y_pred = np.array(y_true),np.array(y_pred)\n    return np.abs((y_true-y_pred)\/y_true)","175b3e8b":"df = pd.read_csv('..\/input\/energy-consumption-cleaned3.csv',index_col=0)","418816b4":"df['Date'] = pd.to_datetime(df['Date'])","467dec0a":"df[df['Date']==pd.datetime(2011,7,1)]","8119541b":"df.rename(columns={'Unnamed: 52':'Totals'},inplace=True)","1bbc2267":"df.head()","3d998b60":"data = df[['Date','Totals']]","a4f9d9d5":"data.rename(columns={'Date':'ds','Totals':'y'},inplace=True)","ba6df798":"from matplotlib.pylab import rcParams\n#divide into train and validation set\ntrain3 = data[(data.set_index('ds').index>=pd.datetime(2017,1,1)) & (data.set_index('ds').index<pd.datetime(2019,2,1))]\nvalid3 = data[data.set_index('ds').index>=pd.datetime(2019,2,1)]\n\nrcParams['figure.figsize']=12,6\n\n#plotting the data\nplt.plot(train3['ds'],train3['y'])\nplt.plot(valid3['ds'],valid3['y'])","08a4ff9d":"from matplotlib.pylab import rcParams\n#divide into train and validation set\ntrain = data[(data.set_index('ds').index>=pd.datetime(2016,1,1)) & (data.set_index('ds').index<pd.datetime(2019,2,1))]\nvalid = data[data.set_index('ds').index>=pd.datetime(2019,2,1)]\n\nrcParams['figure.figsize']=12,6\n\n#plotting the data\nplt.plot(train['ds'],train['y'])\nplt.plot(valid['ds'],valid['y'])","3d5771a9":"holidays = pd.read_excel('..\/input\/ukbankholidays.xls')","8befa730":"holidays.head()","c02b0e0e":"holidays['holiday'] = 'BANK_HOLIDAYS'\nholidays['lower_window'] = 0\nholidays['upper_window'] = 0\nholidays.rename(columns={'UK BANK HOLIDAYS':'ds'},inplace=True)","87a94816":"holidays.head()","56c79299":"train.head()","ae1741b4":"weather = pd.read_csv('..\/input\/KEW_WEATHER.csv')\nweather['DATE'] = pd.to_datetime(weather['DATE'])","004e7324":"weather.info()","16210a34":"temperature = weather[['DATE','TAVG']]\ntemperature.set_index('DATE',inplace=True)","6654615f":"precipitation = weather[['DATE','PRCP']]\nprecipitation.set_index('DATE',inplace=True)","dbfe9e0d":"train_temperature = temperature[(temperature.index>=pd.datetime(2016,1,1)) & (temperature.index<pd.datetime(2019,2,1))]\ntrain_precipitation = precipitation[(precipitation.index>=pd.datetime(2016,1,1)) & (precipitation.index<pd.datetime(2019,2,1))]","370123a6":"test_temperature =temperature[(temperature.index>=pd.datetime(2019,2,1)) & (temperature.index<=pd.datetime(2019,2,28))]\ntest_precipitation =precipitation[(precipitation.index>=pd.datetime(2019,2,1)) & (precipitation.index<=pd.datetime(2019,2,28))]","6b03cfa9":"dates=[]\nvalues=[]\nfor i in train.set_index('ds').index:\n    if(i not in train_temperature.index):\n        print(i)\n        dates.append(pd.to_datetime(i))\n        values.append(50+np.random.randint(-2,2))","e6f3ab88":"train_temperature2 = pd.concat([train_temperature,pd.DataFrame({'Date':dates,'TAVG':values}).set_index('Date')])","c79ce820":"train_temperature.loc['2018-11-16 00:00:00']","0942ea1f":"train_temperature2.plot()","e98e0946":"dates=[]\nvalues=[]\nfor i in train.set_index('ds').index:\n    if(i not in train_precipitation.index):\n        print(i)\n        dates.append(pd.to_datetime(i))\n        values.append(0+(.01*np.random.randint(-12,12)))","c1f9da63":"# values","61b534c0":"train_precipitation2 = pd.concat([train_precipitation,pd.DataFrame({'Date':dates,'PRCP':np.nan}).set_index('Date')])","74f090a2":"train_precipitation2.loc['2018-11-17 00:00:00']","ce0c7510":"train_precipitation2 = train_precipitation2.interpolate(method='linear')\ntrain_precipitation2.loc['2018-11-17 00:00:00']","8a1a74e5":"train_precipitation2.plot()","6691af4c":"for i in train_temperature2.index:\n\n    if(i not in train.set_index('ds').index):\n        print(i)\n        train_temperature2.drop(index=i,inplace=True)","b691ae21":"for i in train_precipitation2.index:\n\n    if(i not in train.set_index('ds').index):\n        print(i)\n        train_precipitation2.drop(index=i,inplace=True)","13794f4f":"train_temperature2.shape","2ea2000f":"train_precipitation2.shape","42f2003f":"train_temperature3 = train_temperature2[(train_temperature2.index>=pd.datetime(2017,1,1)) & (train_temperature2.index<pd.datetime(2019,2,1))]\ntrain_precipitation3 = train_precipitation2[(train_precipitation2.index>=pd.datetime(2017,1,1)) & (train_precipitation2.index<pd.datetime(2019,2,1))]","1a13b4b5":"train2 = train.merge(train_temperature2.reset_index(),left_on='ds',right_on='index').drop('index',axis=1)\ntrain2 = train2.merge(train_precipitation2.reset_index(),left_on='ds',right_on='index').drop('index',axis=1)","38b9ec88":"train3 = train3.merge(train_temperature3.reset_index(),left_on='ds',right_on='index').drop('index',axis=1)\ntrain3 = train3.merge(train_precipitation3.reset_index(),left_on='ds',right_on='index').drop('index',axis=1)","01def089":"help(Prophet.add_regressor)","87d26183":"train2.head()","9dfb74b1":"model=Prophet(daily_seasonality=True,n_changepoints=37,holidays=holidays)\nmodel.add_regressor('TAVG',prior_scale=0.5,mode='multiplicative')\nmodel.add_regressor('PRCP',prior_scale=0.5,mode='multiplicative')\n# model.add_country_holidays(country_name='UK')\n# m.add_seasonality('self_define_cycle',period=8,fourier_order=8,mode='additive')","a2ca6103":"model3=Prophet(daily_seasonality=True,n_changepoints=37,holidays=holidays)\nmodel3.add_regressor('TAVG',prior_scale=0.5,mode='multiplicative')\nmodel3.add_regressor('PRCP',prior_scale=0.5,mode='multiplicative')\n# model.add_country_holidays(country_name='UK')\n# m.add_seasonality('self_define_cycle',period=8,fourier_order=8,mode='additive')","df24f8b7":"model.fit(train2)","e98451ce":"model3.fit(train3)","dc5a6117":"model.train_holiday_names","582af4c9":"future = model.make_future_dataframe(periods=28)\nfuture.tail()","af827955":"# import utils\n# futures = utils.add_regressor_to_future(future, [test_temperature,test_precipitation])","8bbf1112":"\nfuture3 = model3.make_future_dataframe(periods=28)\nfuture3.tail()","b29e2dee":"future['TAVG']=pd.concat([train_temperature2,test_temperature]).reset_index()['TAVG']\nfuture['PRCP']=pd.concat([train_precipitation2,test_precipitation]).reset_index()['PRCP']\n","74253f23":"future3['TAVG']=pd.concat([train_temperature3,test_temperature]).reset_index()['TAVG']\nfuture3['PRCP']=pd.concat([train_precipitation3,test_precipitation]).reset_index()['PRCP']","027473f0":"future3.isna().sum()","1f32d646":"# Python\nforecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","4aa69972":"# Python\nforecast3 = model3.predict(future3)\nforecast3[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","1cc15bef":"#plot the predictions for validation set\nplt.plot(train2.set_index('ds')['y'], label='Train')\nplt.plot(valid.set_index('ds'), label='Valid',alpha=0.5)\nplt.plot(forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat'], label='Prediction',alpha=0.5)\n# plt.legend()\n# plt.save_fig('feb_forecast.png', bbox_inches='tight')","2e6b4e9f":"#plot the predictions for validation set\nplt.plot(train3.set_index('ds')['y'], label='Train')\nplt.plot(valid3.set_index('ds'), label='Valid',alpha=0.4)\nplt.plot(forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat'], label='Prediction',alpha=0.4)\n# plt.legend()\nplt.show()","be731745":"fig2 = model.plot_components(forecast)","4a948908":"fig4 = model.plot_components(forecast3)","47760152":"fig, ax = plt.subplots()\nplt.plot(valid.set_index('ds'), label='Valid',color='orange')\nplt.plot(forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat'], label='Prediction',color='blue')\n# upper=plt.plot(forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\n# lower=plt.plot(forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\n# ax.fill_between(valid.set_index('ds').index,forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_upper'],\n#                 forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_lower'], alpha=0.4)\nplt.legend()\nplt.savefig('three_years_train.png', bbox_inches='tight')","fcd663db":"fig, ax = plt.subplots()\nplt.plot(valid.set_index('ds'), label='Valid',color='orange')\nplt.plot(forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat'], label='Prediction',color='blue')\n# upper=plt.plot(forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\n# lower=plt.plot(forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\n# ax.fill_between(valid.set_index('ds').index,forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_upper'],\n#                 forecast3[forecast3['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat_lower'], alpha=0.4)\nplt.legend()\nplt.savefig('two_years_train.png', bbox_inches='tight')","ac405da9":"fig, ax = plt.subplots()\nplt.plot(valid[(valid['ds']>=pd.datetime(2019,2,1)) & (valid['ds']<pd.datetime(2019,2,15))].set_index('ds'), label='Valid',color='orange')\nplt.plot(forecast3[(forecast3['ds']>=pd.datetime(2019,2,1)) & (forecast3['ds']<pd.datetime(2019,2,15))].set_index('ds')['yhat'], label='Prediction',color='blue')\nupper=plt.plot(forecast3[(forecast3['ds']>=pd.datetime(2019,2,1)) & (forecast3['ds']<pd.datetime(2019,2,15))].set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\nlower=plt.plot(forecast3[(forecast3['ds']>=pd.datetime(2019,2,1)) & (forecast3['ds']<pd.datetime(2019,2,15))].set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\nax.fill_between(valid[(valid['ds']>=pd.datetime(2019,2,1)) & (valid['ds']<pd.datetime(2019,2,15))].set_index('ds').index,\n                forecast3[(forecast3['ds']>=pd.datetime(2019,2,1)) & (forecast3['ds']<pd.datetime(2019,2,15))].set_index('ds')['yhat_upper'],\n                forecast3[(forecast3['ds']>=pd.datetime(2019,2,1)) & (forecast3['ds']<pd.datetime(2019,2,15))].set_index('ds')['yhat_lower'], \n                alpha=0.5)\nplt.legend()\nplt.savefig('two_years_train_week.png', bbox_inches='tight')","7b7edc2c":"# valid[valid['ds']>=pd.datetime(2019,1,28)].set_index('ds')['y'].values","e131a401":"# forecast[forecast['ds']>=pd.datetime(2019,1,28)].set_index('ds')['yhat'].values\n# valid.set_index('ds')","54cb46de":"#calculate rmse\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nrms = sqrt(mean_squared_error(valid.set_index('ds'),forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat']))\nprint(rms)","5e21f96f":"np.mean(mean_abs_percentage_error(valid[valid['ds']>=pd.datetime(2019,2,1)].set_index('ds')['y'],forecast[forecast['ds']>=pd.datetime(2019,2,1)].set_index('ds')['yhat']))*100","65153a4e":"train2.head()","c964569d":"total_temperature=pd.concat([train_temperature2,test_temperature]).reset_index()\ntotal_precipitation=pd.concat([train_precipitation2,test_precipitation]).reset_index()","e32924d6":"total_df = pd.concat([forecast.reset_index()['ds'],forecast['yhat'],data['y'][:1154]],axis=1)","08fd91fa":"total_df","da98003b":"total_df.loc[:,['y','yhat']].corr()","dcbe32fc":"from scipy.stats import skew","cb25e53d":"f, ax = plt.subplots(figsize=(8,8))\nsns.distplot((total_df.loc['2019':,'yhat'] - total_df.loc['2019':,'y']), ax=ax, color='0.4')\nax.grid(ls=':')\nax.set_xlabel('residuals', fontsize=15)\nax.set_ylabel(\"normalised frequency\", fontsize=15)\nax.grid(ls=':')\n\n[l.set_fontsize(13) for l in ax.xaxis.get_ticklabels()]\n[l.set_fontsize(13) for l in ax.yaxis.get_ticklabels()];\n\nax.text(0.05, 0.9, \"Skewness = {:+4.2f}\\nMedian = {:+4.2f}\".\\\n        format(skew(total_df.loc['2019':,'yhat'] - total_df.loc['2019':,'y']), (total_df.loc['2019':,'yhat'] - total_df.loc['2019':,'y']).median()), \\\n        fontsize=14, transform=ax.transAxes)\n\nax.axvline(0, color='0.4')\n\nax.set_title('Residuals distribution (test set)', fontsize=17)","d28d2ca7":"corr = total_df.set_index('ds').loc[:,['y','yhat']].rolling(window=30, center=True).corr().iloc[0::2,1]","4a45851b":"corr.index = corr.index.droplevel(1)","b7d76c63":"%matplotlib inline\nf, ax = plt.subplots(figsize=(14, 8))\n\ncorr.plot(ax=ax, lw=3, color='0.4')\n\nax.axhline(0.8, color='0.8', zorder=-1)\nax.axhline(0.6, color='0.8', zorder=-1)\nax.axvline('2019', color='k', zorder=-1)\nax.grid(ls=':')\n# ax.set_ylim([0.5, 0.9])\nax.set_xlabel('date', fontsize=15)\nax.set_ylabel(\"Pearson's R\", fontsize=15)\nax.grid(ls=':')\n[l.set_fontsize(13) for l in ax.xaxis.get_ticklabels()]\n[l.set_fontsize(13) for l in ax.yaxis.get_ticklabels()]\n\nax.set_yticks(np.arange(0.5, 1., 0.1)); \n\nax.set_title('30 days running window correlation\\nbetween observed and modelled \/ predicted values', fontsize=15)\n","07255b47":"# total_temperature=pd.concat([train_temperature2,test_temperature]).reset_index()\n# total_precipitation=pd.concat([train_precipitation2,test_precipitation]).reset_index()","bc9e7425":"train","07709c0a":"from fbprophet.diagnostics import cross_validation\ndf_cv = cross_validation(model, initial='730 days', period='30 days', horizon = '31 days')\ndf_cv.head()","9b344a43":"df_cv","a9717408":"corr = df_cv.set_index('ds').loc[:,['y','yhat']].rolling(window=30, center=True).corr().iloc[0::2,1]","36844cb0":"corr.index = corr.index.droplevel(1)","32b79f90":"%matplotlib inline\nf, ax = plt.subplots(figsize=(14, 8))\n\ncorr.plot(ax=ax, lw=3, color='0.4')\n\nax.axhline(0.8, color='0.8', zorder=-1)\nax.axhline(0.6, color='0.8', zorder=-1)\nax.axvline('2018\/12\/1', color='k', zorder=-1)\nax.grid(ls=':')\n# ax.set_ylim([0.5, 0.9])\nax.set_xlabel('date', fontsize=15)\nax.set_ylabel(\"Pearson's R\", fontsize=15)\nax.grid(ls=':')\n[l.set_fontsize(13) for l in ax.xaxis.get_ticklabels()]\n[l.set_fontsize(13) for l in ax.yaxis.get_ticklabels()]\n\nax.set_yticks(np.arange(0.5, 1., 0.1)); \n\nax.set_title('30 days running window correlation\\nbetween observed and modelled \/ predicted values', fontsize=15)\n","9fe22dca":"df_cv.set_index('ds',inplace=True)","2d793259":"corr_season_test = df_cv.loc['2018':,['y','yhat']].groupby(df_cv.loc['2018':,:].index.month).corr()\ncorr_season_train = df_cv.loc[:'2018',['y','yhat']].groupby(df_cv.loc[:'2018',:].index.month).corr()\ncorr_season = df_cv.loc[:,['y','yhat']].groupby(df_cv.loc[:,:].index.month).corr()","ac57b3a0":"f, ax = plt.subplots(figsize=(8,8))\ncorr_season_train.xs('y', axis=0, level=1)['yhat'].plot(ax=ax, lw=3, marker='o', markersize=12, label='train set', ls='-', color='k',alpha=0.4)\ncorr_season_test.xs('y', axis=0, level=1)['yhat'].plot(ax=ax, lw=3, marker='o', markersize=12, label='test set', ls='--', color='k')\n# corr_season.xs('y', axis=0, level=1)['yhat'].plot(ax=ax, lw=3, marker='o', markersize=12)\n\nax.legend(fontsize=17, loc=3)\n\nax.set_xticks(range(1, 13))\nax.set_xticklabels(list('JFMAMJJASOND'))\nax.set_xlabel('month', fontsize=15)\nax.set_ylabel(\"Pearson's R\", fontsize=15)\nax.grid(ls=':')\n[l.set_fontsize(13) for l in ax.xaxis.get_ticklabels()]\n[l.set_fontsize(13) for l in ax.yaxis.get_ticklabels()]\n\nax.set_title('correlation per month', fontsize=17)\n","b2edee8e":"from fbprophet.diagnostics import performance_metrics\ndf_p = performance_metrics(df_cv)\ndf_p.head()","b07a146b":"# Python\nfrom fbprophet.plot import plot_cross_validation_metric\nfig = plot_cross_validation_metric(df_cv, metric='mape')\n","2b9669dd":"fig, ax = plt.subplots()\nplt.plot(df_cv.set_index('ds')['y'], label='Valid',color='orange')\nplt.plot(df_cv.set_index('ds')['yhat'], label='Prediction',color='blue',alpha=0.7)\nupper=plt.plot(df_cv.set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\nlower=plt.plot(df_cv.set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\nax.fill_between(df_cv.set_index('ds').index,df_cv.set_index('ds')['yhat_upper'],\n                df_cv.set_index('ds')['yhat_lower'], alpha=0.4)\nplt.legend()\n# plt.show()\nplt.savefig('cross_val.png', bbox_inches='tight')\n# plt.plot(, label='Prediction',alpha=0.7,color='green')\n# plt.show()","cc5562ea":"fig, ax = plt.subplots()\nplt.plot(df_cv.set_index('ds')['y'], label='Valid',color='orange',alpha=0.6)\nplt.plot(df_cv.set_index('ds')['yhat'], label='Prediction',color='blue',alpha=0.7)\nplt.legend()\nplt.savefig('cross_val2.png', bbox_inches='tight')\n# plt.plot(, label='Prediction',alpha=0.7,color='green')\n# plt.show()","bbba9f09":"fig, ax = plt.subplots()\nplt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['y'], label='Valid',color='orange',alpha=0.6)\nplt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['yhat'], label='Prediction',color='blue',alpha=0.7)\nupper=plt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\nlower=plt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\nax.fill_between(df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds').index,\n                df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['yhat_upper'],\n                df_cv[(df_cv['ds']>=pd.datetime(2018,1,1)) & (df_cv['ds']<pd.datetime(2018,2,1))].set_index('ds')['yhat_lower'], \n                alpha=0.4)\nplt.legend()\nplt.savefig('cross_val_month.png', bbox_inches='tight')\n# plt.plot(, label='Prediction',alpha=0.7,color='green')\n# plt.show()","df93896d":"fig, ax = plt.subplots()\nplt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['y'], label='Valid',color='orange',alpha=0.6)\nplt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['yhat'], label='Prediction',color='blue',alpha=0.7)\nupper=plt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['yhat_upper'], label='Prediction_upper',alpha=0.4,color='blue',)\nlower=plt.plot(df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['yhat_lower'], label='Prediction_lower',alpha=0.4,color='blue')\nax.fill_between(df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds').index,\n                df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['yhat_upper'],\n                df_cv[(df_cv['ds']>=pd.datetime(2018,1,7)) & (df_cv['ds']<pd.datetime(2018,1,14))].set_index('ds')['yhat_lower'], \n                alpha=0.4)\nplt.legend()\nplt.savefig('cross_val_week.png', bbox_inches='tight')\n# plt.plot(, label='Prediction',alpha=0.7,color='green')\n# plt.show()","7fd0a12d":"train2_dec = train2[(train2['ds']<pd.datetime(2018,12,1)) & (train2['ds']>=pd.datetime(2016,1,1))]\nvalid2_dec=train2[(train2['ds']<pd.datetime(2019,1,1)) & (train2['ds']>=pd.datetime(2018,12,1))]\ntemperature_dec = total_temperature[(total_temperature['index']<pd.datetime(2019,1,1)) & (total_temperature['index']>=pd.datetime(2016,1,1))]\nprecipitation_dec = total_precipitation[(total_precipitation['index']<pd.datetime(2019,1,1)) & (total_precipitation['index']>=pd.datetime(2016,1,1))]","a7a8912f":"model2=Prophet(daily_seasonality=True,n_changepoints=49,holidays=holidays)\nmodel2.add_regressor('TAVG',prior_scale=5,standardize=False)\nmodel2.add_regressor('PRCP',prior_scale=5,standardize=False)\n# Python\nmodel2.fit(train2_dec)\nfuture2 = model2.make_future_dataframe(periods=31)\nfuture2.set_index('ds',inplace=True) \nfuture2['TAVG']=temperature_dec.set_index('index')['TAVG']\nfuture2['PRCP']=precipitation_dec.set_index('index')['PRCP']\nforecast2 = model2.predict(future2.reset_index())\nforecast2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","f94a36b5":"fig = model2.plot(forecast2)","9e072b84":"np.mean(mean_abs_percentage_error(valid2_dec[(valid2_dec['ds']>=pd.datetime(2018,12,1)) & (valid2_dec['ds']<pd.datetime(2018,12,8))].set_index('ds')['y'],forecast2[(forecast2['ds']>=pd.datetime(2018,12,1)) & ((forecast2['ds']<pd.datetime(2018,12,8)))].set_index('ds')['yhat']))","0ccd3b9d":"rms = sqrt(mean_squared_error(valid2_dec.set_index('ds')['y'],forecast2[forecast2['ds']>=pd.datetime(2018,12,1)].set_index('ds')['yhat']))\nprint(rms)","74966c5d":"fig, ax = plt.subplots()\nplt.plot(valid2_dec.set_index('ds')['y'], label='Valid',color='orange')\nplt.plot(forecast2[forecast2['ds']>=pd.datetime(2018,12,1)].set_index('ds')['yhat'], label='Prediction',color='blue')","06dbecb0":"### Create the model","3caddf10":"### Loading the bank holidays in uk","e0d63644":"### create a df for train data set","bec8ffe0":"Mean Absoulte percentage error","c1059043":"### running correlations (over 30 days) between observed and modelled \/ predicted values","2aedda6d":"### Prediction for future dates","7265cd6d":"### using past 2 years as train data and next one month as test data","d236d35a":"remove the dates for which data is not present","28bc3406":"#### 2 models with 2 years and 3 years o historical data","77c068e9":"### verifying for the specific month of december (2 years of past data)(many holidays)","a97b6c03":"### using past 3 years as train data and next one month as test data","5e3edfcb":"### Evaluating","75cc8170":"### Loading the weather data from the nearest weather station","6364b844":"### Cross validating for a whole year","b012bfa3":"Root mean Square error","1d395512":"### Getting the dates that are present in the data and not in weather data","3dde15f0":"### visualiazing the output","3a973ee8":"values within range verified from actual data"}}