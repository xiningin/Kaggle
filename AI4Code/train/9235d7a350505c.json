{"cell_type":{"7e50e2b5":"code","50c6d328":"code","4843da61":"code","d8f6033a":"code","124cd300":"code","e7fc8d74":"code","e82e7226":"code","0b1d1943":"code","0f865d55":"code","a71c88ed":"code","18a9dad1":"code","d54533a2":"code","461017da":"code","072b7c26":"code","ba522766":"code","0f9d9755":"code","e7e8ab0b":"code","1772c09c":"code","d2915163":"code","6a542b94":"code","bf5ac2d8":"code","5e345b2d":"code","783315fa":"code","d15cf499":"code","e3dfb230":"code","c79e7d57":"code","1e544399":"code","bf4de65d":"code","9af8c42d":"code","9cfebe10":"code","e07a5f93":"code","58ce0a80":"code","b633343e":"code","fb313b96":"code","32f5d301":"code","1a9405cb":"code","402312c4":"code","42ca94ad":"code","14ab389b":"code","2b77811b":"code","901439f4":"code","c704fa85":"code","b0674884":"code","ef89fe6f":"code","35154bd7":"code","9e4b7a0c":"code","3585e254":"code","e582d4f5":"code","a7d4e85e":"markdown","5d55ccf4":"markdown","97133115":"markdown","74e54c73":"markdown","c2bc97cc":"markdown","729fb03f":"markdown","2baa0937":"markdown","4a835812":"markdown","3cdd9419":"markdown","727465aa":"markdown","d957943b":"markdown"},"source":{"7e50e2b5":"# Libraries used\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\n\nfrom numpy.random import seed\n\nseed(11111)","50c6d328":"# Reading\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# Putting on index to each dataset before split it\ntrain = train.set_index(\"PassengerId\")\ntest = test.set_index(\"PassengerId\")\n\n# dataframe \ndf = pd.concat([train, test], axis=0, sort=False)\n\ndf","4843da61":"df.info()","d8f6033a":"df.isna().sum()","124cd300":"# Sex\nchange = {'female':0,'male':1}\ndf.Sex = df.Sex.map(change)\n\n# Embarked\nchange = {'S':0,'C':1,'Q':2}\ndf.Embarked = df.Embarked.map(change)","e7fc8d74":"columns = ['Pclass', 'Sex','Embarked','SibSp', 'Parch','Survived']\n\nplt.figure(figsize=(16, 14))\nsns.set(font_scale= 1.2)\nsns.set_style('ticks')\n\nfor i, feature in enumerate(columns):\n    plt.subplot(3, 3, i+1)\n    sns.countplot(data=df, x=feature, hue='Survived', palette='Paired')\n    \nsns.despine()","e82e7226":"columns = ['Pclass', 'Sex','Embarked','SibSp', 'Parch','Survived']\n\nplt.figure(figsize=(16, 14))\nsns.set(font_scale= 1.2)\nsns.set_style('ticks')\n\nfor i, feature in enumerate(columns):\n    plt.subplot(3, 3, i+1)\n    sns.countplot(data=df, x=feature, hue='Sex', palette='BrBG')\n    \nsns.despine()","0b1d1943":"corr_df = df.corr()\nfig, axs = plt.subplots(figsize=(8, 6))\nsns.heatmap(corr_df).set_title(\"Correlation Map\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});","0f865d55":"df.groupby(['Pclass','Sex','Survived'])['Age'].median()","a71c88ed":"#Filling the missing values with mean of Pclass and Sex.\ndf[\"Age\"].fillna(df.groupby(['Pclass','Sex'])['Age'].transform(\"mean\"), inplace=True)","18a9dad1":"fig, axs = plt.subplots(figsize=(10, 5))\nsns.histplot(data=df, x='Age').set_title(\"Age distribution\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nsns.despine()","d54533a2":"auxage = pd.cut(df['Age'], 4)\nfig, axs = plt.subplots(figsize=(15, 5))\nsns.countplot(x=auxage, hue='Survived', data=df).set_title(\"Age Bins\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nsns.despine()","461017da":"# converting to categorical\ndf['Age'] = LabelEncoder().fit_transform(auxage) ","072b7c26":"pd.crosstab(df['Age'], df['Survived'])","ba522766":"df[\"Fare\"].fillna(df.groupby(['Pclass', 'Sex'])['Fare'].transform(\"median\"), inplace=True)","0f9d9755":"auxfare = pd.cut(df['Fare'],5)\nfig, axs = plt.subplots(figsize=(15, 5))\nsns.countplot(x=auxfare, hue='Survived', data=df).set_title(\"Fare Bins\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nsns.despine()","e7e8ab0b":"df['Fare'] = LabelEncoder().fit_transform(auxfare) ","1772c09c":"pd.crosstab(df['Fare'], df['Survived'])","d2915163":"print(\"mean of embarked\",df.Embarked.median())\n\ndf.Embarked.fillna(df.Embarked.median(), inplace = True)","6a542b94":"print(\"Percentage of missing values in the Cabin column :\" ,round(df.Cabin.isna().sum()\/ len(df.Cabin)*100,2))","bf5ac2d8":"df.drop(['Cabin'], axis = 1, inplace = True)","5e345b2d":"df['Title'] = df.Name.str.extract('([A-Za-z]+)\\.', expand = False)","783315fa":"df.Title.value_counts()","d15cf499":"least_occuring = ['Rev','Dr','Major', 'Col', 'Capt','Jonkheer','Countess']\n\ndf.Title = df.Title.replace(['Ms', 'Mlle','Mme','Lady'], 'Miss')\ndf.Title = df.Title.replace(['Countess','Dona'], 'Mrs')\ndf.Title = df.Title.replace(['Don','Sir'], 'Mr')\n\ndf.Title = df.Title.replace(least_occuring,'Rare')\n\ndf.Title.unique()","e3dfb230":"pd.crosstab(df['Title'], df['Survived'])","c79e7d57":"df['Title'] = LabelEncoder().fit_transform(df['Title']) ","1e544399":"# I got the total number of each family adding SibSp and Parch. (1) is the same passenger.\ndf['FamilySize'] = df['SibSp'] + df['Parch']+1\ndf.drop(['SibSp','Parch'], axis = 1, inplace = True)","bf4de65d":"fig, axs = plt.subplots(figsize=(15, 5))\nsns.countplot(x='FamilySize', hue='Survived', data=df).set_title(\"Raw Column\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nsns.despine()","9af8c42d":"# Binning FamilySize column\ndf.loc[ df['FamilySize'] == 1, 'FamilySize'] = 0                            # Alone\ndf.loc[(df['FamilySize'] > 1) & (df['FamilySize'] <= 4), 'FamilySize'] = 1  # Small Family \ndf.loc[(df['FamilySize'] > 4) & (df['FamilySize'] <= 6), 'FamilySize'] = 2  # Medium Family\ndf.loc[df['FamilySize']  > 6, 'FamilySize'] = 3                             # Large Family ","9cfebe10":"fig, axs = plt.subplots(figsize=(15, 5))\nsns.countplot(x='FamilySize', hue='Survived', data=df).set_title(\"Variable Bined\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nsns.despine()","e07a5f93":"df['Ticket'] = df.Ticket.str.split().apply(lambda x : 0 if x[:][-1] == 'LINE' else x[:][-1])","58ce0a80":"df.Ticket = df.Ticket.values.astype('int64')","b633343e":"df['LastName'] = last= df.Name.str.extract('^(.+?),', expand = False)","fb313b96":"df['WomChi'] = ((df.Title == 0) | (df.Sex == 0))","32f5d301":"family = df.groupby([df.LastName, df.Pclass, df.Ticket]).Survived\n\ndf['FTotalCount'] = family.transform(lambda s: s[df.WomChi].fillna(0).count())\ndf['FTotalCount'] = df.mask(df.WomChi, (df.FTotalCount - 1), axis=0)\n\ndf['FSurvivedCount'] = family.transform(lambda s: s[df.WomChi].fillna(0).sum())\ndf['FSurvivedCount'] = df.mask(df.WomChi, df.FSurvivedCount - df.Survived.fillna(0), axis=0)\n\ndf['FSurvivalRate'] = (df.FSurvivedCount \/ df.FTotalCount.replace(0, np.nan))","1a9405cb":"df.isna().sum()","402312c4":"# filling the missing values\ndf.FSurvivalRate.fillna(0, inplace = True)\ndf.FTotalCount.fillna(0, inplace = True)\ndf.FSurvivedCount.fillna(0, inplace = True)","42ca94ad":"# You can review the result Family Survival Rate with these Families Heikkinen, Braund, Rice, Andersson,\n# Fortune, Asplund, Spector,Ryerson, Allison, Carter, Vander, Planke\n\ndf[df['LastName'] == \"Dean\"]","14ab389b":"df['PassengerId'] = df.index","2b77811b":"df = pd.get_dummies(df, columns=['Sex','Fare','Pclass'])","901439f4":"df.drop(['Name','LastName','WomChi','FTotalCount','FSurvivedCount','Embarked','Title'], axis = 1, inplace = True)","c704fa85":"df.columns","b0674884":"# I splitted df to train and test\ntrain, test = df.loc[train.index], df.loc[test.index]\n\nX_train = train.drop(['PassengerId','Survived'], axis = 1)\nY_train = train[\"Survived\"]\ntrain_names = X_train.columns\n\nX_test = test.drop(['PassengerId','Survived'], axis = 1)","ef89fe6f":"corr_train = X_train.corr()\nfig, axs = plt.subplots(figsize=(10, 8))\nsns.heatmap(corr_train).set_title(\"Correlation Map\",fontdict= { 'fontsize': 20, 'fontweight':'bold'});\nplt.show()","35154bd7":"# Scaler\nX_train = StandardScaler().fit_transform(X_train)\nX_test = StandardScaler().fit_transform(X_test)","9e4b7a0c":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_predDT = decision_tree.predict(X_test)\n\nprint(\"Accuracy of the model: \",round(decision_tree.score(X_train, Y_train) * 100, 2))","3585e254":"importances = pd.DataFrame(decision_tree.feature_importances_, index = train_names)\nimportances.sort_values(by = 0, inplace=True, ascending = False)\nimportances = importances.iloc[0:6,:] \n\nplt.figure(figsize=(8, 5)) \nsns.barplot(x=0, y=importances.index, data=importances,palette=\"deep\").set_title(\"Feature Importances\",\n                                                                                 fontdict= { 'fontsize': 20,\n                                                                                            'fontweight':'bold'});\nsns.despine()","e582d4f5":"submit = pd.DataFrame({\"PassengerId\":test.PassengerId, 'Survived':Y_predDT.astype(int).ravel()})\nsubmit.to_csv(\"submissionJavier_Vallejos.csv\",index = False)","a7d4e85e":"### 1.3. Fare column","5d55ccf4":"To get a better model,I got the Last Name of each passenger.","97133115":"The following figure show us numeric columns vs Survived column to know the behavior. In the last fig (3,3) you can see that we are working with unbalanced dataset. ","74e54c73":"Here, I created a new column to know if the passenger is woman a child, I selected the Title parameter because most of children less than 16 years have the master title.","c2bc97cc":"Fare has only one missing value and I imputed with the median or moda","729fb03f":"The four titles most ocurring are Mr, Miss, Mrs and Master. ","2baa0937":"The easy way to impute the missing values is with mean or median on base its correlation with other columns. Below you can see the correlation beetwen variables, Pclass has a good correlation with Age, but I also added Sex column to impute missing values.","4a835812":"Let's binning the columns to process it the best way.","3cdd9419":"In this part I created three new columns FTotalCount, FSurviviedCount and FSurvivalRate, the F is of Family.  FTotalCount uses a lambda function to count of the WomChi column on base of LastName, PClass and Ticked  detect families and then subtract the same passanger with a boolean process the passenger is woman or child. FSurvivedCount also uses a lambda function to sum WomChi column and then with mask function filters if the passenger is woman o child subtract the state of survival, and the last FSurvivalRate only divide FSurvivedCount and FTotalCount.\n","727465aa":"This column has many missing values and thats the reason I dropped it.","d957943b":"With the following lambda function I got the ticket's number and I changed the LINE ticket to zero."}}