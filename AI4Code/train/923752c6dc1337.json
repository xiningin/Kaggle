{"cell_type":{"b4853ea8":"code","f64fa86a":"code","54c82d4d":"code","5c647681":"code","467bc303":"code","345ae399":"code","3f29dbd0":"code","95d2623d":"code","1a20148e":"code","fbdf6444":"code","bbb8c668":"code","8cdbbca9":"markdown"},"source":{"b4853ea8":"import numpy as np\nfrom keras import layers\nfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D\nfrom keras.models import Model, load_model\nfrom keras.preprocessing import image\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import preprocess_input\nimport pydot\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nfrom resnets_utils import *\nfrom keras.initializers import glorot_uniform\nimport scipy.misc\nfrom matplotlib.pyplot import imshow\n%matplotlib inline\n\nimport keras.backend as K\nK.set_image_data_format('channels_last')\nK.set_learning_phase(1)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f64fa86a":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()","54c82d4d":"def identity_block(X, f, filters, stage, block):\n    \"\"\"\n    Implementation of the identity block as defined in Figure 4\n    \n    Arguments:\n    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    f -- integer, specifying the shape of the middle CONV's window for the main path\n    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n    stage -- integer, used to name the layers, depending on their position in the network\n    block -- string\/character, used to name the layers, depending on their position in the network\n    \n    Returns:\n    X -- output of the identity block, tensor of shape (n_H, n_W, n_C)\n    \"\"\"\n    \n    # defining name basis\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    \n    # Retrieve Filters\n    F1, F2, F3 = filters\n    \n    # Save the input value. You'll need this later to add back to the main path. \n    X_shortcut = X\n    \n    # First component of main path\n    X = Conv2D(filters = F1, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n    \n    # Second component of main path (\u22483 lines)\n    X = Conv2D(filters = F2, \n               kernel_size = (f, f), \n               strides = (1,1), \n               padding = 'same', \n               name = conv_name_base + '2b', \n               kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n\n    # Third component of main path (\u22482 lines)\n    X = Conv2D(filters = F3, \n               kernel_size = (1, 1), \n               strides = (1,1), \n               padding = 'valid', \n               name = conv_name_base + '2c', \n               kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n\n    # Final step: Add shortcut value to main path, and pass it through a RELU activation (\u22482 lines)\n    X = Add()([X_shortcut,X])\n    X = Activation('relu')(X)    \n    return X\n\ntf.compat.v1.reset_default_graph()\n\nwith tf.compat.v1.Session() as test:\n    np.random.seed(1)\n    A_prev = tf.placeholder(\"float\", [3, 4, 4, 6])\n    X = np.random.randn(3, 4, 4, 6)\n    A = identity_block(A_prev, f = 2, filters = [2, 4, 6], stage = 1, block = 'a')\n    test.run(tf.global_variables_initializer())\n    out = test.run([A], feed_dict={A_prev: X, K.learning_phase(): 0})\n    print(\"out = \" + str(out[0][1][1][0]))","5c647681":"def convolutional_block(X, f, filters, stage, block, s = 2):\n    \"\"\"\n    Implementation of the convolutional block as defined in Figure 4\n    \n    Arguments:\n    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    f -- integer, specifying the shape of the middle CONV's window for the main path\n    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n    stage -- integer, used to name the layers, depending on their position in the network\n    block -- string\/character, used to name the layers, depending on their position in the network\n    s -- Integer, specifying the stride to be used\n    \n    Returns:\n    X -- output of the convolutional block, tensor of shape (n_H, n_W, n_C)\n    \"\"\"\n    \n    # defining name basis\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    \n    # Retrieve Filters\n    F1, F2, F3 = filters\n    \n    # Save the input value\n    X_shortcut = X\n\n    # First component of main path \n    X = Conv2D(F1, (1, 1), strides = (s,s), name = conv_name_base + '2a', kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n    \n    # Second component of main path\n    X = Conv2D(F2, (f, f), strides = (1,1), name = conv_name_base + '2b', padding='same', kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n    \n    # Third component of main path\n    X = Conv2D(F3, (1, 1), strides = (1,1), name = conv_name_base + '2c', padding = 'valid', kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n\n    X_shortcut = Conv2D(F3, (1, 1), strides = (s,s), \n                   name = conv_name_base + '1', \n                   padding = 'valid', \n                   kernel_initializer = glorot_uniform(seed=0))(X_shortcut)\n    X_shortcut = BatchNormalization(axis = 3, name = bn_name_base + '1')(X_shortcut)\n\n    # Final step: Add shortcut value to main path, and pass it through a RELU activation\n    X = Add()([X,X_shortcut])\n    X = Activation('relu')(X)    \n    return X\n\ntf.reset_default_graph()\n\nwith tf.Session() as test:\n    np.random.seed(1)\n    A_prev = tf.placeholder(\"float\", [3, 4, 4, 6])\n    X = np.random.randn(3, 4, 4, 6)\n    A = convolutional_block(A_prev, f = 2, filters = [2, 4, 6], stage = 1, block = 'a')\n    test.run(tf.global_variables_initializer())\n    out = test.run([A], feed_dict={A_prev: X, K.learning_phase(): 0})\n    print(\"out = \" + str(out[0][1][1][0]))","467bc303":"def ResNet50(input_shape = (64, 64, 3), classes = 6):\n    \"\"\"\n    Implementation of the popular ResNet50 the following architecture:\n    CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> CONVBLOCK -> IDBLOCK*2 -> CONVBLOCK -> IDBLOCK*3\n    -> CONVBLOCK -> IDBLOCK*5 -> CONVBLOCK -> IDBLOCK*2 -> AVGPOOL -> TOPLAYER\n\n    Arguments:\n    input_shape -- shape of the images of the dataset\n    classes -- integer, number of classes\n\n    Returns:\n    model -- a Model() instance in Keras\n    \"\"\"\n\n    # Define the input as a tensor with shape input_shape\n    X_input = Input(input_shape)\n    \n    # Zero-Padding\n    X = ZeroPadding2D((3, 3))(X_input)\n    \n    # Stage 1\n    X = Conv2D(64, (7, 7), strides = (2, 2), name = 'conv1', kernel_initializer = glorot_uniform(seed=0))(X)\n    X = BatchNormalization(axis = 3, name = 'bn_conv1')(X)\n    X = Activation('relu')(X)\n    X = MaxPooling2D((3, 3), strides=(2, 2))(X)\n\n    # Stage 2\n    X = convolutional_block(X, f = 3, filters = [64, 64, 256], stage = 2, block='a', s = 1)\n    X = identity_block(X, 3, [64, 64, 256], stage=2, block='b')\n    X = identity_block(X, 3, [64, 64, 256], stage=2, block='c')\n\n    # Stage 3 (\u22484 lines)\n    X = convolutional_block(X, f=3, filters=[128, 128, 512], stage=3, block=\"a\", s=2)\n    X = identity_block(X,3, [128, 128, 512], stage=3, block='b')\n    X = identity_block(X,3, [128, 128, 512], stage=3, block='c')\n    X = identity_block(X,3, [128, 128, 512], stage=3, block='d')\n\n    # Stage 4 (\u22486 lines)\n    X = convolutional_block(X, f=3, filters=[256, 256, 1024], stage=4, block=\"a\", s=2)\n    X = identity_block(X,3, [256, 256, 1024], stage=4, block='b')\n    X = identity_block(X,3, [256, 256, 1024], stage=4, block='c')\n    X = identity_block(X,3, [256, 256, 1024], stage=4, block='d')\n    X = identity_block(X,3, [256, 256, 1024], stage=4, block='e')\n    X = identity_block(X,3, [256, 256, 1024], stage=4, block='f')\n\n    # Stage 5 (\u22483 lines)\n    X = convolutional_block(X, f=3, filters=[512, 512, 2048], stage=5, block=\"a\", s=2)\n    X = identity_block(X,3, [512, 512, 2048], stage=5, block='b')\n    X = identity_block(X,3, [512, 512, 2048], stage=5, block='c')\n\n    # AVGPOOL (\u22481 line). Use \"X = AveragePooling2D(...)(X)\"\n    X = AveragePooling2D(pool_size=(2, 2), name ='avg_pool' )(X)\n\n    # output layer\n    X = Flatten()(X)\n    X = Dense(classes, activation='softmax', name='fc' + str(classes), kernel_initializer = glorot_uniform(seed=0))(X)\n\n    # Create model\n    model = Model(inputs = X_input, outputs = X, name='ResNet50')\n    return model\n\nmodel = ResNet50(input_shape = (64, 64, 3), classes = 6)\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nX_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_dataset()\n# Normalize image vectors\nX_train = X_train_orig\/255.\nX_test = X_test_orig\/255.\n# Convert training and test labels to one hot matrices\nY_train = convert_to_one_hot(Y_train_orig, 6).T\nY_test = convert_to_one_hot(Y_test_orig, 6).T\nprint (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))","345ae399":"model.fit(X_train, Y_train, epochs = 2, batch_size = 32)\npreds = model.evaluate(X_test, Y_test)\nprint (\"Loss = \" + str(preds[0]))\nprint (\"Test Accuracy = \" + str(preds[1]))","3f29dbd0":"model = load_model('..\/input\/resnet50\/ResNet50.h5') \npreds = model.evaluate(X_test, Y_test)\nprint (\"Loss = \" + str(preds[0]))\nprint (\"Test Accuracy = \" + str(preds[1]))","95d2623d":"img_path = '..\/input\/resnet\/my_image.jpg'\nimg = image.load_img(img_path, target_size=(64, 64))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nx = x\/255.0\nprint('Input image shape:', x.shape)","1a20148e":"# import scipy.misc\n# my_image = scipy.misc.imread(img_path)\nimport imageio\nmy_image = imageio.imread(img_path)\nimshow(my_image)\nprint(\"class prediction vector [p(0), p(1), p(2), p(3), p(4), p(5)] = \")\nprint(model.predict(x))","fbdf6444":"model.summary()","bbb8c668":"plot_model(model, to_file='model.png')\nSVG(model_to_dot(model).create(prog='dot', format='svg'))","8cdbbca9":"pip install Pillow"}}