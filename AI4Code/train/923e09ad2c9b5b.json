{"cell_type":{"e5b9515d":"code","4f178849":"code","f8632baf":"code","8d346dc3":"code","9f33add7":"code","df9c1e0f":"code","32ea6dfc":"code","8936c26e":"code","8090235c":"code","8324788a":"code","4c03463b":"code","752152fb":"code","98e3bbfa":"code","2b6f2cec":"code","f2c05791":"code","8297d244":"code","0ad9222e":"code","54a4184f":"code","6ede06d1":"code","d938aa90":"code","a33b7ac3":"code","2c201243":"code","2a14f70f":"code","4451c91f":"code","5d23e71a":"code","efe2889b":"code","b29d70b4":"code","e9c96a0a":"code","2c30400a":"code","f8630e32":"code","dc25988d":"code","b45b2407":"code","45b3ccc0":"code","dcebd7d8":"code","9617510f":"code","77fb8e61":"code","e8e26c98":"code","4be37738":"code","9df2c5db":"code","83373aa8":"code","55e6fa8d":"code","c4994d18":"code","9b268e5d":"code","ceae76de":"code","7dc410a5":"code","23bbdf52":"code","9d612313":"code","1c3954b8":"code","7790e6aa":"code","0387b93c":"code","5a0ac16c":"code","52f6fe92":"code","56bdfdcd":"code","a177df0a":"code","efec0b9a":"code","bc750ac2":"code","ac069190":"code","19f7ad1c":"code","50590e03":"code","9097db9a":"code","31526aaa":"code","77368990":"code","11f7e212":"code","cc493dd3":"code","f5371862":"code","fd432f2a":"code","bb4270c3":"code","68c2f51a":"code","19b7102c":"code","5701d99a":"code","9b293bd8":"code","0a5d94fa":"code","7f8227b6":"code","98d8c840":"code","f07f3135":"code","9ac8b7cd":"code","b2a0f477":"code","e9bda1b1":"code","f8f40cd2":"code","9146be43":"code","6946901c":"code","533d2f96":"code","bbd21873":"code","c1be5e5e":"code","a7beaaaa":"code","6a32e4b4":"markdown","d9e3a8b0":"markdown","a78813d1":"markdown","7bb2a925":"markdown","198a09a1":"markdown","b87d015d":"markdown","e9ea28fe":"markdown","456b6c3a":"markdown","cfc003b0":"markdown","17d64c1f":"markdown","b42e21ba":"markdown","28ae8962":"markdown","fa936e97":"markdown","0aa9e7d0":"markdown","ae7c0e33":"markdown","e5a6fbe9":"markdown","32d2d8b9":"markdown","083a6a09":"markdown","ec47e36f":"markdown","56690a59":"markdown"},"source":{"e5b9515d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f178849":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom matplotlib import cm\nfrom matplotlib.dates import date2num\nfrom mpl_toolkits.basemap import Basemap","f8632baf":"df=pd.read_csv('..\/input\/ataljalyojana\/Atal Jal 31 March 2021 .xlsx - Sheet1.csv')\ndf.head()","8d346dc3":"df.shape","9f33add7":"df.State=df['State'].str.lower()","df9c1e0f":"df.isna().sum().plot(kind='bar',figsize=(15,10))","32ea6dfc":"len(df.isna().sum())","8936c26e":"pip install missingno","8090235c":"import missingno as msno\n","8324788a":"msno.matrix(df)","4c03463b":"msno.bar(df)","752152fb":"msno.heatmap(df)","98e3bbfa":"df.describe()","2b6f2cec":"df.isna().sum()","f2c05791":"df.isna().sum().plot(kind='hist',figsize=(15,10))","8297d244":"df.isna().sum().plot(kind='pie',figsize=(15,15))","0ad9222e":"df.isna().sum().plot(kind='area', subplots=True,figsize=(15,10), legend=True, sort_columns=True)","54a4184f":"df.isna().sum().plot(kind='hist',title=\"Missing value plots\", subplots=True,figsize=(15,10), legend=True, stacked=True, sort_columns=True)","6ede06d1":"df.columns","d938aa90":"plt.figure(figsize=(15,5))\ndf[['Pre_2015', 'Pst_2015']].plot.density()\nplt.show()","a33b7ac3":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.histplot(x=df['Pre_2015'], stat=\"count\", cumulative=False, common_bins=True, element=\"bars\", bins=100\n            ,kde=True)\nplt.title(\"Pre_2015\")\n\nplt.subplot(2,1,2)\nsns.histplot(x=df['Pst_2015'], stat=\"count\", cumulative=False, common_bins=True, element=\"bars\", bins=100\n            ,kde=True)\nplt.title(\"Pst_2015\")\n\nplt.show()","2c201243":"df.columns","2a14f70f":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.kdeplot(x=df['Pre_2015'], hue=df['State'], shade=True)\n            \nplt.title(\"Pre_2015\")\n\nplt.subplot(2,1,2)\nsns.kdeplot(x=df['Pst_2015'], hue=df['State'], shade=True)\n            \nplt.title(\"Pst_2015\")\n\nplt.show()","4451c91f":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.kdeplot(x=df['Pre_2016'], hue=df['State'], shade=True)\n            \nplt.title(\"Pre_2016\")\n\nplt.subplot(2,1,2)\nsns.kdeplot(x=df['Pst_2016'], hue=df['State'], shade=True)\n            \nplt.title(\"Pst_2016\")\n\nplt.show()","5d23e71a":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.kdeplot(x=df['Pre_2017'], hue=df['State'], shade=True)\n            \nplt.title(\"Pre_2017\")\n\nplt.subplot(2,1,2)\nsns.kdeplot(x=df['Pst_2017'], hue=df['State'], shade=True)\n            \nplt.title(\"Pst_2017\")\n\nplt.show()","efe2889b":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.kdeplot(x=df['Pre_2018'], hue=df['State'], shade=True)\n            \nplt.title(\"Pre_2018\")\n\nplt.subplot(2,1,2)\nsns.kdeplot(x=df['Pst_2018'], hue=df['State'], shade=True)\n            \nplt.title(\"Pst_2018\")\n\nplt.show()","b29d70b4":"plt.figure(figsize=(15,15))\nplt.subplot(2,1,1)\nsns.kdeplot(x=df['Pre_2019'], hue=df['State'], shade=True)\nplt.grid(b=True, which='both', color='black')\n\n            \nplt.title(\"Pre_2019\")\n\nplt.subplot(2,1,2)\nsns.kdeplot(x=df['Pst_2019'], hue=df['State'], shade=True)\nplt.grid(b=True, which='both', color='black')\n\n            \nplt.title(\"Pst_2019\")\n\nplt.show()","e9c96a0a":"df['State'].value_counts().plot(kind='bar', figsize=(10,10))\nplt.grid(b=True, which='both', color='black')\n","2c30400a":"df.loc[df.duplicated()]","f8630e32":"df['State'].value_counts()","dc25988d":"x=['maharashtra', 'haryana','rajasthan','karnataka','gujarat','uttar pradesh','madhya pradesh']\ny=[699,614,387,299,272,198,187]\nplt.figure(figsize=(10,10))\nplt.barh(x, y)\nplt.grid(b=True, which='both', color='black')\n\nfor index, value in enumerate(y):\n    plt.text(value, index, str(value))","b45b2407":"df.columns","45b3ccc0":"df['District'].value_counts()","dcebd7d8":"df_district_name=df.groupby('State')['District'].nunique()","9617510f":"df_district_name.plot(kind='bar', title=\"District counts in state\", figsize=(10,10))\nplt.grid(b=True, which='both', color='black')\n","77fb8e61":"df_district_name.sort_values()","e8e26c98":"x=['maharashtra', 'haryana','rajasthan','karnataka','gujarat','uttar pradesh','madhya pradesh']\ny=[13,14,17,14,7,9,5]\nplt.figure(figsize=(10,10))\nplt.barh(x, y)\nplt.grid(b=True, which='both', color='black')\n\nfor index, value in enumerate(y):\n    plt.text(value, index, str(value))","4be37738":"df.columns","9df2c5db":"df_block_name=df.groupby(['State', 'District'], sort=True)['Block'].nunique()","83373aa8":"df_water_table=df.groupby('State')['Well Depth'].value_counts()","55e6fa8d":"fig = plt.figure(figsize=(10,10))\nstates=df.groupby('State')['Well Depth'].count().sort_values(ascending=True)\nstates.plot(kind='barh', fontsize=20)\nplt.grid(b=True, which='both', color='black')\nplt.xlabel(\"No of well cpunt in state\")\nplt.ylabel(\"State Name\")\nplt.show()","c4994d18":"fig = plt.figure(figsize=(10,10))\ndf_block_distric=df.groupby('State', sort=True)['Block'].count().sort_values(ascending=True)\ndf_block_distric.plot(kind='barh', fontsize=20)\nplt.grid(b=True, which='both', color='black')\nplt.xlabel(\"No of block count in state\")\nplt.ylabel(\"State Name\")\nplt.show()","9b268e5d":"from mpl_toolkits.basemap import Basemap\nfrom numpy import array","ceae76de":"df['Well Depth']=df['Well Depth'].replace(np.nan, 0)","7dc410a5":"df['Well Depth'].isnull().value_counts()","23bbdf52":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\nnc=array(df['State'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x))\n#plt.scatter(x, y, s=well_depth, marker=\"o\", c=population_sizes ,cmap=cm.Dark2, alpha=0.7)\nplt.scatter(x, y,marker='o')\n\nfor ncs, xpt, ypt in zip(nc, x, y):\n    plt.text(xpt+60000, ypt+30000, ncs, fontsize=10, fontweight='bold')\n\nplt.title('Indian State with water table',fontsize=20)\n","9d612313":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x))\nplt.scatter(x, y,s=well_depth,marker='o', cmap=cm.Dark2_r)\n\nfor pts, xpt, ypt in zip(x, y):\n    plt.text(xpt+60000, ypt+30000, fontsize=10, fontweight='bold')","1c3954b8":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x))\nplt.scatter(x, y,s=well_depth,marker='*', cmap=cm.Dark2, linewidths=3)\nplt.title(\"Map of India with Longitute and Latitude \")","7790e6aa":"import plotly.express as px\n","0387b93c":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\n\n#fig=px.scatter(x=x, y=y)\nfig=px.scatter_3d()\nfig.show()","5a0ac16c":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nplt.scatter(x=df['Longitude'], y=df['Latitude'])\nplt.show()","52f6fe92":"df.info()","56bdfdcd":"print(\"The Top 10 Cities sorted according to the Total Population (Descending Order)\")\ntop_pop_cities = df.sort_values(by='Well Depth',ascending=False)\ntop10_pop_village=df.head(10)\ntop10_pop_village","a177df0a":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(top10_pop_village['Longitude'])\nlt=array(top10_pop_village['Latitude'])\npt=array(top10_pop_village['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = top10_pop_village[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\") \n\n\n","efec0b9a":"df['State'].value_counts()","bc750ac2":"df_gujrat=df[df['State']=='gujarat']","ac069190":"plt.subplots(figsize=(20, 15))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_gujrat['Longitude'])\nlt=array(df_gujrat['Latitude'])\npt=array(df_gujrat['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_gujrat[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\") \n\n\n","19f7ad1c":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_gujrat['Longitude'])\nlt=array(df_gujrat['Latitude'])\npt=array(df_gujrat['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_gujrat[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on Gujrat\")\nplt.show()\n\n","50590e03":"df_maharastra=df[df['State']=='maharashtra']","9097db9a":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_maharastra['Longitude'])\nlt=array(df_maharastra['Latitude'])\npt=array(df_maharastra['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_maharastra[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on Maharatrs\")\nplt.show()\n\n","31526aaa":"df_rajasthan=df[df['State']=='rajasthan']","77368990":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_rajasthan['Longitude'])\nlt=array(df_rajasthan['Latitude'])\npt=array(df_rajasthan['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_rajasthan[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on Rajastan\")\nplt.show()\n\n","11f7e212":"df_up=df[df['State']=='uttar pradesh']","cc493dd3":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_up['Longitude'])\nlt=array(df_up['Latitude'])\npt=array(df_up['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_up[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on U.P\")\nplt.show()\n\n","f5371862":"df['State'].value_counts()","fd432f2a":"df_mp=df[df['State']=='madhya pradesh']","bb4270c3":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_mp['Longitude'])\nlt=array(df_mp['Latitude'])\npt=array(df_mp['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_mp[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on M.P\")\nplt.show()\n\n","68c2f51a":"df_kar=df[df['State']=='karnataka']","19b7102c":"plt.subplots(figsize=(20, 20))\nmap = Basemap(width=1200000,height=900000,projection='lcc',resolution='l',\n                    llcrnrlon=67,llcrnrlat=5,urcrnrlon=99,urcrnrlat=37,lat_0=28,lon_0=77)\n\nmap.drawmapboundary ()\nmap.drawcountries ()\nmap.drawcoastlines ()\n\nlg=array(df_kar['Longitude'])\nlt=array(df_kar['Latitude'])\npt=array(df_kar['Well Depth'])\n#nc=array(top10_pop_cities['name_of_city'])\n\nx, y = map(lg, lt)\nwell_depth = df_kar[\"Well Depth\"].apply(lambda x: int(x))\nplt.scatter(x, y, s=well_depth, marker=\"o\", cmap='Reds', linewidths=1) \nplt.title(\"Well Location on Kernataka\")\nplt.show()\n\n","5701d99a":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df[\"Longitude\"]), array(df[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","9b293bd8":"well_sizes = df[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df[\"Well Depth\"].min(), df[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","0a5d94fa":"len(df_maharastra)","7f8227b6":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_maharastra[\"Longitude\"]), array(df_maharastra[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","98d8c840":"well_sizes = df_maharastra[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_maharastra[\"Well Depth\"].min(), df_maharastra[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","f07f3135":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_gujrat[\"Longitude\"]), array(df_gujrat[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","9ac8b7cd":"well_sizes = df_gujrat[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_gujrat[\"Well Depth\"].min(), df_gujrat[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","b2a0f477":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_up[\"Longitude\"]), array(df_up[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","e9bda1b1":"well_sizes = df_up[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_up[\"Well Depth\"].min(), df_up[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","f8f40cd2":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_mp[\"Longitude\"]), array(df_mp[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","9146be43":"well_sizes = df_mp[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_mp[\"Well Depth\"].min(), df_mp[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","6946901c":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_kar[\"Longitude\"]), array(df_kar[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","533d2f96":"well_sizes = df_kar[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_kar[\"Well Depth\"].min(), df_kar[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","bbd21873":"df_har=df[df['State']=='haryana']","c1be5e5e":"\ndef plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df_har[\"Longitude\"]), array(df_har[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n\n    plt.show()","a7beaaaa":"well_sizes = df_har[\"Well Depth\"].apply(lambda x: int(x))\ncolorbarValue = np.linspace(df_har[\"Well Depth\"].min(), df_har[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","6a32e4b4":"# Linear Discrimant Analysis\n>Assumption \n* That your data is Gaussian, that each variable is is shaped like a bell curve when plotted.\n* That each attribute has the same variance, that values of each variable vary around the mean by the same amount on average.","d9e3a8b0":"* We can see that there are columns that have a minimum value of zero (0). On some columns, a value of zero does not make sense and indicates an invalid or missing value.\n* Missing values are frequently indicated by out-of-range entries; perhaps a negative number (e.g., -1) in a numeric field that is normally only positive, or a 0 in a numeric field that can never normally be 0.","a78813d1":"# Missingno - great tool to visualize the missing data","7bb2a925":"# Other way to visualize the missing value are as ","198a09a1":"# Matrix \n* the white lines indicate the missing values in each column. \n","b87d015d":"# Well Depth Analysis of Maharastra state","e9ea28fe":"# Well Depth Analysis of Karnataka","456b6c3a":"# Well Depth Analysis of Gujarat","cfc003b0":"# Well Depth Analysis of UP","17d64c1f":"# Well depth analysis for all state in India","b42e21ba":"# PLotting Location of Well of Gujrat on Map ","28ae8962":"# VIsualising The Missing values using the histogram","fa936e97":"# Well Depth Analysis of Haryana","0aa9e7d0":"# PLotting Location of Well of Maharastra on Map","ae7c0e33":"# Heatmap- \n* A value near -1 means if one variable appears then the other variable is very likely to be missing.\n* A value near 0 means there is no dependence between the occurrence of missing values of two variables.\n* A value near 1 means if one variable appears then the other variable is very likely to be present.","e5a6fbe9":"# Well depth Analysing M.P","32d2d8b9":"# Well Depth Analysis of MP","083a6a09":"# PLotting Location of Well of U.P on Map","ec47e36f":"# Well depth Analysis of Karnataka","56690a59":"# PLotting Location of Well of Rajasthan on Map"}}