{"cell_type":{"f3061ac0":"code","5e9a1c6c":"code","4abf3200":"code","0e83edef":"code","ff2238c7":"code","7fb6e2bb":"code","4d6fd45c":"code","54d661c6":"code","4e4911a0":"code","a8e4a4ad":"code","93fbbd08":"code","d4154c52":"code","0d58850c":"code","eebb31b4":"code","ab116117":"code","6f618b85":"code","8737741e":"code","7fcd0b14":"code","978b4b78":"code","1685a80b":"code","650d83da":"code","a9b96789":"code","874572e2":"code","b9e188c3":"code","88a7417d":"code","8794cac7":"code","d5a11588":"code","55171371":"code","52b8bc2a":"code","04a985cc":"code","2a2a71c0":"code","e12dfd24":"code","6c3ba97a":"code","74988ea9":"code","10f711dd":"code","43a53b46":"code","174de7a4":"code","d805612e":"code","0ccba23e":"code","9772149f":"code","ff5eedcc":"code","eb36bf75":"code","cfd747c8":"code","0900b2df":"code","1b8ebc16":"code","763a3845":"code","f253f6ac":"code","37e3807a":"code","8ca03f5d":"code","fd7f91af":"code","d92a026a":"markdown","47a80d04":"markdown","32ce5251":"markdown","4b1dd978":"markdown","648a2819":"markdown","2c6eb9b5":"markdown","a10c2c56":"markdown","46c69f35":"markdown","fa58d208":"markdown","6a67eec6":"markdown","7873dd04":"markdown","339d6ebb":"markdown","217d409a":"markdown","08cb11d6":"markdown","955cedd0":"markdown","8c610ce0":"markdown","157f4ca3":"markdown","80344fd6":"markdown","7719fc28":"markdown","8c0b3fd9":"markdown","016c7772":"markdown","26b6f6d0":"markdown","c2e10f56":"markdown","b6483cdf":"markdown","de8523b8":"markdown","a6e7652a":"markdown","1f6b620d":"markdown","cf89a620":"markdown","5c42d8ee":"markdown","ce6c4259":"markdown","d0a43e34":"markdown","ca5604bf":"markdown","cd8b24bd":"markdown","6461da79":"markdown","c71deeea":"markdown","a17c9d2a":"markdown","d525189b":"markdown","47f96c3d":"markdown","45ac661b":"markdown"},"source":{"f3061ac0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","5e9a1c6c":"netflix = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nnetflix.head()","4abf3200":"netflix.shape","0e83edef":"netflix.count()","ff2238c7":"netflix_shows = netflix[netflix['type']=='TV Shows']","7fb6e2bb":"netflix_movies = netflix[netflix['type']=='Movie']","4d6fd45c":"sns.set(style='darkgrid')\nax = sns.countplot(x='type', data=netflix, palette='Set2')","54d661c6":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"rating\", data=netflix_movies, palette=\"Set2\", order=netflix_movies['rating'].value_counts().index[0:15])","4e4911a0":"imdb_ratings=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb ratings.csv',usecols=['weighted_average_vote'])\nimdb_titles=pd.read_csv('\/kaggle\/input\/imdb-extensive-dataset\/IMDb movies.csv', usecols=['title','year','genre'])","a8e4a4ad":"ratings = pd.DataFrame({'Title':imdb_titles.title,\n                       'Release Year':imdb_titles.year,\n                       'Rating':imdb_ratings.weighted_average_vote,\n                       'Genre':imdb_titles.genre})\nratings.drop_duplicates(subset=['Title', 'Release Year', 'Rating'],inplace=True)\nratings.shape","93fbbd08":"ratings.dropna()\njoint_data = ratings.merge(netflix, left_on='Title', right_on='title', how='inner')\njoint_data = joint_data.sort_values(by='Rating', ascending=False)","d4154c52":"import plotly.express as px\ntop_rated = joint_data[0:10]\nfig = px.sunburst(\ntop_rated,path=['title', 'country'],values='Rating', color='Rating')\nfig.show()","0d58850c":"plt.figure(figsize=(12,10))\nsns.set(style='darkgrid')\nax = sns.countplot(y='release_year', data=netflix_movies, palette='Set2', order=netflix_movies['release_year'].value_counts().index[0:15])","eebb31b4":"countries={}\nnetflix_movies['country']=netflix_movies['country'].fillna('Unknown')\ncou=list(netflix_movies['country'])\nfor i in cou:\n    #print(i)\n    i=list(i.split(','))\n    if len(i)==1:\n        if i in list(countries.keys()):\n            countries[i]+=1\n        else:\n            countries[i[0]]=1\n    else:\n        for j in i:\n            if j in list(countries.keys()):\n                countries[j]+=1\n            else:\n                countries[j]=1","ab116117":"countries_fin={}\nfor country,no in countries.items():\n    country=country.replace(' ','')\n    if country in list(countries_fin.keys()):\n        countries_fin[country]+=no\n    else:\n        countries_fin[country]=no\n        \ncountries_fin={k: v for k, v in sorted(countries_fin.items(), key=lambda item: item[1], reverse= True)}","6f618b85":"plt.figure(figsize=(8,8))\nax = sns.barplot(x=list(countries_fin.keys())[0:10],y=list(countries_fin.values())[0:10])\nax.set_xticklabels(list(countries_fin.keys())[0:10],rotation = 90)","8737741e":"netflix_movies['duration'].isnull().sum()","7fcd0b14":"netflix_movies['duration']=netflix_movies['duration'].str.replace(' min','')","978b4b78":"netflix_movies['duration']=netflix_movies['duration'].astype(str).astype(float)","1685a80b":"netflix_movies['duration']","650d83da":"sns.set(style='darkgrid')\nsns.kdeplot(netflix_movies['duration'], shade=True)","a9b96789":"from collections import Counter\n\ngenres = list(netflix_movies['listed_in'])\ngen=[]\n\nfor i in genres:\n    i = list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',\"\"))\n        \ng = Counter(gen)","874572e2":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\n\ntext = list(set(gen))\nplt.rcParams['figure.figsize'] = (13, 13)\n\n#assigning shape to the word cloud\nmask = np.array(Image.open('..\/input\/masks\/star.png'))\nwordcloud = WordCloud(max_words=1000000,background_color=\"white\",mask=mask).generate(str(text))\n\nplt.imshow(wordcloud,interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","b9e188c3":"g={k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse= True)}\n\n\nfig, ax = plt.subplots()\n\nfig = plt.figure(figsize = (10, 10))\nx=list(g.keys())\ny=list(g.values())\nax.vlines(x, ymin=0, ymax=y, color='green')\nax.plot(x,y, \"o\", color='maroon')\nax.set_xticklabels(x, rotation = 90)\nax.set_ylabel(\"Count of movies\")\n# set a title\nax.set_title(\"Genres\")","88a7417d":"from sklearn.feature_extraction.text import TfidfVectorizer","8794cac7":"tfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\nnetflix['description'] = netflix['description'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming\n# the data\ntfidf_matrix = tfidf.fit_transform(netflix['description'])\n\n#O\/p the shape of tfidf_matrix\ntfidf_matrix.shape","d5a11588":"#Linear Kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n#Cosine similarity\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","55171371":"indices = pd.Series(netflix.index, index = netflix['title']).drop_duplicates()","52b8bc2a":"indices","04a985cc":"def get_recommendation(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n    \n    #Get the pairwise similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    #Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    \n    #Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    #Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    #return the top 10 similar movies\n    return netflix['title'].iloc[movie_indices]","2a2a71c0":"get_recommendation('Peaky Blinders')","e12dfd24":"get_recommendation('Friends')","6c3ba97a":"get_recommendation('Narcos')","74988ea9":"filledna=netflix.fillna('')\nfilledna.head()","10f711dd":"def clean_data(x):\n    return str.lower(x.replace(\" \",\"\"))","43a53b46":"#Features on which the model is to be filtered\nfeatures=['title', 'director', 'cast', 'listed_in', 'description']\nfilledna=filledna[features]","174de7a4":"for feature in features:\n    filledna[feature] = filledna[feature].apply(clean_data)\n    \nfilledna.head()","d805612e":"def create_soup(x):\n    return x['title']+ ' '+ x['director']+ ' '+ x['cast']+ ' ' + x['listed_in']+ ' ' +x['description']","0ccba23e":"filledna['soup'] = filledna.apply(create_soup, axis=1)","9772149f":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filledna['soup'])\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","ff5eedcc":"filledna = filledna.reset_index()\nindices = pd.Series(filledna.index, index=filledna['title'])","eb36bf75":"def get_recommendation_new(title, cosine_sim=cosine_sim):\n    title = title.replace(' ', '').lower()\n    idx = indices[title]\n    \n    #Get the pairwise similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    \n    #Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x:x[1], reverse=True)\n    \n    #Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    #Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n    \n    #return the top 10 similar movies\n    return netflix['title'].iloc[movie_indices]","cfd747c8":"get_recommendation_new('3 Idiots', cosine_sim2)","0900b2df":"get_recommendation_new('Friends', cosine_sim2)","1b8ebc16":"get_recommendation_new('Narcos', cosine_sim2)","763a3845":"books = pd.read_csv('..\/input\/goodbooks-10k\/books.csv')\nbooks.head()","f253f6ac":"books['original_title']","37e3807a":"books['original_title'] = books['original_title'].str.lower()\nx = netflix\nx['title'] = x['title'].str.lower()\nnetflix_books = x.merge(books, left_on='title', right_on='original_title', how='inner')","8ca03f5d":"netflix_books.shape","fd7f91af":"import plotly.graph_objects as go\nlabels = ['Shows from books', 'Shows not from books']\nvalues = [248, 6234]\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()","d92a026a":"# How many Netflix shows\/movies are inspired from books are their storylines?","47a80d04":"## Netflix is one of the most famous streaming platform and that keeps growing bigger and faster with its popularity, showa and quality content. This notebook is all about an EDA or stroy telling through its data along with a content-based recommendation system and a wide range of different graphs and visuals.","32ce5251":"## Recommendation of **Friends**","4b1dd978":"It is an evident that there are more Movies on Netflix than TV shows","648a2819":"Filtering on the following factors:\n- Title\n- Cast\n- Director\n- Listed in\n- Plot","2c6eb9b5":"# \ud83d\udcfaNetflix :: \ud83e\udd64Visualization, \ud83c\udfacRecommendation, \ud83c\udf5fEDA","a10c2c56":"Importing all essentials","46c69f35":"Let's check the shape of the dataset","fa58d208":"## TOP 10 MOVIE CONTENT CREATING COUNTRIES","6a67eec6":"So from above piechart we can clearly see that nearly 4% shows on Netlix are inspired by books.","7873dd04":"### Recommendation of **Peaky Blinders**","339d6ebb":"## Recommendation of **Narcos**","217d409a":"Okay so our new recommendation model is performing better than previous one","08cb11d6":"### Time for visulization","955cedd0":"Therefore, it is clear that international movies, dramas and comedies are the top three genres that have the highest amount of content on Netflix.\n\n","8c610ce0":"# Content based filtering on multiple metrics","157f4ca3":"## Movie ratings Analysis","80344fd6":"The TF-IDF(Term Frequency-Inverse Document Frequency (TF-IDF) ) score is the frequency of a word occurring in a document, down-weighted by the number of documents in which it occurs. This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final similarity score.","7719fc28":"2017 & 2018 were the yeasr when most of the movies were released","8c0b3fd9":"## It is seen that the model performs well, but is not very accurate.Therefore, more metrics are added to the model to improve performance.","016c7772":"Filling null values with empty string","26b6f6d0":"- The largest count of movies are made with the 'TV-MA' rating.\"TV-MA\" is a rating assigned by the TV Parental Guidelines to a television program that was designed for mature audiences only.\n\n- Second largest is the 'TV-14' stands for content that may be inappropriate for children younger than 14 years of age.\n\n- Third largest is the very popular 'R' rating.An R-rated film is a film that has been assessed as having material which may be unsuitable for children under the age of 17","c2e10f56":"Performing inner join on the ratings dataset and netflix dataset to get the content that has both ratings on IMDB and are available on Netflix.","b6483cdf":"# Analyze duration of movies","de8523b8":"From here on, the code is basically similar to the upper model except the fact that count vectorizer is used instead of tfidf","a6e7652a":"# Lollipop of genres vs their count on Netflix","1f6b620d":"So, a good amount of movies on Netflix are among the duration of 75-120 mins. It is acceptable considering the fact that a fair amount of the audience cannot watch a 3 hour movie in one sitting. ","cf89a620":"# WorldCloud for Genres","5c42d8ee":"Year wise analysis","ce6c4259":"Laoding the dataset","d0a43e34":"- Let's check **SHOW vs MOVIES**","ca5604bf":"Cleaning the data, making all the words lower case","cd8b24bd":"Top rated 10 movies on Netflix are:","6461da79":"# Recommendation System ","c71deeea":"# Great Job, we are done with this task\ud83c\udf5f","a17c9d2a":"Creating a \"soup\" or a \"bag of words\" of all rows","d525189b":"# Analysing IMDB ratings to get top raed movies on Netflix","47f96c3d":"## Plotting the duration of Movies","45ac661b":"## Recommendation of **3 Idiots**"}}