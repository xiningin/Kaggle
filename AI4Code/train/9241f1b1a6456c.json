{"cell_type":{"d9de28fd":"code","e1669f4b":"code","1dd65733":"code","7fb3c899":"code","6ed8c66d":"code","aa109c62":"code","b5d15bec":"code","74dce1f8":"code","daeeef56":"code","e3818cc2":"code","7761dce6":"code","b64b5099":"code","69fb2006":"code","3f99a48b":"code","88fbbec4":"code","2d6451e8":"code","f1253bfb":"code","ac49bbcc":"code","9360bb12":"code","294a9d34":"code","eb8e337d":"code","8159180b":"code","f70a0274":"code","df5d35b6":"markdown","0abcfe83":"markdown","7f14bb55":"markdown","b9785709":"markdown","f2528b1d":"markdown","a49750d3":"markdown","c362b2c6":"markdown","121347d4":"markdown","58600515":"markdown","509d5e2c":"markdown","6851bd9a":"markdown","737977cd":"markdown","28bc9da6":"markdown","e3aef139":"markdown","69c94435":"markdown"},"source":{"d9de28fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e1669f4b":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport datetime\nimport lightgbm as lgb\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold, cross_val_score, GridSearchCV, RepeatedStratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nimport os\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nimport json\nimport ast\nimport time\nfrom sklearn import linear_model\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nimport shap\n\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.feature_selection import GenericUnivariateSelect, SelectPercentile, SelectKBest, f_classif, mutual_info_classif, RFE\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom catboost import CatBoostClassifier","1dd65733":"train = pd.read_csv('..\/input\/dont-overfit-ii\/train.csv')\ntest = pd.read_csv('..\/input\/dont-overfit-ii\/test.csv')\nlabels = train.columns.drop(['id', 'target'])\ntrain.head()","7fb3c899":"print(\"Train Shape: \" , train.shape , \"\\nTest Shape:\" , test.shape)","6ed8c66d":"train.info()","aa109c62":"train.isnull().any().any()","b5d15bec":"train['target'].value_counts()","74dce1f8":"train['target'].value_counts().plot(kind='bar', title='Count (target)')","daeeef56":"train[train.columns[2:]].std().plot('hist')\nplt.title('Distribution of the Standard Deviations of the Features')","e3818cc2":"train[train.columns[2:]].mean().plot('hist')\nplt.title('Distribution of the Means of the Features')","7761dce6":"train['target'].value_counts().plot('bar')","b64b5099":"print('Distributions of the first 28 columns')\nplt.figure(figsize=(26,24))\nfor i, col in enumerate(list(train.columns)[2:30]):\n    plt.subplot(7,4,i+1)\n    plt.hist(train[col])\n    plt.title(col)","69fb2006":"X_train = train.drop(['id','target'], axis=1)\ny_train = train['target']\nX_test = test.drop(['id'], axis=1)","3f99a48b":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE(ratio='minority', n_jobs=-1)\nX_sm, y_sm = smote.fit_resample(X_train, y_train)\n#outputs X_sm and y_sm as ndarrays, need to convert back to df\nX_train = pd.DataFrame(X_sm, columns=labels)\ny_train = pd.DataFrame(y_sm, columns=['target'])","88fbbec4":"cols = X_train.columns\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train, columns = cols)\nX = X_train\ny = y_train\n\nX_test = scaler.transform(X_test)\nX_test = pd.DataFrame(X_test, columns = cols)","2d6451e8":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=0)","f1253bfb":"# count of the y_train target variable now\ny_t = pd.Series(y_train.iloc[:,0], name=\"training\")\ny_t.value_counts().plot('bar')","ac49bbcc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score\ntrees = 500\ndepth = 4\nModel = RandomForestClassifier(n_estimators = trees, max_depth = depth, random_state = 0)\ncv_scores = cross_val_score(Model, X_train, y_train, cv=5)\nprint(\"Cross validation score: %s\" % cv_scores.mean())","9360bb12":"Model.fit(X, y)\ny_test_pred = Model.predict(X_test)","294a9d34":"submission = pd.DataFrame({\n    \"id\": test[\"id\"],\n    \"target\": y_test_pred\n})\nsubmission.to_csv('submission.csv', index=False)","eb8e337d":"from sklearn.ensemble import GradientBoostingClassifier\nGBModel = GradientBoostingClassifier()\nGBModel.fit(X_train, y_train)\ny_predict = GBModel.predict(X_val)\nprint('accuracy is', accuracy_score(y_predict, y_val))","8159180b":"y_test_pred = GBModel.predict(X_test)","f70a0274":"GBsubmission = pd.DataFrame({\n    \"id\": test[\"id\"],\n    \"target\": y_test_pred\n})\nGBsubmission.to_csv('GBSubmission.csv', index=False)","df5d35b6":"Check if there are any null values. Based upon the problem, there shouldn't be any.","0abcfe83":"Creating the train and test sets","7f14bb55":"Check the count of the target values","b9785709":"Here, I'm going to plot the standard deviations on a histogram.\nA histogram is different than a bar chart because a histogram works on continuous data and the bars are connected whereas a bar chart works on categorical data and gives info about the count of each category.\nHere, we can see that the standard deviation of the columns follows a somewhat normal distribution, and that most of the standard deviations are between 0.9 and 1.10","f2528b1d":"## EDA","a49750d3":"## Basic Modeling","c362b2c6":"Scaling the data. Fit\/Transform the scaler on the training data. Then fit it to the test data. Applying the fit or the fit_transform functions returns an ndarray. This needs to be converted to a DataFrame","121347d4":"Here, I look at the distrubtion of the means of the features. We can see that the mean of the features is between -0.2 and +0.2, with a majority of the features centered around 0","58600515":"## Loading Data","509d5e2c":"Here is a plot of the target variable that we will be predicting. We can see that with the test data, there are more 1's than 0's.","6851bd9a":"Here are the distributions of the first 28 columns. Here, we can see that the values in the columns are more or less similar. ","737977cd":"Now, instead of using the random forest, we will use the Gradient Boosting Classifier","28bc9da6":"Split the training data into training and validation data","e3aef139":"Using the random forest classifier, checking the cross validation score","69c94435":"Train the random forest model with the full training set now"}}