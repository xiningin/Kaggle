{"cell_type":{"514e957d":"code","0eda1e6e":"code","ae6e88bd":"code","16652720":"code","d6efa8a7":"code","a961c132":"code","edb002db":"code","59ed7001":"code","e43e8dba":"code","92226705":"code","ccb438ea":"code","2d26097e":"code","f6b1a0bd":"code","9254cbde":"code","81463254":"code","cf84819d":"code","1e6086d2":"code","a878281a":"code","bacf1644":"code","eadbd4cc":"code","2b990fd5":"code","41d3c303":"code","2416ec01":"code","adb33839":"code","b327d7b0":"code","7c1891bc":"code","cf9fd025":"markdown","17be67e2":"markdown","5b8b3668":"markdown","cf31b641":"markdown","6152ecf3":"markdown","fe488b84":"markdown","34f443bc":"markdown","412075ef":"markdown","d64aac97":"markdown"},"source":{"514e957d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0eda1e6e":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","ae6e88bd":"from tensorflow.keras.datasets import fashion_mnist\n(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","16652720":"X_train[0]","d6efa8a7":"plt.imshow(X_train[0])","a961c132":"y_train[0]","edb002db":"X_train.max()","59ed7001":"X_train = X_train\/255\nX_test = X_test\/255","e43e8dba":"X_train.shape","92226705":"X_train = X_train.reshape(60000, 28, 28, 1)\nX_test = X_test.reshape(10000, 28, 28, 1)","ccb438ea":"from tensorflow.keras.utils import to_categorical","2d26097e":"y_train","f6b1a0bd":"y_cat_train = to_categorical(y_train)\ny_cat_test = to_categorical(y_test)","9254cbde":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten","81463254":"model = Sequential()\n\n#Convolutional Layer\nmodel.add(Conv2D(filters=32, kernel_size=(4,4), input_shape=(28,28,1), activation='relu',))\n#POOLING LAYER\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\n#FLATTEN IMAGES FROM 28 BY 28 TO 764 BEFORE FINAL LAYER\nmodel.add(Flatten())\n\n#128 NEURONS IN DENSE HIDDEN LAYER \nmodel.add(Dense(128, activation='relu'))\n\n#LAST LAYER IS THE CLASSIFIER, THUS 10 POSSIBLE CLASSES\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', \n             optimizer='rmsprop',\n             metrics=['accuracy'])","cf84819d":"model.summary()","1e6086d2":"model.fit(X_train, y_cat_train, epochs=20)","a878281a":"model.metrics_names","bacf1644":"model.evaluate(X_test, y_cat_test)","eadbd4cc":"from sklearn.metrics import classification_report","2b990fd5":"pred = model.predict(X_test)\npredictions = np.argmax(pred, axis=1)","41d3c303":"y_cat_test.shape","2416ec01":"y_cat_test[0]","adb33839":"predictions[0]","b327d7b0":"y_test","7c1891bc":"print(classification_report(y_test, predictions))","cf9fd025":"## TRAINING MODEL","17be67e2":"Reshape the X arrays to include a 4 dimension of the single channel. Similar to what we did for the numbers MNIST data set.","5b8b3668":"# Processing the data","cf31b641":"## EVALUATING THE MODEL","6152ecf3":"Convert the y_train and y_test values to be one-hot encoded for categorical analysis by keras","fe488b84":"**Building the Model**\n\nTASK 5: Use Keras to create a model consisting of at least the following layers (but feel free to experiment):\n\n2D Convolutional Layer, filters=32 and kernel_size=(4,4)\n\nPooling Layer where pool_size = (2,2)\n\nFlatten Layer\n\nDense Layer (128 Neurons, but feel free to play around with this value), RELU activation\n\nFinal Dense Layer of 10 Neurons with a softmax activation\n\nThen compile the model with these parameters: loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy']","34f443bc":"**THE CHALLENGE**\n\nYour task is to build an image classifier with Keras and Convolutional Neural Networks for the Fashion MNIST dataset. This data set includes 10 labels of different clothing types with 28 by 28 grayscale images. There is a training set of 60,000 images and 10,000 test images.\n\nLabel    Description\n\n0        T-shirt\/top\n\n1        Trouser\n\n2        Pullover\n\n3        Dress\n\n4        Coat\n\n5        Sandal\n\n6        Shirt\n\n7        Sneaker\n\n8        Bag\n\n9        Ankle boot","412075ef":"**VISUALIZING DATA**","d64aac97":"# Importing Datasets and libraries"}}