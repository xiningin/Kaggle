{"cell_type":{"295ff45e":"code","4e7db247":"code","d2c5b2e3":"code","b93f1180":"code","4a2a108b":"code","fcee5cf0":"code","62ea987c":"code","3c226fe3":"code","465c0dda":"code","e701255b":"code","5b083c69":"code","ad8ad171":"code","987084c6":"code","50a30bf0":"code","25da6401":"code","2301fd14":"code","df7beac2":"code","2a394c60":"code","73ef22c1":"code","09d70ca5":"code","941f1821":"code","9010e860":"code","552f8973":"code","bbeaafbc":"code","36f64d0f":"code","96d1d8d7":"code","3e3acd8c":"code","eb601991":"code","55659ee9":"code","bf199454":"code","db9a3212":"code","10838e7c":"code","2ed9808a":"code","4d3ec895":"code","e27c02ee":"code","ebbd8815":"code","c15dbe8c":"code","1d63e271":"code","221ec2c0":"code","634c5505":"code","8dfbd965":"code","eacaf8a2":"code","04e60661":"code","7e4f6db8":"code","069b7d21":"code","6426e447":"code","a3db476c":"code","90777be7":"code","4d5edf84":"code","c8c0705e":"code","869483cf":"code","3f62c3ba":"code","bb8dcd62":"code","6c5fe6e6":"code","6651a7b1":"code","feaf95e3":"code","6f4fea06":"code","f31a70d8":"code","a2fd950b":"code","bcb9f0c4":"code","a9a3b7e9":"code","bd6c2c4e":"code","a538778d":"code","99205f0d":"code","0fc0c11d":"code","fae1ae5a":"code","9a7bb39f":"code","7ee0e955":"code","ad86b350":"code","590e233f":"code","02ffc7bd":"code","b56ea202":"code","a78eee99":"code","1d410017":"code","f6ff0b5a":"code","e56972df":"code","1f9149bb":"code","45395fd0":"code","f5b31574":"code","5327da1a":"code","6d3ecd96":"code","769b3bb5":"code","b13e346e":"code","073bb2ea":"code","d90e1289":"code","d159b6c2":"code","a5425942":"code","6d44395b":"code","1e678269":"code","01d7c03b":"code","4ab9b1de":"code","9387b972":"code","de2c2dcc":"code","ba0613e0":"code","58763480":"code","f304ba4d":"code","6e4d3a0b":"code","072d5a98":"code","2c2eb4ae":"code","8b91b61e":"code","f61cc6f5":"code","022b1a2a":"code","5c3ac1e9":"code","99752140":"code","f42d83f0":"code","ee04d502":"code","23db0df6":"code","f3da118b":"code","3d25ca8d":"code","14e61e34":"markdown","ed63ac89":"markdown","a49b9aa4":"markdown","e9e0855f":"markdown","c5ba0a5a":"markdown","29ef2baf":"markdown","7969638c":"markdown","54015d6d":"markdown","44d379ab":"markdown","79369443":"markdown","523a7e15":"markdown","780f3b30":"markdown","a8225116":"markdown","777be2e5":"markdown","f6884e00":"markdown","f44c6e6a":"markdown","1ff4719d":"markdown","97b1669a":"markdown","675601aa":"markdown","33cafcfb":"markdown","3a88e9d2":"markdown","1302595a":"markdown","c8e615cb":"markdown","a564bb0d":"markdown","99f25c32":"markdown","7c03dab3":"markdown","1d5dd54b":"markdown","bc8feca6":"markdown","dfba0ac6":"markdown","5b20b50f":"markdown","197f126a":"markdown","12ff4e5b":"markdown","053de847":"markdown","d08fbe7e":"markdown","6c303d86":"markdown","3a40bdaf":"markdown","f0df6a80":"markdown","0d9383b9":"markdown","5975cf65":"markdown","357e9767":"markdown","9853c471":"markdown","51601a53":"markdown","19630167":"markdown","832799be":"markdown"},"source":{"295ff45e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n\n\n# Any results you write to the current directory are saved as output.","4e7db247":"print(os.listdir(\"..\/input\"))","d2c5b2e3":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","b93f1180":"train.head()","4a2a108b":"train.shape","fcee5cf0":"test.shape","62ea987c":"train.info()\n","3c226fe3":"train.describe()","465c0dda":"train.isnull().sum()","e701255b":"test.isnull().sum()","5b083c69":"survived = train[train['Survived'] == 1]\nnot_survived = train[train['Survived'] == 0]","ad8ad171":"print(\"surv : %.1f\" %(len(survived) \/ len(train) * 100))\nprint(\"not surv : %.1f \" %(len(not_survived) \/ len(train) * 100))","987084c6":"plt.bar(['survive', 'not survive'], [len(survived), len(not_survived)])\nplt.title(\"survival\")\nplt.show()","50a30bf0":"survived_number_by_sex = train[train['Survived']==1]['Sex'].value_counts()\nnot_survived_number_by_sex = train[train['Survived']==0]['Sex'].value_counts()","25da6401":"survived_number_by_sex","2301fd14":"not_survived_number_by_sex","df7beac2":"tmp = pd.DataFrame([survived_number_by_sex, not_survived_number_by_sex])","2a394c60":"tmp.index = ['sur', 'notsur']","73ef22c1":"tmp.head()","09d70ca5":"plt.bar(['female', 'male'], [tmp['female']['sur'], tmp['male']['sur']])\nplt.xlabel('sex')\nplt.ylabel('number of survived')\nplt.grid()\nplt.show()","941f1821":"sns.barplot(x='Sex', y='Survived', data=train)","9010e860":"number_of_pclass = train['Pclass'].value_counts()\nnumber_of_pclass","552f8973":"sns.barplot(x='Pclass', y='Survived', data=train)","bbeaafbc":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=train)\nplt.show()","36f64d0f":"print(train['Age'].max())\nprint(train['Age'].min())\nprint(train['Age'].mean())","96d1d8d7":"f, ax = plt.subplots(figsize=(12,8))\nsns.violinplot(\"Pclass\", \"Age\", hue=\"Survived\", data=train, split=True)\nax.set_yticks(range(0, int(train['Age'].max())+10, 10))\nplt.show()","3e3acd8c":"f, ax = plt.subplots(figsize=(12,8))\nsns.violinplot(\"Sex\", \"Age\", hue='Survived', split=True, data=train)\nax.set_yticks(range(0, int(train['Age'].max() + 10), 10))\nplt.show()","eb601991":"import re\np = re.compile('([A-Za-z]+)\\.')\nfor cnt, value in enumerate(train['Name']):\n    print(p.search(value).group())\n    if cnt >= 5: break","55659ee9":"train['Initial'] = ''\ninit = []\np = re.compile('([A-Za-z]+)\\.')\nfor cnt, value in enumerate(train['Name']):\n    init.append(p.search(value).group())\ntrain['Initial'] = init","bf199454":"train['Initial'].head(10)","db9a3212":"train['Initial'].unique()","10838e7c":"train['Initial'].value_counts()","2ed9808a":"pd.crosstab(train.Initial, train.Sex).T.style.background_gradient(cmap='winter')","4d3ec895":"pre = ['Mr.', 'Miss.', 'Mrs.', 'Master.', 'Mlle.','Mme.','Ms.','Dr.','Major.','Lady.','Countess.','Jonkheer.','Col.','Rev.','Capt.','Sir.','Don.']\naft = ['Mr', 'Miss', 'Mrs', 'Master', 'Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr']\ntrain['Initial'].replace(pre,aft,inplace=True)","e27c02ee":"train['Initial'].value_counts()","ebbd8815":"train.groupby('Initial')['Age'].head(1)","c15dbe8c":"train.groupby('Initial')['Age'].mean()","1d63e271":"train.loc[(train.Age.isnull()) & (train.Initial == 'Master'), 'Age'] = 5\ntrain.loc[(train.Age.isnull()) & (train.Initial == 'Miss'), 'Age'] = 22\ntrain.loc[(train.Age.isnull())&(train.Initial=='Mr'), 'Age'] = 33\ntrain.loc[(train.Age.isnull()) & (train.Initial=='Mrs'), 'Age'] = 36\ntrain.loc[(train.Age.isnull()) & (train.Initial == 'Other'), 'Age'] = 46","221ec2c0":"train['Age'].isnull().sum()","634c5505":"f, ax = plt.subplots(1, 2, figsize=(18,10))\ntrain[train['Survived'] == 0]['Age'].plot.hist(ax=ax[0], bins=20, edgecolor='black', color='red')\nax[0].set_title('not survived')\nx = list(range(0, 90, 5))\nax[0].set_xticks(x)\n\ntrain[train['Survived'] == 1]['Age'].plot.hist(ax=ax[1], bins=20, edgecolor='black', color='blue')\nax[1].set_title('survived')\nax[1].set_xticks(x)\n\nplt.show()","8dfbd965":"sns.factorplot('Pclass', 'Survived', col='Initial', data=train)\nplt.show()","eacaf8a2":"pd.crosstab([train['Embarked'], train['Pclass']], [train['Sex'], train['Survived']]).style.background_gradient(cmap='winter')","04e60661":"sns.factorplot('Embarked', 'Survived', data=train)\nplt.show()","7e4f6db8":"f, ax = plt.subplots(2,2, figsize=(18,15))\nsns.countplot('Embarked', data=train, ax=ax[0,0])\nax[0,0].set_title('number of boarded ')\n\nsns.countplot('Embarked', data=train, hue='Sex', ax=ax[0,1])\n\nsns.countplot('Embarked', data=train, hue='Survived', ax=ax[1,0])\n\nsns.countplot('Embarked', data=train, hue='Pclass', ax=ax[1,1])\nplt.show()","069b7d21":"sns.factorplot('Pclass', 'Survived', hue='Sex', col='Embarked', data=train)\nplt.show()","6426e447":"train['Embarked'].fillna('S', inplace=True)","a3db476c":"train['Embarked'].isnull().sum()","90777be7":"train['SibSp'].value_counts()","4d5edf84":"train.groupby('SibSp')['Survived'].value_counts()","c8c0705e":"pd.crosstab([train['SibSp']], train['Survived']).style.background_gradient(cmap='winter')","869483cf":"sns.barplot(x='SibSp', y='Survived', data=train)","3f62c3ba":"train['Parch'].value_counts()","bb8dcd62":"pd.crosstab(train['Parch'], train['Survived']).style.background_gradient(cmap='winter')","6c5fe6e6":"sns.barplot(x='Parch', y='Survived', data=train)","6651a7b1":"print(train['Fare'].max())\nprint(train['Fare'].min())\nprint(train['Fare'].mean())","feaf95e3":"f, ax = plt.subplots(1,3 , figsize=(20,8))\nsns.distplot(train[train['Pclass'] == 1]['Fare'], ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\n\nsns.distplot(train[train['Pclass'] == 2]['Fare'], ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\n\nsns.distplot(train[train['Pclass'] == 3]['Fare'], ax = ax[2])\nax[2].set_title('Fares in Pclass 3')\n\nplt.show()","6f4fea06":"plt.figure(figsize=(15,10))\nsns.heatmap(train.drop('PassengerId', axis=1).corr(), annot=True, linewidths=0.2, cmap='PuBu')","f31a70d8":"del train","a2fd950b":"del test","bcb9f0c4":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","a9a3b7e9":"train_test = [train, test]","bd6c2c4e":"train_test[0].head()","a538778d":"print(train_test[0].shape)\nprint(train_test[1].shape)","99205f0d":"for data in train_test:\n    data['Initial'] = ''\n    init = []\n    p = re.compile('([A-Za-z]+)\\.')\n    for value in data['Name']:\n        init.append(p.search(value).group())\n    data['Initial'] = init","0fc0c11d":"train.head()","fae1ae5a":"pre = ['Mr.', 'Miss.', 'Mrs.', 'Master.', 'Mlle.','Mme.','Ms.','Dr.','Major.','Lady.','Countess.','Jonkheer.','Col.','Rev.','Capt.','Sir.','Don.', 'Dona.']\naft = ['Mr', 'Miss', 'Mrs', 'Master', 'Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr','Other']\nfor data in train_test:\n    data['Initial'].replace(pre,aft,inplace=True)","9a7bb39f":"train.head()","7ee0e955":"test.head()","ad86b350":"train['Initial'].value_counts()","590e233f":"train.groupby('Initial')['Age'].head(1)","02ffc7bd":"train.groupby('Initial')['Age'].mean()","b56ea202":"for data in train_test:\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Master'), 'Age'] = 5\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Miss'), 'Age'] = 22\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Mr'), 'Age'] = 33\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Mrs'), 'Age'] = 36\n    data.loc[(data['Age'].isnull()) & (data['Initial'] == 'Other'), 'Age'] = 46","a78eee99":"train['Age'].isnull().sum()","1d410017":"test['Age'].isnull().sum()","f6ff0b5a":"mapping = {\n    'Mr' : 1,\n    'Miss' : 2,\n    'Mrs' : 3,\n    'Master' : 4,\n    'Other' : 5\n}\n","e56972df":"for data in train_test:\n    data['Initial'] = data['Initial'].map(mapping).astype(int)","1f9149bb":"train.head()","45395fd0":"train['Initial'].value_counts()","f5b31574":"mapping ={\n    'female' : 1,\n    'male': 0\n}","5327da1a":"for data in train_test:\n    data['Sex'] = data['Sex'].map(mapping).astype(int)","6d3ecd96":"train['Sex'].value_counts()","769b3bb5":"train.head()","b13e346e":"for data in train_test:\n    data['Embarked'].fillna('S', inplace=True)","073bb2ea":"print(train['Embarked'].unique())\nprint(test['Embarked'].unique())","d90e1289":"mapping = {\n    'S' : 0,\n    'C' : 1,\n    'Q' : 2\n}","d159b6c2":"for data in train_test:\n    data['Embarked'] = data['Embarked'].map(mapping).astype(int)","a5425942":"for data in train_test:\n    data.loc[data['Age'] <= 16, 'Age'] = 0\n    data.loc[(data['Age'] > 16 ) & ( data['Age'] <= 32 ), 'Age'] = 1\n    data.loc[(data['Age'] > 32 ) & ( data['Age'] <= 48 ), 'Age'] = 2\n    data.loc[(data['Age'] > 48 ) & ( data['Age'] <= 64 ), 'Age'] = 3\n    data.loc[data['Age'] > 64, 'Age'] = 4\n    ","6d44395b":"train.head()","1e678269":"print(train['Age'].unique())\nprint(test['Age'].unique())","01d7c03b":"train['Age'] = train['Age'].astype(int)\ntest['Age'] = test['Age'].astype(int)","4ab9b1de":"print(train['Age'].unique())\nprint(test['Age'].unique())","9387b972":"train['Age'].value_counts().to_frame().style.background_gradient('summer')","de2c2dcc":"print(train['Fare'].isnull().sum())\nprint(test['Fare'].isnull().sum())","ba0613e0":"for data in train_test:\n    data['Fare'].fillna(train['Fare'].median(), inplace=True)","58763480":"print(test['Fare'].isnull().sum())","f304ba4d":"train['FareBand'] = pd.qcut(train['Fare'], 4) # four section.","6e4d3a0b":"train.groupby(['FareBand'])['Survived'].mean().to_frame().style.background_gradient('summer')","072d5a98":"for data in train_test:\n    data.loc[data['Fare'] <= 7.91, 'Fare'] = 0\n    data.loc[(data['Fare'] > 7.91) & ( data['Fare'] <= 14.454 ), 'Fare'] = 1\n    data.loc[(data['Fare'] > 14.454 ) & (data['Fare'] <= 31), 'Fare' ] = 2\n    data.loc[data['Fare'] > 31, 'Fare'] = 3","2c2eb4ae":"train['Fare'] = train['Fare'].astype(int)\ntest['Fare'] = test['Fare'].astype(int)","8b91b61e":"print(train['Fare'].unique())\nprint(test['Fare'].unique())","f61cc6f5":"for data in train_test:\n    data['Family'] = data['SibSp'] + data['Parch']","022b1a2a":"train[['Family', 'Survived']].groupby(['Family']).mean()","5c3ac1e9":"for data in train_test:\n    data.loc[data['Family'] == 0, 'Family'] = 0\n    data.loc[(data['Family'] >= 1) & (data['Family'] < 4), 'Family'] = 1\n    data.loc[(data['Family'] >= 4) & (data['Family'] < 7), 'Family'] = 2\n    data.loc[(data['Family'] >= 7), 'Family'] = 3","99752140":"train['Family'].unique()","f42d83f0":"train[['Family', 'Survived']].groupby(['Family']).mean()","ee04d502":"test.head(2)","23db0df6":"drop_list = ['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin']\ntrain = train.drop(drop_list, axis=1)\ntest = test.drop(drop_list, axis=1)\n\ntrain = train.drop(['PassengerId', 'FareBand'], axis=1)","f3da118b":"train.head()","3d25ca8d":"test.head()","14e61e34":"# lets try age -> continous feature","ed63ac89":"** check sibsip vs survived **\n\nsibling = brother, sister ect\n\nspouse = husband, wife","a49b9aa4":"# next weeks..\n\ni will do prediction. make model, check accuracy","e9e0855f":"** check data **","c5ba0a5a":"survival chances are almost 1 for women for Pclass1, Pclass2","29ef2baf":"** we extract the average of each Initial feature **","7969638c":"we can see that :\n\nhaving 1-2 siblings shows a greater chance of propablity rather than being alone and having a large family.\n\n\n\n** check fare **","54015d6d":"to categorical\n    ","44d379ab":"there is null data in Age, Cabin ( train data)","79369443":"filled 'Emabark' NaN values","523a7e15":"** and you can see survival rate by Pclass **","780f3b30":"** check null data **","a8225116":"** chagne age band. **\n\nage is continous feature. we need to convert these continuous values into categorical values by binning.","777be2e5":"as we canss see above, there is also NaN value in Embark features.\n\nmaximum passengers boarded from port S. so replcace NaN with S.","f6884e00":"# reload data and cleaning\n","f44c6e6a":"** we can see that more women survived than men **","1ff4719d":"we can see that -> \n\nbabies were saved in large number\n\nmaxinum number of deaths were in the age group of 30-40","97b1669a":"and convert the categorical 'Initial' values into numeric form","675601aa":"# correlation between the features\n","33cafcfb":"** as we saw above, there are quite a few null values in age **\n\nit is too different for the average value. so we access to this problem from another way.\n\nanother easy to access method is to use the name feature!\n","3a88e9d2":"data rows and columns\n\ndata information","1302595a":"** data description **\n\n- survived : 0 = no, 1 = yes\n- Pclass : ticket class. 1 = 1st, 2 = 2nd..\n- sex : sex\n- sibsp : number of spouse\n- parch : number of children\n- ticket : ticket number\n- cabin : cabin number\n- embarked : a landed port","c8e615cb":"** loading dataset **","a564bb0d":"** check Parch feature **\n\n","99f25c32":"in the pclass ratio, many children under 10 survived.\n\nsurvival chances for passengers aged 20-50 from Pclass1 is high and is even better for women.","7c03dab3":"as you can see there are Mr, Mrs, Miss etc in name.","1d5dd54b":"we can see that family size 1~3 has high survival rate.","bc8feca6":" # filling NaN ages","dfba0ac6":"next, SibSp &* Parch Feature.\n\nim going to combine these two features into one.","5b20b50f":"the port C is highest around 0.55 whie it is lowest for S","197f126a":"# we drop unnecessary features\n\nthe features list : name, ticket, cabin(becaluse a lot of NaN values), passengerId etc","12ff4e5b":"\n# happy new year!\n\n** i wish you all the best in the new year **\n\nthis kernel is the beginning of the titanic to practice the kaggle like me\n","053de847":"Fare feautre","d08fbe7e":"convert 'sex' feature to numerical","6c303d86":"fill NaN values by train median","3a40bdaf":"there are Mr, Mrs, Miss, Master, Don etc.....","f0df6a80":"you can see that there are more women suviving then men\n\nthe lower the pclass, more perple died\n","0d9383b9":"** check survived **","5975cf65":"** now we check the embarked feautre **","357e9767":"and test also has null\n","9853c471":"** using a regular expression, calculate the value of Mr. and Mrs. etc **","51601a53":"# feature engineering\n","19630167":"** we can see that **\n\n1. many passengers got on board at S.\n2. Survival numbers are higher than the probability of not surviving in C only.\n3. S was ridden by rich people. however, chances of survival are low. because there were many pclass3 passengers too and most of plcass3 passengers did not survived.","832799be":"** a value 1 means perfect positive correlation. **\n\n** a value -1 means perfect negative correlation **"}}