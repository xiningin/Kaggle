{"cell_type":{"3c3e919f":"code","85837c61":"code","1855e5b2":"code","b4a270f1":"code","fac961cd":"code","554f2226":"code","3fdbbb42":"code","c0d398ff":"code","2bab9981":"code","c9bf8266":"code","8571cdac":"code","cdf584be":"code","d9910784":"code","62d7b516":"code","df642d66":"code","36cbc695":"code","465a048e":"code","9c6ab2d5":"code","c1485c8e":"code","ae27e47d":"code","87f725be":"code","6c7aabc5":"code","13ca3ca8":"code","d4531319":"code","e46d9275":"code","90b4d8bf":"markdown","6799940f":"markdown","9751f7d0":"markdown","34b85a58":"markdown","e1f6bf8b":"markdown","0cb649ee":"markdown","9ff5afb7":"markdown","1b4e4800":"markdown","93a3620d":"markdown","21a025d4":"markdown","bf6cfc1f":"markdown","311daa68":"markdown","ab19efc7":"markdown","387eedff":"markdown","e4de066a":"markdown","c401132a":"markdown"},"source":{"3c3e919f":"mylista=[2,\"a\",3]\nprint(mylista)\nl1=[-5,-4,-3,-2,-1,1,2,3,4,5]\nprint(l1,type(l1))","85837c61":"# Cuarto elemento de la lista \nl1[3]","1855e5b2":"# Adicionar un elemento al final de la lista \nl1.append(6)\nprint(l1)\n# insertar elemento en la posici\u00f3n 5 \nprint(\"Se inserta 0 en la posici\u00f3n 5\")\nl1.insert(5,0)\nprint(l1)","b4a270f1":"# insertar -6 como primer elemento de la lista \nl1.insert(0,-6)\nprint(l1)","fac961cd":"l2=[7,8,9] \nl3=l1+l2\nprint(l3)","554f2226":"# borra el elemento con indice 6 en l3 (corresponde al cero)\ndel l3[6]\nl3","3fdbbb42":"print(len(l1))\nprint( len(l2) )\nlen(l3)","c0d398ff":"# borrar el \u00faltimo elemento de una lista \ndel l3[len(l3)-1] # \u00bfporqu\u00e9 len(l3)-1 y no solo len(l3)? \nl3","2bab9981":"nom=[\"Mario\",\"Nelsy\",\"Liliana\",\"Andrea\"]\nnom.remove(\"Mario\")\nprint(nom)\nl5=[2,4,1,1,1,5,9]\nl5.remove(1)\nl5","c9bf8266":"l5=[2,4,1,1,1,0,9]\n## Se le entrega un indice \nl6=l5.pop(5)\nprint(\"Lo que regresa\",l6)\nprint(\"Lista actualizada \",l5)\nl7=l5.pop()\nprint(\"Lo que retorna \",l7)\nprint(\"Lista actualizada \",l5)","8571cdac":"# recupera el indice para -1. Nota: si hay mas de un -1 regresa el indice del primero \nl3.index(-1) ","cdf584be":"-1 in l3 ","d9910784":"-1 in l2","62d7b516":"print(l3)\nprint(l3[-1])\nprint(l3[-2])\nprint(l3[-len(l3)])","df642d66":"n=21\nGradosC=[-5+i*0.5 for i in range(n)]\nprint(GradosC)\nprint(range(n))\nprint(list(range(n)))\nprint(GradosC)","36cbc695":"GradosC=(-5+i*0.5 for i in range(n))\n#print(GradosC,type(GradosC))\n#GradosC[0]\n#list(GradosC)","465a048e":"# Convierte las temperaturas de GradosC que est\u00e1n en grados cent\u00edgrados a grados Farenheit\nGradosF=[9.0\/5*C+32 for C in GradosC]\nprint(GradosF)","9c6ab2d5":"GradosC=list(range(-25,41,5)) \n#print(list(GradosC))\nGradosF=[9.0\/5*C+32 for C in GradosC]\n#print(GradosF)\ntabla=[GradosC,GradosF]\nprint(tabla)","c1485c8e":"tabla[0][2]","ae27e47d":"print(GradosC)\nprint(GradosC[5:])\n# L[i:j] desde el indice i hasta el indice j-1 \nprint(GradosC[4:9])\n# L[:j] desde el indice 0 (inicio) hasta el indice j-1 \nprint(GradosC[:9])\n# todos menos el primero y el \u00faltimo\nGradosC[1:-1]","87f725be":"Gc=GradosC[:]\nprint(Gc)\nprint(Gc is GradosC)\nGc2=GradosC\nprint(Gc is GradosC)\nGc2==GradosC","6c7aabc5":"# Una lista de valores l\u00f3gicos \nprint([i>0 for i in l3])\n## lista vac\u00eda \nc=[]","13ca3ca8":"nom=[\"Mario\",\"Nelsy\",\"Liliana\",\"Andrea\"]\nnom.sort()\nprint(nom)","d4531319":"t1=(\"a\",\"e\",\"i\",\"o\",\"u\")\nprint(t1,type(t1))\nlt1=list(t1)\nprint(lt1,type(lt1))","e46d9275":"from math import sin\na=[0.25,1.2,0.4]\nseno=[sin(i) for i in a ]\nprint(seno)\n\ndef sinv(x):\n    return([sin(i) for i in x ])\n\nsinv(a)\n\n    ","90b4d8bf":"#### La funci\u00f3n `list()`\n\nEs posible construir listas a partir de `tuplas`, `diccionarios` o `sets` (conjuntos) mediante la funci\u00f3n `list()`, veamos algunos ejemplos de construcci\u00f3n de listas a patir de tuplas.","6799940f":"Para conocer la longitud de una lista se usa la funci\u00f3n `len()` como con tuplas.  ","9751f7d0":"Cada elemento de una lista est\u00e1 asociado con un *indice* que refleja la posici\u00f2n del elemento en el arreglo. El primer elemento tiene indice 0, el segundo indice 1 y as\u00ed sucesivamente. Asociados con la lista l1 anterior tenemos 10 \u00edndices, iniciando con 0 y terminando con 9. Para acceder al elemento con indice 3, es decir, al **cuarto** elemento de la lista, escribimos l1[3] que corresponde a $-2$          ","34b85a58":"Averiguar si un elemento est\u00e1 en la lista","e1f6bf8b":"### \u00cdndices negativos \nPython permite indices negativos, lo cual conduce a indexar por la derecha. l[-1] corresponde al \u00faltimo elemento de la lista, l[-2] corresponde al anterior a l[-1] y as\u00ed sucesivamente. ","0cb649ee":"### Inserci\u00f3n, adici\u00f3n y borrado de elementos en una lista \nA diferencia de las tuplas, las listas se pueden modificar, insertando, adicionando o borrando elementos, veamos cono se hace ","9ff5afb7":"# Estructuras de datos en python\n\n## Contenedores de datos en python\n\nPyton ofrece varias estructuras para el almacenamiento de datos, entre ellas tenemos \n* Tuplas *tuple*\n* **Listas** *list*\n* Arreglos *array*\n* Diccionarios *dictionaries* \n* Marcos de datos *DataFrames*\n\n### Listas \n\nLas listas sirven para agrupar objetos del diferente tipo aunque t\u00edpicamente se usan para alojar datos de la mima naturaleza (n\u00fameros, caracteres, l\u00f3gicos, ...), son indexadas y, a diferencia de las tuplas, son **mutables**, es decir, se les puede agregar, quitar y cambiar elementos despu\u00e9s de creadas. Soportan todas las caracter\u00edsticas de las tuplas, pero es posible adicionar, remover y modificar sus elementos.  \n\nPara crear una lista colocamos los elementos dentro de corchetes de la siguente forma:  ","1b4e4800":"Para recuperar el indice para el primer elemento de la lista igual a cierto valor ","93a3620d":"### Otra forma de crear listas \n\nEs posible crear listas de forma *automatizada*, veamos algunos ejemplos: ","21a025d4":"### Una soluci\u00f3n al problema del seno de una lista\n\n","bf6cfc1f":"Se puede hacer una copia de una lista de la siguiente forma ","311daa68":"Para borrar un elemento de una lista se usa *del lista[i]* ","ab19efc7":"### Listas anidadas \nComo en el caso de las tuplas, se pueden tener una lista cuyos elementos son listas, veamos: ","387eedff":"\u00bfser\u00e1 que esta forma de crear listas es v\u00e1lida para tuplas?","e4de066a":"Dos listas pueden ser adicionadas (concatenadas) como las tuplas. ","c401132a":"### Extrayendo sublistas \nL[i:] es una sublista de L que inicia en el indice *i* hasta el final de la lista  "}}