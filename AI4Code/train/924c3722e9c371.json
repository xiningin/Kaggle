{"cell_type":{"2dc0457c":"code","98d4bca7":"code","f4e5c0d9":"code","3ffddcf7":"code","ac5a0a3b":"code","8f45d84f":"code","43eea353":"code","d37180a0":"code","f0e98191":"code","59a1bb10":"code","6bca1fd9":"code","04126827":"code","f1885da4":"code","763c68fb":"code","1f497616":"code","404e4830":"code","73ced250":"code","b2e4ab2e":"code","3b32b5a9":"code","2f32f057":"code","1207a86b":"code","2c30ac47":"code","4e3c3368":"code","1f3f74db":"code","86b036f6":"code","13c07d4a":"code","3f3be02e":"code","c358f83c":"code","d2e35018":"markdown","d76a1e33":"markdown","c6604e3c":"markdown","45ffb727":"markdown","693a7811":"markdown","030b712e":"markdown","e7f00b82":"markdown"},"source":{"2dc0457c":"print('hello')","98d4bca7":"# Using the github dataset becuase kaggle's dataset is out of date\n!git clone \"https:\/\/github.com\/UCSD-AI4H\/COVID-CT.git\"","f4e5c0d9":"!pip install tensorflow-gpu\nimport tensorflow as tf\nimport numpy as np\nimport random\nimport pandas as pd\nimport os\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nimport shutil\nfrom glob import glob\n# Helper libraries\nimport matplotlib.pyplot as plt\nimport math\n%matplotlib inline\nprint(tf.__version__)","3ffddcf7":"cd COVID-CT\/Images-processed\/","ac5a0a3b":"!unzip -q CT_COVID.zip\n!unzip -q CT_NonCOVID.zip","8f45d84f":"data_root='\/kaggle\/working\/COVID_CT\/Images-Processed\/'\npath_positive_cases = os.path.join('\/kaggle\/working\/COVID-CT\/Images-processed\/CT_COVID\/')\npath_negative_cases = os.path.join('\/kaggle\/working\/COVID-CT\/Images-processed\/CT_NonCOVID\/')","43eea353":"positive_images_ls = glob(os.path.join(path_positive_cases,\"*.png\"))\nnegative_images_ls = glob(os.path.join(path_negative_cases,\"*.png\"))\nnegative_images_ls.extend(glob(os.path.join(path_negative_cases,\"*.jpg\")))","d37180a0":"total_positive_covid = len(positive_images_ls)\ntotal_negative_covid = len(negative_images_ls)\nprint(\"Total Positive Cases Covid19 images: {}\".format(total_positive_covid))\nprint(\"Total Negative Cases Covid19 images: {}\".format(total_negative_covid))","f0e98191":"# Creating Dictionaries to access the data easily\ncovid = {'class': 'CT_COVID',\n         'path': path_positive_cases,\n         'images': positive_images_ls}\n\nnon_covid = {'class': 'CT_NonCOVID',\n             'path': path_negative_cases,\n             'images': negative_images_ls}","59a1bb10":"image_positive = cv2.imread(os.path.join(positive_images_ls[1]))\nimage_negative = cv2.imread(os.path.join(negative_images_ls[5]))\n\nf = plt.figure(figsize=(8, 8))\nf.add_subplot(1, 2, 1)\nplt.imshow(image_negative)\nf.add_subplot(1,2, 2)\nplt.imshow(image_positive)","6bca1fd9":"print(\"Image COVID Shape {}\".format(image_positive.shape))\nprint(\"Image Non COVID Shape {}\".format(image_negative.shape))","04126827":"# Create Train-Test Directory\nsubdirs  = ['train\/', 'test\/']\nfor subdir in subdirs:\n    labeldirs = ['CT_COVID', 'CT_NonCOVID']\n    for labldir in labeldirs:\n        newdir = subdir + labldir\n        os.makedirs(newdir, exist_ok=True)","f1885da4":"random.seed(12)","763c68fb":"test_ratio=0.1 # Taking 10% data for validation\nfor cases in [covid,non_covid]:\n    total_cases = len(cases['images'])\n    num_to_select = int(test_ratio*total_cases)\n    print(cases['class']+str(num_to_select))\n    list_of_random_files= random.sample(cases['images'],num_to_select)\n    for files in list_of_random_files:\n        shutil.copy2(files,'test\/'+cases['class'])","1f497616":"# Copying the train dataset\nfor cases in [covid,non_covid]:\n    image_test_files = os.listdir('\/kaggle\/working\/COVID-CT\/Images-processed\/test\/'+cases['class']+'\/')\n    for images in cases['images']:\n        if images.split('\/')[-1] not in (image_test_files):\n            shutil.copy2(images,'train\/'+cases['class'])","404e4830":"total_train_covid = len(os.listdir(\"\/kaggle\/working\/COVID-CT\/Images-processed\/train\/CT_COVID\/\"))\ntotal_train_noncovid = len(os.listdir(\"\/kaggle\/working\/COVID-CT\/Images-processed\/train\/CT_NonCOVID\/\"))\ntotal_test_covid = len(os.listdir(\"\/kaggle\/working\/COVID-CT\/Images-processed\/test\/CT_COVID\/\"))\ntotal_test_noncovid = len(os.listdir(\"\/kaggle\/working\/COVID-CT\/Images-processed\/test\/CT_NonCOVID\/\"))\nprint(total_train_covid,total_train_noncovid,total_test_covid,total_test_noncovid)","73ced250":"train_dir = os.path.join('\/kaggle\/working\/COVID-CT\/Images-processed\/train\/')\ntest_dir = os.path.join('\/kaggle\/working\/COVID-CT\/Images-processed\/test\/')\n\n\ntotal_train = total_train_covid + total_train_noncovid\ntotal_test = total_test_covid + total_test_noncovid","b2e4ab2e":"import tensorflow.keras.applications as tfka","3b32b5a9":"batch_size = 64\nepochs = 15\nIMG_HEIGHT = 150\nIMG_WIDTH = 150\nnum_classes=2","2f32f057":"train_image_generator = ImageDataGenerator(rescale=1.\/255,) # Generator for our training data\ntest_image_generator = ImageDataGenerator(rescale=1.\/255,) # Generator for our validation data","1207a86b":"train_data_gen = train_image_generator.flow_from_directory(batch_size=batch_size,\n                                                           directory=train_dir,\n                                                           shuffle=True,\n                                                           target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                           class_mode='categorical')","2c30ac47":"test_data_gen = test_image_generator.flow_from_directory(batch_size=batch_size,\n                                                              directory=test_dir,\n                                                              target_size=(IMG_HEIGHT, IMG_WIDTH),\n                                                              class_mode='categorical')","4e3c3368":"# Retraining a pretrained DenseNet121 model\nmodel = Sequential([\n    tfka.DenseNet121(include_top=False,weights='imagenet',input_shape=(IMG_HEIGHT,IMG_WIDTH,3),pooling='max',classes=2),\n    Dense(512,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(l=0.1)),\n    Dropout(0.4),\n    Dense(256,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(l=0.1)),\n    Dropout(0.3),\n    Dense(num_classes,activation='softmax',kernel_regularizer=tf.keras.regularizers.l2(l=0.1))\n])\nmodel.layers[0].trainable=True","1f3f74db":"model.compile(optimizer='adam',loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),metrics=['accuracy'])","86b036f6":"model.summary()","13c07d4a":"history = model.fit(train_data_gen, epochs=epochs, validation_data=test_data_gen)","3f3be02e":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","c358f83c":"!rm -r '\/kaggle\/working\/COVID-CT\/'","d2e35018":"# Creating train and test datasets","d76a1e33":"# Setting hyperparameters and Image Preprocessing","c6604e3c":"# Importing Libraries","45ffb727":"# Creating and training the model","693a7811":"# Data extraction and visualisation","030b712e":"**Plotting loss and accuracy**","e7f00b82":"# A simple classifier using Tensorflow and Keras with a pretrained DenseNet121"}}