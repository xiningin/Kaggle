{"cell_type":{"17053b36":"code","ff2dffa9":"code","59d53004":"code","0a4f74f8":"code","2e945779":"code","c6e24e12":"code","6a9eb118":"code","cfc8696b":"code","41da6184":"code","3b1a702c":"code","4e6626bb":"code","d20b70f3":"markdown","01b26742":"markdown","f49b875f":"markdown","9a511243":"markdown","e33ad7ff":"markdown","294df5ee":"markdown"},"source":{"17053b36":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex4 import *\nprint(\"Setup Complete\")","ff2dffa9":"# Import the train_test_split function and uncomment\nfrom sklearn.model_selection import train_test_split\n\n# fill in and uncomment\ntrain_X, val_X, train_y, val_y = train_test_split(X,y,random_state = 1)\n\nstep_1.check()","59d53004":"# The lines below will show you a hint or the solution.\n#step_1.hint() \n#step_1.solution()\n","0a4f74f8":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\niowa_model = DecisionTreeRegressor(random_state=1)\n\n# Fit iowa_model with the training data.\niowa_model.fit(train_X,train_y)\nstep_2.check()","2e945779":"# step_2.hint()\n# step_2.solution()","c6e24e12":"# Predict with all validation observations\nval_predictions = iowa_model.predict(val_X)\n\nstep_3.check()","6a9eb118":"# step_3.hint()\n# step_3.solution()","cfc8696b":"# print the top few validation predictions\nprint(val_predictions[:5])\n# print the top few actual prices from validation data\nprint(val_y.head().tolist())","41da6184":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_predictions,val_y)\n\n# uncomment following line to see the validation_mae\n#print(val_mae)\nstep_4.check()","3b1a702c":"print(val_mae)","4e6626bb":"# step_4.hint()\n# step_4.solution()","d20b70f3":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off.","01b26742":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","f49b875f":"## Step 3: Make Predictions with Validation data\n","9a511243":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n","e33ad7ff":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","294df5ee":"Inspect your predictions and actual values from validation data."}}