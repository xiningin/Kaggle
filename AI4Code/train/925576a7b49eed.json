{"cell_type":{"922ca368":"code","58f39e49":"code","b2683f36":"code","5bb09c03":"code","2d8c51b2":"code","13044e70":"code","8e6bcb33":"code","415133c5":"code","dbdafa0a":"code","d0f271cc":"code","0f5c9f5f":"code","2ad5a9f0":"code","59e192a0":"code","b7aa9803":"code","ad6513af":"code","e78ff40c":"code","53bfac0c":"code","5dbb1300":"code","954011bc":"code","ed80d542":"code","de250f53":"code","0ae48be9":"code","9fcf82ce":"code","773633fa":"code","f1ab7de5":"code","4b688d32":"markdown","65c66484":"markdown","f93b73b6":"markdown","223f2ed2":"markdown","f4953258":"markdown","0c4ecbdc":"markdown","b7446ff2":"markdown","53a700ce":"markdown","4aff385f":"markdown","e5f92aef":"markdown"},"source":{"922ca368":"import tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Dropout,Dense,Flatten,Conv1D\nfrom tensorflow.keras.optimizers import Adam","58f39e49":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","b2683f36":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","5bb09c03":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","2d8c51b2":"df.head()","13044e70":"df.shape","8e6bcb33":"df.info()","415133c5":"df.Class.unique()","dbdafa0a":"df.Class.value_counts()","d0f271cc":"nf = df[df.Class==0]\nf = df[df.Class==1]","0f5c9f5f":"nf = nf.sample(738)","2ad5a9f0":"data = f.append(nf,ignore_index=True)","59e192a0":"data.shape","b7aa9803":"X = data.drop(['Class'],axis=1)\ny=data['Class']","ad6513af":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,stratify=y)","e78ff40c":"X_train.shape,X_test.shape","53bfac0c":"scaler=StandardScaler()\nX_train=scaler.fit_transform(X_train)\nX_test=scaler.transform(X_test)","5dbb1300":"y_train=y_train.to_numpy()\ny_test=y_test.to_numpy()","954011bc":"X_train=X_train.reshape(X_train.shape[0],X_train.shape[1],1)\nX_test=X_test.reshape(X_test.shape[0],X_test.shape[1],1)","ed80d542":"model=Sequential()\nmodel.add(Conv1D(32,2,activation='relu',input_shape=X_train[0].shape))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv1D(64,2,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1,activation='sigmoid'))","de250f53":"model.summary()","0ae48be9":"model.compile(optimizer=Adam(learning_rate=0.0001),loss='binary_crossentropy',metrics=['accuracy'])","9fcf82ce":"history = model.fit(X_train,y_train,epochs=20,validation_data=(X_test,y_test))","773633fa":"def plotLearningCurve(history,epochs):\n  epochRange = range(1,epochs+1)\n  plt.plot(epochRange,history.history['accuracy'])\n  plt.plot(epochRange,history.history['val_accuracy'])\n  plt.title('Model Accuracy')\n  plt.xlabel('Epoch')\n  plt.ylabel('Accuracy')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()\n\n  plt.plot(epochRange,history.history['loss'])\n  plt.plot(epochRange,history.history['val_loss'])\n  plt.title('Model Loss')\n  plt.xlabel('Epoch')\n  plt.ylabel('Loss')\n  plt.legend(['Train','Validation'],loc='upper left')\n  plt.show()","f1ab7de5":"plotLearningCurve(history,20)","4b688d32":"# Applying StandardScaler to obtain all the features in similar range","65c66484":"# Extracting random entries of class-0\n# Total entries are 1.5* NO. of class-1 entries","f93b73b6":"# Compiling and Fiting","223f2ed2":"# CNN model","f4953258":"# Gathering the data and assessing the data","0c4ecbdc":"# Importing Neccessary Libraries","b7446ff2":"# Reshaping the input to 3D.","53a700ce":"# Train-Test Split","4aff385f":"# Creating new dataframe","e5f92aef":"# Uneven class distribution"}}