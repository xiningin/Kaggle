{"cell_type":{"aba2e5a2":"code","109a46d0":"code","068e9aed":"code","72132cfb":"code","2acd4b39":"code","44124e26":"code","ab7bd10f":"code","6aae20bd":"code","06c4716d":"code","771672f8":"code","a4682423":"code","85c362e2":"code","9e889916":"code","7655d577":"code","1994d19b":"code","1d19117f":"code","1a19fabd":"code","f566b10f":"code","f692a05c":"code","8fa2aed3":"code","a70d4253":"code","e1a34b4a":"code","33f3b612":"code","249323cd":"code","829a965e":"code","bf99d9c7":"code","02f12f27":"code","236fec82":"code","27ee7ab6":"code","67dad8e5":"markdown","d46c4339":"markdown","3f9db3cd":"markdown","eb4fe19b":"markdown","94924a49":"markdown","0ceed3f3":"markdown","0de2df56":"markdown","a95ed9ac":"markdown","e55d48f4":"markdown","d50e27b2":"markdown"},"source":{"aba2e5a2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom datetime import date, timedelta, datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","109a46d0":"data1 = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndata1.head()","068e9aed":"data2 = pd.read_csv(\"\/kaggle\/input\/videogamesales\/vgsales.csv\")\ndata2.head()","72132cfb":"data3 = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndata3.head()","2acd4b39":"date_list1 = list(data3[\"ObservationDate\"].unique())\nconfirmed = []\ndeaths = []\nrecovered = []\nfor i in date_list1:\n    x = data3[data3[\"ObservationDate\"] == i]\n    confirmed.append(sum(x[\"Confirmed\"]))\n    deaths.append(sum(x[\"Deaths\"]))\n    recovered.append(sum(x[\"Recovered\"]))\ndata3 = pd.DataFrame(list(zip(date_list1,confirmed,deaths,recovered)),columns = [\"Date\",\"Confirmed\",\"Deaths\",\"Recovered\"])\ndata3.head()","44124e26":"from datetime import date, timedelta, datetime\ndata3[\"Date\"] = pd.to_datetime(data3[\"Date\"])\ndata3.info()","ab7bd10f":"plt.style.use(\"default\")\nplt.plot(range(10,400),range(100,490))\nplt.show()","6aae20bd":"fig = plt.figure(figsize = (12,8))\nplt.plot(data3[\"Confirmed\"],data3[\"Deaths\"], label = \"Label of Plot\")\nplt.legend()\nplt.title(\"Title of Plot\")\nplt.xlabel(\"X Label\")\nplt.ylabel(\"Y Label\")\nplt.grid(True, alpha = 0.4)\nplt.show()","06c4716d":"fig = plt.figure(figsize = (12,8))\nplt.scatter(data1[\"trestbps\"],data1[\"chol\"], color = \"r\")\nplt.title(\"scatter plot\")\nplt.show()","771672f8":"fig = plt.figure(figsize = (12,8))\nplt.bar(data1[\"age\"],data1[\"chol\"])\nplt.title(\"bar plot\")\nplt.show()","a4682423":"fig = plt.figure(figsize = (12,8))\nplt.hist(data1[\"age\"])\nplt.title(\"histogram (age)\")\nplt.xlabel(\"age\")\nplt.ylabel(\"frequency\")\nplt.show()","85c362e2":"labels = [\"Deaths\",\"Recovered\",\"Confirmed\"]\nsizes = [data3[\"Deaths\"].iloc[len(data3)-1],data3[\"Recovered\"].iloc[len(data3)-1],data3[\"Confirmed\"].iloc[len(data3)-1]]\nfig = plt.figure(figsize = (12,8))\nplt.pie(sizes, labels = labels)\nplt.title(\"piechart\")\nplt.show()\n","9e889916":"fig = plt.figure(figsize = (12,8))\nplt.boxplot(data1[\"age\"])\nplt.ylabel(\"age\")\nplt.title(\"boxplot\")\nplt.show()","7655d577":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = plt.figure(figsize = (10,6))\nplt.polar(x,y)\nplt.title(\"polar lineplot\")\nplt.show()","1994d19b":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = plt.figure(figsize = (10,6))\nplt.polar(x,y,\"ro\")\nplt.title(\"polar lineplot\")\nplt.show()","1d19117f":"x = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\ny = [10,20,11,22,14,18]\n\nfig = plt.figure(figsize = (10,6))\nax = plt.subplot(111, projection = \"polar\")\nax.bar(x,y)\nax.set_title(\"polar barplot\")\nplt.show()","1a19fabd":"fig = plt.figure(figsize = (10,6))\nplt.imshow(plt.imread(\"\/kaggle\/input\/stanford-dogs-dataset\/images\/Images\/n02109961-Eskimo_dog\/n02109961_5772.jpg\"))\nplt.title(\"showing images with matplotlib\")\nplt.show()","f566b10f":"# 3d plot\nfig = plt.figure(figsize = (12,8))\nax = fig.add_subplot(111, projection='3d')\nax.plot(data3[\"Confirmed\"],data3[\"Deaths\"],data3[\"Recovered\"],label = \"label\")\nax.set_xlabel(\"confirmed\")\nax.set_ylabel(\"deaths\")\nax.set_zlabel(\"recovered\")\nplt.title(\"3D lineplot\")\nplt.legend()\n\nplt.show()","f692a05c":"fig = plt.figure(figsize = (12,8))\nplt.plot(data3[\"Date\"],data3[\"Confirmed\"], label = \"confirmed\")\nplt.plot(data3[\"Date\"],data3[\"Recovered\"], color = \"green\", label = \"recovered\")\nplt.title(\"2 plots together\")\nplt.xlabel(\"dates (converted fron object to datetime)\")\nplt.legend()\nplt.show()","8fa2aed3":"fig = plt.figure(figsize = (12,8))\nplt.text(0.30, 0.5, \"this is a text, fontsize = 20\", fontsize=20)\nplt.text(0.20, 0.5, \"this is a text, rotation = 45\", fontsize=15, rotation = 45)\nplt.text(0.20, 0.3, \"this is a text, color = red\", fontsize=18, color = \"r\")\nplt.text(0.30, 0.1, 'boxed text, pad = how big box is', fontsize = 25,\n        bbox={'facecolor': 'red', 'alpha': 0.5, 'pad': 25})\nplt.text(0.60, 0.3, \"this is a text, style = italic\",style = \"italic\", fontsize=18)\nplt.annotate('annotate', xy=(0.1, 0.3), xytext=(0.08,0.08),\n            arrowprops=dict(facecolor='black', shrink=0.5))\n\nplt.text(0.2, 0.4, 'an equation: $E=mc^2$', fontsize=20)\n\nplt.show()","a70d4253":"# styled lineplot\nfig = plt.figure(figsize = (12,8))\nplt.plot(np.arange(1,len(data3)+1),data3[\"Deaths\"],\"-.\",alpha = 0.6,linewidth = 3,color = \"#cc0000\",label = \"deaths\",marker = \"o\",markerfacecolor = \"#0066ff\",markersize = 10,markevery = [-1])\nplt.legend(loc='center')\nplt.title(\"styled lineplot (fontsize = 25)\",fontsize = 25)\nplt.ylim(0,8*10**5)\nplt.annotate('today total: '+str(data3.tail(1)[\"Deaths\"].iloc[0]), xy=(len(data3), data3.tail(1)[\"Deaths\"]), xytext=(len(data3)-65, data3.tail(1)[\"Deaths\"]),\n             arrowprops=dict(facecolor='black', shrink=0.05),\n             fontsize = 15)\nplt.xticks(rotation = 45)\nplt.tick_params(labelsize = 14)   \nplt.xlabel(\"days\",fontsize = 15)\nplt.ylabel(\"deaths, limit = 0,8*10**5\",fontsize = 20, color = \"blue\")\nplt.grid(True, alpha = 0.4, color = \"#33cc33\")\nplt.fill_between(np.arange(1,len(data3)+1),data3[\"Deaths\"],color = \"red\",alpha = 0.3)\nplt.show()","e1a34b4a":"#styled scatter\nfig = plt.figure(figsize = (12,8))\nplt.scatter(data1[\"oldpeak\"],data1[\"chol\"], marker = \"^\", s = 40, alpha = 0.6, label = \"oldpeak\")\nplt.scatter(data1[\"oldpeak\"],data1[\"chol\"], marker = \"o\", s = data1[\"trestbps\"]*3, alpha = 0.4,facecolors = \"none\",edgecolor = \"red\", label = \"trestbps\") \ncolors = np.random.rand(len(data1[\"thalach\"])) \nplt.scatter(data1[\"oldpeak\"],data1[\"thalach\"],c = colors, marker = \"X\",s = 50,label = \"thalach\")\nplt.legend()\nplt.yscale(\"log\")\nplt.title(\"styled scatterplot\", fontsize = 20)\nplt.grid(which=\"both\",alpha = 0.2)\nplt.xlabel(\"oldpeak\")\nplt.show()\n\n\"\"\"\nMARKERS:\n\".\"  point\n\",\"  pixel\n\"o\"  circle\n\"v\"  triangle_down\n\"^\"  triangle_up\n\"<\"  triangle_left\n\">\"  triangle_right\n\"1\"  tri_down\n\"2\"  tri_up\n\"3\"  tri_left\n\"4\"  tri_right\n\"8\"  octagon\n\"s\"  square\n\"p\"  pentagon\n\"P\"  plus (filled)\n\"*\"  star\n\"h\"  hexagon1\n\"H\"  hexagon2\n\"+\"  plus\n\"x\"  x\n\"X\"  x (filled)\n\"D\"  diamond\n\"d\"  thin_diamond\n\"|\"  vline\n\"_\"  hline\n\n\"\"\"","33f3b612":"#styled barplot\nfig = plt.figure(figsize = (12,8))\ndata_bar = data3.head(10)\nplt.barh(data_bar[\"Date\"],data_bar[\"Recovered\"], color = \"green\",linewidth = 2,edgecolor = \"black\")\nplt.title(\"styled barplot\",fontsize = 15)\nplt.show()","249323cd":"#styled histogram\nfig = plt.figure(figsize = (12,8))\nplt.grid(True, alpha = 0.4)\nplt.hist(data1[\"oldpeak\"],cumulative = True,label = \"cumulative hist\",color = \"#00ffff\")\nplt.legend()\nplt.title(\"styled histogram\", fontsize = 20)\nplt.xlabel(\"oldpeak\")\nplt.show()","829a965e":"#subplots\nfig = plt.figure(figsize=(12, 7)) # initialize figure\n\nax = [None for _ in range(6)] # list to save many ax for setting parameter in each\n\nax[0] = plt.subplot2grid((3,4), (0,0), colspan=4)\nax[1] = plt.subplot2grid((3,4), (1,0), colspan=1)\nax[2] = plt.subplot2grid((3,4), (1,1), colspan=1)\nax[3] = plt.subplot2grid((3,4), (1,2), colspan=1)\nax[4] = plt.subplot2grid((3,4), (1,3), colspan=1,rowspan=2)\nax[5] = plt.subplot2grid((3,4), (2,0), colspan=3)\n\nfor ix in range(6): \n    ax[ix].set_title('ax[{}]'.format(ix)) # make ax title for distinguish:)\n    ax[ix].set_xticks([]) # to remove x ticks\n    ax[ix].set_yticks([]) # to remove y ticks\n\nplt.show()","bf99d9c7":"fig, ax = plt.subplots(2,2, figsize = (12,8))\nfig.suptitle('subplots title',fontsize = 20)\nax[0,0].scatter(data1[\"age\"],data1[\"thalach\"])\nax[0,0].set_title(\"1. title\")\nax[0,1].bar(data1[\"age\"],data1[\"slope\"])\nax[0,1].set_title(\"2. title\")\nax[1,0].plot(data1[\"age\"],data1[\"age\"])\nax[1,0].set_title(\"3. title\")\nax[1,1].pie([list(data1[\"sex\"].values).count(1),list(data1[\"sex\"].values).count(0)])\nax[1,1].set_title(\"4. title\")\nplt.show()","02f12f27":"fig = plt.figure(figsize = (12,8))\n\nax1 = plt.subplot(212)\nax1.plot(data1[\"age\"], data1[\"age\"])\nax1.set_title(\"big plot\")\n\nax2 = plt.subplot(221)\nax2.plot(data1[\"age\"], data1[\"age\"])\nax2.set_title(\"little plot\")\n\nax3 = plt.subplot(222)\nax3.plot(data1[\"age\"], data1[\"age\"])\nax3.set_title(\"little plot\")\n\nplt.show()","236fec82":"fig = plt.figure(figsize = (12,8))\nax1 = plt.subplot(212)\nax1.margins(0.05)           # Default margin is 0.05, value 0 means fit\nax1.plot(data3[\"Confirmed\"], data3[\"Deaths\"])\n\nax2 = plt.subplot(221)\nax2.margins(2, 2)           # Values >0.0 zoom out\nax2.plot(data3[\"Confirmed\"], data3[\"Deaths\"])\nax2.set_title('Zoomed out')\n\nax3 = plt.subplot(222)\nax3.margins(x=0, y=-0.25)   # Values in (-0.5, 0.0) zooms in to center\nax3.plot(data3[\"Confirmed\"], data3[\"Deaths\"])\nax3.set_title('Zoomed in')\n\nplt.show()\n","27ee7ab6":"#styles\nstyles = [\"bmh\",\n          \"classic\",\n          \"dark_background\",\n          \"fivethirtyeight\",\n          \"ggplot\",\n          \"grayscale\",\n          \"seaborn-bright\",\n         \"seaborn-colorblind\",\n         \"seaborn-dark\",\n         \"seaborn-dark-palette\",\n         \"seaborn-darkgrid\",\n         \"seaborn-deep\",\n         \"seaborn-muted\",\n         \"seaborn-notebook\",\n         \"seaborn-paper\",\n         \"seaborn-pastel\",\n         \"seaborn-poster\",\n         \"seaborn-talk\",\n         \"seaborn-ticks\",\n         \"seaborn-white\",\n         \"seaborn-whitegrid\"]\nfor i in styles:\n    fig = plt.figure(figsize = (12,8))\n    plt.style.use(i)\n    plt.plot([1,2,3,4],[1,2,3,4])\n    plt.title(i, fontsize = 20)\n    \nplt.show()","67dad8e5":"## Anatomy of a Plot\n<img src = \"https:\/\/matplotlib.org\/3.1.1\/_images\/sphx_glr_anatomy_001.png\" height = \"422\" width = \"750\">","d46c4339":"<a id=\"3\"><\/a> <br>\n# Texts","3f9db3cd":"<a id=\"4\"><\/a> <br>\n# Styled Plots","eb4fe19b":"<a id=\"5\"><\/a> <br>\n# Subplots\n<img src = \"https:\/\/www.stat.berkeley.edu\/~nelle\/teaching\/2017-visualization\/figures\/subplot-grid.png\" height = \"315\" width = \"550\">","94924a49":"<a id=\"7\"><\/a> <br>\n# Styles","0ceed3f3":"<a id=\"2\"><\/a> <br>\n# Normal Plots","0de2df56":"<a id=\"1\"><\/a> <br>\n# Imports and Datasets","a95ed9ac":"<a id=\"6\"><\/a> <br>\n# Zooming","e55d48f4":"<a id=\"8\"><\/a> <br>\n# Conclusion\n* **If there is something wrong with this kernel please let me know in the comments.**\n\n### My other kernels: https:\/\/www.kaggle.com\/mrhippo\/notebooks\n\n* **References:**\n* https:\/\/matplotlib.org\/3.2.2\/contents.html","d50e27b2":"# Introduction\n* This kernel is notes that I took for **Matplotlib**. This is not a tutorial you can think that kernel as a cheatsheet for Matplotlib. While coding a kernel open this in a new tab and copy paste. \n\n<img src = \"https:\/\/matplotlib.org\/_static\/logo2_compressed.svg\" height = \"422\" width = \"750\">\n\n### This kernel is a part of a big series:\n* Data Science Notes1: Matplotlib\n* [Data Science Notes2: Seaborn](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes2-seaborn?scriptVersionId=38602288)\n* [Data Science Notes3: Plotly](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes3-plotly?scriptVersionId=38663418)\n* [Data Science Notes4: Machine Learning (ML)](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes4-machine-learning?scriptVersionId=39376804)\n* [Data Science Notes5: Deep Learning: ANN](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes5-deep-learning-ann) \n* [Data Science Notes6: Deep Learning: CNN](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes6-deep-learning-cnn) \n* [Data Science Notes7: Deep Learning: RNN and LSTM](https:\/\/www.kaggle.com\/mrhippo\/data-science-notes7-deep-learning-rnn-and-lstm)\n\n### This kernel will be updated\n\n## Content\n* [Imports and Datasets](#1)\n* [Normal Plots](#2)\n* [Texts](#3)\n* [Styled Plots](#4)\n* [Subplots](#5)\n* [Zooming](#6)\n* [Styles](#7)\n* [Conclusion](#8)"}}