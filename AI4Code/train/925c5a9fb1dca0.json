{"cell_type":{"2b01d055":"code","28020755":"code","adc61a55":"code","4738faff":"code","72c41b49":"code","7a251747":"code","addb42b7":"code","a6600a4e":"code","9e9bb173":"code","85f3b112":"code","dabf1a3f":"code","c4690c5f":"code","9e96cfbf":"code","1701b674":"code","2d316728":"code","cbbc3641":"code","fb51a818":"code","f7f7615f":"code","5fcaa505":"code","cd889bfe":"code","c5e7e863":"code","cec5211f":"code","81ec72c7":"code","fef4a239":"code","0b1a7170":"code","0f56e086":"code","93f057e9":"code","b63d8261":"code","f8d28467":"code","ec112f1d":"code","70e66ffd":"code","5d72269d":"code","dd061c69":"code","9194eb51":"code","c46905e7":"code","7b0862f3":"code","2a0e7c49":"code","46ea538a":"code","1ab0dc05":"markdown","9d8c95f6":"markdown","45099fab":"markdown","0a8ce923":"markdown","b85427a0":"markdown","da8206cf":"markdown","2473c6c0":"markdown","19291094":"markdown","74716689":"markdown","2d2c7d92":"markdown","4609f504":"markdown","730fd0cf":"markdown","51e1cc08":"markdown","35b94ecf":"markdown","ad38e48b":"markdown","bcc65f19":"markdown","b2a6a668":"markdown","d4bf1e6c":"markdown","a4b600a0":"markdown","f5957687":"markdown"},"source":{"2b01d055":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nfrom operator import itemgetter\nfrom collections import defaultdict","28020755":"df = pd.read_csv('..\/input\/sp-500-companies-with-financial-information\/financials.csv')\ndf.head()","adc61a55":"df.columns","4738faff":"df.shape","72c41b49":"df.dtypes","7a251747":"df.describe(include='all')","addb42b7":"df.isnull().sum()","a6600a4e":"# numpy arrays for creating dictionaries for various kinds of analysis\nsector = np.asarray(df['Sector'])\nprice = np.asarray(df['Price'])\ncompany = np.asarray(df['Name'])\nmarket_cap = np.asarray(df['Market Cap'])\ndividend_yield = np.asarray(df['Dividend Yield'])\nprice_sales = np.asarray(df['Price\/Sales'])\nprice_earnings = np.asarray(df['Price\/Earnings'])\nEBITDA = np.asarray(df['EBITDA'])","9e9bb173":"# Creating dictionaries\ncompany_sectors = dict(zip(company,sector))\ncopmany_prices = dict(zip(company,price))\ncompany_market_cap = dict(zip(company,market_cap))\ncompany_dividend_yields = dict(zip(company,dividend_yield))\ncompany_price_sales = dict(zip(company,price_sales))\ncompany_price_earnings = dict(zip(company,price_earnings))\ncompany_ebitda = dict(zip(company, EBITDA))","85f3b112":"# Determining number of each company in each sector\nres = defaultdict(int)\nfor key, val in company_sectors.items():\n    res[val] += 1\n\nsectors = dict(res)\npd.DataFrame(sectors.items(), columns=['Sector', 'Company'])","dabf1a3f":"sector_names = list(sectors)\nsector_values = list(sectors.values()) #[67, 61, 70, 84, 28, 68, 25, 33, 34, 32, 3]\n\npie, ax = plt.subplots(figsize=[15,10])\nplt.pie(x=sector_values, autopct=\"%.1f%%\", explode=[0.05]*len(sector_values), labels=sector_names, pctdistance=0.5)\nplt.title(\"S&P 500 sector breakdown (by July 2020)\", fontsize=14);\npie.savefig(\"DeliveryPieChart.png\")","c4690c5f":"# Determining market capitalization of each sector\ndfsec = df.groupby([\"Sector\"]).sum().sort_values(\"Market Cap\", ascending=False) \ndfsec = dfsec[[\"Market Cap\"]].round(1) \ndfsec.reset_index(inplace=True) \ndfsec","9e96cfbf":"sector_names = list(dfsec['Sector'])\nsector_values = list(dfsec['Market Cap'])\n\npie, ax = plt.subplots(figsize=[15,10])\nplt.pie(x=sector_values, autopct=\"%.1f%%\", explode=[0.07]*len(sector_values), labels=sector_names, pctdistance=0.5)\nplt.title(\"Market capitalization structure of each sector (by July 2020)\", fontsize=14);\npie.savefig(\"DeliveryPieChart.png\")","1701b674":"# Function for determining the belonging of leading companies to each sector\ndef defining_sectors(top_companies_dict):\n    L1 = list(top_companies_dict)\n    L2 = list(top_companies_dict.values())\n    S = []\n    for l in L1:\n        sec = company_sectors[l]\n        S.append(sec)\n    \n    data = pd.DataFrame({'Company':L1, 'Sector':S, 'Value':L2})\n    return data ","2d316728":"N = 10\ntop_10_by_market_cap = dict(sorted(company_market_cap.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_market_cap)\ny_axis = list(top_10_by_market_cap.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"crimson\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Market capitalization\",fontsize=18)\nplt.title(\"Top 10 Companies (By Market capitalization)\",fontsize=20)\nplt.grid(alpha=0.3)","cbbc3641":"defining_sectors(top_10_by_market_cap)","fb51a818":"N = 50\ntop_20_by_market_cap = dict(sorted(company_market_cap.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_20_by_market_cap.items(),columns=['Name', 'Market Cap'])\nfig = px.scatter(data, x=\"Name\", y=\"Market Cap\", color=\"Name\", size='Market Cap')\nfig.show()","f7f7615f":"N = 10\ntop_10_by_price_values = dict(sorted(copmany_prices.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_price_values)\ny_axis = list(top_10_by_price_values.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"darkcyan\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Price Values\",fontsize=18)\nplt.title(\"Top 10 Companies (By Stock Price Values)\",fontsize=20)\nplt.grid(alpha=0.3)","5fcaa505":"defining_sectors(top_10_by_price_values)","cd889bfe":"N = 100\ntop_100_by_price_values = dict(sorted(copmany_prices.items(), key = itemgetter(1), reverse = True)[:N])\nres\ndata = pd.DataFrame(top_100_by_price_values.items(),columns=['Name', 'Price Value'])\nfig = px.scatter(data, x=\"Name\", y=\"Price Value\", color=\"Name\", size='Price Value')\nfig.show()","c5e7e863":"N = 10\ntop_10_by_dividend_yield = dict(sorted(company_dividend_yields.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_dividend_yield)\ny_axis = list(top_10_by_dividend_yield.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"darkorange\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Dividend Yields\",fontsize=18)\nplt.title(\"Top 10 Companies (By Dividend Yields)\",fontsize=20)\nplt.grid(alpha=0.3)","cec5211f":"defining_sectors(top_10_by_dividend_yield)","81ec72c7":"N = 100\ntop_100_by_dividend_yield = dict(sorted(company_dividend_yields.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_100_by_dividend_yield.items(),columns=['Company', 'Dividend Yield'])\nfig = px.scatter(data, x=\"Company\", y=\"Dividend Yield\", color=\"Company\", size='Dividend Yield')\nfig.show()","fef4a239":"N = 10\ntop_10_by_price_sales = dict(sorted(company_price_sales.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_price_sales)\ny_axis = list(top_10_by_price_sales.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"springgreen\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Price sales\",fontsize=18)\nplt.title(\"Top 10 Companies (Price\/sales)\",fontsize=20)\nplt.grid(alpha=0.3)","0b1a7170":"defining_sectors(top_10_by_price_sales)","0f56e086":"N = 50\ntop_100_by_price_sales = dict(sorted(company_price_sales.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_100_by_price_sales.items(),columns=['Company', 'Price\/Sales'])\nfig = px.scatter(data, x=\"Company\", y=\"Price\/Sales\", color=\"Company\", size='Price\/Sales')\nfig.show()","93f057e9":"N = 10\ntop_10_by_price_earnings = dict(sorted(company_price_earnings.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_price_earnings)\ny_axis = list(top_10_by_price_earnings.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"deepskyblue\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Price Earnings\",fontsize=18)\nplt.title(\"Top 10 Companies (Price\/Earnings)\",fontsize=20)\nplt.grid(alpha=0.3)","b63d8261":"defining_sectors(top_10_by_price_earnings)","f8d28467":"N = 50\ntop_50_by_price_earnings = dict(sorted(company_price_earnings.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_50_by_price_earnings.items(),columns=['Company', 'Price\/Earnings'])\nfig = px.scatter(data, x=\"Company\", y=\"Price\/Earnings\", color=\"Company\", size='Price\/Earnings')\nfig.show()","ec112f1d":"N = 10\ntop_10_by_EBITDA = dict(sorted(company_ebitda.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_by_EBITDA)\ny_axis = list(top_10_by_EBITDA.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"cyan\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"EBITDA\",fontsize=18)\nplt.title(\"Top 10 Companies (EBITDA)\",fontsize=20)\nplt.grid(alpha=0.3)","70e66ffd":"defining_sectors(top_10_by_EBITDA)","5d72269d":"N = 50\ntop_100_ebitda = dict(sorted(company_ebitda.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_100_ebitda.items(),columns=['Company', 'EBITDA'])\nfig = px.scatter(data, x=\"Company\", y=\"EBITDA\", color=\"Company\", size='EBITDA')\nfig.show()","dd061c69":"# Creatiing new data frame to define difference of high and low values of price in 52 weeks\n\ndifference = np.asarray(df['52 Week Low'] - df['52 Week High']) # range of stock price in 52 weeks (max - min)\nLow = np.asarray(df['52 Week Low'])\nHigh = np.asarray(df['52 Week High'])\n\nnew_df = pd.DataFrame({'Company':company,\n                        'Sector':sector,\n                        'Price':price,\n                        '52 Week Low':Low,\n                        '52 Week High':High,\n                        'Stock Growth':difference})\n\nnew_df.head()","9194eb51":"new_df = new_df.groupby([\"Company\",\"Sector\"]).sum().sort_values(\"Stock Growth\", ascending=False) \nnew_df = new_df[[\"Stock Growth\"]].round(1) \nnew_df.reset_index(inplace=True) \nnew_df.head(10)","c46905e7":"arr1, arr2 = np.asarray(new_df['Company']), np.asarray(new_df['Stock Growth'])\nD = dict(zip(arr1,arr2))\n\nN = 10\ntop_10_stock_grouth = dict(sorted(D.items(), key = itemgetter(1), reverse = True)[:N])\n\nf = plt.figure(figsize=(10,5))\nf.add_subplot(111)\n\nx_axis = list(top_10_stock_grouth)\ny_axis = list(top_10_stock_grouth.values())\n\nplt.axes(axisbelow=True)\nplt.barh(x_axis, y_axis, color=\"brown\")\nplt.gca().invert_yaxis()\nplt.tick_params(size=5,labelsize = 13)\nplt.xlabel(\"Companies\",fontsize=18)\nplt.title(\"Top 10 companies by stock price growth in 52 weeks\",fontsize=20)\nplt.grid(alpha=0.3)","7b0862f3":"N = 50\n\ntop_50_stock_grouth = dict(sorted(D.items(), key = itemgetter(1), reverse = True)[:N])\ndata = pd.DataFrame(top_50_stock_grouth.items(),columns=['Company', 'Stock Grouth'])\nfig = px.scatter(data, x=\"Company\", y=\"Stock Grouth\", color=\"Company\", size='Stock Grouth')\nfig.show()","2a0e7c49":"df['Annual earnings per share'] = df['Price']\/df['Price\/Earnings']\ndf['Number of Shares Outstanding'] = df['Market Cap']\/df['Price']\ndf['Net Profit'] = df['Number of Shares Outstanding'] * df['Earnings\/Share']\ndf['Stock Grouth'] = df['52 Week Low'] - df['52 Week High']\ndf['Book Value'] = df['Price\/Book'] * df['Market Cap']\ndf['Annual Revenue'] = df['Price\/Sales'] * df['Market Cap']\ndf = df.drop(columns='SEC Filings')\ndf.head()","46ea538a":"# Correlation analysis of our new data frame\ndf.iloc[:,:].corr().style.background_gradient(cmap='Purples').format(\"{:.3f}\")","1ab0dc05":"## Top 50 companies by price\/sales","9d8c95f6":"## Top 50 companies by market capitalization","45099fab":"## Top 10 companies by market capitalization","0a8ce923":"## Top 50 companies by stock price growth in 52 weeks","b85427a0":"Price\/Earnings - financial indicator equal to the ratio of the market value of a share to the annual earnings per share.\n\nDividend yield is the ratio of the annual dividend per share to the share price. This value is most often expressed as a percentage.\n\nEarnings\/Share - financial indicator equal to the ratio of the company's net profit available for distribution to the average annual number of ordinary shares.\n\nEBITDA is an analytical indicator equal to the amount of profit before deduction of expenses on payment of interest, taxes, depreciation and amortization.\n\nPrice\/Sales - financial indicator equal to the ratio of a company's market capitalization to its annual revenue.\n\nPrice\/book - financial ratio equal to the ratio of the company's current market capitalization to its book value.\n","da8206cf":"## Top 10 companies by dividend yields","2473c6c0":"# Importing Libraries","19291094":"## Top 10 companies by price\/earnings","74716689":"## Bar plots and scatter plots (determining top-10 companies according to various types of criteries)","2d2c7d92":"## Top 10 companies by price\/sales","4609f504":"# Some important information about data frame variables ","730fd0cf":"## Top 50 companies by EBITDA","51e1cc08":"## Top 10 companies in the growth of stock quotes in 52 weeks","35b94ecf":"## Top 50 companies by price earnings","ad38e48b":"### Pie Charts ","bcc65f19":"## Top 100 companies by stock price values","b2a6a668":"## Top 10 companies by stock price values","d4bf1e6c":"## Top 100 companies by divident yields","a4b600a0":"## Top 10 companies by EBITDA","f5957687":"## Defining a new type of variables using financial formulas and adding them to our dataframe"}}