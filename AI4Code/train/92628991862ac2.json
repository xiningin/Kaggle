{"cell_type":{"283e9fba":"code","56fa22fc":"code","6f57facc":"code","2ff7c459":"code","e57a5a8d":"code","135eb1d8":"code","7a71d9c1":"code","3580dc7e":"code","ee29a3de":"code","4333059a":"code","05879128":"code","1903b2de":"code","0cd0705b":"code","917c7d9a":"code","fa23fc5a":"code","e005c261":"code","45766fd3":"code","0e900bf7":"code","ffbd8ef5":"code","2299555c":"code","c6abf7b2":"code","b563fc24":"code","84776517":"code","c4c2d175":"code","8a905d7b":"code","fe425db3":"code","1196a60b":"code","b55d5912":"code","421af1a7":"code","c54dd982":"code","1749bb88":"code","2f0eeddd":"code","179bc0b0":"code","bddc9d36":"markdown","d8ffdcf3":"markdown","5d6922ad":"markdown","423ffbae":"markdown","b58af18f":"markdown","c824cbfa":"markdown","6e459b55":"markdown","ca2023d1":"markdown","8a790ec5":"markdown","bc3559bf":"markdown","d3d1d7bf":"markdown","e838d442":"markdown","5bd5a79f":"markdown","b106bc10":"markdown","b4ae8b39":"markdown","b3071001":"markdown","d82bdb88":"markdown","ab5b4a91":"markdown","a1f8d804":"markdown","1025eb2c":"markdown","765255c4":"markdown","950734e0":"markdown","0ca26d82":"markdown","ecbf918f":"markdown","b7b387ab":"markdown","af32e878":"markdown","e9cc4fab":"markdown","7d46c2b3":"markdown","b2613fc4":"markdown","b034e7b7":"markdown","444d44c0":"markdown","c823d2df":"markdown","3e94275a":"markdown","636be2f9":"markdown"},"source":{"283e9fba":"import os\nimport colorlover as cl\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport lightgbm as lgbm\nimport plotly.offline as py\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import r2_score, classification_report, confusion_matrix, precision_recall_curve\nimport warnings\npy.init_notebook_mode(connected=True)\nwarnings.filterwarnings('ignore')\n%matplotlib inline","56fa22fc":"input_path = os.path.join(os.pardir, 'input', 'FIFA 2018 Statistics.csv')\ndf = pd.read_csv(input_path)\ndf.head()","6f57facc":"print('\\t# Cols = {}\\n\\t# Rows = {}'.format(df.shape[1], df.shape[0]))","2ff7c459":"dtype_counts = df.dtypes.value_counts()\n\nfig, ax = plt.subplots(1, 1, figsize=[7, 4])\nsns.barplot(y=dtype_counts.index.astype(str), x=dtype_counts, ax=ax, \n            palette=sns.color_palette(\"BuGn_r\"))\n\nfor side in ['top', 'right', 'left']:\n    ax.spines[side].set_visible(False)\nax.grid(axis='x', linestyle='--')\nax.set_xlabel('Variable count')\n\nplt.suptitle('Distribution of data types', ha='left', fontsize=16, x=.125, y=1)\nplt.title('Mostly numeric, with a handful of categoricals', ha='left', x=0)\nplt.show()","e57a5a8d":"null_sums = df.isnull().sum()\nnull_sums = null_sums[null_sums > 0].sort_values(ascending=False)\n\nfig, ax = plt.subplots(1, 1, figsize=[7, 4])\nsns.barplot(y=null_sums.index, x=100 * null_sums \/ len(df), \n            ax=ax, palette=sns.color_palette(\"Blues\"))\n\nfor side in ['top', 'right', 'left']:\n    ax.spines[side].set_visible(False)\nax.grid(axis='x', linestyle='--')\nax.set_xlabel('Null %')\n\nplt.suptitle('Null % of columns', ha='left', fontsize=16, x=.125, y=1)\nplt.title('Only columns with at least one null value plotted', ha='left', x=0)\nplt.show()","135eb1d8":"df['Own goals'].fillna(0, inplace=True)","7a71d9c1":"match_df = df.merge(df, left_on=['Date', 'Team'], right_on=['Date', 'Opponent'], \n                    how='inner', suffixes=[' Team', ' Opponent'])\n\nkeep = []\nfor i, row in match_df.iterrows():\n    if i > 0:\n        if (row['Team Team'] == match_df.loc[i - 1, 'Opponent Team']) & \\\n            (row['Date'] == match_df.loc[i - 1, 'Date']):\n            continue\n        else:\n            keep.append(i)\n            \nmatch_df = match_df.loc[keep, :]\nmatch_df.head()","3580dc7e":"match_df.loc[match_df['Goal Scored Team'] > match_df['Goal Scored Opponent'], 'Result'] = 'Team win'\nmatch_df.loc[match_df['Goal Scored Team'] < match_df['Goal Scored Opponent'], 'Result'] = 'Opponent win'\nmatch_df.loc[match_df['Goal Scored Team'] == match_df['Goal Scored Opponent'], 'Result'] = 'Draw'\nmatch_df.loc[(match_df['Goal Scored Team'] == match_df['Goal Scored Opponent']) &\n             (match_df['Goals in PSO Team'] < match_df['Goals in PSO Opponent']), 'Result'] = 'Opponent win (Pens)'\nmatch_df.loc[(match_df['Goal Scored Team'] == match_df['Goal Scored Opponent']) &\n             (match_df['Goals in PSO Team'] > match_df['Goals in PSO Opponent']), 'Result'] = 'Team win (Pens)'","ee29a3de":"results_count = match_df['Result'].value_counts()\n\nfig, ax = plt.subplots(1, 1, figsize=[7, 4])\nsns.barplot(y=results_count.index, x=results_count, ax=ax, \n            palette=sns.cubehelix_palette(5))\n\nfor side in ['top', 'right', 'left']:\n    ax.spines[side].set_visible(False)\nax.grid(axis='x', linestyle='--')\nax.set_xlabel('Count')\n\nplt.suptitle('Match outcomes inferred from goals scored', ha='left', fontsize=16, x=.125, y=1)\nplt.title('Roughly equal wins between \\'Team\\' and \\'Opponent\\'', ha='left', x=0)\nplt.show()","4333059a":"match_df['Distance vs. Opponent'] = match_df['Distance Covered (Kms) Team'] - match_df['Distance Covered (Kms) Opponent']\nmatch_df['Goal Difference'] = match_df['Goal Scored Team'] - match_df['Goal Scored Opponent']\n\nlm1 = LinearRegression().fit(match_df['Distance vs. Opponent'].values.reshape(-1, 1), match_df['Ball Possession % Team'])\nextremes = np.array([match_df['Distance vs. Opponent'].min(), match_df['Distance vs. Opponent'].max()]).reshape(-1, 1)\nposs_pred = lm1.predict(match_df['Ball Possession % Team'].values.reshape(-1, 1))\nposs_pred_plot = lm1.predict(extremes)\n\nlm2 = LinearRegression().fit(match_df['Distance vs. Opponent'].values.reshape(-1, 1), match_df['Goal Difference'])\ngd_pred = lm2.predict(match_df['Ball Possession % Team'].values.reshape(-1, 1))\ngd_pred_plot = lm2.predict(extremes)\n\nfig, (ax, ax1) = plt.subplots(1, 2, figsize=[14, 4])\n\nax.scatter(match_df['Distance vs. Opponent'], match_df['Ball Possession % Team'], edgecolors='blue', alpha=.3,\n           s=100, c='blue')\nax.plot(extremes, poss_pred_plot, color='k', linestyle='--', \n        label='Linear fit (R2 = {:.2f})'.format(r2_score(match_df['Ball Possession % Team'], poss_pred)))\nax.set_ylabel('Possession (%)')\nax.set_title('On possession', ha='left', fontsize=12, x=0, y=1.05)\n\nax1.scatter(match_df['Distance vs. Opponent'], match_df['Goal Difference'], edgecolors='green', alpha=.3,\n           s=100, c='green')\nax1.plot(extremes, gd_pred_plot, color='k', linestyle='--', \n        label='Linear fit (R2 = {:.2f})'.format(r2_score(match_df['Ball Possession % Team'], gd_pred)))\nax1.set_ylabel('Match goal difference')\nax1.set_title('On goal difference', ha='left', fontsize=12, x=0, y=1.05)\n\nfor a in (ax, ax1):\n    a.legend(frameon=False)\n    a.spines['right'].set_visible(False)\n    a.spines['top'].set_visible(False)\n    a.set_xlabel('Distance run further than opponent (km)')\n\nplt.suptitle('Effects of running further than the opponent', ha='left', x=.125, fontsize=16, y=1.05)\nplt.show()","05879128":"fig, (ax, ax1) = plt.subplots(2, 1, figsize=[14, 11])\n\nfor res in match_df['Result'].unique():\n    sns.kdeplot(match_df.loc[match_df['Result'] == res, 'Distance vs. Opponent'], \n                ax=ax, label=res, shade=True)\nax.set_title('Distribution of distance run vs. opponent', ha='left', fontsize=16, x=0, y=1)\nax.set_xlabel('Distance run - distance run by opponent (km)')    \nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\nax.yaxis.set_visible(False)\nax.set_ylim([ax.get_ylim()[0], 0.13])\nax.legend(frameon=False)\n\norder = df.groupby('Team')['Distance Covered (Kms)'].mean().sort_values().index\nsns.boxplot(x='Team', y='Distance Covered (Kms)', data=df, order=order)\nax1.set_title('Average distances run by each team involved', ha='left', fontsize=16, x=0, y=1)\nax1.set_xlabel('')\nax1.set_ylabel('Distance per match (km)')\nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax1.spines[spine].set_visible(False)\nax1.grid(linestyle='--', alpha=.3)\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=90)\n\nplt.autoscale()\nplt.show()","1903b2de":"fig, (ax, ax1) = plt.subplots(1, 2, figsize=[14, 5])\n\nfor res in match_df['Result'].unique():\n    sns.kdeplot(match_df.loc[match_df['Result'] == res, 'Ball Possession % Team'], \n                ax=ax, label=res, shade=True)\nax.set_title('Whilst a minor effect, it seems possession increases win probability slightly', \n             ha='left', fontsize=12, x=0, y=1.02)\nax.yaxis.set_visible(False)\nax.set_ylim([ax.get_ylim()[0], .04])\n    \nsns.barplot(y='Result', x='Ball Possession % Team', data=match_df, ax=ax1)\nax1.grid(axis='x', linestyle='--')\nax1.set_ylabel('')\n\nfor a in [ax, ax1]:\n    for spine in ['top', 'left', 'right']:\n        a.spines[spine].set_visible(False)\n    a.set_xlabel('Team possession (%)')\n    a.legend(frameon=False)\n\nplt.suptitle('Possession distributions and their mean values', ha='left', x=.125, fontsize=16, y=1)\nplt.autoscale()\nplt.show()","0cd0705b":"country_dict = {\n    'Afghanistan': 'AFG',\n     'Albania': 'ALB',\n     'Algeria': 'DZA',\n     'American Samoa': 'ASM',\n     'Andorra': 'AND',\n     'Angola': 'AGO',\n     'Anguilla': 'AIA',\n     'Antigua and Barbuda': 'ATG',\n     'Argentina': 'ARG',\n     'Armenia': 'ARM',\n     'Aruba': 'ABW',\n     'Australia': 'AUS',\n     'Austria': 'AUT',\n     'Azerbaijan': 'AZE',\n     'Bahamas, The': 'BHM',\n     'Bahrain': 'BHR',\n     'Bangladesh': 'BGD',\n     'Barbados': 'BRB',\n     'Belarus': 'BLR',\n     'Belgium': 'BEL',\n     'Belize': 'BLZ',\n     'Benin': 'BEN',\n     'Bermuda': 'BMU',\n     'Bhutan': 'BTN',\n     'Bolivia': 'BOL',\n     'Bosnia and Herzegovina': 'BIH',\n     'Botswana': 'BWA',\n     'Brazil': 'BRA',\n     'British Virgin Islands': 'VGB',\n     'Brunei': 'BRN',\n     'Bulgaria': 'BGR',\n     'Burkina Faso': 'BFA',\n     'Burma': 'MMR',\n     'Burundi': 'BDI',\n     'Cabo Verde': 'CPV',\n     'Cambodia': 'KHM',\n     'Cameroon': 'CMR',\n     'Canada': 'CAN',\n     'Cayman Islands': 'CYM',\n     'Central African Republic': 'CAF',\n     'Chad': 'TCD',\n     'Chile': 'CHL',\n     'China': 'CHN',\n     'Colombia': 'COL',\n     'Comoros': 'COM',\n     'Congo, Democratic Republic of the': 'COD',\n     'Congo, Republic of the': 'COG',\n     'Cook Islands': 'COK',\n     'Costa Rica': 'CRI',\n     \"Cote d'Ivoire\": 'CIV',\n     'Croatia': 'HRV',\n     'Cuba': 'CUB',\n     'Curacao': 'CUW',\n     'Cyprus': 'CYP',\n     'Czech Republic': 'CZE',\n     'Denmark': 'DNK',\n     'Djibouti': 'DJI',\n     'Dominica': 'DMA',\n     'Dominican Republic': 'DOM',\n     'Ecuador': 'ECU',\n     'Egypt': 'EGY',\n     'El Salvador': 'SLV',\n     'Equatorial Guinea': 'GNQ',\n     'Eritrea': 'ERI',\n     'Estonia': 'EST',\n     'Ethiopia': 'ETH',\n     'Falkland Islands (Islas Malvinas)': 'FLK',\n     'Faroe Islands': 'FRO',\n     'Fiji': 'FJI',\n     'Finland': 'FIN',\n     'France': 'FRA',\n     'French Polynesia': 'PYF',\n     'Gabon': 'GAB',\n     'Gambia, The': 'GMB',\n     'Georgia': 'GEO',\n     'Germany': 'DEU',\n     'Ghana': 'GHA',\n     'Gibraltar': 'GIB',\n     'Greece': 'GRC',\n     'Greenland': 'GRL',\n     'Grenada': 'GRD',\n     'Guam': 'GUM',\n     'Guatemala': 'GTM',\n     'Guernsey': 'GGY',\n     'Guinea': 'GIN',\n     'Guinea-Bissau': 'GNB',\n     'Guyana': 'GUY',\n     'Haiti': 'HTI',\n     'Honduras': 'HND',\n     'Hong Kong': 'HKG',\n     'Hungary': 'HUN',\n     'Iceland': 'ISL',\n     'India': 'IND',\n     'Indonesia': 'IDN',\n     'Iran': 'IRN',\n     'Iraq': 'IRQ',\n     'Ireland': 'IRL',\n     'Isle of Man': 'IMN',\n     'Israel': 'ISR',\n     'Italy': 'ITA',\n     'Jamaica': 'JAM',\n     'Japan': 'JPN',\n     'Jersey': 'JEY',\n     'Jordan': 'JOR',\n     'Kazakhstan': 'KAZ',\n     'Kenya': 'KEN',\n     'Kiribati': 'KIR',\n     'Korea, North': 'PRK',\n     'Korea, South': 'KOR',\n     'Kosovo': 'KSV',\n     'Kuwait': 'KWT',\n     'Kyrgyzstan': 'KGZ',\n     'Laos': 'LAO',\n     'Latvia': 'LVA',\n     'Lebanon': 'LBN',\n     'Lesotho': 'LSO',\n     'Liberia': 'LBR',\n     'Libya': 'LBY',\n     'Liechtenstein': 'LIE',\n     'Lithuania': 'LTU',\n     'Luxembourg': 'LUX',\n     'Macau': 'MAC',\n     'Macedonia': 'MKD',\n     'Madagascar': 'MDG',\n     'Malawi': 'MWI',\n     'Malaysia': 'MYS',\n     'Maldives': 'MDV',\n     'Mali': 'MLI',\n     'Malta': 'MLT',\n     'Marshall Islands': 'MHL',\n     'Mauritania': 'MRT',\n     'Mauritius': 'MUS',\n     'Mexico': 'MEX',\n     'Micronesia, Federated States of': 'FSM',\n     'Moldova': 'MDA',\n     'Monaco': 'MCO',\n     'Mongolia': 'MNG',\n     'Montenegro': 'MNE',\n     'Morocco': 'MAR',\n     'Mozambique': 'MOZ',\n     'Namibia': 'NAM',\n     'Nepal': 'NPL',\n     'Netherlands': 'NLD',\n     'New Caledonia': 'NCL',\n     'New Zealand': 'NZL',\n     'Nicaragua': 'NIC',\n     'Niger': 'NER',\n     'Nigeria': 'NGA',\n     'Niue': 'NIU',\n     'Northern Mariana Islands': 'MNP',\n     'Norway': 'NOR',\n     'Oman': 'OMN',\n     'Pakistan': 'PAK',\n     'Palau': 'PLW',\n     'Panama': 'PAN',\n     'Papua New Guinea': 'PNG',\n     'Paraguay': 'PRY',\n     'Peru': 'PER',\n     'Philippines': 'PHL',\n     'Poland': 'POL',\n     'Portugal': 'PRT',\n     'Puerto Rico': 'PRI',\n     'Qatar': 'QAT',\n     'Romania': 'ROU',\n     'Russia': 'RUS',\n     'Rwanda': 'RWA',\n     'Saint Kitts and Nevis': 'KNA',\n     'Saint Lucia': 'LCA',\n     'Saint Martin': 'MAF',\n     'Saint Pierre and Miquelon': 'SPM',\n     'Saint Vincent and the Grenadines': 'VCT',\n     'Samoa': 'WSM',\n     'San Marino': 'SMR',\n     'Sao Tome and Principe': 'STP',\n     'Saudi Arabia': 'SAU',\n     'Senegal': 'SEN',\n     'Serbia': 'SRB',\n     'Seychelles': 'SYC',\n     'Sierra Leone': 'SLE',\n     'Singapore': 'SGP',\n     'Sint Maarten': 'SXM',\n     'Slovakia': 'SVK',\n     'Slovenia': 'SVN',\n     'Solomon Islands': 'SLB',\n     'Somalia': 'SOM',\n     'South Africa': 'ZAF',\n     'South Sudan': 'SSD',\n     'Spain': 'ESP',\n     'Sri Lanka': 'LKA',\n     'Sudan': 'SDN',\n     'Suriname': 'SUR',\n     'Swaziland': 'SWZ',\n     'Sweden': 'SWE',\n     'Switzerland': 'CHE',\n     'Syria': 'SYR',\n     'Taiwan': 'TWN',\n     'Tajikistan': 'TJK',\n     'Tanzania': 'TZA',\n     'Thailand': 'THA',\n     'Timor-Leste': 'TLS',\n     'Togo': 'TGO',\n     'Tonga': 'TON',\n     'Trinidad and Tobago': 'TTO',\n     'Tunisia': 'TUN',\n     'Turkey': 'TUR',\n     'Turkmenistan': 'TKM',\n     'Tuvalu': 'TUV',\n     'Uganda': 'UGA',\n     'Ukraine': 'UKR',\n     'United Arab Emirates': 'ARE',\n     'United Kingdom': 'GBR',\n     'United States': 'USA',\n     'Uruguay': 'URY',\n     'Uzbekistan': 'UZB',\n     'Vanuatu': 'VUT',\n     'Venezuela': 'VEN',\n     'Vietnam': 'VNM',\n     'Virgin Islands': 'VGB',\n     'West Bank': 'WBG',\n     'Yemen': 'YEM',\n     'Zambia': 'ZMB',\n     'Zimbabwe': 'ZWE'\n}\nresults_to_points_home = {\n    'Team win': 3,\n    'Opponent win': 0,\n    'Draw': 1,\n    'Opponent win (Pens)': 0,\n    'Tean win (Pens)': 3\n}\nresults_to_points_away = {\n    'Team win': 0,\n    'Opponent win': 3,\n    'Draw': 1,\n    'Opponent win (Pens)': 3,\n    'Tean win (Pens)': 0\n}\ncontinent_dict={\n    'Russia': 'Europe',\n    'Saudi Arabia': 'Asia',\n    'Egypt': 'Africa',\n    'Uruguay': 'South America',\n    'Morocco': 'Africa',\n    'Iran': 'Asia',\n    'Portugal': 'Europe',\n    'Spain': 'Europe',\n    'France': 'Europe',\n    'Australia': 'Asia',\n    'Argentina': 'South America',\n    'Iceland': 'Europe',\n    'Peru': 'South America',\n    'Denmark': 'Europe',\n    'Croatia': 'Europe',\n    'Nigeria': 'Africa',\n    'Costa Rica': 'North & Central America',\n    'Serbia': 'Europe',\n    'Germany': 'Europe',\n    'Mexico': 'North & Central America',\n    'Brazil': 'South America',\n    'Switzerland': 'Europe',\n    'Sweden': 'Europe',\n    'Korea Republic': 'Asia',\n    'Belgium': 'Europe',\n    'Panama': 'North & Central America',\n    'Tunisia': 'Africa',\n    'England': 'Europe',\n    'Colombia': 'South America',\n    'Japan': 'Asia',\n    'Poland': 'Europe',\n    'Senegal': 'Africa'\n}\n\n# Country code exceptions\ncountry_dict['England'] = 'GBR'  # I'm sorry, everyone. Blame Plotly for not being anglo centric enough\ncountry_dict['Korea Republic'] = 'KOR'","917c7d9a":"match_df['Home Team Points'] = match_df['Result'].map(results_to_points_home)\nmatch_df['Away Team Points'] = match_df['Result'].map(results_to_points_away)\n\ncountry_performance_home = match_df.groupby('Team Team')['Home Team Points'].sum().reset_index()\ncountry_performance_away = match_df.groupby('Opponent Team')['Away Team Points'].sum().reset_index()\n\ncountry_performance = country_performance_home.merge(country_performance_away, \n                                                     left_on='Team Team', right_on='Opponent Team')\ncountry_performance['Total Points'] = country_performance['Home Team Points'] + \\\n    country_performance['Away Team Points']\n\ncountry_performance['Team Plotly Code'] = country_performance['Team Team'].map(country_dict)","fa23fc5a":"data = [ dict(\n        type = 'choropleth',\n        locations = country_performance['Team Plotly Code'],\n        z = country_performance['Total Points'],\n        text = country_performance['Team Team'],\n        #autocolorscale = True,\n        colorscale = 'YlOrRd',\n        reversescale = True,\n        colorbar = dict(\n            autotick = True,\n            title = 'Tournament \\'points\\''),\n      ) ]\n\nlayout = dict(\n    title = 'World Cup performance by country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Natural Earth'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\npy.iplot( fig, validate=False, filename='d3-world-map' )","e005c261":"# Create a dataset grouped by continent for the Sankey\ndf['Team Continent'] = df['Team'].map(continent_dict)\nround_counts = df.groupby(['Team Continent', 'Round'])['Team'].nunique().reset_index()\n\nround_order = {\n    'Qualified': 0,\n    'Group Stage': 1, \n    'Round of 16': 2, \n    'Quarter Finals': 3, \n    'Semi- Finals': 4,\n    '3rd Place': 5, \n    'Final': 6\n}\nround_counts['Round as Number'] = round_counts['Round'].map(round_order)\nround_counts['Previous Round'] = round_counts['Round as Number'] - 1\nround_counts.loc[round_counts['Round as Number'] == 6, 'Previous Round'] = 4\n\ncontinent_encoder = LabelEncoder()\nround_counts['Encoded Continent'] = continent_encoder.fit_transform(round_counts['Team Continent'])\n\ncontinents = round_counts['Team Continent'].unique()\ncolors = cl.scales[str(len(continents))]['qual']['Set1']\ncolor_dict = dict(zip(continents, colors))\nround_counts['Color'] = round_counts['Team Continent'].map(color_dict)","45766fd3":"data = dict(\n    type='sankey',\n    node = dict(\n      pad = 10,\n      thickness = 30,\n      line = dict(\n        color = 'black',\n        width = 0.5\n      ),\n      label = list(round_order.keys()),\n      color = 'rgb(204, 204, 204)',\n    ),\n    link = dict(\n      source = round_counts['Previous Round'],\n      target = round_counts['Round as Number'],\n      value = round_counts['Team'],\n      color = round_counts['Color'],\n      label = round_counts['Team Continent']\n  ))\n\nlayout =  dict(\n    title = 'Progression by Continent',\n    autosize=False,\n    width=800,\n    height=750,\n\n    font = dict(\n      size = 10\n    )\n)\n\nfig = dict(data=[data], layout=layout)\npy.iplot(fig, validate=False)","0e900bf7":"match_df['Fouls difference (team - opponent)'] = match_df['Fouls Committed Team'] - match_df['Fouls Committed Opponent']\n\n# Exclude penalty shoot outs as they skew the data\nkeep = ['Pens' not in x for x in match_df['Result']]\n\nfig, (ax, ax1) = plt.subplots(1, 2, figsize=[15, 6])\nsns.violinplot(x='Result', y='Fouls difference (team - opponent)', data=match_df[keep], ax=ax, palette='Blues')\nfor spine in ['top', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\nax.grid(axis='y', linestyle='--', alpha=.6)\nax.set_xlabel('')\nax.set_ylabel('# fouls team commited more than opponent')\nax.set_title('Fouls distribution by match outcome', ha='left', fontsize=12, x=0)\n\nax1.scatter(match_df['Fouls Committed Team'], match_df['Free Kicks Opponent'])\nax1.set_xlabel('Fouls commited by a team')\nax1.set_ylabel('Free kicks taken by opponent')\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.set_title('Correlation between fouls committed and oponent\\'s free kicks', \n             ha='left', fontsize=12, x=0)\n\nplt.suptitle('Effect of committing more fouls', ha='left', x=.125, fontsize=16)\nplt.show()","ffbd8ef5":"fig, ax = plt.subplots(1, 1, figsize=[14, 6])\norder = df.groupby('Team')['Fouls Committed'].mean().sort_values().index\nsns.boxplot(x='Team', y='Fouls Committed', data=df, order=order)\nax.set_title('Be meaner, Spain!', ha='left', fontsize=12, x=0)\nax.set_xlabel('')\nax.set_ylabel('Fouls commited per match')\nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\nax.grid(linestyle='--', alpha=.3)\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.suptitle('Fouls committed by team', ha='left', x=.125, fontsize=16)\nplt.show()","2299555c":"df['Shot Accuracy %'] = 100 * df['On-Target'] \/ (df['On-Target'] + df['Off-Target'])\nteam_precision = df.groupby('Team')['Pass Accuracy %', 'Shot Accuracy %'].mean().reset_index()\nteam_precision = \\\n    team_precision.merge(country_performance[['Team Team', 'Total Points']], left_on='Team', right_on='Team Team')","c6abf7b2":"fig, ax = plt.subplots(1, 1, figsize = [12, 8])\nax.scatter(team_precision['Pass Accuracy %'], team_precision['Shot Accuracy %'],\n           s=100 * team_precision['Total Points'], alpha=.7)\nax.set_xlabel('Pass Accuracy (%)')\nax.set_ylabel('Shot Accuracy (%)')\n\nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\n\nax.grid(linestyle='--', alpha=.7)\n\nfor i, row in team_precision.iterrows():\n    ax.annotate(row['Team'], xy=(row['Pass Accuracy %']+.3, row['Shot Accuracy %']+.5))\nplt.show()","b563fc24":"for var in ['Man of the Match Opponent', 'Man of the Match Team']:\n    match_df.loc[match_df[var] == 'Yes', var] = 1\n    match_df.loc[match_df[var] == 'No', var] = 0","84776517":"fig, ax = plt.subplots(1, 1, figsize=[11, 5])\n\nfor mom in match_df['Man of the Match Team'].unique():\n    sns.kdeplot(match_df.loc[match_df['Man of the Match Team'] == mom, 'Goal Scored Team'], \n                ax=ax, label='Awarded MotM = {}'.format(bool(mom)), shade=True)\n\nax.set_xlabel('Goals scored')\n    \nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\nax.yaxis.set_visible(False)\n\nax.legend(frameon=False)\nplt.suptitle('Distributions of goals scored', ha='left', fontsize=16, x=.125, y=1)\nplt.title('Centered around 0 and 1 for not MotM, around 2 for MotM', ha='left', x=0)\nplt.autoscale()\nplt.show()","c4c2d175":"fig, ax = plt.subplots(1, 1, figsize=[14, 5])\n\nfor mom in match_df['Man of the Match Team'].unique():\n    sns.kdeplot(match_df.loc[match_df['Man of the Match Team'] == mom, 'Ball Possession % Team'], \n                ax=ax, label='Awarded MotM = {}'.format(bool(mom)), shade=True)\nax.set_title('Teams with a higher possession % were more likely to get the MotM', ha='left', fontsize=12, x=0, y=1)\n\nax.set_xlabel('Team possession (%)')    \nfor spine in ['top', 'left', 'right', 'bottom']:\n    ax.spines[spine].set_visible(False)\nax.yaxis.set_visible(False)\nax.legend(frameon=False)\n\nplt.suptitle('Possession distributions and getting the MotM', ha='left', x=.125, fontsize=16, y=1)\nplt.autoscale()\nplt.show()","8a905d7b":"match_df['Simple Round'] = match_df['Round Team']\nmatch_df.loc[match_df['Round Team'] != 'Group Stage', 'Simple Round'] = 'Knockout Stage'\n\nfig, ax = plt.subplots(1, 1, figsize=[9, 5])\nsns.barplot(x='Result', y='Man of the Match Team', hue='Simple Round', data=match_df, palette=sns.color_palette(\"RdBu_r\", 2))\nax.legend(frameon=False)\nfor spine in ['right', 'top']:\n    ax.spines[spine].set_visible(False)\nplt.suptitle('Distributions of goals scored', ha='left', fontsize=16, x=.125, y=1)\nplt.title('Centered around 0 for not MotM, around 2 for MotM', ha='left', x=0)\nplt.show()","fe425db3":"losing_matches = match_df[(match_df['Man of the Match Team'] == 1) &\n                          (~match_df['Result'].isin(['Team win', 'Team win (Pens)']))]","1196a60b":"losing_matches[['Date', 'Team Team', 'Opponent Team', 'Goal Scored Team', 'Result', 'Man of the Match Team']]","b55d5912":"df[(df['Team'] == 'Germany') & (df['Opponent'] == 'Mexico')]","421af1a7":"# Specify the label (just in case we want to predict something else)\nlabel_name = 'Man of the Match'\n\n# Categorical features are the non numeric ones\ncategoricals = df.columns[df.dtypes == 'object'].tolist()\n\n# Label encode them otherwise LightGBM can't use them\nfor cat_feat in categoricals:\n    encoder = LabelEncoder()\n    df[cat_feat] = encoder.fit_transform(df[cat_feat])\nlabel = df.pop(label_name)\n\n# Don't specify the label as a categorical\nif label_name in categoricals:\n    categoricals.remove(label_name)","c54dd982":"clf = lgbm.LGBMClassifier(\n    boosting_type='gbdt',\n)\ny_prob = cross_val_predict(\n    estimator=clf, \n    cv=5, \n    X=df, \n    y=label,\n    fit_params={'categorical_feature': categoricals},\n    method='predict_proba'\n)\ny_pred = np.argmax(y_prob, axis=1)","1749bb88":"print(classification_report(y_true=label, y_pred=y_pred))","2f0eeddd":"fig, (ax, ax1) = plt.subplots(1, 2, figsize=[14, 5])\n\n# Precision recall curve\nprecision, recall, _ = precision_recall_curve(label, y_prob[:, 1])\nax.step(recall, precision, color='b', alpha=0.2, where='post')\nax.fill_between(recall, precision, step='post', alpha=0.2, color='b')\nax.set_xlabel('Recall')\nax.set_ylabel('Precision')\nax.set_ylim([0.0, 1.05])\nax.set_xlim([0.0, 1.0])\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_title('Precision - recall curve')\n\n# Confusion matrix\ncnf_matrix = confusion_matrix(label, y_pred)\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nheatmap = sns.heatmap(cnf_matrix, annot=True, fmt='d', ax=ax1, cmap=cmap, center=0)\nax1.set_title('Confusion matrix heatmap')\nax1.set_ylabel('True label')\nax1.set_xlabel('Predicted label')\n\nplt.show()","179bc0b0":"clf.fit(df, label, categorical_feature=categoricals)\nfig, (ax, ax1) = plt.subplots(1, 2, figsize=[11, 7])\nlgbm.plot_importance(clf, ax=ax, max_num_features=20, importance_type='split')\nlgbm.plot_importance(clf, ax=ax1, max_num_features=20, importance_type='gain')\nax.set_title('Importance by splits')\nax1.set_title('Importance by gain')\nplt.tight_layout()","bddc9d36":"Higher team possessions lead to a reasonably higher chance of getting MotM, but not hugely so.","d8ffdcf3":"Data integrity alert! Germany did **not** get the man of the match when they lost to Mexico - that went to Hirving Lozano of Mexico. Here's that record from the original data set to highlight:","5d6922ad":"This is another relationship that is difficult to pin down. If does seem that shot and pass accuracy are correlated, but it is not as clear whether they both increase performance (marker size).\n\nIt appears that pass accuracy has a larger effect than shot accuracy if anything.\n\nSpain killing it on the pass accuracy as per usual, whilst Iran taking pot shots apparently.","423ffbae":"So running more suggests that possession will be lower - which makes sense since teams generally have to do more running out of possession to get in defensive position, cover possible passes and gegenpress.\n\nWhat it means for goal difference in the match is less clear. Visually there seems to be a positive correlation but the r2 score isn't great.\n\nLets cut to the chase and directly compare it to the result - as well as seeing who that hardest working teams are.","b58af18f":"#### Check performance\n\nUsing `classification_report`, we can then quickly see how well the LightGBM classifier has performed:","c824cbfa":"Another way to visualise the contiental differences is to visualise the number of teams progressing to each stage of the World Cup in a Sankey plot, as below.","6e459b55":"What kind of data types are involved?","ca2023d1":"#### Team goals scored vs. MotM","8a790ec5":"## Explore relationships with MotM\n\nThe dataset's title on Kaggle is *Predict FIFA 2018 Man of the Match*, so makes sense to follow that as an objective despite this data set providing the opportunity to predict a few things.\n\nA good first step before any predictions is to visualise the relationship between whether a team contained the man of the match (MotM) and some of the other variables in the data set. To do this though, I'll need to make the man of the match variables numeric first.","bc3559bf":"#### Team possession vs. MotM","d3d1d7bf":"Not bad, only three columns with any null values.  For `1st goal` and `Own goal time`, the nulls make sense as they're both measures of time when an event occured - and if that event never occured the data will be missing.\n\nFor `Own goals`, however, it makes sense to fill the nulls with zeros considering it's a measure of how many own goals the team scored","e838d442":"![](https:\/\/images.cdn.whathifi.com\/sites\/whathifi.com\/files\/styles\/big-image\/public\/brands\/whyd\/fifa_18.jpg?itok=UgSbYYSU)\n\n# FIFA World Cup 2018 EDA\n\nIt'd didn't come home, but it was a lot of fun. So on seeing this dataset it was a no-brained to have a good old Kaggle look around and come up with an EDA, as well as some Man of the Match predicting.\n\nWhat this Kernel hopes to cover are the following points:\n\n### Contents\n\n1. Load & check data\n2. How to win a World Cup match\n    1. Work real hard?\n    2. Keep the ball?\n    3. Be South American \/ European\n    4. Play fair?\n    5. Be precise\n3. Exploring relationships with Man of the Match\n4. Predicting Man of the Match\n    1. Preparing data for prediction\n    2. Cross validate and predict\n    3. Check performance\n    4. Feature importance    ","5bd5a79f":"#### Be precise\n\nIt makes sense that precise, skilled football would be reflected in high passing and shot accuracy. I will therefore plot this information against the points acquired metric used previously for the maps.\n\nThe below scatter plot represents this information, with the size of each marker related to the points that team acquired.","b106bc10":"So the performance is OK, but to be honest not quite as accurate as I expected. I suspect this is due to not knowing the outcome of the match, so the predictor doesn't have access to the really discrimatory feature.","b4ae8b39":"Following the reformat, I can now add a column describing the outcome of the match.","b3071001":"### Re-formatting the data set\n\nThe current layout of the data, with 2 rows per match showing the data from perspective either team, makes it slightly tricky to investigate a few things directly i.e. who won! A relatively key peice of info...\n\nTherefore I'd like to reformat it such that each row corresponds to a particular match, and the data by team is included in additional columns. To do this I need to:\n\n- Join the dataset to itself by match (so on date = date and team = opposition)\n- Delete resulting 'duplicated' rows that are reverses of each other following the join","d82bdb88":"## How to win a World Cup match\n\n#### Work real hard?\n\nIntuitively it seems as if the more your team can run the better chance they'll have; but in football it's often a hallmark of less technically skilled teams. It's not easy to predict therefore how it'll influence a world cup match.\n\nFortunately, we have some data:","ab5b4a91":"#### Keep the ball?\n\nAnother idea, stemming from the paint-drying days of Iberian tiki-taka, is that the more possession means more winning. \n\nThey can't score if they haven't got the ball, right?","a1f8d804":"#### Cross validate and predict\n\nGiven the relatively small dataset size, the most robust measure of prediction accuracy will be to use SKLearn's `cross_val_predict`","1025eb2c":"Meh. Doesn't seem like it. This appears to reflect the change in tactics over the last few years in football; where hard-pressing, counter attacking football has muscled possession based games off the top.","765255c4":"We can then dig a little deeper to visualise the precision-recall curve and the confusion matrix.","950734e0":"So despite the correlations seen previously, there isn't a strong indication that distance run will greatly improve the chances of winning. \n\nThe eventual winners, France, are towards the lower end of distance run - whilst two of the semi finalists, England and Croatia, were some of the hardest runners.","0ca26d82":"#### Match outcome vs. MotM\n\nFrom intuition, and also the above distribution comparisons, we would expect the MotM to be on the winning team more often than not.\n\nI also want to break this down by the group stage vs. the knockouts, so will create a simpler `Round` column.","ecbf918f":"How big is it?","b7b387ab":"So apparently, fewer fouls commited = better chance of winning. Again we can't be sure if this is a correlation or a causation - losing teams are more likely to foul out of desparation, and in doing so concede set peices. What we do know from the second plot, which in retrospect is no surprise at all, is that it definitely leads to the opposition haveing more free kicks. Tricky to pin down.\n\nLets also look at which teams are the dirtiest \/ cleanest:","af32e878":"#### Be South American \/ European?\n\nA variable that is harder for a team to control, for sure, but does show a pattern - one that is a correlation not a direct causation (that is a much more complex problem).\n\nAnyway, converting match results to a typical league points scoring system (win = 3 points, draw = 1 point, loss = 0 points), and summing the points by team allows the below chloropleth to be plotted. It illustrates a trend common across World Cups: that the South American and European teams usually do well.","e9cc4fab":"#### Preparing data for prediction\n\nNot an awful lot to do here other than identifying & encoding the categoricals.","7d46c2b3":"## Load & check data\n\nLoad the input file and have a glimpse at what's inside:","b2613fc4":"#### Play fair?\n\nWe know that fouls in football are **usually** a bad thing - they can give penalties and threatening set peices to the opponent. But we also know that crafty, 'professional' fouls are also a thing and can often prevent sure-fire goals (looking at you Suarez \u0ca0_\u0ca0)\n\n![](http:\/\/resources3.news.com.au\/images\/2010\/09\/14\/1225922\/843775-luis-suarez.jpg)\n\nLets look at the data and see how the number of fouls commited can influence the result, if at all. At the same time, I'll include a graph of free kicks awarded to the opponent vs. fouls committed to see if that correlates in the way we might expect.","b034e7b7":"How's it looking for nulls?","444d44c0":"In the **group stages**, the MotM is virtually always on the winning team with a few rare occurences on the drawing and losing sides.\n\nIn the **knockout** stages, the MotM is **exclusively** on the winning side.\n\nOut of interest, the MotM awards to losing teams were:","c823d2df":"Predictably, the more goals a team scores the more likely the MotM is to be on their team.","3e94275a":"## Predicting Man of the Match\n\nGiven the discrimatory strength of some of the variables above, I suspect a classifier that predicts whether a team was awared MotM should perform well.\n\nIt makes sense to use the original dataset for the prediction section, despite it containing essentially duplicate\/mirrored records, just so it can be compared to any other kernels doing a prediction.\n\nI will use **LightGBM** for the prediction, as it performs very well on tabular data like the dataset in question. It will also cope with the null values and categorical variables easily.","636be2f9":"#### Feature importance\n\nIt's always interesting to see which of our inputs are the strongest predictor, so lets visualise this too. To return a classifier object with importances attached, use the same model object assessed in CV and train on the full dataset."}}