{"cell_type":{"d07fa9e4":"code","436cb1d8":"code","a77992ef":"code","8457e026":"code","15eb4174":"code","7345167a":"code","0e04243d":"code","52b454ab":"code","65d0929a":"code","584c2cb4":"code","c23bfc98":"code","e4e336e4":"code","3d74b055":"code","fecdba68":"code","93d182b2":"code","bc5faec7":"code","27187e8b":"code","6b779a00":"code","65ff005f":"code","26567abd":"code","67ffae6b":"code","a7a9e162":"code","ce34ce1d":"code","eb0940df":"code","d43c8256":"code","dddbac3d":"code","d17c7cca":"markdown","d51731f3":"markdown","8394c8f6":"markdown","79a0e1d9":"markdown","a76aa263":"markdown","452fbe01":"markdown","e0865235":"markdown","4e52fc67":"markdown","a232ec94":"markdown","f2f0b581":"markdown","9412d473":"markdown","6775a901":"markdown"},"source":{"d07fa9e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm.auto import tqdm\nfrom glob import glob\nimport time, gc\nimport cv2\n\nfrom tensorflow import keras\nimport matplotlib.image as mpimg\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.models import clone_model\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D,Dropout,BatchNormalization, Input\nfrom keras.optimizers import Adam, RMSprop\nfrom keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport PIL.Image as Image, PIL.ImageDraw as ImageDraw, PIL.ImageFont as ImageFont\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","436cb1d8":"train_df_ = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\ntest_df_ = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/test.csv')\nclass_map_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/class_map.csv')\nsample_sub_df = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/sample_submission.csv')","a77992ef":"train_df_.head()","8457e026":"test_df_.head()","15eb4174":"sample_sub_df.head()","7345167a":"class_map_df.head()","0e04243d":"print(f'Size of training data: {train_df_.shape}')\nprint(f'Size of test data: {test_df_.shape}')\nprint(f'Size of class map: {class_map_df.shape}')","52b454ab":"HEIGHT = 236\nWIDTH = 236\n\ndef get_n(df, field, n, top=True):\n    top_graphemes = df.groupby([field]).size().reset_index(name='counts')['counts'].sort_values(ascending=not top)[:n]\n    top_grapheme_roots = top_graphemes.index\n    top_grapheme_counts = top_graphemes.values\n    top_graphemes = class_map_df[class_map_df['component_type'] == field].reset_index().iloc[top_grapheme_roots]\n    top_graphemes.drop(['component_type', 'label'], axis=1, inplace=True)\n    top_graphemes.loc[:, 'count'] = top_grapheme_counts\n    return top_graphemes\n\ndef image_from_char(char):\n    image = Image.new('RGB', (WIDTH, HEIGHT))\n    draw = ImageDraw.Draw(image)\n    myfont = ImageFont.truetype('\/kaggle\/input\/kalpurush-fonts\/kalpurush-2.ttf', 120)\n    w, h = draw.textsize(char, font=myfont)\n    draw.text(((WIDTH - w) \/ 2,(HEIGHT - h) \/ 3), char, font=myfont)\n\n    return image","65d0929a":"print(f'Number of unique grapheme roots: {train_df_[\"grapheme_root\"].nunique()}')\nprint(f'Number of unique vowel diacritic: {train_df_[\"vowel_diacritic\"].nunique()}')\nprint(f'Number of unique consonant diacritic: {train_df_[\"consonant_diacritic\"].nunique()}')","584c2cb4":"top_10_roots = get_n(train_df_, 'grapheme_root', 10)\ntop_10_roots","c23bfc98":"f, ax = plt.subplots(2, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(10):\n    ax[i].imshow(image_from_char(top_10_roots['component'].iloc[i]), cmap='Greys')","e4e336e4":"bottom_10_roots = get_n(train_df_, 'grapheme_root', 10, False)\nbottom_10_roots","3d74b055":"f, ax = plt.subplots(2, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(10):\n    ax[i].imshow(image_from_char(bottom_10_roots['component'].iloc[i]), cmap='Greys')","fecdba68":"top_5_vowels = get_n(train_df_, 'vowel_diacritic', 5)\ntop_5_vowels","93d182b2":"f, ax = plt.subplots(1, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(5):\n    ax[i].imshow(image_from_char(top_5_vowels['component'].iloc[i]), cmap='Greys')","bc5faec7":"top_5_consonants = get_n(train_df_, 'consonant_diacritic', 5)\ntop_5_consonants","27187e8b":"f, ax = plt.subplots(1, 5, figsize=(16, 8))\nax = ax.flatten()\n\nfor i in range(5):\n    ax[i].imshow(image_from_char(top_5_consonants['component'].iloc[i]), cmap='Greys')","6b779a00":"train_df_ = train_df_.drop(['grapheme'], axis=1, inplace=False)","65ff005f":"train_df_[['grapheme_root', 'vowel_diacritic', 'consonant_diacritic']] = train_df_[['grapheme_root', 'vowel_diacritic', 'consonant_diacritic']].astype('uint8')","26567abd":"IMG_SIZE=64\nN_CHANNELS=1","67ffae6b":"def resize(df, size=64, need_progress_bar=True):\n    resized = {}\n    resize_size=64\n    if need_progress_bar:\n        for i in tqdm(range(df.shape[0])):\n            image=df.loc[df.index[i]].values.reshape(137,236)\n            _, thresh = cv2.threshold(image, 30, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)\n            contours, _ = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[-2:]\n\n            idx = 0 \n            ls_xmin = []\n            ls_ymin = []\n            ls_xmax = []\n            ls_ymax = []\n            for cnt in contours:\n                idx += 1\n                x,y,w,h = cv2.boundingRect(cnt)\n                ls_xmin.append(x)\n                ls_ymin.append(y)\n                ls_xmax.append(x + w)\n                ls_ymax.append(y + h)\n            xmin = min(ls_xmin)\n            ymin = min(ls_ymin)\n            xmax = max(ls_xmax)\n            ymax = max(ls_ymax)\n\n            roi = image[ymin:ymax,xmin:xmax]\n            resized_roi = cv2.resize(roi, (resize_size, resize_size),interpolation=cv2.INTER_AREA)\n            resized[df.index[i]] = resized_roi.reshape(-1)\n    else:\n        for i in range(df.shape[0]):\n            #image = cv2.resize(df.loc[df.index[i]].values.reshape(137,236),(size,size),None,fx=0.5,fy=0.5,interpolation=cv2.INTER_AREA)\n            image=df.loc[df.index[i]].values.reshape(137,236)\n            _, thresh = cv2.threshold(image, 30, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)\n            contours, _ = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)[-2:]\n\n            idx = 0 \n            ls_xmin = []\n            ls_ymin = []\n            ls_xmax = []\n            ls_ymax = []\n            for cnt in contours:\n                idx += 1\n                x,y,w,h = cv2.boundingRect(cnt)\n                ls_xmin.append(x)\n                ls_ymin.append(y)\n                ls_xmax.append(x + w)\n                ls_ymax.append(y + h)\n            xmin = min(ls_xmin)\n            ymin = min(ls_ymin)\n            xmax = max(ls_xmax)\n            ymax = max(ls_ymax)\n\n            roi = image[ymin:ymax,xmin:xmax]\n            resized_roi = cv2.resize(roi, (resize_size, resize_size),interpolation=cv2.INTER_AREA)\n            resized[df.index[i]] = resized_roi.reshape(-1)\n    resized = pd.DataFrame(resized).T\n    return resized","a7a9e162":"def get_dummies(df):\n    cols = []\n    for col in df:\n        cols.append(pd.get_dummies(df[col].astype(str)))\n    return pd.concat(cols, axis=1)","ce34ce1d":"# helper for mixup\ndef get_rand_bbox(width, height, l):\n    r_x = np.random.randint(width)\n    r_y = np.random.randint(height)\n    r_l = np.sqrt(1 - l)\n    r_w = np.int(width * r_l)\n    r_h = np.int(height * r_l)\n    return r_x, r_y, r_l, r_w, r_h\n\n# custom image data generator\nclass MultiOutputDataGenerator(keras.preprocessing.image.ImageDataGenerator):\n    # custom image generator\n    def __init__(self, featurewise_center = False, samplewise_center = False, \n                 featurewise_std_normalization = False, samplewise_std_normalization = False, \n                 zca_whitening = False, zca_epsilon = 1e-06, rotation_range = 0.0, width_shift_range = 0.0, \n                 height_shift_range = 0.0, brightness_range = None, shear_range = 0.0, zoom_range = 0.0, \n                 channel_shift_range = 0.0, fill_mode = 'nearest', cval = 0.0, horizontal_flip = False, \n                 vertical_flip = False, rescale = None, preprocessing_function = None, data_format = None, validation_split = 0.0, \n                 mix_up_alpha = 0.0, cutmix_alpha = 0.0): # additional class argument\n    \n        # parent's constructor\n        super().__init__(featurewise_center, samplewise_center, featurewise_std_normalization, samplewise_std_normalization, \n                         zca_whitening, zca_epsilon, rotation_range, width_shift_range, height_shift_range, brightness_range, \n                         shear_range, zoom_range, channel_shift_range, fill_mode, cval, horizontal_flip, vertical_flip, rescale, \n                         preprocessing_function, data_format, validation_split)\n\n        # Mix-up\n        assert mix_up_alpha >= 0.0\n        self.mix_up_alpha = mix_up_alpha\n        \n        # Cutmix\n        assert cutmix_alpha >= 0.0\n        self.cutmix_alpha = cutmix_alpha\n\n    def mix_up(self, X1, y1, X2, y2, ordered_outputs, target_lengths):\n        assert X1.shape[0] == y1.shape[0] == X2.shape[0] == y2.shape[0]\n        batch_size = X1.shape[0]\n        l = np.random.beta(self.mix_up_alpha, self.mix_up_alpha, batch_size)\n        X_l = l.reshape(batch_size, 1, 1, 1)\n        y_l = l.reshape(batch_size, 1)\n        X = X1 * X_l + X2 * (1-X_l)\n        target_dict = {}\n        i = 0\n        for output in ordered_outputs:\n            target_length = target_lengths[output]\n            target_dict[output] = y1[:, i: i + target_length] * y_l + y2[:, i: i + target_length] * (1 - y_l)\n            i += target_length\n        y = None\n        for output, target in target_dict.items():\n            if y is None:\n                y = target\n            else:\n                y = np.concatenate((y, target), axis=1)\n        return X, y\n    \n    def cutmix(self, X1, y1, X2, y2, ordered_outputs, target_lengths):\n        assert X1.shape[0] == y1.shape[0] == X2.shape[0] == y2.shape[0]\n        lam = np.random.beta(self.cutmix_alpha, self.cutmix_alpha)\n        width = X1.shape[1]\n        height = X1.shape[0]\n        r_x, r_y, r_l, r_w, r_h = get_rand_bbox(width, height, lam)\n        bx1 = np.clip(r_x - r_w \/\/ 2, 0, width)\n        by1 = np.clip(r_y - r_h \/\/ 2, 0, height)\n        bx2 = np.clip(r_x + r_w \/\/ 2, 0, width)\n        by2 = np.clip(r_y + r_h \/\/ 2, 0, height)\n        X1[:, bx1:bx2, by1:by2, :] = X2[:, bx1:bx2, by1:by2, :]\n        X = X1\n        target_dict = {}\n        i = 0\n        for output in ordered_outputs:\n            target_length = target_lengths[output]\n            target_dict[output] = y1[:, i: i + target_length] * lam + y2[:, i: i + target_length] * (1 - lam)\n            i += target_length\n        y = None\n        for output, target in target_dict.items():\n            if y is None:\n                y = target\n            else:\n                y = np.concatenate((y, target), axis=1)\n        return X, y\n    \n    def flow(self,\n             x,\n             y=None,\n             batch_size=32,\n             shuffle=True,\n             sample_weight=None,\n             seed=None,\n             save_to_dir=None,\n             save_prefix='',\n             save_format='png',\n             subset=None):\n        \n        # for multi-outputs\n        targets = None\n        target_lengths = {}\n        ordered_outputs = []\n        for output, target in y.items():\n            if targets is None:\n                targets = target\n            else:\n                targets = np.concatenate((targets, target), axis=1)\n            target_lengths[output] = target.shape[1]\n            ordered_outputs.append(output)\n        \n        # parent flow\n        batches = super().flow(x, targets, batch_size, shuffle, sample_weight, seed, save_to_dir, save_prefix, save_format, subset)\n        \n        # custom processing\n        while True:\n            batch_x, batch_y = next(batches)\n            \n            # mixup or cutmix\n            if (self.mix_up_alpha > 0) & (self.cutmix_alpha > 0):\n                while True:\n                    batch_x_2, batch_y_2 = next(batches)\n                    m1, m2 = batch_x.shape[0], batch_x_2.shape[0]\n                    if m1 < m2:\n                        batch_x_2 = batch_x_2[:m1]\n                        batch_y_2 = batch_y_2[:m1]\n                        break\n                    elif m1 == m2:\n                        break\n                if np.random.rand() < 0.5:\n                    batch_x, batch_y = self.mix_up(batch_x, batch_y, batch_x_2, batch_y_2, ordered_outputs, target_lengths)\n                else:\n                    batch_x, batch_y = self.cutmix(batch_x, batch_y, batch_x_2, batch_y_2, ordered_outputs, target_lengths)\n            \n                target_dict = {}\n                i = 0\n                for output in ordered_outputs:\n                    target_length = target_lengths[output]\n                    target_dict[output] = batch_y[:, i: i + target_length]\n                    i += target_length\n                    \n                yield batch_x, target_dict","eb0940df":"HEIGHT = 137\nWIDTH = 236","d43c8256":"i = 0 # example\ntrain_df = pd.merge(pd.read_parquet(f'\/kaggle\/input\/bengaliai-cv19\/train_image_data_{i}.parquet'), train_df_, on='image_id').drop(['image_id'], axis=1)\n\n# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=3, ncols=4, figsize=(16, 8))\ncount=0\nfor row in ax:\n    for col in row:\n        col.imshow(resize(train_df.drop(['grapheme_root', 'vowel_diacritic', 'consonant_diacritic'], axis=1).iloc[[count]], need_progress_bar=False).values.reshape(-1).reshape(IMG_SIZE, IMG_SIZE).astype(np.float64))\n        count += 1\nplt.show()\n\nX_train = train_df.drop(['grapheme_root', 'vowel_diacritic', 'consonant_diacritic'], axis=1)\nX_train = resize(X_train)\/255\n\n# CNN takes images in shape `(batch_size, h, w, channels)`, so reshape the images\nX_train = X_train.values.reshape(-1, IMG_SIZE, IMG_SIZE, N_CHANNELS)\n\nY_train_root = pd.get_dummies(train_df['grapheme_root']).values\nY_train_vowel = pd.get_dummies(train_df['vowel_diacritic']).values\nY_train_consonant = pd.get_dummies(train_df['consonant_diacritic']).values\n\nprint(f'Training images: {X_train.shape}')\nprint(f'Training labels root: {Y_train_root.shape}')\nprint(f'Training labels vowel: {Y_train_vowel.shape}')\nprint(f'Training labels consonants: {Y_train_consonant.shape}')\n\n# Divide the data into training and validation set (test size was set to 0.08!)\nx_train, x_test, y_train_root, y_test_root, y_train_vowel, y_test_vowel, y_train_consonant, y_test_consonant = train_test_split(X_train, Y_train_root, Y_train_vowel, Y_train_consonant, test_size=0.10, random_state=666)\ndel train_df\ndel X_train\ndel Y_train_root, Y_train_vowel, Y_train_consonant\n\n# Data augmentation for creating more training data\ndatagen = MultiOutputDataGenerator(\n    featurewise_center=False,  # set input mean to 0 over the dataset\n    samplewise_center=False,  # set each sample mean to 0\n    featurewise_std_normalization=False,  # divide inputs by std of the dataset\n    samplewise_std_normalization=False,  # divide each input by its std\n    zca_whitening=False,  # apply ZCA whitening\n    rotation_range=16,  # randomly rotate images in the range (degrees, 0 to 180, was 8)\n    zoom_range = 0.15, # Randomly zoom image \n    width_shift_range=0.15,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.15,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=False,  # randomly flip images\n    vertical_flip=False,\n    mix_up_alpha = 0.4, \n    cutmix_alpha = 0.4)  \n\n\n# This will just calculate parameters required to augment the given data.\ndatagen.fit(x_train)","dddbac3d":"# show images\ndef show_imgs(imgs, row, col):\n    if len(imgs) != (row * col):\n        raise ValueError(\"Invalid imgs len:{} col:{} row:{}\".format(len(imgs), row, col))\n\n    fig = plt.figure(figsize=(12, 12))\n    fig.subplots_adjust(hspace=0.05, wspace=0.05)\n    for i, img in enumerate(imgs):\n        plot_num = i+1\n        ax = fig.add_subplot(row, col, plot_num, xticks=[], yticks=[])\n        ax.imshow(img)\n    plt.show()\n\n# let's have a look if our custom ImageDataGenerator works fine\nmax_img_num = 12\nimgs = []\nfor d in datagen.flow(x_train, {'dense_3': y_train_root, 'dense_4': y_train_vowel, 'dense_5': y_train_consonant}, batch_size=64):\n    # note that target_size = (height, width)\n    imgs.append(np.squeeze(d[0][0, :, :, 0].reshape(-1).reshape(1, IMG_SIZE, IMG_SIZE).astype(np.float64), axis=0))\n    if (len(imgs) % max_img_num) == 0:\n        break\nshow_imgs(imgs, row=4, col=3)","d17c7cca":"## Setup image data using our custom ImageDataGenerator","d51731f3":"Looks like it's working?","8394c8f6":"# Custom Image Generator with Mixup & Cutmix\nBasically you inherit the keras' ImageDataGenerator and add some augumentation functions within its class. Here I tried to implement both mixup and cutmix, and let either of them happen in a probabilistic manner. One difficulty here is that we need to have multi-outputs (actually three: 'grapheme_root', 'vowel_diacritic', 'consonant_diacritic'), which needs to be dealt with by passing a dictionary of those. ","79a0e1d9":"# Exploratory Data Analysis\nExploratory data analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods.","a76aa263":"### Top 5 Vowel Diacritic in taining data","452fbe01":"Let's apply some image processing (credits: [this kernel](https:\/\/www.kaggle.com\/shawon10\/bangla-graphemes-image-processing-deep-cnn)) while resizing the images, which will center crop the region of interest from the original images.","e0865235":"It has been discussed that **mixup\/cutmix** works really well in this competition. As I haven't seen an implementation of those in **Keras**, I tried to implement them for myself. I am a beginner for this sort of image processings so you may want to refine my code for your practical use:)","4e52fc67":"### Most used top 10 Grapheme Roots in training set","a232ec94":"### Number of unique values","f2f0b581":"## Visualize some examples with mixup or cutmix augumentation","9412d473":"### Top 5 Consonant Diacritic in training data","6775a901":"### Least used 10 Grapheme Roots in training set"}}