{"cell_type":{"acd81a91":"code","0d2a5f1e":"code","0db5c202":"code","504ad425":"code","18f1be3f":"code","c6080d23":"code","7856583f":"code","ef33a84d":"code","eaeb3921":"code","c05bd0f7":"code","389556bc":"code","ead29ca0":"code","3e3fe372":"code","7ffcb47c":"code","8292fb2e":"code","082dd68f":"code","0915bafd":"code","4ddb6fc3":"code","2b19f89e":"code","8f7370fc":"code","5d11a972":"code","92afa937":"code","6cf0d4b0":"markdown"},"source":{"acd81a91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os \n\n########################\n# contacts epxloration #\n########################\n\n# import\ndf = pd.read_csv('..\/input\/Pokemon.csv', encoding = \"ISO-8859-1\")\n\n# understand df\ndf.shape\ndf.describe()\n","0d2a5f1e":"df.head()","0db5c202":"df.info()\ndf.columns\n\n","504ad425":"# drop id row\ndf = df.drop('#', axis = 1)\ndf = df.drop(['Sp. Atk', 'Sp. Def'], axis = 1)\n# check for missing\ndf.isnull().sum()\n             ","18f1be3f":"# create feature Is two Types\ndef set_dual_type(row):\n    if type(row['Type 2']) == str:\n        return 1\n    else:\n        return 0\n    \ndf['dual_type'] = df.apply(lambda row: bool(set_dual_type(row)), axis=1)       \n        ","c6080d23":"# Univariate Plots\nfig, axes = plt.subplots(nrows=2, ncols=2)\nsns.distplot(df['HP'], norm_hist=False, kde=True, bins=30, ax=axes[0,0]).set(xlabel='HP', ylabel='Count')\nsns.distplot(df['Attack'], norm_hist=False, kde=True, bins=30, ax=axes[0,1]).set(xlabel='Atk', ylabel='Count')\nsns.distplot(df['Defense'], norm_hist=False, kde=True, bins=30, ax=axes[1,0]).set(xlabel='Dfn', ylabel='Count')\nsns.distplot(df['Speed'], norm_hist=False, kde=True, bins=30, ax=axes[1,1]).set(xlabel='Spd', ylabel='Count')\n\n","7856583f":"fig, axes = plt.subplots(nrows=2, ncols=1, sharex=True)\nsns.countplot(df['Type 1'], ax=axes[0])\nsns.countplot(df['Type 2'], ax = axes[1])\n","ef33a84d":"\nsns.countplot(df['Generation'])\n","eaeb3921":"\n#bivariate plots\nsns.jointplot(x='Attack', y='Defense', data=df)\n","c05bd0f7":"sns.jointplot(x='HP', y='Defense', data=df, kind = 'hex')\n","389556bc":"sns.jointplot(x='Speed', y='Attack', data=df, kind = 'kde')\n","ead29ca0":"\n# facets\ng = sns.FacetGrid(df, row=\"Generation\", col=\"dual_type\", margin_titles=True)\ng.map(sns.regplot, \"Attack\", \"Defense\", color=\".3\", fit_reg=False, x_jitter=.1);\n","3e3fe372":"\n#pair plot\ndf_subset = df.drop(['Name', 'Type 1', 'Type 2', 'Total', 'Generation', 'Legendary', 'dual_type'], axis = 1)\npp = sns.PairGrid(df_subset)\npp.map_diag(sns.kdeplot)\npp.map_offdiag(sns.kdeplot, n_levels = 6)\n","7ffcb47c":"\n# categorical bivar\nsns.catplot(x = 'Generation', y = 'Total', kind = 'swarm', data = df)\n","8292fb2e":"\nfig, axes = plt.subplots(nrows=2, ncols=1)\nsns.catplot(x=\"Type 1\", y = \"Total\", kind = 'swarm', data = df, ax = axes[0])\nsns.catplot(x=\"Type 1\", y=\"Total\", kind=\"swarm\",\n            data=df.query(\"Generation == 1\"), ax=axes[1]);\n","082dd68f":"\n      \n# Multivariate plots\nsns.catplot(x = \"Generation\", y = \"Total\", hue = \"dual_type\", kind = 'violin', split = True, data = df)\n","0915bafd":"\nsns.relplot(x=\"Attack\", y=\"Defense\", hue=\"Generation\", data=df);\n","4ddb6fc3":"\nsns.relplot(x=\"HP\", y=\"Defense\", hue=\"dual_type\", style=\"Generation\", data=df)\n","2b19f89e":"sns.relplot(x=\"Attack\", y=\"Speed\", hue=\"dual_type\", style=\"Generation\", data=df)\n","8f7370fc":"\nquery_types = ['Grass', 'Fire', 'Water']\nsns.relplot(x=\"Attack\", y=\"Defense\", hue=\"Speed\", style = \"Type 1\", data=df[df['Type 1'].isin(query_types)])\n","5d11a972":"\nsns.relplot(x=\"Attack\", y=\"Total\", kind=\"line\", ci=\"sd\", data=df)\n","92afa937":"\nsns.relplot(x=\"Attack\", y=\"Total\", kind=\"line\", hue = \"Type 1\", ci=\"sd\", data=df[df['Type 1'].isin(query_types)])","6cf0d4b0":"## One Hour Challenge\n### Using Seaborn to Perform EDA of Pokemon Stats\n\nI typically use R with ggplot to run my EDA and thought it would be nice to get some experience in python. With this\nin mind, I pulled the Pokemon stats data available here to get some practice through a one hour project. Goals are to\nperform univariate, bivariate, and multivariate visual exploration of of the data set to mine for whatever trend might \nbe apparent. I've found open-ended and short time-framed projects like this really help focus on one or two specific\nskills or tools. So  here we go.. \n\nMy comments will be missing for the most part as I ran through these in a stream-of-conscious type style without concern for\ndocumentation. Just looking to put in the hour to get a better feel of using Seaborn. <(^.^)>"}}