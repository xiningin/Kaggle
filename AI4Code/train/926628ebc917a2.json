{"cell_type":{"5a14f952":"code","f5893bda":"code","536bf299":"code","a9d64d11":"code","cdc23297":"code","4b0ad8fa":"code","1feeea4d":"code","e6741f29":"code","6209eef8":"code","def0900b":"code","d5d9bf6e":"code","6a8c36b7":"code","574d650c":"code","23d36007":"code","e48cdfa8":"code","7b5b9b13":"code","d65e2b32":"code","4a305e70":"code","19f588ac":"code","23df1e63":"code","861ce941":"code","bab6f24a":"code","4789c8e6":"code","06ab9977":"code","37ae2bcb":"code","501fce76":"code","3db49139":"code","3346832c":"code","d3aea6de":"code","336625be":"code","02400a6c":"code","747562d1":"code","bf1cc136":"code","0e59dc30":"code","e573f224":"code","6e65a118":"code","99306ad8":"code","92887c89":"code","4934923f":"code","4f734981":"code","b3bf6001":"code","dc58d6a5":"code","534bf8d2":"code","360041c3":"code","7c893f27":"code","be0d4af9":"code","119a09c7":"code","cf375e13":"code","9c04e807":"code","88c230a0":"code","adfe6a80":"code","aa0d0754":"code","15184cd7":"code","cdbc4fa8":"code","0e708f39":"code","da65c544":"code","c6266cec":"code","69fa5298":"code","757b1d5e":"code","50eb0702":"code","662cffb3":"code","b8bcea96":"code","ee035827":"code","978d79fd":"code","6288553e":"code","fced44af":"code","def7a592":"code","d2f808c1":"code","035fa36e":"code","450d2021":"code","d5d58c0d":"code","20f0c6f7":"code","12f9d1b1":"code","639fc982":"code","c4c6ba27":"code","60ada287":"code","372d94d5":"markdown","7f10e606":"markdown","3a07b3bf":"markdown","c023f76b":"markdown","13e1d12d":"markdown","f852d4fb":"markdown","28032786":"markdown","d6a17814":"markdown","eb8a391f":"markdown","5797e5bd":"markdown","9a581abc":"markdown","f1d2e42a":"markdown","394cac39":"markdown","97d4c10c":"markdown","2433c897":"markdown","a79180f4":"markdown","384dffb8":"markdown","6f962efb":"markdown","925e1dd5":"markdown","3ac4ae32":"markdown","086a9b8a":"markdown","f534e9b8":"markdown","0e308900":"markdown"},"source":{"5a14f952":"import warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f5893bda":"path = \"..\/input\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv\"","536bf299":"warnings.filterwarnings('ignore')","a9d64d11":"df = pd.read_csv(path,  parse_dates = [\"Customer Since\", \"M-Y\"], low_memory = False, na_values = [\"NaN\", 'NaT', ' -   '])","cdc23297":"pd.set_option('display.max_columns', None)","4b0ad8fa":"df.head(5)","1feeea4d":"df.tail(5)","e6741f29":"len(df)","6209eef8":"df.info()","def0900b":"df.columns","d5d9bf6e":"drop_columns_0 = df.columns[-5:]\ndrop_columns_0","6a8c36b7":"df.drop(drop_columns_0, axis = 1, inplace = True)","574d650c":"drop_columns_1 = [\"item_id\", \"created_at\", \"increment_id\", \"sales_commission_code\", \"Working Date\" , \"BI Status\" , \"Year\", \"Month\", \"FY\"]","23d36007":"df.drop(drop_columns_1, axis = 1, inplace = True)","e48cdfa8":"df = df[['Customer ID', 'sku', 'category_name_1', 'status', 'qty_ordered',  'price', 'grand_total',\n       'discount_amount', ' MV ', 'payment_method', 'Customer Since', 'M-Y']]","7b5b9b13":"missing = pd.DataFrame(df.isnull().sum())\nmissing.transpose()","d65e2b32":"total_missing_values = df.isnull().sum().sum()\ntotal_missing_values","4a305e70":"df.dropna(axis = 0, how = 'any', inplace = True)","19f588ac":"#Checking again for missing values\nmissing = pd.DataFrame(df.isnull().sum())\nmissing.transpose()","23df1e63":"total_missing_values = df.isnull().sum().sum()\ntotal_missing_values","861ce941":"df.head(5)","bab6f24a":"df[' MV '].isnull().sum()#.sum()","4789c8e6":"# Extract Year\ndf['Year'] = df['M-Y'].apply(lambda x: int(x.year)) \n\n# Extract Month\ndf['Month'] = df['M-Y'].apply(lambda x: int(x.month)) \n\ndf.drop('M-Y', axis = 1, inplace = True)","06ab9977":"df[df['qty_ordered'] == 0]['qty_ordered'].value_counts()","37ae2bcb":"df[df['price'] == 0]['price'].value_counts()","501fce76":"df[df[' MV '] == '0'][' MV '].value_counts()","3db49139":"df[df['grand_total'] == 0]['grand_total'].value_counts()","3346832c":"#found 9465 cells containing 0.0\n#replace 0.0 from corresponding values of ' MV ' column","d3aea6de":"def replace_zeros(x, y):\n    if x == 0:\n        return y\n    else: \n        return x","336625be":"df.columns","02400a6c":"df['grand_total'] = df.apply(lambda z: replace_zeros(z['grand_total'], z[' MV ']), axis = 1)","747562d1":"#Checking again\ndf[df['grand_total'] == 0]['grand_total'].value_counts()","bf1cc136":"df.head(5)","0e59dc30":"len(df)","e573f224":"unique_customers = df['Customer ID'].nunique()\nunique_customers","6e65a118":"frequent_customers = len(df['Customer ID']) - unique_customers \nfrequent_customers","99306ad8":"unique_customer_IDs = df['Customer ID'].unique().tolist()\nprint(len(unique_customer_IDs))\n#unique_customer_IDs","92887c89":"frequent_customers_IDs = df[\"Customer ID\"][df[\"Customer ID\"].duplicated(keep = 'first')] #use keep = 'firts' or keep = 'last' #it drops duplicates and keeps only one\n#frequent_customers_IDs[91500]\n#frequent_customers_IDs\nprint(len(frequent_customers_IDs))","4934923f":"plt.figure(figsize = (8, 4))\n\nvalues = [frequent_customers, unique_customers]\nlabels = ['Frequent Customers', 'Unique Customers']\n\n# Label distance: gives the space between labels and the center of the pie\nplt.pie(values, \n        labels = labels, \n        labeldistance = 1.15, #Label distance: gives the space between labels and the center of the pie\n        explode = (0, 0.1), #only explode the first\n        wedgeprops = { 'linewidth' : 1, 'edgecolor' : 'black'},#\n        autopct = '%1.2f%%',\n        shadow = True, \n        startangle = 90)\n\nplt.legend(labels, loc = \"right\")\nplt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle\nplt.tight_layout()\nplt.show()","4f734981":"no_of_product_categories = df['category_name_1'].nunique()\nno_of_product_categories","b3bf6001":"fig, ax = plt.subplots(figsize=(16, 8))\n\n# add the plot\nsns.barplot(x = 'category_name_1', y = 'price', data = df, capsize = 0.001, ax = ax).set(title = 'Product Categories Vs Av. Price')\n\n# add the annotation\nax.bar_label(ax.containers[-1], fmt = 'Mean:\\n%.2f', label_type = 'edge')\n\n# add Labels\nax.set(xlabel = 'Product Categories')\nax.set(ylabel = 'Price')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\n\nplt.show()","dc58d6a5":"df['price'].max()","534bf8d2":"df[df['price'] == 1012625.9][['category_name_1', 'sku', 'price']]","360041c3":"df['Year'].value_counts()","7c893f27":"cat_year_wise = pd.crosstab(df.category_name_1, df.Year)\ncat_year_wise","be0d4af9":"#cat_year_wise.idxmax()\n\nprint(\"Best Selling Categories Year wise:\\n\", cat_year_wise.idxmax())","119a09c7":"#df['category_name_1'].value_counts().idxmax()\n\nprint(\"Overall Best Selling Category from 2016 to 2018 is:\", df['category_name_1'].value_counts().idxmax())","cf375e13":"fig, ax = plt.subplots(figsize=(16, 6))\n\n# add the plot\nsns.countplot(x = 'category_name_1', data = df, hue = 'Year').set(title = 'Product Categories Vs Count')\n\n# add Labels\nax.set(xlabel = 'Product Categories')\nax.set(ylabel = 'Count')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\n\nplt.show()","9c04e807":"#Count of orders per status\ndf['status'].value_counts()","88c230a0":"#Total No. of Status\ndf['status'].nunique()","adfe6a80":"#status Names\ndf['status'].unique()","aa0d0754":"cat_status_wise = pd.crosstab(df.category_name_1, df.status)\n#cat_status_wise","15184cd7":"cat_status_wise['Categories'] = cat_status_wise.index\ncat_status_wise.reset_index(drop = True)\ncat_status_wise","cdbc4fa8":"#Order Cancellation\nfig, ax = plt.subplots(figsize=(15, 6))\n\n# add the plot\nsns.barplot(x = 'Categories', y = 'canceled', data = cat_status_wise, capsize = 0.001, ax = ax,  \n            order = cat_status_wise.sort_values('canceled', ascending = False).Categories).set(title = 'Order Cancellations per Category')\n\n# add the annotation\nax.bar_label(ax.containers[-1], fmt = '\\n%.0f', label_type = 'edge')\n\n# add Labels\nax.set(xlabel = 'Product Categories')\nax.set(ylabel = 'Cancellation')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\nplt.tight_layout()\nplt.show()","0e708f39":"#Highest Order Refunded\nfig, ax = plt.subplots(figsize=(15, 6))\n\n# add the plot\nsns.barplot(x = 'Categories', y = 'order_refunded', data = cat_status_wise, capsize = 0.001, ax = ax, \n            order = cat_status_wise.sort_values('order_refunded', ascending = False).Categories).set(title = 'Orders Refunded per Category')\n\n# add the annotation\nax.bar_label(ax.containers[-1], fmt = '\\n%.0f', label_type = 'edge')\n\n# add Labels\nax.set(xlabel = 'Product Categories')\nax.set(ylabel = 'Cancellation')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\nplt.tight_layout()\nplt.show()","da65c544":"#Most Ordered Product\ndf['sku'].value_counts().idxmax()","c6266cec":"#Top 10 Most Sold Products from 2016-2018\nmost_sold = pd.DataFrame(df['sku'].value_counts())\ntop_10_most_sold = most_sold[0:10]\ntop_10_most_sold['Top 10 Most Ordered Products'] = top_10_most_sold.index\ntop_10_most_sold.reset_index(drop = True)\ntop_10_most_sold.columns = ['Count', 'Top 10 Most Ordered Products'] #Renaming Columns\ntop_10_most_sold","69fa5298":"fig, ax = plt.subplots(figsize=(10, 5))\n\nsns.barplot(x = top_10_most_sold['Top 10 Most Ordered Products'], y = top_10_most_sold['Count'], data = top_10_most_sold)\n\n# add Labels\nax.set(xlabel = \"Top 10 Most Ordered Products\")\nax.set(ylabel = 'Count')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\nplt.tight_layout()\nplt.show()\n","757b1d5e":"sku_by_year = pd.crosstab(df.sku, df.Year)\nsku_by_year.sort_values(by = 2016, ascending = False)","50eb0702":"#Most Ordered Product in 2016\nsku_by_year[2016].idxmax()","662cffb3":"#Most Ordered Product in 2017\nsku_by_year[2017].idxmax()","b8bcea96":"#Most Ordered Product in 2018\nsku_by_year[2018].idxmax()","ee035827":"#Most Ordered Product Each Year\nsku_by_year = pd.crosstab(df.sku, df.Year).idxmax()\nsku_by_year","978d79fd":"#Highest Orders Each Year\nby_year = df.groupby(\"Year\").count()['sku']#.idxmax().max()\nby_year","6288553e":"#print(plt.style.available)","fced44af":"plt.style.use('ggplot')\nby_year.plot.bar()\nplt.title('No. of Orders per Year')\nplt.show()","def7a592":"sku = pd.DataFrame(df[['sku', 'Year', 'qty_ordered']])\nsku","d2f808c1":"#Highest qty_ordered Each Year\nby_sku = sku.groupby('Year').sum()\nby_sku","035fa36e":"#plt.style.use('fivethirtyeight')\nplt.style.use('seaborn-pastel')\nby_sku.plot.bar()\nplt.title('Qty\/items Ordered per Year')\nplt.show()","450d2021":"df_sku_year = pd.DataFrame(df[['sku', 'Year', 'qty_ordered']])\ndf_sku_year","d5d58c0d":"df_sku_year.info()","20f0c6f7":"df_sku_year['Year'] = df_sku_year['Year'].apply(lambda x: str(x))","12f9d1b1":"type(df_sku_year['Year'][0])","639fc982":"df_sku_year.info()","c4c6ba27":"#pd.set_option('display.max_rows', None)\nsku_year = df_sku_year.groupby(['sku', 'Year']).sum().sort_values(by = ['qty_ordered', 'Year'], ascending = False).head(16).reset_index()\nsku_year","60ada287":"fig, ax = plt.subplots(figsize = (10, 8))\n\nsns.barplot(x = 'sku', y = 'qty_ordered', hue = 'Year', data = sku_year)\n\n# add labels\nax.set(xlabel = 'Products Qty Ordered')\nax.set(ylabel = 'Count')\nax.set_xticklabels(ax.get_xticklabels(), rotation = 30, horizontalalignment = 'right')\nplt.tight_layout()\nplt.show()","372d94d5":"#### Check For Missing Data","7f10e606":"## 1 (c) Highest Order Refunded per Category","3a07b3bf":"### Plot Product Categories with Av. Price Per Category","c023f76b":"# Product Categories","13e1d12d":"#### Droping Columns \"items_id\", \"created_at\", \"increment_id\", \"sales_commission_code\", \"Working Date\" , \"BI Status\" , \"Year\", \"Month\", \"FY\"","f852d4fb":"##### IDs of Unique and Frequent Customers","28032786":"#### Yearly Best Seller Category","d6a17814":"### Re arranging Columns","eb8a391f":"# Highest Price of Product, Name and Category","5797e5bd":"### Droping off Un-necessary Columns","9a581abc":"#### Droping Columns = ['Unnamed: 21', 'Unnamed: 22', 'Unnamed: 23', 'Unnamed: 24', 'Unnamed: 25']","f1d2e42a":"# 1 (e) Most Qty of Products Ordered","394cac39":"## 1 (d) Most Orders for Product and Top 10 Most Orders for Products","97d4c10c":"## DataFrame Without 0(Zeros) and Null Values","2433c897":"## 1 (a) Best Seller Category Yearly","a79180f4":"#### Total No. of Orders Per Year","384dffb8":"# Question 1: Best Selling Category","6f962efb":"# Returning Customers or Customers Who Brought Items Frequently","925e1dd5":"### Looking for 0 (zeros) in integer or float value columns","3ac4ae32":"### Extract Year and Month from 'M-Y' Column","086a9b8a":"### Droping off Missing Values Rows","f534e9b8":"##### Count of unique and frequent customers","0e308900":"## 1 (b) Highest Order Cancellation per Category"}}