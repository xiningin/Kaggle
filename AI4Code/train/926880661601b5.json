{"cell_type":{"4246359b":"code","08f677f1":"code","fd27bbd7":"code","0e4bb559":"markdown","21f91466":"markdown","3727b34a":"markdown","0cd569d4":"markdown"},"source":{"4246359b":"\"\"\"\nNotebook from: http:\/\/jakevdp.github.io\/blog\/2012\/10\/07\/xkcd-style-plots-in-matplotlib\/\nXKCD plot generator\n-------------------\nAuthor: Jake Vanderplas\n\nThis is a script that will take any matplotlib line diagram, and convert it\nto an XKCD-style plot.  It will work for plots with line & text elements,\nincluding axes labels and titles (but not axes tick labels).\n\nThe idea for this comes from work by Damon McDougall\n  http:\/\/www.mail-archive.com\/matplotlib-users@lists.sourceforge.net\/msg25499.html\n\"\"\"\n\n#copy this whole cell as is\nimport numpy as np\nimport pylab as pl\nfrom scipy import interpolate, signal\nimport matplotlib.font_manager as fm\n\n\n# We need a special font for the code below.  It can be downloaded this way:\nimport os\nfrom urllib.request import urlopen\nif not os.path.exists('Humor-Sans.ttf'):\n    fhandle = urlopen('http:\/\/antiyawn.com\/uploads\/Humor-Sans-1.0.ttf')\n    open('Humor-Sans.ttf', 'wb').write(fhandle.read())\n    \ndef xkcd_line(x, y, xlim=None, ylim=None,\n              mag=1.0, f1=30, f2=0.05, f3=15):\n    \"\"\"\n    Mimic a hand-drawn line from (x, y) data\n\n    Parameters\n    ----------\n    x, y : array_like\n        arrays to be modified\n    xlim, ylim : data range\n        the assumed plot range for the modification.  If not specified,\n        they will be guessed from the  data\n    mag : float\n        magnitude of distortions\n    f1, f2, f3 : int, float, int\n        filtering parameters.  f1 gives the size of the window, f2 gives\n        the high-frequency cutoff, f3 gives the size of the filter\n    \n    Returns\n    -------\n    x, y : ndarrays\n        The modified lines\n    \"\"\"\n    x = np.asarray(x)\n    y = np.asarray(y)\n    \n    # get limits for rescaling\n    if xlim is None:\n        xlim = (x.min(), x.max())\n    if ylim is None:\n        ylim = (y.min(), y.max())\n\n    if xlim[1] == xlim[0]:\n        xlim = ylim\n        \n    if ylim[1] == ylim[0]:\n        ylim = xlim\n\n    # scale the data\n    x_scaled = (x - xlim[0]) * 1. \/ (xlim[1] - xlim[0])\n    y_scaled = (y - ylim[0]) * 1. \/ (ylim[1] - ylim[0])\n\n    # compute the total distance along the path\n    dx = x_scaled[1:] - x_scaled[:-1]\n    dy = y_scaled[1:] - y_scaled[:-1]\n    dist_tot = np.sum(np.sqrt(dx * dx + dy * dy))\n\n    # number of interpolated points is proportional to the distance\n    Nu = int(200 * dist_tot)\n    u = np.arange(-1, Nu + 1) * 1. \/ (Nu - 1)\n\n    # interpolate curve at sampled points\n    k = min(3, len(x) - 1)\n    res = interpolate.splprep([x_scaled, y_scaled], s=0, k=k)\n    x_int, y_int = interpolate.splev(u, res[0]) \n\n    # we'll perturb perpendicular to the drawn line\n    dx = x_int[2:] - x_int[:-2]\n    dy = y_int[2:] - y_int[:-2]\n    dist = np.sqrt(dx * dx + dy * dy)\n\n    # create a filtered perturbation\n    coeffs = mag * np.random.normal(0, 0.01, len(x_int) - 2)\n    b = signal.firwin(f1, f2 * dist_tot, window=('kaiser', f3))\n    response = signal.lfilter(b, 1, coeffs)\n\n    x_int[1:-1] += response * dy \/ dist\n    y_int[1:-1] += response * dx \/ dist\n\n    # un-scale data\n    x_int = x_int[1:-1] * (xlim[1] - xlim[0]) + xlim[0]\n    y_int = y_int[1:-1] * (ylim[1] - ylim[0]) + ylim[0]\n    \n    return x_int, y_int\n\n\ndef XKCDify(ax, mag=1.0,\n            f1=50, f2=0.01, f3=15,\n            bgcolor='w',\n            xaxis_loc=None,\n            yaxis_loc=None,\n            xaxis_arrow='+',\n            yaxis_arrow='+',\n            ax_extend=0.1,\n            expand_axes=False):\n    \"\"\"Make axis look hand-drawn\n\n    This adjusts all lines, text, legends, and axes in the figure to look\n    like xkcd plots.  Other plot elements are not modified.\n    \n    Parameters\n    ----------\n    ax : Axes instance\n        the axes to be modified.\n    mag : float\n        the magnitude of the distortion\n    f1, f2, f3 : int, float, int\n        filtering parameters.  f1 gives the size of the window, f2 gives\n        the high-frequency cutoff, f3 gives the size of the filter\n    xaxis_loc, yaxis_log : float\n        The locations to draw the x and y axes.  If not specified, they\n        will be drawn from the bottom left of the plot\n    xaxis_arrow, yaxis_arrow : str\n        where to draw arrows on the x\/y axes.  Options are '+', '-', '+-', or ''\n    ax_extend : float\n        How far (fractionally) to extend the drawn axes beyond the original\n        axes limits\n    expand_axes : bool\n        if True, then expand axes to fill the figure (useful if there is only\n        a single axes in the figure)\n    \"\"\"\n    # Get axes aspect\n    ext = ax.get_window_extent().extents\n    aspect = (ext[3] - ext[1]) \/ (ext[2] - ext[0])\n\n    xlim = ax.get_xlim()\n    ylim = ax.get_ylim()\n\n    xspan = xlim[1] - xlim[0]\n    yspan = ylim[1] - xlim[0]\n\n    xax_lim = (xlim[0] - ax_extend * xspan,\n               xlim[1] + ax_extend * xspan)\n    yax_lim = (ylim[0] - ax_extend * yspan,\n               ylim[1] + ax_extend * yspan)\n\n    if xaxis_loc is None:\n        xaxis_loc = ylim[0]\n\n    if yaxis_loc is None:\n        yaxis_loc = xlim[0]\n\n    # Draw axes\n    xaxis = pl.Line2D([xax_lim[0], xax_lim[1]], [xaxis_loc, xaxis_loc],\n                      linestyle='-', color='k')\n    yaxis = pl.Line2D([yaxis_loc, yaxis_loc], [yax_lim[0], yax_lim[1]],\n                      linestyle='-', color='k')\n\n    # Label axes3, 0.5, 'hello', fontsize=14)\n    ax.text(xax_lim[1], xaxis_loc - 0.02 * yspan, ax.get_xlabel(),\n            fontsize=14, ha='right', va='top', rotation=12)\n    ax.text(yaxis_loc - 0.02 * xspan, yax_lim[1], ax.get_ylabel(),\n            fontsize=14, ha='right', va='top', rotation=78)\n    ax.set_xlabel('')\n    ax.set_ylabel('')\n\n    # Add title\n    ax.text(0.5 * (xax_lim[1] + xax_lim[0]), yax_lim[1],\n            ax.get_title(),\n            ha='center', va='bottom', fontsize=16)\n    ax.set_title('')\n\n    Nlines = len(ax.lines)\n    lines = [xaxis, yaxis] + [ax.lines.pop(0) for i in range(Nlines)]\n\n    for line in lines:\n        x, y = line.get_data()\n\n        x_int, y_int = xkcd_line(x, y, xlim, ylim,\n                                 mag, f1, f2, f3)\n\n        # create foreground and background line\n        lw = line.get_linewidth()\n        line.set_linewidth(2 * lw)\n        line.set_data(x_int, y_int)\n\n        # don't add background line for axes\n        if (line is not xaxis) and (line is not yaxis):\n            line_bg = pl.Line2D(x_int, y_int, color=bgcolor,\n                                linewidth=8 * lw)\n\n            ax.add_line(line_bg)\n        ax.add_line(line)\n\n    # Draw arrow-heads at the end of axes lines\n    arr1 = 0.03 * np.array([-1, 0, -1])\n    arr2 = 0.02 * np.array([-1, 0, 1])\n\n    arr1[::2] += np.random.normal(0, 0.005, 2)\n    arr2[::2] += np.random.normal(0, 0.005, 2)\n\n    x, y = xaxis.get_data()\n    if '+' in str(xaxis_arrow):\n        ax.plot(x[-1] + arr1 * xspan * aspect,\n                y[-1] + arr2 * yspan,\n                color='k', lw=2)\n    if '-' in str(xaxis_arrow):\n        ax.plot(x[0] - arr1 * xspan * aspect,\n                y[0] - arr2 * yspan,\n                color='k', lw=2)\n\n    x, y = yaxis.get_data()\n    if '+' in str(yaxis_arrow):\n        ax.plot(x[-1] + arr2 * xspan * aspect,\n                y[-1] + arr1 * yspan,\n                color='k', lw=2)\n    if '-' in str(yaxis_arrow):\n        ax.plot(x[0] - arr2 * xspan * aspect,\n                y[0] - arr1 * yspan,\n                color='k', lw=2)\n\n    # Change all the fonts to humor-sans.\n    prop = fm.FontProperties(fname='Humor-Sans.ttf', size=16)\n    for text in ax.texts:\n        text.set_fontproperties(prop)\n    \n    # modify legend\n    leg = ax.get_legend()\n    if leg is not None:\n        leg.set_frame_on(False)\n        \n        for child in leg.get_children():\n            if isinstance(child, pl.Line2D):\n                x, y = child.get_data()\n                child.set_data(xkcd_line(x, y, mag=10, f1=100, f2=0.001))\n                child.set_linewidth(2 * child.get_linewidth())\n            if isinstance(child, pl.Text):\n                child.set_fontproperties(prop)\n    \n    # Set the axis limits\n    ax.set_xlim(xax_lim[0] - 0.1 * xspan,\n                xax_lim[1] + 0.1 * xspan)\n    ax.set_ylim(yax_lim[0] - 0.1 * yspan,\n                yax_lim[1] + 0.1 * yspan)\n\n    # adjust the axes\n    ax.set_xticks([])\n    ax.set_yticks([])      \n\n    if expand_axes:\n        ax.figure.set_facecolor(bgcolor)\n        ax.set_axis_off()\n        ax.set_position([0, 0, 1, 1])\n    \n    return ax\n# Some helper functions\ndef norm(x, x0, sigma):\n    return np.exp(-0.5 * (x - x0) ** 2 \/ sigma ** 2)\n\ndef sigmoid(x, x0, alpha):\n    return 1. \/ (1. + np.exp(- (x - x0) \/ alpha))\n    \n\n\n","08f677f1":"#run the code in the cell above, then modify these parts to customize your chart\n\n# Here is where you will define the lines in your chart. y1, y2 and y3 are where you will define the equations that make up your lines.\n#Add or remove lines as needed\nx = np.linspace(0, 1, 100)\ny1 = np.sqrt(norm(x, 0.7, 0.05)) + 0.2 * (1.5 - sigmoid(x, 0.8, 0.05))\n\ny2 = 0.2 * norm(x, 0.5, 0.2) + np.sqrt(norm(x, 0.6, 0.05)) + 0.1 * (1 - sigmoid(x, 0.75, 0.05))\n\ny3 = 0.05 + 1.4 * norm(x, 0.85, 0.08)\ny3[x > 0.85] = 0.05 + 1.4 * norm(x[x > 0.85], 0.85, 0.3)\n\n#here is where you set the colors for your lines\nax = pl.axes()\nax.plot(x, y1, c='gray')\nax.plot(x, y2, c='blue')\nax.plot(x, y3, c='red')\n\n#set the text that appears along your x axis\nax.text(0.3, -0.1, \"March\")\nax.text(0.6, -0.1, \"May\")\nax.text(0.8, -0.1, \"July\")\n\n#set the text here for the series labels\nax.text(0.05, 1.1, \"Watched \\nTiger King\")\nax.plot([0.15, 0.2], [1.0, 0.2], '-k', lw=0.5)\n\nax.text(0.25, 0.8, \"memes\")\nax.plot([0.32, 0.35], [0.75, 0.35], '-k', lw=0.5)\n\nax.text(0.9, 0.4, \"you can make xkcd plots in python?\")\nax.plot([1.0, 0.8], [0.55, 1.05], '-k', lw=0.5)\n\n#set the chart title here\nax.set_title(\"My excitement levels\\nin quarantine:\")\n\nax.set_xlim(0, 1)\nax.set_ylim(0, 1.5)\n\nXKCDify(ax, expand_axes=True)\n","fd27bbd7":"# More line examples\nx = np.linspace(0, 1, 100)\n#straight across\ny1 = np.linspace(0, 1, 100)\n#constant\ny2 = np.linspace(1, 1, 100)\n#spike\ny3 = np.sqrt(norm(x, 0.7, 0.05)) + 0.2 * (1.5 - sigmoid(x, 0.8, 0.05))\n\n#here is where you set the colors for your lines\nax = pl.axes()\nax.plot(x, y1, c='gray')\nax.plot(x, y2, c='blue')\nax.plot(x, y3, c='red')\n\n\n#set the text here for the series labels\nax.text(0.05, 1.1, \"constant\")\nax.text(0.25, 0.6, \"straight \\n across\")\nax.text(0.9, 0.4, \"spike\")\n\n\n#set the chart title here\nax.set_title(\"Line examples:\")\n\nax.set_xlim(0, 1)\nax.set_ylim(0, 1.5)\n\nXKCDify(ax, expand_axes=True)\n","0e4bb559":"Looking to learn Pyton or add something different to your portfolio? Here's a quick way to spruce up your charts by making them look like they're from the popular webcomic XKCD.\n\nIf you've never heard of XKCD, [go check it out](https:\/\/xkcd.com\/). It's a collection of STEM jokes, sarcasm, current events, and generally fits well into a powerpoint presentation (the highlight of some of my college classes was when the professors would sneak in a pannel that related to the coursework).\n\nCopy the code in the cell below as is into your new notebook, then copy the second cell and customize it to your liking. I used an example of how I'm spending my time in quarantine to illustrate what you can do with it.","21f91466":"# Some extra thoughts on lines\n\nThe hard part is generating different shapes for the lines, since the equations can be confusing. Here's another chart with examples of different line types:","3727b34a":"Set your parameters for your chart here:","0cd569d4":"Copy this part as is. This part creates the functions you need."}}