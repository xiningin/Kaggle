{"cell_type":{"0d30cace":"code","65bf6aab":"code","d9fc9d14":"code","4d942ff9":"code","7170eff9":"code","0c353f97":"code","347ce724":"code","6a6e88cc":"code","6b52c763":"code","d80e99bc":"code","11dec064":"code","5656cabf":"code","a5e51b59":"code","254c1334":"code","daef4da6":"code","1e2f01ec":"code","80714837":"code","5b4a2a1a":"code","57b371ba":"code","4131f769":"code","e601f84c":"code","b6e306fb":"code","8b304e2c":"code","05e9d74e":"code","d3685041":"code","46007582":"code","c75b67f8":"code","1951b0dd":"code","33aec904":"code","9596f862":"code","c3309175":"code","461b6222":"code","31bf5f67":"markdown","019abcca":"markdown","24858a74":"markdown","28de2f31":"markdown","74ac6070":"markdown","efe218fd":"markdown","b8e2cc3d":"markdown","cf94f7bd":"markdown","9bc3f43c":"markdown","4125114b":"markdown","f9d2275c":"markdown","31f229e2":"markdown","8d6f81ac":"markdown","907319be":"markdown","95f92b9e":"markdown","05bec3ed":"markdown","80f026d5":"markdown","e045e2bc":"markdown","0e06f5ee":"markdown","da7e9e92":"markdown"},"source":{"0d30cace":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65bf6aab":"import pandas as pd\nimport missingno as mno\nimport itertools\nimport numpy as np\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import MinMaxScaler\n\nsns.set()","d9fc9d14":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')\ndf.head(10)","4d942ff9":"df.shape","7170eff9":"df.duplicated().sum()   # no duplicated values","0c353f97":"df.isnull().values.any()","347ce724":"df.info()","6a6e88cc":"mno.bar(df, figsize=(10,5), fontsize=12, color='blue', sort='ascending')","6b52c763":"new_df = df.interpolate()\nnew_df.fillna(method='bfill',inplace=True)","d80e99bc":"new_df.head()","11dec064":"corr_matrix = new_df.corr()\ncorr_matrix['Potability'].sort_values(ascending=False)","5656cabf":"plt.figure(figsize=(11,11))\nmask = np.array(corr_matrix)\nmask[np.tril_indices_from(mask)] = False\nsns.heatmap(data=corr_matrix, mask=mask, square=True, annot=True)","a5e51b59":"def box_plot(df, ft):\n    df.boxplot(column=[ft])\n    plt.grid(False)\n    plt.show()","254c1334":"box_plot(new_df,'Turbidity')","daef4da6":"box_plot(new_df, 'Solids')","1e2f01ec":"def outlier(df, ft):\n    Q1 = df[ft].quantile(0.25)\n    Q3 = df[ft].quantile(0.75)\n    IQR=Q3 - Q1\n    lower_bound = Q1 -(1.5 * IQR) \n    upper_bound = Q3 +(1.5 * IQR)\n    ls = df.index[(df[ft]<lower_bound)|(df[ft]>upper_bound)]\n    return ls","80714837":"solids = new_df['Solids']\n\n# Finding outlier for the solid column\nsol_out = list(outlier(new_df,'Solids'))\n\n# Printing the outliers\nfor i in sol_out:  \n    print(solids[i], end=\" , \")","5b4a2a1a":"lst = ['Solids','Chloramines','Trihalomethanes','Turbidity','ph','Conductivity','Hardness','Sulfate','Organic_carbon']\nindex_list = []\nfor features in lst:\n    index_list.extend(outlier( new_df, features))","57b371ba":"len(index_list)","4131f769":"def remove(df, ls):         # Removing outliers from the dataset\n    ls =sorted(set(ls))\n    df=df.drop(ls)\n    return df\n\ndf_cleaned = remove(new_df, index_list)","e601f84c":"df_cleaned.shape","b6e306fb":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=new_df['Solids']))\nfig.add_trace(go.Histogram(x=df_cleaned['Solids']))\n\n# Overlay both histograms\nfig.update_layout(barmode='overlay')\n\n# Reduce opacity to see both histograms\nfig.update_traces(opacity=0.75)\nfig.show()","8b304e2c":"df_cleaned.info()","05e9d74e":"sns.pairplot(df, hue='Potability')","d3685041":"X = df_cleaned[lst]\ny = df_cleaned['Potability']","46007582":"scaler = MinMaxScaler()\nscaler.fit(X)\n\nscaled_features = scaler.transform(X)\ndf_feat = pd.DataFrame(scaled_features, columns = df_cleaned.columns[:-1])\ndf_feat.head()","c75b67f8":"X_train, X_test, y_train, y_test = train_test_split(df_feat, y, random_state=42, test_size=0.3)","1951b0dd":"models = [LinearSVC(), SVC(kernel='rbf'), KNeighborsClassifier(), RandomForestClassifier(),\n          DecisionTreeClassifier(), GaussianNB()]\nnames = ['Linear SVC','SVC', 'KNearestNeighbors', 'RandomForestClassifier', 'DecisionTree', 'GaussianNB']\nacc = []\n\nfor model in range(len(models)):\n    clf = models[model]\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    acc.append(accuracy_score(pred, y_test))\n\nmodels = {'Algorithm': names, 'Accuracy': acc}\nmodels_df = pd.DataFrame(models)\nmodels_df","33aec904":"class_names=np.array(['0','1'])\n\n# Function to plot the confusion Matrix\ndef plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = 'd' \n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","9596f862":"model_best = SVC(kernel = 'rbf')\nmodel_best.fit(X_train, y_train)","c3309175":"prediction_SVM = model_best.predict(X_test) #we predict our data test.\ncm = confusion_matrix(y_test, prediction_SVM )\nplot_confusion_matrix(cm,class_names)","461b6222":"print(\"the accuracy is : \"+str((cm[0][0]+cm[1][1]) \/ (sum(cm[0]) + sum(cm[1]))))","31bf5f67":"SVC is the best model.","019abcca":"Checking if there is any null value using .isnull() or .isna() methods","24858a74":"**Importing Libraries**","28de2f31":"Visualizing and removing outliers","74ac6070":"If anyone knows how to improve the accuracy( since it is only 66% ),please do suggest me.","efe218fd":"From the above output, we are clear that ph, Sulfate, Trihalomethanes are the columns having null values.\n\nWe can also use Missingno library to visualise null values.","b8e2cc3d":"<img src=\"https:\/\/media.istockphoto.com\/photos\/mineral-water-is-being-poured-into-glass-picture-id491962870?k=6&m=491962870&s=612x612&w=0&h=oCZyh1EKST_hoRI-x4Fh59S53JM-UTPbR7sIkvBTH-o=\" width=\"800\">","cf94f7bd":"Checking whether the ouliers that we have from the outlier function and that in the previous boxplot are similar or not","9bc3f43c":"Inferences from heatmap:\n* Solids has positive correlation.\n* Organic carbon has negative correlation.\n    ","4125114b":"So, we are clear that these ouliers are same as the ones in boxplot.\nNow find outliers for all other features and remove that from our data.","f9d2275c":"# Water Potability ","31f229e2":"From the above pair plot we can infer that the data is Overlapped,so we can't use Logistic Regression.","8d6f81ac":"Now let's look at how each attribute is correlated with 'Potability of water'.","907319be":"**Getting the dataset**","95f92b9e":"So we are having null values because the output is True.Let's see what are the columns having null values.","05bec3ed":"**Training and Finding best model**","80f026d5":"**Thank you !**","e045e2bc":"The blue histogram is the **solids** column in our data with outliers , but in our cleaned data the outliers has been removed.","0e06f5ee":"Visualizing dataset","da7e9e92":"From the above box plot, we can infer that in solids column the values above 45000 (not exactly) are the outliers for that feature."}}