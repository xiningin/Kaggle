{"cell_type":{"3d3059e6":"code","18478ff0":"code","0094d4fa":"code","84d7732e":"code","7049619c":"code","e3d50f00":"code","f8e0abc8":"code","a2c22c2d":"code","1679159e":"code","a06f6747":"code","a87b7bde":"code","37998901":"code","33542d1a":"code","252b71ca":"code","e5775328":"code","17afcdfb":"code","9ae9663f":"code","fd81a6fb":"code","28af9535":"code","3fc9e4bb":"code","f5052e64":"code","5ffdbbf5":"code","15924b4c":"code","c0889b4d":"code","c190c672":"markdown","25cfb277":"markdown","ff5d8400":"markdown","0b1d55ee":"markdown","5262e4d3":"markdown","721bab30":"markdown","c68cbbc4":"markdown","f8ced795":"markdown","6508c7c1":"markdown","733efa54":"markdown","53e0e4b5":"markdown","2fa9108f":"markdown"},"source":{"3d3059e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data viz\nimport matplotlib.pyplot as plt # data viz\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18478ff0":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head().T","0094d4fa":"data.info()","84d7732e":"data.isnull().sum()","7049619c":"plt.figure(figsize=(6,6))\nmushrooms = ['edible', 'poisonous']\ncount = [len(data[data['class']=='e']), len(data[data['class']=='p'])]\ncolors = sns.color_palette()\nplt.pie(count, labels=mushrooms, colors = colors, autopct= '%1.2f%%')\nplt.show()","e3d50f00":"data['class'].unique()\ndata['class'].value_counts()","f8e0abc8":"le = LabelEncoder()\ndt = data.apply(LabelEncoder().fit_transform)\ndt.head().T","a2c22c2d":"sns.boxplot(x='class',y='cap-shape',data=dt)","1679159e":"sns.boxplot(x='class',y='cap-surface',data=dt)","a06f6747":"sns.boxplot(x='class',y='cap-color',data=dt)","a87b7bde":"sns.boxplot(x='class',y='bruises',data=dt)","37998901":"sns.boxplot(x='class',y='odor',data=dt)","33542d1a":"sns.boxplot(x='class',y='gill-size',data=dt)","252b71ca":"sns.boxplot(x='class',y='gill-color',data=dt)","e5775328":"dt.describe()","17afcdfb":"veil = dt['veil-type'].unique()\nveil","9ae9663f":"#dt.drop('veil-type', inplace=True, axis=1)\ndt.shape\ndt.describe().T","fd81a6fb":"dt['class'].value_counts()","28af9535":"cr = dt.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(cr, annot = True)","3fc9e4bb":"x = dt.drop('class', axis=1)\ny = dt['class']","f5052e64":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 10)","5ffdbbf5":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier as GBC\nfrom sklearn.naive_bayes import GaussianNB as GNB\n\n#KNN\nknn = KNeighborsClassifier(4)\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_test)\nacc_knn = round(knn.score(x_test, y_test) * 100, 2)\n\n#SVM\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_test)\nacc_svc = round(svc.score(x_test, y_test) * 100, 2)\n\n#Gradient Boosting\ngbc = GBC()\ngbc.fit(x_train, y_train)\ny_pred = gbc.predict(x_test)\nacc_gbc = round(gbc.score(x_test, y_test) * 100, 2)\n\n#Gaussian Naive Bayes\ngnb = GNB()\ngnb.fit(x_train, y_train)\ny_pred = gnb.predict(x_test)\nacc_gnb = round(gnb.score(x_test, y_test) * 100, 2)\n\nprint(y_pred)","15924b4c":"model = pd.DataFrame({'Model' : ['KNN', 'Support Vector Machine', 'Gradient Boosting Classifier', 'Gaussian Naive Bayes'],\n                     'Score' : [acc_knn, acc_svc, acc_gbc, acc_gnb]})\nmodel.sort_values(by = 'Score', ascending = False)","c0889b4d":"gbc = GBC()\ngbc.fit(x_train, y_train)\ny_pred = gbc.predict(x_test)\nacc_gbc = round(gbc.score(x_test, y_test) * 100, 2)\nprint(y_pred)","c190c672":"# Data Preparation","25cfb277":"**Problem Statement:**\nDetermining if a mushroom is Edible or Poisonous ","ff5d8400":"# Split Data in Train and Test Set","0b1d55ee":"We can now observe the amount of outliers in each attribute.","5262e4d3":"# Detection of Outliers","721bab30":"# **EXPLORATORY DATA ANALYSIS**","c68cbbc4":"Observing the above table tells us it might be possible that veil-type has little to zero range in data. So let's check whether veil-type attribute actually has unique data or not.","f8ced795":"# Modelling the Data","6508c7c1":"# Attribute Information\nClass : Edible = e, Poisonous = p\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","733efa54":"Let's now try to find the correlations among the attributes","53e0e4b5":"Since the score table says that Gradient Boosting Classifier works the best, let's make the prediction using that and prepare the data for submission.","2fa9108f":"As suspected, there aren't any unique values. So, let's drop the attribute."}}