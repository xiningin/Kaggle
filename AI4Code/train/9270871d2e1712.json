{"cell_type":{"6a733a49":"code","8592b411":"code","1a339374":"code","93b406cf":"code","db58423a":"code","d361c2f5":"code","55849a25":"code","60d3570a":"code","642231f6":"code","4f40422b":"code","681ba68c":"code","ba80c901":"code","d652b0af":"code","74e26d19":"code","7de7869e":"code","11cb5ab5":"code","03f03f0b":"code","99ddb1b0":"code","ca9cfc39":"code","72969782":"code","bb30cb17":"code","c807682c":"code","89c1f0be":"code","d5d1d64e":"code","aa35264d":"code","aa68f99a":"code","6d5689f0":"code","6f610c9b":"code","5add2804":"code","7aeaf49f":"code","b6d1e656":"code","968f5b02":"code","cd710cfb":"code","f966b22b":"code","443a2197":"code","98ac7f69":"code","eac8fb14":"code","284d4bad":"code","9a65247c":"code","fe451876":"code","5d721359":"code","6cb836f2":"code","1ede9514":"code","87c52cb4":"code","0b905c89":"code","cd3db24d":"code","b2dcb5f4":"code","d2ab9fbf":"code","f8e2fca8":"code","ae2e42fa":"code","87381e52":"code","ab28e81d":"code","5bf8b497":"code","1e758007":"code","6f4d18cb":"code","b53d25a6":"code","c2d77a40":"code","decf4aec":"code","d50ab942":"code","1db2ef5b":"code","da4da70a":"code","64d206af":"markdown","4189d156":"markdown","7b1af9c7":"markdown","7a42a51d":"markdown","46a43718":"markdown","799ab0bb":"markdown"},"source":{"6a733a49":"import numpy as np \nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nimport matplotlib.colors as mcolors\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8592b411":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1a339374":"usa_data= pd.read_csv('\/kaggle\/input\/covid19-assignment\/07-12-2020.csv')\ncsse= pd.read_csv('\/kaggle\/input\/covid19-assignment\/csse_daily.csv')","93b406cf":"csse.info()","db58423a":"csse.head()","d361c2f5":"csse.isna().sum()","55849a25":"plt.figure(figsize=(8,6))\nsns.heatmap(csse.isna(),yticklabels=False,cbar=False,cmap='viridis');","60d3570a":"#Null value for Case-Fatality_Ratio is filled as No. of Deaths\/No. of Confirmed cases.\ncsse['Case-Fatality_Ratio']=csse.apply(lambda x: x['Deaths']\/(x['Confirmed']+1) \n                                       if np.isnan(x['Case-Fatality_Ratio']) else x['Case-Fatality_Ratio'],axis=1)","642231f6":"#Null value for Active cases is filled as Active= Confirmed-Deaths-Recovered\ncsse['Active']= csse.apply(lambda x: np.abs(x['Confirmed']-x['Deaths']-x['Recovered']) \n                                       if np.isnan(x['Active']) else x['Active'],axis=1)","4f40422b":"csse['Incidence_Rate'].fillna(0,inplace=True)","681ba68c":"csse.loc[csse['Province_State']=='Greenland','Country_Region']='Greenland'","ba80c901":"csse.isna().sum()","d652b0af":"country_wise=csse.groupby(['Country_Region'])['Confirmed','Deaths','Recovered','Active'].sum().reset_index()\ncountry_wise.head()","74e26d19":"confirm_color= 'deepskyblue'\ndeath_color='red'\nrecovered_color='limegreen'\nactive_color='grey'","7de7869e":"def plot_hbar(df, col,n,color,hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), x=col, y=\"Country_Region\",\n                 text=col, orientation='h', width=700, hover_data=hover_data,color_discrete_sequence=[color])\n    fig.update_layout(title='Total '+col+' Cases in top {} countries'.format(n), xaxis_title=\"No. of cases\", yaxis_title=\"Country Name\",\n                      yaxis_categoryorder = 'total ascending')\n    fig.show()","11cb5ab5":"plot_hbar(country_wise,'Confirmed',15,confirm_color)","03f03f0b":"plot_hbar(country_wise,'Deaths',15,death_color)","99ddb1b0":"plot_hbar(country_wise,'Recovered',15,recovered_color)","ca9cfc39":"plot_hbar(country_wise,'Active',15,active_color)","72969782":"def plot_map(df, col):\n    df = df[df[col]>0]\n    fig = px.choropleth(df, locations=\"Country_Region\", locationmode='country names', \n                        color=col, hover_name=\"Country_Region\",\n                        title=col+' Cases in the World', hover_data=[col], color_continuous_scale='Inferno_r')\n    fig.show()","bb30cb17":"plot_map(country_wise, 'Confirmed')","c807682c":"plot_map(country_wise, 'Deaths')","89c1f0be":"plot_map(country_wise,'Recovered')","d5d1d64e":"plot_map(country_wise,'Active')","aa35264d":"india_cases= csse[csse['Country_Region']=='India'].reset_index(drop=True)\nindia_cases.drop(columns=['FIPS','Admin2','Last_Update','Lat','Long_','Combined_Key'],inplace=True)\nindia_cases","aa68f99a":"india_cases['Province_State'].unique()","6d5689f0":"india_cases['Province_State'].replace('Jammu and Kashmir','Jammu & Kashmir',inplace=True)","6f610c9b":"def india_map_plot(df,col,color):\n    df_curr= df.reset_index(drop=True)\n    fig = px.choropleth(df_curr,\n                        geojson=\"https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson\",\n                        featureidkey='properties.ST_NM',\n                        locations=df['Province_State'],\n                        color=col,\n                        color_continuous_scale=color,\n                        title= col+' Cases in India'\n                       )\n    fig.update_geos(fitbounds=\"locations\", visible=False)\n    fig.show()","5add2804":"india_map_plot(india_cases,'Confirmed','viridis_r')","7aeaf49f":"india_map_plot(india_cases,'Deaths','Inferno_r')","b6d1e656":"india_map_plot(india_cases,'Recovered','magma_r')","968f5b02":"def plot_hbar_India(df, col,n,color,hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), x=col, y=\"Province_State\",\n                 text=col, orientation='h', width=700, hover_data=hover_data,color_discrete_sequence=[color])\n    fig.update_layout(title='Top {} states- '.format(n)+col, xaxis_title=\"\"+str(col), yaxis_title=\"State Name\",\n                      yaxis_categoryorder = 'total ascending')\n    fig.show()","cd710cfb":"plot_hbar_India(india_cases,'Incidence_Rate',10,'skyblue')","f966b22b":"plot_hbar_India(india_cases,'Case-Fatality_Ratio',10,'mediumvioletred')","443a2197":"plt.figure(figsize=(6,10))\nsns.barplot(x='Incidence_Rate',y='Province_State',data=india_cases.sort_values('Incidence_Rate'));","98ac7f69":"usa_state_codes = {\n    'District of Columbia' : 'dc','Mississippi': 'MS', 'Oklahoma': 'OK', \n    'Delaware': 'DE', 'Minnesota': 'MN', 'Illinois': 'IL', 'Arkansas': 'AR', \n    'New Mexico': 'NM', 'Indiana': 'IN', 'Maryland': 'MD', 'Louisiana': 'LA', \n    'Idaho': 'ID', 'Wyoming': 'WY', 'Tennessee': 'TN', 'Arizona': 'AZ', \n    'Iowa': 'IA', 'Michigan': 'MI', 'Kansas': 'KS', 'Utah': 'UT', \n    'Virginia': 'VA', 'Oregon': 'OR', 'Connecticut': 'CT', 'Montana': 'MT', \n    'California': 'CA', 'Massachusetts': 'MA', 'West Virginia': 'WV', \n    'South Carolina': 'SC', 'New Hampshire': 'NH', 'Wisconsin': 'WI',\n    'Vermont': 'VT', 'Georgia': 'GA', 'North Dakota': 'ND', \n    'Pennsylvania': 'PA', 'Florida': 'FL', 'Alaska': 'AK', 'Kentucky': 'KY', \n    'Hawaii': 'HI', 'Nebraska': 'NE', 'Missouri': 'MO', 'Ohio': 'OH', \n    'Alabama': 'AL', 'Rhode Island': 'RI', 'South Dakota': 'SD', \n    'Colorado': 'CO', 'New Jersey': 'NJ', 'Washington': 'WA', \n    'North Carolina': 'NC', 'New York': 'NY', 'Texas': 'TX', \n    'Nevada': 'NV', 'Maine': 'ME'}","eac8fb14":"list_usa_states=list(usa_state_codes.keys())","284d4bad":"usa_data.head()","9a65247c":"temp_df = pd.DataFrame(data=list_usa_states, columns=['State Names in list_usa_states'])\ndata_df = pd.DataFrame(usa_data['Province_State'].unique(), columns=['State Names in DATA'])\ntemp_df.merge(data_df,how='outer',left_on='State Names in list_usa_states',\n             right_on='State Names in DATA')","fe451876":"#Creating a column with state codes of USA which will be used for plotting Geographical plot of USA.\n\nusa_data['State_Code'] = usa_data['Province_State'].apply(lambda s: usa_state_codes[s] \n                                                              if s in usa_state_codes.keys() else 'UNKNOWN')","5d721359":"usa_data.drop(usa_data[usa_data['State_Code']=='UNKNOWN'].index,axis=0,inplace=True)","6cb836f2":"#Null values heatmap (yellow color shows null value in particular column).\nplt.figure(figsize=(8,6))\nsns.heatmap(usa_data.isna(),cmap='viridis',cbar=False,yticklabels=False);","1ede9514":"#filling null value with 0.\nusa_data['Recovered'].fillna(0,inplace=True)","87c52cb4":"def usa_map_plot(df,col,color):\n    data = [dict(type=\"choropleth\",\n                 colorscale= color,\n                 locations = df['State_Code'],\n                 z = df[col],\n                 locationmode = 'USA-states',\n                 text = df['Province_State'],\n                 marker = dict(line = dict (color = 'black',width = 1)),\n                 colorbar = dict(title = 'No. of cases')\n                )]\n\n    lyt = dict(title = str(col)+' Cases in USA',\n    geo=dict(scope=\"usa\",showlakes = True,lakecolor = 'rgb(255, 255, 255)'))\n\n    iplot(go.Figure(data=data,layout=lyt),validate=False)","0b905c89":"usa_map_plot(usa_data,'Confirmed','magma_r')","cd3db24d":"usa_map_plot(usa_data,'Deaths','RdBu_r')","b2dcb5f4":"usa_map_plot(usa_data,'Recovered','Cividis_r')","d2ab9fbf":"usa_map_plot(usa_data,'Active','Inferno_r')","f8e2fca8":"#filling null values of People_Hospitalized with 0.\n#filling null value of Hospitalization_Rate with formula of People_Hospitalized\/Confirmed Cases.\nusa_data['People_Hospitalized'].fillna(0,inplace=True)\nusa_data['Hospitalization_Rate']= usa_data.apply(lambda x: (x['People_Hospitalized']\/x['Confirmed']) \n                                                 if np.isnan(x['Hospitalization_Rate']) else x['Hospitalization_Rate'],axis=1)","ae2e42fa":"def plot_hbar_usa(df, col,n,color,hover_data=[]):\n    fig = px.bar(df.sort_values(col).tail(n), x=col, y=\"Province_State\",\n                 text=col, orientation='h', width=700, hover_data=hover_data,color_discrete_sequence=[color])\n    fig.update_layout(title=\"Top {} States- \".format(n)+str(col), xaxis_title=\"\"+str(col), yaxis_title=\"State Name\",\n                      yaxis_categoryorder = 'total ascending')\n    fig.show()","87381e52":"plot_hbar_usa(usa_data,'Incident_Rate',10,'skyblue')","ab28e81d":"plot_hbar_usa(usa_data,'People_Tested',10,'yellow')","5bf8b497":"plot_hbar_usa(usa_data,'People_Hospitalized',10,'grey')","1e758007":"plot_hbar_usa(usa_data,'Mortality_Rate',10,'brown')","6f4d18cb":"plot_hbar_usa(usa_data,'Testing_Rate',10,'green')","b53d25a6":"plt.figure(figsize=(6,15))\nsns.barplot(x='People_Tested',y='Province_State',data=usa_data.sort_values('People_Tested'));","c2d77a40":"# Only show 10 countries with the most cases, the rest are grouped into the other category\ndef top10_country(col):\n    sorted_country=country_wise.sort_values(col,ascending=False).reset_index(drop=True)\n    unique_countries = [] \n    cases = []\n    others = np.sum(sorted_country[col][10:])\n    values=[]\n\n    for i in range(len(sorted_country[col][:10])):\n        unique_countries.append(sorted_country['Country_Region'].unique()[i])\n        cases.append(sorted_country[col][i])\n\n    unique_countries.append('Others')\n    cases.append(others)\n    values.append(unique_countries)\n    values.append(cases)\n    return values","decf4aec":"def plot_pie_charts(x, y, title):\n    c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(country_wise['Country_Region'].unique()))\n    plt.figure(figsize=(8,8))\n    plt.title(title, size=20)\n    plt.pie(y, colors=c,autopct='%.2f%%',pctdistance=0.9)\n    plt.legend(x, loc='best', bbox_to_anchor=(1.5,1),fontsize=15)\n    plt.show()","d50ab942":"countries_cases= top10_country('Confirmed')\nplot_pie_charts(countries_cases[0],countries_cases[1],'Percentage of Confirmed Cases in the World')","1db2ef5b":"countries_cases= top10_country('Deaths')\nplot_pie_charts(countries_cases[0],countries_cases[1],'Percentage of Death Cases in tthe World')","da4da70a":"countries_cases= top10_country('Recovered')\nplot_pie_charts(countries_cases[0],countries_cases[1],'Percentage of Recovered Cases in the world')","64d206af":"### [Next file](https:\/\/www.kaggle.com\/ankityadav98\/assignment-file3) contains the predictions for total cases in the world \n# Thank You.","4189d156":"# INDIA Case Analysis","7b1af9c7":"# USA Case Analysis","7a42a51d":"# Pie-Charts","46a43718":"# Instructions:\n 1. Plots might take some time to load.(Because of plotly). Please wait for sometime.\n 2. If plots are not loaded then reload the workspace.\n 3. In this notebook, two datasets i.e.\n     * 07-12-2020.csv - In this dataset, data is given for USA states with various columns.\n     * csse_daily.csv - In this dataset, data is given for world with various columns.\n     \n    are used to analyze the COVID-19 situations.","799ab0bb":"**NULL values in a particular column are shown by yellow lines on the below heatmap plot.**"}}