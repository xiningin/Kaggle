{"cell_type":{"643a1a68":"code","3e8e7489":"code","3ef0ec16":"code","36ea780e":"code","0e3e90ee":"code","41baf09b":"code","0ff31e31":"code","e57125ad":"code","0fabf3a3":"code","7a5c0768":"code","1459d294":"code","82ae5eea":"code","cc059928":"code","d41f36ec":"code","4d316591":"code","9268cb09":"code","ee2fe11b":"markdown","3a0d2353":"markdown","4e248e1b":"markdown","2de38867":"markdown","2bc503dd":"markdown","c2c3decb":"markdown","a9e543b8":"markdown","d772090e":"markdown","fd89ef9e":"markdown"},"source":{"643a1a68":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import ensemble\nfrom sklearn import metrics\n\nfrom xgboost import XGBRegressor","3e8e7489":"df = pd.read_csv('..\/input\/pizza-price-prediction\/pizza_v2.csv')\ndf.head()","3ef0ec16":"# Renaming the price column\ndf.rename({'price_rupiah':'price'}, axis=1, inplace=True)\n\n# Extracting digits in price column and converting to integer\ndf.price = df.price.str.replace('Rp','').str.replace(',','').astype(int)\n\n# Extracting digits in diameter and converting to integer\ndf['diameter'] = df['diameter'].str.extract('(\\d+\\.?\\d*)').astype(float) ","36ea780e":"sns.histplot(data=df, x='price',bins=30)","0e3e90ee":"# Pizza Diameter vs mean Price\nsns.pointplot(data=df.sort_values(by='diameter'),\n              x='diameter', y='price')\nplt.xticks(rotation=90);","41baf09b":"# Price Distribution for each restaurant\nfig,ax=plt.subplots(1,2, sharey=True,figsize=(13,4))\n\nsns.violinplot(data=df, x='company', y='price',ax=ax[0],inner=\"quartile\")\nsns.boxplot(data=df, x='company', y='price',ax=ax[1])\n\nplt.tight_layout()","0ff31e31":"# Variant price range\nplt.figure(figsize=(13,3))\nsns.boxplot(data=df, x='variant', y='price')\nplt.xticks(rotation=90)\nplt.show()","e57125ad":"# topping price range\nplt.figure(figsize=(10,3))\nsns.boxplot(data=df, x='topping', y='price')\nplt.xticks(rotation=90)\nplt.show()","0fabf3a3":"map_dict = {'yes':1, 'no':0}\n\ndf['extra_cheese'] = df['extra_cheese'].map(map_dict)\ndf['extra_mushrooms'] = df['extra_mushrooms'].map(map_dict)\ndf['extra_sauce'] = df['extra_sauce'].map(map_dict)\n\ndf.head(3)","7a5c0768":"# Converting ['price','topping','variant'] into dummy variables\ndf = pd.get_dummies(df)","1459d294":"# Generating X , y\nX=df.drop('price',axis=1)\ny=df.price\n\n# Splitting into train and test sets\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, random_state=42)","82ae5eea":"y_train.hist()","cc059928":"y_train = np.log2(y_train)\ny_test = np.log2(y_test)\n\ny_train.hist()","d41f36ec":"param_grid= {'n_estimators':[2000,4000,6000],\n             'max_depth':[3,4,5,6],\n             'learning_rate':[0.01,0.1,0.2,0.3,0.5]\n}\n\ngrid = model_selection.GridSearchCV(XGBRegressor(random_state=42),\n                                    param_grid=param_grid,\n                                    scoring='r2')\n\ngrid.fit(X_train,y_train)","4d316591":"grid.best_params_","9268cb09":"y_pred = grid.predict(X_test)\n\nmae = metrics.mean_absolute_error(y_pred, y_test)\nprint(f'MAE: {mae:.5f}')\n\nrsme = metrics.mean_squared_error(y_pred, y_test, squared=False)\nprint(f'RMSE: {rsme:.5f}')\n\nr2_score = metrics.r2_score(y_pred, y_test)\nprint(f'r2 score: {r2_score:.5f}')","ee2fe11b":"# Metrics","3a0d2353":"# Encoding Categorical Data","4e248e1b":"* The target variable is right-skewed. To have a normal-shaped distribution we can use log transformation.","2de38867":"# Modeling","2bc503dd":"### Importing libraries","c2c3decb":"# Visualization","a9e543b8":"# Machine Learning for Pizza Prediction","d772090e":"##### Best parameters based on the GridSearch","fd89ef9e":"#### Simple GridSearch with 5-fold cross validation"}}