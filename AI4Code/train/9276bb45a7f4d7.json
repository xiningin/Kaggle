{"cell_type":{"5cff5763":"code","ee2ab503":"code","a69cea76":"code","8657cb7e":"code","d5e5ce80":"code","4aef73fb":"code","5d618dd6":"code","31ed49c0":"code","43a3be87":"code","ee721219":"code","b7e76d9d":"code","36bb350e":"code","10cc1c96":"code","18c12c9b":"code","17ee99af":"code","19fef3ca":"code","6b4b3af6":"code","ba150cd9":"code","2056d54f":"code","ec0ceb61":"code","b6c7a3d3":"code","eef9d756":"code","f88e6992":"code","dd9b76a8":"code","685dbfa5":"code","8a0be4a4":"code","77327a8c":"code","453a2922":"code","edcb37b7":"code","4c9ab321":"markdown","69354376":"markdown","0ac2546c":"markdown","8910536a":"markdown","0660a374":"markdown","f6f893fc":"markdown","db15d30a":"markdown","04612ffb":"markdown","2060927e":"markdown","643c191a":"markdown","9dab50e5":"markdown","812f60da":"markdown"},"source":{"5cff5763":"!pip install -q tensorflow==2.2","ee2ab503":"import os\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom transformers import TFAutoModel, AutoTokenizer\nfrom tqdm.notebook import tqdm\nfrom tokenizers import Tokenizer, models, pre_tokenizers, decoders, processors\nimport gc\nfrom tensorflow.keras.mixed_precision import experimental as mixed_precision\n\nMIX = False\n\nif MIX:\n    tf.config.optimizer.set_jit(True)\n    policy = mixed_precision.Policy('mixed_bfloat16')\n    mixed_precision.set_policy(policy)\n#     tf.config.optimizer.set_experimental_options({\"auto_mixed_precision\": True})","a69cea76":"print(tf.__version__)\nprint(transformers.__version__)","8657cb7e":"def fix_fast(ids):\n    ids2 = [xx+1 for xx in ids]\n    return [0] + ids2 +[2]\n\ndef fast_encode(texts, tokenizer, chunk_size=256, maxlen=384):\n    \"\"\"\n    https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-distilbert-with-huggingface-and-keras\n    \"\"\"\n    tokenizer.enable_truncation(max_length=maxlen)\n    tokenizer.enable_padding(max_length=maxlen)\n    all_ids = []\n    \n    for i in tqdm(range(0, len(texts), chunk_size)):\n        text_chunk = texts[i:i+chunk_size].tolist()\n        encs = tokenizer.encode_batch(text_chunk)\n        all_ids.extend([fix_fast(enc.ids) for enc in encs])\n    \n    return np.array(all_ids)","d5e5ce80":"def regular_encode(texts, tokenizer, maxlen=512):\n    enc_di = tokenizer.batch_encode_plus(\n        texts, \n        return_attention_masks=False, \n        return_token_type_ids=False,\n        pad_to_max_length=True,\n        max_length=maxlen\n    )\n    \n    return np.array(enc_di['input_ids'])","4aef73fb":"def build_xlmr(transformer, max_len=512):\n    \"\"\"\n    https:\/\/www.kaggle.com\/xhlulu\/jigsaw-tpu-distilbert-with-huggingface-and-keras\n    \"\"\"\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid', dtype='float32')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    opt = Adam(lr=1e-5)\n    if MIX:\n        opt = tf.keras.mixed_precision.experimental.LossScaleOptimizer(opt, 'dynamic')\n    model.compile(opt, loss='binary_crossentropy', metrics=[tf.keras.metrics.AUC(),'accuracy'])\n    \n    return model","5d618dd6":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","31ed49c0":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Data access\n# GCS_DS_PATH = KaggleDatasets().get_gcs_path()\n\n# Configuration\nEPOCHS = 3\nLR = 3e-4\nBATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\nif MIX:\n    BATCH_SIZE = 32 * strategy.num_replicas_in_sync\n\nprint(BATCH_SIZE)\n    \nMAX_LEN = 192\n# MODEL = '..\/input\/mlm-epoch3-ppl505'\nMODEL = '..\/input\/mlm-epoch2-ppl469' #'jplu\/tf-xlm-roberta-large'","43a3be87":"# First load the real tokenizer \ntokenizer = AutoTokenizer.from_pretrained(MODEL,use_fast=True)\n\nfrom tokenizers import SentencePieceBPETokenizer\nfast_tokenizer = SentencePieceBPETokenizer('..\/input\/mlm-epoch1-ppl583\/xlmr_vocab.json', '..\/input\/mlm-epoch1-ppl583\/xlmr_merges.txt')\n\nfast_tokenizer","ee721219":"text = \"Hello my name is Jung \u041f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0435 Voc\u00ea \u00e9 especialista? Voc\u00ea n\u00e3o pode\"\nprint(tokenizer.encode(text))\nprint(fast_tokenizer.encode(text).ids) # fast tokenizer cannot be used directly\nids2 = fix_fast(fast_tokenizer.encode(text).ids)\nprint(ids2)\nprint(len(text.split()),\n      len(tokenizer.encode(text)), \n      len(ids2))","b7e76d9d":"print(tokenizer.decode(tokenizer.encode(text)))\nprint(tokenizer.decode(ids2))","36bb350e":"train1 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-toxic-comment-train.csv\")\ntrain2 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-unintended-bias-train.csv\")\n\n# option1\ntrain2.toxic = train2.toxic.round().astype(int) \n# option2\n# train2.loc[train2.toxic >= 0.5,'toxic'] = 1\n# train2.loc[train2.toxic < .5,'toxic'] = 0\n# train2.toxic = train2.toxic.astype(int)\n\nvalid = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/validation.csv')\ntest = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')","10cc1c96":"valid = valid.sample(frac=1, random_state=0)\n\ntrain = pd.concat([\n    train1[['comment_text', 'toxic']], #.sample(n=50000, random_state=0)\n    train2[['comment_text', 'toxic']].query('toxic==1'),\n    train2[['comment_text', 'toxic']].query('toxic==0').sample(n=100000, random_state=0)\n])\nprint(train.shape)","18c12c9b":"%%time\n# x_train = np.load('\/kaggle\/input\/jigsaw20-private-data\/train_en_full2019.npz')['x'] # (1902194, 192) # from 2019 only\nx_train = np.load('\/kaggle\/input\/jigsaw20-tpu-xlm-roberta\/train_en.npz')['x'] # (1000000, 192) # from 2019 only\ny_train = np.load('\/kaggle\/input\/jigsaw20-tpu-xlm-roberta\/train_en.npz')['y'] #\nx_valid = np.load('\/kaggle\/input\/jigsaw20-tpu-xlm-roberta\/valid_en.npz')['x'] # (8000, 192)\ny_valid = np.load('\/kaggle\/input\/jigsaw20-tpu-xlm-roberta\/valid_en.npz')['y'] #\nx_test = np.load('\/kaggle\/input\/jigsaw20-tpu-xlm-roberta\/test_en.npz')['x'] # (63812, 192)\n\nprint(x_train.shape, x_valid.shape, x_test.shape)","17ee99af":"print(y_train[:5])\ny_train[y_train < 0.5] = 0\ny_train[y_train >= 0.5] = 1\ny_train = y_train.astype(np.int32)\nprint(y_train[:5], len(y_train), len(y_train[y_train == 1]))","19fef3ca":"def create_xtest_new(x_test, batch=BATCH_SIZE):\n    '''\n    Ensure that x_test_new can be divided by BATCH_SIZE\n    '''\n    orig_len = len(x_test)\n    new_len = (orig_len\/\/batch + 1)*(batch)\n    new_shape = list(x_test.shape)\n    new_shape[0] = new_len\n        \n    x_test_new = np.ones(new_shape)\n    x_test_new[:orig_len] = x_test\n    return x_test_new.astype(np.int32), orig_len","6b4b3af6":"x_test_new, orig_len = create_xtest_new(x_test, batch=BATCH_SIZE)\nprint(x_test_new.shape, orig_len)\n# print(x_test_new[-1], x_test_new[0])","ba150cd9":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .shuffle(2048)\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(BATCH_SIZE, drop_remainder=True)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test_new)\n    .batch(BATCH_SIZE)\n)","2056d54f":"wpath = '..\/input\/xlmr-test\/xlmr_large_fixed_embed.h5'","ec0ceb61":"%%time\nfrom transformers import GPT2Tokenizer, TFGPT2LMHeadModel, TFGPT2Model\ntokenizerg = GPT2Tokenizer.from_pretrained('gpt2',pad_token=' ')\ntokenizerg.save_pretrained('.')\n\nwith strategy.scope():\n    xlmr_layer = TFAutoModel.from_pretrained(MODEL, from_pt=True) #TFAutoModel.from_pretrained(MODEL)\n    xlmr_layer.layers[0].embeddings.trainable = False # add one line\n    \n    gpt2_layer = TFGPT2Model.from_pretrained('gpt2') #TFGPT2LMHeadModel.from_pretrained('gpt2-medium')\n","b6c7a3d3":"print(MODEL, wpath)","eef9d756":"from tensorflow.keras.layers import *\nfrom tensorflow.keras import Model\n\nclass XLMTransformers(tf.keras.Model):\n    def __init__(self, emb_layer, body_layer, connect_dim=None, dropout_rate=0.2, batch_size=BATCH_SIZE\/\/strategy.num_replicas_in_sync):\n        super().__init__()\n        self.emb_layer = emb_layer\n        self.body_layer = body_layer\n        self.connect_dim = connect_dim\n        \n        if self.connect_dim is None:\n            conf = self.body_layer.layers[-1].get_config()\n            # TODO : config are different for each arch, below works only for GPT2 but not Albert\n            self.connect_dim = conf['transformers_config']['n_embd'] \n\n        if self.connect_dim > 0:\n            self.connect_layer = Dense(self.connect_dim,activation='linear') # TODO : identity initializer or ?\n\n        self.pooling_layer = GlobalMaxPooling1D()\n        self.drop_layer = Dropout(dropout_rate)\n        self.pred_layer = Dense(1,activation='sigmoid')\n        \n        self.batch_size = batch_size\n        \n    def call(self, input_ids):\n        pos_ids = self.emb_layer.create_position_ids_from_input_ids(input_ids)\n        token_type_ids = tf.zeros([self.batch_size, input_ids.shape[1]])\n        \n        x = self.emb_layer([input_ids, pos_ids, token_type_ids, None])\n        if self.connect_dim > 0:\n            x = self.connect_layer(x)\n        x = self.body_layer({'input_ids':None, 'inputs_embeds':x})[0]\n        x = self.pooling_layer(x)\n        x = self.drop_layer(x)\n        x = self.pred_layer(x)\n        return x\n    \n    def predict_numpy(self, x_test, batch=BATCH_SIZE):\n        '''\n        Purpose: \n          just to make sure that x_test_new can be divided by self.batch_size\n          Currently, unusable with unknown reason\n        ''' \n        x_test_new, orig_len = create_xtest_new(x_test)\n        pred = self.predict(x_test_new.astype(np.int32), verbose=1)\n        \n        return pred[:orig_len]\n        ","f88e6992":"text = \"Hello my name is Jung \u041f\u0440\u0435\u0436\u0434\u0435 \u0432\u0441\u0435\u0433\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u0435 Voc\u00ea \u00e9 especialista? Voc\u00ea n\u00e3o pode asdf asdfljsd fj\"\nenc = tokenizer.batch_encode_plus([text], return_token_type_ids=True, return_attention_mask=False, pad_to_max_length=True)\n\nwith strategy.scope():\n    xlm_gpt2 = XLMTransformers(emb_layer = xlmr_layer.layers[0].embeddings, \n                           body_layer = gpt2_layer)\n    \n    y = xlm_gpt2(tf.constant(enc['input_ids']))\n    xlm_gpt2.compile(Adam(lr=LR), loss='binary_crossentropy', metrics=[tf.keras.metrics.AUC()])\n\nprint(y.shape)\n# xlm_gpt2.summary()\ngc.collect()","dd9b76a8":"n_steps = x_train.shape[0] \/\/ BATCH_SIZE\ntrain_history = xlm_gpt2.fit(\n    train_dataset,\n    steps_per_epoch=n_steps,\n    validation_data=valid_dataset,\n    epochs=EPOCHS\n)","685dbfa5":"xlm_gpt2.evaluate(valid_dataset) # ","8a0be4a4":"xlm_gpt2.save_weights('xlm_gpt2_small_fixed_embed_finetuned_en_only.h5')","77327a8c":"n_steps = x_valid.shape[0] \/\/ BATCH_SIZE\ntrain_history_2 = xlm_gpt2.fit(\n    valid_dataset.shuffle(2048).repeat(),\n    steps_per_epoch=n_steps,\n    epochs=EPOCHS\n)","453a2922":"## note that test_dataset contains more elements than original\npred = xlm_gpt2.predict(test_dataset, \n                        verbose=1)\nprint(pred.shape)","edcb37b7":"sub['toxic'] = pred[:orig_len]\nsub.to_csv('submission.csv', index=False)\nsub.tail()","4c9ab321":"## Load text data into memory","69354376":"## Create fast tokenizer","0ac2546c":"Now that we have pretty much saturated the learning potential of the model on english only data, we train it for one more epoch on the `validation` set, which is significantly smaller but contains a mixture of different languages.","8910536a":"## Load model into the TPU","0660a374":"## Train Model","f6f893fc":"Hi! This notebook illustrates a simple way to make a multi-language of every transformer model by simply using XLM-R embedding, and then feed to the architecture you want (i.e. GPT2 in this notebook, so that you have XLM-GPT2), and then finetune it. \n\nThis notebook is about several months ago, and use a bit dated versions of TF and Transformers, so if you use the latest version, you may need to modify the code a bit. Please see Version 12 for the acutal running :)","db15d30a":"## Helper Functions","04612ffb":"## TPU Configs","2060927e":"## Now combine everything to make XLM-GPT2 TF Model!!!","643c191a":"First, we train on the subset of the training set, which is completely in English.","9dab50e5":"## Build datasets objects","812f60da":"## Submission"}}