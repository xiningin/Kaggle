{"cell_type":{"e74e5948":"code","57bc39c9":"code","25c38351":"code","ea709c97":"code","af02fbd0":"code","31391beb":"code","c489c7b7":"code","bdd6ce74":"code","fdc05f5c":"code","37236928":"code","7941c34e":"code","8fb1bd64":"code","ffede632":"code","f03023f8":"code","b145c15c":"code","c2eff01f":"code","ba4bb568":"code","19d3e805":"code","b7720238":"code","2a059201":"code","9e38127d":"code","d4637292":"code","c7a06eb8":"code","5f41fc6c":"markdown","d1cd3cd8":"markdown","cc26ecd0":"markdown","6560653a":"markdown","6c31d61e":"markdown","17ac5b82":"markdown","159e4007":"markdown","70a1d28a":"markdown","ac193359":"markdown","916b71d3":"markdown","e0e77028":"markdown"},"source":{"e74e5948":"import numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nfrom skimage.measure import label, regionprops\nfrom itertools import combinations, product\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntest_path = data_path \/ 'test'\n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","57bc39c9":"def get_objects(task):\n    xs, ys = [], []\n    for obj in task['train']:\n        xs.append(np.array(obj['input']))\n        ys.append(np.array(obj['output']))\n    return xs, ys\n\ndef find_sub(matrix, sub, ignore = None):\n    positions = []\n    mask = sub != ignore\n    sub_ = sub[mask]\n    for x in range(matrix.shape[0]-sub.shape[0]+1):\n        for y in range(matrix.shape[1]-sub.shape[1]+1):\n            if np.array_equal(matrix[x:x+sub.shape[0], y:y+sub.shape[1]][mask], sub_):\n                positions.append((x,y,x+sub.shape[0],y+sub.shape[1]))\n    return positions\n\ndef check_subitem(task):\n    for x, y in zip(*get_objects(task)):\n        positions = find_sub(x, y)\n        if len(positions) == 0:\n            return False\n    return True\n            \ndef check_samesize(task):\n    for x,y in zip(*get_objects(task)):\n        if x.shape != y.shape:\n            return False\n    return True\n\ndef check_sub_mask(task):\n    if check_samesize(task):\n        return False\n    for x,y in zip(*get_objects(task)):\n        colors, counts = np.unique(x, return_counts=True)\n        found = 0\n        for c, area in zip(colors, counts):\n            cxs, cys = np.where(x == c)\n            xmin,ymin,xmax,ymax = min(cxs),min(cys),max(cxs)+1,max(cys)+1\n            shape = (xmax-xmin, ymax-ymin)\n            if shape == y.shape and area == np.prod(y.shape):\n                found += 1\n        if found != 1:\n            return False\n    return True\n\ndef get_cells(x, cols, rows):\n    if cols[0] != 0:\n        cols = [-1]+cols\n    if rows[0] != 0:\n        rows = [-1]+rows\n    if cols[-1] != x.shape[0]-1:\n        cols.append(x.shape[0])\n    if rows[-1] != x.shape[1]-1:\n        rows.append(x.shape[1])\n    cells = np.full((len(cols)-1, len(rows)-1), np.object)\n    for i in range(len(cols)-1):\n        for j in range(len(rows)-1):\n            cells[i][j] = x[cols[i]+1:cols[i+1], rows[j]+1:rows[j+1]]\n    return cells\n\ndef get_grid(x):\n    cols = defaultdict(list)\n    rows = defaultdict(list)\n    if x.shape[0] < 3 or x.shape[1] < 3:\n        return -1, [], []\n    for i in range(x.shape[0]):\n        if len(np.unique(x[i])) == 1:\n            cols[x[i,0]].append(i)\n    for i in range(x.shape[1]):\n        if len(np.unique(x[:,i])) == 1:\n            rows[x[0,i]].append(i)\n    for c in cols:\n        if c in rows and all(np.diff(cols[c])>1) and all(np.diff(rows[c])>1):\n            return c, cols[c], rows[c]\n    return -1, [], []\n\ndef check_grid(task):\n    for x,y in zip(*get_objects(task)):\n        color_of_grid, cols, rows = get_grid(x)\n        if color_of_grid == -1:\n            return False\n    return True","25c38351":"def mul_ratio(x, x_ratio):\n    x_shape = (x.shape[0]*x_ratio[0], x.shape[1]*x_ratio[1])\n    x_ = np.array([x[i\/\/x_ratio[0]][j\/\/x_ratio[1]] for i, j in np.ndindex(x_shape)]).reshape(x_shape)\n    return x_\n\ndef predict_transforms(xs, ys, test):\n    fn = get_transform(xs, ys)\n    if fn:\n        return [fn(test)]\n    ratio = get_ratio(xs, ys)\n    if ratio:\n        x_ratio, y_ratio = ratio\n        xs_ = []\n        ys_ = []\n        for x, y in zip(xs, ys):\n            x, y = mul_ratios(x, y, x_ratio, y_ratio)\n            xs_.append(x)\n            ys_.append(y)\n        fn = get_transform(xs_, ys_)\n        if fn:\n            test = mul_ratio(test, x_ratio)\n            return [fn(test)]\n        fns = np.full(x_ratio, np.object)\n        for i, j in np.ndindex(x_ratio):\n            ys_ = []\n            for y in ys:\n                m1 = y.shape[0]\/\/x_ratio[0]\n                m2 = y.shape[1]\/\/x_ratio[1]\n                ys_.append(y[i*m1:(i+1)*m1,j*m2:(j+1)*m2])\n            fn = get_transform(xs, ys_)\n            if fn:\n                fns[i,j] = fn\n            else:\n                return []\n        return [np.concatenate([np.concatenate([fns[i,j](test) for i in range(x_ratio[0])], axis=0) for j in range(x_ratio[1])], axis=1)]\n    return []\n\ndef predict_grid_transforms(task, test):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return predict_transforms(xs, ys, grid_filter(test))\n\ndef get_transform(xs, ys):\n    for tranform in get_all_transforms():\n        tranformed = True\n        for x, y in zip(xs, ys):\n            if tranform(x).shape != y.shape:\n                tranformed = False\n                break\n            if not np.equal(tranform(x), y).all():\n                tranformed = False\n        if tranformed:\n            return tranform\n    return None\n\ndef get_transforms(xs, ys):\n    fn = get_transform(xs, ys)\n    if fn:\n        return fn\n    ratio = get_ratio(xs, ys)\n    if ratio:\n        x_ratio, y_ratio = ratio\n        xs_ = []\n        ys_ = []\n        for x, y in zip(xs, ys):\n            x, y = mul_ratios(x, y, x_ratio, y_ratio)\n            xs_.append(x)\n            ys_.append(y)\n        fn = get_transform(xs_, ys_)\n        if fn:\n            return fn\n        fns = np.full(x_ratio, np.object)\n        for i, j in np.ndindex(x_ratio):\n            ys_ = []\n            for y in ys:\n                m1 = y.shape[0]\/\/x_ratio[0]\n                m2 = y.shape[1]\/\/x_ratio[1]\n                ys_.append(y[i*m1:(i+1)*m1,j*m2:(j+1)*m2])\n            fn = get_transform(xs, ys_)\n            if fn:\n                fns[i,j] = fn\n            else:\n                return None\n        return fns\n    return None\n\ndef check_grid_transforms(task):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return get_transforms(xs, ys) is not None\n\ndef get_mode_color(ar):\n    colors, counts = np.unique(ar, return_counts=True)\n    return colors[np.argmax(counts)]\n\ndef grid_filter(x):\n    color_of_grid, cols, rows = get_grid(x)\n    if color_of_grid == -1:\n        return x\n    cells = get_cells(x, cols, rows)\n    return np.array([get_mode_color(cell) for cell in cells.reshape(-1)]).reshape(cells.shape)\n\ndef mul_ratios(x, y, x_ratio, y_ratio):\n    x_shape = (x.shape[0]*x_ratio[0], x.shape[1]*x_ratio[1])\n    x_ = np.array([x[i\/\/x_ratio[0]][j\/\/x_ratio[1]] for i, j in np.ndindex(x_shape)]).reshape(x_shape)\n    y_shape = (y.shape[0]*y_ratio[0], y.shape[1]*y_ratio[1])\n    y_ = np.array([y[i\/\/y_ratio[0]][j\/\/y_ratio[1]] for i, j in np.ndindex(y_shape)]).reshape(y_shape)\n    return x_, y_\n\ndef get_ratio(xs, ys):\n    x_ratio = []\n    y_ratio = []\n    for i in range(2):\n        if   all(x.shape[i]%y.shape[i] == 0  for x, y in zip(xs, ys)):\n            if len(set(x.shape[i]\/\/y.shape[i] for x, y in zip(xs, ys))) == 1:\n                x_ratio.append(1)\n                y_ratio.append(xs[0].shape[i]\/\/ys[0].shape[i])\n        elif all(y.shape[i]%x.shape[i] == 0  for x, y in zip(xs, ys)):\n            if len(set(y.shape[i]\/\/x.shape[i] for x, y in zip(xs, ys))) == 1:\n                x_ratio.append(ys[0].shape[i]\/\/xs[0].shape[i])\n                y_ratio.append(1)\n    if len(x_ratio) != 2:\n        return None\n    return tuple(x_ratio), tuple(y_ratio)\n\ndef check_sub_grid_2x(task):\n    if check_samesize(task) or check_subitem(task):\n        return False\n    for x,y in zip(*get_objects(task)):\n        color_of_grid, cols, rows = get_grid(x)\n        if color_of_grid == -1:\n            return False\n        cells = grid_filter(x)\n        if (cells.shape[0]*2 != y.shape[0] or cells.shape[1]*2 != y.shape[1]):\n            return False\n    return True\n\ndef check_chess(task, input=False, output=True):\n    xs, ys = get_objects(task)\n    if input:\n        for x in xs:\n            if not has_chess(x) and not has_antichess(x):\n                return False\n    if output:\n        for y in ys:\n            if not has_chess(y) and not has_antichess(y):\n                return False\n    return True\n\ndef has_chess(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    if counts < 2:\n        return False\n    indexes = np.zeros(counts, bool)\n    for c in colors:\n        pts = np.where(g == c)\n        s = set([(x+y)%counts for x, y in zip(*pts)])\n        if len(s) > 1:\n            return False\n        index = s.pop()\n        if indexes[index]:\n            return False\n        indexes[index] = True\n    return True\n\ndef has_antichess(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    if counts < 2:\n        return False\n    indexes = np.zeros(counts, bool)\n    for c in colors:\n        pts = np.where(g == c)\n        s = set([(g.shape[0]-x+y-1)%counts for x, y in zip(*pts)])\n        if len(s) > 1:\n            return False\n        index = s.pop()\n        if indexes[index]:\n            return False\n        indexes[index] = True\n    return True\n\ndef find_colors(g):\n    colors = np.unique(g)\n    counts = len(colors)\n    for cnt in range(counts, 1, -1):\n        q_colors = np.full(cnt, -1, int)\n        for c in colors:\n            pts = np.where(g == c)\n            s = set([(x+y)%cnt for x, y in zip(*pts)])\n            if len(s) > 1:\n                continue\n            index = s.pop()\n            q_colors[index] = c\n        \n        if -1 not in q_colors:\n            return q_colors\n    return None\n\ndef predict_chess(g):\n    q_colors = find_colors(g)\n    if q_colors is None:\n        colors, counts = np.unique(g, return_counts=True)\n        q_colors = colors[np.argsort(counts)][:2]\n        \n    results = []\n    counts = len(q_colors)\n    for i in range(counts):\n        result = g.copy()\n        for x, y in np.ndindex(g.shape):\n            result[x,y] = q_colors[(x+y)%counts]\n        results.append(result)\n        q_colors = np.roll(q_colors, 1)\n    return results\n\ndef predict_transforms_grid_2x(task, test):\n    xs, ys = get_objects(task)\n    xs = [grid_filter(x) for x in xs]\n    return predict_transforms_2x(xs, ys, grid_filter(test))\n\ndef predict_transforms_2x(xs, ys, test):\n    predictions = []\n    transforms = [\n        lambda x: np.rot90(x.T, k=1),\n        lambda x: np.rot90(x.T, k=3),\n        lambda x: np.rot90(x, k=2),\n        lambda x: x,\n    ]\n    quads = [(1,3,2,0),(3,1,0,2),(2,0,1,3)] # 3 full symmetrical shapes\n    for f1,f2,f3,f4 in quads:\n        fns = np.array([[transforms[f1],transforms[f2]],[transforms[f3],transforms[f4]]])\n        x_ = np.concatenate([np.concatenate([fns[i,j](test) for i in range(2)], axis=0) for j in range(2)], axis=1)\n        predictions.append(x_)\n    return predictions\n\ndef has_repeating(g, ignore=0):\n    size0b = int(.6 * g.shape[0])\n    size1b = int(.6 * g.shape[1])\n    t = np.full((g.shape[0]+2*size0b,g.shape[1]+2*size1b), -1)\n    t[size0b:-size0b,size1b:-size1b] = g\n    t[t==ignore] = -1\n    for size0 in range(2, size0b+1):\n        for size1 in range(2, size1b+1):\n            for shift0 in range(size0):\n                for shift1 in range(size1):\n                    pattern = t[size0b+shift0:size0b+shift0+size0,size1b+shift1:size1b+shift1+size1].copy()\n                    found = True\n                    for d0 in range(size0b+shift0-size0, t.shape[0]-size0, size0):\n                        for d1 in range(size1b+shift1-size1, t.shape[1]-size1, size1):\n                            test = t[d0:d0+size0,d1:d1+size1]\n                            mask = (test != -1) & (pattern != -1)\n                            if np.array_equal(test[mask], pattern[mask]):\n                                ind = test != -1\n                                pattern[ind] = test[ind]\n                            else:\n                                found = False\n                                break\n                    if found:\n                        return shift0, shift1, pattern\n    return None\n\ndef check_repeating(task, has_complete=False):\n    patterns = []\n    for x, y in zip(*get_objects(task)):\n        if len(np.unique(x)) < 3 or not has_repeating(y,-1):\n            return False\n        result = None\n        for c in np.unique(x):\n#             if c not in np.unique(y):\n            result = has_repeating(x,c)\n            if result:\n                sh0,sh1,pattern = result\n                pattern[pattern == -1] = c\n                if has_complete:\n                    pred = np.tile(pattern, (x.shape[0]\/\/pattern.shape[0]+2, x.shape[1]\/\/pattern.shape[1]+2))\n                    pred1 = pred[sh0:sh0+x.shape[0],sh1:sh1+x.shape[1]]\n                    pred2 = pred[sh0+1:sh0+1+x.shape[0],sh1:sh1+x.shape[1]]\n                    pred3 = pred[sh0:sh0+x.shape[0],sh1+1:sh1+1+x.shape[1]]\n                    if np.array_equal(pred1, y) or np.array_equal(pred2, y) or np.array_equal(pred3, y):\n                        break\n                    result = None\n                else:\n                    break\n        if not result:\n            return False\n    return True\n\ndef predict_repeating(x):\n    for c in np.unique(x):\n        result = has_repeating(x, c)\n        if result:\n            sh0,sh1,pattern = result\n            pattern[pattern == -1] = c\n            pred = np.tile(pattern, (x.shape[0]\/\/pattern.shape[0]+2, x.shape[1]\/\/pattern.shape[1]+2))\n            pred1 = pred[sh0:sh0+x.shape[0],sh1:sh1+x.shape[1]]\n            pred2 = pred[sh0+1:sh0+1+x.shape[0],sh1:sh1+x.shape[1]]\n            pred3 = pred[sh0:sh0+x.shape[0],sh1+1:sh1+1+x.shape[1]]\n            return [pred1,pred2,pred3]\n    return []\n\ndef predict_repeating_mask(x):\n    predictions = predict_repeating(x)\n    if len(predictions) > 0:\n        rows, cols = np.where(predictions[0] != x)\n        return [predictions[0][min(rows):max(rows)+1,min(cols):max(cols)+1]]\n    return []\n\ndef trim_matrix(x):\n    if len(np.unique(x)) == 1:\n        return x\n    for c in np.unique(x):\n        xs,ys = np.where(x!=c)\n        xmin,ymin,xmax,ymax = min(xs),min(ys),max(xs)+1,max(ys)+1\n        if xmin > 0 or ymin > 0 or xmax < x.shape[0] or ymax < x.shape[1]:\n            return x[xmin:xmax,ymin:ymax]\n    return x\n\ndef trim_matrix_box(g, mask=None):\n    if mask is None:\n        mask = np.unique(g)\n    if len(np.unique(g)) == 1:\n        return None\n    for c in mask:\n        xs,ys = np.where(g!=c)\n        xmin,ymin,xmax,ymax = min(xs),min(ys),max(xs)+1,max(ys)+1\n        if xmin > 0 or ymin > 0 or xmax < g.shape[0] or ymax < g.shape[1]:\n            return (xmin,ymin,xmax,ymax)\n    return None\n\ndef has_tiles(g, ignore=0):\n    for size0b, size1b in [(g.shape[0], int(0.6*g.shape[1])), (int(0.6*g.shape[0]), g.shape[1])]:\n        t = np.full((g.shape[0]+size0b, g.shape[1]+size1b), -1)\n        t[:-size0b,:-size1b] = g\n        t[t==ignore] = -1\n        box_trim = trim_matrix_box(g,[ignore])\n        min_size0 = 1\n        min_size1 = 1\n        if box_trim is not None and ignore != -1:\n            xmin,ymin,xmax,ymax = box_trim\n            t[xmin:xmax,ymin:ymax] = g[xmin:xmax,ymin:ymax]\n            min_size0 = xmax-xmin\n            min_size1 = ymax-ymin\n        for size0 in range(min_size0, size0b+1):\n            for size1 in range(min_size1, size1b+1):\n                pattern = t[:size0,:size1].copy()\n                found = True\n                for d0 in range(0, t.shape[0]-size0, size0):\n                    for d1 in range(0, t.shape[1]-size1, size1):\n                        test = t[d0:d0+size0,d1:d1+size1]\n                        mask = (test != -1) & (pattern != -1)\n                        if np.array_equal(test[mask], pattern[mask]):\n                            ind = test != -1\n                            pattern[ind] = test[ind]\n                        else:\n                            found = False\n                            break\n                if found:\n                    return pattern\n    return None\n\ndef roll_color(g):\n    from_values = np.unique(g)\n    to_values = np.roll(from_values, 1)\n\n    sort_idx = np.argsort(from_values)\n    idx = np.searchsorted(from_values, g, sorter = sort_idx)\n    return to_values[sort_idx][idx]\n\ndef get_all_transforms():\n    return [\n        lambda x: roll_color(x),\n        lambda x: np.roll(x, -1, axis=0),\n        lambda x: np.roll(x,  1, axis=0),\n        lambda x: np.roll(x, -1, axis=1),\n        lambda x: np.roll(x,  1, axis=1),\n        lambda x: np.rot90(x.T, k=1),\n        lambda x: np.rot90(x.T, k=2),\n        lambda x: np.rot90(x.T, k=3),\n        lambda x: np.rot90(x.T, k=4),\n        lambda x: np.rot90(x, k=1),\n        lambda x: np.rot90(x, k=2),\n        lambda x: np.rot90(x, k=3),\n        lambda x: x,\n    ]\n\ndef has_tiles_shape(g, shape, ignore=0):\n    for size0b, size1b in [(g.shape[0], int(0.6*g.shape[1])), (int(0.6*g.shape[0]), g.shape[1])]:\n        t = np.full((g.shape[0]+size0b, g.shape[1]+size1b), -1)\n        t[:-size0b,:-size1b] = g\n        t[t==ignore] = -1\n        box_trim = trim_matrix_box(g,[ignore])\n        min_size0 = 1\n        min_size1 = 1\n        if box_trim is not None and ignore != -1:\n            xmin,ymin,xmax,ymax = box_trim\n            t[xmin:xmax,ymin:ymax] = g[xmin:xmax,ymin:ymax]\n            min_size0 = xmax-xmin\n            min_size1 = ymax-ymin\n        size0 = shape[0]\n        size1 = shape[1]\n        pattern = t[:size0,:size1].copy()\n        found = True\n        for d0 in range(0, t.shape[0]-size0, size0):\n            for d1 in range(0, t.shape[1]-size1, size1):\n                test = t[d0:d0+size0,d1:d1+size1]\n                mask = (test != -1) & (pattern != -1)\n                if np.array_equal(test[mask], pattern[mask]):\n                    ind = test != -1\n                    pattern[ind] = test[ind]\n                else:\n                    found = False\n                    break\n        if found:\n            return pattern\n    return None\n\ndef check_tiles_shape(task, has_complete=0): \n    patterns = []\n    for x, y in zip(*get_objects(task)):\n        o_pattern = has_tiles(y,-1)\n        if len(np.unique(x)) < 2 or o_pattern is None:\n            return False\n        found = False\n        for c in [-1, *np.unique(x)]:\n            pattern = has_tiles_shape(x, o_pattern.shape, c)\n            if pattern is not None:\n                pattern[pattern == -1] = c\n                if has_complete:\n                    for transform in get_all_transforms():\n                        transformed_pattern = transform(pattern)\n                        pred = np.tile(transformed_pattern, (x.shape[0]\/\/transformed_pattern.shape[0]+2, x.shape[1]\/\/transformed_pattern.shape[1]+2))\n                        pred = pred[:x.shape[0],:x.shape[1]]\n                        if np.array_equal(pred, y):\n                            found = True\n                            patterns.append(pattern)\n                            break\n                else:\n                    found = True\n                    patterns.append(pattern)\n        if not found:\n            return False\n    return True\n\ndef predict_tiles_shape(task, test_input):\n    has_transforms = set()\n    has_shapes = set()\n    for x, y in zip(*get_objects(task)):\n        o_pattern = has_tiles(y,-1)\n        if len(np.unique(x)) < 2 or o_pattern is None:\n            return []\n        found = False\n        for c in [-1, *np.unique(x)]:\n            pattern = has_tiles_shape(x, o_pattern.shape, c)\n            if pattern is not None:\n                pattern[pattern == -1] = c\n                for transform in get_all_transforms():\n                    transformed_pattern = transform(pattern)\n                    pred = np.tile(transformed_pattern, (x.shape[0]\/\/transformed_pattern.shape[0]+2, x.shape[1]\/\/transformed_pattern.shape[1]+2))\n                    pred = pred[:x.shape[0],:x.shape[1]]\n                    if np.array_equal(pred, y):\n                        found = True\n                        has_transforms.add(transform)\n                        has_shapes.add(o_pattern.shape)\n                        break\n        if not found:\n            return []\n     \n    preds = []\n    for c in np.unique(test_input):\n        for shape in has_shapes:\n            pattern = has_tiles_shape(test_input, shape, c)\n            if pattern is None:\n                continue\n            pattern[pattern == -1] = c\n\n            pred = np.tile(pattern, (test_input.shape[0]\/\/pattern.shape[0]+2, test_input.shape[1]\/\/pattern.shape[1]+2))\n            for transform in has_transforms:\n                transformed_pattern = transform(pattern)\n                pred = np.tile(transformed_pattern, (test_input.shape[0]\/\/transformed_pattern.shape[0]+2, test_input.shape[1]\/\/transformed_pattern.shape[1]+2))\n                pred = pred[:test_input.shape[0],:test_input.shape[1]]\n                preds.append(pred)\n    return preds","ea709c97":"outputs = []\nsubmission = pd.read_csv(data_path\/'sample_submission.csv')\nproblems = submission['output_id'].values\nfor i in  range(len(problems)):\n    output_id = problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n        for key_task in task:\n            for obj in task[key_task]:\n                for key in obj:\n                    obj[key] = np.array(obj[key])\n    test_input = task['test'][pair_id]['input']\n    predictions = []\n    if check_sub_mask(task):\n        predictions.extend(predict_repeating_mask(test_input))\n    elif check_grid(task) and check_grid_transforms(task):\n        predictions.extend(predict_grid_transforms(task, test_input))\n    elif check_grid(task) and check_chess(task, False, True):\n        predictions.extend(predict_chess(grid_filter(test_input)))\n    elif check_grid(task) and check_sub_grid_2x(task):\n        predictions.extend(predict_transforms_grid_2x(task, test_input))\n    elif check_repeating(task, True):\n        predictions.extend(predict_repeating(test_input))\n    elif check_tiles_shape(task, True):\n        predictions.extend(predict_tiles_shape(task, test_input))\n    outputs.append(' '.join(list(set(flattener(pred.tolist()) for pred in predictions))[:3]))\nsubmission['output'] = outputs\nfinal_sub1 = submission.copy()","af02fbd0":"%%writefile main.cpp\n#include <iostream>\n#include <fstream>\n#include <array>\n#include <algorithm>\n#include <vector>\n#include <random>\n#include <sstream>\n#include <cassert>\n\nusing namespace std;\ntypedef float feature_type;\ntypedef vector<vector<int>> grid;\nstruct box {\n    int xmin = 999, ymin = 999, xmax = -999, ymax = -999;\n    double width()  const {return xmin != 999 && xmax != -999 ? xmax - xmin : 0.0;}\n    double height() const {return ymin != 999 && ymax != -999 ? ymax - ymin : 0.0;}\n    double area() const {return width()*height();}\n    double perimeter() const {return 2*(width()+height());}\n    static box grid(const grid& g) {return box{0, 0, int(g.size()), int(g[0].size())};}\n    box reshape(int t) const {return box{xmin-t, ymin-t, xmax+t, ymax+t};}\n    bool has_box(box b) const {\n        return area() > 0 && b.area() > 0 && xmin <= b.xmin && xmax >= b.xmax && ymin <= b.ymin && ymax >= b.ymax;\n    }\n    bool has_intersection(box b) const {\n        return area() > 0 && b.area() > 0 && ymin < b.ymax && ymax > b.ymin && xmin < b.xmax && xmax > b.xmin;\n    }\n    double iou(box b) const {\n        double xmaxmin = max(xmin, b.xmin);\n        double ymaxmin = max(ymin, b.ymin);\n        double xminmax = min(xmax, b.xmax);\n        double yminmax = min(ymax, b.ymax);\n        \n        bool has_inter = has_intersection(b);\n        double inter_area = has_inter ? (xminmax - xmaxmin) * (yminmax - ymaxmin) : 0.0;\n        double whole_area = area() + b.area() - inter_area;\n        return inter_area \/ whole_area;\n    }\n};\nvector<string> split(istream& ss, char sep = ' ') {\n    vector<string> output;\n    string line;\n    for (;getline(ss, line, sep);) {\n        output.emplace_back(line);\n    }\n    return output;\n}\nvector<string> split(string input, char sep = ' ') {\n    istringstream ss(input);\n    return split(ss, sep);\n}\narray<int, 10> count(const grid& g, box b) {\n    array<int, 10> result;\n    result.fill(0);\n    for (auto x = b.xmin; x < b.xmax; ++x)\n        for (auto y = b.ymin; y < b.ymax; ++y)\n            ++result[g[x][y]];\n    return result;\n}\narray<int, 10> count(const grid& g) {\n    return count(g, box::grid(g));\n}\nbool has_vertical_symmetry(const grid& g, box b) {\n    for (int x = b.xmin; x<b.xmax; ++x)\n        for (int dy = 0; dy < (b.ymax-b.ymin)\/2; ++dy) {\n            if (g[x][b.ymin+dy] != g[x][b.ymax-dy-1])\n                return false;\n        }\n    return true;\n}\nbool has_horizontal_symmetry(const grid& g, box b) {\n    for (int y = b.ymin; y < b.ymax; ++y)\n        for (int dx = 0; dx < (b.xmax-b.xmin)\/2; ++dx) {\n            if (g[b.xmin+dx][y] != g[b.xmax-dx-1][y])\n                return false;\n        }\n    return true;\n}\nbool has_frame(const grid& g, box b, bool unique_frame = false) {\n    vector<int> cs;\n    int mx = int(g.size()), my = int(g[0].size());\n    int xmin_ = max(0, b.xmin), xmax_ = min(b.xmax, mx);\n    int ymin_ = max(0, b.ymin), ymax_ = min(b.ymax, my);\n    if (b.xmin == xmin_)\n        for (int y = ymin_; y < ymax_; ++y)\n            cs.emplace_back(g[b.xmin][y]);\n    if (b.xmax == xmax_)\n        for (int y = ymin_; y < ymax_; ++y)\n            cs.emplace_back(g[b.xmax-1][y]);\n    if (b.ymin == ymin_)\n        for (int x = xmin_; x < xmax_; ++x)\n            cs.emplace_back(g[x][b.ymin]);\n    if (b.ymax == ymax_)\n        for (int x = xmin_; x < xmax_; ++x)\n            cs.emplace_back(g[x][b.ymax-1]);\n    for (int i = 1; i < cs.size(); ++i)\n        if (cs[i] != cs[i-1])\n            return false;\n    if (unique_frame && !cs.empty())\n        for (int x = max(0, b.xmin+1); x < min(b.xmax-1, mx); ++x)\n            for (int y = max(0, b.ymin+1); y < min(b.ymax-1, my); ++y)\n                if (g[x][y] == cs[0])\n                    return false;\n    return true;\n}\nint cnt_strime(const grid& g, box b) {\n    int n = 0;\n    int mx = int(g.size()), my = int(g[0].size());\n    if (b.xmin >= b.xmax || b.ymin >= b.ymax)\n        return n;\n    int xmin_ = max(0, b.xmin), xmax_ = min(b.xmax, mx);\n    int ymin_ = max(0, b.ymin), ymax_ = min(b.ymax, my);\n    if (b.xmin == xmin_ && ymax_ - ymin_ > 1) {\n        ++n;\n        for (int y = ymin_+1; y < ymax_; ++y)\n            if (g[b.xmin][y-1] != g[b.xmin][y]) {\n                --n;\n                break;\n            }\n    }\n    if (b.xmax == xmax_ && ymax_ - ymin_ > 1) {\n        ++n;\n        for (int y = ymin_+1; y < ymax_; ++y)\n            if (g[b.xmax-1][y-1] != g[b.xmax-1][y]) {\n                --n;\n                break;\n            }\n    }\n    if (b.ymin == ymin_ && xmax_ - xmin_ > 1) {\n        ++n;\n        for (int x = xmin_+1; x < xmax_; ++x)\n            if (g[x-1][b.ymin] != g[x][b.ymin]) {\n                --n;\n                break;\n            }\n    }\n    if (b.ymax == ymax_ && xmax_ - xmin_ > 1) {\n        ++n;\n        for (int x = xmin_+1; x < xmax_; ++x)\n            if (g[x-1][b.ymax-1] != g[x][b.ymax-1]) {\n                --n;\n                break;\n            }\n    }\n    return n;\n}\nbool is_same_box(const grid& g, box l, box r) {\n    for (int dx = 0; dx < l.width(); ++dx)\n        for (int dy = 0; dy < l.height(); ++dy)\n            if (g[l.xmin+dx][l.ymin+dy] != g[r.xmin+dx][r.ymin+dy])\n                return false;\n    return true;\n}\nint cnt_same_boxes(const grid& g, box b) {\n    int n = 0;\n    int width = b.width();\n    int height = b.height();\n    for (int x = 0; x < g.size() - width; ++x)\n        for (int y = 0; y < g[0].size() - height; ++y) {\n            if (is_same_box(g, b, {x, y, width, height}))\n                ++n;\n        }\n    return n;\n}\narray<box, 10> get_boxes_of_colors(const grid& g) {\n    array<box, 10> boxes;\n    for (int x = 0; x < g.size(); ++x)\n        for (int y = 0; y < g[0].size(); ++y) {\n            int c = g[x][y];\n            boxes[c].xmin = min(boxes[c].xmin, x);\n            boxes[c].ymin = min(boxes[c].ymin, y);\n            boxes[c].xmax = max(boxes[c].xmax, x+1);\n            boxes[c].ymax = max(boxes[c].ymax, y+1);\n        }\n    return boxes;\n}\narray<box, 10> get_boxes_of_colors_inverse(const grid& g) {\n    array<box, 10> boxes;\n    for (int x = 0; x < g.size(); ++x)\n        for (int y = 0; y < g[0].size(); ++y) {\n            for (int c = 0; c < 10; ++c) if (c != g[x][y]) {\n                boxes[c].xmin = min(boxes[c].xmin, x);\n                boxes[c].ymin = min(boxes[c].ymin, y);\n                boxes[c].xmax = max(boxes[c].xmax, x+1);\n                boxes[c].ymax = max(boxes[c].ymax, y+1);\n            }\n        }\n    return boxes;\n}\nvoid boxes_features(vector<feature_type>& row, box l, box r) {\n\/\/    row.emplace_back(l.area()\/r.area());\n\/\/    row.emplace_back(l.iou(r));\n    row.emplace_back(l.iou(r) > 0.99);\n}\nvector<int> get_colors(const grid& g, const array<box, 10>& boxes_of_colors, box bx) {\n    vector<int> colors;\n    auto cnt_colors = count(g, bx);\n    auto all_colors = count(g);\n    int used_color = -1;\n    int used_color2 = -1;\n    for (int  c = 9; c >= 0; --c) {\n        if (used_color != -1 && cnt_colors[c] > 0) {\n            used_color2 = c;\n            break;\n        }\n        if (used_color == -1 && cnt_colors[c] > 0) {\n            used_color = c;\n        }\n    }\n    int gr_percent = used_color;\n    int gr_area_not_black = used_color;\n    int gr_area = used_color;\n    int ls_area = used_color;\n    int gr_iou = used_color;\n    for (int c = 0; c < 10; ++c) {\n\/\/        colors.emplace_back(c);\n        if (cnt_colors[gr_percent] \/ float(all_colors[gr_percent]) < cnt_colors[c] \/ float(all_colors[c]))\n            gr_percent = c;\n        if (boxes_of_colors[gr_area].area() < boxes_of_colors[c].area())\n            gr_area = c;\n        if (c != 0 && boxes_of_colors[gr_area_not_black].area() < boxes_of_colors[c].area())\n            gr_area_not_black = c;\n        if (boxes_of_colors[c].area() > 0 && boxes_of_colors[ls_area].area() > boxes_of_colors[c].area())\n            ls_area = c;\n        if (boxes_of_colors[gr_iou].iou(bx) < boxes_of_colors[c].iou(bx))\n            gr_iou = c;\n    }\n    int gr_area2 = gr_area == used_color ? used_color2 : used_color;\n    for (int c = 0; c < 10; ++c) {\n        if (c != gr_area && boxes_of_colors[gr_area2].area() < boxes_of_colors[c].area())\n            gr_area2 = c;\n    }\n    colors.emplace_back(gr_percent);        \/\/ 0\n    colors.emplace_back(gr_area_not_black); \/\/ 1\n    colors.emplace_back(gr_area);           \/\/ 2\n    colors.emplace_back(gr_area2);          \/\/ 3\n    colors.emplace_back(ls_area);           \/\/ 4\n    colors.emplace_back(gr_iou);            \/\/ 5\n    \n    return colors;\n}\nvector<feature_type> make_feature(const grid& g, const array<box, 10>& boxes_of_colors, const box bx) {\n    vector<feature_type> row;\n    row.emplace_back(bx.xmin);\n    row.emplace_back(bx.ymin);\n    row.emplace_back(bx.xmax);\n    row.emplace_back(bx.ymax);\n    \n    auto ibx = box::grid(g);\n    \n    int has_boxes = 0;\n    int in_boxes = 0;\n    auto boxes_of_colors_inverse = get_boxes_of_colors_inverse(g);\n    for (auto c : get_colors(g, boxes_of_colors, bx)) {\n        boxes_features(row, bx, boxes_of_colors[c]);\n        boxes_features(row, bx, boxes_of_colors_inverse[c]);\n        boxes_features(row, bx.reshape(1), boxes_of_colors[c]);\n        boxes_features(row, bx.reshape(1), boxes_of_colors_inverse[c]);\n    }\n    auto cnt_colors = count(g, bx);\n    int ucnt_colors = 0;\n    for (int c = 0; c < 10; ++c) {\n        ucnt_colors += cnt_colors[c] > 0;\n        has_boxes += bx.has_box(boxes_of_colors[c]);\n        in_boxes += boxes_of_colors[c].has_box(bx);\n    }\n    \n    boxes_features(row, bx, ibx);\n    bool has_frame_ = has_frame(g, bx);\n    bool has_frame_1 = has_frame(g, bx.reshape(1));\n\/\/    bool has_frame_m1 = has_frame(g, bx.reshape(-1));\n    int cnt_trime_ = cnt_strime(g, bx);\n    row.emplace_back(cnt_same_boxes(g, bx));\n    row.emplace_back(has_frame_ ? cnt_same_boxes(g, bx) : 0);\n    row.emplace_back(cnt_trime_ == 0 ? cnt_same_boxes(g, bx) : 0);\n    row.emplace_back(has_vertical_symmetry(g, bx));\n    row.emplace_back(has_horizontal_symmetry(g, bx));\n\n    row.emplace_back(ucnt_colors);\n    row.emplace_back(has_boxes);\n    row.emplace_back(in_boxes);\n    row.emplace_back(has_frame(g, bx, true));\n    row.emplace_back(has_frame(g, bx.reshape(1), true));\n    row.emplace_back(has_frame_);\n    row.emplace_back(has_frame_1);\n\/\/    row.emplace_back(has_frame_m1);\n    row.emplace_back(has_frame_1 || has_frame_);\n    row.emplace_back(has_frame_1 && has_frame_);\n    row.emplace_back(has_frame_1 == has_frame_);\n    row.emplace_back(bx.width());\n    row.emplace_back(bx.height());\n    row.emplace_back(bx.area());\n    row.emplace_back(cnt_trime_);\n    row.emplace_back(cnt_strime(g, bx.reshape(1)));\n    row.emplace_back(cnt_strime(g, bx.reshape(-1)));\n    \n\/\/    row.emplace_back(perimeter);\n    return row;\n}\nstring get_columns() {\n    stringstream ss;\n    ss << \"xmin\" << \"\\t\";\n    ss << \"ymin\" << \"\\t\";\n    ss << \"xmax\" << \"\\t\";\n    ss << \"ymax\" << \"\\t\";\n    for (int i = 0; i < 7; ++i) {\n        for (int j = 0; j < 1 + 3*(i < 6); ++j) {\n\/\/            ss << \"[\" << i << j << \"] div_areas\" << \"\\t\";\n\/\/            ss << \"[\" << i << j << \"] iou\" << \"\\t\";\n            ss << \"[\" << i << j << \"] iou_1\" << \"\\t\";\n        }\n    }\n    ss << \"cnt_same_boxes\" << \"\\t\";\n    ss << \"cnt_same_boxes_w_fr\" << \"\\t\";\n    ss << \"cnt_same_boxes_wo_tr\" << \"\\t\";\n    ss << \"has_vertical_symmetry\" << \"\\t\";\n    ss << \"has_horizontal_symmetry\" << \"\\t\";\n    \n    ss << \"ucnt_colors\" << \"\\t\";\n    \n    ss << \"has_boxes\" << \"\\t\";\n    ss << \"in_boxes\" << \"\\t\";\n    ss << \"has_uframe\" << \"\\t\";\n    ss << \"has_uframe_1\" << \"\\t\";\n    ss << \"has_frame\" << \"\\t\";\n    ss << \"has_frame_1\" << \"\\t\";\n\/\/    ss << \"has_frame_1m\" << \"\\t\";\n    ss << \"has_frame_or\" << \"\\t\";\n    ss << \"has_frame_and\" << \"\\t\";\n    ss << \"has_frame_eq\" << \"\\t\";\n    ss << \"width\" << \"\\t\";\n    ss << \"height\" << \"\\t\";\n    ss << \"area\" << \"\\t\";\n    ss << \"cnt_strim\" << \"\\t\";\n    ss << \"cnt_strim_1\" << \"\\t\";\n    ss << \"cnt_strim_m1\";\n\/\/    ss << \"perimeter\";\n    return ss.str();\n}\nvoid make_features(const grid& g, ostream& out) {\n    auto boxes_of_colors = get_boxes_of_colors(g);\n    int n = 0;\n    box l = box::grid(g);\n    for (int xmin = 0; xmin < g.size(); ++xmin)\n        for (int ymin = 0; ymin < g[0].size(); ++ymin)\n            for (int xmax = xmin+1; xmax < g.size()+1; ++xmax)\n                for (int ymax = ymin+1; ymax < g[0].size()+1; ++ymax) {\n                    box r = {xmin, ymin, xmax, ymax};\n                    if (r.area() == l.area()) \/\/ || r.area() == 1) || (!has_frame(g, r) && !has_frame(g, r.reshape(1)))\n                        continue;\n                    auto row = make_feature(g, boxes_of_colors, r);\n                    out.write((char*)&row[0], row.size() * sizeof(row[0]));\n                    n += 1;\n                }\n    cout << \"rows: \" << n << endl;\n}\ninline bool exists(const std::string& name) {\n    ifstream f(name.c_str());\n    return f.good();\n}\nint main() {\n    string dir = \"jupyter\/arc\/\";\n    if (!exists(dir+\"ex.txt\"))\n        dir = \".\/\";\n    vector<grid> inputs;\n    ifstream fin(dir + \"ex.txt\");\n    ofstream fout(dir + \"features.bin\", ios::out | ios::binary);\n    ofstream fcolumns(dir + \"features.tsv\");\n    fcolumns << get_columns();\n    for (auto input: split(fin, ' ')) {\n        vector<vector<int>> g;\n        for (auto line : split(input, '|')) {\n            vector<int> row;\n            for (char& c : line)\n                row.emplace_back(c-'0');\n            g.emplace_back(row);\n        }\n        inputs.emplace_back(g);\n    }\n    cout << \"inputs: \" << inputs.size() << endl;\n    auto features = make_feature({{1}}, get_boxes_of_colors({{1}}),{0, 0, 1, 1});\n    cout << \"features: \" << features.size() << endl;\n    cout << \"columns: \" << split(get_columns(), '\\t').size() << endl;\n    assert(features.size() == split(get_columns(), '\\t').size());\n    for (auto input : inputs) {\n        cout << \"shape: \" << input.size() << \"x\" << input[0].size() << endl;\n        make_features(input, fout);\n    }\n    return 0;\n}","31391beb":"!g++ -pthread -lpthread -O3 -std=c++17 -o main main.cpp\n!.\/main","c489c7b7":"from sklearn.tree import *\nfrom sklearn import tree\nfrom sklearn.ensemble import BaggingClassifier\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport matplotlib\ndef plot_objects(objects, titles=None):\n    if titles is None:\n        titles = np.full(len(objects), '')\n    cmap = matplotlib.colors.ListedColormap(['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = matplotlib.colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, len(objects), figsize=(30,3), gridspec_kw = {'wspace':0.02, 'hspace':0.02}, squeeze=False)\n\n    for i, (obj, title) in enumerate(zip(objects, titles)):\n        obj = np.array(obj)\n        axs[0,i].grid(True,which='both',color='lightgrey', linewidth=0.5)  \n#         axs[i].axis('off')\n        shape = ' '.join(map(str, obj.shape))\n        axs[0,i].set_title(f\"{title} {shape}\")\n        axs[0,i].set_yticks([x-0.5 for x in range(1+len(obj))])\n        axs[0,i].set_xticks([x-0.5 for x in range(1+len(obj[0]))])\n        axs[0,i].set_yticklabels([])     \n        axs[0,i].set_xticklabels([])\n        axs[0,i].imshow(obj, cmap=cmap, norm=norm)\n    plt.show()\n    \ndef plot_task(task):\n    objects = []\n    titles = []\n    for key in ['train', 'test']:\n        for obj in task[key]:\n            objects.append(obj['input'])\n            titles.append(f'{key} IN')\n            if 'output' in obj:\n                objects.append(obj['output'])\n                titles.append(f'{key} OUT')\n    plot_objects(objects, titles)","bdd6ce74":"from skimage.measure import label, regionprops\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nfrom numpy import array\nimport os,json\nfrom collections import defaultdict, Counter\n\nkaggle_dir = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/'\ndata_path = Path(kaggle_dir) if os.path.exists(kaggle_dir) else Path('.\/')\ntest_path = data_path \/ 'test'\n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred\n\ndef find_sub(matrix, sub):\n    positions = []\n    for x in range(matrix.shape[0]-sub.shape[0]+1):\n        for y in range(matrix.shape[1]-sub.shape[1]+1):\n            if np.equal(matrix[x:x+sub.shape[0], y:y+sub.shape[1]], sub).all():\n                positions.append((x,y,x+sub.shape[0],y+sub.shape[1]))\n    return positions\n\ndef check_subitem(task):\n    for key in ['train', 'test']:\n        for obj in task[key]:\n            if 'output' in obj:\n                x = np.array(obj['input'])\n                y = np.array(obj['output'])\n                if len(find_sub(x, y)) == 0:\n                    return False\n    return True \n\ndef get_objects(task, has_train=True, has_test=False):\n    xs, ys = [], []\n    names = []\n    if has_train:\n        names.append('train')\n    if has_test:\n        names.append('test')\n    for key in names:\n        for obj in task[key]:\n            xs.append(np.array(obj['input']))\n            if 'output' not in obj:\n                continue\n            ys.append(np.array(obj['output']))\n    return xs, ys","fdc05f5c":"from skimage.measure import label, regionprops\ndef make_features(x, has_frame=False):\n    def short_flattener(pred):\n        str_pred = str([row for row in pred])\n        str_pred = str_pred.replace(', ', '')\n        str_pred = str_pred.replace('[[', '')\n        str_pred = str_pred.replace('][', '|')\n        str_pred = str_pred.replace(']]', '')\n        return str_pred\n    with open(\"ex.txt\", \"w\") as f:\n        f.write(short_flattener(x.tolist()))\n    !.\/main > \/dev\/null\n    columns = pd.read_csv('features.tsv', sep='\\t').columns\n    columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(col)) for col in columns]\n    df = pd.DataFrame(np.fromfile('features.bin', dtype = [(col, '<f4') for col in columns]))\n    \n    df['rps4'] = False\n    df['rps8'] = False\n    labels = label(x, background=-1, connectivity=2)+2\n    rps = regionprops(labels, cache=False)\n    for r in rps:\n        xmin, ymin, xmax, ymax = r.bbox\n        df.loc[(df['xmin']==xmin)&(df['ymin']==ymin)&(df['xmax']==xmax)&(df['ymax']==ymax), 'rps8'] = True\n    labels = label(x, background=-1, connectivity=1)+2\n    rps = regionprops(labels, cache=False)\n    for r in rps:\n        xmin, ymin, xmax, ymax = r.bbox\n        df.loc[(df['xmin']==xmin)&(df['ymin']==ymin)&(df['xmax']==xmax)&(df['ymax']==ymax), 'rps4'] = True\n    \n    if has_frame:\n        df = df[(df['has_frame']==1)|(df['has_frame_1']==1)]\n    for col in ['cnt_same_boxes', 'cnt_same_boxes_w_fr', 'cnt_same_boxes_wo_tr', 'ucnt_colors']:\n        df[f\"{col}_rank\"]  = df[col].rank(method=\"dense\")\n        df[f\"{col}_rank_\"] = df[col].rank(method=\"dense\", ascending=False)\n    for col in df.columns:\n        if 'iou' in col or col in ['has_frame', 'has_frame_1']:\n            df[f\"{col}_rank\"]  = df.groupby([col])['area'].rank(method=\"dense\")\n            df[f\"{col}_rank_\"] = df.groupby([col])['area'].rank(method=\"dense\", ascending=False)\n    return df\n\ndef predict(train, test, test_input):\n    y = train.pop('label')\n    model = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=100, random_state=4372).fit(train.drop(['xmin','ymin','xmax','ymax'], axis=1), y)\n    preds = model.predict_proba(test.drop(['xmin','ymin','xmax','ymax'], axis=1))[:,1]\n    \n    indexes = np.argsort(preds)[::-1]\n    objects,objs,titles = [],[],[]\n    for score, (xmin,ymin,xmax,ymax) in zip(preds[indexes], test[['xmin','ymin','xmax','ymax']].astype(int).values[indexes]):\n        obj = test_input[xmin:xmax,ymin:ymax]\n        str_obj = flattener(obj.tolist())\n        if str_obj not in objects:\n            objects.append(str_obj)\n            objs.append(obj)\n            titles.append(str(np.round(score, 4)))\n        if len(objects) > 10:\n            break\n    plot_objects(objs, titles) \n    return objects\n\ndef format_features(task):\n    train = []\n    for ttid, obj in enumerate(task['train']):\n        x = np.array(obj['input'])\n        y = np.array(obj['output'])\n        df = make_features(x)\n        df['label'] = False\n#         df['tid'] = ttid\n        positions = find_sub(x, y)\n        for xmin,ymin,xmax,ymax in positions:\n            df.loc[(df['xmin']==xmin)&(df['ymin']==ymin)&(df['xmax']==xmax)&(df['ymax']==ymax), 'label'] = True\n        train.append(df)\n    train = pd.concat(train).reset_index(drop=True)\n    return train","37236928":"from tqdm.auto import trange\nsubmission = pd.read_csv(data_path\/ 'sample_submission.csv')\nproblems = submission['output_id'].values\nanswers = []\nfor i in trange(len(problems)):\n    output_id = problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n   \n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n        for key_task in task:\n            for obj in task[key_task]:\n                for key in obj:\n                    obj[key] = np.array(obj[key])\n    pred = ''\n    if check_subitem(task):\n        plot_task(task)\n        test_input = np.array(task['test'][pair_id]['input'])\n        \n        test = make_features(test_input)\n        train = format_features(task)\n        preds = predict(train, test, test_input)\n        objects = []\n        for pred in preds:\n            if pred not in objects:\n                objects.append(pred)\n        pred = ' '.join(objects[0:3])\n        \n    answers.append(pred)\n    \nsubmission['output'] = answers\nfinal_sub2 = submission.copy()","7941c34e":"debug = False\nfast_submit = False","8fb1bd64":"import numpy as np\n\nfrom matplotlib import pyplot as plt\nimport matplotlib as mpl\n\n\ndef show_sample(sample):\n    \"\"\"Shows the sample with tasks and answers\"\"\"\n    print(\"Train:\")\n    for i in range(len(sample[\"train\"])):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(121)\n        ax1.matshow(np.array(sample[\"train\"][i][\"input\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        ax2 = fig.add_subplot(122)\n        ax2.matshow(np.array(sample[\"train\"][i][\"output\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        plt.show()\n\n    print(\"Test:\")\n    for i in range(len(sample[\"test\"])):\n        fig = plt.figure()\n        ax1 = fig.add_subplot(121)\n        ax1.matshow(np.array(sample[\"test\"][i][\"input\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        if \"output\" in sample[\"test\"][i]:\n            ax2 = fig.add_subplot(122)\n            ax2.matshow(np.array(sample[\"test\"][i][\"output\"]), cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n\n        plt.show()\n\n\ndef matrix2answer(array):\n    s = \"|\"\n    for i in range(array.shape[0]):\n        for j in range(array.shape[1]):\n            s = s + str(int(array[i, j]))\n        s = s + \"|\"\n    return str(s)","ffede632":"import json\nimport time\n\nimport numpy as np\n\nfrom scipy import ndimage\nfrom scipy.stats import mode\n\n\ndef find_grid(image, frame=False, possible_colors=None):\n    \"\"\"Looks for the grid in image and returns color and size\"\"\"\n    grid_color = -1\n    size = [1, 1]\n\n    if possible_colors is None:\n        possible_colors = list(range(10))\n\n    for color in possible_colors:\n        for i in range(size[0] + 1, image.shape[0] \/\/ 2 + 1):\n            if (image.shape[0] + 1) % i == 0:\n                step = (image.shape[0] + 1) \/\/ i\n                if (image[(step - 1) :: step] == color).all():\n                    size[0] = i\n                    grid_color = color\n        for i in range(size[1] + 1, image.shape[1] \/\/ 2 + 1):\n            if (image.shape[1] + 1) % i == 0:\n                step = (image.shape[1] + 1) \/\/ i\n                if (image[:, (step - 1) :: step] == color).all():\n                    size[1] = i\n                    grid_color = color\n\n    if grid_color == -1 and not frame:\n        color_candidate = image[0, 0]\n        if (\n            (image[0] == color_candidate).all()\n            and (image[-1] == color_candidate).all()\n            and (image[:, -1] == color_candidate).all()\n            and (image[:, 0] == color_candidate).all()\n        ):\n            grid_color, size, _ = find_grid(\n                image[1 : image.shape[0] - 1, 1 : image.shape[1] - 1], frame=True, possible_colors=[color_candidate]\n            )\n            return grid_color, size, frame\n        else:\n            return grid_color, size, frame\n\n    return grid_color, size, frame\n\n\ndef find_color_boundaries(array, color):\n    \"\"\"Looks for the boundaries of any color and returns them\"\"\"\n    if (array == color).any() == False:\n        return None\n    ind_0 = np.arange(array.shape[0])\n    ind_1 = np.arange(array.shape[1])\n\n    temp_0 = ind_0[(array == color).max(axis=1)]  # axis 0\n    min_0, max_0 = temp_0.min(), temp_0.max()\n\n    temp_1 = ind_1[(array == color).max(axis=0)]  # axis 1\n    min_1, max_1 = temp_1.min(), temp_1.max()\n\n    return min_0, max_0, min_1, max_1\n\n\ndef get_color_max(image, color):\n    \"\"\"Returns the part of the image inside the color boundaries\"\"\"\n    boundaries = find_color_boundaries(image, color)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_pixel(image, i, j):\n    \"\"\"Returns the pixel by coordinates\"\"\"\n    if i >= image.shape[0] or j >= image.shape[1]:\n        return 1, None\n    return 0, image[i : i + 1, j : j + 1]\n\n\ndef get_pixel_fixed(image, i):\n    return 0, np.array([[i]])\n\n\ndef get_grid(image, grid_size, cell, frame=False):\n    \"\"\" returns the particular cell form the image with grid\"\"\"\n    if frame:\n        return get_grid(image[1 : image.shape[0] - 1, 1 : image.shape[1] - 1], grid_size, cell, frame=False)\n    if cell[0] >= grid_size[0] or cell[1] >= grid_size[1]:\n        return 1, None\n    steps = ((image.shape[0] + 1) \/\/ grid_size[0], (image.shape[1] + 1) \/\/ grid_size[1])\n    block = image[steps[0] * cell[0] : steps[0] * (cell[0] + 1) - 1, steps[1] * cell[1] : steps[1] * (cell[1] + 1) - 1]\n    return 0, block\n\n\ndef get_half(image, side):\n    \"\"\" returns the half of the image\"\"\"\n    if side not in [\"l\", \"r\", \"t\", \"b\", \"long1\", \"long2\"]:\n        return 1, None\n    if side == \"l\":\n        return 0, image[:, : (image.shape[1]) \/\/ 2]\n    elif side == \"r\":\n        return 0, image[:, -((image.shape[1]) \/\/ 2) :]\n    elif side == \"b\":\n        return 0, image[-((image.shape[0]) \/\/ 2) :, :]\n    elif side == \"t\":\n        return 0, image[: (image.shape[0]) \/\/ 2, :]\n    elif side == \"long1\":\n        if image.shape[0] >= image.shape[1]:\n            return get_half(image, \"t\")\n        else:\n            return get_half(image, \"l\")\n    elif side == \"long2\":\n        if image.shape[0] >= image.shape[1]:\n            return get_half(image, \"b\")\n        else:\n            return get_half(image, \"r\")\n\n\ndef get_corner(image, side):\n    \"\"\" returns the half of the image\"\"\"\n    if side not in [\"tl\", \"tr\", \"bl\", \"br\"]:\n        return 1, None\n    size = (image.shape[0]) \/\/ 2, (image.shape[1]) \/\/ 2\n    if side == \"tl\":\n        return 0, image[size[0] :, -size[1] :]\n    if side == \"tr\":\n        return 0, image[size[0] :, : size[1]]\n    if side == \"bl\":\n        return 0, image[: -size[0], : size[1]]\n    if side == \"br\":\n        return 0, image[: -size[0], -size[1] :]\n\n\ndef get_k_part(image, num, k):\n    if image.shape[0] > image.shape[1]:\n        max_axis = 0\n        max_shape = image.shape[0]\n    else:\n        max_axis = 1\n        max_shape = image.shape[1]\n\n    if max_shape % num != 0:\n        return 1, None\n    size = max_shape \/\/ num\n\n    if max_axis == 0:\n        return 0, image[k * size : (k + 1) * size]\n    else:\n        return 0, image[:, k * size : (k + 1) * size]\n\n\ndef get_rotation(image, k):\n    return 0, np.rot90(image, k)\n\n\ndef get_transpose(image):\n    return 0, np.transpose(image)\n\n\ndef get_roll(image, shift, axis):\n    return 0, np.roll(image, shift=shift, axis=axis)\n\n\ndef get_cut_edge(image, l, r, t, b):\n    \"\"\"deletes pixels from some sided of an image\"\"\"\n    return 0, image[t : image.shape[0] - b, l : image.shape[1] - r]\n\n\ndef get_resize(image, scale):\n    \"\"\" resizes image according to scale\"\"\"\n    if isinstance(scale, int):\n        if image.shape[0] % scale != 0 or image.shape[1] % scale != 0:\n            return 1, None\n        if image.shape[0] < scale or image.shape[1] < scale:\n            return 2, None\n\n        arrays = []\n        size = image.shape[0] \/\/ scale, image.shape[1] \/\/ scale\n        for i in range(scale):\n            for j in range(scale):\n                arrays.append(image[i::scale, j::scale])\n\n        result = mode(np.stack(arrays), axis=0).mode[0]\n    else:\n        size = int(image.shape[0] \/ scale), int(image.shape[1] \/ scale)\n        result = []\n        for i in range(size[0]):\n            result.append([])\n            for j in range(size[1]):\n                result[-1].append(image[int(i * scale), int(j * scale)])\n\n        result = np.uint8(result)\n\n    return 0, result\n\n\ndef get_resize_to(image, size_x, size_y):\n    \"\"\" resizes image according to scale\"\"\"\n    scale_x = image.shape[0] \/\/ size_x\n    scale_y = image.shape[1] \/\/ size_y\n    if scale_x == 0 or scale_y == 0:\n        return 3, None\n    if image.shape[0] % scale_x != 0 or image.shape[1] % scale_y != 0:\n        return 1, None\n    if image.shape[0] < scale_x or image.shape[1] < scale_y:\n        return 2, None\n\n    arrays = []\n    for i in range(scale_x):\n        for j in range(scale_y):\n            arrays.append(image[i::scale_x, j::scale_y])\n\n    result = mode(np.stack(arrays), axis=0).mode[0]\n    if result.max() > 10:\n        print(1)\n\n    return 0, result\n\n\ndef get_reflect(image, side):\n    \"\"\" returns images generated by reflections of the input\"\"\"\n    if side not in [\"r\", \"l\", \"t\", \"b\", \"rt\", \"rb\", \"lt\", \"lb\"]:\n        return 1, None\n    try:\n        if side == \"r\":\n            result = np.zeros((image.shape[0], image.shape[1] * 2 - 1))\n            result[:, : image.shape[1]] = image\n            result[:, -image.shape[1] :] = image[:, ::-1]\n        elif side == \"l\":\n            result = np.zeros((image.shape[0], image.shape[1] * 2 - 1))\n            result[:, : image.shape[1]] = image[:, ::-1]\n            result[:, -image.shape[1] :] = image\n        elif side == \"b\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1]))\n            result[: image.shape[0], :] = image\n            result[-image.shape[0] :, :] = image[::-1]\n        elif side == \"t\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1]))\n            result[: image.shape[0], :] = image[::-1]\n            result[-image.shape[0] :, :] = image\n\n        elif side == \"rb\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image\n            result[: image.shape[0], -image.shape[1] :] = image[:, ::-1]\n            result[-image.shape[0] :, : image.shape[1]] = image[::-1, :]\n            result[-image.shape[0] :, -image.shape[1] :] = image[::-1, ::-1]\n\n        elif side == \"rt\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[::-1, :]\n            result[: image.shape[0], -image.shape[1] :] = image[::-1, ::-1]\n            result[-image.shape[0] :, : image.shape[1]] = image\n            result[-image.shape[0] :, -image.shape[1] :] = image[:, ::-1]\n\n        elif side == \"lt\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[::-1, ::-1]\n            result[: image.shape[0], -image.shape[1] :] = image[::-1, :]\n            result[-image.shape[0] :, : image.shape[1]] = image[:, ::-1]\n            result[-image.shape[0] :, -image.shape[1] :] = image\n\n        elif side == \"lb\":\n            result = np.zeros((image.shape[0] * 2 - 1, image.shape[1] * 2 - 1))\n            result[: image.shape[0], : image.shape[1]] = image[:, ::-1]\n            result[: image.shape[0], -image.shape[1] :] = image\n            result[-image.shape[0] :, : image.shape[1]] = image[::-1, ::-1]\n            result[-image.shape[0] :, -image.shape[1] :] = image[::-1, :]\n    except:\n        return 2, None\n\n    return 0, result\n\n\ndef get_color_swap(image, color_1, color_2):\n    \"\"\"swapping two colors\"\"\"\n    if not (image == color_1).any() and not (image == color_2).any():\n        return 1, None\n    result = image.copy()\n    result[image == color_1] = color_2\n    result[image == color_2] = color_1\n    return 0, result\n\n\ndef get_cut(image, x1, y1, x2, y2):\n    if x1 >= x2 or y1 >= y2:\n        return 1, None\n    else:\n        return 0, image[x1:x2, y1:y2]\n\n\ndef get_min_block(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmin(sizes) + 1\n\n    boundaries = find_color_boundaries(masks, min_n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_min_block_mask(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmin(sizes) + 1\n    return 0, masks == min_n\n\n\ndef get_max_block_mask(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    min_n = np.argmax(sizes) + 1\n    return 0, masks == min_n\n\n\ndef get_max_block(image, full=True):\n    if full:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    sizes = [(masks == i).sum() for i in range(1, n_masks + 1)]\n\n    if n_masks == 0:\n        return 2, None\n\n    max_n = np.argmax(sizes) + 1\n\n    boundaries = find_color_boundaries(masks, max_n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_block_with_side_colors(image, block_type=\"min\", structure=0):\n    if structure == 0:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n\n    if n_masks == 0:\n        return 2, None\n\n    unique_nums = []\n    for i in range(1, n_masks + 1):\n        unique = np.unique(image[masks == i])\n        unique_nums.append(len(unique))\n\n    if block_type == \"min\":\n        n = np.argmin(unique_nums) + 1\n    else:\n        n = np.argmax(unique_nums) + 1\n\n    boundaries = find_color_boundaries(masks, n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_block_with_side_colors_count(image, block_type=\"min\", structure=0):\n    if structure == 0:\n        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n    else:\n        structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]\n    masks, n_masks = ndimage.label(image, structure=structure)\n    if n_masks == 0:\n        return 2, None\n\n    unique_nums = []\n    for i in range(1, n_masks + 1):\n        unique, counts = np.unique(image[masks == i], return_counts=True)\n        unique_nums.append(min(counts))\n\n    if block_type == \"min\":\n        n = np.argmin(unique_nums) + 1\n    else:\n        n = np.argmax(unique_nums) + 1\n\n    boundaries = find_color_boundaries(masks, n)\n    if boundaries:\n        return (0, image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1])\n    else:\n        return 1, None\n\n\ndef get_color(color_dict, colors):\n    \"\"\" retrive the absolute number corresponding a color set by color_dict\"\"\"\n    for i, color in enumerate(colors):\n        for data in color:\n            equal = True\n            for k, v in data.items():\n                if k not in color_dict or v != color_dict[k]:\n                    equal = False\n                    break\n            if equal:\n                return i\n    return -1\n\n\ndef get_mask_from_block(image, color):\n    if color in np.unique(image, return_counts=False):\n        return 0, image == color\n    else:\n        return 1, None\n\n\ndef get_background(image, color):\n    return 0, np.uint8(np.ones_like(image) * color)\n\n\ndef get_mask_from_max_color_coverage(image, color):\n    if color in np.unique(image, return_counts=False):\n        boundaries = find_color_boundaries(image, color)\n        result = (image.copy() * 0).astype(bool)\n        result[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = True\n        return 0, image == color\n    else:\n        return 1, None\n\n\ndef add_unique_colors(image, result, colors=None):\n    \"\"\"adds information about colors unique for some parts of the image\"\"\"\n    if colors is None:\n        colors = np.unique(image)\n\n    unique_side = [False for i in range(10)]\n    unique_corner = [False for i in range(10)]\n\n    half_size = (((image.shape[0] + 1) \/\/ 2), ((image.shape[1] + 1) \/\/ 2))\n    for (image_part, side, unique_list) in [\n        (image[: half_size[0]], \"bottom\", unique_side),\n        (image[-half_size[0] :], \"top\", unique_side),\n        (image[:, : half_size[1]], \"right\", unique_side),\n        (image[:, -half_size[1] :], \"left\", unique_side),\n        (image[-half_size[0] :, -half_size[1] :], \"tl\", unique_corner),\n        (image[-half_size[0] :, : half_size[1]], \"tr\", unique_corner),\n        (image[: half_size[0], : half_size[1]], \"br\", unique_corner),\n        (image[: half_size[0], -half_size[1] :], \"left\", unique_corner),\n    ]:\n        unique = np.uint8(np.unique(image_part))\n        if len(unique) == len(colors) - 1:\n            color = [x for x in colors if x not in unique][0]\n            unique_list[color] = True\n            result[\"colors\"][color].append({\"type\": \"unique\", \"side\": side})\n\n    for i in range(10):\n        if unique_corner[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"corner\"})\n        if unique_side[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"side\"})\n        if unique_side[i] or unique_corner[i]:\n            result[\"colors\"][i].append({\"type\": \"unique\", \"side\": \"any\"})\n\n    return\n\n\ndef add_center_color(image, result, colors=None):\n    i = image.shape[0] \/\/ 4\n    j = image.shape[1] \/\/ 4\n    center = image[i : image.shape[0] - i, j : image.shape[1] - j]\n    values, counts = np.unique(center, return_counts=True)\n    if len(counts) > 0:\n        ind = np.argmax(counts)\n        color = values[ind]\n        result[\"colors\"][color].append({\"type\": \"center\"})\n\n\ndef get_color_scheme(image, target_image=None, params=None):\n    \"\"\"processes original image and returns dict color scheme\"\"\"\n    result = {\n        \"grid_color\": -1,\n        \"colors\": [[], [], [], [], [], [], [], [], [], []],\n        \"colors_sorted\": [],\n        \"grid_size\": [1, 1],\n    }\n\n    if params is None:\n        params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\n    # preparing colors info\n\n    unique, counts = np.unique(image, return_counts=True)\n    colors = [unique[i] for i in np.argsort(counts)]\n\n    result[\"colors_sorted\"] = colors\n    result[\"colors_num\"] = len(colors)\n\n    for color in range(10):\n        # use abs color value - same for any image\n        result[\"colors\"][color].append({\"type\": \"abs\", \"k\": color})\n\n    if len(colors) == 2 and 0 in colors:\n        result[\"colors\"][[x for x in colors if x != 0][0]].append({\"type\": \"non_zero\"})\n\n    if \"coverage\" in params:\n        for k, color in enumerate(colors):\n            # use k-th colour (sorted by presence on image)\n            result[\"colors\"][color].append({\"type\": \"min\", \"k\": k})\n            # use k-th colour (sorted by presence on image)\n            result[\"colors\"][color].append({\"type\": \"max\", \"k\": len(colors) - k - 1})\n\n    if \"unique\" in params:\n        add_unique_colors(image, result, colors=None)\n        add_center_color(image, result)\n\n    if \"corners\" in params:\n        # colors in the corners of images\n        result[\"colors\"][image[0, 0]].append({\"type\": \"corner\", \"side\": \"tl\"})\n        result[\"colors\"][image[0, -1]].append({\"type\": \"corner\", \"side\": \"tr\"})\n        result[\"colors\"][image[-1, 0]].append({\"type\": \"corner\", \"side\": \"bl\"})\n        result[\"colors\"][image[-1, -1]].append({\"type\": \"corner\", \"side\": \"br\"})\n\n    if \"top\" in params:\n        # colors that are on top of other and have full vertical on horizontal line\n        for k in range(10):\n            mask = image == k\n            is_on_top0 = mask.min(axis=0).any()\n            is_on_top1 = mask.min(axis=1).any()\n            if is_on_top0:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"0\"})\n            if is_on_top1:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"1\"})\n            if is_on_top1 or is_on_top0:\n                result[\"colors\"][k].append({\"type\": \"on_top\", \"side\": \"any\"})\n\n    if \"grid\" in params:\n        grid_color, grid_size, frame = find_grid(image)\n        if grid_color >= 0:\n            result[\"grid_color\"] = grid_color\n            result[\"grid_size\"] = grid_size\n            result[\"grid_frame\"] = frame\n            result[\"colors\"][grid_color].append({\"type\": \"grid\"})\n\n    return result\n\n\ndef add_block(target_dict, image, params_list):\n    array_hash = hash(matrix2answer(image))\n    if array_hash not in target_dict[\"arrays\"]:\n        target_dict[\"arrays\"][array_hash] = {\"array\": image, \"params\": []}\n\n    for params in params_list:\n        params_hash = get_dict_hash(params)\n        target_dict[\"arrays\"][array_hash][\"params\"].append(params)\n        target_dict[\"params\"][params_hash] = array_hash\n\n\ndef get_original(image):\n    return 0, image\n\n\ndef get_inversed_colors(image):\n    unique = np.unique(image)\n    if len(unique) != 2:\n        return 1, None\n    result = image.copy()\n    result[image == unique[0]] = unique[1]\n    result[image == unique[1]] = unique[0]\n    return 0, result\n\n\ndef generate_blocks(image, result, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None):\n    all_params = [\n        \"initial\",\n        \"background\",\n        \"min_max_blocks\",\n        \"block_with_side_colors\",\n        \"max_area_covered\",\n        \"grid_cells\",\n        \"halves\",\n        \"corners\",\n        \"rotate\",\n        \"transpose\",\n        \"cut_edges\",\n        \"resize\",\n        \"reflect\",\n        \"cut_parts\",\n        \"swap_colors\",\n        \"k_part\",\n    ]\n\n    if not params:\n        params = all_params\n\n    start_time = time.time()\n\n    result[\"blocks\"] = {\"arrays\": {}, \"params\": {}}\n\n    if \"initial\" in params:\n        # starting with the original image\n        add_block(result[\"blocks\"], image, [[{\"type\": \"original\"}]])\n\n        # inverse colors\n        status, block = get_inversed_colors(image)\n        if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n            add_block(result[\"blocks\"], block, [[{\"type\": \"inversed_colors\"}]])\n\n    # adding min and max blocks\n    if (\n        (\"min_max_blocks\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        # print(\"min_max_blocks\")\n        for full in [True, False]:\n            status, block = get_max_block(image, full)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"max_block\", \"full\": full}]])\n\n    if (\n        (\"block_with_side_colors\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        # print(\"min_max_blocks\")\n        for block_type in [\"min\", \"max\"]:\n            for structure in [0, 1]:\n                status, block = get_block_with_side_colors(image, block_type, structure)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(\n                        result[\"blocks\"],\n                        block,\n                        [[{\"type\": \"block_with_side_colors\", \"block_type\": block_type, \"structure\": structure}]],\n                    )\n        for block_type in [\"min\", \"max\"]:\n            for structure in [0, 1]:\n                status, block = get_block_with_side_colors_count(image, block_type, structure)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(\n                        result[\"blocks\"],\n                        block,\n                        [[{\"type\": \"block_with_side_colors_count\", \"block_type\": block_type, \"structure\": structure}]],\n                    )\n    # print(sum([len(x['params']) for x in result['blocks']['arrays'].values()]))\n    # adding background\n    if (\"background\" in params) and (time.time() - start_time < max_time):\n        # print(\"background\")\n        for color in range(10):\n            status, block = get_background(image, color)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = []\n                for color_dict in result[\"colors\"][color].copy():\n                    params_list.append([{\"type\": \"background\", \"color\": color_dict}])\n                add_block(result[\"blocks\"], block, params_list)\n\n    # adding the max area covered by each color\n    if (\"max_area_covered\" in params) and (time.time() - start_time < max_time):\n        # print(\"max_area_covered\")\n        for color in result[\"colors_sorted\"]:\n            status, block = get_color_max(image, color)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = []\n                for color_dict in result[\"colors\"][color].copy():\n                    params_list.append([{\"type\": \"color_max\", \"color\": color_dict}])\n                add_block(result[\"blocks\"], block, params_list)\n\n    # adding grid cells\n    if (\n        (\"grid_cells\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        if result[\"grid_color\"] > 0:\n            for i in range(result[\"grid_size\"][0]):\n                for j in range(result[\"grid_size\"][1]):\n                    status, block = get_grid(image, result[\"grid_size\"], (i, j), frame=result[\"grid_frame\"])\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        add_block(\n                            result[\"blocks\"],\n                            block,\n                            [\n                                [\n                                    {\n                                        \"type\": \"grid\",\n                                        \"grid_size\": result[\"grid_size\"],\n                                        \"cell\": [i, j],\n                                        \"frame\": result[\"grid_frame\"],\n                                    }\n                                ]\n                            ],\n                        )\n\n    # adding halves of the images\n    if (\"halves\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for side in [\"l\", \"r\", \"t\", \"b\", \"long1\", \"long2\"]:\n            status, block = get_half(image, side=side)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"half\", \"side\": side}]])\n\n    # extracting pixels from image\n    if (\"pixels\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for i in range(image.shape[0]):\n            for j in range(image.shape[1]):\n                status, block = get_pixel(image, i=i, j=j)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(result[\"blocks\"], block, [[{\"type\": \"pixel\", \"i\": i, \"j\": j}]])\n\n    # extracting pixels from image\n    if (\n        (\"pixel_fixed\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        for i in range(10):\n            status, block = get_pixel_fixed(image, i=i)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"pixel_fixed\", \"i\": i}]])\n\n    # adding halves of the images\n    if (\"k_part\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        for num in [3, 4]:\n            for k in range(num):\n                status, block = get_k_part(image, num=num, k=k)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    add_block(result[\"blocks\"], block, [[{\"type\": \"k_part\", \"num\": num, \"k\": k}]])\n\n    # adding corners of the images\n    if (\n        (\"corners\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        for side in [\"tl\", \"tr\", \"bl\", \"br\"]:\n            status, block = get_corner(image, side=side)\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                add_block(result[\"blocks\"], block, [[{\"type\": \"corner\", \"side\": side}]])\n\n    main_blocks_num = len(result[\"blocks\"])\n\n    # rotate all blocks\n    if (\"rotate\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for k in range(1, 4):\n            for key, data in current_blocks.items():\n                status, block = get_rotation(data[\"array\"], k=k)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [i + [{\"type\": \"rotation\", \"k\": k}] for i in data[\"params\"]]\n                    add_block(result[\"blocks\"], block, params_list)\n\n    # transpose all blocks\n    if (\n        (\"transpose\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for key, data in current_blocks.items():\n            status, block = get_transpose(data[\"array\"])\n            if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                params_list = [i + [{\"type\": \"transpose\"}] for i in data[\"params\"]]\n                add_block(result[\"blocks\"], block, params_list)\n\n    # cut edges for all blocks\n    if (\n        (\"cut_edges\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for l, r, t, b in [\n            (1, 1, 1, 1),\n            (1, 0, 0, 0),\n            (0, 1, 0, 0),\n            (0, 0, 1, 0),\n            (0, 0, 0, 1),\n            (1, 1, 0, 0),\n            (1, 0, 0, 1),\n            (0, 0, 1, 1),\n            (0, 1, 1, 0),\n        ]:\n            if time.time() - start_time < max_time:\n                for key, data in current_blocks.items():\n                    status, block = get_cut_edge(data[\"array\"], l=l, r=r, t=t, b=b)\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        params_list = [\n                            i + [{\"type\": \"cut_edge\", \"l\": l, \"r\": r, \"t\": t, \"b\": b}] for i in data[\"params\"]\n                        ]\n                        add_block(result[\"blocks\"], block, params_list)\n\n    # resize all blocks\n    if (\"resize\" in params) and (time.time() - start_time < max_time) and (len(result[\"blocks\"][\"arrays\"]) < max_blocks):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for scale in [2, 3, 1 \/ 2, 1 \/ 3]:\n            for key, data in current_blocks.items():\n                status, block = get_resize(data[\"array\"], scale)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [i + [{\"type\": \"resize\", \"scale\": scale}] for i in data[\"params\"]]\n                    add_block(result[\"blocks\"], block, params_list)\n\n        for size_x, size_y in [(2, 2), (3, 3)]:\n            for key, data in current_blocks.items():\n                status, block = get_resize_to(data[\"array\"], size_x, size_y)\n                if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                    params_list = [\n                        i + [{\"type\": \"resize_to\", \"size_x\": size_x, \"size_y\": size_y}] for i in data[\"params\"]\n                    ]\n                    add_block(result[\"blocks\"], block, params_list)\n\n    # reflect all blocks\n    if (\n        (\"reflect\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for side in [\"r\", \"l\", \"t\", \"b\", \"rt\", \"rb\", \"lt\", \"lb\"]:\n            if time.time() - start_time < max_time:\n                for key, data in current_blocks.items():\n                    status, block = get_reflect(data[\"array\"], side)\n                    if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                        params_list = [i + [{\"type\": \"reflect\", \"side\": side}] for i in data[\"params\"]]\n                        add_block(result[\"blocks\"], block, params_list)\n\n    # cut some parts of images\n    if (\n        (\"cut_parts\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        max_x = image.shape[0]\n        max_y = image.shape[1]\n        min_block_size = 2\n        for x1 in range(0, max_x - min_block_size):\n            if time.time() - start_time < max_time:\n                if max_x - x1 <= min_block_size:\n                    continue\n                for x2 in range(x1 + min_block_size, max_x):\n                    for y1 in range(0, max_y - min_block_size):\n                        if max_y - y1 <= min_block_size:\n                            continue\n                        for y2 in range(y1 + min_block_size, max_y):\n                            status, block = get_cut(image, x1, y1, x2, y2)\n                            if status == 0:\n                                add_block(\n                                    result[\"blocks\"], block, [[{\"type\": \"cut\", \"x1\": x1, \"x2\": x2, \"y1\": y1, \"y2\": y2}]]\n                                )\n\n    list_param_list = []\n    list_blocks = []\n\n    # swap some colors\n    if (\n        (\"swap_colors\" in params)\n        and (time.time() - start_time < max_time)\n        and (len(result[\"blocks\"][\"arrays\"]) < max_blocks)\n    ):\n        current_blocks = result[\"blocks\"][\"arrays\"].copy()\n        for color_1 in range(9):\n            if time.time() - start_time < max_time:\n                for color_2 in range(color_1 + 1, 10):\n                    for key, data in current_blocks.items():\n                        status, block = get_color_swap(data[\"array\"], color_1, color_2)\n                        if status == 0 and block.shape[0] > 0 and block.shape[1] > 0:\n                            for color_dict_1 in result[\"colors\"][color_1].copy():\n                                for color_dict_2 in result[\"colors\"][color_2].copy():\n                                    list_param_list.append(\n                                        [\n                                            j\n                                            + [{\"type\": \"color_swap\", \"color_1\": color_dict_1, \"color_2\": color_dict_2}]\n                                            for j in data[\"params\"]\n                                        ]\n                                    )\n                                    list_blocks.append(block)\n\n    for block, params_list in zip(list_blocks, list_param_list):\n        add_block(result[\"blocks\"], block, params_list)\n\n    if time.time() - start_time > max_time:\n        print(\"Time is over\")\n    if len(result[\"blocks\"][\"arrays\"]) >= max_blocks:\n        print(\"Max number of blocks exceeded\")\n    return result\n\n\ndef generate_masks(image, result, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None):\n    start_time = time.time()\n\n    all_params = [\"initial_masks\", \"additional_masks\", \"coverage_masks\", \"min_max_masks\"]\n\n    if not params:\n        params = all_params\n\n    result[\"masks\"] = {\"arrays\": {}, \"params\": {}}\n\n    # making one mask for each generated block\n    current_blocks = result[\"blocks\"][\"arrays\"].copy()\n    if (\"initial_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key, data in current_blocks.items():\n            for color in result[\"colors_sorted\"]:\n                status, mask = get_mask_from_block(data[\"array\"], color)\n                if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n                    params_list = [\n                        {\"operation\": \"none\", \"params\": {\"block\": i, \"color\": color_dict}}\n                        for i in data[\"params\"]\n                        for color_dict in result[\"colors\"][color]\n                    ]\n                    add_block(result[\"masks\"], mask, params_list)\n\n    initial_masks = result[\"masks\"][\"arrays\"].copy()\n    if (\"initial_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key, mask in initial_masks.items():\n            add_block(\n                result[\"masks\"],\n                np.logical_not(mask[\"array\"]),\n                [{\"operation\": \"not\", \"params\": param[\"params\"]} for param in mask[\"params\"]],\n            )\n\n    initial_masks = result[\"masks\"][\"arrays\"].copy()\n    masks_to_add = []\n    processed = []\n    if (\"additional_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for key1, mask1 in initial_masks.items():\n            processed.append(key1)\n            if time.time() - start_time < max_time * 2 and (\n                target_image is None\n                or (target_image.shape == mask1[\"array\"].shape)\n                or (target_image.shape == mask1[\"array\"].T.shape)\n            ):\n                for key2, mask2 in initial_masks.items():\n                    if key2 in processed:\n                        continue\n                    if (mask1[\"array\"].shape[0] == mask2[\"array\"].shape[0]) and (\n                        mask1[\"array\"].shape[1] == mask2[\"array\"].shape[1]\n                    ):\n                        params_list_and = []\n                        params_list_or = []\n                        params_list_xor = []\n                        for param1 in mask1[\"params\"]:\n                            for param2 in mask2[\"params\"]:\n                                params_list_and.append(\n                                    {\"operation\": \"and\", \"params\": {\"mask1\": param1, \"mask2\": param2}}\n                                )\n                                params_list_or.append({\"operation\": \"or\", \"params\": {\"mask1\": param1, \"mask2\": param2}})\n                                params_list_xor.append(\n                                    {\"operation\": \"xor\", \"params\": {\"mask1\": param1, \"mask2\": param2}}\n                                )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_and(mask1[\"array\"], mask2[\"array\"]), params_list_and)\n                        )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_or(mask1[\"array\"], mask2[\"array\"]), params_list_or)\n                        )\n                        masks_to_add.append(\n                            (result[\"masks\"], np.logical_xor(mask1[\"array\"], mask2[\"array\"]), params_list_xor)\n                        )\n\n    for path, array, params_list in masks_to_add:\n        add_block(path, array, params_list)\n    # coverage_masks\n    if (\"coverage_masks\" in params) and (time.time() - start_time < max_time * 2):\n        for color in result[\"colors_sorted\"][1:]:\n            status, mask = get_mask_from_max_color_coverage(image, color)\n            if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n                params_list = [\n                    {\"operation\": \"coverage\", \"params\": {\"color\": color_dict}}\n                    for color_dict in result[\"colors\"][color].copy()\n                ]\n                add_block(result[\"masks\"], mask, params_list)\n    # coverage_masks\n    if (\"min_max_masks\" in params) and (time.time() - start_time < max_time * 2):\n        status, mask = get_min_block_mask(image)\n        if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n            params_list = [{\"operation\": \"min_block\"}]\n            add_block(result[\"masks\"], mask, params_list)\n        status, mask = get_max_block_mask(image)\n        if status == 0 and mask.shape[0] > 0 and mask.shape[1] > 0:\n            params_list = [{\"operation\": \"max_block\"}]\n            add_block(result[\"masks\"], mask, params_list)\n    if time.time() - start_time > max_time:\n        print(\"Time is over\")\n    if len(result[\"blocks\"][\"arrays\"]) >= max_masks:\n        print(\"Max number of masks exceeded\")\n    return result\n\n\ndef process_image(\n    image, max_time=600, max_blocks=200000, max_masks=200000, target_image=None, params=None, color_params=None\n):\n    \"\"\"processes the original image and returns dict with structured image blocks\"\"\"\n\n    result = get_color_scheme(image, target_image=target_image, params=color_params)\n    result = generate_blocks(image, result, max_time, max_blocks, max_masks, target_image, params, color_params)\n    result = generate_masks(image, result, max_time, max_blocks, max_masks, target_image, params, color_params)\n\n    return result\n\n\ndef get_mask_from_block_params(image, params, block_cache=None, mask_cache=None, color_scheme=None):\n    if mask_cache is None:\n        mask_cache = {{\"arrays\": {}, \"params\": {}}}\n    dict_hash = get_dict_hash(params)\n    if dict_hash in mask_cache:\n        mask = mask_cache[\"arrays\"][mask_cache[\"params\"][dict_hash]][\"array\"]\n        if len(mask) == 0:\n            return 1, None\n        else:\n            return 0, mask\n\n    if params[\"operation\"] == \"none\":\n        status, block = get_predict(image, params[\"params\"][\"block\"], block_cache, color_scheme)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 1, None\n        if not color_scheme:\n            color_scheme = get_color_scheme(image)\n        color_num = get_color(params[\"params\"][\"color\"], color_scheme[\"colors\"])\n        if color_num < 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 2, None\n        status, mask = get_mask_from_block(block, color_num)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"not\":\n        new_params = params.copy()\n        new_params[\"operation\"] = \"none\"\n        status, mask = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 3, None\n        mask = np.logical_not(mask)\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] in [\"and\", \"or\", \"xor\"]:\n        new_params = params[\"params\"][\"mask1\"]\n        status, mask1 = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 4, None\n        new_params = params[\"params\"][\"mask2\"]\n        status, mask2 = get_mask_from_block_params(\n            image, new_params, block_cache=block_cache, color_scheme=color_scheme, mask_cache=mask_cache\n        )\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 5, None\n        if mask1.shape[0] != mask2.shape[0] or mask1.shape[1] != mask2.shape[1]:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        if params[\"operation\"] == \"and\":\n            mask = np.logical_and(mask1, mask2)\n        elif params[\"operation\"] == \"or\":\n            mask = np.logical_or(mask1, mask2)\n        elif params[\"operation\"] == \"xor\":\n            mask = np.logical_xor(mask1, mask2)\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"coverage\":\n        if not color_scheme:\n            color_scheme = get_color_scheme(image)\n        color_num = get_color(params[\"params\"][\"color\"], color_scheme[\"colors\"])\n        if color_num < 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 2, None\n        status, mask = get_mask_from_max_color_coverage(image, color_num)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"min_block\":\n        status, mask = get_min_block_mask(image)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n    elif params[\"operation\"] == \"max_block\":\n        status, mask = get_max_block_mask(image)\n        if status != 0:\n            add_block(mask_cache, np.array([[]]), [params])\n            return 6, None\n        add_block(mask_cache, mask, [params])\n        return 0, mask\n\n\ndef get_dict_hash(d):\n    return hash(json.dumps(d, sort_keys=True))\n\n\ndef get_predict(image, transforms, block_cache=None, color_scheme=None):\n    \"\"\" applies the list of transforms to the image\"\"\"\n    params_hash = get_dict_hash(transforms)\n    if params_hash in block_cache[\"params\"]:\n        if block_cache[\"params\"][params_hash] is None:\n            return 1, None\n        else:\n            return 0, block_cache[\"arrays\"][block_cache[\"params\"][params_hash]][\"array\"]\n\n    if not color_scheme:\n        color_scheme = get_color_scheme(image)\n\n    if len(transforms) > 1:\n        status, previous_image = get_predict(image, transforms[:-1], block_cache=block_cache, color_scheme=color_scheme)\n        if status != 0:\n            return status, None\n    else:\n        previous_image = image\n\n    transform = transforms[-1]\n    function = globals()[\"get_\" + transform[\"type\"]]\n    params = transform.copy()\n    params.pop(\"type\")\n    for color_name in [\"color\", \"color_1\", \"color_2\"]:\n        if color_name in params:\n            params[color_name] = get_color(params[color_name], color_scheme[\"colors\"])\n            if params[color_name] < 0:\n                return 2, None\n    status, result = function(previous_image, **params)\n\n    if status != 0 or len(result) == 0 or len(result[0]) == 0:\n        block_cache[\"params\"][params_hash] = None\n        return 1, None\n\n    add_block(block_cache, result, [transforms])\n    return 0, result\n\n\ndef filter_colors(sample):\n    # filtering colors, that are not present in at least one of the images\n    all_colors = []\n    for color_scheme1 in sample[\"train\"]:\n        list_of_colors = [get_dict_hash(color_dict) for i in range(10) for color_dict in color_scheme1[\"colors\"][i]]\n        all_colors.append(list_of_colors)\n    for j in range(1, len(sample[\"train\"])):\n        all_colors[0] = [x for x in all_colors[0] if x in all_colors[j]]\n    keep_colors = set(all_colors[0])\n\n    for color_scheme1 in sample[\"train\"]:\n        for i in range(10):\n            j = 0\n            while j < len(color_scheme1[\"colors\"][i]):\n                if get_dict_hash(color_scheme1[\"colors\"][i][j]) in keep_colors:\n                    j += 1\n                else:\n                    del color_scheme1[\"colors\"][i][j]\n\n    delete_colors = []\n    color_scheme0 = sample[\"train\"][0]\n    for i in range(10):\n        if len(color_scheme0[\"colors\"][i]) > 1:\n            for j, color_dict1 in enumerate(color_scheme0[\"colors\"][i][::-1][:-1]):\n                hash1 = get_dict_hash(color_dict1)\n                delete = True\n                for color_dict2 in color_scheme0[\"colors\"][i][::-1][j + 1 :]:\n                    hash2 = get_dict_hash(color_dict2)\n                    for color_scheme1 in list(sample[\"train\"][1:]) + list(sample[\"test\"]):\n                        found = False\n                        for k in range(10):\n                            hash_array = [get_dict_hash(color_dict) for color_dict in color_scheme1[\"colors\"][k]]\n                            if hash1 in hash_array and hash2 in hash_array:\n                                found = True\n                                break\n                        if not found:\n                            delete = False\n                            break\n                    if delete:\n                        delete_colors.append(hash1)\n                        break\n\n    for color_scheme1 in sample[\"train\"]:\n        for i in range(10):\n            j = 0\n            while j < len(color_scheme1[\"colors\"][i]):\n                if get_dict_hash(color_scheme1[\"colors\"][i][j]) in delete_colors:\n                    del color_scheme1[\"colors\"][i][j]\n                else:\n                    j += 1\n    return\n\n\ndef filter_blocks(sample, arrays_type=\"blocks\"):\n    delete_blocks = []\n    list_of_lists_of_sets = []\n    for arrays_list in [x[arrays_type][\"arrays\"].values() for x in sample[\"train\"][1:]] + [\n        x[arrays_type][\"arrays\"].values() for x in sample[\"test\"]\n    ]:\n        list_of_lists_of_sets.append([])\n        for array in arrays_list:\n            list_of_lists_of_sets[-1].append({get_dict_hash(params_dict) for params_dict in array[\"params\"]})\n\n    for initial_array in sample[\"train\"][0][arrays_type][\"arrays\"].values():\n        if len(initial_array[\"params\"]) > 1:\n            for j, params_dict1 in enumerate(initial_array[\"params\"][::-1][:-1]):\n                hash1 = get_dict_hash(params_dict1)\n                delete = True\n                for params_dict1 in initial_array[\"params\"][::-1][j + 1 :]:\n                    hash2 = get_dict_hash(params_dict1)\n                    for lists_of_sets in list_of_lists_of_sets:\n                        found = False\n                        for hash_set in lists_of_sets:\n                            if hash1 in hash_set and hash2 in hash_set:\n                                found = True\n                                break\n                        if not found:\n                            delete = False\n                            break\n                    if delete:\n                        delete_blocks.append(hash1)\n                        break\n\n    for arrays_list in [x[arrays_type][\"arrays\"].values() for x in sample[\"train\"]] + [\n        x[arrays_type][\"arrays\"].values() for x in sample[\"test\"]\n    ]:\n        for array in arrays_list:\n            params_list = array[\"params\"]\n            j = 0\n            while j < len(params_list):\n                if get_dict_hash(params_list[j]) in delete_blocks:\n                    del params_list[j]\n                else:\n                    j += 1\n    return\n\n\ndef extract_target_blocks(sample, color_params=None):\n    target_blocks_cache = []\n    params = [\"initial\", \"block_with_side_colors\", \"min_max_blocks\", \"max_area_covered\", \"cut_parts\"]\n    for n in range(len(sample[\"train\"])):\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        target_blocks_cache.append(get_color_scheme(target_image, params=color_params))\n        target_blocks_cache[-1].update(generate_blocks(target_image, target_blocks_cache[-1], params=params))\n    final_arrays = list(\n        set.intersection(\n            *[set(target_blocks_cache[n][\"blocks\"][\"arrays\"].keys()) for n in range(len(target_blocks_cache))]\n        )\n    )\n    for i, key in enumerate(final_arrays):\n        for n in range(len(sample[\"train\"])):\n            params_list = [[{\"type\": \"target\", \"k\": i}]]\n            add_block(\n                sample[\"train\"][n][\"blocks\"], target_blocks_cache[0][\"blocks\"][\"arrays\"][key][\"array\"], params_list\n            )\n        for n in range(len(sample[\"test\"])):\n            params_list = [[{\"type\": \"target\", \"k\": i}]]\n            add_block(sample[\"test\"][n][\"blocks\"], target_blocks_cache[0][\"blocks\"][\"arrays\"][key][\"array\"], params_list)\n\n\ndef preprocess_sample(sample, params=None, color_params=None, process_whole_ds=False):\n    \"\"\" make the whole preprocessing for particular sample\"\"\"\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(get_color_scheme(original_image, target_image=target_image, params=color_params))\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(get_color_scheme(original_image, params=color_params))\n\n    filter_colors(sample)\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(\n            generate_blocks(original_image, sample[\"train\"][n], target_image=target_image, params=params)\n        )\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(generate_blocks(original_image, sample[\"test\"][n], params=params))\n\n    if \"target\" in params:\n        extract_target_blocks(sample, color_params)\n    filter_blocks(sample)\n\n    for n, image in enumerate(sample[\"train\"]):\n        original_image = np.uint8(image[\"input\"])\n        target_image = np.uint8(sample[\"train\"][n][\"output\"])\n        sample[\"train\"][n].update(\n            generate_masks(original_image, sample[\"train\"][n], target_image=target_image, params=params)\n        )\n    for n, image in enumerate(sample[\"test\"]):\n        original_image = np.uint8(image[\"input\"])\n        sample[\"test\"][n].update(generate_masks(original_image, sample[\"test\"][n], params=params))\n\n    return sample\n","f03023f8":"import numpy as np\n\n\ndef filter_list_of_dicts(list1, list2):\n    \"\"\"Returns the intersection of two lists of dicts\"\"\"\n    set_of_hashes = {get_dict_hash(item1) for item1 in list1}\n    final_list = []\n    for item2 in list2:\n        if get_dict_hash(item2) in set_of_hashes:\n            final_list.append(item2)\n    return final_list\n\n\ndef swap_two_colors(image):\n    \"\"\"sawaps two colors\"\"\"\n    unique = np.unique(image)\n    if len(unique) != 2:\n        return 1, None\n    result = image.copy()\n    result[image == unique[0]] = unique[1]\n    result[image == unique[1]] = unique[0]\n    return 0, result\n\n\ndef combine_two_lists(list1, list2):\n    result = list1.copy()\n    for item2 in list2:\n        exist = False\n        for item1 in list1:\n            if (item2 == item1).all():\n                exist = True\n                break\n        if not exist:\n            result.append(item2)\n    return result\n\n\ndef intersect_two_lists(list1, list2):\n    \"\"\" intersects two lists of np.arrays\"\"\"\n    result = []\n    for item2 in list2:\n        for item1 in list1:\n            if (item2.shape == item1.shape) and (item2 == item1).all():\n                result.append(item2)\n                break\n    return result","b145c15c":"import itertools\nimport random\n\nimport numpy as np\n\nfrom scipy import ndimage\nfrom scipy.stats import mode\n\nclass Predictor:\n    def __init__(self, params=None, preprocess_params=None):\n        if params is None:\n            self.params = {}\n        else:\n            self.params = params\n        self.preprocess_params = preprocess_params\n        self.solution_candidates = []\n        if \"rrr_input\" in self.params:\n            self.rrr_input = params[\"rrr_input\"]\n        else:\n            self.rrr_input = True\n        if \"mosaic_target\" not in self.params:\n            self.params[\"mosaic_target\"] = False\n\n    def retrive_params_values(self, params, color_scheme):\n        new_params = {}\n        for k, v in params.items():\n            if k[-5:] == \"color\":\n                new_params[k] = get_color(v, color_scheme[\"colors\"])\n                if new_params[k] < 0:\n                    return 1, None\n            else:\n                new_params[k] = v\n        return 0, new_params\n\n    def reflect_rotate_roll(self, image, inverse=False):\n        if self.params is not None and \"reflect\" in self.params:\n            reflect = self.params[\"reflect\"]\n        else:\n            reflect = (False, False)\n        if self.params is not None and \"rotate\" in self.params:\n            rotate = self.params[\"rotate\"]\n        else:\n            rotate = 0\n        if self.params is not None and \"roll\" in self.params:\n            roll = self.params[\"roll\"]\n        else:\n            roll = (0, 0)\n\n        result = image.copy()\n\n        if inverse:\n            if reflect[0]:\n                result = result[::-1]\n            if reflect[1]:\n                result = result[:, ::-1]\n            result = np.rot90(result, -rotate)\n            result = np.roll(result, -roll[1], axis=1)\n            result = np.roll(result, -roll[0], axis=0)\n        else:\n            result = np.roll(result, roll[0], axis=0)\n            result = np.roll(result, roll[1], axis=1)\n            result = np.rot90(result, rotate)\n            if reflect[1]:\n                result = result[:, ::-1]\n            if reflect[0]:\n                result = result[::-1]\n\n        return result\n\n    def get_images(self, k, train=True, return_target=True):\n        if not train:\n            return_target = False\n\n        if train:\n            if self.rrr_input:\n                original_image = self.reflect_rotate_roll(np.uint8(self.sample[\"train\"][k][\"input\"]))\n            else:\n                original_image = np.uint8(self.sample[\"train\"][k][\"input\"])\n            if return_target:\n                if self.params[\"mosaic_target\"]:\n                    target_image = np.uint8(self.sample[\"train\"][k][\"mosaic_output\"])\n                else:\n                    target_image = np.uint8(self.sample[\"train\"][k][\"output\"])\n                target_image = self.reflect_rotate_roll(target_image)\n                return original_image, target_image\n            else:\n                return original_image\n        else:\n            if self.rrr_input:\n                original_image = self.reflect_rotate_roll(np.uint8(self.sample[\"test\"][k][\"input\"]))\n            else:\n                original_image = np.uint8(self.sample[\"test\"][k][\"input\"])\n            return original_image\n\n    def initiate_mosaic(self):\n        same_size = True\n        same_size_rotated = True\n        fixed_size = True\n        color_num_size = True\n        block_shape_size = True\n\n        shapes = []\n        sizes = []\n        for k, data in enumerate(self.sample[\"train\"]):\n            target_image = np.uint8(data[\"output\"])\n            original_image = self.get_images(k, train=True, return_target=False)\n            status, block = find_mosaic_block(target_image, self.params)\n            if status != 0:\n                return False\n            self.sample[\"train\"][k][\"mosaic_output\"] = block\n            same_size = same_size and target_image.shape == original_image.shape\n            same_size_rotated = same_size_rotated and target_image.shape == original_image.T.shape\n            if target_image.shape[0] % block.shape[0] == 0 and target_image.shape[1] % block.shape[1] == 0:\n                sizes.append([target_image.shape[0] \/\/ block.shape[0], target_image.shape[1] \/\/ block.shape[1]])\n                color_num_size = (\n                    color_num_size\n                    and sizes[-1][0] == len(data[\"colors_sorted\"])\n                    and sizes[-1][1] == len(data[\"colors_sorted\"])\n                )\n                block_shape_size = block_shape_size and sizes[-1][0] == block.shape[0] and sizes[-1][1] == block.shape[1]\n            else:\n                fixed_size = False\n                color_num_size = False\n                block_shape_size\n            shapes.append(target_image.shape)\n\n        params = {}\n\n        if len([1 for x in shapes[1:] if x != shapes[0]]) == 0:\n            params[\"mosaic_size_type\"] = \"fixed\"\n            params[\"mosaic_shape\"] = shapes[0]\n        elif fixed_size and len([1 for x in sizes[1:] if x != sizes[0]]) == 0:\n            params[\"mosaic_size_type\"] = \"size\"\n            params[\"mosaic_size\"] = sizes[0]\n        elif same_size:\n            params[\"mosaic_size_type\"] = \"same\"\n        elif same_size_rotated:\n            params[\"mosaic_size_type\"] = \"same_rotated\"\n        elif color_num_size:\n            params[\"mosaic_size_type\"] = \"color_num\"\n        elif color_num_size:\n            params[\"mosaic_size_type\"] = \"block_shape_size\"\n        else:\n            return False\n\n        self.params[\"mosaic_params\"] = params\n        return True\n\n    def process_prediction(self, image, original_image=None):\n        result = self.reflect_rotate_roll(image, inverse=True)\n        if self.params[\"mosaic_target\"]:\n            result = reconstruct_mosaic_from_block(result, self.params[\"mosaic_params\"], original_image=original_image)\n        return result\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        return 1, None\n\n    def filter_colors(self):\n        # filtering colors, that are not present in at least one of the images\n        all_colors = []\n        for color_scheme1 in self.sample[\"train\"]:\n            list_of_colors = [get_dict_hash(color_dict) for i in range(10) for color_dict in color_scheme1[\"colors\"][i]]\n            all_colors.append(list_of_colors)\n        for j in range(1, len(self.sample[\"train\"])):\n            all_colors[0] = [x for x in all_colors[0] if x in all_colors[j]]\n        keep_colors = set(all_colors[0])\n\n        for color_scheme1 in self.sample[\"train\"]:\n            for i in range(10):\n                j = 0\n                while j < len(color_scheme1[\"colors\"][i]):\n                    if get_dict_hash(color_scheme1[\"colors\"][i][j]) in keep_colors:\n                        j += 1\n                    else:\n                        del color_scheme1[\"colors\"][i][j]\n\n        delete_colors = []\n        color_scheme0 = self.sample[\"train\"][0]\n        for i in range(10):\n            if len(color_scheme0[\"colors\"][i]) > 1:\n                for j, color_dict1 in enumerate(color_scheme0[\"colors\"][i][::-1][:-1]):\n                    hash1 = get_dict_hash(color_dict1)\n                    delete = True\n                    for color_dict2 in color_scheme0[\"colors\"][i][::-1][j + 1 :]:\n                        hash2 = get_dict_hash(color_dict2)\n                        for color_scheme1 in list(self.sample[\"train\"][1:]) + list(self.sample[\"test\"]):\n                            found = False\n                            for k in range(10):\n                                hash_array = [get_dict_hash(color_dict) for color_dict in color_scheme1[\"colors\"][k]]\n                                if hash1 in hash_array and hash2 in hash_array:\n                                    found = True\n                                    break\n                            if not found:\n                                delete = False\n                                break\n                        if delete:\n                            delete_colors.append(hash1)\n                            break\n\n        for color_scheme1 in self.sample[\"train\"]:\n            for i in range(10):\n                j = 0\n                while j < len(color_scheme1[\"colors\"][i]):\n                    if get_dict_hash(color_scheme1[\"colors\"][i][j]) in delete_colors:\n                        del color_scheme1[\"colors\"][i][j]\n                    else:\n                        j += 1\n        return\n\n    def filter_sizes(self):\n        if \"max_size\" not in self.params:\n            return True\n        else:\n            max_size = self.params[\"max_size\"]\n        for n in range(len(self.sample[\"train\"])):\n            original_image = np.array(self.sample[\"train\"][n][\"input\"])\n            target_image = np.array(self.sample[\"train\"][n][\"output\"])\n            if (\n                original_image.shape[0] > max_size\n                or original_image.shape[1] > max_size\n                or target_image.shape[0] > max_size\n                or target_image.shape[1] > max_size\n            ):\n                return False\n        return True\n\n    def init_call(self):\n        if not self.filter_sizes():\n            return False\n        self.filter_colors()\n        if self.params[\"mosaic_target\"]:\n            if self.initiate_mosaic():\n                return True\n            else:\n                return False\n        return True\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        return 0\n\n    def process_full_train(self):\n        for k in range(len(self.sample[\"train\"])):\n            status = self.process_one_sample(k, initial=(k == 0))\n            if status != 0:\n                return 1\n\n        if len(self.solution_candidates) == 0:\n            return 2\n\n        return 0\n\n    def add_candidates_list(self, image, target_image, color_scheme, params):\n        old_params = params.copy()\n        params = params.copy()\n        params[\"color_scheme\"] = color_scheme\n        params[\"block_cache\"] = color_scheme[\"blocks\"]\n        params[\"mask_cache\"] = color_scheme[\"masks\"]\n\n        if \"elim_background\" in self.params and self.params[\"elim_background\"]:\n            structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n            if \"all_background_color\" in params:\n                color_iter_list = [params[\"all_background_color\"]]\n            else:\n                color_iter_list = color_scheme[\"colors_sorted\"]\n            for all_background_color in color_iter_list:\n                final_prediction = image.copy()\n                solved = True\n                masks, n_masks = ndimage.label(image != all_background_color, structure=structure)\n                new_image_masks = [(masks == i) for i in range(1, n_masks + 1)]\n                for image_mask in new_image_masks:\n                    boundaries = find_color_boundaries(image_mask, True)\n                    new_image = image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1]\n                    new_target = target_image[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1]\n                    if \"block\" in params:\n                        status, prediction = self.predict_output(new_image, params, block=new_image)\n                    else:\n                        status, prediction = self.predict_output(new_image, params)\n                    if status != 0 or prediction.shape != new_target.shape or not (prediction == new_target).all():\n                        solved = False\n                        break\n                    final_prediction[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = prediction\n                if solved and final_prediction.shape == target_image.shape and (final_prediction == target_image).all():\n                    params[\"all_background_color\"] = all_background_color\n                    break\n                else:\n                    solved = False\n            if not solved:\n                return []\n\n        else:\n            status, prediction = self.predict_output(image, params)\n            if status != 0 or prediction.shape != target_image.shape or not (prediction == target_image).all():\n                return []\n\n        result = [old_params.copy()]\n        for k, v in params.copy().items():\n            if k[-5:] == \"color\":\n                temp_result = result.copy()\n                result = []\n                for dict in temp_result:\n                    for color_dict in color_scheme[\"colors\"][v]:\n                        temp_dict = dict.copy()\n                        temp_dict[k] = color_dict\n                        result.append(temp_dict)\n\n        return result\n\n    def update_solution_candidates(self, local_candidates, initial):\n        if initial:\n            self.solution_candidates = local_candidates\n        else:\n            self.solution_candidates = filter_list_of_dicts(local_candidates, self.solution_candidates)\n        if len(self.solution_candidates) == 0:\n            return 4\n        else:\n            return 0\n\n    def __call__(self, sample):\n        \"\"\" works like fit_predict\"\"\"\n        self.sample = sample\n\n        self.initial_train = list(sample[\"train\"]).copy()\n\n        if self.params is not None and \"skip_train\" in self.params:\n            skip_train = min(len(sample[\"train\"]) - 2, self.params[\"skip_train\"])\n            train_len = len(self.initial_train) - skip_train\n        else:\n            train_len = len(self.initial_train)\n\n        answers = []\n        for _ in self.sample[\"test\"]:\n            answers.append([])\n        result_generated = False\n\n        all_subsets = list(itertools.combinations(self.initial_train, train_len))\n        for subset in all_subsets:\n            self.sample[\"train\"] = subset\n            if not self.init_call():\n                continue\n            status = self.process_full_train()\n            if status != 0:\n                continue\n\n            for test_n, test_data in enumerate(self.sample[\"test\"]):\n                original_image = self.get_images(test_n, train=False)\n                color_scheme = self.sample[\"test\"][test_n]\n                for params_dict in self.solution_candidates:\n                    status, params = self.retrive_params_values(params_dict, color_scheme)\n                    if status != 0:\n                        continue\n                    params[\"block_cache\"] = self.sample[\"test\"][test_n][\"blocks\"]\n                    params[\"mask_cache\"] = self.sample[\"test\"][test_n][\"masks\"]\n                    params[\"color_scheme\"] = self.sample[\"test\"][test_n]\n                    status, prediction = self.predict_output(original_image, params)\n                    if status != 0:\n                        continue\n\n                    if \"elim_background\" in self.params and self.params[\"elim_background\"]:\n                        result = original_image.copy()\n                        structure = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n\n                        all_background_color = params[\"all_background_color\"]\n                        solved = True\n                        masks, n_masks = ndimage.label(original_image != all_background_color, structure=structure)\n                        new_image_masks = [(masks == i) for i in range(1, n_masks + 1)]\n                        for image_mask in new_image_masks:\n                            boundaries = find_color_boundaries(image_mask, True)\n                            new_image = original_image[\n                                boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1\n                            ]\n                            if \"block\" in params:\n                                status, prediction = self.predict_output(new_image, params, block=new_image)\n                            else:\n                                status, prediction = self.predict_output(new_image, params)\n                            if status != 0 or prediction.shape != new_image.shape:\n                                solved = False\n                                break\n                            result[boundaries[0] : boundaries[1] + 1, boundaries[2] : boundaries[3] + 1] = prediction\n                        if not solved:\n                            continue\n                        prediction = result\n\n                    else:\n                        status, prediction = self.predict_output(original_image, params)\n                        if status != 0:\n                            continue\n\n                    answers[test_n].append(self.process_prediction(prediction, original_image=original_image))\n                    result_generated = True\n\n        self.sample[\"train\"] = self.initial_train\n        if result_generated:\n            return 0, answers\n        else:\n            return 3, None\n        \nclass Puzzle(Predictor):\n    \"\"\"Stack different blocks together to get the output\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        self.intersection = params[\"intersection\"]\n\n    def initiate_factors(self, target_image):\n        t_n, t_m = target_image.shape\n        factors = []\n        grid_color_list = []\n        if self.intersection < 0:\n            grid_color, grid_size, frame = find_grid(target_image)\n            if grid_color < 0:\n                return factors, []\n            factors = [grid_size]\n            grid_color_list = self.sample[\"train\"][0][\"colors\"][grid_color]\n            self.frame = frame\n        else:\n            for i in range(1, t_n + 1):\n                for j in range(1, t_m + 1):\n                    if (t_n - self.intersection) % i == 0 and (t_m - self.intersection) % j == 0:\n                        factors.append([i, j])\n        return factors, grid_color_list\n\n    def predict_output(self, image, color_scheme, factor, params, block_cache):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        skip = False\n        for i in range(factor[0]):\n            for j in range(factor[1]):\n                status, array = get_predict(image, params[i][j][0], block_cache, color_scheme)\n                if status != 0:\n                    skip = True\n                    break\n\n                if i == 0 and j == 0:\n                    n, m = array.shape\n                    predict = np.uint8(\n                        np.zeros(\n                            (\n                                (n - self.intersection) * factor[0] + self.intersection,\n                                (m - self.intersection) * factor[1] + self.intersection,\n                            )\n                        )\n                    )\n                    if self.intersection < 0:\n                        new_grid_color = get_color(self.grid_color_list[0], color_scheme[\"colors\"])\n                        if new_grid_color < 0:\n                            return 2, None\n                        predict += new_grid_color\n                else:\n                    if n != array.shape[0] or m != array.shape[1]:\n                        skip = True\n                        break\n\n                predict[\n                    i * (n - self.intersection) : i * (n - self.intersection) + n,\n                    j * (m - self.intersection) : j * (m - self.intersection) + m,\n                ] = array\n\n            if skip:\n                return 1, None\n\n        if self.intersection < 0 and self.frame:\n            final_predict = predict = (\n                np.uint8(\n                    np.zeros(\n                        (\n                            (n - self.intersection) * factor[0] + self.intersection + 2,\n                            (m - self.intersection) * factor[1] + self.intersection + 2,\n                        )\n                    )\n                )\n                + new_grid_color\n            )\n            final_predict[1 : final_predict.shape[0] - 1, 1 : final_predict.shape[1] - 1] = predict\n            preict = final_predict\n\n        return 0, predict\n\n    def initiate_candidates_list(self, initial_values=None):\n        \"\"\"creates an empty candidates list corresponding to factors\n        for each (m,n) factor it is m x n matrix of lists\"\"\"\n        candidates = []\n        if not initial_values:\n            initial_values = []\n        for n_factor, factor in enumerate(self.factors):\n            candidates.append([])\n            for i in range(factor[0]):\n                candidates[n_factor].append([])\n                for j in range(factor[1]):\n                    candidates[n_factor][i].append(initial_values.copy())\n        return candidates\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n\n        original_image, target_image = self.get_images(k)\n\n        candidates_num = 0\n        t_n, t_m = target_image.shape\n        color_scheme = self.sample[\"train\"][k]\n        new_candidates = self.initiate_candidates_list()\n        for n_factor, factor in enumerate(self.factors.copy()):\n            for i in range(factor[0]):\n                for j in range(factor[1]):\n                    if initial:\n                        local_candidates = self.sample[\"train\"][k][\"blocks\"][\"arrays\"].keys()\n                    else:\n                        local_candidates = self.solution_candidates[n_factor][i][j]\n\n                    for data in local_candidates:\n                        if initial:\n                            array = self.sample[\"train\"][k][\"blocks\"][\"arrays\"][data][\"array\"]\n                            params = self.sample[\"train\"][k][\"blocks\"][\"arrays\"][data][\"params\"]\n                        else:\n                            params = [data]\n                            status, array = get_predict(\n                                original_image, data, self.sample[\"train\"][k][\"blocks\"], color_scheme\n                            )\n                            if status != 0:\n                                continue\n\n                        n, m = array.shape\n                        # work with valid candidates only\n                        if n <= 0 or m <= 0:\n                            continue\n                        if (\n                            n - self.intersection != (t_n - self.intersection) \/ factor[0]\n                            or m - self.intersection != (t_m - self.intersection) \/ factor[1]\n                        ):\n                            continue\n\n                        start_n = i * (n - self.intersection)\n                        start_m = j * (m - self.intersection)\n\n                        if not (\n                            (n == target_image[start_n : start_n + n, start_m : start_m + m].shape[0])\n                            and (m == target_image[start_n : start_n + n, start_m : start_m + m].shape[1])\n                        ):\n                            continue\n\n                        # adding the candidate to the candidates list\n                        if (array == target_image[start_n : start_n + n, start_m : start_m + m]).all():\n                            new_candidates[n_factor][i][j].extend(params)\n                            candidates_num += 1\n                    # if there is no candidates for one of the cells the whole factor is invalid\n                    if len(new_candidates[n_factor][i][j]) == 0:\n                        self.factors[n_factor] = [0, 0]\n                        break\n                if self.factors[n_factor][0] == 0:\n                    break\n\n        self.solution_candidates = new_candidates\n\n        if candidates_num > 0:\n            return 0\n        else:\n            return 1\n\n    def filter_factors(self, local_factors):\n        for factor in self.factors:\n            found = False\n            for new_factor in local_factors:\n                if factor == new_factor:\n                    found = True\n                    break\n            if not found:\n                factor = [0, 0]\n\n        return\n\n    def process_full_train(self):\n\n        for k in range(len(self.sample[\"train\"])):\n            original_image, target_image = self.get_images(k)\n            if k == 0:\n                self.factors, self.grid_color_list = self.initiate_factors(target_image)\n            else:\n                local_factors, grid_color_list = self.initiate_factors(target_image)\n                self.filter_factors(local_factors)\n                self.grid_color_list = filter_list_of_dicts(grid_color_list, self.grid_color_list)\n\n            status = self.process_one_sample(k, initial=(k == 0))\n            if status != 0:\n                return 1\n\n        if len(self.solution_candidates) == 0:\n            return 2\n\n        return 0\n\n    def __call__(self, sample):\n        \"\"\" works like fit_predict\"\"\"\n        self.sample = sample\n        if not self.init_call():\n            return 5, None\n        status = self.process_full_train()\n        if status != 0:\n            return status, None\n\n        answers = []\n        for _ in self.sample[\"test\"]:\n            answers.append([])\n\n        result_generated = False\n        for test_n, test_data in enumerate(self.sample[\"test\"]):\n            original_image = self.get_images(test_n, train=False)\n            color_scheme = self.sample[\"test\"][test_n]\n            for n_factor, factor in enumerate(self.factors):\n                if factor[0] > 0 and factor[1] > 0:\n                    status, prediction = self.predict_output(\n                        original_image,\n                        color_scheme,\n                        factor,\n                        self.solution_candidates[n_factor],\n                        self.sample[\"test\"][test_n][\"blocks\"],\n                    )\n                    if status == 0:\n                        answers[test_n].append(self.process_prediction(prediction, original_image=original_image))\n                        result_generated = True\n\n        if result_generated:\n            if \"mode\" in self.params and self.params[\"mode\"]:\n                for i in range(len(answers)):\n                    answer = mode(np.stack(answers[i]), axis=0).mode[0]\n                    answers[i] = [answer]\n            return 0, answers\n        else:\n            return 3, None\n        \n        \nclass ReconstructMosaic(Predictor):\n    \"\"\"reconstruct mosaic\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        if \"simple_mode\" not in self.params:\n            self.params[\"simple_mode\"] = True\n\n    def check_surface(self, image, i, j, block, color, bg, rotate):\n        b = (image.shape[0] - i) \/\/ block.shape[0] + int(((image.shape[0] - i) % block.shape[0]) > 0)\n        r = (image.shape[1] - j) \/\/ block.shape[1] + int(((image.shape[1] - j) % block.shape[1]) > 0)\n        t = (i) \/\/ block.shape[0] + int((i) % block.shape[0] > 0)\n        l = (j) \/\/ block.shape[1] + int((j) % block.shape[1] > 0)\n\n        full_image = np.ones(((b + t) * block.shape[0], (r + l) * block.shape[1])) * color\n        start_i = (block.shape[0] - i) % block.shape[0]\n        start_j = (block.shape[1] - j) % block.shape[1]\n\n        full_image[start_i : start_i + image.shape[0], start_j : start_j + image.shape[1]] = image\n\n        for k in range(b + t):\n            for n in range(r + l):\n                new_block = full_image[\n                    k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                ]\n                if (new_block == color).sum() < (block == color).sum():\n                    block = new_block.copy()\n\n        blocks = []\n        for k in range(b + t):\n            for n in range(r + l):\n                new_block = full_image[\n                    k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                ]\n                mask = np.logical_and(new_block != color, block != color)\n                if (new_block == block)[mask].all():\n                    blocks.append(new_block)\n                else:\n                    if rotate:\n                        success = False\n                        if new_block.shape[0] != new_block.shape[1]:\n                            rotations = [0, 2]\n                        else:\n                            rotations = [0, 1, 2, 3]\n                        for rotation in rotations:\n                            for transpose in [True, False]:\n                                rotated_block = np.rot90(new_block.copy(), rotation)\n                                if transpose:\n                                    rotated_block = rotated_block[::-1]\n                                mask = np.logical_and(block != color, rotated_block != color)\n                                if (block == rotated_block)[mask].all():\n                                    blocks.append(rotated_block)\n                                    success = True\n                                    break\n                            if success:\n                                break\n                        if not success:\n                            return 1, None\n                    else:\n                        return 1, None\n\n        new_block = block.copy()\n        for curr_block in blocks:\n            mask = np.logical_and(new_block != color, curr_block != color)\n            if (new_block == curr_block)[mask].all():\n                new_block[new_block == color] = curr_block[new_block == color]\n            else:\n                return 2, None\n\n        if (new_block == color).any() and not bg:\n            temp_array = np.concatenate([new_block, new_block], 0)\n            temp_array = np.concatenate([temp_array, temp_array], 1)\n            for k in range(new_block.shape[0]):\n                for n in range(new_block.shape[1]):\n                    current_array = temp_array[k : k + new_block.shape[0], n : n + new_block.shape[1]]\n                    mask = np.logical_and(new_block != color, current_array != color)\n                    if (new_block == current_array)[mask].all():\n                        new_block[new_block == color] = current_array[new_block == color]\n        if (new_block == color).any() and not bg:\n            return 3, None\n\n        for k in range(b + t):\n            for n in range(r + l):\n                if rotate:\n                    current_array = full_image[\n                        k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                    ]\n                    if rotate:\n                        success = False\n                        if current_array.shape[0] != current_array.shape[1]:\n                            rotations = [0, 2]\n                        else:\n                            rotations = [0, 1, 2, 3]\n                    for rotation in rotations:\n                        for transpose in [True, False]:\n                            rotated_block = np.rot90(new_block.copy(), rotation)\n                            if transpose:\n                                rotated_block = rotated_block[::-1]\n                            mask = np.logical_and(rotated_block != color, current_array != color)\n                            if (rotated_block == current_array)[mask].all():\n                                full_image[\n                                    k * block.shape[0] : (k + 1) * block.shape[0],\n                                    n * block.shape[1] : (n + 1) * block.shape[1],\n                                ] = rotated_block\n                                success = True\n                                break\n                        if success:\n                            break\n                else:\n                    full_image[\n                        k * block.shape[0] : (k + 1) * block.shape[0], n * block.shape[1] : (n + 1) * block.shape[1]\n                    ] = new_block\n\n        result = full_image[start_i : start_i + image.shape[0], start_j : start_j + image.shape[1]]\n        return 0, result\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        k = 0\n        itteration_list1 = list(range(2, sum(image.shape)))\n        if params[\"big_first\"]:\n            itteration_list1 = list(\n                range(2, (image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum() + 1)\n            )\n            itteration_list1 = itteration_list1[::-1]\n        if params[\"largest_non_bg\"]:\n            itteration_list1 = [(image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum()]\n        for size in itteration_list1:\n            if params[\"direction\"] == \"all\":\n                itteration_list = list(range(1, size))\n            elif params[\"direction\"] == \"vert\":\n                itteration_list = [image.shape[0]]\n            else:\n                itteration_list = [size - image.shape[1]]\n            if params[\"largest_non_bg\"]:\n                itteration_list = [(image != params[\"color\"]).max(1).sum()]\n            for i_size in itteration_list:\n                j_size = size - i_size\n                if j_size < 1 or i_size < 1:\n                    continue\n                block = image[0 : 0 + i_size, 0 : 0 + j_size]\n                status, predict = self.check_surface(\n                    image, 0, 0, block, params[\"color\"], params[\"have_bg\"], params[\"rotate_block\"]\n                )\n                if status != 0:\n                    continue\n                if k == params[\"k_th_block\"]:\n                    return 0, predict\n                else:\n                    k += 1\n                    continue\n\n        return 1, None\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        local_candidates = []\n        original_image, target_image = self.get_images(k)\n        if original_image.shape != target_image.shape:\n            return 1, None\n\n        if initial:\n            directions = [\"all\", \"vert\", \"hor\"]\n            big_first_options = [True, False]\n            largest_non_bg_options = [True, False]\n            have_bg_options = [True, False]\n            if self.params[\"simple_mode\"]:\n                rotate_block_options = [False]\n                k_th_block_options = [0]\n            else:\n                rotate_block_options = [True, False]\n                k_th_block_options = list(range(10))\n        else:\n            directions = list({params[\"direction\"] for params in self.solution_candidates})\n            big_first_options = list({params[\"big_first\"] for params in self.solution_candidates})\n            largest_non_bg_options = list({params[\"largest_non_bg\"] for params in self.solution_candidates})\n            have_bg_options = list({params[\"have_bg\"] for params in self.solution_candidates})\n            rotate_block_options = list({params[\"rotate_block\"] for params in self.solution_candidates})\n            k_th_block_options = list({params[\"k_th_block\"] for params in self.solution_candidates})\n\n        for largest_non_bg in largest_non_bg_options:\n            for color in self.sample[\"train\"][k][\"colors_sorted\"]:\n                for direction in directions:\n                    for big_first in big_first_options:\n                        if largest_non_bg and not big_first:\n                            continue\n                        for have_bg in have_bg_options:\n                            if largest_non_bg and not have_bg:\n                                continue\n                            if (target_image == color).any() and not have_bg:\n                                continue\n                            for rotate_block in rotate_block_options:\n                                for k_th_block in k_th_block_options:\n                                    params = {\n                                        \"color\": color,\n                                        \"direction\": direction,\n                                        \"big_first\": big_first,\n                                        \"have_bg\": have_bg,\n                                        \"rotate_block\": rotate_block,\n                                        \"k_th_block\": k_th_block,\n                                        \"largest_non_bg\": largest_non_bg,\n                                    }\n\n                                    local_candidates = local_candidates + self.add_candidates_list(\n                                        original_image, target_image, self.sample[\"train\"][k], params\n                                    )\n        return self.update_solution_candidates(local_candidates, initial)\n\n\nclass ReconstructMosaicExtract(ReconstructMosaic):\n    \"\"\"returns the reconstructed part of the mosaic\"\"\"\n\n    def __init__(self, params=None, preprocess_params=None):\n        super().__init__(params, preprocess_params)\n        if \"simple_mode\" not in self.params:\n            self.params[\"simple_mode\"] = True\n\n    def predict_output(self, image, params):\n        \"\"\" predicts 1 output image given input image and prediction params\"\"\"\n        k = 0\n        mask = image == params[\"color\"]\n        sum0 = mask.sum(0)\n        sum1 = mask.sum(1)\n        indices0 = np.arange(len(sum1))[sum1 > 0]\n        indices1 = np.arange(len(sum0))[sum0 > 0]\n\n        itteration_list1 = list(range(2, sum(image.shape)))\n        if params[\"big_first\"]:\n            itteration_list1 = list(\n                range(2, (image != params[\"color\"]).max(1).sum() + (image != params[\"color\"]).max(0).sum() + 1)\n            )\n            itteration_list1 = itteration_list1[::-1]\n        for size in itteration_list1:\n            if params[\"direction\"] == \"all\":\n                itteration_list = list(range(1, size))\n            elif params[\"direction\"] == \"vert\":\n                itteration_list = [image.shape[0]]\n            else:\n                itteration_list = [size - image.shape[1]]\n            for i_size in itteration_list:\n                j_size = size - i_size\n                if j_size < 1 or i_size < 1:\n                    continue\n                block = image[0 : 0 + i_size, 0 : 0 + j_size]\n                status, predict = self.check_surface(\n                    image, 0, 0, block, params[\"color\"], params[\"have_bg\"], params[\"rotate_block\"]\n                )\n                if status != 0:\n                    continue\n                if k == params[\"k_th_block\"]:\n                    predict = predict[indices0.min() : indices0.max() + 1, indices1.min() : indices1.max() + 1]\n                    return 0, predict\n                else:\n                    k += 1\n                    continue\n\n        return 1, None\n\n    def process_one_sample(self, k, initial=False):\n        \"\"\" processes k train sample and updates self.solution_candidates\"\"\"\n        local_candidates = []\n        original_image, target_image = self.get_images(k)\n\n        if initial:\n            directions = [\"vert\", \"hor\", \"all\"]\n            big_first_options = [True, False]\n            largest_non_bg_options = [True, False]\n            have_bg_options = [True, False]\n            if self.params[\"simple_mode\"]:\n                rotate_block_options = [False]\n                k_th_block_options = [0]\n            else:\n                rotate_block_options = [True, False]\n                k_th_block_options = list(range(10))\n        else:\n            directions = list({params[\"direction\"] for params in self.solution_candidates})\n            big_first_options = list({params[\"big_first\"] for params in self.solution_candidates})\n            have_bg_options = list({params[\"have_bg\"] for params in self.solution_candidates})\n            largest_non_bg_options = list({params[\"largest_non_bg\"] for params in self.solution_candidates})\n            rotate_block_options = list({params[\"rotate_block\"] for params in self.solution_candidates})\n            k_th_block_options = list({params[\"k_th_block\"] for params in self.solution_candidates})\n\n        for largest_non_bg in largest_non_bg_options:\n            for color in self.sample[\"train\"][k][\"colors_sorted\"]:\n                mask = original_image == color\n                sum0 = mask.sum(0)\n                sum1 = mask.sum(1)\n\n                if len(np.unique(sum0)) != 2 or len(np.unique(sum1)) != 2:\n                    continue\n                if target_image.shape[0] != max(sum0) or target_image.shape[1] != max(sum1):\n                    continue\n                for direction in directions:\n                    for big_first in big_first_options:\n                        if largest_non_bg and not big_first:\n                            continue\n                        for have_bg in have_bg_options:\n                            if largest_non_bg and not have_bg:\n                                continue\n                            if (target_image == color).any() and not have_bg:\n                                continue\n                            for rotate_block in rotate_block_options:\n                                for k_th_block in k_th_block_options:\n                                    params = {\n                                        \"color\": color,\n                                        \"direction\": direction,\n                                        \"big_first\": big_first,\n                                        \"have_bg\": have_bg,\n                                        \"rotate_block\": rotate_block,\n                                        \"k_th_block\": k_th_block,\n                                    }\n\n                                    local_candidates = local_candidates + self.add_candidates_list(\n                                        original_image, target_image, self.sample[\"train\"][k], params\n                                    )\n        return self.update_solution_candidates(local_candidates, initial)","c2eff01f":"import json\nimport multiprocessing\nimport os\nimport time\nimport pandas as pd\n\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\n\nfrom tqdm.notebook import tqdm\nfrom functools import partial\n\nimport signal\nimport sys\nimport psutil\n\n\ndef sigterm_handler(_signo, _stack_frame):\n    sys.exit(0)\n\n\ndef process_file(\n    file_path,\n    PATH,\n    predictors,\n    preprocess_params=None,\n    color_params=None,\n    show_results=True,\n    break_after_answer=False,\n    queue=None,\n    process_whole_ds=False,\n):\n    with open(os.path.join(PATH, file_path), \"r\") as file:\n        sample = json.load(file)\n\n    submission_list = []\n    sample = preprocess_sample(\n        sample, params=preprocess_params, color_params=color_params, process_whole_ds=process_whole_ds\n    )\n\n    signal.signal(signal.SIGTERM, sigterm_handler)\n\n    for predictor in predictors:\n        try:\n            submission_list = []\n            result, answer = predictor(sample)\n            if result == 0:\n                if show_results:\n                    show_sample(sample)\n\n                for j in range(len(answer)):\n                    answers = set([])\n                    for k in range(len(answer[j])):\n                        str_answer = matrix2answer(answer[j][k])\n                        if str_answer not in answers:\n                            if show_results and k < 3:\n                                plt.matshow(answer[j][k], cmap=\"Set3\", norm=mpl.colors.Normalize(vmin=0, vmax=9))\n                                plt.show()\n                                print(file_path, str_answer)\n                            answers.add(str_answer)\n                            submission_list.append({\"output_id\": file_path[:-5] + \"_\" + str(j), \"output\": str_answer})\n            if queue is not None:\n                queue.put(submission_list)\n            if break_after_answer:\n                break\n        except SystemExit:\n            break\n    time.sleep(1)\n    return\n\n\ndef run_parallel(\n    files_list,\n    PATH,\n    predictors,\n    preprocess_params=None,\n    color_params=None,\n    show_results=True,\n    break_after_answer=False,\n    processes=20,\n    timeout=300,\n    max_memory_by_process=1.4e10,\n    process_whole_ds=False,\n):\n    process_list = []\n    timing_list = []\n\n    queue = multiprocessing.Queue(10000)\n    func = partial(\n        process_file,\n        PATH=PATH,\n        predictors=predictors,\n        preprocess_params=preprocess_params,\n        color_params=color_params,\n        show_results=show_results,\n        break_after_answer=break_after_answer,\n        queue=queue,\n        process_whole_ds=process_whole_ds,\n    )\n\n    result = []\n    with tqdm(total=len(files_list)) as pbar:\n        num_finished_previous = 0\n        try:\n            while True:\n\n                num_finished = 0\n                for process, start_time in zip(process_list, timing_list):\n                    if process.is_alive():\n                        if time.time() - start_time > timeout:\n                            process.terminate()\n                            while not queue.empty():\n                                result = result + queue.get()\n                            process.join(10)\n                            print(\"Time out. The process is killed.\")\n                            num_finished += 1\n                        else:\n                            process_data = psutil.Process(process.pid)\n                            if process_data.memory_info().rss > max_memory_by_process:\n                                process.terminate()\n                                while not queue.empty():\n                                    result = result + queue.get()\n                                process.join(10)\n                                print(\"Memory limit is exceeded. The process is killed.\")\n                                num_finished += 1\n\n                    else:\n                        num_finished += 1\n\n                if num_finished == len(files_list):\n                    pbar.update(len(files_list) - num_finished_previous)\n                    time.sleep(0.1)\n                    break\n                elif len(process_list) - num_finished < processes and len(process_list) < len(files_list):\n                    p = multiprocessing.Process(target=func, args=(files_list[len(process_list)],))\n                    process_list.append(p)\n                    timing_list.append(time.time())\n                    p.start()\n                pbar.update(num_finished - num_finished_previous)\n                num_finished_previous = num_finished\n                # print(f\"num_finished: {num_finished}, total_num: {len(process_list)}\")\n                while not queue.empty():\n                    result = result + queue.get()\n                time.sleep(0.1)\n        except KeyboardInterrupt:\n            for process in process_list:\n                process.terminate()\n                process.join(5)\n            print(\"Got Ctrl+C\")\n        except Exception as error:\n            for process in process_list:\n                process.terminate()\n                process.join(5)\n            print(f\"Function raised {error}\")\n\n    return result\n\n\ndef generate_submission(predictions_list, sample_submission_path=\"data\/sample_submission.csv\"):\n    submission = pd.read_csv(sample_submission_path).to_dict(\"records\")\n\n    initial_ids = set([data[\"output_id\"] for data in submission])\n    new_submission = []\n\n    ids = set([data[\"output_id\"] for data in predictions_list])\n    for output_id in ids:\n        predicts = list(set([data[\"output\"] for data in predictions_list if data[\"output_id\"] == output_id]))\n        output = \" \".join(predicts[:3])\n        new_submission.append({\"output_id\": output_id, \"output\": output})\n\n    for output_id in initial_ids:\n        if not output_id in ids:\n            new_submission.append({\"output_id\": output_id, \"output\": \"\"})\n\n    return pd.DataFrame(new_submission)\n\n\ndef combine_submission_files(list_of_dfs, sample_submission_path=\"data\/sample_submission.csv\"):\n    submission = pd.read_csv(sample_submission_path)\n\n    list_of_outputs = []\n    for df in list_of_dfs:\n        list_of_outputs.append(df.sort_values(by=\"output_id\")[\"output\"].astype(str).values)\n\n    merge_output = []\n    for i in range(len(list_of_outputs[0])):\n        list_of_answ = [\n            [x.strip() for x in output[i].strip().split(\" \") if x.strip() != \"\"] for output in list_of_outputs\n        ]\n        list_of_answ = [x for x in list_of_answ if len(x) != 0]\n        total_len = len(list(set([item for sublist in list_of_answ for item in sublist])))\n#         print(total_len)\n        while total_len > 3:\n            for j in range(1, len(list_of_answ) + 1):\n                if len(list_of_answ[-j]) > (j > len(list_of_answ) - 3):\n                    list_of_answ[-j] = list_of_answ[-j][:-1]\n                    break\n            total_len = len(list(set([item for sublist in list_of_answ for item in sublist])))\n\n        o = list(set([item for sublist in list_of_answ for item in sublist]))\n        answer = \" \".join(o[:3]).strip()\n        while answer.find(\"  \") > 0:\n            answer = answer.replace(\"  \", \" \")\n        merge_output.append(answer)\n    submission[\"output\"] = merge_output\n    submission[\"output\"] = submission[\"output\"].astype(str)\n    return submission","ba4bb568":"TEST_PATH = '\/kaggle\/input\/abstraction-and-reasoning-challenge\/test'\nif debug:\n    test_files = [x for x in os.listdir(TEST_PATH) if x[-3:]=='son'][:2]\nelse:\n    test_files = [x for x in os.listdir(TEST_PATH) if x[-3:]=='son']\n    \nif fast_submit and \"00576224.json\" in test_files:\n    test_files = test_files[:2]","19d3e805":"params = {\"skip_train\": 1}\npredictors= [\n    ReconstructMosaic(params),\n    ReconstructMosaicExtract(params),\n]\n\npreprocess_params = [\"initial\"]\n\ncolor_params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\nsubmission_list = run_parallel(\n    test_files, \n    TEST_PATH, \n    predictors, \n    preprocess_params, \n    color_params, \n    timeout = 300, \n    processes = 2,\n    max_memory_by_process = 0.5e+10,\n    show_results = True\n)\n\nsub_df1 = generate_submission(submission_list, '\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nsub_df1.head()","b7720238":"predictors= [Puzzle({\"intersection\": 0})]\n                    \npreprocess_params = [\n    \"initial\",\n    \"block_with_side_colors\",\n    \"min_max_blocks\",\n    \"max_area_covered\",\n]\n\ncolor_params = [\"coverage\", \"unique\", \"corners\", \"top\", \"grid\"]\n\nsubmission_list = run_parallel(\n    test_files, \n    TEST_PATH, \n    predictors, \n    preprocess_params, \n    color_params, \n    timeout = 300, \n    processes = 2,\n    max_memory_by_process = 0.5e+10,\n    show_results = True,\n    process_whole_ds = True\n)\n\nsub_df2 = generate_submission(submission_list, '\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nsub_df2.head()","2a059201":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nimport numpy as np\nfrom xgboost import XGBClassifier\nimport pdb\n\n\n\ndata_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\n\ndef plot_result(test_input, test_prediction,\n                input_shape):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, 2, figsize=(15,15))\n    test_input = test_input.reshape(input_shape[0],input_shape[1])\n    axs[0].imshow(test_input, cmap=cmap, norm=norm)\n    axs[0].axis('off')\n    axs[0].set_title('Actual Target')\n    test_prediction = test_prediction.reshape(input_shape[0],input_shape[1])\n    axs[1].imshow(test_prediction, cmap=cmap, norm=norm)\n    axs[1].axis('off')\n    axs[1].set_title('Model Prediction')\n    plt.tight_layout()\n    plt.show()\n    \ndef plot_test(test_prediction, task_name):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    fig, axs = plt.subplots(1, 1, figsize=(15,15))\n    axs.imshow(test_prediction, cmap=cmap, norm=norm)\n    axs.axis('off')\n    axs.set_title(f'Test Prediction {task_name}')\n    plt.tight_layout()\n    plt.show()\n    \n# https:\/\/www.kaggle.com\/inversion\/abstraction-and-reasoning-starter-notebook\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred\n\n\n\nsample_sub1 = pd.read_csv(data_path\/'sample_submission.csv')\nsample_sub1['output'] = ''\nsample_sub1 = sample_sub1.set_index('output_id')\n\n\ndef get_moore_neighbours(color, cur_row, cur_col, nrows, ncols):\n\n    if cur_row<=0: top = -1\n    else: top = color[cur_row-1][cur_col]\n        \n    if cur_row>=nrows-1: bottom = -1\n    else: bottom = color[cur_row+1][cur_col]\n        \n    if cur_col<=0: left = -1\n    else: left = color[cur_row][cur_col-1]\n        \n    if cur_col>=ncols-1: right = -1\n    else: right = color[cur_row][cur_col+1]\n        \n    return top, bottom, left, right\n\ndef get_tl_tr(color, cur_row, cur_col, nrows, ncols):\n        \n    if cur_row==0:\n        top_left = -1\n        top_right = -1\n    else:\n        if cur_col==0: top_left=-1\n        else: top_left = color[cur_row-1][cur_col-1]\n        if cur_col==ncols-1: top_right=-1\n        else: top_right = color[cur_row-1][cur_col+1]   \n        \n    return top_left, top_right\n\ndef make_features(input_color, nfeat):\n    nrows, ncols = input_color.shape\n    feat = np.zeros((nrows*ncols,nfeat))\n    cur_idx = 0\n    for i in range(nrows):\n        for j in range(ncols):\n            feat[cur_idx,0] = i\n            feat[cur_idx,1] = j\n            feat[cur_idx,2] = input_color[i][j]\n            feat[cur_idx,3:7] = get_moore_neighbours(input_color, i, j, nrows, ncols)\n            feat[cur_idx,7:9] = get_tl_tr(input_color, i, j, nrows, ncols)\n            feat[cur_idx,9] = len(np.unique(input_color[i,:]))\n            feat[cur_idx,10] = len(np.unique(input_color[:,j]))\n            feat[cur_idx,11] = (i+j)\n            feat[cur_idx,12] = len(np.unique(input_color[i-local_neighb:i+local_neighb,\n                                                         j-local_neighb:j+local_neighb]))\n\n            cur_idx += 1\n        \n    return feat\n\ndef features(task, mode='train'):\n    num_train_pairs = len(task[mode])\n    feat, target = [], []\n    \n    global local_neighb\n    for task_num in range(num_train_pairs):\n        input_color = np.array(task[mode][task_num]['input'])\n        #print(input_color)\n        target_color = task[mode][task_num]['output']\n        #print(target_color)\n        nrows, ncols = len(task[mode][task_num]['input']), len(task[mode][task_num]['input'][0])\n\n        target_rows, target_cols = len(task[mode][task_num]['output']), len(task[mode][task_num]['output'][0])\n        \n        if (target_rows!=nrows) or (target_cols!=ncols):\n            print('Number of input rows:',nrows,'cols:',ncols)\n            print('Number of target rows:',target_rows,'cols:',target_cols)\n            not_valid=1\n            return None, None, 1\n\n        imsize = nrows*ncols\n        feat.extend(make_features(input_color, nfeat))\n        target.extend(np.array(target_color).reshape(-1,))\n            \n    return np.array(feat), np.array(target), 0\n\n# mode = 'eval'\nmode = 'test'\nif mode=='eval':\n    task_path = evaluation_path\nelif mode=='train':\n    task_path = training_path\nelif mode=='test':\n    task_path = test_path\n\nall_task_ids = sorted(os.listdir(task_path))\n\nnfeat = 13\nlocal_neighb = 5\nvalid_scores = {}\n\nmodel_accuracies = {'ens': []}\npred_taskids = []\n\nfor task_id in all_task_ids:\n\n    task_file = str(task_path \/ task_id)\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n\n    feat, target, not_valid = features(task)\n    if not_valid:\n        print('ignoring task', task_file)\n        print()\n        not_valid = 0\n        continue\n\n    xgb =  XGBClassifier(n_estimators=10, n_jobs=-1)\n    xgb.fit(feat, target, verbose=-1)\n\n\n#     training on input pairs is done.\n#     test predictions begins here\n\n    num_test_pairs = len(task['test'])\n    for task_num in range(num_test_pairs):\n        cur_idx = 0\n        input_color = np.array(task['test'][task_num]['input'])\n        nrows, ncols = len(task['test'][task_num]['input']), len(\n            task['test'][task_num]['input'][0])\n        feat = make_features(input_color, nfeat)\n\n        print('Made predictions for ', task_id[:-5])\n\n        preds = xgb.predict(feat).reshape(nrows,ncols)\n        \n        if (mode=='train') or (mode=='eval'):\n            ens_acc = (np.array(task['test'][task_num]['output'])==preds).sum()\/(nrows*ncols)\n\n            model_accuracies['ens'].append(ens_acc)\n\n            pred_taskids.append(f'{task_id[:-5]}_{task_num}')\n\n        preds = preds.astype(int).tolist()\n        sample_sub1.loc[f'{task_id[:-5]}_{task_num}',\n                       'output'] = flattener(preds)","9e38127d":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\nevaluation_path = data_path \/ 'evaluation'\ntest_path = data_path \/ 'test'\ntraining_tasks = sorted(os.listdir(training_path))\neval_tasks = sorted(os.listdir(evaluation_path))\n\n\nT = training_tasks\nTrains = []\nfor i in range(400):\n    task_file = str(training_path \/ T[i])\n    task = json.load(open(task_file, 'r'))\n    Trains.append(task)\n    \nE = eval_tasks\nEvals= []\nfor i in range(400):\n    task_file = str(evaluation_path \/ E[i])\n    task = json.load(open(task_file, 'r'))\n    Evals.append(task)\n    \n    \ncmap = colors.ListedColormap(\n    ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n     '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\n# 0:black, 1:blue, 2:red, 3:greed, 4:yellow,\n# 5:gray, 6:magenta, 7:orange, 8:sky, 9:brown\nplt.figure(figsize=(5, 2), dpi=200)\nplt.imshow([list(range(10))], cmap=cmap, norm=norm)\nplt.xticks(list(range(10)))\nplt.yticks([])\nplt.show()\n\ndef plot_task(task):\n    n = len(task[\"train\"]) + len(task[\"test\"])\n    fig, axs = plt.subplots(2, n, figsize=(4*n,8), dpi=50)\n    plt.subplots_adjust(wspace=0, hspace=0)\n    fig_num = 0\n    for i, t in enumerate(task[\"train\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Train-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Train-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    for i, t in enumerate(task[\"test\"]):\n        t_in, t_out = np.array(t[\"input\"]), np.array(t[\"output\"])\n        axs[0][fig_num].imshow(t_in, cmap=cmap, norm=norm)\n        axs[0][fig_num].set_title(f'Test-{i} in')\n        axs[0][fig_num].set_yticks(list(range(t_in.shape[0])))\n        axs[0][fig_num].set_xticks(list(range(t_in.shape[1])))\n        axs[1][fig_num].imshow(t_out, cmap=cmap, norm=norm)\n        axs[1][fig_num].set_title(f'Test-{i} out')\n        axs[1][fig_num].set_yticks(list(range(t_out.shape[0])))\n        axs[1][fig_num].set_xticks(list(range(t_out.shape[1])))\n        fig_num += 1\n    \n    plt.tight_layout()\n    plt.show()\n    \n\ndef plot_picture(x):\n    plt.imshow(np.array(x), cmap = cmap, norm = norm)\n    plt.show()\n    \n    \ndef Defensive_Copy(A): \n    n = len(A)\n    k = len(A[0])\n    L = np.zeros((n,k), dtype = int)\n    for i in range(n):\n        for j in range(k):\n            L[i,j] = 0 + A[i][j]\n    return L.tolist()\n\n\ndef Create(task, task_id = 0):\n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][i]['input']) for i in range(n)]\n    Output = [Defensive_Copy(task['train'][i]['output']) for i in range(n)]\n    Input.append(Defensive_Copy(task['test'][task_id]['input']))\n    return Input, Output\n\n\ndef Recolor(task):\n    Input = task[0]\n    Output = task[1]\n    Test_Picture = Input[-1]\n    Input = Input[:-1]\n    N = len(Input)\n    \n    for x, y in zip(Input, Output):\n        if len(x) != len(y) or len(x[0]) != len(y[0]):\n            return -1\n        \n    Best_Dict = -1\n    Best_Q1 = -1\n    Best_Q2 = -1\n    Best_v = -1\n    # v ranges from 0 to 3. This gives an extra flexibility of measuring distance from any of the 4 corners\n    Pairs = []\n    for t in range(15):\n        for Q1 in range(1,8):\n            for Q2 in range(1,8):\n                if Q1+Q2 == t:\n                    Pairs.append((Q1,Q2))\n                    \n    for Q1, Q2 in Pairs:\n        for v in range(4):\n    \n  \n            if Best_Dict != -1:\n                continue\n            possible = True\n            Dict = {}\n                      \n            for x, y in zip(Input, Output):\n                n = len(x)\n                k = len(x[0])\n                for i in range(n):\n                    for j in range(k):\n                        if v == 0 or v ==2:\n                            p1 = i%Q1\n                        else:\n                            p1 = (n-1-i)%Q1\n                        if v == 0 or v ==3:\n                            p2 = j%Q2\n                        else :\n                            p2 = (k-1-j)%Q2\n                        color1 = x[i][j]\n                        color2 = y[i][j]\n                        if color1 != color2:\n                            rule = (p1, p2, color1)\n                            if rule not in Dict:\n                                Dict[rule] = color2\n                            elif Dict[rule] != color2:\n                                possible = False\n            if possible:\n                \n                # Let's see if we actually solve the problem\n                for x, y in zip(Input, Output):\n                    n = len(x)\n                    k = len(x[0])\n                    for i in range(n):\n                        for j in range(k):\n                            if v == 0 or v ==2:\n                                p1 = i%Q1\n                            else:\n                                p1 = (n-1-i)%Q1\n                            if v == 0 or v ==3:\n                                p2 = j%Q2\n                            else :\n                                p2 = (k-1-j)%Q2\n                           \n                            color1 = x[i][j]\n                            rule = (p1,p2,color1)\n                            \n                            if rule in Dict:\n                                color2 = 0 + Dict[rule]\n                            else:\n                                color2 = 0 + y[i][j]\n                            if color2 != y[i][j]:\n                                possible = False \n                if possible:\n                    Best_Dict = Dict\n                    Best_Q1 = Q1\n                    Best_Q2 = Q2\n                    Best_v = v\n                \n                \n    if Best_Dict == -1:\n        return -1 #meaning that we didn't find a rule that works for the traning cases\n    \n    #Otherwise there is a rule: so let's use it:\n    n = len(Test_Picture)\n    k = len(Test_Picture[0])\n    \n    answer = np.zeros((n,k), dtype = int)\n   \n    for i in range(n):\n        for j in range(k):\n            if Best_v == 0 or Best_v ==2:\n                p1 = i%Best_Q1\n            else:\n                p1 = (n-1-i)%Best_Q1\n            if Best_v == 0 or Best_v ==3:\n                p2 = j%Best_Q2\n            else :\n                p2 = (k-1-j)%Best_Q2\n           \n            color1 = Test_Picture[i][j]\n            rule = (p1, p2, color1)\n            if (p1, p2, color1) in Best_Dict:\n                answer[i][j] = 0 + Best_Dict[rule]\n            else:\n                answer[i][j] = 0 + color1\n                                    \n           \n            \n    return answer.tolist()\n\n\nFunction = Recolor\n\ntraining_examples = []\nfor i in range(400):\n    task = Trains[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n  \n    if  a != -1 and task['test'][0]['output'] == a:\n        plot_picture(a)\n        plot_task(task)\n        print(i)\n        training_examples.append(i)\n        \n        \nevaluation_examples = []\n\n\nfor i in range(400):\n    task = Evals[i]\n    basic_task = Create(task,0)\n    a = Function(basic_task)\n    \n    if a != -1 and task['test'][0]['output'] == a:\n       \n        plot_picture(a)\n        plot_task(task)\n        print(i)\n        evaluation_examples.append(i)\n        \n        \nsample_sub2 = pd.read_csv(data_path\/ 'sample_submission.csv')\nsample_sub2.head()\n\n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred\n\n\nexample_grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ndisplay(example_grid)\nprint(flattener(example_grid))\n\nSolved = []\nProblems = sample_sub2['output_id'].values\nProposed_Answers = []\nfor i in  range(len(Problems)):\n    output_id = Problems[i]\n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    f = str(test_path \/ str(task_id + '.json'))\n   \n    with open(f, 'r') as read_file:\n        task = json.load(read_file)\n    \n    n = len(task['train'])\n    Input = [Defensive_Copy(task['train'][j]['input']) for j in range(n)]\n    Output = [Defensive_Copy(task['train'][j]['output']) for j in range(n)]\n    Input.append(Defensive_Copy(task['test'][pair_id]['input']))\n    \n    solution = Recolor([Input, Output])\n   \n    \n    pred = ''\n        \n    if solution != -1:\n        Solved.append(i)\n        pred1 = flattener(solution)\n        pred = pred+pred1+' '\n        \n#     if pred == '':\n#         pred = flattener(example_grid)\n        \n    Proposed_Answers.append(pred)\n    \nsample_sub2['output'] = Proposed_Answers","d4637292":"final_submission = combine_submission_files([final_sub1, final_sub2, sub_df1,sub_df2, sample_sub1, sample_sub2],'\/kaggle\/input\/abstraction-and-reasoning-challenge\/sample_submission.csv')\nfinal_submission.to_csv(\"submission.csv\", index=False)","c7a06eb8":"final_submission.head()","5f41fc6c":"The following code is based on https:\/\/www.kaggle.com\/meaninglesslives\/using-decision-trees-for-arc","d1cd3cd8":"Link to the [separate notebook](https:\/\/www.kaggle.com\/golubev\/7-solved-tasks-via-trees).","cc26ecd0":"# 5 tasks DSL","6560653a":"# Final predictions blend","6c31d61e":"This notebook contains our simplified final solution. We have already [published](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/154305) all separate parts of it and this notebook is the end-to-end solution reproducing 0.813 result.","17ac5b82":"# Trees solving 7 tasks","159e4007":"Link to the [separate notebook](https:\/\/www.kaggle.com\/golubev\/arc-8solved-3grid-5tiles-no-ml).","70a1d28a":"The following code is based on https:\/\/www.kaggle.com\/szabo7zoltan\/colorandcountingmoduloq","ac193359":"The following code solves 5 tasks from the test set. I have described my approach [in the github repo](https:\/\/github.com\/IliaLarchenko\/abstract_reasoning) and in [discussions](https:\/\/www.kaggle.com\/c\/abstraction-and-reasoning-challenge\/discussion\/154409), [link to the separate notebook](https:\/\/www.kaggle.com\/ilialar\/5-tasks-part-of-3rd-place-solution)","916b71d3":"# Public notebooks based solutions","e0e77028":"# DSL solving 8 tasks (3Grid+5Tiles)"}}