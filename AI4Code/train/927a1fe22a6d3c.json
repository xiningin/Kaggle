{"cell_type":{"06beab30":"code","6aa5be49":"code","8a026c9f":"code","3122d50a":"code","89632e04":"code","8f5e9a25":"code","e7fad1a2":"code","faaa670e":"code","3e86ad0f":"code","cb47fc16":"code","2a28c285":"code","5b8644ef":"code","aab21fbc":"code","fa521d11":"code","5b3d561f":"code","7f9029d1":"code","d7dc648f":"code","2dc8a180":"code","87a1659a":"code","f08c236e":"code","2b322856":"code","f2f384bb":"markdown","5eb0f009":"markdown","8fd1ff5f":"markdown","f8d34be7":"markdown","df24c8b4":"markdown","128fee5b":"markdown","d17ebfe7":"markdown","c8dc0513":"markdown","c6eda5ba":"markdown"},"source":{"06beab30":"import os\nimport json\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize","6aa5be49":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    print(f\"read from file '{csv_path}'...\")\n    df = pd.read_csv(csv_path,\n                     converters={\n                         column: json.loads for column in JSON_COLUMNS},\n                     dtype={'fullVisitorId': 'str'},  # Important!!\n                     nrows=nrows)\n    print(\"convert columns from json format to plain text...\")\n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [\n            f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(\n            column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded data from '{os.path.basename(csv_path)}'. Shape: {df.shape}\")\n    return df","8a026c9f":"%%time\ntrain_df = load_df()\ntest_df = load_df(\"..\/input\/test.csv\")","3122d50a":"train_df.head()","89632e04":"test_df.head()","8f5e9a25":"set(train_df.columns).difference(set(test_df.columns))","e7fad1a2":"train_df.drop('trafficSource.campaignCode', axis=1, inplace=True)","faaa670e":"nconst_cols_train = [c for c in train_df.columns if train_df[c].nunique(dropna=False) == 1]\nprint(f\"Number of features with constant value in train.csv = {len(nconst_cols_train)}\")\nprint(nconst_cols_train)","3e86ad0f":"nconst_cols_test = [c for c in test_df.columns if test_df[c].nunique(dropna=False) == 1]\nprint(\n    f\"Number of features with constant value in test.csv = {len(nconst_cols_test)}\")\nprint(nconst_cols_test)","cb47fc16":"print(\n    f\"Is two features lists match? {set(nconst_cols_train).intersection(set(nconst_cols_test)) == set(nconst_cols_train)}\"\n)","2a28c285":"train_df.drop(nconst_cols_train, axis=1, inplace=True)\ntest_df.drop(nconst_cols_test, axis=1, inplace=True)\nprint(f\"Train shape: {train_df.shape}\")\nprint(f\"Test shape: {test_df.shape}\")","5b8644ef":"train_df.head()","aab21fbc":"def unique_table(df: pd.DataFrame, show_result=False) -> pd.DataFrame:\n    ret_val = pd.DataFrame(columns=[\"Column\", \"N\", \"Values\"])\n    for column in df.columns:\n        uniq = df[column].unique()\n        ret_val = ret_val.append({\n            \"Column\": column,\n            \"N\": len(uniq),\n            \"Values\": uniq\n        },\n            ignore_index=True)\n    if show_result:\n        for row in ret_val.values:\n            print(\"=\" * 80)\n            print(f\"Column - '{row[0]}' has {row[1]} unique values.\")\n            print(f\"Unique values in '{row[0]}':\")\n            print(\"-\" * 80)\n            print(row[2])\n    return ret_val","fa521d11":"u_val_train = unique_table(train_df)","5b3d561f":"u_val_test = unique_table(test_df)","7f9029d1":"sv_u_val = u_val_train.merge(u_val_test, how=\"left\", on=\"Column\", suffixes=(\"_train\",\"_test\"))","d7dc648f":"def diff_values(x):\n    try:\n        return len(set(x[0]).difference(set(x[1])))\n    except:\n        return \"\"\n    \ndef match_values(x):\n    try:\n        return len(set(x[0]).intersection(set(x[1])))\n    except:\n        return \"\"\n                                      ","2dc8a180":"sv_u_val[\"Diff_train\"] = sv_u_val[[\"Values_train\", \"Values_test\"]].apply(diff_values, axis=1)\nsv_u_val[\"Diff_test\"] = sv_u_val[[\"Values_test\", \"Values_train\"]].apply(diff_values, axis=1)\nsv_u_val[\"Matching\"] = sv_u_val[[\"Values_train\", \"Values_test\"]].apply(match_values, axis=1)","87a1659a":"sv_u_val","f08c236e":"train_df[\"device.isMobile\"] = train_df[\"device.isMobile\"].astype(\"int\")\ntest_df[\"device.isMobile\"] = test_df[\"device.isMobile\"].astype(\"int\")","2b322856":"train_df.to_csv(\"GA_train.csv\", index=False)\ntest_df.to_csv(\"GA_test.csv\", index=False)","f2f384bb":"# Preliminary data processing","5eb0f009":"Columns not present in test data:","8fd1ff5f":"## Load data","f8d34be7":"## Features with constant values: ","df24c8b4":"## Unique values","128fee5b":"**Commands for loading data:**\n```python\ndf_train = pd.read_csv(\"GA_train.csv\", dtype={'fullVisitorId': str})\ndf_test = pd.read_csv(\"GA_test.csv\", dtype={'fullVisitorId': str})\n```\n*If you want to replace dots in column names with underscores:*\n```python\ndf_train.columns = df_train.columns.str.replace(\".\", \"_\")\ndf_test.columns = df_test.columns.str.replace(\".\", \"_\")\n```","d17ebfe7":"Remove features with constant values:","c8dc0513":"## Save data","c6eda5ba":"Replace for device.isMobile:"}}