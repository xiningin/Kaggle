{"cell_type":{"8c3264cb":"code","ad2e3c31":"code","a31d9a13":"code","ec432bab":"code","b8e59020":"code","120a02b1":"code","53a9852a":"code","39d0d060":"code","8b8caaf2":"code","d6bf2b71":"code","96ccd2db":"code","64f67c37":"code","3fefdc4d":"code","cb10b4e9":"code","21d6b311":"code","3ef425a1":"code","8d802ae4":"code","ba168d3d":"code","75ee099e":"code","b4dab69d":"code","71420030":"code","58e6abe4":"code","2d3f6b3b":"code","7248b0b7":"code","5c4a1660":"code","6822e029":"code","329cfe3b":"code","625faed3":"code","81aa859d":"code","9bcd03a2":"code","1ccec720":"code","4421792e":"code","05323a30":"code","f563a2e5":"code","3c4913bd":"code","8b55f1cb":"code","151cdcff":"code","580455b5":"code","ef8ba997":"code","d35aa35e":"code","db0d5a90":"code","784ca4ef":"code","e09a9b46":"code","5e1ddd10":"code","e5214ea8":"code","3ca59f2a":"code","afa9d81f":"code","d8c81d45":"code","0a006c47":"code","4f4996d7":"code","39f66b81":"code","e2ddcacc":"code","1442ed5e":"code","6d7eafd7":"markdown","0302934e":"markdown","108363c0":"markdown","f2d4d829":"markdown","0b0b3e75":"markdown","63175887":"markdown","7383ff74":"markdown","e4082637":"markdown","5dcefe37":"markdown","546e0636":"markdown","82948a15":"markdown","84ab9a3a":"markdown","a924328a":"markdown","62842b7a":"markdown","0cc846a2":"markdown","cefc7b85":"markdown","55eb76e6":"markdown","ba047a97":"markdown","21e02c13":"markdown","1b03febe":"markdown","87f46e5d":"markdown","64af595b":"markdown","ff88df32":"markdown"},"source":{"8c3264cb":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ad2e3c31":"data = pd.read_csv('\/kaggle\/input\/room-occupancy\/file.csv')\nprint(data.shape)\ndata.head()","a31d9a13":"data.info()","ec432bab":"data.describe()","b8e59020":"df = data.copy()","120a02b1":"df['Occupancy'] = df.Occupancy.replace({0:'Emptied',1:'Occupied'}).astype('object')\n\ndf_emptied = df[df['Occupancy'] == 'Emptied']\ndf_occupied = df[df['Occupancy'] == 'Occupied']","53a9852a":"colors=('#453CC9','#22AFF1')\nexplode=[0,0.1]\ndf[\"Occupancy\"].value_counts().plot(kind='pie',shadow=True,explode=explode,colors=colors,autopct='%.2f',figsize=(8,6))\nplt.title('Ratio of occupancy')\nplt.show()","39d0d060":"plt.subplots(figsize=(8,4))\nplt.title('Correlation between variables')\nsns.heatmap(data.corr(),annot=True,cmap='YlGnBu')","8b8caaf2":"plt.figure(figsize = (8,6))\nplt.title('Number of Temperature All Rooms')\nax = plt.hist(df['Temperature'], bins=50, density = False)\nplt.xlabel('Temperatures All Customers')","d6bf2b71":"plt.figure(figsize = (8,6))\nplt.title('Number of Temperature Rooms')\nplt.hist(df_emptied['Temperature'], bins=50, density = False)\nplt.hist(df_occupied['Temperature'], bins=50, density = False)\nplt.xlabel('Temperatures Rooms')","96ccd2db":"plt.figure(figsize = (8,6))\nsns.distplot(df_emptied['Temperature'],label='Empety')\nsns.distplot(df_occupied['Temperature'],label='Occupied')\nplt.legend()","64f67c37":"plt.figure(figsize = (8,6))\nplt.title('Number of Humidity All Rooms')\nax = plt.hist(df['Humidity'], bins=50, density = False)\nplt.xlabel('Humidity All Customers')","3fefdc4d":"plt.figure(figsize = (8,6))\nplt.title('Number of Humidity Rooms')\nplt.hist(df_emptied['Humidity'], bins=50, density = False)\nplt.hist(df_occupied['Humidity'], bins=50, density = False)\nplt.xlabel('Humidity Rooms')","cb10b4e9":"plt.figure(figsize = (8,6))\nsns.distplot(df_emptied['Humidity'],label='Empety')\nsns.distplot(df_occupied['Humidity'],label='Occupied')\nplt.legend()","21d6b311":"plt.figure(figsize = (8,6))\nplt.title('Number of Light All Rooms')\nax = plt.hist(df['Light'], bins=50, density = False)\nplt.xlabel('Light All Customers')","3ef425a1":"plt.figure(figsize = (8,6))\nplt.title('Number of Light Rooms')\nplt.hist(df_emptied['Light'], bins=50, density = False)\nplt.hist(df_occupied['Light'], bins=50, density = False)\nplt.xlabel('Light Rooms')","8d802ae4":"plt.figure(figsize = (8,6))\nsns.distplot(df_emptied['Light'],label='Empety')\nsns.distplot(df_occupied['Light'],label='Occupied')\nplt.legend()","ba168d3d":"plt.figure(figsize = (8,6))\nplt.title('Number of CO2 All Rooms')\nax = plt.hist(df['CO2'], bins=50, density = False)\nplt.xlabel('CO2 All Customers')","75ee099e":"plt.figure(figsize = (8,6))\nplt.title('Number of CO2 Rooms')\nplt.hist(df_emptied['CO2'], bins=50, density = False)\nplt.hist(df_occupied['CO2'], bins=50, density = False)\nplt.xlabel('CO2 Rooms')","b4dab69d":"plt.figure(figsize = (8,6))\nsns.distplot(df_emptied['CO2'],label='Empety')\nsns.distplot(df_occupied['CO2'],label='Occupied')\nplt.legend()","71420030":"plt.figure(figsize = (8,6))\nplt.title('Number of HumidityRatio All Rooms')\nax = plt.hist(df['HumidityRatio'], bins=50, density = False)\nplt.xlabel('HumidityRatio All Customers')","58e6abe4":"plt.figure(figsize = (8,6))\nplt.title('Number of HumidityRatio Rooms')\nplt.hist(df_emptied['HumidityRatio'], bins=50, density = False)\nplt.hist(df_occupied['HumidityRatio'], bins=50, density = False)\nplt.xlabel('HumidityRatio Rooms')","2d3f6b3b":"plt.figure(figsize = (8,6))\nsns.distplot(df_emptied['HumidityRatio'],label='Empety')\nsns.distplot(df_occupied['HumidityRatio'],label='Occupied')\nplt.legend()","7248b0b7":"def clean_outliers(df,features):\n    for i in features:\n        Q1 = df[i].quantile(0.25)\n        Q3 = df[i].quantile(0.75)\n        IQR = (Q3-Q1)\n        print(\"Feature {} has min value: {} max value: {}\".format(i,Q1-IQR*1.5,Q3+IQR*1.5))\n        df = df[((df[i]>(Q1-IQR*1.5))&(df[i]<(Q3+IQR*1.5)))]\n    return df","5c4a1660":"numlist = data.columns\nprint(numlist)","6822e029":"data_clean = clean_outliers(data,numlist)\nprint(\"New shape: \",data_clean.shape)","329cfe3b":"features = data_clean.drop(columns='Occupancy')\ntarget = data_clean['Occupancy']","625faed3":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(features,target,test_size=0.2,random_state=0)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","81aa859d":"from sklearn.metrics import accuracy_score,recall_score,precision_score\nfrom sklearn.metrics import f1_score,confusion_matrix,roc_auc_score\n\ndef evaluation(y_test,y_pred):\n  acc = accuracy_score(y_test,y_pred)\n  rcl = recall_score(y_test,y_pred)\n  f1 = f1_score(y_test,y_pred)\n  auc_score = roc_auc_score(y_test,y_pred)\n  prec_score = precision_score(y_test,y_pred)\n \n\n  metric_dict={'accuracy': round(acc,3),\n               'recall': round(rcl,3),\n               'F1 score': round(f1,3),\n               'auc score': round(auc_score,3),\n               'precision': round(prec_score,3) \n              }\n\n  return print(metric_dict)","9bcd03a2":"Results = pd.DataFrame({'Model': [],'Accuracy Score': [], 'Recall':[], 'F1score':[]})","1ccec720":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(max_depth=4)\ntree.fit(X_train,y_train)\ny_pred1 = tree.predict(X_test)\nres = pd.DataFrame({\"Model\":['DecisionTreeClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred1,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred1)],\n                    \"F1score\": [f1_score(y_test,y_pred1)]})\nResults = Results.append(res)","4421792e":"pd.crosstab(y_test,y_pred1,rownames=['Real data'],colnames=['Predicted'])","05323a30":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=2500,max_depth=4)\nrfc.fit(X_train,y_train)\ny_pred2 = rfc.predict(X_test)\nres = pd.DataFrame({\"Model\":['RandomForestClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred2,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred2)],\n                    \"F1score\": [f1_score(y_test,y_pred2)]})\nResults = Results.append(res)","f563a2e5":"pd.crosstab(y_test,y_pred2,rownames=['Real data'],colnames=['Predicted'])","3c4913bd":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train,y_train)\ny_pred3 = knn.predict(X_test)\nres = pd.DataFrame({\"Model\":['KNeighborsClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred3,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred3)],\n                    \"F1score\": [f1_score(y_test,y_pred3)]})\nResults = Results.append(res)","8b55f1cb":"pd.crosstab(y_test,y_pred3,rownames=['Real data'],colnames=['Predicted'])","151cdcff":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train,y_train)\ny_pred4 = svc.predict(X_test)\nres = pd.DataFrame({\"Model\":['SVC'],\n                    \"Accuracy Score\": [accuracy_score(y_pred4,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred4)],\n                    \"F1score\": [f1_score(y_test,y_pred4)]})\nResults = Results.append(res)","580455b5":"pd.crosstab(y_test,y_pred4,rownames=['Real data'],colnames=['Predicted'])","ef8ba997":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\ny_pred5 = lr.predict(X_test)\nres = pd.DataFrame({\"Model\":['LogisticRegression'],\n                    \"Accuracy Score\": [accuracy_score(y_pred5,y_test)],\n                    \"Recall\": [recall_score(y_test,y_pred5)],\n                    \"F1score\": [f1_score(y_test,y_pred5)]})\nResults = Results.append(res)","d35aa35e":"pd.crosstab(y_test,y_pred5,rownames=['Real data'],colnames=['Predicted'])","db0d5a90":"Results.sort_values(by='Accuracy Score',ascending=True)","784ca4ef":"from sklearn.metrics import classification_report,plot_confusion_matrix,plot_roc_curve","e09a9b46":"model = DecisionTreeClassifier(max_depth=4)\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","5e1ddd10":"print(\" Best evaluation parameters achieved with DecisionTree:\") \nevaluation(y_test,y_pred)","e5214ea8":"print(classification_report(y_test,y_pred))","3ca59f2a":"plot_confusion_matrix(model,X_test,y_test,cmap='YlOrBr')","afa9d81f":"plot_roc_curve(model,X_test,y_test)","d8c81d45":"from sklearn.model_selection import cross_val_score\n\ncv_accuracy = cross_val_score(model,X_train,y_train,cv=5,scoring='accuracy')\nprint(f'Cross Validaion accuracy Scores: {cv_accuracy}')\nprint(f'Cross Validation accuracy Mean Score: {cv_accuracy.mean()}')","0a006c47":"feat_importance = model.feature_importances_\nfeat_importance = pd.DataFrame(feat_importance,columns=['Score'],index=features.columns)","4f4996d7":"feat_importance.sort_values(by='Score').style.background_gradient(cmap='OrRd')","39f66b81":"plt.figure(figsize=(8,4))\nplt.title('Feature Importances')\nsns.barplot(x=feat_importance.Score,y=feat_importance.index)","e2ddcacc":"from sklearn import tree\n\nfeature_names = features.columns\nclass_names = ['Emptied','Occupied']\n\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(model, \n                   feature_names = feature_names,  \n                   class_names = class_names,\n                   filled=True)","1442ed5e":"fig.savefig('decistion_tree.png')","6d7eafd7":"How we see - **DecisionTreeClassifier** gives the best results","0302934e":"#### Decision Tree Classifier","108363c0":"#### Results","f2d4d829":"* Humidity","0b0b3e75":"## 3. Data Preprocessing","63175887":"#### Logistic Regression","7383ff74":"* Temperatures","e4082637":"## 2. Exploratory Data Analysis","5dcefe37":"#### Model Training","546e0636":"#### Visualize a Decision Tree ","82948a15":"#### Feature Importance","84ab9a3a":"#### Random Forest Classifier","a924328a":"#### Decision Tree Classifier","62842b7a":"* CO2","0cc846a2":"* HumidityRatio","cefc7b85":"## 1. Reading Dataset","55eb76e6":"#### KNeighbors Classifier","ba047a97":"## 5. Model Evalution","21e02c13":"#### Split train test data","1b03febe":"## 4. Building Model","87f46e5d":"**Conclusion:**\n\nThe chosen model was **DecisionTree Classification** since it\u00b4s the most accurate, and got a perfecf accuracy.\n\nThrough the analysis of feature importance, we can assume that **Light** is the most important features of classification.","64af595b":"#### SVM","ff88df32":"* Light"}}