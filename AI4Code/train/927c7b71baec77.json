{"cell_type":{"ed6f07f9":"code","b1ec42e9":"code","66824b2f":"code","5ed45a02":"code","39d1f38b":"code","2467e1f0":"code","207389d6":"code","07336a3e":"code","ccd1e0e5":"code","783b8403":"code","fe833623":"code","54b08296":"code","839ae12d":"code","6bb44dcd":"code","aca9a8ac":"code","20fe6c41":"code","19ca9f5a":"code","d493d382":"code","82d574f0":"code","c8c62c65":"code","f1836e8a":"code","8d893af6":"code","c878c9f4":"code","4c9f10c1":"code","c79d1517":"code","7405d884":"code","5a1429e9":"code","7a7828ba":"code","75e81eaf":"code","b86ab739":"code","c0272d53":"code","5151df59":"code","049cde9e":"code","218b7762":"code","72a91e2e":"code","1e5da7b9":"code","db98727c":"code","bc758f10":"code","9d96fb89":"code","01686281":"code","c72f061b":"code","ae1bbb7e":"code","e9ca74fa":"code","38782ca3":"code","23bfa12e":"code","45a39f48":"code","3a598d4c":"code","611368e3":"code","73ffad83":"code","38dac2dc":"code","51f19705":"code","cb00e464":"code","531fc471":"code","aed4520c":"markdown","7aa529ae":"markdown","98bf93fb":"markdown","2e9c03c9":"markdown","06327f4c":"markdown","ed3dce98":"markdown","a67f5a89":"markdown","aedd93d9":"markdown"},"source":{"ed6f07f9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso","b1ec42e9":"df=pd.read_csv('..\/input\/car-data\/car dataset.csv')","66824b2f":"df.head()","5ed45a02":"# finding the different types in different categories\nprint(df['Seller_Type'].unique())\nprint(df['Fuel_Type'].unique())\nprint(df['Transmission'].unique())\nprint(df['Owner'].unique())","39d1f38b":"##check missing values\ndf.isnull().sum()","2467e1f0":"df.describe()","207389d6":"df=df.drop(['Car_Name'],axis=1)","07336a3e":"df.head()","ccd1e0e5":"### New column \"no_year\" is added\ndf['Current Year']=2021\ndf['no_year']=df['Current Year']- df['Year']","783b8403":"df.head()","fe833623":"### dropping \"Year\" and \"Current Year\" columns\ndf.drop(['Year','Current Year'],axis='columns',inplace=True)","54b08296":"df.head()","839ae12d":"### Onehotencoding the categorical features\ndf=pd.get_dummies(df,drop_first=True)","6bb44dcd":"df.head()","aca9a8ac":"### finding the correlations\ndf.corr()","20fe6c41":"sns.pairplot(df)","19ca9f5a":"#get correlations of each features in dataset\ncorrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","d493d382":"df.head()","82d574f0":"### seperating the input and output features\nx=df.iloc[:,1:]\ny=df.iloc[:,0]","c8c62c65":"x.head()","f1836e8a":"y.head()","8d893af6":"### for finding the Feature Importance\nmodel = ExtraTreesRegressor()\nmodel.fit(x,y)","c878c9f4":"print(model.feature_importances_)","4c9f10c1":"#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=x.columns)\nfeat_importances.nlargest(5).plot(kind='barh')\nplt.show()","c79d1517":"X_train, X_test, y_train, y_test = train_test_split(x,y ,test_size=0.1, random_state=0)","7405d884":"regressor=RandomForestRegressor()","5a1429e9":" # Hyperparameter tuning\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n","7a7828ba":"# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","75e81eaf":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestRegressor()","b86ab739":"# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","c0272d53":"rf_random.fit(X_train,y_train)","5151df59":"rf_random.best_params_","049cde9e":"rf_random.best_score_","218b7762":"### predicting on test data\npredictions=rf_random.predict(X_test)","72a91e2e":"sns.distplot(y_test-predictions)","1e5da7b9":"plt.scatter(y_test,predictions)","db98727c":"### Evaluating the model\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\nprint(\"R squared error : \",metrics.r2_score(y_test, predictions))","bc758f10":"lin_reg_model=LinearRegression()","9d96fb89":"lin_reg_model.fit(X_train,y_train)","01686281":"#prediction on traning data\ntrain_pred = lin_reg_model.predict(X_train)","c72f061b":"# Rsquare error\nerr_score = metrics.r2_score(y_train,train_pred)\nprint(\"R squared error : \",err_score)","ae1bbb7e":"plt.scatter(y_train,train_pred)\nplt.xlabel(\"Actual price\")\nplt.ylabel(\"Predicted price\")\nplt.title(\"Actual price Vs predicted price\")\nplt.show()","e9ca74fa":"#prediction on test data\npredictions = lin_reg_model.predict(X_test)","38782ca3":"### Evaluating the model\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\nprint(\"R squared error : \",metrics.r2_score(y_test, predictions))","23bfa12e":"plt.scatter(y_test,predictions)\nplt.xlabel(\"Actual price\")\nplt.ylabel(\"Predicted price\")\nplt.title(\"Actual price Vs predicted price\")\nplt.show()","45a39f48":"lass_reg_model = Lasso()","3a598d4c":"lass_reg_model.fit(X_train,y_train)","611368e3":"train_pred = lass_reg_model.predict(X_train)","73ffad83":"# Rsquare error\nerr_score = metrics.r2_score(y_train,train_pred)\nprint(\"R squared error : \",err_score)","38dac2dc":"plt.scatter(y_train,train_pred)\nplt.xlabel(\"Actual price\")\nplt.ylabel(\"Predicted price\")\nplt.title(\"Actual price Vs predicted price\")\nplt.show()","51f19705":"#prediction on test data\npredictions = lass_reg_model.predict(X_test)","cb00e464":"### Evaluating the model\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))\nprint(\"R squared error : \",metrics.r2_score(y_test, predictions))","531fc471":"plt.scatter(y_test,predictions)\nplt.xlabel(\"Actual price\")\nplt.ylabel(\"Predicted price\")\nplt.title(\"Actual price Vs predicted price\")\nplt.show()","aed4520c":"Hello everyone! In this kernel we will be working on Vehicle dataset from cardekho Dataset. This dataset contains information about used cars listed on www.cardekho.com. We are going to use it for predicting the price with the use of RandomForestRegressor, LinearRegressor and LassoRegressor models\n\n\n","7aa529ae":"#### 2. Linear Regression model\n","98bf93fb":"### Exploratory data analysis","2e9c03c9":"### Loading data","06327f4c":"#### 3. Lasso Regression model","ed3dce98":"#### Train test split","a67f5a89":"#### 1. Random forest model","aedd93d9":"### Model building"}}