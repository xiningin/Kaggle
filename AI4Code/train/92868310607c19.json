{"cell_type":{"c1b26ee8":"code","bbc28907":"code","96ac953f":"code","c82f94e1":"code","168d30a7":"code","b5a0b20f":"code","11e2aa14":"code","732fa452":"code","2453d6c4":"code","485cb8ad":"code","cd502fe0":"code","86ebc3b4":"code","ccde61fa":"code","75cdae90":"code","240e687b":"code","22f0e7f6":"code","964cd4e3":"code","abf9bd63":"code","e6604124":"code","831af3a4":"code","b7e9929c":"code","aba4638a":"code","5617f466":"code","d3cba5e1":"code","9dbc30c8":"code","f34094f4":"code","0700d8d7":"code","1aef1af5":"code","928d84fc":"code","b58aa58a":"code","d71439b3":"code","3d432780":"code","9bd71c67":"code","60fdd02f":"code","fa1f052b":"code","415cd323":"code","12674fcc":"code","20a75041":"code","d47e35f7":"code","ab4c2053":"code","8c5526a3":"code","2e4f9477":"code","f1d47c75":"code","81eb224b":"code","84369485":"code","68095fee":"code","46509882":"code","28009d74":"code","1e55209b":"code","da74abea":"code","823c766d":"code","4b96c166":"code","8e741a89":"code","2df22f22":"code","f7fa160e":"code","741bc1d6":"code","bb997801":"code","c6083603":"code","5b2fafa2":"code","febc64b7":"code","7909a10d":"code","5054f863":"code","a13a70b9":"code","befbd24b":"code","4ee11cd8":"code","4a9932e5":"markdown","753cdcb7":"markdown","dc4a312a":"markdown","c413fb56":"markdown","1dcec543":"markdown","ccc32ca5":"markdown","22cebaa6":"markdown","14b98650":"markdown","2499bc80":"markdown","86cdc945":"markdown","2b6cbe7c":"markdown","ff98acde":"markdown"},"source":{"c1b26ee8":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline\n\nimport time\nimport datetime","bbc28907":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           \nTEST_DIR = DATA_DIR + '\/test'                             \n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       \nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv' ","96ac953f":"data_df = pd.read_csv(TRAIN_CSV)\ndata_df.head()","c82f94e1":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","168d30a7":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.45):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)","b5a0b20f":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","11e2aa14":"#imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n#    T.RandomCrop(512, padding=8, padding_mode='reflect'),\n#     T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n#    T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n#    T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n#    T.Resize(256), \n    T.ToTensor(), \n#    T.Normalize(*imagenet_stats)\n])","732fa452":"np.random.seed(42)\nmsk = np.random.rand(len(data_df)) < 0.9\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()","2453d6c4":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\nlen(train_ds), len(val_ds)","485cb8ad":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))","cd502fe0":"show_sample(*train_ds[1541])","86ebc3b4":"batch_size = 8","ccde61fa":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, \n                    num_workers=2, pin_memory=True)","75cdae90":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","240e687b":"show_batch(train_dl, invert=True)","22f0e7f6":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","964cd4e3":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.4f}, train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_score']))","abf9bd63":"resnet34 = models.resnet34()\nresnet34","e6604124":"class ProteinResnet34(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","831af3a4":"resnet50 = models.resnet50()\nresnet50","b7e9929c":"class ProteinResnet50(ProteinResnet34):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","aba4638a":"resnet101 = models.resnet101()\nresnet101","5617f466":"class ProteinResnet101(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet101(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","d3cba5e1":"densenet121 = models.densenet121()\ndensenet121","9dbc30c8":"class ProteinDensenet121(ProteinResnet50):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.densenet121(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","f34094f4":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","0700d8d7":"device = get_default_device()\ndevice","1aef1af5":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","928d84fc":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","b58aa58a":"model = to_device(ProteinResnet34(), device)","d71439b3":"history = [evaluate(model, val_dl)]\nhistory","3d432780":"model.freeze()","9bd71c67":"epochs = 5\nmax_lr = 0.001\ngrad_clip = 0.1\nweight_decay = 1e-5\nopt_func = torch.optim.Adam\n","60fdd02f":"%%time\n\nstarttime= time.time()\n\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","fa1f052b":"model.unfreeze()","415cd323":"\nmodel = to_device(ProteinResnet50(), device)\n\n\n","12674fcc":"%%time\nmax_lr = max_lr\/10\ngrad_clip = 0.5\nweight_decay = 1e-4\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","20a75041":"model.unfreeze()","d47e35f7":"#model = to_device(ProteinResnet101(), device)\n","ab4c2053":"%%time\n#epochs = 5\nmax_lr = max_lr\/10\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","8c5526a3":"endtime=time.time()\n\nduration=endtime-starttime\ntrain_time=time.strftime('%M:%S', time.gmtime(duration))\n","2e4f9477":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');","f1d47c75":"plot_scores(history)","81eb224b":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');","84369485":"plot_losses(history)","68095fee":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');","46509882":"plot_lrs(history)","28009d74":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","1e55209b":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)","da74abea":"img, target = test_dataset[0]\nimg.shape","823c766d":"predict_single(test_dataset[7333][0])","4b96c166":"predict_single(test_dataset[12400][0])","8e741a89":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","2df22f22":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","f7fa160e":"test_preds = predict_dl(test_dl, model)","741bc1d6":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(20)","bb997801":"\nts = time.time()\n\nreadable = datetime.datetime.fromtimestamp(ts).strftime(\"%Y_%b_%d_%H_%M\")\n\nsub_fname = 'submission_kamal_{}.csv'\nsub_fname = sub_fname.format(readable)","c6083603":"submission_df.to_csv(sub_fname, index=False)","5b2fafa2":"weights_fname = 'protein-resnet.pth'\ntorch.save(model.state_dict(), weights_fname)","febc64b7":"!pip install jovian --upgrade --quiet","7909a10d":"import jovian","5054f863":"jovian.reset()\njovian.log_hyperparams(arch='resnet34', \n                       epochs=2*epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)","a13a70b9":"jovian.log_metrics(val_loss=history[-1]['val_loss'], \n                   val_score=history[-1]['val_score'],\n                   train_loss=history[-1]['train_loss'],\n                   time=train_time)","befbd24b":"project_name='protein-advanced'","4ee11cd8":"jovian.commit(project=project_name, environment=None, outputs=[weights_fname])","4a9932e5":"## Training","753cdcb7":"## Making predictions and submission","dc4a312a":"### Data augmentations","c413fb56":"## Model - Transfer Learning","1dcec543":"First, freeze the ResNet layers and train some epochs. This only trains the final layer to start classifying the images.","ccc32ca5":"### DataLoaders","22cebaa6":"[Learn about ResNets.](https:\/\/towardsdatascience.com\/an-overview-of-resnet-and-its-variants-5281e2f56035)\n\nCheck out torchvision models: https:\/\/pytorch.org\/docs\/stable\/torchvision\/models.html","14b98650":"Now, unfreeze and train some more.","2499bc80":"## Preparing the Data","86cdc945":"## Save and Commit","2b6cbe7c":"# Human Protein Multi Label Image Classification - Transfer Learning & Regularization\n\n\nHow a CNN learns ([source](https:\/\/developer.nvidia.com\/discover\/convolutional-neural-network)):\n\n![cnn-learning](https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/convolutional_neural_network.png)\n\nLayer visualization ([source](https:\/\/medium.com\/analytics-vidhya\/deep-learning-visualization-and-interpretation-of-neural-networks-2f3f82f501c5)):\n\n![cnn-learning](https:\/\/miro.medium.com\/max\/1610\/1*WysCJ6Ynecvviwctt6WDlQ.png)\n\n\nTransfer learning ([source](https:\/\/mc.ai\/transfer-learning-with-deep-learning-machine-learning-techniques\/)):\n![transfer-learning](https:\/\/miro.medium.com\/max\/1000\/1*LUFUl_8fqS97nUzpcFjgWw.png)\n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g). It incorporates transfer learning, and other techniques from https:\/\/jovian.ml\/aakashns\/05b-cifar10-resnet","ff98acde":"Hi ALL!!\n\nAs a part of sharing and learning, am making my notebook public. \nApologies -I still have to write to make the code easier to understand. Will do so soon!\n\nIn general, I tried different models- Resnet 19\/34\/50\/101 as well as densenet121. Including a mix of all. with first level using Resnet 34, then using Resnet 50 after the first unfreeeze and Resnet 101 after 2nd unfreeze. A combination of Resnets provided my best solution\n\nTried a mix of learning rates, epochs, batch sizes and decay.\n\nThanks everyone for the great learning experience!\n\n"}}