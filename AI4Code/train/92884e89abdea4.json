{"cell_type":{"eb21ae2f":"code","d5d17aee":"code","0182f075":"code","d17d8ea4":"code","8dc1fb5e":"code","d781e28d":"code","fdd53d5e":"code","74b9be9c":"code","4ab53774":"code","5a6d2623":"code","130c965f":"code","5593d19c":"code","4b02ef76":"code","b10daefa":"code","4dd10485":"code","5198436d":"code","523e5c7c":"code","329a2439":"code","b21e96d5":"code","5cfc1717":"code","7018600d":"code","fe9ae784":"code","b161a545":"code","5a29699b":"code","5b804b46":"code","fb6f13ff":"code","a96fe2e5":"code","026c9f90":"code","56b4469e":"code","15d6ba28":"code","7be8bb4b":"code","3f745684":"code","dbfcb570":"code","9256fe43":"code","208a1561":"code","e513a02d":"code","430e11b1":"code","fe0a7fa5":"code","60079ed3":"code","74945c3e":"code","60142ddb":"code","5e15bce9":"code","024d8122":"code","714824eb":"code","d605c3b0":"code","bcaee04a":"code","366ddf0a":"code","b7315c4a":"code","0325e04e":"code","0b621f02":"code","a76f0d6e":"code","e63de0a4":"code","a8cfb0d9":"code","cd9486a0":"code","7e541275":"code","3441d166":"code","696b4076":"code","34cedc32":"markdown","41c6c479":"markdown","bfff8416":"markdown","3dfd6af9":"markdown","b991a8c5":"markdown","151d0ff0":"markdown","5aae1bd3":"markdown","fbbe07f1":"markdown","ceb16903":"markdown","1c0c52f4":"markdown","3ebd7b18":"markdown","e237d6d2":"markdown","8770615e":"markdown","18c38a35":"markdown","0657ce6f":"markdown","9dcc4837":"markdown","5f54ce09":"markdown"},"source":{"eb21ae2f":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, LabelBinarizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifierCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.model_selection import KFold,cross_val_score,GridSearchCV,ShuffleSplit\n\nfrom mlxtend.classifier import StackingClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\nimport plotly.express as px\nfrom matplotlib import pyplot as plt\nimport scikitplot as skplt\nimport missingno as msno\nimport pandas as copycsv\nimport numpy as np\nimport seaborn as sns\nimport os\nimport re\n\ncopycsv.set_option('display.max_rows', 500)\ncopycsv.set_option('display.max_columns', 500)\ncopycsv.set_option('display.width', 1000)","d5d17aee":"cm = [\"#ee00ff\",\"#00b3ff\",\"#af05fa\",\"#6c04d7\",\"#0000ac\"]\ngradient = [\"#ee00ff\",\"#00b3ff\",\"#af05fa\",\"#6c04d7\",\"#0000ac\",\"#000180\",\"#00005a\",\"#000039\"]\nprint(\"Gradient from the picture for this notebook\")\nsns.palplot(gradient)","0182f075":"path = \"\/kaggle\/input\/titanic\/\"\nmain_train = copycsv.read_csv(f\"{path}train.csv\").set_index(\"PassengerId\", drop=True)\nmain_test = copycsv.read_csv(f\"{path}test.csv\").set_index(\"PassengerId\", drop=True)\nmain = copycsv.concat([main_train, main_test], axis=0)\nmain.head(20).style.background_gradient(cmap='Purples')","d17d8ea4":"msno.bar(main, figsize=(20,5), color=cm)","8dc1fb5e":"main[main[\"Age\"].isna()].head(20).style.background_gradient(cmap='Purples')","d781e28d":"print(main[(main[\"Pclass\"]==1)][\"Age\"].median())\nprint(main[(main[\"Pclass\"]==2)][\"Age\"].median())\nprint(main[(main[\"Pclass\"]==3)][\"Age\"].median())","fdd53d5e":"main.loc[(main[\"Age\"].isna())&(main[\"Pclass\"]==1),\"Age\"] = main[(main[\"Pclass\"]==1)][\"Age\"].median()\nmain.loc[(main[\"Age\"].isna())&(main[\"Pclass\"]==2),\"Age\"] = main[(main[\"Pclass\"]==2)][\"Age\"].median()\nmain.loc[(main[\"Age\"].isna())&(main[\"Pclass\"]==3),\"Age\"] = main[(main[\"Pclass\"]==3)][\"Age\"].median()","74b9be9c":"main.head(20).style.background_gradient(cmap='Purples')","4ab53774":"msno.bar(main, figsize=(20,5), color=cm)","5a6d2623":"main[\"Kid\"]=0\nmain.loc[(main[\"Age\"]<18),\"Kid\"] = 1\nmain[main[\"Kid\"] == 1].head(20).style.background_gradient(cmap=\"Purples\")","130c965f":"main[\"Mid\"]=0\nmain.loc[(main[\"Age\"]>=18)&(main[\"Age\"]<=60),\"Mid\"] = 1\nmain[main[\"Mid\"] == 1].head(20).style.background_gradient(cmap=\"Purples\")","5593d19c":"main[\"Old\"]=0\nmain.loc[(main[\"Age\"]>60),\"Old\"] = 1\nmain[main[\"Old\"] == 1].head(20).style.background_gradient(cmap=\"Purples\")","4b02ef76":"print(f'Survived coefficient for Kid:\\t{len(main[(main[\"Kid\"]==1) & (main[\"Survived\"]==1)])\/len(main[(main[\"Kid\"]==1) & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient for Mid:\\t{len(main[(main[\"Mid\"]==1) & (main[\"Survived\"]==1)])\/len(main[(main[\"Mid\"]==1) & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient for Old:\\t{len(main[(main[\"Old\"]==1) & (main[\"Survived\"]==1)])\/len(main[(main[\"Old\"]==1) & (~main[\"Survived\"].isna())])}')","b10daefa":"print(f'Survived coefficient Kid:\\t{len(main[(main[\"Kid\"]==1) & (main[\"Survived\"]==1)])\/len(main[(~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Mid:\\t{len(main[(main[\"Mid\"]==1) & (main[\"Survived\"]==1)])\/len(main[(~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Old:\\t{len(main[(main[\"Old\"]==1) & (main[\"Survived\"]==1)])\/len(main[(~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient:    \\t{len(main[(main[\"Survived\"]==1)])\/len(main[(~main[\"Survived\"].isna())])}')","4dd10485":"main.loc[(main[\"Fare\"].isna())&(main[\"Pclass\"]==1),\"Fare\"] = main[(main[\"Pclass\"]==1)][\"Fare\"].median()\nmain.loc[(main[\"Fare\"].isna())&(main[\"Pclass\"]==2),\"Fare\"] = main[(main[\"Pclass\"]==2)][\"Fare\"].median()\nmain.loc[(main[\"Fare\"].isna())&(main[\"Pclass\"]==3),\"Fare\"] = main[(main[\"Pclass\"]==3)][\"Fare\"].median()\nmsno.bar(main, figsize=(20,5), color=cm)","5198436d":"mainplot  = main.copy(deep=True)\nfigure = px.scatter(mainplot.astype(str), x=\"Cabin\", color= \"Survived\",\n                 color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nfigure.show()","523e5c7c":"main[\"Cabin\"] = main[\"Cabin\"].replace({'B51 B53 B55': 'B55', 'B52 B54 B56': 'B56', 'B57 B59 B63 B66': 'B66', 'B58 B60': 'B60', \n            'B82 B84': 'B84', 'B96 B98': 'B98', 'C22 C26': 'C26', 'C23 C25 C27': 'C27', 'C55 C57': 'C57',\n            'C62 C64': 'C64', 'D10 D12': 'D12', 'E39 E41': 'E41', 'F E46': 'E46', 'F E57': 'E57',\n            'F E69': 'E69', 'F G63': 'G63', 'F G73': 'G73', 'F': 'A0', 'D': 'A0', ' ': 'A0', 'T': 'A0',np.nan: 'A0'})\nmain[\"Cabin\"] = main.fillna(np.nan)[\"Cabin\"].str[1:].astype(float)\nmain.head(20).style.background_gradient(cmap=\"Purples\")","329a2439":"mainplot  = main.copy(deep=True)\nfigure = px.scatter(mainplot.astype(str), x=\"Cabin\", color= \"Survived\",\n                 color_discrete_sequence=cm, size_max=6,width=1200, height=500)\nfigure.show()","b21e96d5":"msno.bar(main, figsize=(20,5), color=cm)","5cfc1717":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"Embarked\",color=\"Survived\",color_discrete_sequence=cm,nbins=10)\nfigure.show()","7018600d":"main[\"Embarked\"] = main[\"Embarked\"].fillna(\"S\")\nmsno.bar(main, figsize=(20,5), color=cm)","fe9ae784":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"Pclass\",color=\"Survived\",color_discrete_sequence=cm,nbins=3)\nfigure.show()","b161a545":"print(f'Survived coefficient Pclass 1:\\t{len(main[(main[\"Pclass\"]==1) & (main[\"Survived\"]==1)])\/len(main[(main[\"Pclass\"]==1) & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Pclass 2:\\t{len(main[(main[\"Pclass\"]==2) & (main[\"Survived\"]==1)])\/len(main[(main[\"Pclass\"]==2) & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Pclass 3:\\t{len(main[(main[\"Pclass\"]==3) & (main[\"Survived\"]==1)])\/len(main[(main[\"Pclass\"]==3) & (~main[\"Survived\"].isna())])}')","5a29699b":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"SibSp\",color=\"Survived\",color_discrete_sequence=cm,nbins=10)\nfigure.show()","5b804b46":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"Parch\",color=\"Survived\",color_discrete_sequence=cm,nbins=10)\nfigure.show()","fb6f13ff":"main[\"Family\"] = 0\nmain[\"Family\"] = main[\"Parch\"] + main[\"SibSp\"]\nmain.head(20).style.background_gradient(cmap=\"Purples\")","a96fe2e5":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"Family\",color=\"Survived\",color_discrete_sequence=cm,nbins=10)\nfigure.show()","026c9f90":"main[\"Alone\"] = 0\nmain.loc[(main[\"Family\"]==0),\"Alone\"]=1\nmain.head(20).style.background_gradient(cmap=\"Purples\")","56b4469e":"print(f'Survived coefficient Alone:\\t{len(main[(main[\"Alone\"]==1) & (main[\"Survived\"]==1)])\/len(main[(main[\"Alone\"]==1) & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Not Alone:\\t{len(main[(main[\"Alone\"]==0) & (main[\"Survived\"]==1)])\/len(main[(main[\"Alone\"]==0) & (~main[\"Survived\"].isna())])}')","15d6ba28":"mainplot = main.copy(deep=True)\nmainplot = mainplot[~mainplot[\"Survived\"].isna()]\nmainplot[\"Survived\"] = mainplot[\"Survived\"].astype(str)\nfigure = px.histogram(mainplot, x=\"Sex\",color=\"Survived\",color_discrete_sequence=cm,nbins=10)\nfigure.show()","7be8bb4b":"print(f'Survived coefficient Male:\\t{len(main[(main[\"Sex\"]==\"male\") & (main[\"Survived\"]==1)])\/len(main[(main[\"Sex\"]==\"male\") & (~main[\"Survived\"].isna())])}')\nprint(f'Survived coefficient Female:\\t{len(main[(main[\"Sex\"]==\"female\") & (main[\"Survived\"]==1)])\/len(main[(main[\"Sex\"]==\"female\") & (~main[\"Survived\"].isna())])}')","3f745684":"#matrix = main.copy(deep=True)\n#matrix['Sex'] = LabelEncoder().fit_transform(matrix['Sex'])\n#matrix.head(20).style.background_gradient(cmap=\"Purples\")","dbfcb570":"matrix = copycsv.DataFrame(index=main.index)\n\nfor c in [\"Pclass\",\"Sex\",\"Embarked\"]:\n    encoded = OneHotEncoder().fit_transform(main[c].to_numpy().reshape(-1,1)).toarray()\n    columns = [f\"{c}_{i}\" for i in range(encoded.shape[1])]\n    main_ =copycsv.DataFrame(data=encoded, columns=columns, index=main.index)\n    matrix = copycsv.concat([main_,matrix], axis=1)\n    \nmatrix = copycsv.concat([matrix,main[[\"Survived\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Cabin\",\"Kid\",\"Mid\",\"Old\",\"Family\",\"Alone\"]]], axis=1)\nmatrix.head(20).style.background_gradient(cmap=\"Purples\")","9256fe43":"model = matrix.copy(deep=True)\ntrain = model[~model[\"Survived\"].isna()]\ncheck = model[model[\"Survived\"].isna()]\ncheck = check.drop(\"Survived\", axis=1)\ntrain.loc[:,\"Survived\"] = train.loc[:,\"Survived\"].astype(bool)\nx_lab = train.drop(\"Survived\", axis=1)\ny_feat = train[\"Survived\"].astype(int)","208a1561":"tuned_parametersCatBoostClassifier = {\"learning_rate\" : [0.007, 0.008, 0.009],\"l2_leaf_reg\":[1,3,5],\"iterations\":[900,1000]}","e513a02d":"model = {}\naccuracy = {}\ncrval = ShuffleSplit(n_splits=5)\ncatboostGrid = GridSearchCV(CatBoostClassifier(**{\"rsm\":0.1,\"verbose\":False}), tuned_parametersCatBoostClassifier, cv=crval)\nmodel[\"CatBoostClassifier\"] = catboostGrid\nmodel[\"CatBoostClassifier\"].fit(x_lab,y_feat)\ny_feat_N = model[\"CatBoostClassifier\"].predict(x_lab)\naccuracy[\"CatBoostClassifier\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"CatBoostClassifier\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'CatBoostClassifier.csv')","430e11b1":"kfold_model = matrix.copy(deep=True)\nkf = KFold(n_splits=5, shuffle=True)\nclassifiers = []\nclassifiers1 = []\nfor kfold_train, kfold_test in kf.split(train): \n    table_train_kfold = kfold_model.loc[kfold_train+1]\n    table_test_kfold = kfold_model.loc[kfold_test+1]\n    x_train_split = table_train_kfold.drop(\"Survived\", axis=1)\n    y_train_split = table_train_kfold[\"Survived\"].astype(int)\n    x_test_split = table_test_kfold.drop(\"Survived\", axis=1)\n    y_test_split = table_test_kfold[\"Survived\"].astype(int)\n    clf = CatBoostClassifier(**{\"rsm\":0.1, \"learning_rate\":0.005,\"iterations\":1000,\"l2_leaf_reg\":5,\"verbose\":False})\n    clf.fit(x_train_split, y_train_split, eval_set=(x_test_split, y_test_split), use_best_model=True)\n    clf1 = CatBoostClassifier(**{\"rsm\":0.1, \"learning_rate\":0.1,\"iterations\":500,\"l2_leaf_reg\":5,\"verbose\":False})\n    clf1.fit(x_train_split, y_train_split, eval_set=(x_test_split, y_test_split), use_best_model=True)\n    # \u043f\u043e\u043b\u0443\u0447\u0438\u043c 5 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432\n    classifiers.append(clf)\n    classifiers1.append(clf1)","fe0a7fa5":"table_train_kfold.head(20).style.background_gradient(cmap=\"Purples\")","60079ed3":"table_test_kfold.head(20).style.background_gradient(cmap=\"Purples\")","74945c3e":"i = 0\nfor kfold_model in classifiers:\n    i += 1\n    model[f\"CatBoostClassifier_Kfold_{i}\"] = kfold_model\n    y_feat_N = model[f\"CatBoostClassifier_Kfold_{i}\"].predict(x_lab)\n    accuracy[f\"CatBoostClassifier_Kfold_{i}\"] = accuracy_score(y_feat,y_feat_N)\n    file = copycsv.DataFrame(model[f\"CatBoostClassifier_Kfold_{i}\"].predict(check), index= check.index,columns = [\"Survived\"]).astype(int)\n    file.to_csv(f\"CatBoostClassifier_Kfold_{i}.csv\")\n    print(f\"{i} - {kfold_model}\")\ni = 0\nprint(\"2 - KFold\")\nfor kfold_model in classifiers1:\n    i += 1\n    model[f\"CatBoostClassifier_Kfold_2.{i}\"] = kfold_model\n    y_feat_N = model[f\"CatBoostClassifier_Kfold_2.{i}\"].predict(x_lab)\n    accuracy[f\"CatBoostClassifier_Kfold_2.{i}\"] = accuracy_score(y_feat,y_feat_N)\n    file = copycsv.DataFrame(model[f\"CatBoostClassifier_Kfold_2.{i}\"].predict(check), index= check.index,columns = [\"Survived\"]).astype(int)\n    file.to_csv(f\"CatBoostClassifier_Kfold_2.{i}.csv\")\n    print(f\"2.{i} - {kfold_model}\")","60142ddb":"tuned_parametersLogisticRegression = [\n    {\"penalty\":['l1'],'max_iter': [900],\"solver\": ['liblinear'],\"C\":[0.5, 1, 3, 5]},\n    {\"penalty\":['l2'],'max_iter': [900],\"solver\": ['lbfgs'],\"C\":[0.5, 1, 3, 5]},\n    {\"penalty\":['l2'],'max_iter': [900],\"solver\": ['liblinear'],\"C\":[0.5, 1, 3, 5]},\n]","5e15bce9":"crval = ShuffleSplit(n_splits=5)\nLogisticRegressionGrid = GridSearchCV(LogisticRegression(**{}), tuned_parametersLogisticRegression, cv=crval)\nmodel[\"LogisticRegression\"] = LogisticRegressionGrid\nmodel[\"LogisticRegression\"].fit(x_lab,y_feat)\ny_feat_N = model[\"LogisticRegression\"].predict(x_lab)\naccuracy[\"LogisticRegression\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"LogisticRegression\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'LogisticRegression.csv')","024d8122":"count = 0\nfor k in model[\"LogisticRegression\"].cv_results_[\"mean_test_score\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","714824eb":"count = 0\nfor k in model[\"LogisticRegression\"].cv_results_[\"params\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","d605c3b0":"print(model[\"LogisticRegression\"].best_params_)\nprint({accuracy[\"LogisticRegression\"]})","bcaee04a":"tuned_parametersXGBClassifier = [\n    {\"eta\":[0.3, 0.5],\"gamma\":[0,3,5,7],\"max_depth\":[5,6,7],'subsample':[0.5],'max_delta_step':[0],\"lambda\":[0.1,0.3],\"alpha\":[10]},\n    #{\"rsm\":0.1, \"learning_rate\":0.005,\"iterations\":500,\"l2_leaf_reg\":5},\n]","366ddf0a":"crval = ShuffleSplit(n_splits=5)\nXGBClassifierGrid = GridSearchCV(XGBClassifier(**{'verbosity':0, 'use_label_encoder':False}), tuned_parametersXGBClassifier, cv=crval)\nmodel[\"XGBClassifier\"] = XGBClassifierGrid\nmodel[\"XGBClassifier\"].fit(x_lab,y_feat)\ny_feat_N = model[\"XGBClassifier\"].predict(x_lab)\naccuracy[\"XGBClassifier\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"XGBClassifier\"].predict(check), index= check.index,columns = [\"Category\"]).astype(int)\nfile.to_csv(f'XGBClassifier.csv')","b7315c4a":"count = 0\nfor k in model[\"XGBClassifier\"].cv_results_[\"mean_test_score\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","0325e04e":"count = 0\nfor k in model[\"XGBClassifier\"].cv_results_[\"params\"]:\n    count = count + 1\n    print(f\"{count}:\\t{k}\")","0b621f02":"print(model[\"XGBClassifier\"].best_params_)\nprint({accuracy[\"XGBClassifier\"]})","a76f0d6e":"print(\"Accuracy on the training set:\")\nfor k in accuracy:\n    print(f\"{k}\\t:\\t{accuracy[k]}\")","e63de0a4":"fig = plt.figure(figsize=(35,10))\ncount=1\nfor k in model:\n    ax = fig.add_subplot(1,len(model),count)\n    count+=1\n    skplt.metrics.plot_confusion_matrix(y_feat, model[k].predict(x_lab), normalize=True, figsize=(5,5),ax=ax, cmap=\"Purples\")\n    ax.set_title(k)\nplt.show()","a8cfb0d9":"classifiers1.append(model[\"LogisticRegression\"])\nclassifiers1.append(model[\"XGBClassifier\"])","cd9486a0":"model[\"Ensemble\"] = StackingClassifier(classifiers = classifiers1, meta_classifier=LogisticRegression(**{\"penalty\":\"l2\",\"solver\": \"liblinear\",\"C\":5,}), use_features_in_secondary=True) \nmodel[\"Ensemble\"].fit(x_lab,y_feat)\ny_feat_N = model[\"Ensemble\"].predict(x_lab)\naccuracy[\"Ensemble\"] = accuracy_score(y_feat,y_feat_N)\nfile = copycsv.DataFrame(model[\"Ensemble\"].predict(check), index= check.index,columns = [\"Survived\"]).astype(int)\nfile.to_csv(f'Ensemble.csv')","7e541275":"print(f\"Ensemble\\t:\\t{accuracy['Ensemble']}\")","3441d166":"fig = plt.figure(figsize=(35,10))\nskplt.metrics.plot_confusion_matrix(y_feat, model['Ensemble'].predict(x_lab), normalize=True, figsize=(5,5), cmap=\"Purples\")\nplt.show()","696b4076":"file = copycsv.DataFrame(model['Ensemble'].predict(check), index= check.index,columns = [\"Survived\"]).astype(int)\nfile.to_csv(f'submission.csv')","34cedc32":"**Check the survived coeff in different Pclasses**","41c6c479":"**Fill empty spaces of \"Embarked\" row:**\n\n For this we will place in empty spaces the most common positions at this row.","bfff8416":"**CatBoostClassifier with using KFold:**","3dfd6af9":"# **Building models:**","b991a8c5":"**LogisticRegression with using GridSearchCV and ShuffleSplit:**","151d0ff0":"**Fill \"nan\" spaces in \"Fare\" row:**","5aae1bd3":"**Check the effect by \"SibSp\" and \"Parch\" on survived coeff**","fbbe07f1":"**Replace sex with numbers:**","ceb16903":"**Final accuracy of models:**","1c0c52f4":"**Check survived coeff for lonely passengers**","3ebd7b18":"**Fill empty spaces of \"Cabin\" row:**","e237d6d2":"**CatBoostClassifier with using GridSearchCV and ShuffleSplit:**","8770615e":"**Check the effect by \"Sex\" on survived coeff** ","18c38a35":"**XGBClassifier with using GridSearchCV and ShuffleSplit:**","0657ce6f":"# **Prepare the table for ML process**","9dcc4837":"**Fill \"nan\" spaces in \"Age\" row:**","5f54ce09":"**Add some age groups:**"}}