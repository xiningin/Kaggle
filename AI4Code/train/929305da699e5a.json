{"cell_type":{"7a880f5f":"code","02f8fc86":"code","35678130":"code","1061580a":"code","150cf8ca":"code","e43a64cf":"code","77ef5e35":"code","147aeeb5":"code","1310103d":"code","fb7cedcd":"code","34c14489":"code","fc7786bd":"markdown","554b21ae":"markdown","3d4881be":"markdown","285fe126":"markdown","25f77916":"markdown","1c7c269a":"markdown","21ec7aec":"markdown","1e04bc10":"markdown","e40ffae0":"markdown","6908e8ef":"markdown","ce958482":"markdown"},"source":{"7a880f5f":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","02f8fc86":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","35678130":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","1061580a":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","150cf8ca":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","e43a64cf":"df = pd.read_csv('\/kaggle\/input\/effect-of-coronavirus-on-indian-stock-market\/2020-03-30-NSE-EQ.txt')\ndf[\"date_1\"]=pd.to_datetime(df[\"<date>\"], format='%Y%m%d', errors='ignore')\nprint(df.columns)\nprint(\"Sample data  ----------------\")\nprint(df.head())\nprint(\"List of share codes  --------------\")\nfor ticker in df['<ticker>'].unique():\n    print(ticker)\n","77ef5e35":"dfs = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/effect-of-coronavirus-on-indian-stock-market\/'):\n    for filename in filenames:\n        dfs.append(pd.read_csv(os.path.join(dirname, filename)))\n\ndf_all=pd.concat(dfs, axis=0)\ndf_all[\"date_1\"]=pd.to_datetime(df_all[\"<date>\"], format='%Y%m%d', errors='ignore')\nprint(\"Total records: \", len(df_all))","147aeeb5":"# set draw_lockdown_lines = None if don't want to plot lockdates dates markers, Can also pass list of selected dates for markers\ndef plot_share_history(dfplot, tickername, draw_lockdown_lines=[\"2020-03-25\", \"2020-04-15\",\"2020-05-04\",\"2020-05-18\"]):\n    dfplot=df_all[[\"date_1\",\"<close>\"]][df_all[\"<ticker>\"] == tickername]\n    dfplot=dfplot.set_index(\"date_1\")\n    ax=dfplot.plot(title=\"Share Price history - {}\".format(tickername))\n    if draw_lockdown_lines is not None:\n        for lock_date in draw_lockdown_lines:\n            ax.axvline(lock_date, color=\"red\", linestyle=\"--\")\n","1310103d":"plot_share_history(df_all, \"AUBANK\")\nplot_share_history(df_all, \"SBIN\")\n","fb7cedcd":"plot_share_history(df_all, \"AARTIIND\")\nplot_share_history(df_all, \"CIPLA\")\n","34c14489":"plot_share_history(df_all, \"LT\")\n","fc7786bd":"**There are 8 columns in each date wise file**  \n** *ticker* column contains the share code**","554b21ae":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","3d4881be":"## Introduction\nLet us explore the dataset to find out what contents are herein.  \nPurpose of this dataset is to find out the effect of lockdown in Inida on various NSE Shares","285fe126":"### However, not everyone is in bad shape :","25f77916":"There is 0 csv file in the current version of the dataset:\n","1c7c269a":"# Important Lockdown dates in India\n## Lockdown 1.0 : 25 March \u2013 14 April\n## Lockdown 2.0 : 15 April \u2013 3 May\n## Lockdown 3.0 : 4 May \u2013 17 May\n## Lockdown 4.0 : 18 May - ?\n","21ec7aec":"#### To make a complete dataset, Let us stack all files vertically","1e04bc10":"### Please let me know if any data is missing or more data is required to complete the task. \n#### Don't forget to give upvote to dataset and notebook. That is motivation factor on Kaggle","e40ffae0":"### Banks got severly affected :","6908e8ef":"## Next Tasks:\n### Find out which shares impacted most (increased or decreased) \n### Find out which lockdown impacted which share (Effect of lockdown 1 or 2 or 3 or 4 on respective shares)\n### Do prediction of prices ","ce958482":"### Let us plot some history of share prices "}}