{"cell_type":{"becb663d":"code","1d58144c":"code","e1542a53":"code","6dc6f9ac":"code","f8cedf17":"code","0911ec84":"code","16491ae8":"code","e2a8a754":"code","93b767f6":"code","720d327d":"code","b3139c46":"code","3a1b0854":"code","f735dbcb":"code","c0acfe43":"code","2b70de0e":"code","a8279fbf":"code","73d84c45":"code","a862e77c":"code","f5f1091d":"code","a46b1747":"code","b4f7d654":"code","1246f9d0":"code","a6a0686a":"code","c2ca1f48":"code","160ce3bd":"code","77e040cb":"markdown"},"source":{"becb663d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","1d58144c":"# Import the pandas package, then use the \"read_csv\" function to read\n# the labeled training data\n      \ntrain = pd.read_csv(\"\/kaggle\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv.zip\",\n                    header=0,\n                    delimiter=\"\\t\",\n                    quoting=3)\n","e1542a53":"train.head()","6dc6f9ac":"train.shape","f8cedf17":"test = pd.read_csv(\"\/kaggle\/input\/word2vec-nlp-tutorial\/testData.tsv.zip\", \n                   header=0,\n                   delimiter=\"\\t\",\n                   quoting=3 )","0911ec84":"test.head()","16491ae8":"test.shape","e2a8a754":"print(train[\"review\"][0])","93b767f6":"import re\nimport nltk\n\nfrom bs4 import BeautifulSoup\nfrom nltk.corpus import stopwords\n\n\nclass KaggleWord2VecUtility(object):\n    \"\"\"KaggleWord2VecUtility is a utility class for processing raw HTML text into segments for further learning\"\"\"\n\n    @staticmethod\n    def review_to_wordlist( review, remove_stopwords=False ):\n        # Function to convert a document to a sequence of words,\n        # optionally removing stop words.  Returns a list of words.\n        #\n        # 1. Remove HTML\n        review_text = BeautifulSoup(review).get_text()\n        #\n        # 2. Remove non-letters\n        review_text = re.sub(\"[^a-zA-Z]\",\" \", review_text)  # 'r([^\\w]|[+])'\n        #\n        # 3. Convert words to lower case and split them\n        words = review_text.lower().split()\n        #\n        # 4. Optionally remove stop words (false by default)\n        if remove_stopwords:\n            stops = set(stopwords.words(\"english\"))\n            words = [w for w in words if not w in stops]\n        #\n        # 5. Return a list of words\n        return(words)\n\n    # Define a function to split a review into parsed sentences\n    @staticmethod\n    def review_to_sentences( review, tokenizer, remove_stopwords=False ):\n        # Function to split a review into parsed sentences. Returns a\n        # list of sentences, where each sentence is a list of words\n        #\n        # 1. Use the NLTK tokenizer to split the paragraph into sentences\n        raw_sentences = tokenizer.tokenize(review.strip())\n        #\n        # 2. Loop over each sentence\n        sentences = []\n        for raw_sentence in raw_sentences:\n            # If a sentence is empty, skip it\n            if len(raw_sentence) > 0:\n                # Otherwise, call review_to_wordlist to get a list of words\n                sentences.append( KaggleWord2VecUtility.review_to_wordlist( raw_sentence,\n                                                                           remove_stopwords ))\n        #\n        # Return the list of sentences (each sentence is a list of words,\n        # so this returns a list of lists\n        return sentences\n","720d327d":"# Initialize an empty list to hold the clean reviews\nclean_train_reviews = []\n\n# Loop over each review; create an index i that goes from 0 to the length\n# of the movie review list\n\nprint (\"Cleaning and parsing the training set movie reviews...\\n\")\nfor i in range( 0, len(train[\"review\"])):\n    clean_train_reviews.append(\" \".join(KaggleWord2VecUtility.review_to_wordlist(train[\"review\"][i], True)))\n","b3139c46":"clean_train_reviews[0]","3a1b0854":"len(clean_train_reviews)","f735dbcb":"# Initialize the \"CountVectorizer\" object, which is scikit-learn's\n# bag of words tool.\ncountVectorizer = CountVectorizer(analyzer = \"word\",   \\\n                         tokenizer = None,    \\\n                         preprocessor = None, \\\n                         stop_words = None,   \\\n                         max_features = 5000)\n\n# fit_transform() does two functions: First, it fits the model\n# and learns the vocabulary; second, it transforms our training data\n# into feature vectors. The input to fit_transform should be a list of\n# strings.\ntrain_data_features = countVectorizer.fit_transform(clean_train_reviews)","c0acfe43":"print(countVectorizer.get_feature_names())","2b70de0e":"type(train_data_features)","a8279fbf":"# Numpy arrays are easy to work with, so convert the result to an\n# array\nnp.asarray(train_data_features)","73d84c45":"print (\"Training the random forest (this may take a while)...\")\n\n\n# Initialize a Random Forest classifier with 100 trees\nforest = RandomForestClassifier(n_estimators = 200)\n\n# Fit the forest to the training set, using the bag of words as\n# features and the sentiment labels as the response variable\n#\n# This may take a few minutes to run\nforest = forest.fit( train_data_features, train[\"sentiment\"] )\n","a862e77c":"# Testing - we pick only the first 2 test reviews alone to save time\n\n\n# Create an empty list and append the clean reviews one by one\nclean_test_reviews = []\n\nprint(\"Cleaning and parsing the test set movie reviews...\\n\")\nfor i in range(0,len(test)):\n    clean_test_reviews.append(\" \".join(KaggleWord2VecUtility.review_to_wordlist(test[\"review\"][i], True)))\n\n# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = countVectorizer.transform(clean_test_reviews)\nnp.asarray(test_data_features)\n\n# Use the random forest to make sentiment label predictions\nprint (\"Predicting test labels...\\n\")\nresult = forest.predict(test_data_features)\n\n# Write the test results \nprint(\"*****manual verification*******\")\nprint(test[\"review\"][0])\nprint(result[0])\nprint(test[\"review\"][1])\nprint(result[1])","f5f1091d":"test[\"id\"]","a46b1747":"result","b4f7d654":"# Copy the results to a pandas dataframe with an \"id\" column and\n# a \"sentiment\" column\noutput = pd.DataFrame( data={\"id\":test.id.apply(lambda x: x.replace('\"', '')), \"sentiment\":result} )","1246f9d0":"output.head()","a6a0686a":"# Use pandas to write the comma-separated output file\noutput.to_csv('.\/Submission.csv', index=False)\nprint (\"Wrote results to Submission.csv\")","c2ca1f48":"type(output)","160ce3bd":"output.head()","77e040cb":"CountVectorization\n\nThe Bag of Words model learns a vocabulary from all of the documents, then models each document by counting the number of times each word appears. For example, consider the following two sentences:\n\nSentence 1: \"The cat sat on the hat\"\n\nSentence 2: \"The dog ate the cat and the hat\"\n\nFrom these two sentences, our vocabulary is as follows:\n\n{ the, cat, sat, on, hat, dog, ate, and }\n\nTo get our bags of words, we count the number of times each word occurs in each sentence. In Sentence 1, \"the\" appears twice, and \"cat\", \"sat\", \"on\", and \"hat\" each appear once, so the feature vector for Sentence 1 is:\n\n{ the, cat, sat, on, hat, dog, ate, and }\n\nSentence 1: { 2, 1, 1, 1, 1, 0, 0, 0 }\n\nSimilarly, the features for Sentence 2 are: { 3, 1, 0, 0, 1, 1, 1, 1}\n\nIn the IMDB data, we have a very large number of reviews, which will give us a large vocabulary. To limit the size of the feature vectors, we should choose some maximum vocabulary size. Below, we use the 5000 most frequent words (remembering that stop words have already been removed).\n"}}