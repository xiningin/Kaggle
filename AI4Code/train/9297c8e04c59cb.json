{"cell_type":{"e7f646f5":"code","b0318bb7":"code","4a0d4512":"code","32d34137":"code","1efaab2e":"code","3d201eac":"code","e790bdbe":"code","98a828f8":"code","d1a0504c":"markdown","cb452715":"markdown","cad03b66":"markdown"},"source":{"e7f646f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b0318bb7":"# original version https:\/\/www.kaggle.com\/jiweiliu\/lgb-2-leaves-augment\ndef augment(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        ids = np.arange(x1.shape[0])\n        for c in range(x1.shape[1]):\n            np.random.shuffle(ids)\n            x1[:,c] = x1[ids][:,c]\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y","4a0d4512":"# https:\/\/www.kaggle.com\/jiweiliu\/lgb-2-leaves-augment#500381\n# thanks to @vishalsrinirao\ndef shuffle_col_vals(x1):\n    rand_x = np.array([np.random.choice(x1.shape[0], size=x1.shape[0], replace=False) for i in range(x1.shape[1])]).T\n    grid = np.indices(x1.shape)\n    rand_y = grid[1]\n    return x1[(rand_x, rand_y)]\n\ndef augment_fast1(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        x1 = shuffle_col_vals(x1)\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        x1 = shuffle_col_vals(x1)\n        xn.append(x1)\n\n    xs = np.vstack(xs); xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0]);yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn]); y = np.concatenate([y,ys,yn])\n    return x,y","32d34137":"# https:\/\/stackoverflow.com\/questions\/50554272\/randomly-shuffle-items-in-each-row-of-numpy-array\ndef disarrange(a, axis=-1):\n    \"\"\"\n    Shuffle `a` in-place along the given axis.\n\n    Apply numpy.random.shuffle to the given axis of `a`.\n    Each one-dimensional slice is shuffled independently.\n    \"\"\"\n    b = a.swapaxes(axis, -1)\n    # Shuffle `b` in-place along the last axis.  `b` is a view of `a`,\n    # so `a` is shuffled in place, too.\n    shp = b.shape[:-1]\n    for ndx in np.ndindex(shp):\n        np.random.shuffle(b[ndx])\n    return\n\ndef augment_fast2(x,y,t=2):\n    xs,xn = [],[]\n    for i in range(t):\n        mask = y>0\n        x1 = x[mask].copy()\n        disarrange(x1,axis=0)\n        xs.append(x1)\n\n    for i in range(t\/\/2):\n        mask = y==0\n        x1 = x[mask].copy()\n        disarrange(x1,axis=0)\n        xn.append(x1)\n\n    xs = np.vstack(xs)\n    xn = np.vstack(xn)\n    ys = np.ones(xs.shape[0])\n    yn = np.zeros(xn.shape[0])\n    x = np.vstack([x,xs,xn])\n    y = np.concatenate([y,ys,yn])\n    return x,y","1efaab2e":"%%time\ndf = pd.read_csv('..\/input\/train.csv')\nx = df[df.columns[2:]].values\ny = df['target'].values","3d201eac":"%%time\nx1,y1 = augment(x,y,t=10)\nprint(x.shape,y.shape,x1.shape,y1.shape)","e790bdbe":"%%time\nx1,y1 = augment_fast1(x,y,t=10)\nprint(x.shape,y.shape,x1.shape,y1.shape)","98a828f8":"%%time\nx1,y1 = augment_fast2(x,y,t=10)\nprint(x.shape,y.shape,x1.shape,y1.shape)","d1a0504c":"**Experiment**","cb452715":"**Functions**","cad03b66":"As more augmentation you might want to experiment, the original code becomes slower and slower. This kernel compares three  "}}