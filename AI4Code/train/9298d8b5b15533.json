{"cell_type":{"00b28231":"code","1f781dea":"code","d26caebf":"code","b7a2906c":"code","91547298":"code","cabccc6e":"code","3300ad3c":"code","f178783a":"code","b430dc91":"code","4f4f95af":"code","90a2683f":"code","b25d5d4d":"code","1f3e99d3":"code","dcf5d9ce":"code","b428a3e2":"code","fdfcae45":"code","5b291b4a":"code","78da7908":"code","8592038c":"code","62a87101":"markdown","3fffd7df":"markdown","3e8dcecc":"markdown","e37e1ad8":"markdown"},"source":{"00b28231":"# data analysis, wrangling and visualization\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix,classification_report\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.neighbors import KNeighborsClassifier\n","1f781dea":"data = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","d26caebf":"data.head()","b7a2906c":"data.info()","91547298":"data = data.drop(['Unnamed: 32', 'id'], axis= 1)","cabccc6e":"sns.countplot(data[\"diagnosis\"])\nprint(data.diagnosis.value_counts()) ","3300ad3c":"# (Bening = 0 , Malignant = 1)\ndata[\"diagnosis\"] = [1 if i.strip() == \"M\" else 0 for i in data.diagnosis] ","f178783a":"data.head()","b430dc91":"data.describe()","4f4f95af":"corr_matrix = data.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr_matrix,annot = True, fmt = \".2f\")\nplt.title(\"Correlation Between Features\")\nplt.show()","90a2683f":"X = data.drop('diagnosis', axis=1)\ny = data['diagnosis']\n\ncolumns = X.columns.to_list()","b25d5d4d":"X.shape, y.shape","1f3e99d3":"# Data Scaler\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\nX","dcf5d9ce":"X = pd.DataFrame(X, columns = columns)\nX","b428a3e2":"from sklearn.model_selection import KFold\n\nkf = KFold(n_splits=44, random_state=44, shuffle =True)\n\nfor train_index, test_index in kf.split(X):\n    \n#     print('Train Data is : \\n', train_index)\n#     print('Test Data is  : \\n', test_index)\n#     print('-------------------------------')\n      X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n      y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n#     print('X_train Shape is  ' , X_train.shape)\n#     print('X_test Shape is  ' , X_test.shape)\n#     print('y_train Shape is  ' ,y_train.shape)\n#     print('y_test Shape is  ' , y_test.shape)\n    \n","fdfcae45":"knn = KNeighborsClassifier(n_neighbors = 2)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nscore = knn.score(X_test, y_test)\n\nprint(\"Model Accuracy: % {}\".format(score*100))","5b291b4a":"from sklearn.metrics import roc_auc_score, accuracy_score\n\ndef evaluate_predictions(y_true, y_pred):\n    '''\n    Evaluate Predictions Function\n    Returns accuracy and auc of the model\n    \n    '''\n    auroc = roc_auc_score(y_true, y_pred)\n    accur = accuracy_score(y_true, y_pred )\n    print('Accuracy: %' + str(auroc*100))\n    print('AUC: %' + str(accur*100))","78da7908":"evaluate_predictions(y_test, y_pred)","8592038c":"report= classification_report(y_test, y_pred)\nprint(report)","62a87101":"# Build Model ","3fffd7df":"# Importing libraries","3e8dcecc":"# Splitting Data","e37e1ad8":"# Load data"}}