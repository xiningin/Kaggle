{"cell_type":{"dc080e5a":"code","e464961c":"code","6bc3e3eb":"code","81af9b41":"code","0db25aa7":"code","15ab08d2":"code","8bcf0b72":"code","69ab7eb8":"code","6d8d98cd":"code","b60c477b":"code","b175917e":"code","ff88ac53":"code","20138293":"code","64922ddb":"code","951f79c5":"code","c113dd18":"code","4bf55cc7":"code","75004c9d":"code","e84137db":"code","627ac504":"code","59fe3888":"code","3fc11060":"code","160e7e7e":"code","4319b913":"code","35f64fd0":"code","cf5083b4":"code","680fbfc7":"code","d6705e1e":"code","990c541c":"code","8663568a":"code","ebceff61":"code","bacaec18":"code","bb0f4bd6":"markdown","55ca81a7":"markdown","18fd38d6":"markdown","554cf6d7":"markdown","550bcf77":"markdown","15aa0924":"markdown","bc533348":"markdown","29d4a81f":"markdown","081b31b9":"markdown","01fa3bca":"markdown"},"source":{"dc080e5a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e464961c":"sales = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\nsales_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')","6bc3e3eb":"sales.head()","81af9b41":"sales.describe()","0db25aa7":"sales.shape","15ab08d2":"sales.isnull().sum()                    # to check the number of null values overall","8bcf0b72":"sales['store'].unique()","69ab7eb8":"sales['country'].unique()","6d8d98cd":"sales['product'].unique()","b60c477b":"total_sales = sales.groupby(sales['store']).sum()\ntotal_sales","b175917e":"total_sales.drop(['row_id'], axis=1, inplace=True)","ff88ac53":"total_sales","20138293":"total_units = sales.groupby(['store', 'country', 'product']).sum()\ntotal_units.drop(['row_id'], axis=1, inplace=True)\ntotal_units","64922ddb":"total_units.unstack().plot()\nplt.xticks(rotation=45)\nplt.xlabel('Store, Country')\nplt.ylabel('Units Sold')\nplt.title('Comparison of units sold')\nplt.show()","951f79c5":"def countplot_features(df, feature, title, color):\n    '''Takes a column from the dataframe and plots the distribution (after count).'''\n    \n           \n    plt.figure(figsize = (10, 5))\n    \n    sns.countplot(df[feature], color = color)\n        \n    plt.title(title, fontsize=15)\n    plt.xticks(rotation=90)\n    plt.show();","c113dd18":"cat_features = ['country', 'store', 'product']\nfor feature in cat_features:\n    fig = countplot_features(sales, feature=feature, title = \"Frequency of \"+ feature, color='red')","4bf55cc7":"for i, col in enumerate(['country', 'store', 'product']):\n    plt.figure(i)\n    sns.catplot(x=col, y='num_sold', data=sales, kind='point', aspect=3)\n    plt.xticks(rotation=90)","75004c9d":"sales['date'].dtype","e84137db":"sales['date'] = pd.to_datetime(sales['date'])","627ac504":"sales['date'].dtype","59fe3888":"sales['year'] = sales['date'].dt.year\nsales['month'] = sales['date'].dt.month\nsales['day'] = sales['date'].dt.day","3fc11060":"sales.head()","160e7e7e":"sales.drop('date', axis=1, inplace=True)","4319b913":"sales.tail()","35f64fd0":"sales_test['date'] = pd.to_datetime(sales_test['date'])","cf5083b4":"sales_test['year'] = sales_test['date'].dt.year\nsales_test['month'] = sales_test['date'].dt.month\nsales_test['day'] = sales_test['date'].dt.day","680fbfc7":"sales.head()","d6705e1e":"sales_test.drop(['date'], axis=1, inplace=True)","990c541c":"sales_test.tail()","8663568a":"# One hot encoder\nsales = pd.get_dummies(sales)\nsales_test = pd.get_dummies(sales_test)","ebceff61":"X_train = sales.drop(['num_sold'], axis=1)\ny_train = sales['num_sold']\n\nX_train","bacaec18":"from xgboost import XGBRegressor \n# define model\nmodel = XGBRegressor(colsample_bytree = 0.7,\n                     learning_rate = 0.07,\n                     max_depth= 10,\n                     min_child_weight= 4,\n                     n_estimators = 700,\n                     subsample = 0.7)\n# fit model\nmodel.fit(X_train, y_train)\n# make a prediction\ny_pred = model.predict(sales_test)\n\ny_pred","bb0f4bd6":"# Modelling","55ca81a7":"## Store-wise total units sold","18fd38d6":"## Get unique values for categorical features ","554cf6d7":"## Data Visualization","550bcf77":"## Import the required libraries ","15aa0924":"# KaggleMart vs KaggleRama","bc533348":"## Total units sold considering all the cat features ","29d4a81f":"## Understanding the data","081b31b9":"## Import the train dataset ","01fa3bca":"## Format the date feature "}}