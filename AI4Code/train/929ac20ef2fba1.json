{"cell_type":{"42700f71":"code","435c0de6":"code","544887a2":"code","d61e67db":"code","e022a263":"code","47524c39":"code","81951ff8":"code","e8f23957":"code","7d12f468":"code","58d6616f":"code","4c90c9bd":"code","22303b41":"code","6e1fff8c":"code","5209dc33":"code","d70dc717":"code","1b76f011":"code","0ba75c66":"code","49b9ada3":"code","abb4969d":"code","519d15ac":"code","dec3260e":"code","e1e74a25":"code","92ddf5bb":"code","dec82546":"code","91de0f99":"code","76cb38df":"code","415f2291":"code","56128075":"code","e5ee72c5":"markdown","23562a02":"markdown","3dd44139":"markdown","a19a8fb0":"markdown","850281c5":"markdown","1adbb2f1":"markdown","41bf7f43":"markdown","8d6690fd":"markdown","c1a077cb":"markdown"},"source":{"42700f71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","435c0de6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","544887a2":"sns.set(rc={'figure.figsize':(11.7,8.27)})","d61e67db":"factmarketsales = pd.read_excel('..\/input\/global-market-sales\/FactMarketSales.xlsx')\norders = pd.read_excel('..\/input\/global-market-sales\/Orders.xlsx')\nproducts = pd.read_excel('..\/input\/global-market-sales\/Products.xlsx')\nshippings = pd.read_excel('..\/input\/global-market-sales\/Shippings.xlsx')","e022a263":"df_all = factmarketsales.merge(orders,on='OrderCode').merge(products,on='ProductId').merge(shippings,on='OrderCode')\ndf_all.head(5)","47524c39":"df_all['OrderDate']=pd.to_datetime(df_all['OrderDate'])\ndf_all['ShipDate']=pd.to_datetime(df_all['ShipDate'])\ndf_all['Date Order'] = [d.date() for d in df_all['OrderDate']]\ndf_all['Time Order'] = [d.time() for d in df_all['OrderDate']]\ndf_all['Date Order']=pd.to_datetime(df_all['Date Order'])\ndf_all.head(5)","81951ff8":"df_all.describe().drop(['ProductId','OrderKey','ProductKey','ShipKey_y'],axis=1)","e8f23957":"df_all.columns","7d12f468":"df_all[['Sales', 'Quantity','Discount', 'Profit', 'Shipping Cost','Date Order']].plot(x='Date Order',kind='line', subplots=True, figsize=(20,15))\nplt.show()","58d6616f":"df_average_sales_month = df_all.groupby(by=['Date Order'], as_index=False)['Sales'].sum()\ndf_average_sales = df_average_sales_month.sort_values('Sales', ascending=False)\n\nplt.figure(figsize=(20,5))\nplt.plot(df_average_sales_month['Date Order'], df_average_sales_month['Sales'])\nplt.show()","4c90c9bd":"# The more remunerative\ndf_average_sales.head()","22303b41":"# The least remunerative\ndf_average_sales[::-1].head()","6e1fff8c":"# Top performing type of Sub Category in term of sales\ndf_top_stores = df_all.groupby(by=['SubCategory'], as_index=False)['Sales'].sum()\ndf_top_stores.sort_values('Sales', ascending=False).head(5)","5209dc33":"# Top performing type of Shipping Region in term of sales\ndf_top_stores = df_all.groupby(by=['ShippingRegion'], as_index=False)['Sales'].sum()\ndf_top_stores.sort_values('Sales', ascending=False).head(5)","d70dc717":"# Top performing type of Order Priority in term of sales\ndf_top_stores = df_all.groupby(by=['OrderPriority'], as_index=False)['Sales'].sum()\ndf_top_stores.sort_values('Sales', ascending=False).head()","1b76f011":"#Foreast of total sales volume\nts = df_average_sales_month.set_index('Date Order')\nfrom statsmodels.graphics.tsaplots import acf, pacf, plot_acf, plot_pacf\n\nfig, axes = plt.subplots(1,2, figsize=(20,5))\nplot_acf(ts, lags=100, ax=axes[0])\nplot_pacf(ts, lags=100, ax=axes[1])\nplt.show()","0ba75c66":"from sklearn.linear_model import LinearRegression\n\ndef fit_ar_model(ts, orders):\n    \n    X=np.array([ ts.values[(i-orders)].squeeze() if i >= np.max(orders) else np.array(len(orders) * [np.nan]) for i in range(len(ts))])\n    \n    mask = ~np.isnan(X[:,:1]).squeeze()\n    \n    Y= ts.values\n    \n    lin_reg=LinearRegression()\n    \n    lin_reg.fit(X[mask],Y[mask])\n    \n    print(lin_reg.coef_, lin_reg.intercept_)\n\n    print('Score factor: %.2f' % lin_reg.score(X[mask],Y[mask]))\n    \n    return lin_reg.coef_, lin_reg.intercept_\n    \ndef predict_ar_model(ts, orders, coef, intercept):\n    return np.array([np.sum(np.dot(coef, ts.values[(i-orders)].squeeze())) + intercept  if i >= np.max(orders) else np.nan for i in range(len(ts))])","49b9ada3":"orders=np.array([1,6,52])\ncoef, intercept = fit_ar_model(ts,orders)\npred=pd.DataFrame(index=ts.index, data=predict_ar_model(ts, orders, coef, intercept))\nplt.figure(figsize=(20,5))\nplt.plot(ts, 'o')\nplt.plot(pred)\nplt.show()","abb4969d":"diff=(ts['Sales']-pred[0])\/ts['Sales']\n\nprint('AR Residuals: avg %.2f, std %.2f' % (diff.mean(), diff.std()))\n \nplt.figure(figsize=(20,5))\nplt.plot(diff, c='blue')\nplt.grid()\nplt.show()","519d15ac":"#Forecast of the store-wise sales volume\n#Develop the forecast model for the phone, which shows the highest sales volume.\n\ndf_phone=df_all.where(df_all['SubCategory'] == 'Phones')\ndf_phone=df_phone.dropna()\ndf_phone=df_phone.groupby(by=['Date Order'], as_index=False)['Sales'].sum()\ndf_phone = df_phone.set_index('Date Order')\ndf_phone.head()","dec3260e":"plt.figure(figsize=(20,5))\nplt.plot(df_phone.index, df_phone.values)\nplt.show()","e1e74a25":"fig, axes = plt.subplots(1,2, figsize=(20,5))\nplot_acf(df_phone.values, lags=100, alpha=0.05, ax=axes[0])\nplot_pacf(df_phone.values, lags=100, alpha=0.05, ax=axes[1])\nplt.show()","92ddf5bb":"orders=np.array([1,6,29,46,52])\ncoef, intercept = fit_ar_model(df_phone,orders)\npred=pd.DataFrame(index=df_phone.index, data=predict_ar_model(df_phone, orders, coef, intercept))\nplt.figure(figsize=(20,5))\nplt.plot(df_phone, 'o')\nplt.plot(pred)\nplt.show()","dec82546":"diff=(df_phone['Sales']-pred[0])\/df_phone['Sales']\n\nprint('AR Residuals: avg %.2f, std %.2f' % (diff.mean(), diff.std()))\n \nplt.figure(figsize=(20,5))\nplt.plot(diff, c='orange')\nplt.grid()\nplt.show()","91de0f99":"dfext=df_all.where( df_all['SubCategory'] == 'Phones')\ndfext=dfext.dropna()\ndfext=dfext.groupby(by=['Date Order'], as_index=False)[['Sales', 'Quantity','Discount', 'Profit', 'Shipping Cost']].mean()\ndfext = dfext.set_index('Date Order')\ndfext.head()","76cb38df":"dfext.describe()","415f2291":"import seaborn as sns\ncorr = dfext.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr, \n            annot=True, fmt=\".3f\",\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)\nplt.show()","56128075":"corr['Sales'].sort_values(ascending=False)","e5ee72c5":"Since we wanted to know the performance by using time series, then we need to split the date and time from column 'OrderDate' respectively.","23562a02":"# Forecast of Total Sales Volume","3dd44139":"Let's take a look at overall sales performance","a19a8fb0":"# Look for predictive power from external variables","850281c5":"# Introduction\nGreetings, in this section I will show you to see some insight we can obtain by the sales and sales forecasrting. We will also see the overall sales data to be displayed in some graphs.","1adbb2f1":"# Some descriptions about the data","41bf7f43":"# Gain some graphical insight\nlet's see how some values obtained by transaction in time","8d6690fd":"# Import and compile all data","c1a077cb":"# Sales insight by categories"}}