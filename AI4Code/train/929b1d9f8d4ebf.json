{"cell_type":{"f42bb0a3":"code","69b8c700":"code","9ac5b3c4":"code","380aba01":"code","c296534b":"code","286455c9":"code","ad276b5e":"code","9f8f22d6":"code","d1421d36":"code","5c491e0c":"code","8adf7c94":"code","1fca7f9d":"code","b46d98a3":"code","1a8e7b57":"code","b0f7b0a4":"code","9450cf28":"code","19bd7b68":"code","42912c29":"code","fd442a2f":"code","237515f3":"code","b4f1f651":"code","cd72d462":"code","18b8fcc4":"code","837bc6e3":"code","d4a1e1f4":"code","38a37eac":"code","c924df8d":"code","599d56c5":"code","e3640a00":"code","306d5b2a":"code","79ad8094":"code","6ba96f6b":"code","94983825":"code","60430795":"code","df1368a6":"code","d3b45d64":"code","b7108520":"code","0080890f":"code","18727e7b":"code","5cc9e9bd":"code","f64f1593":"code","95adec10":"code","ec23cc50":"code","bf1ec2a7":"code","0387ce4b":"markdown","e4dc5959":"markdown","ecce4f42":"markdown","bca1c9c1":"markdown","0e691d64":"markdown","3b56d5ef":"markdown","890fed19":"markdown","17d53f09":"markdown","23613d5d":"markdown","b99a0077":"markdown","d56aaa18":"markdown","e8a29011":"markdown","3ece2769":"markdown","37d4260f":"markdown","511f32c8":"markdown","def435d3":"markdown","ab9da40c":"markdown","de3ef503":"markdown","3c3de853":"markdown","54179321":"markdown","af1ff5ff":"markdown","8072fadb":"markdown"},"source":{"f42bb0a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","69b8c700":"#Sorting and analysis\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\n\n# Visulization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport folium\n\n# Converter\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\n\n#html embedding\nfrom IPython.core.display import HTML\n\n# hide Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","9ac5b3c4":"file_mex = '..\/input\/Mex_covid_update.csv'\nmex_cov = pd.read_csv(file_mex)\nmex_cov.head()","380aba01":"mex_cov.shape","c296534b":"mex_cov.info()","286455c9":"# Change the type to columns\nmex_cov.iloc[:,[0,9,10,11]] = mex_cov.iloc[:,[0,9,10,11]].apply(pd.to_datetime) \n\n#Check for NaN values (exclude FECHA_DEF)\nmex_cov.drop('FECHA_DEF', axis = 1).isna().sum()","ad276b5e":"# Confirmed COVID\ncovidc_table = mex_cov[mex_cov['RESULTADO'] == 'POSITIVO']\nprint(\"The number of people confirmed with COVID so far is: {:.0f}\".format(covidc_table.shape[0]))\n\n# COVID negative\ncovidn_table = mex_cov[mex_cov['RESULTADO'] == 'NEGATIVO']\nprint(\"The number of people with negative test against COVID so far is: {:.0f}\".format(covidn_table.shape[0]))\n\n# COVID standby\ncovidp_table = mex_cov[mex_cov['RESULTADO'] == 'PENDIENTE']\nprint(\"The number of people wainting for a result with COVID so far is: {:.0f}\".format(covidp_table.shape[0]))\n\n# Deaths\ndeaths = mex_cov[(~mex_cov['FECHA_DEF'].isna()) & (mex_cov['RESULTADO'] == 'POSITIVO')]\nprint(\"Number of deaths by COVID: {:.0f}\".format(deaths.shape[0]))\n\n# Total \nprint(\"Total number of people analiyzed so far: {:.0f}\".format(mex_cov.shape[0]))","9f8f22d6":"# Deaths by date\nmex_deaths = mex_cov[~mex_cov['FECHA_DEF'].isna()]\nmex_deaths = mex_deaths.groupby('FECHA_DEF').size().reset_index()\nmex_deaths.columns = ['FECHA_DEF', 'DEFUNCIONES']","d1421d36":"cov_result = mex_cov.loc[:,['FECHA_SINTOMAS', 'RESULTADO']].pivot_table(index= 'FECHA_SINTOMAS', columns = 'RESULTADO', aggfunc = len, fill_value = 0).reset_index()","5c491e0c":"mex_cov[(mex_cov['FECHA_SINTOMAS'] <= '2020-02-01') & (mex_cov['RESULTADO'] != 'NEGATIVO')]","8adf7c94":"temp =  cov_result.melt(id_vars = 'FECHA_SINTOMAS', \n                       value_vars = ['NEGATIVO', 'PENDIENTE', 'POSITIVO'])\n\n### bar plot\nfig = px.bar(temp, x = 'FECHA_SINTOMAS', y = 'value', color = 'RESULTADO', title = 'Casos totales en M\u00e9xico',\n            color_discrete_sequence = ['#393e46', '#21bf73', '#fe9801'])\nfig.update_layout(barmode = 'stack')\nfig.show()","1fca7f9d":"# Confirmed grouped by State\ncov_sta_g = covidc_table.groupby('ENTIDAD_RES').apply(len).reset_index()\ncov_sta_g.columns = ['ENTIDAD', 'TOTAL']\n\n# Confirmed grouped by Date\ncov_date_g = covidc_table.groupby('FECHA_SINTOMAS').apply(len).reset_index()\ncov_date_g.columns = ['FECHA', 'TOTAL']","b46d98a3":"temp = cov_sta_g.sort_values(by = 'TOTAL', ascending= False)\ntemp = temp.reset_index(drop = True)\ntemp.style.background_gradient(cmap = 'Reds')","1a8e7b57":"now = dt.datetime.now()\nnow = str(now.strftime(\"%d\/%m\/%Y\"))\n# By state\nfig = px.bar(temp.sort_values('TOTAL', ascending = True), x = 'TOTAL', y = 'ENTIDAD', title = 'Confirmed cases in each State 17\/06\/2020'.format(now),\n             text = 'TOTAL', orientation = 'h', range_x = [0, max(temp['TOTAL'] +150)])\nfig.update_traces(marker_color =\"#084177\", opacity = 0.8, textposition = 'outside')\nfig.show()","b0f7b0a4":"cov_date_g['TOTAL_ACCU'] = cov_date_g[['TOTAL']].cumsum()\ntemp = cov_date_g.sort_values(by = 'FECHA', ascending= True)\ntemp = temp.reset_index(drop = True)\ntemp.style.background_gradient(cmap = 'Greens')","9450cf28":"# Confirmed and deaths grouped by Date\ntemp_d = covidc_table[~covidc_table['FECHA_DEF'].isna()]\ntemp_d = temp_d.groupby('FECHA_DEF').size().reset_index()\ntemp_d.columns = ['FECHA_DEF', 'DEFUNCIONES']\ntemp_d['DEF_ACU'] = temp_d['DEFUNCIONES'].cumsum()","19bd7b68":"# Merge both tables\ntemp_both = pd.merge(temp, temp_d, how= 'left', right_on = 'FECHA_DEF', left_on ='FECHA')\ntemp_both.iloc[:,[4,5]] = temp_both.iloc[:,[4,5]].fillna(0)\ntemp_both.iloc[:,[4,5]] = temp_both.iloc[:,[4,5]].astype('int')\ntemp_both.drop('FECHA_DEF', inplace = True, axis = 1)\ntemp_both","42912c29":"mex_cov[mex_cov['FECHA_DEF'] < mex_cov['FECHA_SINTOMAS']].iloc[:,:14]","fd442a2f":"temp_melt = temp_both.iloc[:,[0,2,4]].melt(id_vars = 'FECHA', value_vars = ['DEF_ACU', 'TOTAL_ACCU'],\n                                     var_name = 'CASE', value_name = 'COUNT')\ntemp_melt['CASE'] = temp_melt['CASE'].replace({'DEF_ACU':'DEATHS',\n                                         'TOTAL_ACCU':'CONFIRMED'})\n\n# Area plot\nfig = px.area(temp_melt,\n             x = 'FECHA',\n             y = 'COUNT',\n             color = 'CASE',\n             title = 'Cases in Mexico over time',\n             color_discrete_sequence = ['red', 'grey'])\nfig.show()","237515f3":"# Format the date\ntemp['FECHA'] = pd.to_datetime(temp['FECHA'])\ntemp['FECHA'] = temp['FECHA'].dt.strftime('%m\/%d\/%Y')\n\nfig, ax1 = plt.subplots(figsize = (20,12))\n# bar plot creation\nax1.set_title(label = 'Number of cases confirmed {}'.format(now), fontsize = 14)\nax1 = sns.barplot(x = 'FECHA', y='TOTAL', data = temp, palette = 'summer')\nax1.set_xlabel('Fecha', fontsize= 12)\nax1.set_ylabel('Confirmed cases')\nax1.tick_params(axis = 'y')\nax1.set_ylim(0,temp['TOTAL'].max() +10000)\n# Specify we want to share the same x-axis\nax2 = ax1.twinx()\n# line plot\nax2 = sns.lineplot(x = 'FECHA', y = 'TOTAL_ACCU', data = temp, color ='red')\nax2.set_ylabel('Total', fontsize = 12)\nax2.tick_params(axis = 'y', color = 'red')\nax2.set_ylim(0,temp['TOTAL_ACCU'].max() + 500)\n\n# Rotate ticklabels\nax1.set_xticklabels(ax1.get_xticklabels(), rotation = 45, ha = 'right', fontsize = 7)\nplt.tight_layout()","b4f1f651":"temp =  temp_both.melt(id_vars = 'FECHA', \n                       value_vars = ['TOTAL', 'DEFUNCIONES'])\ntemp['variable'] = temp['variable'].replace({''})\n\n# New cases by date\nfig = px.bar(temp, \n             x = 'FECHA', \n             y = 'value',\n             color = 'variable',\n             title = 'Casos por d\u00eda',\n             width = 1100, height = 600, range_y = [0, max(temp['value'] +500)])\n\n#'#393e46', '#21bf73', '#fe9801'])\nfig.update_layout(barmode = 'stack')\nfig.show()","cd72d462":"temp = covidc_table.groupby(['TIPO_PACIENTE', 'SEXO']).size().reset_index()\ntemp.rename(columns ={0:'CONTEOS'}, inplace = True)\nfig = px.bar(temp, x=\"TIPO_PACIENTE\", y= 'CONTEOS', color='SEXO', barmode='group',\n             height=400)\nfig.show()","18b8fcc4":"temp = covidc_table[covidc_table['TIPO_PACIENTE'] == 'HOSPITALIZADO']\n\ntemp = temp.groupby(['INTUBADO', 'SEXO']).size().reset_index()\ntemp.rename(columns ={0:'CONTEOS'}, inplace = True)\n\nfig = px.bar(temp, x=\"INTUBADO\", y= 'CONTEOS', color='SEXO', barmode='group',\n             height=400, title = 'Personas hospitalizadas y su condici\u00f3n')\nfig.show()","837bc6e3":"temp = covidc_table[covidc_table['TIPO_PACIENTE'] == 'HOSPITALIZADO']\nfig = px.box(temp, \n            x = 'INTUBADO',\n            y = 'EDAD',\n            color = 'SEXO',\n            title = \"Age of Confirmed Cases in Hospital\"\n            )\nfig.show()","d4a1e1f4":"# Make an age range\nlabels =['0 a 10',\n        '11 a 20',\n        '21 a 30',\n        '31 a 40',\n        '41 a 50',\n        '51 a 60',\n        '61 a 70',\n        '71 a 80',\n        '> 81']\ncovidc_table['EDAD_RANGO'] = pd.cut(x = covidc_table['EDAD'], bins = [-1,10,20,30,40,50,60,70,80,covidc_table['EDAD'].max()], labels=labels)\n\n# Select only the Intubated\ntemp = covidc_table[covidc_table['INTUBADO'] == 'SI']\ntemp = temp.groupby(['EDAD_RANGO', 'SEXO']).size().reset_index()\ntemp.rename(columns ={0:'CONTEOS'}, inplace = True)\n\n#\nfig = px.bar(temp, x=\"EDAD_RANGO\", y= 'CONTEOS', color='SEXO', barmode='group',\n             height=400, title = 'Rangos de edad de las personas hospitalizadas por COVID19')\nfig.show()\n","38a37eac":"# Following the intubated make a Pivot table\ntemp = pd.pivot_table(covidc_table, index='INTUBADO', columns = ['OBESIDAD'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp = temp.melt(id_vars = 'INTUBADO', value_vars = ['NO', 'SE IGNORA', 'SI'], var_name = 'OBESIDAD', value_name = 'CONTEO')\n\n### bar plot\nfig = px.bar(temp, x = 'INTUBADO', y = 'CONTEO', color = 'OBESIDAD', title = 'Condicion de Obesidad de las personas confirmadas con COVID19')\nfig.update_layout(barmode = 'stack')\nfig.show()","c924df8d":"# Make subplots by Disease that can be affected in the COVID infection.\ntemp = covidc_table[covidc_table['TIPO_PACIENTE'] == 'HOSPITALIZADO']\n#Obesity\ntemp_c = pd.pivot_table(temp, index='INTUBADO', columns = ['OBESIDAD'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp_c = temp_c.melt(id_vars = 'INTUBADO', value_vars = ['NO', 'SE IGNORA', 'SI'], var_name = 'OBESIDAD', value_name = 'CONTEO')\nfig = px.bar(temp_c, x = 'INTUBADO', y = 'CONTEO', color = 'OBESIDAD', title = 'Condicion de Obesidad de las personas hospitalizadas por COVID19', barmode ='stack')\nfig.show()\n\n#Diabetes\ntemp_c = pd.pivot_table(temp, index='INTUBADO', columns = ['DIABETES'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp_c = temp_c.melt(id_vars = 'INTUBADO', value_vars = ['NO', 'SE IGNORA', 'SI'], var_name = 'DIABETES', value_name = 'CONTEO')\nfig = px.bar(temp_c, x = 'INTUBADO', y = 'CONTEO', color = 'DIABETES', title = 'Condicion de Diabetes de las personas hospitalizadas por COVID19', barmode = 'stack')\nfig.show()\n\n#Hipertension\ntemp_c = pd.pivot_table(temp, index='INTUBADO', columns = ['HIPERTENSION'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp_c = temp_c.melt(id_vars = 'INTUBADO', value_vars = ['NO', 'SE IGNORA', 'SI'], var_name = 'HIPERTENSION', value_name = 'CONTEO')\nfig = px.bar(temp_c, x = 'INTUBADO', y = 'CONTEO', color = 'HIPERTENSION', title = 'Condicion de Hipertension de las personas hospitalizadas por COVID19', barmode = 'stack')\nfig.show()","599d56c5":"temp_c = pd.pivot_table(covidc_table[covidc_table['TIPO_PACIENTE'] == \"HOSPITALIZADO\"], index='INTUBADO', columns = ['SECTOR'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp_c = temp_c.melt(id_vars = 'INTUBADO', var_name= 'SECTOR')\n\nfig = px.bar(temp_c, \n            x = 'SECTOR',\n            y = 'value',\n            color = 'INTUBADO',\n            title = 'N\u00famero de personas registradas como hospitalizadas y confirmadas con COVID en los distintos hospitales.',\n            barmode = 'stack')\nfig.show()","e3640a00":"# Following the same interest, we explore the risk for the people with COVID if they have some disease.\ntemp = covidc_table\ntemp['COUNT_ENF'] = temp.iloc[:,[18,22,25]].eq('SI').sum(axis =1)\ndic = {0:'No comorbilidades',\n      1:'Una comorbilidad',\n      2:'Dos comorbilidades',\n      3:'Tres comorbilidades'}\ntemp['COUNT_ENF'] = temp['COUNT_ENF'].map(dic)\n\n\ntemp_c = pd.pivot_table(temp, index='COUNT_ENF', columns = ['INTUBADO'],\n              aggfunc = 'size',\n              fill_value = 0).reset_index()\ntemp_c = temp_c.melt(id_vars = 'COUNT_ENF', var_name = 'INTUBADO')\n\nfig = px.bar(temp_c, \n            x = 'COUNT_ENF',\n            y = 'value',\n            color = 'INTUBADO',\n            title = 'N\u00famero de co-morbilidades de las personas confirmadas con COVID19',\n            category_orders= {'COUNT_ENF': ['No comorbilidades','Una comorbilidad','Dos comorbilidades']})\nfig.show()","306d5b2a":"#  read the population data frame\npopu = pd.read_csv(\"..\/input\/data-covid19\/poblacion_2017.csv\")\npopu['Estado'] = popu['Estado'].str.upper()\npopu['Poblacion'] = popu['Poblacion'].str.replace(\" \", \"\").astype('int')\npopu.head()","79ad8094":"# Confirmed deaths grouped by State\ncov_de_g = covidc_table[~covidc_table['FECHA_DEF'].isna()].groupby(['ENTIDAD_RES']).apply(len).reset_index()\ncov_de_g.columns = ['ENTIDAD', 'TOTAL']\n\ntemp = pd.merge(cov_de_g, popu, left_on=\"ENTIDAD\", right_on='Estado').drop(\"Estado\", axis = 1)\ntemp['rate'] = (temp['TOTAL']\/temp['Poblacion']) * 10000\ntemp = temp.sort_values('rate', ascending = False)\n\n# Making a plot\nfig = go.Figure()\n\nfig = fig.add_trace(go.Scatter(x=temp['ENTIDAD'], y=temp['rate'],\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig = fig.update_layout(showlegend=False, \n                  title = \"N\u00famero de fallecimientos por COVID por cada 10000 habitantes\", \n                 yaxis_title = \"\")\n\nfig.show()","6ba96f6b":"# Confirmed deaths grouped by State\ncov_de_g = covidc_table[~covidc_table['FECHA_DEF'].isna()].groupby(['ENTIDAD_RES']).apply(len).reset_index()\ncov_de_g.columns = ['ENTIDAD', 'TOTAL-D']\n\ntemp = pd.merge(cov_de_g, cov_sta_g, on=\"ENTIDAD\")\ntemp['Letality'] = (temp['TOTAL-D']\/temp['TOTAL'])*100 \ntemp = temp.sort_values(\"Letality\", ascending = False)\n\n# Making a plot\nfig = go.Figure()\n\nfig = fig.add_trace(go.Scatter(x=temp['ENTIDAD'], y=temp['Letality'],\n                    mode='lines+markers',\n                    name='lines+markers'))\nfig = fig.update_layout(showlegend=False, \n                  title = \"Fallecimientos por casos confirmados de COVID\", \n                 yaxis_title = \"% Falleciminetos por casos confirmados\"\n)\n\nfig.show()","94983825":"# How many COVID confirmed talk a ethnic languages? 1 means a positive value and 2 means a negative value.\ncovidc_table['HABLA_LENGUA_INDIG'].value_counts()","60430795":"# How many COVID confirmed are migrants?\ncovidc_table['MIGRANTE'].value_counts()","df1368a6":"HTML('''<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977789\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977789\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","d3b45d64":"mex_state_death = mex_cov[~mex_cov['FECHA_DEF'].isna()]\nmex_state_death = mex_state_death.groupby('ENTIDAD_RES').size().reset_index().rename(columns = {0:'TOTAL_DEF',\n                                                                                               'ENTIDAD_RES': 'ENTIDAD'})\n\n# Merge\ntemp = pd.merge(mex_state_death, cov_sta_g,  on = 'ENTIDAD')\n\n# Scatter plot Deaths vs Confiermed\nfig = px.scatter(temp,\n                x = 'TOTAL',\n                y = 'TOTAL_DEF',\n                color = 'ENTIDAD',\n                text = 'ENTIDAD',\n                title = 'Fallecimientos vs Confirmados por Estado.',\n                labels = {'TOTAL_DEF':'Defunciones', 'TOTAL': 'Confirmados'})\nfig.update_traces(textposition = 'top center')\nfig.show()","b7108520":"cov_stamun_g = covidc_table.groupby(['ENTIDAD_RES', 'MUNICIPIO']).apply(len).reset_index()\ncov_stamun_g.columns = ['ENTIDAD', 'MUNICIPIO', 'TOTAL']\n#cov_stamun_g.head()\n\nmex_state_death = mex_cov[~mex_cov['FECHA_DEF'].isna()]\nmex_state_death = mex_state_death.groupby(['ENTIDAD_RES', 'MUNICIPIO']).size().reset_index().rename(columns = {0:'TOTAL_DEF',\n                                                                                             'ENTIDAD_RES': 'ENTIDAD'})\n#mex_state_death.head()\n# Merge\ntemp = pd.merge(mex_state_death , cov_stamun_g,  on = ['ENTIDAD','MUNICIPIO'])\n#temp.head()\n\nfig = px.treemap(temp,\n                path = ['ENTIDAD','MUNICIPIO'],\n                values = 'TOTAL', height= 700,\n                title = 'Numero de casos confirmados por Estado',\n                color_discrete_sequence=px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()\n\nfig = px.treemap(temp,\n                path = ['ENTIDAD', 'MUNICIPIO'],\n                values = 'TOTAL_DEF', height= 700,\n                title = 'Numero de fallecimientos por COVID por Estado',\n                color_discrete_sequence=px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","0080890f":"first_date = covidc_table.groupby('ENTIDAD_RES')['FECHA_SINTOMAS'].agg(['min']).reset_index()\nfrom datetime import timedelta\nimport random\n\n# Last date\n# ---------\n\ntest = covidc_table.groupby(['ENTIDAD_RES', 'FECHA_SINTOMAS']).size().reset_index().rename(columns = {0:'Confirmados'})\ntest = test.groupby(['ENTIDAD_RES', 'FECHA_SINTOMAS'])['Confirmados']\nlast_day = test.sum().diff().reset_index()\n\nmask = last_day['ENTIDAD_RES'] != last_day['ENTIDAD_RES'].shift(1)\nlast_day.loc[mask, 'Confirmados'] = np.nan\n\nlast_day = last_day.groupby('ENTIDAD_RES')['FECHA_SINTOMAS'].agg(['max']).reset_index()\n\n# First_last\n# -------\nfirst_last = pd.concat([first_date, last_day[['max']]], axis = 1)\n\n# Added 1 more day, which will show the next day as the day on which last case appeared\nfirst_last['max'] = first_last['max'] + timedelta(days = 1)\n\n# No of days\nfirst_last['Days'] = first_last['max'] - first_last['min']\n\n# Task column  as State\nfirst_last['Task'] = first_last['ENTIDAD_RES']\n\n# rename\nfirst_last.columns = ['ENTIDAD_RES', 'Start', 'Finish', 'Days', 'Task']\n# sort by no. of days\nfirst_last = first_last.sort_values('Days')\n\n#first_last.head()\n\n# Visualization\n# ------------\n# Produce random colors\nclr = [\"#\"+''.join([random.choice('0123456789ABC') for j in range(6)]) for i in range(len(first_last))]\n\n# Plot \nfig = ff.create_gantt(first_last,\n                     index_col = 'ENTIDAD_RES',\n                     colors = clr,\n                     show_colorbar = False,\n                     bar_width = 0.2,\n                     showgrid_x = True,\n                     showgrid_y = True,\n                     height= 1600,\n                     title = 'Duracion Epidemica')\nfig.show()","18727e7b":"temp = covidc_table[covidc_table['FECHA_DEF'] <= covidc_table['FECHA_SINTOMAS']]\ntemp.shape","5cc9e9bd":"temp.iloc[:,0:14]","f64f1593":"covidc_table.groupby('NEUMONIA')['INTUBADO'].value_counts()","95adec10":"covidn_table.groupby('NEUMONIA')['INTUBADO'].value_counts()","ec23cc50":"# Get first and last datetime for final week of data\nrange_max = covidc_table['FECHA_SINTOMAS'].max()\nrange_min = range_max - dt.timedelta(days = 14)\n\ntable_conf_14 = covidc_table[(covidc_table['FECHA_SINTOMAS'] >= range_min) & ((covidc_table['FECHA_SINTOMAS'] <= range_max))]\ntable_conf_14.shape","bf1ec2a7":"temp = table_conf_14.groupby([\"ENTIDAD_RES\", \"MUNICIPIO\"]).apply(len).reset_index()\ntemp.columns = [\"ENTIDAD\", \"MUNICIPIO\", \"TOTAL\"]\n#temp.head()\n\n# Tree plot\nfig = px.treemap(temp,\n                path = [\"ENTIDAD\", \"MUNICIPIO\"],\n                values = \"TOTAL\", height= 700,\n                title = \"Numero de casos confirmados en los ultimos 14 d\u00edas\",\n                color_discrete_sequence=px.colors.qualitative.Prism)\nfig.data[0].textinfo = \"label+text+value\"\nfig.show()","0387ce4b":"Following the confirmed cases, How many of them are in a Hospital?\n\nThe column `TIPO_PACIENTE` containt values that means __Hospitalizado__ which means that are present in a Hospital and __Ambulatoria__ which means pacients that not require be in a hospital. ","e4dc5959":"The data was already processed in which added the States names and columns and meanings in each column. The some other colums that contain numbers as code but at the time of analyzing them we shows the meanings.","ecce4f42":"We can observe some values from people that had a confirmed results in the COVID test but the Symptoms date are before from the first case in Mexico. Following the information from the goberment, those inconsistencies could be by a typing error. Ther are only 8 of these errors.","bca1c9c1":"#### More questions","0e691d64":"As in Mexico, some \"news\" said that the hospitals are completelly full. To know more about this, It is neccessary to select the people confirmed with COVID19 and that are present in a Hispital. For a better analysis it would be good to have the date of which is the capacity for all hospitals.","3b56d5ef":"As another problem in Mexico, we have a fraction of population susceptible to worsening for `OBESIDAD`, `HIPERTENSION` and `DIABETES` (obesity, hypertension and diabetes respectivelly). ","890fed19":"### Data Exploration\n\nThe data contains all subjects that have been analysized so far, confirmed, negative and those who are wainting for a result of the test. \nAs the columns are used, I will explain the meaning.","17d53f09":"How many have died before to the Symptoms date?","23613d5d":"In total, 684804 people have been analyzed or are in the process to get a result from COVID19 test.","b99a0077":"Select the confirmed cases from the last two weeks. These cases are not the active cases but a high proportion of active cases coul be found here.","d56aaa18":"Exploring more particular questions.","e8a29011":"### Data Exploration from confirmed COVID\n#### Data grouped\n\nThe column `ENTIDAD_RES` has the Mexico State in which the pacient lives.","3ece2769":"##### For each State","37d4260f":"The next columns needs to change the type becase are as objects instead of dates:\n* FECHA_ACTUALIZACION: Correspond to the date of published data.\n* FECHA_INGRESO: Corresponds to the date when the pacient enter to the Hospital.\n* FECHA_SINTOMAS: Corresponds to the date when the pacient start to have a symptom.\n* FECHA_DEF: Corresponds to the date when the pacient unfortunately passed away. It is important to mention that this column is the only one that contain NaN values.","511f32c8":"### Set up","def435d3":"Following the interest in co-morbilities, we classify each pacient with how many co-morbilities, with more risk, are present __UNA, DOS, TRES or NO__ co-morbilities (one, two, three or zero respectivelly).","ab9da40c":"Another interest is calculate the mortality rate that is the proportion of deaths in a period of time and the total population in a group or state. ","de3ef503":"### Derived tables","3c3de853":"## COVID Mexico Data Analysis\n\nIn this notebook, I use the data from Coronavirus cases in M\u00e9xico. The data was downloaded from the Secretry of Health from Mexico. I made this first notebook trying to be more informative against the fake news that are present in Mexico.\nAs is my first data science project in Python I apologies if my code is a litte ugly but I will keep learning. (Also sorry for my English).","54179321":"Selecting all people that is confirmed with COVID and are in a Hospital, how many of them are intubate? An affirmative value (__SI__) in `INTUBADO` column means that the pacient shows a severity of illness.  ","af1ff5ff":"#### By Symptom Date","8072fadb":"### Epidemic Span"}}