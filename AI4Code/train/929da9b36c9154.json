{"cell_type":{"12eb759d":"code","bc42083f":"code","298151c6":"code","bdbe9ce7":"code","961c2e11":"code","538f4317":"code","67825ad9":"code","6154b8dd":"code","3d9158e7":"code","8b401c29":"code","5b4753b4":"code","2c56847b":"code","98e32f62":"code","664c46d6":"code","43893ed4":"code","0d17291d":"code","034ba60d":"code","b50677f6":"code","8de2f3fd":"code","5846dada":"code","470e868b":"code","fe27bdd3":"code","c667f5d3":"code","e7c9669f":"code","f6806859":"code","73720390":"code","2a3e26eb":"code","a03e0d82":"code","b2ea6ae0":"code","f4639c58":"code","62b8575a":"code","df77ee81":"code","67092bba":"code","19f0b2b6":"code","691f261c":"markdown"},"source":{"12eb759d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n","bc42083f":" \ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\n","298151c6":"train_data.head()","bdbe9ce7":"test_data.head()","961c2e11":"train_data.info()","538f4317":"test_data.info()\n","67825ad9":"print(\"training data \", train_data.shape)\nprint(\"test data \", test_data.shape)","6154b8dd":"sns.countplot('Survived', data = train_data)\nplt.show()","3d9158e7":"sns.countplot('Survived', hue = 'Sex', data = train_data)\nplt.plot()","8b401c29":"sns.countplot('Survived', hue = 'Embarked', data = train_data)\nplt.plot()","5b4753b4":"sns.countplot(x='Survived', hue = 'Embarked', data = train_data)\nplt.plot()","2c56847b":"((train_data.groupby(['Sex','Survived']).Survived.count() * 100) \/ train_data.groupby('Sex').Survived.count())","98e32f62":"(train_data.groupby(['Pclass','Survived']).Survived.count() * 100) \/ train_data.groupby('Pclass').Survived.count()","664c46d6":"(train_data.groupby(['Embarked','Survived']).Survived.count() * 100) \/ train_data.groupby('Embarked').Survived.count()","43893ed4":"train_data.isnull().sum()","0d17291d":"test_data.isnull().sum()","034ba60d":"train_data.drop('Cabin', axis = 1, inplace = True)\ntest_data.drop('Cabin', axis = 1, inplace = True)","b50677f6":"columns_to_drop = ['PassengerId','Ticket']\ntrain_data.drop(columns_to_drop, axis = 1, inplace = True)\ntest_data.drop(columns_to_drop[1], axis = 1, inplace = True)","8de2f3fd":"train_data['Age'].fillna(train_data['Age'].mean(), inplace = True)\ntest_data['Age'].fillna(test_data['Age'].mean(), inplace = True)","5846dada":"train_data['Embarked'].fillna('S', inplace = True)\ntest_data['Fare'].fillna(test_data['Fare'].mean(), inplace = True)","470e868b":"train_data.isnull().sum()","fe27bdd3":"test_data.isnull().sum()","c667f5d3":"gender = {'male': 0,'female': 1}\nEmbark={'S': 0,'C':1,'Q':2}","e7c9669f":"train_data.Embarked =[Embark[item] for item in train_data.Embarked ]\ntrain_data.Sex = [gender[item] for item in train_data.Sex]","f6806859":"test_data.Embarked =[Embark[item] for item in test_data.Embarked ]\ntest_data.Sex = [gender[item] for item in test_data.Sex]","73720390":"train_data.drop('Name', axis = 1, inplace = True)\ntest_data.drop('Name', axis = 1, inplace = True)","2a3e26eb":"from sklearn.preprocessing import StandardScaler\nss= StandardScaler()","a03e0d82":"features= ['Age', 'Fare']\n\ntrain_data[features]= ss.fit_transform(train_data[features])\ntest_data[features]= ss.fit_transform(test_data[features])","b2ea6ae0":"train_data.head()","f4639c58":"X_train = train_data.drop(\"Survived\", axis=1)\nY_train = train_data[\"Survived\"]\nX_test = test_data.drop(\"PassengerId\", axis = 1)\nprint(\"shape of X_train\",X_train.shape)\nprint(\"Shape of Y_train\",Y_train.shape)\nprint(\"Shape of x_test\",X_test.shape)","62b8575a":"from sklearn.linear_model import LogisticRegression\n\nclf= LogisticRegression()\n\nclf.fit(X_train, Y_train.ravel())\n\npredictions= clf.predict(X_test)","df77ee81":"print(clf.score(X_train, Y_train))","67092bba":"submission= pd.DataFrame({'PassengerId' : test_data['PassengerId'], 'Survived': predictions })","19f0b2b6":"submission.head()","691f261c":"Understanding the data Survival : 0 = No, 1 = Yes\n\nPclass : A proxy for socio-economic status (SES) 1st = Upper 2nd = Middle 3rd = Lower\n\nsibsp : The # of siblings \/ spouses aboard the Titanic Sibling = brother, sister, stepbrother, stepsister Spouse =\n\nhusband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch : The # of parents \/ children aboard the Titanic Parent = mother, father Child = daughter, son, stepdaughter, stepson Some children travelled only with a nanny, therefore parch=0 for them.\n\nTicket : Ticket number\n\nFare : Passenger fare\n\nCabin : Cabin number embarked\n\nPort of Embarkation: C = Cherbourg, Q = Queenstown, S = Southampton\n\nName, Sex , Age are self-explanatory"}}