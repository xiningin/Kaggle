{"cell_type":{"b723f7fa":"code","43c517f2":"code","a3601b35":"code","4101e720":"code","25de66e0":"code","903c1796":"code","f1d88322":"code","da56cec4":"code","e35abfac":"code","006aa3fe":"code","577d2dfc":"code","dd27481c":"code","97e16316":"code","dadecae9":"code","13d1dcd4":"code","21e157f5":"code","f34211eb":"code","22375d13":"code","a79afcfd":"code","905b3bd6":"code","3a18f07a":"code","86574252":"code","18a334a5":"code","197f3536":"code","b834740f":"code","c32855c0":"code","b0cea534":"code","316535a0":"code","d367cbfc":"code","1bae20f3":"code","85e391e9":"code","e5482db7":"code","d2d702ae":"code","a56b824d":"code","3d49f472":"code","f6fb9303":"code","f65831d5":"code","feabf1be":"code","8d32f9d8":"code","47d80f08":"code","6a976222":"code","a3b14325":"code","7b510383":"code","783d6d1c":"code","1728a25e":"code","3c3e66f5":"code","23c3fb7a":"code","7f1f3731":"code","23e7d5d6":"code","c666ded6":"code","da81af21":"code","3e2a0d3d":"code","7727bc56":"code","60d64d4c":"code","47c3fb6c":"code","2392a293":"code","2047ecc0":"code","fce8f125":"code","40794296":"code","333f4d93":"code","c9ed67f2":"code","98b5c4bc":"code","9ecb5bed":"code","af953c99":"code","be6617aa":"code","8e942a64":"code","8e150787":"code","4f909b07":"code","f009d7ec":"code","0b4ff11c":"code","2a497083":"code","64da5dd5":"code","17929ec1":"code","2ab73b78":"code","ad61c3fb":"code","124be71a":"code","7c9cdced":"code","a3675257":"code","a021e320":"code","68b741f3":"code","f3591da5":"code","5cb9158c":"code","20f3136e":"code","2973a4a5":"code","718398fb":"code","95ef6544":"code","4b319139":"code","720ba8a1":"code","fe3e0cbb":"code","f0838c6e":"code","3a0ff5a0":"code","57b9381d":"code","cd528046":"code","0432cc8c":"code","9f716249":"code","75231a3a":"code","92bd2924":"code","f7059942":"code","3380a710":"code","f350bbf3":"code","bc8235b4":"code","057ac4b3":"code","6e21b7b5":"code","9bd9a3ae":"code","663c863c":"code","fa7d084f":"code","096b7b2e":"code","7268ef98":"code","4644d7e4":"code","e1c7d033":"code","153636bf":"code","a7128721":"code","bfd18377":"code","9e76483e":"code","c8bc9d94":"code","859d308a":"code","3bcf10aa":"code","e53c46f0":"code","a19dc288":"code","ea30b8b8":"code","8f2a3aa8":"code","3579532a":"code","dccab5c0":"code","281f72aa":"code","0630adf6":"code","87258c84":"code","f6a3001f":"code","5a1e4755":"code","61ac1b67":"code","ae6a43f4":"code","696590c8":"code","b049da47":"code","fd2d822f":"code","cf6ccb16":"code","207ac6af":"code","81a83576":"code","6cc245d4":"code","a207f24b":"code","1b5e7288":"code","baf47d63":"code","3d3542b5":"code","5074618f":"code","68ea921c":"code","ac0a4a73":"code","af0110ae":"code","94eb82be":"code","59c84586":"code","2fa13609":"code","06d5807d":"code","53394591":"code","1c071d90":"code","e53729fb":"code","79eadf8f":"code","b3ac8558":"code","463c813c":"code","4a0da754":"markdown","2b90720b":"markdown","6852d9c7":"markdown","7c126ef2":"markdown","39ffbebb":"markdown","39548799":"markdown","8d6367d1":"markdown","3cf42871":"markdown","4ea27894":"markdown","cd967668":"markdown","e991a11f":"markdown","da04ced1":"markdown","f881e81d":"markdown","5919f07f":"markdown","6a2494be":"markdown","905e89fb":"markdown","e924a1dc":"markdown","e69c731a":"markdown","6ef0837a":"markdown","35d21b9f":"markdown","9c26e736":"markdown","0203cc84":"markdown","5ed98340":"markdown","4911018c":"markdown","1af0df69":"markdown","0e838dab":"markdown","73e875d5":"markdown","a9c8a093":"markdown","693689f2":"markdown","42cd6999":"markdown","f93f2ab8":"markdown","6cc0f8f1":"markdown","3926c0c6":"markdown","9c573ef3":"markdown","0af7dd4b":"markdown","617b30b4":"markdown","6e7e5d4d":"markdown","8e4ed65b":"markdown","69aff107":"markdown","44f58a57":"markdown","f4638d98":"markdown","8890af3d":"markdown","57219718":"markdown","01e06a92":"markdown","d9a2efd5":"markdown","351c0b02":"markdown","411360fb":"markdown","0fd986f2":"markdown","7165a6a7":"markdown","45cb43b7":"markdown","af18ccac":"markdown","def42e72":"markdown","4a1de487":"markdown","90c7ac0e":"markdown","34043744":"markdown","d82b7d50":"markdown","3eee15f4":"markdown","bddc40a9":"markdown","74131778":"markdown","6fea455e":"markdown","e00acd04":"markdown","e3498b13":"markdown","05615116":"markdown","d7584eb9":"markdown","f7abe671":"markdown","66624f4d":"markdown","02dd0aae":"markdown","04082648":"markdown","ab033dde":"markdown","64ca1150":"markdown","3aac1757":"markdown","f27c8b4f":"markdown","0a684f3c":"markdown","97d9e005":"markdown","3a297bc1":"markdown","fd83a39e":"markdown","a54cfc95":"markdown","bb7d1c33":"markdown","c70c2587":"markdown","14276c48":"markdown","67c6b050":"markdown","faabd351":"markdown","40b0f876":"markdown","2ea3b2e8":"markdown","8f9ff1ad":"markdown","59d06aab":"markdown","4e2da7ca":"markdown","76402bbd":"markdown","a9948167":"markdown","d79935b9":"markdown","49edcb57":"markdown","2cee42c8":"markdown","59b9d63a":"markdown","2db53b76":"markdown","a73ab048":"markdown","2053af15":"markdown","362db7ba":"markdown","bcde4b2c":"markdown","bf8c6ead":"markdown","47834fbc":"markdown","0dc7dfb0":"markdown","70efb1a7":"markdown","5b819782":"markdown","7d492772":"markdown","a633ee23":"markdown","1f4928c0":"markdown","5f33dc1e":"markdown","12c0973d":"markdown","b2eec0e6":"markdown","e9d663c1":"markdown","24e00bd1":"markdown","03ce8d56":"markdown","3f831ca2":"markdown","705d7a57":"markdown","68cf3790":"markdown","a4a794b4":"markdown","8eee9a68":"markdown","c3db203d":"markdown","0588e114":"markdown","35c4f3e4":"markdown","75746e39":"markdown","d989ca75":"markdown","e47f4bbe":"markdown","4ddf16d5":"markdown","48d56c81":"markdown","b008431d":"markdown","e9c5fd02":"markdown","54db47d6":"markdown","ed157d56":"markdown"},"source":{"b723f7fa":"pip install geotext ","43c517f2":"pip install -U kaleido","a3601b35":"import numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport geotext\nimport collections\nimport string, sys, os, re\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.io as pio\nfrom IPython.display import Image\nfrom functools import reduce\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","4101e720":"warnings.filterwarnings('ignore')","25de66e0":"class DfOverview:\n    \"\"\"\n        Give an overview for a given data frame, \n        like null persentage for each columns, \n        unique value percentage for each columns and more\n    \"\"\"\n\n    def __init__(self, df: pd.DataFrame) -> None:\n        self.df = df\n\n    def missing_value(self) -> None:\n        nullSum = self.df.isna().sum()\n        return [col for col in nullSum]\n\n    def percentage(self, list):\n        return [str(round(((value \/ self.df.shape[0]) * 100), 2)) + '%' for value in list]\n\n    def getOverview(self) -> None:\n\n        _columns = [column for column in self.df]\n        _count = self.df.count().values\n        _unique = [self.df[column].value_counts().shape[0] for column in self.df]\n        _missing_values = self.missing_value()\n\n        columns = [\n            'Column',\n            'count',\n            'missing_value_count',\n            'Missing_value_percentage',\n            'unique_value_count',\n            'unique_value_percentage',\n            'dtype']\n        data = zip(\n            _columns,\n            _count,\n            _missing_values,\n            self.percentage(_missing_values),\n            _unique,\n            self.percentage(_unique),\n            self.df.dtypes\n        )\n        new_df = pd.DataFrame(data=data, columns=columns)\n        return new_df","903c1796":"def show_cols_mixed_dtypes(df):\n    mixed_dtypes = {'Column': [], 'Data type': []}\n    for col in df.columns:\n        dtype = pd.api.types.infer_dtype(df[col])\n        if dtype.startswith(\"mixed\"):\n            mixed_dtypes['Column'].append(col)\n            mixed_dtypes['Data type'].append(dtype)\n    if len(mixed_dtypes['Column']) == 0:\n        print('None of the columns contain mixed types.')\n    else:\n        print(pd.DataFrame(mixed_dtypes))","f1d88322":"def percent_missing_values(df):\n\n    # Calculate total number of cells in dataframe\n    totalCells = np.product(df.shape)\n\n    # Count number of missing values per column\n    missingCount = df.isnull().sum()\n\n    # Calculate total number of missing values\n    totalMissing = missingCount.sum()\n\n    # Calculate percentage of missing values\n    print(\"The dataset contains\", round(((totalMissing\/totalCells) * 100), 2), \"%\", \"missing values.\")","da56cec4":"def missing_values_table(df):\n    # Total missing values\n    mis_val = df.isnull().sum()\n\n    # Percentage of missing values\n    mis_val_percent = 100 * mis_val \/ len(df)\n\n    # dtype of missing values\n    mis_val_dtype = df.dtypes\n\n    # Make a table with the results\n    mis_val_table = pd.concat([mis_val, mis_val_percent, mis_val_dtype], axis=1)\n\n    # Rename the columns\n    mis_val_table_ren_columns = mis_val_table.rename(\n    columns = {0 : 'Missing Values', 1 : '% of Total Values', 2: 'Dtype'})\n\n    # Sort the table by percentage of missing descending and remove columns with no missing values\n    mis_val_table_ren_columns = mis_val_table_ren_columns[\n        mis_val_table_ren_columns.iloc[:,0] != 0].sort_values(\n    '% of Total Values', ascending=False).round(2)\n\n    # Print some summary information\n    print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"\n        \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n          \" columns that have missing values.\")\n\n    if mis_val_table_ren_columns.shape[0] == 0:\n        return\n\n    # Return the dataframe with missing information\n    return mis_val_table_ren_columns","e35abfac":"def convert_to_string(df, columns):\n    for col in columns:\n        df[col] = df[col].astype(\"string\")","006aa3fe":"def drop_duplicates(df):\n    old = df.shape[0]\n    df.drop_duplicates(inplace=True)\n    new = df.shape[0]\n    count = old - new\n    if (count == 0):\n        print(\"No duplicate rows were found.\")\n    else:\n        print(f\"{count} duplicate rows were found and removed.\")\n        \ndef plot_dist(df:pd.DataFrame, column:str, color:str='cornflowerblue')->None:\n    sns.displot(data=df, x=column, color=color,  kde=False, height=6, aspect=2)\n    plt.title(f'Distribution of {column}', size=20, fontweight='bold')\n    plt.show()\n        \ndef plotly_plot_bar(df, x, y, title=None, width=800, color=['cornflowerblue']):\n    if title == None:\n        title=f'Distribution of {x}'\n    fig = px.bar(df, x=x, y=y, title=title)\n    return Image(pio.to_image(fig, format='png', width=width))\n\ndef plotly_plot_pie(df, column, title=None, width=800, limit=None):\n    a = pd.DataFrame({'count': df.groupby([column]).size()}).reset_index()\n    a = a.sort_values(\"count\", ascending=False)\n    if limit:\n        a.loc[a['count'] < limit, column] = f'Other {column}s'\n    if title == None:\n        title=f'Distribution of {column}'\n    fig = px.pie(a, values='count', names=column, title=title)\n    return Image(pio.to_image(fig, format='png', width=width))","577d2dfc":"# reading the companies_sorted csv file\ndf = pd.read_csv(\"..\/input\/free-7-million-company-dataset\/companies_sorted.csv\")\ndf","dd27481c":"# number of elements(cells) in the df\ndf.size","97e16316":"# rows and columns in the df\ndf.shape","dadecae9":"df.info()","13d1dcd4":"df_overview = DfOverview(df)\ndf_overview.getOverview()","21e157f5":"# comparing the number of unique values of 'Unnamed: 0' and the number of rows\nlen(df['Unnamed: 0'].unique()) == df.shape[0]","f34211eb":"df.drop(columns=['Unnamed: 0'], inplace=True)","22375d13":"percent_missing_values(df)","a79afcfd":"missing_values_table(df)","905b3bd6":"df.drop(df.index[df.name.isna()], inplace=True)\ndf.drop(df.index[df.industry.isna()], inplace=True)","3a18f07a":"missing_values_table(df)","86574252":"show_cols_mixed_dtypes(df)","18a334a5":"df.dtypes","197f3536":"df.head()","b834740f":"# get the columns with object data type\nstring_columns = df.select_dtypes(include='object').columns.tolist()\nstring_columns","c32855c0":"convert_to_string(df, string_columns)","b0cea534":"df['year founded'].fillna(0, inplace=True)\ndf['year founded'] = df['year founded'].astype('int64')","316535a0":"df.dtypes","d367cbfc":"df.head()","1bae20f3":"# search for duplicate rows and drop them\ndrop_duplicates(df)","85e391e9":"df.duplicated(subset=['name']).all()","e5482db7":"df.describe().transpose()","d2d702ae":"# unique value counts\ncounts_df = df['name'].value_counts().rename_axis('name').reset_index(name='count')\ncounts_df","a56b824d":"repeated_names = counts_df[counts_df['count'] > 1].name.to_list()","3d49f472":"text = \" \".join(name for name in df[df.name.isin(repeated_names)].name)\n\n# generate a word cloud image\nwordcloud = WordCloud(background_color=\"white\", width=800, height=400).generate(text)\n\n# display the word cloud\nplt.axis(\"off\")\nplt.figure(figsize=(30,15))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.show()","f6fb9303":"df = df[~df.name.isin(repeated_names)]","f65831d5":"# filtering names with a character that is not an english alphabet or space\nregexp = re.compile(r'[^a-zA-Z\\s]')\ndf[df.name.apply(lambda x: regexp.search(x)).astype('bool')].name","feabf1be":"# filtering names with non-aschii characters, here I considered on the standard aschii characters \nregexp = re.compile(r'[^\\x00-\\x7f]')\ndf[df.name.apply(lambda x: regexp.search(x)).astype('bool')].name","8d32f9d8":"# filtering names with digits\nregexp = re.compile(r'[0-9]')\ndf[df.name.apply(lambda x: regexp.search(x)).astype('bool')].name","47d80f08":"text = \" \".join(name for name in df.name)\nprint (\"There are {} words in the combination of all cells in the column 'name'.\".format(len(text)))\n\n# generate a word cloud image\nwordcloud = WordCloud(background_color=\"white\", width=800, height=400).generate(text)\n\n# display the word cloud\nplt.axis(\"off\")\nplt.figure(figsize=(40,20))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.show()","6a976222":"# unique value counts\ncounts_df = df['domain'].value_counts().rename_axis('domain').reset_index(name='count')\ncounts_df","a3b14325":"df[df['domain'] == 'dunked.com']","7b510383":"# unique value counts\ncounts_df = df['year founded'].value_counts().rename_axis('year founded').reset_index(name='count')\ncounts_df","783d6d1c":"df.query(\"0 < `year founded` < 1900\")['year founded'].value_counts().rename_axis('year founded').reset_index(name='count')","1728a25e":"df.query(\"0 < `year founded` < 1800\")['year founded'].value_counts().rename_axis('year founded').reset_index(name='count')","3c3e66f5":"df[df['year founded'] > 2021]","23c3fb7a":"df.drop(df.index[df['year founded'] > 2021], inplace=True)","7f1f3731":"# distribution of companies founded after 1900\nplot_dist(df[df['year founded'] > 1900], 'year founded')","23e7d5d6":"# unique value counts\ncounts_df = df['industry'].value_counts().rename_axis('industry').reset_index(name='count')\ncounts_df","c666ded6":"plotly_plot_bar(counts_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='industry', title='Top 10 industries with many companies')","da81af21":"# unique value counts\ncounts_df = df['size range'].value_counts().rename_axis('size range').reset_index(name='count')\ncounts_df","3e2a0d3d":"plotly_plot_pie(df, column='size range', title='Distribution of companies size range', width=800)","7727bc56":"# unique value counts\ncounts_df = df['locality'].value_counts().rename_axis('locality').reset_index(name='count')\ncounts_df","60d64d4c":"# unique value counts\ncounts_df = df['country'].value_counts().rename_axis('country').reset_index(name='count')\ncounts_df","47c3fb6c":"plotly_plot_bar(counts_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='country', title='Top 10 countries with many companies')","2392a293":"counts_df = df['linkedin url'].value_counts().rename_axis('linkedin url').reset_index(name='count')\ncounts_df","2047ecc0":"counts_df = df['current employee estimate'].value_counts().rename_axis('current employee estimate').reset_index(name='count')\ncounts_df","fce8f125":"plotly_plot_bar(counts_df.nlargest(10, 'count').sort_values(by='count'), x='current employee estimate', y='count', title='Top 10 current employee estimates')","40794296":"counts_df = df['total employee estimate'].value_counts().rename_axis('total employee estimate').reset_index(name='count')\ncounts_df","333f4d93":"plotly_plot_bar(counts_df.nlargest(10, 'count').sort_values(by='count'), x='total employee estimate', y='count', title='Top 10 total employee estimates')","c9ed67f2":"def extract_city(locality):\n    if pd.isnull(locality):\n        return '<NA>'\n    # extract cities from locality\n    geo = geotext.GeoText(locality).cities\n    if len(geo) > 0:\n        return geo[0]\n    return locality.split(',')[0]\n\ndf['city'] = df['locality'].apply(extract_city)","98b5c4bc":"df['name_char_count'] = df['name'].apply(lambda name: len(name))\n\n# split name based on comma, space or hyphen\ndf['name_word_count'] = df['name'].apply(lambda name: len(list(filter(lambda x: x!= '', re.split(r',|\\s|-', name)))))\n\ndf['name_word_density'] = round(df['name_word_count'] \/ df['name_char_count'], 2)\n\npunc = string.punctuation\ndf['name_punc_count'] = df['name'].apply(lambda x : len([a for a in x if a in punc]))\n\ndf['name_non_aschii_char_count'] = df['name'].apply(lambda x: len([a for a in x if ord(a) > 127]))\n\ndf['name_digit_count'] = df['name'].apply(lambda x: len([a for a in x if a in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']]))","9ecb5bed":"def categorize(size):\n    switcher={\n        '1 - 10': 1,\n        '11 - 50': 2,\n        '51 - 200': 3,\n        '201 - 500': 4,\n        '501 - 1000': 5,\n        '1001 - 5000': 6,\n        '5001 - 10000': 7,\n        '10001+': 8\n    }\n    return switcher.get(size, 0)\ndf['size_category'] = df['size range'].apply(categorize)","af953c99":"df.sample(5)","be6617aa":"df_corr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(df_corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f_fig, f_ax = plt.subplots(figsize=(12, 12))\n    f_ax = sns.heatmap(df_corr, mask=mask, vmin=0, vmax=1, square=True,\n                        annot=True, annot_kws={\"size\": 10}, cmap=\"BuPu\")\nplt.title('Correlation of numeric features')\nplt.show()","8e942a64":"country_df = df.groupby('country', as_index=False).agg({'name_char_count': 'mean', 'name': 'count'}).rename(columns={'name_char_count': 'mean_name_char', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_name_char',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_name_char'] = country_df['mean_name_char'].astype('int16')\ncountry_df","8e150787":"gdf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))[['name', 'geometry']]\ngdf.columns = ['country', 'geometry']\ngdf.head()","4f909b07":"# remove antarctica\nantarctic_index = int(gdf[gdf['country'] == 'Antarctica'].index.values)\ngdf = gdf.drop(gdf.index[antarctic_index])\n\nreplace = {\n    \"United States of America\": 'United States',\n    \"Bosnia and Herz.\": 'Bosnia And Herzegovina',\n    \"Central African Rep.\": 'Central African Republic',\n    \"C\u00f4te d'Ivoire\": 'C\u00f4te D\u2019Ivoire',\n    \"Dominican Rep.\": 'Dominican Republic',\n    \"Dem. Rep. Congo\": 'Democratic Republic Of The Congo',\n    \"Eq. Guinea\": 'Equatorial Guinea',\n    \"Dominican Rep.\": 'Dominican Republic',\n    \"Solomon Is.\": 'Solomon Islands',\n    \"Trinidad and Tobago\": 'Trinidad And Tobago',\n    \"S. Sudan\": 'South Sudan',\n}\n\nfor (n_old, n_new) in replace.items():  \n    gdf.country.loc[gdf['country'] == n_old] = n_new\n\n# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","f009d7ec":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_name_char', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege number of characters in company names by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","0b4ff11c":"country_df = df.groupby('country', as_index=False).agg({'name_word_count': 'mean', 'name': 'count'}).rename(columns={'name_word_count': 'mean_name_word', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_name_word',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_name_word'] = country_df['mean_name_word'].astype('int16')\ncountry_df","2a497083":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","64da5dd5":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_name_word', cmap='rainbow', ax=ax, scheme='natural_breaks', k=3, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege number of words in company names by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","17929ec1":"country_df = df.groupby('country', as_index=False).agg({'name_punc_count': 'mean', 'name': 'count'}).rename(columns={'name_punc_count': 'mean_name_punct_count', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_name_punct_count',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_name_punct_count'] = country_df['mean_name_punct_count'].round(2)\ncountry_df","2ab73b78":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","ad61c3fb":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_name_punct_count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=3, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege number of punctuations in company names by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","124be71a":"country_df[country_df['mean_name_punct_count'] >= 1]","7c9cdced":"country_df = df.groupby('country', as_index=False).agg({'name_digit_count': 'mean', 'name': 'count'}).rename(columns={'name_digit_count': 'mean_name_digit_count', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_name_digit_count',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_name_digit_count'] = country_df['mean_name_digit_count'].round(2)\ncountry_df","a3675257":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","a021e320":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_name_digit_count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege number of digits in company names by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","68b741f3":"country_df[country_df['mean_name_digit_count'] > 0.07]","f3591da5":"country_df = df.groupby('country', as_index=False).agg({'name_non_aschii_char_count': 'mean', 'name': 'count'}).rename(columns={'name_non_aschii_char_count': 'mean_name_non_aschii_char_count', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_name_non_aschii_char_count',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_name_non_aschii_char_count'] = country_df['mean_name_non_aschii_char_count'].round(2)\ncountry_df","5cb9158c":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","20f3136e":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_name_non_aschii_char_count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege number of non-aschii characters in company names by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","2973a4a5":"country_df[country_df['mean_name_non_aschii_char_count'] >= 0.97]","718398fb":"country_df = df.groupby('country', as_index=False).agg({'size_category': 'mean', 'name': 'count'}).rename(columns={'size_category': 'mean_size_category', 'name': 'count'})\ncountry_df =  country_df[country_df['count'] >= 100].sort_values(by='mean_size_category',ascending=False).reset_index(drop=True)\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df['mean_size_category'] = country_df['mean_size_category'].round(2)\ncountry_df","95ef6544":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","4b319139":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='mean_size_category', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Averege size range category of companies by countries')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","720ba8a1":"def industry_in_name(row):\n    puncs = [punc for punc in string.punctuation]\n    puncs.append('and')\n    industry_words = set(filter(lambda x: x not in puncs, re.split(r'\\s|-', row['industry'])))\n    name_words = re.split(r'\\s|-', row['name'])\n    return len([i for i in name_words if i in industry_words])\ndf['industry_word_in_name_count'] = df.apply(industry_in_name, axis=1)","fe3e0cbb":"name_industry_df = df[df['industry_word_in_name_count'] > 0]\nname_industry_df","f0838c6e":"country_df = name_industry_df.groupby('country', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\ncountry_df =  country_df.sort_values(by='count',ascending=False).reset_index(drop=True)\ncountry_counts_df = df['country'].value_counts().rename_axis('country').reset_index(name='total_count')\ncountry_df = country_df.merge(country_counts_df, left_on='country', right_on='country', how = 'left')\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df","3a0ff5a0":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","57b9381d":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Number of company names containing atleast one word from their industry by country')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","cd528046":"size_df = name_industry_df.groupby('size range', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nsize_counts_df = df['size range'].value_counts().rename_axis('size range').reset_index(name='total_count')\nsize_df = size_df.merge(size_counts_df, left_on='size range', right_on='size range', how = 'left')\nsize_df =  size_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nsize_df","0432cc8c":"industry_df = name_industry_df.groupby('industry', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nindustry_counts_df = df['industry'].value_counts().rename_axis('industry').reset_index(name='total_count')\nindustry_df = industry_df.merge(industry_counts_df, left_on='industry', right_on='industry', how = 'left')\nindustry_df =  industry_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nindustry_df","9f716249":"industry_df.head(10)","75231a3a":"plotly_plot_bar(industry_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='industry', title='Top 10 industries with atleast one word from their industry in their company names')","92bd2924":"year_df = name_industry_df.groupby('year founded', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nyear_df = year_df[year_df['year founded'] != 0]\nyear_counts_df = df['year founded'].value_counts().rename_axis('year founded').reset_index(name='total_count')\nyear_df = year_df.merge(year_counts_df, left_on='year founded', right_on='year founded', how = 'left')\nyear_df =  year_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nyear_df['year founded'] = year_df['year founded'].astype('string')\nyear_df","f7059942":"year_df.head(10)","3380a710":"plotly_plot_bar(year_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='year founded', title='Top 10 years where companies with atleast one word from their industry in their names were founded')","f350bbf3":"def locality_in_name(row):\n    if pd.isnull(row['locality']):\n        return np.nan\n    puncs = [punc for punc in string.punctuation]\n    puncs.append('and')\n    locality_words = set(filter(lambda x: x not in puncs, re.split(r'\\s|-', row['locality'])))\n    name_words = re.split(r'\\s|-', row['name'])\n    return len([i for i in name_words if i in locality_words])\ndf['locality_word_in_name_count'] = df.apply(locality_in_name, axis=1)","bc8235b4":"name_locality_df = df[df['locality_word_in_name_count'] > 0]\nname_locality_df","057ac4b3":"country_df = name_locality_df.groupby('country', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\ncountry_df =  country_df.sort_values(by='count',ascending=False).reset_index(drop=True)\ncountry_counts_df = df['country'].value_counts().rename_axis('country').reset_index(name='total_count')\ncountry_df = country_df.merge(country_counts_df, left_on='country', right_on='country', how = 'left')\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df","6e21b7b5":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","9bd9a3ae":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Number of company names containing atleast one word from their locality by country')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","663c863c":"size_df = name_locality_df.groupby('size range', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nsize_counts_df = df['size range'].value_counts().rename_axis('size range').reset_index(name='total_count')\nsize_df = size_df.merge(size_counts_df, left_on='size range', right_on='size range', how = 'left')\nsize_df =  size_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nsize_df","fa7d084f":"industry_df = name_locality_df.groupby('industry', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nindustry_counts_df = df['industry'].value_counts().rename_axis('industry').reset_index(name='total_count')\nindustry_df = industry_df.merge(industry_counts_df, left_on='industry', right_on='industry', how = 'left')\nindustry_df =  industry_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nindustry_df","096b7b2e":"industry_df.head(10)","7268ef98":"plotly_plot_bar(industry_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='industry', title='Top 10 industries with atleast one word from their locality in their company names')","4644d7e4":"year_df = name_locality_df.groupby('year founded', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nyear_df = year_df[year_df['year founded'] != 0]\nyear_counts_df = df['year founded'].value_counts().rename_axis('year founded').reset_index(name='total_count')\nyear_df = year_df.merge(year_counts_df, left_on='year founded', right_on='year founded', how = 'left')\nyear_df =  year_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nyear_df['year founded'] = year_df['year founded'].astype('string')\nyear_df","e1c7d033":"year_df.head(10)","153636bf":"plotly_plot_bar(year_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='year founded', title='Top 10 years where companies with atleast one word from their locality in their names were founded')","a7128721":"def year_in_name(row):\n    if (row['year founded'] == 0):\n        return None\n    year = row['year founded']\n    regexp = re.compile(f'{year}')\n    return regexp.search(row['name']) \n\ndf['year_in_name'] = df.apply(year_in_name, axis=1).astype('bool').astype('int16')","bfd18377":"name_year_df = df[df['year_in_name'] > 0]\nname_year_df","9e76483e":"country_df = name_year_df.groupby('country', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\ncountry_df =  country_df.sort_values(by='count',ascending=False).reset_index(drop=True)\ncountry_counts_df = df['country'].value_counts().rename_axis('country').reset_index(name='total_count')\ncountry_df = country_df.merge(country_counts_df, left_on='country', right_on='country', how = 'left')\ncountry_df['country'] = country_df['country'].astype('string').str.title()\ncountry_df","c8bc9d94":"# merge country_df and gdf\nmerged = gdf.merge(country_df, left_on='country', right_on='country', how = 'left')\nmerged.head()","859d308a":"fig, ax = plt.subplots(1, figsize=(20,15))\n\nmerged.plot(color='grey', ax=ax, label = 'No data')\nmerged.dropna().plot(column='count', cmap='rainbow', ax=ax, scheme='natural_breaks', k=5, legend=True, legend_kwds={'loc': 'lower left'})\n\nplt.title('Number of company names containing the year they were founded by country')\n\n#fixing floating-point counts, making them integer:\nleg = ax.get_legend()\nfor text in leg.get_texts():\n    text.set_text(text.get_text().replace('.00', ''))\n\nplt.axis('off');","3bcf10aa":"size_df = name_year_df.groupby('size range', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nsize_counts_df = df['size range'].value_counts().rename_axis('size range').reset_index(name='total_count')\nsize_df = size_df.merge(size_counts_df, left_on='size range', right_on='size range', how = 'left')\nsize_df =  size_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nsize_df","e53c46f0":"industry_df = name_year_df.groupby('industry', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nindustry_counts_df = df['industry'].value_counts().rename_axis('industry').reset_index(name='total_count')\nindustry_df = industry_df.merge(industry_counts_df, left_on='industry', right_on='industry', how = 'left')\nindustry_df =  industry_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nindustry_df","a19dc288":"industry_df.head(10)","ea30b8b8":"plotly_plot_bar(industry_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='industry', title='Top 10 industries with year founded in their companiy names')","8f2a3aa8":"year_df = name_year_df.groupby('year founded', as_index=False).agg({'name': 'count'}).rename(columns={'name': 'count'})\nyear_counts_df = df['year founded'].value_counts().rename_axis('year founded').reset_index(name='total_count')\nyear_df = year_df.merge(year_counts_df, left_on='year founded', right_on='year founded', how = 'left')\nyear_df =  year_df.sort_values(by='count',ascending=False).reset_index(drop=True)\nyear_df['year founded'] = year_df['year founded'].astype('string')\nyear_df","3579532a":"year_df.head(10)","dccab5c0":"plotly_plot_bar(year_df.nlargest(10, 'count').sort_values(by='count'), x='count', y='year founded', title='Top 10 years where companies with year founded in their names were founded')","281f72aa":"def stopword_in_name(name):\n    # split words in name and replace the & symbol with 'and' \n    name_words = re.split(r'\\s|-',re.sub('&', ' and ', name))\n    return len([i for i in name_words if i in STOPWORDS])\ndf['stopword_in_name_count'] = df['name'].apply(stopword_in_name)","0630adf6":"stopword_df = df[df['stopword_in_name_count'] > 0]\nstopword_df","87258c84":"punc_df = df[df['name_punc_count'] > 0]\npunc_df","f6a3001f":"industries = list(df['industry'].unique())\nindustry_name_words_dict = {}\nfor industry in industries:\n    industry_df = df[df['industry'] == f'{industry}']\n    text = \" \".join(name for name in industry_df.name)\n    word_list = list(filter(lambda x: x!= '', re.split(r'\\s|-', text)))\n    common_words = [pair[0] for pair in collections.Counter(word_list).most_common(50)]\n    industry_name_words_dict[f'{industry}'] = common_words","5a1e4755":"def append_list(a,b):\n    return a + b\nall_words = reduce(append_list, list(industry_name_words_dict.values()))","61ac1b67":"# select common words found in atleast 20 industries\ncommon_words = [pair[0] for pair in dict(collections.Counter(all_words)).items() if pair[1] > 20]\nwords_to_be_removed = common_words + re.split(r'',string.punctuation) + list(STOPWORDS)","ae6a43f4":"for (industry, words) in industry_name_words_dict.items():\n    industry_name_words_dict[industry] = [word for word in words if word not in words_to_be_removed]","696590c8":"industry_name_words_dict['financial services']","b049da47":"def search_industry(word):\n    industries_list = []\n    for (industry, words) in industry_name_words_dict.items():\n        if word in words:\n            industries_list.append(industry)\n    return industries_list","fd2d822f":"search_industry('communication')","cf6ccb16":"countries = list(df['country'].unique())\ncountry_name_words_dict = {}\nfor country in countries:\n    country_df = df[df['country'] == f'{country}']\n    text = \" \".join(name for name in country_df.name)\n    word_list = list(filter(lambda x: x!= '', re.split(r'\\s|-', text)))\n    common_words = [pair[0] for pair in collections.Counter(word_list).most_common(50)]\n    country_name_words_dict[f'{country}'] = common_words","207ac6af":"all_words = reduce(append_list, list(country_name_words_dict.values()))","81a83576":"# select common words found in atleast 20 countries\ncommon_words = [pair[0] for pair in dict(collections.Counter(all_words)).items() if pair[1] > 20]\nwords_to_be_removed = common_words + re.split(r'',string.punctuation) + list(STOPWORDS)","6cc245d4":"for (country, words) in country_name_words_dict.items():\n    country_name_words_dict[country] = [word for word in words if word not in words_to_be_removed]","a207f24b":"country_name_words_dict['netherlands']","1b5e7288":"def search_country(word):\n    countries_list = []\n    for (country, words) in country_name_words_dict.items():\n        if word in words:\n            countries_list.append(country)\n    return countries_list","baf47d63":"search_country('communication')","3d3542b5":"size_ranges = list(df['size range'].unique())\nsize_range_name_words_dict = {}\nfor size_range in size_ranges:\n    size_range_df = df[df['size range'] == f'{size_range}']\n    text = \" \".join(name for name in size_range_df.name)\n    word_list = list(filter(lambda x: x!= '', re.split(r'\\s|-', text)))\n    common_words = [pair[0] for pair in collections.Counter(word_list).most_common(50)]\n    size_range_name_words_dict[f'{size_range}'] = common_words","5074618f":"all_words = reduce(append_list, list(size_range_name_words_dict.values()))","68ea921c":"# select common words found in atleast 3 size ranges\ncommon_words = [pair[0] for pair in dict(collections.Counter(all_words)).items() if pair[1] > 2]\nwords_to_be_removed = common_words + re.split(r'',string.punctuation) + list(STOPWORDS)","ac0a4a73":"for (size_range, words) in size_range_name_words_dict.items():\n    size_range_name_words_dict[size_range] = [word for word in words if word not in words_to_be_removed]","af0110ae":"size_range_name_words_dict","94eb82be":"def search_size_range(word):\n    size_ranges_list = []\n    for (size_range, words) in size_range_name_words_dict.items():\n        if word in words:\n            size_ranges_list.append(size_range)\n    return size_ranges_list","59c84586":"search_size_range('hotel')","2fa13609":"df['decade'] = df['year founded'].apply(lambda x: f'{(x\/\/10)*10}s')","06d5807d":"decades = list(df['decade'].unique())\ndecades.remove('0s')\ndecade_name_words_dict = {}\nfor decade in decades:\n    decade_df = df[df['decade'] == f'{decade}']\n    text = \" \".join(name for name in decade_df.name)\n    word_list = list(filter(lambda x: x!= '', re.split(r'\\s|-', text)))\n    common_words = [pair[0] for pair in collections.Counter(word_list).most_common(50)]\n    decade_name_words_dict[f'{decade}'] = common_words","53394591":"all_words = reduce(append_list, list(decade_name_words_dict.values()))","1c071d90":"# select common words found in atleast 10 decades\ncommon_words = [pair[0] for pair in dict(collections.Counter(all_words)).items() if pair[1] > 10]\nwords_to_be_removed = common_words + re.split(r'',string.punctuation) + list(STOPWORDS)","e53729fb":"for (decade, words) in decade_name_words_dict.items():\n    decade_name_words_dict[decade] = [word for word in words if word not in words_to_be_removed]","79eadf8f":"decade_name_words_dict['2000s']","b3ac8558":"def search_decade(word):\n    decades_list = []\n    for (decade, words) in decade_name_words_dict.items():\n        if word in words:\n            decades_list.append(decade)\n    return decades_list","463c813c":"search_decade('software')","4a0da754":"Let's find out which countries are coded by red.","2b90720b":"Now every data type looks good.","6852d9c7":"### name and industry","7c126ef2":"### Which words are the most common in company names of each size range?","39ffbebb":"* The most common words are related to company structure like pvt, ltd, limited, llc, co, inc, group, and gmbh. \n* Country and industry names are also frequent.\n* Even though they are not frequent companies use single characters like s, b and v in their names. I assume that these characters are abbreviations and are mmostly followed by a peried(.).\n* The most common industry is 'infomation technoogy and services'.\n* More than 93% of the companies have employees less than or equal to 50.\n* Most companies are found in the biggest cities of the developed world like london, new york, madrid and paris.\n* On average chinese companies have many characters and words in their names when compared to other countries.\n* On average the countries 'Czechia', 'Slovenia', 'Slovakia', 'China', 'Croatia', 'Venezuela', 'Thailand', 'Taiwan', and 'Bosnia And Herzegovina' have the highest number of punctuation marks in their company names.\n* On average the countries 'Taiwan', 'Guadeloupe', 'South Korea', 'Venezuela', 'Albania', and 'Cura\u00e7ao' have the highest number of digits in their company names.\n* 'Belarus', 'Russia', 'Turkey', 'Iran', and 'Kazakhstan' are the countries with the highest number of non-aschii characters in their company names on average.\n* 'United States', 'United Kingdom', 'Canada', 'India', and 'Australia' are top 5 countries with the highest number of companies with names containing atleast one word from their respective industry.\n* 'marketing and advertising',  'management consulting', 'construction', 'hospital & health care', and 'information technology and services' are top 5 industries with the highest number of companies with names containing atleast one word from their respective industry.\n* '2010', '2014', '2013', '2015', and '2012' are top 5 years  when with the highest number of companies with names containing atleast one word from their respective industry were founded.\n* 'United States', 'India', 'Australia', 'Canada', and 'France' are top 5 countries with the highest number of companies with names containing atleast one word from their respective locality.\n* 'information technology and services', 'non-profit organization management', 'education management', 'hospital & health care', and 'marketing and advertising' are top 5 industries with the highest number of companies with names containing atleast one word from their respective locality.\n* '2012', '2014', '2013', '2015', and '2010' are top 5 years  when with the highest number of companies with names containing atleast one word from their respective locality were founded.\n* 'sports',  'construction', 'information technology and services', 'marketing and advertising', and 'retail' are top 5 industries with the highest number of companies with names containing the year they were founded.\n* '2000', '2010', '2016', '2014', and '2015' are top 5 years  when with the highest number of companies with names containing the year they were founded.","39548799":"For simplicity and ease of calculating correlation I will categorize the values of 'size range' into number values in an another column.","8d6367d1":"## Filtering Data and Answering Business Questions","3cf42871":"#### locality_word_in_name_count and country","4ea27894":"### name and locality","cd967668":"There is high similarity with the map showing averege number of characters in company names by countries. It is obvious as there is a correlation between number of characters and words. Some countries with high average number of characters have medium average number of words. I assume the words used by these countries are longer.","e991a11f":"Here we can see that most companies are found in the biggest cities of the developed world like london, new york, madrid and paris. Another thing to notice is that london appears both at index 0 and 4 with slight difference. This shows there is an inconsistency. We will extract the cities as a feature later to fix this.","da04ced1":"#### industry_word_in_name_count and year founded","f881e81d":"### Linkedin url","5919f07f":"The bar chart plotted above shows top 10 industries with words from their respective locality in their company names. ","6a2494be":"As shown above there is no significant correlation between important numeric features. It is no surprise that 'current employee estimate' and 'total employee estimate' are highly correlated as they both describe the size of employees in companies. The same applies to numeric features engineered from the column name. They have correlation because they are derived from the same place. Due to these facts our bivariate analysis will mostly focus on non-numerical features and their interaction with the numerical features.","905e89fb":"#### year_in_name and size range","e924a1dc":"In order to convert 'year founded', we have to replace NaN values with 0 so that pandas will not raise an error saying \"Cannot convert non-finite values (NA or inf) to integer\".","e69c731a":"Here also as expected most companies are from the developes countries.The top 10 countries with many companies are plotted below.","6ef0837a":"#### industry_word_in_name_count and industry","35d21b9f":"More than 93% of the companies have employees less than or equal to 50. I think this shows the reaity since the number of big companies that drive economies around the world is small. ","9c26e736":"Here we will examine the averege number of characters in company names per countries.","0203cc84":"#### year_in_name and country","5ed98340":"Let's explore these companies with respect to their country, size range, industry and year founded.","4911018c":"### name and year founded","1af0df69":"We are safe. No two rows in our dataset contain the same name value.","0e838dab":"Let's look at common words in company names for each size range.","73e875d5":"Some countries in europe, the south east asia and south america have company names with a high probability of including a punctuation. Let's see who they are.","a9c8a093":"### Year founded","693689f2":"We can conclude the following from the word cloud.\n* The most common words are related to company structure like pvt, ltd, limited, llc, co, inc, group, and gmbh. \n* Country and industry names are also frequent.\n* Even though they are not frequent companies use single characters like s, b and v in their names. I assume that these characters are abbreviations and are mmostly followed by a peried(.).","42cd6999":"### Name","f93f2ab8":"#### locality_word_in_name_count and industry","6cc0f8f1":"### Which words are the most common in company names of each industry?","3926c0c6":"Let's explore these companies with respect to their country, size range, industry and year founded.","9c573ef3":"## Objective","0af7dd4b":"Here we can see some wierd results.\n* the maximum value for 'year founded' is 2103.\n* the minimum value for 'current employee estimate' is 0.\n\nWe will check these in detail when we analyze each column.","617b30b4":"Even though the number of companies founded in 2000 in the dataset are relatively smaller, it is ranked as number 1 in the number of company names containing the year they were founded. I think this is because the year 2000 is special as it is the start of a millenium, a year that comes once in a thousand years.","6e7e5d4d":"Since most companies in the dataset are founded after 1900, let's see their distribution.","8e4ed65b":"Let us check if these names are related to which industry. ","69aff107":"### Which words are the most common in company names of each country?","44f58a57":"### Which words are the most common in company names founded during each decade after 1800?","f4638d98":"### country and name_word_count","8890af3d":"### Size range","57219718":"### Country","01e06a92":"Company names with non-aschii characters are probably going to be from non-english speaking countries. But the question is which countries have the highest number of average non-aschii characters. Let's find out.","d9a2efd5":"To search for a word if it is in the list of most common word for industries we can use the function search_industry as shown below. ","351c0b02":"As shown above there are some historical companies founded before 1900s. Besides this 0 is the most common value because we have repaced null values with it. Let us examine how many companies were founded before the 20th century.","411360fb":"As we can see from the result above, small sized companies tend to have more companies with names conataining atleast a word from their respective industries. This aligns with the general distibution of size range. So I don't think there is a special connection here.","0fd986f2":"It seems that there are some companies founded in the 19th century. What about before the 19th century?","7165a6a7":"Even though pandas.DataFrame.duplicated haven't identified any duplicated names, we have discovered there are some using value_counts. Let's investigate these names.","45cb43b7":"Since name is the feature that uniquely identifies each record(company)record, there should be no duplicates. Let's check that.","af18ccac":"### country and name_char_count","def42e72":"We can look at common words in company names from a specific industry as follows.","4a1de487":"Here we will examine how many and which companies contain words from their respective localities in their names.","90c7ac0e":"## Helper functions and classes","34043744":"The mean size category ranges from 1.23 to 1.88 in every country with more than or equal to 100 companies in the dataset. This indicates that there are many small companies in these countries which is obvious. That is why the average is lower.","d82b7d50":"There are more than 930,000 companies whose names contain atleast one stop word.","3eee15f4":"### country and name_digit_count","bddc40a9":"## Dropping unnecessary Columns","74131778":"### country and name_non_aschii_char_count","6fea455e":"#### locality_word_in_name_count and year founded","e00acd04":"Here we can see detailed informations of the columns including the amount missing and unique values.","e3498b13":"Let us examine if there are names containing different kinds of characters other than the english alphabets and space.","05615116":"## Duplicates","d7584eb9":"The bar chart plotted above shows top 10 industries with words from their respective industry in their company names. ","f7abe671":"#### year_in_name and year founded","66624f4d":"## Data Reading","02dd0aae":"### Total employee estimate","04082648":"## General Statistics","ab033dde":"### How many and which company names contain punctuations?","64ca1150":"As we can see from the result above, if a company's name contains the year it was founded the company tends to have a small number of employees. Again this also aligns with the general distibution of size range. So I don't think there is a special connection here.","3aac1757":"Here we will investigate the averege number of words in company names per countries.","f27c8b4f":"Everything seems fine here except for companies with 0 current employee estimate. I assume the data was not available for this companies so 0 was filled as an indication for missing.","0a684f3c":"The maximum value for average count of digits per country is 0.15 which is very low. This is expected as most company names doesn't include digits.","97d9e005":"#### year_in_name and industry","3a297bc1":"The most frequent words in these repeating company names are common words like group, inc, consulting and solution. Having companines with the exact same name in our dataset will conflict with our objective of extracting insights from business names since the values in the other columns differ. So I will remove the companies with their names repeated.","fd83a39e":"We can see that there are companies with the same domain but different name. I assume that there was an error while collecting this data or the data was imputed using some criterea. I am saying this because even sister companies have different domains most of the times. Besides this for example companies with the domain 'dunked.com' are from different countries as shown above. This shows that there is low probability of them being sister companies. But since our objective doesn't focus on the domain, we will not drop them.","a54cfc95":"Let us check if these names are related to size range. ","bb7d1c33":"We can look at common words in company names from a specific decade as follows.","c70c2587":"### country and name_punc_count","14276c48":"As we can see from above 'name', 'domain', 'industry', 'size range', 'locality', 'country' and 'linkedin url' hold string values. In addition to this we also know that 'year founded' should hold integer values. Therefore, we will convert these columns to their respective correct data types.","67c6b050":"The companies in this dataset work in 148 industries. The most common industry is 'infomation technoogy and services'.","faabd351":"Let us remove these records.","40b0f876":"## Conclusions of EDA","2ea3b2e8":"From the locality column we can extract city which is useful to tackle the inconsistency discussed above in the univariate analysis of locality.","8f9ff1ad":"Here 0 is the mode value for total employee estimate. I assume this is also due to missing data.","59d06aab":"## Data Types","4e2da7ca":"## Feature Engineering","76402bbd":"To search for a word if it is in the list of most common word for size_ranges we can use the function search_size_range as shown below. ","a9948167":"Since my assumption is correct, I will remove the column.","d79935b9":"# Exploratory Data Analysis of 7+ million company dataset","49edcb57":"The united states dominates here. But this maybe due to its high number of companies in the dataset as compared to other companies.","2cee42c8":"Here we will analyze each variable. Let us start by checking the statistics of numeric variables.","59b9d63a":"## Correlation Analysis","2db53b76":"To search for a word if it is in the list of most common word for decades we can use the function search_decade as shown below. ","a73ab048":"As shown above there are a lot of names with digits, punctuations and aplhabets from non-english languages. This is understandable as this dataset conatains companies from different countries. Now let us look for the most comon words in company names.","2053af15":"### Industry","362db7ba":"There are more than 1,700,000 companies whose names contain atleast one punctuation mark.","bcde4b2c":"### country and size range","bf8c6ead":"Here we will examine how many and which companies contain words from their respective industries in their names.","47834fbc":"Let us check if these names are related to size range. ","0dc7dfb0":"As shown above each company has its own unique linkedin url. This is because the name of the company, which is unique, is included in each url.","70efb1a7":"From the name we can extract different features like number of characters, words and punctuations. Another feature to be considered is word density. We can also identify if a name contains digits or non-aschii characters.","5b819782":"## Univariate Analysis","7d492772":"## Missing Values","a633ee23":"The column 'Unamed: 0' most of the times represents the index when we save our dataframe to csv along with our index. In this is the case, since each index is unique and not actually related to each row, removing it is advisable. Let us check its uniqueness.","1f4928c0":"Earlier we have disovered that the maximum value is 2103. Let us check for vaules bigger than the current year.","5f33dc1e":"## Imports","12c0973d":"Let's explore these companies with respect to their country, size range, industry and year founded.","b2eec0e6":"#### industry_word_in_name_count and country","e9d663c1":"### Locality","24e00bd1":"### Domain","03ce8d56":" Companies from the united states clearly dominate the dataset.","3f831ca2":"To search for a word if it is in the list of most common word for countries we can use the function search_country as shown below. ","705d7a57":"* What can we learn about business names? \n* How can we use these insights?","68cf3790":"Here we will examine how many and which companies contain words from their respective years they were founded in their names.","a4a794b4":"Let's check if there are columns with mixed data types.","8eee9a68":"## Bivariate Analysis","c3db203d":"#### locality_word_in_name_count and size range","0588e114":"Here we will considers companies with valid value for the column year founded.","35c4f3e4":"Digits are not that much common in company name. But they appear in some names to represent something, for example, the year they were founded. Let's see if there is a relation between country and average number of digits in company names.","75746e39":"The bar chart plotted above shows top 10 industries with year founded in their companiy names. I think that it is obvious that sport companies are very associated with the year they were founded. The table above also proves this. Even though the sports industry has smaller number of companies in the dataset when compared to with the other industries ranking from 2-10, it is ranked as number 1 in the number of companiy names containing the year they were founded.","d989ca75":"Now it is time for investigating the averege number of punctuations in company names per countries.","e47f4bbe":"From the missing table we can see that there are 6 columns with missing values. But name and industry are very necessary. So we will remove rows with null values in these columns.","4ddf16d5":"We can look at common words in company names from a specific country as follows.","48d56c81":"### Current employee estimate","b008431d":"#### industry_word_in_name_count and size range","e9c5fd02":"### How many and which company names contain stop words?","54db47d6":"As we can see from the result above, small sized companies tend to have more companies with names conataining atleast a word from their respective localities. This aligns with the general distibution of size range. So I don't think there is a special connection here.","ed157d56":"Let us check if these names are related to which industry. "}}