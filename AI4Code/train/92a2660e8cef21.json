{"cell_type":{"6fda3b5b":"code","13e26246":"code","cc963830":"code","3007c3d0":"code","5e0d3f58":"code","543478ba":"code","383717da":"code","898a1301":"code","4c8b7cc4":"code","b82d979c":"code","3b846dce":"code","b859933c":"code","fa805200":"code","a4d373e5":"code","198ed22a":"code","ad9290b0":"code","9943f852":"code","4d6c1e91":"code","98699307":"code","1e20f733":"code","6ab5e0b3":"code","40ff03cc":"code","bc38e9b0":"code","9146ba1c":"code","6ee6cd17":"code","4c90f941":"code","01231e14":"code","01e935ab":"code","250b6cc3":"code","ad65287a":"code","de1a49d5":"code","139b46d6":"code","88210f79":"code","50dcab44":"code","8fe464d7":"code","2dec6a53":"code","edecf762":"code","83b27d05":"code","7440c8e3":"code","4106068c":"code","2a2dfd58":"code","be77d8b0":"code","790e7ee2":"code","5cf29704":"code","3e46f20c":"code","a06ec1e4":"code","44920ea4":"code","52989dc6":"code","dd639540":"code","a5ddf233":"code","d7cc5ee1":"code","216af976":"code","67ad5e4f":"code","e015f5a8":"code","6452b56a":"code","19333423":"markdown","1d17afc0":"markdown","9ff3893d":"markdown","c8a810c0":"markdown","c369ff5b":"markdown","f291ad8b":"markdown","60a8e39e":"markdown","ec150916":"markdown","1735261a":"markdown","8a92fa44":"markdown","e258383b":"markdown","e20f1539":"markdown","6ab18559":"markdown","0e50f663":"markdown","2c83d94e":"markdown","5739fb8c":"markdown","c7e370a2":"markdown","7caf1b5a":"markdown","1bf8130b":"markdown","431e2a85":"markdown","cae22a10":"markdown","109acae7":"markdown","c055a13e":"markdown","34fc4506":"markdown","7ff7c6e0":"markdown","cbb658cf":"markdown","403599a7":"markdown"},"source":{"6fda3b5b":"#Some useful dependencies:\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport random as rnd\n\nimport missingno\nimport folium\n\nfrom sklearn.preprocessing import QuantileTransformer, PolynomialFeatures\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13e26246":"df = pd.read_csv('\/kaggle\/input\/tbilisi-housing-challenge-2020\/housing_clean_2.csv')\ndf.head()","cc963830":"df.hist(bins=50, figsize=(20,15))\nplt.show()","3007c3d0":"cols = ['longitude', 'latitude', 'price']\n\nQ1 = df[cols].quantile(0.25)\nQ3 = df[cols].quantile(0.75)\nIQR = Q3 - Q1\ndf = df[~((df[cols] < (Q1 - 1.5 * IQR)) |(df[cols] > (Q3 + 1.5 * IQR))).any(axis=1)]","5e0d3f58":"df = df[(df['floor'] <= 30 ) & (df['max_floor'] <= 30)]","543478ba":"df.describe().T","383717da":"df = df.drop(labels='Unnamed: 0', axis=1)","898a1301":"df.head()","4c8b7cc4":"df.info()","b82d979c":"missingno.matrix(df)","3b846dce":"df = df.dropna(subset = ['latitude', 'longitude', 'apartment_type'])","b859933c":"missingno.matrix(df)","fa805200":"df.info()","a4d373e5":"plt.figure(figsize=(16,12))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","198ed22a":"plt.figure(figsize=(12,12))\nplt.title('City_area vs price')\nsns.boxplot(x=df['city_area'], y=df['price'])\nplt.xticks(rotation = 45)\nplt.show()","ad9290b0":"plt.figure(figsize=(8,12))\nplt.title('Apartment_type vs price')\nsns.boxplot(x=df['apartment_type'], y=df['price'])\nplt.xticks(rotation = 45)\nplt.show()","9943f852":"plt.figure(figsize=(6,12))\nplt.title('Balcony vs price')\nsns.boxplot(x=df['balcony'], y=df['price'])\nplt.xticks(rotation = 45)\nplt.show()","4d6c1e91":"plt.figure(figsize=(12,12))\nplt.title('Renovation_type vs price')\nsns.boxplot(x=df['renovation_type'], y=df['price'])\nplt.xticks(rotation = 45)\nplt.show()","98699307":"TBI_COORDS = [41.7151, 44.8271]","1e20f733":"map_tbi = folium.Map(location=TBI_COORDS, zoom_start=12, \ntiles='cartodbpositron', width=640, height=480)","6ab5e0b3":"df = df.reset_index(drop=True)","40ff03cc":"df.head(10)","bc38e9b0":"districts = list(df['city_area'].unique())\n\nprint(f'There are {len(districts)} districts.')\nprint(f'List of the districts: {districts}')","9146ba1c":"def get_district_coordinates(df):\n    DIST_COORDS = []\n    df = df.reset_index()\n    for i in range(len(df)):\n        DIST_COORDS.append([df['latitude'][i], df['longitude'][i]])\n    return DIST_COORDS","6ee6cd17":"district_dict = {}\nfor i in districts:\n    district_dict[i[:3].upper() + \"_COORDS\"] = get_district_coordinates(df.loc[df['city_area'] == i])","4c90f941":"color_list = ['#0080bb', '#cc1e0a', '#cc7b0a', '#cfc61b', '#84b025', '#41f50a', '#0af5e5', '#9905fc', '#fc05f8', '#757375', '#0d0c0d']","01231e14":"def colorCall(val):\n  val = int(val)\n  return color_list[val]\n \nfor lon, lat, c in zip(df['longitude'], df['latitude'], df['city_area']):\n    folium.CircleMarker(\n        [lat, lon],\n        radius=2,\n \n \n        #fill_color=colors[int(c)],\n        fill_color = colorCall(districts.index(c)),\n        fill=True,\n        color=False,\n        fill_opacity=0.7\n        ).add_to(map_tbi)","01e935ab":"for j in range(len(color_list)):\n    [folium.CircleMarker((list(district_dict.values())[j])[i], radius=1,\n                    color=color_list[j], fill_color=color_list[j]).add_to(map_tbi)\n     for i in range(len(list(district_dict.values())[j]))]","250b6cc3":"#map_tbi","ad65287a":"ohe_df = pd.get_dummies(df)","de1a49d5":"ohe_df.head()","139b46d6":"ohe_df['space'] = np.log(ohe_df['space'])","88210f79":"q_transformer = QuantileTransformer(n_quantiles=100, output_distribution='normal')\nohe_df['price'] = q_transformer.fit_transform(ohe_df['price'].values.reshape(-1,1))","50dcab44":"q_transformer_2 = QuantileTransformer(n_quantiles=100, output_distribution='normal')\nohe_df['floor'] = q_transformer_2.fit_transform(ohe_df['floor'].values.reshape(-1,1))","8fe464d7":"ohe_df.hist(bins=50, figsize=(20,15))\nplt.show()","2dec6a53":"print(f'Floor skew: {ohe_df.floor.skew()}')\nprint(f'Max_floor skew: {ohe_df.max_floor.skew()}')\nprint(f'Space skew: {ohe_df.space.skew()}')\nprint(f'Price skew: {ohe_df.price.skew()}')","edecf762":"plt.figure(figsize=(16,12))\nplt.title('Heatmap for ohe_df')\nsns.heatmap(ohe_df.corr(), annot=True, cmap='bwr')\nplt.show()","83b27d05":"X = ohe_df.drop(columns=['price', 'latitude', 'longitude',])\ny = ohe_df['price']","7440c8e3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","4106068c":"lin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)","2a2dfd58":"y_pred = lin_reg.predict(X_test)\n\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = lin_reg.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","be77d8b0":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (LinearRegression)')\nplt.scatter(y_test, y_pred)\nplt.show()","790e7ee2":"poly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, random_state=0)\n\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_train,y_train)\n\ny_pred = lin_reg_2.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = lin_reg_2.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","5cf29704":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","3e46f20c":"tree_reg = DecisionTreeRegressor()\ntree_reg.fit(X_train,y_train)\ny_pred = tree_reg.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = tree_reg.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","a06ec1e4":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (DecisionTreeRegressor)')\nplt.scatter(y_test, y_pred)\nplt.show()","44920ea4":"forest_reg = RandomForestRegressor()\nforest_reg.fit(X_train,y_train)\ny_pred = forest_reg.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = forest_reg.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","52989dc6":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (RandomForestRegressor)')\nplt.scatter(y_test, y_pred)\nplt.show()","dd639540":"gb_reg = GradientBoostingRegressor()\ngb_reg.fit(X_train,y_train.values.ravel())\ny_pred = gb_reg.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = gb_reg.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","a5ddf233":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (GradientBoostingRegressor)')\nplt.scatter(y_test, y_pred)\nplt.show()","d7cc5ee1":"ens_model = Pipeline([\n    ('reg', GradientBoostingRegressor())\n])\n\nens_search = GridSearchCV(\n    ens_model, param_grid={\n        'reg__max_depth' : [2,3,4,5,6],\n    }\n)\n\n\nens_search.fit(X_train, y_train.values.ravel())\ny_pred = ens_search.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = ens_search.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","216af976":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (GridSearchCV - GradientBoostingRegressor)')\nplt.scatter(y_test, y_pred)\nplt.show()","67ad5e4f":"ens_model_2 = Pipeline([\n    ('reg', RandomForestRegressor())\n])\n\nens_search_2 = GridSearchCV(\n    ens_model_2, param_grid={\n        'reg__n_estimators': [100, 200, 500], \n        'reg__max_depth': [None, 1, 2, 3], \n        'reg__min_samples_split': [2, 3],\n    },\n    verbose=2,\n)\n\n\nens_search_2.fit(X_train, y_train)\ny_pred = ens_search_2.predict(X_test)\n\nJ_mse = mean_squared_error(y_pred, y_test)\n\nR_squared = ens_search_2.score(X_test,y_test)\nprint('MSE:',J_mse)\nprint('R squared:',R_squared)","e015f5a8":"print(ens_search_2.best_estimator_)","6452b56a":"plt.figure(figsize=(10,8))\nplt.title('y_pred vs y_test (GridSearchCV - RandomForestRegressor)')\nplt.scatter(y_test, y_pred)\nplt.show()","19333423":"Now add all the dots to the map:","1d17afc0":"A slight difference can be observed, if you have a balcony.","9ff3893d":"Here are some insights:\n\n- price seems to be affected by some ridiculous outlier (3e8)\n- same with coordinates (longitude, latitude) -> to be fixed by trimming","c8a810c0":"While longitude and latitude were useful for the visualization, I believe that much more insight is found in the district variable, so let's drop them.","c369ff5b":"Unnamed 0 is unnecessary - I'll drop it:","f291ad8b":"# Loading the file and initial EDA + DP:","60a8e39e":"And now the final map with all the coordinates color-coded by district: Omitted for now because of major CPU usage","ec150916":"An interestin package is missingno - you can get a quick glimpse of any NaNs present:","1735261a":"Mtatsminda and Vake districts seem to be the most expensive districts - I can confirm that ;) They do look very nice compared to other districts.","8a92fa44":"Now the train test split and some regressors to be tested:","e258383b":"There are some relationships to visualize:","e20f1539":"New apartments tend to be more expensive than older ones, indeed ;)","6ab18559":"Ok, let's generate a map:","0e50f663":"It looks better already - let's see the values of skewness for the variables:","2c83d94e":"# Feature Scaling","5739fb8c":"I'll try to make a cute little visualization of Tbilisi with dots colored by districts - we'll use the folium library. Here are the coords of Tbilisi pulled from google maps:","c7e370a2":"We will use the initial dataframe and fix the index after all the initial preprocessing:","7caf1b5a":"As you can see, the RandomForestRegressor turned out to be the best out of the tested regressors - even better, when we tuned some hyperparameters via GridSearchCV. These are some initial and in my opinion, quite nice results ;)","1bf8130b":"Scaling the features to have a better impact on the model:","431e2a85":"# Visualizing the map:","cae22a10":"Well polynomial features were a disappointment, let's get back to our previous linear features:","109acae7":"Looking at both the info method and the missingno matrix, we can see that the NaNs can just be deleted, because there are not that many to affect the dataset greatly","c055a13e":"# Final thoughts (for now ;))","34fc4506":"Make a dictionary containing different district labels and their flats coordinates","7ff7c6e0":"Also, floor and max_floor are heavily skewed\/feature some significant outliers, so let's filter the dataset:","cbb658cf":"A little helper function to retrieve a tuple of the coordinates of a given flat to be used to put the dot on the map:","403599a7":"Newly renovated are of course the most expensive and not renovated are the least expensive (judging by the median), but overall the relationship is rather underwhelming."}}