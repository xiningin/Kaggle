{"cell_type":{"b4c537b3":"code","9ca8000b":"code","b12434dc":"code","912f0d3f":"code","c3beb748":"code","f424d5b5":"code","20f73bfe":"code","5d4993af":"code","a1800070":"code","07f7a7e9":"code","e89de10f":"code","3041b315":"code","4dbaaedf":"markdown"},"source":{"b4c537b3":"import os #ceate folders\nfrom glob import glob # get paths and use the to have floders name\nfrom tqdm.notebook import tqdm # get nice bar\nimport sys\nimport pydicom as pdc  # read dicom images\nimport numpy as np\nimport imageio    # save to PNG images\nimport matplotlib.pyplot as plt  # plot some PNG images\nimport cv2 as cv  # read PNG images\nfrom random import sample \nfrom joblib import Parallel,delayed\nimport subprocess\nfrom ast import literal_eval\n\n","9ca8000b":"# get CPU informations \n\ndef run(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    out, err = process.communicate()\n    print(out.decode('utf-8').strip())\n    \nprint('# CPU')\nrun('cat \/proc\/cpuinfo | egrep -m 1 \"^model name\"')\nrun('cat \/proc\/cpuinfo | egrep -m 1 \"^cpu MHz\"')\nrun('cat \/proc\/cpuinfo | egrep -m 1 \"^cpu cores\"')","b12434dc":"#train and test folder names \ntrain_path_list=glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/*')\ntest_path_list= glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*')\nkaggle_input_path= '..\/input\/'\n\n#list of name of subdirectorys\ntrain_d=list(map(lambda path:path.split('\/')[-1],train_path_list))\ntest_d=list(map(lambda path:path.split('\/')[-1],test_path_list))\nmpMRI_scans=[\"FLAIR\",\"T1w\",\"T1wCE\",\"T2w\"] \n\n# sample of names\nprint(train_d[:4])","912f0d3f":"# read dico image and return the image array\n\ndef read_dcm(img):\n    \"\"\"reading a dicom image with preprocessing\"\"\"\n    dcm_img=pdc.dcmread(img)\n    img_array=dcm_img.pixel_array\n    img_array = img_array - np.min(img_array)\n    if np.max(img_array) != 0:\n        img_array = img_array \/ np.max(img_array)\n    img_array = (img_array * 255).astype(np.uint8)\n    return img_array","c3beb748":"#delete old folder (if you run the code twice)\n\n!rm -rf  Png-rsna-miccai-brain-tumor-radiogenomic-classification\/\n\n# create the main PNG folder with the test and train \n\npng_test_path='Png-rsna-miccai-brain-tumor-radiogenomic-classification\/test'\npng_train_path='Png-rsna-miccai-brain-tumor-radiogenomic-classification\/train'\n\nos.mkdir('Png-rsna-miccai-brain-tumor-radiogenomic-classification')\nos.mkdir(png_train_path)\nos.mkdir(png_test_path)\n\n\n# floders creation \n\nfor trfold in train_d:\n    os.mkdir(png_train_path+'\/'+trfold)\n    for mp in mpMRI_scans:\n        os.mkdir(png_train_path+'\/'+trfold+'\/'+mp)\n        \nfor tsfold in test_d: \n    os.mkdir(png_test_path+'\/'+tsfold)\n    for mp in mpMRI_scans:\n        os.mkdir(png_test_path+'\/'+tsfold+'\/'+mp)","f424d5b5":"# list the paths and name directory \n\npng_train_path_list=glob('Png-rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*')\npng_test_path_list= glob('Png-rsna-miccai-brain-tumor-radiogenomic-classification\/train\/*')\n\npng_train_d=list(map(lambda path:path.split('\/')[-1],png_train_path_list))\npng_test_d=list(map(lambda path:path.split('\/')[-1],png_test_path_list))\n\n#print sample of Png path folders and there names\nprint(png_train_path_list[:3])\nprint(png_train_d[:3])\n\n\n# compare the folder result \n\nprint(train_d.sort()==png_train_d.sort())\nprint(test_d.sort()==png_test_d.sort())\n\n# list of all dicom iamges paths\ntrain_images_path=glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/train\/*\/*\/*')\ntest_images_path=glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*\/*\/*')\n","20f73bfe":"# the logic to create the new PNG path \n\nimage_name=test_images_path[0].split('\/')[4:][-1].split('.')[0]\nnew_png_path=png_train_path+'\/'+'\/'.join(train_images_path[0].split('\/')[4:-1])+'\/'+image_name+'.PNG'\nprint(new_png_path)\n","5d4993af":"print(len(train_images_path),len(test_images_path))\n","a1800070":"# PNG save function \n\ndef train_png(train_path):\n    train_array_img=read_dcm(train_path)                                             \n    train_image_name=train_path.split('\/')[4:][-1].split('.')[0]                               \n    new_train_png_path=png_train_path+'\/'+'\/'.join(train_path.split('\/')[4:-1])+'\/'+train_image_name+'.PNG'    \n    imageio.imsave(new_train_png_path,train_array_img)\n    \ndef test_png(test_path):\n    test_array_path=read_dcm(test_path) \n    test_image_name=test_path.split('\/')[4:][-1].split('.')[0]\n    new_test_png_path=png_test_path+'\/'+'\/'.join(test_path.split('\/')[4:-1])+'\/'+test_image_name+'.PNG'\n    imageio.imsave(new_test_png_path,test_array_path)","07f7a7e9":"#FIXED : not all the training data was converted and the slow conversion \n# test for 20000 for tarain and 10000 for test \nfb_train=Parallel(n_jobs=4,verbose=1,prefer='threads')(delayed(train_png)(train_path) for train_path in tqdm(train_images_path[:20000],total=len(train_images_path[:20000])))\nfb_test=Parallel(n_jobs=4,verbose=1,prefer='threads') (delayed(test_png) (test_path) for test_path in tqdm(test_images_path[:20000],total=len(test_images_path[:20000])))\n","e89de10f":"# FIXED : printing some black images \n\n#print(PNG random PNG images)\npng_images=glob('Png-rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*\/*\/*')\nprint(png_images[:10])\n\nplt.figure(figsize=(15,15))\nplot_indicator=0\nsub_in=0\nfor index,image in tqdm(enumerate(sample(png_images,5000))) :\n    img = cv.imread(image,cv.IMREAD_GRAYSCALE)\n    img=cv.resize(img,(200,200))\n    if np.max(img)!= 0 and np.mean(img)>=30:  \n        plot_indicator+=1\n        if plot_indicator==5:\n            break\n        else :    \n            sub_in+=1\n            plt.subplot(2,2,sub_in)  \n            plt.imshow(img)\n            \n    else:\n        continue ","3041b315":"!tar -zcf dcm_to_png.tar.gz -C \"\/kaggle\/working\/Png-rsna-miccai-brain-tumor-radiogenomic-classification\/\" .","4dbaaedf":"### Image creation and saving part"}}