{"cell_type":{"74da2afc":"code","d87dc699":"code","1b139bc3":"code","31187c18":"code","99205074":"code","03e8e14d":"code","998de1e2":"code","2c0400cf":"code","6fc35748":"code","a377c3f6":"code","2dfd72f1":"code","f4f771ae":"code","79502d66":"code","e4f17ce5":"code","8d7b4503":"code","cd447601":"code","86ec4f19":"code","0f9baed0":"code","ac3243bd":"code","108db900":"code","ad29f3b4":"code","cff0f5a6":"code","9b5ef27e":"code","eb00180d":"code","ac9b523c":"code","b5826ccc":"code","7fa5241d":"markdown","ae0e70cd":"markdown","090d60ae":"markdown","5c80f44f":"markdown","c9600572":"markdown","7fadf40f":"markdown","927caf94":"markdown","5fdfe14d":"markdown","deee91a0":"markdown","655fbe52":"markdown","720789d0":"markdown","cb9214f3":"markdown","36341284":"markdown"},"source":{"74da2afc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d87dc699":"data=pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\nresults={}\ndata.tail(10)","1b139bc3":"data.info()","31187c18":"data.dropna(inplace=True)\ndata.drop([\"Date\",\"Location\",\"RISK_MM\",\"WindGustDir\",\"WindDir9am\",\"WindDir3pm\",\"RainTomorrow\"],axis=1, inplace=True)","99205074":"data.tail()","03e8e14d":"data.info()","998de1e2":"Rain=data[data.RainToday==\"Yes\"]\nNoRain=data[data.RainToday==\"No\"]","2c0400cf":"sns.countplot(x=\"RainToday\", data=data)\ndata.loc[:,'RainToday'].value_counts()","6fc35748":"data['RainToday'] = [1 if each == 'Yes' else 0 for each in data['RainToday']]\ny=data['RainToday'].values\nx_data=data.drop(['RainToday'],axis=1)\ndataf=x_data.corr()\nplt.figure(figsize=(16,16))\nax=sns.heatmap(dataf,annot=True, linewidths=1, fmt= '.2f', annot_kws={\"size\": 12})\nplt.show()","a377c3f6":"x=x_data-np.min(x_data)\/(np.max(x_data)-np.min(x_data))\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","2dfd72f1":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=7)\nknn.fit(x_train,y_train)\ny_head_knn =knn.predict(x_test)\ny_true=y_test\nresults[\"knn\"]=knn.score(x_test,y_test)\nprint(\"{} nn score: {}\".format(7,knn.score(x_test,y_test)))","f4f771ae":"from sklearn.metrics import confusion_matrix\ncm_knn = confusion_matrix(y_true,y_head_knn)\nimport seaborn as sns\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(cm_knn,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nplt.show()","79502d66":"x=x_data-np.min(x_data)\/(np.max(x_data)-np.min(x_data))\nfrom sklearn.model_selection import train_test_split\nx_train, x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=1)","e4f17ce5":"from sklearn.preprocessing import MinMaxScaler\nscaling = MinMaxScaler(feature_range=(-1,1)).fit(x_train)\nx_train2 = scaling.transform(x_train)\nx_test2 = scaling.transform(x_test)","8d7b4503":"from sklearn.svm import SVC\nsvm=SVC(random_state=42,gamma=1)\nsvm.fit(x_train2,y_train)\ny_head_svm = svm.predict(x_test2)\ny_true=y_test\nresults[\"svm\"]=svm.score(x_test2,y_test)\nprint(\"svm accuracy:{}%\",format(svm.score(x_test2,y_test)))","cd447601":"from sklearn.metrics import confusion_matrix\ncm_svm = confusion_matrix(y_true,y_head_svm)\nimport seaborn as sns\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(cm_svm,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nplt.show()","86ec4f19":"from sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_head_nb = nb.predict(x_test)\ny_true=y_test\nresults[\"nb\"]=nb.score(x_test,y_test)\nprint(\"nb accuracy:{}%\",format(nb.score(x_test,y_test)))","0f9baed0":"from sklearn.metrics import confusion_matrix\ncm_nb = confusion_matrix(y_true,y_head_nb)\nimport seaborn as sns\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(cm_nb,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nplt.show()","ac3243bd":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.2, random_state=42)","108db900":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\ny_head_dtc = dtc.predict(x_test)\ny_true=y_test\nresults[\"dtc\"]=dtc.score(x_test,y_test)\nprint(\"decision tree accuracy:{}%\",format(dtc.score(x_test,y_test)))","ad29f3b4":"from sklearn.metrics import confusion_matrix\ncm_dtc = confusion_matrix(y_true,y_head_dtc)\nimport seaborn as sns\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(cm_dtc,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nplt.show()","cff0f5a6":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.2, random_state=42)","9b5ef27e":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=40,random_state=1)\nrf.fit(x_train,y_train)\ny_head_rfc = rf.predict(x_test)\ny_true=y_test\nresults[\"rf\"]=rf.score(x_test,y_test)\nprint(\"random forest accuracy:{}%\",format(rf.score(x_test,y_test)))","eb00180d":"from sklearn.metrics import confusion_matrix\ncm_rf = confusion_matrix(y_true,y_head_rfc)\nimport seaborn as sns\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(cm_rf,annot=True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nplt.show()","ac9b523c":"acc=list(results.values())\nmets=list(results.keys())\nplt.bar(mets, acc, align='center', alpha=0.7, color=\"#00ff00\")\nplt.show()","b5826ccc":"#I quoted that whole sequence from efeergun96. Thank you for that idea.\n\nplt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\n\nplt.subplot(2,2,1)\nplt.title(\"Decision Tree Classifier Confusion Matrix\")\nplt.xlabel(\"ypred\")\nplt.ylabel(\"ytrue\")\nsns.heatmap(cm_dtc,cbar=False,annot=True,cmap=\"CMRmap_r\",fmt=\"d\")\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,cbar=False,annot=True,cmap=\"CMRmap_r\",fmt=\"d\")\n\nplt.subplot(2,3,3)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,cbar=False,annot=True,cmap=\"CMRmap_r\",fmt=\"d\")\n\nplt.subplot(2,3,4)\nplt.title(\"Random Forest Confusion Matrix\")\nsns.heatmap(cm_rf,cbar=False,annot=True,cmap=\"CMRmap_r\",fmt=\"d\")\n\nplt.subplot(2,3,5)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,cbar=False,annot=True,cmap=\"CMRmap_r\",fmt=\"d\")\n\nplt.show()","7fa5241d":"# Naive Bayes Classification","ae0e70cd":"# Support Vector Machine (SVM) Classification","090d60ae":"### Importing data and quick lookup","5c80f44f":"# Decision Tree Classification","c9600572":"## Conclusion  \n**Decision Tree** and **Random Forest** had remarkable results about our dataset.  \n**Knn**, **Naive Bayes** and **SVM** has many *false positives* and *false negatives*.  \nAlso **confusion matrixes** show we have done quite low mistakes.  ","7fadf40f":"### Cleaning data  \nRemoving nan values and string type columns (except RainToday)","927caf94":"As i talked about that at above, there is an unbalanced dataset here.  \nSo we need to measure our success via confusion matrixes.  \nBecause we can get a high accuracy if we say \"Rainy\" to all without prediction.","5fdfe14d":"# Random Forest Classification","deee91a0":"Comparing Algorithms: Which one is Better?","655fbe52":"44000 vs 12000. This is unbalanced dataset. \nWe will change our evaluation metrics at the end for see better what we do. ","720789d0":"Most of the colors are darker than magenta.","cb9214f3":"# K-Nearest Neighbour (KNN) Classification","36341284":"### Correlation heatmap"}}