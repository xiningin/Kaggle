{"cell_type":{"0d2678d6":"code","8faa84b3":"code","a3d62676":"code","966dce1e":"code","4be93bfc":"code","3a44cfed":"code","f8a93d3d":"code","3c52021c":"code","d42e7be9":"code","d3bec14b":"code","b956f574":"code","32fa6cd3":"code","a9f5f34f":"code","e934795b":"code","9bb17279":"code","9c3ca396":"code","b109703f":"code","23ae515d":"code","6525e7cd":"code","6aeeffbb":"code","1c619c8b":"code","50d44d79":"code","99f6ea09":"code","05fc96dc":"code","e9f2a6af":"code","df2c2373":"code","91fa92e5":"code","69837978":"markdown","59e4dcbb":"markdown","e5189879":"markdown","a5ccbff0":"markdown","4ce21cda":"markdown","9cd9549e":"markdown","8b74e9b6":"markdown","e6316e45":"markdown","30f199a8":"markdown","4cea1797":"markdown","b86f8de0":"markdown","ec82a243":"markdown","eb2707b1":"markdown"},"source":{"0d2678d6":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"\nimport seaborn as sns\nimport missingno as msno\nfrom collections import Counter\nimport plotly.figure_factory as ff\nfrom plotly import tools\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('ggplot')\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8faa84b3":"dataset=pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","a3d62676":"dataset.info()","966dce1e":"dataset.hist(bins=25,figsize=(15,10))","4be93bfc":"corr_matrix=dataset.corr()\nprint(corr_matrix['quality'])","3a44cfed":"\ndataset['quality']=pd.cut(dataset['quality'],3,labels=['bad','medium','good'])\ndataset","f8a93d3d":"dataset['quality'].value_counts()","3c52021c":"def multivarient_plot(dataset,rows,cols,plot_type):\n    column_names=dataset.columns\n    number_col=len(column_names)\n    fig,axx=plt.subplots(rows,cols,figsize=(22,16))\n    counter=0\n    for i in range(rows):\n        for j in range(cols):\n            if 'violin' in plot_type:\n                    sns.violinplot(x='quality',y=column_names[counter],data=dataset,ax=axx[i][j])    \n            elif 'box' in plot_type:\n                    sns.boxplot(x='quality',y=column_names[counter],data=dataset,ax=axx[i][j])\n            elif 'point' in plot_type:\n                   sns.pointplot(x='quality',y=column_names[counter],data=dataset, ax=axx[i][j])\n            elif 'bar' in plot_type:\n                    sns.barplot(x='quality',y=column_names[counter],data=dataset,ax=axx[i][j])\n            counter=counter+1 \n            if counter==(number_col-1):\n                break","d42e7be9":"def plot_num(df,features):\n    for c in features:\n        sns.distplot(df[c],bins=20)\n        plt.show()\n        ","d3bec14b":"plot_num(dataset,['volatile acidity','citric acid','chlorides','sulphates','alcohol'])\n","b956f574":"sns.barplot(x=dataset['quality'],y=dataset['alcohol'],palette='PRGn')\nplt.show()","32fa6cd3":"sns.barplot(x=dataset['quality'],y=dataset['volatile acidity'],palette='RdBu')\nplt.show()","a9f5f34f":"sns.barplot(x=dataset['quality'],y=dataset['citric acid'],palette='RdBu')\nplt.show()","e934795b":"multivarient_plot(dataset,4,3,'point')","9bb17279":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndataset['quality']=le.fit_transform(dataset['quality'])","9c3ca396":"\ntrace1=go.Scatter3d(x=dataset['volatile acidity'],\n                    y=dataset['alcohol'],\n                    z=dataset['citric acid'],\n                    mode=\"markers\",\n                    marker=dict(\n                        size=10,\n                        color=dataset.quality\n                        ))\ndata=[trace1]\nlayout=go.Layout(\n          margin=dict(\n              t=0,\n              b=0,\n              r=0,\n              l=0\n              \n              )\n    )    \nfig=go.Figure(layout=layout,data=data)\niplot(fig)\n","b109703f":"dataset['alcohol_cat']=np.ceil(dataset['alcohol']\/2.5)\ndataset['alcohol_cat'].where(dataset['alcohol_cat']<5,5.0,inplace=True)\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsplit=StratifiedShuffleSplit(n_splits=1,test_size=0.2,random_state=42)\nfor train_index,test_index in split.split(dataset,dataset['alcohol_cat']):\n    strat_train_set=dataset.loc[train_index]\n    strat_test_set=dataset.loc[test_index]\nfor set in(strat_train_set,strat_test_set):\n    set.drop(['alcohol_cat'],axis=1,inplace=True)","23ae515d":"strat_train_set","6525e7cd":"strat_test_set","6aeeffbb":"y_train=strat_train_set['quality']\nx_train=strat_train_set.drop(['quality'],axis=1)\ny_test=strat_test_set['quality']\nx_test=strat_test_set.drop(['quality'],axis=1)\n","1c619c8b":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nknn = KNeighborsClassifier()\naccuracies = cross_val_score(knn, x_train, y_train, cv=5)\nknn.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",knn.score(x_test,y_test))","50d44d79":"grid={'n_neighbors':np.arange(1,100),\n       'p':np.arange(1,5),\n       'weights':['uniform','distance']\n      }\nknn=KNeighborsClassifier()\nknn_cv=GridSearchCV(knn,grid,cv=5)\nknn_cv.fit(x_train,y_train)\nprint(\"Hyperparameters:\",knn_cv.best_params_)\nprint(\"Train Score:\",knn_cv.best_score_)\nprint(\"Test Score:\",knn_cv.score(x_test,y_test))","99f6ea09":"from sklearn.ensemble import  RandomForestClassifier\nrfc=RandomForestClassifier(random_state=42)\naccuracies=cross_val_score(rfc,x_train,y_train,cv=5)\nrfc.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',rfc.score(x_test,y_test))","05fc96dc":"grid = {'n_estimators':np.arange(10,1000,50),\n        'criterion':['gini','entropy']\n       }\n\nrf = RandomForestClassifier(random_state = 42)\nrf_cv = GridSearchCV(rf,grid,cv=5)\nrf_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",rf_cv.best_params_)\nprint(\"Train Score:\",rf_cv.best_score_)\nprint(\"Test Score:\",rf_cv.score(x_test,y_test))","e9f2a6af":"from sklearn.pipeline import Pipeline \nfrom sklearn.preprocessing  import StandardScaler \nfrom sklearn.svm import LinearSVC\nsvm_clf=Pipeline((\n   ('scaler',StandardScaler()),\n   ('linear_svc',LinearSVC(C=1,loss='hinge')), \n))\naccuracies=cross_val_score(svm_clf,x_train,y_train,cv=5)\nsvm_clf.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',svm_clf.score(x_test,y_test))","df2c2373":"from sklearn.ensemble import  ExtraTreesClassifier \nrfc= ExtraTreesClassifier(random_state=42)\naccuracies=cross_val_score(rfc,x_train,y_train,cv=5)\nrfc.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',rfc.score(x_test,y_test))\n","91fa92e5":"from sklearn.ensemble import GradientBoostingClassifier\ngbc=GradientBoostingClassifier()\naccuracies=cross_val_score(gbc,x_train,y_train,cv=5)\ngbc.fit(x_train,y_train)\nprint('Train Score: ',np.mean(accuracies))\nprint('Test Score: ',gbc.score(x_test,y_test))","69837978":"<a id='5'><\/a>\n# KNN","59e4dcbb":"##  Please Vote If You Like ^__^ .\n","e5189879":"<a id='2'><\/a>\n# EDA","a5ccbff0":"<a id='3'><\/a>\n# Data Preperation","4ce21cda":"<a id=11><\/a>\n# Gradient Boosting","9cd9549e":"<a id='9'><\/a>\n# Linear SVC","8b74e9b6":"* [Load and Check Data](#1)<br><br>\n* [EDA](#2)\n* [Data Preperation](#3)\n* [Classification](#4)\n  * [KNN](#5)\n  * [KNN GridSearch](#6)\n  * [Random Forest](#7)\n  * [Random Forest GridSearch](#8)\n  * [SVC](#9)\n  * [Extra Trees](#10)\n  * [Gradient Boosting](#11)","e6316e45":"<a id='10'><\/a>\n# Extra Trees","30f199a8":"<a id='8'><\/a>\n# Random Forest GridSearch","4cea1797":"![rw.webp](attachment:rw.webp)","b86f8de0":"<a id='6'><\/a>\n# KNN GridSearch","ec82a243":"<a id='7'><\/a>\n# Random Forest[](http:\/\/)","eb2707b1":"<a id='1'><\/a>\n# Load and Check Data"}}