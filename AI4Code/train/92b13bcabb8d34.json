{"cell_type":{"2952951c":"code","f2e01b8d":"code","aea9c5de":"code","3b856f82":"code","47f10f89":"code","369118dd":"code","92bacc94":"code","4276bee5":"code","d258e7aa":"code","b6d20a8d":"code","298f540e":"code","134c75c4":"code","b46828bf":"code","870f4a6c":"code","c42b8f07":"code","3e289f64":"code","d20a564e":"markdown","cb0d1606":"markdown","5da2aeb5":"markdown","9bc997ba":"markdown","6be3ec69":"markdown","1afca31f":"markdown","8873e9e6":"markdown","41875cd0":"markdown","3961905c":"markdown","1b3d573a":"markdown","7f3fb3b1":"markdown","70176788":"markdown","8e03b70a":"markdown"},"source":{"2952951c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing,CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2e01b8d":"from sklearn import svm\nfrom sklearn import datasets as ds\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline","aea9c5de":"data=ds.load_digits()\nprint(data.DESCR)","3b856f82":"data.images[0]","47f10f89":"plt.imshow(data.images[0])","369118dd":"print(data.target)\nprint(data.target.size)","92bacc94":"svc = svm.SVC(gamma=0.001, C=100.)","4276bee5":"#1st training\nX_train=data.data[0:1791]\nY_train=data.target[0:1791]\nsvc.fit(X_train,Y_train)","d258e7aa":"#1st prediction\nX_test=data.data[1791:]\nY_test=data.target[1791:]\nY_pred=svc.predict(X_test)\nfor i in range(6):\n    plt.subplot(321+i)\n    plt.imshow(data.images[1791+i])\n    print(\"The digit is {}\".format(Y_test[i]))","b6d20a8d":"accuracy_score(Y_test, Y_pred)","298f540e":"#2nd training\nX_train=data.data[6:]\nY_train=data.target[6:]\nsvc.fit(X_train,Y_train)","134c75c4":"#2nd prediction\nX_test=data.data[:6]\nY_test=data.target[:6]\nY_pred=svc.predict(X_test)\nfor i in range(6):\n    plt.subplot(321+i)\n    plt.imshow(data.images[i])\n    print(\"The digit is {}\".format(Y_test[i]))","b46828bf":"accuracy_score(Y_test, Y_pred)","870f4a6c":"#3rd training\nX_train=data.data[:1785]\nY_train=data.target[:1785]\nsvc.fit(X_train,Y_train)","c42b8f07":"#3rd prediction\nX_test= data.data[1785:1791]\nY_test= data.target[1785:1791]\nY_pred= svc.predict(X_test)\nfor i in range(6):\n    plt.subplot(321+i)\n    plt.imshow(data.images[1785+i])\n    print(\"The Digit is {}\".format(Y_pred[i]))","3e289f64":"accuracy_score(Y_test,Y_pred)","d20a564e":"****accuracy score for 2nd prediction = 83.33 %****","cb0d1606":" **Importing libraries and Dataset**","5da2aeb5":"**accuracy score for 1st prediction = 100%**","9bc997ba":"**Viewing the Data**","6be3ec69":"**Loading Dataset**","1afca31f":"**trainig data= images from 6 to last , testing data= first 6 images**","8873e9e6":"**Viewing target data and size of the data**","41875cd0":"**** training data = first 1791 images , testing data= last 6 images****","3961905c":"**ploting image**","1b3d573a":"**average accuracy = (100 + 83.33 + 100)\/3\n                 = 94.44**","7f3fb3b1":"**imorting the support vector classifier**","70176788":"**accuracy score for 3rd prediction = 100%**","8e03b70a":"**training data= first 1785 images , testing data= images from 1785 to 1790**"}}