{"cell_type":{"be75bc1b":"code","89c68b19":"code","e05f0bbb":"code","17e352a6":"code","fa7e7a76":"code","0b393cc4":"code","5c618174":"code","c57d7fb2":"code","ef1d9743":"code","dcd4d8e8":"code","40fd72c3":"code","6e78b46e":"code","7807f6c7":"code","98ad862f":"code","ef728a66":"code","724b4487":"code","9b3ff908":"code","6918e7c0":"code","d1a36da3":"code","dead9fc6":"code","f0fbb895":"code","97fe623f":"code","f1de590f":"code","3794010d":"code","1d8cb6b3":"code","fe6089f6":"code","9a90ac88":"code","b9f12d06":"code","69edbb1b":"code","fd5b3243":"code","2c471ff9":"code","f14138ea":"code","391febc4":"code","4080ad1d":"code","21c1a8b1":"code","729797da":"code","eba4b5bc":"code","ccb7fd59":"code","1878ef5d":"code","98a41e42":"code","cb6acb71":"code","bd682f6b":"code","a6d0ac24":"markdown","b1a0349c":"markdown","711ae6d6":"markdown"},"source":{"be75bc1b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport seaborn as sns","89c68b19":"Train = pd.read_csv('\/kaggle\/input\/melanoma-data\/Train.csv')\nTest = pd.read_csv('\/kaggle\/input\/melanoma-data\/Test.csv')\nsub = pd.read_csv('\/kaggle\/input\/melanoma-data\/sample_submission.csv')","e05f0bbb":"Train.info()","17e352a6":"for i in Train.columns:\n    plot_data = [\n        go.Histogram(\n            x=Train[i],\n            name=i,\n        )\n    ]\n    plot_layout = go.Layout(\n            title='Line Graph',\n            yaxis_title='Values',\n            xaxis_title=i,\n            plot_bgcolor=\"#f8f8f8\"\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    fig.show()","fa7e7a76":"# Lets Check Skewness\n\nfor i in Train.columns:\n    a = Train[i].skew()\n    print('This columns ',i, ' has skewness = ',a)","0b393cc4":"# Train['err_malign'] = np.log1p(Train['err_malign'])","5c618174":"# Train.drop(columns='exposed_area', inplace=True)","c57d7fb2":"# lets Check Corrleation\ncorr = Train.corr(method='spearman')\nplt.figure(figsize=(10,8))\nsns.heatmap(corr, annot=True)","ef1d9743":"# lets check Mulit collinearity\nTrain.columns\nfor i in Train.columns:\n    for j in Train.columns:\n        if i != j:\n            a = Train[i].corr(Train[j], method='spearman')\n            if a > 0.7:\n                print(i , ' and ',j,' has ', a)\n            \n            elif a < -0.7:\n                 print(i , ' and ',j,' has ', a)","dcd4d8e8":"Train.columns","40fd72c3":"Train","6e78b46e":"Train['true_std'] = (Train['std_dev_malign'] - Train['malign_penalty'])","7807f6c7":"dddd","98ad862f":"plt.figure(figsize=(20,10))\nsns.boxplot(x=\"variable\", y=\"value\", data=pd.melt(Train))","ef728a66":"sns.boxplot(Train['exposed_area'])","724b4487":"a = Train['exposed_area'].quantile(.99)\nTrain = Train[Train['exposed_area']< a]","9b3ff908":"sns.boxplot(Train['err_malign'])","6918e7c0":"a = Train['err_malign'].quantile(.98)\nTrain = Train[Train['err_malign']< a]","d1a36da3":"Train.skew()","dead9fc6":"# Train['mass_ratio'] = Train['mass_npea'] \/ Train['size_npear']","f0fbb895":"# Train.drop(columns='mass_npea', inplace=True)","97fe623f":"# Train.drop(columns='std_dev_malign', inplace=True)","f1de590f":"# Train.drop(columns='err_malign', inplace=True)","3794010d":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(Train.values, i) for i in range(Train.shape[1])]\nvif[\"features\"] = Train.columns\nvif","1d8cb6b3":"Train.reset_index(drop=True)","fe6089f6":"X = Train.iloc[:8100, :]\ntest = Train.iloc[8100:, :]\nX_train = X.drop(columns='tumor_size')\nY_train = X['tumor_size']\nX_test = test.drop(columns='tumor_size')\nY_test = test['tumor_size']","9a90ac88":"from sklearn.preprocessing import StandardScaler, PowerTransformer, MinMaxScaler\nsc = StandardScaler()\npw = PowerTransformer()\nmn = MinMaxScaler()\nX_train = mn.fit_transform(X_train)\nX_test = mn.transform(X_test)\n# Y_train = Y_train.values.reshape(-1,1)\n# Y_test = Y_test.values.reshape(-1,1)\n# Y_train = pw.fit_transform(Y_train)\n# Y_test = pw.transform(Y_test)","b9f12d06":"from lightgbm import LGBMRegressor\nlgb_fit_params={\"early_stopping_rounds\":300, \n            \"eval_metric\" : 'rmse', \n            \"eval_set\" : [(X_test,Y_test)],\n            'eval_names': ['valid'],\n            'verbose':1000\n           }\n\nlgb_params = {'boosting_type': 'gbdt',\n 'objective': 'regression',\n 'metric': 'rmse',\n 'verbose': 0,\n 'bagging_fraction': 0.8,\n 'bagging_freq': 1,\n 'lambda_l1': 0.01,\n 'lambda_l2': 0.01,\n 'learning_rate': 0.01,\n 'max_bin': 255,\n 'max_depth': 15,\n 'min_data_in_bin': 1,\n 'min_data_in_leaf': 1,\n 'num_leaves': 250}","69edbb1b":"clf_lgb = LGBMRegressor(n_estimators=10000, **lgb_params, random_state=123456789, n_jobs=-1)\nclf_lgb.fit(X_train, Y_train, **lgb_fit_params)","fd5b3243":"a= int(clf_lgb.best_iteration_)\na","2c471ff9":"model_lgbm = LGBMRegressor(bagging_fraction=0.8, bagging_freq=1, lambda_l1=0.01,\n              lambda_l2=0.01, learning_rate=0.01, max_bin=255, max_depth=20,\n              min_data_in_bin=1, min_data_in_leaf=1,num_leaves = 250,\n              n_estimators=a)\nmodel_lgbm.fit(X_train, Y_train)\n\npred = model_lgbm.predict(X_test)\n","f14138ea":"# model_lgbm = LGBMRegressor(bagging_fraction=0.8, bagging_freq=1, lambda_l1=0.01,\n#               lambda_l2=0.01, learning_rate=0.01, max_bin=255, max_depth=15,\n#               min_data_in_bin=1, min_data_in_leaf=1,num_leaves = 320,\n#               n_estimators=a)\n# model_lgbm.fit(X_train, Y_train)\n\n# pred = model_lgbm.predict(X_test)\n# pred","391febc4":"from sklearn.metrics import mean_squared_error,r2_score\nprint(np.sqrt(mean_squared_error(pred, Y_test)))\nprint(r2_score(pred, Y_test))","4080ad1d":"Test","21c1a8b1":"Test['true_std'] = (Test['std_dev_malign'] - Test['malign_penalty'])","729797da":"Test = mn.transform(Test)","eba4b5bc":"final = model_lgbm.predict(Test)","ccb7fd59":"final","1878ef5d":"sub['tumor_size'] = final\nsub.to_csv('final_lg.csv')","98a41e42":"a = X_train[['damage_size','malign_penalty','malign_ratio']]\nb = a.corr(method='spearman')\nsns.heatmap(b, annot=True)","cb6acb71":"t = X_test[['damage_size','malign_penalty','malign_ratio']]","bd682f6b":"len(X_train.columns)","a6d0ac24":"# Data is highly skewed","b1a0349c":"# melanoma-data_Machine_hack_solution","711ae6d6":"# End"}}