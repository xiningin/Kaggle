{"cell_type":{"573dad87":"code","223f61bf":"code","ceaef995":"code","6e1b51cc":"code","5a585011":"code","32005207":"code","fe2095fd":"code","8469a2e0":"code","d5368a4a":"code","0ac44ea8":"code","f69ab0e8":"code","07e1f4f0":"code","bdc148d6":"code","90e5117d":"code","bb683316":"code","d8f2d4b7":"code","68d442ec":"code","f968266d":"code","bb454fdc":"code","180dffb4":"code","665decec":"code","a0da120a":"code","ce9c1abe":"code","b3c3def5":"code","5cbe06ab":"code","ef3b9e30":"code","c7684f4b":"code","72ca0c43":"code","be756f9b":"code","ff7cb697":"code","d509d84d":"code","855c6ac3":"code","6331a1b6":"code","8dc96e13":"code","54f0599e":"code","f1b1ff49":"code","f0d55d82":"code","78c469cd":"code","a5f7a0f6":"code","7da5ed82":"code","3f890abc":"code","7f24d5be":"markdown","1f76ae15":"markdown","7709b663":"markdown","96010ebf":"markdown","04cc32a3":"markdown","7fb97a96":"markdown","fe1451fc":"markdown"},"source":{"573dad87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","223f61bf":"data=pd.read_csv(\"\/kaggle\/input\/heart-failure-prediction\/heart.csv\")\ndata.head()","ceaef995":"data.columns","6e1b51cc":"data.describe()","5a585011":"data.info()","32005207":"data.Sex.value_counts(dropna=False)","fe2095fd":"import warnings\nwarnings.filterwarnings('ignore')\nsns.countplot(\"Sex\",data=data,palette=\"hls\")","8469a2e0":"countmale=len(data[data.Sex==\"M\"])\ncountfemale=len(data[data.Sex==\"F\"])\nprint(\"Percentage of Male: {:.2f}%\".format((countmale \/ (len(data.Sex))*100)))\nprint(\"Percentage of Female: {:.2f}%\".format((countfemale \/ (len(data.Sex))*100)))","d5368a4a":"data.RestingECG.value_counts(dropna=False)","0ac44ea8":"sns.countplot(\"RestingECG\",data=data,palette=\"hls\")","f69ab0e8":"countnormal=len(data[data.RestingECG==\"Normal\"])\ncountresting=len(data[data.RestingECG==\"ST\"])\ncountlvh=len(data[data.RestingECG==\"LVH\"])\nprint(\"Percentage of Normal: {:.2f}%\".format((countnormal\/ (len(data.RestingECG))*100)))\nprint(\"Percentage of ST: {:.2f}%\".format((countresting \/ (len(data.RestingECG))*100)))\nprint(\"Percentage of LVH: {:.2f}%\".format((countlvh\/ (len(data.RestingECG))*100)))","07e1f4f0":"data.ChestPainType.value_counts(dropna=False)","bdc148d6":"sns.countplot(\"ChestPainType\",data=data,palette=\"hls\")","90e5117d":"countata=len(data[data.ChestPainType==\"ATA\"])\ncountnap=len(data[data.ChestPainType==\"NAP\"])\ncountasy=len(data[data.ChestPainType==\"ASY\"])\ncountta=len(data[data.ChestPainType==\"TA\"])\nprint(\"Percentage of ATA: {:.2f}%\".format((countata\/ (len(data.ChestPainType))*100)))\nprint(\"Percentage of NAP: {:.2f}%\".format((countnap\/ (len(data.ChestPainType))*100)))\nprint(\"Percentage ofASY: {:.2f}%\".format((countasy\/ (len(data.ChestPainType))*100)))\nprint(\"Percentage of TA: {:.2f}%\".format((countta\/ (len(data.ChestPainType))*100)))","bb683316":"plt.figure(figsize=(7,5))\nsns.barplot(\"ExerciseAngina\",\"HeartDisease\",data=data,palette=\"Purples\")\nplt.show()","d8f2d4b7":"plt.figure(figsize=(7,5))\nsns.barplot(\"ST_Slope\",\"HeartDisease\",data=data,palette=\"Greens\")\nplt.show()","68d442ec":"plt.figure(figsize=(27,25))\nplt.subplot(4,4,1)\nsns.barplot(\"Sex\",\"HeartDisease\",data=data,palette=\"Blues\")\nplt.subplot(4,4,2)\nsns.barplot(\"ExerciseAngina\",\"HeartDisease\",data=data,palette=\"Reds\")\nplt.subplot(4,4,3)\nsns.barplot(\"ST_Slope\",\"HeartDisease\",data=data,palette=\"Purples\")\nplt.subplot(4,4,4)\nsns.barplot(\"RestingECG\",\"HeartDisease\",data=data,palette=\"Greens\")\nplt.show()","f968266d":"sns.countplot(\"HeartDisease\",data=data,palette=\"viridis\")","bb454fdc":"countnormal=len(data[data.HeartDisease==0])\ncountfail=len(data[data.HeartDisease==1])\nprint(\"Percentage of Normal: {:.2f}%\".format((countnormal\/ (len(data.HeartDisease))*100)))\nprint(\"Percentage of Failure: {:.2f}%\".format((countfail\/ (len(data.HeartDisease))*100)))","180dffb4":"from sklearn.preprocessing import StandardScaler    \nfrom sklearn.model_selection import train_test_split","665decec":"data.replace({\"Normal\":0,\"ST\":1,\"LVH\":2,\"N\":0,\"Y\":1,\"ATA\":0,\"NAP\":1,\"ASY\":2,\"TA\":3,\"Up\":0,\"Flat\":1,\"Down\":2,\"M\":0,\"F\":1},inplace=True)","a0da120a":"Y=data[\"HeartDisease\"].values\nX=((data.loc[:,data.columns!=\"HeartDisease\"]).astype(int)).values[:,0:]","ce9c1abe":"Scaler=StandardScaler()","b3c3def5":"X_scaled=Scaler.fit_transform(X)","5cbe06ab":"X_train,X_test,Y_train,Y_test=train_test_split(X_scaled,Y,test_size=0.2,random_state=2)","ef3b9e30":"import torch\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torch.autograd import Variable","c7684f4b":"X_train=torch.tensor(X_train).float()\nX_test=torch.tensor(X_test).float()\nY_train=torch.tensor(Y_train).long()\nY_test=torch.tensor(Y_test).long()","72ca0c43":"class heartdis(nn.Module):\n    def __init__(self):\n        super(heartdis,self).__init__()\n        self.fc1=nn.Linear(11,150)\n        self.fc2=nn.Linear(150,150)\n        self.fc3=nn.Linear(150,2)\n    def forward(self,x):\n        x=F.relu(self.fc1(x))\n        x=F.relu(self.fc2(x))\n        return self.fc3(x)","be756f9b":"model=heartdis()","ff7cb697":"from torch import optim\noptimizer=optim.Adam(model.parameters())\ncriterion=nn.CrossEntropyLoss()","d509d84d":"losses=[]","855c6ac3":"for epoch in range(1,250):\n    optimizer.zero_grad()\n    output=model(X_train)\n    loss=criterion(output,Y_train)\n    loss.backward()\n    optimizer.step()\n    losses.append(loss.item())\n    print(\"Epoch {},Loss {}\".format(epoch,loss.item(),verbose=1))","6331a1b6":"plt.figure(figsize=(7,5))\nplt.plot(losses)","8dc96e13":"prediction=model(X_test)\npred_y=torch.max(prediction,1)","54f0599e":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report","f1b1ff49":"pred_y.indices","f0d55d82":"accuracy_score(Y_test,pred_y.indices)","78c469cd":"Test=pd.DataFrame(X_test.numpy())","a5f7a0f6":"Test[\"Actual\"]=Y_test\nTest[\"Prediction\"]=pred_y.indices","7da5ed82":"Test.head()","3f890abc":"samp=[[48,1,2,138,214,0,0,108,1,1.5,1]]\nInput=torch.tensor(samp).float()\nout=model(Input)\noutput=torch.max(out,1)\noutput.indices\nif(output.indices==1):\n    print(\"Patient has Heart Failure.\")\nelse:\n    print(\"Patient is Normal.\")","7f24d5be":"**MODEL TRAINING**","1f76ae15":"**The Values in the above Table is same values of the test data since it was scaled using StandardScaler negative to positive integer.**","7709b663":"*creating epoches and minimising the loss*","96010ebf":"**Scaling,Spliting and Replacing the Objects and Ints**","04cc32a3":"**Importing Dataset**","7fb97a96":"*Analysing the Visuals*","fe1451fc":"**Data Visualisation**"}}