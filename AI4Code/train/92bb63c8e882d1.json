{"cell_type":{"c7aeae9b":"code","a8573588":"code","c41c876f":"code","04e066f5":"code","3c2db591":"code","a97b7a44":"code","a8101563":"code","c9f930da":"code","93b6fcf9":"code","9e94b084":"code","594f2630":"code","bd5e3c8d":"code","7578d76a":"code","ccca064c":"code","a8b23e6d":"code","59acfa45":"code","38988b66":"code","9f826df9":"code","3a5efe54":"code","3bb398c4":"code","9f27f231":"code","3b6fa599":"code","7c82c07e":"code","0c7afdb0":"code","3ee4aef1":"code","7cb3f9b1":"code","056e77b9":"code","893f853b":"code","05f5eb59":"code","57632630":"code","228a3804":"code","b44f4491":"code","25c56287":"code","25f75324":"code","35339510":"code","23412b09":"code","73b1be9a":"code","bae4ac5d":"code","12c1882d":"code","cb80be97":"code","a3542e7b":"code","1ef5449f":"code","24afa0ff":"code","6d609ada":"code","492d8c33":"code","63e88509":"code","28576128":"code","fe29e9c3":"code","4509d1e5":"code","0161be31":"code","e59aaacb":"code","a241cc9c":"code","92a9c61e":"code","d76c7337":"code","6f7774ce":"code","c95ade55":"code","ebfe6a27":"code","539b7579":"code","0f80e3b1":"code","591858fe":"code","7ef9ba62":"code","e9a12a9a":"code","9165bc5d":"code","5c6f507a":"code","f6226356":"markdown","ecb63296":"markdown","188a388f":"markdown","e460ed75":"markdown","552f8250":"markdown","35d97ae2":"markdown","3a77ffc6":"markdown","bda509ee":"markdown","b52f22dc":"markdown","87c6e413":"markdown","a693af73":"markdown","843b88c8":"markdown","79ee7e47":"markdown","96146a1a":"markdown","47883bfd":"markdown","6547e255":"markdown"},"source":{"c7aeae9b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")  # To ignore warnings\nsns.set(rc={\"figure.figsize\":(12,8)})  # Set figure size to 12,8\n\n","a8573588":"pd.options.display.max_columns=150 # to display all columns ","c41c876f":"# to run the code line by line\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"#run single line code","04e066f5":"col_names = ['surgery','Age','Hospital Number','rectal temperature','pulse','respiratory rate','temperature of extremities','peripheral pulse',\n             'mucous membranes','capillary refill time','pain','peristalsis','abdominal distension','nasogastric tube','nasogastric reflux', 'nasogastric reflux PH','rectal examination - feces','abdomen','packed cell volume','total protein','abdominocentesis appearance',\n             'abdomcentesis total protein','outcome','surgical lesion','type of lesion_1','type of lesion_2','type of lesion_3','cp_data']","3c2db591":"data = pd.read_csv(\"http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/horse-colic\/horse-colic.data\",sep=\" \",na_values=\"?\",engine=\"python\",index_col=False,names=col_names)","a97b7a44":"test = pd.read_csv(\"http:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/horse-colic\/horse-colic.test\",sep=\" \",na_values=\"?\",engine=\"python\",index_col=False,names=col_names)\ntest","a8101563":"data","c9f930da":"df=data.copy()","93b6fcf9":"tst=test.copy()","9e94b084":"df.shape","594f2630":"tst.shape","bd5e3c8d":"df.dtypes","7578d76a":"df.dtypes.value_counts()","ccca064c":"df.isnull().sum()","a8b23e6d":"dele_col=df.columns[(df.isnull().sum()*100)\/df.shape[0]>40]\ndele_col","59acfa45":"df=df.drop(dele_col,axis=1)","38988b66":"tst=tst.drop(dele_col,axis=1)","9f826df9":"num_cols=['Hospital Number', 'rectal temperature', 'pulse', 'respiratory rate',  'packed cell volume',\n 'total protein',  'type of lesion_1','type of lesion_2','type of lesion_3']#'nasogastric reflux PH','abdomcentesis total protein',","3a5efe54":"num_df=df[num_cols]\nnum_df","3bb398c4":"num_tst=tst[num_cols]\nnum_tst","9f27f231":"cat_cols= ['surgery','Age', 'temperature of extremities', 'peripheral pulse', 'mucous membranes', 'capillary refill time', 'pain', 'peristalsis', 'abdominal distension', 'nasogastric tube', 'nasogastric reflux', 'rectal examination - feces', 'abdomen',  'outcome', 'surgical lesion', 'cp_data']#'abdominocentesis appearance',\n","3b6fa599":"cat_df=df[cat_cols]\ncat_df","7c82c07e":"cat_tst=tst[cat_cols]\ncat_tst","0c7afdb0":"cat_df.isnull().sum()","3ee4aef1":"cat_tst.isnull().sum()","7cb3f9b1":"## fill na values \nfrom sklearn.impute import SimpleImputer\nimputer=SimpleImputer(strategy='most_frequent')\n\nimputed_data = imputer.fit_transform(cat_df)\n\nimputed_data=pd.DataFrame(imputed_data,columns=cat_df.columns)\n\nprint(imputed_data.isnull().sum())","056e77b9":"imputed_tst = imputer.fit_transform(cat_tst)\n\nimputed_tst=pd.DataFrame(imputed_tst,columns=cat_tst.columns)\n\nprint(imputed_tst.isnull().sum())","893f853b":"cols= imputed_data.columns\n\nimputed_data[cols] = imputed_data[cols].astype(\"category\")\n\nprint(imputed_data.dtypes)","05f5eb59":"cols= imputed_tst.columns\n\nimputed_tst[cols] = imputed_tst[cols].astype(\"category\")\n\nprint(imputed_tst.dtypes)","57632630":"imput=SimpleImputer(strategy=\"mean\")\n\nimput_data = imput.fit_transform(num_df)\n\nimput_data=pd.DataFrame(imput_data,columns=num_df.columns)\n\nprint(imput_data.isnull().sum())","228a3804":"imput_tst = imput.fit_transform(num_tst)\n\nimput_tst=pd.DataFrame(imput_tst,columns=num_tst.columns)\n\nprint(imput_tst.isnull().sum())","b44f4491":"for col in imputed_data.columns.values:\n    imputed_data[col]=imputed_data[col].astype('category').cat.codes","25c56287":"for col in imputed_tst.columns.values:\n    imputed_tst[col]=imputed_tst[col].astype('category').cat.codes","25f75324":"df_merge=pd.concat([imputed_data,imput_data],axis=1)","35339510":"df_merge","23412b09":"df_merge.isnull().sum()","73b1be9a":"dff=df_merge.copy()","bae4ac5d":"dff.columns","12c1882d":"dff.shape","cb80be97":"tst_merge=pd.concat([imputed_tst,imput_tst],axis=1)\ntst_merge","a3542e7b":"tst_merge.isnull().sum()","1ef5449f":"# convert target variable into x,y\ny=dff['outcome']\nX=dff.drop(['outcome'],axis=1)","24afa0ff":"tst_merge=tst_merge.drop(['outcome'],axis=1)","6d609ada":"from sklearn.model_selection import train_test_split","492d8c33":"X_train,  X_val, y_train,y_val = train_test_split(X, y, stratify=y,test_size = 0.30, random_state = 222)\n\nX_train.shape, X_val.shape, y_train.shape, y_val.shape\n","63e88509":"from sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression","28576128":"LRC = LogisticRegression()#solver='newton-cg',max_iter=500\n\nLRC.fit(X_train, y_train)\ny_pred_LRC = LRC.predict(X_val)\n\nprint(classification_report(y_val, y_pred_LRC))","fe29e9c3":"from sklearn.tree import DecisionTreeClassifier","4509d1e5":"DTC = DecisionTreeClassifier()#criterion = 'entropy', max_features = 'sqrt', max_depth = 15, random_state = 0\n\nDTC.fit(X_train, y_train)\ny_pred_DT = DTC.predict(X_val)\n\nprint(classification_report(y_val, y_pred_DT))","0161be31":"from sklearn.ensemble import RandomForestClassifier#rfc_65","e59aaacb":"rfc11 = RandomForestClassifier()#n_estimators = 1500, class_weight=\"balanced\"\n\nrfc11.fit(X_train, y_train)\ny_pred_test_RF1 = rfc11.predict(X_val)\n\nprint(classification_report(y_val, y_pred_test_RF1))","a241cc9c":"rfc111 = RandomForestClassifier(n_estimators = 2500, class_weight=\"balanced\")#\n\nrfc111.fit(X_train, y_train)\ny_pred_test_RF11 = rfc111.predict(X_val)\n\nprint(classification_report(y_val, y_pred_test_RF11))","92a9c61e":"from sklearn.ensemble import GradientBoostingClassifier","d76c7337":"GBC = GradientBoostingClassifier(learning_rate=0.1, n_estimators = 500, max_features=\"sqrt\")\nGBC.fit(X_train, y_train)\n\ny_pred_GBC = GBC.predict(X_val)\nprint(classification_report(y_val, y_pred_GBC))","6f7774ce":"from sklearn.ensemble import AdaBoostClassifier","c95ade55":"estimator_model = AdaBoostClassifier(base_estimator = RandomForestClassifier(),\n                                    n_estimators = 500,\n                                    learning_rate=0.1,\n                                    random_state = 0)\nestimator_model.fit(X_train, y_train)\ny_pred_adaboost = estimator_model.predict(X_val)\n\nprint(classification_report(y_val, y_pred_adaboost))\n\n","ebfe6a27":"from sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier  \nfrom sklearn.model_selection import GridSearchCV","539b7579":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)","0f80e3b1":"y_pred_xg = xgb.predict(X_val)\n\nprint(classification_report(y_val, y_pred_xg))","591858fe":"\nxgb11 = XGBClassifier(n_estimators=1000,max_depth=5,min_child_weight=1,seed=27)","7ef9ba62":"xgb11.fit(X_train, y_train)","e9a12a9a":"y_pred_xgb = xgb11.predict(X_val)\n\nprint(classification_report(y_val, y_pred_xgb))","9165bc5d":"from mlxtend.classifier import StackingClassifier\n\nmodel1 = LogisticRegression(solver='newton-cg')\nmodel2 =DecisionTreeClassifier(criterion = 'gini', max_features = 'sqrt', max_depth = 10, random_state = 0)\nmodel3 = RandomForestClassifier()\nmodel4 = XGBClassifier(n_estimators=100,max_depth=5,min_child_weight=1,seed=27)","5c6f507a":"meta_model = RandomForestClassifier()\n\nstack = StackingClassifier(classifiers=[ model2, model4], meta_classifier=meta_model)#model1, model2,\n\nstack.fit(X_train, y_train)\ny_pred_stacked = stack.predict(X_val)\n\nprint(classification_report(y_val, y_pred_stacked))\n\n","f6226356":"## XGB","ecb63296":"## Logistic Regression","188a388f":"## Decision Trees","e460ed75":"### Attribute Information:\n\n\n1: surgery\n- 1 = Yes, it had surgery\n- 2 = It was treated without surgery\n\n2: Age\n- 1 = Adult horse\n- 2 = Young (< 6 months)\n\n3: Hospital Number\n- numeric id\n- the case number assigned to the horse (may not be unique if the horse is treated > 1 time)\n\n4: rectal temperature\n- linear\n- in degrees celsius.\n- An elevated temp may occur due to infection.\n- temperature may be reduced when the animal is in late shock\n- normal temp is 37.8\n- this parameter will usually change as the problem progresses, eg. may start out normal, then become elevated because of the lesion, passing back through the normal range as the horse goes into shock\n\n5: pulse\n- linear\n- the heart rate in beats per minute\n- is a reflection of the heart condition: 30 -40 is normal for adults\n- rare to have a lower than normal rate although athletic horses may have a rate of 20-25\n- animals with painful lesions or suffering from circulatory shock may have an elevated heart rate\n\n6: respiratory rate\n- linear\n- normal rate is 8 to 10\n- usefulness is doubtful due to the great fluctuations\n\n7: temperature of extremities\n- a subjective indication of peripheral circulation\n- possible values:\n1 = Normal\n2 = Warm\n3 = Cool\n4 = Cold\n- cool to cold extremities indicate possible shock\n- hot extremities should correlate with an elevated rectal temp.\n\n8: peripheral pulse\n- subjective\n- possible values are:\n1 = normal\n2 = increased\n3 = reduced\n4 = absent\n- normal or increased p.p. are indicative of adequate circulation while reduced or absent indicate poor perfusion\n\n9: mucous membranes\n- a subjective measurement of colour\n- possible values are:\n1 = normal pink\n2 = bright pink\n3 = pale pink\n4 = pale cyanotic\n5 = bright red \/ injected\n6 = dark cyanotic\n- 1 and 2 probably indicate a normal or slightly increased circulation\n- 3 may occur in early shock\n- 4 and 6 are indicative of serious circulatory compromise\n- 5 is more indicative of a septicemia\n\n10: capillary refill time\n- a clinical judgement. The longer the refill, the poorer the circulation\n- possible values\n1 = < 3 seconds\n2 = >= 3 seconds\n\n11: pain - a subjective judgement of the horse's pain level\n- possible values:\n1 = alert, no pain\n2 = depressed\n3 = intermittent mild pain\n4 = intermittent severe pain\n5 = continuous severe pain\n- should NOT be treated as an ordered or discrete variable!\n- In general, the more painful, the more likely it is to require surgery\n- prior treatment of pain may mask the pain level to some extent\n\n12: peristalsis\n- an indication of the activity in the horse's gut. As the gut becomes more distended or the horse becomes more toxic, the activity decreases\n- possible values:\n1 = hypermotile\n2 = normal\n3 = hypomotile\n4 = absent\n\n13: abdominal distension\n- An IMPORTANT parameter.\n- possible values\n1 = none\n2 = slight\n3 = moderate\n4 = severe\n- an animal with abdominal distension is likely to be painful and have reduced gut motility.\n- a horse with severe abdominal distension is likely to require surgery just tio relieve the pressure\n\n14: nasogastric tube\n- this refers to any gas coming out of the tube\n- possible values:\n1 = none\n2 = slight\n3 = significant\n- a large gas cap in the stomach is likely to give the horse discomfort\n\n15: nasogastric reflux\n- possible values\n1 = none\n2 = > 1 liter\n3 = < 1 liter\n- the greater amount of reflux, the more likelihood that there is some serious obstruction to the fluid passage from the rest of the intestine\n\n16: nasogastric reflux PH\n- linear\n- scale is from 0 to 14 with 7 being neutral\n- normal values are in the 3 to 4 range\n\n17: rectal examination - feces\n- possible values\n1 = normal\n2 = increased\n3 = decreased\n4 = absent\n- absent feces probably indicates an obstruction\n\n18: abdomen\n- possible values\n1 = normal\n2 = other\n3 = firm feces in the large intestine\n4 = distended small intestine\n5 = distended large intestine\n- 3 is probably an obstruction caused by a mechanical impaction and is normally treated medically\n- 4 and 5 indicate a surgical lesion\n\n19: packed cell volume\n- linear\n- the # of red cells by volume in the blood\n- normal range is 30 to 50. The level rises as the circulation becomes compromised or as the animal becomes dehydrated.\n\n20: total protein\n- linear\n- normal values lie in the 6-7.5 (gms\/dL) range\n- the higher the value the greater the dehydration\n\n21: abdominocentesis appearance\n- a needle is put in the horse's abdomen and fluid is obtained from\nthe abdominal cavity\n- possible values:\n1 = clear\n2 = cloudy\n3 = serosanguinous\n- normal fluid is clear while cloudy or serosanguinous indicates a compromised gut\n\n22: abdominocentesis total protein\n- linear\n- the higher the level of protein the more likely it is to have a compromised gut. Values are in gms\/dL\n\n23: outcome\n- what eventually happened to the horse?\n- possible values:\n1 = lived\n2 = died\n3 = was euthanized\n\n24: surgical lesion?\n- retrospectively, was the problem (lesion) surgical?\n- all cases are either operated upon or autopsied so that this value and the lesion type are always known\n- possible values:\n1 = Yes\n2 = No\n\n25, 26, 27: type of lesion\n- first number is site of lesion\n1 = gastric\n2 = sm intestine\n3 = lg colon\n4 = lg colon and cecum\n5 = cecum\n6 = transverse colon\n7 = retum\/descending colon\n8 = uterus\n9 = bladder\n11 = all intestinal sites\n00 = none\n- second number is type\n1 = simple\n2 = strangulation\n3 = inflammation\n4 = other\n- third number is subtype\n1 = mechanical\n2 = paralytic\n0 = n\/a\n- fourth number is specific code\n1 = obturation\n2 = intrinsic\n3 = extrinsic\n4 = adynamic\n5 = volvulus\/torsion\n6 = intussusception\n7 = thromboembolic\n8 = hernia\n9 = lipoma\/splenic incarceration\n10 = displacement\n0 = n\/a\n\n28: cp_data\n- is pathology data present for this case?\n1 = Yes\n2 = No\n- this variable is of no significance since pathology data is not included or collected for these cases\n","552f8250":"## Objective \nBuild a classification model using following methods:\n- Logistic Regression.\n- SVM.\n- Decision Trees.\n- Random Forest.\n- Stacking.\n","35d97ae2":"## Stacking","3a77ffc6":"## Problem Statement \n\nPredict whether or not a horse can survive based upon past medical conditions.\nNoted by the \"outcome\" variable in the data(Target).\n\nThe dataset has 28 features and has a good mix of categorical and continuous features. It has a large number of features and instances with missing values, hence understanding how to replace these missing values is an important task for this assignment.\n\nData is in .csv format.\n\nData Reference : \nhttp:\/\/archive.ics.uci.edu\/ml\/datasets\/Horse+Colic\n","bda509ee":"# Final","b52f22dc":"## AdaBoost Classifier","87c6e413":"Approach:\n    1. Identify NULL values in each column and respective counts\n    2. Identify dtype of columns\n    3. Dummification for categorical variable. Filling NULL values with Most frequent values of respective columns, This will be done in two steps.\n        * Fill the NULL of categorical features and put the label on them. This will enrich our data for most frequent column\n        * Fill the NULL of remaining features (Numerical).\n    4. Split data for training \n    5. Apply classification algorithm and evaluate the performance.\n\n","a693af73":"## Random Forest","843b88c8":"## test","79ee7e47":"# Data Preprocessing","96146a1a":"# Train test Split","47883bfd":"## Gradient Boosted Trees","6547e255":"# Models\n"}}