{"cell_type":{"b4ec0f18":"code","771c997c":"code","6ac97dd3":"code","6c804bfa":"code","b09215e1":"code","e13208bc":"code","535a1c57":"code","f95a42fd":"code","634fc762":"code","afd07eab":"code","b9187b50":"code","52440381":"code","0d67bbba":"code","b4e2be62":"code","073cc59d":"code","7d0f51d1":"code","c019212a":"code","68e6f007":"code","8051698b":"code","ea114e25":"code","d9739900":"code","621727f9":"code","12189622":"code","a795a7e8":"code","04facbe0":"code","00d5b24d":"code","7bf50cc4":"code","3fbb969d":"code","a8774fda":"code","2bdeefa6":"code","66dcee4a":"code","2334755a":"code","82b5c591":"code","d6d91441":"code","b3f38c4f":"code","8421d48f":"code","10116bb6":"code","36525f0c":"code","586497bd":"code","e3acfe1f":"code","50bd9990":"code","0de08029":"code","710f4765":"code","906dbc85":"code","817c0bda":"code","1d721018":"code","df207d32":"code","9bf068f2":"code","8324fd58":"code","fe1c2677":"code","511b5c1f":"code","0236cdcd":"code","40e62b27":"code","73008921":"code","196df8ca":"code","4ebd1ac0":"code","395740a3":"code","eb44343b":"code","63e5a7c9":"code","e4cdc647":"code","89ab5d1d":"code","0214cd7c":"code","f61e01f6":"code","29fb972f":"code","94e45e38":"code","54a8defe":"code","daa07fe9":"code","0ade9949":"code","d3ad8634":"code","280b25b3":"code","4670784a":"code","5ec985e2":"code","de75be13":"code","0e69f043":"code","16153da2":"code","218443d0":"code","22e06e58":"code","3548c0ee":"code","86c68749":"code","ce0e9914":"code","587b848e":"code","b797ea1f":"code","7c7b3930":"code","250fa7d6":"code","688447b4":"code","683e08f5":"code","295dc6ac":"code","56bc0f43":"code","cb120f5a":"code","5b088a67":"code","a8e2117c":"code","bf37866a":"code","53035223":"code","85259061":"code","15e9c7dc":"code","f98bd0a7":"code","9e019f84":"code","b41845b1":"code","37eef650":"code","24dd1d30":"code","fedb7987":"code","789edc39":"code","0a9b3e56":"code","8e4435ce":"markdown","094d65f9":"markdown","c8ae3123":"markdown","1886edcf":"markdown","326b08af":"markdown","6bf37397":"markdown","41e4ebdf":"markdown","8ac4efca":"markdown","146a0916":"markdown","19336e58":"markdown","0da7110e":"markdown","dd420563":"markdown","51a3d0e5":"markdown","f7918694":"markdown","1a89e6b1":"markdown","a57f97fc":"markdown","59a0034c":"markdown","b6ea20cf":"markdown","ade37712":"markdown","99c4ec8d":"markdown","6e5bb741":"markdown","ed6433a9":"markdown","094713cb":"markdown","3f0a4b6a":"markdown","c4cd9c73":"markdown","8981a925":"markdown","9764df0d":"markdown","02b9930c":"markdown","b582565b":"markdown","8da1b1ca":"markdown","896dff4a":"markdown","49e5dd25":"markdown","1230fc1a":"markdown","af646b1b":"markdown","8a66bbd6":"markdown","d5edaa74":"markdown","ca61b51d":"markdown","41d24776":"markdown","70f18aa2":"markdown","745c657f":"markdown","d2d1f645":"markdown","a69aeaec":"markdown","2540b704":"markdown","b118a11f":"markdown","18430b13":"markdown","66320554":"markdown","bfc3370d":"markdown","be13b275":"markdown","d602c60e":"markdown","1c47df23":"markdown","d684c259":"markdown","12980e86":"markdown","6e080e03":"markdown","17a66557":"markdown","0f34e394":"markdown","9d2f2488":"markdown","d60f1cd1":"markdown","f7758d8c":"markdown"},"source":{"b4ec0f18":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('whitegrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV, \\\nRandomizedSearchCV\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import f1_score, accuracy_score, classification_report,\\\nconfusion_matrix, roc_auc_score, plot_confusion_matrix, plot_roc_curve","771c997c":"df = pd.read_csv(\"..\/input\/cardiovascular-disease-dataset\/cardio_train.csv\", sep= ';')","6ac97dd3":"df.head()","6c804bfa":"df.info()","b09215e1":"df.describe().T","e13208bc":"df.cardio.value_counts(normalize= True)","535a1c57":"# scatter matrix to visualize data\npd.plotting.scatter_matrix(df, figsize = [15,15]);","f95a42fd":"# Check for missing values\ndf.isna().sum()","634fc762":"# check for duplicate values\ndf.duplicated().sum()","afd07eab":"# drop id column\ndf.drop('id', axis= 1, inplace= True)\n\n# change gender from 1 or 2 to 0 or 1\ndf['gender'].replace(2, 0, inplace= True)\n\n# change age from days to years\ndf['age'] = round(df['age'] \/ 365, 1)","b9187b50":"print(df.age.min())\ndf.age.max()","52440381":"# check heights \ndf[df['height'] < 125]","0d67bbba":"# 125cm (4') seems short for the weights that are associated with them\n# so we'll drop them\ndf = df[df['height'] >= 125]","b4e2be62":"df[df['height'] > 200]","073cc59d":"# a height of 250cm (8'2\") and a weight of 86kg (190lbs) seems suspicious\ndf.drop(index=6486, inplace= True)","7d0f51d1":"# find where ap_lo is higher than ap_hi\ndf = df[df['ap_hi'] > df['ap_lo']]","c019212a":"# remove ap_hi and ap_lo with negative and extremely low numbers\n# anything with systolic < 80 and diastolic < 50 is considered abnormally low\ndf = df[df['ap_hi'] > 80]\ndf = df[df['ap_lo'] > 50]","68e6f007":"# remove any ap_hi an ap_lo readings that are abnormally high\ndf = df[df['ap_hi'] < 250]","8051698b":"# while these diastolic readings are very high, \n# they are still lower than the systolic and match other features\ndf[df['ap_lo'] > 150]","ea114e25":"#40kg = 88lbs, this would indicate a underweight person, or a typo in the data\ndf = df[df['weight'] >= 40]","d9739900":"# reset index\ndf.reset_index(inplace= True, drop= True)","621727f9":"# change feature names\nnew_names = {'ap_hi' : 'systolic', \n             'ap_lo' : 'diastolic', \n             'gluc' : 'glucose', \n             'alco': 'alcohol', \n             'cardio': 'disease'\n            }","12189622":"df = df.rename(columns= new_names)","a795a7e8":"df.shape","04facbe0":"df.disease.value_counts(normalize= True)","00d5b24d":"df_eda = df.copy()","7bf50cc4":"sns.scatterplot(x= 'height', y= 'weight', hue= 'disease', data= df_eda)","3fbb969d":"# create BMI feature\ndef BMI (data):\n    return round(data['weight'] \/ (data['height'] \/ 100) **2, 2)\n\ndf_eda['BMI'] = df_eda.apply(BMI, axis= 1)","a8774fda":"df_eda.describe().T","2bdeefa6":"pal = ['#008ae6' , '#ec1313']\n\nplt.figure(figsize= (10,15))\nsns.boxplot(x = 'disease', y= 'BMI', data= df_eda, palette= pal)\nplt.title('Body Mass Index and Cardiovascular Disease', fontsize= 20)\nplt.xlabel('Disease Presence')\nplt.ylabel('BMI')","66dcee4a":"#function to categorize blood pressure\ndef bp_categories(systolic, diastolic):\n    if systolic > 180 or diastolic > 120:\n        return 'Crisis'\n    elif (140 <= systolic < 180) or (90 <= diastolic < 120):\n        return 'HBP_stage2'\n    elif (130 <= systolic < 140) or (80 <= diastolic < 90) :\n        return 'HBP_stage1'\n    elif (120 <= systolic < 130) and diastolic < 80:\n        return 'Elevated'\n    else:\n        return 'Normal'","2334755a":"# HTN is abbreviation for hypertension\ndf_eda['HTN_stage'] = df_eda[['systolic', 'diastolic']].apply\\\n(lambda x: bp_categories(*x), axis= 1)","82b5c591":"df_eda.HTN_stage.value_counts()","d6d91441":"pal = ['#008ae6' , '#ec1313']\n\nplt.figure(figsize= (15,15))\nsns.countplot(x= 'HTN_stage', hue= 'disease', data= df_eda, palette= pal)\nplt.title('Blood Pressure Categories and Presence of Cardiovascular Disease', \n          fontweight= 'bold', fontsize= 20)\nplt.xlabel('Blood Pressure Category')\nplt.legend( ['No disease', 'Disease present'])\nplt.ylabel('# of Patients')","b3f38c4f":"print(df_eda.age.min())\nprint(df_eda.age.max())\ndf_eda[df_eda['age'] < 30]","8421d48f":"# bin ages into categories\ndf_eda.loc[(df_eda['age'] < 40), 'age_range'] = 30\ndf_eda.loc[(df_eda['age'] >= 40) & (df_eda['age'] < 50), 'age_range'] = 40\ndf_eda.loc[(df_eda['age'] >= 50) & (df_eda['age'] < 60), 'age_range'] = 50\ndf_eda.loc[(df_eda['age'] >= 60) & (df_eda['age'] < 70), 'age_range'] = 60\n","10116bb6":"df_eda.age_range.value_counts(normalize= True)","36525f0c":"sns.countplot(x= 'age_range', hue= 'disease', data= df_eda)\nplt.title('Age Ranges and Cardiovascular Disease')\nplt.xlabel('Age Range')\nplt.legend( ['No disease', 'Disease present'])\nplt.ylabel('Patients')","586497bd":"plt.figure(figsize= (10,10))\npal = ['#1ac6ff', '#e65c00']\n\nsns.scatterplot(x= 'age_range', y= 'weight', hue= 'disease', data= df_eda, palette= pal)\nplt.title('Age Ranges, Weights, and Presence of Cardiovascular Disease', \n          fontweight= 'bold', fontsize= 15)\nplt.xlabel('Age Range')\nplt.ylabel('Weight')\nplt.legend()","e3acfe1f":"# determine which is male\/female\ndf_eda.groupby('gender')['height'].mean()","50bd9990":"df_eda.groupby('gender')['weight'].mean()","0de08029":"df_eda.gender.value_counts(normalize= True)","710f4765":"legend_labels = ['male', 'female']\n\nplt.figure(figsize= (10, 8))\nplt.title('Counts of Males and Females With & Without CV Disease', fontsize= 20)\nsns.countplot(x= 'gender', hue= 'disease', data= df_eda, palette= 'cubehelix')\nplt.xlabel('Absence\/Presence of Cardiovascular Disease')\nplt.legend(legend_labels)\nplt.ylabel('Patients')","906dbc85":"df_eda.groupby('gender')['disease'].mean()","817c0bda":"df_eda.cholesterol.value_counts(normalize= True)","1d721018":"plt.figure(figsize= (8,6))\nsns.countplot(x= 'cholesterol', hue= 'disease', data= df_eda)\nplt.legend( ['No disease', 'Disease present'])\nplt.title('Cholesterol and Disease')\nplt.xlabel('Cholesterol Rank')\nplt.ylabel('# of Patients')","df207d32":"pal = ['#1a75ff', '#cc6699', '#ff9900']\nsns.catplot(x= 'cholesterol', y= 'disease', data= df_eda, kind= 'bar', \n            palette= pal)\nplt.title('Average Risk of Having Disease vs Rank of Cholesterol')\nplt.xlabel('Cholesterol Rank')\nplt.ylabel('Has Disease')","9bf068f2":"df_eda.groupby('cholesterol')['disease'].mean()","8324fd58":"df_eda.active.value_counts(normalize= True)","fe1c2677":"plt.figure(figsize= (12, 10))\nsns.catplot(x='active', y='BMI', col='disease', data=df_eda, kind='boxen', \n            palette='Set1')","511b5c1f":"df_eda.groupby(['disease', 'active'])['BMI'].mean()","0236cdcd":"pal = ['#008ae6' , '#ec1313']\nsns.countplot(x= 'glucose', hue= 'disease', data= df_eda, palette= pal)\nplt.legend( ['No disease', 'Disease present'])","40e62b27":"df_eda.groupby('glucose')['disease'].mean()","73008921":"df_eda.groupby(['alcohol', 'smoke'])['disease'].mean()","196df8ca":"df_eda.groupby(['alcohol', 'smoke'])['disease'].count()","4ebd1ac0":"fig= plt.figure(figsize= (6,6))\nal_smo = df_eda.groupby(['alcohol', 'smoke'])['disease'].mean().plot()","395740a3":"corr = df.corr()\n\nplt.figure(figsize= (10,8))\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\nsns.heatmap(df.corr(), cmap= 'coolwarm', mask= mask, linewidths= 1, annot= True)\nplt.title('Correlation between Features', fontsize= 15)\nplt.show()","eb44343b":"df['cholesterol'] = df['cholesterol'].astype('category')\ndf['glucose'] = df['glucose'].astype('category')","63e5a7c9":"df = pd.get_dummies(df, prefix=['chol', 'gluc'], drop_first=True)","e4cdc647":"y = df['disease']\nX = df.drop('disease', axis= 1)","89ab5d1d":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state= 42)","0214cd7c":"y_test.shape","f61e01f6":"scaler = StandardScaler()","29fb972f":"X_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","94e45e38":"classifiers = {\n    'Logistic Regression' : LogisticRegression(), \n    'Random Forest' : RandomForestClassifier(), \n    'Support Vector Machine' : SVC(), \n    'K-Nearest Neighbors' : KNeighborsClassifier(), \n    'Decision Tree' : DecisionTreeClassifier(), \n    'XGBoost' : XGBClassifier()\n}","54a8defe":"# takes approx 2 mins to run\nresults = pd.DataFrame(columns= ['Train_accuracy', 'Test_accuracy', 'F1_score', \n                                'False_Negative', 'True_Positive'])\n\nfor key, value in classifiers.items():\n    #fit models\n    value.fit(X_train, y_train)\n    train_pred = value.predict(X_train)\n    y_pred = value.predict(X_test)\n    \n    # get accuracy, f1 score\n    train_acc = accuracy_score(y_train, train_pred) * 100\n    test_acc = accuracy_score(y_test, y_pred) * 100\n    f1 = f1_score(y_test, y_pred)\n    \n    #get false neg and true positive\n    cm = confusion_matrix(y_test, y_pred)\n    FN = cm[1][0]\n    TP = cm[1][1]\n    \n    # add measurements to datafram\n    results.loc[key] = [round(train_acc, 2), round(test_acc, 2), \n                        round(f1, 2), round(FN, 0), round(TP, 0)]","daa07fe9":"results.sort_values(by= ['F1_score', 'False_Negative'], ascending= False)","0ade9949":"# function to get results after each model\n\ndef get_results(model, model_name):\n    train_pred = model.predict(X_train)\n    y_pred = model.predict(X_test)\n    \n    # get classification report\n    print('{} Classification Report'.format(model_name))\n    print(classification_report(y_test, y_pred))\n    \n    # get confusion matrix\n    plot_confusion_matrix(model, X_test, y_test, cmap= \"Blues\", values_format= '.5g')\n    plt.grid(False)\n    plt.show()\n    \n    # get accuracy and F1 scores\n    train_acc = accuracy_score(y_train, train_pred) * 100\n    test_acc = accuracy_score(y_test, y_pred) * 100\n    f1 = f1_score(y_test, y_pred)\n    \n    #get false neg and true positive\n    cm = confusion_matrix(y_test, y_pred)\n    FN = cm[1][0]\n    TP = cm[1][1]\n    \n    # save measurements into results df\n    results.loc[model_name] = [round(train_acc, 2), round(test_acc, 2), \n                               round(f1, 2), round(FN, 0), round(TP, 0)]","d3ad8634":"# Instantiate classifier\nxgb = XGBClassifier()","280b25b3":"# create hyperparameter grid\nparam_grid_xgb = {\n    'learning_rate': [0.08],\n    'max_depth': [4],\n    'min_child_weight': [2, 3],\n    'n_estimaters' : [125, 150],\n    'scale_pos_weight' : [1.5, 1.7]\n}\n\n# Instantiate Randomized Search\n# n_jobs : Number of jobs to run in parallel. -1 means using all processors.\nRS_xgb = RandomizedSearchCV(xgb, param_grid_xgb, n_jobs= 3, scoring= 'recall', \n                            random_state=42)","4670784a":"# fit model\n# approx 1 min to run\nRS_xgb.fit(X_train, y_train)","5ec985e2":"RS_xgb.best_params_","de75be13":"# see model results and add to results df\nget_results(RS_xgb, 'RS XGBoost')","0e69f043":"# Instantiate classifier\nRF = RandomForestClassifier()","16153da2":"param_grid_RF = {\n    'n_estimators' : [200],\n    'max_depth' : [100], \n    'min_samples_split' : [5, 8], \n    'min_samples_leaf' : [3],\n    'class_weight' : [{1 : 1.5}, {1 : 1.7}]\n}\n\n# Instantiate Randomized Search\nRS_RF = RandomizedSearchCV(RF, param_grid_RF, n_iter= 20, scoring= 'recall', \n                           random_state= 42)","218443d0":"# fit model\n# approx 2 mins to run\nRS_RF.fit(X_train, y_train)","22e06e58":"RS_RF.best_params_","3548c0ee":"# see model results and add to results df\nget_results(RS_RF, 'RS Random Forest')","86c68749":"# Instantiate classifier\nKNN = KNeighborsClassifier()","ce0e9914":"# set parameter guidelines\nparam_grid_KNN = {\n    'n_neighbors' : [23, 25, 27], \n    'weights' : ['uniform', 'distance']\n}\n\n# Instantiate Grid Search\nGS_KNN = GridSearchCV(KNN, param_grid_KNN, n_jobs= 3, scoring= 'recall')","587b848e":"# fit model\n# approx 1 min to run\nGS_KNN.fit(X_train, y_train)","b797ea1f":"GS_KNN.best_params_","7c7b3930":"# see model results and add to results df\nget_results(GS_KNN, 'GS KNN')","250fa7d6":"# Instantiate classifier\nsvc = SVC(class_weight = {1: 1.5}, random_state= 42)","688447b4":"# fit model\n# approx 2 mins to run\nsvc.fit(X_train, y_train)","683e08f5":"# see model results and add to results df\nget_results(svc, 'Tuned SVM')","295dc6ac":"# Instantiate classifier\nLG = LogisticRegression()","56bc0f43":"# set parameter criteria\nparam_grid_LG = {\n    'penalty': ['l1', 'l2'],\n    'C':[0.05, 0.1, 1], \n    'class_weight' : [None, {1 : 1.5}], \n    'random_state' : [42]\n}\n\n# Instantiate Grid Search\nGS_LG = GridSearchCV(LG, param_grid_LG, scoring= 'recall')","cb120f5a":"# fit model\n# approx 1 sec to run\nGS_LG.fit(X_train, y_train)","5b088a67":"GS_LG.best_params_","a8e2117c":"# see model results and add to results df\nget_results(GS_LG, 'GS Logistic Regression')","bf37866a":"# Instantiate classifier\nDT = DecisionTreeClassifier()","53035223":"# set parameter criteria\nparam_grid_DT = {\n    'max_depth' : [3, 4, 5], \n    'min_samples_split' : [0.01, 0.05, 0.1], \n    'min_samples_leaf' : [5, 7], \n    'class_weight' : [{1 : 1.4}, {1 : 1.6}]\n}\n\n# Instantiate Randomized Search\nRS_DT = RandomizedSearchCV(DT, param_grid_DT, n_jobs= 3, random_state=42)","85259061":"# approx 1 sec to run\nRS_DT.fit(X_train, y_train)","15e9c7dc":"RS_DT.best_params_","f98bd0a7":"plt.figure(figsize= (30,15))\n_ = plot_tree(RS_DT.best_estimator_ , feature_names = X.columns, filled= True) ","9e019f84":"get_results(RS_DT, 'RS Decision Tree')","b41845b1":"# view all results\nresults = results.sort_values(by= ['F1_score', 'False_Negative'], \n                              ascending= False)\nresults","37eef650":"# see results in bar graph\nfig, ax = plt.subplots(figsize=(10,10))\nsns.barplot(x= results['Test_accuracy'], y= results.index, palette = 'twilight')\nplt.vlines(x = 73.22, ymin = -.5, ymax = 11.5, linestyle= 'dashed', \n           color = 'r', label= 'Test Accuracy 73.22')\nplt.vlines(x = 71.32, ymin = -.5, ymax = 11.5, linestyle= 'dashed', \n           color = 'black', label= 'Test Accuracy 71.32')\nplt.title('Test Accuracy of all Models', fontsize= 15)\nplt.ylabel('Model')\nplt.xlabel('Accuracy in %')\nplt.xlim(60, 76)\nax.legend(loc = 'lower right')","24dd1d30":"#ROC curve of best 6 models\nfig = plot_roc_curve(RS_xgb, X_test, y_test, name= 'RS XGBoost')\nplot_roc_curve(RS_RF,X_test, y_test, ax = fig.ax_, name= 'RS Random For')\nplot_roc_curve(svc,X_test, y_test, ax = fig.ax_, name= 'Tuned SVM')\nplot_roc_curve(GS_LG,X_test, y_test, ax = fig.ax_, name= 'GS Logistic Reg')\nplot_roc_curve(GS_KNN,X_test, y_test, ax = fig.ax_, name= 'GS K-NearestN')\nplot_roc_curve(RS_DT,X_test, y_test, ax = fig.ax_, name= 'RS Decision Tree')\n\n# fig.figure.suptitle('ROC Curve Comparison')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')","fedb7987":"# create DataFrame with feature importance to create nice looking graph\n#  using tuned XGBoost model\nFeatImp={'feature_names' : X.columns.values, \n         'feature_importance' : RS_xgb.best_estimator_.feature_importances_}\nFI_df = pd.DataFrame(FeatImp)\nFI_df.sort_values(by= ['feature_importance'], ascending= False, inplace= True)","789edc39":"# plot new DataFrame\nplt.figure(figsize= (10,6))\nsns.barplot(x= FI_df['feature_importance'], y= FI_df['feature_names'], \n            palette= 'Wistia_r')\nplt.title('Feature Importance for Tuned XGBoost', fontsize= '15')\nplt.xlabel('Feature Importance')\nplt.ylabel('Feature')","0a9b3e56":"FI_df","8e4435ce":"### Blood Pressure Category analysis\n\nBlood pressure is the pressure of circulating blood against the walls of blood vessels. Most of this pressure results from the heart pumping blood through the circulatory system.","094d65f9":"\"0\" in both analyses have the higher number. Historically, men are taller than women. We can assume that the \"0\" refers to male and \"1\" refers to females. However, it is improtant to note that the data is imbalanced (almost $1\/3$ to $2\/3$).","c8ae3123":"### Age analysis","1886edcf":"#### Logistic Regression","326b08af":"### One hot encode, Split, and Standardize","6bf37397":"Groups that have a higher prevalence of cardiovascular disease have blood pressure that could be classified as Hypertension Stage 2 or Hypertensive Crisis.\n\nThe other categories, Normal, Elevated, and Hypertension Stage 1 have a higher prevalence of patients without cardiovascular disease, though it is still present.","41e4ebdf":"This graph shows that an individual that claims to drink alcohol and smoke has the lowest risk of being diagnosed with cardiovascular disease. However, because these features are subjective and vague (drink how much, smoke what?), it is unwise to definitively say that drinking and smoking is better for your heart.\n\nIt is also interesting that risk of having cardiovascular disease decreases when looking at drinking OR smoking. Again, this should lead one to consider subjective information to be potentially less accurate.","8ac4efca":"We got decent results without any hyperparameter tuning. We can do that next to see if we can improve the accuracy and decrease the overfitting.","146a0916":"### Hyperparameter Tuning","19336e58":"#### Drink alcohol and smoke","0da7110e":"This visualization shows that patients without cardiovascular disease have similar body mass indexes, regardless of whether they classify themselves as active or not.\n\nThere is a slightly higher BMI for individuals that do have cardiovascular disease, but again, does not really differ if the patient is \/ is not active.","dd420563":"The highest correlation (positive or negative) is between systolic and diastolic. The second highest is between height and gender.\n\nThe features with the highest correlation on disease are systolic, diastolic, age, and cholesterol.","51a3d0e5":"### Data contents:\n\n* 70,000 data points\n* Almost equal counts of patients with and without cardiovascular disease\n* Six continuous features, six categorical features","f7918694":"#### K-Nearest Neighbor","1a89e6b1":"#### XGBoost ","a57f97fc":"### Heatmap","59a0034c":"Looking at height and weight in this manner isn't very helpful.","b6ea20cf":"#### Activity","ade37712":"### Results\nNow, let's take the time to look in depth at some of the best results we achieved.","99c4ec8d":"#### Random Forest","6e5bb741":"A quick boxplot shows that individuals with CVD have, on average, higher body mass indexes than those that do not have CVD.","ed6433a9":"The purpose of this notebook is to find the model that best predicts if a patient has cardiovascular disease.\n\nThis notebook follows the data science process OSEMN (Obtain, Scrub, Explore, Model, iNterpret)","094713cb":"<a><\/a>\n## Obtain data\n\n---\nThe data was obtained from [Kaggle](https:\/\/www.kaggle.com\/sulianova\/cardiovascular-disease-dataset).","3f0a4b6a":"Glucose levels that are \"normal\" do not seem to have any relationship to having the disease or not. In fact, a patient has almost a 50% chance of having cardiovascular disease even with a normal glucose measurement. The risk of being diagnosed with cardiovascular disease increases with increasing levels of glucose.","c4cd9c73":"Here we can see that as a person gets older, their chances of being diagnosed with cardiovascular disease increase. We can also see that weight doesn't really have an impact as much as age does. ","8981a925":"### Test Accuracy","9764df0d":"Having cholesterol levels \"above normal\" and \"well above normal\" increase an individuals chances of being diagnosed with cardiovascular disease. However, having \"normal\" cholesterol levels does not decrease your chances. There are many individuals with normal cholesterol levels and CVD.\n\n76% of patients with cholesterol \"well above normal\" also have cardiovascular disease.","02b9930c":"## Models","b582565b":"Here are the most recent guidelines established by the American Heart Association (as of Feb.2021)\n\n![image.png](attachment:image.png)","8da1b1ca":"## Explore","896dff4a":"### Other quick checks","49e5dd25":"## Interpret","1230fc1a":"This graph shows that even though there is almost double the amount of women in the data, there are even amounts of disease present within each gender.","af646b1b":"Time to remove the incredibly low values for \"weight\"","8a66bbd6":"While most of the tuned models perform similarly, the tuned XGBoost again slightly outperforms the other models.","d5edaa74":"### Import libraries that will be used:","ca61b51d":"The systolic reading is by far the most important feature in predicting cardiovascular disease. Having a cholesterol well above normal, and a person's age are the second and third most important features, respectively.\n\nActivity is the highest subjective feature, followed closely by smoking as the next subjective feature.","41d24776":"# Predicting Cardiovascular Disease\n---\n","70f18aa2":"#### Cholesterol","745c657f":"Now we will check out the odd numbers on ap_hi and ap_lo\n\nA quick note about ap_hi and ap_lo:\nSystolic and diastolic are the readings on blood pressure. ","d2d1f645":"The model that performed the best overall was XGBoost with tuned hyperparameters. \n\nDue to it's highest false negative and true positive rates as well as the highest F1 score. It may not have been the most accurate model that was made, but was fairly close (by less than 2%). This model also had the highest AUC (Area Under the Curve) score showing us it was the most accurate.\n\nFrom the model, we can conclude that having a low blood pressure, low cholesterol, being young, and being active are the best ways to avoid cardiovascular disease.","a69aeaec":"#### Support Vector Machines","2540b704":"Since we are looking at medical data, missing a diagnosis of cardiovascular disease could be deadly. But we had to weigh that against misdiagnosing too many people that don't have the disease and telling them to get a bunch of expensive tests. We also didn't want to hurt the accuracy of the prediction, so we walked a fine line. \n\nThat is why looking at F1 score (conveys the balance between the precision and the recall) and false negatives are so important to this prediction.\n\nWe can see that the tuned XGBoost was able to predict the most True Positive and fewest false negatives. It has the highest F1 score and testing and training accuracy are very similar suggesting no overfitting.\n\nThe tuned decision tree had the most improvement and train\/test accuracies are almost equal, but it is one of the worst tuned models with regards to false negatives (misclassified 700 more than tuned XGBoost)","b118a11f":"Guidelines for BMI Categories\n\n![image.png](attachment:image.png)","18430b13":"### BMI analysis\n\nBody mass index (BMI) is a measure of body fat based on height and weight that applies to adult men and women. BMI is defined as the body mass divided by the square of the body height, and is universally expressed in units of kg\/m\u00b2, resulting from mass in kilograms and height in meters.","66320554":"Data cleaning removed 1,488 data points from our original 70,000 and we still have an even number of patients with and without cardiovascular disease (CVD).","bfc3370d":"### Data feature descriptions:\n1. Age | Objective Feature | age | int (days)\n2. Height | Objective Feature | height | int (cm) |\n3. Weight | Objective Feature | weight | float (kg) |\n4. Gender | Objective Feature | gender | categorical code |\n5. Systolic blood pressure | Examination Feature | ap_hi | int |\n6. Diastolic blood pressure | Examination Feature | ap_lo | int |\n7. Cholesterol | Examination Feature | cholesterol | 1: normal, 2: above normal, 3: well above normal |\n8. Glucose | Examination Feature | gluc | 1: normal, 2: above normal, 3: well above normal |\n9. Smoking | Subjective Feature | smoke | binary |\n10. Alcohol intake | Subjective Feature | alco | binary |\n11. Physical activity | Subjective Feature | active | binary |\n12. Presence or absence of cardiovascular disease | Target Variable | cardio | binary |","be13b275":"The highest accuracy score is at 73.22% by the untuned support vector machine model. The tuned XGBoost model's test accuracy is 71.32% - which happens to be the same as the tuned logistic regression.","d602c60e":"## Scrub\n \nData cleaning","1c47df23":"### Building Models","d684c259":"#### Decision Tree","12980e86":"### Gender analysis","6e080e03":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Import-libraries-that-will-be-used:\" data-toc-modified-id=\"Import-libraries-that-will-be-used:-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Import libraries that will be used:<\/a><\/span><\/li><li><span><a href=\"#Obtain-data\" data-toc-modified-id=\"Obtain-data-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Obtain data<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Data-contents:\" data-toc-modified-id=\"Data-contents:-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;<\/span>Data contents:<\/a><\/span><\/li><li><span><a href=\"#Data-feature-descriptions:\" data-toc-modified-id=\"Data-feature-descriptions:-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;<\/span>Data feature descriptions:<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Scrub\" data-toc-modified-id=\"Scrub-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Scrub<\/a><\/span><\/li><li><span><a href=\"#Explore\" data-toc-modified-id=\"Explore-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Explore<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#BMI-analysis\" data-toc-modified-id=\"BMI-analysis-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>BMI analysis<\/a><\/span><\/li><li><span><a href=\"#Blood-Pressure-Category-analysis\" data-toc-modified-id=\"Blood-Pressure-Category-analysis-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Blood Pressure Category analysis<\/a><\/span><\/li><li><span><a href=\"#Age-analysis\" data-toc-modified-id=\"Age-analysis-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Age analysis<\/a><\/span><\/li><li><span><a href=\"#Gender-analysis\" data-toc-modified-id=\"Gender-analysis-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>Gender analysis<\/a><\/span><\/li><li><span><a href=\"#Other-quick-checks\" data-toc-modified-id=\"Other-quick-checks-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;<\/span>Other quick checks<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Cholesterol\" data-toc-modified-id=\"Cholesterol-4.5.1\"><span class=\"toc-item-num\">4.5.1&nbsp;&nbsp;<\/span>Cholesterol<\/a><\/span><\/li><li><span><a href=\"#Activity\" data-toc-modified-id=\"Activity-4.5.2\"><span class=\"toc-item-num\">4.5.2&nbsp;&nbsp;<\/span>Activity<\/a><\/span><\/li><li><span><a href=\"#Glucose\" data-toc-modified-id=\"Glucose-4.5.3\"><span class=\"toc-item-num\">4.5.3&nbsp;&nbsp;<\/span>Glucose<\/a><\/span><\/li><li><span><a href=\"#Drink-alcohol-and-smoke\" data-toc-modified-id=\"Drink-alcohol-and-smoke-4.5.4\"><span class=\"toc-item-num\">4.5.4&nbsp;&nbsp;<\/span>Drink alcohol and smoke<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Heatmap\" data-toc-modified-id=\"Heatmap-4.6\"><span class=\"toc-item-num\">4.6&nbsp;&nbsp;<\/span>Heatmap<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Models\" data-toc-modified-id=\"Models-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Models<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#One-hot-encode,-Split,-and-Standardize\" data-toc-modified-id=\"One-hot-encode,-Split,-and-Standardize-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;<\/span>One hot encode, Split, and Standardize<\/a><\/span><\/li><li><span><a href=\"#Building-Models\" data-toc-modified-id=\"Building-Models-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;<\/span>Building Models<\/a><\/span><\/li><li><span><a href=\"#Hyperparameter-Tuning\" data-toc-modified-id=\"Hyperparameter-Tuning-5.3\"><span class=\"toc-item-num\">5.3&nbsp;&nbsp;<\/span>Hyperparameter Tuning<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#XGBoost\" data-toc-modified-id=\"XGBoost-5.3.1\"><span class=\"toc-item-num\">5.3.1&nbsp;&nbsp;<\/span>XGBoost<\/a><\/span><\/li><li><span><a href=\"#Random-Forest\" data-toc-modified-id=\"Random-Forest-5.3.2\"><span class=\"toc-item-num\">5.3.2&nbsp;&nbsp;<\/span>Random Forest<\/a><\/span><\/li><li><span><a href=\"#K-Nearest-Neighbor\" data-toc-modified-id=\"K-Nearest-Neighbor-5.3.3\"><span class=\"toc-item-num\">5.3.3&nbsp;&nbsp;<\/span>K-Nearest Neighbor<\/a><\/span><\/li><li><span><a href=\"#Support-Vector-Machines\" data-toc-modified-id=\"Support-Vector-Machines-5.3.4\"><span class=\"toc-item-num\">5.3.4&nbsp;&nbsp;<\/span>Support Vector Machines<\/a><\/span><\/li><li><span><a href=\"#Logistic-Regression\" data-toc-modified-id=\"Logistic-Regression-5.3.5\"><span class=\"toc-item-num\">5.3.5&nbsp;&nbsp;<\/span>Logistic Regression<\/a><\/span><\/li><li><span><a href=\"#Decision-Tree\" data-toc-modified-id=\"Decision-Tree-5.3.6\"><span class=\"toc-item-num\">5.3.6&nbsp;&nbsp;<\/span>Decision Tree<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#Interpret\" data-toc-modified-id=\"Interpret-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Interpret<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Results\" data-toc-modified-id=\"Results-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;<\/span>Results<\/a><\/span><\/li><li><span><a href=\"#Test-Accuracy\" data-toc-modified-id=\"Test-Accuracy-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;<\/span>Test Accuracy<\/a><\/span><\/li><li><span><a href=\"#ROC-Curve\" data-toc-modified-id=\"ROC-Curve-6.3\"><span class=\"toc-item-num\">6.3&nbsp;&nbsp;<\/span>ROC Curve<\/a><\/span><\/li><li><span><a href=\"#Feature-Importance\" data-toc-modified-id=\"Feature-Importance-6.4\"><span class=\"toc-item-num\">6.4&nbsp;&nbsp;<\/span>Feature Importance<\/a><\/span><\/li><li><span><a href=\"#Conclusion\" data-toc-modified-id=\"Conclusion-6.5\"><span class=\"toc-item-num\">6.5&nbsp;&nbsp;<\/span>Conclusion<\/a><\/span><\/li><\/ul><\/li><\/ul><\/div>","17a66557":"### Feature Importance\n\nLet's take a look at the tuned XGBoost and see which features were the most important to our model.","0f34e394":"### ROC Curve \n\nA receiver operating characteristic curve, or ROC curve, is a graphical plot that illustrates the diagnostic ability of a binary classifier system as its discrimination threshold is varied. ","9d2f2488":"Our data contains adults from ages 29 - 65 years old.\n\nSome of the heights seemed suspicious so we will check them out.","d60f1cd1":"### Conclusion","f7758d8c":"#### Glucose"}}