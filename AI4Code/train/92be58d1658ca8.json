{"cell_type":{"dfa7079e":"code","57a1ae6c":"code","d1053853":"code","3ef810d7":"code","90e15515":"code","8b87a16a":"code","24455c19":"code","f8c8d505":"code","228509f1":"code","d18429a3":"code","a3f8d51e":"code","452cd66d":"code","56a842a0":"code","f85496d5":"code","f411370d":"code","442e594b":"code","6ec076a9":"code","710129b5":"code","c2598652":"markdown","2070f60c":"markdown"},"source":{"dfa7079e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime\nimport ast\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","57a1ae6c":"df_oakland_raw = pd.read_csv('..\/input\/service-requests-received-by-the-oakland-call-center.csv')\ndf_oakland = df_oakland_raw.copy()","d1053853":"df_oakland.head(10)","3ef810d7":"df_oakland.dtypes","90e15515":"# Parse dates\ndf_oakland['DATETIMEINIT'] = pd.to_datetime(df_oakland_raw['DATETIMEINIT'])\ndf_oakland['DATETIMECLOSED'] = pd.to_datetime(df_oakland_raw['DATETIMECLOSED'])","8b87a16a":"# Replace instances of  STATUS  \"Cancel\" with CANCEL\ndf_oakland['STATUS'].replace('Cancel', 'CANCEL', inplace=True)","24455c19":"# Clean up district: replace lower case with upper, and a 4 with CCD4\ndf_oakland['COUNCILDISTRICT'].replace('4', 'CCD4', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd1', 'CCD1', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd2', 'CCD2', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd3', 'CCD3', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd4', 'CCD4', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd5', 'CCD5', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd6', 'CCD6', inplace=True)\ndf_oakland['COUNCILDISTRICT'].replace('ccd7', 'CCD7', inplace=True)\n","f8c8d505":"def get_coordinate(row, col_name):\n    \"\"\" extracts given col_name from dictionary in a try, except block (some rows might not have lat\/long)\"\"\"\n    try:\n        coordinate = row[col_name]\n    except KeyError:\n        coordinate = np.nan\n    return coordinate","228509f1":"# Create some columns\n\n# Latitude and longitude\ndf_oakland['address'] = df_oakland_raw['REQADDRESS'].map(ast.literal_eval)\ndf_oakland['LATITUDE'] = df_oakland['address'].apply(get_coordinate, args=('latitude', ))\ndf_oakland['LONGITUDE'] = df_oakland['address'].apply(get_coordinate, args=('longitude', ))\ndf_oakland.drop('address', axis=1, inplace=True)\n\n# time open (duration, in days)\ndf_oakland['DURATION'] = df_oakland['DATETIMECLOSED'] - df_oakland['DATETIMEINIT']\ndf_oakland['DURATION'] = df_oakland['DURATION'].dt.days\n\n# If still open, calculate DURATION up to current date \ntoday = pd.Timestamp.today()\ndf_oakland.loc[df_oakland['STATUS'] == 'OPEN', 'DURATION'] = (today - df_oakland['DATETIMEINIT']).dt.days\n\n# Date column, no time\ndf_oakland['DATEINIT'] = df_oakland['DATETIMEINIT'].dt.date","d18429a3":"# plot number of issues open per day\ndef plot_bar(df, days=None, title='', yaxis='', xaxis=''):\n    \"\"\"\n    Plots columns as stacked bar chart, assumes dates in index\n    \"\"\"\n    \n    # filter df to number of given days\n    df = df.sort_index()\n    if days:\n        cutoff = df.index.max()-datetime.timedelta(days=days)\n        df = df.loc[df.index > cutoff]\n    data = []\n    for col in df.columns:\n        trace = go.Bar(\n                    x = df.index,\n                    y = df[col],\n                    name=col\n                    )\n        data.append(trace)\n\n    layout = go.Layout(\n                barmode = 'stack',\n                title=title,\n                yaxis=dict(\n                title=yaxis,\n                )\n                )\n\n    fig = go.Figure(data=data, layout=layout)\n    plotly.offline.iplot(fig)\n    \n\ndef plot_issues(df, col, days=None, title='', yaxis='', xaxis=''):\n    \"\"\"group df by a column and plot stacked bar chart\"\"\"\n    df_group = df.groupby(['DATEINIT', col])[col].count().unstack(col)\n    plot_bar(df_group, days=days, title=title, yaxis=yaxis, xaxis='')","a3f8d51e":"# By status\n#sns.countplot(data=df_oakland, y='STATUS').set_title('Number of issues by status')","452cd66d":"# Plot issues opened in last month by category\nplot_issues(df_oakland, 'REQCATEGORY', days=30, title='Daily issues opened over the last 30 days, by category')\n# What happened on feb 26? mass dump of tickets?","56a842a0":"# Plot issues by district\nplot_issues(df_oakland, 'COUNCILDISTRICT', days=30, title='Daily issues opened over the last 30 days, by district')","f85496d5":"# Open issues by district\nsns.countplot(y=df_oakland.loc[df_oakland['STATUS'] == 'OPEN','COUNCILDISTRICT']).set_title('Currently open issues by district')","f411370d":"def plot_duration(df, category, months=6, title='', h=True):\n    today = pd.Timestamp.today()\n    date_cutoff = today - pd.DateOffset(months=months)\n    duration_mask = df.loc[df['DATETIMEINIT'] >= date_cutoff]\n    \n    if h:\n        chart = duration_mask.groupby(category)['DURATION'].mean().sort_values().plot.barh(color='#112F41')\n        chart.set_xlabel('days')\n    else:\n        chart = duration_mask.groupby(category)['DURATION'].mean().sort_values(ascending=False).plot.bar(color='#112F41')\n        chart.set_ylabel('days')\n    chart.set_title(title)\n    return chart ","442e594b":"category = 'COUNCILDISTRICT'\nmonths = 6\nplot_duration(df_oakland, category, months=months, title=f'Average duration of issues opened over the last {months} months, by {category}', h=True)","6ec076a9":"category = 'REQCATEGORY'\nmonths = 6\nplot_duration(df_oakland, category, months=months, title=f'Average duration of issues opened over the last {months} months, by {category}', h=False)","710129b5":"# only use last 6 months\ntoday = pd.Timestamp.today()\nmonths = 3\ndate_cutoff = today - pd.DateOffset(months=months)\nduration_mask = df_oakland.loc[df_oakland['DATETIMEINIT'] >= date_cutoff]\ndf = duration_mask.sort_values('COUNCILDISTRICT')\n\n\ndata = []\nfor district in df['COUNCILDISTRICT'].unique():\n    trace = go.Box(\n        y=df.loc[df['COUNCILDISTRICT'] == district, 'DURATION'],\n        boxpoints='suspectedoutliers',\n        name=district,\n    )\n    data.append(trace)\n    \nlayout = go.Layout(\n    title='Distribution of the duration by district, for issues open in the last 3 months',\n    yaxis = dict(\n        title='days'\n        )\n    )\n\nfig = go.Figure(data=data, layout=layout)\n\nplotly.offline.iplot(fig)\n#df.loc[df['COUNCILDISTRICT'] == 'CCD4'].shape","c2598652":"## Duration analysis\nHow long issues take (in days) to be resolved","2070f60c":"## Introduction\n\nThis dataset shows the service requests to the city of Oakland, CA. This dashboard will monitor daily requests, and the city's performance in resolving these requests by district and topic"}}