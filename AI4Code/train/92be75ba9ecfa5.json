{"cell_type":{"5f278cbe":"code","612a63cb":"code","7f79a373":"code","1435deff":"code","d9b403b8":"code","75138793":"code","f4745ed8":"code","e5feddf9":"code","e3730c2b":"code","575a3a41":"code","7d4a9c5f":"code","194a6336":"code","bcf65313":"code","743cf92b":"code","d3deeab3":"code","3ff8ef4b":"code","0643e97a":"code","14edec81":"code","d6cc776f":"code","d2032d96":"code","11ac22f9":"code","585f4db9":"code","df291b81":"code","1b9ee3b0":"code","44866bf3":"code","4119027f":"code","67656951":"code","a0567330":"code","94d69225":"code","1d4305fb":"code","42fd68a9":"markdown","00502a3b":"markdown","ecd0fa17":"markdown","a8b5e827":"markdown","a5f9cc20":"markdown","734e3ab2":"markdown","b5bc07d8":"markdown","d509bb1e":"markdown","1a297264":"markdown","0ffdeb43":"markdown","15b794c3":"markdown","7008eaa4":"markdown","2a1c2201":"markdown","e302f9c8":"markdown","cb3dcbab":"markdown","4f0cd78f":"markdown","1aa44fed":"markdown"},"source":{"5f278cbe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport json\nfrom pprint import pprint\nprint(os.listdir(\"..\/input\"))\n# Any results you write to the current directory are saved as output.","612a63cb":"data = []\nwith open('..\/input\/tail_review_100000.json') as f:\n    for line in f:\n        data.append(json.loads(line))\npprint(data[0])","7f79a373":"yelp = pd.DataFrame(data,columns= [\"business_id\", \"date\", \"review_id\", \"stars\", \"text\", \"type\", \"user_id\", \"cool\", \"useful\", \"funny\"])\nyelp.head()","1435deff":"yelp.info()","d9b403b8":"yelp.describe()","75138793":"# add a new column.\nyelp['text length']=yelp[\"text\"].apply(len)","f4745ed8":"yelp.tail()","e5feddf9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('white')\n%matplotlib inline","e3730c2b":"# Using FacetGrid from the seaborn library to create a grid of 5 histograms of text length based off of the star ratings.\ng = sns.FacetGrid(yelp,col='stars')\ng.map(plt.hist,'text length')","575a3a41":"# Creating a boxplot of text length for each star category.\nsns.boxplot(x='stars',y='text length',data=yelp,palette='rainbow')","7d4a9c5f":"# Creatinga countplot of the number of occurrences for each type of star rating.\nsns.countplot(x='stars', data=yelp, palette='rainbow')","194a6336":"# groupby to get the mean values of the numerical columns\n\nstars = yelp.groupby('stars').mean().drop(\"type\", axis=1)\nstars","bcf65313":"# corr() method on that groupby dataframe to produce this dataframe\n\nstars.corr()","743cf92b":"# heatmap based off that .corr() dataframe\n\nsns.heatmap(stars.corr(), cmap=\"coolwarm\", annot=True)","d3deeab3":"yelp_class = yelp[(yelp.stars==1) | (yelp.stars==5)]\nX = yelp_class['text']\ny = yelp_class['stars']","3ff8ef4b":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()","0643e97a":"X = cv.fit_transform(X)","14edec81":"from sklearn.model_selection import train_test_split","d6cc776f":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)","d2032d96":"from sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()","11ac22f9":"nb.fit(X_train,y_train)","585f4db9":"predictions = nb.predict(X_test)","df291b81":"from sklearn.metrics import confusion_matrix,classification_report","1b9ee3b0":"print(confusion_matrix(y_test,predictions))\nprint(\"\\n\")\nprint(classification_report(y_test,predictions))","44866bf3":"from sklearn.feature_extraction.text import  TfidfTransformer\nfrom sklearn.pipeline import Pipeline","4119027f":"# Now create a pipeline with the CountVectorizer(), TfidfTransformer(),MultinomialNB()\npipeline = Pipeline([\n    ('bow', CountVectorizer()),  # strings to token integer counts\n    ('tfidf', TfidfTransformer()),  # integer counts to weighted TF-IDF scores\n    ('classifier', MultinomialNB()),  # train on TF-IDF vectors w\/ Naive Bayes classifier\n])","67656951":"X = yelp_class['text']\ny = yelp_class['stars']\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3,random_state=101)","a0567330":"pipeline.fit(X_train,y_train)","94d69225":"predictions = pipeline.predict(X_test)","1d4305fb":"print(confusion_matrix(y_test,predictions))\nprint(classification_report(y_test,predictions))","42fd68a9":"This pipeline has all your pre-process steps in it already, meaning we'll need to re-split the original data \n\n**Train Test Split**\n\nRedo the train test split on the yelp_class object.","00502a3b":"**Import CountVectorizer and create a CountVectorizer object**.","ecd0fa17":"### pipeline steps:\n* CountVectorizer(), \n* TfidfTransformer(),\n* MultinomialNB()","a8b5e827":"## Natural Language Processing Project\u00b6\nWelcome to the NLP Project In this NLP project I will be attempting to classify Yelp Reviews into 1 star or 5 star categories based off the text content in the reviews. \n\nI will use the Yelp Review Data Set from Kaggle.\n\nEach observation in this dataset is a review of a particular business by a particular user.\n\nThe \"stars\" column is the number of stars (1 through 5) assigned by the reviewer to the business. (Higher stars is better.) In other words, it is the rating of the business by the person who wrote the review.\n\nThe \"cool\" column is the number of \"cool\" votes this review received from other Yelp users.\n\nAll reviews start with 0 \"cool\" votes, and there is no limit to how many \"cool\" votes a review can receive. In other words, it is a rating of the review itself, not a rating of the business.\n\nThe \"useful\" and \"funny\" columns are similar to the \"cool\" column.\n\nLet's get started!","a5f9cc20":"**Now fit the pipeline to the training data. Remember you can't use the same training data as last time because that data has already been vectorized. We need to pass in just the text and labels**","734e3ab2":"### Predictions and Evaluation\n** Now use the pipeline to predict from the X_test and create a classification report and confusion matrix.**","b5bc07d8":"**confusion matrix and classification report using these predictions and y_test **","d509bb1e":"### Predictions and Evaluations\n\nTime to see how our model did!\nUse the predict method off of nb to predict labels from X_test.","1a297264":"### Train Test Split\n\nsplit data into training and testing data.\n\n** Use train_test_split to split up the data into X_train, X_test, y_train, y_test. Use test_size=0.3 and random_state=101 **","0ffdeb43":"## EDA\nLet's explore the data\n\nImports\nImport the data visualization libraries.","15b794c3":"## NLP Classification Task\nTo make things a little easier, only grab reviews that were either 1 star or 5 stars.\n\nCreate a dataframe called yelp_class that contains the columns of yelp dataframe but for only the 1 or 5 star reviews.","7008eaa4":"**Fit nb using the training data.**","2a1c2201":"Looks like Tf-Idf actually made things a little diffence but it is not a big deal.\nThat is it for all this project. \n\nBye..","e302f9c8":"### Training a Model\n\nTime to train a model!\n\n** Import MultinomialNB and create an instance of the estimator and call is nb **","cb3dcbab":"## Imports\n\n*As usual, importing necessary libraries*","4f0cd78f":"## Using Text Processing","1aa44fed":"## The Data\nRead the yelp data from the json file and set it as a dataframe called yelp."}}