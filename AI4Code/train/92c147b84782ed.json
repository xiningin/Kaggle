{"cell_type":{"819e67d6":"code","d2d856eb":"code","abdb269f":"code","0259cd49":"code","d49675f5":"code","ae5ae35e":"code","c876b902":"code","dcd40a05":"code","377408e7":"code","8f3afb5d":"code","9905e427":"code","0011191b":"code","45cc146a":"code","8322fca3":"code","af23c5c4":"code","01542fc8":"code","be463603":"code","e26ad634":"code","deaed817":"code","cb37da97":"code","200a27fb":"code","e99d021f":"code","897c9084":"code","f6d4dbea":"code","1b820258":"markdown","cc34c604":"markdown","bf2b2b7c":"markdown","822dd0f5":"markdown","f3ccf186":"markdown","26c49cb7":"markdown","6c06d187":"markdown"},"source":{"819e67d6":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nimport seaborn  as sns","d2d856eb":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","abdb269f":"df_train.head(3)","0259cd49":"features_length = len(df_train.columns)\nprint(features_length)","d49675f5":"final_dataset = pd.get_dummies(df_train,drop_first= True)\nfinal_dataset=final_dataset.dropna()","ae5ae35e":"X_train = final_dataset.drop(columns = ['Id','SalePrice'])\ny = final_dataset['SalePrice']","c876b902":"print(X_train.shape)\nprint(y.shape)","dcd40a05":"t=  [i for i in X_train.columns]\nprint(t)","377408e7":"from sklearn.preprocessing import RobustScaler\nrb = RobustScaler()\nX = rb.fit_transform(X_train)","8f3afb5d":"X_scaled =pd.DataFrame(data = X,columns=['MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'MSZoning_FV', 'MSZoning_RH', 'MSZoning_RL', 'MSZoning_RM', 'Street_Pave', 'Alley_Pave', 'LotShape_IR2', 'LotShape_IR3', 'LotShape_Reg', 'LandContour_HLS', 'LandContour_Low', 'LandContour_Lvl', 'Utilities_NoSeWa', 'LotConfig_CulDSac', 'LotConfig_FR2', 'LotConfig_FR3', 'LotConfig_Inside', 'LandSlope_Mod', 'LandSlope_Sev', 'Neighborhood_Blueste', 'Neighborhood_BrDale', 'Neighborhood_BrkSide', 'Neighborhood_ClearCr', 'Neighborhood_CollgCr', 'Neighborhood_Crawfor', 'Neighborhood_Edwards', 'Neighborhood_Gilbert', 'Neighborhood_IDOTRR', 'Neighborhood_MeadowV', 'Neighborhood_Mitchel', 'Neighborhood_NAmes', 'Neighborhood_NPkVill', 'Neighborhood_NWAmes', 'Neighborhood_NoRidge', 'Neighborhood_NridgHt', 'Neighborhood_OldTown', 'Neighborhood_SWISU', 'Neighborhood_Sawyer', 'Neighborhood_SawyerW', 'Neighborhood_Somerst', 'Neighborhood_StoneBr', 'Neighborhood_Timber', 'Neighborhood_Veenker', 'Condition1_Feedr', 'Condition1_Norm', 'Condition1_PosA', 'Condition1_PosN', 'Condition1_RRAe', 'Condition1_RRAn', 'Condition1_RRNe', 'Condition1_RRNn', 'Condition2_Feedr', 'Condition2_Norm', 'Condition2_PosA', 'Condition2_PosN', 'Condition2_RRAe', 'Condition2_RRAn', 'Condition2_RRNn', 'BldgType_2fmCon', 'BldgType_Duplex', 'BldgType_Twnhs', 'BldgType_TwnhsE', 'HouseStyle_1.5Unf', 'HouseStyle_1Story', 'HouseStyle_2.5Fin', 'HouseStyle_2.5Unf', 'HouseStyle_2Story', 'HouseStyle_SFoyer', 'HouseStyle_SLvl', 'RoofStyle_Gable', 'RoofStyle_Gambrel', 'RoofStyle_Hip', 'RoofStyle_Mansard', 'RoofStyle_Shed', 'RoofMatl_CompShg', 'RoofMatl_Membran', 'RoofMatl_Metal', 'RoofMatl_Roll', 'RoofMatl_Tar&Grv', 'RoofMatl_WdShake', 'RoofMatl_WdShngl', 'Exterior1st_AsphShn', 'Exterior1st_BrkComm', 'Exterior1st_BrkFace', 'Exterior1st_CBlock', 'Exterior1st_CemntBd', 'Exterior1st_HdBoard', 'Exterior1st_ImStucc', 'Exterior1st_MetalSd', 'Exterior1st_Plywood', 'Exterior1st_Stone', 'Exterior1st_Stucco', 'Exterior1st_VinylSd', 'Exterior1st_Wd Sdng', 'Exterior1st_WdShing', 'Exterior2nd_AsphShn', 'Exterior2nd_Brk Cmn', 'Exterior2nd_BrkFace', 'Exterior2nd_CBlock', 'Exterior2nd_CmentBd', 'Exterior2nd_HdBoard', 'Exterior2nd_ImStucc', 'Exterior2nd_MetalSd', 'Exterior2nd_Other', 'Exterior2nd_Plywood', 'Exterior2nd_Stone', 'Exterior2nd_Stucco', 'Exterior2nd_VinylSd', 'Exterior2nd_Wd Sdng', 'Exterior2nd_Wd Shng', 'MasVnrType_BrkFace', 'MasVnrType_None', 'MasVnrType_Stone', 'ExterQual_Fa', 'ExterQual_Gd', 'ExterQual_TA', 'ExterCond_Fa', 'ExterCond_Gd', 'ExterCond_Po', 'ExterCond_TA', 'Foundation_CBlock', 'Foundation_PConc', 'Foundation_Slab', 'Foundation_Stone', 'Foundation_Wood', 'BsmtQual_Fa', 'BsmtQual_Gd', 'BsmtQual_TA', 'BsmtCond_Gd', 'BsmtCond_Po', 'BsmtCond_TA', 'BsmtExposure_Gd', 'BsmtExposure_Mn', 'BsmtExposure_No', 'BsmtFinType1_BLQ', 'BsmtFinType1_GLQ', 'BsmtFinType1_LwQ', 'BsmtFinType1_Rec', 'BsmtFinType1_Unf', 'BsmtFinType2_BLQ', 'BsmtFinType2_GLQ', 'BsmtFinType2_LwQ', 'BsmtFinType2_Rec', 'BsmtFinType2_Unf', 'Heating_GasA', 'Heating_GasW', 'Heating_Grav', 'Heating_OthW', 'Heating_Wall', 'HeatingQC_Fa', 'HeatingQC_Gd', 'HeatingQC_Po', 'HeatingQC_TA', 'CentralAir_Y', 'Electrical_FuseF', 'Electrical_FuseP', 'Electrical_Mix', 'Electrical_SBrkr', 'KitchenQual_Fa', 'KitchenQual_Gd', 'KitchenQual_TA', 'Functional_Maj2', 'Functional_Min1', 'Functional_Min2', 'Functional_Mod', 'Functional_Sev', 'Functional_Typ', 'FireplaceQu_Fa', 'FireplaceQu_Gd', 'FireplaceQu_Po', 'FireplaceQu_TA', 'GarageType_Attchd', 'GarageType_Basment', 'GarageType_BuiltIn', 'GarageType_CarPort', 'GarageType_Detchd', 'GarageFinish_RFn', 'GarageFinish_Unf', 'GarageQual_Fa', 'GarageQual_Gd', 'GarageQual_Po', 'GarageQual_TA', 'GarageCond_Fa', 'GarageCond_Gd', 'GarageCond_Po', 'GarageCond_TA', 'PavedDrive_P', 'PavedDrive_Y', 'PoolQC_Fa', 'PoolQC_Gd', 'Fence_GdWo', 'Fence_MnPrv', 'Fence_MnWw', 'MiscFeature_Othr', 'MiscFeature_Shed', 'MiscFeature_TenC', 'SaleType_CWD', 'SaleType_Con', 'SaleType_ConLD', 'SaleType_ConLI', 'SaleType_ConLw', 'SaleType_New', 'SaleType_Oth', 'SaleType_WD', 'SaleCondition_AdjLand', 'SaleCondition_Alloca', 'SaleCondition_Family', 'SaleCondition_Normal', 'SaleCondition_Partial'])","9905e427":"X_scaled.head(3)","0011191b":"print(X_scaled.shape)\nprint(y.shape)","45cc146a":"pca = PCA(n_components=len(X_scaled.columns), svd_solver='auto')\npca.fit(X)\nplt.figure(figsize=(15,8))\nplt.plot([*range(len(X_scaled.columns))], pca.explained_variance_ratio_)\nplt.xlim(0,10)\nplt.title(\"Eigen Vector\")\nplt.show()","8322fca3":"print('How much n_components accommodate the data : ', sum(pca.explained_variance_ratio_[:7]))","af23c5c4":"pca = PCA(n_components=7, svd_solver='auto')\nX_scaled_train = pca.fit_transform(X_scaled)\n\n","01542fc8":"print(X_scaled_train.shape)\nprint(y.shape)","be463603":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_scaled_train,y,test_size =0.2)","e26ad634":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()","deaed817":"#HyperParameters\n\nn_estimators = [int(i) for i in np.linspace(start = 100 ,stop= 1200, num =12)]\nmax_features = ['auto','sqrt']\nmax_depth = [int(i) for i in np.linspace(5,30,num =6) ]\nmin_samples_split = [2,3,10,15,100]\nmin_samples_leaf =[1,2,5,10]","cb37da97":"from sklearn.model_selection import RandomizedSearchCV\nrandom_grid = {'n_estimators': n_estimators,\n              'max_features': max_features,\n              'max_depth': max_depth,\n              'min_samples_split': min_samples_split,\n              'min_samples_leaf': min_samples_leaf}\nprint(random_grid)","200a27fb":"rf_random = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,\n                              scoring='neg_mean_squared_error',n_iter =10,cv =5,random_state=42,n_jobs =1,verbose =2)","e99d021f":"rf_random.fit(X_train,y_train)","897c9084":"predictions = rf_random.predict(X_test)","f6d4dbea":"import seaborn as sns\nsns.scatterplot(y_test,predictions)","1b820258":"#### PCA\n\nPCA is one of the way to decrease column's length <br>\nThen, How we can find best n_components? <br>\nI am using Eigen Vector <br>\nIt means that, how much n_component accommodate the data. ","cc34c604":"TO SEE ALL FEATURES IN FORM OF A LIST, THIS WILL HELP US TO MAKE OUR DATAFRAME AFTER SCALING PROCESS, SINCE 200+ FEATURES WILL BE HECTIC TASK TO TYPE , HENCE WE WILL COPY THE WHOLE LIST","bf2b2b7c":"To see how many columns do we got","822dd0f5":"# Using PCA To Reduce dimensions\n\n","f3ccf186":"#### Load Dataset and Data Preprocessing\n\n","26c49cb7":"Look this Eigen Vector chart. If you select 7, You can take the 99.9% data, it can be easily seen that out of 245 features , only 7 have been taken and still we are able to get 99.9% of data","6c06d187":"#### Importing Libaries"}}