{"cell_type":{"3d6cbc00":"code","bafb1120":"code","623f52ac":"code","8f172a25":"code","448217f5":"code","ed51d459":"code","af27976b":"code","f196276d":"code","06677ae1":"code","9e5e8a28":"code","3501c0f1":"code","a85ca566":"code","ac8759f1":"code","751be8d2":"code","5d91d4f5":"code","8f7eb7dc":"code","24a8b46e":"code","d49e1a5d":"code","b51b7224":"code","7f459b0b":"code","28648e90":"code","66091085":"code","440d9e20":"code","5644ffec":"code","0f34dd8f":"code","328345db":"code","958d2b2c":"code","72395dcf":"markdown","d19033d2":"markdown","a4668d57":"markdown","b84d0c3e":"markdown","e89a6747":"markdown","11e87958":"markdown","12f5bd14":"markdown","f37cd673":"markdown","baba54b4":"markdown","37e894d0":"markdown","9176e3e8":"markdown","ff71f0a6":"markdown","453d76b4":"markdown","58dad064":"markdown","8b3747c0":"markdown","5d21e650":"markdown","2bf7f5f9":"markdown","d355c51c":"markdown","0a850011":"markdown","6a23389e":"markdown","31262748":"markdown","e2723659":"markdown","36827fe6":"markdown"},"source":{"3d6cbc00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport tensorflow as tf\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns;\nfrom tensorflow import  keras\nplt.style.use(\"seaborn-colorblind\")\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bafb1120":"# Load the Tensorboard notebook extension\n%reload_ext tensorboard\n\n%tensorboard  --logdir logs\n\ntensorboard_callback = tf.keras.callbacks.TensorBoard(\"logs\")","623f52ac":"used_features = ['property_type','room_type','bathrooms','bedrooms','beds','bed_type','accommodates','host_total_listings_count'\n                ,'number_of_reviews','review_scores_value','neighbourhood_cleansed','cleaning_fee','minimum_nights','security_deposit','host_is_superhost',\n                 'instant_bookable', 'price']\n\nboston = pd.read_csv(\"\/kaggle\/input\/boston\/listings.csv\", usecols= used_features)\n\nboston.shape\nboston.head(10)  ","8f172a25":"for feature in [\"cleaning_fee\", \"security_deposit\", \"price\"]:\n    boston[feature] = boston[feature].map(lambda x: x.replace(\"$\",'').replace(\",\",''), na_action = 'ignore')\n    boston[feature] = boston[feature].astype(float)\n    boston[feature].fillna(boston[feature].median(), inplace = True)\n\nfor feature in [\"bathrooms\", \"bedrooms\", \"beds\", \"review_scores_value\"]:\n    boston[feature].fillna(boston[feature].median(), inplace = True)\n\nboston['property_type'].fillna('Apartment', inplace = True)    \n\nboston.head(5)  ","448217f5":"boston[\"price\"].plot(kind = 'hist', grid = True)\nplt.title(\"Price histogram before subsetting and log-transformation\")\n\nboston['price'].skew()","ed51d459":"boston = boston[(boston['price'] > 50) & (boston['price'] < 500)]\ntarget = np.log(boston.price)\ntarget.hist()\nplt.title(\"Price distribution after the subsetting and log-transformation\")\n\n# select the features-the independent variables- and drop the price- target\/dependent variable\nfeatures = boston.drop('price', axis = 1)\nfeatures.head()","af27976b":"select_features = features.copy()\nselect_features = select_features[['accommodates','bathrooms','bedrooms','beds','security_deposit','cleaning_fee','minimum_nights','number_of_reviews','review_scores_value']]\nselect_features['price'] = boston.price\nselect_features.corr()","f196276d":"select_features.corr()['price'].sort_values()","06677ae1":"sns.regplot(x = \"accommodates\", y = \"price\", data = new_features)","9e5e8a28":"copied_features = features.copy()\ncopied_features['instant_bookable'].unique();\ncopied_features['instant_bookable'].replace(to_replace =['f','t'], value = [0,1], inplace =True);\ncopied_features['host_is_superhost'].replace(to_replace =['f','t'], value = [0,1], inplace =True);\ncopied_features.head()","3501c0f1":"print(features['bed_type'].unique())\nprint(features['neighbourhood_cleansed'].unique())\nprint(features['property_type'].unique())\nprint(features['room_type'].unique())\n\ncopied_features = pd.get_dummies(copied_features, prefix ='', prefix_sep = '')\ncopied_features.tail()","a85ca566":"#Let's quickly create a simple Price Estimator Model model using LinearRegression.\n#Assign the copied_features to X\nX = copied_features;\nY = target","ac8759f1":"X.head()","751be8d2":"Y[0:5]","5d91d4f5":"#Find out if there are any 'NANs' values","8f7eb7dc":"cols = ['accommodates','bathrooms','bedrooms','beds','security_deposit','cleaning_fee','minimum_nights','number_of_reviews','review_scores_value']\nfor col in cols:\n    print(\"number of NaN values for the column\",col,\" is \",boston[col].isna().sum())","24a8b46e":"#Import Linear Ligression,PolynomialFeatures as well as Pipeline and StandardScalar from sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score;","d49e1a5d":"# Use PipeLine Input\nInput=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]\npipe = Pipeline(Input);\npipe.fit(X, Y)\npipe.score(X,Y)","b51b7224":"x_train,x_test, y_train, y_test = train_test_split(X,Y,test_size=0.3,random_state =42)\nprint(\"Size of x_train==\",x_train.shape,\" that of y_test ==\",y_test.shape)","7f459b0b":"#Get an instance of LinearRegression\nlr = LinearRegression()\n# Let's partition the data\n\n#Fit our model\nlr.fit(x_train,y_train)\n\nyhat = lr.predict(x_test)\n#Calculate the score\nprint(\"r2 score: \",r2_score(y_test, yhat))\nprint(\"MSE: \",mean_squared_error(y_test, yhat))\nyhat = np.exp(yhat);\ny_test = np.exp(y_test);\nprint(\"predicted yhat ==\",yhat[0:5])\nprint(\"real y ==\",y_test[0:5])","28648e90":"fig = plt.figure(figsize =(8, 10))\na = plt.axes(aspect = 'equal')\nplt.scatter(y_test,yhat,color='blue')\n#plt.plot(x_test,yhat,'r')\nplt.xlabel(\"Real Values [Prices]\")\nplt.ylabel(\"Predicted Values [Prices]\")\nplt.show()","66091085":"np.exp(Y).max()","440d9e20":"x_train, x_test, y_train, y_test = train_test_split(features, target, test_size =0.33, random_state = 42)\n\nnumeric_columns = ['host_total_listings_count','accommodates','bathrooms','bedrooms','beds',\n 'security_deposit','cleaning_fee','minimum_nights','number_of_reviews','review_scores_value']\n\n# Get all the categorical feature names that contains strings\ncategorical_columns = ['host_is_superhost','neighbourhood_cleansed','property_type','room_type','bed_type','instant_bookable']\n\nnumeric_features = [tf.feature_column.numeric_column(key = column) for column in numeric_columns]\n#print(numeric_features)\n\ncategorical_features = [tf.feature_column.categorical_column_with_vocabulary_list(key = column,\n                        vocabulary_list = features[column].unique())\n                        \n                        for column in categorical_columns]\n\nprint(categorical_features[3])\n\nlinear_features = numeric_features + categorical_features\n\nprint(linear_features)","5644ffec":"def make_input_fn(data_df,label_df,num_epochs=10, shuffle=True,batch_size = 32):\n  def input_function():\n    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))\n    if shuffle:\n      ds = ds.shuffle(1000)  # randomize order of data\n    ds = ds.batch(batch_size = 32).repeat(num_epochs) # split dataset into batches of 32 and repeat for the number of epochs\n    return ds # return a batch of the dataset\n  return input_function # return a function object for use\n\ntraining_input_fn = make_input_fn( data_df = x_train,\n                                        label_df = y_train,\n                                        batch_size = 32,\n                                        shuffle = True,\n                                        num_epochs = None\n                                      )\neval_input_fn = make_input_fn(data_df = x_test,\n                              label_df  = y_test,\n                              batch_size = 32,\n                              shuffle = False,\n                              num_epochs = 1\n                             );\n\nlinear_regressor = tf.estimator.LinearRegressor(feature_columns = linear_features, model_dir = \"linear_regressor\")\n\nlinear_regressor.train(input_fn = training_input_fn, steps = 2000)\n\n#Evaluate the model\n\nresult = linear_regressor.evaluate(input_fn = eval_input_fn)\n\nprint(result)\nprint(\"Loss is \"+ str(result['loss']))\n\npred = list(linear_regressor.predict(input_fn = eval_input_fn))\n\npred = [p['predictions'][0] for p in pred]\n\nprices = np.exp(pred)\nprint(prices)\n","0f34dd8f":"print(\"Real Value Max ==\", np.exp(y_test).max())\nprint(\"Predicted Value Max ==\", prices.max())","328345db":"y_test = np.exp(y_test)\nfig = plt.figure(figsize =(8, 10))\na = plt.axes(aspect = 'equal')\nplt.scatter(y_test,prices,color='blue')\n#plt.plot(x_test,yhat,'r')\nplt.xlabel(\"Real Values [Prices]\")\nplt.ylabel(\"Predicted Values [Prices]\")\nplt.show()","958d2b2c":"boston['price']=np.exp(target)\nboston['price'].describe()","72395dcf":"Fit, Train and Evaluate the Model Using PolynomialFeatures ","d19033d2":"Use histogram to find the distribution for the target variable or price","a4668d57":"Read select features and columns from the datasets using pandas","b84d0c3e":"Compare Graphically-using scatter plot- the Results of the **Predicted** Prices versus the **Actual** Prices","e89a6747":"Split the the dataset into train and test sets. Then separate the categorical from the numerical variables and merge the two eventually.","11e87958":"And Y","12f5bd14":"### Start Data Cleaning and Preprocessing\n","f37cd673":"Convert '**bed_type, neighbourhood_cleansed, property_type,room_type**, etc' to one-hot encoding.","baba54b4":"Use RegPlot to find how **'accomadates'** correlates with price.","37e894d0":"From the above, one can see the score is ~80%, though the whole and the same dataset is used for both training and testing. I will change this very soon.","9176e3e8":"Define the input functions, train, evaluate and predict.","ff71f0a6":"Split the data into train and test sets, ","453d76b4":"#### **First, I will use normal and rudimentary sklearn library before using TensorFlow.**","58dad064":"Find the correlation Coefficients for select variables","8b3747c0":"Compare Graphically the Results of the **Predicted** Prices versus the **Actual** Prices","5d21e650":"Initialize the LinearRegression, Fit\/Train the Model, Predict and Evaluate the MSE and R^2","2bf7f5f9":"From the above Eavluations Results: MSE = 0.093, R^2 = 0.65 ~ 65%","d355c51c":"View the final values we are going to model.","0a850011":"**REPEAT THE LAST PROCESS USING TENSOR FLOW INSTEAD OF sklearn**","6a23389e":"Since most of the price ranges fall mainly  below 500, let's select and focus on that range","31262748":"# Airbnb Listings  PRICE ESTIMATOR\n\nThis notebook predicts and estimates airbnb listing price with the giving boston dataset\n\n\nAcknowledgement\nThis dataset is part of Airbnb Inside, and the original source can be found [here](http:\/\/insideairbnb.com\/get-the-data.html).","e2723659":"Remove all '$' signs, converts the numbers to floats and fill the missing numeric data with the average or the most frequent for non numeric data.","36827fe6":"Change the **categorical 'instant_bookable' and 'host_is_superhost'** varibale to numerical binary"}}