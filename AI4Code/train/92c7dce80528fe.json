{"cell_type":{"c691601c":"code","c4741623":"code","59039677":"code","d1bb8f2c":"code","dc260aa8":"code","fff0beda":"code","36056603":"code","06b482cb":"code","65d71466":"code","0a9cb66f":"code","0baa5bd4":"code","1492ab06":"code","240b80bd":"code","00e7971d":"code","7dbf1da4":"code","640d20a8":"code","cd90e302":"code","827a89b5":"code","eb823d34":"code","b2c7606f":"code","f1ee486c":"code","266d346c":"code","1a5426c0":"code","c052d455":"markdown","a3eb457d":"markdown","1d91c843":"markdown","2ba1b47f":"markdown","f9b48480":"markdown","bf1c8e74":"markdown","c676519c":"markdown","dc0a7506":"markdown","c80c47b1":"markdown","75a0309c":"markdown","6d34ea53":"markdown","b18c9c1d":"markdown","5549c7bd":"markdown"},"source":{"c691601c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport sys\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pathlib\n\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Activation\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.layers.normalization import BatchNormalization\n\nfrom sklearn.metrics import classification_report as cr\nfrom sklearn.metrics import confusion_matrix as cm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c4741623":"path_to_train = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\")\npath_to_test = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/test_set\")\ndogs_train_path = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/dogs\")\ncats_train_path = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/cats\")\ndogs_test_path = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/test_set\/dogs\")\ncats_test_path = pathlib.Path(\"\/kaggle\/input\/dogs-cats-images\/dataset\/test_set\/cats\")","59039677":"img_rows = 150\nimg_cols = 150\nepochs = 25\nbatch_size = 64","d1bb8f2c":"image_count_train = len(list(path_to_train.glob('*\/*.jpg')))\nprint(\"Total Training Images = \", image_count_train)\nimage_count_test = len(list(path_to_test.glob('*\/*.jpg')))\nprint(\"Total Training Images = \", image_count_test)","dc260aa8":"sample_datagen = ImageDataGenerator(rescale=1.\/255)\nsample_data = sample_datagen.flow_from_directory(\n        path_to_train,  # this is the target directory\n        target_size=(150, 150),  # all images will be resized to 150x150\n        batch_size=batch_size,\n        shuffle=True,\n        class_mode='binary')","fff0beda":"print('Following are the found classes along with their float representation')\nprint(sample_data.class_indices)","36056603":"x, y= sample_data.next()\nplt.figure(figsize=(10, 10))\nfor i in range(0,9):\n    image = x[i]\n    label = 'Cat' if y[i] == 0.0 else 'Dog'\n    ax = plt.subplot(3, 3, i+1)\n    plt.imshow(image)\n    plt.title(label)\n    plt.axis(\"off\")","06b482cb":"import random\nimage_gen = ImageDataGenerator(rescale=1.\/255, width_shift_range=0.4)\ncatimg = load_img('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/cats\/cat.'+ str(random.randint(1000, 1009)) +'.jpg') # this is a PIL image\nx = img_to_array(catimg) # this is a Numpy array with shape (3, 150, 150)\nx = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)\n\ny = image_gen.flow(x, batch_size=1)\nfor _ in range(3):\n    plt.subplot(1,2,1)\n    plt.title('Original image')\n    plt.imshow(catimg)\n    plt.axis(\"off\")\n\n    plt.subplot(1,2,2)\n    plt.title('Augmented image')\n    img = y.next()\n    plt.imshow(img[0])\n    plt.axis(\"off\")","65d71466":"dogimg = load_img('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/dogs\/dog.'+ str(random.randint(1000, 1009)) +'.jpg') # this is a PIL image\np = img_to_array(dogimg)\np = p.reshape((1,) + p.shape)\n\nq = image_gen.flow(p, batch_size=1)\n\nfor _ in range(3):\n    plt.subplot(1,2,1)\n    plt.title('Original image')\n    plt.imshow(dogimg)\n    plt.axis(\"off\")\n\n    plt.subplot(1,2,2)\n    plt.title('Augmented image')\n    img = q.next()\n    plt.imshow(img[0])\n    plt.axis(\"off\")","0a9cb66f":"cat_image_gen = ImageDataGenerator(rescale=1.\/255, horizontal_flip=True)\ncatimg = load_img('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/cats\/cat.'+ str(random.randint(1000, 1009)) +'.jpg') # this is a PIL image\nx = img_to_array(catimg) # this is a Numpy array with shape (3, 150, 150)\nx = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)\n\ny = cat_image_gen.flow(x, batch_size=1)\nfor _ in range(3):\n    plt.subplot(1,2,1)\n    plt.title('Original image')\n    plt.imshow(catimg)\n    plt.axis(\"off\")\n\n    plt.subplot(1,2,2)\n    plt.title('Augmented image')\n    img = y.next()\n    plt.imshow(img[0])\n    plt.axis(\"off\")","0baa5bd4":"d_image_gen = ImageDataGenerator(rescale=1.\/255, horizontal_flip=True)\ndogimg = load_img('\/kaggle\/input\/dogs-cats-images\/dataset\/training_set\/dogs\/dog.'+ str(random.randint(1000, 1009)) +'.jpg') # this is a PIL image\nx = img_to_array(dogimg) # this is a Numpy array with shape (3, 150, 150)\nx = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)\n\nw = d_image_gen.flow(x, batch_size=1)\nfor _ in range(3):\n    plt.subplot(1,2,1)\n    plt.title('Original image')\n    plt.imshow(dogimg)\n    plt.axis(\"off\")\n\n    plt.subplot(1,2,2)\n    plt.title('Augmented image')\n    img = w.next()\n    plt.imshow(img[0])\n    plt.axis(\"off\")","1492ab06":"# this is the augmentation configuration we will use for training\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        width_shift_range=0.4,\n        horizontal_flip=True)\n\n# this is the augmentation configuration we will use for testing:\n# only rescaling\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n        path_to_train,  \n        target_size=(img_cols, img_rows),  \n        batch_size=batch_size,\n        class_mode='binary')  # since we use binary_crossentropy loss, we need binary labels\n\nvalidation_generator = test_datagen.flow_from_directory(\n        path_to_test, \n        target_size=(img_cols, img_rows),  \n        batch_size=batch_size,\n        class_mode='binary')","240b80bd":"x, y= train_generator.next()","00e7971d":"plt.figure(figsize=(10, 10))\nfor i in range(0,9):\n    image = x[i]\n    label = 'Cat' if y[i] == 0.0 else 'Dog'\n    ax = plt.subplot(3, 3, i+1)\n    #print (label)\n    plt.imshow(image)\n    plt.title(label)\n    plt.axis(\"off\")\n    #plt.show()","7dbf1da4":"def plot_graph(history):\n  plt.plot(history.history['accuracy'], label='Train Acc')\n  plt.plot(history.history['val_accuracy'], label='Val Acc')\n  plt.xlabel('Epochs')\n  plt.ylabel('Accuracy')\n  plt.title('Plot of Training & Validation Accuracy')\n  plt.legend()\n  plt.show()\n\ndef plot_model_loss_graph(history):\n    # summarize history for loss\n    plt.plot(history.history['loss'], label='Training Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.title('Model Loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epochs')\n    plt.legend(['Train', 'Test'], loc='upper left')\n    plt.show()","640d20a8":"# Model without regularizer\nfrom keras.regularizers import l2\nmodel = Sequential()\n\n\nmodel.add(Conv2D(32, 3, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32, 3, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64, 3, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(128, 3, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\nmodel.compile(optimizer='adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","cd90e302":"history = model.fit(\n        train_generator,\n        steps_per_epoch=8000 \/\/ batch_size,\n        epochs=epochs,\n        validation_data=validation_generator,\n        validation_steps=2000 \/\/ batch_size)","827a89b5":"print(\"Average training accuracy >\",np.mean(history.history['accuracy']))\nprint(\"Average validation accuracy >\",np.mean(history.history['val_accuracy']))","eb823d34":"plot_graph(history)","b2c7606f":"plot_model_loss_graph(history)","f1ee486c":"# evaluate model\n_, acc = model.evaluate(validation_generator, steps=len(validation_generator), verbose=1)\nprint('Final Testing Accuracy With The Test Data > %.3f' % (acc * 100.0))","266d346c":"#Confution Matrix and Classification Report\nY_pred = model.predict(validation_generator, 2000 \/\/ batch_size+1)","1a5426c0":"#y_pred = np.argmax(Y_pred, axis=1)\ny_pred=np.where(Y_pred>0.5, 1, 0)\nprint('Confusion Matrix')\nmatrix = cm(validation_generator.classes, y_pred)\nprint(matrix)\nprint('Classification Report')\ntarget_names = ['Cats', 'Dogs']\nprint(cr(validation_generator.classes, y_pred, target_names=target_names))","c052d455":"## Build Model\n### Without Regularizer","a3eb457d":"### Train the model","1d91c843":"#### Dog","2ba1b47f":"### Find final testing accuracy","f9b48480":"#### Dog\n","bf1c8e74":"### Find Mean Training Accuracy And Validation Accuracy","c676519c":"## Image Augumentation Example\n### Horizontal Flip\n#### Cat","dc0a7506":"## Image Augumentation Example\n### Width Shift, Factor 0.4\n#### Cat","c80c47b1":"## Sample Data Set","75a0309c":"# Data Visualization And Augumentation","6d34ea53":"### Plot sample training samples after data augumentation","b18c9c1d":"### Calculate Confusion matrix and Classification report","5549c7bd":"## Generate Training and Testing Data"}}