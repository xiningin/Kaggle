{"cell_type":{"06ad8d24":"code","1b2c799e":"code","17f3b8ca":"code","39cbb5a2":"code","a6faafe7":"code","f2ad1a8a":"code","faac1a57":"code","170b57a2":"code","5ceef2fc":"code","c2442400":"code","21c8c5f0":"code","b4429fae":"code","ce585761":"code","fd8b9904":"code","95729360":"code","8c4e5c47":"code","5c269489":"code","39ce098a":"code","381903bc":"code","0fd38129":"code","7c7c669a":"code","1fdb12c7":"code","2ce55261":"code","6541632e":"code","4c0284f6":"code","5a823f3c":"code","92fbdfe5":"code","c4f98c4e":"code","994d6250":"code","02b93931":"code","5dd39e53":"code","0a841928":"code","d4c6b02f":"code","13f7714c":"code","b0e6d74f":"code","2af12268":"code","515baba6":"code","37039287":"code","a656ce5e":"code","a4a26174":"code","a8cfa044":"code","d1f2590c":"code","9a637785":"code","d5318bdf":"code","d6a70a7d":"code","bee075e0":"code","f6131855":"code","a5c94217":"code","e964a5bd":"code","7742a778":"code","d63a8af3":"code","e7d51556":"code","74a3c662":"code","a9d022be":"code","f34048dd":"code","f19147c9":"code","57efaf6b":"code","7dfe1841":"code","5ed33f85":"code","9ef03299":"code","586581a7":"code","ba8998df":"markdown","1a27d344":"markdown","84b914e3":"markdown","0a4ee8ef":"markdown","16f71e5c":"markdown","bdb412fb":"markdown","bb56f4c5":"markdown","35ce7ac7":"markdown","5943b20c":"markdown","719bc13e":"markdown","e751ceec":"markdown","06c18c1b":"markdown","91441371":"markdown","9caac62f":"markdown","38bbd3ec":"markdown","e0a668fa":"markdown","7707dc21":"markdown","0850e431":"markdown","175da5bb":"markdown","08e7111e":"markdown","122edbb6":"markdown","d4e9918d":"markdown","d42fe420":"markdown","09ced69e":"markdown","b74f86c7":"markdown","30b5b95b":"markdown"},"source":{"06ad8d24":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nimport glob\nimport seaborn as sns\nsns.set()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error,mean_squared_log_error,r2_score\nimport catboost\nfrom catboost import CatBoostRegressor\nfrom catboost import Pool, cv\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom scipy.special import inv_boxcox\nimport plotly.express as ex\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import svm\nimport lightgbm as lgb\n#import optuna.integration.lightgbm as lgb\nle = LabelEncoder()","1b2c799e":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')","17f3b8ca":"train.head()","39cbb5a2":"ex.histogram(train['target_carbon_monoxide'])","a6faafe7":"ex.histogram(train['target_benzene'])","f2ad1a8a":"ex.histogram(train['target_nitrogen_oxides'])","faac1a57":"col=['deg_C', 'relative_humidity', 'absolute_humidity',\n       'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']","170b57a2":"X = train\nY1 = X['target_carbon_monoxide'].values\nY2 = X['target_benzene'].values\nY3 = X['target_nitrogen_oxides'].values\nX = X.drop(['target_carbon_monoxide','target_benzene','target_nitrogen_oxides','date_time'], axis = 1)\nX = X[col]","5ceef2fc":"X_train, X_test, Y_train, Y_test = train_test_split (X, Y1, test_size = 0.20, random_state=42)","c2442400":"import warnings\nwarnings.filterwarnings('ignore')\nall_regressors = []\nall_regressors.append(('LR', Pipeline([('Scaler', StandardScaler()),('LR',LinearRegression())])))\nall_regressors.append(('LASSO', Pipeline([('Scaler', StandardScaler()),('LASSO', Lasso())])))\nall_regressors.append(('EN', Pipeline([('Scaler', StandardScaler()),('EN', ElasticNet())])))\nall_regressors.append(('Ridge', Pipeline([('Scaler', StandardScaler()),('RIDGE', Ridge())])))\nall_regressors.append(('BYR', Pipeline([('Scaler', StandardScaler()),('BYR', BayesianRidge())])))\nall_regressors.append(('KNN', Pipeline([('Scaler', StandardScaler()),('KNN', KNeighborsRegressor())])))\nall_regressors.append(('CART', Pipeline([('Scaler', StandardScaler()),('CART', DecisionTreeRegressor())])))\nall_regressors.append(('SVM', Pipeline([('Scaler', StandardScaler()),('SVM', svm.SVR())])))\nall_regressors.append(('XGB', Pipeline([('Scaler', StandardScaler()),('XGB', xgb.XGBRegressor())])))\n\ntrain_error = []\ntest_error = []\ntrain_error2 = []\ntest_error2 = []\nfor name, model in all_regressors:\n    kfold = KFold(n_splits=5)\n    cv_results_train = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_test = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_train2 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='r2')\n    cv_results_test2 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='r2')\n    #cv_results_train3 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neq_root_mean_squared_error')\n    #cv_results_test3 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neq_root_mean_squared_error')\n    train_error.append(cv_results_train.mean())\n    test_error.append(cv_results_test.mean())\n    train_error2.append(cv_results_train2.mean())\n    test_error2.append(cv_results_test2.mean())","21c8c5f0":"col={'Train Error NegMsle':train_error,'Test Error NegMsle':test_error, 'Train Error R^2':train_error2,'Test Error R^2':test_error2}\nmodels=['Linear Regression', 'Lasso Regression', 'ElasticNet', 'Ridge Regression', 'Bayesian Regression','KNN','Decision Tree','SVM', 'XGBoost']\nrslt1=pd.DataFrame(data=col,index=models)\nrslt1","b4429fae":"col=['deg_C', 'relative_humidity', 'absolute_humidity',\n       'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']","ce585761":"sc=StandardScaler()\ntrain_sc=sc.fit_transform(X)\ntest_sc=sc.transform(test[col])\nmodel_svm=svm.SVR()","fd8b9904":"model_svm.fit(train_sc,Y1)","95729360":"test_target1=model_svm.predict(test_sc)","8c4e5c47":"X_train, X_test, Y_train, Y_test = train_test_split (X, Y2, test_size = 0.20, random_state=42)","5c269489":"import warnings\nwarnings.filterwarnings('ignore')\nall_regressors = []\nall_regressors.append(('LR', Pipeline([('Scaler', StandardScaler()),('LR',LinearRegression())])))\nall_regressors.append(('LASSO', Pipeline([('Scaler', StandardScaler()),('LASSO', Lasso())])))\nall_regressors.append(('EN', Pipeline([('Scaler', StandardScaler()),('EN', ElasticNet())])))\nall_regressors.append(('Ridge', Pipeline([('Scaler', StandardScaler()),('RIDGE', Ridge())])))\nall_regressors.append(('BYR', Pipeline([('Scaler', StandardScaler()),('BYR', BayesianRidge())])))\nall_regressors.append(('KNN', Pipeline([('Scaler', StandardScaler()),('KNN', KNeighborsRegressor())])))\nall_regressors.append(('CART', Pipeline([('Scaler', StandardScaler()),('CART', DecisionTreeRegressor())])))\nall_regressors.append(('SVM', Pipeline([('Scaler', StandardScaler()),('SVM', svm.SVR())])))\nall_regressors.append(('XGB', Pipeline([('Scaler', StandardScaler()),('XGB', xgb.XGBRegressor())])))\n\ntrain_error = []\ntest_error = []\ntrain_error2 = []\ntest_error2 = []\nfor name, model in all_regressors:\n    kfold = KFold(n_splits=5)\n    cv_results_train = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_test = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_train2 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='r2')\n    cv_results_test2 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='r2')\n    #cv_results_train3 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neq_root_mean_squared_error')\n    #cv_results_test3 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neq_root_mean_squared_error')\n    train_error.append(cv_results_train.mean())\n    test_error.append(cv_results_test.mean())\n    train_error2.append(cv_results_train2.mean())\n    test_error2.append(cv_results_test2.mean())","39ce098a":"col={'Train Error NegMsle':train_error,'Test Error NegMsle':test_error, 'Train Error R^2':train_error2,'Test Error R^2':test_error2}\nmodels=['Linear Regression', 'Lasso Regression', 'ElasticNet', 'Ridge Regression', 'Bayesian Regression','KNN','Decision Tree','SVM', 'XGBoost']\nrslt2=pd.DataFrame(data=col,index=models)\nrslt2","381903bc":"col=['deg_C', 'relative_humidity', 'absolute_humidity',\n       'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']","0fd38129":"sc=StandardScaler()\ntrain_sc=sc.fit_transform(X)\ntest_sc=sc.transform(test[col])\nmodel_dt=DecisionTreeRegressor()","7c7c669a":"model_dt.fit(train_sc,Y2)","1fdb12c7":"test_target2=model_dt.predict(test_sc)","2ce55261":"X_train, X_test, Y_train, Y_test = train_test_split (X, Y3, test_size = 0.20, random_state=42)","6541632e":"import warnings\nwarnings.filterwarnings('ignore')\nall_regressors = []\nall_regressors.append(('LR', Pipeline([('Scaler', StandardScaler()),('LR',LinearRegression())])))\nall_regressors.append(('LASSO', Pipeline([('Scaler', StandardScaler()),('LASSO', Lasso())])))\nall_regressors.append(('EN', Pipeline([('Scaler', StandardScaler()),('EN', ElasticNet())])))\nall_regressors.append(('Ridge', Pipeline([('Scaler', StandardScaler()),('RIDGE', Ridge())])))\nall_regressors.append(('BYR', Pipeline([('Scaler', StandardScaler()),('BYR', BayesianRidge())])))\nall_regressors.append(('KNN', Pipeline([('Scaler', StandardScaler()),('KNN', KNeighborsRegressor())])))\nall_regressors.append(('CART', Pipeline([('Scaler', StandardScaler()),('CART', DecisionTreeRegressor())])))\nall_regressors.append(('SVM', Pipeline([('Scaler', StandardScaler()),('SVM', svm.SVR())])))\nall_regressors.append(('XGB', Pipeline([('Scaler', StandardScaler()),('XGB', xgb.XGBRegressor())])))\n\ntrain_error = []\ntest_error = []\ntrain_error2 = []\ntest_error2 = []\nfor name, model in all_regressors:\n    kfold = KFold(n_splits=5)\n    cv_results_train = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_test = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neg_mean_squared_log_error')\n    cv_results_train2 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='r2')\n    cv_results_test2 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='r2')\n    #cv_results_train3 = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='neq_root_mean_squared_error')\n    #cv_results_test3 = cross_val_score(model, X_test, Y_test, cv=kfold, scoring='neq_root_mean_squared_error')\n    train_error.append(cv_results_train.mean())\n    test_error.append(cv_results_test.mean())\n    train_error2.append(cv_results_train2.mean())\n    test_error2.append(cv_results_test2.mean())","4c0284f6":"col={'Train Error NegMsle':train_error,'Test Error NegMsle':test_error, 'Train Error R^2':train_error2,'Test Error R^2':test_error2}\nmodels=['Linear Regression', 'Lasso Regression', 'ElasticNet', 'Ridge Regression', 'Bayesian Regression','KNN','Decision Tree','SVM', 'XGBoost']\nrslt3=pd.DataFrame(data=col,index=models)\nrslt3","5a823f3c":"col=['deg_C', 'relative_humidity', 'absolute_humidity',\n       'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5']","92fbdfe5":"sc=StandardScaler()\ntrain_sc=sc.fit_transform(X)\ntest_sc=sc.transform(test[col])\nmodel_xgb=xgb.XGBRegressor()","c4f98c4e":"model_xgb.fit(train_sc,Y3)","994d6250":"test_target3=model_xgb.predict(test_sc)","02b93931":"sample_submission['target_carbon_monoxide']=test_target1\nsample_submission['target_benzene']=test_target2\nsample_submission['target_nitrogen_oxides']=test_target3","5dd39e53":"sample_submission.info()","0a841928":"sample_submission.shape","d4c6b02f":"sample_submission.head()","13f7714c":"sample_submission.to_csv('submission.csv',index=False)","b0e6d74f":"train.head()","2af12268":"train['date_time_1'] = pd.to_datetime(train['date_time'])\ntrain['month'] = train['date_time_1'].dt.month\ntrain['dayofweek'] = train['date_time_1'].dt.dayofweek\ntrain['hour'] = train['date_time_1'].dt.hour\ntest['date_time_1'] = pd.to_datetime(test['date_time'])\ntest['month'] = test['date_time_1'].dt.month\ntest['dayofweek'] = test['date_time_1'].dt.dayofweek\ntest['hour'] = test['date_time_1'].dt.hour","515baba6":"Y = 'target_carbon_monoxide'\nX = 'month'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_carbon_monoxide hue on Month\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","37039287":"Y = 'target_benzene'\nX = 'month'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_benzene hue on Month\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","a656ce5e":"Y = 'target_nitrogen_oxides'\nX = 'month'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_nitrogen_oxides hue on Month\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","a4a26174":"Y = 'target_carbon_monoxide'\nX = 'month'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_carbon_monoxide hue on Month\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","a8cfa044":"Y = 'target_benzene'\nX = 'dayofweek'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_carbon_monoxide hue on Week Day\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","d1f2590c":"Y = 'target_nitrogen_oxides'\nX = 'dayofweek'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_nitrogen_oxides hue on Week Day\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","9a637785":"Y = 'target_carbon_monoxide'\nX = 'dayofweek'\nuniqueX = train[X].unique()\nuniqueX = np.sort(uniqueX)\n\nimport plotly.graph_objects as go\nfig = go.Figure()\n\nfor i in uniqueX:\n    fig.add_trace(go.Violin(x=train[X][train[X] == i],\n                            y=train[Y][train[X] == i],\n                            name=str(i),\n                            box_visible=True,\n                            meanline_visible=True))\n    \nfig.update_layout(title={'text':\"Violin plots for target_carbon_monoxide hue on Week Day\",\n                         'xanchor': 'center',\n                         'yanchor': 'top',\n                         'x':0.5,'y':0.97},\n                      template='plotly_dark',\n                      legend=dict(yanchor=\"bottom\",\n                                  y=0.5,\n                                  xanchor=\"center\",\n                                  x=1.2),\n                      barmode='overlay',)\n\nfig.show()","d5318bdf":"# Seasonal factors\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 1 or train[\"month\"][i] == 2 or train[\"month\"][i] == 12):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_winter\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 3 or train[\"month\"][i] == 4 or train[\"month\"][i] == 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_spring\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 6 or train[\"month\"][i] == 7 or train[\"month\"][i] == 8):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_summer\"] = ary\n\nary =[]\nfor i in range(len(train[\"month\"])):\n    if(train[\"month\"][i] == 9 or train[\"month\"][i] == 10 or train[\"month\"][i] == 11):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_autumn\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 1 or test[\"month\"][i] == 2 or test[\"month\"][i] == 12):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_winter\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 3 or test[\"month\"][i] == 4 or test[\"month\"][i] == 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_spring\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 6 or test[\"month\"][i] == 7 or test[\"month\"][i] == 8):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_summer\"] = ary\n\nary =[]\nfor i in range(len(test[\"month\"])):\n    if(test[\"month\"][i] == 9 or test[\"month\"][i] == 10 or test[\"month\"][i] == 11):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_autumn\"] = ary\n\n# Week factors\ntrain[\"is_weekend\"] = (train[\"date_time_1\"].dt.dayofweek >= 5).astype(\"int\")\ntest[\"is_weekend\"] = (test[\"date_time_1\"].dt.dayofweek >= 5).astype(\"int\")\n\n# Time zone factors\nary =[]\nfor i in range(len(train[\"date_time_1\"])):\n    if (train[\"hour\"][i] >= 8 and train[\"hour\"][i] <= 9):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_commute_m\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_1\"])):\n    if (train[\"hour\"][i] >= 18 and train[\"hour\"][i] <= 20):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_commute_e\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_1\"])):\n    if (train[\"hour\"][i] >= 10 and train[\"hour\"][i] <= 16):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_work\"] = ary\n\nary =[]\nfor i in range(len(train[\"date_time_1\"])):\n    if (train[\"hour\"][i] >= 23 or train[\"hour\"][i] <= 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntrain[\"is_night\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_1\"])):\n    if (test[\"hour\"][i] >= 8 and test[\"hour\"][i] <= 9):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_commute_m\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_1\"])):\n    if (test[\"hour\"][i] >= 18 and test[\"hour\"][i] <= 20):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_commute_e\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_1\"])):\n    if (test[\"hour\"][i] >= 10 and test[\"hour\"][i] <= 16):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_work\"] = ary\n\nary =[]\nfor i in range(len(test[\"date_time_1\"])):\n    if (test[\"hour\"][i] >= 23 or test[\"hour\"][i] <= 5):\n        ary.append(1)\n    else:\n        ary.append(0)\ntest[\"is_night\"] = ary","d6a70a7d":"import sklearn\n# Concat train and test\nall = pd.concat([train,test],ignore_index=True)\n\n# Scaling\nmonth = all['month']\nmonth = np.array(month)\nall['month'] = sklearn.preprocessing.minmax_scale(month[:])\ndayofweek = all['dayofweek']\ndayofweek = np.array(dayofweek)\nall['dayofweek'] = sklearn.preprocessing.minmax_scale(dayofweek[:])\nhour = all['hour']\nhour = np.array(hour)\nall['hour'] = sklearn.preprocessing.minmax_scale(hour[:])\n\ndeg_C = all['deg_C']\ndeg_C = np.array(deg_C)\nall['deg_C_2'] = sklearn.preprocessing.minmax_scale(deg_C[:])\nrelative_humidity = all['relative_humidity']\nrelative_humidity = np.array(relative_humidity)\nall['relative_humidity_2'] = sklearn.preprocessing.minmax_scale(relative_humidity[:])\nabsolute_humidity = all['absolute_humidity']\nabsolute_humidity = np.array(absolute_humidity)\nall['absolute_humidity_2'] = sklearn.preprocessing.minmax_scale(absolute_humidity[:])\nsensor_1 = all['sensor_1']\nsensor_1 = np.array(sensor_1)\nall['sensor_1_2'] = sklearn.preprocessing.minmax_scale(sensor_1[:])\nsensor_2 = all['sensor_2']\nsensor_2 = np.array(sensor_2)\nall['sensor_2_2'] = sklearn.preprocessing.minmax_scale(sensor_2[:])\nsensor_3 = all['sensor_3']\nsensor_3 = np.array(sensor_3)\nall['sensor_3_2'] = sklearn.preprocessing.minmax_scale(sensor_3[:])\nsensor_4 = all['sensor_4']\nsensor_4 = np.array(sensor_4)\nall['sensor_4_2'] = sklearn.preprocessing.minmax_scale(sensor_4[:])\nsensor_5 = all['sensor_5']\nsensor_5 = np.array(sensor_5)\nall['sensor_5_2'] = sklearn.preprocessing.minmax_scale(sensor_5[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1].drop(columns=[\"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_carbon_monoxide\", \"target_benzene\", \"target_nitrogen_oxides\", \"deg_C\", \"relative_humidity\", \"absolute_humidity\", \"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"])\ntest_scale = pd.DataFrame.reset_index(test_scale).drop(columns=[\"index\"])","bee075e0":"train.head()","f6131855":"test.head()","a5c94217":"corr = train_scale.corr().round(2)","e964a5bd":"plt.figure(figsize=(20,10))\nsns.heatmap(corr, vmin=-1, vmax=1, center=0, square=False, annot=True, cmap='coolwarm')\nplt.show()","7742a778":"## drop unnecessary columns\ncolumns_2 = test_scale.columns.drop(['date_time', 'date_time_1', 'month'])#, 'dayofweek', 'hour'","d63a8af3":"X = train_scale[columns_2].values\nX_test = test_scale[columns_2].values\nvalue_2 = train_scale['target_benzene'].values.reshape(-1,1)","e7d51556":"X_train_2, X_test_2, t_train_2, t_test_2 = train_test_split(X, value_2,test_size=0.3, random_state=0)\nlgb_train_2 = lgb.Dataset(X_train_2, t_train_2)\nlgb_eval_2 = lgb.Dataset(X_test_2, t_test_2, reference=lgb_train_2)\nparams_2 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': {'l2'},\n        'learning_rate': 0.002,\n        'num_leaves': 16,\n        'num_iterations': 20000,\n        'verbosity': -1\n}\nmodel_2 = lgb.train(\n    params_2,\n    train_set=lgb_train_2,\n    valid_sets=lgb_eval_2,\n    early_stopping_rounds=100,\n    verbose_eval=100\n)","74a3c662":"pred_2 = model_2.predict(X_test_2)\nmsle_2 = mean_squared_log_error(t_test_2, pred_2) \nrmsle_2 = np.sqrt(msle_2) \nprint('RMSLE_2 : {}'.format(rmsle_2))\nr2_2 = r2_score(t_test_2,pred_2)\nprint('R2_2    : {}'.format(r2_2))","a9d022be":"sample_submission['target_benzene'] = model_2.predict(X_test)\n\ntest_scale['target_benzene'] = model_2.predict(X_test)\n\n# Concat train and test\nall = pd.concat([train_scale,test_scale],ignore_index=True)\ntarget_benzene = all['target_benzene']\ntarget_benzene = np.array(target_benzene)\nall['target_benzene'] = sklearn.preprocessing.minmax_scale(target_benzene[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1]\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_carbon_monoxide\", \"target_nitrogen_oxides\"])\n\ncolumns_1 = test_scale.columns.drop(['date_time', 'date_time_1', 'month'])#, 'dayofweek', 'hour'\ncolumns_1","f34048dd":"X = train_scale[columns_1].values\nX_test = test_scale[columns_1].values\nvalue_1 = train_scale['target_carbon_monoxide'].values.reshape(-1,1)","f19147c9":"X_train_1, X_test_1, t_train_1, t_test_1 = train_test_split(X, value_1,test_size=0.3, random_state=0)\n\nlgb_train_1 = lgb.Dataset(X_train_1, t_train_1)\nlgb_eval_1 = lgb.Dataset(X_test_1, t_test_1, reference=lgb_train_1)\n\nparams_1 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',# binary\u3001multiclass\n        'metric': {'l2'},\n        'learning_rate': 0.01,\n        'num_leaves': 8,\n        'num_iterations': 20000,\n        'verbosity': -1\n}\n\nmodel_1 = lgb.train(\n    params_1,\n    train_set=lgb_train_1,\n    valid_sets=lgb_eval_1,\n    early_stopping_rounds=100,\n    verbose_eval=100\n)\n\n# Verification\n\npred_1 = model_1.predict(X_test_1)\n\nmsle_1 = mean_squared_log_error(t_test_1, pred_1)\nrmsle_1 = np.sqrt(msle_1)\nprint('RMSLE_1 : {}'.format(rmsle_1))\n\nr2_1 = r2_score(t_test_1,pred_1)\nprint('R2_1    : {}'.format(r2_1))\n","57efaf6b":"sample_submission['target_carbon_monoxide'] = model_1.predict(X_test)\n\ntest_scale['target_carbon_monoxide'] = model_1.predict(X_test)\n\n# Concat train and test\nall = pd.concat([train_scale,test_scale],ignore_index=True)\ntarget_carbon_monoxide = all['target_carbon_monoxide']\ntarget_carbon_monoxide = np.array(target_carbon_monoxide)\nall['target_carbon_monoxide'] = sklearn.preprocessing.minmax_scale(target_carbon_monoxide[:])\n\n# Split all for train and test\ntrain_scale = all.iloc[train.index[0]:train.index[-1]+1]\ntest_scale = all.iloc[train.index[-1]+1:].drop(columns=[\"target_nitrogen_oxides\"])\n\ncolumns_3 = test_scale.columns.drop(['date_time', 'date_time_1', 'month'])","7dfe1841":"X = train_scale[columns_3].values\nX_test = test_scale[columns_3].values\nvalue_3 = train_scale['target_nitrogen_oxides'].values.reshape(-1,1)","5ed33f85":"X_train_3, X_test_3, t_train_3, t_test_3 = train_test_split(X, value_3,test_size=0.3, random_state=0)\n\nlgb_train_3 = lgb.Dataset(X_train_3, t_train_3)\nlgb_eval_3 = lgb.Dataset(X_test_3, t_test_3, reference=lgb_train_3)\n\nparams_3 = {\n        'task': 'train',\n        'boosting_type': 'gbdt',\n        'objective': 'regression',\n        'metric': {'l2'},\n        'learning_rate': 0.0005,\n        'num_leaves': 92,\n        'num_iterations': 20000,\n        'verbosity': -1\n}\n\nmodel_3 = lgb.train(\n    params_3,\n    train_set=lgb_train_3,\n    valid_sets=lgb_eval_3,\n    early_stopping_rounds=100,\n    verbose_eval=100\n)\n\n\n# Verification\n\npred_3 = model_3.predict(X_test_3)\n\nmsle_3 = mean_squared_log_error(t_test_3, pred_3)\nrmsle_3 = np.sqrt(msle_3)\nprint('RMSLE_3 : {}'.format(rmsle_3))\n\nr2_3 = r2_score(t_test_3,pred_3)\nprint('R2_3    : {}'.format(r2_3))","9ef03299":"sample_submission['target_nitrogen_oxides'] = model_3.predict(X_test)\n\nsample_submission","586581a7":"sample_submission.to_csv('submission.csv', index=False)","ba8998df":"We can see some seasonal variation across the months on all the 3 target variables. As the median across the month is varying.","1a27d344":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">EDA- Across Week<\/span><\/h1><br>","84b914e3":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predicting target_nitrogen_oxides<\/span><\/h1><br>","0a4ee8ef":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predict on test-Target3<\/span><\/h1><br>","16f71e5c":"All the 3 predicted variables seems to be right skewed a bit","bdb412fb":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predicting target_carbon_monoxide from target_benzene<\/span><\/h1><br>","bb56f4c5":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Data Processing to Add seasonal Variables<\/span><\/h1><br>","35ce7ac7":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predict on test-Target1<\/span><\/h1><br>","5943b20c":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: black ; color : skyblue; text-align: center; border-radius: 100px 100px;padding:10px\">Tabular Playground Series-July2021<\/h1>\n<br>\n\nIn this competition you are predicting the values of air pollution measurements over time, based on basic weather information (temperature and humidity) and the input values of 5 sensors.\n\nThe three target values to you to predict are: `target_carbon_monoxide`, `target_benzene`, and `target_nitrogen_oxides`","719bc13e":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Appending Results to Test Set<\/span><\/h1><br>","e751ceec":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">EDA- Across Month<\/span><\/h1><br>","06c18c1b":"<br>\n<h1 style = \"font-size:30px; font-family:Garamond ; font-weight : normal; background-color: black ; color : skyblue; text-align: center; border-radius: 100px 100px;padding:10px\">About Data<\/h1>\n<br>\n\n**train.csv** - the training data, including the weather data, sensor data, and values for the 3 targets<br>\n**test.csv** - the same format as train.csv, but without the target value; your task is to predict the value for each of these targets<br>\n**sample_submission.csv** - a sample submission file in the correct format.","91441371":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Distribution of target variables<\/span><\/h1><br>","9caac62f":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Check the Correlation<\/span><\/h1><br>","38bbd3ec":"From the above result on train set we can see Negmsle is low for model=SVM on test set having 0.022291","e0a668fa":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Fit on target 3<\/span><\/h1><br>","7707dc21":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Data Processing - Scaling the Variables<\/span><\/h1><br>","0850e431":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Fit on target 1<\/span><\/h1><br>","175da5bb":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predicting target_nitrogen_oxides from target_carbon_monoxide<\/span><\/h1><br>","08e7111e":"<br>\n<h1 style = \"font-size:30px; font-family:Garamond ; font-weight : normal; background-color: black ; color : skyblue; text-align: center; border-radius: 100px 100px;padding:10px\">Import library<\/h1>\n<br>","122edbb6":"We can notice that the sensor variables seems to have a slight positive coorelation with the target variables.\nTime based varibles like summer,weekend and night have slight negative correlation.","d4e9918d":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Model Prediction<\/span><\/h1><br>","d42fe420":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Prediction and Evaluation<\/span><\/h1><br>","09ced69e":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Predict on test-Target2<\/span><\/h1><br>","b74f86c7":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Fit on target 2<\/span><\/h1><br>","30b5b95b":"<h1><span class=\"label label-default\" style=\"background-color:black;border-radius:100px 100px; font-weight: bold; font-family:Garamond; font-size:20px; color:#03e8fc; padding:10px\">Light GBM<\/span><\/h1><br>"}}