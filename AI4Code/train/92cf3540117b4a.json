{"cell_type":{"ebbe4ef7":"code","13ccf207":"code","d3b3d0ed":"code","196d54b2":"code","cda65b3c":"code","4a1c7616":"code","aab996f7":"code","9a35d2f5":"code","0acc09ad":"code","2077b33c":"code","35c48551":"code","adc2340a":"code","3940f47f":"code","516a700f":"code","ad4f4730":"code","562b8c96":"code","fe603540":"code","2c8d3fdb":"code","895f9cc3":"code","49c4d8b6":"code","bbbf22f2":"code","3dc5b48d":"code","28072836":"code","17fce318":"code","84508eeb":"code","f8264103":"code","49936dc8":"code","5e0a33c2":"markdown","091983a9":"markdown","bf0489df":"markdown","aff94f49":"markdown","a8468661":"markdown","789ddab5":"markdown","160dc032":"markdown","530a1a57":"markdown"},"source":{"ebbe4ef7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix","13ccf207":"#read train data\ntrain_data=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_data.head()","d3b3d0ed":"train_data.shape","196d54b2":"train_data.info()","cda65b3c":"#read test data\ntest_data=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_data.head()","4a1c7616":"test_data.shape","aab996f7":"test_data.info()","9a35d2f5":"label=train_data.iloc[2,1:].values\nlabel=label.reshape(28,28)\nplt.imshow(label)","0acc09ad":"#Label of 4th row\ntrain_data.iloc[2,0]","2077b33c":"X=train_data.iloc[:,1:]\nY=train_data.iloc[:,0]","35c48551":"#Creating training and testing samples from train_data with a ratio of 7:3(train:test)\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,train_size=0.7,random_state=42)","adc2340a":"model=RandomForestClassifier(n_estimators=200,max_samples=0.5)\nmodel.fit(x_train,y_train)","3940f47f":"pred=model.predict(x_test)\npred","516a700f":"pred.shape","ad4f4730":"#accuracy of training sample of train_data\nmodel.score(x_train,y_train)","562b8c96":"#accuracy of testing sample of train_data\nmodel.score(x_test,y_test)","fe603540":"confusion_matrix(pred,y_test)","2c8d3fdb":"print(classification_report(pred,y_test))","895f9cc3":"#random values of testing sample of train_data\ny_test[5:10]","49c4d8b6":"pred[5:10]","bbbf22f2":"test_data_prediction=model.predict(test_data)\ntest_data_prediction","3dc5b48d":"test_data_prediction.shape","28072836":"#Visualizing the 39th row of test_data\nb=test_data.iloc[39,0:].values\nb=b.reshape(28,28)\nplt.imshow(b)","17fce318":"#The 39th value of prediction data\ntest_data_prediction[39]","84508eeb":"print(\"Predicted \"+ str(y_test.iloc[np.where(y_test!=pred)[0][8]]) + \" as \"+str(pred[np.where(y_test!=pred)[0][8]]) )\nplt.imshow(np.array(x_test.iloc[np.where(y_test!=pred)[0][8]]).reshape(28,28))","f8264103":"np.where(train_data['label']==9)","49936dc8":"b=train_data.iloc[28,1:].values\nb=b.reshape(28,28)\nplt.imshow(b)","5e0a33c2":"Classification report shows that model accuracy is 96% ****\n\n","091983a9":"lets check 5 values from the testing data of train_data with predicted ****data\n\n","bf0489df":"from the above two cells we can see that there is 100% accuracy in the prediction hence we trained a very good model and now we can use the model to predict the test data ","aff94f49":" lets crosscheck the test_data digits and the test_data_predicted digits ****","a8468661":"checking the wrongly predicted values ","789ddab5":"# # using random forest classifier to build model by using train data******","160dc032":"digits are predicted correctly. Hence we can say that the model is pretty much useful in predicting handwritten digit.","530a1a57":"* ****Check the label of  random row in train data ****"}}