{"cell_type":{"8b2c3dac":"code","49cc18f7":"code","4aa2ce29":"code","d50a8679":"code","c00cbaeb":"code","638a7ba3":"code","28eb08c6":"code","ce1e7ee3":"code","98de01fe":"code","9b505ac1":"code","09d7f8fb":"code","c441b83e":"code","349d5eb5":"code","af55babb":"code","27e302bb":"code","9849f643":"code","459cf47d":"code","8e183798":"code","f7dc5615":"markdown","7dea9d2e":"markdown","e860f4a0":"markdown","c8201d56":"markdown","eb06ac6a":"markdown","b062bf58":"markdown","a3ac27c1":"markdown"},"source":{"8b2c3dac":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nufc_fight = pd.read_csv('\/kaggle\/input\/ufcdata\/data.csv', parse_dates = ['date'])","49cc18f7":"ufc_fight.isnull().sum()","4aa2ce29":"ufc_fight.head()","d50a8679":"ufc_fight.shape","c00cbaeb":"R,B,D =ufc_fight['Winner'][ufc_fight['no_of_rounds']==5].value_counts()\nsns.countplot(ufc_fight['Winner'][ufc_fight['no_of_rounds']==5],palette = ['Red', 'Blue', 'Green'])\nprint('For a five round match number of matches won by Red and Blue team Individualy:')\nprint('                 Red = %d , Blue = %d'%(R, B))","638a7ba3":"sns.countplot(ufc_fight['Winner'][ufc_fight['no_of_rounds']==3],palette = ['Red', 'Blue', 'Green'])\nRe,Bl,Dr = ufc_fight['Winner'][ufc_fight['no_of_rounds']==3].value_counts()\nprint('For a 3 round match individual contribution of Red and Blue teams')\nprint('         Red = %d , Blue = %d'%(Re,Bl))","28eb08c6":"a =ufc_fight['Winner'][ufc_fight['title_bout']== True]\nsns.countplot(a, palette = ['Red', 'Blue', 'Green'])\nred , blue, draw = a.value_counts()\nprint('Number of title bout won by Red Fighter : ',red )\nprint('Number of title bout won by blue fighter: ', blue)","ce1e7ee3":"#Setting Date as Index\n#Making on extra Column for year.\nufc_fight =ufc_fight.set_index('date')\nufc_fight['year'] = ufc_fight.index.year\n","98de01fe":"sns.relplot(x = 'no_of_rounds', y = 'year',col = 'Winner',kind = 'line',data = ufc_fight)","9b505ac1":"#Processing the data, remove the unwanted columns like names, country , referee, etc\n#Author had already given the processed data\nprocessed_data = pd.read_csv('\/kaggle\/input\/ufcdata\/preprocessed_data.csv')\nprocessed_data.head()","09d7f8fb":"#Converting this categorical values (Blue, Red) present in Winner Column to 0 and 1 \n#Creating a variable named target (of series datatype).\ntarget =processed_data['Winner'].astype('category').cat.codes\nprocessed_data.drop(['Winner','B_draw','R_draw'], axis = 1, inplace = True)","c441b83e":"#Checking for null values.\nprocessed_data.isnull().sum()","349d5eb5":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,f1_score\nfrom sklearn.metrics import accuracy_score","af55babb":"x_train, x_test, y_train,y_test = train_test_split(processed_data,target, test_size = 0.3, random_state = 42)","27e302bb":"random = RandomForestClassifier(n_estimators = 350)\nrandom.fit(x_train,y_train)\ntarget_pred = random.predict(x_test)\nf1scr = f1_score(y_test,target_pred)*100\naccuracy = accuracy_score(y_test,target_pred)*100\nprint('f1 score for Random Forest Classifier is :',f1scr)\nprint('Accuracy of the model is :', accuracy)\nconfu_mat =confusion_matrix(y_test,target_pred)\nsns.heatmap(confu_mat, annot = True, fmt = '.2f',annot_kws={'size':16}, cmap = 'coolwarm')\n","9849f643":"logist = LogisticRegression(max_iter = 500)\nlogist.fit(x_train,y_train)\nlog_predict  = logist.predict(x_test)\nf1_score = f1_score(y_test, log_predict)*100\nacc_score = accuracy_score(y_test,log_predict)*100\nprint('f1 score for Logistic Regression Classifier is :', f1_score)\nprint('Accuracy of this model is :', acc_score)\nc_m = confusion_matrix(y_test,log_predict)\nsns.heatmap(c_m, annot =True, fmt = '.2f', annot_kws={'size':16}, cmap = 'coolwarm')","459cf47d":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score, f1_score\nfrom sklearn.metrics import confusion_matrix\nmodel = CatBoostClassifier(iterations = 500,learning_rate = 0.15)\ntrain_x,test_x,train_y,test_y = train_test_split(processed_data, target, test_size = 0.3)\nmodel.fit(train_x,train_y,eval_set = (test_x,test_y))","8e183798":"predict = model.predict(test_x)\nf1_scre  = f1_score(test_y,predict)*100\naccura = accuracy_score(test_y, predict)*100\nprint('F1 Score for Cat Boost Algorithm is :', f1_scre)\nprint('Accuracy of Cat Boost Algorithm is:', accura)\ncma =confusion_matrix(test_y, predict)\nsns.heatmap(cma, annot = True, fmt = '.2f', annot_kws = {'size': 16}, cmap = 'Blues')","f7dc5615":"Winners","7dea9d2e":"****CatBoost Classifier","e860f4a0":"****Red Team was on Win streak from 1993 to 2011. (Unbeatable)\n","c8201d56":"**Importing the modules required for creating the model","eb06ac6a":"****Random Forest","b062bf58":"**Logistic Regression","a3ac27c1":"****Number of Title Matches won by Individual Team's"}}