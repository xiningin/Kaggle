{"cell_type":{"6e28798f":"code","2965e820":"code","e1124d9d":"code","ff90fbe2":"code","d9592209":"code","efa1fb17":"code","70494bef":"code","6c667e57":"code","19469719":"code","c7a68268":"code","6b587896":"code","85ebc7f2":"code","227ed6ea":"code","59ea45d1":"code","b95346ba":"code","0b2862dd":"code","78e42fb7":"code","673633d7":"code","4237b38a":"code","de4de37d":"code","de31d8bb":"code","68d3be59":"code","81aa93f9":"code","147806f6":"code","2c32a820":"code","dd645ddc":"code","82e4f191":"code","4b8cee89":"code","a93fd9b0":"code","20d13c0d":"code","202bebb5":"code","6728b635":"code","ab3c4510":"code","95bc979b":"code","959b8df1":"code","caf98eb8":"code","6e0c9a4b":"code","f0605707":"code","d72c47f2":"markdown","272ce6d6":"markdown","36ef7e79":"markdown","553f04a8":"markdown","3a237620":"markdown","5ffe3840":"markdown","0121937f":"markdown","754f90a0":"markdown","d5c6ff6d":"markdown","91aa282d":"markdown","b6abe066":"markdown","bc855247":"markdown","8a35419d":"markdown","fa6509c6":"markdown","98dd9628":"markdown"},"source":{"6e28798f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","2965e820":"data=pd.read_csv('..\/input\/indian-premier-league-csv-dataset\/Ball_by_Ball.csv')\ndata1=pd.read_csv(\"..\/input\/indian-premier-league-csv-dataset\/Player.csv\")\ndata2=pd.read_csv('..\/input\/indian-premier-league-csv-dataset\/Match.csv')\ndata3=pd.read_csv(\"..\/input\/indian-premier-league-csv-dataset\/Player_Match.csv\")\ndata4=pd.read_csv('..\/input\/indian-premier-league-csv-dataset\/Season.csv')\ndata5=pd.read_csv(\"..\/input\/indian-premier-league-csv-dataset\/Team.csv\")","e1124d9d":"data['Total']=data['Batsman_Scored']+data['Extra_Runs']\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\ndata['Extra_Runs']=data['Extra_Runs'].replace(' ','0').astype(int)\nball=pd.DataFrame(data)\nball=ball.loc[(ball.Dissimal_Type != 'run out') & \n                             (ball.Dissimal_Type != 'hit wicket') & \n                             (ball.Dissimal_Type != ' ') & (ball.Dissimal_Type != 'retired hurt')]\nwicket=ball.groupby(['Bowler_Id'])\nwickets=wicket['Dissimal_Type'].count()\na=pd.DataFrame(wickets)\nplayer_name=data1.rename(index=str,columns={'Player_Id':'Bowler_Id'})\nplayer_name=player_name.drop(['Is_Umpire','Unnamed: 7'],axis=1)\ndf=a.merge(player_name,on='Bowler_Id')\nb=df.loc[:,['Bowler_Id','Player_Name','Dissimal_Type']].sort_values(by='Dissimal_Type',\n            ascending=False).rename(columns={'Dissimal_Type':'Total_wickets'})\n\nbowler_wickets=b.loc[(b.Total_wickets>=1),:].head(50).drop('Bowler_Id',axis=1)\nbowlers_with_one_wicket=b.loc[(b.Total_wickets==1),:]\n\n\ntop10_bowlers=bowler_wickets.head(10)\nbottom_10=bowlers_with_one_wicket.sort_values(by='Total_wickets',ascending=True).head(10).drop('Bowler_Id',axis=1)\n\n","ff90fbe2":" #-----------------top 50 bowlers 0f all seasons-------------------\nprint('\\n\\n<------------------Top 50 bowlers of all Seasons---------------------->\\n\\n')\nprint(bowler_wickets)\nname=b['Player_Name']\nwickets=b['Total_wickets']\nplt.figure(figsize=(15,10))\nsns.barplot(x='Total_wickets', y=\"Player_Name\", data=bowler_wickets,palette='dark')\nplt.title('Player_name vs Max_Wickets',fontsize=20)\nplt.xticks(rotation=90)\n\n                   #-----------------top 10 bowlers 0f all seasons-------------------\n\nprint('\\n\\n<------------------Top 10 bowlers of all Seasons---------------------->\\n\\n')\nprint(top10_bowlers)\nf,axes=plt.subplots(2,1,figsize=(10,10))\nsns.barplot(x='Total_wickets', y=\"Player_Name\", data=top10_bowlers,ax=axes[0])\naxes[0].set_title('Top_10 bowlers of all seasons',fontsize=16)\n\n                   #-----------------top 10 bowlers 0f all seasons-------------------\n\nprint('\\n\\n<------------------Bottom 10 bowlers of all Seasons---------------------->\\n\\n')\nprint(bottom_10)\nsns.barplot(x='Total_wickets', y=\"Player_Name\", data=bottom_10,ax=axes[1])\naxes[1].set_title('Bottom_10 bowlers of all seasons',fontsize=16)","d9592209":"#highest runs\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\nrun=data.groupby(['Striker_Id'])\nrun1=run['Batsman_Scored'].sum().sort_values()\nruns=pd.DataFrame(run1)\nruns.sort_values(by='Batsman_Scored',ascending=False)\nbatsman=data1.rename(index=str,columns={'Player_Id':'Striker_Id'})\nbatsman=batsman.drop(['Is_Umpire','Unnamed: 7'],axis=1)\nbatsman_name=runs.merge(batsman,on='Striker_Id')\nbatsman_name=batsman_name.loc[:,['Striker_Id','Player_Name',\n            'Batsman_Scored']].sort_values(by='Batsman_Scored',ascending=False)\n\nplayers_runs=batsman_name.loc[(batsman_name.Batsman_Scored>=1),:].head(50).drop('Striker_Id',axis=1)\nplayers_with_zero_runs=batsman_name.loc[(batsman_name.Batsman_Scored==0),('Player_Name','Batsman_Scored')]\n\n\nprint('We are ignoring batsmen who scored zero score because\\nthose values cant be plotted on the graph and it is showing -ve values on score(axis)')\nprint(players_with_zero_runs)\n\ntop10_batsmen=players_runs.head(10)\nbottom10_batsmen=players_runs.sort_values(by='Batsman_Scored').head(10)\n\nsns.set_style(\"darkgrid\")\nplt.figure(figsize=(15,10))\n                   #-----------------top 50 batsmen 0f all seasons-------------------\nprint('\\n\\n<------------------Top 50 batsmen of all Seasons---------------------->\\n\\n')\nprint(players_runs)\nsns.barplot(x='Player_Name', y='Batsman_Scored', data=players_runs,palette='dark')\nplt.title('Player_name vs Max_Runs',fontsize=20)\nplt.xticks(rotation=90)\n\n\n                   #-----------------top 10 batsmen 0f all seasons-------------------\nprint('\\n\\n<------------------Top 10 batsmen of all Seasons---------------------->\\n\\n')\nprint(top10_batsmen)\nf,axes=plt.subplots(2,1,figsize=(10,10))\nsns.barplot(x='Batsman_Scored', y=\"Player_Name\", data=top10_batsmen,ax=axes[0],palette='bright')\naxes[0].set_title('Top_10 batsmen of all seasons')\n\n                   #-----------------bottom 10 batsmen 0f all seasons-------------------\nprint('\\n\\n<------------------Top 10 batsmen of all Seasons---------------------->\\n\\n')\nprint(bottom10_batsmen)\naxes[1].set_title('Bottom_10 batsmen of all seasons')\nsns.barplot(x='Batsman_Scored', y=\"Player_Name\", data=bottom10_batsmen,ax=axes[1],palette='colorblind')","efa1fb17":"data['Batsman_Scored']=data['Batsman_Scored'].astype(str)\nfour=data[data['Batsman_Scored'] == '4']\na=four.groupby('Striker_Id')['Batsman_Scored'].count()\nb=pd.DataFrame({'Player_Id': a.index, 'Max_fours':a.values})\nb.sort_values(by='Max_fours',ascending=False)\nmax_fours=b.merge(data1,on='Player_Id')\nmax_fours=max_fours.loc[:,['Player_Name','Max_fours']].sort_values(by='Max_fours',ascending=False).head(30)\n\nprint('\\n\\n<---------------------------Top 30 players with maximum number of fours of all season-------------------->\\n\\n')\nprint(max_fours)\n\nplt.figure(figsize=(6.89,5.5))\nplt.title('Players vs max_fours',fontsize=16)\nsns.barplot(x='Player_Name', y='Max_fours', data=max_fours,palette='dark')\nplt.xticks(rotation=90)\n\n\n#<------------------------------------season wise max fours----------------------------------------->\n\nfours=data.loc[(data['Batsman_Scored'] == '4'),('Match_Id','Striker_Id','Batsman_Scored')]\nseason=data2.loc[:,('Match_Id','Season_Id')]\nfours=fours.merge(season,on='Match_Id')\nfours=fours.groupby(['Season_Id','Striker_Id'])['Batsman_Scored'].count().reset_index()\nplayer=data1.loc[:,('Player_Id','Player_Name')].rename(columns={'Player_Id':'Striker_Id'})\nfours=fours.merge(player,on='Striker_Id').rename(columns={'Batsman_Scored':'Season_wise_max_fours'})\nfours=fours.sort_values(by=['Season_Id','Season_wise_max_fours'],ascending=[True,False]).drop('Striker_Id',axis=1)\nfours=fours.loc[(fours.Player_Name=='SK Raina') | (fours.Player_Name=='MS Dhoni') | (fours.Player_Name=='V Kohli') | (fours.Player_Name=='RG Sharma') | (fours.Player_Name=='CH Gayle'),:]\n\nprint('\\n\\n<--------------------Comparison of maximum fours of some players of all seasons------------------------>\\n\\n')\nprint(fours)\ngrid=sns.catplot(x=\"Season_Id\", y=\"Season_wise_max_fours\",kind='bar',hue=\"Player_Name\",data=fours,palette='dark')\nplt.title('Comparison of maximum fours of some players of all seasons',fontsize=14)\n\n","70494bef":"#<-----------------------------------------max_sixes--------------------------------------------------->\n\nball2=pd.DataFrame(data)\nsix=ball2[ball2['Batsman_Scored'] == '6']\nc=six.groupby('Striker_Id')['Batsman_Scored'].count().reset_index()\nb=c.sort_values(by='Batsman_Scored',ascending=False).rename(columns={'Batsman_Scored':'Max_sixes',\n                                                                     'Striker_Id':'Player_Id'})\nmax_sixes=b.merge(data1,on='Player_Id')\nmax_sixes=max_sixes.loc[:,['Player_Name','Max_sixes']].sort_values(by='Max_sixes',ascending=False).head(30)\nprint('\\n\\n<---------------------------Top 30 players with maximum number of Sixes of all season-------------------->\\n\\n')\nprint(max_sixes)\n\nplt.figure(figsize=(6.89,5.5))\nplt.title('Player Names vs max_sixes',fontsize=16)\nsns.barplot(x='Player_Name', y='Max_sixes', data=max_sixes,palette='dark')\nplt.xticks(rotation=90)\n\n#<---------------------------------------season wise max sixes------------------------------------------->\n\ns_six=data.loc[:,('Match_Id','Striker_Id','Batsman_Scored')]\ns_six=ball2[ball2['Batsman_Scored'] == '6']\nseason=data2.loc[:,('Match_Id','Season_Id')]\ns_six=s_six.merge(season,on='Match_Id')\nseason_six=s_six.groupby(['Season_Id','Striker_Id'])['Batsman_Scored'].count().reset_index()\nplayer=data1.loc[:,('Player_Id','Player_Name')].rename(columns={'Player_Id':'Striker_Id'})\nseason_six=season_six.merge(player,on='Striker_Id').rename(columns={'Batsman_Scored':'Season_wise_max_sixes'})\nseason_six=season_six.sort_values(by=['Season_Id','Season_wise_max_sixes'],ascending=[True,False]).drop('Striker_Id',axis=1)\nseason_six=season_six.loc[(season_six.Player_Name=='SK Raina') | (season_six.Player_Name=='MS Dhoni') | (season_six.Player_Name=='V Kohli') | (season_six.Player_Name=='RG Sharma') | (season_six.Player_Name=='CH Gayle'),:]\n\nprint('\\n\\n<--------------------Comparison of maximum Sixes of some players of all seasons------------------------>\\n\\n')\nprint(season_six)\n\ngrid=sns.catplot(x=\"Season_Id\", y=\"Season_wise_max_sixes\",kind='bar',hue=\"Player_Name\",data=season_six)\nplt.title('Comparison of maximum Sixes of some players of all seasons',fontsize=14)","6c667e57":"#matches in each stadium\n\nvnu=data2.groupby('Venue_Name')\nvenue=vnu['Match_Id'].count()\nmost_matches=pd.DataFrame(venue)\nmost_matches=most_matches.sort_values(by='Match_Id',\n                    ascending=False).reset_index().rename(columns={'Match_Id':'Total_matches'})\n\n\nprint('\\n\\n<--------------------------Number of matches in each stadium in all seasons----------------------->\\n\\n ')\nprint(most_matches)\n\n\n\nplt.figure(figsize=(15,10))\nplt.title('Stadiums vs Number of Matches',fontsize=20)\nsns.barplot(x=\"Venue_Name\", y=\"Total_matches\",palette=\"deep\",data=most_matches)\nplt.xticks(rotation=90)\n","19469719":"#<-----------------------------------man of the match-------------------------------------------->\n\ndata2['Man_Of_The_Match_Id']=data2['Man_Of_The_Match_Id'].astype(str).astype(float)\na=data2.loc[:,('Match_Id','Man_Of_The_Match_Id')]\ndata1['Player_Id']=data1['Player_Id'].astype(float)\nb=data1.loc[:,('Player_Id','Player_Name')]\nc=b.rename(index=str,columns={'Player_Id':'Man_Of_The_Match_Id'})\nd=a.merge(c,on='Man_Of_The_Match_Id')\ne=d.sort_values(by='Man_Of_The_Match_Id')\nl=e.groupby('Man_Of_The_Match_Id')['Player_Name'].count()\nf=c.merge(l,on='Man_Of_The_Match_Id')\nh=f.rename(columns={'Player_Name_x':'Player_Name','Player_Name_y':'most_man_of_the_match_awards'})\nh=h.sort_values(by='most_man_of_the_match_awards',ascending=False).head(10).drop('Man_Of_The_Match_Id',axis=1)\n\nprint('\\n\\n<------------------------LIST OF PLAYERS WITH MAXIMUM NUMBER OF MAN OF THE MATCH AWARDS------------------------>\\n\\n')\nprint(h)\n\nplt.figure(figsize=(6.89,5.5))\nplt.title('Players Name vs No. of man of the match awards',fontsize=20)\nsns.barplot(x='Player_Name', y=\"most_man_of_the_match_awards\", data=h)\nplt.xticks(rotation=90)\n\n\n#<------------------------------------most man of the match in each season--------------------------------->\n\nseason=data4.loc[:,('Season_Id','Season_Year')]\ndata2['Man_Of_The_Match_Id']=data2['Man_Of_The_Match_Id'].astype(str).astype(float)\na=data2.loc[:,('Match_Id','Man_Of_The_Match_Id','Season_Id')]\ndata1['Player_Id']=data1['Player_Id'].astype(float)\nb=data1.loc[:,('Player_Id','Player_Name')]\nc=b.rename(index=str,columns={'Player_Id':'Man_Of_The_Match_Id'})\ne=a.merge(c,on='Man_Of_The_Match_Id')\ne=e.groupby(['Season_Id','Player_Name'])['Man_Of_The_Match_Id'].count().reset_index().rename(columns={'Man_Of_The_Match_Id':'Man_of_the_match_awards'}).merge(season,on='Season_Id').drop('Season_Id',axis=1)\n\nseason_mom=e.loc[(e.Player_Name=='SK Raina') | (e.Player_Name=='MS Dhoni') | (e.Player_Name=='V Kohli') | (e.Player_Name=='RG Sharma') | (e.Player_Name=='CH Gayle'),:]\nprint('\\n\\n<------------------------COMPARISON OF SOME PLAYERS WITH MAXIMUM NUMBER OF MAN OF THE MATCH AWARDS------------------------>\\n\\n')\nprint(season_mom)\n\n\nGrid=sns.catplot(x=\"Season_Year\", y=\"Man_of_the_match_awards\",kind='bar',hue=\"Player_Name\",data=season_mom)\nplt.title('COMPARISON OF SOME PLAYERS WITH MAXIMUM NUMBER OF MAN OF THE MATCH AWARDS IN EACH SEASON',fontsize=12)","c7a68268":"#<-----------------------------------purple cap---------------------------------------->\n\npcap=data4.loc[:,('Season_Year','Purple_Cap_Id')]\nplyr=data1.loc[:,('Player_Id','Player_Name')]\nnw_plyr=plyr.rename(columns={'Player_Id':'Purple_Cap_Id'})\npurplecap=nw_plyr.merge(pcap,on='Purple_Cap_Id')\npurplecap=purplecap.loc[:,('Player_Name','Season_Year')].sort_values(by='Season_Year')\nprint('<-----------------------------------SEASON WISE PURPLE CAP WINNER--------------------------------->')\nprint(purplecap)\n\nplt.figure(figsize=(10,10))\nplt.title('Season wise Purple Cap Winner',fontsize=16)\nplt.plot( purplecap[\"Season_Year\"],purplecap['Player_Name'],color='k')\nplt.scatter( purplecap[\"Season_Year\"],purplecap['Player_Name'],color='teal')\nplt.show()","6b587896":"#<-------------------------------------------orange cap------------------------------------------------>\n\nocap=data4.loc[:,('Season_Year','Orange_Cap_Id')]\nplyr1=data1.loc[:,('Player_Id','Player_Name')]\nnw_plyr=plyr1.rename(columns={'Player_Id':'Orange_Cap_Id'})\norangecap=nw_plyr.merge(ocap,on='Orange_Cap_Id')\norangecap=orangecap.loc[:,('Player_Name','Season_Year')].sort_values(by='Season_Year')\nprint('<-----------------------------------SEASON WISE ORANGE CAP WINNER--------------------------------->')\nprint(orangecap)\n\nplt.figure(figsize=(10,10))\nplt.title('Season wise Orange Cap Winner',fontsize=16)\nplt.plot(orangecap[\"Season_Year\"],orangecap['Player_Name'], color='y')\nplt.scatter( orangecap[\"Season_Year\"],orangecap['Player_Name'],color='m')\nplt.xticks(rotation=90)","85ebc7f2":"#<-------------------------------------------man of the series------------------------------------------->\n\nmos=data4.loc[:,('Season_Year','Man_of_the_Series_Id')]\nplyr2=data1.loc[:,('Player_Id','Player_Name')]\nnw_plyr1=plyr2.rename(columns={'Player_Id':'Man_of_the_Series_Id'})\nman_of_series=nw_plyr1.merge(mos,on='Man_of_the_Series_Id')\nman_of_series=man_of_series.loc[:,('Player_Name','Season_Year')].sort_values(by='Season_Year')\nprint('<-------------------------MAN OF THE SERIES WINNER OF ALL SEASONS--------------------------->')\nprint(man_of_series)\n\nplt.figure(figsize=(10,10))\nplt.title('Man of the Series Winner of all Seasons',fontsize=16)\nplt.plot( man_of_series[\"Season_Year\"],man_of_series['Player_Name'],color='navy')\nplt.scatter( man_of_series[\"Season_Year\"],man_of_series['Player_Name'],color='red')\nplt.xticks(rotation=90)","227ed6ea":"#<-------------------------team match winnners and man of the match------------------------------------->\n\nmom=data2.loc[:,('Match_Date','Match_Id','Team_Name_Id','Opponent_Team_Id','Toss_Winner_Id','Win_Type','Won_By','Match_Winner_Id','Man_Of_The_Match_Id')]\nplr=data1.loc[:,('Player_Id','Player_Name')]\nplr=plr.rename(columns={'Player_Id':'Man_Of_The_Match_Id'})\nmom=plr.merge(mom,on='Man_Of_The_Match_Id')\nteam_name=data5.loc[:,('Team_Id','Team_Short_Code')].rename(columns={'Team_Id':'Team_Name_Id'})\nmom=team_name.merge(mom,on='Team_Name_Id')\nteam_name=team_name.rename(columns={'Team_Name_Id':'Opponent_Team_Id'})\nmom=team_name.merge(mom,on='Opponent_Team_Id').drop(['Opponent_Team_Id','Team_Name_Id'\n,'Man_Of_The_Match_Id'],axis=1).rename(columns={'Team_Short_Code_x':'Team_1',\n    'Team_Short_Code_y':'Opposite_team','Player_Name':'Man_of_the_match'})\nteam_name=team_name.rename(columns={'Opponent_Team_Id':'Toss_Winner_Id'})\nmom=team_name.merge(mom,on='Toss_Winner_Id').rename(columns={'Team_Short_Code':'Toss_winner_Team'})\nteam_name=team_name.rename(columns={'Toss_Winner_Id':'Match_Winner_Id'})\nmom=team_name.merge(mom,on='Match_Winner_Id').rename(columns={'Team_Short_Code':'Winning_team'}).drop(['Match_Winner_Id'\n                                                        ,'Toss_Winner_Id'],axis=1).sort_values(by='Match_Id')\n\nteams=mom[['Match_Id','Match_Date','Team_1','Opposite_team','Toss_winner_Team',\n           'Winning_team','Win_Type','Won_By','Man_of_the_match']]\nprint('\\n\\n<-----------------------------Teams Matches and Winners with Man of the Match--------------------------->\\n\\n')\nprint(teams)","59ea45d1":"#<---------------------------------Season Wise Winner------------------------------------->\n\nseason=data4.loc[:,('Season_Id','Season_Year')]\nssn=data2.loc[:,('Season_Id','Match_Winner_Id')]\nwinner=ssn.groupby('Season_Id').tail(1)\nteams=data5.loc[:,('Team_Id','Team_Short_Code')]\nteams=teams.rename(columns={'Team_Id':'Match_Winner_Id','Team_Short_Code':'Team_name'})\nteams=teams.merge(winner,on='Match_Winner_Id')\nteams=teams.sort_values(by='Season_Id').drop('Match_Winner_Id',axis=1).merge(season,\n                                                        on='Season_Id').drop('Season_Id',axis=1)\nprint('<---------------------------SEASON WISE WINNERS OF ALL SEASONS----------------------------->')\nprint(teams)\nplt.figure(figsize=(10,10))\nplt.title('Season wise Winner', fontsize=16)\n#sns.lineplot(teams['Team_name'], teams[\"Season_Year\"],color='olive',data=teams)\nsns.scatterplot(teams['Team_name'], teams[\"Season_Year\"],hue='Team_name',data=teams,palette='dark')\n","b95346ba":"#<----------------------------------top 10 players of all seasons------------------------------------->\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\nrun=data.groupby(['Striker_Id'])\nrun1=run['Batsman_Scored'].sum().sort_values()\nruns=pd.DataFrame(run1)\nruns.sort_values(by='Batsman_Scored',ascending=False)\nbatsman=data1.rename(index=str,columns={'Player_Id':'Striker_Id'})\nbatsman=batsman.drop(['Is_Umpire','Unnamed: 7'],axis=1)\nbatsman_name=runs.merge(batsman,on='Striker_Id')\nbatsman_name=batsman_name.loc[:,['Striker_Id','Player_Name','Batsman_Scored']].sort_values(by='Striker_Id')\nmatches=data.loc[:,('Match_Id','Striker_Id')]\nmatches=matches.groupby('Striker_Id')['Match_Id'].unique() \n\n#<--------------------------------------Matches------------------------------------------>\n\nl=[]\nfor i in range(len(matches.values)):\n    a=matches.values[i]\n    l.append(a.size)\nbatsman_name['Matches'] = l    \nbatsman_name['Average']= round(batsman_name['Batsman_Scored'] \/ batsman_name['Matches'])\n\n#<-------------------------------------sixes------------------------------------------------>\n\nsix=data[data['Batsman_Scored'] == 6]\nsix=six.groupby('Striker_Id')['Batsman_Scored'].count().reset_index()\nTop_10=six.merge(batsman_name,on='Striker_Id').rename(columns={'Batsman_Scored_x':'Sixes'})\n\n#<---------------------------------------fours------------------------------------------------>\n\nfours=data[data['Batsman_Scored'] == 4]\nfours=fours.groupby('Striker_Id')['Batsman_Scored'].count().reset_index()\nTop_10=fours.merge(Top_10,on='Striker_Id').rename(columns={'Batsman_Scored':'Fours','Batsman_Scored_y':'Total_runs'})\n\n#<--------------------------------------------Highest runs-------------------------------------->\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\nh_score=data.loc[:,('Match_Id','Striker_Id','Batsman_Scored')]\nhighest_runs=h_score.groupby(['Match_Id','Striker_Id'])['Batsman_Scored'].sum().reset_index()\nhighest_runs=highest_runs.drop('Match_Id',axis=1)\nhighest_runs=highest_runs.sort_values(by='Batsman_Scored',ascending=False)\nhighest_runs=highest_runs.drop_duplicates(subset='Striker_Id',keep='first')\nTop_10=Top_10.merge(highest_runs,on='Striker_Id').rename(columns={'Batsman_Scored_x':'Total_runs',\n                                'Batsman_Scored_y':'Highest_runs','Batsman_Scored':'Highest_runs'})\nTop_10=Top_10.sort_values(by='Total_runs',ascending=False).head(10).drop('Striker_Id',axis=1)\nTop_10=Top_10[['Player_Name','Matches','Total_runs','Average','Sixes','Fours','Highest_runs']]\n\n\nplt.figure(figsize=(10,10))\nsns.lineplot(x=\"Player_Name\", y=\"Total_runs\",data=Top_10)\nsns.lineplot(x=\"Player_Name\", y=\"Fours\",data=Top_10)\nsns.lineplot(x=\"Player_Name\", y=\"Matches\",data=Top_10)\nsns.lineplot(x=\"Player_Name\", y=\"Sixes\",data=Top_10)\nsns.lineplot(x=\"Player_Name\", y=\"Highest_runs\",data=Top_10)\nsns.lineplot(x=\"Player_Name\", y=\"Average\",data=Top_10)\nplt.xticks(rotation=90)\nplt.legend(['Total_runs','Fours','Matches','Sixes','Highest_runs','Average'])\nprint(Top_10)","0b2862dd":"#<---------------------------total no of scores get by a bowler in all seasons--------------------------------->\n\nmax_score=data.groupby('Bowler_Id')['Batsman_Scored'].count()\nmax_score=pd.DataFrame(max_score)\nnw_plyr=plyr.rename(columns={'Player_Id':'Bowler_Id'})\nmax_score_bowler=nw_plyr.merge(max_score, on='Bowler_Id')\nmax_score_bowler=max_score_bowler.rename(columns={'Batsman_Scored':'Max_score_get'})\n\nprint('\\n\\n<--------------------------TOP_10 BOWLERS WITH MAX SCORES GET----------------------------->\\n\\n')\nTop10_max_score_bowler=max_score_bowler.sort_values(by='Max_score_get',ascending=False).head(10)\nprint(Top10_max_score_bowler)\n\nprint('\\n\\n<-------------------------BOTTOM_10 BOWLERS WITH MAX SCORES GET------------------------------>\\n\\n')\nBt10_max_score_bowler=max_score_bowler.sort_values(by='Max_score_get',ascending=True).head(10)\nprint(Bt10_max_score_bowler)\n\nprint('\\n\\n<-------------------------TOTAL NUMBER OF SCORES GET BY ANY BOWLER------------------------------>\\n\\n')\nmax_score_bowler=max_score_bowler.drop('Bowler_Id',axis=1).head(50)\nprint(max_score_bowler)\n\nplt.figure(figsize=(15,10))\nplt.title('Bowlers with maximum scores get in all seasons',fontsize=16)\nsns.lineplot(max_score_bowler['Player_Name'], max_score_bowler[\"Max_score_get\"])\nsns.scatterplot(max_score_bowler['Player_Name'], max_score_bowler[\"Max_score_get\"])\nplt.xticks(rotation=90)\n\n\nf,axes=plt.subplots(1,2,figsize=(15,5))\n\ny=Top10_max_score_bowler['Player_Name']\nx=Top10_max_score_bowler['Max_score_get']\n\ny1=Bt10_max_score_bowler['Player_Name']\nx1=Bt10_max_score_bowler['Max_score_get']\n\nsns.barplot(x,y,data=Top10_max_score_bowler,ax=axes[0],palette='OrRd')\naxes[0].set_title('Top 10 Bowlers with maximum scores get')\nsns.barplot(x1,y1,data=Bt10_max_score_bowler,ax=axes[1],palette='RdPu')\naxes[1].set_title('Bottom 10 Bowlers with maximum scores get')\n","78e42fb7":"#<--------------------------total no of dot balls by players in all seasons--------------------------------------->\n\nzeros=data[(data.Batsman_Scored==0)]\nzeros=zeros.groupby('Striker_Id')['Batsman_Scored'].count()\nmax_zero=pd.DataFrame(zeros)\nmax_zero=max_zero.sort_values(by='Batsman_Scored',ascending=False)\nplayer_name=data1.loc[:,('Player_Id','Player_Name')]\nplayer_name=player_name.rename(columns={'Player_Id':'Striker_Id'})\nplayer_name1=player_name.merge(max_zero,on='Striker_Id').sort_values(by='Batsman_Scored',ascending=False)\nplayer_name1=player_name1.drop('Striker_Id',axis=1).head(20).rename(columns={'Batsman_Scored':'Most_dot_balls'})\n\nplt.figure(figsize=(10,10))\nplt.title('Player with Max no of dot balls in all seasons')\nplt.plot(player_name1['Player_Name'], player_name1[\"Most_dot_balls\"],color='midnightblue')\nplt.scatter(player_name1['Player_Name'], player_name1[\"Most_dot_balls\"],color='k')\nplt.xticks(rotation=90)\nprint('\\n\\n<---------------------------Players with maximum numbers of Dot balls played----------------------------->\\n\\n')\nprint(player_name1)","673633d7":"#<-----------------------------------------super over------------------------------------------------>\n\nso=data2.loc[(data2.IS_Superover==1),('Match_Id','Match_Date','Season_Id','Team_Name_Id','Opponent_Team_Id','Match_Winner_Id','IS_Superover')]\ntm=data5.loc[:,('Team_Id','Team_Short_Code')]\nso1=so.rename(columns={'Team_Name_Id':'Team_Id'})\nso1=so1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\nso1=so1.rename(columns={'Opponent_Team_Id':'Team_Id'})\nso1=so1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\nteam=so1.rename(columns={'Team_Short_Code_x':'Team 1','Team_Short_Code_y':'opp_team','Match_Winner_Id':'Team_Id'})\nSuper_over=team.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\nSuper_over=Super_over[['Season_Id','Match_Id','IS_Superover','Match_Date','Team 1','opp_team','Team_Short_Code']].sort_values(by='Season_Id')\nSuper_over=Super_over.rename(columns={'Team_Short_Code':'Winning_team'}).drop(['IS_Superover','Match_Id'],axis=1)\n    \nprint('\\n\\n<-------------------------Super Overs In all Seasons--------------------------->\\n\\n')\nprint(Super_over)\n","4237b38a":"#<------------------------------toss winning and match winning-----------------------------------------> \n\ntoss=data2.loc[:,('Match_Id','Match_Date','Season_Id','Team_Name_Id','Opponent_Team_Id','Match_Winner_Id','Toss_Winner_Id')]\ntm=data5.loc[:,('Team_Id','Team_Short_Code')]\ntoss1=toss.rename(columns={'Team_Name_Id':'Team_Id'})\ntoss1=toss1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ntoss1=toss1.rename(columns={'Opponent_Team_Id':'Team_Id'})\ntoss1=toss1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ntoss1=toss1.rename(columns={'Toss_Winner_Id':'Team_Id'})\ntoss2=toss1.rename(columns={'Team_Short_Code_x':'Team 1','Team_Short_Code_y':'opp_team'})\ntoss2=toss2.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ntoss2=toss2.rename(columns={'Team_Short_Code':'Toss_winning_team'})\ntoss2=toss2.rename(columns={'Match_Winner_Id':'Team_Id'})\ntoss2=toss2.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ntoss_winning_team=toss2.rename(columns={'Team_Short_Code':'Winning_team'})\ntoss_winning_team=toss_winning_team.sort_values(by='Match_Id').head(10).drop('Match_Id',axis=1)\nprint('\\n\\n<---------------------TOSS WINNING AND MATCH WINNING---------------------------->\\n\\n')\nprint(toss_winning_team)","de4de37d":"#<--------------------------------total_wins_as_captain------------------------------------------->\n\ncaptain=data3.loc[(data3.Is_Captain== 1),('Match_Id','Player_Id','Is_Captain','Team_Id')]\nt=data2.loc[:,('Match_Id','Season_Id','Team_Name_Id','Opponent_Team_Id','Match_Winner_Id')]\ntable=t.merge(captain, on='Match_Id')\ntable=table.loc[(table.Is_Captain == 1)]\ntable=table.loc[(table.Match_Winner_Id== table.Team_Id)]\ntable=table.groupby('Player_Id')['Match_Winner_Id'].count()\ncaptain_win=pd.DataFrame(table)\nc=data1.loc[:,('Player_Id','Player_Name')]\ncaptain_win=c.merge(captain_win,on='Player_Id')\ncaptain_win=captain_win.sort_values(by='Match_Winner_Id',ascending=False).head(20)\ncaptain_win=captain_win.rename(columns={'Match_Winner_Id':'Total_wins_as_captain'}).drop('Player_Id',axis=1)\nprint('\\n\\n<-------------------------------TOTAL WINS AS CAPTAIN------------------------------------>\\n\\n')\nprint(captain_win)\n\nplt.figure(figsize=(10,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Player_Name', y=\"Total_wins_as_captain\", data=captain_win ,palette='dark')\nplt.title('Captains vs Total_wins',fontsize=16)\nplt.xticks(rotation=90)\n","de31d8bb":"#<--------------------------total matches in all seasons----------------------------------------------->\n\nseason=data4.loc[:,('Season_Id','Season_Year')]\nmatches=data2.loc[:,('Season_Id','Match_Id')]\nmatches=matches.groupby('Season_Id')['Match_Id'].count()\ns_matches=pd.DataFrame(matches).reset_index().rename(columns={'Match_Id':'Total_Matches'}).merge(season\n                                                ,on='Season_Id').drop('Season_Id',axis=1)\nprint('<-----------------------------TOTAL MATCHES IN ALL SEASONS ----------------------------------->')\nprint(s_matches)\n\n\nplt.figure(figsize=(15,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Season_Year', y=\"Total_Matches\", data=s_matches)\nplt.title('Total Matches in all Seasons')\nplt.xticks(rotation=90)","68d3be59":"#<---------------------------------------------max catches------------------------------------------------>\n\ncatch=data.loc[data.Dissimal_Type=='caught',('Dissimal_Type','Fielder_Id')]\ncatch['Fielder_Id']=catch['Fielder_Id'].astype(str).astype(float)\ncatch=catch.groupby('Fielder_Id')['Dissimal_Type'].count()\nplr=data1.loc[:,('Player_Id','Player_Name')]\nplr = plr.rename (columns={'Player_Id':'Fielder_Id'})\ncatches=plr.merge(catch,on='Fielder_Id')\ncatches=catches.sort_values(by='Dissimal_Type',ascending=False).drop('Fielder_Id'\n    ,axis=1).head(50).rename(columns={'Dissimal_Type':'Max_Catches'})\n\nprint('\\n\\n<---------------------FIELDERS WITH MAXIMUM NUMBER OF CATCHES-------------------------->\\n\\n')\nprint(catches)\nplt.figure(figsize=(15,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Player_Name', y=\"Max_Catches\", data=catches,palette='bright')\nplt.title('Fielders With Maximum Number of Catches',fontsize=16)\nplt.xticks(rotation=90)","81aa93f9":"#<---------------------------------keeper with max no of catches--------------------------------------->\n\nkeeper=data3.loc[data3.Is_Keeper==1]['Player_Id'].unique()\nkeeper=pd.Series(keeper)\nkeeper=pd.DataFrame({'Player_Id':keeper.values})\nplayer=data.loc[data.Dissimal_Type=='caught',('Dissimal_Type','Fielder_Id','Match_Id')]\nplayer['Fielder_Id']=player['Fielder_Id'].astype(str).astype(float)\nplayer=player.rename(columns={'Fielder_Id':'Player_Id'})\nplayer=player.groupby('Player_Id')['Dissimal_Type'].count()\nplayer=pd.DataFrame(player)\nplayer=player.sort_values(by='Dissimal_Type',ascending=False)\nplr=data1.loc[:,('Player_Id','Player_Name')]\nkeeper_name=plr.merge(player,on='Player_Id')\nkeeper_name=keeper_name.merge(keeper,on='Player_Id')\nkeeper_name=keeper_name.rename(columns={'Dissimal_Type':'Total_Catches','Player_Name':'Keeper_Name'})\ntotal_catches=keeper_name.sort_values(by='Total_Catches',ascending=False).drop('Player_Id',axis=1)\n\nprint('\\n\\n<------------------------KEEPER WITH MAXIMUM NUMBER OF CATCHES------------------------------->\\n\\n')\nprint(total_catches)\n\nplt.figure(figsize=(15,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Keeper_Name', y=\"Total_Catches\", data=total_catches,palette='colorblind')\nplt.title('Keeper With Maximum Number of Catches',fontsize=16)\nplt.xticks(rotation=90)","147806f6":"#<------------------------------total number of batting and fieling teams----------------------------->\n\na=data2.loc[:,('Team_Name_Id','Opponent_Team_Id','Match_Id'\n               ,'Toss_Decision')]\na=a.groupby('Toss_Decision')['Match_Id'].count().reset_index().rename(columns={'Match_Id':'count'})\n\nprint('\\n\\n<-------------------------TOTAL NUMBER OF BATTING AND FIELDING DECISIONS TAKEN------------------------------>\\n\\n')\nprint(a)\nsns.barplot(x=\"Toss_Decision\", y=\"count\", hue=\"count\", data=a)\nplt.title('Batting vs fielding',fontsize=16)","2c32a820":"#<----------------------------toss winning help in match winning--------------------------------->\n\nss=data2['Toss_Winner_Id'] == data2['Match_Winner_Id']\nss=ss.groupby(ss).count().reset_index()\nss=ss.rename(columns={'index':'Toss_winning' ,0:'count'})\nprint('<----------------------Does Toss winning help in match winning--------------------------------->')\nprint(ss)\nsns.barplot(x=\"Toss_winning\", y=\"count\", hue=\"count\",data=ss)\nplt.title('Does Toss winning help in match winning?',fontsize=16)","dd645ddc":"#<----------------------------------most successful IPL team---------------------------------------------->\n\nsuccessful_team=data2.Match_Winner_Id.value_counts().reset_index()\nsuccessful_team=successful_team.rename(columns={'index':'Team_Id'})\nteams=data5.loc[:,('Team_Id','Team_Short_Code')]\nteams=teams.rename(columns={'Team_Short_Code':'Team_name'})\nteams=teams.merge(successful_team,on='Team_Id')\nteams=teams.sort_values(by='Match_Winner_Id',ascending=False).drop('Team_Id'\n    ,axis=1).rename(columns={'Match_Winner_Id':'Total_wins'})\n\nprint('\\n\\n<---------------------------MOST WINS FOR A TEAM------------------------------------\\n\\n')\nprint(teams)\n\nplt.figure(figsize=(15,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Team_name', y=\"Total_wins\", data=teams,palette='muted')\n#sns.palplot(sns.hls_palette(8, l=.3, s=.8))\nplt.title('Most Successful IPL team',fontsize=16)\nplt.xticks(rotation=90)","82e4f191":"#<-------------------------------------- D\/Wl ------------------------------------------>\n\n\ndl=data2.loc[(data2.Is_DuckWorthLewis==1),('Match_Date','Season_Id',\n        'Team_Name_Id','Opponent_Team_Id','Match_Winner_Id','Win_Type','Is_DuckWorthLewis','Won_By')]\ntm=data5.loc[:,('Team_Id','Team_Short_Code')]\ndo1=dl.rename(columns={'Team_Name_Id':'Team_Id'})\ndl1=do1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ndl1=dl1.rename(columns={'Opponent_Team_Id':'Team_Id'})\ndl1=dl1.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\nteam=dl1.rename(columns={'Team_Short_Code_x':'Team 1','Team_Short_Code_y':'opp_team','Match_Winner_Id':'Team_Id'})\ndwl=team.merge(tm,on='Team_Id').drop('Team_Id',axis=1)\ndwl=dwl[['Season_Id','Match_Date','Team 1','opp_team','Team_Short_Code']].sort_values(by='Season_Id')\ndwl=dwl.rename(columns={'Team_Short_Code':'Winning_team'})\n\nprint('\\n\\n<-----------------------DUCK-WORTH LOUIS MATCHES IN ALL SEASONS-------------------------------->\\n\\n')\nprint(dwl)\n","4b8cee89":"#<------------------------------------------Umpires count---------------------------------------->\n\nu=data2.loc[:,('First_Umpire_Id','Match_Id')]\nump=data1.loc[(data1.Is_Umpire == 1),('Player_Id','Player_Name','Country')]\nump=ump.rename(columns={'Player_Id':'First_Umpire_Id'})\nbowden=ump.merge(u,on='First_Umpire_Id')\nbowden= bowden.groupby('Player_Name')['Match_Id'].count()\numpire=pd.DataFrame(bowden).sort_values(by='Match_Id'\n    ,ascending=False).reset_index().rename(columns={'Match_Id':'Total_matches_as_umpires'})\n\n\ntop_5=umpire.head(5)\nbottom_5=umpire.sort_values(by='Total_matches_as_umpires',ascending=True).head(5)\n\nprint('\\n\\n<--------------------UMPIRES AND THEIR COUNT OF MATCHES------------------------>\\n\\n')\nprint(umpire)\n\nprint('\\n\\n<------------------------TOP 5 UMPIRES WITH MAXIMUM NUMBER OF MATCHES---------------------------->\\n\\n')\nprint(top_5)\n\n\nprint('\\n\\n<------------------------BOTTOM 5 UMPIRES WITH MAXIMUM NUMBER OF MATCHES--------------------------->\\n\\n')\n\nprint(bottom_5)\n\nplt.figure(figsize=(15,10))\nsns.set_style('darkgrid')\nsns.barplot(x='Player_Name', y=\"Total_matches_as_umpires\", data=umpire)\nplt.title('Umpire names vs Total matches as Umpires',fontsize=16)\nplt.xticks(rotation=90)\n","a93fd9b0":"#<-------------------------------------High score by any player------------------------------------------>\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\nscore=data.loc[:,('Match_Id','Striker_Id','Batsman_Scored')]\nhighest=score.groupby(['Match_Id','Striker_Id'])['Batsman_Scored'].sum()\nhighest=pd.DataFrame(highest).reset_index()\nhighest=highest.rename(columns={'Striker_Id':'Player_Id'})\nplayer_name=data1.loc[:,('Player_Id','Player_Name')]\nplayer_name=player_name.merge(highest,on='Player_Id').sort_values(by='Batsman_Scored',\nascending=False).drop(['Match_Id','Player_Id'],axis=1).rename(columns={'Batsman_Scored':'High_score'}).head(200)\nplayer_name=player_name.drop_duplicates(subset='Player_Name',keep='first')\nprint('<\\n\\n-------------------HIGH SCORES OF ALL PLAYERS--------------------------->')\nprint(player_name)\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(15,8))\nsns.barplot(x=\"Player_Name\", y=\"High_score\", data=player_name,palette='YlGnBu')\nplt.xticks(rotation=90)","20d13c0d":"#<------------------------------ highest score by individual teams------------------------------------->\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\ndata['Extra_Runs']=data['Extra_Runs'].replace(' ','0').astype(int)\ndata['Total']=data['Batsman_Scored']+data['Extra_Runs']\n\nhigh=data.groupby(['Match_Id','Team_Batting_Id','Innings_Id'])['Total'].sum().reset_index()\ntm=data5.loc[:,('Team_Id','Team_Short_Code')]\ndo1=tm.rename(columns={'Team_Id':'Team_Batting_Id'})\nhigh_score=do1.merge(high,on='Team_Batting_Id').drop(['Innings_Id',\n     'Match_Id','Team_Batting_Id'],axis=1).sort_values(by='Total'\n        ,ascending=False).rename(columns={'Team_Short_Code':'Team_name','Total':'Highest_runs'})\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(15,8))\nplt.title('Teams scores of all Seasons',fontsize=16)\nsns.swarmplot(x=\"Team_name\", y=\"Highest_runs\",palette='dark',\n               data=high_score)\n\n    \n    \n\nf,axes=plt.subplots(3,3,figsize=(15,15))\n\nsns.set_style('whitegrid')\n#<------------------------season wise highest score by any team------------------------------------>\n\n\nhigh_score_ssn=data2.loc[:,('Match_Id','Season_Id',\n        'Toss_Winner_Id','Toss_Decision')].merge(high,on='Match_Id')\n\nteams=data5.loc[:,('Team_Id','Team_Short_Code')]\n\n\n\n#------------------------------------------season1------------------------------------------------->\n\n\ns1=high_score_ssn.loc[high_score_ssn.Season_Id==1,:].sort_values(by='Total',ascending=False)\ns1=s1.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s1['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s1.loc[(s1.Team_Batting_Id==i),]['Total'].max())\n\ns1_runs=pd.Series(max_runs)\n\ns1_runs=pd.DataFrame({'Team_Id':a,'High_score':s1_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[0,0].set_title('Season 1 teams vs high scores',color='red')\nsns.barplot(s1_runs['Team_name'],s1_runs['High_score']\n            ,data=s1_runs, ax=axes[0,0],color='red')\n\nprint('Season 1 high runs by all teams\\n\\n')\nprint(s1_runs)\n#------------------------------------------season2------------------------------------------------->\n\ns2=high_score_ssn.loc[high_score_ssn.Season_Id==2,:].sort_values(by='Total',ascending=False)\ns2=s2.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s2['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s2.loc[(s2.Team_Batting_Id==i),]['Total'].max())\n\ns2_runs=pd.Series(max_runs)\n\ns2_runs=pd.DataFrame({'Team_Id':a,'High_score':s2_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[0,1].set_title('Season 2 teams vs high scores',color='black')\nsns.barplot(s2_runs['Team_name'],s2_runs['High_score'],color='black'\n            ,data=s2_runs, ax=axes[0,1])\n\nprint('\\n\\nSeason 2 high runs by all teams\\n\\n')\nprint(s2_runs)\n#------------------------------------------season3------------------------------------------------->\n\ns3=high_score_ssn.loc[high_score_ssn.Season_Id==3,:].sort_values(by='Total',ascending=False)\ns3=s3.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s3['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s3.loc[(s3.Team_Batting_Id==i),]['Total'].max())\n\ns3_runs=pd.Series(max_runs)\n\ns3_runs=pd.DataFrame({'Team_Id':a,'High_score':s3_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[0,2].set_title('Season 3 teams vs high scores',color='sienna')\nsns.barplot(s3_runs['Team_name'],s3_runs['High_score'],color='sienna'\n            ,data=s3_runs, ax=axes[0,2])\n\nprint('\\n\\nSeason 3 high runs by all teams\\n\\n')\nprint(s3_runs)\n#------------------------------------------season4------------------------------------------------->\n\ns4=high_score_ssn.loc[high_score_ssn.Season_Id==4,:].sort_values(by='Total',ascending=False)\ns4=s4.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s4['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s4.loc[(s4.Team_Batting_Id==i),]['Total'].max())\n\ns4_runs=pd.Series(max_runs)\n\ns4_runs=pd.DataFrame({'Team_Id':a,'High_score':s4_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[1,0].set_title('Season 4 teams vs high scores',color='green')\nsns.barplot(s4_runs['Team_name'],s4_runs['High_score'],color='green'\n            ,data=s4_runs, ax=axes[1,0])\n\nprint('\\n\\nSeason 4 high runs by all teams\\n\\n')\nprint(s4_runs)\n\n#------------------------------------------season5------------------------------------------------->\n\n\ns5=high_score_ssn.loc[high_score_ssn.Season_Id==5,:].sort_values(by='Total',ascending=False)\ns5=s5.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s5['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s5.loc[(s5.Team_Batting_Id==i),]['Total'].max())\n\ns5_runs=pd.Series(max_runs)\n\ns5_runs=pd.DataFrame({'Team_Id':a,'High_score':s5_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[1,1].set_title('Season 5 teams vs high scores',color='darkslategrey')\nsns.barplot(s5_runs['Team_name'],s5_runs['High_score'],color='darkslategrey'\n            ,data=s5_runs, ax=axes[1,1])\n\nprint('\\n\\nSeason 5 high runs by all teams\\n\\n')\nprint(s5_runs)\n#------------------------------------------season6------------------------------------------------->\n\n\ns6=high_score_ssn.loc[high_score_ssn.Season_Id==6,:].sort_values(by='Total',ascending=False)\ns6=s6.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s6['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s6.loc[(s6.Team_Batting_Id==i),]['Total'].max())\n\ns6_runs=pd.Series(max_runs)\n\ns6_runs=pd.DataFrame({'Team_Id':a,'High_score':s6_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[1,2].set_title('Season 6 teams vs high scores',color='blueviolet')\nsns.barplot(s6_runs['Team_name'],s6_runs['High_score'],color='blueviolet'\n            ,data=s6_runs, ax=axes[1,2])\n\nprint('\\n\\nSeason 6 high runs by all teams\\n\\n')\nprint(s6_runs)\n#------------------------------------------season7------------------------------------------------->\n\n\ns7=high_score_ssn.loc[high_score_ssn.Season_Id==7,:].sort_values(by='Total',ascending=False)\ns7=s7.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s7['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s7.loc[(s7.Team_Batting_Id==i),]['Total'].max())\n\ns7_runs=pd.Series(max_runs)\n\ns7_runs=pd.DataFrame({'Team_Id':a,'High_score':s7_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\naxes[2,0].set_title('Season 7 teams vs high scores',color='crimson')\nsns.barplot(s7_runs['Team_name'],s7_runs['High_score'],color='crimson'\n            ,data=s7_runs, ax=axes[2,0])\n\nprint('\\n\\nSeason 7 high runs by all teams\\n\\n')\nprint(s7_runs)\n#------------------------------------------season8------------------------------------------------->\n\ns8=high_score_ssn.loc[high_score_ssn.Season_Id==8,:].sort_values(by='Total',ascending=False)\ns8=s8.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s8['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s8.loc[(s8.Team_Batting_Id==i),]['Total'].max())\n\ns8_runs=pd.Series(max_runs)\n\ns8_runs=pd.DataFrame({'Team_Id':a,'High_score':s8_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\n\naxes[2,1].set_title('Season 8 teams vs high scores',color='olive')\nsns.barplot(s8_runs['Team_name'],s8_runs['High_score'],color='olive'\n            ,data=s8_runs, ax=axes[2,1])\n\nprint('\\n\\nSeason 8 high runs by all teams\\n\\n')\nprint(s8_runs)\n#------------------------------------------season9------------------------------------------------->\n\ns9=high_score_ssn.loc[high_score_ssn.Season_Id==9,:].sort_values(by='Total',ascending=False)\ns9=s9.sort_values(by=['Team_Batting_Id','Total'],ascending=[True,False])\nmax_runs=[]\na=s9['Team_Batting_Id'].unique()\nfor i in a:\n\n    max_runs.append(s9.loc[(s9.Team_Batting_Id==i),]['Total'].max())\n\ns9_runs=pd.Series(max_runs)\n\ns9_runs=pd.DataFrame({'Team_Id':a,'High_score':s9_runs.values}).merge(teams,\n                                                on='Team_Id').rename(columns={'Team_Short_Code':'Team_name'})\n\naxes[2,2].set_title('Season 9 teams vs high scores',color='c')\nsns.barplot(s9_runs['Team_name'],s9_runs['High_score'],color='c'\n            ,data=s9_runs, ax=axes[2,2])\n\nprint('\\n\\nSeason 9 high runs by all teams\\n\\n')\nprint(s9_runs)","202bebb5":"#<--------------------------------------most_hundreds--------------------------------------------->\n\nhundred=data.groupby(['Match_Id','Striker_Id','Innings_Id'])['Batsman_Scored'].sum().reset_index()\nhundred=hundred.loc[(hundred.Batsman_Scored >= 100),('Striker_Id',\n'Batsman_Scored')].groupby('Striker_Id')['Batsman_Scored'].count().reset_index()\nhundred\nplr=data1.loc[:,('Player_Id','Player_Name')]\nplr = plr.rename (columns={'Player_Id':'Striker_Id'})\nmost_hundreds=plr.merge(hundred,on='Striker_Id').drop('Striker_Id',axis=1).sort_values(by='Batsman_Scored',\n                                ascending=False).rename(columns={'Batsman_Scored':'Most_hundreds'})\n\nprint('\\n\\n<------------------------------MOST_HUNDREDS BY ANY PLAYER------------------------------->\\n\\n')\nprint(most_hundreds)\n#<------------------------------------------most_hundreds---------------------------------->\n\n\nplt.figure(figsize=(15,8))\nsns.set_style('whitegrid')\ngrid=sns.lineplot(x='Player_Name', y='Most_hundreds', data=most_hundreds ,\n                  linewidth=2.5,color='maroon')\nplt.title('Player_name vs Max_Hundreds')\ngrid.lines[0].set_linestyle(\"--\")\nplt.xticks(rotation=90)\n","6728b635":"#<-------------------------------------------csk vs MI rivelary------------------------------------->\n\nt_win=data2.loc[(data2.Team_Name_Id== 3) & (data2.Opponent_Team_Id== 7),('Season_Id',\n                        'Team_Name_Id','Opponent_Team_Id','Match_Winner_Id')]\nwins=t_win.Match_Winner_Id.value_counts()\nwins=pd.DataFrame(wins).reset_index().rename(columns={'index':'Team_Id','Match_Winner_Id':'Total_wins'})\ntm=data5.loc[:,('Team_Id','Team_Short_Code')]\ntotal_wins=tm.merge(wins,on=\"Team_Id\").drop('Team_Id',axis=1)\ntotal_wins['win_percentage']=round((total_wins.Total_wins*100)\/14)\n\nprint('\\n\\n<--------------------------------------CSK VS MI RIVELARY--------------------------------------->\\n\\n')\nprint(total_wins)\n\ncolors=['y','blue']\nplt.figure(figsize=(8,5))\nplt.pie(total_wins['win_percentage'],labels=total_wins['Team_Short_Code'],autopct='%1.1f%%'\n        ,colors=colors,shadow=True,startangle=90,explode=(0.05,0))\nplt.axis('equal')\nplt.legend(total_wins.Team_Short_Code,loc=2)\nplt.title('CSK vs MI',fontsize=16)\nplt.tight_layout()\nplt.show()\n","ab3c4510":"#<-------------------------------dissmisal types and their counts--------------------------------------->\n\nt_wickets=data.loc[(data.Dissimal_Type!=' '),('Match_Id','Dissimal_Type')]\nt_wickets=t_wickets.Dissimal_Type.value_counts()\nt_wickets=t_wickets.reset_index().rename(columns={'index':'Dissmisal_Type','Dissimal_Type':'Total'})\n\nprint('\\n\\n<------------------------- WICKET TYPES AND THIER COUNTS----------------------------------->\\n\\n')\nprint(t_wickets)\n\nplt.figure(figsize=(15,10))\nplt.pie(t_wickets['Total'],labels=t_wickets['Total'],shadow=False,startangle=90,explode=(0.05,0,\n                                                            0,0,0,0,0,0,0))\nplt.axis('equal')\nplt.legend(t_wickets.Dissmisal_Type,loc=2)\nplt.title('WICKET TYPES AND THEIR COUNT',fontsize=16)\nplt.show()","95bc979b":"#player performance in each season\n\ndata['Batsman_Scored']=data['Batsman_Scored'].replace(' ','0')\ndata['Batsman_Scored']=data['Batsman_Scored'].replace('Do_nothing','0').astype(int)\nh_score=data.loc[:,('Match_Id','Striker_Id','Batsman_Scored')]\nseason=data2.loc[:,('Match_Id','Season_Id')]\nseason=pd.merge(h_score,season,on='Match_Id')\nhighest_runs=season.groupby(['Season_Id','Striker_Id'])['Batsman_Scored'].sum().reset_index()\nplayer=data1.loc[:,('Player_Id','Player_Name')].rename(columns={'Player_Id':'Striker_Id'})\nhighest_runs=highest_runs.sort_values(by='Batsman_Scored',ascending=False)\nTop_10=highest_runs.merge(player,on='Striker_Id').rename(columns={'Batsman_Scored':'Total_runs'})\nTop_10=Top_10.sort_values(by=['Season_Id','Total_runs'],ascending=[True,False]).drop('Striker_Id',axis=1)\nTop_10=Top_10[['Season_Id','Player_Name','Total_runs']]\nTop_10=Top_10.loc[(Top_10.Player_Name=='SK Raina') | (Top_10.Player_Name=='MS Dhoni') | (Top_10.Player_Name=='V Kohli') | (Top_10.Player_Name=='RG Sharma') | (Top_10.Player_Name=='CH Gayle'),:]\n\nprint('\\n\\n<----------------------------SEASON WISE PERFORMANCE OF SOME PLAYERS-------------------------------->\\n\\n')\nprint(Top_10)\n\nplt.figure(figsize=(15,10))\nsns.catplot(x=\"Season_Id\", y=\"Total_runs\", hue=\"Player_Name\", kind=\"bar\",\n              data=Top_10);","959b8df1":"#<----------------------------------total runs across each season---------------------------------------->\n\nmatch=data.loc[:,('Match_Id','Team_Batting_Id','Team_Bowling_Id','Total')]\nseason_id=data2.loc[:,('Match_Id','Season_Id')].merge(match,\n        on='Match_Id').groupby('Season_Id')['Total'].sum().reset_index()\ntotal_runs=data4.loc[:,('Season_Id','Season_Year')].merge(season_id,\n        on='Season_Id').drop('Season_Id',axis=1).rename(columns={'Total':'Total_runs'})\n\nprint('\\n\\n<-------------------------TOTAL RUNS ACROSS EACH SEASON--------------------------------->\\n\\n')\nprint(total_runs)\n\nplt.figure(figsize=(15,10))\nplt.plot(total_runs['Season_Year'],total_runs['Total_runs'])\nplt.title('Total Runs In Each Season',fontsize=16)","caf98eb8":"#<------------------------------------Teams and their win types------------------------------------------>\n\nwintype = data2.loc[:,('Season_Id','Team_Name_Id',\n'Opponent_Team_Id','Win_Type','Won_By')].rename(columns={'Team_Name_Id':'Team_Id'})\nteams=data5.loc[:,('Team_Id','Team_Short_Code')]\nwintype=data5.loc[:,('Team_Id','Team_Short_Code')].merge(wintype,\n    on='Team_Id').drop('Team_Id',axis=1).rename(columns={'Team_Short_Code':'Team_1',\n        'Opponent_Team_Id':'Team_Id'}).merge(teams,on='Team_Id').drop('Team_Id',\n            axis=1).rename(columns={'Team_Short_Code':'Opp_Teams'}).sort_values(by='Season_Id')\n\nwintype=wintype[['Season_Id','Team_1','Opp_Teams','Win_Type','Won_By']]\n\nprint('\\n\\n<------------------------------TEAMS AND THIER WIN TYPES------------------------------------->\\n\\n')\nprint(wintype)\n\nplt.figure(figsize=(15,10))\nsns.swarmplot(x=\"Team_1\", y=\"Won_By\",hue='Win_Type',data=wintype)\n\n","6e0c9a4b":"#<-------------------------------------Best Chasing Ground------------------------------------->\n\nstadium = data2.loc[(data2.Win_Type=='by wickets'),('Match_Id','Season_Id',\n                'Venue_Name','Win_Type','Won_By')]\n\nchasing_ground=stadium.groupby('Venue_Name')['Win_Type'].count().reset_index().sort_values(by='Win_Type'\n                                                        ,ascending=False).head(10)\n\nprint('\\n\\n<------------------------------------BEST CHASING GROUND------------------------------->\\n\\n')\nprint(chasing_ground)\n\n\nplt.figure(figsize=(10,8))\nsns.boxplot(x=\"Venue_Name\", y=\"Won_By\", data=stadium)\nplt.title('Best Chasing Grounds',fontsize=16)\nplt.xticks(rotation=90)\n\n\n#<--------------------------------------Best defending ground-------------------------------------->\nstadium1 = data2.loc[(data2.Win_Type=='by runs'),('Match_Id','Season_Id',\n                'Venue_Name','Win_Type','Won_By')]\n\ndefending_ground=stadium1.groupby('Venue_Name')['Win_Type'].count().reset_index().sort_values(by='Win_Type'\n                                                        ,ascending=False).head(10)\n\nprint('\\n\\n<------------------------------------BEST DEFENDING GROUND------------------------------->\\n\\n')\nprint(defending_ground)\n\nplt.figure(figsize=(10,8))\nsns.boxplot(x=\"Venue_Name\", y=\"Won_By\", data=stadium1)\nplt.title('Best Defending Grounds',fontsize=16)\nplt.xticks(rotation=90)\n\n\n#<------------------------------------------subplots------------------------------------------------->\nf,axes=plt.subplots(2,1,figsize=(15,5))\nplt.subplots_adjust(hspace = 0.8)\nsns.barplot(x=\"Win_Type\", y=\"Venue_Name\",data=chasing_ground,ax=axes[0])\naxes[0].set_title('Top_10 Best Chasing Grounds')\n\nsns.barplot(x=\"Win_Type\", y=\"Venue_Name\",data=defending_ground,ax=axes[1])\naxes[1].set_title('Top_10 Best Defending Grounds')","f0605707":"#teams and their players\nteams=data2.loc[:,('Match_Id','Season_Id')].merge(data3,on='Match_Id').sort_values(by=['Season_Id','Team_Id'],\n                    ascending=[True,True]).drop(['Is_Keeper','Is_Captain','Match_Id'],axis = 1)\n\nplayers=data1.loc[:,('Player_Id','Player_Name')].merge(teams,on='Player_Id').drop('Player_Id',axis=1)\ngroup=players.groupby(['Season_Id','Team_Id'])['Player_Name'].unique().reset_index()\nss = pd.DataFrame(group)\n\n                #<-------------------season1 players and teams------------------------>\ns1=ss.loc[(ss.Season_Id==1),:]\nl=[]\nfor i in s1['Player_Name']:\n    l.append(i)\n    \n    \nseason1=pd.DataFrame(l).T\nseason1=season1.head(16)\nseason1=season1.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'DC'})\nprint('\\n\\n-----------season1 teams and their players----------------\\n\\n')\nprint(season1)\n\n\n                #<-------------------season2 players and teams------------------------>\ns2=ss.loc[(ss.Season_Id==2),:]\nl=[]\nfor i in s2['Player_Name']:\n    l.append(i)\n    \n    \nseason2=pd.DataFrame(l).T\nseason2=season2.head(16)\nseason2=season2.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'DC'})\nprint('\\n\\n-----------------season2 teams and their players-----------------\\n\\n')\nprint(season2)\n\n\n                #<-------------------season3 players and teams------------------------>\ns3=ss.loc[(ss.Season_Id==3),:]\nl=[]\nfor i in s3['Player_Name']:\n    l.append(i)\n    \n    \nseason3=pd.DataFrame(l).T\nseason3=season3.head(16)\nseason3=season3.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'DC'})\nprint('\\n\\n-----------------season3 teams and their players--------------------\\n\\n')\nprint(season3)\n\n\n                #<-------------------season4 players and teams------------------------>\ns4=ss.loc[(ss.Season_Id==4),:]\nl=[]\nfor i in s4['Player_Name']:\n    l.append(i)\n    \n    \nseason4=pd.DataFrame(l).T\nseason4=season4.head(16)\nseason4=season4.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'DC',8:'KTK',9:'PW'})\nprint('\\n\\n----------------season4 teams and their players---------------------\\n\\n')\nprint(season4)\n\n\n                #<-------------------season5 players and teams------------------------>\ns5=ss.loc[(ss.Season_Id==5),:]\nl=[]\nfor i in s5['Player_Name']:\n    l.append(i)\n    \n    \nseason5=pd.DataFrame(l).T\nseason5=season5.head(16)\nseason5=season5.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'DC',8:'PW'})\nprint('\\n\\n---------------------season5 teams and their players-----------------------\\n\\n')\nprint(season5)\n\n\n                #<-------------------season6 players and teams------------------------>\ns6=ss.loc[(ss.Season_Id==6),:]\nl=[]\nfor i in s6['Player_Name']:\n    l.append(i)\n    \n    \nseason6=pd.DataFrame(l).T\nseason6=season6.head(16)\nseason6=season6.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'PW',8:'SRH'})\nprint('\\n\\n---------------------season6 teams and their players------------------------\\n\\n')\nprint(season6)\n\n\n                #<-------------------season7 players and teams------------------------>\ns7=ss.loc[(ss.Season_Id==7),:]\nl=[]\nfor i in s7['Player_Name']:\n    l.append(i)\n    \n    \nseason7=pd.DataFrame(l).T\nseason7=season7.head(16)\nseason7=season7.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'SRH'})\nprint('\\n\\n------------------season7 teams and their players-----------------------------\\n\\n')\nprint(season7)\n\n\n                #<-------------------season8 players and teams------------------------>\ns8=ss.loc[(ss.Season_Id==8),:]\nl=[]\nfor i in s8['Player_Name']:\n    l.append(i)\n    \n    \nseason8=pd.DataFrame(l).T\nseason8=season8.head(16)\nseason8=season8.rename(columns={0:'KKR',1:'RCB',2:'CSK',3:'KXIP',4:'RR',5:'DD',6:'MI',7:'SRH'})\nprint('\\n\\n----------------------------season8 teams and their players-----------------------\\n\\n')\nprint(season8)\n\n\n                #<-------------------season9 players and teams------------------------>\ns9=ss.loc[(ss.Season_Id==9),:]\nl=[]\nfor i in s9['Player_Name']:\n    l.append(i)\n    \n    \nseason9=pd.DataFrame(l).T\nseason9=season9.head(16)\nseason9=season9.rename(columns={0:'KKR',1:'RCB',2:'KXIP',3:'DD',4:'MI',5:'SRH',6:'RPS',7:'GL'})\nprint('\\n\\n--------------------------season9 teams and their players---------------------------\\n\\n')\nprint(season9)\n","d72c47f2":"- Toss winning and match winning","272ce6d6":"- Max fours\n- Top 30 players with maximum number of fours of all season\n- Season wise max fours\n- Comparison of maximum fours of some players of all seasons","36ef7e79":"- Purple Cap\n- SEASON WISE PURPLE CAP WINNER","553f04a8":"- Teams Matches and Winners with Man of the Match","3a237620":"- Max Six\n- Top 30 players with maximum number of Sixes of all season\n- Season wise max sixes\n- Comparison of maximum Sixes of some players of all seasons","5ffe3840":"# Content\n- Top 50 batsmen of all Seasons\n- Top 10 batsmen 0f all seasons\n- Bottom 10 batsmen 0f all seasons","0121937f":"- SEASON WISE WINNERS OF ALL SEASONS","754f90a0":"# Import all useful libraries","d5c6ff6d":"Best captains ","91aa282d":"- Man of the series","b6abe066":"- Matches in each Stadium\n- Number of matches in each stadium in all seasons","bc855247":"- man of the match\n- LIST OF PLAYERS WITH MAXIMUM NUMBER OF MAN OF THE MATCH AWARDS\n- most man of the match in each season\n- COMPARISON OF SOME PLAYERS WITH MAXIMUM NUMBER OF MAN OF THE MATCH AWARDS","8a35419d":"- Top 10 players of all seasons\n - Matches\n - Sixes\n - Fours\n - Highest Run","fa6509c6":"- Total no of scores get by a bowler in all seasons\n- TOP_10 BOWLERS WITH MAX SCORES GET\n- BOTTOM_10 BOWLERS WITH MAX SCORES GET\n- TOTAL NUMBER OF SCORES GET BY ANY BOWLER\n- Plotting\n - Bowlers with maximum scores get in all seasons\n - Top 10 Bowlers with maximum scores get\n - Bottom 10 Bowlers with maximum scores get","98dd9628":"Total matches in all seasons"}}