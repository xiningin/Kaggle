{"cell_type":{"056534ec":"code","7b4d2b27":"code","69b72c4d":"code","666fff35":"code","9589bef7":"code","e81e0411":"code","4fee5e16":"code","9ae8480d":"code","778a92ba":"code","17426150":"markdown","35334344":"markdown","88c69134":"markdown","3f661080":"markdown","b81981c2":"markdown","b79ffbed":"markdown","57d360e7":"markdown","dc86a0f5":"markdown","f8c8fe3d":"markdown","e6a405c5":"markdown","5188874d":"markdown","c1d0261f":"markdown","db345fdc":"markdown","e8b70903":"markdown","603316c2":"markdown"},"source":{"056534ec":"!pip install openpyxl\nimport csv\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\nfrom bokeh.plotting import *\nfrom bokeh.models import *\nfrom bokeh.io import show, output_notebook, push_notebook\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom ipywidgets import *\nimport ipywidgets as widgets\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7b4d2b27":"#Scrape the site to find the correct link\n#Ensure internet access is turned on\nr_full_site=requests.get('https:\/\/www.ons.gov.uk\/peoplepopulationandcommunity\/personalandhouseholdfinances\/incomeandwealth\/adhocs\/12086grossincomecomponentsforretiredhouseholds\/')\npage=BeautifulSoup(r_full_site.content, \"html.parser\")\narticle=page.find('article')\nlink=article.find('a')['href']\nmain_site = 'https:\/\/www.ons.gov.uk'\nurl= main_site+link\n#\n#Scrape link with required data\nr_data=requests.get(url)\n#\n#Import data into dataframe\nopen('temp.xls', 'wb').write(r_data.content)\ndf = pd.read_excel('temp.xls',sheet_name=\"Gross income by component\",skiprows=2,skipfooter=6)\n#\n#Clean data\n#Remove \/ from year numbers\nfor i in range(17,42):\n    df.loc[i,'Year']=df.loc[i,'Year'][0:4]   \n#Remove spaces from headers\ndf=df.rename(columns={'Total ': 'Total'})\n#Extract data to use in analysis\n#\n#Extract year column to use as predictor variable\nx=df['Year']\nX=df[['Year']]\n#Extract headers to use as income sources\nheaders=df.columns\ndf.head()","69b72c4d":"#Extract Total column from dataframe\nTotal_values=df['Total']\n#Plot against year\noutput_notebook()\np = figure(title=\"Retirement Income\", x_axis_label='Year', y_axis_label='Total'+' (\u00a3)')\np.scatter(x,Total_values)\nshow(p)   ","666fff35":"#Create function to predict average retirement income source using linear regression\ndef predict_income(year,source='Total',seed=543210):\n    #Extract correct variable from dataframe\n    y=df[source]\n    #Set random state to replicate train\/test split\n    rs = np.random.RandomState(seed)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=rs)\n    #Call and fit LinearRegression function\n    lm = LinearRegression()\n    lm.fit(X_train, y_train)\n    #Return output, splitting into cases with single year vs list of years\n    if type(year) == int:\n        return lm.predict([[year]])[0]\n    else:\n        return lm.predict(year)\n\npredict_income(2030,'Private pensions')","9589bef7":"#plot the model for each source\ndef plot_source(source='Total',seed=543210):\n    #Call predict_income to generate predicted values\n    pred_values=predict_income(X,source,seed)\n    #Extract actual values from dataframe\n    actual_values=df[source]\n    #Plot results\n    output_notebook()\n    p = figure(title=\"Retirement Income\", x_axis_label='Year', y_axis_label=source+' (\u00a3)')\n    p.scatter(x,actual_values)\n    p.line(x,pred_values)\n    show(p)\n    \nplot_source()","e81e0411":"#investigate difference between predicted values and observed values\npred_values=predict_income(X)\npred_difference = (pred_values - Total_values)\n#Plot differences\nfig = Figure()\nfig.circle(pred_values,pred_difference)\nfig.line(x=[pred_values.min(), pred_values.max()], y=[0,0])\nshow(fig)","4fee5e16":"#Use a seed to ensure results are consistent\nrs = np.random.RandomState(543210)\n#Split data into training and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, Total_values, test_size=0.2,random_state=rs)\n#Call LinearRegression, and fit and score model\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nprint(lm.score(X,Total_values))","9ae8480d":"def r2_plot(source,seed=543210):\n    #Extract observed values from dataframe\n    obs_values=df[source]\n    #Set random state to ensure results can be replicated\n    rs = np.random.RandomState(543210)\n    #Create training and testing data and fit and score linear model\n    X_train, X_test, y_train, y_test = train_test_split(X, obs_values, test_size=0.2,random_state=rs)\n    lm = LinearRegression()\n    lm.fit(X_train, y_train)\n    #Plot results by calling plot_source\n    plot_source(source)\n    return 'R2 Value:'+str((lm.score(X,obs_values)))\n        \ninteract(r2_plot, source=headers,seed=fixed(543210))","778a92ba":"#Define range\nstart_year=2019\nend_year=2050\n#Create list to use for indexing\nZ=[[i] for i in range(start_year,end_year+1)]\nz=[i for i in range(start_year,end_year+1)]\n\n#Use model to generate Total predicted values for whole range\nfuture_values=predict_income(Z,'Total')\n\n#Create function to generate plots for each year\ndef plot_predictions(year,seed=543210):\n    \n    #Initalize figure\n    fig, axs = plt.subplots(1,2)\n    #Plot 1 will be a bar graph with a single bar for the year and a line for entire range\n    br=axs[0]\n    br.plot(z,future_values,color='Black',label='Total')\n    br.set_title('Retirement Income Predictions')\n    br.set_xlabel('Year')\n    br.set_ylabel('\u00a3')\n    \n    #Create list of predicted income by source to plot on bar graph\n    values=[predict_income(year,source) for source in headers if source != 'Year' and source != 'Total']\n    values[3]=df['Investment and other income'][23:41].mean()\n    sources=[source for source in headers if source != 'Year' and source != 'Total']\n    \n    #Round values to use as labels on plot\n    rounded_values=[round(v,0) for v in values]\n    \n    #Add values to plot\n    sub_total=0\n    for i in range(len(values)):\n        if i == 0:\n            br.bar(year,values[i],width=2,label=headers[i+1])\n            br.text(year,0.5*values[i]+sub_total,rounded_values[i],horizontalalignment='left')\n        else:\n            br.bar(year,values[i],width=2,bottom=sub_total,label=headers[i+1])\n            br.text(year,0.5*values[i]+sub_total,rounded_values[i],horizontalalignment='left')\n        sub_total += values[i]\n    br.legend(bbox_to_anchor=(-0.5, 1.05))\n    \n    #Plot 2 will be a pie chart, showing distribution of income by source\n    pi = axs[1]\n    pi.pie(values, labels=sources,autopct='%1.1f%%',explode=(0.05,0,0,0,0),shadow=True)\n    pi.axis('equal')\n    fig.subplots_adjust(wspace=0.6)\n    plt.show()\n#Call function and create interactive slider to change year.\n\ninteract(plot_predictions, year=(2019,2050,1),seed=fixed(543210))","17426150":"<font size=\"4\">With a value close to 1 we have verified that our model is indeed a good fit for our data. We will now investigate the effectivenesss of the linear model on the individual retirement income sources. The below function returns a plot of the model along with the $R^2$ value for each source, with a dropdown option to change the source. (*Year is included in the dropdown to illustrate how the $R^2$ behaves with a 'perfect' fit*).<\/font>","35334344":"**<font size=\"6\">Regression Analysis of UK Retirement Income<\/font>**","88c69134":"<font size=\"4\">**3. Analysis of Model**<\/font>\\\n<font size=\"4\">We first investigate the difference between the predicted values of our model and the observed values.<\/font>","3f661080":"<font size=\"4\">At first glance the data appears to behave very linearly. We proceed to build a linear model on the data to verify our observation.<\/font>","b81981c2":"<font size=\"4\">**2. Import Data**<\/font>\\\n<font size=\"4\"> The data is available at [https:\/\/www.ons.gov.uk](http:\/\/) as an excel file. The data provides the average, deflated income   for UK retired households from 1977-2018, split by source (*Private pensions, State Pension, Other Cash Benefits, Investment and other income, Income from employment*).<\/font>\n<font size=\"4\"> We conduct web scraping on the site to import the required data, and then begin cleaning and processing it.<\/font>\n","b79ffbed":"<font size=\"4\">**3. Building the Model**<\/font>\\\n<font size=\"4\">We fit a linear model on the data using `LinearRegression()` from the `sklearn.linear_model` library. As the data is split by the sources discussed above, we allow the model to take in the source as a parameter. The training and testing set will be generated randomly, using a seed so the results can be reproduced. The function used to build the model is given below, with an example output.<\/font>\n","57d360e7":"<font size=\"4\">**1. Import Required Libraries**<\/font>","dc86a0f5":"<font size=\"4\">**5. Insights**<\/font>\\\n<font size=\"4\">Although all sources are expected to increase, with the exception of Investments and other Income, the previous figure shows that retirement income will become increasingly reliant on private pensions in the future, with this source comprising 48% (\u00a319,820) of expected income in 2050. Income from employment is expected to change the least, with an approximate difference of \u00a3550 in the time period, and the proportion of total income rising to 3.5% by 2050. <\/font>","f8c8fe3d":"<font size=\"4\">Indeed, when Year is chosen as the observed values, the data is a straight line, and thus the predicted values are equal to the observed values, with the $R^2$ value being 1. We can see that the model for private pensions isn't as good a fit as for the Total, but still has a $R^2$ value very close to 1. Other Cash Benefits has a poorer score still, but with an acceptable $R^2$ value. The source Investment and other income however, has a $R^2$ value of less than 1, indicating the model is not appropriate, we can see this from the figure, with the data bearing very little resemblance to the linear model. For this source the model should not be used, and an alternative solution be implemented for the predicted values for this source. The data for this source appears to be very random over the last 20 years, so the predicted values for this source will be the average from 2000 to 2018. <\/font>","e6a405c5":"<font size=\"5\">**Overview**<\/font>\\\n<font size=\"3\">This project is an analysis of UK Retirement Income over the last 50 years, using Linear Regression to predict future income. The data is imported from the Office for National Statistics before being cleaned and processed. We then fit a linear model and investigate its effectiveness. The linear model is used to predict Retirement Income over the next 30 years and provide insightful visualisations.","5188874d":"<font size=\"4\">The predicted differences are randomly clustered around 0, indicating there is no bias in the data and our model is appropriate.<\/font>\\\n<font size=\"4\">The $R^2$ value can be used to quantify this. It provides us with the proportion of variance which is explained by the model. It takes values in between 0 and 1 (if the model is appropriate), with 0 being the model has no explanation for any variance in the data and 1 being that the regression line fits the data perfectly.<\/font>","c1d0261f":"<font size=\"4\">**2. Initial Analysis**<\/font>\\\n<font size=\"4\">We being by exploring the data to get an understanding of the distribution. First, we plot the Total Income vs Year.<\/font>\n\n","db345fdc":"<font size=\"4\"> Indeed, it appears the model is a very good fit for our data, with our observed values clustered randomly but closely around the line of best fit. We will now verify the effectiveness of the model using the $R^2$ value. <\/font>","e8b70903":"<font size=\"4\">**2. Plotting the Results**<\/font>\\\n<font size=\"4\"> We now call `predict_income` to generate the predicted values of our model for each year in the data, and plot the results together with our observed values. The below function is created, again allowing the source to be passed as a parameter.<\/font>","603316c2":"<font size=\"4\">**4. Predictions and Visualization**<\/font>\\\n<font size=\"4\">Having verified the effectiveness of our model, we now use it to generate predicitons for retirement income up to the year 2050 and visualize the results. We create a function to plot the predicted retirement income sources for a given year, as well a pie chart to show their percentage contribution. This is displayed together with the Total predicted values for each year in the range. An interactive slider is created to change the year parameter. <\/font>\n"}}