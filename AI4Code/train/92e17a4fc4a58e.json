{"cell_type":{"687accd0":"code","08991ae2":"code","ca7f03c5":"code","d76d09e4":"code","1f499bf8":"code","b63cb0d9":"code","078996bd":"code","e9da0eb8":"code","e341a9b4":"code","47b82f4e":"code","89f1da30":"code","c91f4ed3":"code","cb512673":"code","0425c390":"code","baf41083":"code","c9b5225c":"code","941e69c4":"code","9897edb7":"code","47c6e934":"code","4c9674c9":"markdown","a5cfb56a":"markdown","3daada37":"markdown","cde7da8f":"markdown","09bfa0e1":"markdown","0c6ada8b":"markdown","05318168":"markdown","9307edb7":"markdown","8e3c15aa":"markdown","a1006032":"markdown","321fe881":"markdown","cd90992f":"markdown"},"source":{"687accd0":"# Import our working libraries\nimport pandas as pd  # data manipulation\nimport numpy as np  # linear algebra\n\n# data vizualisation (matplotlib, seaborn and plotly)\nimport matplotlib.pyplot as plt  \nimport seaborn as sns\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport warnings\nwarnings.filterwarnings(\"ignore\")","08991ae2":"# Pandas: Setting no. of max rows\n\npd.set_option('display.max_rows', 1000)\npd.set_option('display.max_columns', 500)\npd.options.mode.chained_assignment = None","ca7f03c5":"# display the plots directly in notebook without using plt.show()\n%matplotlib inline\n\n# Setting the display of our graphs\nplt.rcParams['figure.figsize'] = [13,6]\n\n# Set style\nplt.style.use('ggplot')","d76d09e4":"import os\nprint(os.listdir(\"..\/input\"))\n\n# Read in dataset\napps_df = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")\n\n# Check the initial information about datset\nprint(apps_df.info())\napps_df.head(10)","1f499bf8":"# Lets look for descriptive statistics and also for missing values in our dataset\n\napps_df.describe()","b63cb0d9":"# Take a look for missing values in the dataset\ntotal_null_values = apps_df.isnull().sum().sort_values(ascending=False)\npercent_null_values = (apps_df.isnull().sum()*100\/apps_df.isnull().count()).sort_values(ascending=False)\n\nnull_values = pd.concat([total_null_values, percent_null_values], axis=1, keys=['Total','Percent'])\nnull_values[null_values.Total > 0]","078996bd":"apps_df = apps_df.dropna().reset_index()\napps_df = apps_df.drop(['index'], axis=1)\napps_df[['Reviews']] = apps_df.Reviews.astype('int64')\napps_df[['Price']] = apps_df.Price.astype('str').map(lambda p: p[1:] if p!='0' else p).astype('float64')\napps_df[['Size']] = apps_df.Size.astype('str').map(lambda S: float(S[:-1])\/1000 if S[-1]=='k' else (float(S[:-1]) if S[-1]=='M' else np.nan)).astype('float64')","e9da0eb8":"# Drop duplicates\napps = apps_df.drop_duplicates()\n\n# Print the total number of apps\nprint('Total number of apps in the dataset = ', apps.count())\n\n# Have a look at a random sample of 5 rows\napps.sample(5)","e341a9b4":"apps.describe()","47b82f4e":"# Print the total number of unique categories\nnum_categories = len(apps['Category'].unique())\nprint('Number of categories = ', num_categories)\n\n# Count the number of apps in each 'Category' and sort them in descending order\nnum_apps_in_category = apps['Category'].value_counts().sort_values(ascending = False)\n\nx = num_apps_in_category.index # index = category name\ny = num_apps_in_category.values # value = count\ndata = [go.Bar(x=x, y=y,)]\n\nplotly.offline.iplot(data)","89f1da30":"# Average rating of apps\nprint('Average volume of ratings across all app categories is', round(apps.Rating.mean(), 2))\n\n''' \nDistribution of apps according to their ratings\nWe will plot the distribution first using seaborn and then using plotly\n'''\nplt.rcParams['figure.figsize'] = [13,6]\napps_sns = sns.kdeplot(apps.Rating, color='Green', shade=True)\napps_sns.set_xlabel('Rating', size=15)\napps_sns.set_ylabel('Frequency', size=15)\nplt.title('Distribution of apps Rating', size=20)","c91f4ed3":"# Plotly\n# Distribution of apps according to their ratings\ndata = [go.Histogram(x=apps.Rating)]\navg_app_rating = apps.Rating.mean()\n\n# Vertical dashed line to indicate the average app rating\nlayout = {'shapes':[{\n                'type':'line',\n                'x0': avg_app_rating,\n                'y0': 0,\n                'x1': avg_app_rating,\n                'y1': 1000,\n                'line': {'dash':'dashdot'}\n}]}\nplotly.offline.iplot({'data': data, 'layout': layout})","cb512673":"# Subset for categories with at least 250 apps\nlarge_categories = apps.groupby('Category').filter(lambda x: len(x) >= 250).reset_index()\n\n# Plot size vs. rating\ngraph1 = sns.jointplot(x=large_categories['Size'], y=large_categories['Rating'], kind='hex')\nplt.title('Categories with at least 250 apps', size=15)\nplt.tight_layout()\n\n# Subset out apps whose type is 'Paid'\npaid_apps = apps[apps['Type'] == 'Paid']\n\n# Plot price vs. rating for paid apps\ngraph2 = sns.jointplot(x=paid_apps['Price'], y=paid_apps['Rating'])\nplt.title('Paid apps', size=15)\nplt.tight_layout()","0425c390":"# Select a few popular app categories\n# Create a list of popular app categories (see graph in task 3)\npopular_categories = ['GAME','FAMILY','TOOLS','BUSINESS','MEDICAL','PERONALIZATION',\n                      'LIFESTYLE','FINANCE','SPORTS','COMMUNICATION']  \npopular_app_cats = apps[apps.Category.isin(popular_categories)]\n\nfig, ax = plt.subplots()\nsns.set_context('notebook')\n\n# Examine the price trend by plotting Price v Category\nax = sns.stripplot(x=popular_app_cats.Price, y=popular_app_cats.Category, jitter=True, linewidth=1)\nax.set_title('App pricing rend across app cateogires', size=15)\n\n# Apps priced above 200\napps_above_200 = popular_app_cats[['Category','App','Price']][popular_app_cats.Price > 200]\napps_above_200","baf41083":"# Select apps priced below or equal $100\napps_under_100 = popular_app_cats[popular_app_cats.Price <= 100]\n\nfig, ax = plt.subplots()\nsns.set_context('notebook')\n\n# Examine price vs category with the authentic apps\nax = sns.stripplot(x=apps_under_100.Price, y=apps_under_100.Category, jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories after filtering for junk apps', size=15);","c9b5225c":"# Create a Plotly boxplot for Paid and Free installed apps\npaid_app_viz = go.Box(\n    # Data for paid apps\n    y = apps[apps.Type == 'Paid']['Installs'], name ='Paid Apps')\n\nfree_app_viz = go.Box(\n    # Data for free apps\n    y = apps[apps.Type == 'Free']['Installs'], name = 'Free Apps') \n\nlayout = go.Layout(\n    title = \"Number of downloads of paid vs. free apps\",\n    yaxis = dict(type = 'log', autorange = True))\n\n# Add defined variables for plotting\ndata = [paid_app_viz, free_app_viz]\nplotly.offline.iplot({'data':data, 'layout':layout})","941e69c4":"# Load and preview our second dataset: user_reviews.csv\nreviews_df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\nreviews_df.sample(10)","9897edb7":"# Join and merge the two dataframes\napps_reviews_df = pd.merge(apps, reviews_df, on='App', how='inner')\n\n\n''' From our preview of reviews_df dataset above, we can see that there are some NaN values\n    that should be cleaned'''\n\n# Drop NA values from Sentiment and Translated_Review columns\napps_reviews_df = apps_reviews_df.dropna(subset=['Sentiment','Translated_Review'])\ndisplay(apps_reviews_df)","47c6e934":"# Plot user review sentiment polarity for paid vs. free apps\nsns.set_style('ticks')\nfig, ax = plt.subplots()\nax = sns.boxplot(x='Type', y='Sentiment_Polarity', data = apps_reviews_df)\nax.set_title('Sentiment Polarity Distribution', size=20)","4c9674c9":"### Short description of the labels in our dataset\n\n    1) App :- Name of the App\n    2) Category :- Category under which the App falls.\n    3) Rating :- Application's rating on playstore\n    4) Reviews :- Number of reviews of the App.\n    5) Size :- Size of the App.\n    6) Installs :- Number of Installs of the App\n    7) Type :- If the App is free\/paid\n    8) Price :- Price of the app (0 if it is Free)\n    9) Content Rating :- Appropiate Target Audience of the App.\n    10) Genres:- Genre under which the App falls.\n    11) Last Updated :- Date when the App was last updated\n    12) Current Ver :- Current Version of the Application\n    13) Android Ver :- Minimum Android Version required to run the App","a5cfb56a":"## 7. Filter out \"junk\" apps\n<p>It looks like a bunch of the really expensive apps are \"junk\" apps. That is, apps that don't really have a purpose. Some app developer may create an app called <em>I Am Rich Premium<\/em> or <em>most expensive app (H)<\/em> just for a joke or to test their app development skills. Some developers even do this with malicious intent and try to make money by hoping people accidentally click purchase on their app in the store.<\/p>\n<p>Let's filter out these junk apps and re-do our visualization. The distribution of apps under \\$20 becomes clearer.<\/p>","3daada37":"## 5. Size and price of an app\n<p>Let's now examine app size and app price. For size, if the mobile app is too large, it may be difficult and\/or expensive for users to download. Lengthy download times could turn users off before they even experience your mobile app. Plus, each user's device has a finite amount of disk space. For price, some users expect their apps to be free or inexpensive. These problems compound if the developing world is part of your target market; especially due to internet speeds, earning power and exchange rates.<\/p>\n<p>How can we effectively come up with strategies to size and price our app?<\/p>\n<ul>\n<li>Does the size of an app affect its rating? <\/li>\n<li>Do users really care about system-heavy apps or do they prefer light-weighted apps? <\/li>\n<li>Does the price of an app affect its rating? <\/li>\n<li>Do users always prefer free apps over paid apps?<\/li>\n<\/ul>\n<p>We find that the majority of top rated apps (rating over 4) range from 2 MB to 20 MB. We also find that the vast majority of apps price themselves under \\$10.<\/p>","cde7da8f":"## 3. Exploring app categories\n<p>With more than 1 billion active users in 190 countries around the world, Google Play continues to be an important distribution platform to build a global audience. For businesses to get their apps in front of users, it's important to make them more quickly and easily discoverable on Google Play. To improve the overall search experience, Google has introduced the concept of grouping apps into categories.<\/p>\n<p>This brings us to the following questions:<\/p>\n<ul>\n<li>Which category has the highest share of (active) apps in the market? <\/li>\n<li>Is any specific category dominating the market?<\/li>\n<li>Which categories have the fewest number of apps?<\/li>\n<\/ul>\n<p>We will see that there are <code>33<\/code> unique app categories present in our dataset. <em>Family<\/em> and <em>Game<\/em> apps have the highest market prevalence. Interestingly, <em>Tools<\/em>, <em>Business<\/em> and <em>Medical<\/em> apps are also at the top.<\/p>","09bfa0e1":"## 8. Popularity of paid apps vs free apps\n<p>For apps in the Play Store today, there are five types of pricing strategies: free, freemium, paid, paymium, and subscription. Let's focus on free and paid apps only. Some characteristics of free apps are:<\/p>\n<ul>\n<li>Free to download.<\/li>\n<li>Main source of income often comes from advertisements.<\/li>\n<li>Often created by companies that have other products and the app serves as an extension of those products.<\/li>\n<li>Can serve as a tool for customer retention, communication, and customer service.<\/li>\n<\/ul>\n<p>Some characteristics of paid apps are:<\/p>\n<ul>\n<li>Users are asked to pay once for the app to download and use it.<\/li>\n<li>The user can't really get a feel for the app before buying it.<\/li>\n<\/ul>\n<p>Are paid apps installed as much as free apps? It turns out that paid apps have a relatively lower number of installs than free apps, though the difference is not as stark as I would have expected!<\/p>","0c6ada8b":"## 1. Google Play Store apps and reviews\n<p>Mobile apps are everywhere. They are easy to create and can be lucrative. Because of these two factors, more and more apps are being developed. In this notebook, we will do a comprehensive analysis of the Android app market by comparing over ten thousand apps in Google Play across different categories. We'll look for insights in the data to devise strategies to drive growth and retention.<\/p>\n\n<p>Let's take a look at the data, which consists of two files:<\/p>\n<ul>\n<li><code>apps.csv<\/code>: contains all the details of the applications on Google Play. There are 13 features that describe a given app.<\/li>\n<li><code>user_reviews.csv<\/code>: contains 100 reviews for each app, <a href=\"https:\/\/www.androidpolice.com\/2019\/01\/21\/google-play-stores-redesigned-ratings-and-reviews-section-lets-you-easily-filter-by-star-rating\/\">most helpful first<\/a>. The text in each review has been pre-processed and attributed with three new features: Sentiment (Positive, Negative or Neutral), Sentiment Polarity and Sentiment Subjectivity.<\/li>\n<\/ul>","05318168":"# The Android App Market on Google Play\nLoad, clean, and visualize scraped Google Play Store data to gain insights into the Android app market.\n\n## Project Description\nMobile apps are everywhere. They are easy to create and can be lucrative. Because of these two factors, more and more apps are being developed. In this project, you will do a comprehensive analysis of the Android app market by comparing over ten thousand apps in Google Play across different categories. You'll look for insights in the data to devise strategies to drive growth and retention. The data for this project was scraped from the Google Play website. While there are many popular datasets for Apple App Store, there aren't many for Google Play apps, which is partially due to the increased difficulty in scraping the latter as compared to the former. The data files are as follows:\n\n* apps.csv: contains all the details of the apps on Google Play. These are the features that describe an app.\n* user_reviews.csv: contains 100 reviews for each app, most helpful first. The text in each review has been pre-processed, passed through a sentiment analyzer engine and tagged with its sentiment score.\n\n## Project Tasks\n    1. Google Play Store apps and reviews\n    2. Data cleaning\n    3. Exploring app categories\n    4. Distribution of app ratings\n    5. Size and price of an app\n    6. Relation between app category and app price\n    7. Filter out \"junk\" apps\n    8. Popularity of paid apps vs free apps\n    9. Sentiment analysis of user reviews","9307edb7":"## 4. Distribution of app ratings\n<p>After having witnessed the market share for each category of apps, let's see how all these apps perform on an average. App ratings (on a scale of 1 to 5) impact the discoverability, conversion of apps as well as the company's overall brand image. Ratings are a key performance indicator of an app.<\/p>\n<p>From our research, we found that the average volume of ratings across all app categories is <code>4.17<\/code>. The histogram plot is skewed to the right indicating that the majority of the apps are highly rated with only a few exceptions in the low-rated apps.<\/p>","8e3c15aa":"## 6. Relation between app category and app price\n<p>So now comes the hard part. How are companies and developers supposed to make ends meet? What monetization strategies can companies use to maximize profit? The costs of apps are largely based on features, complexity, and platform.<\/p>\n<p>There are many factors to consider when selecting the right pricing strategy for your mobile app. It is important to consider the willingness of your customer to pay for your app. A wrong price could break the deal before the download even happens. Potential customers could be turned off by what they perceive to be a shocking cost, or they might delete an app they\u2019ve downloaded after receiving too many ads or simply not getting their money's worth.<\/p>\n<p>Different categories demand different price ranges. Some apps that are simple and used daily, like the calculator app, should probably be kept free. However, it would make sense to charge for a highly-specialized medical app that diagnoses diabetic patients. Below, we see that <em>Medical and Family<\/em> apps are the most expensive. Some medical apps extend even up to \\$80! All game apps are reasonably priced below \\$20.<\/p>","a1006032":"## 2. Data cleaning\n<p>The three features that we will be working with most frequently henceforth are <code>Installs<\/code>, <code>Size<\/code>, and <code>Price<\/code>. A careful glance of the dataset reveals that some of these columns mandate data cleaning in order to be consumed by code we'll write later. Specifically, the presence of special characters (<code>, $ +<\/code>) and letters (<code>M k<\/code>) in the <code>Installs<\/code>, <code>Size<\/code>, and <code>Price<\/code> columns make their conversion to a numerical data type difficult. Let's clean by removing these and converting each column to a numeric type.<\/p>","321fe881":"## 9. Sentiment analysis of user reviews\n<p>Mining user review data to determine how people feel about your product, brand, or service can be done using a technique called sentiment analysis. User reviews for apps can be analyzed to identify if the mood is positive, negative or neutral about that app. For example, positive words in an app review might include words such as 'amazing', 'friendly', 'good', 'great', and 'love'. Negative words might be words like 'malware', 'hate', 'problem', 'refund', and 'incompetent'.<\/p>\n<p>By plotting sentiment polarity scores of user reviews for paid and free apps, we observe that free apps receive a lot of harsh comments, as indicated by the outliers on the negative y-axis. Reviews for paid apps appear never to be extremely negative. This may indicate something about app quality, i.e., paid apps being of higher quality than free apps on average. The median polarity score for paid apps is a little higher than free apps, thereby syncing with our previous observation.<\/p>\n<p>In this notebook, we analyzed over ten thousand apps from the Google Play Store. We can use our findings to inform our decisions should we ever wish to create an app ourselves.<\/p>","cd90992f":"### Set the style and size of visuals"}}