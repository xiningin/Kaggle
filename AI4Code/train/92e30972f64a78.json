{"cell_type":{"a37cd103":"code","a1326170":"code","21cbe624":"code","b43a29e6":"code","162a3779":"code","a6f14a8f":"code","95a1226b":"code","5a836369":"code","6e1c4de9":"code","f4ea295f":"code","b9714fae":"code","5c163edb":"code","d65be94a":"code","f5175170":"code","f6c6ceed":"code","a9087e36":"code","7c18e14d":"code","2a3b9018":"code","d4ee605d":"code","bd818310":"code","86fd58e1":"code","276da671":"code","bd30efab":"code","89c2c26f":"code","aaf5e5fd":"code","def1eebf":"code","cf6b7742":"code","63fa62ea":"code","f9f3c0ae":"markdown","5ad03e8a":"markdown","185fa9a7":"markdown","bd8d0c0f":"markdown","a307d819":"markdown","34bcca41":"markdown","751a5d07":"markdown","31f6b540":"markdown","ebce0457":"markdown","1deba0b4":"markdown","6dab3ca2":"markdown","edd42e93":"markdown","4c8c91b4":"markdown","24ade46b":"markdown","6fa8419d":"markdown","e4323b12":"markdown","2322cc98":"markdown","8016a8fc":"markdown","68115459":"markdown","b88d6422":"markdown","45a02f8f":"markdown"},"source":{"a37cd103":"#Import Library\nimport pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport squarify","a1326170":"data_oct = pd.read_csv('..\/input\/ecommerce-behavior-data-from-multi-category-store\/2019-Oct.csv',nrows=1)\ndata_oct","21cbe624":"data_oct = pd.read_csv('..\/input\/ecommerce-behavior-data-from-multi-category-store\/2019-Oct.csv',usecols=['event_time','event_type','price','user_id','user_session'])\ndata_nov = pd.read_csv('..\/input\/ecommerce-behavior-data-from-multi-category-store\/2019-Nov.csv',usecols=['event_time','event_type','price','user_id','user_session'])","b43a29e6":"data_oct.head()","162a3779":"data_oct['event_type'].unique()","a6f14a8f":"data_nov.head()","95a1226b":"data_nov['event_type'].unique()","5a836369":"data_oct=data_oct.loc[data_oct.event_type == 'purchase']\ndata_nov=data_nov.loc[data_nov.event_type == 'purchase']","6e1c4de9":"frames = [data_oct, data_nov]\ndata=pd.concat(frames)","f4ea295f":"data.head()","b9714fae":"%%time\ndata['event_time']=pd.to_datetime(data['event_time']).dt.tz_convert(None)","5c163edb":"data.dtypes","d65be94a":"%%time\n#save dataframe as feather in case our notebook got crashed\n#feather save column data types\nimport pyarrow.feather as feather\nos.makedirs('tmp', exist_ok=True)  # Make a temp dir for storing the feather file\nfeather.write_feather(data, '.\/tmp\/data')","f5175170":"%%time\n#load the feather data cause feather more lightweight\ndata = pd.read_feather('.\/tmp\/data')\ndata","f6c6ceed":"data.dtypes","a9087e36":"data=data.groupby(by='user_session').agg(Date_order=('event_time',lambda x: x.max()),\n                                                  user_id=('user_id',lambda x: x.unique()),\n                                          Quantity=('user_session','count'),\n                                         money_spent=('price','sum')).reset_index(drop=True)\ndata","7c18e14d":"data['Date_order'].max()","2a3b9018":"import datetime as dt\nstudy_date = dt.datetime(2019,12,1)\ndata=pd.DataFrame(data)\ndata['last_purchase']=study_date - data['Date_order']\ndata['last_purchase'].astype('timedelta64[D]')\ndata['last_purchase']=data['last_purchase'] \/ np.timedelta64(1, 'D')\ndata.head()\n","d4ee605d":"#Calculate Recency, Frequency, and Monetary of the data\nRFM= data.groupby('user_id').agg(Recency=('last_purchase',lambda x: x.min()),\n                                 Frequency=('user_id',lambda x: x.count()),\n                                 Monetary=('money_spent',lambda x: x.sum()))\nRFM.head()\n","bd818310":"RFM['Frequency'].describe()","86fd58e1":"RFM['Recency'].describe()","276da671":"RFM.quantile(q=[0.25,0.5,0.75])","bd30efab":"quartiles=RFM.quantile(q=[0.25,0.5,0.75]).to_dict()\nquartiles","89c2c26f":"## for Recency \n\ndef R(x,p,d):\n    if x <= d[p][0.25]:\n        return 1\n    elif x <= d[p][0.50]:\n        return 2\n    elif x <= d[p][0.75]: \n        return 3\n    else:\n        return 4\n    \n## for Frequency and Monetary \n\ndef FM(x,p,d):\n    if x <= d[p][0.25]:\n        return 4\n    elif x <= d[p][0.50]:\n        return 3\n    elif x <= d[p][0.75]: \n        return 2\n    else:\n        return 1    \n    ","aaf5e5fd":"#create RFM segmentation column\nRFM['R_Quartile'] = RFM['Recency'].apply(R, args=('Recency',quartiles,))\nRFM['F_Quartile'] = RFM['Frequency'].apply(FM, args=('Frequency',quartiles,))\nRFM['M_Quartile'] = RFM['Monetary'].apply(FM, args=('Monetary',quartiles,))\nRFM['RFM_segmentation'] = RFM.R_Quartile.map(str) \\\n                    + RFM.F_Quartile.map(str) \\\n                    + RFM.M_Quartile.map(str)\nRFM['RFM_score'] = RFM.R_Quartile.map(int) \\\n                    + RFM.F_Quartile.map(int) \\\n                    + RFM.M_Quartile.map(int)\nRFM.head()\n","def1eebf":"# Define rfm_level function\ndef RFM_label(data):\n    if data['RFM_score'] >= 10:\n        return 'Lost'\n    elif ((data['RFM_score'] >= 9) and (data['RFM_score'] < 10)):\n        return 'Hibernating'\n    elif ((data['RFM_score'] >= 8) and (data['RFM_score'] < 9)):\n        return 'Can\u2019t Lose Them'\n    elif ((data['RFM_score'] >= 7) and (data['RFM_score'] < 8)):\n        return 'About To Sleep'\n    elif ((data['RFM_score'] >= 6) and (data['RFM_score'] < 7)):\n        return 'Promising'\n    elif ((data['RFM_score'] >= 5) and (data['RFM_score'] < 6)):\n        return 'Potential Loyalist'\n    elif ((data['RFM_score'] >= 4) and (data['RFM_score'] < 5)):\n        return 'Loyal Customers'\n    else:\n        return 'Champions'\n#Create RFM label for customer\nRFM['RFM_label'] = RFM.apply(RFM_label, axis=1)\nRFM.head()","cf6b7742":"# Calculate average values for each RFM_Level, and return a size of each segment \nRFM_desc = RFM.groupby('RFM_label').agg({\n    'Recency': 'mean',\n    'Frequency': 'mean',\n    'Monetary': ['mean', 'count']\n}).round(1)\n# Print the aggregated dataset\nprint(RFM_desc)","63fa62ea":"RFM_desc.columns = RFM_desc.columns.droplevel()\nRFM_desc.columns = ['RecencyMean','FrequencyMean','MonetaryMean', 'Count']\n#Create our plot and resize it.\nfig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(16, 9)\nsquarify.plot(sizes=RFM_desc['Count'], \n              label=['Lost',\n                     'Hibernating',\n                     'Can\u2019t Lose Them',\n                     'About To Sleep',\n                     'Promising', \n                     'Potential Loyalist', \n                     'Loyal Customers',\n                     'Champions'], alpha=.6 )\nplt.title(\"RFM Segments\",fontsize=18,fontweight=\"bold\")\nplt.axis('off')\nplt.show()","f9f3c0ae":"# **Data Preprocessing**","5ad03e8a":"How many customers do we have in each segment?\n","185fa9a7":"**RFM Quartiles**","bd8d0c0f":"**Column event type have view, cart, and purchase but we only need purchase data so use .loc to get only purchase data**","a307d819":"**Then union October and November data**","34bcca41":"The last date we have is 2019-11-30 so we will use date 2019-12-1 as reference\n","751a5d07":"RFM segmentation is a useful tool for identifying groups of clients who should be given extra attention. RFM segmentation enables marketers to target specific groups of customers with communications that are far more relevant to their unique behaviors, resulting in improved response rates, enhanced loyalty, and increased customer lifetime value. RFM segmentation is a method for segmenting data, just like other approaches. \n\nThe simplest way to create customers segments from RFM Model is to use Quartiles. We assign a score from 1 to 4 to Recency, Frequency and Monetary. Four is the best\/highest value, and one is the lowest\/worst value. A final RFM score is calculated simply by combining individual RFM score numbers.","31f6b540":"Now that we've identified our customer categories, we can decide how to approach or deal with each customer.\n\n* Champions : Reward them. Can be early adopters of new products. Will promote your brand. Most likely to send referrals.\n* Loyal Customer : Upsell higher value products. Ask for reviews.\n* Potential Loyalist : Offer membership \/ loyalty program. Keep them engaged. Offer personalised recommendations.\n* Promising : Offer coupons. Bring them back to the platform and keep them engaged. Offer personalised recommendations.\n* About to Sleep : Win them back via renewals or newer products, don\u2019t lose them to competition. Talk to them if necessary. Spend time on highest possible personalisation.\n* Can't Lose Them : Provide helpful resources on the site. Send personalised emails.\n* Hibernating : Make subject lines of emails very personalised. Revive their interest by a specific discount on a specific product.\n* Lost : Revive interest with reach out campaign. Ignore otherwise.\n\nreference : [here](https:\/\/docs.exponea.com\/docs\/rfm-segmentation)","ebce0457":"# **Creation of RFM Segments**","1deba0b4":"**only load the required data **","6dab3ca2":"# **RFM Analysis**","edd42e93":"# **Load The Data**","4c8c91b4":"Hi Kagglers,\n\nWelcome to My Kernal about RFM Analysis of eCommerce behavior data\n\nIf there are any feedbacks\/suggestions you would like to see in the Kernel please let me know. This notebook will always be a work in progress. Please leave any comments about further improvements to the notebook. I appreciate every note!\n\nIf you like it, you can upvote and\/or leave a comment :)","24ade46b":"but sometimes the notebook we run crashes so it's better to save the cleaned data into feather format \nmore reference about feather you can read it on [here](https:\/\/medium.com\/@steven.p.dye\/feather-files-faster-than-the-speed-of-light-d4666ce24387) or [here](https:\/\/arrow.apache.org\/docs\/python\/feather.html)","6fa8419d":"# **RFM Segmentation**","e4323b12":"# **Monetary**","2322cc98":"Frequency attribute answers the question: How often do they purchase?","8016a8fc":"# **Frequency**","68115459":"RFM is a method used for analyzing customer value. It is commonly used in database marketing and direct marketing and has received particular attention in retail and professional services industries.\n\nRFM stands for the three dimensions:\n\n* Recency \u2013 How recently did the customer purchase?\n* Frequency \u2013 How often do they purchase?\n* Monetary Value \u2013 How much do they spend?\n\nsource: [wikipedia](https:\/\/en.wikipedia.org\/wiki\/RFM_(market_research))\n\nso we will make that 3 attribute Recency, Frequency, and Monetary","b88d6422":"Monetary attribute answers the question: How much do they spend overtime?\n","45a02f8f":"we can see that each session is equal to 1 transaction in terms of sessions being multiples with every product sold\nso we need to merge every session together "}}