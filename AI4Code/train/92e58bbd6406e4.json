{"cell_type":{"1988a1dd":"code","5063412e":"code","f2b16c36":"code","5bae7d10":"code","90decf28":"code","20261b6d":"code","b2df8edf":"code","e9247320":"code","30ffd33b":"code","87f8d446":"code","cd8fe48d":"code","1619a2e7":"code","204d68d1":"code","b80b5cc0":"code","f2a1c0fd":"code","f565099f":"code","36d8c080":"code","9bb8c337":"code","49852e30":"code","f7218360":"code","d4007a50":"code","d8188902":"code","3d5a1fb0":"code","839c5300":"code","ba0abcac":"code","7f3156fb":"code","93e4cf6d":"code","ac648910":"code","a3ef4c2e":"code","8884bbfb":"code","d867bf0b":"code","1e0fd1fb":"code","49f6a58e":"code","847f79b4":"code","3400456b":"markdown","3bfa3834":"markdown","2c1cc8f7":"markdown","29943600":"markdown","4ce56031":"markdown","b438a581":"markdown","93341f33":"markdown","af16329b":"markdown","31e50945":"markdown","b30ae6ca":"markdown","ddadc191":"markdown","6827ff42":"markdown","401337ad":"markdown","8296e4ea":"markdown","d43a3694":"markdown","985783be":"markdown","803906d9":"markdown","1c662e3e":"markdown","ce6e92fd":"markdown","06a398c4":"markdown","5e928c0c":"markdown","9eb9a7a2":"markdown","5a4af27d":"markdown","4475088c":"markdown","d03572a7":"markdown","7427a82c":"markdown","a7f536ef":"markdown","bc7d990b":"markdown","4017c0ce":"markdown","26b7204d":"markdown","12139919":"markdown","674b11a2":"markdown","7d371344":"markdown"},"source":{"1988a1dd":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nage_details = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospital_beds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nindividual_details = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nICMR_details = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingDetails.csv')\nICMR_labs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\npopulation = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\n\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])\nICMR_details['DateTime'] = pd.to_datetime(ICMR_details['DateTime'],dayfirst = True)\nICMR_details = ICMR_details.dropna(subset=['TotalSamplesTested', 'TotalPositiveCases'])","5063412e":"world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\nworld_recovered = recovered_df[recovered_df.columns[-1:]].sum()\nworld_deaths = deaths_df[deaths_df.columns[-1:]].sum()\nworld_active = world_confirmed - (world_recovered - world_deaths)\n\nlabels = ['Active','Recovered','Deceased']\nsizes = [world_active,world_recovered,world_deaths]\ncolor= ['#66b3ff','green','red']\nexplode = []\n\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize= (15,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('World COVID-19 Cases',fontsize = 20)\nplt.axis('equal')  \nplt.tight_layout()","f2b16c36":"hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nglobal_confirmed = {}\nglobal_deaths = {}\nglobal_recovered = {}\nglobal_active= {}\n\nfor country in hotspots:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed[country] = k.values.tolist()[0]\n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths[country] = k.values.tolist()[0]\n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_recovered[country] = k.values.tolist()[0]\n    \nfor country in hotspots:\n    k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))\n    global_active[country] = list(map(int.__sub__, k, global_recovered[country]))\n    \nfig = plt.figure(figsize= (15,15))\nplt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of April 29',fontsize = 20,y=1.0)\n#plt.legend()\nk=0\nfor i in range(1,12):\n    ax = fig.add_subplot(6,2,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(dates_india,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');\n    ax.bar(dates_india,global_recovered[hotspots[k]],color='grey',label = 'Recovered');\n    ax.bar(dates_india,global_deaths[hotspots[k]],color='red',label = 'Death');   \n    plt.title(hotspots[k])\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\n\nplt.tight_layout(pad=3.0)","5bae7d10":"hotspots = ['China','Germany','Iran','Italy','Spain','United States','South Korea','France','Turkey','United Kingdom','India']\ncountry_death_rate = pd.DataFrame(columns = ['country','day1','day2','day3'])\nworld_population['Population (2020)'] = world_population['Population (2020)']\/1000000\n\nd1=[]\nd2 =[]\nd3 = []\nfor country in hotspots:\n    p = float(world_population[world_population['Country (or dependency)'] == country ]['Population (2020)'])\n    if country == 'United States':\n        k = global_deaths['US'][-3:]\n    elif country == 'South Korea':\n        k = global_deaths['Korea, South'][-3:]\n    else:\n        k = global_deaths[country][-3:]\n    d1.append(round(k[0]\/p,2))\n    d2.append(round(k[1]\/p,2))\n    d3.append(round(k[2]\/p,2))\n\ncountry_death_rate['country'] = hotspots\ncountry_death_rate['day1'] = d1\ncountry_death_rate['day2'] = d2\ncountry_death_rate['day3'] = d3    \n\nplt.figure(figsize= (10,10))\nplt.hlines(y=country_death_rate['country'], xmin=country_death_rate['day1'], xmax=country_death_rate['day3'], color='grey', alpha=0.4);\nplt.scatter(country_death_rate['day1'], country_death_rate['country'], color='skyblue', label='7th May');\nplt.scatter(country_death_rate['day2'], country_death_rate['country'], color='green', label='8th May');\nplt.scatter(country_death_rate['day3'], country_death_rate['country'], color='red', label='9th May');\nplt.legend();\nplt.title(\"Death Rate per Million in Hotspot Countries\",fontsize=20);\nplt.xlabel('Death Rate per Million');","90decf28":"labels = list(age_details['AgeGroup'])\nsizes = list(age_details['TotalCases'])\n\nexplode = []\n\nfor i in labels:\n    explode.append(0.05)\n    \nplt.figure(figsize= (15,10))\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode)\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\n\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.title('India - Age Group wise Distribution',fontsize = 20)\nplt.axis('equal')  \nplt.tight_layout()","20261b6d":"labels = ['Missing', 'Male', 'Female']\nsizes = []\nsizes.append(individual_details['gender'].isnull().sum())\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0, 0.1, 0)\ncolors = ['#ffcc99','#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.title('Percentage of Gender',fontsize = 20)\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.tight_layout()","b2df8edf":"labels = ['Male', 'Female']\nsizes = []\nsizes.append(list(individual_details['gender'].value_counts())[0])\nsizes.append(list(individual_details['gender'].value_counts())[1])\n\nexplode = (0.1, 0)\ncolors = ['#66b3ff','#ff9999']\n\nplt.figure(figsize= (15,10))\nplt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.title('Percentage of Gender (Ignoring the Missing Values)',fontsize = 20)\nplt.axis('equal')\nplt.tight_layout()","e9247320":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","30ffd33b":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend();","87f8d446":"countries = ['China','US', 'Italy', 'Spain', 'France','India']\n\nglobal_confirmed = []\nglobal_recovered = []\nglobal_deaths = []\nglobal_active = []\n\nfor country in countries:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed.append(k.values.tolist()[0]) \n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0]) \n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths.append(k.values.tolist()[0])  \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Comparison with other Countries\" , fontsize = 20)\n\nfor i in range(len(countries)):\n    plt.plot_date(y= global_confirmed[i],x= dates_india,label = countries[i],linestyle ='-')\nplt.legend();","cd8fe48d":"ICMR_details['Percent_positive'] = round((ICMR_details['TotalPositiveCases']\/ICMR_details['TotalSamplesTested'])*100,1)\n\nfig, ax1 = plt.subplots(figsize= (15,5))\nax1.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\nax1.set_ylabel('Positive Cases (% of Total Samples Tested)')\nax1.bar(ICMR_details['DateTime'] , ICMR_details['Percent_positive'], color=\"red\",label = 'Percentage of Positive Cases')\nax1.text(ICMR_details['DateTime'][0],4, 'Total Samples Tested as of Apr 23rd = 541789', style='italic',fontsize= 10,\n        bbox={'facecolor': 'white' ,'alpha': 0.5, 'pad': 5})\n\nax2 = ax1.twinx()  \nax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\nax2.set_ylabel('Num Samples Tested')\nax2.fill_between(ICMR_details['DateTime'],ICMR_details['TotalSamplesTested'],color = 'black',alpha = 0.5,label = 'Samples Tested');\n\nplt.legend(loc=\"upper left\")\nplt.title('Total Samples Tested')\nplt.show()","1619a2e7":"state_cases = india_covid_19.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\n\n#state_cases = state_cases.astype({'Deaths': 'int'})\nstate_cases['Active'] = state_cases['Confirmed'] - (state_cases['Deaths']+state_cases['Cured'])\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Cure Rate (per 100)\"])","204d68d1":"all_state = list(india_covid_19['State\/UnionTerritory'].unique())\nall_state.remove('Unassigned')\n#all_state.remove('Nagaland#')\n#all_state.remove('Nagaland')\nlatest = india_covid_19[india_covid_19['Date'] > '24-03-20']\nstate_cases = latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nlatest['Active'] = latest['Confirmed'] - (latest['Deaths']- latest['Cured'])\nstate_cases = state_cases.sort_values('Confirmed', ascending= False).fillna(0)\nstates =list(state_cases['State\/UnionTerritory'][0:15])\n\nstates_confirmed = {}\nstates_deaths = {}\nstates_recovered = {}\nstates_active = {}\nstates_dates = {}\n\nfor state in states:\n    df = latest[latest['State\/UnionTerritory'] == state].reset_index()\n    k = []\n    l = []\n    m = []\n    n = []\n    for i in range(1,len(df)):\n        k.append(df['Confirmed'][i]-df['Confirmed'][i-1])\n        l.append(df['Deaths'][i]-df['Deaths'][i-1])\n        m.append(df['Cured'][i]-df['Cured'][i-1])\n        n.append(df['Active'][i]-df['Active'][i-1])\n    states_confirmed[state] = k\n    states_deaths[state] = l\n    states_recovered[state] = m\n    states_active[state] = n\n    date = list(df['Date'])\n    states_dates[state] = date[1:]\n    \ndef calc_movingaverage(values ,N):    \n    cumsum, moving_aves = [0], [0,0]\n    for i, x in enumerate(values, 1):\n        cumsum.append(cumsum[i-1] + x)\n        if i>=N:\n            moving_ave = (cumsum[i] - cumsum[i-N])\/N\n            moving_aves.append(moving_ave)\n    return moving_aves\n\nfig = plt.figure(figsize= (25,17))\nplt.suptitle('5-Day Moving Average of Confirmed Cases in Top 15 States',fontsize = 20,y=1.0)\nk=0\nfor i in range(1,15):\n    ax = fig.add_subplot(5,3,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') \n    moving_aves = calc_movingaverage(states_confirmed[states[k]],5)\n    ax.plot(states_dates[states[k]][:-2],moving_aves,color='red',label = 'Moving Average',linewidth =3)  \n    plt.title(states[k],fontsize = 20)\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\nplt.tight_layout(pad=3.0)","b80b5cc0":"def calc_growthRate(values):\n    k = []\n    for i in range(1,len(values)):\n        summ = 0\n        for j in range(i):\n            summ = summ + values[j]\n        rate = (values[i]\/summ)*100\n        k.append(int(rate))\n    return k\n\nfig = plt.figure(figsize= (25,17))\nplt.suptitle('Growth Rate in Top 15 States',fontsize = 20,y=1.0)\nk=0\nfor i in range(1,15):\n    ax = fig.add_subplot(5,3,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    #ax.bar(states_dates[states[k]],states_confirmed[states[k]],label = 'Day wise Confirmed Cases ') \n    growth_rate = calc_growthRate(states_confirmed[states[k]])\n    ax.plot_date(states_dates[states[k]][21:],growth_rate[20:],color = '#9370db',label = 'Growth Rate',linewidth =3,linestyle='-')  \n    plt.title(states[k],fontsize = 20)\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\nplt.tight_layout(pad=3.0)","f2a1c0fd":"#norm = matplotlib.colors.Normalize(vmin=min(state_cases.Confirmed), vmax=max(state_cases.Confirmed))\n#colors = [matplotlib.cm.Blues(norm(value)) for value in state_cases.Confirmed]\n\n#plt.figure(figsize= (15,10))\n#fig = plt.gcf()\n#ax = fig.add_subplot()\n\n#squarify.plot(label=list(state_cases.index),sizes=state_cases.Confirmed, color = colors, alpha=.6)\n\n#plt.title(\"Statewise Distribution\",fontsize=23,fontweight=\"bold\")\n#plt.axis('off')\n#plt.show()","f565099f":"colors_list = ['cyan','teal']\nstates = individual_details['detected_state'].unique()\nif len(states)%2==0:\n    n_rows = int(len(states)\/2)\nelse:\n    n_rows = int((len(states)+1)\/2)    \nplt.figure(figsize=(14,60))\n\nfor idx,state in enumerate(states):    \n    plt.subplot(n_rows,2,idx+1)\n    y_order = individual_details[individual_details['detected_state']==state]['detected_district'].value_counts().index\n    try:\n        g = sns.countplot(data=individual_details[individual_details['detected_state']==state],y='detected_district',orient='v',color=colors_list[idx%2],order=y_order)\n        plt.xlabel('Number of Cases')\n        plt.ylabel('')\n        plt.title(state)\n        plt.ylim(14,-1)\n    except:\n        pass\nplt.tight_layout()\nplt.show()","36d8c080":"population['in_million'] = population['Population']\/1000000\nstate_death_rate = pd.DataFrame(columns = ['state','day1','day2','day3'])\nlatest = india_covid_19[india_covid_19['Date'] > '24-03-20']\nstate_cases = latest.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nlatest['Active'] = latest['Confirmed'] - (latest['Deaths']- latest['Cured'])\nstate_cases = state_cases.sort_values('Confirmed', ascending= False).fillna(0)\nstates =list(state_cases['State\/UnionTerritory'][0:15])\n\ns = []\nd1 = []\nd2 = []\nd3 = []\n\nfor state in states:\n    k = list(india_covid_19[india_covid_19['State\/UnionTerritory'] == state]['Deaths'].tail(3))\n    p = float(population[population['State \/ Union Territory']== state]['in_million'])\n    d1.append(round(k[0]\/p,2))\n    d2.append(round(k[1]\/p,2))\n    d3.append(round(k[2]\/p,2))\n    s.append(state)\n    \nstate_death_rate['state'] = s\nstate_death_rate['day1'] = d1\nstate_death_rate['day2'] = d2\nstate_death_rate['day3'] = d3\n\nplt.figure(figsize= (10,10))\nplt.hlines(y=state_death_rate['state'], xmin=state_death_rate['day1'], xmax=state_death_rate['day3'], color='grey', alpha=0.4);\nplt.scatter(state_death_rate['day1'], state_death_rate['state'], color='skyblue', label='7th May');\nplt.scatter(state_death_rate['day2'], state_death_rate['state'], color='green', label='8th May');\nplt.scatter(state_death_rate['day3'], state_death_rate['state'], color='red', label='9th May');\nplt.legend();\nplt.title(\"Death Rate per Million in Hotspot States\",fontsize=20);\nplt.xlabel('Death Rate per Million');","9bb8c337":"hospital_beds =hospital_beds.drop([36])\ncols_object = list(hospital_beds.columns[2:8])\n\nfor cols in cols_object:\n    hospital_beds[cols] = hospital_beds[cols].astype(int,errors = 'ignore')","49852e30":"top_10_primary = hospital_beds.nlargest(10,'NumPrimaryHealthCenters_HMIS')\ntop_10_community = hospital_beds.nlargest(10,'NumCommunityHealthCenters_HMIS')\ntop_10_district_hospitals = hospital_beds.nlargest(10,'NumDistrictHospitals_HMIS')\ntop_10_public_facility = hospital_beds.nlargest(10,'TotalPublicHealthFacilities_HMIS')\ntop_10_public_beds = hospital_beds.nlargest(10,'NumPublicBeds_HMIS')\n\nplt.figure(figsize=(15,10))\nplt.suptitle('Top 10 States in each Health Facility',fontsize=20)\nplt.subplot(221)\nplt.title('Primary Health Centers')\nplt.barh(top_10_primary['State\/UT'],top_10_primary['NumPrimaryHealthCenters_HMIS'],color ='#87479d');\n\nplt.subplot(222)\nplt.title('Community Health Centers')\nplt.barh(top_10_community['State\/UT'],top_10_community['NumCommunityHealthCenters_HMIS'],color = '#9370db');\n\nplt.subplot(224)\nplt.title('Total Public Health Facilities')\nplt.barh(top_10_community['State\/UT'],top_10_public_facility['TotalPublicHealthFacilities_HMIS'],color='#9370db');\n\nplt.subplot(223)\nplt.title('District Hospitals')\nplt.barh(top_10_community['State\/UT'],top_10_district_hospitals['NumDistrictHospitals_HMIS'],color = '#87479d');","f7218360":"top_rural_hos = hospital_beds.nlargest(10,'NumRuralHospitals_NHP18')\ntop_rural_beds = hospital_beds.nlargest(10,'NumRuralBeds_NHP18')\ntop_urban_hos = hospital_beds.nlargest(10,'NumUrbanHospitals_NHP18')\ntop_urban_beds = hospital_beds.nlargest(10,'NumUrbanBeds_NHP18')\n\nplt.figure(figsize=(15,10))\nplt.suptitle('Urban and Rural Health Facility',fontsize=20)\nplt.subplot(221)\nplt.title('Rural Hospitals')\nplt.barh(top_rural_hos['State\/UT'],top_rural_hos['NumRuralHospitals_NHP18'],color = '#87479d');\n\nplt.subplot(222)\nplt.title('Urban Hospitals')\nplt.barh(top_urban_hos['State\/UT'],top_urban_hos['NumUrbanHospitals_NHP18'],color = '#9370db');\n\nplt.subplot(223)\nplt.title('Rural Beds')\nplt.barh(top_rural_beds['State\/UT'],top_rural_beds['NumRuralBeds_NHP18'],color = '#87479d');\n\nplt.subplot(224)\nplt.title('Urban Beds')\nplt.barh(top_urban_beds['State\/UT'],top_urban_beds['NumUrbanBeds_NHP18'],color = '#9370db');","d4007a50":"state_test = pd.pivot_table(state_testing, values=['TotalSamples','Negative','Positive'], index='State', aggfunc='max')\nstate_names = list(state_test.index)\nstate_test['State'] = state_names\n\nplt.figure(figsize=(15,10))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"TotalSamples\", y= state_names, data=state_test,label=\"Total Samples\", color = '#9370db')\nsns.barplot(x='Negative', y=state_names, data=state_test,label='Negative', color= '#ff9999')\nsns.barplot(x='Positive', y=state_names, data=state_test,label='Positive', color='#87479d')\nplt.title('Testing statewise insight',fontsize = 20)\nplt.legend(ncol=2, loc=\"lower right\", frameon=True);","d8188902":"values = list(ICMR_labs['state'].value_counts())\nnames = list(ICMR_labs['state'].value_counts().index)\n\nplt.figure(figsize=(15,10))\nsns.set_color_codes(\"pastel\")\nplt.title('ICMR Testing Centers in each State', fontsize = 20)\nsns.barplot(x= values, y= names,color = '#9370db');","3d5a1fb0":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk =df1[df1['Country\/Region']=='India'].loc[:,'2\/4\/20':]\nindia_confirmed = k.values.tolist()[0] \n\ngrowth_diff = []\n\nfor i in range(1,len(india_confirmed)):\n    growth_diff.append(india_confirmed[i] \/ india_confirmed[i-1])\n\ngrowth_factor = sum(growth_diff)\/len(growth_diff)\nprint('Average growth factor',growth_factor)","839c5300":"prediction_dates = []\n\nstart_date = dates_india[len(dates_india) - 1]\nfor i in range(15):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nprevious_day_cases = global_confirmed[5][len(dates_india) - 1]\npredicted_cases = []\n\nfor i in range(15):\n    predicted_value = previous_day_cases *  growth_factor\n    predicted_cases.append(predicted_value)\n    previous_day_cases = predicted_value\n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\nax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","ba0abcac":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-3\/test.csv')\ntrain['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","7f3156fb":"k = df1[df1['Country\/Region']=='India'].loc[:,'1\/22\/20':]\nindia_confirmed = k.values.tolist()[0] \ndata = pd.DataFrame(columns = ['ds','y'])\ndata['ds'] = dates\ndata['y'] = india_confirmed\n\nprop=Prophet()\nprop.fit(data)\nfuture=prop.make_future_dataframe(periods=30)\nprop_forecast=prop.predict(future)\nforecast = prop_forecast[['ds','yhat']].tail(30)\n\nfig = plot_plotly(prop, prop_forecast)\nfig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","93e4cf6d":"arima = ARIMA(data['y'], order=(5, 1, 0))\narima = arima.fit(trend='c', full_output=True, disp=True)\nforecast = arima.forecast(steps= 30)\npred = list(forecast[0])\n\nstart_date = data['ds'].max()\nprediction_dates = []\nfor i in range(30):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nplt.figure(figsize= (15,10))\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\n\nplt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted');\nplt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',color = 'blue',label = 'Actual');\nplt.legend();","ac648910":"train['day'] = train['Date'].dt.day\ntrain['month'] = train['Date'].dt.month\ntrain['dayofweek'] = train['Date'].dt.dayofweek\ntrain['dayofyear'] = train['Date'].dt.dayofyear\ntrain['quarter'] = train['Date'].dt.quarter\ntrain['weekofyear'] = train['Date'].dt.weekofyear\ntest['day'] = test['Date'].dt.day\ntest['month'] = test['Date'].dt.month\ntest['dayofweek'] = test['Date'].dt.dayofweek\ntest['dayofyear'] = test['Date'].dt.dayofyear\ntest['quarter'] = test['Date'].dt.quarter\ntest['weekofyear'] = test['Date'].dt.weekofyear\ncountries = list(train['Country_Region'].unique())\nindia_code = countries.index('India')\ntrain = train.drop(['Date','Id'],1)\ntest =  test.drop(['Date'],1)\n\ntrain.Province_State.fillna('NaN', inplace=True)\noe = OrdinalEncoder()\ntrain[['Province_State','Country_Region']] = oe.fit_transform(train.loc[:,['Province_State','Country_Region']])\n\ntest.Province_State.fillna('NaN', inplace=True)\noe = OrdinalEncoder()\ntest[['Province_State','Country_Region']] = oe.fit_transform(test.loc[:,['Province_State','Country_Region']])","a3ef4c2e":"columns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State', 'Country_Region','ConfirmedCases','Fatalities']\ntest_columns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State','Country_Region']\ntrain = train[columns]\nx = train.drop(['Fatalities','ConfirmedCases'], 1)\ny = train['ConfirmedCases']\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)\ntest = test[test_columns]\ntest_india = test[test['Country_Region'] == india_code]","8884bbfb":"models = []\nmse = []\nmae = []\nrmse = []","d867bf0b":"lgbm = LGBMRegressor(n_estimators=1300)\nlgbm.fit(x_train,y_train)\npred = lgbm.predict(x_test)\nlgbm_forecast = lgbm.predict(test_india)\nmodels.append('LGBM')\nmse.append(round(mean_squared_error(pred, y_test),2))\nmae.append(round(mean_absolute_error(pred, y_test),2))\nrmse.append(round(np.sqrt(mean_squared_error(pred, y_test)),2))","1e0fd1fb":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(x_train,y_train)\npred = rf.predict(x_test)\nrfr_forecast = rf.predict(test_india)\nmodels.append('Random Forest')\nmse.append(round(mean_squared_error(pred, y_test),2))\nmae.append(round(mean_absolute_error(pred, y_test),2))\nrmse.append(round(np.sqrt(mean_squared_error(pred, y_test)),2))","49f6a58e":"xgb = XGBRegressor(n_estimators=100)\nxgb.fit(x_train,y_train)\npred = xgb.predict(x_test)\nxgb_forecast = xgb.predict(test_india)\nmodels.append('XGBoost')\nmse.append(round(mean_squared_error(pred, y_test),2))\nmae.append(round(mean_absolute_error(pred, y_test),2))\nrmse.append(round(np.sqrt(mean_squared_error(pred, y_test)),2))","847f79b4":"plt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Different Models\",fontsize = 20)\nplt.ylabel('RMSE',fontsize = 20)\nplt.title(\"RMSE Values of different models\" , fontsize = 20)\nsns.barplot(x=models,y=rmse);","3400456b":"Men are the most affected accounting to 67%. But, remember we have ~80% data missing.","3bfa3834":"### Age Group Analysis <a id=\"2\"><\/a>","2c1cc8f7":"**80% of the patients gender information is missing. Let's analyse with remaining the data.","29943600":"We could see that the **age group <40 is the most affected** which is against the trend which says elderly people are more at risk of being affected. Only 17% of people >60 are affected.","4ce56031":"#                  Stay home! Stay Safe!","b438a581":"## Economic Impact of COVID-19 on India <a id=\"4\"><\/a>\n\n### The coronavirus is having a growing impact on the Indian economy. Here is an interesting insight on how an extenstion of the lockdown would affect the economy (Credits: McKincy & Company)\n\n![](https:\/\/www.mckinsey.com\/~\/media\/McKinsey\/Featured%20Insights\/India\/Getting%20ahead%20of%20coronavirus%20Saving%20lives%20and%20livelihoods%20in%20India\/SVGZ-India-COVID-ex1.ashx)","93341f33":"## Prediction using growth factor <a id=\"9\"><\/a>\n#### Assuming the same growth factor continues for the next 15 days","af16329b":"#### Prediction for the next 15 days","31e50945":"### Here is another pretty good plot on health faicilities in various countries <a id=\"8\"><\/a>","b30ae6ca":"## Without lockdown, India would have 2 lakh Covid-19 cases by now: Health ministry","ddadc191":"![](https:\/\/pbs.twimg.com\/media\/EXi_Ar0WsAckbao?format=jpg&name=large)","6827ff42":"### For detailed analysis on the recent oil price fall checkout my notebook [The Shrinkage of Crude Oil Price](https:\/\/www.kaggle.com\/nitishabharathi\/the-shrinkage-of-crude-oil-price)","401337ad":"## Prediction using Prophet Model <a id=\"10\"><\/a>","8296e4ea":"### Though being highly populated the relative confimred cases of India is low compared to other countries. This could be because of two reasons\n1. 21 day lockdown imposed by prime minister Narendra Modi (Source : [Health Ministry](http:\/\/www.indiatoday.in\/india\/story\/without-lockdown-india-would-have-2-lakh-covid-19-cases-by-now-health-ministry-1665903-2020-04-11))\n2. Low testing rate (Source: [news18](https:\/\/www.news18.com\/news\/india\/with-just-18-tests-per-million-of-population-why-indias-low-testing-rate-for-coronavirus-is-worrying-2552845.html))","d43a3694":"### Big Increases: Rajasthan, TN, Gujarat, WB, UP, Punjab, Maharashtra","985783be":"### Statewise Testing and Healthcare Insights <a id=\"6\"><\/a>","803906d9":"# India Updates <a id=\"1\"><\/a>","1c662e3e":"## Statewise Insights <a id=\"5\"><\/a>","ce6e92fd":"## LGBM Regressor <a id=\"12\"><\/a>","06a398c4":"# Table of Contents\n\n* [World Updates](#32)\n* [India Updates](#1)\n* [Age Group\/Gender Analysis](#2)\n* [The Spike in India](#3)\n* [Testing in India](#8)\n* [Statewise Insights](#5)\n* [Statewise Testing and Healthcare Insights](#6)\n* [Economic Impact of COVID-19 on India](#4)\n* [Prediction](#7)\n     * [Growth Factor](#9)\n     * [Prophet Model](#10)\n     * [ARIMA (5,2,0)](#11)\n     * [LightGBM](#12)\n     * [Random Forest Regressor](#13)\n     * [XGBoost Regressor](#14)\n* [Interesting Insights from other Sources](#25)","5e928c0c":"We could see that the graph is increasing exponentialy if the average growth factor doesn't decrease. It is important that the growth factor is reduced to flatten the curve.","9eb9a7a2":"![](https:\/\/pbs.twimg.com\/media\/EXi_ArsXgAEZiL7?format=jpg&name=large)\nCredits : Prof. Shamika Ravi","5a4af27d":"# 1. World Updates (05-09-2020) <a id=\"32\"><\/a>\n## World Active Cases :   2927696\n## World Recovered Cases :  1375624\n## World Casualities :   279311","4475088c":"![](https:\/\/images.assettype.com\/bloombergquint%2F2020-03%2F71e05b2a-15cc-4930-83b9-be22357e2093%2FHealthcare_Is_Less_Abundant_In_India_Compared_To_Global_Average.png?auto=format&q=35&w=1200&h=979)","d03572a7":"![](https:\/\/pbs.twimg.com\/media\/EVUWy8vUMAUoHEh?format=png&name=small)","7427a82c":"### Certain Recovery : South Korea, Germany, Iran (Flattened the Curve!)\n### Uncertain Recovery : Italy, France, Spain (Flattening!)\n### United Kingdom showing very few recoveries","a7f536ef":"## Prediction using ARIMA <a id=\"11\"><\/a>","bc7d990b":"# The Story of COVID-19 in India\n\n#### The COVID-19 pandemic is the defining global health crisis of our time and the greatest global humanitarian challenge the world has faced since World War II. The virus has spread widely, and the number of cases is rising daily as governments work to slow its spread. India has moved quickly, implementing a proactive, nationwide, lockdown, with the goal of flattening the curve and using the time to plan and resource responses adequately.","4017c0ce":"# Interesting Insights for the Day from other Sources <a id=\"25\"><\/a>\n## <font color='purple'>1. Decline in Doubling Rate<\/font>\n![](https:\/\/github.com\/nitishabharathi\/analysis-images\/blob\/master\/doubling%20rate.JPG?raw=true)\n\nRed dot -> Doubling Rate as of May 4\nGrey dot -> Doubling Rate as of May 5\n## TN, Haryana, Punjab - Doubling Rate decreased. This implies a sharp rise in infections in these states.\n(Credits: The Hindu)\n\n\n## <font color='purple'>2. The Kasaragod Model (Kasaragod is the northenmost district of Kerala)<\/font>\n![](https:\/\/pbs.twimg.com\/media\/EWCu2VKXgAA-55I?format=jpg&name=large)\n(Credits: Prof Shamika Ravi, The Indian Express)\n### Kasaragod reported the third case of COVID-19 in the country - a student airlifted from Wuhan on Feb 3. The district administration mounted a massive exercise to trace the 150 contacts of that one student. Kararagod has had 169 cases and zero deaths until April 19, a unique achievement. \n\n## 3. <font color='purple'>Projected vs Actual Cases!<\/font>\n![](https:\/\/pbs.twimg.com\/media\/EWl_4nTXkAAyNGg?format=jpg&name=large)","26b7204d":"## Random Forest Regressor <a id=\"13\"><\/a>","12139919":"# Prediction <a id=\"7\"><\/a>","674b11a2":"### The Spike in India <a id=\"3\"><\/a>","7d371344":"## XGB Regressor<a id=\"14\"><\/a>"}}