{"cell_type":{"543ec340":"code","f7082c92":"code","5e5456f6":"code","399a6d4f":"code","1a67b349":"code","f8c8e3d8":"code","76da5e97":"code","b17f11d0":"code","2f63f4df":"code","57360488":"code","f54d5b36":"code","368e7157":"code","330a103b":"code","41d92337":"code","95875a9f":"code","a9a48585":"code","98c01fd2":"code","d14c4ced":"markdown","e6602176":"markdown","19d6ee70":"markdown","7aa541cb":"markdown","6f141e38":"markdown","341f590b":"markdown","ca46bcc3":"markdown","90810b58":"markdown","1f115dba":"markdown","18be0a46":"markdown","edd34b15":"markdown","5bb7f3c3":"markdown","14e68306":"markdown","eee920e4":"markdown","a8830672":"markdown","1e9ca510":"markdown"},"source":{"543ec340":"!pip install nb_black -q","f7082c92":"%load_ext nb_black","5e5456f6":"import pandas as pd\nimport numpy as np\n\ncar_sales_monthly = pd.read_csv(\n    \"..\/input\/newcarsalesnorway\/norway_new_car_sales_by_month.csv\"\n)\nprint(\"Rows: {} and Columns: {}\".format(*car_sales_monthly.shape))\nprint(\"Number of Nan {}\".format(car_sales_monthly.isna().sum().sum()))\ncar_sales_monthly.fillna(0, inplace=True)\n","399a6d4f":"car_sales_monthly.head()","1a67b349":"car_sales_monthly[\"Year\"] = car_sales_monthly[\"Year\"].astype(str)\ncar_sales_monthly[\"Month\"] = car_sales_monthly[\"Month\"].astype(str)\n\ncar_sales_monthly[\"Date\"] = car_sales_monthly[\"Year\"].str.cat(\n    car_sales_monthly[\"Month\"].str.zfill(2), sep=\"-\"\n)\ncar_sales_monthly[\"Year\"] = car_sales_monthly[\"Year\"].astype(int)\ncar_sales_monthly[\"Month\"] = car_sales_monthly[\"Month\"].astype(int)\ncar_sales_monthly[\"Quantity\"] = car_sales_monthly[\"Quantity\"].astype(int)\n\ncar_sales_monthly.Date[:5]","f8c8e3d8":"import plotly.express as px\n\nfig = px.bar(\n    car_sales_monthly,\n    x=\"Date\",\n    y=\"Quantity\",\n    hover_data=[\"Year\", \"Month\", \"Quantity\"],\n    color=\"Quantity\",\n    text=\"Quantity\",\n    height=600,\n    width=2400,\n)\nfig.update_traces(texttemplate=\"%{text:.2s}\", textposition=\"outside\")\nfig.show()","76da5e97":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\naux_csm = car_sales_monthly[[\"Month\", \"Year\", \"Quantity\"]]\nplt.figure(figsize=(25, 10))\nsns.heatmap(\n    aux_csm.pivot(\"Month\", \"Year\", \"Quantity\").fillna(0).astype(int),\n    annot=True,\n    fmt=\"d\",\n    linewidths=0.5,\n    cmap=\"Reds\",\n)","b17f11d0":"import plotly.graph_objects as go\n\n\ndef plot_var_comp(df, column, title, xlabel, ylabel):\n    df[\"d\" + column] = df[column].diff()\n    df[\"d2\" + column] = df[\"d\" + column].diff()\n\n    # Create traces\n    x = df.Date\n    y = df[column]  # y\n    dy = df[\"d\" + column]  # dy'\n    d2y = df[\"d2\" + column]  # dy''\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=x, y=y, mode=\"lines\", name=column))\n    fig.add_trace(go.Scatter(x=x, y=dy, mode=\"lines\", name=f\"Increase of {column}\"))\n    fig.add_trace(go.Scatter(x=x, y=d2y, mode=\"lines\", name=\"Increase's Acceleration\"))\n    fig.update_layout(\n        title=title, xaxis_title=xlabel, yaxis_title=ylabel,\n    )\n    fig.show()\n\n\nplot_var_comp(\n    car_sales_monthly,\n    \"Quantity\",\n    \"Sales and your components\",\n    \"Date\",\n    \"Number of sales\",\n)","2f63f4df":"from pandas.plotting import autocorrelation_plot\n\nplt.figure(figsize=(12, 5))\nplt.title(\"Autocorrelation of Quantity\")\nax = autocorrelation_plot(car_sales_monthly[\"Quantity\"])","57360488":"fig = px.box(\n    car_sales_monthly,\n    y=\"Quantity\",\n    facet_col=\"Year\",\n    color=\"Year\",\n    boxmode=\"overlay\",\n    points=\"all\",\n)\n\nfig.show()","f54d5b36":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nres = seasonal_decompose(car_sales_monthly.Quantity, period=12)\ndf = {\n    \"observed\": res.observed,\n    \"trend\": res.trend,\n    \"seasonal\": res.seasonal,\n    \"resid\": res.resid,\n}\nres = pd.DataFrame(df)\nres.head()","368e7157":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n# Defining variables\nfig = make_subplots(shared_xaxes=True,rows=4, cols=1)\nx = car_sales_monthly.Date\ny = res.observed\nz =res.trend\nk =res.seasonal\nw =res.resid\n\n# Ploting the lines\nfig.append_trace(go.Scatter(\n    x=x,\n    y=y,\n), row=1, col=1)\n\nfig.append_trace(go.Scatter(\n    x=x,\n    y=z,\n), row=2, col=1)\n\nfig.append_trace(go.Scatter(\n    x=x,\n    y=k\n), row=3, col=1)\n\nfig.append_trace(go.Scatter(\n    x=x,\n    y=w\n), row=4, col=1)\n\n# Update properties and descriptions\nfig.update_layout(height=700, width=1400, title_text=\"Statsmodel\")\nfig.update_xaxes(title_text=\"Date\", row=4, col=1)\nfig.update_yaxes(title_text=\"Observed\", row=1, col=1)\nfig.update_yaxes(title_text=\"Trend\", row=2, col=1)\nfig.update_yaxes(title_text=\"Seasonal\", row=3, col=1)\nfig.update_yaxes(title_text=\"Resid\/Noise\", row=4, col=1)\nfig.show()\n","330a103b":"car_sales_monthly[\"sma_Quantity\"] = car_sales_monthly.Quantity.rolling(10).mean()\nplot_var_comp(\n    car_sales_monthly,\n    \"sma_Quantity\",\n    \"Sales and your components with SMA\",\n    \"Date\",\n    \"SMA to Number of sales\",\n)","41d92337":"from fbprophet import Prophet\nfrom joblib import Parallel, delayed\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n\ndef format_to_prophet(serie_ds, serie_y):\n    aux = pd.DataFrame()\n    aux[\"ds\"] = serie_ds\n    aux[\"y\"] = serie_y\n    return aux\n\n\nX = car_sales_monthly.Date\nY = car_sales_monthly.Quantity\nprophet_data = format_to_prophet(X, Y)\n\n\ndef train_and_plot(cps, prophet_data, plot=False):\n    model = Prophet(yearly_seasonality=True, changepoint_prior_scale=cps)\n    model.fit(prophet_data)\n\n    future = model.make_future_dataframe(periods=12, freq=\"M\")\n    forecast = model.predict(future)\n\n    r2 = round(r2_score(prophet_data[\"y\"], forecast[\"yhat\"][:-12]), 3)\n    mse = round(mean_squared_error(prophet_data[\"y\"], forecast[\"yhat\"][:-12]), 3)\n    mae = round(mean_absolute_error(prophet_data[\"y\"], forecast[\"yhat\"][:-12]), 3)\n\n    if plot:\n        fig = go.Figure()\n        fig.add_trace(\n            go.Scatter(\n                x=forecast[\"ds\"],\n                y=forecast[\"yhat\"],\n                mode=\"lines\",\n                name=\"Predict Values\",\n            )\n        )\n        fig.add_trace(\n            go.Scatter(\n                x=forecast[\"ds\"], y=forecast[\"trend\"], mode=\"lines\", name=\"Trend\"\n            )\n        )\n        fig.add_trace(\n            go.Scatter(\n                x=prophet_data[\"ds\"],\n                y=prophet_data[\"y\"],\n                mode=\"lines\",\n                name=\"Real Values\",\n            )\n        )\n        fig.update_layout(\n            title_text=f\"Comperating the real x predicted for car sales\",\n            yaxis_title=f\"Sales\",\n            xaxis_title=\"Date\",\n        )\n\n        fig.show()\n        print(\"R2: \", r2)\n        print(\"MSE: \", mse)\n        print(\"MAE: \", mae)\n    else:\n        return {\"CPS\": cps, \"R2\": r2, \"MSE\": mse, \"MAE\": mae}","95875a9f":"from joblib import Parallel, delayed\n\ncps_options = [round(x, 1) for x in np.linspace(start=0.1, stop=10, num=100)]\n\nresults = Parallel(n_jobs=-1, verbose=10)(\n    delayed(train_and_plot)(i, prophet_data) for i in cps_options\n)","a9a48585":"results = pd.DataFrame(results)\nresults = results[results.R2.isin([max(results.R2)])]\nresults = results[results.MSE.isin([min(results.MSE)])]\nresults","98c01fd2":"train_and_plot(results.CPS.iloc[0], prophet_data, True)","d14c4ced":"### Boxplot per Year","e6602176":"### Autocorrelation","19d6ee70":"### Statsmodels decompose again","7aa541cb":"### Components","6f141e38":"### Heatmap for sales (or time series)","341f590b":"The value of sales has a bit of aleatory in your curve, which makes complicate says if the number is growing or not.","ca46bcc3":"Only using generic approachs on the series we are allowed to do a great job.","90810b58":"### Car sales Norway\nIn this dataset, I will make a little EDA for the time series, the cars sales in Norway.\n- Will be used the dataset: `norway_new_car_sales_by_month.csv`.","1f115dba":"### Simple Moving Average\n- n=10","18be0a46":"### Bar plot","edd34b15":"Now it's better... Now we can see the lowers values around the end of 2008 and the begin of 2009. After this point, the biggest value is Juny of 2015.","5bb7f3c3":"This graph is so hard, this is not the best way to view this dataset.... let's try another way. But here we can see a min value around the year in 2009. In that period, the economy was near collapse before pulling back from the brink of depression. Then the cars sales were impacted by this problem.","14e68306":"## Predictions\nIt's possible predict these sales?","eee920e4":"Whit this polot wee clarly see the bad year is 2009.","a8830672":"## EDA\nThe goal is the sales of cars in Norway cause this our analisy is about the Quantity.\n\n\nCreating a now columns with Year+Month as `datetime`.","1e9ca510":"The plot shows at the start of the series we have some autocorrelation, but with the past of time this going to be none. "}}