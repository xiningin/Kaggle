{"cell_type":{"055decc6":"code","e537df63":"code","e70a1875":"code","5aa0fd24":"code","1339eb13":"code","1234b4f6":"code","e3fad6db":"code","8d6af5e4":"code","fe3fd655":"code","c192496a":"code","30a3d976":"code","a769b2ac":"code","deb1b2ea":"code","7a7ef836":"code","df6d15ac":"code","4ddfa414":"code","841c3366":"code","574cd754":"code","8eda4ae9":"code","508fc11e":"code","4587c72a":"code","5cae3ed9":"code","9c98af31":"code","8bcbd2bd":"code","8a3f60fd":"code","4d75c78e":"code","cfc9ecc7":"code","fe96fcd4":"code","14c85585":"code","a1bcf476":"code","6a10e660":"code","c5cd8ab2":"code","1e112a24":"code","5e7ca869":"code","1e92c413":"markdown","7c18c572":"markdown","12e5a43e":"markdown","8377eb17":"markdown","d2b47ef7":"markdown","38a9ce19":"markdown","3f791348":"markdown","2bc33a0b":"markdown","6f451199":"markdown","ba494400":"markdown","e413112b":"markdown","c72432fe":"markdown","06c87fb4":"markdown","df100833":"markdown","8959d492":"markdown","cf7b136d":"markdown","0c880432":"markdown","7635c72a":"markdown"},"source":{"055decc6":"\nimport numpy as np \nimport pandas as pd\n\nimport os\n\nimport geopandas as gpd\nimport json\nfrom urllib.request import urlopen\n# Required for plotly\nimport plotly.express as px","e537df63":"#Scatter Plots\ndf = px.data.gapminder()\nfig = px.scatter(df,x=\"pop\", y=\"gdpPercap\",\n                 color=\"continent\",\n                 size='pop', hover_data=['continent'],\n                 title = 'Year-Population corellation')\nfig.show()","e70a1875":"# Line Plot\ndf = px.data.gapminder().query(\"country=='India'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", title='Life expectancy in India')\nfig.show()","5aa0fd24":"# Filled Area\ndf = px.data.gapminder()\nfig = px.area(df, x=\"year\", y=\"pop\", color=\"continent\",line_group=\"country\")\nfig.show()","1339eb13":"# Bar chart\ndata_india = px.data.gapminder().query(\"country == 'India'\")\nfig = px.bar(data_india, x='year', y='pop')\nfig.show()","1234b4f6":"# Funnel Chart\ndf = px.data.gapminder()\ndf = pd.DataFrame(df)\ndf = df.groupby(['continent','year'])['gdpPercap'].mean().reset_index(name = \"GDP_Mean\")\nfig = px.funnel(df, x='GDP_Mean', y='continent', color='year')\nfig.show()","e3fad6db":"# Gantt Charts\ndf = pd.DataFrame([\n    dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Resource=\"Alex\"),\n    dict(Task=\"Job B\", Start='2009-03-05', Finish='2009-04-15', Resource=\"Alex\"),\n    dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Resource=\"Max\")\n])\n\nfig = px.timeline(df, x_start=\"Start\", x_end=\"Finish\", y=\"Resource\", color=\"Resource\")\nfig.show()","8d6af5e4":"# Pie chart\ndf = px.data.gapminder().query(\"year == 2007\").query(\"continent == 'Africa'\")\ndf.loc[df['pop'] < 2.e6, 'country'] = 'Other countries' # Represent only large countries\nfig = px.pie(df, values='pop', names='country', title='Population of Africa continent')\nfig.show()","fe3fd655":"# Sunburst of a rectangular DataFrame with discrete color argument in\n# There are more then one variant of these chart i like the below one as this is more interactive\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent','country','year'], values='pop', color='country',\n                 color_discrete_map={'(?)':'black', 'India':'gold', 'China':'darkblue'})\nfig.show()","c192496a":"# Treemap Charts\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.treemap(df, path=['continent','country','year'], values='pop', color='country',\n                 color_discrete_map={'(?)':'black', 'India':'gold', 'China':'darkblue'})\nfig.show()","30a3d976":"# Histograms \ndf = px.data.gapminder().query(\"year == 2007\")\n# Here we use a column with categorical data\nfig = px.histogram(df, x=\"gdpPercap\")\nfig.show()","a769b2ac":"# Boxplot\ndf = px.data.gapminder().query(\"year == 2007\")\n# Here we use a column with categorical data\nfig = px.box(df, x=\"continent\", y=\"gdpPercap\")\nfig.show()","deb1b2ea":"# Violin Plots\ndf = px.data.gapminder()\nfig = px.violin(df, y=\"lifeExp\")\nfig.show()","7a7ef836":"# Strip Charts\ndf = px.data.gapminder()\ndf = pd.DataFrame(df)\ndf = df.groupby(['year','continent'])['pop'].mean().reset_index()\nfig = px.strip(df, x=\"pop\", y=\"year\", color=\"continent\", facet_col=\"continent\")\nfig.show()","df6d15ac":"#Density Heatmaps\ndf = px.data.gapminder()\nfig = px.density_heatmap(df, x=\"year\", y=\"gdpPercap\")\nfig.show()","4ddfa414":"#  Density Contours\ndf = px.data.gapminder()\nfig = px.density_contour(df, x=\"iso_alpha\", y=\"lifeExp\")\nfig.show()","841c3366":"# Read image arrays from image files\nfrom skimage import io\nimg = io.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/37\/Plotly-logo-01-square.png')\nfig = px.imshow(img)\nfig.show()","574cd754":"# scatter_3d\ndf = px.data.gapminder()\nfig = px.scatter_3d(df, x='pop', y='gdpPercap', z='lifeExp',\n              color='year')\nfig.show()","8eda4ae9":"# line_3d\ndf = px.data.gapminder().query(\"continent=='Europe'\")\nfig = px.line_3d(df, x=\"gdpPercap\", y=\"pop\", z=\"year\", color='country')\nfig.show()","508fc11e":"# Scatter matrix\ndf = px.data.gapminder()\nfig = px.scatter_matrix(df,\n    dimensions=[\"gdpPercap\", \"pop\", \"lifeExp\"],\n    color=\"continent\")\nfig.show()","4587c72a":"# parallel_coordinates\ndf = px.data.iris()\nfig = px.parallel_coordinates(df, color=\"species_id\", labels={\"species_id\": \"Species\",\n                \"sepal_width\": \"Sepal Width\", \"sepal_length\": \"Sepal Length\",\n                \"petal_width\": \"Petal Width\", \"petal_length\": \"Petal Length\", },\n                             color_continuous_scale=px.colors.diverging.Tealrose,\n                             color_continuous_midpoint=2)\nfig.show()","5cae3ed9":"# parallel_categories\ndf = px.data.tips()\nfig = px.parallel_categories(df, dimensions=['sex', 'smoker', 'day'],\n                color=\"size\", color_continuous_scale=px.colors.sequential.Inferno,\n                labels={'sex':'Payer sex', 'smoker':'Smokers at the table', 'day':'Day of week'})\nfig.show()","9c98af31":"# scatter_mapbox\ngeo_df = gpd.read_file(gpd.datasets.get_path('naturalearth_cities'))\nfig = px.scatter_mapbox(geo_df,\n                        lat=geo_df.geometry.y,\n                        lon=geo_df.geometry.x,\n                        hover_name=\"name\",\n                        zoom=1)\nfig.show()","8bcbd2bd":"# Lines on Mapbox \nus_cities = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/us-cities-top-1k.csv\")\nus_cities = us_cities.query(\"State in ['New York', 'Ohio']\")\n\nfig = px.line_mapbox(us_cities, lat=\"lat\", lon=\"lon\", color=\"State\", zoom=3, height=300)\n\nfig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_zoom=4, mapbox_center_lat = 41,\n    margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()","8a3f60fd":"# Choropleth map \nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\nfig = px.choropleth_mapbox(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           mapbox_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": 37.0902, \"lon\": -95.7129},\n                           opacity=0.5,\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","4d75c78e":"# density_mapbox\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/earthquakes-23k.csv')\nfig = px.density_mapbox(df, lat='Latitude', lon='Longitude', z='Magnitude', radius=10,\n                        center=dict(lat=0, lon=180), zoom=0,\n                        mapbox_style=\"stamen-terrain\")\nfig.show()","cfc9ecc7":"# scatter_geo\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.scatter_geo(df, locations=\"iso_alpha\",\n                     size=\"pop\", # size of markers, \"pop\" is one of the columns of gapminder\n                     projection=\"natural earth\",\n                     color=\"continent\"\n                     )\nfig.show()","fe96fcd4":"# line_geo\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.line_geo(df, locations=\"iso_alpha\",\n                  color=\"continent\", # \"continent\" is one of the columns of gapminder\n                  projection=\"orthographic\")\nfig.show()","14c85585":"# choropleth\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\n    counties = json.load(response)\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/fips-unemp-16.csv\",\n                   dtype={\"fips\": str})\n\n\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           scope=\"usa\",\n                           labels={'unemp':'unemployment rate'}\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","a1bcf476":"#scatter_polar\ndf = px.data.wind()\nfig = px.scatter_polar(df, r=\"frequency\", theta=\"direction\")\nfig.show()","6a10e660":"df = px.data.wind()\nfig = px.scatter_polar(df, r=\"frequency\", theta=\"direction\",\n                       color=\"strength\", symbol=\"strength\", size=\"frequency\",\n                       color_discrete_sequence=px.colors.sequential.Plasma_r)\nfig.show()","c5cd8ab2":"# Line Polar\ndf = px.data.wind()\nfig = px.line_polar(df, r=\"frequency\", theta=\"direction\", color=\"strength\", line_close=True,\n                    color_discrete_sequence=px.colors.sequential.Plasma_r,\n                    template=\"plotly_dark\",)\nfig.show()","1e112a24":"# bar_polar\ndf = px.data.wind()\nfig = px.bar_polar(df, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\", template=\"plotly_dark\",\n                   color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","5e7ca869":"# scatter_ternary\ndf = px.data.election()\nfig = px.scatter_ternary(df, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\", hover_name=\"district\",\n    color=\"winner\", size=\"total\", size_max=15,\n    color_discrete_map = {\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\":\"red\"} )\nfig.show()","1e92c413":"**This Notebook will help in quick reference while doing EDA ...**","7c18c572":"# Tile Maps","12e5a43e":"# Part-of-Whole","8377eb17":"# 3-Dimensional","d2b47ef7":"# 2D Histograms","38a9ce19":"# 1D Distributions","3f791348":"# Consolidated List of all the charts (Plotly Express)","2bc33a0b":"Plotly Express currently includes the following functions:\n\nBasics: scatter, line, area, bar, funnel, timeline\n\nPart-of-Whole: pie, sunburst, treemap, funnel_area\n\n1D Distributions: histogram, box, violin, strip\n\n2D Distributions: density_heatmap, density_contour\n\nMatrix Input: imshow\n\n3-Dimensional: scatter_3d, line_3d\n\nMultidimensional: scatter_matrix, parallel_coordinates, parallel_categories\n\nTile Maps: scatter_mapbox, line_mapbox, choropleth_mapbox, density_mapbox\n\nOutline Maps: scatter_geo, line_geo, choropleth\n\nPolar Charts: scatter_polar, line_polar, bar_polar\n\nTernary Charts: scatter_ternary, line_ternary","6f451199":"**Please upvote if you find useful**","ba494400":"# Polar Charts","e413112b":"# Matrix Input ","c72432fe":"# Basic Charts","06c87fb4":"# Ternary Charts","df100833":"Overview\nThe plotly.express module (usually imported as px) contains functions that can create entire figures at once, and is referred to as Plotly Express or PX. Plotly Express is a built-in part of the plotly library, and is the recommended starting point for creating most common figures. Every Plotly Express function uses graph objects internally and returns a plotly.graph_objects.Figure instance. Throughout the plotly documentation, you will find the Plotly Express way of building figures at the top of any applicable page, followed by a section on how to use graph objects to build similar figures. Any figure created in a single function call with Plotly Express could be created using graph objects alone, but with between 5 and 100 times more code.\n\nPlotly Express provides more than 30 functions for creating different types of figures. The API for these functions was carefully designed to be as consistent and easy to learn as possible, making it easy to switch from a scatter plot to a bar chart to a histogram to a sunburst chart throughout a data exploration session. Scroll down for a gallery of Plotly Express plots, each made in a single function call.","8959d492":"# Outline Maps","cf7b136d":"# Multidimensional","0c880432":"# Work In Progress","7635c72a":"***I am just trying to consolidate all the charts given by plotly ...***"}}