{"cell_type":{"22fee5ea":"code","d531ff54":"code","04338ae8":"code","5a884ce1":"code","ab59b2eb":"code","6d9e6246":"code","9ba7eef7":"code","be994755":"code","e2fbc791":"code","e3e5b663":"code","208219e6":"code","5349ea15":"code","07134c55":"code","dc1c4588":"code","43148361":"code","8968dc2e":"code","61df234a":"code","1a2ecc8c":"code","5260ad13":"code","1a6e980f":"code","f18824e9":"code","78d64086":"code","f527a30b":"code","72e2c2dd":"code","ceff93be":"code","160854d0":"code","a3e30a5c":"code","4281ee8e":"code","32d0d523":"code","c816c6ca":"code","2c34c627":"code","3fc4c318":"code","38ce9d2e":"code","e87c6902":"code","740b0629":"code","609b2702":"code","b5a62bc9":"code","3ca50251":"code","8c137d15":"code","9e969594":"code","e5649f5a":"code","d95ec5ad":"code","5bcfea02":"code","eea854d5":"markdown","a4eb67e9":"markdown","bed67482":"markdown","b77efbad":"markdown","f8d18815":"markdown","89261a5b":"markdown","68138e3a":"markdown","f4917d50":"markdown","4cf8ba6c":"markdown","cfd0af0f":"markdown","50b7cad5":"markdown","26a816b0":"markdown","007b3c43":"markdown","d8acfb8a":"markdown","a0248059":"markdown","388cc146":"markdown","0f2f9ec3":"markdown","f2aab7eb":"markdown","81879838":"markdown","465e7991":"markdown","6cb0ebd2":"markdown","b7dc7b80":"markdown","2ef81809":"markdown","b10fd7ee":"markdown","c3f4b2a1":"markdown","3d8593e2":"markdown","6a28f413":"markdown","5a1458cb":"markdown","f01c51da":"markdown","3201b413":"markdown","7748174e":"markdown"},"source":{"22fee5ea":"# Let's import the library we needed before we get started:\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom scipy import stats\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom wordcloud import WordCloud, STOPWORDS     ","d531ff54":"# import the data (chunksize returns jsonReader for iteration)\nbusinesses = pd.read_json(\"\/kaggle\/input\/yelp-dataset\/yelp_academic_dataset_business.json\", lines=True, orient='columns', chunksize=100000)\nreviews = pd.read_json(\"\/kaggle\/input\/yelp-dataset\/yelp_academic_dataset_review.json\", lines=True, orient='columns', chunksize=100000)\ncheckins = pd.read_json(\"\/kaggle\/input\/yelp-dataset\/yelp_academic_dataset_checkin.json\", lines=True, orient='columns', chunksize=100000)\nusers = pd.read_json(\"\/kaggle\/input\/yelp-dataset\/yelp_academic_dataset_user.json\", lines=True, orient='columns', chunksize=100000)","04338ae8":"# read the data \nfor business in businesses:\n    subset_business = business\n    break\n    \nfor review in reviews:\n    subset_review = review\n    break\n      \nfor checkin in checkins:\n    subset_checkin = checkin\n    break\n    \nfor user in users:\n    subset_user = user\n    break","5a884ce1":"# Let's give a look at the data:\ndisplay(subset_business.head(2))\ndisplay(subset_review.head(2))\ndisplay(subset_user.head(2))\ndisplay(subset_checkin.head(2))","ab59b2eb":"# subset_business.to_csv(r\"C: \/kaggle\/output\/kaggle\/working\/business.csv\")\nsubset_business.to_csv (r'C:\\Users\\zolbo\\Desktop\\yelp\\data\\business.csv')","6d9e6246":"# Create dataframe having only Restaurant business.\nall_cities = subset_business[subset_business['categories'].str.contains('Rest.*')==True]\n\n# Creating dummies dataframe from series for 'categories' \ndf_rest = pd.Series(all_cities['categories']).str.get_dummies(',')\n\n# Dropping Restaurants and Food columns as this analysis is for Resturants and these words are common to all entries\ndf_rest.drop([\"Restaurants\", \" Restaurants\", \"Food\", \" Food\"], axis=1, inplace=True)\n\n# Removing the whitespaces from the column names\ndf_rest.columns = df_rest.columns.str.lstrip()\n\n# Adding up all the rows to get the sum of columns and merging the columns with same names\nall_rest = df_rest.groupby(by=df_rest.columns, axis=1).sum()","9ba7eef7":"# Extracting name of all the cities\nfrom_business = all_cities[['city']]","be994755":"# Getting count of Vegetarian restaurants in each city\nall_rest.join(from_business).groupby('city').sum()['Vegetarian'].sort_values(ascending=False)","e2fbc791":"plt.figure(figsize=(15,6))\nall_rest.join(from_business).groupby('city').sum()['Vegetarian'].sort_values(ascending=True).tail(10)\\\n                .plot(kind='barh',color='Darkcyan')\nplt.title('Top Cities for Vegetarian Restaurants',fontsize=18, pad=25.0) \nplt.xlabel('Counts', fontsize=15)\nplt.ylabel('Cities', fontsize=15)\nplt.show()","e3e5b663":"# Extracting data for the Vegetarian Restaurants in Toronto city which are open along with there location coordinates.\nToronto = all_rest.join(subset_business)[all_rest.join(subset_business)['city'] == 'Toronto']\ntor_1 = Toronto[['Vegetarian','name','address','latitude','longitude','stars','is_open','hours']]\n\n# Sorting data as per their star ratings.\ntor_1[ (tor_1['Vegetarian']==1) & (Toronto['is_open']==1) ].sort_values(by='stars',ascending=False).head(10)","208219e6":"# Creating a geographical map for the location of top vegetarian restaurants in Toronto\nimport folium\nimport pandas as pd\nfrom folium.plugins import MarkerCluster\n \n# make a data frame with dots to show on the map\ndata_veg = tor_1[ (tor_1['Vegetarian']==1) & (Toronto['is_open']==1) ].sort_values(by='stars',ascending=False)\\\n            [['longitude','latitude','name','address','stars','hours']].head(20)\n \n# create an empty map\ntoronto_veg_map = folium.Map(location=[43.651070,-79.347015], tiles='Stamen Terrain') #, default_zoom_start=20)\n \n# add marker one by one on the map\nfor i in range(0, len(data_veg)):\n    text = folium.Html('<b>Name: <\/b>'+ data_veg.iloc[i]['name'] + \"<hr style='margin:10px;'>\" + \n                       \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\" +\n                       \"<li>Star: \" + str(data_veg.iloc[i]['stars']) + \"<\/li>\" +\n                       \"<li>Address: \" + str(data_veg.iloc[i]['address']) + \"<\/li>\" +\n                       \"<li>Hours: \" + str(data_veg.iloc[i]['hours']) + \"<\/li>\", script=True)\n\n    popup = folium.Popup(text, max_width=2650)\n    folium.Marker([ data_veg.iloc[i]['latitude'], data_veg.iloc[i]['longitude'] ], popup=popup).add_to(toronto_veg_map)","5349ea15":"toronto_veg_map","07134c55":"#Creating dataset with the data for different cities for further analysis\ncities=['Toronto','Las Vegas','Calgary','Montr\u00e9al']\ndf_cities=[]\n\nfor c in cities:\n    city = subset_business[subset_business['city']==c]\n    rest = city[city['categories'].str.contains('Rest.*')==True]\n    df = pd.Series(rest['categories']).str.get_dummies(',')\n    df.drop([\"Restaurants\", \" Restaurants\", \"Food\", \" Food\"], axis=1, inplace=True)\n    df.columns = df.columns.str.lstrip()\n    result = df.groupby(by=df.columns, axis=1).sum()\n    df_cities.append(result)\n \n # Creating separate dataframe for each city.\ntoronto, las_vegas, calgary, montreal = df_cities[0], df_cities[1], df_cities[2], df_cities[3]","dc1c4588":"# Getting 20 most popular Cuisine in Toronto\ntor = pd.DataFrame(toronto.sum().sort_values(ascending=True).tail(20),columns=['counts'])\ntor.reset_index(inplace=True)\ntor.rename({'index':'name'}, axis=1, inplace=True)\ntor","43148361":"# Getting number of Vegetarian Restaurants in Toronto.\ntoronto[['Vegetarian']].sum()","8968dc2e":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nfig, axes = plt.subplots(nrows=4, ncols=1, figsize=(12,24))\n\n# Visualizing 20 most popular Categories in Toronto Restaurants\n#plt.subplot(221)\n#plt.barh(tor['name'], tor['counts'],color='Darkcyan')\ntoronto.sum().sort_values(ascending=True).tail(20).plot(kind='barh',color='Darkcyan',ax=axes[0])\naxes[0].set_title('top categories for TORONTO restaurants',fontsize=25, pad=25.0) \naxes[0].xaxis.set_label_text(\"Category counts\", fontsize=18)\naxes[0].yaxis.set_label_text(\"Restaurants names\", fontsize=18)\n#axes[0].tick_params(width=1, labelsize=16)\n\n# Visualizing 20 most popular Categories in Las Vegas Restaurants\n#plt.subplot(222)\nlas_vegas.sum().sort_values(ascending=True).tail(20).plot(kind='barh',color='red',ax=axes[1])\naxes[1].set_title('top categories for LAS VEGAS restaurants',fontsize=25, pad=25.0) \naxes[1].xaxis.set_label_text(\"Category counts\", fontsize=18)\naxes[1].yaxis.set_label_text(\"Restaurants names\", fontsize=18)\n#axes[1].tick_params(width=1, labelsize=16)\n\n# Visualizing 20 most popular Categories in Calgary Restaurants\n#plt.subplot(223)\ncalgary.sum().sort_values(ascending=True).tail(20).plot(kind='barh',color='blue',ax=axes[2])\naxes[2].set_title('top categories for CALGARY restaurants',fontsize=25, pad=25.0) \naxes[2].xaxis.set_label_text(\"Category counts\", fontsize=18)\naxes[2].yaxis.set_label_text(\"Restaurants names\", fontsize=18)\n#axes[2].tick_params(width=1, labelsize=16)\n\n# Visualizing 20 most popular Categories in Montreal Restaurants\n#plt.subplot(224)\nmontreal.sum().sort_values(ascending=True).tail(20).plot(kind='barh',color='green',ax=axes[3])\naxes[3].set_title('top categories for MONTREAL restaurants',fontsize=25, pad=25.0) \naxes[3].xaxis.set_label_text(\"Category counts\", fontsize=18)\naxes[3].yaxis.set_label_text(\"Restaurants names\", fontsize=18)\n#axes[3].tick_params(width=1, labelsize=16)\n\nplt.tight_layout() # makes sure there is no overlap in plots \nplt.subplots_adjust(wspace=0.5, hspace=0.5)\n\"\"\"\nleft  = 0.125  # the left side of the subplots of the figure\nright = 0.9    # the right side of the subplots of the figure\nbottom = 0.1   # the bottom of the subplots of the figure\ntop = 0.9      # the top of the subplots of the figure\nwspace = 0.2   # the amount of width reserved for blank space between subplots\nhspace = 0.2   # the amount of height reserved for white space between subplots\n\"\"\"\nplt.show()","61df234a":"# Getting the Users(Yelpers) based on review counts\nreview_total = subset_user.sort_values(by='review_count',ascending=True)\n\n# Getting the Users based on number of fans\nfans = subset_user.sort_values(by='fans',ascending=True)\n\n# Getting the Users based on number of total friends on yelp\nsubset_user['total_friends'] = [len(subset_user.iloc[i,8]) for i in range(0,100000)]\nfriends = subset_user.sort_values(by='total_friends',ascending=True)\n\n# Getting the Users based on number of useful reviews \nuseful = subset_user.sort_values(by='useful',ascending=True)","1a2ecc8c":"# Create new column named 'ratio'\nsubset_user['ratio'] = (subset_user['useful'] * subset_user['review_count']) \/ sum(subset_user['review_count'])","5260ad13":"# Creating new dataset with User data\nTop_influencer = subset_user.sort_values(by='ratio',ascending=True)[['name','review_count','useful','ratio','yelping_since']]","1a6e980f":"import matplotlib.gridspec as gridspec\n\ngridspec.GridSpec(3,2)\nplt.figure(figsize=(14,18)) \n\n# Plotting the most popular reviewers based on the count of their fans\nplt.subplot2grid((3,2), (0,0))\nplt.barh(fans['name'][-10:],fans['fans'][-10:])\n#plt.barh(fans['name'][:10],fans['fans'][:10])\n\nplt.title('Top POPULAR',fontsize=16, pad=25.0) \nplt.xlabel('Reviewer names', fontsize=14, labelpad=15.0)\nplt.ylabel('number of fans', fontsize=14)\n\n# Plotting the 10 most popular reviewers based on the count of their useful reviews\n#plt.subplot(322)\nplt.subplot2grid((3,2), (0,1))\nplt.barh(useful['name'][-10:],useful['useful'][-10:],color='green')\n\nplt.title('Top USEFUL',fontsize=18, pad=25.0) \nplt.xlabel('Reviewer names', fontsize=14, labelpad=15.0)\nplt.ylabel('number of reviews', fontsize=14)\n\n# Plotting the 10 most popular reviewers based on the count of their friends on yelp\n#plt.subplot(323)\nplt.subplot2grid((3,2), (1,0))\nplt.barh(friends['name'][-10:],friends['total_friends'][-10:],color='purple')\n\nplt.title('Top SOCIAL',fontsize=18, pad=25.0) \nplt.xlabel('Reviewer names', fontsize=14, labelpad=15.0)\nplt.ylabel('number of friends', fontsize=14)\n\n# Plotting the 10 most popular reviewers based on the count of their reviews posted on yelp\n#plt.subplot(324)\nplt.subplot2grid((3,2), (1,1))\nplt.barh(review_total['name'][-10:],review_total['review_count'][-10:],color='cyan')\n\nplt.title('Top ACTIVE',fontsize=18, pad=25.0) \nplt.xlabel('Reviewer names', fontsize=14, labelpad=15.0)\nplt.ylabel('number of reviews', fontsize=14)\n\n# Plotting the 10 most popular reviewers based on the ratio of their useful reviews to total reviews\n#plt.subplot(325)\nplt.subplot2grid((3,2),(2,0),colspan=2, rowspan=2)\nplt.barh(Top_influencer['name'][-10:],Top_influencer['ratio'][-10:],color='red')\n\nplt.title('Top INFLUENCER',fontsize=18, pad=25.0) \nplt.xlabel('Reviewer names', fontsize=14, labelpad=15.0)\nplt.ylabel('Ratio', fontsize=14)\n\n# comment out the following line and run cell to see the difference it makes\nplt.tight_layout() # makes sure there is no overlap in plots \nplt.show()","f18824e9":"range(0,subset_checkin.shape[0])","78d64086":"# Creating a new column to see how many people cheacked in to the business over the years\nsubset_checkin['total'] = [len(subset_checkin.iloc[i,1]) for i in range(0,100000)]","f527a30b":"subset_checkin.head(1)","72e2c2dd":"# Sorting the businesses by total number of check-ins to get the top businesses with most check-ins\ncheckin_sort = subset_checkin.sort_values(by='total',ascending=False)\n\n# Getiing the name of the businesses\nbusiness_check = pd.merge(checkin_sort,subset_business,on='business_id')\nbusiness_check.head(1)","ceff93be":"# Creating a dataframe for getting the business in Toronto and their check-in history\nToronto = business_check[business_check['city']=='Toronto']\n\n# getting just restaurants from Toronto business\nrest = Toronto[Toronto['categories'].str.contains('Rest.*')==True]\nrest.head(1)","160854d0":"# top popular rated restaurants in Toronto\ntop_pop = rest.sort_values(by=['total'],ascending=False)[['name','total','stars']]\nplt.figure(figsize=(12,6))\nax = sns.barplot(top_pop['name'][:10], top_pop['total'][:10], alpha=0.8)\n#plt.barh(top_pop['name'][:10],top_pop['review_count'][:10])\nplt.title('Top popular restaurants in Toronto on Yelp (Check In)',fontsize=20, pad=30.0) \nplt.xlabel('Restaurants names', fontsize=16)\nplt.ylabel('Checkin counts', fontsize=16)\nplt.xticks(rotation='50', fontsize=12)\nrects = ax.patches\nlabels = top_pop['stars']\nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    #print(rect.get_x() + rect.get_width() \/ 2, height + 5, label)\n    ax.text(rect.get_x() + rect.get_width() \/ 2, height, label, ha='center', va='bottom')\nplt.show()","a3e30a5c":"#Plotting Restaurants in Toronto having most check-ins\nimport folium\nimport pandas as pd\nfrom folium.plugins import MarkerCluster\n \n# make a data frame with dots to show on the map\ndata = rest[['longitude','latitude','name','total']].head(10)\n \n# create an empty map\ntoronto_map = folium.Map(location=[43.651070,-79.347015], tiles='Stamen Terrain')#, default_zoom_start=20)\n \n# add marker one by one on the map\nfor i in range(0,len(data)):\n    test = folium.Html('<b>Name: <\/b>'+ data.iloc[i]['name'] + \"<hr style='margin:10px;'>\" + \n                       \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\" +\n                       \"<li>Total reviews: \"+str(data.iloc[i]['total'])+\"<\/li>\", script=True)\n\n    popup = folium.Popup(test, max_width=2650)\n    folium.Marker([ data.iloc[i]['latitude'], data.iloc[i]['longitude'] ], popup=popup).add_to(toronto_map)\n    \n    #folium.Marker([ data.iloc[i]['latitude'], data.iloc[i]['longitude'] ], popup=data.iloc[i][['name','total']].values).add_to(toronto_map)","4281ee8e":"# plot the top 10 restuarant in Toronto (checkIn)\ntoronto_map","32d0d523":"gridspec.GridSpec(2,2)\n\nplt.figure(figsize=(18,10)) \n\n# Plotting daily activity of users on yelp\nplt.subplot2grid((2,2), (0,0))\nsns.distplot(subset_review['date'].dt.day, color='green')\nplt.title('Yelp daily user activity',fontsize=16)\nplt.xlabel('days', fontsize=14)\nplt.ylabel('ratio', fontsize=14)\n\n# Plotting activity of usres on yelp over a month\nplt.subplot2grid((2,2), (0,1))\nsns.distplot(subset_review['date'].dt.month, color='red')\nplt.title('Yelp user activity over months',fontsize=16)\nplt.xlabel('Months', fontsize=14)\nplt.ylabel('ratio', fontsize=14)\n\n# Plotting activity of usres on yelp over an year\nplt.subplot2grid((2,2), (1,0),colspan=2, rowspan=2)\nsns.distplot(subset_review['date'].dt.year, color='orange')\nplt.title('Yelp user activity over years',fontsize=16)\nplt.xlabel('Months', fontsize=14)\nplt.ylabel('ratio', fontsize=14)\n","c816c6ca":"# Function that extract keys from the nested dictionary\ndef extract_keys(attr, key):\n    if attr == None:\n        return \"{}\"\n    if key in attr:\n        return attr.pop(key)\n\n# convert string to dictionary\nimport ast\n\ndef str_to_dict(attr):\n    if attr != None:\n        return ast.literal_eval(attr)\n    else:\n        return ast.literal_eval(\"{}\") ","2c34c627":"# get dummies from nested attributes\nrest['BusinessParking'] = rest.apply(lambda x: str_to_dict(extract_keys(x['attributes'], 'BusinessParking')), axis=1)\nrest['Ambience'] = rest.apply(lambda x: str_to_dict(extract_keys(x['attributes'], 'Ambience')), axis=1)\nrest['GoodForMeal'] = rest.apply(lambda x: str_to_dict(extract_keys(x['attributes'], 'GoodForMeal')), axis=1)\nrest['Dietary'] = rest.apply(lambda x: str_to_dict(extract_keys(x['attributes'], 'Dietary')), axis=1)\nrest['Music'] = rest.apply(lambda x: str_to_dict(extract_keys(x['attributes'], 'Music')), axis=1)","3fc4c318":"# create the features table with attribute dummies\ndf_attr = pd.concat([ rest['attributes'].apply(pd.Series), rest['BusinessParking'].apply(pd.Series),\n                      rest['Ambience'].apply(pd.Series), rest['GoodForMeal'].apply(pd.Series), \n                      rest['Dietary'].apply(pd.Series) ], axis=1)\ndf_attr_dummies = pd.get_dummies(df_attr, drop_first=True)","38ce9d2e":"df_attr_dummies.head(3)","e87c6902":"# get dummies from categories\ndf_categories_dummies = pd.Series(rest['categories']).str.get_dummies(',')\n\n# Dropping Restaurants and Food columns as this analysis is for Resturants and these words are common to all entries\ndf_categories_dummies.drop([\"Restaurants\", \" Restaurants\", \"Food\", \" Food\"], axis=1, inplace=True)\n\n# Removing the whitespaces from the column names\ndf_categories_dummies.columns = df_categories_dummies.columns.str.lstrip()\n\n# Adding up all the rows to get the sum of columns and merging the columns with same names\ndf_cat_no_dup = df_categories_dummies.groupby(by=df_categories_dummies.columns, axis=1).sum()\ndf_cat_no_dup.head()","740b0629":"df_final = pd.concat([df_attr_dummies, df_cat_no_dup, rest[['stars']]], axis=1)\ndf_final.head()","609b2702":"# map floating point stars to an integer\nmapper = {1.0:1,1.5:2, 2.0:2, 2.5:3, 3.0:3, 3.5:4, 4.0:4, 4.5:5, 5.0:5}\ndf_final['stars'] = df_final['stars'].map(mapper)\n","b5a62bc9":"# Create X (all the features) and y (target)\nX = df_final.iloc[:,:-1]\ny = df_final['stars']","3ca50251":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlogreg_model = LogisticRegression()\nlogreg_model.fit(X, y)","8c137d15":"logreg_model.score(X,y)","9e969594":"coefficients = logreg_model.coef_[0]\ndf = pd.DataFrame(data={'feature':X.columns, 'Coef':list(coefficients)})\ndf.head()","e5649f5a":"top_20 = df.sort_values(by=\"Coef\",ascending=False).head(10)\nbottom_20 = df.sort_values(by=\"Coef\",ascending=False).tail(10)","d95ec5ad":"merge = pd.concat([top_20,bottom_20], axis=0)\nmerge","5bcfea02":"# plot\nplt.figure(figsize=(15,8))\nplt.title('The importance of features for ratings', fontsize=28, pad=30)\nbar_colors = np.where(merge['Coef'][0:-1] > 0.0, \"blue\", \"red\")\nplt.barh(merge['feature'][0:-1], merge['Coef'][0:-1], color= bar_colors, label= 'positively correlated')\nplt.xlabel('Coefficients', fontsize=20)\nplt.ylabel('Features', fontsize=20)\nplt.yticks(fontsize=18)\nplt.legend()\nplt.show()","eea854d5":"In order to find the top influencers on Yelp we have defined the ratio of useful reviews to review counts. ","a4eb67e9":"<a id=\"geo-checkin\"><\/a>\n# Geographical plot for Restaurants have most check-ins","bed67482":"* ****Logistic Regression Model****","b77efbad":"# Table of Contents\n<a id=\"introduction\"><\/a>\n* [Introduction](#introduction)\n* [Libraries and Functions](#lib-func)\n* [Importing Data](#import-data)\n* [Visualize Data](#viz-data)\n* [Analysis of Business Dataset](#analysis) \n    * [Analysis of Vegetarian Restaurants](#analysis-veg)\n    * [Visualizing top 10 cities having most Vegetarian Restaurants](#viz-veg) \n    * [Geographical map of vegetarian restaurants in Toronto along with their locations](#geo-toronto) \n* [Extracting restaurants data for different cities](#exract-data)      \n* [Find user characteristics](#user-char)\n* [User characteristics Visualization](#viz-user-char)\n* [Analysing CheckIn Dataset](#checkin)\n    * [Top 10 check_in restaurant in Toronto](#top10-toronto)  \n    * [Geographical plot for Restaurants have most check-ins](#geo-checkin) \n* [Trend of Yelp user activity over time](#trend-user)\n* [Which factors make a restaurant good?](#factor)","f8d18815":"Now, as we have useful information about the users and their activity on yelp so let's start visualizing the data graphically.","89261a5b":"<a id=\"exract-data\"><\/a>\n# Extracting restaurants data for different cities","68138e3a":"<a id=\"trend-user\"><\/a>\n# Trend of Yelp user activity over time","f4917d50":"Clearly, yelpers influence people to go out and try different restaurants. Let's analyze how many check-ins each business has.","4cf8ba6c":"<a id=\"introduction\"><\/a>\n# Introduction:\n\nIn this notebook, we will conduct a research on the different Yelp datasets and find meaningful insights about restaurants. The aim is to analyse the datasets separately, and use various forms of data visualization to better understand the restaurants in different cities in North America(Toronto, Las Vegas, Calgary and Montreal) . \n\nFurthermore, these findings will give us the 'best' resturants in different cities based on different features.\n\nMoreover, yelp is a social platform where users(influencers) could leave reviews and ratings for the resturants they went and this helps people to decide their next stop, based on their likings.\n\nLater, we could track the restaurants having most checkins and makes them so popular.","cfd0af0f":"The Business dataset is the collection of different business in different areas. \n\nThe most popular business in the dataset is Restaurant's business and since we have narrowed down our analysis to Restaurants, let's filter all the Restaurants from the dataset.","50b7cad5":"<a id=\"viz-veg\"><\/a>\n# Top vegetarian restaurants in Toronto","26a816b0":"# Yelp Restaurant Data Visualization\n<img src=\"https:\/\/d2w1ef2ao9g8r9.cloudfront.net\/images\/hero-image\/_largeHeroImageTransform\/restaurant-yelp-management.png?mtime=20190328170747&focal=none\" width=\"500px\" >\n","007b3c43":"Finally, you can see the plot showing the corrolation between features and stars.","d8acfb8a":"<a id=\"geo-toronto\"><\/a>\n# Geographical map of vegetarian restaurants in Toronto along with their locations.","a0248059":"<a id=\"factor\"><\/a>\n# Which factors make a restaurant good?","388cc146":"<a id=\"top10-toronto\"><\/a>\n# Top 10 check_in restaurant in Toronto","0f2f9ec3":"* ****Get the coefficients****\n\nNow by sorting the coefficients, we can get the 20 positively and 20 negatively correlated features to stars (user ratings).","f2aab7eb":"<a id=\"analysis\"><\/a>\n# Analysis of Business Dataset","81879838":"<a id=\"user-char\"><\/a>\n# Find user characteristics","465e7991":"The above analysis and visualizations are mainly focused on the top Restaurants in different cities and what are the important features that attract people more compared to others.\n\nMoreover, Yelp is not just about the rating of the restaurants and what they say, they deliver but also the opinion of the people who have been there.\n\nThere are number of open ended questions which we could answer using the above datasets such as:\n\n  * Who are the top influencers?\n  * How many reviews are useful to the people?\n  * How many people follow these influencers?\n  \nAnd many more...\n\n","6cb0ebd2":" <a id=\"checkin\"><\/a>\n # Analysing CheckIn Dataset","b7dc7b80":"<a id=\"viz-user-char\"><\/a>\n# User characteristics Visualization","2ef81809":"<a id=\"viz-veg\"><\/a>\n# Visualizing top 10 cities having most Vegetarian Restaurants","b10fd7ee":"# Hurray! Hope you enjoyed this project \ud83d\ude06.","c3f4b2a1":"<a id=\"import-data\"><\/a>\n# Importing data","3d8593e2":"<a id=\"viz-data\"><\/a>\n# Visualize Data","6a28f413":"****In this section, we are going to find and show what the most important features are for restaurants. So to find the correlation between features and rating stars, we use Logistic Regression model. First we need to get dummies from both categories and attributes columns to create the features table.****","5a1458cb":"<a id=\"lib-func\"><\/a>\n# Libraries and Functions","f01c51da":"Once we have all the datasets let's analyze them one by one.","3201b413":"<a id=\"analysis-veg\"><\/a>\n# Analysis of Vegetarian Restaurants","7748174e":"Since the dataset provded on the kaggle is very large dataset, so instead of using the whole dataset let's chuncks of these datasets as the subsets of the Yelp businesses, reviews, and user data. "}}