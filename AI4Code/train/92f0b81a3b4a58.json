{"cell_type":{"a659b2aa":"code","f2a26464":"code","0b7d42da":"code","ea58fe34":"code","98d6ec72":"code","60f8e708":"code","7c58e049":"code","d3358b92":"code","8713dfc5":"code","aa1df3bd":"code","cdcaa92f":"code","9f203c94":"code","6b048021":"code","a995f84c":"code","00e08cd8":"code","bf14494d":"code","6278c456":"code","346147c7":"code","decf272a":"code","9c602484":"code","ab4704ae":"code","0453322e":"code","018e312b":"code","627a3562":"code","04f0a29a":"code","f41f3cdd":"markdown","52acb349":"markdown","e38e52a4":"markdown","d71d5996":"markdown","66ea6218":"markdown","5c4218b5":"markdown","22531be8":"markdown","96de90b1":"markdown","6bcc1844":"markdown","b939d167":"markdown","7791dad9":"markdown","3afdf055":"markdown","7a241238":"markdown","459ef4ec":"markdown"},"source":{"a659b2aa":"## importing packages\nimport numpy as np\nimport pandas as pd\n\nfrom bokeh.layouts import column, row\nfrom bokeh.models import ColumnDataSource, LinearAxis, Range1d\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.plotting import figure, output_notebook, show\nfrom bokeh.transform import dodge\n\nfrom typing import Union\nfrom tqdm.notebook import tqdm\n\noutput_notebook()\n","f2a26464":"## evaluation metric\n## from https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/133834\nclass WRMSSEEvaluator(object):\n\n    def __init__(self, train_df: pd.DataFrame, valid_df: pd.DataFrame, calendar: pd.DataFrame, prices: pd.DataFrame):\n        train_y = train_df.loc[:, train_df.columns.str.startswith('d_')]\n        train_target_columns = train_y.columns.tolist()\n        weight_columns = train_y.iloc[:, -28:].columns.tolist()\n\n        train_df['all_id'] = 0  # for lv1 aggregation\n\n        id_columns = train_df.loc[:, ~train_df.columns.str.startswith('d_')].columns.tolist()\n        valid_target_columns = valid_df.loc[:, valid_df.columns.str.startswith('d_')].columns.tolist()\n\n        if not all([c in valid_df.columns for c in id_columns]):\n            valid_df = pd.concat([train_df[id_columns], valid_df], axis=1, sort=False)\n\n        self.train_df = train_df\n        self.valid_df = valid_df\n        self.calendar = calendar\n        self.prices = prices\n\n        self.weight_columns = weight_columns\n        self.id_columns = id_columns\n        self.valid_target_columns = valid_target_columns\n\n        weight_df = self.get_weight_df()\n\n        self.group_ids = (\n            'all_id',\n            'cat_id',\n            'state_id',\n            'dept_id',\n            'store_id',\n            'item_id',\n            ['state_id', 'cat_id'],\n            ['state_id', 'dept_id'],\n            ['store_id', 'cat_id'],\n            ['store_id', 'dept_id'],\n            ['item_id', 'state_id'],\n            ['item_id', 'store_id']\n        )\n\n        for i, group_id in enumerate(tqdm(self.group_ids)):\n            train_y = train_df.groupby(group_id)[train_target_columns].sum()\n            scale = []\n            for _, row in train_y.iterrows():\n                series = row.values[np.argmax(row.values != 0):]\n                scale.append(((series[1:] - series[:-1]) ** 2).mean())\n            setattr(self, f'lv{i + 1}_scale', np.array(scale))\n            setattr(self, f'lv{i + 1}_train_df', train_y)\n            setattr(self, f'lv{i + 1}_valid_df', valid_df.groupby(group_id)[valid_target_columns].sum())\n\n            lv_weight = weight_df.groupby(group_id)[weight_columns].sum().sum(axis=1)\n            setattr(self, f'lv{i + 1}_weight', lv_weight \/ lv_weight.sum())\n\n    def get_weight_df(self) -> pd.DataFrame:\n        day_to_week = self.calendar.set_index('d')['wm_yr_wk'].to_dict()\n        weight_df = self.train_df[['item_id', 'store_id'] + self.weight_columns].set_index(['item_id', 'store_id'])\n        weight_df = weight_df.stack().reset_index().rename(columns={'level_2': 'd', 0: 'value'})\n        weight_df['wm_yr_wk'] = weight_df['d'].map(day_to_week)\n\n        weight_df = weight_df.merge(self.prices, how='left', on=['item_id', 'store_id', 'wm_yr_wk'])\n        weight_df['value'] = weight_df['value'] * weight_df['sell_price']\n        weight_df = weight_df.set_index(['item_id', 'store_id', 'd']).unstack(level=2)['value']\n        weight_df = weight_df.loc[zip(self.train_df.item_id, self.train_df.store_id), :].reset_index(drop=True)\n        weight_df = pd.concat([self.train_df[self.id_columns], weight_df], axis=1, sort=False)\n        return weight_df\n\n    def rmsse(self, valid_preds: pd.DataFrame, lv: int) -> pd.Series:\n        valid_y = getattr(self, f'lv{lv}_valid_df')\n        score = ((valid_y - valid_preds) ** 2).mean(axis=1)\n        scale = getattr(self, f'lv{lv}_scale')\n        return (score \/ scale).map(np.sqrt)\n\n    def score(self, valid_preds: Union[pd.DataFrame, np.ndarray]):\n        assert self.valid_df[self.valid_target_columns].shape == valid_preds.shape\n\n        if isinstance(valid_preds, np.ndarray):\n            valid_preds = pd.DataFrame(valid_preds, columns=self.valid_target_columns)\n\n        valid_preds = pd.concat([self.valid_df[self.id_columns], valid_preds], axis=1, sort=False)\n\n        group_ids = []\n        all_scores = []\n        for i, group_id in enumerate(self.group_ids):\n            lv_scores = self.rmsse(valid_preds.groupby(group_id)[self.valid_target_columns].sum(), i + 1)\n            weight = getattr(self, f'lv{i + 1}_weight')\n            lv_scores = pd.concat([weight, lv_scores], axis=1, sort=False).prod(axis=1)\n            group_ids.append(group_id)\n            all_scores.append(lv_scores.sum())\n\n        return group_ids, all_scores\n","0b7d42da":"## reading data\ndf_train_full =  pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv\")\ndf_calendar = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\ndf_prices = pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\n\ndf_train = df_train_full.iloc[:, :-28]\ndf_valid = df_train_full.iloc[:, -28:]\n\ndf_test = df_valid.copy() + np.random.randint(100, size = df_valid.shape)\ndf_test.columns = [\"d_\" + str(x) for x in range(1942, 1970)]\n\nevaluator_1 = WRMSSEEvaluator(df_train, df_valid, df_calendar, df_prices)\nevaluator_2 = WRMSSEEvaluator(df_train_full, df_test, df_calendar, df_prices)\n","ea58fe34":"df_old = evaluator_1.lv12_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv12_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"store_id\", \"item_id\"])\ndf[\"store_item_id\"] = df.store_id + \"-\" + df.item_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Store-Item\", \"@store_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Store-Item\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Store-Item\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Store-Item\", \"@store_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.store_item_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Store-Item\")\nv2.hbar(\"store_item_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"store_item_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Store-Item\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Store-Item\", \"@store_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.store_item_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Store-Item\")\nv3.hbar(\"store_item_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"store_item_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Store-Item\"\n\n\ndf_top_old = df.sort_values(\"weight_old\", ascending = False).head(20)\n\nsource_4 = ColumnDataSource(df_top_old)\n\ntooltips_4 = [\n    (\"Store-Item\", \"@store_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\")\n]\n\nv4 = figure(plot_width = 650, plot_height = 400, x_range = df_top_old.store_item_id, tooltips = tooltips_4, title = \"Top Store-Item with old weights\")\nv4.vbar(x = dodge(\"store_item_id\", -0.15, range = v4.x_range), top = \"weight_old\", source = source_4, width = 0.2, color = \"orange\", alpha = 0.6, legend_label = \"Old Weight\")\nv4.vbar(x = dodge(\"store_item_id\", 0.15, range = v4.x_range), top = \"weight_new\", source = source_4, width = 0.2, color = \"maroon\", alpha = 0.6, legend_label = \"New Weight\")\n\nv4.xaxis.major_label_orientation = np.pi \/ 2\n\nv4.xaxis.axis_label = \"Store-Item\"\nv4.yaxis.axis_label = \"Weight\"\n\n\ndf_top_new = df.sort_values(\"weight_new\", ascending = False).head(20)\n\nsource_5 = ColumnDataSource(df_top_new)\n\ntooltips_5 = [\n    (\"Store-Item\", \"@store_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\")\n]\n\nv5 = figure(plot_width = 650, plot_height = 400, x_range = df_top_new.store_item_id, tooltips = tooltips_5, title = \"Top Store-Item with new weights\")\nv5.vbar(x = dodge(\"store_item_id\", -0.15, range = v5.x_range), top = \"weight_old\", source = source_5, width = 0.2, color = \"orange\", alpha = 0.6, legend_label = \"Old Weight\")\nv5.vbar(x = dodge(\"store_item_id\", 0.15, range = v5.x_range), top = \"weight_new\", source = source_5, width = 0.2, color = \"maroon\", alpha = 0.6, legend_label = \"New Weight\")\n\nv5.xaxis.major_label_orientation = np.pi \/ 2\n\nv5.xaxis.axis_label = \"Store-Item\"\nv5.yaxis.axis_label = \"Weight\"\n\n\nshow(column(v1, v2, v3, v4, v5))\n","98d6ec72":"df.to_csv(\"weights_store_item.csv\", index = False)\ndf.head()","60f8e708":"df_old = evaluator_1.lv11_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv11_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"state_id\", \"item_id\"])\ndf[\"state_item_id\"] = df.state_id + \"-\" + df.item_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"State-Item\", \"@state_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for State-Item\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"state-Item\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"State-Item\", \"@state_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.state_item_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for State-Item\")\nv2.hbar(\"state_item_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"state_item_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"State-Item\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"State-Item\", \"@state_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.state_item_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for State-Item\")\nv3.hbar(\"state_item_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"state_item_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"State-Item\"\n\n\ndf_top_old = df.sort_values(\"weight_old\", ascending = False).head(20)\n\nsource_4 = ColumnDataSource(df_top_old)\n\ntooltips_4 = [\n    (\"State-Item\", \"@state_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\")\n]\n\nv4 = figure(plot_width = 650, plot_height = 400, x_range = df_top_old.state_item_id, tooltips = tooltips_4, title = \"Top State-Item with old weights\")\nv4.vbar(x = dodge(\"state_item_id\", -0.15, range = v4.x_range), top = \"weight_old\", source = source_4, width = 0.2, color = \"orange\", alpha = 0.6, legend_label = \"Old Weight\")\nv4.vbar(x = dodge(\"state_item_id\", 0.15, range = v4.x_range), top = \"weight_new\", source = source_4, width = 0.2, color = \"maroon\", alpha = 0.6, legend_label = \"New Weight\")\n\nv4.xaxis.major_label_orientation = np.pi \/ 2\n\nv4.xaxis.axis_label = \"State-Item\"\nv4.yaxis.axis_label = \"Weight\"\n\n\ndf_top_new = df.sort_values(\"weight_new\", ascending = False).head(20)\n\nsource_5 = ColumnDataSource(df_top_new)\n\ntooltips_5 = [\n    (\"State-Item\", \"@state_item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\")\n]\n\nv5 = figure(plot_width = 650, plot_height = 400, x_range = df_top_new.state_item_id, tooltips = tooltips_5, title = \"Top State-Item with new weights\")\nv5.vbar(x = dodge(\"state_item_id\", -0.15, range = v5.x_range), top = \"weight_old\", source = source_5, width = 0.2, color = \"orange\", alpha = 0.6, legend_label = \"Old Weight\")\nv5.vbar(x = dodge(\"state_item_id\", 0.15, range = v5.x_range), top = \"weight_new\", source = source_5, width = 0.2, color = \"maroon\", alpha = 0.6, legend_label = \"New Weight\")\n\nv5.xaxis.major_label_orientation = np.pi \/ 2\n\nv5.xaxis.axis_label = \"State-Item\"\nv5.yaxis.axis_label = \"Weight\"\n\n\nshow(column(v1, v2, v3, v4, v5))\n","7c58e049":"df.to_csv(\"weights_state_item.csv\", index = False)\ndf.head()","d3358b92":"df_old = evaluator_1.lv10_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv10_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"store_id\", \"dept_id\"])\ndf[\"store_dept_id\"] = df.store_id + \"-\" + df.dept_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Store-Department\", \"@store_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Store-Department\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Store-Department\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Store-Department\", \"@store_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.store_dept_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Store-Department\")\nv2.hbar(\"store_dept_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"store_dept_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Store-Department\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Store-Department\", \"@store_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.store_dept_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Store-Department\")\nv3.hbar(\"store_dept_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"store_dept_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Store-Department\"\n\n\nshow(column(v1, v2, v3))\n","8713dfc5":"df.to_csv(\"weights_store_dept.csv\", index = False)\ndf.head()","aa1df3bd":"df_old = evaluator_1.lv9_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv9_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"store_id\", \"cat_id\"])\ndf[\"store_cat_id\"] = df.store_id + \"-\" + df.cat_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Store-Category\", \"@store_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Store-Category\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Store-Category\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Store-Category\", \"@store_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.store_cat_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Store-Category\")\nv2.hbar(\"store_cat_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"store_cat_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Store-Category\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Store-Category\", \"@store_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.store_cat_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Store-Category\")\nv3.hbar(\"store_cat_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"store_cat_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Store-Category\"\n\n\nshow(column(v1, v2, v3))\n","cdcaa92f":"df.to_csv(\"weights_store_cat.csv\", index = False)\ndf.head()","9f203c94":"df_old = evaluator_1.lv8_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv8_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"state_id\", \"dept_id\"])\ndf[\"state_dept_id\"] = df.state_id + \"-\" + df.dept_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"State-Department\", \"@state_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for State-Department\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"State-Department\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"State-Department\", \"@state_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.state_dept_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for State-Department\")\nv2.hbar(\"state_dept_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"state_dept_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"State-Department\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"State-Department\", \"@state_dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.state_dept_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for State-Department\")\nv3.hbar(\"state_dept_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"state_dept_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"State-Department\"\n\n\nshow(column(v1, v2, v3))\n","6b048021":"df.to_csv(\"weights_state_dept.csv\", index = False)\ndf.head()","a995f84c":"df_old = evaluator_1.lv7_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv7_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = [\"state_id\", \"cat_id\"])\ndf[\"state_cat_id\"] = df.state_id + \"-\" + df.cat_id\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"State-Category\", \"@state_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for State-Category\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"State-Category\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df[df.weight_diff < 0].sort_values(\"weight_diff\")\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df[df.weight_diff >= 0].sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"State-Category\", \"@state_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.state_cat_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for State-Category\")\nv2.hbar(\"state_cat_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"state_cat_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"State-Category\"\n\n\ndf_perc_bottom = df[df.weight_perc < 0].sort_values(\"weight_perc\")\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_perc >= 0].sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"State-Category\", \"@state_cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.state_cat_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for State-Category\")\nv3.hbar(\"state_cat_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"state_cat_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"State-Category\"\n\n\nshow(column(v1, v2, v3))\n","00e08cd8":"df.to_csv(\"weights_state_cat.csv\", index = False)\ndf.head()","bf14494d":"df_old = evaluator_1.lv6_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv6_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = \"item_id\")\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Item\", \"@item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Item\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Item\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df.sort_values(\"weight_diff\").head(10)\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df.sort_values(\"weight_diff\", ascending = False).head(10).sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Item\", \"@item_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.item_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Item\")\nv2.hbar(\"item_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"item_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Item\"\n\n\ndf_perc_bottom = df[df.weight_old != 0].sort_values(\"weight_perc\").head(10)\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_old != 0].sort_values(\"weight_perc\", ascending = False).head(10).sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Item\", \"@item_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.item_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Item\")\nv3.hbar(\"item_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"item_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Item\"\n\n\nshow(column(v1, v2, v3))\n","6278c456":"df.to_csv(\"weights_item.csv\", index = False)\ndf.head()","346147c7":"df_old = evaluator_1.lv5_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv5_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = \"store_id\")\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Store\", \"@store_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Store\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Store\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df[df.weight_diff < 0].sort_values(\"weight_diff\")\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df[df.weight_diff >= 0].sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Store\", \"@store_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.store_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Store\")\nv2.hbar(\"store_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"store_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Store\"\n\n\ndf_perc_bottom = df[df.weight_perc < 0].sort_values(\"weight_perc\")\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_perc >= 0].sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Store\", \"@store_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.store_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Store\")\nv3.hbar(\"store_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"store_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Store\"\n\n\nshow(column(v1, v2, v3))\n","decf272a":"df.to_csv(\"weights_store.csv\", index = False)\ndf.head()","9c602484":"df_old = evaluator_1.lv4_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv4_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = \"dept_id\")\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Department\", \"@dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Department\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Department\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df[df.weight_diff < 0].sort_values(\"weight_diff\")\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df[df.weight_diff >= 0].sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Department\", \"@dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.dept_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Department\")\nv2.hbar(\"dept_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"dept_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Department\"\n\n\ndf_perc_bottom = df[df.weight_perc < 0].sort_values(\"weight_perc\")\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_perc >= 0].sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Department\", \"@dept_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.dept_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Department\")\nv3.hbar(\"dept_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"dept_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Department\"\n\n\nshow(column(v1, v2, v3))\n","ab4704ae":"df.to_csv(\"weights_dept.csv\", index = False)\ndf.head()","0453322e":"df_old = evaluator_1.lv3_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv3_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = \"state_id\")\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"State\", \"@state_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for State\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"State\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df[df.weight_diff < 0].sort_values(\"weight_diff\")\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df[df.weight_diff >= 0].sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"State\", \"@state_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.state_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for State\")\nv2.hbar(\"state_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"state_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"State\"\n\n\ndf_perc_bottom = df[df.weight_perc < 0].sort_values(\"weight_perc\")\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_perc >= 0].sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"State\", \"@state_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.state_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for State\")\nv3.hbar(\"state_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"state_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"State\"\n\n\nshow(column(v1, v2, v3))\n","018e312b":"df.to_csv(\"weights_state.csv\", index = False)\ndf.head()","627a3562":"df_old = evaluator_1.lv2_weight.reset_index().rename(columns = {0: \"weight_old\"})\ndf_new = evaluator_2.lv2_weight.reset_index().rename(columns = {0: \"weight_new\"})\n\ndf = df_old.merge(df_new, on = \"cat_id\")\ndf[\"weight_diff\"] = df.weight_new - df.weight_old\ndf[\"weight_perc\"] = (df.weight_new - df.weight_old) * 100 \/ df.weight_old\n\nsource = ColumnDataSource(df)\n\ntooltips_1 = [\n    (\"Category\", \"@cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\")\n]\n\nv1 = figure(plot_width = 600, plot_height = 300, tooltips = tooltips_1, title = \"Old vs New Weights for Category\")\nv1.circle(\"weight_old\", \"weight_new\", source = source, size = 10, color = \"steelblue\", alpha = 0.7, legend_label = \"Category\")\n\nv1.xaxis.axis_label = \"Old Weight\"\nv1.yaxis.axis_label = \"New Weight\"\n\nv1.legend.location = \"top_left\"\n\n\ndf_diff_bottom = df[df.weight_diff < 0].sort_values(\"weight_diff\")\ndf_diff_bottom[\"weight_diff_min\"] = df_diff_bottom.weight_diff\ndf_diff_top = df[df.weight_diff >= 0].sort_values(\"weight_diff\")\ndf_diff_top[\"weight_diff_max\"] = df_diff_top.weight_diff\n\ndf_diff = pd.concat([df_diff_bottom, df_diff_top])\n\nsource_2 = ColumnDataSource(df_diff)\n\ntooltips_2 = [\n    (\"Category\", \"@cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.0000}\"),\n    (\"New Weight\", \"@weight_new{0.0000}\"),\n    (\"Weight Absolute Change\", \"@weight_diff{0.0000}\")\n]\n\nmax_diff = max(abs(np.nanmin(df_diff.weight_diff_min.values)), np.nanmax(df_diff.weight_diff_max.values))\n\nv2 = figure(plot_width = 650, plot_height = 400, y_range = df_diff.cat_id, x_range = Range1d(-max_diff * 1.1, max_diff * 1.1), tooltips = tooltips_2, title = \"Top Absolute Weight Change for Category\")\nv2.hbar(\"cat_id\", right = \"weight_diff_min\", source = source_2, height = 0.75, color = \"red\", alpha = 0.6)\nv2.hbar(\"cat_id\", right = \"weight_diff_max\", source = source_2, height = 0.75, color = \"green\", alpha = 0.6)\n\nv2.xaxis.axis_label = \"Absolute Weight Difference\"\nv2.yaxis.axis_label = \"Category\"\n\n\ndf_perc_bottom = df[df.weight_perc < 0].sort_values(\"weight_perc\")\ndf_perc_bottom[\"weight_perc_min\"] = df_perc_bottom.weight_perc\ndf_perc_top = df[df.weight_perc >= 0].sort_values(\"weight_perc\")\ndf_perc_top[\"weight_perc_max\"] = df_perc_top.weight_perc\n\ndf_perc = pd.concat([df_perc_bottom, df_perc_top])\n\nsource_3 = ColumnDataSource(df_perc)\n\ntooltips_3 = [\n    (\"Category\", \"@cat_id\"),\n    (\"Old Weight\", \"@weight_old{0.000000}\"),\n    (\"New Weight\", \"@weight_new{0.000000}\"),\n    (\"Weight Percentage Change\", \"@weight_perc{0.00}%\")\n]\n\nmax_perc = max(abs(np.nanmin(df_perc.weight_perc_min.values)), np.nanmax(df_perc.weight_perc_max.values))\n\nv3 = figure(plot_width = 650, plot_height = 400, y_range = df_perc.cat_id, x_range = Range1d(-max_perc * 1.1, max_perc * 1.1), tooltips = tooltips_3, title = \"Top Percentage Weight Change for Category\")\nv3.hbar(\"cat_id\", right = \"weight_perc_min\", source = source_3, height = 0.75, color = \"red\", alpha = 0.6)\nv3.hbar(\"cat_id\", right = \"weight_perc_max\", source = source_3, height = 0.75, color = \"green\", alpha = 0.6)\n\nv3.xaxis.axis_label = \"Percentage Weight Difference\"\nv3.yaxis.axis_label = \"Category\"\n\n\nshow(column(v1, v2, v3))\n","04f0a29a":"df.to_csv(\"weights_cat.csv\", index = False)\ndf.head()","f41f3cdd":"## 1. Store-Item\nLet's explore how different are the weights at store-item level.\n","52acb349":"## 10. State\nLet's explore how different are the weights at state level.","e38e52a4":"## 7. Item\nLet's explore how different are the weights at item level.","d71d5996":"## 11. Category\nLet's explore how different are the weights at category level.","66ea6218":"## Avoiding the LB pitfall\nThere are some valuable insights to take back from the changes in weights, especially at the more granular levels. Feel free to explore and inculcate some of them into your models to ensure the model performs well on the private LB.\n","5c4218b5":"## M5 Weights\n![](https:\/\/i.imgur.com\/yRPR0pY.png)\n\nThe evaluation metric of this competition is quite unique in the way that the weights of observations is dependent on historic values of the time series and hence changes for every validation \/ test dataset.\n\n**This means that the public LB and the private LB have different weights.** Now that the validation data is released, we can calculate the weights used for the test data and also compare the weights between the public LB and private LB.\n\nThis notebook demonstrates some of the changes \/ differences between the weights and hopefully it can be used to ensure models don't overfit to the public LB. The final weights are also saved in the output of the notebook.\n\nI've also shared a notebook of how you can deep dive into analyzing your submission on the public LB: https:\/\/www.kaggle.com\/rohanrao\/m5-anatomy-of-the-public-lb\n","22531be8":"## 6. State-Category\nLet's explore how different are the weights at state-category level.","96de90b1":"## 2. State-Item\nLet's explore how different are the weights at state-item level.","6bcc1844":"## 3. Store-Department\nLet's explore how different are the weights at store-department level.\n","b939d167":"## 8. Store\nLet's explore how different are the weights at store level.","7791dad9":"## Weights calculation\nThanks to [sakami](https:\/\/www.kaggle.com\/sakami) for providing a neat class for calculation of weights [here](https:\/\/www.kaggle.com\/c\/m5-forecasting-accuracy\/discussion\/133834).\n","3afdf055":"## 4. Store-Category\nLet's explore how different are the weights at store-category level.\n","7a241238":"## 9. Department\nLet's explore how different are the weights at department level.","459ef4ec":"## 5. State-Department\nLet's explore how different are the weights at state-department level."}}