{"cell_type":{"534a1fd5":"code","d0b9fd02":"code","dba89b42":"code","6db5822a":"code","e60bc62d":"code","c9cc2322":"code","7390b914":"code","2a9ad093":"code","21c8e847":"code","779d37d5":"code","85ebdbbd":"code","ecaf995f":"code","23aac099":"code","64280afd":"code","a62806a9":"code","bb2646e2":"code","e0ca43d5":"code","463f08c9":"code","355809fa":"code","c36ba721":"code","c583c314":"code","2e68cc28":"code","6ee74aae":"code","96eed052":"code","a621eff2":"code","541e7f96":"code","3680ef28":"code","52f6c9cd":"code","8edcccef":"code","a2fc0bb4":"code","abaf3370":"code","e1f168f9":"code","d05d3479":"code","4e4f0f01":"code","3285f3ee":"code","dfc0138a":"code","fd9150f3":"code","510aff07":"code","7bcbe38a":"code","86a6c755":"markdown","f299b65e":"markdown","6f2b810b":"markdown","928e6cd2":"markdown","08d8246e":"markdown","bdc2831b":"markdown","f43c650f":"markdown","022a9d26":"markdown","8d375776":"markdown","69104713":"markdown","21e60032":"markdown","e9a2f28e":"markdown","af9c09d6":"markdown","a389a178":"markdown","8695487b":"markdown","625d0326":"markdown","3e50833a":"markdown","47fb5364":"markdown","90cce9ae":"markdown","ac6d43ec":"markdown","ac020037":"markdown","23be46ac":"markdown"},"source":{"534a1fd5":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.dummy import DummyClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d0b9fd02":"#Import and see head\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","dba89b42":"#Import and see head\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","6db5822a":"#Check columns\ntest_data.columns","e60bc62d":"#Check columns\ntrain_data.columns","c9cc2322":"train_data.shape","7390b914":"train_data.count()","2a9ad093":"test_data.shape\n","21c8e847":"train_data.Sex.unique()","779d37d5":"train_data.describe()","85ebdbbd":"test_data.describe()","ecaf995f":"train_data.isnull().sum()","23aac099":"test_data.isnull().sum()","64280afd":"sns.set()\nplt.figure(figsize=(10, 8))\nax = sns.countplot(x = \"Survived\",data=train_data)\nax.set_title(\"Survived\")\nplt.show()","a62806a9":"corr = train_data.loc[:].corr()\n\n\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","bb2646e2":"male_sex = train_data[train_data[\"Sex\"]==\"male\"]\nmale_sex.Survived.value_counts(normalize=True)","e0ca43d5":"female_sex = train_data[train_data[\"Sex\"]==\"female\"]\nfemale_sex.Survived.value_counts(normalize=True)","463f08c9":"female_sex.describe()","355809fa":"male_sex.describe()","c36ba721":"\nsns.set()\nplt.figure(figsize=(50, 60))\nax1 = plt.subplot(10,6,1)\nax1 = sns.countplot(x = \"Survived\",data=female_sex, hue=\"Survived\")\nax1.set_title(\"Female Survivor\")\nax2 = plt.subplot(10,6,2)\nax2 = sns.countplot(x = \"Survived\",data=male_sex, hue=\"Survived\")\nax2.set_title(\"Male Survivor\")\nplt.show()","c583c314":"gender = {\"female\": 1, \"male\": 0}\ntrain_data['Sex']= train_data['Sex'].map(gender)\ntest_data['Sex']= test_data['Sex'].map(gender)","2e68cc28":"train_data.Survived.value_counts(normalize=True)","6ee74aae":"corr = train_data.loc[:].corr()\n\n\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","96eed052":"sns.set()\nplt.figure(figsize=(10, 8))\nax = sns.countplot(x = \"Pclass\",data=train_data)\nax.set_title(\"Survived by Class\")\nplt.xlabel(\"Pclass\")\nplt.ylabel(\"qty\")\nplt.show()\n","a621eff2":"plt.figure(figsize=(10,8))\nsns.countplot(data=train_data, x=\"Pclass\", hue=\"Survived\")","541e7f96":"sns.set()\nplt.figure(figsize=(10, 8))\nax = sns.countplot(x = \"Embarked\",hue=\"Survived\", data=train_data)\nax.set_title(\"Survived by Embarked\")\nplt.xlabel(\"Port\")\nplt.ylabel(\"qty\")\nplt.show()\n","3680ef28":"expanded_data = pd.get_dummies(train_data, columns=[\"Embarked\"])","52f6c9cd":"corr = expanded_data.loc[:].corr()\n\n\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","8edcccef":"test_data.isnull().sum()\ntrain_data.isnull().sum()","a2fc0bb4":"#Add mean taking test and train data together\ntmp1 = test_data[\"Age\"].mean()\ntmp2 =train_data[\"Age\"].mean()\n(tmp1 + tmp2)\/2\ntest_data[\"Age\"].fillna(30, inplace=True)\ntrain_data[\"Age\"].fillna(30, inplace=True)","abaf3370":"#Adding the Embarked from the most probable place\ntrain_data[\"Embarked\"].fillna(\"S\", inplace=True)","e1f168f9":"(train_data.Fare.mean() + test_data.Fare.mean())\/2","d05d3479":"#Adding the mean from Fare, also from both the tables \/ Same Ship\ntest_data[\"Fare\"].fillna(34, inplace=True)","4e4f0f01":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n#Here e will check again all the features to be used in the model and pass then to columns\nfeatures = [\"Pclass\", \"SibSp\", \"Sex\", \"Parch\",\"Embarked\",\"Age\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])","3285f3ee":"score_depth_test=[]\nfor i in range(1,7):\n    model = RandomForestClassifier(n_estimators=100, max_depth=i, random_state=1)\n    model.fit(X, y)\n    predictions = model.predict(X_test)\n    score_depth_test.append(model.score(X,y))","dfc0138a":"score_depth_test","fd9150f3":"score_estimators_test=[]\nfor i in range(25,200,25):\n    model = RandomForestClassifier(n_estimators=i, max_depth=7, random_state=1)\n    model.fit(X, y)\n    predictions = model.predict(X_test)\n    score_estimators_test.append(model.score(X,y))","510aff07":"score_estimators_test","7bcbe38a":"model = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)","86a6c755":"Running the Random Forest Classifier","f299b65e":"Let\u00b4s check how the random forest will do in diferent depth","6f2b810b":"# Checking the diference in survival for man and woman","928e6cd2":"Bellow we will change the gender data from \"male\" to 0 and from \"female\" to 1. Since the models aren't very good with strings we have to change it.","08d8246e":"We can see here that in max_depth=7 is a good place to start, now lets check the n_estimators, lets work with a step of 25","bdc2831b":"In this graphic we can see that more died in the 3rd class than in the other classes","f43c650f":"In here we can see that the correlation between this ","022a9d26":"No big diference in this point, doing the final submit with the depth of 7 and estimators on 100","8d375776":"## Importing the files and checking the data","69104713":"Strangely, the one's that embarked on the Southampton Port are not as proportional as the other ports? \nIn the next code I will change the port to columns and use a panda feature called getDummies for that, so it will be also usefull in the model. ","21e60032":"## Taking a look in the survived","e9a2f28e":"# First look in the correlation","af9c09d6":"Positive correlation between Survived and Fare, negative with Survived and Pclass, first lets prepare the idea in the gender part. This was the first submit from the kaggle so it has an importance.","a389a178":"## Checking for empty fields","8695487b":"Very big diference in the survival rate from male and female","625d0326":"Looking in this graphic we could think that there are more survivors in the 3rd class, but we need to further isolate each class to check this information","3e50833a":"Changing the gender to numbers, 1 for female and 0 for male","47fb5364":"Now a very high positive correlation between survived and sex","90cce9ae":"Checking for the survival rate in Class","ac6d43ec":"# A Real Begginer Work on Titanic\n\n### Intro\nFirst of all I have no background in DS or anything like that, I am a real begginer and I am looking to understand how can I apply ML and DS in my field that is sales, marketing and business. <br>\nIf you are in the same boat as I am let\u00b4s dive together on the Titanic<br>\n\n* Passenger ID is use to identify the passenger.\n* Survived is who survived, 1 if survived and 0 otherwise.\n* Pclass is the  class, 1 is 1st (Upper), 2 is 2nd (Middle), 3 is 3rd (lower)\n* Age is the age \n* Sibsp is the number of siblings or spouses traveling together\n* Parch is the number of parents and children traveling together\n* Ticket is the ticket \n* Fare is the ticket fare\n* Cabin is the number of the cabin\n* Embarked means Port of Embarkation. C = Cherbourg, Q = Queenstown, S = Southampton\n\n**This notebook is still a work in progress so comments are all welcome**\n\n","ac020037":"## Checking the embarked feature","23be46ac":"# Code"}}