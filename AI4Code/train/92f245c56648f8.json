{"cell_type":{"0c31759a":"code","850c5eb4":"code","6056c9fe":"code","86eebee0":"code","576c1081":"code","a604acb7":"code","d468b6fb":"code","cfb53353":"code","019e6f09":"code","46591011":"code","65e9f6d3":"code","9e47c8fc":"code","535f301d":"code","50c81eff":"code","6f976d4b":"code","0d1efeb7":"code","19e2141a":"code","4d1f7d02":"code","d40ae408":"code","faa55614":"code","48d4ebc0":"code","3e23737b":"code","85cb71e1":"code","5f8bbd70":"code","2fb31135":"code","4492c903":"code","ebfcfde3":"code","31c48e39":"code","857c8e75":"code","e8cd1ccb":"code","07aa63cb":"code","c2d4db65":"markdown","cb790407":"markdown","0be38a3c":"markdown","d7b6f2f9":"markdown","3cabc4e7":"markdown","36238390":"markdown","50b2a4f3":"markdown","49401ee8":"markdown","87fc2673":"markdown"},"source":{"0c31759a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","850c5eb4":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","6056c9fe":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","86eebee0":"train.info()","576c1081":"test.info()","a604acb7":"all = pd.concat([train, test], sort = False)\nall.info()","d468b6fb":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","cfb53353":"all.info()","019e6f09":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","46591011":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","65e9f6d3":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","9e47c8fc":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","535f301d":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","50c81eff":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","6f976d4b":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","0d1efeb7":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","19e2141a":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","4d1f7d02":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","d40ae408":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","faa55614":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","48d4ebc0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","3e23737b":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","85cb71e1":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","5f8bbd70":"predictions = ada.predict(X_test)","2fb31135":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","4492c903":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","ebfcfde3":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","31c48e39":"t_pred = ada.predict(TestForPred).astype(int)","857c8e75":"PassengerId = all_test['PassengerId']","e8cd1ccb":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","07aa63cb":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","c2d4db65":"****Build AdaBoost","cb790407":"****Extra Features:","0be38a3c":"# Import Data","d7b6f2f9":"****Final Predictions","3cabc4e7":"****Check Accuracy","36238390":"****Check Accuracy","50b2a4f3":"****Train\/Test Split","49401ee8":"# Import Libraries","87fc2673":"## Combine train and test"}}