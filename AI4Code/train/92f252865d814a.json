{"cell_type":{"f8150bc0":"code","3d8c9d07":"code","07a0ba3a":"code","43af72b4":"code","448ee1a3":"code","e377535d":"code","c0bac04e":"code","a20b59dc":"code","0277c1d9":"code","7e92f537":"code","dd42a20c":"code","f9502e7c":"code","c74a9657":"code","d44ffe1c":"code","da473fc4":"code","09b621d8":"code","587807c8":"code","15fff935":"code","619da792":"code","2e4dbbd6":"code","422e130a":"code","5f62e100":"code","23e0645f":"code","aa9ce83a":"code","4c06a50b":"code","404d2a59":"code","8d615cd8":"code","320a1197":"code","16e72d62":"code","0f39e6cf":"code","f2fe8448":"code","ed5b7799":"code","1685392d":"code","22f18faf":"code","b253f8ba":"code","fc78bc16":"code","f5ea732d":"code","f3ed217e":"code","bd086c85":"code","8eefdf3d":"code","9bae4383":"markdown","158ee220":"markdown","fe25c860":"markdown","b5bd47a5":"markdown","f3441366":"markdown"},"source":{"f8150bc0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport json","3d8c9d07":"# Get csv file & json (latest) dumps\n!wget https:\/\/api.covid19india.org\/csv\/latest\/raw_data1.csv\n!wget https:\/\/api.covid19india.org\/csv\/latest\/raw_data2.csv\n!wget https:\/\/api.covid19india.org\/csv\/latest\/raw_data3.csv\n!wget https:\/\/api.covid19india.org\/csv\/latest\/statewise_tested_numbers_data.csv\n!wget https:\/\/api.covid19india.org\/csv\/latest\/tested_numbers_icmr_data.csv\n!ls","07a0ba3a":"statewise_tests = pd.read_csv('statewise_tested_numbers_data.csv')\nicmr_tests = pd.read_csv('tested_numbers_icmr_data.csv')\nraw_data1 = pd.read_csv('raw_data1.csv')\nraw_data2 = pd.read_csv('raw_data2.csv')\nraw_data3 = pd.read_csv('raw_data3.csv')","43af72b4":"print(raw_data1.columns)\nprint(raw_data2.columns)\nprint(raw_data3.columns)","448ee1a3":"raw_data3 = raw_data3.rename(columns ={'Entry_ID':'Patient Number'}) #Rename column name identifying patient\nraw_data3 = raw_data3[raw_data3['Current Status'] == 'Hospitalized']\n\nsum(raw_data3['Date Announced'].isnull()) # Not required since the above step removes these rows \nraw_data3.dropna(subset=['Date Announced'])\n\nraw_data3['Date Announced'] = pd.to_datetime(raw_data3['Date Announced'], format = \"%d\/%m\/%Y\")\nraw_data3['Num Cases'] = raw_data3['Num Cases'].astype('float64')\n","e377535d":"raw_data3[raw_data3['Num Cases']<0.0] # Leave this as is ! ","c0bac04e":"raw_data3 = pd.DataFrame(raw_data3.groupby(['Detected State', 'Date Announced']).agg('sum')['Num Cases'])\nraw_data3.columns = ['Patient Number']\nraw_data3","a20b59dc":"raw_data3.idxmax()","0277c1d9":"raw_data1 = raw_data1[['Patient Number', 'State Patient Number', 'Date Announced',\n       'Age Bracket', 'Gender', 'Detected City',\n       'Detected District', 'Detected State', 'Nationality', 'Type of transmission']]\n\nraw_data2 = raw_data2[['Patient Number', 'State Patient Number', 'Date Announced',\n       'Age Bracket', 'Gender', 'Detected City',\n       'Detected District', 'Detected State', 'Nationality', 'Type of transmission']]\n\nraw_data = pd.concat([raw_data1, raw_data2])\nprint(raw_data.shape)\nraw_data.head()","7e92f537":"raw_data.dtypes","dd42a20c":"raw_data['Age Bracket'] = raw_data['Age Bracket'].apply(lambda x : 30 if str(x).__contains__('-') else x)# Around 4-5 rows have age ranges 28-35. Replacing it with 30\nraw_data['Date Announced'] = pd.to_datetime(raw_data['Date Announced'], format = \"%d\/%m\/%Y\")\n\nraw_data['Age Bracket'] = raw_data['Age Bracket'].astype('float64')\nraw_data['Gender'] = raw_data['Gender'].astype('category')\nraw_data['Detected City'] = raw_data['Detected City'].astype('category')\nraw_data['Detected District'] = raw_data['Detected District'].astype('category')\nraw_data['Detected State'] = raw_data['Detected State'].astype('category')\n\nraw_data['Nationality'] = raw_data['Nationality'].astype('category')\nraw_data['Type of transmission'] = raw_data['Type of transmission'].astype('category')","f9502e7c":"# Check latest date\nnp.max(raw_data['Date Announced'])","c74a9657":"# Quickly visualizing the per\/day new cases (across the country)\nraw_data.groupby(raw_data['Date Announced']).count()['Patient Number'].plot(kind='hist',title='New cases per day')","d44ffe1c":"raw_data['Age Bracket'].plot(kind='hist',title='Age Distribution')","da473fc4":"raw_data['Gender'].hist()","09b621d8":"raw_data['Detected State'].value_counts()","587807c8":"states = pd.DataFrame(raw_data.groupby(['Detected State', 'Date Announced']).agg('count')['Patient Number'])\nstates = pd.concat([states, raw_data3], sort = True)\nstates","15fff935":"import pandas as pd\nimport numpy as np\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib.dates import date2num, num2date\nfrom matplotlib import dates as mdates\nfrom matplotlib import ticker\nfrom matplotlib.colors import ListedColormap\nfrom matplotlib.patches import Patch\n\nfrom scipy import stats as sps\nfrom scipy.interpolate import interp1d\n\nfrom IPython.display import clear_output\n\n%config InlineBackend.figure_format = 'retina'","619da792":"# Column vector of k\nk = np.arange(0, 2000)[:, None]\nprint(k.shape)\n\n# Different values of Lambda\nlambdas = [10, 20, 30, 40, 80, 100, 250, 500, 750, 1000, 1250, 1500, 1750]\n\n# Evaluated the Probability Mass Function (remember: poisson is discrete)\ny = sps.poisson.pmf(k, lambdas)\n\n# Show the resulting shape\nprint(y.shape)","2e4dbbd6":"fig, ax = plt.subplots()\n\nax.set(title='Poisson Distribution of Cases\\n $p(k|\\lambda)$ over a wide range')\n\nplt.plot(k, y,\n         marker='o',\n         markersize=3,\n         lw=0)\n\nplt.legend(title=\"$\\lambda$\", labels=lambdas);\n","422e130a":"k = 200\n\nlam = np.linspace(75, 400, 800)\n\nlikelihood = pd.Series(data=sps.poisson.pmf(k, lam),\n                       index=pd.Index(lam, name='$\\lambda$'),\n                       name='lambda')\n\nlikelihood.plot(title=r'Likelihood $P\\left(k_t=200|\\lambda\\right)$');","5f62e100":"k = np.array([50, 250, 500, 750, 1000])\n\n# We create an array for every possible value of Rt\nR_T_MAX = 12\nr_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1)\n\n# Gamma is 1\/serial interval\n# https:\/\/wwwnc.cdc.gov\/eid\/article\/26\/7\/20-0282_article\n# https:\/\/www.nejm.org\/doi\/full\/10.1056\/NEJMoa2001316\nGAMMA = 1\/7\n\n# Map Rt into lambda so we can substitute it into the equation below\n# Note that we have N-1 lambdas because on the first day of an outbreak\n# you do not know what to expect.\nlam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1))\n\n# Evaluate the likelihood on each day and normalize sum of each day to 1.0\nlikelihood_r_t = sps.poisson.pmf(k[1:], lam)\nlikelihood_r_t \/= np.sum(likelihood_r_t, axis=0)\n\n# Plot it\nax = pd.DataFrame(\n    data = likelihood_r_t,\n    index = r_t_range\n).plot(\n    title='Likelihood of $R_t$ given $k$',\n    xlim=(0,10)\n)\n\nax.legend(labels=k[1:], title='New Cases')\nax.set_xlabel('$R_t$');\n","23e0645f":"posteriors = likelihood_r_t.cumprod(axis=1)\nposteriors = posteriors \/ np.sum(posteriors, axis=0)\n\ncolumns = pd.Index(range(1, posteriors.shape[1]+1), name='Day')\nposteriors = pd.DataFrame(\n    data = posteriors,\n    index = r_t_range,\n    columns = columns)\n\nax = posteriors.plot(\n    title='Posterior $P(R_t|k)$',\n    xlim=(0,10)\n)\nax.legend(title='Day')\nax.set_xlabel('$R_t$');","aa9ce83a":"# Calculating most likely posterior values\n\nmost_likely_values = posteriors.idxmax(axis=0)\nmost_likely_values","4c06a50b":"def highest_density_interval(pmf, p=.9, column=None):\n    \n    # debuggin step << Used this to identify that I had incorrectly concatenated the files\n#     if column:\n#         print(column)\n    # If we pass a DataFrame, just call this recursively on the columns\n    if(isinstance(pmf, pd.DataFrame)):\n        return pd.DataFrame([highest_density_interval(pmf[col], p=p, column=col) for col in pmf],\n                            index=pmf.columns)\n    cumsum = np.cumsum(pmf.values)\n    best = None\n    for i, value in enumerate(cumsum):\n        for j, high_value in enumerate(cumsum[i+1:]):\n            if (high_value-value > p) and (not best or j<best[1]-best[0]):\n                best = (i, i+j+1)\n                break\n            \n    low = pmf.index[best[0]]\n    high = pmf.index[best[1]]\n    return pd.Series([low, high], index=[f'Low_{p*100:.0f}', f'High_{p*100:.0f}'])\n\nhdi = highest_density_interval(posteriors)\nhdi.tail()\n","404d2a59":"ax = most_likely_values.plot(marker='o',\n                             label='Most Likely',\n                             title=f'$R_t$ by day',\n                             c='k',\n                             markersize=4)\n\nax.fill_between(hdi.index,\n                hdi['Low_90'],\n                hdi['High_90'],\n                color='k',\n                alpha=.1,\n                lw=0,\n                label='HDI')\n\nax.legend();","8d615cd8":"state_name = \"Delhi\"\n\ndef prepare_cases(cases):\n    new_cases = cases\n\n    smoothed = new_cases.rolling(7,\n        win_type='gaussian',\n        min_periods=1,\n        center=True).mean(std=2).round()\n    \n    smoothed.fillna(0, inplace=True)\n    \n    zeros = smoothed.index[smoothed['Patient Number'].eq(0)]\n    if len(zeros) == 0:\n        idx_start = 0\n    else:\n        last_zero = zeros.max()\n        idx_start = smoothed.index.get_loc(last_zero) + 1\n    smoothed = smoothed.iloc[idx_start:]\n    original = new_cases.loc[smoothed.index]\n    \n    return original, smoothed\n\ncases = states.xs(state_name) #.rename(f\"{state_name} cases\")\n\noriginal, smoothed = prepare_cases(cases)","320a1197":"import plotly.express as px\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\n\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","16e72d62":"# Creating trace1\ntrace1 = go.Scatter(\n                    x = original.index,\n                    y = original['Patient Number'],\n                    mode = \"lines\",\n                    name = \"actual\",\n                    marker = dict(color = 'rgba(16, 25, 160, 0.4)')\n                    )\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = smoothed.index,\n                    y = smoothed['Patient Number'],\n                    mode = \"lines+markers\",\n                    name = \"smoothed\",\n                    marker = dict(color = 'rgba(16, 8, 250, 1.0)')\n                    )\ndata = [trace1, trace2]\nlayout = dict(title = f'{state_name} Number of cases'\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)\n","0f39e6cf":"def get_posteriors(sr, sigma=0.15):\n    \n    sr = sr['Patient Number']\n    # (1) Calculate Lambda\n    lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1))\n\n    \n    # (2) Calculate each day's likelihood\n    likelihoods = pd.DataFrame(\n        data = sps.poisson.pmf(sr[1:].values, lam),\n        index = r_t_range,\n        columns = sr.index[1:])\n    \n    # (3) Create the Gaussian Matrix\n    process_matrix = sps.norm(loc=r_t_range,\n                              scale=sigma\n                             ).pdf(r_t_range[:, None]) \n\n    # (3a) Normalize all rows to sum to 1\n    process_matrix \/= process_matrix.sum(axis=0)\n    \n    # (4) Calculate the initial prior\n    prior0 = sps.gamma(a=4).pdf(r_t_range)\n    prior0 \/= prior0.sum()\n\n    # Create a DataFrame that will hold our posteriors for each day\n    # Insert our prior as the first posterior.\n    posteriors = pd.DataFrame(\n        index=r_t_range,\n        columns=sr.index,\n        data={sr.index[0]: prior0}\n    )\n    \n    # We said we'd keep track of the sum of the log of the probability\n    # of the data for maximum likelihood calculation.\n    log_likelihood = 0.0\n\n    # (5) Iteratively apply Bayes' rule\n    for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]):\n\n        #(5a) Calculate the new prior\n        current_prior = process_matrix @ posteriors[previous_day]\n        \n        #(5b) Calculate the numerator of Bayes' Rule: P(k|R_t)P(R_t)\n        numerator = likelihoods[current_day] * current_prior\n        \n        #(5c) Calcluate the denominator of Bayes' Rule P(k)\n        denominator = np.sum(numerator)\n        \n        # Execute full Bayes' Rule\n        posteriors[current_day] = numerator\/denominator\n        \n        # Add to the running sum of log likelihoods\n        log_likelihood += np.log(denominator)\n    \n    return posteriors, log_likelihood\n\n# Note that we're fixing sigma to a value just for the example\nposteriors, log_likelihood = get_posteriors(smoothed, sigma=.15)\n","f2fe8448":"log_likelihood","ed5b7799":"ax = posteriors.plot(title=f'{state_name} - Daily Posterior for $R_t$',\n           legend=False, \n           lw=1,\n           c='k',\n           alpha=.3,\n           xlim=(0.4,4))\n\nax.set_xlabel('$R_t$');","1685392d":"# Note that this takes a while to execute - it's not the most efficient algorithm\nhdis = highest_density_interval(posteriors, p=.9)\n\nmost_likely = posteriors.idxmax().rename('ML')\n\n# Look into why you shift -1\nresult = pd.concat([most_likely, hdis], axis=1)\n\nresult.tail()","22f18faf":"def plot_rt(result, ax, state_name):\n    \n    ax.set_title(f\"{state_name}\")\n    \n    # Colors\n    ABOVE = [1,0,0]\n    MIDDLE = [1,1,1]\n    BELOW = [0,0,0]\n    cmap = ListedColormap(np.r_[\n        np.linspace(BELOW,MIDDLE,25),\n        np.linspace(MIDDLE,ABOVE,25)\n    ])\n    color_mapped = lambda y: np.clip(y, .5, 1.5)-.5\n    \n    index = result['ML'].index.get_level_values('Date Announced')\n    values = result['ML'].values\n    \n    # Plot dots and line\n    ax.plot(index, values, c='k', zorder=1, alpha=.25)\n    ax.scatter(index,\n               values,\n               s=40,\n               lw=.5,\n               c=cmap(color_mapped(values)),\n               edgecolors='k', zorder=2)\n    \n    # Aesthetically, extrapolate credible interval by 1 day either side\n    lowfn = interp1d(date2num(index),\n                     result['Low_90'].values,\n                     bounds_error=False,\n                     fill_value='extrapolate')\n    \n    highfn = interp1d(date2num(index),\n                      result['High_90'].values,\n                      bounds_error=False,\n                      fill_value='extrapolate')\n    \n    extended = pd.date_range(start=pd.Timestamp('2020-03-01'),\n                             end=index[-1]+pd.Timedelta(days=1))\n    \n    ax.fill_between(extended,\n                    lowfn(date2num(extended)),\n                    highfn(date2num(extended)),\n                    color='k',\n                    alpha=.1,\n                    lw=0,\n                    zorder=3)\n\n    ax.axhline(1.0, c='k', lw=1, label='$R_t=1.0$', alpha=.25);\n    \n    # Formatting\n    ax.xaxis.set_major_locator(mdates.MonthLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    ax.xaxis.set_minor_locator(mdates.DayLocator())\n    \n    ax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(\"{x:.1f}\"))\n    ax.yaxis.tick_right()\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.margins(0)\n    ax.grid(which='major', axis='y', c='k', alpha=.1, zorder=-2)\n    ax.margins(0)\n    ax.set_ylim(0.0, 5.0)\n    ax.set_xlim(pd.Timestamp('2020-03-01'), result.index.get_level_values('Date Announced')[-1]+pd.Timedelta(days=1))\n    fig.set_facecolor('w')\n\n    \nfig, ax = plt.subplots(figsize=(600\/72,400\/72))\n\nplot_rt(result, ax, state_name)\nax.set_title(f'Real-time $R_t$ for {state_name}')\nax.xaxis.set_major_locator(mdates.WeekdayLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))","b253f8ba":"sigmas = np.linspace(1\/20, 1, 20)\n\n# Determing targets as only the first 15 states\ntargets = list(raw_data['Detected State'].value_counts().index[:16])\nstates_to_process = states.loc[targets]\n\nresults = {}","fc78bc16":"%%time\n\nfor state_name in targets:\n    \n    print(state_name)\n    cases = states_to_process.xs(state_name)\n    new, smoothed = prepare_cases(cases)\n    \n    result = {}\n    \n    # Holds all posteriors with every given value of sigma\n    result['posteriors'] = []\n    \n    # Holds the log likelihood across all k for each value of sigma\n    result['log_likelihoods'] = []\n    \n    for sigma in sigmas:\n        posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma)\n        result['posteriors'].append(posteriors)\n        result['log_likelihoods'].append(log_likelihood)\n    \n    # Store all results keyed off of state name\n    results[state_name] = result\n    clear_output(wait=True)\n\nprint('Done.')","f5ea732d":"# Each index of this array holds the total of the log likelihoods for\n# the corresponding index of the sigmas array.\ntotal_log_likelihoods = np.zeros_like(sigmas)\n\n# Loop through each state's results and add the log likelihoods to the running total.\nfor state_name, result in results.items():\n    total_log_likelihoods += result['log_likelihoods']\n\n# Select the index with the largest log likelihood total\nmax_likelihood_index = total_log_likelihoods.argmax()\n\n# Select the value that has the highest log likelihood\nsigma = sigmas[max_likelihood_index]\n\n# Plot it\nfig, ax = plt.subplots()\nax.set_title(f\"Maximum Likelihood value for $\\sigma$ = {sigma:.2f}\");\nax.plot(sigmas, total_log_likelihoods)\nax.axvline(sigma, color='k', linestyle=\":\")","f3ed217e":"%%time\nfinal_results = None\n\nfor state_name, result in results.items():\n    print(state_name)\n    #result['state'] = state_name\n    posteriors = result['posteriors'][max_likelihood_index]\n    hdis_90 = highest_density_interval(posteriors, p=.9)\n    hdis_50 = highest_density_interval(posteriors, p=.5)\n    most_likely = posteriors.idxmax().rename('ML')\n    result = pd.concat([most_likely, hdis_90, hdis_50], axis=1)\n    result['state'] = state_name\n    #print(result)\n    #break\n    if final_results is None:\n        final_results = result\n    else:\n        final_results = pd.concat([final_results, result])\n        #break\n    clear_output(wait=True)\n\nprint('Done.')","bd086c85":"ncols = 4\nnrows = int(np.ceil(len(results) \/ ncols))\n\nfig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3))\n\nfor i, (state_name, result) in enumerate(final_results.groupby('state')):\n    plot_rt(result, axes.flat[i], state_name)\n\nfig.tight_layout()\nfig.set_facecolor('w')","8eefdf3d":"# Uncomment the following line if you'd like to export the data\nfinal_results.to_csv('rt_India.csv')","9bae4383":"Nxt a function is created to calculate the confidence interval of the $R_t$ estimates","158ee220":"## Context\n\nThis notebook is derived from the work shared by Instagram co-founder Kevin Systrom on their [github page](https:\/\/github.com\/k-sys\/covid-19\/blob\/master\/Realtime%20R0.ipynb) \n\nIt uses a Bayesian approach to calculate the effective reproduction number. This is based on the work of [Bettencourt & Ribeiro](https:\/\/journals.plos.org\/plosone\/article?id=10.1371\/journal.pone.0002185) \n\nThe effective reproduction number $R_t$ is the number of people who get infected per infectious person at time $t$\nIt's an useful measure to control the epidemic at a local level. \n\nWhen $R >> 1$ then the epidemic will infect a large percentage of the population. But if it's brought down such that $R << 1$ then it dies out. \n\n## Data\n\nData is taken from covid warriors [covid19india.org](https:\/\/api.covid19india.org\/csv\/)\n\n## Conclusions\n\n**Overall states (incl. Maharashtra & Delhi) are showing a falling trend**\n\nHowever these numbers should be taken with caution (??) check the graph for Karnataka, where $R_t$ was below 1 , but since has crept above the *benchline* of **1.0** . \n\n\n\n## Assumptions & Constraints\n1. We are calculating the $R_t$ value based on *reported* new cases. Any discrepancies in those values will have an impact on the calculated $R_t$ \n2. Number of cases infected (actual infections) in the past 4-7 days may not be reported, hence those numbers are not reflected in the caluations\n3. Smoothing approach (rolling) used may be contentious. See discussion [issue](https:\/\/github.com\/k-sys\/covid-19\/issues\/30)\n4. Initial high values of $R$ was because testing intensity had increased, so there were a huge spike in number of infections. ie. *The numbers are high JUST because high number of patients were tested* \n5. Assumptions are based on statistical inference.","fe25c860":"Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that.\n\nAlso, case reporting is very erratic based on testing backlogs, etc. To get the best view of the 'true' data we can, I've applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you'd imagine the real world process is not nearly as stochastic as the actual reporting.","b5bd47a5":"From here we will try to replicate the calculation of $R_t$ for India & it's states","f3441366":"## Some quick visualizations\n- new cases per day (across the country\n- age distribution\n- gender distribution\n- case counts grouped by states"}}