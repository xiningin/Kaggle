{"cell_type":{"5454da90":"code","c2115f18":"code","dbf25f1f":"code","1ade20b7":"code","9fb02513":"code","d7a45407":"code","35669d8f":"code","7b4fbbec":"code","efc08260":"code","5ef68e59":"code","3f98eef4":"code","12105189":"markdown","e544a617":"markdown","e8a24ab8":"markdown","ab142c02":"markdown","ca1284e4":"markdown","b174b76a":"markdown","50bcdfb2":"markdown","8dceb4a5":"markdown","4d66fb7a":"markdown","c7e69492":"markdown","7109f2c7":"markdown","35b55af8":"markdown","a9e663b4":"markdown","b8b5d187":"markdown","4033b84c":"markdown","adfef3f8":"markdown","a42477fd":"markdown"},"source":{"5454da90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c2115f18":"! pip install fpgrowth_py","dbf25f1f":"from fpgrowth_py import fpgrowth\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# here we will import the libraries used for machine learning\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, data manipulation as in SQL\nimport matplotlib.pyplot as plt # this is used for the plot the graph \nimport seaborn as sns # used for plot interactive graph\n%matplotlib inline\nimport time\n\ndata=pd.read_csv('\/kaggle\/input\/ecommerce-data\/data.csv') # import from a csv file\ndata['GroupPrice']=data['Quantity']*data['UnitPrice']\ndata=data.dropna()\nprint('The dimensions of the dataset are : ', data.shape)\nprint('---------')\ndata.head()","1ade20b7":"liste= data['StockCode'].unique() \nstock_to_del=[]\nfor el in liste:\n    if el[0] not in ['1','2','3','4','5','6','7','8','9','10']: # products corresponding to gifts. \n        stock_to_del.append(el)\n\ndata=data[data['StockCode'].map(lambda x: x not in stock_to_del)] # delete these products\n\nbasket = data.groupby(['InvoiceNo','CustomerID']).agg({'StockCode': lambda s: list(set(s))}) # grouping product from the same invoice. \n\nprint('Dimension of the new grouped dataset : ', basket.shape)\nprint('----------')\nbasket.head()","9fb02513":"a=time.time()\nfreqItemSet, rules = fpgrowth(basket['StockCode'].values, minSupRatio=0.005, minConf=0.3)\nb=time.time()\nprint('time to execute in seconds : ',b-a, ' s.')\nprint('Number of rules generated : ', len(rules))\n\nassociation=pd.DataFrame(rules,columns =['basket','next_product','proba']) \nassociation=association.sort_values(by='proba',ascending=False)\nprint('Dimensions of the association table are : ', association.shape)\nassociation.head(10)","d7a45407":"def compute_next_best_product(basket_el):\n    \"\"\"\n    parameter : basket_el = list of consumer basket elements\n    return : next_pdt, proba = next product to recommend, buying probability. Or (0,0) if no product is found. \n            \n    \n    Description : from the basket of a user, returns the product to recommend if it was not found \n    in the list of associations of the table associated with the FP Growth model. \n    To do this, we search in the table of associations for the product to recommend from each \n    individual product in the consumer's basket. \n    \n    \"\"\"\n    \n    for k in basket_el: # for each element in the consumer basket\n            k={k}\n            if len(association[association['basket']==k].values) !=0: # if we find a corresponding association in the fp growth table\n                next_pdt=list(association[association['basket']==k]['next_product'].values[0])[0] # we take the consequent product\n                if next_pdt not in basket_el : # We verify that the customer has not previously purchased the product\n                    proba=association[association['basket']==k]['proba'].values[0] # Find the associated probability. \n                    return(next_pdt,proba)\n    \n    return(0,0) # return (0,0) if no product was found. ","35669d8f":"def find_next_product(basket):\n    \"\"\"\n    Parameter : basket = consumer basket dataframe\n    Return : list_next_pdt, list_proba = list of next elements to recommend and the buying probabilities associated.\n    \n    description : Main function that uses the one above. For each client in the dataset we look for a corresponding \n    association in the Fp Growth model table. If no association is found, we call the compute_next_best_product \n    function which searches for individual product associations.\n    If no individual ssociations are found, the function returns (0,0).\n    \n    \"\"\"\n    n=basket.shape[0]\n    list_next_pdt=[]\n    list_proba=[]\n    for i in range(n): # for each customer\n        el=set(basket['StockCode'][i]) # customer's basket\n        if len(association[association['basket']==el].values) !=0: # if we find a association in the fp growth table corresponding to all the customer's basket.\n            next_pdt=list(association[association['basket']==el]['next_product'].values[0])[0] # We take the consequent product\n            proba=association[association['basket']==el]['proba'].values[0] # Probability associated in the table\n            list_next_pdt.append(next_pdt)\n            list_proba.append(proba)\n\n\n        elif len(association[association['basket']==el].values) ==0: # If no antecedent to all the basket was found in the table\n            next_pdt,proba= compute_next_best_product(basket['StockCode'][i]) # previous function\n            list_next_pdt.append(next_pdt)\n            list_proba.append(proba)\n            \n    return(list_next_pdt, list_proba)","7b4fbbec":"a=time.time()\nlist_next_pdt, list_proba= find_next_product(basket) \nb=time.time()\nprint(b-a)\nbasket['Recommended Product']=list_next_pdt # Set of recommended products\nbasket['Probability']=list_proba # Set of rprobabilities associated\nbasket.head()","efc08260":"basket=basket.rename(columns = {'StockCode': 'Customer basket'})\ndata_stock=data.drop_duplicates(subset =\"StockCode\", inplace = False)\nprices=[]\ndescription_list=[]\nfor i in range(basket.shape[0]):\n    stockcode=basket['Recommended Product'][i]\n    probability= basket['Probability'][i]\n    if stockcode != 0:\n        unitprice=data_stock[data_stock['StockCode']==stockcode]['UnitPrice'].values[0]\n        description=data_stock[data_stock['StockCode']==stockcode]['Description'].values[0]\n        estim_price=unitprice*probability\n        prices.append(estim_price)\n        description_list.append(description)\n        \n    else :\n        prices.append(0)\n        description_list.append('Null')\n\n    \n\nbasket['Price estimation']=prices \nbasket['Product description']=description_list \nbasket = basket.reindex(columns=['Customer basket','Recommended Product','Product description','Probability','Price estimation'])\nbasket.head()","5ef68e59":"print('On average, the recommendation system can predict in ',basket['Probability'].mean() *100,  '% of the cases the next product that the customer will buy.')","3f98eef4":"print('With only 1 single product proposed, the recommendation system can generate a turnover in this case up to : ', round(basket['Price estimation'].sum()), ' euros.') ","12105189":"# 3. Data preprocessing","e544a617":"* #### Removal of products that correspond to gifts offered by the company to customers. We keep only the products that the customer has actually put in his shopping cart. \n\n* #### We group all the products a customer has purchased together. Each line corresponds to a transaction composed of the invoice number, the customer ID and all the products purchased.\n","e8a24ab8":"* #### Calculation of estimated prices from the recommendations made and display of the final table with the association (customer, product recommended)","ab142c02":"# 5. Computation for each customer","ca1284e4":"**Variables explanation :**\n\n* **InvoiceNo** : Invoice number corresponding to the product purchase.\n* **StockCode** : Identifier of the purchased product. Each identifier is different. \n* **Description** : Description of the purchased product. \n* **Quantity** : Quantity of product purchased\n* **InvoiceDate** : Date of invoice, from 01\/12\/2010 to 09\/12\/2011 . \n* **UnitPrice** : Price of one product. \n* **CustomerID** : Identifier of the customer. Each identifier is different.  \n* **Country** : Country where the customer place the order. \n* **GroupPrice** : Price of all the same products purchased. Quantity x UnitPrice \n\n\n","b174b76a":"The objective of the system developed below is to **anticipate the customers' needs** of an online store with the development of a recommendation system.\n\nA recommandation system enables to **personalize** the products' recommendation according to the needs of each customer. \n\nSuch a system serves the interests of both **the customer and the company**. \n\n* **For the customers :** This makes it easier to find products that interest them. Their search for the next product to buy is facilitated, and their user experience is therefore significantly improved. Customers are therefore more satisfied.\n\n* **For the company :** As far as the company is concerned, a recommendation engine allows to improve the loyalty of its customers. As they are satisfied with the products they buy, they are more likely to collaborate with the company. The churn rate decreases, allowing the company to reduce its costs related to the acquisition of new customers. And of course, the company sees its turnover increase with the proposition of new products to the customers with cross selling.\n\nThe recommendation engine developed is therefore based on a public dataset proposed by [The UCI Machine Learning Repository](http:\/\/archive.ics.uci.edu\/ml\/index.php) . This dataset contains the transaction history of an online store over 1 year.\n\nThe goal of the system is therefore to propose 1 product to each customer based on their current shopping basket that maximizes the probability of purchase. The final table is composed of the customer identifiers associated with the product that is proposed to him and the associated purchase probability. \n","50bcdfb2":"# 1. Set up environment ","8dceb4a5":"# 7. Conclusion ","4d66fb7a":"Among a product catalog of more than 3000 items, a simple model based on association rules can predict in **35%** of the cases the next product that the customer will buy and thus generate significant additional revenue. \n\nThe advantage of this model is that it offers very good accuracy while being both easy to implement and explainable. Indeed, unlike some other artificial intelligence models that can seem like \"black boxes\" because they are difficult to explain, the results of the Fp Growth model are understandable because you will find all the rules specific to your business. For example, if you know that most of the time your customers buy product A and product B together, you will see it immediately in your association table ! \n","c7e69492":"# Recommender System on E-commerce Data using Association Rules\n## Pierre-Louis Danieau","7109f2c7":"#### Anticipation of customer needs :","35b55af8":"# 6. Results","a9e663b4":"# 2. Import some libraries & data transformation","b8b5d187":"Fp Growth is a Data Mining model based on **association rules**.\n\nThis model allows, from a transaction history, to determine the set of most frequent association rules in the dataset. To do so, it needs as input parameter the set of transactions composed of the product baskets the customers have already purchased. \n\nGiven a dataset of transactions, the first step of FP-growth is to calculate item frequencies and identify frequent items.\n\nThe second step of FP-growth uses a suffix tree (FP-tree) structure to encode transactions without generating candidate sets explicitly, which are usually expensive to generate. After the second step, the frequent itemsets can be extracted from the FP-tree and the model returns a set of product association rules like the example below: \n\n            {Product A + Product B} --> {Product C} with 60% probability\n            {Product B + Product C} --> {Product A + Product D} with 78% probability\n            {Prodcut C} --> {Product B + Product D} with 67% probability\n            etc.\n            \nTo establish this table, the model needs to be provided with 2 hyperparameters :\n* **minSupRatio** : minimum support for an itemset to be identified as frequent. For example, if an item appears 3 out of 5 transactions, it has a support of 3\/5=0.6.\n* **minConf** :minimum confidence for generating Association Rule. Confidence is an indication of how often an association rule has been found to be true. For example, if in the transactions itemset X appears 4 times, X and Y co-occur only 2 times, the confidence for the rule X => Y is then 2\/4 = 0.5. The parameter will not affect the mining for frequent itemsets, but specify the minimum confidence for generating association rules from frequent itemsets.\n\nOnce the association rules have been calculated, all you have to do is apply them to the customers' product baskets. ","4033b84c":"# 4. Association Rules modelling : Fp growth algorithm","adfef3f8":"#### Turnover generated :","a42477fd":"### Load package *fpgrowth_py* for association rules"}}