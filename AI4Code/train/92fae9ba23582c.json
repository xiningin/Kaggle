{"cell_type":{"2a0c243b":"code","5a28b342":"code","c60ad77e":"code","b892becf":"code","13603b85":"code","93093e68":"code","24f7f407":"code","cbe3cfbe":"code","87fdc69c":"code","1ec0ee7e":"code","60005352":"code","025bccf9":"code","fbfe5f4a":"code","2712fcb5":"code","ae4ad186":"code","3eacc9f3":"code","3ebbfefb":"code","81a8138d":"code","338e3d3f":"code","54078905":"markdown","fda1d3e6":"markdown","9c33c396":"markdown","4a4cbd8e":"markdown","cf912b7d":"markdown","2908e2b3":"markdown","52b741cc":"markdown","d06420b3":"markdown","991636ff":"markdown","1e2c95cb":"markdown","5170ce53":"markdown"},"source":{"2a0c243b":"#Library\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport datetime\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\npy.init_notebook_mode(connected = True)\nimport plotly.express as px\nimport altair as alt\n\nalt.data_transformers.disable_max_rows()","5a28b342":"df = pd.read_csv('..\/input\/melbourne-housing-snapshot\/melb_data.csv')\nprint('Dataset has ',df.shape[0],' records and ',df.shape[1], ' columns' )\nprint(' ')\ndf.head() # head shows the first 5 rows by default","c60ad77e":"print('Before Rename: ',df.columns)\ndf = df.rename(columns = {'SellerG':'Real_Estate_Agent'})\n# Column names in the dataset\nprint('After Rename: ',df.columns)","b892becf":"print('Initial Type values: ',df.Type.unique())\ndf.Type.replace({'h':'house','u':'unit','t':'town_house'}, inplace = True)\nprint('The more representative values: ',df.Type.unique())\nprint(' ')\ndf['Type'].value_counts(normalize = True)","13603b85":"#Categorical Data\ndf['Type'] = df['Type'].astype('category')\ndf['Suburb'] = df['Suburb'].astype('category')\ndf['Postcode'] = df['Postcode'].astype('category')\ndf['Regionname'] = df['Regionname'].astype('category')\ndf['Real_Estate_Agent'] = df['Real_Estate_Agent'].astype('category')\ndf['Type'] = df['Type'].astype('category')\ndf['Method'] = df['Method'].astype('category')","93093e68":"# finding the columns with missing data\npd.isnull(df).any(axis = 0) ","24f7f407":"df.isnull().sum()","cbe3cfbe":"df.drop(columns = ['YearBuilt', 'BuildingArea', 'CouncilArea'], inplace = True) #Dropped this column since this data point was poorly sourced","87fdc69c":"#df = df.fillna(df.mean())  # fill with the mean of the column\n# df = df.fillna(df.max())  # fill with the max of the column\ndf['Car'] = df['Car'].fillna(df['Car'].mean())    # setting missing values to zero\npd.isnull(df).any(axis = 0)\n","1ec0ee7e":"#Integer Data\ndf['Car'] = df['Car'].astype('int64')\ndf['Rooms'] = df['Rooms'].astype('int64')\ndf['Bedroom2'] = df['Bedroom2'].astype('int64')\ndf['Bathroom'] = df['Bathroom'].astype('int64')\ndf['Price'] = df['Price'].astype('float64')","60005352":"print(df.Date.dtypes)  # Columns with mixed types are stored with the\u00a0object dtype.\ndf['Date'] = pd.to_datetime(df['Date'])\ndf['Date'].dtypes","025bccf9":"#extracting month\ndf['Month'] = df['Date'].dt.month\ndf.head()","fbfe5f4a":"# Standardizing the text formats. \ndf['Address'].str.upper()\ndf['Type'] = df['Type'].str.capitalize()","2712fcb5":"# Hovering on each of the points displays the number of rooms and the region name\ndf_alt = df[['Type','Regionname','Price','Distance','Rooms','Bathroom','Car','Landsize']]\n\nimport altair as alt\n\nalt.data_transformers.disable_max_rows()\n(alt.\n  Chart(df_alt).\n  mark_circle(size=40).\n  encode(x='Price', y='Distance', color='Type', tooltip=   \n  ['Rooms','Regionname']).\n  properties(height=400, width=500).\n  interactive())","ae4ad186":"## Filterred to only display Town houses\n(alt.\n  Chart(df_alt).\n  mark_circle(size=50).\n  encode(x='Price', y='Distance', color='Type', tooltip=   \n  ['Rooms','Landsize']).\n  transform_filter(alt.FieldEqualPredicate(field='Regionname', equal='Western Metropolitan')).\n  properties(height=400, width=500))","3eacc9f3":"(alt.\n  Chart(df_alt).\n  mark_bar().\n  encode(x='Regionname', y='mean(Price):Q').\n  properties(height=300, width=400))","3ebbfefb":"selection = alt.selection_multi(fields=['Regionname'])\nfirst = (alt.\n          Chart().\n          mark_circle(size=50).\n          encode(x='Price', y='Distance', color='Type', tooltip=   \n  ['Rooms','Landsize']).\n          transform_filter(selection).\n          properties(height=200, width=300).\n  interactive())\nsecond = (alt.\n           Chart().\n           mark_bar().\n           encode(\n           x='Regionname', y='mean(Price):Q',\n           color=alt.condition(selection, alt.value('steelblue'),   \n                 alt.value('lightgray'))\n           ).\n           properties(height=200, width=200).\n           add_selection(selection))\nalt.hconcat(first, second, data=df_alt)","81a8138d":"selection = alt.selection(type='interval')\n\nplt1 = (alt.\n         Chart(df_alt).\n         mark_circle(size=50).\n         encode(\n          x='Price', y='Distance',\n          color = alt.condition(selection, 'Type',  \n          alt.value('lightgray'))\n         ).properties(height=200, width=300).\n         add_selection(selection))\nplt2 = (alt.\n         Chart(df_alt).\n         mark_bar().\n         encode(x='Regionname', y='count(Regionname):Q',color = 'Type').\n         properties(height=200, width=200).\n         transform_filter(selection))\n\nplt1 | plt2","338e3d3f":"selection = alt.selection_multi(fields=['Type'], bind='legend')\n\n(alt.\n  Chart(df_alt).\n  mark_circle(size=50).\n  encode(\n  x='Price', y='Distance',\n  color= alt.Color('Type:N',\n  scale=alt.Scale(scheme='Category10')),\n  opacity=alt.condition(selection, alt.value(1), alt.value(0.01))\n  ).\n  properties(height=400, width=500).\n  add_selection(selection))","54078905":"### Interactive plots and dynamic filtering with Altair\n\n#### Creating interactive visualization with Altair is straightforward and efficient given its clean and easy to understand syntax","fda1d3e6":"#### We can also use legends to filter the plot","9c33c396":"## We can bind the two previous plots in a way that the scatter plot is updated according to the selected bar.\n#### The plot on the left will be filtered when you click on each of the bars in the right plot. ","4a4cbd8e":"### **Data type conversions** _ to categorical","cf912b7d":"### Renaming a column","2908e2b3":"### Handling missing values","52b741cc":"#### Alternatively, we can select a part of the scatter plot to filter the bar chart","d06420b3":"### **Data type conversions** _ to date","991636ff":"### **Data type conversions** _ to integer","1e2c95cb":"### Interactive Visualization of Housing Data in Melbourne\n![](https:\/\/cdn.britannica.com\/64\/190464-050-B74E1FD9\/view-central-business-district-Melbourne-train-station.jpg)","5170ce53":"#### A bar plot that shows the average Price of each of the regions"}}