{"cell_type":{"00794570":"code","939315aa":"code","4a5f966e":"code","518ada90":"code","7b826613":"code","8887ff79":"code","958d1561":"code","41502f8d":"code","52d00082":"code","18c37a4b":"code","186db680":"code","954fed48":"code","61cd9bb3":"code","9ef02ab7":"code","98852956":"code","a1666fed":"code","088b1f42":"code","11be63ff":"code","b35afbd1":"code","b8a6c76d":"code","98bf561d":"code","eb7cbd7e":"code","16c931c7":"code","8664311a":"code","add09981":"code","25d39d8d":"code","6b41ec2b":"code","2a7a5aa1":"code","67a8455e":"code","44472e5f":"code","bb98866a":"code","d88fd575":"code","3912cadf":"code","53da0fdb":"code","25dd3b63":"code","808c9abe":"code","33c1b8a1":"code","50d4bfeb":"code","6e611f2c":"code","a171ccf3":"code","aaf99b2a":"code","5f299baf":"code","41e96a92":"code","7fe72d96":"code","b20f810f":"code","6a261e75":"markdown","7aeba0c3":"markdown","bb243811":"markdown","0b0a5f45":"markdown","ef3347b6":"markdown","feae3c06":"markdown","7fa88515":"markdown","88402c2f":"markdown","e72271dc":"markdown","3586b103":"markdown","359e4183":"markdown","361cb696":"markdown","13522030":"markdown","b96f4d90":"markdown","ddfbcba1":"markdown","b4741a3d":"markdown"},"source":{"00794570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","939315aa":"#importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()","4a5f966e":"#Reading the csv file\ndatam=pd.read_csv(os.path.join(dirname, filename))\ndatam","518ada90":"datam.columns","7b826613":"# These are how I assume the columns means\n# sl_no = Serial Number\n# gender = Male or Female\n# ssc_p = senior sceondary percentage (10)\n# ssc_b = senior secondary board\n# hsc_p = higher secondary percetage (12)\n# hsc_b = higher secondary board (12)\n# hsc_s = higher secondary stream (12)\n# degree_p = degree percentage (UG)\n# degree_t = degree type (UG)\n# workex = work experience\n# etest_p = its a test percentage\n# specialisation = the specialisation you are doing in MBA\n# mba_p = MBA Percentage\n# status = are you placed or not\n# salary = package ","8887ff79":"print(\"dataset size:{0}\\ndataset dimension: {1}\\ndataset Shape{2}\".format(datam.size, datam.ndim, datam.shape))","958d1561":"for i in datam:\n    print(\"{0}={1}\".format(i,datam[i].unique()))","41502f8d":"datam[\"salary\"]=datam['salary'].fillna((-1)) #column.fillna((value)) to replace nan with value in that column","52d00082":"datam[\"salary\"].unique()","18c37a4b":"plt.hist(datam[\"sl_no\"], edgecolor=\"#7FFFD4\")\nplt.title(\"Serial Number Histogram\")","186db680":"sns.countplot(datam['gender'], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Gender Countplot\")","954fed48":"plt.hist(datam[\"ssc_p\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Senior Seconday Percentage Histogram\")","61cd9bb3":"sns.countplot(datam[\"ssc_b\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Senior Seconday Board Countplot\")","9ef02ab7":"plt.hist(datam[\"hsc_p\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Higher Seconday Percentage Histogram\")","98852956":"sns.countplot(datam[\"hsc_b\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Higher Seconday Board Countplot\")","a1666fed":"sns.countplot(datam[\"hsc_s\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Higher Seconday Stream Countplot\")","088b1f42":"plt.hist(datam[\"degree_p\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Degree percentage Histogram\")","11be63ff":"sns.countplot(datam[\"degree_t\"], color=\"#FF4040\", edgecolor=\"#00008B\")\nplt.title(\"Degree Type countplot\")","b35afbd1":"#lets make a copy of dataset so that we have an original intact\ndatam1=datam.copy(deep=True)","b8a6c76d":"\"\"\"  #Task 1:\n\n1) Develop an estimated multiple linear regression equation with mbap as response variable \nand sscp & hscp as the two predictor variables. \nInterpret the regression coefficients and check whether they are significant based on the summary output \"\"\"","98bf561d":"\"\"\" #Task 2\n2) Estimate a multiple regression equation for each of the below scenarios and based on the model\u2019s R-square comment which model is better. \n(i) Use mbap as outcome variable and sscp & degreep as the two predictor variables.\n(ii) Use mbap as outcome variable and hscp & degreep as the two predictor variables. \n\"\"\"","eb7cbd7e":"\"\"\" #Task 3\n3) Show the functional form of a multiple regression model. \nBuild a regression model with mbap as dependent variable and sscp, hscp and degree_p as three independent variables. \nDivide the dataset in the ratio of 80:20 for train and test set (set seed as 1001) and use the train set to build the model. \nShow the model summary and interpret the p-values of the regression coefficients. \nRemove any insignificant variables and rebuild the model. \nUse this model for prediction on the test set and \nshow the first few observations\u2019 actual value of the test set in comparison to the predicted value.\"\"\"","16c931c7":"datam1.plot('ssc_p','mba_p',color=\"#CD1076\",style=\"*\")\nplt.title(\"Relation b\/w Senior Secondary Percentage & MBA Percentage\")\nplt.xlabel(\"Senior Secondary Percentage\")\nplt.ylabel(\"MBA Percentage\")\nplt.show()","8664311a":"datam1.plot('hsc_p','mba_p',color=\"#CD1076\",style=\"+\")\nplt.title(\"Relation b\/w Higher Secondary Percentage & MBA Percentage\")\nplt.xlabel(\"Higher Secondary Percentage\")\nplt.ylabel(\"MBA Percentage\")\nplt.show()","add09981":"from sklearn.linear_model import LinearRegression\nfrom scipy import stats\nfrom statsmodels.formula.api import ols","25d39d8d":"#First we will use LinearRegression\nx=datam1[['ssc_p','hsc_p']]\ny=datam1['mba_p']","6b41ec2b":"reg=LinearRegression()\nresult=reg.fit(x,y)","2a7a5aa1":"result.coef_","67a8455e":"result.intercept_","44472e5f":"#Now we will use statsmodel to do the same\nres=ols(formula=\"mba_p ~ ssc_p+hsc_p\", data=datam1).fit()\nres.summary()","bb98866a":"#ploting the residual plot\nf, axes = plt.subplots(2, figsize=(7, 7), sharex=True)\nsns.residplot(datam1['ssc_p'],y,lowess=True, ax=axes[0])\nsns.residplot(datam1['hsc_p'],y,lowess=True,ax=axes[1])","d88fd575":"sns.regplot(datam1['degree_p'], datam1['mba_p'])\nplt.title(\"Relation b\/w Degree Percentage & MBA Percentage\")\nplt.xlabel(\"Degree Percentage\")\nplt.ylabel(\"MBA Percentage\")\nplt.show()","3912cadf":"res1=ols(formula=\"mba_p ~ ssc_p+degree_p\", data=datam1).fit()\nres1.summary()","53da0fdb":"res2=ols(formula=\"mba_p ~ hsc_p+degree_p\", data=datam1).fit()\nres2.summary()","25dd3b63":"print(\"R2 value of res1(ssc_p & degree_P)= {0}\".format(res1.rsquared))\nprint(\"R2 value of res2(hsc_p & degree_P)= {0}\".format(res2.rsquared))","808c9abe":"# importing necessary libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","33c1b8a1":"#making independet & dependent variables\nX=datam1[['ssc_p','hsc_p','degree_p']]\nY=datam1['mba_p']","50d4bfeb":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1001)","6e611f2c":"Regress=LinearRegression()\nRegress.fit(X_train, Y_train)","a171ccf3":"Regress.coef_","aaf99b2a":"Regress.intercept_","5f299baf":"ypredict=Regress.predict(X_test)","41e96a92":"# now lets compare\ndatapredict = pd.DataFrame({'Actual': Y_test, 'Predicted': ypredict})\ndatapredict","7fe72d96":"#As we have so many values, we will be showing Actual VS Predicted of 1st 10\ndatapredict1=datapredict.head(10)\ndatapredict1","b20f810f":"datapredict1.plot(kind='barh', figsize=(15,7))","6a261e75":"## Task 2.1 mba_p on ssc_p & degree_p","7aeba0c3":"### Here mba_p is a dependent variable and ssc_p & hsc_p are independent. So 1st we will plot scatter plot to see, wherther they have some sort of relation or not","bb243811":"# Task 2","0b0a5f45":"#### By now we saw that our model is somewhat right, as residual plot is also good.","ef3347b6":"#### As we can see that res1 is having bigger R2-value and hence it is more appropriate & better","feae3c06":"#### Well, there is some sort of relation there, thats for sure. So now we will try to build the model (Not so linear though, still)","7fa88515":"## Task 2.2 mba_p on hsc_p & degree_p","88402c2f":"# Task 1","e72271dc":"# Task 3","3586b103":"### Here mba_p is dependent variable, ssc_p, hsc_p and degree_p are independent. Above, we have seen the relation of ssc_p & hsc_p with mba_p. Now we will see the relation b\/w degree_p & mba_p","359e4183":"# General Exploration","361cb696":"#### Well, there is some sort of relation there, thats for sure","13522030":"## Task 2.3 Comapring R-Value from both the models","b96f4d90":"#### In salary, there's a type called nan, which will hinder our process, so we will be replacing every nan by -1, where -1 means no salary","ddfbcba1":"## here we have mba_p as dependent variable & ssc_p, hsc_p & degree_p as independent variables","b4741a3d":"# General Exploration"}}