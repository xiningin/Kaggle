{"cell_type":{"ac868606":"code","06c1a54a":"code","664d7a58":"code","b7af1ccb":"code","7abacfa6":"code","d53f42b0":"code","4bf49ca6":"code","c14309f4":"code","02f9fe8c":"code","97b7c2c8":"code","ae5cc24c":"markdown","f9de1eed":"markdown","38d8cf57":"markdown","780c4260":"markdown","31970d94":"markdown","4d48cfdc":"markdown","8ef94174":"markdown","b75c0a4c":"markdown","4fe63b05":"markdown","c9f5412e":"markdown","3e5c2194":"markdown","b4df0be2":"markdown","0f8f995e":"markdown"},"source":{"ac868606":"import pandas as pd\nimport numpy as np\nimport os\n\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Don't Show Warning Messages\nimport warnings\nwarnings.filterwarnings('ignore')","06c1a54a":"len(os.listdir('..\/input\/bbbc005_v1_images\/BBBC005_v1_images'))","664d7a58":"len(os.listdir('..\/input\/bbbc005_v1_ground_truth\/BBBC005_v1_ground_truth'))","b7af1ccb":"# get a list of files in each folder\n\nimg_list = os.listdir('..\/input\/bbbc005_v1_images\/BBBC005_v1_images')\nmask_list = os.listdir('..\/input\/bbbc005_v1_ground_truth\/BBBC005_v1_ground_truth')","7abacfa6":"# check folder BBBC005_v1_images\n\nfor item in img_list:\n    name = item.split('.')\n    extension = name[1]\n    \n    if extension != 'TIF':\n        print(item)","d53f42b0":"# check folder BBBC005_v1_ground_truth\n\nfor item in mask_list:\n    name = item.split('.')\n    extension = name[1]\n    \n    if extension != 'TIF':\n        print(item)","4bf49ca6":"\n# create a dataframe\ndf_images = pd.DataFrame(img_list, columns=['image_id'])\n\n# filter out the non image file that's called .htaccess\ndf_images = df_images[df_images['image_id'] != '.htaccess']\n\n\n\n# Example file name: SIMCEPImages_A13_C53_F1_s23_w2.TIF\n\n\n# ======================================================\n# Add a column showing how many cells are on each image\n# ======================================================\n\ndef get_num_cells(x):\n    # split on the _\n    a = x.split('_')\n    # choose the third item\n    b = a[2] # e.g. C53\n    # choose second item onwards and convert to int\n    num_cells = int(b[1:])\n    \n    return num_cells\n\n# create a new column called 'num_cells'\ndf_images['num_cells'] = df_images['image_id'].apply(get_num_cells)\n\n\n\n# ================================================\n# Add a column indicating if an image has a mask.\n# ================================================\n\n# Keep in mind images and masks have the same file names.\n\ndef check_for_mask(x):\n    if x in mask_list:\n        return 'yes'\n    else:\n        return 'no'\n    \n# create a new column called 'has_mask'\ndf_images['has_mask'] = df_images['image_id'].apply(check_for_mask)\n\n\n\n# ===========================================================\n# Add a column showing how much blur was added to each image\n# ===========================================================\n\ndef get_blur_amt(x):\n    # split on the _\n    a = x.split('_')\n    # choose the third item\n    b = a[3] # e.g. F1\n    # choose second item onwards and convert to int\n    blur_amt = int(b[1:])\n    \n    return blur_amt\n\n# create a new column called 'blur_amt'\ndf_images['blur_amt'] = df_images['image_id'].apply(get_blur_amt)\n","c14309f4":"df_images.head(10)","02f9fe8c":"path_img = '..\/input\/bbbc005_v1_images\/BBBC005_v1_images\/'\npath_mask = '..\/input\/bbbc005_v1_ground_truth\/BBBC005_v1_ground_truth\/'\n\n\n# set up the canvas for the subplots\nplt.figure(figsize=(30,10))\n\n# Our subplot will contain 2 rows and 4 columns\n# plt.subplot(nrows, ncols, plot_number)\nplt.subplot(2,4,1)\n\n# plt.imread reads an image from a path and converts it into an array\n\n# starting from 1 makes the code easier to write\nfor i in range(1,9):\n    \n    plt.subplot(2,4,i)\n    \n    # select the image\n    image = img_list[i]\n    \n    # display the image\n    plt.imshow(plt.imread(path_img + image))\n    plt.axis('off')\n","97b7c2c8":"path_img = '..\/input\/bbbc005_v1_images\/BBBC005_v1_images\/'\npath_mask = '..\/input\/bbbc005_v1_ground_truth\/BBBC005_v1_ground_truth\/'\n\nimage_1 = 'SIMCEPImages_A13_C53_F1_s23_w2.TIF'\nimage_2 = 'SIMCEPImages_A04_C14_F1_s20_w2.TIF'\n\n# set up the canvas for the subplots\nplt.figure(figsize=(30,20))\nplt.axis('Off')\n\n# Our subplot will contain 2 rows and 4 columns\n# plt.subplot(nrows, ncols, plot_number)\nplt.subplot(2,2,1)\nplt.imshow(plt.imread(path_img + image_1))\nplt.axis('off')\n\nplt.subplot(2,2,2)\nplt.imshow(plt.imread(path_mask + image_1), cmap='gray')\nplt.axis('off')\n\nplt.subplot(2,2,3)\nplt.imshow(plt.imread(path_mask + image_2))\nplt.axis('off')\n\nplt.subplot(2,2,4)\nplt.imshow(plt.imread(path_mask + image_2), cmap='gray')\nplt.axis('off')\n\nplt.show()\n","ae5cc24c":"<hr>","f9de1eed":"## Display 8 Images","38d8cf57":"If you're interested in learning how to deploy a model online as a web app using Tensorflow.js, this kernel is a good guide:<br>\nhttps:\/\/www.kaggle.com\/vbookshelf\/malaria-cell-analyzer-tensorflow-js-web-app\n\nKeep in mind the web browsers don't support TIF images. Therefore, you'll need to train your model using png or jpg images if you plan to deploy it as a web app. Users will need to submit their images in one of these formats.\n\nI hope you enjoy working with this dataset. Good luck.","780c4260":"We see that each folder has a non image file called .htaccess","31970d94":"## Put all image file names into a dataframe","4d48cfdc":"In this quick kernel we will:\n- check the number of files available\n- extract useful info info from the file names\n- put all info into a dataframe and,\n- display some cell and mask images.\n\nLet's get started.","8ef94174":"## Display 2 images and their masks","b75c0a4c":"## Check for Non Image Files","4fe63b05":"We notice that each folder has one file more than we expected.","c9f5412e":"## Conclusion","3e5c2194":"We will also determine:\n- The number of cells on each image\n- Does an image have a mask?\n- The blur amount added to each image","b4df0be2":"## Introduction","0f8f995e":"## Check the number of images and masks available"}}