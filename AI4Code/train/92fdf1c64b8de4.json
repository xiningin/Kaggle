{"cell_type":{"9d38a1bd":"code","616b61fe":"code","24bb6ea4":"code","b45675e4":"code","8755ef47":"code","6e4a30e8":"code","22710ab1":"code","db58c243":"code","c911dae3":"markdown","7b51c0ae":"markdown","99ab4bd7":"markdown","78841ee7":"markdown","37740200":"markdown","55bcab75":"markdown","c6eadd88":"markdown","ebbe0bad":"markdown"},"source":{"9d38a1bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","616b61fe":"import matplotlib.pyplot as plt\n\ndata1 = pd.read_csv('..\/input\/astrax-21-enigma-problem-1\/train.csv')\ny_train = np.array(data1['labels'])\nX_train = data1.drop('labels', axis = 1)\nX_train = X_train.drop('title', axis =1)\n\nimport re\nimport nltk\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\ncorpus = []\nfor i in range(500):\n    review = re.sub('[^a-zA-Z]',' ',str(X_train['text'][i]))\n    review = review.lower()\n    review = review.split()\n    \n    ps = PorterStemmer()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    X_train['text'][i]=review\n    ","24bb6ea4":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX_train = cv.fit_transform(X_train['text']).toarray()\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)","b45675e4":"\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nclassifier.fit(X_train, y_train)","8755ef47":"X_test = pd.read_csv('..\/input\/astrax-21-enigma-problem-1\/test.csv') \n\nX_test = X_test.drop('title', axis =1)\n\nfor i in range(703):\n    review = re.sub('[^a-zA-Z]',' ',str(X_test['text'][i]))\n    review = review.lower()\n    review = review.split()\n    \n    ps = PorterStemmer()\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    X_test['text'][i]=review\n    \nX_test = cv.transform(X_test['text']).toarray()\n","6e4a30e8":"y_pred = classifier.predict(X_test)\ny_pred = le.inverse_transform(y_pred)","22710ab1":"sub = pd.read_csv('..\/input\/astrax-21-enigma-problem-1\/sample_submission.csv') \n","db58c243":"\n\nsub.labels = y_pred\n\nsub.to_csv('.\/sub.csv', index = False)\n","c911dae3":"## Make Predictions","7b51c0ae":"## Convert labels to integer codes for processing","99ab4bd7":"## Prepare the test data","78841ee7":"# Read the sample subfile","37740200":"# If you find the notebook useful, don't forget to upvote it :)","55bcab75":"## Read Data and Prepare","c6eadd88":"## Making the submission","ebbe0bad":"## Fit a RF model for baseline"}}