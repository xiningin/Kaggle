{"cell_type":{"a0a04e49":"code","26812319":"code","302e0839":"code","2378d696":"code","8cfba2ba":"code","0aa0a813":"code","bba37eb3":"code","53ef52b8":"code","cc293c68":"code","82115058":"code","59c4a7fc":"code","d015dc30":"code","c66f42f2":"code","aef8e88f":"code","2cd57cf1":"code","ff32f876":"code","3aea2e94":"code","b0812735":"code","05506e80":"code","94a22a43":"code","d7f50114":"code","65e84ce8":"code","7e2bceb8":"code","7f9e3eb1":"code","a0d8d82c":"code","d07d1af5":"code","74e149c8":"code","30fb7716":"code","85eb371a":"code","e7d8e1ea":"code","81bf25b7":"code","ce5fdf90":"code","4ea5e160":"code","3c89198c":"code","d7a7e200":"code","4c81950b":"code","64a4d645":"code","8e2ffd07":"code","93635835":"code","c3dd482a":"code","2e56965b":"code","3233c2eb":"code","1204b50a":"markdown","6bf6b47d":"markdown","00a6e256":"markdown","6f9516d4":"markdown","d54e12b0":"markdown","2f8d3e92":"markdown","2f2c5b17":"markdown","12fb2119":"markdown","ea0cdf2c":"markdown","9974ee3d":"markdown","c0c79fb9":"markdown","45537e32":"markdown","3e4bc9ca":"markdown"},"source":{"a0a04e49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26812319":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMap\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score","302e0839":"# Load data\ndf = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","2378d696":"# Missing values\ndf.isnull().sum()","8cfba2ba":"# Drop some attributes\ndf = df.drop(columns=['id', 'name', 'host_name', 'last_review'])\ndf.head(3)","0aa0a813":"# Handling with missing values\ndf = df.fillna({'reviews_per_month': 0.0})\ndf.head(5)","bba37eb3":"df.describe()","53ef52b8":"# Exclude property with listed price of 0\ndf = df.loc[df['price'] > 0]\ndf.describe()","cc293c68":"# Let's find out more about our neiberhoods presented 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island', and 'Bronx'\n\n# Brooklyn\nsub_1=df.loc[df['neighbourhood_group'] == 'Brooklyn']\nprice_sub1=sub_1[['price']]\n# Manhattan\nsub_2=df.loc[df['neighbourhood_group'] == 'Manhattan']\nprice_sub2=sub_2[['price']]\n# Queens\nsub_3=df.loc[df['neighbourhood_group'] == 'Queens']\nprice_sub3=sub_3[['price']]\n# Staten Island\nsub_4=df.loc[df['neighbourhood_group'] == 'Staten Island']\nprice_sub4=sub_4[['price']]\n# Bronx\nsub_5=df.loc[df['neighbourhood_group'] == 'Bronx']\nprice_sub5=sub_5[['price']]\n# Putting all the prices' dfs in the list\nprice_list_by_n=[price_sub1, price_sub2, price_sub3, price_sub4, price_sub5]","82115058":"# Creating an empty list that we will append later with price distributions for each neighbourhood_group\np_l_b_n_2=[]\n# Creating list with known values in neighbourhood_group column\nnei_list=['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']\n# Creating a for loop to get statistics for price ranges and append it to our empty list\nfor x in price_list_by_n:\n    i=x.describe(percentiles=[.25, .50, .75])\n    i=i.iloc[3:]\n    i.reset_index(inplace=True)\n    i.rename(columns={'index':'Stats'}, inplace=True)\n    p_l_b_n_2.append(i)\n# Changing names of the price column to the area name for easier reading of the table    \np_l_b_n_2[0].rename(columns={'price':nei_list[0]}, inplace=True)\np_l_b_n_2[1].rename(columns={'price':nei_list[1]}, inplace=True)\np_l_b_n_2[2].rename(columns={'price':nei_list[2]}, inplace=True)\np_l_b_n_2[3].rename(columns={'price':nei_list[3]}, inplace=True)\np_l_b_n_2[4].rename(columns={'price':nei_list[4]}, inplace=True)\n# finilizing our dataframe for final view    \nstat_df=p_l_b_n_2\nstat_df=[i.set_index('Stats') for i in stat_df]\nstat_df=stat_df[0].join(stat_df[1:])\nstat_df","59c4a7fc":"# We can see from our statistical table that we have some extreme values, therefore we need to remove them for the sake of a better visualization\n\n# Creating a sub-dataframe with no extreme values \/ less than 500\nsub_6 = df[df.price < 400.0]\n\n# Using violinplot to showcase density and distribtuion of prices \nviz_1=sns.violinplot(data=sub_6, x='neighbourhood_group', y='price')\nviz_1.set_title('Density and distribution of prices for each neighberhood_group')","d015dc30":"title = 'Room type location per Neighbourhood Group'\nviz_2 = sns.catplot(x='room_type', kind=\"count\", hue=\"neighbourhood_group\", data=df);\nplt.title(title)\nplt.ioff()","c66f42f2":"# Finding out top 10 neighbourhoods\ndf.neighbourhood.value_counts().head(10)","aef8e88f":"# Let's now combine this with our boroughs and room type for a rich visualization we can make\n\n# Grabbing top 10 neighbourhoods for sub-dataframe\nsub_7=df.loc[df['neighbourhood'].isin(['Williamsburg','Bedford-Stuyvesant','Harlem','Bushwick', 'Upper West Side',\n                                       'Hell\\'s Kitchen','East Village','Upper East Side','Crown Heights','Midtown'])]\n# Using catplot to represent multiple interesting attributes together and a count\nviz_2=sns.catplot(x='neighbourhood', hue='neighbourhood_group', col='room_type', data=sub_7, kind='count')\nviz_2.set_xticklabels(rotation=90)","2cd57cf1":"# Set up color blind friendly color palette\n# The palette with grey:\ncbPalette = [\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n# The palette with black:\ncbbPalette = [\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n\nsns.set_palette(cbPalette)\n","ff32f876":"title = 'Properties per Neighbourhood Group'\nsns.countplot(df['neighbourhood_group'])\nplt.title(title)\nplt.ioff()","3aea2e94":"title = 'Properties per Room Type'\nsns.countplot(df['room_type'])\nplt.title(title)\nplt.ioff()","b0812735":"plt.figure(figsize=(20,10))\ntitle = 'Correlation matrix of numerical variables'\nsns.heatmap(df.corr(), annot=True, square=True, cmap='RdYlGn')\nplt.title(title)\nplt.ioff()","05506e80":"title = 'Neighbourhood Group Location'\nplt.figure(figsize=(10,6))\nsns.scatterplot(df.longitude, df.latitude, hue=df.neighbourhood_group).set_title(title)\nplt.ioff()\n\ntitle = 'Room type location per Neighbourhood Group'\nplt.figure(figsize=(10,6))\nsns.scatterplot(df.longitude, df.latitude, hue=df.room_type).set_title(title)\nplt.ioff()","94a22a43":"m=folium.Map([40.7128,-74.0060],zoom_start=11)\nHeatMap(df[['latitude','longitude']].dropna(),radius=8,gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(m)\ndisplay(m)","d7f50114":"# Price relation to Neighbourhood Group\nx= 'neighbourhood_group'\ny= 'price'\ntitle = 'Price per Neighbourhood Group'\n\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=df)\nplt.title(title)\nplt.ioff()","65e84ce8":"x='neighbourhood_group'\ny='price'\n\ntitle = 'Price per neighbourhood_group for properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=df_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per neighbourhood_group for properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=df_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","7e2bceb8":"# Price relation to Room Type\ntitle = 'Price per Room Type for properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x='room_type', y='price', data=df_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price per Room Type for properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x='room_type', y='price', data=df_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\n","7f9e3eb1":"# Price relation to the number of review per month\nsns.set_palette(\"muted\")\nx = 'reviews_per_month'\ny = 'price'\n\ntitle = 'Price relation to number of review per month for Properties under $155'\ndf_filtered = df.loc[(df['price'] < 155) & (df['reviews_per_month'] < 30)]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to number of review per month for Properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","a0d8d82c":"# Price relation to the number_of_reviews\nsns.set_palette(\"muted\")\nx = 'number_of_reviews'\ny = 'price'\n\ntitle = 'Price relation to number of review per month and Room Type for Properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to number of review per month and Room Type for Properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","d07d1af5":"# Price relation to minimum_nights\nsns.set_palette(\"muted\")\nx = 'minimum_nights'\ny = 'price'\n\ntitle = 'Price relation to minimum_nights for Properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to minimum_nights Properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)\n","74e149c8":"# Price relation to calculated_host_listings_count\nsns.set_palette(\"muted\")\nx = 'calculated_host_listings_count'\ny = 'price'\n\ntitle = 'Price relation to calculated_host_listings_count for Properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to calculated_host_listings_count for Properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","30fb7716":"# Price relation to availability\nsns.set_palette(\"muted\")\nx = 'availability_365'\ny = 'price'\n\ntitle = 'Price relation to availability for Properties under $155'\ndf_filtered = df.loc[df['price'] < 155]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\n\ntitle = 'Price relation to availability for Properties more than $170'\ndf_filtered = df.loc[df['price'] > 170]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(x=x, y=y, data=df_filtered)\nplt.title(title)\nplt.ioff()\nsns.set_palette(cbPalette)","85eb371a":"df_copy = df.copy()\ndf_copy.head()","e7d8e1ea":"# Determine the number of missing values for every column\ndf_copy.isnull().sum()","81bf25b7":"# log10 transform\ndf_copy.minimum_nights += 0.000000001\ndf_copy['minimum_nights'] = np.log10(df_copy['minimum_nights'])\ndf_copy.number_of_reviews += 0.000000001\ndf_copy['number_of_reviews'] = np.log10(df_copy['number_of_reviews'])\ndf_copy.reviews_per_month += 0.000000001\ndf_copy['reviews_per_month'] = np.log10(df_copy['reviews_per_month'])\ndf_copy.calculated_host_listings_count += 0.000000001\ndf_copy['calculated_host_listings_count'] = np.log10(df_copy['calculated_host_listings_count'])\ndf_copy.availability_365 += 0.000000001\ndf_copy['availability_365'] = np.log10(df_copy['availability_365'])\ndf_copy.head()","ce5fdf90":"df_copy.info()","4ea5e160":"# Encoding categorical data\ndf_copy = pd.get_dummies(df_copy, columns=['room_type'], drop_first=True)\ndf_copy = pd.get_dummies(df_copy, columns=['neighbourhood'], drop_first=True)\ndf_copy = pd.get_dummies(df_copy, columns=['neighbourhood_group'], drop_first=True)\ndf_copy.head()","3c89198c":"# Filter the dataset for prices lower than $155\ndf_filtered_low = df_copy.loc[(df_copy['price'] < 155)]\n# Filter the dataset for prices superior to $175\ndf_filtered_high = df_copy.loc[(df_copy['price'] > 170)]","d7a7e200":"# Split the dataset\nX = df_filtered_low.drop('price', axis=1).values\ny = df_filtered_low['price'].values\ny = np.log10(y)","4c81950b":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","64a4d645":"# Compare predicted and actual values\ndf_comp = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf_comp.head(10)","8e2ffd07":"print('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","93635835":"# Split the dataset\nX = df_filtered_high.drop('price', axis=1).values\ny = df_filtered_high['price'].values\ny = np.log10(y)","c3dd482a":"# Splitting the dataset into the Training set and Test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","2e56965b":"df_comp = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf_comp.head(10)","3233c2eb":"print('Price mean:', np.round(np.mean(y), 2))  \nprint('Price std:', np.round(np.std(y), 2))\nprint('RMSE:', np.round(np.sqrt(metrics.mean_squared_error(y_test, lr.predict(X_test))), 2))\nprint('R2 score train:', np.round(r2_score(y_train, lr.predict(X_train), multioutput='variance_weighted'), 2))\nprint('R2 score test:', np.round(r2_score(y_test, lr.predict(X_test), multioutput='variance_weighted'), 2))","1204b50a":"## 1. Importing Libraries","6bf6b47d":"Podemos  observar algumas coisas sobre a distribui\u00e7\u00e3o de pre\u00e7os do Airbnb nos bairros de Nova York:\n* Manhattan tem a maior faixa de pre\u00e7os para as listagens com pre\u00e7o m\u00e9dio de 150.\n* Brooklyn com 90 por noite. \n* Queens e Staten Island parecem ter distribui\u00e7\u00f5es muito semelhantes.\n* Bronx \u00e9 o mais barato de todos eles. \n\nEssas distribui\u00e7\u00f5es eram esperadas visto que Manhattan \u00e9 um dos lugares mais caros do mundo para se viver. Por outro lado, o Bronx parece ter padr\u00f5es de vida mais baixos.","00a6e256":"## 3. Modeling the model","6f9516d4":"Podemos separar o dataset em escalas de preco:\n* Low: (price < 155)\n* Medium: (price > 155 and price < 170)\n* High: (price > 170)","d54e12b0":"#### 2.1 Loading dataset","2f8d3e92":"## 2. Exploratory Data Analysis","2f2c5b17":"Os eixos Y e X permanecem exatamente os mesmos para cada subplot, o eixo Y representa a contagem de observa\u00e7\u00f5es e as observa\u00e7\u00f5es do eixo X que queremos contar. A observa\u00e7\u00e3o que \u00e9 definitivamente mais contrastada \u00e9 que o an\u00fancio do Airbnb do tipo 'Quarto compartilhado' quase n\u00e3o est\u00e1 dispon\u00edvel entre os 10 bairros mais populosos com an\u00fancios. Ent\u00e3o, podemos ver que para esses 10 bairros apenas 2 bairros est\u00e3o representados: Manhattan e Brooklyn; isso era um tanto esperado, j\u00e1 que Manhattan e Brooklyn s\u00e3o um dos destinos mais visitados, portanto, teriam a maior disponibilidade de an\u00fancios. Tamb\u00e9m podemos observar que Bedford-Stuyvesant e Williamsburg s\u00e3o os mais populares para o bairro de Manhattan, e Harlem para o Brooklyn.","12fb2119":"#### 2.2 Handling with missing values","ea0cdf2c":"##### 3.1.2 Modeling on higher price dataset","9974ee3d":"A seguir, vamos examinar a rela\u00e7\u00e3o entre localiza\u00e7\u00e3o e pre\u00e7o e a rela\u00e7\u00e3o entre tipo de quarto e pre\u00e7o.","c0c79fb9":"#### 3.1 Multiple Linear Regression","45537e32":"##### 3.1.1 Modeling on lower price dataset","3e4bc9ca":"#### 2.3 Visualization"}}