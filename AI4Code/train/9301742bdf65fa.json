{"cell_type":{"dff9db94":"code","f8d63a01":"code","ee09d94a":"code","baa08ef9":"code","74fc73d2":"code","ddaa79aa":"code","f8d5d7ed":"code","e0c98b03":"code","2d850223":"code","4a2d0cfb":"code","7e1b83a7":"code","d8231e62":"code","874b6891":"code","d8ff51f1":"code","4321c445":"code","12fe9c49":"code","3b4b87ac":"code","acbf678d":"code","38d5c699":"markdown","9dedd1ee":"markdown","f4046b0e":"markdown"},"source":{"dff9db94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f8d63a01":"import zipfile\nwith zipfile.ZipFile('..\/input\/word2vec-nlp-tutorial\/labeledTrainData.tsv.zip', 'r') as zip_ref:\n    zip_ref.extractall('..\/output')","ee09d94a":"train_data=pd.read_csv('..\/output\/labeledTrainData.tsv',delimiter='\\t')","baa08ef9":"train_data.head()","74fc73d2":"train_data.shape","ddaa79aa":"print(train_data['review'][0])","f8d5d7ed":"#We will use BeautifulSoup for pre-processing the reviews text\nfrom bs4 import BeautifulSoup\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer","e0c98b03":"#This function performs all pre-processing required for a movie review\ndef pre_process_reviews(review):\n    #Removing HTML Markup Text using BeautifulSoup Library\n    obj=BeautifulSoup(review)\n    \n    #Using Regular Expressions to further process the string\n    process = re.sub(\"[^a-zA-Z?!.,-\/(\/);:]\", # The pattern to search for\n                      \" \",                   # The pattern to replace it with\n                      obj.get_text())  # The text to search\n    #We will convert the string to lowercase letter and divide them into words\n    words=process.lower().split()\n    \n    #Searching a set is much faster than searching list, so we will convert the stop words into a set\n    stops = set(stopwords.words(\"english\")) \n    \n    #We now remove the stop words or the unimportant words and retain only meaningful ones\n    mean_words=[w for w in words if not w in stops]\n    \n    #Join final set of words into a meaningful string\n    return \" \".join(mean_words)","2d850223":"#We will remove the markup text from all the reviews and keep only the raw text for model building\ntrain_data['review']=[pre_process_reviews(review) for review in train_data['review']]","4a2d0cfb":"#Initializing the CountVectorizer object for implementing Bag Of Words\nvector=CountVectorizer(analyzer='word',\n                       tokenizer=None,\n                      preprocessor=None,\n                      stop_words=None,\n                      max_features=5000)\n#Fitting and transforming into feature vectors\ntrain_data_features=vector.fit_transform(train_data['review'])","7e1b83a7":"vector.get_feature_names()","d8231e62":"from sklearn.linear_model import LogisticRegression\n\nlogis=LogisticRegression()\nlogis.fit(train_data_features,train_data['sentiment'])","874b6891":"#Reading the test data\nwith zipfile.ZipFile('..\/input\/word2vec-nlp-tutorial\/testData.tsv.zip', 'r') as zip_ref:\n    zip_ref.extractall('..\/output')\ntest_data=pd.read_csv('..\/output\/testData.tsv',delimiter='\\t')","d8ff51f1":"test_data.head()","4321c445":"#Pre-processing the test data\ntest_data['review']=[pre_process_reviews(review) for review in test_data['review']]","12fe9c49":"# Get a bag of words for the test set, and convert to a numpy array\ntest_data_features = vector.transform(test_data['review'])\ntest_data_features = test_data_features.toarray()","3b4b87ac":"#Use Log Regression model to predict sentiment\nresults=logis.predict(test_data_features)","acbf678d":"#Preparing submission file\noutput=pd.DataFrame(data={'ID':test_data['id'],'sentiment':results})\noutput.to_csv('mysubmission.csv',index=False)","38d5c699":"Bag-Of-Words Model","9dedd1ee":"Training a Logistic Regression Model","f4046b0e":"Data Pre-Processing Steps"}}