{"cell_type":{"62272084":"code","000eecc5":"code","af88ee50":"code","522e915c":"code","9aa09d29":"code","9cdb3623":"code","5775efe9":"code","6a5eacef":"code","1047e301":"code","a34d6446":"code","5994513f":"code","3b7bcf12":"code","2c603291":"code","936cdfc9":"code","0b5c5a7a":"code","a4d9d4b2":"code","1e2c7c9f":"code","d05cff1e":"code","b49b4e87":"code","24dc7303":"code","ebe56532":"code","640aefca":"code","1a0c80cd":"code","268d980d":"code","9f31a52d":"code","f365b24b":"code","8c225583":"code","e3f51f2c":"code","41d54740":"code","24be1753":"code","6c86d644":"markdown","a673e660":"markdown","bfa2e653":"markdown","7b1adef5":"markdown","01218dc7":"markdown","f00739aa":"markdown","10c9d0a1":"markdown","fbe6d721":"markdown","3c045211":"markdown","34460472":"markdown","03505e8a":"markdown","93ac74f2":"markdown","4e939a0f":"markdown","7db201fa":"markdown","5a8e391b":"markdown","6709b56f":"markdown","e682e68d":"markdown","3d95b9a3":"markdown","6b92471d":"markdown","4aaacf77":"markdown","51d2ed92":"markdown"},"source":{"62272084":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","000eecc5":"# reading csv file\ninput_path = \"..\/input\/bts-lyrics\/lyrics-v5.csv\"\ndiscogrph = pd.read_csv(input_path)\n\ndiscogrph.head()","af88ee50":"# Splitting the date into three separate columns\ndiscogrph[['released_year','released_month','released_date']] = discogrph['album_rd'].str.split('-',expand=True).apply(pd.to_numeric)","522e915c":"# removing trailing spaces in text feature columns\ndiscogrph['eng_track_title'] = discogrph['eng_track_title'].str.rstrip()\ndiscogrph['akbum_title'] = discogrph['album_title'].str.rstrip()\ndiscogrph['eng_album_title'] = discogrph['eng_album_title'].str.rstrip()\ndiscogrph['track_title'] = discogrph['track_title'].str.rstrip()\ndiscogrph['kor_track_title'] = discogrph['kor_track_title'].str.rstrip()\ndiscogrph['lyrics'] = discogrph['lyrics'].str.rstrip()","9aa09d29":"# installing RAKE for keyword extracting\nimport sys\n!{sys.executable} -m pip install nlp_rake","9cdb3623":"# importing libraries\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")","5775efe9":"n_songs =discogrph['eng_album_title'].value_counts()\nn_songs","6a5eacef":"fig, ax = plt.subplots(figsize=(20,20))\nfig.suptitle(\"Number of songs in each album\",fontsize= 35, ha = 'right')\nplt.xticks(fontsize= 20)\nplt.yticks(fontsize = 20)\nplot = sns.barplot(y=n_songs.index,x=n_songs.values, color = 'purple');\nfor i, v in enumerate(discogrph['album_title'].value_counts()):\n    ax.text(v+0.5, i+0.25, str(v), color='black', fontweight='bold',size = 20)","1047e301":"# number of remixes included in the dataset\nn_remix = sum(discogrph['remix'])\nprint('Number of remixes:',n_remix)\nprint('Remixed songs:',discogrph['eng_track_title'][discogrph['remix'] == True].values,sep = '\\n')","a34d6446":"remixes = list(discogrph['eng_track_title'][discogrph['remix'] == True])\nremixes = pd.Series([remixes[i].split('(')[0].rstrip() for i in range(len(remixes))]).value_counts()\n\nfig, ax = plt.subplots(figsize = (15,10))\nfig.suptitle(\"Remixes of BTS Songs\",ha = 'right',fontsize = 20)\nplt.xlabel(\"Number of Remixes\",fontsize = 12)\nplt.ylabel(\"Songs\",fontsize= 12)\nplt.yticks(fontsize=15)\n\nx_values, y_values =remixes.values, remixes.index\nsns.barplot(x = x_values, y = y_values, color = 'tab:cyan')\n\nfor i,v in enumerate(x_values):\n    ax.text(v\/2,i+0.15,str(discogrph['released_year'][discogrph['eng_track_title'].str.lower()==y_values[i].lower()].values[0]),fontsize=15,\n            fontweight= 'bold',color= 'black')\n    ","5994513f":"# number of hidden tracks in BTS Discography\nn_hidden = sum(discogrph['hidden_track'])\nprint(f'Number of hidden tracks in BTS Discography: {n_hidden}')\nprint('Hidden tracks in BTS Discography:',discogrph.loc[discogrph['hidden_track']==True,['eng_track_title','released_year']].values,sep='\\n')","3b7bcf12":"x_axis, y_axis =discogrph['performed_by'].value_counts().index,discogrph['performed_by'].value_counts().values\n\nfig,ax = plt.subplots(figsize = (20,20))\nfig.suptitle(\"Distribution of units and solo performances throughout the discography\", ha = 'center',fontsize = 30)\nplt.xlabel(\"Number of Performances\",fontsize = 12)\nplt.ylabel(\"Units\",fontsize= 12)\nplt.yticks(fontsize=15)\nplt.xticks(fontsize=15)\n\nsns.barplot(x = y_axis, y = x_axis, color = 'tab:purple')\nfor i,v in enumerate(y_axis):\n    ax.text(v+3.5,i,str(round((v\/len(discogrph))*100,2))+'%',fontsize=15,color= 'black')\n    ax.text(1,i,v,fontsize=15,color= 'black')","2c603291":"n_songs_year = discogrph['released_year'].value_counts().sort_index()","936cdfc9":"x_values, y_values = n_songs_year.index,n_songs_year.values\nfig,ax = plt.subplots(figsize = (10,10))\nfig.suptitle(\"Number of song releases over time\", ha = 'center',fontsize = 20)\nplt.xlabel(\"Year\",fontsize = 12)\nplt.ylabel(\"Number of songs released\",fontsize= 12)\nplt.yticks(fontsize=15)\nsns.lineplot(x=x_values, y=y_values, color = 'purple', marker='o')\n\nfor i,j in zip(x_values,y_values):\n    ax.text(i+0.1,j,str(j),color= 'black', fontweight = 'bold')\n","0b5c5a7a":"# Eras of BTS Discography\neras = {1:['2 Cool 4 Skool','O!RUL8,2?','Skool Luv Affair','Skool Luv Affair (Special Addition)','Dark and Wild'],\n        2:['\ud654\uc591\uc5f0\ud654 The Most Beautiful Moment In Life Pt.1',\n       '\ud654\uc591\uc5f0\ud654 The Most Beautiful Moment In Life Pt.2',\n       '\ud654\uc591\uc5f0\ud654 The Most Beautiful Moment In Life: Young Forever'],\n       3:['Wings','You Never Walk Alone'],\n        4:[\"Love Yourself \u627f \u2018Her\u2019\",\"LOVE YOURSELF \u8f49 \u2018Tear\u2019\", \"LOVE YOURSELF \u7d50 \u2018Answer\u2019\"],\n       5:['MAP OF THE SOUL: PERSONA', 'MAP OF THE SOUL: 7'],\n       6:['BE']}\n","a4d9d4b2":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, ImageColorGenerator\nimport nlp_rake\nfrom spacy.lang.en.stop_words import STOP_WORDS\n\ndef era_keyword_displayer (era_num):\n    lyr = [discogrph.loc[discogrph['album_title'] == alb,'lyrics'] for alb in eras[era_num]]\n    lyr = pd.concat([lyr[l] for l in range(len(lyr))],axis = 0).dropna()\n    text = ''\n    for k in lyr.index:\n        text += lyr[k]\n\n    extractor = nlp_rake.Rake(max_words=2,min_freq=3,min_chars=5)\n    res = extractor.apply(text)\n    print(res[:10])\n    \n    wc = WordCloud(background_color='white',width=800,height=600)\n    plt.figure(figsize=(15,7))\n    plt.imshow(wc.generate_from_frequencies({ k:v for k,v in res }))","1e2c7c9f":"era_keyword_displayer(1)","d05cff1e":"era_keyword_displayer(2)","b49b4e87":"era_keyword_displayer(3)","24dc7303":"era_keyword_displayer(4)","ebe56532":"era_keyword_displayer(5)","640aefca":"era_keyword_displayer(6)","1a0c80cd":"def clean(val_list): #method to eliminate additional redundant words\n    lst = []\n    words = [\"don't\",'even','will','m','go','let','oh','s','la','yeah','ll','re','na','don','know','na','want','pt','remix','ft','outro','into','interlude','edition','full','length','skit','hey','ya']\n    for val in val_list:\n        flag = 1\n        i = val.lower().strip(\":.\")\n#         i = i.split(\"\u2019\")\n#         print(i)\n#         for tok in i:\n#             if tok not in words:\n#                 lst.append(tok)\n        if i not in words:\n            lst.append(i)\n\n    return lst","268d980d":"def lyric_wordcloud_displayer(era_num):\n    lyr = [discogrph.loc[discogrph['album_title'] == alb,'lyrics'] for alb in eras[era_num]]\n    lyr = pd.concat([lyr[l] for l in range(len(lyr))],axis = 0).dropna()\n    \n    comment_words = '' \n    stopwords = set(STOP_WORDS) \n\n    for val in lyr: \n        val = str(val)\n        tokens = clean(val.split()) \n    #     print(tokens)\n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n\n        comment_words += \" \".join(tokens)+\" \"\n\n    wordcloud = WordCloud(width = 500, height = 700, background_color ='white',\n                          stopwords = stopwords, min_font_size = 10,min_word_length = 4,collocation_threshold=20).generate(comment_words) \n\n    # creating a word dictionary\n    text_dictionary = wordcloud.process_text(comment_words)\n    # sort the dictionary\n    word_freq={k: v for k, v in sorted(text_dictionary.items(),reverse=True, key=lambda item: item[1])}\n    #use words_ to print relative word frequencies\n    rel_freq=wordcloud.words_\n    #print results\n    print(list(word_freq.items())[:10])\n    print(list(rel_freq.items())[:10])\n\n    plt.figure(figsize = (10, 10), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show()\n","9f31a52d":"lyric_wordcloud_displayer(1)","f365b24b":"lyric_wordcloud_displayer(2)","8c225583":"lyric_wordcloud_displayer(3)","e3f51f2c":"lyric_wordcloud_displayer(4)","41d54740":"lyric_wordcloud_displayer(5)","24be1753":"lyric_wordcloud_displayer(6)","6c86d644":"### Era 3 - Wings","a673e660":"### Era 1 - School Trilogy","bfa2e653":"## Remix Analysis","7b1adef5":"**You would think that, with the advent of Corona and social distancing, BTS may have worked less compared to the previous years, but this graph shows us otherwise. Actually, 2020 is the year they have been the busiest in song making.**","01218dc7":"## Distribution of song performers","f00739aa":"### Era 5 - Map Of the Soul","10c9d0a1":"## Number of songs in each album (only what is included in the dataset)","fbe6d721":"# Without using RAKE using only wordcloud library\nWith only wordcloud, it seems to introduce a lot of noice.","3c045211":"### Era 4 - Love yourself","34460472":"## Yearly Analysis","03505e8a":"## Era-wise lyrics analysis","93ac74f2":"Special thanks to @Jyotsna Sweedle for her visualization notebook from where I got the inspiration to make this analysis. I also got help from her wordcloud implementation for my analysis as well.","4e939a0f":"### Era 2 - Youth Trilogy","7db201fa":"### Era 6 - BE","5a8e391b":"### Era 3 - Wings","6709b56f":"### Era 2 - Youth Trilogy","e682e68d":"## Hidden tracks","3d95b9a3":"### Era 4 - Love yourself","6b92471d":"### Era 1 - School Trilogy","4aaacf77":"### Era 5 - Map Of the Soul","51d2ed92":"### Era 6 - BE"}}