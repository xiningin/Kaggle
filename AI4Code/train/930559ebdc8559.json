{"cell_type":{"e103287c":"code","8dd7aea7":"code","636d5805":"code","23c7abda":"code","459e56d4":"code","1d310ae3":"code","d8c58f91":"code","2adb57dd":"code","6183a990":"code","e6b84a4a":"code","ce1093c4":"code","c0a260f1":"code","cecd1e03":"code","7b7a5f75":"code","7705dda6":"code","8bd49aee":"code","bf91eed5":"code","c97d87a8":"code","76022c71":"code","a673d53b":"code","8b80f073":"code","1c478658":"code","39380759":"code","8b2455b0":"code","910a8d5b":"code","55ef3b14":"code","0f29ba2d":"code","9ab428f7":"code","300078e2":"markdown","374e6ecc":"markdown","f3a7bd58":"markdown","141df77f":"markdown","6380aef1":"markdown","7b3cb541":"markdown","dfdd4071":"markdown","119ced9c":"markdown","ccc040ad":"markdown","c43a2b85":"markdown","71980e74":"markdown","b577e6e3":"markdown","54fb66c6":"markdown","6608f1eb":"markdown","743f8854":"markdown","5c64f2ce":"markdown","c34d8c36":"markdown","65fe0d88":"markdown","ca650580":"markdown","405dbc8b":"markdown","96d19283":"markdown","ed24044a":"markdown"},"source":{"e103287c":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data from API\nimport requests\n\n# Visualization\nimport matplotlib.pyplot as plt\n\n# Modeling and Prediction\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\nimport warnings\nwarnings.simplefilter('ignore')","8dd7aea7":"prediction_period = 7  # Period for prediction, days","636d5805":"# Download data via API from the Portal of RNBO of Ukraine: https:\/\/api-covid19.rnbo.gov.ua\/\n# https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\ncode_region = 4914  # \"Zhytomyrsk\u0430 oblast\"\nprint(f'Download daily data from the Portal of RNBO of Ukraine')\nmyfile = requests.get(f'https:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine&country={code_region}')\nopen('data', 'wb').write(myfile.content)\ndf_data = pd.read_json('data')\ndf_data","23c7abda":"# Display the last 10 rows of the dataframe \"df_data\"\ndf_data.tail(10)","459e56d4":"# Calculation daily data for number of confirmed cases\ndf_data['n_confirmed'] = df_data['confirmed'].diff()\n#df_data['n_confirmed'] = df_data['confirmed']","1d310ae3":"# Filtering the missing data\ndata = df_data[['dates','n_confirmed']].dropna().reset_index(drop=True)\ndata['n_confirmed'] = data['n_confirmed'].astype('int')\ndata.tail(4)","d8c58f91":"# Delete the last zero value\ndata = data[:-1]\ndata.tail(3)","2adb57dd":"# Build the plot\ndata['n_confirmed'].plot()","6183a990":"# Prepairing data for modeling with Prophet\ndata.columns = ['ds', 'y']\ndata.tail()","e6b84a4a":"# Removing zero values\ndata = data[data['y'] > 0].reset_index(drop=True)\ndata","ce1093c4":"# Devide dataset to training and validation datasets\nvalid = data[(len(data)-prediction_period):].reset_index(drop=True)\ndata = data[:(len(data)-prediction_period)]\nvalid","c0a260f1":"data.tail(prediction_period)","cecd1e03":"# The smallest increase in value\ndata.loc[303:305]","7b7a5f75":"# Selection data with the biggest wave\ndf2 = data[303:].reset_index(drop=True)\ndf2","7705dda6":"df2.plot()","8bd49aee":"# Build Prophet model\nmodel = Prophet()\n\n# Training model for all data\nmodel.fit(data)","bf91eed5":"# Build Prophet model with parameters ans structure \n# from the notebook https:\/\/www.kaggle.com\/vbmokin\/covid-19-in-ukraine-eda-forecasting \n# but without holidays\nmodel2 = Prophet(daily_seasonality=False, weekly_seasonality=False, yearly_seasonality=False, \n                changepoint_range=1, changepoint_prior_scale = 0.8)\nmodel2.add_seasonality(name='weekly', period=7, fourier_order=16, \n                      mode = 'multiplicative', prior_scale = 0.5)\nmodel2.add_seasonality(name='triply', period=3, fourier_order=2, \n                      mode = 'multiplicative', prior_scale = 0.25)\n\n# Training model for df2\nmodel2.fit(df2)","c97d87a8":"def prediction_accuracy(valid, model):\n    # Calculation prediction accuracy for valid dataset by model\n    \n    future = model.make_future_dataframe(periods = prediction_period)   # Valid data prediction\n    forecast = model.predict(future)\n    forecast = forecast[(len(forecast)-prediction_period):]\n    forecast[forecast['yhat'] < 0]['yhat'] = 0\n    y_val = forecast['yhat'].round()  # Prediction    \n    y_target = valid['y']             # Real data\n    \n    return round(mean_absolute_error(y_val, y_target)*100\/valid['y'].sum(), 2)    ","76022c71":"# Make a forecast for prediction_period days ahead\nfuture = model.make_future_dataframe(periods = prediction_period)\nforecast = model.predict(future)\n\n# Make values integer, and replace negative values with zero\nfeature_all = ['yhat_lower', 'yhat', 'yhat_upper']\nforecast[feature_all] = forecast[feature_all].astype('int')\nfor feature in feature_all:\n    forecast.loc[forecast[feature] < 0, feature] = 0","a673d53b":"# Draw plot of the values with forecasting data\nfigure = model.plot(forecast, xlabel = 'Date', ylabel = 'Number of confirmed cases')","8b80f073":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component = model.plot_components(forecast)","1c478658":"# Ouput the prediction for the next prediction_period days\nforecast[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","39380759":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model)}%\")","8b2455b0":"# Make a forecast for prediction_period days ahead\nfuture2 = model2.make_future_dataframe(periods = prediction_period)\nforecast2 = model2.predict(future2)\n\n# Make values integer, and replace negative values with zero\nforecast2[feature_all] = forecast2[feature_all].astype('int')\nfor feature in feature_all:\n    forecast2.loc[forecast2[feature] < 0, feature] = 0","910a8d5b":"# Draw plot of the values with forecasting data\nfigure2 = model2.plot(forecast2, xlabel = 'Date', ylabel = 'Number of confirmed cases')","55ef3b14":"# Draw plot with the components (trend and weekly seasonality) of the forecasts\nfigure_component2 = model2.plot_components(forecast2)","0f29ba2d":"# Ouput the prediction for the next prediction_period days\nforecast2[['ds', 'yhat_lower', 'yhat', 'yhat_upper']].tail(prediction_period)","9ab428f7":"print(f\"Relative error (WAPE) for model = {prediction_accuracy(valid, model2)}%\")","300078e2":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","374e6ecc":"The adequacy of a more complex model is much better.","f3a7bd58":"**ADDITIONAL TASK:** Try changing the parameters of the Prophet model and evaluate how this will affect the shape of the curve and the accuracy of the simulation","141df77f":"## Acknowledgements\n\n### Datasets:\n- official data of Ukraine (https:\/\/covid19.rnbo.gov.ua\/) - via API\n- @vbmokin dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data) - for the next commits\n\n","6380aef1":"### For all data","7b3cb541":"Thanks Vitalii Mokin Kaggle GM, Prof. @vbmokin\n## Dataset [COVID-19 in Ukraine: daily data](https:\/\/www.kaggle.com\/vbmokin\/covid19-in-ukraine-daily-data)","dfdd4071":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","119ced9c":"The adequacy of a simple model is very poor!","ccc040ad":"**TASK:** Make similar calculations for the dataframe df2:\n1. Make a forecast for it for prediction_period=7 days ahead.\n2. Draw a plot of the values with forecasting data.\n3. Draw plot with the components (trend and weekly seasonality) of the forecasts.\n4. Ouput the prediction for the next prediction_period=7 days.","c43a2b85":"<a class=\"anchor\" id=\"0\"><\/a>\n# COVID-19 in one region of Ukraine","71980e74":"**ADDITIONAL TASK:** Try to specify another number (instead of 304) as a reference point or other.\n\nLook all data with plot here: https:\/\/covid19.rnbo.gov.ua\/","b577e6e3":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","54fb66c6":"### For all data","6608f1eb":"What were changed: \n1) were selected another data with biggest wave \n2) were changed parameters of the Prophet model\n3) ","743f8854":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","5c64f2ce":"### All list of API parameters\nhttps:\/\/api-covid19.rnbo.gov.ua\/charts\/main-data?mode=ukraine\n\n### Example for region \"Zhytomyrsk\u0430 oblast\"\ncode_region = 4914","c34d8c36":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","65fe0d88":"### For the biggest wave - df2","ca650580":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","405dbc8b":"### For the biggest wave - df2","96d19283":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","ed24044a":"### Selection data with the biggest wave"}}