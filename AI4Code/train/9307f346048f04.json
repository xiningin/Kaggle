{"cell_type":{"1922c4f5":"code","c291c694":"code","50b17c70":"code","2f7046a7":"code","80348eed":"code","ccc1c0b8":"code","fff8a11a":"code","ace31fa9":"code","0a34d3e2":"code","070ca11d":"code","ae05127b":"code","5d1b6c80":"code","b02fa066":"markdown","e4ca4a40":"markdown","0818eba6":"markdown","5460cf89":"markdown"},"source":{"1922c4f5":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import History, ModelCheckpoint\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nfrom keras import backend as K\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split","c291c694":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df, val_df = train_test_split(train_df, test_size=0.1)","50b17c70":"# embdedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","2f7046a7":"# Convert values to embeddings\ndef text_to_array(text):\n    empyt_emb = np.zeros(300)\n    text = text[:-1].split()[:30]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    embeds+= [empyt_emb] * (30 - len(embeds))\n    return np.array(embeds)\n\n# train_vects = [text_to_array(X_text) for X_text in tqdm(train_df[\"question_text\"])]\nval_vects = np.array([text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:10000])])\nval_y = np.array(val_df[\"target\"][:10000])\n","80348eed":"# Data providers\nbatch_size = 128\n\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr = np.array([text_to_array(text) for text in texts])\n            yield text_arr, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])\n","ccc1c0b8":"from keras.models import Sequential\nfrom keras.layers import CuDNNLSTM, Dense, Dropout, Input, Bidirectional\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints, optimizers, layers","fff8a11a":"# https:\/\/www.kaggle.com\/suicaokhoailang\/lstm-attention-baseline-0-652-lb\nclass Attention(Layer):\n    def __init__(self, step_dim,\n                 W_regularizer=None, b_regularizer=None,\n                 W_constraint=None, b_constraint=None,\n                 bias=True, **kwargs):\n        self.supports_masking = True\n        self.init = initializers.get('glorot_uniform')\n\n        self.W_regularizer = regularizers.get(W_regularizer)\n        self.b_regularizer = regularizers.get(b_regularizer)\n\n        self.W_constraint = constraints.get(W_constraint)\n        self.b_constraint = constraints.get(b_constraint)\n\n        self.bias = bias\n        self.step_dim = step_dim\n        self.features_dim = 0\n        super(Attention, self).__init__(**kwargs)\n        \n    def build(self, input_shape):\n        #print ('input_shape', input_shape)\n        assert len(input_shape) == 3\n\n        self.W = self.add_weight((input_shape[-1],),\n                                 initializer=self.init,\n                                 name='{}_W'.format(self.name),\n                                 regularizer=self.W_regularizer,\n                                 constraint=self.W_constraint)\n        self.features_dim = input_shape[-1]\n\n        if self.bias:\n            self.b = self.add_weight((input_shape[1],),\n                                     initializer='zero',\n                                     name='{}_b'.format(self.name),\n                                     regularizer=self.b_regularizer,\n                                     constraint=self.b_constraint)\n        else:\n            self.b = None\n\n        self.built = True\n\n    def compute_mask(self, input, input_mask=None):\n        return None\n\n    def call(self, x, mask=None):\n        features_dim = self.features_dim\n        step_dim = self.step_dim\n        eij = K.reshape(K.dot(K.reshape(x, (-1, features_dim)),\n                        K.reshape(self.W, (features_dim, 1))), (-1, step_dim))\n\n        if self.bias:\n            eij += self.b\n\n        eij = K.tanh(eij)\n\n        a = K.exp(eij)\n\n        if mask is not None:\n            a *= K.cast(mask, K.floatx())\n\n        a \/= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())\n\n        a = K.expand_dims(a)\n        weighted_input = x * a\n        return K.sum(weighted_input, axis=1)\n\n    def compute_output_shape(self, input_shape):\n        return input_shape[0],  self.features_dim","ace31fa9":"# model = Sequential()\n# model.add(Bidirectional(CuDNNLSTM(64, return_sequences=True),\n#                         input_shape=(30, 300)))\n# model.add(Bidirectional(CuDNNLSTM(64)))\n# model.add(Dense(64, activation=\"relu\"))\n# model.add(Dense(1, activation=\"sigmoid\"))\n\n\ninp = Input(shape=(30,300))\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(inp)\nx = Bidirectional(CuDNNLSTM(64, return_sequences=True))(x)\nx = Attention(30)(x)\nx = Dense(64, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=Adam(lr=1e-3),\n              metrics=['accuracy'])","0a34d3e2":"hist=History()\nmg = batch_gen(train_df)\nfilepath=\"weights-improvement.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\nmodel.fit_generator(mg, epochs=30,\n                    steps_per_epoch=1000,\n                    validation_data=(val_vects, val_y),\n                    verbose=True,\n                    callbacks=[checkpoint, hist])","070ca11d":"import matplotlib.pyplot as plt\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","ae05127b":"model.load_weights('weights-improvement.hdf5')\n# prediction part\nbatch_size = 256\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr = np.array([text_to_array(text) for text in texts])\n        yield text_arr\n\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\n\nall_preds = []\nfor x in tqdm(batch_gen(test_df)):\n    all_preds.extend(model.predict(x).flatten())","5d1b6c80":"y_te = (np.array(all_preds) > 0.5).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","b02fa066":"# Setup","e4ca4a40":"# Training","0818eba6":"# Inference","5460cf89":"This kernel is heavily based on https:\/\/www.kaggle.com\/mihaskalic\/lstm-is-all-you-need-well-maybe-embeddings-also and https:\/\/www.kaggle.com\/shujian\/different-embeddings-with-attention-fork-fork"}}