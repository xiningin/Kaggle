{"cell_type":{"58a05fad":"code","4d3daa48":"code","229142c4":"code","c2dab35d":"code","2b9e8866":"code","d3afd691":"code","71a40c84":"code","6dbedea8":"code","be1f7fe4":"code","509a3039":"code","14c53a92":"code","20926488":"code","c71f4ff1":"code","5c30de20":"code","1eb65ca9":"code","5110c43c":"code","f198f92f":"code","b549c2b8":"code","c59c2e64":"code","63652201":"code","e4f8a35e":"code","02a704e2":"code","db67dc6f":"code","1479e58e":"code","2d183523":"code","7a524ca6":"code","a459e8d1":"code","8a537ed9":"code","adc6f9ea":"code","2cabb25c":"code","48b338d6":"code","358ee41d":"code","4871906f":"code","e88cf189":"code","35d14f7a":"code","065a49f1":"code","b44b4ef6":"code","990044c8":"code","06314ee2":"code","756ac951":"code","c65979c0":"code","a160612d":"code","06dae1e1":"markdown","e6010b4d":"markdown","f5c7a955":"markdown","4bbf3756":"markdown","469006c8":"markdown","34f084ce":"markdown","5b8a5ad9":"markdown","8987f0da":"markdown","0b34845e":"markdown","10786201":"markdown","027ff030":"markdown","46976c97":"markdown","c84761ee":"markdown","e6b4c464":"markdown","822ffe62":"markdown","e65c3bc8":"markdown","102757ff":"markdown","e75ce7ee":"markdown","e6267520":"markdown","5432dfab":"markdown","a2f46d84":"markdown","072a0055":"markdown","b2ece921":"markdown","04ebab48":"markdown","48343767":"markdown"},"source":{"58a05fad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d3daa48":"import pandas as pd\nimport numpy as np\nimport datetime as dt\nfrom sklearn import linear_model\nimport scipy.stats as st\nfrom statistics import stdev\nfrom statistics import mean\nimport matplotlib.pyplot as plt\nimport glob as glob","229142c4":"import warnings\nwarnings.filterwarnings('ignore')","c2dab35d":"## this is for currency sector\ndata0=pd.read_csv('..\/input\/dataset\/archive\/AUD_USD Historical Data.csv')\ndata0['Date']=pd.to_datetime(data0['Date'])\n\ndata1=pd.read_csv('..\/input\/dataset\/archive\/EUR_USD Historical Data.csv')\ndata1['Date']=pd.to_datetime(data1['Date'])\n\ndata2=pd.read_csv('..\/input\/dataset\/archive\/GBP_USD Historical Data.csv')\ndata2['Date']=pd.to_datetime(data2['Date'])\n\ndata3=pd.read_csv('..\/input\/dataset\/archive\/US Dollar Index Historical Data.csv')\ndata3['Date']=pd.to_datetime(data3['Date'])\n\ndata4=pd.read_csv('..\/input\/dataset\/archive\/USD_BRL Historical Data.csv')\ndata4['Date']=pd.to_datetime(data4['Date'])\n\ndata5=pd.read_csv('..\/input\/dataset\/archive\/USD_CAD Historical Data.csv')\ndata5['Date']=pd.to_datetime(data5['Date'])\n\ndata6=pd.read_csv('..\/input\/dataset\/archive\/USD_CNH Historical Data.csv')\ndata6['Date']=pd.to_datetime(data6['Date'])\n\ndata7=pd.read_csv('..\/input\/dataset\/archive\/USD_CZK Historical Data.csv')\ndata7['Date']=pd.to_datetime(data7['Date'])\n\ndata8=pd.read_csv('..\/input\/dataset\/archive\/USD_INR Historical Data.csv')\ndata8['Date']=pd.to_datetime(data8['Date'])\n\ndata9=pd.read_csv('..\/input\/dataset\/archive\/USD_JPY Historical Data.csv')\ndata9['Date']=pd.to_datetime(data9['Date'])\n\ndata10=pd.read_csv('..\/input\/dataset\/archive\/USD_SEK Historical Data.csv')\ndata10['Date']=pd.to_datetime(data10['Date'])\n\ndata11=pd.read_csv('..\/input\/dataset\/archive\/USD_SGD Historical Data.csv')\ndata11['Date']=pd.to_datetime(data11['Date'])\n\ndata12=pd.read_csv('..\/input\/dataset\/archive\/USD_ZAR.csv')\ndata12['Date']=pd.to_datetime(data12['Date'])\n\n## below is for commodity sector\ndata13=pd.read_csv('..\/input\/dataset\/archive\/Copper Futures Historical Data.csv')\ndata13['Date']=pd.to_datetime(data13['Date'])\n\ndata14=pd.read_csv('..\/input\/dataset\/archive\/Crude Oil WTI Futures Historical Data.csv')\ndata14['Date']=pd.to_datetime(data14['Date'])\n\ndata15=pd.read_csv('..\/input\/dataset\/archive\/Gold Futures Historical Data_1.csv')\ndata15['Date']=pd.to_datetime(data15['Date'])\n\ndata16=pd.read_csv('..\/input\/dataset\/archive\/Natural Gas Futures Historical Data.csv')\ndata16['Date']=pd.to_datetime(data16['Date'])\n\ndata17=pd.read_csv('..\/input\/dataset\/archive\/Platinum Futures Historical Data_1.csv')\ndata17['Date']=pd.to_datetime(data17['Date'])\n\ndata18=pd.read_csv('..\/input\/dataset\/archive\/Silver Futures Historical Data.csv')\ndata18['Date']=pd.to_datetime(data18['Date'])\n\ndata19=pd.read_csv('..\/input\/dataset\/archive\/Thomson Reuters_CoreCommodity CRB Total Return Historical Data.csv')\ndata19['Date']=pd.to_datetime(data19['Date'])\n\ndata20=pd.read_csv('..\/input\/dataset\/archive\/US Corn Futures Historical Data.csv')\ndata20['Date']=pd.to_datetime(data20['Date'])\n\ndata21=pd.read_csv('..\/input\/dataset\/archive\/US Cotton 2 Futures Historical Data.csv')\ndata21['Date']=pd.to_datetime(data21['Date'])\n\ndata22=pd.read_csv('..\/input\/dataset\/archive\/US Soybeans Futures Historical Data_1.csv')\ndata22['Date']=pd.to_datetime(data22['Date'])\n\n## below is bond sector\ndata23=pd.read_csv('..\/input\/dataset\/archive\/Eurex Swiss CHF Government Bond Future Historical Data.csv')\ndata23['Date']=pd.to_datetime(data23['Date'])\n\ndata24=pd.read_csv('..\/input\/dataset\/archive\/Euro BTP Futures Historical Data.csv')\ndata24['Date']=pd.to_datetime(data24['Date'])\n\ndata25=pd.read_csv('..\/input\/dataset\/archive\/Euro Bund Futures Historical Data.csv')\ndata25['Date']=pd.to_datetime(data25['Date'])\n\ndata26=pd.read_csv('..\/input\/dataset\/archive\/Euro Stoxx 50 Historical Data_1.csv')\ndata26['Date']=pd.to_datetime(data26['Date'])\n\ndata27=pd.read_csv('..\/input\/dataset\/archive\/Japan Government Bond Futures Historical Data.csv')\ndata27['Date']=pd.to_datetime(data27['Date'])\n\ndata28=pd.read_csv('..\/input\/dataset\/archive\/UK Gilt Futures Historical Data.csv')\ndata28['Date']=pd.to_datetime(data28['Date'])\n\ndata29=pd.read_csv('..\/input\/dataset\/archive\/US 10 Year T-Note Futures Historical Data.csv')\ndata29['Date']=pd.to_datetime(data29['Date'])\n\n# below is stock sector\ndata30=pd.read_csv('..\/input\/dataset\/archive\/China A50 Futures Historical Data.csv')\ndata30['Date']=pd.to_datetime(data30['Date'])\n\ndata31=pd.read_csv('..\/input\/dataset\/archive\/KOSPI 200 Futures Historical Data.csv')\ndata31['Date']=pd.to_datetime(data31['Date'])\n\ndata32=pd.read_csv('..\/input\/dataset\/archive\/Nifty 50 Futures Historical Data.csv')\ndata32['Date']=pd.to_datetime(data32['Date'])\n\ndata33=pd.read_csv('..\/input\/dataset\/archive\/Nikkei 225 Futures Historical Data.csv')\ndata33['Date']=pd.to_datetime(data33['Date'])\n\ndata34=pd.read_csv('..\/input\/dataset\/archive\/Russell 2000 Futures Historical Data.csv')\ndata34['Date']=pd.to_datetime(data34['Date'])\n\ndata35=pd.read_csv('..\/input\/dataset\/archive\/SP 500 Futures Historical Data.csv')\ndata35['Date']=pd.to_datetime(data35['Date'])\n\ndata36=pd.read_csv('..\/input\/dataset\/archive\/Singapore MSCI Futures Historical Data.csv')\ndata36['Date']=pd.to_datetime(data36['Date'])\n\n# below is BTC sector\ndata37=pd.read_csv('..\/input\/dataset\/archive\/BTC_USD Bitfinex Historical Data.csv')\ndata37['Date']=pd.to_datetime(data37['Date'])\n\ndata38=pd.read_csv('..\/input\/dataset\/archive\/Ethereum Historical Data.csv')\ndata38['Date']=pd.to_datetime(data38['Date'])","2b9e8866":"from functools import reduce\ndata_frames=[data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,data16,data17,data18,data19,data20,data21,data22,data23,data24,data25,data26,data27,data28,data29,data30,data31,data32,data33,data34,data35,data36,data37,data38]\ndf_merged = reduce(lambda  left,right: pd.merge(left,right,on=['Date'],\n                                            how='inner'), data_frames)\n\ndf_merged=df_merged.dropna(axis=1)\ndf_merged=df_merged.iloc[::-1]\ndf_merged=df_merged.reset_index()\ndf_merged=df_merged.drop(['index'],axis=1)\n\ndf_merged","d3afd691":"df_merged.isnull().values.any()","71a40c84":"column_name=list(df_merged.columns)\nasset_list=[]\nfor i in range (1,40):\n    asset_list.append(column_name[4*i])\nlen(asset_list)","6dbedea8":"def trend(data,name,SD):\n    c=name\n    NUM_SD=SD\n    DDC_index=-0.12\n    Rebound=0.05\n    d[c]=data.loc[786:,:]\n    d[c]['TR']=d[c].iloc[:,2]-d[c].iloc[:,3]\n    d[c]['H_O']=d[c].iloc[:,2]-d[c].iloc[:,1]\n    d[c]['O_L']=d[c].iloc[:,1]-d[c].iloc[:,3]\n    d[c]['HO']=d[c].iloc[:,6]\/d[c].iloc[:,5]\n    d[c]['OL']=d[c].iloc[:,7]\/d[c].iloc[:,5]\n    WHA_HO=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=(1*d[c].iloc[i,8]+2*d[c].iloc[i+1,8]+3*d[c].iloc[i+2,8]+4*d[c].iloc[i+3,8]+5*d[c].iloc[i+4,8])\/(1+2+3+4+5)\n        WHA_HO.append(x)\n    d[c]['WMA_HO']=WHA_HO\n\n    WHA_OL=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=(1*d[c].iloc[i,9]+2*d[c].iloc[i+1,9]+3*d[c].iloc[i+2,9]+4*d[c].iloc[i+3,9]+5*d[c].iloc[i+4,9])\/(1+2+3+4+5)\n        WHA_OL.append(x)\n    d[c]['WMA_OL']=WHA_OL\n\n    Expected_TR=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(d[c].iloc[i:i+5,5])\n        Expected_TR.append(x)\n    d[c]['Expected_TR']=Expected_TR\n\n    d[c]['Proj_H']=d[c].iloc[:,1]+d[c].iloc[:,10]*d[c].iloc[:,12]\n    d[c].at[0:4,'Proj_H']=0\n\n    d[c]['Proj_L']=d[c].iloc[:,1]-d[c].iloc[:,11]*d[c].iloc[:,12]\n    d[c].at[0:4,'Proj_L']=0\n\n    SDHO=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=stdev(d[c].iloc[i:i+5,6])\n        SDHO.append(x)\n    d[c]['SDHO']=SDHO\n\n    SDOL=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=stdev(d[c].iloc[i:i+5,7])\n        SDOL.append(x)\n    d[c]['SDOL']=SDOL\n\n    d[c]['STPT_PH']=d[c].iloc[:,13]+(NUM_SD*d[c].iloc[:,15])\n    d[c]['STPT_PL']=d[c].iloc[:,14]-(NUM_SD*d[c].iloc[:,16])\n\n    buy_trade=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,2]>d[c].iloc[i+5,13]:\n            buy_trade.append('Buy')\n        else:\n            buy_trade.append(0)\n    d[c]['buy_trade']=buy_trade\n\n    sell_trade=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,3]<d[c].iloc[i+5,14]:\n            sell_trade.append('Sell')\n        else:\n            sell_trade.append(0)\n    d[c]['sell_trade']=sell_trade\n\n    ## below is the enter buy, exit buy and daily return buy\n\n    Enter_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,19]=='Buy':\n            Enter_B.append(d[c].iloc[i+5,13])\n        else:\n            Enter_B.append(0)\n    d[c]['Enter_B']=Enter_B\n\n    Exit_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,19]=='Buy'and d[c].iloc[i+5,2]>d[c].iloc[i+5,17]:\n            Exit_B.append(d[c].iloc[i+5,17])\n        else:\n            Exit_B.append(d[c].iloc[i+5,4])\n    d[c]['Exit_B']=Exit_B\n\n    D_return_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,21]==0:\n            D_return_B.append(0)\n        else:\n            D_return_B.append((d[c].iloc[i+5,22]-d[c].iloc[i+5,21])\/d[c].iloc[i+5,4])\n    d[c]['D_return_B']=D_return_B\n\n    ## below is the enter sell, exit sell and daily return sell\n    Enter_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,20]=='Sell':\n            Enter_S.append(d[c].iloc[i+5,14])\n        else:\n            Enter_S.append(0)\n    d[c]['Enter_S']=Enter_S\n\n    Exit_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,20]=='Sell'and d[c].iloc[i+5,3]<d[c].iloc[i+5,18]:\n            Exit_S.append(d[c].iloc[i+5,18])\n        else:\n            Exit_S.append(d[c].iloc[i+5,4])\n    d[c]['Exit_S']=Exit_S\n\n    D_return_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,24]==0:\n            D_return_S.append(0)\n        else:\n            D_return_S.append((d[c].iloc[i+5,24]-d[c].iloc[i+5,25])\/d[c].iloc[i+5,4])\n    d[c]['D_return_S']=D_return_S\n\n    d[c]['D_return_buy&sell']=d[c].iloc[:,23]+d[c].iloc[:,26]\n\n    cumulative_D_return=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=cumulative_D_return[i-1+5]+d[c].iloc[i+5,27]\n        cumulative_D_return.append(x)\n    d[c]['cumulative_D_return']=cumulative_D_return\n\n    HWM=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(HWM[i-1+5],d[c].iloc[i+5,28])\n        HWM.append(x)\n    d[c]['HWM']=HWM\n\n    DD=[]\n    for i in range(0,len(d[c])):\n        if d[c].iloc[i,28]<d[c].iloc[i,29]:\n            DD.append(d[c].iloc[i,28]-d[c].iloc[i,29])\n        else:\n            DD.append(0)\n    d[c]['DD']=DD\n\n    ## below is the DD and rebound control\n    Recent_low=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,30]==0:\n            Recent_low.append(0)\n        else:\n            Recent_low.append(min(d[c].iloc[i+5,30],Recent_low[i+5-1]))\n    d[c]['Recent_low']=Recent_low\n\n    DDC_index_list=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5-1,30]>DDC_index:\n            DDC_index_list.append(1)\n        else:\n            DDC_index_list.append(0)\n    d[c]['DDC_index']=DDC_index_list\n\n    Rebound_list=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,32]==0 and (d[c].iloc[i+5-1,30]-d[c].iloc[i+5-1,31])>Rebound:\n            Rebound_list.append(1)\n        else:\n            Rebound_list.append(0)\n    d[c]['Rebound']=Rebound_list\n\n    DR_DDC=[]\n    for i in range(0,len(d[c])):\n        DR_DDC.append(d[c].iloc[i,27]*(max(d[c].iloc[i,32],d[c].iloc[i,33])))\n    d[c]['DR_DDC']=DR_DDC\n\n    CR_DDC=[0,0,0,0,0]\n    for i in range(0,len(d[c])-5):\n        CR_DDC.append(CR_DDC[i+5-1]+d[c].iloc[i+5,34])\n    d[c]['CR_DDC']=CR_DDC\n\n    HWM_DDC=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(HWM_DDC[i-1+5],d[c].iloc[i+5,35])\n        HWM_DDC.append(x)\n    d[c]['HWM_DDC']=HWM_DDC\n\n    DD_DDC=[]\n    for i in range(0,len(d[c])):\n        if d[c].iloc[i,35]<d[c].iloc[i,36]:\n            DD_DDC.append(d[c].iloc[i,35]-d[c].iloc[i,36])\n        else:\n            DD_DDC.append(0)\n    d[c]['DD_DDC']=DD_DDC\n\n\n    SD_daily=stdev(d[c].iloc[:,27])\n    Return_daily=mean(d[c].iloc[:,27])\n    annual_return=Return_daily*260\n    annual_SD=SD_daily*(260**(1\/2))\n    HWM_no_DDC=max(d[c].iloc[:,29])\n    MDD_no_DDC=min(d[c].iloc[:,30])\n    RR_ratio=annual_return\/annual_SD\n    HWM_DDC=max(d[c].iloc[:,36])\n    MDD_DDC=min(d[c].iloc[:,37])\n\n    return(d[c])","be1f7fe4":"def mean_reversion(data,name,SD):\n    c=name\n    NUM_SD=SD\n    DDC_index=-0.12\n    Rebound=0.05\n    r[c]=data.loc[786:,:]\n    r[c]['TR']=r[c].iloc[:,2]-r[c].iloc[:,3]\n    r[c]['H_O']=r[c].iloc[:,2]-r[c].iloc[:,1]\n    r[c]['O_L']=r[c].iloc[:,1]-r[c].iloc[:,3]\n    r[c]['HO']=r[c].iloc[:,6]\/r[c].iloc[:,5]\n    r[c]['OL']=r[c].iloc[:,7]\/r[c].iloc[:,5]\n    WHA_HO=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=(1*r[c].iloc[i,8]+2*r[c].iloc[i+1,8]+3*r[c].iloc[i+2,8]+4*r[c].iloc[i+3,8]+5*r[c].iloc[i+4,8])\/(1+2+3+4+5)\n        WHA_HO.append(x)\n    r[c]['WMA_HO']=WHA_HO\n\n    WHA_OL=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=(1*r[c].iloc[i,9]+2*r[c].iloc[i+1,9]+3*r[c].iloc[i+2,9]+4*r[c].iloc[i+3,9]+5*r[c].iloc[i+4,9])\/(1+2+3+4+5)\n        WHA_OL.append(x)\n    r[c]['WMA_OL']=WHA_OL\n\n    Expected_TR=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(r[c].iloc[i:i+5,5])\n        Expected_TR.append(x)\n    r[c]['Expected_TR']=Expected_TR\n\n    r[c]['Proj_H']=r[c].iloc[:,1]+r[c].iloc[:,10]*r[c].iloc[:,12]\n    r[c].at[0:4,'Proj_H']=0\n\n    r[c]['Proj_L']=r[c].iloc[:,1]-r[c].iloc[:,11]*r[c].iloc[:,12]\n    r[c].at[0:4,'Proj_L']=0\n\n    SDHO=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=stdev(r[c].iloc[i:i+5,6])\n        SDHO.append(x)\n    r[c]['SDHO']=SDHO\n\n    SDOL=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=stdev(r[c].iloc[i:i+5,7])\n        SDOL.append(x)\n    r[c]['SDOL']=SDOL\n\n    r[c]['STOP_LOSS_PH']=r[c].iloc[:,13]+(NUM_SD*r[c].iloc[:,15])\n    r[c]['STOP_LOSS_PL']=r[c].iloc[:,14]-(NUM_SD*r[c].iloc[:,16])\n\n    buy_trade=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,3]<r[c].iloc[i+5,14]:\n            buy_trade.append('Buy')\n        else:\n            buy_trade.append(0)\n    r[c]['buy_trade']=buy_trade\n\n    sell_trade=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,2]>r[c].iloc[i+5,13]:\n            sell_trade.append('Sell')\n        else:\n            sell_trade.append(0)\n    r[c]['sell_trade']=sell_trade\n\n    ## below is the enter buy, exit buy and daily return buy\n\n    Enter_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,19]=='Buy':\n            Enter_B.append(r[c].iloc[i+5,14])\n        else:\n            Enter_B.append(0)\n    r[c]['Enter_B']=Enter_B\n\n    Exit_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,19]=='Buy'and r[c].iloc[i+5,18]>r[c].iloc[i+5,3]:\n            Exit_B.append(r[c].iloc[i+5,18])\n        else:\n            Exit_B.append(r[c].iloc[i+5,4])\n    r[c]['Exit_B']=Exit_B\n\n    D_return_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,21]==0:\n            D_return_B.append(0)\n        else:\n            D_return_B.append((r[c].iloc[i+5,22]-r[c].iloc[i+5,21])\/r[c].iloc[i+5,4])\n    r[c]['D_return_B']=D_return_B\n\n    ## below is the enter sell, exit sell and daily return sell\n    Enter_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,20]=='Sell':\n            Enter_S.append(r[c].iloc[i+5,13])\n        else:\n            Enter_S.append(0)\n    r[c]['Enter_S']=Enter_S\n\n    Exit_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,20]=='Sell'and r[c].iloc[i+5,2]>r[c].iloc[i+5,17]:\n            Exit_S.append(r[c].iloc[i+5,17])\n        else:\n            Exit_S.append(r[c].iloc[i+5,4])\n    r[c]['Exit_S']=Exit_S\n\n    D_return_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,24]==0:\n            D_return_S.append(0)\n        else:\n            D_return_S.append((r[c].iloc[i+5,24]-r[c].iloc[i+5,25])\/r[c].iloc[i+5,4])\n    r[c]['D_return_S']=D_return_S\n\n    r[c]['D_return_buy&sell']=r[c].iloc[:,23]+r[c].iloc[:,26]\n\n    cumulative_D_return=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=cumulative_D_return[i-1+5]+r[c].iloc[i+5,27]\n        cumulative_D_return.append(x)\n    r[c]['cumulative_D_return']=cumulative_D_return\n\n    HWM=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(HWM[i-1+5],r[c].iloc[i+5,28])\n        HWM.append(x)\n    r[c]['HWM']=HWM\n\n    DD=[]\n    for i in range(0,len(r[c])):\n        if r[c].iloc[i,28]<r[c].iloc[i,29]:\n            DD.append(r[c].iloc[i,28]-r[c].iloc[i,29])\n        else:\n            DD.append(0)\n    r[c]['DD']=DD\n\n    ## below is the DD and rebound control\n    Recent_low=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,30]==0:\n            Recent_low.append(0)\n        else:\n            Recent_low.append(min(r[c].iloc[i+5,30],Recent_low[i+5-1]))\n    r[c]['Recent_low']=Recent_low\n\n    DDC_index_list=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5-1,30]>DDC_index:\n            DDC_index_list.append(1)\n        else:\n            DDC_index_list.append(0)\n    r[c]['DDC_index']=DDC_index_list\n\n    Rebound_list=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,32]==0 and (r[c].iloc[i+5-1,30]-r[c].iloc[i+5-1,31])>Rebound:\n            Rebound_list.append(1)\n        else:\n            Rebound_list.append(0)\n    r[c]['Rebound']=Rebound_list\n\n    DR_DDC=[]\n    for i in range(0,len(r[c])):\n        DR_DDC.append(r[c].iloc[i,27]*(max(r[c].iloc[i,32],r[c].iloc[i,33])))\n    r[c]['DR_DDC']=DR_DDC\n\n    CR_DDC=[0,0,0,0,0]\n    for i in range(0,len(r[c])-5):\n        CR_DDC.append(CR_DDC[i+5-1]+r[c].iloc[i+5,34])\n    r[c]['CR_DDC']=CR_DDC\n\n    HWM_DDC=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(HWM_DDC[i-1+5],r[c].iloc[i+5,35])\n        HWM_DDC.append(x)\n    r[c]['HWM_DDC']=HWM_DDC\n\n    DD_DDC=[]\n    for i in range(0,len(r[c])):\n        if r[c].iloc[i,35]<r[c].iloc[i,36]:\n            DD_DDC.append(r[c].iloc[i,35]-r[c].iloc[i,36])\n        else:\n            DD_DDC.append(0)\n    r[c]['DD_DDC']=DD_DDC\n\n\n    SD_daily=stdev(r[c].iloc[:,27])\n    Return_daily=mean(r[c].iloc[:,27])\n    annual_return=Return_daily*260\n    annual_SD=SD_daily*(260**(1\/2))\n    HWM_no_DDC=max(r[c].iloc[:,29])\n    MDD_no_DDC=min(r[c].iloc[:,30])\n    RR_ratio=annual_return\/annual_SD\n    HWM_DDC=max(r[c].iloc[:,36])\n    MDD_DDC=min(r[c].iloc[:,37])\n\n    return(r[c])","509a3039":"def grid(data,name,TA,significance,increase,decrease,Initial_Margin,MinVolUnit,transaction_cost):\n    c=name\n    new_colname = ['Date','Open_x','High_x','Low_x','Close']\n    data.columns = new_colname\n    g[c]=data.loc[786:,:]\n    n=1\/significance\n    TP= data.iloc[:786,4].mean()\n    rf=0.0025\n    g[c]['pctdiff']=np.ceil((g[c].loc[:,\"Close\"]\/TP-1)*n)\/n\n    g[c][\"TargetAllocation\"]=g[c]['pctdiff'].apply(lambda x:max(min(1,TA-x\/significance*increase),0)if x<0 else max(min(1,TA-x\/significance*decrease),0))\n    g[c][\"Position\"]=(Initial_Margin*g[c][\"TargetAllocation\"]\/TP\/MinVolUnit).astype(int)*MinVolUnit\n    g[c].loc[786,\"TradeVol_1\"]=g[c].loc[786,\"Position\"]\n    for i in range(787,937):\n        g[c].loc[i,\"TradeVol_1\"]=g[c].loc[i,\"Position\"]-g[c].loc[i-1,\"Position\"]\n    \n    g[c].loc[786,'Transaction_Cost']=0\n    for i in range(787,937):\n        g[c].loc[i,'Transaction_Cost']=abs(g[c].loc[i,\"Open_x\"]*g[c].loc[i-1,\"TradeVol_1\"]*transaction_cost)\n    \n    \n    g[c].loc[786,'OtherAsset']=0\n    for i in range(787,937):\n        g[c].loc[i,'OtherAsset']=g[c].loc[i-1,'Position']*g[c].loc[i,\"Close\"]\n    g[c].loc[786,'Cash']=Initial_Margin*(1+rf\/252)\n    for i in range(787,937):\n        g[c].loc[i,\"Cash\"]=g[c].loc[i-1,\"Cash\"]*(1+rf\/252)-g[c].loc[i-1,\"TradeVol_1\"]*g[c].loc[i,\"Open_x\"]-g[c].loc[i,'Transaction_Cost']\n        \n\n    g[c]['TotalAsset']=g[c]['OtherAsset']+g[c]['Cash']\n    g[c].loc[786,'NAV']=1\n    for i in range(787,937):\n        g[c].loc[i,'NAV']=g[c].loc[i,'TotalAsset']\/Initial_Margin\n        g[c].loc[i,'NAV_Ret']=g[c].loc[i,'NAV']\/g[c].loc[i-1,'NAV']-1\n        g[c]['cumret']=g[c]['NAV_Ret'].cumsum()\n    \n    return(g[c])","14c53a92":"d={}\nfor i in range(39):\n    trend(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],0.5)","20926488":"r={}\nfor i in range(39):\n    mean_reversion(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],0.5)","c71f4ff1":"g={}\nfor i in range(39):\n    grid(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],0.3,0.0001,0.10,0.10,10000,1,0)","5c30de20":"## trend always before mean_aversion\n## get daily return of all securities in trend strategy\nperform_rank=d[asset_list[0]].iloc[:,[0,34]]\nfor i in range(1,39):\n    perform_rank=perform_rank.merge(d[asset_list[i]].iloc[:,[0,34]],on='Date')\n## get daily return of all securities in mean reversion strategy\nfor i in range(0,39):\n    perform_rank=perform_rank.merge(r[asset_list[i]].iloc[:,[0,34]],on='Date')\n## get daily return of all securities in grid trading strategy\nfor i in range(0,39):\n    perform_rank=perform_rank.merge(g[asset_list[i]].iloc[:,[0,14]],on='Date')\nperform_rank","1eb65ca9":"## calculate cumulative return for each secutiry from trend every 5 days\nfor i in range(1,40):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_TR'+str(i)]=cum_R_list\n## calculate cumulative return for each secutiry from mean reversion every 5 days\nfor i in range(40,79):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_MR'+str(i)]=cum_R_list\n## calculate cumulative return for each secutiry from grid trading every 5 days\nfor i in range(79,118):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_GT'+str(i)]=cum_R_list","5110c43c":"   ## achieve ranking of cumulative return for trend:\nperform_rank = perform_rank.join(perform_rank.iloc[:,118:157].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_TR_rank'))\n\n## achieve ranking of cumulative return for mean reversion:\nperform_rank = perform_rank.join(perform_rank.iloc[:,157:196].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_MR_rank'))  \n\n## achieve ranking of cumulative return for grid trading:\nperform_rank = perform_rank.join(perform_rank.iloc[:,196:235].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_GT_rank'))   \nperform_rank.head(10)","f198f92f":"##Paramaters that can change\nreserve_account=100000\ntrading_account=100000\nprofit_account=0\ntop_1_given=0.4\ntop_2_given=0.3\ntop_3_given=0.15\ntop_4_given=0.1\ntop_5_given=0.05\nleverage=1\n\n## identify top 5 securities of each strategy on each trading day,and decided trend\/mean\/gridtrading reversion\nrocket=perform_rank.iloc[:,0:1]\n\ntop5_cumR_trend=[]\ntop5_cumR_MR=[]\ntop5_cumR_grid=[]\ntop5_cumR_trend.append(0)\ntop5_cumR_MR.append(0)\ntop5_cumR_grid.append(0)\nfor i in range(1,len(perform_rank)):\n    if int(i\/5)==i\/5:\n        x=sum(sorted(perform_rank.iloc[i,118:157],reverse=True)[:5])\n        y=sum(sorted(perform_rank.iloc[i,157:196],reverse=True)[:5])\n        z=sum(sorted(perform_rank.iloc[i,196:235],reverse=True)[:5])\n        top5_cumR_trend.append(x\/(x+y+z))\n        top5_cumR_MR.append(y\/(x+y+z))\n        top5_cumR_grid.append(z\/(x+y+z)) \n    else:\n        top5_cumR_trend.append(0)\n        top5_cumR_MR.append(0)\n        top5_cumR_grid.append(0)\nrocket['trend_weight']=top5_cumR_trend\nrocket['mean_reversion_weight']=top5_cumR_MR\nrocket['grid_weight']=top5_cumR_grid","b549c2b8":"## assign weight of money to top 5 securities in trend strategy\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,234+i]==1:\n                x=top_1_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==2:\n                x=top_2_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==3:\n                x=top_3_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==4:\n                x=top_4_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==5:\n                x=top_5_given*rocket.iloc[j,1]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_trend'+str(i)]=weight_list","c59c2e64":"## assign weight of money to top 5 securities in mean_reversion\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,273+i]==1:\n                x=top_1_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==2:\n                x=top_2_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==3:\n                x=top_3_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==4:\n                x=top_4_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==5:\n                x=top_5_given*rocket.iloc[j,2]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_MR'+str(i)]=weight_list\n    \n## assign weight of money to top 5 securities in grid_trading\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,312+i]==1:\n                x=top_1_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==2:\n                x=top_2_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==3:\n                x=top_3_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==4:\n                x=top_4_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==5:\n                x=top_5_given*rocket.iloc[j,3]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_GT'+str(i)]=weight_list\n    \n## calculate dayily profit or loss in dollar amount of total portfolio\ndaily_gain=[]\nfor i in range (len(perform_rank)):\n    m=[]\n    for j in range(1,118):\n        x=perform_rank.iloc[i,j]*rocket.iloc[i,j+3]\n        m.append(x)\n    y=(1+sum(m))*trading_account\n    daily_gain.append(y)\nrocket['daily_dollar']=daily_gain\n\n## calculate daily profit\ndaily_profit=[]\nfor i in range(len(rocket)):\n    if rocket.iloc[i,121]>trading_account:\n        daily_profit.append(rocket.iloc[i,121]-trading_account)\n    else:\n        daily_profit.append(0)\nrocket['profit']=daily_profit\n\n## calculate daily loss:\ndaily_loss=[]\nfor i in range(len(rocket)):\n    if rocket.iloc[i,121]<trading_account:\n        daily_loss.append(rocket.iloc[i,121]-trading_account)\n    else:\n        daily_loss.append(0)\nrocket['loss']=daily_loss\n\n## calculate remaining in reserve account:\nreserve=[]\nreserve.append(reserve_account)\nfor i in range(1,len(rocket)):\n    x=reserve[i-1]+rocket.iloc[i,123]\n    reserve.append(x)\nrocket['reserve_account_remaining']=reserve\n\n## calculate profit in total\nprofit_total=[]\nprofit_total.append(0)\nfor i in range(1,len(rocket)):\n    profit_total.append(profit_total[i-1]+rocket.iloc[i,122])\nrocket['profit_total']=profit_total\n\n## calculate portfolio daily_return:\ndaily_return=[]\nfor i in range(len(rocket)):\n    daily_return.append((rocket.iloc[i,121]-trading_account)\/(trading_account-(leverage-1)*100000))\nrocket['daily_return']=daily_return","63652201":"rocket.tail(20)\n    ","e4f8a35e":"performance_eva=rocket.iloc[:,[0,126]]\nperformance_eva=performance_eva.fillna(0)\ncumulative_return=[]\ncumulative_return.append(0)\nfor i in range(1,len(performance_eva)):\n    cumulative_return.append(cumulative_return[i-1]+performance_eva.iloc[i,1].astype(float))\nperformance_eva['cum_return']=cumulative_return\n\n## calculate max DD\nmaxdd_nostoploss=[]\nfor i in range(len(performance_eva)):\n    maxdd_nostoploss.append(min((performance_eva.iloc[i,2]-max(performance_eva.iloc[0:i+1,2])),0))\nperformance_eva['max_DD']=maxdd_nostoploss\n\n## calculate winning rate\nwinner=[]\nfor i in range(len(performance_eva)):\n    if performance_eva.iloc[i,1]>0:\n        winner.append(1)\n    else:\n        winner.append(0)\n\n\nprint('our strategy annual return is '+str(performance_eva['daily_return'].mean()*252))\nprint('our strategy annual standard deviation is '+ str(stdev(performance_eva['daily_return'])*(252**0.5)))\nprint('our strategy RR ratio is '+str((performance_eva['daily_return'].mean()*252)\/(stdev(performance_eva['daily_return'])*(252**0.5))))\nprint('our strategy max DD is '+ str(performance_eva['max_DD'].min()))\nprint('our strategy winning rate is '+ str(sum(winner)\/len(performance_eva)))","02a704e2":"performance_eva.head()","db67dc6f":"plt.bar(rocket['Date'],rocket['reserve_account_remaining'] , color='r')\nplt.bar(rocket['Date'],rocket['profit_total'], bottom=rocket['reserve_account_remaining'], color='b')\nplt.xlabel(\"Date\")\nplt.ylabel(\"dollar value\")\nplt.title(\"Change in Reserve account and Profit account\")\nplt.legend(['reserve_account','profit_account'])\nplt.show()","1479e58e":"plt.plot(performance_eva['Date'],performance_eva.iloc[:,2],linewidth=2,color='blue')\nplt.plot(performance_eva['Date'],performance_eva.iloc[:,3],linewidth=2,color='red')\nplt.legend(['strategy_return','max_DD'])\nplt.xlabel(\"Date\")\nplt.ylabel(\"%\")\nplt.title(\"Performance\")\nplt.show()","2d183523":"Date_plt=[]\ntrend_weight_plt=[]\nMR_weight_plt=[]\nGT_weight_plt=[]\nfor i in range(len(rocket)):\n    if int(i\/5)==i\/5:\n        Date_plt.append(rocket.iloc[i,0])\n        trend_weight_plt.append(rocket.iloc[i,1])\n        MR_weight_plt.append(rocket.iloc[i,2])\n        GT_weight_plt.append(rocket.iloc[i,3])\n    pass\n        \nplt.bar(Date_plt,trend_weight_plt , color='r')\nplt.bar(Date_plt,MR_weight_plt, bottom=trend_weight_plt, color='b')\nplt.bar(Date_plt,GT_weight_plt, bottom=np.array(MR_weight_plt)+np.array(trend_weight_plt), color='g')\nplt.xlabel(\"Date\")\nplt.ylabel(\"weights\")\nplt.title(\"Capital Allocation\")\nplt.legend(['Trend','Mean Reversion','Grid Trading'])\nplt.show()","7a524ca6":"plot=d[asset_list[0]].iloc[:,[0,35]]\nfor i in range(1,39):\n    plot=plot.merge(d[asset_list[i]].iloc[:,[0,35]],on='Date')\n    plot\n\n## get equal_weight and show in chart in red\nequal_weight=[]\nfor i in range(len(plot)):\n    x=plot.iloc[i,1:].sum()*(1\/39)\n    equal_weight.append(x)\nplot['equal_weight']=equal_weight\n    \nplt.figure(figsize=(25,15))   \nfor i in range(39):\n    plt.plot(plot['Date'],plot.iloc[:,i+1:i+2])\n\nplot_list1=asset_list[0:39]\nplot_list1.append('equal_weight')\nplot_list1.append('our_strategy')\nplt.plot(plot['Date'],plot.iloc[:,40],linewidth=4,color='red')\nplt.plot(plot['Date'],performance_eva.iloc[:,2],linewidth=4,color='blue')\nplt.legend(plot_list1)\nplt.figure(figsize=(300,400))\nplt.show()","a459e8d1":"plot1=r[asset_list[0]].iloc[:,[0,35]]\nfor i in range(1,39):\n    plot1=plot1.merge(r[asset_list[i]].iloc[:,[0,35]],on='Date')\n    plot1\n\n## get equal_weight and show in chart in red\nequal_weight=[]\nfor i in range(len(plot1)):\n    x=plot1.iloc[i,1:].sum()*(1\/39)\n    equal_weight.append(x)\nplot1['equal_weight']=equal_weight\n    \nplt.figure(figsize=(25,15))   \nfor i in range(39):\n    plt.plot(plot1['Date'],plot1.iloc[:,i+1:i+2])\n\nplot_list=asset_list[0:39]\nplot_list.append('equal_weight')\nplot_list.append('our_steategy')\nplt.plot(plot1['Date'],plot.iloc[:,40],linewidth=4,color='red')\n## add our strategy performance here!\nplt.plot(plot1['Date'],performance_eva.iloc[:,2],linewidth=4,color='blue')\nplt.legend(plot_list)\nplt.figure(figsize=(300,400))\nplt.show()","8a537ed9":"g[asset_list[0]]","adc6f9ea":"plot2=g[asset_list[0]].iloc[:,[0,15]]\nfor i in range(1,39):\n    plot2=plot2.merge(g[asset_list[i]].iloc[:,[0,15]],on='Date')\n    plot2\n\n## get equal_weight and show in chart in red\nequal_weight=[]\nfor i in range(len(plot2)):\n    x=plot2.iloc[i,1:].sum()*(1\/39)\n    equal_weight.append(x)\nplot1['equal_weight']=equal_weight\n    \nplt.figure(figsize=(25,15))   \nfor i in range(39):\n    plt.plot(plot2['Date'],plot2.iloc[:,i+1:i+2])\n\nplot_list=asset_list[0:39]\nplot_list.append('equal_weight')\nplot_list.append('our_steategy')\nplt.plot(plot2['Date'],plot.iloc[:,40],linewidth=4,color='red')\n## add our strategy performance here!\nplt.plot(plot2['Date'],performance_eva.iloc[:,2],linewidth=4,color='blue')\nplt.legend(plot_list)\nplt.figure(figsize=(300,400))\nplt.show()","2cabb25c":"def trend(data,name,SD):\n    c=name\n    NUM_SD=SD\n    DDC_index=-0.12\n    Rebound=0.05\n    d[c]=data.iloc[786:,:]\n    d[c]['TR']=d[c].iloc[:,2]-d[c].iloc[:,3]\n    d[c]['H_O']=d[c].iloc[:,2]-d[c].iloc[:,1]\n    d[c]['O_L']=d[c].iloc[:,1]-d[c].iloc[:,3]\n    d[c]['HO']=d[c].iloc[:,6]\/d[c].iloc[:,5]\n    d[c]['OL']=d[c].iloc[:,7]\/d[c].iloc[:,5]\n    WHA_HO=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=(1*d[c].iloc[i,8]+2*d[c].iloc[i+1,8]+3*d[c].iloc[i+2,8]+4*d[c].iloc[i+3,8]+5*d[c].iloc[i+4,8])\/(1+2+3+4+5)\n        WHA_HO.append(x)\n    d[c]['WMA_HO']=WHA_HO\n\n    WHA_OL=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=(1*d[c].iloc[i,9]+2*d[c].iloc[i+1,9]+3*d[c].iloc[i+2,9]+4*d[c].iloc[i+3,9]+5*d[c].iloc[i+4,9])\/(1+2+3+4+5)\n        WHA_OL.append(x)\n    d[c]['WMA_OL']=WHA_OL\n\n    Expected_TR=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(d[c].iloc[i:i+5,5])\n        Expected_TR.append(x)\n    d[c]['Expected_TR']=Expected_TR\n\n    d[c]['Proj_H']=d[c].iloc[:,1]+d[c].iloc[:,10]*d[c].iloc[:,12]\n    d[c].at[0:4,'Proj_H']=0\n\n    d[c]['Proj_L']=d[c].iloc[:,1]-d[c].iloc[:,11]*d[c].iloc[:,12]\n    d[c].at[0:4,'Proj_L']=0\n\n    SDHO=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=stdev(d[c].iloc[i:i+5,6])\n        SDHO.append(x)\n    d[c]['SDHO']=SDHO\n\n    SDOL=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=stdev(d[c].iloc[i:i+5,7])\n        SDOL.append(x)\n    d[c]['SDOL']=SDOL\n\n    d[c]['STPT_PH']=d[c].iloc[:,13]+(NUM_SD*d[c].iloc[:,15])\n    d[c]['STPT_PL']=d[c].iloc[:,14]-(NUM_SD*d[c].iloc[:,16])\n\n    buy_trade=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,2]>d[c].iloc[i+5,13]:\n            buy_trade.append('Buy')\n        else:\n            buy_trade.append(0)\n    d[c]['buy_trade']=buy_trade\n\n    sell_trade=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,3]<d[c].iloc[i+5,14]:\n            sell_trade.append('Sell')\n        else:\n            sell_trade.append(0)\n    d[c]['sell_trade']=sell_trade\n\n    ## below is the enter buy, exit buy and daily return buy\n\n    Enter_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,19]=='Buy':\n            Enter_B.append(d[c].iloc[i+5,13])\n        else:\n            Enter_B.append(0)\n    d[c]['Enter_B']=Enter_B\n\n    Exit_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,19]=='Buy'and d[c].iloc[i+5,2]>d[c].iloc[i+5,17]:\n            Exit_B.append(d[c].iloc[i+5,17])\n        else:\n            Exit_B.append(d[c].iloc[i+5,4])\n    d[c]['Exit_B']=Exit_B\n\n    D_return_B=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,21]==0:\n            D_return_B.append(0)\n        else:\n            D_return_B.append((d[c].iloc[i+5,22]-d[c].iloc[i+5,21])\/d[c].iloc[i+5,4])\n    d[c]['D_return_B']=D_return_B\n\n    ## below is the enter sell, exit sell and daily return sell\n    Enter_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,20]=='Sell':\n            Enter_S.append(d[c].iloc[i+5,14])\n        else:\n            Enter_S.append(0)\n    d[c]['Enter_S']=Enter_S\n\n    Exit_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,20]=='Sell'and d[c].iloc[i+5,3]<d[c].iloc[i+5,18]:\n            Exit_S.append(d[c].iloc[i+5,18])\n        else:\n            Exit_S.append(d[c].iloc[i+5,4])\n    d[c]['Exit_S']=Exit_S\n\n    D_return_S=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,24]==0:\n            D_return_S.append(0)\n        else:\n            D_return_S.append((d[c].iloc[i+5,24]-d[c].iloc[i+5,25])\/d[c].iloc[i+5,4])\n    d[c]['D_return_S']=D_return_S\n\n    d[c]['D_return_buy&sell']=d[c].iloc[:,23]+d[c].iloc[:,26]\n\n    cumulative_D_return=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=cumulative_D_return[i-1+5]+d[c].iloc[i+5,27]\n        cumulative_D_return.append(x)\n    d[c]['cumulative_D_return']=cumulative_D_return\n\n    HWM=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(HWM[i-1+5],d[c].iloc[i+5,28])\n        HWM.append(x)\n    d[c]['HWM']=HWM\n\n    DD=[]\n    for i in range(0,len(d[c])):\n        if d[c].iloc[i,28]<d[c].iloc[i,29]:\n            DD.append(d[c].iloc[i,28]-d[c].iloc[i,29])\n        else:\n            DD.append(0)\n    d[c]['DD']=DD\n\n    ## below is the DD and rebound control\n    Recent_low=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,30]==0:\n            Recent_low.append(0)\n        else:\n            Recent_low.append(min(d[c].iloc[i+5,30],Recent_low[i+5-1]))\n    d[c]['Recent_low']=Recent_low\n\n    DDC_index_list=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5-1,30]>DDC_index:\n            DDC_index_list.append(1)\n        else:\n            DDC_index_list.append(0)\n    d[c]['DDC_index']=DDC_index_list\n\n    Rebound_list=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        if d[c].iloc[i+5,32]==0 and (d[c].iloc[i+5-1,30]-d[c].iloc[i+5-1,31])>Rebound:\n            Rebound_list.append(1)\n        else:\n            Rebound_list.append(0)\n    d[c]['Rebound']=Rebound_list\n\n    DR_DDC=[]\n    for i in range(0,len(d[c])):\n        DR_DDC.append(d[c].iloc[i,27]*(max(d[c].iloc[i,32],d[c].iloc[i,33])))\n    d[c]['DR_DDC']=DR_DDC\n\n    CR_DDC=[0,0,0,0,0]\n    for i in range(0,len(d[c])-5):\n        CR_DDC.append(CR_DDC[i+5-1]+d[c].iloc[i+5,34])\n    d[c]['CR_DDC']=CR_DDC\n\n    HWM_DDC=[0,0,0,0,0]\n    for i in range (0,len(d[c])-5):\n        x=max(HWM_DDC[i-1+5],d[c].iloc[i+5,35])\n        HWM_DDC.append(x)\n    d[c]['HWM_DDC']=HWM_DDC\n\n    DD_DDC=[]\n    for i in range(0,len(d[c])):\n        if d[c].iloc[i,35]<d[c].iloc[i,36]:\n            DD_DDC.append(d[c].iloc[i,35]-d[c].iloc[i,36])\n        else:\n            DD_DDC.append(0)\n    d[c]['DD_DDC']=DD_DDC\n\n\n    SD_daily=stdev(d[c].iloc[:,27])\n    Return_daily=mean(d[c].iloc[:,27])\n    annual_return=Return_daily*260\n    annual_SD=SD_daily*(260**(1\/2))\n    HWM_no_DDC=max(d[c].iloc[:,29])\n    MDD_no_DDC=min(d[c].iloc[:,30])\n    RR_ratio=annual_return\/annual_SD\n    HWM_DDC=max(d[c].iloc[:,36])\n    MDD_DDC=min(d[c].iloc[:,37])\n\n    return(d[c])\n\ntrend_sd=[1.0, 1.0, 2.5, 2.5, 1.0, 3.0, 2.5, 0.5, 4.0, 3.5, 0.5, 0.5, 2.0, 0.5, 3.5, 5.0, 1.0, 3.0, 3.5, 4.5, 4.0, 4.0, 5.0, 2.5, 0.5, 1.5, 3.0, 2.0, 5.0, 0.5, 0.5, 4.0, 1.0, 5.0, 0.5, 4.5, 1.0, 5.0, 3.5]\nfor i in range(39):\n    trend(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],trend_sd[i])\n","48b338d6":"def mean_reversion(data,name,SD):\n    c=name\n    NUM_SD=SD\n    DDC_index=-0.12\n    Rebound=0.05\n    r[c]=data.iloc[786:,:]\n    r[c]['TR']=r[c].iloc[:,2]-r[c].iloc[:,3]\n    r[c]['H_O']=r[c].iloc[:,2]-r[c].iloc[:,1]\n    r[c]['O_L']=r[c].iloc[:,1]-r[c].iloc[:,3]\n    r[c]['HO']=r[c].iloc[:,6]\/r[c].iloc[:,5]\n    r[c]['OL']=r[c].iloc[:,7]\/r[c].iloc[:,5]\n    WHA_HO=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=(1*r[c].iloc[i,8]+2*r[c].iloc[i+1,8]+3*r[c].iloc[i+2,8]+4*r[c].iloc[i+3,8]+5*r[c].iloc[i+4,8])\/(1+2+3+4+5)\n        WHA_HO.append(x)\n    r[c]['WMA_HO']=WHA_HO\n\n    WHA_OL=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=(1*r[c].iloc[i,9]+2*r[c].iloc[i+1,9]+3*r[c].iloc[i+2,9]+4*r[c].iloc[i+3,9]+5*r[c].iloc[i+4,9])\/(1+2+3+4+5)\n        WHA_OL.append(x)\n    r[c]['WMA_OL']=WHA_OL\n\n    Expected_TR=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(r[c].iloc[i:i+5,5])\n        Expected_TR.append(x)\n    r[c]['Expected_TR']=Expected_TR\n\n    r[c]['Proj_H']=r[c].iloc[:,1]+r[c].iloc[:,10]*r[c].iloc[:,12]\n    r[c].at[0:4,'Proj_H']=0\n\n    r[c]['Proj_L']=r[c].iloc[:,1]-r[c].iloc[:,11]*r[c].iloc[:,12]\n    r[c].at[0:4,'Proj_L']=0\n\n    SDHO=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=stdev(r[c].iloc[i:i+5,6])\n        SDHO.append(x)\n    r[c]['SDHO']=SDHO\n\n    SDOL=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=stdev(r[c].iloc[i:i+5,7])\n        SDOL.append(x)\n    r[c]['SDOL']=SDOL\n\n    r[c]['STOP_LOSS_PH']=r[c].iloc[:,13]+(NUM_SD*r[c].iloc[:,15])\n    r[c]['STOP_LOSS_PL']=r[c].iloc[:,14]-(NUM_SD*r[c].iloc[:,16])\n\n    buy_trade=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,3]<r[c].iloc[i+5,14]:\n            buy_trade.append('Buy')\n        else:\n            buy_trade.append(0)\n    r[c]['buy_trade']=buy_trade\n\n    sell_trade=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,2]>r[c].iloc[i+5,13]:\n            sell_trade.append('Sell')\n        else:\n            sell_trade.append(0)\n    r[c]['sell_trade']=sell_trade\n\n    ## below is the enter buy, exit buy and daily return buy\n\n    Enter_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,19]=='Buy':\n            Enter_B.append(r[c].iloc[i+5,14])\n        else:\n            Enter_B.append(0)\n    r[c]['Enter_B']=Enter_B\n\n    Exit_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,19]=='Buy'and r[c].iloc[i+5,18]>r[c].iloc[i+5,3]:\n            Exit_B.append(r[c].iloc[i+5,18])\n        else:\n            Exit_B.append(r[c].iloc[i+5,4])\n    r[c]['Exit_B']=Exit_B\n\n    D_return_B=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,21]==0:\n            D_return_B.append(0)\n        else:\n            D_return_B.append((r[c].iloc[i+5,22]-r[c].iloc[i+5,21])\/r[c].iloc[i+5,4])\n    r[c]['D_return_B']=D_return_B\n\n    ## below is the enter sell, exit sell and daily return sell\n    Enter_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,20]=='Sell':\n            Enter_S.append(r[c].iloc[i+5,13])\n        else:\n            Enter_S.append(0)\n    r[c]['Enter_S']=Enter_S\n\n    Exit_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,20]=='Sell'and r[c].iloc[i+5,2]>r[c].iloc[i+5,17]:\n            Exit_S.append(r[c].iloc[i+5,17])\n        else:\n            Exit_S.append(r[c].iloc[i+5,4])\n    r[c]['Exit_S']=Exit_S\n\n    D_return_S=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,24]==0:\n            D_return_S.append(0)\n        else:\n            D_return_S.append((r[c].iloc[i+5,24]-r[c].iloc[i+5,25])\/r[c].iloc[i+5,4])\n    r[c]['D_return_S']=D_return_S\n\n    r[c]['D_return_buy&sell']=r[c].iloc[:,23]+r[c].iloc[:,26]\n\n    cumulative_D_return=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=cumulative_D_return[i-1+5]+r[c].iloc[i+5,27]\n        cumulative_D_return.append(x)\n    r[c]['cumulative_D_return']=cumulative_D_return\n\n    HWM=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(HWM[i-1+5],r[c].iloc[i+5,28])\n        HWM.append(x)\n    r[c]['HWM']=HWM\n\n    DD=[]\n    for i in range(0,len(r[c])):\n        if r[c].iloc[i,28]<r[c].iloc[i,29]:\n            DD.append(r[c].iloc[i,28]-r[c].iloc[i,29])\n        else:\n            DD.append(0)\n    r[c]['DD']=DD\n\n    ## below is the DD and rebound control\n    Recent_low=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,30]==0:\n            Recent_low.append(0)\n        else:\n            Recent_low.append(min(r[c].iloc[i+5,30],Recent_low[i+5-1]))\n    r[c]['Recent_low']=Recent_low\n\n    DDC_index_list=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5-1,30]>DDC_index:\n            DDC_index_list.append(1)\n        else:\n            DDC_index_list.append(0)\n    r[c]['DDC_index']=DDC_index_list\n\n    Rebound_list=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        if r[c].iloc[i+5,32]==0 and (r[c].iloc[i+5-1,30]-r[c].iloc[i+5-1,31])>Rebound:\n            Rebound_list.append(1)\n        else:\n            Rebound_list.append(0)\n    r[c]['Rebound']=Rebound_list\n\n    DR_DDC=[]\n    for i in range(0,len(r[c])):\n        DR_DDC.append(r[c].iloc[i,27]*(max(r[c].iloc[i,32],r[c].iloc[i,33])))\n    r[c]['DR_DDC']=DR_DDC\n\n    CR_DDC=[0,0,0,0,0]\n    for i in range(0,len(r[c])-5):\n        CR_DDC.append(CR_DDC[i+5-1]+r[c].iloc[i+5,34])\n    r[c]['CR_DDC']=CR_DDC\n\n    HWM_DDC=[0,0,0,0,0]\n    for i in range (0,len(r[c])-5):\n        x=max(HWM_DDC[i-1+5],r[c].iloc[i+5,35])\n        HWM_DDC.append(x)\n    r[c]['HWM_DDC']=HWM_DDC\n\n    DD_DDC=[]\n    for i in range(0,len(r[c])):\n        if r[c].iloc[i,35]<r[c].iloc[i,36]:\n            DD_DDC.append(r[c].iloc[i,35]-r[c].iloc[i,36])\n        else:\n            DD_DDC.append(0)\n    r[c]['DD_DDC']=DD_DDC\n\n\n    SD_daily=stdev(r[c].iloc[:,27])\n    Return_daily=mean(r[c].iloc[:,27])\n    annual_return=Return_daily*260\n    annual_SD=SD_daily*(260**(1\/2))\n    HWM_no_DDC=max(r[c].iloc[:,29])\n    MDD_no_DDC=min(r[c].iloc[:,30])\n    RR_ratio=annual_return\/annual_SD\n    HWM_DDC=max(r[c].iloc[:,36])\n    MDD_DDC=min(r[c].iloc[:,37])\n\n    return(r[c])\nr={}\nmeanrev_sd=[5.0, 0.5, 0.5, 0.5, 0.5, 1.0, 0.5, 1.5, 1.5, 0.5, 2.0, 1.0, 1.0, 0.5, 0.5, 1.5, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 2.5, 0.5, 0.5,1.0, 0.5, 2.0, 1.5, 0.5, 0.5, 2.0, 1.0, 0.5, 5.0, 1.0, 0.5]\nfor i in range(39):\n    mean_reversion(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],meanrev_sd[i])","358ee41d":"def grid_DDC(data,name,TA,significance,increase,decrease,Initial_Margin,MinVolUnit,transaction_cost,start,end,pct_limit):\n    c=name\n    new_colname = ['Date','Open_x','High_x','Low_x','Close']\n    data.columns = new_colname\n    n=1\/significance\n    TP= data.iloc[:786,4].mean()\n    g[c]=data.loc[start:end,:]\n    ddc=TP-TP*pct_limit\n    rf=0.0025\n    g[c]['pctdiff']=np.ceil((g[c].iloc[:,4]\/TP-1)*n)\/n\n    g[c]['TargetAllocation']=1\n    g[c]['DDC']=0\n    for i in range(start,end):\n        g[c].loc[i,'DDC']=(g[c].loc[i,\"Low_x\"]<ddc)\n        if g[c].loc[i,'DDC']==True:\n            g[c].loc[i,\"TargetAllocation\"]=0\n        elif g[c].loc[i,'pctdiff']<0:\n            g[c].loc[i,\"TargetAllocation\"]=max(min(1,TA-g[c].loc[i,'pctdiff']\/significance*increase),0)\n        else:\n            g[c].loc[i,\"TargetAllocation\"]=max(min(1,TA-g[c].loc[i,'pctdiff']\/significance*decrease),0)\n\n    g[c][\"Position\"]=(Initial_Margin*g[c][\"TargetAllocation\"]\/TP\/MinVolUnit).astype(int)*MinVolUnit\n    g[c].loc[start,\"TradeVol_1\"]=g[c].loc[start,\"Position\"]\n    for i in range(start+1,end):\n        g[c].loc[i,\"TradeVol_1\"]=g[c].loc[i,\"Position\"]-g[c].loc[i-1,\"Position\"]\n    g[c].loc[start,'Transaction_Cost']=0\n    for i in range(start+1,end):\n        g[c].loc[i,'Transaction_Cost']=abs(g[c].loc[i,\"Open_x\"]*g[c].loc[i-1,\"TradeVol_1\"]*transaction_cost)\n    \n    \n    g[c].loc[start,'OtherAsset']=0\n    for i in range(start+1,end):\n        g[c].loc[i,'OtherAsset']=g[c].loc[i-1,'Position']*g[c].loc[i,\"Close\"]\n    \n    g[c].loc[start,'Cash']=Initial_Margin\n    for i in range(start+1,end):\n        if g[c].loc[i-1,'DDC']==True:\n            g[c].loc[i,\"Cash\"]=g[c].loc[i-1,\"Cash\"]*(1+rf\/252)-g[c].loc[i-1,\"TradeVol_1\"]*ddc-g[c].loc[i,'Transaction_Cost']\n        else:\n            g[c].loc[i,\"Cash\"]=g[c].loc[i-1,\"Cash\"]*(1+rf\/252)-g[c].loc[i-1,\"TradeVol_1\"]*g[c].loc[i,\"Open_x\"]-g[c].loc[i,'Transaction_Cost']\n    \n    g[c]['TotalAsset']=g[c]['OtherAsset']+g[c]['Cash']\n    g[c].loc[start,'NAV']=1\n    for i in range(start+1,end):\n        g[c].loc[i,'NAV']=g[c].loc[i,'TotalAsset']\/Initial_Margin\n        g[c].loc[i,'NAV_Ret']=g[c].loc[i,'NAV']\/g[c].loc[i-1,'NAV']-1\n        g[c]['cumret']=g[c]['NAV_Ret'].cumsum()\n\n    SD_daily=stdev(g[c].loc[start+1:,'NAV_Ret'])\n    Return_daily=mean(g[c].loc[start+1:,'NAV_Ret'])\n    annual_return=Return_daily*260\n    annual_SD=SD_daily*(260**(1\/2))\n    if annual_SD < 0.001:\n        annual_SD=0.001\n    pass\n    RR_ratio=annual_return\/annual_SD\n    g_d[c]=g[c]\n    return(g_d[c])","4871906f":"g_d={}\npct_limit=0.35\nfor i in range(39):\n    grid_DDC(df_merged.iloc[:,[0,4*i+1,4*i+2,4*i+3,4*i+4]],asset_list[i],0.3,0.0001,0.1,0.1,10000,1,0,786,937,pct_limit)","e88cf189":"## trend always before mean_aversion\n## get daily return of all securities in trend strategy\nperform_rank=d[asset_list[0]].iloc[:,[0,34]]\nfor i in range(1,39):\n    perform_rank=perform_rank.merge(d[asset_list[i]].iloc[:,[0,34]],on='Date')\n## get daily return of all securities in mean reversion strategy\nfor i in range(0,39):\n    perform_rank=perform_rank.merge(r[asset_list[i]].iloc[:,[0,34]],on='Date')\n## get daily return of all securities in grid trading strategy\nfor i in range(0,39):\n    perform_rank=perform_rank.merge(g_d[asset_list[i]].iloc[:,[0,15]],on='Date')\nperform_rank.head(10)","35d14f7a":"## calculate cumulative return for each secutiry from trend every 5 days\nfor i in range(1,40):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_TR'+str(i)]=cum_R_list\n## calculate cumulative return for each secutiry from mean reversion every 5 days\nfor i in range(40,79):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_MR'+str(i)]=cum_R_list\n## calculate cumulative return for each secutiry from grid trading every 5 days\nfor i in range(79,118):\n    cum_R_list=[]\n    cum_R_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            cum_R_list.append(perform_rank.iloc[j,i]+perform_rank.iloc[j-1,i]+perform_rank.iloc[j-2,i]+perform_rank.iloc[j-3,i]+perform_rank.iloc[j-4,i])\n        else:\n            cum_R_list.append(0)\n    perform_rank['cum_R_GT'+str(i)]=cum_R_list\n    \n## achieve ranking of cumulative return for trend:\nperform_rank = perform_rank.join(perform_rank.iloc[:,118:157].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_TR_rank'))\n\n## achieve ranking of cumulative return for mean reversion:\nperform_rank = perform_rank.join(perform_rank.iloc[:,157:196].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_MR_rank'))  \n\n## achieve ranking of cumulative return for grid trading:\nperform_rank = perform_rank.join(perform_rank.iloc[:,196:235].rank(axis=1, ascending=False).fillna(40).astype(int).add_suffix('_GT_rank'))   \nperform_rank.head(10)","065a49f1":"##Paramaters that can change\nreserve_account=100000\ntrading_account=100000\nprofit_account=0\ntop_1_given=0.4\ntop_2_given=0.3\ntop_3_given=0.15\ntop_4_given=0.1\ntop_5_given=0.05\nleverage=1\n\n## identify top 5 securities of each strategy on each trading day,and decided trend\/mean\/gridtrading reversion\nrocket=perform_rank.iloc[:,0:1]\ntop5_cumR_trend=[]\ntop5_cumR_MR=[]\ntop5_cumR_grid=[]\ntop5_cumR_trend.append(0)\ntop5_cumR_MR.append(0)\ntop5_cumR_grid.append(0)\nfor i in range(1,len(perform_rank)):\n    if int(i\/5)==i\/5:\n        x=sum(sorted(perform_rank.iloc[i,118:157],reverse=True)[:5])\n        y=sum(sorted(perform_rank.iloc[i,157:196],reverse=True)[:5])\n        z=sum(sorted(perform_rank.iloc[i,196:235],reverse=True)[:5])\n        top5_cumR_trend.append(x\/(x+y+z))\n        top5_cumR_MR.append(y\/(x+y+z))\n        top5_cumR_grid.append(z\/(x+y+z)) ##z\/(x+y+z)\n    else:\n        top5_cumR_trend.append(0)\n        top5_cumR_MR.append(0)\n        top5_cumR_grid.append(0)\nrocket['trend_weight']=top5_cumR_trend\nrocket['mean_reversion_weight']=top5_cumR_MR\nrocket['grid_weight']=top5_cumR_grid\nrocket","b44b4ef6":"## assign weight of money to top 5 securities in trend strategy\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,234+i]==1:\n                x=top_1_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==2:\n                x=top_2_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==3:\n                x=top_3_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==4:\n                x=top_4_given*rocket.iloc[j,1]\n            elif perform_rank.iloc[j,234+i]==5:\n                x=top_5_given*rocket.iloc[j,1]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_trend'+str(i)]=weight_list\n    \n## assign weight of money to top 5 securities in mean_reversion\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,273+i]==1:\n                x=top_1_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==2:\n                x=top_2_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==3:\n                x=top_3_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==4:\n                x=top_4_given*rocket.iloc[j,2]\n            elif perform_rank.iloc[j,273+i]==5:\n                x=top_5_given*rocket.iloc[j,2]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_MR'+str(i)]=weight_list\n    \n## assign weight of money to top 5 securities in grid_trading\nfor i in range(1,40):\n    weight_list=[]\n    weight_list.append(0)\n    for j in range(1,len(perform_rank)):\n        if int(j\/5)==(j\/5):\n            if perform_rank.iloc[j,312+i]==1:\n                x=top_1_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==2:\n                x=top_2_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==3:\n                x=top_3_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==4:\n                x=top_4_given*rocket.iloc[j,3]\n            elif perform_rank.iloc[j,312+i]==5:\n                x=top_5_given*rocket.iloc[j,3]\n            else:\n                x=0\n            weight_list.append(x)\n        else:\n            weight_list.append(weight_list[j-1])\n    rocket['weight_GT'+str(i)]=weight_list\n    \n## calculate dayily profit or loss in dollar amount of total portfolio\ndaily_gain=[]\nfor i in range (len(perform_rank)):\n    m=[]\n    for j in range(1,118):\n        x=perform_rank.iloc[i,j]*rocket.iloc[i,j+3]\n        m.append(x)\n    y=(1+sum(m))*trading_account\n    daily_gain.append(y)\nrocket['daily_dollar']=daily_gain\n\n## calculate daily profit\ndaily_profit=[]\nfor i in range(len(rocket)):\n    if rocket.iloc[i,121]>trading_account:\n        daily_profit.append(rocket.iloc[i,121]-trading_account)\n    else:\n        daily_profit.append(0)\nrocket['profit']=daily_profit\n\n## calculate daily loss:\ndaily_loss=[]\nfor i in range(len(rocket)):\n    if rocket.iloc[i,121]<trading_account:\n        daily_loss.append(rocket.iloc[i,121]-trading_account)\n    else:\n        daily_loss.append(0)\nrocket['loss']=daily_loss\n\n## calculate remaining in reserve account:\nreserve=[]\nreserve.append(reserve_account)\nfor i in range(1,len(rocket)):\n    x=reserve[i-1]+rocket.iloc[i,123]\n    reserve.append(x)\nrocket['reserve_account_remaining']=reserve\n\n## calculate profit in total\nprofit_total=[]\nprofit_total.append(0)\nfor i in range(1,len(rocket)):\n    profit_total.append(profit_total[i-1]+rocket.iloc[i,122])\nrocket['profit_total']=profit_total\n\n## calculate portfolio daily_return:\ndaily_return=[]\nfor i in range(len(rocket)):\n    daily_return.append((rocket.iloc[i,121]-trading_account)\/(trading_account-(leverage-1)*100000))\nrocket['daily_return']=daily_return\n\n    \nrocket.head(20)","990044c8":"performance_eva=rocket.iloc[:,[0,126]]\nperformance_eva=performance_eva.fillna(0)\ncumulative_return=[]\ncumulative_return.append(0)\nfor i in range(1,len(performance_eva)):\n    cumulative_return.append(cumulative_return[i-1]+performance_eva.iloc[i,1].astype(float))\nperformance_eva['cum_return']=cumulative_return\n\n## calculate max DD\nmaxdd_nostoploss=[]\nfor i in range(len(performance_eva)):\n    maxdd_nostoploss.append(min((performance_eva.iloc[i,2]-max(performance_eva.iloc[0:i+1,2])),0))\nperformance_eva['max_DD']=maxdd_nostoploss\n\n## calculate winning rate\nwinner=[]\nfor i in range(len(performance_eva)):\n    if performance_eva.iloc[i,1]>0:\n        winner.append(1)\n    else:\n        winner.append(0)\n\n\nprint('our strategy annual return is '+str(performance_eva['daily_return'].mean()*252))\nprint('our strategy annual standard deviation is '+ str(stdev(performance_eva['daily_return'])*(252**0.5)))\nprint('our strategy RR ratio is '+str((performance_eva['daily_return'].mean()*252)\/(stdev(performance_eva['daily_return'])*(252**0.5))))\nprint('our strategy max DD is '+ str(performance_eva['max_DD'].min()))\nprint('our strategy winning rate is '+ str(sum(winner)\/len(performance_eva)))","06314ee2":"plt.bar(rocket['Date'],rocket['reserve_account_remaining'] , color='r')\nplt.bar(rocket['Date'],rocket['profit_total'], bottom=rocket['reserve_account_remaining'], color='b')\nplt.xlabel(\"Date\")\nplt.ylabel(\"dollar value\")\nplt.title(\"Change in Reserve account and Profit account\")\nplt.legend(['reserve_account','profit_account'])\nplt.show()","756ac951":"plt.plot(performance_eva['Date'],performance_eva.iloc[:,2],linewidth=2,color='blue')\nplt.plot(performance_eva['Date'],performance_eva.iloc[:,3],linewidth=2,color='red')\nplt.legend(['strategy_return','max_DD'])\nplt.xlabel(\"Date\")\nplt.ylabel(\"%\")\nplt.title(\"Performance\")\nplt.show()","c65979c0":"Date_plt=[]\ntrend_weight_plt=[]\nMR_weight_plt=[]\nGT_weight_plt=[]\nfor i in range(len(rocket)):\n    if int(i\/5)==i\/5:\n        Date_plt.append(rocket.iloc[i,0])\n        trend_weight_plt.append(rocket.iloc[i,1])\n        MR_weight_plt.append(rocket.iloc[i,2])\n        GT_weight_plt.append(rocket.iloc[i,3])\n    pass\n        \nplt.bar(Date_plt,trend_weight_plt , color='r')\nplt.bar(Date_plt,MR_weight_plt, bottom=trend_weight_plt, color='b')\nplt.bar(Date_plt,GT_weight_plt, bottom=np.array(MR_weight_plt)+np.array(trend_weight_plt), color='g')\nplt.xlabel(\"Date\")\nplt.ylabel(\"weights\")\nplt.title(\"Capital Allocation\")\nplt.legend(['Trend','Mean Reversion','Grid Trading'])\nplt.show()","a160612d":"plot2=g[asset_list[0]].iloc[:,[0,16]]\nfor i in range(1,39):\n    plot2=plot2.merge(g[asset_list[i]].iloc[:,[0,16]],on='Date')\n    plot2\n\n## get equal_weight and show in chart in red\nequal_weight=[]\nfor i in range(len(plot2)):\n    x=plot2.iloc[i,1:].sum()*(1\/39)\n    equal_weight.append(x)\nplot1['equal_weight']=equal_weight\n    \nplt.figure(figsize=(25,15))   \nfor i in range(39):\n    plt.plot(plot2['Date'],plot2.iloc[:,i+1:i+2])\n\nplot_list=asset_list[0:39]\nplot_list.append('equal_weight')\nplot_list.append('our_steategy')\nplt.plot(plot2['Date'],plot.iloc[:,40],linewidth=4,color='red')\n## add our strategy performance here!\nplt.plot(plot2['Date'],performance_eva.iloc[:,2],linewidth=4,color='blue')\nplt.legend(plot_list)\nplt.figure(figsize=(300,400))\nplt.show()","06dae1e1":"## 1.1 import package","e6010b4d":"# Part 1 Input ingredients","f5c7a955":"a = df.where().dropna(how='all').dropna(axis=1)\na = df_merged.where(df_merged=='1,008.12').dropna(how='all').dropna(axis=1)\na.index()\ndf_merged.iloc[:,1:]=df_merged.iloc[:,1:].astype(float)\n(df_merged.columns == 'US_Soybean').nonzero()\n\n--how to sort a row and pick top N and sum\ndata_test = {'col1': [1,2,3,4], 'col2': [20, 21, 19, 18],'col3': [6,4,7,18],'col4': [13,34,54,11]}\ndata_test1=pd.DataFrame(data_test)\nsum(sorted(data_test1.iloc[0,:],reverse=True)[:2])\n\n--how to change column name\ntrend_column=[]\ntrend_column.append('Date')\ntrend_column_switch=trend_column+asset_list[0:39]\ntrend_column_switch=[s + '_MR_DR' for s in trend_column_switch]\ntrend_column_switch\nperform_rank = perform_rank.set_axis(trend_column_switch, axis=1, inplace=False)","4bbf3756":"# Part 2 Making our two powerful engines!","469006c8":"## 1.2 import data","34f084ce":"# Part 3 Construct the structure of Rocket ","5b8a5ad9":"monthly_return=performance_eva.iloc[:,[0,2]]\nmonthly_return=monthly_return.set_index('Date')\nmonthly_return=monthly_return.resample('BM').ffill()\n\nmonth_return=[]\nmonth_return.append(0)\nfor i in range(1,len(monthly_return)):\n    x=monthly_return.iloc[i,0]-monthly_return.iloc[i-1,0]\n    month_return.append(x)\nmonthly_return['month_return']=month_return\nbefore_list=[0,0,0,0,0,0]\nafter_list=[0,0,0,0]\nfinal_list=before_list+month_return+after_list\n\nmatrix_df=pd.DataFrame(np.array(final_list).reshape(5,12))\nmatrix_df.columns=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nmatrix_df.index=['2017','2018','2019','2020','2021']\nimport seaborn as sns\ncm = sns.light_palette(\"green\", as_cmap=True)\nmatrix_df.style.background_gradient(cmap=cm)","8987f0da":"## 2.1 Creat two main engines, trend and mean reversion","0b34845e":"### 4.3.1 visualize trend performace of each security","10786201":"### 4.3.2 visualize mean_reversion performace of each security","027ff030":"# Introduction","46976c97":"## 1.4 check if there is NaN in dataframe","c84761ee":"## 3.2 Fill the designed structure in Python!","e6b4c464":"## 1.3 clean and merge data","822ffe62":"## 4.1 strategy performance evaluation in numbers","e65c3bc8":"## 4.2 visiualize the performance of our strategy!","102757ff":"## debug package","e75ce7ee":"## 4.3 Compare our strategy with equal_weighted strategy and solely holding strategy","e6267520":"![image.png](attachment:04650d31-9756-49d6-bdde-0f25a156ece6.png)","5432dfab":"# Part 4 Performance Evaluation","a2f46d84":"## 2.2 Let all 39 securities try momentum and mean reversion strategy","072a0055":"### 4.3.3 visualize grid trading performace of each security","b2ece921":"## 1.5 get asset_list","04ebab48":"## 3.1 Making the performance ranking dataframe","48343767":"# **Apply DDC to Grid Trading**"}}