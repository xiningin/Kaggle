{"cell_type":{"0462ea33":"code","b69d494d":"code","dc6f5e4f":"code","c1f280f7":"code","d9ea1447":"code","6ed34435":"code","9f3ca1c8":"code","26237f5d":"code","6853f68c":"code","f6df8da8":"code","cc229c06":"code","e24d8f0f":"code","ea80cb1b":"code","75ce4721":"code","034ca984":"code","f71d9afb":"code","4e8efb5c":"code","5629c1e8":"code","7f1decae":"code","0f9fc271":"code","100cdb50":"code","6e7381d4":"code","c3b68528":"code","d7775143":"code","39c840e6":"code","3457c7d7":"code","d039c387":"code","5bffd41d":"code","afba3da9":"code","6fa1d449":"code","a0de1335":"code","04456df8":"code","842c0e2e":"code","1896dfb7":"code","5209ae0d":"code","86c25c58":"code","d2603a41":"code","239b6736":"code","864d9edc":"code","7ec2b48c":"code","5b6ec8d1":"code","e6350443":"code","78b808da":"code","5c31aba1":"code","2c848aaa":"code","92fbfbea":"code","450da6a4":"code","09207503":"code","319ce196":"code","5f9a3225":"markdown","e03451f0":"markdown","05c32164":"markdown","683e9b17":"markdown","f131e86b":"markdown","c9da7d21":"markdown","fff25ddb":"markdown","0e7c2f36":"markdown","304fc889":"markdown","c2864693":"markdown","aef1cb17":"markdown","5a83dea1":"markdown","33fb5d04":"markdown","d2b62483":"markdown","09383399":"markdown","d06a8ffc":"markdown","fb74f12e":"markdown","af850e38":"markdown","5475299c":"markdown","3166a62e":"markdown","a150b17f":"markdown","79df517c":"markdown","8362f484":"markdown","31ffb5b1":"markdown","23691ec2":"markdown","fda15a6e":"markdown","6df436b2":"markdown","21f3e175":"markdown","3224ee89":"markdown","668e395d":"markdown","c595a354":"markdown","b5e08f53":"markdown","083380a7":"markdown","c8315c2f":"markdown","b4927c2b":"markdown","7e045bd7":"markdown","8a79a98d":"markdown","8f387e83":"markdown","bbb36082":"markdown","509dbb84":"markdown","18ce9474":"markdown"},"source":{"0462ea33":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nimport re\nfrom collections import Counter\nfrom PIL import Image\n\n\n\n%matplotlib inline","b69d494d":"df_ta_reviews = pd.read_csv('..\/input\/krakow-ta-restaurans-data-raw\/TA_restaurants_curated.csv', encoding='utf8', index_col=0)","dc6f5e4f":"df_ta_reviews.head()","c1f280f7":"df_ta_reviews.info()","d9ea1447":"df_ta_reviews['Ranking'] = df_ta_reviews['Ranking'].astype('category')\ndf_ta_reviews['Number of Reviews'] = df_ta_reviews['Number of Reviews'].fillna(0)\ndf_ta_reviews['Number of Reviews'] = df_ta_reviews['Number of Reviews'].round(0).astype('int')","6ed34435":"# As per the dataset description, this is a univocal identifier for each restaurant. I've found duplicated rows\n# that I'll remove and keep the first only\nprint(df_ta_reviews[df_ta_reviews.ID_TA.duplicated() == True].ID_TA.count())\ndf_ta_reviews = df_ta_reviews.drop_duplicates('ID_TA', keep='first')\ndf_ta_reviews.info()","9f3ca1c8":"df_ta_reviews.rename(columns={'Name': 'name',\n            'City': 'city',\n            'Ranking': 'ranking',\n            'Rating': 'rating',\n            'Reviews': 'reviews',\n            'Cuisine Style':'cuisine_style',\n            'Price Range':'price_range',\n            'Number of Reviews':'reviews_number'}, inplace=True)","26237f5d":"print(df_ta_reviews[df_ta_reviews.rating == -1.0].city.count())\ndf_ta_reviews.rating.replace(-1, 0, inplace=True)","6853f68c":"# I'll work on a copy of the dataset I've just adjusted\nta_reviews = df_ta_reviews.copy()","f6df8da8":"# all the unique Restaurants and cities\nprint(\"Single Restaurants: {}\".format(ta_reviews.shape[0]))\nprint(\"Cities: {}\".format(ta_reviews.city.nunique()))","cc229c06":"fig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\ndf_restaurants_in_cities = ta_reviews.groupby('city').name.count().sort_values(ascending = False)\n\nplt.bar(x = df_restaurants_in_cities.index, height=df_restaurants_in_cities, color=\"#4ECDC4\");\nplt.xticks(rotation='45');\nplt.ylabel('Number of Restaurants');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Number of restaurants in each city');\nax.tick_params(direction='out', length=0, width=0, colors='black');","e24d8f0f":"df_reviews_count = ta_reviews.groupby('city').reviews_number.sum().sort_values(ascending=False)\ncount_millions = np.arange(0, 2.14e6, 20e4)\ncount = np.arange(0, 2.6, 0.25)\n\nfig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = df_reviews_count.index, height=df_reviews_count, color=\"#4ECDC4\");\nplt.xticks(rotation='45');\nplt.yticks(count_millions, count);\nplt.ylabel('Total Number of Reviews (Million)');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Number of reviews for each city');\nax.tick_params(direction='out', length=0, width=0, colors='black');","ea80cb1b":"tot_reviews_city = pd.DataFrame(ta_reviews.groupby('city').reviews_number.sum())\ntot_places_city = pd.DataFrame(ta_reviews.groupby('city').name.count())\n\nreviews_per_city = pd.merge(tot_reviews_city, tot_places_city, how='outer', on='city')\nreviews_per_city.rename(columns={'name':'number_of_places'}, inplace=True)\nreviews_per_city['avg_reviews'] = round(reviews_per_city.reviews_number \/ reviews_per_city.number_of_places, 2)\nreviews_per_city.sort_values(by='avg_reviews', ascending=False, inplace=True)\n\nfig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = reviews_per_city.index, height=reviews_per_city.avg_reviews, color=\"#4ECDC4\");\nplt.xticks(rotation='45');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Average Number of reviews for each city');\nax.tick_params(direction='out', length=0, width=0, colors='black');","75ce4721":"g = sb.FacetGrid(ta_reviews, col=\"city\", col_wrap=5);\ng.map(sb.boxplot, \"rating\", order = [1, 2, 3, 4, 5]);\nax.set_xticklabels([0, 1, 2, 3, 4, 5]);","034ca984":"# first, let's replace the notation used in the dataset for the three price ranges ($, $$ - $$$, $$$$) with \n# something more intuitive (cheaper - medium - higher ranges) and replace the NaN ones (set as not available)\n\nta_reviews['price_range'] = ta_reviews['price_range'].fillna('NA')\nprice_ranges = {'$': 'Cheaper', '$$ - $$$': 'Medium', '$$$$': 'Higher', 'NA': 'NotAvailable'}\nta_reviews['price_range'] = ta_reviews.price_range.map(price_ranges)","f71d9afb":"# filtering out the Not Available price range. In this situation, it doesn't provide much interesting info\nta_valid_reviews = ta_reviews[ta_reviews.price_range != 'NotAvailable']\ncities = ta_valid_reviews.city.unique()\n\nfig_price_ranges, ax_price_ranges = plt.subplots(16,2,figsize=(15,40))\n\nind = 1\nfor i in range(1,17):\n    for j in range(1,3):\n        if (ind <= 31):\n            city = cities[ind-1]\n            ind += 1\n            city_revs = ta_valid_reviews[ta_valid_reviews.city == city]\n            df_revs = pd.DataFrame(city_revs.groupby(['city', 'price_range']).name.count())\n            df_revs = df_revs.reset_index()\n            fig_price_ranges.add_subplot(ax_price_ranges[i-1, j-1])\n            sb.barplot(data=df_revs, x = 'city', y = 'name', hue='price_range', hue_order = ['Cheaper', 'Medium', 'Higher'], palette = ['#4ECDC4', '#FFE66D', '#FF6B6B']);\n            plt.ylabel('Reviews per Price Range');\n","4e8efb5c":"fig_price_ranges, ax_price_ranges = plt.subplots(16,2,figsize=(20,40))\n\nind = 1\nfor i in range(1,17):\n    for j in range(1,3):\n        if (ind <= 31):\n            city = cities[ind-1]\n            ind += 1\n            city_revs = ta_valid_reviews[ta_valid_reviews.city == city]\n            df_revs = pd.DataFrame(city_revs.groupby(['city', 'price_range']).rating.mean())\n            df_revs = df_revs.reset_index()\n            fig_price_ranges.add_subplot(ax_price_ranges[i-1, j-1])\n            sb.barplot(data=df_revs, x = 'city', y = 'rating', hue='price_range', hue_order = ['Cheaper', 'Medium', 'Higher'], palette = ['#4ECDC4', '#FFE66D', '#FF6B6B']);\n            plt.ylabel('Rating per Price Range');","5629c1e8":"# summing the reviews by city and price range\nreviews_city_price = pd.DataFrame(ta_valid_reviews.groupby(['city', 'price_range']).reviews_number.sum())\n# retrieving the number of restaurants by city and price\nplaces_city_price = pd.DataFrame(ta_valid_reviews.groupby(['city', 'price_range']).name.count())\n\n# let's add the corresponding city\nreviews_city_price['restaurants_number'] = places_city_price['name']\n\n# let's calculate the average number of reviews for each price range\nreviews_city_price['avg_reviews'] = round(reviews_city_price.reviews_number \/ reviews_city_price.restaurants_number, 1)","7f1decae":"fig_price_ranges, ax_price_ranges = plt.subplots(16,2,figsize=(20,40))\n\nind = 1\nfor i in range(1,17):\n    for j in range(1,3):\n        if (ind <= 31):\n            city = cities[ind-1]\n            ind += 1\n            city_revs = pd.DataFrame(reviews_city_price.loc[(city), 'avg_reviews'])\n            city_revs['city'] = city\n            city_revs = city_revs.reset_index()\n            fig_price_ranges.add_subplot(ax_price_ranges[i-1, j-1])\n            sb.barplot(data=city_revs, x = 'city', y = 'avg_reviews', hue='price_range', hue_order = ['Cheaper', 'Medium', 'Higher'], palette = ['#4ECDC4', '#FFE66D', '#FF6B6B']);            \n            plt.ylabel('Avg # of Revs');","0f9fc271":"# I create a new dataframe with just the columns that I consider more interesting\ncuisines = ta_reviews.loc[:, ['city', 'name', 'cuisine_style', 'rating', 'reviews_number', 'reviews']]\n\n# first of all, let's clean the content of cuisine_style by removing the square brakets\ncuisines.cuisine_style = cuisines.cuisine_style.str.replace('[', '')\ncuisines.cuisine_style = cuisines.cuisine_style.str.replace(']', '')\n\n# renaming the columns\ncuisines.columns = ['city', 'place', 'cuisine_style', 'rating', 'reviews_number', 'reviews']\ncuisines.head(10)","100cdb50":"# now i create a row for each cuisine_type available for each restaurant. I'll keep the rating and reviews_number\n# the same for each cuisine_style for each restaurant\n\n# removing restaurants with no cuisine_style available\nall_cuisines = cuisines[cuisines.cuisine_style.isna() == False]\n\ndic = []\n\nfor i in all_cuisines.iterrows():\n    # splitting the cuisine_style by commas so that i can create a brand new row of data for just that cuisine\n    for j in range(0, len(i[1].cuisine_style.split(', '))):\n        dic.append({\n            'city': i[1].city,\n            'place': i[1].place,\n            'cuisine_style': i[1].cuisine_style.split(', ')[j].replace('\\'', ''),\n            'rating': i[1].rating,\n            'reviews_number': i[1].reviews_number\n        })\n    \ncuisines_list = pd.DataFrame(data=dic)","6e7381d4":"cuisines_list.head(15)","c3b68528":"cuisines_list.cuisine_style.nunique()","d7775143":"df_cuisine_style = cuisines_list.cuisine_style.value_counts().sort_values(ascending = False)[:10]\n\n\ncount_ths = np.arange(0, 3.3e4, 5e3)\ncount = np.arange(0, 35, 5)\n\nfig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = df_cuisine_style.index, height=df_cuisine_style, color=\"#4ECDC4\");\n\nplt.yticks(count_ths, count);\nplt.ylabel('Total Places (Thousands)');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Top 10 most common cuisines');\nax.tick_params(direction='out', length=0, width=0, colors='black');","39c840e6":"df_cuisine_style = cuisines_list.groupby('cuisine_style').reviews_number.sum().sort_values(ascending=False)[:10]\n\ncount_ths = np.arange(0, 9.3e6, 5e5)\ncount = np.arange(0, 9.3, 0.5)\n\nfig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = df_cuisine_style.index, height=df_cuisine_style, color=\"#4ECDC4\");\n\nplt.yticks(count_ths, count);\nplt.ylabel('Total Reviews (Million)');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Top 10 most reviewed cuisines');\nax.tick_params(direction='out', length=0, width=0, colors='black');","3457c7d7":"#cuisines_list.head(3)\ncity_styles = cuisines_list.groupby(['city', 'cuisine_style']).rating.count().reset_index()\ncity_variety = city_styles.groupby('city').cuisine_style.count().sort_values(ascending = False)\n\nfig = plt.figure(figsize=(20, 13))\nax = plt.subplot();\n\nax.barh(city_variety.index[::-1],city_variety.values[::-1], align='center', color=\"#4ECDC4\");\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);","d039c387":"# recovering the index of the 10 most reviewed cuisine styles\ntop_cuisines_index = cuisines_list.groupby('cuisine_style').reviews_number.sum().sort_values(ascending=False)[:10].index\n\n# filtering data\ntop_cuisines= pd.DataFrame(cuisines_list[cuisines_list.cuisine_style.isin(top_cuisines_index)])","5bffd41d":"top_cuisines.info()","afba3da9":"# not all cities have NaN ratings, I'll make a list of only the ones who do\nno_rating_cities = top_cuisines[top_cuisines.rating.isna()].city.unique()\n\n# and then I calculate the average rating by City + Cuisine_Style and I'll assign that value \n# to the NaN rating cols\n\nfor i in range(0,10):\n    style = top_cuisines_index[i]\n    for c in range(0, len(no_rating_cities)):\n        city = no_rating_cities[c]\n        # mean rating\n        mean_rating = round(top_cuisines[(top_cuisines.cuisine_style == style) & (top_cuisines.city == city)].rating.mean(), 1)\n        # raplacing NaN with the mean_rating\n        top_cuisines.loc[(top_cuisines.cuisine_style == style) & (top_cuisines.city == city) & (top_cuisines.rating.isna() == True), 'rating'] = mean_rating\n","6fa1d449":"top_style_revs = top_cuisines.groupby(['cuisine_style', 'city']).reviews_number.sum().reset_index()\n\ntop_where = pd.DataFrame(columns = ['cuisine_style', 'city', 'reviews_number'])\nfor style in top_cuisines.cuisine_style.unique():\n    per_stile = top_style_revs[top_style_revs.cuisine_style == style].sort_values(by='reviews_number', ascending = False).head(3)#.reset_index()\n    top_where = top_where.append(per_stile, ignore_index=True)","a0de1335":"city_col = ['#353431', '#91ad49', '#bb2532', '#eb5e28', '#cb5b2f', '#ccc5b9', '#ff2c55', '#4f5d2b']\ntop_where['color'] = top_where.city\nlbl_cities = top_where.city.unique()\n\n\ntop_where.color = top_where['color'].replace({\n    lbl_cities[0]: city_col[0],\n    lbl_cities[1]: city_col[1],\n    lbl_cities[2]: city_col[2],\n    lbl_cities[3]: city_col[3],\n    lbl_cities[4]: city_col[4],\n    lbl_cities[5]: city_col[5],\n    lbl_cities[6]: city_col[6],\n    lbl_cities[7]: city_col[7]\n    \n})\n\nplt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = top_where.cuisine_style, height=top_where.reviews_number, \n        color=top_where.color, fill=True, linewidth=.2, alpha = .8);\n\ntop = 1.74e6\ni = 0\nfor city in lbl_cities:\n    top = top - 0.08e6\n    plt.text(\n        9, top, city, ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n        bbox=dict(boxstyle=\"square,pad=0.3\", fc=city_col[i], ec=\"w\", lw=1))\n    i += 1\n\ny_lbls = ['0','200k','400k','600k','700k','1M','1.2M','1.4M','1.6M']\n\ny_ticks = np.arange(0, 1.8e6, .2e6);\n\nplt.yticks(y_ticks, y_lbls);\nplt.ylabel('Reviews');\nplt.xlabel('Top 10 Cuisine Styles');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\n","04456df8":"df_top_average = top_cuisines.groupby('cuisine_style').rating.mean().sort_values(ascending=False)\n\nranking = np.arange(0, 5, 0.25)\ncount = np.arange(0, 5, 0.25)\nlabels = [round(item, 2) for item in count]\n\nfig = plt.figure(figsize=(20, 9))\nax = plt.subplot();\n\nplt.bar(x = df_top_average.index, height=df_top_average, color=\"#4ECDC4\");\nplt.xticks(rotation='45');\nplt.yticks(ranking, labels);\nplt.ylabel('Total Reviews (Million)');\nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nplt.title('Top 10 most reviewed cuisines');\nax.tick_params(direction='out', length=0, width=0, colors='black');","842c0e2e":"# Southern European Cities\nsouth_eu_cities = ['Athens', 'Barcelona', 'Lisbon', 'Madrid', 'Milan', 'Oporto', 'Rome']\n# Center-North European Cities\ncn_eu_cities = ['Amsterdam', 'Berlin', 'Bratislava', 'Brussels', 'Budapest', 'Copenhagen', 'Dublin'\n                          , 'Edinburgh', 'Geneva', 'Hamburg', 'Helsinki', 'Krakow', 'Ljubljana', 'London',\n                         'Luxembourg', 'Lyon', 'Munich', 'Oslo', 'Paris', 'Prague', 'Stockholm', 'Vienna'\n                         , 'Warsaw', 'Zurich']\n\ndf_s_eu_cities = cuisines_list[cuisines_list.city.isin(south_eu_cities)]\ndf_cn_eu_cities = cuisines_list[cuisines_list.city.isin(cn_eu_cities)]\n","1896dfb7":"best_rating_south = df_s_eu_cities.groupby('cuisine_style').agg({'rating': ['mean', 'count'], 'reviews_number': 'sum'\n                                                                }).reset_index()\nrev_s = best_rating_south[['cuisine_style','reviews_number']]\n\nreviews_south = pd.DataFrame({\n    'cuisine_style': rev_s['cuisine_style'],\n    'revs': rev_s['reviews_number']['sum']\n}).sort_values(by='revs', ascending = False)[:10]\n\nrat_s = best_rating_south[['cuisine_style', 'rating']]\nrating_south = pd.DataFrame({\n    'cuisine_style': rat_s['cuisine_style'],\n    'rat_mean': rat_s['rating']['mean'],\n    'rat_count': rat_s['rating']['count']\n})\n","5209ae0d":"from matplotlib import cm\n\neuro = np.array(Image.open('..\/input\/europe\/v_europe_2.png'))\ngrn = ['#006400', '#007200', '#007200', '#008000', '#008000', \n          '#38b000', '#38b000', '#70e000', '#9ef01a', '#9ef01a', ]\n\norng = ['#FF5400', '#FF6000', '#FF6D00', '#FF6D00', '#FF8500', \n          '#FF9100', '#FF9E00', '#FFAA00', '#FFB600', '#FFB600', ]\n                       \nplt.figure(figsize = (18, 10), facecolor = None) ;\nax = plt.subplot();\nplt.title('Southern Europe Favourite Cuisine Styles')\nplt.imshow(euro);\n\nplt.text(\n    300, 200, 'Most Reviewed Cuisine Styles', \n    ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc='#004b23', ec=\"w\", lw=1));\n\ntop = 260\nleft = 0\nstili = reviews_south.cuisine_style.to_list()\ni = 0\nfor styl in stili:\n    styl_score = styl + \" \" + str(reviews_south[reviews_south.cuisine_style == styl].revs.item())\n    top = top + 54\n    plt.text(\n        300, top, styl_score, ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n        bbox=dict(boxstyle=\"square,pad=0.3\", fc=grn[i], ec=\"w\", lw=1))\n    i += 1\n    \n    \n    \nplt.text(\n    1000, 560, 'Best Rated Cuisine Styles', \n    ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc='#ff4800', ec=\"w\", lw=1));\n\ntop = 600\nleft = 1000\nrating_1000 = rating_south[rating_south.rat_count >= 3000]\nrating_1000 = rating_1000.sort_values(by='rat_mean', ascending = False)[:10]\n\nstili = rating_1000.cuisine_style.to_list()\ni = 0\nfor styl in stili:\n    styl_score = styl + \" \" + str(round(rating_1000[rating_1000.cuisine_style == styl].rat_mean.item(), 2))\n    top = top + 48\n    plt.text(\n        left, top, styl_score, ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n        bbox=dict(boxstyle=\"square,pad=0.3\", fc=orng[i], ec='w', lw=1))    \n    i += 1\n\n    \nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nax.spines['bottom'].set_visible(False);\nax.yaxis.set_visible(False);\nax.xaxis.set_visible(False);","86c25c58":"best_rating_cn = df_cn_eu_cities.groupby('cuisine_style').agg({'rating': ['mean', 'count'], 'reviews_number': 'sum'\n                                                                }).reset_index()\nrev_cn = best_rating_cn[['cuisine_style','reviews_number']]\n\nreviews_cn = pd.DataFrame({\n    'cuisine_style': rev_cn['cuisine_style'],\n    'revs': rev_cn['reviews_number']['sum']\n}).sort_values(by='revs', ascending = False)[:10]\n\nrat_cn = best_rating_cn[['cuisine_style', 'rating']]\nrating_cn = pd.DataFrame({\n    'cuisine_style': rat_cn['cuisine_style'],\n    'rat_mean': rat_cn['rating']['mean'],\n    'rat_count': rat_cn['rating']['count']\n})","d2603a41":"plt.figure(figsize = (18, 10), facecolor = None) ;\nax = plt.subplot();\nplt.title('Central-Northern Europe Favourite Cuisine Styles')\nplt.imshow(euro);\n\nplt.text(\n    300, 200, 'Most Reviewed Cuisine Styles', \n    ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc='#004b23', ec=\"w\", lw=1));\n\ntop = 260\nleft = 0\nstili = reviews_cn.cuisine_style.to_list()\ni = 0\nfor styl in stili:\n    styl_score = styl + \" \" + str(reviews_cn[reviews_cn.cuisine_style == styl].revs.item())\n    top = top + 54\n    plt.text(\n        300, top, styl_score, ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n        bbox=dict(boxstyle=\"square,pad=0.3\", fc=grn[i], ec=\"w\", lw=1))\n    i += 1\n    \n    \n    \nplt.text(\n    1000, 560, 'Best Rated Cuisine Styles', \n    ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n    bbox=dict(boxstyle=\"square,pad=0.3\", fc='#ff4800', ec=\"w\", lw=1));\n\ntop = 600\nleft = 1000\nrating_1000 = rating_cn[rating_cn.rat_count >= 3000]\nrating_1000 = rating_1000.sort_values(by='rat_mean', ascending = False)[:10]\n\nstili = rating_1000.cuisine_style.to_list()\ni = 0\nfor styl in stili:\n    styl_score = styl + \" \" + str(round(rating_1000[rating_1000.cuisine_style == styl].rat_mean.item(), 2))\n    top = top + 48\n    plt.text(\n        left, top, styl_score, ha=\"center\", va=\"center\", rotation=0, size=15, color = \"white\",\n        bbox=dict(boxstyle=\"square,pad=0.3\", fc=orng[i], ec='w', lw=1))    \n    i += 1\n    \n    \nax.spines['right'].set_visible(False);\nax.spines['top'].set_visible(False);\nax.spines['left'].set_visible(False);\nax.spines['bottom'].set_visible(False);\nax.yaxis.set_visible(False);\nax.xaxis.set_visible(False);    ","239b6736":"df_top_options = cuisines_list.groupby(['city', 'cuisine_style']).agg({\"rating\": \"mean\", \"reviews_number\": \"sum\"}).sort_values(by=['city', 'cuisine_style', \"reviews_number\", \"rating\"], ascending=False)\ntop_options = df_top_options.groupby('city').head(50).sort_values(by=['city', \"reviews_number\", \"rating\"], ascending=[True, False, False]).round(2)","864d9edc":"map_cities = {'Amsterdam': {\n        'lat': 52.3547,\n        'lon': 4.7638,\n        'flag': 'https:\/\/i.imgur.com\/blc3acB.png'\n    },\n    'Athens': {\n        'lat': 37.9908,\n        'lon': 23.7033,\n        'flag': 'https:\/\/i.imgur.com\/EGGLpd1.png'\n    },\n    'Barcelona': {\n        'lat': 41.3948,\n        'lon': 2.0787,\n        'flag': 'https:\/\/i.imgur.com\/vUh0XT5.png'\n    }, \n    \"Berlin\": {\n        'lat': 52.5069, \n        'lon': 13.3345,\n        'flag': 'https:\/\/i.imgur.com\/IWmwjUA.png'\n    },\n    \"Bratislava\": {\n        'lat': 48.1359, \n        'lon': 16.9758,\n        'flag': 'https:\/\/i.imgur.com\/48ARppO.png'\n    },              \n    \"Brussels\": {\n        'lat': 50.8550, \n        'lon': 4.3053,\n        'flag': 'https:\/\/i.imgur.com\/8dsgG0Z.png'\n    },              \n    \"Budapest\": {\n        'lat': 47.4813, \n        'lon': 18.9902,\n        'flag': 'https:\/\/i.imgur.com\/3wn3zdO.png'\n    },              \n    \"Copenhagen\": {\n        'lat': 55.6713, \n        'lon': 12.4537,\n        'flag': 'https:\/\/i.imgur.com\/6qIQO7a.png'\n    },                \n    \"Dublin\": {\n        'lat': 53.3244, \n        'lon': -6.3857,\n        'flag': 'https:\/\/i.imgur.com\/XKBE096.png'\n    },\n    \"Edinburgh\": {\n        'lat': 55.941, \n        'lon': -3.2753,\n        'flag': 'https:\/\/i.imgur.com\/D0M33Pp.png'\n    },\n    \"Geneva\": {\n        'lat': 46.2050, \n        'lon': 6.1090,\n        'flag': 'https:\/\/i.imgur.com\/bYvB2U5.png'\n    },\n    \"Hamburg\": {\n        'lat': 53.5586, \n        'lon': 9.6476,\n        'flag': 'https:\/\/i.imgur.com\/IWmwjUA.png'\n    },\n    \"Helsinki\": {\n        'lat': 60.1100, \n        'lon': 24.7385,\n        'flag': 'https:\/\/i.imgur.com\/RMgJjUZ.png'\n    },\n    \"Krakow\": {\n        'lat': 50.0469, \n        'lon': 19.8647,\n        'flag': 'https:\/\/i.imgur.com\/Pz2wDfL.png'\n    },\n    \"Lisbon\": {\n        'lat': 38.7437, \n        'lon': -9.2302,\n        'flag': 'https:\/\/i.imgur.com\/u0PAGku.png'\n    },\n    \"Ljubljana\": {\n        'lat': 46.06627, \n        'lon': 14.3920,\n        'flag': 'https:\/\/i.imgur.com\/SaeK70A.png'\n    },\n    \"London\": {\n        'lat': 51.5287, \n        'lon': -0.3817,\n        'flag': 'https:\/\/i.imgur.com\/82dLnLB.png'\n    },\n    \"Luxembourg\": {\n        'lat': 49.8148, \n        'lon': 5.5728,\n        'flag': 'https:\/\/i.imgur.com\/jKBqD0Z.png'\n    },\n    \"Lyon\": {\n        'lat': 45.7580, \n        'lon': 4.7650,\n        'flag': 'https:\/\/i.imgur.com\/7vrY3jL.png'\n    },\n    \"Madrid\": {\n        'lat': 40.4381, \n        'lon': -3.8196,\n        'flag': 'https:\/\/i.imgur.com\/vUh0XT5.png'\n    },\n    \"Milan\": {\n        'lat': 45.4628, \n        'lon': 9.1076,\n        'flag': 'https:\/\/i.imgur.com\/9ciRLpM.png'\n    },\n    \"Munich\": {\n        'lat': 48.1550, \n        'lon': 11.4017,\n        'flag': 'https:\/\/i.imgur.com\/IWmwjUA.png'\n    },\n    \"Oporto\": {\n        'lat': 41.1622, \n        'lon': -8.6919,\n        'flag': 'https:\/\/i.imgur.com\/u0PAGku.png'\n    },\n    \"Oslo\": {\n        'lat': 59.8939, \n        'lon': 10.6450,\n        'flag': 'https:\/\/i.imgur.com\/FM8gW1N.png'\n    },\n    \"Paris\": {\n        'lat': 48.8589, \n        'lon': 2.2770,\n        'flag': 'https:\/\/i.imgur.com\/7vrY3jL.png'\n    },\n    \"Prague\": {\n        'lat': 50.0598, \n        'lon': 14.3255,\n        'flag': 'https:\/\/i.imgur.com\/1gDnRgD.png'\n    },\n    'Rome': {\n        'lat': 41.9102,\n        'lon': 12.3959,\n        'flag': 'https:\/\/i.imgur.com\/9ciRLpM.png'\n    },\n    \"Stockholm\": {\n        'lat': 59.3262, \n        'lon': 17.8419,\n        'flag': 'https:\/\/i.imgur.com\/VSHZpY9.png'\n    },\n    \"Vienna\": {\n        'lat': 48.2208, \n        'lon': 16.2399,\n        'flag': 'https:\/\/i.imgur.com\/xRyqWqH.png'\n    },\n     \"Warsaw\": {\n        'lat': 52.2330, \n        'lon': 20.7810,\n        'flag': 'https:\/\/i.imgur.com\/Pz2wDfL.png'\n    },\n     \"Zurich\": {\n        'lat': 47.3775, \n        'lon': 8.4666,\n        'flag': 'https:\/\/i.imgur.com\/bYvB2U5.png'\n    }             \n}","7ec2b48c":"import folium\nimport base64\nfrom folium import IFrame\n\ndef get_flag(city):\n    flag = map_cities.get(city)\n    flag_url = flag['flag']\n    return(flag_url)\n\ndef get_top_options2(city):\n    opt = top_options[top_options.index.get_level_values('city').isin([city])][:3]\n    opt = opt.reset_index()\n    opt = opt.sort_values(by=[\"rating\", \"reviews_number\"], ascending=[False, False])\n    top_3 = \"\"\n    icon_class = \"\"\n    for i in opt.iterrows():\n        if (i[1]['cuisine_style'] == \"Gluten Free Options\") or (i[1]['cuisine_style'] == \"Vegan Options\"):\n            icon_class = \"fa-pagelines\"\n        elif i[1]['cuisine_style'] == \"Vegetarian Friendly\":\n            icon_class = \"fa-tree\"\n        else:\n            icon_class = \"fa-globe\"\n        top_3 += \"<div  style =\\\"height:25px;\\\"><i class=\\\"fa \"+ icon_class + \"\\\"><\/i>&nbsp;\" + i[1]['cuisine_style'] + \"&nbsp;\" + str(i[1]['rating']) + \" (\" + str(i[1]['reviews_number']) +  \" reviews)<\/div>\"\n    return(top_3)\n\neurope = folium.Map(\n    location=[52.4214, 8.3750],\n    tiles = \"OpenStreetMap\",\n    zoom_start=4\n)\n    \nfor k, v in map_cities.items():\n    flag = get_flag(k)\n    html =  \"<!DOCTYPE html><html><head><link rel=\\\"stylesheet\\\" href=\\\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/font-awesome\/4.7.0\/css\/font-awesome.min.css\\\"><\/head><body>\"\n    html += \"<div><div style =\\\"height:30px;\\\"><strong>{}<\/strong>&nbsp;<img src='{}' width='18px' height='18px'><\/div><div>{}<\/div>\".format(k, flag, get_top_options2(k))\n    html += \"<\/body><\/html>\"    \n    iframe = folium.IFrame(html, width=(300)+20, height=(110)+20)\n    popup = folium.Popup(iframe, max_width=1000)    \n    \n    folium.Marker(location =[v['lat'], v['lon']], \n                popup=popup,\n                icon = folium.Icon(color='darkpurple', icon='fa-cutlery', prefix='fa')\n    ).add_to(europe)    \n\neurope","5b6ec8d1":"words_cuisines = cuisines.copy()\nwords_cuisines[(words_cuisines.reviews.isna()) | (words_cuisines.reviews == '[[], []]')].info()\n","e6350443":"all_revs = []\nnan = 0\nfor ind, rev in words_cuisines['reviews'].iteritems():\n    if type(rev) != float:\n        # the string is in a format [[reviews separated by comma], [review dates separated by comma]]\n        # in order to only keep the reviews, i split by '], ['\n        g = rev.split('], [')\n        # and remove the first two chars at the beginning\n        g = g[0][2:].replace('\\'', \"\")\n    else:\n        g = \"\"\n        nan +=1\n    all_revs.append(g)","78b808da":"words_cuisines['reviews_only'] = all_revs\nwords_cuisines = words_cuisines.drop('reviews', axis = 1)","5c31aba1":"from wordcloud import WordCloud, STOPWORDS\n\nstopwords = set(STOPWORDS)\n\ndef words_cloud(words_list):\n    all_words = '' \n    #looping through all incidents and joining them to one text, to extract most common words\n    for ind, wrds in words_list.iteritems(): \n        tokens = wrds.split()    \n        all_words += \" \".join(tokens) + \" \"\n        return all_words","2c848aaa":"def words_freq(items):\n    all_words = []\n    for i, item in items.iteritems():\n        item = item.lower()\n        item = re.sub(\"[^a-zA-Z]\", \" \", item)\n        #keep numbers\n        item =  re.sub(\"[^a-zA-Z0-9\\s]+\", \" \", item)\n        all_words += item.split()\n\n    words = Counter(all_words)   \n    return words","92fbfbea":"#cloudmask = np.array(Image.open('v_europe_2.png'))\ncloudmask = np.array(euro)\n\nwords = words_freq(words_cuisines['reviews_only'])\nwordcloud = WordCloud(width = 1000, height = 700, \n                stopwords = stopwords, mask = cloudmask,\n                collocations = False,\n                background_color ='white', \n                min_font_size = 6).generate_from_frequencies(words) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (20, 9), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","450da6a4":"top10_styles = cuisines_list.groupby('cuisine_style').reviews_number.sum().sort_values(ascending=False)[:10]\ntop10_styles.index.sort_values(ascending = True)","09207503":"df_stili = pd.DataFrame(columns = ['city', 'place', 'cuisine_style', 'rating', 'reviews_number',\n       'reviews_only'])\n\nfor style in top10_styles.index:\n    df_stili = df_stili.append(words_cuisines[words_cuisines.cuisine_style.str.contains(style) == True], ignore_index = True)\n\ndf_stili = df_stili.drop_duplicates()\n\nwords = words_freq(df_stili['reviews_only'])\nwordcloud = WordCloud(width = 700, height = 700, \n                stopwords = stopwords,\n                collocations = False,\n                background_color ='white', \n                min_font_size = 8).generate_from_frequencies(words) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (10, 6), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","319ce196":"# just reviews with more than 3 stars\ndf_stili_pos = df_stili[df_stili.rating > 3]\n# just reviews with less than 3 stars\ndf_stili_neg = df_stili[df_stili.rating < 3]\n\nwords_pos = words_freq(df_stili_pos['reviews_only'])\nwords_neg = words_freq(df_stili_neg['reviews_only'])\nwordcloud_pos = WordCloud(width = 750, height = 700, \n                background_color ='white', stopwords = stopwords,\n                min_font_size = 10).generate_from_frequencies(words_pos) \nwordcloud_neg = WordCloud(width = 750, height = 700, \n                background_color ='white', stopwords = stopwords,\n                min_font_size = 10).generate_from_frequencies(words_neg) \n\n\nplt.figure(figsize = (15, 5))\n\nax1 = plt.subplot(121)\nplt.imshow(wordcloud_pos) \nplt.axis(\"off\") \nplt.title('Only reviews with more than 3 stars', fontsize='12', fontweight = 'bold' );\n# plot the WordCloud image  \nax2 = plt.subplot(122)\nplt.imshow(wordcloud_neg) \nplt.axis(\"off\") \nplt.title('Only reviews with less than 3 stars', fontsize='12', fontweight = 'bold' );\nplt.tight_layout(pad = 0) \n  \nplt.show()","5f9a3225":"In general, the restaurants are reviewed as Medium-priced (even in cities like London or the italian Rome and Milan, where food is almost a religion). This is probably due to travellers trying to save and settling for more _normal_ menus (nothing too fancy... they have plenty of other places to see in the city!).<br>\nThe only exception are the two cities in Switzerland (Geneva and Zurich) where the _Higher_ ranged restaurants are at least as many (or more than, like in Geneva) as the Cheaper ones. Do people go to Switzerland looking for expensive places to eat or is it just the cost of life higher in Switzerland?\n\n<a id=\"reviews_by_price\"><\/a>\n\n#### Talking about the price\n\nTaking into account that most of the restaurants have been rated as Medium-priced, how are reviews distributed according to the price range?","e03451f0":"<a id=\"reviews_by_city\"><\/a>\n\n#### Where do the people talk more about the restaurants?\n\n","05c32164":"* Rename columns removing blank spaces and the capital letters","683e9b17":"<a id='moving_from_city_to_city'>&nbsp;<\/a>\n#### Moving from city to city\n\nNow we'll break the data in even further in small pieces and see what's the top 3 cuisine styles by number of reviews and ratings in all the cities.<br> In this way, in our next trip, we'll already know what's the best cuisine style in the city we'll visit... better be prepared!","f131e86b":"<a id=\"rates_by_cuisine\"><\/a>\n\n### It's a matter of style\n\nThe dataset avails of the column _cuisine-style_ which stores the cuisine available in each of the reviewed places. This is an interesting starting point to understand how cuisines impact TripAdvisor's visitors.\n\nFirst of all, we have to manage the list of cuisine styles in a way that we can use the data and produce some statistics. Since there's just one rating for each place, all the cuisine styles are stored in a single column: we assume that the rating given to each place is good for all the styles they propose.<br>\nThe goal is to create a single row for each of the cuisine_styles available for each place.","c9da7d21":"<a id='prices'>&nbsp;<\/a>\n### Prices\n\n<a id=\"price_by_city\"><\/a>\n\n#### How much do we want to pay?\n\nWe found out that the customers were in general satisfied with the overall quality of the restaurants they chose. Was the price a parameter they used to leave negative or positive reviews about?","fff25ddb":"## Index\n\n1. [Loading data](#loading_data)<br>\n2. [Data Wrangling](#data_wrangling)<br>\n3. [Where shall we eat today?](#where_to_eat)<br>\n    3.1 [What's the city with the most options?](#restaurants_by_city)<br>\n    3.2 [Where do people talk more about the restaurants?](#reviews_by_city)<br>\n    3.3 [Did we eat well? In other words... let's rate this restaurant](#rates_by_city)<br>\n4. [Prices](#prices)<br>\n    4.1 [How much do we want to pay?](#price_by_city)<br>\n    4.2 [Talking about the price](#reviews_by_price)<br>\n5. [It's a matter of style](#rates_by_cuisine)<br>\n    5.1 [Cuisine diversity](#cuisine_types)<br>\n    5.2 [Each city has its style](#style_by_city)<br>\n    5.3 [Top cuisine styles and their cities](#top_styles_and_cities)<br>\n    5.2 [Simply the best](#best_styles)<br>\n6. [Where to eat... what?](#where_to_eat_what)   \n    6.1 [Splitting the Continent by tastes](#splitting_eu)<br>\n    6.2 [Moving from city to city](#moving_from_city_to_city)<br>\n7. [Talking about feelings](#talking_about_feelings)<br>\n    7.1 [Which words are used to describe a food experience?](#words_general)<br>\n    7.2 [Words and style](#words_and_style)<br>\n    7.3 [Are we really that happy\/angry?](#good_and_bad_ratings)<br>\n8. [Conclusions](#conclusions)\n    \n","0e7c2f36":"Breaking down the ratings by price range doesn't show much difference among the ratings given. On average the customers seem quite satisfied of the places they've visited: no price range in any of the cities appears to be struggling compared to the others (and the _High-priced_ restaurants in Switzerland seem to be worth the price, since they are rated as the best ones!)\n\nLet's take a look into the average number of reviews per price range: does the price range somehow influence the possibility of a customer to leave a review?","304fc889":"Both plots show words in common, which in general can be related to the matter people are talking about (like _food_ , _service_ , _good_ which is a bit tricky in this situation, just to name a few).<br>\n\nIn the left plot we can actually find positive words: _nice_ , _cozy_ , _excellent_ , _delicious_ and so on. In general, apart from few words like _small_ , _decent_ , _reasonable_ the whole feeling is that \"_yes, we had a good time here_ \".\n\nFocusing on the _bad side_ , among the biggest words appears _service_ and this would be interesting to read in more detail. Along with that word we can find _place_ , _avoid_ , _expensive_ , even _rude_ which describe pretty clearly that customers were focusing on _how they felt_ and not particularly on _what they had_ (I'd have expected comments about food itself, like _salty_ or something about how food was cooked. But, again, maybe these words can be found in the whole review and not just in the subject).<br>\nMy idea is that, being available just the _subject_ of the reviews, the details about food are left outside and available just in the _body_ of the review itself.","c2864693":"In general, the ratings in every city tend to be mostly higher than 3. This might suggest that customers are usually tempted to leave a review when things are good (but this could be investigated further).","aef1cb17":"This chart is more or less the same as the one about the most common cuisine styles, but it's notable that the Vegan and Gluten Free Options are very likely to be reviewed by the customers.\n\n<a id='style_by_city'>&nbsp;<\/a>\n#### Each city has its style\n\nHow are these 127 styles distributed among our 33 European cities? Are there cities capable to fulfill our culinary curiosity?","5a83dea1":"As expected, London has the highest number of reviews, but the list appears rather different from the previous one, with Rome in second position having just the 5th highest number of restaurants.\n\nLet's check the average number of reviews per city:","33fb5d04":"According to what reported on the dataset description, the reviews are basically taken from two of the available reviews (and correspond to the Subject of that review) and, apparently, because of text limitations, these reviews aren't complete.<br>Let's see if what we have is enoug to have a taste of what customers meant in their reviews.\n\n<a id='words_general'>&nbsp;<\/a>\n#### Which words are used to describe a food experience?\n\nNow we'll create a WordCloud with all the reviews, no matter where the customers were or what they just had.","d2b62483":"On top of the chart we find those that are probably the most _global_ cities in Europe. _No suprise_ . And london is a very few steps away from covering _all_ the cuisine styles available in this notebook! ","09383399":"### Loading data","d06a8ffc":"<a id='top_styles_and_cities'>&nbsp;<\/a>\n\n#### Top Cuisine Styles and their cities\n\nNow that we're focusing on the top 10 cuisine styles only, the first thing we'll check is _where_ such styles are reviewed the most:","fb74f12e":"<img src=\"https:\/\/i.imgur.com\/2XddRKI.jpg\" alt=\"Drawing\" style=\"width: 100%;\"\/>\n\n\n###### <font size=\"-3\" color=\"grey\">Photo by Clem Onojeghuo on Unsplash<\/font>","af850e38":"In all the cities the most discussed restaurants belong to the higher priced range: the higher the expected quality and the higher the attention paid by the customers.","5475299c":"In this case, the list has dramatically changed, with Rome in the first position and Edinburgh as second (while having a rather low number of reviewed restaurants).\nApparently these are the two cities which give people the most to talk about! \n\n<a id=\"rates_by_city\"><\/a>\n#### Did we eat well? In other words... let's rate this restaurant\n\nBut is what TripAdvisor's visitors say about restaurants Positive or Negative? Are the restaurants rated above or below the sufficiency? (we can consider a 3 as a neutral opinion)","3166a62e":"Travelling is one of those experiences we like sharing about the most.\n\nPhotos, memories of funny or exciting episodes, suggestions or impressions about the most famous monuments or landscapes.<br>\nBut, of course, a very important part of our experiences away from home (but even in our hometown) is related with food.\n\n[Tripadvisor.com](https:\/\/www.tripadvisor.com) is probably among the very first websites we think about when we are looking for a place to eat in a city we don't know, or where we would like to share our experience (either positive or negative) about a new place we went eating out.\n\nLet's take a look into the data available in [this](https:\/\/www.kaggle.com\/damienbeneschi\/krakow-ta-restaurans-data-raw) datasource to see the behaviour of TripAdvisor.com's visitors related to their experiences in restaurants around Europe.<br>\nAre there cities whose restaurants make visitors share their reviews the most? Does price range influence the number of reviews? And is there a cuisine that makes people feel the need of suggesting or advise against?<br>","a150b17f":"* Replace Reviews with Rating == -1.0 and setting them to 0","79df517c":"<a id=\"cuisine_types\"><\/a>\n\n#### Cuisine Diversity\n\nWe can quickly check how many single cuisine styles have been reviewed:","8362f484":"We have over 125K restaurants in 31 European cities... plenty of places to try! \n\n<a id=\"restaurants_by_city\"><\/a>\n\n#### What's the city with the most options?\n\nThe most restaurants are located in London followed by Paris. These two cities are the only ones with at least 10K singular restaurants.","31ffb5b1":"Vegan and Gluten Free Options are again on the top of the preferences of the reviewers, although the difference among the various cuisines is not very big (between Vegan Options and Pizza there's a 0.3 pts difference)\n\n\n<a id=\"where_to_eat_what\"><\/a>\n\n### Where to eat... what?\n\nPutting cuisine and geography together to have a clearer picture of reviews around Europe.\n<a id='splitting_eu'>&nbsp;<\/a>\n#### Splitting the Continent by tastes\n\nAt the moment we've considered Europe as a whole, although it's not hard to imagine that cuisine presents difference up-and-down the _Continent_ .<br>\nI'll divide Europe according to what is (for me) _South_ and _Centre-North_ and we'll see if tastes (and reviews, which is what we're talking about here) somehow differ:","23691ec2":"Before we move further, due to the high number of unique cuisine styles, let's focus only on the 10 most reviewed ones.","fda15a6e":"Nothing new: positivity all over the plot (or something like that!)","6df436b2":"Again, it seems that everything moves around _fixed points_ : Vegetarian, Gluten Free and Vegan options are in both cases on top of the most reviewed styles, and the same about the best rated cuisines.<br>\nThis confirms that such styles have become universal and extremely widespread, along with _classical_ styles like the _Italian_ or the _Mediterranean_ (which appear in both Southern and Central-Northern rankings).<br>\nSomething that I would like to further investigate is the reason for _so many_ reviewes about the Vegan, Vegetarian and Gluten Free styles.\n\nFor the rest, we can notice _local_ differences between the rankings: in the _South_ we find _Portuguese_ , _Spanish_ and especially the _sea food_ cuisine! In the Central-Northern rankings, instead, these styles have been replaced by _British_ or _Central European_ cuisine (or _Caf\u00e9_ as well, which to me sound so much _North European_ in the best of the meanings! In Italy, such _Caf\u00e9s_ would never appear in a ranking about food).","21f3e175":"<a id='good_and_bad_ratings'>&nbsp;<\/a>\n#### Are we really that happy\/angry?\nIn the following plot I'll put side by side the WordClouds created from positive reviews (with more than 3 stars) and negative ones (with less than 3 stars).<br>\nLet's see if in such _small_ reviews (as mentioned before, we don't avail of the whole review, just the _Subject_ of two reviews per restaurant) we can see if the reviews are polarized and show in prevalence positive or negative words.","3224ee89":"Vegetarian Friendly places are clearly the most common ones around Europe, followed by mostly European-style cuisine.\n\nBut which are the cuisines that people tend to review the most?","668e395d":"<a id=\"loading_data\"><\/a>\nFirst, let's load the libraries we need and the dataset. Then, let's check the dataset's structure","c595a354":"<a id='talking_about_feelings'>&nbsp;<\/a>\n### Talking about feelings\n\nNumbers say that _Vegan_ , _Gluten Free_ and _Vegetarian_ options dominate the number of reviews and the best average ratings.<br>Now we try to read between what customers say in order to look for recurring words or expressions which could make understand what mostly hit reviewers' attentions or if people focus on certain topics or details when _they're hungry_ .","b5e08f53":"And see a top 10 of the most common cuisine styles","083380a7":"# Eating out in Europe","c8315c2f":"<a id='conclusions'>&nbsp;<\/a>\n### Conclusions\n\nWhat surprised me the most about this analysis is the focus customers put on cuisine styles like the Vegan, Vegetarian or Gluten Free.<br>\nMaybe this notebook helped me broaden my opinions about food and see how tastes are _different_ (I don't know if saying _changing_ could be the right definition). Where I live the Vegetarian or Vegan options are not very widespread yet, and seeing them so _talked about_ around Europe gave me a different perception of them.\n\nAs expected, it's very common that the most discussed cuisine styles are often related to the geographic area we are in (Southern Europe has the _Mediterranean_ style or _Seafood_ , while in the rest of Europe we can see that the _Central European_ style is very popular) but some _classic_ styles are on top of both Southern and Central-Northern Europe.\n\nThe words used to describe the experiences (as well as the ratings) are in general positive and, I think because of the kind of data we avail of, the reviews are mostly about the kind of experience (service, location, price) and not about food itself.\n\nIn conclusion, I can't wait to be able to travel again and go around Europe to try different cuisine styles and enjoy the amazing _Continent_ I live in.","b4927c2b":"The list of the cities reminds very closely the list of cities in <a href='#reviews_by_city' target='_top'>this<\/a> chapter of the notebook. So, if you want to get to know more about a cuisine style, just head to one of these cities!","7e045bd7":"Some ratings are missing, I'll try to replace the null values with the average rating for that city and cuisine style","8a79a98d":"<a id=\"data_wrangling\"><\/a>\n### Data Wrangling\n\nAfter checking the dataset's structure in the previous cell, I will:\n\n* Turn Ranking into categorical datatype and Reviews from float to int<br>","8f387e83":"<a id=\"best_styles\"><\/a>\n#### Simply the best\n\nAmong the top 10 cuisines, what's the best rated one?","bbb36082":"* Remove duplicated rows by ID_TA<br>","509dbb84":"In accordance with the histogram we saw some chapters above, the WordCloud above (yes, that's a map of Europe) is dominated by _positive_ words.<br>\nI must confess that seeing **Good Food** so big in the centre of the WordCloud made me a bit curious... and hungry!<br>\nI find hard to spot _negative_ word, just very very small _Disappointing_ or _Terrible_ (wow!) are there, or words which could hint a mild disappointment like _Average_ , _Decent_ . <br>\nAs said before, it's not possible to dig a bit deeper to understand where these reviews _come from_ and find out that maybe tourists are more enthusiastic with their reviews (new food, new cities, new places they eat positively influenced their opinion) and the ones provided are just a _sample_ of all the reviews available on TripAdvisor.com.\n<a id='words_and_style'>&nbsp;<\/a>\n#### Words and Style\n\nThe above WordCloud was an overall view of the reviews scraped from TripAdvisor.com.<br>\nHere we will take a look at how the top 10 cuisine styles were reviewed.<br>\n_Friendly reminder_ : the top 10 cuisines are<br>\n","18ce9474":"<a id=\"where_to_eat\"><\/a>\n\n### Where shall we eat today?"}}