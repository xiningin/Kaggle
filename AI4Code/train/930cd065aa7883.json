{"cell_type":{"f4f69b90":"code","908f1867":"code","fcbdd8dd":"code","b26a02bd":"code","f66b4e4e":"code","6e044b8d":"code","6fd3bcf7":"code","32a795a0":"code","32dffe8c":"code","cb9612e7":"code","a76956f4":"code","3440c56a":"code","b40b52d8":"code","d029125a":"code","2023ccb5":"code","e37c46df":"code","451be97a":"code","3f96d673":"code","6790ed44":"code","0b5dac0a":"code","e18284e1":"code","830a3470":"code","36eac793":"code","3557e666":"code","cfaab609":"code","41e6bd35":"code","9cda0880":"code","f6b8ac64":"code","9d238727":"code","f83fbae6":"code","e9913546":"code","89b5b8b8":"code","6613f855":"code","75f40279":"code","d1363792":"code","1fcbb63d":"code","26379cc9":"code","81464173":"code","b3acfdc2":"code","ac07b172":"code","9dd36a75":"code","17b1016f":"code","8cef73e1":"code","efafbd66":"code","73b33955":"code","8eb144c8":"code","c1720069":"code","9d45269e":"code","6763f98c":"code","089c6512":"code","0cc70e2b":"code","c2f5ffd2":"code","269b6ed7":"code","dd2f1f04":"code","665dd32b":"code","42d9206f":"code","5c763f9f":"code","44c1af84":"code","b86a1bd2":"code","7859968e":"code","0e9f7f3a":"code","369bce05":"code","f7e09a6e":"code","fd478cbc":"code","be488c93":"code","4015a898":"code","bb49cdc3":"code","a0c0b1c5":"code","b480ec7f":"code","1dbb776c":"code","f965a9f2":"code","9d60475d":"code","2606008d":"code","456e709c":"code","d9ed6bf1":"code","6b050786":"code","a7487a16":"code","86ce56d5":"code","31a8b971":"code","9519b26c":"code","de7896a3":"code","9be4ce46":"code","0f7a0994":"code","2358a6d8":"code","dff80fbd":"code","72468775":"code","d8c2517a":"code","44d5e76f":"code","c3132c4a":"markdown","879ea687":"markdown","eb041285":"markdown","402abeff":"markdown","25d33ca8":"markdown","e4df4fed":"markdown","43b03d08":"markdown","70ca29dd":"markdown","0bcf7413":"markdown","3b1ade72":"markdown","01b447ba":"markdown","acc3238a":"markdown","83bb748e":"markdown","140057ce":"markdown","60f80c26":"markdown","c3092b56":"markdown","93c12c9e":"markdown","b574f0e8":"markdown","2a44ab5b":"markdown","e6b22aad":"markdown","c3b23133":"markdown","fab37476":"markdown","a86f975b":"markdown","4d53d83c":"markdown","723bed59":"markdown","fe37a7e5":"markdown","b4a5e931":"markdown","a772637c":"markdown","2e819620":"markdown","42dd265e":"markdown","0897bf67":"markdown","1f0165fd":"markdown","0c28936e":"markdown","a2797aaf":"markdown","069ce76a":"markdown","d2c9f6f3":"markdown","9b679784":"markdown","c01ab1cf":"markdown","4f7b2b00":"markdown","075a703b":"markdown","4a000caf":"markdown","bcbb1d2b":"markdown","cf448c21":"markdown","dcb2ad96":"markdown","5c44f1e9":"markdown","bd874717":"markdown","92f1e26f":"markdown","2de9449a":"markdown","c2f85589":"markdown","261a30a3":"markdown","3efc6a96":"markdown","d3e1d4c3":"markdown","17966674":"markdown","37652da4":"markdown","18427d09":"markdown","39002e80":"markdown","4c899ce8":"markdown","66804fb8":"markdown","f3e6182a":"markdown","29ac40f6":"markdown","5317cb9e":"markdown","dc257b7c":"markdown","e7e95148":"markdown","30f89d4f":"markdown"},"source":{"f4f69b90":"import io\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.optimize\nfrom math import erf, log, exp, sqrt\nfrom scipy.stats import invgauss","908f1867":"def lognorm_cdf(mean, var, n_days=20, ticks_per_day=10):\n    sigma = sqrt(log(var\/mean**2 + 1))\n    mu = log(mean) - 0.5*sigma**2\n    sqrt2sigma_inv = 1.0 \/ (sqrt(2) * sigma)\n    def cdf(x):\n        return (0.5 + 0.5*erf(sqrt2sigma_inv*(log(x) - mu))\n                if x > 0 else 0)\n\n    n_ticks = n_days * ticks_per_day\n    days = list([i\/ticks_per_day\n                 for i in range(n_ticks)])\n    acu = list([cdf(d) for d in days])\n    return acu","fcbdd8dd":"def invgauss_cdf(mean, var, n_days=20, ticks_per_day=10):\n    la = mean**3\/var\n    mu = mean\/la\n    x = list([i\/ticks_per_day\n              for i in range(n_days*ticks_per_day)])\n    return invgauss.cdf(x, mu, scale=la)","b26a02bd":"class SIRwhatever:\n    def __init__(self,\n                 population_size=6.662e6,\n                 asymptomatic_ratio=0.17,\n                 severe_ratio=0.05,\n                 #hospital_beds_ratio=0.003,\n                 #no_bed_death_rate_multiplier=2,\n                 mortality_ratio=0.035,\n                 asymptomatic_convalescent_period_mean=2,\n                 asymptomatic_convalescent_period_variance=3,\n                 mild_convalescent_period_mean=8,\n                 mild_convalescent_period_variance=4,\n                 severe_convalescent_period_mean=16,\n                 severe_convalescent_period_variance=8,\n                 daily_transmission_rate=2.0,\n                 preinfectious_half_period=2,\n                 incubation_mean=5,\n                 incubation_variance=7,\n                 herd_immunity_ratio=0.0,\n                 days = 100, ticks_per_day = 4,\n                 infected_seed = 10,\n                 observation_delay = 0,\n                 quiet = False):\n        self.population_size = population_size\n        self.asymptomatic_ratio = asymptomatic_ratio\n        self.severe_ratio = severe_ratio\n        self.mortality_ratio = mortality_ratio\n        self.daily_transmission_rate = daily_transmission_rate\n        self.days = days\n        self.ticks_per_day = ticks_per_day\n        self.infected_seed = infected_seed\n        self.incubation_mean = incubation_mean\n        self.incubation_variance = incubation_variance\n        self.preinfectious_half_period = preinfectious_half_period\n        self.mild_convalescent_period_mean = mild_convalescent_period_mean\n        self.mild_convalescent_period_variance = mild_convalescent_period_variance\n        self.severe_convalescent_period_mean = severe_convalescent_period_mean\n        self.severe_convalescent_period_variance = severe_convalescent_period_variance\n        self.asymptomatic_convalescent_period_mean = asymptomatic_convalescent_period_mean\n        self.asymptomatic_convalescent_period_variance = asymptomatic_convalescent_period_variance\n        self.herd_immunity_ratio=herd_immunity_ratio\n        self.observation_delay=observation_delay\n        self.quiet=quiet\n    \n    def strategy(self, t, **kargs):\n        return 'normal' # can I do nothing?\n    \n    def print_extrema(self, i, t, **kargs):\n        if self.quiet:\n            return\n        if t >= 2: # we ignore the first two days in order to let the model stabilize\n            for k in sorted(kargs.keys()):\n                extreme = None\n                v = kargs[k]\n                if v[i-2] < v[i-1]:\n                    if v[i-1] > v[i]:\n                        extreme = '\u25b2'\n                elif (v[i-1] < v[i]) and (v[i-2] > v[i-1]):\n                    extreme = '\u25bc'\n                if extreme:\n                    line = \"%s day: %f, %s: %f\" % (extreme, t, k, v[i-1])\n                    if k.startswith('new_'):\n                        line += \", %s: %f\" % (k[4:], kargs[k[4:]][i-1])\n                    if (\"ever_\" + k) in kargs.keys():\n                        line += \", ever_%s: %f\" % (k, kargs[\"ever_\" + k][i-1])\n                    print(line)\n    \n    def run(self):\n        ticks = self.days * self.ticks_per_day # loop iterations\n        Dt = 1 \/ self.ticks_per_day\n        \n        z = np.zeros(ticks)\n        \n        healthy = z.copy()              # people that is not infected\n        death = z.copy()                # acumulated deaths\n        incubating = z.copy()           # infected in the incubation stage\n        infected = z.copy()             # number of currently infected persons\n        velocity = z.copy()             # contagion velocity\n        sick = z.copy()                 # people with desease simptoms\n        new_sick = z.copy()             # new people getting sick at the tick\n        sick_velocity = z.copy()        # velocity of sick cases appearing\n        ever_sick = z.copy()            # people that has ever been sick\n        ever_sick_velocity = z.copy()   # velocity of ever sick\n        severe = z.copy()               # people in severe condition\n        mild = z.copy()                 # people in mild condition\n        asymptomatic = z.copy()         # infected people not showing symptoms\n        infectious = z.copy()           # infected people that is able to transmit the disease\n        infectable = z.copy()           # people that can still get the dissease\n        symptomatic = z.copy()          # sick people showing symptoms\n        new_symptomatic = z.copy()      # new people getting symptoms at the tick\n        symptomatic_velocity = z.copy() # velocity of symptomatic cases appearing\n        ever_symptomatic = z.copy()     # people that have ever had symptoms\n        ever_symptomatic_velocity = z.copy() # velocity of ever symptomatic cases appearing\n        observed_ever_symptomatic = z.copy() # people that has ever been symptomatic and observed\n        observed_ever_symptomatic_velocity = z.copy() # velocity of observed ever symptomatic\n\n        # new_sick_velocity = z.copy()    # velocity of new sick\n        day = z.copy()\n        immune = np.full(ticks,        # people that has healed from the disease \n                         self.herd_immunity_ratio*self.population_size)\n\n        status = list(['normal' for i in range(ticks)])\n\n        \n        # Here the probability distributions are tabled and cached.\n        incubation_cdf = lognorm_cdf(self.incubation_mean, self.incubation_variance,\n                                     ticks_per_day = self.ticks_per_day, n_days=self.days)\n        mild_convalescent_period_cdf = invgauss_cdf(self.mild_convalescent_period_mean,\n                                                    self.mild_convalescent_period_variance,\n                                                    ticks_per_day = self.ticks_per_day,\n                                                    n_days=self.days)\n        severe_convalescent_period_cdf = invgauss_cdf(self.severe_convalescent_period_mean,\n                                                      self.severe_convalescent_period_variance,\n                                                      ticks_per_day = self.ticks_per_day,\n                                                      n_days=self.days)\n        asymptomatic_convalescent_period_cdf = invgauss_cdf(self.asymptomatic_convalescent_period_mean,\n                                                            self.asymptomatic_convalescent_period_variance,\n                                                            ticks_per_day = self.ticks_per_day,\n                                                            n_days=self.days)\n        \n        preinfection_amortiguation_rate = 0.5**(1.0\/(self.preinfectious_half_period\n                                                     * self.ticks_per_day))\n        \n        for i in range(ticks):\n\n            ps = self.population_size\n            t = i * Dt\n            day[i] = t # For convenience, we also store the time\n            \n            # Number of coupons an infectious person generates at his maximum\n            transmission_rate = self.daily_transmission_rate \/ self.ticks_per_day\n            \n            # Every infectious person gives away a number of coupons\n            # everyday (actually, every tick)\n            coupons = infectious[i] * transmission_rate\n            \n            # A single player may get several coupons, so we need to calculate the probability\n            # that has a player of at least getting a coupon. We do it calculating first the\n            # probability of not getting any coupon at all.\n            p_contagied = 1 - exp(-coupons\/ps) # We can calculate it using an aproximation\n                                               # in order to avoid numerical inestabilities\n                                               # It works because ps is quite big \n            # p_contagied = 1 - ((ps - 1)\/ps) ** coupons # probability of somebody\n            #                                            # not getting any ticket\n            \n            # And how many infectable persons do we have to play today?\n            players = ps\n            if i == 0:\n                d_infected = self.infected_seed\n            else:\n                players -= infected[i-1] + immune[i-1] + death[i-1]\n                d_infected = players * p_contagied # number of persons that have\n                                                   # been infected today\n            infectable[i] = players - d_infected\n            \n            # Spread the infected over the following days, recording when they are going\n            # to get sick filling new_sick\n            for j in range(i+1, ticks):\n                t1 = j - i # time elapsed since the contagion\n                cdf0 = incubation_cdf[t1 - 1]\n                if cdf0 == 1.0:\n                    break\n                cdf1 = incubation_cdf[t1]\n                d_new_sick = d_infected * (cdf1 - cdf0)\n                new_sick[j] += d_new_sick\n                incubating[j-1] += d_infected*(1-cdf0)\n\n                # Here we also fill infectious which counts how many people is able\n                # to generate coupons\n                for k in range(j, i+1, -1):\n                    preinfection_rate = preinfection_amortiguation_rate**(j-k) * (k-i)\/(j-i)\n                    if preinfection_rate < 1e-4:\n                        break\n                    infectious[k] += d_new_sick * preinfection_rate\n            \n            # Now, we see what happens which people getting sick right now.\n            new_sick_i = new_sick[i]\n            \n            # How many is there in every class?\n            d_asymptomatic = new_sick_i * self.asymptomatic_ratio\n            d_severe = new_sick_i * self.severe_ratio\n            d_mild = new_sick_i - d_asymptomatic - d_severe\n            new_symptomatic[i] = new_sick_i - d_asymptomatic\n            \n            # Only the severyly ill can die, so we calculate and adjusted\n            # mortality ratio just for those\n            severe_mortality_ratio = self.mortality_ratio \/ self.severe_ratio \n\n            # The future of those getting ill today is set in stone, so we can fill\n            # the asymptomatic, mild, severe, imune, death until the end of time for them.\n            for j in range(i, ticks):\n                t1 = j - i\n                asymptomatic_cdf0=asymptomatic_convalescent_period_cdf[t1]\n                mild_cdf0=mild_convalescent_period_cdf[t1]\n                severe_cdf0=severe_convalescent_period_cdf[t1]\n                severe[j] += (1-severe_cdf0)*d_severe\n                mild[j] += (1-mild_cdf0)*d_mild\n                asymptomatic[j] += (1-asymptomatic_cdf0)*d_asymptomatic\n                \n                immune[j] += ((1-severe_mortality_ratio)*severe_cdf0*d_severe +\n                              mild_cdf0*d_mild + asymptomatic_cdf0*d_asymptomatic)\n                death[j] += severe_mortality_ratio*severe_cdf0*d_severe\n                infectious[j] += (1-asymptomatic_cdf0)*d_asymptomatic\n\n            # infected, sick and healthy are just combinations of other parameters\n            # we keep for convenience.\n            infected[i] = asymptomatic[i] + mild[i] + severe[i] + incubating[i]\n            symptomatic[i] = mild[i] + severe[i]\n            sick[i] = symptomatic[i] + asymptomatic[i]\n            healthy[i] = infectable[i] + immune[i]\n            \n            # Finally, also for convenience, we calculate the velocities for some parameters.\n            # In this context, velocity is the increase per time unit of some parameter in\n            # the exponencial space:\n            #     velocity(a) = exp(log(a[i]) - log(a[i-1])) = a[i] \/ a[i-1]\n            \n            if i == 0:\n                velocity[i] = 0\n                sick_velocity[i] = 0\n                ever_sick[i] = new_sick[0]\n                ever_sick_velocity[i] = 0\n                ever_symptomatic[i] = 0\n            else:\n                velocity[i] = ((infected[i]\/infected[i-1])**self.ticks_per_day - 1)\n                sick_velocity[i] = (((sick[i]+1)\/(sick[i-1]+1))**self.ticks_per_day - 1)\n                ever_sick[i] = ever_sick[i-1] + new_sick[i]\n                ever_sick_velocity[i] = (((ever_sick[i] + 1) \/\n                                          (ever_sick[i-1] + 1))**self.ticks_per_day - 1)\n                # new_sick_velocity[i] = (((new_sick[i] + 1) \/\n                #                          (new_sick[i-1] + 1))**self.ticks_per_day - 1)\n                symptomatic_velocity[i] = (((symptomatic[i]+1)\/(symptomatic[i-1]+1)) **\n                                           self.ticks_per_day - 1)\n                ever_symptomatic[i] = ever_symptomatic[i-1] + new_symptomatic[i]\n                ever_symptomatic_velocity[i] = (((ever_symptomatic[i]+1) \/\n                                                 (ever_symptomatic[i-1]+1)) **\n                                                self.ticks_per_day - 1)\n                \n                observation_delay_ticks = self.observation_delay * self.ticks_per_day\n                if i >= observation_delay_ticks:\n                    observed_ever_symptomatic[i] = ever_symptomatic[i-observation_delay_ticks]\n                    observed_ever_symptomatic_velocity[i] = ever_symptomatic_velocity[i-observation_delay_ticks]\n            \n            self.print_extrema(i, t=t,\n                               sick=sick,\n                               new_sick=new_sick,\n                               ever_sick=ever_sick,\n                               severe=severe,\n                               symptomatic=symptomatic,\n                               ever_symptomatic=ever_symptomatic,\n                               new_symptomatic=new_symptomatic,\n                               asymptomatic=asymptomatic,\n                               infected=infected,\n                               incubating=incubating,\n                               infectious=infectious)\n            \n            # This method call allows us to simulate external actions over\n            # the model: The Goberment!\n            status[i] = self.strategy(t=t,\n                                      sick=sick[i],\n                                      ever_sick=ever_sick[i],\n                                      sick_velocity=sick_velocity[i],\n                                      new_sick=new_sick[i]*self.ticks_per_day,\n                                      symptomatic=symptomatic[i],\n                                      ever_symptomatic=ever_symptomatic[i],\n                                      observed_ever_symptomatic=observed_ever_symptomatic[i],\n                                      symptomatic_velocity=symptomatic_velocity[i],\n                                      observed_ever_symptomatic_velocity=observed_ever_symptomatic_velocity[i],\n                                      new_symptomatic=new_symptomatic[i]*self.ticks_per_day,\n                                      infectious=infectious[i],\n                                      infectable=infectable[i])\n            if i > 0 and status[i] != status[i-1] and not self.quiet:\n                print((\"status flip: %s -> %s, day: %f, \" +\n                       \"sick: %f, daily_new_sick: %f, ever_sick: %f, \"+\n                       \"symptomatic: %f, daily_new_symptomatic: %f, ever_symptomatic: %f, \"+\n                       \"observed_ever_symptomatic: %f, \"+\n                       \"infectious: %f, severe: %f, immune: %f, death: %f\") %\n                      (status[i-1], status[i], t,\n                       sick[i], new_sick[i]*self.ticks_per_day, ever_sick[i],\n                       symptomatic[i], new_symptomatic[i]*self.ticks_per_day,\n                       ever_symptomatic[i], observed_ever_symptomatic[i],\n                       infectious[i], severe[i], immune[i], death[i]))\n\n        return pd.DataFrame({'day': day,\n                             'infectious': infectious,\n                             'asymptomatic': asymptomatic,\n                             'symptomatic': symptomatic,\n                             'mild': mild,\n                             'severe': severe,\n                             'immune': immune,\n                             'infected': infected,\n                             'death': death,\n                             'healthy': healthy,\n                             'incubating': incubating,\n                             'sick': sick,\n                             'ever_sick': ever_sick,\n                             'new_sick': new_sick,\n                             'ever_symptomatic': ever_symptomatic,\n                             'new_symptomatic': new_symptomatic,\n                             'infectable': infectable,\n                             'velocity': velocity,\n                             'sick_velocity': sick_velocity,\n                             'ever_sick_velocity': ever_sick_velocity,\n                             'symptomatic_velocity': symptomatic_velocity,\n                             'ever_symptomatic_velocity': ever_symptomatic_velocity,\n                             'observed_ever_symptomatic': observed_ever_symptomatic,\n                             'observed_ever_symptomatic_velocity': observed_ever_symptomatic_velocity,\n                             'status': status\n                            })","f66b4e4e":"case1 = SIRwhatever(days = 100).run()","6e044b8d":"with sns.axes_style(\"whitegrid\"):\n    case1.plot(x='day', y=['infected', 'sick', 'symptomatic', 'asymptomatic', 'immune',\n                           'incubating', 'infectable', 'severe', 'death', 'healthy',\n                           'ever_sick', 'observed_ever_symptomatic'],\n               logy=False, ylim=(0, 7e6), figsize=(20,10))","6fd3bcf7":"with sns.axes_style(\"whitegrid\"):\n    case1.plot(x='day', y=['velocity', 'ever_symptomatic_velocity'],\n               ylim=(-0.4, 0.7), figsize=(20,10))\n    case1.plot(x='day', y=['velocity', 'ever_symptomatic_velocity'],\n               ylim=(0, 0.6), xlim=(5,40), figsize=(20,10))","32a795a0":"with sns.axes_style(\"whitegrid\"):\n    case1.plot(x='day', y=['infected', 'sick', 'immune', 'incubating',\n                           'infectable', 'severe', 'death', 'healthy', 'ever_sick'],\n               logy=True, ylim=(10, 7e6), figsize=(20,10))","32dffe8c":"severe_max = case1.severe.max()\npublic_hospital_beds = 6.662e6 * 0.003\nprint(\"max severe: %d, public hospital beds: %d, ratio: %1.1f%%\" %\n      (severe_max, public_hospital_beds, 100*public_hospital_beds\/severe_max))\n","cb9612e7":"print(\"max ever sick: %f, deaths: %f\" % (case1.ever_sick.max(), case1.death.max()))","a76956f4":"## Implementation of the Isolate N days strategy\n\nclass IsolateNDays(SIRwhatever):\n    def __init__(self,\n                 isolation_days = 15,\n                 ever_symptomatic_threshold = 2900,\n                 isolation_transmission_rate_divider = 10,\n                 after_isolation_transmission_rate_divider = 1,\n                 **kargs):\n        super().__init__(**kargs)\n        self.isolation_days = isolation_days\n        self.ever_symptomatic_threshold = ever_symptomatic_threshold\n        self.isolation_transmission_rate_divider = isolation_transmission_rate_divider\n        self.after_isolation_transmission_rate_divider = after_isolation_transmission_rate_divider\n        self.isolated = False\n        self.isolated_countdown = 0\n        \n    def strategy(self, t, observed_ever_symptomatic, **kargs):\n        if self.isolated:\n            if self.isolated_countdown < 1:\n                self.isolated = False\n                self.daily_transmission_rate *= (self.isolation_transmission_rate_divider \/\n                                                 self.after_isolation_transmission_rate_divider)\n                self.ever_symptomatic_threshold = self.population_size * 10 # never ever stop\n                                                                            # the country, you lazy!\n            else:\n                self.isolated_countdown -= 1\n        else:\n            if observed_ever_symptomatic > self.ever_symptomatic_threshold:\n                self.isolation_day = t\n                self.isolated = True\n                self.isolated_countdown = self.isolation_days * self.ticks_per_day\n                self.daily_transmission_rate \/= self.isolation_transmission_rate_divider\n        if self.isolated:\n            return 'isolated'\n        else:\n            return 'normal'","3440c56a":"case2 = IsolateNDays(days = 120, isolation_days=1000).run()","b40b52d8":"with sns.axes_style(\"whitegrid\"):\n    case2.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                           'symptomatic', 'infectious', 'severe', 'death', 'healthy',\n                           'ever_sick'],\n               logy=True, ylim=(1, 3e4), figsize=(20,10))\n    \n    case2.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                           'symptomatic', 'infectious', 'severe', 'death', 'healthy',\n                           'ever_sick'],\n               logy=True, ylim=(1, 1.6e4), xlim=(18, 60), figsize=(20,10))","d029125a":"print(\"max ever_symptomatic: %d, max symptomatic: %d, max severe: %d, max death: %d\" %\n      (case2.ever_symptomatic.max(), case2.symptomatic.max(),\n       case2.severe.max(), case2.death.max()))","2023ccb5":"case2b = IsolateNDays(days=300,\n                      isolation_transmission_rate_divider=3,\n                      isolation_days=1000).run()","e37c46df":"with sns.axes_style(\"whitegrid\"):\n    case2b.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                            'symptomatic', 'infectious', 'severe', 'death', 'healthy',\n                            'ever_sick'],\n               logy=True, ylim=(10, 7e6), figsize=(20,10))","451be97a":"print(\"max ever_symptomatic: %d, max symptomatic: %d, max severe: %d\" %\n      (case2b.ever_symptomatic.max(), case2b.symptomatic.max(), case2b.severe.max()))","3f96d673":"case2c = IsolateNDays(days = 70,\n                      isolation_transmission_rate_divider = 100,\n                      isolation_days=1000).run()","6790ed44":"with sns.axes_style(\"whitegrid\"):\n    case2c.plot(x='day', y=['infected', 'immune', 'incubating', 'infectable', 'symptomatic',\n                            'infectious', 'severe', 'death', 'healthy', 'ever_sick'],\n               logy=True, ylim=(1, 2e4), figsize=(20,10))","0b5dac0a":"case2d = IsolateNDays(days=80,\n                      isolation_transmission_rate_divider=1e8,\n                      isolation_days=1000).run()","e18284e1":"with sns.axes_style(\"whitegrid\"):\n    case2d.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'infectable',\n                            'infectious', 'severe', 'death', 'healthy', 'ever_sick'],\n               logy=True, ylim=(1, 2e4), figsize=(20,10))","830a3470":"with sns.axes_style(\"whitegrid\"):\n    case2d.plot(x='day', y=['velocity', 'ever_symptomatic_velocity'],\n                ylim=(-0.4, 0.6), figsize=(20,10))","36eac793":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(20, 10))\n    ax.set(ylim=(-0.6, 0.5))\n    case2.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n               label='infectious case 2')\n    case2b.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                label='infectious case 2b')\n    case2c.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                label='infectious case 2c')\n    case2d.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                label='infectious case 2d')\n    ","3557e666":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(20, 10))\n    ax.set(ylim=(1, 1e4))\n    case2.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n               label='infectious case 2')\n    case2b.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label='infectious case 2b')\n    case2c.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label='infectious case 2c')\n    case2d.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label='infectious case 2d')","cfaab609":"case3 = IsolateNDays(days = 120, isolation_days=15).run()","41e6bd35":"with sns.axes_style(\"whitegrid\"):\n    case3.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'infectable',\n                           'infectious', 'severe', 'death', 'healthy', 'ever_sick',\n                           'new_sick'],\n               logy=True, ylim=(10, 7e6), figsize=(20,10))\n    case3.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'infectable',\n                           'infectious', 'severe', 'death', 'healthy', 'ever_sick',\n                           'new_sick'],\n               logy=False, ylim=(10, 2e4), xlim=(18, 50), figsize=(20,10))","9cda0880":"case3b = IsolateNDays(days = 120, isolation_days=30).run()","f6b8ac64":"with sns.axes_style(\"whitegrid\"):\n    case3b.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'infectable',\n                            'severe', 'death', 'healthy', 'ever_sick', 'infectious'],\n                logy=True, ylim=(10, 7e6), figsize=(20,10))","9d238727":"case3c = IsolateNDays(days = 150, isolation_days=45,\n                      isolation_transmission_rate_divider=10,\n                      after_isolation_transmission_rate_divider=3).run()\n","f83fbae6":"with sns.axes_style(\"whitegrid\"):\n    case3c.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'infectable',\n                            'severe', 'death', 'healthy', 'ever_sick', 'infectious'],\n                logy=True, ylim=(10, 7e6), figsize=(20,10))","e9913546":"case3d2 = IsolateNDays(days = 120, isolation_days=30,\n                       isolation_transmission_rate_divider=10,\n                       after_isolation_transmission_rate_divider=2).run()\ncase3d4 = IsolateNDays(days = 120, isolation_days=30,\n                       isolation_transmission_rate_divider=10,\n                       after_isolation_transmission_rate_divider=4).run()\ncase3d5 = IsolateNDays(days = 120, isolation_days=30,\n                       isolation_transmission_rate_divider=10,\n                       after_isolation_transmission_rate_divider=5).run()","89b5b8b8":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(20, 10))\n    ax.set(ylim=(1, 1e4))\n    case3b.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label='after divider 1.0')\n    case3c.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label='after divider 3.0')\n    case3d2.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                 label='after divider 2.0')\n    case3d4.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                 label='after divider 4.0')\n    case3d5.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                 label='after divider 5.0')\n    \n    fig, ax = plt.subplots(figsize=(20, 10))\n    ax.set(ylim=(-0.4, 0.6))\n    case3b.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                label='after divider 1.0')\n    case3c.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                label='after divider 3.0')\n    case3d2.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                 label='after divider 2.0')\n    case3d4.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                 label='after divider 4.0')\n    case3d5.plot(x='day', y='velocity', logy=False, ax=ax, xlim=(15, 70),\n                 label='after divider 5.0')\n    ","6613f855":"class EverybodyIsHealthy(SIRwhatever):\n    def __init__(self,\n                 isolation_safe_days = 10,\n                 isolation_transmission_rate_divider = 10,\n                 ever_symptomatic_thresholds = [2900, 50, 10, 10, 1],\n                 **kargs):\n        super().__init__(**kargs)\n        self.isolated = False\n        self.isolation_transmission_rate_divider = isolation_transmission_rate_divider\n        self.isolation_safe_days = isolation_safe_days\n        self.ever_symptomatic_thresholds = ever_symptomatic_thresholds\n        self.flips = 0\n        self.ever_symptomatic_at_flop = 0\n        \n    def strategy(self, t, sick, new_symptomatic, infectious, observed_ever_symptomatic, **_):\n        ever_symptomatic_threshold_ix = (self.flips\n                                         if self.flips < len(self.ever_symptomatic_thresholds)\n                                         else -1)\n        ever_symptomatic_threshold = self.ever_symptomatic_thresholds[ever_symptomatic_threshold_ix]\n        if self.isolated:\n            if new_symptomatic < 1:\n                self.isolation_safe_days_countdown -= 1\n                if self.isolation_safe_days_countdown < 1:\n                    self.isolated=False\n                    self.daily_transmission_rate *= self.isolation_transmission_rate_divider\n                    self.ever_symptomatic_at_flop = observed_ever_symptomatic\n        else:\n            if (observed_ever_symptomatic - self.ever_symptomatic_at_flop > ever_symptomatic_threshold):\n                self.isolated=True\n                self.isolation_safe_days_countdown = self.isolation_safe_days\n                self.daily_transmission_rate \/= self.isolation_transmission_rate_divider\n                self.flips += 1\n\n        return ('isolated' if self.isolated else 'normal')","75f40279":"case4 = EverybodyIsHealthy(days = 250).run()","d1363792":"with sns.axes_style(\"whitegrid\"):\n    case4.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'severe',\n                           'asymptomatic', 'ever_sick', 'infectable'],\n               logy=False, figsize=(20,10), ylim=(0, 2e4)) \n    case4.plot(x='day', y=['infected', 'symptomatic', 'immune', 'incubating', 'severe',\n                           'asymptomatic', 'ever_sick', 'infectable'],\n               logy=True, figsize=(20,10), ylim=(1, 2e4))","1fcbb63d":"mortality_table=pd.read_csv(io.StringIO(\"\"\"\npopulation,start_age,end_age,mortality\n704650,0,9,0.0\n590337,10,19,0.002\n834247,20,29,0.002\n1227008,30,39,0.002\n1049187,40,49,0.004\n782873,50,59,0.013\n597152,60,69,0.036\n420139,70,79,0.08\n284087,80,200,0.148\n\"\"\"))","26379cc9":"class StratifiedSpread(SIRwhatever):\n    def __init__(self,\n                 rampant_ever_symptomatic_threshold = 2900,\n                 isolated_new_symptomatic_threshold = 1,\n                 isolated_transmission_rate_divider = 10,\n                 countdown_days = 10,\n                 stratified_transmission_rate_multiplier = 1,\n                 stratified_exclusion_age = 60,\n                 mortality_table = mortality_table,\n                 stratified_new_symptomatic_threshold = 1,\n                 **kargs):\n        super().__init__(**kargs)\n        self.ss_state = 'rampant'\n        self.rampant_ever_symptomatic_threshold = rampant_ever_symptomatic_threshold\n        self.isolated_new_symptomatic_threshold = isolated_new_symptomatic_threshold\n        self.isolated_transmission_rate_divider = isolated_transmission_rate_divider\n        self.countdown_days = countdown_days\n        self.stratified_exclusion_age = stratified_exclusion_age\n        self.stratified_new_symptomatic_threshold = stratified_new_symptomatic_threshold\n        self.mortality_table = mortality_table\n\n        self.strategies = { k: getattr(self, \"strategy_\" + k)\n                           for k in ['rampant', 'isolated', 'countdown',\n                                     'stratified', 'everybody'] }\n        self.starts     = { k: getattr(self, \"start_\" + k)\n                           for k in ['rampant', 'isolated', 'countdown',\n                                     'stratified', 'everybody'] }\n        \n        # we keep using the data given by the user, so we calculate the scaling\n        # factors for the mortality table accordingly:\n        mt_population_size = mortality_table.population.sum()\n        self.mt_population_multiplier = self.population_size \/ mt_population_size\n        mt_mortality_ratio = ((mortality_table.population * mortality_table.mortality).sum() \/\n                              mt_population_size)\n        self.mt_mortality_multiplier = self.mortality_ratio \/ mt_mortality_ratio\n\n    def strategy(self, **kargs):\n        old_state = self.ss_state\n        state_strategy = self.strategies[old_state]\n        new_state = state_strategy(**kargs)\n        if new_state is None or new_state == old_state:\n            return old_state\n        self.ss_state = new_state\n        state_start = self.starts[new_state]\n        state_start(**kargs)\n        return new_state\n    \n    def start_rampant(self, **kargs):\n        pass #\n\n    def strategy_rampant(self, observed_ever_symptomatic, **kargs):\n        if (observed_ever_symptomatic > self.rampant_ever_symptomatic_threshold):\n            return 'isolated'\n            \n    def start_isolated(self, **kargs):\n        self.daily_transmission_rate \/= self.isolated_transmission_rate_divider\n        \n    def strategy_isolated(self, new_symptomatic, **kargs):\n        if new_symptomatic < self.isolated_new_symptomatic_threshold:\n            return 'countdown'\n    \n    def start_countdown(self, **kargs):\n        self.countdown_ticks = self.countdown_days * self.ticks_per_day\n    \n    def strategy_countdown(self, **kargs):\n        if self.countdown_ticks < 1:\n            self.daily_transmission_rate *= self.isolated_transmission_rate_divider\n            return 'stratified'\n        self.countdown_ticks -= 1\n    \n    def start_stratified(self, observed_ever_symptomatic, **kargs):\n        sxa = self.stratified_exclusion_age\n        mt = self.mortality_table\n        mt_below_sxa = mt[mt.start_age < sxa]\n        mt_over_sxa = mt[mt.end_age > sxa]\n        mt_below_sxa_population = mt_below_sxa.population.sum()\n        mt_over_sxa_population = mt_over_sxa.population.sum()\n        mortality_ratio = ((mt_below_sxa.mortality*mt_below_sxa.population).sum()\/\n                            mt_below_sxa_population)*self.mt_mortality_multiplier\n        multiplier = mortality_ratio\/self.mortality_ratio\n        self.mortality_ratio *= multiplier\n        self.severe_ratio *= multiplier\n        self.population_size = (self.population_size * mt_below_sxa_population \/\n                                (mt_below_sxa_population + mt_over_sxa_population))\n        print(\"multiplier: %f, mortality_ratio: %f, population_size: %f\" %\n              (multiplier, self.mortality_ratio, self.population_size))\n    \n    def strategy_stratified(self, new_symptomatic, observed_ever_symptomatic, **kargs):\n        if (new_symptomatic < self.stratified_new_symptomatic_threshold and\n            observed_ever_symptomatic > 0.33 * self.population_size):\n            return 'everybody'\n    \n    def start_everybody(self, infectable, **kargs):\n        sxa = self.stratified_exclusion_age\n        mt = self.mortality_table\n        mt_below_sxa = mt[mt.start_age < sxa]\n        mt_over_sxa = mt[mt.end_age > sxa]\n        mt_below_sxa_population = mt_below_sxa.population.sum()\n        mt_over_sxa_population = mt_over_sxa.population.sum()\n        stratified_population_size = self.population_size\n        excluded_population_size = (stratified_population_size *\n                                    mt_over_sxa_population \/ mt_below_sxa_population)\n        excluded_population_size_adjusted = excluded_population_size * self.mt_population_multiplier\n        stratified_mortality_rate = ((mt_below_sxa.mortality*mt_below_sxa.population).sum()\/\n                                     mt_below_sxa_population)\n        excluded_mortality_rate = ((mt_over_sxa.mortality*mt_over_sxa.population).sum()\/\n                                     mt_over_sxa_population)\n        combined_mortality_rate = ((stratified_mortality_rate * infectable +\n                                    excluded_mortality_rate * excluded_population_size_adjusted) \/\n                                   (infectable + excluded_population_size_adjusted))\n        multiplier = combined_mortality_rate \/ self.mortality_ratio\n        \n        self.mortality_ratio *= multiplier\n        self.severe_ratio *= multiplier\n        self.population_size = ((self.population_size \/ stratified_population_size) *\n                                stratified_population_size + excluded_population_size)\n        print(\"multiplier: %f, mortality_ratio: %f, population_size: %f\" %\n              (multiplier, self.mortality_ratio, self.population_size))\n        \n    def strategy_everybody(self, **kargs):\n        pass","81464173":"case5 = StratifiedSpread(days=400, stratified_exclusion_age=50).run()","b3acfdc2":"with sns.axes_style(\"whitegrid\"):\n    case5.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                           'asymptomatic', 'infectious', 'severe', 'death', 'healthy',\n                           'ever_sick', 'new_sick'],\n               logy=True, ylim=(1, 9e6), figsize=(20,10))\n    case5.plot(x='day', y='velocity',\n               logy=False, ylim=(-0.3, 0.6), figsize=(20,5))\n","ac07b172":"case5.velocity[case5.day==350]","9dd36a75":"case5.death[case5.day==173]","17b1016f":"case5.severe[case5.day < 173].max()","8cef73e1":"case5b = StratifiedSpread(days=300,\n                          stratified_exclusion_age=60).run()","efafbd66":"with sns.axes_style(\"whitegrid\"):\n    case5b.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                            'infectious', 'severe', 'death', 'healthy', 'ever_sick',\n                            'new_sick'],\n                logy=True, ylim=(1, 7e6), figsize=(20,10))\n    case5b.plot(x='day', y='velocity',\n               logy=False, ylim=(-0.3, 0.6), figsize=(20,5))","73b33955":"case5b.death.max()","8eb144c8":"case5b.severe.max()","c1720069":"case5c = StratifiedSpread(days=300,\n                          stratified_exclusion_age=40).run()","9d45269e":"with sns.axes_style(\"whitegrid\"):\n    case5c.plot(x='day', y=['infected', 'sick', 'immune', 'incubating', 'infectable',\n                            'infectious', 'severe', 'death', 'healthy', 'ever_sick',\n                            'new_sick'],\n                logy=True, ylim=(1, 7e6), figsize=(20,10))\n    case5c.plot(x='day', y='velocity',\n               logy=False, ylim=(-0.3, 0.6), figsize=(20,5))","6763f98c":"case5c[case5c.day==200].velocity","089c6512":"fig, ax = plt.subplots(figsize=(20, 10))\nax.set(ylim=(1, 1e4))\n\nfor incubation_variance in [3, 7, 12]:\n    for asymptomatic_convalescent_period_variance in [3, 6, 12]:\n        df = IsolateNDays(days = 70,\n                          isolation_transmission_rate_divider = 10,\n                          asymptomatic_convalescent_period_variance=asymptomatic_convalescent_period_variance,\n                          incubation_variance=incubation_variance,\n                          isolation_days=70,\n                          quiet=True).run()\n        df.plot(x='day', y='infectious', logy=True, ax=ax, xlim=(15, 70),\n                label=('iv: %f, acpv: %f' %\n                       (incubation_variance, asymptomatic_convalescent_period_variance)))","0cc70e2b":"fig, axs = plt.subplots(2, figsize=(20, 15))\naxs[0].set(ylim=(1, 2e4))\naxs[1].set(ylim=(-0.2, 0.45))\n\nfor asymptomatic_convalescent_period_mean in [0.5, 1, 2, 3, 5, 8]:\n    def f(x):\n        df = SIRwhatever(days = 20,\n                         asymptomatic_convalescent_period_mean=asymptomatic_convalescent_period_mean,\n                         quiet=True,\n                         daily_transmission_rate=x).run()\n        v = df[df.day==10].symptomatic_velocity - 0.4\n        # print(\"m: %f, x: %f, v: %f\" % (asymptomatic_convalescent_period_mean, x, v))\n        return v\n\n    daily_transmission_rate = scipy.optimize.bisect(f, 1, 4, rtol=0.002)\n\n    df = IsolateNDays(days = 120,\n                      daily_transmission_rate = daily_transmission_rate,\n                      isolation_transmission_rate_divider = 20,\n                      asymptomatic_convalescent_period_mean=asymptomatic_convalescent_period_mean,\n                      isolation_days=100,\n                      quiet=True).run()\n    print((\"asymptomatic_convalescent_period_mean: %f, \"+\n           \"daily_transmission_rate: %f, symptomatic_velocity: %f\") %\n         (asymptomatic_convalescent_period_mean, daily_transmission_rate, df.symptomatic_velocity[df.day == 10]))\n\n    df.plot(x='day', y='infectious', logy=True, ax=axs[0], xlim=(15,100),\n            label=('m: %f, dtr: %f' %\n                   (asymptomatic_convalescent_period_mean, daily_transmission_rate)))\n    df.plot(x='day', y='velocity', logy=False, ax=axs[1], xlim=(15,100),\n            label=('m: %f, dtr: %f' %\n                   (asymptomatic_convalescent_period_mean, daily_transmission_rate)))","c2f5ffd2":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 8e4))\n    axs[1].set(ylim=(-0.2, 0.45))\n\n    for asymptomatic_ratio in [0.17, 0.3, 0.5, 0.8]:\n        # we need to adjust the severe and mortality ratios accordingly\n        severe_ratio = 0.05 \/ (1 - 0.17) * (1 - asymptomatic_ratio)\n        mortality_ratio = 0.034 \/ (1 - 0.17) * (1 - asymptomatic_ratio)\n    \n        # we also need to find the daily_transmission_rate for which ever_sick_velocity is 0.4\n        def f(x):\n            df = SIRwhatever(days = 40,\n                             asymptomatic_ratio=asymptomatic_ratio,\n                             mortality_ratio=mortality_ratio,\n                             severe_ratio=severe_ratio,\n                             quiet=True,\n                             daily_transmission_rate=x).run()\n            v = df[df.day==20].observed_ever_symptomatic_velocity - 0.4\n            # print(\"m: %f, x: %f, v: %f\" % (asymptomatic_convalescent_period_mean, x, v))\n            return v\n\n        daily_transmission_rate = scipy.optimize.bisect(f, 1, 4, rtol=0.002)\n        print(\"asymptomatic_ratio: %f, severe_ratio: %f, mortality_ratio: %f, daily_transmission_rate: %f\" %\n              (asymptomatic_ratio, severe_ratio, mortality_ratio, daily_transmission_rate))\n    \n        df = IsolateNDays(days = 150,\n                          daily_transmission_rate=daily_transmission_rate,\n                          isolation_transmission_rate_divider=10,\n                          asymptomatic_ratio=asymptomatic_ratio,\n                          mortality_ratio=mortality_ratio,\n                          severe_ratio=severe_ratio,\n                          isolation_days=200).run()\n\n        label = \" ar: %f\" % asymptomatic_ratio\n        ys = ['infectious', 'symptomatic', 'death', 'immune', 'infectable']\n        df.plot(x='day', y=ys, logy=True, ax=axs[0], xlim=(15,100),\n                label=[y + label for y in ys])\n        velocity_ys = ['velocity', 'symptomatic_velocity']\n        df.plot(x='day', y=velocity_ys, logy=False, ax=axs[1], xlim=(15,100),\n                label=[y + label for y in velocity_ys])","269b6ed7":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.4, 0.45))\n\n    for asymptomatic_ratio in [0.17, 0.4, 0.8]:\n        # we need to adjust the severe and mortality ratios accordingly\n        severe_ratio = 0.05 \/ (1 - 0.17) * (1 - asymptomatic_ratio)\n        mortality_ratio = 0.034 \/ (1 - 0.17) * (1 - asymptomatic_ratio)\n    \n        # we also need to find the daily_transmission_rate for which ever_sick_velocity is 0.4\n        def f(x):\n            df = SIRwhatever(days = 40,\n                             asymptomatic_ratio=asymptomatic_ratio,\n                             mortality_ratio=mortality_ratio,\n                             severe_ratio=severe_ratio,\n                             quiet=True,\n                             daily_transmission_rate=x).run()\n            v = df[df.day==20].observed_ever_symptomatic_velocity - 0.4\n            # print(\"m: %f, x: %f, v: %f\" % (asymptomatic_convalescent_period_mean, x, v))\n            return v\n\n        daily_transmission_rate = scipy.optimize.bisect(f, 1, 4, rtol=0.002)\n        print(\"asymptomatic_ratio: %f, severe_ratio: %f, mortality_ratio: %f, daily_transmission_rate: %f\" %\n              (asymptomatic_ratio, severe_ratio, mortality_ratio, daily_transmission_rate))\n    \n        df = SIRwhatever(days = 80,\n                         daily_transmission_rate=daily_transmission_rate,\n                         asymptomatic_ratio=asymptomatic_ratio,\n                         mortality_ratio=mortality_ratio,\n                         severe_ratio=severe_ratio).run()\n\n        print(\"asymptomatic_ratio: %f, deaths: %f\" %\n             (asymptomatic_ratio, df.death.max()))\n        \n        label = \" ar: %f\" % asymptomatic_ratio\n        ys = ['infectious', 'symptomatic', 'death', 'severe', 'immune', 'infectable']\n        df.plot(x='day', y=ys, logy=True, ax=axs[0], xlim=(15,100),\n                label=[y + label for y in ys])\n        velocity_ys = ['velocity', 'symptomatic_velocity']\n        df.plot(x='day', y=velocity_ys, logy=False, ax=axs[1], xlim=(15,100),\n                label=[y + label for y in velocity_ys])\n        ","dd2f1f04":"days_after = 9\nobserved_velocity = 0.19","665dd32b":"# First we need to look for the daily_transmission_rate_divisor that\n# makes the velocity go down to 0.19 one week after\ndef f(x):\n    sim = IsolateNDays(days=80,\n                       quiet=True,\n                       isolation_transmission_rate_divider=x)\n    df = sim.run()\n    v = df[df.day==(sim.isolation_day + days_after)].observed_ever_symptomatic_velocity - observed_velocity\n    return v\n\nisolation_transmission_rate_divider_e2 = scipy.optimize.bisect(f, 1, 10, rtol=0.002)\nprint(\"isolation_transmission_rate_divider: %f\" % isolation_transmission_rate_divider_e2)","42d9206f":"case_e2 = IsolateNDays(days = 300,\n                       isolation_transmission_rate_divider=isolation_transmission_rate_divider_e2,\n                       isolation_days=500).run()","5c763f9f":"max(case_e2.death)","44c1af84":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.2, 0.5))\n\n    case_e2.plot(x='day', y=['infectious', 'symptomatic', 'death', 'immune', 'infectable'],\n                 logy=True, ax=axs[0], xlim=(15,230))\n    case_e2.plot(x='day', y=['velocity', 'symptomatic_velocity', 'ever_symptomatic_velocity'],\n                 logy=False, ax=axs[1], xlim=(15,230))","b86a1bd2":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.1, 0.45))\n\n    case_e2.plot(x='day', y=['infectious', 'symptomatic', 'death', 'immune', 'infectable'],\n                 logy=True, ax=axs[0], xlim=(20,80))\n    case_e2.plot(x='day', y=['velocity', 'symptomatic_velocity', 'ever_symptomatic_velocity'],\n                 logy=False, ax=axs[1], xlim=(20,80))","7859968e":"def f1(x):\n    sim = SIRwhatever(days = 45,\n                      quiet=True,\n                      daily_transmission_rate=x)\n    df = sim.run()\n    v = df[df.day==(22)].observed_ever_symptomatic_velocity - 0.45\n    return v\ndaily_transmission_rate_e2b = scipy.optimize.bisect(f1, 1, 3, rtol=0.002)\nprint(\"daily_transmission_rate: %f\" % daily_transmission_rate_e2b)","0e9f7f3a":"def f2(x):\n    sim = IsolateNDays(days = 80,\n                       quiet=True,\n                       daily_transmission_rate = daily_transmission_rate_e2b,\n                       isolation_transmission_rate_divider=x)\n    df = sim.run()\n    v = df[df.day==(sim.isolation_day + days_after)].observed_ever_symptomatic_velocity - observed_velocity\n    return v\nisolation_transmission_rate_divider_e2b = scipy.optimize.bisect(f2, 1, 10, rtol=0.002)\nprint(\"isolation_transmission_rate_divider: %f\" % isolation_transmission_rate_divider_e2b)","369bce05":"case_e2b = IsolateNDays(days = 300,\n                        daily_transmission_rate=daily_transmission_rate_e2b,\n                        isolation_transmission_rate_divider=isolation_transmission_rate_divider_e2b,\n                        isolation_days=500).run()","f7e09a6e":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.2, 0.5))\n\n    case_e2b.plot(x='day', y=['infectious', 'symptomatic', 'death', 'immune', 'infectable'],\n                  logy=True, ax=axs[0], xlim=(15,230))\n    case_e2b.plot(x='day', y=['velocity', 'symptomatic_velocity', 'ever_symptomatic_velocity'],\n                  logy=False, ax=axs[1], xlim=(15,230))","fd478cbc":"# we need to adjust the severe and mortality ratios accordingly\nasymptomatic_ratio_e2c=0.5\nsevere_ratio_e2c=0.05\/(1-0.17)*(1-asymptomatic_ratio_e2c)\nmortality_ratio_e2c=0.034\/(1-0.17)*(1-asymptomatic_ratio_e2c)\n\nobservation_delay_e2c=3\nvelocity0_e2c=0.45\nvelocity1_e2c=0.13","be488c93":"def f1(x):\n    sim = SIRwhatever(days=45,\n                      quiet=True,\n                      observation_delay=observation_delay_e2c,\n                      asymptomatic_ratio=asymptomatic_ratio_e2c,\n                      severe_ratio=severe_ratio_e2c,\n                      mortality_ratio=mortality_ratio_e2c,\n                      daily_transmission_rate=x)\n    df = sim.run()\n    v = df[df.day==(22)].observed_ever_symptomatic_velocity\n    return v - velocity0_e2c\ndaily_transmission_rate_e2c = scipy.optimize.bisect(f1, 1, 3, rtol=0.002)\nprint(\"daily_transmission_rate: %f\" % daily_transmission_rate_e2c)","4015a898":"def f2(x):\n    sim = IsolateNDays(days = 80,\n                       quiet=True,\n                       observation_delay=observation_delay_e2c,\n                       asymptomatic_ratio=asymptomatic_ratio_e2c,\n                       severe_ratio=severe_ratio_e2c,\n                       mortality_ratio=mortality_ratio_e2c,\n                       daily_transmission_rate = daily_transmission_rate_e2c,\n                       isolation_transmission_rate_divider=x)\n    df = sim.run()\n    v = df[df.day==(sim.isolation_day + days_after)].observed_ever_symptomatic_velocity\n    #print(\"x: %f, v: %f\" % (x, v))\n    return v - velocity1_e2c\nisolation_transmission_rate_divider_e2c = scipy.optimize.bisect(f2, 1, 10, rtol=0.002)\nprint(\"isolation_transmission_rate_divider: %f\" % isolation_transmission_rate_divider_e2c)","bb49cdc3":"case_e2c = IsolateNDays(days = 400,\n                        observation_delay=observation_delay_e2c,\n                        asymptomatic_ratio=asymptomatic_ratio_e2c,\n                        severe_ratio=severe_ratio_e2c,\n                        mortality_ratio=mortality_ratio_e2c,\n                        daily_transmission_rate = daily_transmission_rate_e2c,\n                        isolation_transmission_rate_divider=isolation_transmission_rate_divider_e2c,\n                        isolation_days=500).run()","a0c0b1c5":"max(case_e2c.ever_sick)","b480ec7f":"max(case_e2c.death)","1dbb776c":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 2e6))\n    axs[1].set(ylim=(-0.2, 0.5))\n\n    case_e2c.plot(x='day', y=['observed_ever_symptomatic', 'ever_symptomatic', 'infectious',\n                              'symptomatic', 'death', 'immune', 'infectable', 'severe'],\n                  logy=True, ax=axs[0], xlim=(15,230))\n    case_e2c.plot(x='day', y=['velocity', 'symptomatic_velocity',\n                              'observed_ever_symptomatic_velocity'],\n                  logy=False, ax=axs[1], xlim=(15,230))","f965a9f2":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(20, 15))\n    ax.set(ylim=(-0.2, 0.5))\n\n    case_e2c.plot(x='day', y=['velocity', 'symptomatic_velocity',\n                              'observed_ever_symptomatic_velocity'],\n                  logy=False, ax=ax, xlim=(24,40))","9d60475d":"# we need to adjust the severe and mortality ratios accordingly\nasymptomatic_ratio_e2d=0.5 # info from the article\nsevere_ratio_e2d=0.05*0.20\nmortality_ratio_e2d=0.5*0.014 # 1.4% of symptomatic patients die (ratio from the same article)\n\nobservation_delay_e2d=3\nvelocity0_e2d=0.40\nvelocity1_e2d=0.18\n\ndays_after = 9\nhidden_symptomatic_ratio = 20","2606008d":"def f1(x):\n    sim = SIRwhatever(days=45,\n                      quiet=True,\n                      observation_delay=observation_delay_e2d,\n                      asymptomatic_ratio=asymptomatic_ratio_e2d,\n                      severe_ratio=severe_ratio_e2d,\n                      mortality_ratio=mortality_ratio_e2d,\n                      daily_transmission_rate=x)\n    df = sim.run()\n    v = df[df.day==(22)].observed_ever_symptomatic_velocity\n    return v - velocity0_e2d\ndaily_transmission_rate_e2d = scipy.optimize.bisect(f1, 1, 3, rtol=0.002)\nprint(\"daily_transmission_rate: %f\" % daily_transmission_rate_e2d)","456e709c":"def f2(x):\n    sim = IsolateNDays(days = 120,\n                       quiet=True,\n                       observation_delay=observation_delay_e2d,\n                       asymptomatic_ratio=asymptomatic_ratio_e2d,\n                       severe_ratio=severe_ratio_e2d,\n                       mortality_ratio=mortality_ratio_e2d,\n                       daily_transmission_rate = daily_transmission_rate_e2d,\n                       ever_symptomatic_threshold = 2900 * hidden_symptomatic_ratio,\n                       isolation_transmission_rate_divider=x)\n    df = sim.run()\n    v = df[df.day==(sim.isolation_day + days_after)].observed_ever_symptomatic_velocity\n    #print(\"x: %f, v: %f\" % (x, v))\n    return v - velocity1_e2d\nisolation_transmission_rate_divider_e2d = scipy.optimize.bisect(f2, 1, 10, rtol=0.002)\nprint(\"isolation_transmission_rate_divider: %f\" % isolation_transmission_rate_divider_e2d)","d9ed6bf1":"case_e2d = IsolateNDays(days = 400,\n                        observation_delay=observation_delay_e2d,\n                        asymptomatic_ratio=asymptomatic_ratio_e2d,\n                        severe_ratio=severe_ratio_e2d,\n                        mortality_ratio=mortality_ratio_e2d,\n                        ever_symptomatic_threshold = 2900 * hidden_symptomatic_ratio,\n                        daily_transmission_rate = daily_transmission_rate_e2d,\n                        isolation_transmission_rate_divider=isolation_transmission_rate_divider_e2d,\n                        isolation_days=500).run()","6b050786":"max(case_e2d.ever_sick)","a7487a16":"max(case_e2d.death)","86ce56d5":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.2, 0.5))\n\n    case_e2d.plot(x='day', y=['observed_ever_symptomatic', 'ever_symptomatic', 'infectious',\n                              'symptomatic', 'death', 'immune', 'infectable', 'severe'],\n                  logy=True, ax=axs[0], xlim=(15,230))\n    case_e2d.plot(x='day', y=['velocity', 'symptomatic_velocity',\n                              'observed_ever_symptomatic_velocity'],\n                  logy=False, ax=axs[1], xlim=(15,230))","31a8b971":"# we need to adjust the severe and mortality ratios accordingly\nasymptomatic_ratio_e3=0.5\nsevere_ratio_e3=0.05*0.20\nmortality_ratio_e3=0.5*0.014\nhidden_symptomatic_ratio_e3 = 1\nobservation_delay_e3=3\ndays_after_e3=11\nvelocity0_e3=0.35\nvelocity1_e3=0.15\n\nsoft_isolation_days = 14\nhard_isolation_transmission_rate_divider_e3 = 8 # hopefully!","9519b26c":"def f1(x):\n    sim = SIRwhatever(days=45,\n                      quiet=True,\n                      observation_delay=observation_delay_e3,\n                      asymptomatic_ratio=asymptomatic_ratio_e3,\n                      severe_ratio=severe_ratio_e3,\n                      mortality_ratio=mortality_ratio_e3,\n                      daily_transmission_rate=x)\n    df = sim.run()\n    v = df[df.day==(22)].observed_ever_symptomatic_velocity\n    return v - velocity0_e3\ndaily_transmission_rate_e3 = scipy.optimize.bisect(f1, 1, 3, rtol=0.002)\nprint(\"daily_transmission_rate: %f\" % daily_transmission_rate_e3)","de7896a3":"def f2(x):\n    sim = IsolateNDays(days = 120,\n                       quiet=True,\n                       observation_delay=observation_delay_e3,\n                       asymptomatic_ratio=asymptomatic_ratio_e3,\n                       severe_ratio=severe_ratio_e3,\n                       mortality_ratio=mortality_ratio_e3,\n                       daily_transmission_rate = daily_transmission_rate_e3,\n                       ever_symptomatic_threshold = 2900 * hidden_symptomatic_ratio_e3,\n                       isolation_transmission_rate_divider=x)\n    df = sim.run()\n    v = df[df.day==(sim.isolation_day + days_after_e3)].observed_ever_symptomatic_velocity\n    #print(\"x: %f, v: %f\" % (x, v))\n    return v - velocity1_e3\nsoft_isolation_transmission_rate_divider_e3 = scipy.optimize.bisect(f2, 1, 10, rtol=0.002)\nprint(\"isolation_transmission_rate_divider: %f\" % soft_isolation_transmission_rate_divider_e3)","9be4ce46":"sim_e3 = IsolateNDays(days = 200,\n                      observation_delay=observation_delay_e3,\n                      asymptomatic_ratio=asymptomatic_ratio_e3,\n                      severe_ratio=severe_ratio_e3,\n                      mortality_ratio=mortality_ratio_e3,\n                      ever_symptomatic_threshold = 2900 * hidden_symptomatic_ratio_e3,\n                      daily_transmission_rate = daily_transmission_rate_e3,\n                      isolation_transmission_rate_divider=soft_isolation_transmission_rate_divider_e3,\n                      after_isolation_transmission_rate_divider=hard_isolation_transmission_rate_divider_e3,\n                      isolation_days=14)\ncase_e3 = sim_e3.run()","0f7a0994":"with sns.axes_style(\"whitegrid\"):\n    fig, axs = plt.subplots(2, figsize=(20, 15))\n    axs[0].set(ylim=(1, 7e6))\n    axs[1].set(ylim=(-0.25, 0.45))\n\n    case_e3.plot(x='day', y=['observed_ever_symptomatic', 'ever_symptomatic', 'infectious',\n                             'symptomatic', 'death', 'immune', 'infectable', 'severe'],\n                 logy=True, ax=axs[0], xlim=(15,130))\n    case_e3.plot(x='day', y=['velocity', 'symptomatic_velocity',\n                             'observed_ever_symptomatic_velocity'],\n                 logy=False, ax=axs[1], xlim=(15,130))","2358a6d8":"sim_e3b = IsolateNDays(days = 200,\n                       observation_delay=observation_delay_e3,\n                       asymptomatic_ratio=asymptomatic_ratio_e3,\n                       severe_ratio=severe_ratio_e3,\n                       mortality_ratio=mortality_ratio_e3,\n                       ever_symptomatic_threshold = 2900 * hidden_symptomatic_ratio_e3,\n                       daily_transmission_rate = daily_transmission_rate_e3,\n                       isolation_transmission_rate_divider=hard_isolation_transmission_rate_divider_e3,\n                       isolation_days=200)\ncase_e3b = sim_e3b.run()","dff80fbd":"with sns.axes_style(\"whitegrid\"):\n    fig, ax = plt.subplots(figsize=(20, 15))\n    ax.set(ylim=(1, 3e6), xlim=(15,130))\n    ax.set_yscale('log')\n    series = ['infectious', 'observed_ever_symptomatic', 'symptomatic', 'death', 'ever_sick']\n    for s in series:\n        sns.lineplot(data=case_e3, x ='day', y=s, ax=ax, label=('%s: soft then hard isolation' % s))\n        sns.lineplot(data=case_e3b, x ='day', y=s, ax=ax, label=('%s: only hard isolation' % s))","72468775":"sim_e3.daily_transmission_rate","d8c2517a":"sim_e3b.daily_transmission_rate","44d5e76f":"max(case_e3.ever_symptomatic)","c3132c4a":"### El simulador","879ea687":"## Caso 3: Paramos el pais durante 15 d\u00edas\n\nEn este escenario, de nuevo, al llegar a los 2900 casos, todo la poblaci\u00f3n de la comunidad se aisla durante 15 d\u00edas. Pasado ese periodo, volvemos al estado normal de libre circulaci\u00f3n de personas.\n\nIgual que en el caso 2, suponemos que con el aislamiento se reduce el ratio de transmision diario a la d\u00e9cima parte.","eb041285":"En este caso podemos ver que la epidemia desaparece. La immunidad de grupo no le permite desarrollarse ya m\u00e1s en nuestra comunidad.","402abeff":"### Caso E2b: Reajustando la velocidad inicial\n\nHasta ahora hab\u00edamos supuesto que la velocidad de la epidemia en Espa\u00f1a antes de tomar medidas estaba en torno al 40%, pero si nos fijamos solo en los d\u00edas previos a la toma de medidas, ese valor en realidad estaba en torno al 0.45%.\n\nVamos a repetir la simulaci\u00f3n utilizando ese valor de partida.","25d33ca8":"Como era de esperar, vemos que el n\u00famero de muertes cae al crecer el ratio de enfermos asintomaticos. No obstante, aun en el mejor caso, cuando le damos el valor 0.8, el n\u00famero de muertes estaria por encima de 50k (y solo en la Comunidad de Madrid).","e4df4fed":"### Caso 5b: Aislamos a los mayores de 60 a\u00f1os\n\nProbemos a dejar fuera a la poblaci\u00f3n mayor de 60 a\u00f1os que representa el 20% del total.","43b03d08":"En la siguiente gr\u00e1fica se muestran las distintas curvas que caracterizan la evoluci\u00f3n de la epidemia.","70ca29dd":"Vemos que tenemos un divisor del ratio de transmisi\u00f3n diario mucho m\u00e1s alto, lo cual es bueno.","0bcf7413":"Este escenario pueda parecer absurdo pero cobra sentido cuando tenemos en cuenta nuestro contexto global.\n\nAunque en un tiempo razonable consiguiesemos eliminar completamente el virus en Madrid y en toda Espa\u00f1a, este seguir\u00e1 desarrollandose en otras partes del mundo y a no ser que cerremos nuestras fronteras a cal y canto, seguiremos recibiendo un goteo poco predecible de personas infectadas que en cualquier momento pueden reiniciar la epidemia.\n\nConfiemos en que para llegado ese momento, nuestro nivel de concienciaci\u00f3n tanto a nivel personal como de nuestros gobernantes, nos fuerce a actuar de una manera m\u00e1s eficaz, permitiendonos detener la epidema con prontitud, por ejemplo, aplicando aislamientos con premura en aquellos lugares donde se detecten nuevos casos.\n\nPero aun as\u00ed, parece poco razonable pensar que mantener al pais en ese estado de alerta, sea el contexto adecuado para propiciar la recuperaci\u00f3n economica. \u00bfPodriamos estar aislando ciudades de Espa\u00f1a durante periodos de varias semanas cada vez que se detecte un nuevo caso?\n\nEn realidad este escenario lo que pone de manifiesto es la cortedad de miras de nuestros gobernantes, que han sido incapaces de coordinarse a nivel europeo para plantar cara de forma conjunta a la epidemia. El aislamiento hubiese sido mucho m\u00e1s eficaz si toda Europa lo hiciese a la vez. Ahora tendremos paises que van a distintas velocidades y eso nos va a obligara a mantener las fronteras cerradas durante mucho tiempo.","3b1ade72":"De nuevo llegariamos a cerca de los 11k enfermos sintom\u00e1ticos para luego descender hasta 3k. Una vez levantado el aislamiento la epidemia volveria a extenderse y dos semanas despues estariamos en el mismo punto que cuando se instauro el aislamiento.\n\nEl \u00faltimo d\u00eda de aislamiento aun estar\u00edamos viendo un incremento de 250 nuevos enfermos cada d\u00eda.\n\n### Caso 3b: \u00bfProbamos a parar un mes?\n\nEn vista de que parar 15 d\u00edas no es suficiente, \u00a1probemos a hacerlo durante un mes!","01b447ba":"1. En el mejor de los casos, el n\u00famero de enfermos en la Comunidad de Madrid parara de crecer hasta llegar a 11k. El n\u00famero maximo de enfermos que necesiten ser ingresados en la UCI de manera simultanea rondara los 800.\n\n2. Igualmente, en el caso ideal, suponiendo un aislamiento completo de la poblaci\u00f3n capaz de eliminar cualquier nuevo contagio, aun tendr\u00edan que pasar 3 semanas para que el numero de personas capaz de transmitir la enfermedad en la comunidad bajase a 10.\n\n3. Asumiendo hipotesis m\u00e1s realistas sobre la eficacia de las medidas del gobierno, el tiempo necesario para llegar a reducir el n\u00famero de personas contagiosas a 10, pasa a ser de 40 d\u00edas.\n\n4. Si se para la epidemia, no habremos desarrollado immunidad de grupo por lo que cualquier nuevo caso podr\u00eda relanzar el proceso. Esto puede ser causado tanto por personas contagiosas aun presentes en la poblaci\u00f3n o por casos importados. Estamos hablando de un problema a nivel global. No es suficiente con eliminar el virus en Madrid, Espa\u00f1a o Europa.\n\n5. Igualmente, una vez parada la epidemia, sera aconsejable mantener un nivel de aislamiento parcial que limite la velocidad de propagaci\u00f3n de nuevos focos.\n\n6. Permitir que la epidemia se expanda de manera controlada entre los estratos de la poblaci\u00f3n con menos riesgo nos permitir\u00eda lograr immunidad de grupo, pero el n\u00famero de muertos seria notable.\n\n\nA\u00f1adir por \u00faltimo que como en cualquier simulaci\u00f3n, la validez de los resultados depende en gran medida de las hipotesis realizadas, especialmente de los valores de parametrizaci\u00f3n, por lo que cualquier valor aqu\u00ed dado puede tener un grado de error importante.\n\nNo obstante a nivel cualitativo si podemos comparar las curvas de evoluci\u00f3n aqu\u00ed generadas con la realidad para permitirnos determinar en que escenarios nos encontramos y tomar medidas correctivas si resulta no ser el que esperamos!\n\nReciprocamente, seg\u00fan pase el tiempo, podremos ir ajustando los parametros de la simulaci\u00f3n tratando de ajustarlos a lo que vemos en la realidad de cara a predecir con mayor precisi\u00f3n el futuro.","acc3238a":"# Simulaci\u00f3n del avance del COVID_19 en Madrid\n\n## Datos:\n\n* Tama\u00f1o poblaci\u00f3n Madrid: 6.6M\n* Camas hospitales por capita: 0.3%\n* Porcentage casos asintomaticos: 17% (15.5-20.2) ([referencia](https:\/\/www.eurosurveillance.org\/content\/10.2807\/1560-7917.ES.2020.25.10.2000180))\n* Mortalidad: 3.4% ([referencia](https:\/\/www.worldometers.info\/coronavirus\/coronavirus-death-rate\/))\n* Casos que requieren UCI: 5% (a partir de las estad\u00edsticas publicadas para Espa\u00f1a).\n* Poblaci\u00f3n de Madrid por debajo de los 50 a\u00f1os: 68% ([INE](https:\/\/www.ine.es\/jaxi\/Tabla.htm?path=\/t20\/e245\/p05\/a2011\/l0\/&file=00028001.px&L=0))","83bb748e":"Vemos que el coste es alto, llegando a morir mas de 38k personas solo en la Comunidad de Madrid.","140057ce":"No obstante, el n\u00famero de muertes alcanza las 5400 personas s\u00f3lo en la Comunidad de Madrid.\n\nSi extrapolamos ese dato a toda Espa\u00f1a podriamos estar hablando de entre 20 y 35 mil muertos.","60f80c26":"## Caso E2: 9 d\u00edas despues\n\nYa han pasado 9 d\u00edas desde que se declaro el estado de alerta y la velocidad de crecimiento de la epidemia en Espa\u00f1a parece que se ha estabilizado en torno al 20%.\n\nPodemos utilizar ese dato para ajustar la simulaci\u00f3n y ver en que escenario nos encontramos.\n\n","c3092b56":"Representemos el n\u00famero de infectados y la velocidad a la que evolucionan.","93c12c9e":"### Caso 2c: \u00bfY si estamos siendo muy pesimistas?\n\nTambien puede ser que las medidas del gobierno pulvericen el ratio de transmision diario a por ejemplo, la centesima parte.","b574f0e8":"Pasados los 30 d\u00edas de confinamiento, aun estariamos viendo alrededor de 20 enfermos nuevos cada d\u00eda. Aproximadamente, aun tendriamos 40 personas contagiosas desperdigadas por la comunidad (es importante tener en cuenta que en la realidad esas personas contagiosas no sabriamos quienes son ni donde est\u00e1n, por lo que no se podr\u00edan aislar).\n\nAl levantar el confinamiento, esas 40 personas reiniciarian la expansi\u00f3n de la epidemia y 2 semanas despues otra vez estar\u00edamos en el punto de partida.\n\nLa reexpansi\u00f3n de la epidemia ir\u00eda esta vez tan rapido como la primera y ser\u00eda completamente est\u00fapido pensar de nuevo que podr\u00edamos frenarla.","2a44ab5b":"Vemos que a groso modo, no hay muchos cambios con respecto al caso E2. Seguimos en el escenario donde practicamente toda la poblaci\u00f3n se infecta.","e6b22aad":"Se aprecia que, una vez ajustado el ratio de transmisi\u00f3n diario para que la velocidad de infecci\u00f3n se mantenga en el valor 0.4, la influencia del tiempo de convalecencia asintomatico medio tampoco es muy grande. \n\nEn cualquier caso, a lo largo del presente estudio hemos utilizado el valor de 2 dias que es conservador y se encuentra en una franja de poca variaci\u00f3n.\n\nSi el valor real del parametro resultase ser mayor, el efecto ser\u00eda tiempos de evoluci\u00f3n m\u00e1s largos a los aqu\u00ed obtenidos.","c3b23133":"Vemos que en este caso, no toda la poblaci\u00f3n se infecta. Estamos en un escenario donde $R_0 < 1$.","fab37476":"La conclusi\u00f3n es que el n\u00famero de enfermos sintomaticos en Madrid aun seguir\u00e1 creciendo durante unos 7 dias hasta casi llegar a los 11k.\n\nEl n\u00famero de enfermos que tendran que ingresar en la UCI rondara los 800. En Madrid [hay 641 camas de UCI](https:\/\/elpais.com\/espana\/madrid\/2020-03-14\/casi-el-30-de-camas-de-la-uci-en-madrid-ya-se-destina-a-pacientes-con-coronavirus.html) as\u00ed que llegaremos al limite de la capacidad (y eso sin tener en cuenta el grado de ocupaci\u00f3n normal de esas camas).\n\nPor otro lado vemos que hasta aproximadamente 40 d\u00edas despues de tomar medidas, no se reduce el n\u00famero de infecciosos a 10, y aun tardar\u00e1 en torno a 12 d\u00edas m\u00e1s en llegar a 1 (aunque como ya comente al inicio del notebook, cuando el n\u00famero de elementos es tan bajo, la precisi\u00f3n del modelo es muy baja y podra haber grandes variaciones entre la predicci\u00f3n y la realidad).\n\nY todo esto, claro, suponiendo que las medidas tomadas por el gobierno son eficaces y que realmente se va a reducir la tasa de transmisi\u00f3n diaria a la d\u00e9cima parte de la actual.","a86f975b":"Y ese es quiza el peor dato: m\u00e1s de 173k muertos.\n\nEchemos ahora un vistazo a las curvas:","4d53d83c":"## Modelado:\n\n* Cada enfermo genera un n\u00famero de boletos diario que se sortean entre la poblaci\u00f3n.\n\n* Si alguno de esos boletos le toca a una persona sana, esta se infecta.\n\n* Los enfermos pueden estar en 4 estados:\n\n  * incubando\n  \n  * enfermo asintomatico (asymptomatic)\n\n  * enfermo leve (mild)\n  \n  * enfermo grave (severe), que requiere UCI\n  \n* Solo los enfermos que est\u00e1n incubando la enfermedad y los asintomaticos pueden transmitir la enfermedad. Se supone que para el resto, la probabilidad de contagio se vuelve 0 al ser puestos en cuarentena.\n\n* Para cada tipo de enfermo, se contemplan tiempos medios de convalecencia y varianzas distintos.\n\n* Los periodos de convalecencia siguen una distribuci\u00f3n de [Gauss inversa](https:\/\/en.wikipedia.org\/wiki\/Inverse_Gaussian_distribution).\n\n* Los periodos de incubaci\u00f3n siguen una distribuci\u00f3n [log-normal](https:\/\/en.wikipedia.org\/wiki\/Log-normal_distribution).\n\n* Durante el periodo de incubaci\u00f3n, solo se puede contagiar la enfermedad en los \u00faltimos d\u00edas. El n\u00famero de boletos se calcula seg\u00fan la siguiente formula: $b = r^{t_1-t}*(t-t_0)\/(t_1-t_0)$, siendo $t_0$ el momento en el que la persona se contagia, $t_1$ el momento en el que desarrolla la enfermedad y $r$ un parametro de amortiguamiento. Por defecto se calcula, suponiendo que el n\u00famero de boletos se dobla cada dos d\u00edas.\n\n* Solo los enfermos graves pueden morir.\n\n* Una vez un enfermo se recupera, se vuelve immune y no puede adquirir o transmitir la enfermedad de nuevo.\n\n* El modelo contempla la posibilidad de aplicar distintas estrategias para paliar los efectos de la epidemia.\n\n* El modelado se hace en funci\u00f3n a macroparametros (no a individuos) por lo que su validez sera mayor cuando los n\u00fameros de enfermos, infectados, etc., [sean altos](https:\/\/es.wikipedia.org\/wiki\/Ley_de_los_grandes_n%C3%BAmeros) y tendra poca precisi\u00f3n cuando estos sean bajos debido a la aleatoriedad.\n\n## Parametrizaci\u00f3n:\n\nEstos son los parametros utilizados en la modelizaci\u00f3n y los valores por defecto asignados:\n\n* `population_size=6.662e6` - poblacion de Madrid\n\n* `asymptomatic_ratio=0.17` - porcentage de enfermos que pasan la enfermedad sin manifestar ning\u00fan s\u00edntoma.\n\n* `severe_ratio=0.05` - porcentage de enfermos que en situaci\u00f3n critca que necesitan ser ingresados en la UCI.\n\n* `mortality_ratio=0.035` - porcentage de enfermos que acaban muriendo\n\n* `asymptomatic_convalescent_period_mean=2` - tiempo medio de convalecencia para enfermos asintomaticos, notese que este es el periodo medio durante el cual un enfermos asintomatico puede seguir transmitiendo el virus.\n\n* `asymptomatic_convalescent_period_variance=3` - varianza\n\n* `mild_convalescent_period_mean=8` - tiempo medio de convalecencia para enfermos que no requiren UCI.\n\n* `mild_convalescent_period_variance=4` - varianza\n\n* `severe_convalescent_period_mean=16` - tiempo medio de convalecencia para enfermos que requieren UCI.\n\n* `severe_convalescent_period_variance=8` - varianza\n\n* `daily_transmission_rate=2.0` - posibilidades de contagio diarias (boletos) generadas por un enfermo que no est\u00e1 en cuarentena. El valor por defecto se ha ajustado para reproducir la velocidad de contagio de Espa\u00f1a, +40% diario.\n\n* `preinfectious_half_period=2` - para personas en periodo de incubaci\u00f3n, tiempo medio en el cual se duplican los boletos de contagio\n\n* `incubation_mean=5` - tiempo medio de incubaci\u00f3n\n\n* `incubation_variance=7` - varianza\n\n* `infected_seed=10` - n\u00famero de infectados iniciales\n\n* `days=100` - tama\u00f1o de la simulaci\u00f3n\n\n* `ticks_per_day=4` - n\u00famero de cortes por d\u00eda, para aumentar la precisi\u00f3n de la integraci\u00f3n.\n\n## Variables de salida\n\nEl simulador calcula y devuelve una tabla con las siguientes columnas:\n\n* `day` - tiempo transcurrido en dias (numero de punto flotante)\n       \n* `infectious` - n\u00famero de personas infecciosas\n\n* `asymptomatic` - n\u00famero de enfermos asintomaticos\n\n* `mild` - numero de enfermos leves\n\n* `severe` - n\u00famero de enfermos graves (UCI)\n\n* `immune` - n\u00famero de personas immunes\n\n* `infected` - n\u00famero de personas infectadas (incubando + enfermas + asintom\u00e1ticas)\n\n* `death` - n\u00famero acumulado de muertos\n\n* `healthy` - n\u00famero de personas sanas\n\n* `incubating` - n\u00famero de personas incubando la enfermedad\n\n* `sick` - n\u00famero de personas enfermas (no se contabilizan aqu\u00ed los enfermos asintom\u00e1ticos)\n\n* `ever_sick`- n\u00famero de personas que est\u00e1n o han estado enfermas\n\n* `new_sick` - n\u00famero de personas que caen enfermas en el intervalo al que referencia la fila de la tabla\n\n* `infectable` - personas susceptibles de ser infectadas (las que no son ni inmunes, ni est\u00e1n infectadas, ni han muerto)\n\n* `velocity` - velocidad a la que aumenta el n\u00famero de personas infectadas en el espacio logaritmico.\n\n* `sick_velocity` - velocidad a la que aumenta el n\u00famero de personas enfermas.\n\n* `ever_sick_velocity` - velocidad a la que aumenta el n\u00famero de personas que han estado alguna vez enfermas\n\n* `status` - al simular estrategias de contenci\u00f3n de la epidemia, este campo indica la etapa.\n\n## Programaci\u00f3n de la simulaci\u00f3n\n","723bed59":"## Caso 2: Paramos el pais para siempre\n\nSolo como caso hipotetico que nos permitira ver algunos n\u00fameros interesantes.\n\nEn esta simulaci\u00f3n, al llegar a los 2900 casos (n\u00famero de casos en Madrid a 14 de marzo, cuando el gobiernos declaro el estado de alerta), se aislara a la poblaci\u00f3n para siempre.\n\nDurante el periodo de aislamiento suponemos que la tasa diaria de transmision de la epidemia (`daily_transmission_rate`) se divide por 10 (m\u00e1s adelante contemplaremos otros escenarios, cambiando dicho parametro).","fe37a7e5":"# Efecto de los parametros en el modelo\n\nAlgunos de los parametros utilizados en el simulador han sido elegidos sin demasiada rigurosidad.\n\nAntes de acabar vamos a estudiar el efecto de perturbar esos parametros sobre los resultados obtenidos de cara a determinar si introducen mucha o poca variacion en los mismos.\n\nCentremonos en los 3 parametros que pueden tener un efecto mayor en la salida del simulador:\n\n1. Variancia del periodo de incubaci\u00f3n.\n\n2. Tiempo medio de convalecencia de los enfermos asintomaticos.\n\n3. Variancia del periodo de convalecencia de los enfermos asintomaticos.\n\n## Efecto de las varianzas\n\nPrimero repetimos la simulac\u00edon del caso 2 con variaciones en los parametros de varianza.","b4a5e931":"Como en el caso de 50 a\u00f1os, vemos que no se detiene la epidemia, pero aun as\u00ed se relentiza su expansion. En este caso el factor de velocidad se habra reducido a casi la tercera parte, de 0.4 a 0.14.\n\nEl coste en vidas, antes de la etapa final ser\u00eda todav\u00eda extremadamente alto, aproximadamente de 11k, todos menores de 40 a\u00f1os.","a772637c":"Dibujar las curvas en escala logaritmica nos permite ver la evoluci\u00f3n de variables cuyos valores son siempre relativamente peque\u00f1os, como es el caso de `severe`, que indica el n\u00famero de enfermos que requieren tratamiento en la UCI.","2e819620":"Se puede apreciar que el efecto de dichos parametros en los resultados de la simulaci\u00f3n es relativamente peque\u00f1o.\n\nEso nos indica que un error en la estimaci\u00f3n de esos parametros no genera un error del mismo calibre en el resultado de la simulaci\u00f3n.\n\n## Efecto del tiempo medio de convalecencia asintom\u00e1tica\n\nExperimentemos ahora variando el tiempo medio de convalecencia asintomatica.","42dd265e":"### Comparaci\u00f3n de los subcasos\n\nAhora comparemos las curvas de infecciosos de los cuatro subcasos:","0897bf67":"Desafortunadamente el n\u00famero de muertes entre la poblaci\u00f3n menor de 50 a\u00f1os ser\u00eda de 19k y llegariamos a tener a 22k enfermos graves simultaneamente.\n\nNo obstante, habr\u00eda que plantearse si es posible reducir el ratio de muertos particionando a la poblaci\u00f3n en base a criterios m\u00e1s sofisticados, como por ejemplo, teniendo en cuenta el estado fisico de las personas.\n\nTambien hay que tener en cuenta que los ratios de mortalidad y de enfermos que necesitan hospitalizaci\u00f3n son por ahora muy poco precisos, existiendo gran divergencia entre los distintos estudios publicados.","1f0165fd":"### Caso E2d: El pais de los ciegos 9 d\u00edas despues\n\nSeg\u00fan [este art\u00edculo](https:\/\/elpais.com\/politica\/2020\/03\/24\/actualidad\/1585077503_994849.html) de El Pais, los n\u00fameros facilitados por el gobierno podr\u00edan estar muy por debajo de la realidad. Concretamente hasta 20 veces por debajo.\n\nVamos a ver que pasa si introducimos esa hipotesis en el simulador.","0c28936e":"## Caso 4: Paramos el pais hasta que dejen de aparecer nuevos enfermos\n\nEn este escenario aislamos el pais completamente hasta que dejen de aparecer enfermos, luego por si acaso aun esperamos unos d\u00edas m\u00e1s antes de levantar las restricciones.\n\nAdem\u00e1s, en el supuesto de que volviesen a aparecer nuevos casos, de nuevo iniciariamos el aislamiento, pero cada vez poniendo el umbral de nuevos casos mas bajo.","a2797aaf":"# Ep\u00edlogo\n\nVoy a utilizar los comentarios y preguntas sobre la simulaci\u00f3n que me esta enviando la gente para expandirla con algunos nuevos escenarios que creo que son interesantes.\n\nTambien voy a aprovechar para responder a algunas preguntas que considero que son interesantes.\n\n## \u00bfY las vacunas?\n\nEn la simulaci\u00f3n no se habla para nada de lo que va a pasar cuando aparezca la vacuna (suponiendo que se consigue, \u00a1claro!).\n\nPara poder introducir el efecto de la vacuna en la simulaci\u00f3n tendriamos que conocer diversos parametros sobre la misma, siendo el m\u00e1s importante cuando va a estar lista, y eso sin una bola de cristal...\n\nDe todas formas, en cuanto exista la vacuna y se administre a la poblaci\u00f3n el problema se acaba. Como se mostraba en el caso de propagacion controlada estratificada, una vez se immunice a al menos, el 80% de la poblaci\u00f3n la epidemia ya no es viable y se extinguira por si sola.\n\n\n## Ratio de enfermos asintom\u00e1ticos\n\nEl ratio de enfermos asintom\u00e1ticos esta extraido de un estudio que se hizo con los pasajeros del crucero Diana Princess. Probablemente los turistas de un crucero no sea un grupo representivo de la poblaci\u00f3n general, especialmente en lo que a distribuci\u00f3n de edades se refiere. \u00bfQue pasar\u00eda si dicho paramero estuviese muy subestimado?\n\nVamos a verlo probemos de nuevo a simular algunos de los escenarios anteriores con valores distintos del ratio de enfermos asintomaticos.\n\n### Caso E1a: Aislamiento de la poblaci\u00f3n para siempre cuando hay muchos enfermos asintom\u00e1ticos\n\nEn la siguiente ejecuci\u00f3n del simulador se utilizan los siguientes valores del parametro `asymptomatic_rate`: 17%, 30%, 50% y 80%.\n\nEl c\u00f3digo es un poco m\u00e1s complicado que en los casos estudiados hasta ahora porque hay que ajustar el resto de parametros de manera acorde. Se tienen que mantener las proporciones entre los enfermos leves y severos y a la vez conseguir que la velocidad de infecci\u00f3n inicial sea 0.4.","069ce76a":"Podemos ver que el efecto de reducir en 100 veces el ratio de transmision aun tiene una importante influencia en el ritmo al que se reduce el n\u00famero de personas contagiosas dentro de la poblaci\u00f3n pero m\u00e1s alla de ese punto, ya no influye casi nada.\n\nEn cualquier caso, viendo esta gr\u00e1fica la cuesti\u00f3n que cabe plantearse es si vale la pena mantener el pais en un estado de aislamiento no completo, permitiendo que la gente acuda a su trabajo e incluso utilice el transporte publico. \u00bfEs mejor este aislamiento parcial al que estamos sometidos que uno total que haga que la epidemia pase lo antes posible?","d2c9f6f3":"Vemos un pico de 120k pacientes severos (y solo en la Comunidad de Madrid, recordemos que la simulaci\u00f3n esta restringida a ese territorio) que es completamente inasumible por muchos hospitales de campa\u00f1a que monten.","9b679784":"Ese es, m\u00e1s o menos, el escenario [Flatten The Curve](https:\/\/thespinoff.co.nz\/society\/09-03-2020\/the-three-phases-of-covid-19-and-how-we-can-make-it-manageable\/) que algunos plantean como la soluci\u00f3n ideal...\n\nSe ve que no han hecho muchos n\u00fameros, porque por ejemplo, en este caso, la epidemia no empieza a retroceder hasta dentro de medio a\u00f1o. Llegariamos a tener 234k enfermos simultaneos de los cuales unos 25k serian muy graves.\n\nY la relaci\u00f3n siempre es igual, si se acorta la epidemia, aumenta el numero de enfermos... si se recorta el n\u00famero de enfermos simultaneos, se alarga la epidemia... no se pueden tener las dos cosas a la vez.\n\nAdem\u00e1s, en una simulaci\u00f3n de este tipo, siempre hay parametros que pueden estar equivocados o relaciones que pueden ser diferentes a como hemos supuesto e introducir errores, pero precisamente, la relaci\u00f3n entre duraci\u00f3n y n\u00famero de enfermos m\u00e1ximo se puede comprobar de otras maneras que es correcta (el area bajo la curva de enfermos es constante cuando pr\u00e1cticamente toda la poblaci\u00f3n se contagia).","c01ab1cf":"# Conclusiones","4f7b2b00":"### Caso 5c: Aislamos a los mayores de 40 a\u00f1os\n\nDejando que la enfermendad se extienda entre los menores de 50 o 60 a\u00f1os hemos visto que tiene un coste muy alto en muertes. Vamos a probar con los menores de 40 para ver si eso proporcionar\u00eda alguna ventaja.","075a703b":"Para mantener la coherencia con el resto de simulaciones, no usaremos dicha tabla tal cual, si no que la escalaremos hasta conseguir que la mortalidad global tenga el valor 3.4% (el mismo valor que hemos utilizado en el resto de casos).","4a000caf":"Lo que se ve en esta simulaci\u00f3n es que probablemente nos queden aun dos meses de aislamiento.\n\nHaber pasado por la etapa de aislamiento suave, ha incrementado dicho periodo en 3 semanas... adem\u00e1s de hacer crecer en casi un orden de magnitud el n\u00famero de enfermos y de muertos.\n\nAunque aqu\u00ed no se muestra, si se ejecuta la simulaci\u00f3n dando al parametro `hidden_symptomatic_ratio_e3` el valor 3, que probablemente sea m\u00e1s cercano a la realidad (puede corroborarse viendo que el n\u00famero de muertos que arroja la simulaci\u00f3n es muy bajo, teniendo en cuenta los que ya se cuentan), el n\u00famero de enfermos totales en la Comunidad de Madrid llega a rondar el 1M.\n\nEn cualquier caso, lo que queda claro es que el periodo de aislamiento suave no ha sido mas que una insensatez. Se ha perdido el tiempo, se han colapsado los sistemas de salud de varias comunidades y mucha m\u00e1s gente ha muerto y morira.","bcbb1d2b":"## Caso E3: Llegara el aislamiento duro\n\nHoy se comentaba en Twitter que se ha filtrado el borrador de un decreto con medidas de aislamiento m\u00e1s duras el cual probablemente se haga publico en los pr\u00f3ximos d\u00edas. Podemos simular dicho escenario.\n\nAunque los datos facilitados por el gobierno han sido puestos en entredicho en varios analisis (resultando la realidad siempre mucho peor), vamos a usarlos de todas formas como punto de partida.","cf448c21":"### Caso 2d: \u00bfy si consiguiesemos cortar los contagios completamente?\n\nEstudiemos el caso limite, en el que cortamos completamente los contagios (en el simulador vamos a dividir el ratio de contagio diario por $10^8$).\n\nAunque sea un caso irreal, esta simulaci\u00f3n nos va a permitir conocer cual es el tope inferior de la duraci\u00f3n de la epidemia.","dcb2ad96":"### Caso E2c: el escenario m\u00e1s optimista\n\nPara finalizar voy a simular el escenario m\u00e1s optimista posible que aun es compatible con lo que hemos observado en la realidad.\n\nTambien he introducido un parametro nuevo que es el retardo de observaci\u00f3n, el tiempo que pasa desde que un enfermo nota los primeros sintomas hasta que acaba siendo contabilizado en las estadisticas. El gobierno no ha facilitado este dato de forma oficial, pero en alguna de las ruedas de prensa se ha hablado de 2 d\u00edas.\n\nLas optimistas hipotesis de partida son como siguen:\n\n1. Ratio de casos asintomaticos del 50%\n\n2. 3 d\u00edas de retardo desde que empiezan los sintomas hasta que el caso es contabilizado en las estadisticas.\n\n3. Velocidad de la epidemia antes de tomar medidas: 45%\n\n4. Velocidad 9 d\u00edas despues de tomar medidas: 13% (insolito dato de la Comunidad de Madrid, muy por debajo de la media del resto de Espa\u00f1a)","5c44f1e9":"## Caso 5: Contagio estratificado controlado\n\nCon las soluciones de aislamiento estudiadas hasta ahora, aunque se consiga parar la epidemia en Espa\u00f1a, no se habr\u00e1 desarrollado immunidad de grupo y eso da lugar al problema mencionado con anterioridad relativo a que cualquier nuevo caso importado puede desencadenar de nuevo la epidemia.\n\nPor ese motivo, tambien hay quien proopone aislar unicamente a las personas de riesgo y dejar que el resto de la poblaci\u00f3n, se contagie.\n\nPor ejemplo, \u00bfque pasar\u00eda si una vez reducida la epidemia actual enviasemos a todas las personas mayores de 50 a\u00f1os (el 68% de la poblaci\u00f3n de Madrid segun datos del INE) en autobuses camino de Benidorm al tanto que dejamos que la epidemia se extienda de nuevo en Madrid entre el resto de la poblaci\u00f3n? Pasado un tiempo, la mayoria de los madrile\u00f1os menores de 50 a\u00f1os habr\u00e1n pasado la enfermedad y ser\u00e1n immunes.\n\nPuede que si entonces dejamos que nuestros mayores vuelvan, aun nos mantengamos por debajo del punto critico a partir del cual la epidemia es viable. Como sociedad, \u00bfseremos immunes al coronavirus?\n\nEn concreto, vamos a realizar la simulaci\u00f3n de un escenario con las siguientes etapas:\n\n1. Crecimiento rampante de la epidemia\n\n2. Como en los casos anteriores, al alcanzar los 2900 enfermos symptomaticos se aplican medidas de aislamiento que reducen el ratio de transmisi\u00f3n de la enfermedad a la decima parte.\n\n3. Una vez se alcanza el punto donde ya no aparecen m\u00e1s enfermos durante varios d\u00edas, simulamos eliminar a las personas mayores de 50 a\u00f1os y dejamos que la enfermedad progrese entre el resto.\n\n4. La enfermedad se propaga, contag\u00eda a la mayor parte de la poblaci\u00f3n y cae.\n\n5. Reintroducimos a las personas mayores de 50 a\u00f1os sin tomar ningun otro tipo de medida y vemos que pasa.\n\nLa mortalidad por edades viene reflejada en la siguiente tabla:","bd874717":"### Caso E1b: \u00bfque pasa si no hacemos nada y el ratio de enfermos asintom\u00e1ticos es muy alto?\n\nPodemos hacer la misma simulaci\u00f3n para el caso en el que no se toman medidas, que ser\u00eda el peor caso posible, para ver como los distintos valores del ratio de enfermos asintomaticos afectan al n\u00famero de muertes y de enfermos graves.","92f1e26f":"### Caso 2b: \u00bfy si estamos siendo muy optimistas?\n\n\u00bfQue pasa si las medidas del gobierno no son tan eficaces y por ejemplo, solo conseguimos reducir el ratio de transmisi\u00f3n a la tercera parte?","2de9449a":"Vemos que la velocidad de propagaci\u00f3n de la epidemia se estabiliza en torno al 15% y sigue as\u00ed durante aproximandamente un mes. En ese punto, ya hay tantas personas immunes que la propagaci\u00f3n se relentiza por si misma.\n\nSi comparamos las curvas de velocidad simuladas con la realidad, vemos que probablemente el simulador este arrojando un resultado m\u00e1s optimista que el real puesto que la pendiente de la curva simulada es mucho mayor de lo que se observa en la realidad.","c2f85589":"Al levantar la politica de aislamiento estricta aun tendriamos algunas personas contagiosas desperdigadas por la comunidad. Mantener a partir de ese punto ciertas medidas de aislamiento relentizar\u00eda la expansi\u00f3n de la epidemia y quiza, nos permitiese manejar esos pocos focos de contag\u00edo que pudiesen quedar, reduciendolos a tiempo.\n\nEn cualquier caso, notese que los factores multiplicadores del ratio de transmisi\u00f3n son valores puestos completamente a ojo (muy dificiles de medir en la practica) y cualquier variaci\u00f3n de los mismos significar\u00eda un cambio radical en la velocidad de re-expansion de la enfermedad.\n\nPodemos tratar de ver la influencia de esos factores probando con varios distintos:","261a30a3":"### Caso E3b: \u00bfComo hubiese sido de aplicarse el aislamiento duro desde el principio?","3efc6a96":"El valor que optenemos para el divisor del ratio de transmisi\u00f3n diario es muy malo. Como hab\u00edamos visto anteriormente, estariamos en el escenario \"FlattenTheCurve\" donde la velocidad de la epidemia se relentiza pero no lo suficiente como para pararla.\n\nVeamos que pasa si ejecutamos la simulaci\u00f3n con dicho valor:","d3e1d4c3":"## \u00bfM\u00e1s preguntas?","17966674":"Las gr\u00e1ficas de velocidad nos permiten comprobar el ajuste del parametro `daily_transmission_rate` de manera que la simulaci\u00f3n tenga un valor similar al de la realidad (en Espa\u00f1a este valor ha fluctuado entre 0.35 y 0.45).","37652da4":"### C\u00e1lculo de distribuciones de probabilidad ([CDF](https:\/\/en.wikipedia.org\/wiki\/Cumulative_distribution_function))","18427d09":"### Caso 3c: paramos el pais completamente durante un mes y medio y luego mantenemos unas condiciones menos severas\n\nEn este caso se estudia el escenario en el que se mantiene la situaci\u00f3n de aislamiento total (ratio de transmision diario reducido a la decima parte) durante 45 d\u00edas y despues de ese periodo se implanta un aislamiento menos estricto (ratio de transmision diario reducido a la tercera parte).","39002e80":"Pues estamos en un escenario R0 > 1.","4c899ce8":"Y es f\u00e1cil ver cual ser\u00eda el problema de la sanidad si no se para la epidemia: solo tendr\u00edamos camas de hospital para el 7.3% de los pacientes muy graves que requeririan ser ingresados en la UCI... y si, ya no hablamos de que entren en la UCI, solo de darles una cama en un hospital!!!\n\nCon el apoyo de la sanidad privada a lo mejor llegamos al 10 o al 12%, no cambia mucho la situacion. Y eso sin tener en cuenta, que normalmente, las camas de los hospitales ya tienen un grado de ocupaci\u00f3n alto, sin necesidad de que vengan los enfermos de coronavirus.\n","66804fb8":"Vemos que aunque finalmente no se detenga la epidemia, s\u00ed conseguimos reducir considerablemente el factor de crecimiento diario de la misma a la decima parte, de 0.4 a a 0.04. Eso har\u00e1 sin duda que la epidemia sea mucho m\u00e1s controlable.","f3e6182a":"# Evaluaci\u00f3n\n\nAhora que tenemos un programa que es capaz de simular el avance de la epidemia, vamos a utilizarlo para similar diversos escenarios en cada uno de los cuales seguiremos una linea de acci\u00f3n distinta.\n\n## Caso 1: No hacemos nada\n\nEste es el caso de referencia, que pasar\u00eda de no haberse hecho nada, si dejasemos a la epidemia seguir su curso natural.","29ac40f6":"La conclusi\u00f3n que podemos sacar de estas gr\u00e1ficas es que habra que ser muy cautos en la fase post-aislamiento y seguir reduciendo las relaciones humanas al m\u00e1ximo, mientras se localizan personas o lugares expuestos porque si las condiciones de aislamiento resultan en un ratio de transmisi\u00f3n m\u00e1s alto de lo esperado, otra vez se podr\u00eda disparar la epidemia.","5317cb9e":"Practicamente la totalidad de la poblaci\u00f3n pasar\u00eda la enfermedad. Con la tasa de mortalidad establecida del 3.4%, habr\u00eda 227k muertes solo en la Comunidad de Madrid.","dc257b7c":"Viendo las gr\u00e1ficas se puede apreciar que se relentizar\u00eda el tiempo de extinci\u00f3n de la epidemia. La raz\u00f3n es que la masa total de infectados\/contagiosos crece proporcionalmente al ratio de enfermos asintom\u00e1ticos.","e7e95148":"Viendo las gr\u00e1ficas se aprecia claramente lo que pasa. En realidad estamos en un escenario donde $R_0$ toma un valor solo un poco inferior a 1.\n\nLa epidemia se acaba estinguiendo pero al cabo de un tiempo larguisimo, del orden de *medio a\u00f1o* (manteniendo las condiciones de aislamiento actuales), \u00a1a ver que economia soporta eso!\n\nEl n\u00famero de enfermos graves simultaneos llega a sobrepasar los 4k (cuatro veces el n\u00famero actual). El pico ocurre dos semanas despues de empezar el aislamiento.\n\nEl n\u00famero de muertos final todav\u00eda es inaceptable: 5400 (solo en Madrid).\n\nPor \u00faltimo si comparamos el aspecto de las curvas de velocidad vemos que no se corresponden con lo observado en la realidad. En la simulaci\u00f3n tenemos una desaceleraci\u00f3n mucho m\u00e1s intensa de lo que estamos observando en la realidad. Resulta dificil creer que este escenario sea un reflejo de la misma.\n\n#### Conclusiones 9 d\u00edas tras las medidas de aislamiento\n\nNi aun aceptando como ciertas las hip\u00f3tesis m\u00e1s optimistas podemos conseguir que la simulaci\u00f3n de unos resultados m\u00ednimamente esperanzadores.\n\nParece que es un buen momento para endurecer las medidas de aislamiento.\n\nPara los que est\u00e1n m\u00e1s preocupados por las consecuencias econ\u00f3micas que por los muertos, conviene recordar que medidas de aislamiento m\u00e1s suaves tambien implican un tiempo de recuperaci\u00f3n m\u00e1s largo. Parece que nadie se esta planteando la pregunta de que es mejor: un pais a medio gas durante un tiempo muy largo o uno completamente parado durante un tiempo m\u00e1s corto?","30f89d4f":"Vemos que el resultado es practicamente identico al caso anterior, en el que reduciamos el ratio de transferencia diario a la centesima parte.\n\nLa gr\u00e1fica nos muestra que habr\u00eda que esperar aproximadamente 3 semanas para reducir el numero de infecciosos a 10.\n\nEsas tres semanas de riesgo corresponden exclusivamente a las personas que se infectaron antes de que se tomasen medidas de aislamiento y vienen determinadas por las distribuciones de probabilidad que hemos seleccionado para los tiempos de incubaci\u00f3n y de convalecencia.\n\nSe tardo tanto en tomar medidas de aislamiento, que la masa de personas infecciosas es enorme, con un pico por encima de las 3k personas. Eso hace que aunque la probabilidad de que el proceso de incubaci\u00f3n sea superior a tres semanas es muy bajo, en n\u00fameros absolutos nos movemos en el rango de las decenas."}}