{"cell_type":{"66a9ac6e":"code","1d68b5b6":"code","b9a1aed3":"code","d39c07d8":"code","627d02be":"code","271e4029":"code","84d2bf10":"code","fbe325e6":"code","e828d504":"code","ba7178be":"markdown","6ce94712":"markdown","f15af11f":"markdown","bcc655ec":"markdown","f5dc7094":"markdown","a7cadc98":"markdown"},"source":{"66a9ac6e":"import numpy as np\nimport pandas as pd \nimport os\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.layers import Conv2D, Dense, BatchNormalization, MaxPooling2D, GlobalAveragePooling2D, Dropout, Flatten\nfrom keras.optimizers import RMSprop,SGD, Adam\nfrom keras import regularizers\nfrom tensorflow.keras.applications import MobileNetV2\nimport matplotlib.pyplot as plt\nfrom keras.utils import plot_model","1d68b5b6":"train_fake = '..\/input\/real-and-fake-face-detection\/real_and_fake_face\/training_fake\/'\ntrain_real = '..\/input\/real-and-fake-face-detection\/real_and_fake_face\/training_real\/'\n\ndef plot_image(path, title):\n    plt.figure(figsize=(10,10))\n    for i in range(9):\n        img = load_img(path +'\/' +os.listdir(path)[i])\n        plt.subplot(3,3,i+1)\n        plt.imshow(img)\n        if title=='Fake Faces':\n            plt.title(os.listdir(path)[i][:4])\n        plt.suptitle(title)\n        plt.axis('off')\n    return plt\nplot_image(train_real, 'Real Faces').show()","b9a1aed3":"plot_image(train_fake, 'Fake Faces').show()","d39c07d8":"path_data = '..\/input\/real-and-fake-face-detection\/real_and_fake_face\/'\ndata_gen = ImageDataGenerator(rescale=1.\/255,\n                              horizontal_flip=True,\n                              zoom_range=0.2,\n                              rotation_range=20,\n                              shear_range=0.3,\n                              width_shift_range=0.2,\n                             )\ntraining_set = data_gen.flow_from_directory(path_data,\n                                            class_mode='binary',\n                                            shuffle=True,\n                                            target_size=(96,96),\n                                            batch_size=64,\n                                           )\n\ntraining_set.class_indices","627d02be":"\nmobilenet = MobileNetV2(input_shape=(96, 96, 3),\n                        include_top=False,\n                        weights='imagenet'\n                       )\nmodel = tf.keras.models.Sequential([mobilenet,\n                                    GlobalAveragePooling2D(),\n                                    Dense(512, activation='relu'),\n                                    BatchNormalization(),\n                                    Dropout(0.3),\n                                    Dense(1, activation='sigmoid')\n                                   ])\nmodel.compile(optimizer=Adam(lr=0.001),\n              loss='binary_crossentropy',\n              metrics=['accuracy']\n             )\nmodel.summary()","271e4029":"hist = model.fit(x=training_set, epochs=20)","84d2bf10":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nplt.plot(hist.history['accuracy'])\nplt.title('Accuracy vs Epoch')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(hist.history['loss'])\nplt.title('Loss vs Epoch')\nplt.xlabel('Accuracy')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","fbe325e6":"y_pred = model.predict(training_set)\ny_pred = (y_pred < 0.5).astype(np.int)\n\nfrom sklearn.metrics import classification_report, confusion_matrix\ncm_test = confusion_matrix(training_set.classes, y_pred)\nprint('Confusion Matrix')\nprint(cm_test)\n\nprint('Classification Report')\nprint(classification_report(training_set.classes, y_pred, target_names=['fake', 'real']))\n\nplt.figure(figsize=(6,6))\nplt.imshow(cm_test, interpolation='nearest')\nplt.colorbar()\ntick_mark = np.arange(len(target_names))\n_ = plt.xticks(tick_mark, ['fake', 'real'], rotation=90)\n_ = plt.yticks(tick_mark, ['fake', 'real'])","e828d504":"model.save('spoofnet.h5')","ba7178be":"# Accuracy and Loss Graph","6ce94712":"# Preparing Training Set","f15af11f":"# Ploting Images","bcc655ec":"# Confusion Matrix and Classification Report","f5dc7094":"# Importing Data","a7cadc98":"# Creating Model Architecture"}}