{"cell_type":{"64851618":"code","2eb4ef36":"code","3d6a55f6":"code","3e20fcd7":"code","573f1a7a":"code","51f54209":"code","25906c15":"code","6d69c8f5":"code","b2fa0a05":"code","44401ad3":"code","94ec1443":"code","23ee37ba":"code","4e4d5ddb":"code","68fa85eb":"code","4dd36d32":"code","9a3094d5":"code","d2e78ca5":"code","8123255b":"code","caa16eab":"code","362c311a":"code","4e6a7ac9":"code","2d6965c5":"code","088ebe7b":"code","068eb517":"markdown","ee14e7f5":"markdown","ec3c90f9":"markdown","b14007dd":"markdown","de2d14d7":"markdown","9241d5b6":"markdown","2ebd16ac":"markdown","9c8cda8f":"markdown","9d2db9fb":"markdown","aab6818e":"markdown","bbf214eb":"markdown","1008a2ea":"markdown","daed6f84":"markdown"},"source":{"64851618":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","2eb4ef36":"df = pd.read_csv('..\/input\/noshowappointments\/KaggleV2-May-2016.csv')\nprint('Count of rows', str(df.shape[0]))\nprint('Count of Columns', str(df.shape[1]))\ndf.head()","3d6a55f6":"for i in df.columns:\n    print(i+\":\",len(df[i].unique()))","3e20fcd7":"df.drop('AppointmentID', axis=1,inplace = True)","573f1a7a":"df['PatientId'] = df['PatientId'].apply(int).apply(str)\ndf['No-show'] = df['No-show'].map({'No':0, 'Yes':1})\ndf['Gender'] = df['Gender'].map({'F':0, 'M':1})","51f54209":"# Number of Appointments Missed by Patient\ndf['Num_App_Missed'] = df.groupby('PatientId')['No-show'].apply(lambda x: x.cumsum())\ndf['Num_App_Missed']","25906c15":"df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.strftime('%Y-%m-%d')\ndf['ScheduledDay'] = pd.to_datetime(df['ScheduledDay'])\ndf['ScheduledDay']","6d69c8f5":"df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.strftime('%Y-%m-%d')\ndf['AppointmentDay'] = pd.to_datetime(df['AppointmentDay'])\ndf['AppointmentDay']","b2fa0a05":"df['Day_diff'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days\ndf['Day_diff'].unique()","44401ad3":"df = df[(df.Age >= 0)]","94ec1443":"df.drop(['ScheduledDay'], axis=1, inplace=True)\ndf.drop(['AppointmentDay'], axis=1, inplace=True)\ndf.drop('PatientId', axis=1,inplace = True)\ndf.drop('Neighbourhood', axis=1,inplace = True)","23ee37ba":"#Convert to Categorical\ndf['Handcap'] = pd.Categorical(df['Handcap'])\n#Convert to Dummy Variables\nHandicap = pd.get_dummies(df['Handcap'], prefix = 'Handicap')\ndf = pd.concat([df, Handicap], axis=1)\ndf.drop(['Handcap'], axis=1, inplace = True)","4e4d5ddb":"df = df[(df.Age >= 0) & (df.Age <= 100)]","68fa85eb":"df","4dd36d32":"df.info()","9a3094d5":"X = df.drop(['No-show'], axis=1)\ny = df['No-show']\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX","d2e78ca5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)","8123255b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nlr = LogisticRegression(solver='newton-cg',)\nlr.fit(X_train, y_train)\nprint(lr.score(X_train,y_train))\ny_pred_lr = lr.predict(X_test)\nclf_report = classification_report(y_test, y_pred_lr)\nprint(f\"Classification Report : \\n{clf_report}\")","caa16eab":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\n\ny_pred_knn = knn.predict(X_test)\n\nclf_report = classification_report(y_test, y_pred_knn)\nprint(f\"Classification Report : \\n{clf_report}\")","362c311a":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ny_pred_dtc = dtc.predict(X_test)\nclf_report = classification_report(y_test, y_pred_dtc)\n\nprint(f\"Classification Report : \\n{clf_report}\")","4e6a7ac9":"from sklearn.ensemble import RandomForestClassifier\nrd_clf = RandomForestClassifier()\nrd_clf.fit(X_train, y_train)\n\ny_pred_rd_clf = rd_clf.predict(X_test)\nclf_report = classification_report(y_test, y_pred_rd_clf)\n\nprint(f\"Classification Report : \\n{clf_report}\")","2d6965c5":"from sklearn.ensemble import AdaBoostClassifier\nada = AdaBoostClassifier(base_estimator = dtc)\nada.fit(X_train, y_train)\n\ny_pred_ada = ada.predict(X_test)\nclf_report = classification_report(y_test, y_pred_ada)\n\nprint(f\"Classification Report : \\n{clf_report}\")","088ebe7b":"from sklearn.model_selection import cross_val_score\n\naccuracy = cross_val_score(estimator = knn, X = X, y =y, cv = 8)\nprint(\"avg acc: \",np.mean(accuracy))\nprint(\"acg std: \",np.std(accuracy))","068eb517":"## We get almost %90+ test accuracy from different models.\n## Let's prepare a cross validation with knn","ee14e7f5":"# Read Data","ec3c90f9":"## Drop AppointmentID. It's a unique number for all appointment which is unnecessary ","b14007dd":"## Drop unncessary columns. ","de2d14d7":"## Split into train and test\n## Scale the dataset into 0-1","9241d5b6":"## Split dataset into train & test set","2ebd16ac":"# Convert handicap feature to new features","9c8cda8f":"## Filter age in dataset","9d2db9fb":"## New feature: Number of Appointments missed by same same patient","aab6818e":"## New Feature: Day Difference between AppointmentDay & ScheduledDay","bbf214eb":"## Filter day diff bigger than zero. You can not make an appointment for past LOL","1008a2ea":"## PatientID -> INT to STR (Categorical)\n## No-show -> STR to INT (Categorical)\n## Gender -> STR to INT (Categorical)","daed6f84":"### Convert to datetime object"}}