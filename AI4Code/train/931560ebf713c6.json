{"cell_type":{"94403530":"code","dc2df83e":"code","15afd8f7":"code","f64ec69d":"code","027d4c10":"code","eb354955":"code","c7cd0d61":"code","2370dd0b":"code","670f0a95":"code","8e9221d3":"code","494f9441":"code","94e10286":"code","1908c2e0":"code","0ec68abe":"code","41691e1d":"code","2781ea02":"code","44d3757a":"code","5d0cfb18":"code","0a0321d5":"code","d4e4d48f":"code","48743311":"markdown","1faa2ffc":"markdown","a7ec00e9":"markdown","16c78822":"markdown"},"source":{"94403530":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dc2df83e":"from sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score, log_loss","15afd8f7":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","f64ec69d":"df.info()","027d4c10":"df.isna().sum()","eb354955":"df.duplicated().sum()","c7cd0d61":"sns.countplot(df['DEATH_EVENT'])\nplt.show()","2370dd0b":"for c in df[['age', 'ejection_fraction', 'creatinine_phosphokinase', 'platelets',\n            'serum_creatinine', 'serum_sodium', 'time']].columns:\n    sns.distplot(df[c])\n    plt.show()","670f0a95":"for c in df[['age', 'ejection_fraction', 'creatinine_phosphokinase', 'platelets',\n            'serum_creatinine', 'serum_sodium', 'time']].columns:\n    sns.boxplot(df[c])\n    plt.show()","8e9221d3":"df = df[df['ejection_fraction'] < 70]","494f9441":"x_train, x_test, y_train, y_test = train_test_split(\n    df[['time','ejection_fraction','serum_creatinine','age']], df['DEATH_EVENT'],\n    test_size=0.2, random_state=42\n)","94e10286":"sns.heatmap(x_train.corr())\nplt.show()","1908c2e0":"x_train.describe()","0ec68abe":"# scaler = StandardScaler()\n\n# for d in [x_train, x_test]:\n#     for c in d.columns:\n#         d[c] = scaler.fit_transform(d[c].values.reshape(-1,1))","41691e1d":"from sklearn.neighbors import KNeighborsClassifier\nkMax = 20\nkVals = list(range(1, kMax + 1))\nmean_acc = np.zeros(len(kVals))\nstd_acc = np.zeros(len(kVals))\nfor i in kVals:\n    knnModel = KNeighborsClassifier(n_neighbors=i).fit(x_train, y_train)\n    yHat = knnModel.predict(x_test)\n    mean_acc[i - 1] = np.mean(yHat == y_test);\nbestK = pd.DataFrame({'k':kVals, 'mean_acc':mean_acc}).set_index('k')['mean_acc'].idxmax()\nprint('best k = ', bestK)\nknnModel = KNeighborsClassifier(n_neighbors=bestK).fit(x_train, y_train)\nknnModel","2781ea02":"from sklearn.tree import DecisionTreeClassifier\ndTreeModel = DecisionTreeClassifier(criterion='entropy', max_depth = 4)\ndTreeModel.fit(x_train, y_train)\ndTreeModel","44d3757a":"from sklearn.ensemble import RandomForestClassifier\nrfModel = RandomForestClassifier(n_estimators=11, criterion='entropy', random_state=42)\nrfModel.fit(x_train, y_train)","5d0cfb18":"knnPred = knnModel.predict(x_test)\nprint('KNN F1-score: %.2f' % f1_score(y_test, knnPred, average='weighted'))\nprint('KNN Accuracy score: %.2f' % accuracy_score(y_test, knnPred))\nprint('Confusion Matrix:')\nprint(confusion_matrix(y_test, knnPred))","0a0321d5":"dTreePred = dTreeModel.predict(x_test)\nprint('DecisionTree F1-score: %.2f' % f1_score(y_test, dTreePred, average='weighted'))\nprint('DecisionTree Accuracy score: %.2f' % accuracy_score(y_test, dTreePred))\nprint('Confusion Matrix:')\nprint(confusion_matrix(y_test, dTreePred))","d4e4d48f":"rfPred = rfModel.predict(x_test)\nprint('RandomForest F1-score: %.2f' % f1_score(y_test, rfPred, average='weighted'))\nprint('RandomForest Accuracy score: %.2f' % accuracy_score(y_test, rfPred))\nprint('Confusion Matrix:')\nprint(confusion_matrix(y_test, rfPred))","48743311":"## Dependencies","1faa2ffc":"## Exploring Data","a7ec00e9":"## Model Building","16c78822":"## Model Evaluation"}}