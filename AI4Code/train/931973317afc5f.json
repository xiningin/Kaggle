{"cell_type":{"714e3bd6":"code","6d957e72":"code","36d29d37":"code","9959fc65":"code","29888c2a":"code","80443a82":"code","2ff4a84e":"code","8a46dfe6":"code","fb9a9503":"code","a4a5a426":"code","c9845bac":"code","c2630a9b":"code","3c2bf29c":"code","dddfe6e0":"code","94b3ecbb":"code","92e58ed7":"code","3eb3b51f":"code","1766030e":"code","2ce3eb2a":"code","48920b2a":"code","bf60e21a":"code","a88bb69d":"code","fa2d9a4c":"code","4e11b318":"code","977d99f4":"code","72c31ee8":"code","d00211c9":"code","b1494c91":"code","0f5170bd":"code","25510fa7":"code","a363f9fd":"code","ea4ec6de":"code","3428ae85":"code","6390631d":"code","8c240d6c":"code","1fd16741":"code","8416b201":"code","3184f17f":"code","88571967":"code","ae8ef3b8":"code","d0d4cae9":"code","f49d1bb3":"code","b2617d12":"code","0e3a8c11":"code","189538f8":"code","1922de78":"code","8ad2ee87":"code","f96c7fb3":"code","6b87c83b":"code","023306e8":"code","d6f88bb1":"code","ebcb47a4":"code","8b3ce0d1":"code","23fde1eb":"code","da5d4383":"markdown","ba3b9d33":"markdown","133dd318":"markdown","34416dc7":"markdown","7628c297":"markdown","7d4573c6":"markdown","f8836267":"markdown","7dc38be1":"markdown","89463585":"markdown","e3b6b2ea":"markdown","d78eba1d":"markdown","9c0a6df2":"markdown","32fd453b":"markdown","c9cd1db2":"markdown","1a086a18":"markdown","d4ed586e":"markdown","e5ff2436":"markdown","059fad19":"markdown","97933060":"markdown","4f9a5de2":"markdown","7f941ad1":"markdown","394dd698":"markdown","b9c81882":"markdown","8130e6c6":"markdown"},"source":{"714e3bd6":"def missing(df) : \n    missing_number = df.isnull().sum().sort_values(ascending = False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending = False)\n    missing_values = pd.concat([missing_number, missing_percent], axis = 1, keys = ['Missing_number', 'Missing_percent'])\n    return missing_values \n\ndef categorize(df) :\n    Quantitive_features = df.select_dtypes([np.number]).columns\n    Discrete_features = [col for col in Quantitive_features if len(df[col].unique()) < 10]\n    Continuous_features = [col for col in Quantitive_features if col not in Discrete_features]\n    Categorical_features = df.select_dtypes(exclude = [np.number]).columns\n    print(\"Quantitive feautres : {} \\nDiscrete features : {} \\nContinous features : {} \\nCategorical features : {}\\n\"\n     .format(Quantitive_features, Discrete_features, Continuous_features, Categorical_features))\n    print(\"Number of quantitive feautres : {} \\nNumber of discrete features : {} \\nNumber of continous features : {} \\nNumber of categorical features : {}\"\n     .format(len(Quantitive_features), len(Discrete_features), len(Continuous_features), len(Categorical_features)))\n    \ndef data_glimpse(df) :   \n    \n    # Dataset preview \n    print(\"1. Dataset Preview \\n\")\n    display(df.head())\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Columns imformation\n    print(\"2. Column Imformation \\n\")\n    print(\"Dataset have {} columns and {} rows\".format(df.shape[0], df.shape[1]))\n    print(\"\\n\") \n    print(\"Dataset Column name : {}\".format(df.columns.values))\n    print(\"\\n\")\n    categorize(df)\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    # Basic imformation table \n    print(\"3. Missing data table : \\n\")\n    display(missing(df))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"4. Number of unique value by column : \\n\")\n    tb1 = pd.DataFrame({'Columns' : df.nunique().index.tolist(), 'Number_of_Unique' : df.nunique().values.tolist()})\n    display(tb1)\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(\"5. Describe table : \\n\")\n    display(df.describe(include = 'all'))\n    print(\"-------------------------------------------------------------------------------\\n\")\n    \n    print(df.info())\n    print(\"-------------------------------------------------------------------------------\\n\")","6d957e72":"\n# Data Analysis\nimport warnings \nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport os \nimport missingno as msno\n    \n# Data View\npd.options.display.max_columns = 200\nfrom tabulate import tabulate \n\n# Import Basic Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n    \n# Data Visualization : Plotly library \nimport cufflinks as cf\ncf.go_offline(connected = True )\n    \nimport plotly.express as px\n    \nimport plotly.graph_objects as go\nimport plotly.offline as pyo\npyo.init_notebook_mode()\nfrom plotly.subplots import make_subplots      ","36d29d37":"df_train_raw = pd.read_csv(\"..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv\", encoding = 'utf-8-sig')","9959fc65":"data_glimpse(df_train_raw)","29888c2a":"Quantitive_features = df_train_raw.select_dtypes([np.number]).columns\nQuantitive_features = [col for col in Quantitive_features if col not in ['Id', 'Risk_Flag']]\n\nDiscrete_features = [col for col in Quantitive_features if len(df_train_raw[col].unique()) < 10]\n\nContinuous_features = [col for col in Quantitive_features if col not in Discrete_features]\n\nCategorical_features = df_train_raw.select_dtypes(exclude = [np.number]).columns\n\ndf_Target = df_train_raw['Risk_Flag']","80443a82":"print(\"Quantitive feautres : {} \\n Discrete features : {} \\n Continous features : {} \\n Categorical features : {}\"\n     .format(Quantitive_features, Discrete_features, Continuous_features, Categorical_features))","2ff4a84e":"Current_risk_pec = df_train_raw.Risk_Flag.mean()*100\nprint(\"Current risk percent of dataset : {}%\".format(Current_risk_pec))","8a46dfe6":"def Quantitive_Univariate_Plot(df, fea) : \n    fig = make_subplots(rows = 1, cols = 2)\n\n    fig.add_trace(go.Histogram(\n        x = df[fea],\n        name = 'Histogram'\n        ),\n        row = 1, col = 1\n    )\n\n    fig.add_trace(go.Box(\n        y = df[fea],\n        name = 'Box plot'\n        ),\n        row = 1, col = 2\n    )\n    fig.update_xaxes(title_text= \"Value\", row=1, col=1)\n    fig.update_xaxes(title_text= fea, row=1, col=2)\n    fig.update_yaxes(title_text= \"Count\", row=1, col=1)\n    fig.update_yaxes(title_text= \"Value\", row=1, col=2)\n    fig.show()","fb9a9503":"Quantitive_Univariate_Plot(df_train_raw, \"Income\")","a4a5a426":"Quantitive_Univariate_Plot(df_train_raw, \"Age\")","c9845bac":"Quantitive_Univariate_Plot(df_train_raw, \"Experience\")","c2630a9b":"Quantitive_Univariate_Plot(df_train_raw, \"CURRENT_JOB_YRS\")","3c2bf29c":"def Categorical_Features_Univarate(df, fea) : \n    length = len(df[fea].value_counts().keys())\n    colors = px.colors.sequential.RdBu[:length]\n    fig = go.Figure()\n    fig.add_trace(go.Bar(\n        x = df[fea].value_counts(),\n        y = df[fea].value_counts().keys(),\n        orientation = 'h',\n        marker_color = colors))\n    fig.show()","dddfe6e0":"Categorical_Features_Univarate(df_train_raw, 'CURRENT_HOUSE_YRS')","94b3ecbb":"Categorical_Features_Univarate(df_train_raw, \"STATE\")","92e58ed7":"Categorical_Features_Univarate(df_train_raw, \"Married\/Single\")","3eb3b51f":"Categorical_Features_Univarate(df_train_raw, 'House_Ownership')","1766030e":"Categorical_Features_Univarate(df_train_raw, 'Car_Ownership')","2ce3eb2a":"df_train_raw['Profession'].value_counts().head()","48920b2a":"df_train_raw['CITY'].value_counts().head()","bf60e21a":"corr = df_train_raw.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncorr = corr.mask(mask)\n\nfig = go.Figure()\nfig.add_trace(go.Heatmap(\n    z = corr, \n    x = corr.columns.tolist(),\n    y = corr.columns.tolist(),\n    colorscale = 'RdBu',\n    xgap = 1,\n    ygap = 1,\n    hoverinfo = \"none\"\n    )\n)\n\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Correlation in each feautures<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"Columns\",\n            \"tickfont\": {\n                \"size\": 8                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Columns\",\n            \"tickfont\": {\n                \"size\": 8                \n            }\n        },\n        \"template\":'plotly_white',\n        \"yaxis_autorange\" : \"reversed\"\n    }\n)\nfig.show()","a88bb69d":"fig = go.Figure()\nfig.add_trace(\n    go.Scatter(\n        x = df_train_raw.loc[df_train_raw.Risk_Flag == 1, 'Age'].sample(1000),\n        y = df_train_raw.loc[df_train_raw.Risk_Flag == 1,'Income'].sample(1000),\n        mode = 'markers',\n        name = 'risk')\n)\nfig.add_trace(\n     go.Scatter(\n        x = df_train_raw.loc[df_train_raw.Risk_Flag == 0, 'Age'].sample(1000),\n        y = df_train_raw.loc[df_train_raw.Risk_Flag == 0,'Income'].sample(1000),\n        mode = 'markers',\n        name = 'non_risk')\n)\nfig.show()","fa2d9a4c":"def Quantitive_Multivariate(fea) : \n    fig = go.Figure()\n    fig.add_trace(\n        go.Box( \n            y = df_train_raw.loc[df_train_raw.Risk_Flag == 1, fea],\n            name = 'risk')\n    )\n    fig.add_trace(\n         go.Box(\n            y = df_train_raw.loc[df_train_raw.Risk_Flag == 0, fea],\n            name = 'non_risk')\n    )\n    fig.update_layout(\n        {\n            \"title\": {\n                \"text\": \"<b>Multivariate Analysis between {} and Risk_Flags<\/b>\".format(fea),\n                \"x\": 0.5,\n                \"y\": 0.9,\n                \"font\": {\n                    \"size\": 15\n                }\n            },\n            \"xaxis\": {\n                \"title\": \"Risk_Flags\",\n                \"tickfont\": {\n                    \"size\": 10                \n                }\n            },\n            \"yaxis\": {\n                \"title\": fea,\n                \"tickfont\": {\n                    \"size\": 10                \n                }\n            },\n            \"template\":'plotly_white'\n        }\n    )\n\n    fig.show()","4e11b318":"Quantitive_Multivariate(\"Income\")","977d99f4":"Quantitive_Multivariate(\"Age\")","72c31ee8":"Quantitive_Multivariate(\"Experience\")","d00211c9":"Quantitive_Multivariate(\"CURRENT_JOB_YRS\")","b1494c91":"df_train_raw[['CITY', 'STATE']].nunique()","0f5170bd":"df_city = df_train_raw.groupby('CITY')['Risk_Flag'].mean().sort_values(ascending = False).reset_index()\ndf_city['Risk_Flag'] = round(df_city['Risk_Flag']*100, 2)","25510fa7":"df_city_plot = pd.concat([df_city[:10],df_city[-10:]]).reset_index(drop = True)","a363f9fd":"df_city_plot","ea4ec6de":"colors = px.colors.sequential.RdBu[:len(df_city_plot)]\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x = df_city_plot.CITY,\n    y = df_city_plot.Risk_Flag,\n    text = df_city_plot.Risk_Flag,\n    texttemplate = \"%{text}%\",\n    marker_color = colors  ))\n\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Risk Percentage by CITY<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"CITY\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Risk Percentage\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\n\nfig.show()","3428ae85":"df_state = df_train_raw.groupby('STATE')['Risk_Flag'].mean().sort_values(ascending = False).reset_index()\ndf_state['Risk_Flag'] = round(df_state['Risk_Flag']*100, 2)\ndf_state_plot = pd.concat([df_state[:10],df_state[-10:]]).reset_index(drop = True)","6390631d":"colors = px.colors.sequential.RdBu[:len(df_state_plot)]\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x = df_state_plot.STATE,\n    y = df_state_plot.Risk_Flag,\n    text = df_state_plot.Risk_Flag,\n    texttemplate = \"%{text}%\",\n    marker_color = colors  ))\n\nfig.update_layout(\n    {\n        \"title\": {\n            \"text\": \"<b>Risk Percentage by STATE<\/b>\",\n            \"x\": 0.5,\n            \"y\": 0.9,\n            \"font\": {\n                \"size\": 15\n            }\n        },\n        \"xaxis\": {\n            \"title\": \"CITY\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"yaxis\": {\n            \"title\": \"Risk Percentage\",\n            \"tickfont\": {\n                \"size\": 10                \n            }\n        },\n        \"template\":'plotly_white'\n    }\n)\n\nfig.show()","8c240d6c":"def Categorical_Multivarate(df, fea) : \n    fig = go.Figure()\n\n    fig.add_trace(go.Bar(\n        x = df[fea].unique(),\n        y = df.loc[df.Risk_Flag == 0, fea].value_counts().values,\n        name = 'non_risk',\n        text = df.loc[df.Risk_Flag == 0, fea].value_counts().values,\n        marker_color = px.colors.sequential.RdBu[0])\n    )\n\n\n    fig.add_trace(go.Bar(\n        x = df[fea].unique(),\n        y = df.loc[df.Risk_Flag == 1, fea].value_counts().values,\n        name = 'risk',\n        text = df.loc[df.Risk_Flag == 0, fea].value_counts().values,\n        marker_color = px.colors.sequential.RdBu[7])\n    )\n\n    fig.show()","1fd16741":"pd.crosstab(index = df_train_raw['CURRENT_HOUSE_YRS'], columns = df_train_raw.Risk_Flag, margins = True)","8416b201":"Categorical_Multivarate(df_train_raw, 'CURRENT_HOUSE_YRS')","3184f17f":"Categorical_features","88571967":"pd.crosstab(index = df_train_raw['Married\/Single'], columns = df_train_raw.Risk_Flag, margins = True)","ae8ef3b8":"Categorical_Multivarate(df_train_raw, 'Married\/Single')","d0d4cae9":"pd.crosstab(index = df_train_raw['House_Ownership'], columns = df_train_raw.Risk_Flag, margins = True)","f49d1bb3":"Categorical_Multivarate(df_train_raw, 'House_Ownership')","b2617d12":"pd.crosstab(index = df_train_raw['Car_Ownership'], columns = df_train_raw.Risk_Flag, margins = True)","0e3a8c11":"Categorical_Multivarate(df_train_raw, 'Car_Ownership')","189538f8":"pd.crosstab(index = df_train_raw['Profession'], columns = df_train_raw.Risk_Flag, margins = True).head()","1922de78":"Categorical_Multivarate(df_train_raw, 'Profession')","8ad2ee87":"df_train_raw.head()","f96c7fb3":"Profession = df_train_raw['Profession']\nProfession = pd.get_dummies(Profession, drop_first = True)\nProfession.head()","6b87c83b":"CITY = df_train_raw['CITY']\nCITY = pd.get_dummies(CITY, drop_first = True)\nCITY.head()","023306e8":"STATE = df_train_raw['STATE']\nSTATE = pd.get_dummies(STATE, drop_first = True)\nSTATE.head()","d6f88bb1":"df_quantitive = df_train_raw[Quantitive_features]\ndf_Target = df_train_raw['Risk_Flag']\n\ndf_binomial = df_train_raw[['Married\/Single', 'House_Ownership', 'Car_Ownership']]\ndf_binomial['Married\/Single'] = df_binomial['Married\/Single'].replace({'single' : 0, 'married' : 1})\ndf_binomial['House_Ownership'] = df_binomial['House_Ownership'].replace({'rented' : 0, 'norent_noown' : 1, 'owned' : 2})\ndf_binomial['Car_Ownership'] = df_binomial['Car_Ownership'].replace({'no' : 0, 'yes' : 1})","ebcb47a4":"train_data = pd.concat([df_quantitive, df_binomial, CITY, STATE, Profession], axis = 1)\ntrain_data.head()","8b3ce0d1":"train_data.shape","23fde1eb":"df_Target.shape","da5d4383":"### Data importing ","ba3b9d33":"# <center> Loan EDA : Which features cause risk in loan","133dd318":"**Married\/Single**","34416dc7":"**1. Column organizing**","7628c297":"**House_Ownership**","7d4573c6":"Risk is more higher in low current job year and experience.(two columns has 0.6 correlation.)","f8836267":"**Profession**","7dc38be1":"**CURRENT HOUSE YRS**","89463585":"CITY and STATE have many unique value, so we check risk flag using mean.","e3b6b2ea":"## Feature Scaling","d78eba1d":"## Data Preprocessing","9c0a6df2":"### Library importing ","32fd453b":"### Quantitive Features Analysis(Univariate)","c9cd1db2":"There isn't some groups by Risk_Flag.","1a086a18":"## Analysis Preparation\n\n### Function importing","d4ed586e":"- Quantitive_features  \n    - Discrete features  \n    - Continous features  \n- Categorical_featurse  ","e5ff2436":"## Data glimpse ","059fad19":"**Car_Ownership**","97933060":"Excepting column 'CURRENT_JOB_YRS', features follows uniform distribution. ","4f9a5de2":"## EDA + Visualization ","7f941ad1":"### Quantitive Features Analysis(Multivariate)","394dd698":"### Categorical Features Analysis(Multivariate) ","b9c81882":"## Data description \n\n### Datasource explaining \n    \n   - Datasets name : \"Loan_Prediction\" \n   - Datasets source : \"Training Data.csv\", \"Test Data.csv\"  \n   - Datasets feature table :  \n   \n       | Feature | Column name | data type | \n       | --- | --- | --- |\n       | Quantitive - Continuous | Id | int64 |\n       | Quantitive - Continuous | Income | int64 |\n       | Quantitive - Continuous | Age | int64 |\n       | Categorical | Experience | object64 |\n       | Categorical - Discrete | Married\/Single | object64 |\n       | Categorical - Discrete | House_Ownership | object64 |\n       | Categorical - Discrete | Car_Ownership | object64 |\n       | Categorical | Profession | opject64 |\n       | Categorical | CITY | object64 |\n       | Categorical | STATE | object64 |\n       | Quantitive - Continuous | CURRENT_JOB_YRS | int64 |\n       | Quantitive - Continuous | CURRENT_HOUSE_YRS | int64 |\n       | Target | Risk_Flag | boolean|\n       ","8130e6c6":"### Categorical Features Analysis(Univariate)"}}