{"cell_type":{"e3cbbe86":"code","b40e50a9":"code","20d75415":"code","b868b198":"code","73c04da9":"code","af166788":"code","5bfa2480":"code","146d6c5d":"code","54a6e514":"code","01f3d6f2":"code","a5825d58":"code","1a678bc3":"code","22eb1001":"code","a58f0b3b":"code","9c5c2b49":"markdown"},"source":{"e3cbbe86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b40e50a9":"# csv dosyam\u0131z\u0131 al\u0131yoruz.\ndata=pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\ndata.head()","20d75415":"data.tail()","b868b198":"abnormal=data[data[\"class\"]==\"Abnormal\"]\nnormal=data[data[\"class\"]==\"Normal\"]","73c04da9":"abnormal.info()","af166788":"normal.info()","5bfa2480":"# Rastgele ikili al\u0131p g\u00f6rselle\u015ftirelim\n\nplt.scatter(abnormal[\"pelvic_incidence\"],abnormal[\"pelvic_radius\"],color=\"red\",label=\"k\u00f6t\u00fc\")\nplt.scatter(normal[\"pelvic_incidence\"],normal[\"pelvic_radius\"],color=\"green\",label=\"iyi\")\nplt.legend()\nplt.show()","146d6c5d":"data[\"class\"]=[1 if each==\"Abnormal\" else 0 for each in data[\"class\"]]\ny=data[\"class\"].values\nx_data=data.drop([\"class\"],axis=1)\ny","54a6e514":"# Normalization\n\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))\nx","01f3d6f2":"# Train,Test Split\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)","a5825d58":"# KNN model\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3) # k_neihgbors = k\nknn.fit(x_train,y_train)","1a678bc3":"prediction=knn.predict(x_test)\nprediction","22eb1001":"# Do\u011fruluk oran\u0131m\u0131za bir bakal\u0131m\nprint(\"Accuracy: {}\".format(knn.score(x_test,y_test)))","a58f0b3b":"# Farkl\u0131 k de\u011ferleri deneyerek en do\u011fru oran\u0131 bulmaya \u00e7al\u0131\u015f\u0131yoruz\nscore_list_test=[]\nscore_list_train=[]\n\nfor each in range(1,40):\n    knn_=KNeighborsClassifier(n_neighbors=each)\n    knn_.fit(x_train,y_train)\n    print(\"{} Test: {}\".format(each,knn_.score(x_test,y_test)))\n    score_list_test.append(knn_.score(x_test,y_test))\n    score_list_train.append(knn_.score(x_train,y_train))\n\nplt.plot(range(1,40),score_list_train,color=\"black\",label=\"train\")\nplt.plot(range(1,40),score_list_test,color=\"purple\",label=\"test\")\nplt.legend()\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","9c5c2b49":"Sonu\u00e7 olarak k=21 de\u011feri i\u00e7in test sonu\u00e7lar\u0131m\u0131z en iyi \u00e7\u0131kt\u0131."}}