{"cell_type":{"6854febb":"code","08c83ee6":"code","12d2b105":"code","f76334fa":"code","8411e11d":"code","0b7ddab2":"code","f32cfb57":"code","284eaa05":"code","f9437e8f":"code","3cb1455e":"code","e2ddd2a8":"code","850e2ea9":"code","277be6d3":"code","a0edaf2c":"code","92b08d16":"code","7e3d55f7":"code","31ac1de9":"code","59d6c715":"code","c565c201":"code","455a8da1":"code","95728cc6":"code","e1443edb":"code","59f01bcc":"code","59309b0d":"code","655edffb":"code","876442cb":"code","67eddd7f":"markdown","bcf3e52e":"markdown","7a0e4a90":"markdown","1bc3d375":"markdown","b1c1e59d":"markdown","3865664c":"markdown","f25c7894":"markdown","c52a03e8":"markdown","d9f7a073":"markdown","e3e2c300":"markdown","a90519b1":"markdown","9ece6ff3":"markdown","ad1973eb":"markdown","2ab75292":"markdown","15569e6f":"markdown"},"source":{"6854febb":"import os\nprint(os.listdir(\".\/\"))\nprint(os.listdir(\"..\/input\/googlenewsvectorsnegative300\"))\nprint(os.listdir(\"..\/input\/jigsaw-unintended-bias-in-toxicity-classification\"))\n\n# Any results you write to the current directory are saved as output.","08c83ee6":"import numpy as np\nimport pandas as pd\npd.set_option('precision', 4)  #\u8bbe\u7f6e\u663e\u793a\u7cbe\u5ea6\npd.set_option('display.float_format',lambda x: '%.4f'%x)  # float \u4e0d\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\npd.set_option('display.expand_frame_repr',False)   # \u4e0d\u5141\u8bb8\u6362\u884c\u663e\u793a\npd.set_option('max_colwidth',300) #\u663e\u793a\u957f\u5ea6\u9ed8\u8ba4\u4e3a50\uff0c\u8fd9\u91cc\u8bbe\u7f6e300\n\nfrom tqdm import tqdm   ## \u8fdb\u5ea6\u6761\ntqdm.pandas()\nimport gc   ## \u56de\u6536\u5185\u5b58","12d2b105":"train = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/train.csv')\ntest = pd.read_csv('..\/input\/jigsaw-unintended-bias-in-toxicity-classification\/test.csv')","f76334fa":"coll = ['black','white','homosexual_gay_or_lesbian','muslim']\n\nidentity_columns = [\n    'male', 'female', 'homosexual_gay_or_lesbian', 'christian', 'jewish',\n    'muslim', 'black', 'white', 'psychiatric_or_mental_illness']","8411e11d":"np.set_printoptions(threshold=1000)","0b7ddab2":"weights = np.ones((len(train),)) \/ 4\nweights","f32cfb57":"# Subgroup  identity_columns  \nweights += (train[identity_columns].fillna(0).values>=0.5).sum(axis=1).astype(bool).astype(np.int) \/ 4\nnp.unique(weights)","284eaa05":"# Background Positive, Subgroup Negative  -----target>0.5, identity_columns\u90fd<0.5\nweights += (( (train['target'].values>=0.5).astype(bool).astype(np.int) +(train[identity_columns].fillna(0).values<0.5).sum(axis=1).astype(bool).astype(np.int) ) > 1 ).astype(bool).astype(np.int) \/ 4\nnp.unique(weights)  ","f9437e8f":"# Background Negative, Subgroup Positive  -----target<0.5, identity_columns\u90fd>0.5\nweights += (( (train['target'].values<0.5).astype(bool).astype(np.int) +\n   (train[identity_columns].fillna(0).values>=0.5).sum(axis=1).astype(bool).astype(np.int) ) > 1 ).astype(bool).astype(np.int) \/ 4\nnp.unique(weights) \nlen(train)\n","3cb1455e":"len(weights)","e2ddd2a8":"train.head()","850e2ea9":"train.isnull().sum()\/len(train)","277be6d3":"train['target'].describe()","a0edaf2c":"train.loc[train['target']>=0.5,'target'] = 1\ntrain.loc[train['target']<0.5,'target'] = 0","92b08d16":"train['target'].value_counts()","7e3d55f7":"list_all = list(train['comment_text'])+list(test['comment_text'])\nfrom tqdm import tqdm\nlength_list = []\nword_all = []\nfor i in tqdm(list_all):\n    length_list.append(len(i))\n    for j in i.split():\n        word_all.append(j)\nset_all = set(word_all)","31ac1de9":"\u6211\u4eec\u7684\u9884\u5904\u7406\u6d41\u7a0b\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u6211\u4eec\u5c06\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684word2vec\u5d4c\u5165\u3002 **\u539f\u5219\u4e0a\uff0c\u6211\u4eec\u7684\u9884\u5904\u7406\u5e94\u8be5\u4e0e\u8bad\u7ec3\u5355\u8bcd\u5d4c\u5165\u4e4b\u524d\u4f7f\u7528\u7684\u9884\u5904\u7406\u76f8\u5339\u914d**\u3002\n\n\u6309\u7167\u7531\u6613\u5230\u96be\u5230\u987a\u5e8f\uff0c\u4f9d\u6b21\u8fdb\u884c\uff1a\n1. \u5168\u90e8\u8f6c\u4e3a\u5c0f\u5199\n2. \u53bb\u9664\u6570\u5b57\n3. \u66ff\u6362\u5e38\u89c1\u7b80\u5199\n4. \u53bb\u9664\u6807\u70b9\u7b26\u53f7\uff0c\u4ee5\u53ca\u5404\u79cd\u7279\u6b8a\u5b57\u7b26\n5. \u68c0\u67e5\u62fc\u5199\u9519\u8bef\n\n\u9664\u4e86\u4e0a\u8ff0\u6280\u672f\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6\u6587\u672c\u9884\u5904\u7406\u6280\u672f\uff0c\u5982\u8bcd\u5e72\u5316\uff0c\u8bcd\u5f62\u8fd8\u539f\u548c\u5220\u9664\u8bcd\u3002\u7531\u4e8e\u8fd9\u4e9b\u6280\u672f\u4e0d\u4e0eDeep Learning NLP\u6a21\u578b\u4e00\u8d77\u4f7f\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u4f1a\u8c08\u8bba\u5b83\u4eec","59d6c715":"# lower\ntrain['comment_text'] = train['comment_text'].str.lower()\ntest['comment_text'] = test['comment_text'].str.lower()","c565c201":"def clean_numbers_1(x):\n    return re.sub('\\d+', ' ', x)\n\ndef clean_numbers_2(x):\n    if bool(re.search(r'\\d', x)):\n        x = re.sub('[0-9]{5,}', '#####', x)\n        x = re.sub('[0-9]{4}', '####', x)\n        x = re.sub('[0-9]{3}', '###', x)\n        x = re.sub('[0-9]{2}', '##', x)\n    return x","455a8da1":"import re\ntrain['comment_text'] = train['comment_text'].apply(clean_numbers_1)\ntest['comment_text'] = test['comment_text'].apply(clean_numbers_1)","95728cc6":"contractions_dict = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\"}","e1443edb":"def _get_contractions(contractions_dict):\n    contractions_re = re.compile('(%s)' % '|'.join(contractions_dict.keys()))\n    return contractions_dict, contractions_re\n\ndef replace_typical_contractions(text):\n    contractions, contractions_re = _get_contractions(contractions_dict)\n\n    def replace(match):\n        return contractions[match.group(0)]\n\n    return contractions_re.sub(replace, text)","59f01bcc":"# clean misspellings\ntrain['comment_text'] = train['comment_text'].apply(replace_typical_contractions)\ntest['comment_text'] = test['comment_text'].apply(replace_typical_contractions)","59309b0d":"list_all = list(train['comment_text'])+list(test['comment_text'])\nfrom tqdm import tqdm\nword_all = []\nfor i in tqdm(list_all):\n    for j in i.split():\n        word_all.append(j)\nset_all = set(word_all)\n\nlist_1 = []\ntemp = ''\nfor k in set_all:\n    common = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'\n    for l in common:\n        k = k.replace(l,'')\n    list_1.append(k)\n# set(list_1)\n\nstr_1 = ''\nfor i in list_1:\n    str_1+=i\nset_1 = set(str_1)\n\npunct_1 = ''\nfor i in set_1:\n    punct_1+=i\npunct_1","655edffb":"# \u5220\u9664\u4e2d\u95f4\u53d8\u91cf\uff0c\u8282\u7701\u5185\u5b58\ndel list_all,word_all,set_all,list_1,temp,str_1 \ngc.collect()","876442cb":"def preprocess_special_chars(data):\n    '''\n    Credit goes to https:\/\/www.kaggle.com\/gpreda\/jigsaw-fast-compact-solution\n    '''\n    def clean_special_chars(text, punct_1):\n        for p in punct:\n            text = text.replace(p, ' ')\n        return text\n\n    data = data.astype(str).apply(lambda x: clean_special_chars(x, punct))\n    return data","67eddd7f":"# \u67e5\u770btarget\u5206\u5e03","bcf3e52e":"# \u68c0\u67e5\u7f3a\u5931\u503c","7a0e4a90":"\u7531\u4e8e\u5927\u591a\u6570\u5d4c\u5165\u4e0d\u4e3a\u6807\u70b9\u7b26\u53f7\u548c\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u63d0\u4f9b\u77e2\u91cf\u503c\uff0c\u56e0\u6b64\u8981\u53bb\u9664\u6587\u672c\u6570\u636e\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\uff0c\u66ff\u6362\u4e3a\u7a7a\u683c\u3002\u5148\u83b7\u53d6train+test\u4e2d\u9664\u4e8652\u4e2a\u5b57\u6bcd\u4e4b\u5916\u7684\u6240\u6709\u7279\u6b8a\u5b57\u7b26\uff0c\u7136\u540e\u4e00\u8d77\u53bb\u9664","1bc3d375":"# \u7edf\u8ba1comment\u957f\u5ea6\u5206\u5e03(train+test)","b1c1e59d":"### 1. \u5168\u90e8\u8f6c\u4e3a\u5c0f\u5199","3865664c":"# \u6570\u636e\u9884\u5904\u7406","f25c7894":"### 2. \u53bb\u9664\u6570\u5b57","c52a03e8":"### 4. \u53bb\u9664\u7279\u6b8a\u5b57\u7b26\uff0c\u5305\u62ec\u5404\u79cd\u6807\u70b9\u7b26\u53f7","d9f7a073":"#### \uff081\uff09\u83b7\u53d6\u7279\u6b8a\u5b57\u7b26","e3e2c300":"# \u6570\u636e\u63a2\u7d22\u6027\u5206\u6790","a90519b1":"### 3. \u66ff\u6362\u7f29\u7565\u5f62\u5f0f\u5199\u6cd5 Contractions","9ece6ff3":"#### (2)\u66ff\u6362\u7279\u6b8a\u5b57\u7b26\u4e3a\u7a7a\u683c","ad1973eb":"\u7f29\u7565\u5f62\u5f0f\u662f\u6211\u4eec\u7528\u6487\u53f7\u5199\u7684\u8bcd\u3002\u4f8b\u5982 \u201cain\u2019t\u201d or \u201caren\u2019t\u201d\u7b49\u8bcd\u3002\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u6807\u51c6\u5316\u6211\u4eec\u7684\u6587\u672c\uff0c\u56e0\u6b64\u8fd8\u539f\u7f29\u7565\u5f62\u5f0f\u662f\u6709\u610f\u4e49\u7684\u3002","2ab75292":"\u8fd9\u91cc\u5bf9\u4e8e\u6570\u5b57\u7684\u5904\u7406\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u7b80\u5355\u7684\u66ff\u6362\u4e3a\u7a7a\u683c\u3002\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7528\u2018#\u2019\u66ff\u6362\u6570\u5b57\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u5d4c\u5165\u90fd\u50cf\u8fd9\u6837\u9884\u5904\u7406\u4e86\u5b83\u4eec\u7684\u6587\u672c\u3002\n\n**\u5c0fPython\u6280\u5de7\uff1a**\u6211\u4eec\u5728clean_numbers2\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528`if`\u8bed\u53e5\u6765\u9884\u5148\u68c0\u67e5\u6587\u672c\u4e2d\u662f\u5426\u5b58\u5728\u6570\u5b57\u3002\u5b83\u662f\u4e00\u4e2a`if`\u603b\u662f\u5feb\u4e8e`re.sub`\u547d\u4ee4\uff0c\u6211\u4eec\u7684\u5927\u90e8\u5206\u6587\u672c\u90fd\u4e0d\u5305\u542b\u6570\u5b57\u3002","15569e6f":"# \u5bfc\u5165\u6570\u636e"}}