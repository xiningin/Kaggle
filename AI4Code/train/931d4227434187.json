{"cell_type":{"0259b673":"code","8742ff58":"code","d20a9617":"code","878d87ba":"code","7149676f":"code","6745904e":"code","703fc811":"code","a615e431":"code","dace9114":"code","be36c3d0":"code","e38888ea":"code","6a1536f0":"code","f5351ec9":"code","29c89485":"markdown","7b099b66":"markdown","73d7f72f":"markdown","ca7a6253":"markdown","a67c2547":"markdown","645515fc":"markdown"},"source":{"0259b673":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier #Random Forest Classifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8742ff58":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\") #Read the training data\ndf.head() #Display 5 rows","d20a9617":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\") #Read the test data\ntest_df.head()","878d87ba":"df = df.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis = 1) \ndf.head()\n","7149676f":"df.isnull().sum()  \n","6745904e":"df['Embarked'].describe() #Check to see the most common port of embarkation\ndf['Embarked'] = df['Embarked'].fillna('S') #Replace the missing values with S(Most common port)\n","703fc811":"mode = int(df['Age'].mode()) # Find the mode of the age values\ndf['Age'] = df['Age'].fillna(value = mode) # Replace the missing values with mode of the feature\n","a615e431":"bins = [-1, 5, 12, 18, 24, 35, 60, np.inf] \nlabel = ['Baby', 'Child', 'Teen', 'Student', 'Young Adult', 'Adult', 'Senior'] # Creating 7 agegroups to accomodate all the different age data\ndf['AgeGroup'] = pd.cut(df['Age'], bins, labels=label) \nage_mapping = {'Baby': 1, 'Child': 2, 'Teen': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7} \ndf['AgeGroup'] = df['AgeGroup'].map(age_mapping) # Convert the categorical labels into numeric labels\n","dace9114":"emb_mapping = {'S': 1, 'C': 2, 'Q': 3}\ndf['Embarked'] = df['Embarked'].map(emb_mapping)# Convert the categorical labels into numeric labels\n","be36c3d0":"df['Sex'] = df['Sex'].map({'male':0, 'female':1})# Convert the categorical labels into numeric labels\ndf = df.drop(['Age'],axis =1)# Drop the original age feature","e38888ea":"test_df = test_df.drop(['Name', 'Ticket', 'Fare', 'Cabin'], axis = 1) \ntest_df.head()\ntest_df.isnull().sum()\ntest_df['Embarked'].describe() #Check to see the most common port of embarkation\ntest_df['Embarked'] = test_df['Embarked'].fillna('S')\nmode = int(test_df['Age'].mode()[1]) # Find the mode of the age values\ntest_df['Age'] = test_df['Age'].fillna(value = mode)\nbins = [-1, 5, 12, 18, 24, 35, 60, np.inf] \nlabel = ['Baby', 'Child', 'Teen', 'Student', 'Young Adult', 'Adult', 'Senior'] # Creating 7 agegroups to accomodate all the different age data\ntest_df['AgeGroup'] = pd.cut(test_df['Age'], bins, labels=label)\nage_mapping = {'Baby': 1, 'Child': 2, 'Teen': 3, 'Student': 4, 'Young Adult': 5, 'Adult': 6, 'Senior': 7}\ntest_df['AgeGroup'] = test_df['AgeGroup'].map(age_mapping)\nemb_mapping = {'S': 1, 'C': 2, 'Q': 3}\ntest_df['Embarked'] = test_df['Embarked'].map(emb_mapping)\ntest_df['Sex'] = test_df['Sex'].map({'male':0, 'female':1})\ntest_df = test_df.drop(['Age'],axis =1)","6a1536f0":"X_train = df.drop(['Survived'], axis = 1)#Features(Extracted by removing target column)\nY_train = df['Survived']#Target column(Survived)\n","f5351ec9":"RF = RandomForestClassifier(max_depth=3, random_state=0)#Apply the Random Forest Classifier\nRF.fit(X_train, Y_train)  #Training\nprediction = RF.predict(test_df) #Prediction\noutput = pd.DataFrame({'PassengerId':test_df.PassengerId, 'Survived':prediction})\noutput.to_csv('my_submission.csv', index=False)\n","29c89485":"**Check for null\/missing values in data**","7b099b66":"# **Test data preprocessing****","73d7f72f":"# **Training Data Preprocessing****\n**Select the features to be used for training and remove the others.**","ca7a6253":"**Convert the age values to categorical data.**","a67c2547":"**Try to fill in missing data using suitable method**","645515fc":"# **Prediction using Random Forest Classifier**"}}