{"cell_type":{"2798548f":"code","8d96faad":"code","77c5d9fd":"code","9bb44013":"code","484017f0":"code","3fa4ea81":"code","4a36d0e3":"code","ed216a87":"code","fad1bb82":"code","c9c77829":"code","c9509971":"code","252d149b":"code","573bf187":"code","7fcefd8a":"code","ed749784":"code","5f705f6e":"code","20775543":"code","a24652e2":"code","f960b4ec":"code","448ac7bb":"code","f144efd0":"code","472510c1":"code","fc17324b":"code","cb09cfb0":"code","cf8bcd15":"code","a04bbca3":"code","67ed248d":"code","0539ce9a":"code","651da925":"code","3b94b782":"code","f14aec67":"code","f33360f7":"code","8d072770":"code","8900115c":"code","25ff1063":"code","56a89ebd":"markdown","67a9a0ad":"markdown","2054b988":"markdown","3dbd7081":"markdown","ba36b993":"markdown","316cebe1":"markdown","ec51ab80":"markdown","9b5b3cd1":"markdown","a202439c":"markdown","cc2acd4f":"markdown","8fcf10d3":"markdown","6360f0ca":"markdown","ff90e751":"markdown","94eeb6db":"markdown","85aa6d79":"markdown","bf8f75ef":"markdown","5c2d3568":"markdown","053959c1":"markdown","90687923":"markdown","ec689985":"markdown","af878890":"markdown","675ac7b9":"markdown","81ea75b6":"markdown","7ef0458c":"markdown"},"source":{"2798548f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d96faad":"import warnings\nwarnings.simplefilter('ignore')\n\nfrom matplotlib import pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\nfrom tqdm import tqdm\n\nimport pandas_summary as ps\nimport pandas_profiling\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, silhouette_samples","77c5d9fd":"get_ipython().magic('matplotlib inline')\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","9bb44013":"my_seed = 13","484017f0":"df = pd.read_csv('..\/input\/is-this-a-good-customer\/clients.csv')","3fa4ea81":"df.shape","4a36d0e3":"df_4_cluster = df.copy()","ed216a87":"df_4_cluster.head()","fad1bb82":"df_4_cluster.tail()","c9c77829":"df_4_cluster.shape","c9509971":"df_4_cluster.hist(figsize=(20,20));","252d149b":"dfs = ps.DataFrameSummary(df_4_cluster)\ndfs.summary()","573bf187":"pandas_profiling.ProfileReport(df_4_cluster, minimal=True)","7fcefd8a":"mapper = dict((val, i) for i, val in enumerate(df_4_cluster.sex.unique()))\nmapper","ed749784":"df_4_cluster['sex'] = df_4_cluster['sex'].map(mapper)","5f705f6e":"categoricals = dfs.categoricals.tolist()\ncategoricals","20775543":"df_4_cluster = pd.get_dummies(df_4_cluster, columns=categoricals, drop_first=False)","a24652e2":"df_4_cluster.drop('month', axis=1, inplace=True)","f960b4ec":"scaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df_4_cluster)\ndf_scaled = pd.DataFrame(df_scaled, columns=df_4_cluster.columns)\ndf_scaled.shape","448ac7bb":"df_scaled.head()","f144efd0":"pca = PCA(n_components=0.95, svd_solver='full', random_state=my_seed)\npca.fit(df_scaled)\ndf_pca = pca.transform(df_scaled)\ndf_pca.shape","472510c1":"pca.explained_variance_","fc17324b":"tsne = TSNE(n_components=2, random_state=my_seed)","cb09cfb0":"df_tsne = tsne.fit_transform(df_pca)\ndf_tsne.shape","cf8bcd15":"sns.scatterplot(df_tsne[:,0], df_tsne[:,1])","a04bbca3":"inertia = []\nfor i in tqdm(range(1, 11)):\n    kmeans = KMeans(n_clusters=i, random_state=my_seed, n_jobs=-1).fit(df_pca)\n    labels = kmeans.labels_\n    inertia_i = kmeans.inertia_\n    inertia.append(inertia_i)","67ed248d":"plt.plot(range(1, 11), inertia, marker='o');","0539ce9a":"D = []\nfor i in range(1, 9):\n    Di = (inertia[i] - inertia[i+1])\/(inertia[i-1] - inertia[i])\n    D.append(Di)","651da925":"plt.plot(range(2, 10), D, marker='o');","3b94b782":"silhouette = []\nfor i in tqdm(range(2, 10)):\n    kmeans = KMeans(n_clusters=i, random_state=my_seed, n_jobs=-1).fit(df_pca)\n    labels = kmeans.labels_\n    score = silhouette_score(df_pca, labels)\n    silhouette.append(score)","f14aec67":"plt.plot(range(2, 10), silhouette, marker='o');","f33360f7":"range_n_clusters = list(range(2, 10))\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(df_pca) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(df_pca)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(df_pca, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(df_pca, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.nipy_spectral(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.nipy_spectral(cluster_labels.astype(float) \/ n_clusters)\n    ax2.scatter(df_tsne[:, 0], df_tsne[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors, edgecolor='k')\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1], marker='o',\n                c=\"white\", alpha=1, s=200, edgecolor='k')\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1,\n                    s=50, edgecolor='k')\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\nplt.show()","8d072770":"kmeans = KMeans(n_clusters=7, random_state=my_seed, n_jobs=-1).fit(df_pca)\npd.Series(kmeans.labels_).value_counts()","8900115c":"df['cluster'] = kmeans.labels_\ndf.head()","25ff1063":"df.to_csv('clusters.csv', index=False)","56a89ebd":"# 5. Prepare DF","67a9a0ad":"## 4.3. DF profile report","2054b988":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 - https:\/\/www.kaggle.com\/podsyp\/is-this-a-good-customer","3dbd7081":"# 7. TSNE for visualization","ba36b993":"#### Elbow method not effective","316cebe1":"# \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438.\n\n\n### \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u0438\u0437\u043d\u0435\u0441 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430. \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0435\u0435 \u0440\u0435\u0448\u0438\u0442\u044c.","ec51ab80":"## 5.1. Binary","9b5b3cd1":"## 8.1. Elbow method","a202439c":"# 6. PCA for correlation in features","cc2acd4f":"# 4. Quick EDA","8fcf10d3":"# 3. Read CSV","6360f0ca":"## 5.3. Drop month - drop trend","ff90e751":"# 9. Uploading totals","94eeb6db":"## 8.3. Results by number of clusters","85aa6d79":"## 5.2. Categorical features","bf8f75ef":"This node computes the Silhouette Coefficient for the provided clustering result. The Silhouette Coefficient is a useful metric for evaluating clustering performance. For each row, it is computed using (b - a) \/ max(a, b) , where a is the mean intra-cluster distance and b is the mean inter-cluster distance to the closest cluster. Additionally, a second table containing the mean over all individual Silhouette Coefficients is calculated. The score can range from -1.0 to 1.0, while the higher the score, the better. There have to be at least two clusters for the score to be computable.\n\nBy default, the Euclidean distance is used to calculate distances between rows. This may be changed by providing an optional distance function. If a distance function is supplied, the data column selection in the dialog will be ignored as the used columns are configured by the connected distance function.","5c2d3568":"## 4.2. DF summary","053959c1":"# 1. Some imports.","90687923":"# 2. Set options","ec689985":"## \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430:\n- \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 - clusters.csv (https:\/\/www.kaggle.com\/podsyp\/clustering-for-business-tasks\/data)\n- \u041e\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440 \u0438 \u043a\u0430\u043a\u043e\u0439 \u0441\u0435\u0433\u043c\u0435\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043e\u043d \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442.\n- \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434\u044b \u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u0430\u043a\u0438\u0435 \u043f\u043b\u044e\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0441\u044b \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445?\n- \u041a\u0430\u043a\u0438\u0435 \u0431\u0438\u0437\u043d\u0435\u0441 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u044b \u0431\u044b \u0440\u0435\u0448\u0430\u043b\u0438, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432?\n- \u041a\u0430\u043a\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0432\u044b \u0431\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b\u0438?\n\n\n#### * \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f, \u043f\u043b\u044e\u0441 excel \u0438\u043b\u0438 JupyterNotebook \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0430\u0448\u0438\u0445 \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432.","af878890":"## 4.1. Histogram","675ac7b9":"# 6. Scale features","81ea75b6":"# 8. Optimize number of clusters","7ef0458c":"## 8.2. Silhouette Coefficient"}}