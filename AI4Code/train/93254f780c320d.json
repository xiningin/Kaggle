{"cell_type":{"27e6a09a":"code","4c4a7805":"code","3da5801c":"code","54782df8":"code","3e27bdd8":"code","a18b84e7":"code","67284d27":"code","afb5db62":"code","72d85e1c":"code","3e89c05a":"code","54b4992a":"code","83775c31":"code","ffe5af1e":"code","84cf6da1":"code","1f3f56d1":"code","efbce652":"code","8083b258":"code","3e27375b":"code","63954895":"code","86bdcf0f":"code","6e39dece":"code","a45d1150":"code","f9d30854":"code","039c2d65":"code","b7238d37":"code","ff4307dc":"code","275019d2":"code","25083931":"code","03f7de3e":"code","2b1a420b":"code","25a9b328":"code","b3ee813f":"markdown","0d014fea":"markdown","af38b1f0":"markdown","3f0b6000":"markdown","b5a63c0f":"markdown","37542b99":"markdown","42ae321f":"markdown","b1e3232b":"markdown","d77afcea":"markdown","50b43056":"markdown","fb84838f":"markdown","53fdedff":"markdown"},"source":{"27e6a09a":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport tensorflow as tf\nimport transformers\nfrom transformers import *\nfrom sklearn import metrics\nfrom sklearn.model_selection import KFold\n\nimport time\nimport datetime\nimport random\n\nprint('Transformers version: ', transformers.__version__)\nprint('Tensorflow version: ', tf.__version__)","4c4a7805":"data_dir = '\/kaggle\/input\/nlp-getting-started\/'\ntrain_df = pd.read_csv(data_dir+'train.csv')\ntest_df = pd.read_csv(data_dir+'test.csv')\ntrain_df = train_df.sample(n=len(train_df), random_state=42)\nsample_submission = pd.read_csv(data_dir+'sample_submission.csv')\nprint(train_df['target'].value_counts())\ntrain_df.head(2)","3da5801c":"x_train = train_df['text']\ny_train = train_df['target']\nx_test = test_df['text']","54782df8":"tokenizer = transformers.BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","3e27bdd8":"def encode_tweet(df):\n    input_ids = []\n\n    for x in df:\n        encoded_x = tokenizer.encode(x,\n                                    add_special_tokens = True)\n        input_ids.append(encoded_x)\n    return input_ids","a18b84e7":"test_input = encode_tweet(x_test)\nprint('Original: ', x_test[0])\nprint('Encoded: ', test_input[0])","67284d27":"train_input = encode_tweet(x_train)","afb5db62":"print('Max sentence length in Train Ids: ', max([len(sen) for sen in train_input]))\nprint('Max sentence length in Test Ids: ', max([len(sen) for sen in test_input]))","72d85e1c":"from keras.preprocessing.sequence import pad_sequences\nMAX_LEN = 84\n\ndef pad_tweets(df):\n    df = pad_sequences(df, maxlen=MAX_LEN, dtype=\"long\", \n                       value=0, truncating=\"post\", padding=\"post\")\n    return df","3e89c05a":"train_input = pad_tweets(train_input)\ntest_input = pad_tweets(test_input)","54b4992a":"def get_att_mask(df):\n    attention_masks = []\n\n    for tweet in df:\n        att_mask = [int(token_id > 0) for token_id in tweet]\n        attention_masks.append(att_mask)\n    return attention_masks","83775c31":"train_att = get_att_mask(train_input)\ntest_att = get_att_mask(test_input)","ffe5af1e":"from sklearn.model_selection import train_test_split\n\ntr_input, val_input, tr_label, val_label = train_test_split(train_input, y_train, \n                                                            random_state=2020, test_size=0.15)\n# Do the same for the masks.\ntr_mask, val_mask, _, _ = train_test_split(train_att, y_train,\n                                             random_state=2020, test_size=0.15)","84cf6da1":"# For Training and Validation data and masks\ntr_input = torch.tensor(tr_input)\nval_input = torch.tensor(val_input)\n\n#convert to np.array, otherwise throws a mysterious 'KeyError: 4' error\ntr_label = torch.tensor(np.array(tr_label))\nval_label = torch.tensor(np.array(val_label))\n\ntr_mask = torch.tensor(tr_mask)\nval_mask = torch.tensor(val_mask)\n\n# For Test data and mask\nte_input = torch.tensor(test_input)\nte_mask = torch.tensor(test_att)","1f3f56d1":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\nBATCH_SIZE = 32 \n\n# For training\ntrain_data = TensorDataset(tr_input, tr_mask, tr_label)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler = train_sampler, batch_size = BATCH_SIZE)\n\n# For validation\nval_data = TensorDataset(val_input, val_mask, val_label)\nval_sampler = RandomSampler(val_data)\nval_dataloader = DataLoader(val_data, sampler = val_sampler, batch_size = BATCH_SIZE)\n","efbce652":"from transformers import BertForSequenceClassification, AdamW, BertConfig\n\nmodel = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels = 2,\n                                                      output_attentions = False,\n                                                      output_hidden_states = False)","8083b258":"model.cuda()","3e27375b":"# Get all of the model's parameters as a list of tuples.\nparams = list(model.named_parameters())\n\nprint('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","63954895":"from transformers import get_linear_schedule_with_warmup\n\n# AdamW is a class from the Huggingface library\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5, # default is 5e-5\n                  eps = 1e-8 # default is 1e-8\n                )\nepochs = 1 # 1 epoch gave the best result\n\n# the number of batches times the number of epochs\ntotal_steps = len(train_dataloader) * epochs\n\n# the learning rate scheduler\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0,\n                                            num_training_steps = total_steps)","86bdcf0f":"# Accuracy helper function\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","6e39dece":"def format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    elapsed_rounded = int(round((elapsed)))\n    return str(datetime.timedelta(seconds=elapsed_rounded))","a45d1150":"if torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","f9d30854":"seed = 50\n\nrandom.seed(seed)\nnp.random.seed(seed)\n\ntorch.manual_seed(seed)\ntorch.cuda.manual_seed_all(seed)\n\nloss_arr = []\n\nfor i in range(0, epochs):\n    \n    # ========= Training ==========\n    \n    print('====== Epoch {:} of {:}'.format(i+1, epochs))\n    print('Training...')\n    \n    t0 = time.time()\n    \n    total_loss = 0\n    # initialize training mode\n    model.train()\n    \n    for step, batch in enumerate(train_dataloader):\n        if step % 30 == 0 and not step == 0:\n            elapsed = format_time(time.time() - t0)\n            print('Batch {:>5,} of {:>5,}. Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n            \n            # Unpacking the training batch from dataloader and copying each tensor to the GPU\n            \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # pytorch doesn't clear previously calculated gradients\n        # before performing backward pass, so clearing here:\n        model.zero_grad()\n        \n        outputs = model(b_input_ids,\n                       token_type_ids = None, \n                       attention_mask = b_input_mask,\n                       labels = b_labels)\n        loss = outputs[0]\n        \n        total_loss += loss.item()\n        loss.backward()\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n        \n        optimizer.step()\n        \n        #update the learning rate\n        scheduler.step()\n    \n    avg_train_loss = total_loss \/ len(train_dataloader)\n    \n    loss_arr.append(avg_train_loss)\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epoch took: {:}\".format(format_time(time.time() - t0)))\n    \n    # ========= Validation ==========\n    \n    print(\"\")\n    print(\"Running Validation...\")\n    t0 = time.time()\n    # evaluation mode\n    model.eval()\n    \n    eval_loss, eval_accuracy = 0, 0\n    nb_eval_steps, nb_eval_examples = 0, 0\n    \n    for batch in val_dataloader:\n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        with torch.no_grad():\n            \n            outputs = model(b_input_ids, \n                           token_type_ids = None, \n                           attention_mask = b_input_mask)\n            \n        logits = outputs[0]\n        # move logits to cpu\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n        # get accuracy\n        tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n        \n        eval_accuracy += tmp_eval_accuracy\n        \n        nb_eval_steps += 1\n    \n    print(\"  Accuracy: {0:.2f}\".format(eval_accuracy\/nb_eval_steps))\n    print(\"  Validation took: {:}\".format(format_time(time.time() - t0)))\n    \nprint(\"\")\nprint(\"Training complete!\")","039c2d65":"import matplotlib.pyplot as plt\n\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(loss_arr, 'b-o')\n\n# Label the plot.\nplt.title(\"Training loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\n\nplt.show()","b7238d37":"pred_labels = np.array(sample_submission['target'])","ff4307dc":"te_labels = torch.tensor(pred_labels)","275019d2":"prediction_data = TensorDataset(te_input, te_mask, te_labels)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler = prediction_sampler, batch_size = BATCH_SIZE)","25083931":"print('Predicting labels for {:,} test sentences...'.format(len(te_input)))\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n    b_input_ids = batch[0].to(device)\n    b_input_mask = batch[1].to(device)\n    b_labels = batch[2].to(device)\n    \n    # Telling the model not to compute or store gradients, saving memory and \n    # speeding up prediction\n    with torch.no_grad():\n      # Forward pass, calculate logit predictions\n        outputs = model(b_input_ids, token_type_ids=None,\n                        attention_mask=b_input_mask)\n\n    logits = outputs[0]\n\n    # Move logits and labels to CPU\n    logits = logits.detach().cpu().numpy()\n    label_ids = b_labels.to('cpu').numpy()\n  \n    # Store predictions and true labels\n    predictions.append(logits)\n    true_labels.append(label_ids)\n\nprint('    DONE.')","03f7de3e":"flat_predictions = [item for sublist in predictions for item in sublist]\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()","2b1a420b":"flat_predictions","25a9b328":"sample_submission['target'] = flat_predictions\nsample_submission.to_csv('submission.csv', index = False)","b3ee813f":"### Padding","0d014fea":"### AdamW optimizer\n\nhttps:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L109","af38b1f0":"Converting to Torch Tensors","3f0b6000":"# Testing","b5a63c0f":"### Attention Masks","37542b99":"Using helper classes in order to use batches for training. It creates an iterator, which should save on memory during training. The same must be repeated on the test set once we have prediction labels.","42ae321f":"# Tokenization and Input Formatting\n### Sequence to IDs","b1e3232b":"Displaying some of the model's parameters:","d77afcea":"# Training the Model\nUsing the pre-trained model, documentation can be found here\nhttps:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/model.html#transformers.PreTrainedModel.from_pretrained","50b43056":"### Training Loop","fb84838f":"# Importing Data","53fdedff":"https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128"}}