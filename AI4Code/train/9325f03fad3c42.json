{"cell_type":{"74a59bb5":"code","175313f8":"code","1458fc85":"code","dc2409be":"code","04700afd":"code","483d1403":"code","57fdd42f":"code","72998d1a":"code","45bf2032":"code","2dc7cb22":"code","6fa5d5cb":"markdown","608116a0":"markdown","abc12f17":"markdown","c9ba0e3d":"markdown","a66b9ce0":"markdown","468cd6f7":"markdown","eba6e2bd":"markdown","39a3bcf4":"markdown","ef98e4fa":"markdown"},"source":{"74a59bb5":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Lasso,Ridge,LinearRegression","175313f8":"X_train = np.array([258.0, 270.0, 294.0, \n              320.0, 342.0, 368.0, \n              396.0, 446.0, 480.0, 586.0])[:,np.newaxis]\n\ny_train = np.array([236.4, 234.4, 252.8, \n              298.6, 314.2, 342.2, \n              360.8, 368.0, 391.2,\n              390.8])\n\nX_test = np.arange(250, 600, 10)[:, np.newaxis]","1458fc85":"X_train.shape","dc2409be":"modelLinear = LinearRegression()\nmodelLinear.fit(X_train, y_train)","04700afd":"pred_test_linear = modelLinear.predict(X_test)","483d1403":"# transform train data using PolynomialFeatures\nquadratic = PolynomialFeatures(degree=2)\nX_quad = quadratic.fit_transform(X_train)\n\n# make linear model\nmodelPolyLinear = LinearRegression()\nmodelPolyLinear.fit(X_quad, y_train)","57fdd42f":"pred_test_poly_linear = modelPolyLinear.predict(quadratic.fit_transform(X_test))","72998d1a":"# transform train data using PolynomialFeatures\nquadratic = PolynomialFeatures(degree=5)\nX_quad = quadratic.fit_transform(X_train)\n\n# make linear model\nmodelPolyLinear5 = LinearRegression()\nmodelPolyLinear5.fit(X_quad, y_train)","45bf2032":"pred_test_poly_linear5 = modelPolyLinear5.predict(quadratic.fit_transform(X_test))","2dc7cb22":"# 1.plot points\nplt.scatter(X_train, y_train, label='Training points')\n\n# 2.plot linear test result \nplt.plot(X_test, pred_test_linear, label='Linear test result', linestyle='--')\n\n# 3.plot poly2 linear test result\nplt.plot(X_test, pred_test_poly_linear, label='Poly Degree 2 Linear test result')\n\n# 4.plot poly5 linear test result\nplt.plot(X_test, pred_test_poly_linear5, label='Poly Degree 5 Linear test result')\n\nplt.xlabel('Explanatory variable')\nplt.ylabel('Predicted or known target values')\nplt.legend(loc='upper left')\n\nplt.tight_layout()\nplt.show()","6fa5d5cb":"# 4.2 predict test data using Poly-Linear Model","608116a0":"# 3.1 transform PolynomialFeatures(2) + make LinearRegression model","abc12f17":"# 2.1 make LinearRegression model","c9ba0e3d":"# 1.make data ","a66b9ce0":"# 2.2 predict test data using Linear model","468cd6f7":"# 3.2 predict test data using Poly-Linear Model","eba6e2bd":"# 0.import libraries","39a3bcf4":"# 4.1 transform PolynomialFeatures(5) + make LinearRegression model","ef98e4fa":"# 5.draw train data and test result(linear model , poly linear model) "}}