{"cell_type":{"e5f64dbc":"code","8ba88bd6":"code","c75ddec4":"code","06da8151":"code","5750ccdb":"code","f2746f6e":"code","2ab2c9bc":"code","1ffee1e3":"code","297b626f":"code","e73c5683":"markdown","6ad5b01b":"markdown","74bf50e0":"markdown","c202de31":"markdown"},"source":{"e5f64dbc":"import numpy as np\nimport pymc3 as pm\nimport scipy.stats as stats\nimport scipy.optimize as opt\nimport statsmodels.api as sm\n\nfrom tqdm import trange\n\nimport matplotlib.pyplot as graph\nimport seaborn as sns\n\ngraph.style.use('fivethirtyeight')","8ba88bd6":"n = 15\nm = 1\nx = stats.norm(45, 10).rvs(size=(n, 1))\ny = (m * x) + stats.norm(0, 10).rvs(size=(n, 1))\ny = y.flatten()\n\nprint(y.shape, x.shape)\n\ngraph.plot(x, y, '.')\ngraph.xlabel('X')\ngraph.ylabel('Y')\ngraph.show()","c75ddec4":"display(sm.OLS(y, sm.add_constant(x)).fit().summary())","06da8151":"def mse(params, xi, yi):\n    mi, bi = params\n    return ((yi - (mi * xi + bi).flatten()) ** 2).sum()","5750ccdb":"ols_params = opt.fmin(mse, [-1., -1.], args=(x, y))\nprint(ols_params)","f2746f6e":"# Permuation testing\nn_perm = int(10e3)\nnull_dist = np.zeros((n_perm, 2))\nfor i in trange(n_perm, desc='Permutation Testing'):\n    ols_perm_params = opt.fmin(mse, [0., 0.], args=(x, np.random.choice(y, size=len(y), replace=False)), disp=False)\n    null_dist[i, 0] = ols_perm_params[0]\n    null_dist[i, 1] = ols_perm_params[1]\n    \ngraph.title('Null Distribution of m')\nsns.distplot(null_dist[:, 0])\ngraph.show()\n\ngraph.title('Null Distribution of b')\nsns.distplot(null_dist[:, 1])\ngraph.show()","2ab2c9bc":"# Compute p-values\nfor i, name in enumerate(['m', 'b']):\n    print(f'{name} p-value =', (null_dist[:, i] >= ols_params[i]).mean())","1ffee1e3":"with pm.Model() as bayes_model:\n    # Priors\n    slope = pm.Normal('m', mu=0, sd=100**2)\n    intercept = pm.Normal('b', mu=0, sd=100**2)\n    resid_var = pm.HalfNormal('sd', sd=100**2)\n    \n    # Likelihood\n    obs = pm.Normal('y', mu=slope * x.flatten() + intercept, sd=resid_var, observed=y)\n    \n    # Sample\n    trace = pm.sample(5000)\n    pm.traceplot(trace)\n    graph.show()","297b626f":"pm.plot_posterior(trace, varnames=['m', 'b'], ref_val=[m, 0])\ngraph.show()\n\npm.plot_posterior(trace, varnames=['m', 'b'], ref_val=[0, 0])\ngraph.show()","e73c5683":"# Bayesian Model","6ad5b01b":"# Setup\n\nMaking a VERY small dataset. Then we'll try to infer the values for all of the parameters.","74bf50e0":"# Simulation (Permutation Test)","c202de31":"# Classic Test\n\nClassic gray box test."}}