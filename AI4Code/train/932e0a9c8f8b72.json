{"cell_type":{"4555cc6c":"code","03d1a5d0":"code","3fb78340":"code","308d0857":"code","1bdcf89f":"code","ee4740ae":"code","d59e9953":"code","0969e379":"code","a92097e5":"code","e9695895":"code","21568f51":"code","adf40c95":"code","a302ade3":"code","35943d7d":"code","0fbe181c":"code","77c497eb":"code","8e7c8437":"code","6b7d3414":"markdown","607e413d":"markdown","1444b34d":"markdown","5b4b9d19":"markdown","69693aea":"markdown","f41cb40e":"markdown","964ca93e":"markdown","00d1dc7f":"markdown","827e4294":"markdown"},"source":{"4555cc6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03d1a5d0":"import tensorflow as tf\nimport keras_preprocessing\nfrom keras_preprocessing import image\nfrom keras_preprocessing.image import ImageDataGenerator\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,Activation,MaxPooling2D,SpatialDropout2D,Flatten,Dropout\nfrom sklearn.datasets import load_files\nimport numpy as np\nfrom sklearn.datasets import load_files\nfrom keras.utils import to_categorical\n\n# fix 'DirectoryIterator' object has no attribute 'shape'\nfrom tensorflow.python.keras.utils.data_utils import Sequence\nfrom keras.preprocessing.image import array_to_img, img_to_array, load_img\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as implt\n\nfrom PIL import Image, ImageFile\nfrom os import path, getcwd, listdir, environ\nfrom keras.utils.vis_utils import plot_model\nimport random\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nfrom numpy import asarray\n\nimport warnings\nwarnings.filterwarnings('ignore')","3fb78340":"\ndef showImage(url):\n    test_Image = Image.open(urlopen(url))\n    test_Image = test_Image.convert('RGB')\n    plt.imshow(test_Image)\n    return  test_Image\n\ndef getLabel(index):\n    return (list(train_generator.class_indices.keys())[list(train_generator.class_indices.values()).index(index)])\n\n\n\ndef print_images():\n    fig=plt.figure(figsize=(10, 10))\n    columns = 4\n    rows = 4\n    title = \"\"\n    \n    for i in range(1, columns * rows +1):\n        num1 = random.randint(0, 31)\n        img = train_generator[0][0][num1]\n        title = getLabel(num1)\n            \n        axes = fig.add_subplot(rows, columns, i, title=title)\n        fig.tight_layout(pad=1.0)\n        axes.axis('off')\n        title = \"\"\n    \n        plt.imshow(img)\n        \n    plt.show()","308d0857":"directory = '..\/input\/stanford-dogs-dataset\/images\/Images\/'\n\nimg_dogs = listdir(directory)\n\nimg_size = 224 # test with image size of 224X224\nbatch_size = 32\nseed = 50\nnum_classes = 120","1bdcf89f":"\ntrain_datagen=ImageDataGenerator(\n                        rescale=1.\/255,\n                        validation_split=0.2\n                        )\n\ntrain_generator=train_datagen.flow_from_directory(\n                        directory, \n                        target_size=(img_size,img_size),\n                        subset='training',\n                        shuffle=True,\n                        batch_size=batch_size,\n                        class_mode='categorical'\n                        )\n\nvalid_datagen=ImageDataGenerator(\n                        validation_split=0.2,\n                        rescale=1.\/255\n                        )\n\nvalid_generator=valid_datagen.flow_from_directory(\n                        directory, \n                        target_size=(img_size,img_size),\n                        subset='validation',\n                        shuffle=False,\n                        batch_size=batch_size,\n                        class_mode='categorical'\n                        )","ee4740ae":"labels = list(train_generator.class_indices.keys())\nbreeds=[]\n\nfor breed in labels:\n    a=breed[10:]\n    a=a.replace('_',' ')\n    a=a.lower()\n    breeds.append(a)\n\nprint(\"No. of breeds = \", len(labels))\nprint(breeds)","d59e9953":"print_images()","0969e379":"inputs = keras.Input(shape=(img_size, img_size, 3))\n\n# === DenseNet201 CNN Model ===================\nbase_model = keras.applications.DenseNet201(\n    weights = 'imagenet',\n    input_shape=(img_size, img_size, 3),\n    include_top=False)\n\nbase_model.trainable = False\n# === DenseNet201 CNN Model ===================\n\n# === Arquitectura ===================\nx = base_model.output\nx = keras.layers.GlobalAveragePooling2D()(x)\nx = keras.layers.Dense(512, activation='relu')(x)\nx = Dropout(0.5)(x)\nx = keras.layers.Dense(256, activation='relu')(x)\nx = Dropout(0.5)(x)\noutputs = keras.layers.Dense(num_classes, activation='softmax')(x)\n\n# se acopla el modelo\nmodel = keras.Model(base_model.input, outputs)\n# === Arquitectura ===================\n\n# congelar capas\nfor layer in base_model.layers:\n    layer.trainable = False\n\n    \nmodel.compile(loss='categorical_crossentropy',\n              optimizer=\"adam\",\n              metrics=['accuracy'])\n\nmodel.summary()","a92097e5":"early_stop = keras.callbacks.EarlyStopping(\n            monitor=\"val_loss\",\n            min_delta=1e-2,\n            patience=4,\n            verbose=1,\n        )\n\n#\n\nhistory = model.fit(train_generator, validation_data=test_generator, epochs=50, \n                    verbose=1, workers=3,callbacks = [early_stop]) #shuffle=True","e9695895":"model.save_weights(\"model1.h5\")","21568f51":"score = model.evaluate_generator (test_generator,verbose=0)\nprint(\"Test loss:\", score[0])\nprint(\"Test accuracy:\", score[1])","adf40c95":"import pandas as pd\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot();","a302ade3":"\ndef getPrediction(testImg):\n    testImg = testImg.resize((img_size,img_size))\n    img_array = asarray(testImg) \/ 255\n\n    prediction = model.predict(np.array([img_array]))\n\n    result = prediction.argmax(axis=-1)\n\n    return labels[result[0]]","35943d7d":"testImg = showImage(\"https:\/\/ar.cienradios.com\/wp-content\/uploads\/sites\/2\/2020\/01\/La-radiograf%C3%ADa-de-un-perro-pug-se-hizo-viral-los-ojos-ocupan-casi-toda-su-cabeza.gif\")\npred=getPrediction(testImg)\nprint(\"Prediction: \" + pred)","0fbe181c":"testImg = showImage(\"https:\/\/kc-media-cdn-live.azureedge.net\/cache\/8\/7\/9\/2\/3\/a\/87923a52b482278d1dbd22f4f37b0585459a0cec.jpg\")\npred=getPrediction(testImg)\nprint(\"Prediction: \" + pred)","77c497eb":"\ntestImg = showImage(\"https:\/\/media.theobjective.com\/2013\/12\/25-1-976x612.jpg\")\npred=getPrediction(testImg)\nprint(\"Prediction: \" + pred)","8e7c8437":"\ntestImg = showImage(\"https:\/\/fotografias.antena3.com\/clipping\/cmsimages01\/2018\/07\/11\/183121E0-7B48-4B8F-88D3-369C068BF317\/69.jpg\")\npred=getPrediction(testImg)\nprint(\"Prediction: \" + pred)","6b7d3414":"## DenseNet201 Model","607e413d":"#### Labels","1444b34d":"### Util functions","5b4b9d19":"#### Initial Imports","69693aea":"### Show random examples","f41cb40e":"## Make some predictions","964ca93e":"### Collect the images","00d1dc7f":"#### Save the model","827e4294":"\n## What breed is that dog?\n\n#### Transfer Learning DenseNet201\n\nhttps:\/\/www.researchgate.net\/publication\/342356888_DenseNet-201-Based_Deep_Neural_Network_with_Composite_Learning_Factor_and_Precomputation_for_Multiple_Sclerosis_Classification\n\nhttps:\/\/keras.io\/api\/applications\/densenet\/#densenet121-function\n"}}