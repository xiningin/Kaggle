{"cell_type":{"9db9ad8b":"code","121968b8":"code","59a8843a":"code","7bddf80b":"code","7a3a6722":"code","dd003096":"code","d1f411b2":"code","4475cc13":"code","c6c55835":"markdown","8eb09a61":"markdown","11d21272":"markdown","dc916818":"markdown","944d7167":"markdown","9ef0c835":"markdown","53fed838":"markdown","f84a91c0":"markdown"},"source":{"9db9ad8b":"!conda install -y -c rdkit rdkit","121968b8":"import pandas as pd\nfrom tqdm.auto import tqdm\ntqdm.pandas()\n\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import GroupKFold\n\n\nfrom rdkit import Chem\nfrom rdkit.Chem.Scaffolds import MurckoScaffold\n\nfrom collections import defaultdict","59a8843a":"train = pd.read_csv('..\/input\/bms-molecular-translation\/train_labels.csv')\n\ndef get_train_file_path(image_id):\n    return \"..\/input\/bms-molecular-translation\/train\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )\n\n# method 1\ndef get_basic_marcko_scaffold(inchi):\n    return MurckoScaffold.MurckoScaffoldSmiles(mol=Chem.MolFromInchi(inchi),includeChirality=False)\n\n# method 2\ndef get_bm_scaffold(smiles):\n    try:\n        scaffold = Chem.MolToSmiles(MurckoScaffold.MakeScaffoldGeneric(mol=Chem.MolFromSmiles(smiles)))\n    except Exception:\n        print(\"Raise AtomValenceException, return basic Murcko Scaffold\")\n        scaffold = smiles\n    return scaffold\n\ntrain['file_path'] = train['image_id'].progress_apply(get_train_file_path)\ntrain[\"basic_murcko_scaffold\"] = train[\"InChI\"].progress_apply(get_basic_marcko_scaffold)\ntrain[\"BM_scaffold\"] = train[\"basic_murcko_scaffold\"].progress_apply(get_bm_scaffold)\nprint(f'train.shape: {train.shape}')\ndisplay(train.head())","7bddf80b":"train[\"basic_murcko_scaffold\"].value_counts().head(20)","7a3a6722":"def InchiToImage(Inchi):\n    display(Chem.Draw.MolToImage(Chem.MolFromInchi(Inchi)))\ndef SmilesToImage(Smiles):\n    display(Chem.Draw.MolToImage(Chem.MolFromSmiles(Smiles)))","dd003096":"for image_id in train[train[\"basic_murcko_scaffold\"]==\"\"][\"image_id\"].head(10):\n    mol_data = train[train[\"image_id\"]==image_id].iloc[0,:]\n    print(\"image_id: \"+mol_data[\"image_id\"])\n    \n    InchiToImage(mol_data[\"InChI\"])\n    \n    image = cv2.imread(mol_data[\"file_path\"])\n    plt.imshow(image)\n    plt.show()","d1f411b2":"i=0\ngkf = GroupKFold(n_splits=5)\nfor train_index,valid_index in gkf.split(train,groups=train[\"basic_murcko_scaffold\"]):\n    train_df = train.iloc[train_index,:]\n    valid_df = train.iloc[valid_index,:]\n    print(\"Fold %d: train size: %d , valid size: %d\"%(i,train_df.shape[0],valid_df.shape[0]))\n    \n    # MS means Murcko Scaffold.\n    train_df.to_csv(\"train_MS_%d.csv\"%i,index=False)\n    valid_df.to_csv(\"valid_MS_%d.csv\"%i,index=False)\n    i+=1","4475cc13":"i=0\ngkf = GroupKFold(n_splits=5)\nfor train_index,valid_index in gkf.split(train,groups=train[\"BM_scaffold\"]):\n    train_df = train.iloc[train_index,:]\n    valid_df = train.iloc[valid_index,:]\n    print(\"Fold %d: train size: %d , valid size: %d\"%(i,train_df.shape[0],valid_df.shape[0]))\n    \n    # BMS means BM Scaffold.\n    train_df.to_csv(\"train_BMS_%d.csv\"%i,index=False)\n    valid_df.to_csv(\"valid_BMS_%d.csv\"%i,index=False)\n    i+=1","c6c55835":"# Method 2: Bemis\/Murcko Scaffold (BM Scaffold)\nBasic Murcko Scaffold treats as different scaffolds when the shape is the same but only the atoms are different as shown in the image below.(left scaffold: \"c1ccccc1\" right scaffold: \"c1ccncc1)\n\n![image.png](attachment:image.png)\n\nBM scaffold extracts scaffold by ignoring the bond type and the difference between atoms and focusing only on the shape.\nWhen extraction of BM scaffold fails, return basic Murcko Scaffold in this notebook. The image below is an example of a scaffold that fails to extract the BM scaffold. In BM scaffold, all atoms are replaced with carbon (valence=4), so when a phosphorus (valence=5) atom appears, for example, the valence is insufficient and an error is thrown.\n\n![failed_example.png](attachment:failed_example.png)","8eb09a61":"# What is Murcko Scaffold?\nMurcko scaffold is the method for extracting molecule backbone. Murcko scaffold is obtained by extracting the ring structures and the linkers that connect them.\n\nExtracting Murcko scaffold enable us to cluster the structure of the molecule. Therefore, it is possible to separate molecules with extremely similar structures from train and validation.We obtain structurally divirse data splits by this technique.\n\nThis notebook presents two methods for extracting scaffold. I don't know which method is the better for this task, so please let me know in the comments.","11d21272":"# Group KFold","dc916818":"# Method 1: Basic Murcko Scaffold\nBasic Murcko Scaffold extracts scaffold considering the difference in atoms.","944d7167":"## By basic Murcko Scaffold","9ef0c835":"## By BM Scaffold","53fed838":"## The data `scaffold == \"\"` don't have scaffold because they don't have any ring structures.\nFor example, 10 molecules structures are illustrated.","f84a91c0":"# Read csv and extract scaffold(SMILES format)\nSMILES is a string notation used to describe the structure of a compound. (In cheminformatics, SMILES is a more popular format than InChI, as far as I know:))"}}