{"cell_type":{"ef627c13":"code","ebd86038":"code","eb48140d":"code","e8ec4caf":"code","531a1566":"code","41ff1f32":"code","525b5b2c":"code","7651f2d9":"code","982d8ce7":"code","9b90ea64":"code","9fa83292":"code","6c7c714d":"code","00b6756b":"code","1c5a5638":"code","191b71b3":"code","5cc35335":"code","da2dd113":"code","185f98b7":"code","f063987e":"code","d42c966b":"code","162c643d":"code","f5dec2c9":"code","b404a69e":"code","2da6165a":"code","8f567583":"code","2969a80f":"code","b4dd99cf":"code","268002cc":"code","bd9b4c4c":"code","2a5818a2":"code","90cc766a":"code","e110e495":"code","2c6549c8":"code","19102099":"code","a50fae96":"code","38871a66":"code","e9899e36":"code","38cb11fa":"code","19758604":"code","49192b3d":"code","cea0f68c":"code","2d0027d9":"code","0986854d":"code","8e126eeb":"code","50c3d9c8":"code","01404966":"code","a1108b9e":"code","7947b2c1":"code","367cef54":"code","e9aae262":"code","793ce594":"markdown","83886f8e":"markdown","f5ead93a":"markdown","1d693eb8":"markdown","8288cf5a":"markdown"},"source":{"ef627c13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ebd86038":"import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\nfrom skimage import io\nfrom shutil import copyfile\nimport sys\nimport time\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nimport os","eb48140d":"import bq_helper\nfrom bq_helper import BigQueryHelper\nfrom google.cloud import bigquery \n# https:\/\/www.kaggle.com\/sohier\/introduction-to-the-bq-helper-package\nopen_images = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"open_images\")","e8ec4caf":"bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"open_images\")\nbq_assistant.list_tables()","531a1566":"query1 = \"\"\"SELECT\n  *\nFROM\n  `bigquery-public-data.open_images.images`\nLIMIT\n  5000000;\n        \"\"\"\nimages_boxable = open_images.query_to_pandas_safe(query1, max_gb_scanned=10)\n","41ff1f32":"images_boxable.shape","525b5b2c":"images_boxable.head(2)","7651f2d9":"images_boxable['thumbnail_300k_url'].values","982d8ce7":"query2 = \"\"\"SELECT\n  *\nFROM\n  `bigquery-public-data.open_images.annotations_bbox`\nLIMIT\n1000000;\n        \"\"\"\nannotations_bbox = open_images.query_to_pandas_safe(query2, max_gb_scanned=10)\nannotations_bbox.head(2)","9b90ea64":"annotations_bbox['label_name']==\"\/m\/03ssj5\"","9fa83292":"annotations_bbox.shape","6c7c714d":"annotations_bbox.head(2)","00b6756b":"query3 = \"\"\"SELECT\n  *\nFROM\n  `bigquery-public-data.open_images.dict`;\n        \"\"\"\nclass_descriptions = open_images.query_to_pandas_safe(query3, max_gb_scanned=10)\nclass_descriptions.head(2)","1c5a5638":"class_descriptions.shape","191b71b3":"def plot_bbox(img_id):\n    img_url = images_boxable.loc[images_boxable['image_id']==img_id]['thumbnail_300k_url'].values[0]\n    img = io.imread(img_url)\n    height, width, channel = img.shape\n    print(f\"Image: {img.shape}\")\n    bboxs = annotations_bbox[annotations_bbox['image_id']==img_id]\n    for index, row in bboxs.iterrows():\n        XMin = row['x_min']\n        XMax = row['x_max']\n        YMax = row['y_min']\n        YMax = row['y_max']\n        XMin = int(XMin * width)\n        XMax = int(XMax * width)\n        YMin = int(YMin * height)\n        YMax = int(YMax * height)\n        label_name = row['label_name']\n        class_series = class_descriptions[class_descriptions[0]==label_name]\n        class_name = class_series[1].values[0]\n        print(f\"Coordinates: {XMin,YMin}, {XMax, YMax}\")\n        cv2.rectangle(img, (XMin, YMin), (XMax,YMax), (255,0,0), 5)\n        font = cv2.FONT_HERSHEY_SIMPLEX\n        cv2.putText(img, class_name, (XMin, YMin-10), font, 3, (0,255,0), 5)\n    plt.figure(figsize=(15,10))\n    plt.title(\"Image with Bounding Box\")\n    plt.imshow(img)\n    plt.axis(\"off\")\n    plt.show()","5cc35335":"least_objects_img_ids = annotations_bbox[\"image_id\"].value_counts().tail(50).index.values\n\nfor img_id in list(least_objects_img_ids):\n    plot_bbox(img_id)","da2dd113":"bed_pd = class_descriptions[class_descriptions['label_display_name']==\"Bed\"]\nchair_pd = class_descriptions[class_descriptions['label_display_name']==\"Chair\"]\ntable_pd = class_descriptions[class_descriptions['label_display_name']==\"Table\"]","185f98b7":"table_pd","f063987e":"label_name_bed = bed_pd['label_name'].values[0]\nlabel_name_chair = chair_pd['label_name'].values[0]\nlabel_name_table = table_pd['label_name'].values[0]","d42c966b":"label_name_bed","162c643d":"bed_bbox = annotations_bbox[annotations_bbox['label_name']==label_name_bed]\nchair_bbox = annotations_bbox[annotations_bbox['label_name']==label_name_chair]\ntable_bbox = annotations_bbox[annotations_bbox['label_name']==label_name_table]","f5dec2c9":"table_bbox","b404a69e":"print(\"There are %d beds in the dataset\" %(len(bed_bbox)))\nprint(\"There are %d chairs in the dataset\" %(len(chair_bbox)))\nprint(\"There are %d tables in the dataset\" %(len(table_bbox)))","2da6165a":"bed_img_id = bed_bbox['image_id']\nchair_img_id = chair_bbox['image_id']\ntable_img_id = table_bbox['image_id']","8f567583":"n=100\nsubbed_img_id = random.sample(list(bed_img_id), n)\nsubchair_img_id = random.sample(list(chair_img_id), n)\nsubtable_img_id = random.sample(list(table_img_id), n)","2969a80f":"subbed_pd = images_boxable.loc[images_boxable['image_id'].isin(subbed_img_id)]\nsubchair_pd = images_boxable.loc[images_boxable['image_id'].isin(subchair_img_id)]\nsubtable_pd = images_boxable.loc[images_boxable['image_id'].isin(subtable_img_id)]","b4dd99cf":"subbed_pd.head(2)","268002cc":"print(\"Beds:\", subbed_pd.shape, \"Chair:\", subchair_pd.shape, \"Tables:\", subtable_pd.shape)","bd9b4c4c":"subbed_dict = subbed_pd[['image_id', 'thumbnail_300k_url']].set_index('image_id')[\"thumbnail_300k_url\"].to_dict()\nsubchair_dict = subchair_pd[['image_id', 'thumbnail_300k_url']].set_index('image_id')[\"thumbnail_300k_url\"].to_dict()\nsubtable_dict = subtable_pd[['image_id', 'thumbnail_300k_url']].set_index('image_id')[\"thumbnail_300k_url\"].to_dict()","2a5818a2":"subbed_dict","90cc766a":"mappings = [subbed_dict, subchair_dict, subtable_dict]","e110e495":"len(mappings)","2c6549c8":"len(mappings[2])","19102099":"classes = ['Bed','Chair','Table']","a50fae96":"for idx, obj_type in enumerate(classes):\n    n_issues = 0\n    # create the directory\n    out = '.\/'\n    if not os.path.exists(obj_type):\n        os.mkdir(obj_type)\n    for img_id, url in mappings[idx].items():\n        try:\n            img = io.imread(url)\n            saved_path = os.path.join(obj_type, img_id+\".jpg\")\n            io.imsave(saved_path, img)\n        except Exception as e:\n            n_issues += 1\n        print(f\"Images Issues: {n_issues}\")","38871a66":"folder = ['train','test']\nfor i in folder:\n    if not os.path.exists(i):\n            os.mkdir(i)","e9899e36":"train_path = '.\/train'\ntest_path = '.\/test'","38cb11fa":"for i in range(len(classes)):\n    all_imgs = os.listdir(classes[i])\n    all_imgs = [f for f in all_imgs if not f.startswith('.')]\n    random.shuffle(all_imgs)\n    \n    m=10\n    limit = int(m*0.8)  # 80% data for training and 20% for testing\n    \n    train_imgs = all_imgs[:limit]\n    test_imgs = all_imgs[limit:]\n    \n    for j in range(len(train_imgs)):\n        original_path = os.path.join(classes[i], train_imgs[j])\n        new_path = os.path.join(train_path, train_imgs[j])\n        copyfile(original_path, new_path)\n        \n        \n    for j in range(len(test_imgs)):\n        original_path = os.path.join(classes[i], test_imgs[j])\n        new_path = os.path.join(test_path, test_imgs[j])\n        copyfile(original_path, new_path)","19758604":"train_img_count = os.listdir(\".\/train\")\nprint(\"Number of images in train found: \",len(train_img_count))\n\ntest_img_count = os.listdir(\".\/test\")\nprint(\"Number of images in test found: \",len(test_img_count))","49192b3d":"label_names = [label_name_bed, label_name_chair, label_name_table]\n\ntrain_df = pd.DataFrame(columns=['FileName','XMin','XMax','YMin','YMax','ClassName'])\n\n# Find boxes in each image and put them in a dataframe\n\ntrain_imgs = os.listdir(train_path)\ntrain_imgs = [name for name in train_imgs if not name.startswith('.')]\n\nfor i in range(len(train_imgs)):\n    sys.stdout.write(\"Parse train_imgs \" + str(i) + \";Number of boxes:\" + str(len(train_df)) + '\\r')\n    sys.stdout.flush()\n    img_name = train_imgs[i]\n    img_id = img_name[0:16]\n    tmp_df = annotations_bbox[annotations_bbox['image_id']==img_id]\n#     print(tmp_df.head(2))\n    for index, row in tmp_df.iterrows():\n        lableName = row['label_name']\n        for i in range(len(label_names)):\n            if lableName == label_names[i]:\n                train_df = train_df.append({\n                    'FileName': img_name,\n                    'XMin':row['x_min'],\n                    'XMax':row['x_max'],\n                    'YMin':row['y_min'],\n                    'YMax':row['y_max'],\n                    'ClassName': classes[i]},\n                ignore_index=True)\n        \n","cea0f68c":"train_df.head(2)","2d0027d9":"train_df.shape","0986854d":"train_img_ids = train_df[\"FileName\"].head().str.split(\".\").str[0].unique()  #plotting the bounding box\nfor img_id in train_img_ids:\n    plot_bbox(img_id)","8e126eeb":"val_df = pd.DataFrame(columns=['FileName','XMin','XMax','YMin','YMax','ClassName'])\n\ntest_df = pd.DataFrame(columns=['FileName','XMin','XMax','YMin','YMax','ClassName'])\n\n# Find boxes in each image and put them in a dataframe\n\ntest_imgs = os.listdir(test_path)\ntest_imgs = [name for name in test_imgs if not name.startswith('.')]\n\nfor i in range(len(test_imgs)):\n    sys.stdout.write(\"Parse test_imgs \" + str(i) + \";Number of boxes:\" + str(len(test_df)) + '\\r')\n    sys.stdout.flush()\n    img_name = test_imgs[i]\n    img_id = img_name[0:16]\n    tmp_df = annotations_bbox[annotations_bbox['image_id']==img_id]\n#     print(tmp_df.head(2))\n    for index, row in tmp_df.iterrows():\n        lableName = row['label_name']\n        for i in range(len(label_names)):\n            if lableName == label_names[i]:\n                test_df = test_df.append({\n                    'FileName': img_name,\n                    'XMin':row['x_min'],\n                    'XMax':row['x_max'],\n                    'YMin':row['y_min'],\n                    'YMax':row['y_max'],\n                    'ClassName': classes[i]},\n                ignore_index=True)\n        \n","50c3d9c8":"train_df.to_csv('train.csv')\ntest_df.to_csv('test.csv')","01404966":"# write train.csv to annotation.txt\n\ntrain_df = pd.read_csv('train.csv')\n\n# for training\nwith open(\"annotation.txt\", \"w+\") as f:\n    for idx, row in train_df.iterrows():\n        img = cv2.imread('.\/train\/' + row['FileName'])\n        height, width = img.shape[:2]\n        x1 = int(row['XMin'] * width)\n        x2 = int(row['XMax'] * width)\n        y1 = int(row['YMin'] * height)\n        y2 = int(row['YMax'] * height)\n        \n        train_file_path = \".\/train\"\n        fileName= os.path.join(train_file_path, row['FileName'])\n        className = row['ClassName']\n        f.write(fileName + \",\" + str(x1) + ',' + str(y1) + \",\" + str(x2) + \",\" + str(y2) + \",\" + className + \"\\n\")\n            \n","a1108b9e":"# write train.csv to annotation.txt\n\ntest_df = pd.read_csv('test.csv')\n\n# for training\nwith open(\"test_annotation.txt\", \"w+\") as f:\n    for idx, row in test_df.iterrows():\n        img = cv2.imread('.\/test\/' + row['FileName'])\n        height, width = img.shape[:2]\n        x1 = int(row['XMin'] * width)\n        x2 = int(row['XMax'] * width)\n        y1 = int(row['YMin'] * height)\n        y2 = int(row['YMax'] * height)\n        \n        train_file_path = \".\/test\"\n        fileName= os.path.join(train_file_path, row['FileName'])\n        className = row['ClassName']\n        f.write(fileName + \",\" + str(x1) + ',' + str(y1) + \",\" + str(x2) + \",\" + str(y2) + \",\" + className + \"\\n\")\n            \n","7947b2c1":"train_df.shape","367cef54":"test_df.shape","e9aae262":"from tensorflow.python.client import device_lib\nprint(device_lib.list_local_devices())","793ce594":"***Download images in folders(Bed, Chair and Table folder***","83886f8e":"**Dataset Format for Faster=RCNN code**\n\n**(fname_path, xmin, xmax, ymin, ymax, class_name)**","f5ead93a":"save images to train and test directory; so create 2 folder","1d693eb8":"**Working on Few number images**","8288cf5a":"Code for Plotting bounding Box"}}