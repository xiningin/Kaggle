{"cell_type":{"5baae7f4":"code","143b9aec":"code","a3507e22":"code","5e239bda":"code","36d1939b":"code","81b37428":"code","394caaf4":"code","c7f19b5e":"code","b7d9ac56":"code","b34ca585":"code","e6c51ed4":"code","f7e7d28a":"code","2cc56d8a":"code","7c92aaaa":"code","4451ff64":"code","342cdc07":"code","ab03ab69":"code","e322d21a":"code","1fe7b8ec":"code","02482ff2":"code","3345f010":"code","1feefedc":"code","17559516":"code","4df25732":"code","92e7bb37":"code","e982a5f7":"code","2e839e41":"code","9eec14ab":"code","25b08ee8":"code","4748c966":"code","af1dcb7e":"markdown","b02c5b8e":"markdown","03d68d66":"markdown","5f8cf30a":"markdown","e8c7e08d":"markdown","c46fa900":"markdown","49d7ca5c":"markdown"},"source":{"5baae7f4":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression","143b9aec":"data = pd.read_csv('..\/input\/bank-direct-marketing\/bank-full.csv', delimiter=';')","a3507e22":"data","5e239bda":"data.info()","36d1939b":"y = data['y']\nX = data.drop('y', axis=1)","81b37428":"def get_categorical_features(df):\n    return [feature for feature in df.columns if df[feature].dtype == 'object']","394caaf4":"get_categorical_features(X)","c7f19b5e":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}","b7d9ac56":"get_uniques(X, get_categorical_features(X))","b34ca585":"X = X.replace('unknown', np.NaN)","e6c51ed4":"X.isna().sum()","f7e7d28a":"X.drop('poutcome', axis=1, inplace=True)","2cc56d8a":"get_uniques(X, get_categorical_features(X))","7c92aaaa":"binary_features = ['default', 'housing', 'loan']\n\nordinal_features = ['education', 'month']\n\nnominal_features = ['job', 'marital', 'contact']","4451ff64":"def binary_encode(df, columns, positive_label):\n    df = df.copy()\n    for column in columns:\n        df[column] = df[column].apply(lambda x: 1 if x == positive_label else 0)\n    return df","342cdc07":"X = binary_encode(X, binary_features, 'yes')","ab03ab69":"def ordinal_encode(df, columns, orderings):\n    df = df.copy()\n    for column, ordering in zip(columns, orderings):\n        df[column] = df[column].apply(lambda x: ordering.index(x) if str(x) != 'nan' else x)\n    return df","e322d21a":"education_ordering = ['primary', 'secondary', 'tertiary']\n\nmonth_ordering = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n\norderings = [education_ordering, month_ordering]\n\n\nX = ordinal_encode(X, ordinal_features, orderings)","1fe7b8ec":"def onehot_encode(df, columns):\n    df = df.copy()\n    for column in columns:\n        dummies = pd.get_dummies(df[column])\n        df = pd.concat([df, dummies], axis=1)\n        df.drop(column, axis=1, inplace=True)\n    return df","02482ff2":"X = onehot_encode(X, nominal_features)","3345f010":"X","1feefedc":"X.isna().sum()","17559516":"X['education'] = X['education'].fillna(X['education'].median())","4df25732":"scaler = StandardScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","92e7bb37":"label_encoder = LabelEncoder()\n\ny = label_encoder.fit_transform(y)","e982a5f7":"X","2e839e41":"y","9eec14ab":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","25b08ee8":"model = LogisticRegression()\n\nmodel.fit(X_train, y_train)","4748c966":"model_acc = model.score(X_test, y_test)\nprint(\"Model Accuracy:\", model_acc)","af1dcb7e":"## Encoding","b02c5b8e":"# Training","03d68d66":"# Getting Started","5f8cf30a":"## Scaling","e8c7e08d":"## Missing Values","c46fa900":"# Data Every Day\n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.\n\n***\n\nCheck it out!\nhttps:\/\/youtu.be\/_IJ99hSxny8","49d7ca5c":"# Preprocessing"}}