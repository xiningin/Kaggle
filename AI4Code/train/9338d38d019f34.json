{"cell_type":{"a65b5c57":"code","a8e21004":"code","33e920f1":"code","86dd0d77":"code","0c3b96dd":"code","80dad5d0":"code","c5ee6c8c":"code","cfd505bf":"code","05be175a":"code","e46a5d62":"code","ff32cab1":"code","bf8fcd1e":"code","f194c4c2":"code","ffdf2a09":"code","c7a4c9b6":"code","b31105d9":"code","b9fe19e7":"code","aa81b1ad":"code","f5ed76b9":"code","60c02d73":"code","1bfc28e5":"code","288c9c65":"code","f1069fc4":"code","b6c351b7":"code","d4ee6ad9":"code","f4695351":"code","51b17500":"code","2de8bde2":"code","8990a8bf":"code","75f44489":"code","efd0ad3b":"code","cdafc4f7":"code","1288f45c":"code","682921d4":"code","19dfb2d7":"code","b05cf9b9":"code","b93f104a":"code","44f1aa70":"code","3a04079b":"code","7536e5ff":"code","4b8f95a3":"code","292bfc09":"code","2454cdb7":"code","cfd29527":"code","65b8f942":"code","491312e7":"code","4e8a62e6":"code","48158986":"code","ca0cd2a6":"code","3f9e52da":"code","9195b389":"code","0edab7cf":"code","a286169a":"code","3fba3086":"code","5948c78c":"code","bbdf9dd9":"code","bb8c72b5":"code","13673124":"code","5626a287":"code","6f6a622c":"code","523904a3":"code","01562a92":"code","695875eb":"code","3a676aef":"code","2efbd322":"code","4fdffa01":"code","d6196c5a":"code","7e3a2f00":"code","b139f4cf":"code","40a5a7d1":"code","d76fe7cc":"code","826dc0e5":"code","0ce8384c":"markdown","4c4c6acd":"markdown","3e72596c":"markdown","de96b29f":"markdown","97a7f5ec":"markdown","b5822e84":"markdown","d7985ba7":"markdown","dbaf82ba":"markdown","af77c953":"markdown","1c06ceb2":"markdown","1e337477":"markdown","25c6a2f9":"markdown","ffb2caaf":"markdown","634dab8f":"markdown","0511a73f":"markdown","863f2120":"markdown","c88b5e97":"markdown","02f9bde1":"markdown","575f999e":"markdown","99773871":"markdown","ef421ecb":"markdown","6ba915bb":"markdown","f07a576a":"markdown","23eeba4e":"markdown","c16efe97":"markdown","b4386c92":"markdown","2e74d2bd":"markdown","4a350465":"markdown","2dc951d7":"markdown","7d488e18":"markdown","550591cc":"markdown","00f9858d":"markdown","acb4a350":"markdown","c9c6c047":"markdown","cb06ff79":"markdown","33abfb69":"markdown","c9f18e1f":"markdown","7cc7e868":"markdown","d1715f2a":"markdown","b0e51e70":"markdown","9d3acbdb":"markdown","e17d6e3b":"markdown","bd60f1a4":"markdown","f9299a91":"markdown","f4c200b2":"markdown","728a3189":"markdown","75794a94":"markdown","1eefd8da":"markdown","538c24d6":"markdown","24c3c480":"markdown","b21e4a2f":"markdown","d95e3d9e":"markdown","0010d453":"markdown","be44a345":"markdown","a8c4afea":"markdown","d8fd2b35":"markdown","9b8d0615":"markdown","bffd20e7":"markdown","83905890":"markdown","f7cf0777":"markdown","4c80e66b":"markdown","788c9f91":"markdown","ca64560f":"markdown","00fc53ee":"markdown","44d6a942":"markdown","d008169e":"markdown","b14a3866":"markdown","748d68cc":"markdown","1575f464":"markdown","3d59d7b8":"markdown","b8f2b47a":"markdown","dafae5e1":"markdown","b753138f":"markdown","164d8036":"markdown","25563b95":"markdown","60bdffc7":"markdown","7459a959":"markdown","9ae437ec":"markdown","6b300dc2":"markdown","87afacc8":"markdown","844ebcbc":"markdown","4a24c925":"markdown","5ebd4194":"markdown","c8c488cf":"markdown","bcc221a3":"markdown","12c8b17d":"markdown","d3eaaa22":"markdown","60de3501":"markdown","739803aa":"markdown","a35185ab":"markdown","f2dc20bb":"markdown","5914b4de":"markdown","703cee94":"markdown","e46850f6":"markdown","b21f1195":"markdown","fbfa41e7":"markdown","5340bac6":"markdown","58bc4cd4":"markdown","ed439344":"markdown","30fab372":"markdown","7622f164":"markdown","65dc5ab5":"markdown","508af1e7":"markdown","4f9fa37e":"markdown"},"source":{"a65b5c57":"import numpy as np                                                 # Implemennts milti-dimensional array and matrices\nimport pandas as pd                                                # For data manipulation and analysis\nimport pandas_profiling\nimport matplotlib.pyplot as plt                                    # Plotting library for Python programming language and it's numerical mathematics extension NumPy\nimport seaborn as sns                                              # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\n\nfrom subprocess import check_output","a8e21004":" # Importing dataset using pd.read_csv\nmatch_data = pd.read_csv(\"..\/input\/ipl\/matches.csv\")\ndelivery_data = pd.read_csv(\"..\/input\/ipl\/deliveries.csv\")","33e920f1":"match_data.shape                                           # This will print the number of rows and comlumns of the Data Frame","86dd0d77":"delivery_data.shape","0c3b96dd":"match_data.columns                                         # This will print the names of all columns.","80dad5d0":"delivery_data.columns                                      # This will print the names of all columns.","c5ee6c8c":"match_data.head(2)","cfd505bf":"match_data.tail(2)","05be175a":"delivery_data.head(6)","e46a5d62":"delivery_data.tail(3)","ff32cab1":"match_data.info()","bf8fcd1e":"match_data.isnull().sum()","f194c4c2":"delivery_data.info()","ffdf2a09":"profile = pandas_profiling.ProfileReport(match_data)\nprofile.to_file(output_file=\"matchdata_before_preprocessing.html\")","c7a4c9b6":"profile = pandas_profiling.ProfileReport(delivery_data)\nprofile.to_file(output_file=\"delivery_data_before_preprocessing.html\")","b31105d9":"match_data.drop([\"umpire3\"],axis=1,inplace=True)      #drop umpire3 column and replace null values\ndelivery_data.fillna(\"playing\",inplace=True)          #player_dismissed , dismissal_kind, fielder-in these column have null values because player is playing on these balls so we replce these null value with playing keyword.","b9fe19e7":"match_data.venue[match_data.city.isnull()]","aa81b1ad":"match_data.city.fillna(\"Dubai\",inplace=True)          #repalce null values in city","f5ed76b9":"match_data.date = pd.to_datetime(match_data.date)    #Convert Date in datetime object.","60c02d73":"type(match_data.date[2])","1bfc28e5":"match_data.fillna({\"winner\":\"no result\",\"player_of_match\":\"no result\"},inplace=True)","288c9c65":"match_data.umpire1.fillna(match_data.umpire1.mode()[0],inplace=True)             #repalce null values with mode","f1069fc4":"match_data.umpire2.fillna(match_data.umpire2.mode()[0],inplace=True)              #repalce null values with mode","b6c351b7":"match_data.info()","d4ee6ad9":"match_data.team1.unique()","f4695351":"iplmatches = match_data.copy()\nipldelivery =delivery_data.copy()","51b17500":"iplmatches.replace(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n       'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants'],\n        ['SRH','MI','GL','RPS','RCB','KKR','DD','KXIP','CSK','RR','DC','KTK','PW','RPS'],inplace=True)","2de8bde2":"ipldelivery.replace(['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n       'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n       'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n       'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n       'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants'],\n        ['SRH','MI','GL','RPS','RCB','KKR','DD','KXIP','CSK','RR','DC','KTK','PW','RPS'],inplace=True)","8990a8bf":"iplmatches.tail(3)","75f44489":"profile = pandas_profiling.ProfileReport(iplmatches)\nprofile.to_file(output_file=\"iplmatches_after_preprocessing.html\")","efd0ad3b":"profile = pandas_profiling.ProfileReport(ipldelivery)\nprofile.to_file(output_file=\"ipldelivery_after_preprocessing.html\")","cdafc4f7":"iplmatches.shape[0]","1288f45c":"df_total_match_played_by_teams = pd.DataFrame()\ndf_total_match_played_by_teams[\"team\"] = pd.concat([iplmatches[\"team1\"], iplmatches[\"team2\"]], ignore_index=True, sort=False)\ndf_total_match_played_by_teams.head()","682921d4":"df_total_match_played_by_teams.groupby(\"team\")[\"team\"].count()","19dfb2d7":"sns.countplot(x=\"team\", data=df_total_match_played_by_teams).set_title('Total match played by each IPL team.')","b05cf9b9":"iplmatches.groupby([\"season\"])[\"id\"].count().sort_values(ascending=False)","b93f104a":"plt.subplots(figsize=(10,6))\nsns.countplot(x='season',data=iplmatches,palette=sns.color_palette('Paired'))  \nplt.title(\"Number of IPL Matches Played in Each Season\")\nplt.show()","44f1aa70":"iplmatches.city.unique()","3a04079b":"iplmatches.replace(\"Bangalore\",\"Bengaluru\",inplace=True)","7536e5ff":"iplmatches.city.unique()","4b8f95a3":"iplmatches.groupby([\"city\"])[\"id\"].count().sort_values(ascending=True).plot(kind='barh',figsize=(8,10))\nplt.xlabel(\"Match Count\")\nplt.title(\"Cities and IPL Matches\")","292bfc09":"iplmatches.groupby([\"city\"])[\"id\"].count().sort_values(ascending=False)     ","2454cdb7":"iplmatches.groupby(['winner'])['id'].count().sort_values(ascending=False)","cfd29527":"sns.countplot(x='winner', data=iplmatches).set_title('Most winning team of IPL')","65b8f942":"iplmatches.groupby(['player_of_match'])['player_of_match'].count().sort_values(ascending=False)","491312e7":"df=iplmatches.iloc[[iplmatches['win_by_runs'].idxmax()]]\ndf[['season','city','team1','team2','winner','win_by_runs']]","4e8a62e6":"df=iplmatches.iloc[[iplmatches['win_by_wickets'].idxmax()]]\ndf[['season','city','team1','team2','winner','win_by_wickets']]","48158986":"(iplmatches.groupby(['toss_decision'])[\"toss_decision\"].count()\/iplmatches.toss_decision.count()*100).plot(kind=\"bar\")","ca0cd2a6":"plt.subplots(figsize=(10,6))\nsns.countplot(x='season',hue='toss_decision',data=iplmatches)\nplt.title(\"Toss decision taken across the IPL season\")\nplt.show()","3f9e52da":"plt.subplots(figsize=(10,6))\nax=iplmatches['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('Paired',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.title(\"Most Toss Winner of IPL\")\nplt.show()","9195b389":"print('Winners By Years')\nfor i in range(2008,2018):\n    df=((iplmatches[iplmatches['season']==i]).iloc[-1])\n    print(df[[1,10]].values)","0edab7cf":"matchesdata = iplmatches.copy()","a286169a":"matchesdata.groupby(\"team1\")['id'].count()     #GL=14,RPS=15,KTK=7,PW=20    mean=53 , median=62","3fba3086":"teams = ['GL','RPS','KTK','PW']\nfor team in teams:\n     matchesdata.drop(matchesdata[matchesdata.team1.str.contains(team)]['id'].index,axis=0,inplace=True)","5948c78c":"teams = ['GL','RPS','KTK','PW']\nfor team in teams:\n     matchesdata.drop(matchesdata[matchesdata.team2.str.contains(team)]['id'].index,axis=0,inplace=True)","bbdf9dd9":"matchesdata[matchesdata.toss_winner==matchesdata.team1][matchesdata.toss_decision=='bat'].groupby('team1')['toss_decision'].count().plot(kind='bar', figsize=(15, 7), color='orange')\nmatchesdata[matchesdata.toss_winner==matchesdata.team1][matchesdata.toss_decision=='bat'][matchesdata.winner==matchesdata.team1].groupby('team1')['toss_decision'].count().plot(kind='bar', figsize=(15, 7), color='grey')\n\nplt.xlabel('Teams')\nplt.ylabel('Count')\nplt.title('Stacked Bar Chart showing the Toss Decision as Bat and Winning the Match')\nplt.legend(labels=('Total Toss Winner with Bat', 'TossWin_Choose_Bat_Wining_Match'))","bb8c72b5":"matchesdata[matchesdata.toss_winner==matchesdata.team2][matchesdata.toss_decision=='field'].groupby('team2')['toss_decision'].count().plot(kind='bar', figsize=(15, 7), color='orange')\nmatchesdata[matchesdata.toss_winner==matchesdata.team2][matchesdata.toss_decision=='field'][matchesdata.winner==matchesdata.team2].groupby('team2')['toss_decision'].count().plot(kind='bar', figsize=(15, 7), color='gray', fontsize=13)\n\nplt.xlabel('Teams')\nplt.ylabel('Count')\nplt.title('Stacked Bar Chart showing the Toss Decision as Field and Winning the Match')\nplt.legend(labels=('Total Toss Winner with Field', 'TossWin_Choose_Field_Wining_Match'))","13673124":"df=iplmatches[iplmatches['toss_winner']==iplmatches['winner']]\nslices=[len(df),(696-len(df))]\nlabels=['yes','no']\nplt.pie(slices,labels=labels,startangle=90,shadow=True,explode=(0,0.08),autopct='%1.1f%%',colors=['b','yellow'])\nfig = plt.gcf()\nfig.set_size_inches(6,6)\nplt.title(\"Toss Win vs Match Win\",fontsize=20)\nplt.show()","5626a287":"plt.subplots(figsize=(8,15))\niplmatches.groupby('venue')['venue'].count().sort_values(ascending=True).plot(kind='barh',color=sns.color_palette('inferno',40))\nplt.xlabel('Count')\nplt.ylabel('Grounds')\nplt.show() ","6f6a622c":"plt.figure(figsize=(10,5))\numpire=pd.concat([iplmatches['umpire1'],iplmatches['umpire2']]).value_counts().sort_values(ascending=False)\numpire=umpire[:7].plot(kind='barh',color=sns.color_palette('colorblind',50))\nplt.title('Favorite umpire')\nplt.xlabel('Count', fontsize=12)\nplt.ylabel('Name of the Umpire', fontsize=15)\nplt.show()","523904a3":"x, y = 2008, 2018\nwhile x < y:\n    wins_percity = matchesdata[matchesdata['season'] == x].groupby(['winner', 'city'])['id'].count().unstack()\n    plot = wins_percity.plot(kind='bar', stacked=True, title=\"Team wins in different cities\\nSeason \"+str(x), figsize=(7, 5))\n    sns.set_palette(\"Paired\", len(matchesdata['city'].unique()))\n    plot.set_xlabel(\"Teams\")\n    plot.set_ylabel(\"No of wins\")\n    plot.legend(loc='best', prop={'size':8})\n    x+=1","01562a92":"batsmen = iplmatches[['id','season']].merge(ipldelivery, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\n#merging the matches and delivery dataframe by referencing the id and match_id columns respectively\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\nseason.set_index('season').plot(marker='o',color=\"b\")\nplt.gcf().set_size_inches(10,6)\nplt.title('Total Runs Across the Seasons')\nplt.show()","695875eb":"Season_boundaries=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\na=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(a,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\nSeason_boundaries.set_index('season')[['6\"s','4\"s']].plot(marker='o',color=(\"r\",\"b\"))\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","3a676aef":"batsman_runsperseason = batsmen.groupby(['season', 'batting_team', 'batsman'])['batsman_runs'].sum().reset_index()\nbatsman_runsperseason = batsman_runsperseason.groupby(['season', 'batsman'])['batsman_runs'].sum().unstack().T\nbatsman_runsperseason['Total'] = batsman_runsperseason.sum(axis=1) #add total column to find batsman with the highest runs\nbatsman_runsperseason = batsman_runsperseason.sort_values(by = 'Total', ascending = False).drop('Total', 1)\nax = batsman_runsperseason[:5].T.plot(figsize=(10,8),title=\"Top 5 Batsman Performance\")\n","2efbd322":"ipldelivery[\"wickets\"] = (ipldelivery.player_dismissed != \"playing\") & (ipldelivery.player_dismissed != \"retired hurt\")","4fdffa01":"ipldelivery.groupby(['bowler'])['wickets'].sum().sort_values(ascending = False)[:10]","d6196c5a":"bowlers_wickets = ipldelivery.groupby(['bowler'])['wickets'].sum()\nbowlers_wickets.sort_values(ascending = False, inplace = True)\nbowlers_wickets[:10].plot(x='bowler', kind = 'bar', colormap = 'summer',figsize=(10,6))\nplt.title(\"Top 10 Bowlers\")\nplt.ylabel(\"Total Wickets in All Season\")","7e3a2f00":"def compare_teams(team1,team2):\n    mt1=iplmatches[((iplmatches['team1']==team1)|(iplmatches['team2']==team1))&((iplmatches['team1']==team2)|(iplmatches['team2']==team2))]\n    sns.countplot(x='season', hue='winner',data=mt1,palette=(\"yellow\",\"blue\"))\n    sns.color_palette(\"ch:3.5,-.2,dark=.3\")\n    plt.xticks(rotation='vertical')\n    leg = plt.legend( loc = 'upper center')\n    fig=plt.gcf()\n    fig.set_size_inches(10,6)\n    plt.title(\"Compare Performance of \"+team1 +\" and \"+team2)\n    plt.show()","b139f4cf":"compare_teams(\"CSK\",\"MI\")","40a5a7d1":"compare_teams(\"MI\",\"KKR\")","d76fe7cc":"compare_teams(\"CSK\",\"KKR\")","826dc0e5":"finals=matchesdata.drop_duplicates(subset=['season'],keep='last')\nfinals=finals[['id','season','city','team1','team2','toss_winner','toss_decision','winner']]\nmost_finals=pd.concat([finals['team1'],finals['team2']]).value_counts().reset_index()\nmost_finals.rename({'index':'team',0:'count'},axis=1,inplace=True)\nxyz=finals['winner'].value_counts().reset_index()\nmost_finals=most_finals.merge(xyz,left_on='team',right_on='index',how='outer')\nmost_finals=most_finals.replace(np.NaN,0)\nmost_finals.drop('index',axis=1,inplace=True)\nmost_finals.set_index('team',inplace=True)\nmost_finals.rename({'count':'finals_played','winner':'won_count'},inplace=True,axis=1)\nmost_finals.plot.bar(width=0.8,color=(\"orange\",\"b\"))\nplt.gcf().set_size_inches(10,6)\nplt.title(\"All Finals Played and Won Counts \")\nplt.show()","0ce8384c":"<a id=section409><\/a>","4c4c6acd":"- From above plot we can say __Mumbai__ is most favorable city of IPL matches followed by __Bengaluru__ and __Kolkata__.","3e72596c":" -  umpire3 Column has maximum null values         ","de96b29f":"<a id=section0><\/a>","97a7f5ec":"<a id=section301><\/a>","b5822e84":"- Change Bangalore as Bengaluru as both are names of same city.","d7985ba7":"<a id=section302><\/a>","dbaf82ba":"<a id=section401><\/a>","af77c953":"### 4.5 Is Toss Winner Also the Match Winner ?","1c06ceb2":"- From looking above all plots we can say there is a home ground factor which also works as most of the teams win more matches at their home ground.","1e337477":"#### Importing the Dataset","25c6a2f9":"- The most important inference drawn from all this analysis is, we get to know what are the\u00a0features on which winning IPL is highly positively and negatively corelated with.\n- Selecting player who perform consistently is important for any IPL team to becomes a true champion. \n- Team selection should be more important as team should be a balanced as with batsman, bowlers and all rounders.\n- Number of Man of the Match titles are based on individual performances and does not necessarily help to perform best as a team Therefore team needs to give balanced weightage to players.\n- Toss winning is not guarantee of match winning. There is equal chances.\n- IPL season played out side INDIA has low total runs. \n- CSK has high changes to be in final in next season.\n\n- Except these are are lot of other factors which also works which I will upload in next time with more deep EDA\n\n- __If you like the notebook, Please Upvote as it will keep me motivated in doing great things ahead. Thanks!!__\n","ffb2caaf":"- In __Season 2013__ maximum IPL matches played which is __76__.\n- Median matches = 60 per season","634dab8f":"### 4.8 Analysis of Home ground advantage for teams ?","0511a73f":"- Now Replacing the Team Names with their abbreviations as it is easy to work with them.","863f2120":"#### 4.4.2 Win By Runs","c88b5e97":"<a id=section410><\/a>","02f9bde1":" The dataset consists of the information about :\n - There are 21 columns in __Deliveries Data__ and 18 columns in __Match Data__.\n - This dataset contain all Indian Premier League Cricket matches between 2008 and 2017.\n - This is the ball by ball data of all the IPL cricket matches till season 10.\n - The dataset contains 2 files: deliveries.csv and matches.csv.\n - __matches.csv__ contains details related to the match such as location, contesting teams, umpires, results, etc.\n - __deliveries.csv__ is the ball-by-ball data of all the IPL matches including data of the batting team, batsman, bowler, non-       striker, runs scored, etc.","575f999e":"<a id=section4><\/a>","99773871":"delivery_data has __150460 rows__ and __21 columns.__","ef421ecb":" #### 4.4.6 Winner Per Season of IPL till 2017","6ba915bb":"- Let's see the plot between __Toss Decision as Field__ and __Winning the Match__ ","f07a576a":"- Here we will drop some teams as they played verly less matches so they affecting some results.We drop GL=14,RPS=15,KTK=7,PW=20 as these have less matches then mean and median.","23eeba4e":"- In  9 seasons of IPL total 696 matches are played.","c16efe97":"<a id=section304><\/a>","b4386c92":"### 4.10 Sixes and Fours Across the Season","2e74d2bd":"<a id=section408><\/a>","4a350465":"- In the upcoming sections we will first __understand our dataset__ using various pandas functionalities.\n- Then with the help of __pandas profiling__ we will find which columns of our dataset need preprocessing.\n- In __preprocessing__ we will deal with erronous and missing values of columns. \n- then Again we will do __pandas profiling__ to see how preprocessing have transformed our dataset.","2dc951d7":"### 4.1 Form 2008 to 2017,total match played by all teams and individual count ?","7d488e18":"|1.Match Data Columns |           Desc.           |   2.Deliveries Data Columns__ |  Desc.                 |\n|---------------------|:--------------------------:|:-------------------|--------------------------------:|\n| Column Name         | Description              | Column Name         | Description                      |\n| ------------------- |--------------------------|---------------------|-----------------------------------| \n|   id                | ID of Rows               | match_id            | ID to relate with match data|\n|   season            | Year of IPL Play         | inning              | Tells if the first set of batting was going on\/second|\n|   city              | City Where match played  | batting_team        | The team name which is currently batting|             \n|   date              | Date of Match Day        | bowling_team        | The team name which is currently bowling.|\n|   team1             | Team One                 | over                | Describe the current over number.|\n|   team2             | Team Two                 | ball                | Describe the current bowl no of the current over.|\n|   toss_winner       | Team Who Win the toss    | batsman             | Name of the batsman on striking end. |\n|   toss_decision     | Toss Decision by Captain | non_striker         | Name of the batsman on non-striking end.|\n|   result            | Result of Match          | bowler              | Name of played who bowl to batsman |\n|   dl_applied        | Duckworth Lewis Method   | is_super_over       | When match goes to tie then super over for decision|\n|   winner            | Winneing Team            | wide_runs           | Runs by Wide bowl by bowler |\n|   win_by_runs       | Win By Runs              | bye_runs            | bye is a type of extra run scored by the batting team|\n|   win_by_wickets    | Win By Wickets           | legbye_runs         | Run by legbye                     |\n|   player_of_match   | Player of Match          | noball_runs         | Run by noball                      |\n|   venue             | Stadium Where match played| penalty_runs       | a type of extra run                       |\n|   umpire1           | First Umpire              | batsman_runs       | run make by batsman                        |\n|   umpire2           | Second Umpire             | extra_runs         | Extra runs given by bowling team by mistakes|\n|   umpire3           | Third Umpire              |total_runs          | Total Runs                       |\n|                     |                           |player_dismissed    | Player Out                       |\n|                     |                           |dismissal_kind      | Type of Out              |\n|                     |                           |fielder             | Player who field         |\n|                     |                           |                    |                          |","550591cc":"### 4.6 Most played Grounds of IPL ?","00f9858d":"- __M Chinnaswamy Stadium__ is favorite ground of IPL where most matches are played followed by __Eden Gardens__.","acb4a350":"## 3.4 Post Pandas Profiling","c9c6c047":"- **CH Gayle** won most awards of __\"Man of the Match\"__ 19 times.","cb06ff79":"- __MI__ beat __DD__ with the highest run difference of __146__ in season 2017.","33abfb69":"- Column 18,19,20 have null values becouse player is playing in thoes ball delivery so these data points are important but we need to handle these null values. We will fix these in coming sections when needed.","c9f18e1f":"<a id=section405><\/a>","7cc7e868":"<a id=section403><\/a>","d1715f2a":"- __Mumbai__ hosted total __85__ IPL matches. ","b0e51e70":"## Table of Contents\n0. [Intoduction](#section0)<br>\n1. [Problem Statement](#section1)<br>\n2. [Data Loading and Description](#section2)\n3. [Data Profiling](#section3)\n    - 3.1 [Understanding the Dataset](#section301)<br\/>\n    - 3.2 [Pre Profiling](#section302)<br\/>\n    - 3.3 [Preprocessing](#section303)<br\/>\n    - 3.4 [Post Profiling](#section304)<br\/>\n4. [Questions](#section4)\n    - 4.1 [Form 2008 to 2017,total match played by all teams and individual count ?](#section401)<br\/>\n    - 4.2 [Most favorable city of IPL matches of all time ?](#section402)<br\/>\n    - 4.3 [Most match winning team of IPL till 2017 ?](#section403)<br\/>\n    - 4.4 [Explore several facts of IPL ?](#section404)<br\/>\n    - 4.5 [Is Toss Winner Also the Match Winner ?](#section405)<br\/>\n    - 4.6 [Most played Grounds of IPL ?](#section406)<br\/>\n    - 4.7 [Most Favourite Umpires of IPL ?](#section407)<br\/>\n    - 4.8 [ Analysis of Home ground advantage for teams ?](#section408)<br\/>\n    - 4.9 [Total Runs Across the Seasons](#section409)<br\/>\n    - 4.10 [Sixes and Fours Across the Season](#section410)<br\/>\n    - 4.11 [Plot the performance of top 5 batsmen & bowlers over seasons](#section411)<br\/>\n    - 4.12 [Comparison of teams for knowing bettor performer of IPL.](#section412)<br\/>\n    - 4.13 [Analysis of All Finals team wise vs wins across all seasons.](#section413)<br\/>\n5. [Conclusions](#section5)<br\/>  ","9d3acbdb":"Now we have preprocessed the data, now the dataset doesnot contain missing values.<br\/>\nIn after preprocessing reports, observations:\n- In the Dataset info, Total __Missing(%)__ = __0.0%__ \n- Number of __variables__ = __17__ and __21__","e17d6e3b":"### 4.11 Plot the performance of top 5 batsmen  & bowlers over seasons","bd60f1a4":"- Let's see, In which season maximum matches played ","f9299a91":"- Let's see the plot between __Toss Decision as Bat__ and __Winning the Match__ ","f4c200b2":"### Introduction\n  <p>        Cricket is a bat-and-ball game played between two teams of eleven players each on a cricket field, at the centre of which is a rectangular 20-metre (22-yard) pitch with a target at each end called the wicket (a set of three wooden stumps upon which two bails sit). Each phase of play is called an innings, during which one team bats, attempting to score as many runs as possible, whilst their opponents bowl and field, attempting to minimise the number of runs scored. When each innings ends, the teams usually swap roles for the next innings (i.e. the team that previously batted will bowl\/field, and vice versa). The teams each bat for one or two innings, depending on the type of match. The winning team is the one that scores the most runs, including any extras gained (except when the result is not a win\/loss result). \n<br> Source: <a>https:\/\/en.wikipedia.org\/wiki\/Cricket<\/a> <\/p> ","728a3189":"- __HDPK Dharmasena__ and __S Ravi__ are Most Favourite Umpires of IPL.","75794a94":"### 3.3 Preprocessing","1eefd8da":"- From above plot we can say winning toss is not the guarantee of winning match.","538c24d6":"### 4.13 Analysis of All Finals team wise vs wins across all seasons.","24c3c480":"- __2013__ season has highest run across all season and __2009__ season has minimum. There is a huge increase and decrease as number of matches are also not equal in all season.","b21e4a2f":"- The above plot show how the toss decision taken across the IPL season.","d95e3d9e":"- Overall __MI__ has a __great performance__ when compare to top 3 teams of IPL followed by CSK as CSK is out of IPL for 2 Season.","0010d453":"#### Background Information\n   <img src=\"https:\/\/i1.wp.com\/slts.in\/wp-content\/uploads\/ipl-2020-team-list.jpg?w=768&ssl=1\"  width=\"600\" height=\"360\" \/>\n   \n   - The __Indian Premier League__ is a professional __Twenty20 cricket__ league in India contested during March or April and May of every year by eight teams representing eight different cities in India. The league was founded by the __Board of Control for Cricket in India__ in 2008.","be44a345":"- From above plot we can say that teams take decision to choose around 60% field and 40% bat option.","a8c4afea":"- Till 2017 ,__CSK__ won __2 IPL Seasons__ and __MI__ also won __3 IPL seasons__ follwed by __KKR__ with __2 IPL season__ wins.\n- In history of 9 season only 3 Teams are dominating more then others ,around 70% chances the winner should be from these 3 teams. ","d8fd2b35":"### 4.7 Most Favourite Umpires of IPL ?","9b8d0615":"#### 4.4.7 Analysis between Toss Decision and Choose bat or field as option and Winning the match","bffd20e7":"<a id=section411><\/a>","83905890":"### 2. Data Loading and Description\n\n\n<img src=\"https:\/\/resources.platform.iplt20.com\/IPL\/photo\/2018\/05\/13\/445a4aab-3450-48d6-a0c1-5b56a78ddef5\/logo.jpg\"  width=\"240\" height=\"360\" \/>","f7cf0777":"<a id=section3><\/a>","4c80e66b":"I will keep updating the notebook as and when I get a new question to be analysed.\n\nThank You For Having A Look At This Notebook\n\n__Please Upvote if this was Helpful__","788c9f91":"#### Top Batsmen","ca64560f":"<a id=section303><\/a>","00fc53ee":"<a id=section413><\/a>","44d6a942":"<img src = 'https:\/\/resources.platform.iplt20.com\/IPL\/photo\/2018\/05\/13\/445a4aab-3450-48d6-a0c1-5b56a78ddef5\/logo.jpg' width=\"240\" height=\"360\">\n\n# Now play Cricket with data (IPL Cricket Data)","d008169e":"- By pandas profiling, an __interactive HTML report__ gets generated which contins all the information about the columns of the dataset, like the __counts and type__ of each _column_. Detailed information about each column, __coorelation between different columns__ and a sample of dataset.<br\/>\n- It gives us __visual interpretation__ of each column in the data.\n- _Spread of the data_ can be better understood by the distribution plot. \n- _Grannular level_ analysis of each column.","b14a3866":"#### 4.4.4 Toss Decisions","748d68cc":"#### 4.4.5 Most Toss Winners","1575f464":"To gain insights from data we must look into each aspect of it very carefully. We will start with observing few rows and columns of data both from the starting and from the end","3d59d7b8":"<a id=section406><\/a>","b8f2b47a":"-  From Above plot we can say __KKR has highest match winning after toss winning and choose fielding first__\n  in the end followed by RCB and MI. \n-  __DC__ has __lowest winning after winning toss and coosing field__. In other words we can say DC has lost maximum matches in they won toss and choose field first. The one reson is that DC play less match as it terminated from IPL and the this team introduced as SRH with new owner.","dafae5e1":"### 4. Questions","b753138f":"- CSK has played 6 IPL finals but could win only 2 followed by MI with 3. KKR has won 2 titles. Sadly RCB have never won a final even with 3 apperances in final.\n\n- From this we can say CSk has high changes to be in final in next season.\n- DD has not reached yet in any final match.","164d8036":"- __KKR__ conquered __GL__ with the highest 10 wins by wickets.","25563b95":"<a id=section404><\/a>","60bdffc7":"### 3.1 Understanding the Dataset","7459a959":"- __Let's see the toss decision across IPL season__: -","9ae437ec":"#### 4.4.3 Wins By Wickets","6b300dc2":"- __MI__ is most toss winner followed by __KKR__.","87afacc8":"#### Importing packages     ","844ebcbc":"<a id=section5><\/a>","4a24c925":"1. - __MI__ has played maximum __157__ matches in 9 IPL seasons followedby RCB and KKR & KXIP with 152 and 148 respectively.\n- __KTK__ has played minimum __14__ matches.","5ebd4194":"- Predict the winning chances of any team  based on IPL past data and it's Visualizations and Exploration.","c8c488cf":"- __SL Malinga__ is the highest wicket(170)  taken in IPL so far.","bcc221a3":"### 4.3. Most match winning team of IPL till 2017 ?","12c8b17d":"- Dealing with missing values In Matches Data<br\/>\n    - Drop __umpire3__ as it has 636  missing values.\n    - Replacing missing values of __city__ with Dubai as per venue details as these matches played at Dubai.\n    - Convert Date in datetime object.\n    - Replacing the Team Names with their abbreviations as it is easy to recall and plot.\n \n\n- Dealing with missing values In Delivery Data<br\/>\n    - player_dismissed , dismissal_kind, fielder  these column have above 95% null values","d3eaaa22":"<a id=section402><\/a>","60de3501":"#### 4.4.1 Man of the Match","739803aa":"### 3.2 Pre Profiling","a35185ab":"### 4.2 Most favorable city of IPL matches of all time ?","f2dc20bb":"- __MI__ is most match winnig team of IPL with __92__ match wins.\n- And __KTK__ won least matches , only __6__ matches.","5914b4de":"match_data has __636 rows__ and __18 columns.__","703cee94":"#### Top Bowler","e46850f6":"### 1. Problem Statement","b21f1195":"<a id=section412><\/a>","fbfa41e7":"<a id=section407><\/a>","5340bac6":"## 5. Conclusion ","58bc4cd4":" - Here __umpire3__ has maximum null values,we will drop this column in next section after profiling And also look into othe null values.  ","ed439344":"## 3. Data Profiling","30fab372":"### 4.9 Total Runs Across the Seasons","7622f164":"- V.Kohli show a steady improvement across season and RG Sharma and G Gambhir show a slump","65dc5ab5":"-  From Above plot we can say __CSK has higher Toss winning and choose as batting first and winning the match__ in the end followed by MI. \n-  __KXIP__ has __lowest winning after winning toss and coosing bat__. In other words we can say KXIP has lost maximum matches in they won toss and choose bat first.","508af1e7":"### 4.4 Explore several facts of IPL ?","4f9fa37e":"### 4.12 Comparision of teams for knowing bettor performer of IPL. "}}