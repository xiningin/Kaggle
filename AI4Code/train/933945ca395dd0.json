{"cell_type":{"5b8ed342":"code","07fb9c73":"code","ea659e97":"code","41cc0fa4":"code","3239cdbb":"code","2fba2c41":"code","39beb080":"code","4facd2b7":"code","007942e2":"code","d006812c":"code","4d127d5d":"code","4c3d3dfe":"code","bbbe9990":"code","20fa2134":"code","bb47705d":"code","1a8c9147":"code","1753fd26":"code","d2f4d2c2":"code","92a2d393":"code","028fa44b":"code","c56b4e7d":"code","a6239f4a":"code","3ffc19a2":"code","e907b74e":"code","891e4289":"code","abe9b68b":"code","d6a316c7":"code","d43e84c1":"code","bd1d7f11":"code","6ec05f42":"code","67863f6d":"code","31f18cdf":"code","ab1a0768":"code","6627239d":"code","d8270594":"code","c5646f75":"code","4d261447":"markdown","04b3614d":"markdown","7dc258b3":"markdown","c5f26070":"markdown","13367b98":"markdown","0c543805":"markdown","080e8fb8":"markdown","9740388c":"markdown","3afb13b1":"markdown","fd1cd67e":"markdown","1d0a9243":"markdown","b47facf9":"markdown","48176580":"markdown","2065206b":"markdown","6beccfa2":"markdown","62addc35":"markdown","e652d1ab":"markdown","51e94c6c":"markdown","19eaa0e4":"markdown","03b13adc":"markdown","821437da":"markdown","79c77802":"markdown","609cf912":"markdown","b41a9413":"markdown","a1646ca9":"markdown","9bf1582f":"markdown","21b047b7":"markdown","87ee8d91":"markdown","f27ef219":"markdown","52a7aea6":"markdown","64792445":"markdown","d8fab34e":"markdown","fd7697ee":"markdown","570bad1b":"markdown","26b51567":"markdown","6d8794dc":"markdown","42d655b0":"markdown","43ab0e8e":"markdown"},"source":{"5b8ed342":"# for basic mathematics operation \nimport numpy as np\nimport pandas as pd\nfrom pandas import plotting\nimport datetime\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport datetime as dt\nimport missingno as msno\n\n# for interactive visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom plotly import tools\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\nimport cufflinks as cf\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\n#Word Cloud\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\nfrom wordcloud import WordCloud\nfrom wordcloud import ImageColorGenerator\nfrom textblob import TextBlob\n\n\n# for path\nimport os\nprint(os.listdir('..\/input\/'))","07fb9c73":"#PYCARET\n!pip install pycaret\nfrom pycaret.regression import *","ea659e97":"data = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')\ndata.head()","41cc0fa4":"unique_cat = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.csv')\nunique_cat.head()","3239cdbb":"cat_sorted = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.sorted-by-count.csv')\ncat_sorted.head()","2fba2c41":"#drop merchant_title, merchant_info_subtitle\ndata.drop(['merchant_title', 'merchant_info_subtitle','title'], axis = 1, inplace = True)\nprint(\"Columns drop successfully...\")","39beb080":"#most units sold\nmost_sold_product = data['units_sold'].idxmax()\nprint(\"Prodcut with highest sales irrespective of price: \\n\")\nprint(data.iloc[most_sold_product].head())\nprint('\\n')\nresponse1 = requests.get(data[data['units_sold'] == 100000].product_picture.tolist()[0]) #printing the thumbnail of that video\nImage.open(BytesIO(response1.content))","4facd2b7":"response2 = requests.get(data[data['units_sold'] == 100000].product_picture.tolist()[1]) #printing the thumbnail of that video\nImage.open(BytesIO(response2.content))","007942e2":"response3 = requests.get(data[data['units_sold'] == 100000].product_picture.tolist()[2]) #printing the thumbnail of that video\nImage.open(BytesIO(response3.content))","d006812c":"#Male and Female \nTotal_male = round(data.title_orig.str.count(\"Men\").sum()\/len(data)*100, 3)\nTotal_female = round(data.title_orig.str.count(\"Women\").sum()\/len(data)*100, 3) \n\nfig = go.Figure()\nfig.add_trace(go.Indicator(mode = \"number+delta\",\n                             value = Total_male,\n                             title = {\"text\": \"Men Collection in %\",\n                                      \"font\" : {'color': 'rgb(58, 171, 163)', 'size': 25, 'family': 'Raleway'}},\n                             number = {'font': {'color': 'rgb(58, 171, 163)', 'size': 25, 'family': 'Raleway'}},\n                             domain = {'row': 0, 'column': 0}))\n\nfig.add_trace(go.Indicator(mode = \"number+delta\",\n                             value = Total_female,\n                             title = {\"text\": \"Women Collection in %\",\n                                      \"font\" : {'color': 'rgb(0, 0, 0)', 'size': 35, 'family': 'Raleway'}},\n                             number = {'font': {'color': 'rgb(0, 0, 0)', 'size': 35, 'family': 'Raleway'}},\n                             domain = {'row': 0, 'column': 1}))\nfig.update_layout(grid = {'rows': 1, 'columns': 2, 'pattern': 'independent'})\nfig.show()","4d127d5d":"#RETAIL PRICE #FINAL PRICE- CHARGED TO CUSTOMER\nplt.subplot(1, 2, 1)\n(data['retail_price']).plot.hist(bins=50, figsize=(12, 6), edgecolor = 'white', range = [0, 250])\nplt.xlabel('retail_price', fontsize=12)\nplt.title('Retail Price Distribution', fontsize=12)\nplt.subplot(1, 2, 2)\nnp.log(data['retail_price']+1).plot.hist(bins=50, figsize=(12,6), edgecolor='white')\nplt.xlabel('log(retail_price+1)', fontsize=12)\nplt.title('Retail Price Distribution', fontsize=12)","4c3d3dfe":"#IS THERE ANY RELATION BETWEEN REATIL PRICE AND AD_BOOST\n#uses_ad_boosts\n\nad_boost_by_buyer_no = data.loc[data['uses_ad_boosts'] == 0, 'retail_price']\nad_boost_by_seller_yes = data.loc[data['uses_ad_boosts'] == 1, 'retail_price']\nfig, ax = plt.subplots(figsize=(18,8))\nax.hist(np.log(ad_boost_by_seller_yes+1), color='#0b2adb', alpha=1.0, bins=50,\n       label='if there is ad-boost')\nax.hist(np.log(ad_boost_by_buyer_no+1), color='#d4db0b', alpha=0.7, bins=50,\n       label='if there is no ad-boost')\nplt.xlabel('log(Retail price + 1)', fontsize=12)\nplt.ylabel('Frequency', fontsize=12)\nplt.title('Retail Price Distribution by Ad-Boost', fontsize=15)\nplt.tick_params(labelsize=12)\nplt.legend()\nplt.show()","bbbe9990":"print('The average price is EUR {}'.format(round(ad_boost_by_seller_yes.mean(), 2)), 'if there is ad-boost');\nprint('The average price is EUR {}'.format(round(ad_boost_by_buyer_no.mean(), 2)), 'if there is no ad-boost')","20fa2134":"#badge_product_quality\n#IS THERE ANY RELATION BETWEEN REATIL PRICE AND AD_BOOST\n\nproduct_quality_no = data.loc[data['badge_product_quality'] == 0, 'retail_price']\nproduct_quality_yes = data.loc[data['badge_product_quality'] == 1, 'retail_price']\nfig, ax = plt.subplots(figsize=(18,8))\nax.hist(product_quality_yes, color='#111212', alpha=1.0, bins=50, range = [0, 100],\n       label='Prodcut Quality Badge Present')\nax.hist(product_quality_no, color='#02f0c8', alpha=0.7, bins=50, range = [0, 100],\n       label='Prodcut Quality Badge Absent')\nplt.xlabel('Retail Price', fontsize=12)\nplt.ylabel('frequency', fontsize=12)\nplt.title('Price Distribution by Product Quality Badge', fontsize=15)\nplt.tick_params(labelsize=12)\nplt.legend()\nplt.show()","bb47705d":"data['success_product'] = np.nan\nfor i in data.index:\n    if data['units_sold'].loc[i] >= 1000:\n        data['success_product'].loc[i] = 1\n    else:\n        data['success_product'].loc[i] = 0","1a8c9147":"#FIND AVG RATING FOR SUCCESSFUL PRODUCT AND UNSUCCESSFUL PRODUCT\nsuccess_rating = float(\"{:.3f}\".format(data[data[\"success_product\"] == 1.0].rating.mean()))\nunsuccess_rating = float(\"{:.3f}\".format(data[data[\"success_product\"] == 0.0].rating.mean()))\n\nprint(\"The average rating of the successful product is: \"+ str(success_rating) + '\\n')\nprint(\"The average rating of the unsuccessful product is: \"+ str(unsuccess_rating))","1753fd26":"#DISTRIBUTION OF RETAIL PRICE WHICH ARE SUCCESSFUL AND NOT\n#IS THERE ANY RELATION BETWEEN REATIL PRICE AND AD_BOOST\n#uses_ad_boosts\n\nunsuccessful_product_by_seller = data.loc[data['success_product'] == 0.0, 'retail_price']\nsuccess_product_by_seller = data.loc[data['success_product'] == 1.0, 'retail_price']\nfig, ax = plt.subplots(figsize=(18,8))\nax.hist(success_product_by_seller, color='#690232', alpha=1.0, bins=50, range = [0, 100],\n       label='Successful Products: Retail Price')\nax.hist(unsuccessful_product_by_seller, color='#044a4a', alpha=0.7, bins=50, range = [0, 100],\n       label='Unsuccessful Products: Retail Price')\nplt.xlabel('Retail Price', fontsize=12)\nplt.ylabel('frequency', fontsize=12)\nplt.title('Successful And Unsuccessful Products Retail Price', fontsize=15)\nplt.tick_params(labelsize=12)\nplt.legend()\nplt.show()","d2f4d2c2":"#average merchant rating and the product is successful or not\n\ndef avg_merchant_rating(merchant_rating):\n    merchant_rating = int(merchant_rating)\n    \n    bucket = ''\n    if merchant_rating in range(0,3):\n        bucket = 'Rating(< 3)'\n    if merchant_rating in range(3,4):\n        bucket = 'Rating(3-4)'\n    if merchant_rating in range(4,5):\n        bucket = 'Rating(4-5)'\n    \n    return bucket","92a2d393":"#BOXPLOTS REGARDING MERCHANT REVIEWS: WHICH ARE SUCCESSFUL OR NOT?\ndata['merchant_rating_category'] = data['merchant_rating'].apply(avg_merchant_rating)\nfig = px.box(data, x=\"merchant_rating_category\", y=\"retail_price\", color=\"success_product\")\nfig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\nfig.show()","028fa44b":"#UNITS SOLD CATEGORISATION, THEN PLOT THE RATINGS AS FOLLOWS:\ndef units_sold_category(units_sold):\n    units_sold = int(units_sold)\n    \n    bucket = ''\n    if units_sold in range(0,100):\n        bucket = '< 100'\n    if units_sold in range(100,1000):\n        bucket = '100 - 1000'\n    if units_sold in range(1000,5000):\n        bucket = '1000 - 5000'\n    if units_sold in range(5000,10000):\n        bucket = '5000 - 10000'\n    if units_sold in range(10000,20000):\n        bucket = '10000 - 20000'\n    if units_sold in range(20000,100000):\n        bucket = '> 20000'\n    return bucket","c56b4e7d":"data['units_sold_category'] = data['units_sold'].apply(units_sold_category)\nunits_sold = data['units_sold_category'].unique().tolist()\ngrouped_by_units_sold_ratings = data.groupby('units_sold_category').agg({'rating_five_count': 'sum',\n                                                                         'rating_four_count': 'sum',\n                                                                         'rating_three_count': 'sum',\n                                                                         'rating_two_count': 'sum',\n                                                                         'rating_one_count': 'sum'})\ngrouped_by_units_sold_ratings.reset_index()\ngrouped_by_units_sold_ratings = grouped_by_units_sold_ratings.iloc[1:]\ngrouped_by_units_sold_ratings","a6239f4a":"grouped_by_units_sold_ratings.reset_index(inplace = True)\nlis1, lis2, lis3, lis4, lis5 = [], [], [], [], []\nfor i in grouped_by_units_sold_ratings.index:\n    lis1.append(grouped_by_units_sold_ratings.iloc[i][1])\n\nfor i in grouped_by_units_sold_ratings.index:\n    lis2.append(grouped_by_units_sold_ratings.iloc[i][2])\n\nfor i in grouped_by_units_sold_ratings.index:\n    lis3.append(grouped_by_units_sold_ratings.iloc[i][3])\n    \nfor i in grouped_by_units_sold_ratings.index:\n    lis4.append(grouped_by_units_sold_ratings.iloc[i][4])\n    \nfor i in grouped_by_units_sold_ratings.index:\n    lis5.append(grouped_by_units_sold_ratings.iloc[i][5])","3ffc19a2":"Units_Sold=[\"<100\", \"100-1000\", \"1000-5000\", \"5000-10000\", \"10000-20000\", \">20000\"]\n\nfig = go.Figure(data=[\n    go.Bar(name='rating_five_count', x=Units_Sold, y=lis1),\n    go.Bar(name='rating_four_count', x=Units_Sold, y=lis2),\n    go.Bar(name='rating_three_count', x=Units_Sold, y=lis3),\n    go.Bar(name='rating_two_count', x=Units_Sold, y=lis4),\n    go.Bar(name='rating_one_count', x=Units_Sold, y=lis5)\n])\n# Change the bar mode\nfig.update_layout(barmode='stack')\nfig.show()","e907b74e":"#CATEGORICAL FEATURE PLOT\nfig = px.parallel_categories(data,\n                             dimensions = ['origin_country', 'units_sold_category','merchant_rating_category', 'uses_ad_boosts'],\n                             \n                             labels = {'units_sold_category': 'Units Sold',\n                                       'merchant_rating_category': 'Merchant Ratings',\n                                       'uses_ad_boosts': 'Using Ads ?'})\nfig.show()","891e4289":"data['count'] = 1\nbadge_count = data.groupby(['badges_count']).sum().reset_index()[['badges_count', 'count']]\nbadge_local_product = data.groupby(['badge_local_product']).sum().reset_index()[['badge_local_product', 'count']]\nbadge_product_quality = data.groupby(['badge_product_quality']).sum().reset_index()[['badge_product_quality', 'count']]\nbadge_fast_shipping = data.groupby(['badge_fast_shipping']).sum().reset_index()[['badge_fast_shipping', 'count']]\nsuccess_product = data.groupby(['success_product']).sum().reset_index()[['success_product', 'count']]\nproduct_variation_size_id = data.groupby(['product_variation_size_id']).sum().reset_index()[['product_variation_size_id', 'count']].sort_values(by = 'count', ascending = False)[:7]\nunits_sold_category_total = data.groupby(['units_sold_category']).sum().reset_index()[['units_sold_category', 'count']]\nmerchant_rating_category_total = data.groupby(['merchant_rating_category']).sum().reset_index()[['merchant_rating_category', 'count']]","abe9b68b":"fig = make_subplots(rows=4, cols=2, shared_yaxes=True, subplot_titles=(\"Badge Count\", \"Local Products\", \"Product Quality\",\n                                                                       \"Fast Shipping\", \"Successful Products\", \"Product Variation\",\n                                                                       \"Units Sold\", \"Merchant Rating Category\"))\n\nfig.add_trace(go.Bar(x = badge_count['badges_count'].tolist(),\n                     y = badge_count['count'].tolist(), \n                     marker=dict(color=badge_count['count'].tolist(), coloraxis=\"coloraxis\")), 1,1)\n\nfig.add_trace(go.Bar(x = badge_local_product['badge_local_product'].tolist(),\n                     y = badge_local_product['count'].tolist(), \n                     marker=dict(color=badge_local_product['count'].tolist(), coloraxis=\"coloraxis\")), 1,2)\n\nfig.add_trace(go.Bar(x = badge_product_quality['badge_product_quality'].tolist(),\n                     y = badge_product_quality['count'].tolist(), \n                     marker=dict(color=badge_product_quality['count'].tolist(), coloraxis=\"coloraxis\")), 2,1)\n\nfig.add_trace(go.Bar(x = badge_fast_shipping['badge_fast_shipping'].tolist(),\n                     y = badge_fast_shipping['count'].tolist(), \n                     marker=dict(color=badge_fast_shipping['count'].tolist(), coloraxis=\"coloraxis\")), 2,2)\n\nfig.add_trace(go.Bar(x = success_product['success_product'].tolist(),\n                     y = success_product['count'].tolist(), \n                     marker=dict(color=success_product['count'].tolist(), coloraxis=\"coloraxis\")), 3,1)\n\nfig.add_trace(go.Bar(x = product_variation_size_id['product_variation_size_id'].tolist(),\n                     y = product_variation_size_id['count'].tolist(), \n                     marker=dict(color=product_variation_size_id['count'].tolist(), coloraxis=\"coloraxis\")), 3,2)\n\nfig.add_trace(go.Bar(x = units_sold_category_total['units_sold_category'].tolist(),\n                     y = units_sold_category_total['count'].tolist(), \n                     marker=dict(color=units_sold_category_total['count'].tolist(), coloraxis=\"coloraxis\")), 4,1)\n\nfig.add_trace(go.Bar(x = merchant_rating_category_total['merchant_rating_category'].tolist(),\n                     y = merchant_rating_category_total['count'].tolist(), \n                     marker=dict(color=merchant_rating_category_total['count'].tolist(), coloraxis=\"coloraxis\")), 4,2)\n\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False, title_text='Visualisations:')\nfig.show()","d6a316c7":"#WORD CLOUD\ntags_total = data['tags'].dropna().tolist()\ntags_final=(\" \").join(tags_total)\nresponse = requests.get('https:\/\/www.incrediblelab.com\/wp-content\/uploads\/2017\/04\/wish-logo.jpg')\nchar_mask = np.array(Image.open(BytesIO(response.content)))\nimage_colors = ImageColorGenerator(char_mask)\nplt.figure(figsize = (13,13))\n\nwc = WordCloud(background_color=\"black\", max_words=200,\n               width=400, height=400, mask=char_mask, random_state=1).generate(tags_final)\n# to recolour the image\nplt.imshow(wc.recolor(color_func=image_colors))","d43e84c1":"data.corr().iplot(kind='heatmap', colorscale=\"Reds\", title=\"Feature Correlation Matrix\")","bd1d7f11":"origin_country = data.groupby(['origin_country']).sum().reset_index()[['origin_country', 'count']]\norigin_country_retail = data.groupby(['origin_country']).mean().reset_index()[['origin_country','retail_price', 'count']]","6ec05f42":"labels = origin_country['origin_country']\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=origin_country['count'], name=\"Products based on origin country\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=origin_country_retail['retail_price'], name=\"Retail Price based on origin country\"),\n              1, 2)\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    annotations=[dict(text='Products', x=0.17, y=0.5, font_size=20, showarrow=False),\n                 dict(text='Retail Price', x=0.84, y=0.5, font_size=20, showarrow=False)])\nfig.show()","67863f6d":"#take few columns and made new df\ndf=data[['title_orig','tags', 'retail_price','units_sold', 'price', 'rating', 'rating_count',\n         'rating_five_count', 'rating_one_count', 'rating_three_count', 'rating_two_count', 'rating_four_count',\n         'badge_local_product', 'product_variation_inventory', 'shipping_option_price', \n         'merchant_rating_count', 'merchant_rating']]\ndf.head(3)","31f18cdf":"exp_reg = setup(df, target = 'units_sold', silent = True)","ab1a0768":"best_model = compare_models(sort = 'MAPE', exclude= ['lightgbm'])","6627239d":"rf = create_model('et', fold = 5)","d8270594":"tuned_dt = tune_model(rf, optimize = 'MAPE')","c5646f75":"plot_model(tuned_dt)","4d261447":"# <font color = 'blue'>PYCARET: Units Sold Prediction<\/font>","04b3614d":"# <font color = 'blue'>Relationship between Product Quality and Price<\/font>","7dc258b3":"# Introduction\n\nThis dataset contains product listings as well as products ratings and sales performance. The data comes from the Wish platform. We will deep dive into the dataset and find interesting insights.\n\n<font color = \"red\">This page consists of heavy visualizations using Pycaret and Plotly. So, it may take little time to load.<\/font>\n![](https:\/\/www.koongo.com\/wp-content\/uploads\/2020\/04\/wish.png)\n\nIf you like it. Please appreciate me with an <font color = 'red'>Upvote!<\/font>","c5f26070":"**we will consider the low limit where we can say that product on that website is successful or not.\nputting that limit to 1000.**","13367b98":"# <font color = 'blue'>Categorical Features Plot<\/font>","0c543805":"# <font color = 'blue'>Merchant Ratings<\/font>\nConverted all ratings into categorical buckets for better understanding.","080e8fb8":"# <font color = 'blue'>Model Building<\/font>\n**Setup**","9740388c":"<font color = 'gold'>Observation<\/font>\n* There are majority of the products which are not having any product badge.\n* Positive skewed data.","3afb13b1":"<font color = \"gold\">Obervations<\/font>\n* Data shown above is based on the retail price distribution and its log based distribution. It shows positive skewed distribution.\n* Mean is around 23.288 EUR ","fd1cd67e":"# <font color = 'blue'>Dataset<\/font>","1d0a9243":"# <font color = 'blue'>WordCloud (Tags)<\/font>","b47facf9":"<font color = 'gold'>Observation<\/font>\n* As we can see, many customers have reviewed in this units sold bracket(> 20000). We will see that 5 star ratings on a particular product has positive corealtion with units sold category.\n* Customers get highly motivated by the reviews given by other customers and ending buying those products.\n* To make a successful product, advertising is must. In wish platform, many customers have tendency to see the reviews first and later buying the product.\n* On left, as we can see that there are no reviews for (< 100) units sold products and eventually people are not buying it.","48176580":"# <font color = 'blue'>Relationship between Retail Price and Ad Boost.<\/font>","2065206b":"# <font color = 'blue'>Units Sold<\/font>\nCategorised into several buckets so that we can look for better analysis.","6beccfa2":"# <font color = 'blue'>Gender Collection<\/font>","62addc35":"**Plotting the model**","e652d1ab":"# <font color = 'blue'>Retail-Price Contribution<\/font>","51e94c6c":"<font color = 'gold'>Observations<\/font>\n* Accuracy is pretty low. Low bias and High Variance.","19eaa0e4":"# <font color = 'blue'>MOST SOLD PRODUCTS - Top 3<\/font>","03b13adc":"<font color = 'gold'>Observation<\/font>\n* As we can see from the above figure, Merchants with higher ratings category has more outliers. That means, they are charging higher rates on their products and also getting successful as people have positive sentiments towards those merchants.\n* Merchants with ratings (3-4) have low median cost and may be due to price, people are buying more of these products. Those customers are price sensitive customers.\n* Merchants below (< 3) ratings have no successful products.","821437da":"<font color = 'gold'>Observations<\/font>\n* There are no badges on the products.\n* People are not applying for fast shipping as shippings charges are little expensive.\n* Product Variation: Size S, XS, M are the mostly demanded by the customers.\n* Majority of merchants come under rantings (4-5). We can assume that products which are sold are of high qualtiy and reliable.","79c77802":"# <font color = 'blue'>DONUT CHARTS: COUNTRY BASIS<\/font>","609cf912":"**Average Rating for the Products**","b41a9413":"# <font color = 'blue'>Successful Products<\/font>","a1646ca9":"<font color = \"gold\">Obervations<\/font>\n* Black and White are the most chosen colors on all sort of products.\n* Top products are skirts, one-piece and tunic clothing.","9bf1582f":"**Tuning the model**","21b047b7":"# <font color = 'blue'>Correlation<\/font>","87ee8d91":"**Choosing Best Model**","f27ef219":"<font color = \"gold\">Observations<\/font>\n* Casuals, Summer short, Plus Size, Fashion, Printed, Tank top, Sleeveless dress: These are the few tags which mostly used by the merchants to attract customers","52a7aea6":"**Compare Models**","64792445":"<font color = 'gold'>Observations<\/font>\n* Most products are produced from China and US (Left Pie Chart)\n* Right Pie diagram tells about the average price according to the country basis. As majority of the products are from China and US, Venezuela has higher avg price as no. of products are very low followed by United Kingdom, Austria and Singapore\n","d8fab34e":"# <font color = 'blue'>Dataset<\/font>","fd7697ee":"# <font color = 'blue'>Importing Libraries<\/font>","570bad1b":"**Units Sold Vs Ratings**","26b51567":"# <font color = 'blue'>ANALYSIS<\/font>","6d8794dc":"# <font color = 'blue'>The End<\/font>","42d655b0":"**Relationship between Retail Price and Successful Products**","43ab0e8e":"# <font color = 'blue'>Subplots<\/font>"}}