{"cell_type":{"b02d9f5c":"code","bda4a432":"code","6af7c4d4":"code","a98315d7":"code","74df1ef5":"code","bbdb12dd":"code","66e2f51d":"code","c43d254d":"code","df08ee97":"code","c8548376":"code","57cc8ebd":"code","107457b0":"code","59de920f":"code","5ea8a77c":"code","8c775241":"code","c358fa25":"code","10aca4d4":"code","7806c695":"code","02e14921":"code","480400f4":"code","78abd68b":"code","3410a7a9":"code","9f10d9d2":"code","6d6b529b":"code","85298a98":"code","3c967e41":"code","681b863a":"code","4d2fd3a2":"code","b2388e6e":"code","9df90d24":"code","6e0c687c":"code","94d10b50":"code","89796d7c":"code","8b2ba1fc":"code","8d057641":"code","25edad04":"code","ae754d9c":"code","27216d45":"code","7b25c60d":"code","2259165e":"code","84af808e":"code","00675f6e":"code","dd0f7b16":"markdown","c983c100":"markdown","037e5004":"markdown","06a1c418":"markdown","e6b77afe":"markdown","5e609248":"markdown","a2948b4a":"markdown","f294dcef":"markdown","5d507b1e":"markdown","d0f40703":"markdown","cf428a60":"markdown","5fe95583":"markdown","b352d212":"markdown","9264853c":"markdown","3a567a1d":"markdown","49af7c2f":"markdown","84ee1177":"markdown","a79d69ef":"markdown","c7537768":"markdown","28458ca7":"markdown","ad8a5211":"markdown","df8b7477":"markdown","0e52e841":"markdown","65251757":"markdown"},"source":{"b02d9f5c":"import pandas as pd\nimport numpy as np\nimport json\nimport os\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.basemap import Basemap\nfrom wordcloud import WordCloud\nfrom nltk.corpus import stopwords","bda4a432":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6af7c4d4":"business = []\nwith open('..\/input\/yelp-dataset\/yelp_academic_dataset_business.json') as fl:\n    for i, line in enumerate(fl):\n        business.append(json.loads(line)) #use 'loads' since line is string\ndf_business = pd.DataFrame(business)\n\n# print the first five rows\ndf_business.head()","a98315d7":"df_business.shape","74df1ef5":"df_business.columns","bbdb12dd":"df_business['categories'].isna().mean()","66e2f51d":"df_business = df_business[df_business['categories'].notna()] #take out missing ones\ndf_business.shape","c43d254d":"cat_temp1 = ';'.join(df_business['categories'])\ncat_temp2 = re.split(';|,', cat_temp1)\nbus_cat_trim = [item.lstrip() for item in cat_temp2]\ndf_bus_cat = pd.DataFrame(bus_cat_trim,columns=['category'])","df08ee97":"bus_cat_count = df_bus_cat.category.value_counts()\nbus_cat_count = bus_cat_count.sort_values(ascending = False)\nbus_cat_count = bus_cat_count.iloc[0:10]\n\n# plot\nfig = plt.figure(figsize=(10, 6))\nax = sns.barplot(bus_cat_count.index, bus_cat_count.values)\nplt.title(\"Top Business Categories\",fontsize = 20)\nx_locs,x_labels = plt.xticks()\nplt.setp(x_labels, rotation = 60)\nplt.ylabel('Number of Businesses', fontsize = 12)\nplt.xlabel('Category', fontsize = 12)\n\n#text labels\nr = ax.patches\nlabels = bus_cat_count.values\nfor rect, label in zip(r, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 10, label, ha='center', va='bottom')","c8548376":"df_bus_res = df_business.loc[[i for i in df_business['categories'].index if re.search('Restaurants', df_business['categories'][i])]]","57cc8ebd":"fig = plt.figure(figsize=(10, 6))\nplt.title(\"Geographic View of Restaurant Locations\",fontsize = 20)\nm=Basemap(projection='cyl', lon_0 = 0, lat_0=0, resolution='c')\nm.fillcontinents(color='#FAFFCA',lake_color='#003875')\nm.drawmapboundary(fill_color='#003875') \nm.drawcountries(linewidth=0.2, color=\"black\")\nm_coords = m(df_bus_res[\"longitude\"].tolist(), df_bus_res[\"latitude\"].tolist())\nm.scatter(m_coords[0], m_coords[1], s=5, c='red', lw=3, zorder=5);","107457b0":"# coordinates range for North America\nlon_min, lon_max = -150, -50\nlat_min, lat_max = 10,60\n\nplt.figure(figsize=(10,6))\nm1 = Basemap(projection='merc', llcrnrlat=lat_min, urcrnrlat=lat_max,\n             llcrnrlon=lon_min, urcrnrlon=lon_max, resolution='c')\nplt.title(\"North America Region\", fontsize = 20)\nm1.fillcontinents(color='#FAFFCA',lake_color='#003875')\nm1.drawmapboundary(fill_color='#003875')    \nm1.drawcountries(linewidth=0.5, color=\"black\") \nm1_coords = m1(df_bus_res[\"longitude\"].tolist(), df_bus_res[\"latitude\"].tolist())\nm1.scatter(m1_coords[0], m1_coords[1], s=20, c=\"red\", lw=5, zorder=5);","59de920f":"df_bus_res['city_state'] = df_bus_res['city'] + ',' + df_bus_res['state']","5ea8a77c":"city_res_count = df_bus_res.city_state.value_counts()\ncity_res_count = city_res_count.sort_values(ascending = False)\ncity_res_count = city_res_count.iloc[0:10]\n\n# plot\nfig = plt.figure(figsize=(10, 6))\nax = sns.barplot(city_res_count.index, city_res_count.values)\nplt.title(\"Top Cities\",fontsize = 20)\nx_locs,x_labels = plt.xticks()\nplt.setp(x_labels, rotation = 60)\nplt.ylabel('Number of Restaurants', fontsize = 12)\nplt.xlabel('City,State', fontsize = 12)\n\n#text labels\nr = ax.patches\nlabels = city_res_count.values\nfor rect, label in zip(r, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 10, label, ha='center', va='bottom')","8c775241":"f, (ax1, ax2) = plt.subplots(1, 2, figsize=(10,6))\n\n#coordinates for Toronto (Source: Google)\nlat_t = 43.6532\nlon_t = -79.3832\n\n#rectangular view\nlon_t_min, lon_t_max = lon_t-0.5,lon_t+0.5\nlat_t_min, lat_t_max = lat_t-0.5,lat_t+0.5\n\n#subset the data\ndf_res_tor=df_bus_res[(df_bus_res[\"longitude\"]>lon_t_min) & (df_bus_res[\"longitude\"]<lon_t_max) &\\\n                    (df_bus_res[\"latitude\"]>lat_t_min) & (df_bus_res[\"latitude\"]<lat_t_max)]\n\n#plot\ndf_res_tor.plot(kind='scatter', x='longitude', y='latitude',\n                color='#52fff3', s=0.02, alpha=.6, subplots=True, ax=ax1)\nax1.set_title(\"Restaurants in Toronto\")\nax1.set_facecolor('black')\n\n#coordinates for Las Vegas (Source: Google)\nlat_v = 36.1699\nlon_v = -115.1398\n\n#rectangular view\nlon_v_min, lon_v_max = lon_v-0.5,lon_v+0.5\nlat_v_min, lat_v_max = lat_v-0.5,lat_v+0.5\n\n#subset the data\ndf_res_lv=df_bus_res[(df_bus_res[\"longitude\"]>lon_v_min) & (df_bus_res[\"longitude\"]<lon_v_max) &\\\n                    (df_bus_res[\"latitude\"]>lat_v_min) & (df_bus_res[\"latitude\"]<lat_v_max)]\n\n#plot\ndf_res_lv.plot(kind='scatter', x='longitude', y='latitude',\n                color='#52fff3', s=.02, alpha=.6, subplots=True, ax=ax2)\nax2.set_title(\"Restaurants in Las Vegas\")\nax2.set_facecolor('black')\n\nf.tight_layout(pad=5.0);","c358fa25":"res_count = df_bus_res.name.value_counts()\nres_count = res_count.sort_values(ascending = False)\nres_count = res_count.iloc[0:15]\n\n# plot\nfig = plt.figure(figsize=(10, 6))\nax = sns.barplot(res_count.index, res_count.values)\nplt.title(\"Restaurants with High Occurences\",fontsize = 20)\nx_locs,x_labels = plt.xticks()\nplt.setp(x_labels, rotation = 60)\nplt.ylabel('Number of Restaurants', fontsize = 12)\nplt.xlabel('Restaurant', fontsize = 12)\n\n#text labels\nr = ax.patches\nlabels = res_count.values\nfor rect, label in zip(r, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 10, label, ha='center', va='bottom')","10aca4d4":"df_bus_res.loc[df_bus_res.name == 'Subway', 'name'] = 'Subway Restaurants'","7806c695":"res_count = df_bus_res.name.value_counts()\nres_count = res_count.sort_values(ascending = False)\nres_count = res_count.iloc[0:15]\n\n# plot\nfig = plt.figure(figsize=(10, 6))\nax = sns.barplot(res_count.index, res_count.values)\nplt.title(\"Restaurants with High Occurences\",fontsize = 20)\nx_locs,x_labels = plt.xticks()\nplt.setp(x_labels, rotation = 60)\nplt.ylabel('Number of Restaurants', fontsize = 12)\nplt.xlabel('Restaurant Name', fontsize = 12)\n\n#text labels\nr = ax.patches\nlabels = res_count.values\nfor rect, label in zip(r, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height + 10, label, ha='center', va='bottom')","02e14921":"#subset data\nsub_mb = df_bus_res.loc[(df_bus_res.name == 'McDonald\\'s') | (df_bus_res.name == 'Burger King')]\nsub_pd = df_bus_res.loc[(df_bus_res.name == 'Pizza Hut') | (df_bus_res.name == 'Domino\\'s Pizza')]\nsub_sj = df_bus_res.loc[(df_bus_res.name == 'Subway Restaurants') | (df_bus_res.name == 'Jimmy John\\'s')]\nsub_tc = df_bus_res.loc[(df_bus_res.name == 'Taco Bell') | (df_bus_res.name == 'Chipotle Mexican Grill')]","480400f4":"fig = plt.figure(figsize=(8, 6))\nsns.boxplot(x = 'name', y = 'stars', data = sub_mb)\nplt.title(\"Rating Comparison: MD vs BK\",fontsize = 20)\nplt.ylabel('Stars', fontsize = 12)\nplt.xlabel('Restaurant Name', fontsize = 12);","78abd68b":"fig = plt.figure(figsize=(8, 6))\nsns.boxplot(x = 'name', y = 'stars', data = sub_pd)\nplt.title(\"Rating Comparison: PH vs DP\",fontsize = 20)\nplt.ylabel('Stars', fontsize = 12)\nplt.xlabel('Restaurant Name', fontsize = 12);","3410a7a9":"fig = plt.figure(figsize=(8, 6))\nsns.boxplot(x = 'name', y = 'stars', data = sub_sj)\nplt.title(\"Rating Comparison: SR vs JJ\",fontsize = 20)\nplt.ylabel('Stars', fontsize = 12)\nplt.xlabel('Restaurant Name', fontsize = 12);","9f10d9d2":"fig = plt.figure(figsize=(8, 6))\nsns.boxplot(x = 'name', y = 'stars', data = sub_tc)\nplt.title(\"Rating Comparison: TB vs CG\",fontsize = 20)\nplt.ylabel('Stars', fontsize = 12)\nplt.xlabel('Restaurant Name', fontsize = 12);","6d6b529b":"df_bus_res.loc[df_bus_res.name == 'Chipotle Mexican Grill'].stars.median()","85298a98":"fig = plt.figure(figsize=(8, 6))\nsns.scatterplot(x = 'stars', y = 'review_count', data = df_bus_res)\nplt.title(\"Reviews vs Rating\",fontsize = 20)\nplt.ylabel('Number of Reviews', fontsize = 12)\nplt.xlabel('Rating', fontsize = 12);","3c967e41":"df_bus_res['attributes'] = df_bus_res['attributes'].apply(lambda x: {} if x is None else x)\ndf_att = pd.json_normalize(df_bus_res.attributes)","681b863a":"df_att.head()","4d2fd3a2":"# attributes of restaurants\ndf_att.columns","b2388e6e":"df_att.BusinessAcceptsBitcoin.value_counts()","9df90d24":"# price range vs coatcheck\npd.crosstab(df_att.RestaurantsPriceRange2, df_att.CoatCheck, margins=True, normalize = 'index')","6e0c687c":"# stars vs delivery\npd.crosstab(df_bus_res.stars, df_att.RestaurantsDelivery, margins=True, normalize = 'index')","94d10b50":"df_tor = df_bus_res.loc[df_bus_res['city'] == 'Toronto']\n\n# open restaurants more than 100 reviews with rating above 3.5, accepts takeout, credit cards, and price range of $$.\ncrit = (df_tor['stars'] > 3.5) & (df_tor['review_count'] > 100) & (df_tor['is_open'] == 1) & (df_att.RestaurantsTakeOut == 'True') & (df_att.RestaurantsPriceRange2 == '2') & (df_att.BusinessAcceptsCreditCards == 'True')\ndf_tor_sub = df_tor.loc[crit]\nfig = plt.figure(figsize=(12, 6))\nsns.barplot(x = 'name', y = 'stars', data = df_tor_sub.sort_values(by=['stars', 'review_count'], ascending = False)[0:15])\nplt.title(\"Top 15 Restaurants Based on Defined Criteria\",fontsize = 20)\nx_locs,x_labels = plt.xticks()\nplt.setp(x_labels, rotation = 60)\nplt.yticks(np.arange(0.0, 5.5, 0.5))\nplt.ylabel('Rating', fontsize = 12)\nplt.xlabel('Restaurant', fontsize = 12);","89796d7c":"df_tor_sub.sort_values(by=['stars', 'review_count'], ascending = False)[0:15]['name']","8b2ba1fc":"tips = []\nwith open('..\/input\/yelp-dataset\/yelp_academic_dataset_tip.json') as fl:\n    for i, line in enumerate(fl):\n        tips.append(json.loads(line))\ndf_tips = pd.DataFrame(tips)\n\n# print the first five rows\ndf_tips.head()","8d057641":"df_RI = df_bus_res.loc[(df_bus_res['name'] == 'Ramen Isshin') & crit]\ndf_RI_tips = df_tips.loc[df_tips['business_id'].isin(df_RI.business_id)]","25edad04":"df_RI_tips.text.values[0:10]","ae754d9c":"def text_prep(text):\n    # filer out non-letters and lowercase them\n    text = re.sub('[^a-z\\s]', '', text.lower())\n    # remove stopwords\n    text = [w for w in text.split() if w not in stopwords.words('english')]\n    return ' '.join(text)","27216d45":"pd.set_option('mode.chained_assignment', None)\ndf_RI_tips['text_cl'] = df_RI_tips['text'].apply(text_prep)","7b25c60d":"wc = WordCloud(width=1600, height=800, random_state=42, max_words=1000000)\n\n# generation\nwc.generate(str(df_RI_tips['text_cl']))\n\nplt.figure(figsize=(15,10), facecolor='black')\nplt.title(\"Tips on Ramen Isshin\", fontsize=40, color='white')\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.tight_layout(pad=10)","2259165e":"df_FFC = df_bus_res.loc[(df_bus_res['name'] == 'Fresco\\'s Fish & Chips') & crit]\ndf_FFC_tips = df_tips.loc[df_tips['business_id'].isin(df_FFC.business_id)]","84af808e":"df_FFC_tips.text.values[0:10]","00675f6e":"pd.set_option('mode.chained_assignment', None)\ndf_FFC_tips['text_cl'] = df_FFC_tips['text'].apply(text_prep)\n\nwc = WordCloud(width=1600, height=800, random_state=42, max_words=20000)\n\n# generation\nwc.generate(str(df_FFC_tips['text_cl']))\n\nplt.figure(figsize=(15,10), facecolor='black')\nplt.title(\"Tips on Fresco\\'s Fish & Chips\", fontsize=40, color='white')\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.tight_layout(pad=10)","dd0f7b16":"Let's look into Toronto and Las Vegas:","c983c100":"Top common restaurants:","037e5004":"To process its tips, first need to define a helper function to process raw text","06a1c418":"How are ratings and review counts correlated?","e6b77afe":"Load *business* json file and convert into pandas dataframe:","5e609248":"Let's zoom into North America region:","a2948b4a":"First, load the tips data and review data:","f294dcef":"Creat a Word Cloud for its tips","5d507b1e":"Now let's compare ratings between some popular restaurant chains:","d0f40703":"Find count values for each business categories:","cf428a60":"Subset into restaurants","5fe95583":"This kernel explores the Yelp dataset. Check out my Medium post [here](http:\/\/towardsdatascience.com\/discover-your-next-favorite-restaurant-exploration-and-visualization-on-yelps-dataset-157d9799123c?source=friends_link&sk=d76565a7f36abf2da04e0f28c7b5c2b8).","b352d212":"Let's look into Ramen Isshin:","9264853c":"Plot top 10 categories","3a567a1d":"Check the number of rows and columns:","49af7c2f":"Fresco's fish and chips:","84ee1177":"Inspect all json files in the **Yelp** dataset:","a79d69ef":"Top 10 cities with highest number of restaurants:","c7537768":"Geographical Visualization:","28458ca7":"Import libraries:","ad8a5211":"Take a look at Toronto:","df8b7477":"Let's check on Chipotle's median:","0e52e841":"Now let's look at the attributes:","65251757":"Business with missing *categories*:"}}