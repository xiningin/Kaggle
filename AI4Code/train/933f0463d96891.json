{"cell_type":{"e4fb13ff":"code","88988d08":"code","a04f7e13":"code","6277e105":"code","1fafb708":"code","c96e9d7d":"code","f9b332b7":"code","29b0fb6e":"code","8ee32c39":"code","d5062b8d":"code","14bc97c6":"code","0f4aef98":"code","6e9786df":"code","101faf24":"markdown","381b4c78":"markdown"},"source":{"e4fb13ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nimport seaborn as sns\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pylab as plt\nplt.style.use('fivethirtyeight')\nfrom plotly import express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88988d08":"df = pd.read_csv(\"..\/input\/taxi-pricing-with-mobility-analytics\/sigma_cabs.csv\")\npd.set_option('display.max_columns', None)\ndf.head()","a04f7e13":"from colorama import Fore, Style\n\ndef count(string: str, color=Fore.RED):\n    \"\"\"\n    Utility function to string in colors\n    \"\"\"\n    print(color+string+Style.RESET_ALL)","6277e105":"def statistics(dataframe, column):\n    count(f\"The Average value in {column} is: {dataframe[column].mean():.2f}\", Fore.CYAN)\n    count(f\"The Standard Deviation of {column} is: {dataframe[column].std():.2f}\", Fore.CYAN)\n    count(f\"The Maximum value in {column} is: {dataframe[column].max()}\", Fore.CYAN)\n    count(f\"The Minimum value in {column} is: {dataframe[column].min()}\", Fore.CYAN)\n    count(f\"The 25th Quantile of {column} is: {dataframe[column].quantile(0.25)}\", Fore.CYAN)\n    count(f\"The 50th Quantile of {column} is: {dataframe[column].quantile(0.50)}\", Fore.CYAN)\n    count(f\"The 75th Quantile of {column} is: {dataframe[column].quantile(0.75)}\", Fore.CYAN)","1fafb708":"statistics(df, \"Surge_Pricing_Type\")","c96e9d7d":"# Let's plot the age column too\nplt.style.use(\"classic\")\nsns.distplot(df['Surge_Pricing_Type'], color='blue')\nplt.title(f\"Surge Pricing Type Distribution [\\u03BC : {df['Surge_Pricing_Type'].mean():.2f} price | \\u03C3 : {df['Surge_Pricing_Type'].std():.2f} price]\")\nplt.xlabel(\"Surge Pricing Type\")\nplt.ylabel(\"Count\")\nplt.show()","f9b332b7":"#Code by Tanay Mehta https:\/\/www.kaggle.com\/heyytanay\/police-shooting-eda-interactive-map\/notebook\n\nplt.style.use(\"fivethirtyeight\")\nplt.figure(figsize=(16, 6))\nsns.kdeplot(df.loc[df['Gender'] == 'Male', 'Surge_Pricing_Type'], label = 'Male',shade=True)\nsns.kdeplot(df.loc[df['Gender'] == 'Female', 'Surge_Pricing_Type'], label = 'Female',shade=True)\n\n# Labeling of plot\nplt.xlabel('Surge Pricing Type')\nplt.ylabel('Density')\nplt.title('Distribution of Surge Pricing Type for Male and Female Individuals')\nplt.show()","29b0fb6e":"# Pie Chart to see gender of individuals\ntargets = df['Gender'].value_counts().tolist()\nvalues = list(dict(df['Gender'].value_counts()).keys())\n\nfig = px.pie(\n    values=targets, \n    names=values,\n    title='Gender of Individuals in Taxi Surge Pricing',\n    color_discrete_sequence=['blue', 'magenta']\n)\nfig.show()","8ee32c39":"corr = df.corr()\ncorr.style.background_gradient(cmap = 'coolwarm')","d5062b8d":"!pip install dabl\nimport dabl","14bc97c6":"dabl.detect_types(df)","0f4aef98":"dabl.plot(df, target_col=\"Surge_Pricing_Type\")","6e9786df":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#2B3A67','#42a7f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('After reading M\u00f6bius @arashnic beautiful EDA I felt ashame to keep ploting my Pythonish work' )","101faf24":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcQpou7xlDEatQ1IrTbKEMhOeLB39VnVOEdqmQ&usqp=CAU)mytaxipulse.com","381b4c78":"# <font color=\"#E74C3C\"> Surge Pricing System <\/font>\n\nDynamic pricing, also referred to as surge pricing, demand pricing, or time-based pricing is a pricing strategy in which businesses set flexible prices for products or services based on current market demands.\nhttps:\/\/en.wikipedia.org\/wiki\/Dynamic_pricing#:~:text=Dynamic%20pricing%2C%20also%20referred%20to,based%20on%20current%20market%20demands."}}