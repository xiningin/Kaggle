{"cell_type":{"8a1aa44d":"code","7be24db3":"code","75035b4e":"code","66f96f00":"code","99488d17":"code","1f5c582d":"code","4c910e0f":"code","2e1dde3b":"code","2618268f":"code","d40d4db3":"code","2c4f3ddb":"code","c35062c9":"code","1d9f2fcd":"code","ba4768e9":"code","4f8077c8":"code","5f67108a":"code","3d1e2b45":"code","9708d264":"code","6eee9778":"code","069db87a":"code","e3fa2365":"code","81490351":"code","437e8ebf":"code","425e6510":"code","815423ce":"code","5330f76c":"code","5ada633c":"code","afacfad6":"code","fa9efb9a":"code","96322909":"code","1c632844":"code","b8b2c570":"code","9dc51833":"code","c90805d4":"code","ae95616a":"code","43d318d7":"code","2647c1ac":"code","17228cca":"code","730b1c75":"markdown","a4c2efad":"markdown","7edd7503":"markdown","a9b0847e":"markdown","253511ab":"markdown","33ecc3e9":"markdown","486d7b43":"markdown","826117c7":"markdown","52aaabf1":"markdown","05e1cccb":"markdown","47397807":"markdown","dfa6923a":"markdown","69e3865e":"markdown","0dc06338":"markdown","b10cc67f":"markdown","a78eb68b":"markdown","39d4359b":"markdown","d2c0d3c4":"markdown","9b46ecdd":"markdown","33afcc9f":"markdown","8611ba32":"markdown","91d37bc2":"markdown"},"source":{"8a1aa44d":"## Import\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('float_format', '{:f}'.format)\nimport plotly.express as px # graphing libraries (e.g. px.line)","7be24db3":"AnnualTixSales  = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/AnnualTicketSales.csv')\nHighestGrossers = pd.read_csv('..\/input\/hollywood-theatrical-market-synopsis-1995-to-2021\/HighestGrossers.csv')","75035b4e":"AnnualTixSales.head()\n# what is a command?\n# links to dcoumentation\/videos\n# purpose of a dataframe!","66f96f00":"fig = px.line(AnnualTixSales, x=\"YEAR\", y=\"TOTAL BOX OFFICE\")\nfig.show()","99488d17":"# replaces '$' with '' (empty string)\nAnnualTixSales['TOTAL BOX OFFICE']=AnnualTixSales['TOTAL BOX OFFICE'].apply(lambda x: x.replace('$', ''))\n# replaces ',' with '' (empty string)\nAnnualTixSales['TOTAL BOX OFFICE']=AnnualTixSales['TOTAL BOX OFFICE'].apply(lambda x: x.replace(',', ''))","1f5c582d":"AnnualTixSales.head()","4c910e0f":"# though the '$' and ',' are removed, the values are still considered strings \n# instead of numbers. Let's explicitly convert these values to float!\n\n# converts string to float (number that is not an integer, supports decimal precision)\nAnnualTixSales['TOTAL BOX OFFICE']=AnnualTixSales['TOTAL BOX OFFICE'].astype(float)","2e1dde3b":"# let's see what the data trend is\nfig = px.line(AnnualTixSales, x=\"YEAR\", y=\"TOTAL BOX OFFICE\")\nfig.show()","2618268f":"# replaces '$' with '' (empty string)\nAnnualTixSales['TICKETS SOLD']=AnnualTixSales['TICKETS SOLD'].apply(lambda x: x.replace('$', ''))\n# replaces ',' with '' (empty string)\nAnnualTixSales['TICKETS SOLD']=AnnualTixSales['TICKETS SOLD'].apply(lambda x: x.replace(',', ''))\n# converts string to float (number that is not an integer, supports decimal precision)\nAnnualTixSales['TICKETS SOLD']=AnnualTixSales['TICKETS SOLD'].astype(float)","d40d4db3":"#def clean_price_column(dataframe, column_name):\n    #dataframe[column_name]=dataframe[column_name].apply(lambda x: x.replace('$', ''))\n    ## replaces ',' with '' (empty string)\n    #dataframe[column_name]=dataframe[column_name].apply(lambda x: x.replace(',', ''))\n    ## converts string to float (number that is not an integer, supports decimal precision)\n    #dataframe[column_name]=dataframe[column_name].astype(float)\n    #return dataframe[column_name]\n\n#AnnualTixSales['TICKETS SOLD'] = clean_price_column(AnnualTixSales, 'TICKETS SOLD')","2c4f3ddb":"# let's see what the data trend is\nfig = px.line(AnnualTixSales, x=\"YEAR\", y=\"TICKETS SOLD\")\nfig.show()","c35062c9":"fig = px.line(AnnualTixSales, x=\"YEAR\", y=[\"TOTAL BOX OFFICE\",\"TICKETS SOLD\"])\nfig.show()","1d9f2fcd":"HighestGrossers.head()","ba4768e9":"HighestGrossers['TOTAL FOR YEAR'] = HighestGrossers['TOTAL FOR YEAR'].apply(lambda x: x.replace('$', ''))\nHighestGrossers['TOTAL FOR YEAR'] = HighestGrossers['TOTAL FOR YEAR'].apply(lambda x: x.replace(',', ''))\nHighestGrossers['TOTAL FOR YEAR'] = HighestGrossers['TOTAL FOR YEAR'].astype(int)","4f8077c8":"fig = px.line(HighestGrossers, x=\"MOVIE\", y=\"TOTAL FOR YEAR\")\nfig.show()","5f67108a":"HighestGrossers['TOTAL IN 2019 DOLLARS'] = HighestGrossers['TOTAL IN 2019 DOLLARS'].apply(lambda x: x.replace('$', ''))\nHighestGrossers['TOTAL IN 2019 DOLLARS'] = HighestGrossers['TOTAL IN 2019 DOLLARS'].apply(lambda x: x.replace(',', ''))\nHighestGrossers['TOTAL IN 2019 DOLLARS'] = HighestGrossers['TOTAL IN 2019 DOLLARS'].astype(int)","3d1e2b45":"fig = px.line(HighestGrossers, x=\"MOVIE\", y=\"TOTAL IN 2019 DOLLARS\")\nfig.show()","9708d264":"## data prep\n## lets look at top genres per year with the total sum made in the box office \ngb = ['YEAR','GENRE']\nagg = {'TOTAL FOR YEAR':'sum'}\naggregate_data = HighestGrossers.groupby(gb).agg(agg)","6eee9778":"aggregate_data.head()","069db87a":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","e3fa2365":"HighestGrossers[HighestGrossers.GENRE.isnull() == True]","81490351":"## Fill na with Action, seems to be the ones missing \nHighestGrossers.fillna('Action' , inplace = True)","437e8ebf":"## lets try to get a prediction for how much a genre of movie will bring in \nx = HighestGrossers[['GENRE']]\nx_time = HighestGrossers[['YEAR']]\ny = HighestGrossers[['TOTAL FOR YEAR']]","425e6510":"## create map for genre to get text into numerical data\nmap_ = dict(zip(x.GENRE.unique(),range(x.GENRE.nunique())))","815423ce":"## convert genre text into categorical data \nx['GENRE'] = [map_[z] for z in x.GENRE ]","5330f76c":"x_train , x_test , y_train,y_test = train_test_split(x,y , test_size = 0.2)\nx_train.shape , x_test.shape , y_train.shape, y_test.shape","5ada633c":"## Linear regression wiki page: https:\/\/en.wikipedia.org\/wiki\/Linear_regression\nregressor = LinearRegression()\nregressor.fit(x_train, y_train)","afacfad6":"## since linear regression is an equation in the form (y = mx + b), we can get the intercept and coefficient\nprint(f'The intercept of our model intercept is {regressor.intercept_[0]} and the coefficient is {regressor.coef_[0][0]}')","fa9efb9a":"## lets test our model on our testing data set\npredictions = regressor.predict(x_test)","96322909":"## reverse our mapping to get the genre back\nreverse_map = {v:k for k,v in map_.items()}","1c632844":"## lets see how we did prediction wise\ndf = pd.DataFrame({'Genre':[reverse_map[x] for x in x_test.GENRE],'Actual': y_test['TOTAL FOR YEAR'].values, 'Predicted': [x[0] for x in predictions]})\ndf['error'] = df.Predicted - df.Actual\ndf","b8b2c570":"## time to look at metrics \nimport numpy as np\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","9dc51833":"x_train , x_test , y_train,y_test = train_test_split(x_time,y , test_size = 0.2)\nx_train.shape , x_test.shape , y_train.shape, y_test.shape","c90805d4":"regressor = LinearRegression()\nregressor.fit(x_train, y_train)","ae95616a":"## since linear regression is an equation in the form (y = mx + b), we can get the intercept and coefficient\nprint(f'The intercept of our model intercept is {regressor.intercept_[0]} and the coefficient is {regressor.coef_[0][0]}')","43d318d7":"## Look at predictions by year\ndf = pd.DataFrame({'Year':x_test.YEAR.values,'Actual': y_test['TOTAL FOR YEAR'].values, 'Predicted': [x[0] for x in predictions]})\ndf['error'] = df.Predicted - df.Actual\ndf","2647c1ac":"## time to look at metrics \nimport numpy as np\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, predictions))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","17228cca":"!jupyter nbconvert --to html Movie_Analysis.ipynb","730b1c75":"Notice that we copy\/pasted our data prep code and only changed the column name. Whenever you find yourself copy pasting code it's good practice to create a **function**! This helps you avoid code duplication and therefore mistakes! In this lab, we will stick to copy pasting, but a great exercise here can be to write a function that cleans any column, taking the datafram and column name as **input** !","a4c2efad":"Next step is to split our data into train and testing data.\n\n- Training data is data we feed into our model so it can learn the patterns it will use to predict our target variable\n- Testing data is the data we use to evaluate the accuracy of our model. It is important to not train a model on the testing data because the testing data is supposed to be data that the model have never seen, hence giving us a way to guage the way our model performs on unseen data that it doesn't have a recognized pattern for.","7edd7503":"# Annual tickets sales over the past 25 years\nColumns needed: YEAR, TICKETS SOLD","a9b0847e":"## YEAR BASED PREDICTION","253511ab":"## Highest Grossing Movies","33ecc3e9":"### View data in DataFrames\nDataFrames allow us to view our data easily within our notebook","486d7b43":"### We can also plot multiple lines on the same graph, which can help us understand **correlation**, or the extent to which two variables are linearly related.","826117c7":"### Can we plot the data as it is?\nThe box office values are not stored as numbers, so the graph library is reading them as  strings!","52aaabf1":"What does this tell us?","05e1cccb":"# Total box office revenue over the past 25 years\nColumns needed: YEAR, TOTAL BOX OFFICE","47397807":"We need to split our data into features and target values\n\n- A feature is an individual measurable property or characteristic in a dataset\n- The target variable of a dataset is the feature of a dataset about which you want to gain a deeper understanding. A supervised machine learning algorithm uses historical data to learn patterns and uncover relationships between other features of your dataset and the target.","dfa6923a":"## MODELING","69e3865e":"### Data prep: let's repeat the steps we've done above on the \"TICKETS SOLD\" column","0dc06338":"### Import libraries \nThe pandas and plotly libraries allow us to leverage pre written code and simplify our analysis","b10cc67f":"## Let's make some graphs!\n* Total box office revenue over the past 25 years\n* Annual tickets sales over the past 25 years\n* Highest grossing movies for past 25 years\n","a78eb68b":"### Read in data","39d4359b":"### Plot data","d2c0d3c4":"Regression analysis is a set of statistical processes for estimating the relationships between a dependent variable and one or more independent variables","9b46ecdd":"Let's do a simple modeling task to forecast what genre of movie will have made the most in the box office for next year","33afcc9f":"What does this tell us?\n* Box office revenue has been steadily increasing over the past 25 years\n* except for Covid, where it took a huge plunge!\n* What can we expect\/predict for next year based on this data?","8611ba32":"### Data preparation","91d37bc2":"Link to dataset: https:\/\/www.kaggle.com\/johnharshith\/hollywood-theatrical-market-synopsis-1995-to-2021"}}