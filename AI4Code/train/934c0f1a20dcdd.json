{"cell_type":{"b81085db":"code","6659f263":"code","0a2525a2":"code","59960947":"code","9b9d0dcd":"code","840dbc4e":"code","aa6356fc":"code","7011a052":"code","31c5b527":"code","65116502":"code","6b8aa414":"code","a7bdeeee":"code","be469685":"code","9680e144":"code","3651b8a7":"code","9ed65857":"code","f1b1609c":"code","843f1e1d":"code","dd6e5cd2":"code","4d22c066":"code","4d4e0421":"code","5508d770":"code","41e292eb":"code","8811c5f9":"code","684c44e9":"markdown","62e63d2d":"markdown","03784f3f":"markdown","4fe8d792":"markdown","413da6d8":"markdown","0208c48f":"markdown"},"source":{"b81085db":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.tree import plot_tree\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestClassifier","6659f263":"mushrooms = pd.read_csv('..\/input\/catalanmushrooms\/train.csv')","0a2525a2":"mushrooms = pd.read_csv('..\/input\/catalanmushrooms\/train.csv')\nmushrooms_test= pd.read_csv('..\/input\/catalanmushrooms\/test.csv')","59960947":"columns_to_keep = mushrooms_test.columns.to_list()\nmushrooms.drop(mushrooms.columns.difference(columns_to_keep+['poisonous']), axis=1, inplace=True)","9b9d0dcd":"from sklearn.model_selection import train_test_split\nX = mushrooms.drop(columns=['poisonous'])\ny = mushrooms['poisonous']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.8, random_state=8)\nX_train.head()","840dbc4e":"num_col =['Id']\nboo_col = ['bruises']\ncat_col = list(mushrooms.select_dtypes(include=[\"object\"]))","aa6356fc":"# cat_pipeline = Pipeline(steps=[\n#     ('one_hot_enc', OneHotEncoder(drop='first'))\n# ])\ncat_pipeline = Pipeline(steps=[\n    ('one-hot', OneHotEncoder(handle_unknown='ignore'))\n])\nbol_pipeline = Pipeline(steps=[\n    ('one_hot_enc', OneHotEncoder(drop='first'))\n])\nfull_processor = ColumnTransformer(transformers=[\n    ('bool',bol_pipeline,boo_col),\n    ('category', cat_pipeline, cat_col)\n])","7011a052":"tree_pipeline = Pipeline(steps=[\n    ('preprocess', full_processor), \n    ('model', DecisionTreeClassifier(max_depth=7))\n])\n\nrf_pipeline = Pipeline(steps=[\n    ('processor', full_processor), \n    ('model', RandomForestClassifier(max_features=5, n_estimators=500))\n])","31c5b527":"_ = tree_pipeline.fit(X_train, y_train)\n_ = rf_pipeline.fit(X_train, y_train)","65116502":"preds_tree = tree_pipeline.predict(X_test)\npreds_lm = rf_pipeline.predict(X_test)","6b8aa414":"plot_confusion_matrix(tree_pipeline, X_test, y_test, display_labels=['Not poisonous', 'Poisonous']);","a7bdeeee":"plot_confusion_matrix(rf_pipeline, X_test, y_test, display_labels=['Not poisonous', 'Poisonous']);","be469685":"tr_proba = tree_pipeline.predict_proba(X_test)\nrf_proba = rf_pipeline.predict_proba(X_test)\nr_proba = [0 for _ in range(len(y_test))]","9680e144":"tr_proba = tr_proba[:,1]\nrf_proba = rf_proba[:,1]","3651b8a7":"from sklearn.metrics import roc_curve, roc_auc_score\ntr_auc = roc_auc_score(y_test,tr_proba)\nrf_auc = roc_auc_score(y_test,rf_proba)\nr_auc = roc_auc_score(y_test,r_proba)","9ed65857":"tr_auc","f1b1609c":"rf_auc","843f1e1d":"r_auc","dd6e5cd2":"tr_fpr, tr_tpr, _ = roc_curve(y_test, tr_proba)\nrf_fpr, rf_tpr, _ = roc_curve(y_test, rf_proba)\nr_fpr, r_tpr, _ = roc_curve(y_test, r_proba)","4d22c066":"plt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\nplt.plot(tr_fpr, tr_tpr, marker='.', label='DecisionTreeClassifier (AUROC = %0.3f)' % tr_auc)\nplt.plot(rf_fpr, rf_tpr, marker='.', label='Random forest (AUROC = %0.3f)' % rf_auc)\n\n# Title\nplt.title('ROC Plot')\n# Axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# Show legend\nplt.legend() # \n# Show plot\nplt.show()","4d4e0421":"submisson = pd.read_csv('..\/input\/catalanmushrooms\/sample_results.csv')\n","5508d770":"tree_accuracy = accuracy_score(y_test, preds_tree)\ntree_accuracy","41e292eb":"pred_data=pd.DataFrame(preds_tree,columns=['poisonous'])\ntarget_pred=pd.concat([submisson['Id'],pred_data],axis=1)\ntarget_pred.info()","8811c5f9":"target_pred.to_csv('submisson.csv',index=False)","684c44e9":"# **Machine Learning in Python: Making Receiver Operating Characteristic (ROC) curve**\n\n\nIn this Jupyter notebook, we will be making a Receiver Operating Characteristic (ROC) curve using a synthetic data set as an example.","62e63d2d":"## Random Forest","03784f3f":"## **What is ROC curve?**\n\nThe **ROC curve** summarizes the prediction performance of a classification model at all classification thresholds. Particularly, the ROC curve plots the **False Positive Rate (FPR)** on the *X-axis* and the **True Positive Rate (TPR)** on the *Y-axis*.\n\n$\\text{TPR (Sensitivity)} = \\frac{TP}{TP + FN}$\n\n$\\text{FPR (1 - Specificity)} = \\frac{FP}{TN + FP}$","4fe8d792":"## Tree conf matrix\n\n","413da6d8":"## **Data splitting**","0208c48f":"## **Generate given dataset**"}}