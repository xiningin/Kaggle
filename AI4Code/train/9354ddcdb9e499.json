{"cell_type":{"e7b2e864":"code","5d454ff0":"code","b34fe5c7":"code","4eec81d8":"code","e76c67d9":"code","1d94979d":"code","b4001972":"code","77bc33a0":"code","378def3f":"code","540e54fb":"code","ccf99fbc":"code","a71c359a":"code","7b777fd0":"code","1313854d":"code","d0bcb6f9":"code","5e40a659":"code","5ede8a53":"code","1670bdd4":"code","fe73fb59":"code","e8f24f23":"code","881b4979":"code","85e6f6cc":"code","dfcdf9f6":"code","ca4fcc63":"code","12d8ad6f":"code","05c51479":"code","33bba820":"code","3770df32":"code","ad29c4dd":"code","d8e5b0f2":"code","e0056df3":"code","79aaa3ef":"code","a51d73f1":"code","c53c3ffd":"code","08d51d4f":"code","7b8f924f":"code","d70faeaf":"code","725265c1":"code","f95956b7":"code","9f9e7866":"code","ad3c1afe":"code","5f8b5531":"code","8e79fb8d":"code","d80a61a8":"code","71ff6084":"code","93890c12":"code","73e6addc":"markdown","c02079c6":"markdown","833866a5":"markdown","09a89f64":"markdown","7ef4af3c":"markdown","d14f3251":"markdown","be8bf74a":"markdown","1f9a4e41":"markdown","7486fed3":"markdown","f83600e7":"markdown"},"source":{"e7b2e864":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d454ff0":"from sklearn import preprocessing \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","b34fe5c7":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmit = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","4eec81d8":"data = pd.concat([train,test])\ndata","e76c67d9":"sns.countplot(data['Survived'])","1d94979d":"sns.countplot(data['Pclass'], hue=data['Survived'])","b4001972":"sns.countplot(data['Sex'], hue=data['Survived'])","77bc33a0":"sns.countplot(data['Embarked'], hue=data['Survived'])","378def3f":"data.info()","540e54fb":"data['Title1'] = data['Name'].str.split(\", \", expand=True)[1]","ccf99fbc":"data['Title1'].head()","a71c359a":"data['Title1'] = data['Title1'].str.split(\".\", expand=True)[0]","7b777fd0":"data['Title1'].head()","1313854d":"data['Title1'].unique()","d0bcb6f9":"data['Title1'] = data['Title1'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','the Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n         ['Miss','Mrs','Miss','Mr','Mr','Mrs','Mrs','Mr','Mr','Mr','Mr','Mr','Mr','Mrs'])","5e40a659":"data['Title1'].unique()","5ede8a53":"data['Title1'].unique()","1670bdd4":"data = pd.get_dummies(data, columns=['Title1'])","fe73fb59":"data.info()","e8f24f23":"data['Words_Count'] = data['Name'].apply(lambda x: len(x.split()))","881b4979":"data['Sex'] = data['Sex'].map({'male': 0, 'female': 1}).astype(int)","85e6f6cc":"age_mean = data['Age'].mean()\nage_std = data['Age'].std()\nage_fill = np.random.randint(age_mean - age_std, age_mean + age_std,)\n\nprint(age_fill)","dfcdf9f6":"data['Age'] = data['Age'].fillna(-1)\n\ndef funa(x):\n  x = np.random.randint(age_mean - age_std, age_mean + age_std,)\n  return x\n\n\ndata['Age'] = data['Age'].apply(lambda x: funa(x) if x == -1   else x)","ca4fcc63":"def func(x):\n  if int(x) <= 16:\n    x = 0\n    return x\n  elif int(x) > 16 and int(x) <= 32:\n    x = 1\n    return x\n  elif int(x) > 32 and int(x) <= 48:\n    x = 2\n    return x\n  elif int(x) > 48 and int(x) <= 64:\n    x = 3\n    return x\n  elif int(x) > 64:\n    x = 4\n    return x\n  # return x\n\ndata['Age'] = data['Age'].apply(lambda x: x if x < 0   else  func(x))\n","12d8ad6f":"data['Family_Size'] = data['Parch'] + data['SibSp']","05c51479":"data['Ticket_type'] = data['Ticket'].apply(lambda x: x[0:3])\ndata['Ticket_type'] = data['Ticket_type'].astype('category')\ndata['Ticket_type'] = data['Ticket_type'].cat.codes ","33bba820":"data['Fare'] = data['Fare'].fillna(data['Fare'].median())","3770df32":"def funf(x):\n  if int(x) <= 7.9:\n    x = 0\n    return x\n  elif int(x) > 7.9 and int(x) <= 14.45:\n    x = 1\n    return x\n  elif int(x) > 14.45 and int(x) <= 31.28:\n    x = 2\n    return x\n  elif int(x) > 31.28 and int(x) <= 512.33:\n    x = 3\n    return x\n  elif int(x) > 512.33:\n    x = 4\n    return x\n  # return x\n\ndata['Fare'] = data['Fare'].apply(lambda x: x if x < 0   else  funf(x))","ad29c4dd":"data['Has_Cabin'] = data['Cabin'].apply(lambda x: 0 if type(x) == float else 1 )","d8e5b0f2":"data['Embarked'] = data['Embarked'].fillna('S')","e0056df3":"data['Embarked'] = data['Embarked'].map({'S': 0, 'C': 1, 'Q': 2}).astype(int)","79aaa3ef":"data.info()","a51d73f1":"import seaborn as sns\nplt.figure(figsize=(14,12))\ndataset = data.iloc[:892]\n# dataset = dataset[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Family_Size', 'Embarked']]\nsns.heatmap(dataset.corr(), annot=True)","c53c3ffd":"data.drop(['SibSp','Family_Size','Age','Parch','Title1_Master'], inplace= True, axis=1)","08d51d4f":"dataTrain = data[pd.notnull(data['Survived'])].sort_values(by=[\"PassengerId\"])\ndataTest = data[~pd.notnull(data['Survived'])].sort_values(by=[\"PassengerId\"])","7b8f924f":"y = dataTrain['Survived']\ndataTrain = dataTrain.drop('Survived',axis=1)\ndataTest = dataTest.drop('Survived',axis=1)","d70faeaf":"dataTrain.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'],axis=1, inplace = True)\ndataTest.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'],axis=1, inplace = True)","725265c1":"dataTrain.info()","f95956b7":"dataTest.info()","9f9e7866":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier( n_estimators = 2000,\n                             min_samples_split = 3,\n                             min_samples_leaf = 5,\n                             oob_score = True,\n                             random_state = 1,\n                             n_jobs = -1)","ad3c1afe":"rfc.fit( dataTrain, y)","5f8b5531":"from xgboost.sklearn import XGBClassifier\n\ngbm = XGBClassifier(\n    learning_rate = 0.02,\n n_estimators= 2000,\n max_depth= 4,\n min_child_weight= 1,\n #gamma=1,\n gamma=1,                        \n subsample= 1,\n colsample_bytree=0.6,\n objective= 'binary:logistic',\n nthread= -1,\n scale_pos_weight=1).fit(dataTrain, y)","8e79fb8d":"X_test_final = dataTest\n\nyprob_r_test = rfc.predict_proba(X_test_final)\nyprob_x_test = gbm.predict_proba(X_test_final)","d80a61a8":"yprob_mean_test = (yprob_r_test + yprob_x_test)\/2.0","71ff6084":"result = yprob_mean_test.argmax(axis=1)\nprint(result)","93890c12":"submit['Survived'] = result\n\nsubmit['Survived'] = submit['Survived'].astype(int)\nsubmit.to_csv('submit.csv', index= False)\n","73e6addc":"**Name**","c02079c6":"**SibSp + Parch**","833866a5":"**Fare**","09a89f64":"**Ticket**","7ef4af3c":"**Age**","d14f3251":"**Embarked**","be8bf74a":"**Cabin**","1f9a4e41":"**Sex**","7486fed3":"**data processing**","f83600e7":"**train model**"}}