{"cell_type":{"5c4ad8ec":"code","e62951ac":"code","62001983":"code","8f7a2415":"code","136cfd6b":"code","08d62b5a":"code","3e247ab2":"code","da0d7de9":"code","a558d8d8":"code","89446f27":"code","45b3fad8":"code","e934a0a9":"code","7976f42f":"code","bc12c804":"code","a3202f8e":"code","d284da7e":"code","bc8ece1f":"code","77c437d7":"code","5a335755":"code","f2880bed":"code","74963e88":"code","6cd1a570":"markdown","f1fd74b9":"markdown","8b77e6c1":"markdown","24abbc88":"markdown","4268f25e":"markdown","a3ab173f":"markdown","d49fc7db":"markdown","cdbed777":"markdown","0cf7610e":"markdown","e12553e1":"markdown","5e9822ac":"markdown","819ffe3b":"markdown","95aac700":"markdown","f691e94c":"markdown","1adc3e8c":"markdown","f9cb3c7a":"markdown","f827f453":"markdown","ebab04bc":"markdown","c0440313":"markdown","e655fa1a":"markdown","9486da89":"markdown"},"source":{"5c4ad8ec":"# import pandas\nimport pandas as pd\n\n#import matplotlib for plotting\nimport matplotlib.pyplot as plt","e62951ac":"# importing the data\nbody_data=pd.read_csv('..\/input\/body-measurements\/measures.csv')\n\n# inspecting the dataset to check that it has imported correctly\nbody_data.head()","62001983":"# describe and\/or boxplots to check each field","8f7a2415":"# display a scatter diagram for age vs brozek body fat percentage\nbody_data.plot.scatter(x='age', y='brozek', figsize=(12,8))\nplt.show()","136cfd6b":"# display more scatter diagrams\n","08d62b5a":"# import numpy for handling lists\/arrays\nimport numpy as np \n\n#import linear_model (for creating the model) and r2_score (for measuring how well the model fits the data)\nfrom sklearn import linear_model\nfrom sklearn.metrics import r2_score","3e247ab2":"# create the testing subset from 80% of the original dataset\nbody_data_train=body_data.head(200)\nbody_data_train.head()","da0d7de9":"# create the testing subset from 20% of the original dataset\nbody_data_test=body_data.tail(50)\nbody_data_test.head()","a558d8d8":"# find the size of the testing and training datasets\n","89446f27":"# create the target data for training as a list\ntarget_train=body_data_train['brozek']\nprint(target_train)","45b3fad8":"# create an array for the input data\ninput_a_train=body_data_train[['weight']]\n\n# define the model to be used as linear\nmodel_a = linear_model.LinearRegression()\n\n# fit a linear model to the data\nmodel_a.fit(input_a_train, target_train)\n\n# output the coefficients and y-intercept\nprint('Coefficients: \\n', model_a.coef_)\nprint('Intercept: \\n', model_a.intercept_)","e934a0a9":"# create the target data for testing as a list\ntarget_test=body_data_test['brozek']\nprint(target_test)","7976f42f":"# create list for the test input data\ninput_a_test=body_data_test[['weight']]\n\n# use the input data to create a list of predictions\ntarget_pred_a = model_a.predict(input_a_test)\n\n# calculate and display the coefficient of determination\nprint(\"Brozek body fat percentage vs weight: R\u00b2=\"+str(r2_score(target_test, target_pred_a)))","bc12c804":"# fit a linear model\n","a3202f8e":"# calculate R\u00b2\n","d284da7e":"# create an array for the input data\ninput_g_train=body_data_train[['weight','chest']]\n\n# define the model to be used as linear\nmodel_g = linear_model.LinearRegression()\n\n# fit a linear model to the data\nmodel_g.fit(input_g_train, target_train)\n\n# output the coefficients and y-intercept\nprint('Coefficients: \\n', model_g.coef_)\nprint('Intercept: \\n', model_g.intercept_)","bc8ece1f":"# create an array for the input data\ninput_g_test=body_data_test[['weight','chest']]\n\n# use the input data to create a list of predictions\ntarget_pred_g = model_g.predict(input_g_test)\n\n# The coefficient of determination: 1 is perfect prediction\nprint(\"Brozek body fat percentage vs weight and chest size: R\u00b2=\"+str(r2_score(target_test, target_pred_g)))","77c437d7":"# find the model\n\n","5a335755":"# measure the model\n","f2880bed":"# find the model","74963e88":"# measure the model","6cd1a570":"# MEI Introduction to Data Science\n# Lesson 7 - Activity 1\nThe problem in this activity is an introduction to one type of *machine learning*. In it you will explore how the values in one or more fields in a dataset can be used form a model to predict the values in another field. \n\nThe activity is based on body fat percentage: https:\/\/en.wikipedia.org\/wiki\/Body_fat_percentage. This is less easy to measure than other quantities such as height or weight. One way of measuring it is the *Brozek* estimate based on the body's density; however, this requires the volume of the body to be measured. You will explore whether other more easily measured quantities could be used to predict an expected body fat percentage. ","f1fd74b9":"* Run the code in the boxes below to import the libraries\/commands and import the data","8b77e6c1":"## Exploring the data\nBefore trying to build a model you should check that the values in each field are appropriate.\n* Add and run code in the box below to describe and\/or boxplots to check each field","24abbc88":"## Analysing the data (1)\nFor the analysis of this data you are going to construct models for predicting an expected Brozek body fat percentage. Initially you will look at simple linear functions of one variable: this is the same as *drawing a line of best fit* or *finding a regression line*. To do this you will need to import some additional libraries and commands:\n\n`numpy` is the numerical library often used in Python programs. You need it here so that the `sklearn` can read the lists\/array or numbers correctly.\n\n`sklearn` is the *scikit-learn* library. This is required for creating and anlaysing your linear model. You do not need the full library so the commands `linear_model` (for creating the model) and `r2_score` (for measuring how well the model fits the data) are imported individually.\n* Run the code below to import these libraries and commands","4268f25e":"You can check that the training and testing datasets have split the data into appropriate proportions by using the `shape` command.\n* Add and run some code in the box below to find the sizes of the training and testing datasets.","a3ab173f":"To fit the model to the data you need to create the input column for the training data as a list, tell Python you want to use the Linear Regression model and fit this to the data. The `linear_model` command you have imported will fit the best line to the training subset. \n* Run the code below to fit the model and output the coefficient (i.e. gradient) and intercept of your linear model","d49fc7db":"* Display scatter diagrams for the brozek body fay percentage (plotted on the y-axis) against the other measures (plotted on the axis).","cdbed777":"## Analysing the data (3) - extension work \nYou are not restricted to linear functions of single variables or pairs of variables. In the boxes below you could try the extension task of fitting and judging some other models for the data such as linear models of more than two variables or non-linear models using products, powers, exponential or logrithmic functions.\n\n*Note: BMI is one such non-linear model that is calculated by dividing the weight (in kg) by the sqaure of the height (in m). ","0cf7610e":"### Creating training and testing datasets\nIn A level Mathematics, you judge the fit of a regression line by seeing how close it is to the data it was calculated from. In data science, an alternative method is often used: the line (or any other function) is fitted to one dataset (the *training* set) and then its predictions on another dataset (the *testing* set) are used to judge how good the fit is.\n\nAs you do not have two separate sources of data in this activity, you can achieve the same effect by splitting the dataset into two smaller parts. You can take the top 80% of rows for the training set and the bottom 20% of the rows for the testing set. *Note: this makes the assumption that the rows in the dataset are in a random order. If this had not been the case (for example, if the data had been in age order) then a random split into two sets would be needed.*\n\nThe training dataset is used to create the model. The testing dataset is used to evaluate the model. This is effectively the same as taking a new set of data and measuring how closely your predictions match reality.\n* Run the code in the boxes below to select 80% of the dataset for the training subset and 20% for the testing subset","e12553e1":"**Checkpoint**\n> * Which of the other measurements appear to be associate with the Brozek body fat percentage? Use your scatter diagrams to justify your answer.\n> * For each of the fields give at least one reason why you either would or wouldn't expected it to be associated with body fat percentage. ","5e9822ac":"## Problem\n> Can body measurements be used to estimate the expected body fat percentage?","819ffe3b":"### Exploring other fields\n* In the boxes below add and run code to fit a linear model and find the value of *R*\u00b2 for at least two of the other fields as input variables - you should choose the input variables that appeared to be most associated with *brozek*","95aac700":"### Judging the model\nIn this activity you are trying to create a model that will predict an average brozek body fat percentage in terms of other variables. This model can be judged by using the coefficient of determination, *R*\u00b2. This indicates the proportion of the variation accounted for by the model; e.g. *R*\u00b2=0.7 would indicate that 70% of the variation in brozek is accounted for by the predictions of the model and 30% is due to deviations from the predicted value.\n\nWhen the model is a simple linear function of one variable (as it is in A level Mathematics), *R*\u00b2 is just the same as *r*\u00b2, the square of the pmcc. The notation *R*\u00b2 is used when the model is any more complicated than that. The *R*\u00b2 measure can be used to compare the goodness of fit of different models including linear functions of more than one variable or non-linear functions.  For more details see: https:\/\/en.wikipedia.org\/wiki\/Coefficient_of_determination\n* Run the code in the boxes below to create the taget list for testing and calculate *R*\u00b2 for brozek body fat measure plotted against weight ","f691e94c":"## Communicating the result\nUse your analysis above to answer the original problem:\n> Can body measurements be used to estimate the expected body fat percentage?","1adc3e8c":"**Checkpoint**\n* Which of the pairs of other fields gave the best models for predicting the expected *Brozek* body fat percentage? Were these models better than the linear functions of a single variable?\n* State the equations for your lines of best fit algebraically (e.g. you could write the prediction for body fat, *f*, based on weight, *w*, and height, *h* as *f* = 3.1*w* + 2.1*h* + 20). \n* Choose at least three rows from the original dataset and use each of your linear models to calculate the expected *Brozek* body fat percentage. How well do these compare to the actual recorded *Brozek* body fat percentage?","f9cb3c7a":"### Fitting a model to the data\nNow you have a training dataset you can use this to try and fit a linear model to the data. This is acheived in two stages: creating a list of the target data and fitting a linear model to the data. \n* Run the code below to create the target list from the training data","f827f453":"## Getting the data\nThis activity uses data recorded from 250 adults in the United States and includes the *Brozek* body fat percentage. The values recorded are:\n* age (years)\n* height (inches)\n* weight (pounds)\n* chest (cm)\n* abdom (cm)\n* brozek (%)","ebab04bc":"**Checkpoint**\n* Which of the other fields gave the best models for predicting the expected *Brozek* body fat percentage?\n* State the equations for your lines of best fit algebraically (e.g. you could write the prediction for body fat, *f*, based on weight, *w*, as *f* = 3.1*w* + 20). \n* Choose at least three rows from the original dataset and use each of your linear models to calculate the expected *Brozek* body fat percentage. How well do these compare to the actual recorded *Brozek* body fat percentage?","c0440313":"## Analysing the data (2)\n### Fitting and measuring a linear model in two variables to the training dataset \nThe models created so far used a single variable to create a prediction but you are not restricted to this: it is possible to create a prediction model using a combination of two, or more, input variables. \n\nThis is difficult to visualise. You could represent a linear model  of two input variables used to predict a third value as as a plane in 3D space but for more than two input variables a simple visualisation isn't viable. However, it is straightforward to write linear functions of multiple variables algebraically. For example a linear function predicting body fat (*f*) based on weight (*w*) and height (*h*) can be written as:\n\n*f* = *a w* + *b h* + *c*\n\nwhere *a*, *b* and *c* are coefficients\/intercept to be determined.\n* Run the code below to create and measure the model for body fat as a linear function of weight and chest size - *Note that the first model used here is labelled as g as you might have used up to 6 models in the previous analysis*","e655fa1a":"You can use a scatter diagram to explore the association between each of the fields and the Brozek percentage.\n* Run the code below to display the scatter diagram for brozek plotted against age","9486da89":"### Exploring other pairs fields\n* In the boxes below add and run code to fit a linear model and find the value of *R*\u00b2 for other pairs of input variables. You should do this for at least two other pairs of fields as input variables. Your analysis in the previous section should help you decide which pairs to use based on those that appeared to be most associated with *brozek*."}}