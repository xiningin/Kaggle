{"cell_type":{"d4d5a145":"code","7e3e686b":"code","ba7b0738":"code","14cdaba9":"code","c7c496f4":"code","3fa1e54d":"code","15fefd19":"code","2f6b767f":"code","e382d623":"code","52472a51":"code","5b145464":"code","e308be15":"code","92422285":"code","cf2af92e":"code","ab23e15e":"code","43be8da2":"code","b0207313":"code","1cbf7c19":"code","90113009":"code","7fbf1c60":"code","82c23e39":"code","cc1c91ef":"code","ded941ec":"code","c8c5303a":"code","b3d8f42c":"code","8f2aabd7":"code","07851fe5":"code","80870e36":"code","354fb7c6":"markdown","c4c1a868":"markdown","29f55d41":"markdown","3fdbb6a6":"markdown","4eb12d71":"markdown","5ee3a056":"markdown","40331c4b":"markdown","0854783f":"markdown","10bc84a5":"markdown","39729f36":"markdown","03f9b706":"markdown","50eb1c2d":"markdown","094456c8":"markdown","46349494":"markdown","e0eeaf32":"markdown","4af8c28e":"markdown","57227602":"markdown","ce130536":"markdown","71e127e7":"markdown"},"source":{"d4d5a145":"# LoL analysis code\n# import libraries\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport json\nsns.set_style('darkgrid')\n\n# Use this in notebook to show plots\n%matplotlib inline","7e3e686b":"def idToName(ID, dic):\n    '''\n    ID: champion ID as listed in original dataframe\n    dic: champInfo from json, defined above\n\n    used to convert ID's to champion names\n    '''\n    champ = dic['name'][ID]\n    return champ\n\ndef getTag(name, data):\n    '''\n    name: champion name as listed in dataframe\n    data: champInfo\n\n    used to get primary tag from champInfo\n    '''\n    tags = data['tags'][name][0]\n    return tags\n\ndef numToColor(data):\n    '''\n    data: main dataframe\n\n    used to get color of team from 0 or 1\n    '''\n    if data == 0:\n        color = 'blue'\n    else:\n        color = 'red'\n    return color","ba7b0738":"data = pd.read_csv('..\/input\/games.csv')\ndata.head()","14cdaba9":"jDict = pd.read_json('..\/input\/champion_info_2.json')\nchampInfo = pd.read_json((jDict['data']).to_json(), orient='index')\nchampInfo.head()","c7c496f4":"spellJson = pd.read_json('..\/input\/summoner_spell_info.json')\nspellInfo = pd.read_json((spellJson['data']).to_json(),orient='index')\nspellInfo.head()","3fa1e54d":"champInfo.set_index(['id'], inplace=True)\nchampInfo.head()","15fefd19":"champCols = ['t1_champ1id','t1_champ2id','t1_champ3id','t1_champ4id','t1_champ5id',\n             't2_champ1id','t2_champ2id','t2_champ3id','t2_champ4id','t2_champ5id']\nbanCols = ['t1_ban1','t1_ban2','t1_ban3','t1_ban4','t1_ban5',\n             't2_ban1','t2_ban2','t2_ban3','t2_ban4','t2_ban5',]\nsumSpellsCols = ['t1_champ1_sum1','t1_champ1_sum2','t1_champ2_sum1','t1_champ2_sum2','t1_champ3_sum1','t1_champ3_sum2',\n                 't1_champ4_sum1','t1_champ4_sum2','t1_champ5_sum1','t1_champ5_sum2','t2_champ1_sum1','t2_champ1_sum2',\n                 't2_champ2_sum1','t2_champ2_sum2','t2_champ3_sum1','t2_champ3_sum2','t2_champ4_sum1','t2_champ4_sum2',\n                 't2_champ5_sum1','t2_champ5_sum2']\n","2f6b767f":"for c in champCols:\n    data[c] = data[c].apply(lambda x: idToName(x, champInfo))\n\nfor c in banCols:\n    data[c] = data[c].apply(lambda x: idToName(x, champInfo)) \n\nfor c in sumSpellsCols:\n    data[c] = data[c].apply(lambda x: idToName(x, spellInfo))","e382d623":"data[champCols].head()","52472a51":"data[banCols].head()","5b145464":"data[sumSpellsCols].head()","e308be15":"champInfo.set_index(['name'],inplace=True)\nchampInfo.head()","92422285":"for col in champCols:\n    data[col + '_tags'] = data[col].apply(lambda x: getTag(x, champInfo))\ndata.head()","cf2af92e":"sumPicks = pd.concat([data['t1_champ1id'],data['t1_champ2id'],data['t1_champ3id'],data['t1_champ4id'],data['t1_champ5id'],\n                      data['t2_champ1id'],data['t2_champ2id'],data['t2_champ3id'],data['t2_champ4id'],data['t2_champ5id']],\n                      ignore_index=True)\nsortedPicks = sorted(sumPicks)\nsumBans = pd.concat([data['t1_ban1'],data['t1_ban2'],data['t1_ban3'],data['t1_ban4'],data['t1_ban5'],\n                     data['t2_ban1'],data['t2_ban2'],data['t2_ban3'],data['t2_ban4'],data['t2_ban5']],\n                     ignore_index=True)\nsortedBans = sorted(sumBans)","ab23e15e":"fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=False, figsize=(15,30))\nplt.xticks(rotation=90)\nsns.countplot(y=sortedPicks, data=data, ax=ax1)\nsns.countplot(y=sortedBans, data=data, ax=ax2)\nax1.set_title('Champion Picks')\nax2.set_title('Champion Bans')","43be8da2":"tagsCols = ['t1_champ1id_tags', 't1_champ2id_tags', 't1_champ3id_tags',\n       't1_champ4id_tags', 't1_champ5id_tags', 't2_champ1id_tags',\n       't2_champ2id_tags', 't2_champ3id_tags', 't2_champ4id_tags',\n       't2_champ5id_tags']","b0207313":"tagsTotals = data[tagsCols].apply(pd.value_counts)\ntagsTotals['count'] = tagsTotals[tagsCols].sum(axis=1)\ntagsTotals","1cbf7c19":"sns.barplot(x=tagsTotals.index,y=tagsTotals['count'])","90113009":"spellsTotals = data[sumSpellsCols].apply(pd.value_counts)\nspellsTotals['count'] = spellsTotals[sumSpellsCols].sum(axis=1)\nspellsTotals","7fbf1c60":"spellColors = [\"#6E2C00\",\"#1A5276\",\"#9A7D0A\",\"#F1C40F\",\"#3498DB\",\"#58D68D\",\"#E74C3C\",\"#F39C12\",\"#8E44AD\"]\nsns.barplot(x=spellsTotals.index,y=spellsTotals['count'],palette=spellColors)","82c23e39":"dataClean = data.replace([0,1,2],['neither','blue','red'])\ndataClean.head()","cc1c91ef":"firsts = ['firstBlood','firstTower', 'firstInhibitor', 'firstBaron', 'firstDragon', 'firstRiftHerald']\nfirstTotals = dataClean[firsts].apply(pd.value_counts)\nnewIndex = ['blue','red','neither']\nfirstSort = firstTotals.reindex(index=newIndex)\nfirstSort","ded941ec":"plotColors = ['#3498DB','#E74C3C','#BDC3C7']\nfirstLabels = ['First Blood','First Tower', 'First Inhibitor', 'First Baron', 'First Dragon', 'First Rift Herald']\nnrows, ncols = 2,3\nfig = plt.figure(figsize=(15,10))\nfor i in range(1,7):\n    ax = fig.add_subplot(nrows,ncols,i)\n    sns.barplot(x=firstSort.index,y=firstSort[firstSort.columns[i-1]],palette=plotColors)\n    ax.set_ylabel('Count')\n    ax.yaxis.set_ticklabels([])\n    ax.set_title(firstLabels[i-1])","c8c5303a":"import pandas as pd\nimport nltk","b3d8f42c":"# the spells and their descriptions\n# goes: \n# data : { desc... }\nspellJson = pd.read_json('..\/input\/summoner_spell_info.json')\nspellInfo = pd.read_json((spellJson['data']).to_json(),orient='index')\nspellInfo.head()","8f2aabd7":"# tokenizing words \ndef tokenier(df):\n    newdf = df.copy()\n    for row, index in df.iterrow():\n        sentence = df['description']\n        tokens = nltk.word_tokenize(sentence)\n        tokens\n        \n","07851fe5":"tokenizer('spellInfo')","80870e36":"# or maybe I should use keras\n# it's pretty hot \nfrom keras.preprocessing.text import text_to_word_sequence\n# define the document\ntext = 'The quick brown fox jumped over the lazy dog.'\n# tokenize the document\nresult = text_to_word_sequence(text)\nprint(result)","354fb7c6":"## I want to see if badass sounding spells actually do more damage\nto do that I'll have to figure out which spells have sentiment that would qualify as \"badass\". I'm going to use `nltk` and look for the most bad-ass ones then figure out which spells were used in the most victories. ","c4c1a868":"## Just for fun, a countplot of types of champions and summoner spells used ##","29f55d41":"## Let's make a countplot for total champion picks and bans over the entire dataset #","3fdbb6a6":"## import champion info json and grab the data","4eb12d71":"## apply the getTag function for these columns so we have new primary champion tags columns","5ee3a056":"### For the plots, we'll create a custom color palette, then create the subplots with a for loop","40331c4b":"## create list of columns of user picks and another list for bans","0854783f":"### Interesting to see how many popular Thresh and Tristana have become, as well as how much people REALLY don't like to play against Yasuo, Zed, Cho'Gath and Darius!","10bc84a5":"Create sorted series of the picks and bans, as well as a series of the primary tag for each champion pick","39729f36":"## Looks like if you don't have flash you're clearly in the minority! ##","03f9b706":"### Not entirely surprising, but still interesting to see! ###","50eb1c2d":"### Temporarily set index to id ","094456c8":"## Let's look at champion picks and bans # ","46349494":"### Here, we take the columns we want and get a value count on them, then reindex them to make the plot look cleaner","e0eeaf32":"## import original data","4af8c28e":"## apply the idToName function for these columns so we have champion names rather than ID's","57227602":"## Set champInfo dataframe index to champion names","ce130536":"### Interesting to see. Here are some points I see worth making:\n* Most of the plots are pretty even, but the difference in first baron could be due to the proximity of the baron pit to the red base, and the fact that their positioning makes it easier to steal? \n* The 'neither' count for first baron shows that over half of the games ended without a baron being taken.\n* First Blood is slightly in favor of the blue team. Perhaps the blue team has an edge early game in terms of jungle control? \n\n### I'd love to hear what you guys think!\n","71e127e7":"## Let's look at who is getting most of the 'first' objectives! ##\nWe need to create a new dataframe with the team colors as the values to make plotting easier later on"}}