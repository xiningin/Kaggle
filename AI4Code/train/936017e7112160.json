{"cell_type":{"244520a5":"code","da8ca5db":"code","bed78baa":"code","8a9540da":"code","b3f85b6b":"code","b4275e4b":"code","afb5e724":"code","e66461e3":"code","b6a1639d":"code","67906160":"code","d437923e":"code","65d89277":"code","1d63b095":"code","f1519b4a":"code","a513c7b4":"code","48d9e093":"code","c2ce060a":"code","1e9e6986":"code","7b2da2de":"code","0ca4fba7":"code","7ffd7850":"code","98fe5cac":"code","60e44b13":"code","75241db4":"code","4cba9e47":"code","902acc81":"code","f522d0c8":"code","7d901bde":"code","bcd82c87":"code","6ee2a146":"code","6f891c0d":"markdown","ef3895e4":"markdown"},"source":{"244520a5":"from keras.layers import Input, Lambda, Dense, Flatten\nfrom keras.models import Model\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom sklearn.metrics import f1_score, accuracy_score, confusion_matrix\nimport numpy as np\nfrom glob import glob\nimport matplotlib.pyplot as plt","da8ca5db":"IMAGE_SIZE = [224, 224, 3]\nbatch_size = 64\ntrain_path = '..\/input\/brain-tumor-classification-mri\/Training'\nfolders = glob(train_path+'\/*')\nprint(folders)\nnoclasses = len(folders)\nprint(noclasses)","bed78baa":"for path in folders:\n    files = glob(path+'\/*')\n    print(path, len(files))","8a9540da":"vgg = VGG16(input_shape=IMAGE_SIZE, weights='imagenet', include_top=False)","b3f85b6b":"for i, layer in enumerate(vgg.layers):\n    if i<15:\n        layer.trainable = False\n    \n    print(i, layer, layer.trainable)\n    ","b4275e4b":"x = Flatten()(vgg.output)\nprediction = Dense(noclasses, activation='softmax')(x)\nmodel = Model(inputs=vgg.input, outputs=prediction)","afb5e724":"model.summary()","e66461e3":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","b6a1639d":"datagen = ImageDataGenerator(rescale=1.0\/255, \n                             shear_range=0.2, \n                             zoom_range=0.2, \n                             horizontal_flip=True,\n                             validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory(train_path, \n                                              shuffle=True,\n                                              target_size = (224,224),\n                                              batch_size = batch_size,\n                                              class_mode = 'categorical',\n                                              subset='training') # set as training data\n\ntest_generator = datagen.flow_from_directory(train_path, \n                                             shuffle=False,\n                                             target_size = (224,224),\n                                             batch_size = batch_size,\n                                             class_mode = 'categorical',\n                                             subset='validation') # set as validation data","67906160":"model_history = model.fit(train_generator, \n                          validation_data=test_generator,\n                          epochs=25,\n                          steps_per_epoch=len(train_generator),\n                          validation_steps=len(test_generator),\n                          initial_epoch=20)","d437923e":"plt.plot(model_history.history['loss'], label='train loss')\nplt.plot(model_history.history['val_loss'], label='validation loss')\nplt.plot(model_history.history['accuracy'], label='train accuracy')\nplt.plot(model_history.history['val_accuracy'], label='validation accuracy')\nplt.legend()\nplt.show()","65d89277":"pred = model.predict(test_generator)","1d63b095":"pred = np.argmax(pred, axis=1)","f1519b4a":"pred","a513c7b4":"test_generator.labels","48d9e093":"print(accuracy_score(test_generator.labels, pred))\nprint(f1_score(test_generator.labels, pred,average='weighted'))\nprint(confusion_matrix(test_generator.labels, pred))","c2ce060a":"print(accuracy_score(test_generator.labels, pred))\nprint(f1_score(test_generator.labels, pred,average='weighted'))\nprint(confusion_matrix(test_generator.labels, pred))","1e9e6986":"model.save('VGG16.h5')","7b2da2de":"model_name = ResNet50(input_shape=IMAGE_SIZE, weights='imagenet', include_top=False)\n\nfor i, layer in enumerate(model_name.layers):\n    if i<165:\n        layer.trainable = False\n    \n    print(i, layer, layer.trainable)\n    \nx = Flatten()(model_name.output)\nprediction = Dense(noclasses, activation='softmax')(x)\nmodel = Model(inputs=model_name.input, outputs=prediction)","0ca4fba7":"model.summary()","7ffd7850":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","98fe5cac":"datagen = ImageDataGenerator(rescale=1.0\/255, \n                             shear_range=0.2, \n                             zoom_range=0.2, \n                             horizontal_flip=True,\n                             validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory(train_path, \n                                              shuffle=True,\n                                              target_size = (224,224),\n                                              batch_size = batch_size,\n                                              class_mode = 'categorical',\n                                              subset='training') # set as training data\n\ntest_generator = datagen.flow_from_directory(train_path, \n                                             shuffle=False,\n                                             target_size = (224,224),\n                                             batch_size = batch_size,\n                                             class_mode = 'categorical',\n                                             subset='validation') # set as validation data","60e44b13":"model_history = model.fit(train_generator, \n                          validation_data=test_generator,\n                          epochs=30,\n                          steps_per_epoch=len(train_generator),\n                          validation_steps=len(test_generator))","75241db4":"plt.plot(model_history.history['loss'], label='train loss')\nplt.plot(model_history.history['val_loss'], label='validation loss')\nplt.plot(model_history.history['accuracy'], label='train accuracy')\nplt.plot(model_history.history['val_accuracy'], label='validation accuracy')\nplt.legend()\nplt.show()","4cba9e47":"plt.plot(model_history.history['loss'], label='train loss')\nplt.plot(model_history.history['val_loss'], label='validation loss')\nplt.plot(model_history.history['accuracy'], label='train accuracy')\nplt.plot(model_history.history['val_accuracy'], label='validation accuracy')\nplt.legend()\nplt.show()","902acc81":"pred = model.predict(test_generator)\npred = np.argmax(pred, axis=1)\npred","f522d0c8":"test_generator.labels","7d901bde":"print(accuracy_score(test_generator.labels, pred))\nprint(f1_score(test_generator.labels, pred,average='weighted'))\nprint(confusion_matrix(test_generator.labels, pred))","bcd82c87":"print(accuracy_score(test_generator.labels, pred))\nprint(f1_score(test_generator.labels, pred,average='weighted'))\nprint(confusion_matrix(test_generator.labels, pred))","6ee2a146":"model.save('ResNet50.h5')","6f891c0d":"## ResNet50","ef3895e4":"# Brain Tumor Detection using Transfer Learning"}}