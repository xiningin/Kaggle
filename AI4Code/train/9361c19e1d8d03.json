{"cell_type":{"4a70f33b":"code","dcec0514":"code","9d1b2b53":"code","e9daa917":"code","9f0cc6c6":"code","be51157f":"code","11e17ea6":"code","5dc99ee6":"code","fbbb03f5":"code","9ebe6523":"code","b01cb0df":"code","03c45a9c":"code","ef415e5e":"code","35305ed3":"code","a883db80":"code","1e96d7a2":"code","189f3cd1":"code","08b8173c":"code","135853f8":"code","f9c19fa5":"code","a61c6b45":"code","6e01d604":"code","2686881c":"code","1a28db03":"code","510dd6b9":"code","45fb5636":"markdown","d66b9d34":"markdown","3b6d9620":"markdown","b9a519aa":"markdown","be02e8e4":"markdown","8a019736":"markdown","0dc3d870":"markdown","c80e44e7":"markdown","a51cf15d":"markdown","3db7c205":"markdown","17d6e953":"markdown","7847233c":"markdown","daae6239":"markdown","9127655b":"markdown","b6a27a0e":"markdown","95a0480c":"markdown","ebc76582":"markdown","0758d925":"markdown","77b3a26c":"markdown","9e113773":"markdown","473ad173":"markdown","f4ab4e0b":"markdown","30f03ac6":"markdown","ffc087c2":"markdown","b3debaa7":"markdown","0260fc57":"markdown","ba6cd7ff":"markdown","960d51fd":"markdown","adc5e64d":"markdown","fd834431":"markdown","74e494ff":"markdown","ced624fe":"markdown"},"source":{"4a70f33b":"# Intel\u00ae Extension for Scikit-learn installation:\n!pip install scikit-learn-intelex","dcec0514":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom math import factorial\nimport gc\nimport joblib\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_validate","9d1b2b53":"train = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv\")","e9daa917":"print(\"Train shape\", train.shape)","9f0cc6c6":"plt.figure(figsize=(12, 6))\n\ntrain.target.value_counts().plot.bar()\n\nplt.show()","be51157f":"features = train.columns[1:-1]\n\nimport re\n\ndef split_feature(st):\n    counts = list(map(int, re.split('A|T|G|C', st)[1:]))\n    return counts\n\nfeat2counts = {c: split_feature(c) for c in features}","11e17ea6":"sums = list()\nfor feat in features:\n    xa, xt, xg, xc = feat2counts[feat]\n    s = xa+xt+xg+xc\n    sums.append(s)\n    \nprint(f\"All the histograms sums the bases to: {np.unique(sums)}\")","5dc99ee6":"a = [0 for i in range(11)]\nt = [0 for i in range(11)]\ng = [0 for i in range(11)]\nc = [0 for i in range(11)]\n\nfor feat in features:\n    xa, xt, xg, xc = feat2counts[feat]\n    a[xa] += 1\n    t[xt] += 1\n    g[xt] += 1\n    c[xc] += 1\n    \nplt.figure(figsize=(20, 3))\n\nplt.subplot(2, 2, 1,)\nplt.title(\"A\")\nplt.bar(range(11), height=a)\n\nplt.subplot(2, 2, 2,)\nplt.title(\"T\")\nplt.bar(range(11), height=t)\n\nplt.subplot(2, 2, 3,)\nplt.title(\"G\")\nplt.bar(range(11), height=g)\n\nplt.subplot(2, 2, 4,)\nplt.title(\"C\")\nplt.bar(range(11), height=c)\n\nplt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.7, \n                    top=1.3, \n                    wspace=0.3, \n                    hspace=0.5)\n\nplt.show()","fbbb03f5":"plt.figure(figsize=(6, 4))\n\nplt.plot(np.sqrt(a))\nplt.title(\"Count decrease\")\n\nplt.show()","9ebe6523":"freqs = train.set_index('row_id').groupby('target').mean()\nvaria = train.set_index('row_id').groupby('target').std()\n\nfor target in train.target.unique():\n    \n    fig = plt.figure(figsize=(14, 6))\n    plt.margins(0.015, tight=True)\n    \n    ax = plt.subplot(1, 2, 1)\n    freqs[freqs.index==target].plot.bar(ax=ax, width=1.0)\n    _lg = ax.get_legend()\n    _lg.remove()\n\n    plt.xticks(rotation = 0)\n\n    plt.title(\"Distribution of measurements\")\n    \n    ax = plt.subplot(1, 2, 2)\n    varia[varia.index==target].plot.bar(ax=ax, width=1.0)\n    _lg = ax.get_legend()\n    _lg.remove()\n\n    plt.xticks(rotation = 0)\n\n    plt.title(\"Variability of measurements\")\n\n\n    plt.show()","b01cb0df":"def plot_a_sample(case):\n    fig = plt.figure(figsize=(14, 6))\n    bacterium = train.set_index('row_id').iloc[case, -1]\n    x = train.set_index('row_id').iloc[case, :-1]\n    x.plot.bar()\n    plt.xticks(np.arange(0, len(features), 24), \"\")\n    plt.title(f\"row {case} | bacterium {bacterium}\")\n    plt.show()\n    \nplot_a_sample(case=0)\nplot_a_sample(case=6)\nplot_a_sample(case=9)","03c45a9c":"def feature_engineering(df):\n    \n    df['mean'] = df[features].mean(axis=1)\n    df['median'] = df[features].median(axis=1)\n    df['q01'] = df[features].quantile(q=0.01, axis=1)\n    df['q05'] = df[features].quantile(q=0.05, axis=1)\n    df['q10'] = df[features].quantile(q=0.10, axis=1)\n    df['q25'] = df[features].quantile(q=0.25, axis=1)\n    df['q75'] = df[features].quantile(q=0.75, axis=1)\n    df['q90'] = df[features].quantile(q=0.90, axis=1)\n    df['q95'] = df[features].quantile(q=0.95, axis=1)\n    df['q99'] = df[features].quantile(q=0.99, axis=1)\n    df['max'] = df[features].max(axis=1)\n    df['min'] = df[features].min(axis=1)\n    \n    df['std'] = df[features].std(axis=1)\n    df['range'] = df['max'] - df['min']\n    df['iqr'] = df['q75'] - df['q25']\n    df['tails'] = df['range'] \/ df['iqr']\n    df['dispersion'] = df['std'] \/ df['mean']\n    df['dispersion_2'] = df['iqr'] \/ df['median']\n    df['skew'] = df[features].skew(axis=1)\n    df['kurt'] = df[features].kurt(axis=1)\n    \n    df['median-max'] = df['median'] - df['max']\n    df['median-min'] = df['median'] - df['min']\n    df['q99-q95'] = df['q99'] - df['q95']\n    df['q99-q90'] = df['q99'] - df['q90']\n    df['q01-q05'] = df['q01'] - df['q05']\n    df['q01-q10'] =  df['q01'] - df['q10']\n    \n    return df\n\nfeature_engineering(test)\nfeature_engineering(train)\noriginal_features = features[:]\n#features = [col for col in train.columns if col not in ['row_id', 'target']]","ef415e5e":"def bias(w, x, y, z):\n    return factorial(10) \/ (factorial(w) * factorial(x) * factorial(y) * factorial(z) * 4**10)\n\ndef bias_of(s):\n    w = int(s[1:s.index('T')])\n    x = int(s[s.index('T')+1:s.index('G')])\n    y = int(s[s.index('G')+1:s.index('C')])\n    z = int(s[s.index('C')+1:])\n    return factorial(10) \/ (factorial(w) * factorial(x) * factorial(y) * factorial(z) * 4**10)\n\ntrain_i = pd.DataFrame({col: ((train[col] + bias_of(col)) * 1000000).round().astype(int) for col in original_features})\ntest_i = pd.DataFrame({col: ((test[col] + bias_of(col)) * 1000000).round().astype(int) for col in original_features})\n\ndef gcd_of_all(df_i, elements=original_features):\n    gcd = df_i[elements[0]]\n    for col in elements[1:]:\n        gcd = np.gcd(gcd, df_i[col])\n    return gcd\n\ntrain['gcd'] = gcd_of_all(train_i)\ntest['gcd'] = gcd_of_all(test_i)\n\nfeatures.append('gcd')\n\ndel([train_i, test_i])\ngc.collect()","35305ed3":"lr = ExtraTreesClassifier(n_estimators=100, n_jobs=-1)\nXt = train[features].append(test[features])\nyt = [0 for _ in range(len(train))] + [1 for _ in range(len(test))]\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\ncv_results = cross_validate(lr, Xt, yt, cv=cv, scoring='roc_auc', return_estimator=True, verbose=1)\n\ndel([Xt, yt])\ngc.collect()","a883db80":"roc = np.mean(cv_results['test_score'])\nprint(f\"ROC_AUC score for adversarial validation {roc:0.5f}\")","1e96d7a2":"feature_importances = np.mean([mod.feature_importances_ for mod in cv_results['estimator']], axis=0)","189f3cd1":"df_imp = pd.DataFrame({'feature': features, 'importance': feature_importances})\n\nplt.figure(figsize=(14, 7))\nsns.barplot(x=\"importance\", y=\"feature\", \n            data=df_imp.sort_values(by=\"importance\", ascending=False).iloc[:25])\nplt.title(\"ERT Feature Importance\")\nplt.tight_layout()\n\nplt.show()","08b8173c":"del(cv_results)\ngc.collect()","135853f8":"FOLDS = 10\nESTIMATORS = 1_000","f9c19fa5":"lb = LabelEncoder()\n\nX = train[features]\ny = lb.fit_transform(train['target'])\n\ncv = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=0)\ntest_score = list()\n\nfor fold, (train_idx, val_idx) in enumerate(cv.split(X, y)):\n    lr = ExtraTreesClassifier(n_estimators=ESTIMATORS, \n                              criterion='gini', \n                              max_features=128, \n                              min_samples_split=4, \n                              n_jobs=-1)\n    lr.fit(X.iloc[train_idx], y[train_idx])\n    cv_preds = lr.predict(X.iloc[val_idx])\n    val_acc = accuracy_score(y_true=y[val_idx], y_pred=cv_preds)\n    test_score.append(val_acc)\n    print(f\"fold {fold} - validation accuracy = {val_acc:0.5f}\")\n    joblib.dump(value=lr, filename=f'etr_models_fold_{fold}.gz', compress=9)\n    gc.collect()\n    \ncv_accuracy = np.mean(test_score)\nprint(f\"CV accuracy = {cv_accuracy:0.5f}\")","a61c6b45":"plt.figure(figsize=(12, 8))\n\nsns.histplot(lr.feature_importances_, bins=50, kde=True)\nplt.title(\"Impurity-based feature importances\")\n\nplt.axvline(x=0.0, color='red', linestyle='--', label=\"zero\")\nplt.axvline(x=np.percentile(lr.feature_importances_, q=25), color='black', linestyle='--', label=\"q=25\")\nplt.axvline(x=np.median(lr.feature_importances_), color='blue', linestyle='--', label=\"median\")\nplt.axvline(x=np.percentile(lr.feature_importances_, q=75), color='black', linestyle='--', label=\"q=75\")\n\nplt.legend()\nplt.show()","6e01d604":"df_imp = pd.DataFrame({'feature': features, 'importance': lr.feature_importances_})\n\nplt.figure(figsize=(14, 7))\nsns.barplot(x=\"importance\", y=\"feature\", \n            data=df_imp.sort_values(by=\"importance\", ascending=False).iloc[:25])\nplt.title(\"ERT Feature Importance\")\nplt.tight_layout()\n\nplt.show()","2686881c":"preds = [joblib.load(f'etr_models_fold_{fold}.gz').predict(test[features]) for fold in range(FOLDS)]","1a28db03":"from scipy import stats\nmost_frequent_pred = stats.mode(np.array(preds))[0][0]","510dd6b9":"sub.target = lb.inverse_transform(most_frequent_pred)\nsub.to_csv(\"submission.csv\", index=False)","45fb5636":"As we cross-validate, we store away, using joblib, the models for later ensembling a cv predict on the test set.","d66b9d34":"The idea here is to represent measures such as:\n\n* point-wise distribution descriptions (such as mean, specific quantiles)\n* distribution measures\n* measures of uncertainty relative to peaks","3b6d9620":"The problem with ERT is that splits are randomly decided, therefore each feature has a possibility to be assigned some importance if it has some correlation with the target. That's the reason why you don't have any feature at zero importance. Anyway, from the 75th percentile you can see that there fewer and fewer features, pointing out that some features are indeed more important than others. ","b9a519aa":"## Feature engineering","be02e8e4":"There seems to be some features that have characteristic values in the train set. We can use different options here, from recursively removing them in order to make the training more similar to the test to trying to use pseudo-labelling.","8a019736":"We reconvert labels to the bacteria names and we store the test submission.","0dc3d870":"## If you found interesting this notebook, please consider to upvote :-)","c80e44e7":"Let's turn our attention to features.","a51cf15d":"Each bacteria, seem to have a specific mean profile, but the variability is also quite high.","3db7c205":"## Introduction\n\nThis month, the problem proposed by the TPS is fresh and new.\n\nI will try to start an EDA and propose a baseline :-)\n\n*Version history and highlights*\n\nvers 1-4: first attempt at understanding data\n\nvers 5: understanding how the histograms have been configured\n\nvers 6: plotting variable importance of ERT\n\nvers 7: adding variability to distribution of histogram plots\n\nvers 8-9: adding case-wise exploration and feature engineering\n\nvers 10-13: adversarial validation\n\nvers 14: adding decamwers from Ambrosm EDA\n\nvers 15: adding cv validation, voting ensembling and model saving\n\nvers 16-20: experiments with features, number of folds and estimators","17d6e953":"## Adversarial Validation","7847233c":"Excluding target and the row index, there are 286 histograms. Let's explore better how they are distributed. Each 10-mer has exactly 10 bases (A, T, C, G). Position does not matter for the histogram count (thank you @grayjay for noticing this from the paper).","daae6239":"We can now try to visualize each target what distribution has on the original features. The plot may be not very informative because of the many bars plotted, but similar shapes can hit at possible difficulties since we expect each target to have a distinct shape, partially masked by measurement noise.","9127655b":"Here is a first model taking into account the most frequent measurements of all the spectrum of histograms and some feature engineering.","b6a27a0e":"Target analysis is not particularly revealing. Since it is an experiment we have a fairly balanced distribution of targets. ","95a0480c":"Let's first upload the data","ebc76582":"By taking the first 25 feature for importance, we notice that the ranges of the bases is in specifical ranges:\n\n* A : 0-5\n* T : 1-5\n* G : 1-5\n* C : 0-5\n\nProbably higher bases count do contribute less. ","0758d925":"After training a random forest or an extremely randomized trees (ERT) classifier you can figure what features are important by looking at the splits in the forest. By summing up the impurity gain (how much that split helped in the classification) for each variable's splits you can get an idea of how much contribution a variable brings. Here we take the most importat features from the model trained on the last cv folds.","77b3a26c":"We first prepare a way to convert the columns into a ATGC distribution.","9e113773":"Before proceeding with the new features, let's check using adversarial validationif any of these causes overfitting. We achieve that by fitting a model trying to distinguish train from test. We evaluate on the fit using a cross-validation approach, averaging the results.","473ad173":"## Feature exploration","f4ab4e0b":"Here are the top features pointed out:","30f03ac6":"Let's now proceed to predict by retrieving all the ETR models we previously stored during cross-validation.","ffc087c2":"The variability previosly highlighted depends on the fact that samples from the same bacterium are actullay quite different. Here we plotted three samples of Streptococcus Pyogenes and each one has spikes in different locations. Also the range of values changes and the way the values distributes around the spikes.","b3debaa7":"We find the most frequent class for each sample (using the mode function from Scipy), which equates to a voting ensemble.","0260fc57":"## Baseline modelling","ba6cd7ff":"As explained in @AMBROSM's EDA there are different number of decamers in the sample due to the process described in the paper \"Analysis of Identification Method for Bacterial Species and Antibiotic Resistance Genes Using Optical Data From DNA Oligomers\" (https:\/\/www.frontiersin.org\/articles\/10.3389\/fmicb.2020.00257\/full). We want to add also this feature to test if it is informative.\n\nPlease refer to this notebook https:\/\/www.kaggle.com\/ambrosm\/tpsfeb22-01-eda-which-makes-sense for the original code and upvote it if you find it useful,","960d51fd":"## Adding decamers","adc5e64d":"Given the constrain to only have 10 bases, the distribution is equal for all the letters and unbalanced toward lower counts: lower counts are more frequent than higher ones and the decrease fits a squared root transformation.","fd834431":"A good feature engineering probably has to take into accoutn also about these aspects by providing info about:\n\n* peaks\n* statistics\n* distributions","74e494ff":"This opens up to two further questions (that I will try to answer):\n\n* is there a way to represent the space of histograms better than the flat form proposed by the competition that could be exploited by deep learning? (as a sequence or as a graph maybe)\n\n* do we need all the measured histograms? Can't we do with much less?","ced624fe":"## Target exploration"}}