{"cell_type":{"6184c8b2":"code","e4aef52d":"code","200aa2f5":"code","e082babd":"code","d1789f94":"code","bd1df8b9":"code","4a2c92d4":"code","1b8fa3ab":"code","e12ef5f3":"code","a4a8cb82":"code","8547a813":"code","25f3f732":"code","8fa60ed4":"code","d33c2681":"code","612044d4":"code","977395e9":"code","24f9307f":"code","3ce48d39":"code","bfb42d42":"code","2c403de8":"code","c8abf69c":"code","ef6cec8b":"code","e292962c":"code","03cfe3ea":"code","f3bff406":"code","9364e0cf":"code","3fcbfefa":"code","29ee7eaa":"code","1f81b93f":"code","cf29119a":"code","9d7b432a":"code","5465df85":"markdown","c5459226":"markdown","2c6e85d8":"markdown","3398bdc1":"markdown","a59d51ff":"markdown","ca7dd420":"markdown","18cca9ac":"markdown","4c289ecc":"markdown","b171637c":"markdown","015124a1":"markdown"},"source":{"6184c8b2":"import matplotlib.pyplot as plt\nimport numpy as np \nimport os \nimport pandas as pd ","e4aef52d":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","200aa2f5":"nRowsRead = None # specify 'None' if want to read whole file\n# labeled_data.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf0 = pd.read_csv('..\/input\/hate-speech-and-offensive-language-dataset\/labeled_data.csv', delimiter=',', nrows = nRowsRead)\ndf0.dataframeName = 'labeled_data.csv'\nnRow, nCol = df0.shape\nprint(f'There are {nRow} rows and {nCol} columns')","e082babd":"df0","d1789f94":"## needs some refactoring...\nc=df0['class']\ndf0.rename(columns={'tweet' : 'text',\n                   'class' : 'category'}, \n                    inplace=True)\na=df0['text']\nb=df0['category'].map({0: 'hate_speech', 1: 'offensive_language',2: 'neither'})\n\ndf= pd.concat([a,b,c], axis=1)\ndf.rename(columns={'class' : 'label'}, \n                    inplace=True)\ndf","bd1df8b9":"df.head()","4a2c92d4":"df.groupby('label').count()","1b8fa3ab":"import numpy as np\nfrom sklearn.model_selection import train_test_split","e12ef5f3":"X_train, X_val, y_train, y_val = train_test_split(\n    df.index.values,\n    df.label.values,\n    test_size=0.15,\n    random_state=17,\n    stratify=df.label.values,    \n)","a4a8cb82":"df['data_type'] = ['not_set']*df.shape[0]\ndf.loc[X_train, 'data_type'] = 'train'\ndf.loc[X_val, 'data_type'] = 'val'","8547a813":"df.groupby(['category', 'label', 'data_type']).count()","25f3f732":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset\nimport torch","8fa60ed4":"tokenizer = BertTokenizer.from_pretrained(\n    'bert-base-uncased',\n    do_lower_case=True\n)","d33c2681":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type=='train'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensor='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type=='val'].text.values,\n    add_special_tokens=True,\n    return_attention_mask=True,\n    pad_to_max_length=True,\n    max_length=256,\n    return_tensor='pt'\n)\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type=='train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type=='val'].label.values)","612044d4":"dataset_train = TensorDataset(\n    torch.tensor(input_ids_train),\n    torch.tensor(attention_masks_train),\n    labels_train\n)\n\ndataset_val = TensorDataset(\n    torch.tensor(input_ids_val),\n    torch.tensor(attention_masks_val),\n    labels_val\n)","977395e9":"from transformers import BertForSequenceClassification","24f9307f":"label_dict = {'neither': 2, 'offensive_language': 1, 'hate_speech': 0}\nlabel_dict","3ce48d39":"#possible_labels = df.category.unique()\n#label_dict = {}\n#for index, possible_label in enumerate(possible_labels):\n#    label_dict[possible_label] = index\n#label_dict = {'neither': 0, 'offensive_language': 1, 'hate_speech': 2}","bfb42d42":"model = BertForSequenceClassification.from_pretrained(\n    'bert-base-uncased',\n    num_labels = len(label_dict),\n    output_attentions=False,\n    output_hidden_states=False    \n)","2c403de8":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","c8abf69c":"batch_size = 32\n\ndataloader_train = DataLoader(\n    dataset_train,\n    sampler=RandomSampler(dataset_train),\n    batch_size=batch_size\n)\n\ndataloader_val = DataLoader(\n    dataset_val,\n    sampler=RandomSampler(dataset_val),\n    batch_size=batch_size\n)","ef6cec8b":"# Optimizer and Scheduler\n\nfrom transformers import AdamW, get_linear_schedule_with_warmup","e292962c":"optimizer = AdamW(\n    model.parameters(),\n    lr=1e-5,\n    eps=1e-8\n)\nepochs = 5\nscheduler = get_linear_schedule_with_warmup(\n    optimizer,\n    num_warmup_steps=0,\n    num_training_steps=len(dataloader_train)*epochs\n)","03cfe3ea":"# Define Metrics\nfrom sklearn.metrics import f1_score\n\ndef f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')\n\ndef accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","f3bff406":"# Random seed for reproducibility\nimport random\nfrom tqdm.notebook import tqdm\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","9364e0cf":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","3fcbfefa":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","29ee7eaa":"# epoch loop\n#model.load_state_dict(torch.load('.\/finetuned_BERT2.model', map_location=torch.device('cpu')))\nfor epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_val)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')\n\ntorch.save(model.state_dict(), f'finetuned_BERT.model')","1f81b93f":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\nmodel.to(device)\n","cf29119a":"model.load_state_dict(torch.load('..\/input\/hatespeechbert\/finetuned_BERT.model', map_location=torch.device('cpu')))","9d7b432a":"accuracy_per_class(predictions, true_vals)","5465df85":"### Create Dataloader","c5459226":"# Train","2c6e85d8":"### Evaluation","3398bdc1":"# Split Dataset","a59d51ff":"# Bert","ca7dd420":"### import libraries and load file","18cca9ac":"# Tokenize","4c289ecc":"## Load Model & Evaluate","b171637c":"    0->hate(1430)  1->Offensive(19190) 2->neither(4163)","015124a1":"    0->hate(1430)  1->Offensive(19190) 2->neither(4163)"}}