{"cell_type":{"bdc996a3":"code","489c0ccd":"code","b4090661":"code","154adae8":"code","667e6ef0":"code","a967c427":"code","4d4d8fd7":"code","06b70e73":"code","69a55418":"code","5c09ac2c":"code","83c8555f":"code","7b21b0be":"code","5791dabf":"code","c430feac":"code","fd5dff58":"code","f54633e1":"code","29c04531":"code","51e83441":"code","9af05596":"code","b3bcbd4b":"code","36c46fd1":"code","fc10ae2c":"code","ffbd0fd4":"code","e253b29a":"code","21a2571f":"code","409ff7e7":"code","3864a175":"code","da09d2f7":"code","c42eddd3":"markdown","f4067ee6":"markdown","93b1d1be":"markdown","4ac980bb":"markdown","5b81cfae":"markdown","8eefc659":"markdown","7bb978f4":"markdown","6f6753c1":"markdown","e6be26c7":"markdown","d432612b":"markdown","ccc35f47":"markdown","4756a67d":"markdown","db9117e4":"markdown","f4c562fd":"markdown","1bb3c142":"markdown","3fab32ee":"markdown","297b3d57":"markdown","b7d2751d":"markdown","c433d599":"markdown","6964cf59":"markdown","06dbbec2":"markdown","77299785":"markdown","0fa57327":"markdown","bdaee3db":"markdown"},"source":{"bdc996a3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)","489c0ccd":"data = pd.read_csv('..\/input\/top-play-store-games\/android-games.csv')\ndata.head(5)","b4090661":"data.info()","154adae8":"data.shape","667e6ef0":"data.isnull().sum()","a967c427":"data.duplicated().sum()","4d4d8fd7":"change = {'100.0 k' : 100000, '500.0 k' : 500000, '1.0 M' : 1000000, '5.0 M' : 5000000, '10.0 M' :10000000, \n                '50.0 M' : 50000000, '100.0 M': 100000000, '500.0 M': 500000000, '1000.0 M': 1000000000,}\ndata['installs'] = data['installs'].map(change)\ndata.head(5)","06b70e73":"fig = px.pie(data['paid'].value_counts(), values = 'paid', names = ['free', 'paid'], hole = 0.4, opacity = 1, \n       color_discrete_sequence = ['green','yellow'])\nfig.add_annotation(text = 'Top charts', x = 0.5, y = 0.5,showarrow = False, font_size = 20, opacity = 1,font_family = 'serif')\nfig.update_traces(textposition = 'outside', textinfo = 'percent+label')\nfig.show()","69a55418":"df = data[data['paid'] == False]\n\ndf1 = df.groupby('category')['installs'].sum().sort_values(ascending = False)\n\nfig = px.bar(df1, x = df1.index, y = df1.values, color = df1.values)\n\nfig.update_layout(font_family = 'serif',\n                   title = dict(text = 'TOTAL INSTALLS OF FREE GAMES', x = 0.50, y = 0.95, font = dict(color = 'grey', size = 30)),\n                   xaxis_title_text = 'categories',\n                   yaxis_title_text = 'installs',\n                   plot_bgcolor = 'white')\n\nfig.show()","5c09ac2c":"fig = px.line(data, x = 'category', y = ['growth (30 days)', 'growth (60 days)'])\n\nfig.update_layout(font_family = 'Helvetica',\n                   title = dict(text = '30 days growth & 60 days growth', x = 0.50, y = 0.95),\n                   xaxis = dict(showline = False, showgrid = False, showticklabels = True, linecolor = 'rgb(0,0,0)', linewidth = 5, ticks = 'outside'),\n                   yaxis = dict(showgrid = False, zeroline = False, showline = True, showticklabels = True),\n                   autosize = True,\n                   margin = dict(autoexpand = True, l = 100, r = 100, t = 100, b = 100),\n                   showlegend = True, plot_bgcolor = 'white')\n\nfig.show()","83c8555f":"fig1 = px.bar(df, x = 'category', y = 'total ratings',color = '5 star ratings', hover_name = 'title')\n\nfig1.update_layout(\n    font_family = 'Comic Sans MS',\n    title = dict(text = '5 STAR RATINGS', x = 0.50, y = 0.95, font = dict(color = 'red', size = 30)),\n    bargap = 0.3,\n    plot_bgcolor = 'white'\n)\n\nfig1.show()","7b21b0be":"fig2 = px.bar(df, x = 'category', y = 'total ratings',color = '4 star ratings', hover_name = 'title')\n\nfig2.update_layout(\n    font_family = 'Comic Sans MS',\n    title = dict(text = '4 STAR RATINGS', x = 0.50, y = 0.95, font = dict(color = 'blue', size = 30)),\n    bargap = 0.3,\n    plot_bgcolor = 'white'\n)\n\nfig2.show()","5791dabf":"fig3 = px.bar(df, x = 'category', y = 'total ratings',color = '3 star ratings', hover_name = 'title')\n\nfig3.update_layout(\n    font_family = 'Comic Sans MS',\n    title = dict(text = '3 STAR RATINGS', x = 0.50, y = 0.95, font = dict(color = 'green', size = 30)),\n    bargap = 0.3,\n    plot_bgcolor = 'white'\n)\n\nfig3.show()","c430feac":"fig4 = px.bar(df, x = 'category', y = 'total ratings',color = '2 star ratings', hover_name = 'title')\n\nfig4.update_layout(\n    font_family = 'Comic Sans MS',\n    title = dict(text = '2 STAR RATINGS', x = 0.50, y = 0.95, font = dict(color = 'hotpink', size = 30)),\n    bargap = 0.3,\n    plot_bgcolor = 'white'\n)\n\nfig4.show()","fd5dff58":"fig5 = px.bar(df, x = 'category', y = 'total ratings',color = '1 star ratings', hover_name = 'title')\n\nfig5.update_layout(\n    font_family = 'Comic Sans MS',\n    title = dict(text = '1 STAR RATING', x = 0.50, y = 0.95, font = dict(color = 'orange', size = 30)),\n    bargap = 0.3,\n    plot_bgcolor = 'white'\n)\n\nfig5.show()","f54633e1":"fig = px.histogram(df, x = 'category', y = 'average rating', color = 'average rating', template = 'plotly_white', marginal = 'box',\n            nbins = 100, color_discrete_sequence = ['red','orange','blue'], barmode = 'group', histfunc = 'count')\n\nfig.update_layout(\n    font_family = 'cambria',\n    title = dict(text = 'Average ratings of free games',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.1,\n)\n\nfig.show()","29c04531":"df1 = df.groupby('category')[['installs','total ratings','5 star ratings']].sum().sort_values(by = 'installs', ascending = True)\ndf1['percentage'] = (df1['5 star ratings']\/df1['total ratings'])*100\ndf1['percentage'] = df1['percentage'].round(2)\ndf1.sort_values(by = 'percentage', ascending = True)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = df1.index,\n    y = df1['total ratings'],\n    name = 'total ratings',\n    marker_color = 'blue'\n))\nfig.add_trace(go.Bar(\n    x = df1.index,\n    y = df1['5 star ratings'],\n    name = '5 star ratings',\n    marker_color = 'cyan'\n))\n\nfig.update_layout(font_family = 'cambria',\n                  title = dict(text = 'Total ratings Vs 5 Star ratings', x = 0.50, y = 0.95, font = dict(color = 'black', size = 20)),\n                  legend = dict(x = 1 , y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 10),\n                  bargap = 0.5,barmode='group', plot_bgcolor = 'white')\nfig.show()","51e83441":"df2 = df.groupby('category')[['installs','total ratings','1 star ratings']].sum().sort_values(by = 'installs', ascending = True)\ndf2['percentage'] = (df2['1 star ratings']\/df2['total ratings'])*100\ndf2['percentage'] = df2['percentage'].round(2)\ndf2.sort_values(by = 'percentage', ascending = True)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x = df2.index,\n    y = df2['total ratings'],\n    name = 'total ratings',\n    marker_color = 'hotpink',\n))\nfig.add_trace(go.Bar(\n    x = df2.index,\n    y = df2['1 star ratings'],\n    name = '1 star ratings',\n    marker_color = 'magenta'\n))\n\nfig.update_layout(font_family = 'calibri',\n                  title = dict(text = 'Total ratings Vs 1 Star rating', x = 0.50, y = 0.95, font = dict(color = 'black', size = 20)),\n                  legend = dict(x = 1 , y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 10),\n                  bargap = 0.5,barmode='group', plot_bgcolor = 'white')\nfig.show()","9af05596":"df3 = df.groupby('installs')['title'].count().sort_values(ascending = True)\ndf3","b3bcbd4b":"g1 = df[df['installs'] == 1000000000]\ng1['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng1['percentage'] = g1['percentage'].round(2)\n\nfig = px.histogram(g1, x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'rug',\n            nbins = 100, histfunc = 'sum',opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = '1000M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","36c46fd1":"g2 = df[df['installs'] == 500000000]\ng2['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng2['percentage'] = g2['percentage'].round(2)\n\ndf4 = g2.groupby('category')\nfig = px.histogram(g2, x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'box',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = '500M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","fc10ae2c":"g3 = df[df['installs'] == 100000000]\ng3['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng3['percentage'] = g3['percentage'].round(2)\ng3 = g3.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g3[:10], x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'violin',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = 'Top 10 games in 100M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","ffbd0fd4":"g4 = df[df['installs'] == 50000000]\ng4['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng4['percentage'] = g4['percentage'].round(2)\ng4 = g4.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g4[:10], x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'violin',\n            nbins = 100, histfunc = 'count', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = 'Top 10 games in 50M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","e253b29a":"g5 = df[df['installs'] == 10000000]\ng5['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng5['percentage'] = g5['percentage'].round(2)\ng5 = g5.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g5[:10], x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'violin',\n            nbins = 100, histfunc = 'count', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = 'Top 10 games in 10M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","21a2571f":"g6 = df[df['installs'] == 5000000]\ng6['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng6['percentage'] = g6['percentage'].round(2)\ng6 = g6.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g6[:10], x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'violin',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = 'Top 10 games in 5M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","409ff7e7":"g7 = df[df['installs'] == 1000000]\ng7['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng7['percentage'] = g7['percentage'].round(2)\ng7 = g7.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g7[:10], x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'box',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = 'Top 10 games in 1M downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","3864a175":"g8 = df[df['installs'] == 500000]\ng8['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng8['percentage'] = g8['percentage'].round(2)\ng8 = g8.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g8, x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'box',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = '500K downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","da09d2f7":"g9 = df[df['installs'] == 100000]\ng9['percentage'] = (df['5 star ratings']\/df['total ratings'])*100\ng9['percentage'] = g9['percentage'].round(2)\ng9 = g9.sort_values(by = 'percentage', ascending = False)\n\nfig = px.histogram(g9, x = 'title', y = 'percentage', color = 'category', template = 'plotly_white', marginal = 'rug',\n            nbins = 100, histfunc = 'sum', opacity = 1)\n\nfig.update_layout(\n    font_family = 'segoe print',\n    title = dict(text = '100K downloads',x = 0.50, y = 0.95, font = dict(color = 'black', size = 30)),\n    legend = dict(x = 1,y = 0.96, bordercolor = 'black', borderwidth = 2, tracegroupgap = 5),\n    bargap = 0.2,\n)\n\nfig.show()","c42eddd3":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTla08azUQDopf0SUDEcAbGch2Qp4YAJtphhg&usqp=CAU)\n\n### ***Upvote me if you like it...***\ud83d\udc90","f4067ee6":"**Hello all,**\n\nIn this kernel, Here I'm going to perform Exploratory Data Analysis on ***ANDROID GAMES***. I m going to use basic 3D plots for visualization. So, that anyone can easily understand the visualization. Codes will be very simple & this is perfect notebook for beginners.\n\nData Analysis is all about finding some intersting insights in the data and we can find more insight by asking more questions & here I'm going to find some interesting insights in the data by asking the following questions:\n\n1. **What is the percentage of free\/paid games in Play store?**\n2. **Which game category has the Average Ratings in Free Games?**\n3. **Which game category was liked by people?**\n4. **Which game category was disliked by people?**\n\nAlso I m going analyze all games and their ratings elaborately.\n\nLet's start!!!","93b1d1be":"The count of the Solitaire is 4 among the top 10 games in 50M downloads.","4ac980bb":"**Top 5 category of highest 5 star ratings percentage:**\n \n  1. GAME CASINO (74.08%)\n  2. GAME CASUAL (72.55%)\n  3. GAME WORD (72.44%)\n  4. GAME PUZZLE (72.13%)\n  5. GAME ARCADE (72.00%)","5b81cfae":"Here also, the count of the Solitaire is 5 among the top 10 games in 10M downloads.","8eefc659":"### ***5. Which game category was liked by people?***","7bb978f4":"## ***FINDING BEST FREE GAMES***","6f6753c1":"Now, I m going to change column values of 'installs' for visualization.","e6be26c7":"**Reasons for 1000M downloads:**\n\n1. Age Restrictions\n2. Animations\n3. Easy controls\n4. File size\n5. Adapt to all android mobiles\n6. Popular from the beginning","d432612b":"## Data Cleaning","ccc35f47":"![](https:\/\/apptweak-blog.imgix.net\/images\/2019\/02\/06\/Game%20Arcade.png?auto=format)","4756a67d":"### ***2. Growth of Free Games***","db9117e4":"### ***4. Which game category has the highest Average Ratings in Free Games?***","f4c562fd":"1. Most of the above games were downloaded by teenagers & youngsters.\n2. These games gives real experience to the players because of their graphics.","1bb3c142":"**Top 5 category of highest 1 star rating percentage:**\n \n  1. GAME ACTION (12.54%)\n  2. GAME MUSIC (11.28%)\n  3. GAME EDUCATIONAL (10.77%)\n  4. GAME BOARD (10.38%)\n  5. GAME ADVENTURE (10.10%)","3fab32ee":"### ***1. No.of Installs***","297b3d57":"### ***3. Ratings (Free Games)***","b7d2751d":"**GAME CARD** has the highest average ratings.","c433d599":"## ***CATEGORICAL ANALYSIS***","6964cf59":"### ***6. Which game category was disliked by people?***","06dbbec2":"## Importing libraries","77299785":"## Displaying the Dataset","0fa57327":"## EDA","bdaee3db":"### ***What is the percentage of free\/paid games in Play store?***"}}