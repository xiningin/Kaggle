{"cell_type":{"00d2c6d1":"code","8dfe3453":"code","765fc19e":"code","6520c050":"code","2fbc1756":"code","28f01ad6":"code","50d6ec14":"code","81e4fc84":"code","5487da13":"code","e9b9e220":"code","2c7f8c96":"code","bb2a0238":"code","2eb7cf39":"code","9d8de8ba":"code","4b5b1f91":"code","b2d544e5":"code","373c328e":"code","15d46985":"code","ab2e334f":"code","b2868c29":"code","990b444c":"markdown","8cfd68f3":"markdown","ce7fefc3":"markdown","5793770c":"markdown","7dc65878":"markdown","2c01c90b":"markdown","de526d19":"markdown","8c45b669":"markdown","45a703da":"markdown","6c24bfce":"markdown","448c4aab":"markdown","e38c2195":"markdown","41388e87":"markdown","11a506ab":"markdown","eb68ef13":"markdown","de5c63f0":"markdown","5d98f165":"markdown","67e591c6":"markdown","1dbf890f":"markdown","a3c50e9e":"markdown","05beb014":"markdown","949dd744":"markdown"},"source":{"00d2c6d1":"import pandas as pd      # data processing, CSV file I\/O\nimport seaborn as sns    # beautiful plots\nsns.set()\nimport matplotlib.pyplot as plt\n%matplotlib inline","8dfe3453":"minerals = pd.read_csv(\"\/kaggle\/input\/ima-database-of-mineral-properties\/RRUFF_Export_20191025_022204.csv\")\nminerals.sample(5)","765fc19e":"minerals.rename(columns={'Mineral Name':'Mineral','Chemistry Elements':'Elements', 'Country of Type Locality' : 'Country', 'Crystal Systems':'Systems', 'Oldest Known Age (Ma)' : 'Age', 'Structural Groupname' : 'Groupname' }, inplace=True)","6520c050":"minerals.isnull().sum(axis = 0)","2fbc1756":"el_null_mask = minerals['Elements'].isnull() | minerals['IMA Chemistry (plain)'].isnull()\nminerals[el_null_mask]","28f01ad6":"minerals = minerals[minerals.Elements.notna()]","50d6ec14":"minerals['Country'] = minerals.Country.fillna(value = 'unknown')\nminerals.isnull().sum(axis = 0)","81e4fc84":"elem = minerals.set_index('Mineral').Elements.str.split(' ', expand=True).stack().reset_index('Mineral').reset_index(drop=True)\nelem.columns = ['Mineral', 'Element']\nelem","5487da13":"elem['Element'].value_counts()","e9b9e220":"elem['Element'].value_counts()[0:10].sort_values().plot(kind='barh', figsize=(8, 6))\nplt.xlabel(\"Count of occurrences\", labelpad=14)\nplt.ylabel(\"Chemistry Element\", labelpad=14)\nplt.title(\"Most frequent elements in minerals\", y=1.02);","2c7f8c96":"minerals['Country'].value_counts()","bb2a0238":"countr = minerals.set_index('Mineral').Country.str.split(' \/ ', expand=True).stack().reset_index('Mineral').reset_index(drop=True)\ncountr.columns = ['Mineral', 'Country']","2eb7cf39":"print(countr[countr['Country'].str.contains('meteorite', regex=False)])","9d8de8ba":"print(countr[countr['Country'].str.contains('?', regex=False)])","4b5b1f91":"countr['Country'] = countr['Country'].replace({' \\?':''}, regex=True)\ncountr.loc[countr['Country'].str.contains('meteorite', case=False), 'Country'] = 'meteorite'\ncountr['Country'] = countr['Country'].replace('?', 'unknown')\ncountr.loc[countr['Country'].str.contains('IDP', case=False), 'Country'] = 'IDP'","b2d544e5":"countr['Country'].str.strip()\ncountr.drop(countr[countr.Country == 'unknown'].index, inplace=True)\ncountr['Country'].value_counts()[0:20]","373c328e":"countr['Country'].value_counts()[0:20].sort_values().plot(kind='barh', figsize=(10, 7))\nplt.xlabel(\"Count of occurancies\", labelpad=14)\nplt.ylabel(\"Country\", labelpad=14)\nplt.title(\"Count countries by minerals\", y=1.02);","15d46985":"countr = countr[countr['Country'].map(countr['Country'].value_counts()) >= 140]\nelem = elem[elem['Element'].map(elem['Element'].value_counts()) >= 600]","ab2e334f":"result = pd.merge(countr, elem, on='Mineral')\nresult","b2868c29":"sns.catplot(x=\"Country\", hue=\"Element\", kind=\"count\", palette=\"pastel\", edgecolor=\".6\", data=result, height=8, aspect = 2)","990b444c":"* There are countries which contain `meteorite` mineral which was found is this country:","8cfd68f3":"### 2.3 Fill nulls in Country\n* There are Nones for Country column, fill it with 'unknown' value.","ce7fefc3":"### 4.2 Reorganize countries\n\n1. Replace `?` symbol with empty string\n2. If cell contains `Some country (meteorite)` replace it with `meteorite`\n3. If cell has only symbol `?` replace it with `unknown`\n4. Replace `IDP (interplanetary dust particle) over USA` with `IDP` (just one row with Mineral Brownleeite)\n","5793770c":"**<span style=\"color:red\">O (Oxygen) and H (Hydrogen) are at the first and second places respectively.<\/span>**\n\n# 4. Understand the distribution of countries in dataset\n### 4.1 Understand data in Country column\n\n* Nones in `Country` column were already filled with `unknown` value.","7dc65878":"Plot the most richest (20) countries with the minerals:","2c01c90b":"* Some cells contain two or more countries delimited by `\/` (80 rows), so first let's expand this set:","de526d19":"* Merge two dataframes (countries and elements) on `Mineral` column:","8c45b669":"* Plot graph of first 10 most 'popular' chemistry elements:  \n","45a703da":"# 2. Working with nulls\n\n### 2.1 Check nulls\n\n* `Mineral` (unique name of mineral), `RRUFF Chemistry (plain)` formula do not have null values.  \n* `Groupname` and `Fleischers Groupname` have empty string values.  \n* `IMA Chemistry (plain)` and `Elements` have 4 nulls.\n","6c24bfce":"Four (4) rows found (both nulls for Elements and IMA Chemistry), drop these rows:","448c4aab":"We have 14 columns with descriptive information about minerals.\n\n\n### 1.3 Rename columns with complicated headings","e38c2195":"* There is also uncertain data which contains `?` symbol:","41388e87":"Plot countries count by elements in minerals:","11a506ab":"# Overview\n```\n\ud83c\udf87 Can you guess which elements are the most important in minerals?\n\u2728 Can you name the most richest countries with minerals?\n```\n\n# 1. Observe the dataset\n\n### 1.1  Import necessary modules","eb68ef13":"* Moreover there are minerals which have `meteorite` origin.","de5c63f0":"**<span style=\"color:red\">USA and Russia are at the first and second places respectively.<\/span>**\n# 5. Merge countries and minerals with expanded elements\n\n* Drop rows with not frequent minerals and countries:","5d98f165":"5. Cut unnecessary spaces and escape characters (just in case)!  \n6. Drop rows where country is `unknown`","67e591c6":"**<span style=\"color:red\">Expanded by countries we have the same variety of H and O as the highest bars.<\/span>**","1dbf890f":"# 3. Understand the distribution of chemistry elements in dataset\n\n### 3.1 Split column Elements by space\n* For now we have this kind of table:   \n\n| Mineral    | Element         |\n|------------|-----------------|\n| Nealite    | Pb Fe As O Cl H |\n| Hilgardite | Ca B O Cl H     |\n| ...        | ...             |\n\n\n* The aim is to make this one (new dataframe `elem`):\n\n| Mineral    | Element  |\n|------------|----------|\n| Nealite    | Pb       |\n| Nealite    | Fe       |\n| Nealite    | As       |\n| Nealite    | ...      |\n| Hilgardite | Ca       |\n| Hilgardite | B        |\n| Hilgardite | ...      |","a3c50e9e":"### 1.2 Read and understand data\n* Mineral Name = common name (Pyroxferroite, Gerhardtite, Hydroxylherderite, etc. Silver, Gold and Carbon are elements that form minerals on their own)   \n* RRUFF Chemistry (plain) = RRUFF formula (Stoiberite = Cu2+5O2(V5+O4)2\twhich stands for `Cu\u00b2\u207a\u2085O\u2082(V\u2075\u207aO\u2084)\u2082` formula)  \n* IMA Chemistry (plain) = International Mineralogical Association formula (Stoiberite = Cu5O2(VO4)2\twhich stands for `Cu\u2085O\u2082(VO\u2084)\u2082` formula)\n* Chemistry Elements = chemistry elements in mineral (Stoiberite = Cu, V, O, Silver = Ag)\n* IMA Number = unique IMA number (if applies) (Stoiberite = IMA1979-016)\n* RRUFF IDs = unique RRUFF ID (if applies) - one or more (Silver = R070416, R070463, R070754)\n* Country of Type Locality = country (including 'unknown' and '?')\n* Year First Published = year the mineral was first officially described\n* IMA Status = official status of IMA assigned (Approved, Grandfathered, Pending publication)\n* Structural Groupname = structural group of minerals (Platarsite = Pyrite)\n* Fleischers Groupname = structural group for minerals by Fleischers Glossary 2008 (corresponds with Structural Groupname)\n* Status Notes = publication\n* Crystal Systems = a set of point groups and their corresponding space groups are assigned to a lattice system (monoclinic, cubic, orthorhombic, hexagonal, etc)\n* Oldest Known Age (Ma) = age in megaannums (one million years)","05beb014":"### 3.2 Count all elements","949dd744":"### 2.2 Check nulls in Elements and IMA Chemistry\n* use mask on columns `Elements` and `IMA Chemistry (plain)`"}}