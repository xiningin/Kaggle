{"cell_type":{"5f4c60da":"code","cf719ff5":"code","1949b52e":"code","fb92208c":"code","63f73f37":"code","ed048da6":"code","5cbe2395":"code","d00d36aa":"code","af99b6fe":"code","7a31b5b3":"code","19d4cbfb":"code","a91be1e1":"code","27f8ad67":"code","652f3eb4":"code","89bf69f2":"code","5c8d0e48":"code","db9e850a":"code","c4870f16":"code","9c6b1ac8":"code","2315a98b":"code","cf11aa25":"code","7700a458":"code","bc1dc257":"code","db9751dc":"code","9d8c3439":"code","d03860f8":"code","cf8efce2":"code","66ad5349":"code","754a7399":"markdown","3239f55f":"markdown","89ca4834":"markdown"},"source":{"5f4c60da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cf719ff5":"import pandas as pd\nprices = pd.read_csv(\"..\/input\/dwdm-petrol-prices\/Petrol Prices.csv\")","1949b52e":"df = pd.DataFrame(prices)\ndf.head(7)\n","fb92208c":"df.tail(4)","63f73f37":"import matplotlib.pyplot as plt\ndata3 = df.copy()\ndata3[\"Date\"]= data3[\"Date\"].str.split(\" \", expand = True)\ndata3['Date'].value_counts().plot(kind='bar' , title=\" Records for each month\",\n           figsize=(12,8))\nplt.ylabel(\"Fequency\")\nplt.xlabel(\"Months\")","ed048da6":"#y=[]\n#data4.at[143,'Date']= 'Aug 18 2016'\n#s = data4['Date']\n#for i in range(229):\n #  l =time.mktime(datetime.datetime.strptime(s[i],\"%b %d %Y\").timetuple())\n  #  y.append(l)\n#for i in range(3):    \n #   y.append('NaN')\n#print(y)","5cbe2395":"data4 = df.copy()\n\n# new data frame with split value columns \nnew = data4[\"Date\"].str.split(\" \",n = 3, expand = True) \n  \n# making separate first name column from new data frame \ndata4[\"Month\"]= new[0] \n \n# making separate last name column from new data frame \ndata4[\"Day\"]= new[1] \ndata4[\"Year\"]= new[2]\n#data4['TimeStamp'] = y\n\n   \n \n# df display \ndata4","d00d36aa":"data4 = data4.fillna(0)\ndata4","af99b6fe":"data4['Day']= data4['Day'].apply(int)\ndata4['Year'] = data4['Year'].apply(int)\n\ndata4.dtypes\n","7a31b5b3":"#use if lamba to change nan to 0 or change to int","19d4cbfb":"\nimport datetime\ny=[]\nlength = len(data4)\ndate_text = data4['Date']\nfor i in range(length):\n    if (date_text[i] == 0 or date_text[i] =='ug 18 2016'): \n        y.append(0)\n    else: \n        l = datetime.datetime.strptime(date_text[i],\"%b %d %Y\")\n        y.append(l)\n\ndata4['TimeStamp'] = y\ndata4","a91be1e1":"data4.replace(0, np.nan ,inplace=True)\ndata4['TimeStamp']=pd.to_datetime(data4['Date'], errors='coerce')\ndata4.dtypes","27f8ad67":"data2 = data4[['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery','TimeStamp']]\ndata2","652f3eb4":"data2.reindex(columns=['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery','TimeStamp'])\n#lines = data2.plot.line()","89bf69f2":"\ndata2.plot(kind=\"line\", # or `us_gdp.plot.line(`\n    x='TimeStamp',     \n    y=['Gasolene_87', 'Gasolene_90', 'Auto_Diesel', 'Kerosene', 'Propane', 'Butane', 'HFO', 'Asphalt', 'ULSD', 'Ex_Refinery'],\n     \n    title=\"Gas Prices per Period\",\n    figsize=(25,20)\n)\n#plt.title(\"From %d to %d\" % (\n #   data2['TimeStamp'].min(),\n  #data2['TimeStamp'].max()\n#),size=8)\nplt.suptitle(\"Gas Prices per Period\",size=12)\nplt.ylabel(\"Gas Prices\")","5c8d0e48":"data2['Propane'].pct_change(periods= 4,fill_method='ffill')","db9e850a":"data2['Propane'].pct_change(periods= 4,fill_method='ffill').plot( title=\"percentage change for every 4 time periods\",\n           figsize=(25,8))\nplt.ylabel(\"Fequency of change\")\nplt.xlabel(\"Number of Change\")","c4870f16":"kdata= data4[['Gasolene_87', 'Gasolene_90', 'Month','Day','Year','TimeStamp']]\nkdata","9c6b1ac8":"cluster_data = kdata[['Gasolene_87', 'Gasolene_90']]\n\n\ncluster_data = cluster_data.fillna( kdata.median() )\n#Get rid of missing data\nmissing_data_results = cluster_data.isnull().sum()\n\nprint(missing_data_results)","2315a98b":"data_values = cluster_data.iloc[ :, :].values\ndata_values\n\nfrom sklearn.cluster import KMeans\n\n# Use the Elbow method to find a good number of clusters using WCSS (within-cluster sums of squares)\nwcss = []\nfor i in range( 1, 15 ):\n    kmeans = KMeans(n_clusters=i, init=\"k-means++\", n_init=10, max_iter=300) \n    kmeans.fit_predict( data_values )\n    wcss.append( kmeans.inertia_ )\n    \nplt.plot( wcss, 'ro-', label=\"WCSS\")\nplt.title(\"Computing WCSS for KMeans++\")\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","cf11aa25":"kmeans = KMeans(n_clusters=5, init=\"k-means++\", n_init=10, max_iter=300) \ncluster_data[\"cluster\"] = kmeans.fit_predict( data_values )\ncluster_data","7700a458":"cluster_data['cluster'].value_counts()","bc1dc257":"cluster_data['cluster'].value_counts().plot(kind='bar',title='Distribution of Gas Prices across groups')\nplt.xlabel(\"Clusters\")\nplt.ylabel(\"Frequency\")","db9751dc":"import seaborn as sns\nsns.pairplot( cluster_data, hue=\"cluster\")","9d8c3439":"grouped_cluster_data = cluster_data.groupby('cluster')\ngrouped_cluster_data","d03860f8":"grouped_cluster_data.describe()","cf8efce2":"\ngrouped_cluster_data.plot(subplots=True,)","66ad5349":"#Average per year\nkdata.groupby('Year')['Gasolene_87','Gasolene_90'].mean()","754a7399":"2. What can you say about each cluster?\n   for each cluster , Gasolene 90 is always higher than Gasolene 87","3239f55f":"4. Name ONE (1) time series forecasting method and explain how it works (be sure to include a citation)\n\nThe autoregression (AR) method models the next step in the sequence as a linear function of the observations at prior time steps.\n\nThe notation for the model involves specifying the order of the model p as a parameter to the AR function, e.g. AR(p). For example, AR(1) is a first-order autoregression model.\n\nThe method is suitable for univariate time series without trend and seasonal components.\n\n**For example:**\n\n**yhat = b0 + b1*X1**\n\nWhere yhat is the prediction, b0 and b1 are coefficients found by optimizing the model on training data, and X is an input value.\n\nThis technique can be used on time series where input variables are taken as observations at previous time steps, called lag variables.\n\nFor example, we can predict the value for the next time step (t+1) given the observations at the last two time steps (t-1 and t-2). As a regression model, this would look as follows:\n\n\n**X(t+1) = b0 + b1*X(t-1) + b2*X(t-2)**\n\nBecause the regression model uses data from the same input variable at previous time steps, it is referred to as an autoregression (regression of self).\n\nhttps:\/\/machinelearningmastery.com\/autoregression-models-time-series-forecasting-python\/\nhttps:\/\/machinelearningmastery.com\/time-series-forecasting-methods-in-python-cheat-sheet\/","89ca4834":"3. Can you justify your process (i.e. related to Task 12)?\n\n The kmeans was used to find if groups exist amoung the gas prices and predict what groups future prices belong too"}}