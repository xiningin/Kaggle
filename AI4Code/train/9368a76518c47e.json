{"cell_type":{"fc22f642":"code","2ce050f1":"code","a4b3061d":"code","e07084c7":"code","d1c6ee84":"code","d951d999":"code","1fe6293e":"code","f8c31722":"code","7b484bcf":"code","f18d9db7":"code","ab07df1a":"code","2c7c6ad0":"code","0d27518e":"code","6eada8c8":"code","ed488baa":"code","c017f72b":"code","543081a4":"code","5c814996":"code","22fc3a1a":"code","394b1e82":"code","0a4021df":"code","5af2e978":"code","314d5aa6":"code","c546632b":"code","333fcefb":"code","8a428852":"code","870fc953":"code","8af7a46d":"code","c3629a9d":"code","ef2c2fe9":"code","a4ad58f7":"code","a013588c":"code","8cf426ef":"code","d41085ea":"code","e35266a6":"code","b9466aff":"code","f52feb54":"code","1ef28c26":"code","51da3045":"code","bb2b8794":"code","8a5bf655":"code","3fde769b":"code","b9169ca2":"code","7f972ece":"code","d6d263bf":"code","38a25c7b":"code","4996dc2c":"code","e24b19ac":"code","ba6c86cd":"code","c4cf0dc3":"code","1d76d13f":"code","fbb1352b":"markdown","753aa5cb":"markdown","5a071308":"markdown","c00ee6f3":"markdown","603686e8":"markdown","e1055ed2":"markdown","779cfa91":"markdown","049b6690":"markdown","d3670bea":"markdown","a9f40d27":"markdown","e5012a48":"markdown","cb6f4c1f":"markdown","03588cd1":"markdown","0b31e057":"markdown","97959c5b":"markdown","9c6ce55d":"markdown","e2a7d265":"markdown","2281109d":"markdown","1977cc8e":"markdown"},"source":{"fc22f642":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.feature_selection import RFECV, RFE\nfrom sklearn.model_selection import ParameterGrid, GridSearchCV, KFold, cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt\nimport catboost\n","2ce050f1":"random_state = 101","a4b3061d":"data_train = pd.read_csv(\"..\/input\/titanic\/train.csv\").set_index(\"PassengerId\")\ndata_test = pd.read_csv(\"..\/input\/titanic\/test.csv\").set_index(\"PassengerId\")\ndata = pd.concat([data_train, data_test])","e07084c7":"data[\"Sex\"] = OneHotEncoder(drop='if_binary').fit_transform(data[[\"Sex\"]]).toarray().astype(\"int\")","d1c6ee84":"fig, [ax1, ax2] = plt.subplots(1, 2,sharey=False)\nsns.countplot(x=\"Sex\", hue=\"Survived\", data=data, ax=ax1)\nsns.countplot(x=\"Pclass\", hue=\"Survived\", data=data, ax=ax2)\nsns.catplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", kind=\"point\", data=data)","d951d999":"FEATURES_BASELINE = [\"Sex\", \"Pclass\"]","1fe6293e":"def title(name):\n    surname_split = name.split(\", \")\n    title_split = surname_split[1].split(\". \")\n    title = title_split[0]\n    return title","f8c31722":"data[\"Title\"] = data.Name.apply(title)\ndata['Title'] = data['Title'].replace(['Dona', 'Mlle', 'Ms'], 'Miss')\ndata['Title'] = data['Title'].replace(['Lady', 'the Countess', 'Mme'], 'Mrs')\ndata['Title'] = data['Title'].replace(['Jonkheer', 'Don', 'Sir', 'Capt', 'Major', 'Col'], 'Mr')\ndata['Title'].value_counts()","7b484bcf":"def neighbors(tickets):\n    tickets = tickets.to_frame()\n    neighbors = (tickets.value_counts() - 1)\n    result = tickets.replace({\"Ticket\": neighbors})[\"Ticket\"]\n    return result","f18d9db7":"data[\"Neighbors\"] = neighbors(data[\"Ticket\"])","ab07df1a":"sns.catplot(x=\"Neighbors\", y=\"Survived\", kind=\"point\", data=data)","2c7c6ad0":"print(\"Passengers with Embarked NaNs\")\nprint(data[pd.isnull(data.Embarked)])\nembarked_nans_fare = data.loc[(data.Pclass == 1) & (data.Neighbors == 1), \"Fare\"].median()\nprint(f\"Median fare for this type of passengers: {embarked_nans_fare}\")","0d27518e":"sns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"box\", data=data)\nplt.axhline(embarked_nans_fare, linestyle='dashed', c='black',alpha = .3)","6eada8c8":"data.loc[pd.isnull(data.Embarked), \"Embarked\"] = \"C\"","ed488baa":"print(data[pd.isnull(data.Age)])\ndata.loc[(data[\"Title\"] == \"Mr\") & (data[\"Age\"] < 12), \"Title\"] = \"Master\"\ndata.Age.fillna(data.groupby(['Title', 'Pclass', 'Sex']).transform('median').Age, inplace=True) ","c017f72b":"print(data[(pd.isnull(data[\"Fare\"])) | (data[\"Fare\"] == 0)])\ndata.loc[data[\"Fare\"] == 0, \"Fare\"] = np.NaN\ndata[\"Fare\"].fillna(data.groupby(['Embarked', 'Pclass', 'Neighbors']).transform('median').Fare, inplace=True)","543081a4":"encoder = LabelEncoder()\ndata[\"Embarked\"] = encoder.fit_transform(data[\"Embarked\"])","5c814996":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=data)","22fc3a1a":"FEATURES_1 = ['Sex', 'Pclass', 'Embarked']","394b1e82":"data['Group_Status'] = 0\nticket_grouping = data.groupby(\"Ticket\")\nfor _, group in ticket_grouping:\n    if (len(group) > 1):\n        for i, row in group.iterrows():\n            s_max = group.drop(i)['Survived'].max()\n            pass_id = row.name\n            if s_max == 1.0:\n                data.loc[pass_id, 'Group_Status'] = 1\n            elif s_max == 0.0:\n                data.loc[pass_id, 'Group_Status'] = -1","0a4021df":"sns.countplot(x=\"Group_Status\", hue=\"Survived\", data=data)","5af2e978":"FEATURES_2 = ['Sex', 'Pclass', 'Embarked', 'Group_Status']","314d5aa6":"sns.kdeplot(data.loc[(data[\"Survived\"] == 0) & (data[\"Sex\"] == 1), \"Age\"])\nsns.kdeplot(data.loc[(data[\"Survived\"] == 1) & (data[\"Sex\"] == 1), \"Age\"])\n# is_baby, is_boy and others\nbins = np.append((data[\"Age\"].min(), 1.0), np.linspace(12.0, data[\"Age\"].max(), 6))\nplt.vlines(bins, 0, 0.05, linestyles=\"dotted\")\ndata[\"Age_Bin\"] = np.digitize(data[\"Age\"], bins)","c546632b":"FEATURES_3 = ['Sex', 'Pclass', 'Embarked', 'Group_Status', 'Age_Bin']","333fcefb":"data[\"Fare_per_Person\"] = data[\"Fare\"] \/ (1 + data[\"Neighbors\"])\nbins = pd.qcut(data[\"Fare_per_Person\"], 6, labels=False, retbins=True)\ndata[\"Fare_per_Person_Bin\"] = bins[0]","8a428852":"sns.kdeplot(data.loc[data[\"Survived\"] == 0, \"Fare\"])\nsns.kdeplot(data.loc[data[\"Survived\"] == 1, \"Fare\"])\nplt.vlines(bins[1], 0, 0.05, linestyles=\"dotted\")","870fc953":"FEATURES_4 = ['Sex', 'Pclass', 'Embarked', 'Group_Status', 'Age_Bin', 'Fare_per_Person_Bin']","8af7a46d":"data[\"Family_Size\"] = data[\"SibSp\"] + data[\"Parch\"]\ndata[\"Connections\"] = data[[\"Family_Size\", \"Neighbors\"]].max(axis=1)\nbins = np.array([data[\"Connections\"].min(), 1, 4, data[\"Connections\"].max()])\ndata[\"Connections_Bin\"] = np.digitize(data[\"Connections\"], bins)","c3629a9d":"sns.kdeplot(data.loc[data[\"Survived\"] == 0, \"Connections\"])\nsns.kdeplot(data.loc[data[\"Survived\"] == 1, \"Connections\"])\nplt.vlines(bins, 0, 1, linestyles=\"dotted\")","ef2c2fe9":"FEATURES_5 = ['Sex', 'Pclass', 'Embarked', 'Group_Status', 'Age_Bin', 'Fare_per_Person_Bin', \"Connections_Bin\"]","a4ad58f7":"def model(X, y, features, random_state, parameters=None):\n    model = RandomForestClassifier(random_state=random_state, \n                                   n_estimators=500,\n                                   min_samples_split=0.05)\n    if parameters is not None:\n        model.set_params(**parameters)\n    \n    model.fit(X[features], y)\n    score_cv = cross_val_score(model, X[features], y, cv=cv).mean()\n    print(f\"Model CV score is {score_cv:.5f}\")\n    return model","a013588c":"X_train = data.loc[data_train.index].drop(\"Survived\", axis=1)\ny_train = data.loc[data_train.index, \"Survived\"]\nX_test = data.loc[data_test.index].drop(\"Survived\", axis=1)\ncv=KFold(10, shuffle=True, random_state=random_state)","8cf426ef":"MODEL_BASELINE = model(X_train, y_train, FEATURES_BASELINE, random_state)\n# 0.76097","d41085ea":"MODEL_1 = model(X_train, y_train, FEATURES_1, random_state)\n# 0.81145","e35266a6":"MODEL_2 = model(X_train, y_train, FEATURES_2, random_state)\n# 0.80476","b9466aff":"MODEL_3 = model(X_train, y_train, FEATURES_3, random_state)\n# 0.83060","f52feb54":"MODEL_4 = model(X_train, y_train, FEATURES_4, random_state)\n# 0.83171","1ef28c26":"MODEL_5 = model(X_train, y_train, FEATURES_5, random_state)\n# 0.82498","51da3045":"FEATURES = ['Sex', 'Pclass', 'Embarked', 'Group_Status', 'Age_Bin', 'Fare_per_Person_Bin', \"Connections_Bin\"]","bb2b8794":"params = {\n    'n_estimators': [500, 1000],\n    'min_samples_split': [2, 0.0025, 0.005, 0.01, 0.025, 0.05, 0.10]\n}\n\nresults = pd.DataFrame()\ngs = GridSearchCV(estimator=RandomForestClassifier(random_state), param_grid=params, cv=cv, verbose=1, n_jobs=-1)\ngs.fit(X_train[FEATURES], y_train)\nresults = pd.DataFrame(gs.cv_results_)\n\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_min_samples_split\", columns=\"param_n_estimators\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")\n# min_samples_split: [0.01]","8a5bf655":"params = {\n    'n_estimators': [500, 1000],\n    'max_depth': [3, 4, 5, 6, 7, None],\n}\n\nresults = pd.DataFrame()\ngs = GridSearchCV(estimator=RandomForestClassifier(random_state), param_grid=params, cv=cv, verbose=1, n_jobs=-1)\ngs.fit(X_train[FEATURES], y_train)\nresults = pd.DataFrame(gs.cv_results_)\n\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_max_depth\", columns=\"param_n_estimators\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")\n# max_depth: 5","3fde769b":"model = RandomForestClassifier(random_state=random_state)\npipe = Pipeline([(\"rfe\", RFE(model, verbose=0)), (\"rf\", model)])\n\nparams = {\n    'rfe__n_features_to_select': [1,2,3,4,5,6,7],\n    'rf__n_estimators': [500],\n    'rf__min_samples_split': [2, 0.01],\n    'rf__max_depth':  [5, 6, None]\n}\ngrid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=0, n_jobs=-1)\ngrid.fit(X_train[FEATURES], y_train)\nprint(gs.best_params_)\ngrid.cv_results_","b9169ca2":"MODEL_6 = grid.best_estimator_\nprint(f\"Model CV score is {grid.best_score_:.5f}\")\n# 0.84742","7f972ece":"MODEL_7 = catboost.CatBoostClassifier(one_hot_max_size=4, iterations=1000, random_seed=random_state, verbose=False)\nMODEL_7.fit(X_train[FEATURES_4], y_train)\nscore_cv = cross_val_score(MODEL_7, X_train[FEATURES_4], y_train, cv=cv).mean()\nprint(f\"Model CV score is {score_cv:.5f}\")\n# 0.83507","d6d263bf":"model = KNeighborsClassifier()\npipe = Pipeline([(\"scaler\", StandardScaler()), (\"knn\", model)])\nparams = {\n    'knn__n_neighbors': [3, 9, 15, 20, 21, 22, 25, 30],\n    'knn__weights': ['uniform', 'distance']\n}\nknn_grid = GridSearchCV(pipe, param_grid=params, cv=cv, verbose=0, n_jobs=-1)\nknn_grid.fit(X_train[FEATURES], y_train)\nknn_grid.cv_results_","38a25c7b":"results = pd.DataFrame(knn_grid.cv_results_)\ntable = pd.pivot_table(results, values=\"mean_test_score\", index=\"param_knn__n_neighbors\", columns=\"param_knn__weights\")\nsns.heatmap(table, annot=True, cmap=\"YlGnBu\")","4996dc2c":"MODEL_8 = knn_grid.best_estimator_\nprint(f\"Model CV score is {knn_grid.best_score_:.5f}\")\n# 0.84069","e24b19ac":"MODEL_4.fit(X_train[FEATURES_4], y_train)\nprediction_4 = MODEL_4.predict_proba(X_test[FEATURES_4])[:,1]\nsubmit = pd.DataFrame({\"PassengerId\": X_test.index,\"Survived\": np.round(prediction_4, 0).astype(int)})\nsubmit.to_csv(\"MODEL_4.csv\",index=False)","ba6c86cd":"MODEL_6.fit(X_train[FEATURES], y_train)\nprediction_6 = MODEL_6.predict_proba(X_test[FEATURES])[:,1]\nsubmit = pd.DataFrame({\"PassengerId\": X_test.index,\"Survived\": np.round(prediction_6, 0).astype(int)})\nsubmit.to_csv(\"MODEL_6.csv\",index=False)","c4cf0dc3":"MODEL_7.fit(X_train[FEATURES_4], y_train)\nprediction_7 = MODEL_7.predict_proba(X_test[FEATURES_4])[:,1]\nsubmit = pd.DataFrame({\"PassengerId\": data_test.index,\"Survived\": np.round(prediction_7, 0).astype(int)})\nsubmit.to_csv(\"MODEL_7.csv\",index=False)","1d76d13f":"MODEL_8.fit(X_train[FEATURES], y_train)\nprediction_8 = MODEL_8.predict_proba(X_test[FEATURES])[:,1]\nsubmit = pd.DataFrame({\"PassengerId\": data_test.index,\"Survived\": np.round(prediction_8, 0).astype(int)})\nsubmit.to_csv(\"MODEL_8.csv\",index=False)","fbb1352b":"# SUBMIT BEST PREDICTIONS","753aa5cb":"# HYPERPARAMETERS SEARCH WITH RFECV","5a071308":"# N_ESTIMATORS VS MIN_SAMPLES_SPLIT","c00ee6f3":"# SEX & PCLASS FEATURES","603686e8":"# TITLE HANDLING","e1055ed2":"# FARE PER PERSON BINS FEATURE","779cfa91":"PASSENGERS TRAVELLING WITH THE SAME TICKET","049b6690":"# FILL THE AGE NANS","d3670bea":"# FILL THE FARE NANS AND ZEROES","a9f40d27":"# TICKET GROUPING SURVIVAL FEATURE","e5012a48":"# CATBOOST","cb6f4c1f":"# KNN","03588cd1":"# FILL THE EMBARKED NANS","0b31e057":"# EMBARKED FEATURE","97959c5b":"# BUILD MODELS","9c6ce55d":"# N_ESTIMATORS VS MAX_DEPTH","e2a7d265":"CONNECTIONS BINS FEATURE","2281109d":"# RFE + GRID SEARCH","1977cc8e":"# AGE BINS FEATURE"}}