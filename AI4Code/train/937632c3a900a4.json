{"cell_type":{"0ad4c4f1":"code","e872a4ec":"code","f8a3bad5":"code","a782d63b":"code","4ef854ec":"code","b7ed6df6":"code","f83403f7":"code","a4c288b3":"code","982e00cc":"code","b53236da":"code","8f960207":"code","362f59e0":"code","8dc972f3":"markdown","c957ce95":"markdown","8ad76fb6":"markdown","b6f27ad3":"markdown","24992d08":"markdown","6d00624b":"markdown","fecbe4a8":"markdown","6e737aea":"markdown","519afc60":"markdown","cd206eaa":"markdown"},"source":{"0ad4c4f1":"#learning from https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n\n# Imports\nimport pandas as pd \nimport numpy as np\n\n# Standardize, Label Encode, SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder \nfrom sklearn.impute import SimpleImputer\n\n# Model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom xgboost import XGBRegressor\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Definitions\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n%matplotlib inline\n\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n","e872a4ec":"train_source = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\n\ntest_source = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\n\nall_data = [train_source,test_source]\n\n############################\n# Make new feature 'title' #\n############################\n\n# extract title from name\ntitle_list_train = train_source.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntrain_source['title'] = title_list_train\n\ntitle_list_test = test_source.Name.str.extract('([A-Za-z]+)\\.', expand=False)\ntest_source['title'] = title_list_test\n\n# change some to Miss and Mrs\ntrain_source['title'] = train_source['title'].replace('Mlle','Miss')\ntrain_source['title'] = train_source['title'].replace('Ms','Miss')\ntrain_source['title'] = train_source['title'].replace('Mme','Mrs')\n\ntest_source['title'] = test_source['title'].replace('Mlle','Miss')\ntest_source['title'] = test_source['title'].replace('Ms','Miss')\ntest_source['title'] = test_source['title'].replace('Mme','Mrs')\n\n# combine title with small counts to 'Other'\nsmall_title = train_source.title.value_counts().index[train_source.title.value_counts() < 5]\n\ntrain_source['title'] = train_source['title'].replace(small_title,'Other')\ntest_source['title'] = test_source['title'].replace(small_title,'Other')\n\ntrain_source['title'] = train_source['title'].replace('Dr','Other')\ntest_source['title'] = test_source['title'].replace('Dr','Other')\n\ntest_source['title'] = test_source['title'].replace('Dona','Other')\n\n\n####################\n# fill missing age #\n####################\n\n# get median age of the 3 class (general)\nmd_age_class1 = train_source.loc[(train_source.Pclass == 1),:].Age.dropna().median()\nmd_age_class2 = train_source.loc[(train_source.Pclass == 2),:].Age.dropna().median()\nmd_age_class3 = train_source.loc[(train_source.Pclass == 3),:].Age.dropna().median()\n\n# get median age by title, class = 1\nmd_age_class1_mr = train_source.loc[(train_source.title == 'Mr') & (train_source.Pclass == 1),:].Age.dropna().median()\nmd_age_class1_mrs = train_source.loc[(train_source.title == 'Mrs') & (train_source.Pclass == 1),:].Age.dropna().median()\nmd_age_class1_miss = train_source.loc[(train_source.title == 'Miss') & (train_source.Pclass == 1),:].Age.dropna().median()\nmd_age_class1_master = train_source.loc[(train_source.title == 'Master') & (train_source.Pclass == 1),:].Age.dropna().median()\n\n# get median age by title, class = 2\nmd_age_class2_mr = train_source.loc[(train_source.title == 'Mr') & (train_source.Pclass == 2),:].Age.dropna().median()\nmd_age_class2_mrs = train_source.loc[(train_source.title == 'Mrs') & (train_source.Pclass == 2),:].Age.dropna().median()\nmd_age_class2_miss = train_source.loc[(train_source.title == 'Miss') & (train_source.Pclass == 2),:].Age.dropna().median()\nmd_age_class2_master = train_source.loc[(train_source.title == 'Master') & (train_source.Pclass == 2),:].Age.dropna().median()\n\n# get median age by title, class = 3\nmd_age_class3_mr = train_source.loc[(train_source.title == 'Mr') & (train_source.Pclass == 3),:].Age.dropna().median()\nmd_age_class3_mrs = train_source.loc[(train_source.title == 'Mrs') & (train_source.Pclass == 3),:].Age.dropna().median()\nmd_age_class3_miss = train_source.loc[(train_source.title == 'Miss') & (train_source.Pclass == 3),:].Age.dropna().median()\nmd_age_class3_master = train_source.loc[(train_source.title == 'Master') & (train_source.Pclass == 3),:].Age.dropna().median()\n\nfor data in all_data:\n    # fill age na class 1\n    data.loc[(data.title == 'Mr') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Mr') & (data.Pclass == 1),'Age'].fillna(md_age_class1_mr)\n    data.loc[(data.title == 'Mrs') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Mrs') & (data.Pclass == 1),'Age'].fillna(md_age_class1_mrs)\n    data.loc[(data.title == 'Miss') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Miss') & (data.Pclass == 1),'Age'].fillna(md_age_class1_miss)\n    data.loc[(data.title == 'Master') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Master') & (data.Pclass == 1),'Age'].fillna(md_age_class1_master)\n    data.loc[(data.title == 'Rev') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Rev') & (data.Pclass == 1),'Age'].fillna(md_age_class1)\n    data.loc[(data.title == 'Other') & (data.Pclass == 1),'Age'] = data.loc[(data.title == 'Other') & (data.Pclass == 1),'Age'].fillna(md_age_class1)\n    \n    # fill age na class 2\n    data.loc[(data.title == 'Mr') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Mr') & (data.Pclass == 2),'Age'].fillna(md_age_class2_mr)\n    data.loc[(data.title == 'Mrs') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Mrs') & (data.Pclass == 2),'Age'].fillna(md_age_class2_mrs)\n    data.loc[(data.title == 'Miss') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Miss') & (data.Pclass == 2),'Age'].fillna(md_age_class2_miss)\n    data.loc[(data.title == 'Master') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Master') & (data.Pclass == 2),'Age'].fillna(md_age_class2_master)\n    data.loc[(data.title == 'Rev') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Rev') & (data.Pclass == 2),'Age'].fillna(md_age_class2)\n    data.loc[(data.title == 'Other') & (data.Pclass == 2),'Age'] = data.loc[(data.title == 'Other') & (data.Pclass == 2),'Age'].fillna(md_age_class2)\n\n    # fill age na class 3\n    data.loc[(data.title == 'Mr') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Mr') & (data.Pclass == 3),'Age'].fillna(md_age_class3_mr)\n    data.loc[(data.title == 'Mrs') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Mrs') & (data.Pclass == 3),'Age'].fillna(md_age_class3_mrs)\n    data.loc[(data.title == 'Miss') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Miss') & (data.Pclass == 3),'Age'].fillna(md_age_class3_miss)\n    data.loc[(data.title == 'Master') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Master') & (data.Pclass == 3),'Age'].fillna(md_age_class3_master)\n    data.loc[(data.title == 'Rev') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Rev') & (data.Pclass == 3),'Age'].fillna(md_age_class3)\n    data.loc[(data.title == 'Other') & (data.Pclass == 3),'Age'] = data.loc[(data.title == 'Other') & (data.Pclass == 3),'Age'].fillna(md_age_class3)\n\n    \n############################################\n# fill missing emarked on train - Mode 'S' #\n############################################\ntrain_source.loc[62,'Embarked'] = 'S'\ntrain_source.loc[830,'Embarked'] = 'S'\n\n\n#############################################################\n# fill missing fare on test with \"mean of fare in Pclass 3\" #\n#############################################################\nmean_fare_class3 = train_source.loc[train_source.Pclass == 3].Fare.mean()\ntest_source.loc[1044,'Fare'] = mean_fare_class3    \n\n\n##############################\n# new feature: family member #\n##############################\ntrain_source['family'] = train_source.SibSp + train_source.Parch\ntest_source['family'] = test_source.SibSp + test_source.Parch\n\n#has family = 1, no family = 0\ntrain_source['hasFamily'] = 0\ntrain_source.loc[train_source['family'] > 0, 'hasFamily'] = 1\n\ntest_source['hasFamily'] = 0\ntest_source.loc[test_source['family'] > 0, 'hasFamily'] = 1\n\n\n#############\n# age group #\n#############\ntrain_source.loc[train_source['Age'] <= 16, 'Age'] = 0\ntrain_source.loc[(train_source['Age'] > 16) & (train_source['Age'] <= 32), 'Age'] = 1\ntrain_source.loc[(train_source['Age'] > 32) & (train_source['Age'] <= 48), 'Age'] = 2\ntrain_source.loc[(train_source['Age'] > 48) & (train_source['Age'] <= 64), 'Age'] = 3\ntrain_source.loc[(train_source['Age'] > 64), 'Age'] = 4\n\ntest_source.loc[test_source['Age'] <= 16, 'Age'] = 0\ntest_source.loc[(test_source['Age'] > 16) & (test_source['Age'] <= 32), 'Age'] = 1\ntest_source.loc[(test_source['Age'] > 32) & (test_source['Age'] <= 48), 'Age'] = 2\ntest_source.loc[(test_source['Age'] > 48) & (test_source['Age'] <= 64), 'Age'] = 3\ntest_source.loc[(test_source['Age'] > 64), 'Age'] = 4\n\n\n###########################\n# age * class interaction #\n###########################\n# train_source['Age_Class'] = train_source.Age * train_source.Pclass\n# test_source['Age_Class'] = test_source.Age * test_source.Pclass\n\n\n##########################################\n# drop columns with litte\/no information #\n# drop 'Sibsp', 'Parch'                  #\n##########################################\ncol_drop = ['Name','Ticket','Cabin', 'SibSp', 'Parch','family']\n\ntrain_source = train_source.drop(col_drop,axis=1)\ntest_source = test_source.drop(col_drop,axis=1)\n\n##########    \n# set up #\n##########\n\ny = train_source.Survived\n\ntrain = train_source.drop('Survived', axis=1)\ntest = test_source\n\nprint('missing in train:', train.isnull().sum())\nprint('missing in test:', test.isnull().sum())\n\ntrain.head()\n#test.head()","f8a3bad5":"test_x = test\n\ntrain_x,valid_x,train_y,valid_y = train_test_split(train, y, test_size = 0.3, random_state = 0)\n\nprint('train x:', train_x.shape)\nprint('train y:', train_y.shape)\nprint('valid x:', valid_x.shape)\nprint('valid y:', valid_y.shape)\nprint('test x:', test_x.shape)","a782d63b":"# log Fare\ntrain_x.Fare = np.log1p(train_x.Fare)\nvalid_x.Fare = np.log1p(valid_x.Fare)\ntest_x.Fare = np.log1p(test_x.Fare)","4ef854ec":"#impute \"Embarked\"\nec = LabelEncoder()\ntrain_x['Sex'] = ec.fit_transform(train_x['Sex'])\nvalid_x['Sex'] = ec.transform(valid_x['Sex'])\ntest_x['Sex'] = ec.transform(test_x['Sex'])\n\ntrain_x['Embarked'] = ec.fit_transform(train_x['Embarked'])\nvalid_x['Embarked'] = ec.transform(valid_x['Embarked'])\ntest_x['Embarked'] = ec.transform(test_x['Embarked'])\n\ntrain_x['title'] = ec.fit_transform(train_x['title'])\nvalid_x['title'] = ec.transform(valid_x['title'])\ntest_x['title'] = ec.transform(test_x['title'])","b7ed6df6":"# SVC\nmodel = svm.SVC()\nmodel.fit(train_x, train_y)\n\nprint('error on train:', model.score(train_x,train_y))\nprint('error on train:', model.score(valid_x,valid_y))","f83403f7":"# KNN\nmodel = KNeighborsClassifier(n_neighbors = 3)\nmodel.fit(train_x, train_y)\n\nprint('error on train:', model.score(train_x,train_y))\nprint('error on train:', model.score(valid_x,valid_y))","a4c288b3":"# logistic regression \n# best so far on leaderboard\nmodel = LogisticRegression()\nmodel.fit(train_x, train_y)\n\nprint('error on train:', model.score(train_x,train_y))\nprint('error on train:', model.score(valid_x,valid_y))","982e00cc":"# random forest\nmodel = RandomForestClassifier(random_state=1)\nmodel.fit(train_x, train_y)\n\nprint('error on train:', model.score(train_x,train_y))\nprint('error on train:', model.score(valid_x,valid_y))","b53236da":"# decision tree\nmodel = DecisionTreeClassifier()\nmodel.fit(train_x, train_y)\n\nprint('error on train:', model.score(train_x,train_y))\nprint('error on train:', model.score(valid_x,valid_y))","8f960207":"# prediction \npred = model.predict(test_x)\npred","362f59e0":"submission = pd.DataFrame({'PassengerID': test_source.index,'Survived': pred})\nsubmission.to_csv('submission.csv',index=False)","8dc972f3":"# Logistic regression (best so far on leaderboard)","c957ce95":"# Random Forest","8ad76fb6":"# KNN","b6f27ad3":"# label the categorical variable","24992d08":"# take log of fare","6d00624b":"# Modeling","fecbe4a8":"# Decision Tree","6e737aea":"# SVC","519afc60":"# split data in to train, validation","cd206eaa":"# read-in data, cleaning, make new features\n* new feature 'title', title of passenger\n* new feature 'hasFamily', 0 or 1\n* divide age into age groups\n* fill missing value\n* dropped 'Name', 'Ticket', 'Cabin', 'SibSp', 'Parch', 'family'"}}