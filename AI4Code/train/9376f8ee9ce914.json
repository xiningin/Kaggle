{"cell_type":{"eea4b4a8":"code","ebaf4289":"code","6cf83ae2":"code","8c7310a0":"code","ec77644f":"code","6c9e8139":"code","457c4fd7":"code","d1d5d25c":"code","8f92226a":"code","1e4fe5a2":"code","3182dd39":"code","4c09421a":"code","8d37ef66":"code","6b0fb852":"code","eb0863d0":"markdown","1c961d09":"markdown","cf74da9f":"markdown","dadc8896":"markdown","207da21d":"markdown","9fd91640":"markdown","1604c4fe":"markdown"},"source":{"eea4b4a8":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,cross_validate\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score,accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nimport seaborn as sns \nsns.set_theme(style=\"darkgrid\")\n\nfrom imblearn.combine import *\nfrom lightgbm import LGBMClassifier","ebaf4289":"def buildModel(model,x_train,x_val,y_train,y_val):\n    model.fit(x_train,y_train)\n    pred = model.predict(x_val)\n    \n    accuracy = accuracy_score(y_val,pred)\n    precision = precision_score(y_val,pred)\n    recall = recall_score(y_val,pred)\n    f1 = f1_score(y_val,pred)\n    roc_score = roc_auc_score(y_val,pred,average='macro')\n    print('accuracy : {0:.2f}, precision : {1:.2f}, recall : {2:.2f}'.format(accuracy,precision,recall))\n    print('f1-score : {0:.2f}, auc : {1:.2f}'.format(f1,roc_score,recall))","6cf83ae2":"TARGET = \"Class\"\nSEED = 2021\nVAL_SET_SIZE = 0.25\n\nN_ESTIMATORS = 1000\nNUM_LEAVES = 64 ","8c7310a0":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","ec77644f":"def getLabelCount(df,target):\n    return sorted([( labelValue,len(df.loc[df[target] == labelValue]) ) for labelValue in df[target].unique()])\n\nlabelCount = getLabelCount(df,TARGET)\nlabelCount","6c9e8139":"sns.countplot(y=TARGET, \n                   data=df,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", len(labelCount)))","457c4fd7":"X = df.drop([TARGET],axis = 1)\ny = df[TARGET]","d1d5d25c":"X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=VAL_SET_SIZE,random_state=SEED)","8f92226a":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","1e4fe5a2":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","3182dd39":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","4c09421a":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","8d37ef66":"smote = SMOTETomek(random_state=SEED)\nX_train_over,y_train_over = smote.fit_resample(X_train,y_train)\nprint('before SMOTE : ', X_train.shape, y_train.shape)\nprint('after SMOTE: ', X_train_over.shape, y_train_over.shape)\nprint('after SMOTE values: \\n', pd.Series(y_train_over).value_counts())","6b0fb852":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,boost_from_average=False)\nbuildModel(lgb,X_train_over,X_val,y_train_over,y_val)","eb0863d0":"# label over sampling : SMOTETomek","1c961d09":"# lgbm + is_unbalance = False","cf74da9f":"# use oversampling data as training data  => to increase auc ","dadc8896":"# load","207da21d":"# check label count","9fd91640":"# lgbm + is_unbalance = True\nWhen you set Is_unbalace: True, \nthe algorithm will try to Automatically balance the weight of the dominated label (with the pos\/neg fraction in train set).","1604c4fe":"# split data"}}