{"cell_type":{"ce85366e":"code","1bbe4915":"code","382948e7":"code","0de7162c":"code","91e84aa2":"code","4ecd0e84":"code","99ea886a":"code","340ecdec":"code","8adfa5fb":"code","99c8f246":"code","1d4b4afd":"code","9a4303f2":"code","16c421c8":"code","3a138542":"code","24d905b5":"code","7ad8eecb":"code","77eb101e":"code","556d0893":"code","5b32013d":"code","5fce4559":"code","e2b44c58":"code","4ecc435b":"code","3f42a677":"code","31d7ef21":"code","e95cdb2b":"code","7f5a8b7e":"code","3c8f1511":"code","4dc152a2":"code","725c6530":"code","9520a527":"code","b75ed681":"code","c9e9490b":"code","227b9fab":"code","99679167":"code","cb95de64":"code","fe0aadbd":"code","1ff7ddcc":"markdown","3b0d9ca9":"markdown","3539713b":"markdown","1bf81966":"markdown","0c4ba81f":"markdown","a34aaddd":"markdown","ede134ab":"markdown","a1657ea4":"markdown","c77658b1":"markdown","39b782e7":"markdown","468a532c":"markdown","1f7d862f":"markdown","e4110475":"markdown","2b6bf11a":"markdown","7c321acd":"markdown","aae4f9e2":"markdown"},"source":{"ce85366e":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import svm\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","1bbe4915":"stars_data = pd.read_csv('..\/input\/star-dataset\/6 class csv.csv')\nstars_data.head()","382948e7":"#Data size\nstars_data.shape","0de7162c":"# Verificar nulos\n\nprint(stars_data.isnull().sum())","91e84aa2":"# Tipos de datos\nstars_data.dtypes","4ecd0e84":"#Save original dataframe\nstars_data_orig = stars_data.copy()","99ea886a":"#Get object type columns\nobjecttype_columns = stars_data.select_dtypes(include=[object]).columns\ndata_objecttype = stars_data[objecttype_columns]\nprint(objecttype_columns)","340ecdec":"#Encode categorical data\nstars_data[objecttype_columns] = stars_data[objecttype_columns].astype('category')","8adfa5fb":"#Encoder train set\nencoder = OrdinalEncoder()\nencoder.fit(stars_data[objecttype_columns])\nstars_data[objecttype_columns] = encoder.transform(stars_data[objecttype_columns])\n\nstars_data.head(10)","99c8f246":"stars_data.describe()","1d4b4afd":"fig = px.histogram(stars_data, x=\"Temperature (K)\")\nfig.show()","9a4303f2":"stars_data['Temperature (K) LOG'] = (stars_data['Temperature (K)'] + 1).transform(np.log)\nfig = px.histogram(stars_data, x=\"Temperature (K) LOG\")\nfig.show()","16c421c8":"fig = px.histogram(stars_data, x=\"Luminosity(L\/Lo)\")\nfig.show()","3a138542":"stars_data['Luminosity(L\/Lo) LOG'] = (stars_data['Luminosity(L\/Lo)'] + 1).transform(np.log)\nfig = px.histogram(stars_data, x=\"Luminosity(L\/Lo) LOG\")\nfig.show()","24d905b5":"fig = px.histogram(stars_data, x=\"Radius(R\/Ro)\")\nfig.show()","7ad8eecb":"stars_data['Radius(R\/Ro) LOG'] = (stars_data['Radius(R\/Ro)'] + 1).transform(np.log)\nfig = px.histogram(stars_data, x=\"Radius(R\/Ro) LOG\")\nfig.show()","77eb101e":"correlation_mat = stars_data.corr()\n\nsns.heatmap(correlation_mat, annot = True)\nsns.set(rc={'figure.figsize':(10,10)})\nplt.title(\"Matriz de Correlaci\u00f3n\")\n\nplt.show()","556d0893":"# Eliminar columnas con baja correlaci\u00f3n y las que se transformaron\nstars_data.drop(['Spectral Class'], axis=1, inplace=True)\nstars_data.drop(['Radius(R\/Ro)'], axis=1, inplace=True)\nstars_data.drop(['Luminosity(L\/Lo)'], axis=1, inplace=True)\nstars_data.drop(['Temperature (K)'], axis=1, inplace=True)","5b32013d":"#Separar X y Y\n\ny = stars_data[\"Star type\"].copy()\nx = stars_data.drop(\"Star type\", axis=1)\n\nprint(x.shape, y.shape)","5fce4559":"svmmodel = svm.SVC(C=1000, kernel = 'rbf', gamma=10, decision_function_shape='ovo').fit(x, y)\nscores = cross_val_score(svmmodel, x, y, cv=10)\n\nprint(\"Exactitud de cada particion:\", scores)\nprint(\"Exactitud Promedio:\", scores.mean())","e2b44c58":"#C\u00f3digo de figura basado en notebook 01-svm\n#Entrenar modelo con dos clases\n# we use only two columns to be able to display 2d plots\nx2d = stars_data[['Luminosity(L\/Lo) LOG', 'Absolute magnitude(Mv)']]\ny2d = stars_data['Star type']\n\nLINE = \"#5FAD56\"\nA = \"#0075a2\"\nB = \"#481620\"\nC = \"#D55672\"\nOTHER = \"#F2C14E\"\n\nsvmmodel2d = svm.SVC(C=1000, kernel = 'rbf', gamma=10, decision_function_shape='ovo').fit(x2d, y2d)\n\n\n\ndef draw_kernel(model, fig, r, c):\n    \n    # Create classifier, run predictions on grid\n\n    x1 = np.linspace(x2d['Luminosity(L\/Lo) LOG'].min(), x2d['Luminosity(L\/Lo) LOG'].max(), 50)\n    x2 = np.linspace(x2d['Absolute magnitude(Mv)'].min(), x2d['Absolute magnitude(Mv)'].max(), 50)\n    xx1, xx2 = np.meshgrid(x1, x2)\n\n    Z = model.predict(np.c_[xx1.ravel(), xx2.ravel()])\n    Z = Z.reshape(xx1.shape)\n\n    fig.add_trace(go.Contour(\n        x=x1,\n        y=x2,\n        z=Z,\n        showscale=False,\n        opacity=0.40,\n        colorscale=[[0, A], [0.5, B], [1, C]]\n    ), row=r, col=c)\n    \n    fig.add_trace(go.Scatter(\n        x=x2d['Luminosity(L\/Lo) LOG'], \n        y=x2d['Absolute magnitude(Mv)'],\n        text=y2d,\n        mode='markers',\n        marker_symbol=y2d,\n        marker=dict(\n            color=y,\n            colorscale=[[0, A], [0.5, B], [1, C]]\n        )\n    ), row=r, col=c)\n\nfig2 = make_subplots(\n    rows=1, \n    cols=1,\n)\n\ndraw_kernel(svmmodel2d, fig2, 1 , 1)\n\nfig2.update_layout(\n    showlegend=False, \n    title_text=\"Star type classification with SVM\",\n    xaxis_title=\"Luminosity(L\/Lo) LOG\",\n    yaxis_title=\"Absolute magnitude(Mv)\"\n    )\n\nfig2.show()","4ecc435b":"penguins = pd.read_csv('..\/input\/palmer-archipelago-antarctica-penguin-data\/penguins_size.csv')\npenguins.head()","3f42a677":"#Total de filas y columnas\ndata_shape = penguins.shape\n#Cantidad de nulos\ntotal_nulls = penguins.isnull().sum()\n\nprint('Filas: ', data_shape[0],', Columnas: ', data_shape[1])\n\nprint('\\nTotal de nulos por columna:\\n', total_nulls)","31d7ef21":"#Ya que los nulos son pocos se van a eliminar esas filas\npenguins.dropna(inplace=True)\n#Total de filas y columnas despu\u00e9s de eliminar nulos\ndata_shape = penguins.shape\nprint('Filas: ', data_shape[0],', Columnas: ', data_shape[1])","e95cdb2b":"#Copy of penguins dataframe\npenguins_orig = penguins.copy()","7f5a8b7e":"#Obtener columnas de tipo object\nobjecttype_columns = penguins.select_dtypes(include=[object]).columns\ndata_objecttype = penguins[objecttype_columns]\nprint(objecttype_columns)","3c8f1511":"#Codificar datos categ\u00f3ricos\npenguins[objecttype_columns] = penguins[objecttype_columns].astype('category')","4dc152a2":"#Encoder\nencoder = OrdinalEncoder()\n\nencoder.fit(penguins[objecttype_columns])\n\npenguins[objecttype_columns] = encoder.transform(penguins[objecttype_columns])\n\npenguins.head(10)","725c6530":"correlation_mat = penguins.corr()\n\nsns.heatmap(correlation_mat, annot = True)\nsns.set(rc={'figure.figsize':(10,10)})\nplt.title(\"Matriz de Correlaci\u00f3n\")\n\nplt.show()","9520a527":"# Sex tiene baja correlaci\u00f3n por lo que no se va a utilizar\npenguins.drop(['sex'], axis=1, inplace=True)","b75ed681":"#Definir X y y\nX = penguins.drop(['species'], axis=1)\ny = penguins['species']","c9e9490b":"#Ajustar modelo\nknnmodel = KNeighborsClassifier(n_neighbors=9, weights='distance')\nknnmodel.fit(X, y)","227b9fab":"#Evaluar exactitud del modelo\nscores = cross_val_score(knnmodel, X, y, cv=10)\n\nprint(\"Exactitud de cada particion:\", scores)\nprint(\"Exactitud Promedio:\", scores.mean())","99679167":"#C\u00f3digo de figura basado en notebook 02-KNN\n#Entrenar modelo con dos clases\n# we use only two columns to be able to display 2d plots\nx2d = penguins[['flipper_length_mm', 'body_mass_g']]\ny2d = penguins['species']\n\nLINE = \"#5FAD56\"\nA = \"#0075a2\"\nB = \"#481620\"\nC = \"#D55672\"\nOTHER = \"#F2C14E\"\n\nknnmodel2d = KNeighborsClassifier(n_neighbors=9, weights='distance')\nknnmodel2d.fit(x2d, y2d)\n\n\n\ndef draw_kernel(model, fig, r, c):\n    \n    # Create classifier, run predictions on grid\n\n    x1 = np.linspace(x2d['flipper_length_mm'].min(), x2d['flipper_length_mm'].max(), 50)\n    x2 = np.linspace(x2d['body_mass_g'].min(), x2d['body_mass_g'].max(), 50)\n    xx1, xx2 = np.meshgrid(x1, x2)\n\n    Z = model.predict(np.c_[xx1.ravel(), xx2.ravel()])\n    Z = Z.reshape(xx1.shape)\n\n    fig.add_trace(go.Contour(\n        x=x1,\n        y=x2,\n        z=Z,\n        showscale=False,\n        opacity=0.40,\n        colorscale=[[0, A], [0.5, B], [1, C]]\n    ), row=r, col=c)\n    \n    fig.add_trace(go.Scatter(\n        x=x2d['flipper_length_mm'], \n        y=x2d['body_mass_g'],\n        text=y2d,\n        mode='markers',\n        marker_symbol=y2d,\n        marker=dict(\n            color=y,\n            colorscale=[[0, A], [0.5, B], [1, C]]\n        )\n    ), row=r, col=c)\n\nfig2 = make_subplots(\n    rows=1, \n    cols=1,\n)\n\ndraw_kernel(knnmodel2d, fig2, 1 , 1)\n\nfig2.update_layout(\n    showlegend=False, \n    title_text=\"Penguins species classification with KNN (only 2 inputs)\",\n    xaxis_title=\"flipper_length_mm\",\n    yaxis_title=\"body_mass_g\"\n    )\n\nfig2.show()","cb95de64":"#Evaluar exactitud del modelo 2D\nscores = cross_val_score(knnmodel2d, x2d, y2d, cv=10)\n\nprint(\"Exactitud de cada particion:\", scores)\nprint(\"Exactitud Promedio:\", scores.mean())","fe0aadbd":"# Species names\nspecies_names = list(penguins_orig[\"species\"].unique())\n\n# Plot non-normalized confusion matrix\ndisp = plot_confusion_matrix(knnmodel, X, y, display_labels=species_names,normalize=None)\nplt.show()","1ff7ddcc":"# Correlaci\u00f3n","3b0d9ca9":"# Matriz de confusi\u00f3n","3539713b":"# Parte B: KNN","1bf81966":"# Modelo SVM","0c4ba81f":"# Contorno de clases","a34aaddd":"# Importar Bibliotecas","ede134ab":"# Parte A: SVM","a1657ea4":"# Importar datos\n\nSe va a utilzar un dataset para clasificar [tipos de estrellas](https:\/\/www.kaggle.com\/deepu1109\/star-dataset).\n\nTipos de estrellas:\n1. Brown Dwarf -> Star Type = 0\n\n2. Red Dwarf -> Star Type = 1\n\n3. White Dwarf-> Star Type = 2\n\n4. Main Sequence -> Star Type = 3\n\n5. Supergiant -> Star Type = 4\n\n6. Hypergiant -> Star Type = 5","c77658b1":"# Importar datos","39b782e7":"# Modelo KNN","468a532c":"# Codificar datos categ\u00f3ricos","1f7d862f":"# Valores At\u00edpicos","e4110475":"# Correlaci\u00f3n","2b6bf11a":"Se comprob\u00f3 que con la transformaci\u00f3n se mejora el score del modelo, sin necesidad de eliminar los datos.","7c321acd":"# Codificar datos categ\u00f3ricos","aae4f9e2":"# Machine Learning Aplicado\n\nTarea 7\n\nC\u00e9sar Jim\u00e9nez Mena"}}