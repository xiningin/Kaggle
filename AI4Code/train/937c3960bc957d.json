{"cell_type":{"9ae8933c":"code","964dd923":"code","023e82d3":"code","3b8c6dc9":"code","798b055c":"code","1b9737c1":"code","e4d7f427":"code","2965e9c4":"code","e26a98a0":"code","f7b04998":"code","2d7994e5":"code","2b9dbee7":"code","246cd9b5":"code","f05c1efa":"code","28b57fe8":"code","723b2c3f":"code","803a110c":"code","53a65e93":"code","362a8611":"code","f1694b27":"code","dcdfedb2":"code","6d31e63b":"code","f15b9347":"code","08c2333b":"code","8c6d1004":"code","7caf82b9":"code","305b25f7":"code","cd695264":"code","ffde162e":"code","d41f3055":"code","eb134d2b":"code","a0993073":"code","b2517dc6":"code","e55dcc5f":"code","3ee58b47":"code","01c170d5":"code","be75ebde":"code","b21e113b":"code","3699ea73":"code","dd8e0682":"code","baa30c10":"code","052aeece":"code","8e22e1ed":"code","6fde2e69":"code","83dbbfd5":"code","3e1911a7":"code","9082178b":"code","a14d2f94":"code","ee898473":"code","dfb7195e":"code","13433fef":"code","fe3f128a":"code","9e7e3a1f":"code","afcd8c9e":"code","0a5e8b1a":"code","6ed09109":"code","ad1a0dc6":"code","77968302":"code","a7a875c7":"code","bba3bd5f":"code","fa37d946":"code","80865eb0":"code","f60d0edd":"code","7658b4de":"code","541c0e3e":"code","e05bf490":"code","66cd92c6":"markdown","f5e1701f":"markdown","1009f4b1":"markdown","758e8b7c":"markdown","f3742fac":"markdown","45c5c340":"markdown","72f1adf6":"markdown","3999cbd6":"markdown","45f36dd3":"markdown","95f46997":"markdown","64e57277":"markdown","d07e0bf6":"markdown","108a087f":"markdown","7714845e":"markdown","ceb730eb":"markdown","1c8ac83e":"markdown","e50aab51":"markdown","3167b8be":"markdown","20646323":"markdown","580beb2d":"markdown","b19e4fe0":"markdown","fe8d71eb":"markdown","5fdad6ad":"markdown","010a42a4":"markdown","865e6365":"markdown","1aabe6c0":"markdown","5362725e":"markdown","d7d86a55":"markdown","c5210ed6":"markdown","d5086789":"markdown","6b0c06b3":"markdown","801625df":"markdown","9bead9e9":"markdown","59371e42":"markdown","dc86a5aa":"markdown","3e0ed849":"markdown","dad4f65f":"markdown","c3e77540":"markdown","d5a41af0":"markdown","75d0ddae":"markdown","e0c9a731":"markdown","2fabc444":"markdown","b4920d82":"markdown","a2d7fd2c":"markdown","cca633a4":"markdown"},"source":{"9ae8933c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","964dd923":"\ntrain = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain.head()","023e82d3":"print('Training Set Shape: ',train.shape)","3b8c6dc9":"# Number of unique stocks in train file\n\nprint(\"Total stocks=\",len(train.stock_id.unique()))","798b055c":"# number of time_id for each stock\ntrain.stock_id.value_counts().sort_index()","1b9737c1":"train.describe()","e4d7f427":"# Mean value of target in train\n\nprint(\"Mean value of volatility is= \",train.target.mean())","2965e9c4":"print(\" Mean of target= \",train['target'].mean())\nprint(\" Median of target= \",train['target'].median())\n\n\nplt.figure(figsize=(10, 8))\nsns.histplot(train['target'], kde=True)\nplt.axvline(train['target'].mean(), color='r', linestyle='--', label=\"Mean\")\nplt.axvline(train['target'].median(), color='g', linestyle='--', label=\"Median\")\n\nplt.legend()\n\n","e26a98a0":"stock_id_mean_target=pd.DataFrame(train.groupby('stock_id',as_index=False)['target'].mean())","f7b04998":"\nstock_id_mean_target.head()","2d7994e5":"print(\"Stock_id with highest volatile value=\\n\\n\",stock_id_mean_target[stock_id_mean_target.target==max(stock_id_mean_target.target)].to_string(index=False),\"\\n\")\nprint(\"Stock_id with lowest volatile value=\\n\\n\",stock_id_mean_target[stock_id_mean_target.target==min(stock_id_mean_target.target)].to_string(index=False),\"\\n\")\nplt.figure(figsize=(10, 8))\nplt.plot(stock_id_mean_target.stock_id,stock_id_mean_target.target)\nplt.xlabel(\"stock_id\")\nplt.ylabel(\"mean target value\")\n","2b9dbee7":"#sorting stocks in order form by target value\n\nstock_id_mean_target_sorted=stock_id_mean_target.sort_values(by='target', ascending=True)\nstock_id_mean_target_sorted.head()","246cd9b5":"#plotting mean realized volatility of all stcoks in highset to lowest\n\nfig, ax = plt.subplots(figsize=(32, 48))\nax.barh(\n    y=np.arange(len(stock_id_mean_target_sorted)),\n    width=stock_id_mean_target_sorted['target'],\n   \n    align='center',\n    ecolor='black',\n    capsize=3\n)\n\nax.set_yticks(np.arange(len(stock_id_mean_target_sorted)))\nax.set_yticklabels(stock_id_mean_target_sorted.stock_id)\nax.set_xlabel('target', size=20, labelpad=15)\nax.set_ylabel('stock_id', size=20, labelpad=15)\nax.tick_params(axis='x', labelsize=20, pad=10)\nax.tick_params(axis='y', labelsize=20, pad=10)\nax.set_title('Mean Realized Volatility of Stocks', size=25, pad=20)\n\nplt.show()","f05c1efa":"#plotting top 10 most volatile stocks with their time_buckets\n\ntrain['stock_time_id'] = train['stock_id'].astype(str) + '_' + train['time_id'].astype(str)\n\nfig, ax = plt.subplots(figsize=(32, 10))\nax.barh(\n    y=np.arange(10),\n    width=train.sort_values(by='target', ascending=True).tail(10)['target'],\n    align='center',\n    ecolor='black',\n)\n\nax.set_yticks(np.arange(10))\nax.set_yticklabels(train.sort_values(by='target', ascending=True).tail(10)['stock_time_id'])\nax.set_xlabel('target', size=20, labelpad=15)\nax.set_ylabel('stock_time_id', size=20, labelpad=15)\nax.tick_params(axis='x', labelsize=20, pad=10)\nax.tick_params(axis='y', labelsize=20, pad=10)\nax.set_title('Top 10 Most Volatile Time Buckets', size=25, pad=20)\n\nplt.show()\n\ntrain.drop(columns=['stock_time_id'], inplace=True)","28b57fe8":"train['stock_time_id'] = train['stock_id'].astype(str) + '_' + train['time_id'].astype(str)\n\nfig, ax = plt.subplots(figsize=(32, 10))\nax.barh(\n    y=np.arange(10),\n    width=train.sort_values(by='target', ascending=True).tail(10)['target'],\n    align='center',\n    ecolor='black',\n)\n\nax.set_yticks(np.arange(10))\nax.set_yticklabels(train.sort_values(by='target', ascending=True).head(10)['stock_time_id'])\nax.set_xlabel('target', size=20, labelpad=15)\nax.set_ylabel('stock_time_id', size=20, labelpad=15)\nax.tick_params(axis='x', labelsize=20, pad=10)\nax.tick_params(axis='y', labelsize=20, pad=10)\nax.set_title('Top 10 Least Volatile Time Buckets', size=25, pad=20)\n\nplt.show()\n\ntrain.drop(columns=['stock_time_id'], inplace=True)","723b2c3f":"test = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/test.csv')\ntest.head()","803a110c":"submission = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/sample_submission.csv')\nsubmission.head()","53a65e93":"book_train_stock0 = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0\")\nbook_train_stock0.head(5)","362a8611":"book_train_stock0.describe()","f1694b27":"# book stock data of stock 0 at timeid =5\n\nbook_stock0__time_id5 = book_train_stock0[book_train_stock0['time_id']==5]","dcdfedb2":"#printing number of entries in bokk data for stock0 at time_id_5 \nprint(\"total entries for stock 0 at time_id =5 is \",len(book_stock0__time_id5),\"\\n\\n\")\nbook_stock0__time_id5.head()","6d31e63b":"book_stock0__time_id5.describe()","f15b9347":"\n\nbook_stock0__time_id5.hist(figsize=(20,12))\nplt.show()","08c2333b":"print(\"Difference between the mean value of ask_price1 and buy_price1= \" ,book_stock0__time_id5['ask_price1'].mean()-book_stock0__time_id5['bid_price1'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(book_stock0__time_id5['bid_price1'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price1')\n\nplt.plot(book_stock0__time_id5['ask_price1'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price1')\n\n\nplt.axvline(book_stock0__time_id5['bid_price1'].mean(), color='r', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['ask_price1'].mean(), color='g', linestyle='--', label=\"Mean of ask_price1\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"bid_price and ask price\")\nplt.legend()\nplt.title(\"bid_price1 and ask_price1 of stock0 at time_id_5 w.r.t seconds in buckets\")","8c6d1004":"#comapring bid_price2 and ask_price2\n\nprint(\"Difference between the mean value of ask_price2 and buy_price2= \" ,book_stock0__time_id5['ask_price2'].mean()-book_stock0__time_id5['bid_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(book_stock0__time_id5['bid_price2'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price2')\n\nplt.plot(book_stock0__time_id5['ask_price2'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price2')\n\n\nplt.axvline(book_stock0__time_id5['bid_price2'].mean(), color='r', linestyle='--', label=\"Mean of bid_price2\")\nplt.axvline(book_stock0__time_id5['ask_price2'].mean(), color='g', linestyle='--', label=\"Mean of ask_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"bid_price and ask price\")\nplt.legend()\nplt.title(\"bid_price2 and ask_price2 of stock0 at time_id_5 w.r.t seconds in buckets\")","7caf82b9":"print(\"Difference between the mean value of bid_price1 and bid_price2= \" ,book_stock0__time_id5['bid_price1'].mean()-book_stock0__time_id5['bid_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(book_stock0__time_id5['bid_price1'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price1')\n\nplt.plot(book_stock0__time_id5['bid_price2'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price2')\n\n\nplt.axvline(book_stock0__time_id5['bid_price1'].mean(), color='r', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['bid_price2'].mean(), color='g', linestyle='--', label=\"Mean of bid_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"bid_price1 and bid_price2\")\nplt.legend()\nplt.title(\"bid_price1 and bid_price2 of stock0 at time_id_5 w.r.t seconds in buckets\")","305b25f7":"print(\"Difference between the mean value of ask_price1 and ask_price2= \" ,book_stock0__time_id5['ask_price1'].mean()-book_stock0__time_id5['ask_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(book_stock0__time_id5['ask_price1'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price1')\n\nplt.plot(book_stock0__time_id5['ask_price2'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price2')\n\n\nplt.axvline(book_stock0__time_id5['ask_price1'].mean(), color='r', linestyle='--', label=\"Mean of ask_price1\")\nplt.axvline(book_stock0__time_id5['ask_price2'].mean(), color='g', linestyle='--', label=\"Mean of ask_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"ask_price1 and ask_price2\")\nplt.legend()\nplt.title(\"ask_price1 and ask_price2 of stock0 at time_id_5 w.r.t seconds in buckets\")","cd695264":"plt.figure(figsize=(15,10)) \nplt.plot(book_stock0__time_id5['bid_price1'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price1')\nplt.plot(book_stock0__time_id5['bid_price2'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price2')\nplt.plot(book_stock0__time_id5['ask_price1'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price1')\nplt.plot(book_stock0__time_id5['ask_price2'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price2')\n\nplt.axvline(book_stock0__time_id5['bid_price1'].mean(), color='r', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['ask_price1'].mean(), color='g', linestyle='--', label=\"Mean of ask_price2\")\nplt.axvline(book_stock0__time_id5['bid_price2'].mean(), color='k', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['ask_price2'].mean(), color='c', linestyle='--', label=\"Mean of ask_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"bid_price and ask price\")\nplt.legend()\nplt.title(\"bid_price and ask_price of stock0 at time_id_5 w.r.t seconds in buckets\")","ffde162e":"book_stock0__time_id5['wap1'] = (book_stock0__time_id5['bid_price1'] * book_stock0__time_id5['ask_size1'] +\n                                book_stock0__time_id5['ask_price1'] * book_stock0__time_id5['bid_size1']) \/ (\n                                       book_stock0__time_id5['bid_size1']+ book_stock0__time_id5['ask_size1'])","d41f3055":"\nbook_stock0__time_id5.head(2)","eb134d2b":"book_stock0__time_id5.describe()","a0993073":"#plotting change in WAP1 for stock0 at time_id_5 \n\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['wap1'],book_stock0__time_id5['seconds_in_bucket'])\nplt.axvline(book_stock0__time_id5['wap1'].mean(), color='r', linestyle='--', label=\"Mean of WAP1\")\nplt.xlabel(\"seconds_in_bucket\")\nplt.ylabel(\"WAP1\")\nplt.legend()\nplt.title(\"WAP1 of stock0 at time_id_5 w.r.t seconds in buckets\")","b2517dc6":"book_stock0__time_id5['wap2'] = (book_stock0__time_id5['bid_price2'] * book_stock0__time_id5['ask_size2'] +\n                               book_stock0__time_id5['ask_price2'] * book_stock0__time_id5['bid_size2']) \/ (\n                                       book_stock0__time_id5['bid_size2']+ book_stock0__time_id5['ask_size2'])","e55dcc5f":"book_stock0__time_id5.head(2)","3ee58b47":"#plotting change in WAP2 for stock0 at time_id_5 \n\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['wap2'],book_stock0__time_id5['seconds_in_bucket'])\nplt.axvline(book_stock0__time_id5['wap2'].mean(), color='r', linestyle='--', label=\"Mean of WAP2\")\nplt.xlabel(\"seconds_in_bucket\")\nplt.ylabel(\"WAP2\")\nplt.legend()\nplt.title(\"WAP2 of stock0 at time_id_5 w.r.t seconds in buckets\")","01c170d5":"print(\"Difference in mean valuse of WAP1 and WAP2= \",book_stock0__time_id5['wap1'].mean()-book_stock0__time_id5['wap2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['wap1'],book_stock0__time_id5['seconds_in_bucket'],label=\"WAP1\")\nplt.plot(book_stock0__time_id5['wap2'],book_stock0__time_id5['seconds_in_bucket'],label=\"WAP1\")\nplt.axvline(book_stock0__time_id5['wap1'].mean(), color='r', linestyle='--', label=\"Mean of WAP1\")\nplt.axvline(book_stock0__time_id5['wap2'].mean(), color='g', linestyle='--', label=\"Mean of WAP2\")\nplt.xlabel(\"seconds_in_bucket\")\nplt.ylabel(\"WAP\")\nplt.legend()\nplt.title(\"WAP of stock0 at time_id_5 w.r.t seconds in buckets\")","be75ebde":"#function to calculate the log_return value\n\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()","b21e113b":"#making copy of book_stock for calculating log_return2 \n# As we calculaate the log return value number of rows decrease by 1 in dataset\nbook_stock0__time_id5_1=book_stock0__time_id5.copy()","3699ea73":"#calculating log_return1 from WAP1\nbook_stock0__time_id5.loc[:,'log_return1'] = log_return(book_stock0__time_id5['wap1'])\nbook_stock0__time_id5 = book_stock0__time_id5[~book_stock0__time_id5['log_return1'].isnull()]\n\n\n#calculating log_return2 from WAP2\nbook_stock0__time_id5_1.loc[:,'log_return2'] = log_return(book_stock0__time_id5_1['wap2'])\nbook_stock0__time_id5_1 = book_stock0__time_id5_1[~book_stock0__time_id5_1['log_return2'].isnull()]","dd8e0682":"print(\"total entries for stock 0 at time_id =5 with log_return1 is \",len(book_stock0__time_id5),\"\\n\\n\")\nbook_stock0__time_id5.head(5)","baa30c10":"print(\"total entries for stock 0 at time_id =5 with log_return2 is \",len(book_stock0__time_id5_1),\"\\n\\n\")\nbook_stock0__time_id5_1.head(5)","052aeece":"# Adding log_return2 column in the initial dataframe\n\nbook_stock0__time_id5['log_return2']=book_stock0__time_id5_1['log_return2']\nbook_stock0__time_id5.head()","8e22e1ed":"book_stock0__time_id5.describe()","6fde2e69":"#plotting log_return1\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['log_return1'],book_stock0__time_id5['seconds_in_bucket'])\nplt.axvline(book_stock0__time_id5['log_return1'].mean(), color='r', linestyle='--', label=\"Mean of log_return1\")\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"log_return1\")\nplt.legend()\nplt.title(\"log_return1 of stock0 at time_id_5 w.r.t seconds in buckets\")","83dbbfd5":"#plotting log_return2\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['log_return2'],book_stock0__time_id5['seconds_in_bucket'])\nplt.axvline(book_stock0__time_id5['log_return2'].mean(), color='g', linestyle='--', label=\"Mean of log_return2\")\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"log_return2\")\nplt.legend()\nplt.title(\"log_return2 of stock0 at time_id_5 w.r.t seconds in buckets\")","3e1911a7":"#plotting log_return1 anf log_return2\n\nprint(\"Mean of log_return1=  \",book_stock0__time_id5.log_return1.mean(),\"\\nMean of log_return2=  \",book_stock0__time_id5.log_return2.mean(),\"\\n\\n\")\n\nplt.figure(figsize=(12,8)) \nplt.plot(book_stock0__time_id5['log_return1'],book_stock0__time_id5['seconds_in_bucket'],label='log_return1')\nplt.plot(book_stock0__time_id5['log_return2'],book_stock0__time_id5['seconds_in_bucket'],label='log_return2')\nplt.axvline(book_stock0__time_id5['log_return1'].mean(), color='r', linestyle='--', label=\"Mean of log_return1\")\nplt.axvline(book_stock0__time_id5['log_return2'].mean(), color='g', linestyle='--', label=\"Mean of log_return2\")\nplt.xlabel(\"seconds_in_bucket\")\nplt.ylabel(\"log_return\")\nplt.legend()\nplt.title(\"log_return of stock0 at time_id_5 w.r.t seconds in buckets\")\nplt.legend(fontsize=15)","9082178b":"#function to calculate the realized volatilty from the log_return value\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","a14d2f94":"#calculating the realize dvolatility\n\nrealized_vol1 = realized_volatility(book_stock0__time_id5['log_return1'])\nrealized_vol2 = realized_volatility(book_stock0__time_id5['log_return2'])\nprint(\"Calculated realized volatility for stock_id 0 on time_id 5 is\")\nprint(\"Realized_volatiltiy1= \",realized_vol1)\nprint(\"Realized_volatiltiy2= \",realized_vol2)","ee898473":"  \ntrade_train_stock0 = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\ntrade_train_stock0.head(5)","dfb7195e":"trade_train_stock0.describe()","13433fef":"# number of unqiue time_id for stock0 in train file\ntrain[train.stock_id==0]['time_id'].nunique()","fe3f128a":"#number of unique time_id for stock0 in trade data\ntrade_train_stock0['time_id'].nunique()","9e7e3a1f":"#unique values of seconds in bucket in book data\nbook_stock0__time_id5['seconds_in_bucket'].nunique()","afcd8c9e":"#unique values of seconds in bucket in trade data\n\ntrade_train_stock0[trade_train_stock0.time_id==5]['seconds_in_bucket'].nunique()","0a5e8b1a":"trade_stock0_example = trade_train_stock0[trade_train_stock0['time_id']==5]","6ed09109":"print(\"Number of entries for stock_0 at time_id_5 is= \",len(trade_stock0_example))\ntrade_stock0_example.head()","ad1a0dc6":"trade_stock0_example.describe()","77968302":"plt.figure(figsize=(10,8)) \nplt.plot(trade_stock0_example['price'],trade_stock0_example['seconds_in_bucket'],label='price')\nplt.axvline(trade_stock0_example['price'].mean(), color='g', linestyle='--', label=\"Mean of trade price \")\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"traded_price\")\nplt.legend()\nplt.title(\"traded_price of stock0 at time_id_5 w.r.t seconds in buckets\")\nplt.legend()","a7a875c7":"#comparing trade price and bid_price\n\nprint(\"Mean of trade price= \",trade_stock0_example['price'].mean() ,\"\\nMean of bid_price1 = \",book_stock0__time_id5['bid_price1'].mean() ,\"\\nMean of bid_price2= \",book_stock0__time_id5['bid_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(trade_stock0_example['price'],trade_stock0_example['seconds_in_bucket'],label='price')\nplt.plot(book_stock0__time_id5['bid_price1'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price1')\nplt.plot(book_stock0__time_id5['bid_price2'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price2')\n\nplt.axvline(trade_stock0_example['price'].mean(), color='r', linestyle='--', label=\"Mean of trade price\")\nplt.axvline(book_stock0__time_id5['bid_price1'].mean(), color='g', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['bid_price2'].mean(), color='c', linestyle='--', label=\"Mean of bid_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"traded_price and bid_price\")\nplt.legend()\nplt.title(\"traded_price and bid_price of stock0 at time_id_5 w.r.t seconds in buckets\")\nplt.legend()","bba3bd5f":"#comparing trade price and ask_price\n\nprint(\"Mean of trade price= \",trade_stock0_example['price'].mean() ,\"\\nMean of ask_price1 = \",book_stock0__time_id5['ask_price1'].mean() ,\"\\nMean of ask_price2= \",book_stock0__time_id5['ask_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \nplt.plot(trade_stock0_example['price'],trade_stock0_example['seconds_in_bucket'],label='price')\nplt.plot(book_stock0__time_id5['ask_price1'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price1')\nplt.plot(book_stock0__time_id5['ask_price2'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price2')\n\nplt.axvline(trade_stock0_example['price'].mean(), color='r', linestyle='--', label=\"Mean of trade price\")\nplt.axvline(book_stock0__time_id5['ask_price1'].mean(), color='g', linestyle='--', label=\"Mean of ask_price1\")\nplt.axvline(book_stock0__time_id5['ask_price2'].mean(), color='c', linestyle='--', label=\"Mean of ask_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"traded_price and ask_price\")\nplt.legend()\nplt.title(\"traded_price and ask_price of stock0 at time_id_5 w.r.t seconds in buckets\")\nplt.legend()","fa37d946":"#comparing trade price ,bid_price and ask_price\n\nprint(\"Mean of trade price= \",trade_stock0_example['price'].mean() ,\"\\nMean of ask_price1 = \",book_stock0__time_id5['ask_price1'].mean() ,\"\\nMean of ask_price2= \",book_stock0__time_id5['ask_price2'].mean(),\"\\n\\n\\n\")\n\n\n\nprint(\"\\nMean of bid_price1 = \",book_stock0__time_id5['bid_price1'].mean() ,\"\\nMean of bid_price2= \",book_stock0__time_id5['bid_price2'].mean(),\"\\n\\n\\n\")\n\nplt.figure(figsize=(15,10)) \n\nplt.plot(book_stock0__time_id5['bid_price1'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price1')\nplt.plot(book_stock0__time_id5['bid_price2'],book_stock0__time_id5['seconds_in_bucket'],label='bid_price2')\n\n\nplt.axvline(book_stock0__time_id5['bid_price1'].mean(), color='k', linestyle='--', label=\"Mean of bid_price1\")\nplt.axvline(book_stock0__time_id5['bid_price2'].mean(), color='m', linestyle='--', label=\"Mean of bid_price2\")\n\n\nplt.plot(trade_stock0_example['price'],trade_stock0_example['seconds_in_bucket'],label='price')\nplt.plot(book_stock0__time_id5['ask_price1'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price1')\nplt.plot(book_stock0__time_id5['ask_price2'],book_stock0__time_id5['seconds_in_bucket'],label='ask_price2')\n\nplt.axvline(trade_stock0_example['price'].mean(), color='r', linestyle='--', label=\"Mean of trade price\")\nplt.axvline(book_stock0__time_id5['ask_price1'].mean(), color='g', linestyle='--', label=\"Mean of ask_price1\")\nplt.axvline(book_stock0__time_id5['ask_price2'].mean(), color='c', linestyle='--', label=\"Mean of ask_price2\")\n\nplt.ylabel(\"seconds_in_bucket\")\nplt.xlabel(\"Price\")\nplt.legend()\nplt.title(\"traded_price bid_price and ask_price of stock0 at time_id_5 w.r.t seconds in buckets\")\nplt.legend()","80865eb0":"trade_stock0_example.loc[:,'log_return1'] = log_return(trade_stock0_example['price'])","f60d0edd":"trade_stock0_example.head(2)","7658b4de":"trade_stock0_example = trade_stock0_example[~trade_stock0_example['log_return1'].isnull()]\ntrade_stock0_example.head(2)","541c0e3e":"trade_stock0_example.describe()","e05bf490":"realized_vol_trade = realized_volatility(trade_stock0_example['log_return1'])\nprint(\"Calculated realized volatility for stock_id 0 on time_id 5 from trade_train_file is= \",realized_vol_trade)","66cd92c6":"**Calculating the log return**","f5e1701f":"There are 10 columns in each book data for every stock.\n\n1.  time_id - ID of the time bucket\n2.  seconds_in_bucket - Number of seconds passed since the start of the bucket\n3.  bid_price1 - Highest buy price after normalization\n4.  ask_price1 - Lowest sell price after normalization\n5.  bid_price2 - Second highest buy price after normalization\n6.  ask_price2 - Second lowest sell price after normalization\n7.  bid_size1 - Number of shares on the highest buy price\n8.  ask_size1 - Number of shares on the lowest sell price\n9.  bid_size2 - Number of shares on the second highest buy price\n10. ask_size2 - Number of shares on the second lowest sell price\n\n\n**For every time bucket order book last for 10 minutes and also we target volatility we are predicting for stock_id-time_id is next 10 minutes.**\n\nAlso the **seconds in bucket** is the number of seconds passed since the start of bucket and its **max value** will go 10 minutes i.e. **600 seconds**","1009f4b1":"From above plot we can see that for stock_0 at time_id5 for different seconds in bucket the **ask_price1 value is greater than the buy_price1** \n\nAlso visible through the plot of mean values.","758e8b7c":"> **Comparing traded price with bid_price and ask_price from book_train**","f3742fac":"**Calculating the log_return in trade_train**","45c5c340":"**Visualizing and Comparing log_return values with seconds_in_bucket for stock_0 at time_id_5**","72f1adf6":"Now, lets take look at **book_train.parquet** file","3999cbd6":"**Plotting the columns of book_train for stock0 at time_id5 w.r.t their count**","45f36dd3":"**Calculating WAP2 for stock0 at time_id5 for bid_price2 and ask_price2**","95f46997":"Trade_train file contains data regarding the trade that has been executed\n\nHere the price column indicate the price at which the stock_0 is traded at time_id_5\n\nWe will be calculating the realized volatility using this price","64e57277":"Comparing **ask_price1** and **ask_price2**","d07e0bf6":"So while submisson we will use two columns\n\nOne is the row_id from the test file\n\nAnd the other is the target value we have predicted for that row_id i.e. stock_id-time_id(stock_id at particular time_id)","108a087f":"The test file copntains three columns\n\n1 stock_id: Id of the stock\n\n2 time_id: Id of the time\n\n3 row_id: combined stock_id and time_id with a hypen(-)","7714845e":"**Visualizing most volatile time_id w.r.t stock_id**","ceb730eb":"Now using the featues in book_train we can calculate the realized volatiltiy for that 10 minute window.","1c8ac83e":"**Visualizing least volatile time_id w.r.t stock_id**","e50aab51":"There are **917553 rows** of data for stock_0.\n\nFor analysis lets break the data and analyse it for time_id=5","3167b8be":"The number of values of seconds_in_bucket in book data and trade data differ.\n\n**This implies that those orders in book data were not executed as it is not available in trade file**","20646323":"**Calculating the wap for stock0 at time_id5 using the above formula of WAP**","580beb2d":"For calculating the realized volatility from trade data we will follow the same procedure as followed in bokk_data.\n\n**Here we already have a fixed normalized price i.e. column price.**\n\n\n\nUsing this price column we will calculate the **log return value.**\n\n\nThen calculate the **realized volatility.**","b19e4fe0":"**book_train.parquet is a Order book**\n\nOrder book is a list of buy and sell orders.It also contains the list of number of shares being bid on or offered.","fe8d71eb":"For stock0 trade_train file contains 123443 rows.\n\nFor analysis , lets llok into data for only time_id=5","5fdad6ad":"**Calculating mean target value for each stock**","010a42a4":"Similarly  **ask_price2 value is greater than the buy_price2**","865e6365":"** Noe lets take a look into Trade_train file**\n\nThe file contains trade data for ecery stock in train file\n\nHer efor analysis we are using trade data of stock0","1aabe6c0":"**To calculate realized volatility we go through the following precudure:**\n\n\n\nCalculate **Weighted Averaged price(WAP)** from the **bid price** and **ask price** and **their size**. WAP is a fixed price.\n\n    \n**\ud835\udc4a\ud835\udc34\ud835\udc43** =( \ud835\udc35\ud835\udc56\ud835\udc51\ud835\udc43\ud835\udc5f\ud835\udc56\ud835\udc50\ud835\udc521 \u2217 \ud835\udc34\ud835\udc60\ud835\udc58\ud835\udc46\ud835\udc56\ud835\udc67\ud835\udc521 + \ud835\udc34\ud835\udc60\ud835\udc58\ud835\udc43\ud835\udc5f\ud835\udc56\ud835\udc50\ud835\udc521 \u2217 \ud835\udc35\ud835\udc56\ud835\udc51\ud835\udc46\ud835\udc56\ud835\udc67\ud835\udc521) \/( \ud835\udc35\ud835\udc56\ud835\udc51\ud835\udc46\ud835\udc56\ud835\udc67\ud835\udc521 + \ud835\udc34\ud835\udc60\ud835\udc58\ud835\udc46\ud835\udc56\ud835\udc67\ud835\udc521 )\n      \n    \n Similary using above formula we can calculate **WAP2 for bid_prce2, ask_price2 and their sizes.**\n    \n\n Then we calculate the **log return value of the WAP**\n    \n $\\huge r_{t-1, t} = \\log \\left( \\frac{S_{t-1}}{S_{t1}} \\right)$    \n \n where St is the fixed price at time t.In book_train the calculated WAP is the fixed price.\n        \n        \n        \n Then we calculate the **realized volatility using log return value **\n \n  \n $\\huge \\sigma = \\sqrt{\\sum_{t}r_{t-1, t}^2}$   \n \n \n\n       ","5362725e":"book_train.parquet contains data for stocks available in train.csv\n\nHere for exploratory analysis we are using stock_0 as example","d7d86a55":"Trade data contains the data of trades that are executed.\n\nThere are 5 columns in every trade data partition. The columns are:\n\n* time_id - ID of the time bucket\n\n* seconds_in_bucket - Number of seconds passed since the start of the bucket\n\n* price - Weighted average price of all executed trades happening in one second\n\n* size - Total number of traded shares happening in one second\n\n* order_count - Number of unique trade orders happening in one second","c5210ed6":"Calculating the realized volatility from the log_return value calculated","d5086789":"In the dataset we are given following files:\n\n1.Train.csv , Test.csv\n\n2.Book_train , Book_test\n\n3.Trade_train , Trade_test","6b0c06b3":"**Now lets see the test file**","801625df":"Comparing 'seconds_in_bucket' column in trade data with book data fro stock0 at time_id=5","9bead9e9":"**Visualizing stock mean taregt value in sorted order**","59371e42":"train.csv file contains three columns\n\n1.**stock_id**: Id of the stock\n\n2.**time_id**: Id of the time bucket\n\n3.**target**: Realized volatility of the next 10 minute window under the same stock_id\/time_id","dc86a5aa":"Plotting target value frequency in train file and its mean and median","3e0ed849":"Comparing **bid_price1** and **bid_price2**","dad4f65f":"First let's look into **train.csv**","c3e77540":"**Lets take look at how to submit the test results**","d5a41af0":"To calculate the log return we compute the log ratio between two consecutive WAP.\n\nThat is why the number of entries in the table decreases by 1\n\nFor stock_0 initialy it has 302 entries but now has 301","75d0ddae":"Plotting both values of bid_price and ask_price","e0c9a731":"The competition objective is to predict the volatility(degree  of variation) in trading price of different stocks","2fabc444":"**Comparing WAP1 and WAP2**","b4920d82":"**Calculating the realized volatility**","a2d7fd2c":"From below code we can see that for all time_id in train file it has entry in trade_file","cca633a4":"**Comparing bid_price and ask_price for stock_0 at time_id_5**"}}