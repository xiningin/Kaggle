{"cell_type":{"65443286":"code","4f865801":"code","6cad5519":"code","fe3989bd":"code","14f28382":"code","ceea3db7":"code","6d3309b9":"code","5319fd7e":"code","af463beb":"code","40bbf1c4":"code","df2514bc":"code","64b70615":"code","1836b2b0":"code","5f3f1218":"code","54fd289d":"code","72254e0c":"code","9d7b50c5":"code","5a74a40d":"code","e4df3cf7":"code","0f65b7e7":"code","1acca184":"markdown","9c8ac51b":"markdown","6124f778":"markdown","9f328a17":"markdown"},"source":{"65443286":"# Credit to Ajay Tibrewal\n\nimport numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n        \n        ","4f865801":"from sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.preprocessing import LabelEncoder\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nimport xgboost as XGB","6cad5519":"train_data = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\n\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n\n\nfeatures_list = [\"OverallQual\", \"GrLivArea\",\"FullBath\",\"1stFlrSF\",\"TotalBsmtSF\",\"GarageArea\",\"GarageCars\",\"TotRmsAbvGrd\",\"YearBuilt\",\"Fireplaces\"]","fe3989bd":"train_data.head()","14f28382":"train_data['SalePrice'] = np.log1p(train_data['SalePrice'])","ceea3db7":"train_data.corr()","6d3309b9":"data = pd.concat([train_data, test], axis=0, sort=False)\ndata.drop(['Id', 'SalePrice'], axis=1).head()","5319fd7e":"Total = data.isnull().sum().sort_values(ascending=False)\npercent = (data.isnull().sum() \/ data.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([Total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)\n","af463beb":"data.drop((missing_data[missing_data['Total'] > 5]).index, axis=1, inplace=True)\nprint(data.isnull().sum().max())","40bbf1c4":"numeric_missed = ['BsmtFinSF1',\n                  'BsmtFinSF2',\n                  'BsmtUnfSF',\n                  'TotalBsmtSF',\n                  'BsmtFullBath',\n                  'BsmtHalfBath',\n                  'GarageArea',\n                  'GarageCars']\n\nfor feature in numeric_missed:\n    data[feature] = data[feature].fillna(0)","df2514bc":"categorical_missed = ['Exterior1st',\n                  'Exterior2nd',\n                  'SaleType',\n                  'MSZoning',\n                   'Electrical',\n                     'KitchenQual']\n\nfor feature in categorical_missed:\n    data[feature] = data[feature].fillna(data[feature].mode()[0])","64b70615":"data.drop(['Utilities'], axis=1, inplace=True)\ndata['Functional'] = data['Functional'].fillna('Typ')\n\n","1836b2b0":"numeric_feats = data.dtypes[data.dtypes != 'object'].index\nskewed_feats = data[numeric_feats].apply(lambda x: x.skew()).sort_values(ascending=False)\nhigh_skew = skewed_feats[abs(skewed_feats) > 0.5]\nhigh_skew","5f3f1218":"for feature in high_skew.index:\n    data[feature] = np.log1p(data[feature])","54fd289d":"data['TotalSF'] = data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF']\n","72254e0c":"data = pd.get_dummies(data)\ndata.head()\n","9d7b50c5":"y_train = train_data[\"SalePrice\"]\n\nx_train = data[:len(y_train)]\nx_test = data[len(y_train):]","5a74a40d":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nscorer = make_scorer(mean_squared_error,greater_is_better = False)\ndef rmse_CV_train(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(x_train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_train, y_train,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)\ndef rmse_CV_test(model):\n    kf = KFold(5,shuffle=True,random_state=42).get_n_splits(train.values)\n    rmse = np.sqrt(-cross_val_score(model, x_test, y_test,scoring =\"neg_mean_squared_error\",cv=kf))\n    return (rmse)","e4df3cf7":"\nmodel = XGB.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, random_state =7, nthread = -1)\nmodel.fit(x_train, y_train)","0f65b7e7":"y_predict = np.floor(np.expm1(model.predict(x_test)))\noutput = pd.DataFrame()\noutput['Id'] = test['Id']\noutput['SalePrice'] = y_predict\noutput.to_csv('my_submission.csv',index=False)","1acca184":"* Correlation matrix","9c8ac51b":"* import required dependencies","6124f778":"* input data","9f328a17":"# Building model"}}