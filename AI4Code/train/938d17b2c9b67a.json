{"cell_type":{"25f00c91":"code","0e413ba4":"code","a96f9c7e":"code","6625788d":"code","74839d0f":"code","5e28f8f4":"code","f941fa4c":"code","1f03c810":"code","db6f7dab":"code","510546ea":"code","1b8e466a":"code","3fc2e633":"code","5257b8d1":"code","7f57e9c7":"code","01e2c872":"code","937516fc":"code","896994fe":"code","319f2aa8":"code","fdf8c9fd":"code","76ffb014":"code","362f7f4f":"code","6389b97e":"code","a5656abc":"code","675d0f03":"code","24a79e63":"code","073e2505":"code","b113d4c0":"code","48d5ead1":"markdown","bdd332a4":"markdown","6d0e24d5":"markdown","2cca342b":"markdown"},"source":{"25f00c91":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","0e413ba4":"data0=pd.read_csv('..\/input\/diabetes-uci-dataset\/diabetes.csv')\ndata0","a96f9c7e":"print(data0.columns.tolist())","6625788d":"list_cols = [ 'Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss', 'weakness', 'Polyphagia', \n             'Genital thrush', 'visual blurring', 'Itching', 'Irritability', 'delayed healing', \n             'partial paresis', 'muscle stiffness', 'Alopecia', 'Obesity', 'class']\nce_ohe = ce.OrdinalEncoder(cols=list_cols,handle_unknown='impute')\ndata1 = ce_ohe.fit_transform(data0)\ndata1","74839d0f":"target=['class']\ndatay=data1[target]\ndatax=data1.drop('class',axis=1)","5e28f8f4":"print(datay[0:2].T)\nprint()\nprint(datax[0:2].T)","f941fa4c":"n=len(data1)\nprint(n)","1f03c810":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","db6f7dab":"trainX=datax.loc[N[0:(n\/\/4)*3]]\ntrainY=datay.loc[N[0:(n\/\/4)*3]]\ntestX=datax.loc[N[(n\/\/4)*3:]]\ntestY=datay.loc[N[(n\/\/4)*3:]]","510546ea":"print(trainX.shape)\nprint(testX.shape)","1b8e466a":"df_columns = list(datax.columns)\nprint(df_columns)","3fc2e633":"train_df=trainX\ntest_df=testX","5257b8d1":"train_df.columns=df_columns\ntest_df.columns=df_columns","7f57e9c7":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","01e2c872":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","937516fc":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","896994fe":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","319f2aa8":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","fdf8c9fd":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","76ffb014":"y = trainY\nprint(y.shape)\nydf=pd.DataFrame(y)\nydf","362f7f4f":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('trainY of '+target[i],fontsize=12)\n    ax.set_ylabel('oof of '+target[i],fontsize=12)\n    ax.scatter(y,oof)","6389b97e":"print(target)","a5656abc":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","675d0f03":"pred1=[]\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)\n    pred0 = np.array([model.predict(test_feat_df.values) for model in models])\n    pred1+=[np.mean(pred0, axis=0)]","24a79e63":"pred1=np.array(pred1)\ntestY=np.array(testY)","073e2505":"print(pred1.T.shape)\nprint(testY.shape)","b113d4c0":"for i in range(1):\n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('ACTUAL '+target[i],fontsize=12)\n    ax.set_ylabel('PRDICTED '+target[i],fontsize=12)\n    ax.scatter(testY[:,i],pred1.T[:,i])","48d5ead1":"# Target setting","bdd332a4":"# Visualize Importance and Predict","6d0e24d5":"# Model","2cca342b":"### For 'Diabetes', 'Polyurea' is the most important factor."}}