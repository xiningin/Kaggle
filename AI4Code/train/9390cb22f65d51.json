{"cell_type":{"a86bd0e0":"code","d82d5f78":"code","c94e0bf9":"code","81728e88":"code","8cba57b3":"code","dc2c0316":"code","88c86cf4":"code","9310f83a":"code","6b0242ce":"code","16854f77":"code","59aefe5a":"code","88138562":"code","4942bd17":"code","ba98fb4e":"code","18f6b94a":"code","993a5c2e":"code","2e7d372a":"code","82e2f8ac":"code","63d37b5a":"code","71af4abc":"code","8a04d3ac":"code","c123ee72":"code","72bc206d":"code","4c52d385":"code","a0379b48":"code","51af1853":"code","c8966505":"code","5f0c441a":"code","cd6866b7":"code","697618e1":"markdown","aa418c31":"markdown","bb57e60c":"markdown","ad433409":"markdown","06416fa9":"markdown","e63a4379":"markdown","0f11b8b3":"markdown","62c3e78c":"markdown","03048df3":"markdown","22efbbb7":"markdown","238cfac8":"markdown","7525ce89":"markdown","4d00a8e4":"markdown","a58066ab":"markdown","5cab3c58":"markdown","a5e2f43a":"markdown","40ecaf7d":"markdown","fcd10a25":"markdown","fb72543f":"markdown","181a7a30":"markdown","58e7bace":"markdown","241a91ed":"markdown","041282dc":"markdown","16c3cbf7":"markdown","4169ff57":"markdown","05f08e88":"markdown","2d4a2de0":"markdown","12300396":"markdown","060f1b09":"markdown","747a7dde":"markdown","5de8eeb5":"markdown"},"source":{"a86bd0e0":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn')\n\n\nimport os\n\n#missingno is a python library enables a quick visual summary of the completeness of your dataset.\nimport missingno as msno","d82d5f78":"#load train data\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\n#create a new column 'Is_train' to differentiate the training data from the testing data, 1 = training, 0 = testing\ntrain_df['Is_train'] = 1\ntest_df['Is_train'] = 0\n#create the 'Survived' column filled with null values in the testing data\n#so as to share the same columns as the training data\ntest_df['Survived'] = np.nan\n#combine the trainning data and testing data\nfull_df = pd.concat([train_df, test_df], ignore_index=True)\n# delete the two dataframes which are no longer needed\ndel train_df, test_df","c94e0bf9":"#Check the data type of each column\nfull_df.info()","81728e88":"#Find the columns of object dtype\nobject_columns = [c for c in full_df.columns if full_df[c].dtype == 'object']\nobject_columns","8cba57b3":"#Get the statistics of each object column (most frequent values, etc.)\nfull_df[object_columns].describe()","dc2c0316":"#Look for common symbols for missing values, like '?', 'NA', '-', '.', 'unknown'\ni=1\nfor c in object_columns:\n    print(str(i)+'.', \"Top 10 unique values for column '{}':\".format(c))\n    unique_values = full_df[c].dropna().unique()\n    print(full_df[c].value_counts().index.to_list()[:10], '\\n')\n    unique_values_lowercase = np.char.lower(unique_values.astype('str'))\n    print(\"Is 'na'(case insensitive) one of its unique values?\", 'na' in unique_values_lowercase, '\\n')    \n    print(\"Is 'unknown' (case insensitive) one of its unique values?\", 'unknown' in unique_values_lowercase, '\\n')\n    i+=1","88c86cf4":"#Look for values out of expected data range, like 0 for age, or extremely large number like 9999 for age\nfull_df.describe()","9310f83a":"print('{} fare values are zero.'.format(np.sum(full_df.Fare==0)))\nfull_df[full_df.Fare==0]","6b0242ce":"#number of missing values\nmissingness = full_df.isnull().sum().to_frame(name='Number') \n\n#percentage of missing values\nmissingness['Percentage %'] = round(missingness['Number']\/len(full_df)*100)\n\nmissingness","16854f77":"s = full_df[full_df.Is_train==1].isnull().any()\ncols_missing = s.where(s==True).dropna().index.to_list()\ncols_missing","59aefe5a":"#Check nullity matrix for the columns with missingness and the 'Survived' column\ntrain_sorted = full_df[full_df.Is_train==1].sort_values(by='Survived')\ncols_matrix = cols_missing.copy()\ncols_matrix.append('Survived')\nmsno.matrix(train_sorted[cols_matrix], figsize=(5, 5), sparkline=False);","88138562":"def missingness_by_value(col1, col2, df=full_df):\n    \"\"\"\n    check the missingness (%) of a colomn varied by the values of another column\n    \n    Args:\n    col1 (str): the name of a column with missing values\n    col2 (str): the name of a column of which the values may affect the missingness of col1\n    df (pd.DataFrame) : the dataframe contains both col1 and col2\n    \"\"\"\n    for v in np.sort(df[col2].dropna().unique()):\n        missingness = df.loc[df[col2]==v, col1].isnull().mean()*100\n        print(\"Missingness percentage of {} when the value of {} equals {}: {}%\".format(col1, col2, v, round(missingness)))","4942bd17":"#check the missingness of 'Cabin' column varied by the values of 'Survived' column\nmissingness_by_value('Cabin', 'Survived')","ba98fb4e":"missingness_by_value('Age', 'Survived')","18f6b94a":"#check if the variables' values affect the missingness of 'Cabin' or 'Age'\nfor c in full_df.columns:\n    if c=='Survived':\n        continue\n    full_df_sorted = full_df.sort_values(by=c)\n    cols_matrix = ['Cabin', 'Age']\n    cols_matrix.append(c)\n    print(\"Nullity matrix for data sorted by column '{}'\".format(c))\n    msno.matrix(full_df_sorted[cols_matrix], figsize=(5, 5), sparkline=False)\n    plt.show()","993a5c2e":"missingness_by_value('Cabin', 'Pclass')","2e7d372a":"missingness_by_value('Age', 'Pclass')","82e2f8ac":"np.sort(full_df['Ticket'].unique())","63d37b5a":"full_df['Pure_Digit_Ticket'] = full_df['Ticket'].apply(str.isdigit)\nmissingness_by_value('Cabin', 'Pure_Digit_Ticket', full_df)","71af4abc":"np.sort(full_df['Name'].unique())","8a04d3ac":"missingness_by_value('Age', 'Embarked')","c123ee72":"msno.heatmap(full_df[['Age', 'Cabin']], figsize=(5,5));","72bc206d":"#display the record with missing fare value\nfull_df.loc[full_df.Fare.isnull()]","4c52d385":"#check if there is any other record with the same ticket number\nfull_df[full_df.Ticket=='3701']","a0379b48":"#impute\nfull_df.loc[1043, 'Fare'] = 7.8292\nfull_df.loc[[1043]]","51af1853":"#display the record with missing Embarked value\nfull_df.loc[full_df.Embarked.isnull()]","c8966505":"#impute\nfull_df.loc[[61, 829], 'Embarked'] = 'S'\nfull_df.loc[[61, 829]]","5f0c441a":"#Drop 'Cabin'\nfull_df.drop('Cabin', axis=1, inplace=True)\n\nfull_df.columns","cd6866b7":"#check how many records with missing age values there are in train data set and test data set respectively\nfull_df.loc[full_df.Age.isnull(), 'Is_train'].value_counts()","697618e1":"## Analyze the number and type of missing values in the data","aa418c31":"### For 'Age'","bb57e60c":"**Conclusion:**   \nAll the missing values are already null values. So no conversion is needed.","ad433409":"### For 'Fare'","06416fa9":"**Finding:**   \nNo other record is found of '3701' ticket.  \nAs the fare is strongly correlated with the pclass and the fare increases with the ticket group size, the missing fare value can be filled with the median fare value (7.8292, refered in the [notebook](https:\/\/www.kaggle.com\/bofangli\/make-fare-crystal-clear-fare-sharing-zero-fare?scriptVersionId=47733767)) of the samples which share the same pclass and ticket group size (pclass=3, ticket group size=1).","e63a4379":"### Analyze the types of missingness (MCAR, MAR, MNAR)","0f11b8b3":"**Finding:**   \n'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked' are of object type.   \nThe rest are numerical (int or float).   ","62c3e78c":"**Finding & Analysis:**  \nThe minimum fare is zero, involving 17 tickets.It may indicate free tickets or missing values.However, Tammy found the evidence about the complimentary ticket for John George( https:\/\/www.kaggle.com\/c\/titanic\/discussion\/10570). As not any evidence was found about the missing fare data marked as 0, I interpreted the value 0 as it is (meaning free ticket).\n\nNo unusal numerical values have been found representing missing values.","03048df3":"#### Check the columns of object dtype\nCheck if any of the columns which are supposed to be numerical types are now object type.\nThe existence of missing values makes numerical columns into object dtype.","22efbbb7":"**Finding & Analysis:**  \nThe missing values are shown as white lines in the msno matrix.  \n\nIn the matrix, the upper part of the 'Cabin' column  is whiter than its lower part, indicating that more missing values of 'Cabin' are found for the victims than for the survivors.It's confirmed by checking the missing percentages for the survivors and the victims. So the missingness of 'Cabin' column can not be categorized as 'MCAR'.\n\nThe 'Age' column is the same as 'Cabin' so its missingness can not be categorized as 'MCAR' either.   \n\nEven though the two missing values of 'Embarked' are all for the survivors, considering the very few missing values (only 2), it doesn't necessarily mean the strong relationship between the 'Survived' variable and the missingness of 'Embarked'. Since only a couple of 'Embarked' values are missing, its missingness can be categorized as 'MCAR'.\n\nOnly one 'Fare' value is missing. Its missingness can be categorized as 'MCAR'.","238cfac8":"**Finding:**  \n1014 (77%) Cabin values are missing.Very large proportion!  \n263 (20%) Age values are missing. Not small proportion.  \n1 Fare value and 2 Embarked values are missing. Very small proportions.","7525ce89":"## Workflow for treating missing values and three tyes of missing data\n\n**Workflow:**[1]  \n(1) convert all missing values to null values  \n(2) analyze the amount and type of missingness in the data  \n(3) appropriately delete or impute missing values  \n(4) evaluate and compare the perfomances of the treated\/imputed dataset  \n\nThis notebook (Part 1) covers Step1 and Step2 for Titanic Kaggle Competition. The next notebook (Part 2) will cover Step3 and Step4.\n\n**Rubin (1976) classified missing data problems into three categories:**[2]  \n(1) **MCAR**, missing completely at random. If the probability of being missing is the same for all cases, then the data are said to be missing completely at random (MCAR). This effectively implies that causes of the missing data are unrelated to the data.  \n(2) **MAR**, missing at random.If the probability of being missing is the same only within groups defined by the observed data, then the data are missing at random (MAR). MAR is a much broader class than MCAR.  \n(3) **MNAR**, missing not at random.If neither MCAR nor MAR holds, then we speak of missing not at random (MNAR).","4d00a8e4":"## References:\n[1] [DataCamp Course \"Dealing with Missing Data in Python\"](https:\/\/www.datacamp.com\/courses\/dealing-with-missing-data-in-python)  \n[2] [Flexible Imputation of Missing Data, by Stef van Buuren](https:\/\/stefvanbuuren.name\/fimd\/sec-MCAR.html)","a58066ab":"## Delete or impute missing values\n\nFor small number of MCAR missin values, like 'Fare' and 'Embarked', either deletion or imputation is workable.\n\nFor large number of missingness values, like 'Cabin', the variable can be dropped.","5cab3c58":"### For 'Embarked'   ","a5e2f43a":"### Analyze the number and percentages of missing values","40ecaf7d":"**Finding:**   \nThe common symbols or words representing missing values are not found in the Object columns. ","fcd10a25":"#### Check the dependency of missingness between columns ('Cabin', 'Age')","fb72543f":"## Convert all missing values to null values (None, np.nan)","181a7a30":"## Table of Contents\n\n1. Workflow for treating missing values and three tyes of missing data\n2. Load libraries, packages, modules and data\n3. Convert all missing values to null values (None, np.nan)\n    3.1  Find the missing values which are not null values yet\n        3.1.1 Check the columns of object dtype\n        3.1.2 Check the numerical columns\n4. Analyze the number and type of missing values in the data\n    4.1 Analyze the number and percentages of missing values\n    4.2  Analyze the types of missingness (MCAR, MAR, MNAR)\n        4.2.1  Look for patterns of missingness related with column values\n        4.2.2  Check the dependency of missingness between columns ('Cabin', 'Age')\n5. Delete or impute missing values\n    5.1 For 'Fare'\n    5.2 For 'Embarked'\n    5.3 For 'Cabin'\n    5.4 For 'Age'\n6. References","58e7bace":"**Finding:**   \nThere are a few missing age values both in the train data set and the test data set.\nDeletion is not an option. A proper imputation strategy needs to be made.","241a91ed":"### For 'Cabin'","041282dc":"**Finding:**   \nThe dependency of missingness between 'Cabin' and 'Age' is low.","16c3cbf7":"#### Check the numerical columns","4169ff57":"## Load libraries, packages, modules and data","05f08e88":"### Find the missing values which are not null values yet","2d4a2de0":"**Finding & Analysis:**  \nAccording to the matrices, there are fewer missing values of 'Cabin' at smaller value of 'Pclass' and 'Ticket'. \nWith the calculation of 'Cabin' missingness, the percentageis 21% for Pclass 1, 92% for Pclass 2, 98% for Pclass 3.   \nMost tickets are unique, the pure-digit values are smaller than the rest. After separating them into two groups, their missingness were calculated respectively and their results are the same.It will take further investigation to identify what ticket groups have fewer missingness.\n\nAccording to the webpage (https:\/\/www.encyclopedia-titanica.org\/cabins.html), 'The allocation of cabins on the Titanic is a source of continuing interest and endless speculation. Apart from the recollections of survivors and a few tickets and boarding cards, the only authoritative source of cabin data is the incomplete first class passenger list recovered with the body of steward Herbert Cave.'. It's consistent with my finding from the data analysis. So there are fewer missing values of 'Cabin'for Pclass 1 and the survivors.\n\nBesides, the matrices also show that there are fewer missing values of 'Age' at smaller value of 'Name' and 'Pclass' and bigger value of 'Embarked'.\nBased on the calculation, the missingness of 'Age' is 64% for Embarked Q, much higher than for Embarkek C or S (23%, 14%). 12% for Pclass1, 6% for Pclass2, 29% for Pclass3.   \nEach name values are unique. It will take further investigation to identify what name groups have more missingness.","12300396":"#### Look for patterns of missingness related with column values","060f1b09":"**Conclusion:**   \n\nSince 'Fare' and 'Embarked' have only one or two missing values, they can be categorized as MCAR (missing completely at random).\n\n'Cabin' has 77% missing values. Its missingness varies with 'Survived' and 'Pclass' variables. So it's categorized as MAR (missing at random).\n\n'Age' has 20% missing values. Its missingness varies with 'Survived', 'Pclass', 'Embarked'. So it's also categorized as MAR.","747a7dde":"**Finding:**   \nThe record is in the test data set. So the fare value has to be imputed.   \nIn the [notebook](https:\/\/www.kaggle.com\/bofangli\/make-fare-crystal-clear-fare-sharing-zero-fare?scriptVersionId=47733767), it's found that the records of the same ticket number share the same fare value.   \nSo if there's any other record of '3701', it should have the same fare value.","5de8eeb5":"**Finding:**   \nThe two records are in the train data sets. Either imputation or deletion is workable.   \nI choose imputation with the most frequent value, 'S'."}}