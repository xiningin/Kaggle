{"cell_type":{"b9712a1e":"code","3e529e11":"code","364c7bbd":"code","9084bae7":"code","8291de7f":"code","b0302ef1":"code","d6b6d05d":"code","bfb321cf":"code","b9222469":"code","59aad63f":"code","621c984a":"code","06e2bf41":"code","0d733980":"code","4ad9c5ba":"code","fa6e5ca4":"code","76320571":"code","2eff5471":"code","872eb0a8":"code","efe3dce2":"code","aef21751":"code","ac969868":"code","f076dea3":"code","9274fcf0":"code","3d3ef7ce":"code","1962832b":"code","44030ed0":"code","9763d10a":"code","c37069c0":"code","2d472b81":"code","64f4306c":"code","9504307d":"code","aa223f55":"code","e94e3c2d":"code","c3431afc":"code","1119c47e":"code","4fe42577":"code","f9f2f9a1":"code","f024461c":"code","26d69402":"code","2f793077":"code","c43f83b0":"code","eead7edc":"code","78afe6ef":"code","8a5055d7":"code","55da5c59":"code","3bb90d33":"code","4c111491":"code","ca28c6d6":"code","04c82419":"code","de03db5e":"code","9bd356bb":"code","9eade31c":"code","e39052ee":"code","4762d5f1":"code","1e8f3650":"code","2d52249f":"code","17b89bcf":"code","d02f51c5":"code","2c947808":"code","97c7de72":"code","6e30b305":"code","1b461085":"code","bfe3fe7c":"code","9a067229":"code","e63b5ca0":"code","bcfa3ba2":"code","53165581":"code","5143bbba":"code","33e2acf5":"code","9c72f647":"code","117901d1":"code","d9dba45f":"code","df71109f":"code","251f825c":"code","31ccb368":"code","5d36fb6a":"code","8f89427b":"code","0a88cced":"code","6dcf1dfd":"code","a3614876":"code","6d299520":"code","fc062de1":"code","eb57e756":"code","882db129":"code","2521cef5":"code","1af8a148":"code","14751c32":"code","8c278efa":"code","72695d10":"code","739dcb69":"code","323be4db":"code","20a9d545":"code","c36f6fd6":"code","b9edfcc2":"code","fe1fbd0e":"code","3b32d561":"code","2f1495ef":"code","dc6191e3":"code","36e6fcab":"code","91c18b63":"code","b57dae9a":"code","05e5578b":"code","20b5cf8f":"code","a9e1aa1a":"code","4e40f366":"code","f1ac5066":"code","8957a856":"code","d5b9c7b8":"code","fdc3158a":"code","bd0b2fa8":"code","292ed22a":"code","3479b333":"code","f9c32563":"code","9ff7c7ea":"code","94ba19a3":"markdown","41ea04c0":"markdown","057fb0ba":"markdown","8d544289":"markdown","c678c4c3":"markdown","8afa8afb":"markdown","0d4cd500":"markdown","2c5b5c8f":"markdown","3d887ea9":"markdown","6caba482":"markdown","d09ea1c6":"markdown","43e5da0c":"markdown","0b84fd75":"markdown","8c5835fe":"markdown","9e130fa7":"markdown","4a8ad675":"markdown","0f3d3017":"markdown","dd7edd94":"markdown","4a2bf8a0":"markdown","667c1776":"markdown"},"source":{"b9712a1e":"from re import sub\nfrom decimal import Decimal\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats","3e529e11":"data = pd.read_csv(\"..\/input\/car-insurance-claim-data\/car_insurance_claim.csv\")\ndata.head()","364c7bbd":"data.drop('BIRTH', axis = 1, inplace = True)\ndata.isna().sum()","9084bae7":"DF = data.dropna(subset = ['INCOME'], how = 'any')","8291de7f":"DF = DF.dropna(subset = ['HOME_VAL'], how = 'any')","b0302ef1":"DF.head()","d6b6d05d":"DF.isna().sum()","bfb321cf":"def convertMoney(x):\n  value = Decimal(sub(r'[^\\d.]', '', x))\n  return value","b9222469":"DF['Income_converted'] = DF['INCOME'].apply(lambda x: convertMoney(x))\nDF.head()","59aad63f":"DF['HOME_VAL_converted'] = DF['HOME_VAL'].apply(lambda x: convertMoney(x))","621c984a":"DF['BLUEBOOK_converted'] = DF['BLUEBOOK'].apply(lambda x: convertMoney(x))","06e2bf41":"DF['OLDCLAIM_converted'] = DF['OLDCLAIM'].apply(lambda x: convertMoney(x))","0d733980":"DF['CLM_AMT_converted'] = DF['CLM_AMT'].apply(lambda x: convertMoney(x))","4ad9c5ba":"DF.head()","fa6e5ca4":"DF['Income_converted'] = DF['Income_converted'].astype('float64')\nDF['HOME_VAL_converted'] = DF['HOME_VAL_converted'].astype('float64')\nDF['BLUEBOOK_converted'] = DF['BLUEBOOK_converted'].astype('float64')\nDF['OLDCLAIM_converted'] = DF['OLDCLAIM_converted'].astype('float64')\nDF['CLM_AMT_converted'] = DF['CLM_AMT_converted'].astype('float64')","76320571":"DF1 = DF.drop(['INCOME', 'HOME_VAL', 'BLUEBOOK', 'OLDCLAIM', 'CLM_AMT'], axis = 1)\nDF1.head()","2eff5471":"sns.set_theme()\nsns.barplot(data = DF1,x = 'EDUCATION', y = 'Income_converted', label = 'CLAIM_FLAG')","872eb0a8":"sns.set_theme()\nsns.countplot(data = DF1, x = 'CAR_USE')","efe3dce2":"sns.set_theme()\nsns.histplot(DF1, x = 'Income_converted', hue = 'CLAIM_FLAG', multiple = 'stack')","aef21751":"sns.set_theme()\nsns.histplot(data = DF1, x = 'AGE', hue = 'CLAIM_FLAG')","ac969868":"sns.set_theme()\nfigure, axis = plt.subplots(2,3, figsize = (30,10))\nsns.boxplot(y = 'Income_converted', x = 'CLAIM_FLAG', data = DF1, ax = axis[0,0])\nsns.boxplot(y = 'HOME_VAL_converted', x = 'CLAIM_FLAG', data = DF1, ax = axis[0,1])\nsns.boxplot(y = 'BLUEBOOK_converted', x = 'CLAIM_FLAG', data = DF1, ax = axis[0,2])\nsns.boxplot(y = 'OLDCLAIM_converted', x = 'CLAIM_FLAG', data = DF1, ax = axis[1,0])\nsns.boxplot(y = 'CLM_AMT_converted', x = 'CLAIM_FLAG', data = DF1, ax = axis[1,1])\n","f076dea3":"def IQR(data):\n  Q1 = data.quantile(0.25)\n  Q3 = data.quantile(0.75)\n\n  IQR = Q3 - Q1\n  LR = Q1 - (IQR * 1.5)\n  UR = Q3 + (IQR * 1.5)\n\n  return LR, UR","9274fcf0":"class_one = DF1[DF1['CLAIM_FLAG'] == 1]\nclass_zero = DF1[DF1['CLAIM_FLAG'] == 0]","3d3ef7ce":"LR1, UR1 = IQR(class_one.Income_converted)\nLR0, UR0 = IQR(class_zero.Income_converted)\nclass_one = class_one[(class_one['Income_converted'] > LR1) & (class_one['Income_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['Income_converted'] > LR0) & (class_zero['Income_converted'] < UR0)]","1962832b":"LR1, UR1 = IQR(class_one.HOME_VAL_converted)\nLR0, UR0 = IQR(class_zero.HOME_VAL_converted)\nclass_one = class_one[(class_one['HOME_VAL_converted'] > LR1) & (class_one['HOME_VAL_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['HOME_VAL_converted'] > LR0) & (class_zero['HOME_VAL_converted'] < UR0)]","44030ed0":"LR1, UR1 = IQR(class_one.BLUEBOOK_converted)\nLR0, UR0 = IQR(class_zero.BLUEBOOK_converted)\nclass_one = class_one[(class_one['BLUEBOOK_converted'] > LR1) & (class_one['BLUEBOOK_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['BLUEBOOK_converted'] > LR0) & (class_zero['BLUEBOOK_converted'] < UR0)]","9763d10a":"LR1, UR1 = IQR(class_one.CLM_AMT_converted)\nclass_one = class_one[(class_one['CLM_AMT_converted'] > LR1) & (class_one['CLM_AMT_converted'] < UR1)]","c37069c0":"DF2 = pd.concat([class_one, class_zero], axis = 0)","2d472b81":"figure, axis = plt.subplots(2,3, figsize = (30,10))\nsns.boxplot(y = 'Income_converted', x = 'CLAIM_FLAG', data = DF2, ax = axis[0,0])\nsns.boxplot(y = 'HOME_VAL_converted', x = 'CLAIM_FLAG', data = DF2, ax = axis[0,1])\nsns.boxplot(y = 'BLUEBOOK_converted', x = 'CLAIM_FLAG', data = DF2, ax = axis[0,2])\nsns.boxplot(y = 'OLDCLAIM_converted', x = 'CLAIM_FLAG', data = DF2, ax = axis[1,0])\nsns.boxplot(y = 'CLM_AMT_converted', x = 'CLAIM_FLAG', data = DF2, ax = axis[1,1])","64f4306c":"class_one = DF2[DF2['CLAIM_FLAG'] == 1]\nclass_zero = DF2[DF2['CLAIM_FLAG'] == 0]","9504307d":"LR1, UR1 = IQR(class_one.Income_converted)\nLR0, UR0 = IQR(class_zero.Income_converted)\nclass_one = class_one[(class_one['Income_converted'] > LR1) & (class_one['Income_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['Income_converted'] > LR0) & (class_zero['Income_converted'] < UR0)]","aa223f55":"LR1, UR1 = IQR(class_one.HOME_VAL_converted)\nLR0, UR0 = IQR(class_zero.HOME_VAL_converted)\nclass_one = class_one[(class_one['HOME_VAL_converted'] > LR1) & (class_one['HOME_VAL_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['HOME_VAL_converted'] > LR0) & (class_zero['HOME_VAL_converted'] < UR0)]","e94e3c2d":"LR1, UR1 = IQR(class_one.BLUEBOOK_converted)\nLR0, UR0 = IQR(class_zero.BLUEBOOK_converted)\nclass_one = class_one[(class_one['BLUEBOOK_converted'] > LR1) & (class_one['BLUEBOOK_converted'] < UR1)]\nclass_zero = class_zero[(class_zero['BLUEBOOK_converted'] > LR0) & (class_zero['BLUEBOOK_converted'] < UR0)]","c3431afc":"LR1, UR1 = IQR(class_one.CLM_AMT_converted)\nclass_one = class_one[(class_one['CLM_AMT_converted'] > LR1) & (class_one['CLM_AMT_converted'] < UR1)]","1119c47e":"DF3 = pd.concat([class_one, class_zero], axis = 0)","4fe42577":"DF3.drop('OLDCLAIM_converted', axis = 1, inplace = True)","f9f2f9a1":"figure, axis = plt.subplots(2,2, figsize = (30,15))\nsns.boxplot(y = 'Income_converted', x = 'CLAIM_FLAG', data = DF3, ax = axis[0,0])\nsns.boxplot(y = 'HOME_VAL_converted', x = 'CLAIM_FLAG', data = DF3, ax = axis[0,1])\nsns.boxplot(y = 'BLUEBOOK_converted', x = 'CLAIM_FLAG', data = DF3, ax = axis[1,0])\nsns.boxplot(y = 'CLM_AMT_converted', x = 'CLAIM_FLAG', data = DF3, ax = axis[1,1])","f024461c":"DF3.isnull().sum()","26d69402":"DF3['AGE'].fillna(np.median(DF3['AGE']), inplace = True)","2f793077":"DF3['YOJ'].fillna(stats.mode(DF3['YOJ'])[0][0], inplace = True)","c43f83b0":"DF3['OCCUPATION'].fillna(stats.mode(DF3['OCCUPATION'])[0][0], inplace = True)","eead7edc":"DF3['CAR_AGE'].fillna(stats.mode(DF3['CAR_AGE'])[0][0], inplace = True)","78afe6ef":"DF3['AGE'].unique()","8a5055d7":"DF3 = DF3.dropna(how = 'any')","55da5c59":"sns.countplot(x = 'CLAIM_FLAG', data = DF3)","3bb90d33":"X = DF3.drop('CLAIM_FLAG', axis = 1)\nY = DF3['CLAIM_FLAG']","4c111491":"from imblearn.under_sampling import RandomUnderSampler","ca28c6d6":"rus = RandomUnderSampler(random_state=42)\nX_underSampled, y_underSampled = rus.fit_resample(X, Y)","04c82419":"X_underSampled.head()","de03db5e":"DF4  =pd.concat([X_underSampled, y_underSampled], axis = 1)\nDF4.head(7)","9bd356bb":"sns.countplot(x = 'CLAIM_FLAG', data = DF4)","9eade31c":"DF4.head()","e39052ee":"from sklearn.preprocessing import LabelEncoder","4762d5f1":"LE_PARENT1 = LabelEncoder()\nLE_PARENT1.fit(DF4.PARENT1)\nDF4['LE_PARENT1'] = LE_PARENT1.transform(DF4.PARENT1)","1e8f3650":"LE_MSTATUS = LabelEncoder()\nLE_MSTATUS.fit(DF4.MSTATUS)\nDF4['LE_MSTATUS'] = LE_MSTATUS.transform(DF4.MSTATUS)","2d52249f":"LE_GENDER = LabelEncoder()\nLE_GENDER.fit(DF4.GENDER)\nDF4['LE_GENDER'] = LE_GENDER.transform(DF4.GENDER)","17b89bcf":"LE_EDUCATION = LabelEncoder()\nLE_EDUCATION.fit(DF4.EDUCATION)\nDF4['LE_EDUCATION'] = LE_EDUCATION.transform(DF4.EDUCATION)","d02f51c5":"LE_OCCUPATION = LabelEncoder()\nLE_OCCUPATION.fit(DF4.OCCUPATION)\nDF4['LE_OCCUPATION'] = LE_OCCUPATION.transform(DF4.OCCUPATION)","2c947808":"LE_CAR_USE = LabelEncoder()\nLE_CAR_USE.fit(DF4.CAR_USE)\nDF4['LE_CAR_USE'] = LE_CAR_USE.transform(DF4.CAR_USE)","97c7de72":"LE_CAR_TYPE = LabelEncoder()\nLE_CAR_TYPE.fit(DF4.CAR_TYPE)\nDF4['LE_CAR_TYPE'] = LE_CAR_TYPE.transform(DF4.CAR_TYPE)","6e30b305":"LE_RED_CAR = LabelEncoder()\nLE_RED_CAR.fit(DF4.RED_CAR)\nDF4['LE_RED_CAR'] = LE_RED_CAR.transform(DF4.RED_CAR)","1b461085":"LE_REVOKED = LabelEncoder()\nLE_REVOKED.fit(DF4.REVOKED)\nDF4['LE_REVOKED'] = LE_REVOKED.transform(DF4.REVOKED)","bfe3fe7c":"DF5 = DF4.drop(['PARENT1', 'MSTATUS', 'GENDER', 'EDUCATION', 'OCCUPATION', 'CAR_USE', 'CAR_TYPE', 'RED_CAR', 'REVOKED'], axis = 1)\nDF5.head()","9a067229":"DF5.drop(['ID', 'URBANICITY'], axis = 1, inplace = True)\nDF5.head()","e63b5ca0":"correlation = DF5.corr()\n\nsns.set_theme()\nplt.figure(figsize = (18,10))\nsns.heatmap(correlation, cbar = True, annot = True)","bcfa3ba2":"DF6 = DF5.drop(['LE_RED_CAR', 'LE_GENDER', 'TRAVTIME', 'LE_OCCUPATION'], axis = 1)\nDF6.head()","53165581":"from sklearn.preprocessing import StandardScaler","5143bbba":"X = DF6.drop('CLAIM_FLAG', axis = 1)\nY = DF6['CLAIM_FLAG']","33e2acf5":"SD = StandardScaler()\nSD.fit(X)\nX_std = SD.transform(X)","9c72f647":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X_std, Y, test_size = 0.2, random_state = 42)","117901d1":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","d9dba45f":"from sklearn.linear_model import LogisticRegression","df71109f":"model_logistic = LogisticRegression()\nmodel_logistic.fit(x_train, y_train)","251f825c":"y_predicted_Logistic = model_logistic.predict(x_test)","31ccb368":"logistic_score = model_logistic.score(x_test,y_test)\nlogistic_score","5d36fb6a":"from sklearn.metrics import classification_report","8f89427b":"print(classification_report(y_test, y_predicted_Logistic))","0a88cced":"from sklearn import svm","6dcf1dfd":"SVM_model = svm.SVC()\nSVM_model.fit(x_train,y_train)","a3614876":"y_predicted_SVM = SVM_model.predict(x_test)\nSVM_Score = SVM_model.score(x_test,y_test)\nSVM_Score","6d299520":"print(classification_report(y_test, y_predicted_SVM))","fc062de1":"from sklearn.neighbors import KNeighborsClassifier","eb57e756":"KNN_model = KNeighborsClassifier(n_neighbors = 5)\nKNN_model.fit(x_train, y_train)","882db129":"y_predicted_KNN = KNN_model.predict(x_test) \nKNN_Score = KNN_model.score(x_test,y_test)\nKNN_Score","2521cef5":"print(classification_report(y_test, y_predicted_KNN))","1af8a148":"from sklearn.naive_bayes import GaussianNB","14751c32":"naive_bayes_model= GaussianNB()\nnaive_bayes_model.fit(x_train, y_train)","8c278efa":"y_predicted_naive = naive_bayes_model.predict(x_test)\nNaive_Bayes_Score = naive_bayes_model.score(x_test,y_test)\nNaive_Bayes_Score","72695d10":"print(classification_report(y_test, y_predicted_naive))","739dcb69":"from sklearn.tree import DecisionTreeClassifier","323be4db":"deseciontree_model=DecisionTreeClassifier()\ndeseciontree_model.fit(x_train, y_train)","20a9d545":"y_predicted_deseciontree = deseciontree_model.predict(x_test)\nDTree_Score = deseciontree_model.score(x_test,y_test)\nDTree_Score","c36f6fd6":"print(classification_report(y_test, y_predicted_deseciontree))","b9edfcc2":"from sklearn.ensemble import RandomForestClassifier","fe1fbd0e":"randomforest_model= RandomForestClassifier(n_estimators = 10, criterion = 'entropy')\nrandomforest_model.fit(x_train, y_train)","3b32d561":"y_predicted_randomforest = randomforest_model.predict(x_test)\nRF_Score = randomforest_model.score(x_test,y_test)\nRF_Score","2f1495ef":"print(classification_report(y_test, y_predicted_randomforest))","dc6191e3":"from sklearn.ensemble import AdaBoostClassifier","36e6fcab":"AdaBoostClassifier_model= AdaBoostClassifier(n_estimators=100, random_state=0)\nAdaBoostClassifier_model.fit(x_train,y_train )","91c18b63":"y_predicted_AdaBoostClassifier_model=AdaBoostClassifier_model.predict(x_test)\nAB_Score = AdaBoostClassifier_model.score(x_test,y_test)\nAB_Score","b57dae9a":"print(classification_report(y_test, y_predicted_AdaBoostClassifier_model))","05e5578b":"from sklearn.ensemble import GradientBoostingClassifier","20b5cf8f":"GradientBoostingClassifier_model=GradientBoostingClassifier(n_estimators=100,learning_rate=1.0)\nGradientBoostingClassifier_model.fit(x_train,y_train)","a9e1aa1a":"y_predicted_GradientBoostingClassifier_model=GradientBoostingClassifier_model.predict(x_test)\nGB_Score = GradientBoostingClassifier_model.score(x_test,y_test)\nGB_Score","4e40f366":"print(classification_report(y_test, y_predicted_GradientBoostingClassifier_model))","f1ac5066":"from sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score","8957a856":"Model_Names = ['Logistic Regression', 'SVM', 'KNearest Neighbor', 'Naive Bayes', 'Decision Tree', 'Random Forest', 'AdaBoost Classifier', 'Gradient Boosting']\nScores = [logistic_score, SVM_Score, KNN_Score, Naive_Bayes_Score, DTree_Score, RF_Score, AB_Score, GB_Score]\nPrecision = [precision_score(y_test, y_predicted_Logistic), precision_score(y_test, y_predicted_SVM), precision_score(y_test, y_predicted_KNN), precision_score(y_test, y_predicted_naive), precision_score(y_test, y_predicted_deseciontree), precision_score(y_test, y_predicted_randomforest), precision_score(y_test, y_predicted_AdaBoostClassifier_model), precision_score(y_test, y_predicted_GradientBoostingClassifier_model)]\nRecall = [recall_score(y_test, y_predicted_Logistic), recall_score(y_test, y_predicted_SVM), recall_score(y_test, y_predicted_KNN), recall_score(y_test, y_predicted_naive), recall_score(y_test, y_predicted_deseciontree), recall_score(y_test, y_predicted_randomforest), recall_score(y_test, y_predicted_AdaBoostClassifier_model), recall_score(y_test, y_predicted_GradientBoostingClassifier_model)]\n","d5b9c7b8":"Report_DF = pd.DataFrame()\n\nReport_DF['Model Name'] = Model_Names\nReport_DF['Accuracy_Score'] = Scores\nReport_DF['Precision'] = Precision\nReport_DF['Recall'] = Recall","fdc3158a":"sns.set_theme()\nCM = sns.color_palette(\"light:b\", as_cmap=True)\nReport_DF.style.background_gradient(cmap=CM)\n","bd0b2fa8":"plt.figure(figsize = (15, 5))\nsns.set_theme()\nsns.barplot(x = 'Model Name', y = 'Accuracy_Score', data = Report_DF)","292ed22a":"X = Report_DF['Model Name']\nYPrecision = Report_DF['Precision']\nZrecall = Report_DF['Recall']\n  \nX_axis = np.arange(len(Report_DF['Model Name']))\nplt.figure(figsize = (15, 5)) \nplt.bar(X_axis - 0.2, YPrecision, 0.4, label = 'Precision')\nplt.bar(X_axis + 0.2, Zrecall, 0.4, label = 'Recall')\n  \nplt.xticks(X_axis, X)\nplt.xlabel(\"Model Names\")\nplt.ylabel(\"Score\")\nplt.title(\"Precision Vs Recall\")\nplt.legend()\nplt.show()","3479b333":"from sklearn.metrics import roc_auc_score,roc_curve,auc\nreport = classification_report(y_test,y_predicted_deseciontree)\nprint(report)","f9c32563":"roc_auc_score(y_test,y_predicted_deseciontree)\nfpr,tpr,threshold =roc_curve(y_test,y_predicted_deseciontree)\nauc = auc(fpr,tpr)","9ff7c7ea":"plt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","94ba19a3":"# **Data Preprocessing : Label Encoding**","41ea04c0":"# **Data Loading**","057fb0ba":"# **Data Preprocessing : Fill NaN Values**","8d544289":"# **Model Building : Random Forest**","c678c4c3":"# **Model Building : Decision Tree**","8afa8afb":"# **Data Preprocessing : Balancing Imbalance Data**","0d4cd500":"# **Model Building : AdaBoost Classifier**","2c5b5c8f":"#**Correlation Matrix**","3d887ea9":"# **Model Building : Logistic Regression**","6caba482":"# **Data Preprocessing : Outlier Removing Part 1**","d09ea1c6":"# **Model Building : Gradient Boosting**","43e5da0c":"# **Data Visualization**","0b84fd75":"# **Data Preprocessing : Standard Scaler**","8c5835fe":"# **Data Preprocessing : Outlier Removing Part 2**","9e130fa7":"# **Data Preprocessing : Train Test Split**","4a8ad675":"# **Data Preprocessing**","0f3d3017":"# **Model Building : Naive Bayes**","dd7edd94":"# **Model Building : Support Vector Machine (SVM)**","4a2bf8a0":"# **Final Report**","667c1776":"# **Model Building : KNearest Neighbor**"}}