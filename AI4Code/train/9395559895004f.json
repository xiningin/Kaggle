{"cell_type":{"63d5d995":"code","2fcea7d4":"code","a008c850":"code","858ca5a1":"code","c6f55123":"code","1345bb45":"code","57f2c5c8":"code","9b5abab3":"code","41475ee4":"code","37f30568":"code","f4dcddf1":"code","c400fb4d":"code","69a77bab":"code","2c9cc22a":"markdown","42d3f182":"markdown","20e949bf":"markdown","55d72697":"markdown","5342845f":"markdown","d00318ac":"markdown","c55f8939":"markdown","0be0871b":"markdown","eaa334a4":"markdown","e9cad492":"markdown","63681163":"markdown","9d111d44":"markdown"},"source":{"63d5d995":"import numpy as np\nimport pandas as pd\nimport os\nimport shutil                     # File_Operation Library\nimport cv2\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import GlobalMaxPooling2D, Dense, Flatten, GlobalAveragePooling2D, Dropout, Input, Concatenate, BatchNormalization\n\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3","2fcea7d4":"shutil.unpack_archive('..\/input\/dogs-vs-cats\/train.zip', '\/kaggle\/working\/')\nshutil.unpack_archive('..\/input\/dogs-vs-cats\/test1.zip', '\/kaggle\/working\/')","a008c850":"train_dir = '\/kaggle\/working\/train\/'\ntest_dir = '\/kaggle\/working\/test1\/'","858ca5a1":"train_df = []\nimg_list = []\nl_list = []\n\nfor img in os.listdir(train_dir):\n    if img.split('.')[-1]=='jpg':\n        img_list.append(train_dir+img)\n        l_list.append(img.split('.')[0])\n\ntrain_df = pd.DataFrame(train_df)\ntrain_df['image'] = img_list\ntrain_df['label'] = l_list\n\nprint(train_df.head())","c6f55123":"train_datagen = ImageDataGenerator(rescale = 1.\/255, \n                                   horizontal_flip = True, \n                                   rotation_range = 45, \n                                   shear_range = 19,\n                                   zoom_range = 0.2,\n                                   validation_split = 0.2)\n\ntrain_generator = train_datagen.flow_from_dataframe(train_df,\n                                                    x_col='image',\n                                                    y_col='label',\n                                                    target_size = (180, 180), \n                                                    class_mode = 'binary',\n                                                    batch_size = 280,\n                                                    shuffle = True,\n                                                    subset = 'training')\n\nval_generator = train_datagen.flow_from_dataframe(train_df,\n                                                  x_col='image',\n                                                  y_col='label',\n                                                  target_size = (180, 180),\n                                                  class_mode = 'binary',\n                                                  batch_size = 280,\n                                                  shuffle = True,\n                                                  subset = 'validation')","1345bb45":"inputs = Input((180, 180, 3))\npretrained_model= InceptionV3(include_top= False)\nx = pretrained_model(inputs)\noutput1 = GlobalMaxPooling2D()(x)\noutput2 = GlobalAveragePooling2D()(x)\noutput3 = Flatten()(x)\n\noutputs = Concatenate(axis=-1)([output1, output2, output3])\noutputs = Dropout(0.5)(outputs)\noutputs = BatchNormalization()(outputs)\noutput = Dense(1, activation= 'sigmoid')(outputs)\n\nmodel = Model(inputs, output)","57f2c5c8":"from keras.callbacks import ModelCheckpoint, EarlyStopping, Callback\n\n\n# autosave best Model\nbest_model = ModelCheckpoint(\"model\", monitor='val_accuracy', mode='max',verbose=1, save_best_only=True)\n\nearlystop = EarlyStopping(monitor = 'val_accuracy',\n                          patience = 5,\n                          mode = 'auto',\n                          verbose = 1,\n                          restore_best_weights = True)\n\nacc_thresh = 0.998\n\nclass myCallback(Callback): \n    def on_epoch_end(self, epoch, logs={}): \n        if(logs.get('accuracy') > acc_thresh):   \n          print(\"\\nWe have reached %2.2f%% accuracy, so we will stopping training.\" %(acc_thresh*100))   \n          self.model.stop_training = True\n\ncallbacks = [myCallback(), best_model, earlystop]","9b5abab3":"model.compile(optimizer='RMSprop', loss= 'binary_crossentropy', metrics= ['accuracy'])\nhistory = model.fit_generator(train_generator,\n                              epochs = 100,\n                              steps_per_epoch = len(train_generator),\n                              validation_data = val_generator,\n                              validation_steps = len(val_generator),\n                              callbacks = callbacks,\n                              verbose= 1)","41475ee4":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='best')\nplt.show()","37f30568":"def predict(path):\n    img = cv2.imread(str(path))\n    img = cv2.resize(img, (180,180))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = img.astype(np.float32)\/255.\n    img = np.reshape(img,(1,180,180,3))\n    return model.predict(img)","f4dcddf1":"print(train_generator.class_indices)    # Mapping Dictionary","c400fb4d":"test_df = []\ntest_list = []\n\nfor i in os.listdir(test_dir):\n    test_list.append(test_dir +i)\n    test_df.append(i.split('.')[0])\n\ntarget=[]\nfor path in test_list:\n    prediction = predict(path)\n    target.append(prediction[0][0])\n    \ntest_df = pd.DataFrame(test_df)\ntest_df.columns = ['id']\ntest_df['label'] = target\n\ntest_df.sort_values(by=['id'], inplace=True)\ntest_df.to_csv('submission.csv', index=False)","69a77bab":"img_num = 1234   # change me!\n\npath = test_list[img_num]\nimg=cv2.imread(str(path))\nplt.imshow(img)\n\nprediction = predict(path)\n\nif prediction < 0.5:\n    print(\"It's a Cat!\")\nelse:\n    print(\"It's a Dog!\")","2c9cc22a":"## Data Generators","42d3f182":"## CNN_Model","20e949bf":"## Import Library","55d72697":"## Extract Dataset from ZIP","5342845f":"## Evaluation","d00318ac":"## Compiling and Training...","c55f8939":"## Prediction","0be0871b":"## Plotting Accuracy","eaa334a4":"## Thank You!!","e9cad492":"## Callback Functions","63681163":"## Label Extraction","9d111d44":"## Reference Directory"}}