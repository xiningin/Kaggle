{"cell_type":{"7c7b6faf":"code","96472f0a":"code","c34772e8":"code","80f4bfdf":"code","5c067978":"code","04ff68e3":"code","2b72eaa2":"code","4a549c45":"code","cc78fab7":"code","1abc5f1b":"code","51484b64":"code","7c57ae63":"code","7052ab65":"code","13d48e56":"code","6bf7aeb6":"code","63a67808":"code","916fb7e6":"code","0a1cba41":"code","f060847b":"code","04b6762f":"code","bbcb3052":"code","e3b5766d":"code","fca9c613":"code","9dee9fa4":"code","c442d49f":"code","1aec12c3":"code","99269a35":"code","230ecd27":"code","401e7fb7":"code","04a49d46":"code","d0fe3855":"code","bfdeffe5":"code","722012b7":"code","abcec1fd":"code","70f01b20":"code","51f03638":"code","d015d784":"code","53cd0223":"code","6d91e731":"code","6eb92030":"code","b4dfe999":"markdown","b101bd82":"markdown","71cf2659":"markdown","402e0c2b":"markdown"},"source":{"7c7b6faf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","96472f0a":"df=pd.read_csv('..\/input\/zomato.csv',encoding=\"ISO-8859-1\")","c34772e8":"df.head(2)","80f4bfdf":"df.describe()","5c067978":"##drop the following columns -> Longitude,Latitude, Locality, Locality verbose, Address,Switch to order menu.\nto_drop=[\"Longitude\",\"Latitude\",\"Locality\",\"Locality Verbose\",\"Address\",\"Switch to order menu\"]\ndf.drop(to_drop,inplace=True,axis=1)","04ff68e3":"# Check if the IDs are unique.\ndf['Restaurant ID'].is_unique","2b72eaa2":"# Now, We'll duplicate the country code column and change one of them according \n## to their respctive country names.\ndf[\"Country Code1\"]=df[\"Country Code\"].apply(str)\ndf['Country Code']=df['Country Code'].replace({189:'Canada',216:'Tunisia',215:'Philadelphia',214:'Dallas',1:'India',30:'Greece',148:'Equador'})\ndf['Country Code']=df['Country Code'].replace([208,14,94,191,162,184,166,37],'Others')\ndf=df.rename(columns={\"Country Code\":\"Country Name\"})","4a549c45":"df[df[\"Average Cost for two\"]>450000]","cc78fab7":"df=df[df[\"Restaurant ID\"] != 7402935]\ndf=df[df[\"Restaurant ID\"] != 7410290]\ndf=df[df[\"Restaurant ID\"] != 7420899]","1abc5f1b":"cnd=pd.DataFrame(df[\"Country Name\"].value_counts())\nsns.barplot(x=cnd.index,y=cnd[\"Country Name\"],data=cnd,palette='Blues_d').set_title('Distribution of restaurants in different Countries')\nfig = plt.gcf()\nfig.set_size_inches(10,5)\nplt.show()","51484b64":"## Change the columns->'Has Table booking,Has Online delivery,Is delivering now'\n## with values as Yes\/No and replace them with binary(1\/0) values.\ndf['Has Table booking'] = pd.get_dummies(df[\"Has Table booking\"],drop_first=True)\ndf['Has Online delivery'] = pd.get_dummies(df[\"Has Online delivery\"],drop_first=True)\ndf['Is delivering now'] = pd.get_dummies(df[\"Is delivering now\"],drop_first=True)","7c57ae63":"labelyn=['no','yes']\nfig = plt.gcf()\nhtb=df[\"Has Table booking\"].value_counts()\nhtbd=pd.DataFrame(htb)\nhod=df[\"Has Online delivery\"].value_counts()\nhodd=pd.DataFrame(hod)\nfig.set_size_inches(8,8)\nplt.subplot(2,2,2)\np1=plt.pie(htbd[\"Has Table booking\"],labels=labelyn,colors = ['#1674b1','#ed6d50'],explode=[0.05,0.05],autopct='%2f')\nfig = plt.gcf()\nfig.set_size_inches(8,8)\nplt.title('Distribution of number of restaurant\\n which have the option of booking table.')\nplt.subplot(2,2,1)\np2=plt.pie(hodd[\"Has Online delivery\"],labels=labelyn,colors = ['#1674b1','#ed6d50'],explode=[0.05,0.05],autopct='%2f')\nfig = plt.gcf()\nplt.title('Distribution of number of restaurant who \\n takes order online.')\nplt.figure(2)\nplt.show()","7052ab65":"## The first PieChart shows the percentage of restaurants which have the option\n## of taking orders online.\n## The second PieChart shows the percentage of restaurants which have the option to \n## book a table in advance.","13d48e56":"table=pd.crosstab(df[\"Rating text\"],df[\"Price range\"])\ntable.div(table.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True,color=['#5a5255','#1b85b8','#559e83','#ae5a41'])\nfig.set_size_inches(12,8)\nplt.show()","6bf7aeb6":"df['Currency']=df['Currency'].replace({'Dollar($)':'Dollar','Pounds(\ufffd\ufffd)':'Pounds','Brazilian Real(R$)':'Brazilian Real','NewZealand($)':'NewZealand Dollar'})\n","63a67808":"sns.barplot(x='Price range',y='Average Cost for two',palette=\"Blues_d\",data=df)\nplt.show()","916fb7e6":"# The above chart shows that Price range and average cost for two are not co related\n# as we did not get the expected results","0a1cba41":"table=pd.crosstab(df[\"Country Name\"],df[\"Rating text\"])\ntable.div(table.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True,color=['#5a5255','#1b85b8','#559e83','#ae5a41'])\nfigz = plt.gcf()\nfigz.set_size_inches(12,6)\nplt.show()\n","f060847b":"sns.barplot(x=\"Country Name\",y=\"Votes\",hue=\"Has Table booking\",palette=\"Blues_d\",data=df)\nfig2 = plt.gcf()\nfig2.set_size_inches(12,6)\nplt.show()\n","04b6762f":"cus=df[\"Cuisines\"].value_counts()\ncuisines = {}\ncnt=0\nfor i in cus.index:\n    for j in i.split(\", \"):\n        if j not in cuisines:\n            cuisines[j]=cus[cnt]\n        else:\n            cuisines[j] += cus[cnt]\n    cnt += 1\n    \ncuisines = pd.Series(cuisines).sort_values(ascending=False)","bbcb3052":"sns.barplot(cuisines[:15].values,cuisines[:15].index, palette=\"Blues_d\")\nfig2 = plt.gcf()\nfig2.set_size_inches(16,6)\nplt.show()","e3b5766d":"India=df[df.Currency == 'Indian Rupees(Rs.)']","fca9c613":"sns.boxplot(India[\"Votes\"])","9dee9fa4":"q3_v=India[\"Votes\"].quantile(0.75)\nq1_v=India[\"Votes\"].quantile(0.25)\niqr_v=q3_v-q1_v\nlowervotes=q1_v-(iqr_v*1.5)\nuppervotes=q3_v+(iqr_v*1.5)\nuppervotes","c442d49f":"India=India[India[\"Votes\"]<244]","1aec12c3":"sns.boxplot(India[\"Average Cost for two\"])","99269a35":"q3_avg=India[\"Average Cost for two\"].quantile(0.75)\nq1_avg=India[\"Average Cost for two\"].quantile(0.25)\niqr_avg=q3_avg-q1_avg\nloweravg=q1_avg-(iqr_avg*1.5)\nupperavg=q3_avg+(iqr_avg*1.5)\nupperavg","230ecd27":"India=India[India[\"Average Cost for two\"]<1050]","401e7fb7":"X=India.drop([\"Restaurant ID\",\"Restaurant Name\",\"Rating text\",\"Country Name\",\"City\",\"Rating color\",\n           \"Cuisines\",\"Currency\",\"Country Code1\",\"Aggregate rating\"],axis=1)\ny=India[\"Aggregate rating\"]","04a49d46":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=42)","d0fe3855":"model= LinearRegression()\nmodel.fit(X_train,y_train)","bfdeffe5":"y_predict=model.predict(X_test)\n","722012b7":"from sklearn.metrics import r2_score\nr2_score(y_test,y_predict)","abcec1fd":"modelrf= RandomForestRegressor(n_estimators=1000)\nmodelrf.fit(X_train,y_train)","70f01b20":"y_predictrf=modelrf.predict(X_test)\nr2_score(y_test,y_predictrf)","51f03638":"modeldt= DecisionTreeRegressor(max_depth=6)\nmodeldt.fit(X_train,y_train)","d015d784":"y_predictdt=modeldt.predict(X_test)\nr2_score(y_test,y_predictdt)","53cd0223":"from sklearn.externals import joblib\nfilename=\"Decision_tree.sav\"\njoblib.dump(modeldt,filename)","6d91e731":"from box import Box\nbest_model=joblib.load(filename)\nfrom ipywidgets import *\nfrom IPython.display import display\n\nsubmit = Button(description='Get my Rating')\nitem=[\n    IntSlider(min=0,max=1050,description=\"Average Cost for two\"),\n    IntSlider(min=0,max=1,steps=1,value=0,description=\"Has Table booking\"),\n    IntSlider(min=0,max=1,steps=1,value=0,description=\"Has Online delivery\"),\n    IntSlider(min=0,max=1,steps=1,value=0,description=\"Is delivering now\"),\n    IntSlider(min=0,max=4,steps=1,value=0,description=\"Price range\"),\n    IntSlider(min=0,max=244,description=\"Votes\"),\n    ]\ndef on_button_clicked(b):\n    emp_row = []    \n    for widget in item:\n        value = widget.value\n        emp_row.append(value)\n    y_predicts = best_model.predict(np.array(emp_row).reshape(1, -1))\n    print 'Aggregate Rating : {:.1f}'.format(float(y_predicts))\n\nform = Box(item )\nsubmit.on_click(on_button_clicked)\n","6eb92030":"display(form, submit)","b4dfe999":"# RandomForestRegressor","b101bd82":"# Train_Test_Split\n","71cf2659":"# DecisionTreeRegressor","402e0c2b":"# LinearRegression"}}