{"cell_type":{"52c39000":"code","50d00b58":"code","7c989742":"code","ab34bd0e":"code","27665c88":"code","e034af94":"code","da7df6fc":"code","a3bd28e1":"code","ef1034b0":"code","f5e9ebb2":"code","584438e6":"code","7c56dabc":"code","50604e13":"code","a7f28ee2":"code","1b5679d2":"code","ed911bcf":"code","f41d38ae":"code","6c7fcdc1":"code","8aa3e2a9":"code","60fbd46a":"code","4155be59":"code","28a17305":"code","08ed68d8":"code","97fc426e":"code","c123066e":"code","ecdef629":"code","008e79d4":"code","bdae4c4e":"code","7cde8492":"code","b4e3a249":"code","60624ea4":"code","0f0a959e":"code","3a48fa23":"code","ab12c76c":"code","ec718981":"code","6dda16ca":"code","be112e1b":"code","f18f18fe":"code","a9d591f6":"code","72ca6cdc":"code","a9216c07":"code","2cd79db9":"code","a6dc2526":"code","65f19d81":"code","15017141":"code","50e84ce8":"code","7e4d5c45":"code","a5d191a6":"code","4f258d75":"code","5424fac9":"code","5911bf5d":"code","c6dcdd7a":"code","2ffa044b":"code","9289a331":"code","ae0754dd":"code","bd6d5004":"code","737782db":"code","0b2242aa":"code","5804a4f9":"code","60837d1f":"code","2baf1d3a":"code","7ee07e25":"code","cee3c23f":"code","1c2e9956":"code","218b3ecf":"code","9d565897":"code","1b100905":"code","40a4884b":"code","6ea333a1":"code","4be81c24":"code","5d92d455":"code","fd4eea11":"code","167a6ab0":"code","895b4838":"code","137a7c93":"code","b3b2d372":"code","9357205d":"code","33017fd3":"code","def3c798":"code","107e77e0":"code","240f3860":"code","564c61e4":"code","0078f15e":"code","e83e9d74":"markdown","a0136327":"markdown","6c553561":"markdown","4a48b94c":"markdown","8f17cc51":"markdown"},"source":{"52c39000":"#import some popular libraries we will use in this project \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","50d00b58":"#reading the DataFile\ndata = pd.read_csv(\"..\/input\/bank-loan\/Bank_Personal_Loan_Modelling.csv\", sep = \",\" , encoding=\"utf-8\")","7c989742":"data.head(5)","ab34bd0e":"#checking the null values in the dataset\ndata.isnull().sum()","27665c88":"#drop duplicates in the data\ndata.drop_duplicates(inplace=True)","e034af94":"data.shape","da7df6fc":"#Return all distinct value in each column\ndata.nunique()","a3bd28e1":"#return some information about each column as DataType and Number of Entries\ndata.info()","ef1034b0":"data['CCAvg']=data.CCAvg.astype(int)","f5e9ebb2":"#Histogram of all data's feature Distribution\ndata.hist(bins=100 , figsize=(14,16))\nplt.show()","584438e6":"plt.figure(figsize=(12,8))\nsns.heatmap( data.corr(), annot = True)","7c56dabc":"#Age Distribution\nsns.histplot(data = data,x = 'Age')\n","50604e13":"#CCAvg  Distribution\nsns.histplot(data = data,x = 'CCAvg')\n","a7f28ee2":"#Income Distribution\nsns.histplot(data = data,x = 'Income')\n","1b5679d2":"#Experience Distribution\nsns.histplot(data = data,x = 'Experience')\n","ed911bcf":"#Personal Loan value Ratios\nround(data['PersonalLoan'].value_counts()\/data.shape[0]*100,2).plot.pie(autopct = '%1.1f%%')","f41d38ae":"plt.figure(figsize=(15,10))\ndata.boxplot(vert=0)","6c7fcdc1":"sns.pairplot(data, hue=\"PersonalLoan\")\n","8aa3e2a9":"X = data.drop(\"PersonalLoan\" , axis = 1).values\ny = data['PersonalLoan'].values","60fbd46a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.25 , random_state=42)","4155be59":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","28a17305":"from sklearn.neighbors import KNeighborsClassifier","08ed68d8":"kclf = KNeighborsClassifier(n_neighbors=6 )","97fc426e":"kclf.fit(X_train, y_train)\n","c123066e":"kclf_score_train = kclf.score(X_train,y_train)\n","ecdef629":"kclf_score_test = kclf.score(X_test,y_test)\n","008e79d4":"from sklearn.metrics import classification_report, confusion_matrix\n","bdae4c4e":"y_predict = kclf.fit(X_train, y_train).predict(X_test)\n","7cde8492":"print(classification_report(y_test, y_predict, target_names =['0','1']))\n","b4e3a249":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","60624ea4":"from sklearn.linear_model import LogisticRegression\n","0f0a959e":"lr = LogisticRegression()\n","3a48fa23":"lr.fit(X_train,y_train)\n","ab12c76c":"lr_score_train = lr.score(X_train,y_train)\n","ec718981":"lr_score_test = lr.score(X_test,y_test)\n","6dda16ca":"from sklearn.metrics import classification_report, confusion_matrix\n","be112e1b":"y_predict = lr.fit(X_train, y_train).predict(X_test)\n","f18f18fe":"print(classification_report(y_test, y_predict, target_names =['0','1']))\n","a9d591f6":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","72ca6cdc":"from sklearn.ensemble import RandomForestClassifier","a9216c07":"rf = RandomForestClassifier()\n","2cd79db9":"rf.fit(X_train,y_train)\n","a6dc2526":"rf_score_train = rf.score(X_train,y_train)\n","65f19d81":"rf_score_test = rf.score(X_test,y_test)\n","15017141":"from sklearn.metrics import classification_report, confusion_matrix\n","50e84ce8":"y_predict = rf.fit(X_train, y_train).predict(X_test)\n","7e4d5c45":"print(classification_report(y_test, y_predict, target_names =['0','1']))\n","a5d191a6":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","4f258d75":"predictors_group = ('Logistic Regression','Random Forest','KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [lr_score_train, rf_score_train, kclf_score_train]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Train Accuracy (%)')\nplt.title('Train Accuracies')\nplt.show()","5424fac9":"predictors_group = ('Logistic Regression','Random Forest','KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [lr_score_test, rf_score_test, kclf_score_test]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Test Accuracy (%)',)\nplt.title('Test Accuracies')\nplt.show()","5911bf5d":"from sklearn.datasets import make_classification\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom matplotlib import pyplot\n# create dataset\nX, y = make_classification(n_samples=10000, n_features=20, n_informative=5, n_redundant=15, random_state=1)\n# split into train test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n# define lists to collect scores\ntrain_scores, test_scores = list(), list()\n# define the tree depths to evaluate\nvalues = [i for i in range(1, 51)]\n# evaluate a decision tree for each depth\nfor i in values:\n\t# configure the model\n\tmodel = KNeighborsClassifier(n_neighbors=i)\n\t# fit model on the training dataset\n\tmodel.fit(X_train, y_train)\n\t# evaluate on the train dataset\n\ttrain_yhat = model.predict(X_train)\n\ttrain_acc = accuracy_score(y_train, train_yhat)\n\ttrain_scores.append(train_acc)\n\t# evaluate on the test dataset\n\ttest_yhat = model.predict(X_test)\n\ttest_acc = accuracy_score(y_test, test_yhat)\n\ttest_scores.append(test_acc)\n\t# summarize progress\n\tprint('>%d, train: %.3f, test: %.3f' % (i, train_acc, test_acc))\n# plot of train and test scores vs number of neighbors\npyplot.plot(values, train_scores, '-o', label='Train')\npyplot.plot(values, test_scores, '-o', label='Test')\npyplot.legend()\npyplot.show()","c6dcdd7a":"from sklearn.metrics import classification_report,accuracy_score,confusion_matrix\nfrom sklearn.metrics import auc,roc_auc_score,roc_curve,precision_score,recall_score,f1_score","2ffa044b":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(C=0.23357214690901212)\nlr.fit(X_train,y_train)\ny_pred_lr=lr.predict(X_test)\nacc_lr = accuracy_score(y_test,y_pred_lr)\nprint(\"Logistic Regression Accuracy:\",acc_lr*100,\"%\")","9289a331":"print(\"Classification report for LR: \\n{}\".format(classification_report(y_test,y_pred_lr)))\nprint(\"Confusion matrix for LR: \\n{}\".format(confusion_matrix(y_test,y_pred_lr)))\nprint(\"Accuracy score for LR: {:.2f}\".format(accuracy_score(y_test,y_pred_lr)))\nprec_logit = precision_score(y_test,y_pred_lr, average='micro')\nrec_logit = recall_score(y_test,y_pred_lr, average='micro')\nf1_logit = f1_score(y_test,y_pred_lr, average='micro')\nprint(\"Precision score for LR: {:.2f}\".format(prec_logit))\nprint(\"Recall score for LR: {:.2f}\".format(rec_logit))\nprint(\"F1 score for LR: {:.2f}\".format(f1_logit))\n","ae0754dd":"import seaborn as sns\nsns.countplot(data['PersonalLoan'])","bd6d5004":"from sklearn.utils import resample\n#create two different dataframe of majority and minority class \ndf_majority = data[(data['PersonalLoan']==0)] \ndf_minority = data[(data['PersonalLoan']==1)] \n# upsample minority class\ndf_minority_upsampled = resample(df_minority, \n                                 replace=True,    # sample with replacement\n                                 n_samples= 5000, # to match majority class\n                                 random_state=42)  # reproducible results\n# Combine majority class with upsampled minority class\ndf_upsampled = pd.concat([df_minority_upsampled, df_majority])","737782db":"sns.countplot(df_upsampled['PersonalLoan'])","0b2242aa":"df_upsampled.columns","5804a4f9":"df_upsampled","60837d1f":"df_upsampled= df_upsampled[['Age', 'Experience', 'Income', 'Family', 'CCAvg','Education', 'Mortgage', 'PersonalLoan', 'SecuritiesAccount','CDAccount', 'Online', 'CreditCard']]","2baf1d3a":"df_upsampled","7ee07e25":"X = df_upsampled.drop(\"PersonalLoan\" , axis = 1).values\ny = df_upsampled['PersonalLoan'].values","cee3c23f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.25 , random_state=42)","1c2e9956":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)","218b3ecf":"from sklearn.neighbors import KNeighborsClassifier","9d565897":"kclf = KNeighborsClassifier(n_neighbors=6 )","1b100905":"kclf.fit(X_train, y_train)","40a4884b":"kclf_score_train = kclf.score(X_train,y_train)\n","6ea333a1":"kclf_score_test = kclf.score(X_test,y_test)\n","4be81c24":"from sklearn.metrics import classification_report, confusion_matrix","5d92d455":"y_predict = kclf.fit(X_train, y_train).predict(X_test)","fd4eea11":"print(classification_report(y_test, y_predict, target_names =['0','1']))","167a6ab0":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","895b4838":"from sklearn.tree import DecisionTreeClassifier","137a7c93":"dct = DecisionTreeClassifier()\ndct.fit(X_train, y_train)","b3b2d372":"dct_score_train = dct.score(X_train, y_train)","9357205d":"dct_score_test = dct.score(X_test, y_test)","33017fd3":"from sklearn.metrics import classification_report, confusion_matrix","def3c798":"y_predict = dct.fit(X_train, y_train).predict(X_test)","107e77e0":"print(classification_report(y_test, y_predict, target_names =['0','1']))","240f3860":"cm = pd.DataFrame(confusion_matrix(y_test, y_predict))\nsns.heatmap(cm, annot=True,cmap=\"mako_r\")","564c61e4":"predictors_group = ('Logistic Regression', 'KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [dct_score_train, kclf_score_train]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Train Accuracy (%)')\nplt.title('Train Accuracies')\nplt.show()","0078f15e":"predictors_group = ('Decision Tree','KNN')\nx_pos = np.arange(len(predictors_group))\naccuracies = [dct_score_test, kclf_score_test]\n    \nplt.bar(x_pos, accuracies, align='center', color='#26428b')\nplt.xticks(x_pos, predictors_group, rotation='vertical')\nplt.ylabel('Test Accuracy (%)',)\nplt.title('Test Accuracies')\nplt.show()","e83e9d74":"**Decision Tree Classifier**","a0136327":"**KNN** **MODEL**","6c553561":"**Logistic** **Regression** **Model**","4a48b94c":"Data Description:\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n    ID:\t           Customer ID\t\t\t\t\t\t\t\n    Age:\t       Customer's age in completed years\t\t\t\t\t\t\t\n    Experience:\t   #years of professional experience\t\t\t\t\t\t\t\n    Income\t       Annual income of the customer ($000)\n    ZIPCode:\t   Home Address ZIP code.\t\t\t\t\t\t\t\n    Family:\t       Family size of the customer\t\t\t\t\t\t\t\n    CCAvg:\t       Avg. spending on credit cards per month ($000)\t\t\t\t\t\t\t\n    Education:\t   Education Level. 1: Undergrad; 2: Graduate; 3: Advanced Professional\t\t\t\t\t\t\t\n    Mortgage:\t   Value of house mortgage if any. ($000)\t\t\t\t\t\t\t\n    Personal Loan: Did this customer accept the personal loan offered in the last campaign?\t\t\t\t\t\t\t\n    Securities     Account: Does the customer have a securities account with the bank?\t\t\t\t\t\t\t\n    CD Account:\t   Does the customer have a certificate of deposit (CD) account with the bank?\t\t\t\t\t\t\t\n    Online:        Does the customer use internet banking facilities?\t\t\t\t\t\t\t\n    CreditCard:\t   Does the customer use a credit card issued by UniversalBank?\t\t\t\t\t\t\t","8f17cc51":"Random Forest Model"}}