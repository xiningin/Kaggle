{"cell_type":{"5cd48cfb":"code","1c28e422":"code","ef0db564":"code","e5994575":"code","fa96174a":"code","a3fadd46":"code","f97e738c":"code","ad6bd55c":"code","725a3ca6":"code","858faccd":"code","d395cbc3":"code","8b3aa630":"code","90f62399":"code","d6a607ae":"code","880189e5":"code","45fa86c4":"code","64265b1c":"code","4fe8d8c4":"code","bd7eae6a":"code","f7479876":"markdown","342b43c3":"markdown","d68e7d48":"markdown","6b80746c":"markdown","6b342696":"markdown","ecff59b1":"markdown","0c8fc54c":"markdown","b1e2e60a":"markdown","6bc2a455":"markdown"},"source":{"5cd48cfb":"train_dir = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Train'\nval_dir   = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Validation'\ntest_dir  = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Test'","1c28e422":"import os\ntrain_defective_fnames = os.listdir(train_dir+'\/Defective' )\ntrain_nondefective_fnames = os.listdir(train_dir+'\/Non defective')","ef0db564":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameters for our graph; we'll output images in a 10x10 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0\n\n# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\npic_index += 8\nnext_defective_pix = [os.path.join(train_dir+'\/Defective', fname) \n                for fname in train_defective_fnames[pic_index-8:pic_index]]\nnext_nondefective_pix = [os.path.join(train_dir+'\/Non defective', fname) \n                for fname in train_nondefective_fnames[pic_index-8:pic_index]]\n\n\nfor i, img_path in enumerate(next_defective_pix+next_nondefective_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","e5994575":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntarget_size=(300,300)\nbatch_size = 16","fa96174a":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","a3fadd46":"val_datagen = ImageDataGenerator(rescale=1.\/255)\n\nval_generator = val_datagen.flow_from_directory(\n    val_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","f97e738c":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,     \n    class_mode=None)","ad6bd55c":"num_classes = 2\ninput_shape = (300,300,3)","725a3ca6":"# Build Model\nfrom tensorflow.keras.applications import ResNet50V2\nfrom tensorflow.keras import models, layers\n\nbase_model=ResNet50V2(input_shape=input_shape,weights='imagenet',include_top=False) \nbase_model.trainable = False # freeze the base model (for transfer learning)\n\n# add Fully-Connected Layers to Model\nx=base_model.output\nx=layers.GlobalAveragePooling2D()(x)\nx=layers.Dense(128,activation='relu')(x)  # FC layer \npreds=layers.Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=models.Model(inputs=base_model.input,outputs=preds)\nmodel.summary()","858faccd":"# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","d395cbc3":"## set Checkpoint : save best only, verbose on\n#checkpoint = callbacks.ModelCheckpoint(\"railtrack_resnet50v2.hdf5\", monitor='accuracy', verbose=0, save_best_only=True, mode='auto', save_freq=1)","8b3aa630":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VAL  =val_generator.n\/\/val_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 30","90f62399":"# Train Model\nhistory = model.fit(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=val_generator, validation_steps=STEP_SIZE_VAL) #, callbacks=[checkpoint])","d6a607ae":"## Save Model\nmodels.save_model(model, 'railway_track_resnet50v2.h5')","880189e5":"## load best model weights if using callback (save-best-only)\n#model.load_weights(\"railtrack_resnet50v2.hdf5\")","45fa86c4":"score = model.evaluate(test_generator, steps=STEP_SIZE_TEST) # with test dataset\nprint(score)","64265b1c":"import numpy as np\nfrom sklearn.metrics import classification_report, confusion_matrix\n\npredY=model.predict(test_generator) # with validation dataset\ny_pred = np.argmax(predY,axis=1)\ny_actual = test_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","4fe8d8c4":"# report confusion matrix\nlabels = ['Defective', 'Non Defective']\nprint(classification_report(y_actual, y_pred, target_names=labels))","bd7eae6a":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,train,val): \n    plt.plot(hisData.history[train])\n    plt.plot(hisData.history[val])\n    plt.title('Training History')\n    plt.ylabel(train)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'val'], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","f7479876":"## Build Model","342b43c3":"## Confusion Matrix","d68e7d48":"## Data Augmentation","6b80746c":"## Evaluate Model","6b342696":"## Show Dataset Images","ecff59b1":"## Save Model","0c8fc54c":"# Railway Track Fault Detection\n## [Dataset](https:\/\/www.kaggle.com\/salmaneunus\/railway-track-fault-detection)","b1e2e60a":"## Training History","6bc2a455":"## Train Model"}}