{"cell_type":{"2169e121":"code","a9a8301d":"code","dc826981":"code","89c5184c":"code","fc7c016f":"code","eec9cd77":"code","e1d17cc7":"code","c975a294":"code","ba0a8032":"code","3b8c0310":"code","e34b4cec":"code","04d9cc29":"code","1b55f372":"code","46872226":"code","bd7da8e4":"code","966b1952":"code","e075586d":"code","545cc681":"code","25e3df96":"code","2d00c211":"code","1376fb7b":"code","abf75fa4":"code","cd2f5fc6":"markdown","568ee78c":"markdown","9834af57":"markdown","51e91440":"markdown","46e394f1":"markdown","e8baa8e8":"markdown","85f2e6e1":"markdown","c906cf4a":"markdown","06dd7c8a":"markdown","b46a9df4":"markdown","24dfd04e":"markdown","7431f3e5":"markdown","9ac42a92":"markdown","a4050986":"markdown","07625d2f":"markdown","ab53e6d3":"markdown","f7df13b2":"markdown","e9a701ba":"markdown"},"source":{"2169e121":"import csv\nfrom time import time\nimport matplotlib.pyplot as plt\nimport queue\nimport math\nfrom collections import deque","a9a8301d":"def isprime(n):\n    \"\"\"\n    Check if integer n is a prime\n    \"\"\"\n    # make sure n is a positive integer\n    n = abs(int(n))\n    # 0 and 1 are not primes\n    if n < 2:\n        return False\n    # 2 is the only even prime number\n    if n == 2: \n        return True    \n    # all other even numbers are not primes\n    if not n & 1: \n        return False\n    # range starts with 3 and only needs to go up the squareroot of n\n    # for all odd numbers\n    for x in range(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True","dc826981":"def sort_list(list, axis1, axis2):\n    \"\"\"\n    Sorts list in the order of axis1 followed by axis2\n    \"\"\"\n    return sorted(list, key=lambda val: (val[axis1], val[axis2]))","89c5184c":"# Calculate the execution time\nstart = time()\n\n# List of lists\ncities_list = []\n\n# Open csv file\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.append([int(row[0]), float(row[1]), float(row[2])])\n\npath_shortest_list = []\ntotal_dist = 0\nshortest_dist = math.inf\nindex = 0\n\n# Counter for every step taken\nstep_counter = 1\n\n# Finding nearest point to origin point\nx_origin = cities_list[0][1]\ny_origin = cities_list[0][2]\nfor i in range(1,len(cities_list)):\n    x_index = cities_list[i][1]\n    y_index = cities_list[i][2]\n    eucl_dist = math.sqrt(((x_index-x_origin)*(x_index-x_origin))+((y_index-y_origin)*(y_index-y_origin)))\n    if eucl_dist < shortest_dist:\n        shortest_dist = eucl_dist\n        index = i\n\nstep_counter += 1\ntotal_dist += shortest_dist\n\n# Saving origin point for bring back path to origin\norigin_point = cities_list.pop(0)\npath_shortest_list.append(origin_point)\n\nx_2 = cities_list[index][1]\ny_2 = cities_list[index][2]\npath_shortest_list.append(cities_list.pop(index))\n\n# As long as there is more than 1 item in cities_list, find the next nearest point\nwhile len(cities_list)>0:\n    shortest_dist2 = math.inf\n    for i in range(0,len(cities_list)):\n        x_index = cities_list[i][1]\n        y_index = cities_list[i][2]\n        eucl_dist = math.sqrt(((x_index-x_2)*(x_index-x_2))+((y_index-y_2)*(y_index-y_2)))\n\n        # Check: Every 10th step (stepNumber % 10 == 0) is 10% more lengthy unless coming from a prime CityId.\n        if (step_counter % 10 == 0) and not isprime(cities_list[i][0]):\n            eucl_dist = eucl_dist*1.1\n\n        if eucl_dist < shortest_dist2:\n            shortest_dist2 = eucl_dist\n            index = i\n\n    step_counter += 1\n    total_dist += shortest_dist2\n    x_2 = cities_list[index][1]\n    y_2 = cities_list[index][2]\n    path_shortest_list.append(cities_list.pop(index))\n\n# Adding point of origin to path_shortest_list\neucl_dist = math.sqrt(((x_2-x_origin)*(x_2-x_origin))+((y_2-y_origin)*(y_2-y_origin)))\ntotal_dist += eucl_dist\npath_shortest_list.append(origin_point)\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(path_shortest_list)))\nprint(\"Cities list: {}\".format(len(cities_list)))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = path_shortest_list.pop(0)\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(path_shortest_list)):\n    point = path_shortest_list.pop(0)\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()","fc7c016f":"def shortest_dist_i2_v1(list_x, x, y):\n    \"\"\"\n    Get the closest distance between all the points inside list_x and (x,y)\n    Return: list with shortest distance, r_list and shortest_distance\n    \"\"\"\n    list_to_check = list_x\n\n    while True:\n        # Get length of x sorted list\n        len_x = len(list_to_check)\n        \n        # If list is less than or equal to 3, manually calculate every point in the list\n        # with the previous list so attain more accurate result\n        if len_x <= 1:\n            break\n        else:\n            # Get the middle point with no remainder\n            midpoint = len_x \/\/ 2\n\n            left_x = list_to_check[:midpoint]\n            right_x = list_to_check[midpoint:]\n\n            midpoint_x = list_to_check[midpoint][1]\n\n            if x <= midpoint_x:\n                list_to_check = left_x\n            else:\n                list_to_check = right_x\n    \n    dist = math.sqrt(((list_to_check[0][1] - x)*(list_to_check[0][1] - x))+((list_to_check[0][2] - y)*(list_to_check[0][2] - y)))\n\n    return (list_to_check[0],dist)","eec9cd77":"# Calculate the execution time\nstart = time()\n\n# List of lists\ncities_list = []\n\n# Open csv file\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.append([int(row[0]), float(row[1]), float(row[2])])\n\npath_shortest_list = []\ntotal_dist = 0\n\n# Get origin point\nx_origin = cities_list[0][1]\ny_origin = cities_list[0][2]\ncity_origin = cities_list.pop(0)\npath_shortest_list.append(city_origin)\n\n# Sort list\n# 1 = X, 2 = Y\nx_sorted_list = sort_list(cities_list,1,2)\n\nclosest_list = list()\n\n# Find nearest point to city_origin\n(closest_list, d) = shortest_dist_i2_v1(x_sorted_list, x_origin, y_origin)\ntotal_dist += d\nx_sorted_list.remove(closest_list)\npath_shortest_list.append(closest_list)\n\n# Find the remaining nearest points\nwhile len(x_sorted_list)>=1:\n    (closest_list, d) = shortest_dist_i2_v1(x_sorted_list, closest_list[1], closest_list[2])\n    total_dist += d\n    x_sorted_list.remove(closest_list)\n    path_shortest_list.append(closest_list)\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(path_shortest_list)))\nprint(\"Cities list: {}\".format(len(x_sorted_list)))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = path_shortest_list.pop(0)\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(path_shortest_list)):\n    point = path_shortest_list.pop(0)\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\n    plt.grid(False)\n    ax.autoscale()\n\nplt.show()","e1d17cc7":"def two_points_dist_i2_v2(p1, x, y):\n    \"\"\"\n    Calculate the shortest distance between the p1 and (x,y)\n    Return: euclid distance\n    \"\"\"\n    return math.sqrt(((p1[1]-x)*(p1[1]-x))+((p1[2]-y)*(p1[2]-y)))\n\ndef get_closest_point_i2_v2(lst, x, y):\n    \"\"\"\n    Get the closest distance between all the points lst and (x,y)\n    Return: list with shortest distance, r_list and shortest_distance\n    \"\"\"\n    shortest_dist = math.inf\n    r_list = list()\n\n    for point in lst:\n        dist = two_points_dist_i2_v2(point, x, y)\n        if dist < shortest_dist:\n            shortest_dist = dist\n            r_list = point\n    return r_list,shortest_dist","c975a294":"def closest_point_i2_v2(list_x, x, y):\n    \n    list_to_check = list_x\n    \n\n    while True:\n        # Get length of x sorted list\n        len_x = len(list_to_check)\n        \n        # If list is less than or equal to 3, manually calculate every point in the list\n        # with the previous list so attain more accurate result\n        # Do checks for 3....10000\n        if len_x <= 10000:\n            return get_closest_point_i2_v2(list_to_check, x, y)\n        else:\n            # Get the middle point with no remainder\n            midpoint = len_x \/\/ 2\n\n            left_x = list_to_check[:midpoint]\n            right_x = list_to_check[midpoint:]\n\n            midpoint_x = list_to_check[midpoint][1]\n\n            if x <= midpoint_x:\n                list_to_check = left_x\n            else:\n                list_to_check = right_x","ba0a8032":"# Calculate the execution time\nstart = time()\n\n# List of lists\ncities_list = []\n\n# Open csv file\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.append([int(row[0]), float(row[1]), float(row[2])])\n\npath_shortest_list = []\ntotal_dist = 0\n\n# Get origin point\nx_origin = cities_list[0][1]\ny_origin = cities_list[0][2]\ncity_origin = cities_list.pop(0)\npath_shortest_list.append(city_origin)\n\n# Sort list\n# 1 = X, 2 = Y\nx_sorted_list = sort_list(cities_list,1,2)\n\nclosest_list = list()\n\n# Find nearest point to city_origin\n(closest_list, d) = closest_point_i2_v2(x_sorted_list, x_origin, y_origin)\ntotal_dist += d\nx_sorted_list.remove(closest_list)\npath_shortest_list.append(closest_list)\n\n# Find the remaining nearest points\nwhile len(x_sorted_list)>=1:\n    (closest_list, d) = closest_point_i2_v2(x_sorted_list, closest_list[1], closest_list[2])\n    total_dist += d\n    x_sorted_list.remove(closest_list)\n    path_shortest_list.append(closest_list)\n\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(path_shortest_list)))\nprint(\"Cities list: {}\".format(len(x_sorted_list)))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = path_shortest_list.pop(0)\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(path_shortest_list)):\n    point = path_shortest_list.pop(0)\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()","3b8c0310":"check_time = []\ncheck_distance = []\n# when len = 3\ncheck_time.append([3,1.3901])\ncheck_distance.append([3,11567988.2091])\n# when len = 10\ncheck_time.append([10,1.4381])\ncheck_distance.append([10,5266561.8749])\n# when len = 50\ncheck_time.append([50,1.6832])\ncheck_distance.append([50,1391942.2088])\n# when len = 200\ncheck_time.append([200,2.4695])\ncheck_distance.append([200,675473.6778])\n# when len = 1000\ncheck_time.append([1000,6.9691])\ncheck_distance.append([1000,512834.0704])\n# when len = 2000\ncheck_time.append([2000,11.8996])\ncheck_distance.append([2000,489427.8288])\n# when len = 3000\ncheck_time.append([3000,16.9225])\ncheck_distance.append([3000,474417.3427])\n# when len = 5000\ncheck_time.append([5000,27.3476])\ncheck_distance.append([5000,476250.5593])\n# when len = 8000\ncheck_time.append([8000,39.8815])\ncheck_distance.append([8000,458262.9243])\n# when len = 10000\ncheck_time.append([10000,46.4981])\ncheck_distance.append([10000,455349.1702])\n","e34b4cec":"# Mapping length checked against Time and Distance\nfig, (ax1, ax2) = plt.subplots(2, sharex=True, figsize=(15,10))\nfig.suptitle(\"Mapping length check against Time and Distance\")\n\n# Plotting for Time\nprev_t_point = check_time.pop(0)\n\nfor i in range(len(check_time)):\n    time_point = check_time.pop(0)\n\n    x_t = time_point[0]\n    y_t = time_point[1]\n    ax1.plot([prev_t_point[0], x_t], [prev_t_point[1], y_t], c=\"blue\", linewidth=1, label = \"Time\")\n\n    prev_t_point = time_point\n\n    plt.grid(False)\n    ax.autoscale()\n\n    \n# Plotting for Distance\nprev_d_point = check_distance.pop(0)\n\nfor i in range(len(check_distance)):\n    dist_point = check_distance.pop(0)\n\n    x_d = dist_point[0]\n    y_d = dist_point[1]\n    ax2.plot([prev_d_point[0], x_d], [prev_d_point[1], y_d], c=\"green\", linewidth=1, label = \"Distance\")\n\n    prev_d_point = dist_point\n\n    plt.grid(False)\n    ax.autoscale()\nax1.set_ylabel(\"Time\")\nax2.set_ylabel(\"Distance\")\nax2.set_xlabel(\"Value for Condition of len_x <= value\")\nplt.show()","04d9cc29":"def two_points_dist_i3(p1, p2):\n    \"\"\"\n    Calculate the shortest distance between the p1 and p2\n    Return: euclid distance\n    \"\"\"\n    return math.sqrt(((p1[1]-p2[1])*(p1[1]-p2[1]))+((p1[2]-p2[2])*(p1[2]-p2[2])))\n\ndef get_closest_point_i3(list_1, list2):\n    \"\"\"\n    Get the closest distance between all the points inside list 1 and list 2\n    Return: list with shortest distance, r_list and shortest_distance\n    \"\"\"\n    shortest_dist = math.inf\n    r_list = list()\n\n    for point1 in list_1:\n        dist = two_points_dist_i3(point1, list2)\n        if dist < shortest_dist:\n            shortest_dist = dist\n            r_list = point1\n\n    return r_list,shortest_dist","1b55f372":"def closest_point_i3(list_1, list_prev):\n    \"\"\"\n    Run recursively to get the closest point with the previous point\n    \"\"\"\n    # Get length of list\n    len_list = len(list_1)\n\n    # If list is less than or equal to 3, manually calculate every point in the list\n    # with the previous list so attain more accurate result\n    if len_list <= 3:\n        return get_closest_point_i3(list_1, list_prev)\n    \n    # Get the middle point with no remainder\n    midpoint = len_list \/\/ 2\n\n    # Split list into left and right and assign a midpoint\n    left_x = list_1[:midpoint]\n    right_x = list_1[midpoint:]\n    midpoint_x = list_1[midpoint][1]\n\n\n    if list_prev[1] <= midpoint_x:\n        (result_list, dist) = closest_point_i3(left_x, list_prev)\n    else:\n        (result_list, dist) = closest_point_i3(right_x, list_prev)\n    return (result_list, dist)","46872226":"# Calculate the execution time\nstart = time()\n\n# List of lists\ncities_list = []\n\n# Open csv file\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.append([int(row[0]), float(row[1]), float(row[2])])\n\npath_shortest_list = []\ntotal_dist = 0\n\n# Get origin point\nx_origin = cities_list[0][1]\ny_origin = cities_list[0][2]\ncity_origin = cities_list.pop(0)\npath_shortest_list.append(city_origin)\n\n# Sort list\n# 1 = X, 2 = Y\nx_sorted_list = sort_list(cities_list,1,2)\n\n# Get the next nearest point from origin city\n(result_list, d) = closest_point_i3(x_sorted_list, city_origin)\ntotal_dist += d\nx_sorted_list.remove(result_list)\npath_shortest_list.append(result_list)\n\n# Get the remaining points from cities_list\nfor i in range(len(x_sorted_list)):\n    (result_list, d) = closest_point_i3(x_sorted_list, result_list)\n    total_dist += d\n    x_sorted_list.remove(result_list)\n    path_shortest_list.append(result_list)\n\n# Loop back to the origin city\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(path_shortest_list)))\nprint(\"Cities list: {}\".format(len(x_sorted_list)))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = path_shortest_list.pop(0)\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(path_shortest_list)):\n    point = path_shortest_list.pop(0)\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()","bd7da8e4":"# class for linked list\nclass LinkedListIterator:\n    def __init__(self, head):\n        self.current = head\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.current:\n            raise StopIteration\n        else:\n            item = self.current._data\n            self.current = self.current._next\n            return item\n\nclass LinkedList:\n    class Node:\n        def __init__(self, val, nxt):\n            self._data = val\n            self._next = nxt\n\n    def __init__(self):\n        #create empty head and tail here\n        self._head = self.Node(None, None)\n        self._tail = self.Node(None, None)\n        self._size = 0\n\n    def __iter__(self):\n        \"\"\"\n        Generate a forward iteration of the elements of the list\n        \"\"\"\n        return LinkedListIterator(self._head)\n\n    def insert_head(self, val):\n        new_node = self.Node(val, None)\n        if self._size == 0: #i.e first Node\n            self._head = new_node\n            self._tail = new_node\n        else:\n            new_node._next = self._head #new node now is poinint to old head\n            self._head = new_node #change the head to the beginning of the list\n\n        self._size += 1\n\n    def insert_tail(self,val): #inserts node at the end of the list\n        new_node = self.Node(val, None)\n        if self._size == 0: #i.e first Node\n            self._head = new_node\n            self._tail = new_node\n        else: #at least one element in the list\n            self._tail._next = new_node\n            self._tail = new_node\n        self._size += 1\n\n    def delete_head(self):\n        if self._size == 0:\n            print(\"Deletion error: List empty\")\n            return\n        #at least one node in the list\n        cur = self._head #take backup of head\n        self._head = self._head._next #change head to point to its next neighbour\n        cur._next = None #break the connection of the old head from rest of the list\n        self._size -= 1\n\n    def delete_tail(self):\n        if self._size == 0:\n            print(\"Deletion error: List empty\")\n            return\n        #at least one node in the list\n        cur = self._head\n        while cur._next != self._tail:\n            cur = cur._next\n        # tail = cur._next\n        self._tail = cur\n        self._tail._next = None\n        self._size -= 1\n\n    def insert_between(self, pos, val):\n        \"\"\"\n        Inserts a value at position pos\n        \"\"\"\n        if self._size == 0:\n            print(\"Insertion error: List empty\")\n            return\n        elif self._size < 3:\n            print(\"List has only 2 elements\")\n            return\n        elif pos >= self._size:\n            print(\"Index error: Pos > List\")\n            return\n        cur = self._head\n        for i in range(pos-1):\n            # prev = cur\n            cur = cur._next\n        nxt = cur._next\n        new_node = self.Node(val, nxt)\n        cur._next = new_node\n        self._size += 1\n\n    def pop(self, pos):\n        \"\"\"\n        Deletes and returns current data at pos\n        \"\"\"\n        if self._size == 0:\n            print(\"Insertion error: List empty\")\n            return\n        elif pos >= self._size:\n            print(\"Index error: Pos > List\")\n            return\n        cur = self._head\n        # Check for if pos = 0\n        if pos == 0:\n            self._head = cur._next\n            cur._next = None\n            self._size -= 1\n            return cur._data\n        for i in range(pos-2):\n            cur = cur._next\n        prev = cur\n        target = cur._next\n        nxt = target._next\n        target._next = None\n        prev._next = nxt\n        self._size -= 1\n        return target._data\n    \n    def remove(self, lst):\n        \"\"\"\n        Deletes and returns current data at pos\n        \"\"\"\n        if self._size == 0:\n            print(\"Insertion error: List empty\")\n            return\n        cur = self._head\n        if self._head._data == lst:\n            prev = cur\n            self._head = cur._next\n            prev._next = None\n            self._size -= 1\n            return\n        prev = None\n        # Check if the next point is equal to list\n        try:\n            while cur._data != lst:\n                prev = cur\n                cur = cur._next\n            # if next point is equal, remove it\n            if cur._data == lst:\n                to_remove = cur\n                prev._next = cur._next\n                to_remove._next = None\n                self._size -= 1\n                return\n        except Exception:\n            print(\"List not found\")\n            \n\n    #display contents of the linked list\n    def display(self):\n        #Traverse the list here\n        print(\"\\nLinked list num of nodes:\", self._size)\n        if self._size == 0:\n            print(\"\\nList empty\")\n            return\n        cur = self._head\n        while cur != None:\n            print(\"Node data: \", cur._data)\n            cur = cur._next\n\n","966b1952":"# Calculate the execution time\nstart = time()\n\n# Create LinkedList object\ncities_list = LinkedList()\n\n# Load csv file into linked list, storing a list for each Node\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.insert_tail([int(row[0]), float(row[1]), float(row[2])])\n\n# Create deque object\nshortest_path_list = deque()\ntotal_dist = 0\n\n# Size of Linked List\ntotal_cities = cities_list._size\nprint(\"Total Cities:\", total_cities)\n\n# Get origin point\ncity_origin = cities_list.pop(0)\nshortest_path_list.append(city_origin)\n\n# Initiating variables\nshortest_dist = math.inf\nresult_list = []\nstep_counter = 0\n\n# Get point nearest to city_origin\nfor point in cities_list:\n    x_index = point[1]\n    y_index = point[2]\n    eucl_dist = math.sqrt(((x_index-city_origin[1])*(x_index-city_origin[1]))+((y_index-city_origin[2])*(y_index-city_origin[2])))\n\n    if eucl_dist < shortest_dist:\n        shortest_dist = eucl_dist\n        result_list = point\ntotal_dist += shortest_dist\ncities_list.remove(result_list)\nshortest_path_list.append(result_list)\nstep_counter += 1\n\n# Get the remaining points from cities_list\nwhile cities_list._size >= 1:\n    if cities_list._size%1000 == 0:\n            print(\"Cities left: {}\".format(cities_list._size))\n    dist = math.inf\n    r_list = []\n    for point in cities_list:\n        x_index = point[1]\n        y_index = point[2]\n        eucl_dist = math.sqrt(((x_index-result_list[1])*(x_index-result_list[1]))+((y_index-result_list[2])*(y_index-result_list[2])))\n\n        # Check: Every 10th step (stepNumber % 10 == 0) is 10% more lengthy unless coming from a prime CityId.\n        if (step_counter % 10 == 0) and not isprime(point[0]):\n            eucl_dist = eucl_dist*1.1\n\n        if eucl_dist < dist:\n            dist = eucl_dist\n            r_list = point\n\n    step_counter += 1\n    total_dist += dist\n    result_list = r_list\n    cities_list.remove(r_list)\n    shortest_path_list.append(r_list)\n\n# Get distance back to origin_city\neucl_dist = math.sqrt(((city_origin[1]-result_list[1])*(city_origin[1]-result_list[1]))+((city_origin[2]-result_list[2])*(city_origin[2]-result_list[2])))\ntotal_dist += eucl_dist\nshortest_path_list.append(city_origin)\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(list(shortest_path_list))))\nprint(\"Cities list: {}\".format(cities_list._size))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = shortest_path_list.popleft()\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(list(shortest_path_list))):\n    point = shortest_path_list.popleft()\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()","e075586d":"def two_points_dist_i5(p1, p2):\n    \"\"\"\n    Calculate the shortest distance between the p1 and p2\n    Return: euclid distance\n    \"\"\"\n    return math.sqrt(((p1[1]-p2[1])*(p1[1]-p2[1]))+((p1[2]-p2[2])*(p1[2]-p2[2])))","545cc681":"def get_closest_point_i5(list_1, list2):\n    \"\"\"\n    Get the closest distance between all the points inside list 1 and list 2\n    Return: list with shortest distance, r_list and shortest_distance\n    \"\"\"\n    shortest_dist = math.inf\n    r_list = list()\n\n    for point1 in list_1:\n        dist = two_points_dist_i5(point1, list2)\n        # Check: Every 10th step (stepNumber % 10 == 0) is 10% more lengthy unless coming from a prime CityId.\n        if (step_counter % 10 == 0) and not isprime(point1[0]):\n            dist = dist*1.1\n        if dist < shortest_dist:\n            shortest_dist = dist\n            r_list = point1\n\n    return r_list,shortest_dist","25e3df96":"def closest_point_i5(c_linked_list, list_prev):\n    \"\"\"\n    Run recursively to get the closest point with the previous point\n    \"\"\"\n    # Get length of list\n    len_list = c_linked_list._size\n    counter = 0\n    # If list is less than 10, manually calculate every point in the list\n    # with the previous list so attain more accurate result\n    if len_list <= 10000:\n        return get_closest_point_i5(c_linked_list, list_prev)\n    \n    # Get the middle point with no remainder\n    midpoint = len_list \/\/ 2\n\n    # Split list into left and right and assign a midpoint\n    left_x = LinkedList()\n    right_x = LinkedList()\n    midpoint_list = []\n    \n    for point in c_linked_list:\n        if counter < midpoint:\n            left_x.insert_tail(point)\n            counter += 1\n        elif counter == midpoint:\n            midpoint_list = point\n            right_x.insert_tail(point)\n            counter += 1\n        else:\n            right_x.insert_tail(point)\n\n    if list_prev[1] <= midpoint_list[1]:\n        (result_list, dist) = closest_point_i5(left_x, list_prev)\n    else:\n        (result_list, dist) = closest_point_i5(right_x, list_prev)\n    return (result_list, dist)","2d00c211":"# Calculate the execution time\nstart = time()\n\nstep_counter = 1\n\ncities_list = []\n\n# Create LinkedList object\nc_linked_list = LinkedList()\n\n# Load csv file into linked list, storing a list for each row of record\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.append([int(row[0]), float(row[1]), float(row[2])])\n\n# Create deque object\nshortest_path_list = deque()\ntotal_dist = 0\n\n# Get origin city\ncity_origin = cities_list.pop(0)\nshortest_path_list.append(city_origin)\n\n# Sort list\n# 1 = X, 2 = Y\nx_sorted_list = sort_list(cities_list,1,2)\n\n# Add x_sorted_list into c_linked_list\n[c_linked_list.insert_tail(row) for row in x_sorted_list]\n\n# Size of Linked List, adding city_origin\ntotal_cities = c_linked_list._size + 1 \nprint(\"Total Cities:\", total_cities)\n\n# Get the next nearest point from origin city\n(result_list, d) = closest_point_i5(c_linked_list, city_origin)\ntotal_dist += d\nc_linked_list.remove(result_list)\nshortest_path_list.append(result_list)\n\n# Get the remaining points from cities_list\nfor i in range(c_linked_list._size):\n    if c_linked_list._size%1000 == 0:\n        print(\"Cities left: {}\".format(c_linked_list._size))\n    (result_list, d) = closest_point_i5(c_linked_list, result_list)\n    total_dist += d\n    c_linked_list.remove(result_list)\n    shortest_path_list.append(result_list)\n    step_counter += 1\n\n# Adding the last stop, routing back to city_origin point\nfinal_dist = two_points_dist_i5(result_list, city_origin)\ntotal_dist += final_dist\nshortest_path_list.append(city_origin)\n\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(list(shortest_path_list))))\nprint(\"Cities list: {}\".format(c_linked_list._size))\n\nend = time()\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = shortest_path_list.popleft()\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(list(shortest_path_list))):\n    point = shortest_path_list.popleft()\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()\n","1376fb7b":"# Queue\nclass Queue:\n    def __init__(self):\n        \"\"\"\n        Create an empty Queue\n        \"\"\"\n        self._data = []\n        \n    def __len__(self):\n        \"\"\"\n        Returns the number of elements in the queue.\n        \"\"\"\n        return len(self._data)\n    \n    def enqueue(self, val):\n        \"\"\"\n        Adds the val to the end of the list\n        \"\"\"\n        self._data.append(val)\n        \n    def dequeue(self):\n        \"\"\"\n        Removes and the first element of the list\n        \"\"\"\n        if len(self._data) == 0:\n            print(\"List is empty\")\n        return self._data.pop(0)","abf75fa4":"# Calculate the execution time\nstart = time()\n\n# Create LinkedList object\ncities_list = LinkedList()\n\n# Load csv file into Linked List, storing a list for each Node in the Linked List\nwith open(\"..\/input\/cities\/cities_10p.csv\", \"r\") as cities_file:\n    cities_data = csv.reader(cities_file)\n    for row in cities_data:\n        cities_list.insert_tail([int(row[0]), float(row[1]), float(row[2])])\n\n# Create Queue object\nshortest_path_list = Queue()\n# Initiating total_dist variable\ntotal_dist = 0\n\n# Display size of Linked List\ntotal_cities = cities_list._size\nprint(\"Total Cities:\", total_cities)\n\n# Get origin point\ncity_origin = cities_list.pop(0)\nshortest_path_list.enqueue(city_origin)\n\n# Initiating variables\nshortest_dist = math.inf\nresult_list = []\nstep_counter = 0\n\n# Get point nearest to city_origin\nfor point in cities_list:\n    x_index = point[1]\n    y_index = point[2]\n    # Finding the euclidean distance between two points \n    eucl_dist = math.sqrt(((x_index-city_origin[1])*(x_index-city_origin[1]))+((y_index-city_origin[2])*(y_index-city_origin[2])))\n    \n    # If euclideon distance is smaller than shortest_dist, replace it and set the return_list to point\n    if eucl_dist < shortest_dist:\n        shortest_dist = eucl_dist\n        result_list = point\ntotal_dist += shortest_dist\ncities_list.remove(result_list)\nshortest_path_list.enqueue(result_list)\nstep_counter += 1\n\n# Get the remaining points from cities_list\nwhile cities_list._size >= 1:\n    if cities_list._size%1000 == 0:\n            print(\"Cities left: {}\".format(cities_list._size))\n    dist = math.inf\n    r_list = []\n    for point in cities_list:\n        x_index = point[1]\n        y_index = point[2]\n        # Finding the euclidean distance between two points\n        eucl_dist = math.sqrt(((x_index-result_list[1])*(x_index-result_list[1]))+((y_index-result_list[2])*(y_index-result_list[2])))\n\n        # Check: Every 10th step (stepNumber % 10 == 0) is 10% more lengthy unless coming from a prime CityId.\n        if (step_counter % 10 == 0) and not isprime(point[0]):\n            eucl_dist = eucl_dist*1.1\n        \n        # If euclideon distance is smaller than shortest_dist, replace it and set the return_list to point\n        if eucl_dist < dist:\n            dist = eucl_dist\n            r_list = point\n\n    step_counter += 1\n    total_dist += dist\n    result_list = r_list\n    cities_list.remove(r_list)\n    shortest_path_list.enqueue(r_list)\n\n# Get the distance back to origin_city\neucl_dist = math.sqrt(((city_origin[1]-result_list[1])*(city_origin[1]-result_list[1]))+((city_origin[2]-result_list[2])*(city_origin[2]-result_list[2])))\ntotal_dist += eucl_dist\nshortest_path_list.enqueue(city_origin)\n\nprint(\"Total Distance: {}\".format(total_dist))\nprint(\"Shortest path list: {}\".format(len(shortest_path_list)))\nprint(\"Cities list: {}\".format(cities_list._size))\n\nend = time()\n\nexec_time = end - start\nprint(\"Execution time: {}\".format(exec_time))\n\n# Plotting route of shortest path taken\nfig, ax = plt.subplots(figsize=(15,10))\norigin_point = shortest_path_list.dequeue()\nplt.scatter(origin_point[1], origin_point[2], s=10, c=\"red\")\n\nprev_point = origin_point\n\nfor i in range(len(shortest_path_list)):\n    point = shortest_path_list.dequeue()\n\n    xs = point[1]\n    ys = point[2]\n    ax.plot([prev_point[1], xs], [prev_point[2], ys], c=\"blue\", linewidth=0.5)\n\n    prev_point = point\n\nplt.show()","cd2f5fc6":"<h2>Second Iteration v2<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Lists of list<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>While<\/li>\n                <li>Binary Search<\/li>\n            <\/ul>\n        <\/li>\n        <li>Methods used:\n            <ul>\n                <li>Take csv file, load it into the list, using lists of list.<\/li>\n                <li>Format: cities_list = [[0,316.836739061509,2202.34070733524] ... \n                    [19776,1883.0509264308,1318.48663504281]<\/li>\n                <li>Before comparing, since I am using Binary Search, I will sorting list according to X \n                    coordinates then Y coordinates.<\/li>\n                <li>Once sorted, I will compare half the list at every loop, until the list has a size of less\n                    than 4. I will then calculate the distance between all the points that are left in the \n                    list with the previous point and get the minimum distance<\/li>\n                <li>The condition to check the size of list can be altered<\/li>\n                <li>Remove the point with the shorter distance, add the distance to total distance, and add the \n                    point to path_shortest_list.<\/li>\n                <li>This iteration does not factor in the additional every 10 steps and prime cities\n                    for the calculation.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n log n)<\/li>\n    <\/ol>\n<\/div> ","568ee78c":"<div>\n    <p><b>Conclusion<\/b><\/p>\n    <p>\n        Overall, a Linked list is not as efficient and versatile as Python's list structure. \n        There are also other limitations to using Linked Lists for algorithms such as Binary Search where\n        you have to split the Linked List into 2 but unable to do so, resulting in having to create 2 additional\n        Linked List at every iteration of the loop. This addition causes a spike in the time complexity.\n    <\/p>\n    <p>\n        That being said about Linked Lists with Binary Search, from results, Binary Search is the most time efficient\n        algorithm used in this assignment if you just need to find an exact point. However due to the point have \n        2 coordinates - x and y, the distance calculated from Binary Search is terrible.\n    <\/p>\n    <p>\n        Recursive functions compared to using loops are also inefficient when writing algorithms for big data \n        structure as there will be many more layers of function call and return mechanism which will slow down \n        the program.\n    <\/p>\n<\/div>","9834af57":"<h2>Fourth Iteration<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Linked List<\/li>\n                <li>Deque<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>While and For loop<\/li>\n                <li>Linked list - insert\/delete\/search<\/li>\n            <\/ul>\n        <\/li>\n        <li>\n            Methods used:\n            <ul>\n                <li>This iteration is similiar to the First Iteration except that\n                    at this iteration, it is using Linked List.\n                <li>Node._data = [0,316.836739061509,2202.34070733524]<\/li>\n                <li>Every Node is linked via a _next pointer<\/li>\n                <li>Each Node's data can be accessed through _data<\/li>\n                <li>No sorting used<\/li>\n                <li>Take csv file, load it into the Linked List<\/li>\n                <li>Compare every point with other points in the linked list, and calculate the distance between two \n                    points.<\/li>\n                <li>Remove the point with the shortest distance, add the distance to total distance, and add the \n                    point to shortest_path_list.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n<sup>2<\/sup>)<\/li>\n    <\/ol>\n<\/div> ","51e91440":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        Expected poorer results due to linked list not being as efficient as python's list. However, based off the\n        same logic as the first iteration, it has a better result.\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        Try using linked lists with Recursive and Binary search\n    <\/p>\n<\/div>","46e394f1":"<h2>Solution<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Linked List<\/li>\n                <li>Queue<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>Queue - enqueue and dequeue<\/li>\n                <li>Linked list - insert\/delete\/search\/pop\/remove<\/li>\n                <li>For loops<\/li>\n            <\/ul>\n        <\/li>\n        <li>\n            Methods used:\n            <ul>\n                <li>This Solution uses Linked List and Queue<\/li>\n                <li>Inside every Node in the LinkedList stores _data of a point - \n                    for example: [0,316.836739061509,2202.34070733524]<\/li>\n                <li>Every Node is linked to the next Node via a _next pointer<\/li>\n                <li>Each Node's data can be accessed through _data<\/li>\n                <li>There is no sorting used<\/li>\n                <li>The steps are as follow:<\/li>\n                <li>Take csv file, load it into the Linked List<\/li>\n                <li>At every iteration of the loop, compare the current point with other points in the linked \n                    list. Calculate the distance between two points and return the smallest distance with the \n                    point.<\/li>\n                <li>Add the returned distance to total distance and remove the point from the Linked List using\n                    the remove method.<\/li>\n                <li>Add the same point to shortest_path_list Queue object using the enqueue method.<\/li>\n                <li>After every Node is visited exactly once, return back to the origin point<\/li>\n                <li>Run through shortest_path_list Queue object, using the dequeue method to plot the graph\n                    of the route of the shortest path taken.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n<sup>2<\/sup>)<\/li>\n    <\/ol>\n<\/div> ","e8baa8e8":"\n<p>\n    The above graph is when condition of len_x &lt;= 10000<br\/>\n    The results for varrying different checking length of len_x\n<\/p>","85f2e6e1":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        This method out of all the iterations thus far is performing the worst in terms of time complexity. \n        Also, from the Second Iteration v2 when the condition of len x &lt;= 10000 seemed to perform the best \n        out of all the attempts, still performed poorer than the Fourth Iteration when using linked list \n        with searching next nearest point.<br\/>\n        There are also limitations to Linked List when using Binary Search. Without touching the original\n        linked list, upon split at every recursive loop, I have to create 2 new Linked Lists with a for loop\n        -- left_list and right_list. This causes the massive spike in time complexity, from O(n log n) to \n        O(n<sup>2<\/sup> log n)\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        It might just be better to go back to the Fourth Iteration, where there is better distance accuracy and \n        a lower time complexity of O(n<sup>2<\/sup>).\n    <\/p>\n<\/div>\n\n\n\n","c906cf4a":"<h2>Second Iteration v1<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Lists of list<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>While and For loops<\/li>\n                <li>Binary Search<\/li>\n            <\/ul>\n        <\/li>\n        <li>Methods used:\n            <ul>\n                <li>Take csv file, load it into the list, using lists of list.<\/li>\n                <li>Format: cities_list = [[0,316.836739061509,2202.34070733524] ... \n                    [19776,1883.0509264308,1318.48663504281]<\/li>\n                <li>Before comparing, since I am using Binary Search, I will sorting list according to X \n                    coordinates then Y coordinates.<\/li>\n                <li>Once sorted, I will half the list at every loop, until i get the middle point\n                and calculate the distance of the middle point with the previous point<\/li>\n                <li>Remove the middle point, add the distance to total distance, and add the \n                    point to path_shortest_list.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n log n)<\/li>\n    <\/ol>\n<\/div>    ","06dd7c8a":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        This method is very time efficient, but distance is inaccurate, at about 41.77x worse without factoring \n        in the additional every 10 steps and prime cities. <br\/>\n        This is due to the binary search algorithm searching for the middle x-coordinate point, resulting in \n        extra distance moved along the y-axis.\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        Even with huge improvements to time complexity but distance being off by a huge amount, sorting by\n        X then Y is not enough. <br\/>\n        Try incorporating iteration 1 and iteration 2 idea together.\n    <\/p>\n<\/div>\n\n\n\n","b46a9df4":"<h1>Assignment 1<\/h1>\n\n<h2>Topic<\/h2>\n<p>\n    URL: <a href=\"https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/data\">https:\/\/www.kaggle.com\/c\/traveling-santa-2018-prime-paths\/data<\/a><br\/>\n    All iterations used 10% of actual dataset\n<\/p>\n<ol>\n    <b>Contents<\/b>:\n    <li>First Iteration<\/li>\n    <li>Second Iteration v1<\/li>\n    <li>Second Iteration v2<\/li>\n    <li>Third Iteration<\/li>\n    <li>Linked List<\/li>\n    <li>Fourth Iteration<\/li>\n    <li>Fith Iteration<\/li>\n    <li>Queue<\/li>\n    <li>Solution<\/li>\n<\/ol>\n    ","24dfd04e":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        Using python's standard lists, I used this first iteration as a benchmark to the other algorithms\n        I will be planning to make use of. <br\/>\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        Try using binary search as it is a more efficient way to search for points.\n        > Sort by X and Y\n    <\/p>\n<\/div>","7431f3e5":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        This time with a slight modification to iteration two version one's code, there has been a big \n        improvement to the distance calculated. <br\/>\n        As I increased the value to check for len_x, the execution time increased because of \n        the increased number of computation required to compute the shortest distance between 2 points.\n        At the same time, the total distance gap between the first iteration narrowed. <br\/>\n        For small values, the time complexity remains at O(n log n) <br\/>\n        However for bigger values, the time complexity changes to O(n<sup>2<\/sup>)\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        Refactor code, use list comprehensions<br\/>\n        Try using recursive.<br\/>\n        Try using linked lists.\n    <\/p>\n<\/div>\n\n\n\n","9ac42a92":"<h2>Third Iteration<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Lists of list<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>For loop<\/li>\n                <li>Recursive function<\/li>\n                <li>Binary Search<\/li>\n            <\/ul>\n        <\/li>\n        <li>Methods used:\n            <ul>\n                <li>This iteration is exactly the same as Second Iteration v2 except that\n                    at this iteration, it will be using recursive.<\/li>\n                <li>--------------------------------------------------------------------------------------------------------------<\/li>\n                <li>Take csv file, load it into the list, using lists of list.<\/li>\n                <li>Format: cities_list = [[0,316.836739061509,2202.34070733524] ... \n                    [19776,1883.0509264308,1318.48663504281]<\/li>\n                <li>Before comparing, since I am using Binary Search, I will sorting list according to X \n                    coordinates then Y coordinates.<\/li>\n                <li>Once sorted, I will compare half the list at every loop, until the list has a size of less\n                    than 4. I will then calculate the distance between all the points that are left in the \n                    list with the previous point and get the minimum distance<\/li>\n                <li>The condition to check the size of list can be altered<\/li>\n                <li>Remove the point with the shorter distance, add the distance to total distance, and add the \n                    point to path_shortest_list.<\/li>\n                <li>This iteration does not factor in the additional every 10 steps and prime cities\n                    for the calculation.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n log n)<\/li>\n    <\/ol>\n<\/div>\n","a4050986":"<h2>Fifth Iteration<\/h2>\n\n<div>\n    <ol>\n        <li>Data Structure\n            <ul>\n                <li>Linked List<\/li>\n                <li>Deque<\/li>\n            <\/ul>\n        <\/li>\n        <li>Data Algorithms\n            <ul>\n                <li>For loop<\/li>\n                <li>Linked list - insert\/delete\/search<\/li>\n                <li>Recursive function<\/li>\n                <li>Binary Search<\/li>\n            <\/ul>\n        <\/li>\n        <li>\n            Methods used:\n            <ul>\n                <li>This iteration is similiar to the Second Iteration v2 except that\n                    in this iteration, it is using Linked List.\n                <li>Node._data = [0,316.836739061509,2202.34070733524]<\/li>\n                <li>Every Node is linked via a _next pointer<\/li>\n                <li>Each Node's data can be accessed through _data<\/li>\n                <li>--------------------------------------------------------------------------------------------------------------<\/li>\n                <li>Take csv file, load it into the list, using lists of list.<\/li>\n                <li>Format: cities_list = [[0,316.836739061509,2202.34070733524] ... \n                    [19776,1883.0509264308,1318.48663504281]<\/li>\n                <li>Before comparing, since I am using Binary Search, I will sorting list according to X \n                    coordinates then Y coordinates.<\/li>\n                <li>Once sorted, I will append the sorted cities_list into c_linked_list by using the \n                    insert_tail method.<\/li>\n                <li>I will compare half the list at every loop, until the list has a size of less\n                    than the condition fulfilled. I will then calculate the distance between \n                    all the points that are left in the list with the previous point and get \n                    the minimum distance<\/li>\n                <li>The condition to check the size of list can be altered<\/li>\n                <li>Remove the point with the shorter distance, add the distance to total distance, and add the \n                    point to path_shortest_list.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n<sup>2<\/sup> log n)<\/li>\n    <\/ol>\n<\/div>","07625d2f":"<h4>Queue<\/h4>\n<div>\n    <ul>\n        <b>Methods<\/b>:<br\/>\n        <li>__init__<\/li>\n        <li>__len__<\/li>\n        <li>Enqueue<\/li>\n        <li>Dequeue<\/li>\n    <\/ul>\n<\/div>","ab53e6d3":"<h2>First Iteration<\/h2>\n\n<div>\n    <ol>\n        <li>\n            Data Structure\n            <ul>\n                <li>Lists of list<\/li>\n            <\/ul>\n        <\/li>\n        <li>\n            Data Algorithms\n            <ul>\n                <li>While and For loops<\/li>\n            <\/ul>\n        <\/li>\n        <li>\n            Methods used:\n            <ul>\n                <li>No sorting used<\/li>\n                <li>Take csv file, load it into the list, using lists of list.<\/li>\n                <li>Format: cities_list = [[0,316.836739061509,2202.34070733524] ... \n                    [19776,1883.0509264308,1318.48663504281]]<\/li>\n                <li>Compare every point with other points in the list, and calculate the distance between two \n                    points.<\/li>\n                <li>Remove the point with the shortest distance, add the distance to total distance, and add the \n                    point to path_shortest_list.<\/li>\n            <\/ul>\n        <\/li>\n        <li>Time Complexity: O(n<sup>2<\/sup>)<\/li>\n    <\/ol>\n<\/div>    ","f7df13b2":"<h4>Linked List:<\/h4>\n<div>\n    <span>class Node<\/span>\n    <ul>\n        <b>Methods<\/b>:<br\/>\n        <li>__iter__<\/li>\n        <li>Insert Head<\/li>\n        <li>Insert Tail<\/li>\n        <li>Delete Head<\/li>\n        <li>Delete Tail<\/li>\n        <li>Insert_between<\/li>\n        <li>Pop<\/li>\n        <li>Remove<\/li>\n        <li>Display<\/li>\n    <\/ul>\n\n<\/div>","e9a701ba":"<h3>Thoughts:<\/h3>\n<div>\n    <p>\n        Above graph is when condition of len_x &lt;= 3 <br\/>\n        Used recursive to loop through all the points. The results of execution time was slightly \n        worse than the forth iteration by 1.16x which was surprising to me as I thought I would have a much \n        worse result than that.\n    <\/p>\n    <p>\n        Alternative methods: <br\/>\n        Try using linked lists.\n    <\/p>\n<\/div>"}}