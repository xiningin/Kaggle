{"cell_type":{"a2f78731":"code","a20f814e":"code","1f39a1b5":"code","3d8a55bf":"code","53c6a690":"code","0a9f1412":"code","05416ab5":"code","379e45f0":"code","bc7e515b":"code","7d3db3f8":"code","636969e4":"code","1eef2c9d":"code","a36e56f5":"code","8cbd176d":"code","44bf2117":"code","0dec9993":"code","ca97b048":"code","cc1a5782":"code","de300f28":"code","24a84b21":"code","45a60dde":"code","e2068a97":"code","27f1d66f":"code","94e15725":"code","180327b9":"code","169dc7a0":"code","4cd4f947":"code","7bf31d21":"code","74a9b9f3":"code","1fa6ce93":"code","6fb5d2e3":"code","763ff1b0":"code","f04c3cbc":"code","63e81074":"code","d381e285":"code","ca27623c":"code","d7d8ef64":"code","719269e4":"code","e8deb7af":"code","9476ba26":"code","36534e80":"code","ec815d1a":"code","c7aec6b7":"code","a17286b7":"code","56af0e01":"code","57db17c5":"code","89087eec":"code","746ada3d":"code","07da9252":"code","a07f2b40":"code","a8e29e22":"code","75fdf9d9":"code","07f0d198":"code","79f16c62":"code","ad661db3":"code","4253491b":"markdown","924d7495":"markdown","1e294ee8":"markdown","c12fecb1":"markdown","4cfc5b44":"markdown","9422c3aa":"markdown","0b2fae07":"markdown","dd2f88b0":"markdown","065b27a0":"markdown","35ed36e2":"markdown","350080ce":"markdown","50910ff2":"markdown","c6d16da2":"markdown","56d89b1c":"markdown","e04e0a56":"markdown","1d00e0bd":"markdown","71c6b211":"markdown"},"source":{"a2f78731":"## define configuration\nPATH_TRAIN = '..\/input\/tabular-playground-series-sep-2021\/train.csv'\nPATH_TEST = '..\/input\/tabular-playground-series-sep-2021\/test.csv'\n\nPATH_AUTOGLUON_SUBMISSION = 'submission_autogluon.csv'\nPATH_EVALML_SUBMISSION = 'submission_evalml.csv'\nPATH_FLAML_SUBMISSION = 'submission_flaml.csv'\nPATH_H2OAML_SUBMISSION = 'submission_h2oaml.csv'\nPATH_LAML_SUBMISSION = 'submission_laml.csv'\nPATH_MLJAR_SUBMISSION = 'submission_mljar.csv'\nPATH_TPOT_SUBMISSION = 'submission_tpot.csv'\n\nMAX_MODEL_RUNTIME_MINS = 10\nMAX_MODEL_RUNTIME_SECS = MAX_MODEL_RUNTIME_MINS * 60","a20f814e":"## prepare data\nimport gc\nimport os\nimport shutil\nimport datatable as dt\nfrom pathlib import Path\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ntrain = dt.fread(PATH_TRAIN)\ntest = dt.fread(PATH_TEST)\n\ntarget = train['claim'].to_numpy().ravel()\ntest_ids = test['id']\n\ndel train[:, ['id', 'claim']]\ntest = test[:, train.names]","1f39a1b5":"## install packages\n!python3 -m pip install -q \"mxnet<2.0.0\"\n!python3 -m pip install -q autogluon\n!python3 -m pip install -q -U graphviz\n!python3 -m pip install -q -U scikit-learn","3d8a55bf":"## import packages\nfrom autogluon.tabular import TabularPredictor","53c6a690":"## run model\ntrain['target'] = dt.Frame(target)\n\nmodel_autogluon = TabularPredictor(label='target')\nmodel_autogluon.fit(train_data=train.to_pandas(), excluded_model_types=['KNN'], time_limit=MAX_MODEL_RUNTIME_SECS)\n\ndel train['target']","0a9f1412":"## check leaderboard\nmodel_autogluon.leaderboard()","05416ab5":"## generate predictions\npreds_autogluon = model_autogluon.predict_proba(test.to_pandas())[True]","379e45f0":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=dt.Frame(preds_autogluon))\nsubmission.head()","bc7e515b":"## save submission\nsubmission.to_csv(PATH_AUTOGLUON_SUBMISSION)","7d3db3f8":"## clear memory\nshutil.rmtree('AutogluonModels')\ndel model_autogluon\n\ngc.collect()","636969e4":"## install packages\n!python3 -m pip install -q evalml==0.28.0","1eef2c9d":"## import packages\nfrom evalml.automl import AutoMLSearch","a36e56f5":"## run model\nmodel_evalml = AutoMLSearch(X_train=train.to_pandas(), y_train=target, problem_type='binary', max_time=MAX_MODEL_RUNTIME_SECS)\nmodel_evalml.search()","8cbd176d":"## check leaderboard\nmodel_evalml.rankings","44bf2117":"## generate predictions\npreds_evalml = model_evalml.best_pipeline.predict_proba(test.to_pandas())[True]","0dec9993":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=dt.Frame(preds_evalml))\nsubmission.head()","ca97b048":"## save submission\nsubmission.to_csv(PATH_EVALML_SUBMISSION)","cc1a5782":"## clear memory\nos.remove('evalml_debug.log')\ndel model_evalml\n\ngc.collect()","de300f28":"## install packages\n!python3 -m pip install -q flaml\n!python3 -m pip install -q -U graphviz\n!python3 -m pip install -q -U scikit-learn","24a84b21":"## import packages\nfrom flaml import AutoML","45a60dde":"## run model\nmodel_flaml = AutoML()\nmodel_flaml.fit(X_train=train.to_pandas(), y_train=target, metric='roc_auc', time_budget=MAX_MODEL_RUNTIME_SECS)","e2068a97":"## generate predictions\npreds_flaml = model_flaml.predict_proba(test.to_pandas())[:, 1]","27f1d66f":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=preds_flaml)\nsubmission.head()","94e15725":"## save submission\nsubmission.to_csv(PATH_FLAML_SUBMISSION)","180327b9":"## clear memory\nif Path('catboost_info').exists():\n    shutil.rmtree('catboost_info')\n\nos.remove('flaml.log')\ndel model_flaml\n\ngc.collect()","169dc7a0":"## import packages\nimport h2o\nfrom h2o.automl import H2OAutoML","4cd4f947":"## prepare data\nh2o.init()\n\nh2o_train = h2o.H2OFrame(train.to_pandas())\nh2o_test = h2o.H2OFrame(test.to_pandas())\n\nh2o_train['target'] = h2o.H2OFrame(target).asfactor()","7bf31d21":"## run model\nfeatures = [x for x in h2o_train.columns if x != 'target']\n\nmodel_h2o = H2OAutoML(stopping_metric='AUC', max_runtime_secs=MAX_MODEL_RUNTIME_SECS)\nmodel_h2o.train(x=features, y='target', training_frame=h2o_train)","74a9b9f3":"## check leaderboard\nmodel_h2o.leaderboard","1fa6ce93":"## generate predictions\npreds_h2o = model_h2o.leader.predict(h2o_test).as_data_frame()['True']","6fb5d2e3":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=dt.Frame(preds_h2o))\nsubmission.head()","763ff1b0":"## save submission\nsubmission.to_csv(PATH_H2OAML_SUBMISSION)","f04c3cbc":"## clear memory\nh2o.cluster().shutdown()\ndel model_h2o\n\ngc.collect()","63e81074":"## install packages\n!python3 -m pip install -q lightautoml\n!python3 -m pip install -q -U torch\n!python3 -m pip install -q -U torchvision","d381e285":"## import packages\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML\nfrom lightautoml.tasks import Task","ca27623c":"## run model\ntrain['target'] = dt.Frame(target)\n\nmodel_laml = TabularAutoML(task = Task('binary'), timeout = MAX_MODEL_RUNTIME_SECS)\nmodel_laml.fit_predict(train_data=train.to_pandas(), roles={'target': 'target'})\n\ndel train['target']","d7d8ef64":"## generate predictions\npreds_laml = model_laml.predict(test.to_pandas()).data.ravel()","719269e4":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=preds_laml)\nsubmission.head()","e8deb7af":"## save submission\nsubmission.to_csv(PATH_LAML_SUBMISSION)","9476ba26":"## clear memory\nif Path('catboost_info').exists():\n    shutil.rmtree('catboost_info')\n\ndel model_laml\n\ngc.collect()","36534e80":"## install packages\n!python3 -m pip install -q mljar-supervised\n!python3 -m pip install -q -U graphviz","ec815d1a":"## import packages\nfrom supervised import AutoML","c7aec6b7":"## run model\nmodel_mljar = AutoML(eval_metric='auc', total_time_limit=MAX_MODEL_RUNTIME_SECS, results_path='.\/model_mljar')\nmodel_mljar.fit(X=train.to_pandas(), y=target)","a17286b7":"## check leaderboard\nmodel_mljar.get_leaderboard()","56af0e01":"## generate predictions\npreds_mljar = model_mljar.predict_proba(test.to_pandas())[:, 1]","57db17c5":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=preds_mljar)\nsubmission.head()","89087eec":"## save submission\nsubmission.to_csv(PATH_MLJAR_SUBMISSION)","746ada3d":"## clear memory\nshutil.rmtree('model_mljar')\ndel model_mljar\n\ngc.collect()","07da9252":"## import packages\nfrom tpot import TPOTClassifier","a07f2b40":"## run model\nmodel_tpot = TPOTClassifier(scoring='roc_auc', n_jobs=2, max_time_mins=MAX_MODEL_RUNTIME_MINS)\nmodel_tpot.fit(features=train.to_pandas(), target=target)","a8e29e22":"## check pipeline\nprint(model_tpot.fitted_pipeline_)","75fdf9d9":"## generate predictions\npreds_tpot = model_tpot.predict_proba(test.to_pandas())[:, 1]","07f0d198":"## create submission\nsubmission = dt.Frame(id=test_ids, claim=preds_tpot)\nsubmission.head()","79f16c62":"## save submission\nsubmission.to_csv(PATH_TPOT_SUBMISSION)","ad661db3":"## clear memory\ndel model_tpot\n\ngc.collect()","4253491b":"## TPOT\n<img src='https:\/\/raw.githubusercontent.com\/EpistasisLab\/tpot\/master\/images\/tpot-logo.jpg' width='150px'>\n\n[TPOT](http:\/\/epistasislab.github.io\/tpot) is a Python Automated Machine Learning tool that optimizes machine learning pipelines using genetic programming","924d7495":"Read more in [Documentation of AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html)","1e294ee8":"**Auto**mated **M**achine **L**earning (**AutoML**) has become widely adopted for building, experimenting and productionizing various types of machine learning models across business use-cases.\n\nThere are different open source solutions available and this notebook explores a simple baseline solution for some of them on the [Kaggle TPS (September 2021) competition](https:\/\/www.kaggle.com\/c\/tabular-playground-series-sep-2021).\n\n* [AutoGluon](#AutoGluon)\n* [EvalML](#EvalML)\n* [FLAML](#FLAML)\n* [H2O AutoML](#H2O-AutoML)\n* [LightAutoML](#LightAutoML)\n* [MLJAR](#MLJAR)\n* [TPOT](#TPOT)","c12fecb1":"Read more in [Documentation of MLJAR](https:\/\/supervised.mljar.com)","4cfc5b44":"Read more in [Documentation of TPOT](http:\/\/epistasislab.github.io\/tpot)","9422c3aa":"## FLAML\n<img src='https:\/\/github.com\/microsoft\/FLAML\/raw\/main\/docs\/images\/FLAML.png' width='150px'>\n\n[FLAML](https:\/\/microsoft.github.io\/FLAML) is a fast and light automl library open sourced by [Microsoft](https:\/\/opensource.microsoft.com)","0b2fae07":"## MLJAR\n<img src='https:\/\/mljar.com\/images\/logo\/mljar_circle3.svg' width='150px'>\n\n[MLJAR](https:\/\/mljar.com) is an automated machine learning tool for tabular data","dd2f88b0":"## AutoGluon\n<img src='https:\/\/user-images.githubusercontent.com\/16392542\/77208906-224aa500-6aba-11ea-96bd-e81806074030.png' width='250px'>\n\n[AutoGluon](https:\/\/auto.gluon.ai\/stable\/index.html) is an automl library open sourced by [Amazon](http:\/\/amazon.com\/aws)","065b27a0":"Read more in [Documentation of FLAML](https:\/\/microsoft.github.io\/FLAML)","35ed36e2":"<div align='center'>\n    <h1>AutoML Tutorial<\/h1>\n    <img src='https:\/\/github.com\/vopani\/fortyone\/blob\/main\/images\/automl_banner_530_x_455.png?raw=true'>\n<\/div>","350080ce":"Read more in [Documentation of LightAutoML](https:\/\/lightautoml.readthedocs.io\/en\/latest\/index.html)","50910ff2":"Read more in [Documentation of EvalML](https:\/\/evalml.alteryx.com)","c6d16da2":"Read more in [Documentation of H2O AutoML](https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/automl.html)","56d89b1c":"## Similar Tutorials\nSimilar tutorials on other Kaggle TPS competitions are published here:\n\n* [AutoML Tutorial: TPS (January 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-january-2021)\n* [AutoML Tutorial: TPS (February 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-february-2021)\n* [AutoML Tutorial: TPS (March 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-march-2021)\n* [AutoML Tutorial: TPS (April 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-april-2021)\n* [AutoML Tutorial: TPS (May 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-may-2021)\n* [AutoML Tutorial: TPS (June 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-june-2021)\n* [AutoML Tutorial: TPS (July 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-july-2021)\n* [AutoML Tutorial: TPS (August 2021)](https:\/\/www.kaggle.com\/rohanrao\/automl-tutorial-tps-august-2021)","e04e0a56":"## EvalML\n<img src='https:\/\/evalml.alteryx.com\/en\/stable\/_images\/evalml_horizontal.svg' width='250px'>\n\n[EvalML](https:\/\/evalml.alteryx.com\/en\/stable) is an automl library open sourced by [Alteryx](http:\/\/www.alteryx.com)","1d00e0bd":"## H2O AutoML\n<img src='https:\/\/docs.h2o.ai\/h2o\/latest-stable\/h2o-docs\/_images\/h2o-automl-logo.jpg' width='150px'>\n\n[H2O AutoML](https:\/\/www.h2o.ai\/products\/h2o-automl) is an automated machine learning library open sourced by [H2O.ai](https:\/\/h2o.ai)","71c6b211":"## LightAutoML\n<img src='https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/blob\/master\/imgs\/LightAutoML_logo_small.png?raw=true' width='150px'>\n\n[LightAutoML](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML) is a framework for automatic classification and regression model creation open sourced by [Sberbank](https:\/\/www.sberbank.com) AI Lab."}}