{"cell_type":{"e11b15cd":"code","745c67d9":"code","f1e26259":"code","2e46c3f8":"code","e768c564":"code","38a4ca07":"code","80990a30":"code","cfb304ac":"code","4ca09c1b":"code","68c03545":"code","fee9d5d8":"markdown","83216b10":"markdown","c5b284dd":"markdown","af4ff10b":"markdown","5cda47c2":"markdown"},"source":{"e11b15cd":"import os\nos.listdir(\"..\/input\")","745c67d9":"# Importing Keras libraries and packages\nfrom keras.models import Sequential,load_model,Model\nfrom keras.applications import InceptionV3\nfrom keras.layers import Convolution2D\nfrom keras.layers import MaxPooling2D,GlobalAveragePooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.applications.inception_v3 import preprocess_input\nbase_model = load_model('..\/input\/modelarch\/base_model.h5')\n#base_model =InceptionV3(weights='imagenet', include_top=False)\nCLASSES = 38\nx = base_model.output\nx = GlobalAveragePooling2D(name='avg_pool')(x)\nx = Dropout(0.4)(x)\npredictions = Dense(CLASSES, activation='softmax')(x)\nmodel = Model(inputs=base_model.input, outputs=predictions)","f1e26259":"model.summary()\n#for layer in base_model.layers:\n    #layer.trainable = False","2e46c3f8":"model.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","e768c564":"# image preprocessing\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest')\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nbatch_size =32\nbase_dir = \"..\/input\/new-plant-diseases-dataset\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\"\n\ntrain_generator = train_datagen.flow_from_directory(base_dir+'\/train',\n                                                 target_size=(224, 224),\n                                                 batch_size=batch_size,\n                                                 class_mode='categorical')\n\nvalidation_generator = valid_datagen.flow_from_directory(base_dir+'\/valid',\n                                            target_size=(224, 224),\n                                            batch_size=batch_size,\n                                            class_mode='categorical')","38a4ca07":"class_dict = train_generator.class_indices\nprint(class_dict)","80990a30":"li = list(class_dict.keys())\nprint(li)","cfb304ac":"EPOCHS = 50\nBATCH_SIZE = 128\nSTEPS_PER_EPOCH = 550\nVALIDATION_STEPS = 64\nMODEL_FILE = 'InceptionV3.h5'\nhistory = model.fit_generator(\n    train_generator,\n    epochs=EPOCHS,\n    steps_per_epoch=STEPS_PER_EPOCH,\n    validation_data=validation_generator,\n    validation_steps=VALIDATION_STEPS)\n  \nmodel.save(MODEL_FILE)\n","4ca09c1b":"#plotting training values\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n#accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n#loss plot\nplt.plot(epochs, loss, color='pink', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","68c03545":"# predicting an image\nfrom keras.preprocessing import image\nimport numpy as np\nimage_path = \"..\/input\/new-plant-diseases-dataset\/test\/test\/TomatoHealthy3.JPG\"\nnew_img = image.load_img(image_path, target_size=(224, 224))\nimg = image.img_to_array(new_img)\nimg = np.expand_dims(img, axis=0)\nimg = img\/255\n\nprint(\"Following is our prediction:\")\nprediction = model.predict(img)\n# decode the results into a list of tuples (class, description, probability)\n# (one such list for each sample in the batch)\nd = prediction.flatten()\nj = d.max()\nfor index,item in enumerate(d):\n    if item == j:\n        class_name = li[index]\n\n##Another way\n# img_class = classifier.predict_classes(img)\n# img_prob = classifier.predict_proba(img)\n# print(img_class ,img_prob )\n\n\n#ploting image with predicted class name        \nplt.figure(figsize = (4,4))\nplt.imshow(new_img)\nplt.axis('off')\nplt.title(class_name)\nplt.show()","fee9d5d8":"**Building CNN Based On InceptionV3 Architecture**","83216b10":"**Compiling**","c5b284dd":"**Predicting New Test Image(s)**","af4ff10b":"**Freezing the Layers**","5cda47c2":"**Visualising Training Progress**"}}