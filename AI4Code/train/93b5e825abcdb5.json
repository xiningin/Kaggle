{"cell_type":{"59df83f3":"code","788e878f":"code","7b51af78":"code","dec0e29e":"code","b5e6df9d":"code","5be3c64e":"code","93406cdc":"code","4ea8a415":"code","aceb0487":"code","d0c2ed17":"code","524ba7d2":"code","fda9cd3c":"code","323f38f5":"code","30156e60":"code","59ce853f":"code","b2975eaf":"code","9413813a":"code","1b5d96b8":"code","23642d99":"code","a57258b9":"code","9c232efc":"code","bf0b50f4":"code","2093272f":"markdown","9a1b6105":"markdown","8e3a659d":"markdown","ca655694":"markdown","df129dbe":"markdown","e99e6415":"markdown","4f47e559":"markdown","bae4feae":"markdown","636c59f5":"markdown","44c780d5":"markdown"},"source":{"59df83f3":"!pip install seaborn --upgrade","788e878f":"import os\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.callbacks import EarlyStopping","7b51af78":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","dec0e29e":"df.info()","b5e6df9d":"plt.figure(figsize=(10,6))\n\nheatmap = sns.heatmap(df.corr(), vmin=-1,vmax=1, annot=True, cmap='viridis')\n\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12)\nplt.show()","5be3c64e":"fig, ax=plt.subplots(7,1,figsize=(10,45))\n\nsns.histplot(ax=ax[0],data=df, x='Age',hue='Outcome',kde=True)\nsns.histplot(ax=ax[1],data=df, x='Glucose',hue='Outcome',kde=True)\nsns.histplot(ax=ax[2],data=df, x='Insulin',hue='Outcome',kde=True)\nsns.histplot(ax=ax[3],data=df, x='BMI',hue='Outcome',kde=True)\nsns.histplot(ax=ax[4],data=df, x='BloodPressure',hue='Outcome',kde=True)\nsns.histplot(ax=ax[5],data=df, x='SkinThickness',hue='Outcome',kde=True)\nsns.histplot(ax=ax[6],data=df, x='DiabetesPedigreeFunction',hue='Outcome',kde=True)\n\nplt.show()","93406cdc":"X_tr, X_ts, Y_tr, Y_ts = train_test_split(df.drop(columns='Outcome'), df['Outcome'],\n                                          test_size=0.15, shuffle=True,random_state=42,stratify=df['Outcome'])\n\nscaler1 = MinMaxScaler()\nscaler2 = StandardScaler()\nX_tr[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.fit_transform(X_tr[['Age','Insulin','DiabetesPedigreeFunction']])\nX_ts[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.transform(X_ts[['Age','Insulin','DiabetesPedigreeFunction']])\n\nX_tr[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.fit_transform(X_tr[['Glucose','BMI','BloodPressure','SkinThickness']])\nX_ts[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.transform(X_ts[['Glucose','BMI','BloodPressure','SkinThickness']])\n","4ea8a415":"model = models.Sequential()\n\nmodel.add(layers.Dense(20, activation = 'relu', input_shape=(X_tr.shape[1],)))\nmodel.add(layers.Dense(1, activation = 'sigmoid'))","aceb0487":"model.compile(loss='binary_crossentropy',\n             optimizer='sgd',\n             metrics=['accuracy'])","d0c2ed17":"es = EarlyStopping(monitor='val_loss',mode='min', patience=10, verbose=1)\n\nhistory= model.fit(X_tr,Y_tr,\n                 epochs=75,\n                 batch_size=15,\n                 validation_data=(X_ts,Y_ts),\n                 callbacks=[es])","524ba7d2":"fig, ax=plt.subplots(2,1,figsize=(12,10))\nfig.suptitle('Train evaluation')\n\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['accuracy'])\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['val_accuracy'])\n\nax[0].legend(['Train','Validation'])\nax[0].set_title('Accuracy')\n\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['loss'])\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['val_loss'])\n\nax[1].legend(['Train','Validation'])\nax[1].set_title('Loss')\n\n\nplt.show()","fda9cd3c":"Y_pred = model.predict(X_ts)\n\nerror = []\ngrid = np.linspace(min(Y_pred)[0],max(Y_pred)[0],10000)\n\n\nfor i in grid:\n    y_pred_i = (Y_pred>i).astype('int32')\n    fails = confusion_matrix(Y_ts,y_pred_i)[0,1]+confusion_matrix(Y_ts,y_pred_i)[1,0]\n    error_i = fails\/len(Y_ts)\n    error.append(error_i)\n\ni_error = list(zip(grid,error))\ni_min = i_error[np.argmin(error)][0]\n\n\nplt.figure(figsize=(12,8))\ngriderror = sns.lineplot(x=grid, y=error)\ngriderror.set_title('Error by cutoff')\ngriderror.set_xlabel('cutoff')\ngriderror.set_ylabel('error')\nplt.scatter(x=i_min,y=min(error), s=300, color='r', marker='+', alpha=0.3)\nplt.show()\n    \n\nY_pred=(Y_pred>i_min).astype('int32')\nprint('Y_pred > {:.4f}, means positive'.format(i_min))\n\nconf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='dark')\nplt.figure(figsize=(12,8))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":20},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap\\n\u00bfIs diabetic?', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(['NO','YES'], fontdict={'fontsize':12})\nheatmap.set_yticklabels(['NO','YES'], fontdict={'fontsize':12})\nplt.show()\n\n\nprint('-Acuracy achieved: {:.2f}%\\n-Accuracy by model was: {:.2f}%\\n-Accuracy by validation was: {:.2f}%'.\n      format((1-min(error))*100,(history.history['accuracy'][-1])*100,(history.history['val_accuracy'][-1])*100))","323f38f5":"i=[]\ni = list(df[df.BloodPressure.isin([0])].index)\ni.extend(list(df[df.BMI.isin([0])].index))\ni.extend(list(df[df.Glucose.isin([0])].index))\n\ndf1 = df.drop(index=i)\n\n\nX_tr, X_ts, Y_tr, Y_ts = train_test_split(df1.drop(columns=['Outcome']), df1['Outcome'],\n                                          test_size=0.15, shuffle=True,random_state=42,stratify=df1['Outcome'])\n\nscaler1 = MinMaxScaler()\nscaler2 = StandardScaler()\nX_tr[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.fit_transform(X_tr[['Age','Insulin','DiabetesPedigreeFunction']])\nX_ts[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.transform(X_ts[['Age','Insulin','DiabetesPedigreeFunction']])\n\nX_tr[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.fit_transform(X_tr[['Glucose','BMI','BloodPressure','SkinThickness']])\nX_ts[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.transform(X_ts[['Glucose','BMI','BloodPressure','SkinThickness']])\n","30156e60":"model = models.Sequential()\n\nmodel.add(layers.Dense(20, activation = 'relu', input_shape=(X_tr.shape[1],)))\nmodel.add(layers.Dense(1, activation = 'sigmoid'))","59ce853f":"model.compile(loss='binary_crossentropy',\n             optimizer='sgd',\n             metrics=['accuracy'])","b2975eaf":"es = EarlyStopping(monitor='val_loss',mode='min', patience=10, verbose=1)\n\nhistory= model.fit(X_tr,Y_tr,\n                 epochs=75,\n                 batch_size=15,\n                 validation_data=(X_ts,Y_ts),\n                 callbacks=[es])","9413813a":"fig, ax=plt.subplots(2,1,figsize=(12,10))\nfig.suptitle('Train evaluation')\n\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['accuracy'])\nsns.lineplot(ax= ax[0],x=np.arange(0,len(history.history['accuracy'])),y=history.history['val_accuracy'])\n\nax[0].legend(['Train','Validation'])\nax[0].set_title('Accuracy')\n\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['loss'])\nsns.lineplot(ax= ax[1],x=np.arange(0,len(history.history['loss'])),y=history.history['val_loss'])\n\nax[1].legend(['Train','Validation'])\nax[1].set_title('Loss')\n\n\nplt.show()","1b5d96b8":"Y_pred = model.predict(X_ts)\n\nerror = []\ngrid = np.linspace(min(Y_pred)[0],max(Y_pred)[0],10000)\n\n\nfor i in grid:\n    y_pred_i = (Y_pred>i).astype('int32')\n    fails = confusion_matrix(Y_ts,y_pred_i)[0,1]+confusion_matrix(Y_ts,y_pred_i)[1,0]\n    error_i = fails\/len(Y_ts)\n    error.append(error_i)\n\ni_error = list(zip(grid,error))\ni_min = i_error[np.argmin(error)][0]\n\n\nplt.figure(figsize=(12,8))\ngriderror = sns.lineplot(x=grid, y=error)\ngriderror.set_title('Error by cutoff')\ngriderror.set_xlabel('cutoff')\ngriderror.set_ylabel('error')\nplt.scatter(x=i_min,y=min(error), s=300, color='r', marker='+', alpha=0.3)\nplt.show()\n    \n\nY_pred=(Y_pred>i_min).astype('int32')\nprint('Y_pred > {:.4f}, means positive'.format(i_min))\n\nconf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='dark')\nplt.figure(figsize=(12,8))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":20},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap\\n\u00bfIs diabetic?', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(['NO','YES'], fontdict={'fontsize':12})\nheatmap.set_yticklabels(['NO','YES'], fontdict={'fontsize':12})\nplt.show()\n\n\nprint('-Acuracy achieved: {:.2f}%\\n-Accuracy by model was: {:.2f}%\\n-Accuracy by validation was: {:.2f}%'.\n      format((1-min(error))*100,(history.history['accuracy'][-1])*100,(history.history['val_accuracy'][-1])*100))","23642d99":"X_tr, X_ts, Y_tr, Y_ts = train_test_split(df.drop(columns='Outcome'), df['Outcome'],\n                                          test_size=0.15, shuffle=True,random_state=42,stratify=df['Outcome'])\n\nscaler1 = MinMaxScaler()\nscaler2 = StandardScaler()\nX_tr[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.fit_transform(X_tr[['Age','Insulin','DiabetesPedigreeFunction']])\nX_ts[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.transform(X_ts[['Age','Insulin','DiabetesPedigreeFunction']])\n\nX_tr[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.fit_transform(X_tr[['Glucose','BMI','BloodPressure','SkinThickness']])\nX_ts[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.transform(X_ts[['Glucose','BMI','BloodPressure','SkinThickness']])","a57258b9":"RFC = RandomForestClassifier(n_jobs=2,random_state=42)\n\nRFC.fit(X_tr,Y_tr)\nY_pred = RFC.predict(X_ts)\n\nconf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='dark')\nplt.figure(figsize=(12,8))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":20},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap\\nRandom Forest Classifier\\n\u00bfIs diabetic?', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(['NO','YES'], fontdict={'fontsize':12})\nheatmap.set_yticklabels(['NO','YES'], fontdict={'fontsize':12})\nplt.show()\n\nprint('Accuracy of Random Forest Classifier is: {:.3f}%'.format(accuracy_score(Y_ts,Y_pred)*100))","9c232efc":"X_tr, X_ts, Y_tr, Y_ts = train_test_split(df.drop(columns='Outcome'), df['Outcome'],\n                                          test_size=0.15, shuffle=True,random_state=42,stratify=df['Outcome'])\n\nscaler1 = MinMaxScaler()\nscaler2 = StandardScaler()\nX_tr[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.fit_transform(X_tr[['Age','Insulin','DiabetesPedigreeFunction']])\nX_ts[['Age','Insulin','DiabetesPedigreeFunction']] = scaler1.transform(X_ts[['Age','Insulin','DiabetesPedigreeFunction']])\n\nX_tr[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.fit_transform(X_tr[['Glucose','BMI','BloodPressure','SkinThickness']])\nX_ts[['Glucose','BMI','BloodPressure','SkinThickness']] = scaler2.transform(X_ts[['Glucose','BMI','BloodPressure','SkinThickness']])","bf0b50f4":"GBC = GradientBoostingClassifier(random_state=42)\n\nGBC.fit(X_tr,Y_tr)\nY_pred = GBC.predict(X_ts)\n\nconf_mat = confusion_matrix(Y_ts,Y_pred)\nsns.set_style(style='dark')\nplt.figure(figsize=(12,8))\nheatmap = sns.heatmap(conf_mat,vmin=np.min(conf_mat.all()), vmax=np.max(conf_mat), annot=True,fmt='d', annot_kws={\"fontsize\":20},cmap='Spectral')\nheatmap.set_title('Confusion Matrix Heatmap\\nGradien Boosting Classifier\\n\u00bfIs diabetic?', fontdict={'fontsize':15}, pad=12)\nheatmap.set_xlabel('Predicted',fontdict={'fontsize':14})\nheatmap.set_ylabel('Actual',fontdict={'fontsize':14})\nheatmap.set_xticklabels(['NO','YES'], fontdict={'fontsize':12})\nheatmap.set_yticklabels(['NO','YES'], fontdict={'fontsize':12})\nplt.show()\n\nprint('Accuracy of Gradient Boosting Classifier is: {:.3f}%'.format(accuracy_score(Y_ts,Y_pred)*100))","2093272f":"## Gradient Boosting Classifier Model","9a1b6105":"## Data","8e3a659d":"## Random Forest Classifier Model","ca655694":"### Evaluation","df129dbe":"## Model\n\n### Train Test Split","e99e6415":"### Evaluation","4f47e559":"# PIMA Indians Diabetes prediction","bae4feae":"Future Scaling:\n* Normalize for :\n    * Age\n    * Insulin\n    * Diabetes Pedigree Function\n* Standarize for :\n    * Glucose\n    * BMI\n    * Blood Pressure\n    * Skin Thickness","636c59f5":"### Building and fitting ","44c780d5":"# Model 2\n\nSame process dropping zero values for columns:\n* Blood Pressure\n* BMI\n* Glucose"}}