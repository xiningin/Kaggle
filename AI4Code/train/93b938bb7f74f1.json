{"cell_type":{"1c1c6bd3":"code","c5309975":"code","4e66e6ae":"code","a9c617c5":"code","03f464c6":"code","5ed8f502":"code","85c7ec72":"code","b9032fa1":"code","70dd4de0":"code","322762f7":"markdown","f6cfc9eb":"markdown","f924112f":"markdown"},"source":{"1c1c6bd3":"!pip install textstat\n\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport textstat\n\nfrom wordcloud import WordCloud,STOPWORDS\nfrom matplotlib.lines import Line2D\n\npalette = [\"#9bf6ff\",\"#ffadad\"]\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})","c5309975":"validation_df = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")\nvalidation_df.head()","4e66e6ae":"less_toxic = pd.DataFrame()\nless_toxic['text'] = validation_df['less_toxic'].tolist()\nless_toxic['label'] = \"Less Toxic\"\n\nmore_toxic = pd.DataFrame()\nmore_toxic['text'] = validation_df['more_toxic'].tolist()\nmore_toxic['label'] = \"More Toxic\"\n\ntoxicity_text = pd.concat([less_toxic, more_toxic], ignore_index=True)\ntoxicity_text.head()","a9c617c5":"comments_df = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")\ncomments_df.head()","03f464c6":"submission_csv = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/sample_submission.csv\")\nsubmission_csv.head()","5ed8f502":"# color function for the wordcloud\ndef color_wc(word=None,font_size=None,position=None, orientation=None,font_path=None, random_state=None):\n    h = int(360.0 * 255.0 \/ 255.0)\n    s = int(190.0 * 255.0 \/ 255.0)\n    l = int(100.0 * float(random_state.randint(40, 80)) \/ 255.0)\n    return \"hsl({}, {}%, {}%)\".format(h, s, l)\n\n\nfig = plt.gcf()\nfig.set_size_inches(16, 8)\nwc = WordCloud(stopwords=STOPWORDS,background_color=\"white\", contour_width=2, contour_color='orange',width=1500, height=750,color_func=color_wc ,max_words=150, max_font_size=256,random_state=42)\nwc.generate(' '.join(less_toxic['text']))\nfig = plt.imshow(wc, interpolation=\"bilinear\")\nfig = plt.axis('off')","85c7ec72":"fig = plt.gcf()\nfig.set_size_inches(16, 8)\nwc = WordCloud(stopwords=STOPWORDS,background_color=\"white\", contour_width=2, contour_color='orange',width=1500, height=750,color_func=color_wc,max_words=150, max_font_size=256,random_state=42)\nwc.generate(' '.join(more_toxic['text']))\nfig = plt.imshow(wc, interpolation=\"bilinear\")\nfig = plt.axis('off')","b9032fa1":"def avg_word_len(df):\n    df = df.str.split().apply(lambda x : [len(i) for i in x]).map(lambda x: np.mean(x))\n    return df\n\ndef comments_properties(df):\n    text_props = pd.DataFrame()\n    text_len = df['text'].str.len()\n    avg_text = avg_word_len(df['text'])\n    lexicon_count = []\n    sentence_count = []\n\n    for i in range(len(less_toxic)):\n        lc = textstat.lexicon_count(df['text'][i])\n        sc = textstat.sentence_count(df['text'][i])\n        lexicon_count.append(lc)\n        sentence_count.append(sc)\n    \n    text_props['text_len'] = text_len\n    text_props['lexicon_count'] = lexicon_count\n    text_props['avg_text'] = avg_text\n    text_props['sentence_count'] = sentence_count\n    \n    return text_props\n\ntext_props_less = comments_properties(less_toxic)\ntext_props_more = comments_properties(more_toxic)","70dd4de0":"custom_lines = [Line2D([0], [0], color=palette[0], lw=4),\n                Line2D([0], [0], color=palette[1], lw=4)]\n\nplt.figure(figsize=(20, 1))\nlegend = plt.legend(custom_lines, ['Less Toxic', 'More Toxic'],loc=\"center\")\nplt.setp(legend.texts, family='Serif')\nplt.axis('off')\nplt.show()\n\ndef plot_distribution(col, title):\n    plt.figure(figsize=(16,8))\n    sns.kdeplot(data=text_props_less, x=col, color=palette[0],label=\"Less Toxic\")\n    sns.kdeplot(data=text_props_more, x=col, color=palette[1],label=\"More Toxic\")\n    plt.title(title,font=\"Serif\", size = 20)\n    plt.show()\n\nplot_distribution(\"text_len\", \"Character Count Distribution\")\nplot_distribution(\"lexicon_count\", \"Word Count Distribution\")\nplot_distribution(\"avg_text\", \"Average Word Length Distribution\")\nplot_distribution(\"sentence_count\", \"Sentence Count Distribution\")","322762f7":"# More Toxic Comments ","f6cfc9eb":"# Less Toxic Comments ","f924112f":"<img src=\"https:\/\/i.imgur.com\/Fs8LtGg.png\">"}}