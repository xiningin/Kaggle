{"cell_type":{"9b047b34":"code","e87a9c1a":"code","5f614885":"code","534b3731":"code","f75f0ca5":"code","2dc086e0":"code","25ba34b1":"code","694e1838":"code","18a07d21":"code","bbd38091":"code","5da62c8d":"code","f383c479":"code","149b8d73":"code","0518132a":"code","d00a4fc6":"code","0e56523e":"code","70d2dcc2":"code","40dce463":"code","19c06244":"code","4c7cd7c9":"code","42a6a60c":"code","0b6373f5":"code","1e9436f4":"code","f7e7d412":"code","6d021f6d":"code","5194fafa":"code","05671985":"code","36f58819":"code","1b2a3d11":"code","6eb650f4":"code","42da391a":"code","0b043c43":"code","74f1879e":"code","6ebba003":"code","7b2c4661":"code","21d786a8":"code","534b766f":"code","3428f23d":"code","18ce2ee4":"code","59ac6d95":"code","0b49d626":"code","8df1a63b":"code","31f5e37e":"code","2b29c9f6":"code","56585645":"code","c2dfa94b":"code","a1c3e091":"code","d6aaa9b9":"code","b929c088":"code","abedf247":"code","93b479ae":"code","42876d07":"code","5b1096c6":"code","a32cde7b":"code","24c2ad19":"code","d496d479":"code","f4648ec6":"code","548df0dc":"code","9a1543da":"code","9e8f99d2":"code","e39cfbe6":"code","d91dd37c":"code","b69ffac5":"code","43ed5acc":"code","32f5d054":"code","4b3d75ba":"code","b9ca3f89":"code","43b97910":"code","854645d6":"code","b05b9d77":"code","caf26a88":"code","998c5fbc":"code","26a8ad75":"code","b0c3003a":"code","c00e5298":"code","1f6b1197":"code","0741ac21":"code","d45dd47a":"code","4e659e8e":"code","77f88397":"code","16f2367d":"code","da767685":"code","09ca5fce":"code","38d78412":"code","f8166e55":"code","93e6538c":"code","b7f81f26":"code","e2f67714":"code","a0d4628f":"code","2b7fce0d":"code","a0d2d5da":"code","0d4a2798":"code","3d569832":"code","8e1664a3":"code","895292d5":"code","0c604cc7":"code","0ea1f5c1":"code","af221265":"code","db91d30f":"code","3439ab13":"code","be7a15d1":"code","36f93159":"code","4ad42c66":"code","f6bdeb12":"code","5769dcdb":"code","6bfb310c":"code","5c400c5a":"code","a40f4c86":"code","7a07f4a9":"code","cd6342b1":"code","c454b96b":"code","db261d2e":"code","97e47cec":"code","4bc82b5e":"code","6db2692f":"code","52751620":"code","8e2ef65a":"code","5338c814":"code","fd3bcae0":"code","4cbb93bb":"code","70c4556e":"code","04e86bd4":"code","91fbbd4b":"code","8354a0bf":"code","714bec13":"code","26e2fa49":"code","d323ebf9":"code","9b436f6d":"code","6e27a04d":"code","063d9c5e":"code","8047c3e4":"code","f8ee2cbe":"code","5c2e98c8":"code","7ebda6bf":"code","9b0b9bcb":"code","efdc68c4":"markdown","adb52889":"markdown","495c9b35":"markdown","410404f5":"markdown","77e5c9a2":"markdown","3d3cc168":"markdown","0bb29947":"markdown","7170c33d":"markdown","29f21b87":"markdown","e0f96b69":"markdown","251c8579":"markdown","4113ec42":"markdown","427d1f72":"markdown","735b223c":"markdown","8cf695e5":"markdown","794a5019":"markdown","24074fa8":"markdown","f7e2ab24":"markdown","7bc6663e":"markdown","56a5c01c":"markdown","ebe6cbb0":"markdown","602be1fa":"markdown","ab10f7d0":"markdown","b2da6979":"markdown","fc3d1682":"markdown","2e43ba3e":"markdown","1590e389":"markdown","d8bc2634":"markdown","f79b7b13":"markdown","b6a84f01":"markdown","ed6e6728":"markdown","2ef2fb53":"markdown","ddfda986":"markdown","7ebe9249":"markdown","28e09fe6":"markdown","15ec9c3d":"markdown","754534bf":"markdown","73831563":"markdown","d169851f":"markdown","9e8122f4":"markdown","cc3b54de":"markdown","827c71bd":"markdown","a689d9f4":"markdown","a6084d8e":"markdown","f205be59":"markdown","4e3fbb95":"markdown","da1963cd":"markdown","0b695867":"markdown","3a0d2be3":"markdown","991eb2f0":"markdown","aefdd97f":"markdown","253bbd6c":"markdown","3074fe19":"markdown","13a1bc22":"markdown","56d37040":"markdown","90a95697":"markdown","ec391f12":"markdown","489f17e3":"markdown","e72f1496":"markdown","972de1cd":"markdown","1c3e4d9e":"markdown","622764cd":"markdown","86158398":"markdown","172b2907":"markdown"},"source":{"9b047b34":"import sys\nimport os\nimport ast\nimport time\nimport datetime\nimport warnings\nimport eli5\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom PIL import Image\nfrom numpy.linalg import norm\nfrom collections import Counter\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\n\n%matplotlib inline\nwarnings.filterwarnings('ignore')\npd.set_option('max_rows', 10)\nsns.set(style='white', context='notebook', palette='deep')","e87a9c1a":"train_data = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv', )\ntest_data = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv', )\n\ntrain_data.shape, test_data.shape","5f614885":"train_data.head()","534b3731":"train_data.select_dtypes(include=['int64','float64']).columns.values","f75f0ca5":"# Summary statistics on numerical features, excluding the id\ntrain_data.drop(labels=['id'], axis=1).describe()","2dc086e0":"# Let's visualize the distributions of numerical features\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10))\nsns.set(color_codes=True, font_scale=1.3)\n\ng = sns.distplot(train_data['budget'], color='blue', ax=axes[0,0])\nskewness = train_data['budget'].skew()\naxes[0,0].legend([\"Skew : {:.2f}\".format(skewness)])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(train_data['popularity'], color='red', ax=axes[0,1])\nskewness = train_data['popularity'].skew()\naxes[0,1].legend([\"Skew : {:.2f}\".format(skewness)])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(train_data['runtime'], color='green', ax=axes[1,0])\nskewness = train_data['runtime'].skew()\naxes[1,0].legend([\"Skew : {:.2f}\".format(skewness)])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(train_data['revenue'], color='orange', ax=axes[1,1])\nskewness = train_data['revenue'].skew()\naxes[1,1].legend([\"Skew : {:.2f}\".format(skewness)])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","25ba34b1":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\ncolors = sns.color_palette(n_colors=2)\nsns.set(color_codes=True)\n\nsns.regplot(x=train_data['budget'], y=train_data['revenue'], ax=axes[0], color=colors[0], scatter_kws={'alpha': 0.5})\ncorrelation = np.corrcoef(train_data['budget'], train_data['revenue'])[0,1]\naxes[0].set_title(\"Correlation {:.2f}\".format(correlation))\n\nsns.regplot(x=train_data['popularity'], y=train_data['revenue'], ax=axes[1], color=colors[1], scatter_kws={'alpha': 0.5})\ncorrelation = np.corrcoef(train_data['popularity'], train_data['revenue'])[0,1]\naxes[1].set_title(\"Correlation {:.2f}\".format(correlation))","694e1838":"fig, ax = plt.subplots(figsize=(7,7))\ncolors = sns.color_palette(n_colors=1)\nsns.set(color_codes=True)\n\nsns.regplot(x=train_data['runtime'], y=train_data['revenue'], color='g', scatter_kws={'alpha': 0.5})\ncorrelation = np.corrcoef(train_data['runtime'], train_data['revenue'])[0,1]\nax.set_title(\"Correlation {:.2f}\".format(correlation))","18a07d21":"features = ['budget', 'popularity', 'runtime', 'revenue']\nsns.pairplot(train_data[features], kind='reg', diag_kind='kde', plot_kws={'scatter_kws': {'alpha': 0.2}}, size=3)\nplt.show()","bbd38091":"# Find categorical features\ntrain_data.select_dtypes(include=['object']).columns.values","5da62c8d":"print(\"There are %i categorical features in total.\" % len(train_data.select_dtypes(include=['object']).columns.values))","f383c479":"# belongs_to_collection\npercentage_missing = train_data['belongs_to_collection'].isnull().sum() \/ train_data.shape[0] * 100\nprint('%.2f percent of belongs_to_collection values are missing.' % percentage_missing)","149b8d73":"# release_date\ntrain_data['release_date']","0518132a":"# Status\nfig = plt.figure(figsize=(9,6))\nsns.set(font_scale=1.5)\nsns.boxenplot(train_data['status'], train_data['revenue'])\nplt.show()","d00a4fc6":"train_data.loc[train_data['status']=='Rumored', ['original_title','overview','release_date','revenue']]","0e56523e":"train_size = len(train_data)\nall_data = pd.concat(objs=[train_data, test_data], axis=0).reset_index(drop=True).drop(labels=['id'], axis=1)\nall_data.info()","70d2dcc2":"all_data = all_data.fillna(np.nan)\nmissing_features = all_data.columns[all_data.isnull().any()]\nmissing_features.values","40dce463":"all_data[missing_features].isnull().sum()","19c06244":"# We extract collection name like this:\nast.literal_eval(all_data['belongs_to_collection'][1])[0]['name']","4c7cd7c9":"all_data['collection_name'] = all_data['belongs_to_collection'].apply(lambda x: 'None' if pd.isnull(x) else ast.literal_eval(x)[0]['name'])\nall_data['collection_name']","42a6a60c":"all_data['collection_name'].describe()","0b6373f5":"all_data['collection_name'].value_counts().head(10)","1e9436f4":"all_data['in_collection'] = all_data['belongs_to_collection'].apply(lambda x: 'No' if pd.isnull(x) else 'Yes')","f7e7d412":"fig = plt.figure(figsize=(9,6))\nsns.set(font_scale=1.5)\nsns.boxenplot(all_data['in_collection'], all_data['revenue'])\nplt.show()","6d021f6d":"# Extract genres\ndata_genres = all_data['genres'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).map(lambda x: ','.join(map(str, x)))\ndata_genres","5194fafa":"data_genres = data_genres.str.get_dummies(sep=',')\ndata_genres","05671985":"number_genres = data_genres.sum(axis=1)","36f58819":"genres_sorted = data_genres.sum(axis=0).sort_values(ascending=False)","1b2a3d11":"sns.set(font_scale=1.2)\nfig, ax = plt.subplots(figsize=(20, 5))\nsns.barplot(genres_sorted.index, genres_sorted.values)\nplt.xticks(rotation=45)\nplt.show()","6eb650f4":"plt.figure(figsize = (10, 6))\ntemp_genres = all_data['genres'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y))))\ntext = ' '.join([val for sublist in temp_genres for val in sublist])\nwd = WordCloud(max_font_size=1000, background_color='white', collocations=False, width=1600, height=900).generate(text)\n\n# Display the wordcloud\nplt.imshow(wd, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","42da391a":"all_data = pd.concat([all_data, data_genres], axis=1, sort=False)\nall_data['number_genres'] = number_genres","0b043c43":"all_data['production_companies'][0]","74f1879e":"data_companies = all_data['production_companies'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).map(lambda x: ','.join(map(str, x)))\ndata_companies","6ebba003":"data_companies[7393]","7b2c4661":"data_companies = data_companies.str.get_dummies(sep=',')","21d786a8":"number_companies = data_companies.sum(axis=1)\nnumber_companies","534b766f":"data_companies.sum(axis=0).sort_values(ascending=False).head(15)","3428f23d":"data_companies = data_companies[data_companies.sum(axis=0).sort_values(ascending=False).head(15).index.values]","18ce2ee4":"all_data = pd.concat([all_data, data_companies], axis=1, sort=False)\nall_data['number_companies'] = number_companies","59ac6d95":"all_data['production_countries'][6]","0b49d626":"data_countries = all_data['production_countries'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).map(lambda x: ','.join(map(str, x)))\ndata_countries","8df1a63b":"data_countries = data_countries.str.get_dummies(sep=',')","31f5e37e":"data_countries.sum(axis=0).sort_values(ascending=False).head(16)","2b29c9f6":"data_countries = data_countries[data_countries.sum(axis=0).sort_values(ascending=False).head(16).index.values]\ndata_countries","56585645":"all_data = pd.concat([all_data, data_countries], axis=1, sort=False)","c2dfa94b":"data_language = all_data['spoken_languages'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).map(lambda x: ','.join(map(str, x)))\ndata_language","a1c3e091":"data_language = data_language.str.get_dummies(sep=',')","d6aaa9b9":"data_language.sum(axis=0).sort_values(ascending=False).head(20)","b929c088":"data_language = data_language[data_language.sum(axis=0).sort_values(ascending=False).head(20).index.values]\ndata_language","abedf247":"all_data = pd.concat([all_data, data_language], axis=1, sort=False)","93b479ae":"Counter(all_data['status'])","42876d07":"all_data.loc[all_data['status'].isnull(), 'status'] = 'Released'","5b1096c6":"Counter(all_data['status'])","a32cde7b":"all_data['tagline'] = all_data['tagline'].apply(lambda x: 'no tagline' if pd.isnull(x) else 'has tagline')\nall_data['tagline']","24c2ad19":"sns.set(font_scale=1.2)\nfig, ax = plt.subplots(figsize=(12, 6))\nsns.boxenplot(all_data['tagline'], all_data['revenue'])\nplt.show()","d496d479":"all_data['Keywords'][100]","f4648ec6":"data_keywords = all_data['Keywords'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).map(lambda x: ','.join(map(str, x)))\ndata_keywords","548df0dc":"# Number of keywords\ndata_keywords[0]","9a1543da":"data_keywords = data_keywords.str.get_dummies(sep=',')\ndata_keywords","9e8f99d2":"number_keywords = data_keywords.sum(axis=1)","e39cfbe6":"sns.set(font_scale=1.5)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.regplot(x=number_keywords[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='orange')\ncorrelation = np.corrcoef(number_keywords[:3000], train_data['revenue'])[0,1]\nax.set_xlabel(\"number of keywords\")\nax.set_title(\"Correlation {:.2f}\".format(correlation))\nplt.show()","d91dd37c":"data_keywords.sum(axis=0).sort_values(ascending=False).head(30)","b69ffac5":"data_keywords = data_keywords[data_keywords.sum(axis=0).sort_values(ascending=False).head(30).index.values]\ndata_keywords","43ed5acc":"all_data = pd.concat([all_data, data_keywords], axis=1, sort=False)\nall_data['number_keywords'] = number_keywords","32f5d054":"all_data['homepage'] = all_data['homepage'].apply(lambda x: 'no homepage' if pd.isnull(x) else 'has homepage')","4b3d75ba":"sns.set(font_scale=1.2)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.distplot(all_data[:3000].loc[all_data['homepage']=='has homepage', 'revenue'])\nsns.distplot(all_data[:3000].loc[all_data['homepage']=='no homepage', 'revenue'])\nplt.legend(['has hompage', 'no homepage'])\nplt.xticks(rotation=45)\nplt.show()","b9ca3f89":"sns.set(font_scale=1.5)\nfig, ax = plt.subplots(figsize=(20, 5))\nsns.countplot(all_data['original_language'])\nplt.show()","43b97910":"all_data['in_English'] = all_data['original_language'].apply(lambda x: 'Yes' if x=='en' else 'No')","854645d6":"sns.set(font_scale=1.2)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.distplot(all_data['runtime'])\nplt.xticks(rotation=45)\nplt.show()","b05b9d77":"all_data.loc[all_data['runtime'].isnull(), 'runtime'] = all_data['runtime'].mode().values[0]","caf26a88":"all_data['cast'][4]","998c5fbc":"cast_size = all_data['cast'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).apply(lambda x: len(x))\ncast_size","26a8ad75":"# Cast gender\ncast_gender = all_data['cast'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['gender'], eval(y))))\ncast_gender","b0c3003a":"# Count each gender\ncast_female_count = cast_gender.apply(lambda x: (pd.Series(x)==1).sum())\ncast_male_count = cast_gender.apply(lambda x: (pd.Series(x)==2).sum())","c00e5298":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1.5)\n\nsns.regplot(x=cast_female_count[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='pink', ax=axes[0])\ncorrelation = np.corrcoef(cast_female_count[:3000], train_data['revenue'])[0,1]\naxes[0].set_xlabel(\"female counts\")\naxes[0].set_title(\"Correlation {:.2f}\".format(correlation))\n\nsns.regplot(x=cast_male_count[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='blue', ax=axes[1])\ncorrelation = np.corrcoef(cast_male_count[:3000], train_data['revenue'])[0,1]\naxes[1].set_xlabel(\"male counts\")\naxes[1].set_title(\"Correlation {:.2f}\".format(correlation))\n\nplt.tight_layout()\nplt.show()","1f6b1197":"sns.set(font_scale=1.5)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.regplot(x=cast_size[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='green')\ncorrelation = np.corrcoef(cast_size[:3000], train_data['revenue'])[0,1]\nax.set_title(\"Correlation {:.2f}\".format(correlation))\nplt.show()","0741ac21":"all_data['cast_size'] = cast_size\nall_data['cast_male_count'] = cast_male_count\nall_data['cast_female_count'] = cast_female_count","d45dd47a":"crew_size = all_data['crew'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['name'], eval(y)))).apply(lambda x: len(x))\ncrew_size","4e659e8e":"# Crew gender\ncrew_gender = all_data['crew'].apply(lambda y: {} if pd.isnull(y) else sorted(map(lambda x: x['gender'], eval(y))))\ncrew_gender","77f88397":"# Count each gender\ncrew_female_count = crew_gender.apply(lambda x: (pd.Series(x)==1).sum())\ncrew_male_count = crew_gender.apply(lambda x: (pd.Series(x)==2).sum())","16f2367d":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1.5)\n\nsns.regplot(x=crew_female_count[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='pink', ax=axes[0])\ncorrelation = np.corrcoef(crew_female_count[:3000], train_data['revenue'])[0,1]\naxes[0].set_xlabel(\"female counts\")\naxes[0].set_title(\"Correlation {:.2f}\".format(correlation))\n\nsns.regplot(x=crew_male_count[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='blue', ax=axes[1])\ncorrelation = np.corrcoef(crew_male_count[:3000], train_data['revenue'])[0,1]\naxes[1].set_xlabel(\"male counts\")\naxes[1].set_title(\"Correlation {:.2f}\".format(correlation))\n\nplt.tight_layout()\nplt.show()","da767685":"sns.set(font_scale=1.5)\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.regplot(x=crew_size[:3000], y=train_data['revenue'], scatter_kws={'alpha':0.5}, color='orange')\ncorrelation = np.corrcoef(crew_size[:3000], train_data['revenue'])[0,1]\nax.set_title(\"Correlation {:.2f}\".format(correlation))\nplt.show()","09ca5fce":"all_data['crew_size'] = crew_size\nall_data['crew_male_count'] = crew_male_count\nall_data['crew_female_count'] = crew_female_count","38d78412":"all_data.loc[all_data['release_date'].isnull(), 'release_date']","f8166e55":"all_data.loc[all_data['release_date'].isnull(), 'release_date'] = '3\/20\/2001'","93e6538c":"all_data.loc[all_data['release_date'].isnull(), 'release_date']","b7f81f26":"# Drop the unnecessary features\nall_data = all_data.drop(labels=['belongs_to_collection','collection_name','genres','production_companies','production_countries','spoken_languages','Keywords','original_language','cast','crew'], axis=1)","e2f67714":"all_data = all_data.drop(labels=['overview','poster_path','title'], axis=1)","a0d4628f":"all_data = all_data.drop(labels=['imdb_id','original_title'], axis=1)","2b7fce0d":"all_data.columns[all_data.isnull().any()]","a0d2d5da":"all_data.columns.values","0d4a2798":"data_date = all_data.release_date.apply(lambda x: x.split('\/'))\ndata_month = data_date.apply(lambda x: x[0]).apply(int)\ndata_day = data_date.apply(lambda x: x[1]).apply(int)\ndata_year = data_date.apply(lambda x: x[2]).apply(int)","3d569832":"data_month.name = 'month'\ndata_day.name = 'day'\ndata_year.name = 'year'","8e1664a3":"data_year.loc[data_year==2001] = 1","895292d5":"data_year = data_year.apply(lambda x: x+2000 if x<=20 else x+1900)","0c604cc7":"sns.set(font_scale=1)\nfig, ax = plt.subplots(figsize=(16, 8))\nsns.countplot(data_year[:3000])\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.show()","0ea1f5c1":"fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(15,14))\nsns.set(color_codes=True, font_scale=1.3)\n\nsns.regplot(data_year[:3000], all_data['revenue'][:3000], scatter_kws={'alpha': 0.5}, ax=axes[0])\ncorrelation = np.corrcoef(data_year[:3000], train_data['revenue'][:3000])[0,1]\naxes[0].set_title(\"Correlation {:.2f}\".format(correlation))\n\nsns.set(font_scale=1)\nsns.boxplot(data_year[:3000], all_data['revenue'][:3000], ax=axes[1])\nplt.xticks(rotation=90)\n\nplt.tight_layout()\nplt.show()","af221265":"# Include data_year in our dataset\nall_data = pd.concat([all_data, data_year], axis=1, sort=False)\n# all_data['year'] = data_year","db91d30f":"# all_data.groupby(\"year\")[\"revenue\"].aggregate('mean').plot()","3439ab13":"temp_data = pd.concat([all_data, data_month], axis=1, sort=False)\nmonth_median = temp_data.groupby('month')['revenue'].median()\nmonth_mean = temp_data.groupby('month')['revenue'].mean()","be7a15d1":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1.3)\n\nsns.countplot(data_month[:3000], order=[1,2,3,4,5,6,7,8,9,10,11,12], ax=axes[0])\nax02 = axes[0].twinx()\nax02.grid(False)\ng = sns.lineplot(month_mean.index.values-1, month_mean.values, color='#D0233C', label='mean')\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nsns.set(font_scale=1)\nsns.boxplot(data_month[:3000], all_data['revenue'][:3000], ax=axes[1])\nax12 = axes[1].twinx()\nax12.grid(False)\ng = sns.lineplot(month_median.index.values-1, month_median.values, color='#C053AC', label='median')\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","36f93159":"data_month_transformed = pd.get_dummies(data_month)","4ad42c66":"data_month_transformed.columns = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']","f6bdeb12":"all_data = pd.concat([all_data, data_month_transformed], axis=1)","5769dcdb":"data_date = pd.concat([data_month, data_day, data_year], axis=1).apply(lambda x: \"\/\".join([str(x.month), str(x.day), str(x.year)]), axis=1)\ndata_weekday = data_date.apply(lambda x: datetime.datetime.strptime(x, '%m\/%d\/%Y').weekday())\ndata_weekday = data_weekday.replace({0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'})","6bfb310c":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1.4)\n\nsns.countplot(data_weekday[:3000], ax=axes[0])\nsns.boxplot(data_weekday[:3000], all_data['revenue'][:3000], ax=axes[1])\n# plt.xticks(rotation=0, fontsize=16)\n\nplt.tight_layout()\nplt.show()","5c400c5a":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1)\n\nsns.countplot(data_day[:3000], ax=axes[0])\nsns.boxplot(data_day[:3000], all_data['revenue'][:3000], ax=axes[1])\n# plt.xticks(rotation=0, fontsize=16)\n\nplt.tight_layout()\nplt.show()","a40f4c86":"data_weekday.name = 'weekday'\ntemp_data = pd.concat([train_data['revenue'], data_weekday[:3000]], axis=1, sort=False)\nweekday_median = temp_data.groupby('weekday')['revenue'].median()\nweekday_mean = temp_data.groupby('weekday')['revenue'].mean()","7a07f4a9":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.set(color_codes=True, font_scale=1.4)\n\ng1 = sns.barplot(weekday_median.index.values, weekday_median.values, order=['Mon','Tue','Wed','Thu','Fri','Sat','Sun'], ax=axes[0], label='median')\ng2 = sns.barplot(weekday_mean.index.values, weekday_mean.values, order=['Mon','Tue','Wed','Thu','Fri','Sat','Sun'], ax=axes[1], label='mean')\naxes[0].set_title(\"Median\")\naxes[1].set_title(\"Mean\")\n\nplt.tight_layout()\nplt.show()","cd6342b1":"all_data = pd.concat([all_data, pd.get_dummies(data_weekday)], axis=1)","c454b96b":"all_data = all_data.drop(labels=['release_date'], axis=1)","db261d2e":"all_data.select_dtypes('object').head()","97e47cec":"all_data = pd.concat([all_data, pd.get_dummies(all_data.select_dtypes('object'), columns=['homepage','status','tagline','in_collection','in_English'], drop_first=True)], axis=1)","4bc82b5e":"all_data = all_data.drop(labels=['homepage','status','tagline','in_collection','in_English'], axis=1)\nall_data.columns.values","6db2692f":"original_numerical_features = ['budget', 'popularity', 'runtime']","52751620":"# Fill in movie runtime\ntrain_data.loc[train_data['title'] == 'The Worst Christmas of My Life', 'runtime'] = 87.0\ntrain_data.loc[train_data['title'] == '\u0410 \u043f\u043e\u0443\u0442\u0440\u0443 \u043e\u043d\u0438 \u043f\u0440\u043e\u0441\u043d\u0443\u043b\u0438\u0441\u044c', 'runtime'] = 90.0\ntrain_data.loc[train_data['title'] == '\u00bfQui\u00e9n mat\u00f3 a Bambi?', 'runtime'] = 86.0\ntrain_data.loc[train_data['title'] == 'La peggior settimana della mia vita', 'runtime'] = 93.0\ntrain_data.loc[train_data['title'] == 'Cry, Onion!', 'runtime'] = 92.0\ntrain_data.loc[train_data['title'] == 'All at Once', 'runtime'] = 93.0\ntrain_data.loc[train_data['title'] == 'Missing', 'runtime'] = 86.0\ntrain_data.loc[train_data['title'] == 'Mechenosets', 'runtime'] = 108.0\ntrain_data.loc[train_data['title'] == 'Hooked on the Game 2. The Next Level', 'runtime'] = 86.0\ntrain_data.loc[train_data['title'] == 'My Old Classmate', 'runtime'] = 98.0\ntrain_data.loc[train_data['title'] == 'Revelation', 'runtime'] = 111.0\ntrain_data.loc[train_data['title'] == 'Tutto tutto niente niente', 'runtime'] = 96.0\ntrain_data.loc[train_data['title'] == '\u041a\u043e\u0440\u043e\u043b\u0451\u0432', 'runtime'] = 130.0\ntrain_data.loc[train_data['title'] == 'Happy Weekend', 'runtime'] = 100.0 # missing, use mode\n\ntest_data.loc[test_data['title'] == 'Shikshanachya Aaicha Gho', 'runtime'] = 103.0\ntest_data.loc[test_data['title'] == 'Street Knight', 'runtime'] = 91.0\ntest_data.loc[test_data['title'] == 'Plus one', 'runtime'] = 98.0\ntest_data.loc[test_data['title'] == 'Glukhar v kino', 'runtime'] = 86.0\ntest_data.loc[test_data['title'] == 'Frau M\u00fcller muss weg!', 'runtime'] = 83.0\ntest_data.loc[test_data['title'] == 'Shabd', 'runtime'] = 140.0\ntest_data.loc[test_data['title'] == 'The Last Breath', 'runtime'] = 104.0\ntest_data.loc[test_data['title'] == 'Chaahat Ek Nasha...', 'runtime'] = 140.0\ntest_data.loc[test_data['title'] == 'El truco del manco', 'runtime'] = 100.0 # The runtime is missing from IMDB!\ntest_data.loc[test_data['title'] == 'La caliente ni\u00f1a Julietta', 'runtime'] = 93.0\ntest_data.loc[test_data['title'] == 'Pancho, el perro millonario', 'runtime'] = 91.0\ntest_data.loc[test_data['title'] == 'Nunca en horas de clase', 'runtime'] = 100.0\ntest_data.loc[test_data['title'] == 'Miesten v\u00e4lisi\u00e4 keskusteluja', 'runtime'] = 90.0","8e2ef65a":"# Clearn training set: I used the additional information from this kernel:\n# https:\/\/www.kaggle.com\/kamalchhirang\/eda-feature-engineering-lgb-xgb-cat\/notebook#Feature-Engineering-&-Prediction\ntrain_data.loc[train_data['id'] == 16,'revenue'] = 192864          # Skinning\ntrain_data.loc[train_data['id'] == 90,'budget'] = 30000000         # Sommersby          \ntrain_data.loc[train_data['id'] == 118,'budget'] = 60000000        # Wild Hogs\ntrain_data.loc[train_data['id'] == 149,'budget'] = 18000000        # Beethoven\ntrain_data.loc[train_data['id'] == 313,'revenue'] = 12000000       # The Cookout \ntrain_data.loc[train_data['id'] == 451,'revenue'] = 12000000       # Chasing Liberty\ntrain_data.loc[train_data['id'] == 464,'budget'] = 20000000        # Parenthood\ntrain_data.loc[train_data['id'] == 470,'budget'] = 13000000        # The Karate Kid, Part II\ntrain_data.loc[train_data['id'] == 513,'budget'] = 930000          # From Prada to Nada\ntrain_data.loc[train_data['id'] == 797,'budget'] = 8000000         # Welcome to Dongmakgol\ntrain_data.loc[train_data['id'] == 819,'budget'] = 90000000        # Alvin and the Chipmunks: The Road Chip\ntrain_data.loc[train_data['id'] == 850,'budget'] = 90000000        # Modern Times\ntrain_data.loc[train_data['id'] == 1007,'budget'] = 2              # Zyzzyx Road \ntrain_data.loc[train_data['id'] == 1112,'budget'] = 7500000        # An Officer and a Gentleman\ntrain_data.loc[train_data['id'] == 1131,'budget'] = 4300000        # Smokey and the Bandit   \ntrain_data.loc[train_data['id'] == 1359,'budget'] = 10000000       # Stir Crazy \ntrain_data.loc[train_data['id'] == 1542,'budget'] = 1              # All at Once\ntrain_data.loc[train_data['id'] == 1570,'budget'] = 15800000       # Crocodile Dundee II\ntrain_data.loc[train_data['id'] == 1571,'budget'] = 4000000        # Lady and the Tramp\ntrain_data.loc[train_data['id'] == 1714,'budget'] = 46000000       # The Recruit\ntrain_data.loc[train_data['id'] == 1721,'budget'] = 17500000       # Cocoon\ntrain_data.loc[train_data['id'] == 1865,'revenue'] = 25000000      # Scooby-Doo 2: Monsters Unleashed\ntrain_data.loc[train_data['id'] == 1885,'budget'] = 12             # In the Cut\ntrain_data.loc[train_data['id'] == 2091,'budget'] = 10             # Deadfall\ntrain_data.loc[train_data['id'] == 2268,'budget'] = 17500000       # Madea Goes to Jail budget\ntrain_data.loc[train_data['id'] == 2491,'budget'] = 6              # Never Talk to Strangers\ntrain_data.loc[train_data['id'] == 2602,'budget'] = 31000000       # Mr. Holland's Opus\ntrain_data.loc[train_data['id'] == 2612,'budget'] = 15000000       # Field of Dreams\ntrain_data.loc[train_data['id'] == 2696,'budget'] = 10000000       # Nurse 3-D\ntrain_data.loc[train_data['id'] == 2801,'budget'] = 10000000       # Fracture\ntrain_data.loc[train_data['id'] == 335,'budget'] = 2 \ntrain_data.loc[train_data['id'] == 348,'budget'] = 12\ntrain_data.loc[train_data['id'] == 470,'budget'] = 13000000 \ntrain_data.loc[train_data['id'] == 513,'budget'] = 1100000\ntrain_data.loc[train_data['id'] == 640,'budget'] = 6 \ntrain_data.loc[train_data['id'] == 696,'budget'] = 1\ntrain_data.loc[train_data['id'] == 797,'budget'] = 8000000 \ntrain_data.loc[train_data['id'] == 850,'budget'] = 1500000\ntrain_data.loc[train_data['id'] == 1199,'budget'] = 5 \ntrain_data.loc[train_data['id'] == 1282,'budget'] = 9               # Death at a Funeral\ntrain_data.loc[train_data['id'] == 1347,'budget'] = 1\ntrain_data.loc[train_data['id'] == 1755,'budget'] = 2\ntrain_data.loc[train_data['id'] == 1801,'budget'] = 5\ntrain_data.loc[train_data['id'] == 1918,'budget'] = 592 \ntrain_data.loc[train_data['id'] == 2033,'budget'] = 4\ntrain_data.loc[train_data['id'] == 2118,'budget'] = 344 \ntrain_data.loc[train_data['id'] == 2252,'budget'] = 130\ntrain_data.loc[train_data['id'] == 2256,'budget'] = 1 \ntrain_data.loc[train_data['id'] == 2696,'budget'] = 10000000","5338c814":"# Clean test set\ntest_data.loc[test_data['id'] == 6733,'budget'] = 5000000\ntest_data.loc[test_data['id'] == 3889,'budget'] = 15000000\ntest_data.loc[test_data['id'] == 6683,'budget'] = 50000000\ntest_data.loc[test_data['id'] == 5704,'budget'] = 4300000\ntest_data.loc[test_data['id'] == 6109,'budget'] = 281756\ntest_data.loc[test_data['id'] == 7242,'budget'] = 10000000\ntest_data.loc[test_data['id'] == 7021,'budget'] = 17540562       #  Two Is a Family\ntest_data.loc[test_data['id'] == 5591,'budget'] = 4000000        # The Orphanage\ntest_data.loc[test_data['id'] == 4282,'budget'] = 20000000       # Big Top Pee-wee\ntest_data.loc[test_data['id'] == 3033,'budget'] = 250 \ntest_data.loc[test_data['id'] == 3051,'budget'] = 50\ntest_data.loc[test_data['id'] == 3084,'budget'] = 337\ntest_data.loc[test_data['id'] == 3224,'budget'] = 4  \ntest_data.loc[test_data['id'] == 3594,'budget'] = 25  \ntest_data.loc[test_data['id'] == 3619,'budget'] = 500  \ntest_data.loc[test_data['id'] == 3831,'budget'] = 3  \ntest_data.loc[test_data['id'] == 3935,'budget'] = 500  \ntest_data.loc[test_data['id'] == 4049,'budget'] = 995946 \ntest_data.loc[test_data['id'] == 4424,'budget'] = 3  \ntest_data.loc[test_data['id'] == 4460,'budget'] = 8  \ntest_data.loc[test_data['id'] == 4555,'budget'] = 1200000 \ntest_data.loc[test_data['id'] == 4624,'budget'] = 30 \ntest_data.loc[test_data['id'] == 4645,'budget'] = 500 \ntest_data.loc[test_data['id'] == 4709,'budget'] = 450 \ntest_data.loc[test_data['id'] == 4839,'budget'] = 7\ntest_data.loc[test_data['id'] == 3125,'budget'] = 25 \ntest_data.loc[test_data['id'] == 3142,'budget'] = 1\ntest_data.loc[test_data['id'] == 3201,'budget'] = 450\ntest_data.loc[test_data['id'] == 3222,'budget'] = 6\ntest_data.loc[test_data['id'] == 3545,'budget'] = 38\ntest_data.loc[test_data['id'] == 3670,'budget'] = 18\ntest_data.loc[test_data['id'] == 3792,'budget'] = 19\ntest_data.loc[test_data['id'] == 3881,'budget'] = 7\ntest_data.loc[test_data['id'] == 3969,'budget'] = 400\ntest_data.loc[test_data['id'] == 4196,'budget'] = 6\ntest_data.loc[test_data['id'] == 4221,'budget'] = 11\ntest_data.loc[test_data['id'] == 4222,'budget'] = 500\ntest_data.loc[test_data['id'] == 4285,'budget'] = 11\ntest_data.loc[test_data['id'] == 4319,'budget'] = 1\ntest_data.loc[test_data['id'] == 4639,'budget'] = 10\ntest_data.loc[test_data['id'] == 4719,'budget'] = 45\ntest_data.loc[test_data['id'] == 4822,'budget'] = 22\ntest_data.loc[test_data['id'] == 4829,'budget'] = 20\ntest_data.loc[test_data['id'] == 4969,'budget'] = 20\ntest_data.loc[test_data['id'] == 5021,'budget'] = 40 \ntest_data.loc[test_data['id'] == 5035,'budget'] = 1 \ntest_data.loc[test_data['id'] == 5063,'budget'] = 14 \ntest_data.loc[test_data['id'] == 5119,'budget'] = 2 \ntest_data.loc[test_data['id'] == 5214,'budget'] = 30 \ntest_data.loc[test_data['id'] == 5221,'budget'] = 50 \ntest_data.loc[test_data['id'] == 4903,'budget'] = 15\ntest_data.loc[test_data['id'] == 4983,'budget'] = 3\ntest_data.loc[test_data['id'] == 5102,'budget'] = 28\ntest_data.loc[test_data['id'] == 5217,'budget'] = 75\ntest_data.loc[test_data['id'] == 5224,'budget'] = 3 \ntest_data.loc[test_data['id'] == 5469,'budget'] = 20 \ntest_data.loc[test_data['id'] == 5840,'budget'] = 1 \ntest_data.loc[test_data['id'] == 5960,'budget'] = 30\ntest_data.loc[test_data['id'] == 6506,'budget'] = 11 \ntest_data.loc[test_data['id'] == 6553,'budget'] = 280\ntest_data.loc[test_data['id'] == 6561,'budget'] = 7\ntest_data.loc[test_data['id'] == 6582,'budget'] = 218\ntest_data.loc[test_data['id'] == 6638,'budget'] = 5\ntest_data.loc[test_data['id'] == 6749,'budget'] = 8 \ntest_data.loc[test_data['id'] == 6759,'budget'] = 50 \ntest_data.loc[test_data['id'] == 6856,'budget'] = 10\ntest_data.loc[test_data['id'] == 6858,'budget'] =  100\ntest_data.loc[test_data['id'] == 6876,'budget'] =  250\ntest_data.loc[test_data['id'] == 6972,'budget'] = 1\ntest_data.loc[test_data['id'] == 7079,'budget'] = 8000000\ntest_data.loc[test_data['id'] == 7150,'budget'] = 118\ntest_data.loc[test_data['id'] == 6506,'budget'] = 118\ntest_data.loc[test_data['id'] == 7225,'budget'] = 6\ntest_data.loc[test_data['id'] == 7231,'budget'] = 85\ntest_data.loc[test_data['id'] == 5222,'budget'] = 5\ntest_data.loc[test_data['id'] == 5322,'budget'] = 90\ntest_data.loc[test_data['id'] == 5350,'budget'] = 70\ntest_data.loc[test_data['id'] == 5378,'budget'] = 10\ntest_data.loc[test_data['id'] == 5545,'budget'] = 80\ntest_data.loc[test_data['id'] == 5810,'budget'] = 8\ntest_data.loc[test_data['id'] == 5926,'budget'] = 300\ntest_data.loc[test_data['id'] == 5927,'budget'] = 4\ntest_data.loc[test_data['id'] == 5986,'budget'] = 1\ntest_data.loc[test_data['id'] == 6053,'budget'] = 20\ntest_data.loc[test_data['id'] == 6104,'budget'] = 1\ntest_data.loc[test_data['id'] == 6130,'budget'] = 30\ntest_data.loc[test_data['id'] == 6301,'budget'] = 150\ntest_data.loc[test_data['id'] == 6276,'budget'] = 100\ntest_data.loc[test_data['id'] == 6473,'budget'] = 100\ntest_data.loc[test_data['id'] == 6842,'budget'] = 30","fd3bcae0":"# Combine the cleaned data into all_data\nall_data[['runtime','budget','revenue']][:3000] = train_data[['runtime','budget','revenue']]\nall_data[['runtime','budget']][3000:] = test_data[['runtime','budget']]","4cbb93bb":"fig, ax = plt.subplots(figsize=(7,7))\n\nsns.regplot(x=all_data['runtime'][:3000], y=all_data['revenue'][:3000], color='g', scatter_kws={'alpha': 0.5})\ncorrelation = np.corrcoef(all_data['runtime'][:3000], all_data['revenue'][:3000])[0,1]\nax.set_title(\"Correlation {:.2f}\".format(correlation))\n\nplt.tight_layout()\nplt.show()","70c4556e":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\ncolors = sns.color_palette(n_colors=2)\nsns.set(color_codes=True, font_scale=1.4)\n\ng = sns.distplot(train_data[\"revenue\"], ax = axes[0])\naxes[0].legend([\"skewness: {:.2f}\".format(train_data[\"revenue\"].skew())])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(np.log1p(train_data[\"revenue\"]), ax = axes[1])\naxes[1].legend([\"skewness: {:.2f}\".format(np.log1p(train_data[\"revenue\"].skew()))])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","04e86bd4":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\ncolors = sns.color_palette(n_colors=2)\nsns.set(color_codes=True, font_scale=1.4)\n\ng = sns.distplot(train_data[\"runtime\"], ax = axes[0])\naxes[0].legend([\"skewness: {:.2f}\".format(train_data[\"runtime\"].skew())])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(np.log1p(train_data[\"runtime\"]), ax = axes[1])\naxes[1].legend([\"skewness: {:.2f}\".format(np.log1p(train_data[\"runtime\"].skew()))])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","91fbbd4b":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\ncolors = sns.color_palette(n_colors=2)\nsns.set(color_codes=True, font_scale=1.4)\n\ng = sns.distplot(train_data[\"budget\"], ax = axes[0])\naxes[0].legend([\"skewness: {:.2f}\".format(train_data[\"budget\"].skew())])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(np.log1p(train_data[\"budget\"]), ax = axes[1])\naxes[1].legend([\"skewness: {:.2f}\".format(np.log1p(train_data[\"budget\"].skew()))])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","8354a0bf":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\ncolors = sns.color_palette(n_colors=2)\nsns.set(color_codes=True, font_scale=1.4)\n\ng = sns.distplot(train_data[\"popularity\"], ax = axes[0])\naxes[0].legend([\"skewness: {:.2f}\".format(train_data[\"popularity\"].skew())])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\ng = sns.distplot(np.log1p(train_data[\"popularity\"]), ax = axes[1])\naxes[1].legend([\"skewness: {:.2f}\".format(np.log1p(train_data[\"popularity\"].skew()))])\nplt.setp(g.get_legend().get_texts(), fontsize='16')\n\nplt.tight_layout()\nplt.show()","714bec13":"# Apply log+1 transformations\nall_data['revenue'][:3000] = np.log1p(all_data[\"revenue\"][:3000])\nall_data['runtime'] = np.log1p(all_data[\"runtime\"])\nall_data['budget'] = np.log1p(all_data[\"budget\"])\nall_data['popularity'] = np.log1p(all_data[\"popularity\"])","26e2fa49":"(all_data['budget'] == 0).sum()","d323ebf9":"budget_train_data = all_data.loc[all_data['budget'] != 0]\nbudget_test_data = all_data.loc[all_data['budget'] == 0]","9b436f6d":"budget_train_X = budget_train_data.drop(labels=['budget', 'revenue'], axis=1)\nbudget_train_Y = budget_train_data['budget']\nbudget_test_X = budget_test_data.drop(labels=['budget', 'revenue'], axis=1)","6e27a04d":"lr = LinearRegression()\nlr.fit(budget_train_X, budget_train_Y)","063d9c5e":"budget_Ypred = lr.predict(budget_test_X)","8047c3e4":"# Fill in the zero values with our prediction\nall_data.loc[all_data['budget'] == 0, 'budget'] = budget_Ypred","f8ee2cbe":"Y = all_data['revenue']\nfinal_data = all_data.drop(labels=['revenue'], axis=1)","5c2e98c8":"ss = StandardScaler()\nrs = RobustScaler()\n# final_data = ss.fit_transform(final_data)\nfinal_data = rs.fit_transform(final_data)\n# final_data = final_data.values","7ebda6bf":"final_data.shape","9b0b9bcb":"Ytrain = Y[:train_size]\nXtrain = final_data[:train_size]\nXtest = final_data[train_size:]","efdc68c4":"Let's combine the training set and test set so that we can fill missing values alltogether.","adb52889":"## Treat crew\nSimilarly to cast, we can invastigate the crew size and see if there's an impact on the revenue.","495c9b35":"## Treat original_language","410404f5":"As the categorical features are quite messy, and there are many missing values, maybe we should first try to fill those missing values and transform the features into a form easier to visualize.","77e5c9a2":"### Data cleaning","3d3cc168":"Nice, all the missing values are filled, except the ones in the revenue that we are going to predict. Now, let's see what the features do we have now:","0bb29947":"## Treat genres","7170c33d":"## Treat production_countries","29f21b87":"# Fill Missing Values","e0f96b69":"There is small to moderate positive correlation between cast size and revenue, so let's include the cast size!","251c8579":"We include the top 9 keywords.","4113ec42":"## Treat runtime","427d1f72":"Now we are able to see what the collection names are:","735b223c":"- There are 4 numerical features in total.\n- The minimum of budget is 0, which is a value that we need to pay attention to.\n- There are some missing values in the runtime, and the minimum of runtime is 0, which does not make sense (a movie has length 0??). We need to treat this feature carefully.\n- Revenue has a standard deviation of 1.375e+8, which is a bit too crazy! The minimum is only one dollar!","8cf695e5":"Now, we are ready to fit models to our training data!","794a5019":"## Categorical features","24074fa8":"### Month","f7e2ab24":"Now Let's confirm that all missing values are filled.","7bc6663e":"## Final check","56a5c01c":"Now, let's try to summarize the distributions between each pair of the numerical features in a concise form:","ebe6cbb0":"Let's examine a few categorical features one-by-one.","602be1fa":"Movies released in June, July, or December tend to have higher revenues, we can identify those months in our dataset.","ab10f7d0":"## Treat keywords","b2da6979":"## Numerical features","fc3d1682":"We can see that many features (e.g. spoken language, keywords) are in dictionary forms, we need to pay special attention to treating those features carefully.","2e43ba3e":"Now we would just include the movie genres as they all have counts greater than 15.","1590e389":"It seems that the revenue increases with year, we can include the year as a numerical feature.","d8bc2634":"## Treat tagline","f79b7b13":"## Treat production_companies","b6a84f01":"Movies released on Wednesdays have the highest revenues in terms of median and mean. We can distinguish among the different days in a week.","ed6e6728":"Seems that movies that belong to some collection tend to have higher revenues!","2ef2fb53":"**Good! Now all the features are numerical!**","ddfda986":"## Numerical features","7ebe9249":"- At the first glance, budget seems to have a relatively high positive correlation with revenue.\n- As for popularity, the confidence intervals went off too large as popularity increases.\n- As for runtime, since there are missing values, we cannot get a correlation yet. We will fill in the missing values later!","28e09fe6":"There are some outliers in **budget, popularity, and revenue,** that make their distibutions highly skewed to the right.","15ec9c3d":"## Read data from .csv file","754534bf":"There are 751 unique collections! Let's what the top collections are!","73831563":"The budget is problematic. There are too many zero-values and we need to fix those. One way is to predict those values using other features in our dataset.","d169851f":"## Treat cast","9e8122f4":"# Feature Engineering\n**In this section, we are going to transform the features into a form that we can easily apply some machine learning models. To do this, we need to transform the categorical features into dummy variables, and maybe appy log-transforms to some numerical features. Notice that in the previous section, when we are filling the missing values, we also did some feature engineering as we generated many dummy variables from genres, keywords, etc.**","cc3b54de":"Right now let's include only the top 4 countries.","827c71bd":"Let's see if there is some correlation between cast size and revenue, in the training data.","a689d9f4":"### Multivariate visualizations\nLet's visualize the relations of budget, popularity, and runtime, with respect to the target variable, **revenue**.","a6084d8e":"## Treat spoken_languages","f205be59":"### Year","4e3fbb95":"## Treat release_date\nThis is the last one to fill the missing values! Yay!","da1963cd":"Let's visualize the genres in a wordcloud:","0b695867":"## Treat belongs_to_collection\nLet's extract only the collection names.","3a0d2be3":"We have 3000 training examples, and 4398 test examples.\nLet's see what the data look like:","991eb2f0":"## Treat status","aefdd97f":"# Data Exploration\nLet's first find out what are the numerical features, and what are the categorical features.","253bbd6c":"## Treat homepage","3074fe19":"Let's see how many values are missing for each feature:","13a1bc22":"### Univariate distributions","56d37040":"# Preparations","90a95697":"## Get data ready for modeling","ec391f12":"Most are in English language, so we just distinguish between English and non-English.","489f17e3":"## Engineer release_date\n**It might be interesting to see how the year, month, week of the release date affect the revenue!**","e72f1496":"Seems that movies with status 'Rumored' have very small revenues. Let's see what those movies are.","972de1cd":"### Log-transform","1c3e4d9e":"As there are many unique collections, and each collection are fairly small, we instead just indicate if a movie belongs to a collection or not. ","622764cd":"## Categorical features","86158398":"### Day","172b2907":"Let's see how the year correlate with the revenue:"}}