{"cell_type":{"698826b6":"code","10dc84e6":"code","2481360f":"code","c8a43c53":"code","d913d414":"code","725e22a3":"code","f7766af8":"code","05a07512":"code","4032925e":"code","ec549adb":"code","94399779":"code","84fa9b44":"code","45be52b7":"code","bdaf0d95":"code","34afaa1d":"code","6bbbbe54":"code","641e7ac6":"code","cda9a8b1":"code","6a8345c0":"code","12304e2b":"code","d4fa2ef4":"code","bd11b257":"code","805ae3d8":"code","74361563":"code","9ac57adc":"code","47823663":"code","d92e1664":"markdown","3df064dd":"markdown","b0b16b1b":"markdown","fe97229e":"markdown","455aef3a":"markdown","2561fbb3":"markdown"},"source":{"698826b6":"import numpy as np                \nimport pandas as pd \nimport matplotlib            \nimport matplotlib.pyplot as plt\nimport plotly as plotly  \nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nimport seaborn as sns \nimport seaborn as sb\nimport matplotlib.pyplot as plt\nsb.set() \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_absolute_error","10dc84e6":"data=pd.read_csv('..\/input\/seattle\/listings.csv')\ndata.head()","2481360f":"data.price = data['price'].str.replace('$', '')\ndata.price= pd.to_numeric(data['price'], errors='coerce')\ndata['price'].isnull().sum()","c8a43c53":"data= data.dropna(subset=['price'])\ndata['price'].isnull().sum()","d913d414":"data.neighbourhood_group_cleansed.isnull().sum()","725e22a3":"data.room_type.isnull().sum()","f7766af8":"data.review_scores_rating.isnull().sum()","05a07512":"data= data.dropna(subset=['review_scores_rating'])\ndata['price'].isnull().sum()","4032925e":"data.price = np.log(data['price'])","ec549adb":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nroomdf = data.groupby('room_type').size()\/data['room_type'].count()*100\nlabels = roomdf.index\nvalues = roomdf.values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","94399779":"plt.figure(figsize=(20,10))\nsb.distplot(data[data.room_type=='Entire home\/apt'].price,color='maroon',hist=False,label='Entire home\/apt')\nsb.distplot(data[data.room_type=='Private room'].price,color='black',hist=False,label='Private room')\nsb.distplot(data[data.room_type=='Shared room'].price,color='green',hist=False,label='Shared room')\nplt.title('room_type and price')\nplt.xlim(0,10)\nplt.show()","84fa9b44":"plt.figure(figsize=(40,20))\nsb.boxplot(x=\"price\",y ='room_type' ,data = data)\nplt.title(\"room_type price distribution\")\nplt.xticks(rotation='horizontal')\nplt.show()","45be52b7":"#catplot room type and price\nplt.figure(figsize=(20,6))\nsns.catplot(x='room_type', y='price', data=data);\nplt.ioff()","bdaf0d95":"f,axes = plt.subplots(1,1,figsize=(24,12))\nsb.boxplot(data=data['price'],orient=\"h\")","34afaa1d":"relate = pd.DataFrame(data[['price','review_scores_rating']])\nrelate.corr()","6bbbbe54":"sb.pairplot(data=relate)","641e7ac6":"roomdf = data.groupby('neighbourhood_group_cleansed').size()\/data['neighbourhood_group_cleansed'].count()*100\nlabels = roomdf.index\nvalues = roomdf.values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()","cda9a8b1":"plt.figure(figsize=(20,15))\nsb.scatterplot(data.longitude,data.latitude,hue=data.neighbourhood_group_cleansed)\nplt.ioff()","6a8345c0":"import folium\nimport folium.plugins as plugins\nfrom folium.plugins import HeatMap\nm=folium.Map(location = [47.65,-122.30],zoom_start = 12)\nhm = HeatMap(data=data[['latitude','longitude']].dropna(),radius=12,gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'})\nhm.add_to(m)\ndisplay(m)","12304e2b":"plt.figure(figsize=(10,16))\nsb.boxplot(y=\"price\",x ='neighbourhood_group_cleansed' ,data = data)\nplt.title(\"neighbourhood_group price distribution\")\nplt.show()","d4fa2ef4":"data1 = pd.DataFrame({'location': data['neighbourhood_group_cleansed'],'roomtype':data['room_type'],'score_rating':data['review_scores_rating'],'price':data['price']})\ndata1.head()","bd11b257":"data1.info()","805ae3d8":"le = preprocessing.LabelEncoder()                                            # Fit label encoder\nle.fit(data['neighbourhood_group_cleansed'])\nfeature1=le.transform(data['neighbourhood_group_cleansed'])    # Transform labels to normalized encoding.\nle.fit(data['room_type'])\nfeature2=le.transform(data['room_type'])\ndf = pd.DataFrame({'location': feature1,'roomtype':feature2,'score_rating':data['review_scores_rating'],'price':data['price']})\ndf.head()","74361563":"# Import essential models and functions from sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Extract Response and Predictors\npredictors = [\"location\", \"roomtype\",\"score_rating\"]\n\ny = pd.DataFrame(df[\"price\"])\nX = pd.DataFrame(df[predictors])\n\n# Split the Dataset into Train and Test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# Linear Regression using Train Data\nlinreg = LinearRegression()         # create the linear regression object\nlinreg.fit(X_train, y_train)        # train the linear regression model\n\n# Coefficients of the Linear Regression line\nprint('Intercept of Regression \\t: b = ', linreg.intercept_)\nprint('Coefficients of Regression \\t: a = ', linreg.coef_)\nprint()\n\n# Print the Coefficients against Predictors\nprint(pd.DataFrame(list(zip(X_train.columns, linreg.coef_[0])), columns = [\"Predictors\", \"Coefficients\"]))\nprint()\n\n# Predict Response corresponding to Predictors\ny_train_pred = linreg.predict(X_train)\ny_test_pred = linreg.predict(X_test)\n\n# Plot the Predictions vs the True values\nf, axes = plt.subplots(1, 2, figsize=(24, 12))\naxes[0].set_ylim([0, 10])\naxes[1].set_ylim([0, 10])\naxes[0].scatter(y_train, y_train_pred, color = \"blue\")\naxes[0].plot(y_train, y_train, 'b-', linewidth = 1)\naxes[0].set_xlabel(\"True values of the Response Variable (Train)\")\naxes[0].set_ylabel(\"Predicted values of the Response Variable (Train)\")\naxes[1].scatter(y_test, y_test_pred, color = \"green\")\naxes[1].plot(y_test, y_test, 'b-', linewidth = 1)\naxes[1].set_xlabel(\"True values of the Response Variable (Test)\")\naxes[1].set_ylabel(\"Predicted values of the Response Variable (Test)\")\nplt.show()\n\n# Check the Goodness of Fit (on Train Data)\nprint(\"Goodness of Fit of Model \\tTrain Dataset\")\nprint(\"Explained Variance (R^2) \\t:\", linreg.score(X_train, y_train))\nprint(\"Mean Squared Error (MSE) \\t:\", mean_squared_error(y_train, y_train_pred))\nprint()\n\n# Check the Goodness of Fit (on Test Data)\nprint(\"Goodness of Fit of Model \\tTest Dataset\")\nprint(\"Explained Variance (R^2) \\t:\", linreg.score(X_test, y_test))\nprint(\"Mean Squared Error (MSE) \\t:\", mean_squared_error(y_test, y_test_pred))\nprint()","9ac57adc":"data_dummies = pd.get_dummies(data[['neighbourhood_group_cleansed','room_type','review_scores_rating','price']])\ndata_dummies.head()","47823663":"predictors = ['neighbourhood_group_cleansed_Ballard',\n 'neighbourhood_group_cleansed_Beacon Hill',\n 'neighbourhood_group_cleansed_Capitol Hill',\n 'neighbourhood_group_cleansed_Cascade',\n 'neighbourhood_group_cleansed_Central Area',\n 'neighbourhood_group_cleansed_Delridge',\n 'neighbourhood_group_cleansed_Downtown',\n 'neighbourhood_group_cleansed_Interbay',\n 'neighbourhood_group_cleansed_Lake City',\n 'neighbourhood_group_cleansed_Magnolia',\n 'neighbourhood_group_cleansed_Northgate',\n 'neighbourhood_group_cleansed_Other neighborhoods',\n 'neighbourhood_group_cleansed_Queen Anne',\n 'neighbourhood_group_cleansed_Rainier Valley',\n 'neighbourhood_group_cleansed_Seward Park',\n 'neighbourhood_group_cleansed_University District',\n 'neighbourhood_group_cleansed_West Seattle', \"room_type_Entire home\/apt\",'room_type_Private room','room_type_Shared room',\"review_scores_rating\"]\n\ny = pd.DataFrame(data_dummies[\"price\"])\nX = pd.DataFrame(data_dummies[predictors])\n\n# Split the Dataset into Train and Test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)\n\n# Linear Regression using Train Data\nlinreg = LinearRegression()         # create the linear regression object\nlinreg.fit(X_train, y_train)        # train the linear regression model\n\n# Coefficients of the Linear Regression line\nprint('Intercept of Regression \\t: b = ', linreg.intercept_)\nprint('Coefficients of Regression \\t: a = ', linreg.coef_)\nprint()\n\n# Print the Coefficients against Predictors\nprint(pd.DataFrame(list(zip(X_train.columns, linreg.coef_[0])), columns = [\"Predictors\", \"Coefficients\"]))\nprint()\n\n# Predict Response corresponding to Predictors\ny_train_pred = linreg.predict(X_train)\ny_test_pred = linreg.predict(X_test)\n\n# Plot the Predictions vs the True values\nf, axes = plt.subplots(1, 2, figsize=(24, 12))\naxes[0].set_ylim([0, 10])\naxes[1].set_ylim([0, 10])\naxes[0].scatter(y_train, y_train_pred, color = \"blue\")\naxes[0].plot(y_train, y_train, 'b-', linewidth = 1)\naxes[0].set_xlabel(\"True values of the Response Variable (Train)\")\naxes[0].set_ylabel(\"Predicted values of the Response Variable (Train)\")\naxes[1].scatter(y_test, y_test_pred, color = \"green\")\naxes[1].plot(y_test, y_test, 'b-', linewidth = 1)\naxes[1].set_xlabel(\"True values of the Response Variable (Test)\")\naxes[1].set_ylabel(\"Predicted values of the Response Variable (Test)\")\nplt.show()\n\n# Check the Goodness of Fit (on Train Data)\nprint(\"Goodness of Fit of Model \\tTrain Dataset\")\nprint(\"Explained Variance (R^2) \\t:\", linreg.score(X_train, y_train))\nprint(\"Mean Squared Error (MSE) \\t:\", mean_squared_error(y_train, y_train_pred))\nprint()\n\n# Check the Goodness of Fit (on Test Data)\nprint(\"Goodness of Fit of Model \\tTest Dataset\")\nprint(\"Explained Variance (R^2) \\t:\", linreg.score(X_test, y_test))\nprint(\"Mean Squared Error (MSE) \\t:\", mean_squared_error(y_test, y_test_pred))\nprint()","d92e1664":"# Using \"One Hot Encoding\" Way to Predict Price","3df064dd":"\n# Pleaze use \"!pip install folium\" to install \"folium\" API in your computer first!! \n\n","b0b16b1b":"# Data Cleaning","fe97229e":"# Data Visualization ","455aef3a":"# Data Collection","2561fbb3":"# Using \"Label Encoding\" Way to Predict Price"}}