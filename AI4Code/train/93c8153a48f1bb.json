{"cell_type":{"9c371361":"code","6eb00752":"code","2d826c15":"code","fecfc555":"code","7a06fe74":"code","d8eb7f5c":"code","7c7719ca":"code","1a1c53d8":"code","3f27c5a8":"code","05ae7c71":"code","66182809":"code","17b62a46":"code","f94cf184":"code","7f8e0d77":"code","cadab7c9":"code","f5382ca4":"code","6faa38a0":"code","debf6937":"code","3d772eff":"code","03eeb2fd":"code","343bac1a":"code","6d21702b":"code","fc96a699":"code","a8f54de8":"code","6b4e9810":"code","24617d8f":"code","2012b42f":"code","bbec5c8a":"code","abb0a02d":"code","1abd9c6e":"code","96c299a2":"code","cecb91c9":"code","c44a1ac0":"code","22301e90":"code","9ba8968e":"code","d622d7d1":"code","e8cd7a0f":"code","889cd9fb":"code","90736c55":"code","9766ec8a":"code","6a15c8fe":"code","344da223":"code","e7933658":"code","50014c7e":"code","a80f426b":"code","e242a467":"code","b1258cd7":"code","f4d13d07":"code","7f8331e6":"code","35290328":"code","4e85deee":"code","dbd0f38a":"code","829f7b05":"code","cd893db1":"code","e3f17a0e":"code","4d083012":"code","b2bff500":"code","b85781e2":"code","7dfeb669":"code","8554a816":"code","37560371":"code","87f7656a":"code","cd616326":"code","cc73418a":"code","9eb1177a":"code","e3000434":"code","e1533893":"code","2942aef7":"code","f870a28d":"code","d362fa54":"code","28c56bd4":"code","87f5f89e":"code","3e93859b":"code","b9d3405c":"code","18e61bcd":"code","c9a02e17":"markdown","0721b76c":"markdown","b4e079c0":"markdown","13977a80":"markdown","145cccaa":"markdown","8182c493":"markdown","f169a051":"markdown","06ddbca8":"markdown","4450a2ef":"markdown","0a2fb46b":"markdown","5ce21f54":"markdown","1fa2dace":"markdown","9a106dad":"markdown"},"source":{"9c371361":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6eb00752":"import cv2\nimport os\nimport numpy as np\nimport matplotlib as mp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn import svm, metrics\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport glob\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.decomposition import PCA as RandomizedPCA\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import learning_curve, GridSearchCV","2d826c15":"train = '\/kaggle\/input\/train-seed\/train\/*\/*.png'","fecfc555":"paths = glob.glob(\"\/kaggle\/input\/train-seed\/train\/*\")\nlabel_names = [os.path.split(x)[-1] for x in paths]\n\nprint(\"Total labels: {}\".format(len(label_names)))\nprint(\"Labels: {}\".format(label_names))","7a06fe74":"fig = plt.figure(1, (20, 15))\ngrid = ImageGrid(fig, 111, nrows_ncols=(12, 10), axes_pad=0.1)\n\nn_img_class = []\ncount = 0\nfor idx, label in enumerate(label_names):\n    path = glob.glob(os.path.join(\"\/kaggle\/input\/train-seed\/train\/\", label, \"*.png\"))\n    n_img_class.append([label, len(path)])\n    perm = np.random.choice(len(path), size=10)\n\n    title = True\n    for k in perm:\n        ax = grid[count]\n        if title:\n            ax.text(1800, 105, label, verticalalignment=\"center\")\n            title = False\n        img = cv2.imread(path[k])\n        img = cv2.resize(img, (150, 150))\n        ax.axis(\"off\")\n        ax.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n        count += 1\n        \nplt.show()","d8eb7f5c":"img.shape","7c7719ca":"TRAIN_FOLDER=\"\/kaggle\/input\/train-seed\/train\/\"","1a1c53d8":"from glob import glob\nimages = []\nclasses=[]\nmissing=0\nfor class_folder_name in os.listdir(TRAIN_FOLDER):\n    class_folder_path = os.path.join(TRAIN_FOLDER, class_folder_name)\n    class_label = class_folder_name\n    for image_path in glob(os.path.join(class_folder_path, \"*.png\")):\n        image_bgr = cv2.imread(image_path, cv2.IMREAD_COLOR)\n        images.append(image_bgr)       \n        classes.append(class_label)","3f27c5a8":"len(images)","05ae7c71":"def resize_images(im):\n    im = np.array(im).astype(np.uint8)\n    resized = cv2.resize(im,(256,256), interpolation = cv2.INTER_CUBIC)\n    return resized\nimages = [resize_images(im) for im in images]","66182809":"images[10].shape","17b62a46":"images = np.array(images)\nclasses = np.array(classes)\nprint(\"images shape: \", images.shape)\nprint(\"classes shape: \", classes.shape)","f94cf184":"plt.imshow(images[100])","7f8e0d77":"number_of_columns = images[1].shape[0] * images[1].shape[1]\nprint(number_of_columns)","cadab7c9":"img_pred = cv2.imread(\"..\/input\/predict\/Predict.png\")","f5382ca4":"img_pred_resize = cv2.resize(img_pred,(256,256))\nplt.imshow(img_pred_resize)","6faa38a0":"encoded_label = LabelEncoder()\ny = encoded_label.fit_transform(classes)\n\nnum_classes = len(np.unique(y))\nnum_classes","debf6937":"X_train, X_test, y_train, y_test = train_test_split(images, y, test_size=0.3, random_state=50)","3d772eff":"random_seed = 22\nX_test, X_val, y_test, y_val = train_test_split(X_test,y_test, test_size = 0.5, random_state=random_seed)","03eeb2fd":"print(f\"#### Shapes of Train, Test and Validation sets are: {X_train.shape},{X_test.shape},{X_val.shape}\")","343bac1a":"print(f\"#### Shapes of Train, Test and Validation sets of Target are: {y_train.shape},{y_test.shape},{y_val.shape}\")","6d21702b":"def flatten(X):\n    Xred, Xgreen, Xblue = [],[],[]\n    for samples in X:\n        r, g, b = cv2.split(samples)\n        Xred.append(r.flatten())\n        Xgreen.append(g.flatten())\n        Xblue.append(b.flatten())\n    Xred = np.array(Xred)\n    Xgreen = np.array(Xgreen)\n    Xblue = np.array(Xblue)\n    return (Xred, Xgreen, Xblue)","fc96a699":"X_train_r, X_train_g, X_train_b = flatten(X_train)\nX_test_r, X_test_g, X_test_b = flatten(X_test)\nX_val_r, X_val_g, X_val_b = flatten(X_val)","a8f54de8":"X_train_r.shape, X_train_g.shape, X_train_b.shape,\nX_test_r.shape, X_test_g.shape, X_test_b.shape,\nX_val_r.shape, X_val_g.shape, X_val_b.shape","6b4e9810":"n_components = 300\nX_train_pca_r = RandomizedPCA(n_components=n_components, whiten=True).fit(X_train_r)\nX_train_pca_g = RandomizedPCA(n_components=n_components, whiten=True).fit(X_train_g)\nX_train_pca_b = RandomizedPCA(n_components=n_components, whiten=True).fit(X_train_b)\n\nX_test_pca_r = RandomizedPCA(n_components=n_components, whiten=True).fit(X_test_r)\nX_test_pca_g = RandomizedPCA(n_components=n_components, whiten=True).fit(X_test_g)\nX_test_pca_b = RandomizedPCA(n_components=n_components, whiten=True).fit(X_test_b)\n\nX_val_pca_r = RandomizedPCA(n_components=n_components, whiten=True).fit(X_val_r)\nX_val_pca_g = RandomizedPCA(n_components=n_components, whiten=True).fit(X_val_g)\nX_val_pca_b = RandomizedPCA(n_components=n_components, whiten=True).fit(X_val_b)","24617d8f":"Xr_train_pca = X_train_pca_r.transform(X_train_r)\nXg_train_pca = X_train_pca_g.transform(X_train_g)\nXb_train_pca = X_train_pca_b.transform(X_train_b)\n\nXr_test_pca = X_test_pca_r.transform(X_test_r)\nXg_test_pca = X_test_pca_g.transform(X_test_g)\nXb_test_pca = X_test_pca_b.transform(X_test_b)\n\nXr_val_pca = X_val_pca_r.transform(X_val_r)\nXg_val_pca = X_val_pca_g.transform(X_val_g)\nXb_val_pca = X_val_pca_b.transform(X_val_b)","2012b42f":"X_train_pca_r.explained_variance_ratio_.sum(), X_train_pca_g.explained_variance_ratio_.sum(), X_train_pca_b.explained_variance_ratio_.sum(),\nX_test_pca_r.explained_variance_ratio_.sum(), X_test_pca_g.explained_variance_ratio_.sum(), X_test_pca_b.explained_variance_ratio_.sum(),\nX_val_pca_r.explained_variance_ratio_.sum(), X_val_pca_g.explained_variance_ratio_.sum(), X_val_pca_b.explained_variance_ratio_.sum()","bbec5c8a":"X_train_pca = np.concatenate([Xr_train_pca,Xg_train_pca,Xb_train_pca], axis=1)\nX_test_pca = np.concatenate([Xr_test_pca,Xg_test_pca,Xb_test_pca], axis=1)\nX_val_pca = np.concatenate([Xr_val_pca,Xg_val_pca,Xb_val_pca], axis=1)","abb0a02d":"X_train_pca.shape, y_train.shape,\nX_test_pca.shape, y_test.shape,\nX_val_pca.shape, y_val.shape","1abd9c6e":"param_grid = [\n  {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n  {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},\n ]\nsvc = SVC()\nclf = GridSearchCV(svc, param_grid, verbose=10, n_jobs=-1)\nclf.fit(X_train_pca, y_train)","96c299a2":"X_train.shape[0], y_train.shape[0]","cecb91c9":"svm_score = clf.score(X_val_pca, y_val)","c44a1ac0":"y_pred = clf.predict(X_test_pca)\nsvm_acc = metrics.accuracy_score(y_test, y_pred)","22301e90":"img_predict = np.expand_dims(img_pred_resize, axis=0)","9ba8968e":"pred_img = np.squeeze(img_predict, axis=0)","d622d7d1":"X_pred_r, X_pred_g, X_pred_b = cv2.split(pred_img)","e8cd7a0f":"X_pred_pca_r = X_train_pca_r.transform(np.expand_dims(X_pred_r.flatten(), axis=0))\nX_pred_pca_g = X_train_pca_g.transform(np.expand_dims(X_pred_g.flatten(), axis=0))\nX_pred_pca_b = X_train_pca_b.transform(np.expand_dims(X_pred_b.flatten(), axis=0))\n\nX_pred_pca = np.concatenate([X_pred_pca_r,X_pred_pca_g,X_pred_pca_b], axis=1)","889cd9fb":"pred_svm = clf.predict(X_pred_pca)[0]\n\nprint(f\"The predicted label as per SVM is:'{pred_svm}'\")","90736c55":"model_performance = pd.DataFrame(columns=['Model', 'Accuracy', 'Loss','Predicted Class'])\nmodel_performance = model_performance.append({'Model':'SVM',\n                                              'Accuracy': svm_acc,\n                                              'Loss': 'NA',\n                                              'Predicted Class': pred_svm                                      \n                                              }, ignore_index=True)\n\nmodel_performance","9766ec8a":"from sklearn.tree import DecisionTreeClassifier\nparam_grid = [\n              {'max_leaf_nodes': list(range(2, 100)), \n               'min_samples_split': [2, 3, 4]}\n              ]\ndt = DecisionTreeClassifier()\nclf = GridSearchCV(dt, param_grid, verbose=10, n_jobs=-1)\nclf.fit(X_train_pca,y_train)","6a15c8fe":"dtree_score = clf.score(X_val_pca, y_val)\ny_pred = clf.predict(X_test_pca)\ndt_acc = metrics.accuracy_score(y_test, y_pred)\npred_dt = clf.predict(X_pred_pca)[0]\nprint(f\"The predicted label for decision tree is:'{pred_dt}'\")","344da223":"model_performance = model_performance.append({'Model':'DT',\n                                              'Accuracy': dt_acc,\n                                              'Loss': 'NA',\n                                              'Predicted Class': pred_dt                                      \n                                              }, ignore_index=True)\n\nmodel_performance","e7933658":"param_grid=[\n            {'n_estimators':[100,200],\n             'min_samples_leaf':[2,3]}\n           ]\nrf = RandomForestClassifier()\nclf = GridSearchCV(rf, param_grid, verbose=10, n_jobs=-1)\nclf.fit(X_train_pca,y_train)","50014c7e":"rf_score = clf.score(X_val_pca, y_val)\ny_pred = clf.predict(X_test_pca)\nrf_acc = metrics.accuracy_score(y_test, y_pred)\npred_rf = clf.predict(X_pred_pca)[0]\nprint(f\"The predicted label for Random Forest is:'{pred_rf}'\")","a80f426b":"model_performance = model_performance.append({'Model':'RF',\n                                              'Accuracy': rf_acc,\n                                              'Loss': 'NA',\n                                              'Predicted Class': pred_rf                                      \n                                              }, ignore_index=True)\n\nmodel_performance","e242a467":"import tensorflow\nfrom tensorflow.python.keras.layers import Dense, Dropout, InputLayer, BatchNormalization, Flatten\nfrom tensorflow.python.keras.layers import GlobalAveragePooling2D, Conv2D, MaxPool2D, GlobalMaxPool2D\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, GlobalMaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator","b1258cd7":"from sklearn.preprocessing import LabelBinarizer\nenc = LabelBinarizer()\ny2 = enc.fit_transform(classes)","f4d13d07":"y2[0]","7f8331e6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(images, y2, test_size=0.3, random_state=50)","35290328":"random_seed = 22\nfrom sklearn.model_selection import train_test_split\nX_test, X_val, y_test, y_val = train_test_split(X_test,y_test, test_size = 0.5, random_state=random_seed)","4e85deee":"X_train.shape,y_train.shape","dbd0f38a":"num_classes = len(np.unique(y_train))\nnum_classes","829f7b05":"def ann_model(height, width, num_channels, num_classes, loss='categorical_crossentropy', metrics=['accuracy']):\n    model = Sequential()\n    model.add(Dense(8, input_shape=(height, width, num_channels)))\n    model.add(Flatten())\n    model.add(BatchNormalization())\n    model.add(Dense(1024, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n    model.add(Dense(512, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(BatchNormalization())\n    model.add(Dense(num_classes, activation = \"softmax\"))\n    opt = tensorflow.keras.optimizers.Adam(lr=0.0001)\n    model.compile(optimizer = opt, loss = loss, metrics = metrics)\n    model.summary()\n    return model","cd893db1":"ann = ann_model(256,256,3,12)","e3f17a0e":"history = ann.fit(X_train, \n                  y_train, \n                  epochs = 30, \n                  validation_data = (X_val,y_val))","4d083012":"ann_loss, ann_accuracy = ann.evaluate(X_test, y_test, verbose=1)\nprint('Test loss:', ann_loss)\nprint('Test accuracy:', ann_accuracy)","b2bff500":"fig, ax = plt.subplots(2,1 , figsize=(22,7))\nax[0].plot(history.history['loss'], color='g', label=\"Loss\")\nax[0].plot(history.history['val_loss'], color='b', label=\"Validation Loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best')\n\nax[1].plot(history.history['accuracy'], color='g', label=\"Accuracy\")\nax[1].plot(history.history['val_accuracy'], color='b',label=\"Validation Accuracy\")\nlegend = ax[1].legend(loc='best')","b85781e2":"ann_predict = np.argmax(ann.predict(img_predict))","7dfeb669":"print('The predicted flower is with label:', ann_predict)","8554a816":"model_performance = model_performance.append({'Model':'ANN',\n                                              'Accuracy': ann_accuracy,\n                                              'Loss': ann_loss,\n                                              'Predicted Class': ann_predict                                      \n                                              }, ignore_index=True)\n\nmodel_performance","37560371":"from tensorflow.keras import optimizers","87f7656a":"def cnn_model(height, width, num_channels, num_classes, loss='categorical_crossentropy', metrics=['accuracy']):\n    batch_size = None\n    model = Sequential()\n    model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', batch_input_shape = (batch_size,height, width, num_channels)))\n    model.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu'))\n    model.add(MaxPool2D(pool_size=(2,2)))\n    model.add(Dropout(0.2))\n    model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\n    model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'same',activation ='relu'))\n    model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n    model.add(Dropout(0.3))\n    model.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same',activation ='relu'))\n    model.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same',activation ='relu'))\n    model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n    model.add(Dropout(0.4))\n    model.add(GlobalMaxPooling2D())\n    model.add(Dense(256, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation = \"softmax\"))\n    optimizer = tensorflow.keras.optimizers.Adam(lr=0.001, epsilon=1e-08, decay=0.0)\n    model.compile(optimizer = optimizer, loss = loss, metrics = metrics)\n    model.summary()\n    return model","cd616326":"cnn = cnn_model(256,256,3,12)","cc73418a":"history = cnn.fit(X_train, y_train, epochs = 30, validation_data = (X_val,y_val))","9eb1177a":"cnn_loss, cnn_accuracy = cnn.evaluate(X_test, y_test, verbose=1)\nprint('Test loss:', cnn_loss)\nprint('Test accuracy:', cnn_accuracy)","e3000434":"cnn_predict = np.argmax(cnn.predict(img_predict))","e1533893":"model_performance = model_performance.append({'Model':'CNN','Accuracy': cnn_accuracy,'Loss': cnn_loss,'Predicted Class': cnn_predict}, ignore_index=True)\nmodel_performance","2942aef7":"fig, ax = plt.subplots(2,1 , figsize=(22,7))\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f870a28d":"cnn.save(\"CNN_ImageClass_Seeds.h5\")","d362fa54":"from tensorflow.keras.models import load_model","28c56bd4":"model_pickled = load_model('CNN_ImageClass_Seeds.h5')","87f5f89e":"y_pred = model_pickled.predict(img_predict)","3e93859b":"y_pred","b9d3405c":"np.argmax(y_pred)","18e61bcd":"model_pickled.summary()","c9a02e17":"**Resizing the images for networks**","0721b76c":"# Module Project - CNN\nSubmitted by: Mayank Jain","b4e079c0":"The predicted label of the image given is 7","13977a80":"a. State Vector Machine","145cccaa":"**The best performing model is CNN network which is having accuracy of 73% and is far better than Artifical Neural Network and Supervised Learning Algorithms like SVM, Decision Tree and Random Forest. Also, it is the fast model as number of parameters to be learned are far less than ANN.**","8182c493":"The above weights are stored in model_pickled for future reference and retraining the model is no more needed.","f169a051":"c. Random Forest","06ddbca8":"**Classification using CNN**","4450a2ef":"**Classification using Neural Networks**","0a2fb46b":"**Supervised Learning Algorithms**","5ce21f54":"**Exploring Data of Images by checking the image and its labels**","1fa2dace":"b. Decision Tree","9a106dad":"Saved the CNN Model and the same would be loaded to predict the class of predict.png image"}}