{"cell_type":{"e201dfcb":"code","8857e09e":"code","79e9cad9":"code","f8c6f643":"code","8b43b21f":"code","ff82e96b":"code","4219850d":"code","a6297e87":"code","ebfeadfa":"code","acf1d465":"code","e605b5c8":"code","91d5774e":"code","9c280b1c":"code","23765486":"code","97b646b7":"code","f1783128":"code","ca84de96":"code","b3611890":"code","34e6a3e2":"code","9c867f01":"code","7c919215":"code","683df23e":"code","bcbd194e":"code","297a5881":"code","f664d460":"code","def80e1e":"code","da108f09":"code","43484958":"code","9b76d928":"code","c07dd581":"code","fdd0cbec":"code","b08df985":"code","1c67c4e0":"code","b9df34aa":"code","b38f9fc4":"code","1ac818be":"code","824f6c3e":"code","7b386d29":"code","f74227d6":"code","44600b22":"code","ff981497":"code","ac783224":"code","8e711951":"code","5dc5490f":"code","637aa269":"code","440009a3":"markdown","fe7f6194":"markdown","c08152ca":"markdown","140b5a17":"markdown","2791bf16":"markdown","3105aef9":"markdown","b1f90d05":"markdown","804038c1":"markdown","63a196df":"markdown","f6aa90f4":"markdown","8ab3af4f":"markdown","b221e16f":"markdown","b3cfb13b":"markdown","3f7dc2be":"markdown","c13ec7a9":"markdown","e81f2ae5":"markdown","ef7b0c2f":"markdown","a089f74b":"markdown","e7de5885":"markdown","711eb289":"markdown","41e3efcc":"markdown","637c73af":"markdown","7c8f1b66":"markdown","73fac9f5":"markdown","0c0ad28d":"markdown","368419da":"markdown","ee7c96cf":"markdown","2866c663":"markdown","d3d779af":"markdown","52c306c2":"markdown"},"source":{"e201dfcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n\nfrom wordcloud import WordCloud\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8857e09e":"df = pd.read_csv(\"\/kaggle\/input\/jobs-on-naukricom\/home\/sdf\/marketing_sample_for_naukri_com-jobs__20190701_20190830__30k_data.csv\")\ndf.head(3)","79e9cad9":"df.info()","f8c6f643":"df[df.duplicated(keep=False)]","8b43b21f":"df[df.duplicated(['Uniq Id'])]","ff82e96b":"df.drop(['Uniq Id','Crawl Timestamp'], axis=1, inplace=True)","4219850d":"print('Percentage of missing values :')\nprint(df.isnull().sum()*100\/(df.notnull().sum()+df.isnull().sum()))\n\nplt.figure(figsize=(12,6))\ndf.isnull().sum().plot(kind='bar', colormap='Accent')\nplt.title('Missing Values Plot')\nplt.xlabel('Features -->')\nplt.ylabel('No. of missing values -->')\nplt.show()\n","a6297e87":"df.dropna(subset=np.delete(df.columns.values, 4),inplace=True)\ndf.isnull().sum()*100\/(df.notnull().sum()+df.isnull().sum())","ebfeadfa":"print(df.nunique())\nplt.figure(figsize=(15,4))\nplt.plot(df.nunique())\nplt.grid()\nplt.title('Number of unique values')\nplt.show()","acf1d465":"### Pre-process Job Title","e605b5c8":"job_title = df['Job Title'].value_counts()","91d5774e":"plt.figure(figsize=(18,6))\nplt.plot(job_title.values)\nplt.xlabel('No. of samples -->')\nplt.ylabel('No. of job titles -->')\nplt.title('Number of job titles plot')\nplt.grid()\nplt.show()","9c280b1c":"df['Job Title'] = [re.sub('[^a-zA-Z]+', ' ', i.lstrip()) for i in df['Job Title']]\ndf['Job Title'].value_counts().iloc[:10]","23765486":"df['Job Salary'] = [re.sub('[^0-9,-]+', '', i) if 'PA' in i else 'Not Disclosed by Recruiter' for i in df['Job Salary']]\nprint(df['Job Salary'].value_counts().iloc[:10])\nplt.figure(figsize=(12,5))\ndf['Job Salary'].value_counts().iloc[1:20].plot(kind='barh', colormap='Accent')\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel('Salaries -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Job Salaries Plot')\nplt.show()","97b646b7":"df['Job Experience Required'] = [re.sub('[^0-9,-]+', '', i) for i in df['Job Experience Required']]\nprint(df['Job Experience Required'].value_counts().iloc[:10])\nplt.figure(figsize=(12,5))\ndf['Job Experience Required'].value_counts().iloc[:20].plot(kind='bar', colormap='Accent')\nplt.xticks(fontsize=14, rotation=0)\nplt.yticks(fontsize=14)\nplt.xlabel('Experience req. (in years) -->',fontsize=14)\nplt.ylabel('No. of jobs -->',fontsize=14)\nplt.title('Job Exp. Required Plot',fontsize=14)\nplt.show()","f1783128":"df['Key Skills'] = df['Key Skills'].map(lambda x: ' '.join(['_'.join(i.lstrip().split()) for i in x.split('|') if len(i) > 1]).lower())\ndf['Key Skills'].value_counts().index.ravel()","ca84de96":"\ncommon_words = ' '.join(df['Key Skills'].value_counts().index.ravel())\n  \nwordcloud = WordCloud(width = 1200, height = 600, \n                background_color ='white',\n                min_font_size = 10).generate(common_words) \n\n\nplt.figure(figsize = (16, 6), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","b3611890":"print('Median length of strings:', np.median(df['Role Category'].map(lambda x: len(str(x))).tolist()))\nprint('Mean length of strings: %.2f' % np.array(df['Role Category'].map(lambda x: len(str(x))).tolist()).mean())\nprint('Std. Deviation: %.2f' % np.array(df['Role Category'].map(lambda x: len(str(x))).tolist()).std())","34e6a3e2":"df['Role Category'].value_counts().iloc[:15]","9c867f01":"df['Role Category'] = df['Role Category'].map(lambda x: np.where(len(str(x)) > 80, 'N.A.', x))\ndf['Role Category'] = df['Role Category'].map(lambda x: re.sub('\\(.*?\\)', '', x))\ndf['Role Category'] = df['Role Category'].map(lambda x: ' '.join(['_'.join(j.lstrip().rstrip().split()) if len(j.lstrip().rstrip().split()) != 1 else j.lstrip().rstrip() for j in x.split('\/')]))","7c919215":"df.loc[df['Role Category'].str.contains('Ford', case=False), 'Role Category'] = 'Operations'\ndf.loc[df['Role Category'].str.contains('Telecom', case=False), 'Role Category'] = 'Telecom'\ndf.loc[df['Role Category'].str.contains('HR', case=False), 'Role Category'] = 'HR Recruitment IR'\ndf.loc[df['Role Category'].str.contains('LOGISTICS', case=False), 'Role Category'] = 'Logistics'\ndf.loc[df['Role Category'].str.contains('Bank', case=False), 'Role Category'] = 'Retail Personal_Banking'\ndf.loc[df['Role Category'].str.contains('Sales', case=False), 'Role Category'] = 'Sales'\ndf.loc[df['Role Category'].str.contains('System_Design', case=False), 'Role Category'] = 'Programming_&_Design'\ndf.loc[df['Role Category'].str.contains('nan', case=False), 'Role Category'] = 'N.A.'\n","683df23e":"print(df['Role Category'].value_counts().iloc[:10])\nplt.figure(figsize=(12,6))\ndf['Role Category'].value_counts().iloc[:20].plot(kind='barh', colormap='Accent')\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel('Role -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Role for jobs Plot',fontsize=14)\nplt.show()","bcbd194e":"df['Location'] = df['Location'].map(lambda x: re.sub('\\(.*?\\)|[^\\w]|More', ' ',  x))\ndf['Location'] = df['Location'].map(lambda x: ' '.join(set(x.strip().split())).upper())","297a5881":"print(df['Location'].value_counts().iloc[:10])\nplt.figure(figsize=(12,6))\ndf['Location'].value_counts().iloc[:20].plot(kind='barh', colormap='Accent')\nplt.yticks(fontsize=14)\nplt.xticks(fontsize=14)\nplt.ylabel('Locations -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Top Locations with max jobs Plot',fontsize=14)\nplt.show()","f664d460":"master = list()\nfor i in df.Location:\n    master.extend(i.split(' '))\n  \nwordcloud = WordCloud(width = 1200, height = 600, \n                background_color ='white',\n                min_font_size = 10).generate(' '.join(master)) \n\n\nplt.figure(figsize = (16, 6), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","def80e1e":"df['Functional Area'] = df['Functional Area'].map(lambda x: np.where(len(str(x)) > 80, 'N.A.', x))\ndf['Functional Area'] = df['Functional Area'].map(lambda x: x.replace('\/',','))\ndf['Functional Area'] = df['Functional Area'].map(lambda x: ' '.join(['_'.join(i.split()) if len(i.strip().split(' ')) > 1 else i.strip() for i in x.split(',')]))","da108f09":"df.loc[df['Functional Area'].str.contains('IT_Software_', case=False), 'Functional Area'] = 'IT_Software'","43484958":"print(df['Functional Area'].value_counts().iloc[:10])\nplt.figure(figsize=(12,6))\ndf['Functional Area'].value_counts().iloc[:20].plot(kind='barh', colormap='Accent')\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel('Functional Area -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Function area jobs Plot',fontsize=14)\nplt.show()","9b76d928":"\nfunctional_area = ' '.join(df['Functional Area'].values.ravel())\n  \nwordcloud = WordCloud(width = 1200, height = 600, \n                background_color ='white',\n                min_font_size = 10).generate(functional_area) \n\nplt.figure(figsize = (16, 6), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","c07dd581":"df['Industry'].value_counts()","fdd0cbec":"df.loc[df['Industry'].str.contains('Allegis', case=False), 'Industry'] = 'IT-Software, Software Services'\ndf.loc[df['Industry'].str.contains('TEKsystems', case=False), 'Industry'] = 'IT-Software, Software Services'\ndf.loc[df['Industry'].str.contains('Solugenix', case=False), 'Industry'] = 'IT-Software, Software Services'\ndf.loc[df['Industry'].str.contains('Laurus Labs', case=False), 'Industry'] = 'Medical, Healthcare, Hospitals'\ndf.loc[df['Industry'].str.contains('Ford', case=False), 'Industry'] = 'Automobile, Auto Anciliary, Auto Components'\ndf['Industry'] = df['Industry'].str.replace('\/',',')","b08df985":"df['Industry'] = df['Industry'].map(lambda x: ' '.join(['_'.join(i.strip().split(' ')) if len(i.strip().split(' ')) > 1 else i.strip() for i in x.split(',')]))","1c67c4e0":"print(df['Industry'].value_counts())\nplt.figure(figsize=(12,6))\ndf['Industry'].value_counts().iloc[:20].plot(kind='barh', colormap='Accent')\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel('Industry -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Industry wise jobs Plot',fontsize=14)\nplt.show()","b9df34aa":"df['Role'].value_counts()","b38f9fc4":"df['Role'] = df['Role'].map(lambda x: np.where(len(str(x)) > 80, 'Other', x))","1ac818be":"print(df['Role'].value_counts().iloc[:10])\nplt.figure(figsize=(12,6))\ndf['Role'].value_counts().iloc[:20].plot(kind='barh', colormap='Accent')\nplt.xticks(fontsize=14, rotation=90)\nplt.yticks(fontsize=14)\nplt.ylabel('Roles -->',fontsize=14)\nplt.xlabel('No. of jobs -->',fontsize=14)\nplt.title('Role wise jobs Plot',fontsize=14)\nplt.show()","824f6c3e":"data = df.copy()","7b386d29":"\nfor i in data['Job Title'].value_counts().index.tolist()[:10]:\n    df = data[(data['Job Title'] == i) & (data['Job Salary'] != 'Not Disclosed by Recruiter')][['Job Salary','Job Experience Required']]\n    fig = px.bar(df, x='Job Salary', y='Job Experience Required',\n                 hover_data=['Job Salary', 'Job Experience Required'], color='Job Salary',\n                 labels={'pop':'population of Canada'}, height=400,\n                 title = 'Top 10 most popular Job Titles Exp and Salary : ' + i)\n    fig.show()\n    print('-'*80)\n","f74227d6":"df = data[data['Job Salary'] != 'Not Disclosed by Recruiter'].sort_values('Job Salary',ascending=False)[['Job Salary','Role Category']]\nfig = px.sunburst(df, path=['Role Category','Job Salary'])\nfig.show()","44600b22":"data['Average_Job_Exp_Req'] = data['Job Experience Required'].map(lambda x: re.sub('[^0-9]',' ',x))\ndata['Average_Job_Exp_Req'] = data['Average_Job_Exp_Req'].map(lambda x: np.mean([int(i) for i in x.split()]))","ff981497":"df = data.sort_values(by = \"Average_Job_Exp_Req\", ascending = False)[['Job Title','Role','Average_Job_Exp_Req']].reset_index(drop=True)","ac783224":"fig = px.sunburst(df, path=['Role','Average_Job_Exp_Req'])\nfig.show()","8e711951":"for i in data.Location.value_counts().index.tolist()[:10]:\n    fig = px.pie(data[data.Location == i], names='Role Category',title = 'Job Roles in ' + i)\n    fig.show()","5dc5490f":"data['Average_Salary'] = data[data['Job Salary'] != 'Not Disclosed by Recruiter']['Job Salary'].str.replace('-',' ')\ndata['Average_Salary'] = data['Average_Salary'].str.replace(',','')\ndata.loc[data[data.Average_Salary.notnull()]['Average_Salary'].index,'Average_Salary'] = data[data.Average_Salary.notnull()].Average_Salary.map(lambda x: np.mean([int(i) for i in x.split()]))","637aa269":"data[data.Average_Salary.notnull()][['Key Skills','Average_Salary']].sort_values('Average_Salary',ascending=False).reset_index(drop=True)[:50]","440009a3":"<hr>","fe7f6194":"**Location**","c08152ca":"**Job Salary**","140b5a17":"**Job Experience Required**","2791bf16":"<b>We have 102 (974-872) samples with role as company description or unrealted long text. We replace them with role as 'Other' <\/b>","3105aef9":"**Role**","b1f90d05":"<hr>","804038c1":"<hr>","63a196df":"<hr>","f6aa90f4":"<hr>","8ab3af4f":"<b>Since one posting can have multiple locations, we must also look at all city names seperately rather than job postings wise.<b>","b221e16f":"<hr>","b3cfb13b":"**Key Skills**","3f7dc2be":"**Industry**","c13ec7a9":"<b>Q. Top Jobs titles, industry that ask for max experience<\/b>","e81f2ae5":"<hr>","ef7b0c2f":"**Role Category**","a089f74b":"<hr>","e7de5885":"<hr>","711eb289":"<hr>","41e3efcc":"**Now we extract some meaningful information from the data**","637c73af":"<b>Q. Highest paying job titles with role<\/b>","7c8f1b66":"<b>Q. Highest paying key skills<\/b>","73fac9f5":"<hr>","0c0ad28d":"<b>\nQ. Most popular job titles with salary and exp  \n<\/b>","368419da":"**Functional Area**","ee7c96cf":"<b>Q. Locations with maximum jobs opportunities<\/b>","2866c663":"<hr>","d3d779af":"<hr>","52c306c2":"<hr>"}}