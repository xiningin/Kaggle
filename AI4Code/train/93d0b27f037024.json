{"cell_type":{"1428128c":"code","ed56f4c8":"code","aa46e41a":"code","4a173365":"code","cacb8dc1":"code","7cc87685":"code","412eaffa":"code","56a13901":"code","71665ae2":"markdown"},"source":{"1428128c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ed56f4c8":"import matplotlib.pyplot as plt\nimport skimage.io\nfrom skimage.transform import resize\nfrom imgaug import augmenters as iaa\nfrom tqdm import tqdm\nimport PIL\nfrom PIL import Image, ImageOps\nimport cv2\nfrom sklearn.utils import class_weight, shuffle\nfrom keras.losses import binary_crossentropy, categorical_crossentropy\nfrom keras.applications.densenet import preprocess_input\nimport keras.backend as K\nimport tensorflow as tf\nfrom sklearn.metrics import f1_score, fbeta_score, cohen_kappa_score\nfrom keras.utils import Sequence\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport scipy\nimport scipy.special\nimport scipy.optimize\n\n\nWORKERS = 2\nCHANNEL = 3\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nSIZE = 224\nNUM_CLASSES = 1108","aa46e41a":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential, load_model\nfrom keras.layers import (Activation, Dropout, Flatten, Dense, GlobalMaxPooling2D,\n                          BatchNormalization, Input, Conv2D, GlobalAveragePooling2D)\nfrom keras.applications.densenet import DenseNet121\nfrom keras.callbacks import ModelCheckpoint\nfrom keras import metrics\nfrom keras.optimizers import Adam \nfrom keras.optimizers import Nadam\nfrom keras import backend as K\nimport keras\nfrom keras.models import Model","4a173365":"def create_model(input_shape,n_out):\n    input_tensor = Input(shape=input_shape)\n    base_model = DenseNet121(include_top=False,\n                   weights=None,\n                   input_tensor=input_tensor)\n    base_model.load_weights('..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5')\n    x = GlobalAveragePooling2D()(base_model.output)\n#     x = Dropout(0.1)(x)\n    x = Dense(1024, activation='relu')(x)\n \n    final_output = Dense(n_out, activation='softmax', name='final_output')(x)\n    model = Model(input_tensor, final_output)\n    \n    return model","cacb8dc1":"submit = pd.read_csv('..\/input\/recursion-cellular-image-classification\/sample_submission.csv')\nmodel = create_model(input_shape=(SIZE,SIZE,3),n_out=NUM_CLASSES)\n# Load model from \"Recursion Cellular Keras Densenet\" that achieves 0.113 LB score\nmodel.load_weights('..\/input\/recursion-cellular-keras-densenet\/Densenet121.h5')\n","7cc87685":"def assign_plate(plate):\n    probabilities = np.array(plate)\n    cost = probabilities * -1\n    rows, cols = scipy.optimize.linear_sum_assignment(cost)\n    chosen_elements = set(zip(rows.tolist(), cols.tolist()))\n\n    for sample in range(cost.shape[0]):\n        for sirna in range(cost.shape[1]):\n            if (sample, sirna) not in chosen_elements:\n                probabilities[sample, sirna] = 0\n\n    return probabilities.argmax(axis=1).tolist()\n","412eaffa":"current_plate = None\nplate_probabilities = []\npredicted = []\nfor i, name in tqdm(enumerate(submit['id_code'])):\n    path = os.path.join('..\/input\/recursion-cellular-image-classification-224-jpg\/test\/test\/', name+'_s1.jpeg')\n    experiment, plate, _ = name.split('_')\n    if plate != current_plate:\n        if current_plate is not None:\n            predicted.extend([str(x) for x in assign_plate(plate_probabilities)])\n        plate_probabilities = []\n        current_plate = plate\n\n    image = cv2.imread(path)\n#     image = cv2.resize(image, (SIZE, SIZE))\n    score_predict = model.predict((image[np.newaxis])\/255)\n    plate_probabilities.append(scipy.special.softmax(score_predict.squeeze()))\npredicted.extend([str(x) for x in assign_plate(plate_probabilities)])\n","56a13901":"submit['sirna'] = predicted\nsubmit.to_csv('submission.csv', index=False)\nsubmit.head()\n# submission['sirna'] = preds.astype(int)\n# submission.to_csv('submission.csv', index=False, columns=['id_code','sirna'])\n","71665ae2":"Because we know that each plate contains 277 distinct classes, we can boost our predictions by solving the Assignment Problem. This approach can also be combined with predicting which group a plate belongs to (see https:\/\/www.kaggle.com\/zaharch\/keras-model-boosted-with-plates-leak), to narrow the 1108 classes to exactly 277. However, this is left out for simplicity.\n\nUses the Hungarian algorithm to boost results from https:\/\/www.kaggle.com\/chandyalex\/recursion-cellular-keras-densenet (which scores 0.113), and acheives a + 0.016 boost over the baseline."}}