{"cell_type":{"7c7c5c81":"code","066ab4d3":"code","0a9cc0e0":"code","9034d2de":"code","f870ff3c":"code","da697d15":"code","4f911e85":"code","faf5a2e6":"code","4f436d13":"code","adc8a061":"code","c087b3dd":"code","d5b48cba":"code","82aff66b":"code","4b0c6420":"code","d3e9c5aa":"code","4ee26db3":"code","4dd8fa46":"code","f2ab9eb2":"code","86e25b56":"code","6beb6ee6":"code","08100a83":"code","d779bf6c":"code","c0e6778f":"code","7bdc190f":"code","560b025b":"code","056b400e":"code","e6985745":"code","a03602ab":"code","ed8a2f53":"code","34538a68":"code","d3eef20d":"code","b9632397":"code","e41f040b":"code","21044b4a":"code","e02bd251":"code","57c7bd44":"code","c6a93003":"code","cfd72f69":"code","0078c91e":"code","41b6ac75":"code","e2c78f3e":"code","59bc7cf5":"code","cbc2cae1":"code","0ec91e5d":"code","8b07b6e7":"code","87a0093c":"code","cc601bdf":"code","df1510fd":"code","93f19616":"code","d7888b74":"code","2889c4a2":"code","252c589e":"code","36b55755":"code","6e40b9ac":"code","6ae81bcc":"code","022c8f84":"code","d10ca3ef":"code","b81b2067":"code","9a24ee99":"code","b48d46e9":"code","8026a39f":"code","4ad18ab5":"code","d0ff4293":"code","9e7857ea":"code","2a15ccea":"code","69944077":"code","b216896f":"code","df406fd3":"markdown","cf1e0b8d":"markdown","24e92627":"markdown","fefa0f56":"markdown","9b3dcac7":"markdown","97dbd1e8":"markdown","21b2cd54":"markdown","eb5f298c":"markdown","c1e684c3":"markdown","5b8ed4e7":"markdown","5f6cd37b":"markdown","f3f8633c":"markdown","1a45d873":"markdown","0278b480":"markdown","478804aa":"markdown","f331e1de":"markdown","0a0cfd7d":"markdown","0ba304c2":"markdown","5e5fa6f6":"markdown","f8195e51":"markdown","38a120d5":"markdown","89017815":"markdown","02184ec7":"markdown","490d6699":"markdown","6bac934e":"markdown","bc0796bc":"markdown","0d668587":"markdown","562acf83":"markdown","dbd431b9":"markdown","bc784de1":"markdown","c3961fd7":"markdown","70b94c76":"markdown","0d1bd273":"markdown"},"source":{"7c7c5c81":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport numpy as np","066ab4d3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0a9cc0e0":"bike2019 =pd.read_csv('..\/input\/ford-gobike-2019feb-tripdata\/201902-fordgobike-tripdata.csv')","9034d2de":"bike2019.head()","f870ff3c":"bike2019.describe()","da697d15":"bike2019.info()","4f911e85":"bike2019['start_time']=pd.to_datetime(bike2019['start_time'])\nbike2019['end_time']=pd.to_datetime(bike2019['end_time'])","faf5a2e6":"bike2019['start_time'].duplicated().value_counts()","4f436d13":"bike2019[bike2019['start_time'].duplicated()]","adc8a061":"bike2019[bike2019.duplicated(subset=['end_time'])]","c087b3dd":"bike2019.dropna(inplace=True)","d5b48cba":"bike2019.info()","82aff66b":"bike2019['Customer_age']=2019-bike2019['member_birth_year']\nbike2019=bike2019.drop('member_birth_year',axis=1)","4b0c6420":"bike2019['duration_sec']=bike2019['duration_sec']\/60\nbike2019=bike2019.rename(columns={'duration_sec':'duration_min'})","d3e9c5aa":"bin_edges=[bike2019['duration_min'].min(),bike2019['duration_min'].mean(),bike2019['duration_min'].max()]\nbin_names=['casual','long']\nbike2019['general_runtime']=pd.cut(bike2019['duration_min'],bin_edges,labels=bin_names)","4ee26db3":"bin_edges=[0,18.000000,30,40,50,60,70,140]\nbin_names=['underage','18s','30s','40s','50s','60s','>70']\nbike2019['Customer_decade']=pd.cut(bike2019['Customer_age'],bin_edges,labels=bin_names)","4dd8fa46":"bike2019['hour_start']=bike2019['start_time'].dt.hour","f2ab9eb2":"bike2019['day_start']=bike2019['start_time'].dt.weekday_name","86e25b56":"bike2019['month_start']=bike2019['start_time'].dt.month","6beb6ee6":"bike2019=bike2019.drop('start_time',axis=1)\nbike2019=bike2019.drop('end_time',axis=1)","08100a83":"bike2019['hour_start'].describe()","d779bf6c":"bin_edges=[0,6,12,16,19,23]\nbin_names=['aftermidnigt','morning','midday','afternoon','night']\nbike2019['day_period']=pd.cut(bike2019['hour_start'],bin_edges,labels=bin_names)","c0e6778f":"bike2019.head()","7bdc190f":"bike2019.to_csv('clean_bikes.csv')","560b025b":"bike2019=pd.read_csv('clean_bikes.csv')","056b400e":"bike2019.hist(figsize=(9,8));","e6985745":"bike2019.info()","a03602ab":"# there's a long tail in the distribution, so let's put it on a log scale instead\nlog_binsize = 0.025\nbins = 10 ** np.arange(2.4, np.log10(bike2019['duration_min'].max())+log_binsize, log_binsize)\n\nplt.figure(figsize=[8, 5])\nplt.hist(data = bike2019, x = 'duration_min', bins = bins)\nplt.xscale('log')\n\nplt.xlabel('duration (min)')\nplt.show()","ed8a2f53":"a=bike2019[bike2019['duration_min']<60]\na.hist(['duration_min'],bins = 1000);","34538a68":"# let's plot all some categorical variables together to get an idea of each  variable's distribution.\n\nfig, ax = plt.subplots(nrows=2, figsize = [8,8])\n\ndefault_color = sb.color_palette()[0]\nsb.countplot(data = bike2019, x = 'Customer_decade', color = default_color, ax = ax[0])\nsb.countplot(data = bike2019, x = 'member_gender', color = default_color, ax = ax[1])\n\nplt.show()","d3eef20d":"sb.regplot(data=a, x='duration_min',y='Customer_age',scatter_kws={'alpha': 1\/20})","b9632397":"plt.figure(figsize = [8, 8])\n\n# subplot 1: color vs cut\nplt.subplot(2, 1, 1)\nsb.countplot(data = bike2019, x = 'member_gender', hue = 'Customer_decade', palette = 'Blues')\n\n# subplot 2: clarity vs. cut\nax = plt.subplot(2, 1, 2)\nsb.countplot(data = bike2019, x = 'hour_start', hue = 'member_gender', palette = 'Greens')\nax.legend(ncol = 2) # re-arrange legend to reduce overlapping\n\n\n\nplt.show()","e41f040b":"a=bike2019[bike2019['duration_min']<60]\nbase_color = sb.color_palette()[3]\nsb.boxplot(data = a, x='duration_min', y='member_gender', color = base_color);","21044b4a":"y=a[a['Customer_age']<30]\nbase_color = sb.color_palette()[3]\nsb.boxplot(data = y, x='duration_min', y='member_gender', color = base_color);","e02bd251":"young=bike2019[bike2019['Customer_age']<30]\n\ngender = [['Male', '^'],['Female','o'],\n               ['Other', 's']]\n\nfor gen, marker in gender:\n    df_gender = young[young['member_gender'] == gen]\n    plt.scatter(data = df_gender, x = 'duration_min', y = 'Customer_age',\n                marker = marker,alpha = 1\/5)\n    \nplt.legend(['Male','Female','Other']);","57c7bd44":"bike2019['duration_min'].describe(),bike2019['Customer_age'].describe(),bike2019['month_start'].describe()","c6a93003":"ccounts=bike2019.groupby(['member_gender','Customer_decade']).size()\nccounts = ccounts.reset_index(name = 'count')\nccounts = ccounts.pivot(index = 'Customer_decade', columns = 'member_gender', values = 'count')","cfd72f69":"dcounts=bike2019.groupby(['month_start','day_start']).size()\ndcounts = dcounts.reset_index(name = 'count')\ndcounts = dcounts.pivot(index = 'day_start', columns = 'month_start', values = 'count')","0078c91e":"dcounts","41b6ac75":"sb.heatmap(dcounts)","e2c78f3e":"hcounts=bike2019.groupby(['day_start','hour_start']).size()\nhcounts = hcounts.reset_index(name = 'count')\nhcounts = hcounts.pivot(index = 'hour_start', columns = 'day_start', values = 'count')","59bc7cf5":"plt.figure(figsize=(14, 7))\nb=sb.heatmap(hcounts,square=False)\nb.set_title('Bike usage per hour')\nb.set_ylabel('Hour')\nb.set_xlabel('Day');","cbc2cae1":"plt.figure(figsize=(14, 7))\nmcount=bike2019.groupby('hour_start').size()\nmcount = mcount.reset_index(name = 'count')\ng=sb.barplot(data = mcount, x = 'hour_start',y='count');\ng.set_title('Rides per hour')\ng.set_ylabel('Rides')\ng.set_xlabel('Hour');","0ec91e5d":"plt.figure(figsize=(16, 6))\na=bike2019[bike2019['duration_min']<=60]\ng=sb.violinplot(x=a['day_start'],y=a['duration_min'],hue='user_type',data=a, order=[\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\n                                                                                    \"Friday\",\"Saturday\",\"Sunday\"],scale=\"width\",cut=0)\ng.set_title('Duration per day')\ng.set_ylabel('Duration (min)')\ng.set_xlabel('Day')\nplt.xticks(rotation=90);","8b07b6e7":"plt.figure(figsize=(14, 6))\nb=sb.countplot(data = bike2019, x = 'day_start',hue='user_type',order=[\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\n                                                                                  \"Friday\",\"Saturday\",\"Sunday\"]);\nb.set_title('Rides amount per month seperated by rides length')\nb.set_ylabel('Rides')\nb.set_xlabel('Day')\nplt.xticks(rotation=90)\nplt.show();","87a0093c":"plt.figure(figsize=(16, 6))\na=bike2019[bike2019['duration_min']<=60]\ng=sb.violinplot(x=a['day_start'],y=a['duration_min'],hue='member_gender',order=[\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\n                                                                                  \"Friday\",\"Saturday\",\"Sunday\"],data=a)\nplt.xticks(rotation=90)\ng.set_title('Duration per day separated by gender')\ng.set_ylabel('Duration (min)')\ng.set_xlabel('Day');","cc601bdf":"mcount=bike2019.groupby('start_station_name').size().sort_values().tail()\nmcount = mcount.reset_index(name = 'count')\npl=sb.barplot(data = mcount, x ='start_station_name',y='count');\npl.set_title('Most popular start stations')\npl.set_ylabel('Rides')\npl.set_xlabel('Station name');\nplt.xticks(rotation=90);","df1510fd":"mcount=bike2019.groupby('end_station_name').size().sort_values().tail()\nmcount = mcount.reset_index(name = 'count')\npl=sb.barplot(data = mcount, x ='end_station_name',y='count');\npl.set_title('Most popular destination stations')\npl.set_ylabel('Rides')\npl.set_xlabel('Station name');\nplt.xticks(rotation=90);","93f19616":"X=bike2019.copy()","d7888b74":"#https:\/\/www.ncdc.noaa.gov\/cdo-web\/quickdata#","2889c4a2":"X.drop(['Unnamed: 0', 'start_station_name','end_station_id','end_station_name', 'end_station_latitude', 'end_station_longitude','general_runtime'], axis=1,inplace=True)","252c589e":"X=X[X['user_type']=='Subscriber']","36b55755":"X.info()","6e40b9ac":"X=pd.get_dummies(X)","6ae81bcc":"corr = X.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","022c8f84":"from sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\n","d10ca3ef":"# Remove rows with missing target, separate target from predictors\n\ny = X.duration_min              \nX.drop(['duration_min'], axis=1, inplace=True)\n\n# Break off validation set from training data\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.9, test_size=0.1, random_state=1)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, train_size=0.9, test_size=0.1, random_state=1)","b81b2067":"X_train.info(),X_test.info()","9a24ee99":"y_val","b48d46e9":"def score_dataset(XT, XV, YT, YV,n,r):\n    model= XGBRegressor(n_estimators=n,verbosity =0,learning_rate=0.1)\n    model.fit(XT, YT, \n             early_stopping_rounds=r, \n             eval_set=[(XV, YV)], \n             verbose=False)\n    preds = model.predict(XV)\n    mae = mean_absolute_error(YV, preds)\n    return mae","8026a39f":"stopping_rounds=[5,10,50,100]\nestimators=[100,500,1000,2000]\nlearning_rate=[0.1,0.3,0.5,0.7,1]","4ad18ab5":"#imputed_results = pd.DataFrame(columns = ['stopping_rounds','estimators','MAE'])\n\n#for n in estimators: \n#    for r in stopping_rounds: \n#        m=score_dataset(X_train, X_val, y_train, y_val,n,r)\n#        imputed_results = imputed_results.append({\"stopping_rounds\":r,\"estimators\":n,\"MAE\":m},ignore_index=True)","d0ff4293":"#imputed_results.sort_values(by=['MAE'])","9e7857ea":"model= XGBRegressor(n_estimators=500,verbosity =0,learning_rate=0.1)\nmodel.fit(X_train, y_train, \n        early_stopping_rounds=50, \n          eval_set=[(X_val, y_val)],verbose=False)\npreds = model.predict(X_val)\nmae = mean_absolute_error(y_val, preds)\nprint(mae)","2a15ccea":"model= XGBRegressor(n_estimators=500,verbosity =0,learning_rate=0.1)\nmodel.fit(X_train, y_train, \n             early_stopping_rounds=50, \n             eval_set=[(X_val, y_val)],verbose=False)\n    \nfinal_predictions=model.predict(X_test)\n#final_predictions=round(final_predictions,2)\n#y_test=round(y_test,2)\nX_test['prediction']=final_predictions.astype('float64')\nX_test['actual_duration']=y_test","69944077":"X_test.info()","b216896f":"labels=X_test[15800:].index\npred = X_test[15800:]['prediction']\nact_dur = X_test[15800:]['actual_duration']\n\nx = np.arange(len(labels))  # the label locations\nwidth = 0.35  # the width of the bars\n\nfig, ax = plt.subplots(figsize=(100,20))\nrects1 = ax.bar(x - width\/2, pred, width, label='prediction')\nrects2 = ax.bar(x + width\/2, act_dur, width, label='actual_duration')\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Duration')\nax.set_title('Actual and predicted ride duration')\nax.set_xticks(x)\n\nax.legend()\n\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\n\n","df406fd3":"## Test","cf1e0b8d":"We can see that the summer months have the longest rides and the October have the more rides.","24e92627":"I'll start by looking at the distribution of the main variable of interest: duration","fefa0f56":"Here the differences between the genders are bigger.","9b3dcac7":"**Duration Prediction**\nLets try to predict the duration of a ride,of course without knowing the destination of the rider.","97dbd1e8":"### Quality and tidness issues","21b2cd54":"I want to check the duration distribution for the shortest rides","eb5f298c":"What is intresting is that the Females have the biggest duration mean on their rides. At the other side, men taking the shortest rides. ","c1e684c3":"Now lets see the movement per day. I want to take a look how the daily usage is separated on the kind of the client (Subscriber or Customer) and gender.","5b8ed4e7":"1. I will make a column caled  'Customer_age' in ordere to make the data more user friendly.\n2. I will transform the ride duration fron seconds to minutes.\n3. I will make a new categorical column named 'general_runtime', seperating the ride duration at 'casual' and 'long' rides.\n4. I will make a new categorical column named 'Customer_age' , seperating the ages by decate.\n5. I will separete the start_date and 3 months. \"hour_start\", 'day_start','month_start' to help our analysis. \n\n","5f6cd37b":"### Null values\n","f3f8633c":"## The main features of interest in my dataset.\n\nI'm most interested in figuring out how does every different biker group (gender, age, custormer-subscriber) behave and how the bike use change through time.","1a45d873":"We can see that 'Customers' are taking longer rides every day. Generally at weekends the rides are longer for all genders.\n\n4.What are the riding habbits of subrcibers and ordinary customers?\n\nIt is obvious that at weekends the rides are generally longer especially for the Customers. The subscribers seem to keep the same duration mean for every day in a week. I can assume that this is happening because subscribers are using the bikes for a specific reason and no for leisure. That is why we do not see longer rides at the weekend by them. At the other hand, the Customers are using the bikes mainly at weekends.","0278b480":"The bikers are generaly young with the majority in their 20s-30s. Additionaly the majority are men.","478804aa":"## The structure of the dataset\nThere are 174951 bike rides in the dataset with 19 features . Most variables are categorical.","f331e1de":"# 3 Exploratory analysis","0a0cfd7d":"* We can see that the majority of the rides are between 3-5 mins","0ba304c2":"## 5.","5e5fa6f6":"# 1.Data extraction","f8195e51":"## 2.","38a120d5":"Duration has a long-tailed distribution, with a lot of rides on the short duration end, and few on the long duration end. When plotted on a log-scale, the duration distribution keeps the same shape.","89017815":"* The most crowded days where the Thuesdays and Mondays of October.","02184ec7":"We can see the same thing below:","490d6699":"## 3.","6bac934e":"We can see that the majority of riders are at decades 20 and 30.","bc0796bc":"# 2 Cleaning Process\n\nAt the beggining lets take a look at the duplicates and null values.","0d668587":"## 1.","562acf83":"## 4.","dbd431b9":"Lets see the same diagramm only for the younger riders.","bc784de1":"The biggest group is \"Male riders at their 20s\" and the smallest is \"Other riders older than 70 years old\"","c3961fd7":"We can see that the more rides are on working days at 8:00 and 16:00-17:00. This can lead us to the conclusion that the riders are using their bikes to go to work.  ","70b94c76":"**6.**\n","0d1bd273":"Taking a look at the start and end time duplicates we can see that they are totaly different rides. We dont hace to take any \naction. "}}