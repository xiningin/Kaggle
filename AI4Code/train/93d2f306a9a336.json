{"cell_type":{"a2f3ee3b":"code","bb21d9c5":"code","fcc31102":"code","cc35a588":"code","33d75e28":"code","5695e8a2":"code","7cb7d15d":"code","e97aed7c":"code","cc308b24":"code","df5fc7f1":"code","56abf5ea":"code","9ff5cf9d":"code","da53b4d4":"code","4ee0b181":"code","d6ab46bb":"code","aa11ff77":"code","66b0570c":"code","cdf2bd32":"code","e291acf9":"code","550fed5b":"code","97a52c49":"code","c6a00916":"code","0c6b2237":"code","dac75256":"markdown","bf1c11cd":"markdown"},"source":{"a2f3ee3b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","bb21d9c5":"train_data = pd.read_csv('..\/input\/train_V2.csv')","fcc31102":"train_data.head()","cc35a588":"train_data.describe()","33d75e28":"train_data.shape","5695e8a2":"train_data = train_data.dropna()","7cb7d15d":"train_data.isna().sum()","e97aed7c":"train_data.info()","cc308b24":"_ = plt.figure(figsize=(30, 20))\np = sns.heatmap(train_data.corr(), annot=True)","df5fc7f1":"Y_train = train_data['winPlacePerc']\nX_train = train_data.drop(columns=['Id', 'groupId', 'matchId', 'winPlacePerc', 'matchType', 'DBNOs', 'headshotKills', 'matchDuration', 'maxPlace', 'numGroups', 'roadKills', 'vehicleDestroys', 'swimDistance'])\n\nY = Y_train.values\nX = X_train.values","56abf5ea":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras import models\nfrom keras import layers\nfrom keras import Sequential\nfrom keras.layers import Dense, Dropout, Input","9ff5cf9d":"model = Sequential()\nmodel.add(Dense(80,input_dim=X_train.shape[1],activation='relu'))\nmodel.add(Dense(160,activation='relu'))\nmodel.add(Dense(320,activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(160,activation='relu'))\nmodel.add(Dense(80,activation='relu'))\nmodel.add(Dense(40,activation='relu'))\nmodel.add(Dense(20,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='mse', metrics=['mae'])","da53b4d4":"model.summary()","4ee0b181":"history = model.fit(X, Y, epochs=50,\n        batch_size=10000,\n        validation_split=0.2,\n        verbose=2)","d6ab46bb":"plt.plot(history.history['mean_absolute_error'])\nplt.plot(history.history['val_mean_absolute_error'])\nplt.legend(['mean_absolute_error', 'val_mean_absolute_error'])\n","aa11ff77":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['loss', 'val_loss'])","66b0570c":"test_data = pd.read_csv('..\/input\/test_V2.csv')","cdf2bd32":"X_test = test_data.drop(columns=['Id', 'groupId', 'matchId', 'matchType', 'DBNOs', 'headshotKills', 'matchDuration', 'maxPlace', 'numGroups', 'roadKills', 'vehicleDestroys', 'swimDistance'])","e291acf9":"predictions = model.predict(X_test).ravel()","550fed5b":"predictions","97a52c49":"sample_sub = pd.read_csv('..\/input\/sample_submission_V2.csv')","c6a00916":"sample_sub[\"winPlacePerc\"] = predictions\nsample_sub.head()","0c6b2237":"sample_sub.to_csv('sample_submission_v1.csv', index=False)","dac75256":"This plot can give us a lot of information about the data we want to predict. We can see from the plot that the values which highly effect the *winPlacePerc* are *walkDistance*, *weaponsAquired*, *killPlace*, *boosts*. *killPlace*  have highly negative effect on the win percentage whereas others have a significantly positive effect. ","bf1c11cd":"The plot above gives the correlation between the different features"}}