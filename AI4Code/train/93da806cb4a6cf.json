{"cell_type":{"9c42b442":"code","2329478f":"code","f23ca546":"code","d03fad1a":"code","bb9788df":"code","58ee3f55":"code","1f7dcf7e":"code","f672e832":"code","638586bb":"code","8f1e5ed8":"code","21061eda":"code","d31e5b8f":"code","ae24ff19":"code","0724376f":"code","0d69f43b":"code","fcd006d6":"code","734c292f":"code","49519ad3":"code","c2bf7fb5":"code","df9b7bef":"code","8cba2ea2":"code","abc1f566":"code","16cf2112":"code","bc1505ba":"code","59320944":"code","a19db238":"code","b7fc1fbd":"code","2ab1bb6f":"code","bc06d0ae":"code","4deb7a2c":"code","5fb304bd":"markdown","962251f4":"markdown","099d3a51":"markdown","2d3ca362":"markdown","1922e55d":"markdown","a7bde29b":"markdown","3b9ef530":"markdown","1a0b65fd":"markdown","32a075e0":"markdown","104e1de9":"markdown","0b92d194":"markdown","e131aed9":"markdown","fd011b8b":"markdown","020fe2b8":"markdown","8f06acf3":"markdown","b41bcd85":"markdown"},"source":{"9c42b442":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2329478f":"import numpy as np \nimport pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nimport re\nimport seaborn as sns\nimport re\nimport matplotlib.pyplot as plt\nimport string\n# File system manangement\nimport os","f23ca546":"train=pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv\",encoding='latin1')\ntest=pd.read_csv(\"\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv\",encoding='latin1')","d03fad1a":"train.head()","bb9788df":"\ntrain.shape","58ee3f55":"test.head()","1f7dcf7e":"test.shape","f672e832":"train=train[['OriginalTweet','Sentiment']]\ntest=test[['OriginalTweet','Sentiment']]","638586bb":"train['Sentiment'].unique()","8f1e5ed8":" sns.set(style='darkgrid')\nsns.countplot(x=train['Sentiment'],data=train)","21061eda":"plt.pie(train['Sentiment'].value_counts(),labels=(train['Sentiment'].unique()), explode = [0.1,0.1,0.1,0.1,.1],autopct ='%1.1f%%',shadow = True, startangle = 180, labeldistance = 1.5, pctdistance =1.2)\n\nplt.axis('equal')\nplt.show()","d31e5b8f":"def clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\n# Applying the cleaning function to both test and training datasets\ntrain['OriginalTweet'] = train['OriginalTweet'].apply(lambda x: clean_text(x))\ntest['OriginalTweet'] = test['OriginalTweet'].apply(lambda x: clean_text(x))","ae24ff19":"test.head()","0724376f":"train.head()","0d69f43b":"Neutral_Sentiment=train[train['Sentiment']=='Neutral']['OriginalTweet']\nPostive_Sentiment=train[train['Sentiment']=='Positive']['OriginalTweet']\nExtremely_Negative_Sentiment=train[train['Sentiment']=='Extremely Negative']['OriginalTweet']\nNegative_Sentiment=train[train['Sentiment']=='Negative']['OriginalTweet']\nExtremely_Positive_Sentiment=train[train['Sentiment']=='Extremely Positive']['OriginalTweet']\n \n","fcd006d6":"from wordcloud import WordCloud,STOPWORDS\n\ndef wordcloud_draw(data, color = 'black'):\n     \n    wordcloud = WordCloud(stopwords=STOPWORDS,\n                      background_color=color,\n                      width=2500,\n                      height=2000\n                     ).generate(''.join(data))\n    plt.figure(1,figsize=(13, 13))\n    plt.imshow(wordcloud)\n    plt.axis('off')\n    plt.show()\n    \n","734c292f":"print(\"Neutral  words\")\nwordcloud_draw(Neutral_Sentiment,'white')\n","49519ad3":"print(\"Negative words\")\nwordcloud_draw(Negative_Sentiment,'black')","c2bf7fb5":"print(\"Postive words\")\nwordcloud_draw(Postive_Sentiment,'black')","df9b7bef":"print(\"Extremely Negative words\")\nwordcloud_draw(Extremely_Negative_Sentiment,'black')","8cba2ea2":"print(\"Extremely Positive Sentiment words\")\nwordcloud_draw(Extremely_Positive_Sentiment,'green')","abc1f566":"max_fatures = 3000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(train['OriginalTweet'].values)\nX = tokenizer.texts_to_sequences(train['OriginalTweet'].values)\nX = pad_sequences(X)","16cf2112":"X.shape","bc1505ba":"embed_dim = 128\nlstm_out = 196\n\nmodel = Sequential()\nmodel.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))\nmodel.add(SpatialDropout1D(0.4))\nmodel.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(5,activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])\nprint(model.summary())","59320944":"y=pd.get_dummies(train['Sentiment']).values\n","a19db238":"batch_size = 32\nmodel.fit(X, y, epochs = 15, batch_size=batch_size, verbose = 2)\n","b7fc1fbd":"test.head()","2ab1bb6f":"max_fatures = 3000\ntokenizer = Tokenizer(num_words=max_fatures, split=' ')\ntokenizer.fit_on_texts(test['OriginalTweet'].values)\nX_test = tokenizer.texts_to_sequences(test['OriginalTweet'].values)\nX_test = pad_sequences(X_test)","bc06d0ae":"y_test=pd.get_dummies(test['Sentiment']).values\n","4deb7a2c":"score,acc=model.evaluate(X_test,y_test,verbose = 2, batch_size = batch_size)\nprint(\"score: %.2f\" % (score))\nprint(\"acc: %.2f\" % (acc))","5fb304bd":"above we transform our OriginalTweet column into numbers which describe every text  to deel with.","962251f4":"let's see wordcloud for each genre of sentimental","099d3a51":"we can show the percentage of each Sentiment like that","2d3ca362":"let's prepare our test data ","1922e55d":"this line of code will clean all the text ,it will delete every thing except words \nand this will make all words in small ","a7bde29b":"# Tokenizer \nnow we will toknize our original tweet feature ,to vectorize and convert text into sequenses so the network can deel with ","3b9ef530":"then we will display the count of each unique value in Sentiment","1a0b65fd":"\nas we see above the most words which describe Extremely Negative  sentiment are: (risk,corona virus, scam,panic,...........)","32a075e0":"as we see above the most words which describe Neutral sentiment are \n(stock, shopping ,home supermarket.......)","104e1de9":"# LSTM\nlet's try LSTM","0b92d194":"let's check name of  classes in Sentiment column","e131aed9":"let's transform Sentiment column into numbers","fd011b8b":"# Data Cleaning\n","020fe2b8":"as we see above the most words which describe Extremely positive  sentiment are: (online,business,keep,still,support,...........)","8f06acf3":"as we see above the most words which describe Negative sentiment are:\n(need, stop, take, price, virus ,pay,...........................)","b41bcd85":"we will use only two feature which we only need in our classification\n(originalTweet,Sentiment)"}}