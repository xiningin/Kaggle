{"cell_type":{"c2037298":"code","f07e9e62":"code","e0ce558d":"code","11e5eb78":"code","c6a60652":"code","e537b2e0":"code","82ad9d2f":"code","507a65be":"code","a1818a71":"code","1873c066":"code","32828422":"code","084b13b1":"code","5850c5cf":"code","b3fdb5e2":"code","e994cec4":"code","b7e68cd6":"markdown"},"source":{"c2037298":"# libraries import\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom datetime import datetime\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n%matplotlib inline","f07e9e62":"# loading the data\ndf = pd.read_csv(\"..\/input\/building1retail.csv\", index_col='Timestamp', date_parser=lambda x: datetime.strptime(x, '%m\/%d\/%Y %H:%M'))\n\n# show first 5 rows\ndf.head()","e0ce558d":"df.shape","11e5eb78":"# show column types\ndf.dtypes","c6a60652":"# exploring the data\ndf.plot(figsize=(18,5))","e537b2e0":"# check if there is no missing values\ndf.isnull().values.any()","82ad9d2f":"# histogram of the data\ndf.hist()","507a65be":"# filter records that are greater than 3 std, to remove outliers\ndf = df[(np.abs(stats.zscore(df)) < 3.).all(axis=1)]\ndf.shape","a1818a71":"# graph without outliers\ndf.plot(figsize=(18,5))","1873c066":"# scatter plot to see there are linear relationship\nplt.scatter(df['OAT (F)'], df['Power (kW)'])","32828422":"# checking timezone on a daytime per column\ndf.loc['2010-01-01', ['OAT (F)']].plot()","084b13b1":"# checking timezone on a daytime per column\ndf.loc['2010-01-01', ['Power (kW)']].plot()","5850c5cf":"# linear regression model\nX = pd.DataFrame(df['OAT (F)'])\ny = pd.DataFrame(df['Power (kW)'])\nmodel = LinearRegression()\nscores = []\n\n# split the records into 3 folds and train 3 times the model, \n# test and get the score of each training\nkfold = KFold(n_splits=3, shuffle=True, random_state=42)\nfor i, (train, test) in enumerate(kfold.split(X, y)):\n  model.fit(X.iloc[train,:], y.iloc[train,:])\n  score = model.score(X.iloc[test,:], y.iloc[test,:])\n  scores.append(score)\nprint(scores)","b3fdb5e2":"# To archieve a better model, let's consider the hour of the day\nX['tod'] = X.index.hour\n# drop_first = True removes multi-collinearity\nadd_var = pd.get_dummies(X['tod'], prefix='tod', drop_first=True)\n# Add all the columns to the model data\nX = X.join(add_var)\n# Drop the original column that was expanded\nX.drop(columns=['tod'], inplace=True)\nprint(X.head())","e994cec4":"# training again with the new dummie columns\nmodel = LinearRegression()\nscores = []\nkfold = KFold(n_splits=3, shuffle=True, random_state=42)\nfor i, (train, test) in enumerate(kfold.split(X, y)):\n model.fit(X.iloc[train,:], y.iloc[train,:])\n scores.append(model.score(X.iloc[test,:], y.iloc[test,:]))\nprint(scores)\n\n","b7e68cd6":"# Linear Regression with Pandas & Scikit-Learn\n\nby https:\/\/becominghuman.ai\/linear-regression-in-python-with-pandas-scikit-learn-72574a2ec1a5"}}