{"cell_type":{"0a3da94c":"code","bb2e9a73":"code","f40d7892":"code","ee9368be":"code","5cc9c8c0":"code","d7a3f3e6":"code","62ab9976":"code","1b6a2ab1":"code","36964264":"code","194ff3f0":"code","ae146bb4":"code","a925941e":"code","047c3467":"code","91a7df3c":"code","eaf5f01e":"code","b6ec8611":"code","14908266":"code","47bee202":"code","5a3c5d34":"code","6ad59720":"code","a0bef6e9":"code","a15f6b69":"code","c6c5447d":"code","209af738":"code","7c53991d":"code","08c196e1":"code","60e67282":"code","ce663e5b":"code","8f19dbcf":"code","20a03c80":"code","4d970762":"code","1bd4d118":"code","c92604d4":"code","74a84630":"code","63be9237":"code","20fab5ad":"code","db8de0e5":"code","f993edf8":"code","3f8b2676":"code","8c14423a":"code","676d1b58":"code","d780ce48":"code","3b5dc0e2":"code","4f98b6b6":"code","27f406b3":"code","0bfc28b4":"code","b61b2b49":"code","c8423b17":"code","fd4d4c43":"code","f157d7f1":"code","35ab602a":"code","cf351d30":"code","07d292bc":"code","cc3376ce":"code","bbc73424":"code","f2938323":"code","dbf16ff0":"code","912e7d4e":"code","a284f490":"code","21ac9b2f":"code","3b9d3637":"code","07b558fd":"code","3aed3ad2":"code","080a286f":"code","4baf27b5":"code","072799b0":"code","a4c93144":"code","10d1919c":"code","0824691f":"code","2ebaa3fa":"code","b50f01af":"code","d0f7154c":"code","9bfa7a09":"code","73332a3c":"code","7549a4d1":"code","1b7f29e0":"code","35ea23dd":"code","19822276":"code","55298b3d":"code","61f5b2f2":"code","fa924a91":"code","b27c2b54":"code","600010ad":"code","0da31612":"code","ca11f61e":"code","e05b9a5c":"code","1fcc2cf8":"code","d6ec9048":"code","33aaa502":"code","6263a7e5":"markdown","cdf1968e":"markdown","77f70c7b":"markdown","43c9ca75":"markdown","4a9cd60b":"markdown","59a9062b":"markdown","857a7c75":"markdown","9643f1e3":"markdown","6491dc4b":"markdown","03020daa":"markdown","f049fc32":"markdown","16a603e8":"markdown","f509c53e":"markdown","aa215c75":"markdown","fac3e0f7":"markdown","ca70f87b":"markdown","dd625eac":"markdown","ccab8a93":"markdown"},"source":{"0a3da94c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb2e9a73":"cs_df=pd.read_csv('\/kaggle\/input\/concrete-compressive-strength\/Concrete Compressive Strength.csv')","f40d7892":"cs_df.describe()","ee9368be":"cs_df[cs_df['Fly Ash (component 3)(kg in a m^3 mixture)']==0].shape\n","5cc9c8c0":"cs_df[cs_df['Blast Furnace Slag (component 2)(kg in a m^3 mixture)']==0].shape\n","d7a3f3e6":"cs_df[cs_df['Superplasticizer (component 5)(kg in a m^3 mixture)']==0].shape","62ab9976":"sns.heatmap(cs_df.corr(),annot=True)","1b6a2ab1":"cs_df.columns","36964264":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Cement (component 1)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","194ff3f0":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Blast Furnace Slag (component 2)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","ae146bb4":"cs_df[\"Blast Furnace Slag (component 2)(kg in a m^3 mixture)\"]=cs_df['Blast Furnace Slag (component 2)(kg in a m^3 mixture)'].apply(lambda x: cs_df['Blast Furnace Slag (component 2)(kg in a m^3 mixture)'].mean() if x==0 else x)","a925941e":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Blast Furnace Slag (component 2)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","047c3467":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Fly Ash (component 3)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","91a7df3c":"cs_df[\"Fly Ash (component 3)(kg in a m^3 mixture)\"]=cs_df['Fly Ash (component 3)(kg in a m^3 mixture)'].apply(lambda x: cs_df['Fly Ash (component 3)(kg in a m^3 mixture)'].mean() if x==0 else x)","eaf5f01e":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Fly Ash (component 3)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","b6ec8611":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Water  (component 4)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","14908266":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Superplasticizer (component 5)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","47bee202":"cs_df[\"Superplasticizer (component 5)(kg in a m^3 mixture)\"]=cs_df['Superplasticizer (component 5)(kg in a m^3 mixture)'].apply(lambda x: cs_df['Superplasticizer (component 5)(kg in a m^3 mixture)'].mean() if x==0 else x)","5a3c5d34":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Superplasticizer (component 5)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","6ad59720":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Coarse Aggregate  (component 6)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","a0bef6e9":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Fine Aggregate (component 7)(kg in a m^3 mixture)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","a15f6b69":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Age (day)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","c6c5447d":"cs_df[\"Age (day)\"]=cs_df['Age (day)'].apply(lambda x: cs_df['Age (day)'].mean() if x==0 else x)","209af738":"cs_df[\"Age (day)\"]","7c53991d":"cs_df","08c196e1":"plt.figure(figsize = (14, 6))\n\nsns.scatterplot(y='Age (day)', x=\"Concrete compressive strength(MPa, megapascals) \", data = cs_df)\nplt.show()","60e67282":"sns.heatmap(cs_df.corr(),annot=True)","ce663e5b":"sns.displot(cs_df['Age (day)'],  bins=10, color='blue')","8f19dbcf":"sns.displot(cs_df['Cement (component 1)(kg in a m^3 mixture)'], bins=10, color='blue')","20a03c80":"sns.displot(cs_df['Blast Furnace Slag (component 2)(kg in a m^3 mixture)'], bins=10, color='blue')","4d970762":"sns.displot(cs_df['Fly Ash (component 3)(kg in a m^3 mixture)'], kde=False, bins=10, color='blue')","1bd4d118":"sns.displot(cs_df['Water  (component 4)(kg in a m^3 mixture)'],  bins=10, color='blue')","c92604d4":"sns.displot(cs_df['Superplasticizer (component 5)(kg in a m^3 mixture)'],  bins=10, color='blue')","74a84630":"sns.displot(cs_df['Coarse Aggregate  (component 6)(kg in a m^3 mixture)'],  bins=10, color='blue')","63be9237":"sns.displot(cs_df['Fine Aggregate (component 7)(kg in a m^3 mixture)'],  bins=10, color='blue')","20fab5ad":"cs_df","db8de0e5":"import numpy as np","f993edf8":"for col in cs_df.columns:\n    cs_df[col] = np.log(cs_df[col]+1)\n#np.log(cs_df['Cement (component 1)(kg in a m^3 mixture)']+1)","3f8b2676":"cs_df","8c14423a":"Y=cs_df.pop('Concrete compressive strength(MPa, megapascals) ')\n","676d1b58":"scores={}","d780ce48":"X=cs_df","3b5dc0e2":"X_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7, test_size = 0.3, random_state=100)","4f98b6b6":"from sklearn import datasets, linear_model, metrics","27f406b3":"reg = linear_model.LinearRegression()","0bfc28b4":"reg.fit(X_train,y_train)","b61b2b49":"print('accuracy score: {}'.format(reg.score(X_test, y_test)))","c8423b17":"scores['Linear_test_score']=reg.score(X_test, y_test)","fd4d4c43":"print('accuracy score: {}'.format(reg.score(X_train, y_train)))","f157d7f1":"scores['Linear_train_score']=reg.score(X_train, y_train)","35ab602a":"from sklearn.neighbors import KNeighborsRegressor","cf351d30":"neigh = KNeighborsRegressor(n_neighbors=2)","07d292bc":"neigh.fit(X_train, y_train)","cc3376ce":"y_pred_kn=neigh.predict(X_test)","bbc73424":"from sklearn.metrics import accuracy_score","f2938323":"print(\"test accuracy score for KNN\",neigh.score(X_test,y_test))","dbf16ff0":"scores['KNN_test_score']=neigh.score(X_test,y_test)","912e7d4e":"print(\"train accuracy score for KNN\",neigh.score(X_train,y_train))","a284f490":"scores['KNN_train_score']=neigh.score(X_train,y_train)","21ac9b2f":"from sklearn.tree import DecisionTreeRegressor \n  \n# create a regressor object\nregressor = DecisionTreeRegressor(random_state = 0) \n  \n# fit the regressor with X and Y data\nregressor.fit(X_train, y_train)","3b9d3637":"print(\"test accuracy score for Decision regression\",regressor.score(X_test,y_test))","07b558fd":"print(\"train accuracy score for Decision regression\",regressor.score(X_train,y_train))","3aed3ad2":"parameters={\"splitter\":[\"best\",\"random\"],\n            \"max_depth\" : [10,12,14,16,18,20],\n           \"min_samples_leaf\":[1,2,3],\n           \n           \"max_features\":[\"auto\",\"log2\",\"sqrt\"],\n            }","080a286f":"from sklearn.model_selection import GridSearchCV","4baf27b5":"tuning_model=GridSearchCV(regressor,param_grid=parameters,scoring='neg_mean_absolute_error',cv=3,verbose=3)","072799b0":"tuning_model.fit(X_train,y_train)","a4c93144":"tuning_model.best_params_","10d1919c":"regressor_1 = DecisionTreeRegressor(random_state = 0,max_depth=16,\n max_features='auto',\n min_samples_leaf= 1,\n splitter='best') \n  \n# fit the regressor with X and Y data\nregressor_1.fit(X_train, y_train)","0824691f":"print(\"test accuracy score for Decision regression\",regressor_1.score(X_test,y_test))","2ebaa3fa":"scores['DecisionTree_test_score']=regressor_1.score(X_test,y_test)","b50f01af":"print(\"train accuracy score for Decision regression\",regressor_1.score(X_train,y_train))","d0f7154c":"scores['DecisionTree_train_score']=regressor_1.score(X_train,y_train)","9bfa7a09":"from sklearn.ensemble import RandomForestRegressor\n\nrd_clf = RandomForestRegressor(random_state=42)\nrd_clf.fit(X_train, y_train)","73332a3c":"print(\"test accuracy score for Decision regression\",rd_clf.score(X_test,y_test))","7549a4d1":"scores['RandomeForest_test_score']=rd_clf.score(X_test,y_test)","1b7f29e0":"print(\"train accuracy score for Decision regression\",rd_clf.score(X_train,y_train))","35ea23dd":"scores['RandomeForest_train_score']=rd_clf.score(X_train,y_train)","19822276":"from xgboost import XGBRegressor\nxgbhoost = XGBRegressor(verbosity=0,n_jobs=-1) \nxgbhoost.fit(X_train,y_train)\n","55298b3d":"print(\"train accuracy score for Decision regression\",xgbhoost.score(X_train,y_train))","61f5b2f2":"print(\"test accuracy score for Decision regression\",xgbhoost.score(X_test,y_test))","fa924a91":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import KFold\n#from sklearn.metrics import accuracy","b27c2b54":"param_grid = {\n        'max_depth': [3, 4, 5, 6],\n       \n        'gamma': [0.1,0.2,0.3],\n        'learning_rate': [0.1,0.2,0.3],\n        'subsample': [0.01,0.02,0.03]\n        \n}","600010ad":"kfold = KFold(n_splits=10, shuffle=True, random_state=10)\ngrid_search = RandomizedSearchCV(xgbhoost, param_grid,  cv=kfold)\ngrid_result = grid_search.fit(X_train,y_train)\n\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_[ 'mean_test_score' ]\nstds = grid_result.cv_results_[ 'std_test_score' ]\nparams = grid_result.cv_results_[ 'params' ]","0da31612":"from xgboost import XGBRegressor\nxgbhoost = XGBRegressor(verbosity=0,n_jobs=-1,subsample=0.03,max_depth=5,learning_rate=0.1,gamma=0.2) \nxgbhoost.fit(X_train,y_train)","ca11f61e":"print(\"train accuracy score\",xgbhoost.score(X_train,y_train))","e05b9a5c":"scores['Xgb_train_score']=xgbhoost.score(X_train,y_train)","1fcc2cf8":"print(\"train accuracy score\",xgbhoost.score(X_test,y_test))","d6ec9048":"scores['Xgb_test_score']=xgbhoost.score(X_test,y_test)","33aaa502":"scores","6263a7e5":"#### We see linear relation between above varaibles.","cdf1968e":"#### Check correlation among all the numerical variables","77f70c7b":"#### Buidling linear regression model","43c9ca75":"####  KNeighborsRegressor","4a9cd60b":"### Conclusion:   xgbhoost is a better model with 81% accuracy.Other models seem to be overfit between training and test data seta\n","59a9062b":"#### We see strong correlation with all independent variables against target varaible","857a7c75":"#### Describe data set","9643f1e3":"#### Check for zeros and impute values","6491dc4b":"### Univariate analysis\n","03020daa":"#### Random forest","f049fc32":"#### We see more zeros in varaible Fly Ash (component 3)(kg in a m^3 mixture).Lets impute values in this.\n","16a603e8":"#### Tuning hyper parameters for Decision regressor","f509c53e":"#### We see more zeros in varaible Blast Furnace Slag (component 2)(kg in a m^3 mixture).Lets impute values in this.\n","aa215c75":"#### Tuning hyper parameters for xgbhoost","fac3e0f7":"#### Create train and test split","ca70f87b":"#### We see more zeros in varaible Concrete compressive strength(MPa, megapascals) .Lets impute values in this.","dd625eac":"#### We see more zeros in varaible Superplasticizer (component 5)(kg in a m^3 mixture).Lets impute values in this.","ccab8a93":"#### Decision regressior"}}