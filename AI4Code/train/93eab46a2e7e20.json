{"cell_type":{"3f4c7e24":"code","92e82044":"code","6ea89d8b":"code","e307b84d":"code","3b68e758":"code","fec16f4f":"code","66b251f5":"code","fd0e8c3c":"code","5e1b8a5f":"code","90fdba21":"code","e82a4bab":"code","d7072b58":"code","d599c70e":"code","7231138b":"code","0bfbcd98":"code","258ba20e":"code","bf22d613":"code","e86fc0c7":"code","4621c954":"code","5b531f75":"code","15ed2931":"code","c1414f0e":"code","737f78e5":"code","2679f8a8":"code","5655f5af":"code","51099f20":"code","8827e737":"code","a602f518":"code","789379d0":"code","5351d1e5":"code","5c3720a2":"code","2317fcd6":"code","d4ea1eca":"code","87fcc30f":"code","b2597d2b":"code","bcfd4079":"code","52953711":"code","4366e0c7":"code","38d6829c":"code","7494055d":"code","b74944cc":"markdown","0eb530be":"markdown","3177b971":"markdown","aa28335e":"markdown","b6f4c1b8":"markdown","fcafe32a":"markdown","2579f8f6":"markdown","ab7b3241":"markdown","3170ed07":"markdown","b30818ad":"markdown","c8b095bf":"markdown","0f8e9d74":"markdown","4ec12358":"markdown","148346c4":"markdown","fb154b31":"markdown","498bcc86":"markdown"},"source":{"3f4c7e24":"import plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots \nfrom  sklearn.preprocessing import LabelEncoder\nimport numpy as np\nimport pandas as pd \nfrom IPython.display import IFrame\nfrom IPython.display import display_html \n\npd.options.plotting.backend = \"plotly\"\nfilename='\/kaggle\/input\/crime-world\/Crime.csv'\ndf = pd.read_csv(filename,low_memory=False)","92e82044":"df.head()","6ea89d8b":"print('Data Features:\\n',df.columns.values)","e307b84d":"df[['State']].value_counts()","3b68e758":"df = df[df['State']=='MD']\ndf[['State']].value_counts()","fec16f4f":"def embed_map(m, file_name):\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')","66b251f5":"import datetime\ntimes = list(df['Start_Date_Time'].values)\nmonth = [int(t.split(' ')[0][0:2]) for t in times]\nday = [int(t.split(' ')[0][3:5]) for t in times]\nyear = [int(t.split(' ')[0][6:]) for t in times]\ndate = [t.split(' ')[0] for t in times]\n\nweekday = [datetime.datetime(int(year[i]), int(month[i]), int(day[i])).weekday() for i in range(len(year))]\ndf['Weekday'] = weekday\n\nhour = [int(t.split(' ')[1].split(':')[0]) for t in times]\nfor i in range(len(times)):\n    if times[i].split(' ')[-1]=='PM' and hour[i]!=12 and hour[i]!=0:\n        hour[i] = hour[i]+12 \n    elif times[i].split(' ')[-1]=='AM' and hour[i]== 12:\n        hour[i]=0\n        \ndf['Hour'] = hour\ndf['Month'] = month\ndf['Year'] = year\ndf['Date'] = pd.to_datetime(date)\ndf = df.sort_values(by='Date')","fd0e8c3c":"from IPython.core.display import display, HTML\n\ndef display_side_by_side(dfs:list, captions:list):\n    \"\"\"Display tables side by side to save vertical space\n    Input:\n        dfs: list of pandas.DataFrame\n        captions: list of table captions\n    \"\"\"\n    output = \"\"\n    combined = dict(zip(captions, dfs))\n    for caption, df in combined.items():\n        output += df.style.set_table_attributes(\"style='display:inline'\").set_caption(caption)._repr_html_()\n        output += \"\\xa0\\xa0\\xa0\"\n    display(HTML(output))","5e1b8a5f":"df1=df[['Date','Weekday','Hour','Month','Year']].head()\ndf2=df[['Start_Date_Time']].head()\ndisplay_side_by_side([df1,df2],['Added Features','Original Feature'])","90fdba21":"fig = df['Year'].value_counts().plot.bar(height=350,title='Yearly Crime Distribution', color = list(df['Year'].unique()))\nfig.update_yaxes(title_text='Number of Crimes')\nfig.update_xaxes(title_text='Year')\nfig.update_traces(showlegend=False)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","e82a4bab":"def plotWeek(df,title,w = None, h = None):\n    weekdays = [df[df['Weekday']==i] for i in range(7)]\n\n    week_hr = []\n    for day in weekdays:\n        hrs = []\n        for i in range(24):\n            hrs.append(len(day[day['Hour']==i]))\n        week_hr.append(hrs)\n        fig = make_subplots(rows=3, cols=3,\n                       subplot_titles=('','Monday','','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'))\n\n    fig.add_trace(go.Bar(y=week_hr[0]), row=1, col = 2)\n    fig.add_trace(go.Bar(y=week_hr[1]), row=2, col = 1)\n    fig.add_trace(go.Bar(y=week_hr[2]), row=2, col = 2)\n    fig.add_trace(go.Bar(y=week_hr[3]), row=2, col = 3)\n    fig.add_trace(go.Bar(y=week_hr[4]), row=3, col = 1)\n    fig.add_trace(go.Bar(y=week_hr[5]), row=3, col = 2)\n    fig.add_trace(go.Bar(y=week_hr[6]), row=3, col = 3)\n\n    fig.update_layout(title_text=title,showlegend=False, width = w, height = h)\n    return fig","d7072b58":"crimeByYear = [df[df['Year']==year]['Month'].value_counts() for year in list(df['Year'].unique())]\ni=0\nfor c in crimeByYear:\n    fig = c.plot.bar(title=str('Monthly Crime in '+str(2016+i)),color=c.index,height=600,width=850)\n    fig.update_xaxes(title_text='Month')\n    fig.update_yaxes(title_text='Number of Crimes')\n    fig.update_layout(showlegend=False)\n    fig.show()\n    i+=1","d599c70e":"figs = []\nfor year in [2016,2017,2018,2019,2019]:\n    figs.append(plotWeek(df[df['Year']==year], str('Hourly Crime Distribution each Day in '+str(year)),w=800,h=500))\nfor f in figs:\n    f.show()","7231138b":"daily = [df[df['Year']==year] for year in list(df['Year'].unique())]\nfigs=[]\ni=0\nfor d in daily:\n    plotWeek(pd.DataFrame(d),'').show()","0bfbcd98":"weekdays = [df[df['Weekday']==i] for i in range(7)]\n\nweek_hr = []\nfor day in weekdays:\n    hrs = []\n    for i in range(24):\n        hrs.append(len(day[day['Hour']==i]))\n    week_hr.append(hrs)\ntotal_week = []\nfor i in range(7):\n    if i == 0:\n        total_week+=week_hr[i]\n    else:\n        total_week+=week_hr[i][1:]\nfig = px.bar(y=total_week,title='Total Hourly Crime Per Week',color=total_week)\nfig.update_xaxes(title_text=\"Hour\")\nfig.update_yaxes(title_text=\"Number of Crimes\")\nfig.update_layout(showlegend=False)","258ba20e":"crime_categories = [df[df['Crime Name1']==list(df['Crime Name1'].unique())[i]] for i in range(5)]\nfig = px.bar(df['Crime Name1'].value_counts(),title='Distribution of Crime Type',color=df['Crime Name1'].value_counts().index)\nfig.update_xaxes(title_text='Crime Name')\nfig.update_yaxes(title_text='Count')\nfig.update_layout(showlegend=False)","bf22d613":"plotWeek(crime_categories[0],'Crime Against Property',w=1000,h=500).show()","e86fc0c7":"plotWeek(crime_categories[1],'Crime Against Person',w=1000,h=500).show()","4621c954":"plotWeek(crime_categories[2],'Crime Against Society',w=1000,h=500).show()","5b531f75":"plotWeek(crime_categories[3],'Other Crimes',w=1000,h=500).show()","15ed2931":"plotWeek(crime_categories[4],'Non Crimes',w=1000,h=500).show()","c1414f0e":"property = df['Crime Name2'][df['Crime Name1']=='Crime Against Property']\nperson = df['Crime Name2'][df['Crime Name1']=='Crime Against Person']\nsociety = df['Crime Name2'][df['Crime Name1']=='Crime Against Society']\nother = df['Crime Name2'][df['Crime Name1']=='Other']\nnotCrime = df['Crime Name2'][df['Crime Name1']=='Not a Crime']\n\nproperty.value_counts().plot.bar(height=350,title='Crimes against Property', color =list(property.value_counts())).show()\nperson.value_counts().plot.bar(height=350, title='Crimes against Person',color =list(person.value_counts())).show()\nsociety.value_counts().plot.bar(height=350, title='Crimes against Society',color =list(society.value_counts())).show()\nother.value_counts().plot.bar(height=350, title='Other Crimes', color =list(other.value_counts())).show()\nnotCrime.value_counts().plot.bar(height=350, title='Not a Crime').show()","737f78e5":"def treemap(categories,title,path,values):\n    fig = px.treemap(categories, path=path, values=values, height=700,width=800,\n                 title=title, color_discrete_sequence = px.colors.sequential.Jet)\n    fig.data[0].textinfo = 'label+text+value'\n    fig.show()","2679f8a8":"Number_crimes = df['Crime Name2'].value_counts()\nvalues = Number_crimes.values\ncategories = pd.DataFrame(data=Number_crimes.index, columns=[\"Crime Name2\"])\ncategories['values'] = values\nfig = treemap(categories,'Crimes in Maryland',['Crime Name2'],categories['values'])","5655f5af":"labels = list(df['Crime Name1'].unique())\nvalues = list(df['Crime Name1'].value_counts())\ncolors = ['DarkSlateBlue','FireBrick', 'LightPink', 'LightSkyBlue','MediumBlue']\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)],)\nfig.update_traces(title_text='Crimes by Type' ,hoverinfo='label+percent', textinfo='value', textfont_size=15,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.show()","51099f20":"districts = list(df['Police District Name'].unique())\nlabels = list(df['Crime Name1'].unique())\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=3, cols=3, specs=[[{'type':'domain'}, {'type':'domain'},{'type':'domain'}],\n                                          [{'type':'domain'},{'type':'domain'},{'type':'domain'}],\n                                          [{'type':'domain'},{'type':'domain'},{'type':'domain'}]])\n\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[0]]['Crime Name1'].value_counts(), name=districts[0]),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[1]]['Crime Name1'].value_counts(), name=districts[1]),\n              1, 2)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[2]]['Crime Name1'].value_counts(), name=districts[2]),\n              1, 3)\n\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[3]]['Crime Name1'].value_counts(), name=districts[3]),\n              2, 1)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[4]]['Crime Name1'].value_counts(), name=districts[4]),\n              2, 2)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[5]]['Crime Name1'].value_counts(), name=districts[5]),\n              2, 3)\n\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[6]]['Crime Name1'].value_counts(), name=districts[6]),\n              3, 1)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[7]]['Crime Name1'].value_counts(), name=districts[7]),\n              3, 2)\nfig.add_trace(go.Pie(labels=labels, values=df[df['Police District Name']==districts[8]]['Crime Name1'].value_counts(), name=districts[8]),\n              3, 3)\n\ncolors = ['DarkSlateBlue','FireBrick', 'LightPink', 'LightSkyBlue','MediumBlue']\nfig.update_traces(hole=.3, hoverinfo=\"label+percent+name\",marker=dict(colors=colors, line=dict(color='#000000', width=1)))\n\n\nfig.update_layout(\n    title_text=\"Crime Distribution in each Police District\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text=districts[0], x=0.02, y=.93, font_size=12, showarrow=False),\n                 dict(text=districts[1], x=0.0, y=.57, font_size=12, showarrow=False),\n                 dict(text=districts[2], x=0.02, y=.15, font_size=12, showarrow=False),\n                 dict(text=districts[3], x=0.4, y=.93, font_size=12, showarrow=False),\n                 dict(text=districts[4], x=0.4, y=.57, font_size=12, showarrow=False),\n                 dict(text=districts[5], x=0.4, y=.15, font_size=12, showarrow=False),\n                 dict(text=districts[6], x=0.8, y=.93, font_size=12, showarrow=False),\n                 dict(text=districts[7], x=0.8, y=.57, font_size=12, showarrow=False),\n                 dict(text=districts[8], x=0.8, y=.15, font_size=12, showarrow=False)])\nfig.show()","8827e737":"df['Police District Name'].value_counts().plot.bar(color=list(df['Police District Name'].unique()),title = 'Crime in each Police District')","a602f518":"df['Place'].value_counts().plot.bar(title='Crime Place of Occurance', color = list(df['Place'].value_counts()))","789379d0":"Time = list(df['Start_Date_Time'].values)\nDay = [t.split(' ')[0] for t in Time]\ntime = [t.split(' ')[1] for t in Time]\nampm = [t[-2:] for t in Time]","5351d1e5":"import plotly.express as px\n\ncrime = pd.DataFrame()\n\ncrime['City'] = list(list(df['City'].values))\nstate = ['Maryland' for i in range(len(crime))]\ncrime['State'] = state\ncrime['Latitude'] = df['Latitude']\ncrime['Longitude'] = df['Longitude']\ncrime['Incident ID'] = df['Incident ID']\ncrime['Crime Name1'] = df['Crime Name1']\ncrime['Crime Name2'] = df['Crime Name2']\ncrime['Weekday'] = df['Weekday']\ncrime['District'] = df['Police District Name']\ncrime['Place'] = df['Place']\n\n\ncrime['Hour'] = df['Hour']\ncrime['Crime Name3'] = df['Crime Name3']\ncrime['Victims'] = df['Victims'].astype(int)","5c3720a2":"le = LabelEncoder()\ncn1 = list(crime['Crime Name1'].values)\nle.fit(list(set(cn1)))\nnum_cn1 = list(le.transform(cn1))\ncrime['Crime Name1'] = num_cn1\n\nle = LabelEncoder()\ncn2 = list(crime['Crime Name2'].values)\nle.fit(list(set(cn2)))\nnum_cn2 = list(le.transform(cn2))\ncrime['Crime Name2'] = num_cn2\n\nle = LabelEncoder()\ncn3 = list(crime['Crime Name3'].values)\nle.fit(list(set(cn3)))\nnum_cn3 = list(le.transform(cn3))\ncrime['Crime Name3'] = num_cn3\n\nle = LabelEncoder()\nagency = list(df['Agency'].values)\nle.fit(list(set(agency)))\nnum_agency = list(le.transform(agency))\ncrime['Agency'] = num_agency\n\nle = LabelEncoder()\nplace = list(df['Place'].values)\nle.fit(list(set(place)))\nnum_place = list(le.transform(place))\ncrime['Place'] = num_place\n\n\nle = LabelEncoder()\nstreet = list(df['Street Name'].values)\nle.fit(list(set(street)))\nnum_street = list(le.transform(street))\ncrime['Street Name'] = num_street\n\nle = LabelEncoder()\nstreet = list(df['Street Name'].values)\nle.fit(list(set(street)))\nnum_street = list(le.transform(street))\ncrime['Street Name'] = num_street\n\nle = LabelEncoder()\ndist = list(crime['District'].values)\nle.fit(list(set(dist)))\nnum_dist = list(le.transform(dist))\ncrime['District'] = num_dist\n\nle = LabelEncoder()\nplace = list(df['Place'].values)\nle.fit(list(set(place)))\nnum_place = list(le.transform(place))\ncrime['place'] = num_place\n\nle = LabelEncoder()\ncit = list(crime['City'].values)\nle.fit(list(set(cit)))\nnum_cit = list(le.transform(cit))\ncrime['City'] = num_cit","2317fcd6":"crime = crime[crime['Latitude'].notna()]\ncrime.head()","d4ea1eca":"import folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","87fcc30f":"m_1 = folium.Map(location=[39.1377,-77.13593], tiles='openstreetmap', zoom_start=10)\nHeatMap(data=crime[['Latitude', 'Longitude']], radius=10).add_to(m_1)\nembed_map(m_1,'headMap.html')","b2597d2b":"le = LabelEncoder()\ncity = list(crime['City'].values)\nle.fit(list(set(city)))\nnum_city = list(le.transform(city))\ncrime['City'] = num_city\ncrime","bcfd4079":"columns = list(crime.columns.values)\ncolumns.remove('Crime Name1')\ncolumns.remove('Crime Name2')\ncolumns.remove('Crime Name3')\ncolumns.remove('Incident ID')\ncolumns.remove('State')\n\nfeatures = columns\ntarget = ['Crime Name1']","52953711":"X = np.array(crime[features])\ny = list(crime[target[0]].values)\nX.shape","4366e0c7":"# from sklearn.ensemble import RandomForestClassifier\n# from sklearn.tree import DecisionTreeClassifier\n# from sklearn.model_selection import train_test_split\n# from sklearn.preprocessing import StandardScaler\n# from sklearn.model_selection import GridSearchCV\n\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.12, random_state=666)\n\n# from sklearn.neighbors import KNeighborsClassifier\n\n# knn_clf = KNeighborsClassifier()\n# knn_clf.fit(X_train, y_train)","38d6829c":"# from sklearn.metrics import accuracy_score\n\n# y_pred=knn_clf.predict(X_test)\n# print('Accuracy: {:.2f}%'.format(accuracy_score(y_test,y_pred)))","7494055d":"# # decision tree for feature importance on a regression problem\n# from sklearn.datasets import make_regression\n# from sklearn.tree import DecisionTreeRegressor\n# from matplotlib import pyplot\n# # define dataset\n# # define the model\n# model = DecisionTreeRegressor()\n# # fit the model\n# model.fit(X, y)\n# # get importance\n# importance = model.feature_importances_\n# # summarize feature importance\n# for i,v in enumerate(importance):\n# \tprint('Feature: %0d, Score: %.5f' % (i,v))\n# # plot feature importance\n# pyplot.bar([x for x in range(len(importance))], importance)\n# pyplot.show()","b74944cc":"## Heat Map","0eb530be":"## Data Cleaning\n- There are 9 values for the `State` column which provide no meaningful information since they are either not a state name, or there are too few of these rows. These are removed from the dataframe, leaving 225497 remaining rows with the `State` value being `MD` (Maryland).","3177b971":"## Encode categorical variables into numerical labels","aa28335e":"Below, we can see that roughly 44% of crime is against property, %26 is against another person, and %20 is against society.","b6f4c1b8":"## Monthly Crime Distribution","fcafe32a":"### Weekly Breakdown of Crime Type ","2579f8f6":"## Distribution of Place (Place where crime occured)\nWe can see the terrifying statistics for where crime are frequently committed in Maryland. The top 5 are\n1. Street- in Vechicle\n2. Residence - Single Family \n3. Residence - Unknown\n4. Other\/Unknown\n5. Street - Residential","ab7b3241":"## Yearly Crime Distribution between 2016-2020\nBelow we can see the distribution of crime in each year between 2016 and 2020 reported in our dataset (NOTE: The distribution here is a representation only of the data which is represented in this dataset. This may not represent the entirety of all reported crime in Maryland during these years). <br>\nNote that the data for 2016 only contains crimes reported in the months ofJuly-December, and the data for 2020 only contains crimes reported up to October.\n","3170ed07":"## Feature Engineering\n\nThe `Start_Date_Time` feature is of the format `MM\/DD\/YYYY HH:MM:SS AM`. So here, we split this single feature into the following features: \n- Hour: The hour of the day (0-23)\n- Weekday: (0-6)\n- Month: (1-12)\n- Year: (2016-2020)\n\nBy separating these features, we can hope to understand how crime is distributed throughout the year, as well as throughout the week, and throughout the day. <br>\nWe also create the `Date` feature which utilizes pandas `to_datetime()` utility, allowing us to sort the data according to date. ","b30818ad":"## Crime Distributions each week day","c8b095bf":"## Distribution of Crime Type (each value in `Crime Name1`)\n","0f8e9d74":"## Crime Type Distribution for Each Police District","4ec12358":"### Specific Crime in each Category\nBelow, we can see what types of crimes constitute each major crime type, and how they are distributed in each category.","148346c4":"## Random Forest Classifier","fb154b31":"# Exploring Maryland Crime Data ","498bcc86":"## Transform all data into numeric data"}}