{"cell_type":{"a5122b47":"code","6b544b3a":"code","e7b44cc7":"code","36ace5a9":"code","22bf42a9":"code","0e5e7242":"code","3f4d120b":"code","e7a6c293":"code","1c5a2d6e":"code","b9b35ed8":"code","a466babb":"code","2b6357ef":"code","58535995":"code","a403c3dd":"code","0255fd7c":"code","e4730863":"code","e071e3fa":"code","a602361c":"code","2861ec7c":"code","84aaad99":"code","ab351e47":"code","79cb947e":"code","bfb9ea13":"code","3a769fdc":"code","1b87336f":"code","0f6ccd49":"code","16499abe":"code","c8be0e8f":"code","1f1aa332":"code","e9b2230e":"code","5a1c4aaa":"code","b8e6c52e":"code","08810c33":"code","e991dd1c":"code","40c7c568":"code","7ac9706f":"code","a307f3eb":"code","6934032b":"code","0c3f7e84":"code","576dc8f4":"code","0d30c048":"code","b5a0e0e5":"code","7fefe1ed":"code","8aec545c":"code","94ad74c7":"code","838864bc":"code","5453f831":"code","ff1b2850":"code","d0fa259d":"code","66d99f5f":"code","999bcb4f":"code","c8aa1a5c":"code","d560e785":"code","ad17ccb3":"code","d5983c14":"code","9a965c21":"code","a275e1af":"code","d41a29d3":"code","a7593fbf":"code","9523bb54":"code","593c1cab":"code","cdf5f88a":"code","57b4b272":"code","51ab9af1":"code","793e210a":"code","d8ced4c0":"code","e984a790":"code","c418c0d9":"code","0eab59ff":"code","7948026c":"code","28ee6217":"code","a2ebc56d":"code","4be6ec7f":"code","8ddd6e2e":"code","0f18b22d":"code","d20be579":"code","0e176abf":"code","1a1c06e3":"code","1e9e00d8":"code","551ae3f9":"code","93e99e2f":"code","b958647c":"code","b6a2603e":"code","91a56dc4":"code","5da520d7":"code","fe6110ee":"code","542398fa":"code","f96d0e40":"code","56f7dd41":"code","80647cdf":"code","f2aab2e4":"code","e7f28f7a":"code","f0bbd5eb":"code","b462f4ee":"code","35c2d7ef":"code","147e8aae":"code","304359e8":"code","aea33a21":"code","026ef2e9":"code","c96fc5ac":"code","d124493a":"code","165bb454":"code","4e57e8a8":"code","9d2cbe36":"code","0d9e1ca3":"code","d12e827a":"code","c8962c2c":"code","53f34ce2":"code","47768b93":"markdown","bd1925e7":"markdown","f9f56efa":"markdown","f77281a5":"markdown","07e624c6":"markdown","a09920f4":"markdown","75855469":"markdown","6b94013d":"markdown","2c653b95":"markdown","854ec956":"markdown","6cecf137":"markdown","54e1b274":"markdown","d9c6a362":"markdown","df1d0fdf":"markdown","0d7127e4":"markdown","873ea3f8":"markdown","e581b253":"markdown","34d507e4":"markdown","51b33542":"markdown","b3fe675b":"markdown","5f85c3f8":"markdown","21b5eedb":"markdown","bb8d300e":"markdown","9b6f2e7d":"markdown","e80fdf26":"markdown","f4ba19ff":"markdown","2ae25704":"markdown","4666a3f4":"markdown","22677257":"markdown","2e48f655":"markdown","a54b5ad8":"markdown","ffaa9c4c":"markdown","a9b38511":"markdown","50910270":"markdown","2d3663b2":"markdown","16395fd5":"markdown","972a819a":"markdown","5d5c745a":"markdown","4c2dd63a":"markdown","d854d960":"markdown","7285535a":"markdown","eb86a566":"markdown","ae1c5859":"markdown","4988e664":"markdown","5e85a22f":"markdown","a23f2c35":"markdown","1de7a48e":"markdown","f957e2cb":"markdown","a443024e":"markdown","4f8f9807":"markdown","0fc91f4c":"markdown","dc165ccb":"markdown","182fb316":"markdown","37439fba":"markdown","80933f91":"markdown","24c61967":"markdown","b6f98a3e":"markdown"},"source":{"a5122b47":"# import packages \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","6b544b3a":"# Load Data that I will investigate it\ndf_match = pd.read_csv('..\/input\/european-soccer-database\/Match.csv')\ndf_player_attribute = pd.read_csv('..\/input\/european-soccer-database\/Player_Attributes.csv')\ndf_team_attribute = pd.read_csv('..\/input\/european-soccer-database\/Team_Attributes.csv')\ndf_team = pd.read_csv('..\/input\/european-soccer-database\/Team.csv')\ndf_player = pd.read_csv('..\/input\/european-soccer-database\/Player.csv')\ndf_country = pd.read_csv('..\/input\/european-soccer-database\/Country.csv')\ndf_league = pd.read_csv('..\/input\/european-soccer-database\/League.csv')","e7b44cc7":"#Sample of Mactch Table\ndf_match.head() ","36ace5a9":"#Columns in the match table\ndf_match.columns ","22bf42a9":"# Number of Rows, Columns\ndf_match.shape ","0e5e7242":"# information about Match table \ndf_match.info()","3f4d120b":"# Number of Duplicated Records in Match table\ndf_match.duplicated().sum()","e7a6c293":"# Number of NULL values in Match table\ndf_match.isna().sum().sum()","1c5a2d6e":"df_match.describe()","b9b35ed8":"#Sample of Country Table\ndf_country","a466babb":"# Number of Rows, Columns\ndf_country.shape","2b6357ef":"# information about country table \ndf_country.info()","58535995":"df_country.describe()","a403c3dd":"#Sample of team Table\ndf_team.head() ","0255fd7c":"# Number of Rows, Columns\ndf_team.shape","e4730863":"# information about team table \ndf_team.info() ","e071e3fa":"# Number of Duplicated Records team table\ndf_team.duplicated().sum()","a602361c":"# Number of NULL values in each table in team table\ndf_team.isna().sum()","2861ec7c":"# Number of NULL values in team table \ndf_team.isna().sum().sum()","84aaad99":"df_team.describe()","ab351e47":"#Sample of team attribute Table\ndf_team_attribute.head()","79cb947e":"# Number of Rows, Columns\ndf_team_attribute.shape","bfb9ea13":"# information about team attribute table \ndf_team_attribute.info()","3a769fdc":"# Number of Duplicated Records team attribute table\ndf_team_attribute.duplicated().sum()","1b87336f":"# Number of NULL values in each table in team attribute table\ndf_team_attribute.isna().sum()","0f6ccd49":"# Number of NULL values in team attribute table \ndf_team_attribute.isna().sum().sum()","16499abe":"df_team_attribute.describe()","c8be0e8f":"#Sample of league Table\ndf_league ","1f1aa332":"# Number of Rows, Columns\ndf_league.shape","e9b2230e":"# information about league table \ndf_league.info()","5a1c4aaa":"df_league.describe()","b8e6c52e":"#Sample of player Table\ndf_player.head() ","08810c33":"# Number of Rows, Columns\ndf_player.shape","e991dd1c":"# Number of Rows, Columns\ndf_player.duplicated().sum()","40c7c568":"# Number of NULL values in team table\ndf_player.isna().sum().sum()","7ac9706f":"df_player.describe()","a307f3eb":"#Sample of player attribute Table\ndf_player_attribute.head()  ","6934032b":"# Number of Rows, Columns\ndf_player_attribute.shape","0c3f7e84":"# information about player attribute table \ndf_player_attribute.info()","576dc8f4":"# Number of Duplicated Records player attribute table\ndf_player_attribute.duplicated().sum()","0d30c048":"# Number of NULL values in each columns in _player attribute table\ndf_player_attribute.isna().sum()","b5a0e0e5":"# Number of NULL values in player attribute table\ndf_player_attribute.isna().sum().sum()","7fefe1ed":"df_player_attribute.describe()","8aec545c":"# Select columns which we need in analysis\ndf_match=df_match.loc[:,:'away_team_goal'] ","94ad74c7":"#Convert Date to DateTime type to gain availability to dedicate a year of each date\ndf_match['date'] = pd.to_datetime(df_match['date'])","838864bc":"# Add new Columns to match table store years\ndf_match['season_year'] = df_match['date'].dt.year\n#Print The maximum and minimum year in season year column\nstr(df_match['season_year'].min()) + \" : \" + str(df_match['season_year'].max())","5453f831":"\n# rename column: name to country_name \ndf_country.rename(columns={'name' : 'country_name', }, inplace=True)\n\n# join df_match with country table by inner join type .\ndf_match = df_match.merge(df_country, how='inner', left_on= \"country_id\", right_on = \"id\")\n\n# drop column id_y\ndf_match.drop(columns=['id_y'], inplace=True)\n# rename column: id_x to id \ndf_match.rename(columns={'id_x' : 'id'}, inplace=True)\n#Show sample\ndf_match.head()","ff1b2850":"df_match = df_match.merge(df_team, how='inner', left_on='home_team_api_id', right_on='team_api_id')\n# rename column: team_long_name to home_team_name \ndf_match.rename(columns={'team_long_name': 'home_team_name','country_name_x'  : 'country_name' , 'id_x' : 'id'}, inplace=True)\n\n# drop column home_team_api_id and team_api_id\ndf_match.drop(columns=['home_team_api_id', 'team_api_id', 'id_y'], axis=1, inplace=True)\n#Show sample\ndf_match.head()","d0fa259d":"\ndf_match = df_match.merge(df_team, how='left', left_on='away_team_api_id', right_on='team_api_id')\n# rename column: team_long_name to away_team_name , id_x to id \ndf_match.rename(columns={'team_long_name': 'away_team_name', 'id_x' : 'id'}, inplace=True)\n# drop unnecessary columns\ndf_match.drop(columns=['team_api_id', 'away_team_api_id','team_fifa_api_id_x', 'team_fifa_api_id_y','team_fifa_api_id_y','team_short_name_y','id_y'], axis=1, inplace=True)\n\n#Show sample\ndf_match.info()","66d99f5f":"# rename the two columns 'name' and 'id'\ndf_league.rename(columns={'name': 'league_name', 'id': 'league_id'}, inplace=True)\n\n# join df_match with league table by inner join type for away team\ndf_match = df_match.merge(df_league, how='inner', on='league_id')\n\n# drop now country_id and league_id\ndf_match.drop(columns=[\"league_id\",\"country_id_y\" , \"country_id_x\"], inplace=True)\n\n#Show sample\ndf_match.describe()\n\n","999bcb4f":"#Check Missed valuse befor start analysis\ndf_match.isna().sum().sum()","c8aa1a5c":"df_player = df_player.merge(df_player_attribute, on=['player_api_id','player_fifa_api_id'], how = \"inner\")\n# rename column: id_x to id \ndf_player.rename(columns={'id_x' : 'id'}, inplace=True)\n# drop column id_y,player_api_id, player_fifa_api_id\ndf_player.drop(columns=[\"id_y\",\"player_api_id\" , \"player_fifa_api_id\"], inplace=True)\n#Show sample\ndf_player.info()","d560e785":"## Drop duplicated records\ndf_player.drop_duplicates(inplace = True)\n## Drop records have missed value\ndf_player.dropna(inplace=True)","ad17ccb3":"#Check Missed valuse befor start analysis\ndf_player.isna().sum().sum()","d5983c14":"#Drop a collum which has most missed values\ndf_team_attribute.drop(columns=['buildUpPlayDribbling'], axis=1, inplace=True)","9a965c21":"df_team = df_team.merge(df_team_attribute , on = ['team_api_id','team_fifa_api_id'], how = 'inner')\n# drop column id_y,team_api_id, team_fifa_api_id, team_short_name\ndf_team.drop(columns=[\"id_y\",\"team_api_id\" , \"team_fifa_api_id\",\"team_short_name\"], inplace=True)\n# rename column: id_x to id \ndf_team.rename(columns={'id_x': 'id'}, inplace=True)\n\n#Show some information\ndf_player.info()","a275e1af":"#convert date to datatime type to get year easily\ndf_team['date'] = pd.to_datetime(df_team['date']) \ndf_team['year'] = df_team['date'].dt.year","d41a29d3":"## Drop records have missed value\ndf_team.dropna(inplace=True)\n## Drop duplicated records\ndf_team.drop_duplicates(inplace = True)\ndf_team.describe()","a7593fbf":"#Check Missed valuse befor start analysis\ndf_team.isna().sum().sum()","9523bb54":"# Create a new fuction which return name of winner team foorm every match\ndef win(df_match):\n    \"\"\"\n    Input: DataFrame contain 4 Columns home_team_goal, away_team_goal, home_team_name, away_team_name\n    OutPut: New Column for winner teams\n    \"\"\"\n    home_score = df_match[0] #home_team_goal\n    away_score = df_match[1] #away_team_goal\n    home_team_name = df_match[2] #home_team_name\n    away_team_name = df_match[3] #away_team_name\n    \n    if home_score > away_score:\n        return home_team_name\n    elif home_score < away_score:\n        return away_team_name\n    else:\n        return 'DRAW'\n    \n# Add new column which store winners team within Win Function   \ndf_match['winner']  = df_match[['home_team_goal', 'away_team_goal', 'home_team_name', 'away_team_name']].apply(win, axis=1)","593c1cab":"# Filter matches that only played in the 2015\/2016 season\nmatch_2016 = df_match[df_match['season'] == '2015\/2016'] ","cdf5f88a":"# Cuunt every match Played in each league in the 2015\/2016 season \nmatch_Played = match_2016.groupby('league_name')['home_team_name'].count().sort_values()\nmatch_Played","57b4b272":"# Figure the result\nmatch_Played.plot(kind='barh', title='# of Matches in each League');\nplt.xlabel('# of Matches');\nplt.ylabel('Leagues');","51ab9af1":"match_2016[['winner',\"league_name\"]].value_counts().loc[\"DRAW\"]","793e210a":"# Figure the result\nmatch_2016[['winner',\"league_name\"]].value_counts().loc[\"DRAW\"].plot(kind='barh', title='Overall DRAW in 2016');\nplt.xlabel('# of DRAWs');\nplt.ylabel('Leagues');","d8ced4c0":"match_2016[['winner',\"league_name\"]].value_counts().loc[\"DRAW\"]","e984a790":"wins16 = match_2016.groupby([\"league_name\"]).apply(lambda x: (x[\"winner\"]!= 'DRAW').sum()).reset_index(name='winner').sort_values('winner')\nwins16","c418c0d9":"# Figure the result\nwins16.plot(x= 'league_name' ,kind='barh', title='# of Wins in 2016');\nplt.xlabel('# of Matches');\nplt.ylabel('Leagues');","0eab59ff":"goals_2016 = match_2016.groupby('league_name')['home_team_goal'].sum().sort_values(ascending = False) + match_2016.groupby('league_name')['away_team_goal'].sum().sort_values(ascending = False)\ngoals_2016.sort_values(ascending = True, inplace =True)\ngoals_2016","7948026c":"# Figure the result\ngoals_2016.plot(kind='barh', title=' Goals in 2016');\nplt.xlabel('Goals');\nplt.ylabel('Leagues');","28ee6217":"# Add New Column f9r loser teams within lose function\ndef lose(df_match):\n    '''\n    Input: DataFrame contain 4 Columns home_team_goal, away_team_goal, home_team_name, away_team_name\n    OutPut: New Column f9r loser teams\n    '''\n    home_score = df_match[0] #home_team_goal\n    away_score = df_match[1] #away_team_goal\n    home_team_name = df_match[2] #home_team_name\n    away_team_name = df_match[3] #away_team_name\n    \n    if home_score < away_score:\n        return home_team_name\n    elif home_score > away_score:\n        return away_team_name\n    else:\n        return 'DRAW'\n    \ndf_match['loser']  = df_match[['home_team_goal', 'away_team_goal', 'home_team_name', 'away_team_name']].apply(lose, axis=1)","a2ebc56d":"# Figure the result\nmatch_2016 = df_match[df_match['season'] == '2015\/2016'] \n\nmatch_2016.loser.value_counts().tail(10).plot(kind='barh', title='LOST in 2016',xticks = [0,1,2,3,4])\nplt.xlabel('# of match');","4be6ec7f":"wins_16 = match_2016.winner.value_counts().head(10).iloc[1:]\nwins_16","8ddd6e2e":"# Figure the result\nwins_16.plot(kind='barh', title='Overall wins in 2016');","0f18b22d":"# Select wins games in 2010 \nW2010 = df_match[(df_match['season_year'] == 2010) & (df_match['winner'] != 'DRAW')]\n# Select lose games in 2010                                                     \nL2010 = df_match[(df_match['season_year'] == 2010) & (df_match['loser'] != 'DRAW')]\n# count wins games in 2010 \ncountW2010 = W2010['winner'].count()\n# count lose games in 2010 \ncountL2010 = L2010['loser'].count()                                                    \n# Sustract between winner and loser in 2010\nR2010 = W2010['winner'].value_counts()\/countW2010 - L2010['loser'].value_counts()\/countL2010\n\n# Select wins games in 2010 \nW2016 = df_match[(df_match['season_year'] == 2016) & (df_match['winner'] != 'DRAW')]\n# Select lose games in 2010                                                     \nL2016 = df_match[(df_match['season_year'] == 2016) & (df_match['loser'] != 'DRAW')]\n# count wins games in 2010 \ncountW2016 = W2016['winner'].count()\n# count lose games in 2010 \ncountL2016 = L2016['loser'].count()                                                    \n# Sustract between winner and loser in 2010\nR2016 = W2016['winner'].value_counts()\/countW2010 - L2016['loser'].value_counts()\/countL2016","d20be579":"# Select wins match in 2010 \nmatch_2010 = df_match[df_match['season_year'] == 2010]\n# Select wins match in 2016 \nmatch_2016 = df_match[df_match['season_year'] == 2016]\n#select average of away team goal in 2010\ndf_match_2010_away = match_2010.groupby(['away_team_name'])['away_team_goal'].mean()\n#select average of home team goal in 2010\ndf_match_2010_home = match_2010.groupby(['home_team_name'])['home_team_goal'].mean()\n#select average of away team goal in 2016\ndf_match_2016_away = match_2016.groupby(['away_team_name'])['away_team_goal'].mean()\n#select average of home team goal in 2010\ndf_match_2016_home = match_2016.groupby(['home_team_name'])['home_team_goal'].mean()\n#select average of all team goal in 2010\ndf_match_total_2010 = (df_match_2010_away + df_match_2010_home) \/ 2\n#select average of all team goal in 2016\ndf_match_total_2016 = (df_match_2016_away + df_match_2016_home) \/ 2\n","0e176abf":"diff_match_2016_2010 = ((df_match_total_2016 - df_match_total_2010) + ( R2016 - R2010)) \/2","1a1c06e3":"#set color list with green color for positive values and red color for negative values\ncolor = []\ndef coloring(df):\n        '''\n        input: DataFrame about rate of change match_2016_2010\n        Output: New column store color of all teams\n        '''\n        if df < 0:\n            return 'red' #red color for negative values\n        else:\n            return 'green'  #green color for positive values\n#call function coloring and store the result in color list\ncolor= diff_match_2016_2010.sort_values().apply(coloring) ","1e9e00d8":"diff_match_2016_2010.dropna(inplace=True)\nprint('Improved teams :' + str(diff_match_2016_2010[diff_match_2016_2010.sort_values() > 0].count()))\n\n# sort the values \nsorted_index = diff_match_2016_2010.sort_values().index\n\nfig, ax = plt.subplots(figsize=(15, 25))\n\n# plot a horizontal bar\nplt.barh(range(0,len(sorted_index)), diff_match_2016_2010.sort_values(),color = color)\n\n# Set the position of the y ticks\nax.set_yticks(range(0,len(sorted_index)))\n\n# Set the position of the y ticks labels\nax.set_yticklabels(sorted_index)\n\n# Set the y axis label\nax.set_ylabel('Teams')\n\n# Set the chart's title\nax.set_title('Improvements Team Quality from 2010 to 2016')\n\n# Set the y axis label \nplt.xlabel(\"Averages\")\n#show Chart\nplt.tight_layout();","551ae3f9":"# Select top player name and their penalties in descending order\nmost_penalties = df_player.groupby(['player_name'])['penalties'].max().sort_values(ascending=False)\nmost_penalties[:10]","93e99e2f":"# Figure the result in Histogram \nmost_penalties.plot(kind='hist', title='Penalties of Player');\nplt.xlabel('Penalties');\nplt.ylabel('number');","b958647c":"# Select a top team  that most winner in 2015\/2016\ntop_teams = df_team[(df_team[\"team_long_name\"].isin(wins_16.index)) & (df_team['year'] == 2015)]","b6a2603e":"# Show teams which have most wins in 2016\nwins_16.index ","91a56dc4":"digital_attributes = ['team_long_name', 'buildUpPlaySpeed', 'buildUpPlayPassing','chanceCreationPassing', 'chanceCreationCrossing', 'chanceCreationShooting','defencePressure', 'defenceAggression', 'defenceTeamWidth']\n","5da520d7":"#Sample of top_teams with only digital columns\ntop_teams[digital_attributes].head()","fe6110ee":"# Figure the result\nfig, ax = plt.subplots(figsize=(14, 14))\n\n# create a new bar char\nax = top_teams[digital_attributes].plot.barh(ax=ax);\n\nax.set_yticklabels(top_teams['team_long_name'])\n\n# Set the y axis label\nax.set_ylabel('Top Winners')\n\n# Set the chart's title\nax.set_title('Team Attributes in 2015-2016')\n\n# Set the y axis label \nplt.xlabel(\"Evaluate team attributes\")\n\nplt.tight_layout();","542398fa":"descriptive_attributes = ['buildUpPlaySpeedClass','buildUpPlayDribblingClass','buildUpPlayPassingClass','buildUpPlayPositioningClass','chanceCreationShootingClass','chanceCreationPositioningClass','defencePressureClass','defenceAggressionClass','defenceTeamWidthClass','defenceDefenderLineClass']\n# assign only columns in descriptive_attributes\nattr = top_teams[descriptive_attributes]","f96d0e40":"\nplt.figure(0)\n# Create 1st chart here.\nplt.pie(attr['buildUpPlaySpeedClass'].value_counts(), labels =  attr['buildUpPlaySpeedClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Speed',fontsize=30,ha='center')\n\nplt.figure(1)\n# Create 2nd chart here.\nplt.pie(attr['buildUpPlayDribblingClass'].value_counts(), labels =  attr['buildUpPlayDribblingClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Dribbling',fontsize=30,ha='center')\n\nplt.show() #show all figures","56f7dd41":"plt.figure(2)\n# Create 3ird chart here.\nplt.pie(attr['buildUpPlayPassingClass'].value_counts(), labels =  attr['buildUpPlayPassingClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Passing',fontsize=30,ha='center')\n\nplt.figure(3)\n# Create 4th chart here.\nplt.pie(attr['buildUpPlayPositioningClass'].value_counts(), labels =  attr['buildUpPlayPositioningClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Positioning',fontsize=30,ha='center')\n\n\nplt.show() #show all figures","80647cdf":"plt.figure(4)\n# Create 5th chart here.\nplt.pie(attr['chanceCreationShootingClass'].value_counts(), labels =  attr['chanceCreationShootingClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Shooting',fontsize=30,ha='center')\n\nplt.figure(5)\n# Create 6th chart here.\nplt.pie(attr['chanceCreationPositioningClass'].value_counts(), labels =  attr['chanceCreationPositioningClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Chance Creation Positioning',fontsize=30,ha='center')\n\n\nplt.show() #show all figures","f2aab2e4":"plt.figure(6)\n# Create 7th chart here.\nplt.pie(attr['defencePressureClass'].value_counts(), labels =  attr['defencePressureClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Defence Pressure',fontsize=30,ha='center')\n\nplt.figure(7)\n# Create 8th chart here.\nplt.pie(attr['defenceAggressionClass'].value_counts(), labels =  attr['defenceAggressionClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Defence Aggression',fontsize=30,ha='center')\n\n\nplt.show() #show all figures","e7f28f7a":"plt.figure(8)\n# Create 9th chart here.\nplt.pie(attr['defenceTeamWidthClass'].value_counts(), labels =  attr['defenceTeamWidthClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Defence Team Width',fontsize=30,ha='center')\n\nplt.figure(9)\n# Create 10th chart here.\nplt.pie(attr['defenceDefenderLineClass'].value_counts(), labels =  attr['defenceDefenderLineClass'].value_counts().index,autopct='%1.2f%%', radius=3)\nplt.figtext(.5,.8,'Defence Defender Line',fontsize=30,ha='center')\n\n\nplt.show() #show all figures","f0bbd5eb":"# Select Maximum Rate\ndf_player['overall_rating'].max()\n","b462f4ee":"# average of players' overall rating\naverage_rate = df_player['overall_rating'].mean()\naverage_rate","35c2d7ef":"above_rating = df_player[df_player['overall_rating'] > average_rate]\nabove_rating.player_name.nunique()","147e8aae":"pd.DataFrame(above_rating.describe())","304359e8":"\n# Filter data\ndata = above_rating.describe().loc['min':'max',\"overall_rating\"]\n# initialitioze figure\nfig = plt.figure(figsize =(10, 7))\n# Creating plot\nplt.boxplot(data,vert=True,patch_artist=True  ) \n#set title and lable\nplt.title(\"Overall Rating of Players\")\nplt.xlabel('Rating')\n# show plot\nplt.show()\n","aea33a21":"\n# Filter data\ndata = pd.DataFrame(above_rating.describe().loc['min':'max',\"height\"])\n# initialitioze figure\nfig = plt.figure(figsize =(10, 7))\n# Creating plot\nplt.boxplot(data,vert=True,patch_artist=True ) \n#set title and lable\nplt.title(\"height Of Players\")\nplt.xlabel('height')\n# show plot\nplt.show()\n","026ef2e9":"\n# Filter data\ndata = above_rating.describe().loc['min':'max',\"penalties\"]\n# initialitioze figure\nfig = plt.figure(figsize =(10, 7))\n# Creating plot\nplt.boxplot(data,vert=True,patch_artist=True ) \n#set title and lable\nplt.title(\"penalties Of Players\")\nplt.xlabel('penalties')\n# show plot\nplt.show()\n","c96fc5ac":"df_player[(df_player['overall_rating'] > 90)].player_name.nunique()","d124493a":"#correlation between heading accuracy and rating \ndf_player.plot(x='overall_rating', y='heading_accuracy', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Heading accuracy and Rating ')\nplt.xlabel('Overall Rating');\nplt.ylabel('Heading accuracy');","165bb454":"#correlation between rating and free kick accuracy and rating \ndf_player.plot(x='overall_rating', y='free_kick_accuracy', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Free kick accuracy and Rating ')\nplt.xlabel('Overall Rating')\nplt.ylabel('Free kick accuracy');","4e57e8a8":"#correlatio correlation between  ball control and rating \ndf_player.plot(x='overall_rating', y='ball_control', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Ball control and Rating ')\nplt.xlabel('Overall Rating')\nplt.ylabel('Ball control');","9d2cbe36":"#correlation between long shots and rating \ndf_player.plot(x='overall_rating', y='long_shots', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Long shots and Rating ')\nplt.xlabel('Overall Rating')\nplt.ylabel('Long shots')","0d9e1ca3":"#correlation between shot power and rating \ndf_player.plot(x='overall_rating', y='shot_power', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Shot power and Rating ');\nplt.xlabel('Overall Rating')\nplt.ylabel('Shot power');","d12e827a":"#correlation between marking and rating \ndf_player.plot(x='overall_rating', y='marking', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Marking and Rating ');\nplt.xlabel('Overall Rating')\nplt.ylabel('Marking');","c8962c2c":"#correlation between dribbling and rating \ndf_player.plot(x='overall_rating', y='dribbling', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Dribbling and Rating ');\nplt.xlabel('Overall Rating')\nplt.ylabel('Dribbling');","53f34ce2":"#correlation between strength and rating \ndf_player.plot(x='overall_rating', y='strength', kind='scatter', s=0.5, alpha = 0.3, title = 'Relationship between Strength and Rating ');\nplt.xlabel('Overall Rating')\nplt.ylabel('Strength');","47768b93":"Add new Columns to team table store years","bd1925e7":"#### Player Table:-\n    Contain 11060 Records & 7 Columns.\n    No duplicate records \n    Has missing values(11).","f9f56efa":"<a id='intro'><\/a>\n## Introduction\n\n   >This soccer database comes from Kaggle and is well suited for data analysis and machine learning. It contains data for soccer matches, players, and teams from several European countries from 2008 to 2016. This dataset is quite extensive\n   >I investigate the Soccer dataset. Mainly, the dataset have 7 tables called 'Country', 'League', 'Match', 'Player',\n    'Player Attributes', 'Team' and 'Team Attributes'.\n    the dataset contains useful data about 11 seasons between 2008 and 2016 in different leagues and a list of (players, teams) attributes Players and Teams' attributes* sourced from EA Sports' FIFA video game series. Detailed match events (goal types, possession, corner, cross, fouls, cards etc\u2026) for +10,000 matches 16th Oct 2016: New table containing teams' attributes from FIFA ! Each record has its table connected with the other by identification numbers. the player's table describes players' names and their weight and height. player attributes describe their abilities and rating their potentials. \n\n\n\n###  During the analysis of the dataset I wanna focus answer these questions:\n     \n<ul>\n<li>How many matches are there in each league in the 2016 season?<\/li>\n<li>Which League had the most matches end as draw in the 2016 season?<\/li>\n<li>Which League had the most Wins or not Draw in the 2016 season?<\/li>\n<li>Which team had lost the fewest matches in the 2016 season?<\/li>\n<li>Which League had the most goals in the 2016 season?<\/li>\n<li>Which teams had the most wins of matches in the 2016 season?<\/li>   \n<li>What teams improved the most over the time period? <\/li>\n<li>Which players had the most penalties?<\/li>\n<li>What team attributes lead to the most victories?<\/li>\n<li>How many Players have overall rating more than 90?<\/li>\n<li>What are the attributes that contribute to the players' overall rating?<\/li>\n<\/ul>","f77281a5":"Now we will which attributes affect to Rating of the player which is good and which is Bad effection?","07e624c6":"After realizing the DataSet We go through Clean it which handle data and remove the missed values ","a09920f4":"In this question, we will take an impression of the most defensive league","75855469":"We Drop a buildUpPlayDribbling collum which has most missed values in team table","6b94013d":"### Which players had the most penalties?","2c653b95":"In this question, you get an impression of the league's most attacking tendency","854ec956":"Now we will gather and collect data from CSV files ","6cecf137":"\n\n### Data Cleaning  (Matches Table)","54e1b274":"### Which teams had the most wins of matches in the 2016 season?","d9c6a362":"### Which League had the most matches end as draw in the 2016 season?","df1d0fdf":"Now we will Discover How many matches are there in the 2016 season? To know Most result come from leagues have more matches for Winner or Goals That's make sense","0d7127e4":"Now we will discover descriptive values in pie chart","873ea3f8":"#### Match Table:-\n    Contain 25979 Records & 115 Columns.\n    No duplicate records \n    Has a lot of missing values (407395) but all null values in columns I won't need in processes, So I'll drop it. ","e581b253":"Count players have overall rating more than 90","34d507e4":"#### League Table:-\n    Contain 11 Records & 3 Columns.\n    No duplicate records \n    No missing values. ","51b33542":"Then we take the average of total number of goals scored for each team in 2010 and 2016 and subtract them","b3fe675b":"Select players have above average rating Then Count it","5f85c3f8":"select rate of change subtract average of all team goal in 2016 and 2010 then add result to subtract wins and loses","21b5eedb":"I list all columns name store descriptive values ","bb8d300e":"### What teams improved the most over the time period?","9b6f2e7d":"Now I'll discover How many Players have an overall rating of more than 90 in the dataset who is special players","e80fdf26":"join df_match with team table by left join type for away team","f4ba19ff":"Now will figure out using a color which red color for negative values and green color for positive values","2ae25704":"#### Team Table:-\n    Contain 1458 Records & 25 Columns.\n    No duplicate records \n    Has a lot of missing values(969) but all null values in buildUpPlayDribbling colums, So I'll drop it.","4666a3f4":"join df_match with team table by inner join type for home team","22677257":"### What are the attributes that contribute to the players' overall rating?","2e48f655":"### Which team had the most Wins or not Draw in the 2016 season?","a54b5ad8":"The data contains the order of penalty kicks for each player, so we will take the last date, which contains the largest glands of penalty kicks.","ffaa9c4c":"Now we will discover which attributes lead to the most victories so we analyze data of the top 10 winner team","a9b38511":"#### Player Attributes Table:-\n    Contain 183973 Records & 42 Columns.\n    No duplicate records \n    Has a lot of missing values(47301).\n    ","50910270":"Now we will discover top teams had the most win maybe it's give us that this team did a wonderful season and gives us an impression that these teams has dangerous attack","2d3663b2":"join df_match with league table by inner join type for away team","16395fd5":"In this question, you get an impression of the most offensive league","972a819a":"\n| Table        |Records   | Columns |\n| -------------|:-------------:| ------------:|\n| League       |11             |3             |\n| Match        |25979          |115           |\n| Player       |11060         |7            |\n| Player_Attributes|183978     |42            |\n| Team        |299             |5             |\n|Team_Attributes|1458          |25            |","5d5c745a":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n\n\n \n\n","4c2dd63a":"Now in this question, I'll choose 2 diffrent years to cover a long period. So I have chosen 2010, and 2016 to compare the details of the teams. In order words, using these years we analyze what teams improved the most.\n***\n\nNow we select the number of wins in 2010 and 2016 and take the difference then return process to calculate loses match for every team in 2010 and 2016","d854d960":"now we create a function to store color of improved team and not improved","7285535a":"### Data Cleaning  (Teams Table)","eb86a566":"#### Team Table:-\n    Contain 299 Records & 5 Columns.\n    No duplicate records \n    Has missing values(11) but all null values in team_fifa_api_id column.","ae1c5859":"### How many Players have overall rating more than 90 ? ","4988e664":"<a id='limitations'><\/a>\n## Limitations \n\n\n\n>I Noted that some players table are missing from the information of table (missed values). \n\n> Noted that some Match table are missing from the information of table (missed values)\n\n>The players' name  are duplicated and incomplete so some results aren't accurated and I looking for the full names to disable matching result\n\n>in the Player Attributes table, I found \"the buildUpPlayDribbling\" column has a huge missed value so If I dropped rows, I'll lose more players so I will remove the column until I fill missed values\n\n>All Date in dataset come as string so I converted it to datetime\n\n>Most of the Challenges in missed values and duplicated records\n","5e85a22f":"I list all columns name store digital values","a23f2c35":"This question gives us an impression that these teams has a great defense and Goalkeeper","1de7a48e":"### What team attributes lead to the most victories?","f957e2cb":"### Data Cleaning  (Players)","a443024e":"# Project: Investigate a Dataset (Soccer Database)\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#limitations\">Limitations<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","4f8f9807":"### Which team had lost the fewest matches in the 2016 season?","0fc91f4c":" join df_player with df_player_attribute table by inner join type to easy found pkayer name with attributes","dc165ccb":"# What I found:\n\n+25,000 matches\n\n+10,000 players\n\n11 Countries with their lead championship\n\nSeasons 2008 to 2016\n","182fb316":"### How many goals in each League are there in the 2016 season?","37439fba":"join df_team with df_team_attribute table by inner join type to easy merge name of name beside Their attributes","80933f91":"<a id='conclusions'><\/a>\n## Conclusions\n\n\n\n>I found that all leagues have not same number of matches in one season, So each league have diffrent number of teams\nEngland Premier League & France Ligue 1  & Italy Serie A &  Spain LIGA BBVA have the most games: 380 Matches. \n\n>The most league had Draw games is France Ligue 1 108 games than England Premier League 107 games.\n\n>The most league had Win or lose games is Spain LIGA BBVA\t288 games then Italy Serie A 285 games.\n\n>the fewest team had losing matches in the 2016 season is Paris Saint-Germain which only lose 2 game.\n\n>The league that had the most score a Goals in 2015\/2016 season is England Premier League 1026 goals then Spain LIGA BBVA 1043 goals.\n\n>The most team had won in 2015\/16 is Paris Saint-Germain which win 30 game.\n\n>From  2010 to 2016, the most improved teams by looking at the average  Win times and goals are 'Paris Saint-Germain', 'Sporting CP', 'AZ', 'BSC Young Boys' and 'Napoli'.\n\n>Rickie Lambert, Mario Balotelli, Xavi Hernandez, and Andrea Pirlo are the most penalty scorer in total.\n\n>Most team attributes that lead the teams to win depend on the Change Creation Passing, defense pressure, Defense Aggression, build-up speed, and build dribbling column. Knowing that these results are according to the analysis of the top 10 winning teams\n\n>The count of Players who have an overall rating of more than 90 is 12 players\n\n>Most Top Player attributes depend on a balanced play speed, shot power, dribbling, strength.\n","24c61967":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n\n### How many matches are there in the 2016 season?","b6f98a3e":"#### Country Table:-\n    Contain 11 Records & 2 Columns.\n    No duplicate records \n    No missing values. "}}