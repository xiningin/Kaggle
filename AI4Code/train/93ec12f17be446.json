{"cell_type":{"04e2c8a4":"code","9c6d8b78":"code","aeb38dc5":"code","e8b5a747":"code","b644908e":"code","5e500415":"code","5d6d3567":"code","ab214642":"code","ed3f700d":"code","fd9a4e72":"code","d0b3fecb":"code","79cf1c23":"code","a8726ef4":"code","a160780d":"code","2dd45fe9":"markdown","0edd642d":"markdown","edfe09e6":"markdown","f1634332":"markdown","5048fc90":"markdown","a18986bb":"markdown","9a61d104":"markdown","ee9e4342":"markdown","2cf6af75":"markdown","364078d1":"markdown","a6080ff7":"markdown"},"source":{"04e2c8a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9c6d8b78":"# Import data\ndata_x = np.load(\"..\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/X.npy\")\ndata_y = np.load(\"..\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/Y.npy\")","aeb38dc5":"# Visualize to samples\nimg_size = 64\nplt.subplot(1, 3, 1)\nplt.imshow(data_x[200].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 3, 2)\nplt.imshow(data_x[800].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 3, 3)\nplt.imshow(data_x[600].reshape(img_size, img_size))\nplt.axis('off')\n","e8b5a747":"# Train-Test Split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(data_x, data_y, test_size=0.2, random_state=42)","b644908e":"# Size of elements of train_test_split methods\nprint(\"x train shape: {}\".format(x_train.shape))\nprint(\"y train shape: {}\".format(y_train.shape))\nprint(\"x test shape: {}\".format(x_test.shape))\nprint(\"y test shape: {}\".format(y_test.shape))","5e500415":"# Reshaping. We reshape x_train and x_test because Keras requires 3 dimention.\nx_train = x_train.reshape(-1,64,64,1)\nx_test = x_test.reshape(-1,64,64,1)","5d6d3567":"# New size of x_train and x_shape\nprint(\"x train shape: {}\".format(x_train.shape))\nprint(\"x test shape: {}\".format(x_test.shape))","ab214642":"# Creating Model\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n","ed3f700d":"# building of our model\nmodel = Sequential()\n\n# we add convolutional layer, count of filter = 64, kernel_size means that dimension of filter.\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (64,64,1))) \n# dimension of (64,64,1) is 3 because kernel requires 3 dimensions. Number \"1\" shows that it is used as gray scale. \nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25)) \n\n# we rewrite the top one. We don't have to write input shape because these are things that are connected to each other like chains.\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3), padding = 'Same', activation = 'relu'))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\n\n\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(10, activation = 'softmax')) \n# although sigma function is used for binary classification, softmax is a version of sigma function which is used for multi-output classification.","fd9a4e72":"model.summary()","d0b3fecb":"# defining optimizer\noptimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)","79cf1c23":"# compiling optimizer\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","a8726ef4":"# fitting\nhistory = model.fit(x_train,y_train,epochs=100,validation_data=(x_test,y_test))","a160780d":"scores = model.evaluate(x_test, y_test, verbose=0)\nprint(\"{}: {:.2f}%\".format(\"accuracy\", scores[1]*100))","2dd45fe9":"<a id=\"visualize\"><\/a>\n**Visualize**\n","0edd642d":"<a id=\"reshaping\"><\/a>\n**Reshaping**","edfe09e6":"<a id=\"creating_model\"><\/a>\n**Creating Model**","f1634332":"Accuracy of my model is 96.61%.\nAccuracy can be developed by changing hyperparameters like \"filter, kernel size\" and number of layers.\nIt is a pleasure for me to hear your suggestions.","5048fc90":"<a id=\"import\"><\/a>\n**Import Data**","a18986bb":"<a id=\"optimizer\"><\/a>\n**Defining and Compiling of Optimizer**\n","9a61d104":"<a id=\"conclusion\"><\/a>\n**Concluison**","ee9e4342":"<a id=\"accuracy\"><\/a>\n**Accuracy**","2cf6af75":"# CNN (Convolutional Neural Network) on Sign Language Digits Dataset<hr>\n\n**Introduction**\n \nIn this kernel I try to guess to pictures which are sign language correctly by using CNN. I have used Keras Library.<hr>\n\n**Content**<br>\n[Import Data](#import)<br>\n[Visualize](#visualize)<br>\n[Train-Test Split](#train-test_split)<br>\n[Reshaping](#reshaping)<br>\n[Creating Model](#creating_model)<br>\n[Building Model](#building_model)<br>\n[Defining and Compiling of Optimizer](#optimizer)<br>\n[Accuracy](#accuracy)<br>\n[Conclusion](#conclusion)<br>\n\n\n","364078d1":"<a id=\"train-test_split\"><\/a>\n**Train-Test Split**","a6080ff7":"<a id=\"building_model\"><\/a>\n**Building Model**"}}