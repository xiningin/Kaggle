{"cell_type":{"4ea76756":"code","03c9202b":"code","43637eed":"code","503fc0be":"code","24656b49":"code","52a3dec3":"code","888cb112":"code","4b40fdcb":"code","fed3458f":"markdown","084dd1e4":"markdown","2194d1f1":"markdown","6176aa9d":"markdown","9168b662":"markdown","f971f281":"markdown"},"source":{"4ea76756":"import numpy as np # Numerische Funktionen. Numpy sollte man fast immer laden.\nimport pandas as pd # Daten-Input\/Output.\nimport matplotlib.pyplot as plt # Zur Visualisierung von Daten.\n\n# Diverse weitere Pakete\nfrom collections import Counter\n#from sklearn.metrics import confusion_matrix\n#import itertools\nimport seaborn as sns\n\n#import keras\n#from keras.models import Sequential # Das normale, sequentielle Neuronale Netz.\n#from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D # Die Typen von Schichten, die wir zum Zusammenbau eines Faltenden Neuronalen Netzes (CNN) brauchen.\n#from keras.layers.normalization import BatchNormalization\n#from keras.preprocessing.image import ImageDataGenerator\n#from keras.callbacks import ReduceLROnPlateau\n#from sklearn.model_selection import train_test_split","03c9202b":"# Zeige den Inhalt unseres input-Verzeichnisses an. Wenn wir die MNIST-Datenbank hinzugef\u00fcgt haben, sollte sie hier angezeigt werden: \n# eine csv-Datei mit Traininsdaten, eine mit Testdaten und eine weitere Datei, die wir nicht brauchen.\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n#%matplotlib inline","43637eed":"train = pd.read_csv(\"..\/input\/train.csv\") # Lade die Trainingsdaten\nprint(train.shape) # Gib die Ma\u00dfe des DataFrames aus, der jetzt unsere Trainingsdaten enth\u00e4lt.\ntrain.head() # Gib den \"Kopf\" des DataFrames aus -- die ersten f\u00fcnf Zeilen, bzw. so viel davon, wie auf einen Bildschirm passt.\n","503fc0be":"# Lade die Testdaten. Wie oben f\u00fcr die Trainingsdaten.\ntest = pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\ntest.head()","24656b49":"print('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","52a3dec3":"# Wie viele Versionen der 10 Ziffern gibt es? Z\u00e4hle nach:\nz_train = Counter(train['label'])\nz_train\n\n","888cb112":"# Plotte die H\u00e4ufigkeit der 10 Ziffern. \nsns.countplot(train['label'])","4b40fdcb":"# Konvertiere in den richtigen Datentyp.\nx_train = (train.iloc[:,1:].values).astype('float32') # Die x-Werte sind das, was am Eingang des Neuronalen Netzes angelegt wird: Die Pixel der Bilder.\ny_train = train.iloc[:,0].values.astype('int32') # Die y-Werte sind die Klassen, die das Neuronale Netz ausgeben soll: die 10 Ziffern.\nx_test = test.values.astype('float32')\n\n# Das ist eine \"magische\" Funktion in Python, die matplotlib in einen anderen Status versetzt. Das f\u00fchrt dazu, dass die Bilder hier direkt im Notebook angezeigt werden.\n%matplotlib inline\n\nplt.figure(figsize=(12,10)) # Gr\u00f6\u00dfe der Ausgabe: 12 x 10 cm\nx, y = 10, 4 # Zeige ein Raster von 10 x 4 Ziffern an.\nfor i in range(40):  # Diese Schleife geht durch die insgesamt 40 subplots.\n    plt.subplot(y, x, i+1)\n    plt.imshow(x_train[i].reshape((28,28)),interpolation='nearest') # Die Bilder werden auf die Gr\u00f6\u00dfe 28 x 28 gebracht, bevor sie angezeigt werden.\nplt.show()","fed3458f":"## 4. Struktur der Daten \u00fcberpr\u00fcfen\n\nSind alle Ziffern ausreichend vorhanden?","084dd1e4":"## 5. Daten visualisieren\n\nSehen die Bilder auch wirklich aus wie Ziffern?","2194d1f1":"## 2. Daten laden\nDer gr\u00f6\u00dfte Teil der Arbeit beim Maschinenlernen und in data science allgemein ist das Aufr\u00e4umen der Daten. In unserem Fall ist die Datenbank schon in einem top Zustand; trotzdem m\u00fcssen wir sie noch in die Form bringen, die Keras erwartet. Es ist sinnvoll, sie erstmal kennen zu lernen.","6176aa9d":"## 1. Module laden\n","9168b662":"# **MNIST 2: Daten erkunden**","f971f281":"## 3. Form der Daten \u00fcberpr\u00fcfen"}}