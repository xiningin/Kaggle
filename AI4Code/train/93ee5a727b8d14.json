{"cell_type":{"37541c5a":"code","7f5fb65d":"code","e19095de":"code","9fc27bd4":"code","7bce0f2d":"code","ea0c2068":"code","f79dbc1e":"code","63e56503":"code","bbb0e717":"code","a8759b53":"code","ed1930cf":"code","92db361a":"code","755e6013":"code","328fa6f9":"code","daf1b8a9":"code","4dd66169":"code","5d4fb99b":"code","7c9b32f3":"code","30f80140":"code","ac995483":"code","acb58506":"code","b0728aa9":"code","e91c1096":"code","513baa6f":"code","de0d3243":"code","139e3ad3":"code","8df21bb6":"code","423e94f4":"code","d3246c2d":"code","ab1427cd":"code","b31fe707":"code","4a052717":"code","09785897":"code","326980f2":"code","b96a4dfc":"code","31e14a92":"markdown","19443da9":"markdown","9037857a":"markdown","245aecbd":"markdown","987f4927":"markdown","4b665791":"markdown","3d17baa2":"markdown","17870f84":"markdown"},"source":{"37541c5a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.neighbors import NearestNeighbors\nimport scipy.sparse\nfrom scipy.sparse import csr_matrix","7f5fb65d":"#the data has been imported according to Jupyter lab import system\ndata = pd.read_table('..\/input\/songrecommendersol\/10000.txt', names=['user_id', 'song_id', 'listen_count'])\nsong_data = pd.read_csv(\"..\/input\/songrecommendersol\/song_data.csv\")","e19095de":"data.head()","9fc27bd4":"data.listen_count.value_counts()[data.listen_count.value_counts()>100].hist()","7bce0f2d":"data.describe(include='all').T","ea0c2068":"data.info()","f79dbc1e":"data[data.listen_count<1]","63e56503":"#data_codes = data.copy(deep=True)","bbb0e717":"#data_codes['user_id'] = data['user_id'].astype(\"category\").cat.codes\n\n#data_codes['song_id'] = data['song_id'].astype(\"category\").cat.codes","a8759b53":"users_50=np.array(data.groupby('user_id').count()[data.groupby('user_id').count()['song_id']>150].index)","ed1930cf":"data = data.query('user_id in @users_50')","92db361a":"data=data.drop_duplicates()","755e6013":"song_data=song_data.drop_duplicates()","328fa6f9":"song_data[song_data.song_id == 'SOAXGDH12A8C13F8A1']['title'].values[0]","daf1b8a9":"knnData = pd.merge(data, song_data)\nknnData","4dd66169":"data_grouped = data.groupby(['song_id']).agg({'user_id': 'count'}).reset_index()\ndata_grouped.rename(columns = {'user_id': 'score'},inplace=True)\ndata_grouped = data_grouped.merge(song_data[['title','song_id']], on='song_id',how='left')\ndata_sort = data_grouped.sort_values(['score', 'song_id'], ascending = [0,1])\ndata_sort['Rank'] = data_sort['score'].rank(ascending=0, method='first')","5d4fb99b":"data_sort.head(10)# top 10 songs","7c9b32f3":"popularity_recommendations = data_sort.head(10)","30f80140":" def recommend(user_id):    \n        user_recommendations = popularity_recommendations\n        \n        #Add user_id column for which the recommendations are being generated\n        user_recommendations['user_id'] = user_id\n    \n        #sorting to get user_id column to the front\n        cols = user_recommendations.columns.tolist()\n        cols = cols[-1:] + cols[:-1]\n        user_recommendations = user_recommendations[cols]\n        \n        return user_recommendations","ac995483":"recommend('5a905f000fc1ff3df7ca807d57edb608863db05d')","acb58506":"## User User Colab","b0728aa9":"song_pivot=data.pivot(index='user_id',columns='song_id',values='listen_count')\nsong_pivot=song_pivot.fillna(0)\nsong_pivot.shape","e91c1096":"from sklearn.neighbors import NearestNeighbors\nknn=NearestNeighbors(n_neighbors=10,metric='cosine')\nmodel_user=knn.fit(song_pivot)","513baa6f":"model_user.kneighbors() #Returns indices of and distances to the neighbors of each point.","de0d3243":"def user_user(model, matrix, data, search_index):\n    distances, indices = model.kneighbors([matrix.iloc[search_index, :]], n_neighbors = 10)\n    for i in range(0, len(distances.flatten())):\n        if i == 0:\n            print(\"Searching recommendation for user: \", matrix.index[search_index])\n        else:\n            rows = data.loc[data['user_id'] == matrix.index[indices.flatten()[i]] ]\n            data_user = pd.DataFrame(rows)\n            data_user['distance']= distances.flatten()[i]\n            return data_user","139e3ad3":"search_index = np.random.choice(song_pivot.shape[0])\nsearch_index #random_user","8df21bb6":"user_user(model_user, song_pivot, knnData, search_index)","423e94f4":"# Item Item Colab","d3246c2d":"sparse_matrix = data.pivot(index='song_id',columns='user_id',values='listen_count')\nsparse_matrix = sparse_matrix.fillna(0)","ab1427cd":"from sklearn.neighbors import NearestNeighbors\nknn=NearestNeighbors(n_neighbors=10,metric='cosine')\nmodel_item=knn.fit(sparse_matrix)","b31fe707":"model_item.kneighbors()","4a052717":"def item_item(model, matrix, data, search_index):\n    distances, indices = model.kneighbors([matrix.iloc[search_index, :]], n_neighbors = 10)\n    for i in range(0, len(distances.flatten())):\n        if i == 0:\n            print(\"Searching recommendation for song: \", matrix.index[search_index])\n        else:\n            rows = data.loc[data['song_id'] == matrix.index[indices.flatten()[i]] ]\n            print(\" Recommendation\", i, \": \")\n            print(\"   Song: \", rows.title.values[0])  \n            print(\"   Artist: \",  rows.artist_name.values[0])\n            print(\"   Distance: \", distances.flatten()[i])","09785897":"song_id ='SOZARJQ12A6D4F66CE'\nfor i in range(0, sparse_matrix.shape[0]):\n    if song_id == sparse_matrix.index[i]:\n        print(i, sparse_matrix.index[i])\n        search_index=i","326980f2":"search_index","b96a4dfc":"item_item(model_item,sparse_matrix,knnData, search_index )","31e14a92":"## Popularity Recommender","19443da9":"**Thanks for being till here. Do not forget to drop an upvote if you liked the notebook!**","9037857a":"## Import\n\n### One of the first steps in any data science task is importing the necessary tools you will use.\n\n\nThis is an implicit Feedback problem where ratings are NOT provided","245aecbd":"# You can explore more online about recommendation systems and their implementation using python or other tools","987f4927":"\n# Create a Songs Recommender","4b665791":"## Collaborative Filtering","3d17baa2":"## Reading the Data","17870f84":"<H3 style =\"text-align:center\"><strong> Happy Learning<\/strong><\/H3>"}}