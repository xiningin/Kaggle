{"cell_type":{"24281864":"code","e7272776":"code","77550d3d":"code","d2495868":"code","b91a291d":"code","05fb2029":"code","535e26db":"code","27f06a07":"code","b86b67ae":"code","c7a83435":"code","331ecd2d":"code","3b82faf6":"code","bd4be021":"code","7fd3af77":"code","0e7d2a22":"code","f7e56ad7":"code","6988647a":"code","bdaa6f94":"code","ac89f55a":"code","3fd1ec62":"code","b1ba33ba":"code","b2e3d64f":"code","564963c1":"code","eb75e1a9":"code","45fb2cbe":"code","c607d4bf":"code","a8d03aff":"code","9e177bc5":"code","af987477":"code","722a2dd1":"code","d79faea4":"code","290ab2d2":"code","bbac9fd1":"code","8abd9e6a":"code","6d4c6862":"code","8b5a63bf":"code","5b321e3e":"code","80cff4b6":"code","1bf1b436":"code","1b371dac":"code","3b570b92":"code","b16c1de0":"code","4ad54fe8":"markdown","ddd2e6a7":"markdown","8596955a":"markdown","54ee5170":"markdown","8936d50a":"markdown","a97f0829":"markdown","b757422b":"markdown","a51e2313":"markdown","fe55d239":"markdown","4f4f938c":"markdown","aad0233b":"markdown","f2ffe071":"markdown","0cac7310":"markdown","e6e6a734":"markdown","1804fba8":"markdown","177acec0":"markdown","6cac7d61":"markdown","18ed0876":"markdown","d0ea660b":"markdown","5b6ecc58":"markdown","2813cf32":"markdown","12d09045":"markdown","f17702c9":"markdown","c40b755d":"markdown","8fb431ee":"markdown","b164fa79":"markdown","d624670a":"markdown","358c945d":"markdown","189e1266":"markdown","8f0078f5":"markdown","4823c42d":"markdown","d41fc93e":"markdown","02a298d8":"markdown","1fd95eb1":"markdown","3abe2124":"markdown","02b183bc":"markdown","34db7058":"markdown","dd9f2643":"markdown","8b69ce4a":"markdown","a901c1bb":"markdown","e042943b":"markdown","46d39288":"markdown","db7781aa":"markdown"},"source":{"24281864":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\npd.set_option('mode.chained_assignment', None)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\ndf = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', skiprows=1)\ndf[df.columns[3]].replace({'United Kingdom of Great Britain and Northern Ireland':'UK',\n                           'Iran, Islamic Republic of...':'Iran',\n                           'United Arab Emirates':'UAE',\n                           'United States of America':'USA',\n                           'Viet Nam':'Vietnam'}, inplace=True)\n\ncountry = 'USA'\ndf['country_agg'] = np.where(df[df.columns[3]]==country,country,'Others')","e7272776":"fig = px.pie(df, df.columns[3], \n       title=f\"{len(df[df[df.columns[3]]==country])*100\/len(df):.2f}% of all survey respondents are from {country}\", \n       hole=0.6)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","77550d3d":"fig = px.pie(df, df.columns[1], title='56% of all Kagglers are less than 30 years old', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nage_pct = len(df[(df[df.columns[3]]==country) & (df[df.columns[1]].isin(['18-21','22-24','25-29']))])*100\/len(df[df[df.columns[3]]==country])\ntitle = f\"{country} is older, with only {age_pct:.0f}% of Kagglers being under under 30\"\nfig = px.pie(df[df[df.columns[3]]==country], df.columns[1], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf['age1'] = df.iloc[:,1].str.split('-').str[0]\ndf['age1'].replace('70+','70', inplace=True)\ndf['age2'] = df.iloc[:,1].str.split('-').str[1]\ndf['age1'] = df.age1.astype('int')\ndf.age2.fillna(70, inplace=True)\ndf['age2'] = df.age2.astype('int')\ndf['age'] = (df.age1+df.age2)\/2\n\nglobal_median = df.age.mean()\ncountry_median = df[df.country_agg==country].age.mean()\n\nif country_median <= global_median:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {global_median - country_median:.0f} years younger than the average Kaggler\"\nelse:\n    title = f\"With an average age of {country_median:.0f},<br>Kagglers from {country} are generally {country_median - global_median:.0f} years older than the average Kaggler\"\n\nloc = df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False).index\n       , y=df.groupby(df.columns[3]).age.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df.groupby(df.columns[3]).age)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Age')\n\nfig.add_annotation(x=len(df.groupby(df.columns[3]).age)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df[df.country_agg==country][df.columns[1]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df[df.country_agg=='Others'][df.columns[1]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Age distribution of Kagglers from {country} compared to others',\n    xaxis_title='Age',\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(12)],\n        ticktext = df[df.columns[1]].sort_values().unique()\n    )\n)\n\nfig.show()","d2495868":"fig = px.pie(df, df.columns[2], title=f\"Gender distribution of all Kagglers\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncategories = sorted(df.iloc[:,2].unique())\ndf_country_gender = df[df.country_agg==country].iloc[:,2].value_counts(normalize=True).sort_index()\ndf_other_platform = df[df.country_agg=='Others'].iloc[:,2].value_counts(normalize=True).sort_index()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_gender.values*100),\n    go.Bar(name='Others', x=categories, y=df_other_platform.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Gender of respondents from {country} compared to rest of the world',\n    xaxis_title=None,\n    yaxis_title='Percentage',\n    xaxis={'categoryorder':'array',\n           'categoryarray':categories}\n)\nfig.show()\n\ngenders = [x for x in df.iloc[:,2].unique() if x !='Prefer not to say']\n\nfor gender in genders:\n    df_all = df.groupby(df.columns[3])[df.columns[2]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,gender].sort_values(ascending=False)\n    if country in df_all.index:\n        country_avg = df_all[country]\n        global_avg = len(df[df[df.columns[2]]==gender])*100\/len(df)\n        gndr_pct = len(df[df[df.columns[2]]==gender])*100\/len(df)\n        title=f\"{country_avg:.1f}% of Kagglers from {country} identify as \\\"{gender}\\\",<br>compared to the global average of {global_avg:.1f}%\"\n\n        loc = df_all.index.to_list().index(country)\n        color = ['#636EFA']*len(df_all.index)\n        color[loc] = 'orange'\n\n        fig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n        fig.update_layout(\n            shapes=[\n                dict(\n                  type= 'line',\n                  yref= 'y', y0= global_avg, y1= global_avg,\n                  xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n                )],\n            title=title,\n            xaxis_title=None,\n            yaxis_title='Percentage')\n        fig.add_annotation(x=len(df_all.index)*0.95, y=global_avg, xshift=-20, yshift=10,\n                    text=\"Global Average\",\n                    showarrow=False)\n        fig.show()\n\n    else:\n        print(f\"Nobody from {country} identified as {gender}\")","b91a291d":"df_academic = df[(df[df.columns[4]]!='I prefer not to answer') & (~df[df.columns[4]].isna())]\n\nfig = px.pie(df_academic, df_academic.columns[4], \n             title=\"Surprisingly, globally more Kagglers reported having a Master's degree (41%)<br>than a Bachelor's (36%)\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nmost_comm = df_academic[df_academic.iloc[:,3]==country].iloc[:,4].value_counts(normalize=True)[[0]]\nif most_comm.index[0] == \"Master\u2019s degree\":\n    title = f\"The same trend is observed in {country},<br>with {most_comm[0]*100:.0f}% respondents reporting having a Master's degree\"\nelse:\n    title = f\"However, in the case of {country},<br>more respondents reported having a {most_comm.index[0]} at {most_comm[0]*100:.0f}%\"\n    \nfig = px.pie(df_academic[df_academic.iloc[:,3]==country], df_academic.columns[4], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ncategories = ['No formal education past high school',\n             'Some college\/university study without earning a bachelor\u2019s degree',\n             'Professional degree',\n             'Bachelor\u2019s degree',\n             'Master\u2019s degree',\n             'Doctoral degree']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,4].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,4].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Academic Qualification of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()\n\nqualifications = df_academic.iloc[:,4].unique()\n\nfor qualification in qualifications:\n    df_all = df.groupby(df.columns[3])[df.columns[4]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,qualification].sort_values(ascending=False)\n    country_avg = df_all[country]\n    global_avg = len(df[df[df.columns[4]]==qualification])*100\/len(df)\n    gndr_pct = len(df[df[df.columns[4]]==qualification])*100\/len(df)\n    title=f\"{country_avg:.1f}% of Kagglers from {country} have {qualification},<br>compared to the global average of {global_avg:.1f}%\"\n\n    loc = df_all.index.to_list().index(country)\n    color = ['#636EFA']*len(df_all.index)\n    color[loc] = 'orange'\n\n    fig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n    fig.update_layout(\n        shapes=[\n            dict(\n              type= 'line',\n              yref= 'y', y0= global_avg, y1= global_avg,\n              xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n            )],\n        title=title,\n        xaxis_title=None,\n        yaxis_title='Percentage')\n    fig.add_annotation(x=len(df_all.index)*0.95, y=global_avg, xshift=-20, yshift=10,\n                text=\"Global Average\",\n                showarrow=False)\n    fig.show()","05fb2029":"df_job = df[~df[df.columns[5]].isna()]\nfig = px.pie(df_job, df_job.columns[5], title='Globally, 27% Kagglers are students, followed by 14% being Data Scientists', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country_job = df_job[df_job.iloc[:,3]==country].iloc[:,5].value_counts(normalize=True)\ncom_job = df_country_job[[0]].index[0]\nif com_job=='Student':\n    title = f\"For {country} too, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\nelse:\n    title = f\"However, for {country}, most Kagglers are {com_job}s ({df_country_job[0]*100:.0f}%), followed by {df_country_job[[1]].index[0]}s ({df_country_job[1]*100:.0f}%)\"\n\n    \nfig = px.pie(df_job[df_job.iloc[:,3]==country], df_job.columns[5], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\njobs = df_job.iloc[:,5].unique()\nfor job in jobs:\n    df_all = df.groupby(df.columns[3])[df.columns[5]].value_counts().groupby(level=0).apply(lambda x: 100 * x \/ float(x.sum()))[:,job].sort_values(ascending=False)\n    country_avg = df_all[country]\n    global_avg = len(df[df[df.columns[5]]==job])*100\/len(df)\n\n    loc = df_all.index.to_list().index(country)\n    color = ['#636EFA']*len(df_all.index)\n    color[loc] = 'orange'\n\n    fig = go.Figure(data=[go.Bar(x=df_all.index, y=df_all.values, marker_color=color)])\n\n    fig.update_layout(\n        shapes=[\n        dict(\n          type= 'line',\n          yref= 'y', y0= global_avg, y1= global_avg,\n          xref= 'x', x0= -0.5, x1= len(df_all.index)-0.5\n        )],\n        title=f\"{country_avg:.1f}% of Kagglers from {country} reported their job-title as \\'{job}\\',<br>compared to the global average of {global_avg:.1f}%\",\n        xaxis_title=None,\n        yaxis_title='Percentage',)\n\n    fig.add_annotation(x=len(df_all.index), y=global_avg, xshift=-60, yshift=10,\n                text=\"Global Average\",\n                showarrow=False)\n\n    fig.show()","535e26db":"df_comp = df[(~df.iloc[:,118].isna()) & (~df.iloc[:,5].isin(['Student','Currently not employed']))]\n\ndf_comp['comp1'] = df_comp.iloc[:,118].str.split('-').str[0].apply(lambda x: x.replace(',','').replace('$','').replace('>','')).astype('int')\ndf_comp['comp2'] = df_comp.iloc[:,118].str.split('-').str[1].fillna('500000').apply(lambda x: x.replace(',','')).astype('int').astype('int')\ndf_comp['comp'] = (df_comp.comp1+df_comp.comp2)\/2\n\nglobal_median = df_comp.comp.mean()\ncountry_median = df_comp[df_comp.country_agg==country].comp.mean()\n\nif country_median <= global_median:\n    title = f\"With an average annual compensation of {country_median:.0f} USD,<br>Kagglers from {country} generally earn less than the global average ({global_median:.0f} USD)\"\nelse:\n    title = f\"With an average annual compensation of {country_median:.0f} USD,<br>Kagglers from {country} generally earn more than the global average ({global_median:.0f} USD)\"\n\nloc = df_comp.groupby(df_comp.columns[3]).comp.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df_comp.groupby(df_comp.columns[3]).comp.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df_comp.groupby(df_comp.columns[3]).comp.mean().sort_values(ascending=False).index\n       , y=df_comp.groupby(df.columns[3]).comp.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df_comp.groupby(df_comp.columns[3]).comp)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Average Annual Compensation (in USD)')\n\nfig.add_annotation(x=len(df_comp.groupby(df.columns[3]).comp)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\nmost_common = df_comp[df_comp.country_agg==country].groupby(df_comp.columns[118]).size().sort_values(ascending=False)\nmost_common_comp = most_common.index[0]\nmost_common_comp_pct = most_common[0]*100\/most_common.sum()\n\nfig = px.pie(df_comp[df_comp.country_agg==country], df_comp.columns[118], \n             title=f'{most_common_comp_pct:.0f}% of Kagglers from {country} reported an annual compensation between {most_common_comp}', \n             hole=0.6)\nfig.update_traces(textposition='inside',textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()","27f06a07":"df_coding = df[~df[df.columns[6]].isna()]\n\nfig = px.pie(df_coding, df_coding.columns[6], title='65% of all survey respondents have been coding for less than 5 years', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncountry_coding_exp = len(df_coding[(df_coding[df_coding.columns[3]]==country) & (df_coding[df_coding.columns[6]].isin(['3-5 years','< 1 years','1-2 years']))])*100\/len(df_coding[df_coding[df_coding.columns[3]]==country])\nif country_coding_exp > 65:\n    title = f\"For {country}, this percentage increases to {country_coding_exp:.0f}%\"\nelif country_coding_exp < 65:\n    title = f\"For {country}, this percentage decreases to {country_coding_exp:.0f}%\" \nelse:\n    title = f\"At {country_coding_exp:.0f}%, it is the same for {country} too<br>The average Kaggler from {country} about the same coding experience as the global average\"\nfig = px.pie(df_coding[df_coding[df_coding.columns[3]]==country], df_coding.columns[6], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf_coding[df_coding.columns[6]] = df_coding[df_coding.columns[6]].replace('< 1 years','0-1 years').replace('I have never written code','0-0').apply(lambda x: x.split()[0])\ndf_coding['code1'] = df_coding.iloc[:,6].str.split('-').str[0].replace('20+','20').astype('int')\ndf_coding['code2'] = df_coding.iloc[:,6].str.split('-').str[1].fillna('20').astype('int')\ndf_coding.groupby([df_coding.columns[6]]+['code1','code2']).size()\ndf_coding['code'] = (df_coding.code1+df_coding.code2)\/2\n\nglobal_median = df_coding.code.mean()\ncountry_median = df_coding[df_coding.country_agg==country].code.mean()\n\nif country_median <= global_median:\n    title = f\"The average Kaggler from {country} has been coding for {country_median:.1f} years,<br>less than the global average of {global_median:.1f} years\"\nelse:\n    title = f\"The average Kaggler from {country} has been coding for {country_median:.1f} years,<br>more than the global average of {global_median:.1f} years\"\n\nloc = df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False).index.to_list().index(country)\ncolor = ['#636EFA']*len(df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False).index)\ncolor[loc] = 'orange'\n\nfig = go.Figure(data=[go.Bar(x=df_coding.groupby(df_comp.columns[3]).code.mean().sort_values(ascending=False).index\n       , y=df_coding.groupby(df_coding.columns[3]).code.mean().sort_values(ascending=False)\n            , marker_color=color)])\n\nfig.update_layout(\n    shapes=[\n    dict(\n      type= 'line',\n      yref= 'y', y0= global_median, y1= global_median,\n      xref= 'x', x0= -0.5, x1= len(df_coding.groupby(df_coding.columns[3]).code)-0.5\n    )],\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Average coding experience')\n\nfig.add_annotation(x=len(df_coding.groupby(df.columns[3]).code)*0.95, y=global_median, xshift=-20, yshift=10,\n            text=\"Global Average\",\n            showarrow=False)\nfig.show()\n\ncategories = ['I have never written code','< 1 years','1-2 years','3-5 years','5-10 years','10-20 years','20+ years']\n\ndf_country_agg = df[df.country_agg==country].iloc[:,6].value_counts(normalize=True)\ndf_country_agg.index = pd.Categorical(df_country_agg.index, categories)\ndf_country_agg.sort_index(inplace=True)\n\ndf_others_agg = df[df.country_agg=='Others'].iloc[:,6].value_counts(normalize=True)\ndf_others_agg.index = pd.Categorical(df_others_agg.index, categories)\ndf_others_agg.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_agg.values*100),\n    go.Bar(name='Others', x=categories, y=df_others_agg.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Coding Experience of respondents from {country} compared to Other countries',\n    xaxis_title=None,\n    yaxis_title='Percentage'\n)\nfig.show()","b86b67ae":"programming_cols = [col for col in df.columns \n                    if 'What programming languages do you use on a regular basis?' in col]\ndf_programming = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in programming_cols]\nmapping_dict = dict(zip(programming_cols,mapper))\ndf_programming = df_programming[programming_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_programming.dropna(how='all', subset=mapper, inplace=True)\ndf_programming.drop(columns=[\"None\"], inplace=True)\n\nfig = px.bar(df_programming[df_programming.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'87% of all respondents use Python on a regular basis',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False)\npop_lang = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_programming[df_programming.iloc[:,-1]==country])\nif pop_lang=='Python':\n    if most_pop_pct > 87:\n        title = f'{pop_lang} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_lang} remains the most popular programming language in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_lang} is more popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_programming[df_programming.iloc[:,-1]==country][df_programming.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","c7a83435":"ide_cols = [col for col in df.columns \n            if \"Which of the following integrated development environments (IDE's) do you use on a regular basis?\" in col]\ndf_ide = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in ide_cols]\nmapping_dict = dict(zip(ide_cols,mapper))\ndf_ide = df_ide[ide_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ide.dropna(how='all', subset=mapper, inplace=True)\ndf_ide.drop(columns=['Click to write Choice 13','None'], inplace=True)\ndf_ide.rename(columns={'Jupyter (JupyterLab, Jupyter Notebooks, etc) ':'Jupyter'}, inplace=True)\n\nfig = px.bar(df_ide[df_ide.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'64% of all respondents use Jupyter',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=False)\npop_ide = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ide[df_ide.iloc[:,-1]==country])\nif pop_ide=='Jupyter':\n    if most_pop_pct > 64:\n        title = f'{pop_ide} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ide} remains the most popular IDE in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ide} is more,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ide[df_ide.iloc[:,-1]==country][df_ide.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","331ecd2d":"nb_cols = [col for col in df.columns \n           if \"Which of the following hosted notebook products do you use on a regular basis?\" in col]\ndf_nb = df.copy()\nmapper = [col.split('-')[-1].lstrip() for col in nb_cols]\nmapping_dict = dict(zip(nb_cols,mapper))\ndf_nb = df_nb[nb_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nb.dropna(how='all', subset=mapper, inplace=True)\ndf_nb.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nb[df_nb.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'37% of all respondents use Colab Notebooks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=False)\npop_nb = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_nb[df_nb.iloc[:,-1]==country])\nif pop_nb=='Colab Notebooks':\n    if most_pop_pct > 37:\n        title = f'{pop_nb} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nb} remain the most popular hosted notebooks in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nb} are more popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nb[df_nb.iloc[:,-1]==country][df_nb.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","3b82faf6":"df_platform = df[(~df.iloc[:,47].isna()) & (df.iloc[:,47]!='None')]\n\nfig = px.pie(df_platform, df_platform.columns[47], \n             title=f\"80% of all survey respondents use a Personal Computer\/Laptop<br>as their primary computing platform for DS projects\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country_platform = df_platform[df_platform.iloc[:,3]==country][df.columns[47]].value_counts(normalize=True)*100\n\ncountry_avg = df_country_platform.loc['A personal computer or laptop']\n\nif country_avg > 80:\n    title=f\"In {country}, this percentage increases to {country_avg:.0f}%\"\nelse:\n    title=f\"In {country}, this percentage decreases to {country_avg:.0f}%\"\n    \nfig = px.pie(df_country_platform, df_country_platform.index, df_country_platform.values, title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ncategories = ['A cloud computing platform', 'A deep learning workstation', 'A personal computer or laptop', 'Other']\ndf_country_platform = df_platform[df_platform.country_agg==country].iloc[:,47].value_counts(normalize=True).sort_index()\ndf_other_platform = df_platform[df_platform.country_agg=='Others'].iloc[:,47].value_counts(normalize=True).sort_index()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_platform.values*100),\n    go.Bar(name='Others', x=categories, y=df_other_platform.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Coding Platform preference of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage',\n    xaxis={'categoryorder':'array',\n           'categoryarray':categories}\n)\nfig.show()","bd4be021":"viz_cols = [col for col in df.columns \n           if \"What data visualization libraries or tools do you use on a regular basis?\" in col]\ndf_viz = df.copy()\nmapper = [col.split('-')[-1].strip() for col in viz_cols]\nmapping_dict = dict(zip(viz_cols,mapper))\ndf_viz = df_viz[viz_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_viz.dropna(how='all', subset=mapper, inplace=True)\ndf_viz.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_viz[df_viz.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'75% of all respondents use Matplotlib',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=False)\npop_viz = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_viz[df_viz.iloc[:,-1]==country])\nif pop_viz=='Matplotlib':\n    if most_pop_pct > 75:\n        title = f'{pop_viz} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_viz} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_viz} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_viz[df_viz.iloc[:,-1]==country][df_viz.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","7fd3af77":"ml_cols = [col for col in df.columns \n           if \"Which of the following machine learning frameworks do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[0]='Scikit-learn'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'72% of all respondents use Scikit-learn',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Scikit-learn':\n    if most_pop_pct > 72:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","0e7d2a22":"ml_cols = [col for col in df.columns \n           if \"Which of the following ML algorithms do you use on a regular basis?\" in col]\ndf_ml = df.copy()\nmapper = [col.split('-')[-1].strip() for col in ml_cols]\nmapper[9]='Transformer Networks (BERT, gpt-3, etc)'\nmapping_dict = dict(zip(ml_cols,mapper))\ndf_ml = df_ml[ml_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ml.dropna(how='all', subset=mapper, inplace=True)\ndf_ml.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ml[df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'76% of all respondents use Linear or Logistic Regression',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False)\npop_ml = country_most_pop.index[0]\nmost_pop_pct = country_most_pop[0]*100\/len(df_ml[df_ml.iloc[:,-1]==country])\nif pop_ml=='Linear or Logistic Regression':\n    if most_pop_pct > 76:\n        title = f'{pop_ml} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ml} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ml} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ml[df_ml.iloc[:,-1]==country][df_ml.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","f7e56ad7":"cv_cols = [col for col in df.columns \n           if \"Which categories of computer vision methods do you use on a regular basis?\" in col]\ndf_cv = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cv_cols]\nmapping_dict = dict(zip(cv_cols,mapper))\ndf_cv = df_cv[cv_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_cv.dropna(how='all', subset=mapper, inplace=True)\ndf_cv.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_cv[df_cv.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'59% of all respondents use Image classification and other general purpose networks',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=False)\npop_cv = country_most_pop.index[0]\nif '(' in pop_cv:\n    pop_cv = pop_cv.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_cv[df_cv.iloc[:,-1]==country])\nif pop_cv=='Image classification and other general purpose networks':\n    if most_pop_pct > 59:\n        title = f'{pop_cv} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_cv} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_cv} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_cv[df_cv.iloc[:,-1]==country][df_cv.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","6988647a":"nlp_cols = [col for col in df.columns \n           if \"Which of the following natural language processing (NLP) methods do you use on a regular basis?\" in col]\ndf_nlp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in nlp_cols]\nmapping_dict = dict(zip(nlp_cols,mapper))\ndf_nlp = df_nlp[nlp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_nlp.dropna(how='all', subset=mapper, inplace=True)\ndf_nlp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_nlp[df_nlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'55% of all respondents use Word embeddings\/vectors',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=False)\npop_nlp = country_most_pop.index[0]\nif '(' in pop_nlp:\n    pop_nlp = pop_nlp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_nlp[df_nlp.iloc[:,-1]==country])\nif pop_nlp.strip()=='Word embeddings\/vectors':\n    if most_pop_pct > 55:\n        title = f'{pop_nlp} are even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\n    else:\n        title = f'{pop_nlp} remain the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_nlp} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_nlp[df_nlp.iloc[:,-1]==country][df_nlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","bdaa6f94":"ccp_cols = [col for col in df.columns \n           if \"Which of the following cloud computing platforms do you use on a regular basis?\" in col]\ndf_ccp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in ccp_cols]\nmapping_dict = dict(zip(ccp_cols, mapper))\ndf_ccp = df_ccp[ccp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ccp.dropna(how='all', subset=mapper, inplace=True)\ndf_ccp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_ccp[df_ccp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'41% of all respondents use AWS',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False)\npop_ccp = country_most_pop.index[0].strip()\nif '(' in pop_ccp:\n    pop_ccp = pop_ccp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_ccp[df_ccp.iloc[:,-1]==country])\nif pop_ccp == 'Amazon Web Services':\n    if most_pop_pct > 41:\n        title = f'{pop_ccp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ccp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ccp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","ac89f55a":"ccp_cols = [col for col in df.columns \n           if \"Do you use any of the following cloud computing products on a regular basis?\" in col]\ndf_ccp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in ccp_cols]\nmapping_dict = dict(zip(ccp_cols, mapper))\ndf_ccp = df_ccp[ccp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_ccp.dropna(how='all', subset=mapper, inplace=True)\ndf_ccp.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_ccp[df_ccp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'36% of all respondents use Amazon EC2',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False)\npop_ccp = country_most_pop.index[0].strip()\nif '(' in pop_nlp:\n    pop_ccp = pop_ccp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_ccp[df_ccp.iloc[:,-1]==country])\nif pop_ccp == 'Amazon EC2':\n    if most_pop_pct > 36:\n        title = f'{pop_ccp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_ccp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_ccp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_ccp[df_ccp.iloc[:,-1]==country][df_ccp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","3fd1ec62":"mlp_cols = [col for col in df.columns \n           if \"Do you use any of the following machine learning products on a regular basis?\" in col]\ndf_mlp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in mlp_cols]\nmapping_dict = dict(zip(mlp_cols, mapper))\ndf_mlp = df_mlp[mlp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_mlp.dropna(how='all', subset=mapper, inplace=True)\ndf_mlp.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_mlp[df_mlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'16% of all respondents use Google Cloud AI Platform \/ Google Cloud ML Engine',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_mlp[df_mlp.iloc[:,-1]==country][df_mlp.columns[:-2]].count().sort_values(ascending=False)\npop_mlp = country_most_pop.index[0].strip()\nif '(' in pop_mlp:\n    pop_mlp = pop_mlp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_mlp[df_mlp.iloc[:,-1]==country])\nif pop_mlp == 'Google Cloud AI Platform \/ Google Cloud ML Engine':\n    if most_pop_pct > 16:\n        title = f'{pop_mlp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_mlp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_mlp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_mlp[df_mlp.iloc[:,-1]==country][df_mlp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","b1ba33ba":"bdp_cols = [col for col in df.columns \n           if \"Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?\" in col]\ndf_bdp = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in bdp_cols]\nmapping_dict = dict(zip(bdp_cols, mapper))\ndf_bdp = df_bdp[bdp_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_bdp.dropna(how='all', subset=mapper, inplace=True)\ndf_bdp.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_bdp[df_bdp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'37% of all respondents use MySQL',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_bdp[df_bdp.iloc[:,-1]==country][df_bdp.columns[:-2]].count().sort_values(ascending=False)\npop_bdp = country_most_pop.index[0].strip()\nif '(' in pop_bdp:\n    pop_bdp = pop_bdp.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_bdp[df_bdp.iloc[:,-1]==country])\nif pop_bdp == 'MySQL':\n    if most_pop_pct > 37:\n        title = f'{pop_bdp} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_bdp} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_bdp} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_bdp[df_bdp.iloc[:,-1]==country][df_bdp.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\n\ndf_bdp1 = df[(~df.iloc[:,173].isna()) & (df.iloc[:,173]!='None')]\n\nfig = px.pie(df_bdp1, df_bdp1.columns[173], \n             title=f\"Globally, 22% of Kagglers use MySQL most often\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf_country_bd = df_bdp1[df_bdp1.iloc[:,3]==country][df_bdp1.columns[173]].value_counts(normalize=True)*100\n\ncountry_avg = df_country_bd.loc['MySQL ']\n\nif country_avg > 22:\n    title=f\"In {country}, this percentage increases to {country_avg:.0f}%\"\nelse:\n    title=f\"In {country}, this percentage decreases to {country_avg:.0f}%\"\n    \nfig = px.pie(df_country_bd, df_country_bd.index, df_country_bd.values, title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncategories = sorted(list(df_bdp1.iloc[:,173].unique()))\ndf_country_bd = df_bdp1[df_bdp1.country_agg==country].iloc[:,173].value_counts(normalize=True).sort_index()\ndf_other_bd = df_platform[df_platform.country_agg=='Others'].iloc[:,173].value_counts(normalize=True).sort_index()\n\nfor index in df_other_bd.index:\n        if index not in df_country_bd.index:\n            df_country_bd[index] = 0\ndf_country_bd.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_bd.values*100),\n    go.Bar(name='Others', x=categories, y=df_other_bd.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Big Data Product preference of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage',\n    xaxis={'categoryorder':'array',\n           'categoryarray':categories}\n)\nfig.show()","b2e3d64f":"bit_cols = [col for col in df.columns \n           if \"Which of the following business intelligence tools do you use on a regular basis?\" in col]\ndf_bit = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in bit_cols]\nmapping_dict = dict(zip(bit_cols, mapper))\ndf_bit = df_bit[bit_cols + [df_bit.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_bit.dropna(how='all', subset=mapper, inplace=True)\ndf_bit.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_bit[df_bit.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'27% of all respondents use Tableau',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_bit[df_bit.iloc[:,-1]==country][df_bit.columns[:-2]].count().sort_values(ascending=False)\npop_bit = country_most_pop.index[0].strip()\nif '(' in pop_bit:\n    pop_bit = pop_bit.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_bit[df_bit.iloc[:,-1]==country])\nif pop_bit == 'Tableau':\n    if most_pop_pct > 27:\n        title = f'{pop_bit} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop_bit} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop_bit} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_bit[df_bit.iloc[:,-1]==country][df_bit.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ndf_bit1 = df[(~df.iloc[:,189].isna()) & (df.iloc[:,189]!='None')]\n\nfig = px.pie(df_bit1, df_bit1.columns[189], \n             title=f\"Globally, 36% of Kagglers use Tableau most often\", hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ndf_country_bi = df_bit1[df_bit1.iloc[:,3]==country][df_bit1.columns[189]].value_counts(normalize=True)*100\n\ncountry_avg = df_country_bi.loc['Tableau']\n\nif country_avg > 36:\n    title=f\"In {country}, this percentage increases to {country_avg:.0f}%\"\nelse:\n    title=f\"In {country}, this percentage decreases to {country_avg:.0f}%\"\n    \nfig = px.pie(df_country_bi, df_country_bi.index, df_country_bi.values, title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\ncategories = sorted(list(df_bit1.iloc[:,189].unique()))\ndf_country_bi = df_bit1[df_bit1.country_agg==country].iloc[:,189].value_counts(normalize=True).sort_index()\ndf_other_bi = df_bit1[df_bit1.country_agg=='Others'].iloc[:,189].value_counts(normalize=True).sort_index()\n\nfor index in df_other_bi.index:\n    if index not in df_country_bi.index:\n        df_country_bi[index] = 0\ndf_country_bi.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, x=categories, y=df_country_bi.values*100),\n    go.Bar(name='Others', x=categories, y=df_other_bi.values*100)\n])\n# Change the bar mode\nfig.update_layout(\n    title=f'Business Intelligence Product preference of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage',\n    xaxis={'categoryorder':'array',\n           'categoryarray':categories}\n)\nfig.show()","564963c1":"cols = [col for col in df.columns \n           if \"Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'9% of all respondents use Automation of full ML pipelines',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\nmost_pop_pct = country_most_pop.loc['Automation of full ML pipelines (e.g. Google AutoML, H20 Driverless AI)']*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif most_pop_pct > 9:\n    title = f'Automation of full ML pipelines is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f'Automation of full ML pipelines is less popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","eb75e1a9":"cols = [col for col in df.columns \n           if \"Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'29% of all respondents use Auto-Sklearn',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Auto-Sklearn':\n    if most_pop_pct > 29:\n        title = f'{pop} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","45fb2cbe":"cols = [col for col in df.columns \n           if \"Do you use any tools to help manage machine learning experiments?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['No \/ None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'20% of all respondents use TensorBoard',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'TensorBoard':\n    if most_pop_pct > 20:\n        title = f'{pop} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","c607d4bf":"cols = [col for col in df.columns \n           if \"Where do you publicly share or deploy your data analysis or machine learning applications?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['I do not share my work publicly'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'52% of all respondents use share their work on GitHub',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'GitHub':\n    if most_pop_pct > 52:\n        title = f'{pop} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","a8d03aff":"cols = [col for col in df.columns \n           if \"On which platforms have you begun or completed data science courses?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'53% of all respondents use Coursera for learning',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Coursera':\n    if most_pop_pct > 53:\n        title = f'{pop} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop} is popular,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","9e177bc5":"cols = [col for col in df.columns \n           if \"Who\/what are your favorite media sources that report on data science topics?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'60% of all respondents use Kaggle to stay updated on Data Science',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Kaggle':\n    if most_pop_pct > 60:\n        title = f'{pop} is even more popular in {country},<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\n    else:\n        title = f'{pop} remains the most popular in {country} too,<br>with {most_pop_pct:.0f}% of respondents using it on a regular basis'\nelse:\n    title = f\"However, in {country}, {pop} are popular,<br>with {most_pop_pct:.0f}% of respondents using them on a regular basis\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","af987477":"cols = [col for col in df.columns \n           if \"Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'59% of all respondents hope to become familiar with AWS',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Amazon Web Services':\n    if most_pop_pct > 60:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","722a2dd1":"cols = [col for col in df.columns \n           if \"In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'Inspite of AWS\\'s popularity, more respondents globally want to become more familiar<br>Google Cloud Compute Engine (47%)',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Google Cloud Compute Engine':\n    if most_pop_pct > 47:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","d79faea4":"cols = [col for col in df.columns \n           if \"In the next 2 years, do you hope to become more familiar with any of these specific machine learning products?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'Google maintains the lead here too, with 50% respondents globally<br>wanting to become more familiar with Google Cloud AI Platform\/ML Engine',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Google Cloud AI Platform \/ Google Cloud ML Engine':\n    if most_pop_pct > 50:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","290ab2d2":"cols = [col for col in df.columns \n           if \"Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'At 50%, the humble MySQL is still the most desired Big Data Product',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'MySQL':\n    if most_pop_pct > 50:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","bbac9fd1":"cols = [col for col in df.columns \n           if \"Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'47% of all respondents hope to become more familiar with Tableau',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Tableau':\n    if most_pop_pct > 47:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","8abd9e6a":"cols = [col for col in df.columns \n           if \"Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'43% of all respondents hope to become more familiar with Automated Model Selection',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Automated model selection':\n    if most_pop_pct > 43:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br>although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","6d4c6862":"cols = [col for col in df.columns \n           if \"Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'51% of all respondents hope to become more familiar with Auto-Sklearn',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'Auto-Sklearn':\n    if most_pop_pct > 51:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br>although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","8b5a63bf":"cols = [col for col in df.columns \n           if \"In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?\" in col]\ndf_filtered = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in cols]\nmapping_dict = dict(zip(cols, mapper))\ndf_filtered = df_filtered[cols + [df_filtered.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_filtered.dropna(how='all', subset=mapper, inplace=True)\ndf_filtered.drop(columns=['None'], inplace=True)\n\nfig = px.bar(df_filtered[df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'44% of all respondents hope to become more familiar with TensorBoard',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False)\npop = country_most_pop.index[0].strip()\nif '(' in pop:\n    pop = pop.split('(')[0].strip()\nmost_pop_pct = country_most_pop[0]*100\/len(df_filtered[df_filtered.iloc[:,-1]==country])\nif pop == 'TensorBoard':\n    if most_pop_pct > 44:\n        title = f'In {country}, at {most_pop_pct:.0f}%,<br>even more respondents hope to become familiar with {pop}'\n    else:\n        title = f'In {country}, {pop} is still highest in demand,<br> although slightly less popular at {most_pop_pct:.0f}%'\nelse:\n    title = f\"However, in {country}, more respondents hope to become familiar with {pop} ({most_pop_pct:.0f}%)\"\n\nfig = px.bar(df_filtered[df_filtered.iloc[:,-1]==country][df_filtered.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","5b321e3e":"df_wp_size = df[~df.iloc[:,107].isna()]\n\nfig = px.pie(df_wp_size, df_wp_size.columns[107], title='51% of all Kagglers work in companies with less than 250 employees', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nsize_pct = len(df_wp_size[(df_wp_size[df_wp_size.columns[3]]==country) & (df_wp_size[df_wp_size.columns[107]].isin(['0-49 employees','50-249 employees']))])*100 \\\n\/len(df_wp_size[df_wp_size[df_wp_size.columns[3]]==country])\nif size_pct > 51:\n    title = f\"For {country}, this percentage increases to {size_pct:.0f}%<br>Kagglers from {country} tend to work in smaller companies\"\nelif size_pct < 51:\n    title = f\"For {country}, this percentage decreases to {size_pct:.0f}%<br>Kagglers from {country} tend to work in larger companies\"\nelse:\n    title = f\"At {size_pct:.0f}%, it is the same for {country} too\"\nfig = px.pie(df_wp_size[df_wp_size[df_wp_size.columns[3]]==country], df_wp_size.columns[107], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_wp_size[df_wp_size.country_agg==country][df_wp_size.columns[107]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df_wp_size[df_wp_size.country_agg=='Others'][df_wp_size.columns[107]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Workplace size of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(5)],\n        ticktext = df_wp_size[df_wp_size.columns[107]].sort_values().unique()\n    )\n)\n\nfig.show()","80cff4b6":"df_dsts_size = df[~df.iloc[:,108].isna()]\n\nfig = px.pie(df_dsts_size, df_dsts_size.columns[108], \n             title='60% of all Kagglers work in companies with less than 5 individuals handling Data Science workloads', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\n\nsize_pct = len(df_dsts_size[(df_dsts_size[df_dsts_size.columns[3]]==country) & (df_dsts_size[df_wp_size.columns[108]].isin(['0','1-2', '3-4']))])*100 \\\n\/len(df_dsts_size[df_dsts_size[df_dsts_size.columns[3]]==country])\nif size_pct > 60:\n    title = f\"For {country}, this percentage increases to {size_pct:.0f}%<br>Kagglers from {country} work in companies with smaller Data Science teams\"\nelif size_pct < 60:\n    title = f\"For {country}, this percentage decreases to {size_pct:.0f}%<br>Kagglers from {country} work in companies with larger Data Science teams\"\nelse:\n    title = f\"At {size_pct:.0f}%, it is the same for {country} too\"\nfig = px.pie(df_dsts_size[df_dsts_size[df_dsts_size.columns[3]]==country], df_dsts_size.columns[108], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_dsts_size[df_dsts_size.country_agg==country][df_dsts_size.columns[108]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df_dsts_size[df_dsts_size.country_agg=='Others'][df_dsts_size.columns[108]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Company Data Science Team size of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(7)],\n        ticktext = df_dsts_size[df_dsts_size.columns[108]].sort_values().unique()\n    )\n)\n\nfig.show()","1bf1b436":"df_mla = df[~df.iloc[:,109].isna()]\n\nfig = px.pie(df_mla, df_mla.columns[109], \n             title='20% of all Kagglers work in companies which don\\'t use ML models', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nsize_pct = len(df_mla[(df_mla[df_mla.columns[3]]==country) & \n                      (df_mla[df_mla.columns[109]].isin(['No (we do not use ML methods)']))])*100 \\\n\/len(df_mla[df_mla[df_mla.columns[3]]==country])\nif size_pct > 20:\n    title = f\"For {country}, this percentage increases to {size_pct:.0f}%<br>Less Kagglers from {country} work in a company using ML models\"\nelif size_pct < 20:\n    title = f\"For {country}, this percentage decreases to {size_pct:.0f}%<br>More Kagglers from {country} work in a company using ML models\"\nelse:\n    title = f\"At {size_pct:.0f}%, it is the same for {country} too\"\nfig = px.pie(df_mla[df_mla[df_mla.columns[3]]==country], df_mla.columns[109], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_mla[df_mla.country_agg==country][df_mla.columns[109]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df_mla[df_mla.country_agg=='Others'][df_mla.columns[109]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'ML adoption in workplaces of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(7)],\n        ticktext = df_mla[df_mla.columns[109]].sort_values().unique()\n    )\n)\n\nfig.show()","1b371dac":"role_cols = [col for col in df.columns \n           if \"Select any activities that make up an important part of your role at work\" in col]\ndf_role = df.copy()\nmapper = [col.split('- ',maxsplit=2)[2] for col in role_cols]\nmapping_dict = dict(zip(role_cols,mapper))\ndf_role = df_role[role_cols + [df.columns[3]] + ['country_agg']].rename(columns=mapping_dict)\ndf_role.dropna(how='all', subset=mapper, inplace=True)\n\nfig = px.bar(df_role[df_role.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=f'21% of all respondents are involved in ML research',\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()\n\ncountry_most_pop = df_role[df_role.iloc[:,-1]==country][df_role.columns[:-2]].count().sort_values(ascending=False)\nresearch_cnt = country_most_pop.loc['Do research that advances the state of the art of machine learning']\nresearch_pct = research_cnt*100\/len(df_role[df_role.iloc[:,-1]==country])\nif research_pct > 21:\n    title = f'At {research_pct:.0f}%, more Kagglers from {country} are involved in ML research than the global average'\nelif research_pct < 21:\n    title = f'At {research_pct:.0f}%, less Kagglers from {country} are involved in ML research than the global average'\nelse:\n    title = f'At {research_pct:.0f}%, the percentage of Kagglers {country} involved in ML research is the same as the global average'\n\nfig = px.bar(df_role[df_role.iloc[:,-1]==country][df_role.columns[:-2]].count().sort_values(ascending=False))\nfig.update_layout(\n    title=title,\n    xaxis_title=None,\n    yaxis_title='Number of respondents',\n    showlegend=False\n)\nfig.show()","3b570b92":"df_ml_spend = df[~df.iloc[:,119].isna()]\ndf_ml_spend[df_ml_spend.columns[119]] = df_ml_spend[df_ml_spend.columns[119]].apply(lambda x: x.replace('$','').replace(',',''))\n\nfig = px.pie(df_ml_spend, df_ml_spend.columns[119], \n             title='37% of all Kagglers work in companies which don\\'t spend on ML\/Cloud', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nsize_pct = len(df_ml_spend[(df_ml_spend.iloc[:,3]==country) & (df_ml_spend.iloc[:,119]=='0 (USD)')])*100\/sum(df_ml_spend.iloc[:,3]==country)\n\nif size_pct > 37:\n    title = f\"For {country}, this percentage increases to {size_pct:.0f}%<br>More Kagglers from {country} work in a company not spending on ML\/Cloud\"\nelif size_pct < 37:\n    title = f\"For {country}, this percentage decreases to {size_pct:.0f}%<br>More Kagglers from {country} work in a company spending on ML\/Cloud\"\nelse:\n    title = f\"At {size_pct:.0f}%, it is the same for {country} too\"\n    \nfig = px.pie(df_ml_spend[df_ml_spend[df_ml_spend.columns[3]]==country], df_ml_spend.columns[119], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide')\nfig.show()\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_ml_spend[df_ml_spend.country_agg==country][df_ml_spend.columns[119]].value_counts(normalize=True).sort_index()*100),\n    go.Bar(name='Others', y=df_ml_spend[df_ml_spend.country_agg=='Others'][df_ml_spend.columns[119]].value_counts(normalize=True).sort_index()*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Spend on ML\/Cloud in workplaces of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(6)],\n        ticktext = df_ml_spend[df_ml_spend.columns[119]].sort_values().unique()\n    )\n)\n\nfig.show()","b16c1de0":"df_mla = df[~df.iloc[:,243].isna()]\n\nfig = px.pie(df_mla, df_mla.columns[243], \n             title='46% of all Kagglers primarily use their local development environment', hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\nsize_pct = len(df_mla[(df_mla[df_mla.columns[3]]==country) & \n                      (df_mla[df_mla.columns[243]].isin(['Local development environments (RStudio, JupyterLab, etc.)']))])*100 \\\n\/len(df_mla[df_mla[df_mla.columns[3]]==country])\nif size_pct > 46:\n    title = f\"For {country}, this percentage increases to {size_pct:.0f}%\"\nelif size_pct < 46:\n    title = f\"For {country}, this percentage decreases to {size_pct:.0f}%\"\nelse:\n    title = f\"At {size_pct:.0f}%, it is the same for {country} too\"\nfig = px.pie(df_mla[df_mla[df_mla.columns[3]]==country], df_mla.columns[243], title=title, hole=0.6)\nfig.update_traces(textinfo='percent+label')\nfig.update_layout(uniformtext_minsize=10, uniformtext_mode='hide', showlegend=False)\nfig.show()\n\ndf_country = df_mla[df_mla.country_agg==country][df_mla.columns[243]].value_counts(normalize=True).sort_index()\ndf_others = df_mla[df_mla.country_agg=='Others'][df_mla.columns[243]].value_counts(normalize=True).sort_index()\n\nfor index in df_others.index:\n        if index not in df_country.index:\n            df_country[index] = 0\ndf_country.sort_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Bar(name=country, y=df_country.values*100),\n    go.Bar(name='Others', y=df_others.values*100)\n])\n\n# Change the bar mode\nfig.update_layout(\n    barmode='group',\n    title=f'Primary Tool used at Work in workplaces of Kagglers from {country} compared to others',\n    xaxis_title=None,\n    yaxis_title='Percentage of respondents',\n    xaxis = dict(\n        tickmode = 'array',\n        tickvals = [x for x in range(7)],\n        ticktext = df_mla[df_mla.columns[243]].sort_values().unique()\n    )\n)\n\nfig.show()","4ad54fe8":"## 7. Coding Experience\n<font color=red> Only includes respondents who answered the question \"<b>For how many years have you been writing code and\/or programming?<\/b>\" <\/font>","ddd2e6a7":"## 9. IDE\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following integrated development environments (IDE's) do you use on a regular basis?<\/b>'<\/font>","8596955a":"## 23. AutoML Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?<\/b>'<\/font>","54ee5170":"## 34. Machine Learning \/ Partial AutoML Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which specific automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?<\/b>'<\/font>","8936d50a":"## 37. Data Science Team Size\n<font color=red>Only includes respondents who answered the question '<b>Approximately how many individuals are responsible for data science workloads at your place of business?<\/b>'<\/font>","a97f0829":"## 20. Big Data Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you use on a regular basis?<\/b>'<\/font>","b757422b":"## 10. Hosted Notebooks\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following hosted notebook products do you use on a regular basis?<\/b>'<\/font>","a51e2313":"## 17. Cloud Computing Platforms\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following cloud computing platforms do you use on a regular basis?<\/b>'<\/font>","fe55d239":"# Learning Preferences\n## 26. Data Science Learning Platform\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>On which platforms have you begun or completed data science courses?<\/b>'<\/font>","4f4f938c":"## 24. ML Experiment Management Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following automated machine learning tools (or partial AutoML tools) do you use on a regular basis?<\/b>'<\/font>","aad0233b":"## 41. Primary Tool used at Work\n<font color=red>Only includes respondents who answered the question '<b>What is the primary tool that you use at work or school to analyze data?<\/b>'<\/font>","f2ffe071":"## 6. Annual Compensation (in USD)\nThe average annual wage of an American is around 36K USD ([Source](https:\/\/en.wikipedia.org\/wiki\/Personal_income_in_the_United_States)). An average Kaggler from the US makes around 3 times of this.  \nWith an average annual compensation of 120K USD, Americans are the richest on Kaggle (tied with the Swiss).  \n<font color=red>Only includes respondents who are <b>employed<\/b> and have answered the question '<b>What is your current yearly compensation?<\/b>'<\/font>","0cac7310":"## 12. Data Visualization Library\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>What data visualization libraries or tools do you use on a regular basis?<\/b>'<\/font>","e6e6a734":"# Background\n## 4. Academic qualification\n<font color=red> Only includes respondents who answered the question \"<b>What is the highest level of formal education that you have attained or plan to attain within the next 2 years?<\/b>\" <\/font> ","1804fba8":"## 13. Machine Learning Frameworks\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following machine learning frameworks do you use on a regular basis?<\/b>'<\/font>","177acec0":"## 3. Gender diversity","6cac7d61":"# Coding preferences\n## 8. Programming language\n<font color=red>Only includes respondents who chose atleast one option for the question \"<b>What programming languages do you use on a regular basis?<\/b>\"<\/font>","18ed0876":"## 29. Cloud Computing Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>In the next 2 years, do you hope to become more familiar with any of these specific cloud computing products?<\/b>'<\/font>","d0ea660b":"## 39. Role at Work\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Select any activities that make up an important part of your role at work<\/b>'<\/font>","5b6ecc58":"## 28. Cloud Computing Platforms\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following cloud computing platforms do you hope to become more familiar with in the next 2 years?<\/b>'<\/font>","2813cf32":"## 14. Machine Learning Algorithms\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following ML algorithms do you use on a regular basis?<\/b>'<\/font>","12d09045":"## 30. Machine Learning Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>In the next 2 years, do you hope to become more familiar with any of these specific machine learning products?<\/b>'<\/font>","f17702c9":"# Objective\n\n## This notebook aims to analyze how Kagglers from the US differ from others\n\n<b>Data Source<\/b>: kaggle_survey_2020_responses.csv\n\nNotebook forked from my more generic work - [Kaggle 2020: Your Country VS the World](https:\/\/www.kaggle.com\/siddhantsadangi\/kaggle-2020-your-country-vs-the-world)\n\n<b>Please don't forget to <font color=green>UPVOTE<\/font> if you find this interesting. Feedback is more than welcome :)<\/b>\n\n### This analysis convers <font color=green>ALL<\/font> the questions asked in the Kaggle 2020 DS and ML survey, divided into the below sections:\n* Demographics\n* Personal Background\n* Personal Preferences\n* Learning Preferences\n* Workplace\n\n### So hold on tight, this is going to take a while!","c40b755d":"## 31. Big Data Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following big data products (relational databases, data warehouses, data lakes, or similar) do you hope to become more familiar with in the next 2 years?<\/b>'<\/font>","8fb431ee":"## 18. Cloud Computing Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Do you use any of the following cloud computing products on a regular basis?<\/b>'<\/font>","b164fa79":"# Thanks!\n\nThat should have taken a while. Thanks for going through my notebook.  \nPlease don't forget to <font color=green><b>UPVOTE<\/b><\/font>, and suggest what else you would like to be added.  \nAlso, would love to know which analysis you found particularly interesting, and why.\n\n## Check-out my similar works on the Kaggle 2020 survey\n* [Kaggle 2020: Your Country VS the World](https:\/\/www.kaggle.com\/siddhantsadangi\/kaggle-2020-your-country-vs-the-world) - Fork and Edit this to generate insights for any country. Only a parameter change required\n* [Kaggle 2020: India VS the World](https:\/\/www.kaggle.com\/siddhantsadangi\/kaggle-2020-india-vs-the-world-all-questions)","d624670a":"# Demographics\n## 1. Country\n\n4.22% of the world population is American ([Source](https:\/\/en.wikipedia.org\/wiki\/World_population))","358c945d":"## 11. Computing Platform\n\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>What type of computing platform do you use most often for your data science projects?<\/b>'<\/font>","189e1266":"## 19. Machine Learning Products\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Do you use any of the following machine learning products on a regular basis?<\/b>'<\/font>","8f0078f5":"## 15. Computer Vision Methods\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which categories of computer vision methods do you use on a regular basis?<\/b>'<\/font>","4823c42d":"## 33. ML Workflow Automation Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which categories of automated machine learning tools (or partial AutoML tools) do you hope to become more familiar with in the next 2 years?<\/b>'<\/font>","d41fc93e":"## 38. Machine Learning Adoption at Work\n<font color=red>Only includes respondents who answered the question '<b>Does your current employer incorporate machine learning methods into their business?<\/b>'<\/font>","02a298d8":"## 25. Data Anaysis sharing\/ML Experiment Deployment Platform\n<font color=red>Only includes respondents who share their Data Analysis\/ML Experiments publicly<\/font>","1fd95eb1":"## 21. Business Intelligence Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following business intelligence tools do you use on a regular basis?<\/b>'<\/font>","3abe2124":"## 35. ML Experiment Management Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>In the next 2 years, do you hope to become more familiar with any of these tools for managing ML experiments?<\/b>'<\/font>","02b183bc":"# Workplace\n\n## 36. Size\n<font color=red>Only includes respondents who answered the question '<b>What is the size of the company where you are employed?<\/b>'<\/font>","34db7058":"## 22. ML Lifecycle Automation Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Do you use any automated machine learning tools (or partial AutoML tools) on a regular basis?<\/b>'<\/font>","dd9f2643":"## 5. Job title\n<font color=red> Only includes respondents who answered the question \"<b>Select the title most similar to your current role (or most recent title if retired)<\/b>\" <\/font>","8b69ce4a":"## 2. Age\n\nThe Global Median age is a bit more than 30 years. ([Source](https:\/\/ourworldindata.org\/age-structure))  \nThe Median age in the US is 38 years. ([Source](https:\/\/www.census.gov\/programs-surveys\/acs))","a901c1bb":"## 32. Business Intelligence Tools\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following business intelligence tools do you hope to become more familiar with in the next 2 years?<\/b>'<\/font>","e042943b":"## 16. NLP Methods\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Which of the following natural language processing (NLP) methods do you use on a regular basis?<\/b>'<\/font>","46d39288":"## 27. Data Science Media Sources\n<font color=red>Only includes respondents who chose atleast one option for the question '<b>Who\/what are your favorite media sources that report on data science topics?<\/b>'<\/font>","db7781aa":"## 40. Spend on ML\/Cloud\n<font color=red>Only includes respondents who answered the question '<b>Approximately how much money have you (or your team) spent on machine learning and\/or cloud computing services at home (or at work) in the past 5 years (approximate $USD)?<\/b>'<\/font>"}}