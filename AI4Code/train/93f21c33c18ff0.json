{"cell_type":{"72343132":"code","1b5d3350":"code","e0815040":"code","44394a02":"code","02bd0303":"code","b63e952d":"code","9576cc49":"code","4b34bdc6":"code","923462a0":"code","5432bd44":"code","776ff931":"code","6b517ef8":"code","05676b21":"code","da1faa9d":"code","0dbf2e61":"code","8a34dc20":"code","2ced6f76":"code","6612a232":"code","39b9df9c":"code","c1a74889":"code","1c23d432":"code","f8a10a74":"code","fd989897":"code","f1e58e2d":"code","9bc21114":"code","fafb77bd":"code","6cc36c65":"code","15a8c459":"code","df446d3a":"markdown","daabfd65":"markdown","240c7d10":"markdown","b0d0cbe6":"markdown","07de80d6":"markdown","c199ec32":"markdown","51531ab8":"markdown","4c7d8fa6":"markdown","84a2c827":"markdown","e00ff19a":"markdown","270f1bb6":"markdown","abc6a4bb":"markdown","fb3e312c":"markdown","15742880":"markdown","6940a900":"markdown","eb39480f":"markdown","40a7f092":"markdown","a932bf42":"markdown","b7afe7ea":"markdown","63072883":"markdown","bf857210":"markdown","38b4a686":"markdown","39d7828d":"markdown","e78a7eda":"markdown","9da93edb":"markdown","a3df5159":"markdown","78a49356":"markdown","02ff89b6":"markdown","85863ef6":"markdown","04dca175":"markdown","8146b0b6":"markdown","c9e7c177":"markdown","15a4cea4":"markdown"},"source":{"72343132":"import pandas as pd\nprint(\"Setup Complete.\")","1b5d3350":"fruit_sales = pd.DataFrame([[35, 21],[41, 34]], index=[\"2017 Sales\", \"2018 Sales\"], columns=[\"Apples\", \"Bananas\"])\nprint(fruit_sales)","e0815040":"ingredients = pd.Series([\"4 cups\", \"1 cup\", \"2 large\", \"1 can\"], \n                        index=[\"Flour\", \"Milk\", \"Eggs\", \"Spam\"],\n                        name = \"Dinner\")\nprint(ingredients)","44394a02":"reviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data_first150k.csv\", index_col=0)\nprint(reviews.head())","02bd0303":"desc = reviews[\"description\"]\nprint(desc)\n# or\ndesc = reviews.description\nprint(desc)","b63e952d":"first_description = reviews.description.iloc[0]\nprint(first_description)","9576cc49":"indices = [0, 1, 10, 100]\nlabels = [\"country\", \"province\", \"region_1\", \"region_2\"]\ndf = reviews.loc[indices, labels]\nprint(df.head())","4b34bdc6":"italian_wines = reviews[reviews.country == \"Italy\"]\nprint(italian_wines)","923462a0":"reviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)","5432bd44":"median_points = reviews.points.median()\nprint(median_points)\nmean_points = reviews.points.mean()\nprint(mean_points)","776ff931":"countries = reviews.country.unique()\nprint(countries)","6b517ef8":"reviews_per_country = reviews[\"country\"].value_counts()\nprint(reviews_per_country)","05676b21":"bargain_idx = (reviews.points \/ reviews.price).idxmax()\nbargain_wine = reviews.loc[bargain_idx, 'title']\nprint(bargain_wine)","da1faa9d":"n_trop = reviews.description.map(lambda desc: \"tropical\" in desc).sum()\nn_fruity = reviews.description.map(lambda desc: \"fruity\" in desc).sum()\ndescriptor_counts = pd.Series([n_trop, n_fruity], index=['tropical', 'fruity'])\nprint(descriptor_counts)","0dbf2e61":"def toStar(row):\n    if row.points >= 95:\n        return 3\n    elif row.points >= 85:\n        return 2\n    else:\n        return 1\n\nstar_ratings = reviews.apply(toStar,axis=\"columns\")\nprint(star_ratings)","8a34dc20":"reviews_written = reviews.groupby('taster_twitter_handle').size()\nprint(reviews_written)","2ced6f76":"best_rating_per_price = reviews.groupby('price').points.max().sort_index()\nprint(best_rating_per_price)","6612a232":"price_extremes = reviews.groupby('variety').price.agg([min,max])\nprint(price_extremes)","39b9df9c":"sorted_varieties = price_extremes.sort_values(by=['min', 'max'], ascending=False)\nprint(sorted_varieties)","c1a74889":"reviewer_mean_ratings = reviews.groupby('taster_name').points.mean()\nprint(reviewer_mean_ratings)\n","1c23d432":"reviewer_mean_ratings.describe()","f8a10a74":"country_variety_counts = reviews.groupby([\"country\", \"variety\"]).size().sort_values(ascending=False)\nprint(country_variety_counts)","fd989897":"dtype = reviews.points.dtype\nprint(dtype)","f1e58e2d":"point_strings = reviews.points.astype(\"str\")\nprint(point_strings)","9bc21114":"n_missing_prices = len(reviews[reviews.price.isnull()])\nprint(n_missing_prices)","fafb77bd":"reviews_per_region = reviews.price.fillna(\"Unknown\")\nprint(reviews_per_region)","6cc36c65":"renamed = reviews.rename(columns={\"region_1\": \"region\", \"region_2\": \"locale\"})\nprint(renamed)","15a8c459":"reindexed = reviews.rename_axis(\"wines\", axis=\"rows\")\nprint(reindexed)","df446d3a":"# Indexing, Selecting & Assigning","daabfd65":"In case of missing data, we can fill the data with \"Unknown\":","240c7d10":"We can access to a specific field of the data as follows:","b0d0cbe6":"The previous DataFrame could be also sorted in descending order according to the value of one of its columns:","07de80d6":"In addition, we can use one of the features of the data as index. Then, we can also sorted it according to personal specifications. For example, we can create a table which indexes correspond to the prices and the first column denotes the score received. This data can be sorted ascending:","c199ec32":"All the different values without reiteration:","51531ab8":"By means of the function *agg( )*, we can create new columns using built-in functions, for instance *min( )* and *max( )*:  ","4c7d8fa6":"Finally, we can transform the values of a column using a customized function using the *apply( )* function:","84a2c827":"Also count occurrences over the dataset. For instance, how many wines do we have for each country?","e00ff19a":"# Renaming and Combining\nRenaming in Pandas is carried out using the *rename( )* method:","270f1bb6":"# Creating, Reading and Writing\nWe can create a DataFrame (pandas table containing information) as follows.","abc6a4bb":"Last but not least, if needed, we can create multiple indices:","fb3e312c":"Additionally, we can convert the type of one column to other:","15742880":"In this case, we have \"mapped\" the ratings from 0-10 to stars ranging 1-3.","6940a900":"# Grouping and Sorting\nWe can create a customized table with certain features by using the function *groupby( )*. For example, we can search the name of the reviewers and the number of times they submited an evalution:","eb39480f":"We can compute more complex queries. For instance, if we want the wine with the best price\/quality ratio:","40a7f092":"Also, we can count certain words in the description of the wines. We use the method *map( )*:","a932bf42":"Many functions in pandas allows us to compute statistics over the data. For instance we can compute the mean and the median of a feature over all the different observations.","b7afe7ea":"Finally, to export our DataFrames to *csv* we use the *to_csv( )* method.","63072883":"If we have a csv file, we can read it and convert it to a DataFrame. We have added the Wine Reviews dataset.","bf857210":"We can compute statitics within a subgroup of the DataFrame. Also, we can use the function *describe( )* to show more statitstics on the whole data.","38b4a686":"This notebook contains a summary of the different plots from [Kaggle's Pandas Course](https:\/\/www.kaggle.com\/learn\/pandas).\n\nFirst of all, we load the different necessary modules.","39d7828d":"# References\n1. [Kaggle's Pandas Course](https:\/\/www.kaggle.com\/learn\/pandas)\n2. [Pandas: Python Data Analysis Library](https:\/\/pandas.pydata.org)","e78a7eda":"*iloc* and *loc* are used to access to a particular variable of a field. *iloc* accepts integers, whereas *loc* accepts strings.","9da93edb":"# Summary Functions and Maps","a3df5159":"The method *isnull( )* serves to check whether there is missing data in the dataset.","78a49356":"Moreover, we can rename the index axis itself:","02ff89b6":"Querying multiple information is also avaiable:","85863ef6":"# Data Types and Missing Values","04dca175":"We can use concat to combine different DataFrames:\n> combined_products = pd.concat([DataFrame1, DataFrame2])\n\nLast but not least, we can merge two DataFrames with columns with the same name:\n> left = powerlifting_meets.set_index(\"MeetID\")  \n> right = powerlifting_competitors.set_index(\"MeetID\")  \n> powerlifting_combined = left.join(right)","8146b0b6":"We can check the data type of a column using the atribute *dtype*:","c9e7c177":"Also, we can create a Series.","15a4cea4":"We can also select all the rows that fulfill a certain specificaiton \u2013 a feature matches a desired value \u2013. In this case, we can see the description of all the different wines from Italy."}}