{"cell_type":{"5d5f583b":"code","67a4ab89":"code","2fda9b86":"code","e1ba234f":"code","59f5badb":"code","7eb87d8f":"code","8ca245ba":"code","d763eb38":"code","411b022b":"code","d98a685b":"code","e4f398b4":"code","c2d5b384":"code","c69e052a":"code","19b6806b":"code","7d292a0d":"code","0c27cd16":"code","82fd116e":"code","b14142a1":"code","2b78cbbc":"code","65d29357":"code","4ccf135a":"code","6d5a09fd":"code","3ab9380a":"code","1649cd8c":"code","1fc9be42":"code","f874d357":"code","58634fda":"code","fb7afebb":"code","b4fd9b32":"code","648a47ff":"code","80c03333":"code","d9fc8a6b":"code","9b29d053":"code","088dd5c2":"code","294773b2":"code","69286f43":"code","40b92860":"code","16d83ba3":"code","7eec882e":"code","54018f21":"code","ec13358f":"code","2074dd13":"code","dcab1139":"code","10b33139":"code","890d9ee2":"code","0a9d8f3f":"code","8adcd812":"code","daf68bb1":"code","6370831a":"code","b27b4940":"markdown","fb33d816":"markdown","3eb9903f":"markdown","c9f3f1b1":"markdown","94f05f88":"markdown","13ad0762":"markdown","d36a336f":"markdown","ddfcf54d":"markdown","891bc6a9":"markdown","535be752":"markdown","b17f24f8":"markdown","48c08dd6":"markdown","feb09177":"markdown","323f3403":"markdown","6ce09c4d":"markdown","18688d17":"markdown","514ccc07":"markdown","b62a2542":"markdown","075a544a":"markdown","8b9ca1bf":"markdown","a33cb9f6":"markdown"},"source":{"5d5f583b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67a4ab89":"# import liberies \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nimport scipy as stats \nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n","2fda9b86":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest  = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e1ba234f":"train.shape","59f5badb":"train.info()","7eb87d8f":"train.head()","8ca245ba":"# saleprice describiton\ntrain.SalePrice.describe()","d763eb38":"#histogram\nsns.distplot(train['SalePrice'])","411b022b":"#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","d98a685b":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","e4f398b4":"corr= train.corr()['SalePrice'].sort_values(ascending=False)\ncorr","c2d5b384":"# most correlated features\ncorrmat = train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","c69e052a":"sns.set()\ncols = ['OverallQual' , 'GrLivArea' ,'GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','YearBuilt','YearRemodAdd']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","19b6806b":"sns.barplot(train.OverallQual,train.SalePrice)","7d292a0d":"var = 'YearBuilt'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","0c27cd16":"figure = plt.figure(figsize=(15,8))\nplt.subplot(1,3,1)\nsns.distplot(train['SalePrice'])\n\nfrom scipy import stats\nplt.subplot(1,3,2)\nstats.probplot(train['SalePrice'] , plot=plt)\n\nplt.subplot(1,3,3)\nsns.boxplot(train['SalePrice'] , orient='v')","82fd116e":"train['SalePrice'] = np.log1p(train['SalePrice'])\n\nprint('Skewenss of SalePrice :- ' , train['SalePrice'].skew())\nprint('Kuroises of SalePrice:- '  ,train['SalePrice'].kurt())","b14142a1":"figure = plt.figure(figsize=(15,8))\nplt.subplot(1,3,1)\nsns.distplot(train['SalePrice'])\n\nfrom scipy import stats\nplt.subplot(1,3,2)\nstats.probplot(train['SalePrice'] , plot=plt)\n\nplt.subplot(1,3,3)\nsns.boxplot(train['SalePrice'] , orient='v')","2b78cbbc":"numeric_data = train.select_dtypes(include=np.number).drop(['SalePrice'] , axis=1)\nitems = numeric_data.loc[ : ,['OverallQual','GrLivArea','GarageCars','TotalBsmtSF',\n                              'FullBath','YearBuilt','YearRemodAdd'  ] ]","65d29357":"  #visualize these itemes using Boxplot\nfig = plt.figure(figsize=(12,12))\nfor col in range(len(items.columns)) : \n    fig.add_subplot(3 , 3 , col+1)\n    sns.boxplot(y=items.iloc[: , col])\nplt.show()","4ccf135a":"# Visualize these items using multivariate analysis (SCatter plot)   \nfig = plt.figure(figsize=(16,12))\nfor col in range(len(items.columns)):\n    fig.add_subplot(3,3,col+1)\n    sns.scatterplot(items.iloc[ : , col] , train['SalePrice'])\nplt.show()","6d5a09fd":"# Using Z-Score to identify outliers\nfrom scipy import stats\nz= np.abs(stats.zscore(items))\nprint(z)\nthreshold = 4\nprint(np.where(z > threshold))","3ab9380a":"# Remove outlier using z-score\ntrain.shape\ntrain = train[(z < threshold).all(axis=1)]\ntrain.shape","1649cd8c":"train.corr()['SalePrice'].sort_values(ascending=False)[:10]","1fc9be42":"def missing_val(df):\n    total = df.isnull().sum().sort_values(ascending=False)\n    total_miss = total[total != 0]\n    percent = round(total_miss \/ len(df)*100,2)\n    return pd.concat((total_miss, percent) , axis =1 , keys=['Total Miss' , 'percent'])","f874d357":"missing_val(train)","58634fda":"missing_val(test)","fb7afebb":"dataset = pd.concat((train,test) , sort = False).reset_index(drop=True)\ndataset = dataset.drop(columns =['SalePrice'] , axis =1 )","b4fd9b32":"missing_val(dataset)","648a47ff":"dataset.drop(['Id','Utilities','PoolQC','MiscFeature','Alley','Fence','GarageYrBlt'],axis=1 , inplace=True)","80c03333":"missing_val(dataset)","d9fc8a6b":"miss_mode =  ['MasVnrArea' , 'Electrical' , 'MSZoning' , 'SaleType','Exterior1st','Exterior2nd','KitchenQual']\nfor col in miss_mode:\n    dataset[col]  = dataset[col].fillna(dataset[col].mode()[0])\n    \nmissing_feat = ['GarageType','GarageCond','GarageQual','GarageFinish',\n                'BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','BsmtQual',\n                'FireplaceQu','MasVnrType']\nfor col in missing_feat:\n    dataset[col]=dataset[col].fillna('None')\n\ndataset['Functional'] = dataset['Functional'].fillna('Typ')\ndataset['LotFrontage'] = dataset['LotFrontage'].fillna(dataset['LotFrontage'].median())\n\nmiss_zero = ['BsmtHalfBath','BsmtFullBath','GarageArea','GarageCars','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFinSF1']\nfor col in miss_zero:\n    dataset[col] = dataset[col].fillna(0)","9b29d053":"missing_val(dataset)","088dd5c2":"dataset.dropna(inplace=True)","294773b2":"dataset.shape","69286f43":"dataset['MSSubClass']   = train['MSSubClass'].astype(str)\n#dataset['YrSold']       = dataset['YrSold'].astype(str)\n#dataset['MoSold']       = dataset['MoSold'].astype(str)\n#dataset['YearBuilt']    = dataset['YearBuilt'].astype(str)\n#dataset['YearRemodAdd'] = dataset['YearRemodAdd'].astype(str)","40b92860":"dataset['totalSF'] =( dataset['TotalBsmtSF'] + dataset['1stFlrSF'] + dataset['2ndFlrSF']  )\ndataset['ageHouse'] = (dataset['YrSold'] - dataset['YearBuilt'] )\n","16d83ba3":"#check for duplicate rows \nduplicate= train[train.duplicated()]\nprint(duplicate) # there is no duplicate rows\ndataset.shape","7eec882e":"final_features = pd.get_dummies(dataset).reset_index(drop=True)\nprint(final_features.shape)\nfinal_features.head()","54018f21":"final_features =final_features.loc[:,~final_features.columns.duplicated()]","ec13358f":"final_features.shape","2074dd13":"y= train['SalePrice']\nX = final_features.iloc[: len(y) , :]\ndf_test  = final_features.iloc[len(y): , :]","dcab1139":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\nsc_y = StandardScaler()\nX = sc_x.fit_transform(X)\ny = sc_y.fit_transform(np.array(y).reshape(-1,1))","10b33139":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X , y)\ny_pred = lr.predict(df_test)\nprint(y_pred)","890d9ee2":"from sklearn.model_selection import KFold , cross_val_score\n#lr = LinearRegression()\ncv = KFold(shuffle= True , random_state=2 , n_splits=10)","0a9d8f3f":"scores = cross_val_score(lr , X , y , cv =cv ,scoring = 'neg_mean_absolute_error' )\nprint(scores.mean())","8adcd812":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nridge = Ridge(alpha = 400)\nridge.fit(X , y)\ntest_pred = ridge.predict(df_test)\nprint(test_pred)","daf68bb1":"import pickle\nfilename = 'Ridge_model.pkl'\npickle.dump(ridge , open(filename , 'wb') )","6370831a":"## create simple submission file \npred = pd.DataFrame(test_pred)\nsample_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nfinal_data = pd.concat([sample_df['Id'] , pred] , axis=1)\nfinal_data.columns=['Id' , 'SalePrice']\nfinal_data.to_csv('Ridge_model.csv' , index=False)","b27b4940":"## Visualize Saleprice after Process skewness and kurtosis","fb33d816":"## Using Linear Regression","3eb9903f":"# Please vote for my work if you like it","c9f3f1b1":"## Import Libraries","94f05f88":"## Using Cross Validation","13ad0762":"### concat(train,test)","d36a336f":"## Categorical Data","ddfcf54d":"## Feature Scaling","891bc6a9":"# Build Model","535be752":"## Process Skewness and Kurotsis","b17f24f8":"# Visualization & Preprocessing ","48c08dd6":"## Missing Value","feb09177":"## Explore OUTLIERS","323f3403":"## Dealing with Outliers","6ce09c4d":"# Explore Correlation after remove outliers","18688d17":"## Fill Missing Values","514ccc07":"## Using Ridge ","b62a2542":"## Drop Features","075a544a":"## Visualize y(SalePrice-output-)","8b9ca1bf":"# Import Data","a33cb9f6":"# Data Information"}}