{"cell_type":{"693ec34e":"code","7c2bc558":"code","e3934f50":"code","9b2b3979":"code","55f9f82b":"code","c304bcf1":"code","d9083808":"code","5f29ebbb":"code","58df6cc3":"code","8003b7e6":"code","e848f665":"code","30940a9c":"code","58a1c2e1":"code","d72a33b4":"code","2845c0c0":"code","35da0540":"code","cc434417":"code","6902a4bc":"code","594d06d1":"code","26bbef71":"code","5ff2e773":"markdown"},"source":{"693ec34e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c2bc558":"import cv2\npath='\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/'\nfile=os.listdir('\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/')\nfeatures=[] #to store images\nlabels=[] #to store labels\nfor img in file:\n    # label=int(img) \n    label=int(img[:3]) #extracting labels from the image,it is the third number\n    labels.append(label) #list of labels\n    img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_COLOR)\n    img_array=cv2.resize(img_array,(220,220))\n    features.append(img_array)","e3934f50":"import os\ndescrid_path='..\/input\/butterfly-dataset\/leedsbutterfly\/descriptions'\ndescrid=os.listdir('..\/input\/butterfly-dataset\/leedsbutterfly\/descriptions')\ndescrid","9b2b3979":"dict_1={'001': 'Danaus_plexippus', '002': 'Heliconius_charitonius', '003': 'Heliconius_erato', '004': 'Junonia_coenia', '005': 'Lycaena_phlaeas', '006': 'Nymphalis_antiopa', '007': 'Papilio_cresphontes', '008': 'Pieris_rapae', '009': 'Vanessa_atalanta', '0010': 'Vanessa_cardui'} ","55f9f82b":"print(set(labels))\nlist_labels=[]\n# \u062a\u0645 \u0627\u0646\u0634\u0627\u0621 \u0644\u0648\u0628 \u0644\u0644\u062f\u0648\u0631\u0627\u0646 \u062d\u0648\u0644 \u0643\u0644 \u0627\u0644\u0627\u0631\u0642\u0627\u0645 \u0627\u0644\u062a\u064a \u062a\u0645 \u0627\u0633\u062a\u062e\u0631\u0627\u062c\u0647\u0627 \u0648\u0627\u0644\u062a\u064a \u0643\u0627\u0646\u062a \u0628\u0627\u0644\u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u062b\u0627\u0644\u062b \u0641\u064a \u062a\u0633\u0644\u0633\u0644 \u0627\u0644\u0627\u0633\u0645\u0627\u0621 \u0644\u0643\u0644 \u0635\u0648\u0631\u0647 \nfor i in labels:\n# make a new list of labels have the names \/ categories in characters\n    new_label=dict_1['00'+str(i)]\n    list_labels.append(new_label)\n# \u0647\u0646\u0627 \u0646\u0642\u0648\u0645 \u0628\u0639\u0631\u0636 10 \u0641\u0626\u0627\u062a \u062b\u0627\u0628\u062a\u0647 \u0648\u063a\u064a\u0631 \u0645\u0643\u0631\u0631\u0647     \nprint(list_labels[:10])    ","c304bcf1":"import numpy as np\nfeatures=np.array(features)\n# get lower quality image by dividing the features by 255, to make it appropriate for preprocessing\nfeatures=features\/255.0","d9083808":"print(features.shape)","5f29ebbb":"features=features.reshape(-1,220,220,3)\n","58df6cc3":"print(features.shape)\n","8003b7e6":"#OneHotEncoding:To deal with categorical values we need to preprocess it using onehot ecnoding\u00b6\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nle=LabelEncoder()\ny=le.fit_transform(list_labels)\nfrom tensorflow.keras.utils import to_categorical\ny=to_categorical(y)","e848f665":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(features,y,random_state=11,test_size=0.2)","30940a9c":"from tensorflow.keras.layers import Dense,MaxPooling2D,Conv2D,Dropout,Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.regularizers import l2,l1\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3), padding=\"same\", activation = 'relu', kernel_regularizer=l2(0.0002) , input_shape=(220,220,3)))\nmodel.add(MaxPooling2D((3,3)))\n\nmodel.add(Conv2D(32, (5, 5), activation='relu', kernel_regularizer=l1(0.0002))) \nmodel.add(MaxPooling2D((3,3)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu', kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu', kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu' , kernel_regularizer=l2(0.0002))) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Flatten())\n# dropout layer that used for avoiding the overfitting \nmodel.add(Dropout(0.3))\nmodel.add(Dense(100, activation='relu'))\n\n# Output layer have 10 labels \nmodel.add(Dense(10, activation='softmax'))","58a1c2e1":"model.compile(optimizer='adam'\n              ,metrics=['accuracy'],loss='categorical_crossentropy')\nhistory=model.fit(x_train,y_train,batch_size=12,epochs=50,validation_split=0.2)\n","d72a33b4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,8))\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy score')\nplt.title('Model Accuracy')\nplt.legend(['Train','Test'])\nplt.show()","2845c0c0":"loss,accuracy=model.evaluate(x_test,y_test)\n","35da0540":"import tensorflow\n# \u062a\u0644\u0643 \u0627\u0644\u0634\u0628\u0643\u0647 \u0644\u0647\u0627 \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u0647\u0627\u064a\u0628\u0631 \u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a \u0639\u0644\u064a\u0643 \u0636\u0628\u0637\u0647\u0627 \u0627\u0648\u0644\u0627 \n# \u0627\u0648\u0644 \u0647\u0627\u064a\u0628\u0631 \u0628\u0627\u0631\u0627\u0645\u062a\u0631 \u0647\u0648 \u064a\u0639\u0637\u064a\u0643 \u0627\u0644\u062d\u0631\u064a\u0647 \u0645\u0646 \u0627\u062c\u0644 \u0627\u062e\u062a\u064a\u0627\u0631 \u0627\u062f\u062e\u0627\u0644 \u0627\u0644\u0637\u0628\u0642\u0647 \u0627\u0644\u0643\u062b\u064a\u0641\u0647 \u0627\u0644\u0646\u0647\u0627\u0626\u064a\u0647 \u0645\u0646 \u0627\u0644\u0634\u0628\u0643\u0647 \u0627\u0648 \u0627\u0644\u063a\u0627\u0621\u0647\u0627 \u0641\u064a \u062a\u0644\u0643 \u0627\u0644\u062d\u0627\u0644\u0647 \u062a\u0645 \u0627\u0644\u063a\u0627\u0621\u0647\u0627 \nmnet = tensorflow.keras.applications.mobilenet_v2.MobileNetV2(include_top=False, \n                                                      input_shape=(220, 220, 3),#same as of custom model\n                                                      pooling='avg',\n                                                      weights='imagenet')\n\nmnet.summary()","cc434417":"model2=Sequential([\n    mnet,\n    Dropout(0.25),\n    Dense(10,activation='softmax') # here we use 10 layers because we have to predict bewtween 10 classes\n])","6902a4bc":"# here we freezed the layer that responsible for feature extraction\nmodel2.layers[0].trainable = False\nmodel2.summary()","594d06d1":"model2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\nhistory2=model2.fit(x_train,y_train,batch_size=12, epochs=10,validation_split=0.3)\n","26bbef71":"loss,accuracy=model2.evaluate(x_test,y_test)\nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nplt.plot(history2.history['acc'])\nplt.plot(history2.history['val_acc'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy score')\nplt.title('Model Accuracy')\nplt.legend(['Train','Test'])\nplt.show()","5ff2e773":"To avoid overfitting and increasing the model performance we are using the technique known as transfer learning, where we can use the pre trained models for predictions,in our case we are using mobilenet\u00b6\n"}}