{"cell_type":{"4af76956":"code","cd5dbdd1":"code","ab7a85f3":"code","032c6c4e":"code","b951aa57":"code","b83f8ecc":"code","c429276c":"code","cacbd35e":"code","f1f32ee0":"code","138cef94":"code","a08e513a":"code","9199589f":"code","4a863899":"code","2c58e572":"code","e346dc7e":"code","8e7b700f":"code","52ffd9ce":"code","f2060db4":"code","973e1fa4":"code","5afe2f57":"code","8eef8395":"code","e71a8839":"code","71639bea":"markdown"},"source":{"4af76956":"!pip uninstall -y kaggle\n!pip install upgrade pip\n!pip install kaggle==1.5.6\n\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!chmod 600 ~\/.kaggle\/kaggle.json\n\nimport pandas as pd\nimport numpy as np","cd5dbdd1":"!kaggle competitions download -c sejongaiclasspredicteq\n\n!unzip sejongaiclasspredicteq.zip","ab7a85f3":"data=pd.read_excel('\/content\/train.xlsx')\ndata","032c6c4e":"# \ub370\uc774\ud130\uac00 \ubaa8\ub450 \ud55c\ubc18\ub3c4 \uc0c1\uc758 \uc704\uce58\uc774\ubbc0\ub85c, \uc704\ub3c4 \uacbd\ub3c4\ub97c \ubd84\ub958\ud558\ub294 \ubd80\ubd84\uc744 \uc81c\uc678\ud558\uace0, \uc9c4\ub3c4\ub9cc\uc744 \ub530\ub85c \ub370\uc774\ud130\ub85c \uc800\uc7a5\ndata=np.array(data)\nscale=data[:,2].reshape(-1,1)\nscale","b951aa57":"# Set Learning Parameter\n\nlearning_rate = 0.01\ntraining_epochs = 2000\nbatch_size = 10","b83f8ecc":"cnt=[]\nfor i in range(26):\n  cnt.append([(i+25),0])\n\nfor i in range(26):\n  k=scale>=(2.5+i*0.1)\n  cnt[i][1]=k.sum()\n\ncnt","c429276c":"x=[]\ny=[]\nfor i in range(26):\n  x.append(2.5+0.1*i)\n  y.append(cnt[i][1])\nX=np.array(x)\nY=np.array(y)","cacbd35e":"x","f1f32ee0":"y","138cef94":"linear1 = torch.nn.Linear(26,256,bias=True)\nlinear2 = torch.nn.Linear(256,256,bias=True)\nlinear3 = torch.nn.Linear(256,256,bias=True)\nlinear4 = torch.nn.Linear(256,256,bias=True)\nlinear5 = torch.nn.Linear(256,1,bias=True)\n\n# relu, dropout \uc120\uc5b8\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p=0.3)","a08e513a":"# Random Init => Xavier Init\ntorch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)","9199589f":"# relu\ub294 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ube84 \uac83\n# \ub808\uc774\uc5b4 \uc5f0\uacb0\n\nmodel = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5)","4a863899":"import torch\nimport torch.nn.functional as F\nimport torch.optim as optim\nX=torch.FloatTensor(X)\nY=torch.FloatTensor(Y)","2c58e572":"nb_epochs=5000\na=torch.ones(1,requires_grad=True)\nb=torch.ones(1,requires_grad=True)\noptimizer = torch.optim.Adam([a,b], lr=learning_rate)\nfor epoch in range(nb_epochs):\n  h=model(10**(a-b*X))\n  \n  \n  cost=torch.mean((h-Y)**2)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch%100==0:\n    print(epoch ,cost)","e346dc7e":"Y","8e7b700f":"h","52ffd9ce":"print(a,b)","f2060db4":"ans=[]\nfor i in range(20):\n  ans.append([i,0])\nt=[2.0,2.1,2.2,2.3,2.4]\nt=np.array(t)\nt=torch.FloatTensor(t)\n\nans=10**(a-b*t)\n\nans","973e1fa4":"ar=[]\nfor i in range(5):\n  ar.append(int((ans[i])*100))\nar=np.array(ar)\n\nar","5afe2f57":"truth=pd.read_csv('\/content\/samplesub.csv')\ntruth","8eef8395":"sol=pd.DataFrame(ar)\nsol=pd.DataFrame({\"id\":[0,1,2,3,4],\"expected\":ar})\nsol","e71a8839":"sol.to_csv('submit.csv',index=False,header=True)\n\n!kaggle competitions submit -c sejongaiclasspredicteq -f submit.csv -m \"submit\"","71639bea":"N\uc740 \ubc1c\uc0dd \ud69f\uc218\nM\uc740 \uc9c4\ub3c4\na,b\ub294 \uad6c\ud558\ub294 \uac83"}}