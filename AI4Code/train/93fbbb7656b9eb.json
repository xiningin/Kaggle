{"cell_type":{"2381abe9":"code","3beb3bb4":"code","a48d5781":"code","d5b574b7":"code","77b59d62":"code","d73aaaa4":"code","a2ff5720":"code","a4163c83":"code","95b6bec9":"code","76fb42ba":"code","8e398e4f":"code","93f4493b":"code","8bb96ed3":"code","96b432b3":"code","b736d91e":"code","4127722f":"code","1984adbf":"code","dbe2603c":"markdown","fe1a4e6c":"markdown","90f4f8b6":"markdown","63a91731":"markdown","36dc5375":"markdown","41faf4fc":"markdown","b28382b5":"markdown","c4f93180":"markdown","9dd779bb":"markdown","cd0686f7":"markdown"},"source":{"2381abe9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3beb3bb4":"from sklearn.model_selection import cross_val_score, cross_validate, train_test_split\nfrom sklearn.metrics import make_scorer, r2_score, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a48d5781":"df_test = pd.read_csv('\/kaggle\/input\/codenation-enem2\/test.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/codenation-enem2\/train.csv')","d5b574b7":"use_list = ['NU_NOTA_COMP1', 'NU_NOTA_COMP2', 'NU_NOTA_COMP3', 'NU_NOTA_COMP4', 'NU_NOTA_COMP5', 'NU_NOTA_CN', 'NU_NOTA_CH', \n            'NU_NOTA_LC', 'NU_NOTA_REDACAO', 'NU_NOTA_MT']\n\ndf_train = df_train[use_list] #selection all columns\ndf_test = df_test[use_list[:-1]] #selection all other columns except 'NU_NOTA_MT' column for testing","77b59d62":"df_train.head()","d73aaaa4":"df_test.head()","a2ff5720":"print(df_train.isna().sum() \/ df_train.shape[0] * 100)","a4163c83":"print(df_test.isna().sum() \/ df_test.shape[0] * 100)","95b6bec9":"df_train_filled = df_train.fillna(0, axis=0)\ndf_test_filled = df_test.fillna(0, axis=0)","76fb42ba":"correlacao_notas = df_train_filled.corr()\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(correlacao_notas, annot=True, cmap=\"BrBG\", vmin=-1, vmax=1)\nplt.xticks(rotation=45)\nplt.show()","8e398e4f":"X = df_train_filled.drop(columns=['NU_NOTA_COMP5', 'NU_NOTA_MT'])\ny = df_train_filled['NU_NOTA_MT']","93f4493b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)","8bb96ed3":"lr = LinearRegression(normalize=True)\nlr.fit(X_train, y_train)","96b432b3":"lr.score(X_test, y_test)","b736d91e":"mae = make_scorer(mean_absolute_error)\nr2 = make_scorer(r2_score)\n\ncvs = cross_validate(estimator=LinearRegression(normalize=True), X=X, y=y, cv=10, verbose=10, \n                      scoring={'mae': mae, 'r2':r2})","4127722f":"print(\"The mean of the result is %.3f\" % (cvs['test_r2'].mean()))\nprint(\"The standard desviation error is %.3f\" % (cvs['test_r2'].std()))","1984adbf":"print(\"The mean of the result is %.3f\" % (cvs['test_mae'].mean()))\nprint(\"The standard desviation error is %.3f\" % (cvs['test_mae'].std()))","dbe2603c":"I'll choose the columns with correlation above 0.75. It can improve the model.\nNow let's split the df_train database in X and y for training.","fe1a4e6c":"# Codenation Challenge\n---\nThis challenge is based on predicting the mathematical score. I used a simple linear regression model to predict Enem's math grades. I also selected features using a Pearson correlation to fit the model. Since I can't send to get a score, I did a cross-validation to evaluate the model.","90f4f8b6":"## Training the Base Linear Model\n\nThis model will be used as a base line to compare with other models below.","63a91731":"As we can see above, there are some NaN values. So, we need to do something about it. I will replace them with the number 0. Because the student could give up ENEM.","36dc5375":"The score was good. However for better scoring, it's important to use cross validation.","41faf4fc":"## Importing Libraries and Dataset","b28382b5":"### Some info about the Databse\n\nHere is the chosen columns which will be used to make the prediction\n\n- TP_ANO_CONCLUIU -> ano de conclus\u00e3\u00e3o do ensino m\u00e9\u00e9dio\n- TP_PRESENCA_CN -> se compareceu a prova de CN\n- TP_PRESENCA_CH -> presen\u00e7a na prova de CH\n- TP_PRESENCA_LC -> presen\u00e7a na prova de LC\n- NU_NOTA_CN -> nota da prova de CN\n- NU_NOTA_CH -> nota da prova de CH\n- NU_NOTA_LC -> nota da prova de LC\n- NU_NOTA_REDACAO -> nota de reda\u00e7\u00e3\u00e3o\n- NU_NOTA_MT -> nota de matem\u00e1\u00e1tica\n- Nota de compet\u00eancias da Reda\u00e7\u00e3o\n  - NU_NOTA_COMP1\n  - NU_NOTA_COMP2\n  - NU_NOTA_COMP3\n  - NU_NOTA_COMP4\n  - NU_NOTA_COMP5","c4f93180":"Now let's see if there is any correlation between the data. This helps to choose the best features to train the model.","9dd779bb":"First, it is necessary to define what the variables will be for testing and training. To then train the model.","cd0686f7":"## Analysing the Database"}}