{"cell_type":{"c551048e":"code","5267da83":"code","2771a59c":"code","b34d8670":"code","d16e6a7a":"code","b139bacc":"markdown","1d6b3237":"markdown","ada9b862":"markdown","7b4237c1":"markdown","b14ac10f":"markdown","c5f67250":"markdown","1f6a22a4":"markdown","0c6f96b1":"markdown","f0d90ef4":"markdown","51403464":"markdown","a9e705a9":"markdown"},"source":{"c551048e":"import re\nimport jovian\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nimport emoji\nfrom collections import Counter","5267da83":"me = \"Prajwal Prashanth\"","2771a59c":"comment_words = ' '\nstopwords = STOPWORDS.update(['lo', 'ge', 'Lo', 'illa', 'yea', 'ella', 'en', 'na', 'En', 'yeah', 'alli', 'ide', 'okay', 'ok', 'will'])\n  \nfor val in df.msg.values: \n    val = str(val) \n    tokens = val.split() \n        \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n          \n    for words in tokens: \n        comment_words = comment_words + words + ' '\n  \n  \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', \n                stopwords = stopwords, \n                min_font_size = 10).generate(comment_words) \n","b34d8670":"plt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","d16e6a7a":"wordcloud.to_image()","b139bacc":"## Know What They Know(atleast by little\n* Let this meetup series encourage people to work on their own data:\n    * Ask many questions on whatsapp chat data, commit to jovian with your answers\/analysis visulization. Experiment!!!\n* Explore more data resources here's a list i could find, share if you find any @ dsnet.org\n    * WhatsApp\n    * Google take out (https:\/\/takeout.google.com\/)\n        * Keyboard\n        * Maps\n        * Calendar \n        * Chrome\n        * Pay\n        * etc....\n    * https:\/\/www.cnet.com\/how-to\/how-to-download-all-your-instagram-data\/\n    * https:\/\/in.pcmag.com\/software\/120204\/how-to-download-your-facebook-data-and-6-surprising-things-i-found\n* Lets move step by step EDA first to try answer the questions on our own then move to some ML\/DL Models \n\n## Assingment-kind\n* 1way ya 2way, check for a response time between two people","1d6b3237":"### Data","ada9b862":"## Data Preprocessing\n\n* Regex cheatsheet\n    * https:\/\/www.rexegg.com\/regex-quickstart.html\n* Datetime format\n    * http:\/\/strftime.org\/\n    \n```\ndef rawToDf(file):\n    with open(file, 'r') as raw_data:\n        raw_string = ' '.join(raw_data.read().split('\\n')) # converting the list split by newline char. as one whole string as there can be multi-line messages\n        user_msg = re.split('\\d{1,2}\/\\d{1,2}\/\\d{2,4},\\s\\d{1,2}:\\d{2}\\s[APap][mM]\\s-\\s', raw_string) [1:] # splits at all the date-time pattern, resulting in list of all the messages with user names\n        date_time = re.findall('\\d{1,2}\/\\d{1,2}\/\\d{2,4},\\s\\d{1,2}:\\d{2}\\s[APap][mM]\\s-\\s', raw_string) # finds all the date-time patterns\n        \n        df = pd.DataFrame({'date_time': date_time, 'user_msg': user_msg}) # exporting it to a df\n   \n    # converting date-time pattern which is of type String to type datetime, format is to be specified for the whole string where the placeholders are extracted by the method    \n    try:\n        df['date_time'] = pd.to_datetime(df['date_time'], format='%m\/%d\/%y, %I:%M %p - ') #10\/20\/19, 10:24 pm - \n    except:\n        df['date_time'] = pd.to_datetime(df['date_time'], format='%d\/%m\/%Y, %I:%M %p - ') #20\/10\/2019, 10:24 pm -\n    \n    # split user and msg \n    usernames = []\n    msgs = []\n    for i in df['user_msg']:\n        a = re.split('([\\w\\W]+?):\\s', i) # lazy pattern match to first {user_name}: pattern and spliting it aka each msg from a user\n        if(a[1:]): # user typed messages\n            usernames.append(a[1])\n            msgs.append(a[2])\n        else: # other notifications in the group(eg: someone was added, some left ...)\n            usernames.append(\"grp_notif\")\n            msgs.append(a[0])\n\n    # creating new columns         \n    df['user'] = usernames\n    df['msg'] = msgs\n\n    # dropping the old user_msg col.\n    df.drop('user_msg', axis=1, inplace=True)\n    \n    return df\n```","7b4237c1":"## Q 7)\n## Which are the most common words?","b14ac10f":"## Q 6)\n## In any group, do I have any inclination towards responding to someone? ","c5f67250":"## Q 2)\n## Count of all the emoticons that i have used till date.","1f6a22a4":"## Q 5)\n## Most Usage - Time of Day","0c6f96b1":"## Q 4) \n## What is the difference in Weekend vs Weekday usage pattern?\n## How many words do I type on average on weekday vs weekend?\n\n","f0d90ef4":"## Q 1)\n## Who is the most active member of the group. Who is the least active. Is it same on weekday weekend?\n\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DatetimeIndex.weekday.html","51403464":"### No. of Images, group notifications and dropping them","a9e705a9":"## Q 3)\n## What can my activity say about my sleep cycle?"}}