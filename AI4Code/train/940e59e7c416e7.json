{"cell_type":{"7845169b":"code","5ad488c8":"code","8b3704d4":"code","01f7276c":"code","663cb81c":"code","16766e15":"code","9720977f":"code","1d798e68":"code","1fedc6e8":"code","d8b13c9f":"code","7e52778e":"code","9635f217":"code","d4a0d9eb":"code","75ac1311":"code","a1cd9a43":"code","d9e60219":"code","3898b27d":"code","76491f17":"code","571bf393":"code","6f770c65":"code","a88d10d3":"code","14e70031":"code","61a90a5c":"code","4933f43b":"code","a90e0219":"code","e6ab0fb2":"code","9fdbc145":"code","050393d5":"code","d06a1137":"code","1782810b":"code","149a3bfb":"code","800f7805":"code","ea19abcc":"code","ada141f0":"code","4535a398":"code","8105e6cd":"code","aa93e69a":"code","f3c6ebd8":"code","a60059af":"code","6c707663":"markdown","412a3087":"markdown","1ff88a76":"markdown","1a2271d8":"markdown","c1022513":"markdown","c9759c1e":"markdown","3d4ee2d7":"markdown","d6846de4":"markdown","985e2044":"markdown","19d47c0c":"markdown","37fd6b5d":"markdown","7ab1ec31":"markdown","84268858":"markdown","ed5e5f5e":"markdown","a3f721c7":"markdown","59c24508":"markdown"},"source":{"7845169b":"#Importing libraries\n\nimport numpy as np #linear algebra\nimport pandas as pd #data processing\nimport os #import operating system\nimport matplotlib.pyplot as plt #matrixplot\nfrom PIL import Image #image library\n%matplotlib inline\nimport seaborn as sns #graph plotting\nimport itertools # Iterator\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport io #input-output operation (BYtesIO & StringIO)\nimport plotly.offline as py #interactibe Graphical\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff","5ad488c8":"telcom = pd.read_csv('\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\n\ntelcom.head()","8b3704d4":"print(\"Rows         :\",telcom.shape[0])\nprint(\"Columns      :\",telcom.shape[1])\nprint(\"\\nFeatures :\\n \", telcom.columns.tolist())\nprint(\"\\nMissing Values :   \", telcom.isnull().sum().values.sum())\nprint(\"\\nUnique Values:     \\n\", telcom.nunique())","01f7276c":"#Replacing spaces with null values in total charge column\ntelcom['TotalCharges'] = telcom['TotalCharges'].replace(\" \",np.nan)","663cb81c":"#Droppping null values from total charges column which contains 15% missing data\ntelcom = telcom[telcom[\"TotalCharges\"].notnull()]\ntelcom = telcom.reset_index()[telcom.columns]","16766e15":"type(telcom[\"TotalCharges\"])","9720977f":"#Converting type of TotalCharges from \"pandas.core.series.Series\" to float\n#This will convert the numberic number like 76 to 76.0 or 89 to 89.0 means as in float\ntelcom[\"TotalCharges\"] = telcom[\"TotalCharges\"].astype(float)\ntype(telcom[\"TotalCharges\"])","1d798e68":"#In the below columns replace \"No internet service\" to No because if someone has no internet service it mean No eventually\n\nreplace_cols = ['OnlineSecurity', 'OnlineBackup','DeviceProtection','TechSupport','StreamingTV','StreamingMovies']\n\nfor i in replace_cols:\n    telcom[i] = telcom[i].replace({'No internet service': 'No'})","1fedc6e8":"#Replacing the values of SeniorCitizen column as 1 to yes and 0 to No\n\ntelcom[\"SeniorCitizen\"] = telcom[\"SeniorCitizen\"].replace({1:\"Yes\",0:\"No\"})","d8b13c9f":"#Tenure to categorical columns\n\ndef tenure_lab(telcom):\n    \n    if telcom[\"tenure\"] <= 12:\n        return \"Tenure_0-12\"\n    elif (telcom[\"tenure\"] > 12) & (telcom[\"tenure\"] <= 24):\n        return \"Tenure_12-24\"\n    elif (telcom[\"tenure\"] > 24) & (telcom[\"tenure\"] <= 48):\n        return \"Tenure_24-48\"\n    elif (telcom[\"tenure\"] < 48) & (telcom[\"tenure\"] <=60):\n        return \"Tenure_48-60\"\n    \n    elif telcom[\"tenure\"] >60:\n        return \"Tenure_greater_than_60\"\n    \ntelcom[\"tenure_group\"] = telcom.apply(lambda telcom:tenure_lab(telcom), axis = 1)    ","7e52778e":"#Seprating Churn and non churn customer\nchurn = telcom[telcom[\"Churn\"] == \"Yes\"]\nnot_churn = telcom[telcom[\"Churn\"] == \"No\"]","9635f217":"#unique values in complete data\nprint(telcom.nunique())","d4a0d9eb":"#Seprating catagorical and numerical columns\nid_col = ['customerID']\ntarget_col = [\"Churn\"]\ncat_cols = telcom.nunique()[telcom.nunique()<6].keys().tolist()\ncat_cols","75ac1311":"#all categorical columns\ncat_cols = [x for x in cat_cols if x not in target_col]\ncat_cols","a1cd9a43":"#all numberical cloumns\nnum_cols = [x for x in telcom.columns if x not in cat_cols + target_col + id_col]\nnum_cols","d9e60219":"#labels\nlab = telcom[\"Churn\"].value_counts().keys().tolist()\nprint(\"Churn_label: \",lab)\n\n#values\nval = telcom[\"Churn\"].value_counts().values.tolist()\nprint(\"Churn_values:\" ,val)","3898b27d":"trace = go.Pie(labels = lab,\n              values = val,\n              marker = dict(colors = ['Cloudy','red'],\n              line = dict(color = \"white\", width = 1.3)),\n               rotation = 90,\n               hoverinfo = \"label+value+text\",\n               hole = 0.7)\n\nlayout = go.Layout(dict(title = \"Customer attrition in data\",\n                       plot_bgcolor = \"rgb(243,243,243)\",\n                       paper_bgcolor = \"rgb(243,243,243)\"\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data = data,layout = layout)\npy.iplot(fig)","76491f17":"# function for pie plot for customer attrition types\ndef plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn Customers\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn customers\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace1,trace2]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)\n    \n\n# function for histogram for customer attrition types\ndef histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn Customers\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn customers\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace1,trace2]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)","571bf393":"#function for scatter plot matrix for numerical columns in data\ndef scatter_matrix(df)  :\n    \n    df  = df.sort_values(by = \"Churn\" ,ascending = True)\n    classes = df[\"Churn\"].unique().tolist()\n    classes\n    \n    class_code  = {classes[k] : k for k in range(2)}\n    class_code\n\n    color_vals = [class_code[cl] for cl in df[\"Churn\"]]\n    color_vals\n\n    pl_colorscale = \"Portland\"\n\n    pl_colorscale\n\n    text = [df.loc[k,\"Churn\"] for k in range(len(df))]\n    text\n\n    trace = go.Splom(dimensions = [dict(label  = \"tenure\",\n                                       values = df[\"tenure\"]),\n                                  dict(label  = 'MonthlyCharges',\n                                       values = df['MonthlyCharges']),\n                                  dict(label  = 'TotalCharges',\n                                       values = df['TotalCharges'])],\n                     text = text,\n                     marker = dict(color = color_vals,\n                                   colorscale = pl_colorscale,\n                                   size = 3,\n                                   showscale = False,\n                                   line = dict(width = .1,\n                                               color='rgb(230,230,230)'\n                                              )\n                                  )\n                    )\n    axis = dict(showline  = True,\n                zeroline  = False,\n                gridcolor = \"#fff\",\n                ticklen   = 4\n               )\n    \n    layout = go.Layout(dict(title  = \n                            \"Scatter plot matrix for Numerical columns for customer attrition\",\n                            autosize = False,\n                            height = 800,\n                            width  = 800,\n                            dragmode = \"select\",\n                            hovermode = \"closest\",\n                            plot_bgcolor  = 'rgba(240,240,240, 0.95)',\n                            xaxis1 = dict(axis),\n                            yaxis1 = dict(axis),\n                            xaxis2 = dict(axis),\n                            yaxis2 = dict(axis),\n                            xaxis3 = dict(axis),\n                            yaxis3 = dict(axis),\n                           )\n                      )\n    data   = [trace]\n    fig = go.Figure(data = data,layout = layout )\n    py.iplot(fig)","6f770c65":"#for all categorical columns plot pie\nfor i in cat_cols :\n    plot_pie(i)\n\n#for all categorical columns plot histogram    \nfor i in num_cols :\n    histogram(i)\n\n#scatter plot matrix\nscatter_matrix(telcom)","a88d10d3":"#customer attrition in tenure groups\ntg_ch  =  churn[\"tenure_group\"].value_counts().reset_index()\ntg_ch.columns  = [\"tenure_group\",\"count\"]\ntg_nch =  not_churn[\"tenure_group\"].value_counts().reset_index()\ntg_nch.columns = [\"tenure_group\",\"count\"]\n\n#bar - churn\ntrace1 = go.Bar(x = tg_ch[\"tenure_group\"]  , y = tg_ch[\"count\"],\n                name = \"Churn Customers\",\n                marker = dict(line = dict(width = .5,color = \"black\")),\n                opacity = .9)\n\n#bar - not churn\ntrace2 = go.Bar(x = tg_nch[\"tenure_group\"] , y = tg_nch[\"count\"],\n                name = \"Non Churn Customers\",\n                marker = dict(line = dict(width = .5,color = \"black\")),\n                opacity = .9)\n\nlayout = go.Layout(dict(title = \"Customer attrition in tenure groups\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"tenure group\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"count\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                       )\n                  )\ndata = [trace1,trace2]\nfig  = go.Figure(data=data,layout=layout)\npy.iplot(fig)","14e70031":"telcom[['MonthlyCharges', 'TotalCharges','tenure',\"tenure_group\"]]\n\n#scatter plot monthly charges & total charges by tenure group\n\ndef plot_tenure_scatter(tenure_group,color) :\n    tracer = go.Scatter(x = telcom[telcom[\"tenure_group\"] == tenure_group][\"MonthlyCharges\"],\n                        y = telcom[telcom[\"tenure_group\"] == tenure_group][\"TotalCharges\"],\n                        mode = \"markers\",marker = dict(line = dict(color = \"black\",\n                                                                   width = .2),\n                                                       size = 4 , color = color,\n                                                       symbol = \"diamond-dot\",\n                                                      ),\n                        name = tenure_group,\n                        opacity = .9\n                       )\n    return tracer\n\n#scatter plot monthly charges & total charges by churn group\ndef plot_churncharges_scatter(churn,color) :\n    tracer = go.Scatter(x = telcom[telcom[\"Churn\"] == churn][\"MonthlyCharges\"],\n                        y = telcom[telcom[\"Churn\"] == churn][\"TotalCharges\"],\n                        mode = \"markers\",marker = dict(line = dict(color = \"black\",\n                                                                   width = .2),\n                                                       size = 4 , color = color,\n                                                       symbol = \"diamond-dot\",\n                                                      ),\n                        name = \"Churn - \" + churn,\n                        opacity = .9\n                       )\n    return tracer\n\ntrace1 = plot_tenure_scatter(\"Tenure_0-12\",\"#FF3300\")\ntrace2 = plot_tenure_scatter(\"Tenure_12-24\",\"#6666FF\")\ntrace3 = plot_tenure_scatter(\"Tenure_24-48\",\"#99FF00\")\ntrace4 = plot_tenure_scatter(\"Tenure_48-60\",\"#996600\")\ntrace5 = plot_tenure_scatter(\"Tenure_gt_60\",\"grey\")\ntrace6 = plot_churncharges_scatter(\"Yes\",\"red\")\ntrace7 = plot_churncharges_scatter(\"No\",\"blue\")\n\ndata1   = [trace1,trace2,trace3,trace4,trace5] \ndata2   = [trace7,trace6]\n\n#layout\ndef layout_title(title) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"Monthly charges\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                         title = \"Total Charges\",\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            height = 600\n                           )\n                      )\n    return layout\n\nlayout1  = layout_title(\"Monthly Charges & Total Charges by Tenure group\")\nlayout2  = layout_title(\"Monthly Charges & Total Charges by Churn group\")\nfig1 = go.Figure(data = data1,layout = layout1)\nfig2 = go.Figure(data = data2,layout = layout2)\npy.iplot(fig1)\npy.iplot(fig2)","61a90a5c":"avg_tgc = telcom.groupby([\"tenure_group\",\"Churn\"])[[\"MonthlyCharges\",\n                                                    \"TotalCharges\"]].mean().reset_index()\n\n#function for tracing \ndef mean_charges(column,aggregate) :\n    tracer = go.Bar(x = avg_tgc[avg_tgc[\"Churn\"] == aggregate][\"tenure_group\"],\n                    y = avg_tgc[avg_tgc[\"Churn\"] == aggregate][column],\n                    name = aggregate,marker = dict(line = dict(width = 1)),\n                    text = \"Churn\"\n                   )\n    return tracer\n\n#function for layout\ndef layout_plot(title,xaxis_lab,yaxis_lab) :\n    layout = go.Layout(dict(title = title,\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = xaxis_lab,\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',title = yaxis_lab,\n                                         zerolinewidth=1,ticklen=5,gridwidth=2),\n                           )\n                      )\n    return layout\n\n#plot1 - mean monthly charges by tenure groups\ntrace1  = mean_charges(\"MonthlyCharges\",\"Yes\")\ntrace2  = mean_charges(\"MonthlyCharges\",\"No\")\nlayout1 = layout_plot(\"Average Monthly Charges by Tenure groups\",\n                      \"Tenure group\",\"Monthly Charges\")\ndata1   = [trace1,trace2]\nfig1    = go.Figure(data=data1,layout=layout1)\n\n#plot2 - mean total charges by tenure groups\ntrace3  = mean_charges(\"TotalCharges\",\"Yes\")\ntrace4  = mean_charges(\"TotalCharges\",\"No\")\nlayout2 = layout_plot(\"Average Total Charges by Tenure groups\",\n                      \"Tenure group\",\"Total Charges\")\ndata2   = [trace3,trace4]\nfig2    = go.Figure(data=data2,layout=layout2)\n\npy.iplot(fig1)\npy.iplot(fig2)","4933f43b":"##copy data\ntel_df = telcom.copy()\n#Drop tenure column\ntelcom = telcom.drop(columns = \"tenure_group\",axis = 1)\n\ntrace1 = go.Scatter3d(x = churn[\"MonthlyCharges\"],\n                      y = churn[\"TotalCharges\"],\n                      z = churn[\"tenure\"],\n                      mode = \"markers\",\n                      name = \"Churn customers\",\n                      text = \"Id : \" + churn[\"customerID\"],\n                      marker = dict(size = 1,color = \"red\")\n                     )\ntrace2 = go.Scatter3d(x = not_churn[\"MonthlyCharges\"],\n                      y = not_churn[\"TotalCharges\"],\n                      z = not_churn[\"tenure\"],\n                      name = \"Non churn customers\",\n                      text = \"Id : \" + not_churn[\"customerID\"],\n                      mode = \"markers\",\n                      marker = dict(size = 1,color= \"green\")\n                     )\n\n\n\nlayout = go.Layout(dict(title = \"Monthly charges,total charges & tenure in customer attrition\",\n                        scene = dict(camera = dict(up=dict(x= 0 , y=0, z=0),\n                                                   center=dict(x=0, y=0, z=0),\n                                                   eye=dict(x=1.25, y=1.25, z=1.25)),\n                                     xaxis  = dict(title = \"monthly charges\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'),\n                                     yaxis  = dict(title = \"total charges\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'\n                                                  ),\n                                     zaxis  = dict(title = \"tenure\",\n                                                   gridcolor='rgb(255, 255, 255)',\n                                                   zerolinecolor='rgb(255, 255, 255)',\n                                                   showbackground=True,\n                                                   backgroundcolor='rgb(230, 230,230)'\n                                                  )\n                                    ),\n                        height = 700,\n                       )\n                  )\n                  \n\ndata = [trace1,trace2]\nfig  = go.Figure(data = data,layout = layout)\npy.iplot(fig)","a90e0219":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler","e6ab0fb2":"#customer id col\nId_col     = ['customerID']\n#Target columns\ntarget_col = [\"Churn\"]\n#categorical columns\ncat_cols   = telcom.nunique()[telcom.nunique() < 6].keys().tolist()\ncat_cols   = [x for x in cat_cols if x not in target_col]\n\n#numerical columns\nnum_cols   = [x for x in telcom.columns if x not in cat_cols + target_col + Id_col]\n\n#Binary columns with 2 values\nbin_cols   = telcom.nunique()[telcom.nunique() == 2].keys().tolist()\n\n\n#Columns more than 2 values\nmulti_cols = [i for i in cat_cols if i not in bin_cols]\n\n#Label encoding Binary columns\nle = LabelEncoder()\nfor i in bin_cols :\n    telcom[i] = le.fit_transform(telcom[i])\n    \n#Duplicating columns for multi value columns\n#get_dummies works as one hot encoding\ntelcom = pd.get_dummies(data = telcom,columns = multi_cols )\n\n#Scaling Numerical columns\nstd = StandardScaler()\nscaled = std.fit_transform(telcom[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)\n\n#dropping original values merging scaled values for numerical columns\ndf_telcom_og = telcom.copy()\ntelcom = telcom.drop(columns = num_cols,axis = 1)\ntelcom = telcom.merge(scaled,left_index=True,right_index=True,how = \"left\")","9fdbc145":"summary = (df_telcom_og[[i for i in df_telcom_og.columns if i not in Id_col]].describe().transpose().reset_index())\n\nsummary = summary.rename(columns = {\"index\" : \"feature\"})\nsummary = np.around(summary,3)\n\nval_lst = [summary['feature'], summary['count'],\n          summary['mean'], summary['std'],\n          summary['min'], summary['25%'],\n          summary['50%'], summary['75%'], summary['max']]\n\ntrace  = go.Table(header = dict(values = summary.columns.tolist(),\n                                line = dict(color = ['#506384']),\n                                fill = dict(color = ['#118DFF']),\n                               ),\n                  cells  = dict(values = val_lst,\n                                line = dict(color = ['#516784']),\n                                fill = dict(color = [\"lightgrey\",'#F5F8FF'])\n                               ),\n                  columnwidth = [200,60,100,100,60,60,80,80,80])\nlayout = go.Layout(dict(title = \"Variable Summary\"))\nfigure = go.Figure(data=[trace],layout=layout)\npy.iplot(figure)","050393d5":"#correlation\ncorrelation = telcom.corr()\nprint(correlation)","d06a1137":"#tick lables\nmatrix_cols = correlation.columns.tolist()\nprint(matrix_cols)","1782810b":"#convert to array\ncorr_array = np.array(correlation)\nprint(corr_array)","149a3bfb":"#plotting the correlation\ntrace = go.Heatmap(z = corr_array,\n                   x = matrix_cols,\n                   y = matrix_cols,\n                   colorscale = \"Viridis\",\n                   colorbar   = dict(title = \"Pearson Correlation coefficient\",\n                                     titleside = \"right\"\n                                    ) ,\n                  )\n\nlayout = go.Layout(dict(title = \"Correlation Matrix for variables\",\n                        autosize = False,\n                        height  = 720,\n                        width   = 800,\n                        margin  = dict(r = 0 ,l = 210,\n                                       t = 25,b = 210,\n                                      ),\n                        yaxis   = dict(tickfont = dict(size = 9)),\n                        xaxis   = dict(tickfont = dict(size = 9))\n                       )\n                  )\n\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","800f7805":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\n\nX = telcom[[i for i in telcom.columns if i not in Id_col + target_col]]\nY = telcom[target_col + Id_col]\n\nprincipal_components = pca.fit_transform(X)\npca_data = pd.DataFrame(principal_components,columns = [\"PC1\",\"PC2\"])\npca_data = pca_data.merge(Y,left_index=True,right_index=True,how=\"left\")\npca_data[\"Churn\"] = pca_data[\"Churn\"].replace({1:\"Churn\",0:\"Not Churn\"})\n\ndef pca_scatter(target,color) :\n    tracer = go.Scatter(x = pca_data[pca_data[\"Churn\"] == target][\"PC1\"] ,\n                        y = pca_data[pca_data[\"Churn\"] == target][\"PC2\"],\n                        name = target,mode = \"markers\",\n                        marker = dict(color = color,\n                                      line = dict(width = .5),\n                                      symbol =  \"diamond-open\"),\n                        text = (\"Customer Id : \" + \n                                pca_data[pca_data[\"Churn\"] == target]['customerID'])\n                       )\n    return tracer\n\nlayout = go.Layout(dict(title = \"Visualising data with principal components\",\n                        plot_bgcolor  = \"rgb(243,243,243)\",\n                        paper_bgcolor = \"rgb(243,243,243)\",\n                        xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"principal component 1\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                     title = \"principal component 2\",\n                                     zerolinewidth=1,ticklen=5,gridwidth=2),\n                        height = 600\n                       )\n                  )\ntrace1 = pca_scatter(\"Churn\",'red')\ntrace2 = pca_scatter(\"Not Churn\",'royalblue')\ndata = [trace2,trace1]\nfig = go.Figure(data=data,layout=layout)\npy.iplot(fig)","ea19abcc":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score, roc_curve, scorer\nfrom sklearn.metrics import f1_score\nimport statsmodels.api as sm\nfrom sklearn.metrics import precision_score, recall_score\nfrom yellowbrick.classifier import DiscriminationThreshold","ada141f0":"#Splitting train and test data\ntrain, test = train_test_split(telcom, test_size = 0.25, random_state = 111)","4535a398":"#Seprating dependent and independent variables\ncols = [i for i in telcom.columns if i not in Id_col + target_col]\ntrain_X = train[cols]\ntrain_Y = train[target_col]\ntest_X = test[cols]\ntest_Y = test[target_col]\n","8105e6cd":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,accuracy_score,classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve,scorer\nfrom sklearn.metrics import f1_score\nimport statsmodels.api as sm\nfrom sklearn.metrics import precision_score,recall_score\nfrom yellowbrick.classifier import DiscriminationThreshold\n#splitting train and test data \ntrain,test = train_test_split(telcom,test_size = .25 ,random_state = 111)\n    \n##seperating dependent and independent variables\ncols    = [i for i in telcom.columns if i not in Id_col + target_col]\ntrain_X = train[cols]\ntrain_Y = train[target_col]\ntest_X  = test[cols]\ntest_Y  = test[target_col]\n\n","aa93e69a":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz","f3c6ebd8":"X_train, X_test, Y_train, Y_test = train_test_split(train_X, train_Y,test_size = 0.2)","a60059af":"#Decision Tree with depth from 1 to 5\nfor i in range (1,6):\n    print(\"Decision Tree with Depth = \",i)\n    model_dt_2 = DecisionTreeClassifier(random_state = 1, max_depth = i, criterion = \"gini\")\n    model_dt_2.fit(train_X, train_Y)\n    model_dt_2_score_train = model_dt_2.score(train_X, train_Y)\n    print(\"Training Score: \", model_dt_2_score_train)\n    model_dt_2_score_test = model_dt_2.score(test_X, test_Y)\n    print(\"Testing score: \",model_dt_2_score_test)\n    i = i+1\n    print(\" \")\n\n","6c707663":"    Function attributes\n        dataframe     - processed dataframe\n        Algorithm     - Algorithm used \n        training_x    - predictor variables dataframe(training)\n        testing_x     - predictor variables dataframe(testing)\n        training_y    - target variable(training)\n        training_y    - target variable(testing)\n        cf - [\"coefficients\",\"features\"](cooefficients for logistic regression,features for tree based models)\n        #threshold_plot - if True returns threshold plot for model\n\n","412a3087":"# Exploratory Data Analysis","1ff88a76":"## Visualising data with Principal components","1a2271d8":"## Data Preprocessing","c1022513":"## Customer attrition in data","c9759c1e":"# Variable distribution in customer attrition","3d4ee2d7":"#  Data Manipulation","d6846de4":"# Customer attrition in tenure groups","985e2044":"## Baseline model\"","19d47c0c":"# Model Building ","37fd6b5d":"## Monthly Charges and Total Charges by Tensure and churn groups","7ab1ec31":"## Correlation Matrix","84268858":"# Data overveiw","ed5e5f5e":"## Monthly charges,total charges and tenure in customer attrition","a3f721c7":"## Variable Summary","59c24508":"## Average Charges by tensure groups"}}