{"cell_type":{"5cf0dfa6":"code","4482a79f":"code","b3dd35c7":"code","be9a5dfa":"code","e674817a":"code","85a99609":"code","b052923c":"code","7aea916f":"code","73e270e9":"code","7a9af657":"code","787d5ac4":"code","4d0468c7":"code","dbad1f03":"code","f53f6cef":"code","0f71d236":"code","10db4a4e":"code","3d01f638":"code","778348ee":"code","ccf46c90":"code","0108e615":"code","14eeacd0":"code","985795ed":"code","43761797":"code","ab287be8":"code","502ea0db":"code","90716d63":"code","f75eeef2":"code","0f69a2ac":"code","366d53a5":"code","6b26e6c0":"code","bd08c48d":"code","a90ac825":"code","7142eae5":"code","e18da1c4":"code","ad9081a2":"code","83af4f75":"markdown","756aa76a":"markdown","c8456476":"markdown","3c6cdfd4":"markdown"},"source":{"5cf0dfa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4482a79f":"import matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.metrics import precision_recall_fscore_support\nfrom sklearn.metrics import f1_score\nfrom sklearn import metrics\nimport seaborn as sns","b3dd35c7":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n","be9a5dfa":"print(train_df.info())\nprint(test_df.info())","e674817a":"print(train_df.describe())\nprint('-'*50)\nprint(test_df.describe())","85a99609":"print(train_df.isnull().sum())\nprint(test_df.isnull().sum())","b052923c":"#To standardize the nan columns in Age feature by replace it by simple arthimetic mean\ntrain_df.replace(to_replace=np.nan,value=round(train_df.mean(),0),inplace=True)\ntrain_df.fillna(method='pad',inplace=True)\ntest_df.replace(to_replace=np.nan,value=round(test_df.mean(),0),inplace=True)\ntest_df.fillna(method='pad',inplace=True)\nprint(train_df.info())\nprint('_'*50)\nprint(test_df.info())","7aea916f":"print(train_df.columns.values)\nprint(test_df.columns.values)","73e270e9":"print(train_df.shape)\nprint(test_df.shape)","7a9af657":"train_df = train_df.replace({'male':0,'female':1})\ntest_df = test_df.replace({'male':0,'female':1})\nprint(train_df.head(1))\nprint(test_df.head(1))","787d5ac4":"#Survived\u2014 Whether the passenger survived or not and the value we are predicting (0=No, 1=Yes)\n#Pclass\u2014 The class of the ticket the passenger purchased (1=1st, 2=2nd, 3=3rd)\n#Sex\u2014 The passenger\u2019s sex\n#Age\u2014 The passenger\u2019s age in years\n#SibSp\u2014 The number of siblings or spouses the passenger had aboard the Titanic\n#Parch\u2014 The number of parents or children the passenger had aboard the Titanic\n#Ticket\u2014 The passenger\u2019s ticket number\n#Fare\u2014 The fare the passenger paid\n#Cabin\u2014 The passenger\u2019s cabin number\n#Embarked\u2014 The port where the passenger embarked (C=Cherbourg, Q=Queenstown, S=Southampton)","4d0468c7":"#Lets drop the unwanted columns\n#since cabin contains maximum of Nan columns so that can be drop \nremove_unwanted_columns = ['Cabin','Ticket','Name','PassengerId','Embarked']\ntrain_df = train_df.drop(remove_unwanted_columns,axis=1)\ntest_df = test_df.drop(remove_unwanted_columns,axis=1)\nprint(train_df.columns.values)\nprint(test_df.columns.values)","dbad1f03":"print(train_df.shape)\nprint(test_df.shape)","f53f6cef":"#view of mean 'survived' people on compare with its respected features(Pclass,Sex,SibSp,Parch,Age)\nprint('Pclass:',train_df[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False))\nprint('_'*40)\nprint('Sex:',train_df[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False))\nprint('_'*40)\nprint('SibSp:',train_df[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived',ascending=False))\nprint('_'*40)\nprint('Parch:',train_df[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived',ascending=False))","0f71d236":"#view of correaltion between features\nfeature_selection = ['Survived','Pclass','Sex','Age','SibSp','Parch','Fare']\ncorr = train_df[feature_selection].corr()\nsns.heatmap(corr,annot=True,annot_kws={'size':9},linewidths=0.5,xticklabels=feature_selection,\n           yticklabels=feature_selection,cmap='coolwarm')\n","10db4a4e":"#barplot\n#Sex vs Survived\npal = {0:'green',1:'red'}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x='Sex',y='Survived',data=train_df,palette=pal,linewidth=5,order=[0,1],capsize=0.5)\nplt.title('Sex\/Survived',loc='center',pad=40)\nplt.ylabel('% of passenger Survived')\nplt.xlabel('Sex')","3d01f638":"#Pclass vs Survived\nplt.subplots(figsize=(15,10))\nax = sns.barplot(x='Pclass',y='Survived',data=train_df,linewidth=5,capsize=0.1)\nplt.title('Pclass\/Sex',pad=40,loc='center')\nplt.ylabel('% of passengers Survived')\nplt.xlabel('Pclass')\n","778348ee":"#SibSP vs Survived\nsns.set(style='darkgrid')\nplt.subplots(figsize=(10,15))\nax = sns.barplot(x='SibSp',y='Survived',data=train_df,linewidth=5,capsize=0.1)\nplt.title('SibSp\/Survived',loc='center',pad=40)\nplt.ylabel('% of passengers survived')\nplt.xlabel('SibSP')","ccf46c90":"#Parch vs Survived\nsns.set(style='darkgrid')\nplt.subplots(figsize=(15,8))\nax = sns.barplot(x='Parch',y='Survived',data=train_df,linewidth=5,capsize=.05)\nplt.title('Parch\/Survived',loc='center',pad=40)\nplt.ylabel('% of passengers survived')\nplt.xlabel('Parch')","0108e615":"#Sex vs Survived\na = train_df['Sex']\nb = train_df['Survived']\nsns.countplot(a,label='count')\nplt.title('Sex\/Survived',loc='center',pad=40)\nplt.ylabel('passengers Survived')\nplt.xlabel('Sex')","14eeacd0":"#Pclass vs Survived\na = train_df['Pclass']\nb = train_df['Survived']\nsns.countplot(a,label='count')\nplt.title('Pclass\/Survived',loc='center',pad=40)\nplt.ylabel('passengers Survived')\nplt.xlabel('Pclass')","985795ed":"#SibSp\na = train_df['SibSp']\nb = train_df['Survived']\nsns.countplot(a,label='count')\nplt.title('SibSP\/Survived')\nplt.ylabel('passengers survived')\nplt.xlabel('SibSp')\n","43761797":"#Parch vs Survived\na = train_df['Parch']\nb = train_df['Survived']\nsns.countplot(a,label='count')\nplt.title('Parch\/Survived',loc='center',pad=40)\nplt.ylabel('passengers survived')\nplt.xlabel('Parch')","ab287be8":"#outlier Detection\nsns.set_style('darkgrid')\nfig,ax = plt.subplots(figsize=(16,12),ncols=2)\nax1 = sns.boxplot(x='Parch',y='Fare',hue='Pclass',data=train_df,ax=ax[0]);\nax2 = sns.boxplot(x='Parch',y='Fare',hue='Pclass',data=test_df,ax=ax[1]);\nax1.set_title('Training_data',fontsize=18)\nax2.set_title('Testing_data',fontsize=18)","502ea0db":"#let\nX_train = train_df.iloc[:,1:7]\nY_train = train_df.iloc[:,0]\n\nX_test = test_df.iloc[:,]\n\nY_test = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","90716d63":"#MinMaxscaler to normalize the value between 0 and 1\nscale = MinMaxScaler(feature_range=(0,1))\nscaled_train = scale.fit_transform(X_train)\nprint('scaled_train:',scaled_train)\nprint('_'*90)\n#Do similar for Test set\nscale = MinMaxScaler(feature_range=(0,1))\nscaled_test =  scale.fit_transform(X_test)\nprint('scaled_test:',scaled_test)","f75eeef2":"#Now implement the Machine Learning Algorithm ot predict the values and find accuracy\n#LogisticRegression\nlo_reg = LogisticRegression()\nlo_reg.fit(scaled_train,Y_train)\nY_pred = lo_reg.predict(X_test)\n#print(Y_pred)\nAcc_lo_reg = metrics.accuracy_score(Y_test['Survived'], Y_pred) * 100\nprint(Acc_lo_reg)\nprint('*'*40)\n#Confusion matrix\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')\n","0f69a2ac":"#DecisionTreeClassifier\nclf_tree = DecisionTreeClassifier()\nclf_tree.fit(scaled_train,Y_train)\nY_pred = clf_tree.predict(X_test)\nAcc_clf_tree = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_tree)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","366d53a5":"#KNeighborsclassifier\nclf_knn = KNeighborsClassifier()\nclf_knn.fit(scaled_train,Y_train)\nY_pred = clf_knn.predict(X_test)\nAcc_clf_knn = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_knn)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","6b26e6c0":"#RandomForestClassfier\nclf_random = RandomForestClassifier()\nclf_random.fit(scaled_train,Y_train)\nY_pred = clf_random.predict(X_test)\nAcc_clf_random = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_random)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","bd08c48d":"#Support vector machine\nclf_svm = RandomForestClassifier()\nclf_svm.fit(scaled_train,Y_train)\nY_pred = clf_svm.predict(X_test)\nAcc_clf_svm = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_svm)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","a90ac825":"#GaussianNB\nclf_naive = GaussianNB()\nclf_naive.fit(scaled_train,Y_train)\nY_pred = clf_naive.predict(X_test)\nAcc_clf_naive = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_naive)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","7142eae5":"#SGDClassifier\nclf_SGD = SGDClassifier()\nclf_SGD.fit(scaled_train,Y_train)\nY_pred = clf_SGD.predict(X_test)\nAcc_clf_SGD = accuracy_score(Y_test['Survived'],Y_pred)*100\nprint(Acc_clf_SGD)\nprint('*'*40)\nprint(classification_report(Y_test['Survived'],Y_pred))\ncnf_matrix = metrics.confusion_matrix(Y_test['Survived'],Y_pred)\nprint('cnf_matrix:',cnf_matrix)\nsns.heatmap(cnf_matrix,annot=True,fmt='d')","e18da1c4":"models = pd.DataFrame({\n    'Model': ['lo_reg','clf_tree','clf_knn','clf_naive','clf_svm','clf_random','clf_SGD'],\n    'Score': [Acc_lo_reg,Acc_clf_tree,Acc_clf_knn,Acc_clf_naive,Acc_clf_svm,\n              Acc_clf_random,Acc_clf_SGD]})\nmodels.sort_values(by='Score', ascending=False)","ad9081a2":"submission = pd.DataFrame({\n        \"PassengerId\": Y_test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nprint(submission)","83af4f75":"* Analyzing the data how our fetures related to statistical concepts\n1. Continuous Variable->Age,Fare\n2. Discrete Variable->SibSp,Parch\n3. Nominal scale->Sex\n>  **Nominal variables are used to 'name' or 'label' a series of values\n4. Ordinal scale->Pclass\n> **Ordinal scales provide info about the order of choices\n5. Categorial data->Survived,Emarked,Ticket,Cabin","756aa76a":"Plz ignore my accurarcy score since I am a Beginner and I try to built a much better model","c8456476":"> > ****Data Visualization\/Exploration","3c6cdfd4":"> > ***COUNTPLOT"}}