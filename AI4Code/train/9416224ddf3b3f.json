{"cell_type":{"896b62ac":"code","a79b35f6":"code","6a62ccb0":"code","e15c9793":"code","2f3281e9":"code","8f6f59ba":"code","b6ff789b":"code","5b64e74d":"code","d9526be5":"code","7ba75771":"code","b688b121":"code","26fff7bf":"code","75f09f95":"code","03007ca5":"code","3daa32b4":"code","474736e2":"code","089e8ea7":"code","4be6331b":"code","40e2994d":"code","98aa619d":"markdown","4b741cd4":"markdown","c0608aa3":"markdown","0afeca94":"markdown","1448e329":"markdown","a2ba6acd":"markdown","efe5720d":"markdown","2e4d3b7c":"markdown","d472100f":"markdown"},"source":{"896b62ac":"# Importing all necessary libraries.\nimport pandas as pd\nimport numpy as np \nimport matplotlib.pyplot as plt\nimport scipy\nimport scipy.integrate\nfrom scipy.integrate import odeint","a79b35f6":"def SIR_model(y, t, beta, gamma):\n    S, I, R = y\n    dS_dt = -beta*S*I\n    dI_dt = beta*S*I - gamma*I\n    dR_dt = gamma*I\n    \n    return([dS_dt, dI_dt, dR_dt])","6a62ccb0":"S0 = 0.9\nI0 = 0.1\nR0 = 0.0\nbeta = 0.35\ngamma = 0.1\n\nt = np.linspace(0, 100, 10000)\n\n\nsolution = scipy.integrate.odeint(SIR_model, [S0, I0, R0], t, args = (beta, gamma))\nsolution = np.array(solution)","e15c9793":"plt.figure(figsize=[10,10])\nplt.plot(t, solution[:, 0], label = 'S(t)')\nplt.plot(t, solution[:, 1], label = 'I(t)')\nplt.plot(t, solution[:, 2], label = 'R(t)')\nplt.grid()\nplt.xlabel(\"Time\")\nplt.ylabel(\"Proportions\")\nplt.title(\"SIR Model\")\nplt.legend()\nplt.show()","2f3281e9":"def deriv(y, t, N, beta, gama):\n        S, I, R = y\n        dSdt = -beta * S * I \/ N\n        dIdt = beta * S * I \/ N - gama * I\n        dRdt = gama * I\n        return dSdt, dIdt, dRdt\n\ndef sir(N, beta, gama=1\/10, I0=1, R0=0, t=90):\n        t = np.linspace(0, t, t)\n        S0 = N - I0 - R0\n        y0 = S0, I0, R0\n        ret = odeint(deriv, y0, t, args=(N, beta, gama))\n        S, I, R = ret.T\n        return {'S': S, 'I': I, 'R': R, 't': t}\n\ndef curves(s, title):\n        fig, ax = plt.subplots(figsize=(12,8))\n        plt.plot(s['t'], s['S'], 'b', alpha=0.5, lw=4, label='Susceptible')\n        plt.plot(s['t'], s['I'], 'r', alpha=0.5, lw=4, label='Infected')\n        plt.plot(s['t'], s['R'], 'g', alpha=0.5, lw=4, label='Recovered')\n        plt.grid(which='major', axis='y')\n        plt.ticklabel_format(scilimits=(6,6), axis='y')\n        plt.text(0.9,1,s='\u03b2: %.3f \u03b3: %.2f' % (beta, gama), transform=ax.transAxes, fontsize=10)\n        plt.title(title, fontsize=14, fontweight='bold', color='#333333')\n        plt.xlabel('Days', fontsize=12)\n        plt.ylabel('Number of cases (million)', fontsize=12)\n        legend = plt.legend(loc=5, fontsize=12)\n        ax.set_ylim(0)\n        [ax.spines[spine].set_visible(False) for spine in ('top', 'right', 'left')]\n        plt.gca().xaxis.set_major_locator(plt.MultipleLocator(10))\nplt.show();","8f6f59ba":"gama = 1\/5.2\nbeta = 1\ncurves(sir(51000000 , beta, gama, t=180, I0=100), 'COVID-19 SIR Model: No-action')","b6ff789b":"# Effects of Social Distancing\nbeta = 0.88\ncurves(sir(51000000, beta, gama, t=120, I0=100), 'COVID-19 SIR Model: Social Distancing')","5b64e74d":"# Effects of Social Distancing and Quarantine.\nbeta = 0.449\ncurves(sir(51000000, beta, gama, t=120, I0=100), 'COVID-19 SIR Model: Social Distancing + Quarantine')","d9526be5":"# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\ndef plot_sir_curves(title, N, I0, R0, beta, gamma):\n    R_0 = beta \/ gamma\n\n    # A grid of time points (in days)\n    t = np.linspace(0, 365 * 2, 1000)\n    # Initial conditions vector\n    y0 = S0, I0, R0\n    # Integrate the SIR equations over the time grid, t.\n    ret = odeint(deriv, y0, t, args=(N, beta, gamma))\n    S, I, R = ret.T\n\n    # Plot the data on three separate curves for S(t), I(t) and R(t)\n    fig = plt.figure(facecolor='w', figsize=(20, 10))\n\n    ax = fig.add_subplot(111) #, axisbelow=True)\n    ax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\n    ax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\n    ax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered with immunity')\n    ax.set_xlabel('Time \/days')\n    ax.set_ylabel('Number')\n    ax.set_ylim(0, N * 1.1)\n    ax.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\n    legend = ax.legend()\n    legend.get_frame().set_alpha(1.0)\n\n    ax.minorticks_on()\n    ax.grid(b=True, axis='y', which='minor', linestyle=':')\n    ax.grid(b=True, axis='y', which='major', lw=2, ls='-')\n    ax.grid(b=True, axis='x', which='major', lw=2, ls='-', alpha=0.5)\n    \n    plt.title(\"{:}\\n(R_0: {:.3f}, beta: {:.3f})\".format(title, R_0, beta))\n\n    plt.show()","7ba75771":"# This is a model of a pessimistic scenario with no social distancing at all.\n# Total population, N.\nN = 327000000\n\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 3500, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n\n# mean recovery rate, gamma, (in 1\/days).\ngamma = 1.\/14\n\n# Contact rate, beta (percent of population touched+infected by an infected person daily).\n# Also, R_0 = beta \/ gamma\nR_0 = 4\nbeta = R_0 * gamma\n\n# Contact rate, beta (percent of population touched+infected by an infected person daily).\n# Also, R_0 = beta \/ gamma\nR_0 = 4\nbeta = R_0 * gamma\n\nplot_sir_curves(\"US - Worst Case Estimate, No Lockdown Scenario\", N, I0, R0, beta, gamma)","b688b121":"# This is a more optimistic scenario with this still no social distancing but a lower R0 Number.\n# Total population, N.\nN = 327000000\n\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 3500, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n\n# mean recovery rate, gamma, (in 1\/days).\ngamma = 1.\/14\n\n# Contact rate, beta (percent of population touched+infected by an infected person daily).\n# Also, R_0 = beta \/ gamma\nR_0 = 1.4\nbeta = R_0 * gamma\n\nplot_sir_curves(\"US - Optimistic Estimate, No Lockdown Scenario\", N, I0, R0, beta, gamma)","26fff7bf":"# This is a model of a more reasonable scenario with a lower R0 than the pessimistic scenario but a higher one than the \n# optimistic one.\n# Total population, N.\nN = 327000000\n\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 3500, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n\n# mean recovery rate, gamma, (in 1\/days).\ngamma = 1.\/14\n\n# Contact rate, beta (percent of population touched+infected by an infected person daily).\n# Also, R_0 = beta \/ gamma\nR_0 = 2.5\nbeta = R_0 * gamma\n\nplot_sir_curves(\"US - Reasonable $R_0$ with no lockdown\", N, I0, R0, beta, gamma)","75f09f95":"# Susceptible equation\ndef fa(N, a, b, beta):\n    fa = -beta*a*b\n    return fa\n\n# Infected equation\ndef fb(N, a, b, beta, gamma):\n    fb = beta*a*b - gamma*b\n    return fb\n\n# Recovered\/deceased equation\ndef fc(N, b, gamma):\n    fc = gamma*b\n    return fc","03007ca5":"def rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs):\n    a1 = fa(N, a, b, beta)*hs\n    b1 = fb(N, a, b, beta, gamma)*hs\n    c1 = fc(N, b, gamma)*hs\n    ak = a + a1*0.5\n    bk = b + b1*0.5\n    ck = c + c1*0.5\n    a2 = fa(N, ak, bk, beta)*hs\n    b2 = fb(N, ak, bk, beta, gamma)*hs\n    c2 = fc(N, bk, gamma)*hs\n    ak = a + a2*0.5\n    bk = b + b2*0.5\n    ck = c + c2*0.5\n    a3 = fa(N, ak, bk, beta)*hs\n    b3 = fb(N, ak, bk, beta, gamma)*hs\n    c3 = fc(N, bk, gamma)*hs\n    ak = a + a3\n    bk = b + b3\n    ck = c + c3\n    a4 = fa(N, ak, bk, beta)*hs\n    b4 = fb(N, ak, bk, beta, gamma)*hs\n    c4 = fc(N, bk, gamma)*hs\n    a = a + (a1 + 2*(a2 + a3) + a4)\/6\n    b = b + (b1 + 2*(b2 + b3) + b4)\/6\n    c = c + (c1 + 2*(c2 + c3) + c4)\/6\n    return a, b, c","3daa32b4":"def SIR(N, b0, beta, gamma, hs):\n    \n    \"\"\"\n    N = total number of population\n    beta = transition rate S->I\n    gamma = transition rate I->R\n    k =  denotes the constant degree distribution of the network (average value for networks in which \n    the probability of finding a node with a different connectivity decays exponentially fast\n    hs = jump step of the numerical integration\n    \"\"\"\n    \n    # Initial condition\n    a = float(N-1)\/N -b0\n    b = float(1)\/N +b0\n    c = 0.\n\n    sus, inf, rec= [],[],[]\n    for i in range(10000): # Run for a certain number of time-steps\n        sus.append(a)\n        inf.append(b)\n        rec.append(c)\n        a,b,c = rK4(N, a, b, c, fa, fb, fc, beta, gamma, hs)\n\n    return sus, inf, rec","474736e2":"# Parameters of the model\nN = 7800*(10**6)\nb0 = 0\nbeta = 0.7\ngamma = 0.2\nhs = 0.1\n\nsus, inf, rec = SIR(N, b0, beta, gamma, hs)\n\nf = plt.figure(figsize=(8,5)) \nplt.plot(sus, 'b.', label='susceptible');\nplt.plot(inf, 'r.', label='infected');\nplt.plot(rec, 'c.', label='recovered\/deceased');\nplt.title(\"SIR model\")\nplt.xlabel(\"time\", fontsize=10);\nplt.ylabel(\"Fraction of population\", fontsize=10);\nplt.legend(loc='best')\nplt.xlim(0,1000)\nplt.savefig('SIR_example.png')\nplt.show()","089e8ea7":"# Feel free to change these parameters and see how the model changes\nN = 15000\n\nS0 = 14990\nI0 = 10\nR0 = 0\n\nb = 0.243\nk = 0.143\n\nno_of_days = 100\n\n# Calculating Basic Reproduction Number Ro\nreproduction_number = b \/ k\n\n# A grid of time points (in days)\nt = np.linspace(0, no_of_days + 1, no_of_days + 1)\n\n# Initial conditions vector\ny0 = S0, I0, R0\n\n\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, b, k))\nS, I, R = ret.T\n\n# Rounding off\nS = np.round(np.array(S))\nI = np.round(np.array(I))\nR = np.round(np.array(R))\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nfig = plt.figure(facecolor='w')\nax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)\nax.plot(t, S, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R, 'g', alpha=0.5, lw=2, label='Recovered')\nax.set_xlabel('Time \/days')\nax.set_ylabel('Number')\nax.set_ylim(0,1.2*N)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nplt.show()\n","4be6331b":"# The SIR model differential equations.\ndef deriv(state, t, N, beta, gamma):\n    S, I, R = state\n    # Change in S population over time\n    dSdt = -beta * S * I \/ N\n    # Change in I population over time\n    dIdt = beta * S * I \/ N - gamma * I\n    # Change in R population over time\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt","40e2994d":"effective_contact_rate = 0.8\nrecovery_rate = 1\/4\n\n# We'll compute this for fun\nprint(\"R0 is\", effective_contact_rate \/ recovery_rate)\n\n# What's our start population look like?\n# Everyone not infected or recovered is susceptible\ntotal_pop = 1000\nrecovered = 0\ninfected = 1\nsusceptible = total_pop - infected - recovered\n\n# A list of days, 0-160\ndays = range(0, 160)\n\n# Use differential equations magic with our population\nret = odeint(deriv,\n             [susceptible, infected, recovered],\n             days,\n             args=(total_pop, effective_contact_rate, recovery_rate))\nS, I, R = ret.T\n\n# Build a dataframe because why not\ndf = pd.DataFrame({\n    'suseptible': S,\n    'infected': I,\n    'recovered': R,\n    'day': days\n})\n\nplt.style.use('ggplot')\ndf.plot(x='day',\n        y=['infected', 'suseptible', 'recovered'],\n        color=['#bb6424', '#aac6ca', '#cc8ac0'],\n        kind='area',\n        stacked=False)\n\n# If you get the error:\n#\n#     When stacked is True, each column must be either all\n#     positive or negative.infected contains both...\n#\n# just change stacked=True to stacked=False","98aa619d":"# Importing Libraries","4b741cd4":"In this notebook I take a look at several different SIR models that can be used to track the spread of COVID-19 or any disease.","c0608aa3":"**Model 5**","0afeca94":"**Model 4**","1448e329":"**Model 1**","a2ba6acd":"**Model 2**","efe5720d":"# SIR Modelling","2e4d3b7c":"# Combination of SIR Models","d472100f":"**Model 3**"}}