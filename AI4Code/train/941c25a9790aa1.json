{"cell_type":{"49dc1e6a":"code","3017f735":"code","74858bfc":"code","badcba52":"code","7bdd8a86":"code","4cf663cb":"code","af003f32":"code","a9fd80ec":"code","db49fdbc":"code","2ba33a55":"code","4af5cb92":"code","930ef36e":"code","d161eb05":"code","a9136245":"markdown","2b3303d8":"markdown","533f54ae":"markdown","60d82530":"markdown"},"source":{"49dc1e6a":"import os\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter","3017f735":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","74858bfc":"def parse(x):\n    return pd.to_datetime(x, infer_datetime_format=True, unit='s',utc=True)","badcba52":"nrows_read = 100000 # specify 'None' if want to read whole file (405,184 rows)\ndata_path = '\/kaggle\/input\/environmental-sensor-data-132k\/iot_telemetry_data.csv'\n\ndf = pd.read_csv(data_path,\n                  delimiter=',',\n                  nrows = nrows_read,\n                  header=0,\n                  infer_datetime_format=True,\n                  date_parser=parse,\n                  index_col=['ts'])","7bdd8a86":"# sort data\ndf = df.sort_values(by='ts', ascending=True)","4cf663cb":"# convert celsius to fahrenheit (\u00b0C to \u00b0F)\ndf['temp'] = (df['temp'] * 1.8) + 32","af003f32":"# preview data\ndf.head(5)","a9fd80ec":"# filter temp\/humidity, by device, for outliers (>1% & <99%)\ndf = df.loc[df['temp'] >df.groupby('device').temp.transform(lambda x: x.quantile(.01))]\ndf = df.loc[df['temp'] < df.groupby('device').temp.transform(lambda x: x.quantile(.99))]\n\ndf = df.loc[df['humidity'] > df.groupby('device').humidity.transform(lambda x: x.quantile(.01))]\ndf = df.loc[df['humidity'] < df.groupby('device').humidity.transform(lambda x: x.quantile(.99))]","db49fdbc":"# group data by iot device\ngroups = df.groupby('device')","2ba33a55":"print('DataFrame Stats')\nprint('-------------')\nprint('Record count: {:,}'.format(df['temp'].count()))\nprint('DataFrame size (MB): {:,.2f}'.format(sys.getsizeof(df)\/1024\/1024))\nprint('-------------')\nprint('Time range (min): {:%Y-%m-%d %H:%M:%S %Z}'.format(df.index[1]))\nprint('Time range (max): {:%Y-%m-%d %H:%M:%S %Z}'.format(df.index[-1]))\nprint('Temperature (min): {:.2f}'.format(df['temp'].min()))\nprint('Temperature (max): {:.2f}'.format(df['temp'].max()))\nprint('Humidity (min): {:.2f}{}'.format(df['humidity'].min(), '%'))\nprint('Humidity (max): {:.2f}{}'.format(df['humidity'].max(), '%'))\nprint('-------------')\nprint('Record count:\\n{}'.format(groups.size()))","4af5cb92":"_, ax = plt.subplots(1, 1, figsize=(18, 9))\nfor device, group in groups:\n    ax.plot(group.temp,\n            group.humidity,\n            marker='o',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=device)\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Temperature vs. Humidity')\nplt.xlabel('Temperature (\u02daF)')\nplt.ylabel('Humidity (%)')\nplt.show()","930ef36e":"fig, ax = plt.subplots(1, 1, figsize=(18, 9))\nfor device, group in groups:\n    group.mean = group.temp.rolling(window=20).mean()\n    ax.plot(group.mean,\n            label=device)\nfig.autofmt_xdate()\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Temperature Comparison over Time')\nplt.ylabel('Temperature (\u02daF)')\nplt.xlabel('Time')\nplt.show()","d161eb05":"fig, ax = plt.subplots(1, 1, figsize=(18, 9))\nfor device, group in groups:\n    group.mean = group.humidity.rolling(window=20).mean()\n    ax.plot(group.mean,\n            label=device)\nfig.autofmt_xdate()\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Humidity Comparison over Time')\nplt.ylabel('Humidity (%)')\nplt.xlabel('Time')\nplt.show()","a9136245":"### Temperature Graph (Moving Average)\n* Smoothing data using the mean average of a 1 minute rolling window\n* 1 minutes == (20) data-points @ 3 second intervals","2b3303d8":"### Scatter Plot using Matplotlib\n* Using [Matplotlib: Visualization with Python](https:\/\/matplotlib.org\/)\n* X Axis = temperature\n* Y Axis = humidity\n","533f54ae":"### Humidity Graph (Moving Average)","60d82530":"# IoT Telemetry Demo Notebook\n\nEnvironmental sensor telemetry data, detailed in the blog post, [Getting Started with IoT Analytics on AWS](http:\/\/tinyurl.com\/iot-analytics-aws), published on [Towards Data Science](https:\/\/towardsdatascience.com).\n\n\n### Details\n\nThe data was generated from a series of three identical, custom-built, breadboard-based sensor arrays. Each array was connected to a Raspberry Pi devices. Each of the three IoT devices was placed in a physical location with varied environmental conditions.\n\n\n```text\n| device            | environmental conditions                 |\n|-------------------|------------------------------------------|\n| 00:0f:00:70:91:0a | stable conditions, cooler and more humid |\n| 1c:bf:ce:15:ec:4d | highly variable temperature and humidity |\n| b8:27:eb:bf:9d:51 | stable conditions, warmer and dryer      |\n```\n\nEach IoT device collected a total of seven different readings from the four sensors on a regular interval. Sensor readings include temperature, humidity, carbon monoxide (CO), liquid petroleum gas (LPG), smoke, light, and motion. The data spans the period from 07\/12\/2020 00:00:00 UTC - 07\/19\/2020 23:59:59 UTC. There is a total of 405,184 rows of data.\n\nThe sensor readings, along with a unique device ID and timestamp, were published as a single message, using the ISO standard Message Queuing Telemetry Transport (MQTT) network protocol. Below is an example of an MQTT message payload.\n\n\n```json\n{\n  \"data\": {\n    \"co\": 0.006104480269226063,\n    \"humidity\": 55.099998474121094,\n    \"light\": true,\n    \"lpg\": 0.008895956948783413,\n    \"motion\": false,\n    \"smoke\": 0.023978358312270912,\n    \"temp\": 31.799999237060547\n  },\n  \"device_id\": \"6e:81:c9:d4:9e:58\",\n  \"ts\": 1594419195.292461\n}\n```\n\n### Columns\n\nThere are nine columns in the dataset, as follows.\n\n```text\n| column   | description          | units      |\n|----------|----------------------|------------|\n| ts       | timestamp of event   | epoch      |\n| device   | unique device name   | string     |\n| co       | carbon monoxide      | ppm (%)    |\n| humidity | humidity             | percentage |\n| light    | light detected?      | boolean    |\n| lpg      | liquid petroleum gas | ppm (%)    |\n| motion   | motion detected?     | boolean    |\n| smoke    | smoke                | ppm (%)    |\n| temp     | temperature          | Fahrenheit |\n```"}}