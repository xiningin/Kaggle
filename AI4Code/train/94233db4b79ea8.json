{"cell_type":{"241fe18e":"code","6209fc99":"code","64c2e7b8":"code","c6c966cf":"code","e7bfd328":"code","8a770c43":"code","fda58ed5":"code","c3874748":"code","3bc0151f":"code","ac16c715":"code","0dfe363e":"code","47cb9aac":"code","8f88cd07":"code","0ec89a87":"code","968051f2":"code","9bfa803b":"code","b7ad7c31":"code","9f1c49d8":"code","eea53011":"code","5c322608":"code","55e98b7d":"code","4b7764f1":"code","28da6d99":"code","d5db9255":"code","4bee19c7":"code","86fa10bc":"code","9c86edc9":"code","68a19662":"code","374fbb09":"code","2df7c81d":"code","ac05261a":"code","1acdb124":"markdown","3a1883c4":"markdown","d5ca6f73":"markdown","379e1932":"markdown","115901c6":"markdown","0a54f1c1":"markdown","990eddc9":"markdown","bf728520":"markdown","e03fbe84":"markdown","b603c85a":"markdown","25a1c27e":"markdown","f76bea0d":"markdown","ed3e66cc":"markdown","c35d4b3a":"markdown","9d354210":"markdown","aa00879d":"markdown","92d23bf1":"markdown","a564d541":"markdown","fd8a1f4c":"markdown","5ef46dbe":"markdown","c76db9c9":"markdown","97765791":"markdown","b117cf1f":"markdown"},"source":{"241fe18e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nfrom datetime import date, timedelta\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # Scatter plots, Histogram, Bar Charts\nimport seaborn as sns # Heatmap\nfrom plotly.offline import init_notebook_mode, iplot#Contours\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go \n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6209fc99":"df_pgen1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf_pgen2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')","64c2e7b8":"df_pgen1.info()","c6c966cf":"df_pgen2.info()","e7bfd328":"df_pgen1['DATE_TIME'] = pd.to_datetime(df_pgen1['DATE_TIME'], format = '%d-%m-%Y %H:%M') # Converting Date_Time to Date format\ndf_pgen1['DATE'] = df_pgen1['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen1['TIME'] = df_pgen1['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen1['DATE'] = pd.to_datetime(df_pgen1['DATE'],format = '%Y-%m-%d')\ndf_pgen1['HOUR'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen1['MINUTES'] = pd.to_datetime(df_pgen1['TIME'],format='%H:%M:%S').dt.minute\n\ndf_pgen2['DATE_TIME'] = pd.to_datetime(df_pgen2['DATE_TIME'], format = '%Y-%m-%d %H:%M:%S')\ndf_pgen2['DATE'] = df_pgen2['DATE_TIME'].apply(lambda x:x.date())\ndf_pgen2['TIME'] = df_pgen2['DATE_TIME'].apply(lambda x:x.time())\ndf_pgen2['DATE'] = pd.to_datetime(df_pgen2['DATE'],format = '%Y-%m-%d')\ndf_pgen2['HOUR'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.hour\ndf_pgen2['MINUTES'] = pd.to_datetime(df_pgen2['TIME'],format='%H:%M:%S').dt.minute\n\nmerged= pd.merge(df_pgen2,df_pgen1,on= 'DATE_TIME',how='left')\n\nprint(\"Number of Invertors\",len(df_pgen1['SOURCE_KEY'].unique()))\nmerged.head()\n","8a770c43":"#Exploring Data \nprint(df_pgen1['DC_POWER'].mean())\nprint(df_pgen1[df_pgen1['SOURCE_KEY'] == 'wCURE6d3bPkepu2']['DC_POWER'].mean())\ndf_pgen1.head()\ndf_pgen1.tail()\ndf_pgen1.value_counts()\ndf_pgen1['DATE_TIME'].value_counts()\ndf_pgen1.describe()\n\n\n","fda58ed5":"null_data = merged[merged.isnull().any(axis = 1)]\nnull_data\nmerged['PLANT_ID_y']= merged['PLANT_ID_y'].fillna(0)\nmerged['SOURCE_KEY_y']= merged['SOURCE_KEY_y'].fillna(0)\nmerged['DC_POWER']= merged['DC_POWER'].fillna(0)\nmerged['AC_POWER']= merged['AC_POWER'].fillna(0)\nmerged['DAILY_YIELD']= merged['DAILY_YIELD'].fillna(0)\nmerged['TOTAL_YIELD']= merged['TOTAL_YIELD'].fillna(0)\nmerged['DATE_y']= merged['DATE_y'].fillna(0)\nmerged['TIME_y']= merged['TIME_y'].fillna(0)\nmerged['HOUR_y']= merged['HOUR_y'].fillna(0)\nmerged['MINUTES_y']= merged['MINUTES_y'].fillna(0)\nmerged['IRRADIATION']= merged['IRRADIATION'].fillna(0)\nmerged['AMBIENT_TEMPERATURE']= merged['AMBIENT_TEMPERATURE'].fillna(0)\nmerged['MODULE_TEMPERATURE']= merged['MODULE_TEMPERATURE'].fillna(0)","c3874748":"merged.isnull().count()","3bc0151f":"_, ax = plt.subplots(1, 1, figsize=(16, 9))\n\nax.plot(df_pgen1.DATE_TIME,df_pgen1.DC_POWER.rolling(window=20).mean()\/10,label='DC Power')\nax.plot(df_pgen1.DATE_TIME,df_pgen1.AC_POWER.rolling(window=20).mean(),label='AC Power')\n\n\nax.grid()\nax.margins(0.05)\nax.legend()\n\n\nplt.title('AC_POWER vs DC Power')\nplt.xlabel('Date and Time')\nplt.ylabel('POWER')\nplt.show()","ac16c715":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Indicator(\n    mode = \"gauge+number\",\n    value = ((df_pgen1['AC_POWER'].sum()\/(df_pgen1['DC_POWER'].sum()\/10))*100),\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    title = {'text': \"AC Power generated from DC Power %\"},\n    gauge = {'axis': {'range': [None, 100]},\n            'steps' : [\n                 {'range': [0, 50], 'color': \"#DC143C\"},\n                 {'range': [50, 95], 'color': \"#FF8C00\"},\n                {'range': [80, 95], 'color': \"yellow\"},\n                 {'range': [95, 100], 'color': \"lightgreen\"},\n            ]}\n))\n    \n\nfig.show()","0dfe363e":"iplot([go.Histogram2dContour(x=df_pgen1.head(10000)['AC_POWER'], \n                             y=df_pgen1.head(10000)['DC_POWER'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=df_pgen1.head(20000)['AC_POWER'], y=df_pgen1.head(20000)['DC_POWER'], mode='markers')])","47cb9aac":"_, ax = plt.subplots(1, 1, figsize=(20, 9))\nax.plot(\n    df_pgen2[\"MODULE_TEMPERATURE\"], df_pgen2[\"IRRADIATION\"], \"o--\",\n    linestyle='',\n    alpha=0.75, label=\"Irradiation\",\n    \n)\n\n\n\n#plt.plot(1, 1, figsize=(18, 9))\n#plt.figsize(1800, 900)\nplt.ylabel('Irradiation')\nplt.xlabel('Module Temperature')\nplt.legend()\nplt.show()","8f88cd07":"#ax = plt_init()\n_, ax = plt.subplots(1, 1, figsize=(20, 9))\nax.plot(\n    df_pgen2[\"DATE_TIME\"], df_pgen2[\"IRRADIATION\"], \"o--\",\n    alpha=0.75, label=\"Irradiation\",\n    \n)\n#min_max_scaler = MinMaxScaler()\nax.plot(\n    df_pgen2[\"DATE_TIME\"], df_pgen2[\"MODULE_TEMPERATURE\"]\/60, \n    alpha=0.75, label=\"Relative Module Temperature\"\n    \n)\n\n\n#plt.plot(1, 1, figsize=(18, 9))\n#plt.figsize(1800, 900)\nplt.legend()\nplt.show()","0ec89a87":"#Line Graph to visualize how Module Temperature varies with Irradiation for Plant 1 for 34 days\n\n\nplt.plot(df_pgen2.IRRADIATION,\n        df_pgen2.MODULE_TEMPERATURE.rolling(window=4).mean(),\n         marker='o',\n         linestyle='',\n        label='MODULE TEMPERATURE'\n       )\n\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Line Graph showing How Module Temperature varies with Irradiation for 34 Days for Plant 1')\nplt.xlabel('Irradiation')\nplt.ylabel('Module Temperature')\nplt.show()","968051f2":"_, ax = plt.subplots(1, 1, figsize=(20, 9))\nax.plot(\n    merged[\"MODULE_TEMPERATURE\"],merged.DC_POWER.rolling(window=20).mean()\/(12000\/60), \"o--\",\n    linestyle='',\n    alpha=0.75, label=\"\",\n    \n)\n\n\n\n#plt.plot(1, 1, figsize=(18, 9))\n#plt.figsize(1800, 900)\n\n\nplt.legend()\nplt.show()","9bfa803b":"\n_, ax = plt.subplots(1, 1, figsize=(16, 9))\n\nax.plot(df_pgen1.DATE_TIME,df_pgen1.DC_POWER.rolling(window=20).mean()\/(12000\/60),label='Relative DC_POWER')\nax.plot(df_pgen2.DATE_TIME,df_pgen2.MODULE_TEMPERATURE.rolling(window=20).mean(),label='MODULE')\n\n\n\nax.grid()\nax.margins(0.05)\nax.legend()\n\n\nplt.title('Relative DC Power vs Module Temperature over a period of 34 Days')\nplt.xlabel('Date and Time')\nplt.ylabel('Temperature')\nplt.show()","b7ad7c31":"iplot([go.Histogram2dContour(y=df_pgen2.head(10000)['MODULE_TEMPERATURE'], \n                             x=df_pgen2.head(10000)['DATE_TIME'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(y=df_pgen2.head(20000)['MODULE_TEMPERATURE'], x=df_pgen2.head(20000)['DATE_TIME'], mode='markers')])","9f1c49d8":"#Plot bar graph of sourcekey vs total yield for a particular inverter\nplt.figure(figsize= (20,10))\ninv_lst= df_pgen1['SOURCE_KEY'].unique()\nplt.bar(inv_lst,df_pgen1.groupby('SOURCE_KEY')['TOTAL_YIELD'].max())\n\n\nplt.xticks(rotation = 45)\nplt.grid()\nplt.show()\n\ndf_pgen1['AC_POWER'].argmax() \nprint(\"Plant 1:\")\n\nprint(\"Maximum Total Yield:\", df_pgen1['SOURCE_KEY'].values[df_pgen1['TOTAL_YIELD'].argmax()])\nprint(\"Minimum Total Yield:\", df_pgen1['SOURCE_KEY'].values[df_pgen1['TOTAL_YIELD'].argmin()])","eea53011":"\nplt.plot(merged['IRRADIATION'],merged['DC_POWER'],c='cyan',marker ='o',linestyle='',alpha = 0.07,label ='DC POWER')\nplt.legend()\nplt.xlabel('irradiation')\nplt.ylabel('dc power')\nplt.show()","5c322608":"dates = df_pgen2['DATE'].unique()\n\n_, ax = plt.subplots(1, 1, figsize=(18, 9))\n\nfor date in dates:\n    df_data = df_pgen2[df_pgen2['DATE']==date]\n\n    ax.plot(df_data.AMBIENT_TEMPERATURE,\n            df_data.MODULE_TEMPERATURE,\n            marker='.',\n            linestyle='',\n            alpha=.5,\n            ms=10,\n            label=pd.to_datetime(date,format='%Y-%m-%d').date()\n           )\n\nax.grid()\nax.margins(0.05)\nax.legend()\nplt.title('Scatter Plot for Module Temperature vs Ambient Temperature for 34 Days for Plant 1')\nplt.xlabel('Ambient Temperature')\nplt.ylabel('Module Temperature')\nplt.show()","55e98b7d":"data = merged[merged['DATE_x']== dates[1]][merged['IRRADIATION']>0.1]\nplt.plot(data['MODULE_TEMPERATURE'],data['DC_POWER'],marker ='o',linestyle='',label = pd.to_datetime(dates[1],format='%Y-%m-%d').date)\nplt.legend()","4b7764f1":"merged.info()","28da6d99":"\nX = merged.iloc[:,5:6].values   #Irradiation\ny =merged.iloc[:,12].values        #DC POWER\n\n\nplt.scatter(X,y)","d5db9255":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 0)","4bee19c7":"y_train.shape\ny_test.shape","86fa10bc":"from sklearn.linear_model import LinearRegression\nlin_reg =LinearRegression()\nlin_reg.fit(X_train,y_train) \ny_pred =lin_reg.predict(X_test)\ny_pred","9c86edc9":"plt.scatter(X,y)","68a19662":"plt.scatter(X_test,y_test,color ='blue')\nplt.scatter(X_test,y_pred,color ='red')\nplt.ylabel(\"DC Power\")\nplt.xlabel(\"Irradiation\")\nplt.legend()\nplt.show()","374fbb09":"print(\"Slope:\",lin_reg.coef_ )  #slope  m\nprint(\"Y Intercept:\",lin_reg.intercept_)  #y intercept","2df7c81d":"#we are create on program wherein we should get one url for our website\n#flask library\n#flask is a web application framework written in Python\n\n\n!pip install flask-ngrok\n#-m pip install --upgrade pip\n#ngrok will make local url tunnel to a global url","ac05261a":"#Create a website\nfrom flask_ngrok import run_with_ngrok\nfrom flask import Flask\n\napp = Flask(__name__)\nrun_with_ngrok(app)\n\n@app.route('\/')\ndef home():\n    return \"Hi welcome to ML Model,           Please input a value in the path of the URL\"\n\n@app.route('\/<float:x>')\ndef ml(x):\n    b = (\"Input: \"+ str(x) +\"\\n\" )\n    a = (\"DC Power: \"+ str(lin_reg.predict([[x]])))\n    b = b+\" \"+a\n    return (b)\napp.run()","1acdb124":"**Irradiation Vs DC Power**","3a1883c4":"Removing all null values","d5ca6f73":"Hypothesis: More Irradiation leads to higher Power generation \n\nObservation: The Data can be represnted as a linear graph with DC Power output increasing with  amount of Irradiation\n\nConclusion: More Power Output Requires more Irradiation","379e1932":"**Irradiation Vs DC POWER**","115901c6":"**Observation : Here we can see that the DC Power at Module Temperatures above 58-59 degrees is the same as the Power being generated at 50-53 degrees thus proving that Module Temperatures above 60 degrees reduce efficiency of the panels**","0a54f1c1":"# Efficiency Reduces at Higher temperatures?","990eddc9":"# Exploring the data","bf728520":"![Solar Power Generation](https:\/\/kenbrooksolar.com\/wp-content\/uploads\/2016\/02\/100kw-and-above-Solar-power-Plants.png)","e03fbe84":"**Heatmap for Module Temperature**","b603c85a":"> \"Photovoltaic modules are tested at a temperature of 25 degrees C (STC) \u2013 about 77 degrees F., and depending on their installed location, heat can reduce output efficiency by 10-25%.  As the temperature of the solar panel increases, its output current increases exponentially, while the voltage output is reduced linearly. In fact, the voltage reduction is so predictable, that it can be used to accurately measure temperature. \" - [How Does Heat Affect Solar Panel Efficiencies?](https:\/\/www.cedgreentech.com\/article\/how-does-heat-affect-solar-panel-efficiencies#:~:text=Photovoltaic%20modules%20are%20tested%20at,voltage%20output%20is%20reduced%20linearly.)\n","25a1c27e":"**AC Power transfer loss should be minimum **\n\n\n**According to a study conversion from DC to AC usually loses 2 to 4% of energy output\nMost Invertors retain 96-98% of the energy**\n\nhttps:\/\/help.aurorasolar.com\/hc\/en-us\/articles\/235994088-System-Loss-Diagram","f76bea0d":"# Linear Regression","ed3e66cc":"# Comparing AC Power to DC Power","c35d4b3a":"# Solar Power Generation Process","9d354210":"![](https:\/\/media-exp1.licdn.com\/dms\/image\/C4E0BAQEn9tlugwfrlw\/company-logo_200_200\/0?e=2159024400&v=beta&t=YCkupHQWeyb3htjDkIKN-2Vusw0irsQeoXZw_DJjR90)","aa00879d":"Converting Date_time column from String\/Object to Date Time Format","92d23bf1":"# Higher Irradiation gives rise to higher Module Temperature?","a564d541":"Spllitting into test and Train","fd8a1f4c":"# This shows that the invertors are efficient in converting the DC current to AC current","5ef46dbe":"Module Temperature does vary with Irradiation","c76db9c9":"**Scatter Plot for Module Temperature vs Ambient Temperature for 34 Days and its variation**","97765791":"Reading the files","b117cf1f":"**Heatmap for AC vs DC**"}}