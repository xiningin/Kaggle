{"cell_type":{"3f41f3b9":"code","d82cdbf0":"code","b5714ac6":"code","962e006d":"code","01848000":"code","1da7d549":"code","1f7bbfad":"code","e07235d8":"code","a19f1371":"code","ff903ba1":"code","71ac0b48":"code","423e1acf":"code","b648b1b1":"code","33e30fc9":"code","631879c1":"code","d5ca0ace":"code","383f026f":"code","a1ae5e48":"code","16af3cd7":"code","25ace7b4":"code","cae81edd":"code","7d2d5078":"code","131241bd":"code","43e38e36":"code","5aa455a6":"code","1e276792":"code","a75b4888":"code","3729481b":"code","a314404d":"code","6f3b7ab6":"code","9ea09e39":"code","6bdc5b20":"code","3ee1cbbc":"code","2ea972a1":"code","0281fda2":"code","bbf27592":"code","a4679d6c":"code","e9707bea":"code","94eb4d5f":"code","b92cb4f0":"code","5c8ff34c":"code","71689252":"code","eccb59a2":"code","6ee5cd8d":"code","e9940f9f":"code","22c8ff92":"code","a82004a8":"code","2d61b410":"code","7a3a4dd1":"code","7095e52f":"code","74b782db":"code","28517959":"code","bc17405d":"code","17ceb660":"code","4bf02d2f":"code","c9062fbb":"code","3f941c3b":"code","295572f5":"code","8b34dc35":"code","76b4ff78":"code","8c873b6e":"code","36e4878e":"code","fc03f2bb":"markdown","1b52c8f5":"markdown","65b5a5a9":"markdown","b8c1f470":"markdown","3ff89195":"markdown","b98e5691":"markdown","233a99c8":"markdown","7aa333ca":"markdown","50150870":"markdown","eb7904af":"markdown","cc2aacd0":"markdown","61776258":"markdown","f2a3501a":"markdown","411035c8":"markdown","21ea3a7d":"markdown","e8796c04":"markdown","0a69f139":"markdown","3adbfb1e":"markdown","129e489b":"markdown","4e81c233":"markdown","a24e4200":"markdown","9fb4950f":"markdown","70f8896e":"markdown","14dbc969":"markdown","ac3dfb58":"markdown","9f4023be":"markdown","03151217":"markdown","f6352019":"markdown","29fdef70":"markdown","5fe0d52f":"markdown","97cf6418":"markdown","196a13b3":"markdown","7a9ed142":"markdown","2fdeceed":"markdown","91ac25b5":"markdown","b59dde74":"markdown","342f7e9e":"markdown","26f420d0":"markdown","960994f5":"markdown","3e123c26":"markdown","d4f12804":"markdown","c3239f8d":"markdown","0ee95253":"markdown","57c880fa":"markdown","81c6a25a":"markdown","c9b4c25b":"markdown","69755b92":"markdown","4b12706d":"markdown","9cd48b88":"markdown","bf7e9109":"markdown","437b217e":"markdown","2826e3d9":"markdown","665cb1e0":"markdown","9adcff4d":"markdown","31e77e59":"markdown","b2253355":"markdown","8d6778db":"markdown","f6d784a8":"markdown","48c46da1":"markdown","27049962":"markdown","8c8c8928":"markdown","43607824":"markdown","1770ad70":"markdown","b83c2e98":"markdown","22171df6":"markdown","29752142":"markdown","7c651af4":"markdown","7e2e5162":"markdown","2eb21e90":"markdown","a016c1ac":"markdown","6d070c23":"markdown","8b23931e":"markdown"},"source":{"3f41f3b9":"# Data manipulation\nimport pandas as pd\nimport numpy as np\n\n# Data visualization\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport folium\n\n# Statistics \nimport scipy\nimport statsmodels as sms\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_percentage_error","d82cdbf0":"vaccinations = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\nvaccinations.head()","b5714ac6":"vaccinations[\"date\"] = pd.to_datetime(vaccinations[\"date\"], format = '%Y-%m-%d')\nvaccinations = vaccinations.replace([np.inf, -np.inf], np.nan)\nvaccinations = vaccinations.fillna(0)","962e006d":"vaccinations.country.unique()","01848000":"vaccinations = vaccinations[vaccinations.country.apply(lambda x : x not in ['Scotland', 'Wales', 'Northern Ireland', 'England', 'Isle of Man', 'Cayman Islands', 'Falkland Islands', 'Guernsey', 'Saint Helena', 'Turks and Caicos Islands', 'Faeroe Islands', 'Gibraltar'])]\nvaccinations.country.unique()","1da7d549":"vaccinations.vaccines.unique()","1f7bbfad":"columns = ['country', 'date', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','people_fully_vaccinated_per_hundred','vaccines','iso_code']\nlatest_data = vaccinations[columns].groupby('country', as_index = True).max().sort_values(by='total_vaccinations', ascending = False)\nlatest_data.head()","e07235d8":"total_vaccines = pd.DataFrame()\nvaccines = vaccinations.groupby('vaccines')\nfor col, group in vaccines:\n    total_vaccines.loc[col,\"total_vaccinations\"] = group[\"daily_vaccinations\"].sum()\ntotal_vaccines = total_vaccines.sort_values(by='total_vaccinations', ascending = False)","a19f1371":"def show_values_on_bars(axs, h_v=\"v\", space=0.7):\n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = '{:.0f}%'.format(int(p.get_height()))\n                ax.text(_x, _y, value, ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height() \/ 2\n                value = '{:.1f}m'.format(int(p.get_width()) \/ 1000000)\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","ff903ba1":"sns.set_style('darkgrid')\nax = sns.barplot(x = total_vaccines.iloc[:7,:]['total_vaccinations'] , y =total_vaccines.iloc[:7,:].index, palette=\"rocket\")\nax.set_xlabel('Millions of vaccinations')\nax.set_ylabel('Vaccine type')\nax.set_title('Most popular vaccines')\nplt.xticks(ticks = [0,10000000,20000000,30000000,40000000,50000000,60000000,70000000,80000000,90000000,100000000],labels= [0,10,20,30,40,50,60,70,80,90,100])\nshow_values_on_bars(ax,h_v = 'h', space = 0.7)","71ac0b48":"latest_data[latest_data['vaccines'] == 'Pfizer\/BioNTech'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","423e1acf":"latest_data[latest_data['vaccines'] == 'Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","b648b1b1":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","33e30fc9":"latest_data[latest_data['vaccines'] == 'Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","631879c1":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","d5ca0ace":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","383f026f":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Sinovac'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","a1ae5e48":"latest_data[latest_data['vaccines'] == 'Sinopharm\/Beijing'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","16af3cd7":"latest_data[latest_data['vaccines'] == 'Moderna, Pfizer\/BioNTech'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","25ace7b4":"latest_data[latest_data['vaccines'] == 'Pfizer\/BioNTech, Sinovac'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","cae81edd":"latest_data[latest_data['vaccines'] == 'Sinopharm\/Beijing, Sinopharm\/Wuhan, Sinovac'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","7d2d5078":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Pfizer\/BioNTech'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","131241bd":"latest_data[latest_data['vaccines'] == 'Sinovac'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","43e38e36":"latest_data[latest_data['vaccines'] == 'Moderna'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","5aa455a6":"latest_data[latest_data['vaccines'] == 'Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","1e276792":"latest_data[latest_data['vaccines'] == 'Covaxin, Oxford\/AstraZeneca'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","a75b4888":"latest_data[latest_data['vaccines'] == 'Pfizer\/BioNTech, Sinopharm\/Beijing'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","3729481b":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Pfizer\/BioNTech, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","a314404d":"latest_data[latest_data['vaccines'] == 'Sinopharm\/Beijing, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","6f3b7ab6":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Sinopharm\/Beijing'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","9ea09e39":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Sinopharm\/Beijing, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","6bdc5b20":"latest_data[latest_data['vaccines'] == 'EpiVacCorona, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","3ee1cbbc":"latest_data[latest_data['vaccines'] == 'Johnson&Johnson'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","2ea972a1":"latest_data[latest_data['vaccines'] == 'Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sinopharm\/Wuhan, Sputnik V'][['vaccines','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated','date']].sort_values(by='total_vaccinations', ascending = False).head(15).style.background_gradient(cmap='Blues')","0281fda2":"# Sns settings\nc = '#386B7F'\nsns.set_style('darkgrid')","bbf27592":"latest_data[['people_fully_vaccinated_per_hundred','people_fully_vaccinated', 'date' ]].sort_values(by='people_fully_vaccinated_per_hundred', ascending = False).head(30).style.background_gradient(cmap = 'Blues')","a4679d6c":"latest_data[['people_fully_vaccinated_per_hundred', 'people_fully_vaccinated']].sort_values(by='people_fully_vaccinated', ascending = False).head(10).style.background_gradient(cmap = 'Blues')","e9707bea":"sns.set(rc={'figure.figsize':(11.7,8.27)}, style = 'darkgrid')\nax3 = sns.barplot(x = latest_data['people_fully_vaccinated_per_hundred'].sort_values(ascending = False).head(15).index,\n                 y = latest_data['people_fully_vaccinated_per_hundred'].sort_values(ascending = False).head(15))\nax3.set_xlabel('Country')\nax3.set_ylabel('% of fully vaccinated people')\nplt.xticks(rotation = 60)\nshow_values_on_bars(ax3, h_v = 'v')","94eb4d5f":"def show_values_on_bars(axs, h_v=\"v\", space=0.7):\n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = '{:.0f}m'.format(int(p.get_height()) \/ 1000000)\n                ax.text(_x, _y, value, ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height() \/ 2\n                value = '{:.1f}m'.format(int(p.get_width()) \/ 1000000)\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","b92cb4f0":"sns.set(rc={'figure.figsize':(11.7,8.27)}, style = 'darkgrid')\nax2 = sns.barplot(x = latest_data['total_vaccinations'].sort_values(ascending = False).head(15).index,\n                 y = latest_data['total_vaccinations'].sort_values(ascending = False).head(15))\nax2.set_xlabel('Country')\nax2.set_ylabel('Number of total vaccinations in millions')\nplt.yticks(ticks = [0,20000000,40000000,60000000,80000000,100000000], labels = [0,20,40,60,80,100])\nplt.xticks(rotation = 60)\nshow_values_on_bars(ax2, h_v = 'v')","5c8ff34c":"conditions = [(latest_data['people_fully_vaccinated_per_hundred'] <= 2.5), \n              (latest_data['people_fully_vaccinated_per_hundred'] > 2.5) & (latest_data['people_fully_vaccinated_per_hundred'] <= 5),\n              (latest_data['people_fully_vaccinated_per_hundred'] > 5) & (latest_data['people_fully_vaccinated_per_hundred'] <= 7.5),\n              (latest_data['people_fully_vaccinated_per_hundred'] > 7.5) & (latest_data['people_fully_vaccinated_per_hundred'] <= 10),\n             (latest_data['people_fully_vaccinated_per_hundred'] > 10)]\nvalues = ['very low','low', 'moderated', 'medium', 'high']\nnew_data = latest_data\nnew_data['vaccination_level'] = np.select(conditions, values)\nnew_data.head()","71689252":"fig = px.choropleth(new_data, locations = 'iso_code', color = 'vaccination_level', featureidkey = 'properties.name', hover_name = new_data.index, hover_data = ['people_fully_vaccinated_per_hundred', 'total_vaccinations'], title = 'Global vaccination progress')\nfig.update_layout(title_x = 0.5)\nfig.show()","eccb59a2":"fig, ax = plt.subplots(figsize=(8, 6))\nnew_data.groupby('vaccination_level').size().plot(kind='pie', autopct='%1.0f%%', ax = ax)\nax.set_ylabel('Worldwide vaccination level', fontsize = 16)\nplt.legend()\nplt.show()","6ee5cd8d":"daily_data = vaccinations[['daily_vaccinations','date']].groupby('date',as_index = False).sum()\ndaily_data['vac_test'] = daily_data['daily_vaccinations']\ndaily_data.head()","e9940f9f":"daily_data['year'] = daily_data['date'].dt.year\ndaily_data['month'] = daily_data['date'].dt.month\ndaily_data['day'] = daily_data['date'].dt.day\ndaily_data.tail()","22c8ff92":"ax = sns.lineplot(x = daily_data['date'], y = daily_data['daily_vaccinations'], color='salmon', marker='o')\nax.set_xlabel('Date')\nplt.yticks(ticks = [0, 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000], labels = [0, 1, 2, 3, 4, 5, 6, 7])\nax.set_ylabel('Daily vaccinations, millions')\nplt.show()","a82004a8":"jan = daily_data[daily_data['month'] == 1]\nfeb = daily_data[daily_data['month'] == 2]\nmar = daily_data[daily_data['month'] == 3]","2d61b410":"# define figure and subplots\nfig, (ax1, ax2, ax3) = plt.subplots(3, figsize = (10,13))\n# creating subplot 1\nsns.lineplot(x = jan['day'], y = jan['daily_vaccinations'], color='blue', marker='o', ax=ax1)\nax1.set(xlabel = 'January', ylabel = 'Daily vaccinations\\n(million)')\nax1.set_title('Seasonal decomposition by month\\n', fontsize = 20)\n# creating subplot 2\nsns.lineplot(x = feb['day'], y = feb['daily_vaccinations'], color='salmon', marker='o', ax=ax2)\nax2.set(xlabel = 'February', ylabel = 'Daily vaccinations\\n(million)')\n# creating subplot 3\nsns.lineplot(x = mar['day'], y = mar['daily_vaccinations'], color='green', marker='o', ax=ax3)\nax3.set(xlabel = 'March', ylabel = 'Daily vaccinations\\n(million)')\n\nplt.show()","7a3a4dd1":"plt.figure(figsize = (8,3))\nplt.subplot(121); plot_acf(daily_data['daily_vaccinations'], lags = 40, ax = plt.gca(), color = c)\nplt.subplot(122); plot_pacf(daily_data['daily_vaccinations'], lags = 40,ax = plt.gca(), color = c)\nplt.show()","7095e52f":"adfuller(daily_data['daily_vaccinations'])","74b782db":"daily_data['diff1'] = daily_data['daily_vaccinations'].diff()\ndaily_data['diff1'] = daily_data['diff1'].fillna(daily_data['diff1'].mean())\nax = sns.lineplot(x = daily_data['date'], y = daily_data['diff1'], color='blue')\nsns.lineplot(x = daily_data['date'], y = daily_data['diff1'].mean(), color='salmon')\nplt.xlabel('Date')\nplt.ylabel('Nonseasonal diff. series of 1nd order')\nplt.show()\nadfuller(daily_data.diff1)","28517959":"plt.figure(figsize = (8,3))\nplt.subplot(121); plot_acf(daily_data['diff1'], lags = 40, ax = plt.gca(), color = c)\nplt.subplot(122); plot_pacf(daily_data['diff1'], lags = 40,ax = plt.gca(), color = c)\nplt.show()","bc17405d":"daily_data['diff2'] = daily_data['diff1'].diff()\ndaily_data['diff2'] = daily_data['diff2'].fillna(daily_data['diff2'].mean())\nax = sns.lineplot(x = daily_data['date'], y = daily_data['diff2'], color='blue')\nsns.lineplot(x = daily_data['date'], y = daily_data['diff2'].mean(), color='salmon')\nplt.xlabel('Date')\nplt.ylabel('Nonseasonal diff. series of 2nd order')\nplt.show()\nadfuller(daily_data.diff2)","17ceb660":"plt.figure(figsize = (15,8))\nplt.subplot(121); plot_acf(daily_data['diff2'], lags = 10, ax = plt.gca(), color = c)\nplt.subplot(122); plot_pacf(daily_data['diff2'], lags = 10,ax = plt.gca(), color = c)\nplt.show()","4bf02d2f":"train = daily_data['daily_vaccinations'][:89]\ntest = daily_data['daily_vaccinations'][89:]\nmodel = ARIMA(daily_data['daily_vaccinations'][:89], order = (1,2,1))\nmodel = model.fit()\nstart = len(train)\nend = len(train)+len(test)-1\npred = model.predict(start=start, end=end, typ = 'levels')\nprint(pred)\nplt.figure(figsize=(12,5), dpi=100)\nax = sns.lineplot(x=daily_data['date'], y = pred, label='forecast')\nsns.lineplot(x=daily_data['date'], y = daily_data['daily_vaccinations'], label='actual', ax=ax)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","c9062fbb":"mean_squared_error(pred,test, squared = False)","3f941c3b":"test.mean()","295572f5":"mean_absolute_percentage_error(test,pred)","8b34dc35":"index_fut_dat = pd.date_range(start='2021-03-17', end='2021-03-23')\nmodel_full = ARIMA(daily_data['daily_vaccinations'], order = (1,2,1))\nmodel_full = model_full.fit()\npred2 = model_full.predict(start=len(daily_data), end=len(daily_data)+6, typ = 'levels')\npred2.index = index_fut_dat\nplt.figure(figsize=(12,5), dpi=100)\nax = sns.lineplot(x=pred2.index, y = pred2, label='forecast')\nsns.lineplot(x=daily_data['date'], y = daily_data['daily_vaccinations'], label='actual', ax=ax)\nplt.title('Forecast vs Actuals')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()","76b4ff78":"print(pred2)","8c873b6e":"vaccinations['month'] = vaccinations['date'].dt.month\njan_month = vaccinations[vaccinations['month'] == 1]['daily_vaccinations']\nfeb_month = vaccinations[vaccinations['month'] == 2]['daily_vaccinations']\nscipy.stats.ttest_ind(jan_month, feb_month)","36e4878e":"alpha = 0.05\nn1, n2 = len(feb_month), len(jan_month)\ns1, s2 = np.var(feb_month, ddof = 1), np.var(jan_month, ddof = 1)\ns = np.sqrt(((n1 - 1) * s1 + (n2 - 1) * s2) \/ (n1 + n2 - 2))\ndf = n1 + n2 - 2\nt = scipy.stats.t.ppf(1- alpha \/ 2, df)\n\nlower = (np.mean(feb_month) - np.mean(jan_month)) - t * np.sqrt(1 \/ n1 + 1 \/ n2) * s\nupper = (np.mean(feb_month) - np.mean(jan_month)) + t * np.sqrt(1 \/ n1 + 1 \/ n2) * s\nlower, upper","fc03f2bb":"### Oxford\/AstraZeneca, Pfizer\/BioNTech, Sputnik V","1b52c8f5":"Analysing the *p-value* of two-sample t-test, we can claim it's much lower ($0.0172 < 0.05$) \nthan the previously set confidence level ($\\alpha = 0,05$), thus, we have enough evidence to reject the null-hypothesis, and claim that the analysed means are not equal.","65b5a5a9":"## Stationarity analysis","b8c1f470":"Where:\n$ \\mu_0 $ - January daily vaccinations average\n$ \\mu_1 $ - February daily vaccinations average ","3ff89195":"To make a confidence interval of 95% of difference in means (*Feb - Jan*). If we see the CI to take negative values, it means the average daily vaccination number in *January* was higher, than in *February*. Following the previous assumption, we expect the CI to take **positive** value => the bigger average daily vaccination number in *February, 2021*.","b98e5691":"## Confidence Interval","233a99c8":"### Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sputnik V","7aa333ca":"## Hypothesis Testing\nTo check if the daily vaccinations mean in February is greater than in January, we will apply the Hypothesis testing technique. Confidence level was set to $\\alpha = 0.05$ for further hypothesis and confidence intervals.\nThis are both null and alternative hypothesis:","50150870":"### Sinopharm\/Beijing, Sinopharm\/Wuhan, Sinovac ","eb7904af":"As we can see, there are still not so many countries with high vaccination rates. This means it will take some time to vaccinate more people. We will try to know how much time will approximatelly take.","cc2aacd0":"As object of research I've choosen the daily worldwide vaccinations. To operate with this feature, first, we'll need to create it.","61776258":"## Which combination of vaccines is used the most? \n\nThe initial dataset *vaccines* feature only contains a combination of many types of vaccines, so that, it's impossible to determine the number of vaccinations by each vaccine individually.","f2a3501a":"# Data Cleaning\nThere are few steps in this section:\n* As shown by *.head()* method, our data obviously contains missing values, so we'll need to dela with it somehow\n* Some of the country names appeared in the dataset, does not represent a single country (constituent countries)\n* ***date*** feature refers to a unique moment in time, so needs to be converted into a *Pandas date format* ","411035c8":"## Monthly trend","21ea3a7d":"### Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sinopharm\/Wuhan, Sputnik V\t","e8796c04":"### Sinovac\n","0a69f139":"### Moderna, Pfizer\/BioNTech","3adbfb1e":"### Sputnik V","129e489b":"### Johnson&Johnson","4e81c233":"### EpiVacCorona, Sputnik V","a24e4200":"### Loading data\n\nRead the initial dataset with the *Pandas* package, and display the first five rows of it.","9fb4950f":"### Oxford\/AstraZeneca, Sputnik V","70f8896e":"# Information","14dbc969":"### Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech","ac3dfb58":"When analyzing the ACF, we can see the values to slowly decrease to zero. This could be the first signal of a series to be non-stationary on mean. Following the general lineplot data, the series reflect an increasing trend. Let's check it with the ADF test.","9f4023be":"As expected, the 95% CI of mean difference (*Feb - Jan*) resulted positive and without containting a zero value in it. That means the average daily vaccination number in February has growm, when comparing to January. The difference between the means is enormous, in 95% of the cases it varies between 2407 and 24766 daily vaccinations.\nWith a decent amount of confidence we can claim that the vaccination has become more effective in terms of ddaily vaccinations number all around the world. ","03151217":"### Oxford\/AstraZeneca, Pfizer\/BioNTech","f6352019":"The test mean is around $8 000 000$, while RMSE is much lower - $720 000$, this is not a really low value,but neither a signal of a big difference between the predicted and actual values.","29fdef70":"This is definitelly the result we were waiting for. No evident trend detected on the plot, the mean, represented as a red line, is constant. Applying ADF test on *diff2* we get as a response a very small p-value, which indicates us that the series is **stationary**.","5fe0d52f":"# Inference","97cf6418":"### Sinopharm\/Beijing, Sputnik V","196a13b3":"## Packages used","7a9ed142":"## In which country the vaccination programme is more advanced?\n\nThis can be shown from different perspectives. One of it is by viewing people fully vaccinated per hundred. ","2fdeceed":"Training the ARIMA model of order $(1,2,1)$ on 89 observations of the daily_data DataFrame we get the predicted values marked as blue on the graph. Comparing these to the actual values, we see them be slightly different from each other. Later we will measure the goodness of fit of this model using the MAPE criterion and a simple comparison of the RMSE value to the test average.","91ac25b5":"## The initial dataset contains the following features:\n* Country- this is the country for which the vaccination information is provided;\n* Country ISO Code - ISO code for the country;\n* Date - date for the data entry; for some of the dates we have only the daily vaccinations, for others, only the (cumulative) total;\n* Total number of vaccinations - this is the absolute number of total immunizations in the country;\n* Total number of people vaccinated - a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines; at a certain moment, the number of vaccination might be larger than the number of people;\n* Total number of people fully vaccinated - this is the number of people that received the entire set of immunization according to the immunization scheme (typically 2); at a certain moment in time, there might be a certain number of people that received one vaccine and another number (smaller) of people that received all vaccines in the scheme;\n* Daily vaccinations (raw) - for a certain data entry, the number of vaccination for that date\/country;\n* Daily vaccinations - for a certain data entry, the number of vaccination for that date\/country;\n* Total vaccinations per hundred - ratio (in percent) between vaccination number and total population up to the date in the country;\n* Total number of people vaccinated per hundred - ratio (in percent) between population immunized and total population up to the date in the country;\n* Total number of people fully vaccinated per hundred - ratio (in percent) between population fully immunized and total population up to the date in the country;\n* Number of vaccinations per day - number of daily vaccination for that day and country;\n* Daily vaccinations per million - ratio (in ppm) between vaccination number and total population for the current date in the country;\n* Vaccines used in the country - total number of vaccines used in the country (up to date);\n* Source name - source of the information (national authority, international organization, local organization etc.);\n* Source website - website of the source of information;","b59dde74":"### Top-15 countries barplot by total vaccinations","342f7e9e":"### Oxford\/AstraZeneca","26f420d0":"Define *latest_data* as a DataFrame, which contains the same features, that the initial dataset, but using the latest vaccination data in each country.","960994f5":"$H_0 = \\mu_1 - \\mu_0 = 0$\n\n$H_1 = \\mu_1 - \\mu_0 \\neq 0$","3e123c26":"The p-value returned from ADF Test is much lower than 0.05, however, we can still suspect some increasing trend and variance fluctuations, so we proceed to nonseasonal differencing of 2nd order. ","d4f12804":"$p-value = 0.3964 > 0.05$,=> we proceed to do different transformations of our series to make it stationary, which allowsus to buil an ARIMA model.","c3239f8d":"### Pfizer\/BioNTech, Sinopharm\/Beijing","0ee95253":"# Vaccination time series analysis","57c880fa":"The **top-3** vaccine groups by total_vaccinations are:\n* Johnson&Johnson, Moderna, Pfizer\/BioNTech - 106.3 M vaccines\n* Sinopharm\/Beijing, Sinopharm\/Wuhan, Sinovac - 61.4 M vaccines\n* Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech - 48.8 M vaccines","81c6a25a":"### Moderna","c9b4c25b":"## Normalizing country names\n\nThere is still a reason not to start the analysis: unused country names. The United Kingdom of Great Britain and Northern Ireland (UK), since 1922, comprises four constituent countries: England, Scotland, and Wales (which collectively make up Great Britain), as well as Northern Ireland. To fix this, we won\u00b4t include England, Scotland, Wales, and Nothern Ireland in our analysis, their data is already stored in the United Kingdom observation.\n\nI also consider to eliminate Gibraltar, Isle of Man, Cayman Islands, Falkland Islands, Guernsey, Saint Helena, Turks and Caicos Islands (UK pertinence), Faeroe Islands (Denmark pertinence). ","69755b92":"## Global trend","4b12706d":"## Dickey-Fuler test\n\nIt's used to check if the total vaccinations feature represents a stationary of a time series.\n\n$H_0 = \\phi = 0$\n\n$H_1 = \\phi \\neq 0$\n\n$\\phi = 0$ means our time series is a random walk process, while if $\\phi \\neq 0$ ($ -1 < 1 + \\phi < 1$) we get a stationary process. This way we need the p-value to be less than 0,05 to proceed with ACF and PACF. ","9cd48b88":"## Assumptions based on previous analysis\n\n* We expect the mean value of daily vaccinations in February to be higher than the mean corresponding to January month, due to the vaccination progress.","bf7e9109":"MAPE values is 0.07695. Notice that MAPE output is a non-negative float (where the best value is 0.00). MAPE represents statistical measure of how accurate a forecast system is. It measures this accuracy as a percentage. In our case the precentage of error is about 7.7%.","437b217e":"We are dealing now with time series data, so it's probably usefull to add new date features to the existing dataset.","2826e3d9":"Israel has the highest COVID-19 vaccination rate among the countries in the dataset, having administered 50 fully vaccinated per 100 people in the country. Comparing this statement with the total number of fully vaccinated people, it's clear that Israel is relatively small, achieving 50% vaccination of all its' population by vaccinating 4.4 million people. Notice that USA is the most populated country (328,2 millions of habitants in 2019) and it's still ranked in top-15 countries with the highest full vaccination rate.","665cb1e0":"Let's now train our model on full data to make predictions in some future instances of time.","9adcff4d":"## Vaccination progress track. What type of vaccines is used around the globe?\n\nFirst of all, we will track the vaccination process by each vaccine, grouped by countries this combination of vaccines is used in, and sorted by *total_vaccinations*. For this, we'll need to know all the unique values the feature *vaccines* may take.","31e77e59":"## Vaccines distribution worldmap\n\nTo draw a choropleth map of the vaccination percentage in each country, we will define 5 labels of vaccination progress:\n* very low (0-2.5%)\n* low (2.5-5%)\n* moderated (5-7.5%)\n* medium(7.5-10%)\n* high (10%+)\n","b2253355":"## COVID-19 Vaccination level pie-chart","8d6778db":"### Top-15 countries barplot by fully vaccinated people per hundred","f6d784a8":"# Conclusions\n\nHypothesis testing gave us a sign about the incrementation of the total vaccinations all around the world in February, comparing to the January data. However, the predictions made by ARIMA (1,2,1) model indicate a decrease in the number of vaccinations. We don\u00b4t expect this value, to fall to 2.000.000 daily observations as predicted by the ARIMA forecast, but even the actual values show a decrease in the last few days. This could have happened due to manufacturing or any others reasons. The actual information is insuffecient to explain such changes in the daily vaccination process. ","48c46da1":"### Pfizer\/BioNTech","27049962":"### Sinopharm\/Beijing","8c8c8928":"# COVID-19 World Vaccination Progress\n\n*Daniil Valyano*\n*03\/10\/2021*\n![image.png](attachment:image.png)","43607824":"After the nonseasonal differencing of order 1, the ACF still seems to decrease slowly to zero, hovewer, the differencing helped to fix it to a certain extent. Let's try to make the 2nd order differencing to see if that would give better results.","1770ad70":"### Oxford\/AstraZeneca, Sinopharm\/Beijing, Sputnik V","b83c2e98":"### Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech, Sinopharm\/Beijing, Sputnik V\t","22171df6":"### Oxford\/AstraZeneca, Sinopharm\/Beijing","29752142":"# Acknowledgement\nThis notebook is a submission for a task of a [COVID-19 World Vaccination Progress]('https:\/\/www.kaggle.com\/gpreda\/covid-world-vaccination-progress') dataset, offered by Gabriel Preda [@gpreda]('https:\/\/www.kaggle.com\/gpreda')\n\nIf you like my job or the methods I used to do it, please **upvote and leave your suggestions in comments!**","7c651af4":"### Countries by most fully vaccinated people per hundred","7e2e5162":"### Pfizer\/BioNTech, Sinovac","2eb21e90":"### Covaxin, Oxford\/AstraZeneca\t","a016c1ac":"### Oxford\/AstraZeneca, Sinovac","6d070c23":"# EDA","8b23931e":"## Vaccine type conclusions\n\nThe initial dataset *vaccines* feature only contains a combination of many types of vaccines, so that, it's impossible to determine the number of vaccinations by each vaccine individually. However, we could see, that all of the countries use a different combination of vaccines. We can see common patterns in vaccine type use only in Asiatic sector (Philippines, Indonesia, Thailand) and European sector (see *Moderna, Oxford\/AstraZeneca, Pfizer\/BioNTech* section). This can be explained by foreign policy, overall financial state of a country (e.g. GPD per capita)."}}