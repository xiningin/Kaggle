{"cell_type":{"ef392e3e":"code","ba7cd378":"code","e5a9ae1f":"code","14199994":"code","a399ce7f":"code","ba2964a7":"code","f0dcf593":"code","b79171a8":"code","b5aa6d60":"code","7c16333d":"code","06016a94":"code","b7a2addb":"code","23a6c676":"code","efe9488e":"code","13a09c32":"code","ff872e4f":"code","f936a52c":"code","99977b94":"code","12f80cc4":"markdown","30392680":"markdown","03fb3256":"markdown","10d8caae":"markdown","3775b877":"markdown","6f075a66":"markdown","342b1a7f":"markdown","6c4e53ec":"markdown","fa38f768":"markdown","ecd3d86a":"markdown","35d7d3d4":"markdown","6864bd50":"markdown","f2ecfb60":"markdown","553d3245":"markdown","fae2130f":"markdown"},"source":{"ef392e3e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ba7cd378":"nf = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\nnf.sample(3)","e5a9ae1f":"# \u0130\u00e7erisinde not a number bulunan s\u00fctun isimlerini yazd\u0131r\u0131n.\ndef nullRate(df, rate):\n    \"\"\"\n    Kolon i\u00e7erisindeki not a number y\u00fczdesi hangi de\u011ferden b\u00fcy\u00fck olmas\u0131n\u0131 istiyorsan\u0131z o say\u0131y\u0131 giriniz.\n    \"\"\"\n    for i in df.columns:\n        null_rate = df[i].isna().sum() \/ len(df) * 100 \n        if null_rate > rate :\n            print(\"{} null rate: {}%\".format(i,round(null_rate,2)))\n                \nnullRate(nf, 10)","14199994":"nullRate(nf, 0.1)","a399ce7f":"new = nf[\"duration\"].str.split(\" \", n = 1, expand = True)\nnf[\"DurationTime\"]= new[0]\nnf[\"DurationTime\"] = pd.to_numeric(nf[\"DurationTime\"], errors='coerce')\nnf[\"DurationType\"]= new[1]","ba2964a7":"nf.info()","f0dcf593":"nf[\"kisa_film\"] = (nf[\"DurationType\"] == \"min\") & (nf[\"DurationTime\"] < 20 )\nnf[nf[\"kisa_film\"] == True].sample(2)","b79171a8":"def replaceNan(df, pColumn, pValue):\n    values = { pColumn: pValue }\n    return  df.fillna(value=values, inplace=True)\n\nreplaceNan(nf, \"country\", \"Country\")","b5aa6d60":"def getByDirector(df, dName):\n        try:\n            print(list(df[df['director'] == dName]['title'].values))\n        except NodirectorError:\n            print(\"No director defined\")  \n            \ngetByDirector(nf, \"Rajiv Chilaka\")","7c16333d":"getByDirector(nf, \"YukiytTanada\")","06016a94":"replaceNan(nf, \"cast\", \"NoCast\")","b7a2addb":"import re","23a6c676":"def getByName(df, castingName):\n    df['casting'] = df['cast'].str.findall(castingName, flags=re.IGNORECASE)\n    return list(df[df['casting'].astype(bool) == True]['title'])\n\ngetByName(nf, 'Vicky Kaushal')","efe9488e":"# Palette\nsns.palplot(['#221f1f', '#b20710', '#e50914','#f5f5f1'])\n\nplt.title(\"Netflix brand palette \",loc='left',fontfamily='serif',fontsize=15,y=1.2)\nplt.show()","13a09c32":"# For viz: Ratio of Movies & TV shows\n\nx=nf.groupby(['type'])['type'].count()\ny=len(nf)\nr=((x\/y)).round(2)\n\nmf_ratio = pd.DataFrame(r).T","ff872e4f":"fig, ax = plt.subplots(1,1,figsize=(6.5, 2.5))\n\nax.barh(mf_ratio.index, mf_ratio['Movie'], \n        color='#b20710', alpha=0.9, label='Male')\nax.barh(mf_ratio.index, mf_ratio['TV Show'], left=mf_ratio['Movie'], \n        color='#221f1f', alpha=0.9, label='Female')\n\nax.set_xlim(0, 1)\nax.set_xticks([])\nax.set_yticks([])\n#ax.set_yticklabels(mf_ratio.index, fontfamily='serif', fontsize=11)\n\n\n# movie percentage\nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['Movie'][i]*100)}%\", \n                   xy=(mf_ratio['Movie'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n\n    ax.annotate(\"Movie\", \n                   xy=(mf_ratio['Movie'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n    \n    \nfor i in mf_ratio.index:\n    ax.annotate(f\"{int(mf_ratio['TV Show'][i]*100)}%\", \n                   xy=(mf_ratio['Movie'][i]+mf_ratio['TV Show'][i]\/2, i),\n                   va = 'center', ha='center',fontsize=40, fontweight='light', fontfamily='serif',\n                   color='white')\n    ax.annotate(\"TV Show\", \n                   xy=(mf_ratio['Movie'][i]+mf_ratio['TV Show'][i]\/2, -0.25),\n                   va = 'center', ha='center',fontsize=15, fontweight='light', fontfamily='serif',\n                   color='white')\n\n\n\n\n\n\n# Title & Subtitle\nfig.text(0.125,1.03,'Movie & TV Show distribution', fontfamily='serif',fontsize=15, fontweight='bold')\nfig.text(0.125,0.92,'We see vastly more movies than TV shows on Netflix.',fontfamily='serif',fontsize=12)  \n\nfor s in ['top', 'left', 'right', 'bottom']:\n    ax.spines[s].set_visible(False)\n    \n\n\n#ax.legend(loc='lower center', ncol=3, bbox_to_anchor=(0.5, -0.06))\n\n# Removing legend due to labelled plot\nax.legend().set_visible(False)\nplt.show()","f936a52c":"fig_dims = (16, 13)\nfig, ax = plt.subplots(figsize=fig_dims)\naxx=sns.countplot(x=\"release_year\",data=nf,hue=\"type\",ax=ax,palette=['#221f1f', '#e50914','#f5f5f1'])\naxx.set_xticklabels(ax.get_xticklabels(),rotation=90,size=10);","99977b94":"with sns.axes_style(\"white\"):\n    ns=nf[nf[\"type\"]== \"TV Show\"]\n    g = sns.catplot(x=\"release_year\", data=ns, kind=\"count\", hue=\"duration\",order=(2015,2016,2017,2018,2019),height=9,aspect=2, palette =['#221f1f', '#b20710', '#e50914','#f5f5f1'])\n    g.set_xticklabels(step=1)","12f80cc4":"A function that prints column names that contain not a number","30392680":"<h3><b>Content<\/b><\/h3>\n<ul>\n    <a href='#1'><li>Import Library<\/li><\/a>\n    <a href='#2'><li>Read File<\/li><\/a>\n    <a href='#3'><li>Null Rates<\/li><\/a>\n            <a href='#4'><li>Short Films<\/li><\/a>\n            <a href='#5'><li>Nan to string<\/li><\/a>\n            <a href='#6'><li>Director's Movies<\/li><\/a>\n            <a href='#7'><li>Cast's Movie<\/li><\/a>\n            <a href='#8'><li>Plots<\/li><\/a>","03fb3256":"<p id='4'><h3><b>Short Films<\/b><\/h3><\/p>","10d8caae":"<p id='8'><h3><b>Plots<\/b><\/h3><\/p>","3775b877":"A function that replaces not a number values with the desired value for a given column\nEx: NaN countries to Country.","6f075a66":"A function that lists which TV series\/movies an actor named plays in.","342b1a7f":"<p id='6'><h3><b>Director's Movies<\/b><\/h3><\/p>","6c4e53ec":"<p id='2'><h3><b>Read File<\/b><\/h3><\/p>","fa38f768":"A function that can select movies shorter than 20 minutes from the data, and specify whether the movies are short movies in a new column.","ecd3d86a":"A function whose input is the name of the director, and output is the movies and TV series belonging to that director.\nGives warnings for director names that are not on the list.","35d7d3d4":"<p id='1'><h3><b>Import L\u0131brary<\/b><\/h3><\/p>","6864bd50":"<p id='7'><h3><b>Cast's Movies<\/b><\/h3><\/p>","f2ecfb60":"<h1><b>Netflix_OOP<\/b><\/h1>","553d3245":"<p id='3'><h3><b>Null Rates<\/b><\/h3><\/p>","fae2130f":"<p id='5'><h3><b>Nan to string<\/b><\/h3><\/p>"}}