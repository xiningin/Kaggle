{"cell_type":{"718e3a87":"code","fc8d6889":"code","3ed7283c":"code","4bdb3efd":"code","e096cfbf":"code","d2314222":"code","92d386b0":"code","9017bc57":"code","1fc8c9ad":"code","750870d4":"code","e6be6f8c":"code","427a614f":"code","cb04901f":"code","593300fd":"code","219c3334":"code","6908c732":"code","08f6118f":"code","d7cf53d0":"code","9c7f63c1":"code","1b95a002":"code","ddb51fc2":"code","80e8ee4f":"code","a0456aea":"code","3842acd2":"code","b81127bb":"code","575be78a":"code","3ac5927f":"code","d3f86667":"code","82574a73":"code","81ff1d6d":"code","aab860c5":"code","2dfa20f8":"code","e1bbba73":"code","3b073d59":"code","f271072d":"code","09835305":"code","50c5fd6f":"code","cc81afc8":"code","e907a96e":"code","50ee96dc":"code","9ff6f41e":"code","a2c00366":"code","3ea47a63":"code","589b72f4":"code","d6dbb640":"code","4b2e659c":"code","829b0ba3":"code","06006691":"code","a2122eb5":"code","70439e10":"code","ce3189a4":"code","b32f2dc1":"code","56e972d8":"markdown","34dd4072":"markdown","a3ad8e2f":"markdown","996996d9":"markdown","20976f4a":"markdown","62952f85":"markdown","c455ee85":"markdown","8013d0d1":"markdown","24837428":"markdown","4d3fa99f":"markdown","3a2e8e3c":"markdown","890e0f2b":"markdown","27792d20":"markdown","884c4f2c":"markdown","d621f000":"markdown","244a6bbc":"markdown","322917e0":"markdown","d920adcf":"markdown","c4e543f2":"markdown","b97ed332":"markdown","aaa1890f":"markdown","69e549f4":"markdown","c04fb06a":"markdown","dc72c1aa":"markdown","9790ae3f":"markdown","5ee9219e":"markdown","5fa5ecd4":"markdown","ca0e3d47":"markdown","3e3c21c9":"markdown","a8effa6a":"markdown","2ca7cecc":"markdown","7ad345a0":"markdown","d0eb1892":"markdown","06879d7b":"markdown","eb09dc57":"markdown","634bf8dd":"markdown","5362707a":"markdown","61bf6783":"markdown","cdb008a5":"markdown","3ab78f15":"markdown","dd8e1783":"markdown"},"source":{"718e3a87":"pip install pycountry_convert","fc8d6889":"pip install us","3ed7283c":"pip install statsmodels","4bdb3efd":"import pandas as pd\nimport numpy as np\nimport plotly\nimport pycountry\nimport pycountry_convert as pc\nimport plotly_express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\npd.set_option('display.max_rows',2000,'display.max_columns',2000)\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport geopy as geo\nimport seaborn as sns\nimport us\nimport datetime","e096cfbf":"JHU_Global_CC_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\nJHU_US_CC_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_US.csv')\nJHU_Global_Death_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nJHU_US_Death_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_US.csv')\nJHU_Global_Recov_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\ncovid_test_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/owid\/covid-19-data\/master\/public\/data\/owid-covid-data.csv')","d2314222":"def getABBR(statename):\n    \n    if statename in ( 'American Samoa','Diamond Princess','Grand Princess', 'Guam','Northern Mariana Islands','Virgin Islands'):\n        return '0'    \n    try:\n        state = us.states.lookup(statename)    \n    except:\n        return '0'\n    \n    if state == None:\n        return '0'\n    \n    return state.abbr\n\ndef Restructure_df(df,new_columns):\n    \n    for x in range(df.shape[0]):\n    \n        temp = df.drop(labels = ['Province\/State','Country\/Region','Lat','Long'],axis = 1).iloc[x].reset_index()\n\n        temp.columns = ['Date',new_columns]\n        temp['Country\/Region'] = (df.iloc[x]['Country\/Region'])\n        temp['Province\/State'] = (df.iloc[x]['Province\/State'])\n        temp['Lat'] = (df.iloc[x]['Lat'])\n        temp['Long'] = (df.iloc[x]['Long'])\n        temp['Date'] = temp['Date'].astype(np.datetime64)\n        if x == 0:\n            covid_df = pd.DataFrame(data = temp)\n        else:\n            covid_df = covid_df.append(temp)\n            \n    covid_df = covid_df.groupby(by= ['Country\/Region','Date'])[new_columns].sum().reset_index()\n            \n    count = 0\n    for country in covid_df['Country\/Region'].unique():\n        count += 1\n        Covid_country = covid_df[covid_df['Country\/Region']==country].reset_index(drop = True)  \n        Daily_stats = Covid_country[new_columns].diff()\n        Daily_stats.loc[0] = Covid_country.iloc[0][new_columns]\n        daily = 'Daily '+ new_columns\n        Covid_country[daily] = Daily_stats\n        if count == 1:\n            covid_df_country = pd.DataFrame(data = Covid_country)\n        else:\n            covid_df_country = covid_df_country.append(Covid_country)    \n\n\n    return covid_df_country.reset_index(drop = True)\n    \n    \ndef Restructure_USA_df(df,new_columns):\n    \n    for x in range(df.shape[0]):\n    \n        temp = df.drop(labels = ['UID','iso2','iso3','code3','FIPS','Admin2','Combined_Key','Province_State','Country_Region','Lat','Long_'],axis = 1).iloc[x].reset_index()\n\n        temp.columns = ['Date',new_columns]\n        #temp['Country_Region'] = (df.iloc[x]['Country_Region'])\n        temp['Province_State'] = (df.iloc[x]['Province_State'])\n        temp['Lat'] = (df.iloc[x]['Lat'])\n        temp['Long_'] = (df.iloc[x]['Long_'])\n        temp['iso2'] = (df.iloc[x]['iso2'])\n        temp['iso3'] = (df.iloc[x]['iso3'])\n        temp['Date'] = temp['Date'].astype(np.datetime64)\n        if x == 0:\n            covid_df = pd.DataFrame(data = temp)\n        else:\n            covid_df = covid_df.append(temp)\n            \n    covid_USA_df = covid_df.groupby(by= ['Province_State','Date'])[new_columns].sum().reset_index()\n\n    return covid_USA_df.reset_index(drop = True)","92d386b0":"class country_utils():\n    def __init__(self):\n        self.d = {}\n    \n    def get_dic(self):\n        return self.d\n    \n    def get_country_details(self,country):\n        \"\"\"Returns country code(alpha_3) and continent\"\"\"\n        try:\n            country_obj = pycountry.countries.get(name=country)\n            if country_obj is None:\n                c = pycountry.countries.search_fuzzy(country)\n                country_obj = c[0]\n            continent_code = pc.country_alpha2_to_continent_code(country_obj.alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj.alpha_3, continent\n        except:\n            if 'Congo' in country:\n                country = 'Congo'\n            elif country == 'Diamond Princess' or country == 'Laos' or country == 'MS Zaandam'\\\n            or country == 'Holy See' or country == 'Timor-Leste':\n                return country, country\n            elif country == 'Korea, South' or country == 'South Korea':\n                country = 'Korea, Republic of'\n            elif country == 'Taiwan*':\n                country = 'Taiwan'\n            elif country == 'Burma':\n                country = 'Myanmar'\n            elif country == 'West Bank and Gaza':\n                country = 'Gaza'\n            else:\n                return country, country\n            country_obj = pycountry.countries.search_fuzzy(country)\n            continent_code = pc.country_alpha2_to_continent_code(country_obj[0].alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj[0].alpha_3, continent\n    \n    def get_iso3(self, country):\n        return self.d[country]['code']\n    \n    def get_continent(self,country):\n        return self.d[country]['continent']\n    \n    def add_values(self,country):\n        self.d[country] = {}\n        self.d[country]['code'],self.d[country]['continent'] = self.get_country_details(country)\n    \n    def fetch_iso3(self,country):\n        if country in self.d.keys():\n            return self.get_iso3(country)\n        else:\n            self.add_values(country)\n            return self.get_iso3(country)\n        \n    def fetch_continent(self,country):\n        if country in self.d.keys():\n            return self.get_continent(country)\n        else:\n            self.add_values(country)\n            return self.get_continent(country)","9017bc57":"Covid_ww_df_cc = Restructure_df(JHU_Global_CC_df,'Confirmed Cases')\nCovid_ww_df_deaths = Restructure_df(JHU_Global_Death_df,'Deaths')\nCovid_ww_df_recovered = Restructure_df(JHU_Global_Recov_df,'Recovered')\n\n#merge the data\ntemp = pd.merge(Covid_ww_df_cc, Covid_ww_df_deaths, how='inner', on=['Country\/Region','Date'])\nCovid_country_df = pd.merge(temp,Covid_ww_df_recovered,how = 'inner',on = ['Country\/Region','Date'])\nCovid_country_df['iso_code'] = Covid_country_df['Country\/Region'].apply(lambda x:country_utils().fetch_iso3(x))","1fc8c9ad":"Covid_country_sum_df = Covid_country_df[Covid_country_df['Date']==max(Covid_country_df['Date'])].sort_values(by = 'Confirmed Cases',ascending = False).reset_index()\nCovid_country_sum_df['iso_alpha'] = Covid_country_sum_df['Country\/Region'].apply(lambda x:country_utils().fetch_iso3(x))\n\ndf = Covid_country_sum_df\nfig = px.scatter_geo(df, locations=\"iso_code\", color=\"Confirmed Cases\",\n                     size=\"Confirmed Cases\", title = 'Worldwide Distribution Of Confirmed Cases',\n                     opacity=0.7, size_max=40,projection=\"natural earth\")\nfig.update_layout(title_x=0.45)\nfig.show()\n\nfig = px.scatter_geo(df, locations=\"iso_code\", color=\"Deaths\",\n                     size=\"Deaths\", title = 'Worldwide Distribution Of Fatalities',\n                     opacity=0.7, size_max=40,projection=\"natural earth\")\nfig.update_layout(title_x=0.45)\nfig.show()","750870d4":"Covid_ww_df_cc_world = Covid_ww_df_cc.groupby(by = 'Date')['Confirmed Cases','Daily Confirmed Cases'].sum().reset_index()\nCovid_ww_df_deaths_world = Covid_ww_df_deaths.groupby(by = 'Date')['Deaths','Daily Deaths'].sum().reset_index()\nCovid_ww_df_recovered_world = Covid_ww_df_recovered.groupby(by = 'Date')['Recovered','Daily Recovered'].sum().reset_index()\ntemp = pd.merge(Covid_ww_df_cc_world, Covid_ww_df_deaths_world, how='inner', on='Date')\nCovid_world_df = pd.merge(temp,Covid_ww_df_recovered_world,how = 'inner',on = 'Date')\n\n#daily confirmed cases % change\nCovid_world_df['Daily ConfirmedCase % Change'] = np.round(Covid_world_df['Daily Confirmed Cases'].pct_change()*100,2)\nCovid_world_df['Daily ConfirmedCase % Change'].fillna(value = 0,inplace = True)\n\n#daily fatalities % change\nCovid_world_df['Daily Fatalities % Change'] = np.round(Covid_world_df['Daily Deaths'].pct_change()*100,2)\nCovid_world_df['Daily Fatalities % Change'].fillna(value = 0,inplace = True)\n\n#find the fatalities as percentage of total Confirmed Cases\nCovid_world_df['Cumulative Death Percentage'] = (Covid_world_df['Deaths']\/Covid_world_df['Confirmed Cases'])*100\nCovid_world_df['Daily Death Percentage'] = (Covid_world_df['Daily Deaths']\/Covid_world_df['Daily Confirmed Cases'])*100\n\n#find the fatalities as percentage of total Confirmed Cases\nCovid_world_df['Cumulative Recovered Percentage'] = (Covid_world_df['Recovered']\/Covid_world_df['Confirmed Cases'])*100\nCovid_world_df['Daily Recovered Percentage'] = (Covid_world_df['Daily Recovered']\/Covid_world_df['Daily Confirmed Cases'])*100\n\n#find the % of active cases\nCovid_world_df['Cumulative Active Percentage'] = 100-(Covid_world_df['Cumulative Recovered Percentage'] + Covid_world_df['Cumulative Death Percentage'])\n#Covid_world_df['Daily Recovered Percentage'] = (Covid_world_df['Daily Recovered']\/Covid_world_df['Daily Confirmed Cases'])*100\n\n\n#rolling averages\nCovid_world_df['CC Rolling average'] = Covid_world_df['Daily Confirmed Cases'].rolling(7).mean()\nCovid_world_df['F Rolling average'] = Covid_world_df['Daily Deaths'].rolling(7).mean()\n\nCovid_world_df.fillna(value = 0,inplace = True)","e6be6f8c":"fig = go.Figure(data=[go.Bar(name='Cases', x=Covid_world_df['Date'], y= Covid_world_df['Daily Confirmed Cases']),\n    go.Bar(name='Deaths', x=Covid_world_df['Date'], y=Covid_world_df['Daily Deaths'])])\n\nfig.add_trace(go.Scatter(name='Confirmed Cases Rolling average',x=Covid_world_df['Date'],y=Covid_world_df['CC Rolling average'],marker_color='green'))\nfig.add_trace(go.Scatter(name='Fatalities Rolling average',x=Covid_world_df['Date'],y=Covid_world_df['F Rolling average'],marker_color='red'))\n\nfig.update_layout(barmode = 'overlay',title='Worldwide Daily Cases and Deaths + 7 Day Rolling Averages',title_x = 0.45,showlegend=True)\nfig.show()","427a614f":"fig = go.Figure(data=[go.Scatter(name='Fatalities %', x=Covid_world_df['Date'], y=Covid_world_df['Cumulative Death Percentage'],marker=dict(color='red')),\n                go.Scatter(name='Recovered %', x=Covid_world_df['Date'], y=Covid_world_df['Cumulative Recovered Percentage'],marker=dict(color='blue'))])\n\nfig.update_layout(title='Worldwide Cumulative Actives, Fatalities and Recoveries',title_x=0.5,showlegend=True)\nfig.show()","cb04901f":"Covid_country_sum_df['Case %'] = (Covid_country_sum_df['Confirmed Cases']\/Covid_country_sum_df['Confirmed Cases'].sum())*100\nCovid_country_sum_df['Death %'] = (Covid_country_sum_df['Deaths']\/Covid_country_sum_df['Deaths'].sum())*100\nCovid_country_sum_df['Mortality Rate'] = 100*Covid_country_sum_df['Deaths']\/Covid_country_sum_df['Confirmed Cases']\n\nTop_10_cc = Covid_country_sum_df[0:10]['iso_code']\nTop_10_deaths = Covid_country_sum_df.sort_values(by = 'Deaths',ascending=False)[0:10]['Country\/Region']\n\n# Top_10_cc_df = Covid_country_df.groupby(by = ['Country\/Region','Date'])['Confirmed Cases'].sum().reset_index()\n# Top_10_cc_df = Top_10_cc_df[Top_10_cc_df['Country\/Region'].isin(Top_10_cc)].reset_index()\n\n# Top_10_deaths_df = Covid_country_df.groupby(by = ['Country\/Region','Date'])['Deaths'].sum().reset_index()\n# Top_10_deaths_df = Top_10_deaths_df[Top_10_deaths_df['Country\/Region'].isin(Top_10_deaths)].reset_index()\n#if Covid_country_sum_df['Country\/Region'].contains('Rest of the World'):\n#Covid_country_sum_df.loc[10] = [Covid_country_sum_df.index.max()+1,'Rest of the World',Covid_country_sum_df.iloc[Covid_country_sum_df.shape[0]-2][2],0,0,0,0,0,0,'WRD',100-sum(Covid_country_sum_df['Case %'][0:10]),100-sum(Covid_country_sum_df['Death %'][0:10])]\n#Covid_country_sum_df.sort_values(by = 'Case %',ascending=False)\nCovid_country_sum_df_top10 = Covid_country_sum_df[0:10]\nCovid_country_sum_df_top10 = Covid_country_sum_df_top10.sort_values(by = 'Case %',ascending=False)\nfig = go.Figure()\nfig.add_trace(\n    go.Bar(textposition = 'inside',text = np.round(Covid_country_sum_df_top10['Case %'],2),x=Covid_country_sum_df_top10['Country\/Region'], y=Covid_country_sum_df_top10['Case %'],name = 'Confirmed Case %',marker_color='lightsalmon'))\n\nfig.add_trace(\n    go.Bar(textposition = 'inside',text = np.round(Covid_country_sum_df_top10['Death %'],2),x=Covid_country_sum_df_top10['Country\/Region'], y=Covid_country_sum_df_top10['Death %'],name = 'Fatalities %',marker_color='indianred'))\n\nfig.update_layout(width=1000, height=450,barmode='group', xaxis_tickangle=-45,title_text = 'Share of Cases and Fatalities in Top 10 Countries in Percentages',title_x = .5)\nfig.show()","593300fd":"fig = go.Figure()\nfig.add_trace(\n    go.Bar(orientation='h',textposition = 'inside',text = np.round(Covid_country_sum_df_top10['Confirmed Cases'],2),y=Covid_country_sum_df_top10['Country\/Region'], x =Covid_country_sum_df_top10['Case %'],name = 'Confirmed Case',marker_color='lightsalmon'))\n\nfig.add_trace(\n    go.Bar(orientation='h',textposition = 'inside',text = np.round(Covid_country_sum_df_top10['Deaths'],2),y=Covid_country_sum_df_top10['Country\/Region'], x =Covid_country_sum_df_top10['Death %'],name = 'Fatalities',marker_color='indianred'))\n\nfig.update_layout(legend=dict(\n    orientation=\"h\",\n    yanchor=\"bottom\",\n    y=1.02,\n    xanchor=\"right\",\n    x=1\n),height = 700,width = 950,barmode='group',title_text = 'Cases and Fatalities in Top 10 Countries in Absolute Numbers',title_x = .5)\nfig.show()","219c3334":"temp_df = Covid_country_df.groupby('Date')['Daily Confirmed Cases','Daily Deaths'].max().reset_index()\ntemp_df['match'] = temp_df['Date'].astype('str') + temp_df['Daily Confirmed Cases'].astype('str')\n\nCovid_country_df['match'] = Covid_country_df['Date'].astype('str') + Covid_country_df['Daily Confirmed Cases'].astype('str')\nCovid_country_contri_df = Covid_country_df[Covid_country_df['match'].isin(temp_df['match'])].drop('match',axis = 1).reset_index(drop = 'True')\n\nCovid_country_contri_df = Covid_country_contri_df.sort_values(by = 'Date').reset_index(drop = True)\nfig = px.bar(color_continuous_scale=plotly.express.colors.cyclical.IceFire_r,color = 'Date',text = 'Date',title='Days with Single Highest Cases in the World',data_frame = (Covid_country_contri_df.groupby('Country\/Region')['Date'].count()).reset_index().sort_values('Date',ascending = False),x = 'Country\/Region',y = 'Date',labels = {'Date':'Days'})\nfig.update_layout(title_x = .5)\nfig.show()","6908c732":"temp_df = Covid_country_df.groupby('Date')['Daily Confirmed Cases','Daily Deaths'].max().reset_index()\ntemp_df['match'] = temp_df['Date'].astype('str') + temp_df['Daily Deaths'].astype('str')\n\nCovid_country_df['match'] = Covid_country_df['Date'].astype('str') + Covid_country_df['Daily Deaths'].astype('str')\nCovid_country_contri_df = Covid_country_df[Covid_country_df['match'].isin(temp_df['match'])].drop('match',axis = 1).reset_index(drop = 'True')\n\n\nfig = px.bar(color_continuous_scale=plotly.express.colors.cyclical.IceFire_r,color = 'Date',text = 'Date',title='Days with Single Highest Deaths in the World',data_frame = (Covid_country_contri_df.groupby('Country\/Region')['Date'].count()).reset_index().sort_values('Date',ascending = False),x = 'Country\/Region',y = 'Date',labels = {'Date':'Days'})\nfig.update_layout(title_x = .5)\nfig.show()","08f6118f":"\nCovid_country_df_copy = Covid_country_df[(datetime.datetime.now().date() - Covid_country_df['Date'].dt.date).dt.days <= 30]\n\ntemp_df = Covid_country_df_copy.groupby('Date')['Daily Confirmed Cases','Daily Deaths'].max().reset_index()\ntemp_df['match'] = temp_df['Date'].astype('str') + temp_df['Daily Confirmed Cases'].astype('str')\n\nCovid_country_df['match'] = Covid_country_df['Date'].astype('str') + Covid_country_df['Daily Confirmed Cases'].astype('str')\nCovid_country_contri_df = Covid_country_df[Covid_country_df['match'].isin(temp_df['match'])].drop('match',axis = 1).reset_index(drop = 'True')\n\nCovid_country_contri_df = Covid_country_contri_df.sort_values(by = 'Date').reset_index(drop = True)\nfig = px.bar(color_continuous_scale=plotly.express.colors.cyclical.mygbm,color = 'Date',text = 'Date',title='Days with Single Highest Cases in the World (Last 30 Days)',data_frame = (Covid_country_contri_df.groupby('Country\/Region')['Date'].count()).reset_index().sort_values('Date',ascending = False),x = 'Country\/Region',y = 'Date',labels = {'Date':'Days'})\nfig.update_layout(width = 700,title_x = .5)\nfig.show()","d7cf53d0":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(Top_10_cc))\n\n\nfor index,country in enumerate(Top_10_cc):   \n\n    country_cc_df = Covid_country_df[Covid_country_df['iso_code'] == country].reset_index(drop = True)\n    fig.add_trace(go.Bar(x=country_cc_df['Date'], y=country_cc_df['Daily Confirmed Cases']),row=int((index+2)\/2), col=((index%2)+1))\n    fig.add_trace(go.Scatter(x=country_cc_df['Date'], y=country_cc_df['Daily Confirmed Cases'].rolling(7).mean()),row=int((index+2)\/2), col=((index%2)+1))\n\n\nfig.update_layout(title_text=\"Daily Confirmed Cases in Top 10 Countries\",title_x = .5,barmode = 'overlay',showlegend=False,height=900)\n\nfig.show()\n","9c7f63c1":"fig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(Top_10_cc))\n\n\nfor index,country in enumerate(Top_10_cc):   \n\n    country_cc_df = Covid_country_df[Covid_country_df['iso_code'] == country].reset_index(drop = True)\n    fig.add_trace(go.Bar(x=country_cc_df['Date'], y=country_cc_df['Daily Deaths']),row=int((index+2)\/2), col=((index%2)+1))\n    fig.add_trace(go.Scatter(x=country_cc_df['Date'], y=country_cc_df['Daily Deaths'].rolling(7).mean()),row=int((index+2)\/2), col=((index%2)+1))\n\n\nfig.update_layout(height=900, width=1000,\n                  title_text=\"Daily Fatalities in Top 10 Countries\",title_x = .5,barmode = 'overlay',showlegend=False)\n\nfig.show()","1b95a002":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(Top_10_cc))\n\n\nfor index,country in enumerate(Top_10_cc):   \n\n    country_cc_df = Covid_country_df[Covid_country_df['iso_code'] == country].reset_index(drop = True)\n    fig.add_trace(go.Scatter(x=country_cc_df['Date'], y=country_cc_df['Confirmed Cases'].pct_change().rolling(7).mean()*100),row=int((index+2)\/2), col=((index%2)+1))\n     \n    fig.add_annotation(\n        x=max(country_cc_df['Date']),\n        y=.5,\n        xref=\"x\",\n        yref=\"y\",\n        text=str(np.round(np.array(country_cc_df['Confirmed Cases'].pct_change())[-1]*100,3)),\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.7,\n   row=int((index+2)\/2), col=((index%2)+1) )    \n        \n        \n\nfig.update_layout(height=900,\n                  title_text=\"Rolling 7 Days Average Growth Factor in Top 10 Countries\",title_x = .5,showlegend=False)\n\n\nfig.update_traces(textposition='top center')\n\nfig.show()\n\n\n#worldwide\nfig = px.line(labels={'y':'Growth Factor'},data_frame=Covid_world_df,x = 'Date',y = Covid_world_df['Confirmed Cases'].pct_change().rolling(7).mean()*100)\nfig.update_layout(title_text=\"Rolling 7 Days Average Growth Factor Worldwide\",title_x = .5)\nfig.show()","ddb51fc2":"covid_test_df['CFR'] = 100*(covid_test_df['total_deaths']\/covid_test_df['total_cases'])\n\nfig = px.line(data_frame=covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc)  ],x = 'date',y = 'CFR',color = 'location')\nfig.update_layout(title_text=\"CFR in Top 10 Countries\",title_x = .5,showlegend=True,)\n\nfig.show()\n\nfig = px.line(data_frame=covid_test_df[covid_test_df['iso_code']=='OWID_WRL'],x = 'date',y = 'CFR',color = 'location')\nfig.update_layout(title_text=\"Average Worldwide CFR\",title_x = .5,showlegend=True,)\n\nfig.show()","80e8ee4f":"fig = px.line(labels={'y':'Positivity Rate in %'},data_frame=covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ],x = 'date',y = covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ]['positive_rate'].rolling(7).mean()*100,color = 'location')\nfig.update_layout(title_text=\"Rolling 7 Day Average Positive Rate in Top 10 Countries\",title_x = .5,showlegend=True,)\nfig.show()","a0456aea":"fig = px.line(labels={'y':'Daily Tests'},data_frame=covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ],x = 'date',y = covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ]['new_tests'].rolling(7).mean(),color = 'location')\nfig.update_layout(title_text=\"Rolling 7 Day Average Daily Total Tests Top 10 Countries\",title_x = .5,showlegend=True,)\n\nfig.show()\n\nfig = px.line(labels={'y':'Daily Tests\/Thousand'},data_frame=covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ],x = 'date',y = (covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ]['new_tests']\/covid_test_df[covid_test_df['iso_code'].isin(Top_10_cc) ]['population']).rolling(7).mean()*1000,color = 'location')\nfig.update_layout(title_text=\"Rolling 7 Day Average Daily Tests\/Thousand Top 10 Countries\",title_x = .5,showlegend=True,)\n\nfig.show()","3842acd2":"fig = make_subplots(\n    rows=5, cols=2,\n    subplot_titles=(Top_10_cc))\n\n\nfor index,country in enumerate(Top_10_cc):   \n\n    country_cc_df = covid_test_df[covid_test_df['iso_code'] == country].reset_index(drop = True)\n    fig.add_trace(go.Scatter(x=country_cc_df['date'], y=1000000*(country_cc_df['new_tests']\/country_cc_df['population'])),row=int((index+2)\/2), col=((index%2)+1))\n    fig.add_trace(go.Bar(x=country_cc_df['date'], y=country_cc_df['new_cases_per_million']),row=int((index+2)\/2), col=((index%2)+1))\n\n\nfig.update_layout(height=900, title_text=\"Tests\/million Vs Confirmed Cases\/million in Top 10 Countries\",title_x = .5,barmode = 'overlay',showlegend=False)\n\nfig.show()","b81127bb":"\ntemp_df = Covid_country_df[(Covid_country_df['iso_code'].isin(Top_10_cc)) & (Covid_country_df['Confirmed Cases'] >= 100)]\nmin_date = min(temp_df['Date'])\ntemp_df['Days Since First 100 Confirmed Cases'] = (temp_df['Date'] - min_date).dt.days \nfig = px.line(data_frame=temp_df,x = 'Days Since First 100 Confirmed Cases',y = np.log(temp_df['Confirmed Cases']),color = 'Country\/Region')\n\nx = np.array([0, max(temp_df['Days Since First 100 Confirmed Cases'])])\ny5 = np.log(100) + (x\/5) * np.log(2)\ny10 = np.log(100) + (x\/10) * np.log(2)\ny15 = np.log(100) + (x\/15) * np.log(2)\n\nfig.add_trace(go.Scatter(name = 'Doubling every 5 days',x=x, y=y5,line=dict(color='brown', width=4, dash='dash')))\nfig.add_trace(go.Scatter(name = 'Doubling every 10 days',x=x, y=y10,line=dict(color='royalblue', width=4, dash='dash')))\nfig.add_trace(go.Scatter(name = 'Doubling every 15 days',x=x, y=y15,line=dict(color='black', width=4, dash='dash')))\nfig.update_layout(height = 800, yaxis_title=\"Confirmed Cases (in log10 scale)\",title = 'Doubling Rate Comparison of the Top 10 Countries',title_x = .5)\nfig.show()","575be78a":"USA_cc_df = Restructure_USA_df(JHU_US_CC_df,'Confirmed Cases')","3ac5927f":"USA_pop_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/nebuchadnezzar26\/US-Population\/master\/US_Population.csv')\nUSA_df = USA_cc_df[USA_cc_df['Date'] == max(USA_cc_df['Date'])]\nUSA_df['State_iso'] = USA_df['Province_State'].apply(lambda x:getABBR(x))\nUSA_pop_df['State_iso'] = USA_pop_df['State'].apply(lambda x:getABBR(x))\nUSA_df = USA_df[USA_df['State_iso'] != '0'].reset_index(drop = True)\nUSA_pop_df = USA_pop_df[USA_pop_df['State_iso'] != '0'].reset_index(drop = True)\nUSA_merged_df = USA_pop_df.merge(USA_df,on = 'State_iso')\nUSA_merged_df['Confirmed Cases Per Million'] = (USA_merged_df['Confirmed Cases']\/USA_merged_df['Pop'])*100000","d3f86667":"df = USA_pop_df\n\nfig1 = go.Figure(go.Choropleth(locations = USA_merged_df['State_iso'],text=USA_merged_df['State_iso'],colorbar_title = \"Confirmed Cases\",colorscale = 'ylorbr',locationmode=\"USA-states\", z=USA_merged_df['Confirmed Cases']))\n\nfig1.update_layout(\n    title_text = 'Distribution of Confirmed Cases in USA',\n    geo_scope='usa',title_x = .5 ,geo = dict(resolution = 110))\n\nfig2 = go.Figure(go.Choropleth(locations=USA_merged_df['State_iso'],z = USA_merged_df['Pop'],locationmode = 'USA-states', colorscale = 'ylorbr',colorbar_title = \"Population in Millions\"))\n\nfig2.update_layout(\n    title_text = 'US Population Distribution',\n    geo_scope='usa',title_x = .5,legend_orientation=\"h\")\n\nfig2.show()\nfig1.show()","82574a73":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=USA_merged_df['Province_State'],\n    y=USA_merged_df['density'],\n    name='Population Density',\n    marker_color='green',mode = 'markers+lines'\n))\nfig.add_trace(go.Scatter(\n    x=USA_merged_df['Province_State'],\n    y=USA_merged_df['Confirmed Cases Per Million'],\n    name='Confirmed Cases Per Million',\n    marker_color='red',mode = 'markers+lines'\n))\n\nfig.update_layout(title_text = 'Population density vs Confirmed Cases Per Million in US States',title_x = .5,barmode='group', xaxis_tickangle=-45,width = 1050,height = 400,legend_orientation=\"h\",legend=dict(x=.01, y=1.2))\nfig.show()","81ff1d6d":"#merged_df = pd.read_csv('covid19_merged.csv')\nmerged_df = pd.read_csv('\/kaggle\/input\/covid19\/covid19_merged.csv')\nmerged_df['iso'] = merged_df['country'].apply(lambda x:country_utils().fetch_iso3(x))\n\nCovid_country_temp_df = Covid_country_df[Covid_country_df['Date'] == max(Covid_country_df['Date'])][['Country\/Region','Confirmed Cases','Deaths','Recovered']]\nCovid_country_temp_df['iso'] = Covid_country_temp_df['Country\/Region'].apply(lambda x:country_utils().fetch_iso3(x))\n\nmerged_df = merged_df[merged_df['annual_temp'].notnull()].reset_index(drop = True)\nmaster_df = Covid_country_temp_df.merge(merged_df,on = 'iso')\nmaster_df.drop_duplicates(subset = 'iso',inplace = True)\nmaster_df.sort_values(by = 'Confirmed Cases',inplace = True,ascending=False)\n","aab860c5":"master_df['Cases Per Million'] = (master_df['Confirmed Cases']\/master_df['Population_2020'])*1000000\nmaster_df['Fatalities Per Million'] = (master_df['Deaths']\/master_df['Population_2020'])*1000000\nmaster_df = master_df[master_df['Cases Per Million'].notnull()].reset_index(drop = True)\nmaster_temp_df = master_df[master_df['Population_2020'] > 1000000]\n\nfig = px.scatter(data_frame=master_temp_df, x='annual_temp', y='Cases Per Million',size = 'Cases Per Million',color = 'Country\/Region',size_max = 80,title = 'Cases Per Million Population vs Countrywise Average Annual Temperature')\nfig.update_layout(title_x = .5,autosize=False,width=1000,height=500,xaxis_title = 'Average Annual Temperature in Celsius Degree')\nfig.show()","2dfa20f8":"master_precp_df = master_df[master_df['Population_2020'] > 1000000]\nfig = px.scatter(data_frame=master_precp_df, x='Annual_precip', y='Cases Per Million',size = 'Cases Per Million',color = 'Country\/Region',size_max = 80,title = 'Cases Per Million Population vs Countrywise Annual Precipitation')\nfig.update_layout(autosize=False,width=1000,height=500,xaxis_title = 'Annual Precipitation in mm',title_x = .5)\nfig.show()","e1bbba73":"master_df = master_df[master_df['Urban_pop_pct'] != 'N.A.']\nmaster_df['Urban_pop_pct'] = master_df['Urban_pop_pct'].apply(lambda x:int(str(x).replace('%','')))\n\nmaster_df['Urban_pop_pct_bins'] = pd.cut(master_df['Urban_pop_pct'],6,include_lowest=True,precision=0)","3b073d59":"\nUrban_pop_df = master_df.groupby(by = 'Urban_pop_pct_bins')['Cases Per Million'].mean().reset_index()\n\nfig, ax1 = plt.subplots(figsize = (16,5))\nsns.barplot(Urban_pop_df['Urban_pop_pct_bins'],Urban_pop_df['Cases Per Million'],ax = ax1)\nsns.set_style(style = 'darkgrid')\nplt.xlabel('Urban Population % Range',fontsize=13)\nplt.ylabel('Cases Per Million',fontsize=13)\nplt.title('Cases Per Million (Mean) vs % of Urban Population',fontsize=15)\nplt.show()","f271072d":"fig = px.scatter(data_frame=master_df, x='Urban_pop_pct', y='Cases Per Million',size = 'Cases Per Million',color = 'Country\/Region',size_max = 80,title = 'Cases Per Million Population vs Countrywise Urban Population')\nfig.update_layout(title_x = .5,autosize=False,width=1000,height=500,xaxis_title=\"Urban Population %\")\nfig.show()","09835305":"fig = px.scatter(data_frame=master_df, x=master_df['gdp_usd_million']*1000000\/master_df['Population_2020'], y='Cases Per Million',size = 'Cases Per Million',color = 'Country\/Region',size_max = 80,title = 'Cases Per Million Population vs GDP Per Capita')\nfig.update_layout(title_x = .5,autosize=False,width=1000,height=500,xaxis_title=\"GDP Per Capita\")\nfig.show()","50c5fd6f":"fig = px.scatter(data_frame=master_df, x='Median_age', y='Cases Per Million',size = 'Cases Per Million',color = 'Country\/Region',size_max = 80,title = 'Cases Per Million Population vs Countrywise Median Age')\nfig.update_layout(autosize=False,width=1000,height=500,xaxis_title = 'Median Age')\nfig.show()","cc81afc8":"fig = px.scatter(data_frame=master_df, x='Median_age', y='Fatalities Per Million',size = 'Fatalities Per Million',color = 'Country\/Region',size_max = 80,title = 'Fatalities Per Million Population vs Countrywise Median Age')\nfig.update_layout(title_x = .5,autosize=False,width=1000,height=500,xaxis_title = 'Median Age')\nfig.show()","e907a96e":"fig = px.scatter(data_frame=master_df,size = 'Fatalities Per Million', size_max = 80,x = 'hosp_beds_per_1000_2017', y='Fatalities Per Million',color = 'Country\/Region',title = 'Fatalities Per Million Population vs ICU Beds Per 1000')\nfig.update_layout(autosize=False,width=1000,height=500,xaxis_title=\"Hospital Beds Per 1000\")\nfig.show()","50ee96dc":"print('Latest Date for which data is available - ',max(Covid_world_df['Date']))\nprint('Worldwide Confirmed Cases on the latest date are - ',int(Covid_world_df[Covid_world_df['Date'] == max(Covid_world_df['Date'])]['Confirmed Cases'].values))\nprint('Current Growth Rate - ',np.round(np.array(Covid_world_df['Confirmed Cases'].pct_change())[-8:-1].mean(),3))","9ff6f41e":"import datetime\nprediction_dates = []\npredicted_cases = []\n\nstart_date = max(Covid_world_df['Date'])\ngrowth_rate = np.array(Covid_world_df['Confirmed Cases'].pct_change())[-1]\nprevious_day_cases = Covid_world_df[Covid_world_df['Date'] == max(Covid_world_df['Date'])]['Confirmed Cases'].values\n\n\nfor i in range(21):\n    \n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\n    \n    predicted_value = previous_day_cases + (previous_day_cases *  growth_rate)\n    predicted_cases.append(int(predicted_value))\n    previous_day_cases = predicted_value\n    \nfig = go.Figure()\nfig.add_trace(go.Scatter(mode='lines+markers',x = prediction_dates,y = predicted_cases) ) \nfig.update_layout(title_text = 'Worldwide Projections for the next 21 days using growth factor method',title_x = .5,xaxis_title='Dates',yaxis_title='Projected Confirmed Cases')\nfig.show()","a2c00366":"Covid_world_ARIMA = Covid_world_df[['Date','Confirmed Cases']]\nCovid_world_ARIMA = Covid_world_ARIMA.set_index('Date')","3ea47a63":"\ndef test_stationarity(timeseries,colname):\n    \n    \n    movingAverage = timeseries[colname].rolling(5).mean()\n    movingStd = timeseries[colname].rolling(5).std()\n    \n    plt.close()\n    #plot rolling statistics\n    plt.figure(figsize= (15,10))\n    orig = plt.plot(timeseries[colname],color = 'blue',label = 'Original')\n    mean = plt.plot(movingAverage,color = 'red',label = 'Rolling Mean')\n    std = plt.plot(movingStd,color = 'black',label = 'Rolling Std')\n    plt.legend(loc = 'best')\n    plt.title('Rolling Mean and Standard Deviation')\n    plt.show(block = False)\n    \n    \n    \n    print('Results of Dickey-Fueller Test:')\n    dftest = adfuller(timeseries[colname],autolag = 'AIC')\n\n    dfoutput = pd.Series(dftest[0:4],index = ['Test Statistics','P-Value','#Lags Used','Number of Observations Used'])\n\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n\n    print(dfoutput)\n    \n    \n","589b72f4":"df = Covid_world_ARIMA.copy()\ndf['Logscale'] = np.log(Covid_world_ARIMA['Confirmed Cases'])\ndf['1st Diff'] = df['Logscale'].diff(periods=1)\ndf['2nd Diff'] = df['1st Diff'].diff(periods=1)","d6dbb640":"# def adfuller_test(sales):\n#     result=adfuller(sales)\n#     labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n#     for value,label in zip(result,labels):\n#         print(label+' : '+str(value) )\n#     if result[1] <= 0.05:\n#         print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n#     else:\n#         print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")","4b2e659c":"#test_stationarity(df.dropna(),'2nd Diff')","829b0ba3":"# from statsmodels.tsa.seasonal import seasonal_decompose\n# decomposition = seasonal_decompose(df['2nd Diff'].dropna())\n\n# trend = decomposition.trend\n# seasonality = decomposition.seasonal\n# residual = decomposition.resid\n\n\n# plt.figure(figsize= (15,10))\n\n# plt.subplot(411)\n# plt.plot(df['2nd Diff'].dropna(),label = 'Original')\n# plt.legend(loc = 'best')\n\n\n# plt.subplot(412)\n# plt.plot(trend,label = 'Trend')\n# plt.legend(loc = 'best')\n\n# plt.subplot(413)\n# plt.plot(seasonality,label = 'Seasonality')\n# #plt.xaxis_date()\n# #plt.xticks(np.arange(min(x), max(x)+1, 1.0))\n# plt.legend(loc = 'best')\n\n# plt.subplot(414)\n# plt.plot(residual,label = 'Residual')\n# plt.legend(loc = 'best')\n\n# plt.tight_layout()\n","06006691":"# from pandas.plotting import autocorrelation_plot\n# autocorrelation_plot(df['2nd Diff'])\n# plt.show()","a2122eb5":"# from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n# import statsmodels.api as sm\n\n# fig = plt.figure(figsize=(12,8))\n# ax1 = fig.add_subplot(211)\n# fig = sm.graphics.tsa.plot_acf(df['2nd Diff'].dropna(),lags=40,ax=ax1)\n# ax2 = fig.add_subplot(212)\n# fig = sm.graphics.tsa.plot_pacf(df['2nd Diff'].dropna(),lags=40,ax=ax2)","70439e10":"# from statsmodels.tsa.stattools import acf,pacf\n\n# lagacf = acf(df['2nd Diff'].dropna(),nlags=40)\n# lagpacf = pacf(df['2nd Diff'].dropna(), nlags=40, method='ols')\n\n# plt.figure(figsize= (15,10))\n\n# plt.subplot(121)\n# plt.plot(lagacf)\n# plt.axhline(y = 0,linestyle = '--',color = 'gray')\n# plt.axhline(y = -1.96\/np.sqrt(len(df['2nd Diff'].dropna())),linestyle = '--',color = 'gray')\n# plt.axhline(y = 1.96\/np.sqrt(len(df['2nd Diff'].dropna())),linestyle = '--',color = 'gray')\n# plt.title('Autocorrelation Function')\n\n\n# plt.subplot(122)\n# plt.plot(lagpacf)\n# plt.axhline(y = 0,linestyle = '--',color = 'gray')\n# plt.axhline(y = -1.96\/np.sqrt(len(df['2nd Diff'].dropna())),linestyle = '--',color = 'gray')\n# plt.axhline(y = 1.96\/np.sqrt(len(df['2nd Diff'].dropna())),linestyle = '--',color = 'gray')\n# plt.title('Partial Autocorrelation Function')","ce3189a4":"from pandas.tseries.offsets import DateOffset\n\nimport statsmodels.api as sm\nmodel=sm.tsa.statespace.SARIMAX(df['Logscale'],order=(1, 2, 1),seasonal_order=(1,2,1,7))\nresults=model.fit()\n\n\nfuture_dates=[df.index[-1]+ DateOffset(days=x)for x in range(0,21)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\nfuture_df=pd.concat([df,future_datest_df])\nfuture_df['forecast'] = results.predict(start = (df.shape[0]), end = (df.shape[0])+21, dynamic= True)  ","b32f2dc1":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    y=np.exp(future_df['Logscale']),\n    x=future_df.index,\n    name='Current Cases',\n    marker_color='green',mode = 'markers+lines'\n))\nfig.add_trace(go.Scatter(\n    y=np.exp(future_df['forecast']),\n    x=future_df.index,\n    name='Forecasting',\n    marker_color='red',mode = 'markers+lines'\n))\n\nfig.add_annotation(\n        x=max(future_df.index),\n        y=np.round((np.exp(future_df['forecast'])[-1]),2),\n        xref=\"x\",\n        yref=\"y\",\n        text=np.round((np.exp(future_df['forecast'])[-1]),2),\n        showarrow=True,\n        font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"#ffffff\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#c7c7c7\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#ff7f0e\",\n        opacity=0.7 )    \n\nfig.update_layout(title_text = 'Predicted Values for the next 21 Days using SARIMAX Model',title_x = .5, xaxis_tickangle=-45,legend_orientation=\"h\",legend=dict(x=.01, y=1.1))\nfig.show()","56e972d8":"### Insights\n- USA, India, Russia, South Africa and Brazil are the current epicenters in their respective continents\n- Africa seems relatively untouched except for South Africa\n- Australia and New Zealand are doing good and so are many nations in South East Asia\n- Similar pattern is seen for fatalities, except in Europe where Britain has the highest fatalities as of now","34dd4072":"### Insights\n- Worldwide Cumulative Death percentage seems to be flattening at around 3%\n- From a high of 55% on March 5, the recovery rate fell to 20% by March end, this is very closely related to exponentially increase in confirmed cases that were observed in the same time period\n- Worldwide Recovery percentage stands at 65% currently and rising","a3ad8e2f":"### Insights\n- Some correlation is present here, countries having more ICU beds\/1000 see less fatalities per million","996996d9":"### Insights\n- Infection density is matching closely with population density in almost all of the states, underlying the need of social distancing in densely populated areas\n- Eastern and Western seaboards have far greater infection rates when compared to mid-west and central USA","20976f4a":"## Daily Tests vs Daily Cases\n\n####  When the number of confirmed cases is high relative to the extent of testing, this suggests that there may not be enough tests being carried out to properly monitor the outbreak. In such countries, the true number of infections may be far higher than the number of confirmed cases.","62952f85":"### Insights\n - As doctors gain more experience treating COVID-19 patients, they are getting better in reducing the mortality rates.","c455ee85":"# Worldwide Projections\n\n### Forecasting using growth rate","8013d0d1":"## Is the curve getting flattened ?","24837428":"## Demographic Factors","4d3fa99f":"## CFR - Case fatality rate\n\n#### The proportion of deaths from a certain disease compared to the total number of people diagnosed with the disease for a particular period","3a2e8e3c":"### Insights\n- Urbanization seems to have a strong correlaton with the infection rates, this probably is due to the fact that people in urban areas tend to socialize and move a lot when compared to rural areas","890e0f2b":"## How are we looking now ? ","27792d20":"## COVID growth factor\n\n#### A growth factor above 1 indicates an increase, whereas one which remains between 0 and 1 it is a sign of decline, with the quantity eventually becoming zero, whereas a growth factor constantly above 1 could signal exponential growth","884c4f2c":"### Insights\n\n- Worldwide daily confirmed cases saw an exponential rise from mid May till the end of July, of late we see that the curve has began to flatten but will it be sustained ? Can't say.  \n","d621f000":"## Positivity Rate\n\n#### The percentage of people who test positive for the virus of those overall who have been tested. The WHO has suggested a positive rate lower than 10% \u2013 but better lower than 3% \u2013 as a general benchmark of adequate testing.","244a6bbc":"## Dominant Countries","322917e0":"## Other Factors","d920adcf":"# A Data Science Case Study on COVID-19\n\nA Data Science based analysis on the publicly available COVID-19 datasets\n\n![](https:\/\/images.newscientist.com\/wp-content\/uploads\/2020\/02\/11165812\/c0481846-wuhan_novel_coronavirus_illustration-spl.jpg)","c4e543f2":"### Required Imports","b97ed332":"### 3) Age","aaa1890f":"### Insights\n- A slight correlation is present, countries having larger median age tend to have a high density of cases as well as fatalities","69e549f4":"### Insights\n- Temperature and humidity\/rainfall doesnt seem to have any effect on the covid-19 infection rates","c04fb06a":"# Analysis on the risk factors for COVID-19 ","dc72c1aa":"### 2) Precipitation","9790ae3f":"## Forecasting using SARIMAX ","5ee9219e":"## Doubling Rates","5fa5ecd4":"### Insights\n - We would ideally want to have the growth factor graph to be either flat or going downwards, any crests and troughs without an overall downward trend implies containment startegies are not working  ","ca0e3d47":"### 1) Urban Population","3e3c21c9":"## Top contributing countries","a8effa6a":"### Insights\n - The curve is flatenning for few countries but we see that there is a resurgence or the so called 2nd Wave in some countries. Fortunately, we are experiencing very less fatalities in the 2nd wave compared to before.","2ca7cecc":"### 2) GDP ","7ad345a0":"### Fatalities Per Million vs ICU Beds","d0eb1892":"## Let's see some worldwide patterns","06879d7b":"### Insights\n - US, Brazil and India are top contributing countries, they alone constitute over 50% of the total confirmed cases. \n - Except Mexico, Peru and Spain, the share of fatalities of all other countries in this list is either equal or less than their share of the confirmed cases","eb09dc57":"### Acknowledgements\n\n#### Datasets\n - https:\/\/www.kaggle.com\/koryto\/countryinfo\n - https:\/\/github.com\/CSSEGISandData\n - https:\/\/ourworldindata.org\/coronavirus-testing\n","634bf8dd":"## Daily Tests","5362707a":"## A quick look at USA","61bf6783":" ## Climatic Factors (Countries with population > 1 Million)","cdb008a5":"### 1) Temperature","3ab78f15":"## Get Realtime Data","dd8e1783":"### Insights\n- High income countries generally have low infection rates but there are exceptions to it"}}