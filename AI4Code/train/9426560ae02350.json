{"cell_type":{"739fc7f4":"code","ff440177":"code","31ebb962":"code","dfa25865":"code","cfe08ae7":"code","b966a53d":"code","c2948577":"code","979b013a":"code","456959c6":"code","16b8c01c":"code","febf13cd":"code","15391d79":"code","c50e2785":"code","7a254a1f":"code","d06775ed":"code","b3f03d9a":"code","062e5f94":"code","74d91660":"code","5250a9a6":"code","a0a9a357":"code","ee878f26":"code","dbd73c60":"code","38b20a9a":"code","e9917f8e":"code","62ab9aaf":"code","d85c038b":"code","92858e67":"code","d1ec32c6":"code","058de716":"code","2ba3d332":"code","6ac49f11":"code","5084fa21":"code","44a37f30":"code","6fb2f7bf":"code","56d8a543":"code","444cb0ab":"code","4c460c8c":"code","36e87b7b":"code","01b68473":"code","0b9eed4c":"code","c0df9225":"code","9acf7104":"code","a1e20c99":"code","4934bc5f":"code","34f5d56d":"code","361a42fc":"code","3081b85c":"code","c729476d":"code","3aaf8fdf":"code","dc0ef01f":"markdown","c3ced89d":"markdown","df5c276d":"markdown","21f54449":"markdown","6fdb5a49":"markdown","04b6d0a4":"markdown","b4beb80c":"markdown","1a6eae77":"markdown","dc78340e":"markdown","7be5e6a6":"markdown","0647857f":"markdown","82cf2f58":"markdown","df142d26":"markdown","e8534f44":"markdown","15ac7fe1":"markdown","ecab234d":"markdown","4903e5b8":"markdown","0c64760e":"markdown","967832e4":"markdown","3d59aefa":"markdown","a22543b6":"markdown","ee39fd62":"markdown","040e3dd4":"markdown","094c9011":"markdown","60f2486a":"markdown","1ecb5558":"markdown","6247b2a9":"markdown","dce1be66":"markdown","b8cdf559":"markdown","620afde6":"markdown","e0780629":"markdown"},"source":{"739fc7f4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","ff440177":"DATASET_PATH = \"\/kaggle\/input\/fashion-product-images-dataset\/fashion-dataset\/fashion-dataset\/\"\nprint(os.listdir(DATASET_PATH))","31ebb962":"# what is inside the main directory\nlist_directory = os.listdir(DATASET_PATH)\nprint(list_directory)\n\n# each time directory files gets reordered. That's why needed to find where images folder is.\nindex=0\nfor i in range (len(list_directory)):\n    if list_directory[i]==\"images\":\n        index=i\n        break\n\n# what is in the image directory\nimageIndex = os.listdir(DATASET_PATH+list_directory[index])\n# print(type(imageIndex))\nhead = 10\n\n# collecting some samples in list\nsampleImages = []\n\n# showing indices\nfor i in range (head):\n    sampleImages.append(imageIndex[i])\n    print(sampleImages[i])\n\n# choosing some samples to observe\nfig=plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\naxis=[]\nrow = len(sampleImages)\/2\ncol = row+1\n\nfor i in range (len(sampleImages)):\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+sampleImages[i]\n    src = cv2.imread(Image_path)\n    image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \n    axis.append(fig.add_subplot(row, col, i+1))\n    subplot_title=sampleImages[i]\n    axis[-1].set_title(subplot_title)  \n    plt.imshow(image)\n\nfig.tight_layout()\nplt.show()","dfa25865":"df = pd.read_csv(DATASET_PATH + \"styles.csv\", nrows=44000, error_bad_lines=False)\ndf.head(10)","cfe08ae7":"df['image'] = df.apply(lambda row: str(row['id']) + \".jpg\", axis=1)\ndf.head(10)","b966a53d":"augmentedDataframe = pd.DataFrame({\n    'filename': df['image'],\n    'type': df['articleType']\n})\n\n# total number of entries in the dataframe\ntotal_row = len(augmentedDataframe)\nprint('total row count: ', total_row)\n\naugmentedDataframe.head(10)","c2948577":"unique_types = augmentedDataframe['type'].unique().tolist()\ntotal_class = len(unique_types)\nprint(total_class)\nprint(unique_types)\nprint(unique_types[0])\nprint(unique_types.index(unique_types[0]))\naugmentedDataframe['number_types'] = augmentedDataframe['type'].apply(lambda x: unique_types.index(x) if x in unique_types else 0)\naugmentedDataframe.head(10)","979b013a":"augmentedDataframe['type'].value_counts()","456959c6":"plt.figure(figsize=(20,5))\naugmentedDataframe['type'].value_counts().plot(kind='bar',x='type',y='filename')\nplt.show()","16b8c01c":"def getData(start,stop):\n    x_data = []\n    y_data = []\n    #start = 0 #setting start parameter\n    #stop = int(0.001*total_row) #setting stop parameter \n    \n    for i in range(start, stop): \n        Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n#         print(augmentedDataframe.loc[i,'filename'])\n        image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n        try:\n            resized_img = cv2.resize(image, dsize=(28, 28))\n        except:\n            print(\"Rejected Image: \"+augmentedDataframe.loc[i,'filename'])\n            continue\n        x_data.append(resized_img) \n        y_values = augmentedDataframe.loc[i,'number_types'] # earlier it was type\n        y_data.append(y_values)\n                \n    return x_data, y_data","febf13cd":"X=[]\nY=[]\n# for now start=0,stop=(0.001*total_row)\n# total_row=count of rows in augmented data frame\nstart = 0\nstop = int(0.001*total_row) # testing with 0.1% image of the dataset\nX,Y=getData(start,stop)","15391d79":"print(type(X))\n# print(X[0])\nplt.title(unique_types[Y[0]])\nplt.imshow(X[0])","c50e2785":"X = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)","7a254a1f":"X = X\/255.0","d06775ed":"Y = Y.reshape(len(X),)","b3f03d9a":"print(type(X))\nprint(X.shape)\nprint(Y.shape)\n# print(X[0])\n# print(Y[0])","062e5f94":"X=[]\nY=[]\nstart = 0\nstop = total_row\nX,Y=getData(start,stop)\n\n# conversion into numpy array\nX = np.array(X).reshape(-1, 28,28,1)\nY = np.array(Y)\n\n# normalizing\nX = X\/255\n\n# processing Y_train for dimension matching\nY = Y.reshape(len(X),)","74d91660":"print('Image Data Shape: ',X.shape)\nprint('Label Data Shape: ',Y.shape)","5250a9a6":"from sklearn.model_selection import train_test_split","a0a9a357":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 500)","ee878f26":"print('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Test Image Data Shape: ',X_test.shape)\nprint('Test Label Data Shape: ',Y_test.shape)\n","dbd73c60":"X_train, X_validate, Y_train, Y_validate = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 500)","38b20a9a":"print('Train Image Data Shape: ',X_train.shape)\nprint('Train Label Data Shape: ',Y_train.shape)\nprint('Validation Image Data Shape: ',X_validate.shape)\nprint('Validation Label Data Shape: ',Y_validate.shape)","e9917f8e":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\nimport os\nimport tensorflow as tf\nimport datetime, os\nfrom tensorflow.keras.callbacks import TensorBoard","62ab9aaf":"def build_model():\n    cnn_model = Sequential()\n    cnn_model.add(Conv2D(32, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(64, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Conv2D(128, (3, 3), input_shape = (28,28,1), activation='relu'))\n    cnn_model.add(MaxPooling2D(pool_size = (2, 2)))\n    cnn_model.add(Dropout(0.25))\n\n    cnn_model.add(Flatten())\n    cnn_model.add(Dense(units = 512, activation = 'relu'))\n    cnn_model.add(Dropout(0.25))\n    cnn_model.add(Dense(units = total_class, activation = 'softmax'))\n    return cnn_model\n","d85c038b":"model=build_model()","92858e67":"print(model.summary())","d1ec32c6":"def train_model(model):\n    model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics =['accuracy'])\n    history = model.fit(X_train, Y_train, batch_size = 128, epochs = 150, verbose = 1, validation_data = (X_validate, Y_validate))\n#     model.fit(X_train, Y_train, epochs=50, batch_size=512, validation_split=0.2)","058de716":"train_model(model)","2ba3d332":"# from keras import models","6ac49f11":"# model = models.load_model('visual_product_recommend.h5')","5084fa21":"# model.save('visual_product_recommend.h5')","44a37f30":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(model.history.history['loss'], label='Loss')\n# plt.plot(model.history.history['val_loss'], label='val_Loss')\nplt.legend()\nplt.grid()\nplt.title('Loss evolution')\n\nplt.subplot(2, 2, 2)\nplt.plot(model.history.history['accuracy'], label='accuracy')\n# plt.plot(model.history.history['val_accuracy'], label='val_accuracy')\nplt.legend()\nplt.grid()\nplt.title('Accuracy evolution')","6fb2f7bf":"predicted_classes = model.predict_classes(X_test)","56d8a543":"#PC=PredictedClass #TC=TrueClass\nL = 5\nW = 5\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title(f\"PC = {unique_types[predicted_classes[i]]}\\n TC = {unique_types[Y_test[i]]}\") #predicted_classes[i]:0.1f #Y_test[i]:0.1f\n    axes[i].axis('off')\nplt.subplots_adjust(wspace=0.5)","444cb0ab":"#augmentedDataframe.head(10)","4c460c8c":"def load_image(i):\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+augmentedDataframe.loc[i,'filename']\n    Image_id=augmentedDataframe.loc[i,'filename'].split(\".\")\n    res=Image_id[0]\n    image = cv2.imread(Image_path,cv2.IMREAD_COLOR)\n    resized_img = cv2.resize(image, dsize=(224, 224))\n    return resized_img,res","36e87b7b":"img,img_id = load_image(200)\nimg=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\nplt.title(img_id)\nplt.imshow(img)","01b68473":"def make_prediction(img):\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) \n    resized_img = cv2.resize(img, dsize=(28, 28))\n    x_data = np.array(resized_img).reshape(-1, 28,28,1)\n    x_data=x_data\/255\n#     print(x_data)\n#     print(x_data.shape)\n    result=model.predict(x_data)\n#     print(type(result))\n#     print(np.argmax(result))\n    return x_data,unique_types[np.argmax(result)]\n    ","0b9eed4c":"numpy_image,result=make_prediction(img)\nprint(result)","c0df9225":"#df.head(10)","9acf7104":"typeList=[]\nfor i, row in df.iterrows(): \n    if(row[\"articleType\"]==result):\n        #print(row[\"id\"],row[\"articleType\"])\n        if(img_id!=str(row[\"id\"])):\n            typeList.append(row['id'])","a1e20c99":"print(typeList)","4934bc5f":"i=0\nX_similar=[]\nX_id_similar=[]\nX_numpy=[]\nfor imageId in typeList:\n#     print(imageId)\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(imageId)+\".jpg\"\n    image = cv2.imread(Image_path,cv2.IMREAD_GRAYSCALE)\n    try:\n        resized_img = cv2.resize(image, dsize=(28,28))\n    except:\n        print(\"can't read file: \", str(imageId)+\".jpg\")\n    X_similar.append(resized_img)\n    X_id_similar.append(imageId)\n        \nX_numpy = np.array(X_similar).reshape(-1, 28,28,1)\nX_numpy = X_numpy\/255\n#print(X_numpy[0])\n    ","34f5d56d":"plt.imshow(X_similar[0])\nplt.title(X_id_similar[0])","361a42fc":"import math\ndef calculateDistance(i1, i2):\n    return math.sqrt(np.sum((i1-i2)**2))","3081b85c":"print(calculateDistance(numpy_image,X_numpy[0]))","c729476d":"distance_list=[]\nfor i in range (0, len(X_numpy)):\n    distance_list.append(calculateDistance(numpy_image,X_numpy[i]))\n\nsorted_distance_list=distance_list.copy()\n#print(distance_list)\nsorted_distance_list.sort()\n\nleast_ten_distance=sorted_distance_list[0:10]\nprint(least_ten_distance)\nindex_distance=[]\nfor i in range (0, len(least_ten_distance)-1):\n    if(least_ten_distance[i]!=least_ten_distance[i+1]):\n        index_distance.append(distance_list.index(least_ten_distance[i]))\n\nindex_distance=index_distance[0:5]\n\nprint(index_distance)","3aaf8fdf":"# Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(img_id)+\".jpg\"\n# src = cv2.imread(Image_path)\n# image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \nplt.imshow(img)\nplt.title(img_id)\n\nfig=plt.figure()\nfig.set_figheight(15)\nfig.set_figwidth(15)\naxis=[]\nfor i in range(0,len(index_distance)):\n    print(X_id_similar[i])\n    Image_path=DATASET_PATH+list_directory[index]+\"\/\"+str(X_id_similar[index_distance[i]])+\".jpg\"\n    src = cv2.imread(Image_path)\n    image = cv2.cvtColor(src, cv2.COLOR_BGR2RGB) \n    axis.append(fig.add_subplot(1,5, i+1))\n    subplot_title=str(X_id_similar[index_distance[i]])\n    axis[-1].set_title(subplot_title)  \n    plt.imshow(image)\n\nfig.tight_layout()\nplt.show()\n    ","dc0ef01f":"# Processing labels for dimension matching","c3ced89d":"# Here total counting length is 108. Total number of type classes available 108.","df5c276d":"# Saving Model","21f54449":"# Test of the function","6fdb5a49":"# What is inside the image directory\n## Observing some sample image","04b6d0a4":"# Model Evolution","b4beb80c":"># Importing Libraries","1a6eae77":"# Showing Directories with List","dc78340e":"# Change into numpy array","7be5e6a6":"# Calculating Vector Distance between Two Image","0647857f":"# Problem1-We have no labeled data. Exploring styles.csv for more info. ","82cf2f58":"> # Train,Test Division into 90:10\n> # Train,Validation Division into 90:10\n> Train, Validation, Test Percentage 80:10:10","df142d26":"# Sample printing","e8534f44":"> # Creating sequential model with three layers","15ac7fe1":"> ## Splitting done with train and test and validation set.","ecab234d":"# Starting with train and test data\n## Inserting Image and Labels in numpy array","4903e5b8":"# Normalizing by 255","0c64760e":"# CNN Model Create","967832e4":"# Recommended Items","3d59aefa":"## Successful insertion of images in the array. Also we got the labels required.","a22543b6":"# Building another dataframe with columns- image and article type","ee39fd62":"# Now we got Image and Label added in the arrays. Next will be Spliting both train and test data.","040e3dd4":"# Single Image Prediction & Find the Label of the Image","094c9011":"# Utility Function to get images and inserted into image array\n## Start and Stop parameters will be useful train and test separation\n\n## Here all X=image_data, Y=label_data","60f2486a":"# Starting Check for Similarity","1ecb5558":"# Predictions for the test data","6247b2a9":"# Image id matches with styles.csv file Id column. \n## For ease of access, adding another column naming 'id.jpg'","dce1be66":"# Adding all the images to numpy array\n> # X=Image Array\n> # Y=Image Label Array","b8cdf559":"# Load Model","620afde6":"> # Created a list with unique values And added a column with their specified element position","e0780629":"# Importing the Libraries"}}