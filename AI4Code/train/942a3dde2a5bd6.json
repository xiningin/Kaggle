{"cell_type":{"350e87ae":"code","42277a6a":"code","4a3d730f":"code","d728a43d":"code","6d7dbb9a":"code","89cee8eb":"code","7240b7c2":"code","d3133a6a":"code","5234440e":"markdown","35bac42d":"markdown","260c8b6c":"markdown","a7547741":"markdown"},"source":{"350e87ae":"import gc\nimport pickle\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import StratifiedKFold","42277a6a":"with open(\"..\/input\/tps-june-data-preprocess\/TPS_June_Dataset_Set1.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\nYtrain_oh = pd.get_dummies(train_df['target']).values\n\ndel processed_data\ngc.collect()","4a3d730f":"cat_cols = test_df.columns\ntrain_df[cat_cols] = train_df[cat_cols].astype(int)\ntest_df[cat_cols] = test_df[cat_cols].astype(int)\ncat_cols_indices = [train_df.columns.get_loc(col) for col in cat_cols]\nprint(cat_cols_indices)","d728a43d":"Xtrain = train_df.loc[:, train_df.columns != 'target'].copy()\nYtrain = train_df['target'].copy()\nYtrain_oh = pd.get_dummies(train_df['target']).copy()\nXtest = test_df.copy()\n\nprint(\"Xtrain: {} \\nYtrain: {} \\nYtrain_oh: {} \\nXtest: {}\".format(Xtrain.shape, Ytrain.shape, \n                                                                   Ytrain_oh.shape, Xtest.shape))\n\ndel train_df\ndel test_df\ngc.collect()","6d7dbb9a":"FOLD = 10\nNUM_SEED = 3\n\n# Prediction Clipping Thresholds\np_min = 0.025\np_max = 1 - p_min\n\nnp.random.seed(3)\nseeds = np.random.randint(0, 100, size=NUM_SEED)\n\noof_score = 0\ny_pred_meta_cb = np.zeros((Ytrain.shape[0], 9))\ny_pred_final_cb = np.zeros((Xtest.shape[0], 9))\ncounter = 0\n\n\nfor sidx, seed in enumerate(seeds):\n    seed_score = 0\n    \n    kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n    for idx, (train, val) in enumerate(kfold.split(Xtrain.values, Ytrain.values)):\n        counter += 1\n\n        train_x, train_y, train_y_oh = Xtrain.iloc[train], Ytrain.iloc[train], Ytrain_oh.iloc[train]\n        val_x, val_y, val_y_oh = Xtrain.iloc[val], Ytrain.iloc[val], Ytrain_oh.iloc[val]\n\n        model = CatBoostClassifier(\n            objective='MultiClass',\n            eval_metric='MultiClass',\n            num_boost_round=5000,\n            max_ctr_complexity=15,\n            od_wait=1000, \n            od_type='Iter',\n            use_best_model=True,\n            bootstrap_type='Poisson',\n            learning_rate=0.01465,\n            reg_lambda=0.01864,\n            subsample=0.68135,\n            max_depth=6, \n            min_data_in_leaf=1,\n            task_type='GPU',\n            verbose=0\n        )\n\n        model.fit(train_x, train_y, eval_set=[(val_x, val_y)], \n                  cat_features=cat_cols_indices,\n                  early_stopping_rounds=200, verbose=500)\n\n        y_pred = model.predict_proba(val_x)\n        #y_pred = np.clip(y_pred, p_min, p_max)\n        y_pred_meta_cb[val] += y_pred\n        y_pred_final_cb += model.predict_proba(Xtest)\n        \n        score = log_loss(val_y_oh, y_pred)\n        oof_score += score\n        seed_score += score\n        print(\"Seed-{} | Fold-{} | OOF Score: {}\".format(seed, idx, score))\n    \n    print(\"\\nSeed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\ny_pred_meta_cb = y_pred_meta_cb \/ float(NUM_SEED)\ny_pred_final_cb = y_pred_final_cb \/ float(counter)\noof_score \/= float(counter)\nprint(\"Aggregate OOF Score: {}\".format(oof_score))","89cee8eb":"np.savez_compressed('.\/CB_Meta_Features.npz',\n                    y_pred_meta_cb=y_pred_meta_cb, \n                    oof_score=oof_score,\n                    y_pred_final_cb=y_pred_final_cb)","7240b7c2":"#y_pred_final_cb = np.clip(y_pred_final_cb, p_min, p_max)\n\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsubmit_df = pd.DataFrame()\nsubmit_df['id'] = test_df['id']\nsubmit_df['Class_1'] = y_pred_final_cb[:,1]\nsubmit_df['Class_2'] = y_pred_final_cb[:,2]\nsubmit_df['Class_3'] = y_pred_final_cb[:,3]\nsubmit_df['Class_4'] = y_pred_final_cb[:,4]\nsubmit_df['Class_5'] = y_pred_final_cb[:,5]\nsubmit_df['Class_6'] = y_pred_final_cb[:,6]\nsubmit_df['Class_7'] = y_pred_final_cb[:,7]\nsubmit_df['Class_8'] = y_pred_final_cb[:,8]\nsubmit_df['Class_9'] = y_pred_final_cb[:,0]\nsubmit_df.head()","d3133a6a":"submit_df.to_csv(\".\/CB_submission.csv\", index=False)","5234440e":"## Create submission file","35bac42d":"## Build and validate the model","260c8b6c":"## Prepare data for model training","a7547741":"## Import libraries"}}