{"cell_type":{"8aab905c":"code","660ee747":"code","dbaa307b":"code","b1f9d593":"code","9811ae6b":"code","15cb5c6b":"code","f92d9be7":"code","3433a987":"code","94190ce1":"code","91da2c75":"code","71116631":"code","2c01bf4c":"code","1c878aa2":"code","d6a795e3":"code","ccd72df8":"code","2440669d":"code","1d621f10":"code","b380e82b":"code","6aa8acab":"code","4b5daa75":"code","c3452299":"code","70e1afb7":"code","120440e3":"code","38d53f7e":"code","48a08d71":"code","a8bea329":"code","17a462ea":"markdown","2e0c5a9e":"markdown","ac777901":"markdown","773362df":"markdown","82ec7613":"markdown","9acc868f":"markdown","53e38241":"markdown","2500bf21":"markdown","7e0f025e":"markdown","e03bc6d9":"markdown","3600708c":"markdown","4e6a65a4":"markdown","e53dfec3":"markdown","5d96da72":"markdown","21d71023":"markdown","86e4c2eb":"markdown"},"source":{"8aab905c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","660ee747":"student = pd.read_csv(\"\/kaggle\/input\/students-performance-in-exams\/StudentsPerformance.csv\")\nstudent.head()","dbaa307b":"print(student.dtypes)\nprint(student.nunique())","b1f9d593":"box1 = go.Box(\n    y=student[\"math score\"],\n    name=\"Math score distribution\"\n)\nbox2 = go.Box(\n    y=student[\"reading score\"],\n    name=\"Reading score distribution\"\n)\nbox3 = go.Box(\n    y=student[\"writing score\"],\n    name=\"Writing score distribution\"\n)\ndata= [box1, box2, box3]\n\nlayout = go.Layout(\n        title=\"Score Distribution\"\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"score-dist\")","9811ae6b":"fig, ax = plt.subplots(3,1, figsize=(10,14))\ng1 = sns.regplot(x=student['math score'], y=student['reading score'], ax=ax[0])\ng2 = sns.regplot(x=student['math score'], y=student['writing score'], ax=ax[1])\ng3 = sns.regplot(x=student['reading score'], y=student['writing score'], ax=ax[2])","15cb5c6b":"g0 = sns.countplot(x='gender', data=student, palette='hls')\ng0.set_title(\"Gender distribution\")\ng0.set_xlabel(\"Gender\")\ng0.set_ylabel(\"Count\")\nplt.show()","f92d9be7":"bar1 = go.Bar(\n    x = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().index.values,\n    y = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().values,\n    name = \" female student\"\n)\n\nbar2 = go.Bar(\n    x = student[student[\"gender\"] == 'male'][\"race\/ethnicity\"].value_counts().index.values,\n    y = student[student[\"gender\"] == 'male'][\"race\/ethnicity\"].value_counts().values,\n    name = \" male student\" \n)\n\nbar3 = go.Bar(\n    x = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().index.values,\n    y = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().values,\n    name = \" female student\"\n)\n\nbar4 = go.Bar(\n    x = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().index.values,\n    y = student[student[\"gender\"] == 'female'][\"race\/ethnicity\"].value_counts().values,\n    name = \" female student\"\n)\n\n\ndata = [bar1, bar2]\nlayout = go.Layout(\n    xaxis = dict(\n        title=\"Student Gender\"\n    ),\n    yaxis = dict(\n        title=\"Race\/Ethnicity\"\n    ),\n    title = \"Student Gender X Race\/Ethnicity\"\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"gender-bar\")","3433a987":"#gender x parental level of education\nbar1 = go.Bar(\n    x = student[student[\"gender\"]=='female'][\"parental level of education\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='female'][\"parental level of education\"].value_counts().values,\n    name='female'\n)\nbar2 = go.Bar(\n    x = student[student[\"gender\"]=='male'][\"parental level of education\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='male'][\"parental level of education\"].value_counts().values,\n    name='male'\n)\n\n#gender x lunch\nbar3 = go.Bar(\n    x = student[student[\"gender\"]=='female'][\"lunch\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='female'][\"lunch\"].value_counts().values,\n    name='female'\n)\nbar4 = go.Bar(\n    x = student[student[\"gender\"]=='male'][\"lunch\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='male'][\"lunch\"].value_counts().values,\n    name='male'\n)\n\n#gender x test preapartion\nbar5 = go.Bar(\n    x = student[student[\"gender\"]=='female'][\"test preparation course\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='female'][\"test preparation course\"].value_counts().values,\n    name='female'\n)\nbar6 = go.Bar(\n    x = student[student[\"gender\"]=='male'][\"test preparation course\"].value_counts().index.values,\n    y = student[student[\"gender\"]=='male'][\"test preparation course\"].value_counts().values,\n    name='male'\n)\n\ndata = [bar1, bar2, bar3, bar4, bar5, bar6]\n\nfig = tls.make_subplots(rows=2, cols=2,\n                        subplot_titles=('Gender Student X Parental level of education', 'Gender Student X Lunch','','Gender Student X test preparation'))\nfig.append_trace(bar1, 1,1)\nfig.append_trace(bar2, 1,1)\nfig.append_trace(bar3, 1,2)\nfig.append_trace(bar4, 1,2)\nfig.append_trace(bar5, 2,2)\nfig.append_trace(bar6, 2,2)\n\npy.iplot(fig, filename='gender-bar')","94190ce1":"math_female = student.loc[student[\"gender\"]=='female'][\"math score\"].values.tolist()\nmath_male = student.loc[student[\"gender\"]=='male']['math score'].values.tolist()\nmath_ = student['math score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = math_female,\n    histnorm = 'probability',\n    name = 'female math score'\n)\n\nhist2 = go.Histogram(\n    x = math_male,\n    histnorm = 'probability',\n    name = 'male math score'\n)\n\nhist3 = go.Histogram(\n    x = math_,\n    histnorm = 'probability',\n    name = 'math score overall'\n)\n\ndata = [hist1, hist2, hist3]\n    \nfig = tls.make_subplots(rows=2, cols=2,\n                      subplot_titles=('Female math','Male math', 'Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\n\nfig['layout'].update(showlegend=True, title='Math Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='gender-bar')","91da2c75":"female = student[student[\"gender\"]=='female']\nmale = student[student[\"gender\"]=='male']\n\nfig, ax = plt.subplots(nrows=2, figsize=(20,10))\nplt.subplots_adjust(hspace=0.4, top=1)\n\ng1 = sns.distplot(female[\"math score\"], ax=ax[0],\n                         color = 'r')\ng1 = sns.distplot(male[\"math score\"], ax=ax[0],\n                         color = 'b')\ng1.set_title(\"Math score Distribution by gender\", fontsize=15)\ng1.set_xlabel(\"Math Score\")\ng1.set_ylabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"math score\", data=student, hue=\"gender\",\n                          palette='hls', ax=ax[1])\ng2.set_title(\"Math Score Counting by gender\", fontsize=15)\ng2.set_xlabel(\"Math Score\")\ng2.set_ylabel(\"Count\")\n\nplt.show()","71116631":"Male student have higher math score than female student","2c01bf4c":"math_female = student.loc[student[\"gender\"]=='female']['reading score'].values.tolist()\nmath_male = student.loc[student[\"gender\"]=='male']['reading score'].values.tolist()\nmath_ = student['reading score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = math_female,\n    histnorm = 'probability',\n    name = 'female reading score'\n)\n\nhist2 = go.Histogram(\n    x = math_male,\n    histnorm = 'probability',\n    name = 'male reading score'\n)\n\nhist3 = go.Histogram(\n    x = math_,\n    histnorm = 'probability',\n    name = 'reading score overall'\n)\n\ndata = [hist1, hist2, hist3]\n    \nfig = tls.make_subplots(rows=2, cols=2,\n                      subplot_titles=('Female reading','Male Reading', 'Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\n\nfig['layout'].update(showlegend=True, title='Reading Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='gender-bar')","1c878aa2":"female = student[student[\"gender\"]=='female']\nmale = student[student[\"gender\"]=='male']\n\nfig, ax = plt.subplots(nrows=2, figsize=(20,10))\nplt.subplots_adjust(hspace=0.4, top=1)\n\ng1 = sns.distplot(female[\"reading score\"], ax=ax[0],\n                         color = 'r')\ng1 = sns.distplot(male[\"reading score\"], ax=ax[0],\n                         color = 'b')\ng1.set_title(\"Reading score Distribution by gender\", fontsize=15)\ng1.set_xlabel(\"Reading Score\")\ng1.set_ylabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"reading score\", data=student, hue=\"gender\",\n                          palette='hls', ax=ax[1])\ng2.set_title(\"Reading Score Counting by gender\", fontsize=15)\ng2.set_xlabel(\"Reading Score\")\ng2.set_ylabel(\"Count\")\n\nplt.show()","d6a795e3":"math_female = student.loc[student[\"gender\"]=='female']['writing score'].values.tolist()\nmath_male = student.loc[student[\"gender\"]=='male']['writing score'].values.tolist()\nmath_ = student['writing score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = math_female,\n    histnorm = 'probability',\n    name = 'female writing score'\n)\n\nhist2 = go.Histogram(\n    x = math_male,\n    histnorm = 'probability',\n    name = 'male writing score'\n)\n\nhist3 = go.Histogram(\n    x = math_,\n    histnorm = 'probability',\n    name = 'writing score overall'\n)\n\ndata = [hist1, hist2, hist3]\n    \nfig = tls.make_subplots(rows=2, cols=2,\n                      subplot_titles=('Female writing','Male writing', 'Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\n\nfig['layout'].update(showlegend=True, title='Writing Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='gender-bar')","ccd72df8":"female = student[student[\"gender\"]=='female']\nmale = student[student[\"gender\"]=='male']\n\nfig, ax = plt.subplots(nrows=2, figsize=(20,10))\nplt.subplots_adjust(hspace=0.4, top=1)\n\ng1 = sns.distplot(female[\"writing score\"], ax=ax[0],\n                         color = 'r')\ng1 = sns.distplot(male[\"writing score\"], ax=ax[0],\n                         color = 'b')\ng1.set_title(\"Writing score Distribution by gender\", fontsize=15)\ng1.set_xlabel(\"Writing Score\")\ng1.set_ylabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"writing score\", data=student, hue=\"gender\",\n                          palette='hls', ax=ax[1])\ng2.set_title(\"Writing Score Counting by gender\", fontsize=15)\ng2.set_xlabel(\"Writing Score\")\ng2.set_ylabel(\"Count\")\n\nplt.show()","2440669d":"sns.set_style(\"darkgrid\")\nfig, ax = plt.subplots(4,1, figsize=(15,15))\nplt.subplots_adjust(hspace=0.4, top=1)\n\ng1 = sns.countplot(x=\"race\/ethnicity\", data=student, ax=ax[0],\n                  palette='hls')\ng1.set_title(\"Race\/ethnicity Distribution\", fontsize=15)\ng1.set_xlabel(\"Race\/ethnicity\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)\n\ng1 = sns.countplot(x=\"parental level of education\", data=student, ax=ax[1],\n                  palette='hls', hue=\"race\/ethnicity\")\ng1.set_title(\"Race\/ethnicity Distribution X Parental Education\", fontsize=15)\ng1.set_xlabel(\"Parental level education\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)\n\n\ng2 = sns.countplot(x=\"lunch\", data=student, ax=ax[2],\n                  palette='hls', hue='race\/ethnicity')\ng2.set_title(\"Race\/ethnicity Distribution X Lunch\", fontsize=15)\ng1.set_xlabel(\"Lunch\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)\n\ng2 = sns.countplot(x=\"test preparation course\", data=student, ax=ax[3],\n                  palette='hls', hue='race\/ethnicity')\ng2.set_title(\"Race\/ethnicity Distribution X test preparation\", fontsize=15)\ng1.set_xlabel(\"Test preparation\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)","1d621f10":"math_A = student.loc[student[\"race\/ethnicity\"]=='group A'][\"math score\"].values.tolist()\nmath_B = student.loc[student[\"race\/ethnicity\"]=='group B']['math score'].values.tolist()\nmath_C = student.loc[student[\"race\/ethnicity\"]=='group C'][\"math score\"].values.tolist()\nmath_D = student.loc[student[\"race\/ethnicity\"]=='group D']['math score'].values.tolist()\nmath_E = student.loc[student[\"race\/ethnicity\"]=='group E'][\"math score\"].values.tolist()\nmath_ = student['math score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = math_A,\n    histnorm = 'probability',\n    name = 'math A score'\n)\n\nhist2 = go.Histogram(\n    x = math_B,\n    histnorm = 'probability',\n    name = 'math  B score'\n)\n\nhist3 = go.Histogram(\n    x = math_C,\n    histnorm = 'probability',\n    name = 'math C score'\n)\nhist4 = go.Histogram(\n    x = math_D,\n    histnorm = 'probability',\n    name = 'math  D score'\n)\n\nhist5 = go.Histogram(\n    x = math_E,\n    histnorm = 'probability',\n    name = 'math  E score'\n)\n\nhist6 = go.Histogram(\n    x = math_,\n    histnorm = 'probability',\n    name = 'math score overall'\n)\n\n\ndata = [hist1, hist2, hist3, hist4, hist5, hist6]\n    \nfig = tls.make_subplots(rows=3, cols=2,\n                      subplot_titles=('Math A score','Math B score', 'Math C Score', \n                                     'Math D Score', 'Math E Score', 'Math Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\nfig.append_trace(hist4, 2,2)\nfig.append_trace(hist5, 3,1)\nfig.append_trace(hist6, 3,2)\n\nfig['layout'].update(showlegend=True, title='Math Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='race-bar')","b380e82b":"read_A = student.loc[student[\"race\/ethnicity\"]=='group A'][\"reading score\"].values.tolist()\nread_B = student.loc[student[\"race\/ethnicity\"]=='group B']['reading score'].values.tolist()\nread_C = student.loc[student[\"race\/ethnicity\"]=='group C'][\"reading score\"].values.tolist()\nread_D = student.loc[student[\"race\/ethnicity\"]=='group D']['reading score'].values.tolist()\nread_E = student.loc[student[\"race\/ethnicity\"]=='group E'][\"reading score\"].values.tolist()\nread_ = student['reading score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = read_A,\n    histnorm = 'probability',\n    name = 'reading A score'\n)\n\nhist2 = go.Histogram(\n    x = read_B,\n    histnorm = 'probability',\n    name = 'reading  B score'\n)\n\nhist3 = go.Histogram(\n    x = read_C,\n    histnorm = 'probability',\n    name = 'reading C score'\n)\nhist4 = go.Histogram(\n    x = read_D,\n    histnorm = 'probability',\n    name = 'reading  D score'\n)\n\nhist5 = go.Histogram(\n    x = read_E,\n    histnorm = 'probability',\n    name = 'math  E score'\n)\n\nhist6 = go.Histogram(\n    x = read_,\n    histnorm = 'probability',\n    name = 'reading score overall'\n)\n\n\ndata = [hist1, hist2, hist3, hist4, hist5, hist6]\n    \nfig = tls.make_subplots(rows=3, cols=2,\n                      subplot_titles=('Readding A score','Reading B score', 'Reading C Score', \n                                     'Reading D Score', 'Reading E Score', 'Reading Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\nfig.append_trace(hist4, 2,2)\nfig.append_trace(hist5, 3,1)\nfig.append_trace(hist6, 3,2)\n\nfig['layout'].update(showlegend=True, title='Reading Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='race-bar')","6aa8acab":"write_A = student.loc[student[\"race\/ethnicity\"]=='group A'][\"writing score\"].values.tolist()\nwrite_B = student.loc[student[\"race\/ethnicity\"]=='group B']['writing score'].values.tolist()\nwrite_C = student.loc[student[\"race\/ethnicity\"]=='group C'][\"writing score\"].values.tolist()\nwrite_D = student.loc[student[\"race\/ethnicity\"]=='group D']['writing score'].values.tolist()\nwrite_E = student.loc[student[\"race\/ethnicity\"]=='group E'][\"writing score\"].values.tolist()\nwrite_ = student['writing score'].values.tolist()\n\nhist1 = go.Histogram(\n    x = write_A,\n    histnorm = 'probability',\n    name = 'writing A score'\n)\n\nhist2 = go.Histogram(\n    x = write_B,\n    histnorm = 'probability',\n    name = 'writing  B score'\n)\n\nhist3 = go.Histogram(\n    x = write_C,\n    histnorm = 'probability',\n    name = 'writing C score'\n)\nhist4 = go.Histogram(\n    x = write_D,\n    histnorm = 'probability',\n    name = 'writing  D score'\n)\n\nhist5 = go.Histogram(\n    x = write_E,\n    histnorm = 'probability',\n    name = 'writing  E score'\n)\n\nhist6 = go.Histogram(\n    x = write_,\n    histnorm = 'probability',\n    name = 'writing score overall'\n)\n\n\ndata = [hist1, hist2, hist3, hist4, hist5, hist6]\n    \nfig = tls.make_subplots(rows=3, cols=2,\n                      subplot_titles=('Writing A score','Writing B score', 'Writing C Score', \n                                     'Writing D Score', 'Writing E Score', 'Writing Overall'))\n\nfig.append_trace(hist1, 1,1)\nfig.append_trace(hist2, 1,2)\nfig.append_trace(hist3, 2,1)\nfig.append_trace(hist4, 2,2)\nfig.append_trace(hist5, 3,1)\nfig.append_trace(hist6, 3,2)\n\nfig['layout'].update(showlegend=True, title='Writing Score Distribuition', bargap=0.1)\npy.iplot(fig, filename='race-bar')","4b5daa75":"fig, ax = plt.subplots(2,1, figsize=(14,14))\n\ng0 = sns.countplot(x='parental level of education', data=student, ax=ax[0],\n                  palette='hls')\ng0.set_title(\"Parental level of education Distribution\")\ng0.set_xlabel(\"Parental level of education\")\ng0.set_ylabel(\"Count\")\n\ng1 = sns.countplot(x='parental level of education', data=student, ax=ax[1],\n                  palette='hls', hue='test preparation course')\ng1.set_title(\"Parental level of education X test Preparation Course\")\ng1.set_xlabel(\"Parental level of education\")\ng1.set_ylabel(\"test preparation course \")","c3452299":"fig, ax = plt.subplots(3,1 ,figsize=(14,14))\nplt.subplots_adjust(top=1, hspace=0.4)\n\ng1 = sns.boxplot(x='parental level of education',data=student, y='math score', ax=ax[0],\n                palette='hls')\ng2 = sns.boxplot(x='parental level of education', data=student, y='reading score', ax=ax[1],\n               palette='hls')\ng3 = sns.boxplot(x='parental level of education', data=student, y='writing score', ax=ax[2],\n                palette='hls')\nplt.show()","70e1afb7":"g0 = sns.countplot(x='test preparation course', data=student, palette='hls')\ng0.set_title(\"Test preparation course distribution\")\ng0.set_xlabel(\"Test preparation\")\ng0.set_ylabel(\"Count\")\nplt.show()","120440e3":"Box0 = go.Box(\n    x=student[\"test preparation course\"],\n    y=student[\"math score\"],\n    name=\"Math score x test preparation\"\n)\nBox1 = go.Box(\n    x=student[\"test preparation course\"],\n    y=student[\"reading score\"],\n    name=\"Reading score x test preparation\"\n)\nBox2 = go.Box(\n    x=student[\"test preparation course\"],\n    y=student[\"writing score\"],\n    name=\"Writing score x test preparation\"\n)\ndata = [Box0, Box1, Box2]\nfig = tls.make_subplots(rows=2, cols=2, \n                        subplot_titles=(\"Math Score Dist\",\"Reading Score Dist\",\"Writing Score Dist\"))\nfig.append_trace(Box0, 1,1)\nfig.append_trace(Box1, 1,2)\nfig.append_trace(Box2, 2,1)\n\nfig['layout'].update(height=1000, width=1200, title='Score Distribuition x Test Preparation', boxmode='group')\npy.iplot(fig, filename=\"test-box\")","38d53f7e":"fig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": student['test preparation course'],\n            \"y\": student['math score'],\n            \"legendgroup\": 'Math score',\n            \"scalegroup\": 'No',\n            \"name\": 'Math Score',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'blue'\n            }\n        },\n        \n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin\/split', validate = False)","48a08d71":"fig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": student['test preparation course'],\n            \"y\": student['reading score'],\n            \"legendgroup\": 'Reading score',\n            \"scalegroup\": 'No',\n            \"name\": 'Reading Score',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'Red'\n            }\n        },\n        \n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin\/split', validate = False)","a8bea329":"fig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": student['test preparation course'],\n            \"y\": student['writing score'],\n            \"legendgroup\": 'Writing score',\n            \"scalegroup\": 'No',\n            \"name\": 'Writing Score',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'Green'\n            }\n        },\n        \n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violingap\": 0,\n        \"violinmode\": \"overlay\"\n    }\n}\n\n\npy.iplot(fig, filename = 'violin\/split', validate = False)","17a462ea":"# 3. Parental Level of Education Columns","2e0c5a9e":"Gender X Race\/Ethnicity","ac777901":"<a id=\"Librarys\"><\/a> <br>\n# **1. Import Librarys and Dataset:** \n- Importing Librarys\n- Importing Dataset\n- Looking Dataset","773362df":"# 1. Gender Column","82ec7613":"In writing , female student have higher score","9acc868f":"# 4. Test Preparation Course Columns","53e38241":"There are more female students than male students","2500bf21":"Let's look for the data types and unique variable","7e0f025e":"In reading score , female student have higher score","e03bc6d9":"<a id=\"Librarys\"><\/a> <br>\n# **2. OK, Lets, do visualization !** ","3600708c":"# Second , I will explore correlation between columns","4e6a65a4":"Lets Look the student score by gender","e53dfec3":"Welcome to my first kernel ! This is my first project, vote if you like, thanks.","5d96da72":"Gender X other columns","21d71023":"# First , I will do some exploration the math score, reading score, and writing score","86e4c2eb":"# 2. Race\/ethnicity Columns"}}