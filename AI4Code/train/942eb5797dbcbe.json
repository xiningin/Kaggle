{"cell_type":{"61132d9c":"code","6202f4dc":"code","fb5191cf":"code","2e422c49":"code","301d0917":"code","01d00b7d":"code","f7486275":"code","90ff9cac":"code","04728626":"code","fc67ec0b":"code","3276ee0f":"code","2a990a23":"code","f23a8b67":"markdown","69024e42":"markdown","1b66a313":"markdown","90534d8e":"markdown","d0a31781":"markdown","17736fcf":"markdown","9d5a9c08":"markdown","4b74428a":"markdown","3b7dc2fd":"markdown","fa996412":"markdown","6dca3863":"markdown","48e9f3e5":"markdown","cae4aa57":"markdown","1c83a054":"markdown","9c778357":"markdown","3315c8f4":"markdown","a0db993d":"markdown","6362fb33":"markdown"},"source":{"61132d9c":"# import halite helpers for the game, and the rest for the profiler\nfrom kaggle_environments import evaluate, make\nfrom kaggle_environments.envs.halite.helpers import *\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\nfrom heapq import nlargest\nfrom matplotlib import cm","6202f4dc":"# Game Profiler Claass\nclass GameProfiler:\n    \"\"\"\n    Logs higher level statistics for the game to be examined \n    after the game is finished.\n\n    Items tracked for self and opponents:\n        - Total halite at each turn\n        - Ship Actions and Halite\n        - Shipyard Actions\n    \"\"\"\n\n    def __init__(self):\n        self.gamelog = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: defaultdict(dict))))\n        # up to five level of keys dict[one][two][three][four][five]\n\n    def take_snapshot(self,BOARD,print_board=False):\n        if print_board:\n            print('Step:',BOARD.observation['step'])\n            print(BOARD.current_player.next_actions)        \n            print(BOARD)\n\n        for player_id,player in BOARD.players.items():\n            player_id = \"p\" + str(player_id) \n            \n            self.gamelog[player_id]['player'][BOARD.observation['step']]['total_halite'] = player.halite\n            for ship in player.ships:\n                self.gamelog[player_id]['ship'][ship.id][BOARD.observation['step']]['action'] = ship.next_action\n                self.gamelog[player_id]['ship'][ship.id][BOARD.observation['step']]['halite'] = ship.halite\n            for yard in BOARD.current_player.shipyards:\n                self.gamelog[player_id]['yard'][yard.id][BOARD.observation['step']] ['action'] = yard.next_action","fb5191cf":"def profiler_to_panda(shiplog):\n\n    halite_stats = pd.DataFrame(index=range(0,len(shiplog['p0']['player'].keys())))\n    game_steps = list(halite_stats.index)\n\n    for player, player_vars in shiplog.items():\n        #print('name:',player)\n        halite = player_vars['player']\n        ships = player_vars['ship']\n        yards = player_vars['yard']\n        # obtain halite over steps\n        hal = list()\n        for step,h in halite.items():\n            hal.append(h['total_halite'])\n            #print('step: {} halite: {}'.format(step,h['total_halite']))\n        halite_stats[player] = hal\n        # obtain ship halite per steps\n        for shipname, shipstats in ships.items():\n            s = list()\n            #print('name: {}'.format(shipname))\n            for stp in game_steps:\n                if stp in shipstats:\n                    s.append(shipstats[stp]['halite'])\n                else:\n                    s.append(None)\n            halite_stats[player+\"-\"+shipname] = s\n\n    return halite_stats, list(PROFILER.gamelog.keys())\n","2e422c49":"# plotting game profile\n\nplayer_maps =['cool','summer','autumn','winter']\ndef plot_game(halite_stats,players,agent_names=[]):\n\n    num_subplots = len(players) + 1\n    fig, ax = plt.subplots(num_subplots,figsize=(12,2*num_subplots), sharex=True)\n\n    for col in range(0,len(players)):\n        cmap = plt.get_cmap(player_maps[col])\n        ax[0].plot(halite_stats.loc[:, players[col]],color=cmap(0),label=players[col])\n    ax[0].set_ylabel('Total Halite')\n    ax[0].legend(loc='upper left',title='Agents')\n    ax[0].set_title('Game Profiler')\n\n\n    ship_names = list(halite_stats.columns.difference(players))\n    for x in range(0,len(players)):\n\n        cols = [name for name in ship_names if name.startswith(players[x])]\n        cmap = plt.get_cmap(player_maps[x])\n        colors = [cmap(i) for i in np.linspace(0, .7, len(cols))]\n        for col in range(0,len(cols)):\n            ax[x+1].plot(halite_stats.loc[:, cols[col]],color=colors[col])\n        ymax = halite_stats.loc[:, cols].max().max()\n        for col in range(0,len(cols)):\n            startship = halite_stats[halite_stats[cols[col]] == np.min(halite_stats.loc[:, cols[col]])].index.values[0]\n            ax[x+1].vlines(startship, 0, ymax, colors=colors[col], linestyles='dashed',alpha=.2)\n        agent_name = \"\"\n        if len(agent_names) == len(players):\n            agent_name = \": \" + agent_names[x]\n        ax[x+1].text(0.01, 0.92, '{}{}\\nShips: {}'\\\n            .format(players[x],agent_name,len(cols)), horizontalalignment='left', \n        verticalalignment='top', transform=ax[x+1].transAxes)\n        ax[x+1].set_ylabel('Ship Halite')\n        if x == len(players)-1:\n            ax[x+1].set_xlabel('Game Steps')","301d0917":"# Returns best direction to move from one position (fromPos) to another (toPos)\n# Example: If I'm at pos 0 and want to get to pos 55, which direction should I choose?\ndef getDirTo(fromPos, toPos, size):\n    fromX, fromY = divmod(fromPos[0],size), divmod(fromPos[1],size)\n    toX, toY = divmod(toPos[0],size), divmod(toPos[1],size)\n    if fromY < toY: return ShipAction.NORTH\n    if fromY > toY: return ShipAction.SOUTH\n    if fromX < toX: return ShipAction.EAST\n    if fromX > toX: return ShipAction.WEST\n\n# Directions a ship can move\ndirections = [ShipAction.NORTH, ShipAction.EAST, ShipAction.SOUTH, ShipAction.WEST]\n\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nSTARTED_SHIP_STATES = {}\n\n# Returns the commands we send to our ships and shipyards\ndef getting_started_agent(obs, conf):\n    size = conf.size\n    board = Board(obs, conf)\n    me = board.current_player\n\n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n\n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n    \n    for ship in me.ships:\n        if ship.next_action == None:\n            \n            ### Part 1: Set the ship's state \n            if ship.halite < 200: # If cargo is too low, collect halite\n                STARTED_SHIP_STATES[ship.id] = \"COLLECT\"\n            if ship.halite > 500: # If cargo gets very big, deposit halite\n                STARTED_SHIP_STATES[ship.id] = \"DEPOSIT\"\n                \n            ### Part 2: Use the ship's state to select an action\n            if STARTED_SHIP_STATES[ship.id] == \"COLLECT\":\n                # If halite at current location running low, \n                # move to the adjacent square containing the most halite\n                if ship.cell.halite < 100:\n                    neighbors = [ship.cell.north.halite, ship.cell.east.halite, \n                                 ship.cell.south.halite, ship.cell.west.halite]\n                    best = max(range(len(neighbors)), key=neighbors.__getitem__)\n                    ship.next_action = directions[best]\n            if STARTED_SHIP_STATES[ship.id] == \"DEPOSIT\":\n                # Move towards shipyard to deposit cargo\n                direction = getDirTo(ship.position, me.shipyards[0].position, size)\n                if direction: ship.next_action = direction\n                \n    PROFILER.take_snapshot(board)            \n    return me.next_actions\n","01d00b7d":"PROFILER = GameProfiler()\nenv = make(\"halite\", debug=True,configuration={'episodeSteps': 200,'width':10})\nagent_count = 2\nenv.reset(agent_count);\nenv.run([getting_started_agent,\"random\"])\nhalite_stats, players = profiler_to_panda(PROFILER.gamelog)\nnames = [\"getting_started_agent\", \"random\"]\nplot_game(halite_stats,players,agent_names=names)\n#env.render(mode=\"ipython\", width=400, height=300)\n","f7486275":"PROFILER = GameProfiler()\nenv = make(\"halite\", debug=True)\nenv.reset();\nenv.run([getting_started_agent,\"random\",\"random\",\"random\"])\nhalite_stats, players = profiler_to_panda(PROFILER.gamelog)\nnames = [\"getting_started_agent\", \"random 1\",\"random 2\",\"random 3\"]\nplot_game(halite_stats,players,agent_names=names)","90ff9cac":"## GLOBAL VARIABLES\n\naction_for_direction = {\n    (1,0): ShipAction.EAST,\n    (-1,0):ShipAction.WEST,\n    (0,1): ShipAction.NORTH,\n    (0,-1):ShipAction.SOUTH,\n    (0,0): None \n}\n\n# Directions a ship can move\nPOINT_DIRECTIONS = [(0,1),(1,0),(0,-1),(-1,0)]\nALL_DIRECTIONS = [(1,0),(-1,0),(0,1),(0,-1),(0,0)]\nOPPOSITE_DIRECTION = {(1,0):(-1,0), (-1,0):(1,0), (0,1):(0,-1), (0,-1):(0,1)}\n\n# Will keep track of whether a ship is collecting halite or carrying cargo to a shipyard\nMY_SHIP_STATES = defaultdict(dict)\nFULL_SHIP = 600\nMAX_SHIPS = 3\nGOALS = set()\n\ndef add_and_normalize(a, b, size):\n    ax, ay = a\n    bx, by = b\n    return ((ax + bx) % size, (ay + by)% size)\n\ndef manhattan_on_donut(start, end, size ):\n    dx = np.min([ abs(start[0] - end[0]), size - abs(end[0] - start[0]) ])\n    dy = np.min([ abs(start[1] - end[1] ), size - abs(end[1] - start[1]) ])\n\n    dir_x = np.argmin([abs( start[0] - end[0]), size - abs( end[0] - start[0] ) ])\n    dir_y = np.argmin([ abs( start[1] - end[1] ), size - abs( end[1] - start[1] ) ])\n    return dx, dy, dir_x, dir_y\n\n\ndef get_halite_goal(num_ships,BOARD):\n    # find the top num_ship cells with most halite\n    most_halite = nlargest(num_ships+1, BOARD.cells.values(), key=lambda x: x.halite)\n    # return the position of the first one that isn't already a goal\n    for cell in most_halite:\n        if not cell.position in GOALS:\n            return cell.position\n        \ndef direction_between(start, end, size):\n\n    def check_for_opposite(check,direction):\n        if check == 1:\n            return OPPOSITE_DIRECTION[direction]\n        else:\n            return direction\n    \n    if start == end:\n        return (0,0) # same point, stay there\n\n    dx, dy, dir_x, dir_y = manhattan_on_donut(start,end,size)  \n    if dx > dy:\n        # move in x direction\n        if start[0] - end[0] < 0:  \n            return check_for_opposite(dir_x,(1,0)) # maybe move right\n        else:\n            return check_for_opposite(dir_x,(-1,0)) # maybe move left\n    else:\n        # move in y direction\n        if start[1] - end[1] < 0:\n            return check_for_opposite(dir_y,(0,1)) # maybe move up\n        else:\n            return check_for_opposite(dir_y,(0,-1)) # maybe move down\n    \n\n######## AGENT STARTS HERE ################################\ndef mine_most_halite(obs, conf):\n    size = conf.size\n    BOARD = Board(obs, conf)\n    me = BOARD.current_player\n\n    # positions that my ships shouldn't go (i.e., other shipyard, my ship there)\n    RESERVED_POSITIONS = set()\n    for opponent in BOARD.opponents:\n        for yard in opponent.shipyards:\n            RESERVED_POSITIONS.add(yard.position)\n\n    # remove dead ship goals\n    my_ship_ids = set(MY_SHIP_STATES.keys())\n    live_ship_ids = set(me.ship_ids)\n    dead_ids = my_ship_ids - live_ship_ids\n    for id in dead_ids:\n        shipgoal = MY_SHIP_STATES[id]['GOAL']\n        GOALS.discard(shipgoal)\n        MY_SHIP_STATES.pop(id)\n\n    # SHIP AND SHIPYARD SPAWNING\n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n    elif len(me.shipyards) > 0 and len(me.ships) < MAX_SHIPS:\n        if me.shipyards[0].cell.ship_id == None:\n            me.shipyards[0].next_action = ShipyardAction.SPAWN\n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n    \n    for ship in me.ships:\n        if ship.next_action == None:\n\n            ## Step 0: if the ship is new, add action and goal\n            if not ship.id in MY_SHIP_STATES.keys():\n                MY_SHIP_STATES[ship.id]['ACTION'] = 'FIND'\n                MY_SHIP_STATES[ship.id]['GOAL'] = get_halite_goal(len(me.ship_ids),BOARD)\n\n            ### Step 1: Potentially update goals\n            at_goal = ship.position == MY_SHIP_STATES[ship.id]['GOAL']\n            current_action = MY_SHIP_STATES[ship.id]['ACTION']\n            \n            if at_goal:\n                if current_action == 'FIND':\n                    MY_SHIP_STATES[ship.id]['ACTION'] = 'COLLECT'\n                    GOALS.discard(MY_SHIP_STATES[ship.id]['GOAL'])\n                    MY_SHIP_STATES[ship.id]['GOAL'] = (-1,-1)\n\n                elif current_action == 'DEPOSIT':\n                    MY_SHIP_STATES[ship.id]['ACTION'] = 'FIND'\n                    MY_SHIP_STATES[ship.id]['GOAL'] = get_halite_goal(len(me.ship_ids),BOARD)\n                    GOALS.add(MY_SHIP_STATES[ship.id]['GOAL'])\n            else:\n                if ship.halite > FULL_SHIP: # If cargo gets very big, deposit halite\n                    MY_SHIP_STATES[ship.id]['ACTION'] = \"DEPOSIT\"\n                    # TODO: account for more than one shipyard!\n                    if me.shipyards[0]:\n                        MY_SHIP_STATES[ship.id]['GOAL'] = me.shipyards[0].position\n\n                \n            ### Step 2: Use the ship's state to select an action\n            next_move = (0,0)\n            # if FIND or DEPOSIT, move towards GOAL\n            if MY_SHIP_STATES[ship.id]['ACTION'] == 'FIND' or \\\n                        MY_SHIP_STATES[ship.id]['ACTION'] == 'DEPOSIT': \n                next_move = direction_between(ship.position,MY_SHIP_STATES[ship.id]['GOAL'],size) \n            # if COLLECT, mine or find local maximal halite\n            if MY_SHIP_STATES[ship.id]['ACTION'] == \"COLLECT\":\n                # If halite at current location running low, \n                # move to the adjacent square containing the most halite\n                if ship.cell.halite < 100:\n                    neighbors = [ship.cell.north.halite, ship.cell.east.halite, \n                                 ship.cell.south.halite, ship.cell.west.halite]\n                    best = max(range(len(neighbors)), key=neighbors.__getitem__)\n                    next_move = POINT_DIRECTIONS[best]    \n\n            ## Part 3: avoid collisions\n            next_position = add_and_normalize(ship.position,next_move,size)\n            if next_position in RESERVED_POSITIONS:\n                keyset = set(action_for_direction.keys())\n                keyset.remove(next_move)\n                keylist = list(keyset)\n                next_move = keylist[np.random.choice(len(keylist))]\n\n            RESERVED_POSITIONS.add(next_position)\n            ship.next_action = action_for_direction[next_move]\n\n    return me.next_actions","04728626":"PROFILER = GameProfiler()\nenv = make(\"halite\", debug=True)\nenv.reset();\nenv.run([getting_started_agent,mine_most_halite,\"random\",\"random\"])\nhalite_stats, players = profiler_to_panda(PROFILER.gamelog)\nnames = [\"getting_started_agent\", \"mine_most_halite\",\"random 1\",\"random 2\"]\nplot_game(halite_stats,players,agent_names=names)","fc67ec0b":"MEAN_SHIP_STATES = defaultdict(dict)\nFULL_MEAN_SHIP = 300\nMAX_MEAN_SHIPS = 4\nMEAN_GOALS = set()\n\ndef get_ship_locations(BOARD):\n    player_halite = list()\n    o_ship = list()\n    halite = list()\n    position = list()\n    for opponent in BOARD.opponents:\n        for ship in opponent.ships:\n            player_halite.append(opponent.halite)\n            o_ship.append(ship.id)\n            halite.append(ship.halite)\n            position.append(ship.position)\n\n    other_ships = pd.DataFrame(data={'player_halite':player_halite,'ship':o_ship,'halite':halite,'position':position})\n    return other_ships\n\ndef get_ship_distance(other_ships, ship,size):\n\n    def get_distance(o_pos,s_pos):\n        dx, dy, _, _ = manhattan_on_donut(s_pos,o_pos,size)\n        return dx + dy\n\n    if len(other_ships) == 0:\n        return other_ships\n    else:\n        dists = list()\n        for other_pos in other_ships['position']:\n            dists.append(get_distance(other_pos,ship.position))\n        other_ships[ship.id] = dists\n        return other_ships\n\ndef get_goal_ship(other_ships,ship):\n    if len(other_ships) == 0:\n        return None, None\n    else:\n        #other_ships.sort_values(['player_halite',ship.id, 'halite'], ascending=[False,True, False],inplace=True)\n        other_ships.sort_values([ship.id, 'halite'], ascending=[True, False],inplace=True)\n        for x in range(0,len(other_ships)):\n            if other_ships.loc[x]['halite'] > ship.halite:\n                if not other_ships.loc[x]['ship'] in MEAN_GOALS:\n                    MEAN_GOALS.add(other_ships.loc[x]['ship'])\n                    return other_ships.loc[x]['position'], other_ships.loc[x]['ship']\n        return None, None\n\ndef agressive_agent(obs, conf):\n    size = conf.size\n    BOARD = Board(obs, conf)\n    me = BOARD.current_player\n\n    # positions that my ships shouldn't go (i.e., other shipyard, my ship there)\n    RESERVED_POSITIONS = set()\n    for opponent in BOARD.opponents:\n        for yard in opponent.shipyards:\n            RESERVED_POSITIONS.add(yard.position)\n\n    # get other ships and locations\n    other_ships = get_ship_locations(BOARD)\n\n    # remove dead ship goals\n    # if my ship died\n    my_ship_ids = set(MEAN_SHIP_STATES.keys())\n    live_ship_ids = set(me.ship_ids)\n    dead_ids = my_ship_ids - live_ship_ids\n    for id in dead_ids:\n        shipgoal = MEAN_SHIP_STATES[id]['GOAL_SHIP']\n        MEAN_GOALS.discard(shipgoal)\n        MEAN_SHIP_STATES.pop(id)\n    # if other ship died\n    for id in list(MEAN_GOALS):\n        if id not in other_ships['ship']:\n            MEAN_GOALS.discard(id)\n\n    # SHIP AND SHIPYARD SPAWNING\n    # If there are no ships, use first shipyard to spawn a ship.\n    if len(me.ships) == 0 and len(me.shipyards) > 0:\n        me.shipyards[0].next_action = ShipyardAction.SPAWN\n    elif len(me.shipyards) > 0 and len(me.ships) < MAX_MEAN_SHIPS:\n        if me.shipyards[0].cell.ship_id == None:\n            me.shipyards[0].next_action = ShipyardAction.SPAWN\n    # If there are no shipyards, convert first ship into shipyard.\n    if len(me.shipyards) == 0 and len(me.ships) > 0:\n        me.ships[0].next_action = ShipAction.CONVERT\n    \n    for ship in me.ships:\n        if ship.next_action == None:\n\n            # Step -1: find distances\n            other_ships = get_ship_distance(other_ships,ship,size)\n\n            ## Step 0: if the ship is new, add action and goal\n            if not ship.id in MEAN_SHIP_STATES.keys():\n                MEAN_SHIP_STATES[ship.id]['ACTION'] = 'HUNT'\n                goal_pos, goal_ship = get_goal_ship(other_ships,ship)\n                MEAN_SHIP_STATES[ship.id]['GOAL_POS'] = goal_pos\n                MEAN_SHIP_STATES[ship.id]['GOAL_SHIP'] = goal_ship\n                if not goal_ship == None:\n                    MEAN_GOALS.add(goal_ship)\n\n            ### Step 1: Potentially update goals\n            at_goal = False\n            if MEAN_SHIP_STATES[ship.id]['GOAL_POS']:\n                at_goal = ship.position == MEAN_SHIP_STATES[ship.id]['GOAL_POS']\n\n            if at_goal:\n                # if caught ship or deposited, hunt\n                MEAN_SHIP_STATES[ship.id]['ACTION'] = 'HUNT'\n                goal_pos, goal_ship = get_goal_ship(other_ships,ship)\n                MEAN_SHIP_STATES[ship.id]['GOAL_POS'] = goal_pos\n                MEAN_SHIP_STATES[ship.id]['GOAL_SHIP'] = goal_ship\n            else:\n                if ship.halite > FULL_MEAN_SHIP: # If cargo gets very big, deposit halite\n                    MEAN_SHIP_STATES[ship.id]['ACTION'] = \"DEPOSIT\"\n                    # TODO: account for more than one shipyard!\n                    MEAN_SHIP_STATES[ship.id]['GOAL_POS'] = me.shipyards[0].position\n                    MEAN_SHIP_STATES[ship.id]['GOAL_SHIP'] = None\n                elif not MEAN_SHIP_STATES[ship.id]['GOAL_POS'] or \\\n                            not MEAN_SHIP_STATES[ship.id]['GOAL_SHIP'] in MEAN_GOALS:\n                    # if no previous goal, or is ship is gone, new goals\n                    goal_pos, goal_ship = get_goal_ship(other_ships,ship)\n                    MEAN_SHIP_STATES[ship.id]['GOAL_POS'] = goal_pos\n                    MEAN_SHIP_STATES[ship.id]['GOAL_SHIP'] = goal_ship\n                else:\n                    # update location of goal\n                    goal_ship = MEAN_SHIP_STATES[ship.id]['GOAL_SHIP']\n                    newloc = other_ships['position'][other_ships['ship'] == goal_ship].values[0]\n                    MEAN_SHIP_STATES[ship.id]['GOAL_POS'] = newloc\n                    #print('updating position')\n\n                \n            ### Step 2: Use the ship's state to select an action\n            next_move = (0,0)\n            # if DEPOSIT, move towards GOAL\n            if MEAN_SHIP_STATES[ship.id]['ACTION'] == 'DEPOSIT':  \n                next_move = direction_between(ship.position,MEAN_SHIP_STATES[ship.id]['GOAL_POS'],size)  \n            # if COLLECT, mine or find local maximal halite\n            if MEAN_SHIP_STATES[ship.id]['ACTION'] == \"HUNT\":\n                # if no one to hunt, wander\n                if not MEAN_SHIP_STATES[ship.id]['GOAL_POS']:\n                    idx = np.random.choice(len(POINT_DIRECTIONS))\n                    next_move = POINT_DIRECTIONS[idx]\n                else:\n                    next_move = direction_between(ship.position,MEAN_SHIP_STATES[ship.id]['GOAL_POS'],size)  \n                \n            ## Part 3: avoid collisions\n            neighbor = ship.position\n            next_position = add_and_normalize(ship.position,next_move,size)\n            if next_position in RESERVED_POSITIONS:\n                neighbors = set([ship.cell.north.position, ship.cell.east.position, \n                            ship.cell.south.position, ship.cell.west.position])\n                neighbors = neighbors - RESERVED_POSITIONS\n                neighbors.discard(me.shipyards[0].position)\n                if len(neighbors) > 0:\n                    neighbors = list(neighbors)\n                    choice = np.random.choice(len(neighbors))\n                    neighbor = neighbors[choice]\n                next_move = direction_between(ship.position,neighbor,size)\n                next_position = add_and_normalize(ship.position,next_move,size)\n\n            RESERVED_POSITIONS.add(next_position)\n            ship.next_action = action_for_direction[next_move]\n\n    return me.next_actions","3276ee0f":"PROFILER = GameProfiler()\nenv = make(\"halite\", debug=True)\nenv.reset();\nenv.run([getting_started_agent,mine_most_halite,agressive_agent,\"random\"])\nhalite_stats, players = profiler_to_panda(PROFILER.gamelog)\nnames = [\"getting_started_agent\", \"mine_most_halite\",\"agressive_agent\",\"random\"]\nplot_game(halite_stats,players,agent_names=names)","2a990a23":"\nenv.render(mode=\"ipython\", width=400, height=300)","f23a8b67":"The upgraded agent is generally much more effective at mining, because it actively searches for cells with a lot of halite.","69024e42":"## Plotting the game profile\n\nThis code will create a figure for 2-4 players. The individual ships are plotted in different colors from the colormap. \\","1b66a313":"Since the location of the halite is randomly generated, the game will be different each time. On the top figure, the total halite across time is plotted. It goes down whenever a ship is converted into a shipyard, or a ship is generated from a yard. Typically, the \"random\" agent spawns a bunch of ships at the beginning, causing the total halite to decrease. The getting started agent will mine halite, and then return to the shipyard when it has reached a threshold. If the halite is placed closer to the starting point, it will mine and deposit in rapid succession. However, if the halite happens to be a bit farther away, it will mine more slowly.\n\nLet's see what a full sized game (4 agents, 21 grid size) looks like with the getting started and random agents.","90534d8e":"# Targeted Halite Search","d0a31781":"To profile the game, we first create the profiler, and then make the halite environment. Here, I've created a shorter game (200 steps) on a smaller board (10 instead of 21 squares). I find it useful to debug on smaller games if I'm looking for specific actions. After the game is run and the dataframe is generated, the figure is generated. Pass the names of the agents so you can know which player is which.","17736fcf":"# Halite Game Profiler","9d5a9c08":"## Transforming the dict to a pandas\nAfter the game has finish, the dictionary is transformed into a pandas dataframe for plotting. Click to show. ","4b74428a":"This kernel provides a way to visualize Halite games based on the halite per player, and halite per ship. This allows you to troubleshoot the performance of an agent without having to watch the whole game on the game field. \n\n![Halite Game Profiler](https:\/\/i.imgur.com\/0A7C9VU.png)\n\nHere I profile the trajectories of 4 different agents:\n- getting started agent: an elegant agent that collects and deposits halite. Lovely simplicity.\n- mine most halite: using multiple ships, finds cells with the most halite, collects and returns. Slightly more complex.\n- agressive agent: attacks other ships to gain halite, then returns to the shipyard. Rather mean.\n- random: goes willy-nilly and helter-skelter. Not so effective.\n\nBecause I want to focus on the patterns, I have most of the code hidden in this kernel. Click the 'Show' button on the right hand side below the text to see it. Let's get started!","3b7dc2fd":"Let's see how the intensional collisions fare as a strategy.","fa996412":"# Game Profiler\n\nGame data is collected in a dictionary because it is difficult to know beforehand how many game steps, players, and ships will be used. I used a default dict, and stored statistics about the players (the total amount of halite) and the ships (amount of halite) for each game step. Although I'm collecting action and shipyard data, that isn't being used in the version 2 kernel.","6dca3863":"For the last test agent, I wanted to code something with a different behavior rely on stealing the other agent's halite. This agent has a ship as a goal (instead of a cell position), and only intentionally gains halite through collisions. When two ships collide, the ship with the smaller amount of halite receives the halite from the ship with more cargo. \n\nClick to see code.","48e9f3e5":"I wanted to create an agent to improve on the getting started agent. I included the following upgrades:\n- contains more than one ship, which required a system to avoid collisions\n- assigned ships to travel to cells with the most halite\n- navigation can account for the doughnut playing space\n\nThis is still a fairly small agent, but it required more components due to the upgrades. Click show to see the code.","cae4aa57":"# Agressive Agent","1c83a054":"I assigned the 'mine most halite' aged to have three ships, so I was hoping it would get a lot more halite than the 'getting started' agent. ","9c778357":"In this game, we can see that the agressive agent ships remain at zero, jump up when they hit a ship, and then return to zero when the halite is deposited.\n\nI find that if there is something strange in the profile, it can help to use the ipython graphical display, and then go to the step where it's being weird. ","3315c8f4":"## Thanks for looking!\n\nPlease let me know if you found this kernel useful, and if you'd like me to document the agent code more to explain what is going on. ","a0db993d":"## Getting started Agent\nClick to view code","6362fb33":"# Let's profile\n\nFor the first example, we'll use the \"getting started agent\" and the \"random\" agent. The getting started agent is copied from the kaggle kernel, with one change. The line\n\n    PROFILER.take_snapshot(board)\nis added right before the agent actions are returned. \n "}}