{"cell_type":{"937fd9f0":"code","84bc4d4a":"code","4000b699":"code","a97988ad":"code","50ed104e":"code","2e480e8b":"code","cfd601e7":"code","14e444c8":"code","cec05523":"code","be535184":"code","c71789e8":"code","4b101437":"code","b9c2f722":"code","9d528a33":"code","51210891":"code","44396592":"code","e99b346a":"code","aa3337a6":"code","5a81aa3c":"code","acf905ad":"code","78d7c793":"code","73633a32":"code","e872b385":"code","30c56e53":"code","83b1b403":"code","e4163556":"code","6fddbd02":"code","22771327":"code","208135d7":"code","ba3ae1f7":"code","39155a18":"markdown","d1008525":"markdown","b08d9ee7":"markdown","2b9d06ab":"markdown","bd0753a9":"markdown","b22fceb9":"markdown","f7f45710":"markdown","84b25f2e":"markdown","0b11f111":"markdown","4dfd05ab":"markdown","c2173b0f":"markdown","effa9dc8":"markdown","a529ba2c":"markdown","fb700152":"markdown","a9adec89":"markdown","0db22c4c":"markdown"},"source":{"937fd9f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","84bc4d4a":"data=pd.read_csv('..\/input\/model-trap\/train.csv')\ndatatest= pd.read_csv('..\/input\/model-trap\/train.csv')","4000b699":"data.head(10)","a97988ad":"data.isnull()","50ed104e":"data['income'].max()","2e480e8b":"data['income'].mean()","cfd601e7":"data['income'].median()","14e444c8":"fig, ax = plt.subplots(figsize=(8,4))\nax.scatter(data['income'], data['Unnamed: 0'])\nax.set_xlabel('income')\nplt.show()","cec05523":"# import numpy as np; np.random.seed(0)\nimport seaborn as sns\ncor= data.corr()\nax = sns.heatmap(cor, cmap=\"YlGnBu\")","be535184":"data['default'].value_counts()","c71789e8":"import matplotlib.pyplot as plt; plt.rcdefaults()\nimport numpy as np\nimport matplotlib.pyplot as plt\nx= ['True','False']\ny_pos = np.arange(len(val))\nplt.bar(y_pos, val, align='center', alpha=0.5)\nplt.xticks(y_pos,x)\nplt.title('Defaulter')\nplt.show()","4b101437":"data.describe()","b9c2f722":"data.columns","9d528a33":"data['label'] = ['1' if star == True else '0' for star in data['default']];\ndata","51210891":"cols = [0,3,11,12,13]\ndata.drop(data.columns[cols],axis=1,inplace=True)\ndata.head()","44396592":"data.columns","e99b346a":"datanew=pd.get_dummies(data)\ndatanew","aa3337a6":"X=datanew.iloc[:,0:9]\nY=datanew['label_1']","5a81aa3c":"datatest= pd.read_csv('..\/input\/model-trap\/test.csv')\ndatatest","acf905ad":"datatest.columns","78d7c793":"cols = [0,1,4,11,14]\ndatatest.drop(datatest.columns[cols],axis=1,inplace=True)\ndatatest.head()","73633a32":"datatest.columns","e872b385":"datatest['label'] = ['1' if star == True else '0' for star in datatest['default']];\ndatatest","30c56e53":"cols = [9]\ndatatest.drop(datatest.columns[cols],axis=1,inplace=True)\ndatatest.head()","83b1b403":"datatestnew=pd.get_dummies(datatest)\ndatatestnew","e4163556":"Xtest = datatestnew.iloc[:,:9]\nYtest = datatestnew['label_1']","6fddbd02":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(X,Y)\nmodel.score(X,Y)\npredicted= model.predict(Xtest)","22771327":"from sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(Ytest, predicted))\nprint('\\n')\nprint(classification_report(Ytest, predicted))\nmodel.score(X,Y)","208135d7":"from sklearn.ensemble import GradientBoostingClassifier\nmodel1= GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\nmodel1.fit(X,Y)\npredicted= model1.predict(Xtest)","ba3ae1f7":"from sklearn.metrics import confusion_matrix, classification_report\nprint(confusion_matrix(Ytest, predicted))\nprint('\\n')\nprint(classification_report(Ytest, predicted))\nmodel1.score(X,Y)","39155a18":"*Checking Co-relating for input-output Variable*","d1008525":"*Encoding Data using Dummies Encoding : Pandas*","b08d9ee7":"*Checking for Outliears*","2b9d06ab":"*Encoding Data using Dummies Encoding :pandas*","bd0753a9":"**Training Data-Set**","b22fceb9":"*Counting Total Number of Defaulter*","f7f45710":"*Checking Null Values*","84b25f2e":"*Adding Label*","0b11f111":"**Logistic Regression**","4dfd05ab":"**Gradient Boosting  Classifier**","c2173b0f":"**Test Data-Set**","effa9dc8":"**Confusion Matrix**","a529ba2c":"**Confusion Matrix**","fb700152":"*Adding Label*","a9adec89":"*Removing Unneccesary Columns*","0db22c4c":"*Removing Unnecessary Columns*"}}