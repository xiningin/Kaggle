{"cell_type":{"3fe8a13f":"code","ea3e8a51":"code","11e87642":"code","9fd47c71":"code","8844ff07":"code","c7be916c":"code","b69d3111":"code","7013b8aa":"code","1d8dec14":"code","1e40e67c":"code","17badba8":"code","1e6a2083":"code","d6fd96bd":"code","53840f28":"code","1fcaab8d":"code","8fb3e970":"code","47b19c75":"code","1bd71366":"code","5ef52712":"code","69080bd3":"code","55a304c9":"code","374b23f9":"code","51c4edf6":"code","205ce705":"code","2504c207":"code","48bdab58":"code","625013fb":"code","47060a71":"code","c20ad004":"code","e490a38e":"code","fddb7035":"code","159f141f":"code","47429b13":"code","c1ed009d":"code","0d2ed16f":"code","d1bbb94c":"code","1437139f":"code","2e390897":"code","940634ff":"code","94c3e994":"code","53bde773":"code","f8473f31":"code","3a5fd024":"code","2869bfc9":"code","3fe41659":"code","af2776c0":"code","9358d3e3":"code","3aab5212":"code","22583b47":"code","613b5876":"code","81f6f291":"code","37fd4761":"code","a9f2484b":"code","a9bb5720":"code","c52864cf":"code","42dd12b2":"code","fb19f5ea":"code","546e6047":"code","558adb47":"code","a1ff66e4":"code","6cc7a749":"code","0a52b2bc":"code","c630acc8":"code","556a868e":"code","e613e804":"code","a876238f":"code","791a0a34":"code","2db35674":"code","3b9dde73":"code","8626bb65":"code","f4659e87":"code","26870777":"code","a9745c50":"code","47fad028":"code","d960b9f5":"code","0eced197":"code","2ba667e4":"code","b035c240":"markdown","d2cf40d2":"markdown","f763f8ab":"markdown","66a4044b":"markdown","a6817d75":"markdown","10a5a087":"markdown","bab2844f":"markdown","e6844486":"markdown"},"source":{"3fe8a13f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea3e8a51":"import seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\ntrain=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain","11e87642":"test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","9fd47c71":"train.info()","8844ff07":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n","c7be916c":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n#Check the graphic again\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","b69d3111":"Nl=round(train.isnull().mean()*100,2)\nNl[Nl>0]","7013b8aa":"Nl=round(test.isnull().mean()*100,2)\nNl[Nl>0]","1d8dec14":"datasets=[train,test]","1e40e67c":"col=[\"Alley\",\"PoolQC\",\"Fence\",\"MiscFeature\",\"Id\"]\ntrain=train.drop(columns=col,axis=1)\ntest=test.drop(columns=col,axis=1)","17badba8":"train[(train[\"MasVnrType\"]!=train[\"MasVnrType\"]) & (train[\"MasVnrArea\"]==train[\"MasVnrArea\"])]","1e6a2083":"train[(train[\"BsmtQual\"]!=train[\"BsmtQual\"]) & (train[\"BsmtCond\"]==train[\"BsmtCond\"])]","d6fd96bd":"train[(train[\"BsmtQual\"]!=train[\"BsmtQual\"]) & (train[\"BsmtFinType1\"]==train[\"BsmtFinType1\"])]","53840f28":"train[\"MasVnrType\"].mode()","1fcaab8d":"train[\"BsmtQual\"]=train[\"BsmtQual\"].fillna(train[\"BsmtQual\"].mode())\ntrain[\"BsmtQual\"].unique()\ntrain[\"BsmtQual\"].mode()","8fb3e970":"train[\"LotFrontage\"]=train[\"LotFrontage\"].fillna(round(train[\"LotFrontage\"].mean(),0))\ntrain[\"LotArea\"]=train[\"LotArea\"].fillna(round(train[\"LotArea\"].mean(),0))\ntrain[\"MasVnrType\"]=train[\"MasVnrType\"].fillna(train[\"MasVnrType\"].mode()[0])\ntrain[\"MasVnrArea\"]=train[\"MasVnrArea\"].fillna(train[\"MasVnrArea\"].mean())\ntrain[\"BsmtQual\"]=train[\"BsmtQual\"].fillna(train[\"BsmtQual\"].mode()[0])\ntrain[\"BsmtCond\"]=train[\"BsmtCond\"].fillna(train[\"BsmtCond\"].mode()[0])\ntrain[\"BsmtExposure\"]=train[\"BsmtExposure\"].fillna(train[\"BsmtExposure\"].mode()[0])\ntrain[\"BsmtFinType1\"]=train[\"BsmtFinType1\"].fillna(train[\"BsmtFinType1\"].mode()[0])\ntrain[\"BsmtFinType2\"]=train[\"BsmtFinType2\"].fillna(\"NA\")\ntrain[\"Electrical\"]=train[\"Electrical\"].fillna(train[\"Electrical\"].mode()[0])\ntrain[\"FireplaceQu\"]=train[\"FireplaceQu\"].fillna(\"Unknown\")\ntrain[\"GarageType\"]=train[\"GarageType\"].fillna(train[\"GarageType\"].mode()[0])\ntrain[\"GarageYrBlt\"]=train[\"GarageYrBlt\"].fillna(round(train[\"GarageYrBlt\"].mean(),0))\ntrain[\"GarageFinish\"]=train[\"GarageFinish\"].fillna(train[\"GarageFinish\"].mode()[0])\ntrain[\"GarageQual\"]=train[\"GarageQual\"].fillna(train[\"GarageQual\"].mode()[0])\ntrain[\"GarageCond\"]=train[\"GarageCond\"].fillna(train[\"GarageCond\"].mode()[0])\n\n","47b19c75":"train.info()","1bd71366":"t = pd.DataFrame(data={\"col\": train.dtypes.index, \"type\": train.dtypes}).reset_index(drop=True)\ncol_names = t[\"col\"][t.type != \"object\"]\ncol_names","5ef52712":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nfig = plt.figure(figsize=(12,12))\n\nax = fig.add_subplot(1,1,1)\ncax = ax.matshow(train.corr(), interpolation = 'nearest')\n\nfig.colorbar(cax)\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(1))\nax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n\nax.set_xticklabels(col_names)\nax.set_yticklabels(col_names);","69080bd3":"def correlation(dataset, threshold):\n    col_corr = set() # Set of all the names of deleted columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if ((corr_matrix.iloc[i, j] >= threshold) or (corr_matrix.iloc[i, j] <= -threshold)) and (corr_matrix.columns[j] not in col_corr):\n                colname = corr_matrix.columns[i] # getting the name of column\n                col_corr.add(colname)\n                if colname in dataset.columns and colname!='SalePrice':\n                    del dataset[colname] # deleting the column from the dataset\n    print(dataset)\n    plt.figure(figsize=(12,12))\n    sns.heatmap(dataset.corr(), annot=False)\n    plt.show()\n        ","55a304c9":"correlation(train,0.7)","374b23f9":"train.info()","51c4edf6":"train.describe()","205ce705":"sns.distplot(train['SalePrice']);","2504c207":"\n\nplt.xlim(-100, 500)\nsns.boxplot(x=train.LotFrontage)","48bdab58":"train=train[train.LotFrontage<200]","625013fb":"sns.boxplot(x=train.LotArea)","47060a71":"train=train[train.LotArea<100000]","c20ad004":"sns.boxplot(x=train.YearBuilt)","e490a38e":"\nsns.boxplot(x=train.MasVnrArea)","fddb7035":"def MasVnrarea(x):\n    if(x<100):\n        return \"low\"\n    elif(x>=100 and x <=500):\n        return \"mid\"\n    else:\n        return \"high\"","159f141f":"train.MasVnrArea=train.MasVnrArea.apply(lambda x: MasVnrarea(x))\ntest.MasVnrArea=test.MasVnrArea.apply(lambda x: MasVnrarea(x))\ntrain.MasVnrArea","47429b13":"sns.countplot(x=\"MasVnrArea\",data=train)","c1ed009d":"sns.countplot(x=\"MasVnrArea\",data=test)","0d2ed16f":"\nsns.boxplot(x=train.BsmtFinSF1)","d1bbb94c":"train=train[train.BsmtFinSF1<2500]","1437139f":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])","2e390897":"train.info()","940634ff":"sns.distplot(train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)","94c3e994":"sns.distplot(train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['GrLivArea'], plot=plt)","53bde773":"sns.distplot(np.log1p(train['GrLivArea']), fit=norm);\nfig = plt.figure()\nres = stats.probplot(np.log1p(train['GrLivArea']), plot=plt)","f8473f31":"train['GrLivArea']=np.log1p(train['GrLivArea'])","3a5fd024":"sns.distplot(train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(train['TotalBsmtSF'], plot=plt)","2869bfc9":"train['TotalBsmtSF']=np.log1p(train['TotalBsmtSF'])","3fe41659":"sns.distplot((train[train['TotalBsmtSF']>0].TotalBsmtSF), fit=norm);\nfig = plt.figure()\nres = stats.probplot((train[train['TotalBsmtSF']>0].TotalBsmtSF), plot=plt)","af2776c0":"df_train=pd.get_dummies(train)\ndf_train","9358d3e3":"y_train = train.SalePrice.values","3aab5212":"df_train","22583b47":"X=df_train.drop(\"SalePrice\",axis=1)\nX","613b5876":"y=train.SalePrice\ny","81f6f291":"for col in test.columns:\n    if( col not in train.columns):\n        test=test.drop(col,axis=1)\n        ","37fd4761":"for col in test.columns:\n    if(test[col].dtype=='O'):\n        test[col]=test[col].fillna(test[col].mode()[0])\n    else:\n        test[col]=test[col].fillna(round(test[col].mean(),0))\ntest1=pd.get_dummies(test)","a9f2484b":"for col in X.columns:\n    if(col not in test1.columns) :\n        test1[col]=0\n        print(col)\n","a9bb5720":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split,cross_val_predict\nfrom xgboost.sklearn import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom yellowbrick.model_selection import RFECV","c52864cf":"n_folds = 5\ndef rmsle_cv(model):\n    kf = StratifiedKFold(n_folds, shuffle=True, random_state=42).get_n_splits(df_train.values)\n    rmse= np.sqrt(-cross_val_score(model, X.values, y, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)\n","42dd12b2":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nscore=rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","fb19f5ea":"xgb1 = XGBRegressor()\nparameters = { #when use hyperthread, xgboost may become slower\n              'objective':['reg:linear'],\n              'learning_rate': [.03,.05], #so called `eta` value\n              'max_depth': [5,10,50],\n              'min_child_weight': [4,10],\n              'silent': [1],\n              'subsample': [0.7],\n              'colsample_bytree': [0.7],\n              'n_estimators': [500,1000,2000],\n            'random_state':[5]\n                }\n\nxgb_grid = GridSearchCV(xgb1,\n                        parameters,\n                        cv = 5,\n                        n_jobs = -1,                        \n                        verbose=True)\nxgb_grid.fit(X,y)\n\nprint(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)","546e6047":"test2=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","558adb47":"xgb2=XGBRegressor(n_estimators=1000,learning_rate=.03,colsample_bytree=.7,max_depth=5,min_child_weight=4,objective=\"reg:linear\",subsample=.7)\nxgb2.fit(X,y)\ntest3=test1.reindex(columns=X.columns.tolist())\nfinal=xgb2.predict(test3)\nfinal=np.exp(final)\noutput = pd.DataFrame({'Id': test2.Id, 'SalePrice': final})\noutput.to_csv('HousingPrices_XGB.csv', index=False)","a1ff66e4":"rf = RandomForestRegressor()\nparameters = {'bootstrap': [True],\n                 'max_depth': [10, 50, 70],\n                 'max_features': ['sqrt'],\n                 'min_samples_leaf': [10, 20, 4],\n                 'min_samples_split': [5, 10],\n                 'n_estimators': [500,1000,2000],\n                 'random_state':[5]\n                }\n\nrf_grid = GridSearchCV(rf,\n                        parameters,\n                        cv = 5,\n                        n_jobs = -1,\n                        scoring=\"neg_mean_squared_error\",\n                        verbose=True)\nrf_grid.fit(X,y)\n\nprint(rf_grid.best_score_)\nprint(rf_grid.best_params_)","6cc7a749":"\nmodel_param={\n    'RFR':{\n        'model':RandomForestRegressor(),\n        'param':{'bootstrap': [True, False],\n                 'max_depth': [10, 50, 60, 70],\n                 'max_features': ['auto', 'sqrt'],\n                 'min_samples_leaf': [1, 2, 4],\n                 'min_samples_split': [2, 5, 10],\n                 'n_estimators': [500,1000,2000]\n                }\n    },\n    'Logistic Regression':{\n        'model':LogisticRegression(),\n        'param':{\n            'C':[5,10,100]\n        }\n    }\n    \n}","0a52b2bc":"scores=[]\n\nfor model_name,mp in model_param.items():\n    clf=GridSearchCV(mp['model'],mp['param'],cv=5, return_train_score=False,scoring=\"neg_mean_squared_error\")\n    clf.fit(X,y)\n    scores.append({\n        'model':model_name,\n        'best_score':clf.best_score_,\n        'best_params': clf.best_params_\n    })\n\npd.dataframe(scores)","c630acc8":"scores=[]\n\nfor model_name,mp in model_param.items():\n    clf=RandomizedSearchCV(mp['model'],mp['param'],cv=5, return_train_score=False)\n    clf.fit(X,y)\n    scores.append({\n        'model':model_name,\n        'best_score':clf.best_score_,\n        'best_params': clf.best_params_\n    })\n\npd.dataframe(scores)\nscores","556a868e":"output = pd.DataFrame({'Id': test2.Id, 'SalePrice': final})\noutput.to_csv('HousingPrices_submission.csv', index=False)","e613e804":"output","a876238f":"GBoost.fit(X,y)","791a0a34":"pred=GBoost.predict(test1)","2db35674":"for col in X.columns:\n    if col not in test1.columns:\n        print(col)","3b9dde73":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","8626bb65":"col_names=(X.columns).tolist()\ncol_names","f4659e87":"test3=test2.reindex(columns=col_names)","26870777":"X.columns","a9745c50":"test1.columns","47fad028":"final1=xg_reg.predict(test3)\nfinal1=np.exp(final1)\noutput = pd.DataFrame({'Id': test2.Id, 'SalePrice': final1})\noutput.to_csv('HousingPrices_submission2.csv', index=False)\noutput","d960b9f5":"xg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)","0eced197":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(y_test, preds))\nrmse","2ba667e4":"xg_reg.predict(test1)","b035c240":"similarly BsmtQual and BsmtFinType1 are Null whenever BmstCond is Null from the below two code lines","d2cf40d2":"# Hyper Parameter Tuning","f763f8ab":"# Gradient Boosting","66a4044b":"## Dealing with Outliers","a6817d75":"Dopping Alley, PoolQc ,Fence, MiscFeature because of missing values(>70%)","10a5a087":"Filling the null columns","bab2844f":"This code shows that both the MasVnrArea and MasVnrtype is missed together","e6844486":"# XGBoost"}}