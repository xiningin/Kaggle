{"cell_type":{"42ae9338":"code","4d49cbd2":"code","989fe399":"code","8a3db27a":"code","21eae561":"code","6b96054e":"code","b0d07cd7":"code","b181ce63":"code","b47336f5":"code","7b59da78":"code","eac40d32":"code","34cf9fce":"code","84499742":"code","f3e531f6":"markdown","0428348c":"markdown","43281e73":"markdown","6b812c01":"markdown","a2797503":"markdown"},"source":{"42ae9338":"!nvidia-smi","4d49cbd2":"# Asthetics\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)\n\n# General\nfrom IPython.display import display\nfrom tqdm.auto import tqdm\nimport pandas as pd\nimport numpy as np\nimport os\nimport glob\nimport random\nimport gc\ngc.enable()\npd.set_option('display.max_columns', None)\n\n# Utils\nfrom sklearn import preprocessing\n# Deep Learning\nimport tensorflow as tf\nfrom tensorflow import keras\n# Metrics\nfrom sklearn.metrics import mean_absolute_error\n\n# Random Seed Initialize\nRANDOM_SEED = 42\n\ndef seed_everything(seed=RANDOM_SEED):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything()","989fe399":"data_dir = '..\/input\/ventilator-pressure-prediction'\ntrain_file_path = os.path.join(data_dir, 'train.csv')\ntest_file_path = os.path.join(data_dir, 'test.csv')\nsample_sub_file_path = os.path.join(data_dir, 'sample_submission.csv')\n\nmodels_dir = '..\/input\/google-brain-ventilator-tf-lstm-models\/50_Features'\n\nprint(f'Train file: {train_file_path}')\nprint(f'Test file: {test_file_path}')\nprint(f'Sample Sub file: {sample_sub_file_path}')","8a3db27a":"train_df = pd.read_csv(train_file_path)\ntest_df = pd.read_csv(test_file_path)\nsub_df = pd.read_csv(sample_sub_file_path)","21eae561":"display(test_df.head())\nprint(test_df.shape)","6b96054e":"all_pressure = np.sort(train_df.pressure.unique())\nPRESSURE_MIN = all_pressure[0].item()\nPRESSURE_MAX = all_pressure[-1].item()\nPRESSURE_STEP = ( all_pressure[1] - all_pressure[0] ).item()","b0d07cd7":"# From https:\/\/www.kaggle.com\/tenffe\/finetune-of-tensorflow-bidirectional-lstm\ndef add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    return df","b181ce63":"train_df = add_features(train_df)\ntest_df = add_features(test_df)\n\ndisplay(test_df.head())\nprint(test_df.shape)","b47336f5":"train_df.drop(['id', 'pressure', 'breath_id'], axis=1, inplace=True)\ntest_df = test_df.drop(['id', 'breath_id'], axis=1)\n\nscaler = preprocessing.RobustScaler()\ntrain_df = scaler.fit_transform(train_df)\ntest_df = scaler.transform(test_df)\n\ndel train_df\ngc.collect()\n\nX_test = test_df.reshape(-1, 80, test_df.shape[-1])","7b59da78":"predicted_labels = []\nfor model_name in glob.glob(models_dir + '\/*.h5'):\n    print(model_name)\n    model = tf.keras.models.load_model(model_name)\n    predictions = model.predict(X_test).squeeze().reshape(-1, 1).squeeze()\n    predicted_labels.append(predictions)\n    \n    del model\n    gc.collect()","eac40d32":"sub_df['pressure'] = sum(predicted_labels)\/(len(glob.glob(models_dir + '\/*.h5')))\ndisplay(sub_df.head())\nsub_df.to_csv('submission_mean.csv', index=False)","34cf9fce":"# From https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153\nsub_df['pressure'] = np.median(np.vstack(predicted_labels),axis=0)*.75+np.mean(np.vstack(predicted_labels),axis=0)*.25\ndisplay(sub_df.head())\nsub_df.to_csv('submission_median.csv', index=False)","84499742":"# From https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153\nsub_df['pressure'] = np.round((sub_df.pressure - PRESSURE_MIN)\/PRESSURE_STEP ) * PRESSURE_STEP + PRESSURE_MIN\nsub_df.pressure = np.clip(sub_df.pressure, PRESSURE_MIN, PRESSURE_MAX)\ndisplay(sub_df.head())\nsub_df.to_csv('submission.csv', index=False)","f3e531f6":"# Imports","0428348c":"# Prediction","43281e73":"# Acknowledgement\n### Thanks to [@cdeotte](https:\/\/www.kaggle.com\/cdeotte) for sharing [this](https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153) great finding. Surely helped increase my score.","6b812c01":"# GPU Info","a2797503":"# Feature Engineering"}}