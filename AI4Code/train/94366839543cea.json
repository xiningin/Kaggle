{"cell_type":{"eaeef360":"code","ed94cabd":"code","a2b4e665":"code","957b57a0":"code","6fd9ee27":"code","405d604a":"code","01529c51":"code","b3b43136":"code","2bd85da1":"code","c15da86d":"code","3389aac3":"code","04649f8a":"code","dee0dd7d":"code","591bd1c2":"code","698d551e":"code","42b53fcb":"code","3e021e76":"code","6791ba19":"code","428f3d79":"code","7799105e":"code","52f3cb2c":"code","1f74585d":"code","16eca257":"code","2a38af20":"code","99382a3d":"code","0f06e136":"code","79286361":"code","33697bb7":"code","cf97b910":"code","252a7668":"code","f33e33e5":"code","2edc1da4":"code","faa9960d":"code","b58ccfab":"code","c7c8eba8":"code","a16921fe":"code","e61d1783":"code","4d71a29e":"code","3b807002":"code","0428d48f":"code","d974495e":"code","82adc0cf":"code","c0f6675f":"code","918ae826":"code","4df4c997":"code","aca5888a":"code","2ad8e636":"code","41a952b7":"code","90fe5477":"code","f4aff182":"code","dfa5e8f9":"code","d854a673":"code","ca9730b8":"code","8f176789":"code","b370f3f4":"code","de554632":"code","42a12ce4":"code","8567c9cc":"code","1010071d":"code","9f02fbdb":"code","a7538715":"code","5ea1aa65":"code","43a4ecdd":"code","aa7f0eed":"code","eef17ea9":"code","f1531289":"code","8ed12fa2":"code","47d30b2a":"code","4bacba8b":"code","4bd424cf":"code","bcad2f4b":"code","09a4f1b4":"code","c286b59b":"code","69f9bb80":"code","9598a9d7":"code","b6f767d5":"code","d6fbaca8":"code","615f5504":"code","21dac586":"code","197f8b13":"code","47bbba87":"code","a680863f":"code","ff1a00eb":"code","f439421e":"code","bbeb7402":"code","2e86c06b":"code","36158124":"code","fcf9b4c1":"code","ed1d427e":"code","4d829cff":"markdown","fe98e78c":"markdown"},"source":{"eaeef360":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import xticks\nfrom scipy.stats import skew\nimport seaborn as sns\nimport os\nimport warnings\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings('ignore')\n# Any results you write to the current directory are saved as output.","ed94cabd":"metadata = pd.read_csv('..\/input\/Metadata.txt', sep='\\t')","a2b4e665":"metadata","957b57a0":"data = pd.read_csv('..\/input\/Data.csv', encoding = 'ISO-8859-1')","6fd9ee27":"data.head()","405d604a":"data.Series.unique()","01529c51":"top3 = data[(data.Winner.isin(['Federer R.', 'Nadal R.', 'Djokovic N.'])) | (data.Loser.isin(['Federer R.', 'Nadal R.', 'Djokovic N.']))]\ntop3 = top3[['Date', 'Winner', 'Loser', 'WRank', 'LRank']]","b3b43136":"top3_w = top3[top3.Winner.isin(['Federer R.', 'Nadal R.', 'Djokovic N.'])]\ntop3_l = top3[top3.Loser.isin(['Federer R.', 'Nadal R.', 'Djokovic N.'])]\n\ntop3_w = top3_w[['Date', 'Winner', 'WRank']]\ntop3_l = top3_l[['Date', 'Loser', 'LRank']]","2bd85da1":"top3_w.columns = ['Date','Player','Rank']\ntop3_l.columns = ['Date','Player', 'Rank']","c15da86d":"top3 = pd.concat([top3_w, top3_l], sort=False)\ntop3['Date'] = pd.to_datetime(top3.Date, format='%d\/%m\/%Y')\ntop3 = top3.sort_values(['Date'])","3389aac3":"top3.Rank = top3.Rank.astype(int)\n\n# Remove outline Ranks\ntop3 = top3[top3.Rank < 100]","04649f8a":"federer = top3[top3.Player == 'Federer R.']\nnadal = top3[top3.Player == 'Nadal R.']\ndjokovic = top3[top3.Player == 'Djokovic N.']","dee0dd7d":"fig = plt.figure(figsize=(12,8))\nsns.lineplot(x='Date', y='Rank', data=federer)\nsns.lineplot(x='Date', y='Rank', data=nadal)\nsns.lineplot(x='Date', y='Rank', data=djokovic)\nfig.legend(bbox_to_anchor=(-0.2, 0.8, 1., 0), labels=['Federer','Nadal','Djokovic'])\nt=fig.suptitle('Rank Evolution for the Big 3')","591bd1c2":"# Let's zoom on the top 10 \nfig = plt.figure(figsize=(18,10))\nsns.lineplot(x='Date', y='Rank', data=federer[federer.Rank <=10])\nsns.lineplot(x='Date', y='Rank', data=nadal[nadal.Rank <=10])\nsns.lineplot(x='Date', y='Rank', data=djokovic[djokovic.Rank <=10])\nfig.legend(bbox_to_anchor=(-0.2, 0.8, 1., 0), labels=['Federer','Nadal','Djokovic'])\nt=fig.suptitle('Rank Evolution for the Big 3 in the top 10')","698d551e":"# 2005 : First French Open for Nadal (N\u00b03)\n# 2004 : Federer won Australian Open and became N\u00b01\n# 2009 : Nadal injured, lost early in French Open and Wimbledon\n# 2011 : Djokovic won 3 Grand Slams\n# 2014 : Federer injured\n# 2013 and 2016 : Nadal injured","42b53fcb":"# Grand Slams titles for the Big 3","3e021e76":"slams = data[['Date','Tournament','Series', 'Round', 'Winner']]","6791ba19":"slams = slams[(slams.Series == 'Grand Slam') & (slams.Round == 'The Final')]","428f3d79":"slams = slams[slams.Winner.isin(['Federer R.', 'Nadal R.', 'Djokovic N.'])]","7799105e":"slams.head()","52f3cb2c":"slams['Titles'] = slams.groupby('Winner').cumcount().astype(int) + 1\nslams['Date'] = pd.to_datetime(slams.Date, format='%d\/%m\/%Y')\nslams = slams.sort_values(['Date'])\nslams.head()","1f74585d":"federer_slams = slams[slams.Winner == 'Federer R.']\nnadal_slams = slams[slams.Winner == 'Nadal R.']\ndjokovic_slams = slams[slams.Winner == 'Djokovic N.']","16eca257":"fig = plt.figure(figsize=(15,8))\nsns.lineplot(x='Date', y='Titles', data=federer_slams)\nsns.lineplot(x='Date', y='Titles', data=nadal_slams)\nsns.lineplot(x='Date', y='Titles', data=djokovic_slams)\nfig.legend(bbox_to_anchor=(-0.2, 0.8, 1., 0), labels=['Federer','Nadal','Djokovic'])\nt=fig.suptitle('Slams Evolution for the Big 3')","2a38af20":"# Grand Slams Wins per Rank","99382a3d":"slams_winners = data[['Series', 'Round', 'WRank']]","0f06e136":"slams_winners = slams_winners[(slams_winners.Series == 'Grand Slam') & (slams_winners.Round == 'The Final')]","79286361":"slams_winners.WRank = slams_winners.WRank.astype(int)","33697bb7":"slams_winners","cf97b910":"fig = plt.figure(figsize=(15,8))\nsns.distplot(slams_winners.WRank)","252a7668":"# Very rare after the 20th place\nfig = plt.figure(figsize=(15,8))\nsns.distplot(slams_winners.WRank[slams_winners.WRank <=10])","f33e33e5":"rank_prob_win = round(slams_winners.groupby('WRank')['Series'].count()\/len(slams_winners),4)*100","2edc1da4":"top3_prob_win = rank_prob_win[1] + rank_prob_win[2] + rank_prob_win[3]\nprint(\"You have %s%% chances to win a Grand Slam if you are in the top 3\" %top3_prob_win)","faa9960d":"num1 = data[['Winner', 'Loser', 'WRank', 'LRank']]\nnum1 = num1[(num1.WRank != 'NR') & (num1.LRank != 'NR')]\nnum1 = num1.dropna()\nnum1['WRank'] = num1['WRank'].astype(int)\nnum1['LRank'] = num1['LRank'].astype(int)\nnum1 = num1[(num1.WRank == 1) | (num1.LRank == 1)]","b58ccfab":"num1_w = num1[num1.WRank == 1]['Winner']\nnum1_l = num1[num1.LRank == 1]['Loser']\nnum1_w.columns = ['Player']\nnum1_l.columns = ['Player']\nnum1 = pd.concat([num1_w, num1_l], sort=False)\n\nnum1 = num1.drop_duplicates()\nprint('Since 2000, there were %s Number 1 players' % num1.count())","c7c8eba8":"# Upset in Grand Slam","a16921fe":"slams = data[data.Series == 'Grand Slam']","e61d1783":"slams.head()","4d71a29e":"upset = slams[['Tournament', 'Series', 'Round', 'AvgW', 'AvgL']]","3b807002":"upset = upset.dropna()","0428d48f":"upset.head()","d974495e":"round(upset.groupby('Tournament')['AvgW'].mean(),3)","82adc0cf":"# Wimbledon is the Grand Slam with the best upsets","c0f6675f":"round(upset.groupby('Round')['AvgW'].mean(),3)","918ae826":"# There are more upset in Finals","4df4c997":"# Set losed per Grand Slams","aca5888a":"sets = slams[['Tournament', 'Series', 'Round', 'Wsets', 'Lsets']]\nsets = sets.dropna()","2ad8e636":"round(sets.groupby('Tournament')['Lsets'].mean(),3)","41a952b7":"# French Open is the tournament where player lose the less sets","90fe5477":"round(sets.groupby(['Round'])['Lsets'].mean(),3)","f4aff182":"# As expected, players lose more sets when they advanced in the tournament (the players have a better level)","dfa5e8f9":"# Grand Slam wins during period","d854a673":"wins = slams[['Tournament', 'Round', 'Winner']]\nwins = wins[wins.Round == 'The Final']","ca9730b8":"wins.head()","8f176789":"winners = wins.groupby('Winner')['Tournament'].count()","b370f3f4":"winners = winners.reset_index()","de554632":"winners = winners.sort_values(['Tournament'], ascending=False)\nwinners","42a12ce4":"plt.figure(figsize=(15,8))\n\ng = sns.barplot(x=winners.Winner, y=winners.Tournament)\ng.set_xticklabels(labels = winners.Winner,  rotation=90)\nplt.title('Grand Slams won since 2000')\nplt.show()","8567c9cc":"winners_slam = wins.groupby(['Winner', 'Tournament']).count()\nwinners_slam = winners_slam.reset_index()\n# winners_slam = winners_slam.sort_values(['Winner'], ascending=False)\nwinners_slam.columns = ['Winner','Tournament', 'Count']\nwinners_slam","1010071d":"winners_slam = winners_slam.dropna()","9f02fbdb":"fig = plt.figure(figsize=(15,8))\n\ng = sns.catplot(x=\"Winner\", y=\"Count\", hue = \"Tournament\", data=winners_slam, kind=\"bar\", size=6, aspect=2)\ng.set_xticklabels(labels = winners_slam.Winner.unique(),  rotation=90)\nplt.title('Grand Slams won since 2000')\nplt.show()","a7538715":"# Nadal loves on surface","5ea1aa65":"# Best players on surface","43a4ecdd":"surface = data[['Surface', 'Winner', 'Loser']]","aa7f0eed":"surface_w = surface[['Surface', 'Winner']]\nsurface_l = surface[['Surface', 'Loser']]\nsurface_w.columns = ['Surface', 'Player']\nsurface_l.columns = ['Surface', 'Player']","eef17ea9":"surface_w['idx'] = range(1, len(surface_w) + 1)\nsurface_l['idx'] = range(1, len(surface_l) + 1)","f1531289":"surface_w = surface_w.groupby(['Surface', 'Player']).count()\nsurface_w = surface_w.reset_index()\nsurface_w.columns = ['Surface', 'Player', 'Count_Win']\n\nsurface_l = surface_l.groupby(['Surface', 'Player']).count()\nsurface_l = surface_l.reset_index()\nsurface_l.columns = ['Surface', 'Player', 'Count_Lose']","8ed12fa2":"surface = pd.merge(surface_w, surface_l, on=['Surface', 'Player'])","47d30b2a":"surface['total_play'] = surface['Count_Win'] + surface['Count_Lose']","4bacba8b":"surface['perc_win'] = round(surface['Count_Win'] \/ surface['total_play'],4)*100","4bd424cf":"surface = surface[surface.total_play > 50]","bcad2f4b":"surface.sort_values(by='perc_win', ascending=False).head(30)","09a4f1b4":"surface.Surface.unique()","c286b59b":"# Best player on Clay\n\ntop_Clay = surface[surface.Surface == 'Clay'].sort_values(by='perc_win', ascending = False).head(10)\ng=sns.catplot(x='Player', y='perc_win', data=top_Clay, kind='bar', size=6, aspect=2)\nt=g.set_xticklabels(labels = top_Clay.Player,  rotation=90)\ntitle=plt.title('Best players on Clay')","69f9bb80":"# Best player on Grass\n\ntop_Grass = surface[surface.Surface == 'Grass'].sort_values(by='perc_win', ascending = False).head(10)\ng=sns.catplot(x='Player', y='perc_win', data=top_Grass, kind='bar', size=6, aspect=2)\nt=g.set_xticklabels(labels = top_Grass.Player,  rotation=90)\ntitle=plt.title('Best players on Grass')","9598a9d7":"# Best player on Hard\n\ntop_Hard = surface[surface.Surface == 'Hard'].sort_values(by='perc_win', ascending = False).head(10)\ng=sns.catplot(x='Player', y='perc_win', data=top_Hard, kind='bar', size=6, aspect=2)\ng.set_xticklabels(labels = top_Hard.Player,  rotation=90)\ntitle=plt.title('Best players on Hard')","b6f767d5":"# Best percentage overall\n\ncareer = data[['Winner', 'Loser']]\n\ncareer_w = data[['Winner']]\ncareer_l = data[['Loser']]\ncareer_w.columns = ['Player']\ncareer_l.columns = ['Player']\n\ncareer_w['idx'] = range(1, len(career_w) + 1)\ncareer_l['idx'] = range(1, len(career_l) + 1)\n\ncareer_w = career_w.groupby('Player').count()\ncareer_w = career_w.reset_index()\ncareer_w.columns = ['Player', 'Count_Win']\n\ncareer_l = career_l.groupby('Player').count()\ncareer_l = career_l.reset_index()\ncareer_l.columns = ['Player', 'Count_Lose']\n\ncareer = pd.merge(career_w, career_l, on='Player')\n\ncareer['total_play'] = career['Count_Win'] + career['Count_Lose']\ncareer['perc_win'] = round(career['Count_Win'] \/ career['total_play'],4)*100\n\ncareer = career[career.total_play > 500]\n\ncareer = career.sort_values(by='perc_win', ascending=False).head(20)\ncareer","d6fbaca8":"g=sns.catplot(x='Player', y='perc_win', data=career, kind='bar', size=7, aspect=2)\ng.set_xticklabels(labels = career.Player,  rotation=90)\ntitle=plt.title('Best players overall since 2000')","615f5504":"surface_top3 = surface[(surface.Player.isin(['Federer R.', 'Nadal R.', 'Djokovic N.'])) & (surface.Surface != 'Carpet')]\nsurface_top3","21dac586":"surface_top3 = pd.pivot_table(surface_top3, values='perc_win', columns=['Surface'], index=['Player'])\nsurface_top3.index.names\n# surface_top3.columns = ['Player', 'Clay', 'Grass', 'Hard']","197f8b13":"surface_top3[surface_top3.index == \"Federer R.\"]","47bbba87":"# Radar chart for Surface\n%matplotlib inline\n\nlabels = np.array(['Clay', 'Grass', 'Hard'])\nfederer = surface_top3.loc[surface_top3[surface_top3.index == \"Federer R.\"].index[0],labels].values","a680863f":"federer = surface_top3.loc[surface_top3[surface_top3.index == \"Federer R.\"].index[0],labels].values\nnadal = surface_top3.loc[surface_top3[surface_top3.index == \"Nadal R.\"].index[0],labels].values\ndjokovic = surface_top3.loc[surface_top3[surface_top3.index == \"Djokovic N.\"].index[0],labels].values","ff1a00eb":"wins_top3 = pd.DataFrame([federer, nadal, djokovic])\nwins_top3.columns = ['Clay', 'Grass', 'Hard']\nwins_top3['Player'] = ['Federer R.', 'Nadal R.', 'Djokovic N.']\nwins_top3 = wins_top3[['Player', 'Clay', 'Grass', 'Hard']]","f439421e":"federer = np.concatenate((federer,[federer[0]]))\nnadal = np.concatenate((nadal,[nadal[0]]))\ndjokovic = np.concatenate((djokovic,[djokovic[0]]))","bbeb7402":"angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)\n\n# close the plot\nangles=np.concatenate((angles,[angles[0]]))","2e86c06b":"fig = plt.figure(figsize=(20,10))\nax1 = fig.add_subplot(111, polar=True)\nax1.plot(angles, federer, 'o-', linewidth=2, label = 'Federer')\nax1.fill(angles, federer, alpha=0.25)\nax1.set_thetagrids(angles * 180\/np.pi, labels)\nax1.grid(True)\n\nax2 = fig.add_subplot(111, polar=True)\nax2.plot(angles, nadal, 'o-', linewidth=2, label = 'Nadal')\nax2.fill(angles, nadal, alpha=0.25)\nax2.set_thetagrids(angles * 180\/np.pi, labels)\nax2.grid(True)\n\nax3 = fig.add_subplot(111, polar=True)\nax3.plot(angles, djokovic, 'o-', linewidth=2, label = 'Djokovic')\nax3.fill(angles, djokovic, alpha=0.25)\nax3.set_thetagrids(angles * 180\/np.pi, labels)\nax3.grid(True)\n\nl=plt.legend(bbox_to_anchor=(1.1,1))","36158124":"wins_top3['mean_surface'] = wins_top3.iloc[:, 1:].sum(axis=1) \/3","fcf9b4c1":"wins_top3.sort_values(by='mean_surface', ascending=False)","ed1d427e":"# The most complete player is Djokovic","4d829cff":"# Evolution rank of Federer, Nadal and Djokovic","fe98e78c":"# Big Three Comparison : Federer vs Nadal vs Djokovic"}}