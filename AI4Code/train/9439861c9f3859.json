{"cell_type":{"e2e00987":"code","86a46331":"code","8b303f20":"code","3f5001b3":"code","fd12953c":"code","81fcfcb4":"code","b8795d9a":"code","70b71d43":"code","6a916123":"markdown","80876309":"markdown","31fec7fc":"markdown","98330cc8":"markdown","6ce6916d":"markdown"},"source":{"e2e00987":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86a46331":"from sklearn import preprocessing\nfrom sklearn.naive_bayes import GaussianNB\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt","8b303f20":"data_train = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/main-tenis\/play_tennis_test.csv')","3f5001b3":"le = preprocessing.LabelEncoder()\ndata_train_df = pd.DataFrame(data_train)\ndata_train_df_encoded = data_train_df.apply(le.fit_transform)\n\n\ndata_test_df = pd.DataFrame(data_test)\ndata_test_df_encoded = data_test_df.apply(le.fit_transform)\n","fd12953c":"x_train = data_train_df_encoded.drop(['play'],axis=1)\ny_train = data_train_df_encoded['play']\nprint(x_train)","81fcfcb4":"x_test = data_test_df_encoded.drop(['play'],axis=1)\ny_test = data_test_df_encoded['play']\nprint(x_test)","b8795d9a":"model = GaussianNB()\nnbtrain = model.fit(x_train, y_train)\n\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n\n","70b71d43":"disp = plot_confusion_matrix(nbtrain, x_test, y_test,\n                                 display_labels=['No','Yes'],\n                                 cmap=plt.cm.Blues)\ndisp.ax_.set_title('Confusion Matrix')\n\nprint('Confusion Matrix')\nprint(disp.confusion_matrix)\n\nplt.show()\n# confusion_matrix(y_test, y_pred, labels=[0, 1])","6a916123":"Display confusion matrix results","80876309":"Encoding data from text into number","31fec7fc":"In this classification, we use GaussianNB model for prediction","98330cc8":"Import all necessary libraries","6ce6916d":"Read all data from both training and testing dataset"}}