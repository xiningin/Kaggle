{"cell_type":{"8dc63ba1":"code","52f105ca":"code","66a43cce":"code","8332ea3b":"code","ecb641e2":"code","f1e9cb87":"code","dbade289":"code","5fe3dbe3":"code","05a6a3c3":"code","33b9917f":"code","21321c38":"code","adf2ea56":"code","559f0c3d":"code","8cad4158":"code","3525cac1":"code","9738b9bf":"code","e388c2d8":"markdown","e6b47d64":"markdown","e8fffbdb":"markdown","01644eda":"markdown","71bb96ab":"markdown","514550be":"markdown","17831d24":"markdown","a96c164c":"markdown","fa64efc3":"markdown","ba39c74b":"markdown","c47c643b":"markdown","fc7f5cfd":"markdown","17c3abe6":"markdown","5f8e2951":"markdown","925e11c1":"markdown","45868a02":"markdown"},"source":{"8dc63ba1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport re\n\nsns.set(style='white', context='notebook', palette='hls')\npd.set_option('display.max_columns', None)","52f105ca":"# Prep 2020 Data\ndf_2020 = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\nquestion_labels_2020 = {'Time from Start to Finish (seconds)' : 'duration',\n            'Q1': 'age',\n            'Q2' : 'gender',\n            'Q3' : 'country',\n            'Q4' : 'education',\n            'Q5' : 'job_title',\n            'Q6' : 'coding_experience',\n            'Q8' : 'beginner_language_rec',\n            'Q11' : 'most_common_compute_platform',\n            'Q13' : 'tpu_use',\n            'Q15' : 'ml_experience',\n            'Q20' : 'company_size',\n            'Q21' : 'data_science_team_size',\n            'Q22' : 'company_ml_use',\n            'Q24' : 'compensation',\n            'Q25' : 'compute_spend',\n            'Q30' : 'most_common_db',\n            'Q32' : 'most_common_bi',\n            'Q38' : 'most_common_analyzer'  \n            }\ndf_2020 = df_2020.rename(columns=question_labels_2020)\ndf_2020.loc[df_2020['gender']=='Man','gender'] = 'Male'\ndf_2020.loc[df_2020['gender']=='Woman','gender'] = 'Female'\ndf_2020.loc[df_2020['gender']=='Prefer to self-describe','gender'] = 'GNC'\ndf_2020.loc[df_2020['gender']=='Nonbinary','gender'] = 'GNC'\ndf_2020['education'] = df_2020.education.apply(lambda x: x.replace(\"\u2019\", \"'\") if isinstance(x, str) else x)\ndf_2020 = df_2020.drop(0, axis='index')\n\n# Prep 2019 Data\ndf_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nquestions_2019 = pd.read_csv('..\/input\/kaggle-survey-2019\/questions_only.csv')\nquestion_labels_2019 = {'Time from Start to Finish (seconds)' : 'duration',\n            'Q1': 'age',\n            'Q2' : 'gender',\n            'Q3' : 'country',\n            'Q4' : 'education',\n            'Q5' : 'job_title',\n            'Q6' : 'company_size', \n            'Q7' : 'data_science_team_size',\n            'Q8' : 'company_ml_use',\n            'Q10' : 'compensation',\n            'Q11' : 'compute_spend',\n            'Q14' : 'most_common_analyzer',\n            'Q15' : 'data_coding_experience',\n            'Q19' : 'beginner_language_rec',\n            'Q22' : 'tpu_use',\n            'Q23' : 'ml_experience' \n            }\ndf_2019 = df_2019.rename(columns=question_labels_2019)\ndf_2019.loc[df_2019['gender']=='Prefer to self-describe','gender'] = 'GNC'\ndf_2019['education'] = df_2019.education.apply(lambda x: x.replace(\"\u2019\", \"'\") if isinstance(x, str) else x)\ndf_2019 = df_2019.drop(0, axis='index')\n\n# Prep 2018 data\ndf_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nschema_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/SurveySchema.csv')\nquestion_labels_2018 = {'Time from Start to Finish (seconds)' : 'duration',\n            'Q1': 'gender',\n            'Q2' : 'age',\n            'Q3' : 'country',\n            'Q4' : 'education',\n            'Q5' : 'undergraduate_major', \n            'Q6' : 'job_title', #'company_size', \n            'Q7' : 'industry', # 'data_science_team_size',\n            'Q8' : 'experience_in_current_role', #\n            'Q9' : 'compensation',\n            'Q10' : 'company_ml_use',#'compute_spend',\n            'Q17' : 'most_freq_programming_lang', #'most_common_analyzer',\n            'Q18' : 'beginner_language_rec', #'data_coding_experience',\n            'Q20' : 'most_used_ml_library',\n            'Q22' : 'most_used_viz_library', #'tpu_use',\n            'Q23' : 'time_spent_coding', #'ml_experience' \n            'Q24' : 'data_coding_experience',\n            'Q25' : 'ml_experience',\n            'Q26' : 'consider_yourself_data_scientist',\n            'Q32' : 'most_frequent_data_encountered',\n            'Q37' : 'most_frequent_online_platform_used',\n            'Q40' : 'academic_achievements_vs_independent_projects',\n            'Q43' : 'exploring_unfair_bias',\n            'Q46' : 'exploring_model_insights',\n            'Q48' : 'black_box_ml'            \n            }\ndf_2018 = df_2018.rename(columns=question_labels_2018)\ndf_2018.loc[df_2018['gender']=='Prefer to self-describe','gender'] = 'GNC'\ndf_2018.loc[df_2018['age']=='70-79','age'] = '70+'\ndf_2018.loc[df_2018['age']=='80+','age'] = '70+'\ndf_2018['education'] = df_2018.education.apply(lambda x: x.replace(\"\u2019\", \"'\") if isinstance(x, str) else x)\ndf_2018 = df_2018.drop(0, axis='index')\n\n# Prep 2017 Data\ndf_2017 = pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv', encoding=\"ISO-8859-1\")\nquestion_labels_2017 = {'Time from Start to Finish (seconds)' : 'duration',\n            'GenderSelect': 'gender',\n            'Age' : 'age',\n            'Country' : 'country',\n            'FormalEducation' : 'education',\n            'MajorSelect' : 'undergraduate_major', \n            'CurrentJobTitleSelect' : 'job_title', #'company_size', \n            'CompensationAmount' : 'compensation',\n            'LanguageRecommendationSelect' : 'beginner_language_rec', #'data_coding_experience',\n            'Tenure' : 'data_coding_experience',\n            'DataScienceIdentitySelect' : 'consider_yourself_data_scientist',        \n            }\ndf_2017 = df_2017.rename(columns=question_labels_2017)\ndf_2017.loc[df_2017['gender']=='A different identity','gender'] = 'GNC'\ndf_2017.loc[df_2017['gender']=='Non-binary, genderqueer, or gender non-conforming','gender'] = 'GNC'\ndf_2017['exact_age'] = df_2017.age\nbins = [17, 21, 24, 29, 34, 39, 44, 49, 54, 59, 69, 150]\nlabels = [\"18-21\",\"22-24\",\"25-29\",\"30-34\",\"35-39\",\"40-44\",\"45-49\",\"50-54\",\"55-59\",\"60-69\",\"70+\"]\ndf_2017.age = pd.cut(df_2017.age, bins=bins, labels=labels)\ndf_2017 = df_2017.drop(0, axis='index')\n\n# Append all the datasets together\ndf_2017['year'] = '2017'\ndf_2018['year'] = '2018'\ndf_2019['year'] = '2019'\ndf_2020['year'] = '2020'\ndf_tot = df_2020.append(df_2019).append(df_2018).append(df_2017)","66a43cce":"sns.set(style='white', context='notebook', palette=\"colorblind\")\n\"\"\"\nThis function is going to give you a sum of 100% per every bar\nThe df looks like\nindex     legend_1     legend_2\nx1        % L1 in x1   % L2 in x1 (these sum to 1)\nx2        % L1 in x2   % L2 in x2 (these sum to 1)\n\"\"\"\ndef group_x_bar_percentages_plot(df, x_axis_var, legend_var, color_order=False):\n    x_axis_groups = df.groupby(x_axis_var)[legend_var]\n    percentages_df = pd.DataFrame()\n    for group_name, group_df in x_axis_groups:\n        single_x_bar_df = group_df.value_counts(normalize=True).to_frame().rename(columns={legend_var:group_name}).transpose()\n        percentages_df = percentages_df.append(single_x_bar_df)\n\n    # Convert from proportions to percent\n    percentages_df = percentages_df.mul(100)\n    percentages_df = percentages_df.reindex(sorted(percentages_df.columns), axis=1)\n\n\n    ax = percentages_df.plot.bar(stacked=True,\n                                title = f\"Normalized Counts of {x_axis_var.capitalize()}, Broken Down by {legend_var.capitalize()}\",\n                                xlabel = x_axis_var.capitalize(),\n                                ylabel = \"Percent of Population\")\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.show()\n    \n\n\"\"\"\nThis function is going to give you a sum of 100% across a legend item\nThe df looks like\nindex     legend_1     legend_2\nx1        % x1 in L1   % x1 in L2\nx2        % x2 in L1   % x2 in L2 \n          (sum to 1)   (sum to 1)\n\"\"\"\ndef group_legend_percentages_plot(df, x_axis_var, legend_var):\n    legend_groups = df.groupby(legend_var)[x_axis_var]\n    percentages_df = pd.DataFrame()\n    for group_name, group_df in legend_groups:\n        single_legend_item_df = group_df.value_counts(normalize=True).to_frame().rename(columns={x_axis_var:group_name})\n        percentages_df = percentages_df.merge(single_legend_item_df, how='outer',  left_index=True, right_index=True)\n    \n    # Convert from proportions to percent\n    percentages_df = percentages_df.mul(100)\n\n    ax = percentages_df.plot.bar(title = f\"Normalized Value Counts of {x_axis_var.capitalize()}, Grouped by {legend_var.capitalize()}\",\n                                xlabel = x_axis_var.capitalize(),\n                                ylabel = \"Percent of Population\")\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.show()\n\ndef plot_gender_support_by_year(df, col_name, yes_value, inc_nb=True):\n    df['yes_value_count'] = df[col_name] == yes_value\n    smaller_df = df_tot[['year','gender','yes_value_count',col_name]]\n    g = smaller_df.groupby(by=['year','gender']).agg({col_name:'count','yes_value_count':'sum'}).reset_index()\n    g['perc'] = g['yes_value_count'] \/ g[col_name]\n    plt.plot('year','perc','o-',data=g[g.gender=='Male'], label='Male')\n    plt.plot('year','perc','o-',data=g[g.gender=='Female'], label='Female')\n    plt.plot('year','perc','o-',data=g[g.gender=='GNC'], label='Non-binary or Gender Non-Conforming')\n    plt.title(f'Percent of {col_name} with value {yes_value}')\n    plt.legend()\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n    plt.show()\n\ndef plot_support_by_year(df, col_name, yes_values, inc_nb=True):\n    for yes_value in yes_values:\n        df['yes_value_count'] = df[col_name] == yes_value\n        smaller_df = df[['year','yes_value_count',col_name]]\n        g = smaller_df.groupby(by=['year']).agg({col_name:'count','yes_value_count':'sum'}).reset_index()\n        g['perc'] = 100 * (g['yes_value_count'] \/ g[col_name])\n        plt.plot('year','perc','-o', data=g, label=yes_value, )\n    plt.title(f'Percent of {col_name} with value {yes_value}')\n    plt.legend()\n    plt.ylabel('Percent of Responses')\n    plt.xlabel('Year')\n    plt.show()\n\ndef get_lin_fit(row):\n    try:\n        y = np.array([row['2017'],row['2018'],row['2019'],row['2020']])\n    except:\n        return np.nan\n    x = np.array([2017, 2018, 2019, 2020])\n    idx = np.isfinite(y)\n    if sum(idx) <= 1:\n        return np.nan\n    else:\n        fit = np.polyfit(x=x[idx], y=y[idx], deg=1)\n        return fit[0]\n    \ndef over_year_percents(df):\n    total_pop = len(df)\n    over_years_df = df[[\"year\",\"beginner_language_rec\"]].groupby(['year','beginner_language_rec']).size().reset_index().rename(columns={0:\"count\"})\n    over_years_df = over_years_df.pivot(index='beginner_language_rec', columns='year', values='count')\n    over_years_df['small_sample_flag'] = over_years_df.max(axis=1) > 10\n    over_years_df = over_years_df.div(over_years_df.sum(axis=0), axis=1).multiply(100)\n    over_years_df['avg'] = over_years_df.mean(axis=1)\n    over_years_df['yearly_delta'] = over_years_df.apply(lambda row: get_lin_fit(row) , axis=1)\n    over_years_df['relative_yearly_delta'] = over_years_df.apply(lambda row: row['yearly_delta'] \/ row['avg'], axis=1 ).multiply(100)\n    over_years_df = over_years_df.drop(['Other','None'], errors='ignore')\n    over_years_df['small_sample_flag'] = over_years_df['small_sample_flag'] > 0\n    return over_years_df\n\ndef plot_absolute_change(df, filter_small_samples=True):\n    if filter_small_samples:\n        df = df[df.small_sample_flag]\n    df.yearly_delta.sort_values().dropna().plot.bar()\n    plt.title(\"Average Yearly Change in Percentage from 2017 to 2020\")\n    plt.xlabel(\"Language\")\n    plt.ylabel(\"Yearly Change in Recommendation %\")\n    plt.show()\n    \ndef plot_relative_change(df, filter_small_samples=True):\n    if filter_small_samples:\n        df = df[df.small_sample_flag]\n    df.relative_yearly_delta.sort_values().dropna().plot.bar()\n    plt.title(\"Relative Yearly Change in Percentage from 2017 to 2020\")\n    plt.xlabel(\"Language\")\n    plt.ylabel(\"Yearly Change in Recommendation %\")\n    plt.show()\n    ","8332ea3b":"df_2020.beginner_language_rec.value_counts(normalize=True).multiply(100).plot(kind='bar')\nplt.title('2020 Beginner Language Recommendations')\nplt.xlabel('Lanuguage Recommended')\nplt.ylabel('Percent of Responses')\nplt.show()","ecb641e2":"plot_support_by_year(df=df_tot, col_name='beginner_language_rec', yes_values=['Python','R','SQL'])","f1e9cb87":"overall_yearly_changes = over_year_percents(df_tot)\nplot_absolute_change(overall_yearly_changes)","dbade289":"plot_relative_change(overall_yearly_changes)","5fe3dbe3":"group_x_bar_percentages_plot(df_2020[df_2020.beginner_language_rec.isin([\"Python\",\"SQL\",\"R\"])], \n                                                          'job_title',\n                                                           'beginner_language_rec',)","05a6a3c3":"plot_support_by_year(df=df_tot[df_tot.job_title==\"Statistician\"].copy(), col_name='beginner_language_rec', yes_values=['Python','R','SQL'])","33b9917f":"plot_relative_change(over_year_percents(df_tot[df_tot.job_title == 'Statistician']))","21321c38":"group_legend_percentages_plot(df_2020[df_2020.gender.isin(['Male','Female','GNC'])], 'beginner_language_rec', 'gender')","adf2ea56":"plot_gender_support_by_year(df=df_tot, col_name='beginner_language_rec', yes_value='Python')","559f0c3d":"plot_gender_support_by_year(df=df_tot, col_name='beginner_language_rec', yes_value='R')","8cad4158":"male_yearly_changes = over_year_percents(df_tot[df_tot.gender == 'Male'])\nplot_relative_change(male_yearly_changes)","3525cac1":"plot_relative_change(over_year_percents(df_tot[df_tot.gender == 'Female']))","9738b9bf":"plot_relative_change(over_year_percents(df_tot[df_tot.education == 'Doctoral degree']))","e388c2d8":"Interestingly, that same equalization is happening with R! It used to be a more popular recommendation from women, and now R is almost the same popularity across genders.","e6b47d64":"### Plotting Helper Functions","e8fffbdb":"## Short Answer: Use Python!\n\nLet's start with the basics. For beginners out there, you're in luck: the survey asked directly about language recommendations! Everyone was asked for a single beginner language recommendation, and they replied with a resounding \"Python!\"","01644eda":"Statisticians are the clear outlier here! R may be the right path for you, but only in the case that you're working in statistics. If we limit our dataset to only folks who said they're a statistician, how have beginner lanugage preferences changed over time?","71bb96ab":"### Import and Clean Data","514550be":"Do folks with Phds have any information the rest of us don't? At least by the looks of which languages are increasing in popularity, it looks pretty similar to the rest of the distributions.","17831d24":"Cool, as expected we get Python in the lead gaining an average of 5 percentage of responses each year from 2017 through 2020. Most languages change a much smaller amount over time, in part because they amount to such a smaller percentage of the overall responses. For example, Julia has on average gained 0.14% of the responses each year, which isn't much compared to Python in an absolute sense, but since the average response rate for Julia across the four years is only 0.48%, that's a 28% increase in popularity each year! If we look at relative increases rather than the original absolute increases, we get a plot of","a96c164c":"Damn. It's hard to get 80% of people to agree on anything in 2020, but Python has managed it somehow. The second most popular choice, R, only has 7% of total responses. But has that always been true? Is Python on its way in or on its way out?\n\nWe'll look at the three most common languages (Python, R and SQL) to keep the next plot easier to read. ","fa64efc3":"From 2017 to 2020, Python is on the incline while R is slipping in popularity. Python jumped 17% percentage points over the four years, a relative increase of 26%.  \n\nIt's too bad we don't have data from long enough in the past to see what the Python data looked like when it wasn't the clear champion of the data science world. Still, are there any up-and-comer languages hiding amidst our less popular language bretheren? \n\nSadly, the language options for this question haven't been fully consistent across the years, so if we do a direct subtraction from 2020 to 2017 we lose many of the potential languages. Instead, we can do a linear fit of the four years for each language that's in at least two of the survey years, and find our average change per year for each language (the slope of the linear fit).","ba39c74b":"In 2020, preferences seem relatively equal across gender, with a slight male preference for python and female preference for R. But was that always true? If we look at the rate at which people recommend Python over the years, we can see that the gender difference in Python preference was more acute in 2017, and has been slowly equalling out.","c47c643b":"Among statisticians, R was actually the most popular recommendation in 2017! We're seeing that preference decay, though, even in stats. Do statisticians have any up and coming language preferences that are different than the general population?","fc7f5cfd":"Python, the original powerhouse, has been overshadowed! While it's still data science's main go to, it looks like C, Julia and Javascript are growing in popularity, at least in that people are recommending it as the language you should use first. \n\nThat being said, we're currently oversimplifying. If someone asked me what data science language to learn first, I want to know: What *exactly* are you trying to do? If your goal is to make interactive visualizations, you're going to want a different language than if you only care about statistical testing.\n\nSo, how does beginner language recommendation change by job title in 2020? For visual simplicity, this plot focuses in on the three most popular responses (SQL, R and Python).","17c3abe6":"# What Beginner Language is Best?\n\nLike many Kagglers, I do software and data science for a living. Tech is always changing, and there are always new languages and platforms out there to learn. I don't have infinite time, so I'm wondering: based off of the kaggle survey data, which tech looks like it's up and coming? What languages and platforms are worthwhile to learn next, whether you're an experienced programmer or new to the field?\n\nWhile the 2020 data has plenty to dig into, we can also make use of the previous three years of surveys to get a sense of how tech popularity has evolved over time.","5f8e2951":"What about those lesser known lanugages? If we limit our sample to men and look at relative change in popularity by year and language, we can see that C and Julia have been increasing in popularity the most quickly.","925e11c1":"Again, we're seeing C as a growing choice. And wow, statisticians sure are running away from SAS!\n\nWhile job title is an important distinction, looking at other demographics can help us figure out if some languages are friendlier to a specific gender or age group. \n\nFor example: Women and non-binary folks have been traditionally underrepresented in data science fields. Are their language preferences different? Let's start by taking a look at 2020.","45868a02":"In contrast, javascript is the fastest increasing in popularity for women respondents! And bash is losing popularity the fastest, as opposed to SAS with men."}}