{"cell_type":{"49f51092":"code","4e1a4370":"code","558b7069":"code","bcd85f46":"code","debcd703":"code","45c0bc13":"code","b72db075":"code","24965ef0":"code","8aa84e69":"code","1624fac5":"code","06d34b6f":"code","17091ece":"code","3857d0f2":"code","f2be4fe2":"code","45b1690f":"code","e8c0a44b":"code","2636e9ed":"code","e96428b8":"code","2995aa3f":"code","d84e5e21":"code","e2fc7fd7":"code","6c435008":"code","db755db0":"code","8c11b4fb":"code","efff62ac":"code","b48ad8bf":"markdown","ea8ed1d5":"markdown","2122ddc1":"markdown","7a1810e1":"markdown","8307a9b8":"markdown","5e585b59":"markdown","39ef699b":"markdown","6e786a3a":"markdown","04f30940":"markdown","602a62d8":"markdown","e06d8c7f":"markdown","dded6e85":"markdown","e8366496":"markdown","b43b972e":"markdown","7693abf6":"markdown","b7752768":"markdown","cad93c01":"markdown","b9659013":"markdown","e99b3cf0":"markdown","4624054a":"markdown","ee02beb7":"markdown"},"source":{"49f51092":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4e1a4370":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split","558b7069":"data = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')\n\n## Converting pixels into numpy array\ndata['pixels']=data['pixels'].apply(lambda x:  np.array(x.split(), dtype=\"float32\"))\n\ndata.head()","bcd85f46":"print('Total rows: {}'.format(len(data)))\nprint('Total columns: {}'.format(len(data.columns)))","debcd703":"## normalizing pixels data\ndata['pixels'] = data['pixels'].apply(lambda x: x\/255)\n\n## calculating distributions\nage_dist = data['age'].value_counts()\nethnicity_dist = data['ethnicity'].value_counts()\ngender_dist = data['gender'].value_counts().rename(index={0:'Male',1:'Female'})\n\ndef ditribution_plot(x,y,name):\n    fig = go.Figure([\n        go.Bar(x=x, y=y)\n    ])\n\n    fig.update_layout(title_text=name)\n    fig.show()","45c0bc13":"ditribution_plot(x=age_dist.index, y=age_dist.values, name='Age Distribution')","b72db075":"ditribution_plot(x=ethnicity_dist.index, y=ethnicity_dist.values, name='Ethnicity Distribution')","24965ef0":"ditribution_plot(x=gender_dist.index, y=gender_dist.values, name='Gender Distribution')","8aa84e69":"X = np.array(data['pixels'].tolist())\n\n## Converting pixels from 1D to 3D\nX = X.reshape(X.shape[0],48,48,1)","1624fac5":"plt.figure(figsize=(16,16))\nfor i in range(1500,1520):\n    plt.subplot(5,5,(i%25)+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(data['pixels'].iloc[i].reshape(48,48))\n    plt.xlabel(\n        \"Age:\"+str(data['age'].iloc[i])+\n        \"  Ethnicity:\"+str(data['ethnicity'].iloc[i])+\n        \"  Gender:\"+ str(data['gender'].iloc[i])\n    )\nplt.show()","06d34b6f":"y = data['gender']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.22, random_state=37\n)","17091ece":"model = tf.keras.Sequential([\n    L.InputLayer(input_shape=(48,48,1)),\n    L.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    L.BatchNormalization(),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(64, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Flatten(),\n    L.Dense(64, activation='relu'),\n    L.Dropout(rate=0.5),\n    L.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='sgd',\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=['accuracy'])\n\n\n## Stop training when validation loss reach 0.2700\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_loss')<0.2700):\n            print(\"\\nReached 0.2700 val_loss so cancelling training!\")\n            self.model.stop_training = True\n        \ncallback = myCallback()\n\nmodel.summary()","3857d0f2":"history = model.fit(\n    X_train, y_train, epochs=20, validation_split=0.1, batch_size=64, callbacks=[callback]\n)","f2be4fe2":"fig = px.line(\n    history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","45b1690f":"loss, acc = model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","e8c0a44b":"y = data['ethnicity']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.22, random_state=37\n)","2636e9ed":"model = tf.keras.Sequential([\n    L.InputLayer(input_shape=(48,48,1)),\n    L.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(64, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Flatten(),\n    L.Dense(64, activation='relu'),\n    L.Dropout(rate=0.5),\n    L.Dense(5)\n])\n\nmodel.compile(optimizer='rmsprop',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\n\n## Stop training when validation accuracy reach 79%\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_accuracy')>0.790):\n            print(\"\\nReached 79% val_accuracy so cancelling training!\")\n            self.model.stop_training = True\n        \ncallback = myCallback()\n\n\nmodel.summary()","e96428b8":"history = model.fit(\n    X_train, y_train, epochs=16, validation_split=0.1, batch_size=64, callbacks=[callback]\n)","2995aa3f":"fig = px.line(\n    history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","d84e5e21":"loss, acc = model.evaluate(X_test,y_test,verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","e2fc7fd7":"y = data['age']\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.22, random_state=37\n)","6c435008":"model = tf.keras.Sequential([\n    L.InputLayer(input_shape=(48,48,1)),\n    L.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    L.BatchNormalization(),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(64, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Conv2D(128, (3, 3), activation='relu'),\n    L.MaxPooling2D((2, 2)),\n    L.Flatten(),\n    L.Dense(64, activation='relu'),\n    L.Dropout(rate=0.5),\n    L.Dense(1, activation='relu')\n])\n\nsgd = tf.keras.optimizers.SGD(momentum=0.9)\n\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['mae'])\n\n\n## Stop training when validation loss reach 110\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_loss')<110):\n            print(\"\\nReached 110 val_loss so cancelling training!\")\n            self.model.stop_training = True\n        \ncallback = myCallback()\n\n\nmodel.summary()","db755db0":"history = model.fit(\n    X_train, y_train, epochs=20, validation_split=0.1, batch_size=64, callbacks=[callback]\n)","8c11b4fb":"fig = px.line(\n    history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","efff62ac":"mse, mae = model.evaluate(X_test,y_test,verbose=0)\nprint('Test Mean squared error: {}'.format(mse))\nprint('Test Mean absolute error: {}'.format(mae))","b48ad8bf":"### Evaluate training history <a id=\"5.3\"><\/a>","ea8ed1d5":"<a id=\"05\"><\/a>\n\n<h1 class=\"list-group-item active\" style='background:purple; border:0'>\n    <center>Model for Ethnicity Prediction<\/center>\n<\/h1>","2122ddc1":"### Split data into train\/test <a id=\"6.1\"><\/a>","7a1810e1":" <a id=\"04\"><\/a>\n\n<h1 class=\"list-group-item active\" style='background:purple; border:0'>\n    <center>Model for Gender Prediction<\/center>\n<\/h1>","8307a9b8":"## Loading Dataset <a id=\"02\"><\/a>","5e585b59":"### Build and train model <a id=\"4.2\"><\/a>","39ef699b":"# Table of content\n1. [Importing relevent libraries](#01)\n2. [Loading Dataset](#02)\n3. [Distributions](#03)\n    - [Age Distribution](#3.1)\n    - [Ethnicity Distribution](#3.2)\n    - [Gender Distribution](#3.3)\n    - [Gender Distribution](#3.3)\n    - [Sample Images](#3.4)\n4. [Model for Gender Prediction](#04)\n    - [Spliting data into train\/test](#4.1)\n    - [Build and train model](#4.2)\n    - [Evaluating training history](#4.3)\n5. [Model for Ethnicity Prediction](#05)\n    - [Spliting data into train\/test](#5.1)\n    - [Build and train model](#5.2)\n    - [Evaluating training history](#5.3)\n6. [Model for Age Prediction](#06)\n    - [Spliting data into train\/test](#6.1)\n    - [Build and train model](#6.2)\n    - [Evaluating training history](#6.3)","6e786a3a":"### Split data into train\/test <a id=\"5.1\"><\/a>","04f30940":"## Importing relevent libraries <a id=\"01\"><\/a>","602a62d8":"### Evaluate training history <a id=\"4.3\"><\/a>","e06d8c7f":"### Split data into train\/test <a id=\"4.1\"><\/a>","dded6e85":"### Evaluate training history <a id=\"6.3\"><\/a> ","e8366496":"## Distributions <a id=\"03\"><\/a>","b43b972e":"### Sample Images <a id=\"3.4\"><\/a>","7693abf6":"<a id=\"06\"><\/a>\n\n<h1 class=\"list-group-item active\" style='background:orange; border:0'>\n    <center>Model for Age prediction<\/center>\n<\/h1>","b7752768":"![Alt Text](https:\/\/www.kudos.com\/assets\/Blog\/b5843aa89b\/thankyou__FillWzcwMCw0NDBd.jpg)","cad93c01":"### Build and train model <a id=\"6.2\"><\/a>","b9659013":"### Age Distribtion <a id=\"3.1\"><\/a>","e99b3cf0":"### Gender Distribution <a id=\"3.3\"><\/a>","4624054a":"### Build and train model <a id=\"5.2\"><\/a>","ee02beb7":"### Ethnicity Distribution <a id=\"3.2\"><\/a>"}}