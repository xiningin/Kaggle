{"cell_type":{"956dac8b":"code","6434ffcf":"code","03753b5c":"code","30967778":"code","f3932cc6":"code","421f2353":"code","d995ccc7":"code","2475b461":"code","21745be1":"code","72cd74f9":"code","2715cbac":"code","6d58a2a1":"code","d4c56f02":"code","2819460b":"code","cf82d48c":"code","a61ba964":"code","2670accf":"code","329a8889":"code","315a20c2":"code","1d34f716":"code","90904ba5":"code","71a317e6":"markdown","d6101287":"markdown","e9edc33b":"markdown","1d8a79ff":"markdown","f11af0f9":"markdown","539b6482":"markdown"},"source":{"956dac8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6434ffcf":"train=pd.read_csv(\"\/kaggle\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv\")\ntrain.head()","03753b5c":"test.head()","30967778":"print(train.shape)\nprint(test.shape)","f3932cc6":"train.info()","421f2353":"train.describe()","d995ccc7":"train.isna().sum()","2475b461":"cat_features=['turbine_status','cloud_level']\nnum_features=[]\nfor i in train.columns:\n    if i not in cat_features and i not in ['tracking_id','datetime']:\n        num_features.append(i)\nnum_features","21745be1":"for i in num_features:\n    train[i].fillna(train[i].median(),inplace=True)\nfor i in num_features:\n    if i!='windmill_generated_power(kW\/h)':\n        test[i].fillna(test[i].median(),inplace=True)\n        \n    ","72cd74f9":"for i in cat_features:\n    train[i].fillna(train[i].mode()[0],inplace=True)\n    test[i].fillna(test[i].mode()[0],inplace=True)\n    ","2715cbac":"train.isna().sum()","6d58a2a1":"import matplotlib.pyplot as plt\nfor i in num_features:\n    df=train.copy()\n    plt.figure()\n    plt.boxplot(train[i])\n    plt.xlabel(i)\nplt.figure()\nplt.boxplot(train['windmill_generated_power(kW\/h)'])\nplt.show()","d4c56f02":"for i in cat_features:\n    print(test[i].value_counts())\n    print()","2819460b":"mask=train['cloud_level']=='Extremely Low'\nmask_test=test['cloud_level']=='Extremely Low'\ntrain.loc[mask,'cloud_level']='Medium'\ntest.loc[mask_test,'cloud_level']='Medium'","cf82d48c":"for i in cat_features:\n    train[i]=train[i].astype('category')\n    test[i]=test[i].astype('category')","a61ba964":"from sklearn.preprocessing import LabelEncoder\nlb=LabelEncoder()\nfor i in cat_features:\n    train[i]=lb.fit_transform(train[i])\n    test[i]=lb.fit_transform(test[i])","2670accf":"X=train.drop(['tracking_id','windmill_generated_power(kW\/h)','datetime'],axis=1)\nY=train['windmill_generated_power(kW\/h)']","329a8889":"from xgboost import XGBRegressor\nmodel=XGBRegressor(use_label_encoder=True)\nmodel.fit(X,Y)","315a20c2":"t=test.drop(['tracking_id','datetime'],axis=1)\npredictions=model.predict(t)","1d34f716":"submission=pd.DataFrame(test['tracking_id'])\nsubmission['datetime']=test['datetime']\nsubmission['windmill_generated_power(kW\/h)']=predictions\nsubmission\n","90904ba5":"submission.to_csv('Sub2.csv',index=False)","71a317e6":"import matplotlib.pyplot as plt\nfor i in num_features:\n    df=train.copy()\n    plt.figure()\n    plt.scatter(train[i],train['windmill_generated_power(kW\/h)'])\n    plt.xlabel(i)\n    plt.ylabel('Target')\n    \n    ","d6101287":"Handling Outliers","e9edc33b":"train['datetime']=train['datetime'].map(lambda x:str(x).split('-')[0])\ntest['datetime']=test['datetime'].map(lambda x:str(x).split('-')[0])","1d8a79ff":"## ****Handling Missing Values****","f11af0f9":"import matplotlib.pyplot as plt\nfor i in num_features:\n    df=train.copy()\n    plt.figure()\n    plt.hist(train[i],bins=25)\n    plt.xlabel(i)\n    plt.ylabel('count')\n    \n    ","539b6482":"# ****EDA(Exploratory Data Analysis)****"}}