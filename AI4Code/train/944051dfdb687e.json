{"cell_type":{"28e89378":"code","f0ba556c":"code","5346b349":"code","087e4014":"code","5677b526":"code","ba79b283":"code","cffa6856":"code","59facf95":"code","17fc1c87":"code","59096a7d":"code","228ac7c9":"code","7a54742b":"code","b4605121":"code","b6cfb9a9":"code","8affc2d9":"code","6aac90a4":"code","c599548d":"code","fab3def8":"code","29113655":"code","fc7aa4cf":"code","b2b1ca35":"code","61620d20":"code","2cedc411":"code","fc802287":"code","d9d6be03":"code","8ce2e47a":"code","7f1fe9ed":"markdown","2a038b6b":"markdown","a86581a6":"markdown","8979946c":"markdown","1254464d":"markdown","4a48d7f9":"markdown","2a833e49":"markdown","7d18de1c":"markdown","83a80fa9":"markdown","95e30b34":"markdown","571fb30f":"markdown","1713760c":"markdown","1024fde2":"markdown","7d1de055":"markdown","248293f8":"markdown","afe3f058":"markdown","f9b53f6e":"markdown","c9b7045b":"markdown","32c32b02":"markdown","6d35f10b":"markdown","70fcec27":"markdown","3df84c5c":"markdown"},"source":{"28e89378":"#import modules\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime","f0ba556c":"#read data, world Covid-19 datasets\ndf_confirmed = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndf_deaths = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\ndf_recovered = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","5346b349":"df_confirmed.head()","087e4014":"#select Canada data\ndf_confirmed_Canada = df_confirmed.loc[df_confirmed['Country\/Region'] == 'Canada'].reset_index(drop = True)\ndf_deaths_Canada = df_deaths.loc[df_confirmed['Country\/Region'] == 'Canada'].reset_index(drop = True)\ndf_recovered_Canada = df_recovered.loc[df_confirmed['Country\/Region'] == 'Canada'].reset_index(drop = True)","5677b526":"#calculate sums in last row\n#Canada_disease_trend = pd.DataFrame(np.zeros((1, df_confirmed_Canada.shape[1])), columns = df_confirmed_Canada.columns)\n#Canada_disease_trend\ndf_confirmed_Canada = df_confirmed_Canada.append(df_confirmed_Canada.sum(axis=0).to_frame().transpose(), ignore_index = True)\ndf_deaths_Canada = df_deaths_Canada.append(df_deaths_Canada.sum(axis=0).to_frame().transpose(), ignore_index = True)\ndf_recovered_Canada = df_recovered_Canada.append(df_recovered_Canada.sum(axis=0).to_frame().transpose(), ignore_index = True)","ba79b283":"#change last row name to total, \ndf_confirmed_Canada['Province\/State'][len(df_confirmed_Canada['Province\/State'])-1] = 'total'\ndf_deaths_Canada['Province\/State'][len(df_deaths_Canada['Province\/State'])-1] = 'total'\ndf_recovered_Canada['Province\/State'][len(df_recovered_Canada['Province\/State'])-1] = 'total'\n\n#drop useless columns\ndf_confirmed_Canada.drop(['Country\/Region', 'Lat', 'Long'], axis = 1, inplace = True)\ndf_deaths_Canada.drop(['Country\/Region', 'Lat', 'Long'], axis = 1, inplace = True)\ndf_recovered_Canada.drop(['Country\/Region', 'Lat', 'Long'], axis = 1, inplace = True)\n\ndf_deaths_Canada","cffa6856":"#last day's total data, like total death in last day\nconfirm_today = df_confirmed_Canada.iloc[-1,:][-1]\ndeath_today = df_deaths_Canada.iloc[-1,:][-1]\nrecover_today = df_recovered_Canada.iloc[-1,:][-1]\nprint('Confirm, death, recover number in total: ', confirm_today, ',', death_today, ',', recover_today)","59facf95":"#2 weeks before last day\nconfirm_2wbefore = df_confirmed_Canada.iloc[-1,:][-14]\ndeath_2wbefore = df_deaths_Canada.iloc[-1,:][-14]\nrecover_2wbefore = df_recovered_Canada.iloc[-1,:][-14]","17fc1c87":"#total num within nearby two weeks\nconfirm_2w = confirm_today - confirm_2wbefore\ndeath_2w = death_today - death_2wbefore\nrecover_2w = recover_today - recover_2wbefore\nprint('Confirm, death, recover number in 2 weeks: ', confirm_2w, ',', death_2w, ',', recover_2w)","59096a7d":"#total Canada population\n#k1k1k1 = pd.read_csv('https:\/\/raw.githubusercontent.com\/ishaberry\/Covid19Canada\/master\/cases.csv')\n#k1k1k1.to_csv(\"..\/..\/kaggle\/working\/Canada_disease.csv\", index=False)","228ac7c9":"#total Canada disease\nCases_Canada = pd.read_csv('https:\/\/raw.githubusercontent.com\/ishaberry\/Covid19Canada\/master\/cases.csv')\nDeaths_Canada = pd.read_csv('https:\/\/raw.githubusercontent.com\/ishaberry\/Covid19Canada\/master\/mortality.csv')\ntest_Canada = pd.read_csv('https:\/\/raw.githubusercontent.com\/ishaberry\/Covid19Canada\/master\/testing_cumulative.csv')\nprint(Cases_Canada.shape, Cases_Canada.columns.tolist())","7a54742b":"Deaths_Canada.head()","b4605121":"#print(Cases_Canada.travel_history_country.unique())","b6cfb9a9":"#efficiency mask parameters %\nhomemade_mask_E = [58, (58+77)\/2, 77]\nsurgical_mask_E = [72, (72+85)\/2, 85]\nN95_mask_E = [98, 98.5, 99]\n\n#death rate VS efficiency\nefficiency = [20, 50, 80]\ndeath_rate = [5.4, 31.1, 64.5]","8affc2d9":"#function of efficiency and death rate\nE_D_func = lambda efficiency: (77\/18000 * efficiency ** 2 + 1003\/1800 * efficiency - 671\/90) \/ 100","6aac90a4":"type_mask_list = ['homemade', 'surgical', 'N95']\nwear_mask_list_choice = ['seldom', 'normal', 'always', 'every time']\nwear_mask_list = [.2, .5, .8, 1]\nwear_mask_dic = {wear_mask_list_choice[i]: wear_mask_list[i] for i in range(len(wear_mask_list_choice))}\n#print(wear_mask_dic)\n\nsolution_optimal_list = ['worst', 'normal', 'best']\nsolution_optimal_loc = [0,1,2]\nsolution_optimal_dic = {solution_optimal_list[i]: solution_optimal_loc[i] for i in range(len(solution_optimal_list))}\n#print(solution_optimal_dic)\n\ndef mask_efficiency(type_mask, solution_optimal):\n    \n    #masks efficiency\n    homemade_mask_E = [58, (58+77)\/2, 77]\n    surgical_mask_E = [72, (72+85)\/2, 85]\n    N95_mask_E = [98, 98.5, 99]\n\n    if type_mask == 'homemade':\n        return homemade_mask_E[solution_optimal_dic[solution_optimal]]\n\n    if type_mask == 'surgical':\n        return surgical_mask_E[solution_optimal_dic[solution_optimal]]\n    \n    if type_mask == 'N95':\n        return N95_mask_E[solution_optimal_dic[solution_optimal]]\n        \n#print(mask_efficiency('homemade', 'normal'))\n\ndef wear_mask_func(wear_mask):\n    if wear_mask == 'seldom':\n        return wear_mask_list[0]\n\n    if wear_mask == 'normal':\n        return wear_mask_list[1]\n    \n    if wear_mask == 'always':\n        return wear_mask_list[2]\n    \n    if wear_mask == 'every time':\n        return wear_mask_list[3]\n\n#function of our solution\n#the third parameter is function of efficiency and death rate\ndef mask(type_mask, wear_mask, solution_optimal, E_D_func = E_D_func):\n    # input: masks information and function \n    # input example: N95, 20%, best, E_D_func\n    # output: solution to customers\n    \n    #error\n    if solution_optimal not in solution_optimal_list or type_mask not in type_mask_list or wear_mask not in wear_mask_list_choice:\n        print ('Raise error')\n        return None\n    \n    #masks efficiency\n    mask_eff = mask_efficiency(type_mask, solution_optimal)\n    \n    death_rate_reduction = E_D_func(mask_eff * wear_mask_func(wear_mask))\n    #print('The reduction of death rate is {} for {} masks, for people who {} wear masks. This solution is the {} choice.'.format(round(death_rate,2), type_mask, wear_mask, solution_optimal))\n    #print('By this solution, in Canada, there is {} reduction of people''s death due to the whole Covid-19, {} reduction of people''s death during the last two weeks.'.format(round(death_today * death_rate, 0), round(death_2w * death_rate, 0)))\n    \n    return death_rate_reduction\n\n#testing\nmask('N95', 'always', 'best')\n#print(calculator('homemade', 'always', 'normal'))","c599548d":"social_distance_choice = ['Stay at home', 'Working full time', 'Close School', 'Distance Travelled from home']\nsocial_distance_answer = [-.45, .85, -.60, .25]\nsocial_distance_dic = {social_distance_choice[i]: social_distance_answer[i] for i in range(len(social_distance_choice))}\n\ndef social_distance(death_rate, choice_list = [False, False, False, False]):\n    #input: death rate, choice(e.g: [True, True, False, True])\n    #output: death rate after analysis\n    for choice_pos in range(len(choice_list)):\n        if choice_list[choice_pos] == True:\n            death_rate = death_rate * (1 + social_distance_answer[choice_pos])\n    return death_rate \n    \nsocial_distance(1, [True, True, False, True])    ","fab3def8":"dt_factors = pd.read_csv('..\/input\/canada-covid19-risk-factors\/risk factor.csv')\ndt_factors.head()","29113655":"#correction of data\ndt_factors['Unnamed: 0'][1] = 'Total'\ndt_factors['Unnamed: 0'][0] = 'Column_name'","fc7aa4cf":"import re\npattern = re.compile(r'\\d+')\nresult = int(''.join(pattern.findall('N=5,416')))\nprint(result)","b2b1ca35":"for name in dt_factors.columns.tolist()[1:]:\n    dt_factors[name][1] = int(''.join(pattern.findall(str(dt_factors[name][1]))))\ndt_factors.head()","61620d20":"#fill NAN\ndt_factors = dt_factors.fillna(0)\ndt_factors","2cedc411":"researched_name = ['Column_name', 'Total','Hypertension','Coronary Artery Disease', 'History of Stroke', 'Diabets', 'Obesity', 'Chronic Kidney Disease', 'Asthma ', 'COPD']\nresearched_data = [0,0,.23,.085,.026,.081,.64,.134,.81,.04]\nresearched_dic = {researched_name[i]: researched_data[i] for i in range(len(researched_name))}\ndt_factors_researched = dt_factors.copy()\n\ndt_factors_researched = dt_factors_researched.loc[dt_factors_researched['Unnamed: 0'].isin(researched_name)]\ndt_factors_researched    ","fc802287":"def other_factor(dt_factors_researched, disease = None, age = None, sex = None, race = None):\n    if disease is None:\n        return 1\n    infect_rate_infected = int(dt_factors_researched.loc[dt_factors_researched['Unnamed: 0'] == disease]['Unnamed: 1']) \/ 5416\n    #print('infect rate infected:', infect_rate_infected)\n    infect_rate_notinfected = researched_dic[disease]\n    #print('infect rate notinfected:', infect_rate_notinfected)\n    infect_rate_increase_rate = infect_rate_infected \/ infect_rate_notinfected\n    return infect_rate_increase_rate\n\nfor name in researched_name[2:]:\n    print(other_factor(dt_factors_researched, name))","d9d6be03":"dt_factors_researched.loc[dt_factors_researched['Unnamed: 0'] == 'History of Stroke']['Unnamed: 1']","8ce2e47a":"def calculator(type_mask, wear_mask, solution_optimal, choice_list = [False, False, False, False], dt_factors_researched = dt_factors_researched, E_D_func = E_D_func, disease = None):\n\n    default_reduction = .5 #suppose currently, how much death rate reduction Canada already did\n    death_rate_mask = mask(type_mask, wear_mask, solution_optimal, E_D_func = E_D_func)\n    death_rate_SD = social_distance(death_rate_mask, choice_list)\n    death_rate_final = death_rate_SD * other_factor(dt_factors_researched, disease) - default_reduction\n    print('The reduction of death rate is {}% for {} masks, for people who {} wear masks. This solution is the {} choice.'.format(round(death_rate_final,2)*100, type_mask, wear_mask, solution_optimal))\n    print('By this solution, in Canada, there is {} reduction of people''s death due to the whole Covid-19, {} reduction of people''s death during the last two weeks.'.format(round(death_today * death_rate_final, 0), round(death_2w * death_rate_final, 0)))\n    \n    return death_rate_final\n    \n    \ncalculator('homemade', 'always', 'normal', [True, True, False, True], disease = 'History of Stroke')    \ncalculator('homemade', 'seldom', 'worst')   ","7f1fe9ed":"Users can choose disease, age, sex, race groups (default is not answer these questions) in the future.\n\nBut for now, we only have the data of total number.\n\nfor this document, user can only choose disease. That means, we only use column 0 and 1\n\nI will use the rate of people who infected, divided by people not infected rate.","2a038b6b":"# comment:\n# type_mask: 'homemade', 'surgical', 'N95'\n# wear_mask: 'seldom', 'normal', 'always', 'every time'\n# solution_optimal: 'worst', 'normal', 'best'\n# choice_list: [False, False, False, False] or [True, False, True, False]","a86581a6":"This analysis is based on several articles and I will write the references later. I'm writing a calculator based on Canada's Covid-19 analysis, especially masks and social distances, and use this for student's Covid-19 website project. Currently there is no machine learning.","8979946c":"By the researches above, we choose Hypertension: 24.5% for men, 21.5% for women\n\nCoronary artery disease: 8.5%\n\nHistory of Stroke: choose 2.6%\n\nDiabets: now just choose 8.1%, could be more accurate\n\nObesity: 64%\n\nChronic Kidney Disease: 13.4%\t\n\nAsthma: 8.1%\n\nCOPD: 4%","1254464d":"# final calculator\uff1a","4a48d7f9":"Parameters:\n\ntotal number of disease: confirm_today, death_today, recover_today\n\ntwo-week disease: confirm_2w, death_2w, recover_2w\n\nfunction of efficiency and death rate: E_D_func\n\npossible choices: type_mask_list, wear_mask_list_choice, solution_optimal_list\n","2a833e49":"# Catalog:\n\n1.basic info\n2.mask\n3.social distance\n4.variable name\n5.","7d18de1c":"Currently I 'm still modify the file.","83a80fa9":"Hypertension:     The population prevalence of hypertension among Canadians aged 20 to 79 was found to be significantly higher for men (24.5%, 95% CI: 22.7% to 26.4%) then for women (21.5%, 95% CI: 19.8% to 23.2%). \n\nCoronary artery disease:   According to the most recent data from 2012\/13, about 2.4 million (8.5%) Canadian adults aged 20 years and older live with diagnosed ischemic heart disease, including 578,000 (2.1%) with a history of a heart attack.\n\nHistory of stroke:  The age-standardized occurrence of stroke slightly increased from 2.3% for both sexes in 2003\u20132004 up to 2.6% in 2012\u20132013. This represents an average annual increase of 1.0%. During the same time period, the age-standardized occurrence rate of first stroke decreased on average 2.7% annually from 383.0 per 100,000 in 2003\u20132004 to 297.3 per 100,000 in 2012\/13.\n\nDiabetes:  According to the most recent data (Box 1), about 3.0 million Canadians (8.1%) were living with diagnosed diabetes in 2013\u20132014, representing 1 in 300 children and youth (1\u201319 years), and 1 in 10 adults (20 years and older)\n\nObesity: Obesity rate\nPublic Health of Canada has reported that in 2017, 64% of Canadians over the age of 18 are overweight or obese, and about 30% of children aged 5-17 are overweight or obese. ... The Northwest Territories have the highest obesity rate, at 33.7%.\n\nCKD: CKD is a major public health burden both nationally and internationally. The global mean prevalence of CKD is 13.4%, and within Canada, most recent estimates suggest at least 4 million people have the disease.\n\nAsthma: In 2014, 8.1% of Canadians aged 12 and older, roughly 2.4 million people, reported that they had been diagnosed with asthma by a health professional.\n\nCOPD:\nIn 2019, around 4 percent of Canadians reported that they had been diagnosed by a health professional as having COPD.\n","95e30b34":"# Basic info and data","571fb30f":"We have three choices for type of masks and wearing masks\n\ntype: homemade, surgical, N95\n\nwearing masks: 20% is seldom, 50% is normal, 80% is always, 100% is every time\n\nsolution_optimal: worst, normal, best solutions.","1713760c":"Since our solution is compare with no protection with mask and social distancing and caluclate the reduction of death rate. We need to know how Canada did right now. What is the approximate percentage Canada decrease the death rate?\nJust like, Canada already have social distancing and masks regulations and laws. How much still can be improved?\n\nThe default is Canada reduced 50% of deathes.","1024fde2":"Homemade masks: 58% - 77%, Surgical masks: 72% - 85%, N95 and equivalents: 98-99%, 20% effective masks: 5.4% reduces (death rate), 50% effective masks: 31.1% reduces, 80% effective masks: 64.5% reduces\n","7d1de055":"re.compile method\n\nhttps:\/\/www.tutorialspoint.com\/Why-do-we-use-re-compile-method-in-Python-regular-expression#:~:text=The%20re.&text=compile(pattern%2C%20repl%2C%20string,pattern%20again%20without%20rewriting%20it.","248293f8":"# Social distance analysis","afe3f058":"Here is actions that relate to social distance. User can click the tool box, then \n\nStay at home: - 45%\n\nWorking full time: + 85%\n\nClose School: - 60%\n\nDistance Travelled from home: + 25%\n","f9b53f6e":"Since efficiency and death_rate looks linear, use linear regression. Here I use simple mathematics\n\nI use this caluclator: https:\/\/www.analyzemath.com\/parabola\/three_points_para_calc.html","c9b7045b":"New dataset with every CA cases info","32c32b02":"case_id: number of cases in Canada\n\nprovincial_case_id: number of cases in each provinces\n\nwhen travel_yn is 0: no travel history.\nwhen travel_yn is 1; has travel history\n\nbasic info: age, sex, health_region, province, country, report_week, travel_yn, travel_history_country","6d35f10b":"# Mask analysis","70fcec27":"# Other factors","3df84c5c":"I think age, sex, health_region, province, report_week, travel_yn, travel_history_country is important."}}