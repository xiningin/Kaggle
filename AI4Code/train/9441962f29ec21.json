{"cell_type":{"5bd9e023":"code","05b1ac8e":"code","0b5a08f5":"code","d3dd8a18":"code","cc34ddf4":"code","6aab5c35":"code","eda0c288":"code","9ebe0e9b":"code","05aea6fa":"code","1bb26da5":"code","b5028f96":"code","92ce8610":"code","10019084":"code","1a6e2a01":"code","dfd264eb":"code","edb40097":"code","cd5fca4b":"code","2a665ac1":"code","01c95179":"code","1581c6b5":"code","4369a713":"code","d317cf86":"code","2d6b94e0":"markdown"},"source":{"5bd9e023":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom keras import backend as K\nfrom keras.layers import Dense\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import Dense,Input,Dropout\nfrom keras.models import Model\nfrom keras.callbacks import EarlyStopping,ModelCheckpoint\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom keras.models import load_model\nimport matplotlib.pyplot as plt\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","05b1ac8e":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","0b5a08f5":"train.head()","d3dd8a18":"train.drop(\"molecule_name\", axis=1, inplace=True)\ntest.drop(\"molecule_name\", axis=1, inplace=True)","cc34ddf4":"test_id = test['id']\ntrain.drop(\"id\", axis=1, inplace=True)\ntest.drop(\"id\", axis=1, inplace=True)","6aab5c35":"train_type = pd.get_dummies(train['type'])\ntest_type = pd.get_dummies(test['type'])","eda0c288":"train['type'] = train['type'].astype(\"category\").cat.codes\ntest['type'] = test['type'].astype(\"category\").cat.codes","9ebe0e9b":"#train_new = pd.concat([train, train_type], axis=1)\n#train_new.drop(\"type\", axis=1, inplace=True)\n#test_new = pd.concat([test, test_type], axis=1)\n#test_new.drop(\"type\", axis=1, inplace=True)","05aea6fa":"train.head()","1bb26da5":"y = train[\"scalar_coupling_constant\"]\ntrain.drop(\"scalar_coupling_constant\", axis=1, inplace=True)\nX = train","b5028f96":"x_train, x_test, y_train, y_test = train_test_split(X, y, random_state=42)","92ce8610":"K.clear_session()\ndef RegressionModel(in_):\n    model = Dense(256,kernel_initializer='normal',activation=\"relu\")(in_)\n    model = Dense(128,kernel_initializer='normal',activation=\"relu\")(model)\n    model = Dense(64,kernel_initializer='normal',activation=\"relu\")(model)\n    model = Dense(32,kernel_initializer='normal',activation=\"relu\")(model)\n    \n    model = Dense(1,kernel_initializer='normal',activation=\"linear\")(model)\n    \n    return model","10019084":"Input_Sample = Input(shape=(x_train.shape[1],))\nOutput_ = RegressionModel(Input_Sample)\nEnhanceRegression = Model(inputs=Input_Sample, outputs=Output_)","1a6e2a01":"EnhanceRegression.compile(loss='mean_squared_error', optimizer='adam',metrics=['mse','mae'])\nEnhanceRegression.summary()","dfd264eb":"ES = EarlyStopping(monitor='val_loss', min_delta=0.5, patience=200, verbose=1, mode='auto', baseline=None,\n                              restore_best_weights=False)\nMC = ModelCheckpoint('best_model.h5', monitor='val_acc', mode='auto', verbose=1, save_best_only=True)","edb40097":"num_epochs =300\nnum_batch_size = 1080\nModelHistory = EnhanceRegression.fit(x_train, y_train, batch_size=num_batch_size, epochs=num_epochs, \n                                    validation_data=(x_test, y_test),\n                                     callbacks = [ES,MC],\n                                    verbose=1)","cd5fca4b":"#Loss Curves\nplt.figure(figsize=[20,9])\nplt.plot(ModelHistory.history['loss'], 'r')\nplt.plot(ModelHistory.history['val_loss'], 'b')\nplt.legend(['Training Loss','Validation Loss'])\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Loss Curves')","2a665ac1":"#Accuracy Curves\nplt.figure(figsize=[20,9])\nplt.plot(ModelHistory.history['mean_absolute_error'], 'r')\nplt.plot(ModelHistory.history['val_mean_absolute_error'], 'b')\nplt.legend(['Training Accuracy','Validation Accuracy'])\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Accuracy Curves')","01c95179":"#saved_model = load_model('best_model.h5')","1581c6b5":"y_pred_test = EnhanceRegression.predict(test)","4369a713":"prediction = y_pred_test.flatten()\nprediction ","d317cf86":"my_submission = pd.DataFrame({'id':test_id ,'scalar_coupling_constant': prediction })\nmy_submission.to_csv('SubmissionVictorX.csv', index=False)","2d6b94e0":"## Introduction\n**This is a continuation of my previous kernel. Link - [A Deep Dive into Atoms and Molecules](https:\/\/www.kaggle.com\/basu369victor\/a-deep-dive-into-atoms-and-molecules). In this kernel I have implemented all types of possible data visualizations with the available datasets, and have also implemented a K-Nearest Nighbour  regressor model for prediction. Please go check it out if you haven't and do not forget to upvote it if you like it.<br><br>**\n**Now I am trying to find out if regression with Deep Neural networks could help us achieving a better and more accurate prediction.. Lets see what happens next..**"}}