{"cell_type":{"86237e78":"code","cef04169":"code","7453e63f":"code","f5ec7822":"code","8a8f8409":"code","5eb696d7":"code","c1a4d5e2":"code","be53a636":"code","1e2a1eed":"code","8354a5ac":"code","3bf50341":"code","ff7d6153":"code","c6e4f377":"code","0d3b4623":"code","7920510e":"code","ba3fe9e0":"markdown","f8122fe0":"markdown","074f7272":"markdown","98c94b2d":"markdown","53d992ab":"markdown","67b11846":"markdown","62fc72c2":"markdown","0c61ea28":"markdown","1099a42f":"markdown","1934fa1c":"markdown","ab64880d":"markdown","cb80c04b":"markdown"},"source":{"86237e78":"# Basic Libraries to be installed before moving ahead\n!pip install pysafebrowsing\n!pip install tld\n!pip install whois\n!pip install geoip2","cef04169":"# Basic Initialisation\nimport time\nimport pandas as pd\nimport numpy as np\npd.set_option('mode.chained_assignment', None) #Switch off warning","7453e63f":"#Verifying pathname of dataset before loading\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename));\n        print(os.listdir(\"..\/input\"))","f5ec7822":"# Loading Dataset containing Raw Web Content, URL and IP Address (Output of MalCrawler)\ndef loadDataset():\n    df = pd.read_csv(\"\/kaggle\/input\/preprocessingsampledata\/PreprocessingSampleData.csv\")\n    return df\n\ndf = loadDataset()\ndf = df[['url','ip_add', 'content']] # The three Columns of the initial data\ndf","8a8f8409":"#Adding new blank columns to the dataframe df\ndf['geo_loc']=\"\"\ndf['url_len']=\"\"\ndf['js_len']=\"\"\ndf['js_obf_len']=\"\"\ndf['tld']=\"\"\ndf['who_is']=\"\"\ndf['https']=\"\"\ndf['label']=\"\"\ndf = df[['url','ip_add','geo_loc','url_len','js_len','js_obf_len','tld','who_is','https','content','label']]\n#df","5eb696d7":"# Filling the 'geo_loc' column of dataframe \nimport os\nimport geoip2.database\nimport socket\nimport time\n\nreader = geoip2.database.Reader('\/kaggle\/input\/geoipdatabase\/GeoLite2-Country.mmdb')\n\nfor x in df.index:\n    try:\n        ip_add = str(df['ip_add'][x])\n        response = reader.country(ip_add)\n        df['geo_loc'][x] = response.country.name\n        #print(x, \"Finished,value is:\",response.country.name)   \n    except Exception as msg:\n        df['geo_loc'][x] = \"\"\n        #print(x,\" Finished with Error Msg:\",msg)\n\nreader.close()\n#df","c1a4d5e2":"#Generating 'url_len' from 'url'\ndf['url_len'] = df['url'].str.len()\n#df","be53a636":"import re       #importing regex for string selection and parsing\n\ndef get_js_len_inKB(content): #Function for computing 'js_len from Web Content\n    js=re.findall(r'<script>(.*?)<\/script>',content)\n    complete_js=''.join(js)\n    js_len = len(content.encode('utf-8'))\/1000\n    return js_len\nfor x in df.index: #Computing and Putting 'js_len' in Pandas Dataframe\n    df['js_len'][x] = get_js_len_inKB(df['content'][x])\n\n#df","1e2a1eed":"# Computed using Selenium Emulator, thus will have to be run separately and then added\n# Code given in https:\/\/github.com\/lucianogiuseppe\/JS-Auto-DeObfuscator\/blob\/master\/jsado.py","8354a5ac":"#Filling up TLD column\nfrom tld import get_tld\n\nfor x in df.index:       \n    try:\n        u = df.url[x]\n        s = get_tld(str(u), fix_protocol=True)\n        df['tld'][x] = s\n    except:\n        pass\n#df","3bf50341":"#Whois processing\nimport whois\nstart_time = time.time()\n\nfor x in df.index:  \n    try:    \n        domain = whois.query(df['url'][x])\n        #print(domain.registrar)\n        if len(str(domain.registrar)) >1 :\n            df['who_is'][x]= 'complete'\n        else:\n            df['who_is'][x]= 'incomplete'\n    except Exception as msg:\n        #print(x,\", Error: \",msg)\n        df['who_is'][x]= 'incomplete'\n    #print(x,df['who_is'][x])\n\nprint(\"***Total Time taken --- %s seconds ---***\" % (time.time() - start_time))\n#df","ff7d6153":"# Alternate Code for Computing using WHOIS API\nfrom urllib.request  import  urlopen       # Importing url library\nimport  json                               # Importing the JSON Module\n\nurl =  'https:\/\/www.bits-pilani.ac.in'  #A sample URL\napiKey = 'at_YC7W9LM2w1lQOCMmN0KUe3OU7B8Jc'\nurl = 'https:\/\/www.whoisxmlapi.com\/whoisserver\/WhoisService?'\\\n    + 'domainName=' + url + '&apiKey=' + apiKey + \"&outputFormat=JSON\"\n\nwhois_data= urlopen(url).read().decode('utf8') #WHO IS info returned by API\ndata=json.loads(whois_data) # Converting it from JSON to a Python Dict Object \n#if data['registrarName']==\"\":\n    #who_is = 'incomplete'\n#else:\n    #who_is = 'complete'\n  \n# Sample of one URL is shown here\n# Similarly, who_is data is checked for all URLs in the dataset\n","c6e4f377":"# Filling the column https_status\nimport http.client\n\nstart_time = time.time()\n\nfor x in df.index:\n    https_status= False\n    try:\n        conn = http.client.HTTPSConnection(df['url'][x])\n        conn.request(\"HEAD\", \"\/\")\n        res = conn.getresponse()\n        if res.status == 200 or res.status==301 or res.status==302:\n            https_status= True   \n        #print(x,res.status,res.reason,https_status)\n    except Exception as msg:\n        df['https'][x]= 'no'\n        #print(x,\"Error: \",msg)\n    finally:\n        df['https'][x]= https_status\n        #conn.close\n\nprint(\"***Total Time taken --- %s seconds ---***\" % (time.time() - start_time))\n#df","0d3b4623":"# Filling the label of training set from Google Safe Browising API\nfrom pysafebrowsing import SafeBrowsing\nKEY= \"AIzaSyABO6DPGmHpCs8U5ii1Efkp1dUPJHQfGpo\"\n\nstart_time = time.time()\ns = SafeBrowsing(KEY)\n\nfor x in df.index:\n    \n    try:\n        url = df['url'][x]\n        r = s.lookup_urls([url])\n        label=r[url]['malicious']    \n        df['label']=label\n        #print(x, label)\n    except Exception as msg:\n        df['label']=\"\"\n        #print(x,\"Error: \",msg)\n\nprint(\"***Total Time taken --- %s seconds ---***\" % (time.time() - start_time))\n\n#df","7920510e":"# Saving the file\n#df.to_csv(\"Datasets\/processed_webdata_sample.csv\")","ba3fe9e0":"## Computing 'tld' Attribute","f8122fe0":"## Initialisation Code","074f7272":"## Allocation of Class Label ","98c94b2d":"# <font color='red'> Sample Pre-processing of Web Content for Dataset Preparation <\/font>","53d992ab":"## Computing the 'geo_loc' Attribute from IP Address","67b11846":"## Saving of Processed Data","62fc72c2":"## Computing 'js_obf_len'","0c61ea28":"## Computing 'js_len'","1099a42f":"## Computing 'who_is' Attribute","1934fa1c":"## Computing the 'https' Attribute","ab64880d":"## Loading the Sample Web Content Crawled & Collected by MalCrawler","cb80c04b":"## Computing 'url_len"}}