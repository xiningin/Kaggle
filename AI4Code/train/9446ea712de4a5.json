{"cell_type":{"354e4a48":"code","8cfa2d32":"code","98a538b4":"code","47b3de13":"code","7b0e595b":"code","108610ac":"code","11ae3b35":"code","63a819b2":"code","f53155f7":"code","ec8931bd":"code","8c64535c":"code","214273ed":"code","bcb4da3c":"code","9b41c6bf":"code","0f95e8c0":"code","f11540ef":"code","af67e125":"code","a3309b6e":"code","c54c3306":"code","650378c3":"code","d145988d":"code","319d9a9a":"code","b570fa3f":"code","c08bd6ba":"code","5a7e5863":"code","df55afc5":"code","2ca9a81a":"code","0e4d0ad7":"code","4ca5a75b":"code","7d665eee":"code","23031e72":"code","e474feed":"code","b5c33052":"code","3ac41cb1":"code","8d3078ea":"code","31b6e55e":"code","75d2162a":"code","d7f6895f":"code","26c93370":"markdown","a033df57":"markdown","3e6279b7":"markdown","c6a4ba15":"markdown","9f5fb2dc":"markdown","bc355362":"markdown","fa988edc":"markdown"},"source":{"354e4a48":"%matplotlib notebook\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import cm","8cfa2d32":"loans = pd.read_csv('..\/input\/loan-prediction-data\/train.csv')\nloans.head()","98a538b4":"loans.info()","47b3de13":"# data exploration\nloans.describe(include='all')","7b0e595b":"# eda with discrete variables\nsns.catplot(x='Loan_Status', col='Gender', kind='count', data=loans)","108610ac":"sns.catplot(x='Loan_Status', col='Married', kind='count', data=loans)","11ae3b35":"sns.catplot(x='Loan_Status', col='Dependents', kind='count', data=loans)","63a819b2":"sns.catplot(x='Loan_Status', col='Education', kind='count', data=loans)","f53155f7":"sns.catplot(x='Loan_Status', col='Self_Employed', kind='count', data=loans)","ec8931bd":"sns.catplot(x='Loan_Status', col='Credit_History', kind='count', data=loans)","8c64535c":"sns.catplot(x='Loan_Status', col='Property_Area', kind='count', data=loans)","214273ed":"# eda with numeric variables\nX_con = loans[['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term']]\ny_con = loans['Loan_Status']\n\ncmap = cm.get_cmap('gnuplot')\nscatter = pd.plotting.scatter_matrix(X_con, marker = 'o', s=40, hist_kwds={'bins':15}, figsize=(9,9), cmap=cmap)","bcb4da3c":"# naive classifier approving all loans will be correct 68.7% of the time (baseline)\nloans.Loan_Status.value_counts(normalize=True)","9b41c6bf":"# clean data\nloans['Dependents'] = loans['Dependents'].fillna(0).apply(lambda x: int(3) if x == '3+' else int(x))","0f95e8c0":"# remove outliers","f11540ef":"# impute missing values\n\n# assume Male if Gender not entered (modal)\nloans['Gender'].fillna('Male', inplace=True)\n# assume Single if Married not entered \nloans['Married'].fillna('No', inplace=True)\n# assume None if Dependents not entered \nloans['Dependents'].fillna(0, inplace=True)\n# assume Self-employed if Self_Employed not entered \nloans['Self_Employed'].fillna('Yes', inplace=True)\n# assume Bad if Credit History not entered \nloans['Credit_History'].fillna(0.0, inplace=True)\n\n# assume median values for continuous variables\nloans['LoanAmount'].fillna(loans['LoanAmount'].median(), inplace=True)\nloans['Loan_Amount_Term'].fillna(loans['Loan_Amount_Term'].median(), inplace=True)\n\nloans.info()","af67e125":"# encode categorical features\ncat_feats = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Credit_History', 'Property_Area']\nloans = pd.get_dummies(loans, columns=cat_feats)\n\nloans.head()\nloans.info()","a3309b6e":"# engineer new features\nloans['Loan_To_Income'] = loans['LoanAmount'] \/ loans['ApplicantIncome']\nloans['Loan_To_TotalIncome'] = loans['LoanAmount'] \/ (loans['ApplicantIncome'] + loans['CoapplicantIncome'])\nloans['Debt_Repayment'] = loans['LoanAmount'] \/ loans['Loan_Amount_Term']","c54c3306":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n#from sklearn.grid_search import GridSearchCV\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_score, recall_score, f1_score","650378c3":"# training and test sets\nX = loans.iloc[:,6:].values\n#X = loans.iloc[:,list(range(1,5))+list(range(6,23))].values\ny = loans.iloc[:,5].values\nenc = LabelEncoder()\ny = enc.fit_transform(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=11)\nX_train","d145988d":"# feature scaling\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","319d9a9a":"# model selection: want high accuracy high precision\nclassifiers = [LogisticRegression(),\n               KNeighborsClassifier(n_neighbors = 5),\n               SVC(kernel = 'rbf'),\n               DecisionTreeClassifier(max_depth=3),\n               GaussianNB(),\n               RandomForestClassifier(n_estimators=10, random_state=7, max_depth=3),\n               GradientBoostingClassifier(random_state=7)]\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    #clf.fit(X_train_scaled, y_train)\n    y_pred = clf.predict(X_test)\n    #y_pred = clf.predict(X_test_scaled)\n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    print(accuracy, precision, recall, f1, type(clf).__name__)","b570fa3f":"# training and cross-validation\n\n#clf = LogisticRegression()\n#clf = KNeighborsClassifier(n_neighbors = 5)\n#clf = SVC(kernel = 'rbf')\nclf = DecisionTreeClassifier(max_depth=3)\n#clf = GaussianNB()\n#clf = RandomForestClassifier(n_estimators=10, random_state=7, max_depth=3)\n#clf = GradientBoostingClassifier(random_state=7)\nclf.fit(X_train, y_train)","c08bd6ba":"new_user = np.array([1, 1, 1, 1, 1, 1, 0, 0, 1]).reshape(1,-1)\ny_pred = clf.predict(X_test)\n\ny_pred","5a7e5863":"accuracy_score(y_test, y_pred)","df55afc5":"confusion_matrix(y_test, y_pred)","2ca9a81a":"print(classification_report(y_test, y_pred))","0e4d0ad7":"# Setup the hyperparameter grid\ndep = np.arange(1,9)\nparam_grid = {'max_depth' : dep}\n\n# Instantiate a decision tree classifier: clf\nclf = DecisionTreeClassifier()\n\n# Instantiate the GridSearchCV object: clf_cv\nclf_cv = GridSearchCV(clf, param_grid=param_grid, cv=5)\n\n# Fit it to the data\nclf_cv.fit(X, y)\n\n# Print the tuned parameter and score\nprint(\"Tuned Decision Tree Parameters: {}\".format(clf_cv.best_params_))\nprint(\"Best score is {}\".format(clf_cv.best_score_))","4ca5a75b":"# Setup the hyperparameter grid\ndep = np.arange(1,10)\nparam_grid = {'max_depth' : dep, 'n_estimators': dep}\n\n# Instantiate a decision tree classifier: clf\nclf = RandomForestClassifier()\n\n# Instantiate the GridSearchCV object: clf_cv\nclf_cv = GridSearchCV(clf, param_grid=param_grid, cv=5)\n\n# Fit it to the data\nclf_cv.fit(X, y)\n\n# Print the tuned parameter and score\nprint(\"Tuned Decision Tree Parameters: {}\".format(clf_cv.best_params_))\nprint(\"Best score is {}\".format(clf_cv.best_score_))","7d665eee":"# dash web app with form gui for user input and realtime output of result \n# python dash_frontend.py\n# http:\/\/127.0.0.1:8050\/ \n\nimport pickle","23031e72":"# save model\nfile = '.\/models\/clf.sav'\nfhand = open(file, 'wb')\npickle.dump(clf, fhand)","e474feed":"def pred_loan(x1, x2, x3, x4, x5, x6, x7, x8, x9):\n    file = '.\/models\/clf.sav'\n    model = pickle.load(open(file, 'rb'))\n    new_user = np.array([x1, x2, x3, x4, x5, x6, x7, x8, x9]).reshape(1,-1)\n    y_pred = model.predict(new_user)\n    return y_pred","b5c33052":"pred_loan(1, 0, 0, 1, 0, 1, 1, 0, 0)[0]","3ac41cb1":"from models import pred_loan as pred\npred(1, 0, 0, 1, 0, 1, 1, 0, 0)","8d3078ea":"import dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output\nfrom models import pred_loan \n\nexternal_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\n\napp = dash.Dash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div([\n    html.H6(\"Enter 1 if True 0 if False:\"),\n    html.Div([\"Male?: \",\n              dcc.Input(id='my-input-1', value=1, type='text')]),\n    html.Div([\"Married?: \",\n              dcc.Input(id='my-input-2', value=0, type='text')]),\n    html.Div([\"Family?: \",\n              dcc.Input(id='my-input-3', value=0, type='text')]),\n    html.Div([\"Graduate?: \",\n              dcc.Input(id='my-input-4', value=1, type='text')]),\n    html.Div([\"Employed?: \",\n              dcc.Input(id='my-input-5', value=0, type='text')]),\n    html.Div([\"Credit-worthy?: \",\n              dcc.Input(id='my-input-6', value=1, type='text')]),\n    html.Div([\"Urban?: \",\n              dcc.Input(id='my-input-7', value=1, type='text')]),\n    html.Div([\"Semi-urban?: \",\n              dcc.Input(id='my-input-8', value=0, type='text')]),\n    html.Div([\"Rural?: \",\n              dcc.Input(id='my-input-9', value=0, type='text')]),\n    html.Br(),\n    html.Div(id='my-output'),\n\n])\n\n@app.callback(\n    Output(component_id='my-output', component_property='children'),\n    [Input(component_id='my-input-1', component_property='value'),\n    Input(component_id='my-input-2', component_property='value'),\n    Input(component_id='my-input-3', component_property='value'),\n    Input(component_id='my-input-4', component_property='value'),\n    Input(component_id='my-input-5', component_property='value'),\n    Input(component_id='my-input-6', component_property='value'),\n    Input(component_id='my-input-7', component_property='value'),\n    Input(component_id='my-input-8', component_property='value'),\n    Input(component_id='my-input-9', component_property='value'),\n    ]\n)\ndef update_output_div(x1, x2, x3, x4, x5, x6, x7, x8, x9):\n    # call function to input features x and output prediction y\n    y = pred_loan(x1, x2, x3, x4, x5, x6, x7, x8, x9)\n    return 'Output: {}'.format(y)\n\n\nif __name__ == '__main__':\n    app.run_server(debug=True)","31b6e55e":"# flask REST API \n# python flaskapi.py\n# http:\/\/localhost:5000\/loan\n\nimport requests","75d2162a":"from flask import Flask, json, request\nfrom models import pred_loan \n\napi = Flask(__name__)\n\n@api.route('\/loans', methods=['POST'])\ndef post_loans():\n    x1 = request.form['is_male']\n    x2 = request.form['is_married']\n    x3 = request.form['is_family']\n    x4 = request.form['is_graduate']\n    x5 = request.form['is_employed']\n    x6 = request.form['is_creditworthy']\n    x7 = request.form['is_urban']\n    x8 = request.form['is_semi']\n    x9 = request.form['is_rural']\n    y = pred_loan(x1, x2, x3, x4, x5, x6, x7, x8, x9)\n    return json.dumps({\"loan\": y}), 201\n\nif __name__ == '__main__':\n    api.run()","d7f6895f":"# example POST request for applicant (myself)\nurl = 'http:\/\/localhost:5000\/loans'\nparams = {'is_male': 1,\n         'is_married': 0,\n         'is_family': 0,\n         'is_graduate': 1,\n         'is_employed': 0,\n         'is_creditworthy': 1,\n         'is_urban': 1,\n         'is_semi': 0,\n         'is_rural': 0}\n\nrequests.post(url, data = params).json()","26c93370":"## Data pre-processing","a033df57":"# Task 1: - Data analysis and ML Classifier","3e6279b7":"## Data Exploration","c6a4ba15":"## Modelling","9f5fb2dc":"# Task 2.2: - Backend","bc355362":"# Task 2.1: - Frontend","fa988edc":"## Variable Analysis"}}