{"cell_type":{"d18cd24a":"code","32e727e1":"code","f9b73534":"code","74db5146":"code","12b0a8c0":"code","d5f97312":"code","8fc6826c":"code","effef5d7":"code","e34e9ee7":"code","2235f234":"code","256c41ab":"code","fac44246":"code","1e8672f5":"code","8540622f":"code","25f21bb3":"code","2032f9b3":"code","d41287e9":"code","e12a764d":"code","5a8804d5":"code","218d6c52":"code","435043ce":"code","43b7e1c3":"code","42884046":"code","8239b3ad":"code","eaa4d529":"code","605fa70c":"code","78b8e5dc":"code","d4502157":"code","2159e386":"code","da643921":"code","97026573":"code","a90537de":"code","4b2a41ae":"code","81e2434b":"code","fb35b18c":"code","77f1e2a8":"code","b9bcb9af":"code","66dc7518":"code","64ffe685":"markdown","c6849e7c":"markdown","433bbeb0":"markdown","429883fe":"markdown","1ae4b718":"markdown","75891454":"markdown","affae688":"markdown","9d347725":"markdown","81833f7a":"markdown","76025e7f":"markdown","6223cbbf":"markdown","958667f5":"markdown"},"source":{"d18cd24a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32e727e1":"train = pd.read_csv('\/kaggle\/input\/unsw-nb15\/UNSW_NB15_testing-set.csv', sep=',', encoding='cp1252')\ntest = pd.read_csv('\/kaggle\/input\/unsw-nb15\/UNSW_NB15_training-set.csv', sep=',', encoding='cp1252')\ntrain.shape, test.shape","f9b73534":"df = pd.concat([train, test])\ndf.shape","74db5146":"pd.set_option('display.max_columns', None)\npd.DataFrame(df.isna().sum().to_dict(), index=[0])","12b0a8c0":"df.columns","d5f97312":"df.label.value_counts().plot.bar()","8fc6826c":"df.label.value_counts(normalize=True).plot.bar()","effef5d7":"df.label.value_counts(), df.label.value_counts(normalize=True)","e34e9ee7":"df.attack_cat.value_counts().plot.bar()","2235f234":"df.dtypes.value_counts()","256c41ab":"cat_features = df.columns[df.dtypes == 'object']\ncat_features","fac44246":"for i in cat_features:\n    if i == 'proto':\n        print(i, '\\n', df[i].value_counts().to_dict())\n    else :\n        plt.figure()\n        df[i].value_counts().plot.bar()","1e8672f5":"num_features = df.columns[df.dtypes != 'object']\nnum_features","8540622f":"import seaborn as sns\nimport warnings \nwarnings.filterwarnings('ignore')\n\n\nfor i in num_features:\n    plt.figure()\n    sns.distplot(df[i])","25f21bb3":"corr = df.corr()","2032f9b3":"import seaborn as sns\n\nsns.set_theme('notebook')\n\nmask = np.triu(np.ones_like(corr, dtype=bool))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nplt.figure(figsize=(20,12))\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0, square=True, linewidths=1.)","d41287e9":"from sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer","e12a764d":"Y = df.label\nX = df.drop(['label', 'attack_cat'], axis=1)","5a8804d5":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","218d6c52":"num_pipeline = make_pipeline(SimpleImputer(),\n                            StandardScaler())\n\ncat_pipeline = make_pipeline(SimpleImputer(strategy='most_frequent'),\n                            OneHotEncoder(handle_unknown='ignore'))","435043ce":"preprocessor = make_column_transformer((num_pipeline, num_features),\n                                      (cat_pipeline, cat_features))","43b7e1c3":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = make_pipeline(preprocessor, RandomForestClassifier(n_estimators=500, n_jobs=10, bootstrap=True, random_state=42))","42884046":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.2, shuffle=True)","8239b3ad":"model = rfc.fit(X_train, y_train)","eaa4d529":"from sklearn.metrics import classification_report\n\nypred = model.predict(X_test)\nprint(classification_report(y_test, ypred))","605fa70c":"Y = df.label\nX = df.drop(['label', '\u00ef\u00bb\u00bfid', 'attack_cat'], axis=1)","78b8e5dc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.2, shuffle=True)","d4502157":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","2159e386":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","da643921":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","97026573":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","a90537de":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","4b2a41ae":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","81e2434b":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","fb35b18c":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","77f1e2a8":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","b9bcb9af":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","66dc7518":"cat_features = X.columns[X.dtypes == 'object']\nnum_features = X.columns[X.dtypes != 'object']","64ffe685":"---\n# **attack_cat**","c6849e7c":"---\n# **label**","433bbeb0":"---\n# **Columns**","429883fe":"---\n## **Cat features**","1ae4b718":"## **Concatenate test and train set**","75891454":"---\n# **Read data**","affae688":"---\n# **Correlation**","9d347725":"---\n# **cols types**","81833f7a":"---\n# **Num features**","76025e7f":"> ----\n## dropping some features","6223cbbf":"---\n# **Missing values**","958667f5":"---\n# **PIPELINES**"}}