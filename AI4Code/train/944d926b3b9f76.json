{"cell_type":{"a810b800":"code","60434140":"code","4ddcbe3d":"code","ae1d357a":"code","2b017256":"code","007871e5":"code","d16a82af":"code","c15ec216":"code","7fe3ef50":"code","48cd8e08":"code","88e93b06":"code","ff605ec9":"code","a5bbe1c3":"code","50bad4be":"code","dee5d668":"code","a304c002":"code","86b9133a":"code","d195b427":"code","8e8b6bf3":"code","df50fe3e":"code","76b8945e":"code","88426ece":"code","29a4e8a5":"code","4af9b3db":"code","472d1248":"code","2a88cc5b":"code","2ed93a97":"code","49d79052":"code","8ae11fba":"code","7a7378f6":"code","28f3b776":"code","a61a5579":"code","f1a14f11":"code","d8d9fe4a":"code","077b64c6":"code","ca0a09e2":"code","98e63f61":"code","e4b936e9":"code","d15195a6":"code","7cf1c636":"code","5929f451":"code","757a9af2":"code","47cf2f60":"code","5b02108d":"code","a2679b3a":"code","50206fc0":"code","5d1085f4":"code","b64b18cf":"code","d7caa9c7":"code","ea482421":"code","ab785c3c":"code","b916927d":"code","545eca9c":"code","f52e610a":"code","63e689d3":"code","e8aaa65f":"code","621d87db":"code","6843190a":"code","603cde4b":"code","bb1bbf04":"markdown","29aa5f19":"markdown","662c457c":"markdown","b85778e9":"markdown","b2ffa6e2":"markdown","40eee184":"markdown","951a7cc4":"markdown","42c36225":"markdown","9fb356c4":"markdown","11199ae5":"markdown","61274593":"markdown","7555dca4":"markdown","cc76f26f":"markdown","8f8d182d":"markdown","9af259a7":"markdown"},"source":{"a810b800":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60434140":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","4ddcbe3d":"df=pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')\ndata_df=df[0:100].copy()\ndata=data_df.copy()","ae1d357a":"data.head()","2b017256":"data.shape","007871e5":"data.drop(['enrollee_id'],axis=1,inplace=True)\n\n","d16a82af":"pred=data_df['target']","c15ec216":"data.isnull().sum()","7fe3ef50":"data['city'].nunique()","48cd8e08":"data.drop(['city'],axis=1,inplace=True)","88e93b06":"data.head()","ff605ec9":"plt.figure(figsize=(12, 5))\nsns.kdeplot(data=data, x=\"city_development_index\", hue=\"target\",cut = 0,palette='Set1')","a5bbe1c3":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'gender',hue='target',data=data)","50bad4be":"data[\"gender\"].fillna(\"Male\", inplace = True)\n\n\ngen = pd.get_dummies(data['gender'])\ndata.drop(['gender'],axis=1,inplace=True)\ndata = pd.concat([data,gen],axis=1)\n\n\ndata.drop(['Other'],axis=1,inplace=True) ","dee5d668":"data['relevent_experience'].isnull().sum()","a304c002":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'relevent_experience',hue='target',data=data,palette='deep')","86b9133a":"rel = pd.get_dummies(data['relevent_experience'])\ndata.drop(['relevent_experience'],axis=1,inplace=True)\ndata = pd.concat([data,rel],axis=1)\n\n\ndata.drop(['No relevent experience'],axis=1,inplace=True) ","d195b427":"data['enrolled_university'].isnull().sum()","8e8b6bf3":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'enrolled_university',hue='target',data=data,palette='Set2')","df50fe3e":"data[\"enrolled_university\"].fillna(\"no_enrollment\", inplace = True)\n\n\nenr = pd.get_dummies(data['enrolled_university'])\ndata.drop(['enrolled_university'],axis=1,inplace=True)\ndata = pd.concat([data,enr],axis=1)\n\n\ndata.drop(['Part time course'],axis=1,inplace=True) ","76b8945e":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'education_level',hue='target',data=data,palette='cool')","88426ece":"data[\"education_level\"].fillna(\"Graduate\", inplace = True)\n\n\nedu = pd.get_dummies(data['education_level'])\ndata.drop(['education_level'],axis=1,inplace=True)\ndata = pd.concat([data,edu],axis=1)\n\n\ndata.drop(['Phd'],axis=1,inplace=True) ","29a4e8a5":"data['major_discipline'].isnull().sum()","4af9b3db":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'major_discipline',hue='target',data=data,palette='YlGn')","472d1248":"data[\"major_discipline\"].fillna(\"STEM\", inplace = True)\n\n\nmd = pd.get_dummies(data['major_discipline'])\ndata.drop(['major_discipline'],axis=1,inplace=True)\ndata = pd.concat([data,md],axis=1)\n\n\ndata.drop(['Business Degree','Arts','Humanities','No Major'],axis=1,inplace=True) ","2a88cc5b":"data[\"experience\"].fillna(\"20\", inplace = True)\n\ndata.replace({\"experience\":{\">20\":20,\"<1\":1}},inplace = True)\n\ndata[\"experience\"] = data[\"experience\"].astype(\"int64\")","2ed93a97":"plt.figure(figsize=(16, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'experience',hue=\"target\",data=data,palette='turbo')","49d79052":"def yearexp(x):\n    if  (x['experience'])  >= 1 and (x['experience'])  <= 5 :\n        return 1\n    elif  (x['experience'])  >= 6 and (x['experience'])  <= 10 :\n        return 2\n    elif  (x['experience'])  >= 11 and (x['experience'])  <= 15 :\n        return 3\n    else :\n        return 4\n\ndata['exp_count'] = data.apply(yearexp, axis = 1)","8ae11fba":"plt.figure(figsize=(10, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'exp_count',hue=\"target\",data=data,palette='rocket')","7a7378f6":"data.drop(['experience'],axis=1,inplace=True) ","28f3b776":"data.drop(['exp_count'],axis=1,inplace=True) ","a61a5579":"plt.figure(figsize=(8, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'company_size',hue='target',data=data_df,palette='spring')","f1a14f11":"data.drop(['company_size'],axis=1,inplace=True) ","d8d9fe4a":"plt.figure(figsize=(10, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'company_type',hue='target',data=data_df,palette='winter_r')","077b64c6":"data[\"company_type\"].fillna(\"Pvt Ltd\", inplace = True)\n\n\nct = pd.get_dummies(data['company_type'])\ndata.drop(['company_type'],axis=1,inplace=True)\ndata = pd.concat([data,ct],axis=1)\n\n\ndata.drop(['Funded Startup','Early Stage Startup','NGO','Other'],axis=1,inplace=True) ","ca0a09e2":"plt.figure(figsize=(10, 5))\nsns.set_style('whitegrid')\nsns.countplot(x = 'last_new_job',hue='target',data=data_df,palette='bwr')","98e63f61":"data.drop(['last_new_job'],axis=1,inplace=True) ","e4b936e9":"plt.figure(figsize=(12, 5))\nsns.set_style('whitegrid')\nsns.kdeplot(data=data, x=\"training_hours\", hue=\"target\",cut = 0,palette='Set1')","d15195a6":"plt.figure(figsize=(12, 5))\nsns.kdeplot(data=data_df, x=\"training_hours\", hue=\"relevent_experience\",cut = 0,palette='Set2')","7cf1c636":"plt.figure(figsize=(8, 6))\nsns.set_style('whitegrid')\nsns.countplot(x = 'education_level',hue='relevent_experience',data=data_df,palette='PuRd')","5929f451":"data.head()","757a9af2":"data.drop(['target'],axis=1,inplace=True)","47cf2f60":"data.isnull().sum()","5b02108d":"from sklearn.preprocessing import MinMaxScaler\ndata[\"training_hours\"] = MinMaxScaler().fit_transform(np.array(data[\"training_hours\"]).reshape(-1,1))","a2679b3a":"data.head()","50206fc0":"from sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import confusion_matrix\n\nclassifiers = ['LinearSVM', 'RadialSVM', \n               'Logistic',  'RandomForest', \n               'KNeighbors','DecisionTree', \n               'GradientBoosting']\n\nmodels = [svm.SVC(kernel='linear'),\n          svm.SVC(kernel='rbf'),\n          LogisticRegression(max_iter = 1000),\n          RandomForestClassifier(n_estimators=200, random_state=0),\n          DecisionTreeClassifier(random_state=0),\n          KNeighborsClassifier(),\n          GradientBoostingClassifier(random_state=0)]","5d1085f4":"from sklearn.model_selection import train_test_split\ndef split(df,label):\n    X_tr, X_te, Y_tr, Y_te = train_test_split(df, label, test_size=0.25, random_state=42)\n    return X_tr, X_te, Y_tr, Y_te\n\ndef acc_score(df,label):\n    Score = pd.DataFrame({\"Classifier\":classifiers})\n    j = 0\n    acc = []\n    X_train,X_test,Y_train,Y_test = split(df,label)\n    for i in models:\n        model = i\n        model.fit(X_train,Y_train)\n        predictions = model.predict(X_test)\n        acc.append(accuracy_score(Y_test,predictions))\n        j = j+1     \n    Score[\"Accuracy\"] = acc\n    Score.sort_values(by=\"Accuracy\", ascending=False,inplace = True)\n    Score.reset_index(drop=True, inplace=True)\n    return Score","b64b18cf":"rf = RandomForestClassifier(n_estimators=200, random_state=0)\nX_tr, X_te, Y_tr, Y_te = train_test_split(data, pred, test_size=0.25, random_state=42)\nrf.fit(X_tr, Y_tr)\nsorted_idx = rf.feature_importances_.argsort()\nplt.barh(data.columns[sorted_idx], rf.feature_importances_[sorted_idx],color = 'orange')\nplt.xlabel(\"Random Forest Feature Importance\")","d7caa9c7":"new_data = data[[\"training_hours\",\"city_development_index\"]]\n","ea482421":"acc_score(new_data,pred)\n","ab785c3c":"from sklearn.ensemble import VotingClassifier\n\nX_tr, X_te, Y_tr, Y_te = train_test_split(new_data, pred, test_size=0.25, random_state=42)\nestimator = []\nestimator.append(('GB', GradientBoostingClassifier(random_state=0)))\nestimator.append(('SVC',svm.SVC(kernel='rbf')))\nestimator.append(('RF',RandomForestClassifier(n_estimators=200, random_state=0)))\n\nvoting = VotingClassifier(estimators = estimator)\nvoting.fit(X_tr, Y_tr)\nY_pred1 = voting.predict(X_te)\n  \nscore = accuracy_score(Y_te, Y_pred1)\nprint(\"Voting Score :\",score)","b916927d":"gbc = GradientBoostingClassifier(random_state=0)\n\nparam_grid = { \n    'learning_rate':[0.01,0.001],\n    'n_estimators': [600,750,800],\n    'max_features': [ 'sqrt'],\n    'max_depth' : [8,9,10]\n}","545eca9c":"from sklearn.model_selection import GridSearchCV\nX_tr, X_te, Y_tr, Y_te = train_test_split(new_data, pred, test_size=0.25, random_state=42)\nCV_gbc = GridSearchCV(estimator=gbc, param_grid=param_grid, cv= 5,n_jobs = 1)\nCV_gbc.fit(X_tr,Y_tr)","f52e610a":"CV_gbc.best_params_","63e689d3":"tuned_gbc = GradientBoostingClassifier(learning_rate= 0.001,\n                                       max_depth= 9,\n                                       max_features= 'sqrt',\n                                       n_estimators= 750,\n                                       random_state=0)","e8aaa65f":"tuned_gbc.fit(X_tr,Y_tr)\nY_pred = tuned_gbc.predict(X_te)\n\nprint(\"Accuracy after optimization :\",accuracy_score(Y_te, Y_pred))","621d87db":"cm = confusion_matrix(Y_te, Y_pred)\nprint(cm)\n\nplt.figure(figsize = (8,6))\nsns.heatmap(cm, annot=True, cmap = 'YlOrBr_r')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","6843190a":"from sklearn.metrics import classification_report\nprint(classification_report(Y_te, Y_pred))","603cde4b":"tuned_gbc.fit(X_tr,Y_tr)\nprobs = tuned_gbc.predict_proba(X_te)\npreds = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(Y_te, preds)\nroc_auc = metrics.auc(fpr, tpr)\n\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","bb1bbf04":"## Feature Importance","29aa5f19":"## 5. Enrolled University\nThis feature mentions the type of university course enrolled if any.","662c457c":"#### Data Cleansing ","b85778e9":"## Hyperameter Tunning","b2ffa6e2":"## Education Level","40eee184":"## 3. Gender","951a7cc4":"## ROC Curve","42c36225":"## 8. Experience\nThis feature mentions the candidate's total experience in years.\u00b6","9fb356c4":"## 7. Major Discipline\nThis feature mentions the education major discipline of the candidate.","11199ae5":"## 1. City","61274593":"## 4. Relevant Experience\nThis feature tells whether the candidate has some relevant experience or not.","7555dca4":"## Confusion matrix\n","cc76f26f":"## 2. city_development_index","8f8d182d":"## We drop this feature because it does not provide any useful insight.\n9. Company Size\nThis feature mentions the number of employees in the current employer's company.","9af259a7":"## Ensembling Model"}}