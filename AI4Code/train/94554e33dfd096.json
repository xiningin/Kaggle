{"cell_type":{"160fdcff":"code","bdaf076e":"code","738003ba":"code","f2178962":"code","9233238b":"code","21782191":"code","8f23bdb8":"code","df7745e3":"code","5d7cc03f":"code","f1d9a3e2":"code","f76a92b2":"code","bf7dfd1f":"code","718dbf0c":"code","0a4c6943":"code","8f023877":"code","c710f5ad":"markdown","98f92632":"markdown","bd3b5337":"markdown","832b0577":"markdown","fe740554":"markdown","9b9a90be":"markdown","f580024a":"markdown","c70cb1a1":"markdown","c05af75f":"markdown","3db6240d":"markdown","8a4697d2":"markdown","3ef72f06":"markdown","77838267":"markdown"},"source":{"160fdcff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n# Any results you write to the current directory are saved as output.","bdaf076e":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mig\n","738003ba":"import pathlib\nPATH = '..\/input\/intel-image-classification\/seg_train\/seg_train'\ndata_dir = pathlib.Path(PATH)\ntest_path = '..\/input\/intel-image-classification\/seg_test\/seg_test'\ntest_data_dir = pathlib.Path(test_path)","f2178962":"CLASS_NAMES = np.array([item.name for item in data_dir.glob('*') if item.name != \"LICENSE.txt\"])\nCLASS_NAMES","9233238b":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nIDG = ImageDataGenerator(rescale = 1.\/255, validation_split=0.2,\n                         rotation_range=10,\n    zoom_range = 0.1,\n    width_shift_range=0.1,\n    height_shift_range=0.1,)\n\ntrain_data = IDG.flow_from_directory(PATH,target_size=(150,150),batch_size=64,classes = list(CLASS_NAMES),subset='training')\nvalidation_data = IDG.flow_from_directory(PATH,target_size=(150,150),batch_size=64,classes = list(CLASS_NAMES),subset='validation')\n","21782191":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nIDG_test = ImageDataGenerator(rescale = 1.\/255)\ntest_data = IDG_test.flow_from_directory(test_path,target_size=(150,150),batch_size=64,classes = list(CLASS_NAMES))","8f23bdb8":"def show_batch(image_batch, label_batch):\n  plt.figure(figsize=(10,10))\n  for n in range(25):\n      ax = plt.subplot(5,5,n+1)\n      plt.imshow(image_batch[n])\n      plt.title(CLASS_NAMES[label_batch[n].argmax()])\n      plt.axis('off')\n     ","df7745e3":"image_batch, label_batch = next(train_data)\nshow_batch(image_batch, label_batch)\n","5d7cc03f":"from keras.models import Sequential\nfrom keras import layers\nfrom keras.layers import BatchNormalization\nfrom keras import regularizers\nmodel = Sequential()\n##Convutional Layers\nmodel.add(layers.Conv2D(32, (3, 3),input_shape=(150,150,3)))\n\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(layers.Conv2D(32, (3, 3)))\n\nmodel.add(layers.Activation('relu'))\n\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3)))\n\nmodel.add(layers.Activation('relu'))\n\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3)))\n\nmodel.add(layers.Activation('relu'))\n\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\n\n##Fully Conneted Layers\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dropout(.5))\nmodel.add(layers.Dense(100,activation='relu'))\nmodel.add(layers.Dropout(.5))\nmodel.add(layers.Dense(len(CLASS_NAMES),activation='softmax'))","f1d9a3e2":"model.summary()","f76a92b2":"model.compile(optimizer='adam', loss=tf.keras.losses.categorical_crossentropy, metrics=['accuracy'])\nhistory = model.fit_generator(train_data, epochs=25, steps_per_epoch = train_data.samples\/\/64, validation_data=validation_data, validation_steps = validation_data.samples\/\/64)","bf7dfd1f":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","718dbf0c":"plt.figure(figsize=(20,20))\n#for _ in range(3):\nsam_x,sam_y = next(test_data) \npred_ = model.predict(sam_x)\nfor i in range(15):\n    pred,y = pred_[i].argmax(), sam_y[i].argmax()\n    plt.subplot(4,4,i+1)\n    plt.imshow(sam_x[i])\n    title_ = 'Predict:' + str(CLASS_NAMES[pred])+ ';   Label:' + str(CLASS_NAMES[y])\n    plt.title(title_,size=11)\nplt.show()","0a4c6943":"model.evaluate(test_data)","8f023877":"model.save_weights(\"model.h5\")","c710f5ad":"# Train Data and Augmenting Train Data\nAugmenting Training Data for more distorted images to get more variety \nthis augmentation is done by ImageDataGenerator and its method flow_from_directory\nHere augmented images are produced and replaces original Image\nflow_from_directory produces a object which contains images and label batches\nIn ImageDataGenerator we also split data into train data and validaton Data","98f92632":"**Hey Kagglers,\nClassification is done by Convutional Neural Network\nFirst we are importing the libraries**","bd3b5337":"# Predicting Images","832b0577":"# Learning Curves\n**Loss and Accuracy curve for train and validation data**","fe740554":"# Saving Model","9b9a90be":"# COMPILING AND TRAINING\nTraining is done by adam optimizer with 25 epochs","f580024a":" **Function for Ploting a batch of image along with its label**","c70cb1a1":"# CNN for Image Classification","c05af75f":"# Setting Path for Datasets","3db6240d":"# **Convutional Neural Network Architecture**","8a4697d2":"**Producing test data without augmenting**","3ef72f06":"# Testing using test data","77838267":"# Classes\n**Defining Class Names from folder names **\nIn the dataset each folder contains images of a particular class \nand folder name is same as class name so we extract classname from folder name "}}