{"cell_type":{"63a7fbe3":"code","4ecd67c2":"code","a86e4384":"code","7dc6106b":"code","83c06365":"code","95052d1a":"code","eb30192a":"code","37672242":"code","a96b7a4a":"code","ad7dc9d6":"code","96ed6224":"code","f4830a9c":"code","11472db3":"code","e0a6d477":"code","00ff8351":"markdown","b5e0cf9a":"markdown"},"source":{"63a7fbe3":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \nimport os\n\n# visualization\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport missingno as msno\nimport networkx as nx\nimport plotly.graph_objects as go\nfrom IPython.core.display import display, HTML\nfrom matplotlib.gridspec import GridSpec\n\n# Graphics in retina format \n%config InlineBackend.figure_format = 'retina' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# Disable warnings in Anaconda\nimport warnings\nwarnings.filterwarnings('ignore')","4ecd67c2":"# Importing the 2017,2018 and 2019 survey dataset\n\n#Importing the 2019 Dataset\nmcq19 = pd.read_csv('..\/input\/kaggle-survey-2019\/multiple_choice_responses.csv')\nschema19 = pd.read_csv('..\/input\/kaggle-survey-2019\/survey_schema.csv')\n\n\n#Importing the 2018 Dataset\nmcq18 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\nschema18 = pd.read_csv('..\/input\/kaggle-survey-2018\/SurveySchema.csv')\n","a86e4384":"mcq18.rename(columns=mcq18.iloc[0], inplace=True)\nmcq18.drop(0, axis=0, inplace=True)\nmcq19.rename(columns=mcq19.iloc[0], inplace=True)\nmcq19.drop(0, axis=0, inplace=True)\nschema18.rename(columns=schema18.iloc[0], inplace=True)\nschema18.drop(0, axis=0, inplace=True)\nschema19.rename(columns=schema19.iloc[0], inplace=True)\nschema19.drop(0, axis=0, inplace=True)","7dc6106b":"def extract_19_data(qstring):\n    lst = []\n    for i in mcq19.columns:\n        if i[:len(qstring)]==qstring:\n            lst.append(i)\n    for i in schema19.columns:\n        if i[:len(qstring)]==qstring:\n            num = schema19[i].iloc[0]\n    df = mcq19[lst]\n    df_choice = pd.Series(df.columns).apply(lambda x: ''.join(x.split('-')[2:]))\n    df_colnames = {b:a for a, b in zip(df_choice.values, df.columns)}\n    df.rename(columns=df_colnames, inplace=True)  \n    return df, df_choice, num","83c06365":"def extract_18_data(qstring):\n    lst = []\n    for i in mcq18.columns:\n        if i[:len(qstring)]==qstring:\n            lst.append(i)\n    for i in schema18.columns:\n        if i[:len(qstring)]==qstring:\n            numResponses = schema18[i].iloc[0]\n       \n    df = mcq18[lst]\n    df_choice = pd.Series(df.columns).apply(lambda x: ''.join(x.split('-')[2:]))\n    df_colnames = {b:a for a, b in zip(df_choice.values, df.columns)}\n    df.rename(columns=df_colnames, inplace=True)\n    return df, df_choice, numResponses","95052d1a":"def chartPlotter(chartData, totalResponses, chartTitle):\n    counts = {}\n    for i in chartData.columns[:-1]:\n        counts.update(chartData[i].value_counts())\n    counts = pd.Series(counts).sort_values(ascending=False)\n    counts = counts.apply(lambda x: x\/int(numResponses))\n    fig = go.Figure([go.Bar(x=counts.index, y=counts)])\n    fig.update_layout(title=chartTitle)\n    fig.show()","eb30192a":"def chartPlotterDouble(chartData1, totalResponses1, chartTitle1, chartData2, totalResponses2, chartTitle2):\n    counts1 = {}\n    counts2 = {}\n    for i in chartData1.columns[:-1]:\n        counts1.update(chartData1[i].value_counts())\n    counts1 = pd.Series(counts1).sort_values(ascending=False)\n    counts1 = counts1.apply(lambda x: x*100\/int(totalResponses1)) # Calculate %\n    \n    for i in chartData2.columns[:-1]:\n        counts2.update(chartData2[i].value_counts())\n    counts2 = pd.Series(counts2).sort_values(ascending=False)\n    counts2 = counts2.apply(lambda x: x*100\/int(totalResponses2)) # Calculate %\n    plt.figure(2, figsize=(20,6) )\n    grid = GridSpec(1,2)\n    sns.set( style=\"whitegrid\" )\n    plt.figure(2, figsize=(20,6) )\n    grid = GridSpec(1,2)\n    sns.set( style=\"whitegrid\" )\n    \n    plt.subplot( grid[0,0], title= chartTitle1 )\n    chart2018 = sns.barplot( x=counts1.index, y=counts1, palette=\"GnBu_d\" )\n\n    plt.subplot( grid[0,1], title= chartTitle2 )\n    chart2019 = sns.barplot( x=counts2.index, y=counts2, palette=\"GnBu_d\" )\n    chart2018.set_xticklabels( counts1.index, rotation=\"90\" )\n    chart2019.set_xticklabels( counts2.index, rotation=\"90\" )\n    chart2018.set_ylabel(\"% Responses\")\n    chart2019.set_ylabel(\"% Responses\")\n    plt.show()\n    ","37672242":"chart_data19, data_choices19, numResponses19 = extract_19_data('What programming languages do you use on a regular basis?')\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"What programming languages do you use on a regular basis?\")\nchartPlotterDouble(chart_data18, numResponses18, \"Programming Languages 2018\",  chart_data19, numResponses19, \"Programming Languages 2019\")","a96b7a4a":"chart_data19, data_choices19, numResponses19 = extract_19_data(\"What programming language would you recommend an aspiring data scientist to learn first?\")\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"What programming language would you recommend an aspiring data scientist to learn first?\")\nchartPlotterDouble(chart_data18, numResponses18, \"Recommended Programming Languages 2018\",  chart_data19, numResponses19, \"Recommended Programming Languages 2019\")","ad7dc9d6":"chart_data19, data_choices19, numResponses19 = extract_19_data(\"Which of the following machine learning frameworks do you use on a regular basis?\")\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"Of the choices that you selected in the previous question, which ML library have you used the most?\")\nchartPlotterDouble(chart_data18, numResponses18, \"ML framework 2018\",  chart_data19, numResponses19, \"ML framework 2019\")","96ed6224":"chart_data19, data_choices19, numResponses19 = extract_19_data(\"Which specific cloud computing products do you use on a regular basis?\")\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"Which of the following cloud computing products have you used at work or school in the last 5 years\")\nchartPlotterDouble(chart_data18, numResponses18, \"Cloud Computing 2018\",  chart_data19, numResponses19, \"Cloud Computing 2019\")","f4830a9c":"chart_data19, data_choices19, numResponses19 = extract_19_data(\"Which specific big data \/ analytics products do you use on a regular basis?\")\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"Which of the following big data and analytics products have you used at work or school in the last 5 years?\")\nchartPlotterDouble(chart_data18, numResponses18, \"Big Data Analytics 2018\",  chart_data19, numResponses19, \"Big Data Analytics 2019\")","11472db3":"chart_data19, data_choices19, numResponses19 = extract_19_data(\"What data visualization libraries or tools do you use on a regular basis?\")\nchart_data18, data_choices18, numResponses18 = extract_18_data(\"What data visualization libraries or tools have you used in the past 5 years?\")\nchartPlotterDouble(chart_data18, numResponses18, \"Data Visualization 2018\",  chart_data19, numResponses19, \"Data Visualization 2019\")","e0a6d477":"chartdata19, data_choices19, numResponses19 = extract_19_data(\"Which specific big data \/ analytics products do you use on a regular basis?\")\ncompanysize = pd.DataFrame(mcq19[\"What is the size of the company where you are employed?\"])\nchartdata19.drop([' Text'], axis=1, inplace=True)\nchartdata19=chartdata19.fillna(0).apply(lambda x : x!=0)\nchartdata19['companysize'] = companysize\n\ntable = pd.pivot_table(chartdata19, values= [' Google BigQuery', ' AWS Redshift', ' Teradata', ' Databricks', \n                                             ' AWS Elastic MapReduce', ' Microsoft Analysis Services', \n                                             ' Google Cloud Dataflow', ' AWS Athena', ' AWS Kinesis',\n                                             ' Google Cloud Pub\/Sub'], index=['companysize'], aggfunc=np.sum)\ntable","00ff8351":"**Pivot table for analysis of company size. We can explore trends such as which products are more commom for small, medium and large companies.**","b5e0cf9a":"Hello everyone, I worked on this notebook with my wife and this is our first Kaggle submission. It was an enriching learning experience.  The notebooks shared by other participants were of great help too so thanks a lot :)\n\nIn my submission, I have created 2 functions to extract relevant data columns from 2018 and 2019 multiple choice data and also a chart plotter function to display 2018 vs 2019 statistics in % for most popular programming lanuguage, ML framework, cloud computing products etc. The questions were not exactly similar, however, we can still spot a few patterns in the charts below.\n\nMy aim was to make the code easily understandable and extensible for additional analysis.\n\nPlease take a took and share your feedback.\n\n"}}