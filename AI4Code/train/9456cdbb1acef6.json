{"cell_type":{"853a3b99":"code","541ea93a":"code","d5ca2351":"code","f8d9a490":"code","aef9fa41":"code","b03749a3":"code","4e51f5c8":"code","6d611d7c":"code","c161e81f":"code","82aeb6a6":"markdown"},"source":{"853a3b99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","541ea93a":"loan_data = pd.read_csv('\/kaggle\/input\/personal-loan\/Bank_Personal_Loan_Modelling-1.xlsx')\nloan_data.head()","d5ca2351":"loan_data.info()","f8d9a490":"#Dropping the 'ID' column, as it is not used for the prediction\nloan_data.drop('ID',axis = 1, inplace = True)\nloan_data.head()","aef9fa41":"#defining features and label\nx = loan_data.drop(['Personal Loan'],axis = 1)\ny = loan_data['Personal Loan']","b03749a3":"x.info()","4e51f5c8":"#splitting train and test set\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)","6d611d7c":"from sklearn.naive_bayes import GaussianNB\nmodel_gnb = GaussianNB()\nmodel_gnb.fit(x_train,y_train)\ny_pred_gnb = model_gnb.predict(x_test)\ny_pred_gnb\nprint(\"Train_Score: \", model_gnb.score(x_train, y_train)*100)\nprint(\"Test_Score: \", model_gnb.score(x_test, y_test)*100)","c161e81f":"from sklearn.linear_model import LogisticRegression\n\nmodel_lr = LogisticRegression(random_state=1)\nmodel_lr.fit(x_train,y_train)\n\ny_pred_lr = model_lr.predict(x_test)\n\nprint(\"Train_Score: \", model_lr.score(x_train, y_train)*100)\nprint(\"Test_Score: \", model_lr.score(x_test, y_test)*100)","82aeb6a6":"There are no null values and all the cols are numeric type."}}