{"cell_type":{"6710388e":"code","122f64bd":"code","36e114db":"code","2771e904":"code","243e4bf5":"code","420f496f":"code","274f45c2":"code","23a49922":"code","a7c2cda4":"code","391f9463":"code","383a82c0":"code","50a02521":"code","4205a283":"code","2f4e9127":"code","22113ff6":"code","ee652054":"markdown","9754e4b0":"markdown","c64cffcc":"markdown","11228f07":"markdown","d1d570c3":"markdown","acc2bb98":"markdown","fc16e854":"markdown","3ef00000":"markdown","fdd714fe":"markdown","44548317":"markdown","1a913639":"markdown","7b4141f9":"markdown","c8b16ae8":"markdown"},"source":{"6710388e":"import pandas as pd\nimport numpy as np\nimport datatable as dt\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nimport optuna","122f64bd":"def checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].median()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ndef getColumnDevide(df):\n    str_list = [] \n    num_list = []\n    for colname, colvalue in train.iteritems():\n        if type(colvalue[1]) == str:\n            str_list.append(colname)\n        else:\n            num_list.append(colname)\n            \n    return str_list,num_list","36e114db":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\ndrop_elements = ['PassengerId', 'Name', 'Ticket','Fare']\ntrain = train.drop(drop_elements, axis = 1)\n\ncheckNull_fillData(train)\n\ntrain[\"family_member_size\"] = 1 + train[\"SibSp\"] + train[\"Parch\"]\n\ndrop_elements = ['SibSp', 'Parch','Cabin']\ntrain = train.drop(drop_elements, axis = 1)\n\nstr_list,_ = getColumnDevide(train)\nprint(str_list)\ntrain = pd.get_dummies(train, columns=str_list)","2771e904":"train.columns","243e4bf5":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\ndrop_elements = ['PassengerId', 'Name', 'Ticket','Fare']\ntest = test.drop(drop_elements, axis = 1)\n\ncheckNull_fillData(test)\n\ntest[\"family_member_size\"] = 1 + test[\"SibSp\"] + test[\"Parch\"]\n\ndrop_elements = ['SibSp', 'Parch','Cabin']\ntest = test.drop(drop_elements, axis = 1)\n\ntest = pd.get_dummies(test, columns=str_list)","420f496f":"test.columns","274f45c2":"X = train.drop('Survived', axis=1).copy()\ny = train['Survived'].copy()\nX_test = test.copy()","23a49922":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=0.3,random_state=42,shuffle=True)","a7c2cda4":"from sklearn.model_selection import cross_validate,GridSearchCV\nfrom sklearn.metrics import confusion_matrix , accuracy_score\nfrom xgboost import XGBClassifier\nreg=XGBClassifier()","391f9463":"params={\"n_estimators\":[67,70,100,120],\n        'reg_lambda':[2,1],\n        'gamma':[0,0.3,0.2,0.1],\n        'eta':[0.06,0.05,0.04],\n        \"max_depth\":[3,5],\n        'objective':['reg:logistic']}","383a82c0":"clf=GridSearchCV(reg,params,cv=5,n_jobs=-1,verbose=10)\nclf.fit(xtrain,ytrain)","50a02521":"ypred=clf.predict(xtrain)\ntpred=clf.predict(xtest)\nprint(accuracy_score(ypred,ytrain))\nprint(accuracy_score(tpred,ytest))\nclf.best_params_","4205a283":"clf.best_params_","2f4e9127":"pred_test  = clf.best_estimator_.predict(X_test)\npred_test","22113ff6":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission['Survived'] = pred_test\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","ee652054":"# make model","9754e4b0":"\n# load basic library","c64cffcc":"# GridSearchCV setting ","11228f07":"# accuaracy score","d1d570c3":"# predict test data with best model","acc2bb98":"# devide input data and target data ","fc16e854":"# common function","3ef00000":"# test data preprocessing","fdd714fe":"# devide train set and validation set ","44548317":"# submit result","1a913639":"# check best parameter","7b4141f9":"# train data preprocessing","c8b16ae8":"# parameters for GridSearchCV"}}