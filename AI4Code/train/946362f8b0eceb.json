{"cell_type":{"d5708365":"code","59b48eb1":"code","73f40158":"code","cf533869":"code","79f7faff":"code","538c5c68":"code","81e59abb":"code","9b7e885b":"code","e1c5a049":"code","6801835a":"code","f5e9e261":"code","0555315f":"code","e44fb39b":"code","786574b6":"code","4bac1630":"code","e0facd2a":"code","5982c6ea":"code","1ee3820f":"code","f8303c9a":"code","dd733e8c":"code","87ac1293":"code","6109b691":"code","5ccf9ceb":"markdown","99811caf":"markdown","a2059fe4":"markdown","2c2c372c":"markdown","3dd3227e":"markdown","35622473":"markdown","aaa5b32b":"markdown","749cb642":"markdown","fa27b9ef":"markdown","dd59e8ff":"markdown","4ab7e591":"markdown","f4e10cbd":"markdown"},"source":{"d5708365":"pip install pyts","59b48eb1":"import os\nimport json\nimport random\nimport collections\n\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nsns.set_theme(style=\"darkgrid\")\n\nfrom scipy.spatial.distance import pdist, squareform #scipy spatial distance\nimport sklearn as sk\nimport sklearn.metrics.pairwise\nfrom skimage.transform import resize\n\nfrom pyts.image import RecurrencePlot, GramianAngularField, MarkovTransitionField","73f40158":"class Config:\n    data_dir = '..\/input\/g2net-gravitational-wave-detection\/{}\/{}\/{}\/{}\/{}.npy'\n    train_file = '..\/input\/g2net-gravitational-wave-detection\/training_labels.csv'\n    store_dir = '{}-plots\/{}\/{}\/{}\/{}\/{}.npy'\n    test_file = ''\n    submission_file = ''\n    signal_names = (\"LIGO Hanford\", \"LIGO Livingston\", \"Virgo\")\n    colors = (\"black\", \"red\", \"green\")\n    ","cf533869":"def convert_image_id_2_path(image_id: str, is_train: bool = True) -> str:\n    folder = \"train\" if is_train else \"test\"\n    return Config.data_dir.format(\n        folder, image_id[0], image_id[1], image_id[2], image_id \n    )","79f7faff":"def convert_image_id_2_store_path(image_id: str, is_train: bool = True, plot_type = 'rec') -> str:\n    folder = \"train\" if is_train else \"test\"\n    store_path = Config.store_dir.format(\n        plot_type, folder, image_id[0], image_id[1], image_id[2], image_id \n    )\n    os.makedirs(os.path.dirname(store_path), exist_ok=True)\n    return store_path","538c5c68":"def get_random_sample_for_both_targets():\n    i0 = random.choice(train_df.index[train_df['target']==0].tolist())\n    i1 = random.choice(train_df.index[train_df['target']==1].tolist())\n\n    id0 = train_df.iloc[i0][\"id\"]\n    id1 = train_df.iloc[i1][\"id\"]\n    \n    return id0, id1","81e59abb":"train_df = pd.read_csv(Config.train_file)\ntrain_df","9b7e885b":"def visualize_line_plot(\n    id0,\n    id1,\n):\n    path0 = convert_image_id_2_path(id0)\n    data0 = np.load(path0)\n    \n    path1 = convert_image_id_2_path(id1)\n    data1 = np.load(path1)\n    \n    fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(20, 12))\n    \n    for i, ax in enumerate(axes):        \n        x0 = range(len(data0[i]))\n        y0 = data0[i]\n        \n        x1 = range(len(data1[i]))\n        y1 = data1[i]\n        if i==0:\n            ax[0].set_title(id0 + ' Target = 0', fontsize=20)\n            ax[1].set_title(id1 + ' Target = 1', fontsize=20)\n            \n        ax[0].plot(x0, y0, color=Config.colors[i])\n        ax[0].set_xlabel(Config.signal_names[i], fontsize=14)\n        \n        ax[1].plot(x1, y1, color=Config.colors[i])\n        ax[1].set_xlabel(Config.signal_names[i], fontsize=14)\n        \n    # set the spacing between subplots\n    plt.subplots_adjust(left=0.1,\n                    bottom=0.1, \n                    right=0.9, \n                    top=0.9, \n                    wspace=0.2, \n                    hspace=0.5)","e1c5a049":"def visualize_recurrence_plot(\n    id0,\n    target,\n):\n    path = convert_image_id_2_path(id0)\n    data = np.load(path)\n    \n    rp = RecurrencePlot(threshold='distance', percentage=20)\n    X_rp = rp.fit_transform(data)\n    \n    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 7))\n    \n    for i, ax in enumerate(axes):        \n        ax.imshow(X_rp[i], cmap='binary', origin='lower')\n        ax.set_xlabel(Config.signal_names[i], fontsize=16)\n            \n    plt.suptitle(f\"id: {id0} target: {target}\", fontsize=16)\n    plt.show()\n","6801835a":"def visualize_gramian_angular_fields_plot(\n    id0,\n    target,\n    method = 'summation'\n):\n    path = convert_image_id_2_path(id0)\n    data = np.load(path)\n    \n    gaf = GramianAngularField(image_size=24, method=method)\n    X_gaf = gaf.fit_transform(data)\n    \n    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 7))\n    \n    for i, ax in enumerate(axes):\n        \n        ax.imshow(X_gaf[i], cmap='rainbow', origin='lower')\n        ax.set_xlabel(Config.signal_names[i], fontsize=16)\n            \n    plt.suptitle(f\"id: {id0} target: {target}\", fontsize=16)\n    plt.show()","f5e9e261":"def visualize_mft_plot(\n    id0,\n    target,\n):\n    path = convert_image_id_2_path(id0)\n    data = np.load(path)\n    \n    mft = MarkovTransitionField(image_size = 0.3, n_bins=3)\n    X_mft = mft.fit_transform(data)\n    \n    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 7))\n    \n    for i, ax in enumerate(axes):\n        ax.imshow(X_mft[i], cmap='inferno', origin='lower')\n        ax.set_xlabel(Config.signal_names[i], fontsize=16)\n            \n    plt.suptitle(f\"id: {id0} target: {target}\", fontsize=16)\n    plt.show()","0555315f":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 12))\nx = np.linspace(-4*np.pi, 4*np.pi, 1000)\ndata = x, np.sin(x)\nrp = RecurrencePlot(threshold='point', percentage=20)\nX_rp = rp.fit_transform(data)\ngaf = GramianAngularField(image_size=24)\nX_gaf = gaf.fit_transform(data)\nmft = MarkovTransitionField(image_size = 0.3, n_bins=3)\nX_mft = mft.fit_transform(data)\n\naxes = axes.flatten()\n\naxes[0].plot(x, np.sin(x))\naxes[0].set_xlabel('Line Plot', fontsize=14)\naxes[1].imshow(X_rp[1], cmap='rainbow', origin='lower')\naxes[1].set_xlabel('Recurssion Plot', fontsize=14)\naxes[2].imshow(X_gaf[1], cmap='rainbow', origin='lower')\naxes[2].set_xlabel('Gramian Angular fields Plot', fontsize=14)\naxes[3].imshow(X_mft[1], cmap='inferno', origin='lower')\naxes[3].set_xlabel('Markov Transition Field Plot', fontsize=14)\nplt.suptitle(\"Sine Wave example\", fontsize=16)\nplt.show()","e44fb39b":"id0, id1 = get_random_sample_for_both_targets()\nvisualize_line_plot(id0, id1)","786574b6":"id0, id1 = get_random_sample_for_both_targets()\nvisualize_recurrence_plot(id0, 0)\nvisualize_recurrence_plot(id1, 1)","4bac1630":"id0, id1 = get_random_sample_for_both_targets()\nvisualize_gramian_angular_fields_plot(id0, 0)\nvisualize_gramian_angular_fields_plot(id1, 1)","e0facd2a":"id0, id1 = get_random_sample_for_both_targets()\nvisualize_gramian_angular_fields_plot(id0, 0, method='difference')\nvisualize_gramian_angular_fields_plot(id1, 1, method='difference')","5982c6ea":"id0, id1 = get_random_sample_for_both_targets()\nvisualize_mft_plot(id0, 0)\nvisualize_mft_plot(id1, 1)","1ee3820f":"def store_plot(reading_id, is_train = True, plot_type = 'rec', transformer = RecurrencePlot(threshold='point', percentage=20)):\n    path = convert_image_id_2_path(reading_id)\n    data = np.load(path)\n    X = transformer.fit_transform(data)\n    if plot_type == 'rec':\n        X = X.reshape(4096, 4096, 3)\n        X = cv2.resize(X, dsize=(256, 256), interpolation=cv2.INTER_CUBIC)\n        X = X.reshape(3, 256, 256)\n    store_path = convert_image_id_2_store_path(reading_id, is_train, plot_type)\n    np.save(store_path, X)","f8303c9a":"def load_plot(reading_id, is_train = True, plot_type = 'rec'):\n    store_path = convert_image_id_2_store_path(reading_id, is_train, plot_type)\n    X_loaded = np.load(store_path)\n    return X_loaded","dd733e8c":"def visualize_stored_plot(reading_id, is_train = True, plot_type='rec', cmap='binary'):\n    X = load_plot(reading_id, is_train, plot_type)\n    fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 7))\n    \n    for i, ax in enumerate(axes):        \n        ax.imshow(X[i], cmap=cmap, origin='lower')\n        ax.set_xlabel(Config.signal_names[i], fontsize=16)\n            \n    plt.suptitle(f\"id: {reading_id}\", fontsize=16)\n    plt.show()","87ac1293":"rp = RecurrencePlot(threshold='distance', percentage=20)\nid_list = random.sample(train_df.index.tolist(), 2)\nfor i in id_list:\n    reading_id = train_df.iloc[i][\"id\"]\n    store_plot(reading_id, rp)\nfor i in id_list:\n    reading_id = train_df.iloc[i][\"id\"]\n    visualize_stored_plot(reading_id)","6109b691":"gaf = GramianAngularField(image_size=24, method='summation')\nid_list = random.sample(train_df.index.tolist(), 2)\nfor i in id_list:\n    reading_id = train_df.iloc[i][\"id\"]\n    store_plot(reading_id, transformer = gaf, plot_type = 'gaf')\n    \nfor i in id_list:\n    reading_id = train_df.iloc[i][\"id\"]\n    visualize_stored_plot(reading_id, plot_type = 'gaf', cmap = 'rainbow')","5ccf9ceb":"#### Line plots comparison for a random sample of both the targets","99811caf":"## <center>Work in progress <\/center>\n#### <center>Baseline models coming up<\/center>","a2059fe4":"#### Gramian Angular Fields - difference plots comparison for a random sample of both the targets","2c2c372c":"#### Recurrence plots comparison for a random sample of both the targets","3dd3227e":"### Utilites","35622473":"### Helper functions for visualisation EDA for all different transformations","aaa5b32b":"#### Different type of plots demonstrated - \n1. Line plot\n2. Recurrence plot\n3. Gramian Angualar field plots - summation and difference type\n4. Markov Transition Field\n\nBelow i have demonstrated the above plots for a sine wave","749cb642":"### Dependencies","fa27b9ef":"### Helper functions for transforming time-series to plots, storing and loading them","dd59e8ff":"#### Markov Transition field plots comparison for a random sample of both the targets","4ab7e591":"## <center>G2Net competiton<\/center>\n\n#### <center>Data transformation and storage<\/center>\n\nData is provided in time series stored in numpy files. Readings have been simulated by 3 gravitational wave interferometers (LIGO Hanford, LIGO Livingston, and Virgo). \n\nIn this notebook i try to explore 3 different data transformations for time series data - \n1. Recurrence plot\n2. Gramian Angualar field plots - summation \n3. Gramian Angualar field plots - difference\n\nMore complex pre-trained models can be used on these transformations.\n\nReferences - \n* https:\/\/www.kaggle.com\/ihelon\/g2net-eda-and-modeling\/output\n\nRead more at -\n[Imaging time series](https:\/\/pyts.readthedocs.io\/en\/stable\/modules\/image.html)\n\n#### If you find something useful or gain some insights. Please upvote.\n\n","f4e10cbd":"#### Gramian Angular Fields - summation plots comparison for a random sample of both the targets"}}