{"cell_type":{"f6d49ad0":"code","a9985781":"code","a6b59c71":"code","32d9cbf4":"code","ff61cb55":"code","80289c5f":"code","58507f67":"code","de63661b":"code","22d1a123":"code","ad2e1c3f":"code","a75be486":"code","dc49104d":"code","cef208f8":"code","707d7c04":"code","06c5046b":"code","67274d73":"code","23205c70":"code","70d95b56":"code","0f778b50":"code","88cbc643":"code","4b7a8ad3":"code","71bbe077":"code","9d889547":"code","a6c11f78":"code","5209af6a":"code","d80b2efd":"code","4d6e2563":"code","5bf1a888":"code","a62d0d86":"markdown","3424a10a":"markdown","0adcd9ca":"markdown","dfa139dc":"markdown","4fa480c7":"markdown","a4872db8":"markdown","a93bfd86":"markdown","3f495565":"markdown","3a701bb5":"markdown","9c9a1b1b":"markdown","d0fcac98":"markdown","c3c2760e":"markdown","7e9408ad":"markdown","694baf62":"markdown"},"source":{"f6d49ad0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression ,Ridge\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score , mean_squared_error\nfrom scipy import stats\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline","a9985781":"laptop = pd.read_csv('\/kaggle\/input\/laptop-price\/laptop_price.csv',sep=',',encoding='latin-1')","a6b59c71":"laptop.head()","32d9cbf4":"laptop.info()","ff61cb55":"laptop.isnull().sum()","80289c5f":"laptop['Company'].value_counts() ","58507f67":"fig, ax = plt.subplots(figsize=(16,10))\nsns.boxplot(x=laptop['Price_euros'],y=laptop['Company'],data= laptop )","de63661b":"f, ax = plt.subplots(4, 3,figsize=(20,20))\ncompanies=laptop['Company'].unique()\n\ni=0\nj=0\nfor company in companies[0:12]:   \n  sns.barplot(x='Ram',y='Price_euros',data=laptop[laptop['Company']==company],ax=ax[i][j],order=['2GB','4GB','6GB','8GB','12GB','16GB','24GB','32GB','64GB'])\n  ax[i][j].set_title(company)\n  j+=1\n  if j%3 == 0:\n    i+=1\n    j=0\n","22d1a123":"laptop['TypeName'].value_counts()","ad2e1c3f":"list = ['Ultrabook','Notebook','Netbook','Gaming','2 in 1 Convertible','Workstation']\nlabels=[]\nfor type in list:\n  labels.append(laptop.groupby(['TypeName','Company'])['TypeName'].count()[type].sort_values().keys()[-1])\n\nfig, ax = plt.subplots(figsize=(20,6))\nsns.histplot(x='TypeName',data= laptop)\n\nrects = ax.patches\n  \nfor rect, label in zip(rects, labels):\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, height+0.01, label,\n            ha='center', va='bottom')","a75be486":"f, ax = plt.subplots(4, 3,figsize=(18,18))\n\ni=0\nj=0\nfor company in companies[0:12]:\n  data = laptop.groupby([\"Company\",\"TypeName\"]).count()['laptop_ID'][company]   \n  data.plot.pie (autopct=\"%.1f%%\",ax=ax[i][j])\n  ax[i][j].set_title(company)\n  j+=1\n  if j%3 == 0:\n    i+=1\n    j=0","dc49104d":" fig, ax = plt.subplots(figsize=(16,10))\nsns.boxplot(x=laptop['Price_euros'],y=laptop['TypeName'],data= laptop )","cef208f8":"for i in range(0,len(laptop['Cpu'].value_counts().keys())):\n  print(laptop['Cpu'].value_counts().keys()[i].split(' ')[:])  \n\ndef category1(cpu):\n  if ((cpu.split(' ')[0]== 'Intel') & (cpu.split(' ')[2]in ['i3','i5','i7'])):\n    return ''.join(cpu.split(' ')[0:3])\n  elif ((cpu.split(' ')[0]== 'Intel') & (cpu.split(' ')[2] not in ['i3','i5','i7'])):\n    return 'Intel_other_Types'\n  elif (cpu.split(' ')[0]== 'AMD'):\n    return 'AMD'\n  else:\n    return 'other_Types'\n\ndef freq(cpu):\n  return cpu.split(' ')[-1].replace('GHz','')\n  \nlaptop['freq']=laptop['Cpu'].apply(freq)  \nlaptop['Cpu']=laptop['Cpu'].apply(category1)","707d7c04":"fig, ax = plt.subplots(figsize=(16,10))\nsns.boxplot(x=laptop['Price_euros'],y=laptop['Cpu'],data= laptop ,order=['IntelCorei7','IntelCorei5','IntelCorei3','Intel_other_Types','AMD','other_Types'])","06c5046b":"for i in range(0,len(laptop['Gpu'].value_counts().keys())):\n  print(laptop['Gpu'].value_counts().keys()[i].split(' ')[:])\n\ndef category2(Gpu):\n  if Gpu.split(' ')[0]== 'Nvidia':\n    return 'Nvidia'\n  elif Gpu.split(' ')[0]== 'Intel':\n    return 'Intel'\n  elif (Gpu.split(' ')[0]== 'AMD'):\n    return 'AMD'\n  else:\n    return 'other_Types'\nlaptop['Gpu']=laptop['Gpu'].apply(category2)   ","67274d73":"fig, ax = plt.subplots(figsize=(16,10))\nsns.boxplot(x=laptop['Price_euros'],y=laptop['Gpu'],data= laptop )","23205c70":"# split resolution into x_res and y_res\nfor i in range(0,len(laptop['ScreenResolution'].value_counts().keys())):\n  print(laptop['ScreenResolution'].value_counts().keys()[i].split(' ')[:])\n\nlaptop['x_res']=laptop['ScreenResolution'].apply( lambda x : x.split(' ')[-1].split('x')[0])\nlaptop['y_res']=laptop['ScreenResolution'].apply(lambda x  :x.split(' ')[-1].split('x')[1])","70d95b56":"#drop laptop_ID,Company,Product , ScreenResolution and Memory\ndf = laptop.drop(['laptop_ID','Product','ScreenResolution'],axis=1)","0f778b50":"# I will label TypeName based on highest median \nx = df.groupby(['TypeName']).Price_euros.median().sort_values().keys()\nprint(x)\ndf['TypeName'].replace(x,[x for x in range(6)],inplace=True)\n\n# I will label operating system based on highest median \nx = df.groupby(['OpSys']).Price_euros.median().sort_values().keys()\nprint(x)\ndf['OpSys'].replace(x,[x for x in range(9)],inplace=True)\n\n# I will label Cpu based on highest median \nx = df.groupby(['Cpu']).Price_euros.median().sort_values().keys()\nprint(x)\ndf['Cpu'].replace(x,[x for x in range(6)],inplace=True)\n\n# I will label Company based on highest median \nx = df.groupby(['Company']).Price_euros.median().sort_values().keys()\nprint(x)\ndf['Company'].replace(x,[x for x in range(19)],inplace=True)\n\n# I will label Gpu based on highest median \nx = df.groupby(['Gpu']).Price_euros.median().sort_values().keys()\nprint(x)\ndf['Gpu'].replace(x,[x for x in range(4)],inplace=True)","88cbc643":"df['Ram']=df['Ram'].str.replace('GB','')\n\nfor i in range(0,len(df['Memory'].value_counts().keys())):\n  print(df['Memory'].value_counts().keys()[i].split(' ')[:])\n\ndf['Memory']=df['Memory'].str.replace('GB','')\ndf['Memory']=df['Memory'].str.replace('TB','000')\n\ndef HDD(mem):\n  if 'HDD' in mem.split(' '):\n    i = mem.split(' ').index('HDD')\n    return mem.split(' ')[i-1]\n  else:\n    return 0\n\ndef SSD(mem):\n  if 'SSD' in mem.split(' '):\n    i = mem.split(' ').index('SSD')\n    return mem.split(' ')[i-1]\n  else:\n    return 0\ndef Flash(mem):\n  if 'Flash' in mem.split(' '):\n    i = mem.split(' ').index('Flash')\n    return mem.split(' ')[i-1]\n  else:\n    return 0\n\ndef Hybrid (mem):\n  if 'Hybrid' in mem.split(' '):\n    i = mem.split(' ').index('Hybrid')\n    return mem.split(' ')[i-1]\n  else:\n    return 0\ndf['HDD']=df['Memory'].apply(HDD)\ndf['SSD']=df['Memory'].apply(SSD)\ndf['Flash']=df['Memory'].apply(Flash)\ndf['Hybrid']=df['Memory'].apply(Hybrid)           ","4b7a8ad3":"# after splitting Memory column into four columns I will drop it\ndf = df.drop('Memory',axis=1) ","71bbe077":"# remove Kg from weight\ndf['Weight']=df['Weight'].str.replace('kg','')","9d889547":"df = df.astype(float)\ndf.info()","a6c11f78":"fig, ax = plt.subplots(figsize=(14,9))\nsns.heatmap(df.corr(),annot=True,cmap=\"YlGnBu\", ax=ax)","5209af6a":"x= df[['Ram','SSD','Cpu','TypeName','freq','Gpu','Weight','OpSys','x_res','y_res','Company']]\ny= df['Price_euros'].values\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.2,random_state=7)\nreg = LinearRegression()\nreg.fit(x_train,y_train)\ny_pred = reg.predict(x_test)\nprint(reg.score(x_train,y_train))\nprint(reg.score(x_test,y_test))\nprint('mean_squared_error :'+ str(mean_squared_error(y_test,y_pred)))\nx","d80b2efd":"X2 =sm.add_constant(x)\nest = sm.OLS(y,X2)\nest2 =est.fit()\nprint(est2.summary())","4d6e2563":"polyreg = make_pipeline(PolynomialFeatures(2) , LinearRegression())\npolyreg.fit(x,y)\nY_pred=polyreg.predict(x_test)\nprint(polyreg.score(x_train,y_train))\nprint(polyreg.score(x_test,y_test))\nprint('mean_squared_error :'+ str(mean_squared_error(y_test,Y_pred)))","5bf1a888":"df1 = df[['Ram','Price_euros']]\nx = df1.drop('Price_euros' , axis=1).values\ny = df1['Price_euros'].values\n\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.2,random_state=7)\npolyreg = make_pipeline(PolynomialFeatures(2) , LinearRegression())\npolyreg.fit(x,y)\nxseq = np.linspace(x.min(),x.max()).reshape(-1,1)\n\nplt.scatter(x_test , y_test)\nplt.scatter(xseq,polyreg.predict(xseq))\nplt.plot(xseq ,polyreg.predict(xseq) )\nplt.show()","a62d0d86":"we notice that most type is Notebook and HP is the largest company that produce it, also HP is considered pioneer in producing Workstation , Netbook.\n\nIt looks like from the graph that MSI is pioneer in Gaming inspite of having only 54 product compared with other companies that produces above 200 product which indicates that they are interested in gaming types of laptops\n\nIt looks like from the graph that Netbook is not produced alot which indicates that there are not alot of people who prefers this type and so companies are interested in producing it","3424a10a":"## Relation between Gpu and prices","0adcd9ca":"## the percentage of each type of laptop in each company","dfa139dc":"from the graph it's obivious that core i7 is better than core i5 better than \ncore i3 and AMD\n\nit looks like there are some types of cpu in intel which are better in performance than the already known ones(core i3 ,i5 , i7) which appears in the outliers in Intel_other_Types\n\nfrom the graph AMD is somehow simillar to Intel core i3 in price which is less in performance than other intel cpu","4fa480c7":"It appears that Ram has the highest coorlation with the price\n\n(Ram , SSD , cpu , TypeName) have a high coorlation with the price which make sense ","a4872db8":"## Relation between Cpu and prices","a93bfd86":"Workstation is the highest median as we know that workstation is designed for scientific matters and so have a tendency to have more price\n\nthe Gaming type has the largest price although it is less in median than the workstation which reflects that may be some components in Gaming type such as (Gpu) that increase it's price  ","3f495565":"## Effect of Ram on price for each company","3a701bb5":"we notice that there are alot of companies that produces only one type such as Apple(Ultrabook) , Microsoft(Ultrabook) , MSI(Gaming),Chuwi(Notebook) which means that most customers buy these types from them\n\nthis graph shows the types that each company are intrested in which reflects the customer needs\n\nfrom the graph it is obivious that the most producing companies produce more Notebook than any other type so it looks like most of the customers buy this type","9c9a1b1b":"## Relation between TypeName and prices","d0fcac98":"we can see that the median of (Razer, LG , Samsung) is very high comparing to others but they produce less products than other companies which means that they don't have a variety of products","c3c2760e":"## Relation between company and prices","7e9408ad":"## Distribution of the Type of laptops and the most company producing each type","694baf62":"we notice that price is exponentially increasing with the increase of Ram and not all companies are focusing on producing all Ram sizes\n\nit's very shocking that a company like HP which is the third company in number of products(274 product) doesn't produce more than 16GB Ram\n\nwe can also notice the difference in the price between each company for the same size of Ram "}}