{"cell_type":{"684b4560":"code","33f983b5":"code","83530272":"code","0d9bd5a9":"code","6e8dc7e3":"code","61831f79":"code","ef2d34a0":"code","4b27b2da":"code","53c9fcb9":"code","cdfbf2dd":"code","3745dc84":"code","1fb3ba1c":"code","b9923ade":"code","7390c1ab":"code","81b1e7ee":"code","31504391":"markdown","c2da9c87":"markdown","3c9bb547":"markdown","e33e7101":"markdown","c3e26458":"markdown","84449e92":"markdown","85d401a7":"markdown","d9411250":"markdown","94b7b1d8":"markdown","f1b9f3b0":"markdown","f5a61978":"markdown","6c2c3d1e":"markdown"},"source":{"684b4560":"!pip install git+https:\/\/github.com\/goolig\/dsClass.git","33f983b5":"\n%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import SelectPercentile, f_classif, chi2, SelectKBest, SelectFpr\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_recall_fscore_support\n\nfrom dsClass.path_helper import *\n\n","83530272":"ts_file_path = get_file_path('ts_data.csv')\nts_data = pd.read_csv(ts_file_path)\nprint(ts_data.shape)\nts_data.head()","0d9bd5a9":"ts_data.groupby('fail').describe()","6e8dc7e3":"original_features = ['bb_count', 'r-w_rate', 'reconsects_count',\n       'recovbydrv_count', 'xfer_rate', 'bb_diffs']\n\nfig, axes = plt.subplots(nrows=1, ncols=2)\n\nts_data.loc[ts_data['d_id']==1,original_features].plot(figsize=(10,12), title='drive '+str(1)+' fail', ax=axes[0])\n\nnum_drives = ts_data['d_id'].unique().shape[0]\n#num_drives\n\nts_data.loc[ts_data['d_id']==num_drives,original_features].plot(figsize=(10,12), title='drive '+str(num_drives)+' non-fail', ax=axes[1])\nplt.legend()","61831f79":"#Q1","ef2d34a0":"conf_file_path = get_file_path('conf_data.csv')\nconf_data = pd.read_csv(conf_file_path)\nconf_data.head()","4b27b2da":"plt.figure()\nconf_data[['age', 'fail']].boxplot(by='fail', figsize=(10,12), sym='')","53c9fcb9":"g = conf_data.groupby([\"model\", \"fail\"])['d_id'].count().unstack('fail')\ng.plot(kind=\"bar\", stacked=True, grid=True, alpha=0.75, rot=45)","cdfbf2dd":"#Q2\ndef change_capacity(data):\n    # A function that receives a data frame and a column name as input and map the categorical capacity feature to numeric \n    di = dict(zip(conf_data[\"capacity\"].unique(), [1000, 600, 300]))\n\n    data.replace({\"capacity\": di}, inplace=False)\n","3745dc84":"new_conf_data = ","1fb3ba1c":"#Q3","b9923ade":"#Q4","7390c1ab":"#Q5","81b1e7ee":"#Q6","31504391":"# Look at the features\\labels distribution","c2da9c87":"# Make the prediction and plot the confusion matrix\nhttps:\/\/en.wikipedia.org\/wiki\/Confusion_matrix\n\n* Change \"max_depth\" paramter to see what happens to model results\n","3c9bb547":"# Plot the time series data","e33e7101":"# Train a Decision tree classifier \n\nSince we are learning and testing on the same set we will limit the maximum depth parameter to 5 to prevent overfitting","c3e26458":"For the decision tree algorithm, map the categorical features to numeric with:\n* \"Change_capacity\" function for \"capacity\" column\n* \"pd.get_dummies\" function for \"model\" column\n","84449e92":"# Merge the aggregated time-series and the configuration datasets","85d401a7":"# Load the time-series data and lookt at the features statistics","d9411250":"# Select the 10 most informative features and transform the data","94b7b1d8":"# Engineer the time-series features\n\nFor each Create the aggregated features (mean, median, variance, minimum and naximum):\n* for each sn\n* for each feature\n* for each aggregation type\n        aggregate the 20 daily samples into one aggregated sample  ","f1b9f3b0":"# Handle categorical data ","f5a61978":"# Import the required modules","6c2c3d1e":"# Load the cofiguration data"}}