{"cell_type":{"593e01bc":"code","1ff160fd":"code","b4325ef8":"code","7230cfc1":"code","7033722b":"code","86d3a4c7":"code","29052e7d":"code","a546315d":"code","ae6e2b96":"code","05c847bb":"code","eff14208":"code","cab46573":"code","531c5c36":"code","f6a15d3e":"markdown"},"source":{"593e01bc":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","1ff160fd":"base_dir = \"\/kaggle\/input\/image-super-resolution\/dataset\/\"","b4325ef8":"def load_data(path):\n    high_res_images = []\n    low_res_images = []\n    for dirname, _, filenames in os.walk(path+'low_res'):\n        for filename in filenames:\n            img = cv2.imread(os.path.join(dirname, filename))\n            img = process_image(img)\n            low_res_images.append(img)\n        \n    for dirname, _, filenames in os.walk(path+'high_res'):\n        for filename in filenames:\n            img = cv2.imread(os.path.join(dirname, filename))\n            img = process_image(img)\n            high_res_images.append(img)\n    \n    return np.array(low_res_images), np.array(high_res_images)","7230cfc1":"def process_image(image):\n    return image\/255","7033722b":"train_x, train_y =  load_data(base_dir+'train\/')\nval_x, val_y = load_data(base_dir+'val\/')","86d3a4c7":"fig, (ax1, ax2) = plt.subplots(1, 2)\nfig.suptitle('Image Comparison')\nax1.imshow(train_x[11])\nax1.title.set_text(\"low-res image \")\nax2.imshow(train_y[11])\nax2.title.set_text(\"high-res image \")","29052e7d":"from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPooling2D, Dropout, Conv2DTranspose, UpSampling2D, add\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import regularizers\nimport tensorflow as tf\n\ndef build_model():\n    input_img = Input(shape=(256, 256, 3))\n    l1 = Conv2D(64, (3, 3), padding='same', activation='relu', \n                activity_regularizer=regularizers.l1(10e-10))(input_img)\n    l2 = Conv2D(64, (3, 3), padding='same', activation='relu', \n                activity_regularizer=regularizers.l1(10e-10))(l1)\n\n    l3 = MaxPooling2D(padding='same')(l2)\n    l3 = Dropout(0.3)(l3)\n    l4 = Conv2D(128, (3, 3),  padding='same', activation='relu', \n                activity_regularizer=regularizers.l1(10e-10))(l3)\n    l5 = Conv2D(128, (3, 3), padding='same', activation='relu', \n                activity_regularizer=regularizers.l1(10e-10))(l4)\n\n    l6 = MaxPooling2D(padding='same')(l5)\n    l7 = Conv2D(256, (3, 3), padding='same', activation='relu', \n                activity_regularizer=regularizers.l1(10e-10))(l6)\n    \n    l8 = UpSampling2D()(l7)\n\n    l9 = Conv2D(128, (3, 3), padding='same', activation='relu',\n                activity_regularizer=regularizers.l1(10e-10))(l8)\n    l10 = Conv2D(128, (3, 3), padding='same', activation='relu',\n                 activity_regularizer=regularizers.l1(10e-10))(l9)\n\n    l11 = add([l5, l10])\n    l12 = UpSampling2D()(l11)\n    l13 = Conv2D(64, (3, 3), padding='same', activation='relu',\n                 activity_regularizer=regularizers.l1(10e-10))(l12)\n    l14 = Conv2D(64, (3, 3), padding='same', activation='relu',\n                 activity_regularizer=regularizers.l1(10e-10))(l13)\n\n    l15 = add([l14, l2])\n\n    decoded = Conv2D(3, (3, 3), padding='same', activation='relu', \n                     activity_regularizer=regularizers.l1(10e-10))(l15)\n\n\n    model = Model(input_img, decoded)\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    \n    return model","a546315d":"with tf.device('\/device:GPU:0'):\n    model = build_model()\n    train_x , train_y = train_x , train_y\n    val_x , val_y = val_x, val_y","ae6e2b96":"model.summary()","05c847bb":"def train(train_x, train_y, epochs = 1, batch_size = 32, shuffle = False):\n    model.fit(train_x, train_y,\n                            epochs= epochs,\n                            batch_size=batch_size,\n                            shuffle=shuffle)","eff14208":"train(train_x, train_y, epochs = 25, batch_size = 8, shuffle = True)","cab46573":"predict_y = model.predict(val_x)","531c5c36":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3)\nax1.imshow(val_x[11])\nax1.title.set_text(\"low-res image \")\nax2.imshow(val_y[11])\nax2.title.set_text(\"high-res image \")\nax3.imshow(predict_y[11])\nax3.title.set_text(\"model's output\")","f6a15d3e":"### AutoEncoder model"}}