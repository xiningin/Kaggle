{"cell_type":{"d84d8af8":"code","8cca01cb":"code","c2346e25":"code","e8d32ddb":"code","7c04daf4":"code","e7299fa3":"code","3ae1cdfb":"code","9a034f27":"code","de5488b4":"code","cf6fe30d":"code","76f49ddb":"code","2e576fbf":"code","23811570":"code","9f5c04f0":"code","0a165f8f":"code","4377e037":"code","a35e101b":"code","9440c542":"code","c8e190b8":"code","be023f78":"code","497891a3":"code","689a82bc":"code","35db5dcf":"markdown","f65d8223":"markdown","93a76e1e":"markdown","9ade7f6b":"markdown","ac00157c":"markdown","c1e0ef91":"markdown","c75c00b0":"markdown","528dfdc5":"markdown","e02b6797":"markdown","980deec7":"markdown","1faa7957":"markdown","7cac83b6":"markdown","99b03fe5":"markdown","e46e1f2d":"markdown","4afe0713":"markdown","4e1d2b7f":"markdown","a6c00018":"markdown","66a267a5":"markdown"},"source":{"d84d8af8":"# This piece of code enables display of multiple output from one cell.\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'","8cca01cb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c2346e25":"data = pd.read_csv(\"..\/input\/widsdatathon22\/train.csv\")\nprint(\"Type of the data after reading it : \", type(data))\nprint(\"Dimension of the Data : \" , data.shape)","e8d32ddb":"#to desplay all the rows(which columns of out main data)\npd.set_option('display.max_rows', data.shape[1]+1)\nprint(\"List of the features with it's datatype\\n\")\ndata.dtypes","7c04daf4":"#checking the stats of the numeric dtype features\ndata.describe()","e7299fa3":"#these both code gives the same output\n(data.isnull().sum() \/ data.shape[0]) * 100\n# data.isna().sum()","3ae1cdfb":"# from the above output, we can see that there are no missing values in site_eui variable\nprint(\"Data type of the site_eui : \",data[\"site_eui\"].dtype)\nprint(\"Stats for site_eui variable.\")\ndata['site_eui'].describe()\n\n#let's plot the sit_eui values to check the destribution of it\nsns.displot(data, x=\"site_eui\", kind=\"kde\")","9a034f27":"print(\"Features which has the object datatype.\\n\",data.select_dtypes(include = \"object\").head())\nState_Factor = data.State_Factor.unique().tolist()\nbuilding_class = data.building_class.unique().tolist()\nfacility_type = data.facility_type.unique().tolist()\nprint(\"State_Factor variable has \" , len(State_Factor), \" unique values\")\nprint(\"building_class variable has \" , len(building_class), \" unique values\")\nprint(\"facility_type variable has \" , len(facility_type), \" unique values\")","de5488b4":"corr = data.corr().round(1)\nfig, ax = plt.subplots()\nfig.set_size_inches(26, 22)\nsns.heatmap(corr,annot = True,cmap = \"Greens\")","cf6fe30d":"import copy\nnewData = copy.deepcopy(data)\nnewData = newData.drop(['direction_max_wind_speed','direction_peak_wind_speed','max_wind_speed','days_with_fog'] , axis = 1)\nnewData.shape","76f49ddb":"newData['year_built'].describe()\nprint(\"Instances having missing values : \" , newData['year_built'].isnull().sum() , \" which makes \" , (newData['year_built'].isnull().sum()\/newData.shape[0])*100 ,\"% missing values in year_built\")\nnewData['energy_star_rating'].describe()\nprint(\"Instances having missing values : \" , newData['energy_star_rating'].isnull().sum() , \" which makes \" , (newData['energy_star_rating'].isnull().sum()\/newData.shape[0])*100 ,\"% missing values in energy_star_rating\")","2e576fbf":"newData.shape\nprint(\"There are total\", (newData['year_built'] == 0).sum() , \"entry having 0 as it's entry\")\nnewData = newData[newData['year_built'] != 0]\nnewData.shape","23811570":"newData['year_built'].describe()\nnewData['year_built'].mode()\nprint(\"Total entries having mode as it's entry are\",(newData['year_built'] == 1927).sum())\nprint(\"Total entries at 50% distribution are\",(newData['year_built'] == 1951).sum())\n#replacing null values with mode\nnewData['year_built'] = newData['year_built'].fillna(1927.0)\nprint(\"Is there any missing values now ?\",bool(newData['year_built'].isna().sum()))","9f5c04f0":"print(\"Variance of the energy_star_rating is\",newData['energy_star_rating'].var())","0a165f8f":"newData = newData.drop(['energy_star_rating'] , axis = 1)\nnewData.shape\nnewData.isna().sum()","4377e037":"(newData['january_min_temp'] != newData['january_avg_temp']).sum()\nnewData['january_min_temp'].head()\nnewData['january_avg_temp'].head()","a35e101b":"newData['winter_avg_temp'] = (newData['december_avg_temp'] + newData['january_avg_temp'] + newData['february_avg_temp'])\/3\nnewData['spring_avg_temp'] = (newData['march_avg_temp'] + newData['april_avg_temp'] + newData['may_avg_temp'])\/3\nnewData['summer_avg_temp'] = (newData['june_avg_temp'] + newData['july_avg_temp'] + newData['august_avg_temp'])\/3\nnewData['fall_avg_temp'] = (newData['september_avg_temp'] + newData['october_avg_temp'] + newData['november_avg_temp'])\/3\nnewData = newData.drop(['january_avg_temp','february_avg_temp','march_avg_temp','april_avg_temp','may_avg_temp','june_avg_temp','july_avg_temp',\\\n                       'august_avg_temp','september_avg_temp','october_avg_temp','november_avg_temp','december_avg_temp'] , axis = 1)","9440c542":"newData['winter_min_temp'] = (newData['december_min_temp'] + newData['january_min_temp'] + newData['february_min_temp'])\/3\nnewData['spring_min_temp'] = (newData['march_min_temp'] + newData['april_min_temp'] + newData['may_min_temp'])\/3\nnewData['summer_min_temp'] = (newData['june_min_temp'] + newData['july_min_temp'] + newData['august_min_temp'])\/3\nnewData['fall_min_temp'] = (newData['september_min_temp'] + newData['october_min_temp'] + newData['november_min_temp'])\/3\nnewData = newData.drop(['january_min_temp','february_min_temp','march_min_temp','april_min_temp','may_min_temp','june_min_temp','july_min_temp',\\\n                       'august_min_temp','september_min_temp','october_min_temp','november_min_temp','december_min_temp'] , axis = 1)","c8e190b8":"newData['winter_max_temp'] = (newData['december_max_temp'] + newData['january_max_temp'] + newData['february_max_temp'])\/3\nnewData['spring_max_temp'] = (newData['march_max_temp'] + newData['april_max_temp'] + newData['may_max_temp'])\/3\nnewData['summer_max_temp'] = (newData['june_max_temp'] + newData['july_max_temp'] + newData['august_max_temp'])\/3\nnewData['fall_max_temp'] = (newData['september_max_temp'] + newData['october_max_temp'] + newData['november_max_temp'])\/3\nnewData = newData.drop(['january_max_temp','february_max_temp','march_max_temp','april_max_temp','may_max_temp','june_max_temp','july_max_temp',\\\n                       'august_max_temp','september_max_temp','october_max_temp','november_max_temp','december_max_temp'] , axis = 1)","be023f78":"newData.shape","497891a3":"df = copy.deepcopy(newData)\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()","689a82bc":"df['new_state_factor'] = labelencoder.fit_transform(df['State_Factor'])\ndf['new_building_class'] = labelencoder.fit_transform(df['building_class'])\ndf['new_facility_type'] = labelencoder.fit_transform(df['facility_type'])\ndf.head()\ndf.tail()","35db5dcf":"#### Let's check the destribution of the target variable (i.e., site_eui)","f65d8223":"### Objecive\n\nThe goal is to create model(s) to predict building energy consumption. The dataset consists of building characteristics and climate and weather variables for the regions in which the buildings are located. Accurate predictions of energy consumption can help policymakers target retrofitting efforts to maximize emissions reductions. The dataset was created in collaboration with Climate Change AI (CCAI) and Lawrence Berkeley National Laboratory (Berkeley Lab)\n\n### Data Description\nThe dataset consists of building characteristics (e.g. floor area, facility type etc), weather data for the location of the building (e.g. annual average temperature, annual total precipitation etc) as well as the energy usage for the building and the given year, measured as Site Energy Usage Intensity (Site EUI). Each row in the data corresponds to the a single building observed in a given year. \n\nThe eventual objective is to predict the Site EUI for each row as a function of the building features and the weather data for the location of the building. Your task for this asignment is to <b>perform data processing, EDA and necessary feature transformation<b> that would set you up for prediction.\n\n\n### Data Dictionary\n\n**id**: building id\n\n**Year_Factor**: anonymized year in which the weather and energy usage factors were observed\n\n**State_Factor**: anonymized state in which the building is located\n\n**building_class**: building classification\n\n**facility_type**: building usage type\n\n**floor_area**: floor area (in square feet) of the building\n\n**year_built**: year in which the building was constructed\n\n**energy_star_rating**: the energy star rating of the building\n\n**ELEVATION**: elevation of the building location\n\n**january_min_temp**: minimum temperature in January (in Fahrenheit) at the location of the building\n\n**january_avg_temp**: average temperature in January (in Fahrenheit) at the location of the building\n\n**january_max_temp**: maximum temperature in January (in Fahrenheit) at the location of the building\n\n**cooling_degree_days**: cooling degree day for a given day is the number of degrees where the daily average temperature exceeds 65 degrees Fahrenheit. Each month is summed to produce an annual total at the location of the building.\n\n**heating_degree_days**: heating degree day for a given day is the number of degrees where the daily average temperature falls under 65 degrees Fahrenheit. Each month is summed to produce an annual total at the location of the building.\n\n**precipitation_inches**: annual precipitation in inches at the location of the building\n\n**snowfall_inches**: annual snowfall in inches at the location of the building\n\n**snowdepth_inches**: annual snow depth in inches at the location of the building\n\n**avg_temp**: average temperature over a year at the location of the building\n\n**days_below_30F**: total number of days below 30 degrees Fahrenheit at the location of the building\n\n**days_below_20F**: total number of days below 20 degrees Fahrenheit at the location of the building\n\n**days_below_10F**: total number of days below 10 degrees Fahrenheit at the location of the building\n\n**days_below_0F**: total number of days below 0 degrees Fahrenheit at the location of the building\n\n**days_above_80F**: total number of days above 80 degrees Fahrenheit at the location of the building\n\n**days_above_90F**: total number of days above 90 degrees Fahrenheit at the location of the building\n\n**days_above_100F**: total number of days above 100 degrees Fahrenheit at the location of the building\n\n**days_above_110F**: total number of days above 110 degrees Fahrenheit at the location of the building\n\n**direction_max_wind_speed**: wind direction for maximum wind speed at the location of the building. Given in 360-degree compass point directions (e.g. 360 = north, 180 = south, etc.).\n\n**direction_peak_wind_speed**: wind direction for peak wind gust speed at the location of the building. Given in 360-degree compass point directions (e.g. 360 = north, 180 = south, etc.).\n\n**max_wind_speed**: maximum wind speed at the location of the building\n\n**days_with_fog**: number of days with fog at the location of the building\n\n#### Target\n**site_eui**: Site Energy Usage Intensity is the amount of heat and electricity consumed by a building as reflected in utility bills\n\nSource: WiDS Datathon 2022","93a76e1e":"## <b>Summary of EDA<\/b>\n* #### <b>Variables<\/b>\n<ul>\n    <li>Object datatype variables: There are total <b>3<\/b> variables with <b>Object<\/b> datatype<\/li>\n    <li>Numeric datatype variables: <b>Total 61<\/b> with numeric datatype<\/li>\n<\/ul>\n\n* #### <b>Missing Values<\/b>\n<p>There are total <b>6 variables <\/b> having missing values out of which, <b>4 variable<\/b> has more than <b>54%<\/b> of missing values<\/p>\n<p> The rest <b>2 variables (year_built, energy_star_rating) has comparatively less missing values<\/b><\/p>\n\n","9ade7f6b":"#### Correlation Plot","ac00157c":"In the stats of year_built we can see that there's a min value as 0, which is not possible for year data, so let's remove the data having 0 as it's entry in the data","c1e0ef91":"#### Let's first check for the stats of the features\n* <b>Note<\/b> The default describe() won't return the stats of object datatype.","c75c00b0":"#### Let's have a look at Object datatype varibles","528dfdc5":"### Understanding Data (Review)\n\n* Understand distributions\n* Trends\n* Relationships\n* Patterns","e02b6797":"### Transforming the temperature data variable to season wise","980deec7":"## <b>Handling missing Values<\/b>\n* First remove the variable having more than 50% of the missing values\n* Handle missing values of rest of the variables (i.e.,year_built, energy_star_rating)","1faa7957":"### Importing the usefull libraries\n\n* Numpy\n* Pandas","7cac83b6":"## <b>EDA on Training Data<\/b>","99b03fe5":"I have added new features i.e., transfored categorical datatype to numeric one","e46e1f2d":"#### Feature names in data","4afe0713":"<p>Here the <b>variance<\/b> of the this variable is <b>comparatively high<\/b>, which means that <b>model might be very sensitive to this data<\/b>.\nIn the ideal condition, the model should be stable\nand on the other hand, <b>missing value should not be higher than 25-30%.<\/b> energy_star_rating has ~35% of the missing values,so let's <b>remove<\/b> this variable from the dataset<\/p>","4e1d2b7f":"## <b>Feature Transformation<\/b>\n<p> It can be seen in the data that we have the <b>information about min,max & avg temperature of each month<\/b> of the year.<br>\n    Instead we can only have the information about temperature a <b>season(i.e., winter,fall,...etc)<\/b> wise.<br>\n    To do this we will have to <b>aggregate<\/b> the feature <b>into a single specific feature<\/b><br>\n    ${Avg Winter Temp} =  {AvgTempOf}\\frac{dec + Jan + Feb}{3}$ ","a6c00018":"Let's handle Object datatype variables(Transform Categorical to Numeric)","66a267a5":"#### Destribution of the missing values in data"}}