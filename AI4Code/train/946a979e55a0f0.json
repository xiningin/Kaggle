{"cell_type":{"c2dd8175":"code","26bbe388":"code","872de636":"code","004262d9":"code","35414831":"code","71280075":"code","5c2df4a1":"code","d40d0dcd":"code","8a593599":"code","d4ef7382":"code","5dfd0ffa":"code","eea27b47":"code","6f96ddfd":"code","7d5eadde":"code","09655400":"code","2a5fb12c":"code","66522a5a":"code","a2f4d5de":"code","a46bab70":"code","0619e6bb":"code","980ce270":"code","92dfb74b":"code","8f08c8bf":"code","eba4b298":"code","d2baf3ee":"code","b5d0e5f0":"code","ce2f0de3":"code","3d41f118":"code","9ab0972e":"code","7f005d8d":"code","bbeb1a29":"code","cc07fa5b":"code","96c59eb0":"code","3d3b2df6":"code","47cedb45":"code","fe4352f0":"code","47b64737":"code","4d8e072c":"code","1077cb39":"code","3ac3c218":"markdown","5dffa2c2":"markdown"},"source":{"c2dd8175":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26bbe388":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics","872de636":"calories = pd.read_csv('..\/input\/fmendesdat263xdemos\/calories.csv')\nexercise = pd.read_csv('..\/input\/fmendesdat263xdemos\/exercise.csv')","004262d9":"calories","35414831":"exercise","71280075":"data = pd.concat([exercise,calories.Calories],axis=1)\ndata","5c2df4a1":"data.info()","d40d0dcd":"data.describe()","8a593599":"data.isnull().sum()","d4ef7382":"sns.set()\nplt.figure(figsize=(6,6))\nsns.countplot(x=data.Gender)\nplt.show()","5dfd0ffa":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Height)\nplt.show()","eea27b47":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Weight)\nplt.show()","6f96ddfd":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Age)\nplt.show()","7d5eadde":"plt.figure(figsize=(6,6))\nsns.scatterplot(x=data.Height,y=data.Calories)\nplt.show()","09655400":"plt.figure(figsize=(6,6))\nsns.scatterplot(x=data.Weight,y=data.Calories)\nplt.show()","2a5fb12c":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Duration)\nplt.show()","66522a5a":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Heart_Rate)\nplt.show()","a2f4d5de":"plt.figure(figsize=(6,6))\nsns.distplot(x=data.Body_Temp)\nplt.show()","a46bab70":"data.corr()","0619e6bb":"X = data.drop(['User_ID','Gender','Age','Height','Weight','Heart_Rate','Body_Temp','Calories'],axis=1,index=None)\ny = data.drop(['User_ID','Gender','Age','Height','Weight','Heart_Rate','Body_Temp','Duration'],axis=1)","980ce270":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","92dfb74b":"X_train.shape,X_test.shape","8f08c8bf":"lr = LinearRegression()\nlr.fit(X_train,y_train)","eba4b298":"pred = lr.predict(X_train)\nscore = metrics.r2_score(y_train,pred)\nscore","d2baf3ee":"pred1 = lr.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","b5d0e5f0":"dt = DecisionTreeRegressor()\ndt.fit(X_train,y_train)\npred = dt.predict(X_train)\nscore = metrics.r2_score(y_train,pred)\nscore","ce2f0de3":"pred1 = dt.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","3d41f118":"rf = RandomForestRegressor()\nrf.fit(X_train,y_train)\npred = rf.predict(X_train)\nscore = metrics.r2_score(y_train,pred)\nscore","9ab0972e":"pred1 = rf.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","7f005d8d":"X = data.drop(['User_ID','Gender','Age','Height','Weight','Calories'],axis=1,index=None)\ny = data.drop(['User_ID','Gender','Age','Height','Weight','Duration'],axis=1)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nX_train.shape,X_test.shape","bbeb1a29":"lr.fit(X_train,y_train)\npred = lr.predict(X_train)\nscore = metrics.r2_score(y_train,pred)\nscore","cc07fa5b":"pred1 = lr.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","96c59eb0":"dt.fit(X_train,y_train)\npred1 = dt.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","3d3b2df6":"rf.fit(X_train,y_train)\npred1 = rf.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","47cedb45":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata.Gender = le.fit_transform(data.Gender)\ndata","fe4352f0":"X = data.drop(['User_ID','Calories'],axis=1,index=None)\ny = data.drop(['User_ID','Duration'],axis=1)\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)\nX_train.shape,X_test.shape","47b64737":"lr.fit(X_train,y_train)\npred = lr.predict(X_test)\nscore = metrics.r2_score(y_test,pred)\nscore","4d8e072c":"dt.fit(X_train,y_train)\npred1 = dt.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","1077cb39":"rf.fit(X_train,y_train)\npred1 = rf.predict(X_test)\nscore1 = metrics.r2_score(y_test,pred1)\nscore1","3ac3c218":"Model Training \n1. Model with only duration\n2. Model with all the relevant columns\n3. Model with all the columns","5dffa2c2":"Data Visualization"}}