{"cell_type":{"f4f515d1":"code","f768f655":"code","98f08794":"code","53ec3b76":"code","9c63d038":"code","bc803aea":"markdown","34f97f5b":"markdown","f8fe08d4":"markdown","34fbc854":"markdown"},"source":{"f4f515d1":"import numpy as np\nimport torch\nimport csv\nimport os\nimport sys\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport pandas as pd\nimport torch.utils.data as Data","f768f655":"homedir = \"\/kaggle\/titanic\/\"\ntraindir = []\ntestdir = []\nD = os.listdir(homedir)\n\nl = len(D)\nfor i in np.arange(l):\n    if D[i] == 'train.csv':\n        traindir = homedir + D[i]\n    if D[i] == 'test.csv':\n        testdir = homedir + D[i]\n\nif len(traindir) == 0:\n    sys.exit()\n\n#dataframe format\n\ntraindata_ = pd.read_csv(traindir)\nclass_t = traindata_.iloc[:,94:]\n\n#trainfeature\ntrainfeature = traindata_.iloc[:,1:94]\n\ntorchtrainfeature = torch.tensor(trainfeature.values)\n\nl = len(class_t)\ntorch.set_default_tensor_type(torch.FloatTensor)\ntarget_ = torch.zeros(l).long()\n\nfor i in range(l):\n    a = class_t.iloc[i].values[0][6]\n    order = int(a)\n    target_[i] = order - 1\n\ntorchtrainfeature = torchtrainfeature.float()\ntraindata = Data.TensorDataset(torchtrainfeature, target_)\n\nprint(target_.shape)\nprint(torchtrainfeature.shape)\nprint(type(traindata))\n\n\ntrain_loader = Data.DataLoader(\n    dataset = traindata,\n    batch_size=64,\n    shuffle=True,\n    num_workers=0\n)","98f08794":"class Net(torch.nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.linear1 = torch.nn.Linear(93, 128)\n        self.linear2 = torch.nn.Linear(128, 256)\n        self.linear3 = torch.nn.Linear(256, 512)\n        self.linear4 = torch.nn.Linear(512, 256)\n        self.linear5 = torch.nn.Linear(256, 128)\n        self.linear6 = torch.nn.Linear(128, 64)\n        self.linear7 = torch.nn.Linear(64, 32)\n        self.linear8 = torch.nn.Linear(32, 9)\n\n    def forward(self, x):\n        x = F.relu(self.linear1(x))\n        x = F.relu(self.linear2(x))\n        x = F.relu(self.linear3(x))\n        x = F.relu(self.linear4(x))\n        x = F.relu(self.linear5(x))\n        x = F.relu(self.linear6(x))\n        x = F.relu(self.linear7(x))\n        return  self.linear8(x)\n\nmodel = Net()","53ec3b76":"criterion = torch.nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr = 0.01, momentum=0.5)","9c63d038":"def train(epoch):\n    running_loss = 0.0\n    for batch_idx,data in enumerate(train_loader, 0):\n        inputs, target = data\n        optimizer.zero_grad()\n\n        outputs = model(inputs)\n        loss = criterion(outputs, target)\n        loss.backward()\n        optimizer.step()\n\n        running_loss = running_loss + loss.item()\n        if batch_idx % 50 == 49:\n            print(\"running_loss =\", running_loss\/50.0)\n            running_loss = 0.0\n\nfor epoch in range(100):\n    train(epoch)","bc803aea":"#step 2: Design model using class","34f97f5b":"#step 1: prepare train and test dataset","f8fe08d4":"#step 3: construct Loss and Optimizer","34fbc854":"#step 4: Train cycle"}}