{"cell_type":{"83697534":"code","56341c81":"code","0477e318":"code","8dd7ce7a":"code","bfa1ed1a":"code","94121700":"code","1be2751f":"code","6a1eb020":"code","0fa23ea7":"code","c900df28":"code","011751c7":"code","82efa7ea":"code","5a9fea1c":"code","b2a1b19a":"code","9b11eaa5":"code","bddd6e6d":"code","bb61e657":"code","54b34ba2":"code","210c5e90":"code","9340dc34":"code","dca0ea74":"code","3816bb76":"code","ef256a58":"code","74dcab6d":"code","89a30cc3":"code","297a0679":"code","930df9b8":"markdown","fb0d5405":"markdown","d6076dd0":"markdown","c9924b38":"markdown"},"source":{"83697534":"# importing numpy\nimport numpy as np","56341c81":"np.int(2)","0477e318":"np.int(2.1)","8dd7ce7a":"np.int(2.8)","bfa1ed1a":"# Explore all the different datatypes","94121700":"a=np.array([0,1,2,3,4,5])\na","1be2751f":"print('The array is ',a,'and the type is',type(a),'and the elements datatype is',a.dtype)\na = np.array([0,1,2,3.0,4,5])\nprint('The array is ',a,'and the type is',type(a),'and the elements datatype is',a.dtype)\na = np.array([True,False])\nprint('The array is ',a,'and the type is',type(a),'and the elements datatype is',a.dtype)","6a1eb020":"# Setting datatype for the elements of an array.\nnp.array([0, 1, 2], dtype=np.uint8)","0fa23ea7":"# Type casting to arrays\na=np.array([0,1,2,3,4,5])\na.astype(float) ","c900df28":"print('Demension of an array is',a.ndim)","011751c7":"b = np.array([[1,2,3],\n              [4,5,6]])\nprint('The array is ',b,'and the type is',type(b),'and the elements datatype is',b.dtype,'with demensions',b.ndim)","82efa7ea":"c = np.array([[[1,2,3],[4,5,6]],\n             [[7,8,9],[10,11,12]]])\nprint('The array is ',c,'and the type is',type(c),'and the elements datatype is',c.dtype,'with demensions',c.ndim)","5a9fea1c":"print('Size of the array is',c.size)","b2a1b19a":"d=np.array([[3,4,5,6],\n           [7,8,9]])\n# If the values are in consistent then it takes each block as one list of type object.\nd.dtype","9b11eaa5":"e=np.array(['a','b','c'])\ne.dtype","bddd6e6d":"# arange can only generate a single dimensional array.\nf=np.arange(5)\nprint(f)\ng=np.arange(5,55)\nprint(g)\nh=np.arange(5,2)\nprint(h)\ni=np.arange(5,105,5)\nprint(i)","bb61e657":"j=np.arange(0,100,5).reshape(5,4)\nprint(j)","54b34ba2":"k=np.arange(0,100,5).reshape(2,2,5)\nprint(k)\n# 2*2*5 = len(n)\nk.ravel() # gives u the single dimension with all the elements","210c5e90":"print(np.random.rand())\nprint(np.random.rand()*100)","9340dc34":"print(np.random.randint(100))\nprint(np.random.randint(10,30))","dca0ea74":"np.random.randint(10,high=30,size=15).reshape(5,3)","3816bb76":"print(np.floor(3.99))\nprint(np.ceil(3.09))","ef256a58":"print(np.round(1.0))\nprint(np.round(1.1))\nprint(np.round(1.2))\nprint(np.round(1.3))\nprint(np.round(1.4))\nprint(np.round(1.5))\nprint(np.round(1.6))\nprint(np.round(1.7))\nprint(np.round(1.8))\nprint(np.round(1.9))","74dcab6d":"print(np.round(0.5))\nprint(np.round(1.5))\nprint(np.round(2.5))\nprint(np.round(3.5))\nprint(np.round(4.5))\nprint(np.round(5.5))\nprint(np.round(6.5))\nprint(np.round(7.5))\nprint(np.round(8.5))\nprint(np.round(9.5))","89a30cc3":"o=np.linspace(0,30,4) # Equally distributes\nprint(o)\np=np.linspace(0,20,4) # Equally distributes\nprint(p)\nq=np.linspace(0,10,4) # Equally distributes\nprint(q)","297a0679":"r=np.array([2,3,4,5])\ns=r # refering the same data with a different name\nt= r.copy() # copying the data to a different variable.","930df9b8":"**Datatypes in numpy**\n1. bool_ = Boolean (True or False) stored as a byte\n1. int_ = Default integer type (same as C long; normally either int64 or int32)\n1. intc = Identical to C int (normally int32 or int64)\n1. intp = Integer used for indexing (same as C ssize_t; normally either int32 or int64)\n1. int8 = Byte (-128 to 127)\n1. int16 = Integer (-32768 to 32767)\n1. int32 = Integer (-2147483648 to 2147483647)\n1. int64 = Integer (-9223372036854775808 to 9223372036854775807)\n1. uint8 = Unsigned integer (0 to 255)\n1. uint16 = Unsigned integer (0 to 65535)\n1. uint32 = Unsigned integer (0 to 4294967295)\n1. uint64 = Unsigned integer (0 to 18446744073709551615)\n1. float_ = Shorthand for float64.\n1. float16 = Half precision float: sign bit, 5 bits exponent, 10 bits mantissa\n1. float32 = Single precision float: sign bit, 8 bits exponent, 23 bits mantissa\n1. float64 = Double precision float: sign bit, 11 bits exponent, 52 bits mantissa\n1. complex_ = Shorthand for complex128.\n1. complex64 = Complex number, represented by two 32-bit floats (real and imaginary components)\n1. complex128 = Complex number, represented by two 64-bit floats (real and imaginary components)","fb0d5405":"**Numpy = Numerical Python**\n1. Numpy : http:\/\/www.numpy.org\/\n1. Installation with Python : !pip install numpy\n1. Installation with Anaconda : !conda install numpy\n\nSource : https:\/\/docs.scipy.org\/doc\/numpy-1.15.4\/user\/basics.html","d6076dd0":"* a=np.array([]) --> syntax for creating an array\n* a.dtype --> data type of the lements\n* a.size --> tells you number of elements in the array.\n* a.ndim --> Gives the dimension of the array\n* a.shape --> Gives the elements in the each demension","c9924b38":"**A 'n' dimensional array is just a collection of (n-1) dimensional array.**"}}