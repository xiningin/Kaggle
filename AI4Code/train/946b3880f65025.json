{"cell_type":{"8301f1a0":"code","c9fdf80f":"code","d99fe997":"code","2c816001":"code","f2efdd75":"code","d26d4866":"code","d7633fcb":"code","6f4af38b":"code","1424371d":"code","48ac1818":"code","fa347dc4":"code","a3253546":"code","dd5217ce":"code","8c558788":"code","da732414":"code","1101bd63":"code","3bbde060":"code","8b4de952":"code","35b342c9":"code","db159df6":"code","1f7aeccd":"code","374f36d6":"code","c739e7e3":"code","57c0c373":"code","f7c13799":"code","375f1765":"code","286ec242":"code","c15e1a0f":"code","d610b773":"code","4e356c34":"code","4a466628":"code","4b6b9bfb":"code","bae59650":"code","6a29b27b":"code","92fadc0d":"code","412338ad":"code","637ab980":"code","88ad89ea":"markdown","8cbff1ff":"markdown","563b7368":"markdown"},"source":{"8301f1a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9fdf80f":"df=pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')\ndf.head()","d99fe997":"df=df.drop(['No','X1 transaction date'],axis=1)\ndf.head()","2c816001":"#change to name of columns:\ndf.rename({'X2 house age':'house age','X3 distance to the nearest MRT station':'station',\n          'X4 number of convenience stores':'stores','X5 latitude':'latidude','X6 longitude':'longitude',\n          'Y house price of unit area':'price'},axis='columns',inplace=True)","f2efdd75":"df.head(10)","d26d4866":"#this dataser 414 observation units and 6 columns\ndf.shape","d7633fcb":"df.info()","6f4af38b":"#have the dataset null values any observation units?\ndf.isnull().sum().sum()","1424371d":"import seaborn as sns\nimport matplotlib.pyplot as plt","48ac1818":"#corelation of columns:\nplt.figure(figsize=(15,7))\nsns.heatmap(df.corr(),annot=True,fmt=\".3f\",linewidths = .5);","fa347dc4":"#descriptive statistics of columns\nplt.figure(figsize=(17,7))\nsns.heatmap(df.describe().T,annot=True,fmt='.2f',linewidths = .5)\nplt.show()","a3253546":"df.head()","dd5217ce":"#add independent variables to x \n#add dependent variable to y\nx=df.drop(['price'],axis=1)   #\u0131 erased dependent variable by .drop funciton,on to exist dependent variable in x valuable\ny=df['price']    #this is dependent variable in y valuable","8c558788":"#independent variables\nx.head()","da732414":"#dependent variable\ny[0:5]","1101bd63":"#now \u0131 will train-test split by function of train_test_split\nfrom sklearn.model_selection import train_test_split","3bbde060":"#ready:%90 for train,%10 for test \nx_train,x_test,y_train,y_test=train_test_split(x,y,\n                                              test_size=0.10,\n                                              random_state=42)","8b4de952":"print('x_train_shape',x_train.shape)\nprint('x_test_shape',x_test.shape)\nprint('y_train_shape',y_train.shape)\nprint('y_test_shape',y_test.shape)","35b342c9":"#now,\u0131 import RandomForestRegressor function:\nfrom sklearn.ensemble import RandomForestRegressor","db159df6":"rf_model=RandomForestRegressor(random_state=42)  #model object\nrf_model.fit(x_train,y_train)   #model was fitted","1f7aeccd":"#predict:\nrf_model.predict(x_test)","374f36d6":"y_pred=rf_model.predict(x_test)","c739e7e3":"from sklearn.metrics import mean_squared_error,r2_score","57c0c373":"print(np.sqrt(mean_squared_error(y_test,y_pred)))\nprint(r2_score(y_test,y_pred))","f7c13799":"rf_params={'max_depth':list(range(1,10)),\n           'max_features':[3,5,10,15],\n           'n_estimators':[100,200,500,1000,2000]}","375f1765":"rf_model=RandomForestRegressor(random_state=42)","286ec242":"from sklearn.model_selection import GridSearchCV","c15e1a0f":"rf_cv_model=GridSearchCV(rf_model,\n                         rf_params,\n                         cv=10,\n                         n_jobs=-1).fit(x_train,y_train)","d610b773":"#optimum parameter:\nrf_cv_model.best_params_","4e356c34":"#now,\u0131 will buil final model,to use best_params:\nrf_tuned=RandomForestRegressor(max_depth=rf_cv_model.best_params_['max_depth'],\n                              max_features=rf_cv_model.best_params_['max_features'],\n                              n_estimators=rf_cv_model.best_params_['n_estimators']).fit(x_train,y_train)","4a466628":"#predict:\nrf_tuned.predict(x_test)","4b6b9bfb":"y_pred=rf_tuned.predict(x_test)","bae59650":"#test error and r*2 score:\nprint('test error:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('r*2 score:',r2_score(y_test,y_pred))","6a29b27b":"import matplotlib.pyplot as plt","92fadc0d":"#let's see importance of variables:\n#significance according to dependent variable:\nImportance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                          index = x_train.columns)","412338ad":"Importance","637ab980":"Importance.sort_values(by = \"Importance\",\naxis = 0,\nascending = True).plot(kind =\"barh\", color = \"r\")\nplt.xlabel(\"significance of independent variables\")\nplt.show()","88ad89ea":"## hyperparamether of RandomForestRegressor:\n\n* n_estimator:number of estimators,number of trees to fit\n* max_features:the maximum number of variables required for the division operation\n* max_depth:depth level of each trees\n* min_samples_split:expresses the minimum number of observations in that node before a node is split\n* min_samples_leaf:minimum number of observations in a node","8cbff1ff":"## train-test resmi eklenecek","563b7368":"## Model Tuning:"}}