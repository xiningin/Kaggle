{"cell_type":{"e86ed4e0":"code","d7b49cc0":"code","a2fe4a40":"code","fdd46edd":"code","ec3f23dd":"code","80f59889":"code","4481f642":"code","0f78439e":"code","d2a6eaa0":"code","13cd9e13":"code","df30d87c":"code","aabb531c":"code","e47ac488":"code","6115ba1e":"code","2fe16e70":"code","21333284":"code","b42cf8e1":"code","14ce258e":"code","9561ab4c":"code","ec78decb":"code","873d48a1":"code","95e8c75c":"code","617b3915":"code","1c5dc38a":"code","f6be99e2":"code","6fbc25bd":"code","3b944803":"code","8fe18712":"code","392eafb8":"code","8cdb82a0":"code","1b81cbe3":"code","b495d08e":"code","d85ebb4e":"code","3a857f64":"code","8ea3153d":"code","21b0b97b":"code","2d3fb027":"code","aefb0ca2":"markdown"},"source":{"e86ed4e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7b49cc0":"# importing the required librar\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a2fe4a40":"df = pd.read_csv('..\/input\/air-traffic-passenger-statistics\/Air_Traffic_Passenger_Statistics.csv') # Load tha dataset\ndf","fdd46edd":"copy_data = df.copy()  # leaving the original dataset untouched in case it will be needed later\ncopy_data","ec3f23dd":"df.head(10)","80f59889":"df.tail(10)","4481f642":"df.shape ","0f78439e":"df.dtypes","d2a6eaa0":"df.info()","13cd9e13":"df.rename(columns={'Activity Period': 'Activity_Period',\n                   'Operating Airline': 'Operating_Airline',\n                   'GEO Summary': 'GEO_Summary',\n                   'GEO Region': 'GEO_Region',\n                   'Activity Type Code': 'Activity_Type',\n                   'Price Category Code': 'Price_Category',\n                   'Boarding Area': 'Boarding_Area',\n                   'Passenger Count': 'Passenger_Count',}, inplace=True)  ","df30d87c":"df_null = df[df['Published Airline IATA Code'].isnull()] #will show dataset with columns that have missing data\ndf_null ","aabb531c":"nulls = df.isnull().sum().to_frame()# (to_frame():Convert Series to DataFrame),(sum():To sum the number of missing values),(isnull()to detect missing values)\nnulls.columns = [\"Missing values\"] \nnulls","e47ac488":"df.drop(['Operating Airline IATA Code', 'Published Airline IATA Code','Published Airline'],axis=1, inplace=True ) # delete two columns ,(axis=1:refers to column dimension)","6115ba1e":"nulls = df.isnull().sum().to_frame()\n# (to_frame():Convert Series to DataFrame),(sum():To sum the number of missing values),(isnull()to detect missing values)\nnulls.columns = [\"Missing values\"] \nnulls","2fe16e70":"df.shape ","21333284":"df[\"Activity_Type\"].replace({\"Thru \/ Transit\": \"Transit\"}, inplace=True)","b42cf8e1":"df['Activity_Period']  # to display the values of colum","14ce258e":"df_date = pd.to_datetime(df['Activity_Period'],format = \"%Y%m\").to_frame() \ndf_date  # to format the date ","9561ab4c":"df['Activity_Period'] = df_date","ec78decb":"df['Activity_Period'] ","873d48a1":"Year = df[\"Activity_Period\"].dt.year \nMonth = df[\"Activity_Period\"].dt.month\ndf['Year'] = Year # add new column to dataframe\ndf['Month'] = Month # add new column to dataframe\ndf","95e8c75c":"# Delete Rows by Checking Conditions\ndf1 = df.drop(df[df.Year < 2019 ].index)\nprint(df1)","617b3915":"df1[\"Activity_Type\"].replace({\"Thru \/ Transit\": \"Transit\"}, inplace=True)","1c5dc38a":"df1","f6be99e2":"df1.head(10)","6fbc25bd":"df1.tail(10)","3b944803":"df1.shape","8fe18712":"df1.info()","392eafb8":"df_2020 = df1[df1['Year'] == 2020] # to get subset from dataset\ndf_2020 ","8cdb82a0":"df_Most_country = df_2020.groupby('GEO_Region').Passenger_Count.sum().sort_values(ascending=False ).head(5).to_frame().reset_index()\ndf_Most_country","1b81cbe3":"#A visual display of information to represent the data of the 5 most visited countries in 2020\nplt.figure(figsize = [7,7])\nplt.xticks(rotation = 45)\nfig1 = sns.barplot(x ='GEO_Region',y = 'Passenger_Count' , data = df_Most_country , color = \"#002366\"  )\nplt.title('Most 5 traveled countries in 2020',fontsize = 15,weight='bold',color='black')\nplt.xlabel('Region',fontsize = 10, weight = 'bold',color='Black')\nplt.ylabel('Number of Passenger',fontsize = 10, weight = 'bold',color='Black')","b495d08e":"Expected_increase = df1.groupby('Year').Passenger_Count.sum().sort_values(ascending=False ).to_frame().reset_index()\nExpected_increase\npalette = \"Set2\"","d85ebb4e":"plt.figure(figsize = [7,7])\nfig2 = sns.barplot(x ='Year',y = 'Passenger_Count' , data = Expected_increase , color = '#002366' )\nplt.title('Expected increase in the number of passengers by years',fontsize =10,weight='bold',color='black')\nplt.xlabel('Year',fontsize = 11, weight = 'bold',color='Black')\nplt.ylabel('Number of Passenger',fontsize = 10, weight = 'bold',color='Black')","3a857f64":"# To get the maximum number of travelers by months\ndf_2020_sum = df_2020.groupby('Month').Passenger_Count.sum().sort_values(ascending=False ).to_frame().reset_index()\ndf_2020_sum","8ea3153d":"# A visual display of information to represent the data of the most traveled month by number of passengers\nplt.figure(figsize = [7,7])\nplt.title('The maximum number of travelers by months in 2020',fontsize = 10,weight='bold',color='black')\nsns.barplot(x ='Month', y='Passenger_Count' , data = df_2020_sum ,palette=\"Blues_d\")\nplt.xlabel('Month',fontsize = 10, weight = 'bold',color='Black')\nplt.xticks([0,1,2,3,4,5,6,7,8,9,10,11],['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\nplt.ylabel('Passenger_Count' ,fontsize = 10 , weight = 'bold',color='Black')\n# Show the plot\nplt.show()","21b0b97b":"df1_Terminal = df_2020.groupby('Terminal').Passenger_Count.sum().sort_values(ascending=False ).to_frame().reset_index()\ndf1_Terminal","2d3fb027":"# A visual display of information to represent the data of the most traveled month by number of passengers\nplt.figure(figsize = [7,7])\nplt.title('Most crowded Terminal in 2020',fontsize = 10,weight='bold',color='black')\nsns.barplot(x ='Terminal', y='Passenger_Count' , data = df1_Terminal ,palette=\"Blues_d\")\nplt.xlabel('Terminal',fontsize = 10, weight = 'bold',color='Black')\nplt.ylabel('Number of Passenger' ,fontsize = 10 , weight = 'bold',color='Black')\n# Show the plot\nplt.show()","aefb0ca2":"# Data Description: \nThis dataset about  San Francisco International Airport Report on Monthly Passenger Traffic Statistics by Airline. Data is self-reported by airlines and is only available at a monthly level. Data is updated quarterly . Airport data is seasonal in nature, therefore any comparative analyses should be done on a period-over-period basis (i.e. January 2010 vs. January 2009) as opposed to period-to-period (i.e. January 2010 vs. February 2010) . The dataset have 46670 rows and 12 columns .\n\n# Question\/need: \n1- 1-The five most visited countries in 2020?\n\n2-What is the expected increase in the number of passengers by years ?\n\n3- What is the most month in which the number of passengers was high ?\n\n4-What is the most crowded Terminal in 2020 ?\n\n\n# Tools:\n1 \u2013 GitHub : To upload project files . \n\n2- Jupyter : To write the code\n\n3- Python : The language in which the code will be written. Some important libraries will be used, including:  \n1-\tPandas .\n2-\tMatplotlib.\n3-\tSeaborn. \n"}}