{"cell_type":{"ed9b67a0":"code","a610cc7c":"code","42bf7dc5":"code","4d049a86":"code","2041c387":"code","be72d858":"code","14c05121":"code","e78d3e64":"code","14f51824":"code","cde7e67d":"code","63d3cf0a":"code","8d23a9bb":"code","bf7b2baf":"code","2f83a93f":"code","7ad068b0":"code","4b8307ef":"code","3b31ef8c":"code","6ee0c55a":"code","29dc7bb4":"code","43d5edc0":"code","06538c1a":"code","ac6607ae":"code","771c3cad":"code","c0c4ba71":"code","32d2fc3d":"code","a3f4083a":"code","f3ae9d96":"code","8c75a09f":"code","29bc3c2a":"code","c3490fef":"code","e2572e49":"code","c5c5260a":"code","bfc1ac87":"code","a52fa2f4":"code","35ad6eb6":"code","10d9c668":"code","6405b00f":"code","9f02ce36":"code","f59d192d":"code","2bdd03f2":"code","0fe5fc1c":"code","cc9280a3":"code","01ca3516":"code","21397f76":"code","0ffe71bf":"code","3d7e3ae7":"code","f0ccfab2":"code","805685d6":"code","c1eab2e8":"code","a157c82d":"code","8b5e473d":"code","2b248a94":"code","313fe353":"code","ebbd8ab3":"code","74c24594":"code","6abce039":"code","9d28f4e3":"code","0f79aa7b":"code","e696dbac":"code","71b16354":"code","01fe7b80":"code","c5bcfefe":"code","799071ac":"code","9c76a10c":"code","5adb1dd1":"code","61ae847e":"code","5da8a393":"code","14ae68db":"markdown","d56c81db":"markdown","bc9805a7":"markdown","50b1035d":"markdown","83514768":"markdown","620071e3":"markdown","c670124c":"markdown","1485478d":"markdown","bfa3da3c":"markdown","6f08faa5":"markdown","bc3da340":"markdown","cc1a3980":"markdown","4448ff14":"markdown","eba320da":"markdown","4e142c7b":"markdown","bd212c28":"markdown","b87bed41":"markdown","774d3951":"markdown"},"source":{"ed9b67a0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nprint('+++')","a610cc7c":"train_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv')\ntrain_identity.head(3)","42bf7dc5":"print(train_identity.shape) # (144233, 41)\ntrain_identity.columns","4d049a86":"train_identity.info()","2041c387":"# \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043c\u0430\u043b\u044b\u043c \u043a\u043e\u043b-\u0432\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nList_nan_drop = []\nfor i in train_identity.columns[1:]:\n    r = train_identity[i].isna().sum() \/ len(train_identity) * 100\n#    print('len - ',len(train_identity), ', NaN - ' , train_identity[i].isna().sum(), \\\n#          ', \u0434\u043e\u043b\u044f - ', round(r, 2))\n    k = 50\n    if r > k:\n        List_nan_drop.append(i)\nprint('\u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u041d\u0410\u041d > {}% - {}'.format(k , len(List_nan_drop)))\nList_nan_drop # \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u041d\u0410\u041d = 50% \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n","be72d858":"#print(train_identity.isnull().sum()) # Nan \u0434\u043e \u0437\u0430\u043c\u0435\u043d\u044b\ntrain_identity = train_identity.fillna(0) # \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 NaN \u043d\u0430 0\nprint(train_identity.isnull().sum()) # Nan \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043c\u0435\u043d\u044b","14c05121":"# \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043c\u0430\u043b\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445\n\n\n\nprint('\u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(train_identity.columns), '\\n')\n#train_identity.info(null_counts = True)\ntrain_columns_index = [3, 4, 6, 7, 8, 9,10, 11, 21, 22, 23, 24, 25, 26, 27, 33,] \n#\u0441\u043f\u0438\u0441\u043e\u043a \u043a \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e \/ \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043c \u043c\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_identity_new = train_identity.drop(train_identity.columns[train_columns_index], axis='columns')\n\nprint('\\n \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(train_identity_new.columns), '\\n', train_identity_new.columns)\ntrain_identity.id_15.value_counts()","e78d3e64":"## \u041a\u0410\u0422\u0415\u0413\u041e\u0420\u0418\u0410\u041b\u042c\u041d\u042b\u0415 \u041f\u0420\u0418\u0417\u041d\u0410\u041a\u0418 \u0418\u0417\u041c\u0415\u041d\u042f\u0415\u041c\/ object --> category   \/  \u0435\u0441\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \n## \u043c\u0435\u0442\u043e\u0434 get_dummies\n\n\n#def categor_change(train_identity_new):  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \/ \u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\n#    for i in train_identity_new.columns: # \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0433\u0434\u0435 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\n#        if train_identity_new[i].dtypes == 'object': # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c object\n#            train_identity_new[i] = train_identity_new[i].astype('category') # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\n#categor_change(train_identity_new)\n#train_identity_new.info()","14f51824":"#train_identity_new['DeviceInfo'].count()\n#train_identity_new.groupby('DeviceInfo').size() \/ len(df) # \u043d\u0430\u0434\u043e \u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n# \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \"0\" - 17% , 83% - \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445","cde7e67d":"# \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 - \u0443\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0443\u0436\u043d\u044b\u0435\n# 1. \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nlist_kategor = ['id_12','id_15','id_16','id_28','id_29','id_30','id_31','id_34','id_35','id_36','id_37','id_38','DeviceInfo', 'DeviceType']\ntrain_identity_new = train_identity_new.drop( list_kategor, axis = 1)\n\n\n#train_identity_new.info()\n\n# 2. \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\n#train_identity_new = train_identity_new.drop( 'DeviceInfo', axis =1) # \u0443\u0434\u0430\u043b\u0438\u043c , \u0442.\u043a. \u0442\u0430\u043c 1787 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 str\n# \u0444.(get_dummies) \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0438\u043f \"\u043e\u0431\u044a\u0435\u043a\u0442\" \u0430 \u043d\u0435 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440.\" \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0432 \u0442\u0438\u043f \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\n#train_identity_new = pd.get_dummies(train_identity_new, columns= ['DeviceType']) # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0442\u0430\u043b \u0445\u0443\u0436\u0435\n#train_identity_new.head()\n#train_identity_new.info()","63d3cf0a":"print('\\n \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(train_identity_new.columns), '\\n', train_identity_new.columns)\nprint(train_identity_new.shape) # (144233, 11)","8d23a9bb":"train_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv')","bf7b2baf":"train_transaction.shape  # (590540, 394)\n#train_identity.shape # (144233, 41)","2f83a93f":"train_transaction_new = train_transaction.fillna(0) # \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 NaN \u043d\u0430 0\n#train_transaction_new.isnull().sum()  # \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u041d\u0410\u041d \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \/ \u0442\u0435\u043f\u0435\u0440\u044c \u041d\u0410\u041d \u043d\u0435\u0442","7ad068b0":"train_transaction_new.columns","4b8307ef":"train_transaction_new.info()\n#train_transaction_new.columns.values","3b31ef8c":"for i in train_transaction.columns: # \u0443\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445  - \u043e\u0431\u044a\u0435\u043a\u0442\n    if train_transaction[i].dtypes == 'object':\n        print(i, 'object')","6ee0c55a":"train_transaction_new['vv'] = train_transaction_new.filter(like = 'V').sum(1)\/len(train_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\ntrain_transaction_new['vv']\n#train_transaction_new['vv'].hist()\n#train_transaction_new['vv'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_V = train_transaction_new.filter(like = 'V').columns\nlist_drop_V\ntrain_transaction_new = train_transaction_new.drop(list_drop_V, axis = 1)\ntrain_transaction_new.columns","29dc7bb4":"train_transaction_new['cc'] = train_transaction_new.filter(like = 'C').sum(1)\/len(train_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\n#train_transaction_new['cc'].hist()\n#train_transaction_new['cc'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \/ \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_C = train_transaction_new.filter(like = 'C').columns\nlist_drop_C\ntrain_transaction_new = train_transaction_new.drop(list_drop_C, axis = 1)\ntrain_transaction_new.columns","43d5edc0":"train_transaction_new = train_transaction_new.rename(columns= {'TransactionID':'Transaction_id'})\ntrain_transaction_new['dd'] = train_transaction_new[1:].filter(like = 'D').sum(1)\/len(train_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\ntrain_transaction_new['dd']\n#train_transaction_new['dd'].hist()\n#train_transaction_new['dd'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_D = train_transaction_new.filter(like = 'D').columns\nlist_drop_D\ntrain_transaction_new = train_transaction_new.drop(list_drop_D, axis = 1)\ntrain_transaction_new = train_transaction_new.rename(columns= {'Transaction_id':'TransactionID'})\ntrain_transaction_new.columns","06538c1a":"train_transaction_new = train_transaction_new.drop(['P_emaildomain', 'R_emaildomain'], axis = 1)\ntrain_transaction_new.head(3)","ac6607ae":"#train_transaction_new.filter(like = 'M').info() # \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\u043a\u043e\u043b\u043e\u043d\u043a\u0438\ntrain_transaction_new.filter(like = 'M').head()\n\ntrain_transaction_new = pd.get_dummies(train_transaction_new) # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \"\u041c\" \nprint(train_transaction_new.columns)\ntrain_transaction_new.head(3)","771c3cad":"# \u0442\u0443\u0442 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n## \u041a\u0410\u0422\u0415\u0413\u041e\u0420\u0418\u0410\u041b\u042c\u041d\u042b\u0415 \u041f\u0420\u0418\u0417\u041d\u0410\u041a\u0418 \u0418\u0417\u041c\u0415\u041d\u042f\u0415\u041c\/ object --> category\ndef categor_change(train_transaction_new):  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \/ \u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\n    for i in train_transaction_new.columns: # \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0433\u0434\u0435 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\n        if train_transaction_new[i].dtypes == 'object': # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c object\n            train_transaction_new[i] = train_transaction_new[i].astype('category') # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\n\ncategor_change(train_transaction_new)\n\ntrain_transaction_new.info()","c0c4ba71":"# \u041a\u0410\u0422\u0415\u0413\u041e\u0420\/\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  - \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c\nlist_kategor = train_transaction_new.select_dtypes(include= ['category']).columns # \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\nlist_kategor\n\n# 1. \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ntrain_transaction_new = train_transaction_new.drop(list_kategor, axis = 1)\ntrain_transaction_new.info()\n\n# 2. \u0437\u0430\u043c\u0435\u043d\u0438\u043c \n#df = pd.get_dummies(train_transaction_new, columns= list_kategor)\n#df.head()\n#df.info()","32d2fc3d":"print(train_transaction_new.shape) # (590540, 14)\nprint(train_identity_new.shape) # (144233, 14)","a3f4083a":"\n#print(train_transaction_new.columns)\n#print(train_transaction.columns)\n#print(train_identity_new.columns)\n#print(train_identity.columns)\ntrain = train_transaction_new.merge(train_identity_new, how = 'left')\ntrain.columns","f3ae9d96":"train.shape # (590540, 62) ","8c75a09f":"test_identity = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv') # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443","29bc3c2a":"test_identity.shape # (141907, 41)","c3490fef":"test_identity.columns","e2572e49":"test_identity = test_identity.fillna(0) # \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 NaN \u043d\u0430 0\n#train_identity.isnull().sum()  # \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u041d\u0410\u041d \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \/ \u0442\u0435\u043f\u0435\u0440\u044c \u041d\u0410\u041d \u043d\u0435\u0442","c5c5260a":"# \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0441 \u043c\u0430\u043b\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445\nprint('\u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(test_identity.columns), '\\n')\n#test_identity.info(null_counts = True)\ntest_columns_index = [3, 4, 6, 7, 8, 9,10, 11, 21, 22, 23, 24, 25, 26, 27, 33,] \n#\u0441\u043f\u0438\u0441\u043e\u043a \u043a \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e \/ \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043c \u043c\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445\ntest_identity_new = test_identity.drop(test_identity.columns[test_columns_index], axis='columns')\n\nprint('\\n \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(test_identity_new.columns), '\\n', test_identity_new.columns)","bfc1ac87":"## \u041a\u0410\u0422\u0415\u0413\u041e\u0420\u0418\u0410\u041b\u042c\u041d\u042b\u0415 \u041f\u0420\u0418\u0417\u041d\u0410\u041a\u0418 \u0418\u0417\u041c\u0415\u041d\u042f\u0415\u041c\/ object --> category\n#def categor_change(test_identity_new):  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \/ \u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\n#    for i in test_identity_new.columns: # \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0433\u0434\u0435 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\n#        if test_identity_new[i].dtypes == 'object': # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c object\n#            test_identity_new[i] = test_identity_new[i].astype('category') # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\n#categor_change(test_identity_new)\n#test_identity_new.info()","a52fa2f4":"# \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c - \n# 1. \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\nlist_kategor = ['id-12','id-15','id-16','id-28','id-29','id-30','id-31','id-34','id-35','id-36','id-37','id-38','DeviceInfo', 'DeviceType']\ntest_identity_new = test_identity_new.drop( list_kategor, axis = 1)\n#test_identity_new.info()\n\n\n# 2. \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d \n# \u0444. \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0442\u0438\u043f \"\u043e\u0431\u044a\u0435\u043a\u0442\" \u043d\u0435 \"\u043a\u0430\u0442\u0435\u0433\u043e\u0440.\"\"\n#test_identity_new = pd.get_dummies(test_identity_new, columns= ['DeviceType'])\n#test_identity_new = pd.get_dummies(test_identity_new, columns= list_kategor)\n#test_identity_new.head()\n#test_identity_new.info()","35ad6eb6":"print('\\n \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f -', len(test_identity_new.columns), '\\n', test_identity_new.columns)","10d9c668":"test_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv')","6405b00f":"test_transaction.shape  # (506691, 393)\n#test_identity.shape # (144233, 41)","9f02ce36":"test_transaction_new = test_transaction.fillna(0) # \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 NaN \u043d\u0430 0\n#test_transaction_new.isnull().sum()  # \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b-\u0432\u043e \u041d\u0410\u041d \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \/ \u0442\u0435\u043f\u0435\u0440\u044c \u041d\u0410\u041d \u043d\u0435\u0442","f59d192d":"test_transaction_new.columns","2bdd03f2":"test_transaction_new.info()\n#test_transaction_new.columns.values","0fe5fc1c":"#for i in test_transaction.columns: # \u0443\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0445  - \u043e\u0431\u044a\u0435\u043a\u0442\n#    if test_transaction[i].dtypes == 'object':\n#        print(i, 'object')","cc9280a3":"test_transaction_new['vv'] = test_transaction_new.filter(like = 'V').sum(1)\/len(test_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\n#test_transaction_new['vv'].hist()\n#test_transaction_new['vv'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_V = test_transaction_new.filter(like = 'V').columns\nlist_drop_V\ntest_transaction_new = test_transaction_new.drop(list_drop_V, axis = 1)\ntest_transaction_new.columns","01ca3516":"test_transaction_new['cc'] = test_transaction_new.filter(like = 'C').sum(1)\/len(train_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\n#test_transaction_new['cc'].hist()\n#test_transaction_new['cc'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \/ \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_C = test_transaction_new.filter(like = 'C').columns\nlist_drop_C\ntest_transaction_new = test_transaction_new.drop(list_drop_C, axis = 1)\ntest_transaction_new.columns","21397f76":"test_transaction_new = test_transaction_new.rename(columns= {'TransactionID':'Transaction_id'})\ntest_transaction_new['dd'] = test_transaction_new[1:].filter(like = 'D').sum(1)\/len(test_transaction_new)\n# \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \/ \u0432 \u0434\u043e\u043b\u044f\u0445\n\n#test_transaction_new['dd'].hist()\n#test_transaction_new['dd'].nunique()\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u043b\u0438 \u043d\u0435\u0442 \nlist_drop_D = test_transaction_new.filter(like = 'D').columns\nlist_drop_D\ntest_transaction_new = test_transaction_new.drop(list_drop_D, axis = 1)\ntest_transaction_new = test_transaction_new.rename(columns= {'Transaction_id':'TransactionID'})\ntest_transaction_new.columns","0ffe71bf":"test_transaction_new = test_transaction_new.drop(['P_emaildomain', 'R_emaildomain'], axis=1)\ntest_transaction_new.head(3)","3d7e3ae7":"#train_transaction_new.filter(like = 'M').info() # \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\u043a\u043e\u043b\u043e\u043d\u043a\u0438\ntest_transaction_new.filter(like = 'M').head()\ntest_transaction_new = pd.get_dummies(test_transaction_new)\nprint(test_transaction_new.columns)\ntest_transaction_new.head(3)","f0ccfab2":"# \u0442\u0443\u0442 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n## \u041a\u0410\u0422\u0415\u0413\u041e\u0420\u0418\u0410\u041b\u042c\u041d\u042b\u0415 \u041f\u0420\u0418\u0417\u041d\u0410\u041a\u0418 \u0418\u0417\u041c\u0415\u041d\u042f\u0415\u041c\/ object --> category\ndef categor_change(test_transaction_new):  # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \/ \u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\n    for i in test_transaction_new.columns: # \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0433\u0434\u0435 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\n        if test_transaction_new[i].dtypes == 'object': # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0442\u0438\u043f\u043e\u043c object\n            test_transaction_new[i] = test_transaction_new[i].astype('category') # \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\n\ncategor_change(test_transaction_new)\n\ntest_transaction_new.info()","805685d6":"# \u041a\u0410\u0422\u0415\u0413\u041e\u0420\/\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438  - \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u043c\nlist_kategor = test_transaction_new.select_dtypes(include= ['category']).columns # \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\nlist_kategor\n\n# 1. \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ntest_transaction_new = test_transaction_new.drop(list_kategor, axis = 1)\ntest_transaction_new.info()\n\n# 2. \u0437\u0430\u043c\u0435\u043d\u0438\u043c \n#df = pd.get_dummies(test_transaction_new, columns= list_kategor)\n#df.head()\n#test_transaction_new.info()","c1eab2e8":"print(test_transaction_new.shape) # (506691, 13)\nprint(test_identity_new.shape) # (141907, 14) - \u0443\u0434\u0430\u043b\u0438\u043b \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n","a157c82d":"print(test_transaction_new.columns)\nprint(test_identity_new.columns)","8b5e473d":"test = test_transaction_new.merge(test_identity_new, how = 'left')\nprint(test.shape) # \ntest.columns","2b248a94":"\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn import preprocessing ","313fe353":"train.columns\n\ntrain = train.drop(['card6_debit or credit'], axis = 1) # \u0443\u0434\u0430\u043b\u0438\u0442\u044c","ebbd8ab3":"#train\nX = train.drop('isFraud', axis = 1)\ny = train['isFraud']","74c24594":"X = X.fillna(0)","6abce039":"print(train.shape) # (590540, 62)\nprint(test.shape) #(506691, 60)","9d28f4e3":"\nfrom sklearn.metrics import roc_auc_score # \u0432\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\ndef metric(y_pred,y_true): # y_pred - \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u0435  \u043c\u0435\u0442\u043a\u0438, y_true - \u0446\u0435\u043b\u0435\u0432\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438\n    return roc_auc_score(y_pred,y_true) ","0f79aa7b":"from sklearn.model_selection import train_test_split\n\nX_scale = preprocessing.scale(X) # \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \/ \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \/ \u0443\u0431\u0440\u0430\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\nX_train, X_test, y_train, y_test = train_test_split(X_scale, y, test_size=0.2, random_state=42)\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","e696dbac":"clf = RandomForestClassifier(n_estimators=46, random_state=42)\nprint('clf')\nclf.fit(X_train, y_train)\n#w = cross_val_score(clf, X_scale, y, cv=5 )#kf, scoring='roc_auc')\n#w.mean()\nprint('clf.fit ')\ny_pred = clf.predict(X_test)\nprint('clf.predict ')\n#metric(y_pred, y_test)\nprint('roc_auc - ', roc_auc_score(y_pred,y_test))\n# roc_auc -  0.9770113294089217","71b16354":"#test.shape # (506691, 60)\ntest = test.fillna(0)\n#test.info()\ny_pred_test = clf.predict(test)\ny_pred_test","01fe7b80":"print(len(y_pred_test))\nprint(len(test))\ntest.head(5)","c5bcfefe":"# cross_val_score\n#cross_val_score(clf, X_train, y_train, cv= 5) # array([0.95879192, 0.95662348, 0.95970013, 0.95935347, 0.95835681])\n# \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u0442\u0430\u043b \u0445\u0443\u0436\u0435","799071ac":"\n#for i in range(1, 51): # \u043f\u043e\u0438\u0441\u043a \u043b\u0443\u0447\u0448\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f n_estimators \n#    clf = RandomForestClassifier(n_estimators=i, random_state=42)\n#    clf.fit(X_train, y_train)\n#    y_pred = clf.predict(X_test)\n#    metric(y_pred, y_test)\n#    print(i, ' - ', roc_auc_score(y_pred,y_test))\n    \n# 42 - 0.9636575450281896    \n# 46 - 0.969602199093023","9c76a10c":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\n#for i in range(1, 51): # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0440\u043e\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \/ \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\n#    clf = RandomForestClassifier(n_estimators=i, random_state=42)\n#    w = cross_val_score(clf, X_scale, y, cv=5 , scoring='roc_auc') # \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 5 \u0447\u0430\u0441\u0442\u0435\u0439\n#    print(i, ' - ', w.max())\n# \u043e\u0442 0,5378244.... \u0434\u043e    0.7185081454990827 ","5adb1dd1":"submission = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv')\n#submission.shape # (506691, 2)\nsubmission.head(3)","61ae847e":"#submission['isFraud'] = y_pred_test\n#submission.to_csv('submit.csv', index= False)\noutput = pd.DataFrame({'TransactionID':test.TransactionID, 'isFraud':y_pred_test})\nprint(output.head(3))\nsubmission.to_csv('submission.csv', index= False)\nprint('+++')","5da8a393":"# y_pred_test \u043d\u0430 Kaggle - 0.719154\n# 0.50000\n\n\n\n\n","14ae68db":"# submit","d56c81db":"### train_transaction_new - \u0433\u043e\u0442\u043e\u0432\u0430","bc9805a7":"# # # \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c train_transaction ","50b1035d":"## test_transaction_new  - \u0433\u043e\u0442\u043e\u0432\u0430","83514768":"# \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 ","620071e3":"## test \/ merge","c670124c":"# test_transaction_new \u0438 test_identity_new \/ merge","1485478d":"# test_transaction \/ \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430","bfa3da3c":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 train_identity","6f08faa5":"# Feature engineering\n1. ### \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b - \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n2. ### \u0443\u0431\u0435\u0440\u0435\u043c \u041d\u0410\u041d\n3. ### \u0443\u0434\u0430\u043b\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0433\u0434\u0435 \u043c\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445\n4. ### \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c  object \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\u043d\u044b\u0435 \/ \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0430 \u043d\u0430\u0434\u043e \u043b\u0438 \u0438\u0445 \u0443\u0434\u0430\u043b\u044f\u0442\u044c\n5. ### \u043e\u0441\u0442\u0430\u0432\u0438\u043c\/\u0443\u0434\u0430\u043b\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440. \u0438\u043b\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e - \u0441\u0442\u0430\u043d\u0435\u0442 \u044f\u0441\u043d\u043e \u043f\u043e\u0441\u043b\u0435 predict\n6. ### merge \u0438 \u0442\u0440\u0430\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \n7. ### \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \n8. ### predict \n9. ### \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 - \u0435\u0449\u0435 \u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435","bc3da340":"## train_identity_new - \u0433\u043e\u0442\u043e\u0432\u0430","cc1a3980":"# predict","4448ff14":"## train_transaction_new \u0438 train_identity_new \/ merge \/concatenate","eba320da":"### train  - \u0433\u043e\u0442\u043e\u0432\u0430","4e142c7b":"## test_identity_new  - \u0433\u043e\u0442\u043e\u0432\u0430","bd212c28":"# test_identity_new - \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430","b87bed41":"### features - \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 - \u043c\u043e\u0436\u0435\u0442 \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0438\u043b\u0438 \u0435\u0449\u0435 \u0447\u0442\u043e","774d3951":"## test - \u0433\u043e\u0442\u043e\u0432\u0430"}}