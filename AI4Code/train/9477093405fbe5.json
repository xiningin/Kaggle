{"cell_type":{"ff1709b9":"code","967dc2b3":"code","43ef8aec":"code","bb0f60db":"code","27d5e792":"code","de1f972b":"code","a91c5889":"code","ed24f106":"code","7b5039fc":"code","663fa700":"markdown","c9e086c2":"markdown","87b70686":"markdown","0347faa3":"markdown","d1a5f0c8":"markdown","ad084dbc":"markdown","1b3f0f06":"markdown","b0fc638c":"markdown","63cf4abe":"markdown","cc3ad01e":"markdown"},"source":{"ff1709b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","967dc2b3":"#This will help us keep track of the submissions\nsub_name_list = ['dummy', 'mdabbert']\nscore_list = [] #We can keep the scores here\n\n#Put the submissions in dataframe form and add to a list.\nsub_list = []\ntemp_df = pd.read_csv(\"\/kaggle\/input\/dummy-submission-for-ufc-waterson-vs-hill-contest\/task-dummy.csv\")\nsub_list.append(temp_df)\n\ntemp_df = pd.read_csv(\"\/kaggle\/input\/mdabbert-ufc-contest-11-submission\/9-10-20-dabbert-submission.csv\")\nsub_list.append(temp_df)\n","43ef8aec":"results_df = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/most-recent-event.csv\")\n\n#We only need the fighter names, odds, and winner\n\nresults_df = results_df[['R_fighter', 'B_fighter', 'R_ev', 'B_ev', 'Winner']]\ndisplay(results_df)","bb0f60db":"#Returns a specific bet EV based on winning_ev and probability.\ndef get_bet_ev(ev, prob):\n    \n    return(ev*prob - (1-prob)*100)","27d5e792":"#Used to determine the bet of each fight.  We will use probabilities and the ev to \n#determine profitable bets\ndef get_bet(R_prob, B_prob, R_ev, B_ev):\n    red_ev = get_bet_ev(R_ev, R_prob)\n    blue_ev = get_bet_ev(B_ev, B_prob)\n    if red_ev > 0:\n        return('Red')\n    if blue_ev > 0:\n        return('Blue')\n    \n    return 'None'","de1f972b":"def get_profit(winner, bet, R_ev, B_ev):\n    if bet == 'None':\n        return 0\n    if (bet == 'Blue' and winner == 'Blue'):\n        return B_ev\n    if (bet == 'Red' and winner == 'Red'):\n        return R_ev\n    else:\n        return (-100)","a91c5889":"#Let's make a helper function to make this easier\n\ndef get_score(sub, results):\n#    display(sub)\n#    display(results)\n    #Let's merge the two dataframes\n    merge_df = pd.merge(sub, results)\n    #display(merge_df)\n    #We can get the proper bet by using a lambda function\n    merge_df['Bet'] = merge_df.apply(lambda x: get_bet(x['R_prob'],x['B_prob'],x['R_ev'],x['B_ev']), axis=1)\n    merge_df['Profit'] = merge_df.apply(lambda x: get_profit(x['Winner'], x['Bet'], x['R_ev'], x['B_ev']), axis=1)\n    display(merge_df)\n    return(sum(merge_df['Profit']))","ed24f106":"z = 0\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","7b5039fc":"z = 1\nscore_list.append(get_score(sub_list[z], results_df))\nprint(f\"{sub_name_list[z]}'s bets saw a total profit of {score_list[z]}\")","663fa700":"# Submissions\n\nThere are 2 submissions.  \n\n1. The dummy file (gives each fighter a .5 probability of winning. Therefore will bet every underdog with greater than +100 odds.)\n2. mdabbert's (my!) submission. A GaussianNB Classifier using the following features: ['B_Weight_lbs', 'B_Flyweight_rank', 'B_avg_TD_landed', 'B_Light Heavyweight_rank', 'B_Lightweight_rank', 'R_avg_TD_landed', 'R_Middleweight_rank', 'R_Height_cms', 'R_avg_SIG_STR_pct', 'B_age', 'R_longest_win_streak', 'lose_streak_dif', 'R_win_by_Decision_Majority', 'longest_win_streak_dif', 'avg_sub_att_dif', 'sig_str_dif', 'B_avg_SUB_ATT', 'R_win_by_TKO_Doctor_Stoppage', 'B_draw', 'R_win_by_Decision_Split', 'age_dif', 'R_odds']\n\nThis is the 3rd different model in 3 weeks for mdabbert (that's me!).\n","c9e086c2":"# Submission #2: mdabbert's Submission","87b70686":"# Purpose\n\nI am going to go through the task submissions for [Contest #11: UFC Fight Night Waterson vs. Hill](https:\/\/www.kaggle.com\/mdabbert\/ultimate-ufc-dataset\/tasks?taskId=2021)  and see what set of predictions was the most profitable (if any!)","0347faa3":"# Open All Submissions and add to a list","d1a5f0c8":"mdabbert also won 6 bets, and he only lost 5.  But his winners were not as profitable as dummy.  That said, 225.97 units is not a bad profit at all!","ad084dbc":"# Iterate the submissions and see how everyone did!","1b3f0f06":"# Submission #1: Dummy Submission\n\nThese are the results of the dummy submission.","b0fc638c":"# Final Results\n\n* `dummy`: +566.00 units\n* `mdabbert`: +225.97 units\n\ndummy is the winner!","63cf4abe":"Underdogs (and therefore dummy) had a great night.  dummy won 6 bets (all underdogs) out of 12 total bets for a profit of 566.0 units.  That's going to be a tough one to beat!","cc3ad01e":"`Red` won 9 on 12 fights.  That normally means good things for the models.  Let's see!"}}