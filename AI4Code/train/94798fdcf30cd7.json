{"cell_type":{"d38a7fac":"code","20074f14":"code","69218152":"code","1a1a8b80":"code","37123f54":"code","c63ba603":"code","7d56973e":"code","c5407f3a":"code","384db723":"code","98b6b221":"code","ce9929b7":"code","0d58e098":"code","de0bba4d":"code","c5c632d3":"code","643100f3":"code","1279354c":"code","fd800b97":"code","c3e8063f":"code","e4a75007":"code","b8ab958c":"code","595471ff":"code","2106cf76":"code","ecd84e86":"code","6f3b64e6":"code","df0bc6bd":"code","acd0cb31":"code","00df00c4":"code","a3b7fa71":"code","960b3d82":"code","2d1d58fb":"code","35c6af4b":"code","f72c818a":"code","367c3662":"code","84fd4968":"code","5765a475":"code","40665f4d":"code","81a2b7ac":"code","26af1695":"code","a86229cb":"code","c1f5f3bb":"code","a91deea2":"code","f0ef3c2c":"code","f756cc22":"code","86650c6a":"code","8477c507":"code","12630d63":"code","15dc4e33":"code","4fe43d07":"code","2fb1be0a":"code","bfd10c9b":"code","d262690d":"code","3552e032":"code","3d1b4ed2":"code","fb8beb46":"code","1d72d116":"code","4aff865c":"code","2fbd6e8b":"code","21c8a430":"markdown","5486fa1d":"markdown","14df0d83":"markdown","412f1829":"markdown","80e9b8c6":"markdown","25104b57":"markdown","02f53abc":"markdown","110890a0":"markdown","37a6cc5f":"markdown","69148236":"markdown","15546c98":"markdown","1b9291a6":"markdown","ecb81995":"markdown","7871abd8":"markdown","3c516335":"markdown","c79dec67":"markdown","556322dd":"markdown","e7a82cfc":"markdown","404318ea":"markdown","1df0ac79":"markdown","b0b5e8d8":"markdown","977bb57a":"markdown","b314abbf":"markdown","ccca2a5e":"markdown","0732d509":"markdown","402fab75":"markdown","d92ddc8f":"markdown","35a4841c":"markdown","b462d3d9":"markdown","99a7f9fb":"markdown","9b912f77":"markdown"},"source":{"d38a7fac":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import fbeta_score\nimport numpy as np\nimport pandas as pd\nimport shap\nfrom matplotlib import pyplot as plt\n%config InlineBackend.figure_format = 'retina'","20074f14":"employees_data = pd.read_csv('..\/input\/softserve-ds-hackathon-2020\/employees.csv', parse_dates=['HiringDate', 'DismissalDate'])\nhistory_data = pd.read_csv('..\/input\/softserve-ds-hackathon-2020\/history.csv', parse_dates=['Date'])","69218152":"df = history_data.merge(employees_data, how='outer', on='EmployeeID')\ndf['months_to_dissmiss'] = (df['DismissalDate'].sub(df['Date']) \/ np.timedelta64(1, 'M')).round()\ndf['target'] = (df['months_to_dissmiss'] <= 3).astype(int)\ndf['experience_months'] = (df['Date'].sub(df['HiringDate']) \/ np.timedelta64(1, 'M')).round()\n\ndf['ProjectID'] = df['ProjectID'].fillna('other')\n\n# drop those who had experience less than 3 months (cause all guys from 2019-02-01 have already worked 3 months)\ndf = df[df['experience_months'] >= 4].reset_index(drop=True)\n\n# drop those who worked after dismissal\ndf.drop(df[df['Date'] >= df['DismissalDate']].index, inplace=True)","1a1a8b80":"le = LabelEncoder()\ndf['ProjectID'] = le.fit_transform(df['ProjectID'].astype(str))\ndf['CustomerID'] = le.fit_transform(df['CustomerID'].astype(str))","37123f54":"val_date = '2018-11-01'\ntrain_date = ['2018-05-01', '2018-08-01']\n\nval = df[df['Date'] == val_date]\ntrain = df[(df['Date'] >= train_date[0]) & (df['Date'] <= train_date[1])].reset_index(drop=True)","c63ba603":"drop_cols = ['Date','EmployeeID', 'months_to_dissmiss', 'DismissalDate', 'HiringDate']\n\nval = val.drop(columns = drop_cols)\nX_val = val.drop('target', axis=1)\ny_val = val['target']\n\ntrain = train.drop(columns = drop_cols)\nX_train = train.drop('target', axis=1)\ny_train = train['target']","7d56973e":"def validate_model(model, X_val, y_val, threshold = 0.4, verbose=1):\n    y_pred = model.predict_proba(X_val)[:, 1] > threshold\n    score = fbeta_score(y_val, y_pred, 1.7)\n    if verbose:\n        print(\"mean target result: \", y_pred.mean())\n        print(\"score: \", score)\n    return score, y_pred","c5407f3a":"def variate_factor(factor, model, data, variation_range, n_samples=100, random_state=1):\n    sample_ones = data[data['target'] == 1].sample(n_samples, random_state=random_state)\n    sample_zeros = data[data['target'] == 0].sample(n_samples, random_state=random_state)\n    sample = pd.concat((sample_zeros, sample_ones))\n    \n    variation_values = []\n    prediction_means = []\n    \n    for value in variation_range:\n        sample_copy = sample.copy()\n        sample_copy[factor] += value\n        \n        _, y_pred = validate_model(model, sample_copy.drop('target', axis=1), sample_copy['target'], verbose=0)\n        \n        variation_values.append((str(value.round(2)) if value <=0 else '+'+str(value.round(2))))\n        prediction_means.append(y_pred[y_pred == 1].sum())\n    \n    plt.plot(variation_values, prediction_means)\n    plt.title('Impact of \"'+factor+'\" on prediction')\n    plt.xlabel('variation of ' + factor)\n    plt.ylabel('predicted # of guys who dismiss')\n    plt.show()","384db723":"def plot_misclass_hist(df, feature, bins=35, figsize=(15, 5)):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n    fig.suptitle(feature)\n    ax1.set_title('target = 0')\n    ax2.set_title('target = 1')\n    ax1.hist([df.loc[(df['pred_target'] == 0) & (df['true_target'] == 0), feature],\n             df.loc[(df['pred_target'] == 1) & (df['true_target'] == 0), feature]],\n             stacked=True,\n             label=['pred = 0', 'pred = 1'],\n             bins=bins)\n    ax2.hist([df.loc[(df['pred_target'] == 1) & (df['true_target'] == 1), feature],\n             df.loc[(df['pred_target'] == 0) & (df['true_target'] == 1), feature]],\n             stacked=True,\n             label=['pred = 1', 'pred = 0'],\n             bins=bins)\n    ax1.legend()\n    ax2.legend()\n","98b6b221":"def plot_misclass_count(df, feature, figsize=(15, 5)):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n    fig.suptitle(feature)\n    \n    ax1.set_title('target = 0')\n    ax2.set_title('target = 1')\n    \n    pd.crosstab(df.loc[df['true_target'] == 0, feature], \n                df.loc[df['true_target'] == 0, 'pred_target']).plot.bar(stacked=True, ax=ax1)\n    pd.crosstab(df.loc[df['true_target'] == 1, feature], \n                df.loc[df['true_target'] == 1, 'pred_target'])[[1, 0]].plot.bar(stacked=True, ax=ax2)","ce9929b7":"model = RandomForestClassifier(n_estimators=100, \n                             class_weight='balanced',\n                             max_leaf_nodes=64,\n                             max_depth=12,\n                             max_features=5, \n                             min_samples_split=5, \n                             min_samples_leaf=3,\n                             criterion='gini',\n                             n_jobs=-1,\n                             random_state=1)","0d58e098":"model.fit(X_train, y_train)\nscore, y_pred = validate_model(model, X_val, y_val);","de0bba4d":"val_with_pred = val.copy().rename(columns={'target':'true_target'})\nval_with_pred['pred_target'] = y_pred","c5c632d3":"import shap\nmodel.fit(X_train, y_train)\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X_train)","643100f3":"shap.summary_plot(shap_values[1], X_train, plot_type='bar')","1279354c":"shap.summary_plot(shap_values[1], X_train)","fd800b97":"SAMPLE_SIZE = 1000","c3e8063f":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('experience_months', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"WageGross\", \n                     ax=ax1)","e4a75007":"variate_factor('experience_months', model, val, np.linspace(-5, 20, 6))","b8ab958c":"plot_misclass_hist(val_with_pred[val_with_pred['experience_months'] > 30], 'experience_months', bins=50)","595471ff":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('DevCenterID', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"SBUID\", \n                     ax=ax1,\n                     )","2106cf76":"plot_misclass_count(val_with_pred, 'DevCenterID')","ecd84e86":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('WageGross', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"PositionLevel\", \n                     ax=ax1,\n                     xmax=10)","6f3b64e6":"variate_factor('WageGross', model, val, np.linspace(-0.5, 0.5, 11))","df0bc6bd":"plot_misclass_hist(val_with_pred, 'WageGross', bins=50)","acd0cb31":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('SBUID', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"DevCenterID\", \n                     ax=ax1,\n                     )","00df00c4":"plot_misclass_hist(val_with_pred[val_with_pred['SBUID'] < 120], 'SBUID', bins=50)","a3b7fa71":"val['HourMobileReserve'].agg(['mean', 'std'])","960b3d82":"print('samples with HourMobileReserve = 0: ', val[val['HourMobileReserve'] == 0].shape[0])\nprint('samples with HourMobileReserve > 0: ', val[val['HourMobileReserve'] > 0].shape[0])","2d1d58fb":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('HourMobileReserve', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"PositionID\", \n                     ax=ax1,\n                     )","35c6af4b":"# almost all values are \"0\", so omit them\nplot_misclass_hist(val_with_pred[val_with_pred['HourMobileReserve'] > 0], 'HourMobileReserve', bins=50)","f72c818a":"plt.figure(figsize=(15,5))\nvariate_factor('HourMobileReserve', model, val, np.linspace(0, 40, 21))","367c3662":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('PositionID', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"PositionLevel\", \n                     ax=ax1,\n                     )","84fd4968":"plot_misclass_hist(val_with_pred[val_with_pred['PositionID'] > 207], 'PositionID')","5765a475":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('MonthOnSalary', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"PositionID\", \n                     ax=ax1,\n                     )","40665f4d":"plt.figure(figsize=(15,5))\nvariate_factor('MonthOnSalary', model, val, np.linspace(-5, 10, 16))","81a2b7ac":"fig, ax1 = plt.subplots(1, 1, figsize=(15,5))\nshap.dependence_plot('BonusOneTime', \n                     pd.DataFrame(shap_values[1]).sample(SAMPLE_SIZE, random_state=1).values,\n                     X_train.sample(SAMPLE_SIZE, random_state=1), \n                     interaction_index=\"PositionID\", \n                     ax=ax1,\n                     xmax=500)","26af1695":"plt.figure(figsize=(15,5))\nvariate_factor('BonusOneTime', model, val, np.linspace(-10, 200, 22))","a86229cb":"sample = {\n    'DevCenterID': 1,\n    'SBUID': 255,\n    'PositionID': 200,\n    'PositionLevel': 3,\n    'LanguageLevelID': 12,\n    'IsTrainee': 0,\n    'CustomerID': 110,\n    'ProjectID': 900,\n    'IsInternalProject': 0,\n    'Utilization': 1, \n    'HourVacation': 0,\n    'HourMobileReserve': 0,\n    'HourLockedReserve': 0,\n    'OnSite': 0,\n    'CompetenceGroupID': 17,\n    'FunctionalOfficeID': 1,\n    'PaymentTypeId': 18,\n    'BonusOneTime': 0,\n    'APM': 26,\n    'WageGross': 1,\n    'MonthOnPosition': 9,\n    'MonthOnSalary': 6,\n    'experience_months': 33\n}\nsample_df = pd.DataFrame([sample])\nsample_df.T","c1f5f3bb":"def variate_single_sample_factor(factor, model, sample, variation_range, threshold=0.4):\n    variation_values = []\n    prediction_probas = []\n    \n    for value in variation_range:\n        sample_copy = sample.copy()\n        sample_copy[factor] += value\n        \n        prediction_proba = model.predict_proba(sample_copy)[:, 1][0]\n        \n        variation_values.append(str(sample_copy[factor].round(2)[0]))\n        prediction_probas.append(prediction_proba)\n        \n    plt.figure(figsize=(15,5))\n    plt.axhline(y=threshold, color='r', linestyle='-')\n    plt.plot(variation_values, prediction_probas)\n    plt.title('Impact of \"'+factor+'\" on single-sample prediction')\n    plt.xlabel('variation of ' + factor)\n    plt.ylabel('prediction proba')\n    plt.show()","a91deea2":"variate_single_sample_factor('experience_months', model, sample_df, np.linspace(-30, 20, 26))","f0ef3c2c":"variate_single_sample_factor('DevCenterID', model, sample_df, np.linspace(0, 20, 21))","f756cc22":"variate_single_sample_factor('WageGross', model, sample_df, np.linspace(-1, 2, 31))","86650c6a":"variate_single_sample_factor('SBUID', model, sample_df, np.linspace(-250, 250, 26))","8477c507":"variate_single_sample_factor('HourMobileReserve', model, sample_df, np.linspace(0, 50, 26))","12630d63":"variate_single_sample_factor('PositionID', model, sample_df, np.linspace(-100, 100, 21))","15dc4e33":"variate_single_sample_factor('ProjectID', model, sample_df, np.linspace(-600, 1200, 19))","4fe43d07":"variate_single_sample_factor('CustomerID', model, sample_df, np.linspace(-100, 100, 21))","2fb1be0a":"variate_single_sample_factor('MonthOnSalary', model, sample_df, np.linspace(-6, 10, 17))","bfd10c9b":"variate_single_sample_factor('BonusOneTime', model, sample_df, np.linspace(0, 200, 21))","d262690d":"variate_single_sample_factor('LanguageLevelID', model, sample_df, np.linspace(-9, 9, 19))","3552e032":"variate_single_sample_factor('APM', model, sample_df, np.linspace(-100, 100, 21))","3d1b4ed2":"variate_single_sample_factor('OnSite', model, sample_df, np.linspace(0, 1, 2))","fb8beb46":"variate_single_sample_factor('Utilization', model, sample_df, np.linspace(-1, 4, 6))","1d72d116":"variate_single_sample_factor('HourVacation', model, sample_df, np.linspace(0, 200, 21))","4aff865c":"variate_single_sample_factor('HourLockedReserve', model, sample_df, np.linspace(0, 50, 26))","2fbd6e8b":"variate_single_sample_factor('PositionLevel', model, sample_df, np.linspace(-3, 7, 10))","21c8a430":"**WageGross** - \u0440\u0438\u0437\u0438\u043a \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0456 < 0.1","5486fa1d":"**HourMobileReserve** - \u0440\u0438\u0437\u0438\u043a \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u0445 > 30","14df0d83":"'experience_month' - \u0441\u0442\u0430\u0436 \u0432 \u043c\u0456\u0441\u044f\u0446\u044f\u0445; \u043d\u0430\u0439\u0431\u0456\u043b\u044c\u0448 \u0432\u043f\u0440\u0438\u0432\u043e\u0432\u0438\u0439 \u0444\u0430\u043a\u0442\u043e\u0440.\n\u041f\u0456\u0441\u043b\u044f 30-40 \u043c\u0456\u0441\u044f\u0446\u0456\u0432 \u0441\u0442\u0430\u0436\u0443 \u0443\u0445\u043e\u0434\u0438\u0442\u044c \u0434\u0443\u0436\u0435 \u043c\u0430\u043b\u043e \u043b\u044e\u0434\u0435\u0439.","412f1829":"## What-if","80e9b8c6":"**DevCenterID** - \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u0445 > 7 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043d\u0430\u044f\u0432\u043d\u043e\u0441\u0442\u0456 \u0440\u0438\u0437\u0438\u043a\u0443.","25104b57":"**PositionID** - \u043f\u043e\u0437\u0438\u0446\u0456\u0457 \u0432\u0438\u0449\u0435 207 - \u0443\u0442\u0440\u0438\u043c\u0443\u044e\u0447\u0438\u0439 \u0444\u0430\u043a\u0442\u043e\u0440","02f53abc":"3) \u0411\u0443\u0434\u044c \u044f\u043a\u0456 \u0431\u043e\u043d\u0443\u0441\u0438 \u0454 \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0443\u0442\u0440\u0438\u043c\u0443\u044e\u0447\u0438\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c.","110890a0":"**'WageGross'** - \u0432 \u043e\u043a\u043e\u043b\u0456 0.25 - \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0438\u0439 \u0432\u043f\u043b\u0438\u0432 \u043d\u0430 dismissal","37a6cc5f":"**experience_months** - \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u0445 < 27 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043d\u0430\u044f\u0432\u043d\u043e\u0441\u0442\u0456 \u0440\u0438\u0437\u0438\u043a\u0443.","69148236":"**BonusOneTime** - \u0431\u0443\u0434\u044c-\u044f\u043a\u0438\u0439 \u043c\u0456\u043d\u0456\u043c\u0430\u043b\u044c\u043d\u0438\u0439 \u0431\u043e\u043d\u0443\u0441 \u0437\u0431\u0456\u043b\u044c\u0448\u0443\u0454 \u0448\u0430\u043d\u0441\u0438 \u0432\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f.","15546c98":"\u041a\u043e\u0436\u043d\u0430 \u0442\u043e\u0447\u043a\u0430 - \u043e\u0434\u0438\u043d \u0441\u0435\u043c\u043f\u043b \u0437 \u0434\u0430\u043d\u0438\u0445.\n\nSHAP-value (\u043f\u043e \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0456) \u043f\u043e\u043a\u0430\u0437\u0443\u044e\u0442\u044c \u0432\u043f\u043b\u0438\u0432 \u043d\u0430\u044f\u0432\u043d\u043e\u0441\u0442\u0456 \u043f\u0435\u0432\u043d\u043e\u0433\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0443 (feature) \u043f\u043e\u0440\u0456\u0432\u043d\u044f\u043d\u043e \u0437 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u043c, \n\u044f\u043a\u0438\u0439 \u043c\u0438 \u0437\u0440\u043e\u0431\u0438\u043b\u0438 \u0431, \u044f\u043a\u0431\u0438 \u0446\u0435\u0439 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 \u043f\u0440\u0438\u0439\u043c\u0430\u0432 \u0434\u0435\u044f\u043a\u0435 \u0431\u0430\u0437\u043e\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f (SHAP = 0).\n\n\u0420\u043e\u0437\u0442\u0430\u0448\u0443\u0432\u0430\u043d\u043d\u044f \u0442\u043e\u0447\u043a\u0438 \u0431\u043b\u0438\u0436\u0447\u0435 \u0434\u043e \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043a\u0440\u0430\u044e \u043e\u0437\u043d\u0430\u0447\u0430\u0454, \u0449\u043e \u0434\u0430\u043d\u0438\u0439 \u0444\u0430\u043a\u0442\u043e\u0440 \u043c\u0430\u0432 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0438\u0439 \u0432\u043f\u043b\u0438\u0432 \u043d\u0430 dismissal \n(\u0442\u043e\u0431\u0442\u043e \u0434\u043b\u044f \u0434\u0430\u043d\u043e\u0433\u043e \u0441\u0435\u043c\u043f\u043b\u0443 \u0447\u0438\u043c \u0431\u0456\u043b\u044c\u0448\u0435 \u0444\u0430\u043a\u0442\u043e\u0440, \u0442\u0438\u043c \u0431\u0456\u043b\u044c\u0448\u0430 \u0439\u043c\u043e\u0432\u0456\u0440\u043d\u0456\u0441\u0442\u044c dismissal), \u0431\u043b\u0438\u0436\u0447\u0435 \u0434\u043e \u043b\u0456\u0432\u043e\u0433\u043e - \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0438\u0439 \u0432\u043f\u043b\u0438\u0432.\n\n\u041a\u043e\u043b\u0456\u0440 \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u0443\u0454 \u0441\u0430\u043c\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0430\u043a\u0442\u043e\u0440\u0443 \u0434\u0430\u043d\u043e\u0433\u043e \u0441\u0435\u043c\u043f\u043b\u0430 (\u0447\u0435\u0440\u0432\u043e\u043d\u0456 - \u0431\u0456\u043b\u044c\u0448\u0456 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f).\n\n\u0424\u0430\u043a\u0442\u043e\u0440\u0438 \u0432\u0456\u0434\u0441\u043e\u0440\u0442\u043e\u0432\u0430\u043d\u0456 \u043f\u043e \u0457\u0445\u043d\u044c\u043e\u043c\u0443 \u0432\u043f\u043b\u0438\u0432\u0443 \u043d\u0430 \u043a\u0456\u043d\u0446\u0435\u0432\u0435 \u0440\u0456\u0448\u0435\u043d\u043d\u044f.","1b9291a6":"## Dismissal risk drivers","ecb81995":"**\u0412\u0441\u0456 \u0456\u043d\u0448\u0456 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438, \u043f\u0440\u0438 \u043f\u043e\u0442\u043e\u0447\u043d\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f\u0445 \u0440\u0435\u0448\u0442\u0438, \u0432\u043f\u043b\u0438\u0432\u0443 \u043d\u0435 \u043c\u0430\u044e\u0442\u044c**","7871abd8":"### \u0412\u043f\u043b\u0438\u0432 \u0444\u0430\u043a\u0442\u043e\u0440\u0456\u0432 \u043d\u0430 \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456","3c516335":"**'HourMobileReserve'** - \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0432\u0438\u0449\u0435 25 - \u0444\u0430\u043a\u0442\u043e\u0440 \u0443\u0445\u043e\u0434\u0443.","c79dec67":"### \u0421\u0438\u043b\u0430 \u0432\u043f\u043b\u0438\u0432\u0443 \u0444\u0430\u043a\u0442\u043e\u0440\u0456\u0432","556322dd":"**SBUID** - \u043f\u0440\u0438 \u043f\u043e\u0442\u043e\u0447\u043d\u0438\u0445 \u0456\u043d\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445, \u0446\u0435\u0439 \u043d\u0435 \u043c\u0430\u0454 \u0432\u043f\u043b\u0438\u0432\u0443","e7a82cfc":"\u0414\u0430\u043b\u0456 \u043f\u043e\u0434\u0438\u0432\u0438\u043c\u043e\u0441\u044c \u043d\u0430 \u0440\u043e\u0437\u043f\u043e\u0434\u0456\u043b \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e \u0456 \u043d\u0435\u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0438\u0444\u0456\u043a\u043e\u0432\u0430\u043d\u0438\u0445 \u0441\u0435\u043f\u043b\u0456\u0432 \u0432 \u043e\u0431\u043e\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0456\u044f\u0445 (\u0454 \u0440\u0438\u0437\u0438\u043a \/ \u043d\u0435\u043c\u0430\u0454), \n\u0432 \u0437\u0430\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0456 \u0432\u0456\u0434 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0430\u043a\u0442\u043e\u0440\u0443.\n\u0412 \u0434\u0430\u043d\u043e\u043c\u0443 \u0432\u0438\u043f\u0430\u0434\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0449\u043e \u0432 \u0434\u0430\u043d\u0438\u0445 \u0434\u0443\u0436\u0435 \u043c\u0430\u043b\u043e \u0441\u0435\u043c\u043f\u043b\u0456\u0432 \"\u0443\u0445\u043e\u0434 \u043f\u0456\u0441\u043b\u044f 30 \u043c\u0456\u0441\u044f\u0446\u0456\u0432\", \u0442\u043e\u043c\u0443, \u0445\u043e\u0447 \u0446\u0435\u0439 \u0444\u0430\u043a\u0442\u043e\u0440 \u043c\u0430\u0432 \u0432\u0435\u043b\u0438\u043a\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456, \u0441\u0442\u0430\u0432\u0438\u0442\u0438 alert \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043f\u043e \u043d\u044c\u043e\u043c\u0443 \u043d\u0435 \u0432\u0430\u0440\u0442\u043e.","404318ea":"#### \u041e\u043a\u0440\u0435\u043c\u043e \u043f\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u0445","1df0ac79":"**'SBUID'** - \u043f\u043e \u043d\u0430\u0439\u043f\u043e\u0448\u0438\u0440\u0435\u043d\u0456\u0448\u0438\u043c (250-350) \u043b\u043e\u043a\u0430\u0446\u0456\u044f\u043c \u043d\u0435 \u043c\u043e\u0436\u043d\u0430 \u0440\u043e\u0431\u0438\u0442\u044c \u0432\u0438\u0441\u043d\u043e\u0432\u043a\u0438, \u043e\u0434\u043d\u0430\u043a \u043b\u043e\u043a\u0430\u0446\u0456\u0457 1-120 \u0454 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c \u0432\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f. ","b0b5e8d8":"\u0425\u043e\u0447 \u043c\u043e\u0434\u0435\u043b\u044c \u0456 \u043f\u043e\u0437\u043d\u0430\u0447\u0430\u043b\u0430 \"\u0432 \u0437\u043e\u043d\u0456 \u0440\u0438\u0437\u0438\u043a\u0443\" \u043a\u0456\u043b\u044c\u043a\u0430 \u0434\u0435\u0441\u044f\u0442\u043a\u0456\u0432 \u0441\u0435\u043c\u043f\u043b\u0456\u0432, \u044f\u043a\u0456 \u043d\u0430\u0441\u043f\u0440\u0430\u0432\u0434\u0456 \u043d\u0435 \u0431\u0443\u043b\u0438 \u0432 \u0437\u043e\u043d\u0456 \u0440\u0438\u0437\u0438\u043a\u0443, \u043e\u0434\u043d\u0430\u043a \u0434\u043b\u044f \u0442\u0438\u0445 \u043a\u0456\u043b\u044c\u043a\u043e\u0445 \u0441\u0435\u043c\u043f\u043b\u0456\u0432 \u0437 \u0440\u0438\u0437\u0438\u043a\u043e\u043c HourMobileReserve \u0432\u0438\u044f\u0432\u0438\u0432\u0441\u044f \u043f\u043e\u0442\u0443\u0436\u043d\u0438\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u043c - \u043c\u043e\u0436\u043d\u0430 \u0431\u0440\u0430\u0442\u0438 \u043d\u0430\u044f\u0432\u043d\u0456\u0441\u0442\u044c HourMobileReserve \u0437\u0430 alert","977bb57a":"\u041f\u043e\u0434\u0438\u0432\u0438\u043c\u043e\u0441\u044f \u044f\u043a \u0437\u043c\u0456\u043d\u044e\u044e\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u0437\u0456 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f\u043c \u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f \u0444\u0430\u043a\u0442\u043e\u0440\u0443 \u0443 \u0432\u0430\u043b\u0456\u0434\u0430\u0446\u0456\u0439\u043d\u0456\u0439 \u0432\u0438\u0431\u0456\u0440\u0446\u0456. \n\u0414\u043b\u044f \u0446\u044c\u043e\u0433\u043e \u0432\u0438\u0431\u0435\u0440\u0435\u043c \u0432\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0438\u043c \u0447\u0438\u043d\u043e\u043c 100 \u0441\u0435\u043c\u043f\u043b\u0456\u0432 \u0437 \u0440\u0438\u0437\u0438\u043a\u043e\u043c \u0456 100 \u0431\u0435\u0437. \u041e\u0440\u0438\u0433\u0456\u043d\u0430\u043b\u044c\u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 - 104 \u0441\u0435\u043c\u043f\u043b\u0430 \u0437 \u0440\u0438\u0437\u0438\u043a\u043e\u043c \u0456 96 \u0431\u0435\u0437.\n\u041f\u0440\u0438 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u0456 \u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e 'experience_months' \u043d\u0430 20 \u043c\u0456\u0441\u044f\u0446\u0456\u0432, \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0435\u0440\u0435\u0434\u0431\u0430\u0447\u0430\u0454 \u0432\u0441\u044c\u043e\u0433\u043e 61 \u0441\u0435\u043c\u043f\u043b \u0437 \u0440\u0438\u0437\u0438\u043a\u043e\u043c.","b314abbf":"\u0412\u0438\u0434\u043d\u043e \u0449\u043e \u0434\u043b\u044f \u043f\u0435\u0440\u0448\u0438\u0445 \u043a\u0456\u043b\u044c\u043a\u043e\u0445 \u043a\u043b\u0430\u0441\u0456\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u043e\u0431\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u043d\u0443 \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043f\u043e\u043c\u0438\u043b\u043e\u043a, \u0442\u043e\u043c\u0443 \u044f\u043a \"\u0444\u0430\u043a\u0442\u043e\u0440 \u0432\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f\" \u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044f 1-5 \u043a\u0440\u0430\u0449\u0435 \u043d\u0435 \u0441\u043f\u0440\u0438\u0439\u043c\u0430\u0442\u0438.\n\u041e\u0434\u043d\u0430\u043a \u0434\u043b\u044f DevCenterID > 13 \u0443\u0441\u0456 \u0441\u0435\u043c\u043f\u043b\u0438 \u0437 \u0440\u0438\u0437\u0438\u043a\u043e\u043c \u0431\u0443\u043b\u0438 \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e \u043a\u043b\u0430\u0441\u0438\u0444\u0456\u043a\u043e\u0432\u0430\u043d\u0456 - \u0446\u0435 \u043c\u043e\u0436\u043d\u0430 \u043f\u0440\u0438\u0439\u043c\u0430\u0442\u0438 \u0437\u0430 \u043d\u0430\u0434\u0456\u0439\u043d\u0438\u0439 alert.","ccca2a5e":"2) \u0417\u0430 risk alerts \u043c\u043e\u0436\u043d\u0430 \u0431\u0440\u0430\u0442\u0438 HourMobileReserve > 30, DevCenterID > 13","0732d509":"1) \u041d\u0430\u0439\u0431\u0456\u043b\u044c\u0448\u0438\u0439 \u0432\u043f\u043b\u0438\u0432 \u043d\u0430 \u0440\u0456\u0448\u0435\u043d\u043d\u044f \u043c\u043e\u0434\u0435\u043b\u0456 \u043c\u0430\u044e\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 experience_months, DevCenterID, WageGross, SBUID, HourMobileReserve, ProjectID, PositionID","402fab75":"\u0414\u043b\u044f \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0456\u0432 \u043c\u043e\u0434\u0435\u043b\u0456 \u0431\u0443\u0434\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0431\u0456\u0431\u043b\u0456\u043e\u0442\u0435\u043a\u0443 shap, \u044f\u043a\u0430 \u043f\u0440\u0430\u0446\u044e\u0454 \u0437 Tree-based models.\nhttps:\/\/christophm.github.io\/interpretable-ml-book\/shap.html","d92ddc8f":"\u0421\u0442\u0432\u043e\u0440\u0438\u043c\u043e \u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0440\u043e\u0431\u0456\u0442\u043d\u0438\u043a\u0430 \u0456 \u0431\u0443\u0434\u0435\u043c\u043e \u0432\u0430\u0440\u0456\u044e\u0432\u0430\u0442\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u0434\u043b\u044f \u043d\u044c\u043e\u0433\u043e","35a4841c":"\u0414\u043b\u044f \u0430\u043d\u0430\u043b\u0456\u0437\u0443 \u0444\u0430\u043a\u0442\u043e\u0440\u0456\u0432 \u0431\u0443\u0434\u0435\u043c\u043e \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u0442\u0438 \u0441\u0445\u0435\u043c\u0443 \u0432\u0430\u043b\u0456\u0434\u0430\u0446\u0456\u0457 \u0437 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0438 AfterParty (https:\/\/www.kaggle.com\/yakuben\/softservehackathon-afterparty-solution), \u0442\u043e\u0431\u0442\u043e \u0442\u0440\u0435\u043d\u0443\u0432\u0430\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 4\u0445 \u043c\u0456\u0441\u044f\u0446\u044f\u0445 \u0456 \u0442\u0435\u0441\u0442\u0443\u0432\u0430\u0442\u0438 \u043d\u0430 1 \u043c\u0456\u0441\u044f\u0446\u0456 \u0437 \u043f\u0440\u043e\u043c\u0456\u0436\u043a\u043e\u043c 2 \u043c\u0456\u0441\u044f\u0446\u0456 (\u0423 \u0441\u0432\u043e\u0457\u0439 \u043c\u043e\u0434\u0435\u043b\u0456 \u043c\u0438 \u0442\u0430\u043a\u043e\u0436 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0432\u0430\u043b\u0438 random forest, \u043e\u0434\u043d\u0430\u043a \u0441\u0445\u0435\u043c\u0430 \u0432\u0430\u043b\u0456\u0434\u0430\u0446\u0456\u0457 \u0433\u0456\u0440\u0448\u0430.)","b462d3d9":"**'DevCenterID'** - \u0437 \u0446\u0435\u043d\u0442\u0440\u0456\u0432 1-5 \u043c\u0435\u043d\u0448 \u0441\u0445\u0438\u043b\u044c\u043d\u0456 \u0443\u0445\u043e\u0434\u0438\u0442\u0438 (\u0444\u0430\u043a\u0442\u043e\u0440 \u0432\u0442\u0440\u0438\u043c\u0430\u043d\u043d\u044f), \u043f\u0456\u0441\u043b\u044f 7 \u043d\u0430\u0432\u043f\u0430\u043a\u0438. ","99a7f9fb":"### \u0420\u0435\u0437\u044e\u043c\u0435","9b912f77":"**MonthOnSalary** - \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u043d\u043e 10 \u043c\u0456\u0441\u044f\u0446\u0456\u0432 \u0454 \u0442\u043e\u0447\u043a\u043e\u044e, \u043f\u0456\u0441\u043b\u044f \u044f\u043a\u043e\u0457 \u0437\u0431\u0456\u043b\u044c\u0448\u0443\u0454\u0442\u044c\u0441\u044f \u043a-\u0441\u0442\u044c \u0443\u0445\u043e\u0434\u0456\u0432."}}