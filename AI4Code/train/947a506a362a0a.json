{"cell_type":{"ae4bc5de":"code","0b5954d8":"code","61dec8b1":"code","7053f45c":"code","527e0802":"code","d663a7b1":"code","e2ecd705":"code","3420d8a8":"code","ca317af4":"code","82a55fec":"code","a7309a37":"code","3e6d8c3a":"code","a005e6ed":"code","c7348a6b":"code","4b2de491":"code","f6225e27":"code","4a5c0308":"code","beba1dfd":"code","aeda81ca":"code","a86045b6":"code","be3554f4":"code","2f16017b":"code","f0b23fc6":"code","66afaec7":"code","87e2dace":"code","d90be4d2":"code","e1991f3d":"code","f95dc055":"code","222d8472":"code","3f64233d":"code","f1088ee5":"code","3e188c68":"code","3b8776f7":"code","92257353":"code","7b850239":"code","8bcba836":"code","73ebff86":"code","debe5dab":"code","74f79dbc":"code","b39e4463":"code","db1dc963":"code","4944c8d1":"code","441e5c18":"code","0e73df3b":"code","55649977":"code","7830b705":"code","4b38328e":"code","530dcc0a":"code","7a70ccd5":"code","db08c0b6":"code","5816e375":"code","b6491d87":"code","65a561b4":"code","58781335":"code","b0c4b1fc":"code","0929f4b1":"code","bc3a3298":"code","197fd034":"code","c1de46fc":"code","24e23a67":"code","9ee52809":"code","34a717f8":"code","a6bf5d53":"code","1126e6e2":"markdown","d38e82cf":"markdown","fd4a961e":"markdown","3d951afa":"markdown","c81f29f1":"markdown","fa383382":"markdown","ba6805b2":"markdown","8478a717":"markdown","808b9ed6":"markdown","4a568027":"markdown","524448aa":"markdown","6c38b47d":"markdown","23843095":"markdown","0676fb41":"markdown","bf08cda2":"markdown","6fd1e30d":"markdown","6e909910":"markdown","e032cee9":"markdown","f2440b99":"markdown","d9ee36ed":"markdown","24d82444":"markdown","a3454994":"markdown","9f218a88":"markdown","d4484e95":"markdown","6c375b54":"markdown","ef4c07b3":"markdown","f7629917":"markdown","e1c52574":"markdown","cf4c7031":"markdown","1d556c64":"markdown","62e5596d":"markdown","23f73438":"markdown","3fc238e9":"markdown","0cbbc4cd":"markdown","25132ff3":"markdown","c517e1a7":"markdown","2b57fcff":"markdown","669915c9":"markdown","4f2aa2bc":"markdown","3f829f58":"markdown","d78ef88b":"markdown","d9d76b6c":"markdown","c4c21cf9":"markdown","89160dc1":"markdown","e5a4d93d":"markdown"},"source":{"ae4bc5de":"import pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score, accuracy_score,recall_score,precision_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.cluster import KMeans\nfrom sklearn.ensemble import RandomForestClassifier","0b5954d8":"df = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndel(df['sl_no'])\ndf.head(10)","61dec8b1":"df.dtypes","7053f45c":"df.describe(include='all')","527e0802":"df.isna().any()","d663a7b1":"Salary =df.salary\nSalary = Salary.fillna(0) # Sust. NaN por 0","e2ecd705":"Status = df.status","3420d8a8":"sum(((Salary == 0) & (Status == 0)) | ((Salary != 0) & (Status != 0)))","ca317af4":"df['ssc_b']=df['ssc_b'].replace({'Others':1, 'Central':0})\ndf['hsc_b']=df['hsc_b'].replace({'Others':1, 'Central':0}) \ndf['gender']=df['gender'].replace({'M':1, 'F':0})\ndf['status']=df['status'].replace({'Placed':1, 'Not Placed':0}) \ndf['workex']=df['workex'].replace({'Yes':1, 'No':0}) \ndf['hsc_s']=df['hsc_s'].replace({'Arts':1, 'Commerce':2, 'Science':3}) \ndf['degree_t']=df['degree_t'].replace({'Comm&Mgmt':1, 'Sci&Tech':2, 'Others':3}) \ndf['specialisation']=df['specialisation'].replace({'Mkt&Fin':0, 'Mkt&HR':1}) \n\ndf['salary'].fillna(0,inplace=True)\n\ndf['salary_ints'] = pd.cut(df['salary'],\n                          bins=[-0.01, 230000, 310000, np.inf],\n                          labels = [1, 2, 3])\n\ndf['salary_ints']=df['salary_ints'].astype('int')\ndf.head(10)","82a55fec":"np.unique(df.salary_ints)","a7309a37":"df.describe()","3e6d8c3a":"for col in df:\n    print(df[col].name,df[col].unique())","a005e6ed":"round(df.describe(include='all'),2)","c7348a6b":"salary = df['salary']\nsalary=salary[salary != 0]\n\nfig1=plt.figure()\nplt.hist(salary, bins = (40), color = 'royalblue', cumulative = -1,rwidth=0.75, align ='left')\nplt.title('Distribuci\u00f3n acumulada del salario',fontsize=15)\nplt.xlabel('salario',fontsize=12)\nplt.ylabel('Frecuencia', fontsize=12)\n\nfig1.savefig('Distribuc\u00f3n acumulada del salario.jpg')","4b2de491":"fig2 = plt.figure()\nplt.hist(df[\"ssc_p\"],bins=20, color = 'royalblue',rwidth=0.8)\nplt.title('10\u00ba curso', fontsize = 15)\nplt.xlabel('puntuaci\u00f3n obtenida', fontsize = 12)\nplt.ylabel('Frecuencia', fontsize = 12)\nfig2.savefig('Histograma 10\u00ba curso.jpg')","f6225e27":"fig3 = plt.figure()\nplt.hist(df[\"hsc_p\"], bins = 20, color = 'royalblue', rwidth = 0.8)\nplt.title('12\u00ba curso', fontsize = 15)\nplt.xlabel('puntuaci\u00f3n obtenida', fontsize = 12)\nplt.ylabel('Frecuencia', fontsize = 12)\nfig3.savefig('Histograma 12\u00ba curso.jpg')","4a5c0308":"fig4 = plt.figure()\nplt.hist(df[\"degree_p\"], bins = 15, color = 'royalblue', rwidth = 0.8)\nplt.title('Graduado',fontsize = 15)\nplt.xlabel('puntuaci\u00f3n obtenida', fontsize = 12)\nplt.ylabel('Frecuencia', fontsize = 12)\nfig4.savefig('Histograma punt. Graduado.jpg')","beba1dfd":"fig5 = plt.figure()\nplt.hist(df[\"hsc_p\"], bins = 25, color = 'royalblue', rwidth = 0.8)\nplt.title('Especializaci\u00f3n', fontsize = 15)\nplt.xlabel('puntuaci\u00f3n obtenida', fontsize = 12)\nplt.ylabel('Frecuencia', fontsize = 12)\nfig5.savefig('Histograma empleabilidad.jpg')","aeda81ca":"plt.rcParams['axes.labelsize'] = 20\n\npie_gender = np.array([sum(df.gender), len(df)-sum(df.gender)])\npie_gender_labels = [\"Mujer\", \"Hombre\"]\n\npie_workex = np.array([sum(df.workex), len(df)-sum(df.workex)])\npie_workex_labels = [\"No exp.\", \"S\u00ed exp.\"]\n\npie_status = np.array([sum(df.status), len(df)-sum(df.status)])\npie_status_labels = [\"No Trabaja\", \"S\u00ed trabaja\"]\n\nfig6 = plt.figure(figsize=(15,15))\n\nplt.subplot(1,3,1)\nplt.pie(pie_gender, labels = pie_gender_labels, autopct='%1.1f%%', shadow = True,\n        colors = ('royalblue','lightsteelblue'))\n\nplt.subplot(1,3,2)\nplt.pie(pie_workex, labels = pie_workex_labels, autopct='%1.1f%%', shadow = True,\n        colors = ('royalblue','lightsteelblue'))\n\nplt.subplot(1,3,3)\nplt.pie(pie_status, labels = pie_status_labels, autopct='%1.1f%%', shadow = True,\n        colors = ('royalblue','lightsteelblue'))\n\n\n\nfig6.savefig('Gr\u00e1ficos circulares.jpg')","a86045b6":"corr = df.iloc[:, 0:14].corr(); corr","be3554f4":"mask = np.triu(np.ones_like(corr, dtype=bool))\nsns.heatmap(corr, \n               xticklabels=corr.columns.values,\n               yticklabels=corr.columns.values,\n           linewidths = 0.5, cmap='mako', mask = mask)","2f16017b":"df_reg = df \ndf_reg.dropna(inplace=True) \n\ndrop_vars = ['salary']\nX_reg = df_reg.drop(drop_vars, axis=1) \ny_reg = df_reg.salary ","f0b23fc6":"X_train_reg,X_test_reg, y_train_reg, y_test_reg = train_test_split(X_reg, y_reg, test_size = 0.25, random_state = 1)\n\nprint('X: ',len(X_reg),'=',len(X_train_reg)+len(X_test_reg))\nprint('y: ',len(y_reg),'=',len(y_train_reg)+len(y_test_reg))","66afaec7":"regr = linear_model.LinearRegression()\nregr.fit(X_train_reg,y_train_reg)","87e2dace":"# Vemos la predicci\u00f3n\ny_pred_reg = regr.predict(X_test_reg)\nprint('R^2: %.2f' % r2_score(y_test_reg, y_pred_reg)) ","d90be4d2":"list(y_pred_reg)","e1991f3d":"df_knn=df\ndrop_vars = ['status']\nX_knn = df_knn.drop(drop_vars, axis=1) \ny_knn = df_knn.status \n\n\nX_train_knn,X_test_knn, y_train_knn, y_test_knn = train_test_split(X_knn, y_knn, test_size = 0.25, random_state = 1)","f95dc055":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train_knn,y_train_knn)","222d8472":"prediction = knn.predict(X_test_knn)\n\nprint(\"Accuracy:\",accuracy_score(y_test_knn, prediction)*100)\nprint(\"Precision:\",precision_score(y_test_knn, prediction)*100)\nprint(\"Recall:\",recall_score(y_test_knn, prediction)*100)","3f64233d":"drop_vars = ['status','salary']\nX_knn = df_knn.drop(drop_vars, axis=1) \ny_knn = df_knn.status \n\n\nX_train_knn,X_test_knn, y_train_knn, y_test_knn = train_test_split(X_knn, y_knn, test_size = 0.25, random_state = 1)","f1088ee5":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(X_train_knn,y_train_knn)","3e188c68":"prediction = knn.predict(X_test_knn)\n\nprint(\"Accuracy:\",accuracy_score(y_test_knn, prediction)*100)\nprint(\"Precision:\",precision_score(y_test_knn, prediction)*100)\nprint(\"Recall:\",recall_score(y_test_knn, prediction)*100)","3b8776f7":"predictions_knn = knn.predict(X_test_knn)\n\nmat = confusion_matrix(y_test_knn, predictions_knn)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","92257353":"knn.score(X_test_knn,y_test_knn)","7b850239":"df_dt=df\ndrop_vars = ['status']\nX_dt = df_dt.drop(drop_vars, axis=1) \ny_dt = df_dt.status \nX_train_dt,X_test_dt, y_train_dt, y_test_dt = train_test_split(X_dt, y_dt, test_size = 0.25, random_state = 1)","8bcba836":"len(y_test_dt)","73ebff86":"tree = DecisionTreeClassifier().fit(X_train_dt, y_train_dt)","debe5dab":"predictions_tree = tree.predict(X_test_dt)","74f79dbc":"mat = confusion_matrix(y_test_dt, predictions_tree)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","b39e4463":"drop_vars = ['status', 'salary','salary_ints']\nX_dt = df_dt.drop(drop_vars, axis=1) \ny_dt = df_dt.status \nX_train_dt,X_test_dt, y_train_dt, y_test_dt = train_test_split(X_dt, y_dt, test_size = 0.25, random_state = 1)","db1dc963":"tree = DecisionTreeClassifier().fit(X_train_dt, y_train_dt)","4944c8d1":"predictions_tree = tree.predict(X_test_dt)","441e5c18":"tree.score(X_test_dt,y_test_dt)","0e73df3b":"mat = confusion_matrix(y_test_dt, predictions_tree)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","55649977":"df_km=df\ndf_km = df_km[df_km[\"salary\"]!=0]\n#drop_vars = ['etest_p']\n#df_km = df_km.drop(drop_vars, axis=1) ","7830b705":"kmeans= KMeans(n_clusters=2, random_state=0)\nclusters_df_km = kmeans.fit_predict(df_km.iloc[:,0:8])\nclusters_df_km","4b38328e":"df_km['cluster'] = clusters_df_km\ndf_km.head()","530dcc0a":"plt.scatter(df_km['ssc_p'],df_km['degree_p'], c=clusters_df_km, s=50, cmap='viridis')","7a70ccd5":"df_logreg = df\ndrop_vars = ['status']\nX_logreg = df_logreg.drop(drop_vars, axis=1) \ny_logreg = df_logreg.status \nX_train_logreg,X_test_logreg, y_train_logreg, y_test_logreg = train_test_split(X_logreg, y_logreg,\n                                                                               test_size = 0.25, random_state = 1)","db08c0b6":"logreg = linear_model.LogisticRegression(max_iter = 1000)\nlogreg.fit(X_train_logreg,y_train_logreg)","5816e375":"logreg_predict = logreg.predict(X_test_logreg)","b6491d87":"logreg.score(X_test_logreg,y_test_logreg)","65a561b4":"mat = confusion_matrix(y_test_logreg, logreg_predict)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","58781335":"df_logreg = df\ndrop_vars = ['status','salary', 'salary_ints']\nX_logreg = df_logreg.drop(drop_vars, axis=1) \ny_logreg = df_logreg.status \nX_train_logreg,X_test_logreg, y_train_logreg, y_test_logreg = train_test_split(X_logreg, y_logreg,\n                                                                               test_size = 0.25, random_state = 1)","b0c4b1fc":"logreg = linear_model.LogisticRegression(max_iter=1000)\nlogreg.fit(X_train_logreg,y_train_logreg)","0929f4b1":"logreg_predict = logreg.predict(X_test_logreg)","bc3a3298":"logreg.score(X_test_logreg,y_test_logreg)","197fd034":"mat = confusion_matrix(y_test_logreg, logreg_predict)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","c1de46fc":"df_rf=df\ndrop_vars = ['salary_ints','salary', 'status']\nX_rf = df_rf.drop(drop_vars, axis=1) \ny_rf = df_rf.salary_ints \nX_train_rf, X_test_rf, y_train_rf, y_test_rf = train_test_split(X_rf, y_rf, test_size = 0.5, random_state = 2)","24e23a67":"rf=RandomForestClassifier(n_estimators=100, random_state=40, n_jobs=2)\nrf.fit(X_train_rf,y_train_rf)","9ee52809":"y_pred_rf = rf.predict(X_test_rf)\nprint(\"Accuracy:\",accuracy_score(y_test_rf, y_pred_rf))","34a717f8":"rf_predict = rf.predict(X_test_rf)\n\nmat = confusion_matrix(y_test_rf, rf_predict)\nsns.heatmap(mat.T, square = True, annot=True, fmt='d', cbar=False,cmap='Blues')\nplt.xlabel('True label')\nplt.ylabel('predicted label');","a6bf5d53":"print(np.unique(rf_predict),np.unique(df_rf.salary_ints))","1126e6e2":"Too much variables","d38e82cf":"## 3.2 Train model","fd4a961e":"---------------------\n# 4  Decission tree (status)","3d951afa":"--------------------------\n# 2linear regression (salary)\n\n\n\n","c81f29f1":"### Analysing missing values","fa383382":"# 7 Random forest (salary)","ba6805b2":"## 6.5 Refitting model","8478a717":"## 2.1 split dataset","808b9ed6":"## 4.2 Train model","4a568027":"## 5.3 Graph","524448aa":"The missing values are in the status variables and coincide with the alumns which has no work, so we can change this Nan values for zeros ","6c38b47d":"## 2.2 Training model","23843095":"We have selected too much variables, so we extract some variables","0676fb41":"Histogram for many variables","bf08cda2":"## 5.1 select variables","6fd1e30d":"Variables descrpition for the transformation","6e909910":"We have negatives values, so the prediction could be better","e032cee9":"## 5.2 Fitting model","f2440b99":"Lets see the unique values for each variable","d9ee36ed":"## 3.3 Prediction model and evaluation","24d82444":"## 6.1 Split data","a3454994":"### 1.2.1 Variable description\n\n\n### Descriptive statistics table\n","9f218a88":"-----------\n# 5 K-means","d4484e95":"## 3.4 Refitting model","6c375b54":"# 0 library import","ef4c07b3":"## 1.1 Load data","f7629917":"## 7.3 Prediction and evaluation","e1c52574":"Again, we must drop some variables","cf4c7031":"# 6 Logistic regression (status)","1d556c64":"## 3.1 Split data","62e5596d":"## 2.3 Prediction model and evaluation","23f73438":"## 4.3 Prediction","3fc238e9":"## 4.4 Evaluation","0cbbc4cd":"-----------------------------------\n## 1.2 Data reading","25132ff3":"# 1 load and read data\n\n","c517e1a7":"## 7.2 Fitting model","2b57fcff":"We could create some dummies for to improve the models","669915c9":"## 7.1 Split data","4f2aa2bc":"Correlation:","3f829f58":"## 4.1 Split data","d78ef88b":"### Variable transformations","d9d76b6c":"## 6.2 Train model","c4c21cf9":"## 6.3 Prediction","89160dc1":"## 6.4 Evaluation","e5a4d93d":"--------------------------\n# 3 KNN (status)"}}