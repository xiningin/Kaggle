{"cell_type":{"03992bde":"code","8dc45254":"code","ba0041e9":"code","a86fc414":"code","21669aa4":"code","15d18361":"code","39075dc8":"code","66a4dcf2":"code","5aa1e94f":"code","057d082e":"code","f88d744e":"code","6d667435":"code","c858973d":"code","a2dad40d":"code","7ae83665":"code","eb1be75b":"code","3f9617f9":"code","3dc0140a":"code","0ba7a013":"markdown","5e1d02b5":"markdown","9cd43d02":"markdown","87debbf0":"markdown","8e1dfbc3":"markdown","144b700e":"markdown","21e09c3d":"markdown","1dac5d4f":"markdown","38a2695e":"markdown","bb7ea399":"markdown","45b426b6":"markdown","eabb24ce":"markdown","a4c7caa2":"markdown"},"source":{"03992bde":"!pip install catboost==0.13.1","8dc45254":"import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)","ba0041e9":"import gc\nimport numpy as np\nimport pandas as pd\n\nfrom time import time\nfrom sklearn.metrics import roc_auc_score, classification_report\nfrom catboost import Pool, CatBoost, CatBoostClassifier, MetricVisualizer","a86fc414":"basepath = \"..\/input\/\"\ndf_train = pd.read_csv(f\"{basepath}train\/train.csv\", index_col=0, low_memory=False)\ndf_test = pd.read_csv(f\"{basepath}test\/test.csv\", index_col=0, low_memory=False)\n\ngroup_col = 'group_id'\ntarget = 'target'\n\ndf_train.shape, df_test.shape","21669aa4":"df_train = df_train.drop(df_train.index[[0,1,2,3]])\n\ndf_train = df_train.drop(['feature_13', 'feature_32'], axis=1)\ndf_test = df_test.drop(['feature_13', 'feature_32'], axis=1)\n\ndf_train = df_train.rename(columns={'feature_18': 'pos'})\ndf_test = df_test.rename(columns={'feature_18': 'pos'})","15d18361":"num_features = list(df_train.select_dtypes(include=[np.float64, np.int64]).columns)\nnum_features.remove(target)\nnum_features.remove(group_col)\n\nmins = df_train[num_features].min()\nmaxs = df_train[num_features].max()\ndifs = np.abs(maxs - mins)\nvals = mins - 5 * difs\n\nfor col in num_features:\n    df_train[col] = df_train[col].fillna(vals[col])\n    df_test[col] = df_test[col].fillna(vals[col])\n\ndf_train[num_features] = df_train[num_features].astype(np.float32)\ndf_test[num_features] = df_test[num_features].astype(np.float32)\n\nf\"{gc.collect()} objects collected\"","39075dc8":"def add_aggregates(df, col):\n    # Aggregations\n    df[f\"{col}_min\"] = df.groupby(group_col)[col].transform(np.min)\n    df[f\"{col}_avg\"] = df.groupby(group_col)[col].transform(np.mean)\n    df[f\"{col}_q50\"] = df.groupby(group_col)[col].transform(np.median)\n    df[f\"{col}_max\"] = df.groupby(group_col)[col].transform(np.max)\n    df[f\"{col}_var\"] = df.groupby(group_col)[col].transform(np.var)\n    df[f\"{col}_sum\"] = df.groupby(group_col)[col].transform(np.sum)\n    # Comparisons\n    df[f\"{col}_cmp_min\"] = df[col] == df[f\"{col}_min\"]\n    df[f\"{col}_cmp_max\"] = df[col] == df[f\"{col}_max\"]\n    df[f\"{col}_cmp_avg\"] = df[col] <= df[f\"{col}_avg\"]\n    df[f\"{col}_cmp_q50\"] = df[col] <= df[f\"{col}_q50\"]\n    # Scaled values\n    df[f\"{col}_scaled_min\"] = df[col] \/ df[f\"{col}_min\"]\n    df[f\"{col}_scaled_avg\"] = df[col] \/ df[f\"{col}_avg\"]\n    df[f\"{col}_scaled_q50\"] = df[col] \/ df[f\"{col}_q50\"]\n    df[f\"{col}_scaled_max\"] = df[col] \/ df[f\"{col}_max\"]\n    df[f\"{col}_scaled_sum\"] = df[col] \/ df[f\"{col}_sum\"]","66a4dcf2":"t_start = time()\nfor i, feature in enumerate(num_features):\n    add_aggregates(df_train, feature)\n    add_aggregates(df_test, feature)\n    print(f\"{i+1}\/{len(num_features)}: {feature} transformed\")\nt_elapsed = int(time() - t_start)\nm, s = t_elapsed \/\/ 60, t_elapsed % 60\n    \nnum_features = list(df_train.select_dtypes(include=[np.bool, np.float32, np.int64]).columns)\nnum_features.remove(target)\nnum_features.remove(group_col)\nprint(f\"Total: {len(num_features)} numeric features\")\nprint(f\"Process time: {m}m {s}s\")","5aa1e94f":"cat_features = list(df_train.select_dtypes(include=[np.object]).columns)\n\ndf_train[cat_features] = df_train[cat_features].fillna('N\/A')\ndf_test[cat_features] = df_test[cat_features].fillna('N\/A')\n\nall_data = pd.concat((df_train, df_test))\nfor col in cat_features:\n    cats = all_data[col].unique()\n    df_train[col] = df_train[col].astype('category', categories = cats)\n    df_test[col] = df_test[col].astype('category', categories = cats)\n    \nfor col in cat_features:\n    df_train[col] = df_train[col].cat.codes + 1\n    df_test[col] = df_test[col].cat.codes + 1\n    \ndel all_data\nf\"{gc.collect()} objects collected\"","057d082e":"features = num_features + cat_features\nf\"Total {len(features)} features: {len(num_features)} num., {len(cat_features)} cat.\"","f88d744e":"def score_model(model, pool):\n    ys = pool.get_label()\n    ys_pred = model.predict(pool)\n    results = {'auc': roc_auc_score(ys, ys_pred)}\n    results.update(classification_report(ys, ys_pred, output_dict=True))\n    return results\n\ndef print_results(r):\n    if 'time' in r:\n        print(f\"Train time: {r['time'][0]:2d}m {r['time'][1]:2d}s\")\n    print(f\"AUC score:  {r['auc']:1.5f}\")\n    print(f\"Class Neg:\")\n    print(f\"   precision: {r['0']['precision']:1.5f}\")\n    print(f\"   recall:    {r['0']['recall']:1.5f}\")\n    print(f\"Class Pos:\")\n    print(f\"   precision: {r['1']['precision']:1.5f}\")\n    print(f\"   recall:    {r['1']['recall']:1.5f}\")","6d667435":"def make_pool(df, labeled=True):\n    return Pool(\n        data = df[features],\n        label = df[target] if labeled else None,\n        cat_features = cat_features,\n        group_id = df[group_col],\n    )\n\ndef space_split(df, val_size=0.1):\n    df.sort_values([group_col, 'pos'])\n    cutoff = df[group_col].iloc[int((1 - val_size) * len(df))]\n    pt1, pt2 = df[df[group_col] < cutoff], df[df[group_col] >= cutoff]\n    return make_pool(pt1), make_pool(pt2)","c858973d":"def full_train(model, train_data, test_data, name):\n    train_pool = make_pool(train_data)\n    # Fit model with `train_data` and measure time\n    t_start = time()\n    model.fit(train_pool)\n    t_elapsed = int(time() - t_start)\n    m, s = t_elapsed \/\/ 60, t_elapsed % 60\n    print(f\"Train time: {m}m {s}s\")\n    # Score model if target present in `test_data`\n    if target in test_data.columns:\n        test_pool = make_pool(test_data)\n        return score_model(model, test_pool)\n    # Else predict probabilities and write submission\n    else:\n        id_test = test_data.index\n        xs_test = make_pool(test_data, labeled=False)\n        ys_prob = model.predict_proba(xs_test)\n        yP_prob = [y2 for y1,y2 in ys_prob]\n        answer = pd.DataFrame({'Id': id_test, 'target': yP_prob})\n        answer.to_csv(f'{name}.csv', sep=',', index=False)","a2dad40d":"def validate(model, data, val_size=0.1, rounds=100, fit=True):\n    results = {}\n    # Split `data` dataset to `learn` and `validate`\n    learn, val = space_split(data, val_size)\n    # Fit model\n    if fit:\n        t_start = time()\n        model.fit(\n            X=learn,\n            eval_set=val,\n            use_best_model=True,\n            early_stopping_rounds=rounds,\n            verbose=False,\n            plot=True\n        )\n        t_elapsed = int(time() - t_start)\n        results['time'] = t_elapsed \/\/ 60, t_elapsed % 60\n    # Scores on `validate` with different metrics\n    results.update(score_model(model, val))\n    return results","7ae83665":"common = {\n    'loss_function': 'CrossEntropy',\n    'eval_metric': 'F1',\n    \n    'od_type': 'IncToDec',\n    'od_pval': 1e-5,\n    \n    'boosting_type': 'Ordered',\n    'bootstrap_type': 'Bernoulli',\n    'one_hot_max_size': 3,\n    \n    'random_seed': 51,\n    'task_type': 'GPU',\n}","eb1be75b":"params = {\n    **common, 'train_dir': 'p08-2naf',\n    \n    'iterations': 1500,      # p08-2naf best iteration: 1384\n    'learning_rate': 0.05,\n    'depth': 8,\n    \n    'l2_leaf_reg': 12.0,\n    'random_strength': 3.0,\n    'subsample': 0.5,\n}","3f9617f9":"# model = CatBoostClassifier(**params)\n# result = validate(model, df_train, rounds=150)\n# best_iteration = model.best_iteration_\n# print_results(result)\n# print(f\"Best iteration: {best_iteration}\")","3dc0140a":"model = CatBoostClassifier(**params)\nfull_train(model, df_train, df_test, 'm13-kernel-catboost')","0ba7a013":"## Quality control","5e1d02b5":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445: \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u0437\u0430\u0432\u0435\u0434\u043e\u043c\u043e \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e.\n\u0422\u0430\u043a\u0436\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u0445\u0440\u0430\u043d\u0438\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438.","9cd43d02":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043c\u043d\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0438\u0445. CatBoost \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432 `[1..]`. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 -- \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f.","87debbf0":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.\n\n\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438, \u0447\u0442\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430 recall \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0430 `1` \u0445\u043e\u0440\u043e\u0448\u043e\n\u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u0438 \u0432\u044b\u0431\u043e\u0440\u0435 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u043d\u0435\u0451.","8e1dfbc3":"#  \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 10: \u0438 \u0441\u043d\u043e\u0432\u0430...\u0434\u0435\u0440\u0435\u0432\u044c\u044f \u0438 \u043b\u0435\u0441\u0430.","144b700e":"\u0411\u044b\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u0440\u0438\u043a \u043d\u0430 `learn` \u0438 `val`. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:\n\n1. \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c `CrossEntropy` \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u043d\u044c\u0448\u0430\u044f \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a \u043d\u0430 `learn` \u0438 `val` \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438, \u0447\u0435\u043c \u0441 `Logloss`.\n\n2. \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u044f: \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432: `l2_leaf_reg`: \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 [9..12], `random_strength`: \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 [2..3]","21e09c3d":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f:\n\n1. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043f\u043e\u043b\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 csv \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n2. \u0412 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u0445 \u0441 3-\u0447\u0430\u0441\u0442\u043d\u044b\u043c \u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c `train` \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n   \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u0435\u0437 `eval_set` \u0438 \u0440\u0430\u043d\u043d\u0435\u0439\n   \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438. \u041f\u043e \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \n   \u043f\u0440\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0447\u0430\u0441\u0442\u0438.","1dac5d4f":"1. \u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0432\u044b\u0435 4 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0418\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u043d\u0438\u0445.\n2. \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 `feature_13` \u0438 `feature_32` \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0438\u0437 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0412\u044b\u043a\u0438\u043d\u0435\u043c \u0438\u0445.\n3. \u041f\u0440\u0438\u0437\u043d\u0430\u043a `feature_18` -- \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0433\u0440\u0443\u043f\u043f\u0435. \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043d\u0443\u0435\u043c \u0435\u0435 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438.","38a2695e":"\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0443\u043b\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","bb7ea399":"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0434\u0435\u043b\u0430\u0432 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u0433\u0440\u0443\u043f\u043f.","45b426b6":"## Model 3","eabb24ce":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0444\u0438\u0447\u0435\u0439:","a4c7caa2":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 (`learn` \u0438 `val`)\n\u043f\u043e \u043f\u043e\u043b\u044e `group_id` \u0432 \u0445\u0440\u043e\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 `eval_set` \n\u0438 `early_stopping_rounds` \u0434\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439.\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 `val`."}}