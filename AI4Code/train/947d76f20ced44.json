{"cell_type":{"075eeb76":"code","dc09b059":"code","5c8597d8":"code","51b29728":"code","d81a2a7d":"code","22570a38":"code","b8c9f35e":"code","07cc2be0":"code","341bc321":"code","90b6af9b":"code","957be114":"code","73d421f7":"code","34f1532a":"code","8e36ffec":"code","b73c101f":"code","2f362cc9":"code","656e3178":"code","06727656":"code","d9b9999e":"code","f5440e69":"code","79f6494b":"code","2fb5a57f":"code","a5fbf065":"markdown","b77eec8b":"markdown","bc580ceb":"markdown","c4a055e2":"markdown","bce38d7a":"markdown","0f309a12":"markdown"},"source":{"075eeb76":"import numpy as np \nimport pandas as pd \nimport itertools\nimport os\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\n\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder\nfrom sklearn.metrics import confusion_matrix\nfrom tensorflow import keras\nlayers = keras.layers\nmodels = keras.models\n\n# Pada program ini menggunakan TensorFlow v1.8\nprint(\"Anda menggunakan tensorflow versi : \", tf.__version__)","dc09b059":"data = pd.read_csv(\"..\/input\/bbc-text.csv\")","5c8597d8":"data.head()","51b29728":"data['category'].value_counts()","d81a2a7d":"train_size = int(len(data) * .8)\nprint (\"Train size: %d\" % train_size)\nprint (\"Test size: %d\" % (len(data) - train_size))","22570a38":"def train_test_split(data, train_size):\n    train = data[:train_size]\n    test = data[train_size:]\n    return train, test","b8c9f35e":"train_cat, test_cat = train_test_split(data['category'], train_size)\ntrain_text, test_text = train_test_split(data['text'], train_size)","07cc2be0":"max_words = 1000\ntokenize = keras.preprocessing.text.Tokenizer(num_words=max_words, \n                                              char_level=False)","341bc321":"tokenize.fit_on_texts(train_text)\nx_train = tokenize.texts_to_matrix(train_text)\nx_test = tokenize.texts_to_matrix(test_text)","90b6af9b":"encoder = LabelEncoder()\nencoder.fit(train_cat)\ny_train = encoder.transform(train_cat)\ny_test = encoder.transform(test_cat)","957be114":"num_classes = np.max(y_train) + 1\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)","73d421f7":"print('Ukuran x_train:', x_train.shape)\nprint('Ukuran x_test:', x_test.shape)\nprint('Ukuran y_train:', y_train.shape)\nprint('Ukuran y_test:', y_test.shape)","34f1532a":"batch_size = 32\nepochs = 2\ndrop_ratio = 0.5","8e36ffec":"# Memulai proses build model\nmodel = models.Sequential()\nmodel.add(layers.Dense(512, input_shape=(max_words,)))\nmodel.add(layers.Activation('relu'))\nmodel.add(layers.Dense(num_classes))\nmodel.add(layers.Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","b73c101f":"history = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_split=0.1)","2f362cc9":"# Mulai melakukan tindakan evaluasi terhadap hasil akurasi yang dimiliki oleh model yang sudah dilakukan training\nscore = model.evaluate(x_test, y_test,\n                       batch_size=batch_size, verbose=1)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","656e3178":"def run_experiment(batch_size, epochs, drop_ratio):\n  print('batch size: {}, epochs: {}, drop_ratio: {}'.format(\n      batch_size, epochs, drop_ratio))\n  model = models.Sequential()\n  model.add(layers.Dense(512, input_shape=(max_words,)))\n  model.add(layers.Activation('relu'))\n  model.add(layers.Dropout(drop_ratio))\n  model.add(layers.Dense(num_classes))\n  model.add(layers.Activation('softmax'))\n\n  model.compile(loss='categorical_crossentropy',\n                optimizer='adam',\n                metrics=['accuracy'])\n  history = model.fit(x_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=0,\n                    validation_split=0.1)\n  score = model.evaluate(x_test, y_test,\n                       batch_size=batch_size, verbose=0)\n  print('\\tTest loss:', score[0])\n  print('\\tTest accuracy:', score[1])","06727656":"batch_size = 16\nepochs = 4\ndrop_ratio = 0.4\nrun_experiment(batch_size, epochs, drop_ratio)","d9b9999e":"# Memulai melakukan prediksi hasil terhadap dataset yang ada\ntext_labels = encoder.classes_ \nfor i in range(10):\n    prediction = model.predict(np.array([x_test[i]]))\n    predicted_label = text_labels[np.argmax(prediction)]\n    print(test_text.iloc[i][:50], \"...\")\n    print('Label awal: ' + test_cat.iloc[i])\n    print(\"Label hasil prediksi: \" + predicted_label + \"\\n\")  ","f5440e69":"y_softmax = model.predict(x_test)\n\ny_test_1d = []\ny_pred_1d = []\n\nfor i in range(len(y_test)):\n    probs = y_test[i]\n    index_arr = np.nonzero(probs)\n    one_hot_index = index_arr[0].item(0)\n    y_test_1d.append(one_hot_index)\n\nfor i in range(0, len(y_softmax)):\n    probs = y_softmax[i]\n    predicted_index = np.argmax(probs)\n    y_pred_1d.append(predicted_index)","79f6494b":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \n    cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title, fontsize=30)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45, fontsize=22)\n    plt.yticks(tick_marks, classes, fontsize=22)\n\n    fmt = '.2f'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('Label awal : ', fontsize=25)\n    plt.xlabel('Label prediksi : ', fontsize=25)","2fb5a57f":"cnf_matrix = confusion_matrix(y_test_1d, y_pred_1d)\nplt.figure(figsize=(24,20))\nplot_confusion_matrix(cnf_matrix, classes=text_labels, title=\"Confusion matrix\")\nplt.show()","a5fbf065":"## Mulai melakukan persiapan environment training dan dataset","b77eec8b":"## Mulai membangun model training","bc580ceb":"## Melakukan visualisasi pada confusion matrix","c4a055e2":"## Memulai Hyperparameter Tuning","bce38d7a":"## Melakukan Prediksi menggunakan Model\n","0f309a12":"## Evaluasi model"}}