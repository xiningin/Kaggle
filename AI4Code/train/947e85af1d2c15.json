{"cell_type":{"6a7b96f8":"code","c241dc37":"code","f3940b07":"code","4f0327df":"code","b3c40679":"code","591dc119":"code","89ce643c":"code","9b9f5ea9":"code","eb3ad6d7":"code","322a36f5":"code","7e5c8d95":"code","8bcc8451":"code","aaf56437":"code","980b764e":"markdown","772a8c0e":"markdown","66e7c0a8":"markdown","346ff2a9":"markdown","d5e44dcc":"markdown"},"source":{"6a7b96f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport gc\nimport random\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nimport pkg_resources as pkg\nprint( f\"pandas_profiling version: {pkg.get_distribution('pandas_profiling').version}\")\n\nfrom tqdm import tqdm\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.metrics import roc_curve, auc, cohen_kappa_score\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, f1_score, confusion_matrix\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nfrom tensorflow.keras.models import Sequential, Model\n\nfrom tensorflow.keras.layers import InputLayer, SpatialDropout1D\nfrom tensorflow.keras.layers import add, concatenate, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom tensorflow.keras.layers import Dense, Input, Dropout, BatchNormalization, Activation, Conv1D, Flatten, MaxPooling1D\nfrom tensorflow.keras.layers import Multiply, Add, Concatenate, Flatten, Average, Lambda\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D\n\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.callbacks import EarlyStopping, Callback, ModelCheckpoint, ReduceLROnPlateau\n\nfrom tensorflow.keras import backend as K\nfrom tensorflow_addons.optimizers import CyclicalLearningRate","c241dc37":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    for col in df.columns:\n        if col != 'time':\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)  \n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","f3940b07":"RANDOM_SEED = 98765\nDEBUG = True\nPROFILE = False\nCNN=False # need to try diff model\n\ndef seeding(SEED, use_tf=False):\n    np.random.seed(SEED)\n    random.seed(SEED)\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    os.environ['TF_CUDNN_DETERMINISTIC'] = str(SEED)\n    if use_tf:\n        tf.random.set_seed(SEED)\n    print('seeding done!!!')\n\nseeding(RANDOM_SEED)\n\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\n\nif DEBUG:\n    train = train[:100000]\n    \ntarget = train.target\ntrain.drop(['target'], axis=1, inplace=True)\ngc.collect()","4f0327df":"print('train:',train.shape)\nprint('test:',test.shape)","b3c40679":"def minmax_scale(df, cols):\n    scaler = MinMaxScaler()\n    for col in cols:\n        df[col] = scaler.fit_transform(df[col].values.reshape(-1,1))\n\nskewed_cols = ['f46', 'f59', 'f89']\nminmax_scale( train, skewed_cols)\nminmax_scale( test, skewed_cols)","591dc119":"## https:\/\/www.kaggle.com\/c\/tabular-playground-series-nov-2021\/discussion\/286731\n## trying suggested by Lukasz Borecki new features based on chunks\n## no improvement - commented out for now\n#def make_features(df):\n#    features = df.columns\n#    features=features.drop('id')\n#    df['chunk']=df['id']\/\/60000\n#    for feature in features:\n#        df['chunk_mean_'+str(feature)]=df.groupby(['chunk'])[feature].transform('mean')\n#        df['chunk_std_'+str(feature)]=df.groupby(['chunk'])[feature].transform('std')\n        \n#    df.pop('chunk')\n#    df.pop('id')\n#    return df\n\n#train = make_features(train)\n#test = make_features(test)\n\n#train.drop(['id'], axis=1, inplace=True)\n#test.drop(['id'], axis=1, inplace=True)\n#print('train:',train.shape)\n#print('test:',test.shape)\n\n#train=reduce_mem_usage(train)\n#test=reduce_mem_usage(test)\n#gc.collect()","89ce643c":"scaler = RobustScaler()\ntrain = scaler.fit_transform(train)\ntest = scaler.transform(test)","9b9f5ea9":"\ndef create_model_cnn(units, seq_len, n_features, optimizer, kernel_initializer):\n    n_filters=(8,8,8)\n    model = Sequential([\n        Input(shape=(seq_len, n_features, 1)),\n        Conv2D(n_filters[0], kernel_size=(1, n_features), activation=\"relu\"),\n        Conv2D(n_filters[1], kernel_size=(3,1), activation=\"relu\"),\n        MaxPool2D(pool_size=(2,1)),\n        Conv2D(n_filters[2], kernel_size=(3,1), activation=\"relu\"),\n        MaxPool2D(pool_size=(2,1)),\n        Flatten(),\n        Dense(1, activation=\"sigmoid\")\n    ])    \n    \n    \n    #model = Sequential()\n    #model.add(Input(shape=(seq_len, n_features, 1)))\n    #model.add(Conv2D(n_filters[0], kernel_size=(1, n_features), activation=\"relu\"))\n    #model.add(Conv2D(n_filters[1], kernel_size=(3,1), activation=\"relu\"))\n    #model.add(MaxPool2D(pool_size=(2,1)))\n    #model.add(Conv2D(n_filters[2], kernel_size=(3,1), activation=\"relu\"))\n    #model.add(MaxPool2D(pool_size=(2,1)))\n    #model.add(Flatten())\n    #model.add(Dense(1, activation=\"sigmoid\"))\n    \n    #model.add(Conv1D(units, 2, activation=\"relu\"))\n    #model.add(MaxPooling1D())\n    #model.add(BatchNormalization())\n    #model.add(Conv1D(units, 2, activation=\"relu\", input_shape=(dim,1)))\n    #model.add(MaxPooling1D())\n    #model.add(BatchNormalization())\n    #model.add(Flatten())\n    #model.add(Dense(units, activation=\"relu\"))\n    #model.add(Dense(units = 1, activation = 'sigmoid'))\n    model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])    \n    return model    \n","eb3ad6d7":"def create_model(units, dim, optimizer, kernel_initializer):\n    model = Sequential()\n    model.add(Dense(units = units, activation = 'relu', input_dim = dim))\n    #model.add(Dropout(0.2))\n    model.add(Dense(units = units, activation = 'relu'))\n    #model.add(Dropout(0.2))\n    model.add(Dense(units = units, activation = 'relu'))\n    #model.add(Dropout(0.2))\n    model.add(Dense(units = units, activation = 'relu'))\n    #model.add(Dropout(0.2))\n    #model.add(Dense(units = units, activation = 'relu'))\n    #model.add(Dropout(0.2))\n    model.add(Dense(units = units, activation = 'relu'))\n    model.add(Dense(units = 1, activation = 'sigmoid'))\n    model.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return model    \n\nlr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=5, verbose=1)\nes = EarlyStopping(monitor=\"val_loss\", patience=60, verbose=1, mode=\"min\", restore_best_weights=True)","322a36f5":"UNITS = 32\nEPOCHS = 40\nBATCH_SIZE = 256\nTOTAL_SPLITS = 4\nLEARNING_RATE = 0.00123\n\nCNN=True\nif CNN:\n    train = train.reshape(train.shape[0], train.shape[1], 1)\n    test = test.reshape(test.shape[0], test.shape[1], 1)\n\n\nmodels = []\nhistories = []\nfolds = StratifiedKFold(n_splits=TOTAL_SPLITS, shuffle=True, random_state=RANDOM_SEED)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, target)):\n    print('-'*15, '>', f'Fold {fold_n+1}', '<', '-'*15)\n    X_train, X_valid = train[train_index], train[valid_index]\n    y_train, y_valid = target[train_index], target[valid_index]    \n    \n    if CNN:\n        model = create_model_cnn(UNITS, train.shape[0], train.shape[1], Adam(learning_rate=LEARNING_RATE), 'glorot_uniform')\n    else:\n        model = create_model(UNITS, train.shape[1], Adam(learning_rate=LEARNING_RATE), 'glorot_uniform')\n    if DEBUG:\n        model.summary()\n    history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), batch_size = BATCH_SIZE, epochs = EPOCHS, \n                    verbose=1, shuffle=True, callbacks=[lr, es])\n    models.append(model)\n    histories.append(history)","7e5c8d95":"# summarize history for accuracy\nhistory = histories[0]\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='center right')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='center right')\nplt.show()","8bcc8451":"predicted = []\nfor model in models:\n    predicted.append(model.predict(test))\n\navg_preds = np.zeros(len(predicted[0]))\nfor pred in predicted:\n    avg_preds += pred.ravel()\navg_pred = avg_preds \/ len(models)","aaf56437":"submission['target'] = avg_pred\nsubmission.to_csv('submission.csv', index=False, float_format='%.6f')\nsubmission.head(20)","980b764e":"## Dealing with skewed data","772a8c0e":"## Prediction","66e7c0a8":"## Model and training","346ff2a9":"## Plotting metrics recorded during training","d5e44dcc":"## New features"}}