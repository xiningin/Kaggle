{"cell_type":{"c169acd8":"code","9f870058":"code","f96a6f38":"code","fde4080a":"code","3ee4ff6c":"code","3d3ae6c6":"code","68de7cd7":"code","7981756c":"code","cf00d080":"code","15fdc120":"code","042232f8":"code","183aadb0":"markdown"},"source":{"c169acd8":"import pandas as pd\nimport numpy as np","9f870058":"x_train = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/X_train.csv',encoding='euc-kr')\ny_train = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/y_train.csv')\nX_test = pd.read_csv('..\/input\/churn-model-data-set-competition-form\/X_test.csv',encoding='euc-kr')\n\nprint(x_train)\nprint(x_train.info())\nprint(y_train.info())","f96a6f38":"# \uc608\uce21\uc5d0 \ud544\uc694\uc5c6\ub294 \ubcc0\uc218\ub4e4 \uc81c\uac70\nx_train_1 = x_train[['CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']]\ny_train_1 = y_train[['Exited']]\n\n# # \ud3c9\uade0\uac12\uacfc \uc911\uc704\uc218 \ube44\uad50\ud558\uc5ec \ubb38\uc81c \uc788\ub294 \uceec\ub7fc \ucc3e\uc544\ub0b4\ubcf4\uc790\nprint(x_train_1.info())\nprint(x_train_1.describe().T[['mean','50%']])","fde4080a":"# #\ub77c\ubca8\uc778\ucf54\ub529\uc73c\ub85c \ubc94\uc8fc\ud615\uc790\ub8cc\ub97c \uc5f0\uc18d\ud615\uc73c\ub85c \ubcc0\ud658\nx_train_1.Geography = x_train_1.Geography.astype('category').cat.codes\nx_train_1.Gender = x_train_1.Gender.astype('category').cat.codes\n\nprint(x_train_1.info())","3ee4ff6c":"# \uc804\ucc98\ub9ac \ub05d\ub0ac\uc73c\ub2c8 \ud6c8\ub828\ub370\uc774\ud130, \uac80\uc99d\ub370\uc774\ud130 \ud640\ub4dc\uc544\uc6c3\nfrom sklearn.model_selection import train_test_split\nX_train_val, X_test_val, y_train_val, y_test_val = train_test_split(x_train_1, y_train_1, stratify = y_train_1, random_state=42)","3d3ae6c6":"# \uc5f0\uc18d\ud615 \ubcc0\uc218\uc5d0 \ub300\ud574 \uc2a4\ucf00\uc77c\ub9c1\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train_val)\nX_scaled_train = scaler.transform(X_train_val)\nX_scaled_test = scaler.transform(X_test_val)\n\nprint(pd.DataFrame(X_scaled_train).describe())","68de7cd7":"# \ubaa8\ub378\ub9c1\nfrom xgboost import XGBClassifier\nmodel = XGBClassifier(n_estimators = 400, learning_rate = 0.1, max_depth = 3, min_samples_leaf = 4, min_samples_split = 3)\nmodel.fit(X_scaled_train, y_train_val)\npred_test = model.predict(X_scaled_test)\npred_proba = model.predict_proba(X_scaled_test)[:,1]\n\nprint(pred_proba)\n\nfrom sklearn.metrics import roc_auc_score\nprint(roc_auc_score(y_test_val, pred_proba)) # roc_auc_score \uc810\uc218 0.84","7981756c":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \uc801\uc6a9\ud558\uae30\nx_test_1 = X_test[['CreditScore','Geography','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']]\nx_test_1.Geography = x_test_1.Geography.astype('category').cat.codes\nx_test_1.Gender = x_test_1.Gender.astype('category').cat.codes\n\nprint(x_test_1.info())","cf00d080":"print(x_test_1, pred_test_test)","15fdc120":"pred_test_test = model.predict(x_test_1)\n\nidx = X_test.CustomerId\n\nsubmission = pd.DataFrame({'CustomerId' : idx, 'Exited' : pred_test_test})\nprint(submission)\nsubmission.to_csv('20111122.csv', index=False)","042232f8":"# \uc798 \ub9cc\ub4e4\uc5b4\uc84c\ub098 \ud655\uc778\ndf = pd.read_csv('20111122.csv')\nprint(df.Exited.unique())","183aadb0":"roc_auc_score\ub294 0.84\uc778\ub370 \uc65c \uc8c4\ub2e4 1\ub85c \uc608\uce21\ud560\uae4c\uc694..?"}}