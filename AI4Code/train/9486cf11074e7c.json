{"cell_type":{"f418a126":"code","670f29e8":"code","ddf2e76a":"code","8928d914":"code","3895be4e":"code","2fdaaa90":"code","0ab9f03b":"code","9840a95e":"code","1e9fb931":"code","71c877a6":"code","818b24c8":"code","d67b3054":"code","ea5c4111":"code","f8378abe":"code","28a0b17b":"code","58de27f8":"code","c91819e5":"code","0870d1d3":"code","dbe083d9":"code","3ca9ed26":"code","52cc8749":"code","3522766c":"code","ba8b8ef1":"code","71c3c2cf":"code","a4491ee8":"code","1a81e5d3":"markdown","adc69da8":"markdown","e609bdfc":"markdown"},"source":{"f418a126":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","670f29e8":"# np.arange\u30670\u304b\u308929\u307e\u3067\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n# \u4ed6\u306e\u591a\u304f\u306e\u8a00\u8a9e\u3067\u3082\u305d\u3046\u3067\u3059\u304c\u3001\u6700\u521d\u306e\u6570\u5b57\u306f\u542b\u3093\u3067\u6700\u5f8c\u306e\u6570\u5b57\u306f\u542b\u307e\u306a\u3044\u3067\u3059\u3002\narr = np.arange(0,30)\narr","ddf2e76a":"# \u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u30b9\u30e9\u30a4\u30b9\u3068\u547c\u3073\u307e\u3059\u3002\n# \u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f73\u304b\u30897\u307e\u3067\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n# 0\u59cb\u307e\u308a\u3068\u3044\u3046\u70b9\u3068\u3001\u3084\u306f\u308a\u6700\u521d\u306f\u542b\u3093\u3067\u6700\u5f8c\u306f\u542b\u307e\u306a\u3044\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\narr[3:8]","8928d914":"# reshape\u3067\u914d\u5217\u306e\u5f62\u72b6\u309210\u884cx3\u5217\u306b\u5909\u5f62\u3057\u307e\u3057\u305f\u3002\narr = arr.reshape(10,3)\narr","3895be4e":"# \u591a\u6b21\u5143\u306e\u914d\u5217\u306b\u3082\u540c\u69d8\u306b\u30b9\u30e9\u30a4\u30b9\u3067\u304d\u307e\u3059\u3002\n# \u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u307e\u305a\u884c\u65b9\u5411\u306b1~4\u756a\u76ee\u3001\u5217\u65b9\u5411\u306b2\u756a\u76ee\u306e\u8981\u7d20\u3092\u6301\u3063\u3066\u304d\u3066\u3044\u307e\u3059\u30020\u59cb\u307e\u308a\u3067\u6700\u521d\u3092\u542b\u3093\u3067\u6700\u5f8c\u3092\u542b\u307e\u306a\u3044\u70b9\u306b\u3053\u3053\u3067\u3082\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\narr[1:5,2]","2fdaaa90":"# \u3088\u304f\u3001\u4e8c\u5024\u5206\u985e\u306e\u30b3\u30fc\u30c9\u5185\u3067\u3001\n# y_pred = model.predict_proba(X_test)[:,1]\n# \u306a\u3069\u3068\u8a18\u8ff0\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5217\u65b9\u5411\u306b\u5404\u30af\u30e9\u30b9\u3092\u3068\u308b\u78ba\u7387\u5024\u304c\u51fa\u529b\u3055\u308c\u3066\u304a\u308a\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u304cPositive\u3092\u3068\u308b\u78ba\u7387\u3060\u3051\u53d6\u308a\u51fa\u3057\u305f\u3044\u306e\u3067\n# \u5217\u65b9\u5411\u306b[:,1]\u3068\u30b9\u30e9\u30a4\u30b9\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n# \u305d\u306e\u307b\u304b\u306b\u3082\u4ea4\u5dee\u691c\u5b9a\u306a\u3069\u3067\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u969b\u306b\u306f\u884c\u65b9\u5411\u306b\u30b9\u30e9\u30a4\u30b9\u3057\u307e\u3059\u306e\u3067\u3001\u3088\u304f\u884c\u3046\u64cd\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002","0ab9f03b":"# \u3055\u3066\u3001numpy\u306e\u914d\u5217\u306f\u884c\u5217\u6f14\u7b97\u304c\u5143\u3005\u306e\u7528\u9014\u3067\u3059\u304b\u3089\u57fa\u672c\u7684\u306b\u306f\u6570\u5024\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u305d\u308c\u4ee5\u5916\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n# \u73fe\u72b6\u3067\u306f\u6574\u6570\u578b(int64)\u3067\u3059\u304c\u3001\narr.dtype # dtype\u3067\u30c7\u30fc\u30bf\u578b\u306f\u4f55\u304b\u306a\u3068\u8abf\u3079\u3066\u3044\u308b\u3002\u3053\u306e\u8fba\u306f\u30c7\u30fc\u30bf\u578b\u306b\u5fdc\u3058\u3066\u524d\u51e6\u7406\u3092\u884c\u3046\u969b\u306a\u3069\u306b\u3082\u4f7f\u3046\u3067\u3057\u3087\u3046\u3002","9840a95e":"# \u6d6e\u52d5\u5c0f\u6570\u578b\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3057\u3001\narr = arr.astype('float32')\narr","1e9fb931":"# \u6587\u5b57\u5217\u578b\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\narr = arr.astype(str)\narr","71c877a6":"# \u4e00\u65e6\u6570\u5024\u306b\u623b\u3057\u307e\u3059\narr = arr.astype(float)\narr","818b24c8":"# \u56db\u5247\u6f14\u7b97\u3082\u3067\u304d\u307e\u3059\u3057\u3001\narr = 3*arr\narr","d67b3054":"# \u914d\u5217\u540c\u58eb\u3092\u639b\u3051\u7b97\u3059\u308b\u3068\u3001\u8981\u7d20\u3054\u3068\u306e\u7a4d\u306b\u306a\u308a\u307e\u3059\narr * arr","ea5c4111":"# .T\u3067\u8ee2\u7f6e\u3067\u304d\u307e\u3059\narr.T","f8378abe":"# \u30c9\u30c3\u30c8\u7a4d\uff08\u305d\u306e\u4ed6\u306b\u5185\u7a4d\u3084\u5916\u7a4d\u3082\u5f53\u7136\u8a08\u7b97\u3067\u304d\u307e\u3059\u3088\uff09\nnp.dot(arr.T, arr)","28a0b17b":"# \u79d1\u5b66\u6280\u8853\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30eascipy\u3092\u7528\u3044\u308b\u3068\u3088\u308a\u9ad8\u5ea6\u306a\u6f14\u7b97\u3082\u69d8\u3005\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\n# scipy\u306fnumpy\u306e\u62e1\u5f35\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u306e\u3067\u3001\u305d\u306e\u307e\u307enumpy\u306earray\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport scipy as sp\nfrom scipy.stats import pearsonr, spearmanr","58de27f8":"# 0~29\u306e\u914d\u5217\u3068100~129\u306e\u914d\u5217\u3092\u4f5c\u308a\u307e\u3059\narr_0 = np.arange(0,30)\narr_1 = np.arange(100,130)","c91819e5":"# \u5f53\u7136pearson\u306e\u76f8\u95a2\u4fc2\u6570\u306f1\u3067\u3059\u306d\npearsonr(arr_0, arr_1)","0870d1d3":"# \u6b21\u306f\u4e71\u6570\u3092\u7528\u3044\u3066\u914d\u5217arr_2\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\nnp.random.seed(71) # \u518d\u73fe\u6027\u3092\u62c5\u4fdd\u3059\u308b\u305f\u3081\u306b\u4e71\u6570\u306e\u30b7\u30fc\u30c9\u3092\u56fa\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\narr_2 = np.random.choice(range(100), 30, replace=False) # 0~100\u306e\u4e2d\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b30\u500b\u306e\u6574\u6570\u3092\u91cd\u8907\u306a\u3057\u3067\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\narr_2","dbe083d9":"# \u5f53\u7136\u76f8\u95a2\u306f\u307b\u307c\u8a8d\u3081\u3089\u308c\u306a\u3044\u3067\u3059\npearsonr(arr_0, arr_2)","3ca9ed26":"# spearman\u306e\u76f8\u95a2\u4fc2\u6570\uff08\u9806\u4f4d\u76f8\u95a2\uff09\u3082\u540c\u69d8\u3067\u3059\u3002\n# spearman\u306e\u76f8\u95a2\u4fc2\u6570\u3068\u901a\u5e38\u7528\u3044\u3089\u308c\u308bpearson\u306e\u76f8\u95a2\u4fc2\u6570\u306e\u95a2\u4fc2\u6027\u3068\u76f8\u9055\u70b9\u306b\u3064\u3044\u3066\u306f\u662f\u975e\u5404\u81ea\u3067\u8abf\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nspearmanr(arr_0, arr_2)","52cc8749":"# arr_2\u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\u4eca\u5ea6\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f\narr_2.sort()\narr_2","3522766c":"# \u4eca\u5ea6\u306fpearson\u306e\u76f8\u95a2\u4fc2\u6570\u306f\u9ad8\u3044\u5024\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\npearsonr(arr_0, arr_2)","ba8b8ef1":"# spearman\u306e\u76f8\u95a2\u4fc2\u6570\uff08\u9806\u4f4d\u76f8\u95a2\uff09\u306b\u81f3\u3063\u3066\u306f1.0\u3059\u306a\u308f\u3061\u5b8c\u5168\u4e00\u81f4\u3068\u3044\u3046\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n# \u3053\u308c\u306f\u5f53\u7136\u306e\u7d50\u679c\u3067\u3001\u4e21\u8005\u306f\u76f4\u7dda\u4e0a\u306b\u3074\u3063\u305f\u308a\u4e26\u3093\u3067\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u306e\u9806\u5e8f\u306f\u5b8c\u5168\u306b\u6574\u5408\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002\nspearmanr(arr_0, arr_2)","71c3c2cf":"# \u6b63\u898f\u5316\u30b8\u30cb\u3082\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u304b\u3002\ndef gini(actual, pred, cmpcol = 0, sortcol = 1):\n    assert( len(actual) == len(pred) )\n    all = np.asarray(np.c_[ actual, pred, np.arange(len(actual)) ], dtype=np.float)\n    all = all[ np.lexsort((all[:,2], -1*all[:,1])) ]\n    totalLosses = all[:,0].sum()\n    giniSum = all[:,0].cumsum().sum() \/ totalLosses\n    \n    giniSum -= (len(actual) + 1) \/ 2.\n    return giniSum \/ len(actual)\n \ndef gini_normalized(a, p):\n    return gini(a, p) \/ gini(a, a)","a4491ee8":"# 1.0\u306b\u306a\u308a\u307e\u3057\u305f\u306d\uff01\u9806\u5e8f\u306e\u307f\u306e\u6574\u5408\u6027\u304c\u554f\u308f\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u70b9\u306b\u3064\u3044\u3066\u3001\u76f4\u611f\u7684\u306b\u4f55\u3060\u304b\u308f\u304b\u3063\u3066\u304d\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\ngini_normalized(arr_0, arr_2)","1a81e5d3":"\u3055\u3066\u3001numpy\u306f\u975e\u5e38\u306b\u91cd\u8981\u3067\u3059\u304c\u3001\u5b9f\u969b\u306b\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u306a\u3069\u306e\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\u3092\u884c\u3046\u969b\u306b\u306fpandas\u306eDataFrame\u3068\u3044\u3046\u30c7\u30fc\u30bf\u578b\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u30e1\u30a4\u30f3\u306b\u306a\u308a\u307e\u3059\u3002pandas\u82b8\u306a\u3093\u3066\u3044\u3046\u8a00\u8449\u304c\u51fa\u3066\u304f\u308b\u304f\u3089\u3044\u306b\u591a\u6a5f\u80fd\u3067\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u65b9\u3067\u901f\u5ea6\u306b\u96e3\u304c\u3042\u3063\u305f\u308a\u3068numpy\u3068pandas\u306f\u4e00\u9577\u4e00\u77ed\u3067\u5b9f\u969b\u306e\u30d5\u30ed\u30fc\u306e\u969b\u306b\u306f\u4e21\u8005\u3092\u4e92\u3044\u306b\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3057\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002  \n\n\u6b21\u56de\u306e\u521d\u5fc3\u8005\u5411\u3051\u30b3\u30f3\u30c6\u30f3\u30c4\u3067\u306fpandas\u306e\u64cd\u4f5c\u306b\u3064\u3044\u3066\u3082\u89e6\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","adc69da8":"\u3053\u306eNotebook\u3067\u306fnumpy\u306e\u4f7f\u3044\u65b9\u3092\u89e6\u308a\u306a\u304c\u3089\u899a\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u521d\u65e5\u306eBaseline\u3092\u52d5\u304b\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3067\u305d\u3053\u304b\u3089\u3069\u3046\u3084\u3063\u3066\u9032\u3081\u3070\u826f\u3044\u306e\u304b\u56f0\u3063\u3066\u56fa\u307e\u3063\u3066\u3057\u307e\u3063\u305f\u65b9\u3082\u591a\u304b\u3063\u305f\u3088\u3046\u306b\u304a\u898b\u53d7\u3051\u3057\u307e\u3059\u3002\u91ce\u7403\u3084\u305d\u306e\u4ed6\u306e\u5404\u7a2e\u30b9\u30dd\u30fc\u30c4\u3067\u3082\u30b2\u30fc\u30e0\u3092\u30d7\u30ec\u30a4\u3057\u3066\u697d\u3057\u3080\u3001\u3042\u308b\u3044\u306f\u7af6\u3046\u305f\u3081\u306b\u306f\u77e5\u8b58\u3084\u6280\u8853\u4ee5\u524d\u306b\u5fc5\u8981\u3068\u3055\u308c\u308b\u52d5\u4f5c\u3092\u30b9\u30e0\u30fc\u30ba\u306b\u884c\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Python\u306b\u3088\u308b\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u4f8b\u3048\u3070\u3001  \n \n1. numpy, pandas\u306b\u3088\u308b\u30c7\u30fc\u30bf\u306e\u64cd\u4f5c\n2. scikit-learn\u304a\u3088\u3073scikit-learn\u306b\u6e96\u62e0\u3057\u305f\u5404\u7a2e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u53d6\u308a\u6271\u3044\n\n\u306a\u3069\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002","e609bdfc":"\u307e\u305a\u306fnumpy\u3092\u89e6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002numpy\u306e\u540d\u306fnumerical python\u304b\u3089\u304d\u3066\u3044\u3066\u3001\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u884c\u5217\u6f14\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u901f\u5ea6\u306e\u9045\u3044python\u306e\u6b20\u70b9\u3092\u4e00\u5b9a\u7a0b\u5ea6\u88dc\u3063\u3066\u304a\u308a\u3001\u307b\u307c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u8a00\u3063\u3066\u3082\u826f\u3044\u304f\u3089\u3044\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u3002python\u304c\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u5206\u91ce\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u7406\u7531\u306e\u4e00\u3064\u3067\u3057\u3087\u3046\u3002\u901a\u5e38\u3001import numpy as np\u306a\u3069\u3068\u7565\u3057\u3066\u7528\u3044\u3089\u308c\u307e\u3059\u3002"}}