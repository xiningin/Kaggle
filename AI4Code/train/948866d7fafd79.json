{"cell_type":{"c771227f":"code","2b172327":"code","a7417067":"code","0d998ee6":"code","8088d73e":"code","b0f13c00":"code","74e6e6bd":"code","268b2db5":"code","d2c4f5e2":"code","958d1efe":"code","0e89e9e6":"code","a38ba449":"code","027370fa":"code","882d0640":"code","c761cda4":"code","573a1224":"code","f97322fd":"code","2e8d0e3f":"code","4fc1f2b0":"code","d798a466":"code","7349a673":"code","3ffc5adf":"code","85b8cdf7":"code","744b1c54":"code","25c3aa7c":"code","b43a5840":"markdown","86237a1b":"markdown","eef6c442":"markdown","5e07b973":"markdown","728e2544":"markdown","a799e5d1":"markdown","debfdd33":"markdown","e192a17c":"markdown","d83351e6":"markdown"},"source":{"c771227f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2b172327":"!pip install openpyxl","a7417067":"df=pd.read_excel('..\/input\/penalty-statistics-20192020\/Penalty_stats_propre_19-20.xlsx')\ndf.head()","0d998ee6":"df=df.drop(['Id','Journee', 'Date', 'Home_team', 'Away_team', 'Minute','Team_win', 'Last_Goal'], axis=1)\ndf.count()","8088d73e":"#df.columns = ['Competition','Team_taking_pen','Pen_taker','LtD_gc_pen','DtW_gc_pen','L_no_gc','W_no_gc','Scored','PT_sub','PT_position']\ndf.rename(columns={'LtD_game-changing_pen': 'LtD_gc_pen', 'DtW_game-changing _pen': 'DtW_gc_pen', 'L_no_game-changing': 'L_no_gc', 'W_no_game-changing': 'W_no_gc'}, inplace=True)","b0f13c00":"df.head()","74e6e6bd":"df.Scored.value_counts()","268b2db5":"#on va mapper les Oui\/Non ainsi que le domicile\/ext\u00e9rieur\ndf.Team_taking_pen = df.Team_taking_pen.map({\"Away\":0, \"Home\":1})\ndf.LtD_gc_pen = df.LtD_gc_pen.map({\"NO\":0, \"YES\":1})\ndf.DtW_gc_pen = df.DtW_gc_pen.map({\"NO\":0, \"YES\":1})\ndf.L_no_gc = df.L_no_gc.map({\"NO\":0, \"YES\":1})\ndf.W_no_gc = df.W_no_gc.map({\"NO\":0, \"YES\":1})\ndf.PT_sub = df.PT_sub.map({\"NO\":0, \"YES\":1})\ndf.Scored = df.Scored.map({\"NO\":0, \"YES\":1})","d2c4f5e2":"df.head()","958d1efe":"df.PT_sub.value_counts()","0e89e9e6":"#on va mapper les positions des tireurs selon leurs postes:\ndf.PT_position.value_counts()","a38ba449":"df = pd.get_dummies(data=df, columns=['PT_position'])\ndf.head()","027370fa":"#On testera plus tard d'int\u00e9grer le joueur \/ la comp\u00e9tition dans le mod\u00e8le\ndf = df.drop(['Competition','Pen_taker'], axis=1)","882d0640":"justNos = df[df['Scored'] == 1]\ncoupleOfNos = justNos.sample(120)\ndf = df[df['Scored'] == 0]\ndf = df.append(coupleOfNos)\ndf = df.sample(frac=1)\ndf.reset_index(inplace=True)","c761cda4":"df = df.drop(['index'], axis=1)","573a1224":"X = df.drop(['Scored'], axis=1)\ny = df.Scored","f97322fd":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","2e8d0e3f":"print(X_train.shape)\nprint(X_test.shape)","4fc1f2b0":"y_train.value_counts()","d798a466":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)","7349a673":"y_lr = lr.predict(X_test)","3ffc5adf":"# Importation des m\u00e9thodes de mesure de performances\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score","85b8cdf7":"print(confusion_matrix(y_test,y_lr))","744b1c54":"print(accuracy_score(y_test,y_lr))","25c3aa7c":"print(classification_report(y_test, y_lr))","b43a5840":"### On applique une r\u00e9gression logistique","86237a1b":"## On voit que ce mod\u00e8le \/ cette m\u00e9thode est tr\u00e8s peu performante\nDiff\u00e9rentes pistes d'am\u00e9lioration:\n- Obtenir plus de donn\u00e9es\n- R\u00e9\u00e9quilibrer le JDD en faisant de l'upSampling sur les p\u00e9naltys rat\u00e9s\n- Tester d'autres algorithmes (XGBoost etc) voire des r\u00e9seaux de neurones?\n\nIl est \u00e9galement possible que cette pr\u00e9diction soit simplement impossible car les diff\u00e9rents facteurs pris en entr\u00e9e sont trop peu significatifs","eef6c442":"On a 384 p\u00e9naltys marqu\u00e9s et 110 rat\u00e9s donc il faudra peut-\u00eatre qu'on r\u00e9\u00e9quilibre.\nR\u00e9flexion \u00e0 avoir car en vrai c'est le ratio logique","5e07b973":"On va r\u00e9\u00e9quilibrer le dataset pour garder moins de p\u00e9naltys r\u00e9ussis et \u00e9viter que l'algo pr\u00e9dise uniquement des Oui","728e2544":"###### On va d\u00e9sormais le nettoyer:\n\n- On enl\u00e8ve les colonnes inutiles\n- On change les colonnes bool\u00e9ennes par des 0 ou des 1 (Team taking pen, + toutes les YES\/NO)","a799e5d1":"![image.png](attachment:1a22511a-d2d8-48b9-a574-9bbe61206c00.png)","debfdd33":"### On va commencer l'apprentissage","e192a17c":"On va donc entrainer nos donn\u00e9es sur 310 p\u00e9naltys r\u00e9ussis et 85 manqu\u00e9s","d83351e6":"### Mesure des performances"}}