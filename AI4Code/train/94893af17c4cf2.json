{"cell_type":{"1171e2a5":"code","10f77943":"code","47c2ca7d":"code","012ccdfd":"code","0eb0c52c":"code","733eb73e":"code","39b89672":"code","33c288fb":"code","09f55179":"code","d20c6dde":"code","bd699ae5":"code","e74c82ba":"code","c3bedc51":"code","536c7d89":"code","dc17d3fb":"code","9637725a":"code","c2b76687":"code","988295b3":"code","b590f64b":"code","597b3c79":"code","c254e041":"code","ad210a80":"code","cfa2a4ed":"code","76144ae9":"code","0e70e851":"code","2ca99539":"code","f5162c06":"code","80f1b59a":"markdown","49cc73c0":"markdown","a341ba61":"markdown","5f8af1ec":"markdown","4ce05419":"markdown","c4677ead":"markdown","0e5b6489":"markdown","ae6a453e":"markdown","93101de4":"markdown","88dc66d3":"markdown","8d1e0d0e":"markdown","b78fd107":"markdown","84aaa09f":"markdown"},"source":{"1171e2a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","10f77943":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\n\nimport re\n# Tutorial about Python regular expressions: https:\/\/pymotw.com\/2\/re\/\nimport string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom gensim.models import Word2Vec\nfrom gensim.models import KeyedVectors\nimport pickle\n\nfrom tqdm import tqdm\n\n# Create Connection with Db\ncon = sqlite3. connect(\"\/kaggle\/input\/amazon-fine-food-reviews\/database.sqlite\")","47c2ca7d":"# Show Tables in Data Base - Python Code\n\ntable = con. cursor()\ntable. execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\ntable. fetchall()","012ccdfd":"# Show All Tables In Database\nread_data = pd.read_sql_query(\"\"\" SELECT * FROM Reviews\"\"\", con) \nread_data","0eb0c52c":"read_data.info()","733eb73e":"count_Total_Score = pd.read_sql_query(\"\"\" SELECT DISTINCT Score,COUNT(Score) AS Total FROM Reviews GROUP BY Score\"\"\", con) \ncount_Total_Score","39b89672":"# Without  NON\nread_data.nunique()","33c288fb":"# Checking Null or 0 Value in User ID\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where UserId IS NULL Or UserId=0 \"\"\", con) \nnull_value","09f55179":"# Checking Null or 0 Value in  ProductId\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where ProductId IS NULL OR ProductId=0\"\"\", con) \nnull_value","d20c6dde":"# Checking Null or 0 Value in  ProfileName\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where ProfileName IS NULL OR ProfileName=0\"\"\", con) \nnull_value","bd699ae5":"# Checking Null or 0 Value in  HelpfulnessNumerator\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where HelpfulnessNumerator IS NULL OR HelpfulnessNumerator=0\"\"\", con) \nnull_value","e74c82ba":"# Checking Null or 0 Value in  HelpfulnessDenominator\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where HelpfulnessDenominator IS NULL OR HelpfulnessDenominator=0\"\"\", con) \nnull_value","c3bedc51":"# Checking Null or 0 Value in  Score\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where Score IS NULL OR Score=0\"\"\", con) \nnull_value","536c7d89":"# Checking Null or 0 Value in  Time\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where Time IS NULL OR Time=0\"\"\", con) \nnull_value","dc17d3fb":"# Checking Null or 0 Value in  Summary\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where Summary IS NULL OR Summary=0\"\"\", con) \nnull_value","9637725a":"# Checking Null or 0 Value in  Text\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where Text IS NULL OR Text=0\"\"\", con) \nnull_value","c2b76687":"# Find HelpfulnessNumerator Grater Then HelpfulnessDenominator\nnull_value = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where HelpfulnessNumerator > HelpfulnessDenominator\"\"\", con) \nnull_value","988295b3":"# let see Score 3 Reviews \nscore_3 = pd.read_sql_query(\"\"\" SELECT * FROM Reviews Where Score= 3\"\"\", con)\nscore_3","b590f64b":"# Removind duplicates Data \n# On the base of Where UserId,ProfileName,Text & Time Will Same \n# 1. sort Our Data \n# 2. Keep First Entry \n\n\n# Sorting Data \nsorted_data=read_data.sort_values('ProductId', axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')","597b3c79":"#Remove duplication \nfinal=sorted_data.drop_duplicates(subset={\"UserId\",\"ProfileName\",\"Time\",\"Text\"}, keep='first', inplace=False)\nfinal.shape","c254e041":"final","ad210a80":"# # Read Text data For Deep Analysis or Find some Data for EDA\n# count = 1\n# for read_Text in final[\"Text\"][0:1000]:\n#     print(count,read_Text,\"\\n\")\n#     count +=1\n    ","cfa2a4ed":"# Book Reviews ProductID = 0006641040\nfinal.head(5)","76144ae9":"type(final)","0e70e851":"# Deleting Records From Data Code\ndel_Val = final[final['ProductId']=='0006641040'].index # Paste POD Here To  Remove Data  \ndel_Val\nfinal.drop(del_Val, inplace = True)","2ca99539":"count = 1\nfor read_Text in final[\"Text\"][0:10000]:\n    print(count,read_Text,\"\\n\")\n    count +=1","f5162c06":"final[185:200]","80f1b59a":"### Objective\n    Score 3 have Positive and Negative review. So we can use it as Test Data for our ML\/ NLP Modal","49cc73c0":"#### Objective\n    Till now we saw that 5-star reviews constitute a large proportion of all reviews. \n    The next most prevalent rating is 4-stars, \n    followed by 1-star, 3-star, and finally 2-star reviews.\n    \n    1. We Can cunsider 5 & 4 as Positive - Highly satisfied\n    2. 1 & 2  as Negative - Highly dissatisfied\n    3. 3 - Median Satisfied","a341ba61":"### Objective\n    Remove \n    1. There are Some HTML Tags in Text\n    2. Url links  in Text\n    3. Values like ................ in Text\n    4. There are Some Book Reviews in Data \n    5. Movies Data","5f8af1ec":"# Again Text Analysis After Removing 14 Items\n\n    1. Book: PID = 2841233731\n    2. Fly Trap Product = PID = B00004RBDZ\n    3. Wine(Alchole) Storage = PID B00005U2FA\n    4. Music Record = PID B00006L2ZT\n    5. Book: PID = 0006641040         \n    6. Cartoon Movie = PID = B00004CI84    \n    7. Sticker = PID = B00002Z754\n    8. Movie = PID = B00004CXX9\n    9. Rat Trap: PID = B00004RAMY\n    10. Cat Toys = PID B00008437P\n    11. Pet Ropes Toyy: PID = B000084388\n    12. Kitty Cap PID = B000084E66\n    13. Dog Toy: PID B000084E6V\n    14. Fly trap PID = B00002N8SM","4ce05419":"# Data Details\n\n    Dataset statistics\n    Number of reviews   568,454\n    Number of users     256,059\n    Number of products  74,258\n    Users with > 50 reviews     260\n    Median no. of words per review  56\n    Timespan    Oct 1999 - Oct 2012\n    \n#### Column Details\n    Id - Unique row number\n    ProductId - unique identifier for the product\n    UserId - unqiue identifier for the user\n    ProfileName\n    HelpfulnessNumerator - number of users who found the review helpful\n    HelpfulnessDenominator - number of users who indicated whether they found the review helpful\n    Score - rating between 1 and 5\n    Time - timestamp for the review\n    Summary - brief summary of the review\n    Text - text of the review","c4677ead":"# Data Cleaning\n[Q] How to determine if a review is positive or negative?","0e5b6489":"### Objective\n    * Remove Duplicate Entry from our Data\n    * There Are Some HTML Tags In Our Data \n        eg: ID 150529 ==> Text : In June<br \/>I saw a charming group<br \/>of ro.","ae6a453e":"## Remove Duplicates Data ","93101de4":"### Objective\n    HelpfulnessNumerator Can't be Grater Then HelpfulnessDenominator\n    1. We can use This Data becaise we have Positive revives \n    2. We can Delete This because 2 value doesn't affect much\n    \n> I'm Going to use this 2 Value because of Positive Reviews    ","88dc66d3":"# Reading Data","8d1e0d0e":"### Objective\n    HelpfulnessNumerator = Yes, Total 0 HelpfulnessNumerator = 303826 - 568454 = 264628 (We have Some Data in IT)\n    HelpfulnessDenominator = yes + No, Total  0 HelpfulnessDenominator = 270052 - 568454 = 298402 (We have Some Data in It) \n    ","b78fd107":"### Nunique\n   [nunique()](https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.nunique.html)\n","84aaa09f":"# First Run Below Code For Text Analysis"}}