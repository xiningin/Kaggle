{"cell_type":{"e604e39c":"code","234563ab":"code","afc2d121":"code","1d818d66":"code","b51dfd5f":"code","8481d93f":"code","c93865dc":"code","9ab1a29e":"code","464bfbbf":"code","ec9520d0":"code","6579f0c4":"code","9a34babc":"code","fb47b029":"code","1d37989f":"code","118b343a":"code","83116e0b":"code","9f79cac7":"code","37466ece":"code","dcd322ae":"code","2f31bc95":"code","0c1b6e96":"code","61b3bb88":"code","b9498b69":"code","61be6372":"code","c0c39ec2":"code","29a9a5dc":"code","a4014cbf":"code","44769531":"code","4724bb3c":"code","9271cf9b":"code","b237e342":"code","4d888ef4":"code","0a45647f":"code","d547095b":"code","dbe42e66":"code","24d262f5":"code","66669c88":"code","cea7fff6":"code","733cfd33":"code","1150d6b7":"code","dea6363d":"code","2e40b804":"code","53dea7d8":"code","1e094888":"code","e83c36f2":"code","946bf1f1":"code","4bb9a2ea":"code","7fb9fdcb":"code","3b1720b9":"code","00c46c3a":"code","54043ade":"code","a1a94a8c":"code","b6dcfbe9":"code","6010a026":"code","d4b61b0d":"code","da26fe4f":"code","4d307e0a":"code","5bbd1d04":"code","161a88c4":"code","daabd24b":"code","a5a17e11":"code","2d4b6235":"code","bcb919f2":"code","902a4bd8":"code","dddd1fb8":"code","98324e79":"code","b850ff21":"code","e6128681":"code","ff74e884":"code","f48b76f8":"code","583bcdea":"code","153d8748":"code","a09f8ade":"code","c64ab09b":"code","e9c0aa53":"code","315f7517":"code","62c16355":"code","09bda0b4":"code","294f25b5":"code","868412a4":"code","71ce6167":"code","a077c227":"code","414f1fd5":"code","65788210":"code","3705d511":"code","7cc597d2":"code","2b4ba73e":"code","2d3d2ed9":"code","ca9e29cd":"code","be40e34d":"code","40763902":"code","e74016eb":"code","32402713":"code","d8866040":"code","e4b2358d":"code","71b4a859":"code","6cc7b212":"code","751ada8b":"code","8a226720":"code","91ed9c2c":"code","1e259d98":"code","696e1703":"markdown","c20bdde1":"markdown","362c5d58":"markdown","aaba3b96":"markdown","90a92465":"markdown","55371a1f":"markdown","7945df16":"markdown","b7d8096f":"markdown","261b5353":"markdown","83878ccc":"markdown","946eb23e":"markdown","4817d045":"markdown","647d8f5d":"markdown","0f6fe0b6":"markdown","04b9b345":"markdown","7533b757":"markdown","64cd11f8":"markdown","6d6384c5":"markdown","c143c4e7":"markdown","585bb6d4":"markdown","81a63118":"markdown","04128f6e":"markdown"},"source":{"e604e39c":"import os\nimport pandas as pd\nimport numpy as np","234563ab":"df=pd.read_csv(\"..\/input\/train.csv\")","afc2d121":"#df = pd.read_csv('train.csv')","1d818d66":"df.head()","b51dfd5f":"df.shape","8481d93f":"import matplotlib.pyplot as plt","c93865dc":"plt.hist(df['SalePrice'])","9ab1a29e":"df['sale_price_log'] = np.log(df['SalePrice'])\nplt.hist(df['sale_price_log'])","464bfbbf":"import statsmodels.formula.api as smf\nimport statsmodels.stats.multicomp as multi","ec9520d0":"def uni_analysis(df):\n    x = (df.select_dtypes(include=['O']))\n    p_value = []\n    for i in x:\n        para = 'SalePrice ~ '+str(i)\n        model = smf.ols(formula=para, data=df)\n        results = model.fit()\n        p_value.append(results.f_pvalue)\n    df1 = pd.DataFrame(list(zip(x,p_value)), columns =['Variable', 'p_value'])\n    df1['Drop_column'] = df1['p_value'].apply(lambda x: 'True' if x > 0.05 else 'False')\n    return df1","6579f0c4":"uni_analysis(df)","9a34babc":"drop_col = ['Street','PoolQC','Utilities','LandSlope','MiscFeature','Condition2']","fb47b029":"df.drop(drop_col, axis=1, inplace=True)","1d37989f":"#3SsnPorch, there is some issue with the column name, the ols algorithm shows error with this name. hence we rename it.\ndf.rename(columns={'3SsnPorch': \"threessnporch\"}, inplace=True)\n","118b343a":"# YearRemodAdd teslls us if the house was remodelled. if the yearbuilt and yearremodadd are same that means there was no modification\ndf['YearRemodAdd'] = df['YearRemodAdd'].astype(str)\ndf.loc[(df.YearRemodAdd == df.YearBuilt), 'YearRemodAdd'] = 'No_remodel'","83116e0b":"def univar_cont2(df, threshold):\n    x = (df.select_dtypes(include=['int64','float64']))\n    p_value = []\n    col_name = []\n    for i in x:\n        if (df[i].nunique())<threshold:\n            df[i] = df[i].astype(str)\n            col_name.append(i)\n            para = 'SalePrice ~ '+str(i)\n            model = smf.ols(formula=para, data=df)\n            results = model.fit()\n            p_value.append(results.f_pvalue)\n        else:\n            print('columns are truely continous:',i,'and the unique entries are', df[i].nunique())\n    df1 = pd.DataFrame(list(zip(col_name,p_value)), columns =['Variable', 'p_value'])\n    df1['Drop_column'] = df1['p_value'].apply(lambda x: 'True' if x > 0.05 else 'False')\n    return df1\n","9f79cac7":"univar_cont2(df, 50)  #threshold value was earlier included as inside the function as 20. the above function was updated later.","37466ece":"df.drop(['LowQualFinSF','BsmtHalfBath','threessnporch','MiscVal','MoSold','YrSold'], axis=1, inplace=True)","dcd322ae":"x = (df.select_dtypes(include=['int64','float64']))\nfor i in x:\n    if (df[i].nunique())<50:\n        df[i] = df[i].astype(str)","2f31bc95":"df.dtypes.value_counts()","0c1b6e96":"def univar_cont(df, target):\n    x = (df.select_dtypes(include=['int64','float64']))\n    print('There are ',len(x.columns),' columns with continous variable')\n    mean_val =[]\n    median_val = []\n    min_val = []\n    max_val = []\n    variance_val = []\n    std_val = []\n    q1_val = []\n    q3_val= []\n    corelation = []\n    \n    for i in x:\n        mean_val.append(df[i].mean())\n        median_val.append(df[i].median())\n        min_val.append(df[i].min())\n        max_val.append(df[i].max())\n        variance_val.append(df[i].var())\n        std_val.append(df[i].std())\n        \n        q1,q3 = df[i].quantile([0.25,0.75])\n        q1_val.append(q1)\n        q3_val.append(q3)\n        corelation.append(df[i].corr(df[target]))\n    df1 = pd.DataFrame(list(zip(x,mean_val,median_val,min_val,max_val,variance_val,std_val,q1_val,q3_val, corelation)), \n                      columns=['variable','mean','median','minimum','maximum','variance','std_deviation','quantile_1','quantile_3','corelation'])\n    return df1\n   ","61b3bb88":"univar_cont(df, 'SalePrice')","b9498b69":"df.drop(['BsmtFinSF2','EnclosedPorch','BsmtUnfSF'], axis=1, inplace=True)","61be6372":"df.head()","c0c39ec2":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n\nnewdf = df.select_dtypes(include=numerics)","29a9a5dc":"newdf.drop(['Id','sale_price_log'], axis=1, inplace=True)","a4014cbf":"newdf.head()","44769531":"cor_tab = newdf.corr()\ncor_tab.style.background_gradient(cmap='coolwarm')\n","4724bb3c":"df.drop('1stFlrSF', axis=1, inplace=True)","9271cf9b":"df.drop('GarageYrBlt', axis=1, inplace=True)","b237e342":"df.head()","4d888ef4":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]","0a45647f":"miss_val['miss_percent'] = (miss_val['miss']\/1460)*100","d547095b":"miss_val","dbe42e66":"# since alley and fence have more than 80% of missing data we will drop these columns. note that alley has good p-value. so later we will try to include it to see if it will improve the model\ndf.drop(['Alley','Fence'], axis=1, inplace=True)","24d262f5":"# just noticed that fireplace is actually a numerical variable, it can be used as categorical. but to reduce the number of dummy\n#columns, we will make it as numberic\ndf['Fireplaces'] = df['Fireplaces'].astype('int32')","66669c88":"df.shape","cea7fff6":"df['GarageType'].isna().sum()","733cfd33":"xx= df[['GarageType','GarageFinish','GarageQual','GarageCond']]","1150d6b7":"xx.fillna(-99, inplace=True)","dea6363d":"xx","2e40b804":"xy = xx.index[xx['GarageType']==-99].tolist()","53dea7d8":"df['GarageCars'][xy]","1e094888":"df['GarageCond'][xy]","e83c36f2":"df['GarageArea'][xy]","946bf1f1":"df['GarageType'].fillna('No_garage', inplace=True)","4bb9a2ea":"df['GarageQual'].fillna('No_garage', inplace=True)","7fb9fdcb":"df['GarageCond'].fillna('No_garage', inplace=True)","3b1720b9":"df['GarageFinish'].fillna('No_garage', inplace=True)","00c46c3a":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]\nmiss_val","54043ade":"bs = df.index[df['BsmtQual'].isna()].tolist()","a1a94a8c":"df['BsmtCond'][bs]","b6dcfbe9":"df['BsmtFinType1'][bs]","6010a026":"df['BsmtExposure'][bs]","d4b61b0d":"# similar to garage, impute these columns with no basement","da26fe4f":"df['BsmtFullBath'][bs]","4d307e0a":"df['BsmtQual'].fillna('No_basement', inplace=True)\ndf['BsmtCond'].fillna('No_basement', inplace=True)\ndf['BsmtExposure'].fillna('No_basement', inplace=True)\ndf['BsmtFinType1'].fillna('No_basement', inplace=True)\ndf['BsmtFinType2'].fillna('No_basement', inplace=True)","5bbd1d04":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]\nmiss_val","161a88c4":"ms = df.index[df['MasVnrArea'].isna()].tolist()","daabd24b":"df['MasVnrArea'][ms]","a5a17e11":"df['MasVnrArea'].fillna('No_Masonry', inplace=True)\ndf['MasVnrType'].fillna('No_Masonry', inplace=True)","2d4b6235":"fi = df.index[df['FireplaceQu'].isna()].tolist()","bcb919f2":"df['Fireplaces'][fi]","902a4bd8":"# the missing values in fireplacequ is where the fireplace is 0","dddd1fb8":"df['FireplaceQu'].fillna('No_Fireplace', inplace=True)","98324e79":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]\nmiss_val","b850ff21":"df=df.dropna(subset=['Electrical'])","e6128681":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]\nmiss_val","ff74e884":"df['LotFrontage'].fillna(df['LotFrontage'].median(), inplace=True)","f48b76f8":"miss_val = df.isna().sum()\nmiss_val = pd.DataFrame(miss_val, columns=['miss'])\n\nmiss_val = miss_val.loc[(miss_val!=0).any(axis=1)]\nmiss_val","583bcdea":"def outlier_detect (df, col, treatment=False):\n    from scipy.stats import iqr\n    iqr_c = iqr(df[col])\n    q1,q3 = df[col].quantile([0.25,0.75])\n    upper_wis = q3 + (1.5*iqr_c)\n    lower_wis = q1 - (1.5*iqr_c)\n    out_liers_upper = df.index[df[col] > upper_wis]\n    out_liers_lower = df.index[df[col] < lower_wis]\n    \n    col_num = df.columns.get_loc(col)\n    if treatment==True:\n        for x in out_liers_upper:\n            df.iloc[x,col_num]= upper_wis\n        for x in out_liers_lower:\n            df.iloc[x,col_num]= lower_wis\n    return out_liers_upper\n    return out_liers_lower\n    return df","153d8748":"outlier_detect(df, 'LotFrontage')","a09f8ade":"plt.boxplot(df['LotFrontage'])","c64ab09b":"df.head()","e9c0aa53":"df.dtypes.value_counts()","315f7517":"for i in df.columns:\n    if (df[i].nunique())<20:\n        df[i] = df[i].astype(str)","62c16355":"df.dtypes.value_counts()","09bda0b4":"df = pd.get_dummies(df)","294f25b5":"df.shape","868412a4":"df.dtypes.value_counts()","71ce6167":"del df['SalePrice']","a077c227":"target = np.array(df['sale_price_log'])","414f1fd5":"features = df.drop('sale_price_log', axis=1)","65788210":"feature_list = list(features.columns)","3705d511":"features = np.array(features)","7cc597d2":"from sklearn.model_selection import train_test_split\ntrain_features, test_features, train_target, test_target = train_test_split(features, target, test_size = 0.20, random_state = 77)","2b4ba73e":"print('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_target.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_target.shape)","2d3d2ed9":"# Import the modelg\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 500 decision trees\nrf = RandomForestRegressor(n_estimators = 500, random_state = 77)\n# Train the model on training data\nrf.fit(train_features, train_target);","ca9e29cd":"# Use the forest's predict method on the test data\npredictions = rf.predict(test_features)","be40e34d":"# Calculate the absolute errors\nerrors = abs(predictions - test_target)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(errors), 5))","40763902":"predictions[10]","e74016eb":"np.exp(predictions[10])","32402713":"np.exp(test_target[10])","d8866040":"# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (errors \/ test_target)\n# Calculate and display accuracy\naccuracy = 100 - np.mean(mape)\nprint('Accuracy:', round(accuracy, 2), '%.')\n","e4b2358d":"test=pd.read_csv(\"..\/input\/test.csv\")","71b4a859":"test.shape","6cc7b212":"test.drop(drop_col, axis=1, inplace=True)\n","751ada8b":"test.columns","8a226720":"test.rename(columns={'3SsnPorch': \"threessnporch\"}, inplace=True)\ntest['YearRemodAdd'] = test['YearRemodAdd'].astype(str)\ntest.loc[(test.YearRemodAdd == test.YearBuilt), 'YearRemodAdd'] = 'No_remodel'\ntest.drop(['LowQualFinSF','BsmtHalfBath','threessnporch','MiscVal','MoSold','YrSold'], axis=1, inplace=True)\ntest.drop(['BsmtFinSF2','EnclosedPorch','BsmtUnfSF'], axis=1, inplace=True)\ntest.drop('GarageYrBlt', axis=1, inplace=True)\ntest.drop('1stFlrSF', axis=1, inplace=True)\ntest.drop(['Alley','Fence'], axis=1, inplace=True)\ntest['Fireplaces'] = test['Fireplaces'].astype('int32')\n\ntest['GarageType'].fillna('No_garage', inplace=True)\ntest['GarageQual'].fillna('No_garage', inplace=True)\ntest['GarageCond'].fillna('No_garage', inplace=True)\ntest['GarageFinish'].fillna('No_garage', inplace=True)\ntest['BsmtQual'].fillna('No_basement', inplace=True)\ntest['BsmtCond'].fillna('No_basement', inplace=True)\ntest['BsmtExposure'].fillna('No_basement', inplace=True)\ntest['BsmtFinType1'].fillna('No_basement', inplace=True)\ntest['BsmtFinType2'].fillna('No_basement', inplace=True)\ntest['MasVnrArea'].fillna('No_Masonry', inplace=True)\ntest['MasVnrType'].fillna('No_Masonry', inplace=True)\ntest['FireplaceQu'].fillna('No_Fireplace', inplace=True)\ntest=test.dropna(subset=['Electrical'])\ntest['LotFrontage'].fillna(test['LotFrontage'].median(), inplace=True)","91ed9c2c":"test.shape","1e259d98":"test.dtypes.value_counts()","696e1703":"## Missing values and treatment","c20bdde1":"### Next step will be outlier detection","362c5d58":"### Same for masvnrtype and masvnrarea","aaba3b96":"## Train the Baseline Model","90a92465":"## The target variable is slightly right skewed. we will do a log trnasformation to make the target variable normally distributed","55371a1f":"## Variable Identification\n\n### SalesPrice is the target variables and it is continous ","7945df16":"## Predict","b7d8096f":"## one hot encoding","261b5353":"#### A little feature engineering before we go to the analysis","83878ccc":"## Split the dataset into target and features","946eb23e":"### The column FireplaceQu is related to the Fireplaces. lets see if the missing values have any relationship.","4817d045":"## There are some variable which are numeric in data type but are actually categorical. We will deal with them separately ","647d8f5d":"# Univariate Analysis\n## 1. Categorical variables","0f6fe0b6":"## Corelation between the continous varaibles","04b9b345":"### Now only one column with continous variable has missing values. we will impute it with median value","7533b757":"## Continous variables","64cd11f8":"### drop the row in electrical column where one value is missing.","6d6384c5":"### We will convert the above numeric variables to object, so that univariate analysis for continous variables is easy.","c143c4e7":"## Train and test split","585bb6d4":"### Similarly for BsmtQual and BsmtCond. ","81a63118":"### The below fucntion will give the p-values for each categorical variable against the target variable\n\n### If the value is less than 0.05 we will drop the column","04128f6e":"## I noticed that the missing values in all the garage columns are same (81, except the Garagecar). lets see if these are same row indexes with na values. if so, that mean the na values can be imputed as 'no_garage'"}}