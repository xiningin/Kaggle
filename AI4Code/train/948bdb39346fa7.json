{"cell_type":{"d730d89f":"code","5ec0218c":"code","78ea3d15":"code","7533d963":"code","0e00c1e4":"code","d06446b9":"code","a8af7fad":"code","b8c28867":"code","4e093679":"code","9a525dfc":"code","91fd2451":"code","669024c1":"code","62c241a0":"code","8085b4d5":"code","f558b2e5":"code","ba9dca19":"code","a15a15c9":"code","7ee95639":"code","d3a2d82b":"code","895dfa01":"code","166dde0a":"code","1786eaef":"code","37c0b289":"code","754febbc":"code","95a405f4":"code","ad278037":"code","d74224b3":"code","9997bc79":"code","3ba42d75":"code","4c686dab":"code","59b95bc4":"code","51a90627":"code","8dc1794b":"markdown","cfad36f0":"markdown","9025f78c":"markdown","76eb12ad":"markdown","daf3c62c":"markdown","429e2475":"markdown","91e4acf5":"markdown","0555b7f3":"markdown","36f327db":"markdown","c408c061":"markdown","df9493d7":"markdown","b20912fc":"markdown","004aacb0":"markdown","9ce85c62":"markdown","8fa0f13d":"markdown","e75713de":"markdown","d997793b":"markdown","8291a2e4":"markdown","d7be1177":"markdown","b7e2cded":"markdown"},"source":{"d730d89f":"# List of Libraries that we will need\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #plotting\nimport cv2 # Image reading and preprocessing\nimport keras # To Build our model\nfrom keras.layers import Conv2D , MaxPooling2D # Getting our Layers for ConvNet\nfrom keras.optimizers import SGD # Our Optimizer, but we will be using adam.\nfrom keras.models import Sequential # We will be using Sequential as our model\nfrom keras.layers import Dropout, Dense , Flatten # Our other layers\n# 1 : Dropout :   will switch off some neurons in our model simoultaneously\n# 2 : Dense   :   will create a Normal layer of neurons\n# 3 : Fatten  :   to Flatten our output from Conv layers \nfrom keras.utils import to_categorical # to make data categorized like converting data into arrays\nfrom sklearn.model_selection import train_test_split # Splitting the data into training and testing\nfrom matplotlib.image import imread #To read the image\nimport os\n\ncategories = []\n# Setting variable filenames to path to iterate better \nfilenames = os.listdir(\"\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/\")\nfor filename in filenames:\n        # Splitting the file.png to get the category \n        # Suppose \/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/001000.png\n        category = filename.split(\".\")[0]\n        # This will return 001000\n        categories.append(category[0:3])\n        # This will append the categories with 001\n        \nprint(categories[0:5])","5ec0218c":"df = pd.DataFrame({\n    \"Image\" : filenames,\n    \"Category\" : categories\n})\ndf.head()","78ea3d15":"df.shape","7533d963":"df['Category'].value_counts()","0e00c1e4":"df['Category'].value_counts().plot.bar()","d06446b9":"df['Image'].head()","a8af7fad":"X = []\nfolder_path = os.listdir(\"\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/\")\nfor file in folder_path:\n    \n    # Reading the Image\n    img = cv2.imread(\"\/kaggle\/input\/butterfly-dataset\/leedsbutterfly\/images\/\"+file,cv2.IMREAD_COLOR)\n    # Resizing the current Image to a dimension of (128,128,3)\n    img = cv2.resize(img,(128,128))\n    \n    # Converting them to Numpy arrays and appending to our List X\n    X.append(np.array(img))\n    \n# Confirming if Images are converted to our desired dimensions \nprint(X[1].shape)\n    ","b8c28867":"df[\"Category\"] = df[\"Category\"].replace({'001': 'Danaus_plexippus', '002': 'Heliconius_charitonius', '003': 'Heliconius_erato', '004': 'Junonia_coenia', '005': 'Lycaena_phlaeas', '006': 'Nymphalis_antiopa', '007': 'Papilio_cresphontes', '008': 'Pieris_rapae', '009': 'Vanessa_atalanta', '010': 'Vanessa_cardui'}) ","4e093679":"y = df['Category'].values\nprint(y[0:5])","9a525dfc":"plt.imshow(X[1])","91fd2451":"import random as rn\nfig,ax=plt.subplots(2,5)\nplt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)\nfig.set_size_inches(15,15)\n\nfor i in range(2):\n    for j in range (5):\n        l=rn.randint(0,len(y))\n        ax[i,j].imshow(X[l][:,:,::-1])\n        ax[i,j].set_title(y[l])\n        ax[i,j].set_aspect('equal')","669024c1":"df.head()","62c241a0":"print(X[0:5])","8085b4d5":"print(y[0:5])","f558b2e5":"from sklearn.preprocessing import LabelEncoder\nenc = LabelEncoder()\ndf['Category'] = enc.fit_transform(df['Category'])\nprint(df.head())","ba9dca19":"Y = df['Category'].values\nprint(Y[0:5])\nprint(Y.ndim)","a15a15c9":"Y = Y.reshape(len(Y),1)\nfrom sklearn.preprocessing import OneHotEncoder\nohe = OneHotEncoder()\nY = ohe.fit_transform(Y)\nprint(type(Y))","7ee95639":"Y.ndim\nY.shape\ntype(Y)","d3a2d82b":"Y[1].shape","895dfa01":"X[1].shape","166dde0a":"X = np.array(X)\ntype(X)","1786eaef":"X_train , x_test , Y_train , y_test = train_test_split(X , Y ,test_size = 0.3)","37c0b289":"X_train.shape","754febbc":"Y_train.shape","95a405f4":"x_test.shape","ad278037":"y_test.shape","d74224b3":"model = Sequential()\n\nmodel.add(Conv2D(32, (5,5), activation = 'relu', input_shape=(128,128,3)))\nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2,2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Flatten())\n\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(256, activation='relu'))\n\nmodel.add(Dense(10, activation='softmax'))","9997bc79":"model.summary()","3ba42d75":"model.layers","4c686dab":"model.compile(loss = \"categorical_crossentropy\" , optimizer = 'adam' , metrics = ['accuracy'])","59b95bc4":"model.fit(X_train , Y_train , epochs = 30 , batch_size = 12)","51a90627":"loss,accuracy =  model.evaluate(x_test,y_test , batch_size = 32)\n\nprint('Test accuracy: {:2.2f}%'.format(accuracy*100))","8dc1794b":"Using OneHotEncoder to encode our data so that we can use it in our model\nSuppose we have the specie as 1 i.e 'Danaus_plexippus' OneHotEncoder will encode it as \n[1,0,0,0,0,0,0,0,0,0]\nFor 2 i.e 'Heliconius_charitonius it will be\n[0,1,0,0,0,0,0,0,0,0]","cfad36f0":"Replacing the Category column values with their original names. ","9025f78c":"Splitting Our Dataset into Training and Tesing data ","76eb12ad":"Creating a Dataframe with the file names and their respesctive categories","daf3c62c":"This a Simple tutorial on **CNN( Convolutional Neural Network)** also known as **ConvNet** with **Keras**, In this tutorial we have a collection of Butterfly Images that are based upon 10 different species of butterfly,\nGiven an Image we have to classify the specie of the Butterfly, So the 10 species are :\n* '001': 'Danaus_plexippus'\n* '002': 'Heliconius_charitonius'\n* '003': 'Heliconius_erato'\n* '004': 'Junonia_coenia'\n* '005': 'Lycaena_phlaeas'\n* '006': 'Nymphalis_antiopa'\n* '007': 'Papilio_cresphontes'\n* '008': 'Pieris_rapae'\n* '009': 'Vanessa_atalanta'\n* '010': 'Vanessa_cardui' \nIn this dataset we have a collection of 832 Images, that are labeled as per their specie code\n(i.e '001': 'Danaus_plexippus' , '002': 'Heliconius_charitonius' ... and so on)","429e2475":"Plotting our first Image from list X","91e4acf5":"Passing our data to the data","0555b7f3":"Evaluating our model on test data","36f327db":"Converting our LabelEncoded values to numpy array","c408c061":"Using LabelEncoder to convert our labels into numeric values","df9493d7":"Finding the number of each unique specie in our dataset","b20912fc":"Creating our Model","004aacb0":"Providing rules for our model, i.e loss type, optimizer to be used and metrics","9ce85c62":"Getting the First 5 occurences of Image attribute from our DataFrame","8fa0f13d":"Will display the layers in our model, and Inputs to each layer","e75713de":"Plotting Some random Images","d997793b":"Reading the Images from the Folder and converting them to numpy arrays for better computation","8291a2e4":"Plotting a bar graph for better visualization of what speice is dominant in our dataset","d7be1177":"Getting the shape of our DataFrame","b7e2cded":"Creating a numpy array y that has Category "}}