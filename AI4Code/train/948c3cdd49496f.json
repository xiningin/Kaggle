{"cell_type":{"fa2eed0e":"code","9dd74423":"code","88f44a44":"code","2c5c1f07":"code","b64fda00":"code","59754a38":"code","b43c4574":"code","6542d666":"code","616a7c4d":"code","e13dd2a0":"code","7a5b99ab":"code","ca7be854":"code","e9cb0fee":"code","b2270279":"code","923fa0ba":"code","ad21b139":"code","2577fbcf":"code","6b599a75":"code","b4cc3a33":"code","91e7e569":"code","9b0bce16":"code","109aca29":"code","6ef98c69":"markdown","927a0897":"markdown","443539b0":"markdown","f03457e7":"markdown","344a1a8d":"markdown","0765fd73":"markdown","3e9e0e40":"markdown","c9da7aaf":"markdown","d4c020f5":"markdown","08e1f7b5":"markdown","37a38c26":"markdown","f78b61d2":"markdown","7692af79":"markdown","d980681a":"markdown"},"source":{"fa2eed0e":"#making the imports\n\nimport pandas as pd\nimport numpy as np\n\nimport cv2\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom keras.models import Sequential\nfrom keras.layers import Flatten, Conv2D, MaxPool2D, Activation, Dense, Dropout\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\n","9dd74423":"#define the directory\n\ntrain_directory=\"..\/input\/train\/train\"\ntest_directory=\"..\/input\/test\/test\"\ntrain=pd.read_csv('..\/input\/train.csv')","88f44a44":"#checking the head\ntrain.head()","2c5c1f07":"plt.figure(figsize = (8,6))\nsns.set_style('dark')\nsns.countplot(train['has_cactus'])\nplt.show()","b64fda00":"#lets display a random image from the training set\n\nimg = cv2.imread('..\/input\/train\/train\/0148bb4a295cf49c0169d69a4a63df7e.jpg')\nplt.figure(figsize = (10,8))\nplt.imshow(img)\nplt.xticks([])\nplt.yticks([])\nplt.show()","59754a38":"#lets display a random image from the training set\n\nimg = cv2.imread('..\/input\/train\/train\/0de4702853bd3667fb24db3a8dcc07bd.jpg')\nplt.figure(figsize = (10,8))\nplt.imshow(img)\nplt.xticks([])\nplt.yticks([])\nplt.show()","b43c4574":"#lets check the shape of image\nimg.shape","6542d666":"#define the parameters for ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale= 1.\/255, validation_split= 0.2, shear_range= 0.2, \n                                  zoom_range= 0.2, horizontal_flip= True)","616a7c4d":"#converting the has_cactus to a string\ntrain['has_cactus'] = train['has_cactus'].astype(str)","e13dd2a0":"#lets use data generator to make training and validation set.\n\ntrain_generator = train_datagen.flow_from_dataframe(train, \n                                                    directory= train_directory, \n                                                    subset= 'training',\n                                                    x_col= 'id',\n                                                    y_col= 'has_cactus',\n                                                    target_size= (32,32),\n                                                    class_mode= 'binary'\n                                                   )\n\n\ntest_generator = train_datagen.flow_from_dataframe(train,\n                                                  directory= train_directory,\n                                                  subset= 'validation',\n                                                  x_col= 'id',\n                                                  y_col= 'has_cactus',\n                                                  target_size= (32,32),\n                                                  class_mode= 'binary'\n                                                  )","7a5b99ab":"#define the model layers\nmodel = Sequential()\n\nmodel.add(Conv2D(32, (3,3), activation = 'relu', input_shape = (32,32,3)))\nmodel.add(Conv2D(32, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = 'relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation = 'sigmoid'))\n","ca7be854":"#lets compile the model\n\nmodel.compile(loss = 'binary_crossentropy',\n             optimizer= Adam(),\n             metrics= ['accuracy'])","e9cb0fee":"#model summary\nmodel.summary()","b2270279":"#lets train the model for 20 epochs\n\nhistory = model.fit_generator(train_generator,\n                             steps_per_epoch= 2000, \n                             epochs= 20, \n                             validation_data= test_generator,\n                             validation_steps= 64)","923fa0ba":"#convert the results to a data frame\nhist = pd.DataFrame(history.history)\nhist['epoch'] = history.epoch\nhist","ad21b139":"#plotting the results to see difference between train and validation accuracy\/loss\n\nplt.figure(figsize = (8,6))\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.plot(hist['epoch'],hist['val_acc'], label = 'Val Accuracy')\nplt.plot(hist['epoch'],hist['acc'], label = 'Train Accuracy')\nplt.xticks(range(0,20))\nplt.legend(loc = 'lower right')\nplt.title('Accuracy')\nplt.show()\n\nplt.figure(figsize = (8,6))\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.plot(hist['epoch'],hist['val_loss'], label = 'Val Loss')\nplt.plot(hist['epoch'],hist['loss'], label = 'Train Loss')\nplt.xticks(range(0,20))\nplt.legend()\nplt.title('Loss')\nplt.show()","2577fbcf":"#getting the test set ready to make predictions\n\nids = []\nX_test = []\n\nfor image in os.listdir(test_directory):\n    \n    ids.append(image.split('.')[0])\n    path = os.path.join(test_directory, image)\n    X_test.append(cv2.imread(path))\n    \nX_test = np.array(X_test)\nX_test = X_test.astype('float32')\/ 255","6b599a75":"#making the predictions\npredictions = model.predict(X_test)","b4cc3a33":"#writing to submission file\n\nmy_sub = pd.read_csv('..\/input\/sample_submission.csv')\nmy_sub['id'] = ids\nmy_sub['has_cactus'] = predictions","91e7e569":"#convert the probability to 0s and ones. \ndef cvt_prob(x):\n    \n    if x >= 0.5:\n        return 1\n    else:\n        return 0\n    \nmy_sub['has_cactus'] = my_sub['has_cactus'].apply(cvt_prob)    ","9b0bce16":"#see the count of 0s and 1s \nplt.figure(figsize = (8,6))\nsns.set_style('dark')\nsns.countplot(my_sub['has_cactus'])\nplt.show()","109aca29":"#write to submission file\nmy_sub.to_csv('my_sub1.csv',index= False)","6ef98c69":"As we can see that after epoch#4 the model starts to overfit. So we may have stopped the training at epoch 4. ","927a0897":"This is a pretty decent model with good accuracy. In colclusion we can say that;\n\n**Scaling** is necessary to bring all of your features on to a similar scale so that your model should give equal attention to all the features. \nAdding more layers to build a complex model could give good accuracy on training data as model would try to memorize the training data and will not give desired performance on test data **(overfitting)**. \nTrain for **less epochs** as more epochs will result in **overfitting**. \nAlso use the Dropout to prevent **overfitting**. \n\n","443539b0":"So now we have 14k images for training set and 3.5k images for validation set.","f03457e7":"## Plot the Training and Validation Accuracy\/Loss\n\nSee how model tries to overfit after certain epochs. ","344a1a8d":"## Creating the model\n\nWe will build our CNN model and will use a drop out of 30 % to prevent overfitting. ","0765fd73":"These are 32 by 32 pixel images (so quite low resolution). Number 3 indicates that these are color images, 1 would denote greyscale image.","3e9e0e40":"In this kaggle challenge we have to identify if an image contains cactus or not. We will use open cv, CNN, keras to build our model and then train the model on training images.\nFinally we will make predictions using the model on test images.","c9da7aaf":"So we can see that most of the images in training set have cactus in them. ","d4c020f5":"So as we had more images in training set with cactus in them so is the case with test set as well.","08e1f7b5":"## Data Augmentation\n\nPerforming Data Augmentation will be done by keras ImageDataGenerator, This is a form of regularization and our model will generalize better.\nWe will rescale so that all values range between 0 and 1. Setting aside 20% data for validation set. Shear range will displace each point in fixed direction. Horizontal flip will randomly flip the image in horizontal direction. ","37a38c26":"The images are low resolution, normally with human eye we will not be able to tell if there is a cactus or not in the image. But let's trust the judement of neural nets to perform this task for us. :-)","f78b61d2":"# Aerial Cactus Challenge","7692af79":"## Lets make the predictions","d980681a":"## Train the Model\nlets do it for 20 epochs for demo. Although this could result in overfitting :-)"}}