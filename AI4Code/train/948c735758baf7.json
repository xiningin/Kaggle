{"cell_type":{"4adc14f2":"code","9ff8f2d4":"code","8139cfdd":"code","77f0aad4":"code","4ca614a4":"code","4c7ce2b0":"code","0d33f847":"code","8ad4dfd1":"code","12486dd5":"code","36ff4978":"code","0d79deb5":"code","82e19bde":"code","4e28e60b":"code","43863a4d":"code","96224672":"code","99d2984b":"code","8ac6c1ac":"code","3af1c3cc":"code","458299fa":"code","a7dbb183":"code","ac06c6e8":"code","6aca3350":"code","71d360df":"code","a3fa714f":"code","8f5e4d94":"code","4e456fb6":"code","7cf4f126":"code","0a8400a0":"code","9fdf6009":"code","780205a2":"markdown","8a1f209f":"markdown","98e02c43":"markdown","c7eb9340":"markdown","9ec3e916":"markdown","174d891a":"markdown","ad630424":"markdown","efd02c91":"markdown","e5985cad":"markdown","1336a3b9":"markdown","911363c0":"markdown","260b49ca":"markdown","c52e75ce":"markdown"},"source":{"4adc14f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nmpl.style.use('seaborn-darkgrid')\nfrom scipy import stats\nfrom scipy.stats import norm, skew\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ff8f2d4":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","8139cfdd":"print(train.shape)\nprint(test.shape)","77f0aad4":"features = ['LotArea', 'LotFrontage', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd','SalePrice']\ntrain_data = train[features]","4ca614a4":"missing_data_train = train_data.isnull()\n\n\nfor column in missing_data_train.columns:\n    print(column)\n    print(missing_data_train[column].value_counts())\n    print(\"\")","4c7ce2b0":"train_data.dropna(subset=['LotFrontage'], axis=0, inplace=True)\ntrain_data.reset_index(drop=True,inplace=True)","0d33f847":"missing_data_train = train_data.isnull()\n\nfor column in missing_data_train.columns:\n    print(column)\n    print(missing_data_train[column].value_counts())\n    print(\"\")","8ad4dfd1":"train_data.info()","12486dd5":"train_data.head()","36ff4978":"train_data.describe()","0d79deb5":"train_data.corr()","82e19bde":"corr_train = train_data.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corr_train, vmax=0.9, square=True, center = 0, cmap = 'viridis')","4e28e60b":"sns.regplot(x='LotArea',y='SalePrice',data=train_data)","43863a4d":"train_data[['LotArea','SalePrice']].corr()","96224672":"sns.regplot(x='LotFrontage',y='SalePrice',data=train_data)","99d2984b":"train_data[['LotFrontage','SalePrice']].corr()","8ac6c1ac":"sns.regplot(x='YearBuilt',y='SalePrice',data=train_data)","3af1c3cc":"train_data[['YearBuilt','SalePrice']].corr()","458299fa":"sns.regplot(x='1stFlrSF',y='SalePrice',data=train_data)","a7dbb183":"train_data[['1stFlrSF','SalePrice']].corr()","ac06c6e8":"sns.regplot(x='2ndFlrSF',y='SalePrice',data=train_data)","6aca3350":"train_data[['2ndFlrSF','SalePrice']].corr()","71d360df":"sns.regplot(x='FullBath',y='SalePrice',data=train_data)","a3fa714f":"train_data[['FullBath','SalePrice']].corr()","8f5e4d94":"sns.regplot(x='BedroomAbvGr',y='SalePrice',data=train_data)","4e456fb6":"train_data[['BedroomAbvGr','SalePrice']].corr()","7cf4f126":"sns.regplot(x='TotRmsAbvGrd',y='SalePrice',data=train_data)","0a8400a0":"train_data[['TotRmsAbvGrd','SalePrice']].corr()","9fdf6009":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nX = train_data[features]\ny = train_data.SalePrice\n#split the data\ntrain_X, test_X, train_y, test_y =train_test_split(X, y,random_state=1)\n\n#Decision Tree Regressor\ndtr_model = DecisionTreeRegressor()\ndtr_model.fit(train_X, train_y)\nval_predictions = dtr_model.predict(test_X)\nval_mae = mean_absolute_error(val_predictions, test_y)\nprint(\"Validation MAE for Decision tree model: {:,.0f}\".format(val_mae))\n\n#Decision Tree Regressor Max Leaf\ndtr_model_1 = DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)\ndtr_model_1.fit(train_X, train_y)\nval_predictions = dtr_model_1.predict(test_X)\nval_mae = mean_absolute_error(val_predictions, test_y)\nprint(\"Validation MAE for best value of max_leaf_nodes: {:,.0f}\".format(val_mae))\n\n#Random Forest Regressor\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(test_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, test_y)\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))","780205a2":"<h2>Start to Define Model<\/h2>","8a1f209f":"<h2>Import the Data<\/h2>","98e02c43":"  **The regression line is close to horizontal. Also, the data points are very scattered and far from the fitted line, showing lots of variability. Therefore it's it is not a reliable variable.**\n    \n*   LotArea\n*   LotFontage\n*   2ndFlrSF\n*   BedroomAbvGr\n\n**There are low corrilation values in sale price and does not seem like a good predictor of the Sales price**\n  ","c7eb9340":"<br>\n<br>\n<h3>LotArea<\/h3>","9ec3e916":"<h2>Find the missing data for each columns<\/h2>","174d891a":"<h3>1stFlrSF<\/h3>","ad630424":"<h2>Correlation between Each columns<\/h2>","efd02c91":"<h3>YearBuilt<\/h3>","e5985cad":"<h3>LotFrontage<\/h3>","1336a3b9":"<h3>FullBath<\/h3>","911363c0":"<h3>TotRmsAbvGrd<\/h3>","260b49ca":"<h3>BedroomAbvGr<\/h3>","c52e75ce":"<h3>2ndFlrSF<\/h3>"}}