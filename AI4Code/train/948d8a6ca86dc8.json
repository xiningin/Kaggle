{"cell_type":{"aa0d3e73":"code","271b29cf":"code","a1e0de9e":"code","fb5641f0":"code","a11bfae5":"code","09c00259":"code","6ac7a1e4":"code","96c80895":"code","7213ccad":"code","1687ea9c":"code","d06b56b2":"code","d8e373e9":"code","df470fba":"code","7350b21f":"code","4fad1937":"code","b0d88167":"code","a80a5683":"code","6bf86def":"code","3b06d57e":"code","ab2f5c3b":"code","40326230":"code","6891cd32":"code","0b10fb08":"code","03541e6f":"code","0de48f65":"code","56ab281d":"code","49c14c16":"code","029262d5":"code","21d9255b":"code","42d37310":"code","69d88d34":"code","4e030ee1":"code","43214037":"code","0b9e839d":"code","0461a205":"code","0c6f9c46":"code","23589497":"code","6e6253c4":"code","82363a3e":"code","d4822851":"code","cad67006":"markdown","49d3110f":"markdown","2bc43121":"markdown","22db9230":"markdown","ff1a6a21":"markdown","e319539c":"markdown","7a24f688":"markdown","c275fd2a":"markdown","b627503d":"markdown","742a7a83":"markdown","9946a7b8":"markdown","e4170554":"markdown","cf9e3f02":"markdown","58a4d10b":"markdown"},"source":{"aa0d3e73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport matplotlib                  # 2D Plotting Library\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns              # Python Data Visualization Library based on matplotlib\nimport geopandas as gpd            # Python Geospatial Data Library\nplt.style.use('fivethirtyeight')\n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.figure_factory as ff\nfrom plotly import subplots\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\n\n\nfrom textblob import TextBlob\nfrom textblob.sentiments import NaiveBayesAnalyzer\n\nfrom wordcloud import WordCloud\nfrom collections import Counter\n\n\nimport folium\nimport folium.plugins\n\nimport matplotlib.dates as mdates\nimport plotly.express as px\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\nfrom fbprophet.plot import plot_plotly\nfrom fbprophet import Prophet\nfrom fbprophet.plot import add_changepoints_to_plot\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl\nimport plotly.offline as py\ninit_notebook_mode(connected=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","271b29cf":"# df1 = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\ndf = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\n\n\nconf_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\n","a1e0de9e":"df.head().style.background_gradient(cmap='RdGy')","fb5641f0":"conf_df.head().style.background_gradient(cmap='RdGy')","a11bfae5":"conf_df = conf_df.rename(columns={\"Province\/State\": \"province\", \"Country\/Region\": \"country\"})","09c00259":"df = df.rename(columns={\"Province\/State\": \"province\", \"Country\/Region\": \"country\",\"Last Update\":\"Last_Update\"})","6ac7a1e4":"print(df.columns.values)","96c80895":"df.info()","7213ccad":"conf_df.info()","1687ea9c":"del df['SNo']","d06b56b2":"df.describe().style.background_gradient(cmap='BrBG')","d8e373e9":"df.describe(include=['O'])","df470fba":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.heatmap(df.corr(),annot=True,cmap='cubehelix',linewidths=1,linecolor='k',square=True,mask=False, vmin=-1, vmax=1,cbar_kws={\"orientation\": \"vertical\"},cbar=True)\n","7350b21f":"df.describe().plot(kind = \"area\",fontsize=27, figsize = (20,8), table = True,colormap=\"rainbow\")\nplt.xlabel('Statistics',)\nplt.ylabel('Value')\nplt.title(\"General Statistics of Corona Virus Dataset\")","4fad1937":"fig=sns.jointplot(x='Confirmed',y='Recovered',data=df,kind='reg')","b0d88167":"import seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\n\ng = sns.pairplot(df)","a80a5683":"# df['Date'] = pd.to_datetime(df['Date'])\ndf['Last_Update'] = pd.to_datetime(df['Last_Update'])","6bf86def":"df['Day'] = df['Last_Update'].dt.day\ndf['Month'] = df['Last_Update'].dt.month\ndf['Week'] = df['Last_Update'].dt.week\ndf['WeekDay'] = df['Last_Update'].dt.weekday","3b06d57e":"# Layout Customization\ndisplayed_cols = ['Confirmed','Deaths','Recovered']\ndef fig_plot():\n    fig = plt.figure(constrained_layout=True, figsize=(45,18))\n    fig.suptitle('bold figure suptitle', fontsize=14, fontweight='bold')\n\n    grid = gridspec.GridSpec(ncols=4, nrows=2, figure=fig)\n\n    ax1 = fig.add_subplot(grid[0, :2])\n    ax1.set_title('Daily Reports',fontsize='large', fontweight='bold')\n    df.groupby(['Last_Update']).sum()[displayed_cols].plot(ax=ax1,linewidth=7.0)\n\n    \nfig_plot()\n","ab2f5c3b":"# Layout Customization\ndisplayed_cols = ['Confirmed','Deaths','Recovered']\ndef fig_plot():\n    fig = plt.figure(constrained_layout=True, figsize=(18,9))\n    grid = gridspec.GridSpec(ncols=4, nrows=2, figure=fig)\n\n    ax1 = fig.add_subplot(grid[0, :2])\n    ax1.set_title('Weekly Reports', fontsize='large', fontweight='bold')\n    weekdays = df.groupby('Week').nth(-1)['Last_Update']\n    df[df['Last_Update'].isin(weekdays)].groupby('Last_Update')[displayed_cols].sum().plot(kind='density',ax=ax1,linewidth=7.0)\n\n    \nfig_plot()\n","40326230":"# f,ax=plt.subplots(1,2,figsize=(28,8))\n# df['Country'].value_counts().plot.pie(ax=ax[0],shadow=True)\n# ax[0].set_title('Share of Countries')\n# ax[0].set_ylabel('Count')\n# sns.countplot('Country',data=df,ax=ax[1],order=df['Country'].value_counts().index)\n# ax[1].set_title('Count of Country')\n# plt.show()\n\ndf_countries = pd.DataFrame(df.country.value_counts().reset_index().values, columns=[\"country\", \"count\"])\ndf_countries.head()","6891cd32":"import plotly.graph_objects as go\n\nfig = go.Figure(go.Bar(\n            x=df_countries['count'].tolist(),\n            y=df_countries['country'].tolist(),\n            orientation='h'))\n\nfig.show()","0b10fb08":"date = pd.DataFrame(df.Last_Update.value_counts().reset_index().values, columns=[\"Date\", \"Death\"])\ndate.head()","03541e6f":"import plotly.express as px\n# df = date\nfig.update_layout(template='plotly_dark')\nfig = px.scatter(date, x=\"Date\", y=\"Death\")\n\n# If you print fig, you'll see that it's just a regular figure with data and layout\n# print(fig)\n\nfig.show()","0de48f65":"import plotly.express as px\nfig.update_layout(template='plotly_dark')\n# df = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\nfig = px.bar(df, y='Recovered', x='ObservationDate', text='Confirmed')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show()","56ab281d":"import plotly.express as px\nimport plotly.express as px\n# df = px.data.gapminder().query(\"country=='Brazil'\")\nfig = px.line_3d(df, x=\"Confirmed\", y=\"Deaths\", z=\"Recovered\",color = \"country\")\nfig.show()","49c14c16":" conf_df[\"Lat\"].mean()\n  ","029262d5":"conf_df[\"Long\"].mean()  ","21d9255b":"import folium\nfrom folium.plugins import HeatMap\nm=folium.Map([37,110],zoom_start=11)\nHeatMap(conf_df[['Lat','Long']].dropna(),radius=18,gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(m)\ndisplay(m)","42d37310":"# from mpl_toolkits.basemap import Basemap\n# plt.figure(figsize=(8, 8))\n# m = Basemap(projection='ortho', resolution=None, lat_0=30, lon_0=100)\n# m.bluemarble(scale=0.5);","69d88d34":" conf_df_ = conf_df[conf_df['province'].notna()]","4e030ee1":"import plotly.express as px\n\nfig = px.scatter_mapbox(conf_df_, lat=\"Lat\", lon=\"Long\", hover_name=\"province\", hover_data=[\"country\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=3, height=400)\nfig.update_layout(\n    mapbox_style=\"white-bg\",\n    mapbox_layers=[\n        {\n            \"below\": 'traces',\n            \"sourcetype\": \"raster\",\n            \"source\": [\n                \"https:\/\/basemap.nationalmap.gov\/arcgis\/rest\/services\/USGSImageryOnly\/MapServer\/tile\/{z}\/{y}\/{x}\"\n            ]\n        }\n      ])\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","43214037":"recent_date = df['Last_Update'].iloc[-1]\nlast_updated = df[df['Last_Update'].dt.date == recent_date]\n","0b9e839d":"plt.figure(figsize=(15,6))\nplt.title('Number of Province\/State were affected in Each Country')\nplt.xticks(rotation=90)\nprv_lst = df.groupby(['country'])['province'].nunique().sort_values(ascending=False).head()\nprv_lst.plot(kind='bar')\nplt.tight_layout()","0461a205":"df_tweets = pd.read_csv(\"\/kaggle\/input\/covidtweets\/nCoV_tweets.csv\", index_col=0)\ndf_tweets.rename(columns={'txt': 'tweets',\n                         'dt':'date'}, inplace=True)\n\nimport re\ndef tweet_parser(text, pattern_regex):\n    \n    for pr in pattern_regex:\n        text = re.sub(pr, ' ', text)\n        \n    return text.strip()\n\npattern_regex = ['\\n', '\\t', ':', ',', ';', '\\.', '\"', \"''\", \n                 '@.*?\\s+', 'RT.*?\\s+', 'http.*?\\s+', 'https.*?\\s+']\n\ndf_tweets['tidy_tweets'] = df_tweets.apply(lambda r: tweet_parser(r['tweets'], pattern_regex), axis=1)\ndf_tweets['date'] = pd.to_datetime(df_tweets['date']).dt.date\n\ndf_tweets.head().style.background_gradient(cmap='RdGy')","0c6f9c46":"df_tweets['sentiment'] = df_tweets.apply(lambda r: TextBlob(r['tidy_tweets']).sentiment.polarity, axis=1)\ndf_tweets['sent_adj'] = np.where(df_tweets['sentiment']<0, 'Negative', np.where(df_tweets['sentiment']>0, 'Positive', 'Neutral'))\ndf_tweets['sent_adj'] = df_tweets['sent_adj'].astype('category')\nsizes = df_tweets.groupby('sent_adj').size()\n\ndf_tweets.head().style.background_gradient(cmap='PuOr')","23589497":"fig = ff.create_distplot([df_tweets['sentiment']], group_labels = ['sentiment'], bin_size=[.05], colors=['indianred'])\nfig.update_layout(\n        title={'text': 'Sentiment Distribution',\n               'y':0.95, 'x':0.5,\n               'xanchor': 'center', 'yanchor': 'top'},\n        showlegend=False)\n\nfig.show()","6e6253c4":"\nfig = go.Figure()\nfig.add_trace(\n    go.Bar(x=sizes.index,\n           y=sizes.values,\n           opacity=0.9,\n           text = sizes.values,\n           textposition='outside',\n           marker={'color':'green'}\n                   ))\nfig.update_layout(\n      title={'text': 'Sentiment Adjusted Histogram',\n             'y':0.95, 'x':0.5,\n            'xanchor': 'center', 'yanchor': 'top'},\n       showlegend=False,\n       xaxis_title_text='Sentiment',\n        yaxis_title_text='Count',\n    bargap=0.3)\n\nfig.show()","82363a3e":"def render_wordcloud(df, sent='Positive'):\n    \n    color = {'Positive': 'Set2', 'Negative': 'RdGy', 'Neutral': 'Accent_r'}\n    \n    words = ' '.join([text for text in df.loc[df['sent_adj']==sent, 'tidy_tweets']])\n    \n    wordcloud = WordCloud(width=800, height=500, \n                          background_color='black',\n                          max_font_size=100, \n                          relative_scaling=0.1, \n                          colormap=color[sent]).generate(words)\n\n    plt.figure(figsize=(14, 10))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.title(sent + ' Wordcloud', fontsize=20)\n    plt.axis('off')\n    plt.show()\n    ","d4822851":"for s in ['Positive', 'Negative', 'Neutral']:\n    render_wordcloud(df_tweets, s)","cad67006":"**Observation:**\n\nMainland China accounts for the most of the cases i.e 1513 but significant number of cases were also observed for US*","49d3110f":"Count of Coronavirus cases detected in various countries","2bc43121":"Finding the correlation among columns","22db9230":"Counts of deaths due to Coronavirus datewise ","ff1a6a21":"**Observation:**\n*In US more than 175 Province were affected due to Covid-19.*","e319539c":"**Tweets data**","7a24f688":"![corona](https:\/\/www.inquirer.com\/resizer\/CiwgX_mknaEMHprl0soM8TCazo0=\/1400x932\/smart\/arc-anglerfish-arc2-prod-pmn.s3.amazonaws.com\/public\/PCDN4SDFNVHJRI4VRFRA43UPH4.jpg)","c275fd2a":"Using TextBlob library to infer tweet sentiments, and later categorize them into Negative, Neutral and Positive.","b627503d":"**To prevent Coronavirus from spreading follow the below:**\n\n* Avoid using towels\/soaps\/ clothes used by any other person.\n\n* Keep cleaning your hands with a sanitizer especially after travelling in public transport like trains\/ buses\/ the metro etc.\n\n* Keep yourself away from crowded areas.\n\n* Always insist on wearing a mask especially use them for children.\n\n* Drink only hot water\n\n* Keep your home, kitchen and bathroom dry. Viruses thrive in musty environments.\n\n* Have only fresh, hot, home cooked food.","742a7a83":"**Observation**\n\n*Daily Report shows that case count is increasing day by day which means that the calculation for today case count = today case count + previous days case count included. So we will take the last date as the updated case count.*","9946a7b8":"**Observation**\n\n*As we can clearly see with increase in date deaths due to COVID-19 are decreasing.*","e4170554":"![oronavirus](https:\/\/www.aljazeera.com\/mritems\/Images\/2020\/1\/24\/e26d3593e9844d4f82622b0dfcfb6db1_18.jpg)","cf9e3f02":"**Observation:**\n\n*The study also noted that people who are infected begin to develop antibodies to the virus quickly, typically within six to 12 days. The rapid rise of antibodies may explain why about 80% of people infected with the virus do not develop severe disease and recover from it.*","58a4d10b":"Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans.  \n\nCoronaviruses are zoonotic, meaning they are transmitted between animals and people.  Detailed investigations found that SARS-CoV was transmitted from civet cats to humans and MERS-CoV from dromedary camels to humans. Several known coronaviruses are circulating in animals that have not yet infected humans. \n\nCommon signs of infection include respiratory symptoms, fever, cough, shortness of breath and breathing difficulties. In more severe cases, infection can cause pneumonia, severe acute respiratory syndrome, kidney failure and even death. \n\nStandard recommendations to prevent infection spread include regular hand washing, covering mouth and nose when coughing and sneezing, thoroughly cooking meat and eggs. Avoid close contact with anyone showing symptoms of respiratory illness such as coughing and sneezing."}}