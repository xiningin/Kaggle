{"cell_type":{"709183fe":"code","0043709d":"code","ee1d1864":"code","29f2a1fd":"code","b0b3724b":"code","2deb8992":"code","03a9f694":"code","d3b8a989":"code","f39c1daa":"code","f2579f59":"markdown","02a7061f":"markdown","6a65c14c":"markdown","04e89895":"markdown","89f204c8":"markdown"},"source":{"709183fe":"from pathlib import Path\nimport numpy as np\nimport pandas as pd\nimport cv2\nimport matplotlib.pyplot as plt","0043709d":"perquet_path = \"\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet\"\ndf = pd.read_parquet(perquet_path)\nh = 137\nw = 236","ee1d1864":"def get_augmented_img(img, func):\n    output_img = np.zeros((h * 2, w), dtype=np.uint8)\n    output_img[:h] = img\n    output_img[h:] = func(img)\n    return output_img","29f2a1fd":"def show_augmented_img(f):\n    cols, rows = 5, 3\n    img_num = cols * rows\n    fig = plt.figure(figsize=(18,12))\n\n    for i in range(img_num):\n        img = get_augmented_img(data[i], f)\n        ax = fig.add_subplot(rows, cols, i + 1)\n        ax.imshow(img)\n        ax.set_axis_off()","b0b3724b":"sub_df = df.sample(n=15)\ndata = 255 - sub_df.iloc[:, 1:].values.reshape(-1, h, w).astype(np.uint8)","2deb8992":"def f(img):\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, tuple(np.random.randint(1, 6, 2)))\n    img = cv2.erode(img, kernel, iterations=1)\n    return img\n\nshow_augmented_img(f)","03a9f694":"def f(img):\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, tuple(np.random.randint(1, 6, 2)))\n    img = cv2.dilate(img, kernel, iterations=1)\n    return img\n\nshow_augmented_img(f)","d3b8a989":"def get_random_kernel():\n    structure = np.random.choice([cv2.MORPH_RECT, cv2.MORPH_ELLIPSE, cv2.MORPH_CROSS])\n    kernel = cv2.getStructuringElement(structure, tuple(np.random.randint(1, 6, 2)))\n    return kernel\n\ndef f(img):\n    img = cv2.erode(img, get_random_kernel(), iterations=1)\n    img = cv2.dilate(img, get_random_kernel(), iterations=1)\n    return img\n\nshow_augmented_img(f)","f39c1daa":"def get_random_kernel():\n    structure = np.random.choice([cv2.MORPH_RECT, cv2.MORPH_ELLIPSE, cv2.MORPH_CROSS])\n    kernel = cv2.getStructuringElement(structure, tuple(np.random.randint(1, 6, 2)))\n    return kernel\n\ndef f(img):\n    img = cv2.dilate(img, get_random_kernel(), iterations=1)\n    img = cv2.erode(img, get_random_kernel(), iterations=1)\n    return img\n\nshow_augmented_img(f)","f2579f59":"# Erosion","02a7061f":"# Morphological Transformations\nThis kernel shows some image augmentation using morphological transformations.\nhttps:\/\/opencv-python-tutroals.readthedocs.io\/en\/latest\/py_tutorials\/py_imgproc\/py_morphological_ops\/py_morphological_ops.html","6a65c14c":"# Opening\nOpening is performed by successively applying erosion and dilation. It can be used to remove noise. Here erosion and dilation with random kernel is used as image augmentation.","04e89895":"# Dilation","89f204c8":"# Closing\nClosing is performed by successively applying dilation and erosion. It can be used to 'close' small holes. Here dilation and erosion with random kernel is used as image augmentation."}}