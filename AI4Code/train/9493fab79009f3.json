{"cell_type":{"ddb5f72b":"code","05f81188":"code","1e665ad0":"code","255af1cb":"code","812a27a6":"code","628cae61":"code","7e86783a":"code","53df7d3f":"code","03092ae7":"code","a3715ee1":"code","70de4dc3":"code","95eb32a7":"code","e6aeaa77":"code","116008ac":"code","e4cd7983":"code","7dc1010a":"code","da14323e":"code","87ce9788":"code","93ed66ce":"code","d348ee42":"code","71811686":"code","a782f481":"code","839f3e51":"code","3a1a8741":"code","91b79749":"code","cfd6b08c":"code","1297419d":"code","59e066e5":"code","ec3f6d40":"code","7455210f":"code","e38f0846":"code","dad91125":"code","3cd2833c":"code","ecbbde2b":"code","c2dcd64c":"markdown","52b2d948":"markdown","cc3f325f":"markdown","133e2243":"markdown","40157c74":"markdown","834828b2":"markdown","14e1f95d":"markdown","f889662e":"markdown","6c6e397d":"markdown","54857753":"markdown","96bdb2ab":"markdown","cc5fe36e":"markdown","e8f10025":"markdown","17897685":"markdown","4af276d0":"markdown","ed5eb064":"markdown","a20293ca":"markdown","e0e99a4a":"markdown"},"source":{"ddb5f72b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\n\npd.options.display.max_colwidth = 200\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames[:5]:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05f81188":"df = pd.read_csv('\/kaggle\/input\/nlp-specialization-data\/Cleaned_POS_Medical_Notes.csv') #for excel file use read_excel\ndf","1e665ad0":"df['label'].value_counts(normalize=True)","255af1cb":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf_vector = TfidfVectorizer(lowercase=True, #this will convert all the tokens into lower case\n                         stop_words='english', #remove english stopwords from vocabulary. if we need the stopwords this value should be None\n                         analyzer='word', #tokens should be words. we can also use char for character tokens\n                         max_features=50000, #maximum vocabulary size to restrict too many features\n                         min_df = 5,\n                         max_df = .6\n                        )\n\ntfidf_vectorized_corpus = tfidf_vector.fit_transform(df.clean_text)","812a27a6":"tfidf_vectorized_corpus","628cae61":"print (tfidf_vectorized_corpus.shape)","7e86783a":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold","53df7d3f":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\ncv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=5,estimator=lg)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","03092ae7":"cv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=StratifiedKFold(5,random_state=42,shuffle=True),estimator=lg)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","a3715ee1":"nb = MultinomialNB()\ncv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=5,estimator=nb)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","70de4dc3":"cv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=StratifiedKFold(5,random_state=42,shuffle=True),estimator=nb)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","95eb32a7":"model = RandomForestClassifier(n_estimators=101, random_state=42) #n_estimator is the parameter to control number of decision tress\ncv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=5,estimator=model)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","e6aeaa77":"cv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=StratifiedKFold(5,random_state=42,shuffle=True),estimator=model)\nprint (cv_scores, np.mean(cv_scores),np.std(cv_scores))","116008ac":"for train_idx, val_idx in StratifiedKFold(n_splits=5,random_state=42,shuffle=True).split(tfidf_vectorized_corpus,df.label.values):\n    break","e4cd7983":"trainX = tfidf_vectorized_corpus[train_idx]\nvalX = tfidf_vectorized_corpus[val_idx]\ntrainy = df.label.values[train_idx]\nvaly = df.label.values[val_idx]\n\nprint (trainX.shape, valX.shape)","7dc1010a":"from sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report","da14323e":"lg = LogisticRegression(multi_class='auto',solver='lbfgs')\nlg.fit(trainX,trainy)\n\nval_train= lg.predict(trainX)\nval_pred = lg.predict(valX)","87ce9788":"print (\"Accuracy score: {}\".format(accuracy_score(trainy,val_train)))\nprint (\"F1 score: {}\".format(f1_score(trainy,val_train,average='macro')))","93ed66ce":"print (\"Accuracy score: {}\".format(accuracy_score(valy,val_pred)))\nprint (\"F1 score: {}\".format(f1_score(valy,val_pred,average='macro')))","d348ee42":"def plot_cm(y_true, y_pred, labels, title):\n    figsize=(14,10)\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(labels))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    plt.title(title)\n    sns.heatmap(cm, cmap='viridis', annot=annot, fmt='', ax=ax)","71811686":"import matplotlib.pyplot as plt\nimport seaborn as sns","a782f481":"#print (confusion_matrix(valy, val_pred,labels=model.classes_))\nlabels = lg.classes_\nplot_cm(valy,val_pred,labels,'Confusion matrix: F1 {}'.format(f1_score(valy,val_pred,average='macro')))","839f3e51":"import eli5","3a1a8741":"eli5.show_weights(lg, vec=tfidf_vector, top=25)","91b79749":"df.iloc[val_idx[:3]]['label']","cfd6b08c":"df.clean_text.values[val_idx[0]]","1297419d":"eli5.show_prediction(lg, doc=df.clean_text.values[val_idx[0]], vec=tfidf_vector, top=10)","59e066e5":"eli5.show_prediction(lg, doc=df.clean_text.values[val_idx[1]], vec=tfidf_vector, top=10)","ec3f6d40":"eli5.show_prediction(lg, doc=df.clean_text.values[val_idx[2]], vec=tfidf_vector, top=10)","7455210f":"from hyperopt import hp\nfrom hyperopt import fmin, tpe, space_eval, Trials","e38f0846":"def rf_cv(params, random_state=42, cv=5, X=tfidf_vectorized_corpus, y=df.label.values):\n    # the function gets a set of variable parameters in \"param\"\n    params = {'n_estimators': int(params['n_estimators']), \n              'max_depth': int(params['max_depth'])}\n    \n    # we use this params to create a new LGBM Regressor\n    model = RandomForestClassifier(random_state=random_state, **params)\n    \n    # and then conduct the cross validation with the same folds as before\n    score = -cross_val_score(model, X, y, cv=cv, scoring=\"f1_macro\", n_jobs=-1).mean()\n\n    return score\n\n\nspace = {'n_estimators': hp.quniform('n_estimators', 100, 1000, 50),\n       'max_depth' : hp.quniform('max_depth', 2, 20, 1)\n      }\n\n# trials will contain logging information\ntrials = Trials()\n\nbest = fmin(fn=rf_cv, # function to optimize\n          space=space, \n          algo=tpe.suggest, # optimization algorithm, hyperotp will select its parameters automatically\n          max_evals=10, # maximum number of iterations\n          trials=trials, # logging\n          rstate=np.random.RandomState(42) # fixing random state for the reproducibility\n         )","dad91125":"print(\"Best F1 {:.3f} params {}\".format(-rf_cv(best), best))","3cd2833c":"from sklearn.ensemble import VotingClassifier","ecbbde2b":"voting_classifier = VotingClassifier(estimators=[('rf',RandomForestClassifier(n_estimators=500,max_depth=19,random_state=42)),\n                                     ('nb', MultinomialNB()),\n                                     ('lg', LogisticRegression(multi_class='auto',solver='lbfgs'))], voting='hard')\n\ncv_scores = cross_val_score(X=tfidf_vectorized_corpus,y=df.label,cv=StratifiedKFold(5,random_state=42),estimator=voting_classifier,scoring='f1_macro')\nprint (cv_scores, np.mean(cv_scores))","c2dcd64c":"First let us see the top words corresponding to each speciality and whether they make any sense","52b2d948":"### References\n\n1. https:\/\/towardsdatascience.com\/interpreting-your-deep-learning-model-by-shap-e69be2b47893\n\n2. https:\/\/towardsdatascience.com\/understanding-model-predictions-with-lime-a582fdff3a3b","cc3f325f":"From the above confusion matrix we can clearly see where our model performed good and where it requires improvment.","133e2243":"## Text classification using Machine Learning\n\nIn this notebook we learn how to classify texts using machine learning.\n\n### Table of Contents\n\n* Classification using few ML techniques\n    * Logistic Regression\n    * Naive Bayes\n    * Random Forest\n* Cross Validation, Model evaluation\n* Model interpretation using ELI5\n* Hyperparameter tuning\n* Ensemble","40157c74":"We have total 818 texts (data points) and 3842 features (words) for the model. We will use Simple Logistic Regression, Naive Bayes and random forest classifier for our modelling. \n\n#### Logistic Regression\n\nLogistic regression assumes a linear relationship among the features and predicts log-odd $\\log{\\frac{p}{(1-p)}}$ of $Y=1$.\n\n#### Naive Bayes\n\nIn machine learning, na\u00efve Bayes classifiers are a family of simple \"probabilistic classifiers\" based on applying Bayes' theorem with strong (na\u00efve) independence assumptions between the features.\n\n<img src=https:\/\/uc-r.github.io\/public\/images\/analytics\/naive_bayes\/naive_bayes_icon.png>\n\n#### Random Forest\n\nRandom forests are a collection of simple decision trees. Decision tree is a modelling technique that uses logical cummulation of decision rules to predict target from a set of features.\n\n<img src=https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/f3\/CART_tree_titanic_survivors.png>\n\nRandom forests are based on ensemble methods, which uses averaging of multiple such decision trees. Each decision tree learns different types of decision rules. Individual decision trees are prone to overfitting. To reduce the variance, we use averaging of decision trees which lead to more robust model.","834828b2":"### Practical Tips\n\n* Always use cross validation to check model performance. Understand the data to use - KFold or, StratifiedKFold, GroupKFold\n* Start with simple model and gradually use more complex model\n* For production, use scikit-learn's pipeline for E2E feature learning and modelling.\n* Use joblib to persist model after training so that it can be called directly during inference\n* Fix random seeds to avoid any randomization","14e1f95d":"RF achieves 69% macro F1 score on cross validation, much worse than Naive Bayes and Logistic Regression. Now let us use Logistic regrssion on a particular fold and interpret the results.","f889662e":"Naive Bayes performs same on stratified KFold, which shows the robustness of the model. Logistic regression performs pretty much similar to Naive Bayes.","6c6e397d":"NB and Logistic regression both achieve ~75% accuracy on cross validation dataset. As our dataset is not balanced, stratified sampling is better than random kfold. Similarly, f1 metric is better evaluation metric.","54857753":"### Ensemble\n\nEnsemble is very useful technique to increase model's performance and reduce overfitting. By combining multiple models, we can make our prediction more robust, reduce overfitting and increase overall performance. We use max voting of multiple classifiers.","96bdb2ab":"As discussed in the previous session, we need numeric values to use in the models. We use Tfidf representation of texts.","cc5fe36e":"Now let us use a simple RF classifier and see how does it perform on 5 fold cross validation.","e8f10025":"### Hyperparameter tuning\n\nEvery model has a set of hyper parameters. By tuning different hyperparameters, we can increase model's performance. In this notebook, we tune different hyper parameters of random forest classifier.\n\n* max_depth - maximum depth of each tree\n* n_estimators - number of trees\n\nGridsearch or, randomsearch are used to tune hyperparameters and check oof (out of fold) score. In this notebook, we use hyperopt, a technique that use Bayesian Optimization to search for better hyperparameter.","17897685":"Let us first check the distribution of the outputs.","4af276d0":"## Model interpretation\n\nFor interpretability, we must need to understand how our model has learned the task. We will use Eli5. It uses LIME (Local Interpretable Model-agnostic Explanation) technique. Similarly, another popular technique to explain ML models is SHAP (Shapley Additive Explanations).","ed5eb064":"For evaluation, we use cross validation. i.e. train on a part of data and testing on the remaining. We will use 5-fold cross validation. \n\n<img src=https:\/\/miro.medium.com\/max\/1710\/1*rgba1BIOUys7wQcXcL4U5A.png width=\"500\">","a20293ca":"In the above visualization we see that different words have different importance for different specialities. Now let us explain few test predictions. Eli5 highlights top positive words in yellow and top negative words in red.","e0e99a4a":"This clearly shows the inside of our model. As we observed that our model performed poorly particularly for \"neurology\" and \"radiology\", we need to make our model robust on those classes. There are lots of different ways to increase model's performance. Here we discuss briefly about hyperparameter tuning and ensemble methods and how they can lead to better result."}}