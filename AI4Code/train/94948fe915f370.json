{"cell_type":{"af5cabfc":"code","06b3f2ee":"code","a9aead83":"code","70efc3bf":"code","0e0ff0b6":"code","6265786c":"code","2375e099":"code","5239b401":"code","3bd0a612":"code","fc2d3c12":"code","277f4da8":"code","a2c7d3b0":"code","e003c8c4":"code","714ce3d3":"code","bd3cd1aa":"code","d7ee3adf":"code","3ac0e615":"code","17713df3":"code","58bfd13d":"code","350045d5":"code","1a8b1203":"code","10851b2b":"code","990da85a":"code","6498faff":"code","ff8560d8":"code","5b95d6ce":"code","a3c6fc47":"code","8c066090":"code","4273ab10":"code","fe012464":"code","1c9c64b2":"code","3a282cd0":"markdown","ab9547fc":"markdown","9999e307":"markdown","1641c4aa":"markdown","543077cc":"markdown","94fcf812":"markdown","ee3d5f25":"markdown","24bdc862":"markdown","28bb7101":"markdown","3e0a9f44":"markdown","19c9f1da":"markdown","ecdffa22":"markdown"},"source":{"af5cabfc":"!pip install -q efficientnet","06b3f2ee":"import math, re, os\nimport tensorflow as tf\nfrom tensorflow.keras import layers \nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom kaggle_datasets import KaggleDatasets\nimport efficientnet.tfkeras as efn\nfrom tensorflow.keras.applications import DenseNet201\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\n\nprint(\"Tensorflow version \" + tf.__version__)","a9aead83":"os.listdir(\"\/kaggle\/input\/pneumonia-tfrecord\/\")","70efc3bf":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","0e0ff0b6":"AUTO = tf.data.experimental.AUTOTUNE\n\n# Create strategy from tpu\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\nstrategy = tf.distribute.experimental.TPUStrategy(tpu)\n\n# Data access\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(\"pneumonia-tfrecord\")\n\n# Configuration\nIMAGE_SIZE = [512, 512]##### remember: 512 x 512\nEPOCHS = 20\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync ### 32x8=128","6265786c":"GCS_PATH = GCS_DS_PATH + '\/pneumonia_tfrecord'\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/train\/*.tfrecord')\nVALIDATION_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/valid\/*.tfrecord')\nTEST_FILENAMES = tf.io.gfile.glob(GCS_PATH + '\/test\/*.tfrecord') ","2375e099":"print(TRAINING_FILENAMES)\nprint(VALIDATION_FILENAMES)\nprint(TEST_FILENAMES)","5239b401":"CLASSES=[\"class0\",\"class1\",\"class2\"]","3bd0a612":"def display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid'])","fc2d3c12":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.image.resize(image, [*IMAGE_SIZE]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image_raw\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"label\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image_raw'])\n    label = tf.cast(example['label'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image_raw\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"ID\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image_raw'])\n    idnum = example['ID']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label, seed=2020):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image, seed=seed)\n#     image = tf.image.random_flip_up_down(image, seed=seed)\n#     image = tf.image.random_brightness(image, 0.1, seed=seed)\n    \n#     image = tf.image.random_jpeg_quality(image, 85, 100, seed=seed)\n#     image = tf.image.resize(image, [530, 530])\n#     image = tf.image.random_crop(image, [512, 512], seed=seed)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(VALIDATION_FILENAMES, labeled=True, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_train_valid_datasets():\n    dataset = load_dataset(TRAINING_FILENAMES + VALIDATION_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\n# def count_data_items(filenames):\n#     # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n#     n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n#     return np.sum(n)","277f4da8":"# data dump\nprint(\"Training data shapes:\")\nfor image, label in get_training_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())\nprint(\"Validation data shapes:\")\nfor image, label in get_validation_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Validation data label examples:\", label.numpy())\n","a2c7d3b0":"print(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U')) # U=unicode string","e003c8c4":"# NUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\n# NUM_VALIDATION_IMAGES = count_data_items(VALIDATION_FILENAMES)\n# NUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\n# STEPS_PER_EPOCH = (NUM_TRAINING_IMAGES + NUM_VALIDATION_IMAGES) \/\/ BATCH_SIZE\n# print('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES+NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","714ce3d3":"### hhhh set in person ###\n#NUM_TRAINING_IMAGES = 5524\nNUM_TRAINING_IMAGES = 18011\n#NUM_VALIDATION_IMAGES = 616\nNUM_VALIDATION_IMAGES = 2002\n#NUM_TEST_IMAGES = 856\nNUM_TEST_IMAGES = 6671\nTOTAL_STEPS_PER_EPOCH = (NUM_TRAINING_IMAGES + NUM_VALIDATION_IMAGES) \/\/ BATCH_SIZE\nPART_STEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES+NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","bd3cd1aa":"def lrfn(epoch):\n    LR_START = 0.00001\n    LR_MAX = 0.00005 * strategy.num_replicas_in_sync\n    LR_MIN = 0.00001\n    LR_RAMPUP_EPOCHS = 5\n    LR_SUSTAIN_EPOCHS = 0\n    LR_EXP_DECAY = .75\n    \n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n\nrng = [i for i in range(EPOCHS)]\ny = [lrfn(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","d7ee3adf":"def freeze(model):\n    for layer in model.layers:\n        layer.trainable = False\n\ndef unfreeze(model):\n    for layer in model.layers:\n        layer.trainable = True","3ac0e615":"with strategy.scope():\n    efficient_net = efn.EfficientNetB7(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n    \n    inp = layers.Input(shape=(512, 512, 3))\n    x = efficient_net(inp)\n    gap = layers.GlobalAveragePooling2D(name='GlobalAvgPool')(x)\n    gap = layers.Dense(len(CLASSES), activation='linear')(gap)\n    \n    gmp = layers.GlobalMaxPooling2D(name='GlobalMaxPool')(x)\n    gmp = layers.Dense(len(CLASSES), activation='linear')(gmp)\n    \n    out = layers.add([gap, gmp])\n    out = layers.Activation('softmax')(out)\n    \n    model = tf.keras.Model(inputs=inp, outputs=out)\n        \n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(),\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n    model.summary()","17713df3":"# scheduler = tf.keras.callbacks.ReduceLROnPlateau(patience=3, verbose=1)\nlr_schedule = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=1)\n#\u3000mcp = tf.keras.callbacks.ModelCheckpoint(filepath='pneumonia_tpu_model_best.hdf5',\n#                      monitor=\"val_sparse_categorical_accuracy\", save_best_only=True, save_weights_only=False)\n","58bfd13d":"# history = model.fit(\n#     get_train_valid_datasets(), \n#     steps_per_epoch=STEPS_PER_EPOCH,\n#     epochs=EPOCHS, \n#     callbacks=[lr_schedule]\n# )\n# history = model.fit(\n#     get_training_dataset(), \n#     steps_per_epoch=PART_STEPS_PER_EPOCH,\n#     epochs=EPOCHS, \n#     validation_data=get_validation_dataset(),\n#     callbacks=[lr_schedule,mcp]\n# )\n#################### callbacks:chkpt improvement","350045d5":"history = model.fit(\n    get_train_valid_datasets(), \n    steps_per_epoch=TOTAL_STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_schedule]\n)","1a8b1203":"# display_training_curves(history.history['loss'], history.history['val_loss'], 'loss', 211)\n# display_training_curves(history.history['sparse_categorical_accuracy'], history.history['val_sparse_categorical_accuracy'], 'accuracy', 212)","10851b2b":"# model.load_weights(\"food_tpu_model_best.hdf5\")\n# model.evaluate(get_validation_dataset())","990da85a":"with strategy.scope():\n    rnet = DenseNet201(\n        input_shape=(512, 512, 3),\n        weights='imagenet',\n        include_top=False\n    )\n\n    model2 = tf.keras.Sequential([\n        rnet,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])\n        \nmodel2.compile(\n    optimizer=tf.keras.optimizers.Adam(lr=0.0001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n)\nmodel2.summary()","6498faff":"history2 = model2.fit(\n    get_train_valid_datasets(), \n    steps_per_epoch=TOTAL_STEPS_PER_EPOCH,\n    epochs=EPOCHS, \n    callbacks=[lr_schedule]\n)","ff8560d8":"# def lrate(epoch):\n#     lr = 0.00002\n#     return lr\n\n# lr_callback = tf.keras.callbacks.LearningRateScheduler(lrate, verbose=True)\n# mcp = tf.keras.callbacks.ModelCheckpoint(filepath='food_tpu_model_best2.hdf5',\n#                       monitor=\"val_sparse_categorical_accuracy\", save_best_only=True, save_weights_only=False)\n","5b95d6ce":"# history = model.fit(\n#     get_train_valid_datasets(), \n#     steps_per_epoch=TOTAL_STEPS_PER_EPOCH,\n#     epochs=5, \n#     validation_data=get_validation_dataset(),\n#     callbacks=[lr_callback,mcp]\n# )","a3c6fc47":"model.save_weights(\"pneumonia_tpuB7_model_last.hdf5\")","8c066090":"model2.save_weights(\"pneumonia_tpuDS_model_last.hdf5\")","4273ab10":"best_alpha = 0.46\nprint(best_alpha)","fe012464":"# test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\n# print('Computing predictions...')\n# test_images_ds = test_ds.map(lambda image, idnum: image)\n# probabilities = model.predict(test_images_ds)\n# predictions = np.argmax(probabilities, axis=-1)\n# # print(predictions)\n\n# print('Generating submission.csv file...')\n# test_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\n# test_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\n# np.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","1c9c64b2":"test_ds = get_test_dataset(ordered=True) # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = best_alpha*model.predict(test_images_ds) + (1-best_alpha)*model2.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\n# print(predictions)\n\nprint('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')","3a282cd0":"# Predictions","ab9547fc":"# Training","9999e307":"## Datasets Functions","1641c4aa":"# Helper Functions\n## Visualization","543077cc":"# About this kernel\n\nPretty much a fork of the very comprehensive [starter kernel](https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu). I didn't add much, remove a whole bunch (please check out the official kernel for more info), hide some big scary functions. I mostly just hooked the largest efficientnet laying around and ran it for a couple 'pochs. Please consume this with moderation (only 30h per week!).\n\nPS: This notebook costs ~8$ to run ;)\n\n## Updates\n\n* V9: Tried warmup by only training softmax layer for 5 epochs before unfreezing all weights.\n* V10: More data augmentations\n* V11: Use [LR Scheduler](https:\/\/www.kaggle.com\/mgornergoogle\/five-flowers-with-keras-and-xception-on-tpu), idea comes from [here](https:\/\/www.kaggle.com\/msheriey\/flowers-on-tpu-ensemble-lr-schedule?scriptVersionId=28521573).\n* V12: Use both training and validation data to train model.\n* V14: Train longer (25 epochs).\n* V15: Back to 20 epochs; Global Max Pooling instead of Average.\n* V16: Roll back to Global Average Pooling","94fcf812":"## 2 stage training","ee3d5f25":"# Training Model","24bdc862":"## 1 stage training","28bb7101":"## Model Functions","3e0a9f44":"# Configurations","19c9f1da":"## Load Model into TPU","ecdffa22":"## Train Parameters"}}