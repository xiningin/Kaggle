{"cell_type":{"82b765c6":"code","b1cdd98a":"code","73e2c3ad":"code","05926a28":"code","5a2da374":"code","9c636354":"code","e7afb128":"code","d8b72d07":"code","f4b5d355":"code","84dacfec":"code","735025ca":"code","777ed973":"code","75ef521c":"code","f59c1bfa":"code","b3af73c4":"code","7f4a7b7d":"code","f6180633":"code","25cf9871":"code","d20a5d8a":"code","7034e671":"code","a21ac803":"code","a313c1c1":"code","d5bdb5c8":"code","a98882f1":"code","786906eb":"code","609b728f":"code","16a1e3d2":"code","1786cbf2":"code","b2cfdada":"code","773a8254":"markdown","1da68b7d":"markdown","a18c6d02":"markdown","3abe258f":"markdown","3dcbd30e":"markdown","5a246015":"markdown","bec27ac7":"markdown","8a0e4a35":"markdown","41cec8bb":"markdown","08b19cbd":"markdown","f0a5132c":"markdown","4092554a":"markdown","07137348":"markdown","eb259153":"markdown"},"source":{"82b765c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n        \n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1cdd98a":"# Read Raw Data\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\n\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","73e2c3ad":"train.info()","05926a28":"train.head()","5a2da374":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')\n","9c636354":"train.isnull().sum()\/len(train)","e7afb128":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train)","d8b72d07":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","f4b5d355":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')\n","84dacfec":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))\n","735025ca":"train.corr()","777ed973":"sns.heatmap(train.corr(),annot=True)","75ef521c":"sns.boxplot(x='Pclass',y='Age',data=train)\n","f59c1bfa":"def replace_missing_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 25\n\n    else:\n        return Age","b3af73c4":"sns.boxplot(x='Pclass',y='Fare',data=test,showmeans=True,meanprops={\"marker\":\"o\",\n                       \"markerfacecolor\":\"white\", \n                       \"markeredgecolor\":\"black\",\n                      \"markersize\":\"10\"})\n","7f4a7b7d":"def replace_missing_fare(cols):\n    Fare = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 97\n\n        elif Pclass == 2:\n            return 40\n\n        else:\n            return 20\n\n    else:\n        return Age","f6180633":"train['Age'] = train[['Age','Pclass']].apply(replace_missing_age,axis=1)\ntest['Age']=test[['Age','Pclass']].apply(replace_missing_age,axis=1)\ntest['Fare']=test[['Fare','Pclass']].apply(replace_missing_age,axis=1)","25cf9871":"train.drop('Cabin',axis=1,inplace=True)\ntest.drop('Cabin',axis=1,inplace=True)\n","d20a5d8a":"train.dropna(subset = ['Embarked'],inplace=True)\ntest.dropna(subset = ['Embarked'],inplace=True)\n#train.dropna(c)\n#test.dropna(inplace=True)","7034e671":"train.isnull().sum()\/len(train)","a21ac803":"test.isnull().sum()\/len(train)","a313c1c1":"train.info()\n","d5bdb5c8":"pd.get_dummies(train['Embarked'],drop_first=True).head()\n","a98882f1":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nsex_test = pd.get_dummies(test['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)\nembark_test = pd.get_dummies(test['Embarked'],drop_first=True)","786906eb":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ntrain = pd.concat([train,sex,embark],axis=1)\ntrain.head()\n","609b728f":"test.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)\ntest = pd.concat([test,sex_test,embark_test],axis=1)\ntest.head()\n","16a1e3d2":"y_train=train.loc[ : , train.columns == 'Survived'] \nX_train=train.loc[ : , train.columns != 'Survived'] \n#y_test=test\n#y_train=test.loc[ : , test.columns != 'Survived'] \n                                           \n#print(y_test.head())\n#print(X_train.head())\n#X_train, X_test, y_train, y_test = train_test_split(train2, train1, test_size=0.30, random_state=40)\nX_train.head()\nprint(y_train.head())","1786cbf2":"\nlogmodel = LogisticRegression()\na=logmodel.fit(X_train,y_train.values.ravel())\npredictions = logmodel.predict(test.values)\naccuracy = logmodel.score(X_train,y_train)\nprint(\"Accuracy: \",accuracy*100)\n#print(predictions)\n#X_train.head()","b2cfdada":"LR_file = pd.DataFrame({\"PassengerId\": test[\"PassengerId\"], \"Survived\": predictions})\nLR_file.to_csv('LR_file.csv', index=False)\n","773a8254":"### Impute the missing Fare values based on PClass","1da68b7d":"# 1. Read the Raw data for our Analysis. Here we use Python's Pandas to import the raw data into the dataframes.\n","a18c6d02":"We can see that the Age of the people is slighly correlated to the class, so we try filling the values with the help of P_Class variable..","3abe258f":"We now observe that there are no null values.","3dcbd30e":"Now we drop the Cabin column as most of the (77%) data is not available","5a246015":"### Description of Data\nPassengerId: An unique index for each passenger. It starts from 1 and increments by 1 for every new passenger.\n\nSurvived: Shows if the passenger survived or not. 1 stands for survived and 0 stands for not survived.\n\nPclass: Ticket class. 1 stands for First class ticket. 2 stands for Second class ticket. 3 stands for Third class ticket. It is in a way proxy for socio-economic status (SES) 1st = Upper 2nd = Middle 3rd = Lower\n\nName: Passenger's name. Name also contain title. \"Mr\" for man. \"Mrs\" for woman. \"Miss\" for girl. \"Master\" for boy.\n\nSex: Passenger's sex. It's either Male or Female.\n\nAge: Passenger's age. \"NaN\" values in this column indicates that the age of that particular passenger has not been recorded.\n\nSibSp: Number of siblings or spouses travelling with each passenger. The dataset defines family relations in this way... Sibling = brother, sister, stepbrother, stepsister Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nParch: Number of parents of children travelling with each passenger. The dataset defines family relations in this way... Parent = mother, father Child = daughter, son, stepdaughter, stepson Some children travelled only with a nanny, therefore parch=0 for them.\n\nTicket: Ticket number.\n\nFare: The amount of money the passenger has paid for the travel journey(in dollars).\n\nCabin: Cabin number of the passenger. \"NaN\" values in this column indicates that the cabin number of that particular passenger has not been recorded.\n\nEmbarked: Port from where the particular passenger was embarked\/boarded. Here: C = Cherbourg, Q = Queenstown, S = Southampton","bec27ac7":"### Split the data to test and training set.","8a0e4a35":"### We can observe that Cabin column has 77% null values, Age has nearly 20% null values and Emabarked column has .2 % null values","41cec8bb":"## Converting the Categorical Features","08b19cbd":"### Exploratory Data Analytics:\n\n","f0a5132c":"We can observe that people of class type 1 have an agerage age of 37, PCLass type 2 have the average age of 29, and P class type 3 passengers have the average age of 25","4092554a":"# 2. Analyse the Data and identify the Type of Each data column.","07137348":"# 3. Checking null values\n","eb259153":"# Build a Logistic Regression Model "}}