{"cell_type":{"f3465d31":"code","0cf33b6c":"code","ab64bdf3":"code","3e889d4e":"code","2f93775b":"code","2b27a8f9":"code","17b63490":"code","64047da9":"code","4bf14190":"code","515627b2":"code","aeabdf2f":"code","c9d5adbf":"code","2be241b4":"code","00f42462":"code","79c61394":"code","5bf2b9b6":"code","f77f1e78":"code","98ca50a1":"code","9fb3a07a":"code","cc77f17c":"code","11277988":"code","727eb8b9":"code","2ee0b85d":"code","3b219802":"code","62261723":"code","6d011eda":"code","c9c2f36b":"code","27a7e9de":"code","e721ab30":"code","c399fd50":"code","26d42c3b":"code","63e9abe7":"code","03ce60d4":"code","08d23352":"code","18ed5536":"code","5183b422":"code","bd431f46":"code","4911f4ca":"code","617ec813":"code","d423281c":"code","3042f98a":"code","1904efa4":"code","4e0351fa":"code","543d4065":"code","3e4c354d":"code","51445ec8":"code","47e306bb":"code","b9763a11":"code","b07b4beb":"code","c9a7970c":"code","53828dbb":"code","b3463b47":"code","a54eab23":"code","43693683":"code","cbab12ea":"code","cee51a56":"markdown","7ce8fbbc":"markdown","f733f4ee":"markdown","769a808e":"markdown","9a90935e":"markdown","f135fe82":"markdown","7770da69":"markdown","b751b569":"markdown","280af743":"markdown","df8548e7":"markdown","fe5f7d1c":"markdown","ba5d9016":"markdown","fc2cdb16":"markdown","007304d2":"markdown","ae343a8f":"markdown","ca08f120":"markdown","5a02c103":"markdown","292ecd59":"markdown"},"source":{"f3465d31":"#import the necessary Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0cf33b6c":"df = pd.read_csv('..\/input\/sales-forecasting\/train.csv') #Read the dataset","ab64bdf3":"df.head()","3e889d4e":"df.shape","2f93775b":"df.describe()","2b27a8f9":"df.columns","17b63490":"df1 = df.drop(['Row ID', 'Order ID', 'Customer ID', 'Product ID'], axis = 1)\n\ndf1.head()","64047da9":"df1.isnull().sum()","4bf14190":"df1[df1[\"Postal Code\"].isnull()]","515627b2":"df1['Postal Code'] = df1['Postal Code'].fillna(5401)","aeabdf2f":"df1.isnull().sum()","c9d5adbf":"df1[\"Month\"]=df1[\"Order Date\"].str[3:5]","2be241b4":"# converting string to integer\ndf1[\"Month\"]=df1[\"Month\"].astype(\"int32\")\n\ndf1","00f42462":"# Asigning the values for the integers\nd = {1:\"January\",2:\"February\",3:\"March\",4:\"April\",5:\"May\",6:\"June\",7:\"July\",\n    8:\"August\",9:\"September\",10:\"October\",11:\"November\",12:\"December\"}\n\ndf1[\"Month\"]=[d[i] for i in df1[\"Month\"]]\n\ndf1","79c61394":"# converting the date columns to pandas' datetime\ndf1[\"Order Date\"] = pd.to_datetime(df1[\"Order Date\"])\n\ndf1[\"Ship Date\"] = pd.to_datetime(df1[\"Ship Date\"])\n\ndf1","5bf2b9b6":"# creating a column year\ndf1[\"Year\"] = df1[\"Order Date\"].dt.year\n\ndf1","f77f1e78":"df1[\"Year\"].value_counts() # checking for total count","98ca50a1":"months_df = df1.groupby(\"Month\").sum().sort_values(\"Sales\", ascending = False)\n\nmonths_df = months_df[[\"Sales\"]]\n\nmonths_df.reset_index(inplace=True)\nmonths_df","9fb3a07a":"plt.bar(months_df[\"Month\"],months_df[\"Sales\"], color = \"#ffb861\", edgecolor = \"green\", linewidth = .5)\n\nplt.xlabel(\"Months\", size = 20)\n\nplt.ylabel(\"Sales\", size = 20)\n\nplt.xticks(fontsize = 10, rotation = 90)\n\nplt.yticks(fontsize = 10)\n\nplt.title(\"Sales based on Month\", size = 25, pad = 25)\n\nplt.show()","cc77f17c":"year_df = df1.groupby(\"Year\").sum().sort_values(\"Sales\", ascending = False)\n\nyear_df = year_df[[\"Sales\"]]\n\nyear_df","11277988":"year_df.reset_index(inplace=True)\n\nyear_df","727eb8b9":"sns.barplot(x = \"Year\", y = \"Sales\", data  = year_df, palette = \"summer_r\")\n\nplt.xlabel(\"Year\", size = 20)\n\nplt.ylabel(\"Sales\", size = 20)\n\nplt.title(\"Sales based on Year\", size = 25, pad = 25)\n\nplt.show()","2ee0b85d":"df1[\"Customer Name\"].nunique()","3b219802":"customers = df1.groupby(\"Customer Name\").sum().sort_values(\"Sales\",ascending=False).head(20)\n\ncustomers","62261723":"customers.drop([\"Postal Code\", \"Year\"], axis = 1, inplace = True)\n\ncustomers.reset_index(inplace = True)\n\ncustomers","6d011eda":"plt.figure(figsize = (10,5))\n\nsns.barplot(x = customers[\"Customer Name\"],y = customers[\"Sales\"], palette = \"YlOrRd_r\")\n\nplt.xlabel(\"Customer Name\", size = 20)\n\nplt.ylabel(\"Sales\", size = 20)\n\nplt.xticks(fontsize=12,rotation=90)\n\nplt.yticks(fontsize=14)\n\nplt.title(\"Our Most Valuable customers - Top 20\", size = 25, pad = 25)\n\nplt.show()","c9c2f36b":"# The function which helps us to annotate the values in our donut or pie chart\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return  \"${v:d}\".format(p=pct,v=val)\n    return my_autopct","27a7e9de":"df1.Segment.unique()","e721ab30":"segment = df1.groupby(\"Segment\").sum()\n\nsegment = segment[[\"Sales\"]]\n\nsegment.reset_index(inplace = True)\n\nsegment","c399fd50":"# Finding the total revenue generated by the superstore\n\ntotal_revenue = segment[\"Sales\"].sum() \n\ntotal_revenue = str(int(total_revenue))\n\ntotal_revenue = \"$\" + total_revenue","26d42c3b":"total_revenue # this is our total revenue","63e9abe7":"# Creating a donut chart.\n\ncenter = [5]\nplt.pie(segment['Sales'], labels = segment['Segment'],colors =[\"#7CFC00\", \"#7FFF00\", \"#ADFF2F\"], \n        radius = 1.5, explode = [0.05,0.05,0.05], autopct = make_autopct(segment[\"Sales\"]))\n\nplt.pie(center, radius = 1.25, colors = \"w\")\n\nlabel = plt.annotate('Total Revenue \\n' + total_revenue, color = 'red', xy=(0, 0)\n                     ,fontsize=12, ha=\"center\")\nplt.tight_layout()\n\nplt.title(\"The sales based on the Segment\", pad = 60, size = 25, color = \"green\")\nplt.show()","03ce60d4":"city = df1.groupby(\"City\").sum().sort_values(\"Sales\", ascending = False).head(15)","08d23352":"city = city[[\"Sales\"]].round(2)\n\ncity.reset_index(inplace = True)","18ed5536":"city","5183b422":"plt.figure(figsize = (15,5)) \n\nplt.title(\"Top 15 Cities which generated Highest Revenue\", fontsize=18)\n\nplt.bar(city[\"City\"], city[\"Sales\"],color= '#89ff61',edgecolor='blue', linewidth = 1)\n\nplt.xlabel(\"Cities\",fontsize=15)  \n\nplt.ylabel(\"Revenue\",fontsize=15)\n\nplt.xticks(fontsize=12, rotation=90)\n\nplt.yticks(fontsize=12)\n\nplt.show()","bd431f46":"state = df1.groupby(\"State\").sum().sort_values(\"Sales\", ascending = False).head(10)\n\nstate = state[[\"Sales\"]].round(2)\n\nstate.reset_index(inplace = True)\n\nstate","4911f4ca":"plt.figure(figsize = (15,5))\n\nplt.title(\"Top 10 States which generated Highest Revenue\", fontsize=18) \n\nplt.bar(state[\"State\"], state[\"Sales\"],color= '#FF6F61',edgecolor='black', linewidth = 1)\n\nplt.xlabel(\"States\",fontsize=15) # x axis shows the States\n\nplt.ylabel(\"Revenue\",fontsize=15) # y axis shows the Revenue\n\nplt.xticks(fontsize=12, rotation=90)\n\nplt.yticks(fontsize=12)\n\nfor a,s in state[\"Sales\"].items():\n    if v>400000:\n        plt.text(a,s-150000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');\n    else:\n        plt.text(a,s + 15000,'$'+ str(v), fontsize=12,rotation=90,color='k', horizontalalignment='center');","617ec813":"region = df1.groupby(\"Region\").sum()\n\nregion = region[[\"Sales\"]].round(2)\n\nregion.reset_index(inplace = True)\n\nregion","d423281c":"plt.figure(figsize = (10,5)) \n\nplt.title(\"Region-wise Revenue Generation\", fontsize=18)\n\nplt.bar(region[\"Region\"], region[\"Sales\"],color= '#fff461',edgecolor='Red', linewidth = 1)\n\nplt.xlabel(\"Region\",fontsize=15) \n\nplt.ylabel(\"Revenue\",fontsize=15) \n\nplt.xticks(fontsize=12, rotation=90)\n\nplt.yticks(fontsize=12)\n\nfor a,s in region[\"Sales\"].items(): \n        plt.text(a,s-150000,'$'+ str(v), fontsize=12,color='k', horizontalalignment='center');","3042f98a":"shipmode = df1.groupby(\"Ship Mode\").sum()\n\nshipmode = shipmode[[\"Sales\"]]\n\nshipmode.reset_index(inplace = True)\n\nshipmode","1904efa4":"center = [6]\nplt.figure(figsize = (6,6))\n\nplt.pie(shipmode['Sales'], labels = shipmode['Ship Mode'],colors = ['#1E90FF','#00BFFF','#87CEEB',\"mediumblue\"], \n        radius = 2, autopct= make_autopct(shipmode[\"Sales\"]))\n\nplt.pie(center, radius = 1.7, colors = \"w\")\n\nplt.title(\"The sales based on the Ship Mode\", pad = 100, size = 25, color = \"darkblue\")\n\nplt.tight_layout()\nplt.show()","4e0351fa":"category = df.groupby([\"Category\"]).sum().sort_values(\"Sales\", ascending=False) \n\ncategory = category[[\"Sales\"]]\n\ntotal_revenue_category = category[\"Sales\"].sum()\n\ntotal_revenue_category = str(int(total_revenue_category))\n\ntotal_revenue_category = '$' + total_revenue_category\n\ncategory.reset_index(inplace=True)\n\ncategory","543d4065":"center = [6]\nplt.pie(category['Sales'], labels = category['Category'],colors =  [\"indianred\",\"lightcoral\", \"darkred\"], \n        radius = 1.5, autopct = make_autopct(category[\"Sales\"]))\n\nplt.pie(center, radius = 1.3, colors = \"w\")\n\nplt.annotate('Total Revenue \\n'+str(total_revenue_category),color = \"purple\", xy=(0, 0), fontsize=12, ha=\"center\")\n\nplt.title(\"The sales based on the Categories\", pad = 50, size = 25, color = \"darkred\")\n\nplt.tight_layout()\nplt.show()","3e4c354d":"subca = df1.groupby(\"Sub-Category\").sum().sort_values(\"Sales\" , ascending = False).head()\n\nsubca = subca[[\"Sales\"]].round(2)\n\nsubca.reset_index(inplace = True)\n\nsubca","51445ec8":"plt.figure(figsize = (10,5)) \n\nplt.title(\"Top 5 Sub Categories Based on Revenue\", fontsize=18)\n\nplt.bar(subca[\"Sub-Category\"], subca[\"Sales\"],color= '#61ffe7',edgecolor='Red', linewidth = 1)\n\nplt.xlabel(\"Sub - Category\",fontsize=15) \n\nplt.ylabel(\"Revenue\",fontsize=15) \n\nplt.xticks(fontsize=12, rotation=90)\n\nplt.yticks(fontsize=12)\n\nfor a,s in subca[\"Sales\"].items(): \n        plt.text(a,s-30000,'$'+ str(v), fontsize=12,color='k', horizontalalignment='center');","47e306bb":"df1[\"Product Name\"].nunique()","b9763a11":"prona = df1.groupby(\"Product Name\").sum().sort_values(\"Sales\", ascending = False).head()\n\nprona = prona[[\"Sales\"]].round(2)\nprona.reset_index(inplace = True)\n\nprona","b07b4beb":"center = [6]\n\nexplode = [0.05,0.05,0.05,0.05,0.05]\nplt.pie(prona['Sales'], labels = prona['Product Name'], radius = 1.5, \n        colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#55B4B0'], \n        autopct = make_autopct(category[\"Sales\"]), explode = explode)\n\nplt.pie(center, radius = 1.3, colors = \"w\")\n\nplt.annotate('Total Revenue \\n'+str(total_revenue_category),color = \"purple\", xy=(0, 0), fontsize=12, ha=\"center\")\n\nplt.title(\"The Top 10 Products, which generated hig revenue\", pad = 70, size = 25, color = \"#9607f5\")\n\nplt.tight_layout()\nplt.show()","c9a7970c":"state = ['Alabama', 'Arizona' ,'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', \n         'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland',\n         'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana','Nebraska', 'Nevada', 'New Hampshire',\n         'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania',\n         'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington',\n         'West Virginia', 'Wisconsin','Wyoming']\nstate_code = ['AL','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA',\n              'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN',\n              'TX','UT','VT','VA','WA','WV','WI','WY']","53828dbb":"state = pd.DataFrame(state, state_code) \n\nstate.reset_index(inplace=True)\n\nstate.columns = ['State Code','State']\n\nstate.head()","b3463b47":"sales = df.groupby([\"State\"]).sum().sort_values(\"Sales\", ascending=False)\n\nsales.reset_index(inplace=True) \n\nsales.drop('Postal Code',axis = 1, inplace = True)\n\nsales.head(10)","a54eab23":"sales= sales.sort_values('State', ascending=True)\n\nsales.reset_index(inplace = True)\n\nsales.head()","43693683":"sales.drop('index',1,inplace = True)\n\nsales.insert(1, 'State Code', state['State Code'])\n\nsales.head()","cbab12ea":"import plotly.graph_objects as go\n\nsales['states'] = sales['State']\nusa = go.Figure(data=go.Choropleth(\n    locations=sales['State Code'], # Spatial coordinates\n    text=sales['states'],\n    z = sales['Sales'].astype(float), # Data to be color-coded\n    locationmode = 'USA-states', # set of locations match entries in `locations`\n    colorscale = 'darkmint', #some cool colors sunsetdark, plotly3, mint, bluyl, darkmint, aggrnyl, algae, blues, blugrn, dense, emrld\n    colorbar_title = \"Sales\",\n    \n))\n\nusa.update_layout(\n    title_text = 'State wise Sales',\n    geo_scope='usa', # limit map scope to USA\n)\n\nusa.show();","cee51a56":"### Sales based on Ship mode","7ce8fbbc":"### Sales based on Month","f733f4ee":"### Most Valuable Customers","769a808e":"We have found that there are some null values in our Postal Code Column\n\n###### Let's find those rows","9a90935e":"# Checking for Null values\n","f135fe82":"### Choropleth Map","7770da69":"### Sales based on Products\n","b751b569":"### Sales based on Sub-Categories","280af743":"# Analyzing and Visualizing our Data\n\n#### To get valuable insights","df8548e7":"### Sales based on Categories","fe5f7d1c":"### Sales based on City","ba5d9016":"###### For our Analysis purpose let's create a column month","fc2cdb16":"###### As per google the postal code for the state Vermont is 5401 and let's fill it\n","007304d2":"### Sales based on Year","ae343a8f":"### Sales based on Region","ca08f120":"# Dropping useless columns","5a02c103":"### Sales based on Segment","292ecd59":"### Sales Based on State"}}