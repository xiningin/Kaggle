{"cell_type":{"326ec1ae":"code","1313a265":"code","54ad79fe":"code","36d60965":"code","0bd226e5":"code","579f4646":"code","3834856a":"code","989e4319":"code","1aacf4c8":"code","cb0e9c10":"code","36f45e45":"code","87bfb389":"code","00b2cca5":"code","5ef5a713":"code","cb78cd3c":"code","30bbccca":"code","fc2c517f":"code","623b9d9e":"code","8eb2d380":"code","f5bc1b99":"code","d9edb05d":"code","08735fad":"code","6b83bae2":"code","c49f771d":"code","da82c899":"code","00131599":"code","30d7d575":"code","7eedf022":"code","a67645c5":"code","8442f542":"code","95acc90a":"code","1d990cc5":"code","71fc9b1e":"code","7cee5852":"code","50fbdd0f":"code","5bf18f6f":"code","6650f50a":"code","512da4ef":"code","e4d6d03d":"code","c40b5c28":"code","9fa613a6":"code","f5c25cf4":"code","a06735cd":"code","dba9ec4f":"code","89d8cd53":"code","1901adba":"code","7c017602":"code","0d0a3820":"code","ddaf8ff4":"code","fd1e3561":"code","1e12758b":"code","249ce5fd":"code","a00c84bb":"code","a88e6c28":"code","e932d398":"code","f8654f0a":"code","9674abfc":"code","a2744639":"code","816c5feb":"code","ee9413ba":"code","6af9bc15":"code","97b7846d":"code","117bd89a":"code","75e5352a":"code","dcc367ad":"code","1ff0f2e5":"code","2926c8e5":"code","51eb8c9d":"code","5fd3d07e":"code","c074680f":"code","7c819015":"code","e95f719c":"code","4a45c5df":"code","85eef753":"code","7dd45f16":"code","a5e11285":"markdown","5d0947af":"markdown","94863fb6":"markdown","d60769b0":"markdown","54b025db":"markdown","77fb9f08":"markdown","2f21c675":"markdown","7b3d974f":"markdown","1a64615f":"markdown","3630038b":"markdown","fcf5261e":"markdown","c902c4bc":"markdown","970a6c9a":"markdown","19d444b6":"markdown","ce7a7376":"markdown","20c86b3e":"markdown"},"source":{"326ec1ae":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib","1313a265":"df = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')","54ad79fe":"df.head()","36d60965":"df.shape","0bd226e5":"datetime_data = [feature for feature in df.columns if 'Date' in feature or 'Time' in feature or 'Duration' in feature]","579f4646":"print(datetime_data)","3834856a":"category_data = [feature for feature in df.columns if feature not in datetime_data and df[feature].dtypes == 'O']","989e4319":"print(category_data)","1aacf4c8":"numeric_data = [feature for feature in df.columns if df[feature].dtypes != 'O']","cb0e9c10":"print(numeric_data)","36f45e45":"# Lets' start with categorical values","87bfb389":"# AIRLINES:\nsns.countplot(x='Airline',data=df)\nplt.xticks(rotation = 90)\nplt.show()","00b2cca5":"df['Airline'].value_counts()","5ef5a713":"df[df['Airline']=='Vistara Premium economy']","cb78cd3c":"# We only have 3 entries for vistara premium. Clubbing into Vistara won't make much of a difference.\n# Also, let's check the mean price for both vistara and vistara premium.","30bbccca":"vistara_mean = df[df['Airline']=='Vistara'].mean()\nprint('vistara : ',vistara_mean)","fc2c517f":"vistara_prem_mean = df[df['Airline']=='Vistara Premium economy'].mean()\nprint(vistara_prem_mean)","623b9d9e":"df['Airline'] = df['Airline'].replace('Vistara Premium economy','Vistara')","8eb2d380":"# Let's look at Multiple carriers Premium economy.","f5bc1b99":"df[df['Airline']=='Multiple carriers Premium economy']","d9edb05d":"#Let's check for Multiple Carriers","08735fad":"df[df['Airline']=='Multiple carriers']","6b83bae2":"df[df['Airline']=='Multiple carriers'].groupby('Route').size()","c49f771d":"df[df['Airline']=='Multiple carriers'].mean()","da82c899":"df[df['Airline']=='Multiple carriers Premium economy'].mean()","00131599":"df['Airline'] = df['Airline'].replace('Multiple carriers Premium economy','Multiple carriers')","30d7d575":"# A look into Jet airways and it's business class","7eedf022":"df[df['Airline']=='Jet Airways Business'].mean()","a67645c5":"df[df['Airline']=='Jet Airways'].mean()","8442f542":"sns.countplot(x='Airline',data=df)\nplt.xticks(rotation = 90)\nplt.show()","95acc90a":"# Airline feature ~ Price","1d990cc5":"plt.figure(figsize=(8,5))\nsns.stripplot(x='Airline',y='Price',data=df)\nplt.xticks(rotation = 90)\nplt.show()","71fc9b1e":"# Inference :\n# The average price of jet airways business class is more than the maximum of any other airline.","7cee5852":"# Next we check the Source and Destination","50fbdd0f":"print('Source : ',df['Source'].unique())","5bf18f6f":"print('Destinations : ',df['Destination'].unique())","6650f50a":"df['Destination'] = df['Destination'].replace('New Delhi','Delhi')","512da4ef":"print('Updated Destinations : ',df['Destination'].unique())","e4d6d03d":"sns.countplot(x='Source',data=df)","c40b5c28":"# Maximum no. of flights are from Delhi. Followed by Kolkata, Banglore, Mumbai, Chennai.","9fa613a6":"sns.stripplot(x='Source',y='Price',data=df)","f5c25cf4":"# Let's see where these flights land most.","a06735cd":"sns.countplot(x='Destination',data=df)","dba9ec4f":"sns.stripplot(x='Destination',y='Price',data=df)","89d8cd53":"# Let's also check the same from dataset","1901adba":"for source in df['Source'].unique():\n    print(source, 'to ', df[df['Source']==source]['Destination'].unique())","7c017602":"# Route and Total_Stops are related to each other, we need to drop one of these. I'll be keping Total_Stops for model building.","0d0a3820":"df['Total_Stops'].unique()","ddaf8ff4":"df['Total_Stops'].value_counts()","fd1e3561":"sns.countplot(x='Total_Stops',data=df)","1e12758b":"# Mojority of flights choosen by passengers are either direct or single stop.","249ce5fd":"sns.stripplot(x='Total_Stops',y='Price',data=df)","a00c84bb":"# Observing the price range of 1-stop flights, we can infer that JET AIRWAYS BUSINESS class accounts for such high prices.","a88e6c28":"df['Additional_Info'].unique()","e932d398":"df['Additional_Info'].value_counts()","f8654f0a":"# 80% of the data in Addition_Info column is \"No info\". Thus, dropping the same while model building would work fine.","9674abfc":"print(datetime_data)","a2744639":"df2 = df.copy()","816c5feb":"df2['Date_of_Journey'] = pd.to_datetime(df2['Date_of_Journey'],format=\"%d\/%m\/%Y\")","ee9413ba":"import plotly.graph_objects as go","6af9bc15":"import plotly.express as px\nfig = px.histogram(df, x=\"Date_of_Journey\", y=\"Price\", histfunc=\"avg\", title=\"Histogram on Date Axes\")\nfig.add_trace(go.Scatter(mode=\"markers\", x=df[\"Date_of_Journey\"], y=df[\"Price\"], name=\"Price\"))\nfig.show()","97b7846d":"df2['Journey_Date'] = pd.to_datetime(df2.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day","117bd89a":"df2['Journey_Month'] = pd.to_datetime(df2.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.month","75e5352a":"df2['Dep_hour'] = pd.to_datetime(df2.Dep_Time).dt.hour","dcc367ad":"df2['Dep_min'] = pd.to_datetime(df2.Dep_Time).dt.minute","1ff0f2e5":"df2['Arrival_hour'] = pd.to_datetime(df2.Arrival_Time).dt.hour","2926c8e5":"df2['Arrival_min'] = pd.to_datetime(df2.Arrival_Time).dt.minute","51eb8c9d":"df2['Duration_hour'] = [i.split(\"h\")[0] for i in df2[\"Duration\"]]","5fd3d07e":"duration = list(df2['Duration'])\n\n#for i in range(len(duration)):\n#    print(duration[i].split())\n\nfor i in range(len(duration)):\n    if (len(duration[i].split()) != 2):\n        if 'h' in duration[i]:\n             duration[i] = duration[i].strip() + ' 0m'\n        else:\n            duration[i] = \"0h \" + duration[i]\n","c074680f":"df2['Duration'] = duration","7c819015":"df2['Duration_min'] = [i.split(\"h\")[1].split('m')[0].strip() for i in df2[\"Duration\"]]","e95f719c":"df2.head()","4a45c5df":"df2.to_csv('EDA_flight.csv', index=False)","85eef753":"train = pd.read_csv('EDA_flight.csv')","7dd45f16":"train.head()","a5e11285":"The problem while splitting the mins from Duration is we have values such as 19h,21h where minutes is not present. Therefore,\ndf2['Duration_hour'] = [i.split('h')[1].split('m')[0].strip() for i in df2['Duration']] gives an 'index out of bound' error","5d0947af":"For the conclusion, we say source and destination remains same, with no. of stops being different. All multiple carrier flights are from DELHI --> COCHIN","94863fb6":"For, model building purpose we will segregate both day and month. Year need not be considered, as all the data is for year 2019.\n**.dt.day method will extract only day of that date** and\n**.dt.month method will extract only month of that date**","d60769b0":"Now, we look into the date-time features, and ideas for feature engineering.","54b025db":"Now, Departure\/Arrival Time is the time when plane leaves\/lands, similar to day-month segregation, we can segregate hour (**dt.hour**) and min (**dt.minute**)","77fb9f08":"The average price for multiple carriers and multiple carriers premium economy is comparable. Thus, we can merge both.","2f21c675":"We can tell that all the Multiple carriers Premium economy flights are from DELHI - (Bombay) - > COCHIN with 1 stop, starting on 21-March-2019 and landing on same date except one.","7b3d974f":"Ques : Does frequency of flights from one source affects the price ?","1a64615f":"DEL corresponds to New Delhi as well as Delhi. Let's replace all New Delhi terms to Delhi","3630038b":"There is a huge resemblance between the distribution of data points, giving insight of source to destination relationship. Example: Source Banglore data points match with Destination Delhi data points, stating that flight goes from Bangalore to Delhi","fcf5261e":"First, of all the features are 'Object' type which needs to be converted to Timestamp so as to use this column properly for prediction. \n\nFor this we require pandas to_datetime to convert object data type to datetime dtype.","c902c4bc":"For the Jet Airways, we can't combine business class with normal class, as the price difference is huge.","970a6c9a":"Ans : No, there isn't any specific relationship between frequency of flights and price. Consider Mumbai for example, second last to no. of flights, majority of points corresponding to price resemble with Delhi.","19d444b6":"The results are amazing, we do not have any data for flights starting from cochin, yet maximum no. of flights land in cochin","ce7a7376":"Observe carefully, the two graphs :\n1. Source ~ Price\n2. Destination ~ Price\n","20c86b3e":"For that, we need to add '0 m' to the duration column.\nFollowing code snippet is picked up from https:\/\/github.com\/Mandal-21\/Flight-Price-Prediction"}}