{"cell_type":{"12023075":"code","60e579ed":"code","ecd68bce":"code","e4f5246d":"code","6a5ece93":"code","f27a2eb5":"code","7761d6a8":"code","2d87d337":"code","ff3d600f":"code","e3cab4b0":"code","f55e7677":"code","517f043e":"code","9ef18469":"code","a62117e0":"code","bbe5d275":"code","29dd6410":"code","d6d992a6":"code","1191ff9c":"code","522b9f46":"code","1fdf0b20":"code","0fcfc3f8":"code","3883b64c":"code","ad7674c2":"code","d9f5d61b":"code","a20e8942":"code","8820b501":"code","58a7d6ef":"code","e923a66a":"code","4ea77b6b":"code","185a14f7":"code","4ec0d6fe":"code","f93c4876":"code","a359880f":"code","15672e1e":"code","dac3c768":"code","e101e741":"code","6ae24f18":"code","25fe8f8b":"code","2cad1298":"code","57ab6195":"code","5a66dc16":"code","d62828de":"code","4b3b48da":"code","b5b4c024":"code","60253d35":"code","f5b059d4":"code","76a9e1c7":"code","e885220c":"code","0834ad2f":"code","34db2703":"code","72c5ad33":"code","8b6cef1e":"code","b9213c69":"code","bccedb3f":"code","4b9e8ced":"markdown","3b56e01b":"markdown","413be389":"markdown","ad609a01":"markdown","e0d609c9":"markdown","26c66c4d":"markdown","e2f56a43":"markdown","ab5a57c7":"markdown","3abceac1":"markdown","2ad5e2ff":"markdown","785f3182":"markdown","241555ad":"markdown","33b45cb4":"markdown","d37f69ec":"markdown","ae66196b":"markdown","e50626e8":"markdown","af95a852":"markdown","e223cc9b":"markdown","8f02e6f9":"markdown","1a9fc362":"markdown","387115f2":"markdown","decbb418":"markdown","0d520700":"markdown","c6b4ddcd":"markdown","fe3a5906":"markdown","af95eb49":"markdown","3e8a396f":"markdown","9a112a76":"markdown","cf7e963c":"markdown","e3f114a0":"markdown","63997825":"markdown","639943b9":"markdown"},"source":{"12023075":"# Import Libs\nimport numpy as np\nimport random\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Bokeh\nfrom bokeh.io import output_notebook\nfrom bokeh.models import GeoJSONDataSource\noutput_notebook()\n\n# Print DataSet paths\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Configs\npd.options.display.float_format = '{:,.4f}'.format\nsns.set(style=\"whitegrid\")\nplt.style.use('seaborn')\nSEED = 42\nnp.random.seed(SEED)\nrandom.seed(SEED)","60e579ed":"df = pd.read_csv(\"\/kaggle\/input\/gas-prices-in-brazil\/2004-2019.tsv\", delimiter = '\\t')","ecd68bce":"def eda_categ_feat_desc_plot(series_categorical, title = \"\", fix_labels=False):\n    \"\"\"Generate 2 plots: barplot with quantity and pieplot with percentage. \n       @series_categorical: categorical series\n       @title: optional\n       @fix_labels: The labes plot in barplot in sorted by values, some times its bugs cuz axis ticks is alphabethic\n           if this happens, pass True in fix_labels\n       @bar_format: pass {:,.0f} to int\n    \"\"\"\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    \n    fig, ax = plt.subplots(figsize = (15,4), ncols=2, nrows=1) # figsize = (width, height)\n    if(title != \"\"):\n        fig.suptitle(title, fontsize=18)\n        fig.subplots_adjust(top=0.8)\n\n    s = sns.barplot(x=series_name, y='quantity', data=val_concat, ax=ax[0])\n    if(fix_labels):\n        val_concat = val_concat.sort_values(series_name).reset_index()\n    \n    for index, row in val_concat.iterrows():\n        s.text(row.name, row['quantity'], '{:,d}'.format(row['quantity']), color='black', ha=\"center\")\n\n    s2 = val_concat.plot.pie(y='percentage', autopct=lambda value: '{:.2f}%'.format(value),\n                             labels=val_concat[series_name].tolist(), legend=None, ax=ax[1],\n                             title=\"Percentage Plot\")\n\n    ax[1].set_ylabel('')\n    ax[0].set_title('Quantity Plot')\n\n    plt.show()\n","e4f5246d":"def series_remove_outiliers(series):\n    # Use IQR Strategy\n    # https:\/\/machinelearningmastery.com\/how-to-use-statistics-to-identify-outliers-in-data\/\n    # def quantils\n    q25, q75 = series.quantile(0.25), series.quantile(0.75)\n    iqr = q75 - q25\n    print('Percentiles: 25th=%.3f, 75th=%.3f, IQR=%.3f' % (q25, q75, iqr))\n    cut_off = iqr * 1.5\n    lower, upper = q25 - cut_off, q75 + cut_off\n    # identify outliers\n    print('Cut Off: below than', lower, 'and above than', upper)\n    outliers = series[ (series > upper) | (series < lower)]\n    print('Identified outliers: {:,d}'.format(len(outliers)), 'that are',\n          '{:.2%}'.format(len(outliers)\/len(series)), 'of total data')\n    # remove outliers\n    outliers_removed = [x for x in series if x >= lower and x <= upper]\n    print('Non-outlier observations: {:,d}'.format(len(outliers_removed)))\n    series_no_outiliers = series[ (series <= upper) & (series >= lower) ]\n    return series_no_outiliers","6a5ece93":"def eda_categ_feat_desc_df(series_categorical):\n    \"\"\"Generate DataFrame with quantity and percentage of categorical series\n        @series_categorical = categorical series\n    \"\"\"\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    return val_concat","f27a2eb5":"from bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.models import LinearColorMapper, HoverTool, ColorBar\nfrom bokeh.palettes import magma,viridis,cividis, inferno\n\ndef eda_brazil_state_geo_plot(geosource, df_in, title, column, state_column, low = -1, high = -1, palette = -1):\n    \"\"\"\n    Generate Bokeh Plot to Brazil States:\n        geosource: GeoJSONDataSource of Bokeh\n        df_in: DataSet before transformed in GeoJSONDataSource\n        title: title of plot\n        column: column of df_in to be placed values in geoplot\n        state_column: indicate column with names of States\n        low = (optional) min value of range of color spectre\n        high = (optional) max values of range of color spectre\n        palette: (optional) can be magma, viridis, civis, inferno e etc.. (with number os colors)\n            Example: cividis(8) (8 colors to classify), cividis(256)  (256, more colors to clasify)\n    \"\"\"\n    if high == -1:\n        high = max(df_in[column])\n    if low == -1:\n        low = min(df_in[column])\n    if palette == -1:\n        palette = inferno(32)\n        \n    palette = palette[::-1]\n    color_mapper = LinearColorMapper(palette = palette, low = low, high = high)\n    \n    hover = HoverTool(tooltips = [ ('State','@{'+state_column+'}'), (column, '@{'+column+'}{%.2f}')],\n                  formatters={'@{'+column+'}' : 'printf'})\n\n    color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width = 300, height = 20, \n                         border_line_color=None, location = (0,0),  orientation = 'horizontal')\n\n    p = figure(title = title, plot_height = 430, plot_width = 330, tools = [hover])\n\n    p.xgrid.grid_line_color = None\n    p.ygrid.grid_line_color = None\n    p.xaxis.visible = False\n    p.yaxis.visible = False\n\n    p.patches('xs','ys', source = geosource, line_color = 'black', line_width = 0.25,\n              fill_alpha = 1, fill_color = {'field' : str(column), 'transform' : color_mapper})\n\n    p.add_layout(color_bar, 'below')\n    return p   ","7761d6a8":"from bokeh.palettes import Turbo256 \nfrom bokeh.models import ColumnDataSource\nfrom bokeh.transform import factor_cmap\nfrom bokeh.palettes import magma,viridis,cividis, inferno\n\ndef eda_bokeh_horiz_bar_ranked(df, column_target, title = '', int_top = 3, second_target = 'state'):\n    \"\"\"\n    Generate Bokeh Plot ranking top fists and last value:\n        df: data_frame\n        column_targe: a column of df inputed\n        title: title of plot\n        int_top: number of the tops\n        column: column of df_in to be placed values in geoplot\n        second_targe = 'state'\n    \"\"\"\n    ranked = df.sort_values(by=column_target).reset_index(drop = True)\n    top_int = int_top\n    top = ranked[:top_int].append(ranked[-top_int:]).drop(['geometry'], axis = 1)\n    top.index = top.index + 1\n    source = ColumnDataSource(data=top)\n    list_second_target = source.data[second_target].tolist()\n    index_label = list_second_target[::-1] # reverse order label\n\n    p = figure(plot_width=500, plot_height=300, y_range=index_label, \n                toolbar_location=None, title=title)   \n\n    \n    # turbo_pallete = Turbo256[0:256:int(256\/len(list_second_target) - 2)][::-1] # proportional of number of bars\n    p.hbar(y=second_target, right=column_target, source=source, height=0.85, line_color=\"#000000\",\n          fill_color=factor_cmap(second_target, palette=inferno(16)[::-1], factors=list_second_target))\n    p.x_range.start = 0  # start value of the x-axis\n\n    p.xaxis.axis_label = \"value of '\" + column_target + \"'\"\n\n    hover = HoverTool()  # initiate hover tool\n    hover.tooltips = [(\"Value\",\"R$ @{\" + column_target + \"}\" ),   \n                       (\"Ranking\",\"@index\u00b0\")]\n\n    hover.mode = 'hline' # set the mode of the hover tool\n    p.add_tools(hover)   # add the hover tooltip to the plot\n\n    return p # show in notebook\n\n# Example\n# show(eda_bokeh_horiz_bar_ranked(df = dfgeo_fuel_last_row['ETANOL HIDRATADO'], column_target = 'avg_price', title = 'AVG Gasolina',\n#     int_top = 5, second_target = 'state') )","2d87d337":"def eda_categ_feat_desc_plot(series_categorical, title = \"\", fix_labels=False):\n    \"\"\"Generate 2 plots: barplot with quantity and pieplot with percentage. \n       @series_categorical: categorical series\n       @title: optional\n       @fix_labels: The labes plot in barplot in sorted by values, some times its bugs cuz axis ticks is alphabethic\n           if this happens, pass True in fix_labels\n       @bar_format: pass {:,.0f} to int\n    \"\"\"\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    \n    fig, ax = plt.subplots(figsize = (15,4), ncols=2, nrows=1) # figsize = (width, height)\n    if(title != \"\"):\n        fig.suptitle(title, fontsize=18)\n        fig.subplots_adjust(top=0.8)\n\n    s = sns.barplot(x=series_name, y='quantity', data=val_concat, ax=ax[0])\n    if(fix_labels):\n        val_concat = val_concat.sort_values(series_name).reset_index()\n    \n    for index, row in val_concat.iterrows():\n        s.text(row.name, row['quantity'], '{:,d}'.format(row['quantity']), color='black', ha=\"center\")\n\n    s2 = val_concat.plot.pie(y='percentage', autopct=lambda value: '{:.2f}%'.format(value),\n                             labels=val_concat[series_name].tolist(), legend=None, ax=ax[1],\n                             title=\"Percentage Plot\")\n\n    ax[1].set_ylabel('')\n    ax[0].set_title('Quantity Plot')\n\n    plt.show()\n","ff3d600f":"def series_remove_outiliers(series):\n    # Use IQR Strategy\n    # https:\/\/machinelearningmastery.com\/how-to-use-statistics-to-identify-outliers-in-data\/\n    # def quantils\n    q25, q75 = series.quantile(0.25), series.quantile(0.75)\n    iqr = q75 - q25\n    print('Percentiles: 25th=%.3f, 75th=%.3f, IQR=%.3f' % (q25, q75, iqr))\n    cut_off = iqr * 1.5\n    lower, upper = q25 - cut_off, q75 + cut_off\n    # identify outliers\n    print('Cut Off: below than', lower, 'and above than', upper)\n    outliers = series[ (series > upper) | (series < lower)]\n    print('Identified outliers: {:,d}'.format(len(outliers)), 'that are',\n          '{:.2%}'.format(len(outliers)\/len(series)), 'of total data')\n    # remove outliers\n    outliers_removed = [x for x in series if x >= lower and x <= upper]\n    print('Non-outlier observations: {:,d}'.format(len(outliers_removed)))\n    series_no_outiliers = series[ (series <= upper) & (series >= lower) ]\n    return series_no_outiliers","e3cab4b0":"def eda_categ_feat_desc_df(series_categorical):\n    \"\"\"Generate DataFrame with quantity and percentage of categorical series\n        @series_categorical = categorical series\n    \"\"\"\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    return val_concat","f55e7677":"from bokeh.io import show\nfrom bokeh.plotting import figure\nfrom bokeh.models import LinearColorMapper, HoverTool, ColorBar\nfrom bokeh.palettes import magma,viridis,cividis, inferno\n\ndef eda_brazil_state_geo_plot(geosource, df_in, title, column, state_column, low = -1, high = -1, palette = -1):\n    \"\"\"\n    Generate Bokeh Plot to Brazil States:\n        geosource: GeoJSONDataSource of Bokeh\n        df_in: DataSet before transformed in GeoJSONDataSource\n        title: title of plot\n        column: column of df_in to be placed values in geoplot\n        state_column: indicate column with names of States\n        low = (optional) min value of range of color spectre\n        high = (optional) max values of range of color spectre\n        palette: (optional) can be magma, viridis, civis, inferno e etc.. (with number os colors)\n            Example: cividis(8) (8 colors to classify), cividis(256)  (256, more colors to clasify)\n    \"\"\"\n    if high == -1:\n        high = max(df_in[column])\n    if low == -1:\n        low = min(df_in[column])\n    if palette == -1:\n        palette = inferno(32)\n        \n    palette = palette[::-1]\n    color_mapper = LinearColorMapper(palette = palette, low = low, high = high)\n    \n    hover = HoverTool(tooltips = [ ('State','@{'+state_column+'}'), (column, '@{'+column+'}{%.2f}')],\n                  formatters={'@{'+column+'}' : 'printf'})\n\n    color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width = 300, height = 20, \n                         border_line_color=None, location = (0,0),  orientation = 'horizontal')\n\n    p = figure(title = title, plot_height = 430, plot_width = 330, tools = [hover])\n\n    p.xgrid.grid_line_color = None\n    p.ygrid.grid_line_color = None\n    p.xaxis.visible = False\n    p.yaxis.visible = False\n\n    p.patches('xs','ys', source = geosource, line_color = 'black', line_width = 0.25,\n              fill_alpha = 1, fill_color = {'field' : str(column), 'transform' : color_mapper})\n\n    p.add_layout(color_bar, 'below')\n    return p   ","517f043e":"from bokeh.palettes import Turbo256 \nfrom bokeh.models import ColumnDataSource\nfrom bokeh.transform import factor_cmap\nfrom bokeh.palettes import magma,viridis,cividis, inferno\n\ndef eda_bokeh_horiz_bar_ranked(df, column_target, title = '', int_top = 3, second_target = 'state'):\n    \"\"\"\n    Generate Bokeh Plot ranking top fists and last value:\n        df: data_frame\n        column_targe: a column of df inputed\n        title: title of plot\n        int_top: number of the tops\n        column: column of df_in to be placed values in geoplot\n        second_targe = 'state'\n    \"\"\"\n    ranked = df.sort_values(by=column_target).reset_index(drop = True)\n    top_int = int_top\n    top = ranked[:top_int].append(ranked[-top_int:]).drop(['geometry'], axis = 1)\n    top.index = top.index + 1\n    source = ColumnDataSource(data=top)\n    list_second_target = source.data[second_target].tolist()\n    index_label = list_second_target[::-1] # reverse order label\n\n    p = figure(plot_width=500, plot_height=300, y_range=index_label, \n                toolbar_location=None, title=title)   \n\n    \n    # turbo_pallete = Turbo256[0:256:int(256\/len(list_second_target) - 2)][::-1] # proportional of number of bars\n    p.hbar(y=second_target, right=column_target, source=source, height=0.85, line_color=\"#000000\",\n          fill_color=factor_cmap(second_target, palette=inferno(16)[::-1], factors=list_second_target))\n    p.x_range.start = 0  # start value of the x-axis\n\n    p.xaxis.axis_label = \"value of '\" + column_target + \"'\"\n\n    hover = HoverTool()  # initiate hover tool\n    hover.tooltips = [(\"Value\",\"R$ @{\" + column_target + \"}\" ),   \n                       (\"Ranking\",\"@index\u00b0\")]\n\n    hover.mode = 'hline' # set the mode of the hover tool\n    p.add_tools(hover)   # add the hover tooltip to the plot\n\n    return p # show in notebook\n\n# Example\n# show(eda_bokeh_horiz_bar_ranked(df = dfgeo_fuel_last_row['ETANOL HIDRATADO'], column_target = 'avg_price', title = 'AVG Gasolina',\n#     int_top = 5, second_target = 'state') )","9ef18469":"def describe_horizontal_serie(serie):\n    adec = serie.describe()\n    adtype = serie.dtype\n    adf = pd.DataFrame(data=adec.values).T\n    adf.columns = adec.index\n    adf.index = pd.Index([adec.name])\n    if(adtype in ['int64']):\n        alist = ['min', '25%', '50%', '75%', 'max']\n        for c in alist:\n            adf[c] = adf[c].astype('int64')\n            adf[c] = adf[c].map(lambda x: \"{:,d}\".format(int(x)))\n    adf['count'] = adf['count'].map(lambda x: \"{:,d}\".format(int(x)))\n    return adf","a62117e0":"# rename columns\ndf.rename(\n    columns={\n        \"DATA INICIAL\": \"start_date\",\n        \"DATA FINAL\": \"end_date\",\n        \"REGI\u00c3O\": \"region\",\n        \"ESTADO\": \"state\",\n        \"PRODUTO\": \"fuel\",\n        \"N\u00daMERO DE POSTOS PESQUISADOS\": \"n_gas_stations\",\n        \"UNIDADE DE MEDIDA\": \"unit\",\n        \"PRE\u00c7O M\u00c9DIO REVENDA\": \"avg_price\",\n        \"DESVIO PADR\u00c3O REVENDA\": \"sd_price\",\n        \"PRE\u00c7O M\u00cdNIMO REVENDA\": \"min_price\",\n        \"PRE\u00c7O M\u00c1XIMO REVENDA\": \"max_price\",\n        \"MARGEM M\u00c9DIA REVENDA\": \"avg_price_margin\",\n        \"ANO\": \"year\",\n        \"M\u00caS\": \"month\",\n        \"COEF DE VARIA\u00c7\u00c3O DISTRIBUI\u00c7\u00c3O\": \"coef_dist\",\n        \"PRE\u00c7O M\u00c1XIMO DISTRIBUI\u00c7\u00c3O\": \"dist_max_price\",\n        \"PRE\u00c7O M\u00cdNIMO DISTRIBUI\u00c7\u00c3O\": \"dist_min_price\",\n        \"DESVIO PADR\u00c3O DISTRIBUI\u00c7\u00c3O\": \"dist_sd_price\",\n        \"PRE\u00c7O M\u00c9DIO DISTRIBUI\u00c7\u00c3O\": \"dist_avg_price\",\n        \"COEF DE VARIA\u00c7\u00c3O REVENDA\": \"coef_price\"\n    },\n    inplace=True\n)","bbe5d275":"# converter several units of measurement for a single\nevent_dictionary_units = {'R$\/l ' : 'R$\/l', 'R$\/13Kg' : 'R$\/l', 'R$\/m3' : 'R$\/l'}\nevent_dictionary_conversion = {'R$\/l' : 1 , 'R$\/13Kg' : 0.00006153, 'R$\/m3' : 0.001}\n\ndf['conversion'] = df['unit'].map(event_dictionary_conversion) # new column\ndf['avg_price'] = df.avg_price * df.conversion # convert avg_price to R$\/l numeric\ndf['unit'] = df['unit'].map(event_dictionary_units)","29dd6410":"# Convert to Number\nnumeric_columns = ['sd_price','min_price', 'max_price','avg_price_margin','coef_price', \n                        'dist_avg_price', 'dist_sd_price', 'dist_min_price', 'dist_max_price',\n                        'coef_dist']\nfor col in numeric_columns:\n  df[col] = pd.to_numeric(df[col], errors='coerce')\n\n# Convert to Date Coluns to DateTime\nfor col in ['start_date', 'end_date']:\n    df[col] = pd.to_datetime(df[col]) ","d6d992a6":"# remove useless columns\ndf = df.drop([\"unit\", \"conversion\", 'Unnamed: 0'], axis = 1) ","1191ff9c":"# final dataset\ndf.head()","522b9f46":"sns.heatmap(df.isnull(), cbar=False)\nplt.show()","1fdf0b20":"# replace with median values\ndf['avg_price_margin'].fillna(df['avg_price_margin'].median(), inplace = True)\ndf['dist_avg_price'].fillna(df['dist_avg_price'].median(), inplace = True)\ndf['dist_sd_price'].fillna(df['dist_sd_price'].median(), inplace = True)\ndf['dist_min_price'].fillna(df['dist_min_price'].median(), inplace = True)\ndf['dist_max_price'].fillna(df['dist_max_price'].median(), inplace = True)\ndf['coef_dist'].fillna(df['coef_dist'].median(), inplace = True)","0fcfc3f8":"sns.heatmap(df.isnull(), cbar=False)\nplt.show()","3883b64c":"eda_categ_feat_desc_plot(df['region'], 'Records by Region')","ad7674c2":"describe_horizontal_serie(df['n_gas_stations'])","d9f5d61b":"f, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(17, 3))\n\nsns.boxplot(x=df['n_gas_stations'], ax=ax1)\nsns.boxplot(x=series_remove_outiliers(df.query('state != \"SAO PAULO\"')['n_gas_stations']), ax=ax2)\n\nax1.set_title(\"Dist. of Number of gas Station in All States\")\nax2.set_title(\"Dist. of Number of gas Station in All States (Remove Outiliers)\")\n\nplt.show()","a20e8942":"eda_categ_feat_desc_plot(df['fuel'], 'Fuel Distribution')","8820b501":"fig, ax = plt.subplots(figsize=(18,6))\nax = sns.countplot(x=\"year\", data=df)\nplt.title(\"Number of records per year\", fontsize=24)\nplt.xlabel('Year', fontsize=18)\nplt.ylabel('Count', fontsize=18)\nplt.xticks(rotation=45, fontsize=12, ha='right')\nplt.show()","58a7d6ef":"# dict to mapping states\nobj_map_states = {\n 'ACRE': 'AC',\n 'ALAGOAS': 'AL',\n 'AMAPA': 'AP',\n 'AMAZONAS': 'AM',\n 'BAHIA': 'BA',\n 'CEARA': 'CE',\n 'DISTRITO FEDERAL': 'DF',\n 'ESPIRITO SANTO': 'ES',\n 'GOIAS': 'GO',\n 'MARANHAO': 'MA' ,\n 'MATO GROSSO': 'MT' ,\n 'MATO GROSSO DO SUL': 'MS',\n 'MINAS GERAIS': 'MG',\n 'PARA': 'PA',\n 'PARAIBA': 'PB',\n 'PARANA': 'PR',\n 'PERNAMBUCO': 'PE',\n 'PIAUI': 'PI',\n 'RIO DE JANEIRO': 'RJ',\n 'RIO GRANDE DO NORTE': 'RN',\n 'RIO GRANDE DO SUL':  'RS',\n 'RONDONIA': 'RO',\n 'RORAIMA': 'RR',\n 'SANTA CATARINA': 'SC',\n 'SAO PAULO': 'SP',\n 'SERGIPE': 'SE',\n 'TOCANTINS': 'TO'\n}\nobj_map_states = {v: k for k, v in obj_map_states.items()}\n\nmapping_dict_regions = {'3': 'NORTE', '4': 'NORDESTE', '2': 'SUDESTE', '1': 'SUL', '5': 'CENTRO OESTE'}","e923a66a":"# import brazil-state.geojson and prepare it\n\nimport geopandas as gpd\n\n# get geojson\nbrazil_geojson = gpd.read_file('..\/input\/brazilstatejsongeogrpah\/brazil-states.geojson')\n# sort\nbrazil_geojson = brazil_geojson.sort_values('name')\n# delete useless columns\ncolumns_to_drop = ['id', 'codigo_ibg', 'cartodb_id', 'created_at', 'updated_at']\nbrazil_geojson = brazil_geojson.drop(columns_to_drop, axis = 1)\n# Map state name\nbrazil_geojson['sigla'].tolist()\nbrazil_geojson['state_sigla'] = brazil_geojson['sigla'].map(lambda v: obj_map_states[v])\n# region\nbrazil_geojson['regiao_id'] = brazil_geojson['regiao_id'].map(mapping_dict_regions)\n\nbrazil_geojson.head()","4ea77b6b":"# create dict with last row to each product\n\ndict_fuel_last_row = {}\n\nall_states = df['state'].unique().tolist()\nall_fuel = df['fuel'].unique().tolist()\nfor f in all_fuel:\n    # get last row to each fuel f to each one of 27 states\n    by_state = []\n    for s in all_states:\n        try:\n            by_state.append( df[ (df['fuel'] == f) & (df['state'] == s) ]['start_date'].idxmax() )\n        except:\n            # Dont exist GNV in Roraima\n            print('Dont exist ...', f,s)\n            continue\n    dict_fuel_last_row[f] = df.iloc[ by_state ]\n","185a14f7":"# Copy a row of ACRE to RORAIMA\n\nroraima_gnv_row = dict_fuel_last_row['GNV'].loc[ dict_fuel_last_row['GNV']['state'] == 'ACRE']\nroraima_gnv_row['state'] = 'RORAIMA'\ndict_fuel_last_row['GNV'] = dict_fuel_last_row['GNV'].append(roraima_gnv_row, ignore_index = True)\nlen(dict_fuel_last_row['GNV'])","4ec0d6fe":"# Create df_geo (df join geo) and GeoJSONDataSource to each fuel using last date record\n\nfrom bokeh.models import GeoJSONDataSource\n\ndfgeo_fuel_last_row = {}\ngeosource_fuel_last_row = {}\nfor key, value in dict_fuel_last_row.items():\n    dfgeo_fuel_last_row[key] = brazil_geojson.merge(dict_fuel_last_row[key], left_on = 'state_sigla', right_on = 'state').drop(['start_date', 'end_date'], axis = 1)\n    geosource_fuel_last_row[key] = GeoJSONDataSource(geojson = dfgeo_fuel_last_row[key].to_json())  ","f93c4876":"# Generate to one price\/dist to each fuel\n# type = avg_price, sd_price, min_price, max_price, avg_price_margin, coef_price, dist_avg_price,\n#        dist_sd_price, dist_min_price, dist_max_price, coef_dist\n\ntype_price = 'avg_price'\ngeo = {}\nrank = {}\nfor p in geosource_fuel_last_row.keys():\n    product = p\n    \n    geo[p] =  eda_brazil_state_geo_plot( geosource_fuel_last_row[product], dfgeo_fuel_last_row[product], type_price + ' to ' + product, \n                                    type_price, \"state\", palette = inferno(16) )\n    \n    rank[p] =   eda_bokeh_horiz_bar_ranked(df = dfgeo_fuel_last_row[product], column_target = type_price,\n                                      title = 'Ranking: first and last 5 of ' + product , int_top = 5, second_target = 'state')","a359880f":"# Choose One : ['ETANOL HIDRATADO', 'GASOLINA COMUM', 'GLP', 'GNV', '\u00d3LEO DIESEL', '\u00d3LEO DIESEL S10']\n\nfrom bokeh.layouts import row\n\np = '\u00d3LEO DIESEL S10'\nshow( row( geo[p],  rank[p]))","15672e1e":"p = 'GASOLINA COMUM'\nshow( row( geo[p],  rank[p]))","dac3c768":"# Example to generate other price\/coef Generate content to 'dist_avg_price'\ntype_price = 'dist_avg_price'\ngeo1 = {}\nrank1 = {}\nfor p in geosource_fuel_last_row.keys():\n    product = p\n    \n    geo1[p] =  eda_brazil_state_geo_plot( geosource_fuel_last_row[product], dfgeo_fuel_last_row[product], type_price + ' to ' + product, \n                                    type_price, \"state\", palette = inferno(16) )\n    \n    rank1[p] =   eda_bokeh_horiz_bar_ranked(df = dfgeo_fuel_last_row[product], column_target = type_price,\n                                      title = 'Ranking: first and last 5 of ' + product , int_top = 5, second_target = 'state')","e101e741":"p = 'GASOLINA COMUM'\nshow( row( geo1[p],  rank1[p]))","6ae24f18":"p = '\u00d3LEO DIESEL'\nshow( row( geo1[p],  rank1[p]))","25fe8f8b":"# avg_price, sd_price, min_price, max_price, avg_price_margin, coef_price, \n# dist_avg_price, dist_sd_price, dist_min_price, dist_max_price, coef_dist\ntype_price = 'coef_dist' \n\n# 'ETANOL HIDRATADO', 'GASOLINA COMUM', 'GLP', 'GNV', '\u00d3LEO DIESEL', '\u00d3LEO DIESEL S10']\nproduct = 'GASOLINA COMUM' \n\ngeo2 = eda_brazil_state_geo_plot( geosource_fuel_last_row[product], dfgeo_fuel_last_row[product], type_price + ' to ' + product, \n                                    type_price, \"state\", palette = inferno(16) )\nrank2 = eda_bokeh_horiz_bar_ranked(df = dfgeo_fuel_last_row[product], column_target = type_price,\n                                      title = 'Ranking: first and last 5 of ' + product , int_top = 5, second_target = 'state')\n    \nshow( row( geo2, rank2) )","2cad1298":"# max of gas_station to each state\n\ndf_gas_s = df.groupby(['state']).max()['n_gas_stations']\ndf_gas_s.sort_values(ascending = False)","57ab6195":"# mean of all records to each state\n\ndf_gas_s = df.groupby(['state']).mean()['n_gas_stations']\ndf_gas_s.sort_values(ascending = False)","5a66dc16":"df_gas_s = df.groupby(['state']).sum()['n_gas_stations']\ndf_gas_s.sort_values(ascending = False)","d62828de":"df_price = df.query(\"fuel == 'GASOLINA COMUM'\").groupby(['state']).mean()['avg_price'].sort_values(ascending = False)\ndf_price = df_price.to_frame().reset_index()\ndf_price['name'] = df_price['state'].apply(lambda name: name.capitalize())\ndf_price.sort_values('avg_price', ascending=False).head()","4b3b48da":"df_avg_all_gas = brazil_geojson.merge(df_price, left_on = 'state_sigla', right_on = 'state').drop(['state_sigla'], axis = 1)\n\ngeo_source_avg_all_gas = GeoJSONDataSource(geojson = df_avg_all_gas.to_json())\n\ntype_price = 'avg_price'\nproduct = 'GASOLINA COMUM'\n\ngeo3 = eda_brazil_state_geo_plot(\n    geo_source_avg_all_gas, df_avg_all_gas,\n    \"avg_price of gas ('GASOLINA COMUM') of all time\", type_price, \"state\", palette = inferno(16) )\n\nrank3 = eda_bokeh_horiz_bar_ranked(\n    df = df_avg_all_gas, column_target = type_price, \n    title = 'Ranking: first and last 5 of ' + product , int_top = 5, second_target = 'state')\n    \nshow( row( geo3, rank3) )","b5b4c024":"fig, (ax1, ax2) = plt.subplots(1, 2)\nfig.suptitle('More expensive and cheaper gas')\n\ndf.query(\"fuel == 'GASOLINA COMUM' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax1, figsize = (16,5), grid = True, legend = False)\nax1.set_ylabel(\"avg_price\")\nax1.set_title(\"All States\")\n\ndf.query(\"fuel == 'GASOLINA COMUM' & state in ['SAO PAULO', 'ACRE']\").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax2, figsize = (16,5), grid = True)\nax2.set_ylabel(\"avg_price\")\nax2.set_title(\"SAO PAULO x ACRE\")\n\nplt.show()","60253d35":"df_re = df.query('fuel == \"GASOLINA COMUM\" & year == 2019').groupby(['year','region']).mean()['avg_price'].reset_index()\n\ngeoplot_region = brazil_geojson.dissolve(by='regiao_id').reset_index()\n\n## Plot region\n# geoplot_region['geometry'][1]\n\ndrop_columns = ['name', 'sigla', 'year', 'regiao_id']\ngeoplot_re_final = geoplot_region.merge(df_re, left_on = 'regiao_id', right_on = 'region').drop(drop_columns, axis = 1)\ngeo_source_region_gas = GeoJSONDataSource(geojson = geoplot_re_final.to_json())\n\ngeoplot_re_final.head()","f5b059d4":"# Plot 'GASOLINA COMUM' avg_price in 2019\nshow(\n    eda_brazil_state_geo_plot( geo_source_region_gas, geoplot_re_final, \"avg_price of gas by region in 2019\",\n                              'avg_price', \"region\", palette = inferno(16) )\n)","76a9e1c7":"# Evolution of gas by region since 2004 to 2019\n\nfig, ax = plt.subplots(figsize=(15,5))\ndf.query('fuel == \"GASOLINA COMUM\"').groupby(['year','region']).mean()['avg_price'].unstack().plot(ax=ax)\nax.set_ylabel(\"avg_price\")\nax.set_title(\"avg_price of gas per region\")\nplt.grid(True)","e885220c":"# Plot evolution of each region states separated\n\nfig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, sharex=True, sharey=True, figsize=(15,15) )\nfig.suptitle('Gas per Region')\n\ndf.query(\"fuel == 'GASOLINA COMUM' & region == 'NORDESTE' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax1, figsize = (15,9), grid = True)\nax1.set_ylabel(\"avg_price\")\nax1.set_title(\"Gas in NORDESTE\")\n\ndf.query(\"fuel == 'GASOLINA COMUM' & region == 'SUL' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax2, figsize = (15,9), grid = True)\nax2.set_ylabel(\"avg_price\")\nax2.set_title(\"Gas in SUL\")\n\ndf.query(\"fuel == 'GASOLINA COMUM' & region == 'NORTE' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax3, figsize = (15,9), grid = True)\nax3.set_ylabel(\"avg_price\")\nax3.set_title(\"Gas in NORTE\")\n\ndf.query(\"fuel == 'GASOLINA COMUM' & region == 'CENTRO OESTE' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax4, figsize = (15,9), grid = True)\nax4.set_ylabel(\"avg_price\")\nax4.set_title(\"Gas in CENTRO OESTE\")\n\ndf.query(\"fuel == 'GASOLINA COMUM' & region == 'SUDESTE' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax5, figsize = (15, 27), grid = True)\nax5.set_ylabel(\"avg_price\")\nax5.set_title(\"Gas in SUDESTE\")\n\nplt.show()","0834ad2f":"# Plot all state avg by year\n\nfig, ax1 = plt.subplots(figsize=(15,7))\ndf.query(\"fuel == 'GASOLINA COMUM' \").groupby(\n    ['year','state']).mean()['avg_price'].unstack().plot(ax=ax1, figsize = (16,5), grid = True)\nax1.set_ylabel(\"avg_price\")\nax1.set_title(\"All States\")\nplt.legend(bbox_to_anchor=(0, 1), loc='upper left', ncol=2)\n\nplt.show()","34db2703":"# Generate dataframe 'df_diff_2017_2018' with the increase of gas price betwen 2017 and 2018\n\ndiff = df.query(\"fuel == 'GASOLINA COMUM' \").groupby(['year','state']).mean()['avg_price'].reset_index()\n\ndiff_2017 = diff.query('year == 2017')\ndiff_2018 = diff.query('year == 2018')\n\n\nrename_columns = {'avg_price_x': 'avg_price_2018', 'avg_price_y': 'avg_price_2017'}\n\ndf_diff_2017_2018 = diff_2018.merge(diff_2017, left_on = 'state', right_on = 'state').rename(\n    rename_columns, axis = 1).drop(['year_x','year_y'], axis = 1)\n\ndf_diff_2017_2018['increase'] = df_diff_2017_2018['avg_price_2018'] - df_diff_2017_2018['avg_price_2017']\ndf_diff_2017_2018.sort_values('increase', ascending = False).head()","72c5ad33":"# Plot gas price difference between 2017 and 2018\n\ndf_geo_diff_2017_2018 = brazil_geojson.merge(df_diff_2017_2018, left_on = 'state_sigla', right_on = 'state').drop(['sigla'], axis = 1)\ndf_geo_diff_2017_2018.head()\n\ngeo_source_diff_2017_2018 = GeoJSONDataSource(geojson = df_geo_diff_2017_2018.to_json())\n\ntype_price = 'increase'\n\ngeo_plot = eda_brazil_state_geo_plot( geo_source_diff_2017_2018, df_geo_diff_2017_2018, \"Increase in gasoline between 2017 and 2018\", type_price, \"state\", palette = inferno(16) )\n\nrank_plot = eda_bokeh_horiz_bar_ranked(df = df_geo_diff_2017_2018, column_target = type_price,\n                                      title = 'Ranking: first and last 8 of increase in gasoline' , int_top = 8, second_target = 'state')\n    \nshow( row( geo_plot, rank_plot) )","8b6cef1e":"# Generate dataframe 'df_diff_2017_2018' with the increase of gas price betwen 2017 and 2018\n\ndiff = df.query(\"fuel == 'GASOLINA COMUM' \").groupby(['year','state']).mean()['avg_price'].reset_index()\n\ndiff_2017 = diff.query('year == 2017')\ndiff_2018 = diff.query('year == 2018')\ndiff_2019 = diff.query('year == 2019')\n\n\nrename_columns = {'avg_price_x': 'avg_price_2018', 'avg_price_y': 'avg_price_2017'}\n\ndf_diff_2017_2018 = diff_2018.merge(diff_2017, left_on = 'state', right_on = 'state').rename(rename_columns, axis = 1)\n\ndf_diff_2017_2019 = diff_2019.merge(df_diff_2017_2018, left_on = 'state', right_on = 'state')\n\ndf_diff_2017_2019\n\ndf_diff_2017_2019['increase2'] = df_diff_2017_2019['avg_price'] - df_diff_2017_2019['avg_price_2018']\ndf_diff_2017_2019.sort_values('increase2', ascending = False).head()","b9213c69":"df_geo_diff_2017_2019 = brazil_geojson.merge(df_diff_2017_2019, left_on = 'state_sigla', right_on = 'state').drop(['state_sigla'], axis = 1)\n\ngeo_source_diff_2017_2019 = GeoJSONDataSource(geojson = df_geo_diff_2017_2019.to_json())\n\ntype_price = 'increase2'\n\ngeo_plot = eda_brazil_state_geo_plot( geo_source_diff_2017_2019, df_geo_diff_2017_2019, \"Increase in gasoline between 2018 and 2019\",\n                                     type_price, \"state\", palette = inferno(32) )\n\nrank_plot = eda_bokeh_horiz_bar_ranked(df = df_geo_diff_2017_2019, column_target = type_price,\n                                      title = 'Ranking: first and last 8 of increase in gasoline' , int_top = 8, second_target = 'state')\n    \nshow( row( geo_plot, rank_plot) )","bccedb3f":"# Plot evolution of gas price by region between 2017 and 2019\n\nfig, ax = plt.subplots(figsize=(15,5))\ndf.query('fuel == \"GASOLINA COMUM\" & year in [2017, 2018, 2019]' ).groupby(['year','region']).mean()['avg_price'].unstack().plot(ax=ax)\nax.set_ylabel(\"avg_price\")\nax.set_title(\"avg_price of gas per region betwen 2017 and 2019\")\nplt.grid(True)\nplt.show()","4b9e8ced":"### Growth in regions in recent years recorded","3b56e01b":"<h1 align=\"center\"> Gas Prices in Brazil: EDA <\/h1>\n\n<img src=\"https:\/\/www.ctmdesign.ca\/wp-content\/uploads\/2016\/07\/DSC_6804-768x511.jpg\" width=\"50%\" \/>\n\nCreated: 2020-08-01\n\nLast updated: 2020-10-10\n\nKaggle Kernel made by \ud83d\ude80 <a href=\"https:\/\/www.kaggle.com\/rafanthx13\"> Rafael Morais de Assis<\/a>\n","413be389":"## Question: Which state has max and min price of gas (GASOLINA COMUM)  <a id='index22'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n","ad609a01":"## Undestand DataSet\n\nSource: National Agency of Petroleum, Natural Gas and Bio fuels (ANP-Brazil).\n\nDataSet =  21 columns and 106.822 rows\n\n**Columns**\n+ `start_date`: First day of analyses in the week\n+ `end_date`: Last day of analyses in the week\n+ `region`: Macro region\n - 5 uniques `['NORDESTE', 'NORTE', 'SUDESTE', 'CENTRO OESTE', 'SUL']`\n+ `state`: State of Brazil\n - One of 27 states from Brazil\n+ `fuel`\n - `['\u00d3LEO DIESEL', 'GASOLINA COMUM', 'GLP', 'ETANOL HIDRATADO', 'GNV', '\u00d3LEO DIESEL S10']`\n+ `n_gas_stations` :: int :: Number of Gas Stations analyzed\n  - [1, 4167]\n+ `unit`: Measurement unit\n - `'R$\/l' : 1 , 'R$\/13Kg' : 0.00006153, 'R$\/m3' : 0.001`\n+ `avg_price`: Mean Market Value\n+ `sd_price`: Standard Deviation Market Value\n+ `min_price`: Min Market Price Observed\n+ `max_price`: Max Market Price Observed\n+ `avg_price_margin`: Mean Market Price Margin\n+ `coef_price`: Coefficient of Variation of Market Price\n+ `dist_avg_price`: Mean Distribution Value\n+ `dist_sd_price`: Standard Deviation Distribution Value\n+ `dist_min_price`: Min Distribution Price Observed\n+ `dist_max_price`: Max Distribution Price Observed\n+ `coef_dist`: Coefficient of Variation of Distribution Price\n+ `month`: month\n+ `year`: year :: int\n  - `[2004 to 2019]`","e0d609c9":"### Solution <a id='index23'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n\nBy averaging the prices of all records betwen 2004 and 2019, we has to gas:\n+ **Sao Paulo** is the cheapest\n+ **Acre** is the most expensive","26c66c4d":"## Prepare Choropleth map <a id='index11'><\/a>","e2f56a43":"#### Between 2017 and 2018","ab5a57c7":"### Generate Prices and Ranking plots\n\nYou can generate 2 plots for last record of products by state\n\n1. Geoplot\n2. Barplot Horizontal (top n bigger prices and smaller prices)\n\nChoose any combination of fuels and prices\n\nprices: \n\n`[avg_price, sd_price, min_price, max_price, avg_price_margin, coef_price, dist_avg_price, dist_sd_price, dist_min_price, dist_max_price, coef_dist]`\n\nfuel: \n\n`['ETANOL HIDRATADO', 'GASOLINA COMUM', 'GLP', 'GNV', '\u00d3LEO DIESEL', '\u00d3LEO DIESEL S10']`","3abceac1":"### Handle Missing Data <a id='index05'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","2ad5e2ff":"## Problem: What is state with largest number of gas stations? <a id='index20'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n\nHow each record is made by many gas station, so there are two options: get avg of gas stations or max number","785f3182":"### Gas price growth in recent years \n\n#### All Period","241555ad":"## fuel <a id='index09'><\/a>","33b45cb4":"### Price of `avg_price` on `GASOLINA COMUM` (Gas) by state in the last day recorded <a id='index14'><\/a>","d37f69ec":"## Gas Prices in Brazil: EDA\n\nThe National Agency of Petroleum, Natural Gas and Bio fuels (ANP in Portuguese) releases weekly reports of gas, diesel and other fuels prices used in transportation across the country. These datasets bring the mean value per liter, number of gas stations analyzed and other information grouped by regions and states across the country.\n\n[Kaggle Dataset Source](https:\/\/www.kaggle.com\/matheusfreitag\/gas-prices-in-brazil)\n\n## References\n\n+ **Geo_plot with Bokeh**\n - [Source of GeoJson Brazil States](https:\/\/github.com\/codeforamerica\/click_that_hood\/blob\/master\/public\/data\/brazil-states.geojson)\n - https:\/\/towardsdatascience.com\/walkthrough-mapping-basics-with-bokeh-and-geopandas-in-python-43f40aa5b7e9\n - https:\/\/www.kaggle.com\/elloaguedes\/panorama-do-covid-19-no-brasil\/execution\n+ Kernels Ideias\n - https:\/\/www.kaggle.com\/gclindsey\/geospatial-analysis-of-gas-prices-in-brazil\/\n - https:\/\/www.kaggle.com\/egenaz\/gas-prices-in-brazil-eda\n \n\n### Exploration Data Analysis Questions\n\n**Questions**\n+ Which states are the cheapest (or most expensive) for different types of fuels in last record\n+ State with the largest and smallest number of gas stations\n+ On average the state with the cheapest and most expensive price of gasoline\n+ Analyze gasoline growth by regions\n  - Investigate the evolution of gasoline prices in the last two years\n    * By Region\n    * By States \n\n","ae66196b":"## EDA over last record <a id='index12'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","e50626e8":"### Solution <a id='index21'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n\nState with **largest** number of gas stations analysed: **S\u00e3o Paulo**\n+ 6.792.250 analyzes were made in this state between 2004 and 2019\n+ The average number of gas stations per registration is 1593.302838\n+ The largest number of gas stations analyzed in a single registry in this state is 4167 \n\nState with **lowest** number of gas stations analysed: **Amapa**\n+ 74.410 analyzes were made in this state between 2004 and 2019\n+ The average number of gas stations per registration is 21.866001 \n+ The largest number of gas stations analyzed in a single registry in this state is 55 ","af95a852":"### Price of `dist_avg_price` on `\u00d3LEO DIESEL` by state in the last day recorded <a id='index16'><\/a>","e223cc9b":"### Price of `dist_avg_price` on `GASOLINA COMUM` by state in the last day recorded <a id='index15'><\/a> ","8f02e6f9":"### n_gas_stations <a id='index08'><\/a>","1a9fc362":"## Analisys Columns <a id='index06'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n### region <a id='index07'><\/a>","387115f2":"## Snippets <a id='index02'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","decbb418":"## Question: In-depth analysis of gas prices in the regions <a id='index24'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n**QUESTIONS**\n+ Understand how the southeast region became the most expensive from 2017 to 2019\n+ To analyze the price evolution by states between 2017-2018 and 2018-2019\n\nOne of the biggest reasons why the SOUTHWEST becomes the most expensive region was that RIO DE JANEIRO AND MINAS GERAIS HAS PRICELY INCREASED THE PRICE IN THE SEMESTER OF 2018\n\n### Evolution of gas price by region by state","0d520700":"#### Between 2018 and 2019","c6b4ddcd":"## Conclusion on gasoline price growth in states and regions <a id='index25'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n\nHow did the southeast become the most expensive region?\n\n##### How did the southeast become the most expensive region?\n\nThe Southeast has become the most expensive region because: Minas Gerais and Rio de Janeiro had the biggest increase in gasoline prices between 2017 and 2018, being the first and fourth largest increases, respectively. In addition, as the SOUTHEAST region has few states, this increase has more impact on the calculation of regions.\n\n##### Between 208 and 2019 we have\n\n+ In the (Nordeste) Northeast region it grew, leaving the fourth place with the highest price and going to the second place\n  - The Northeast region had a great increase in the states: Maranhao, Piaui and Bahia, and in its great majority the reduction of prices prevailed in the region, thus the increase being in second place\n+ (Centro Oeste) Midwest Region, (Norte) North and (Sul) South region had a similar drop\n  - In the Northern states, while there were some with an increase (like Rondonia, the fifth largest increase), there were others that had a great reduction (Amazona and Roraima), both of which prevail over the state as a whole.\n+ The (Sudeste) Southeast region was stagnant\n  - The Southeast had in most of the states fall, but Espirito Santo which had the 3 increase hinders. The region has decreased in price but not so much.\n  \n**Conclusion:** Despite the tendency to lower prices in all states the southeastern region has stagnated and the northeastern region has increased while the others have become cheaper.\n\n<!--\n\nEntre 2017 e 2018\n\nEntre 2018 e 2019 a maioria dos pre\u00e7os baixaram, mas.\n\n+ Na regi\u00e2o Nodeste cresceu, saindo da quarto colocado de maior pre\u00e7o e indo para a segunda coloca\n+ Regi\u00e3o Centro Oeste, Norte Sul tiveram uma queda parecida parecidas\n+ A regi\u00e3o Sudeste ficou estagnada\n\nNos estados do Norte ao mesmo tempo que houve alguns com aumento (como Rondonia o quinto maior aumento) houve outros que tiveram grandes redu\u00e7\u00e3o (Amazona e Roraima), sendos esse prevalecendo sobre o estado como um todo.\n\nA regi\u00e2o Nordeste teve grande aumenta nos estaod: Maranhao, Piaui e Bahia, e em sua grande maioria foi pequena a redu\u00e7\u00e2o dos pre\u00e7os prevalecendo na regiao assim o aumeto ficando em segundo lugar\n\nO Sudeste teve na maior parte dos estaod queda, mas Espirito Santo que teve o 3 aumento atrapalha. A regiao diminuu de pre\u00e7o mas nao tanto\n\nANLISE ENTRE 2018 E 2019\n\napesar da tendencia de baixar pre\u00e7os em todos os estados os a regi\u00e3o sudeste se estagnou e o de nodeste aumentou enquanto os outros ficaram mais baratos\n-->\n","fe3a5906":"## Table Of Content (TOC) <a id=\"top\"><\/a>\n\n+ [Import Libs and DataSet](#index01) \n+ [Snippets](#index02)\n+ [Restrucutre DataSet](#index03)\n  - [Rename and Convert Columns](#index04)\n  - [Handle Missing Data](#index05)\n+ [Analysis Columns](#index06)\n  - [region](#index07)\n  - [n_gas_stations](#index08)\n  - [fuel](#index09)\n  - [year](#index10)\n+ [Prepare Choropleth map](#index11)\n+ [EDA over last record ...](#index12)\n  - [Price of `avg_price` on `'\u00d3LEO DIESEL S10'` by state](#index13)\n  - [Price of `avg_price` on `GASOLINA COMUM` (Gas) by state](#index14)\n  - [Price of `dist_avg_price` on `GASOLINA COMUM` by state](#index15)\n  - [Price of `dist_avg_price` on `\u00d3LEO DIESEL` by state](#index16)\n+ [Quetion: What is state with largest number of gas stations?](#index20)\n+ [Question: Which state has max and min price of gas (GASOLINA COMUM)](#index22)\n+ [Question: Which region is most expensive?](#index23)\n+ [Question: In-depth analysis of gas prices in the regions](#index24)\n+ [Conclusion on gasoline price growth in states and regions](#index25)\n\n\n\n\n## Imports Libs and DataSet","af95eb49":"### Prepare `brazil-state.geoson`","3e8a396f":"## Restrucutre DataSet <a id='index03'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n### Rename and Convert Columns <a id='index04'>","9a112a76":"## Question: Which region is most expensive? <a id='index23'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n","cf7e963c":"### Generate any combination plot of one *prices* with one *product* to each state in the last day recorded","e3f114a0":"### year <a id='index10'><\/a>","63997825":"### Price of `avg_price` on `'\u00d3LEO DIESEL S10'` by state in the last day recorded <a id='index13'><\/a>","639943b9":"### Observe the evolution of the state price with the cheapest and most expensive gasoline price"}}