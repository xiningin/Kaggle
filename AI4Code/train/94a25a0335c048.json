{"cell_type":{"c381b960":"code","20d4f0b9":"code","0dec2988":"code","4ac64b06":"code","c6473ca9":"code","947ee8f5":"code","2319f816":"code","a9a9c16b":"code","cc7d77ec":"code","fb21fb59":"code","49f7150d":"code","256bd3b7":"code","5dd23d98":"code","27eca00e":"code","0af0f9a1":"code","19346ccd":"code","c64d8a43":"code","87031495":"code","c7ac34f5":"code","bd12dff6":"code","d1f009c6":"code","a0a820a3":"markdown","d1621f79":"markdown","9a53b7a5":"markdown","7a1e0e2f":"markdown","644f2359":"markdown","cf54f57a":"markdown","1fd971ce":"markdown","2c50e743":"markdown","a3d99be5":"markdown","910bde6d":"markdown","5dbb6f87":"markdown","a1d56952":"markdown","2fe51dd6":"markdown","9f6c9a44":"markdown","efd7e55d":"markdown","1011ee4c":"markdown","8744351a":"markdown","c4fc3f68":"markdown","f8506a6e":"markdown","009cb2fb":"markdown"},"source":{"c381b960":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20d4f0b9":"pip install pillow ","0dec2988":"!pip install git+https:\/\/github.com\/lisphilar\/covid19-sir#egg=covsirphy ","4ac64b06":"import covsirphy as cs","c6473ca9":"import numpy as np\nimport pandas as pd\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nimport functools\nfrom IPython.display import display, Markdown\nimport math\nimport os\nfrom pprint import pprint\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib\nfrom matplotlib.ticker import ScalarFormatter\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport dask.dataframe as dd\npd.plotting.register_matplotlib_converters()\nimport seaborn as sns\nimport scipy as sci\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nimport sympy as sym\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy as np\nfrom scipy.integrate import odeint\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","947ee8f5":"my_data= pd.read_csv(\"\/kaggle\/input\/covid19-in-turkey\/covid_19_data_tr.csv\")\nprint(my_data)","2319f816":"my_data.head()\n","a9a9c16b":"my_data[\"Confirmed\"]","cc7d77ec":"temp_list= []\nfor b in my_data[\"Confirmed\"]:\n    temp_list.append(b)\nconfirmed = temp_list[-1]\nprint(confirmed)\n","fb21fb59":"turkey_population= 84000000\nsusceptible = turkey_population - confirmed\nprint(susceptible)","49f7150d":"my_data[\"Deaths\"]","256bd3b7":"temp_list2= []\nfor a in my_data[\"Deaths\"]:\n    temp_list2.append(a)\ndeaths = temp_list2[-1]\nprint(deaths)","5dd23d98":"my_data[\"Recovered\"]","27eca00e":"temp_list3= []\nfor c in my_data[\"Recovered\"]:\n    temp_list3.append(c)\nrecovered = temp_list3[-1]\nprint(recovered)","0af0f9a1":"infected = confirmed - recovered - deaths\nprint(infected)","19346ccd":"recovered_fatal = recovered + deaths\nprint(recovered_fatal)","c64d8a43":"#beta = recovered \/ confirmed\n#print(beta)\n#gama = confirmed \/ turkey_population \n#print(gama)\n#turkey_r0 = beta \/ gama\n#print (turkey_r0)\n#turkey_rho = 0.2\n#turkey_sigma = turkey_rho \/ turkey_r0\n#turkey_initials = (0.99, 0.00026, 0.00185)\n#display(Markdown(rf\"$\\rho = {turkey_rho},\\ \\sigma = {turkey_sigma}$.\"))\n","87031495":"turkey_r0, turkey_rho = (2.5, 0.2)\nturkey_sigma = turkey_rho \/ turkey_r0\nturkey_initials = (0.99, 0.00026, 0.00185)\ndisplay(Markdown(rf\"$\\rho = {turkey_rho},\\ \\sigma = {turkey_sigma}$.\"))","c7ac34f5":"turkey_population = 84000000\nturkey_tau = 1440\nsir_param_dict = {\n    \"rho\": turkey_rho, \"sigma\": turkey_sigma\n}\nsir_simulator = cs.ODESimulator(country=\"Turkey\", province=\"SIR\")\nsir_simulator.add(\n    model=cs.SIR, step_n=180, population=turkey_population,\n    param_dict=sir_param_dict,\n    y0_dict={\"Susceptible\": susceptible, \"Infected\": infected, \"Fatal or Recovered\": recovered_fatal}\n)\nsir_simulator.run()\nsir_simulator.non_dim().tail()","bd12dff6":"cs.line_plot(\n    sir_simulator.non_dim().set_index(\"t\"),\n    title=r\"SIR: $R_0={0}\\ (\\rho={1}, \\sigma={2})$\".format(turkey_r0, turkey_rho, turkey_sigma),\n    ylabel=\"\",\n    h=1\n)","d1f009c6":"df = sir_simulator.non_dim()\nx_max = df.loc[df[\"y\"].idxmax(), \"x\"]\n(x_max, 1\/turkey_r0)","a0a820a3":"**Susceptible is calculated**","d1621f79":"**General Packages are imported for non-dimensional SIR model**","9a53b7a5":"**Infected cases are calculated**","7a1e0e2f":"**xmax and 1\/turkey_r0 is calculated**","644f2359":"**Deaths coloum of the dataset is visualized**","cf54f57a":"**Covid19 in Turkey dataset is uploaded**","1fd971ce":"**Total confirmed number is imported from dataset**","2c50e743":"**Total recovered number is calculated**","a3d99be5":"**Recovered coloumn of the dataset is visualized**","910bde6d":"**Nnon-dimensional s\u0131r model is plotted**\n1. **x is the number of susceptible cases per total population**\n2. **y is the number of currentry infected cases per total population**\n3. ** z is fatal or recovered**","5dbb6f87":"**Head of the coloumns in my Covid-19 in Turkey data is visualized**","a1d56952":"**Turkey's actual beta and gama values are calculated. However, unexpectedly, there is a mistake in the graph of the non-dimensional s\u0131r model  **","2fe51dd6":"**Pillow Package is used for imaging data**","9f6c9a44":"**Confirmed coloumn of the dataset is visualized **","efd7e55d":"**r0 and rho is calculated as opposed to actual values**","1011ee4c":"**Total deaths is calculated**","8744351a":"**Covsiphy package is used for imaging the non-dimensional s\u0131r model**","c4fc3f68":"**ODEsimulator is used for the values of the graph**","f8506a6e":"**Recovered + Death cases is calculated**","009cb2fb":"**Covsirphy package is imported**"}}