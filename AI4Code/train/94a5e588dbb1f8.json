{"cell_type":{"3c127e27":"code","88e79573":"code","37af0f28":"code","32dbbe70":"code","51461807":"code","cb780c8d":"code","cdb4f3c5":"code","9903269e":"code","8c6f6d96":"code","4427e507":"code","6f495ded":"code","ae1a3bda":"code","7b557e57":"code","8dd76af5":"code","baf405d2":"markdown","be89fac9":"markdown","3ced498a":"markdown","4231bf66":"markdown","f4c118c7":"markdown","0407e38f":"markdown","20e8c7e5":"markdown","bfdf73f8":"markdown","d60b5f7d":"markdown","cdc73a2b":"markdown","3126b7b2":"markdown","9f13e5b0":"markdown","48359994":"markdown"},"source":{"3c127e27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","88e79573":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nplt.figure(figsize=(15, 15))\nsns.set_style('whitegrid')\nsns.set_context('paper')\n\ndf = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\nprint('Santa must attend {} families with over {} people!'.format(df.shape[0], df.n_people.sum()))\nprint('Let\\'s look at the preference list')\ndisplay(df.head())","37af0f28":"demand = [0 for _ in range(101)]\ndef add_demand(x):\n    for i in range(0,10):\n        y = x.at['choice_'+str(i)]\n        demand[y] = demand[y] + x.at['n_people']\n    return x\ndf = df.apply(lambda x: add_demand(x), axis=1)\ndemand = demand[1:]\ndemand = [float(x)\/sum(demand) * 100 for x in demand]\ndemand_dict = dict(enumerate(demand, 1))\nsns.scatterplot(y=demand, x=list(range(1,101)))","32dbbe70":"from scipy import stats\navg_weekly_demand = np.average(np.array(demand[:98]).reshape(-1,7), axis=1)\ny=np.array(list(range(1,15)))\nslope, intercept, r_value, p_value, std_err = stats.linregress(y, avg_weekly_demand)\n\nsns.lineplot(y, avg_weekly_demand)\nax = sns.regplot(y, avg_weekly_demand, color='b', \n line_kws={'label':\"y={0:.1f}x+{1:.1f}\".format(slope,intercept)})\nax.legend()","51461807":"new_demand = (avg_weekly_demand-np.min(avg_weekly_demand))\/(np.max(avg_weekly_demand)-np.min(avg_weekly_demand))\nnew_weekly_demand = new_demand *(300-125) + 125\nslope, intercept, r_value, p_value, std_err = stats.linregress(y, new_weekly_demand)\nsns.lineplot(y, new_weekly_demand)\nax = sns.regplot(y, new_weekly_demand, color='b', \n line_kws={'label':\"y={0:.1f}x+{1:.1f}\".format(slope,intercept)})\nax.legend()","cb780c8d":"week1=np.array(demand[:7])\nsns.lineplot(np.array(list(range(1,8))),week1,  label='Week 1')\nweek2=np.array(demand[7:14])\nsns.lineplot(np.array(list(range(1,8))),week2, label='Week 2')\nweek3=np.array(demand[14:21])\nsns.lineplot(np.array(list(range(1,8))),week3, label='Week 3')\nweek4=np.array(demand[21:28])\nsns.lineplot(np.array(list(range(1,8))),week4, label='Week 4')\nweek5=np.array(demand[28:35])\nsns.lineplot(np.array(list(range(1,8))),week5, label='Week 5')\nweek6=np.array(demand[35:42])\nsns.lineplot(np.array(list(range(1,8))),week6, label='Week 6')\nweek7=np.array(demand[42:49])\nsns.lineplot(np.array(list(range(1,8))),week7, label='Week 7')","cdb4f3c5":"week1=np.array(demand[:7])\nsns.lineplot(np.array(list(range(1,8))),week1,  label='Week 1')","9903269e":"difference = []\nfor i in range(1,100):\n    difference.append(demand[i]-demand[i-1])\nabs_difference = np.abs(np.array(difference))\nabs_difference = (abs_difference-np.min(abs_difference))\/((np.max(abs_difference) - np.min(abs_difference))) * 50\nabs_difference = [int(x) for x in abs_difference]\nfinal_fluctuation = [abs_difference[i] * (2*(difference[i] >=0) -1) for i in range(len(abs_difference))]\ndays_start = [300]\nprint('{} number of people would attend Day {}'.format(300,1))\nfor i in range(15):\n    num_people_week = int(round(-10*i+274,0))\n    num_people_week=min(num_people_week,300)\n    num_people_week = max(num_people_week,130)\n    print('{} number of people would attend Day {}'.format(num_people_week, i*7+2))\n    days_start.append(num_people_week)\n    for j in range(1,7):\n        if i*7+j >=99:\n            break\n        people_today_fluctuation = final_fluctuation[i*7+j]\n        num_people_week += people_today_fluctuation\n        num_people_week=min(num_people_week,300)\n        num_people_week = max(num_people_week,130)\n        num_people_week = int(round(num_people_week,0))\n        print('{} number of people would attend Day {}'.format(num_people_week, i*7+j+2))\n        days_start.append(num_people_week)\nsns.lineplot(list(range(1, 101)), days_start)","8c6f6d96":"assert sum(days_start)\/len(days_start) >= df.n_people.sum()\/df.shape[0]","4427e507":"def calculate_eagerness(x):\n    eagerness = 0\n    for i in range(0,9):\n        eagerness = eagerness + (9-i)*demand_dict[x.at['choice_'+str(i)]]\n        eagerness = eagerness + 0.1 * x.at['n_people']\n    return round(eagerness,0)\ndf['eagerness'] = df.apply(lambda x: calculate_eagerness(x), axis=1)","6f495ded":"max_cap = days_start\npeople_attending = [0 for i in range(0,100)]\ndemand_arr = np.array(demand)\ndf['assigned'] = 0\ndf = df.sort_values(by='eagerness', ascending=False)\ndemand_dict = dict(zip(list(range(1,101)), demand_arr))\nlow_threshold = 130\n\ndef assign_family(x):\n    global low_threshold\n    assigned = int(x.at['choice_0']) - 1\n    i = 0\n    a = max_cap[assigned] - x.at['n_people']\n    b = people_attending[assigned] + x.at['n_people']\n    while a < 0:\n        i = i + 1\n        if i >= 10:\n            assigned = -100\n            break\n        else:\n            assigned = int(x.at['choice_'+str(i)]) -1\n        a = max_cap[assigned] - x.at['n_people']\n    if assigned != -100:\n        #print('Family {} got their {} preference'.format(x.at['family_id'], i+1))\n        max_cap[assigned] -= x.at['n_people']\n        people_attending[assigned] += x.at['n_people']\n        x['assigned'] = assigned + 1\n    else:\n        #Populate the days which has less people attending\n        low_days = np.where(np.array(people_attending) <= low_threshold)[0]\n        while len(low_days) == 0:\n            low_threshold += 10\n            low_days = np.where(np.array(people_attending) <= low_threshold)[0]\n        low_days = low_days + 1\n        low_days = sorted(low_days, key=demand_dict.get)\n        for low_day in low_days:\n            assigned = low_day\n            a = max_cap[assigned - 1] - x.at['n_people']\n            b = people_attending[assigned - 1] + x.at['n_people']\n            if a < 0:\n                continue\n            else:\n                break\n        #print('Family {} got alternate day!!! Their appointment is at {}'.format(x.at['family_id'], assigned))\n        x['assigned'] = assigned\n        max_cap[assigned -1] -= x.at['n_people']\n        people_attending[assigned -1] += x.at['n_people']   \n    return x","ae1a3bda":"df = df.apply(lambda x: assign_family(x), axis=1)\ndf['assigned'] = df['assigned'].astype(int)\ndf.head()","7b557e57":"for i in range(1,101):\n    no_of_people = np.sum(df[df.assigned==i]['n_people'].values)\n    if (no_of_people >= 125 and no_of_people <= 300):\n        pass\n    else:\n        print(i, no_of_people)","8dd76af5":"df = df.sort_values(by='family_id')\ndf2 = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv')\ndf2['assigned_day'] = df['assigned']\ndf2.to_csv('sample_sub.csv', index=False)","baf405d2":"We will give top priority to the family who are very eager to meet only on on demand dates, so as to reduce conflicts of unavailable slots later.\n\nLet's assign in the following fashion.\n1. Give possible choice to a family\n2. else allot them the day which has the lowest demand.","be89fac9":"This notebook is written by an unpaid intern at Santa's office who doesn't know Stochastic product search, Mixed integer programming, Hungraian algorithm and so on.. but has best interest in his heart to help santa as he saw santa stressed like this looking at the prefrence list.\n\n<img src=\"https:\/\/images.unsplash.com\/photo-1482020696973-9764368c517b\" width=\"200px;\"\/>\n\nLet's see how he approached this problem.","3ced498a":"Neat! The number of days that we should allocate should follow the same pattern ideally, so that most of them get one of their preferred days and santa can reduce operating costs.\n\nLet's map this line to lie between 300 and 125","4231bf66":"This graph is interesting.. at a first glance we can see a recurring fluctuating pattern between the days of a week and secondly, we can see the demand is slowly going down as the day approaches to 100.\n\nLet's see the behaviour of demand over the 14 weeks.","f4c118c7":"Let's restrict the max drop between the days to 50 and make a forecast of how many people would be attending each day","0407e38f":"To check if this distribution covers all the people each day, we need this assert statement.","20e8c7e5":"As usual, we need to import the libraries to manipulate tabular data and show graphs.","bfdf73f8":"Let's check if this satisfies the constraint.","d60b5f7d":"It seems it follows the same pattern. The first and second days have a low demand then 3,4,5 have high demand and 6,7 have low demand again.\nException to this pattern is Week 1.\nLet's look at week 1.","cdc73a2b":"Let's visualize the demand over days!\n\ndemand of a particular day is simply the total number of people who wish to attend the workshop on that day.","3126b7b2":"Let's give a score of eagerness to a family, willingness to meet santa only on on demand dates.","9f13e5b0":"Neat! Now let's submit this allocation to the competition.","48359994":"Okay, now this is done. Let's see the behaviour of demand in those 7 days."}}