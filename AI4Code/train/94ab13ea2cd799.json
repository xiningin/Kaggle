{"cell_type":{"a6b61239":"code","2d45e34c":"code","ad297098":"code","805d8477":"code","e81b89a3":"code","1fcc20f8":"code","1c46583b":"code","91bb5c36":"code","98ed3781":"code","5a4145bb":"code","e107c08c":"code","8fa72132":"code","43a5068d":"code","ded490ec":"code","f9416eaf":"code","fdecaa05":"code","1804ec5f":"code","eb38be6c":"code","65d0f771":"code","a747451c":"code","47fea462":"markdown","fbbeac99":"markdown","7aa7b9f8":"markdown","98741584":"markdown","1cf148da":"markdown","b467cbf3":"markdown","890098b0":"markdown","747a4890":"markdown","740f04a1":"markdown","437325e5":"markdown","f37bc496":"markdown","fc18776f":"markdown","e9cf8166":"markdown","2d1ed606":"markdown","9132ef55":"markdown"},"source":{"a6b61239":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d45e34c":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import mean_squared_error, r2_score","ad297098":"df = pd.read_csv(\"..\/input\/bostonhoustingmlnd\/housing.csv\")\ndf.head(10).T","805d8477":"tabcorr = df.corr()  ","e81b89a3":"tabcorr","1fcc20f8":"plt.figure(figsize=(12,12))\nsns.heatmap(abs(tabcorr), cmap=\"coolwarm\")","1c46583b":"sns.clustermap(abs(tabcorr), cmap=\"coolwarm\")","91bb5c36":"from scipy.cluster import hierarchy as hc\n\ncorr = 1 - df.corr()\ncorr_condensed = hc.distance.squareform(corr)\nlink = hc.linkage(corr_condensed, method='ward')\nplt.figure(figsize=(12,12))\nden = hc.dendrogram(link, labels=df.columns, orientation='left', leaf_font_size=10)","98ed3781":"correlations = tabcorr.MEDV\nprint(correlations)","5a4145bb":"correlations = correlations.drop(['MEDV'],axis=0)","e107c08c":"print(abs(correlations).sort_values(ascending=False))","8fa72132":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)\n\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train, y_train)            \ny_pred = lm.predict(X_test) ","43a5068d":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_pred)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","ded490ec":"sns.distplot(y_test-y_pred)","f9416eaf":"scoreR2 = r2_score(y_test, y_pred)\nprint(scoreR2)","fdecaa05":"X = df.drop(['MEDV'], axis=1)\ny = df.MEDV\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","1804ec5f":"from sklearn import ensemble\nrf = ensemble.RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_rf = rf.predict(X_test)\nprint(rf.score(X_test,y_test))","eb38be6c":"plt.figure(figsize=(12,12))\nplt.scatter(y_test, y_rf)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","65d0f771":"print(np.sqrt(mean_squared_error(y_test, y_rf)))\nrf.score(X_test,y_test)","a747451c":"import xgboost as XGB\nxgb  = XGB.XGBRegressor()\nxgb.fit(X_train, y_train)\ny_xgb = xgb.predict(X_test)\nprint(xgb.score(X_test,y_test))\n\nplt.figure(figsize=(12,12))\nplt.scatter(y_test, y_xgb)\nplt.plot([y_test.min(),y_test.max()],[y_test.min(),y_test.max()], color='red', linewidth=3)\nplt.xlabel(\"Prix\")\nplt.ylabel(\"Prediction de prix\")\nplt.title(\"Prix reels vs predictions\")","47fea462":"**R\u00e9gression par for\u00eats al\u00e9atoires**","fbbeac99":"On va d\u00e9sormais s'int\u00e9resser plus particuli\u00e8rement au prix.","7aa7b9f8":"On va afficher ces corr\u00e9lations sur une heatmap","98741584":"L'une des interrogations principales sur ce dataset concerne le sens donn\u00e9 aux diff\u00e9rentes variables \"LSTAT\", \"PTRATIO\" et \"MEDV\".","1cf148da":"Avec ces donn\u00e9es, on ne peut pas placer les maisons sur une carte, ni voir l'\u00e9volution du prix par date.","b467cbf3":"Enfin, on va utiliser la m\u00e9thode XGBoost pour voir si elle est plus pr\u00e9cise.","890098b0":"On lit le dataset:","747a4890":"On trace le nuage de points pour comparer la pr\u00e9diction et les r\u00e9sultats attendus :","740f04a1":"On voit que la plus grosse corr\u00e9lation concerne \"LSTAT\", mais que les 3 param\u00e8tres sont fortement corr\u00e9l\u00e9s au prix.","437325e5":"On peut tracer uniquement le dendrogramme des corr\u00e9lations entre les caract\u00e9ristiques. On utilise une forme \"condens\u00e9e\" de la matrice de corr\u00e9lation. linkage permet de calculer les distances entre caract\u00e9ristiques \u00e0 partir des corr\u00e9lations","f37bc496":"On \u00e9limine la ligne MV elle-m\u00eame (qui est forc\u00e9ment \u00e0 1) :","fc18776f":"Les corr\u00e9lations fortement n\u00e9gatives sont aussi significatives que les positives ; on consid\u00e8re donc les valeurs absolues, et on trie par ordre d\u00e9croissant :","e9cf8166":"**Recherche de corr\u00e9lations**","2d1ed606":"On teste diff\u00e9rentes m\u00e9thodes pour visualiser notre erreur: la distribution de l'erreur avec seaborn ainsi que le score R2.","9132ef55":"On s'int\u00e9resse d\u00e9sormais \u00e0 la r\u00e9gression lin\u00e9aire multiple."}}