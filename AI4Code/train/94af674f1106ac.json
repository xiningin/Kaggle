{"cell_type":{"a9baee3c":"code","40f6d6f7":"code","113dddb4":"code","c638811e":"code","a2d38140":"code","b7d1ad99":"code","5b433878":"code","58e87de6":"code","a6d83b12":"code","0ca3dbf5":"code","c706e415":"code","077d9a8a":"code","27a0a648":"code","1ef01fca":"code","e6c5167c":"code","736ef462":"code","f19a6c08":"code","cc4c4d72":"code","dced41e0":"code","6afdcbb1":"code","7816160b":"code","2e208acf":"code","04fd16d0":"code","0c9d7d1c":"code","e7880307":"code","cdac58d8":"code","7b3f7241":"code","10c27005":"code","66e49466":"code","144bc891":"code","c6fa7886":"code","f762af7b":"code","fd3c8685":"markdown","b1360806":"markdown","3461ad57":"markdown","119740ea":"markdown","9595c93b":"markdown","82de1aed":"markdown","a5a4d8e2":"markdown","9b89326a":"markdown","a6035029":"markdown","3c33393d":"markdown","c2d5a5c8":"markdown","fd3da12e":"markdown","02d41b6c":"markdown"},"source":{"a9baee3c":"%load_ext autoreload\n%autoreload 2\n\nimport pandas as pd\nimport pandas_profiling\nimport tqdm\n\nimport os\nimport gc\n\npd.set_option('display.max_columns', None)","40f6d6f7":"import utils_21042021 as utils","113dddb4":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'\n\nPATH_TO_TRAIN_TARGET = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_train_target.csv'\nPATH_TO_TEST_TARGET = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_test_target_contest.csv'\n\nPATH_TO_TRAIN = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_train_transactions_contest\/train_transactions_contest'\nPATH_TO_TEST = CURRENT_DIR + 'input\/alfabattle2-sandbox\/alfabattle2_sand_alfabattle2_test_transactions_contest\/test_transactions_contest'\n","c638811e":"!pip freeze > requirements.txt","a2d38140":"def read_parquet_dataset_from_local(path_to_dataset: str, \n                                    start_from: int = 0,\n                                    num_parts_to_read: int = 2, \n                                    columns=None, \n                                    verbose=False,\n                                    info_num_parts=False) -> pd.DataFrame:\n    \"\"\"\n    \u0447\u0438\u0442\u0430\u0435\u0442 num_parts_to_read \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0438\u0445 \u043a pd.DataFrame \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\n    :param path_to_dataset: \u043f\u0443\u0442\u044c \u0434\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u044f\u043c\u0438\n    :param start_from: \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0430\u0442\u044c \u0447\u0442\u0435\u043d\u0438\u0435\n    :param num_parts_to_read: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c\n    :param columns: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438\n    :return: pd.DataFrame\n    \"\"\"\n\n    res = []\n    list_paths = sorted([os.path.join(path_to_dataset, filename) for filename in os.listdir(path_to_dataset) \n                              if filename.startswith('part')])\n    if info_num_parts:\n        print(f'\u041a\u043e\u043b-\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439 \u0432 \u043f\u0430\u043f\u043a\u0435: {len(list_paths)}')\n    start_from = max(0, start_from)\n    list_path_to_partitions = list_paths[start_from: start_from + num_parts_to_read]\n    if verbose:\n        print('Reading chunks:\\n')\n        for path_to_partition in list_path_to_partitions:\n            print(path_to_pirtition)\n    for path_to_parquet in tqdm.tqdm_notebook(list_path_to_partitions, \n                                              desc=\"\u0427\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b:\"):\n        temp_parquet = pd.read_parquet(path_to_parquet,columns=columns)\n        res.append(temp_parquet)\n        del temp_parquet\n        gc.collect()\n    return pd.concat(res).reset_index(drop=True)","b7d1ad99":"train_targets = pd.read_csv(PATH_TO_TRAIN_TARGET)\ntrain_targets.head()","5b433878":"pandas_profiling.ProfileReport(train_targets)","58e87de6":"utils.simple_plot_barv_count('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443', \n                             'product', \n                             train_targets, \n                             1.3, \n                             '\u041f\u0440\u043e\u0434\u0443\u043a\u0442 (product)', \n                             '\u041a\u043e\u043b-\u0432\u043e')","a6d83b12":"utils.simple_plot_barh_procent('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0432 %-\u0430\u0445', \n                               ['','','','',''], \n                               'product',\n                               train_targets)","0ca3dbf5":"temp_df = pd.DataFrame(train_targets['product'].value_counts())\ntemp_df = temp_df.rename(columns={'product': 'product_count'})\ntemp_df['product'] = temp_df.index\ntemp_df['flag'] = train_targets.groupby('product').sum().flag\ntemp_df['proc_default'] = temp_df['flag']\/temp_df['product_count']*100","c706e415":"utils.simple_plot_barv('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 (%) \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u043c \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u043c \u0432 \u0442\u0440\u0435\u0439\u043d\u0435',\n                       'product',\n                       'proc_default', \n                       temp_df, \n                       1.3, \n                       '\u041f\u0440\u043e\u0434\u0443\u043a\u0442 (product)', \n                       '\u0414\u0435\u0444\u043e\u043b\u0442 (%)')","077d9a8a":"test_targets = pd.read_csv(PATH_TO_TEST_TARGET)\ntest_targets.head()","27a0a648":"pandas_profiling.ProfileReport(test_targets)","1ef01fca":"utils.simple_plot_barv_count('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u0435 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443', \n                             'product', \n                             test_targets, \n                             1.3, \n                             '\u041f\u0440\u043e\u0434\u0443\u043a\u0442 (product)', \n                             '\u041a\u043e\u043b-\u0432\u043e')","e6c5167c":"utils.simple_plot_barh_procent('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0432 %-\u0430\u0445', \n                               ['','','','',''], \n                               'product',\n                               test_targets)","736ef462":"%%time\ntemp_df = read_parquet_dataset_from_local(PATH_TO_TRAIN, \n                                                     start_from=0, \n                                                     \n                                                     num_parts_to_read=1,\n                                                     info_num_parts=True)\n\nmemory_usage_of_frame = temp_df.memory_usage(index=True).sum() \/ 10**9\nexpected_memory_usage = memory_usage_of_frame * 50\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432  RAM \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438: {round(memory_usage_of_frame, 3)} Gb')\nprint(f'\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432 RAM \u0432\u0441\u0435\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: {round(expected_memory_usage, 3)} Gb')","f19a6c08":"temp_df.head(10)","cc4c4d72":"del temp_df\ngc.collect()","dced41e0":"%%time\ntemp_df = read_parquet_dataset_from_local(PATH_TO_TRAIN, \n                                             start_from=0, \n                                             columns = ['app_id'],\n                                             num_parts_to_read=50,\n                                             info_num_parts=True)\n\nmemory_usage_of_frame = temp_df.memory_usage(index=True).sum() \/ 10**9\n\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 RAM \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_id \u0432 \u0442\u0440\u0435\u0439\u043d\u0435: {round(memory_usage_of_frame, 3)} Gb')\n","6afdcbb1":"%%time\ntemp_test_df = read_parquet_dataset_from_local(PATH_TO_TEST, \n                                             start_from=0, \n                                             columns = ['app_id'],\n                                             num_parts_to_read=50,\n                                             info_num_parts=True)\n\nmemory_usage_of_frame = temp_test_df.memory_usage(index=True).sum() \/ 10**9\n\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 RAM \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_id \u0432 \u0442\u0435\u0441\u0442\u0435: {round(memory_usage_of_frame, 3)} Gb')","7816160b":"temp_df['app_id'].count()","2e208acf":"temp_test_df['app_id'].count()","04fd16d0":"temp_df = pd.DataFrame(temp_df['app_id'].value_counts())\ntemp_df = temp_df.rename(columns={'app_id': 'app_count'})\ntemp_df['app_id'] = temp_df.index\ntemp_df = temp_df.reset_index()\n\ntemp_df.app_count.describe()","0c9d7d1c":"temp_test_df = pd.DataFrame(temp_test_df['app_id'].value_counts())\ntemp_test_df = temp_test_df.rename(columns={'app_id': 'app_count'})\ntemp_test_df['app_id'] = temp_test_df.index\ntemp_test_df = temp_test_df.reset_index()\n\ntemp_test_df.app_count.describe()","e7880307":"temp_df.app_count.plot(figsize = (12,6), \n                       title='\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c',\n                       ylabel = '\u041a\u043e\u043b-\u0432\u043e \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439')","cdac58d8":"del temp_df\ndel temp_test_df\ngc.collect()","7b3f7241":"%%time\ntemp_df = read_parquet_dataset_from_local(PATH_TO_TRAIN, \n                                             start_from=0, \n                                             columns = ['amnt'],\n                                             num_parts_to_read=50,\n                                             info_num_parts=True)\n\nmemory_usage_of_frame = temp_df.memory_usage(index=True).sum() \/ 10**9\n\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 RAM \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 amnt \u0432 \u0442\u0440\u0435\u0439\u043d\u0435: {round(memory_usage_of_frame, 3)} Gb')\n","10c27005":"%%time\ntemp_test_df = read_parquet_dataset_from_local(PATH_TO_TEST, \n                                             start_from=0, \n                                             columns = ['amnt'],\n                                             num_parts_to_read=50,\n                                             info_num_parts=True)\n\nmemory_usage_of_frame = temp_test_df.memory_usage(index=True).sum() \/ 10**9\n\nprint(f'\u041e\u0431\u044a\u0435\u043c \u043f\u0430\u043c\u044f\u0442\u0438 \u0432 RAM \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 amnt \u0432 \u0442\u0435\u0441\u0442\u0435: {round(memory_usage_of_frame, 3)} Gb')","66e49466":"temp_df.amnt.describe()","144bc891":"temp_test_df.amnt.describe()","c6fa7886":"len(temp_df[temp_df['amnt']==0])","f762af7b":"len(temp_test_df[temp_test_df['amnt']==0])","fd3c8685":"\u0412 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0431\u043e\u043b\u0435\u0435 270 \u043c\u043b\u043d \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 ","b1360806":"## 3.4 amnt","3461ad57":"## 3.3 app_id","119740ea":"\u0412 \u0442\u0435\u0441\u0442\u0435 502716 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u0422\u0430\u043a\u0436\u0435 5 \u0432\u0438\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442.","9595c93b":"### \u0414\u0438\u043f\u043b\u043e\u043c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430\n\n#### \u0420\u0430\u0437\u0432\u0435\u0434\u044b\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)\n\u041a\u0435\u0440\u043d\u0435\u043b 1 \u0438\u0437 5 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 ML (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 21.04.2021)\n---\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n## 1.1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","82de1aed":"\u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0431\u043e\u043b\u0435\u0435 170 \u043c\u043b\u043d \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. \u0412 \u0441\u0443\u043c\u043c\u0435 \u043e\u043a\u043e\u043b\u043e 444 \u043c\u043b\u043d. \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439. ","a5a4d8e2":"## 1.2. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","9b89326a":"\u0412 \u0442\u0440\u0435\u0439\u043d\u0435 963811 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. 5 \u0432\u0438\u0434\u043e\u0432 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432. flag \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043d\u0435\u0442.","a6035029":"## 3.2 \u0410\u043d\u0430\u043b\u0438\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","3c33393d":"# 3. EDA\n---\n## 3.1 product","c2d5a5c8":"\u041a\u043e\u043b-\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 1248424 (0.46%), \u0430 \u0432 \u0442\u0435\u0441\u0442\u0435 2846900 (1.6%)","fd3da12e":"# 2. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","02d41b6c":"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 product \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0442\u0435\u0441\u0442\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b"}}