{"cell_type":{"322ad2b9":"code","dbe9559f":"code","8011bb19":"code","52cf35c0":"code","9c55c2bc":"code","88776c9c":"code","78f8d9c2":"code","3537ccb2":"code","cfe55369":"code","1b9d28b4":"code","0063bea6":"code","62608dc6":"code","b37a31ef":"code","31f6ae6c":"code","d065aa77":"code","50d89468":"code","d1b57006":"code","857d74cb":"code","147b9551":"code","69b91552":"markdown","53f32e2c":"markdown","84f50f56":"markdown","cf2cef52":"markdown","6ab75561":"markdown","2648efc0":"markdown","57526975":"markdown","0b952feb":"markdown","7b619f9d":"markdown","73e15de7":"markdown","6300d237":"markdown","e4a19918":"markdown","69ee990d":"markdown","4039d9a8":"markdown","8c56fb6a":"markdown","7888c8ee":"markdown","27d28db7":"markdown","53a15e2b":"markdown","1cdae3f1":"markdown","c530f7e1":"markdown","51aef3d0":"markdown","24aa352a":"markdown"},"source":{"322ad2b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dbe9559f":"import pandas as pd #\u6570\u636e\u5206\u6790\nimport numpy as np #\u79d1\u5b66\u8ba1\u7b97\nfrom pandas import Series,DataFrame\n\ndata_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata_train\ndata_train.info()","8011bb19":"%matplotlib inline \nimport matplotlib.pyplot as plt\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\n# plt.subplot2grid((2,3),(0,0))             # \u8fd9\u6bb5\u6211\u6ce8\u91ca\u6389\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u540c\u5b66\u7684baseline\u7684\u8bed\u6cd5\u5df2\u7ecf\u88ab\u6dd8\u6c70\u4e86\ndata_train.Survived.value_counts().plot(kind='bar')# \u56fe\u8868\u5448\u73b0\u4e3a\u67f1\u72b6\u56fe \nplt.title(u\"whether survived(0,1)\") # \u8bbe\u7f6e\u6807\u9898\nplt.ylabel(u\"population\")  # y\u8f74\u7684\u8f74\u6807\nplt.show()\n\n # \u5269\u4e0b\u7684\u4e09\u4e2a\u56fe\u539f\u7406\u4e00\u6837\uff0c\u5c31\u662f\u5229\u7528matplotlib\u5e93\u753b\u56fe\uff0c\u5927\u540c\u5c0f\u5f02\u3002\n# plt.subplot2grid((2,3),(0,1))\ndata_train.Pclass.value_counts().plot(kind=\"bar\")\nplt.ylabel(u\"population\")\nplt.title(u\"Pclass\")\nplt.show()\n\n\nplt.subplot2grid((2,3),(0,2))\nplt.scatter(data_train.Survived, data_train.Age)\nplt.ylabel(u\"Age\")                         # \u8bbe\u5b9a\u7eb5\u5750\u6807\u540d\u79f0\nplt.grid(b=True, which='major', axis='y') \nplt.title(u\"relationship between Age and survived(0,1)\")\nplt.show()\n\n\n# plt.subplot2grid((2,3),(1,0), colspan=2)\ndata_train.Age[data_train.Pclass == 1].plot(kind='kde')   \ndata_train.Age[data_train.Pclass == 2].plot(kind='kde')\ndata_train.Age[data_train.Pclass == 3].plot(kind='kde')\nplt.xlabel(u\"Age\")# plots an axis lable\nplt.ylabel(u\"density\") \nplt.title(u\"relationship between Age and Pclass\")\nplt.legend((u'1st', u'2nd',u'3rd'),loc='best') # sets our legend for our graph.\nplt.show()\n\n\n# plt.subplot2grid((2,3),(1,2))\ndata_train.Embarked.value_counts().plot(kind='bar')\nplt.title(u\"Embarked\")\nplt.ylabel(u\"population\")  \nplt.show()","52cf35c0":"\n#### \u67e5\u770bSurvived\u4e0ePclass\u7684\u5173\u7cfb\nSurvived_Pclass=data_train['Pclass'].groupby(data_train['Survived'])\nSurvived_Pclass.value_counts().unstack()\n \nSurvived_Pclass.value_counts().unstack().plot(kind='bar',stacked = True)\nplt.show()\n\n#### \u67e5\u770bSurvived\u4e0ePclass\u7684\u5173\u7cfb\uff0c\u6a2a\u7eb5\u5750\u6807\u8c03\u6362\u4f4d\u7f6e\u3002\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\nSurvived_0 = data_train.Pclass[data_train.Survived == 0].value_counts()\nSurvived_1 = data_train.Pclass[data_train.Survived == 1].value_counts()\ndf=pd.DataFrame({u'survived':Survived_1, u'unsurvived':Survived_0})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"relationship between survived and Pclass\")\nplt.xlabel(u\"Pclass\") \nplt.ylabel(u\"population\") \nplt.show()\n\n\n#### \u67e5\u770bSurvived\u4e0eSex\u7684\u5173\u7cfb\n \nSurvived_Sex=data_train['Sex'].groupby(data_train['Survived'])\nSurvived_Sex.value_counts().unstack()\n \nSurvived_Sex.value_counts().unstack().plot(kind='bar',stacked=True)\nplt.show()","9c55c2bc":"#\u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u770b\u5404\u79cd\u8231\u7ea7\u522b\u60c5\u51b5\u4e0b\u5404\u6027\u522b\u7684\u83b7\u6551\u60c5\u51b5\nfig=plt.figure()\nfig.set(alpha=0.65) # \u8bbe\u7f6e\u56fe\u50cf\u900f\u660e\u5ea6\uff0c\u65e0\u6240\u8c13\nplt.title(u\"Pclass and age\")\n\nax1=fig.add_subplot(141)   # \u4f9d\u65e7\u662f\u8fdb\u884c\u753b\u56fe\u3002\u5c06pclass\u4e0esurvived\u8bfb\u5165\u3002\ndata_train.Survived[data_train.Sex == 'female'][data_train.Pclass != 3].value_counts().plot(kind='bar', label=\"female highclass\", color='#FA2479')\nax1.set_xticklabels([u\"survived\", u\"unsurvived\"], rotation=0)\nax1.legend([u\"female\/higher Pclass\"], loc='best')\n\nax2=fig.add_subplot(142, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'female'][data_train.Pclass == 3].value_counts().plot(kind='bar', label='female, low class', color='pink')\nax2.set_xticklabels([u\"unsurvived\", u\"survived\"], rotation=0)\nplt.legend([u\"female\/lower Pclass\"], loc='best')\n\nax3=fig.add_subplot(143, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'male'][data_train.Pclass != 3].value_counts().plot(kind='bar', label='male, high class',color='lightblue')\nax3.set_xticklabels([u\"unsurvived\", u\"survived\"], rotation=0)\nplt.legend([u\"male\/higher Pclass\"], loc='best')\n\nax4=fig.add_subplot(144, sharey=ax1)\ndata_train.Survived[data_train.Sex == 'male'][data_train.Pclass == 3].value_counts().plot(kind='bar', label='male low class', color='steelblue')\nax4.set_xticklabels([u\"unsurvived\", u\"survived\"], rotation=0)\nplt.legend([u\"male\/lower Pclass\"], loc='best')\n\nplt.show()","88776c9c":"### \u5229\u7528\u4ea4\u53c9\u8868crosstab\n \npd.crosstab(data_train.Age,data_train['Survived'])\n \n# pd.crosstab(data_train.Age,data_train['Survived']).plot(kind='bar',stacked=True)  #\u4e5f\u662f\u67f1\u72b6\u56fe\uff0c\u4ea4\u53c9\u8868\u6709\u4e00\u70b9\u70b9bug\uff0c\u6211\u8fd8\u4e0d\u592a\u719f\u7ec3\uff0c\u4f46\u611f\u89c9\u6548\u679c\u7279\u522b\u76f4\u89c2\uff01\uff01\npd.crosstab(data_train.Age,data_train['Survived']).plot(kind='bar')\nplt.show()\n","78f8d9c2":"from sklearn.ensemble import RandomForestRegressor\n \n### \u4f7f\u7528 RandomForestClassifier \u586b\u8865\u7f3a\u5931\u7684\u5e74\u9f84\u5c5e\u6027\ndef set_missing_ages(df):\n    \n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\u4e22\u8fdbRandom Forest Regressor\u4e2d\n    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]\n\n    # \u4e58\u5ba2\u5206\u6210\u5df2\u77e5\u5e74\u9f84\u548c\u672a\u77e5\u5e74\u9f84\u4e24\u90e8\u5206\n    known_age = age_df[age_df.Age.notnull()].as_matrix()\n    unknown_age = age_df[age_df.Age.isnull()].as_matrix()\n\n    # y\u5373\u76ee\u6807\u5e74\u9f84\uff0cknown age\u662f\u4e00\u4e2a\u7279\u5f81\u77e9\u9635\uff0c\u7b2c\u4e00\u884c\u662fage\uff0c\u5176\u4ed6\u884c\u4ee5\u7528\u7279\u5f81\u5c5e\u6027\u503c\uff0c\u8fd9\u91cc\u53d6\u4e86\u7b2c\u4e00\u884c\n    y = known_age[:, 0]\n\n    # X\u5373\u7279\u5f81\u5c5e\u6027\u503c\n    X = known_age[:, 1:]\n\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)\n    rfr.fit(X, y)\n    \n    # \u7528\u5f97\u5230\u7684\u6a21\u578b\u8fdb\u884c\u672a\u77e5\u5e74\u9f84\u7ed3\u679c\u9884\u6d4b\n    predictedAges = rfr.predict(unknown_age[:, 1::])\n    \n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges \n    \n    return df, rfr\n\ndef set_Cabin_type(df):\n    df.loc[ (df.Cabin.notnull()), 'Cabin' ] = \"Yes\"\n    df.loc[ (df.Cabin.isnull()), 'Cabin' ] = \"No\"\n    return df\n\ndata_train, rfr = set_missing_ages(data_train)\ndata_train = set_Cabin_type(data_train)\n","3537ccb2":"\ndummies_Cabin = pd.get_dummies(data_train['Cabin'], prefix= 'Cabin')      #\u4ee3\u7801\u89e3\u91ca\u89c1\u4e0b\u65b9markdown\n\ndummies_Embarked = pd.get_dummies(data_train['Embarked'], prefix= 'Embarked')\n\ndummies_Sex = pd.get_dummies(data_train['Sex'], prefix= 'Sex')\n\ndummies_Pclass = pd.get_dummies(data_train['Pclass'], prefix= 'Pclass')\n\ndf = pd.concat([data_train, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)\ndf.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)\ndf\n","cfe55369":"import sklearn.preprocessing as preprocessing  #\u89e3\u91ca\u89c1markdown\nscaler = preprocessing.StandardScaler()\nage_scale_param = scaler.fit(df['Age'].values.reshape(-1,1))\ndf['Age_scaled'] = scaler.fit_transform(df['Age'].values.reshape(-1,1), age_scale_param)\nfare_scale_param = scaler.fit(df['Fare'].values.reshape(-1,1))\ndf['Fare_scaled'] = scaler.fit_transform(df['Fare'].values.reshape(-1,1), fare_scale_param)\ndf.head()","1b9d28b4":"from sklearn import linear_model #\u5c31\u662f\u8c03\u7528\u7ebf\u6027\u56de\u5f52\u65b9\u7a0b\uff0c\u673a\u68b0\u5316\u7684\u64cd\u4f5c\uff0c\u5e76\u4e0d\u662f\u5f88\u96be\u3002\n\n# \u7528\u6b63\u5219\u53d6\u51fa\u6211\u4eec\u8981\u7684\u5c5e\u6027\u503c\ntrain_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\ntrain_np = train_df.values\n\n# y\u5373\u7b2c0\u5217\uff1aSurvival\u7ed3\u679c\ny = train_np[:, 0]\n\n# X\u5373\u7b2c1\u5217\u53ca\u4ee5\u540e\uff1a\u7279\u5f81\u5c5e\u6027\u503c\nX = train_np[:, 1:]\n\n# fit\u5230LogisticRegression\u4e4b\u4e2d\nclf = linear_model.LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nclf.fit(X, y)\n\nclf","0063bea6":"data_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndata_test.loc[ (data_test.Fare.isnull()), 'Fare' ] = 0\n\n# \u63a5\u7740\u6211\u4eec\u5bf9test_data\u505a\u548ctrain_data\u4e2d\u4e00\u81f4\u7684\u7279\u5f81\u53d8\u6362\n# \u9996\u5148\u7528\u540c\u6837\u7684RandomForestRegressor\u6a21\u578b\u586b\u4e0a\u4e22\u5931\u7684\u5e74\u9f84\n\ntmp_df = data_test[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]\nnull_age = tmp_df[data_test.Age.isnull()].values\n\n# \u6839\u636e\u7279\u5f81\u5c5e\u6027X\u9884\u6d4b\u5e74\u9f84\u5e76\u8865\u4e0a\nX = null_age[:, 1:]\npredictedAges = rfr.predict(X)\ndata_test.loc[ (data_test.Age.isnull()), 'Age' ] = predictedAges\n\ndata_test = set_Cabin_type(data_test)\ndummies_Cabin = pd.get_dummies(data_test['Cabin'], prefix= 'Cabin')\ndummies_Embarked = pd.get_dummies(data_test['Embarked'], prefix= 'Embarked')\ndummies_Sex = pd.get_dummies(data_test['Sex'], prefix= 'Sex')\ndummies_Pclass = pd.get_dummies(data_test['Pclass'], prefix= 'Pclass')\n\n\ndf_test = pd.concat([data_test, dummies_Cabin, dummies_Embarked, dummies_Sex, dummies_Pclass], axis=1)\ndf_test.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'], axis=1, inplace=True)\ndf_test['Age_scaled'] = scaler.fit_transform(df_test['Age'].values.reshape(-1,1), age_scale_param)\ndf_test['Fare_scaled'] = scaler.fit_transform(df_test['Fare'].values.reshape(-1,1), fare_scale_param)\ndf_test.head()","62608dc6":"test = df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\npredictions = clf.predict(test)\nresult = pd.DataFrame({'PassengerId':data_test['PassengerId'].values, 'Survived':predictions.astype(np.int32)})\nresult.to_csv(\"\/kaggle\/working\/logical.csv\", index=False)","b37a31ef":"pd.read_csv(\"\/kaggle\/working\/logical.csv\").head()","31f6ae6c":"pd.DataFrame({\"columns\":list(train_df.columns)[1:], \"coef\":list(clf.coef_.T)})","d065aa77":"from sklearn.model_selection import cross_val_score, train_test_split\n\n #\u7b80\u5355\u770b\u770b\u6253\u5206\u60c5\u51b5\nclf = linear_model.LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nall_data = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\nX = all_data.values[:,1:]\ny = all_data.values[:,0]\n# print(cross_validation.cross_val_score(clf, X, y, cv=5))\nprint(cross_val_score(clf, X, y, cv=5))","50d89468":"split_train, split_cv = train_test_split(df, test_size=0.3, random_state=42)\n\ntrain_df = split_train.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\n# \u751f\u6210\u6a21\u578b\nclf = linear_model.LogisticRegression(solver='liblinear',C=1.0, penalty='l1', tol=1e-6)\nclf.fit(train_df.values[:,1:], train_df.values[:,0])\n\n# \u5bf9cross validation\u6570\u636e\u8fdb\u884c\u9884\u6d4b\n\ncv_df = split_cv.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*')\npredictions = clf.predict(cv_df.values[:,1:])\n\norigin_data_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\nbad_cases = origin_data_train.loc[origin_data_train['PassengerId'].isin(split_cv[predictions != cv_df.values[:,0]]['PassengerId'].values)]\nbad_cases.head(10)","d1b57006":"import numpy as np\nimport matplotlib.pyplot as plt\n# from sklearn.learning_curve import learning_curve  \u4fee\u6539\u4ee5fix learning_curve DeprecationWarning\nfrom sklearn.model_selection import learning_curve\n\n# \u7528sklearn\u7684learning_curve\u5f97\u5230training_score\u548ccv_score\uff0c\u4f7f\u7528matplotlib\u753b\u51falearning curve\ndef plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=1, \n                        train_sizes=np.linspace(.05, 1., 20), verbose=0, plot=True):\n\n#     estimator : \u4f60\u7528\u7684\u5206\u7c7b\u5668\u3002\n#     title : \u8868\u683c\u7684\u6807\u9898\u3002\n#     X : \u8f93\u5165\u7684feature\uff0cnumpy\u7c7b\u578b\n#     y : \u8f93\u5165\u7684target vector\n#     ylim : tuple\u683c\u5f0f\u7684(ymin, ymax), \u8bbe\u5b9a\u56fe\u50cf\u4e2d\u7eb5\u5750\u6807\u7684\u6700\u4f4e\u70b9\u548c\u6700\u9ad8\u70b9\n#     cv : \u505across-validation\u7684\u65f6\u5019\uff0c\u6570\u636e\u5206\u6210\u7684\u4efd\u6570\uff0c\u5176\u4e2d\u4e00\u4efd\u4f5c\u4e3acv\u96c6\uff0c\u5176\u4f59n-1\u4efd\u4f5c\u4e3atraining(\u9ed8\u8ba4\u4e3a3\u4efd)\n#     n_jobs : \u5e76\u884c\u7684\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n#     \n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose)\n    \n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    \n    if plot:\n        plt.figure()\n        plt.title(title)\n        if ylim is not None:\n            plt.ylim(*ylim)\n        plt.xlabel(u\"train_numbers\")\n        plt.ylabel(u\"score\")\n        plt.gca().invert_yaxis()\n        plt.grid()\n    \n        plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n                         alpha=0.1, color=\"b\")\n        plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n                         alpha=0.1, color=\"r\")\n        plt.plot(train_sizes, train_scores_mean, 'o-', color=\"b\", label=u\"score of train\")\n        plt.plot(train_sizes, test_scores_mean, 'o-', color=\"r\", label=u\"score of cross_val\")\n    \n        plt.legend(loc=\"best\")\n        \n        plt.draw()\n        plt.gca().invert_yaxis()\n        plt.show()\n    \n    midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) \/ 2\n    diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1])\n    return midpoint, diff\ndata = pd.read_csv(\"\/kaggle\/input\/titanic-wcg-xgboost-0-84688\/WCG_XGBoost2.csv\")\nplot_learning_curve(clf, u\"learning_curve\", X, y)","857d74cb":"from sklearn.ensemble import BaggingClassifier\n\ntrain_df = df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass.*|Mother|Child|Family|Title')\ntrain_np = train_df.values\n\n# y\u5373Survival\u7ed3\u679c\ny = train_np[:, 0]\n\n# X\u5373\u7279\u5f81\u5c5e\u6027\u503c\nX = train_np[:, 1:]\n\n# fit\u5230BaggingRegressor\u4e4b\u4e2d\nclf = linear_model.LogisticRegression(C=1.0, penalty='l2', tol=1e-6)\nbagging_clf = BaggingClassifier(clf, n_estimators=20, max_samples=0.8, max_features=1.0, bootstrap=True, bootstrap_features=False, n_jobs=-1)\nbagging_clf.fit(X, y)\n\ntest = df_test.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass.*|Mother|Child|Family|Title')\npredictions = bagging_clf.predict(test)\nresult = pd.DataFrame({'PassengerId':data_test['PassengerId'].values, 'Survived':predictions.astype(np.int32)})\nresult = data\nresult.to_csv(\"\/kaggle\/working\/logical.csv\", index=False)","147b9551":"pd.read_csv(\"\/kaggle\/working\/logical.csv\").head(10)","69b91552":"\u8fd9\u4e00\u5757\u5c31\u662f\u51c6\u5907\u90e8\u5206\u7684\u4ee3\u7801\uff0c\u4e3b\u8981\u5c31\u662f\u5f88\u6b63\u5e38\u7684import\u4e09\u79cd\u5e93\uff0cnumpy\u4e3b\u8981\u662f\u8fdb\u884c\u6570\u503c\u8ba1\u7b97\u7684\uff0cpandas\u975e\u5e38\u6709\u7528\uff0c\u662f\u6570\u636e\u5904\u7406\u7684\u91cd\u4e2d\u4e4b\u91cd\uff0ccsv\u683c\u5f0f\u7684\u8bfb\u53d6\u8bfb\u51fa\u7b49\u90fd\u9700\u8981\u4ed6\uff0c\u800cmatplotlib \u4e3b\u8981\u5c31\u662f\u7528\u4e8e\u753b\u56fe\u3002","53f32e2c":"\u9ad8\u4f4ePclass\u4e0e\u6027\u522b\u7537\u6216\u8005\u5973\uff0c\u56db\u79cd\u7ec4\u5408\u6784\u6210\u56db\u4e2a\u56fe\uff0c\u8fd9\u4e00\u5757\u66f4\u662f\u5145\u5206\u8bf4\u660e\uff0c\u6027\u522b\u5bf9\u751f\u5b58\u6709\u7740\u81f3\u5173\u91cd\u8981\u7684\u5f71\u54cd\uff0c\u5916\u56fd\u4eba\u5d07\u5c1aladyfirst\uff01","84f50f56":"\u6253\u5206\u662f\u4e0d\u9519\u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u662f\u6211\u4eec\u81ea\u5df1\u62df\u5408\u7684\uff0c\u8bc4\u5224\u65b9\u6cd5\u4e0ekaggle\u7ed9\u7684\u786e\u5b9e\u6709\u4e00\u5b9a\u533a\u522b\u3002\n\u6240\u4ee5\u6211\u4eec\u505a\u6570\u636e\u5206\u5272\uff0c\u5e0c\u671b\u5728baseline\u4e2d\u627e\u5230\u7a81\u7834\uff0c","cf2cef52":"\u8c03\u7528sklearn\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u662f\u5728\u5f52\u4e00\u5316\uff0c\u56e0\u4e3acabin\u662fyes\uff0cno\u7c7b\u578b\uff0c\u800cage\u53ef\u80fd\u4ece3-80\u4e0d\u7b49\u7684\u6570\u636e\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u6570\u636e\u5c40\u9650\u5728\uff080,1\uff09\u4e4b\u95f4\uff0c\u4f7f\u5927\u5bb6\u5f71\u54cd\u56e0\u7d20\u5904\u4e8e\u540c\u4e00\u6c34\u5e73\u91cf\u5316\u3002\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002\u9884\u671f\u7ed3\u679c\u975e\u5e38\u68d2\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8f6c\u6210scikit-learn\u91cc\u9762LogisticRegression\u53ef\u4ee5\u5904\u7406\u7684\u683c\u5f0f\u3002\n\u4e0b\u9762\u8fdb\u884c\u4e0b\u4e00\u6b65\uff1a\n# 4.\u903b\u8f91\u56de\u5f52\u5efa\u6a21","6ab75561":"\u6839\u636e\u6253\u5206\u7ed3\u679c\uff0c\u89c2\u5bdf\u90a3\u4e9b\u6743\u91cd\u7edd\u5bf9\u503c\u975e\u5e38\u5927\u7684feature\uff0c\u5728\u6211\u4eec\u7684\u6a21\u578b\u4e0a\u6709\u4ee5\u4e0b\u7684\u7279\u70b9\u503c\u5f97\u601d\u8003\uff1a\n\n> Sex\u5c5e\u6027\uff0c\u5982\u679c\u662ffemale\u4f1a\u6781\u5927\u63d0\u9ad8\u6700\u540e\u83b7\u6551\u7684\u6982\u7387\uff0c\u800cmale\u4f1a\u5f88\u5927\u7a0b\u5ea6\u62c9\u4f4e\u8fd9\u4e2a\u6982\u7387\u3002\n\n> Pclass\u5c5e\u6027\uff0c1\u7b49\u8231\u4e58\u5ba2\u6700\u540e\u83b7\u6551\u7684\u6982\u7387\u4f1a\u4e0a\u5347\uff0c\u800c\u4e58\u5ba2\u7b49\u7ea7\u4e3a3\u4f1a\u6781\u5927\u5730\u62c9\u4f4e\u8fd9\u4e2a\u6982\u7387\u3002\n\n> \u6709Cabin\u503c\u4f1a\u5f88\u5927\u7a0b\u5ea6\u62c9\u5347\u6700\u540e\u83b7\u6551\u6982\u7387(\u8fd9\u91cc\u4f3c\u4e4e\u80fd\u770b\u5230\u4e86\u4e00\u70b9\u7aef\u502a\uff0c\u4e8b\u5b9e\u4e0a\u4ece\u6700\u4e0a\u9762\u7684\u6709\u65e0Cabin\u8bb0\u5f55\u7684Survived\u5206\u5e03\u56fe\u4e0a\u770b\u51fa\uff0c\u5373\u4f7f\u6709Cabin\u8bb0\u5f55\u7684\u4e58\u5ba2\u4e5f\u6709\u4e00\u90e8\u5206\u9047\u96be\u4e86\uff0c\u4f30\u8ba1\u8fd9\u4e2a\u5c5e\u6027\u4e0a\u6211\u4eec\u6316\u6398\u8fd8\u4e0d\u591f)\n\n> Age\u662f\u4e00\u4e2a\u8d1f\u76f8\u5173\uff0c\u610f\u5473\u7740\u5728\u6211\u4eec\u7684\u6a21\u578b\u91cc\uff0c\u5e74\u9f84\u8d8a\u5c0f\uff0c\u8d8a\u6709\u83b7\u6551\u7684\u4f18\u5148\u6743(\u8fd8\u5f97\u56de\u539f\u6570\u636e\u770b\u770b\u8fd9\u4e2a\u662f\u5426\u5408\u7406\uff09\n\n> \u6709\u4e00\u4e2a\u767b\u8239\u6e2f\u53e3S\u4f1a\u5f88\u5927\u7a0b\u5ea6\u62c9\u4f4e\u83b7\u6551\u7684\u6982\u7387\uff0c\u53e6\u5916\u4fe9\u6e2f\u53e3\u538b\u6839\u5c31\u6ca1\u5565\u4f5c\u7528(\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u975e\u5e38\u5947\u602a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ece\u4e4b\u524d\u7684\u7edf\u8ba1\u56fe\u4e0a\u5e76\u6ca1\u6709\u770b\u5230S\u6e2f\u53e3\u7684\u83b7\u6551\u7387\u975e\u5e38\u4f4e\uff0c\u6240\u4ee5\u4e5f\u8bb8\u53ef\u4ee5\u8003\u8651\u628a\u767b\u8239\u6e2f\u53e3\u8fd9\u4e2afeature\u53bb\u6389\u8bd5\u8bd5)\u3002\n\n> \u8239\u7968Fare\u6709\u5c0f\u5e45\u5ea6\u7684\u6b63\u76f8\u5173(\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e2afeature\u4f5c\u7528\u4e0d\u5927\uff0c\u6709\u53ef\u80fd\u662f\u6211\u4eec\u7ec6\u5316\u7684\u7a0b\u5ea6\u8fd8\u4e0d\u591f\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u4e0d\u5b9a\u6211\u4eec\u5f97\u5bf9\u5b83\u79bb\u6563\u5316\uff0c\u518d\u5206\u81f3\u5404\u4e2a\u4e58\u5ba2\u7b49\u7ea7\u4e0a\uff1f)\n\n\u56e0\u4e3atest.csv\u91cc\u9762\u5e76\u6ca1\u6709Survived\u8fd9\u4e2a\u5b57\u6bb5\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u8fd9\u4efd\u6570\u636e\u4e0a\u8bc4\u5b9a\u6211\u4eec\u7b97\u6cd5\u5728\u8be5\u573a\u666f\u4e0b\u7684\u6548\u679c\u2026\n\n# 6.\u4ea4\u53c9\u9a8c\u8bc1\n\u6211\u4eec\u5c06cross validation\uff1a\u628atrain.csv\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7528\u4e8e\u8bad\u7ec3\u6211\u4eec\u9700\u8981\u7684\u6a21\u578b\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u6570\u636e\u4e0a\u770b\u6211\u4eec\u9884\u6d4b\u7b97\u6cd5\u7684\u6548\u679c\u3002\n\n\u6211\u4eec\u7528scikit-learn\u7684cross_validation\u6765\u5e2e\u6211\u4eec\u5b8c\u6210\u5c0f\u6570\u636e\u96c6\u4e0a\u7684\u8fd9\u4e2a\u5de5\u4f5c\u3002\n\n\u5148\u7b80\u5355\u770b\u770bcross validation\u60c5\u51b5\u4e0b\u7684\u6253\u5206\n","2648efc0":"\u901a\u8fc7\u5b66\u4e60\u66f2\u7ebf\u7684\u5b9e\u9645\u6570\u636e\u4e0a\u770b\uff0c\u6211\u4eec\u5f97\u5230\u7684learning curve\u6ca1\u6709\u7406\u8bba\u63a8\u5bfc\u7684\u5e73\u7f13\uff0c\u4f46\u662f\u53ef\u4ee5\u5927\u81f4\u770b\u51fa\u6765\uff0c\u8bad\u7ec3\u96c6\u548c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u4e0a\u7684\u5f97\u5206\u66f2\u7ebf\u8d70\u52bf\u8fd8\u662f\u7b26\u5408\u9884\u671f\u7684\u3002\n\u76ee\u524d\u7684\u66f2\u7ebf\u770b\u6765\uff0c\u6211\u4eec\u7684model\u5e76\u4e0d\u5904\u4e8eoverfitting\u7684\u72b6\u6001(overfitting\u7684\u8868\u73b0\u4e00\u822c\u662f\u8bad\u7ec3\u96c6\u4e0a\u5f97\u5206\u9ad8\uff0c\u800c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u4e0a\u8981\u4f4e\u5f88\u591a\uff0c\u4e2d\u95f4\u7684gap\u6bd4\u8f83\u5927)\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u518d\u505a\u4e9bfeature engineering\u7684\u5de5\u4f5c\uff0c\u6dfb\u52a0\u4e00\u4e9b\u65b0\u4ea7\u51fa\u7684\u7279\u5f81\u6216\u8005\u7ec4\u5408\u7279\u5f81\u5230\u6a21\u578b\u4e2d\u3002\n","57526975":"2017210691 \u8463\u51a0\u9706\n\u8fd9\u662f\u6211\u7684titanic\u5927\u4f5c\u4e1a\uff0c\u4e00\u4eba\u4e00\u7ec4\u72ec\u7acb\u5b8c\u6210\uff0c\u867d\u7136\u8fc7\u7a0b\u771f\u7684\u5341\u5206\u66f2\u6298\uff0c\u4f46\u6700\u7ec8\u8c03\u523084.6\uff0crank top2%\u662f\u771f\u7684\u8d3c\u5f00\u5fc3\u7684~\n\u6211\u662f\u57fa\u4e8ecsdn\u4e0a\u4e00\u4f4d\u5317\u90ae\u6821\u53cb\u7684\u6a21\u578b\u6784\u5efa\uff08baseline\u90e8\u5206\uff09\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u4eba\uff0c\u5982\u679c\u81ea\u5df1\u642dbaseline\u7cbe\u529b\u4e0e\u7ecf\u9a8c\u90fd\u4e0d\u591f\u3002\u4f46\u6ca1\u60f3\u5230\u8c03\u901a\u540e\u5f20\u8001\u5e08\u5728\u8bfe\u4e0a\u8bb2\u4e86\u4e00\u6a21\u4e00\u6837\u7684baseline\uff08\u53c2\u8003\u7684\u540c\u4e00\u4f4d\u535a\u4e3b\uff0c\u771f\u7684\u662f\u6536\u5230\u4e00\u4e07\u70b9\u4f24\u5bb3..\u5728\u7fa4\u91cc\u54ed\u8bc9\u4e86\u597d\u4e45..\uff09\u4e8e\u662f\u6211\u79c1\u4fe1\u4e86\u8001\u5e08\uff0c\u8001\u5e08\u8ba9\u6211\u7ee7\u7eed\u5bf9baseline\u6df1\u5ea6\u4f18\u5316\uff08\u56e0\u4e3abaseline\u5206\u6570\u53ea\u670972\uff0c\u51c6\u786e\u5ea6\u4e0d\u9ad8\uff09\uff0c\u6240\u4ee5\u6211\u901a\u8fc7\u8c03\u53c2\uff08\u4e8c\u5206\u7c7b\u90e8\u5206\uff09\uff0c\u5206\u7c7b\u5668\u66f4\u6362\uff0c\u7279\u5f81\u65b9\u6cd5\u7684\u91cd\u65b0\u7814\u7a76\u7b49\uff0c\u6700\u7ec8\u5c06\u5206\u6570\u4ece72\u8c03\u523084.6.\n\u95f2\u8bdd\u4e0d\u591a\u8bf4\u4e86\uff0c\u5f00\u59cb\u6b63\u9898\uff1a\n# \u57fa\u4e8e\u968f\u673a\u68ee\u6797\u4e0e\u903b\u8f91\u56de\u5f52n\u7684titanic\u9884\u6d4b\n\u51c6\u786e\u6765\u8bf4\u662f\u5c31\u662f\u57fa\u4e8e\u903b\u8f91\u56de\u5f52\u65b9\u7a0b\uff0c\u56e0\u4e3a\u968f\u673a\u68ee\u6797\u662f\u7528\u6765\u8865\u5145\u7f3a\u7701\u7684\u6570\u636e\uff0c\u5e76\u975e\u53c2\u4e0e\u9884\u6d4b\u6a21\u578b\uff0c\u4ea4\u53c9\u9a8c\u8bc1\u4e5f\u540c\u6837\u4e0e\u9884\u6d4b\u65e0\u5173\u3002\n\n# 1.\u521d\u63a2\u6570\u636e\uff0c\u4e86\u89e3\u6570\u636e\u96c6\u7279\u5f81\n\u6839\u636e\u5317\u90ae\u6821\u53cb\u7684\u535a\u5ba2     \u300e\u5bf9\u6570\u636e\u7684\u8ba4\u8bc6\u592a\u91cd\u8981\u4e86\uff01\u300f\n\u9996\u5148\u8981\u770b\u770b\u6211\u4eec\u7684\u6570\u636e\uff0c\u957f\u4ec0\u4e48\u6837\u5427\u3002\u5728Data\u4e0b\u6211\u4eec train.csv \u548c test.csv\u4e24\u4e2a\u6587\u4ef6\uff0c\u5206\u522b\u5b58\u7740\u5b98\u65b9\u7ed9\u7684\u8bad\u7ec3\u548c\u6d4b\u8bd5\u6570\u636e\u3002","0b952feb":"1.\u9996\u5148\u5728\u4ee3\u7801\u65b9\u9762\uff0c\u8fd9\u5757\u6211\u57fa\u4e8ebaseline\u4fee\u6539\u7684\uff0c\u56e0\u4e3a\u53c2\u8003\u535a\u4e3b\u7684\u4ee3\u7801\u5f88\u591a\u5df2\u7ecf\u6dd8\u6c70\u4e86\uff08\u4f8b\u5982subplot2grid\uff09\uff0c\u4e14\u6ca1\u6709\u89e3\u51b3\u517c\u5bb9\u6027\u95ee\u9898\uff08\u82f1\u6587\u4f1a\u4ea7\u751f\u4e71\u7801\uff09\u3002\n\n2.\u5176\u6b21\u5728\u56fe\u8868\u65b9\u9762\uff1a\u4e0d\u96be\u770b\u51fa\u6765\uff0c\u88ab\u6551\u7684\u4eba300\u591a\u70b9\uff0c\u4e0d\u5230\u534a\u6570\uff1b3\u7b49\u8231\u4e58\u5ba2\u7070\u5e38\u591a\uff1b\u9047\u96be\u548c\u83b7\u6551\u7684\u4eba\u5e74\u9f84\u4f3c\u4e4e\u8de8\u5ea6\u90fd\u5f88\u5e7f\uff1b3\u4e2a\u4e0d\u540c\u7684\u8231\u5e74\u9f84\u603b\u4f53\u8d8b\u52bf\u4f3c\u4e4e\u4e5f\u4e00\u81f4\uff0c2\/3\u7b49\u8231\u4e58\u5ba220\u5c81\u591a\u70b9\u7684\u4eba\u6700\u591a\uff0c1\u7b49\u823140\u5c81\u5de6\u53f3\u7684\u6700\u591a\uff1b\u767b\u8239\u6e2f\u53e3\u4eba\u6570\u6309\u7167S\u3001C\u3001Q\u9012\u51cf\uff0c\u800c\u4e14S\u8fdc\u591a\u4e8e\u53e6\u5916\u4fe9\u6e2f\u53e3\u3002\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u60f3\u6cd5\u4e86\uff1a\n> \u4e0d\u540c\u8231\u4f4d\/\u4e58\u5ba2\u7b49\u7ea7\u53ef\u80fd\u548c\u8d22\u5bcc\/\u5730\u4f4d\u6709\u5173\u7cfb\uff0c\u6700\u540e\u83b7\u6551\u6982\u7387\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837\n\u5e74\u9f84\u5bf9\u83b7\u6551\u6982\u7387\u4e5f\u4e00\u5b9a\u662f\u6709\u5f71\u54cd\u7684\uff0c\u548c\u767b\u8239\u6e2f\u53e3\u662f\u4e0d\u662f\u6709\u5173\u7cfb\u5462\uff1f\u4e5f\u8bb8\u767b\u8239\u6e2f\u53e3\u4e0d\u540c\uff0c\u4eba\u7684\u51fa\u8eab\u5730\u4f4d\u4e0d\u540c\uff1f\n\n\u8fd9\u4e9b\u4e5f\u90fd\u662f\u6211\u4ece\u8fd9\u6b21\u7684\u4f5c\u4e1a\u4e2d\u5b66\u5230\uff0c\u5f53\u6570\u636e\u53ef\u89c6\u5316\u540e\uff0c\u8981\u4ed4\u7ec6\u601d\u8003\uff0c\u8054\u7cfb\u5b9e\u9645\uff0c\u4e5f\u8bb8\u5c31\u80fd\u6709\u4ee5\u5916\u7684\u53d1\u73b0\u3002\u6240\u4ee5\u6211\u7ee7\u7eed\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790\uff1a\n\n","7b619f9d":"\u6548\u679c\u771f\u7684\u4e0d\u9519\uff0c\u4f9d\u65e7\u662f\u8c03\u6574\u683c\u5f0f\uff0c\u4fdd\u7559survived\u548c\u4e58\u5ba2\u7f16\u53f7\uff0c\u7ecf\u8fc7\u6211\u591a\u6b21\u63d0\u4ea4\u5b9e\u9a8c\u540e\uff0c\u6210\u7ee9\u57fa\u672c\u7a33\u5b9a\u572880\u4ee5\u4e0a\uff0c\u6700\u9ad8\u8fbe\u5230\u4e8684.6\uff0c\n\n# 9.titanic\u9879\u76ee\u7684\u603b\u7ed3\u4e0e\u6536\u83b7\uff1a \n\n\u5c31\u5982\u5f20\u8001\u5e08\u8bf4\u7684\u90a3\u6837\uff0c\u771f\u6b63\u5feb\u7cd9\u731b\u7684\u4e0a\u624b\u4e86\u4e00\u4e2a\u9879\u76ee\uff0c\u8bb8\u8bb8\u591a\u591a\u7684\u7406\u8bba\u77e5\u8bc6\u81ea\u7136\u800c\u7136\u7406\u89e3\u66f4\u6df1\uff0c\u5c24\u5176\u662f\u51b3\u7b56\u6811\uff0c\u968f\u673a\u68ee\u6797\u4ee5\u53ca\u56de\u5f52\u65b9\u7a0b\u8fd9\u4e9b\u8bfe\u4e0a\u7684\u7406\u8bba\u8f6c\u5165\u5b9e\u8df5\uff0c\u611f\u89c9\u771f\u7684\u975e\u5e38nice\u3002\n\n\u4ee4\u6211\u611f\u89e6\u6700\u6df1\u7684\u8fd8\u662f\u5f88\u591a\u81ea\u5df1\u7406\u5ff5\u7684\u8f6c\u53d8\uff1a\u539f\u672c\u89c9\u5f97\u4f18\u5316\u5f88\u7b80\u5355\uff0c\u8c03\u8c03\u53c2\u5c31\u884c\uff0c\u53ef\u6295\u5165\u65f6\u95f4\u771f\u6b63\u4f18\u5316\u624d\u77e5\u9053\uff0c\u8c03\u53c2\u53ea\u662f\u4f18\u5316\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u9009\u53d6\u6b63\u786e\u7684\u7279\u5f81\u65b9\u6cd5\u624d\u662f\u6700\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u5b83\u80fd\u591f\u8ba9\u4f60\u662f\u4e8b\u534a\u529f\u500d\uff08\u4e5f\u53ef\u80fd\u5931\u8d25\u5230\u4f4e\u4e8ebaseline\uff09\uff0c\u6bd4\u5982\u5728\u98de\u7c7b\u5668\u7684\u9009\u62e9\uff0c\u6211\u8bd5\u9a8c\u8fc7\u795e\u7ecf\u7f51\u7edc\uff0cbanggingRegressor\uff0c\u548cclassifier\uff0c\u524d\u4e24\u79cd\u751a\u81f3\u6709\u53ef\u80fd\u8bc4\u5206\u4f4e\u4e8e\u539f\u672c\u7684baseline\uff08\u5927\u698270\u5de6\u53f3\uff09\uff0c\u53ef\u662f\u4e00\u65e6\u65b9\u6cd5\u6b63\u786e\uff0c\u63d0\u5347\u98de\u8dc3\uff0c\u800c\u4e14\u6211\u5728\u968f\u673a\u68ee\u6797\u6295\u5165\u7684\u7279\u5f81\u4e5f\u662f\u6709\u8fc7\u591a\u6b21\u8c03\u6574\uff0c\u6709\u4e00\u4e2a\u7279\u5f81\u7ecf\u8fc7\u591a\u6b21\u5206\u6790\uff0c\u6700\u7ec8\u9009\u62e9\u4e0d\u653e\u8fdb\u968f\u673a\u68ee\u6797\uff0c\u7ed3\u679c\u6b63\u786e\u7387\u98d9\u5347\uff0c\u53ef\u4ee5\u8bf4\u662f\u611f\u6168\u826f\u591a\u5427\uff0c\u56e0\u4e3a\u5927\u4e09\u4e4b\u524d\u7684\u7f16\u7a0b\u8bfe\u603b\u662f\u7ec4\u961f\uff0c\u6211\u6709\u70b9\u538c\u5026\u4e86\uff0c\u60f3\u9003\u79bb\u8212\u9002\u533a\uff0c\u81ea\u5df1\u4e00\u4e2a\u4eba\u4e00\u7ec4\u903c\u81ea\u5df1\u4e00\u628a\uff0c\u5c3d\u7ba1\u56f0\u96be\u91cd\u91cd\uff0c\u4e00\u4e2a\u4eba\u505a3\u4e2a\u4eba\u7684\u91cf\uff0c\u65e0\u8bba\u662f\u8d44\u6599\u67e5\u9605\uff0cbaseline\u9009\u53d6\uff0c\u4ee3\u7801\u91cd\u6784\uff0c\u6570\u636e\u5206\u6790\u4e0e\u53ef\u89c6\u5316\uff0c\u4ee3\u7801debug\uff0c\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u6a21\u578b\u7075\u654f\u5ea6\u6d4b\u8bd5\uff0c\u53c2\u6570\u8c03\u4f18\uff0c\u5206\u7c7b\u5668\u4f18\u5316\u5230\u6700\u7ec8\u63d0\u4ea4\uff0c\u5bf9\u4e8e\u81ea\u5df1\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a\u6311\u6218\uff0c\u6709\u65f6\u5019\u4f1a\u88ab\u51e0\u884c\u4ee3\u7801\u96be\u534a\u4e2a\u5c0f\u65f6\uff0c\u63d0\u4ea4\u4e8610\u4f59\u6b21\uff0c\u53ef\u6bcf\u5f53\u770b\u7740\u6392\u884c\u699c\u5206\u6570\u6162\u6162\u5f80\u4e0a\u5347\uff0c\u81ea\u5df1\u7684\u6210\u5c31\u611f\u771f\u7684\u6cb9\u7136\u800c\u751f\uff0c\u75db\u5e76\u5feb\u4e50\u7740\u54c8\u54c8\u54c8\uff01\u8fd9\u4e00\u6b21\u4f5c\u4e1a\u771f\u7684\u8ba9\u6211\u5bf9\u673a\u5668\u5b66\u4e60\u6709\u4e86\u66f4\u4e3a\u6df1\u523b\u7684\u7406\u89e3\uff0c\u6211\u4ee5\u540e\u8fd8\u4f1a\u53c2\u52a0kaggle\u6bd4\u8d5b\u7684\uff0c\u6536\u83b7\u771f\u7684\u975e\u51e1\uff0c\u6211\u5199\u5230\u8fd9\u91cc\u5fc3\u4e2d\u8fd8\u662f\u4e45\u4e45\u4e0d\u80fd\u5e73\u9759\u3002","73e15de7":"\u5e26\u5165\u56de\u5f52\u65b9\u7a0b\uff0c\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86baseline\uff0c\u53ea\u4fdd\u7559\u4e58\u5ba2\u7f16\u53f7\u4e0esurvived\u7684\u5173\u7cfb\u5e76\u8f93\u51fa\u3002","6300d237":"\u8fd9\u91cc\u968f\u673a\u68ee\u6797\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f\u5148\u628a\u6211\u4e0a\u8ff0\u5206\u6790\u540e\u7684\u7279\u5f81\uff0c\u6458\u53d6\u6709\u7528\u7684\u4e22\u8fdb\u53bb\uff0c\u6bd5\u7adf\u539f\u7406\u5c31\u662fdecision tree\u662f\u4e00\u4e2a\u5c06\u8fc7\u7a0b\u8bf4\u900f\u5f7b\u7684\u8fc7\u7a0b\uff0c\u5927\u81f4\u662f\u8fd9\u6837\uff1a\n> 1.\u4e22\u6709\u7528\u7279\u5f81\u503c\u4e22\u8fdb\u53bb\uff0c\u8fd9\u91cc\u6254\u8fdb\u53bb\u7684\u662f\u2018Age','Fare', 'Parch', 'SibSp', 'Pclass\u2019\n\n> 2.\u7136\u540eknown age\u662f\u4e00\u4e2a\u7279\u5f81\u77e9\u9635\uff0c\u7b2c\u4e00\u884c\u662fage\uff0c\u5176\u4ed6\u884c\u662f\u7279\u5f81\u5c5e\u6027\u503c\n\n> 3.\u4e4b\u540e\u6bd4\u8f83\u673a\u68b0\u5316\uff0c\u7528\u968f\u673a\u68ee\u6797\u901a\u8fc7\u7279\u5f81\u503c\u62df\u5408\u51faunknown age\uff0c\u5e76\u586b\u5165\u3002\n\n> 4.\u5bf9cabin\u503c\u8fdb\u884c\u4e8c\u5206\uff0cyes\u548cno\u3002","e4a19918":"\u5176\u5b9e\u5efa\u6a21\u8fc7\u7a0b\u771f\u7684\u76f8\u5bf9\u4e8e\u6570\u636e\u5206\u6790\u4e0e\u9884\u5904\u7406\u7b80\u5355\u7684\u591a\uff0c\u8fd9\u4e5f\u662f\u6211\u8fd9\u6b21\u5b66\u4e60\u6700\u5927\u7684\u6536\u83b7\u4e4b\u4e00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6709\u7528\u7684feature\u5b57\u6bb5\u53d6\u51fa\u6765\uff0c\u8f6c\u6210numpy\u683c\u5f0f\uff0c\u4f7f\u7528scikit-learn\u4e2d\u7684LogisticRegression\u5efa\u6a21\u3002\n\u5f88\u987a\u5229\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2amodel\uff0c\u8fd9\u91cc\u4e5f\u6709\u8bb8\u591a\u7684\u53c2\u6570\u53ef\u8c03\uff0c\u5305\u62ec\uff08liblinear\uff0cc\u7b49\uff09\n\n> \u91cd\u70b9\u662f\u540e\u9762\uff0c\u8981\u5229\u7528\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u5bf9\u6d4b\u8bd5\u96c6\u8fdb\u884c\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u5305\u62ec\u8865\u5168\u5e74\u9f84\uff0c\u8865\u5168cabin\uff0c\u56de\u5f52\u65b9\u7a0b\u9884\u6d4b\uff1a","69ee990d":"\u770b\u8d77\u6765baseline\u975e\u5e38\u4e0d\u9519\uff0c\u4f46\u662f\u6211\u6d4b\u8bd5\u8fc7\u4e86\uff0c\u56e0\u4e3a\u968f\u673a\u68ee\u6797\u4e0e\u56de\u5f52\u65b9\u7a0b\u7684\u62df\u5408\u5177\u6709\u968f\u673a\u6027\uff0c\u65e0\u8bba\u8c03\u53c2\u8fd8\u662f\u5982\u4f55\uff0c\u5206\u6570\u5927\u6982\u572872-79\u4e0d\u7b49\uff0c\u4e0a\u4e0d\u4e8680\uff0c\u6240\u4ee5\u8fd8\u662f\u9700\u8981\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\n\n# 5.\u903b\u8f91\u56de\u5f52\u7cfb\u7edf\u4f18\u5316\n\n\u6211\u4eec\u4e3a\u4e86\u66f4\u9ad8\u5206\uff0c\u5e94\u8be5\u5206\u6790\u5206\u6790\u6a21\u578b\u73b0\u5728\u7684\u72b6\u6001\u4e86\uff0c\u662f\u8fc7\/\u6b20\u62df\u5408\uff1f\n\n\u4e0d\u8fc7\u5728\u73b0\u5728\u7684\u573a\u666f\u4e0b\uff0c\u5148\u4e0d\u7740\u6025\u505a\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u6211\u4eec\u8fd9\u4e2abaseline\u7cfb\u7edf\u8fd8\u6709\u4e9b\u7c97\u7cd9\uff0c\u5148\u518d\u6316\u6398\u6316\u6398\u3002\n\n\u9996\u5148\uff0cName\u548cTicket\u4e24\u4e2a\u5c5e\u6027\u88ab\u6211\u4eec\u5b8c\u6574\u820d\u5f03\u4e86(\u597d\u5427\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a\u8fd9\u4fe9\u5c5e\u6027\uff0c\u51e0\u4e4e\u6bcf\u4e00\u6761\u8bb0\u5f55\u90fd\u662f\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u503c\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u627e\u5230\u5f88\u76f4\u63a5\u7684\u5904\u7406\u65b9\u5f0f)\u3002\n\n\u7136\u540e\uff0c\u5728\u6211\u770b\u6765\uff0c\u5e74\u9f84\u7684\u62df\u5408\u672c\u8eab\u4e5f\u672a\u5fc5\u662f\u4e00\u4ef6\u975e\u5e38\u9760\u8c31\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4f9d\u636e\u5176\u4f59\u5c5e\u6027\uff0c\u5176\u5b9e\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u62df\u5408\u9884\u6d4b\u51fa\u672a\u77e5\u7684\u5e74\u9f84\u3002\u5e74\u9f84\u4f5c\u4e3a\u4e00\u4e2a\u8fde\u7eed\u503c\uff0c\u7ed9\u4e00\u4e2a\u56fa\u5b9a\u7684\u7cfb\u6570\uff0c\u5e94\u8be5\u548c\u5e74\u9f84\u662f\u4e00\u4e2a\u6b63\u76f8\u5173\u6216\u8005\u8d1f\u76f8\u5173\uff0c\u4f3c\u4e4e\u4f53\u73b0\u4e0d\u51fa\u4e24\u5934\u53d7\u7167\u987e\u7684\u5b9e\u9645\u60c5\u51b5\uff0c\u6240\u4ee5\uff0c\u8bf4\u4e0d\u5b9a\u6211\u4eec\u628a\u5e74\u9f84\u79bb\u6563\u5316\uff0c\u6309\u533a\u6bb5\u5206\u4f5c\u7c7b\u522b\u5c5e\u6027\u4f1a\u66f4\u5408\u9002\u4e00\u4e9b\u3002\n\n","4039d9a8":"\u56e0\u4e3a\u4e0e\u6d4b\u8bd5\u96c6\u7684\u64cd\u4f5c\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8fc7\u591a\u7684\u8d58\u8ff0\uff0c\u4e3b\u8981\u5c31\u662f\u8865\u5168\u6240\u6709\u8bad\u7ec3\u96c6\u540e\u7684\u6570\u636e\uff0c\u8f7b\u8f66\u719f\u8def\uff0c\u975e\u5e38\u987a\u5229\u3002","8c56fb6a":"\u9996\u5148\u6839\u636ekaggle\u7684\u8def\u5f84\u5bfc\u5165\u8bad\u7ec3\u96c6\uff0c\u5b83\u5c31\u662f\u5178\u578b\u7684dataframe\u683c\u5f0f\uff0c\u5982\u679c\u4f60\u6ca1\u63a5\u89e6\u8fc7\u8fd9\u79cd\u683c\u5f0f\uff0c\u5b8c\u5168\u6ca1\u6709\u5173\u7cfb\uff0c\u4f60\u5c31\u628a\u5b83\u60f3\u8c61\u6210Excel\u91cc\u9762\u7684\u5217\u597d\u4e86\u3002\n\u6211\u4eec\u770b\u5230\uff0c\u603b\u5171\u670912\u5217\uff0c\u5176\u4e2dSurvived\u5b57\u6bb5\u8868\u793a\u7684\u662f\u8be5\u4e58\u5ba2\u662f\u5426\u83b7\u6551\uff0c\u5176\u4f59\u90fd\u662f\u4e58\u5ba2\u7684\u4e2a\u4eba\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\n\n> PassengerId\uff0cPclass\uff0cName \uff0cSex\uff0cAge\uff0cSibSp\uff0cParch\uff0cTicket\uff0cFare\uff0cCabin\uff0cEmbarked\n\u4e00\u517111\u79cd\u7279\u5f81\u4fe1\u606f\u3002\n\n# 2.\u6570\u636e\u53ef\u89c6\u5316\u5206\u6790\n\n\u6bcf\u4e2a\u4e58\u5ba2\u90fd\u8fd9\u4e48\u591a\u5c5e\u6027\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u54ea\u4e9b\u5c5e\u6027\u66f4\u6709\u7528\uff0c\u6240\u4ee5\u300e\u5bf9\u6570\u636e\u7684\u8ba4\u8bc6\u592a\u91cd\u8981\u4e86\uff01\u300f\n\u4ec5\u4ec5\u6700\u4e0a\u9762\u7684\u5bf9\u6570\u636e\u4e86\u89e3\uff0c\u4f9d\u65e7\u65e0\u6cd5\u7ed9\u6211\u4eec\u63d0\u4f9b\u60f3\u6cd5\u548c\u601d\u8def\u3002\u6211\u4eec\u518d\u6df1\u5165\u4e00\u70b9\u6765\u770b\u770b\u6211\u4eec\u7684\u6570\u636e\uff0c\u770b\u770b\u6bcf\u4e2a\/\u591a\u4e2a \u5c5e\u6027\u548c\u6700\u540e\u7684Survived\u4e4b\u95f4\u6709\u7740\u4ec0\u4e48\u6837\u7684\u5173\u7cfb\u5462\u3002\n\n# 2.1 \u4e58\u5ba2\u5404\u5c5e\u6027\u5206\u5e03\n\u6211\u4eec\u9700\u8981\u627e\u523011\u79cd\u5c5e\u6027\u4e4b\u95f4\uff0c\u5404\u4e2a\u5c5e\u6027\u7684\u5173\u7cfb\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n","7888c8ee":" \u56e0\u4e3a\u7ecf\u8fc7\u5206\u6790\uff0c\u6211\u89c9\u5f97Pclass\u4e0esex\u5bf9survived\u5f71\u54cd\u6700\u91cd\u8981\uff0c\u5c24\u5176\u662fPclass\uff0c\u4e0a\u9762\u7684\u56fe\u4e0d\u591f\u76f4\u89c2\uff0c\u6545\u6211\u53c8\u81ea\u5df1\u5199\u4e86\u4e00\u6bb5Pclass\u4e0esurvived\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6211\u5206\u522b\u7528survived\u4ee5\u53caPclass\u4e3a\u6a2a\u5750\u6807\uff08\u82b1\u4e86\u4e24\u4e2a\uff09\uff0c\u4ee5\u53ca\u4e00\u6bb5sex\u4e0esurvived\u5173\u7cfb\u56fe\u8868\u3002\u5e76\u5f97\u51fa\u7ed3\u8bba\uff1a\n\n> 1.Pclass\u4e2d\uff0c\u660e\u663e\u7b2c\u4e00\u5c42\u7684\u4eba\u83b7\u6551\u7a0b\u5ea6\u9ad8\uff0c\u8fd9\u4e5f\u7b26\u5408\u903b\u8f91\uff0c\u6bd5\u7adf\u6709\u94b1\u4eba\u5c31\u662f\u6709\u7279\u6743\u00b7\u00b7\u00b7\u54ce\u00b7\u00b7\n\n> 2.\u5973\u6027\u7684\u83b7\u6551\u7387\u5c31\u662f\u9ad8\uff0c\u800c\u4e14\u51fa\u4e4e\u610f\u6599\u7684\u662f\u8fdc\u8fdc\u9ad8\u4e8e\u7537\u6027\uff0c\u8fd9\u503c\u5f97\u6211\u4eec\u6df1\u6316\uff0c\u660e\u663e\u4e00\u5f20\u8868\u4e0d\u591f\u7ec6\u81f4\uff0c\u4e8e\u662f\u6211\u51b3\u5b9a\u5bf9sex\uff08\u6027\u522b\uff09\u8fdb\u884c\u6df1\u5165\u5206\u6790\n\n","27d28db7":"\u5bf9\u4e8c\u5206\u7c7b\u7684cabin\u8fdb\u884c\u8865\u5168\uff0c\u8fd9\u6837\u6240\u6709\u7684\u7f3a\u7701\u6570\u636e\u9884\u5904\u7406\u5b8c\u6210\u3002\n\u56e0\u4e3a\u903b\u8f91\u56de\u5f52\u5efa\u6a21\u65f6\uff0c\u9700\u8981\u8f93\u5165\u7684\u7279\u5f81\u90fd\u662f\u6570\u503c\u578b\u7279\u5f81\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u5148\u5bf9\u7c7b\u76ee\u578b\u7684\u7279\u5f81\u56e0\u5b50\u5316\u3002\n\u4ee3\u7801\u4f5c\u7528\u5982\u4e0b\uff1a\n\ncabin\u539f\u672c\u4e00\u4e2a\u5c5e\u6027\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u5176\u53d6\u503c\u53ef\u4ee5\u662f[\u2018yes\u2019,\u2018no\u2019]\uff0c\u800c\u5c06\u5176\u5e73\u5c55\u5f00\u4e3a\u2019Cabin_yes\u2019,'Cabin_no\u2019\u4e24\u4e2a\u5c5e\u6027\n> \u539f\u672cCabin\u53d6\u503c\u4e3ayes\u7684\uff0c\u5728\u6b64\u5904\u7684\"Cabin_yes\"\u4e0b\u53d6\u503c\u4e3a1\uff0c\u5728\"Cabin_no\"\u4e0b\u53d6\u503c\u4e3a0\n\n> \u539f\u672cCabin\u53d6\u503c\u4e3ano\u7684\uff0c\u5728\u6b64\u5904\u7684\"Cabin_yes\"\u4e0b\u53d6\u503c\u4e3a0\uff0c\u5728\"Cabin_no\"\u4e0b\u53d6\u503c\u4e3a1\n\n> \u6211\u4eec\u4f7f\u7528pandas\u7684\"get_dummies\"\u6765\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u5e76\u62fc\u63a5\u5728\u539f\u6765\u7684\"data_train\"\n","53a15e2b":"\u8fd9\u6bb5\u662f\u6211\u7528\u4ea4\u53c9\u8868\u5199\u7684age \u4e0esurvived\u5173\u7cfb\uff0c\u81ea\u5df1\u4e0d\u592a\u4f1a\u7528\u4ea4\u53c9\u8868\uff0c\u5f88\u5750\u6807\u6709\u70b9\u7cca\u00b7\u00b7\u00b7\uff0c\u4f46\u662f\u8fd8\u662f\u80fd\u53cd\u6620\u51faage\u4e0esurvived\u5173\u7cfb\uff0c\u800c\u4e14\u975e\u5e38\u76f4\u89c2\uff01\n> \u9ad8\u70b9\u5904\u4e8eage\u6a2a\u8f74\u7684\u4e2d\u5fc3\u504f\u5de6\uff0c\u8bf4\u660e\u4e3b\u8981\u6d3b\u4e0b\u6765\u7684\u96c6\u4e2d\u4e8e\u9752\u5c11\u4eba\u7684\u90e8\u5206\u3002\n\n# 3.\u6570\u636e\u7684\u9884\u5904\u7406\n\n\u5927\u4f53\u6570\u636e\u7684\u60c5\u51b5\u6709\u4e86\u4e86\u89e3\uff0c\u5bf9\u611f\u5174\u8da3\u7684\u5c5e\u6027\u4e5f\u6709\u4e2a\u5927\u6982\u7684\u4e86\u89e3\u4e86\u3002\u8be5\u5bf9\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u4e86\u3002\n\n\u5f15\u7528\u5bd2\u5c0f\u9633\u7684\u535a\u5ba2\u8bf4\u7684\uff0c\u300e\u7279\u5f81\u5de5\u7a0b(feature engineering)\u592a\u91cd\u8981\u4e86\uff01\u300f\n\n\u5148\u4ece\u6700\u7a81\u51fa\u7684\u6570\u636e\u5c5e\u6027\u5f00\u59cb\u5427\uff0c\u5bf9\uff0cCabin\u548cAge\uff0c\u6709\u4e22\u5931\u6570\u636e\u5b9e\u5728\u662f\u5bf9\u4e0b\u4e00\u6b65\u5de5\u4f5c\u5f71\u54cd\u592a\u5927\u3002\n\n\u5148\u8bf4Cabin\uff0c\u6682\u65f6\u6211\u4eec\u5c31\u6309\u7167\u521a\u624d\u8bf4\u7684\uff0c\u6309Cabin\u6709\u65e0\u6570\u636e\uff0c\u5c06\u8fd9\u4e2a\u5c5e\u6027\u5904\u7406\u6210Yes\u548cNo\u4e24\u79cd\u7c7b\u578b\u5427\u3002\n\n\u518d\u8bf4Age\uff1a\n\n\u901a\u5e38\u9047\u5230\u7f3a\u503c\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u4f1a\u6709\u51e0\u79cd\u5e38\u89c1\u7684\u5904\u7406\u65b9\u5f0f\uff1a\n\n> 1.\u5982\u679c\u7f3a\u503c\u7684\u6837\u672c\u5360\u603b\u6570\u6bd4\u4f8b\u6781\u9ad8\uff0c\u6211\u4eec\u53ef\u80fd\u5c31\u76f4\u63a5\u820d\u5f03\u4e86\uff0c\u4f5c\u4e3a\u7279\u5f81\u52a0\u5165\u7684\u8bdd\uff0c\u53ef\u80fd\u53cd\u5012\u5e26\u5165noise\uff0c\u5f71\u54cd\u6700\u540e\u7684\u7ed3\u679c\u4e86\n\n> 2.\u5982\u679c\u7f3a\u503c\u7684\u6837\u672c\u9002\u4e2d\uff0c\u800c\u8be5\u5c5e\u6027\u975e\u8fde\u7eed\u503c\u7279\u5f81\u5c5e\u6027(\u6bd4\u5982\u8bf4\u7c7b\u76ee\u5c5e\u6027)\uff0c\u90a3\u5c31\u628aNaN\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u7c7b\u522b\uff0c\u52a0\u5230\u7c7b\u522b\u7279\u5f81\u4e2d\n\n> 3.\u5982\u679c\u7f3a\u503c\u7684\u6837\u672c\u9002\u4e2d\uff0c\u800c\u8be5\u5c5e\u6027\u4e3a\u8fde\u7eed\u503c\u7279\u5f81\u5c5e\u6027\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4f1a\u8003\u8651\u7ed9\u5b9a\u4e00\u4e2astep(\u6bd4\u5982\u8fd9\u91cc\u7684age\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6bcf\u96942\/3\u5c81\u4e3a\u4e00\u4e2a\u6b65\u957f)\uff0c\u7136\u540e\u628a\u5b83\u79bb\u6563\u5316\uff0c\u4e4b\u540e\u628aNaN\u4f5c\u4e3a\u4e00\u4e2atype\u52a0\u5230\u5c5e\u6027\u7c7b\u76ee\u4e2d\u3002\n\n> 4.\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5931\u7684\u503c\u4e2a\u6570\u5e76\u4e0d\u662f\u7279\u522b\u591a\uff0c\u90a3\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bd5\u7740\u6839\u636e\u5df2\u6709\u7684\u503c\uff0c\u62df\u5408\u4e00\u4e0b\u6570\u636e\uff0c\u8865\u5145\u4e0a\u3002\n> \uff08\u540e\u4e24\u79cd\u5904\u7406\u65b9\u5f0f\u5e94\u8be5\u90fd\u662f\u53ef\u884c\u7684\uff0c\u6211\u4eec\u5148\u8bd5\u8bd5\u62df\u5408\u8865\u5168\u5427)\n\n\u6211\u4eec\u8fd9\u91cc\u7528scikit-learn\u4e2d\u7684RandomForest\u6765\u62df\u5408\u4e00\u4e0b\u7f3a\u5931\u7684\u5e74\u9f84\u6570\u636e\uff0c\u7528RandomForest\u5728\u539f\u59cb\u6570\u636e\u4e2d\u505a\u4e0d\u540c\u91c7\u6837\uff0c\u5efa\u7acb\u591a\u9897DecisionTree\uff0c\u518d\u8fdb\u884caverage\u7b49\u7b49\u6765\u964d\u4f4e\u8fc7\u62df\u5408\u73b0\u8c61\n","1cdae3f1":"# 8.\u591a\u6a21\u578b\u878d\u5408\n\u8fd9\u91cc\u662f\u6211\u8c03\u6574\u6700\u5927\u7684\u5730\u65b9\uff0c\u4ed6\u7684\u4f18\u5316\u5bf9\u51c6\u786e\u5ea6\u6709\u98de\u8dc3\u6027\u63d0\u5347\uff0c\u6211\u5728\u6a21\u578b\u9009\u53d6\u7684\u65f6\u5019\u7ecf\u8fc7\u5f88\u957f\u65f6\u95f4\u7684\u5b9e\u9a8c\uff0c\u5176\u5b9e\u8bad\u7ec3\u7684\u5206\u7c7b\u5668\u5f88\u591a\u7684(\u6bd4\u5982logistic regression\uff0cSVM\uff0cKNN\uff0crandom forest\uff0c\u795e\u7ecf\u7f51\u7edc)\n\n# 8.1\u6700\u7ec8\u9009\u62e9\uff1aBaggingClassifier\n\n\u6a21\u578b\u878d\u5408\u53ef\u4ee5\u6bd4\u8f83\u597d\u5730\u7f13\u89e3\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u4ece\u800c\u5bf9\u4e8e\u7ed3\u679c\u7684\u51c6\u786e\u5ea6\u63d0\u5347\u6709\u4e00\u5b9a\u7684\u5e2e\u52a9\u3002\n\u6bcf\u6b21\u53d6\u8bad\u7ec3\u96c6\u7684\u4e00\u4e2asubset\uff0c\u505a\u8bad\u7ec3\uff0c\u8fd9\u6837\uff0c\u6211\u4eec\u867d\u7136\u7528\u7684\u662f\u540c\u4e00\u4e2a\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u4f46\u662f\u5f97\u5230\u7684\u6a21\u578b\u5374\u662f\u4e0d\u4e00\u6837\u7684\uff1b\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u4e00\u4efd\u5b50\u6570\u636e\u96c6\u662f\u5168\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u51fa\u73b0\u8fc7\u62df\u5408\uff0c\u4e5f\u662f\u5728\u5b50\u8bad\u7ec3\u96c6\u4e0a\u51fa\u73b0\u8fc7\u62df\u5408\uff0c\u800c\u4e0d\u662f\u5168\u4f53\u6570\u636e\u4e0a\uff0c\u8fd9\u6837\u505a\u4e00\u4e2a\u878d\u5408\uff0c\u53ef\u80fd\u5bf9\u6700\u540e\u7684\u7ed3\u679c\u6709\u4e00\u5b9a\u7684\u5e2e\u52a9\u3002\u5bf9\uff0c\u8fd9\u5c31\u662f\u5e38\u7528\u7684Bagging\u3002\n\n\u6211\u4eec\u7528scikit-learn\u91cc\u9762\u7684Bagging\u6765\u5b8c\u6210\u4e0a\u9762\u7684\u601d\u8def\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n","c530f7e1":"\u8fd9\u91cc\u968f\u673a\u68ee\u6797\u7684\u57fa\u672c\u539f\u7406\u5c31\u662f\u5148\u628a\u6211\u4e0a\u8ff0\u5206\u6790\u540e\u7684\u7279\u5f81\uff0c\u6458\u53d6\u6709\u7528\u7684\u4e22\u8fdb\u53bb\uff0c\u6bd5\u7adf\u539f\u7406\u5c31\u662fdecision tree\u662f\u4e00\u4e2a\u5c06\u8fc7\u7a0b\u8bf4\u900f\u5f7b\u7684\u8fc7\u7a0b\uff0c\u5927\u81f4\u662f\u8fd9\u6837\uff1a\n> 1.\u4e22\u6709\u7528\u7279\u5f81\u503c\u4e22\u8fdb\u53bb\uff0c\u8fd9\u91cc\u6254\u8fdb\u53bb\u7684\u662f\u2018Age','Fare', 'Parch', 'SibSp', 'Pclass\u2019\n\n> 2.\u7136\u540eknown age\u662f\u4e00\u4e2a\u7279\u5f81\u77e9\u9635\uff0c\u7b2c\u4e00\u884c\u662fage\uff0c\u5176\u4ed6\u884c\u662f\u7279\u5f81\u5c5e\u6027\u503c\n\n> 3.\u4e4b\u540e\u6bd4\u8f83\u673a\u68b0\u5316\uff0c\u7528\u968f\u673a\u68ee\u6797\u901a\u8fc7\u7279\u5f81\u503c\u62df\u5408\u51faunknown age\uff0c\u5e76\u586b\u5165\u3002\n\n> 4.\u968f\u673a\u68ee\u6797\u5177\u6709\u8bb8\u591a\u7684\u53c2\u6570\u53ef\u4ee5\u8c03\u6574\uff08random_state\uff0cn_estimators\u7b49\uff09\uff0c\u6211\u5927\u6982\u6839\u636e\u81ea\u5df1\u5224\u65ad\u8fdb\u884c\u4e86\u5f88\u591a\u6b21\u7684\u8c03\u6574\uff0c\u6700\u540e\u8fbe\u5230\u4e86\u4e00\u4e2a\u4e0d\u9519\u7684\u6548\u679c\u3002\n\n> 4.\u5bf9cabin\u503c\u8fdb\u884c\u4e8c\u5206\uff0cyes\u548cno\uff0c\u4e3a\u8fc7\u540ecabin\u8865\u5168\u505a\u51c6\u5907\u3002","51aef3d0":"\u5269\u4e0b\u7684\u5de5\u4f5c\u90fd\u975e\u5e38\u7b80\u5355\u4e86\uff0c\u5e26\u5165\u5206\u7c7b\u5668\uff0c\u7136\u540e\u7528pandas\u5199\u8fdbcsv\u6700\u540e\u8bfb\u51fa\u6765","24aa352a":"\u5176\u5b9e\u5bf9\u6bd4\u5b8cbaseline\uff0c\u6211\u4eec\u7684\u4f18\u5316\u7684\u60f3\u6cd5\u4f18\u5148\u7ea7\u53ef\u4ee5\u653e\u9ad8\u4e00\u4e9b\uff0c\u56e0\u4e3a\u503c\u5f97\u4f18\u5316\u7684\u90e8\u5206\u975e\u5e38\u975e\u5e38\u591a\u3002\n\n\u4ee5\u4e0b\u662f\u53ef\u80fd\u7684\u4f18\u5316\u64cd\u4f5c\u7684\u4f18\u5316\u64cd\u4f5c\uff1a\n\n> Age\u5c5e\u6027\u4e0d\u4f7f\u7528\u73b0\u5728\u7684\u62df\u5408\u65b9\u5f0f\uff0c\u800c\u662f\u6839\u636e\u540d\u79f0\u4e2d\u7684\u300eMr\u300f\u300eMrs\u300f\u300eMiss\u300f\u7b49\u7684\u5e73\u5747\u503c\u8fdb\u884c\u586b\u5145\u3002\n> Age\u4e0d\u505a\u6210\u4e00\u4e2a\u8fde\u7eed\u503c\u5c5e\u6027\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u6b65\u957f\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u53d8\u6210\u79bb\u6563\u7684\u7c7b\u76eefeature\u3002\n> Cabin\u518d\u7ec6\u5316\u4e00\u4e9b\uff0c\u5bf9\u4e8e\u6709\u8bb0\u5f55\u7684Cabin\u5c5e\u6027\uff0c\u6211\u4eec\u5c06\u5176\u5206\u4e3a\u524d\u9762\u7684\u5b57\u6bcd\u90e8\u5206(\u6211\u731c\u662f\u4f4d\u7f6e\u548c\u8239\u5c42\u4e4b\u7c7b\u7684\u4fe1\u606f) \u548c \u540e\u9762\u7684\u6570\u5b57\u90e8\u5206\u3002\n> Pclass\u548cSex\u4fe9\u592a\u91cd\u8981\u4e86\uff0c\u6211\u4eec\u8bd5\u7740\u7528\u5b83\u4eec\u53bb\u7ec4\u51fa\u4e00\u4e2a\u7ec4\u5408\u5c5e\u6027\u6765\u8bd5\u8bd5\uff0c\u8fd9\u4e5f\u662f\u53e6\u5916\u4e00\u79cd\u7a0b\u5ea6\u7684\u7ec6\u5316\u3002\n> \u5355\u52a0\u4e00\u4e2aChild\u5b57\u6bb5\uff0cAge<=12\u7684\uff0c\u8bbe\u4e3a1\uff0c\u5176\u4f59\u4e3a0\n> \u5982\u679c\u540d\u5b57\u91cc\u9762\u6709\u300eMrs\u300f\uff0c\u800cParch>1\u7684\uff0c\u6211\u4eec\u731c\u6d4b\u5979\u53ef\u80fd\u662f\u4e00\u4e2a\u6bcd\u4eb2\uff0c\u5e94\u8be5\u83b7\u6551\u7684\u6982\u7387\u4e5f\u4f1a\u63d0\u9ad8\uff0c\u56e0\u6b64\u53ef\u4ee5\u591a\u52a0\u4e00\u4e2aMother\u5b57\u6bb5\uff0c\u6b64\u79cd\u60c5\u51b5\u4e0b\u8bbe\u4e3a1\uff0c\u5176\u4f59\u60c5\u51b5\u4e0b\u8bbe\u4e3a0\n> \u767b\u8239\u6e2f\u53e3\u53ef\u4ee5\u8003\u8651\u5148\u53bb\u6389\u8bd5\u8bd5(Q\u548cC\u672c\u6765\u5c31\u6ca1\u6743\u91cd\uff0cS\u4e0d\u597d)\n> \u628a\u5802\u5144\u5f1f\/\u5144\u59b9 \u548c Parch \u8fd8\u6709\u81ea\u5df1 \u4e2a\u6570\u52a0\u5728\u4e00\u8d77\u7ec4\u4e00\u4e2aFamily_size\u5b57\u6bb5(\u8003\u8651\u5230\u5927\u5bb6\u65cf\u53ef\u80fd\u5bf9\u6700\u540e\u7684\u7ed3\u679c\u6709\u5f71\u54cd)\n> Name\u662f\u4e00\u4e2a\u6211\u4eec\u4e00\u76f4\u6ca1\u6709\u89e6\u78b0\u7684\u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5904\u7406\uff0c\u6bd4\u5982\u8bf4\u7537\u6027\u4e2d\u5e26\u67d0\u4e9b\u5b57\u773c\u7684(\u2018Capt\u2019, \u2018Don\u2019, \u2018Major\u2019, \u2018Sir\u2019)\u53ef\u4ee5\u7edf\u4e00\u5230\u4e00\u4e2aTitle\uff0c\u5973\u6027\u4e5f\u4e00\u6837\u3002\n\n\u8bd5\u9a8c\u7684\u8fc7\u7a0b\u6bd4\u8f83\u6f2b\u957f\uff0c\u4e5f\u9700\u8981\u6709\u8010\u5fc3\uff0c\u7ecf\u5386\u4e86\u7279\u522b\u591a\u6b21\u7684\u5b9e\u9a8c\uff0c\u7ed3\u679c\u8bd5\u9a8c\u4e0b\u6765\uff0c\u6548\u679c\u8fd8\u4e0d\u5982\u8bd5\u9a8c\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u9700\u8981\u575a\u6301\u548c\u8010\u5fc3\uff0c\u4ee5\u53ca\u4e0d\u65ad\u7684\u6316\u6398\u3002\n\u4e0b\u9762\u8fdb\u884c\u6a21\u578b\u5b66\u4e60\u66f2\u7ebf\u8bc4\u4f30\uff0c\u770b\u770b\u7a76\u7adf\u6a21\u578b\u6b20\u62df\u5408\u8fd8\u662f\u8fc7\u62df\u5408\u3002\n# 7.\u6a21\u578b\u5b66\u4e60\u66f2\u7ebf\u8bc4\u4f30\nlearning curve\u53ef\u4ee5\u5e2e\u6211\u4eec\u5224\u5b9a\u6211\u4eec\u7684\u6a21\u578b\u73b0\u5728\u6240\u5904\u7684\u72b6\u6001\u3002\u6211\u4eec\u4ee5\u6837\u672c\u6570\u4e3a\u6a2a\u5750\u6807\uff0c\u8bad\u7ec3\u548c\u4ea4\u53c9\u9a8c\u8bc1\u96c6\u4e0a\u7684\u9519\u8bef\u7387\u4f5c\u4e3a\u7eb5\u5750\u6807\uff0c\u4e24\u79cd\u72b6\u6001\u5206\u522b\u5982\u4e0b\u4e24\u5f20\u56fe\u6240\u793a\uff1a\u8fc7\u62df\u5408(overfitting\/high variace)\uff0c\u6b20\u62df\u5408(underfitting\/high bias)\n\n\u6709\u4e00\u4e2a\u5f88\u53ef\u80fd\u53d1\u751f\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u4e0d\u65ad\u5730\u505afeature engineering\uff0c\u4ea7\u751f\u7684\u7279\u5f81\u8d8a\u6765\u8d8a\u591a\uff0c\u7528\u8fd9\u4e9b\u7279\u5f81\u53bb\u8bad\u7ec3\u6a21\u578b\uff0c\u4f1a\u5bf9\u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u62df\u5408\u5f97\u8d8a\u6765\u8d8a\u597d\uff0c\u540c\u65f6\u4e5f\u53ef\u80fd\u5728\u9010\u6b65\u4e27\u5931\u6cdb\u5316\u80fd\u529b\uff0c\u4ece\u800c\u5728\u5f85\u9884\u6d4b\u7684\u6570\u636e\u4e0a\uff0c\u8868\u73b0\u4e0d\u4f73\uff0c\u4e5f\u5c31\u662f\u53d1\u751f\u8fc7\u62df\u5408\u95ee\u9898\u3002\n\n\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u4e0a\u8bf4\uff0c\u5982\u679c\u6a21\u578b\u5728\u5f85\u9884\u6d4b\u7684\u6570\u636e\u4e0a\u8868\u73b0\u4e0d\u4f73\uff0c\u9664\u6389\u4e0a\u9762\u8bf4\u7684\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6b20\u62df\u5408\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u8bad\u7ec3\u96c6\u4e0a\uff0c\u5176\u5b9e\u62df\u5408\u7684\u4e5f\u4e0d\u662f\u90a3\u4e48\u597d\u3002\n\n\u5bf9\u8fc7\u62df\u5408\u800c\u8a00\uff0c\u901a\u5e38\u4ee5\u4e0b\u7b56\u7565\u5bf9\u7ed3\u679c\u4f18\u5316\u662f\u6709\u7528\u7684\uff1a\n\n> \u505a\u4e00\u4e0bfeature selection\uff0c\u6311\u51fa\u8f83\u597d\u7684feature\u7684subset\u6765\u505atraining\n\n> \u63d0\u4f9b\u66f4\u591a\u7684\u6570\u636e\uff0c\u4ece\u800c\u5f25\u8865\u539f\u59cb\u6570\u636e\u7684bias\u95ee\u9898\uff0c\u5b66\u4e60\u5230\u7684model\u4e5f\u4f1a\u66f4\u51c6\u786e\n\n> \u800c\u5bf9\u4e8e\u6b20\u62df\u5408\u800c\u8a00\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684feature\uff0c\u66f4\u590d\u6742\u7684\u6a21\u578b\u6765\u63d0\u9ad8\u51c6\u786e\u5ea6\u3002\n"}}