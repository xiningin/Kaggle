{"cell_type":{"31123117":"code","fe35eaba":"code","3de23a2e":"code","b27d11a5":"code","578190c4":"code","09dc0781":"code","dee3744f":"code","1184b9ba":"code","2b92bbd0":"markdown","d1627a39":"markdown","0de5f7cf":"markdown","5bf5e4c1":"markdown","1f02a89a":"markdown","9536958f":"markdown","50a1618b":"markdown","6a82e876":"markdown","37dc79de":"markdown","44b28ba3":"markdown","4a433e14":"markdown","0d244b81":"markdown"},"source":{"31123117":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n%matplotlib inline","fe35eaba":"path0 = '..\/input\/gsdc6027\/submission.csv' \n\nsub6027 = pd.read_csv(path0)","3de23a2e":"path1 = '..\/input\/gsdc5639\/submission.csv' \n\nsub5639 = pd.read_csv(path1)","b27d11a5":"path2 = '..\/input\/gsdc5370\/submission.csv' \n\nsub5370 = pd.read_csv(path2)","578190c4":"path = [path0, path1, path2]","09dc0781":"def ensembling(main, support, coeff1, coeff2): \n    \n    suba  = main.copy() \n    subav = suba.values\n       \n    subb  = support.copy()\n    subbv = subb.values    \n           \n    ense  = main.copy()    \n    ensev = ense.values  \n \n    for i in range (len(main)):\n        \n        pera1 = subav[i, 2]\n        pera2 = subav[i, 3]\n        \n        perb1 = subbv[i, 2]\n        perb2 = subbv[i, 3]\n\n        per1 = (pera1 * coeff1) + (perb1 * (1.0 - coeff1))\n        per2 = (pera2 * coeff2) + (perb2 * (1.0 - coeff2))\n        \n        ensev[i, 2] = per1\n        ensev[i, 3] = per2\n        \n    ense.iloc[:, 2:] = ensev[:, 2:]  \n  \n    return ense      \n","dee3744f":"sub1 = ensembling(sub5639, sub6027, 0.40, 0.60)\n\nsub2 = ensembling(sub5370,    sub1, 0.50, 0.60)","1184b9ba":"sub1.to_csv(\"submission1.csv\",index=False)\nsub2.to_csv(\"submission2.csv\",index=False)\n!ls","2b92bbd0":"<div class=\"alert alert-success\">  \n<\/div>","d1627a39":"<div class=\"alert alert-success\">  \n<\/div>","0de5f7cf":"<div>\n    <h1 align=\"center\">Smart Ensembling<\/h1>\n    <h1 align=\"center\">Google Smartphone Decimeter Challenge<\/h1>   \n<\/div>","5bf5e4c1":"Thanks to: @t88take https:\/\/www.kaggle.com\/t88take\/gsdc-phones-mean-prediction\/output","1f02a89a":"Thanks to: @bpetrb https:\/\/www.kaggle.com\/bpetrb\/adaptive-gauss-phone-mean\/output","9536958f":"<div class=\"alert alert-success\">  \n<\/div>","50a1618b":"<div class=\"alert alert-success\">  \n<\/div>","6a82e876":"Thanks to: @tensorchoko https:\/\/www.kaggle.com\/tensorchoko\/google-multioutputregressor\/output","37dc79de":"<div class=\"alert alert-success\">\n    <h1 align=\"center\">If you find this work useful, please don't forget upvoting :)<\/h1>\n<\/div>","44b28ba3":"<div class=\"alert alert-success\">  \n<\/div>","4a433e14":"<div class=\"alert alert-success\">  \n<\/div>","0d244b81":"<div class=\"alert alert-success\">  \n<\/div>"}}