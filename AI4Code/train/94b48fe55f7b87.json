{"cell_type":{"2e26f0db":"code","dd317ec6":"code","f4bb9e64":"code","b8432fb6":"code","8aee4abb":"code","2a12c649":"code","9e9536f1":"code","3942771a":"code","27d51d56":"code","a01573c9":"code","74f4fcda":"code","3ea25bc8":"code","d854014a":"code","a7299253":"code","37143225":"code","200f726d":"code","4efa44a6":"code","d07cc2df":"code","551b84f4":"code","258d60ce":"code","e1054a02":"code","dab880c8":"code","dac9550c":"markdown","bb424b79":"markdown","1746705f":"markdown","378f8b51":"markdown","7197d77e":"markdown","70cd2f08":"markdown","118793d1":"markdown","6cba344a":"markdown","3102ba49":"markdown"},"source":{"2e26f0db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd317ec6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f4bb9e64":"df1 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv')\ndf3 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv')\ndf4 = pd.read_csv('\/kaggle\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv')\nprint('Load Done')","b8432fb6":"print(df1.info())\nprint('Describe\\n', df1.describe())","8aee4abb":"print(df2.info())\nprint('Describe\\n', df2.describe())","2a12c649":"print(df3.info())\nprint('Describe\\n', df3.describe())","9e9536f1":"print(df4.info())\nprint('Describe\\n', df4.describe())","3942771a":"p1_generation_df = df1.astype({'DATE_TIME' : np.datetime64})\np1_generation_df.info()\np2_generation_df = df3.astype({'DATE_TIME' : np.datetime64})\np2_generation_df.info()\np1_sensor_df = df2.astype({'DATE_TIME' : np.datetime64})\np1_sensor_df.info()\np2_sensor_df = df4.astype({'DATE_TIME' : np.datetime64})\np2_sensor_df.info()","27d51d56":"print('Daily yield Generator 1 mean value\\n', p1_generation_df['DAILY_YIELD'].mean())\nprint('Daily yield Generator 2 mean value\\n', p2_generation_df['DAILY_YIELD'].mean())","a01573c9":"import datetime\np1_sensor_df['DATE'] = pd.to_datetime(p1_sensor_df['DATE_TIME']).dt.date\np2_sensor_df['DATE'] = pd.to_datetime(p2_sensor_df['DATE_TIME']).dt.date","74f4fcda":"plt.figure(figsize=(16,9))\nplt.plot(p1_sensor_df['IRRADIATION'].groupby(p1_sensor_df['DATE']).sum())\nplt.title('Irradiation per day Sensor 1')\nplt.xlabel('Date')\nplt.ylabel('Irradiation')\nplt.show()","3ea25bc8":"plt.figure(figsize=(16,9))\nplt.plot(p2_sensor_df['IRRADIATION'].groupby(p2_sensor_df['DATE']).sum())\nplt.title('Irradiation per day Sensor 2')\nplt.xlabel('Date')\nplt.ylabel('Irradiation')\nplt.show()","d854014a":"print('Max ambient temperature Sensor 1\\n', p1_sensor_df['AMBIENT_TEMPERATURE'].max())\nprint('Max module temperature Sensor 1\\n', p1_sensor_df['MODULE_TEMPERATURE'].max())","a7299253":"print('Max ambient temperature Sensor 2\\n', p2_sensor_df['AMBIENT_TEMPERATURE'].max())\nprint('Max module temperature Sensor 2\\n', p2_sensor_df['MODULE_TEMPERATURE'].max())","37143225":"print('Plant 1 inverters\\n', p1_generation_df['SOURCE_KEY'].nunique())\nprint('Plant 2 inverters\\n', p2_generation_df['SOURCE_KEY'].nunique())","200f726d":"p1_generation_df['DATE'] = pd.to_datetime(p1_generation_df['DATE_TIME']).dt.date\np2_generation_df['DATE'] = pd.to_datetime(p2_generation_df['DATE_TIME']).dt.date\np1_generation_df['TIME'] = pd.to_datetime(p1_generation_df['DATE_TIME']).dt.time\np2_generation_df['TIME'] = pd.to_datetime(p2_generation_df['DATE_TIME']).dt.time","4efa44a6":"print('Maximum amount of DC POWER in a day Gen 1\\n',\np1_generation_df['DC_POWER'].groupby(p1_generation_df['DATE']).sum().max())\nprint('Minimum amount of DC POWER in a day Gen 1\\n',\np1_generation_df['DC_POWER'].groupby(p1_generation_df['DATE']).sum().min())\nprint('Maximum amount of DC POWER in a day Gen 2\\n',\np2_generation_df['DC_POWER'].groupby(p2_generation_df['DATE']).sum().max())\nprint('Minimum amount of DC POWER in a day Gen 2\\n',\np2_generation_df['DC_POWER'].groupby(p2_generation_df['DATE']).sum().min())","d07cc2df":"print('Maximum amount of AC POWER in a time interval Gen 1\\n',\np1_generation_df['AC_POWER'].groupby(p1_generation_df['TIME']).sum().max())\nprint('Minimum amount of AC POWER in a time interval Gen 1\\n',\np1_generation_df['AC_POWER'].groupby(p1_generation_df['TIME']).sum().min())\nprint('Maximum amount of AC POWER in a time interval Gen 2\\n',\np2_generation_df['AC_POWER'].groupby(p2_generation_df['TIME']).sum().max())\nprint('Minimum amount of AC POWER in a time interval Gen 2\\n',\np2_generation_df['AC_POWER'].groupby(p2_generation_df['TIME']).sum().min())","551b84f4":"print('Inverter that produce maximum DC\/AC Power Generator 1\\n',\n      p1_generation_df.loc[(p1_generation_df['DC_POWER']==p1_generation_df['DC_POWER'].max()) & \n                           (p1_generation_df['AC_POWER']==p1_generation_df['AC_POWER'].max()), \n                           ['SOURCE_KEY']])","258d60ce":"print('Inverter that produce maximum DC\/AC Power Generator 2\\n',\n      p2_generation_df.loc[(p2_generation_df['DC_POWER']==p2_generation_df['DC_POWER'].max()) & \n                           (p2_generation_df['AC_POWER']==p2_generation_df['AC_POWER'].max()), \n                           ['SOURCE_KEY']])","e1054a02":"p1_generation_df['RANK'] = p1_generation_df.sort_values(['AC_POWER', 'DC_POWER'])['DC_POWER'].index + 1\nprint('Inverters rank Generation 1\\n',p1_generation_df[['SOURCE_KEY', 'RANK']])","dab880c8":"p2_generation_df['RANK'] = p2_generation_df.sort_values(['AC_POWER', 'DC_POWER'])['DC_POWER'].index + 1\nprint('Inverters rank Generation 2\\n',p2_generation_df[['SOURCE_KEY', 'RANK']])","dac9550c":"### What is the mean value of daily yield?","bb424b79":"### Which inverter (source_key) has produced maximum DC\/AC power?\n","1746705f":"### How many inverters are there for each plant?","378f8b51":"### Rank the inverters based on the DC\/AC power they produce","7197d77e":"### Is there any missing data?\n\nHere is no any missing data, I guess, becasuse here is non non-null data in the rows, no duplicates. To answer this questions enogh data to solve task.","70cd2f08":"### What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?","118793d1":"### What is the total irradiation per day?","6cba344a":"### What is the max ambient and module temperature?","3102ba49":"# Descriptive analytics\n### Task Details\n *Explore the data and try to answer questions like:*\n - What is the mean value of daily yield?\n - What is the total irradiation per day?\n - What is the max ambient and module temperature?\n - How many inverters are there for each plant?\n - What is the maximum\/minimum amount of DC\/AC Power generated in a time interval\/day?\n - Which inverter (source_key) has produced maximum DC\/AC power?\n - Rank the inverters based on the DC\/AC power they produce\n - Is there any missing data?"}}