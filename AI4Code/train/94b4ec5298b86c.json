{"cell_type":{"24724bca":"code","fe51b082":"code","2981caa3":"code","3af93014":"code","e36760ac":"code","63f3a035":"code","6448335b":"code","e3d99438":"code","05f8b9f4":"code","77a3787c":"code","f8f7e1f2":"code","8d8f0971":"code","d8c181be":"code","c082b693":"code","3a110d17":"code","d90487cc":"code","395a7b3a":"markdown","0c6f1350":"markdown","d7b587ae":"markdown"},"source":{"24724bca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe51b082":"train_data = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/home-data-for-ml-course\/test.csv')","2981caa3":"# There are 81 columns so taking only valuable columns\n\nfeature_names = ['LotArea','YearBuilt','YearRemodAdd','OverallCond','GarageArea','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr',\n                 'TotRmsAbvGrd','SalePrice']\ndf = train_data[feature_names]","3af93014":"df.head(3)","e36760ac":"df.describe()","63f3a035":"remodified_homes = round((len(df.loc[df['YearBuilt']!=df['YearRemodAdd']])\/len(df))*100)\nprint('Remodified house percentage: {}%'.format(remodified_homes))\n\ndouble_story_house = round((len(df[df['2ndFlrSF']==0])\/len(df))*100)\nprint('Double story house percentage: {}%'.format(double_story_house))","6448335b":"# Importing visiualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e3d99438":"# finding how much percentage of data outliear takes\nLotArea_outliers = (len(df[df['LotArea']>=40000])\/len(df))*100\nprint('LotArea_outliers percentage: {}%'.format(LotArea_outliers))\n\n# Removing outliers\ndf = df.loc[(df['LotArea']<40000) & (df['OverallCond']>1)]\nprint('Outliers Removed')","05f8b9f4":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(ncols=2,nrows=2,figsize=(15,10))\n\nax0.hist(df['YearBuilt'],bins=50, edgecolor='black')\nax0.set_title('YearBuilt',fontsize=20)\n\nax1.hist(df['LotArea'],bins=50, edgecolor='black')\nax1.set_title('LotArea',fontsize=20)\n\nax2.hist(df['1stFlrSF'],bins=50, edgecolor='black')\nax2.set_title('1stFlrSF',fontsize=20)\n\nax3.hist(df['SalePrice'],bins=50, edgecolor='black')\nax3.set_title('SalePrice',fontsize=20)","77a3787c":"fig, ((ax0,ax1),(ax2,ax3)) = plt.subplots(nrows=2, ncols=2, figsize=(20,20))\n\nslices_1 = df['OverallCond'].value_counts().values\nlabels_1 = ['Avg','Above Avg','Good','Very Good','Below Avg','Fair','Excellent','Poor']\nax0.pie(slices_1,labels=labels_1, wedgeprops={'edgecolor':'Black'}, autopct='%1.1f%%',textprops={'fontsize':15}, pctdistance=0.9)\nax0.set_title('House Conditions',fontsize=20)\n\nslices_2 = df['TotRmsAbvGrd'].value_counts().values\nlabels_2 = df['TotRmsAbvGrd'].value_counts().index\nax1.pie(slices_2,labels=labels_2, wedgeprops={'edgecolor':'Black'}, autopct='%1.1f%%', textprops={'fontsize':15})\nax1.set_title('Total Number of Room',fontsize=20)\n\nslices_3 = df['FullBath'].value_counts().values\nlabels_3 = ['two','one','three','zero']\nax2.pie(slices_3,labels=labels_3, wedgeprops={'edgecolor':'Black'}, autopct='%1.1f%%', textprops={'fontsize':15})\nax2.set_title('Bathroom',fontsize=20)\n\nslices_4 = df['BedroomAbvGr'].value_counts().values\nlabels_4 = df['BedroomAbvGr'].value_counts().index\nax3.pie(slices_4,labels=labels_4, wedgeprops={'edgecolor':'Black'}, autopct='%.2f%%', textprops={'fontsize':15}, pctdistance=0.9)\nax3.set_title('Bedroom',fontsize=20)\n\nplt.show()","f8f7e1f2":"sns.pairplot(data=df, y_vars=['SalePrice'],x_vars=['LotArea','YearBuilt','GarageArea','1stFlrSF','2ndFlrSF'])\nplt.show()","8d8f0971":"X = df.drop('SalePrice',axis=1)\ny = df['SalePrice']\n\nX_test = test_data[['LotArea','YearBuilt','YearRemodAdd','OverallCond','GarageArea','1stFlrSF','2ndFlrSF','FullBath','BedroomAbvGr',\n                 'TotRmsAbvGrd']]","d8c181be":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)","c082b693":"X_test = X_test.fillna(X_test['GarageArea'].mean())\nX_test.info()","3a110d17":"predictions = model.predict(X_test)","d90487cc":"output = pd.DataFrame({'Id':test_data.Id,'SalePrice':predictions})\noutput.to_csv('my_submission',index=False)\nprint('output saved')","395a7b3a":"# Loading the Data","0c6f1350":"# Exploratory Data Analysis","d7b587ae":"# Model Building"}}