{"cell_type":{"e8363e40":"code","0ceb08cc":"code","ee8bd4e3":"code","6006539f":"code","2c85ba69":"code","742fabe5":"code","71e221cb":"code","57b390e1":"code","c7ea5b5d":"code","535e9f76":"code","b752f416":"code","1dd70bca":"code","ede578eb":"code","6f4c6ab9":"code","39da7f31":"code","bd0c9c99":"code","5a33b2bd":"code","f0b70d27":"code","e573912d":"code","9e6618c0":"code","f8643ee0":"code","86e2bf13":"code","b0d2d492":"code","e1e0133e":"code","2f7d282e":"code","de7995c9":"code","5686bd04":"markdown","8de86152":"markdown","c9dee493":"markdown","2c82a14e":"markdown"},"source":{"e8363e40":"import numpy as np\nimport pandas as pd","0ceb08cc":"credits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\ncredits.shape","ee8bd4e3":"movies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\nmovies.shape","6006539f":"credits.head()","2c85ba69":"credits.columns","742fabe5":"movies.head()","71e221cb":"movies.columns","57b390e1":"rename_movie_id = credits.rename(index = str,columns = {\"movie_id\":\"id\"})\nmovies_merge = movies.merge(rename_movie_id,on= 'id')\nmovies_merge.head()","c7ea5b5d":"movies.isnull().sum()","535e9f76":"movies.info()","b752f416":"clean_movies_data = movies_merge.drop(columns = ['homepage','title_x','title_y','status','production_countries','production_companies','spoken_languages','crew','cast','runtime','revenue','popularity','budget'])\nclean_movies_data.head()","1dd70bca":"clean_movies_data.head()['overview']","ede578eb":"clean_movies_data.head()['original_title']","6f4c6ab9":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfv = TfidfVectorizer(min_df = 3, max_features = None,\n                      strip_accents=\"unicode\",analyzer = \"word\",token_pattern = r'\\w{1,}',\n                      ngram_range=(1, 3),\n                      stop_words = \"english\")\n\nclean_movies_data['overview'] = clean_movies_data['overview'].fillna('')\n#Filling NaNs with empty string                      \n","39da7f31":"#Now fitting the TF-IDF on the 'overview' text\ntfv_matrix = tfv.fit_transform(clean_movies_data['overview'])","bd0c9c99":"tfv_matrix","5a33b2bd":"tfv_matrix.shape","f0b70d27":"from sklearn.metrics.pairwise import sigmoid_kernel\n\nsig = sigmoid_kernel(tfv_matrix, tfv_matrix)","e573912d":"sig[0]","9e6618c0":"indices = pd.Series(clean_movies_data.index, index = clean_movies_data['original_title']).drop_duplicates()","f8643ee0":"indices","86e2bf13":"indices['Newlyweds']","b0d2d492":"list(enumerate(sig[indices['Newlyweds']]))","e1e0133e":"sorted(list(enumerate(sig[indices['Newlyweds']])),key=lambda x:x[1],reverse = True)","2f7d282e":"def give_rec(title,sig=sig):\n    #we get the index according to corresponding_title\n    idx = indices[title]\n    \n    #now, will get the pairwise similarity scores\n    sig_scores = list(enumerate(sig[idx]))\n    \n    #sort the movies\n    sig_scores = sorted(sig_scores,key=lambda x:x[1],reverse=True)\n    \n    #scores of the 20 most similar movies\n    sig_scores = sig_scores[1:21]\n    \n    #Movie indices\n    movie_indices = [i[0] for i in sig_scores]\n    \n    #top 20 most similar movies\n    return clean_movies_data['original_title'].iloc[movie_indices]","de7995c9":"give_rec('Shanghai Calling')","5686bd04":"So here we are getting in homepage column 3091 null values and in tagline column we are getting 844 null values we will drop those columns which is not needed","8de86152":" In credit datasets we are getting column i.e movie id and in movies dataset we are getting the movie id named id only so we will rename the movie id as id and merge into movies dataset  ","c9dee493":" Now,we merge the both column into movie dataset","2c82a14e":"# Now we have to clean the data"}}