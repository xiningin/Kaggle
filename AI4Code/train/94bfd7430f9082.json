{"cell_type":{"8aab34cd":"code","82b7de6b":"code","d7917773":"code","880c6c0a":"code","50615dc1":"code","c427060a":"code","e75fe6d1":"code","de2cd1b8":"code","4914eb7c":"code","534bee0f":"code","e1b187c0":"code","cb073085":"code","1e67a7f8":"code","06db06a4":"code","dc4ea62f":"code","11d3d89b":"code","c01fe8b3":"code","23e42229":"code","9be7dd39":"code","bac8281c":"code","41efc047":"code","bc7ee64e":"code","ba719e4c":"markdown","31121618":"markdown","1795dd5b":"markdown","4e4c0e43":"markdown","38703749":"markdown","ebc45b28":"markdown","cebabc78":"markdown","9f018252":"markdown","4eb37bb5":"markdown","1ce25707":"markdown","6738740b":"markdown","2268bfd3":"markdown","f8e3d550":"markdown","134b687d":"markdown","5e243697":"markdown","ee94b764":"markdown","2eaae2e3":"markdown","601a0f47":"markdown","031b2507":"markdown"},"source":{"8aab34cd":"import numpy as np\nimport pandas as pd \nimport seaborn as sns","82b7de6b":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","d7917773":"hdata = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nhdata.head()","880c6c0a":"hdata.columns","50615dc1":"#test_line = sns.regplot(x=\"LotFrontage\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"LotArea\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"OverallQual\", y=\"SalePrice\", data=hdata, order = 4, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"OverallCond\", y=\"SalePrice\", data=hdata, order = 4, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"YearBuilt\", y=\"SalePrice\", data=hdata, order = 4, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"YearRemodAdd\", y=\"SalePrice\", data=hdata, order = 5, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"MasVnrArea\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"BsmtFinSF1\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"BsmtFinSF2\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"BsmtUnfSF\", y=\"SalePrice\", data=hdata, order = 5, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"TotalBsmtSF\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"LowQualFinSF\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"GrLivArea\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"BsmtFullBath\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})    #Do not do this one, this has little to no correlation\n#test_line = sns.regplot(x=\"BedroomAbvGr\", y=\"SalePrice\", data=hdata, order = 5, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"KitchenAbvGr\", y=\"SalePrice\", data=hdata, order =1, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})   #Do not do this one eitehr for the same reason\n#test_line = sns.regplot(x=\"GarageYrBlt\", y=\"SalePrice\", data=hdata, order = 5, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"GarageCars\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"GarageArea\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"EnclosedPorch\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"3SsnPorch\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"ScreenPorch\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"PoolArea\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})     #This one gives an error and is weird so dont use it\n#test_line = sns.regplot(x=\"MiscVal\", y=\"SalePrice\", data=hdata, order = 3, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})\n#test_line = sns.regplot(x=\"MoSold\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})      #Little to no correlation\n#test_line = sns.regplot(x=\"SalePrice\", y=\"SalePrice\", data=hdata, order = 2, scatter_kws={\"color\": \"blue\"}, line_kws={\"color\": \"red\"})    #The best correlation which is why I am not going to use it","c427060a":"rel_vars = hdata.loc[:, ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', \n                               'BsmtFinSF1', 'BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', \n                               'BedroomAbvGr', 'KitchenAbvGr', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'EnclosedPorch', '3SsnPorch', \n                               'ScreenPorch', 'MiscVal', 'MoSold', 'SalePrice']]\n\nrel_vars.head()\nrel_vars.LotFrontage.unique()  #has nan\nrel_vars.LotArea.unique()\nrel_vars.OverallQual.unique()\nrel_vars.OverallCond.unique()\nrel_vars.YearBuilt.unique()\nrel_vars.YearRemodAdd.unique()\nrel_vars.MasVnrArea.unique()    #has nan\nrel_vars.BsmtFinSF1.unique()\nrel_vars.BsmtFinSF2.unique()\nrel_vars.BsmtUnfSF.unique()\nrel_vars.TotalBsmtSF.unique()\nrel_vars.LowQualFinSF.unique()\nrel_vars.GrLivArea.unique()\nrel_vars.BsmtFullBath.unique()\nrel_vars.BedroomAbvGr.unique()\nrel_vars.KitchenAbvGr.unique()\nrel_vars.GarageYrBlt.unique() # has nan\nrel_vars.GarageCars.unique()\nrel_vars.GarageArea.unique()\nrel_vars.EnclosedPorch.unique()\nrel_vars.ScreenPorch.unique()\n#rel_vars.3SsnPorch.unique()    # not sure because having a 3 as the first character of a variable name is wonky, probably doesent because things with 3ssn porches have a value of zero\nrel_vars.MiscVal.unique()\nrel_vars.MoSold.unique()\nrel_vars.SalePrice.unique()\n","e75fe6d1":"import matplotlib.pyplot as plt\nfrom numpy.polynomial import Polynomial","de2cd1b8":"x = hdata[\"LotArea\"].to_numpy()\ny = hdata[\"SalePrice\"].to_numpy()\npoly = Polynomial.fit(x, y, 5)\nprint(poly)\nplt.plot(x, y, 'o')\nxx, yy = poly.linspace()\nplt.plot(xx, yy, lw=2)","4914eb7c":"rel_vars.head()","534bee0f":"rel_vars = hdata.loc[:, ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', \n                               'BsmtFinSF1', 'BsmtFinSF2','BsmtUnfSF', 'TotalBsmtSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', \n                               'BedroomAbvGr', 'KitchenAbvGr', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'EnclosedPorch', \n                               'ScreenPorch', 'MiscVal', 'MoSold', 'SalePrice']]","e1b187c0":"rel_vars['LotFrontage'] = hdata.LotFrontage\nrel_vars['MasVnrArea'] = hdata.MasVnrArea\nrel_vars['GarageYrBlt'] = hdata.GarageYrBlt\nrel_vars.head()","cb073085":"def nan_to_zero1(row): \n    if row.LotFrontage != row.LotFrontage: \n        row.LotFrontage = 0\n        return row.LotFrontage\n    else: \n        return row.LotFrontage\n    \ndef nan_to_zero2(row): \n    if row.MasVnrArea != row.MasVnrArea: \n        row.MasVnrArea = 0\n        return row.MasVnrArea\n    else: \n        return row.MasVnrArea\n    \ndef nan_to_zero3(row): \n    if row.GarageYrBlt != row.GarageYrBlt: \n        row.GarageYrBlt = 0\n        return row.GarageYrBlt\n    else: \n        return row.GarageYrBlt","1e67a7f8":"rel_vars['LotFrontage'] = rel_vars.apply(nan_to_zero1, axis = \"columns\")\nrel_vars['MasVnrArea'] = rel_vars.apply(nan_to_zero2, axis = \"columns\")\nrel_vars['GarageYrBlt'] = rel_vars.apply(nan_to_zero3, axis = \"columns\")\nrel_vars.head()\nrel_vars.LotFrontage.unique()  #has nan\nrel_vars.MasVnrArea.unique()    #has nan\nrel_vars.GarageYrBlt.unique() # has nan","06db06a4":"w_o_zeroes_LotFrontage = rel_vars.loc[rel_vars.LotFrontage != 0, ['LotFrontage', 'SalePrice']]\nw_o_zeroes_LotArea = rel_vars.loc[rel_vars.LotArea != 0, ['LotArea', 'SalePrice']]\nw_o_zeroes_OverallQual = rel_vars.loc[rel_vars.OverallQual != 0, ['OverallQual', 'SalePrice']]\nw_o_zeroes_OverallCond = rel_vars.loc[rel_vars.OverallCond != 0, ['OverallCond', 'SalePrice']]\nw_o_zeroes_YearBuilt = rel_vars.loc[rel_vars.YearBuilt != 0, ['YearBuilt', 'SalePrice']]\nw_o_zeroes_YearRemodAdd = rel_vars.loc[rel_vars.YearRemodAdd != 1950, ['YearRemodAdd', 'SalePrice']]\nw_o_zeroes_MasVnrArea = rel_vars.loc[rel_vars.MasVnrArea != 0, ['MasVnrArea', 'SalePrice']]\nw_o_zeroes_BsmtFinSF1 = rel_vars.loc[rel_vars.BsmtFinSF1 != 0, ['BsmtFinSF1', 'SalePrice']]\nw_o_zeroes_BsmtFinSF2 = rel_vars.loc[rel_vars.BsmtFinSF2 != 0, ['BsmtFinSF2', 'SalePrice']]\nw_o_zeroes_BsmtUnfSF = rel_vars.loc[rel_vars.BsmtUnfSF != 0, ['BsmtUnfSF', 'SalePrice']]\nw_o_zeroes_TotalBsmtSF = rel_vars.loc[rel_vars.TotalBsmtSF != 0, ['TotalBsmtSF', 'SalePrice']]\nw_o_zeroes_LowQualFinSF = rel_vars.loc[rel_vars.LowQualFinSF != 0, ['LowQualFinSF', 'SalePrice']]\nw_o_zeroes_GrLivArea = rel_vars.loc[rel_vars.GrLivArea != 0, ['GrLivArea', 'SalePrice']]\nw_o_zeroes_BsmtFullBath = rel_vars.loc[rel_vars.BsmtFullBath != 0, ['BsmtFullBath', 'SalePrice']]\nw_o_zeroes_BedroomAbvGr = rel_vars.loc[rel_vars.BedroomAbvGr != 0, ['BedroomAbvGr', 'SalePrice']]\nw_o_zeroes_KitchenAbvGr = rel_vars.loc[rel_vars.KitchenAbvGr != 0, ['KitchenAbvGr', 'SalePrice']]\nw_o_zeroes_GarageYrBlt = rel_vars.loc[rel_vars.GarageYrBlt != 0, ['GarageYrBlt', 'SalePrice']]\nw_o_zeroes_GarageCars = rel_vars.loc[rel_vars.GarageCars != 0, ['GarageCars', 'SalePrice']]\nw_o_zeroes_GarageArea = rel_vars.loc[rel_vars.GarageArea != 0, ['GarageArea', 'SalePrice']]\nw_o_zeroes_EnclosedPorch = rel_vars.loc[rel_vars.EnclosedPorch != 0, ['EnclosedPorch', 'SalePrice']]\nw_o_zeroes_ScreenPorch = rel_vars.loc[rel_vars.ScreenPorch != 0, ['ScreenPorch', 'SalePrice']]\nw_o_zeroes_MiscVal = rel_vars.loc[rel_vars.MiscVal != 0, ['MiscVal', 'SalePrice']]\nw_o_zeroes_MoSold = rel_vars.loc[rel_vars.MoSold != 0, ['MoSold', 'SalePrice']]","dc4ea62f":"list_vars = [w_o_zeroes_LotFrontage, w_o_zeroes_LotArea, w_o_zeroes_OverallQual, w_o_zeroes_OverallCond, w_o_zeroes_YearBuilt, w_o_zeroes_YearRemodAdd, w_o_zeroes_MasVnrArea, w_o_zeroes_BsmtFinSF1, w_o_zeroes_BsmtFinSF2, w_o_zeroes_BsmtUnfSF, w_o_zeroes_TotalBsmtSF, w_o_zeroes_LowQualFinSF, w_o_zeroes_GrLivArea, w_o_zeroes_BsmtFullBath, w_o_zeroes_BedroomAbvGr, w_o_zeroes_KitchenAbvGr, w_o_zeroes_GarageYrBlt, w_o_zeroes_GarageCars, w_o_zeroes_GarageArea, w_o_zeroes_EnclosedPorch, w_o_zeroes_ScreenPorch, w_o_zeroes_MiscVal, w_o_zeroes_MoSold]\nstr_list = ['LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt',\n       'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF',\n       'TotalBsmtSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'EnclosedPorch', 'ScreenPorch', 'MiscVal', 'MoSold',\n       'SalePrice']\nlist_columns_x = [w_o_zeroes_LotFrontage.LotFrontage, w_o_zeroes_LotArea.LotArea, w_o_zeroes_OverallQual.OverallQual, w_o_zeroes_OverallCond.OverallCond, w_o_zeroes_YearBuilt.YearBuilt, w_o_zeroes_YearRemodAdd.YearRemodAdd, w_o_zeroes_MasVnrArea.MasVnrArea, w_o_zeroes_BsmtFinSF1.BsmtFinSF1, w_o_zeroes_BsmtFinSF2.BsmtFinSF2, w_o_zeroes_BsmtUnfSF.BsmtUnfSF, w_o_zeroes_TotalBsmtSF.TotalBsmtSF, w_o_zeroes_LowQualFinSF.LowQualFinSF, w_o_zeroes_GrLivArea.GrLivArea, w_o_zeroes_BsmtFullBath.BsmtFullBath, w_o_zeroes_BedroomAbvGr.BedroomAbvGr, w_o_zeroes_KitchenAbvGr.KitchenAbvGr, w_o_zeroes_GarageYrBlt.GarageYrBlt, w_o_zeroes_GarageCars.GarageCars, w_o_zeroes_GarageArea.GarageArea, w_o_zeroes_EnclosedPorch.EnclosedPorch, w_o_zeroes_ScreenPorch.ScreenPorch, w_o_zeroes_MiscVal.MiscVal, w_o_zeroes_MoSold.MoSold]\nlist_columns_y = [w_o_zeroes_LotFrontage.SalePrice, w_o_zeroes_LotArea.SalePrice, w_o_zeroes_OverallQual.SalePrice, w_o_zeroes_OverallCond.SalePrice, w_o_zeroes_YearBuilt.SalePrice, w_o_zeroes_YearRemodAdd.SalePrice, w_o_zeroes_MasVnrArea.SalePrice, w_o_zeroes_BsmtFinSF1.SalePrice, w_o_zeroes_BsmtFinSF2.SalePrice, w_o_zeroes_BsmtUnfSF.SalePrice, w_o_zeroes_TotalBsmtSF.SalePrice, w_o_zeroes_LowQualFinSF.SalePrice, w_o_zeroes_GrLivArea.SalePrice, w_o_zeroes_BsmtFullBath.SalePrice, w_o_zeroes_BedroomAbvGr.SalePrice, w_o_zeroes_KitchenAbvGr.SalePrice, w_o_zeroes_GarageYrBlt.SalePrice, w_o_zeroes_GarageCars.SalePrice, w_o_zeroes_GarageArea.SalePrice, w_o_zeroes_EnclosedPorch.SalePrice, w_o_zeroes_ScreenPorch.SalePrice, w_o_zeroes_MiscVal.SalePrice, w_o_zeroes_MoSold.SalePrice]","11d3d89b":"from sklearn.metrics import mean_absolute_error\nfrom numpy.polynomial.polynomial import polyval\n\ndef create_polynomail_equation(degree, coefs): \n    coefs.reverse()\n    degree = len(coefs)\n    counter = 0\n    equ_string = \"\"\n    for coef in coefs: \n        if degree - counter == 1: \n            equ_string = equ_string + str(coef)\n        else: \n            equ_string = equ_string + str(coef) + ' * x' + ' ** ' + str(degree - counter - 1) + \" + \"\n        counter += 1\n    return equ_string\n\ndef get_best_graph_and_equation(indx_nm, x_cut, y_cut): \n    if x_cut == 0: \n        x_cut = 2000000\n    if y_cut == 0: \n        y_cut = 2000000\n    \n    \n    var = list_vars[indx_nm]\n    string = str_list[indx_nm]\n    column_x = list_columns_x[indx_nm] \n    column_y = list_columns_y[indx_nm]\n    cut = var.loc[(column_x <= x_cut) & (column_y <= y_cut)]\n    x = cut[string].to_numpy()\n    y = cut[\"SalePrice\"].to_numpy()\n\n    coef_list = []\n    poly_list_lizst = []\n    mae_list = []\n    degree_lizt = []\n\n    for i in range(4):\n        degree = i + 1\n        poly = Polynomial.fit(x, y, degree)\n        poly_coef = poly.convert().coef\n        poly_coef = list(poly_coef)\n        predictions = polyval(x, poly_coef)\n        mae = mean_absolute_error(predictions, y)\n        \n        degree_lizt.append(degree)\n        poly_list_lizst.append(poly)\n        coef_list.append(poly_coef)\n        #coef should be used instead of poly list\n        mae_list.append(mae)\n\n    for i in range(len(mae_list)): \n        if i == 0: \n            current = mae_list[0]\n            littlst_indx = 0\n        if i!= 0: \n            if current > mae_list[i]: \n                current = mae_list[i]\n                littlst_indx = i\n            else: \n                pass\n        else: \n            pass\n    best_degree = littlst_indx + 1\n    \n    \n    final_poly = Polynomial.fit(x, y, best_degree)\n    final_poly_coef = final_poly.convert().coef\n    final_poly_coef = list(poly_coef)\n    \n    predictions = polyval(x, final_poly_coef)\n    mae = mean_absolute_error(predictions, y)\n    plt.plot(x, y, '.')\n    xx, yy = final_poly.linspace()\n    plt.plot(xx, yy, lw=2)\n\n\n    print(\"Fitting \" + string)\n    print(\" \")\n    print(\"The graph degree is: \" + str(best_degree))\n    print(\" \")\n    print(\"Coefficients: \" + str(final_poly_coef))\n    print(\" \")\n    print(\"MAE list: \" + str(mae_list))\n    print(\" \")\n    print(\"The MAE is: \" + str(mae))\n    print(\" \")\n    print(\"The equation is: \")\n    print(create_polynomail_equation(best_degree, final_poly_coef))\n    print(\"# \" + str(indx_nm) + \" \" + string + \"(x_cutoff = \" + str(x_cut) + \"   y_cutoff = \" + str(y_cut) + \")-> \" + create_polynomail_equation(best_degree, final_poly_coef))\n    print(\"\")\n    print(\"\")\n    \n    \n    \n    print(\"if row.\" + string + \" != 0 and row.\" + string + \" == row.\" + string + \" and row.\" + string + \" <= \" + str(x_cut) + \":\")\n    print(\"    amnt_vars += 1\")\n    print(\"    x = row.\" + string)\n    print(\"    predict\" + str(indx_nm) + \" = \" + str(create_polynomail_equation(best_degree, final_poly_coef)))\n    print(\"    predictions_list.append(\" + \"predict\" + str(indx_nm) + \")\")\n\n    \n        \n\n        \n        \n        \n        \n\nx_cutoff =0\n# y cutoff does not work\ny_cutoff = 0\ngraph_num = 0\nget_best_graph_and_equation(graph_num, x_cutoff, y_cutoff)","c01fe8b3":"predict_hdata = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","23e42229":"rel_vars.columns","9be7dd39":"vars_to_predict = predict_hdata.loc[:, ['Id', 'LotFrontage', 'LotArea', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'GrLivArea', 'GarageYrBlt', 'GarageArea', 'EnclosedPorch']]\n#                                                  0              1               2         4              5             6             7              8            9             10             12           16              18              19             y-axis","bac8281c":"def take_mean_out_of_all_applicable_lines(row): \n    amnt_vars = 0\n    predictions_list = []\n    if row.OverallQual != 0 and row.OverallQual == row.OverallQual and row.OverallQual <= 2000000:\n        amnt_vars += 1\n        x = row.OverallQual\n        predict2 = -134.05772898636707 * x ** 4 + 3783.4186718443925 * x ** 3 + -30965.059808585473 * x ** 2 + 117446.3851222439 * x ** 1 + -71135.82989618299\n        predictions_list.append(predict2)\n    if row.GrLivArea != 0 and row.GrLivArea == row.GrLivArea and row.GrLivArea <= 2700:\n        amnt_vars += 1\n        x = row.GrLivArea\n        predict12 = -3.912053891791398e-09 * x ** 4 + 1.221976008209136e-05 * x ** 3 + 0.0031378757806904446 * x ** 2 + 75.93354236966141 * x ** 1 + 36410.75155543382\n        predictions_list.append(predict12)\n    if row.YearRemodAdd != 0 and row.YearRemodAdd == row.YearRemodAdd and row.YearRemodAdd <= 1980:\n        amnt_vars += 1\n        x = row.YearRemodAdd\n        predict5 = 0.12302066517563441 * x ** 4 + -962.5938469949859 * x ** 3 + 2824398.7663722895 * x ** 2 + -3683094630.8118815 * x ** 1 + 1801014824476.2632\n        predictions_list.append(predict5)\n    if row.GarageArea != 0 and row.GarageArea == row.GarageArea and row.GarageArea <= 500:\n        amnt_vars += 1\n        x = row.GarageArea\n        predict18 = -2.0637593888846442e-05 * x ** 4 + 0.02402252943948403 * x ** 3 + -8.840407090766462 * x ** 2 + 1189.2424654483739 * x ** 1 + 86278.59490276004\n        predictions_list.append(predict18)\n    lst_sum = 0\n    if amnt_vars == 0: \n        return 300000\n    for value in predictions_list: \n        lst_sum = lst_sum + value\n        \n    return ((lst_sum) \/ (amnt_vars))\n\n","41efc047":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn.model_selection import train_test_split\n\ntrain_data, test_data = train_test_split(hdata, test_size=.2)\n\ntest_data[\"SalePricePredict\"] = test_data.apply(take_mean_out_of_all_applicable_lines, axis=\"columns\")\nmaee = 0\nfor i in range(10000): \n    mae = mean_absolute_error(test_data.SalePricePredict, test_data.SalePrice)\n    maee = maee + mae\nmaef = maee \/ 10000\nmaef\n\nresult = sqrt(mean_squared_error(test_data.SalePrice,test_data.SalePricePredict))\nresult","bc7ee64e":"\n\n\nsubmit_data = vars_to_predict.loc[:, ['Id']]\nsubmit_data['SalePrice'] = vars_to_predict.apply(take_mean_out_of_all_applicable_lines, axis=\"columns\")\nsubmit_data.index\nsubmit_data\n\n\n\n\nsubmit_data['Id'] = submit_data.Id.astype('Int32')\noutput = pd.DataFrame({'Id': submit_data.Id,\n                       'SalePrice': submit_data.SalePrice})\noutput.to_csv('submission.csv', index=False)\noutput.describe()\n","ba719e4c":"My strategy for this is to draw a bunch of lines through graphs to get a bunch of price perdictions per observation. I will then take the mean of all those price perdictions as the final price prediction","31121618":"Now I am going to try to take out all the zeroes to get nicer lines.","1795dd5b":"It looks like I have everything sorted out, all I have to do is clean some of the data before getting the equations out of the polynomials","4e4c0e43":"Solutions to those things: \n- Remove zero values using loc \n- Filter graphs for that by hand\n- Pray","38703749":"Prediction submit code","ebc45b28":"I am not going put the same code below for each variable since I am just getting the formula out of it. ","cebabc78":"##### ","9f018252":"First I am going to create all the regplots that have two quantitative variables. Remember to not run more than one plot per codeblock at a time or seaborn will combine them. ","4eb37bb5":"The stuff is promising but I found a few problems.","1ce25707":"Time to wrap this all up. I will create a function that calculates the mean of all values applicible lines sent out after value was plugged in","6738740b":"After travling through a grueling stackoverflow+youtube rabbithole it turns out that seaborn is not the way to go to find out what is the equation for the lines. In order to do it I will have to use numpy's polynomial tools and matplotlib. Heres the proof of concept","2268bfd3":"Heres a bunch of lists to automate whats next","f8e3d550":"Here is me looking for nan values","134b687d":"As a side note this codeblock I just wrote took about a week and a half to figure out from scratch and write. I somehow do not hate regression. ","5e243697":"Now I am going to put all the vars I am going to fit into a prediction dataframe","ee94b764":"First I am going to remove all nan values","2eaae2e3":"Things to worry about: \n- Zero values shold not be judged\n- nan values may wreak havoc\n- Some graphs have little to no correlation between variables\n- Creating more regressions may hurt the price prediction for one reason or another","601a0f47":"Things to try next time: \n- Try to crop out outiers to get better fiting lines\n- different regression stuff","031b2507":"Code to test which combinitations of lines work the best"}}