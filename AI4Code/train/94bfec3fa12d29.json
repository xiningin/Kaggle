{"cell_type":{"75856353":"code","78f7e9d3":"code","c34dc751":"code","a190cd66":"code","7a8c8c82":"code","33512261":"code","bdfeaaec":"code","5ea68e5f":"code","2b9c1226":"code","79c64b19":"code","40b3bccc":"code","77697459":"code","9c56b4dc":"code","450677c3":"code","02b5c64a":"code","599cbe4b":"code","bd61503a":"code","7abc8bcd":"code","91b6ca46":"code","4ce5e638":"code","31f08c89":"code","53900844":"code","e209fbe7":"code","44ebab43":"code","82e6b6b5":"code","b49783d8":"code","723d4a39":"code","de1056f9":"code","f3b68c09":"code","40ee8116":"code","9a5b350b":"code","a0b4f1a7":"code","4eee24ef":"code","36c04740":"code","2f88600e":"code","bccf18bf":"code","29fb0284":"code","eb0a232a":"code","5778441f":"code","af346a93":"code","41e043ef":"code","a8e358ab":"code","678ccd6c":"code","9ccc3585":"code","1ed7b7e6":"code","53664eee":"code","4070efd1":"code","c27db19c":"code","fac224d6":"code","41bdb6f9":"code","2aa1788e":"code","f24c5f98":"code","41bd0972":"code","d886a308":"code","84603f6e":"code","4b5be5dc":"code","45bd2879":"code","c82ebfbc":"code","73a8e694":"code","1c25cb68":"code","4077a9c0":"code","8dcb8a5a":"code","e04b2d9e":"code","6ff706d7":"code","17b7f382":"code","b1b29d61":"code","688a9372":"code","bb4452e5":"code","6d269ac4":"code","164ddc68":"code","1a374aa6":"code","acb023b8":"code","3f9b5ce9":"code","2e2efafa":"code","03407b07":"code","783314c8":"code","5a1f8390":"code","4c6c21d8":"code","8f789471":"code","88e6649c":"code","fbd15aff":"code","b8a00e72":"code","61cf24ab":"code","4c2bd953":"code","6788024f":"code","a62a8a25":"code","e17dcb8d":"code","819e5bfb":"code","28abaed3":"code","5c689644":"code","2c6e4872":"code","f8709858":"code","dd947394":"code","0021fe8e":"code","4b5e6807":"code","7d9dc597":"code","b8641bea":"code","6cae68d2":"code","a49b041d":"code","a1f3f142":"code","dd782485":"code","aa5f6c04":"code","c73e91d1":"code","e5023a37":"code","91d284c5":"code","e89fbe0c":"code","ca38602d":"code","64e32e11":"code","8440004d":"code","44fa3f82":"code","e0aca534":"code","bc0a0103":"code","5a80a939":"code","e4c5a293":"code","7ded9902":"code","8d9c1e76":"code","3cc433cc":"code","3a5f5686":"code","9ed57cae":"code","b739d3cd":"code","3933d304":"code","8aab1bd3":"code","4f9a298d":"code","6a06c3f4":"code","7f389e1d":"code","f8a89e48":"code","153f66d5":"code","28481798":"code","bba1bf10":"code","86dd34fd":"code","664a61dd":"code","e488c05e":"code","7b45f002":"code","03e8be23":"code","e4d07156":"code","cd5e35f3":"code","8b5129ef":"code","03782218":"markdown","a05669b8":"markdown","de8e8524":"markdown","80863704":"markdown","d28a19a2":"markdown","aebe6de9":"markdown","e600ccad":"markdown","fed90bfa":"markdown","a2afc79d":"markdown","a6e244a0":"markdown","cccc6cdf":"markdown","a35492a6":"markdown","7dd61377":"markdown","290f29cc":"markdown","850b378c":"markdown","98243bcf":"markdown","c72d75c9":"markdown","4967872c":"markdown","b48a6d33":"markdown"},"source":{"75856353":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","78f7e9d3":"df = pd.read_csv('..\/input\/car-prediction-using-regression\/Car details v3.csv')\ndf\n# engine  - engine capacity of the car","c34dc751":"df.drop(['torque'], axis = 1, inplace = True)","a190cd66":"df.columns","7a8c8c82":"df.shape","33512261":"#Dropping the duplicated Rows\ndf = df.drop_duplicates()\ndf.shape","bdfeaaec":"df.info()","5ea68e5f":"df.isnull().sum()\n# columns containing null values","2b9c1226":"df['seats'].value_counts()","79c64b19":"df['seats'].mode()","40b3bccc":"df['seats'] = df['seats'].fillna(df['seats'].mode()[0])\n# filling the null values in the 'seats' dataset with mode of that column\n# we cannot take mean of this column because it contains discrete vlaues ","77697459":"df['mileage'] = df['mileage'].fillna('0 kmpl')\n# filling all the null values in mileage column with 0 kmpl for now","9c56b4dc":"df['engine'] = df['engine'].fillna('0 CC')\n# filling all the null values in mileage column with 0 CC for now","450677c3":"df['max_power'] = df['max_power'].fillna('0 bhp')\n# filling all the null values in mileage column with 0 bhp for now","02b5c64a":"df.isnull().sum()\n# columns containing null values","599cbe4b":"#mileage\n#engine\n#max_power\ndf.head(14)","bd61503a":"# try\nmil = '23.4 kmpl'\nval = mil.split(' ')\nval1 = val[0]\nval1","7abc8bcd":"def mileage_fun(mil):\n    val = mil.split(' ')\n    val1 = val[0]\n    return val1    ","91b6ca46":"df['mileage'] = df['mileage'].apply(mileage_fun)","4ce5e638":"df['mileage'] = df['mileage'].astype(float)\ndf['mileage']","31f08c89":"df.info()","53900844":"def engine_func(mil):\n    val = mil.split(' ')\n    val1 = val[0]\n    return val1   ","e209fbe7":"df['engine'] = df['engine'].apply(engine_func)\ndf['engine'] = df['engine'].astype(int)\ndf['engine']","44ebab43":"def max_power_func(mil):\n    val = mil.split(' ')\n    val1 = val[0]\n    return val1   ","82e6b6b5":"df['max_power'] = df['max_power'].apply(max_power_func)\n#df['max_power'] = df['max_power'].astype(float)\ndf = df.drop('max_power', axis = 1)","b49783d8":"df.head(14)","723d4a39":"df.info()","de1056f9":"df.loc[df['year'] > 2010]\n# data of all the car brought after 2010","f3b68c09":"mil_after_2010 = df['mileage'].loc[df['year'] > 2010]\nmil_after_2010\n# mileage of cars brought after 2020","40ee8116":"mil_before_2010 = df['mileage'].loc[df['year'] < 2010]\nmil_before_2010\n# mileage of cars brought before 2020","9a5b350b":"# mean of the mileage of the cars bought before 2010\nmil_before_2010_mean = df['mileage'].loc[df['year'] < 2010].mean()\nmil_before_2010_mean = round(mil_before_2010_mean,2)\nmil_before_2010_mean","a0b4f1a7":"# mean of the mileage of the cars bought after 2010\nmil_after_2010_mean = df['mileage'].loc[df['year'] > 2010].mean()\nmil_after_2010_mean = round(mil_after_2010_mean,2)\nmil_after_2010_mean","4eee24ef":"mil_zero = df['mileage'].loc[df['mileage'] == 0]\nmil_zero","36c04740":"mil_zero = df.loc[df['mileage'] == 0]\nmil_zero\n#rows with mileage == 0","2f88600e":"mil_zero_before_2010 = mil_zero['mileage'].loc[mil_zero['year'] <= 2010]\nmil_zero_before_2010\n# rows with mileage == 0 and year < 2010","bccf18bf":"mil_zero_before_2010_keys = mil_zero_before_2010.keys()\nmil_zero_before_2010_keys","29fb0284":"mil_zero_after_2010 = mil_zero['mileage'].loc[mil_zero['year'] > 2010]\nmil_zero_after_2010\n# rows with mileage == 0 and year > 2010","eb0a232a":"mil_zero_after_2010_keys = mil_zero_after_2010.keys()\nmil_zero_after_2010_keys","5778441f":"df['mileage'].loc[mil_zero_before_2010_keys] = df['mileage'].loc[mil_zero_before_2010_keys].replace(0.0, mil_before_2010_mean)\n#rows with mileage = 0 and year < 2010\n#replacing 0.0 with mil_before_2010_mean","af346a93":"df.loc[mil_zero_before_2010_keys]\n#values are replaced","41e043ef":"df.head(14)","a8e358ab":"mil_zero_after_2010 = mil_zero.loc[mil_zero['year'] > 2010]\nmil_zero_after_2010\n# rows with mileage = 0.0 and year > 2010","678ccd6c":"df['mileage'].loc[mil_zero_after_2010_keys] = df['mileage'].loc[mil_zero_after_2010_keys].replace(0.0, mil_after_2010_mean)\n#rows with mileage = 0 and year < 2010\n#replacing 0.0 with mil_before_2010_mean","9ccc3585":"df.loc[mil_zero_after_2010_keys]\n#values are replaced","1ed7b7e6":"df.head(88)","53664eee":"df.loc[df['engine'] == 0]","4070efd1":"df['engine'].median()","c27db19c":"df['engine'].loc[df['engine'] == 0] = df['engine'].loc[df['engine'] == 0].replace(0, df['engine'].median())\n#replacing the zeroes in engine column with median of that column","fac224d6":"df.loc[df['engine'] == 0]","41bdb6f9":"df.head(14)","2aa1788e":"#converting the datatype of seats to int as seats cannot be float\ndf['seats'] = df['seats'].astype(int)","f24c5f98":"df['year'].value_counts()\n#This column should be filled with the year in which the car was bought.","41bd0972":"df.head()","d886a308":"sns.barplot('fuel', 'selling_price', data = df)\n# Diesel cars are costlier than other cars","84603f6e":"sns.barplot('seller_type', 'selling_price', data = df)\n# cars sold by Dealers are costlier","4b5be5dc":"sns.barplot('transmission', 'selling_price', data = df)\n#Automatic cars are costlier than manual cars","45bd2879":"sns.barplot('owner', 'selling_price', data = df)\nplt.xticks(rotation = 90)\nplt.show()\n# Test Drive cars are way more costleir than other cars","c82ebfbc":"plt.figure(figsize = (20,8))\nsns.countplot(df['year'])\nplt.xticks(rotation = 90)\nplt.show()\n# majority cars present on the site were brought in the year 2017","73a8e694":"sns.distplot(df['year'])","1c25cb68":"seller_type_count = df['seller_type'].value_counts()\nseller_type_count\n# Seller_Type - Defines whether the seller is a dealer or an individual.","4077a9c0":"labels = seller_type_count.keys()\nlabels","8dcb8a5a":"plt.pie(seller_type_count, labels = labels, autopct = '%0.1f%%', explode = [0.03]*3)\nplt.show()\n# majority car sellers are individuals","e04b2d9e":"plt.figure(figsize = (10,7))\nfuel_type = df['fuel'].value_counts()\n\nlabels = fuel_type.keys()\nlabels\n\n\nplt.pie(fuel_type, labels = labels, autopct = '%0.1f%%', explode = [0.03]*4)\nplt.show()\n# 54.2% of cars present on the site have fuel type - diesel\n# 44.4% of cars present on the site have fuel type - petrol","6ff706d7":"plt.figure(figsize = (5,5))\ntrans = df['transmission'].value_counts()\n\nlabels = trans.keys()\n#labels\n\nplt.pie(trans, labels = labels, autopct = '%0.1f%%', explode = [0.03]*2)\nplt.show()\n# 91.6% of cars present on the site are manual\n# 8.4% of cars present on the site are automatic","17b7f382":"plt.figure(figsize = (5,5))\nowner = df['owner'].value_counts()\n\nlabels = owner.keys()\nprint(labels)\n\nplt.pie(owner, labels = labels, autopct = '%0.1f%%', explode = [0.03]*5)\nplt.show()\n\n# 61.2% cars on the site have 1 prvious owner\n# 28.5% cars on the site have 2 previous owners\n# % of test drive cars are very rare","b1b29d61":"sns.countplot(df['seats'])\n# majority cars are 5 seater","688a9372":"df['name'].value_counts()","bb4452e5":"df.info()","6d269ac4":"plt.figure(figsize = (10,6))\nsns.countplot(df['seller_type'], hue = df['fuel'])\n# individual sellers mostly sell cars of fuel type diesel and petrol","164ddc68":"plt.figure(figsize = (10,6))\nsns.countplot(df['seller_type'], hue = df['transmission'])\n# all the seller types prefers selling manual cars","1a374aa6":"plt.figure(figsize = (10,6))\nsns.countplot(df['seller_type'], hue = df['owner'])","acb023b8":"df.isnull().sum()","3f9b5ce9":"df.head()","2e2efafa":"df['selling_price'].min()","03407b07":"df['selling_price'].max()","783314c8":"df['selling_price'] = df['selling_price'].astype(float)","5a1f8390":"v = 450000.0\nv\/10000","4c6c21d8":"df['selling_price'] = df['selling_price'].apply(lambda x : x\/10000)","8f789471":"df.head()","88e6649c":"categorical = []\n#creating a list of categorical columns\n\nfor i in df.columns:\n    #print(i)\n    if (df[i].dtype == object):\n        categorical.append(i)\ncategorical","fbd15aff":"df['owner'].unique()","b8a00e72":"owner_col = {'First Owner' : 1, 'Second Owner' : 2, 'Third Owner' : 3,\n       'Fourth & Above Owner' : 4, 'Test Drive Car' : 0}","61cf24ab":"df['owner'] = df['owner'].map(owner_col)\ndf","4c2bd953":"from sklearn.preprocessing import LabelEncoder\nlabel_enc = LabelEncoder()","6788024f":"cat = ['name', 'fuel', 'seller_type', 'transmission']","a62a8a25":"df['name'].value_counts()","e17dcb8d":"df['fuel'].value_counts()","819e5bfb":"df['seller_type'].value_counts()","28abaed3":"df['transmission'].value_counts()","5c689644":"for i in cat:\n    #print(i)\n    df[i] = label_enc.fit_transform(df[i])\n    print(i,label_enc.classes_)","2c6e4872":"df","f8709858":"df.info()","dd947394":"#using Heatmap\n\nplt.figure(figsize = (15,7))\nsns.heatmap(df.corr(), vmin=0, vmax=1, annot = True)","0021fe8e":"df.head()","4b5e6807":"x = df.drop(['selling_price', 'name'], axis = 1).copy()\nx.head()","7d9dc597":"y = df['selling_price'].copy()\ny.head()","b8641bea":"print(x.shape)\nprint(y.shape)","6cae68d2":"from sklearn.preprocessing import StandardScaler","a49b041d":"sc = StandardScaler()\nx_scaled = sc.fit_transform(x)","a1f3f142":"x_scaled.shape","dd782485":"x_scaled","aa5f6c04":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.formula.api as smf","c73e91d1":"vif = pd.DataFrame()\nvif['Features'] = x.columns\nvif","e5023a37":"vif['VIF'] = [variance_inflation_factor(x_scaled, i) for i in range(x_scaled.shape[1])]","91d284c5":"vif\n# we remove the features whose VIF > 5 i.e multicollinearity is present\n# in this case there's no multicollinearity","e89fbe0c":"from sklearn.model_selection import train_test_split","ca38602d":"xtrain, xtest, ytrain, ytest = train_test_split(x_scaled, y, test_size = .2, random_state = 0)","64e32e11":"print(xtrain.shape)\nprint(xtest.shape)\nprint(ytrain.shape)\nprint(ytest.shape)","8440004d":"from sklearn.linear_model import LinearRegression","44fa3f82":"linear_reg = LinearRegression()","e0aca534":"linear_reg.fit(xtrain, ytrain)","bc0a0103":"ypred = linear_reg.predict(xtest)","5a80a939":"from sklearn.metrics import r2_score","e4c5a293":"r2_score(ytest, ypred)","7ded9902":"import statsmodels.api as sm\n\nXnew = sm.add_constant(x_scaled)\n#Xnew.head()","8d9c1e76":"model = sm.OLS(y,Xnew).fit()\nmodel.summary()","3cc433cc":"res = pd.DataFrame({'Actual':ytest,\"Predicted\":ypred})\nres.head()","3a5f5686":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR","9ed57cae":"decision_reg = DecisionTreeRegressor(random_state = 1)\ndecision_reg.fit(xtrain, ytrain)","b739d3cd":"y_pred = decision_reg.predict(xtest)","3933d304":"result_r2 = r2_score(ytest, y_pred)\nresult_r2*100","8aab1bd3":"forest_reg = RandomForestRegressor(n_estimators = 5, random_state = 1)\nforest_reg.fit(xtrain, ytrain)","4f9a298d":"ypred = forest_reg.predict(xtest)","6a06c3f4":"res = r2_score(ytest, ypred)\nres*100","7f389e1d":"df_rf = pd.DataFrame({'Actual':ytest,\"Predicted\":ypred})\ndf_rf.head(10)","f8a89e48":"from sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV, ElasticNet","153f66d5":"alphas = np.random.uniform(low=0, high=10, size=(50,))\nridgecv = RidgeCV(alphas = alphas,cv=10,normalize = True)\nridgecv.fit(xtrain, ytrain)","28481798":"ridgecv.alpha_","bba1bf10":"ridgeReg = Ridge(alpha=ridgecv.alpha_, normalize=True)\n\nridgeReg.fit(xtrain,ytrain)\n\npred = ridgeReg.predict(xtest)","86dd34fd":"ridgeReg.score(xtest, ytest)","664a61dd":"lasscv = LassoCV(alphas = alphas,cv =10, max_iter = 100000, normalize = True)\nlasscv.fit(xtrain, ytrain)","e488c05e":"alpha = lasscv.alpha_\nalpha","7b45f002":"lasso_reg = Lasso(alpha)\nlasso_reg.fit(xtrain, ytrain)","03e8be23":"pred = lasso_reg.predict(xtest)","e4d07156":"lasso_reg.score(xtest, ytest)","cd5e35f3":"ENreg = ElasticNet(alpha=1, l1_ratio=0.5, normalize=False)\n\nENreg.fit(xtrain,ytrain)\n\npred_cv = ENreg.predict(xtest)","8b5129ef":"ENreg.score(xtest, ytest)\n#Elastic regression generally works well when we have a big dataset.","03782218":"# Now handling the categorical data","a05669b8":"Ridge Regression","de8e8524":"Elasic Net Regression","80863704":"we can see a trend that cars brought after 2010 has mileage 20 or above\nand cars bought before 2010 has mileage below 20\nso we can replace the 0 values by taking the means of mileage of the cars bought before and after 2010","d28a19a2":"For 'name', 'fuel', 'seller_type', 'transmission' columns\nWe can use LabelEncoding","aebe6de9":"# EDA","e600ccad":"Splitting the data into train and test set","fed90bfa":"Lasso Regression","a2afc79d":"RandomForestRegressor","a6e244a0":"using variance inflation factor","cccc6cdf":"In the below ridge and lasso I have randomly selected the cv value, generally we use hyperparameter tuning to best\nselect the value of cv","a35492a6":"DecisionTreeRegressor","7dd61377":"Now, check for multicollinearity","290f29cc":"Our R2 score came same as before using regularization i.e 43%, so we can say that our model did not overfit the data","850b378c":"This dataset contains information about used cars listed on www.cardekho.com","98243bcf":" now we will try and replace the nan values in the mileage column that we raplced with zero.\n so we wil try and replace the 0 values in the mileage column depending on the year the car was brought","c72d75c9":"# Predict the Selling Price of the Car","4967872c":"For owner column\nManually handling the owner column using map function","b48a6d33":"Converting the data(x) to same scale between 0-1\nPerforming standardization"}}