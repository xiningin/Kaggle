{"cell_type":{"f5670b42":"code","c78dfe2e":"code","8deaee51":"code","13feabf0":"code","334362bb":"code","e0b6daf9":"code","b0d0ed09":"code","1a8ca5ee":"code","14cae490":"code","cefe02f0":"code","ff2a543f":"code","c9bfb105":"code","7613b4d8":"code","6e0f4bbb":"markdown","cc8f6a8d":"markdown","69a2a770":"markdown","e2e55fe4":"markdown","7e7ec02e":"markdown"},"source":{"f5670b42":"pip install pytorch_tabnet","c78dfe2e":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold\nimport lightgbm as lgb\nfrom tqdm.autonotebook import tqdm\nfrom sklearn import metrics\nimport shap\nfrom pytorch_tabnet.tab_model import TabNetClassifier\nfrom pytorch_tabnet.pretraining import TabNetPretrainer\nimport torch\nimport random\nimport os\nshap.initjs()","8deaee51":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\nseed_everything()","13feabf0":"train_df = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/train.csv').set_index('id')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/test.csv').set_index('id')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-may-2021\/sample_submission.csv')","334362bb":"params = {}\n\nN_SPLITS = 3","e0b6daf9":"all_df = pd.concat([train_df, test_df])\n\nfor col in all_df.select_dtypes(['object']).columns:\n    all_df[col] = all_df[col].astype('category')\n\nX = all_df[all_df.index.isin(train_df.index)]\ny = X.pop('target')\n\nx_tst = all_df[~all_df.index.isin(train_df.index)].drop(columns='target')","b0d0ed09":"folds = KFold(n_splits = N_SPLITS)\noof = np.zeros(X.shape[0])\npredictions = np.zeros(x_tst.shape[0])\nshap_list = []\nshap_tst_list = []\nfor fold_, (trn_idx, val_idx) in tqdm(enumerate(folds.split(X, y)), total=folds.n_splits):\n    print(\"Fold {}\".format(fold_))\n    x_trn = X.iloc[trn_idx]\n    y_trn = y[trn_idx]\n    x_val = X.iloc[val_idx]\n    y_val = y[val_idx]\n    model = lgb.LGBMClassifier(**params, random_state=42, n_estimators=9999999)\n    model.fit(x_trn, y_trn, \n            eval_set=[(x_trn, y_trn),(x_val, y_val)],\n#             eval_metric='auc', \n            early_stopping_rounds=500, \n            verbose=500\n           )\n    oof[val_idx] = model.predict_proba(x_val, num_iteration=model.best_iteration_)[:,1]\n    predictions += model.predict_proba(x_tst, num_iteration=model.best_iteration_)[:,1] \/ folds.n_splits\n    shap_explainer = shap.TreeExplainer(model)\n    shap_val = pd.DataFrame(shap_explainer.shap_values(x_val)[1], index=x_val.index, columns=x_val.columns)\n    shap_list.append(shap_val)\n    shap_tst = pd.DataFrame(shap_explainer.shap_values(x_tst)[1], index=x_tst.index, columns=x_tst.columns)\n    shap_tst_list.append(shap_tst)\nsubmission1 = pd.Series(predictions, index=x_tst.index).to_frame('target').reset_index()\nlgb.plot_importance(model)\nmodel1_score = metrics.log_loss(y, oof)","1a8ca5ee":"X = pd.concat(shap_list).join(y)\ny = X.pop('target')\nx_tst = pd.concat(shap_tst_list).groupby(level=0).mean()","14cae490":"oof = np.zeros(X.shape[0])\npredictions = np.zeros(x_tst.shape[0])\n\nfor fold_, (trn_idx, val_idx) in tqdm(enumerate(folds.split(X, y)), total=folds.n_splits):\n    print(\"Fold {}\".format(fold_))\n    x_trn = X.iloc[trn_idx]\n    y_trn = y[trn_idx]\n    x_val = X.iloc[val_idx]\n    y_val = y[val_idx]\n    model = lgb.LGBMClassifier(**params, random_state=42, n_estimators=9999999)\n    model.fit(x_trn, y_trn, \n            eval_set=[(x_trn, y_trn),(x_val, y_val)],\n            eval_metric='auc', \n            early_stopping_rounds=500, \n            verbose=500\n           )\n    oof[val_idx] = model.predict_proba(x_val, num_iteration=model.best_iteration_)[:,1]\n    predictions += model.predict_proba(x_tst, num_iteration=model.best_iteration_)[:,1] \/ folds.n_splits\nsubmission2 = pd.Series(predictions, index=x_tst.index).to_frame('target').reset_index()\nlgb.plot_importance(model)\nmodel2_score = metrics.log_loss(y, oof)","cefe02f0":"oof = np.zeros(X.shape[0])\npredictions = np.zeros(x_tst.shape[0])\n\nfor fold_, (trn_idx, val_idx) in tqdm(enumerate(folds.split(X, y)), total=folds.n_splits):\n    print(\"Fold {}\".format(fold_))\n    x_trn = X.iloc[trn_idx]\n    y_trn = y[trn_idx]\n    x_val = X.iloc[val_idx]\n    y_val = y[val_idx]\n    model = TabNetClassifier()\n    model.fit(\n        x_trn.values, y_trn, \n#         eval_metric=['accuracy'],\n        eval_set=[(x_val.values, y_val)]\n    )\n    oof[val_idx] = model.predict_proba(x_val.values)[:,1]\n    predictions += model.predict_proba(x_tst.values)[:,1] \/ folds.n_splits\nsubmission3 = pd.Series(predictions, index=x_tst.index).to_frame('target').reset_index()\nmodel3_score = metrics.log_loss(y, oof)","ff2a543f":"oof = np.zeros(X.shape[0])\npredictions = np.zeros(x_tst.shape[0])\n\nfor fold_, (trn_idx, val_idx) in tqdm(enumerate(folds.split(X, y)), total=folds.n_splits):\n    print(\"Fold {}\".format(fold_))\n    x_trn = X.iloc[trn_idx]\n    y_trn = y[trn_idx]\n    x_val = X.iloc[val_idx]\n    y_val = y[val_idx]\n    unsupervised_model = TabNetPretrainer(optimizer_fn=torch.optim.Adam,\n                                          optimizer_params=dict(lr=2e-2),\n                                          mask_type='entmax' # \"sparsemax\"\n                                         )\n    \n    unsupervised_model.fit(X_train=x_trn.values,\n                           eval_set=[x_val.values],\n                           pretraining_ratio=0.8,\n                          )\n    \n    model = TabNetClassifier()\n    model.fit(x_trn.values, y_trn, \n#               eval_metric=['accuracy'],\n              eval_set=[(x_val.values, y_val)],\n              from_unsupervised=unsupervised_model\n             )\n    oof[val_idx] = model.predict_proba(x_val.values)[:,1]\n    predictions += model.predict_proba(x_tst.values)[:,1] \/ folds.n_splits\nsubmission4 = pd.Series(predictions, index=x_tst.index).to_frame('target').reset_index()\nmodel4_score = metrics.log_loss(y, oof)","c9bfb105":"print('lgbm model:', model1_score)\nprint('lgbm model(shap-pretrained):', model2_score)\nprint('tabnet model(shap-pretrained):', model3_score)\nprint('tabnet model(shap and tabnet pretrained):', model4_score)","7613b4d8":"submission1.to_csv('submission1.csv', index=False)\nsubmission2.to_csv('submission2.csv', index=False)\nsubmission3.to_csv('submission3.csv', index=False)\nsubmission4.to_csv('submission4.csv', index=False)","6e0f4bbb":"My params are optunized. You do not have to, but I believe it will improve the result.","cc8f6a8d":"I used feature extraction from another notebooks, just removed missing value imputation. Based on my expirience, lightgbm produce better scores for NaNs, rather than imputed values.","69a2a770":"Pretraining makes a huge difference in many fields envolving deep learning. TabNet use very clever unsupervised pretraining, which is manages to improve the score.\nIt still not as good as GBMs but they are synergy well.\nI thought if there is a way to pretrain with GBM, may be there is a way to leverage other models.\n\nLet me introduce you a way to pretrain the data with LightGBM. Technically it is a transformation. What I actually do is:\n* Train a lightgbm model. I suggest to engineer your features if possible and optimize the parameters. \n* Extract shap values for unseen fold\n* Repeat for all folds and combine\n\nAs a result, you end up with a new dataset, which is:\n* Normalized\n* Linearized - kind of. Features transformed into their importances\n* Categorical features encoded smarter! Encoding is not linear and depends on other features of the sample.\n* Missing values a handled smarter!\n\nI suggest you to read about shap values before you try.\n\nI choosed lightgbm because it fast, good, and super-lazy: no need to worry about categories, missing values etc.\nYou may use other tree-based models.","e2e55fe4":"Then I create the transformed dataset and apply 3 model on it:\n* Lightgbm. I use the same params. Optimized should perform better.\n* Tabnet w\/o unsupervised pretraining\n* Tabnet with unsupervised pretraining\n","7e7ec02e":"Thanks for reading\n\nNow working on unsupervised GBM-pretraining..."}}