{"cell_type":{"6d22e543":"code","65143dae":"code","be16b2ea":"code","d43fbe69":"code","159b63fc":"code","6dcc9ce2":"code","350be469":"code","8b9c9e7a":"code","8c89f4cc":"code","c3ecec8d":"code","498c27c2":"code","94ae2530":"code","c39d33a3":"code","8ebd16e1":"markdown","5d393449":"markdown","de261db6":"markdown","4e085cfd":"markdown","6e49bffa":"markdown","75cfd75e":"markdown"},"source":{"6d22e543":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nimport keras\nfrom keras.models import Input\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import MaxPool1D\nfrom keras.layers import Conv1D\nfrom keras.layers import Flatten\nfrom keras.layers import Dropout\nfrom keras.layers import CategoryEncoding\nimport matplotlib.pyplot as plt","65143dae":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","be16b2ea":"# Importing needed data\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nprint(train.shape)\ntrain.head()","d43fbe69":"imgSize = np.sqrt(784)\nimgSize","159b63fc":"# plotting row data\nrow = np.random.randint(train.shape[0])\n\nx=1\narr = []\nwhile(x<=imgSize):\n    col = int(1+(imgSize*x))\n    arr.append(train.iloc[row, col-28:col].values)\n    x+=1\n    \n# converting to (28,28) from the resultant shape of (28,1,28)\narr = np.array(arr).reshape(28,28)\n\nprint(f\"Row: {row}\")\nprint(f\"Resolution: {arr.shape}\")\nprint(f\"Total pixels: {arr.size}\")\nprint(f\"Label: {train.iloc[row, 0]}\")\nplt.imshow(arr)","6dcc9ce2":"# addressing label datatype\n# normalizing values\ninputs = train.iloc[:, 1:].values.astype(\"float16\")\ninputs = np.expand_dims(inputs, -1)\ninputs = inputs \/ 255\nprint(f'Normalize check: {inputs.max()}')\nprint(f'Inputs shape: {inputs.shape}')\n\nlabels = train.iloc[:, 0].values.astype(\"float16\")\nprint(f'Labels shape: {labels.shape}')\n\n# categorical encoding the input labels\nlayer = tf.keras.layers.CategoryEncoding(num_tokens=10, output_mode=\"one_hot\")\nlabels = layer(labels)\nprint(f'Encoded shape: {labels.shape}')\nprint(f'Label for aforementioned plot: {labels[row][:]}')","350be469":"model = Sequential()\nmodel.add(Input(shape=(784,1)))\nmodel.add(Conv1D(128, 6, strides=1, activation='relu'))\nmodel.add(MaxPool1D(2))\nmodel.add(Conv1D(128, 4, strides=1, activation='relu'))\nmodel.add(MaxPool1D(4))\nmodel.add(Flatten())\nmodel.add(Dropout(0.3))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","8b9c9e7a":"model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=['accuracy'])\nmodel.fit(inputs, labels, batch_size=128, epochs=32)","8c89f4cc":"# formatting test to input format\npred = np.expand_dims(test, -1).astype(\"float16\") \/ 255\nprint(pred.shape)","c3ecec8d":"preds = model.predict(pred)\npreds.shape","498c27c2":"submission = []; x=0\nwhile(x<preds.shape[0]):\n    submission.append(np.where(preds[x] == np.amax(preds[x])))\n    x+=1\n    \nsubmission = np.array(submission).reshape(28000)","94ae2530":"# run this block to cross validate prediction with plotted output\nrow = np.random.randint(test.shape[0])\nx=1\narr = []\nwhile(x<=imgSize):\n    col = int((imgSize*x))\n    arr.append(test.iloc[row, col-28:col].values)\n    x+=1\narr = np.array(arr).reshape(28,28)\n\nprint(f\"PredVal: {submission[row]}\")\nplt.imshow(arr, interpolation='nearest')","c39d33a3":"# formatting as per required\nout = pd.DataFrame({\"Label\":submission})\nout.index.names = ['ImageId']\nout.index+=1 #submission index starts at 1\nout.to_csv('\/kaggle\/working\/out.csv')","8ebd16e1":"# Preparing the data","5d393449":"Since we know it is pixel data of images, we can convert the single dimensionality of (,785) to a 2D space by getting the square root of total space, resulting (28,28)","de261db6":"# Making predictions","4e085cfd":"We have a dataSet with each row representing pixel data as columns. \\\nTotal rows being 42000 equates to 42000 total training images. \\\nEach image having 784 pixels and a label for the number it represents at Column 0.\n","6e49bffa":"# Understanding the Data","75cfd75e":"# Building the Model"}}