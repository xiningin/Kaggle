{"cell_type":{"6ca24c72":"code","b1cfe40c":"code","8df90db7":"code","4814d593":"code","9846037b":"code","c39ee172":"code","09064358":"code","ba1de440":"code","fa611b46":"code","7e8a828c":"code","42066652":"code","667683c1":"code","cacc1a6d":"code","1bb14292":"code","09551597":"code","7df9662d":"code","a00bbdf2":"code","fb25a2f0":"code","d50dac3b":"code","fa3f3c24":"code","fdee60b1":"code","416c12cb":"code","3ed2de87":"code","713e3550":"code","19d1fb59":"code","55eb8f08":"code","bac0a274":"code","5456f930":"code","5e00434f":"code","5ee7d066":"code","2ebb4e9b":"code","be010f7b":"code","7b4fef32":"code","3d3aefea":"code","ecc84928":"code","061c1aae":"code","232f97ad":"code","ab5d7950":"markdown","80a830d3":"markdown","3edd8a4c":"markdown","88f02f89":"markdown","66c2f545":"markdown","87bb3ee0":"markdown","25548d76":"markdown","4470350c":"markdown","b5e0822c":"markdown","f6126b5b":"markdown","4138a642":"markdown","8bf2347e":"markdown","42f19de4":"markdown","cff76d75":"markdown","e956a129":"markdown","36d98123":"markdown","1f0a3d42":"markdown","6c113c73":"markdown","33d1dfcd":"markdown","399260df":"markdown"},"source":{"6ca24c72":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1cfe40c":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","8df90db7":"data.head()","4814d593":"data.describe()","9846037b":"data.isnull().sum()","c39ee172":"data = data.dropna(subset = ['Age','Embarked'])","09064358":"data=data.drop(columns = ['Cabin'])","ba1de440":"data.isnull().sum()","fa611b46":"data.dtypes","7e8a828c":"data.corr()","42066652":"data = data.drop(['Name','Embarked','Ticket'],axis = 1)","667683c1":"data.head()","cacc1a6d":"list1 = ['Sex']\nfor column in list1:\n    data[column] = data[column].astype('category')\ndata = pd.get_dummies(data = data, columns = list1)\ndata = data.astype('float64')\n","1bb14292":"data.head()","09551597":"import matplotlib.pyplot as plt\nimport seaborn as sns","7df9662d":"fig, ax=plt.subplots(figsize=(12,12))\ncor=data.corr().round(2)\nsns.heatmap(cor,cmap=\"Set1\",linewidth=1.0)","a00bbdf2":"fig , ax = plt.subplots(figsize=(6,4))\nsns.countplot(x=data['Survived'], data=data)\nplt.title(\"Survival Rate\")\nplt.show()","fb25a2f0":"data['Age'].hist()\nplt.title('Histogram of Age')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('hist_age')","d50dac3b":"fig, ax = plt.subplots()\nax.scatter(data['Age'], data['Fare'])","fa3f3c24":"fig, ax = plt.subplots()\nax.bar(data['Pclass'], data['Age'])","fdee60b1":"X_train = data.iloc[:,data.columns != 'Survived']\nY_train = data['Survived']","416c12cb":"X_train.head()","3ed2de87":"Y_train.head()","713e3550":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)","19d1fb59":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","55eb8f08":"test.head()","bac0a274":"test.isnull().sum()","5456f930":"test = test.dropna(subset = ['Age'])\ntest=test.drop(['Cabin','Name','Ticket','Embarked'], axis =1)","5e00434f":"test.head()","5ee7d066":"list1 = ['Sex']\nfor column in list1:\n    test[column] = test[column].astype('category')\ntest = pd.get_dummies(data = test, columns = list1)\ntest = data.astype('float64')","2ebb4e9b":"test.head()","be010f7b":"X_test = test.iloc[:,test.columns != 'Survived']\nY_test = test['Survived']","7b4fef32":"y_pred = logreg.predict(X_test)","3d3aefea":"print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, Y_test)))","ecc84928":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)","061c1aae":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, y_pred))","232f97ad":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(Y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(Y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","ab5d7950":"**ROC Curve**","80a830d3":"**Predicting the survived column for the test dataset using the Logistic Regression model.**","3edd8a4c":"**After cleaning and Visualisation, heading forward to train the model**","88f02f89":"**Since the column cabin has a lot of null values so drop it.**","66c2f545":"**Confusion Matrix**","87bb3ee0":"**Converting categorical data into numeric**","25548d76":"**Reading the dataset and cleaning it.**","4470350c":"**Calculating the columns having null values.**\n","b5e0822c":"**Histogram For Age**","f6126b5b":"**Dropping the rows where there are null values**","4138a642":"**Accuracy of the Model**","8bf2347e":"**Visualising the correlation in the form of heatmap**","42f19de4":"**Visualisation**","cff76d75":"**Scatter plot between Age and Fare**","e956a129":"![](http:\/\/)**Importing the Logistic Regression model from sklearn and Training the model**","36d98123":"**Bar Chart been the class and the passenger's age**","1f0a3d42":"**Count plot for the number of people survived.   0~ Survived   1~Dead**","6c113c73":"**Importing the test dataset and cleaning it like the test one.**","33d1dfcd":"**Classification Report**","399260df":"**Since name and some columns do not have any correlation to survive so they are dropped.**"}}