{"cell_type":{"89368a95":"code","286350a5":"code","ddf1ed78":"code","7563dc84":"code","2e557e77":"code","813a9ae9":"code","7c93bf9e":"code","2816f856":"code","d1dac042":"code","647f464c":"code","00e1cede":"code","4e91ffcc":"code","b55c85d7":"code","6e01dec8":"code","f13d7279":"code","075f7ae6":"code","530deef4":"code","cab2b71d":"code","4444275f":"code","4ae8391b":"code","40d4f5bd":"code","a60bcf5a":"code","7e11dc8e":"code","c2b077f6":"code","d085d92b":"code","434eb8e1":"code","642584f4":"code","8933a43e":"code","28dd4f75":"code","25e1f8ac":"code","ef34e8f9":"code","19d03f2b":"code","0b6a758d":"code","6251411b":"code","289e05b6":"code","49676eef":"code","0ce5d8c0":"code","790102fa":"code","5b04cfe3":"code","0c4721f3":"code","353a6787":"code","cf3e7e7d":"code","5895dc86":"code","cc89e383":"code","03499a4c":"code","11fdf723":"code","23df94c2":"code","2432fcec":"code","8de6772d":"code","674f589c":"code","3c8a48ef":"code","7fec34bb":"code","732fb33d":"code","6a3214db":"code","770942ea":"code","2f50f104":"code","98b2df74":"code","be16ed5b":"code","1d9dd121":"code","6b88525c":"code","6039e242":"code","84a78e3b":"code","bca3f9e6":"code","ca7d1396":"code","f0eb6cb5":"code","7c40430c":"code","f6df6d47":"code","e61a6b64":"code","c4b677fe":"markdown","4fc49d72":"markdown","45ace000":"markdown","97be5938":"markdown","02a1adbb":"markdown","75458a44":"markdown","35b2ca7d":"markdown","8c07976f":"markdown","a1e6d82b":"markdown","5929d491":"markdown","b680c455":"markdown","bd33ab4a":"markdown","9a82a009":"markdown","8d093744":"markdown","ea4c8f58":"markdown","06ef2a74":"markdown","aa9e3faa":"markdown","884ed0f6":"markdown","100d15de":"markdown","01973440":"markdown","384370bf":"markdown","d23c5816":"markdown","4e56c9a5":"markdown","15a739a0":"markdown","e26069ee":"markdown","d157a3ec":"markdown","50943885":"markdown","b73b604e":"markdown","f33d4187":"markdown","7279cdba":"markdown","4322a37c":"markdown","a17bc308":"markdown","c628128a":"markdown","d81f34f4":"markdown","45b42afd":"markdown","640df944":"markdown","faea3e26":"markdown","f08584c7":"markdown","91618279":"markdown","fefe8bd8":"markdown","14f561d7":"markdown","393b397d":"markdown","f7649a06":"markdown","46da168f":"markdown","97f25711":"markdown","1278e301":"markdown"},"source":{"89368a95":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport datetime as dt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree\n\nimport warnings\nwarnings.filterwarnings('ignore')","286350a5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ddf1ed78":"# Importing Country Data\ncountry_data = pd.read_csv('..\/input\/country-data\/Country-data.csv')","7563dc84":"# basics of the country_data\ncountry_data.info()","2e557e77":"country_data.shape","813a9ae9":"country_data.describe()","7c93bf9e":"country_data.isnull().sum()","2816f856":"#Checking if any columns having unique value ie only 1 value\nunique =country_data.nunique()\nunique = unique[unique.values ==1]\nunique","d1dac042":"#checking duplicates\nsum(country_data.duplicated(subset = 'country')) == 0","647f464c":"#Looking for spelling mistakes\nprint(country_data['country'].unique())","00e1cede":"country_data['exports'] = (country_data['exports']*country_data['gdpp'])\/100\ncountry_data['health'] = (country_data['health']*country_data['gdpp'])\/100\ncountry_data['imports'] = (country_data['imports']*country_data['gdpp'])\/100\ncountry_data.head()","4e91ffcc":"fig, axs = plt.subplots(3,3,figsize = (15,15))\n\n# Child Mortality Rate : Death of children under 5 years of age per 1000 live births\n\ntop10_child_mort = country_data[['country','child_mort']].sort_values('child_mort', ascending = False).head(10)\nplt1 = sns.barplot(x='country', y='child_mort', data= top10_child_mort, ax = axs[0,0])\nplt1.set(xlabel = '', ylabel= 'Child Mortality Rate')\n\n# Fertility Rate: The number of children that would be born to each woman if the current age-fertility rates remain the same\ntop10_total_fer = country_data[['country','total_fer']].sort_values('total_fer', ascending = False).head(10)\nplt1 = sns.barplot(x='country', y='total_fer', data= top10_total_fer, ax = axs[0,1])\nplt1.set(xlabel = '', ylabel= 'Fertility Rate')\n\n# Life Expectancy: The average number of years a new born child would live if the current mortality patterns are to remain same\n\nbottom10_life_expec = country_data[['country','life_expec']].sort_values('life_expec', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='life_expec', data= bottom10_life_expec, ax = axs[0,2])\nplt1.set(xlabel = '', ylabel= 'Life Expectancy')\n\n# Health :Total health spending as %age of Total GDP.\n\nbottom10_health = country_data[['country','health']].sort_values('health', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='health', data= bottom10_health, ax = axs[1,0])\nplt1.set(xlabel = '', ylabel= 'Health')\n\n# The GDP per capita : Calculated as the Total GDP divided by the total population.\n\nbottom10_gdpp = country_data[['country','gdpp']].sort_values('gdpp', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='gdpp', data= bottom10_gdpp, ax = axs[1,1])\nplt1.set(xlabel = '', ylabel= 'GDP per capita')\n\n# Per capita Income : Net income per person\n\nbottom10_income = country_data[['country','income']].sort_values('income', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='income', data= bottom10_income, ax = axs[1,2])\nplt1.set(xlabel = '', ylabel= 'Per capita Income')\n\n\n# Inflation: The measurement of the annual growth rate of the Total GDP\n\ntop10_inflation = country_data[['country','inflation']].sort_values('inflation', ascending = False).head(10)\nplt1 = sns.barplot(x='country', y='inflation', data= top10_inflation, ax = axs[2,0])\nplt1.set(xlabel = '', ylabel= 'Inflation')\n\n\n# Exports: Exports of goods and services. Given as %age of the Total GDP\n\nbottom10_exports = country_data[['country','exports']].sort_values('exports', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='exports', data= bottom10_exports, ax = axs[2,1])\nplt1.set(xlabel = '', ylabel= 'Exports')\n\n\n# Imports: Imports of goods and services. Given as %age of the Total GDP\n\nbottom10_imports = country_data[['country','imports']].sort_values('imports', ascending = True).head(10)\nplt1 = sns.barplot(x='country', y='imports', data= bottom10_imports, ax = axs[2,2])\nplt1.set(xlabel = '', ylabel= 'Imports')\n\nfor ax in fig.axes:\n    plt.sca(ax)\n    plt.xticks(rotation = 90)\n    \nplt.tight_layout()\nplt.savefig('eda')\nplt.show()","b55c85d7":"## to check Top 10 Highest Child Mortality Rated Countries\nplt.figure(figsize = (10,5))\nchild_mort_top10 = country_data[['country','child_mort']].sort_values('child_mort', ascending = False).head(10)\nax = sns.barplot(x='country', y='child_mort', data= child_mort_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Child Mortality Rate')\nplt.xticks(rotation=90)\nplt.show()","6e01dec8":"## countries having highest netincome per person \nplt.figure(figsize = (10,5))\nchild_income_top10 = country_data[['country','income']].sort_values('income', ascending = False).head(10)\nax = sns.barplot(x='country', y='income',data= child_income_top10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Highest Income')\nplt.xticks(rotation=90)\nplt.show()","f13d7279":"### countries having least net income per person \nplt.figure(figsize = (10,5))\nchild_income_least10 = country_data[['country','income']].sort_values('income', ascending = True).head(10)\nax = sns.barplot(x='country', y='income', data= child_income_least10)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'Least Income')\nplt.xticks(rotation=90)\nplt.show()","075f7ae6":"### to check the inflation rate\nplt.figure(figsize = (10,5))\nchild_inflation = country_data[['country','inflation']].sort_values('inflation', ascending = False).head(10)\nax = sns.barplot(x='country', y='inflation', data= child_inflation)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'inflation rate')\nplt.xticks(rotation=90)\nplt.show()","530deef4":"## to check life expectation rate\nplt.figure(figsize = (10,5))\nchild_inflation = country_data[['country','life_expec']].sort_values('life_expec', ascending = True).head(10)\nax = sns.barplot(x='country', y='life_expec', data= child_inflation)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nax.set(xlabel = '', ylabel= 'life_expec')\nplt.xticks(rotation=90)\nplt.show()","cab2b71d":"# Heatmap to understand the attributes dependency\n\n# Let us draw heatmap to understand the corelation better.\nplt.figure(figsize = (15,10))  \nsns.heatmap(country_data.corr(),annot = True,cmap=\"YlGnBu\")","4444275f":"# Pairplot of all numeric columns\nsns.pairplot(country_data)","4ae8391b":"country_data.describe(percentiles=[.25,.5,.75,.90,.95,.99])","40d4f5bd":"plt.figure(figsize = (20,20))\n\nfeature = country_data.columns[1::1]\nfor i in enumerate(feature):\n    plt.subplot(6,3, i[0]+1)\n    sns.distplot(country_data[i[1]])","a60bcf5a":"plt.figure(figsize = (20,20))\n\nfeature = country_data.columns[1::1]\nfor i in enumerate(feature):\n    plt.subplot(6,3, i[0]+1)\n    sns.boxplot(country_data[i[1]])","7e11dc8e":"# As we can see there are a number of outliers in the data.\n\n# Keeping in mind we need to identify backward countries based on socio economic and health factors.\n# We will cap the outliers to values accordingly for analysis.\n\npercentiles = country_data['child_mort'].quantile([0.01,0.99]).values\ncountry_data['child_mort'][country_data['child_mort'] <= percentiles[0]] = percentiles[0]\ncountry_data['child_mort'][country_data['child_mort'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['health'].quantile([0.01,0.99]).values\ncountry_data['health'][country_data['health'] <= percentiles[0]] = percentiles[0]\ncountry_data['health'][country_data['health'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['life_expec'].quantile([0.01,0.99]).values\ncountry_data['life_expec'][country_data['life_expec'] <= percentiles[0]] = percentiles[0]\ncountry_data['life_expec'][country_data['life_expec'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['total_fer'].quantile([0.01,0.99]).values\ncountry_data['total_fer'][country_data['total_fer'] <= percentiles[0]] = percentiles[0]\ncountry_data['total_fer'][country_data['total_fer'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['income'].quantile([0.01,0.99]).values\ncountry_data['income'][country_data['income'] <= percentiles[0]] = percentiles[0]\ncountry_data['income'][country_data['income'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['inflation'].quantile([0.01,0.99]).values\ncountry_data['inflation'][country_data['inflation'] <= percentiles[0]] = percentiles[0]\ncountry_data['inflation'][country_data['inflation'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['gdpp'].quantile([0.01,0.99]).values\ncountry_data['gdpp'][country_data['gdpp'] <= percentiles[0]] = percentiles[0]\ncountry_data['gdpp'][country_data['gdpp'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['imports'].quantile([0.01,0.99]).values\ncountry_data['imports'][country_data['imports'] <= percentiles[0]] = percentiles[0]\ncountry_data['imports'][country_data['imports'] >= percentiles[1]] = percentiles[1]\n\npercentiles = country_data['exports'].quantile([0.01,0.99]).values\ncountry_data['exports'][country_data['exports'] <= percentiles[0]] = percentiles[0]\ncountry_data['exports'][country_data['exports'] >= percentiles[1]] = percentiles[1]","c2b077f6":"fig, axs = plt.subplots(3,3, figsize = (15,7.5))\n\nplt1 = sns.boxplot(country_data['child_mort'], ax = axs[0,0])\nplt2 = sns.boxplot(country_data['health'], ax = axs[0,1])\nplt3 = sns.boxplot(country_data['life_expec'], ax = axs[0,2])\nplt4 = sns.boxplot(country_data['total_fer'], ax = axs[1,0])\nplt5 = sns.boxplot(country_data['income'], ax = axs[1,1])\nplt6 = sns.boxplot(country_data['inflation'], ax = axs[1,2])\nplt7 = sns.boxplot(country_data['gdpp'], ax = axs[2,0])\nplt8 = sns.boxplot(country_data['imports'], ax = axs[2,1])\nplt9 = sns.boxplot(country_data['exports'], ax = axs[2,2])\n\nplt.tight_layout()","d085d92b":"# Check the hopkins\n\n#Calculating the Hopkins statistic\nfrom sklearn.neighbors import NearestNeighbors\nfrom random import sample\nfrom numpy.random import uniform\nimport numpy as np\nfrom math import isnan\n \ndef hopkins(X):\n    d = X.shape[1]\n    #d = len(vars) # columns\n    n = len(X) # rows\n    m = int(0.1 * n) \n    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n \n    rand_X = sample(range(0, n, 1), m)\n \n    ujd = []\n    wjd = []\n    for j in range(0, m):\n        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n        ujd.append(u_dist[0][1])\n        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n        wjd.append(w_dist[0][1])\n \n    H = sum(ujd) \/ (sum(ujd) + sum(wjd))\n    if isnan(H):\n        print(ujd, wjd)\n        H = 0\n \n    return H","434eb8e1":"hopkins(country_data.drop('country', axis = 1))","642584f4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ncountrydata1 = scaler.fit_transform(country_data.drop('country',axis=1))","8933a43e":"countrydata1 = pd.DataFrame(countrydata1, columns = country_data.columns[1::1])\ncountrydata1.head()","28dd4f75":"# Choose the value of K\n# Silhouette score\n# Elbow curve-ssd\n\nfrom sklearn.metrics import silhouette_score\nss = []\nfor k in range(2, 11):\n    kmean = KMeans(n_clusters = k).fit(countrydata1)\n    ss.append([k, silhouette_score(countrydata1, kmean.labels_)])\ntemp = pd.DataFrame(ss)    \nplt.plot(temp[0], temp[1]);","25e1f8ac":"ssd = []\nfor k in range(2, 11):\n    kmean = KMeans(n_clusters = k).fit(countrydata1)\n    ssd.append([k, kmean.inertia_])\n    \ntemp = pd.DataFrame(ssd)\nplt.plot(temp[0], temp[1]);","ef34e8f9":"# silhouette analysis\nrange_n_clusters = [2, 3, 4, 5, 6, 7, 8]\n\nfor num_clusters in range_n_clusters:\n    \n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, max_iter=50)\n    kmeans.fit(countrydata1)\n    \n    cluster_labels = kmeans.labels_\n    \n    # silhouette score\n    silhouette_avg = silhouette_score(countrydata1, cluster_labels)\n    print(\"For n_clusters={0}, the silhouette score is {1}\".format(num_clusters, silhouette_avg))\n    ","19d03f2b":"# K=3\n# Final Kmean Clustering\n\nkmean = KMeans(n_clusters = 3, random_state = 50)\nkmean.fit(countrydata1)","0b6a758d":"country_kmean = country_data","6251411b":"label  = pd.DataFrame(kmean.labels_, columns= ['cluster_id'])\nlabel.head()","289e05b6":"country_kmean = pd.concat([country_kmean, label], axis =1)\ncountry_kmean.head()","49676eef":"country_kmean.cluster_id.value_counts()","0ce5d8c0":"# scatter plot for gdpp, income and clusterId\nsns.scatterplot(x = 'gdpp', y = 'income', hue = 'cluster_id', data = country_kmean, palette = 'Set1');","790102fa":"# scatter plot for Child_mort, income and clusterId\nsns.scatterplot(x = 'child_mort', y = 'income', hue = 'cluster_id', data = country_kmean, palette = 'Set1');","5b04cfe3":"# scatter plot for Child_mort, gdpp and clusterId\nsns.scatterplot(x = 'child_mort', y = 'gdpp', hue = 'cluster_id', data = country_kmean, palette = 'Set1');","0c4721f3":"# Making sense out of the clusters\ncountry_kmean.drop('country', axis = 1).groupby('cluster_id').mean().plot(kind = 'bar')","353a6787":"# gdpp, income and child_mort\ncountry_kmean.drop(['country', 'exports', 'health', 'imports','inflation','life_expec','total_fer'], axis = 1).groupby('cluster_id').mean().plot(kind = 'bar')","cf3e7e7d":"child_mort_mean =pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).child_mort.mean())\nexports_mean= pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).exports.mean())\nhealth_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).health.mean())\nimports_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).imports.mean())\nincome_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).income.mean())\ninflat_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).inflation.mean())\nlife_expec_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).life_expec.mean())\ntotal_fer_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).total_fer.mean())\ngdpp_mean = pd.DataFrame(country_kmean.groupby([\"cluster_id\"]).gdpp.mean())","5895dc86":"country_analysis = pd.concat([pd.Series([0,1,2]),child_mort_mean,exports_mean,health_mean,imports_mean,income_mean,inflat_mean,life_expec_mean,\n                                 total_fer_mean,gdpp_mean], axis=1)","cc89e383":"country_analysis","03499a4c":"country_analysis.columns = [\"cluster_id\",\"child_mort_mean\",\"exports_mean\",\"health_mean\",\"imports_mean\",\"income_mean\",\"inflation_mean\",\"life_expec_mean\",\"total_fer_mean\",\"gdpp_mean\"]\ncountry_analysis","11fdf723":"plt.figure(figsize = (18,18))\nplt.figure(1)\n\n# subplot 1\nplt.subplot(3, 3, 1)\nplt.title(\"child_mort_mean\")\nsns.barplot(country_analysis.cluster_id, country_analysis.child_mort_mean)\n\n# subplot 2 \nplt.subplot(3, 3, 2)\nplt.title(\"income_mean\")\nsns.barplot(country_analysis.cluster_id, country_analysis.income_mean)\n\n# subplot 3\n#plt.figure(2)\nplt.subplot(3, 3, 3)\nplt.title(\"gdpp_mean\")\nsns.barplot(country_analysis.cluster_id, country_analysis.income_mean)\n\nplt.show()","23df94c2":"country_analysis","2432fcec":"country_analysis.columns","8de6772d":"## so that retrieving Poor countries which need financial aid can be identified from cluster 1\ncluster_kmean_final = country_kmean[country_kmean['cluster_id']==1]\ncluster_kmean_final.sort_values(['gdpp','income','child_mort','health','inflation','life_expec','total_fer','imports','exports'], \n                      ascending=[True,True,False,True,False,True,False,False,True]).head(10)","674f589c":"## importing necessary libraries\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom scipy.cluster.hierarchy import cut_tree","3c8a48ef":"countrydata1.head()","7fec34bb":"country_hc = country_data","732fb33d":"## single linkage\nmergings = linkage(countrydata1, method=\"single\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","6a3214db":"## complete linkage \nmergings = linkage(countrydata1, method=\"complete\", metric='euclidean')\ndendrogram(mergings)\nplt.show()","770942ea":"cluster_labels = cut_tree(mergings, n_clusters=3).reshape(-1, )\ncluster_labels","2f50f104":"# assign cluster labels\ncountry_hc['cluster_labels'] = cluster_labels\ncountry_hc.head()\ncountry_hc.reset_index()","98b2df74":"sns.scatterplot(x = 'gdpp', y = 'income', hue = 'cluster_labels', data = country_hc, palette = 'Set1');","be16ed5b":"sns.scatterplot(x = 'child_mort', y = 'income', hue = 'cluster_labels', data = country_hc, palette = 'Set1');","1d9dd121":"sns.scatterplot(x = 'child_mort', y = 'gdpp', hue = 'cluster_labels', data = country_hc, palette = 'Set1');","6b88525c":"country_hc.drop('country', axis = 1).groupby('cluster_labels').mean().plot(kind = 'bar')","6039e242":"# gdpp, income and child_mort\ncountry_hc.drop(['country', 'exports', 'health', 'imports','inflation','life_expec','total_fer'], axis = 1).groupby('cluster_labels').mean().plot(kind = 'bar')","84a78e3b":"child_mort_mean =pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).child_mort.mean())\nexports_mean= pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).exports.mean())\nhealth_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).health.mean())\nimports_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).imports.mean())\nincome_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).income.mean())\ninflat_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).inflation.mean())\nlife_expec_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).life_expec.mean())\ntotal_fer_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).total_fer.mean())\ngdpp_mean = pd.DataFrame(country_hc.groupby([\"cluster_labels\"]).gdpp.mean())","bca3f9e6":"country_analysis_hc = pd.concat([pd.Series([0,1,2]),child_mort_mean,exports_mean,health_mean,imports_mean,income_mean,inflat_mean,life_expec_mean,\n                                 total_fer_mean,gdpp_mean], axis=1)","ca7d1396":"country_analysis_hc\n","f0eb6cb5":"country_analysis_hc.columns = [\"cluster_id\",\"child_mort_mean\",\"exports_mean\",\"health_mean\",\"imports_mean\",\"income_mean\",\"inflation_mean\",\"life_expec_mean\",\"total_fer_mean\",\"gdpp_mean\"]\ncountry_analysis_hc","7c40430c":"plt.figure(figsize = (18,18))\nplt.figure(1)\n\n# subplot 1\nplt.subplot(3, 3, 1)\nplt.title(\"child_mort_mean\")\nsns.barplot(country_analysis_hc.cluster_id, country_analysis_hc.child_mort_mean)\n\n# subplot 2 \nplt.subplot(3, 3, 2)\nplt.title(\"income_mean\")\nsns.barplot(country_analysis_hc.cluster_id, country_analysis_hc.income_mean)\n\n# subplot 3\n#plt.figure(2)\nplt.subplot(3, 3, 3)\nplt.title(\"gdpp_mean\")\nsns.barplot(country_analysis_hc.cluster_id, country_analysis_hc.income_mean)\n\nplt.show()","f6df6d47":"country_hc.head()","e61a6b64":"## so that retrieving Poor countries which need financial aid can be identified from cluster 0\ncluster_kmean = country_hc[country_hc['cluster_labels']==0]\ncluster_kmean.sort_values(['gdpp','income','child_mort','health','inflation','life_expec','total_fer','imports','exports'], \n                      ascending=[True,True,False,True,False,True,False,False,True]).head(10)","c4b677fe":"* Start off with the necessary data inspection and EDA tasks suitable for this dataset - data cleaning, univariate analysis, bivariate analysis etc.\n\n* Outlier Analysis: You must perform the Outlier Analysis on the dataset. However, you do have the flexibility of not removing the outliers if it suits the business needs or a lot of countries are getting removed. Hence, all you need to do is find the outliers in the dataset, and then choose whether to keep them or remove them depending on the results you get.\n\n* Try both K-means and Hierarchical clustering(both single and complete linkage) on this dataset to create the clusters.\n\n* Analyse the clusters and identify the ones which are in dire need of aid. You can analyse the clusters by comparing how these three variables - [gdpp, child_mort and income] vary for each cluster of countries to recognise and differentiate the clusters of developed countries from the clusters of under-developed countries.\n\n* Also, you need to perform visualisations on the clusters that have been formed.  You can do this by choosing any two of the three variables mentioned above on the X-Y axes and plotting a scatter plot of all the countries and differentiating the clusters. Make sure you create visualisations for all the three pairs. You can also choose other types of plots like boxplots, etc. \n\n* Both K-means and Hierarchical may give different results because of previous analysis (whether you chose to keep or remove the outliers, how many clusters you chose,  etc.) Hence, there might be some subjectivity in the final number of countries that you think should be reported back to the CEO since they depend upon the preceding analysis as well. Here, make sure that you report back at least 5 countries which are in direst need of aid from the analysis work that you perform.","4fc49d72":"No unique value","45ace000":"### Data Cleaning","97be5938":"No duplicate values","02a1adbb":"### Silhouette Analysis\n\n$$\\text{silhouette score}=\\frac{p-q}{max(p,q)}$$\n\n$p$ is the mean distance to the points in the nearest cluster that the data point is not a part of\n\n$q$ is the mean intra-cluster distance to all the points in its own cluster.\n\n* The value of the silhouette score range lies between -1 to 1. \n\n* A score closer to 1 indicates that the data point is very similar to other data points in the cluster, \n\n* A score closer to -1 indicates that the data point is not similar to the data points in its cluster.","75458a44":"### Data Loading","35b2ca7d":"- Exports are highly correlated with Imports\n- Gdpp is highly correlated with health\n- Child mortality rate is negatively correlated with Life Expectancy","8c07976f":"## Import Python Libraries","a1e6d82b":"Categorise the countries using some socio-economic and health factors that determine the overall development of the country. Then you need to suggest the countries which the CEO needs to focus on the most.  The datasets containing those socio-economic factors and the corresponding data dictionary are provided below.","5929d491":"## Data Dictionary\n\n\n* country : Name of the country\n* child_mort : Death of children under 5 years of age per 1000 live births\n* exports : Exports of goods and services per capita. Given as %age of the GDP per capita\n* health : Total health spending per capita. Given as %age of GDP per capita\n* imports : Imports of goods and services per capita. Given as %age of the GDP per capita\n* income : Net income per person\n* inflation : The measurement of the annual growth rate of the Total GDP\n* life_expec : The average number of years a new born child would live if the current mortality patterns are to remain the same\n* total_fer : The number of children that would be born to each woman if the current age-fertility rates remain the same\n* gdpp : The GDP per capita. Calculated as the Total GDP divided by the total population","b680c455":"HELP International is an international humanitarian NGO that is committed to fighting poverty and providing the people of backward countries with basic amenities and relief during the time of disasters and natural calamities. It runs a lot of operational projects from time to time along with advocacy drives to raise awareness as well as for funding purposes.\n\n \n\nAfter the recent funding programmes, they have been able to raise around $ 10 million. Now the CEO of the NGO needs to decide how to use this money strategically and effectively. The significant issues that come while making this decision are mostly related to choosing the countries that are in the direst need of aid.","bd33ab4a":"## Problem Statement","9a82a009":"As Health , Imports and Exports are % wrt to GDP per capita , as percentage wise will not give ample results we should convert them into values","8d093744":"- As we can see that some of poor countries which having low net income has higher inflation rate which raises the cost of living results in uncertainity of life.\n- As nigeria inflation is very high which indicates the higher difficulty for survival","ea4c8f58":"### Data Inspection","06ef2a74":"### Multivariate Analysis","aa9e3faa":"## K-Mean Clustering","884ed0f6":"### Top 10 Countries which are in need of  aid  are:\n1. Liberia\n2. Burundi\n3. Congo,Dem.Rep\n4. Niger\n5. Sierra Leone\n6. Madagascar\n7. Mozambique\n8. Central African Republic\n9. Malawi\n10. Eritrea","100d15de":"- We can see that these are Top 10 poor countries having least net income per person\n- There are some countries like Congo, Dem.republic , Niger , Sierra Leone having Highest child mortality rate and least netincome per person. These states that they cant afford for medical aid","01973440":"### Bivariate Analysis","384370bf":"### Cluster Profiling","d23c5816":"Qatar Having Highest Net income per person","4e56c9a5":"### Top 10 Countries which are in need of  aid  are:\n1. Liberia\n2. Burundi\n3. Congo,Dem.Rep\n4. Niger\n5. Sierra Leone\n6. Madagascar\n7. Mozambique\n8. Central African Republic\n9. Malawi\n10. Eritrea","15a739a0":"We can see that optimal clusters is 3","e26069ee":"It is difficult to identify from the single linkage","d157a3ec":"To check the Clustering tendency, we use Hopkins Statistic Value \nIf value is above 0.5 then it is ideal for clustering & value below 0.5 is not ideal","50943885":"There is no spelling mistake.\n\n\n","b73b604e":"## Objective","f33d4187":"From these we can observe that outliers are present\n- Child mortality has outliers at higher side we cant ignore the outliers . if we remove the outliers we end up loosing some countries having actual aid\n- Life_expec has outliers at lower side we cant ignore the outliers\n- Inflation has outliers at higher side we cant ignore the outliers\n\nSo we should leave the outliers for Child Mortality, Life_Expectation and inflation\nRemaining we can cap the outliers","7279cdba":"We can notice that Haiti Stands First having highest Child Mortality Rate","4322a37c":"#### Scaling ","a17bc308":"## Clustering","c628128a":"Looking at the graph we are certain that cluster 1 is our cluster of concern. Because:\n\n1. It has highest child mortality\n2. Lowest income\n3. Lowest gdpp","d81f34f4":"## Hierachical Clustering","45b42afd":"### Cluster Profiling","640df944":"Haiti is life expectancy is very very less as higher child mortality rate as higher deaths of children occured due to poor health conditions , need more medical aid for this country","faea3e26":"### Checking Outliers","f08584c7":"No NULL values are observed.","91618279":"None of the columns have inconsistent datatype, hence no conversion is required.","fefe8bd8":"Cutting the Clusters vertically such that n_cluster = 3","14f561d7":"Looking at the graph we are certain that Cluster 0 is our cluster of concern. Because:\n\n1. It has highest child mortality\n2. Lowest income\n3. Lowest gdpp","393b397d":"# HELP International","f7649a06":"## Data Preparation","46da168f":"The above score it can be said that it is good for clustering","97f25711":"## Exploratory Data Analytics","1278e301":"#  Final Result\n\nWe got same countries by both K-means and Hierarchical Clustering: \nTherefore following top 5 countries which are in direst need of aid by considering socio\u2013economic factor into consideration:\n\n1. Liberia\n2. Burundi\n3. Congo,Dem.Rep\n4. Niger\n5. Sierra Leone\n"}}