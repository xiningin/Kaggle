{"cell_type":{"69d02f8d":"code","596ed72d":"code","fff432b1":"code","155ecb42":"code","c55ea50e":"code","66727775":"code","a46f3da9":"code","a9fa602d":"code","5346c9de":"code","c0296b4b":"code","cde9a1c6":"code","b8693666":"code","89e36ade":"code","3b35744b":"code","c3c2864b":"markdown","5b4a9b53":"markdown","c1710ed2":"markdown","21bb5c5c":"markdown","1f13d9f6":"markdown","58b717f8":"markdown","19bb209f":"markdown","a85ec980":"markdown","39718db4":"markdown"},"source":{"69d02f8d":"!pip install -q pycaret","596ed72d":"from tqdm.notebook import tqdm\nimport pandas as pd\nimport numpy as np\nimport random\nimport os\nimport gc\n\nfrom pycaret.regression import setup, compare_models, tune_model, blend_models, finalize_model, predict_model, plot_model\n\nimport statsmodels.api as sm\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nimport warnings\nwarnings.simplefilter('ignore')","fff432b1":"CFG = {\n    'carbon_monoxide': {\n        'target': 'target_carbon_monoxide',\n        'seed': 2021,\n        'n_select': 2,\n        'fold': 3,\n        'fold_strategy': 'timeseries',\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',\n    },\n    'benzene': {\n        'target': 'target_benzene',\n        'seed': 2021,\n        'n_select': 2,\n        'fold': 3,\n        'fold_strategy': 'timeseries',\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',        \n    },\n    'nitrogen_oxides': {\n        'target': 'target_nitrogen_oxides',\n        'seed': 2021,\n        'n_select': 2,\n        'fold': 2,\n        'fold_strategy': 'timeseries',\n        'tuning': False,\n        'normalize': True,\n        'optimize': 'RMSE',        \n    },\n} ","155ecb42":"def seed_everything(seed=2021):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything()","c55ea50e":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\", index_col=\"date_time\", parse_dates=True)\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\", index_col=\"date_time\", parse_dates=True)\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\", index_col=\"date_time\", parse_dates=True)\n\ntarget = [col for col in train.columns if 'target_' in col]\ntrain[target] = np.log1p(train[target])\n\npseudo_label = submission.copy()\n\nsub18549 = pd.read_csv(\"..\/input\/tps07-18549\/submission_.csv\", index_col=\"date_time\", parse_dates=True)\n\npseudo_label[CFG['carbon_monoxide']['target']] = sub18549[CFG['carbon_monoxide']['target']]\npseudo_label[CFG['benzene']['target']] = sub18549[CFG['benzene']['target']]\npseudo_label[CFG['nitrogen_oxides']['target']] = sub18549[CFG['nitrogen_oxides']['target']]\ntest_carbon_monoxide = pd.concat([test, pseudo_label], axis=1)\ntest_carbon_monoxide[target] = np.log1p(test_carbon_monoxide[target])\n\npseudo_label[CFG['carbon_monoxide']['target']] = sub18549[CFG['carbon_monoxide']['target']]\npseudo_label[CFG['benzene']['target']] = sub18549[CFG['benzene']['target']]\npseudo_label[CFG['nitrogen_oxides']['target']] = sub18549[CFG['nitrogen_oxides']['target']]\ntest_benzene = pd.concat([test, pseudo_label], axis=1)\ntest_benzene[target] = np.log1p(test_benzene[target])\n\npseudo_label[CFG['carbon_monoxide']['target']] = sub18549[CFG['carbon_monoxide']['target']]\npseudo_label[CFG['benzene']['target']] = sub18549[CFG['benzene']['target']]\npseudo_label[CFG['nitrogen_oxides']['target']] = sub18549[CFG['nitrogen_oxides']['target']]\ntest_nitrogen_oxides = pd.concat([test, pseudo_label], axis=1)\ntest_nitrogen_oxides[target] = np.log1p(test_nitrogen_oxides[target])","66727775":"def make_features(df, params):\n    \"\"\"\n    Adds new features to a given dataset\n    \"\"\"\n    df['year'] = df.index.year\n    df['month'] = df.index.month\n    df['week'] = df.index.week\n    df['day'] = df.index.day\n    df['dayofweek'] = df.index.dayofweek\n    df['time'] = df.index.date - df.index.date.min()\n    df['hour'] = df.index.hour\n    df['time'] = df['time'].apply(lambda x : x.days)\n\n    df['working_hours'] =  df['hour'].isin(np.arange(8, 21, 1)).astype('int')\n    df['maximum_hours'] =  df['hour'].isin([8, 9, 17, 18, 19, 20]).astype('int')\n    df['is_weekend'] = (df.index.dayofweek >= 5).astype('int')\n\n    df['SMC'] = (df['absolute_humidity'] * 100) \/ df['relative_humidity']\n    \n    df['sensor_6'] = (df['sensor_2'] - df['sensor_5']) \/ df['sensor_5']\n    df['sensor_7'] = (df['sensor_3'] - df['sensor_4']) \/ df['sensor_4']\n\n    for periods in params[0]:\n        df[f'dt-{periods}'] = df['deg_C'] - df['deg_C'].shift(periods=periods, fill_value=0)\n\n    for periods in params[1]:\n        df[f'abshum-{periods}'] = df['absolute_humidity'] - df['absolute_humidity'].shift(periods=periods, fill_value=0)\n        df[f'relhum-{periods}'] = df['relative_humidity'] - df['relative_humidity'].shift(periods=periods, fill_value=0)\n        \n    for periods in params[2]:\n        df[f's1-{periods}'] = df['sensor_1'] - df['sensor_1'].shift(periods=periods, fill_value=0)\n        df[f's2-{periods}'] = df['sensor_2'] - df['sensor_2'].shift(periods=periods, fill_value=0)\n        df[f's3-{periods}'] = df['sensor_3'] - df['sensor_3'].shift(periods=periods, fill_value=0)\n        df[f's4-{periods}'] = df['sensor_4'] - df['sensor_4'].shift(periods=periods, fill_value=0)\n        df[f's5-{periods}'] = df['sensor_5'] - df['sensor_5'].shift(periods=periods, fill_value=0)\n        df[f's6-{periods}'] = df['sensor_6'] - df['sensor_6'].shift(periods=periods, fill_value=0)\n        df[f's7-{periods}'] = df['sensor_7'] - df['sensor_7'].shift(periods=periods, fill_value=0)\n            \n    return df","a46f3da9":"def pycaret_model(train, test, config):\n    print('Setup Your Data....')\n    setup(\n        data=train,\n        target=config['target'],\n        numeric_imputation='mean',\n        session_id=config['seed'],\n        normalize = config['normalize'],\n        silent= True,\n        fold_strategy=config['fold_strategy'],\n    )\n\n    print(f\"Comparing Models....\")\n    best = compare_models(sort=config['optimize'], n_select=config['n_select'], fold=config['fold'], exclude=['xgboost'])\n\n    if config['tuning']:\n        print(f\"Tuning Models....\")\n        best_tuned = [tune_model(model) for model in best]\n\n        print(f\"Blending Models....\")\n        blended = blend_models(estimator_list=best+best_tuned, fold=config['fold'], optimize=config['optimize'])\n    else:\n        print(f\"Blending Models....\")\n        blended = blend_models(estimator_list=best, fold=config['fold'], optimize=config['optimize'])\n        \n    pred_holdout = predict_model(blended)\n\n    print(f\"Finallizing Models....\")\n    final_model = finalize_model(blended)\n\n    print('Done...!!!')\n    pred = predict_model(final_model, test)\n    re = pred['Label']\n\n    return re, final_model","a9fa602d":"# 'target_carbon_monoxide'\nX = train[train.index.month>8].copy()\n\nparams = [[3, 6], [3, 6], [1]]\nall_df = make_features(pd.concat([X, test_carbon_monoxide]), params)\n\nX_train = all_df.copy()\nX_test = all_df[len(X):].copy()\n\npred_CO, model_CO = pycaret_model(X_train, X_test, CFG['carbon_monoxide'])\nsubmission[CFG['carbon_monoxide']['target']] = np.expm1(pred_CO)","5346c9de":"plot_model(model_CO, plot='error')","c0296b4b":"# 'target_benzene'\nX = train[train.index.month>8].copy()\n\nparams = [[3, 6], [3, 6], [1]]\nall_df = make_features(pd.concat([X, test_benzene]), params)\n\nX_train = all_df.copy()\nX_test = all_df[len(X):].copy()\n\npred_benzene, model_benzene = pycaret_model(X_train, X_test, CFG['benzene'])\nsubmission[CFG['benzene']['target']] = np.expm1(pred_benzene)","cde9a1c6":"plot_model(model_benzene, plot='error')","b8693666":"# 'target_nitrogen_oxides'\nX = train[train.index.month>8].copy()\n\nparams = [[3, 6], [3, 6], [1]]\nall_df = make_features(pd.concat([X, test_nitrogen_oxides]), params)\n\nX_train = all_df.copy()\nX_test = all_df[len(X):].copy()\n\npred_NOx, model_NOx = pycaret_model(X_train, X_test, CFG['nitrogen_oxides'])\nsubmission[CFG['nitrogen_oxides']['target']] = np.expm1(pred_NOx)","89e36ade":"plot_model(model_NOx, plot='error')","3b35744b":"submission.to_csv('submission.csv')\nsubmission","c3c2864b":"# PyCaret\n---","5b4a9b53":"## Thanks to @junhyeok99 https:\/\/www.kaggle.com\/junhyeok99\/automl-pycaret","c1710ed2":"# Submission\n---","21bb5c5c":"# Feature engineering\n---","1f13d9f6":"# Libraries\n---","58b717f8":"## for Nitrogen Oxides","19bb209f":"## for Carbon Monoxide","a85ec980":"# Datasets\n---","39718db4":"## for Benzene"}}