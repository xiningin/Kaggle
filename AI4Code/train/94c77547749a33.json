{"cell_type":{"7169beb9":"code","6d5efe5f":"code","cb93a652":"code","e7c61ea4":"code","54dff930":"code","36a1e860":"code","c4598a5b":"code","2cb0e994":"code","6f5a7dc7":"code","b9209155":"code","e828c13c":"code","152bb15b":"code","a307a13f":"code","c4a73139":"code","25a48171":"code","86ac224a":"code","46479f0b":"code","fa14fa5e":"code","3460362c":"code","d1e1e424":"code","01ccca18":"code","3ab1ca12":"code","082a6775":"code","4aad173e":"code","ef2048a3":"code","f326bcc5":"code","351e68ac":"code","a1e58c3e":"code","369f6088":"code","5711c213":"code","f7987496":"code","53446a07":"code","65315030":"code","4503b5f6":"code","0355e4fd":"code","60f6cfdc":"code","644e2d76":"code","c1c0b77b":"code","e268ee09":"code","f71d587a":"code","e01e2f05":"code","0fff207d":"code","d968ec60":"code","b2420ae4":"code","f998d4ea":"code","4efcdf73":"code","b8d6fe9a":"code","407a2a8c":"code","ec63e72b":"code","a81ba52f":"code","f5b10079":"code","0833e9fe":"code","7c33c9e8":"code","e4720f85":"code","0f9aba58":"code","683b75e8":"code","35766bca":"code","f7bbb73f":"code","15586a6c":"code","31223c8d":"markdown","8fd18b1e":"markdown","ee4a3e28":"markdown","8e81cb57":"markdown","a6a0fc74":"markdown","5ea1923a":"markdown","2e99bbb7":"markdown","eb99d7b3":"markdown","0ead9f8b":"markdown","4332a7cd":"markdown","a021aabd":"markdown","9fe6d711":"markdown","7d36b482":"markdown","8a336bb6":"markdown","add56168":"markdown","dc98c709":"markdown","faaf8eec":"markdown","96f54a29":"markdown","38ee9081":"markdown","55b1c360":"markdown","cad3f415":"markdown","601c0b99":"markdown","045ac005":"markdown","9daa0d74":"markdown","b3893ed1":"markdown"},"source":{"7169beb9":"import warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nwarnings.filterwarnings(\"ignore\")","6d5efe5f":"train_data_set = pd.read_csv(\"..\/input\/train.csv\")","cb93a652":"train_data_set.head()","e7c61ea4":"# Check number of rows and columns.\ntrain_data_set.shape","54dff930":"# df.describe() gives statistical information of numerical variables in the data.\ntrain_data_set.describe()","36a1e860":"train_data_set.info()","c4598a5b":"train_data_set[\"Age\"].hist(alpha=0.9, grid=False, color='blue')","2cb0e994":"# Fill Missing Values for Age\ntrain_data_set[\"Age\"].fillna(train_data_set[\"Age\"].median(), inplace=True)","6f5a7dc7":"train_data_set[\"Embarked\"].value_counts()","b9209155":"# Fill Missing Values for Embarked\ntrain_data_set[\"Embarked\"].fillna(\"S\", inplace=True)","e828c13c":"# Fill Missing Values for Cabin\ntrain_data_set[\"Cabin\"] = train_data_set[\"Cabin\"].apply(lambda x: str(x)[0])\ntrain_data_set.groupby([\"Cabin\", \"Pclass\"])[\"Pclass\"].count()","152bb15b":"# Replace NaN with 0, and other Characters with numeric value\ntrain_data_set[\"Cabin\"] = train_data_set[\"Cabin\"].replace(\"n\", 0)\ntrain_data_set[\"Cabin\"] = train_data_set[\"Cabin\"].replace([\"A\", \"B\", \"C\", \"D\", \"E\", \"T\"], 1)\ntrain_data_set[\"Cabin\"] = train_data_set[\"Cabin\"].replace(\"F\", 2)\ntrain_data_set[\"Cabin\"] = train_data_set[\"Cabin\"].replace(\"G\", 3)","a307a13f":"# Get total number of male and females.\ntotal_survivors = train_data_set[train_data_set['Survived'] == 1].count()[1]\ntotal_non_survivors = train_data_set[train_data_set['Survived'] == 0].count()[1]\n\n# Get total number of male and female survivors.\nmale_survivors = train_data_set['Survived'][train_data_set['Sex'] == 'male'].value_counts()[1]\nfemale_survivors = train_data_set['Survived'][train_data_set['Sex'] == 'female'].value_counts()[1]","c4a73139":"total = [total_survivors, total_non_survivors]\nsurvivors = [male_survivors, female_survivors]\n\n\ntotal_colors = ['#B2FF66', '#FF3333'] \nsurvive_colors = ['#66b3ff', '#FFB6C1']\n\nplt.figure(figsize = (16, 10))\nexplode = (0.05,0.05)\n\nax1 = plt.subplot2grid((2,2), (0,0))\nplt.pie(total, labels = [\"Survived\", \"Not Survived\"], colors = total_colors, explode = explode, autopct = '%1.1f%%', startangle = 90)\nplt.title(\"Survivors vs Non Survivors\")\nplt.axis('equal')\n\nax1 = plt.subplot2grid((2,2), (0,1))\nplt.pie(survivors, labels = [\"Male\", \"Female\"], colors = survive_colors, explode = explode, autopct = '%1.1f%%', startangle = 90)\nplt.title(\"Male vs Female Survivors\")\nplt.axis('equal')\n\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","25a48171":"sns.barplot(x=\"Embarked\", y=\"Survived\", data=train_data_set)\nplt.title(\"Survivors vs Embarked\")\nplt.show()","86ac224a":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data_set)\nplt.title(\"Survivors vs Pclass\")\nplt.show()","46479f0b":"sns.countplot(x=\"SibSp\", data=train_data_set)\nplt.show()","fa14fa5e":"sns.distplot(train_data_set[train_data_set['Survived'] == 1].Age.dropna(), bins=18, label = \"Survived\", kde =False)\nsns.distplot(train_data_set[train_data_set[\"Survived\"] == 0][\"Age\"].dropna(), bins = 30, label=\"Not Survived\", kde=False)\nplt.title(\"Survivors vs Age\")\nplt.legend()\nplt.show()","3460362c":"# copy the data frame for future use.\ncopy_train_data = train_data_set.copy()","d1e1e424":"# Create a new feature \"FamilySize\", by combining \"SibSP\" and \"Parch\"\n# Plus 1 is added as the passenger is also considered part of the family.\ntrain_data_set[\"FamilySize\"] = train_data_set[\"SibSp\"] + train_data_set[\"Parch\"] + 1","01ccca18":"# Convert Categorical Data to Numeric\ntrain_data_set[\"Sex\"] = train_data_set[\"Sex\"].map({\"male\": 1, \"female\": 0}).astype(int)\n# Convert to numeric data\ntrain_data_set[\"Embarked\"] = train_data_set[\"Embarked\"].map({\"S\": 1, \"C\": 2, \"Q\": 3})","3ab1ca12":"# Drop unwanted columns\ntrain_data_set.drop([\"PassengerId\", \"Name\", \"SibSp\", \"Parch\", \"Ticket\"], axis=1, inplace=True)","082a6775":"train_data_set.head()","4aad173e":"# Find the correlation between the variables.\nplt.figure(figsize=(12,10))\nsns.heatmap(train_data_set.corr(), linewidths=0.05, fmt= \".2f\", annot=True)\nplt.show()","ef2048a3":"X = train_data_set.drop(\"Survived\", axis=1)\nY = train_data_set[\"Survived\"]","f326bcc5":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)","351e68ac":"standard_scaler = StandardScaler()\n\nx_train = standard_scaler.fit_transform(x_train)\nx_test = standard_scaler.transform(x_test)","a1e58c3e":"# Random Forest Classifer Model\nrf_model = RandomForestClassifier(criterion=\"entropy\", max_depth=10, random_state=42)\nrf_model.fit(x_train, y_train)\nrf_pred = rf_model.predict(x_test)","369f6088":"rf_accuracy = accuracy_score(rf_pred, y_test)\nprint(\"Random Forest Accuracy: \", rf_accuracy)","5711c213":"print(classification_report(rf_pred, y_test))","f7987496":"rf_cm = confusion_matrix(rf_pred, y_test)","53446a07":"sns.heatmap(rf_cm, annot = True, fmt = \".0f\", cmap = \"YlGnBu\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Random Forest Validation Matrix\\n\\n\")\nplt.show()","65315030":"# Logistic Regression Model\nlr_model = LogisticRegression()\nlr_model.fit(x_train, y_train)\nlr_pred = lr_model.predict(x_test)","4503b5f6":"lr_accuracy = accuracy_score(lr_pred, y_test)\nprint(\"Logistic Regression Accuracy: \", lr_accuracy)","0355e4fd":"print(classification_report(lr_pred, y_test))","60f6cfdc":"lr_cm = confusion_matrix(lr_pred, y_test)","644e2d76":"sns.heatmap(lr_cm, annot = True, fmt = \".0f\", cmap = \"YlGnBu\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Logistic Regression Validation Matrix\\n\\n\")\nplt.show()","c1c0b77b":"# Decision Tree Classifier Model\ndt_model = DecisionTreeClassifier(criterion=\"entropy\", random_state=42)\ndt_model.fit(x_train, y_train)\ndt_pred = dt_model.predict(x_test)","e268ee09":"dt_accuracy = accuracy_score(dt_pred, y_test)\nprint(\"Decision Tree Accuracy: \", dt_accuracy)","f71d587a":"print(classification_report(dt_pred, y_test))","e01e2f05":"dt_cm = confusion_matrix(dt_pred, y_test)","0fff207d":"sns.heatmap(dt_cm, annot = True, fmt = \".0f\", cmap = \"YlGnBu\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Decision Tree Validation Matrix\\n\\n\")\nplt.show()","d968ec60":"# Support Vector Machine Model\nsvm_model = SVC()\nsvm_model.fit(x_train, y_train)\nsvm_pred = svm_model.predict(x_test)","b2420ae4":"svm_accuracy = accuracy_score(svm_pred, y_test)\nprint(\"SVM Accuracy: \", svm_accuracy)","f998d4ea":"print(classification_report(svm_pred, y_test))","4efcdf73":"svm_cm = confusion_matrix(svm_pred, y_test)","b8d6fe9a":"sns.heatmap(svm_cm, annot = True, fmt = \".0f\", cmap = \"YlGnBu\")\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"SVM Validation Matrix\\n\\n\")\nplt.show()","407a2a8c":"x = [\"Random Forest\", \"Logistic Regression\", \"Decision Tree\", \"SVM\"]\ny = [rf_accuracy, lr_accuracy, dt_accuracy, svm_accuracy]\nplt.bar(x=x, height=y)\nplt.title(\"Algorithm Accuracy Comparison\")\nplt.xticks(rotation=15)\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Accuracy\")\nplt.show()","ec63e72b":"copy_data_set = train_data_set.copy()\ncopy_data_set.drop(\"Survived\", axis=1, inplace=True)\nplot_df = pd.DataFrame(columns=[\"Features\", \"Importance\"])\nplot_df[\"Features\"] = copy_data_set.columns.values\nplot_df[\"Importance\"] = rf_model.feature_importances_\n\nsns.barplot(x=\"Importance\", y=\"Features\", data=plot_df)","a81ba52f":"test_data_set = pd.read_csv(\"..\/input\/test.csv\")","f5b10079":"test_data_set.info()","0833e9fe":"test_data_set[\"Age\"].fillna(test_data_set[\"Age\"].median(), inplace=True)\ntest_data_set[\"Fare\"].fillna(test_data_set[\"Fare\"].mean(), inplace=True)\ntest_data_set[\"Cabin\"] = test_data_set[\"Cabin\"].apply(lambda x: str(x)[0])\ntest_data_set.groupby([\"Cabin\", \"Pclass\"])[\"Pclass\"].count()\ntest_data_set[\"Cabin\"] = test_data_set[\"Cabin\"].replace(\"n\", 0)\ntest_data_set[\"Cabin\"] = test_data_set[\"Cabin\"].replace([\"A\", \"B\", \"C\", \"D\", \"E\", \"T\"], 1)\ntest_data_set[\"Cabin\"] = test_data_set[\"Cabin\"].replace(\"F\", 2)\ntest_data_set[\"Cabin\"] = test_data_set[\"Cabin\"].replace(\"G\", 3)","7c33c9e8":"submission_df = pd.DataFrame(columns=[\"PassengerId\", \"Survived\"])\nsubmission_df[\"PassengerId\"] = test_data_set[\"PassengerId\"]","e4720f85":"test_data_set[\"FamilySize\"] = test_data_set[\"SibSp\"] + test_data_set[\"Parch\"] + 1\ntest_data_set[\"Sex\"] = test_data_set[\"Sex\"].map({\"male\": 1, \"female\": 0}).astype(int)\ntest_data_set.drop([\"PassengerId\", \"Name\", \"SibSp\", \"Parch\", \"Ticket\"], axis=1, inplace=True)\ntest_data_set[\"Embarked\"] = test_data_set[\"Embarked\"].map({\"S\": 1, \"C\": 2, \"Q\": 3})","0f9aba58":"scaled_test_data = standard_scaler.fit_transform(test_data_set)","683b75e8":"rf_test_pred = rf_model.predict(scaled_test_data)","35766bca":"submission_df[\"Survived\"] = rf_test_pred","f7bbb73f":"submission_df.head()","15586a6c":"submission_df.to_csv(\"my_submission.csv\", index=False)","31223c8d":"###### Passengers who embarked from Cherbourg has high probability of survival.","8fd18b1e":"### 5. Feature Engineering","ee4a3e28":"##### Decision Tree Classifier","8e81cb57":"##### Logistic Regression","a6a0fc74":"#### 4.2 Compare Survivors From The Place They Embarked","5ea1923a":"### 3. Preview Data and Fill Missing Values","2e99bbb7":"### 6. Model Fitting","eb99d7b3":"### 7. Submission","0ead9f8b":"###### Plot Feature Importance of RandomForestClassifier","4332a7cd":"###### The age feature is right skewed,will use median to fill the missing values","a021aabd":"##### Random Forest Classifier","9fe6d711":"###### Most of the passengers were travelling alone.","7d36b482":"### 4. EDA","8a336bb6":"#### Passengers from 1st class has more survivals, maybe because of high fare.","add56168":"### 1. Import Required Libraries","dc98c709":"#### 4.5 Compare Survivors and Age","faaf8eec":"###### Plot Accuracy of Models","96f54a29":"### 2. Load Dataset","38ee9081":"#### 4.3 Compare Survivors Based On Pclass","55b1c360":"##### Support Vector Machine","cad3f415":"#### 4.4 Check SibSp Count","601c0b99":"#### 4.1 Compare total survivors and male female survivors. ","045ac005":"###### Fare, Cabin, Embarked, FamilySize has positive correlation with Survived","9daa0d74":"###### Column \"Age\", \"Cabin\", \"Embarked\" has missing values","b3893ed1":"###### Not many survived the accident and Females have high probability of survival than Men."}}