{"cell_type":{"4606c79c":"code","eed9d9f3":"code","d17e147f":"code","56c33e11":"code","dd26a966":"code","bbfc5e6d":"code","64356c8c":"code","cd25da9e":"code","3d59edd3":"code","5d384517":"code","96acfead":"code","443fe884":"code","3c25fb5f":"code","de466387":"code","c93490bd":"code","0f3cafc3":"code","827eba77":"code","ef6552ed":"code","76d44c47":"code","04f3439c":"code","7460cce4":"code","2a0cbffb":"code","17c075cd":"code","86287cf2":"code","491d2df7":"code","67f6dc8c":"code","bfa842df":"code","9decb92b":"code","d6260aec":"code","c0b256da":"code","ea29dfb6":"code","0ddc2f39":"code","a7b4e3ac":"code","99041412":"code","be210012":"code","5b448810":"code","2ced65b3":"code","52938761":"markdown","10b3f560":"markdown","9589ad30":"markdown","e0eb127f":"markdown","226036b8":"markdown","961db256":"markdown","08cc7fd9":"markdown","cfeb4e2b":"markdown","647bd8c3":"markdown","1fb261d1":"markdown","1184174a":"markdown","e7bd57d2":"markdown","918a1778":"markdown","d0394a46":"markdown","6130a170":"markdown"},"source":{"4606c79c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eed9d9f3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","d17e147f":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\n","56c33e11":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","dd26a966":"football\n","bbfc5e6d":"edu = pd.read_csv('\/kaggle\/input\/littlecatgithub12102020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","64356c8c":"edu.head()","cd25da9e":"edu.head(3)","3d59edd3":"edu.tail()","5d384517":"edu.describe()","96acfead":"edu['Value']","443fe884":"edu[10:14]","3c25fb5f":"edu.iloc[90:94][['TIME','GEO']]","de466387":"edu[\"GEO\"]","c93490bd":"edu[edu['Value'] > 6.5].tail()","0f3cafc3":"edu.max(axis = 0)","827eba77":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","ef6552ed":"s = edu[\"Value\"]\/100\ns.head()","76d44c47":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","04f3439c":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","7460cce4":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","2a0cbffb":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","17c075cd":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu.tail()","86287cf2":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","491d2df7":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","67f6dc8c":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","bfa842df":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","9decb92b":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","d6260aec":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","c0b256da":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","ea29dfb6":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","0ddc2f39":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","a7b4e3ac":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","99041412":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","be210012":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = True, method = 'dense').sort_values().head()","5b448810":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","2ced65b3":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","52938761":"SORTING DATA","10b3f560":"6.9 RANKING DATA","9589ad30":"**5. What does this index return? What does the first index represent? And the second one?** first index- rows and second-columns","e0eb127f":"Tools useful to do data exploration","226036b8":"REARRANGING DATA","961db256":"6.7 GROUPING DATA","08cc7fd9":"384 rows \u00d7 3 columns","cfeb4e2b":"3. What does the method tail()return? The last 5 rows","647bd8c3":"**2.What happens if we give a number as argument to the method head()?** head(x) --Will show the first x numer of columns. Example down with head(3)","1fb261d1":"7. What do you observe regarding the parameter ascending=False?","1184174a":"d to the power of 2","e7bd57d2":"**4.Which measures does the result show? It seems that it shows some default values, can you guess which ones?**  min, max, count, mean.","918a1778":"**6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? ** shows values greater to 6.5 in the last 5 lines","d0394a46":"An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this a series or aDataFrame? A data frame-- properties acess to columns, index in rows, in series we cannot do this asociated operations.","6130a170":"**1.Which is the size of the edu DataFrame (rows x columns)?** \n"}}