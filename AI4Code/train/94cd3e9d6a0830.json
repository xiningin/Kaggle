{"cell_type":{"38138608":"code","0ffe7fa8":"code","ebe3bdb8":"code","a8864924":"code","07961b8d":"code","599eccec":"code","96924086":"code","05018bec":"code","e3c1f3cb":"code","249e9aad":"code","0addac0f":"code","8e7b723d":"code","8e033ae0":"code","a22e99d3":"code","1224c29d":"code","7282f3d6":"code","51dd47b7":"code","dd4235fd":"code","45c933e0":"code","8c8e13ff":"code","5aa71aa2":"code","5052b56d":"code","9c880f89":"code","b999797e":"code","9530dc9f":"code","f11ca7a7":"code","343b1db5":"code","432dbc4f":"code","1d341763":"code","066ea2a3":"code","3399a550":"code","779d8158":"code","0764ca76":"code","8a8c9dcd":"code","d4883492":"code","d1aca11b":"code","923e2591":"code","132b2543":"code","b6e86041":"code","2041299e":"code","2849eb82":"code","d9a19d76":"code","fd8bee2e":"code","466cebf6":"code","f80f5d70":"code","22071a03":"code","489a53fc":"code","1f69ec2c":"code","1c007893":"code","5ea63eb1":"code","e65fef7d":"code","ade30f05":"code","58a40f5c":"code","8be40acc":"code","f4fe67d8":"code","75129167":"code","29575354":"code","6b199501":"code","84a2a229":"code","28ba5e62":"code","bfa1e428":"code","1665fb67":"code","405f1b3d":"code","a44e5687":"code","a7979ebe":"code","f2bda96f":"code","af48e820":"code","18cae371":"code","a73353b2":"code","f206e081":"code","4a2e776b":"code","e2f5336a":"code","012caa0f":"code","d4d14288":"code","7615937e":"code","93ee015b":"code","11e8f037":"code","25f19c34":"code","da9628ca":"code","f1dcbacf":"code","4c069ad6":"code","96b355ba":"code","f7b2ece9":"code","1a9597a1":"code","a5bc1352":"code","2c6eb3fa":"markdown","5be813f7":"markdown","cbe2189b":"markdown","f27d5211":"markdown","17ea2581":"markdown","fa223f29":"markdown","35f89f28":"markdown","fe4e8a01":"markdown","7829338a":"markdown","3c1869a5":"markdown","acec795a":"markdown","ec81147e":"markdown","ccc81acf":"markdown","a0a50fcf":"markdown","6c189af1":"markdown","abebf25e":"markdown","2eca54a0":"markdown","7db55b63":"markdown","ab443145":"markdown","3f99de5d":"markdown","5c756d28":"markdown","7a495804":"markdown","421f804e":"markdown","44425511":"markdown","c515725f":"markdown","ba6538ef":"markdown","0f2a6147":"markdown","f4f125ef":"markdown","697013cc":"markdown","a4d3a366":"markdown","d7e7e6c7":"markdown","ca7e7865":"markdown"},"source":{"38138608":"import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, accuracy_score\n\nfrom imblearn.over_sampling import SMOTE\n\nimport tensorflow as tf","0ffe7fa8":"df = pd.read_csv('..\/input\/loan_final313.csv')","ebe3bdb8":"df.head()","a8864924":"df.info()","07961b8d":"plt.figure(figsize=(16,8))\nsns.heatmap(df.corr(),\n           cmap = 'coolwarm')","599eccec":"def defaulted(x):\n    if x == 'Good Loan':\n        return 0\n    else:\n        return 1","96924086":"df['default'] = df['loan_condition'].apply(lambda x: defaulted(x))","05018bec":"df.drop('id', axis=1, inplace=True)","e3c1f3cb":"df.drop('year', axis=1, inplace=True)","249e9aad":"df.drop('issue_d', axis=1, inplace=True)","0addac0f":"df.drop('final_d', axis=1, inplace=True)","8e7b723d":"scaler = MinMaxScaler()","8e033ae0":"df['emp_length_int'] = scaler.fit_transform(df['emp_length_int'].values.reshape(-1,1))","a22e99d3":"plt.figure(figsize=(12,6))\nsns.countplot(x='home_ownership',data=df, hue='default')","1224c29d":"df = pd.concat([df, pd.get_dummies(df['home_ownership'])],axis=1).drop(['home_ownership', 'home_ownership_cat'],axis=1)","7282f3d6":"df.drop(['OTHER', 'NONE', 'ANY'],axis=1,inplace=True)","51dd47b7":"df = pd.concat([df, pd.get_dummies(df['income_category'])],axis=1).drop(['income_category', 'income_cat'],axis=1)","dd4235fd":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df['annual_inc'])","45c933e0":"outliers = df[df['annual_inc'] > df['annual_inc'].quantile(0.99)].index","8c8e13ff":"df.loc[outliers,'annual_inc'] = df['annual_inc'].quantile(0.99)","5aa71aa2":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df['annual_inc'])","5052b56d":"scaler = MinMaxScaler()\ndf['annual_inc'] = scaler.fit_transform(df['annual_inc'].values.reshape(-1,1))","9c880f89":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df['loan_amount'])","b999797e":"scaler = MinMaxScaler()\ndf['loan_amount'] = scaler.fit_transform(df['loan_amount'].values.reshape(-1,1))","9530dc9f":"df['term'].unique()","f11ca7a7":"plt.figure(figsize=(12,6))\nsns.countplot(x='term',data=df, hue='default')","343b1db5":"df = pd.concat([df, pd.get_dummies(df['term_cat'],prefix='term')],axis=1).drop(['term', 'term_cat'],axis=1)","432dbc4f":"plt.figure(figsize=(12,6))\nsns.countplot(x='application_type_cat',data=df, hue='default')","1d341763":"df.drop(['application_type','application_type_cat'],axis=1,inplace=True)","066ea2a3":"df['purpose'].unique()","3399a550":"plt.figure(figsize=(12,6))\nsns.countplot(x='purpose',data=df, hue='default')","779d8158":"df = pd.concat([df, pd.get_dummies(df['purpose'])],axis=1).drop(['purpose', 'purpose_cat'],axis=1)","0764ca76":"df.drop(['car', 'small_business', 'other', 'wedding', 'home_improvement', 'major_purchase',\n       'medical', 'moving', 'vacation', 'house', 'renewable_energy',\n       'educational'],axis=1, inplace=True)","8a8c9dcd":"plt.figure(figsize=(12,6))\nsns.countplot(x='interest_payments',data=df, hue='default')","d4883492":"df = pd.concat([df, pd.get_dummies(df['interest_payments'],prefix='int')],axis=1).drop(['interest_payments', 'interest_payment_cat'],axis=1)","d1aca11b":"df.drop('int_High',axis=1,inplace=True)","923e2591":"df.drop(['loan_condition', 'loan_condition_cat'],axis=1,inplace=True)","132b2543":"plt.figure(figsize=(12,6))\nplt.hist(df[df['default']==0]['interest_rate'],color='orange',alpha=0.5,label='Good')\nplt.hist(df[df['default']==1]['interest_rate'],color='blue',alpha=0.5,label='Bad')\n\nplt.legend()","b6e86041":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df['interest_rate'])","2041299e":"outliers = df[df['interest_rate'] > df['interest_rate'].quantile(.99)].index","2849eb82":"df.loc[outliers,'interest_rate'] = df['interest_rate'].quantile(.99)","d9a19d76":"scaler = MinMaxScaler()\ndf['interest_rate'] = scaler.fit_transform(df['interest_rate'].values.reshape(-1,1))","fd8bee2e":"df.info()","466cebf6":"plt.figure(figsize=(12,6))\nsns.countplot(x='grade',data=df, hue='default')","f80f5d70":"df.drop(['grade', 'grade_cat'],axis=1,inplace=True)","22071a03":"plt.figure(figsize=(12,6))\nsns.boxplot(x=df['dti'])","489a53fc":"outliers = df[df['dti'] > df['dti'].quantile(.99)].index\ndf.loc[outliers,'dti'] = df['dti'].quantile(.99)","1f69ec2c":"scaler = MinMaxScaler()\ndf['dti'] = scaler.fit_transform(df['dti'].values.reshape(-1,1))","1c007893":"df.drop('total_pymnt', axis=1, inplace=True)","5ea63eb1":"df.drop('total_rec_prncp', axis=1, inplace=True)","e65fef7d":"df.drop('recoveries', axis=1, inplace=True)","ade30f05":"plt.figure(figsize=(12,6))\nplt.hist(df[df['default']==0]['installment'],color='orange',alpha=0.5,label='Good')\nplt.hist(df[df['default']==1]['installment'],color='blue',alpha=0.5,label='Bad')\n\nplt.legend()","58a40f5c":"df.drop('installment', axis=1, inplace=True)","8be40acc":"df.drop('region', axis=1, inplace=True)","f4fe67d8":"sum(df['default']) \/ len(df)","75129167":"X = df.drop(['default'],axis=1)\ny = df['default']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","29575354":"rf_base = RandomForestClassifier(n_estimators=100)\nada_base = AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),n_estimators=100)","6b199501":"rf_base.fit(X_train,y_train)\nada_base.fit(X_train,y_train)","84a2a229":"rf_base_pred = rf_base.predict(X_test)\nada_base_pred = ada_base.predict(X_test)","28ba5e62":"print(confusion_matrix(y_test, rf_base_pred))\nprint('\\n')\nprint(confusion_matrix(y_test, ada_base_pred))","bfa1e428":"print(accuracy_score(y_test,rf_base_pred))\nprint(accuracy_score(y_test,ada_base_pred))","1665fb67":"print(recall_score(y_test,rf_base_pred))\nprint(recall_score(y_test,ada_base_pred))","405f1b3d":"ratios = np.array([0.2,0.4,0.6,0.8,1.0])\nrf_acc_us = []\nada_acc_us = []\nrf_recall_us = []\nada_recall_us = []\ndefault_count = y_train.value_counts()[1]\nX_train.reset_index(drop=True, inplace=True)\ny_train.reset_index(drop=True, inplace=True)\nbad_indices = y_train[y_train==1].index","a44e5687":"for i in ratios:\n    majority_count = int(np.floor(default_count \/ i))\n    good_indices = np.random.choice(y_train[y_train==0].index,size=majority_count)\n    indices = np.concatenate((bad_indices,good_indices))\n    X_train_us = X_train.iloc[indices]\n    y_train_us = y_train.iloc[indices]\n    \n    rf_ = RandomForestClassifier(n_estimators=100)\n    ada_ = AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),n_estimators=100)\n    \n    rf_.fit(X_train_us,y_train_us)\n    ada_.fit(X_train_us,y_train_us)\n    \n    rf_pred = rf_.predict(X_test)\n    ada_pred = ada_.predict(X_test)\n    \n    rf_acc_us.append(accuracy_score(y_test,rf_pred))\n    ada_acc_us.append(accuracy_score(y_test,ada_pred))\n    \n    rf_recall_us.append(recall_score(y_test,rf_pred))\n    ada_recall_us.append(recall_score(y_test,ada_pred))\n    ","a7979ebe":"ada_acc_us","f2bda96f":"rf_acc_us","af48e820":"ada_recall_us","18cae371":"rf_recall_us","a73353b2":"plt.figure(figsize=(12,6))\nplt.plot(ratios,ada_acc_us,linestyle='-',marker='o',color='red',label='ada_acc')\nplt.plot(ratios,ada_recall_us,linestyle='-',marker='o',color='red',label='ada_rec',alpha=0.5)\nplt.plot(ratios,rf_acc_us,linestyle='-',marker='o',color='blue',label='rf_acc')\nplt.plot(ratios,rf_recall_us,linestyle='-',marker='o',color='blue',label='rf_rec', alpha=0.5)\n\nplt.legend()","f206e081":"ratios = np.array([0.2,0.4,0.6,0.8,1.0])\nrf_acc_os = []\nada_acc_os = []\nrf_recall_os = []\nada_recall_os = []\nX_train.reset_index(drop=True, inplace=True)\ny_train.reset_index(drop=True, inplace=True)","4a2e776b":"for j in ratios:\n    sm = SMOTE(random_state=101, ratio = j)\n    X_train_os, y_train_os = sm.fit_sample(X_train, y_train)\n    \n    X_train_os[:,5:] = np.round(X_train_os[:,5:])\n    \n    rf_ = RandomForestClassifier(n_estimators=100)\n    ada_ = AdaBoostClassifier(base_estimator=DecisionTreeClassifier(),n_estimators=100)\n    \n    rf_.fit(X_train_os,y_train_os)\n    ada_.fit(X_train_os,y_train_os)\n    \n    rf_pred = rf_.predict(X_test)\n    ada_pred = ada_.predict(X_test)\n    \n    rf_acc_os.append(accuracy_score(y_test,rf_pred))\n    ada_acc_os.append(accuracy_score(y_test,ada_pred))\n    \n    rf_recall_os.append(recall_score(y_test,rf_pred))\n    ada_recall_os.append(recall_score(y_test,ada_pred))","e2f5336a":"rf_acc_os","012caa0f":"ada_acc_os","d4d14288":"rf_recall_os","7615937e":"ada_recall_os","93ee015b":"plt.figure(figsize=(12,6))\nplt.plot(ratios,ada_acc_os,linestyle='-',marker='o',color='red',label='ada_acc')\nplt.plot(ratios,ada_recall_os,linestyle='-',marker='o',color='red',label='ada_rec',alpha=0.5)\nplt.plot(ratios,rf_acc_os,linestyle='-',marker='o',color='blue',label='rf_acc')\nplt.plot(ratios,rf_recall_os,linestyle='-',marker='o',color='blue',label='rf_rec', alpha=0.5)\n\nplt.legend()","11e8f037":"default_count = y_train.value_counts()[1]\nX_train.reset_index(drop=True, inplace=True)\ny_train.reset_index(drop=True, inplace=True)\nbad_indices = y_train[y_train==1].index\nmajority_count = int(np.floor(default_count \/ 0.6))\ngood_indices = np.random.choice(y_train[y_train==0].index,size=majority_count) \nindices = np.concatenate((bad_indices,good_indices))\nX_train_tf = X_train.iloc[indices]\ny_train_tf = y_train.iloc[indices]","25f19c34":"emp_length = tf.feature_column.numeric_column('emp_length_int')\nann_inc = tf.feature_column.numeric_column('annual_inc')\nloan_amt = tf.feature_column.numeric_column('loan_amount')\nint_rate = tf.feature_column.numeric_column('interest_rate')\ndti = tf.feature_column.numeric_column('dti')","da9628ca":"mortgage = tf.feature_column.numeric_column('MORTGAGE')\nown = tf.feature_column.numeric_column('OWN')\nrent = tf.feature_column.numeric_column('RENT')\nhigh = tf.feature_column.numeric_column('High')\nlow = tf.feature_column.numeric_column('Low')\nmedium = tf.feature_column.numeric_column('Medium')\nshort = tf.feature_column.numeric_column('term_1')\nlong = tf.feature_column.numeric_column('term_2')\ncredit = tf.feature_column.numeric_column('credit_card')\ndebt = tf.feature_column.numeric_column('debt_consolidation')\nlow_int = tf.feature_column.numeric_column('int_Low')","f1dcbacf":"feat_cols = [emp_length,ann_inc,loan_amt,int_rate,dti,mortgage,own,rent,high,low,medium,short,long,credit,debt,low_int]","4c069ad6":"input_func = tf.estimator.inputs.pandas_input_fn(X_train_tf,y_train_tf,\n                                                batch_size=10000,\n                                                num_epochs=1000,\n                                                shuffle=True)","96b355ba":"dnn_model = tf.estimator.DNNClassifier(hidden_units=[10,10,10,10,10],\n                                      feature_columns=feat_cols,\n                                      n_classes=2)","f7b2ece9":"dnn_model.train(input_fn=input_func,steps=5000)","1a9597a1":"eval_input_func = tf.estimator.inputs.pandas_input_fn(x=X_test,\n                                                     y=y_test,\n                                                     batch_size=10000,\n                                                     num_epochs=1,\n                                                     shuffle=False)","a5bc1352":"dnn_model.evaluate(eval_input_func)","2c6eb3fa":"## Train Test Split","5be813f7":"## Define Target Variables","cbe2189b":"#### region\n\n    Won't be included for prediction","f27d5211":"## Load & Initial look","17ea2581":"#### issue_d: Issue Date\n\n    Won't be used for prediction","fa223f29":"## Oversampling Models","35f89f28":"## Undersampling Models","fe4e8a01":"#### home_ownership: Home Owndership status\n    \n    One-hot encode","7829338a":"#### purpose: Reason for issuing loan\n\n    One-hot encode","3c1869a5":"#### emp_length_int: Employment length in years\n\n    Scale to 0 -> 1","acec795a":"## Baseline Model Performance","ec81147e":"#### recoveries\n\n    Won't be used for prediction","ccc81acf":"#### Categorical Default or not based on loan condition","a0a50fcf":"#### total_rec_prncp\n\n    Won't be used for prediction","6c189af1":"#### interest_payments: Low or High\n\n    One-hot encode","abebf25e":"#### grade: Loan grade\n\n    Won't be included for prediction","2eca54a0":"#### year: Year the loan was issued\n\n    Won't be used for prediction","7db55b63":"## Imports","ab443145":"## Can a neural net do better?","3f99de5d":"## Assess each variable individually","5c756d28":"#### installment\n\n    Won't be used for prediction","7a495804":"#### interest_rate\n\n    Scale 0 -> 1","421f804e":"#### loan_condition: Good or bad\n\n    Target variable\n    Has been converted to 'default', so drop","44425511":"#### income_category: Low, Medium, or High\n\n    One-hot encode","c515725f":"#### term: Length of the loan\n\n    One-hot encode","ba6538ef":"#### annual_inc\n\n    Check for outliers\n    Scale to 0 -> 1","0f2a6147":"#### id : Identification number for each individual\n\n    Won't be used for prediction","f4f125ef":"#### application_type: Individual or Joint\n\n    Won't be included for prediction","697013cc":"#### total_pymnt\n\n    Won't be used for prediction","a4d3a366":"#### loan_amount\n\n    Scale to 0 -> 1","d7e7e6c7":"#### final_d: Final Date\n\n    Won't be used for prediction","ca7e7865":"#### dti: Ratio of monthly debt payments to annual income\n\n    Scale to 0 -> 1"}}