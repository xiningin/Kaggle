{"cell_type":{"ba7db7d6":"code","30fe71e2":"code","776b8cb9":"code","e7c1d86e":"code","c965e764":"code","76799a35":"code","35522349":"code","56e4bf3c":"code","12fb7913":"code","cf9efb44":"code","5f111194":"code","8016c8f5":"code","4c59efae":"code","a9a70785":"code","f749fad0":"code","7dbb7aa6":"code","7ef870e4":"code","1d507ee5":"code","d3369a0f":"code","7f505973":"code","c3fc4a7b":"code","8a7c093d":"code","f8b26ee4":"code","0bae957c":"code","3c51b198":"code","d77166b8":"code","7c6cd924":"code","2b226ad8":"code","139a7f92":"code","5a6929af":"code","53365377":"code","42470f0e":"code","41638f7d":"code","0bf26d75":"code","4fb714e1":"code","fcdd6516":"code","fc937ee5":"code","358525b5":"code","0ce781ba":"code","85a909a0":"code","7ded7115":"code","421af0c7":"code","a7abd0a4":"code","19bc7fee":"code","da876134":"code","08ecb00a":"code","466161c6":"code","51b3441e":"code","a2fb9e1f":"code","098f8b1f":"markdown","288b5c83":"markdown","5121c30f":"markdown","762f29d7":"markdown"},"source":{"ba7db7d6":"## First run of BERT with pytorch,\n","30fe71e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","776b8cb9":"%pwd","e7c1d86e":"import torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm","c965e764":"df = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')","76799a35":"df_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ndf_test['target'] = 2\ndf_test.head()","35522349":"df.target.value_counts()","56e4bf3c":"from sklearn.model_selection import train_test_split","12fb7913":"X_train, X_val, y_train, y_val = train_test_split(df.id.values, \n                                                  df.target.values, \n                                                  test_size=0.15, \n                                                  random_state=17, \n                                                  stratify=df.target.values)","cf9efb44":"df['data_type'] = ['not_set']*df.shape[0]","5f111194":"df.head()","8016c8f5":"df.loc[df['id'].isin(X_train),'data_type']= 'train'\ndf.loc[df['id'].isin(X_val),'data_type']= 'val'","4c59efae":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","a9a70785":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', \n                                          do_lower_case=True)","f749fad0":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type=='train'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type=='val'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\nencoded_data_test = tokenizer.batch_encode_plus(\n    df_test.text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type=='train'].target.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type=='val'].target.values)\n\ninput_ids_test = encoded_data_test['input_ids']\nattention_masks_test = encoded_data_test['attention_mask']\nlabels_test = torch.tensor(df_test.target.values)\n","7dbb7aa6":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)\ndataset_test = TensorDataset(input_ids_test, attention_masks_test, labels_test)","7ef870e4":"print(len(dataset_train))\nprint(len(dataset_val))\nprint(len(dataset_test))","1d507ee5":"from transformers import BertForSequenceClassification","d3369a0f":"len(df['target'].unique())","7f505973":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(df['target'].unique()),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)","c3fc4a7b":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","8a7c093d":"#batch_size = 32\nbatch_size = 4\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=batch_size)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=32)\n\ndataloader_test = DataLoader(dataset_test, \n                                   sampler=SequentialSampler(dataset_test), \n                                   batch_size=32)","f8b26ee4":"from transformers import AdamW, get_linear_schedule_with_warmup","0bae957c":"optimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)","3c51b198":"epochs = 3\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)","d77166b8":"import numpy as np\nfrom sklearn.metrics import f1_score","7c6cd924":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","2b226ad8":"def accuracy_per_class(preds, labels):\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Accuracy: {len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","139a7f92":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","5a6929af":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","53365377":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in dataloader_val:\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n    \n    return loss_val_avg, predictions, true_vals\n            ","42470f0e":"for epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n    torch.save(model.state_dict(), f'finetuned_BERT_epoch.model')\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_validation)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')","41638f7d":"'''\nmodel = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\nmodel.to(device)\n\n'''","0bf26d75":"'''\nmodel.load_state_dict(torch.load('Models\/<<INSERT MODEL NAME HERE>>.model', map_location=torch.device('cpu')))\n'''","4fb714e1":"_, predictions, true_vals = evaluate(dataloader_validation)","fcdd6516":"accuracy_per_class(predictions, true_vals)","fc937ee5":"_, test_predictions, true_vals = evaluate(dataloader_test)","358525b5":"test_predictions.shape","0ce781ba":"test_predictions[0:3]","85a909a0":"test_preds_flat = np.argmax(test_predictions, axis=1).flatten()\ntest_preds_flat.shape","7ded7115":"test_preds_flat.sum()","421af0c7":"df_test['predict'] = test_preds_flat","a7abd0a4":"df_submit = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv')\ndf_submit.head()","19bc7fee":"df_test['target'] = df_test['predict']","da876134":"df_test = df_test[['id','target']]\ndf_test.head()\n","08ecb00a":"df_test.to_csv(\"submission.csv\", index=False)","466161c6":"%ls","51b3441e":"%rm -f finetuned*","a2fb9e1f":"len(df_test)","098f8b1f":"##### This notebook is an implementation of code from the coursera guided project: \n\nSentiment Analysis with Deep Learning using BERT\n\nThe intructor was:Ari Anastassiou\n","288b5c83":"## Creating Data Loaders","5121c30f":"## Defining our Performance Metrics","762f29d7":"**Loading Tokenizer and Encoding our Data**"}}