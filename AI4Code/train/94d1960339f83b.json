{"cell_type":{"d5d7a375":"code","a16d1384":"code","b086e25f":"code","260d77fb":"code","59ed865b":"code","0527001b":"code","7c3cfba2":"code","cfbb15db":"code","fc313b05":"code","59c0b1b7":"code","45e4a7a9":"code","3f1de0d7":"code","3c18faf3":"code","c0e5a128":"code","992ef965":"code","7813bf9e":"code","153ca476":"code","d0f6fc36":"code","3ac10274":"code","d5baa773":"code","5b145a89":"code","0f5b54fe":"code","eef7e2e1":"code","02cbfc9f":"code","8453424d":"code","834d5001":"code","a857da59":"code","f88aecdf":"code","0f924d16":"code","3ce274fe":"code","529338c9":"code","5998ff62":"code","d883a463":"code","2cf8a2ae":"code","ae78a9f4":"code","c3001754":"code","140dac6b":"code","7eb0285c":"code","78dd11de":"code","0165734a":"code","7e02e3c3":"markdown","df4c5179":"markdown","7bc70e96":"markdown","9b2adb7a":"markdown","7f068e8a":"markdown"},"source":{"d5d7a375":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","a16d1384":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","b086e25f":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","260d77fb":"train.info()","59ed865b":"test.info()","0527001b":"all = pd.concat([train, test], sort = False)\nall.info()","7c3cfba2":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","cfbb15db":"all.info()","fc313b05":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","59c0b1b7":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","45e4a7a9":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","3f1de0d7":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","3c18faf3":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","c0e5a128":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","992ef965":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","7813bf9e":"all.info()","153ca476":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","d0f6fc36":"all.info()","3ac10274":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","d5baa773":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","5b145a89":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","0f5b54fe":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","eef7e2e1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","02cbfc9f":"from sklearn.ensemble import RandomForestClassifier","8453424d":"RF_Model = RandomForestClassifier()","834d5001":"#from sklearn.model_selection import GridSearchCV","a857da59":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","f88aecdf":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","0f924d16":"#RF_grid_model = RF_grid.fit(X_train, y_train)","3ce274fe":"#RF_grid_model.best_estimator_","529338c9":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","5998ff62":"RF_Model.fit(X_train, y_train)","d883a463":"predictions = RF_Model.predict(X_test)\npredictions","2cf8a2ae":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","ae78a9f4":"all_test.head()","c3001754":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","140dac6b":"t_pred = RF_Model.predict(TestForPred).astype(int)","7eb0285c":"PassengerId = all_test['PassengerId']","78dd11de":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","0165734a":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","7e02e3c3":"****Check Accuracy","df4c5179":"### Build Random Forest","7bc70e96":"****Train\/Test Split","9b2adb7a":"****Final Predictions","7f068e8a":"****Extra Features:"}}