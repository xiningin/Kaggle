{"cell_type":{"a07a85dc":"code","52678fc7":"code","01d86497":"code","f7f1f234":"code","b489a2d6":"code","25af92cc":"code","95f21b2d":"code","7b8c19a0":"code","fd5e6f32":"code","8db0bc2a":"code","bd8664a0":"code","6b8c548b":"code","a48e585d":"code","5904f1a6":"code","afb92c8d":"code","6728e960":"code","ae764d09":"code","9817d4cc":"code","e638f02e":"code","68b4719c":"code","6d559dfa":"code","d01b3baa":"code","e36028d6":"markdown","bb551cfc":"markdown","46378d91":"markdown","06636fa2":"markdown","7f78df22":"markdown","dbfc1a1a":"markdown"},"source":{"a07a85dc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","52678fc7":"df_train_path = '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv'\ndf_test_path = '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv'\n\ndf_train = pd.read_csv(df_train_path, index_col=0)\ndf_test = pd.read_csv(df_test_path, index_col=0)","01d86497":"df_train.info()","f7f1f234":"df_train.head()","b489a2d6":"df_train.describe()","25af92cc":"df_train.isna().sum()","95f21b2d":"def create_time_features(df: pd.DataFrame) -> pd.DataFrame:\n    \n    df['date'] = pd.to_datetime(df['date'])\n    \n    df['year'] = df['date'].dt.year\n    df['month'] = df['date'].dt.month_name()\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['dayofmonth'] = df['date'].dt.days_in_month\n    df['dayofyear'] = df['date'].dt.dayofyear.astype('int')\n    df['weekofyear'] = df['date'].dt.isocalendar().week.astype('int')\n    df['weekday'] = df['date'].dt.weekday\n    df['weekend'] = np.where((df['weekday'] == 5) | (df['weekday'] == 6), 1, 0)\n    df['weekend'] = df['weekend']\n    df['season'] = df['month']\n    df['season'] = df['season'].replace(['January', 'February', 'December'], 'Winter')\n    df['season'] = df['season'].replace(['March', 'April', 'May'], 'Spring')\n    df['season'] = df['season'].replace(['June', 'July', 'August'], 'Summer')\n    df['season'] = df['season'].replace(['September', 'October', 'November'], 'Autumn')\n    \n    return df","7b8c19a0":"df_train = create_time_features(df_train)\ndf_test = create_time_features(df_test)\ndf_train = df_train.set_index('date')\ndf_test = df_test.set_index('date')","fd5e6f32":"import holidays\n\nholiday_list = list()\n\nfor date in holidays.Finland(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020]).items():\n    holiday_list.append([date[0], date[1], \"Finland\"])\n    \nfor date in holidays.Norway(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020]).items():\n    holiday_list.append([date[0], date[1], \"Norway\"])\n    \nfor date in holidays.Sweden(years=[2014, 2015, 2016, 2017, 2018, 2019, 2020]).items():\n    holiday_list.append([date[0], date[1], \"Sweden\"])","8db0bc2a":"holidays_df = pd.DataFrame(holiday_list, columns=['date_hol', 'holiday', 'country'])\nholidays_df['date_hol'] = pd.to_datetime(holidays_df['date_hol'])\nholidays_df = holidays_df.set_index('date_hol')\nholidays_df = holidays_df.sort_index()","bd8664a0":"def set_holiday(df):\n    df.loc[df.index.isin(holidays_df[holidays_df['country']=='Sweden'].index) & (df['country'] == 'Sweden'), 'holiday'] = 1\n    df.loc[df.index.isin(holidays_df[holidays_df['country']=='Finland'].index) & (df['country'] == 'Finland'), 'holiday'] = 1\n    df.loc[df.index.isin(holidays_df[holidays_df['country']=='Norway'].index) & (df['country'] == 'Norway'), 'holiday'] = 1\n\n    df['holiday'].fillna('0', inplace=True)\n    df['holiday'] = df['holiday'].astype('int').astype('category')","6b8c548b":"set_holiday(df_train)\nset_holiday(df_test)","a48e585d":"# I think there could be a better way to create a features, if you found it, please inform\n\ndef create_days(country, dataframe):\n    \n    days = holidays_df[holidays_df['country'] == country].reset_index()[['date_hol']]\n    df_days = dataframe[dataframe['country'] == country].reset_index()[['date']]\n\n    df = pd.merge_asof(df_days, days, left_on='date', right_on='date_hol', direction='forward')\n    df = pd.merge_asof(df, days, left_on='date', right_on='date_hol')\n    df['until'] = df.pop('date_hol_x').sub(df['date']).dt.days\n    df['since'] = df['date'].sub(df.pop('date_hol_y')).dt.days\n    \n    dataframe.loc[dataframe['country'] == country, ['until', 'since']] = df.set_index('date')[['until', 'since']]","5904f1a6":"create_days('Finland', df_train)\ncreate_days('Norway', df_train)\ncreate_days('Sweden', df_train)","afb92c8d":"create_days('Finland', df_test)\ncreate_days('Norway', df_test)\ncreate_days('Sweden', df_test)","6728e960":"def SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)","ae764d09":"%%capture\n!pip install pycaret[full]","9817d4cc":"from pycaret.regression import *\n\nreg = setup(data = df_train,\n            target = 'num_sold',\n            normalize = True, \n            normalize_method = 'robust', \n            transform_target = True, \n            data_split_shuffle = False, \n            create_clusters = True,\n            feature_interaction = True,\n            use_gpu = True,\n            silent = True,\n            n_jobs = -1)","e638f02e":"add_metric('SMAPE', 'SMAPE', SMAPE, greater_is_better = False)\nN = 3\ntop = compare_models(sort = 'SMAPE', n_select = N)","68b4719c":"blend = blend_models(top)\npredict_model(blend)","6d559dfa":"final_blend = finalize_model(blend)\npredict_model(final_blend)","d01b3baa":"preds = predict_model(final_blend, data=df_test)\npreds = preds['Label'].values\nsubmit = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv', index_col=0)\nsubmit['num_sold'] = preds\nsubmit.to_csv('submission.csv')","e36028d6":"## Load data","bb551cfc":"## Pycaret\n\nIt's my first time of using it, so if you have any hints please inform me","46378d91":"## Create holiday features\n\nEvery feature created to each country","06636fa2":"## SMAPE","7f78df22":"## Create number of days since last holiday and until next holiday\n\n![image.png](attachment:576fe240-2ab1-4424-b9bf-50f4f1bbbc20.png)","dbfc1a1a":"## Create features from 'date' column"}}