{"cell_type":{"77b283b4":"code","8729f84e":"code","8976dc94":"code","99724f6d":"code","8288106a":"code","87fa592b":"code","e9f73aa2":"code","9d891e2e":"code","6f5acdb6":"code","fa9f3d25":"code","90b88d2f":"code","a8dc56f7":"code","d72cb6aa":"code","18a887b4":"code","8e7e2d1c":"code","fc903a77":"code","51867bfd":"code","b09e3ba0":"code","fb677010":"code","7b9abaee":"markdown","58a5daa6":"markdown","5e56e038":"markdown","b0a8a283":"markdown","8d4e7ff1":"markdown","4d000063":"markdown","b2f5335a":"markdown","e7cc081c":"markdown","9053ca8d":"markdown","671e97fc":"markdown","0088c6c3":"markdown","96fd90f9":"markdown","053ed601":"markdown","62817a9b":"markdown","57b55cde":"markdown","2a902007":"markdown","0910a6b4":"markdown","d0ac0f5e":"markdown","e1d20aea":"markdown","fe00fdfb":"markdown","700594c2":"markdown","8dbbb6c4":"markdown","95b094a5":"markdown","03502a27":"markdown","3c5cba02":"markdown","51934e85":"markdown","0c0ed570":"markdown","9b0052e1":"markdown","8d181e63":"markdown","af48c56e":"markdown","7eafd410":"markdown","67c37199":"markdown","6f37efd0":"markdown","83b371aa":"markdown","b8391833":"markdown","26e43d52":"markdown","fdefc190":"markdown","f2db8e23":"markdown","9498a55a":"markdown","119f2f4f":"markdown"},"source":{"77b283b4":"import datetime\nimport json\n\nCOLAB = False\nif COLAB: from google.colab import drive\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set()\nfrom scipy import stats\nfrom tqdm.notebook import tqdm\n\n!pip install --upgrade pingouin\nimport pingouin as pg\nfrom IPython.display import clear_output\nclear_output()\n\n","8729f84e":"if COLAB:\n    drive.mount('\/content\/drive')","8976dc94":"if COLAB:\n    with open('\/content\/drive\/MyDrive\/Data Scientist\/Studycat\/group1_exp_2020-04-08.json', 'r') as f:\n        g1j = json.loads(f.read())\n    with open('\/content\/drive\/MyDrive\/Data Scientist\/Studycat\/group2_exp_2020-04-22.json', 'r') as f:\n        g2j = json.loads(f.read())\nelse:\n    with open('..\/input\/user-activity-log\/group1_exp_2020-04-08.json', 'r') as f:\n        g1j = json.loads(f.read())\n    with open('..\/input\/user-activity-log\/group2_exp_2020-04-22.json', 'r') as f:\n        g2j = json.loads(f.read())","99724f6d":"# TODO\ndef timestamp_to_date(timestamp, milli=True):\n    \"\"\"\n    milli = True (when timestamp is in milliseconds format)\n    \"\"\"\n    if milli:\n        timestamp \/= 1000\n    return datetime.date.fromtimestamp(timestamp)\n    raise NotImplementError('Please implement.')\n\n# confirm success\nassert timestamp_to_date(1584957443013) == datetime.date(2020, 3, 23)\nprint('Success.')","8288106a":"level_map = {\n    'N': 1,\n    'P': 2,\n    'K': 3,\n}\n\ndef get_level(x):\n    loc = x['cls_loc'].split('_')[-1]\n    return level_map[loc[0]]\n\ndef get_unit(x):\n    loc = x['cls_loc'].split('_')[-1]\n    unit = loc[1:3]\n    return int(unit)\n\ndef get_module(x):\n    loc = x['cls_loc'].split('_')[-1]\n    module = loc[3:]\n    return int(module)\n\ndef get_accuracy(x):\n    challenges = [x for x in x['exp'] if x['x'] == 'A']\n    n = len(challenges)\n    if n == 0:\n        return 'N\/A'\n    mistakes = [x for x in challenges if 'm' in x.keys()]\n    correct = n - len(mistakes)\n    return correct \/ n","87fa592b":"# TODO\ndef exp_to_df(exp):\n    student_pin = []\n    date = []\n    duration = []\n    level = []\n    unit = []\n    module = []\n    accuracy = []\n\n    for class_ in exp:\n        student_pin.append(class_['cls_loc'][:6])\n        date.append(timestamp_to_date(class_['date']))\n        duration.append(class_['dur'])\n        level.append(get_level(class_))\n        unit.append(get_unit(class_))\n        module.append(get_module(class_))\n        accuracy.append(get_accuracy(class_))\n         \n    return pd.DataFrame({\n        'student_pin': student_pin, \n        'date': date,\n        'duration': duration,\n        'level': level,\n        'unit': unit,\n        'module': module,\n        'accuracy': accuracy\n    })\n    raise NotImplementedError(exp)","e9f73aa2":"g1 = exp_to_df(g1j)\ng2 = exp_to_df(g2j)\n\nassert len(g1) == len(g1j)\nassert len(g2) == len(g2j)\ncolumns = ['student_pin', 'date', 'level', 'unit', 'module', 'accuracy']\nassert all(c in g1.columns for c in columns)\nassert all(c in g2.columns for c in columns)\nprint('Success.')","9d891e2e":"# TODO:\ndef assign_group_name(df, name):\n    df['group_name'] = name\n    return df\n    raise NotImplementedError('Please implement.')","6f5acdb6":"assign_group_name(g1, 'group1')\nassign_group_name(g2, 'group2')\n\nassert 'group_name' in g1.columns\nassert 'group_name' in g2.columns\nassert set(g1.group_name.unique()) == {'group1'}\nassert set(g2.group_name.unique()) == {'group2'}\nprint('Success.')","fa9f3d25":"# TODO\ndef concat(df1, df2):\n    return pd.concat([df1, df2])\n    raise NotImplementedError('Please implement.')\n\ndata = concat(g1, g2)\n\nassert len(data) == len(g1) + len(g2)\nassert set(data.group_name.unique()) == {'group1', 'group2'}\nprint('Success.')","90b88d2f":"def mean_confidence_interval(data, confidence=0.95):\n    a = 1.0 * np.array(data)\n    n = len(a)\n    m, se = np.mean(a), stats.sem(a)\n    h = se * stats.t.ppf((1 + confidence) \/ 2., n-1)\n    return m, m-h, m+h\n\naverage_number_of_plays_per_student_per_day_g1 = g1.groupby(['student_pin', 'date']).duration.count().groupby(['student_pin']).mean()\naverage_number_of_plays_per_student_per_day_g2 = g2.groupby(['student_pin', 'date']).duration.count().groupby(['student_pin']).mean()\n\nprint(f'g1 95% confidence interval of the mean = {mean_confidence_interval(average_number_of_plays_per_student_per_day_g1)}')\nprint(f'g2 95% confidence interval of the mean = {mean_confidence_interval(average_number_of_plays_per_student_per_day_g2)}')\n\nsns.histplot(average_number_of_plays_per_student_per_day_g1, color='r', label='g1', binwidth=20)\nsns.histplot(average_number_of_plays_per_student_per_day_g2, label='g2', binwidth=20)\nplt.xlabel(\"average_number_of_plays_per_student_per_day\")\nplt.ylabel(\"number_of_students\")\nplt.legend()","a8dc56f7":"# TODO\naverage_number_of_plays_per_student_per_unit_g1 = g1.groupby(['student_pin', 'unit']).duration.count().groupby(['student_pin']).mean()\naverage_number_of_plays_per_student_per_unit_g2 = g2.groupby(['student_pin', 'unit']).duration.count().groupby(['student_pin']).mean()\n\nprint(f'average_number_of_plays_per_student_per_unit_g1 = {mean_confidence_interval(average_number_of_plays_per_student_per_unit_g1)}')\nprint(f'average_number_of_plays_per_student_per_unit_g2 = {mean_confidence_interval(average_number_of_plays_per_student_per_unit_g2)}')\n\nsns.histplot(average_number_of_plays_per_student_per_unit_g1, color='r', label='g1')\nsns.histplot(average_number_of_plays_per_student_per_unit_g2, label='g2')\nplt.xlabel(\"average_number_of_plays_per_student_per_unit\")\nplt.ylabel(\"number_of_students\")\nplt.legend()","d72cb6aa":"# TODO\ndef drop_na_acc(df):\n    return df[df.accuracy != 'N\/A']\n    raise NotImplementError('Please implement.')","18a887b4":"accs = drop_na_acc(data)\nassert len(accs) == 362847\nprint('Success.')","8e7e2d1c":"# TODO\nprint(accs.info())\nprint('-'*50)\naccs[['duration', 'accuracy']].corr().style.background_gradient(cmap='coolwarm')","fc903a77":"# TODO\ndef drop_na_acc(df):\n    df = df.copy()\n    df = df[df.accuracy != 'N\/A']\n    df.accuracy = pd.to_numeric(df.accuracy)\n    return df\n    raise NotImplementError('Please implement.')\n\naccs = drop_na_acc(data)\naccs[['duration', 'accuracy']].corr().style.background_gradient(cmap='coolwarm')","51867bfd":"# TODO\npg.corr(accs.duration, accs.accuracy)","b09e3ba0":"# TODO: visualization\nability_deff = accs[accs.level != 2]\n\n_, axs = plt.subplots(1, 2, figsize=(14, 5))\n\nability_deff[ability_deff.group_name == 'group1'].groupby('date').accuracy.mean().plot(color='r', legend=True, label='g1', ax=axs[0], ylabel='mean_accuracy')\nability_deff[ability_deff.group_name == 'group2'].groupby('date').accuracy.mean().plot(color='b', legend=True, label='g2', ax=axs[0], ylabel='mean_accuracy')\n\nability_of_plays_per_student_g1 = ability_deff[ability_deff.group_name == 'group1'].groupby('student_pin').accuracy.mean()\nability_of_plays_per_student_g2 = ability_deff[ability_deff.group_name == 'group2'].groupby('student_pin').accuracy.mean()\n\nprint(f'g1 95% confidence interval of the mean = {mean_confidence_interval(ability_of_plays_per_student_g1)}')\nprint(f'g2 95% confidence interval of the mean = {mean_confidence_interval(ability_of_plays_per_student_g2)}')\n\nsns.histplot(ability_of_plays_per_student_g1, color='r', label='g1')\nsns.histplot(ability_of_plays_per_student_g2, label='g2')\nplt.xlabel(\"ability_of_plays_per_student\")\nplt.ylabel(\"number_of_students\")\nplt.legend()","fb677010":"# TODO: inference\npg.ttest(ability_of_plays_per_student_g1, ability_of_plays_per_student_g2)","7b9abaee":"**Please answer**: Explain whether you think the results are informative and why.","58a5daa6":"**Please answer**: why do you think we want the average *per student*?","5e56e038":"In this part we want to answer the question: is there any correlation between duration and accuracy?\n\nSome of the experience records have no challenges. For these records, the `accuracy` value will be `'N\/A'`. First, drop these rows from the `DataFrame`.","b0a8a283":"# PART 4: Group Differences","8d4e7ff1":"# PART 3: Duration and Accuracy","4d000063":"#### Average number of plays per student per day","b2f5335a":"## School Comparison\n\nWe currently have two school groups both using the same product. We would like to gain insights into what is similar and different across these two groups.","e7cc081c":"In this part we ask whether there are any differences in ability between the two groups.\n\nIf `accuracy` is a measure of ability, do the two groups differ significantly?\n\nWe want to break this into `level`s: just level 1 and 3, as `group1` does not have any game plays from level 2.\n\nThis is an \"open\" question. Some guides:\n- Visualization is important.\n- Address how you would demonstrate that any perceived difference is a significant one.\n\nUse two code cells to explore this, then one markdown cell to describe what you found.","9053ca8d":"**Please answer**: comment on what, if anything, you can conclude from the plot.","671e97fc":"**Answer**<br>\nThe longer they played, the lower the accuracy they got.","0088c6c3":"The `json` data above is not very convenient for analysis, so we will first clean and combine it into a `pandas.DataFrame`.\n\nSuppose a record in `g1j` or `g2j` looks like this:\n\n```python\n{\n    'cls_loc': 'QOEBBG_K0101',\n    'date': 1584957443013,\n    'dur': 32,\n    'exp': [\n        {\n            'm': 'spot_excited',\n            's': 8.5,\n            't': 8.5,\n            'w': 'spot_bored',\n            'x': 'A'\n        },\n        {\n            's': 1.1, \n            't': 11.4, \n            'w': 'spot_scared', \n            'x': 'A'\n        }\n    ],\n    'mod': 'Poster',\n    'pre': False,\n    'scr': 67,\n    'usr': 'QOGOBN',\n    'ver': '20.5.3'\n}\n```\n\nWhat we want per row in our `DataFrame` is this:\n\n```python\n{\n    'student_pin': 'QOGOBN',            # from `usr`\n    'date': datetime.date(2020 3, 23),  # from `date`, but parsed\n    'duration': 32,                     # from `dur`\n    'level': 3,                         # the \"K\" from `cls_loc`, mapped to int\n    'unit': 1,                          # from `cls_loc`, mapped to int\n    'module': 1,                        # from `cls_loc`, mapped to int\n    'accuracy': 0.5,                    # calcualted from `exp`\n}\n```","96fd90f9":"The next cell uses the function you just implemented, and checks that your function keeps the records and uses the right column names. It will not check that the pins and dates are correct, so be careful about that.","053ed601":"We provide the code to extract the `level`, `unit`, `module`, and `accuracy` here. Just run the next cell.","62817a9b":"Next, please plot duration versus accuracy. Remember that we want to look for correlation. Decide yourself on the style of plot. **Do not drop any rows from the `accs` `DataFrame`**.","57b55cde":"The variables `g1j` and `g2j` contain `experience` records for each of these school groups. An `experience` records what happened when a user played one of our games. A typical record looks like this:\n\n```python\n{\n    'cls_loc': 'QOEBBG_K0101',    # {class_code}_{location_in_curriculum}\n    'date': 1584957443013,\n    'dur': 32,                    # duration of play (secs)\n    'exp': [                      # the \"events\" in the game\n        {\n            'm': 'spot_excited',  # `m` is a \"mistake\"\n            's': 8.5,             # how far into the game\n            't': 8.5,             # response time\n            'w': 'spot_bored',    # the correct answer\n            'x': 'A',             # event type\n        },\n        {                         # if the first one was correct -> no `m`\n            's': 8.5,\n            't': 8.5,\n            'w': 'spot_bored',\n            'x': 'A',\n        },\n        {                         \n            's': 1.1,             \n            't': 11.4, \n            'w': 'spot_scared', \n            'x': 'X'              # this is just an \"experience\", no challenge\n        },\n        ...\n    ],\n    'mod': 'Poster',              # game type\n    'pre': False,                 # whether is a preview play (not assigned)\n    'scr': 67,                    # game score\n    'usr': 'QOGOBN',              # user code, aka `student_pin`\n    'ver': '20.5.3'               # build version\n}\n```","2a902007":"**Answer**<br>\nSo that we can dig into two tails to see why those 2 (time spending - low and high) happened. And maybe compare the difference activity between the high-time-spending group and low-time-spending group.","0910a6b4":"First, we need to convert the integer timestamp to a `datetime.date`. Please implement this:","d0ac0f5e":"**Answer**<br>\nThe column `accuracy` is an object thus we can get a correlation between `accuracy` and `duration`.","e1d20aea":"# PART 2: Engagement Analysis","fe00fdfb":"We want to see the *average number of plays per student per day* as a function of time. Make it a line plot, and indicate the 95% confidence interval of the mean. Remember that we want to compare the groups, so plot them on the same canvas.\n\nYou can use whatever plotting library you like. I chose `seaborn`. Feel free to add you choice to the import statements at the start of the notebook.","700594c2":"Given the problem you just identified, pick a reasonable solution and plot again.","8dbbb6c4":"**Please answer**: what conclusions can you draw from this plot?","95b094a5":"The next cell uses your function and checks the answer.","03502a27":"#### Average number of plays per student per unit\n\nLet's try comparing the average number of student plays per `unit`.\n\nAgain, use a line plot, and indicate the 95% confidence interval for the mean. Compare the two groups by plotting them both on the same canvas.","3c5cba02":"Next we want to concatenate these `DataFrames`s into a single one for analysis.\n\nPlease implement that.","51934e85":"# PART 1: Data Cleaning","0c0ed570":"No we want to join these `DataFrame`s together for the analysis. We will first need to assign group name attributes so we know which record belongs where.\n\nPlease implement the following function to set a `group_name` column on a `DataFrame` with all rows having the value provided by `name`.","9b0052e1":"**Answer**<br>\nI'm interested in their ability related to the effort they put in so I plot the first chart just to quickly take a glimpse of whether an effort rewards by time. Though it should be conducted user by user. The first chart only showed an aggregated result.<br>\nFor the second plot and second cell of code, I conducted a t-test to see whether they have different ability between the 2 groups. And, the result is Yes. G1 outperformed G2.","8d181e63":"**Please answer**: what is wrong with this plot?","af48c56e":"## Loading the Data\n\nIn the next cell you will need to follow the link and then paste the authorization code in the textbox provided.","7eafd410":"The next cell uses the function you implemented and checks that it is correct.","67c37199":"Next, create the function to convert experience records to the `pandas.DataFrame`, as described above. Make use of our functions.","6f37efd0":"# Exploring Data\n\nThis notebook presents a series of tasks. Please complete them in this notebook. Read through the cells in order from the top. There are two kinds of cells you need to complete:\n- code cells marked with a comment `# TODO` at the top\n- markdown cells marked with \"(please type your answer here)\". The preceding cell will also begin with **Please answer**.[link text](https:\/\/)\n\nCode cells that do not begin with `# TODO` can just be executed (in order).\n\nMake your code as clean as possible. You may follow [Google's python style guide](http:\/\/google.github.io\/styleguide\/pyguide.html) for best practice.","83b371aa":"**Answer**<br>\nG2 played much more than G1.","b8391833":"**Answer**<br>\n`p-val` is the p-value of the test. The general rule is that you can reject the hypothesis that the two variables are not correlated if the p-value is below 0.05, which is the case. We can therefore say that there is a significant correlation between the two variables. The longer the users played, the lower the accuracy they got. Read more: [Correlation(s) in Python](https:\/\/raphaelvallat.com\/correlation.html)","26e43d52":"# Introduction to the Data Structure","fdefc190":"Please conduct a statistical test of correlation of duration with accuracy: Pearson's $r$.","f2db8e23":"**Answer**<br>\nCompare to G2, G1 is flatter and presented more students in the high-time-spending area. It might be the thing we can work on.","9498a55a":"For the following cell you require permissions. If you get a permissions error, let us know and we will sort it out.","119f2f4f":"**Please answer**: what conclusion can you draw about the correlation between duration and accuracy?"}}