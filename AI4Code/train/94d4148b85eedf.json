{"cell_type":{"29e1865f":"code","fad702a1":"code","5e3c93e5":"code","c8f86d9a":"code","a88ba46a":"code","bd9acf00":"code","38871c94":"code","7daa770c":"code","1748b2b3":"code","85af83eb":"code","06a19487":"code","2b42dc34":"code","685bd403":"code","24ff7be8":"code","799e9fee":"code","8dce5adb":"code","31154b4f":"code","83a19af2":"code","469e57f9":"code","09bcc13a":"code","3bc06e8f":"code","a9acbf5a":"code","a34a829c":"code","369d43c1":"code","f018f672":"code","7f5beab3":"code","1e66fd1a":"code","56813703":"markdown","9ff6500f":"markdown","cd396895":"markdown","ce5dbbed":"markdown","f031e766":"markdown","7f73993e":"markdown","b04494dc":"markdown","2ce6d85a":"markdown","febda3e0":"markdown","fcf58187":"markdown","d67df651":"markdown","6618a138":"markdown","b9100a43":"markdown","a5ee04c5":"markdown","6be89884":"markdown","6d8a2c73":"markdown","752d5be8":"markdown","136d1fbb":"markdown","8646b73a":"markdown","1fd7d631":"markdown","ea8b7f70":"markdown","ad2c0932":"markdown","6a82d8e7":"markdown","f5cee769":"markdown","45894834":"markdown","75937397":"markdown","92d7c576":"markdown","f0f17bab":"markdown"},"source":{"29e1865f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)","fad702a1":"dataset_path = '\/kaggle\/input\/seoul-bike-rental-ai-pro-iti\/'\n\ndf_train = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\ndf_test = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ndf_train.head()","5e3c93e5":"df_train.info()","c8f86d9a":"df_train.describe()","a88ba46a":"df_train.isna().sum()","bd9acf00":"df_train.duplicated().sum()","38871c94":"df = df_train.groupby('Seasons')['y'].mean()\nsns.barplot(x=df.index, y=df.values, palette='crest')\nplt.title('Season vs. Bikes Count')\nplt.xlabel('Season')\nplt.ylabel('Bikes Count')","7daa770c":"df = df_train.groupby('Hour')['y'].mean()\nsns.barplot(x=df.index, y=df.values, palette='crest')\nplt.title('Hour vs. Bikes Count')\nplt.xlabel('Hour')\nplt.ylabel('Bikes Count')","1748b2b3":"plt.figure(figsize=(10, 20))\ng = sns.FacetGrid(df_train, col='Holiday', height=6)\ng.map(sns.barplot, 'Hour', 'y', ci=None, palette='crest')\ng.axes[0,0].set_ylabel('Bikes Count')","85af83eb":"df = df_train.groupby('Functioning Day')['y'].mean()\nsns.barplot(x=df.index, y=df.values, palette='crest')\nplt.title('Functioning Day vs. Bikes Count')\nplt.xlabel('Functioning Day')\nplt.ylabel('Bikes Count')","06a19487":"plt.figure(figsize=(10,10))\nsns.heatmap(df_train.corr(), cmap=sns.diverging_palette(20, 220, n=200), square=True, annot=True)","2b42dc34":"columns = ['Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)', 'Dew point temperature(\ufffdC)',\n           'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)']\nfig, axs = plt.subplots(ncols=2, nrows=4, figsize=(16,15))\n#sns.set_palette('colorblind')#deep , muted , pastel , bright , dark , and colorblind\nj, i =0, 0\nfor column in columns:\n    sns.distplot(x=df_train[column], ax=axs[i, j])\n    axs[i, j].spines[\"right\"].set_visible(False)\n    axs[i, j].spines[\"top\"].set_visible(False)\n    axs[i, j].set_xlabel(column)\n    if j < 1:\n        j += 1\n    else:\n        j = 0\n        i += 1","685bd403":"plt.figure(figsize = [15, 15], tight_layout = 5)\nfor i, column in enumerate(columns):\n    plt.subplot(4, 2, i+1)\n    plt.scatter(data = df_train, x = column, y = 'y', c='c', edgecolors='black')\n    plt.xlabel(column)\n    plt.ylabel('Bikes Count')\n    plt.title(column + ' vs. ' + 'Bikes Count')\nplt.show()","24ff7be8":"def data_preprocessing(df):\n    # Converting categorical variables to numerical\n    df['Seasons'].replace({'Winter':0, 'Spring':1, 'Summer':2, 'Autumn':3}, inplace=True)\n    df['Holiday'].replace({'No Holiday':0, 'Holiday':1}, inplace=True)\n    df['Functioning Day'].replace({'No':0, 'Yes':1}, inplace=True)\n    \n    # Convert the Date column to datetime \n    df.Date = pd.to_datetime(df.Date)\n\n    # Extract month from the date\n    df['Month'] = df['Date'].dt.month\n    \n    # Extract week day from the date\n    df['week_day'] = df['Date'].dt.weekday\n    \n    return df\n\ndf_train = data_preprocessing(df_train)\ndf_test = data_preprocessing(df_test)","799e9fee":"df = df_train.groupby('Month')['y'].mean()\nsns.barplot(x=df.index, y=df.values, palette='crest')\nplt.title('Month vs. Bikes Count')\nplt.xlabel('Month')\nplt.ylabel('Bikes Count')","8dce5adb":"df = df_train.groupby('week_day')['y'].mean()\nsns.barplot(x=df.index, y=df.values, palette='crest')\nplt.title('Week day vs. Bikes Count')\nplt.xlabel('Week day')\nplt.ylabel('Bikes Count')","31154b4f":"df_train.drop('Dew point temperature(\ufffdC)', axis=1, inplace=True)\ndf_test.drop('Dew point temperature(\ufffdC)', axis=1, inplace=True)","83a19af2":"def convert_biased_cols(df):\n    df['Rainfall(mm)'] = (df['Rainfall(mm)'] > 0).astype(int)\n    df['Snowfall (cm)'] = (df['Snowfall (cm)'] > 0).astype(int)\n    df['Solar Radiation (MJ\/m2)'] = (df['Solar Radiation (MJ\/m2)'] > 0).astype(int)\n    \n    return df\n\ndf_train = convert_biased_cols(df_train)\ndf_test = convert_biased_cols(df_test)","469e57f9":"df_train_new = df_train.drop(['ID', 'Date', 'y'], axis=1)","09bcc13a":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_log_error","3bc06e8f":"scaler = MinMaxScaler()\nscaler.fit(df_train_new)\ndf_train_sclar = scaler.transform(df_train_new)\ndf_train_sclar = pd.DataFrame(df_train_sclar, columns=df_train_new.columns)\ndf_train_sclar.head()","a9acbf5a":"df_test_new = df_test.drop(['ID', 'Date'], axis=1)\ndf_test_new.head()","a34a829c":"df_test_sclar = scaler.transform(df_test_new)\ndf_test_sclar = pd.DataFrame(df_test_sclar, columns=df_test_new.columns)\ndf_test_sclar.head()","369d43c1":"X = df_train_sclar\ny = df_train['y']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","f018f672":"from sklearn.ensemble import ExtraTreesRegressor\netr = ExtraTreesRegressor(n_estimators = 100, max_depth=25, random_state=0)\netr.fit(X_train, y_train)","7f5beab3":"# Predicting the output using the trained model\ny_pred = np.round(etr.predict(X_test))\nprint(f'mean squared log error = {np.sqrt(mean_squared_log_error(y_test, y_pred))}')","1e66fd1a":"y_test_pred = np.round(etr.predict(df_test_sclar))\noutput = pd.DataFrame({'ID': df_test['ID'],\n                       'y': y_test_pred})\noutput.to_csv('\/kaggle\/working\/submission.csv', index=False)","56813703":"**Correlation matrix**","9ff6500f":"There is a hight correlation between `Temperature` and `Dew point temperature` columns (0.92), so we have to drop one of them.","cd396895":"### Data description\nsome statistics  about the numerical features such as: count, mean, median, standart diviation, min, max.","ce5dbbed":"## Plotting the distribution of the numerical features.","f031e766":"**What is the average rented bikes per hour?**","7f73993e":"**Note:** We can see an increase in bikes rented at 8 and 18 on the working day compared to the holiday. This makes sense because this is the time to go and back from work, so it's clear that people there go and come back from the work using bikes.","b04494dc":"### Plotting numerical features vs. bikes count\nHow does 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)', 'Visibility (10m)', 'Dew point temperature(\ufffdC)', 'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)' affect to the number of bikes rented?","2ce6d85a":"# Seoul Bike Rental Prediction\npredict the required number of bikes for rental given information about the weather and time of the day.\n\n### Data Description\n\nYou are provided hourly rental data along with weather data. For this competition, the training set is comprised of the first 20 days of each month, while the test set is the 21th to the end of the month. You must predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.\n\n### Data fields\n\n- **ID** - an ID for this instance\n- **Date** - year-month-day\n- **Hour** - Hour of he day\n- **Temperature** - Temperature in Celsius\n- **Humidity** - %\n- **Windspeed** - m\/s\n- **Visibility** - 10m\n- **Dew point** temperature - Celsius\n- **Solar radiation** - MJ\/m2\n- **Rainfall** - mm\n- **Snowfall** - cm\n- **Seasons** - Winter, Spring, Summer, Autumn\n- **Holiday** - Holiday\/No holiday\n- **Functional Day** - NoFunc(Non Functional Hours), Fun(Functional hours)\n- **y** - Rented Bike count (Target), Count of bikes rented at each hour\n","febda3e0":"### Loading dataset","fcf58187":"### Information\nsome information about the data like number of rows, number of columns, number of not null values for each column and dtype for each column. ","d67df651":"## Model Evaluation","6618a138":"**What is the average rantes bikes per week month?**","b9100a43":"**What is the average rantes bikes per season?**","a5ee04c5":"### Import packges","6be89884":"**Are the data has duplicated rows?**","6d8a2c73":"`Rainfall`, `Snowfall` and `Solar Radiation` values are very biased  to zero, so I will convert them to bool (zero or not zero)","752d5be8":"## splitting the data","136d1fbb":"**What is the average rented bikes per hour on holiday vs. working day?**","8646b73a":"## Standardization","1fd7d631":"Now, let's delete `Dew point temperature(\ufffdC)` because of the hight correlation between it and `Temperature` column.","ea8b7f70":"**Are the data has null values?**","ad2c0932":"## Submission","6a82d8e7":"## Feature Engineering","f5cee769":"## Building the model","45894834":"**What is the average rantes bikes per week day?**","75937397":"from the above plot, we can note that no rented bikes when it's not a functioning day.","92d7c576":"The evaluation metric for this competition is Root Mean Squared Log Error RMSLE, which is calculated as follows.<br><br>\n\n\n<center>$RMSLE = \\sqrt{\\frac{1}{n}\\sum_{i=1}^{n} (log(p_{i} + 1) - log(a_{i} + 1))^2}$<\/center>\n\nWhere: \n\n- $n$ is the total number of observations in the data set,\n   \n- $p_{i}$ is your prediction of target.\n   \n- $a_{i}$ is the actual target for $i$.\n \n- $log(x)$ is the natural logarithm of $x$.","f0f17bab":"### Data visualization"}}