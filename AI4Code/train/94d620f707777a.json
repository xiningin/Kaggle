{"cell_type":{"a9685b2e":"code","26bb4e51":"code","70bc3af1":"code","ede4576f":"code","03cc5ffe":"code","72c8d6f6":"code","2a7cc8be":"code","4aee3d0f":"code","a76c6511":"code","73c3e5f6":"code","e181129c":"code","e0f3d7f5":"code","5f076166":"code","c6a81aa9":"code","a7fc49a1":"code","dc23442c":"code","7a2ecb3a":"code","2e8f4d02":"code","38f41539":"code","9ff19ac8":"code","98ae0abd":"code","a50fdf61":"code","11908da7":"code","262e0e82":"code","1d950695":"code","9ad53be9":"code","c4728177":"code","26f82b49":"code","c0e205e4":"code","9601db78":"code","8ec45764":"code","3b686821":"code","b88990e6":"code","bf541802":"code","2ffbc03a":"code","5b4bfab0":"code","d0c53990":"code","93756f71":"code","ae911bc3":"code","662ae58d":"code","5d349601":"code","8a54b8fe":"code","e4ec78c7":"code","1c499390":"code","966a5ba6":"code","473bd3f9":"code","36ee2720":"code","cc89f393":"code","c08235c3":"code","2ab56b45":"code","ab2f5c8e":"code","5e29506c":"code","9dab86b4":"code","d8ac610b":"code","34a7f24f":"code","4b2d040c":"code","0450eedf":"code","85e2c509":"code","acb0938a":"code","6534680d":"code","ba58ef65":"code","02e32683":"code","dcf9ab58":"code","44a2296c":"code","7bf5c0ff":"code","65cae91e":"code","aa6ba93a":"code","5ff16496":"markdown","5009fa49":"markdown","3bf2ea9a":"markdown","43ebe04f":"markdown","b0a7808c":"markdown","88ad4119":"markdown","b24ee742":"markdown","3926a875":"markdown","a41bd0f5":"markdown","826db48b":"markdown","87b030dc":"markdown","2cf6f800":"markdown","30e5f56e":"markdown","0d0da8fd":"markdown","9eb7aaf3":"markdown","9ab496ce":"markdown","0aea64f6":"markdown","604caf98":"markdown","c2938781":"markdown","5a1efbcf":"markdown","328fcc9c":"markdown","1dbbff76":"markdown","5b581dab":"markdown","4b7ae670":"markdown","37722fbe":"markdown","71e91e46":"markdown","70c95c11":"markdown","fd0f328c":"markdown","eed686ae":"markdown","03c1bf34":"markdown","64787b39":"markdown","ea9b59b2":"markdown"},"source":{"a9685b2e":"import pandas as pd\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","26bb4e51":"df1 = pd.read_csv(\"..\/input\/bangalorehouseprices\/bengaluru_house_prices.csv\")\ndf1.head()","70bc3af1":"df1.shape","ede4576f":"df1['area_type'].value_counts()\n","03cc5ffe":"df1['area_type'].value_counts()\n","72c8d6f6":"df2 = df1.drop(['area_type' , 'society' , 'balcony' , 'availability'] , axis = 'columns')\ndf2.head()","2a7cc8be":"df2.isnull().sum()","4aee3d0f":"df3 = df2.dropna()","a76c6511":"df3.isnull().sum()","73c3e5f6":"df3['size'].unique()","e181129c":"df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))\ndf3.bhk.unique()\n# code basically removes the duplicates","e0f3d7f5":"df3","5f076166":"df3['bhk'].unique()","c6a81aa9":"df3[df3['bhk']>20]","a7fc49a1":"df3.total_sqft.unique()","dc23442c":"# Check whether the value is float or not\ndef is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","7a2ecb3a":"df3.total_sqft.unique()","2e8f4d02":"df3[df3['total_sqft'].apply(is_float)]","38f41539":"def convert_sqft_to_num(x):\n    tokens = x.split('-')\n    if(len(tokens)) == 2:\n        return ((float(tokens[0]) + float(tokens[1]))\/2)\n    try:\n        return float(x)\n    except:\n        return None","9ff19ac8":"convert_sqft_to_num('2000 - 4000')","98ae0abd":"df4 = df3.copy() #deep copy","a50fdf61":"df4['total_sqft'] = df4[\"total_sqft\"].apply(convert_sqft_to_num)","11908da7":"df4 = df4[df4.total_sqft.notnull()]\n","262e0e82":"df4","1d950695":"df4.total_sqft.unique()","9ad53be9":"df5 = df4.copy()\ndf5['price_per_sqft'] = df5['price']*100000\/df5['total_sqft']\ndf5.head()\n#Price is in Lakhs Thus we multiply by 100000","c4728177":"df5.location.unique()","26f82b49":"len(df5.location.unique())\n#Lot of Locations\n#Since we have lot of locations, this is called dimensionality curse","c0e205e4":"df5.location = df5.location.apply(lambda x: x.strip())\n# Remove the leading spaces","9601db78":"location_stats = df5.groupby('location')['location'].agg('count').sort_values(ascending = False)","8ec45764":"location_stats","3b686821":"len(location_stats[location_stats < 10])","b88990e6":"location_stas_less_than_10 = location_stats[location_stats < 10]\nlocation_stas_less_than_10","bf541802":"len(df5.location.unique())","2ffbc03a":"df5.location = df5.location.apply(lambda x : 'other' if x in location_stas_less_than_10 else x)\n# all the locations less than 10 data points will be converted to 'other'","5b4bfab0":"len(df5.location.unique())","d0c53990":"df5.head(10)","93756f71":"df5[df5.total_sqft\/df5.bhk<300].head()\n","ae911bc3":"df6 = df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","662ae58d":"df6.price_per_sqft.describe()\n","5d349601":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf7 = remove_pps_outliers(df6)\ndf7.shape","8a54b8fe":"def plot_scatter_chart(df,location):\n    bhk2 = df[(df.location==location) & (df.bhk==2)]\n    bhk3 = df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize'] = (15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50) # s is the marker size\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+', color='green',label='3 BHK', s=50)\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n    \nplot_scatter_chart(df7,\"Rajaji Nagar\")\n","e4ec78c7":"plot_scatter_chart(df7,\"Hebbal\")\n","1c499390":"def remove_bhk_outliers(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('bhk'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8 = remove_bhk_outliers(df7)\ndf8.shape","966a5ba6":"plot_scatter_chart(df8,\"Rajaji Nagar\")\n","473bd3f9":"plot_scatter_chart(df8,\"Hebbal\")\n","36ee2720":"import matplotlib\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")\n#Normal Distribution","cc89f393":"df8.bath.unique()\n","c08235c3":"plt.hist(df8.bath,rwidth = 0.8)\nplt.xlabel(\"Number of bathrooms\")\nplt.ylabel(\"Count\")","2ab56b45":"df8[df8.bath>10]\n","ab2f5c8e":"df8[df8.bath>df8.bhk+2]\n","5e29506c":"df9 = df8[df8.bath>df8.bhk+2]\n","9dab86b4":"df9","d8ac610b":"df9 = df8[df8.bath<df8.bhk+2]\ndf9.shape\n","34a7f24f":"df9.head(2)","4b2d040c":"df10 = df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head(3)\n","0450eedf":"df10.head()","85e2c509":"\ndummies = pd.get_dummies(df10.location)\ndummies.head(3)","acb0938a":"df11 = pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\ndf11.head()","6534680d":"df12 = df11.drop('location',axis = 'columns')\ndf12.head(10)","ba58ef65":"df12.shape\n","02e32683":"X = df12.drop(['price'],axis='columns')\nX.head(3)","dcf9ab58":"X.shape","44a2296c":"y = df12.price\ny.head(3)\n","7bf5c0ff":"len(y)","65cae91e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=10)","aa6ba93a":"from sklearn.linear_model import LinearRegression\nlr_clf = LinearRegression()\nlr_clf.fit(X_train,y_train)\nlr_clf.score(X_test,y_test)\n","5ff16496":"**Looking at Values where it is valid float**","5009fa49":"**We will use Dimensionality Reduction to reduce the numbeer of Locations**","3bf2ea9a":"**the remove_pps_outliers function is looping thorough the subgroups of locations. For. eg. a subdf could be  all data points with \"jayanagar\" as a location. It calculates mean and std of the rows in jayanagar location and then selects all points in that are within m-st and m-st of jayanagar  and adds that to the df_out.**\n","43ebe04f":"### Feature Engineering","b0a7808c":"**size and price_per_sqft can be dropped because they were used only for outlier detection. Now the dataset is neat and clean and we can go for machine learning training**","88ad4119":"Plot same scatter chart again to visualize price_per_sqft for 2 BHK and 3 BHK properties\n\n","b24ee742":"**As a data scientist when you have a conversation with your business manager (who has expertise in real estate), he will tell you that normally square ft per bedroom is 300 (i.e. 2 bhk apartment is minimum 600 sqft. If you have for example 400 sqft apartment with 2 bhk than that seems suspicious and can be removed as an outlier. We will remove such outliers by keeping our minimum thresold per bhk to be 300 sqft**\n\n","3926a875":"### Data Cleaning","a41bd0f5":"## Feature Engineering","826db48b":"**To reduce the number of locations, we can say that any location that has less than 10 data points is called other location**","87b030dc":"**Now we can remove these extreme cases based on Standard Deviation**","2cf6f800":"\nInner for loop will iterate for every possible group of no. of bedrooms of that respective  location group. (of outer for loop)\n\n\nFirst inner for loop will store information about mean , std and no of data points( no of values present in a group of bedroom) in the already created dictionary in the outer for loop with key as the respective bedroom no. group. i.e (bhk_stats[2] stores info about 2 bedroom group values)\n\n\nSecond inner for loop performs the main functionality,\nstats = bhk_stats.get(bhk-1)\n\n\nhere it will fetch the value for the previous no. of bedroom group.\nFor example, for 1 bedroom group it will be None , as there is no possibe value stored for 0 bedroom group, simply because there is not any value like that in dataframe.\n\n\nalso for 3 bedroom group, it will fetch information about 2 bedroom group ( so that we can check the mean value )\n\n\nif stats and stats['count']>5:\nit checks if there is dictionary present ( we didn't have for 1 bedroom group ) because None value will throw error. It also checks if it has more than 5 values or not. Because we cannot decide to discard something without comparing it with substantial data values.\n\n\nexclude_indices = np.append(exclude_indices,\nbhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\nthis will finally store the index of the current bedroom group's element if it is lower than the previous bedroom's mean value. Then they are dropped \n","30e5f56e":"**Above shows that total_sqft can be a range (e.g. 2100-2850). For such case we can just take average of min and max value in the range. There are other cases such as 34.46Sq. Meter which one can convert to square ft using unit conversion. I am going to just drop such corner cases to keep things simple**\n\n","0d0da8fd":"**One more thing that we have to check is that if the price of a two bhk apt is greater than 3bhk apt for the same square foot area**","9eb7aaf3":"## Outlier Detection","9ab496ce":"We should also remove properties where for same location, the price of (for example) 3 bedroom apartment is less than 2 bedroom apartment (with same square ft area). What we will do is for a given location, we will build a dictionary of stats per bhk, i.e.\n\n{ <br>\n    '1' : { <br>\n        'mean': 4000,<br>\n        'std: 2000,<br>\n        'count': 34<br>\n    },  <br>\n    '2' : {<br>\n        'mean': 4300,<br>\n        'std: 2300,<br>\n        'count': 22<br>\n    },    \n}<br>\nNow we can remove those 2 BHK apartments whose price_per_sqft is less than mean price_per_sqft of 1 BHK apartment\n\n","0aea64f6":"### Model Building","604caf98":"### Bangalore House Price Prediction","c2938781":"Now our data points are reduced by almost 2000 points","5a1efbcf":"### Import the Libraries","328fcc9c":"**clearly the minimum value of square feet cannot be 267 rupees and maximum cannot be 176470**","1dbbff76":"**Convert to averages**","5b581dab":"Outliers are not errors but really large or small values which make no sense in the data. For example a 2 bedroom apartment cannot be 5000 sq feet","4b7ae670":"### Count of Each `type of area_type`","37722fbe":"Since the dataset has 13,000 rows and the na values are small in number, we can drop it. else we can use median, std deviation","71e91e46":"### One Hot Encoding and Machine Learning Model","70c95c11":"**Here dimensionality is a categorical variable**","fd0f328c":"for around 1700 sq foot area the two bedroom apt price is higher than 3 bedroom","eed686ae":"**Check above data points. We have 6 bhk apartment with 1020 sqft. Another one is 8 bhk and total sqft is 600. These are clear data errors that can be removed safely**\n\n","03c1bf34":"We are going to plot a scatter plot which will tell us how many of these types of points we have","64787b39":"**Basically what the below function does is take the data points per location and filter out the data points that have standard deviation that is greater than 1**","ea9b59b2":"Convert the SQFT with hyphens to numbers"}}