{"cell_type":{"e43e8d57":"code","b7bdf10d":"code","ecb8e6f4":"code","20e46c1a":"code","9de6e96e":"code","40c12c49":"code","7cc34858":"code","5ab03c72":"code","935092d5":"code","1bc9ab02":"code","9caca337":"code","739d232e":"code","63c3bb71":"code","c4b055bc":"code","fa90703f":"code","e4ababcb":"code","8200be85":"code","d6eca685":"code","a0c0d498":"code","c591870d":"code","e026f56b":"code","d28db26f":"markdown","0d5eebab":"markdown","f0084900":"markdown","c08719f4":"markdown","524c5212":"markdown","bd77f118":"markdown","f541f6c4":"markdown","789f6354":"markdown"},"source":{"e43e8d57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler , LabelEncoder\nfrom sklearn.metrics import confusion_matrix, mean_squared_error , r2_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7bdf10d":"data_2c = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","ecb8e6f4":"data_2c.info()","20e46c1a":"data_2c.rename(columns={\"pelvic_tilt numeric\" : \"pelvic_tilt\"} , inplace=True)\ndata_2c.columns","9de6e96e":"data_2c.describe().T","40c12c49":"data_2c.groupby(by=\"class\").agg([\"min\",\"mean\",\"max\"]).T","7cc34858":"data_2c.isnull().sum()","5ab03c72":"plt.figure(figsize=(6,6))\nsns.scatterplot(\"sacral_slope\" , y=\"pelvic_incidence\" , hue=\"class\" , data=data_2c);","935092d5":"sns.pairplot(data_2c, hue=\"class\");","1bc9ab02":"le = LabelEncoder()\ndata_2c[\"class\"] = le.fit_transform(data_2c[\"class\"])","9caca337":"X = data_2c.drop([\"class\"] , axis=1)\ny = data_2c[\"class\"].values","739d232e":"scaler = MinMaxScaler()\nX = scaler.fit_transform(X)","63c3bb71":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)","c4b055bc":"model = KNeighborsClassifier(n_neighbors=3).fit(X_train, y_train)","fa90703f":"model.score(X_test, y_test)","e4ababcb":"test_score_list = []\ntrain_score_list=[]\nneigh = np.arange(1,20)\nfor each in neigh:\n    model = KNeighborsClassifier(n_neighbors=each)\n    model = model.fit(X_train, y_train)\n    test_score_list.append(model.score(X_test,y_test))\n    train_score_list.append(model.score(X_train,y_train))\nplt.figure(figsize=(10,5))\nplt.plot(neigh, test_score_list , color=\"green\" , label=\"Test Score\")\nplt.plot(neigh, train_score_list , color=\"red\" , label=\"Train Score\")\nplt.xlabel(\"K value\")\nplt.ylabel(\"Model Score\")\nplt.xticks(neigh)\nplt.legend()\nplt.show()","8200be85":"print(\"Best Score : {}\".format(np.max(test_score_list)))","d6eca685":" model_tuned = KNeighborsClassifier(n_neighbors=19).fit(X_train, y_train)","a0c0d498":"y_pred = model_tuned.predict(X_test)","c591870d":"print(\"MSE : {}\".format(mean_squared_error(y_test, y_pred)))","e026f56b":"cm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm , annot=True, cbar=False);","d28db26f":" ### Label Encoding","0d5eebab":"## Read Data","f0084900":"## Model Tuning","c08719f4":"## Create Model","524c5212":"## Prediction","bd77f118":"## Preprocessing","f541f6c4":"## Visualization","789f6354":"### Data Split & Scaling"}}