{"cell_type":{"3778c5fa":"code","db971ae6":"code","03c7b5aa":"code","7b4cbb0a":"code","26e8e250":"code","3378b00b":"code","11364b81":"code","d5437ed5":"code","c85f4feb":"code","632e409b":"code","7ef94d1e":"code","cf3906d1":"code","af15aa28":"code","0bd6ec0e":"code","d0fe949f":"code","08139c6f":"code","fd8b2cdb":"code","045551e3":"code","289d51ba":"code","f63eeebf":"code","5b6abe8c":"code","6dbc2153":"code","ada3cbf0":"code","6d7717da":"code","aa2cd8c0":"code","c7faedb8":"code","e8212b74":"code","ae4ad48d":"code","3617724e":"code","4a899b24":"code","c9b45158":"code","4a30f81b":"code","d046ee18":"code","33aa5432":"markdown","40fa9c9c":"markdown","9c5010ca":"markdown","dfc9f565":"markdown","1ed4cd23":"markdown","c555a09a":"markdown","9878192a":"markdown","160e31cc":"markdown","ea957586":"markdown","cad212ce":"markdown","4828aaf9":"markdown","0ae22729":"markdown"},"source":{"3778c5fa":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom functools import reduce\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport mlb\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px","db971ae6":"BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\nTRAIN_DIR = Path('..\/input\/mlb-pdef-train-dataset')","03c7b5aa":"players = pd.read_csv(BASE_DIR \/ 'players.csv')\n\nrosters = pd.read_pickle(TRAIN_DIR \/ 'rosters_train.pkl')\ntargets = pd.read_pickle(TRAIN_DIR \/ 'nextDayPlayerEngagement_train.pkl')\nfollowers = pd.read_pickle(TRAIN_DIR \/ 'playerTwitterFollowers_train.pkl')\nteam_followers = pd.read_pickle(TRAIN_DIR \/ 'teamTwitterFollowers_train.pkl')\nteam_followers = team_followers.rename(columns={'numberOfFollowers': 'teamFollowers'})\nscores = pd.read_pickle(TRAIN_DIR \/ 'playerBoxScores_train.pkl')\nscores = scores.groupby(['playerId', 'date']).sum().reset_index()","7b4cbb0a":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2   \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64) \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)   \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","26e8e250":"players = reduce_mem_usage(players)\nrosters = reduce_mem_usage(rosters)\nfollowers = reduce_mem_usage(followers)\nteam_followers = reduce_mem_usage(team_followers)\nscores = reduce_mem_usage(scores)","3378b00b":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\nfig, axs = plt.subplots(2,2, figsize = (20, 10))\nsns.kdeplot(ax=axs[0,0], data=targets['target1'])\nsns.kdeplot(ax=axs[0,1], data=targets['target2'])\nsns.kdeplot(ax=axs[1,0], data=targets['target3'])\nsns.kdeplot(ax=axs[1,1], data=targets['target4'])\nbbox = axs[0,0].get_position()\nbbox2 = axs[0,1].get_position()\n\ncenter=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\nplt.suptitle('Distribution of targets', x = center)\n","11364b81":"def draw_kde_plot(col = 'target1'):\n    sns.set_style('whitegrid')\n    sns.set(font_scale = 1.5)\n    fig, axs = plt.subplots(2,2, figsize = (15, 10))\n    g = sns.kdeplot(ax=axs[0,0], data=targets[col])\n    g.set_xlabel('original')\n    g = sns.kdeplot(ax=axs[0,1], data=targets[col]**2)\n    g.set_xlabel('squared')\n    g = sns.kdeplot(ax=axs[1,0], data=targets[col]**4)\n    g.set_xlabel('power 4')\n    g = sns.kdeplot(ax=axs[1,1], data = np.log(targets[col]+1))\n    g.set_xlabel('log')\n\n\n\n    bbox = axs[0,0].get_position()\n    bbox2 = axs[0,1].get_position()\n    center=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\n    plt.suptitle(f'Transformation of {col}', x = center)\n    plt.tight_layout()\n","d5437ed5":"for col in ['target1', 'target2', 'target3', 'target4']:\n    draw_kde_plot(col)","c85f4feb":"sns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(1,1, figsize = (20,8))\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs, x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs,x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nbbox = axs.get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('Comparision of targets', x = center)\n\n","632e409b":"sns.set_style('ticks')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(2,2, figsize = (20,8))\nsns.lineplot(ax=axs[0,0], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs[0,1], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs[1,0], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs[1,1], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nplt.title('Comparision of targets, side by side view')\n","7ef94d1e":"targets['year'] = pd.to_datetime(targets['date'], format = '%Y%m%d').dt.year","cf3906d1":"targets['year'].value_counts().plot(kind = 'bar')","af15aa28":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\nsns.set(font_scale = 2)\nsns.color_palette(\"Set2\")\n\n\n\nfig, axs = plt.subplots(4,1, figsize = (20,20))\nsns.lineplot(ax=axs[0], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target1',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[1], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target2',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[2], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target3',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[3], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target4',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nbbox = axs[0].get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('targets over years', x = center)","0bd6ec0e":"\ndef plot_target_for_player(col = 'target1', playerid = 683734):\n    \n    sns.set(style=\"whitegrid\")\n    sns.set(font_scale = 2)\n    sns.color_palette(\"Set2\")\n\n    fig, axs = plt.subplots(1,1, figsize = (20,8))\n\n    sns.lineplot(ax=axs, x = np.arange(365),\n                 data = targets[((targets.year==2018) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2018',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(365),\n                 data = targets[((targets.year==2019) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2019',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(366),\n                 data = targets[((targets.year==2020) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2020',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(120),\n                 data = targets[((targets.year==2021) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2021',\n                 linewidth=2.5)\n    \n    bbox = axs.get_position()\n    center=0.5*(bbox.x1)\n    plt.suptitle(f'player Id {playerid}', x = center)","d0fe949f":"plot_target_for_player()","08139c6f":"plot_target_for_player('target2')","fd8b2cdb":"plot_target_for_player('target3')","045551e3":"plot_target_for_player('target4')","289d51ba":"plot_target_for_player('target1',477132)","f63eeebf":"plot_target_for_player('target2',477132)","5b6abe8c":"plot_target_for_player('target3',477132)","6dbc2153":"plot_target_for_player('target4',477132)","ada3cbf0":"from scipy.stats import boxcox\nxt, _ = boxcox(targets['target1'].values + 1)\nsns.distplot(xt)","6d7717da":"xt, _ = boxcox(targets['target4'].values + 1)\nsns.distplot(xt)","aa2cd8c0":"xt, _ = boxcox(targets['target3'].values + 1)\nsns.distplot(xt)","c7faedb8":"import seaborn as sns","e8212b74":"followers_agg =followers.groupby('playerId')['numberOfFollowers'].agg('median').reset_index()\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg.columns = ['playerId', '#Followers']\nfollowers_agg = pd.merge(followers_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Median Target vs Median Twitter Followers\", fontsize =15)\n\ncorr = followers_agg.drop(columns =['playerId']).corr()\n#mask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Followers', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Followers']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )","ae4ad48d":"awards = pd.read_csv(TRAIN_DIR \/ 'awards_train.csv')\n\nawards_agg = awards.groupby('playerId')['awardId'].agg('count').reset_index()\nawards_agg.columns = ['playerId', '#Awards']\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg = pd.merge(awards_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Total number of awards vs Median targets\", fontsize =15)\ncorr = followers_agg.drop(columns =['playerId']).corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Awards', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Awards']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )\ndel awards","3617724e":"scores_cols = scores.columns.tolist()\n\nscores_cols = [col for col in scores_cols if col not in ['playerId', 'date', 'home', 'gamePk', 'teamId', 'battingOrder']]\nfor col in scores_cols:\n            scores_agg = scores.groupby('playerId')[col].agg('sum').reset_index()\n            scores_agg.columns = ['playerId', \"#\"+col]\n            targets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\n            scores_agg = pd.merge(scores_agg, targets_agg, on = ['playerId'], how = 'left')\n            plt.figure(figsize=(10, 2))\n            plt.suptitle(f\"Total {col} vs Median targets\", fontsize =15)\n            corr = scores_agg.drop(columns =['playerId']).corr()\n            mask = np.triu(np.ones_like(corr, dtype=bool))\n            sns.set(font_scale=1.4)\n            plt.xticks(rotation=45)\n            \n            x_axis_labels = [\"#\"+col, 'target1','target2', 'target3', 'target4'] \n\n            sns.heatmap(np.array(corr[\"#\"+col]).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\")           \n            \n            plt.show()\n            plt.close()","4a899b24":"seasons_df = pd.read_csv(BASE_DIR \/ 'seasons.csv')","c9b45158":"targets['year'] = pd.to_datetime(targets['date'], format = '%Y%m%d').dt.year\ntargets = pd.merge(targets,\n                   seasons_df,\n                   how = 'left',\n                   left_on = 'year',\n                   right_on = 'seasonId')","4a30f81b":"targets['engagementMetricsDate'] = pd.to_datetime(targets['engagementMetricsDate'], format='%Y-%m-%d').dt.date\ntargets['seasonEndDate'] = pd.to_datetime(targets['seasonEndDate'], format='%Y-%m-%d').dt.date\ntargets['seasonStartDate'] = pd.to_datetime(targets['seasonStartDate'], format='%Y-%m-%d').dt.date\ntargets['preSeasonEndDate'] = pd.to_datetime(targets['preSeasonEndDate'], format='%Y-%m-%d').dt.date\ntargets['preSeasonStartDate'] = pd.to_datetime(targets['preSeasonStartDate'], format='%Y-%m-%d').dt.date\ntargets['regularSeasonStartDate'] = pd.to_datetime(targets['regularSeasonStartDate'], format='%Y-%m-%d').dt.date\ntargets['regularSeasonEndDate'] = pd.to_datetime(targets['regularSeasonEndDate'], format='%Y-%m-%d').dt.date\ntargets['days_to_season_end'] = (targets.seasonEndDate - targets.engagementMetricsDate).dt.days\ntargets['days_to_season_start'] = (targets.seasonStartDate - targets.engagementMetricsDate).dt.days\n\ntargets['during_season'] = np.where(((targets.seasonStartDate <= targets.engagementMetricsDate)\n                                   & (targets.seasonEndDate  >= targets.engagementMetricsDate)), 1, 0)\ntargets['during_preseason'] = np.where(((targets.preSeasonStartDate <= targets.engagementMetricsDate)\n                                   & (targets.preSeasonEndDate  >= targets.engagementMetricsDate)), 1, 0)\n\ntargets['during_regseason'] = np.where(((targets.regularSeasonStartDate <= targets.engagementMetricsDate)\n                                   & (targets.regularSeasonEndDate  >= targets.engagementMetricsDate)), 1, 0)","d046ee18":"sns.set(style=\"whitegrid\")\nsns.set(font_scale = 1)\nsns.color_palette(\"Set2\")\n\nfor target in ['target1', 'target2', 'target3', 'target4']:\n    df = targets[['days_to_season_start', target, 'year']].groupby(['days_to_season_start', 'year'])[target].agg('median').reset_index()\n    for year in [2018, 2019, 2020, 2021]:\n        plt.figure(figsize=(20, 5))\n        plot_ = sns.barplot(data = df[df.year==year], x = 'days_to_season_start', y = target)\n        for label in plot_.get_xticklabels():\n            if np.int(label.get_text()) % 10 == 0:  \n                label.set_visible(True)\n            else:\n                label.set_visible(False)\n        plt.title(f'{target} - year {year}', fontsize = 20)\n        plt.xlabel(\"days to season start\", fontsize = 15)\n        plt.ylabel(f\"{target}\", fontsize = 15)\n\n        plt.show()\n        plt.close()","33aa5432":"# **Target2 has highest Skewness**\n","40fa9c9c":"# Rosters EDA","9c5010ca":"#### In the current data, we use only \n> rosters_train.pkl <br>\n> nextDayPlayerEngagement_train.pkl <br>\n> playerBoxScores_train.pkl <br>\n> player_target_stats.csv","dfc9f565":"# There seems to be relationship between number of awards and targets, higher awards the player is popular","1ed4cd23":"**about players followers**: Followers is highly correlated with Target4. <br>\n**about player box scores**: Most of box scores are highly correlated with Target2. <br>\n**about awards**: Awards are highly correlated with target1","c555a09a":"# We have less data for year 4, since we need to predict for the future","9878192a":"**Target4 has highest correlation with Twitter follower count**","160e31cc":"# Target EDA","ea957586":"May be we should have different validation strategy","cad212ce":"# There is definitely seasonality for targets, seems like we can remove year 2018 from modelling","4828aaf9":"- playerId - Unique identifier for a player.\n- gameDate - dat of the game\n- teamId - teamId that player is on that date.\n- statusCode - Roster status abbreviation.\n- status - Descriptive roster status.","0ae22729":"features that we have now"}}