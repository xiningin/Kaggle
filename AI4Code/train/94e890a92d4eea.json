{"cell_type":{"748ed330":"code","21134f4d":"code","ffa53477":"code","3349ff40":"code","d770ab34":"code","a88806f0":"code","8a218bc6":"code","2d67dd04":"code","6d3547db":"code","4e18dfd1":"code","3f12d9d6":"code","69bcee55":"code","dc168c04":"code","8b5104f8":"code","c702cd08":"code","1bb7ec0f":"code","7348d072":"code","2a28e6ff":"code","2e42ef10":"code","33085c9d":"code","6434fec4":"code","ce14806d":"code","0e82d508":"code","e1262cb8":"code","541ff2e8":"code","fd0e2f28":"code","b968d6d5":"code","5ea4a738":"code","64e79310":"code","fa15a5fe":"code","9c864c1d":"code","46bd90c0":"code","ed1265c2":"code","d71ce3ca":"markdown","a8d13621":"markdown","53b1b2f9":"markdown","710445e2":"markdown","b41d5550":"markdown","8b449d02":"markdown","6e7f8d60":"markdown","da6710f7":"markdown","c1e878da":"markdown","8d133ea1":"markdown","bc7c52dc":"markdown","e489b141":"markdown","c3ebb633":"markdown","85826bec":"markdown","955a4150":"markdown","724c0c5d":"markdown","6976d054":"markdown","a0e9a4ff":"markdown","0c6190f1":"markdown","c1a1a6ca":"markdown","657dc211":"markdown","f71c439b":"markdown","4924eb0c":"markdown","467c45af":"markdown","76e5cf65":"markdown","ee413b5c":"markdown","67fba21b":"markdown","f8bb8ed7":"markdown","4700a245":"markdown","583dfbfb":"markdown","5680a732":"markdown","a862e723":"markdown","cfdb70b7":"markdown","3456d303":"markdown","54d379b3":"markdown","57eb8da2":"markdown"},"source":{"748ed330":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nimport os\nimport warnings; warnings.filterwarnings(action='once')\n\n\n\n\n#\u663e\u793a\u6240\u6709\u5217\npd.set_option('display.max_columns', None)\n#\u663e\u793a\u6240\u6709\u884c\npd.set_option('display.max_rows', None)\n#\u8bbe\u7f6evalue\u7684\u663e\u793a\u957f\u5ea6\u4e3a50\npd.set_option('max_colwidth',50)\n\ndata=pd.read_csv('..\/input\/nypd-motor-vehicle-collisions.csv')","21134f4d":"data.head(3)","ffa53477":"print(len(data))\ndata.describe()","3349ff40":"def null_count(data):  # \u5b9a\u4e49 null \u503c\u67e5\u627e\u51fd\u6570\uff0c\u51fd\u6570\u540d null_count\n    null_data = data.isnull().sum()  # \u67e5\u627e\u5404\u4e2a\u7279\u5f81 null \u503c\u5e76\u8ba1\u7b97\u6570\u91cf\n    null_data = null_data.drop(null_data[null_data == 0].index).sort_values(\n        ascending=False)  # \u5220\u9664\u6570\u76ee\u4e3a\u96f6\u7684\u7279\u5f81\uff0c\u964d\u5e8f\u6392\u5217\n    return null_data  # \u8fd4\u56de\u7ed3\u679c\n\nnull_count(data)  # \u8c03\u7528 null_count \u51fd\u6570\u7edf\u8ba1 data \u7684 null\uff0c\u8f93\u51fa\u7ed3\u679c","d770ab34":"plt.figure(figsize=(10,7))\nsns.heatmap(data.isnull(), cbar = False, cmap = 'viridis')","a88806f0":"data[(data['NUMBER OF PERSONS INJURED'].isnull().values==True)&(data['NUMBER OF PERSONS KILLED'].isnull().values==True)&\\\n     (data['NUMBER OF PEDESTRIANS INJURED'].isnull().values==True)&(data['NUMBER OF PEDESTRIANS KILLED'].isnull().values==True)&\\\n     (data['NUMBER OF CYCLIST INJURED'].isnull().values==True)&(data['NUMBER OF CYCLIST KILLED'].isnull().values==True)&\\\n     (data['NUMBER OF MOTORIST INJURED'].isnull().values==True)&(data['NUMBER OF MOTORIST KILLED'].isnull().values==True)].head()#\u67e5\u770b\u5404\u7c7b\u53d7\u4f24\u6216\u6b7b\u4ea1\u4eba\u6570\u4e3a\u7a7a\u503c\u7684\u6570\u636e\u4fe1\u606f","8a218bc6":"data[(data['CONTRIBUTING FACTOR VEHICLE 3'].isnull().values==True)&\\\n     ((data['CONTRIBUTING FACTOR VEHICLE 4'].notnull().values==True)|(data['CONTRIBUTING FACTOR VEHICLE 5'].notnull().values==True))].head()","2d67dd04":"data[(data['CONTRIBUTING FACTOR VEHICLE 3'].isnull().values==True)&\\\n     ((data['CONTRIBUTING FACTOR VEHICLE 4'].notnull().values==True)|(data['CONTRIBUTING FACTOR VEHICLE 5'].notnull().values==True))].head()","6d3547db":"data['NUMBER OF PERSONS INJURED'].fillna(0,inplace=True) \ndata['NUMBER OF PERSONS KILLED'].fillna(0,inplace=True) \ndata['LATITUDE'].fillna('U',inplace=True) \ndata['LONGITUDE'].fillna('U',inplace=True) ","4e18dfd1":"data['NUMBER OF PERSONS INFLUENCED'] = data['NUMBER OF PERSONS INJURED'] + data['NUMBER OF PERSONS KILLED']","3f12d9d6":"location = data['LOCATION'].value_counts()\n\ncount_loc = pd.DataFrame({\"LOCATION\" : location.index, \"ValueCount\":location})\ncount_loc.index = range(len(location))\ncount_loc.head()\n\nloc = data.groupby('LOCATION').first()\n\nnew_loc = loc.loc[:, ['LATITUDE', 'LONGITUDE', 'ZIP CODE', 'ON STREET NAME', 'BOROUGH']]\nnew_loc.head()","69bcee55":"the_loc = pd.merge(count_loc,new_loc,on='LOCATION')\nthe_loc.drop(the_loc.index[0], inplace=True)\nthe_loc.head()","dc168c04":"nmap = folium.Map(location=[40.721757, -73.930529],\n                        zoom_start=13)\n\nfor i in range(200):\n    lat = the_loc.iloc[i][2]\n    long = the_loc.iloc[i][3]\n    radius = the_loc['ValueCount'].iloc[i] \/ 30\n    \n    if the_loc['ValueCount'].iloc[i] > 300:\n        color = \"#FF4500\"\n    else:\n        color = \"#008080\"\n    \n    popup_text = \"\"\"Lat : {}<br>\n                Lng : {}<br>\n                ZIP CODE : {}<br>\n                ON STREET NAME : {}<br>\n                BOROUGH : {}<br>\n                Incidents : {}<br>\"\"\"\n    popup_text = popup_text.format(the_loc['LATITUDE'].iloc[i],\n                               the_loc['LONGITUDE'].iloc[i],\n                               the_loc['ZIP CODE'].iloc[i],\n                               the_loc['ON STREET NAME'].iloc[i],\n                               the_loc['BOROUGH'].iloc[i],\n                               the_loc['ValueCount'].iloc[i]\n                               )\n    folium.CircleMarker(location = [lat, long], popup= popup_text,radius = radius, color = color, fill = True).add_to(nmap)","8b5104f8":"nmap","c702cd08":"def get_date(DATE):\n    date = DATE[:-12]\n    return date\n\ndata['date'] = data['DATE'].apply(get_date)","1bb7ec0f":"time_place_person = data.groupby(by=['BOROUGH','date'])['NUMBER OF PERSONS INFLUENCED'].sum().unstack().reset_index().melt(id_vars='BOROUGH')\ntime_place_person.head()","7348d072":"df1=time_place_person[time_place_person['BOROUGH']=='BRONX']\ndf1['value_BRONX']=df1['value']\ndf1.drop(columns=['value','BOROUGH'], inplace=True)\n\ndf2=time_place_person[time_place_person['BOROUGH']=='BROOKLYN']\ndf2['value_BROOKLYN']=df2['value']\ndf2.drop(columns=['value','BOROUGH'], inplace=True)\n\ndf3=time_place_person[time_place_person['BOROUGH']=='MANHATTAN']\ndf3['value_MANHATTAN']=df3['value']\ndf3.drop(columns=['value','BOROUGH'], inplace=True)\n\ndf4=time_place_person[time_place_person['BOROUGH']=='QUEENS']\ndf4['value_QUEENS']=df4['value']\ndf4.drop(columns=['value','BOROUGH'], inplace=True)\n\ndf5=time_place_person[time_place_person['BOROUGH']=='STATEN ISLAND']\ndf5['value_STATEN ISLAND']=df5['value']\ndf5.drop(columns=['value','BOROUGH'], inplace=True)\n\n\ndf_1 = pd.merge(df1,df2,on='date')\ndf_2 = pd.merge(df3,df4,on='date')\ndf_3 = pd.merge(df_1,df_2,on='date')\ndf = pd.merge(df5,df_3,on='date')","2a28e6ff":"df.drop(80, inplace=True)","2e42ef10":"y_LL = 80\ny_UL = int(df.iloc[:, 1:].max().max()*1.1)\ny_interval = 80\nmycolors = ['tab:red', 'tab:blue', 'tab:green', 'tab:orange', 'tab:pink']    \n\n# Draw Plot and Annotate\nfig, ax = plt.subplots(1,1,figsize=(24, 6), dpi= 80)    \n\ncolumns = df.columns[1:]  \nfor i, column in enumerate(columns):\n    plt.plot(df.date.values, df[column].values, lw=1.5, color=mycolors[i])    \n    plt.text(df.shape[0]+1, df[column].values[-9], column, fontsize=9, color=mycolors[i])\n\n# Draw Tick lines  \nfor y in range(y_LL, y_UL, y_interval):    \n    plt.hlines(y, xmin=0, xmax=80, colors='black', alpha=0.3, linestyles=\"--\", lw=0.5)\n\n# Decorations    \nplt.tick_params(axis=\"both\", which=\"both\", bottom=False, top=False,    \n                labelbottom=True, left=False, right=False, labelleft=True)        \n\n# Lighten borders\nplt.gca().spines[\"top\"].set_alpha(.3)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.3)\nplt.gca().spines[\"left\"].set_alpha(.3)\n\nplt.title('NY BOROUGH Traffic Accident', fontsize=12)\nplt.yticks(range(y_LL, y_UL, y_interval), [str(y) for y in range(y_LL, y_UL, y_interval)], fontsize=9)    \nplt.xticks(range(0, df.shape[0], 6), df.date.values[::6], horizontalalignment='left', fontsize=9)    \nplt.ylim(y_LL, y_UL)    \nplt.xlim(-1, 81)    \nplt.show()","33085c9d":"def get_month(DATE):\n    month = DATE[5:-12]\n    return month\n\n# def get_date(DATE):\n    # date = DATE[:-12]\n    # return date\n\ndef get_hour(TIME):\n    hour = TIME[0:-3]\n    return hour","6434fec4":"data['month'] = data['DATE'].apply(get_month)\n# data['date'] = data['DATE'].apply(get_date)\ndata['hour'] = data['TIME'].apply(get_hour)","ce14806d":"date_statistics = data['date'].value_counts()\nhour_statistics = data['hour'].value_counts()\nmonth_statistics = data['month'].value_counts()\n\n\n\ndate_1 = pd.DataFrame({\"date\" : date_statistics.index, \"statistics\":date_statistics})\ndate_1.index = range(len(date_statistics))\n\nhour_1 = pd.DataFrame({\"hour\" : hour_statistics.index, \"statistics\":hour_statistics})\nhour_1.index = range(len(hour_statistics))\n\nmonth_1 = pd.DataFrame({\"month\" : month_statistics.index, \"statistics\":month_statistics})\nmonth_1.index = range(len(month_statistics))\n\n\n\ndate_1['index']=date_1['date']\nmonth_1['index']=month_1['month']\nhour_1['index']=hour_1['hour']\n\n\n\ndate_0 = date_1.groupby('index').first()\nhour_0 = hour_1.groupby('index').first()\nmonth_0 = month_1.groupby('index').first()","0e82d508":"date_0.drop('2019-03', inplace=True)\n\nhour_0['hour'][0] = '00'\nhour_0['hour'][1] = '01'\nhour_0['hour'][12] = '02'\nhour_0['hour'][17] = '03'\nhour_0['hour'][18] = '04'\nhour_0['hour'][19] = '05'\nhour_0['hour'][20] = '06'\nhour_0['hour'][21] = '07'\nhour_0['hour'][22] = '08'\nhour_0['hour'][23] = '09'\nhour_0['index']=hour_0['hour']\nhour_0 = hour_0.groupby('index').first()","e1262cb8":"plt.figure(figsize=(16,10), dpi= 80)\nplt.plot('date', 'statistics', data=date_0, color='tab:red')\n\nplt.ylim(13500, 22500)\nxtick_location = date_0['date'].tolist()[::6]\nplt.xticks(xtick_location,xtick_location, rotation=0, fontsize=12, horizontalalignment='center', alpha=.7)\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Traffic Accidents of NYX (2012 - 2019)\", fontsize=20)\nplt.grid(axis='both', alpha=.3)\n\nplt.gca().spines[\"top\"].set_alpha(0.0)    \nplt.gca().spines[\"bottom\"].set_alpha(0.3)\nplt.gca().spines[\"right\"].set_alpha(0.0)    \nplt.gca().spines[\"left\"].set_alpha(0.3)   \nplt.show()","541ff2e8":"statistics_value = date_0['statistics'].values\ndoublediff = np.diff(np.sign(np.diff(statistics_value)))\npeak_locations = np.where(doublediff == -2)[0] + 1\n\ndoublediff2 = np.diff(np.sign(np.diff(-1*statistics_value)))\ntrough_locations = np.where(doublediff2 == -2)[0] + 1\n\n\nplt.figure(figsize=(16,10), dpi= 80)\nplt.plot('date', 'statistics', data=date_0, color='tab:blue', label='Traffic Accident')\nplt.scatter(date_0.date[peak_locations], date_0.statistics[peak_locations], marker=mpl.markers.CARETUPBASE, color='tab:green', s=100, label='Peaks')\nplt.scatter(date_0.date[trough_locations], date_0.statistics[trough_locations], marker=mpl.markers.CARETDOWNBASE, color='tab:red', s=100, label='Troughs')\n\n\nfor t, p in zip(trough_locations[1::5], peak_locations[::3]):\n    plt.text(date_0.date[p], date_0.statistics[p]+15, date_0.date[p], horizontalalignment='center', color='darkgreen')\n    plt.text(date_0.date[t], date_0.statistics[t]-35, date_0.date[t], horizontalalignment='center', color='darkred')\n\n\nplt.ylim(13500,24500)\nxtick_location = date_0['date'].tolist()[::3]\nxtick_labels = xtick_location\nplt.xticks(xtick_location, xtick_labels, rotation=90, fontsize=12, alpha=.7)\nplt.title(\"NY Traffic Accident (2012 - 2019)\", fontsize=22)\nplt.yticks(fontsize=12, alpha=.7)\n\n\nplt.gca().spines[\"top\"].set_alpha(.0)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.0)\nplt.gca().spines[\"left\"].set_alpha(.3)\n\nplt.legend(loc='upper left')\nplt.grid(axis='y', alpha=.3)\nplt.show()","fd0e2f28":"statistics_value = hour_0['statistics'].values\ndoublediff = np.diff(np.sign(np.diff(statistics_value)))\npeak_locations = np.where(doublediff == -2)[0] + 1\n\ndoublediff2 = np.diff(np.sign(np.diff(-1*statistics_value)))\ntrough_locations = np.where(doublediff2 == -2)[0] + 1\n\n# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nplt.plot('hour', 'statistics', data=hour_0, color='tab:blue', label='Traffic Accident')\nplt.scatter(hour_0.hour[peak_locations], hour_0.statistics[peak_locations], marker=mpl.markers.CARETUPBASE, color='tab:green', s=100, label='Peaks')\nplt.scatter(hour_0.hour[trough_locations], hour_0.statistics[trough_locations], marker=mpl.markers.CARETDOWNBASE, color='tab:red', s=100, label='Troughs')\n\n# Annotate\nfor t, p in zip(trough_locations[1::5], peak_locations[::3]):\n    plt.text(hour_0.hour[p], hour_0.statistics[p]+15, hour_0.hour[p], horizontalalignment='center', color='darkgreen')\n    plt.text(hour_0.hour[t], hour_0.statistics[t]-35, hour_0.hour[t], horizontalalignment='center', color='darkred')\n\n# Decoration\nplt.ylim(10000,110000)\nxtick_location = hour_0['hour'].tolist()[::1]\nxtick_labels = xtick_location\nplt.xticks(xtick_location, xtick_labels, rotation=90, fontsize=12, alpha=.7)\nplt.title(\"NY Traffic Accident (hour)\", fontsize=22)\nplt.yticks(fontsize=12, alpha=.7)\n\n# Lighten borders\nplt.gca().spines[\"top\"].set_alpha(.0)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.0)\nplt.gca().spines[\"left\"].set_alpha(.3)\n\nplt.legend(loc='upper left')\nplt.grid(axis='y', alpha=.3)\nplt.show()","b968d6d5":"statistics_value = month_0['statistics'].values\ndoublediff = np.diff(np.sign(np.diff(statistics_value)))\npeak_locations = np.where(doublediff == -2)[0] + 1\n\ndoublediff2 = np.diff(np.sign(np.diff(-1*statistics_value)))\ntrough_locations = np.where(doublediff2 == -2)[0] + 1\n\n# Draw Plot\nplt.figure(figsize=(16,10), dpi= 80)\nplt.plot('month', 'statistics', data=month_0, color='tab:blue', label='Traffic Accident')\nplt.scatter(month_0.month[peak_locations], month_0.statistics[peak_locations], marker=mpl.markers.CARETUPBASE, color='tab:green', s=100, label='Peaks')\nplt.scatter(month_0.month[trough_locations], month_0.statistics[trough_locations], marker=mpl.markers.CARETDOWNBASE, color='tab:red', s=100, label='Troughs')\n\n# Annotate\nfor t, p in zip(trough_locations[1::5], peak_locations[::3]):\n    plt.text(month_0.month[p], month_0.statistics[p]+15, month_0.month[p], horizontalalignment='center', color='darkgreen')\n    plt.text(month_0.month[t], month_0.statistics[t]-35, month_0.month[t], horizontalalignment='center', color='darkred')\n\n# Decoration\nplt.ylim(100000,140000)\nxtick_location = month_0['month'].tolist()[::1]\nxtick_labels = xtick_location\nplt.xticks(xtick_location, xtick_labels, rotation=90, fontsize=12, alpha=.7)\nplt.title(\"NY Traffic Accident (month)\", fontsize=22)\nplt.yticks(fontsize=12, alpha=.7)\n\n# Lighten borders\nplt.gca().spines[\"top\"].set_alpha(.0)\nplt.gca().spines[\"bottom\"].set_alpha(.3)\nplt.gca().spines[\"right\"].set_alpha(.0)\nplt.gca().spines[\"left\"].set_alpha(.3)\n\nplt.legend(loc='upper left')\nplt.grid(axis='y', alpha=.3)\nplt.show()","5ea4a738":"from statsmodels.tsa.seasonal import seasonal_decompose\nfrom dateutil.parser import parse\n\n# Import Data\ndates = pd.DatetimeIndex([parse(d).strftime('%Y-%m-01') for d in date_0['date']])\ndate_0.set_index(dates, inplace=True)\n\n# Decompose \nresult = seasonal_decompose(date_0['statistics'], model='multiplicative')\n\n# Plot\nplt.rcParams.update({'figure.figsize': (10,10)})\nresult.plot().suptitle('Time Series Decomposition of NY Traffic Accident')\nplt.show()","64e79310":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(30,6), dpi= 80)\nplot_acf(date_0.statistics.tolist(), ax=ax1, lags=70)\nplot_pacf(date_0.statistics.tolist(), ax=ax2, lags=24)\n\n# Decorate\n# lighten the borders\nax1.spines[\"top\"].set_alpha(.3); ax2.spines[\"top\"].set_alpha(.3)\nax1.spines[\"bottom\"].set_alpha(.3); ax2.spines[\"bottom\"].set_alpha(.3)\nax1.spines[\"right\"].set_alpha(.3); ax2.spines[\"right\"].set_alpha(.3)\nax1.spines[\"left\"].set_alpha(.3); ax2.spines[\"left\"].set_alpha(.3)\n\n# font size of tick labels\nax1.tick_params(axis='both', labelsize=12)\nax2.tick_params(axis='both', labelsize=12)\nplt.show()","fa15a5fe":"train=data[(data['LATITUDE']!='U')&(data['LONGITUDE']!='U')&(data['BOROUGH'].notnull())]\ntest=data[(data['LATITUDE']!='U')&(data['LONGITUDE']!='U')&(data['BOROUGH'].isnull())]\nU=data[(data['LATITUDE']=='U')|(data['LONGITUDE']=='U')]","9c864c1d":"from datetime import date\nfrom sklearn.ensemble import RandomForestClassifier\n\ncols = ['LATITUDE', 'LONGITUDE']\n\nreg_ngk = RandomForestClassifier(random_state=100)\nreg_ngk.fit(train[cols], train['BOROUGH'])\n\ntest['BOROUGH_RF'] = reg_ngk.predict(test[cols])","46bd90c0":"test.head(3)","ed1265c2":"BOROUGHs = np.unique(test['BOROUGH_RF'])\ncolors = [plt.cm.tab10(i\/float(len(BOROUGHs)-1)) for i in range(len(BOROUGHs))]\n\n# Draw Plot for Each Category\nplt.figure(figsize=(16, 10), dpi= 80, facecolor='w', edgecolor='k')\n\nfor i, BOROUGH_RF in enumerate(BOROUGHs):\n    plt.scatter('LONGITUDE', 'LATITUDE', \n                data=test.loc[test.BOROUGH_RF==BOROUGH_RF, :], \n                s=20, cmap=colors[i], label=str(BOROUGH_RF))\n    # \"c=\" \u4fee\u6539\u4e3a \"cmap=\"\n\n# Decorations\nplt.gca().set(xlim=(-74.28, -73.65), ylim=(40.48, 40.93),\n              xlabel='LONGITUDE', ylabel='LATITUDE')\n\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title(\"BOROUGH vs LONGITUDE\/LATITUDE\", fontsize=22)\nplt.legend(fontsize=12)    \nplt.show()    ","d71ce3ca":"\u53ef\u4ee5\u770b\u5230\uff0c\u81ea\u76f8\u5173\u548c\u504f\u81ea\u76f8\u5173\u90fd\u662f12\u9636\u62d6\u5c3e\uff0c\u8bf4\u660e\u4ea4\u901a\u4e8b\u6545\u7684\u53d1\u751f\u9891\u7387\u5177\u6709\u975e\u5e38\u660e\u663e\u7684\u5b63\u8282\u53d8\u52a8\u7279\u5f81\uff0c\u53ef\u4ee5\u7528ARMA\u6a21\u578b\u8fdb\u884c\u5206\u6790","a8d13621":"\u53ef\u4ee5\u770b\u5230\u8be5\u6570\u636e\u96c6\u603b\u4f53\u7684\u7ed3\u6784\u975e\u5e38\u6e05\u6670\u3002\n\n\u7531\u4e8e\u539f\u59cb\u6570\u636e\u662f\u5bf912\u5e74\u523019\u5e74\u7684\u6240\u6709\u4ea4\u901a\u4e8b\u6545\u7684\u8bb0\u5f55\uff0c\u5171145\u4e07\u8d77\u4ea4\u901a\u4e8b\u6545\uff0c\u56e0\u6b64\u82e5\u5c06\u8fd9\u4e9b\u4e8b\u6545\u5730\u70b9\u5168\u90e8\u6807\u8bb0\u5230\u5730\u56fe\u4e0a\u662f\u4e0d\u7f8e\u89c2\u4e14\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u6570\u636e\u5206\u6790\u7684\u6700\u7ec8\u76ee\u7684\u662f\u5bfb\u6c42\u89c4\u5f8b\uff0c\u56e0\u6b64\u6211\u4eec\u4ec5\u5c06\u4e8b\u6545\u6700\u9ad8\u53d1\u7684200\u4e2a\u5730\u70b9\u5728\u5730\u56fe\u4e0a\u6807\u8bb0\u5e76\u6253\u4e0a\u6807\u7b7e\uff08\u989d\u5916\u9644\u4e0a\u7684\u4e24\u5f20\u56fe\u662f\u6700\u9ad8\u53d1\u76842000\u4e2a\u5730\u70b9\u7684\u4fe1\u606f\uff09\uff0c\u5176\u4e2d\u6807\u7b7e\u542b\u4e49\u5982\u4e0b\uff1a\n- Lat : \u7eac\u5ea6\n- Lng : \u7ecf\u5ea6\n- ZIP CODE : \u90ae\u7f16\n- ON STREET NAME : \u9644\u8fd1\u8857\u9053\u540d\u79f0\n- BOROUGH : \u884c\u653f\u533a\n- Incidents : \u4e8b\u6545\u53d1\u751f\u6b21\u6570","53b1b2f9":"![](https:\/\/upload-images.jianshu.io\/upload_images\/15406304-597df00ef17acc61.png?imageMogr2\/auto-orient\/strip%7CimageView2\/2\/w\/1240)","710445e2":"# \u52a0\u8f7d\u6570\u636e","b41d5550":"\u6211\u4eec\u731c\u60f3\uff0c\u4ea4\u901a\u4e8b\u6545\u7684\u53d1\u751f\u9891\u7387\u4e0e\u65f6\u95f4\u3001\u4eba\u53e3\u751a\u81f3\u4eba\u6587\u98ce\u6c14\u7b49\u56e0\u7d20\u90fd\u5b58\u5728\u5f88\u5927\u7684\u5173\u7cfb\uff0c\u8bbe\u60f3\u4e00\u4e0b\uff1a\u5728\u4e0a\u4e0b\u73ed\u65f6\u95f4\uff0c\u4e00\u4e2a\u8def\u53e3\u6324\u6ee1\u4e86\u4eba\uff0c\u5728\u9634\u5929\u96e8\u5b63\uff0c\u9053\u8def\u80fd\u89c1\u5ea6\u4f4e\uff0c\u8def\u9762\u6e7f\u6ed1\uff0c\u6b64\u65f6\uff0c\u4e00\u4e2a\u719f\u6089\u7684\u58f0\u97f3\u5728\u8033\u7554\u54cd\u8d77\n\n`\u5317\u4eac\u7b2c\u4e09\u533a\u4ea4\u901a\u59d4\u518d\u6b21\u63d0\u9192\u60a8\uff1a\u9053\u8def\u5343\u4e07\u6761\uff0c\u5b89\u5168\u7b2c\u4e00\u6761\u3002\u884c\u8f66\u4e0d\u89c4\u8303\uff0c\u4eb2\u4eba\u4e24\u884c\u6cea`","8b449d02":"\u76f8\u4fe1\u901a\u8fc7\u5e8f\u8a00\uff0c\u5927\u5bb6\u5df2\u7ecf\u57fa\u672c\u4e86\u89e3\u4e86\u8fd9\u662f\u4e00\u4e2a\u600e\u6837\u7684\u6570\u636e\u96c6\uff0c\u5b83\u8bb0\u5f55\u4e86\u4ece2012\u5e74\u52302019\u5e74\u5728\u5927\u57ce\u5e02\u7ebd\u7ea6\u53d1\u751f\u76841454053\u8d77\u4ea4\u901a\u4e8b\u6545\u3002","6e7f8d60":"# \u7f3a\u5931\u503c\u5904\u7406","da6710f7":"\u6211\u4eec\u7528\u968f\u673a\u68ee\u6797\u7684\u65b9\u6cd5\u8fdb\u884c\u4e86\u5206\u7c7b\u5e76\u586b\u8865\u4e86\u7f3a\u5931\u7684BOROUGH\u6807\u7b7e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5206\u7c7b\u7684\u7ed3\u679c\u8868\u73b0\u5728\u56fe\u50cf\u91cc\u3002\u6211\u4eec\u5efa\u7acb\u4e00\u4e2a\u6a2a\u8f74\u4e3a\u7eac\u5ea6\uff0c\u7eb5\u8f74\u4e3a\u7ecf\u5ea6\u7684\u5750\u6807\u7cfb\uff0c\u7528\u989c\u8272\u533a\u5206\u884c\u653f\u533a`BOROUGH`","c1e878da":"## ACF\u548cPACF\u81ea\u76f8\u5173\u56fe","8d133ea1":"\u53ef\u4ee5\u770b\u5230\uff0c\u7f3a\u5931\u503c\u4e3b\u8981\u5206\u5e03\u5728\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\u7684\u7279\u5f81\u4e2d\uff0c\u5c24\u5176\u662f\u7b2c\u4e09\u56db\u4e94\u8f86\u673a\u52a8\u8f66\u7684\u4fe1\u606f\u51e0\u4e4e\u5168\u90e8\u4e3a\u7f3a\u5931\u503c\uff0c\u8fd9\u8bf4\u660e\u5927\u578b\u591a\u8f86\u673a\u52a8\u8f66\u7684\u4ea4\u901a\u4e8b\u6545\u5360\u6781\u5c11\u6570","bc7c52dc":"# \u57fa\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u7efc\u5408\u5206\u6790","e489b141":"# \u5e8f\u8a00","c3ebb633":"\u63a5\u4e0b\u6765\u6211\u4eec\u5bf9\u4e8b\u6545\u53d1\u751f\u7684\u5730\u7406\u4f4d\u7f6e\u8fdb\u884c\u5206\u6790\uff0c\u7531\u4e8e\u8be5\u6570\u636e\u96c6\u7ed3\u6784\u6e05\u6670\u4fe1\u606f\u7b80\u70bc\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u91cd\u8981\u4fe1\u606f\u8868\u73b0\u5728\u5730\u56fe\u4e0a\u5373\u53ef\u3002","85826bec":"\u6211\u4eec\u6ce8\u610f\u5230\u539f\u59cb\u7684`data`\u6570\u636e\u4e2d\u6807\u7b7e`BOROUGH`\u5b58\u5728433393\u4e2a\u7f3a\u5931\u503c\uff0c\u7531\u4e8e\u6570\u636e\u96c6\u7ed9\u51fa\u4e86\u7ecf\u7eac\u5ea6\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5206\u7c7b\u65b9\u6cd5\u5c06\u6807\u7b7e\u8865\u5145\u5b8c\u6574\u3002","955a4150":"\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a\u4ea4\u901a\u4e8b\u6545\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u56e0\u6b64\u82e5\u8bb0\u5f55\u7684\u67d0\u4e9b\u6570\u636e\u6ca1\u6709\u5bf9\u4e8b\u6545\u635f\u5931\u7684\u5177\u4f53\u63cf\u8ff0\uff0c\u65e2\u51e0\u9879\u5173\u952e\u4fe1\u606f\u6570\u636e\u7684\u8bb0\u5f55\u5747\u4e3a\u7f3a\u5931\u503c\uff0c\u90a3\u4e48\u8fd9\u4e9b\u6570\u636e\u5c31\u662f\u6ca1\u6709\u610f\u4e49\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u5173\u952e\u4fe1\u606f\u7684\u7f3a\u5931\u4e0d\u4ec5\u7ed9\u8ba1\u7b97\u9020\u6210\u4e86\u8d1f\u62c5\uff0c\u4e5f\u4f1a\u5f71\u54cd\u6211\u4eec\u540e\u7eed\u7684\u5206\u6790\u3002\n\u8be5\u6570\u636e\u96c6\u7684\u5173\u952e\u4fe1\u606f\u5373\u4e3a\u4f24\u4ea1\u4fe1\u606f\u7684\u6570\u636e\uff0c\u6211\u4eec\u6309\u7167\u8fd9\u4e9b\u6761\u4ef6\u8fdb\u884c\u67e5\u627e\u770b\u662f\u5426\u5b58\u5728\u65e0\u610f\u4e49\u7684\u6570\u636e\u6216\u7edf\u8ba1\u9519\u8bef\u7684\u6570\u636e\u3002","724c0c5d":"# \u7528\u673a\u5668\u5b66\u4e60\u7684\u65b9\u6cd5\u586b\u8865\u7f3a\u5931\u7684BOROUGH\u6807\u7b7e","6976d054":"## \u6708\u3001\u65e5\u3001\u65f6-\u65f6\u95f4\u5e8f\u5217\u5206\u6790","a0e9a4ff":"## \u5317\u4eac\u7b2c\u4e09\u533a\u4ea4\u901a\u59d4\u63d0\u9192\u60a8\uff1a\u9053\u8def\u5343\u4e07\u6761\uff0c\u5b89\u5168\u7b2c\u4e00\u6761\u3002\u884c\u8f66\u4e0d\u89c4\u8303\uff0c\u4eb2\u4eba\u4e24\u884c\u6cea\u3002","0c6190f1":"\u6211\u4eec\u9996\u5148\u5229\u7528`LOCATION`\u53d8\u91cf\u5bf9\u6bcf\u4e2a\u5730\u70b9\u7684\u4e8b\u6545\u53d1\u751f\u6b21\u6570\u8fdb\u884c\u7edf\u8ba1\u751f\u6210\u4e86\u65b0\u6570\u636e\u96c6`count_loc`\uff0c\u7136\u540e\u5728\u539f\u6765\u7684\u6570\u636e\u96c6\u4e0a\u5bf9\u7279\u5f81\u8fdb\u884c\u4e86\u7b5b\u9009\u91cd\u65b0\u7ec4\u6210\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u96c6new_loc\uff0c\u8be5\u6570\u636e\u96c6\u662f\u5bf9\u6bcf\u4e00\u4e2a\u4e8b\u6545\u5730\u70b9\u7684\u5730\u7406\u7279\u5f81\u4fe1\u606f\u7684\u8bb0\u5f55\u3002\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u636e\u96c6\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u6570\u636e\u96c6`the_loc`\uff0c\u8be5\u6570\u636e\u96c6\u65e2\u5305\u542b\u4e8b\u6545\u53d1\u751f\u5730\u70b9\u7684\u5730\u7406\u7279\u5f81\u4fe1\u606f\uff0c\u53c8\u6807\u660e\u4e86\u6bcf\u4e2a\u5730\u70b9\u7684\u4e8b\u6545\u53d1\u751f\u6b21\u6570\u3002","c1a1a6ca":"\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u7684\u5206\u7c7b\u7ed3\u679c\u975e\u5e38\u597d\uff0c\u968f\u673a\u68ee\u6797\u505a\u51fa\u7684\u51b3\u7b56\u8fb9\u754c\u57fa\u672c\u548c\u7ebd\u7ea6\u5730\u56fe\u4e00\u6a21\u4e00\u6837","657dc211":"\u53ef\u4ee5\u770b\u51fa\uff0c\u4ea4\u901a\u4e8b\u6545\u7684\u53d1\u751f\u5177\u6709\u4e00\u5b9a\u7684\u5b63\u8282\u5468\u671f\u6027\u548c\u5730\u57df\u6027","f71c439b":"\u53ef\u4ee5\u770b\u51fa\uff0c\u5317\u4eac\u7b2c\u4e09\u4ea4\u901a\u59d4\u975e\u5e38\u5173\u5fc3\u5927\u5bb6\uff0c\u901a\u8fc7\u4e0d\u538c\u5176\u70e6\u7684\u63d0\u9192\u6765\u5524\u8d77\u5927\u5bb6\u5bf9\u4ea4\u901a\u5b89\u5168\u7684\u91cd\u89c6\uff0c\u8fd9\u4e5f\u4ece\u4fa7\u9762\u53cd\u6620\u4e86\u4ea4\u901a\u4e8b\u6545\u548c\u5f53\u5730\u7684\u73af\u5883\u5b58\u5728\u5f88\u5927\u7684\u8054\u7cfb\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5148\u5bf9\u7ebd\u7ea6\u7684\u4e94\u4e2a\u884c\u653f\u533a\u8fdb\u884c\u5bf9\u6bd4\u5206\u6790","4924eb0c":"- \u9996\u5148\uff0c\u6211\u4eec\u5229\u7528`BOROUGH`\u548c`date`\u8fd9\u4e24\u4e2a\u53d8\u91cf\u4ea4\u53c9\u7ec4\u5408\u5bf9\u539f\u6765\u7684\u6570\u636e\u96c6\u91cd\u65b0\u6392\u5e8f\u5206\u7c7b\uff0c\u5e76\u7edf\u8ba1\u6bcf\u4e00\u7c7b\u7684\u4f24\u4ea1\u4eba\u6570`NUMBER OF PERSONS INFLUENCED`\u4e4b\u548c\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u96c6`time_place_person`\n- \u7136\u540e\uff0c\u901a\u8fc7`BOROUGH`\u53d8\u91cf\u7684\u4e94\u79cd\u4e0d\u540c\u7684\u53d6\u503c\u5c06\u4e00\u4e2a\u6570\u636e\u96c6\u5207\u5206\u6210\u4e94\u4e2a\u5e73\u884c\u7684\u6570\u636e\u96c6`df1`\u5230`df5`\n- \u7531\u4e8e\u8fd9\u4e94\u4e2a\u5e73\u884c\u6570\u636e\u96c6\u62e5\u6709\u76f8\u540c\u7684\u65f6\u95f4\u5e8f\u5217\u6807\u7b7e`date`\uff0c\u56e0\u6b64\u6211\u4eec\u5229\u7528`date`\u4f5c\u4e3a\u6bcd\u7ed3\u70b9\uff0c\u5c06\u4e94\u4e2a\u5e73\u884c\u7684\u6570\u636e\u96c6\u91cd\u65b0\u5408\u5e76\u6210\u4e00\u4e2a\u6570\u636e\u96c6`df`\n- \u4e94\u4e2a\u5e73\u884c\u6570\u636e\u96c6\u5408\u5e76\u540e\uff0c\u5404\u81ea\u7684\u7ef4\u5ea6`value`\u7ec4\u6210\u4e86\u4e94\u4e2a\u5e73\u884c\u7684`value_\u884c\u653f\u533a`\uff0c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u6211\u4eec\u5c06\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u4e00\u7ef4\u7684 `value` \u5207\u5206\u4e3a\u4e86\u4e94\u4e2a\u5e73\u884c\u7684\u7ef4\u5ea6 `value_\u884c\u653f\u533a` \u5e76\u91cd\u65b0\u6620\u5c04\u5230\u65f6\u95f4\u5e8f\u5217\u91cc","467c45af":"# \u5730\u7406\u56e0\u7d20\u5206\u6790","76e5cf65":"\u8fd9\u91cc\u5b9a\u4e49U\u53ea\u662f\u65b9\u4fbf\u8bf4\u660e\uff0c\u8fd9\u91cc\u7684train\u3001test\u548cU\u52a0\u5728\u4e00\u8d77\u5373\u4e3a\u539f\u59cb\u7684data\u6570\u636e\u96c6\u3002\u7531\u4e8eU\u4e2d\u7684\u6570\u636e\u4e3a\u7ecf\u7eac\u5ea6\u4e3a\u7f3a\u5931\u503c\u7684\u6570\u636e\uff0c\u8fd9\u7c7b\u6570\u636e\u65e2\u4e0d\u80fd\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u4f7f\u7528\uff0c\u4e5f\u4e0d\u80fd\u62ff\u6765\u505a\u6d4b\u8bd5\u96c6\uff0c\u6240\u4ee5\u5bf9\u540e\u7eed\u5206\u6790\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528","ee413b5c":"## \u65f6\u95f4\u5e8f\u5217\u5206\u89e3\u56fe","67fba21b":"![](https:\/\/upload-images.jianshu.io\/upload_images\/15406304-9418bf2b6422779b.png?imageMogr2\/auto-orient\/strip%7CimageView2\/2\/w\/1240)","f8bb8ed7":"![](https:\/\/upload-images.jianshu.io\/upload_images\/15406304-1f6129983dd54e62.png?imageMogr2\/auto-orient\/strip%7CimageView2\/2\/w\/1240)","4700a245":"\u5904\u7406\u5b8c\u4f24\u4ea1\u4eba\u6570\u7684\u7f3a\u5931\u503c\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u989d\u5916\u8865\u5145\u4e00\u5217\u6b7b\u4f24\u4eba\u6570\u4e4b\u548c\u7684\u7279\u5f81\u3002","583dfbfb":"\u901a\u8fc7\u4ee5\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u9664\u4e86\u6b7b\u4f24\u4eba\u6570\u53ca\u7ecf\u7eac\u5ea6\u4fe1\u606f\u5916\uff0c\u5176\u4ed6\u5217\u7684\u7a7a\u503c\u90fd\u662f\u6587\u5b57\u4fe1\u606f\uff0c\u4e14\u57fa\u672c\u90fd\u662f\u6309\u7167\u6b63\u5e38\u7684\u903b\u8f91\u586b\u5199\uff0c\u5bf9\u6211\u4eec\u7a0d\u540e\u7684\u5206\u6790\u4e0d\u4f1a\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u6b64\u4e3a\u4e86\u5c3d\u53ef\u80fd\u8fd8\u539f\u6570\u636e\u7684\u7279\u5f81\uff0c\u6211\u4eec\u6682\u65f6\u4e0d\u505a\u5904\u7406\u3002\n\n\u5bf9\u4e8e\u6b7b\u4f24\u4eba\u6570\u53ca\u7ecf\u7eac\u5ea6\u4fe1\u606f\u7684\u7f3a\u5931\u503c\u3002\u6211\u4eec\u5c06\u6b7b\u4f24\u4eba\u6570\u7684\u7a7a\u503c\u66ff\u6362\u4e3a`0`,\u7ecf\u7eac\u5ea6\u7684\u7a7a\u503c\u66ff\u6362\u4e3a`U`\u3002","5680a732":"## \u884c\u653f\u533a-\u65f6\u95f4\u5e8f\u5217\u5206\u6790","a862e723":"\u6211\u4eec\u6ce8\u610f\u5230\u8be5\u6570\u636e\u96c6\u5bf9\u6bcf\u8d77\u4e8b\u6545\u7684\u8087\u4e8b\u8f66\u8f86\u9884\u8bbe\u7684\u6700\u5927\u767b\u8bb0\u6570\u4e3a5,\u4f46\u5927\u90e8\u5206\u8087\u4e8b\u8f66\u8f86\u6570\u90fd\u8fbe\u4e0d\u52305,\u56e0\u6b64\u5bf9\u8087\u4e8b\u8f66\u8f86\u7684\u4fe1\u606f\u8bb0\u5f55\u7684\u4f4d\u7f6e\u4f1a\u5b58\u5728\u5f88\u591a\u7f3a\u5931\u503c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u67e5\u770b\u662f\u5426\u5b58\u5728\u8df3\u8dc3\u8bb0\u5f55\u7684\u60c5\u51b5\uff0c\u65e2\u4e0d\u6309\u7167\u8868\u683c\u987a\u5e8f\u586b\u5199\u8087\u4e8b\u8f66\u8f86\u4fe1\u606f","cfdb70b7":"\u4e0b\u9762\u6211\u4eec\u5c06\u65f6\u95f4\u5e8f\u5217\u5206\u89e3\u4e3a\u8d8b\u52bf\uff0c\u5b63\u8282\u548c\u6b8b\u5dee\u5206\u91cf","3456d303":"## \u968f\u673a\u68ee\u6797","54d379b3":"\u4e0a\u9762\u7684\u7ed3\u679c\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e09\u8f86\u8087\u4e8b\u8f66\u8f86\u6570\u636e\u4e3a\u7a7a\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c\u56db\u8f86\u548c\u7b2c\u4e94\u8f86\u4e5f\u5747\u4e3a\u7a7a\u503c\uff0c\u8fd9\u8bf4\u660e\u8be5\u6570\u636e\u96c6\u5bf9\u8087\u4e8b\u8f66\u8f86\u7684\u7edf\u8ba1\u786e\u5b9e\u662f\u6309\u7167\u8868\u683c\u987a\u5e8f\u586b\u5199\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u7b2c\u4e09\u8f86\u8087\u4e8b\u8f66\u8f86\u6570\u636e\u662f\u5426\u4e3a\u7a7a\u503c\u5224\u65ad\u8087\u4e8b\u8f66\u8f86\u662f\u5426\u4e0d\u5c11\u4e8e\u4e09\u8f86","57eb8da2":"\u6839\u636e\u4e0a\u9762\u7684\u67e5\u8be2\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u51fa\u867d\u7136\u67d0\u4e9b\u4f24\u4ea1\u4eba\u6570\u4fe1\u606f\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u4f46\u5e76\u4e0d\u5b58\u5728\u8fd9\u4e9b\u4fe1\u606f\u5747\u4e3a\u7f3a\u5931\u503c\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u67d0\u4e9b\u4fe1\u606f\u8bb0\u5f55\u7684\u67d0\u7c7b\u4f24\u4ea1\u4eba\u6570\u4e3a\u7f3a\u5931\u503c\u503c\u7b49\u4ef7\u4e0e\u8be5\u4e8b\u6545\u9020\u6210\u7684\u8be5\u7c7b\u4f24\u4ea1\u4eba\u6570\u4e3a0\uff0c\u8bf4\u660e\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u6761\u6570\u636e\u5bf9\u4e8b\u6545\u7684\u5173\u952e\u4fe1\u606f\u90fd\u662f\u5b58\u5728\u4e00\u5b9a\u8bb0\u5f55\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c0f\u6539\u5c31\u53ef\u4ee5\u3002"}}