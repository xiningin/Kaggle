{"cell_type":{"5a1b2fb2":"code","e583f637":"code","d13053f8":"code","31d8d448":"code","2e51a944":"code","6f9c3634":"code","d64edc81":"code","bc971ce8":"code","856feef0":"code","944b89a6":"code","2dd0487c":"code","8be6ec1c":"code","afe139a3":"code","569b8a4b":"code","7517e464":"code","0b2f0c9c":"code","eaa8e839":"code","538af6cc":"code","a8d47c5d":"code","d086f6b8":"code","c452389d":"code","63eebb88":"code","559d1fb4":"code","60901c33":"code","9f8b2279":"code","353bf451":"code","dce750f2":"code","3fdd2a40":"code","81f02ce2":"code","5c6fa2c8":"code","ecf3d34b":"code","1f56c069":"code","a1a57833":"code","02ac408d":"code","f1a148ae":"code","43bf529a":"code","fc1d2b67":"code","bba86358":"code","af44d7f1":"code","a2dfc39f":"code","3811c8cb":"code","23a38d6a":"code","e14c128f":"code","bd582e40":"code","9b4ce11f":"code","eb310c29":"code","5cff6d66":"markdown","6d62c6b8":"markdown","0b9a8462":"markdown","d762eedd":"markdown","11fc95c2":"markdown","5db5a95d":"markdown"},"source":{"5a1b2fb2":"# Import necessary modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.cluster.hierarchy import linkage, dendrogram\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom plotly import express as ex","e583f637":"# load the data\norg_impact_df = pd.read_csv(\"..\/input\/asteroid-impacts\/impacts.csv\")\norg_orbit_df = pd.read_csv(\"..\/input\/asteroid-impacts\/orbits.csv\")","d13053f8":"# Create copy of dataframe\nimpact_df = org_impact_df.copy()\norbit_df = org_orbit_df.copy()","31d8d448":"# Create a function to show boxplot\ndef show_boxplot(df, features):\n    n = len(features)\n    cols = 3\n    rows = int(n\/cols)\n    feat_iter = 0\n\n    fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(20, 25))\n    for i in range(rows):\n        for j in range(cols):\n            sns.boxplot(x=features[feat_iter], data=df, ax=ax[i][j])\n            feat_iter += 1\n    plt.show()\n\n\n# Create a function to remove the outliers\ndef remove_outliers(df, features):\n    df_copy = df.copy()\n\n    for feature in features:\n\n        # Calculate q1, q3 and iqr\n        q3 = df[feature].quantile(0.75)\n        q1 = df[feature].quantile(0.25)\n        iqr = q3 - q1\n\n        # Get local minimum and maximum\n        local_min = q1 - (1.5 * iqr)\n        local_max = q3 + (1.5 * iqr)\n\n        # Remove the outliers\n        df_copy = df_copy[(df_copy[feature] >= local_min) & (df_copy[feature] <= local_max)]\n        return df_copy\n\n\n# Create a function to show voilin plot\ndef show_voilin_plot(df, features):\n    n = len(features)\n    cols = 3\n    rows = int(n \/ cols)\n    feat_iter = 0\n\n    # Create the boxplot\n    fig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(20, 25))\n    for i in range(rows):\n        for j in range(cols):\n            sns.violinplot(x=features[feat_iter], data=df, ax=ax[i][j])\n            feat_iter += 1\n    plt.show()\n\n\n# Create function to show elbow method\ndef show_elbow(df):\n    # Create a list to store inertia values\n    inerita_list = []\n    x_cord = []\n\n    # Create a for loop to check for 1 to 10 number of cluster\n    for k in range(1, 11):\n        # Create KMeans model, fit the data\n        model = KMeans(n_clusters=k)\n        model.fit(df)\n        # Get inerita of data and store it in the list \n        inerita_list.append(model.inertia_)\n        x_cord.append(k)\n\n    # Create inertia plot\n    plt.figure(figsize=(12, 5))\n    plt.plot(x_cord, inerita_list)\n    plt.scatter(x_cord, inerita_list)\n\n    for i in range(len(inerita_list)):\n        plt.annotate(text=x_cord[i], xy=(x_cord[i], inerita_list[i]), xytext=(x_cord[i]+0.1, inerita_list[i]+0.25))\n\n    plt.show()\n\n\n# Create a function to show dendrogram\ndef show_dendrogram(df):\n    distance_matrix = linkage(df, method='complete')\n\n    plt.figure(figsize=(22, 8))\n    dendrogram(distance_matrix)\n    plt.show()\n\n\n# Create a function for analysis multidimensioal data using PCA\ndef graph(X, y, cmap=\"viridis\", dim=2):\n    pca = PCA(dim)\n    X_component = pca.fit_transform(X)\n    x1 = X_component[:, 0]\n    x2 = X_component[:, 1]\n\n    if (dim == 2):\n        plt.scatter(x1, x2, c=y, cmap=cmap)\n\n    elif (dim == 3):\n        x3 = X_component[:, 2]\n        fig = ex.scatter_3d(X_component, x=x1, y=x2, z=x3, color=y)\n        return fig","2e51a944":"# Get first five rows of orbit dataset\norbit_df.head()","6f9c3634":"# Get dataframe info\norbit_df.info()","d64edc81":"# Drop null values of dataframe as we have only one null value\norbit_df.dropna(inplace=True)\norbit_df.info()","bc971ce8":"# Perform label encoding on Object Classification column\nobj_clf_label = {\n                \"Apollo Asteroid\": 0,\n                \"Amor Asteroid\": 1,\n                \"Apollo Asteroid (Hazard)\": 2,\n                \"Aten Asteroid\": 3,\n                \"Aten Asteroid (Hazard)\": 4,\n                \"Amor Asteroid (Hazard)\": 5,\n                \"Apohele Asteroid\": 6,\n                \"Apohele Asteroid (Hazard)\": 7}\n\norbit_df.replace(obj_clf_label, inplace=True)","856feef0":"# Droping Object Name column because we have no use of that\norbit_df.drop(['Object Name'], axis=1, inplace=True)\norbit_df.columns","944b89a6":"# Get description of orbit dataframe\norbit_df.describe()","2dd0487c":"# Get corelational heatmap\nplt.figure(figsize=(15, 8))\nsns.heatmap(orbit_df.corr(), annot=True)\nplt.show()","8be6ec1c":"# Exract features from the dataframe\norbit_features = list(orbit_df.columns)\norbit_features","afe139a3":"# Show boxplot to check outliers\nshow_boxplot(orbit_df, orbit_features)","569b8a4b":"# Check distribution in Epoch (TDB) as we have to many outliers\nplt.figure(figsize=(12, 5))\nsns.distplot(orbit_df[\"Epoch (TDB)\"])\nplt.axvline(orbit_df[\"Epoch (TDB)\"].mean(), color='r', label=\"mean\")\nplt.legend()\nplt.show()","7517e464":"# Drop Epoch (TDB)\norbit_df.drop(['Epoch (TDB)'], inplace=True, axis=1)\norbit_df.columns","0b2f0c9c":"# Get new values of orbit_features after removing \"Epoch (TDB)\"\norbit_features = list(orbit_df.columns)\norbit_features","eaa8e839":"# Remove outliers\norbit_df = remove_outliers(orbit_df, orbit_features)\n\n# Show the boxplot\nshow_boxplot(orbit_df, orbit_features)","538af6cc":"# Get dataset info\norbit_df.info()","a8d47c5d":"# Get correlation of new dataset\nplt.figure(figsize=(15,8))\nsns.heatmap(orbit_df.corr(), annot=True)\nplt.show()","d086f6b8":"# Show voilin plot for orbit_features\nshow_voilin_plot(orbit_df, orbit_features)","c452389d":"# Get df info after cleaning the data\norbit_df.info()","63eebb88":"# Performing some clean up\norbit_df = round(orbit_df, 2)\norbit_df.reset_index()\norbit_df.describe()","559d1fb4":"# Use elbow method to find optimum number of clusters\nshow_elbow(orbit_df)","60901c33":"# Show the dendrogram to get optimum number of clusters\nshow_dendrogram(orbit_df)","9f8b2279":"# Create KMeans model\norbit_model = KMeans(n_clusters=4)\norbit_label = orbit_model.fit_predict(orbit_df)\ncentroids = orbit_model.cluster_centers_\n\norbit_df['Label'] = orbit_label\norbit_df.head()","353bf451":"# Get the number of Asteroid belongs to a particular label\norbit_df['Label'].value_counts()","dce750f2":"# Use PCA on orbit data for 2 diminsion\nplt.figure(figsize=(12, 5))\ngraph(X=orbit_df.iloc[:, :-1], y=orbit_df.iloc[:, -1])\nplt.show()","3fdd2a40":"# Use PCA on orbit data for 3 diminsion\ngraph(X=orbit_df.iloc[:, :-1], y=orbit_df.iloc[:, -1], dim=3).show()","81f02ce2":"# Print first 5 rows of the impact df\nimpact_df.head()","5c6fa2c8":"# Get info of the dataframe\nimpact_df.info()","ecf3d34b":"# Drop Object Name from the dataframe\nimpact_df.drop(['Object Name'], axis=1, inplace=True)\nimpact_df.columns","1f56c069":"# Get the value count of Maximum Torino Scale\nimpact_df.iloc[:, -1].value_counts()","a1a57833":"# Drop Maximum Torino Scale as it's all values are 0\nimpact_df.drop(['Maximum Torino Scale'], axis=1, inplace=True)\nimpact_df.columns","02ac408d":"# Get the description of the dataframe\nimpact_df.describe()","f1a148ae":"# Get corelational heatmap\nplt.figure(figsize=(15, 8))\nsns.heatmap(impact_df.corr(), annot=True)\nplt.show()","43bf529a":"# Exract features from the df\nimpact_features = impact_df.columns\nimpact_features","fc1d2b67":"# Show boxplot to check for outliers\nshow_boxplot(impact_df, impact_features)","bba86358":"# Remove outliers from the dataframe\nimpact_df = remove_outliers(impact_df, impact_features)\n\n# Show the boxplot\nshow_boxplot(impact_df, impact_features)","af44d7f1":"# Show voilin plot for impact_features\nshow_voilin_plot(impact_df, impact_features)","a2dfc39f":"# Create histogram for Asteroid Diameter (km)\nplt.figure(figsize=(12, 5))\nsns.histplot(x=\"Asteroid Diameter (km)\", data=impact_df)\nplt.show()","3811c8cb":"# Use Elbow method to find optimum number of clusters\nshow_elbow(impact_df)","23a38d6a":"# Show dendrogram for impact_df\nshow_dendrogram(impact_df)","e14c128f":"# Create KMeans model\nimpact_model = KMeans(n_clusters=3)\nimpact_label = impact_model.fit_predict(impact_df)\nimpact_centroids = impact_model.cluster_centers_\n\nimpact_df['Label'] = impact_label\nimpact_df.head()","bd582e40":"# Get the number of Asteroid belongs to a particular label\nimpact_df['Label'].value_counts()","9b4ce11f":"# Use PCA on orbit data for 2 diminsion\nplt.figure(figsize=(12, 5))\ngraph(X=impact_df.iloc[:, :-1], y=impact_df.iloc[:, -1])\nplt.show()","eb310c29":"# Use PCA on orbit data for 3 diminsion\ngraph(X=impact_df.iloc[:, :-1], y=impact_df.iloc[:, -1], dim=3).show()","5cff6d66":"# Orbit Data","6d62c6b8":"According to dendrogram number of cluster is 4.","0b9a8462":"## ML","d762eedd":"# Impact Data","11fc95c2":"According to elbow method number of cluster is 4.","5db5a95d":"# Functions"}}