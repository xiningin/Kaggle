{"cell_type":{"21d33407":"code","8b8e76c8":"code","34bcdcc5":"code","3e827554":"code","81089b7c":"code","457cef13":"code","0df685b4":"code","aff4e45d":"code","ae0ae62b":"code","0cf4fa3f":"code","7224cc23":"code","4f0c84fb":"code","e512fe38":"code","2a199382":"code","b53c4ad8":"code","fb0262da":"code","11afc24f":"code","3a640bf7":"code","34e46b83":"code","0cfac670":"code","08d51a0f":"code","9ee4d23e":"code","e93aed9c":"code","1dfe357f":"code","07d00ded":"code","198df8a9":"code","35653fbd":"code","11ec3314":"code","203c9179":"code","61fb45f4":"code","14981f7c":"code","4f152389":"code","9b913f61":"code","4754f47f":"code","687a35f8":"code","ce076221":"code","7a6da4f6":"code","8876e1c7":"code","d64c2625":"code","63d008b5":"code","44283bc1":"code","2b1bf82b":"code","805f022a":"code","9a41ec29":"code","50598d96":"code","26c6d9ff":"code","c7ba84d3":"code","71912347":"markdown"},"source":{"21d33407":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8b8e76c8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","34bcdcc5":"loan = pd.read_csv(\"..\/input\/madfhantr.csv\")\nloan_test= pd.read_csv(\"..\/input\/madhante.csv\")","3e827554":"loan.head(100)","81089b7c":"#loan.info()\nloan.shape","457cef13":"loan.dtypes","0df685b4":"loan.isnull().sum()","aff4e45d":"loan.dropna(subset = [\"Gender\"], how = \"all\", inplace = True)\n\nloan.dropna(subset = [\"Married\"], how = \"all\", inplace = True)\n\nloan.dropna(subset = [\"Self_Employed\"], how = \"all\", inplace = True)\n\nloan.dropna(subset = [\"Dependents\"], how = \"all\", inplace = True)\n\nAvg_Amount=loan.LoanAmount.mean()\nloan.LoanAmount=loan.LoanAmount.fillna(value=Avg_Amount)\n\nAvg_CAmount=loan.Loan_Amount_Term.mean()\nloan.Loan_Amount_Term=loan.Loan_Amount_Term.fillna(value=Avg_CAmount)\n\nAvg_LoanAmount=loan.Credit_History.mean()\nloan.Credit_History=loan.Credit_History.fillna(value=Avg_LoanAmount)","ae0ae62b":"loan.isnull().sum()","0cf4fa3f":"loan.describe()","7224cc23":"loan.corr()","4f0c84fb":"skew = loan.skew()\nprint(skew)","e512fe38":"loan.Gender[loan.Gender == \"Male\"] = \"1\"\nloan.Gender[loan.Gender == \"Female\"] = \"2\"\n\nloan.Married[loan.Married == \"No\"] = \"0\"\nloan.Married[loan.Married == \"Yes\"] = \"1\"\n\nloan.Education[loan.Education == \"Graduate\"] = \"0\"\nloan.Education[loan.Education == \"Not\"] = \"1\"\nloan.Education[loan.Education == \"Not Graduate\"] = \"2\"\n\nfrom sklearn.preprocessing import LabelEncoder\nclf = LabelEncoder()\nloan[\"Self_Employed\"] = clf.fit_transform(loan[\"Self_Employed\"])\n#loan.Self_Employed[loan.Self_Employed == \"No\"] = \"0\"\n#loan.Self_Employed[loan.Self_Employed == \"Yes\"] = \"1\"\n\n\nfrom sklearn.preprocessing import LabelEncoder\nclf = LabelEncoder()\nloan[\"Dependents\"] = clf.fit_transform(loan[\"Dependents\"])\n\nloan.Loan_Status[loan.Loan_Status == \"Y\"] = \"1\"\nloan.Loan_Status[loan.Loan_Status == \"N\"] = \"0\"\n\nloan.Property_Area[loan.Property_Area == \"Urban\"] = \"0\"\nloan.Property_Area[loan.Property_Area == \"Rural\"] = \"1\"\nloan.Property_Area[loan.Property_Area == \"Semiurban\"] = \"2\"","2a199382":"loan.head()","b53c4ad8":"#plotPerColumnDistribution(loan, 10, 5)\ncorr = loan.corr()\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","fb0262da":"%matplotlib inline\nloan.hist(figsize = (10,10))\nplt.show()","11afc24f":"# Density plots:\nloan.plot(kind='density',subplots = True , layout = (3,3) , sharex = False , figsize = (20,10))\nplt.show()","3a640bf7":"loan.plot(kind='box',subplots = True , layout = (3,3) , sharex = False , figsize = (20,20))\nplt.show()","34e46b83":"from matplotlib import pyplot\n#from pandas.tools.plotting import radviz\n#from pandas.tools.plotting import andrews_curves\n#radviz(loan , figsize = (20, 20))\n#sns.pairplot(loan ,  size = 3)\n#sns.set(style=\"white\", color_codes=True, edgecolor=\"gray\")\n#pyplot.show()\nsns.pairplot(loan.drop(\"Loan_ID\", axis=1), hue=\"Loan_Status\", size=3)","0cfac670":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nX_tra = loan.iloc[:, 1:12]\nY_tra = loan.iloc[:, 12:13]","08d51a0f":"bestfeature = SelectKBest(score_func = chi2, k=5)\nfit = bestfeature.fit(X_tra,Y_tra)","9ee4d23e":"dfscore = pd.DataFrame(fit.scores_)\nfcolumns = pd.DataFrame(X_tra.columns)","e93aed9c":"featurescores = pd.concat([fcolumns, dfscore], axis = 1)\nfeaturescores.columns = [\"spec\", \"scores\"]","1dfe357f":"featurescores","07d00ded":"from sklearn.model_selection import train_test_split\n\nx = loan[[\"Education\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Credit_History\",\"Property_Area\"]]\ny = loan[[\"Loan_Status\"]]\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 5)","198df8a9":"#venky = pd.DataFrame() ","35653fbd":"#comparing classification algorithms:\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom matplotlib import pyplot\nmodels = []\nmodels.append(('LR',LogisticRegression()))\nmodels.append(('LDA',LinearDiscriminantAnalysis()))\nmodels.append(('KNN',KNeighborsClassifier()))\nmodels.append(('CART',DecisionTreeClassifier()))\nmodels.append(('NB',BernoulliNB()))\nmodels.append(('SVM',SVC()))\nmodels.append((\"RD\",RandomForestClassifier()))\nresults=[]\nloan=[]\nfor loans,model in models:\n    ac= 0.0\n    rs =0\n    for n in range(1, 100):\n        kfold = KFold(n_splits=7,random_state=n)\n        result = cross_val_score(model,x,y,cv=kfold,scoring='accuracy')\n        #print(result.mean())\n        if result.mean() > ac:\n            ac = result.mean()\n            rs = n\n            results.append(result)\n            loan.append(loans)\n            #print(ac, rs)\n    print(\"%s: %f %.3f (%.3f)\" %(loans,rs,ac,result.std()))\n        #k= \n   \n    #print(k)\n       ","11ec3314":"venky = pd.DataFrame(venky)\nvenky.head()","203c9179":"fig=pyplot.figure()\nfig.suptitle('Classification Algorithms Accuracy Comparision:')\nax=fig.add_subplot(111)\npyplot.boxplot(results)\nax.set_xticklabels(loan)\npyplot.grid()\npyplot.show()","61fb45f4":"loan_test.head()","14981f7c":"loan_test.shape","4f152389":"loan_test.info()","9b913f61":"loan_test.isnull().sum()","4754f47f":"loan_test.dropna(subset = [\"Gender\"], how = \"all\", inplace = True)\n\nloan_test.dropna(subset = [\"Dependents\"], how = \"all\", inplace = True)\n\nloan_test.dropna(subset = [\"Self_Employed\"], how = \"all\", inplace = True)\n\navg_depa = loan_test.LoanAmount.mean()\nloan_test.LoanAmount = loan_test.LoanAmount.fillna(value = avg_depa)\n\navg_depa = loan_test.Loan_Amount_Term.mean()\nloan_test.Loan_Amount_Term = loan_test.Loan_Amount_Term.fillna(value = avg_depa)\n\navg_depa = loan_test.Credit_History.mean()\nloan_test.Credit_History = loan_test.Credit_History.fillna(value = avg_depa)","687a35f8":"loan_test.isnull().sum()","ce076221":"k = loan_test[[\"Education\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Credit_History\",\"Property_Area\"]]","7a6da4f6":"a = loan_test[[\"Loan_ID\"]]","8876e1c7":"del loan_test[\"Gender\"]\ndel loan_test[\"Married\"]\ndel loan_test[\"Dependents\"]\ndel loan_test[\"Self_Employed\"]\ndel loan_test[\"Loan_Amount_Term\"]","d64c2625":"k.Education[k.Education == \"Graduate\"] = \"0\"\nk.Education[k.Education == \"Not\"] = \"1\"\nk.Education[k.Education == \"Not Graduate\"] = \"2\"","63d008b5":"k.Property_Area[k.Property_Area == \"Urban\"] = \"0\"\nk.Property_Area[k.Property_Area == \"Rural\"] = \"1\"\nk.Property_Area[k.Property_Area == \"Semiurban\"] = \"2\"","44283bc1":"z = k","2b1bf82b":"z.head()","805f022a":"leg = LogisticRegression(random_state=50)\n#leg = LinearDiscriminantAnalysis()\n\nleg = leg.fit(x_train, y_train)\ny_pred2 = leg.predict(z)","9a41ec29":"y_pred2","50598d96":"my_submission = pd.DataFrame({\"loan_ID\": a.Loan_ID, \"Loan_status\": y_pred2})","26c6d9ff":"my_submission","c7ba84d3":"my_submission.to_csv(\"submission.csv\", index = False)","71912347":"venky = pd.DataFrame() \nvenky['rs']= None\nvenky['ac']= None\nindex_ac =  venky.columns.get_loc('ac')\nindex_rs =  venky.columns.get_loc('rs')\nvenky.size"}}