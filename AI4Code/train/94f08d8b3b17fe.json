{"cell_type":{"6880b158":"code","507d1907":"code","c1805f00":"code","ad4db7a4":"code","12e2682e":"code","1ec27ffd":"code","88305362":"code","1d0bbb0c":"code","c76c82e8":"code","86affdbd":"code","da3c57bf":"code","c6da0557":"code","8fa739d5":"code","883bedce":"code","264c78d1":"code","0b745530":"code","68280987":"code","f1218d5e":"code","9b897fa9":"code","b14c63a1":"code","3bdb061f":"code","2b41d862":"code","3e70d22c":"code","b455543f":"code","8a17439d":"code","d17b274e":"code","43976246":"code","00c9b7f3":"code","c5287c1e":"code","48bf0199":"code","61935fb2":"code","e5191898":"code","488b1018":"code","cd1b9576":"code","717849c2":"code","7be12b4b":"code","e27d636e":"markdown"},"source":{"6880b158":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","507d1907":"athletes = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv\")\nregion   = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv\")","c1805f00":"athletes.head()","ad4db7a4":"region.head()","12e2682e":"athletes_df = athletes.merge(region, how='left', on = 'NOC')\nathletes_df.head()","1ec27ffd":"athletes_df.shape","88305362":"#making columns name consistent\nathletes_df.rename(columns={'region':'Region','notes':'Notes'}, inplace=True)\nathletes_df.head()","1d0bbb0c":"athletes_df.info()","c76c82e8":"athletes_df.describe(include='all')","86affdbd":"#check for null values\nnan_values = athletes_df.isna()\nnan_columns = nan_values.any()\nnan_columns","da3c57bf":"athletes_df.isnull().sum()","c6da0557":"#listing all the column names that have null value in them\nnull_cols = []\nfor item in athletes_df.columns:\n    if athletes_df[item].isna().any() == True:\n        null_cols.append(item)\nprint(null_cols)","8fa739d5":"#India details \nathletes_df.query('Team==\"Pakistan\"').head()","883bedce":"#checking top 10 countries\ntop_10_countries = athletes_df.Team.value_counts().sort_values(ascending=False).head(10)\ntop_10_countries","264c78d1":"#plot the top 10 countries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nplt.figure(figsize=(12,6))\nplt.title('Overall Participation by Country')\nsns.barplot(x=top_10_countries.index, y= top_10_countries, palette='Set2')","0b745530":"#Check age distribution of particpants\n\nplt.figure(figsize=(12,6))\nplt.title(\"Age Distribution of the Athletes\")\nplt.xlabel('Age')\nplt.ylabel('Number of participants')\nplt.hist(athletes_df.Age, bins= np.arange(10,80,2),color = 'orange', edgecolor= 'white')","68280987":"#let's check for summer and winter sports games\n\nwinter_sports = athletes_df[athletes_df.Season=='Winter'].Sport.unique()\nwinter_sports","f1218d5e":"\nsummer_sports = athletes_df[athletes_df.Season=='Summer'].Sport.unique()\nsummer_sports","9b897fa9":"#Male and Female Participants\n\ngender_counts = athletes_df.Sex.value_counts()\ngender_counts","b14c63a1":"plt.figure(figsize=(12,6))\nplt.title('Gender Distribution')\nplt.pie(gender_counts, labels = gender_counts.index, autopct='%1.1f%%', startangle=150, shadow=True)","3bdb061f":"#let's check for total medals\n\nathletes_df.Medal.value_counts()","2b41d862":"#total number of female athletes in each olympics in summer\n\nfemale_particpants = athletes_df[(athletes_df.Sex=='F')&(athletes_df.Season=='Summer')][['Sex','Year']]\nfemale_particpants = female_particpants.groupby('Year').count().reset_index()\nfemale_particpants.tail()","3e70d22c":"women_olympics = athletes_df[(athletes_df.Sex=='F')&(athletes_df.Season=='Summer')]","b455543f":"sns.set(style='darkgrid')\nplt.figure(figsize=(20,10))\nsns.countplot(x='Year',data=women_olympics, palette='Spectral')\nplt.title('Women Participation')","8a17439d":"part = women_olympics.groupby('Year')['Sex'].value_counts()\nplt.figure(figsize=(20,10))\npart.loc[:,'F'].plot()\nplt.title('Plot of female athletes over time')","d17b274e":"# Gold medal athletes\n\ngold_medals = athletes_df[(athletes_df.Medal=='Gold')]\ngold_medals.head()","43976246":"#take values that are different from NaN\ngold_medals = gold_medals[np.isfinite(gold_medals['Age'])]","00c9b7f3":"#people over 60\ngold_medals['ID'][gold_medals['Age']>60].count()","c5287c1e":"sporting_event = gold_medals['Sport'][gold_medals['Age']>60]\nsporting_event","48bf0199":"plt.figure(figsize=(10,5))\nplt.tight_layout()\nsns.countplot(sporting_event)\nplt.title('Gold Medals for age over 60 years')","61935fb2":"#Gold Medals from each country\ngold_medals.Region.value_counts().reset_index(name='Medal').head(5)","e5191898":"total_gold_medals = gold_medals.Region.value_counts().reset_index(name='Medal').head(6)\ng = sns.catplot(x='index', y='Medal',data=total_gold_medals, height=5, kind='bar',palette='rocket')\n\ng.despine(left=True)\ng.set_xlabels('Top 5 Countries')\ng.set_ylabels('Number of Medals')\nplt.title('Gold Medals per Country')","488b1018":"#Rio olympics\n\nmax_year = athletes_df.Year.max()\nprint(max_year)\n\nteam_names = athletes_df[(athletes_df.Year == max_year)& (athletes_df.Medal=='Gold')].Team\nteam_names.value_counts().head(10)","cd1b9576":"sns.barplot(x=team_names.value_counts().head(20), y=team_names.value_counts().head(20).index )\nplt.ylabel(None)\nplt.xlabel('Countrywise Medals for the year 2016')","717849c2":"#scatter plot for male\/female height and weight\n\nnot_null_medals = athletes_df[(athletes_df['Height'].notnull()) & (athletes_df['Weight'].notnull())]","7be12b4b":"plt.figure(figsize=(12,10))\naxis = sns.scatterplot(x='Height', y='Weight', data = not_null_medals, hue='Sex')\nplt.title('Height vs Weight of Olympic Medalists')","e27d636e":"join the dataframe"}}