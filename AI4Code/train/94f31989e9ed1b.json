{"cell_type":{"d1e75e0b":"code","2d36dd01":"code","a3e05bee":"code","bbd817b5":"code","e8e19759":"code","b453600a":"code","fd59e297":"code","6ea34f60":"code","dd47e404":"code","a68093dd":"code","99c99373":"code","52ab3948":"code","ee215f78":"code","3367b399":"code","01fd3eed":"code","85796ce6":"code","def1b632":"code","c3f44069":"code","e590f799":"code","842025df":"markdown","5cbab279":"markdown","5a467a6b":"markdown","b630fbb3":"markdown","4abb36e5":"markdown","7419fb61":"markdown","d993fb89":"markdown"},"source":{"d1e75e0b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","2d36dd01":"df1 = pd.read_csv( '\/kaggle\/input\/uncover\/UNCOVER\/ECDC\/current-data-on-the-geographic-distribution-of-covid-19-cases-worldwide.csv' )\ndf1 = df1.drop(columns=[ 'daterep', 'geoid' ])\ndf1.head()","a3e05bee":"df2 = pd.read_csv( '\/kaggle\/input\/uncover\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-over-time.csv' )\ndf2 = df2.drop(columns=[ 'recovered', 'delta_recovered', 'active', 'people_tested', 'people_hospitalized', 'province_state', 'uid', 'iso3', 'report_date_string' ])\ndf2.head()","bbd817b5":"def fig1(countries_array, population=False):\n    plt.figure(figsize=(12,5))\n    for country in countries_array:\n        if population == True:\n            country_population = int((df1[df1['countriesandterritories'] == country])[ 'popdata2018' ].drop_duplicates())\n        else:\n            country_population = 1\n            \n        country_data = (df1[df1['countriesandterritories']==country])\n        country_data = country_data[ country_data['cases'] > 0 ]\n        dates = np.array(country_data[[ 'day', 'month', 'year']])\n\n        date = []\n        for d in range(len(np.array(country_data))):\n            date.append( str(dates[d,2]) + '-0' + str(dates[d,1]) + '-' + str(dates[d,0]).zfill(2) )\n\n        days = len(country_data)\n        day_array = np.arange(0,days,1)\n\n\n        # Plots\n\n        plt.plot(day_array[::-1], abs(country_data['cases'])\/country_population , label = country )\n        plt.legend()\n        plt.xlabel('Day')\n        plt.ylabel('New cases')\n\n    plt.title('New COVID-19 cases', fontsize = 18 )\n    \n\ndef fig2(countries_array, population=False):\n    plt.figure(figsize=(12,5))\n    for country in countries_array:\n        if population == True:\n            country_population = int((df1[df1['countriesandterritories'] == country])[ 'popdata2018' ].drop_duplicates())\n        else:\n            country_population = 1\n            \n        country_data = (df1[df1['countriesandterritories']==country])\n        country_data = country_data[ country_data['cases'] > 0 ]\n        dates = np.array(country_data[[ 'day', 'month', 'year']])\n\n        date = []\n        for d in range(len(np.array(country_data))):\n            date.append( str(dates[d,2]) + '-0' + str(dates[d,1]) + '-' + str(dates[d,0]).zfill(2) )\n\n        \n        days = len(country_data)\n        day_array = np.arange(0,days,1)\n\n        # Cumulative\n        country_population = int((df1[df1['countriesandterritories'] == country])[ 'popdata2018' ].drop_duplicates())\n        country_data2 = df2[df2['country_region']== country]\n        country_data2 = country_data2[country_data2['confirmed'] > 0 ]\n        ii = []\n\n        for i in range(len(date)):\n            ii.append( list(country_data2['last_update'].astype('str')).index(date[i]) )\n\n        country_data2 = country_data2.iloc[ii[::-1]]\n        # Plots\n\n        plt.plot(day_array, country_data2['confirmed'], label = country )\n        plt.legend()\n        plt.xlabel('Day')\n        plt.ylabel('Cummulative COVID-19 cases')\n\n    plt.title('Cumulative COVID-19 cases', fontsize = 18 )\n","e8e19759":"fig1(['Colombia'])\nfig2(['Colombia'])","b453600a":"sudamerica_countries = ['Argentina', 'Bolivia', 'Brazil', 'Chile', 'Colombia', 'Ecuador', 'Paraguay', 'Peru', 'Uruguay', 'Venezuela']\nfig1(sudamerica_countries)\nfig2(sudamerica_countries)","fd59e297":"countries = ['Colombia', 'Spain', 'Italy', 'Germany', 'France', 'Canada', 'Mexico']\nfig1(countries)\nfig2(countries)","6ea34f60":"df3 = pd.read_csv( '\/kaggle\/input\/uncover\/UNCOVER\/johns_hopkins_csse\/johns-hopkins-covid-19-daily-dashboard-cases-by-country.csv' )\ndf3 = df3.drop(columns=[ 'people_tested', 'people_hospitalized', 'uid', 'iso3' ])\ndf3 = df3.dropna()\nprint(np.shape(df3))\ndf3.head()","dd47e404":"import sklearn.manifold\nimport sklearn.datasets\nimport sklearn.cluster\nimport umap","a68093dd":"X = df3[['lat', 'long', 'incident_rate', 'mortality_rate' ]]\nY = np.array(df3['mortality_rate'])\n\ntarget = []\nfor i in range(len(Y)):\n    if Y[i]>=0 and Y[i]<1:\n        target.append( 0 )\n    elif Y[i]>=1 and Y[i]<10:\n        target.append( 1 )\n    elif Y[i]>=10:\n        target.append( 2 )\n\nbest_neighbors = 10\nmin_dist = 0.05\nreducer = umap.UMAP(n_neighbors=best_neighbors, min_dist=min_dist, metric='correlation')\n\n# Ahora ejecutamos la fase de aprendizaje\nreducer.fit(X)\n\n# Extraemos la representaci\u00f3n de los datos en el espacio bidimensional\nembedding = reducer.embedding_","99c99373":"# clusters sobre los resultados de tsne\nn_clusters = 3\nk_means = sklearn.cluster.KMeans(n_clusters=n_clusters)\nk_means.fit(embedding) # training\ncluster = k_means.predict(embedding) # predice a cual cluster corresponde cada elmento\ndistance = k_means.transform(embedding) # calcula la distancia de cada elemento al centro de su cluster","52ab3948":"plt.figure(figsize=(15,5))\nplt.angulos = np.linspace(0,2*np.pi,100)\n\nplt.subplot(1,2,1)\nplt.title( 'Neighbors = ' + str(best_neighbors) + ', Min dis = ' + str(min_dist) )\nplt.scatter(embedding[:,0], embedding[:,1], c=target, cmap='viridis', s=10.0)\nplt.colorbar()\n\n\nplt.subplot(1,2,2)\nplt.title( 'N\u00famero de cl\u00faster = ' + str(n_clusters) )\nplt.scatter(embedding[:,0], embedding[:,1], c=cluster, cmap='viridis', s=10.0)\nplt.colorbar()\nplt.show()","ee215f78":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport sklearn.metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score","3367b399":"X = df3[['country_region', 'lat', 'long', 'incident_rate']]\nY = np.array(df3['mortality_rate'])\n\n# Vamos a hacer un split training test\nscaler = StandardScaler()\nX_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size=0.5 )\n\ntrain_countries = X_train['country_region']\ntest_countries = X_test['country_region']","01fd3eed":"model = LinearRegression()\nmodel.fit( X_train[[ 'lat', 'long', 'incident_rate' ]], Y_train )\nY_pred = model.predict( X_test[[ 'lat', 'long', 'incident_rate' ]] )\n\n# The coefficients\nprint('Coefficients: ', model.coef_)\n\nprint('Mean squared error: {:2f}'.format(mean_squared_error(Y_test, Y_pred)))\n\nprint('r2: {:2f}'.format( r2_score(Y_test, Y_pred)))","85796ce6":"from sklearn.linear_model import LogisticRegression\n\nX = df3[['country_region', 'lat', 'long', 'incident_rate']]\nY = np.array(df3['mortality_rate'])\n\ntarget = []\nfor i in range(len(Y)):\n    if Y[i]>=0 and Y[i]<1:\n        target.append( 0 )\n    elif Y[i]>=1 and Y[i]<10:\n        target.append( 1 )\n    elif Y[i]>=10:\n        target.append( 2 )\n\ntarget = np.array(target)","def1b632":"unique, counts = np.unique(target, return_counts=True)\ndict(zip(unique, counts))","c3f44069":"X_train, X_test, Y_train, Y_test = train_test_split( X, target, train_size=0.5 )\n\nmodel = LogisticRegression()\nmodel.fit( X_train[[ 'lat', 'long', 'incident_rate' ]], Y_train )\nY_pred = model.predict( X_test[[ 'lat', 'long', 'incident_rate' ]] )\n\nprint('F1', sklearn.metrics.f1_score(Y_test, Y_pred, average='macro') )","e590f799":"Colombia_df3 = (df3[df3['country_region']=='Colombia'])[['lat', 'long', 'incident_rate', 'mortality_rate']]\nColombia_mortality = float(Colombia_df3['mortality_rate'])\n\nif Colombia_mortality>=0 and Colombia_mortality<1:\n    Colombia_test = 0 \nelif Colombia_mortality>=1 and Colombia_mortality<10:\n    Colombia_test = 1\nelif Colombia_mortality>=10:\n    Colombia_test = 2\n\nprint( 'Thrut = ' , Colombia_test , '; Predict = ', int(model.predict(Colombia_df3[['lat', 'long', 'mortality_rate']])) )   ","842025df":"# Logistic Regression","5cbab279":"UMAP","5a467a6b":"# Exploratory Analysis","b630fbb3":"## Linear Regression","4abb36e5":"## Cumulative and daily COVID-19 cases in Sudamerica","7419fb61":"## Cumulative and daily COVID-19 cases in Colombia ","d993fb89":"# **COVID-19 in Colombia**"}}