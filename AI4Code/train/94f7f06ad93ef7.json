{"cell_type":{"beb23ef1":"code","084494e0":"code","c8715b97":"code","219b20e4":"code","49b68066":"code","5fc9f980":"code","4914ff6e":"code","28daf648":"code","4be0bbb4":"code","d1dcf900":"code","2c20ae83":"code","e33d0784":"code","d0d5dd92":"code","233d7e6f":"code","104e17d4":"code","52bf4723":"code","72fe0737":"code","bc235596":"code","313c68d8":"code","07374483":"code","e22fefee":"code","96e6edcd":"code","741f2546":"code","8147aa9a":"code","93ca2e87":"code","ce01ddb3":"code","5ca11eec":"code","e92de84c":"code","3ba00570":"code","2d378fc3":"code","9040f269":"code","a9a157f3":"code","e5bfee44":"code","ccecaa47":"code","72982240":"code","f014d4f5":"code","98283433":"code","7654e0e4":"code","f581921f":"code","b80f9e41":"code","f02be019":"code","6cea3a77":"code","f20ff1c5":"code","a21a6af3":"code","43929303":"code","760b33d8":"markdown","525cc817":"markdown","ce556582":"markdown","abf8e932":"markdown","a6308bd8":"markdown","bb5284bb":"markdown","a70213d2":"markdown"},"source":{"beb23ef1":"#import the libraries\nimport pandas as pd\nimport numpy as np","084494e0":"#lets load the file into dataset as variable\nmovies_df = pd.read_csv('..\/input\/data-science-machine-learning-and-ai-using-python\/IMDB-Movie-Data.csv', index_col='Title')","c8715b97":"#use head to view whats in dataset\nmovies_df.head(10)","219b20e4":"#lets print the shape of the dataset\nmovies_df.shape","49b68066":"#lets get the information about our dataset\nmovies_df.info()","5fc9f980":"#Lets handle duplicate entries\ntmp_df = movies_df.append(movies_df)\ntmp_df.shape","4914ff6e":"#lets drop the duplicates\ntemp_df = tmp_df.drop_duplicates()\ntemp_df.shape","28daf648":"tmp_new_df = temp_df.append(temp_df)","4be0bbb4":"tmp_new_df.drop_duplicates(inplace=True)\ntmp_new_df.shape","d1dcf900":"tmp_new_df = temp_df.append(temp_df)","2c20ae83":"tmp_new_df.drop_duplicates(inplace = True, keep=False)\ntmp_new_df.shape","e33d0784":"#Column Cleanup\n#lets print the column names\nmovies_df.columns","d0d5dd92":"#lets rename our runtime and revenue columns\nmovies_df.rename(columns={\n    'Runtime (Minutes)':'Runtime',\n    'Revenue (Millions)':'Revenue'\n},inplace=True)","233d7e6f":"movies_df.columns","104e17d4":"#task: rename all the column names with lower case\nmovies_df.columns = [col.lower() for col in movies_df]\nmovies_df.columns","52bf4723":"#lets calculate null values in each column of our dataset\nmovies_df.isnull()","72fe0737":"#lets count total number of null values\nmovies_df.isnull().sum()","bc235596":"#Removing null values\n#Imputation: Its a cinventional feature engineering technique used to keep\n#valuable data that have null values,\nrev = movies_df['revenue']\nrev.head()","313c68d8":"#lets calculate the mean\nrev_mean = rev.mean()\nrev_mean","07374483":"#lets fill the nulls using fillna \nrev.fillna(rev_mean, inplace=True)","e22fefee":"movies_df.isnull().sum()","96e6edcd":"meta = movies_df['metascore']\nmeta_mean = meta.mean()\nmeta_mean\nmeta.fillna(meta_mean, inplace=True)\nmovies_df.isnull().sum()","741f2546":"#Underaranding the variables\nmovies_df.describe()","8147aa9a":"movies_df['genre'].describe()","93ca2e87":"#Lets find the relationship between continous variables\nmovies_df.corr()","ce01ddb3":"#By Columns\ngenre_col = movies_df['genre']\ntype(genre_col)","5ca11eec":"genre_col = movies_df[['genre']]\ntype(genre_col)","e92de84c":"subset = movies_df[['genre','rating']]\nsubset.head()","3ba00570":"#by rows\n#.loc: locates the value by name\n#.iloc: locates by numeric index\n\nprom = movies_df.loc['Prometheus']\nprom","2d378fc3":"#.iloc\nprom_iloc = movies_df.iloc[1]\nprom_iloc","9040f269":"#Conditional Selection\ncond = (movies_df['director'] == 'Ridley Scott')\ncond.head()","a9a157f3":"movies_df[cond]","e5bfee44":"#print all the movies whose rating is greater than 8.0\nmovies_df[movies_df['rating'] >= 8.0].head(10)","ccecaa47":"#Using multiple conditons\nmovies_df[(movies_df['director'] == 'Christopher Nolan')| cond]","72982240":"#isin()\nmovies_df[movies_df['director'].isin(['Ridley Scott','Christopher Nolan'])]","f014d4f5":"movies_df[\n          (movies_df['year']>=2005) & (movies_df['year']<=2010)\n          & (movies_df['rating']>8.0) \n          & (movies_df['revenue']<movies_df['revenue'].quantile(0.25))\n          ]","98283433":"#Applying functions\ndef rating_fun(x):\n  if(x >= 8.0):\n    return \"Good Movie\"\n  else:\n    return \"Bad Movie\"","7654e0e4":"movies_df['user_review_column'] = movies_df['rating'].apply(rating_fun)\nmovies_df.head()","f581921f":"#lets import the library\nimport matplotlib.pyplot as plt\n","b80f9e41":"plt.rcParams.update({'font.size':20, 'figure.figsize':(10,8)})","f02be019":"#lets plot the relationship between Rating and Revenue\nmovies_df.plot(kind='scatter', x = 'rating', y = 'revenue', title='Revenue v\/s Rating');","6cea3a77":"#lets plot a histogram on a single colum\nmovies_df['rating'].plot(kind='hist',title='Rating');","f20ff1c5":"#lets get the description of our dataframe\nmovies_df['rating'].describe()","a21a6af3":"#lets display it using box plot\nmovies_df['rating'].plot(kind='box');","43929303":"#combining a=categorical and continuous data\nmovies_df.boxplot(column='revenue',by= 'user_review_column');","760b33d8":"task: \n1. print all the movies that are released between the year 2005 and 2010\n2. whose rating is more than 8.0\n3. which made 25th percentile in revenue. (hint: use quantile(.25) to calculate the percentile.)","525cc817":"**Project:**\n\n**Movie Recomender System**\n\nA pandas based movie recommender system to recomend good or bad movies.","ce556582":"**Working with missing values**","abf8e932":"# **Data Visulaization using Matplotlib**","a6308bd8":"# **Day 7**\n\n**Working with missing values**","bb5284bb":"**Data Frame slicing, selecting and extracting**","a70213d2":"drop_duplicates(keep=[first,last,fasle])\n\nfirst: (default) Drops duplicates except for the first occurence\n\nlast: Drops duplicates except for the last occurence\n\nfasle: Drops all duplicates"}}