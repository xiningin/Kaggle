{"cell_type":{"945012df":"code","f35330da":"code","99882186":"code","d9d1eb7e":"code","1d59524c":"code","2c25e1af":"code","f38d5eec":"code","d314cc66":"code","f6de5b7f":"code","284de72f":"code","b88c79d6":"markdown","7f2f0b0f":"markdown","169b0f3c":"markdown","6dfd5e6b":"markdown","0e44d3b9":"markdown","8593d439":"markdown","fc9da752":"markdown"},"source":{"945012df":"import numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport urllib\nfrom google.cloud import bigquery\nfrom kaggle_secrets import UserSecretsClient\n\nbigquery_client = bigquery.Client(project=\"ny-data-263413\")","f35330da":"### BigQuery ###\n#\nsql = \"\"\"\n      SELECT EXTRACT(YEAR FROM starttime) AS year,\n             EXTRACT(MONTH FROM starttime) AS month,\n             usertype AS user_type,\n             COUNT(usertype) AS count\n      FROM `bigquery-public-data.new_york.citibike_trips`\n      GROUP BY year, month, user_type\n      ORDER BY year, month, user_type\n      \"\"\"\n\nquery_job = bigquery_client.query(sql)\nresults = query_job.result()\n\n#\ndata_users = pd.DataFrame()\nfor row in results :\n    data_users = data_users.append([[int(row.year),\n                                     int(row.month),\n                                     row.user_type,\n                                     row.count]])\ndata_users = data_users.rename(columns = {0 : \"year\",\n                                          1 : \"month\",\n                                          2 : \"user_type\",\n                                          3 : \"count\"})\n\ndata_users = data_users.reset_index(drop = True)","99882186":"### Plot Percentages ###\n# Calculate\ndata_users[\"percent\"] = (data_users.groupby([\"year\", \"month\"])[\"count\"]\n                                   .apply(lambda x : 100*x\/sum(x))\n                        )\ndata_users[\"month_num\"] = (data_users[\"year\"]-min(data_users[\"year\"]))*12+data_users[\"month\"]\ndata_users = data_users.sort_values(\"month_num\")\n\n# Plot totals\nfig = plt.figure(figsize=(6,4), dpi = 150)\nax_total = fig.add_subplot(1,1,1)\n\nax_total.plot(data_users.loc[data_users[\"user_type\"] == \"Subscriber\", \"month_num\"],\n              data_users.loc[data_users[\"user_type\"] == \"Subscriber\", \"count\"],\n              linewidth = 3)\nax_total.plot(data_users.loc[data_users[\"user_type\"] == \"Customer\", \"month_num\"],\n              data_users.loc[data_users[\"user_type\"] == \"Customer\", \"count\"],\n              linewidth = 3)\n\ndata_total = data_users.groupby(\"month_num\", as_index=False)[\"count\"].aggregate(\"sum\")\nax_total.plot(data_total[\"month_num\"], data_total[\"count\"], linewidth = 3)\n\n# Aesthetics\nax_total.set_title(\"Total Number of Journeys By Month\", fontsize = 16)\nax_total.set_ylabel(\"Number of Journeys (millions)\", fontsize = 16)\nax_total.set_xlim(left = (7,45))\nax_total.set_ylim(bottom = (0,1.8*10**6))\nax_total.set_xticks(range(7,46, 3))\nax_total.set_xticklabels([\"{}\/{}\".format(row[\"month\"], row[\"year\"])\n                          for index, row in data_users.loc[data_users[\"user_type\"]==\"Subscriber\"]\n                                                      .iterrows()\n                          if row[\"month\"] in [1,4,7,10]\n                         ],\n                         rotation = -45,\n                         fontsize = 12)\nax_total.set_yticks([i for i in range(0, int(1.8*10**6)+1, int(0.2*10**6))])\nax_total.set_yticklabels([i\/10 for i in range(0, 19, 2)], fontsize = 12)\nax_total.legend((\"Subscribers\", \"Customers\", \"Total\"),\n                fontsize=16, \n                ncol=3,\n                bbox_to_anchor = (1.15,-0.3))\nax_total.spines[\"right\"].set_visible(False)\nax_total.spines[\"top\"].set_visible(False)\n\n# Plot percentages\nfig = plt.figure(figsize=(6,4), dpi = 125)\n\nax_percentage = fig.add_subplot(1,1,1)\nax_percentage.plot(data_users.loc[data_users[\"user_type\"] == \"Subscriber\", \"month_num\"],\n                   data_users.loc[data_users[\"user_type\"] == \"Subscriber\", \"percent\"],\n                   linewidth = 3)\nax_percentage.plot(data_users.loc[data_users[\"user_type\"] == \"Customer\", \"month_num\"], \n                   data_users.loc[data_users[\"user_type\"] == \"Customer\", \"percent\"],\n                   linewidth = 3)\n# Aesthetics\nax_percentage.set_title(\"Percentage of Total Journeys by User Type\", fontsize = 16)\nax_percentage.set_ylabel(\"Percentage\", fontsize = 16)\nax_percentage.set_xticks(range(7,46, 3))\nax_percentage.set_xticklabels([\"{}\/{}\".format(row[\"month\"], row[\"year\"])\n                               for index, row in data_users.loc[data_users[\"user_type\"]==\"Subscriber\"]\n                                                           .iterrows()\n                               if row[\"month\"] in [1,4,7,10]\n                              ],\n                              rotation = -45,\n                              fontsize = 12)\nax_percentage.set_yticks([i for i in range(0,110,10)])\nax_percentage.set_yticklabels([i for i in range(0,110,10)], fontsize = 12)\nax_percentage.set_xlim(left = (7,45))\nax_percentage.set_ylim(bottom = (0,100))\nax_percentage.spines[\"right\"].set_visible(False)\nax_percentage.spines[\"top\"].set_visible(False)\n\nplt.show()","d9d1eb7e":"### NY Data ###\n# BigQuery\nsql = \"\"\"\n        SELECT start_year AS year,\n               start_season AS season,\n               station_id,\n               longitude,\n               latitude,\n               start_usertype AS user_type,\n               start_table.start_count + end_table.end_count AS count\n        FROM (\n                (\n                    SELECT EXTRACT(YEAR FROM starttime) AS start_year,\n                           CASE WHEN EXTRACT(MONTH FROM starttime) <= 2\n                                THEN 1\n                                ELSE CEILING(ABS(EXTRACT(MONTH FROM starttime)-2)\/3)\n                                END AS start_season,\n                           start_station_id,\n                           usertype AS start_usertype,\n                           COUNT(start_station_id) AS start_count,\n                    FROM `bigquery-public-data.new_york.citibike_trips`\n                    GROUP BY start_year, \n                             start_season, \n                             start_station_id,\n                             start_usertype\n                ) AS start_table\n                FULL JOIN\n                (\n                    SELECT EXTRACT(YEAR FROM stoptime) AS stop_year,\n                           CASE WHEN EXTRACT(MONTH FROM stoptime) <= 2\n                                THEN 1\n                                ELSE CEILING(ABS(EXTRACT(MONTH FROM stoptime)-2)\/3)\n                                END AS stop_season,\n                           end_station_id,\n                           usertype AS end_usertype,\n                           COUNT(end_station_id) AS end_count\n                    FROM `bigquery-public-data.new_york.citibike_trips`\n                    GROUP BY stop_year,\n                             stop_season,\n                             end_station_id,\n                             end_usertype\n                ) AS end_table\n                ON start_year=stop_year\n                   AND start_season=stop_season\n                   AND start_station_id=end_station_id\n                   AND start_usertype=end_usertype\n             )\n             JOIN `bigquery-public-data.new_york.citibike_stations`\n             ON start_station_id=station_id\n        ORDER BY year, season, user_type DESC, count DESC\n        LIMIT 100000\n       \"\"\"\n\nquery_job = bigquery_client.query(sql)\nresults = query_job.result()\n\n#\ndata = pd.DataFrame()\nfor row in results :\n    data = data.append([[int(row.year),\n                         int(row.season),\n                         row.station_id,\n                         row.longitude,\n                         row.latitude,\n                         row.user_type,\n                         row.count]])\ndata = data.rename(columns = {0 : \"year\",\n                              1 : \"season\",\n                              2 : \"station_id\",\n                              3 : \"longitude\",\n                              4 : \"latitude\",\n                              5 : \"user_type\",\n                              6 : \"count\"})\n\ndata[\"count\"] = pd.to_numeric(data[\"count\"])","1d59524c":"### Maps Static API ###\n#\nuser_secrets = UserSecretsClient()\nmaps_static_key = user_secrets.get_secret(\"maps_static\")\n\n# Convert longitude, latitude to pixel coordinates with zoom and vice versa\ndef lon_lat_to_pixel(lon, lat, zoom) :\n    lon_rad = 2*math.pi*lon\/360\n    x = 256 * 2**zoom * (lon_rad + math.pi) \/ (2*math.pi)\n    \n    lat_rad = 2*math.pi*lat\/360\n    y = 256 * 2**zoom \/ (2 * math.pi) * (math.log(math.tan(math.pi\/4 + lat_rad\/2)))\n    ##256 * 2**zoom \/ (2 * math.pi) * (math.pi - math.log(math.tan(math.pi\/4 + lat_rad\/2)))\n    \n    return [x, y]\ndef pixel_to_lon_lat(x, y, zoom) :\n    lon = x \/ (256 * 2**zoom) - 180\n    lat = 2 * math.atan(math.exp(math.pi - y \/ (256 * 2**zoom \/ (2 * math.pi)))) - math.pi \/ 2\n    \n    return [lon, lat]\ndata[\"pixel_x\"] = data.apply(lambda row : lon_lat_to_pixel(row[\"longitude\"],\n                                                           row[\"latitude\"],\n                                                           12)[0],\n                             axis = 1)\ndata[\"pixel_y\"] = data.apply(lambda row : lon_lat_to_pixel(row[\"longitude\"],\n                                                           row[\"latitude\"],\n                                                           12)[1],\n                             axis = 1)\n\n#\nlon = -73.987081\nlat = 40.736539\nzoom = 12\nsize_x, size_y = 600, 600\nscale = 1\nurl = (\"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?\" ##implement above\n       + \"center=\" + \"{},{}\".format(lat, lon) #lat,lon\n       + \"&zoom=\" + str(zoom)\n       + \"&size=\" + str(size_x) + \"x\" + str(size_y)\n       + \"&scale=\" + str(scale)\n       + \"&style=feature:all%7Celement:labels%7Cvisibility:off\"\n       + \"&key=\" + maps_static_key)\nurllib.request.urlretrieve(url, \"map.png\")\n\n## &style=feature:road.highway%7Celement:geometry%7Cvisibility:simplified%7Ccolor:0xc280e9&style=feature:transit.line%7Cvisibility:simplified%7Ccolor:0xbababa&style=feature:road.highway%7Celement:labels.text.stroke%7Cvisibility:on%7Ccolor:0xb06eba&style=feature:road.highway%7Celement:labels.text.fill%7Cvisibility:on%7Ccolor:0xffffff\n## url = \"https:\/\/maps.googleapis.com\/maps\/api\/staticmap?center=Berkeley,CA&zoom=14&size=400x400&key=\" + maps_static_key","2c25e1af":"### Plot ###\n#\nimg = plt.imread(\"map.png\")\nfig = plt.figure(figsize = (6,18), dpi = 150)\npixel_center = lon_lat_to_pixel(lon, lat, zoom)\n\n#\nnum = 0\nyear = 2014\nnorm = max(data.loc[data[\"year\"] == year][\"count\"])\naxlist = []\nfor user_type in [\"Subscriber\", \"Customer\"] :\n    season_name = {1 : \"Spring\", 2 : \"Summer\", 3 : \"Autumn\", 4 : \"Winter\"}\n    for season in range(1,5) :\n        ax = fig.add_subplot(4, 2, 1+2*(season-1)+num)\n        axlist.append(ax)\n        \n        # Image and pixel coordinates\n        ax.imshow(img, extent = [pixel_center[0] - size_x\/2,\n                                 pixel_center[0] + size_x\/2,\n                                 pixel_center[1] - size_y\/2,\n                                 pixel_center[1] + size_y\/2])\n        \n        # Plot\n        scatter = ax.scatter(data.loc[(data[\"season\"] == season)\n                                      & (data[\"year\"] == year)\n                                      & (data[\"user_type\"] == user_type)]\n                                     [\"pixel_x\"],\n                             data.loc[(data[\"season\"] == season)\n                                      & (data[\"year\"] == year)\n                                      & (data[\"user_type\"] == user_type)]\n                                     [\"pixel_y\"],\n                             1,\n                             c = data.loc[(data[\"season\"] == season)\n                                          & (data[\"year\"] == year)\n                                          & (data[\"user_type\"] == user_type)]\n                                         [\"count\"]\n                                     .apply(math.log, args = (10,)),\n                             vmin = 0,\n                             vmax = math.log(norm, 10),\n                             cmap = \"inferno\"\n                            )\n        \n        # Appearance\n        if season == 1 :\n            ax.set_title(user_type+\"s\", fontsize = 16)                \n        if user_type == \"Subscriber\" :\n            ax.set_ylabel(season_name[season], fontsize = 16)\n        ax.tick_params(bottom=False, left=False, top=False, right=False)\n        plt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n        plt.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)\n        for key, spine in ax.spines.items() :\n            spine.set_visible(False)\n    \n    num += 1\n\nticks = [0] + [math.log(j,10) for j in range(1,10)]\nticklabels = [0] + [\"\" for j in range(1,10)]\nfor i in range(1,5) :\n    ticks = ticks + [math.log(j * 10**i,10) for j in range(1,10)]\n    ticklabels = ticklabels + [10**i\n                               if j == 1\n                               else \"\"\n                               for j in range(1,10)]\n\ncbar = fig.colorbar(scatter,\n                    ax=axlist,\n                    ticks=ticks,\n                    orientation=\"horizontal\",\n                    anchor=(0.5,2))\ncbar.ax.set_xticklabels(ticklabels, rotation = -45)\n\nplt.show()","f38d5eec":"### BigQuery ###\nsql = \"\"\"\n        SELECT start_hour AS hour,\n               start_station_id AS station_id,\n               longitude,\n               latitude,\n               start_user_type AS user_type,\n               AVG(start_count+end_count) AS average\n        FROM (\n                 (\n                    SELECT DATE(starttime) AS start_date,\n                           EXTRACT(HOUR FROM starttime) AS start_hour,\n                           start_station_id,\n                           usertype AS start_user_type,\n                           COUNT(*) AS start_count\n                    FROM `bigquery-public-data.new_york.citibike_trips`\n                    GROUP BY start_date, start_hour, start_station_id, start_user_type\n                  ) AS start_table\n                  FULL JOIN\n                  (\n                    SELECT DATE(starttime) AS stop_date,\n                           EXTRACT(HOUR FROM stoptime) AS stop_hour,\n                           end_station_id,\n                           usertype AS end_user_type,\n                           COUNT(*) AS end_count\n                    FROM `bigquery-public-data.new_york.citibike_trips`\n                    GROUP BY stop_date, stop_hour, end_station_id, end_user_type\n                  ) AS end_table\n                  ON start_date=stop_date\n                     AND start_hour=stop_hour\n                     AND start_station_id=end_station_id\n                     AND start_user_type=end_user_type\n             )\n             JOIN `bigquery-public-data.new_york.citibike_stations`\n             ON start_station_id=station_id\n        GROUP BY hour, station_id, longitude, latitude, user_type\n        ORDER BY hour, user_type DESC, average DESC\n        LIMIT 400000\n      \"\"\"\n\nquery_job = bigquery_client.query(sql)\nresults = query_job.result()\n\n#\ndata_hours = pd.DataFrame()\nfor row in results :\n    data_hours = data_hours.append([[int(row.hour),\n                                     row.station_id,\n                                     row.longitude,\n                                     row.latitude,\n                                     row.user_type,\n                                     row.average]])\ndata_hours = data_hours.rename(columns = {0 : \"hour\",\n                                          1 : \"station_id\",\n                                          2 : \"longitude\",\n                                          3 : \"latitude\",\n                                          4 : \"user_type\",\n                                          5 : \"average\"})\n\ndata_hours = data_hours.reset_index(drop = True)","d314cc66":"### Plot ###\nfig = plt.figure(figsize = (10,5), dpi = 150)\nax = fig.add_subplot(1,1,1)\n\nax.plot(data_hours.loc[data_hours[\"user_type\"] == \"Subscriber\",\"hour\"]\n                  .unique(),\n        data_hours.loc[data_hours[\"user_type\"] == \"Subscriber\"]\n                .groupby([\"hour\"], as_index=False)\n                [\"average\"]\n                .aggregate([\"sum\"]),\n        linewidth = 3\n       )\nax.plot(data_hours.loc[data_hours[\"user_type\"] == \"Customer\",\"hour\"]\n                  .unique(), \n        data_hours.loc[data_hours[\"user_type\"] == \"Customer\"]\n                .groupby([\"hour\"], as_index=False)\n                [\"average\"]\n                .aggregate([\"sum\"]),\n        linewidth = 3\n       )\n\nax.set_title(\"Average Total Journeys in a Day by Hour\", fontsize = 25)\nax.set_ylabel(\"Average\", fontsize = 25)\nax.set_xlabel(\"Hour of the Day\", fontsize = 25)\nax.set_xlim(left = (0,24))\nax.set_xticks(range(0,24,3))\nax.set_xticklabels(labels = range(0,24,3), fontsize = 20)\nax.set_yticks(range(0,8001,1000))\nax.set_yticklabels(labels = range(0,8001,1000), fontsize = 20)\nax.legend(bbox_to_anchor=(1, 0.7), fontsize = 20, labels = (\"Subscribers\", \"Customers\"))\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\n\nplt.show()","f6de5b7f":"### Map ###\ndata_hours[\"pixel_x\"] = data_hours.apply(lambda row : lon_lat_to_pixel(row[\"longitude\"],\n                                                                       row[\"latitude\"],\n                                                                       12)[0],\n                             axis = 1)\ndata_hours[\"pixel_y\"] = data_hours.apply(lambda row : lon_lat_to_pixel(row[\"longitude\"],\n                                                                       row[\"latitude\"],\n                                                                       12)[1],\n                             axis = 1)\n\n### Plot ###\nfrom matplotlib.animation import FuncAnimation\n\ndata_hours = data_hours.loc[~np.isnan(data_hours[\"average\"])]\n\n#\nuser_type = \"Subscriber\"\n\n#\nfig = plt.figure(dpi = 150)\nax = fig.add_subplot(1, 1, 1)\n\nax.imshow(img, extent = [pixel_center[0] - size_x\/2,\n                         pixel_center[0] + size_x\/2,\n                         pixel_center[1] - size_y\/2,\n                         pixel_center[1] + size_y\/2])\n\n\nnorm = max(data_hours.loc[data_hours[\"user_type\"] == user_type][\"average\"])\n\nscatter = ax.scatter([], [], 2, c=[], vmin=0, vmax=math.log(100, 10), cmap=\"inferno\")\nann = ax.annotate(s = \"Hour \"+str(0),\n                  xy = (pixel_center[0] - size_x\/2, pixel_center[1] - size_y\/2 - 30),\n                  annotation_clip=False)\n\n\nax.tick_params(bottom=False, left=False, top=False, right=False)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)\nfor key, spine in ax.spines.items() :\n    spine.set_visible(False)\n\n#\nax.set_title(\"Number of Uses By \"+user_type+\"s\", fontsize = 16)\nticks = [0] + [math.log(j,10) for j in range(1,10)]\nticklabels = [0] + [\"\" for j in range(1,10)]\nfor i in range(1,3) :\n    ticks = ticks + [math.log(j * 10**i,10) for j in range(1,10)]\n    ticklabels = ticklabels + [10**i\n                               if j == 1\n                               else \"\"\n                               for j in range(1,10)]\ncbar = fig.colorbar(scatter,\n                    ax=ax,\n                    ticks=ticks)\ncbar.ax.set_yticklabels(ticklabels)\n\n#\ndef animate(i) :        \n    x = (data_hours.loc[(data_hours[\"user_type\"] == user_type)\n                        & (data_hours[\"hour\"] == i)]\n                       [\"pixel_x\"]\n         )\n    y = (data_hours.loc[(data_hours[\"user_type\"] == user_type)\n                        & (data_hours[\"hour\"] == i)]\n                       [\"pixel_y\"]\n        )\n    \n    scatter.set_offsets(np.c_[x,y])    \n    scatter.set_sizes([2]*len(x))\n    \n    scatter.set_array(data_hours.loc[(data_hours[\"hour\"] == i)\n                                     & (data_hours[\"user_type\"] == user_type)]\n                                    [\"average\"]\n                          .apply(math.log, args = (10,))\n                     )\n    \n    ann.set_text(s = \"Hour \"+str(i))\n\nanim = FuncAnimation(fig, animate, interval=100, frames=24)\nplt.close()\n\n#\nfrom matplotlib import rc\nfrom IPython.display import HTML\nrc('animation', html='jshtml')\n\nHTML(anim.to_jshtml())","284de72f":"#\nuser_type = \"Customer\"\n\n#\nfig = plt.figure(dpi = 150)\nax = fig.add_subplot(1, 1, 1)\n\nax.imshow(img, extent = [pixel_center[0] - size_x\/2,\n                         pixel_center[0] + size_x\/2,\n                         pixel_center[1] - size_y\/2,\n                         pixel_center[1] + size_y\/2])\n\n\nnorm = max(data_hours.loc[data_hours[\"user_type\"] == user_type][\"average\"])\n\nscatter = ax.scatter([], [], 2, c=[], vmin=0, vmax=math.log(30, 10), cmap=\"inferno\")\nann = ax.annotate(s = \"Hour \"+str(0),\n                  xy = (pixel_center[0] - size_x\/2, pixel_center[1] - size_y\/2 - 30),\n                  annotation_clip=False)\n\nax.tick_params(bottom=False, left=False, top=False, right=False)\nplt.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\nplt.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)\nfor key, spine in ax.spines.items() :\n    spine.set_visible(False)\n\n#\nax.set_title(\"Number of Uses By \"+user_type+\"s\", fontsize = 16)\nticks = [0] + [math.log(j,10) for j in range(1,10)]\nticklabels = [0] + [\"\" for j in range(1,10)]\nfor i in range(1,3) :\n    ticks = ticks + [math.log(j * 10**i,10) for j in range(1,10)]\n    ticklabels = ticklabels + [j*10**i\n                               if j == 1 or (j == 3 and i == 1)\n                               else \"\"\n                               for j in range(1,10)]\ncbar = fig.colorbar(scatter,\n                    ax=ax,\n                    ticks=ticks)\ncbar.ax.set_yticklabels(ticklabels)\n\n#\ndef animate(i) :        \n    x = (data_hours.loc[(data_hours[\"user_type\"] == user_type)\n                        & (data_hours[\"hour\"] == i)]\n                       [\"pixel_x\"]\n        )\n    y = (data_hours.loc[(data_hours[\"user_type\"] == user_type)\n                        & (data_hours[\"hour\"] == i)]\n                       [\"pixel_y\"]\n        )\n    \n    scatter.set_offsets(np.c_[x,y])\n    scatter.set_sizes([2]*len(x))\n\n    scatter.set_array(data_hours.loc[(data_hours[\"hour\"] == i)\n                                     & (data_hours[\"user_type\"] == user_type)]\n                                    [\"average\"]\n                          .apply(math.log, args = (10,))\n                     )\n    \n    ann.set_text(s = \"Hour \"+str(i))\n\nanim = FuncAnimation(fig, animate, interval=100, frames=24)\nplt.close()\n\n#\nHTML(anim.to_jshtml())","b88c79d6":"### Total Use\n\nThere two sorts of users of Citibikes depending on the type of pass they have bought.\n\n* Subscribers: Annual Member\n* Customers: 24-hour pass or 7-day pass user\n\nUsers will take a bike from one station and dock into another when they are finished.  Looking at the total number of journeys from station to station, we see Citibike use is highly seasonal and a huge difference between Subscribers and Customers.","7f2f0b0f":"The peak use in Manhattan is not as large as it was for Subscribers.  The most used stations are around central park, likely because Customer's are primarily recreational users as posited earlier.","169b0f3c":"Journey variation is now much more clear.\n\n* The seasonal change is primarily in winter (December to February).\n* The change in use is geogrpahically uniform\n* All users are mostly concetrated in Manahttan, the city centre, versus the peripheries.\n\n### Hourly Variation\n\nObtaining hourly use, there is a clear pattern for subscribers and customers.\n\n* Subscribers: Peak use around 8am and 6pm.\n* Customers: Peak use around 2pm.\n\nThis is highly indicative of Subscribers using the service for work travel while customers use it for recreational purposes.","6dfd5e6b":"# New York Citibikes - Maps and Stations\n\nNew York's Citibikes are a bike sharing service and the data for each ride from 2013 to 2016 has been provided by NYC Open Data.  We will look at station use and gain insight into their volume of traffic hourly and at different times of the year.\n\nThe code for each step can be viewed by clickg \"Code\" below to the right.\n\nFirst, libraries will need to be imported.  Then we connect to Google's BigQuery databases where the data has been stored and can be accessed via SQL commands.","0e44d3b9":"There is concetration of use around Manhattan as expected, but a push into the nearer parts of Brooklyn to the south-east at peak times.  Around 2pm, most use is in central Manhattan.","8593d439":"A high majority of journeys are Subscribers, typically more than 80% in the summer.  The second graph makes it clear Customer use varies much more seasonally than Subscribers, making up less than 5% of journeys in the winter.\n\n### Seasonal Variation\n\nSome stations are more popular than others.  Manhattan is highly used, being the city centre.  \n\nWe can obtain the number uses of a station (either docking a bike in or out) for each season and make a map of station use.  Since additional stations were added in subsequent years, we shall look at 2014 to ensure consisten results.\n\nMaps are obtained from Google's Maps Static API which we strip of all unnecessary information and focus in on New York.  The map and station longitude and latitude cooridnates are plotted according to the standard [Web Marcator Projection](https:\/\/en.wikipedia.org\/wiki\/Web_Mercator_projection).","fc9da752":"Now we can show how the station map varies hourly."}}