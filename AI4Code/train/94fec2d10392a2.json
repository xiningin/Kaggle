{"cell_type":{"7058e70f":"code","082bbe3d":"code","7c88f825":"code","0e15922e":"code","2065a2b0":"code","8889c384":"code","18054946":"code","9cff1a44":"code","5a8a352f":"code","ecc7ad9f":"code","b38dbad3":"code","365be836":"code","5463b99b":"code","1c87c2da":"code","2aa16e47":"code","ddbf5487":"code","4b3abbfa":"code","6cb8b7d5":"code","5ad4193a":"code","1dd59dc5":"code","191d6183":"code","65ac75fe":"code","d43708de":"code","e81675f2":"code","98e30cce":"code","d4faa280":"code","c5b0ff88":"code","ddb33182":"code","ce1af089":"markdown","ae44fa50":"markdown","bd30f705":"markdown","a00518fb":"markdown","220eb97b":"markdown","c7ccf215":"markdown","498d84c9":"markdown","04d2664d":"markdown","a35d38d4":"markdown","0b3d5ab7":"markdown","9f4f57c7":"markdown","9109667c":"markdown","e7e3c0ad":"markdown","4000e891":"markdown","ff75aa24":"markdown","d2173b55":"markdown"},"source":{"7058e70f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","082bbe3d":"%matplotlib inline\nimport numpy as np\nfrom scipy import misc\nimport matplotlib.pyplot as plt\nimport imageio","7c88f825":"from skimage import data\nimport cv2\n\nphoto_data = cv2.imread('..\/input\/wildfire\/sd-3layers.jpg')\n\n# Note: In the video, this is mentioned as an ndarray. Don't worry about the type for now, it should\n# still work as usual.\ntype(photo_data)","0e15922e":"plt.figure(figsize=(15,15))\nplt.imshow(photo_data)","2065a2b0":"photo_data.shape\n\nprint(photo_data)","8889c384":"photo_data.size","18054946":"photo_data.min(), photo_data.max()","9cff1a44":"photo_data.mean()","5a8a352f":"photo_data[150, 250]","ecc7ad9f":"photo_data[150, 250, 1]","b38dbad3":"#photo_data = misc.imread('..\/input\/wildfire\/sd-3layers.jpg')\nphoto_data[150, 250] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)","365be836":"photo_data = cv2.imread('..\/input\/wildfire\/sd-3layers.jpg')\n\nphoto_data[200:800, : ,1] = 255\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)","5463b99b":"photo_data = cv2.imread('..\/input\/wildfire\/sd-3layers.jpg')\n\nphoto_data[200:800, :] = 255\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)","1c87c2da":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\n\nphoto_data[200:800, :] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)","2aa16e47":"photo_data = cv2.imread('..\/input\/wildfire\/sd-3layers.jpg')\nprint(\"Shape of photo_data:\", photo_data.shape)\nlow_value_filter = photo_data < 50\nprint(\"Shape of low_value_filter:\", low_value_filter.shape)","ddbf5487":"# import random\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)\nphoto_data[low_value_filter] = 0\nplt.figure(figsize=(10,10))\nplt.imshow(photo_data)","4b3abbfa":"rows_range = np.arange(len(photo_data))\ncols_range = rows_range\nprint(type(rows_range))","6cb8b7d5":"photo_data[rows_range, cols_range] = 255","5ad4193a":"plt.figure(figsize=(15,15))\nplt.imshow(photo_data)","1dd59dc5":"total_rows, total_cols, total_layers = photo_data.shape\n#print(\"photo_data = \", photo_data.shape)\n\nX, Y = np.ogrid[:total_rows, :total_cols]\n#print(\"X = \", X.shape, \" and Y = \", Y.shape)","191d6183":"center_row, center_col = total_rows \/ 2, total_cols \/ 2\n#print(\"center_row = \", center_row, \"AND center_col = \", center_col)\n#print(X - center_row)\n#print(Y - center_col)\ndist_from_center = (X - center_row)**2 + (Y - center_col)**2\n#print(dist_from_center)\nradius = (total_rows \/ 2)**2\n#print(\"Radius = \", radius)\ncircular_mask = (dist_from_center > radius)\n#print(circular_mask)\nprint(circular_mask[1500:1700,2000:2200])","65ac75fe":"photo_data = cv2.imread('..\/input\/wildfire\/sd-3layers.jpg')\nphoto_data[circular_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","d43708de":"X, Y = np.ogrid[:total_rows, :total_cols]\nhalf_upper = X < center_row # this line generates a mask for all rows above the center\n\nhalf_upper_mask = np.logical_and(half_upper, circular_mask)","e81675f2":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\nphoto_data[half_upper_mask] = 255\n#photo_data[half_upper_mask] = random.randint(200,255)\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","98e30cce":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\nred_mask   = photo_data[:, : ,0] < 150\n\nphoto_data[red_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","d4faa280":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\ngreen_mask = photo_data[:, : ,1] < 150\n\nphoto_data[green_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","c5b0ff88":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\nblue_mask  = photo_data[:, : ,2] < 150\n\nphoto_data[blue_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","ddb33182":"photo_data = imageio.imread('..\/input\/wildfire\/sd-3layers.jpg')\n\nred_mask   = photo_data[:, : ,0] < 150\ngreen_mask = photo_data[:, : ,1] > 100\nblue_mask  = photo_data[:, : ,2] < 100\n\nfinal_mask = np.logical_and(red_mask, green_mask, blue_mask)\nphoto_data[final_mask] = 0\nplt.figure(figsize=(15,15))\nplt.imshow(photo_data)","ce1af089":"# Loading the libraries we need: numpy, scipy, matplotlib","ae44fa50":"**Creating a numpy array from an image file:**\n\n\n**Lets choose a WIFIRE satellite image file as an ndarray and display its type.**","bd30f705":"# Composite mask that takes thresholds on all three layers: RED, GREEN, BLUE","a00518fb":"**Let's see what is in this image.**","220eb97b":"# Set a Pixel to All Zeros\n\n**We can set all three layer in a pixel as once by assigning zero globally to that (row,column) pairing. However, setting one pixel to zero is not noticeable.**","c7ccf215":"**Pixel on the 150th Row and 250th Column**","498d84c9":"# Masking Images\n**Now let us try something even cooler...a mask that is in shape of a circular disc.**","04d2664d":"**The shape of the ndarray show that it is a three layered matrix. The first two numbers here are length and width, and the third number (i.e. 3) is for three layers: Red, Green and Blue.**\n\n**RGB Color Mapping in the Photo:**\n\n\n**RED pixel indicates Altitude**\n\n**BLUE pixel indicates Aspect**\n\n**GREEN pixel indicates Slope**\n\n\n**The higher values denote higher altitude, aspect and slope.**","a35d38d4":"# Further Masking\n\n**You can further improve the mask. For example, just get the upper half of the disc.**","0b3d5ab7":"# Pick all Pixels with Low Values","9f4f57c7":"# Changing Colors in a Range\n\n**We can also use a range to change the pixel values. As an example, let's set the green layer for rows 200 t0 800 to full intensity.**","9109667c":"**Further Processing of our Satellite Imagery**\n\n**Processing of RED Pixels**\n\n**Remember that red pixels tell us about the height. Let us try to highlight all the high altitude areas. We will do this by detecting high intensity RED Pixels and muting down other areas.**","e7e3c0ad":"# Detecting Highly-GREEN Pixels","4000e891":"# Filtering Out Low Values\n\n**Whenever the low_value_filter is True, set value to 0.**","ff75aa24":"# More Row and Column Operations\n\n**You can design complex patters by making cols a function of rows or vice-versa. Here we try a linear relationship between rows and columns.**","d2173b55":"# Detecting Highly-BLUE Pixels"}}