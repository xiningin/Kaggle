{"cell_type":{"3559e177":"code","c6d3049c":"code","b6a4ea4f":"code","8d8a8f17":"code","41571d67":"code","a753c209":"code","8acdf375":"code","976e052b":"code","95814fbf":"code","2fc71e30":"code","30425c23":"code","d350eda4":"code","9f8d4794":"code","79ae1be6":"code","b2c67cfc":"code","3929df83":"code","d82519b9":"code","152f939e":"code","d821a3b7":"code","d89d916a":"code","ce8fc18c":"code","c6abe3ab":"code","648ecd7d":"code","4341384d":"code","42ee5ec8":"code","c8b2c1cd":"code","7bd4f604":"code","556f1190":"code","035f52c7":"code","1176f962":"code","374e6bc0":"code","cb56a7d2":"code","8a0246ed":"code","5a7d9b14":"code","c06cb7a6":"code","44b40ca1":"code","d771d1d3":"markdown","69ad208a":"markdown","4f15dace":"markdown"},"source":{"3559e177":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6d3049c":"# N\u00e3o queremos ver os warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b6a4ea4f":"# A biblioteca PyCaret n\u00e3o vem instalada no Kaggle por padr\u00e3o\n# a \u00faltima avers\u00e3o \u00e9 a 2.3.4 mas est\u00e1 dando conflito no momento da instala\u00e7\u00e3o\n!pip install pycaret==2.3.3","8d8a8f17":"# Carregando os dados do dataset\ndf_heart = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\ndf_heart.head()","41571d67":"# Analisando os dados\ndf_heart.info()","a753c209":"# Analisando a vari\u00e1vel target\ndf_heart['HeartDisease'].value_counts(normalize=True)","8acdf375":"# Separando as colunas num\u00e9ricas e categ\u00f3ricas\n# no caso das colunas num\u00e9ricas precisa excluir a vari\u00e1vel target\nnum = df_heart.drop(['HeartDisease'], axis=1).select_dtypes('number').columns\n\ncat = df_heart.select_dtypes('object').columns\n\nnum, cat","976e052b":"# For\u00e7ando a Series do pandas a virar uma lista\nlist(cat)","95814fbf":"# Importando as fun\u00e7\u00f5es de classifica\u00e7\u00e3o\nfrom pycaret.classification import *","2fc71e30":"# A fun\u00e7\u00e3o setup deve ser chamada antes de todas, para a preparar o ambiente do PyCaret\n# Precisa obrigatoriamente de data e target\nsetup1 = setup(data = df_heart, \n               target = 'HeartDisease',\n               categorical_features = list(cat), \n               silent = True)","30425c23":"# Vamos ver os modelos ded classifica\u00e7\u00e3o dispon\u00edveis\nmodels()","d350eda4":"# Comparando o desempenho dos modelos\ntop3 = compare_models(sort='Recall',n_select = 3)","9f8d4794":"# Quais os top3 modedlos?\ntop3","79ae1be6":"# Vamos criar o modelo top1\ncatboost = create_model('catboost')","b2c67cfc":"# Agora vamos melhorar o modelo top1\ntuned_catboost = tune_model(catboost, optimize = 'Recall')","3929df83":"# Avaliando o modelo melhorado\nevaluate_model(tuned_catboost)","d82519b9":"# Executando as previs\u00f5es na base de valida\u00e7\u00e3o\npredict_model(tuned_catboost)","152f939e":"# Fazendo um blend (uma mistura) dos top3 classificadores\nblender_top3 = blend_models(top3, method = 'soft', optimize = 'Recall')","d821a3b7":"# Fazendo um stack dos top3 classificadores\nstack_top3 = stack_models(top3, optimize = 'Recall')","d89d916a":"# Carregando os dados\ndf_car = pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndf_car.head()","ce8fc18c":"# Verificando os dados\ndf_car.info()","c6abe3ab":"# Feature Engineering e Corre\u00e7\u00e3o de Dados\n\n# Separando o modelo\ndf_car['model'] = [x.split()[0] for x in df_car['CarName']]\n\n# Corrigindo os nomes\ndf_car['model'] = df_car['model'].replace({'maxda': 'Mazda','mazda': 'Mazda', \n                                     'nissan': 'Nissan', \n                                     'porcshce': 'Porsche','porsche':'Porsche', \n                                     'toyouta': 'Toyota', 'toyota':'Toyota',\n                            'vokswagen': 'Volkswagen', 'vw': 'Volkswagen', 'volkswagen':'Volkswagen'})","648ecd7d":"# Importando a bilbioteca\nfrom pycaret.regression import *","4341384d":"# Separando as colunas categ\u00f3ricas\ncat = df_car.select_dtypes('object').columns\n\ncat","42ee5ec8":"# Fazendo o setup do PyCaret\nsetup2 = setup(data = df_car, \n               target = 'price',\n               categorical_features = list(cat) , \n               ignore_features = ['car_ID','CarName'],\n               normalize = True,\n               silent = True)","c8b2c1cd":"# Quais os modelos de regress\u00e3o dispon\u00edveis\nmodels()","7bd4f604":"# Comparando os modelos com base em uma lista selecionada\n# e escolhendo os top3\ntop_3 = compare_models(sort='RMSE', include=['lightgbm','catboost','xgboost','rf','mlp','gbr','lasso','ridge','et','ada'], n_select = 3)","556f1190":"# Criando um modelo baseado no top1\ngbr = create_model('gbr')","035f52c7":"# Melhorando o modelo top1\ntuned_gbr = tune_model(gbr, optimize = 'RMSE')","1176f962":"# Avaliando o modelo\nevaluate_model(gbr)","374e6bc0":"# Blend de modelos com os top3\nblender_top3 = blend_models(top_3, optimize = 'RMSE')","cb56a7d2":"# Stack de modelos com os top3\nstack_top3 = stack_models(top_3, optimize = 'RMSE')","8a0246ed":"# Criando o modelo espec\u00edfico do lightgbm\nlgbm = create_model('lightgbm')","5a7d9b14":"# Fazendo tunning com o lightgbm\ntuned_lgbm = tune_model(lgbm, optimize = 'RMSE')","c06cb7a6":"# Criando o modelo espec\u00edfico para ao RFR\nrfr = create_model('rf')","44b40ca1":"# Tunning do RFR\ntuned_rfr = tune_model(rfr)","d771d1d3":"# IESB - CIA035 - Aula 11 - PyCaret AutoML","69ad208a":"## Problema de Classifica\u00e7\u00e3o","4f15dace":"## Problema de Regress\u00e3o"}}