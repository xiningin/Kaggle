{"cell_type":{"238466ae":"code","0f0f1349":"code","56cb4925":"code","ae6e750e":"code","584ba1a6":"code","4a17d206":"code","d6a65602":"code","ee57dd7c":"code","bb050f40":"code","38bd54dc":"code","ea456d3f":"code","61f37f30":"code","d875613d":"code","339df547":"code","7858bef7":"code","5ef13e4f":"code","1f10ef26":"code","d76d1944":"code","ac3ac84d":"code","cbed9a9d":"code","bfd701d0":"code","5cf62651":"code","a43b1d21":"markdown","ab8ad19d":"markdown","d50818b4":"markdown","e2d820dd":"markdown","43001fec":"markdown","505b5b55":"markdown"},"source":{"238466ae":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import log_loss, accuracy_score, confusion_matrix\nfrom sklearn.model_selection import KFold # \u4ea4\u5dee\u691c\u8a3c\u6cd5\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom  sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix # \u56de\u5e30\u554f\u984c\u306b\u304a\u3051\u308b\u6027\u80fd\u8a55\u4fa1\u306b\u95a2\u3059\u308b\u95a2\u6570\nfrom sklearn.feature_selection import RFECV\nimport seaborn as sns","0f0f1349":"df_cloudfound = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n# df_cloudfound['state'] = df_cloudfound['state'] == \"successful\"\n\ndisplay(df_cloudfound.head(10))\ndf_cloudfound.describe()","56cb4925":"# \u6563\u5e03\u56f3\u884c\u5217\u3092\u66f8\u3044\u3066\u307f\u308b\ndf_cloudfound = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n#pd.plotting.scatter_matrix(df_cloudfound_sct, figsize=(10,10))","ae6e750e":"plt.show()# \u76f8\u95a2\u4fc2\u6570\u3092\u78ba\u8a8d\ndf_cloudfound.corr()","584ba1a6":"# \u76f8\u95a2\u4fc2\u6570\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u3057\u3066\u53ef\u8996\u5316\nsns.heatmap(df_cloudfound.corr())\nplt.show()","4a17d206":"# category\u3054\u3068\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\n# \u30c7\u30fc\u30bf\u5185\u306ecategory\u3092\u62bd\u51fa\u3057category\u306b\u683c\u7d0d\ncategory=df_cloudfound.groupby('category')\n# state\u3092\u76f8\u5bfe\u7684\u306a\u983b\u5ea6\u306b\u5909\u63db\ncategory=category['state'].value_counts(normalize=True).unstack() \n# successful\u306e\u964d\u9806\u30bd\u30fc\u30c8\ncategory=category.sort_values(by=['successful'],ascending=False)\n# \u7e26\u68d2\u30b0\u30e9\u30d5\uff08\u7a4d\u307f\u4e0a\u3052\uff09\u3067\u30b0\u30e9\u30d5\u4f5c\u6210\ncategory[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","d6a65602":"# category\u3054\u3068\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\n# \u30c7\u30fc\u30bf\u5185\u306ecategory\u3092\u62bd\u51fa\u3057category\u306b\u683c\u7d0d\nmain_category=df_cloudfound.groupby('main_category')\n# state\u3092\u76f8\u5bfe\u7684\u306a\u983b\u5ea6\u306b\u5909\u63db\nmain_category=main_category['state'].value_counts(normalize=True).unstack() \n# successful\u306e\u964d\u9806\u30bd\u30fc\u30c8\nmain_category=main_category.sort_values(by=['successful'],ascending=False)\n# \u7e26\u68d2\u30b0\u30e9\u30d5\uff08\u7a4d\u307f\u4e0a\u3052\uff09\u3067\u30b0\u30e9\u30d5\u4f5c\u6210\nmain_category[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","ee57dd7c":"# country\u3054\u3068\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\ncountry=df_cloudfound.groupby('country')\ncountry=country['state'].value_counts(normalize=True).unstack()\ncountry=country.sort_values(by=['successful'],ascending=False)\nax=country[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","bb050f40":"# currency\u6bce\u306estate\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u78ba\u8a8d\ncurrency = df_cloudfound.groupby('currency')\ncurrency = currency['state'].value_counts(normalize=True).unstack()\ncurrency = currency.sort_values(by=['successful'],ascending=False)\nax = currency[['successful','failed','canceled','live','suspended','undefined']].plot(kind='bar',stacked=True,figsize=(20,20))","38bd54dc":"# launched,deadline\u304b\u3089term\u3092\u8a08\u7b97\nfrom datetime import datetime\nlaunched = pd.to_datetime(df_cloudfound['launched'])\ndeadline = pd.to_datetime(df_cloudfound['deadline'])\nterm = deadline - launched\nterm = term.dt.total_seconds()","ea456d3f":"df_cloudfound = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")[['state', 'main_category', 'currency', 'usd_goal_real']]\n# df_cloudfound['state'] = df_cloudfound['state'].replace('failed')\ndf_cloudfoundN = df_cloudfound.query('state == \"successful\" or state == \"failed\"')\ndf_cloudfoundN['term'] = term\n\n# \u30c7\u30fc\u30bf\u8868\u793a\ndisplay(df_cloudfoundN.head(50))","61f37f30":"#df_cloudfound = pd.read_csv(\"..\/1_data\/ks-projects-201801.csv\")[['state', 'main_category', 'currency', 'usd_goal_real']]\n# from sklearn.preprocessing import LabelBinarizer\n\ndf_cloudfoundN['state'] = df_cloudfoundN['state'] == \"successful\"#bool\u578b\u306b\u5909\u63db\ndf_cloudfoundN['state'] = df_cloudfoundN['state'] * 1 #bool\u578b\u30920,1\u306b\u5909\u63db\n\n#'usd_goal_real'\u3092\u6a19\u6e96\u5316\ndf0 = df_cloudfoundN['usd_goal_real']  \ndf_cloudfoundN['usd_goal_real'] = (df0 - df0.mean()) \/ (df0.std()) \n\n#'term'\u3092\u6a19\u6e96\u5316\ndf1 = df_cloudfoundN['term']  \ndf_cloudfoundN['term'] = (df1 - df1.mean()) \/ (df1.std()) \n\n#'main_category,currency'\u3092\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u30920,1\u306e\u30c0\u30df\u30fc\u5909\u6570\u3067\u7f6e\u304d\u63db\u3048&\u5148\u982d\u884c\u524a\u9664\ndf_cloudfoundN = pd.get_dummies(df_cloudfoundN, drop_first=True) \n# lb = LabelBinarizer()\n# df_cloudfoundN = lb.fit_transform(df_cloudfoundN)\n\n\n# \u30c7\u30fc\u30bf\u8868\u793a\ndisplay(df_cloudfoundN.head(50))","d875613d":"# estimator\u306b\u30e2\u30c7\u30eb\u3092\u30bb\u30c3\u30c8\n# \u4eca\u56de\u306f\u56de\u5e30\u554f\u984c\u3067\u3042\u308b\u305f\u3081LinearRegression\u3092\u4f7f\u7528\n# estimator = LinearRegression(normalize=False)\nestimator = SGDClassifier(loss='log', penalty='none', max_iter=10000, fit_intercept=True, random_state=1234, tol=1e-3)\n\n# RFECV\u306f\u4ea4\u5dee\u691c\u8a3c\u306b\u3088\u3063\u3066\u30b9\u30c6\u30c3\u30d7\u30ef\u30a4\u30ba\u6cd5\u306b\u3088\u308b\u7279\u5fb4\u9078\u629e\u3092\u884c\u3046\n# cv\u306b\u306fFold\uff08=\u30b0\u30eb\u30fc\u30d7\uff09\u306e\u6570\uff0cscoring\u306b\u306f\u8a55\u4fa1\u6307\u6a19\u3092\u6307\u5b9a\u3059\u308b\n# \u4eca\u56de\u306f\u5206\u985e\u306a\u306e\u3067accuracy\u3092\u8a55\u4fa1\u6307\u6a19\u306b\u6307\u5b9a\nrfecv = RFECV(estimator, cv=10, scoring='accuracy')","339df547":"train_label = df_cloudfoundN[\"state\"]\ntrain_data = df_cloudfoundN.drop(\"state\", axis=1)\n\ny = train_label.values\nX = train_data.values\n\n# fit\u3067\u7279\u5fb4\u9078\u629e\u3092\u5b9f\u884c\nrfecv.fit(X, y)","7858bef7":"# \u7279\u5fb4\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\uff081\u304c\u6700\u3082\u91cd\u8981\u306a\u7279\u5fb4\uff09\nprint('Feature ranking: \\n{}'.format(rfecv.ranking_))","5ef13e4f":"# \u7279\u5fb4\u6570\u3068\u30b9\u30b3\u30a2\u306e\u5909\u5316\u3092\u30d7\u30ed\u30c3\u30c8\n# \u8ca0\u306eMAE\u304c\u8a55\u4fa1\u57fa\u6e96\u306b\u306a\u3063\u3066\u304a\u308a\uff0c\u5024\u304c\u30bc\u30ed\u306b\u8fd1\u3044\u307b\u3069\u6c4e\u5316\u8aa4\u5dee\u306f\u5c0f\u3055\u3044\nplt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\nplt.show()","1f10ef26":"# rfecv.support_\u3067\u30e9\u30f3\u30ad\u30f3\u30b01\u4f4d\u4ee5\u5916\u306fFalse\u3068\u3059\u308bindex\u3092\u53d6\u5f97\u3067\u304d\u308b\n# True\u306b\u306a\u3063\u3066\u3044\u308b\u7279\u5fb4\u3092\u4f7f\u7528\u3059\u308c\u3070\u6c4e\u5316\u8aa4\u5dee\u306f\u6700\u5c0f\u3068\u306a\u308b\nrfecv.support_","d76d1944":"# bool\u578b\u306e\u914d\u5217\u306b ~ \u3092\u3064\u3051\u308b\u3068True\u3068False\u3092\u53cd\u8ee2\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n# \u3053\u3053\u3067True\u306b\u306a\u3063\u3066\u3044\u308b\u7279\u5fb4\u304c\u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\nremove_idx = ~rfecv.support_\nremove_idx","ac3ac84d":"# \u524a\u9664\u3057\u3066\u3082\u3088\u3044\u7279\u5fb4\u306e\u540d\u524d\u3092\u53d6\u5f97\u3059\u308b\nremove_feature = train_data.columns[remove_idx]\nremove_feature","cbed9a9d":"# drop\u95a2\u6570\u3067\u7279\u5fb4\u3092\u524a\u9664\ndf_cloudfoundN = df_cloudfoundN.drop(remove_feature, axis=1)\ndf_cloudfoundN","bfd701d0":"y = df_cloudfoundN[\"state\"].values\nX = df_cloudfoundN.drop('state', axis=1).values\n\n#X = x.reshape(-1,1) # scikit-learn\u306b\u5165\u529b\u3059\u308b\u305f\u3081\u306b\u6574\u5f62\nn_split = 5 # \u30b0\u30eb\u30fc\u30d7\u6570\u3092\u8a2d\u5b9a\uff08\u4eca\u56de\u306f5\u5206\u5272\uff09\n\ncross_valid_acc = 0\ncross_valid_precision = 0\ncross_valid_recall = 0\ncross_valid_f1_score = 0\nsplit_num = 1\n\n# \u30c6\u30b9\u30c8\u5f79\u3092\u4ea4\u4ee3\u3055\u305b\u306a\u304c\u3089\u5b66\u7fd2\u3068\u8a55\u4fa1\u3092\u7e70\u308a\u8fd4\u3059\nfor train_idx, test_idx in KFold(n_splits=n_split, shuffle=True, random_state=1234).split(X, y):\n    X_train, y_train = X[train_idx], y[train_idx] #\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\n    X_test, y_test = X[test_idx], y[test_idx]     #\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\n    \n    #\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u5b9f\u884c\n    clf = SGDClassifier(loss='log', penalty='none', max_iter=10000, fit_intercept=True, random_state=1234, tol=1e-3)\n    clf.fit(X_train, y_train)\n    \n    # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u3092\u5b9f\u884c\n    # \u30e9\u30d9\u30eb\u3092\u4e88\u6e2c\n    y_pred_test = clf.predict(X_test)\n\n    # \u6b63\u7b54\u7387\u3092\u8a08\u7b97\n    accuracy =  accuracy_score(y_test, y_pred_test)\n    print(\"Fold %s\"%split_num)\n    print('\u6b63\u7b54\u7387\uff08Accuracy\uff09 = {:.3f}%'.format(100 * accuracy))\n\n    # Precision, Recall, F1-score\u3092\u8a08\u7b97\n    precision, recall, f1_score, _ = precision_recall_fscore_support(y_test, y_pred_test)\n\n    # \u30ab\u30c6\u30b4\u30ea\u300c2000\u4e07\u4ee5\u4e0a\u300d\u306b\u95a2\u3059\u308bPrecision, Recall, F1-score\u3092\u8868\u793a   \n    print('\u9069\u5408\u7387\uff08Precision\uff09 = {:.3f}%'.format(100 * precision[0]))\n    print('\u518d\u73fe\u7387\uff08Recall\uff09 = {:.3f}%'.format(100 * recall[0]))\n    print('F1\u5024\uff08F1-score\uff09 = {:.3f}%'.format(100 * f1_score[0]))\n\n    cross_valid_acc += accuracy #\u5f8c\u3067\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306bMAE\u3092\u52a0\u7b97\n    cross_valid_precision += precision #\u5f8c\u3067\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306bMAE\u3092\u52a0\u7b97\n    cross_valid_recall += recall #\u5f8c\u3067\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306bMAE\u3092\u52a0\u7b97\n    cross_valid_f1_score += f1_score #\u5f8c\u3067\u5e73\u5747\u3092\u53d6\u308b\u305f\u3081\u306bMAE\u3092\u52a0\u7b97\n    split_num += 1\n    \nfinal_acc =  cross_valid_acc \/ n_split\nfinal_precision =  cross_valid_precision \/ n_split\nfinal_recall =  cross_valid_recall \/ n_split\nfinal_f1_score =  cross_valid_f1_score \/ n_split\nprint(\"Cross Validation\")\nprint('\u6b63\u7b54\u7387\uff08Accuracy\uff09 = {:.3f}%'.format(100 * final_acc))\nprint('\u9069\u5408\u7387\uff08Precision\uff09 = {:.3f}%'.format(100 * final_precision[0]))\nprint('\u518d\u73fe\u7387\uff08Recall\uff09 = {:.3f}%'.format(100 * final_recall[0]))\nprint('F1\u5024\uff08F1-score\uff09 = {:.3f}%'.format(100 * final_f1_score[0]))","5cf62651":"# \u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u306e\u30af\u30ed\u30b9\u96c6\u8a08\nconf_mat = pd.DataFrame(confusion_matrix(y_test, y_pred_test), \n                        index=['\u6b63\u89e3 = Failed', '\u6b63\u89e3 = Successful'], \n                        columns=['\u4e88\u6e2c = Failed', '\u4e88\u6e2c = Successful'])\nconf_mat","a43b1d21":"# Scikit-learn\u3092\u7528\u3044\u305f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30","ab8ad19d":"# \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u305f\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306e\u6210\u529f\u4e88\u6e2c\n\uff08ks-projects-201801.csv\uff09","d50818b4":"# 2. \u4ea4\u5dee\u691c\u8a3c\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff09\u6cd5\n\u4ea4\u5dee\u691c\u8a3c\u6cd5\u3068\u306f\u3001\u30c7\u30fc\u30bf\u3092\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u308f\u3051\u3001\u30c6\u30b9\u30c8\u5f79\u3068\u5b66\u7fd2\u5f79\u3092\u4ea4\u4ee3\u3055\u305b\u3066\u3044\u304f\u3053\u3068\u3067\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3082\u6c4e\u5316\u8aa4\u5dee\u3092\u8a55\u4fa1\u3059\u308b\u65b9\u6cd5","e2d820dd":"\u8aac\u660e\u5909\u6570\u5019\u88dc \ncategory or main_category \u2192\u3000\u4e21\u8005\u306e\u76f8\u95a2\u6027\u304c\u5f37\u3059\u304e\u308b\u306e\u3067\uff11\u3064\u3067\u3088\u3055\u305d\u3046\u3002\u3068\u308a\u3042\u3048\u305a\u6570\u304c\u5c11\u306a\u3044main_category\ncurrency \u2192\u3000\u3007\ncountry\u3000\u2192\u3000\u3007\u3000\u2192currency\u3068\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u304f\u3001\u88ab\u308b\u90e8\u5206\u304c\u3042\u308b\u306e\u3067\u3001currency\u3092\u307e\u305a\u9078\u629e\ngoal\u3000or usd_goal_real\u3000\u2192\u3000\u4e21\u8005\u306e\u76f8\u95a2\u6027\u304c\u5f37\u3059\u304e\u308b\u306e\u3067\uff11\u3064\u3067\u3088\u3055\u305d\u3046\u3002US\uff04\u3067\u7d71\u4e00\u3055\u308c\u3066\u3044\u308busd_goal_real\u3092\u9078\u629e\ndeadline \u2192\u3000\u00d7:\u7de0\u65e5\u5358\u72ec\u3067\u7d50\u679c\u304c\u5909\u308f\u308b\u306a\u3089\u3001\u4e8b\u524d\u306e\u4e88\u6e2c\u3067\u306f\u610f\u5473\u306a\u3057\u3002\nlaunched \u2192\u3000\u00d7:\u958b\u59cb\u65e5\u5358\u72ec\u3067\u7d50\u679c\u304c\u5909\u308f\u308b\u306a\u3089\u3001\u4e8b\u524d\u306e\u4e88\u6e2c\u3067\u306f\u610f\u5473\u306a\u3057\u3002\u2192\u3000term(\u671f\u9593\uff1a\u958b\u59cb\u65e5\u30fc\u7de0\u65e5)\u3092\u8003\u616e\u3059\u308b\u3002\n","43001fec":"# \uff11\uff0e\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","505b5b55":"\u8aac\u660e\u5909\u6570\u5019\u88dc \ncategory or main_category\ncurrency\ngoal\u3000or usd_goal_real\ndeadline\nlaunched\ncountry\n\nbackers,pledged\u95a2\u9023\u306f\u4e8b\u524d\u306e\u4e88\u6e2c\u306e\u305f\u3081\u5019\u88dc\u5916"}}