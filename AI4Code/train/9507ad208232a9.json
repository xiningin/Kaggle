{"cell_type":{"2d08552c":"code","9fc3c24f":"code","924ed48c":"code","eb9edcde":"code","10941b8f":"code","d419acb2":"code","16bc763c":"code","086d41ef":"code","0ddf9b6f":"code","67cb1091":"code","bb6f594a":"code","84d4e5e7":"code","4d9c273d":"code","7fd07813":"code","ff04c32e":"code","fcc49ba1":"code","076917cd":"code","5fd3c302":"code","165bbaa8":"code","168b0d15":"markdown","01981ac5":"markdown","99ce4ca9":"markdown","097fd461":"markdown"},"source":{"2d08552c":"import os\n\nimport numpy as np\nimport pandas as pd","9fc3c24f":"# For systems using OpenBLAS\nos.environ['OPENBLAS_NUM_THREADS'] = '1'\n\n# For systems using Intel MKL\n# os.environ['MKL_NUM_THREADS'] = '1'\n\npd.set_option('mode.chained_assignment', None)","924ed48c":"# Load the data\nraw_data = pd.read_csv('..\/input\/events.csv')\nraw_data = raw_data.drop(labels=raw_data.columns[4], axis=1)\nraw_data.columns = ['timestamp', 'user', 'event', 'item']","eb9edcde":"# Drop rows with users that have less than 10 interactions\nuser_value_counts = raw_data['user'].value_counts()\ndata = raw_data[raw_data['user'].isin(user_value_counts[user_value_counts >= 10].index)]","10941b8f":"# Set all event (weight) values to 1.0\ndata.loc[:, 'event'] = 1.0","d419acb2":"# Create numeric user_id and item_id columns\ndata['user'] = data['user'].astype('category')\ndata['item'] = data['item'].astype('category')\ndata['user_id'] = data['user'].cat.codes\ndata['item_id'] = data['item'].cat.codes","16bc763c":"# Separate training and testing data\nlatest_timestamp = data['timestamp'].max()\nday_in_ms = 86_400_000\nlast_day_timestamp = latest_timestamp - day_in_ms\n\ndata_test = data.copy()\ndata_test = data_test.loc[data_test.timestamp >= last_day_timestamp].copy()\ndata = data.loc[data.timestamp < last_day_timestamp].copy()","086d41ef":"import scipy.sparse as sparse\nimport implicit","0ddf9b6f":"# The implicit library expects data as an item-user matrix so we create two matrices,\n# one for fitting the model (item-user) and one for recommendations (user-item)\nsparse_item_user = sparse.csr_matrix((data['event'].astype(float), (data['item_id'], data['user_id'])))\nsparse_user_item = sparse.csr_matrix((data['event'].astype(float), (data['user_id'], data['item_id'])))","67cb1091":"# Initialize the als model and fit it using the sparse item-user matrix\nmodel = implicit.als.AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20)","bb6f594a":"# Calculate the confidence by multiplying it by our alpha value\n# Alpha = (sparse_item_user.shape[0] * sparse_item_user.shape[1] - sparse_item_user.nnz) \/ sum(sparse_item_user.data)\nalpha_val = 3080\ndata_conf = (sparse_item_user * alpha_val).astype('double')","84d4e5e7":"# Fit the model\nmodel.fit(data_conf, show_progress=False)","4d9c273d":"def get_recommendations(user_ids, user_items, k=10):\n    return {user_id: model.recommend(user_id, user_items, N=k, filter_already_liked_items=False)\n            for user_id in user_ids}","7fd07813":"def get_intersections(test_user_ids, test_data, recommendations):\n    intersections = {}\n    for test_user_id in test_user_ids:\n        last_day_items = test_data.loc[test_data.user_id == test_user_id]['item_id'].values\n        if recommendations[test_user_id][0][1] != 0.0:\n            recommended, _ = list(zip(*recommendations[test_user_id]))\n            intersections[test_user_id] = set(recommended).intersection(set(last_day_items))\n    return intersections","ff04c32e":"def get_hit_rate(intersections):\n    user_count = 0\n    item_count = 0\n    for intersection in intersections:\n        intersection_len = len(intersections[intersection])\n        if intersection_len > 0:\n            user_count += 1\n            item_count += intersection_len\n    return user_count \/ len(intersections)","fcc49ba1":"# Create a list of all test users\nusers = list(np.sort(data_test.user_id.unique()))","076917cd":"# Top 10 hit rate\nrecommendations_10 = get_recommendations(users, sparse_user_item, k=10)\nintersections_10 = get_intersections(users, data_test, recommendations_10)\nhit_rate_10 = get_hit_rate(intersections_10)\nprint(f'Top 10 hit rate: {hit_rate_10:%}')","5fd3c302":"# Top 50 hit rate\nrecommendations_50 = get_recommendations(users, sparse_user_item, k=50)\nintersections_50 = get_intersections(users, data_test, recommendations_50)\nhit_rate_50 = get_hit_rate(intersections_50)\nprint(f'Top 50 hit rate: {hit_rate_50:%}')","165bbaa8":"# Top 100 hit rate\nrecommendations_100 = get_recommendations(users, sparse_user_item, k=100)\nintersections_100 = get_intersections(users, data_test, recommendations_100)\nhit_rate_100 = get_hit_rate(intersections_100)\nprint(f'Top 100 hit rate: {hit_rate_100:%}')","168b0d15":"# Recommender System Project","01981ac5":"## Evaluation","99ce4ca9":"## Data Preprocessing","097fd461":"## Recommendation Calculation"}}