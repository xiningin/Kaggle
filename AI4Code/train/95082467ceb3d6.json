{"cell_type":{"22458832":"code","f1687779":"code","390163b7":"code","5a3c074b":"code","6b667002":"code","0d656a9e":"code","30f1296a":"code","87ceb679":"code","c8d08a3f":"code","e0b46851":"code","12de95a8":"code","f03c784e":"code","7f2deeee":"code","a9e72f1c":"code","a2fa60aa":"code","c3c77ff1":"code","9ba91612":"code","02cf5fff":"code","7f46dcb5":"code","f22a3644":"code","0e9ffd3e":"code","f027a57b":"code","180df400":"code","9597740a":"code","752a7179":"markdown","2178ecc3":"markdown","0b2b2fb1":"markdown","f70336a5":"markdown","77fd3ccc":"markdown","02f7e690":"markdown","f7ef4b9e":"markdown","0e076288":"markdown","f5c2c490":"markdown","b694178c":"markdown","624d95f4":"markdown","6dded61a":"markdown","5f255929":"markdown","919ba199":"markdown"},"source":{"22458832":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f1687779":"# import libraries\nimport bq_helper\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import set_matplotlib_formats\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nset_matplotlib_formats('retina')\n%matplotlib inline\n\nfrom google.cloud import bigquery\nclient = bigquery.Client()","390163b7":"# high level stats \n\nquery = \"\"\"\n    SELECT \n        FORMAT(\"%'d\",COUNT(DISTINCT fullVisitorId)) AS users,\n        FORMAT(\"%'d\",SUM(totals.visits)) AS visits,\n        FORMAT(\"%'d\",SUM(totals.pageviews)) AS pageviews,\n        FORMAT(\"%'d\", SUM(totals.transactions)) AS transactions,\n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n        \n\"\"\"\nsafe_query_job = client.query(query)\nhigh_level_aug = safe_query_job.to_dataframe()\nhigh_level_aug","5a3c074b":"# traffic by month\nquery = \"\"\"\n    SELECT \n        DATE_TRUNC(PARSE_DATE('%Y%m%d',date), MONTH) AS month,\n        SUM(totals.visits) AS visits,        \n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY 1\n    ORDER BY 1\n        \n\"\"\"\nsafe_query_job = client.query(query)\ndf_1 = safe_query_job.to_dataframe()\ndf_1.head(3)","6b667002":"# plot web traffic and revenue by month for Q4\n\nfig, ax1 = plt.subplots()\n\ncolor = 'tab:red'\nax1.set_xlabel('Month')\nax1.set_ylabel('Revenue', color=color)\nax1.plot(df_1['month'], df_1['revenue'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Visits', color=color)  # we already handled the x-label with ax1\nax2.plot(df_1['month'], df_1['visits'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nplt.title('Monthly Web Traffic and Revenue for 2016Q4', fontsize=14)\nplt.xticks(df_1['month'],rotation=45)\nplt.show()","0d656a9e":"# create a table with revenue by country\n\n# traffic by month\nquery = \"\"\"\n    SELECT \n        geoNetwork.country AS country,   \n        SUM(totals.transactionRevenue)\/1000000 AS revenue\n\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY 1\n    ORDER BY 2 desc\n    \n\"\"\"\nsafe_query_job = client.query(query)\ndf_2 = safe_query_job.to_dataframe()\ndf_2.head(5)","30f1296a":"# create a heatmap of revenue by geo location\n\nfig = go.Figure(data=go.Choropleth(\n    locations=df_2['country'], # Spatial coordinates\n    z = df_2['revenue'].astype(float), # Data to be color-coded\n    locationmode = 'country names', # set of locations match entries in `locations`\n    colorscale = 'Reds',\n    colorbar_title = \"revenue USD\",\n))\n\nfig.update_layout(\n    title_text = '2016Q4 Google Merchandise Store by Geo Location',\n)\n\nfig.show()","87ceb679":"# create a table of metrics by channel\n\nquery = \"\"\"\n    SELECT\n        channelGrouping as channel,\n        SUM(totals.totalTransactionRevenue)\/1000000 AS revenue,\n        SUM(totals.transactions) AS transactions,\n        COUNT(DISTINCT fullVisitorId) AS users,\n        SUM(totals.visits) AS sessions,\n        SUM(totals.pageviews) AS pageviews\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND totals.totalTransactionRevenue IS NOT NULL\n    GROUP BY\n        1\n    ORDER BY\n        2 DESC\n\"\"\"\nsafe_query_job = client.query(query)\ndf_3 = safe_query_job.to_dataframe()\ndf_3.head(3)","c8d08a3f":"# set up the matplotlib figure\nfig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, figsize=(10,24))\nfig.subplots_adjust(hspace=1)\n\nsns.barplot(x='channel',\n            y='revenue',\n            data=df_3,\n            estimator=sum,\n            ax=ax1)\n\nsns.barplot(x='channel',\n            y='transactions',\n            data=df_3,\n            estimator=sum,\n            ax=ax2)\n\nsns.barplot(x='channel',\n            y='users',\n            data=df_3,\n            estimator=sum,\n            ax=ax3)\n\nsns.barplot(x='channel',\n            y='sessions',\n            data=df_3,\n            estimator=sum,\n            ax=ax4)\n\nsns.barplot(x='channel',\n            y='pageviews',\n            data=df_3,\n            estimator=sum,\n            ax=ax5)\n\nax1.set_title('Total Revenue by Channel')\nax2.set_title('Total Transactions by Channel')\nax3.set_title('Total Users by Channel')\nax4.set_title('Total Visits by Channel')\nax5.set_title('Total Pageviews by Channel')","e0b46851":"# create a data frame with features\nquery = \"\"\"\n    SELECT \n        fullVisitorId AS userID,\n        AVG(totals.timeOnSite) As avgTimeOnSite,\n        SUM(totals.pageviews) AS pageviews,\n        SUM(totals.transactions) AS transactions\n    FROM \n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    GROUP BY\n        1\n    ORDER BY 1\n        \n\"\"\"\nsafe_query_job = client.query(query)\ndf_4 = safe_query_job.to_dataframe()\ndf_4.head(4)","12de95a8":"# replace na values with 0\ndf_4['transactions'].fillna(0, inplace=True)\ndf_4.head(4)","f03c784e":"pearsoncorr = df_4.corr(method='pearson')\npearsoncorr","7f2deeee":"# create a heat map of features\nsns.heatmap(pearsoncorr,\n              xticklabels=pearsoncorr.columns,\n              yticklabels=pearsoncorr.columns,\n              cmap='RdBu_r',\n              annot=True,\n              linewidth=0.5)","a9e72f1c":"# create a data frame with features\nquery = \"\"\"\n    SELECT\n        hits.page.pagePathLevel1 AS pagePath,\n        SUM(totals.pageviews) AS pageviews\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    GROUP BY 1\n    ORDER BY 2 DESC\n    LIMIT 10\n\"\"\"\nsafe_query_job = client.query(query)\ndf_5 = safe_query_job.to_dataframe()\ndf_5","a2fa60aa":"# create a bar chart of top 10 pages with most pageviews\ndf_5.plot.bar(x='pagePath', y='pageviews', rot=70, title='Top 10 Viewed Pages');\nplt.show();","c3c77ff1":"# create a data frame calling product features\nquery = \"\"\"\n    SELECT\n        product.v2ProductCategory AS product_category,\n        product.v2ProductName AS product_name,\n        product.productSKU AS product_sku,\n        product.productPrice\/1e6 AS product_price,\n        product.productQuantity AS product_quantity,\n        product.productRevenue\/1e6 AS product_revenue,\n        totals.totalTransactionRevenue\/1e6 AS total_revenue\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits,\n      UNNEST(hits.product) AS product\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n        AND productRevenue IS NOT NULL\n\"\"\"\nsafe_query_job = client.query(query)\ndf_6 = safe_query_job.to_dataframe()\ndf_6.head(3)","9ba91612":"# clean values under product_category\ndf_6['product_category'].unique()\ndf_6 = df_6.replace(['${productitem.product.origCatName}'], 'Miscellaneous')","02cf5fff":"# create a pivot table that shows the Top 10 selling product categories\npivot = pd.pivot_table(df_6, index=['product_category'], values=['product_revenue', 'product_quantity'], aggfunc=np.sum).sort_values(by='product_revenue', ascending=False)\npivot.plot(kind='bar')","7f46dcb5":"# describe product data frame\ndf_6.describe()","f22a3644":"# histogram of product price\nhist = sns.distplot(df_6['product_price'], bins=40)\nhist.set_title('distribution of product quantity by prices');\nhist.set_xlabel('product price');\nhist.set_ylabel('frequency');","0e9ffd3e":"# distribution of selling price by product category\nbox_plot = df_6.boxplot(column='product_price', by='product_category', figsize=(16,9));\nbox_plot.set_title('Product Price by Product Category');\nbox_plot.set_xlabel('product category');\nbox_plot.set_ylabel('product price');\nbox_plot.set_xticklabels(box_plot.get_xticklabels(), rotation=45);","f027a57b":"# create a data frame calling action features\nquery = \"\"\"\n    SELECT\n        hits.eCommerceAction.action_type AS actions,\n        COUNT(fullVisitorId) AS total_hits\n    FROM\n      `bigquery-public-data.google_analytics_sample.ga_sessions_*`,\n      UNNEST(hits) AS hits,\n      UNNEST(hits.product) AS product\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20161001' AND '20161230'\n    AND\n        (hits.ecommerceaction.action_type != '0' AND hits.ecommerceaction.action_type != '4' AND hits.ecommerceaction.action_type != '3')\n    GROUP BY \n        1\n    ORDER BY 1\n\"\"\"\nsafe_query_job = client.query(query)\ndf_7 = safe_query_job.to_dataframe()\ndf_7.head()","180df400":"# define action types. Action types can be found in BigQuery Export schema: https:\/\/support.google.com\/analytics\/answer\/3437719?hl=en\ndf_7['actions'] = df_7['actions'].astype(str) # convert action types to string\n\ndf_7['actions'] = df_7['actions'].replace(['0','1','2','3','4','5','6'],['Unknown', \n                                                                     'Click through of product lists', \n                                                                     'Product detail views', \n                                                                     'Add product(s) to cart',\n                                                                     'Remove products from cart',\n                                                                     'Check out',\n                                                                     'Completed purchase'])\ndf_7\n","9597740a":"# create a funnel visualization\nfig = go.Figure(go.Funnel(\n    y = df_7['actions'],\n    x = df_7['total_hits'],\n    textposition = 'inside',\n    textinfo = 'value+percent initial'))\n\nfig.update_layout(title_text = 'Shopping Cart Abandonment')\n\nfig.show()","752a7179":"As we can see from the visualization below, Referral traffic has generated the most revenue as well as garnered the most users to the Google Merchandise store. Interestingly, while Direct traffic has generated more revenue than Organic Search, Organic Search has led to more transactions and users during this fiscal quarter.     ","2178ecc3":"This section will begin to study users behavior on the Google Merchandise store. ","0b2b2fb1":"December generated over $153,000 in revenue and garnered almost 1,400 visits to the Google Merchandise store. The revenue generated in December accounted for 40% of Q4 sales, indicating a holiday surge that is typically seen in retail.","f70336a5":"# **Background**\n___________________________________\nIn this kernel I will perform some exploratory data analysis on the Google Merchandise store. I will take a sample of this data from 2016Q4 (October 2016 to December 2016), and provide some descriptive analysis on the site's performance. I will explore: \n\n1. **High-level Website Performance Overview:** What was the aggregate traffic and trends seen during this quarter?\n2. **Website Acquisition:** Where are users originating from and their conversions?\n3. **User Behavior:** How are users navigating to the Google Merchandise store and what are they purchasing?","77fd3ccc":"The majority of revenue is generated from US-based transactions.","02f7e690":"# 1. High Level Stats\n__________________________\nI will summarize the quarterly stats for 2016Q4 similar to a Google Analytics canned report. ","f7ef4b9e":"### What are the most visited pages on the site? \n\/google+redesign\/ has garnered the most pageviews followed by \/home. ","0e076288":"### Abandoned Cart visualization","f5c2c490":"During 2016Q4, the Google Merchandise Store had over 3,000 visits, almost 93,000 pageviews and earned $386,200 in revenue.","b694178c":"# 2. Website Acquisition\n________________________\nThis section will provide an overview of the top channels sending visitors to the Google Merchandise store. ","624d95f4":"### What was the most popular purchase during Q4?\n\nWhile Apparel generated the most revenue during Q4, Office Supplies were sold the most. ","6dded61a":"# 3. User Behavior\n","5f255929":"### What was the product price distribution and are there any outliers?\nThe average product price on the Google Merchandise store is around \\\\$18. We can see that based on the histogram that products on the online store ranged from \\\\$0.80 to \\\\$250, but products under \\\\$50 were sold the most frequently. As we start to explore the products by product category we can see that the median price varied across product categories with backpacks having the highest median average price. Bottles, Google, Headgear, among others have comparatively short box plots suggesting that overall products within each category are priced within similar ranges, while Electronics, Apparel, and Office have quite different selling prices with multiple outliers.","919ba199":"### Are users more likely to transact the longer they visit the site? Or are they more likely to transact with the more browsing on site (# of pageviews)? \n\nWe calculated the Pearson coefficient of correlation for these two features (pageviews and average time on site) and transactions. A coefficient close to 1 means that there's a strong correlation between the two variables. As we can see on the heat map, pageviews are more positively correlated with transactions than average time on site with transactions. This could indicate site browsing as a key indicator that may lead to transactions."}}