{"cell_type":{"faff0f00":"code","8f767922":"code","53270e2f":"code","e7b6ea43":"code","266b98ac":"code","0d7456e6":"code","f9c9bdc7":"code","c6c5d7cb":"code","27b8f02e":"code","cc518731":"code","bf4de47b":"code","82defbe4":"code","f7ac361d":"code","34db87a2":"code","b1449af6":"code","4610ba2c":"code","3931c133":"code","245b6e05":"code","df5b92f6":"code","1e4fefdc":"code","d0c12671":"code","58af25e9":"code","e3b57b0a":"code","8c42e622":"code","501ad4d2":"code","36dc482e":"code","d2e1829f":"code","71b1c782":"code","00aae2e2":"code","60d5eb42":"code","353fb60d":"code","f06bd302":"code","a95370f3":"code","cd083d5f":"code","9e0d71e6":"code","ad7b63b3":"code","c3b3db69":"code","8859bd40":"code","1cc12403":"code","65d0fb1f":"code","30838b5d":"code","3a209f28":"code","19ae8ad5":"code","ad399487":"code","76248477":"code","56c41909":"code","3bcb4fa2":"code","01b42b42":"code","e123b4dd":"code","2dceb7e4":"code","53f76bdc":"code","816d2ffb":"code","316c4992":"code","e78ef14b":"code","09303595":"code","d2737583":"markdown","829a59aa":"markdown","5d9f2f74":"markdown","50dd8709":"markdown","bec78d0f":"markdown","dd1de551":"markdown","f6f4144d":"markdown","42ba75ce":"markdown"},"source":{"faff0f00":"!pip uninstall scikit-learn -y\n\n!pip install -U scikit-learn","8f767922":"import sklearn\nprint(sklearn.__version__)","53270e2f":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import plot_roc_curve","e7b6ea43":"df_heart = pd.read_csv('..\/input\/heart-failure-prediction\/heart.csv')\ndf_heart.head()","266b98ac":"df_heart.info()","0d7456e6":"df_heart['HeartDisease'].value_counts().plot(kind = 'bar', \n                                             figsize = (10, 6),\n                                             color = ['salmon', 'lightblue'])\nplt.title(\"HeartDisease Results\")\nplt.xlabel(\"0: no disease, 1: disease\")\nplt.ylabel(\"Amount\")\nplt.xticks(rotation = 0);","f9c9bdc7":"df_heart.isna().sum()","c6c5d7cb":"df_heart.describe()  ","27b8f02e":"df_heart['Sex'].value_counts()","cc518731":"pd.crosstab(df_heart['HeartDisease'], df_heart['Sex'])","bf4de47b":"pd.crosstab(df_heart['HeartDisease'], df_heart['Sex']).plot(kind='bar',\n                                                            figsize = (10, 6),\n                                                            color = ['salmon', 'lightblue']);\nplt.title(\"HeartDisease Frequence For Sex\")\nplt.xlabel(\"0: no disease, 1: disease\")\nplt.ylabel(\"Amount\")\nplt.legend(['Famale', 'Male'])\nplt.xticks(rotation = 0);","82defbe4":"df_heart['MaxHR'].value_counts()","f7ac361d":"plt.figure(figsize = (10, 6))\n\n#Scatter with postive examples\nplt.scatter(df_heart['Age'][df_heart['HeartDisease'] == 1],\n            df_heart['MaxHR'][df_heart['HeartDisease']==1],\n            c = 'salmon')\n\n#Scatter with nagtive examples\nplt.scatter(df_heart['Age'][df_heart['HeartDisease'] == 0],\n            df_heart['MaxHR'][df_heart['HeartDisease']==0],\n            c = 'lightblue')\n\nplt.title(\"Heart Disease in functions of Age and Maximum Heart Rate\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.legend(['Disease', 'No Disease']);","34db87a2":"plt.figure(figsize = (10, 6))\ndf_heart['Age'].plot.hist();","b1449af6":"pd.crosstab(df_heart['ChestPainType'], df_heart['HeartDisease'])","4610ba2c":"pd.crosstab(df_heart['ChestPainType'], df_heart['HeartDisease']).plot(kind='bar',\n                                                                      figsize = (10, 6),\n                                                                      color = ['salmon', 'lightblue']);\nplt.title(\"Heart Disease Frequency Per ChestPainType\")\nplt.xlabel(\"ChestPainType\")\nplt.ylabel(\"Amount\")\nplt.legend(['No Disease', 'Disease'])\nplt.xticks(rotation = 0);","3931c133":"corr_metrix = df_heart.corr()\nfig, ax = plt.subplots(figsize=(15,10))\nax = sns.heatmap(corr_metrix,\n                 annot=True,\n                 linewidths=.5,\n                 fmt='.2f',\n                 cmap='YlGnBu');","245b6e05":"X = df_heart.iloc[:, :-1].values\ny = df_heart.iloc[:, -1].values","df5b92f6":"X[:5]","1e4fefdc":"# Encoding categorical data\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1, 2, 6, 8, 10])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)","d0c12671":"random_state = 42\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = random_state)","58af25e9":"X_train","e3b57b0a":"models = {\n    'Logic Regression': LogisticRegression(),\n    'KNN': KNeighborsClassifier(),\n    'Random Forest': RandomForestClassifier()\n}\n\ndef fit_and_score(models, X_train, y_train, X_test, y_test):\n  np.random.seed(random_state)\n  model_scores = {}\n  for name, model in models.items():\n    model.fit(X_train, y_train)\n    model_scores[name] = model.score(X_test, y_test)\n  return model_scores","8c42e622":"model_scores = fit_and_score(models,\n                             X_train, \n                             y_train, \n                             X_test, \n                             y_test)\nmodel_scores","501ad4d2":"models_comparison = pd.DataFrame(model_scores,\n                                 index = ['accuracy'])\nmodels_comparison.T.plot.bar();","36dc482e":"# Tuning KNN\ntrain_scores = []\ntest_scores = []\n\nneighbors = range(1, 21)\nknn = KNeighborsClassifier()\nfor i in neighbors:\n  knn.set_params(n_neighbors = i)\n  knn.fit(X_train, y_train)\n  train_scores.append(knn.score(X_train, y_train))\n  test_scores.append(knn.score(X_test, y_test))","d2e1829f":"train_scores","71b1c782":"test_scores","00aae2e2":"plt.subplots(figsize=(10, 6))\nplt.plot(neighbors, train_scores, label = 'Train Score')\nplt.plot(neighbors, test_scores, label = 'Test Score')\nplt.xticks(np.arange(1, 21))\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Model Score')\nplt.legend();\n\nprint(f'Maximum KNN score on the test data: {max(test_scores) * 100:.2f}%')","60d5eb42":"leg_reg_grid = {'C': np.logspace(-4, 4, 30),\n                'solver': ['liblinear']}\nrf_grid = {'n_estimators': np.arange(900, 1100, 50),\n           'max_depth': [None],\n           'min_samples_split': np.arange(5, 20, 5),\n           'min_samples_leaf': np.arange(1, 20, 5),\n           'bootstrap': [True]}","353fb60d":"rs_log_reg = RandomizedSearchCV(LogisticRegression(),\n                                param_distributions = leg_reg_grid,\n                                random_state = random_state,\n                                cv = 5,\n                                n_iter = 20,\n                                verbose = True)\nrs_log_reg.fit(X_train, y_train)","f06bd302":"rs_log_reg.best_params_","a95370f3":"rs_log_reg.score(X_test, y_test)","cd083d5f":"rs_rf = RandomizedSearchCV(RandomForestClassifier(),\n                           param_distributions = rf_grid,\n                           random_state = random_state,\n                           cv = 5,\n                           n_iter = 20,\n                           verbose = True)\nrs_rf.fit(X_train, y_train)","9e0d71e6":"rs_rf.best_params_","ad7b63b3":"rs_rf.score(X_test, y_test)","c3b3db69":"gs_log_reg = GridSearchCV(LogisticRegression(),\n                          param_grid = leg_reg_grid,\n                          n_jobs = 1,\n                          cv = 5,\n                          verbose = True)\ngs_log_reg.fit(X_train, y_train)","8859bd40":"gs_log_reg.best_params_","1cc12403":"gs_log_reg.score(X_test, y_test)","65d0fb1f":"gs_rf = GridSearchCV(RandomForestClassifier(),\n                          param_grid = rf_grid,\n                          n_jobs = 1,\n                          cv = 5,\n                          verbose = True)\ngs_rf.fit(X_train, y_train)","30838b5d":"gs_rf.best_params_","3a209f28":"gs_rf.score(X_test, y_test)","19ae8ad5":"y_preds = rs_rf.predict(X_test)","ad399487":"plot_roc_curve(rs_rf, X_test, y_test);","76248477":"sns.set(font_scale = 1.5)\nfig, ax = plt.subplots(figsize=(6,6))\nax = sns.heatmap(confusion_matrix(y_test, y_preds),\n                 annot=True,\n                 linewidths=.5,\n                 cbar = False,\n                 cmap='YlGnBu')\nplt.xlabel('Predict Label')\nplt.ylabel('True Label');","56c41909":"print(classification_report(y_test, y_preds))","3bcb4fa2":"rf_class_model = RandomForestClassifier(bootstrap = True,\n                                        max_depth = None,\n                                        min_samples_leaf = 1,\n                                        min_samples_split = 10,\n                                        n_estimators = 1050)","01b42b42":"cv_acc = cross_val_score(rf_class_model,\n                X,\n                y,\n                cv = 5, \n                scoring = 'accuracy')\ncv_acc = np.mean(cv_acc)\ncv_acc","e123b4dd":"cv_precision = cross_val_score(rf_class_model,\n                X,\n                y,\n                cv = 5, \n                scoring = 'precision')\ncv_precision = np.mean(cv_precision)\ncv_precision","2dceb7e4":"cv_recall = cross_val_score(rf_class_model,\n                X,\n                y,\n                cv = 5, \n                scoring = 'recall')\ncv_recall = np.mean(cv_recall)\ncv_recall","53f76bdc":"cv_f1 = cross_val_score(rf_class_model,\n                X,\n                y,\n                cv = 5, \n                scoring = 'f1')\ncv_f1 = np.mean(cv_f1)\ncv_f1","816d2ffb":"cv_metrics = pd.DataFrame({'Accuracy': cv_acc,\n                          'Precision': cv_precision,\n                          'Recall': cv_recall,\n                          'F1': cv_f1},\n                          index = [0])\ncv_metrics.T.plot.bar(title = 'Cross-validated Classification metrics',\n                     legend = False);","316c4992":"rf_class_model.fit(X_train, y_train)\nrf_class_model.feature_importances_","e78ef14b":"def plot_feature_importance(importance,names,model_type):\n\n  #Create arrays from feature importance and feature names\n  feature_importance = np.array(importance)\n  feature_names = np.array(names)\n\n  #Create a DataFrame using a Dictionary\n  data={'feature_names':feature_names,'feature_importance':feature_importance}\n  fi_df = pd.DataFrame(data)\n\n  #Sort the DataFrame in order decreasing feature importance\n  fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n  #Define size of bar plot\n  plt.figure(figsize=(10,8))\n  #Plot Searborn bar chart\n  sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n  #Add chart labels\n  plt.title(model_type + 'FEATURE IMPORTANCE')\n  plt.xlabel('FEATURE IMPORTANCE')\n  plt.ylabel('FEATURE NAMES')","09303595":"plot_feature_importance(rf_class_model.feature_importances_,ct.get_feature_names_out(),'RANDOM FOREST')","d2737583":"## Hyperparameter tuning with GridSearchCV","829a59aa":"## Feature Importance","5d9f2f74":"# **Heart Failure Prediction Dataset**\n\n> Cardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year, which accounts for 31% of all deaths worldwide. Four out of 5CVD deaths are due to heart attacks and strokes, and one-third of these deaths occur prematurely in people under 70 years of age. Heart failure is a common event caused by CVDs and this dataset contains 11 features that can be used to predict a possible heart disease.\n\n> People with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidaemia or already established disease) need early detection and management wherein a machine learning model can be of great help.\n\n## **1. Problem Definition**\n> Create a model to assess the likelihood of a possible heart disease event.\n\n## **2. Data Source**\n> This dataset was created by combining different datasets already available independently but not combined before. In this dataset, 5 heart datasets are combined over 11 common features which makes it the largest heart disease dataset available so far for research purposes. The five datasets used for its curation are:\n\n> Cleveland: 303 observations\n> Hungarian: 294 observations\n> Switzerland: 123 observations\n> Long Beach VA: 200 observations\n> Stalog (Heart) Data Set: 270 observations\n> Total: 1190 observations\n> Duplicated: 272 observations\n\n> Final dataset: 918 observations\n\n> Every dataset used can be found under the Index of heart disease datasets from UCI Machine Learning Repository on the following link: \n> https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/heart-disease\/\n> Kaggle link: \n> https:\/\/www.kaggle.com\/fedesoriano\/heart-failure-prediction\/download\n\n## **3. Evaluation**\n> If we can reach 95% accuracy at predicting whether or not a patient has heart disease during the proof of concept, we'll pursue the project.\n\n## **4. Features**\n> **Attrubute Information**\n\n1. **Age -** age of the patient [years]\n2. **Sex -** sex of the patient \n> * M: Male\n> * F: Female]\n3. **ChestPainType -** chest pain type \n> * TA: Typical Angina\n> * ATA: Atypical Angina\n> * NAP: Non-Anginal Pain\n> * ASY: Asymptomatic\n4. **RestingBP -** resting blood pressure [mm Hg]\n5. **Cholesterol -** serum cholesterol [mm\/dl]\n6. **FastingBS -** fasting blood sugar\n> * 1: if FastingBS > 120 mg\/dl\n> * 0: otherwise\n7. **RestingECG -** resting electrocardiogram results: \n> * Normal: Normal\n> * ST: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n> * LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria\n8. **MaxHR -** maximum heart rate achieved: [Numeric value between 60 and 202]\n9. **ExerciseAngina -** exercise-induced angina:\n> * Y: Yes\n> * N: No\n10. **Oldpeak -** ST [Numeric value measured in depression]\n11. **ST_Slope -** the slope of the peak exercise ST segment:\n> * Up: upsloping\n> * Flat: flat\n> * Down: downsloping\n12. **HeartDisease -** output class:\n> * 1: heart disease\n> * 0: Normal","50dd8709":"## Heart Disease Frequency Per ChestPainType","bec78d0f":"## Hpyerparameter Tuning","dd1de551":"## Hyperparameter tuning with RandomizedSearchCV","f6f4144d":"## Age vs. Maximum Heart Rate For Heart Disease","42ba75ce":"## Check the distribution of the Age"}}