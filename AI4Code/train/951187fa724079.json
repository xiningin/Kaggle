{"cell_type":{"3b54a0db":"code","8cd1c110":"code","6e7b600a":"code","3cbda7f1":"code","63fd3fbe":"code","f3044ac1":"code","0112f32a":"code","b0aebc51":"code","7f86f9d9":"code","059da701":"code","4ceeab16":"code","42022313":"code","96e5bf5c":"code","5c7790ea":"code","7f9a8331":"code","cda77646":"code","bb699f58":"code","df7e4785":"code","8cb58ba0":"code","05f26dde":"code","d23da813":"code","72427ac8":"code","0c588bf5":"code","91228d76":"code","59d49919":"code","05fe90ec":"code","978909f1":"code","7e75b7bf":"code","5e16da5b":"code","a8493f24":"markdown","a0ec130c":"markdown","c0b8c41a":"markdown","b8578209":"markdown","f6cc6560":"markdown","85a4a7e8":"markdown","2a51d4f8":"markdown","ec3bcf32":"markdown","7660beea":"markdown","05b89c28":"markdown","8d165524":"markdown","2a693b91":"markdown","dffc216a":"markdown","719c4149":"markdown","31d782cd":"markdown","a9da6530":"markdown","09e7d80e":"markdown","7476c812":"markdown","4c35f3f7":"markdown","7c951891":"markdown","23626314":"markdown","f99780e3":"markdown","8dffbaef":"markdown","f46265fe":"markdown","dd2c9e18":"markdown","0a89600f":"markdown","38e736c2":"markdown","d1818db8":"markdown","c972f671":"markdown","bc37776d":"markdown","d9bbb9c2":"markdown","ae7d34cd":"markdown","68f22d7a":"markdown"},"source":{"3b54a0db":"import warnings; warnings.simplefilter('ignore')\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport keras\nimport seaborn as sns\nfrom sklearn import metrics","8cd1c110":"train = pd.read_csv(\"..\/input\/fashion-mnist_train.csv\")\ntest = pd.read_csv(\"..\/input\/fashion-mnist_test.csv\")","6e7b600a":"print(train.shape)\nprint(test.shape)","3cbda7f1":"train.head()","63fd3fbe":"values = {0: \"T-shirt\/top\", 1:\"Trouser\", 2:\"Pullover\", 3:\"Dress\", 4:\"Coat\", 5:\"Sandal\", 6:\"Shirt\", 7:\"Sneaker\", 8:\"Bag\", 9:\"Ankle Boot\"}\ndef lab_to_desc(label):\n    return values[label]","f3044ac1":"train_arr = np.array(train)\ntest_arr = np.array(test)\ntrain_arr","0112f32a":"fig = plt.figure()\n\n# From training dataset\nax1 = fig.add_subplot(1,2,1)\nax1.imshow(train_arr[1, 1:].reshape(28, 28), cmap=\"Greys\")\nprint(\"Image 1 label: \",train_arr[1, 0])\n\n# From testing dataset\nax2 = fig.add_subplot(1,2,2)\nax2.imshow(test_arr[1, 1:].reshape(28, 28), cmap=\"Greys\")\nprint(\"Image 2 label: \",test_arr[1, 0])","b0aebc51":"train_X = train_arr[:, 1:]\/255\ntest_X = test_arr[:, 1:]\/255\nprint(train_X.shape)\nprint(test_X.shape)","7f86f9d9":"train_y = train_arr[:, 0]\ntest_y = test_arr[:, 0]","059da701":"train_X = train_X.reshape([train_X.shape[0], 28, 28, 1])\nprint(train_X.shape)\ntest_X = test_X.reshape([test_X.shape[0], 28, 28, 1])\nprint(test_X.shape)","4ceeab16":"from keras.models import Sequential\nfrom keras.layers import MaxPooling2D, Conv2D, Flatten, Dense, Dropout\nfrom keras.optimizers import Adam","42022313":"classifier1 = Sequential()\nclassifier1.add(Conv2D(32, (2, 2), input_shape=(28, 28, 1), activation='relu'))\nclassifier1.add(MaxPooling2D(pool_size=(2, 2)))\nclassifier1.add(Flatten())\nclassifier1.add(Dense(units = 16, activation = 'relu'))\n# 10 units in the last Dense layer as there are 10 classes to be classified into\nclassifier1.add(Dense(units = 10, activation = 'sigmoid'))","96e5bf5c":"classifier1.summary()","5c7790ea":"classifier1.compile(optimizer = 'adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","7f9a8331":"%%time\nhistory = classifier1.fit(train_X, train_y, epochs=10, batch_size=256)","cda77646":"print(history.history.keys())\n\nplt.plot(history.history['acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()","bb699f58":"result = classifier1.evaluate(x=test_X, y=test_y)\nprint(\"Accuracy of the model is: %.2f percent\"%(result[1]*100))","df7e4785":"import random","8cb58ba0":"predictions = classifier1.predict_classes(test_X)","05f26dde":"fig, axes = plt.subplots(5, 5, figsize=(14, 14))\n# axes is currently in multiple lists, ravel reshapes it to 1D\naxes = axes.ravel()\n\nrandnum = random.randint(0, 9975)\n\nfor i in range(25):\n    axes[i].imshow(test_X[randnum + i].reshape(28, 28), cmap=\"Greys\")\n    axes[i].set_title('Prediction: %s\\n True: %s' %\n                      (lab_to_desc(predictions[randnum + i]), lab_to_desc(test_y[randnum + i])))\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=0.5)","d23da813":"classifier = Sequential()\nclassifier.add(Conv2D(128, (3, 3), input_shape=(28, 28, 1), activation='relu'))\nclassifier.add(Conv2D(128, (3, 3), input_shape=(28, 28, 1), activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2, 2)))\nclassifier.add(Conv2D(128, (3, 3), activation='relu'))\nclassifier.add(MaxPooling2D(pool_size=(2, 2)))\nclassifier.add(Flatten())\nclassifier.add(Dense(units=64, activation='relu'))\nclassifier.add(Dropout(0.5))\nclassifier.add(Dense(units=128, activation='relu'))\nclassifier.add(Dropout(0.5))\nclassifier.add(Dense(units=10, activation='sigmoid'))","72427ac8":"classifier.summary()","0c588bf5":"classifier.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","91228d76":"%%time\nhistory = classifier.fit(train_X, train_y, epochs=25, batch_size=256)","59d49919":"print(history.history.keys())\n\nplt.plot(history.history['acc'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.show()","05fe90ec":"result = classifier.evaluate(x=test_X, y=test_y)\nprint(\"Accuracy of the model is: %.2f percent\"%(result[1]*100))","978909f1":"predictions = classifier.predict_classes(test_X)","7e75b7bf":"fig, axes = plt.subplots(5, 5, figsize=(14, 14))\n# axes is currently in multiple lists, ravel reshapes it to 1D\naxes = axes.ravel()\n\nrandnum = random.randint(0, 9975)\n\nfor i in range(25):\n    axes[i].imshow(test_X[randnum + i].reshape(28, 28), cmap=\"Greys\")\n    axes[i].set_title('Prediction: %s\\n True: %s' %\n                      (lab_to_desc(predictions[randnum + i]), lab_to_desc(test_y[randnum + i])))\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=0.5)","5e16da5b":"classifier.save_weights(\"CNN2.h5\")\nprint(\"Saved model to disk.\")","a8493f24":"Each image is 28x28, so there are 784 pixels per image.\n\nEach pixel holds a value between 0 and 255 (grayscale).\n\n1 column is for label value, seen below","a0ec130c":"### Importing Datasets","c0b8c41a":"#### Plotting changes in accuracy","b8578209":"### A basic, small Sequential model first.","f6cc6560":"### Saving the model locally, so it can be loaded later","85a4a7e8":"## Data preparation and visualization","2a51d4f8":"### Library Imports","ec3bcf32":"### Bigger CNN","7660beea":"#### Evaluating the model on our test dataset","05b89c28":"We do this because Neural Networks work well with comparable ranged inputs.\n\nDividing by 255 to get values between 0 and 1","8d165524":"### Head of the train data","2a693b91":"**Good results, for a relatively small model. Let us visualize the results with a few random images and their results**","dffc216a":"#### Printing size (Rows and Columns) of the datasets","719c4149":"**Let us visualize the results with a few random images and their results**","31d782cd":"#### Fitting the data onto the model","a9da6530":"Making y (output) datasets from the 1st column of the data","09e7d80e":"#### Evaluating the model on our test dataset","7476c812":"#### Plotting changes in accuracy","4c35f3f7":"### Plotting one of the images, and printing its label.","7c951891":"**Better results with a more complicated network, as expected.**","23626314":"### Labels and their descriptions:","f99780e3":"**Let us try with a bigger, more complicated CNN, hopefully we get better results**","8dffbaef":"## Now that our data is ready, we can begin with making a Keras model","f46265fe":"\n| Label | Description |\n| --- | --- |\n| 0 | T-shirt\/top |\n| 1 | Trouser |\n| 2 | Pullover |\n| 3 | Dress |\n| 4 | Coat |\n| 5 | Sandal |\n| 6 | Shirt |\n| 7 | Sneaker |\n| 8 | Bag |\n| 9 | Ankle boot |","dd2c9e18":"### Normalizing the Data for our Neural Network","0a89600f":"### Reshaping the datasets as 28x28 inputs","38e736c2":"# **Hence we have successfully made high accuracy image classifications using Convolutional Neural Networks through Keras**","d1818db8":"### Function to convert label values to their desciptions","c972f671":"### Converting the dataframe to a numpy array, so as to be able to visualize it","bc37776d":"# Making a Convolutional Neural Network using Keras to classify the images","d9bbb9c2":"### Library Imports","ae7d34cd":"We can see that it is an ankle boot (label 9), and a Trouser (label 1)","68f22d7a":"#### Fitting the data on the model"}}