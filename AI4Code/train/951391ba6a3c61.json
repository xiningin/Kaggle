{"cell_type":{"cb249ea2":"code","9cafe790":"code","a0a03bd3":"code","25dc96a4":"code","5e9c62ed":"code","55ca51f9":"code","1bf3e760":"code","de5d9701":"code","698c412b":"code","694c676f":"code","6448d38b":"code","62b98495":"code","0bdb09f0":"code","8ca64daa":"code","69c8f63e":"code","2a9b2abe":"code","b31908a4":"code","0eb666c7":"code","1e79acfc":"code","fec0e40c":"code","613e028d":"code","50073124":"code","01bb39dc":"code","218c7cfd":"code","acc6b3a4":"code","730f5099":"markdown","88e732ce":"markdown","226bf388":"markdown","0d2124c2":"markdown","a2fda5d9":"markdown","04df6023":"markdown","ce9fc058":"markdown","c269e3d5":"markdown","f3b0aca6":"markdown","9803df87":"markdown","ac22d9dc":"markdown","695d650d":"markdown","cd7f843e":"markdown","9000a094":"markdown","43b0e39a":"markdown"},"source":{"cb249ea2":"import pandas as pd\nimport numpy as np\nimport pylab\n%matplotlib inline\n\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\ndf = pd.read_csv(\"..\/input\/20181019-wikia_stats_users.csv\")\ndf.drop_duplicates(subset=['url'], inplace=True)\ndf.head()","9cafe790":"def describeMetric(df, metric):\n    print(df[metric].describe())\n    print(\"90%: {}\".format(df[metric].quantile(0.9)))\n    print(\"95%: {}\".format(df[metric].quantile(0.95)))\n    print(\"99%: {}\".format(df[metric].quantile(0.99)))","a0a03bd3":"describeMetric(df, 'stats.pages')","25dc96a4":"describeMetric(df, 'stats.articles')","5e9c62ed":"describeMetric(df,'users_1')","55ca51f9":"describeMetric(df, 'stats.edits')","1bf3e760":"df['editsperpage'] = df['stats.edits'] \/ df['stats.pages']","de5d9701":"describeMetric(df, 'editsperpage')","698c412b":"groupByLanguage = df.groupby(by=\"lang\")\nbyLanguage = groupByLanguage.id.count()\nbyLanguage.sort_values(ascending=False, inplace=True)\nbyLanguage","694c676f":"def langOther(x):\n    if x in byLanguage.index[:8].values:\n        return x\n    else:\n        return 'other'\n    \nbyLanguage.index[:8]\ndf['language'] = df['lang']\ndf['language'] = df['language'].apply(langOther)","6448d38b":"byReducedLanguage = df.groupby(by=\"language\").id.count()\nbyReducedLanguage.sort_values(ascending=False, inplace=True)\nbyReducedLanguage","62b98495":"values = byReducedLanguage.values\nvalues = 100*(values\/values.sum())\n\n\ndata = [go.Bar(\n            x=values,\n            y=byReducedLanguage.index.values,\n            orientation = 'h'\n)]\n\nannotations = [dict(\n            x=x+8,\n            y=y,\n            xref='x',\n            yref='y',\n            text='{0:.2f}%'.format(x),\n            showarrow=False\n        ) for (x,y) in zip(values, list(range(0,len(values))))]\n\nlayout = go.Layout(\n    xaxis=dict(\n        range=[0,101],\n        domain=[0,0.5],\n        tickfont=dict(\n            size=14,\n        ),\n        #showline=True\n    ),\n    yaxis=dict(\n        tickfont=dict(\n            size=14,\n        ),\n        ticksuffix=\" \"\n    ),\n    annotations = annotations\n);\n\n\niplot(go.Figure(data= data, layout=layout), filename=\"byLanguage\")","0bdb09f0":"groupByHub = df.groupby(by=\"hub\")\nbyHub = groupByHub.id.count()\nbyHub.sort_values(ascending=False, inplace=True)\nbyHub","8ca64daa":"values = byHub.values\nvalues = 100*(values\/values.sum())\n\n\ndata = [go.Bar(\n            x=values,\n            y=byHub.index.values,\n            orientation = 'h'\n)]\n\nannotations = [dict(\n            x=x+8,\n            y=y,\n            xref='x',\n            yref='y',\n            text='{0:.2f}%'.format(x),\n            showarrow=False\n        ) for (x,y) in zip(values, list(range(0,len(values))))]\n\nlayout = go.Layout(\n    xaxis=dict(\n        range=[0,101],\n        domain=[0,0.5],\n        tickfont=dict(\n            size=14,\n        ),\n        #showline=True\n    ),\n    yaxis=dict(\n        tickfont=dict(\n            size=14,\n        ),\n        ticksuffix=\" \"\n    ),\n    annotations = annotations\n);\n\n\niplot(go.Figure(data= data, layout=layout), filename=\"byHub\")","69c8f63e":"threshold = 1\ntotalWikis = len(df) \ndeadWikis = df[(df['stats.activeUsers']<threshold)|(df['users_1']==0)]\nprint (\"Dead Wikis: {} ({:05.2f}%)\".format(len(deadWikis), 100*len(deadWikis)\/totalWikis))","2a9b2abe":"aliveWikis = df[(df['stats.activeUsers']>=threshold)&(df['users_1']>0)]\nprint (\"Alive Wikis: {} ({:05.2f}%)\".format(len(aliveWikis), 100*len(aliveWikis)\/totalWikis))\nprint(\"With less than 5 articles: {}\".format(len(aliveWikis[aliveWikis['stats.articles']<5])))\nprint(\"With less than 24 pages: {}\".format(len(aliveWikis[aliveWikis['stats.pages']<24])))\nprint(\"With less than 4 users: {}\".format(len(aliveWikis[aliveWikis['users_1']<4])))","b31908a4":"fig = pylab.figure(figsize=(12,8))\nax = pylab.gca()\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_xlabel('Users', {'size': 'large'})\nax.set_ylabel('Articles', {'size': 'large'})\nax.scatter(aliveWikis['users_1'].values,aliveWikis['stats.articles'].values, c='g',alpha=0.7)\nax.scatter(deadWikis['users_1'].values,deadWikis['stats.articles'].values, c='black', alpha=0.3)","0eb666c7":"fig = pylab.figure(figsize=(12,8))\nax = pylab.gca()\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_xlabel('Users', {'size': 'large'})\nax.set_ylabel('Edits', {'size': 'large'})\nax.scatter(aliveWikis['users_1'].values,aliveWikis['stats.edits'].values, c='g',alpha=0.7)\nax.scatter(deadWikis['users_1'].values,deadWikis['stats.edits'].values, c='black', alpha=0.3)","1e79acfc":"fig = pylab.figure(figsize=(12,8))\nax = pylab.gca()\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_xlabel('Articles', {'size': 'large'})\nax.set_ylabel('Edits', {'size': 'large'})\nax.scatter(aliveWikis['stats.articles'].values,aliveWikis['stats.edits'].values, c='g',alpha=0.7)\nax.scatter(deadWikis['stats.articles'].values,deadWikis['stats.edits'].values, c='black', alpha=0.3)","fec0e40c":"histAlive, binsAlive = np.histogram(aliveWikis[['users_1']],bins=int(aliveWikis[['users_1']].max()))\nyAlive = np.cumsum(histAlive[::-1])[::-1]\n\nhistDead, binsDead = np.histogram(deadWikis[['users_1']],bins=int(deadWikis[['users_1']].max()))\nyDead = np.cumsum(histDead[::-1])[::-1]","613e028d":"data = [\n    go.Scattergl(\n        x=binsAlive[0:len(binsAlive)-1],\n        y=yAlive,     \n        mode='markers',\n        name=\"Active wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='green',\n            size=8\n        )\n    ),\n    go.Scattergl(\n        x=binsDead[0:len(binsDead)-1],\n        y=yDead, \n        mode='markers',\n        name=\"Inactive wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='black',\n            size=8\n        )\n    )\n]\n\nlayout = go.Layout(\n    xaxis=dict(\n        type='log',\n        autorange=True,\n        domain=[0,0.5],\n        exponentformat=\"power\",\n        title=\"At least U users\"\n    ),\n    yaxis=dict(\n        type='log',\n        autorange=True,\n        exponentformat=\"power\",\n        title=\"Number of wikis\"\n    ),\n    legend=dict(\n        x=0.3,\n        y=0.9\n    )\n)\n\niplot(go.Figure(data= data, layout=layout))","50073124":"histAlive, binsAlive = np.histogram(aliveWikis[['stats.edits']],bins= 100000)#int(aliveWikis[['stats.edits']].max()))\nyAlive = np.cumsum(histAlive[::-1])[::-1]\n\nhistDead, binsDead = np.histogram(deadWikis[['stats.edits']],bins=100000)#int(deadWikis[['stats.edits']].max()))\nyDead = np.cumsum(histDead[::-1])[::-1]","01bb39dc":"data = [\n    go.Scattergl(\n        x=binsAlive[0:len(binsAlive)-1],\n        y=yAlive,     \n        mode='markers',\n        name=\"Active wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='green',\n            size=8\n        )\n    ),\n    go.Scattergl(\n        x=binsDead[0:len(binsDead)-1],\n        y=yDead, \n        mode='markers',\n        name=\"Inactive wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='black',\n            size=8\n        )\n    )\n]\n\nlayout = go.Layout(\n    xaxis=dict(\n        type='log',\n        autorange=True,\n        domain=[0,0.5],\n        exponentformat=\"power\",\n        title=\"At least E edits\"\n    ),\n    yaxis=dict(\n        type='log',\n        autorange=True,\n        exponentformat=\"power\",\n        title=\"Number of wikis\"\n    ),\n    legend=dict(\n        x=0.3,\n        y=0.9\n    )\n)\n\niplot(go.Figure(data= data, layout=layout))","218c7cfd":"histAlive, binsAlive = np.histogram(aliveWikis[['stats.articles']],bins= 100000)#int(aliveWikis[['stats.articles']].max()))\nyAlive = np.cumsum(histAlive[::-1])[::-1]\n\nhistDead, binsDead = np.histogram(deadWikis[['stats.articles']],bins=100000)#int(deadWikis[['stats.articles']].max()))\nyDead = np.cumsum(histDead[::-1])[::-1]","acc6b3a4":"data = [\n    go.Scattergl(\n        x=binsAlive[0:len(binsAlive)-1],\n        y=yAlive,     \n        mode='markers',\n        name=\"Active wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='green',\n            size=8\n        )\n    ),\n    go.Scattergl(\n        x=binsDead[0:len(binsDead)-1],\n        y=yDead, \n        mode='markers',\n        name=\"Inactive wikis\",\n        marker=dict(\n            symbol='circle',\n            opacity=0.7,\n            color='black',\n            size=8\n        )\n    )\n]\n\nlayout = go.Layout(\n    xaxis=dict(\n        type='log',\n        autorange=True,\n        domain=[0,0.5],\n        exponentformat=\"power\",\n        title=\"At least P articles\"\n    ),\n    yaxis=dict(\n        type='log',\n        autorange=True,\n        exponentformat=\"power\",\n        title=\"Number of wikis\"\n    ),\n    legend=dict(\n        x=0.3,\n        y=0.9\n    )\n)\n\niplot(go.Figure(data= data, layout=layout), filename=\"edits-cumsum\")","730f5099":"## Cummulative of wikis having at least P articles","88e732ce":"## Cummulative of wikis having at least U users","226bf388":"## Scatterplot of the number of articles over the number of edits, distinguishing between active wikis (green) and inactive wikis (black)","0d2124c2":"## Scatterplot of the number of users over the number of articles, distinguishing between active wikis (green) and inactive wikis (black)","a2fda5d9":"# Analysis of Active and Inactive wikis\n\n**Active wikis** are the ones with at least 1 user (`user_1`) and at least 1 active user in the previous 30 days (`stats.activeUsers`)\n","04df6023":"# Edit stats","ce9fc058":"# Distribution by hub category\n\nHub categories are defined by Wikia","c269e3d5":"## Articles","f3b0aca6":"## Scatterplot of the number of users over the number of edits, distinguishing between active wikis (green) and inactive wikis (black)\n","9803df87":"## Cummulative of wikis having at least E edits\n","ac22d9dc":"# Distribution by language","695d650d":"# Load data \n\n","cd7f843e":"## Edits per page","9000a094":"# Content stats\n\n- `stats.pages` refers to all pages in the wiki, including articles, talk pages, redirects, etc.\n- `stats.articles` refers to the number of content pages in the wiki.\n\n## Pages\n","43b0e39a":"# User stats"}}