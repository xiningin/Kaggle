{"cell_type":{"0c76dd87":"code","0ffcd848":"code","7b955a16":"code","b32c2eb7":"code","57346382":"code","57219a3d":"code","4f6a7ae4":"code","77160990":"code","f66b8573":"code","c5f46bc3":"code","ef48a35f":"code","34e02a4c":"code","5b9c7c4f":"code","8119099d":"code","99d82666":"code","b12570b2":"code","9dc10a6c":"code","f83b919f":"code","d1a7b525":"code","852efa7c":"code","8fce7f77":"code","bd0617ab":"code","2119ce6b":"code","c28a77cd":"code","9bb38214":"code","0f4c7341":"code","b5bf8602":"code","a269288b":"code","4cc0d925":"code","9c18e2f1":"code","97d61862":"code","4c23b5a7":"code","b1d4e8bd":"code","c29beaf3":"code","415fd53e":"code","9677a321":"code","18f486a7":"code","5e5e87a0":"code","b6514d78":"code","6355c3fd":"code","f1ebdac0":"code","e86cea56":"code","9d13a5cb":"code","a38df2db":"code","c4782bc3":"code","2d9f5aba":"markdown","2c2adbfc":"markdown"},"source":{"0c76dd87":"import pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport numpy as np\nfrom scipy import stats ","0ffcd848":"data = pd.read_csv(r\"..\/input\/heart-disease-uci\/heart.csv\" )\ndata.shape","7b955a16":"data.head()","b32c2eb7":"\ndata=data.dropna()#fillna(data.median())","57346382":"data","57219a3d":"data.describe().T","4f6a7ae4":"data.corr()","77160990":"for  i in data.columns:\n    print(i, \"\\n\",data[i].unique(), \"\\n\\n\")","f66b8573":"plt.hist(data[\"age\"], bins=10)\n","c5f46bc3":"sns.stripplot(y=\"age\", x=\"target\", data=data, jitter=True)","ef48a35f":"out1 = data[data[\"target\"]==1]\nout0 = data[data[\"target\"]==0]","34e02a4c":"l5 = data[data[\"age\"]<55]\ng5 = data[data[\"age\"]>=55]","5b9c7c4f":"l5.describe().T","8119099d":"g5.describe().T","99d82666":"l5.groupby(\"target\").count()[\"age\"]\/l5.shape[0]","b12570b2":"g5.groupby(\"target\").count()[\"age\"]\/g5.shape[0]","9dc10a6c":"print(\"\\n\",data.groupby(\"target\").describe()[\"age\"])\nstats.f_oneway(out1[\"age\"], out0[\"age\"])","f83b919f":"sns.countplot(data[\"sex\"])","d1a7b525":"one = data[data[\"sex\"]==1]\nzero = data[data[\"sex\"]==0]","852efa7c":"one.describe().T","8fce7f77":"zero.describe().T","bd0617ab":"one.groupby(\"target\").count()[\"age\"]\/one.shape[0]","2119ce6b":"zero.groupby(\"target\").count()[\"age\"]\/zero.shape[0]","c28a77cd":"print(\"\\n\",data.groupby(\"target\").describe()[\"sex\"])\nstats.f_oneway(out1[\"sex\"], out0[\"sex\"])","9bb38214":"print(\"\\n\",data.groupby(\"target\").describe()[\"cp\"])\ndata.groupby(\"cp\").describe()[\"target\"]","0f4c7341":"stats.f_oneway(out1[\"cp\"], out0[\"cp\"])","b5bf8602":"sns.stripplot(y=\"trestbps\", x=\"target\", data=data, jitter=True)\ndata.groupby(\"trestbps\").describe()[\"target\"]","a269288b":"print(\"\\n\",data.groupby(\"target\").describe()[\"trestbps\"])","4cc0d925":"stats.f_oneway(out1[\"trestbps\"], out0[\"trestbps\"])","9c18e2f1":"sns.stripplot(y=\"chol\", x=\"target\", data=data, jitter=True)\nprint(\"\\n\",data.groupby(\"target\").describe()[\"chol\"])\nstats.f_oneway(out1[\"chol\"], out0[\"chol\"])","97d61862":"print(data.groupby(\"fbs\").describe()[\"target\"])\nstats.f_oneway(out1[\"fbs\"], out0[\"fbs\"])","4c23b5a7":"print(data.groupby(\"restecg\").describe()[\"target\"])\nprint(\"\\n\",data.groupby(\"target\").describe()[\"restecg\"])","b1d4e8bd":"stats.f_oneway(out1[\"restecg\"], out0[\"restecg\"])","c29beaf3":"sns.stripplot(y=\"thalach\", x=\"target\", data=data, jitter=True)\nprint(\"\\n\",data.groupby(\"target\").describe()[\"thalach\"])\nstats.f_oneway(out1[\"thalach\"], out0[\"thalach\"])","415fd53e":"print(\"\\n\",data.groupby(\"target\").describe()[\"exang\"])\nstats.f_oneway(out1[\"exang\"], out0[\"exang\"])","9677a321":"sns.stripplot(y=\"oldpeak\", x=\"target\", data=data, jitter=True)\nprint(\"\\n\",data.groupby(\"target\").describe()[\"oldpeak\"])\nstats.f_oneway(out1[\"thalach\"], out0[\"oldpeak\"])","18f486a7":"print(\"\\n\",data.groupby(\"target\").describe()[\"slope\"])\nstats.f_oneway(out1[\"slope\"], out0[\"slope\"])","5e5e87a0":"print(\"\\n\",data.groupby(\"target\").describe()[\"ca\"])\nstats.f_oneway(out1[\"ca\"], out0[\"ca\"])","b6514d78":"print(\"\\n\",data.groupby(\"target\").describe()[\"thal\"])\nstats.f_oneway(out1[\"thal\"], out0[\"thal\"])","6355c3fd":"X, Y = data.drop(columns=[\"chol\", \"fbs\", \"target\"]), data[\"target\"]\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=39)","f1ebdac0":"from sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import SGDClassifier, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nclass_ = {\n    'KNN': [KNeighborsClassifier(), { 'n_neighbors':[2,4,8],'weights': ['uniform', 'distance']}],\n    'SVC': [SVC(kernel=\"linear\", C=0.05, gamma='auto'), {'C':[1, 0.1, 10], \n     'kernel':['rbf', 'linear']}],\n    'Decision Tree': [DecisionTreeClassifier(max_depth=25), {'criterion':['gini', 'entropy']}],\n    'Gaussian process': [GaussianProcessClassifier(1.0 * RBF(1.0)), {}],\n    'Random Forest': [RandomForestClassifier(max_depth=25, n_estimators=20), {'criterion':['gini', 'entropy']}],\n    'MLP': [MLPClassifier(), {'alpha':[0.01, 0.1, 1, 10], 'solver':['lbfgs', 'sgd', 'adam'],\n                                                   'activation':['relu']}],\n    'adaboost': [AdaBoostClassifier(), {'algorithm':['SAMME', 'SAMME.R']}],\n    'Gaussian nb': [GaussianNB(), {}],\n    'Quad Discr': [QuadraticDiscriminantAnalysis(), {}],\n    'SGDClassifier': [SGDClassifier(tol=0.00004), {'loss':['hinge', 'log', 'squared_epsilon_insensitive'],\n                                       'alpha':[1, 10, 100]}],\n    'LogisticRegression': [LogisticRegression(solver='liblinear'), {}],\n    'XGBoost': [xgb.XGBClassifier(), {'n_estimators':[15], 'booster':['gbtree', 'gblinear', 'dart']}]\n}\nmodel_ = {}\nfor i in class_:\n    print(\"Fitting\", i)\n    p = GridSearchCV(class_[i][0], class_[i][1], cv=2)\n    p.fit(X_train, Y_train)\n    model_[i]=[p, p.score(X_test, Y_test), mean_squared_error(Y_test, p.predict(X_test))]","e86cea56":"for i in model_:\n    print(\"---------------------------%s----------------------------------\"%i)\n    print(\"Score:\", model_[i][1])\n    print(\"MSE: \", model_[i][2])","9d13a5cb":"l = list(model_.items())\nl.sort(key=lambda x: x[1][1], reverse=True)","a38df2db":"print(l[0][0])\nprint(\"Score:\", l[0][1][1])\nprint(\"MSE:\", l[0][1][2])","c4782bc3":"print(l[1][0])\nprint(\"Score:\", l[1][1][1])\nprint(\"MSE:\", l[1][1][2])","2d9f5aba":"# **Best Model**","2c2adbfc":"# **2nd Best Model**"}}