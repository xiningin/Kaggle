{"cell_type":{"83b202dc":"code","75e2c562":"code","40643929":"code","72e13acd":"code","8c4f037f":"code","ac6b8e52":"code","30b8e5b9":"code","9bcf697f":"code","058dfd1a":"code","b382dfb3":"code","8a857183":"code","cca80cc8":"code","93c80e07":"code","fdfd4963":"code","06740b18":"code","aacb6192":"code","68e1ffca":"code","42449818":"code","cf45f793":"code","450fabb0":"code","d4630e4c":"code","5f3b67d7":"code","0195ec0e":"code","6f091d5b":"code","69ef3441":"code","4a7ddb80":"code","fbc1b772":"code","7a7ae83d":"code","8bcf8260":"code","e4b1da6c":"code","0ffea996":"code","07a887a4":"code","b40b7797":"code","a10a0ffc":"code","9180d534":"code","d8fb2723":"code","0dd84e5f":"code","336cf46c":"code","5922af6d":"code","8cc8ce1f":"code","97cb8733":"code","e556ab4a":"code","8e4f6cdc":"code","a5ab63ab":"code","aed0ab47":"code","46bc37c3":"code","7ab022ab":"markdown","d6007a6a":"markdown","47b80b43":"markdown","4dfb0487":"markdown","921174d4":"markdown","dfad3756":"markdown","cf514d9e":"markdown","cf2a0099":"markdown","4719016e":"markdown","36077dee":"markdown","53066625":"markdown","cb592061":"markdown","a8c5322b":"markdown","619b1884":"markdown","1a3cb2ea":"markdown","c3fb905e":"markdown","75914bc6":"markdown"},"source":{"83b202dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75e2c562":"#To visualize the data\nimport seaborn as sns\n#To work with dataframes\nimport pandas as pd\n#To perform numerical operations\nimport numpy as np\n#To partition the data\nfrom sklearn.model_selection import train_test_split\n#importing the library for logistic regression\nfrom sklearn.linear_model import LogisticRegression\n#importing performance metrics\nfrom sklearn.metrics import accuracy_score,confusion_matrix","40643929":"df=pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\ndf.head()","72e13acd":"df.columns","8c4f037f":"df.info()","ac6b8e52":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nX=df[['Engine Size(L)']]\nY=df[[\"CO2 Emissions(g\/km)\"]]\n","30b8e5b9":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,shuffle=True,random_state=25)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","9bcf697f":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nregr = LinearRegression()\nregr.fit(X_train, Y_train)\nregr.predict(X_test)","058dfd1a":"plt.scatter(X, Y, color = 'blue') \nplt.plot(X, regr.predict(X), color = 'red') \nplt.title('Linear Regression') \nplt.xlabel('Engine size') \nplt.ylabel('CO2 emission') \nplt.show()","b382dfb3":"import warnings\nwarnings.filterwarnings('ignore')","8a857183":"from sklearn.linear_model import LogisticRegression\nlogistic=LogisticRegression(random_state = 0)\n#fitting the values for x and y\nlogr=logistic.fit(X_train,Y_train)\n#To display the fitting function attributes such as coef,intercept etc..\n#print(logistic.coef_)\n#print(logistic.intercept_)\n#prediction from the test data\nprediction=logistic.predict(X_test)\n#print(\"Logistic Regression 20 classified values:\")\nprint(prediction)","cca80cc8":"plt.scatter(X, Y, color = 'blue') \nplt.plot(X, logr.predict(X), color = 'red') \nplt.title('Logistic Regression') \nplt.xlabel('Engine size') \nplt.ylabel('CO2 emission') \nplt.show()","93c80e07":"#extracting true_positives, false_positives, true_negatives, false_negatives\ntn = confusion_matrix(Y_test, prediction).ravel()\nfp= confusion_matrix(Y_test, prediction).ravel()\nfn=confusion_matrix(Y_test, prediction).ravel()\ntp=confusion_matrix(Y_test, prediction).ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","fdfd4963":"#model evaluation using classification metrics\n#confusion metrics - To display correctly classified data \n#and wrongly classified data\nconfus_matrix=confusion_matrix(Y_test,prediction)\nnp.set_printoptions(precision=2)\nprint(\"Confusion matrix\")\nprint(confus_matrix)\n","06740b18":"#Calculate the accuracy\naccu_score=accuracy_score(Y_test,prediction)\nprint(\"Accuracy\")\nprint(accu_score)","aacb6192":"from sklearn.metrics import  classification_report\nprint(classification_report(Y_test,prediction))","68e1ffca":"df.rename(columns={'CO2 Emissions(g\/km)' : 'CO2_emission'}, inplace=True)\ndf.rename(columns={'Engine Size(L)' : 'Enginesize'}, inplace=True)\ndf.rename(columns={'Fuel Consumption City (L\/100 km)' : 'fuelconsumptioncity'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Hwy (L\/100 km)' : 'fuelconsumptionhwy'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Comb (L\/100 km)' : 'fuelconsumptioncomb'}, inplace=True)\ndf.rename(columns={'Fuel Consumption Comb (mpg)' : 'fuelconsumptioncombmpg'}, inplace=True)\n","42449818":"from sklearn.linear_model import LogisticRegression\nlogistic=LogisticRegression(multi_class='ovr',solver='liblinear',random_state = 0)\n#fitting the values for x and y\nlogr=logistic.fit(X_train,Y_train)\n#To display the fitting function attributes such as coef,intercept etc..\n#print(logistic.coef_)\n#print(logistic.intercept_)\n#prediction from the test data\nprediction=logistic.predict(X_test)\n#print(\"Logistic Regression 20 classified values:\")\nprint(prediction)","cf45f793":"plt.scatter(X, Y, color = 'blue') \nplt.plot(X, logr.predict(X), color = 'red') \nplt.title('Logistic Regression') \nplt.xlabel('Engine size') \nplt.ylabel('CO2 emission') \nplt.show()","450fabb0":"#extracting true_positives, false_positives, true_negatives, false_negatives\ntn = confusion_matrix(Y_test, prediction).ravel()\nfp= confusion_matrix(Y_test, prediction).ravel()\nfn=confusion_matrix(Y_test, prediction).ravel()\ntp=confusion_matrix(Y_test, prediction).ravel()\nprint(\"True Negatives: \",tn)\nprint(\"False Positives: \",fp)\nprint(\"False Negatives: \",fn)\nprint(\"True Positives: \",tp)","d4630e4c":"#model evaluation using classification metrics\n#confusion metrics - To display correctly classified data \n#and wrongly classified data\nconfus_matrix=confusion_matrix(Y_test,prediction)\nnp.set_printoptions(precision=2)\nprint(\"Confusion matrix\")\nprint(confus_matrix)\n","5f3b67d7":"#Calculate the accuracy\naccu_score=accuracy_score(Y_test,prediction)\nprint(\"Accuracy\")\nprint(accu_score)","0195ec0e":"from sklearn.metrics import  classification_report\nprint(classification_report(Y_test,prediction))","6f091d5b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.boxplot(x=df.CO2_emission)\nplt.title('CO2 Emissions boxplot', fontsize = 20)\nplt.show()","69ef3441":"df.corr().CO2_emission.sort_values()[::-1]","4a7ddb80":"df['CO2_emission'].sort_values()","fbc1b772":"import seaborn as sns\nsns.distplot(df['CO2_emission'])","7a7ae83d":"lower_limit = df['CO2_emission'].mean() - 3*df['CO2_emission'].std()\nprint(lower_limit)\nupper_limit = df['CO2_emission'].mean() + 3*df['CO2_emission'].std()\nprint(upper_limit)","8bcf8260":"#Detecting Outliers\nPrice_Outliers = df[(df['CO2_emission']>upper_limit) | (df['CO2_emission']<lower_limit)]\nprint(len(Price_Outliers))","e4b1da6c":"# Creating new Dataframe by removing Outliers\ndf_no_co2emission_Outliers = df[(df['CO2_emission']>lower_limit) & (df['CO2_emission']<upper_limit)]\ndf_no_co2emission_Outliers.shape","0ffea996":"df1=df.copy()","07a887a4":"df1['CO2_emission'].describe()","b40b7797":"# Before imputing Outliers\nimport seaborn as sns\nsns.distplot(df1['CO2_emission'])","a10a0ffc":"# Imputing 'Price' Outliers\n\ndf1.loc[df1.CO2_emission>upper_limit,'CO2_emission']=upper_limit\ndf1.loc[df1.CO2_emission<lower_limit,'CO2_emission']=lower_limit\ndf1['CO2_emission'].describe()\n#df1['Price'].unique()\n#df1 = df1[(df1['Price']>upper_limit) | (df1['Price']<lower_limit)]\n#print(len(df1))","9180d534":"# After imputing Outliers\nimport seaborn as sns\nsns.distplot(df1['CO2_emission'])","d8fb2723":"df1['CO2_emission'].describe()","0dd84e5f":"q1 = df['CO2_emission'].quantile(0.25)\nq3 = df['CO2_emission'].quantile(0.75)\nIQR = q3 - q1\nprint(q1,q3,IQR)\nlower_limit = q1 - 1.5 * IQR\nupper_limit = q3 + 1.5 * IQR\nprint(lower_limit)\nprint(upper_limit)","336cf46c":"CO2_Outliers = df[(df['CO2_emission']>upper_limit) | (df['CO2_emission']<lower_limit)]\nprint(len(CO2_Outliers))","5922af6d":"# Imputing 'CC' Outliers\n\ndf1.loc[df1.CO2_emission>upper_limit,'CO2_emission']=upper_limit\ndf1.loc[df1.CO2_emission<lower_limit,'CO2_emission']=lower_limit\ndf1['CO2_emission'].describe()\n#df1 = df1[(df1['CC']>upper_limit) | (df1['CC']<lower_limit)]\n#print(len(df1))","8cc8ce1f":"df1['CO2_emission'].describe()","97cb8733":"df1['zscore'] = ( df1['CO2_emission'] - df1['CO2_emission'].mean() ) \/ df1['CO2_emission'].std()\ndf1.head()   ","e556ab4a":"# Imputing 'CO2_emission' Outliers \n\nlower_limit = df['CO2_emission'].mean() - 3*df['CO2_emission'].std()\nupper_limit = df['CO2_emission'].mean() + 3*df['CO2_emission'].std()\ndf1.loc[df1.CO2_emission>upper_limit,'CO2_emission']=upper_limit\ndf1.loc[df1.CO2_emission<lower_limit,'CO2_emission']=lower_limit","8e4f6cdc":"df1.describe()","a5ab63ab":"df1.shape","aed0ab47":"#remove z-score column\ndf1.drop('zscore',axis=1,inplace=True)\ndf1.shape","46bc37c3":"df1.columns","7ab022ab":"Treating Outliers by Capping\/imputing data points beyond the limits with limit values","d6007a6a":"In the binary case, we can extract true positives, etc as follows:","47b80b43":"****Calculating Accuracy for multiclass classification","4dfb0487":"Calculate accuracy for binary classification","921174d4":"# Using Z-Score","dfad3756":"Removing \/ Treating Outliers of Toyotadf\nUsing number 3 standard deviation away from mean\n# removing outliers which are numbers 3 standard deviation away from the mean","cf514d9e":"Checking correlation values in sorted order","cf2a0099":"# NOTE: Updated dataframe is 'df1' ; all the outliers are treated successfully...","4719016e":"# Logistic Regreesion with binary classification","36077dee":"Outliers are treated successfully........","53066625":"Now 'CO2_emission' outliers are treated successfully...","cb592061":"* Ignore warnings if any","a8c5322b":"# Treating Outliers\n\n> Drop the outlier records - remove the records that skewing your analysis\n\n> Cap the Outliers data - if we observe that data at certain level behaves same way as those at lower level, we can cap that a level that keeps that intact\n\n> Assign a new value - If an outlier seems to be due to mistake, assign a new value.\n\n>  In this case you can impute with mean of the variable or predict the value using regression model and impute","619b1884":"# Detecting Outliers\n","1a3cb2ea":"# Using Inter Quartile Range(IQR) Score","c3fb905e":"# Categorical Data Conversion\nWhy?... What is the Problem with Categorical data??\n\nSome algorithms can work with categorical data directly.\n\nFor example, a decision tree can be learned directly from categorical data with no data transform required (this depends on the specific implementation).\n\nMany machine learning algorithms cannot operate on label data directly. They require all input variables and output variables to be numeric.\n\nThis means that categorical data must be converted to a numerical form. If the categorical variable is an output variable, you may also want to convert predictions by the model back into a categorical form in order to present them or use them in some application.\n\nOne-Hot Encoding\nLabel or Integer Encoding\nusing Scikit-Learn","75914bc6":"# Logistic Regression with multiclass classification"}}