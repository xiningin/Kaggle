{"cell_type":{"60b3bc7e":"code","10171e50":"code","7d7c01e3":"code","dea944e7":"code","b5af1620":"code","1f261315":"code","c38e034c":"code","0a656da4":"code","db540ba6":"code","d7b8e6fa":"code","c079f796":"code","02200d3d":"code","3f8b58df":"code","bdd476c1":"code","d38e4020":"code","de8e666a":"code","3dd79115":"code","51f9a191":"code","6908b28b":"markdown","a627f7ff":"markdown","3f7f3e80":"markdown","eaa87e4a":"markdown","6accb269":"markdown","9f1cdde3":"markdown","ff2cb844":"markdown"},"source":{"60b3bc7e":"import numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n","10171e50":"!ls ..\/input","7d7c01e3":"train = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv',\n                   index_col='Id')\ntest = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv',\n                  index_col='Id')","dea944e7":"train.head(1).T","b5af1620":"train['Cover_Type'].value_counts()","1f261315":"def write_to_submission_file(predicted_labels, out_file,\n                             target='Cover_Type', index_label=\"Id\", init_index=15121):\n    # turn predictions into data frame and save as csv file\n    predicted_df = pd.DataFrame(predicted_labels,\n                                index = np.arange(init_index, \n                                                  predicted_labels.shape[0] + init_index),\n                                columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)","c38e034c":"X_train, X_valid, y_train, y_valid = train_test_split(\n    train.drop('Cover_Type', axis=1), train['Cover_Type'],\n    test_size=0.3, random_state=101)","0a656da4":"logit = LogisticRegression(C=1, solver='lbfgs', max_iter=500,\n                           random_state=17, n_jobs=4,\n                          multi_class='multinomial')\nlogit_pipe = Pipeline([('scaler', StandardScaler()), \n                       ('logit', logit)])","db540ba6":"%%time\nlogit_pipe.fit(X_train, y_train)","d7b8e6fa":"logit_val_pred = logit_pipe.predict(X_valid)","c079f796":"accuracy_score(y_valid, logit_val_pred)","02200d3d":"first_forest = RandomForestClassifier(\n    n_estimators=100, random_state=17, n_jobs=4)","3f8b58df":"%%time\nfirst_forest.fit(X_train, y_train)","bdd476c1":"forest_val_pred = first_forest.predict(X_valid)","d38e4020":"accuracy_score(y_valid, forest_val_pred)","de8e666a":"train.columns","3dd79115":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfor col in train.columns:\n    train[col]=LabelEncoder().fit(train[col]).transform(train[col])\nmodel= DecisionTreeClassifier(criterion= 'entropy',max_depth = 1)\nAdaBoost= AdaBoostClassifier(base_estimator= first_forest, n_estimators= 400,learning_rate=1)\nboostmodel= AdaBoost.fit(X_train, y_train)\ny_predict= boostmodel.predict(X_valid)\naccuracy_score(y_valid, y_predict)\n","51f9a191":"write_to_submission_file(y_predict,'final answer.csv')","6908b28b":"* Elevation - Elevation in meters\n* Aspect - Aspect in degrees azimuth\n* Slope - Slope in degrees\n* Horizontal_Distance_To_Hydrology - Horz Dist to nearest surface water features\n* Vertical_Distance_To_Hydrology - Vert Dist to nearest surface water features\n* Horizontal_Distance_To_Roadways - Horz Dist to nearest roadway\n* Hillshade_9am (0 to 255 index) - Hillshade index at 9am, summer solstice\n* Hillshade_Noon (0 to 255 index) - Hillshade index at noon, summer solstice\n* Hillshade_3pm (0 to 255 index) - Hillshade index at 3pm, summer solstice\n* Horizontal_Distance_To_Fire_Points - Horz Dist to nearest wildfire ignition points\n* Wilderness_Area (4 binary columns, 0 = absence or 1 = presence) - Wilderness area designation\n* Soil_Type (40 binary columns, 0 = absence or 1 = presence) - Soil Type designation\n* Cover_Type (7 types, integers 1 to 7) - Forest Cover Type designation (target)","a627f7ff":"[Competition](https:\/\/www.kaggle.com\/c\/forest-cover-type-prediction). \nIn this competition you are asked to predict the forest cover type (the predominant kind of tree cover) from strictly cartographic variables (as opposed to remotely sensed data). The actual forest cover type for a given 30 x 30 meter cell was determined from US Forest Service (USFS) Region 2 Resource Information System data. Independent variables were then derived from data obtained from the US Geological Survey and USFS. The data is in raw form (not scaled) and contains binary columns of data for qualitative independent variables such as wilderness areas and soil type.\n\nfeatures (more info on [this](https:\/\/www.kaggle.com\/c\/forest-cover-type-prediction\/data) competition page):","3f7f3e80":"**Import libs and load data**","eaa87e4a":"## Kaggle Forest Cover Type Prediction\n### Logistic regression, Random Forest, and LightGBM","6accb269":"By simply executing AdaBoost on our RandomForest CLassifier we were increase our accuracy to 0.85, which is really good.","9f1cdde3":"**Perform train-test split**","ff2cb844":"**Test logistic regression**"}}