{"cell_type":{"181f6770":"code","b10560fb":"code","080165a2":"code","facaede2":"code","e3c12357":"code","e242017f":"code","5159c9b9":"code","eff20ee2":"code","17893e04":"code","45ff3ae6":"code","289cec87":"code","7eee2eb4":"code","2d345bfa":"code","cc062a08":"code","53964ab4":"code","a6c43a02":"code","e2cc81c8":"code","7854cded":"code","20981642":"code","e69f589e":"code","937b41f4":"code","20328013":"code","906edb47":"code","f2966d84":"code","f52a89de":"code","01a259ac":"code","936eefb9":"code","4219d4f6":"code","7f911c3d":"code","cdefdc34":"markdown","78c3d3b9":"markdown","cfc7e6b6":"markdown","3134f03c":"markdown","30058a44":"markdown","3340df8b":"markdown","76468d84":"markdown","58ddceec":"markdown","b041d9c1":"markdown","d4116a86":"markdown"},"source":{"181f6770":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b10560fb":"# importing warnings\nimport warnings\nwarnings.filterwarnings('ignore')","080165a2":"# libraries for visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns","facaede2":"real_df = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv')\nreal_df.head()","e3c12357":"real_df = real_df.drop(columns=['X1 transaction date'], axis=1)\nreal_df.head()","e242017f":"real_df.shape","5159c9b9":"real_df.isnull().sum()","eff20ee2":"real_df.info()","17893e04":"real_df.No.nunique()","45ff3ae6":"real_df.describe()","289cec87":"real_df.head()","7eee2eb4":"# checking outliers using boxplot\nplt.figure(figsize=[13,5])\nplt.subplot(1,3,1)\nplt.boxplot(data=real_df, x='X2 house age')\nplt.title('House Age')\n\nplt.subplot(1,3,2)\nplt.boxplot(data=real_df, x='X3 distance to the nearest MRT station')\nplt.title('MRT Distance')\n\nplt.subplot(1,3,3)\nplt.boxplot(data=real_df, x='X4 number of convenience stores')\nplt.title('NoOf Stores')\nplt.show()","2d345bfa":"# checking outliers using boxplot\nplt.figure(figsize=[10,5])\nplt.subplot(1,2,1)\nplt.boxplot(data=real_df, x='X5 latitude')\nplt.title('Latitude')\n\nplt.subplot(1,2,2)\nplt.boxplot(data=real_df, x='X6 longitude')\nplt.title('Longitude')\nplt.show()","cc062a08":"real_df.corr()","53964ab4":"# heatmap for correlation\nplt.figure(figsize=[10,6])\nsns.heatmap(real_df.corr(), annot=True)\nplt.show()","a6c43a02":"# pairplot\nsns.pairplot(real_df)\nplt.show()","e2cc81c8":"# splitting\nfrom sklearn.model_selection import train_test_split\n\nX = real_df.drop(columns=['No', 'Y house price of unit area'])\ny = real_df[['Y house price of unit area']]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)","7854cded":"# col = X_train.columns\n# col","20981642":"# # Using Normalization(MinMaxScaler) Scaler\n# from sklearn.preprocessing import StandardScaler\n\n# scaler = StandardScaler()\n# X_train[col] = scaler.fit_transform(X_train[col])","e69f589e":"X_train.describe()","937b41f4":"# linearRegression\nfrom sklearn.linear_model import LinearRegression\n\nlrm = LinearRegression()\nlrm.fit(X_train, y_train)","20328013":"lrm.coef_","906edb47":"y_train_pred = lrm.predict(X_train)\ny_train_pred","f2966d84":"# predict test set prices\ny_test_pred = lrm.predict(X_test)","f52a89de":"# residuals distribution\nsns.distplot(y_test-y_test_pred)\nplt.show()","01a259ac":"y_train_pred2 = y_train_pred.reshape(-1, )","936eefb9":"# residuals scatter\nsns.scatterplot(x=y_train['Y house price of unit area'], y=y_train_pred2)","4219d4f6":"# r-Squared score\nfrom sklearn.metrics import r2_score\n\nr2 = r2_score(y_test, y_test_pred)\nr2","7f911c3d":"coefs = list(lrm.coef_)[0]\ncoefs = list(coefs)\ncoefs","cdefdc34":"## 1. Read and understand data","78c3d3b9":"## 4. Model Building","cfc7e6b6":"## 6. Evaluation","3134f03c":"# Built a Linear Regression with r2_score of 67% ","30058a44":"### 3.1 Features Scaling","3340df8b":"# Real Estates Price Prediction","76468d84":"## 2. Visualize and treat data","58ddceec":"## 3. Train Test Split","b041d9c1":"## 5. Prediction","d4116a86":"- We can see that the residuls are normalized at '0'.\n- <b>So can proceed with the model<\/b>"}}