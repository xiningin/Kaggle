{"cell_type":{"bda2f613":"code","5af815bc":"code","00e499b4":"code","490fd2e1":"code","b8fb792f":"code","ee73707e":"code","8e1b5fb1":"code","88ce4b35":"code","9b746772":"code","48be3afe":"code","86bd6fd3":"code","7d6fe770":"code","7af4145a":"code","27390302":"code","b22c4619":"code","6115acde":"code","1c289974":"code","90dc4b0e":"code","511fc620":"code","ae1b2326":"code","4c02735b":"code","b93b58ab":"code","e197ca3e":"code","f3233be0":"code","baa0f40d":"code","2b811f23":"code","7b18b23c":"code","dee30017":"code","47c29724":"code","85d17564":"code","4e5261d5":"code","1fe56a2a":"code","9dbdda3e":"code","c19d6e12":"code","4040f755":"code","9ef063e5":"code","267ce1ee":"markdown","5adc65ac":"markdown","96290542":"markdown","b2e75761":"markdown","35a8948f":"markdown","5dbaf9c5":"markdown","7023b786":"markdown"},"source":{"bda2f613":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5af815bc":"train = pd.read_csv('\/kaggle\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv')\ntest = pd.read_csv('\/kaggle\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv')","00e499b4":"total = train.append(test,ignore_index=True)\ntotal.head()\n\ntrain.head()","490fd2e1":"test.head()","b8fb792f":"total.drop(columns=['umpire3','toss_winner','toss_decision','result','dl_applied','win_by_runs','win_by_wickets','id','date'],inplace=True)","ee73707e":"total.describe(include='object')","8e1b5fb1":"total.info()","88ce4b35":"total['umpire1'].fillna('HDPK Dharmasena',inplace=True)\ntotal['umpire2'].fillna('S Ravi',inplace=True)\ntotal['city'].fillna('Dubai',inplace=True)","9b746772":"total['player_of_match']=total['player_of_match'].fillna('None')\ntotal","48be3afe":"total['winner'].fillna('No Result',inplace=True)","86bd6fd3":"total.replace({ 'Rising Pune Supergiant':'Rising Pune Supergiants',\n                'Delhi Daredevils':'Delhi Capitals',\n                'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                'Feroz Shah Kotla Ground':'Feroz Shah Kotla'},inplace=True)","7d6fe770":"total.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Chennai Super Kings',\n                 'Rajasthan Royals','Gujarat Lions','Kings XI Punjab','Pune Warriors',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Delhi Capitals','Dubai (DSC)','Deccan Chargers']\n                ,['MI','KKR','RCB','CSK','RR','GL','KXIP','PW','SRH','RPS','KTK','DC','Dubai','DEC'],inplace=True)","7af4145a":"total","27390302":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(total.winner)\ntotal['team1']=le.transform(total.team1)\ntotal['team2']=le.transform(total.team2)","b22c4619":"total['winner']=le.transform(total.winner)","6115acde":"total","1c289974":"le2 = LabelEncoder()\ntotal['city']=le2.fit_transform(total['city'])\ntotal['player_of_match'] = le2.fit_transform(total['player_of_match'])\ntotal['umpire1'] = le2.fit_transform(total['umpire1'])\ntotal['umpire2'] = le2.fit_transform(total['umpire2'])\ntotal['venue'] = le2.fit_transform(total['venue'])","90dc4b0e":"train = total[:-60]\ntrain_x = train.drop(columns ='winner')\ntrain_y =train['winner']","511fc620":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12,10))\nsns.heatmap(train.corr(),annot=True)\nplt.show()","ae1b2326":"train_y = train_y.astype('int32')","4c02735b":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(train_x,train_y)","b93b58ab":"new_x = pd.DataFrame(rfc.feature_importances_,index=train_x.columns,columns=['Importance'])\nnew_x.sort_values(by='Importance',ascending=False,inplace=True)\nnew_x","e197ca3e":"train_x.drop(columns=['city','season','umpire1','umpire2'],inplace=True)\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(train_x,train_y,test_size=0.3,random_state=1)","f3233be0":"from sklearn.svm import SVC\nsvc = SVC(C=100,kernel='rbf')\nsvc.fit(X_train,y_train)\nsvc.score(X_test,y_test)","baa0f40d":"rfc2 = RandomForestClassifier(max_depth=4)\nrfc.fit(X_train,y_train)\nrfc.score(X_test,y_test)","2b811f23":"from xgboost import XGBClassifier\nxgb_model = XGBClassifier()\nxgb_model.fit(X_train,y_train)\nxgb_model.score(X_test,y_test)","7b18b23c":"params={\n \"learning_rate\"    : [ 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 5, 6, 7],\n \"min_child_weight\" : [ 1,2,3],\n \"gamma\"            : [ 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 ],\n}","dee30017":"\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\ngrid_search=GridSearchCV(xgb_model,param_grid=params,n_jobs= -1,verbose=3)\ngrid_search.fit(train_x,train_y)","47c29724":"grid_search.best_params_","85d17564":"xbg = XGBClassifier(n_estimators = 100,colsample_bytree=0.3,learning_rate=0.2,gamma=0.4,max_depth=7)\nxbg.fit(train_x,train_y)","4e5261d5":"test2 = total[-60:]\ntest2.drop(columns= ['winner','city','season','umpire1','umpire2'],inplace=True)","1fe56a2a":"preds = xbg.predict(test2)","9dbdda3e":"new_preds = le.inverse_transform(preds)","c19d6e12":"winner=[]\nfor i in range(60):\n    if list(test2.team1)[i] == preds[i]:\n        winner.append(1)\n    else:\n        winner.append(2)","4040f755":"sub = {'id':test['id'],'winner':winner}\nsubmission = pd.DataFrame(sub)\nsubmission.to_csv('final.csv',index=False)","9ef063e5":"winner","267ce1ee":"### Pre-processing Data","5adc65ac":"### Removing Irrelevant Features","96290542":"### Comparing Models","b2e75761":"### Hyper-parameter Optimization","35a8948f":"### Combining Training and Testing Data","5dbaf9c5":"### Testing for Test Data","7023b786":"### Feature Selection"}}