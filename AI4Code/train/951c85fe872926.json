{"cell_type":{"06be98df":"code","3e70183b":"code","fdeae491":"code","bb6f2e27":"code","c7b35ee5":"code","35a8daec":"code","0259f2b2":"code","6d70c9cc":"code","e6d5fb0b":"code","0a9b64f8":"code","9e13499f":"code","c5dc0d98":"code","630f5a3c":"code","bdbbc26e":"code","8c2b5141":"code","52afbb9b":"code","2cb361d8":"code","b20f9b3e":"code","24fc7b6d":"code","cd3bce1b":"code","bd4f3ef4":"code","5d03a48f":"code","50b0d3c9":"code","6c57a545":"code","08407979":"code","dd9ddd39":"code","3d9124b0":"code","3b3d60ee":"code","6d0749bb":"code","7ff14ebc":"code","1d044fc4":"code","99738663":"code","fe901075":"code","0a29d9e3":"code","5147b4c8":"code","9d6f587e":"code","4b8dd553":"markdown","2e247f2c":"markdown","1de39450":"markdown","9cc41c97":"markdown","6023e597":"markdown","8005d4a1":"markdown","ca1503e6":"markdown","ce2bd71e":"markdown"},"source":{"06be98df":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\n\nfrom sklearn.linear_model import LinearRegression, SGDRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import LinearSVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","3e70183b":"data = pd.read_csv('..\/input\/house-prices-in-poland\/Houses.csv', encoding='latin-1')","fdeae491":"data","bb6f2e27":"data.info()","c7b35ee5":"data.describe()","35a8daec":"data['sq'].max()","0259f2b2":"data.drop(columns=['Unnamed: 0', 'id'], inplace=True)\n\nout_sq = data.loc[data['sq'] > 10000].index\ndata.drop(out_sq, axis=0, inplace=True)","6d70c9cc":"df = data.copy()","e6d5fb0b":"# Price per square meter\ndf['price_per_sqm'] = df['price'] \/ df['sq']","0a9b64f8":"# Square meters per room\ndf['sqm_per_room'] = df['sq'] \/ df['rooms']","9e13499f":"df.head()","c5dc0d98":"# Price\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['price'], data=df, kde=True, ax=ax[0])\nsns.boxplot(x=df['price'], data=df, ax=ax[1])\nfig.show()","630f5a3c":"# Square meters\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['sq'], data=df, kde=True, ax=ax[0])\nsns.boxplot(x=df['sq'], data=df, ax=ax[1])\nfig.show()","bdbbc26e":"# Price per square meter\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['price_per_sqm'], data=df, kde=True, ax=ax[0])\nsns.boxplot(x=df['price_per_sqm'], data=df, ax=ax[1])\nfig.show()","8c2b5141":"# Rooms\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['rooms'], data=df, bins=10, ax=ax[0])\nsns.boxplot(x=df['rooms'], data=df, ax=ax[1])\nfig.show()","52afbb9b":"# Square meters per room\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['sqm_per_room'], data=df, kde=True, ax=ax[0])\nsns.boxplot(x=df['sqm_per_room'], data=df, ax=ax[1])\nfig.show()","2cb361d8":"# Year\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['year'], data=df, kde=True, ax=ax[0])\nsns.boxplot(x=df['year'], data=df, ax=ax[1])\nfig.show()","b20f9b3e":"# Floor\nfig, ax = plt.subplots(1,2, figsize=(16,4))\nsns.histplot(x=df['floor'], data=df, bins=10, ax=ax[0])\nsns.boxplot(x=df['floor'], data=df, ax=ax[1])\nfig.show()","24fc7b6d":"# City\nsns.histplot(x=df['city'], data=df)\nplt.title(\"City histogram\")\nplt.show()","cd3bce1b":"out_sq = df.loc[df['sq'] > 8000].index.tolist()\ndf.drop(out_sq, axis=0, inplace=True)\n\n# In case of the year some higher values doesn't make sense and I'll limit the house age to around 300 years (we only have two older houses)\nout_years = df.loc[(df['year'] > 2030) | (df['year'] < 1700)].index.tolist()\ndf.drop(out_years, axis=0, inplace=True)\n\nout_price_per_sqm = df.loc[df['price_per_sqm'] > 90000].index.tolist()\ndf.drop(out_price_per_sqm, axis=0, inplace=True)","bd4f3ef4":"cols_to_cap = ['sq', 'year', 'price_per_sqm', 'sqm_per_room']\n\nfor col in cols_to_cap:\n    q1 = df[col].quantile(0.25)\n    q3 = df[col].quantile(0.75)\n    iqr = q3 - q1\n\n    upper_bound = q3 + (1.5*iqr)\n    lower_bound = q1 - (1.5*iqr)\n\n    df[col] = np.where(df[col] > upper_bound, upper_bound,\n                      np.where(df[col] < lower_bound, lower_bound, df[col]))","5d03a48f":"# Plot the results\nfig, ax = plt.subplots(4,2, figsize=(10,10))\nsns.histplot(x=df['sq'], data=df, kde=True, ax=ax[0,0])\nsns.boxplot(x=df['sq'], data=df, ax=ax[0,1])\nsns.histplot(x=df['price_per_sqm'], data=df, kde=True, ax=ax[1,0])\nsns.boxplot(x=df['price_per_sqm'], data=df, ax=ax[1,1])\nsns.histplot(x=df['sqm_per_room'], data=df, kde=True, ax=ax[2,0])\nsns.boxplot(x=df['sqm_per_room'], data=df, ax=ax[2,1])\nsns.histplot(x=df['year'], data=df, kde=True, ax=ax[3,0])\nsns.boxplot(x=df['year'], data=df, ax=ax[3,1])\nfig.tight_layout()\nfig.show()","50b0d3c9":"def city_name(row):\n    if row == 'Pozna\u00f1':\n        return 'Poznan'\n    elif row == 'Krak\u00f3w':\n        return 'Krakow'\n    else:\n        return 'Warszawa'\n\ndf['city'] = df['city'].apply(lambda x: city_name(x))","6c57a545":"plt.figure(figsize=(12,6))\nplt.title(\"House area in square meters vs price\")\nsns.scatterplot(x='sq', y='price', data=df, hue='city', hue_order = ['Warszawa', 'Krakow', 'Poznan'])\nplt.show()","08407979":"plt.figure(figsize=(10,8))\ncorr = df.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nsns.heatmap(corr, annot=True, cmap='coolwarm', mask=mask)\nplt.show()","dd9ddd39":"df2 = df.copy()","3d9124b0":"dummies = pd.get_dummies(df2['city'])\ndf2 = pd.concat([df2, dummies], axis=1)\ndf2.drop(['address', 'city', 'price_per_sqm', 'sqm_per_room'], axis=1, inplace=True)\ndf2.head()","3b3d60ee":"X = df2.drop('price', axis=1)\ny = df2['price']","6d0749bb":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, random_state=5)","7ff14ebc":"models = {\n    \"Linear Regression\": LinearRegression(),\n    \"SGD Regressor\": SGDRegressor(random_state=42),\n    \"K-Nearest Neighbors\": KNeighborsRegressor(),\n    \"Support Vector Machine\": LinearSVR(random_state=42),\n    \"Decision Tree\": DecisionTreeRegressor(random_state=42),\n    \"Random Forest\": RandomForestRegressor(random_state=42),\n    \"XGB Regressor\": XGBRegressor(random_state=42)\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    print(f\"Fitted {name}\")","1d044fc4":"for name, model in models.items():\n    print(f\"{name} R^2 score: {model.score(X_test, y_test):.4f}\")","99738663":"def get_score_xgb(n_estimators):\n    xgb = XGBRegressor(n_estimators=n_estimators,\n                       learning_rate=0.04, \n                       n_jobs=4, \n                       random_state=42)\n    \n    xgb.fit(X_train, y_train)\n    \n    return xgb.score(X_test, y_test)","fe901075":"results_xgb = {}\nestimators = [1000, 1300, 1500, 1700, 1900]\n\nfor i in estimators:\n    results_xgb[i] = get_score_xgb(i)\n    print(f\"Fitted XGB with {i} estimators\")","0a29d9e3":"plt.plot(list(results_xgb.keys()), list(results_xgb.values()))\nplt.title(\"XGB Regressor n_estimators vs score\")\nplt.show()","5147b4c8":"model = XGBRegressor(n_estimators=1700, learning_rate=0.04, n_jobs=4, random_state=42)\n\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nprint(f\"Final Model MAE: {mean_absolute_error(y_test, y_pred):.4f}\")\nprint(f\"Final Model R^2: {model.score(X_test, y_test):.4f}\")","9d6f587e":"plt.figure(figsize=(16,8))\nplt.ticklabel_format(style='plain')\nsns.regplot(x=y_test, y=y_pred, line_kws={\"color\": \"red\"})\nplt.title(\"Actual vs Predicted Price\")\nplt.xlabel(\"Actual\")\nplt.ylabel(\"Predicted\")\nplt.xlim(0, 8000000)\nplt.ylim(0, 8000000)\nplt.grid(True)\nplt.subplot()\nplt.show()","4b8dd553":"#### EDA","2e247f2c":"#### Handle outliers","1de39450":"#### Create new columns","9cc41c97":"Cap outliers","6023e597":"#### Random Forest performs best, but let's work on XGBRegressor","8005d4a1":"#### Fitting various models","ca1503e6":"Remove extreme outliers","ce2bd71e":"#### Preprocessing"}}