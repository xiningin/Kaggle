{"cell_type":{"58e786d2":"code","37f82296":"code","7c01affe":"code","3197e859":"code","3b1c4609":"code","2522be68":"code","588e81d1":"code","15c6ff0a":"code","c5aabd6d":"code","97b41484":"code","d0dbce74":"markdown","727fa4c6":"markdown"},"source":{"58e786d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","37f82296":"from tqdm import tqdm\n\nfasttext_path = \"..\/input\/fasttext-english-word-vectors-including-subwords\/wiki-news-300d-1M-subword.vec\"\n\ndef load_vecs(word, *arr):\n    return (word, np.asarray(arr, dtype='float32'))\n\nvec_dic = dict(load_vecs(*line.rstrip().rsplit(' ')) for line in tqdm(open(fasttext_path)))","7c01affe":"labels = pd.read_csv(\"..\/input\/imet-2019-fgvc6\/labels.csv\")\nlabels.sample(5, random_state=42)","3197e859":"labels[\"type\"] = labels[\"attribute_name\"].map(lambda x: x.split(\"::\")[0])\nlabels[\"name\"] = labels[\"attribute_name\"].map(lambda x: x.split(\"::\")[1])\nlabels.sample(5, random_state=42)","3b1c4609":"tag_names = labels[labels[\"type\"] == \"tag\"][\"name\"].values\nculture_names = labels[labels[\"type\"] == \"culture\"][\"name\"].values","2522be68":"def get_vec(w):\n    try:\n        return vec_dic[w]\n    except KeyError:\n        return np.zeros(300)\n    \ntag_vecs = []\nfor n in tag_names:\n    vecs = [get_vec(w) for w in n.split()]\n    vec = sum(vecs)\/len(vecs)\n    tag_vecs.append(vec)\ntag_vecs = np.array(tag_vecs)\n\nculture_vecs = []\nfor n in culture_names:\n    vecs = [get_vec(w) for w in n.split()]\n    vec = sum(vecs)\/len(vecs)\n    culture_vecs.append(vec)\nculture_vecs = np.array(culture_vecs)","588e81d1":"from sklearn.manifold import TSNE\n\ntag_model = TSNE(n_components=2, random_state=42)\nnp.set_printoptions(suppress=True)\ntag_model.fit_transform(tag_vecs)\n\nculture_model = TSNE(n_components=2, random_state=42)\nnp.set_printoptions(suppress=True)\nculture_model.fit_transform(culture_vecs)","15c6ff0a":"import matplotlib.pyplot as plt ","c5aabd6d":"plt.figure(figsize=(40,40))\nplt.scatter(tag_model.embedding_[:, 0], tag_model.embedding_[:,1])\n\ncount = 0\nfor label, x, y in zip(tag_names, tag_model.embedding_[:, 0], tag_model.embedding_[:, 1]):\n    count +=1\n    plt.annotate(label, xy=(x, y), xytext=(0, 0), textcoords='offset points')\nplt.show()","97b41484":"plt.figure(figsize=(40,40))\nplt.scatter(culture_model.embedding_[:, 0], culture_model.embedding_[:,1])\n\ncount = 0\nfor label, x, y in zip(culture_names, culture_model.embedding_[:, 0], culture_model.embedding_[:, 1]):\n    count +=1\n    plt.annotate(label, xy=(x, y), xytext=(0, 0), textcoords='offset points')\nplt.show()","d0dbce74":"# culture","727fa4c6":"# tag"}}