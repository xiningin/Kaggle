{"cell_type":{"f4bf022f":"code","f3858ac2":"code","6580eab3":"code","3a4020de":"code","479c84c6":"code","8df92ed6":"code","6d56df06":"code","59492f48":"code","03693686":"code","cf7eb0fb":"code","6287e9da":"code","13388c8d":"code","7a89fc83":"code","dae0c5f6":"code","d16290e5":"code","2b6f103f":"code","5d40bc82":"code","8edb6bd1":"code","43784178":"code","c2a98164":"code","a39e7d2f":"code","98f79819":"code","9788ae00":"code","6bd4ad4c":"code","5ac9dd79":"code","5c2c849b":"code","8b0acd2c":"code","8fc20589":"code","cbf9957d":"code","7dfb7839":"code","bcc836f3":"code","db9ae77c":"code","789408c0":"markdown","efb12270":"markdown","7f6c5b1c":"markdown","fac60bb5":"markdown"},"source":{"f4bf022f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current sessio","f3858ac2":"nyc_data = pd.read_csv('\/kaggle\/input\/d\/arthbr11\/new-york-city-airbnb-open-data\/listings.csv')\nfeatures = ['name', 'host_id', 'host_name', 'neighbourhood_group_cleansed', 'neighbourhood_cleansed', 'latitude', 'longitude', 'room_type', 'price', 'minimum_nights', 'maximum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']\nnyc_data_filtered = nyc_data[features]\nnyc_data['price'] = pd.to_numeric(nyc_data['price'].replace({'\\$':'',',':''}, regex = True))","6580eab3":"nyc_data_filtered['price'] = pd.to_numeric(nyc_data_filtered['price'].replace({'\\$':'',',':''}, regex = True))\nnyc_data_filtered.info()","3a4020de":"# Visualize data info\nnyc_data.info()","479c84c6":"# Drop the data that are not of interest and\/or causing privacy issues\nnyc_data.drop(['id','host_name','last_review'], axis=1, inplace=True)\n\n# Visualize the first 5 rows\nnyc_data.head()","8df92ed6":"# Determine the number of missing values for every column\nnyc_data.isnull().sum()","6d56df06":"#replacing all NaN values in 'reviews_per_month' with 0\n# See https:\/\/www.kaggle.com\/dgomonov\/data-exploration-on-nyc-airbnb\nnyc_data.fillna({'reviews_per_month':0}, inplace=True)","59492f48":"# Exclude property with listed price of 0\nnyc_data = nyc_data.loc[(nyc_data['price']).replace({'\\$':''}, regex = True).replace({',':''}, regex = True).astype(float) > 0]\n# data_copy = data.copy()","03693686":"#examine the dataset\nnyc_data.describe()","cf7eb0fb":"# Recode data as categorical\n# https:\/\/datascience.stackexchange.com\/questions\/29093\/continuous-variable-to-categorical-by-quartiles\ndata_encoded = nyc_data.copy()\ndata_encoded['minimum_nights'] = pd.qcut(nyc_data['minimum_nights'], q=2, labels=[\"minimum_nights_low\", \"minimum_nights_high\"])\ndata_encoded['number_of_reviews'] = pd.qcut(nyc_data['number_of_reviews'], q=3, labels=[\"number_of_reviews_low\", \"minimum_nights_medium\", \"number_of_reviews_high\"])\ndata_encoded['reviews_per_month'] = pd.qcut(nyc_data['reviews_per_month'], q=2, labels=[\"reviews_per_month_low\", \"reviews_per_month_high\"])\ndata_encoded['calculated_host_listings_count'] = pd.cut(nyc_data['calculated_host_listings_count'], \n                                                bins=[0, 2, 327],\n                                                labels=[\"calculated_host_listings_count_low\", \"calculated_host_listings_count_high\"])\ndata_encoded['availability_365'] = pd.qcut(nyc_data['availability_365'], q=2, labels=[\"availability_low\", \"availability_high\"])","6287e9da":"data_encoded.isnull().sum()","13388c8d":"data_encoded.head()","7a89fc83":"sns.set_palette(\"muted\")\nfrom pylab import *\nf, ax = plt.subplots(figsize=(24, 18))\n\nsubplot(2,3,1)\nsns.distplot((nyc_data['price']).replace({'\\$':''}, regex = True).replace({',':''}, regex = True).astype(float))\nplt.xlim(0, 2000)\n\nsubplot(2,3,2)\nsns.distplot(nyc_data['minimum_nights'])\nplt.xlim(0, 500)\n\nsubplot(2,3,3)\nsns.distplot(nyc_data['number_of_reviews'])\nplt.xlim(0, 400)\n\nsubplot(2,3,4)\nsns.distplot(nyc_data['reviews_per_month'])\nplt.xlim(0, 30)\n\nsubplot(2,3,5)\nsns.distplot(nyc_data['calculated_host_listings_count'])\nplt.xlim(0, 150)\n\nsubplot(2,3,6)\nsns.distplot(nyc_data['availability_365'])\nplt.xlim(0, 500)\n\nplt.tight_layout() # avoid overlap of plotsplt.draw()","dae0c5f6":"from pylab import *\nf, ax = plt.subplots(figsize=(24, 18))\n\nsubplot(2,3,1)\nsns.boxplot(y = (nyc_data['price']).replace({'\\$':''}, regex = True).replace({',':''}, regex = True).astype(float)) \n\nsubplot(2,3,2)\nsns.boxplot(y = nyc_data['minimum_nights'])\n\nsubplot(2,3,3)\nsns.boxplot(y = nyc_data['number_of_reviews'])\n\nsubplot(2,3,4)\nsns.boxplot(y = nyc_data['reviews_per_month'])\n\nsubplot(2,3,5)\nsns.boxplot(y = nyc_data['calculated_host_listings_count'])\n\nsubplot(2,3,6)\nsns.boxplot(y = nyc_data['availability_365'])\n\nplt.tight_layout() # avoid overlap of plots\nplt.draw()","d16290e5":"# Set up color blind friendly color palette\n# The palette with grey:\ncbPalette = [\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n# The palette with black:\ncbbPalette = [\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"]\n\n# sns.palplot(sns.color_palette(cbPalette))\n# sns.palplot(sns.color_palette(cbbPalette))\n\nsns.set_palette(cbPalette)\n#sns.set_palette(cbbPalette)","2b6f103f":"title = 'Properties per Neighbourhood Group'\nfigure(figsize=(20, 10), dpi=80)\nsns.countplot(nyc_data['neighbourhood_group_cleansed'])\n\nplt.title(title)\nplt.ioff()","5d40bc82":"title = 'Properties per Room Type'\nfigure(figsize=(20, 10), dpi=80)\nsns.countplot(nyc_data['room_type'])\nplt.title(title)\nplt.ioff()","8edb6bd1":"plt.figure(figsize=(20,10))\ntitle = 'Correlation matrix of numerical variables'\nsns.heatmap(nyc_data_filtered.corr(), square=True, cmap='RdYlGn')\nplt.title(title)\nplt.ioff()","43784178":"# See https:\/\/www.kaggle.com\/biphili\/hospitality-in-era-of-airbnb\ntitle = 'Neighbourhood Group Location'\nplt.figure(figsize=(15,9))\nsns.scatterplot(nyc_data.longitude,nyc_data.latitude,hue=nyc_data.neighbourhood_group_cleansed).set_title(title)\nplt.ioff()\n\ntitle = 'Room type location per Neighbourhood Group'\nplt.figure(figsize=(15,9))\nsns.scatterplot(nyc_data.longitude,nyc_data.latitude,hue=nyc_data.room_type).set_title(title)\nplt.ioff()","c2a98164":"title = 'Room type location per Neighbourhood Group'\nsns.catplot(x='room_type', kind=\"count\", hue=\"neighbourhood_group_cleansed\", data=nyc_data);\nplt.title(title)\nplt.ioff()","a39e7d2f":"#https:\/\/jakevdp.github.io\/PythonDataScienceHandbook\/04.14-visualization-with-seaborn.html\n#http:\/\/seaborn.pydata.org\/tutorial\/color_palettes.html\n\nx= 'neighbourhood_group_cleansed'\ny= 'price'\ntitle = 'Price per Neighbourhood Group'\n\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=nyc_data_filtered)\nplt.title(title)\nplt.ioff()","98f79819":"title = 'Median Price per Neighbourhood Group'\nresult = nyc_data_filtered.groupby([\"neighbourhood_group_cleansed\"])['price'].aggregate(np.median).reset_index().sort_values('price')\nsns.barplot(x='neighbourhood_group_cleansed', y=\"price\", data=nyc_data_filtered, order=result['neighbourhood_group_cleansed'])\nplt.title(title)\nplt.ioff()","9788ae00":"# https:\/\/stackoverflow.com\/questions\/54132989\/is-there-a-way-to-change-the-color-and-shape-indicating-the-mean-in-a-seaborn-bo\nx='neighbourhood_group_cleansed'\ny='price'\n\ntitle = 'Price per neighbourhood_group for Properties under $175'\ndata_filtered = nyc_data_filtered.loc[nyc_data_filtered['price'] < 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=True, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()\nf\ntitle = 'Price per neighbourhood_group for Properties more than $175'\ndata_filtered = nyc_data_filtered.loc[nyc_data_filtered['price'] > 175]\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(x=x, y=y, data=data_filtered, notch=False, showmeans=True,\n           meanprops={\"marker\":\"s\",\"markerfacecolor\":\"white\", \"markeredgecolor\":\"black\"})\nplt.title(title)\nplt.ioff()","6bd4ad4c":"# Load the Dataset  \n#data.drop(['latitude', 'name',], axis=1, inplace=True)\nnyc_data.drop(['name'], axis=1, inplace=True)\ndata_copy = nyc_data.copy()","5ac9dd79":"# log10 transform\n# https:\/\/stackoverflow.com\/questions\/30794525\/adding-one-to-all-the-values-in-a-dataframe\n# data_copy = data.copy()\nnyc_data.minimum_nights += 0.000000001\nnyc_data['minimum_nights'] = np.log10(nyc_data['minimum_nights'])\nnyc_data.number_of_reviews += 0.000000001\nnyc_data['number_of_reviews'] = np.log10(nyc_data['number_of_reviews'])\nnyc_data.reviews_per_month += 0.000000001\nnyc_data['reviews_per_month'] = np.log10(nyc_data['reviews_per_month'])\nnyc_data.calculated_host_listings_count += 0.000000001\nnyc_data['calculated_host_listings_count'] = np.log10(nyc_data['calculated_host_listings_count'])\nnyc_data.availability_365 += 0.000000001\nnyc_data['availability_365'] = np.log10(nyc_data['availability_365'])","5c2c849b":"# Encoding categorical data\nnyc_data = pd.get_dummies(nyc_data, columns=['room_type'], drop_first=True)\nnyc_data = pd.get_dummies(nyc_data, columns=['neighbourhood_cleansed'], drop_first=True)\nnyc_data = pd.get_dummies(nyc_data, columns=['neighbourhood_group_cleansed'], drop_first=True)","8b0acd2c":"# Filter the dataset for prices between 50 and $175\ndata_filtered_low = nyc_data.loc[(nyc_data['price'] < 175)]","8fc20589":"# Filter the dataset for prices superior to $175\ndata_filtered_high = nyc_data.loc[(nyc_data['price'] > 175)]","cbf9957d":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)","7dfb7839":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)","bcc836f3":"df = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","db9ae77c":"# Split the dataset\nX = data_filtered_low.drop('price', axis=1).values\ny = data_filtered_low['price'].values\ny = np.log10(y)\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)\n\n# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# Predicting the Test set results\ny_pred = lr.predict(X_test)\n\n# Compare predicted and actual values\n# https:\/\/towardsdatascience.com\/a-beginners-guide-to-linear-regression-in-python-with-scikit-learn-83a8f7ae2b4f\n# https:\/\/stackoverflow.com\/questions\/19100540\/rounding-entries-in-a-pandas-dafaframe\ndf = pd.DataFrame({'Actual': np.round(10 ** y_test, 0), \n                   'Predicted': np.round(10 ** y_pred, 0)})\ndf.head(10)","789408c0":"<font size=\"6\">**4.2.1 Modeling on lower price dataset**<\/font>","efb12270":"<font size=\"12\">**4. Modeling first model**<\/font>","7f6c5b1c":"<font size=\"12\">**4.2 Multiple Linear Regression**<\/font>","fac60bb5":"<font size=\"6\">**4.1 Data Preprocessing**<\/font>\n"}}