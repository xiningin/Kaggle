{"cell_type":{"5bdc21fc":"code","eb548cd4":"code","271d7559":"code","dd9f8389":"code","dbfbddb3":"code","7254f5ec":"code","fe22b004":"code","0e860a01":"code","fff5dae4":"code","11ec7dae":"code","047f6960":"code","54f2ca22":"code","270e2cf8":"code","2faa1ad7":"code","596d5791":"code","50d60073":"code","e9cc6a5b":"code","b5dfda8c":"code","8aee6800":"code","c2163b58":"code","85a244f9":"code","7a2b6f39":"code","ff64b65f":"code","6dbcb9ac":"code","79254b6c":"code","870b550a":"code","7c17e48f":"code","1f65ca63":"code","e0eb65d2":"code","4d59aa55":"code","1b050e7b":"code","885fbc0b":"code","e7d7f041":"code","e920d985":"code","1523ece8":"markdown","53fce7c0":"markdown","677a6d01":"markdown","7cca07b7":"markdown","5bfe581c":"markdown","56d51852":"markdown","68c0ac64":"markdown","4183504c":"markdown"},"source":{"5bdc21fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","eb548cd4":"df=pd.read_csv('..\/input\/glass-multiclass\/glass_multiclass.csv')\ndf.head()","271d7559":"df['Type'].value_counts()","dd9f8389":"df.shape","dbfbddb3":"df.info()","7254f5ec":"for i in df.select_dtypes(['int64','float64']):\n    sns.boxplot(df[i])\n    plt.show()","fe22b004":"df.skew()","0e860a01":"df.columns","fff5dae4":"l=['RI', 'Na', 'Mg', 'Al', 'Si', 'K', 'Ca', 'Ba', 'Fe']","11ec7dae":"import scipy.stats as st","047f6960":"for i in l:\n    df[i]=st.boxcox(df[i]+1)[0]\ndf.skew()","54f2ca22":"for i in df.select_dtypes(['int64','float64']):\n    sns.boxplot(y=df[i])\n    plt.show()","270e2cf8":"X=df.drop(['Type'],axis=1)\ny=df['Type']","2faa1ad7":"X.shape,y.shape","596d5791":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","50d60073":"from sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC","e9cc6a5b":"lr=LogisticRegression()\nknn=KNeighborsClassifier()\nrf=RandomForestClassifier()\nsvc=SVC()","b5dfda8c":"models=[]\nmodels.append(('MVLC',lr))\nmodels.append(('KNNC',knn))\nmodels.append(('RFC',rf))\nmodels.append(('SVC',svc))","8aee6800":"from sklearn.metrics import classification_report\n\nresults=[]\nnames=[]\ny_pred=[]\nfor name,model in models:\n    model.fit(X_train,y_train)\n    y_pred= model.predict(X_test)\n    print(classification_report(y_test,y_pred))\n    kfold=KFold(shuffle=True,n_splits=3,random_state=0)\n    cv_results=cross_val_score(model,X_train,y_train,cv=kfold,scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print(\"%s: %f (%f)\"%(name,np.mean(cv_results)*100,np.var(cv_results,ddof=1)))","c2163b58":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE('auto')","85a244f9":"X_sm, y_sm = smote.fit_sample(X_train,y_train)\nprint(X_sm.shape, y_sm.shape)","7a2b6f39":"pd.Series(y_sm).value_counts()","ff64b65f":"sns.countplot(x='Type',data=df)","6dbcb9ac":"from sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\nclassifier.fit(X_sm, y_sm)","79254b6c":"y_pred= classifier.predict(X_test)","870b550a":"from sklearn import  metrics  \nprint(metrics.accuracy_score(y_test, y_pred))\nprint(metrics.f1_score(y_test, y_pred, average='weighted'))","7c17e48f":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(random_state = 42)","1f65ca63":"modelF = forest.fit(X_sm, y_sm)\ny_predF = modelF.predict(X_test)","e0eb65d2":"print(metrics.accuracy_score(y_test, y_predF))\nprint(metrics.f1_score(y_test, y_predF, average='weighted'))","4d59aa55":"from sklearn.model_selection import GridSearchCV","1b050e7b":"n_estimators = [100, 300, 500]\nmax_depth = [2, 5, 8, 15]\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 5] \n\nhyperF = dict(n_estimators = n_estimators, max_depth = max_depth,  \n              min_samples_split = min_samples_split, \n             min_samples_leaf = min_samples_leaf)\n\ngridF = GridSearchCV(forest, hyperF, cv = 3, verbose = 1, \n                      n_jobs = -1)\nbestF = gridF.fit(X_sm, y_sm)","885fbc0b":"print (gridF.best_params_)","e7d7f041":"best_predF = bestF.predict(X_test)","e920d985":"print(metrics.accuracy_score(y_test, best_predF))\nprint(metrics.f1_score(y_test, best_predF, average='weighted'))","1523ece8":"### Problem Statement:","53fce7c0":"### Balancing the target variable:","677a6d01":"### X,y split:","7cca07b7":"### Importing necessary libraries:","5bfe581c":"for i in df.select_dtypes(['int64','float64']):\n    sns.distplot(df[i])\n    plt.show()","56d51852":"### Checking outliers in numerical features:","68c0ac64":"Predict the type of glass based on 9 input features using a classification model.","4183504c":"### Checking skewness of numerical features:"}}