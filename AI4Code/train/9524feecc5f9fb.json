{"cell_type":{"fd4b37a9":"code","ac9cae1f":"code","ed342fe6":"code","c7488196":"code","3aaba39a":"code","cf616744":"code","b6a2691f":"code","839b4aaf":"code","8b2c54ae":"code","cc02982f":"code","c0e2c4b9":"code","89c7ad26":"code","744c4d23":"code","56e44b03":"code","a1a3d6e1":"code","45947c45":"code","7ff878b9":"code","04beefc3":"code","f40c7f0b":"code","e44b69f2":"code","5453f9cd":"markdown","d1d32cef":"markdown","f1e2cb27":"markdown","e2c196d9":"markdown","d61be134":"markdown","b410707b":"markdown"},"source":{"fd4b37a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac9cae1f":"!pip install pycaret","ed342fe6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport category_encoders as ce\nfrom sklearn.preprocessing import LabelEncoder\n\n\nfrom pycaret.classification import *","c7488196":"train_path = \"..\/input\/banking-dataset-classification\/new_train.csv\"\ntest_path = \"..\/input\/banking-dataset-classification\/new_test.csv\"\ndata = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\ndata.info()","3aaba39a":"# Renaming the columns\ndata = data.rename(columns={\"default\": \"default_credit\",\n                            \"housing\":\"housing_loan\",\n                            \"loan\":\"personal_loan\", \n                            \"poutcome\": \"prev_attempt\"})\ncolumns = data.columns\ntest_data = test_data.rename(columns={\"default\": \"default_credit\",\n                            \"housing\":\"housing_loan\",\n                            \"loan\":\"personal_loan\", \n                            \"poutcome\": \"prev_attempt\"})\n# Adding the missing columns in the test dataset\ntest_data['pdays']=0\ntest_data['previous'] = 0\ntest_data['y']=0\ntest_data = test_data[columns]\ntest_data = test_data.drop(['y'], axis=1)\n\n# Splitting the dataset as per the categorical and numerical features For EDA\ncat_data = data.select_dtypes(include=['object'])\nnum_data = data.select_dtypes(include=['int64'])\nnum_data[\"pdays\"].replace({999: 0}, inplace=True)","cf616744":"def univariate_cat_plots(df):\n    for feature in df.columns:\n        plt.figure(figsize=(12,6))\n        sns.set_theme(context='notebook',style='darkgrid',palette='deep',color_codes=True)\n        sns.countplot(x=feature,data=df,palette=\"dark\",orient='v')\n        plt.xlabel(feature)\n        plt.title(\"Univariate analysis of categorical feature\")\n        plt.show()\n\ndef multivariate_cat_plots(df):\n    for feature in df.columns:\n        plt.figure(figsize=(12,6))\n        sns.set_theme(context='notebook',style='whitegrid',palette='deep',color_codes=True)\n        sns.countplot(x=feature,data=df,palette=\"dark\",hue = 'y',orient='v')\n        plt.xlabel(feature)\n        plt.title(\"Biivariate analysis of categorical feature\")\n        plt.show()\n\ndef num_plots(df):\n    for feature in df.columns:\n        plt.figure(figsize=(12,6))\n        sns.kdeplot(data=df, x =feature)\n        plt.xlabel(feature)\n        plt.title(\"Univariate Analysis of Numerical Features\")\n        plt.show()\n\n        ","b6a2691f":"univariate_cat_plots(cat_data)        ","839b4aaf":"multivariate_cat_plots(cat_data)","8b2c54ae":"num_plots(num_data)","cc02982f":"le = LabelEncoder()\ncat_data= cat_data[cat_data.columns].apply(lambda col: le.fit_transform(col))\n\n# Merging both dataframes\nbank_data = pd.concat([cat_data,num_data],axis =1)\nbank_data = bank_data[columns]\nbank_data.head()\n","c0e2c4b9":"def grid_plots(bank_data):    \n    for feature in ['housing_loan','personal_loan','default_credit','marital']:\n        sns.color_palette('tab10')\n        grid = sns.FacetGrid(bank_data, col=feature, row='y')\n        grid.map_dataframe(sns.histplot,x='age',binwidth=2, binrange=(0, 60))\n        plt.show()\ngrid_plots(bank_data)\n\n\nsns.boxplot(data=bank_data,x='day_of_week', y='age',hue='y')\nplt.show()\nsns.boxplot(data=bank_data,x='month', y='age',hue='y')\nplt.show()\n","89c7ad26":"env = setup(data= bank_data, target='y',train_size=0.99,normalize=True, normalize_method='robust', session_id=40, silent= True)\n","744c4d23":"model = compare_models(fold =10)","56e44b03":"best_model = create_model(model)","a1a3d6e1":"tuned_model = tune_model(best_model)","45947c45":"plot_model(tuned_model)","7ff878b9":"plot_model(tuned_model,plot='error')","04beefc3":"plot_model(tuned_model,plot='feature')","f40c7f0b":"evaluate_model(tuned_model)","e44b69f2":"result_df = predict_model(tuned_model,test_data)\nresult_df.head()\n","5453f9cd":"## Data Import and Converting the data as a Pandas Dataframe\n* We have 11 Categorical Features and 5 Numerical Features","d1d32cef":"# Detailed Column Descriptions\n## Bank Client Data:\n* age (numeric)\n* job : type of job (categorical: \"admin.\",\"unknown\",\"unemployed\",\"management\",\"housemaid\",\"entrepreneur\",\"student\",\"blue-collar\",\"self-employed\",\"retired\",\"technician\",\"services\")\n* marital : marital status (categorical: \"married\",\"divorced\",\"single\"; note: \"divorced\" means divorced or widowed)\n* education (categorical: \"unknown\",\"secondary\",\"primary\",\"tertiary\")\n* default: has credit in default? (binary: \"yes\",\"no\")\n* balance: average yearly balance, in euros (numeric)\n* housing: has housing loan? (binary: \"yes\",\"no\")\n* loan: has personal loan? (binary: \"yes\",\"no\")\n## Related with the last contact of the current campaign:\n* contact: contact communication type (categorical: \"unknown\",\"telephone\",\"cellular\")\n* day: last contact day of the month (numeric)\n* month: last contact month of year (categorical: \"jan\", \"feb\", \"mar\", \u2026, \"nov\", \"dec\")\n* duration: last contact duration, in seconds (numeric)\n## Other Attributes:\n* campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)\n* pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric, -1 means client was not previously contacted)\n* previous: number of contacts performed before this campaign and for this client (numeric)\n* poutcome: outcome of the previous marketing campaign (categorical: \"unknown\",\"other\",\"failure\",\"success\")\n## Output Variable (desired target):\n* y - has the client subscribed a term deposit? (binary: \"yes\",\"no\")","f1e2cb27":"## Defining the functions to plot the categorical and numerical features independently","e2c196d9":"## Univariate Analyis of Categorical Features\n* Job -Job has 12 unique values. Most of the clients in the bank takes up Blue collar, admin or technical jobs.\n* Marital - This column has 4 unique values where most of the clients are 'married'. There are no 'unknown' value which represents every client is either married, divorced or single\n* Education - Almost 100% of the clients in the dataset are literates. More than 30% of the clients have a university degree and the rest has atleast basic 4 years of education \n* Default Credit - This column has 3 unique values. Most of the clients does not have any previous credit\n* Housing_loan - Almost 50% of the clients have housing loan and the clients who does not have housing loan are about the same ratio.\n* Personal Loan - Almost 80% of the clients does not have any previous personal loans.\n* These above three features (Default Credit, Housing Loan, Personal Loan) looks very important and could be more dependent on the 'y' feature i.e client will invest or not\n* Month - We have high values for the (nov, jul, may, jun, aug) months. Which represents the clients have been contacted in the later half of the year. \n* Prev_attempt - This feature represents whether the client was contacted before regarding the investment. It is very evident that most of the clients are not even contacted as the plot shows high values of 'nonexistent'","d61be134":"## Analysis of the Numerical Features\n* Age\n* Duration\n* Campaign\n* pdays\n* Previous\n\n* All the above features have the normal distribution as we can see from the plots above. ","b410707b":"# Creating the Model and training the Model - PyCaret"}}