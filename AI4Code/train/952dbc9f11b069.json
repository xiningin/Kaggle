{"cell_type":{"1f90015c":"code","a8acb2ef":"code","4ffd4529":"code","fc70a628":"code","1a376bc5":"code","5191d806":"code","700364d7":"code","8f01744e":"code","472f13b9":"code","7108a450":"code","025dfdf3":"markdown","5231b028":"markdown","09125329":"markdown","cea0cfba":"markdown","11b7ff90":"markdown","6ba85959":"markdown","0ad8e361":"markdown","6ae580c7":"markdown"},"source":{"1f90015c":"# offical google cloud library is recommended\nfrom google.cloud import bigquery\nimport pandas as pd","a8acb2ef":"# initiate bigquery client\nbq = bigquery.Client()","4ffd4529":"# let's start with first table in the dataset\nquery = \"\"\"\nSELECT\n    *\nFROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_20160801`\nLIMIT 10\n\"\"\"\n# NOTE: Don't use SELECT * in your queries.","fc70a628":"# make the query and get the result to a dataframe\nresult = bq.query(query).to_dataframe()","1a376bc5":"# let's see what this data contains\nresult","5191d806":"keyed_query = \"\"\"\nSELECT\n    device.browser as browser,\n    SUM ( totals.visits ) AS total_visits\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_20160801`\nGROUP BY\n    device.browser\nORDER BY\n    total_visits DESC\n\"\"\"\nkeyed_df = bq.query(keyed_query).to_dataframe()\nkeyed_df","700364d7":"unnested_query = \"\"\"\nSELECT\n    fullVisitorId,\n    visitId,\n    visitNumber,\n    hits.hitNumber AS hitNumber,\n    hits.page.pagePath AS pagePath\nFROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_20160801`, UNNEST(hits) as hits\nWHERE\n    hits.type=\"PAGE\"\nORDER BY\n    fullVisitorId,\n    visitId,\n    visitNumber,\n    hitNumber\n\"\"\"\nunnested_query_df = bq.query(unnested_query).to_dataframe()\nunnested_query_df","8f01744e":"parameterized_query = \"\"\"\nSELECT\n    device.browser as browser,\n    SUM ( totals.visits ) AS total_visits\nFROM `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE\n    _TABLE_SUFFIX BETWEEN '%s' AND '%s'\nGROUP BY\n    device.browser\nORDER BY\n    total_visits DESC\n\"\"\"\nstart_date = '20170101'\nend_date = '20171231'\nparameterized_query_df = bq.query((parameterized_query % (start_date, end_date))).to_dataframe()\nparameterized_query_df","472f13b9":"sub_query = \"\"\"\nSELECT\n    ( SUM(total_transactionrevenue_per_user) \/ SUM(total_visits_per_user) ) AS avg_revenue_by_user_per_visit\nFROM (\n    SELECT\n        fullVisitorId,\n        SUM( totals.visits ) AS total_visits_per_user,\n        SUM( totals.transactionRevenue ) AS total_transactionrevenue_per_user\n    FROM\n        `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n    WHERE\n        _TABLE_SUFFIX BETWEEN '20170701' AND '20170731' AND totals.visits > 0\n        AND totals.transactions >= 1 AND totals.transactionRevenue IS NOT NULL\n    GROUP BY\n        fullVisitorId)\n\"\"\"\nsub_query_df = bq.query(sub_query).to_dataframe()\nsub_query_df","7108a450":"# NOTE: We are not using any existing data source in this example query, we are generating our data source and then using the result as data source.\nudf_query = \"\"\"\nCREATE TEMPORARY FUNCTION multiplyInputs(x FLOAT64, y FLOAT64)\nRETURNS FLOAT64\nLANGUAGE js AS '''\n  return x*y;\n''';\n\nCREATE TEMPORARY FUNCTION divideByTwo(x FLOAT64)\nRETURNS FLOAT64\nLANGUAGE js AS '''\n  return x\/2;\n''';\n\nWITH numbers AS\n  (SELECT 1 AS x, 5 as y\n  UNION ALL\n  SELECT 2 AS x, 10 as y\n  UNION ALL\n  SELECT 3 as x, 15 as y)\n\nSELECT x,\n  y,\n  multiplyInputs(divideByTwo(x), divideByTwo(y)) as half_product\nFROM numbers;\n\"\"\"\nudf_df = bq.query(udf_query).to_dataframe()\nudf_df","025dfdf3":"We see that interesting part of data is in json format inside a single column. BigQuery provides ways to query on those specific keys as well.","5231b028":"> BigQuery is a very powerful data analytics plaform. What will you build with it?","09125329":"Learn more about BigQuery architecture:\n- https:\/\/cloud.google.com\/files\/BigQueryTechnicalWP.pdf\n\nBigQuery documentation and more samples:\n- https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/\n- https:\/\/medium.com\/@hoffa\/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd\n\nIf you are interested in BigQuery and it's capabilities, here are a few accounts you can follow to stay updated:\n- https:\/\/twitter.com\/felipehoffa\n- https:\/\/twitter.com\/ElliottBrossard\n- https:\/\/twitter.com\/thetinot\n- https:\/\/twitter.com\/jrdntgn\n- https:\/\/twitter.com\/polleyg\n- https:\/\/twitter.com\/GCPDataML\n\nFind me on twitter:\n- https:\/\/twitter.com\/Vikram_Tiwari","cea0cfba":"To perform more complex queries you can also UNNEST the data and then perform your opeations. Note that you can also use multiple locations in FROM statement.","11b7ff90":"# BigQuery: In depth using Google Analytics data\nGoogle Analytics team has shared the dataset for Google Merchandise Store. This data is same as of a typical ecommerce website. Let's see what BigQuery can do with this dataset.\n\nRead introductory part here: https:\/\/www.kaggle.com\/vikramtiwari\/bigquery-getting-started-with-bq-data-on-kaggle","6ba85959":"When analysis becomes complex, you can also use sub-queries.","0ad8e361":"And when even subqueries are not enough, you can create your own functions for more detailed manipulations. These functions are called User Definded Functions and can be implemented using JavaScript with BigQuery.","6ae580c7":"An easier way to query on multiple batch of tables is to use table ranges while querying. This works best on tables that are partitoned using some set format (generally date). Note that you can also pass parameters as you would to any string in Python."}}