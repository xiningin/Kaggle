{"cell_type":{"b6754d8b":"code","e5331b73":"code","4fb056f4":"code","9d6e7fe8":"code","2f4ee2e5":"code","9a725432":"code","cc7aebe8":"code","82482fe4":"code","fd0199aa":"code","edf802b8":"code","cc49994b":"code","56ef1441":"code","53772209":"markdown","fef84171":"markdown","2e8d8f1e":"markdown","a12f63c1":"markdown"},"source":{"b6754d8b":"import numpy as np\nimport pandas as pd\nimport os\nfrom scipy.stats import entropy\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (10,10)","e5331b73":"train_data_df = pd.read_csv(\"\/kaggle\/input\/hotel-id-2021-fgvc8\/train.csv\")\ntrain_data_df.head()","4fb056f4":"print(\"Number of images in the dataset:\",train_data_df.shape[0])","9d6e7fe8":"# Checking for duplicates\nduplicate_images = train_data_df[train_data_df.duplicated(subset=['image'])==True]['image'].values\nfor dup in duplicate_images:\n    print(train_data_df[train_data_df['image']==dup])","2f4ee2e5":"# Check if nan values present\nprint(\"Number of NaN values present:\",train_data_df.isna().sum())","9a725432":"# Chain value 0 represents individual hotels\nprint(\"Number of Unique Hotel Chains:\",train_data_df['chain'].nunique()-1)","cc7aebe8":"# Hotel Chains and how many hotel each hotel chain contain\nhotel_count = {}\nfor hotel_chain_id in train_data_df['chain'].unique():\n    key = hotel_chain_id\n    value = train_data_df[train_data_df['chain']==hotel_chain_id]['hotel_id'].nunique()\n    hotel_count[key] = value\n\n#hotel_count.pop(0)\nbar = plt.bar(x=hotel_count.keys(),height=hotel_count.values(),color=\"blueviolet\")\nplt.xlabel(\"Hotel Chain ID\")\nplt.ylabel(\"Count\")\nplt.title(\"Hotel Chains and their hotel counts\")","82482fe4":"# Number of hotels and how many images for each hotel\nhotels = train_data_df['hotel_id'].unique()\nhotels_image_count = []\nfor hotel in hotels:\n    cnt = train_data_df[train_data_df['hotel_id']==hotel]['image'].nunique()\n    hotels_image_count.append(cnt)\n\nhotel_image_df = pd.DataFrame({\"hotel_id\":map(str,hotels),\"image_count\":hotels_image_count})\nhotel_image_df.sort_values(by=\"image_count\",ascending=False,inplace=True)","fd0199aa":"plt.figure(figsize=[15,15])\ntop_50_hotel_image_df = hotel_image_df.iloc[:50,:]\nplt.bar(x=top_50_hotel_image_df[\"hotel_id\"],height=top_50_hotel_image_df[\"image_count\"],color=\"blueviolet\")\nplt.xlabel(\"Hotel ID\")\nplt.xticks(rotation=45)\nplt.ylabel(\"Image Count\")\nplt.title(\"Hotel and their image count (Top 50)\")","edf802b8":"plt.figure(figsize=[15,15])\nbottom_50_hotel_image_df = hotel_image_df.iloc[-50:,:]\nplt.bar(x=bottom_50_hotel_image_df[\"hotel_id\"],height=bottom_50_hotel_image_df[\"image_count\"],color=\"blueviolet\")\nplt.xlabel(\"Hotel ID\")\nplt.xticks(rotation=45)\nplt.ylabel(\"Image Count\")\nplt.title(\"Hotel and their image count (Bottom 50)\")","cc49994b":"def shannon_entropy(no_of_classes,sizes,dataset_size):\n    sh_en = 0\n    for i in range(no_of_classes):\n        sh_en += (sizes[i]\/dataset_size)*np.log(sizes[i]\/dataset_size)\n    return -sh_en\n\ndef quant_imbalance(no_of_classes,sizes,dataset_size):\n    sh_en = shannon_entropy(no_of_classes,sizes,dataset_size)\n    return sh_en\/no_of_classes","56ef1441":"# Imbalance quantification using Shannon Entropy\nprint(quant_imbalance(hotel_image_df.shape[0],hotel_image_df['image_count'].values.tolist(),hotel_image_df.shape[0]))","53772209":"Huge imbalance between top 50 and bottom 50. A quanitification will show a better picture","fef84171":"Lots of individual hotels in the data.","2e8d8f1e":"This number quantifies how badly the data is distributed. Proper measures will have to be taken while training to avoid overfitting to a few classes. ","a12f63c1":"Two duplicates found. Most probably by the same user. As chain, hotel_id and timestamp are identical. "}}