{"cell_type":{"2b680397":"code","3f578238":"code","dc7ca21f":"code","5ae66e71":"code","ed511156":"code","720e2ec7":"code","c9106a68":"code","b00151a0":"code","5236fe85":"code","c57eb719":"code","df894d39":"code","6a8ddae9":"code","52127428":"code","b4f4065e":"markdown"},"source":{"2b680397":"import os, cv2\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.python import keras\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Flatten, AvgPool2D\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.optimizers import SGD\nfrom keras.layers import BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, array_to_img, load_img\nfrom keras.utils import np_utils\nfrom keras.callbacks import ModelCheckpoint\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import shuffle\n\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","3f578238":"data_dir = '..\/input\/datasets\/Datasets\/'\n\nimages = []\ncar_types = []\nfor car_type in [\"car\",\"truck\"]:\n    car_dir = data_dir + car_type\n    car_files = [car_dir + '\/' + filename for filename in os.listdir(car_dir)]\n    #print(car_files)\n    for filename in car_files:\n        if filename.endswith('jpg'):\n            try:\n                images.append(cv2.resize(cv2.imread(filename), (224,224), interpolation=cv2.INTER_CUBIC))\n                car_types.append(car_type)\n            except Exception as e:\n                print(str(e))\n            \n            \nimages = np.array(images)\ncar_types = np.array(car_types)\n\nle = LabelEncoder()\ncar_types_encoded = le.fit_transform(car_types)\ncar_types_encoded_onehot = np_utils.to_categorical(car_types_encoded)","dc7ca21f":"_, ax = plt.subplots(3,3, figsize=(12,12))\nfor i in range(3):\n    for j in range(3):\n      ax[i,j].imshow(cv2.cvtColor(images[(i*300)+j], cv2.COLOR_BGR2RGB))\n      ax[i,j].axis('off')\n      ax[i,j].set_title(le.inverse_transform(car_types_encoded[(i*300)+j]), size = 20)","5ae66e71":"images, car_types, car_types_encoded = shuffle(images, car_types, car_types_encoded)\ncar_types_encoded.resize((images.shape[0],1))\nprint(car_types_encoded.shape)","ed511156":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3),input_shape=(224, 224, 3),strides = (1,1),  padding = 'same',kernel_initializer='he_normal', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(AvgPool2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3),strides = (1,1),  padding = 'same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3),strides = (1,1),  padding = 'same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3),strides = (1,1),  padding = 'same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu', kernel_initializer='normal'))\nmodel.add(Dense(units=2, activation='sigmoid', kernel_initializer='normal'))\n\nmodel.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nmodel.summary()","720e2ec7":"car_types_encoded = car_types_encoded.reshape((images.shape[0],1))\ncar_types_2class = np.zeros((images.shape[0],2))\nfor i in range(images.shape[0]):\n    if car_types_encoded[i][0] == 0:\n        car_types_2class[i][0] = 1\n    else:\n        car_types_2class[i][1] = 1\n#print(car_types_2class[1:100,:])\nx_train, x_val, y_train, y_val = train_test_split(images, car_types_2class, test_size=0.2, random_state=0)\nx_train = x_train \/ 255\nx_val = x_val \/ 255\n\n# set train Generator\ndatagen = ImageDataGenerator(rotation_range=30,width_shift_range=0.2,height_shift_range=0.2,horizontal_flip=True)\ndatagen.fit(x_train)\n","c9106a68":"# trainning process\nnb_epoch = 20\nbatch_size = 4\n\nfitted_model = model.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n                    steps_per_epoch = x_train.shape[0],\n                    epochs=nb_epoch,\n                    validation_data = (x_val, y_val),\n                    )\n","b00151a0":"plt.plot(fitted_model.history['acc'])\nplt.plot(fitted_model.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\n\nplt.show()","5236fe85":"plt.figure()\nplt.gcf().clear()\nplt.plot(fitted_model.history['loss'])\nplt.plot(fitted_model.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\n\nplt.show()","c57eb719":"from keras.applications.resnet50 import ResNet50 \n\ndef build_ResNet50(input_tensor_shape):\n    base_model = ResNet50(weights='imagenet', include_top=False, input_shape= input_tensor_shape)\n    \n    x_model = base_model.output\n    \n    x_model = AvgPool2D(name='globalaveragepooling2d')(x_model)\n    \n    x_model = Dense(1024, activation='relu',name='fc1_Dense')(x_model)\n    x_model = Dropout(0.5, name='dropout_1')(x_model)\n    x_model = Flatten()(x_model)\n    x_model = Dense(256, activation='relu',name='fc2_Dense')(x_model)\n    x_model = Dropout(0.5, name='dropout_2')(x_model)\n    \n    predictions = Dense(2, activation='sigmoid',name='output_layer')(x_model)\n    \n    model = Model(inputs=base_model.input, outputs=predictions)\n    \n    return model\n\n\n\ninput_tensor_shape = (224,224,3)\n\nmodel2 = build_ResNet50(input_tensor_shape)\n\nmodel2.summary()\nmodel2.compile(optimizer=SGD(lr=0.0001, momentum=0.9), loss='binary_crossentropy', metrics=['accuracy'])","df894d39":"\n# trainning process\nnb_epoch = 5\nbatch_size = 4\n#checkpointer = ModelCheckpoint('imagenet', verbose=1, monitor='val_acc',save_best_only=True, save_weights_only=True)\nfitted_model2 = model2.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n                    steps_per_epoch = x_train.shape[0],\n                    epochs=nb_epoch,\n                    validation_data = (x_val, y_val),\n                    )\n","6a8ddae9":"plt.plot(fitted_model2.history['acc'])\nplt.plot(fitted_model2.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\n\nplt.show()","52127428":"plt.figure()\nplt.gcf().clear()\nplt.plot(fitted_model2.history['loss'])\nplt.plot(fitted_model2.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\n\nplt.show()","b4f4065e":"There is 0 csv file in the current version of the dataset:\n"}}