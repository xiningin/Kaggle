{"cell_type":{"413b8b63":"code","f3435ffa":"code","6690c326":"code","24756525":"code","f49e42ab":"code","cb1aa4b6":"code","bf3e067e":"code","d1c21cb2":"code","af7230c3":"code","a7f210f1":"code","f7ac58be":"code","a4314670":"code","f1868065":"code","e1ebb9d3":"code","3c8ddfcb":"code","86ed22a8":"code","e4174a55":"code","eb061518":"code","d3cdd8f3":"code","9f1b2a40":"code","6c721f41":"code","aada980a":"code","19166035":"code","6a1fef1b":"code","595fd266":"code","6cb64786":"code","dfc1dcdc":"code","c8c48b87":"code","f59abfd2":"code","ba05bc9c":"code","8c4cd74f":"code","836fec46":"code","a7674b92":"code","26c34b4c":"code","0771c15f":"code","76935edd":"markdown","267d9dfe":"markdown","72bb1d69":"markdown","02974717":"markdown","29d3eb14":"markdown","2e6c50a8":"markdown","bdec8ac7":"markdown","34b60dd5":"markdown","c37a054e":"markdown","19865107":"markdown","4a568a6f":"markdown"},"source":{"413b8b63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f3435ffa":"opsd_daily = pd.read_csv(\"..\/input\/germany-electricity-power-for-20062017\/opsd_germany_daily.csv\", index_col=0, parse_dates=True)","6690c326":"opsd_daily.index","24756525":"opsd_daily.head(3)","f49e42ab":"opsd_daily.tail(3)","cb1aa4b6":"opsd_daily.dtypes","bf3e067e":"opsd_daily['Year'] = opsd_daily.index.year\nopsd_daily['Month'] = opsd_daily.index.month\nopsd_daily['Weekday Name'] = opsd_daily.index.weekday_name","d1c21cb2":"opsd_daily.sample(20,random_state=0)","af7230c3":"opsd_daily.loc['2017-08-10']","a7f210f1":"opsd_daily.loc['2014-01-20':'2014-01-22']","f7ac58be":"opsd_daily.loc['2012-02']","a4314670":"import matplotlib.pyplot as plt","f1868065":"import seaborn as sns\n# Use seaborn style defaults and set the default figure size\nsns.set(rc={'figure.figsize':(11, 4)})","e1ebb9d3":"opsd_daily['Consumption'].plot(linewidth=0.5);","3c8ddfcb":"cols_plot = ['Consumption', 'Solar', 'Wind']\naxes = opsd_daily[cols_plot].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 9), subplots=True)\nfor ax in axes:\n    ax.set_ylabel('Daily Totals (GWh)')","86ed22a8":"ax = opsd_daily.loc['2017', 'Consumption'].plot()\nax.set_ylabel('Daily Consumption (GWh)');","e4174a55":"ax = opsd_daily.loc['2017-01':'2017-02', 'Consumption'].plot(marker='o', linestyle='-')\nax.set_ylabel('Daily Consumption (GWh)');","eb061518":"ax = opsd_daily.loc['2012', 'Consumption'].plot()\nax.set_ylabel('Daily Consumption (GWh)');","d3cdd8f3":"import matplotlib.dates as mdates","9f1b2a40":"fig, ax = plt.subplots()\nax.plot(opsd_daily.loc['2017-01':'2017-02', 'Consumption'], marker='o', linestyle='-')\nax.set_ylabel('Daily Consumption (GWh)')\nax.set_title('Jan-Feb 2017 Electricity Consumption')\n# Set x-axis major ticks to weekly interval, on Mondays\nax.xaxis.set_major_locator(mdates.WeekdayLocator(byweekday=mdates.MONDAY))\n# Format x-tick labels as 3-letter month name and day number\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'));","6c721f41":"fig, axes = plt.subplots(3, 1, figsize=(11, 10), sharex=True)\nfor name, ax in zip(['Consumption', 'Solar', 'Wind'], axes):\n    sns.boxplot(data=opsd_daily, x='Month', y=name, ax=ax)\nax.set_ylabel('GWh')\nax.set_title(name)\n# Remove the automatic x-axis label from all but the bottom subplot\nif ax != axes[-1]:\n    ax.set_xlabel('')","aada980a":"sns.boxplot(data=opsd_daily, x='Weekday Name', y='Consumption');","19166035":"pd.date_range('1998-03-10', '1998-03-15', freq='D')","6a1fef1b":"pd.date_range('2004-09-20', periods=8, freq='H')","595fd266":"opsd_daily.index","6cb64786":"# To select an arbitrary sequence of date\/time values from a pandas time series,\n# we need to use a DatetimeIndex, rather than simply a list of date\/time strings\ntimes_sample = pd.to_datetime(['2013-02-03', '2013-02-06', '2013-02-08'])\n# Select the specified dates and just the Consumption column\nconsum_sample = opsd_daily.loc[times_sample, ['Consumption']].copy()\nconsum_sample","dfc1dcdc":"consum_sample.index","c8c48b87":"# Convert the data to daily frequency, without filling any missings\nconsum_freq = consum_sample.asfreq('D')\n# Create a column with missings forward filled\nconsum_freq['Consumption - Forward Fill'] = consum_sample.asfreq('D', method='ffill')\nconsum_freq","f59abfd2":"# Convert the data to daily frequency, without filling any missings\nconsum_freq = consum_sample.asfreq('D')\n# Create a column with missings forward filled\nconsum_freq['Consumption - Forward Fill'] = consum_sample.asfreq('D', method='bfill')\nconsum_freq","ba05bc9c":"Resampling","8c4cd74f":"# Specify the data columns we want to include (i.e. exclude Year, Month, Weekday Name)\ndata_columns = ['Consumption', 'Wind', 'Solar', 'Wind+Solar']\n# Resample to weekly frequency, aggregating with mean\nopsd_weekly_mean = opsd_daily[data_columns].resample('W').mean()\nopsd_weekly_mean.head(3)","836fec46":"print(opsd_daily.shape[0])\nprint(opsd_weekly_mean.shape[0])","a7674b92":"# Start and end of the date range to extract\nstart, end = '2017-01', '2017-06'\n# Plot daily and weekly resampled time series together\nfig, ax = plt.subplots()\nax.plot(opsd_daily.loc[start:end, 'Solar'],\nmarker='.', linestyle='-', linewidth=0.5, label='Daily')\nax.plot(opsd_weekly_mean.loc[start:end, 'Solar'],\nmarker='o', markersize=8, linestyle='-', label='Weekly Mean Resample')\nax.set_ylabel('Solar Production (GWh)')\nax.legend();","26c34b4c":"# Compute the monthly sums, setting the value to NaN for any month which has\n# fewer than 28 days of data\nopsd_monthly = opsd_daily[data_columns].resample('M').sum(min_count=28)\nopsd_monthly.head(3)","0771c15f":"fig, ax = plt.subplots()\nax.plot(opsd_monthly['Consumption'], color='black', label='Consumption')\nopsd_monthly[['Wind', 'Solar']].plot.area(ax=ax, linewidth=0)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.legend()\nax.set_ylabel('Monthly Total (GWh)');","76935edd":"reference https:\/\/www.dataquest.io\/blog\/tutorial-time-series-analysis-with-pandas\/\nlearning TimeSeries and visualisation for :\n\nTime series data structures\nTime-based indexing\nVisualizing time series data\nSeasonality\nFrequencies\nResampling\nRolling windows\nTrends","267d9dfe":"line plot method .plot() full time serie for the daily electricity consumption","72bb1d69":"Partial-string indexing","02974717":"with slice","29d3eb14":"Add columns with year, month, and weekday name\n","2e6c50a8":"Visualizing time series data","bdec8ac7":"Time-based indexing","34b60dd5":"seasonality","c37a054e":"Customizing time serie plot","19865107":"disply a random sample of 20 rows","4a568a6f":"frequencies"}}