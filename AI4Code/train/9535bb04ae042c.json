{"cell_type":{"ad5bfdc5":"code","ef43800b":"code","8e604b4a":"code","4c943731":"code","7f1a521b":"code","7ad9a22e":"code","6035891a":"code","b8a90c01":"code","e8c996f5":"code","84e6344c":"code","1befbcd3":"code","da98005d":"code","35b55d11":"code","8d34031b":"markdown","8c59106c":"markdown","56fd8138":"markdown","b0664988":"markdown","7cc9be93":"markdown","62654f30":"markdown","c8542752":"markdown","c5f381f7":"markdown","d52d9fda":"markdown","ff9d61e6":"markdown","97c4bd2f":"markdown","7a4b3e35":"markdown","1fd9d36b":"markdown","18f854be":"markdown","d858cdab":"markdown","d7384005":"markdown"},"source":{"ad5bfdc5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef43800b":"import pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nimport pickle\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import train_test_split","8e604b4a":"df=pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')","4c943731":"df","7f1a521b":"y=pd.DataFrame(df['HeartDisease'])\ny=y.values.ravel()\nX=df.drop(['HeartDisease'],axis=1)\n","7ad9a22e":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","6035891a":"trf1 = ColumnTransformer([\n    ('oe_cat_col1',OrdinalEncoder(categories=[['F','M'],['ATA','NAP','TA','ASY'],['Normal','LVH','ST'],['N','Y'],['Up','Down','Flat']]),['Sex','ChestPainType','RestingECG','ExerciseAngina','ST_Slope'])\n],remainder='passthrough')","b8a90c01":"trf2 = ColumnTransformer([\n    ('scale',StandardScaler(),[0,3,4,7,9])\n],remainder='passthrough')","e8c996f5":"trf3 = svm.SVC(probability=True)","84e6344c":"pipe = Pipeline([\n    ('trf1',trf1),\n    ('trf2',trf2),\n    ('trf3',trf3)\n])","1befbcd3":"pipe.fit(X_train,y_train)","da98005d":"preds=pipe.predict(X_test)","35b55d11":"pickle.dump(df,open('df.pkl','wb'))\npickle.dump(pipe,open('pipe.pkl','wb'))","8d34031b":"## ix) Creating Pickle Files for DataFrame and Pipeline","8c59106c":"## i) Calling Necessary Dependencies","56fd8138":"# **Step.2 Create a Streamlit Web App and Deploy it on Heroku**","b0664988":"## iv) Train-Test Split","7cc9be93":"# **Step.1: Make Machine Learning Model**","62654f30":"## Note: As the main purpose of this notebook is deployment, I performed EDA and experiemnts separately and found that:\n## 1)SVM, as compared to other classification algorithms works best for this problem.\n## 2)Removing outliers(if the particular feature is normally distributed we use z-score method to remove the outlier, if the feature is skewed either positively or negatively we use IQR formula to remove them) has no effect on the accuracy, infact it becomes 1% less accurate.","c8542752":"## vi) Scaling","c5f381f7":"## Create something new:\n## Now, that you've script needed for deployment you can use any kaggle dataset to deploy your project.","d52d9fda":"## ii) Creating DataFrame","ff9d61e6":"## Working Demo of this project: https:\/\/heart-health-predictors.herokuapp.com","97c4bd2f":"## viii)  Creating Pipeline","7a4b3e35":"##  iii) Separating Dependent and Independent Variables","1fd9d36b":"## Files for this project: https:\/\/github.com\/eforebrahim\/Heart_Health_Project\/tree\/master","18f854be":"## v) Ordinally Encoding the Categorical Features","d858cdab":"## Bring the pickle files for DataFrame and Pipeline in your virtual environment\n## The process of deployment has been explained in great detail by Gilbert Tanner: https:\/\/gilberttanner.com\/blog\/deploying-your-streamlit-dashboard-with-heroku","d7384005":"## vii) Modeling"}}