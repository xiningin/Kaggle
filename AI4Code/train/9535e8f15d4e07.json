{"cell_type":{"8fbde0c9":"code","0962fe6c":"code","bcf37137":"code","401a704f":"code","9af902f9":"code","b0976118":"code","42459c15":"code","6c74cfd6":"code","c2d46a5a":"code","a1ed1d3b":"code","70fd57a6":"code","19c95a61":"code","4bf27b58":"code","4f11805d":"code","3813f8ae":"code","4a1d4ea6":"code","cbaf66ed":"code","7d7b4768":"code","13e28c9a":"code","70981fee":"code","bc2dbb47":"code","28bcab52":"code","7c9a17ac":"code","8f5570f3":"code","7b177da3":"code","717acff2":"code","dfe42d40":"code","5419e38f":"code","16fe20ee":"code","5b2d5350":"code","8cff96de":"code","7c4c5ba0":"code","b8892d77":"code","bf222682":"code","e7577e23":"code","a84bf9dd":"code","b1be67b2":"code","73292b93":"code","33210582":"code","97064abd":"code","a5eaa45c":"code","869396b0":"markdown","14b76516":"markdown","ba98957d":"markdown","e64885ee":"markdown","f20f5995":"markdown","62c2b357":"markdown","155843a6":"markdown","90778ef6":"markdown","ec509851":"markdown","3ce626eb":"markdown","8c089d3f":"markdown","c310b3b5":"markdown","1a9aca3e":"markdown","951400cc":"markdown","8ab62bd3":"markdown","83a19014":"markdown","a7a25625":"markdown","680e9b50":"markdown","6491832a":"markdown","033e79fa":"markdown","858bae0c":"markdown","4f05192f":"markdown"},"source":{"8fbde0c9":"import numpy as np\nimport pandas as pd\n        \ncreditcard_path = '\/kaggle\/input\/creditcardfraud\/creditcard.csv'\n\ndf = pd.read_csv(creditcard_path)\ndf.head()","0962fe6c":"df.info()","bcf37137":"df.describe()","401a704f":"df['Time'].hist()","9af902f9":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom datetime import datetime, timedelta\n\n\nnow = datetime.now()\n\n\ndf['Date'] = pd.to_datetime(now) + pd.to_timedelta(df['Time'], unit='s')\ndf_shot_fraud_time = df[['Date', 'Class']]\ndf_shot_fraud_time = df[['Date', 'Class']]\ndf_shot_fraud_time.set_index('Date')\ndf_shot_fraud_time[(df_shot_fraud_time['Class'] == 1)].groupby(pd.Grouper(key=\"Date\", freq=\"30min\")).count().plot()","b0976118":"df_shot_fraud_time[(df_shot_fraud_time['Class'] == 1)].groupby(pd.Grouper(key=\"Date\", freq=\"30min\")).count().describe()","42459c15":"# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u0438 \u0434\u0430\u0442\u0443 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\ntry:\n    del df['Time']\n    del df['Date']\nexcept:\n    pass","6c74cfd6":"df.head()","c2d46a5a":"df.dropna()\ndf.shape","a1ed1d3b":"plt.subplots(figsize=(10,10))\nsns.heatmap(df[['Amount', 'Class']].corr(), fmt=\".2f\", annot=True, square=True)\nplt.show()","70fd57a6":"df['Amount'].describe()","19c95a61":"pd.crosstab(df['Class'], df['Amount'])","4bf27b58":"class_1 = df[(df['Class'] == 1)]\nclass_1['Amount'].describe()","4f11805d":"plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(), fmt=\".2f\", annot=True, square=True)\nplt.show()","3813f8ae":"# df.drop_duplicates(inplace=True)","4a1d4ea6":"df.plot(subplots=True, figsize=(10, 30))","cbaf66ed":"# from sklearn.manifold import TSNE\n# from sklearn.preprocessing import StandardScaler\n\n\n\n# X_tdsne = df.drop(['Class'], axis=1)\n\n# scaler = StandardScaler()\n# X_tdsne_scaled = scaler.fit_transform(X_tdsne)\n\n\n# tsne = TSNE(random_state=17)\n# tsne_representation = tsne.fit_transform(X_tdsne_scaled)\n\n# plt.scatter(tsne_representation[:, 0], tsne_representation[:, 1]);\n\n\nimport matplotlib.image as img\n  \nim = img.imread('..\/input\/output-for-tdsne\/output_1.png')\nplt.imshow(im)\n","7d7b4768":"# plt.scatter(tsne_representation[:, 0], tsne_representation[:, 1], \n#             c=df['Class'].map({0: 'blue', 1: 'orange'}));\n\n\nimport matplotlib.image as img\n  \nim = img.imread('..\/input\/output-for-tdsne\/output_2.png')\nplt.imshow(im)","13e28c9a":"df[(df['Class'] == 1)].shape","70981fee":"# \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0446\u0435\u043b\u0435\u0432\u0443\u044e\nX = np.array(df[df._get_numeric_data().drop(columns=['Class']).columns])\ny = df['Class'].values","bc2dbb47":"y_notfraud = np.argwhere(y == 0).flatten()\ny_notfraud","28bcab52":"from sklearn.utils import shuffle\n\ny_notfraud = shuffle(y_notfraud, random_state = 42) # \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0435\u043c\n# \u0443\u0434\u0430\u043b\u0438\u043c \"\u043b\u0438\u0448\u043d\u0438\u0435\"\ny_notfraud = y_notfraud[:len(np.argwhere(y == 1).flatten())]\nprint(len(y_notfraud))","7c9a17ac":"X = X[np.append(y_notfraud, np.argwhere(y == 1).flatten())]\ny = y[np.append(y_notfraud, np.argwhere(y == 1).flatten())]","8f5570f3":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","7b177da3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\n# {'C': 0.1, 'l1_ratio': 0.7, 'penalty': 'elasticnet'}\n\n# 'l1_ratio': [0.4, 0.5, 0.6, 0.7, 0.8]\n# C: [1e-3, 1e-2, 1e-1, 1, 10, 100]\n\nlogreg = LogisticRegression(solver='saga', max_iter=10000)\nlogreg_grid = {'C': [1e-1], 'penalty': ['elasticnet'], 'l1_ratio': [0.7]} # 'l1_ratio': [0.4, 0.5, 0.6, 0.7, 0.8]\ngs_logreg = GridSearchCV(\n    logreg,\n    logreg_grid,\n    cv=5,\n    n_jobs=-1,\n    scoring=[\"precision\", \"recall\", \"f1\", \"roc_auc\"],\n    refit='roc_auc',\n)\ngs_logreg.fit(X_train, y_train)","717acff2":"gs_logreg.best_score_","dfe42d40":"gs_logreg.best_params_","5419e38f":"gs_logreg.score(X_test, y_test)","16fe20ee":"from sklearn import metrics\nfrom matplotlib import pyplot as plt\n\ny_logreg = gs_logreg.predict_proba(X_test)\ny_logreg_positive_prob = pd.DataFrame(y_logreg)[1].values\n\n\nplt.figure()\n\n\nfor index, res in enumerate([y_logreg_positive_prob]):\n    fpr, tpr, _ = metrics.roc_curve(y_test, res)\n    plt.plot(fpr, tpr, label=f'ROC curve {index} (area = %0.2f)' % metrics.auc(fpr, tpr))\n\nplt.grid(True)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC AUC')\nplt.legend(loc=\"lower right\")\nplt.show()\n\n","5b2d5350":"from imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX_smote, y_smote = oversample.fit_resample(X, y)\n\nX_smote.shape","8cff96de":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_smote, y_smote, test_size=0.2)","7c4c5ba0":"X_train.shape","b8892d77":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\n\nlogreg = LogisticRegression(solver='saga', max_iter=10000)\nlogreg_grid = {'C': [1e-3, 1e-2, 1e-1, 1, 10, 100], 'penalty': ['elasticnet'], 'l1_ratio': [0.4, 0.5, 0.6, 0.7, 0.8]}\ngs_logreg = GridSearchCV(\n    logreg,\n    logreg_grid,\n    cv=5,\n    n_jobs=-1,\n    scoring=[\"precision\", \"recall\", \"f1\", \"roc_auc\"],\n    refit='roc_auc',\n)\ngs_logreg.fit(X_train, y_train)","bf222682":"gs_logreg.best_score_","e7577e23":"gs_logreg.best_params_","a84bf9dd":"gs_logreg.score(X_test, y_test)","b1be67b2":"gs_logreg.score(X_test, y_test)","73292b93":"from sklearn import metrics\nfrom matplotlib import pyplot as plt\n\ny_logreg = gs_logreg.predict_proba(X_test)\ny_logreg_positive_prob = pd.DataFrame(y_logreg)[1].values\n\n\nplt.figure()\n\n\nfor index, res in enumerate([y_logreg_positive_prob]):\n    fpr, tpr, _ = metrics.roc_curve(y_test, res)\n    plt.plot(fpr, tpr, label=f'ROC curve {index} (area = %0.2f)' % metrics.auc(fpr, tpr))\n\nplt.grid(True)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC AUC')\nplt.legend(loc=\"lower right\")\nplt.show()\n","33210582":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\n\n\npipes = [\n    Pipeline([('scaler', StandardScaler()), ('svc', SVC())]),\n    Pipeline([('scaler', StandardScaler()), ('mlpc', MLPClassifier(max_iter=1000))]),\n    Pipeline([('scaler', StandardScaler()), ('logreg', LogisticRegression(max_iter=10000))])\n]\nparams = [\n    {'svc__C': [1e-3, 1e-2, 1e-1, 1, 10, 100]},\n    {},\n    {'logreg__C': [1e-3, 1e-2, 1e-1, 1, 10, 100]},\n]","97064abd":"# from dask.distributed import Client, progress\n# client = Client(processes=False, threads_per_worker=4,\n#                 n_workers=3, memory_limit='2GB')\n# client","a5eaa45c":"from sklearn.metrics import make_scorer\nfrom sklearn.model_selection import GridSearchCV\n# import joblib\n\n\nfor pipe, parameters in zip(pipes, params):\n    grid_search = GridSearchCV(pipe, parameters, cv=10, n_jobs=1, verbose=1, scoring=[\"roc_auc\"], refit='roc_auc')\n    result = grid_search.fit(X_train, y_train)\n    # with joblib.parallel_backend('dask'):\n    #     result = grid_search.fit(X_train, y_train)\n    print(result.score(X_test, y_test))\n","869396b0":"\u0435\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 V5, V6,V7 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430, \u043f\u043e\u043a\u0430 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c","14b76516":"**\u043f\u0440\u044f\u043c\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0441\u0443\u043c\u043c\u044b \u0441 \u0444\u0440\u043e\u0434\u043e\u043c \u043d\u0435\u0442**","ba98957d":"# \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","e64885ee":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u0430\u043a\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","f20f5995":"**\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0444\u0440\u043e\u0434\u0430 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0432\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0432 \u043e\u0434\u0438\u043d \u043c\u043e\u043c\u0435\u043d\u0442 \u0431\u044b\u043b \u043f\u0438\u043a \u0432 35 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439, \u0432 \u0446\u0435\u043b\u043e\u043c \u0444\u0440\u043e\u0434 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438**","62c2b357":"**\u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0438\u043c\u0435\u0435\u043c \u043e\u043a\u043e\u043b\u043e 5 \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 \u0432 \u043f\u043e\u043b\u0447\u0430\u0441\u0430**","155843a6":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (oversampling) SMOTE\n","90778ef6":"\u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u0435\u0436\u0434\u0443 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u044f\u043c\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0444\u0440\u043e\u0434\u0435, \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0443\u0442 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0430\u0441\u0442 \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439,\n\u043d\u043e \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0440\u043e\u0434\u043e\u0432\u044b\u0445 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439","ec509851":"\u043f\u043e\u0432\u0442\u043e\u0440\u0438\u043c \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","3ce626eb":"\u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0430\u0443\u0433\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0438\u043b\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0442\u0430\u043b\u0430 \u043c\u0435\u043d\u044c\u0448\u0435, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u043e \u0438\u0434\u0435\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u0442\u043e\u0447\u0438\u0432 \u043a \u043d\u043e\u0432\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c","8c089d3f":"**\u0432 \u0446\u0435\u043b\u043e\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0442\u0438 \u043b\u0438\u0431\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f, \u043b\u0438\u0431\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u0430\u0431\u044b**","c310b3b5":"# \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430","1a9aca3e":"\u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432 \u043f\u0440\u043e\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 2-D, \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u043b\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u043b \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 (output_1.png, output_2.png)\n\n","951400cc":"\u0421 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 {'C': 1e-05, 'l1_ratio': 0.8, 'penalty': 'elasticnet'}, \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 recall 1.0, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0438\u043b\u0438 \u043c\u043e\u0434\u0435\u043b\u044c","8ab62bd3":"# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","83a19014":"\u0432\u044b\u044f\u0432\u0438\u043b\u0438\u0441\u044c \u0442\u0440\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0435, \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0435 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0448\u0443\u043c\u043b\u044f\u0442\u044c \u0444\u0440\u043e\u0434\n\n\u043d\u0435\u0442 \u044f\u0440\u043a\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439","a7a25625":"\u043f\u0440\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 roc_auc \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0421 = 0.1, \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u044d\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 C = 0.001","680e9b50":"# \u0413\u0440\u0430\u0444\u0438\u043a\u0438 ROC AU\u0421","6491832a":"# t-distributed Stohastic Neighbor Embedding\n","033e79fa":"\u0432\u0441\u0435 \u0432\u044b\u0434\u0430\u044e\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043d\u0435\u043f\u043b\u043e\u0445\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435","858bae0c":"\u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b (\u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0435\u0441\u0442\u044c, \u043d\u043e \u0431\u0443\u0434\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u0445 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435)","4f05192f":"\u041f\u0440\u043e\u0431\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u0430\u043a \u0435\u0441\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438"}}