{"cell_type":{"4d38214c":"code","b72066f0":"code","a803b8a6":"code","17a61a2f":"code","3ed08cd3":"code","eb07a8d2":"code","ae30c5f1":"code","e553f06d":"code","dffee10c":"code","5fb8e752":"code","4a5abc8b":"code","0993d90e":"code","00e53acb":"code","57d8029e":"code","ac483585":"code","20561ee2":"code","6e0df9b1":"code","2fa61783":"code","28317a90":"code","8ee84693":"code","52c4b8ab":"code","37f28d08":"code","97856ea0":"code","3793d5da":"code","65ebb96d":"code","e7b72c2d":"code","42109077":"code","7664a28e":"code","16e488ca":"code","173e5e02":"code","5bcd6403":"code","4785b1e8":"code","350a6572":"code","c7d7a325":"code","c18ae284":"code","6bec8c64":"code","54b92ce9":"code","b8ad45c4":"code","65311857":"code","029e5668":"code","a40d61de":"code","112449fa":"code","1d7b5ff9":"code","b5bd3b2a":"code","3de0230b":"code","231fbcb8":"code","abb1f473":"code","14570400":"code","fd6bd18c":"code","e3f69030":"code","da375990":"code","7ee2e975":"code","4f622cb8":"code","f405e161":"code","f75a6c53":"code","a3f3ae7e":"code","3f9eeccf":"code","e412e062":"code","903ef153":"code","9f2a0948":"code","2595dac0":"code","d2f7e0a9":"code","6b874465":"code","faccb6bd":"code","302e1948":"code","babc6a3a":"code","5db9b9ba":"code","4e214358":"code","29a22f1e":"code","39d60727":"code","96044c4b":"code","79340fe3":"code","8d8323db":"code","13006455":"code","ec04e1be":"code","e5d870a0":"code","b2d80962":"code","bf00ee89":"code","2696bbbc":"code","0e8541ad":"code","f7be0490":"code","a1259302":"code","16f6a6ef":"code","cc375c19":"code","5dda2eae":"code","cbfea16c":"code","11da7a45":"markdown","9fa667c6":"markdown","4e5d3a6f":"markdown","8aad39b2":"markdown","978b2443":"markdown","cbced695":"markdown","c458b555":"markdown","95ad3bbf":"markdown","cd661967":"markdown","c3682fae":"markdown","9c19a112":"markdown","11bb1dfd":"markdown","48d2eae5":"markdown","30033202":"markdown","95508eae":"markdown","a2760a71":"markdown","e7fd5174":"markdown","9ca0b073":"markdown","b222ee5a":"markdown","f389441b":"markdown","dd75f892":"markdown","d0ee9575":"markdown","77e047f6":"markdown","5667cc91":"markdown","c571f3b3":"markdown","abce788a":"markdown","11122288":"markdown","112ddd87":"markdown"},"source":{"4d38214c":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom sklearn.metrics import mean_absolute_error\nfrom datetime import timedelta\nfrom functools import reduce\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport mlb\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px","b72066f0":"# feature_cols = ['label_playerId', 'label_primaryPositionName', 'label_teamId',\n#        'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n#        'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n#        'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n#        'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n#        'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n#        'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n#        'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n#        'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n#        'lossesPitching', 'flyOutsPitching', 'airOutsPitching',\n#        'groundOutsPitching', 'runsPitching', 'doublesPitching',\n#        'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n#        'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n#        'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n#        'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n#        'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n#        'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n#        'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n#        'inheritedRunnersScored', 'catchersInterferencePitching',\n#        'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n#        'assists', 'putOuts', 'errors', 'chances','target1_mean',\n#  'target1_median',\n#  'target1_std',\n#  'target1_min',\n#  'target1_max',\n#  'target1_prob',\n#  'target2_mean',\n#  'target2_median',\n#  'target2_std',\n#  'target2_min',\n#  'target2_max',\n#  'target2_prob',\n#  'target3_mean',\n#  'target3_median',\n#  'target3_std',\n#  'target3_min',\n#  'target3_max',\n#  'target3_prob',\n#  'target4_mean',\n#  'target4_median',\n#  'target4_std',\n#  'target4_min',\n#  'target4_max',\n#  'target4_prob']\n# feature_cols2 = ['label_playerId', 'label_primaryPositionName', 'label_teamId',\n#        'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n#        'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n#        'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n#        'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n#        'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n#        'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n#        'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n#        'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n#        'lossesPitching', 'flyOutsPitching', 'airOutsPitching',\n#        'groundOutsPitching', 'runsPitching', 'doublesPitching',\n#        'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n#        'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n#        'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n#        'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n#        'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n#        'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n#        'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n#        'inheritedRunnersScored', 'catchersInterferencePitching',\n#        'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n#        'assists', 'putOuts', 'errors', 'chances','target1_mean',\n#  'target1_median',\n#  'target1_std',\n#  'target1_min',\n#  'target1_max',\n#  'target1_prob',\n#  'target2_mean',\n#  'target2_median',\n#  'target2_std',\n#  'target2_min',\n#  'target2_max',\n#  'target2_prob',\n#  'target3_mean',\n#  'target3_median',\n#  'target3_std',\n#  'target3_min',\n#  'target3_max',\n#  'target3_prob',\n#  'target4_mean',\n#  'target4_median',\n#  'target4_std',\n#  'target4_min',\n#  'target4_max',\n#  'target4_prob',\n#     'target1']","a803b8a6":"BASE_DIR = Path('..\/input\/mlb-player-digital-engagement-forecasting')\nTRAIN_DIR = Path('..\/input\/mlb-pdef-train-dataset')","17a61a2f":"players = pd.read_csv(BASE_DIR \/ 'players.csv')\n\nrosters = pd.read_pickle(TRAIN_DIR \/ 'rosters_train.pkl')\ntargets = pd.read_pickle(TRAIN_DIR \/ 'nextDayPlayerEngagement_train.pkl')\nfollowers = pd.read_pickle(TRAIN_DIR \/ 'playerTwitterFollowers_train.pkl')\nteam_followers = pd.read_pickle(TRAIN_DIR \/ 'teamTwitterFollowers_train.pkl')\nteam_followers = team_followers.rename(columns={'numberOfFollowers': 'teamFollowers'})\nscores = pd.read_pickle(TRAIN_DIR \/ 'playerBoxScores_train.pkl')\nscores = scores.groupby(['playerId', 'date']).sum().reset_index()","3ed08cd3":"targets","eb07a8d2":"best_sub = pd.read_csv('..\/input\/endtoendsolution\/submission.csv')\nbest_sub","ae30c5f1":"import seaborn as sns","e553f06d":"targets_cols = ['target1', 'target2', 'target3', 'target4']\n\nfor target in targets_cols:\n    sns.distplot(targets[target])\n    plt.title(target)\n    plt.show()","dffee10c":"targets_cols = ['target1', 'target2', 'target3', 'target4']\n\nfor target in targets_cols:\n    sns.distplot(best_sub[target])\n    plt.title(target)\n    plt.show()","5fb8e752":"rosters.head()","4a5abc8b":"rosters.status.unique()","0993d90e":"statusCode = rosters.statusCode.value_counts()\n\nfig = px.bar(x=statusCode.index, y=np.log(statusCode.values), text=statusCode.values,\n            labels={'x': 'roster status code', 'y': 'values'},\n            title='Number of players under each roster status(log)', \n            color=statusCode.index)\n\nfig.show()","00e53acb":"rosters['year'] = pd.to_datetime(rosters['date'], format = '%Y%m%d').dt.year","57d8029e":"status_change_per_year = pd.DataFrame(rosters.groupby('year')['statusCode'].value_counts())\nstatus_change_per_year.columns = ['count']\nstatus_change_per_year = status_change_per_year.reset_index()\n\nfig = px.bar(x=status_change_per_year['statusCode'], y=np.log(status_change_per_year['count']), \n             text=status_change_per_year['count'],\n             animation_frame=status_change_per_year['year'], animation_group=status_change_per_year['count'],\n             labels={'x': 'roster status code', 'y': 'values'},\n             title='Number of players under each roster status per year(log)', \n             color=status_change_per_year['statusCode'])\n\nfig.show()","ac483585":"followers.head()","20561ee2":"followers.shape","6e0df9b1":"followers.playerName.unique().shape","2fa61783":"most_famous_player = followers.groupby('playerName')['numberOfFollowers'].max().sort_values(ascending=False)[:20]\n\nfig = px.bar(x=most_famous_player.index, y=most_famous_player.values, text=most_famous_player.values,\n            labels={'x': 'Name', 'y': 'followers'},\n            title='Top 20 the most famous players by tweeter followers', \n            color=most_famous_player.index)\nfig.show()","28317a90":"followers['date'] = pd.to_datetime(followers['date'], format = '%Y%m%d')","8ee84693":"followers_growth = followers.groupby(['playerId', 'date']).agg({'numberOfFollowers':'min'}).reset_index()","52c4b8ab":"min_followers = \\\n    pd.DataFrame(followers_growth.groupby('playerId').agg({'numberOfFollowers':'min'})['numberOfFollowers']).reset_index()\nmin_followers.columns = ['playerId', 'min_f']\n\nmax_followers = \\\n    pd.DataFrame(followers_growth.groupby('playerId').agg({'numberOfFollowers':'max'})['numberOfFollowers']).reset_index()\nmax_followers.columns = ['playerId', 'max_f']","37f28d08":"def get_growth(min_max_dataset):\n    A = min_max_dataset['min_f']\n    B = min_max_dataset['max_f']\n    return (B-A)\/A*100","97856ea0":"min_max_followers = min_followers.merge(max_followers, on='playerId', how='left')\nmin_max_followers['growth%'] = get_growth(min_max_followers)\nmin_max_followers['growth_num'] = min_max_followers['max_f']-min_max_followers['min_f']\nmin_max_followers = min_max_followers.sort_values(by=['growth_num', 'growth%'], ascending=False)[:20]","3793d5da":"min_max_followers","65ebb96d":"fig = px.bar(x=min_max_followers['playerId'], y=min_max_followers['growth_num'], \n             text=round(min_max_followers['growth%']),\n             labels={'x': 'playerId', 'y': 'followers'},\n             title='Top 20 fastest growing players by tweeter followers', \n             color=min_max_followers['playerId'])\nfig.show()","e7b72c2d":"team_followers.head()","42109077":"team_followers.shape","7664a28e":"most_famous_teams = team_followers.groupby('teamName')['teamFollowers'].max().sort_values(ascending=False)\n\nfig = px.bar(x=most_famous_teams.index, y=most_famous_teams.values, text=most_famous_teams.values,\n            labels={'x': 'Team name', 'y': 'followers'},\n            title='The most famous teams by tweeter followers', \n            color=most_famous_teams.index)\nfig.show()","16e488ca":"scores.head()","173e5e02":"st = scores.columns[2:45]\nnd = scores.columns[45:]","5bcd6403":"scores[st].describe()","4785b1e8":"scores[nd].describe()","350a6572":"awards = pd.read_csv(TRAIN_DIR \/ 'awards_train.csv')","c7d7a325":"awards['awardDateMonth'] = pd.to_datetime(awards['awardDate'], format = '%Y-%m-%d').dt.month\nawards['awardDateYear'] = pd.to_datetime(awards['awardDate'], format = '%Y-%m-%d').dt.year","c18ae284":"awards.head()","6bec8c64":"most_awarded_player_per_year = pd.DataFrame(awards.groupby('awardDateYear')['playerName'].value_counts())\nmost_awarded_player_per_year.columns = ['num_of_awards']\nmost_awarded_player_per_year = most_awarded_player_per_year.reset_index()\nyear2018 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2018][:20]\nyear2019 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2019][:20]\nyear2020 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2020][:20]\nyear2021 = most_awarded_player_per_year[most_awarded_player_per_year['awardDateYear'] == 2021][:20]\nmost_awarded_player_per_year = year2018.append([year2019, year2020, year2021])\n\nfig = px.bar(x=most_awarded_player_per_year['playerName'], y=most_awarded_player_per_year['num_of_awards'], \n             text=most_awarded_player_per_year['num_of_awards'],\n             animation_frame=most_awarded_player_per_year['awardDateYear'],\n             animation_group=most_awarded_player_per_year['num_of_awards'],\n             labels={'y': 'number of awards', 'x': ' '},\n             title='Top the most awarded players per year', \n             color=most_awarded_player_per_year['playerName'])\n\nfig.show()","54b92ce9":"most_frequent_award = awards.awardName.value_counts()[:25]\n\nfig = px.pie(most_frequent_award, values=most_frequent_award.values, names=most_frequent_award.index,\n             title='Most frequent awards')\nfig.show()","b8ad45c4":"def plot_awards(playerid=477132):\n    if len(awards[awards.playerId==playerid]['awardDateYear'].value_counts()) > 0:\n        awards[awards.playerId==playerid]['awardDateYear'].value_counts().plot(kind = 'bar')\n        plt.show()","65311857":"plot_awards(477132)","029e5668":"events = pd.read_csv('..\/input\/mlb-pdef-train-dataset\/events_train.csv')\nevents.head()","a40d61de":"events.event.unique()","112449fa":"events['year'] = pd.to_datetime(events.date, format = '%Y%m%d').dt.year\nevents['month'] = pd.to_datetime(events.date, format = '%Y%m%d').dt.month","1d7b5ff9":"events2020 = events[events['year'] == 2020]\nevents2020.month.unique()","b5bd3b2a":"most_frequent_events = events.event.value_counts()[:25]\n\nfig = px.pie(most_frequent_events, values=most_frequent_events.values, names=most_frequent_events.index,\n             title='Most frequent events')\nfig.show()","3de0230b":"events.shape","231fbcb8":"events.gameType.unique()","abb1f473":"gameType = events.gameType.value_counts()\ntext = {'R' : 'Regular Season',\n               'F' : 'Wild Card Game',\n               'D' : 'Division Series',\n               'L' : 'League Championship Series',\n               'W' : 'World Series'}\n\nfig = px.bar(gameType, x=gameType.index, y=np.log(gameType.values),\n             color=gameType.index, text=text,\n             title='log number of game types',\n             labels={'index':'type', 'y':'value'})\n\nfig.show()","14570400":"inning = events.inning\n\nfig = px.histogram(inning, nbins=20,\n                   title='distribution of innings')\n\nfig.show()","fd6bd18c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\nfig, axs = plt.subplots(2,2, figsize = (20, 10))\nsns.kdeplot(ax=axs[0,0], data=targets['target1'])\nsns.kdeplot(ax=axs[0,1], data=targets['target2'])\nsns.kdeplot(ax=axs[1,0], data=targets['target3'])\nsns.kdeplot(ax=axs[1,1], data=targets['target4'])\nbbox = axs[0,0].get_position()\nbbox2 = axs[0,1].get_position()\n\ncenter=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\nplt.suptitle('Distribution of targets', x = center)\n","e3f69030":"def draw_kde_plot(col = 'target1'):\n    sns.set_style('whitegrid')\n    sns.set(font_scale = 1.5)\n    fig, axs = plt.subplots(2,2, figsize = (15, 10))\n    g = sns.kdeplot(ax=axs[0,0], data=targets[col])\n    g.set_xlabel('original')\n    g = sns.kdeplot(ax=axs[0,1], data=targets[col]**2)\n    g.set_xlabel('squared')\n    g = sns.kdeplot(ax=axs[1,0], data=targets[col]**4)\n    g.set_xlabel('power 4')\n    g = sns.kdeplot(ax=axs[1,1], data = np.log(targets[col]+1))\n    g.set_xlabel('log')\n\n\n\n    bbox = axs[0,0].get_position()\n    bbox2 = axs[0,1].get_position()\n    center=(bbox2.x1) * 0.4 + (bbox.x1) * 0.25\n    plt.suptitle(f'Transformation of {col}', x = center)\n    plt.tight_layout()\n","da375990":"for col in ['target1', 'target2', 'target3', 'target4']:\n    draw_kde_plot(col)","7ee2e975":"sns.set_style('whitegrid')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(1,1, figsize = (20,8))\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs, x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs, x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs,x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nbbox = axs.get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('Comparision of targets', x = center)\n\n","4f622cb8":"sns.set_style('ticks')\nsns.set(font_scale = 1.5)\n\n\nfig, axs = plt.subplots(2,2, figsize = (20,8))\nsns.lineplot(ax=axs[0,0], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target1'],\n             legend='full', label = 'target1')\nsns.lineplot(ax=axs[0,1], x = np.arange(1,10001),\n             y = targets.sample(10000, random_state=500)['target2'],\n             legend='full', label = 'target2')\nsns.lineplot(ax=axs[1,0], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target3'], \n             legend='full', label = 'target3')\nsns.lineplot(ax=axs[1,1], x = np.arange(1,10001), \n             y = targets.sample(10000, random_state=500)['target4'], \n             legend='full', label = 'target4')\n\nplt.title('Comparision of targets, side by side view')\n","f405e161":"targets['year'] = pd.to_datetime(targets['date'], format = '%Y%m%d').dt.year","f75a6c53":"targets['year'].value_counts().plot(kind = 'bar')","a3f3ae7e":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"whitegrid\")\nsns.set(font_scale = 2)\nsns.color_palette(\"Set2\")\n\n\n\nfig, axs = plt.subplots(4,1, figsize = (20,20))\nsns.lineplot(ax=axs[0], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target1',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[1], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target2',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[2], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target3',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nsns.lineplot(ax=axs[3], \n             x = np.arange(1,10001),\n             data = targets.sample(10000, random_state=100),\n             y = 'target4',\n             hue = 'year',\n             palette='tab10',\n             linewidth=2.5)\n\nbbox = axs[0].get_position()\ncenter=0.5*(bbox.x1)\nplt.suptitle('targets over years', x = center)","3f9eeccf":"\ndef plot_target_for_player(col = 'target1', playerid = 683734):\n    \n    sns.set(style=\"whitegrid\")\n    sns.set(font_scale = 2)\n    sns.color_palette(\"Set2\")\n\n    fig, axs = plt.subplots(1,1, figsize = (20,8))\n\n    sns.lineplot(ax=axs, x = np.arange(365),\n                 data = targets[((targets.year==2018) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2018',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(365),\n                 data = targets[((targets.year==2019) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2019',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(366),\n                 data = targets[((targets.year==2020) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2020',\n                 linewidth=2.5)\n\n    sns.lineplot(ax=axs, \n                 x =  np.arange(120),\n                 data = targets[((targets.year==2021) & (targets.playerId==playerid))],\n                 y = col,\n                 label = '2021',\n                 linewidth=2.5)\n    \n    bbox = axs.get_position()\n    center=0.5*(bbox.x1)\n    plt.suptitle(f'player Id {playerid}', x = center)","e412e062":"plot_target_for_player()","903ef153":"plot_target_for_player('target2')","9f2a0948":"plot_target_for_player('target3')","2595dac0":"plot_target_for_player('target4')","d2f7e0a9":"plot_target_for_player('target1',477132)","6b874465":"plot_target_for_player('target2',477132)","faccb6bd":"plot_target_for_player('target3',477132)","302e1948":"plot_target_for_player('target4',477132)","babc6a3a":"from scipy.stats import boxcox\nxt, _ = boxcox(targets['target1'].values + 1)\nsns.distplot(xt)","5db9b9ba":"xt, _ = boxcox(targets['target4'].values + 1)\nsns.distplot(xt)","4e214358":"xt, _ = boxcox(targets['target3'].values + 1)\nsns.distplot(xt)","29a22f1e":"import seaborn as sns","39d60727":"player_target_stats = pd.read_csv(\"..\/input\/player-target-stats\/player_target_stats.csv\")\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nplayer_target_stats_for_corr = pd.merge(player_target_stats, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(20, 20))\nplt.xticks(rotation=25)\ncorr = player_target_stats_for_corr.drop(columns =['playerId']).corr()\n\n\nsns.heatmap(corr,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )\nplt.title('targets corr')\nplt.show()","96044c4b":"followers_agg =followers.groupby('playerId')['numberOfFollowers'].agg('median').reset_index()\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg.columns = ['playerId', '#Followers']\nfollowers_agg = pd.merge(followers_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Median Target vs Median Twitter Followers\", fontsize =15)\n\ncorr = followers_agg.drop(columns =['playerId']).corr()\n#mask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Followers', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Followers']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )","79340fe3":"tbs = pd.read_csv('..\/input\/mlb-pdef-train-dataset\/transactions_train.csv')\ntbs.info()","8d8323db":"tbs_cols = tbs.columns.tolist()\n\ntbs_cols = [col for col in tbs_cols if col not in ['playerId', 'playerName', 'fromTeamName',\n                                                   'toTeamName', 'effectiveDate', 'resolutionDate',\n                                                   'typeCode', 'typeDesc', 'description', 'index']]\nfor col in tbs_cols:\n            tbs_agg = tbs.groupby('playerId')[col].agg('sum').reset_index()\n            tbs_agg.columns = ['playerId', \"#\"+col]\n            targets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\n            tbs_agg = pd.merge(tbs_agg, targets_agg, on = ['playerId'], how = 'left')\n            \n            plt.figure(figsize=(10, 2))\n            plt.suptitle(f\"Total {col} vs Median targets\", fontsize =15)\n            corr = tbs_agg.drop(columns =['playerId']).corr()\n            mask = np.triu(np.ones_like(corr, dtype=bool))\n            sns.set(font_scale=1.4)\n            plt.xticks(rotation=45)\n\n            \n            x_axis_labels = [\"#\"+col, 'target1','target2', 'target3', 'target4'] \n\n            sns.heatmap(np.array(corr[\"#\"+col]).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\")           \n            \n            plt.show()\n            plt.close()","13006455":"rost_repl = {'A':0, 'D60':1, 'RM':2, 'D10':3, 'D7':4, 'PL':4, 'SU':5, 'FME':6, 'BRV':7, 'RES':8,\n       'DEC':9}\nrosters.statusCode.replace(rost_repl, inplace=True)","ec04e1be":"rosters.info()","e5d870a0":"rosters_cols = rosters.columns.tolist()\n\nrosters_cols = [col for col in rosters if col not in ['playerId', 'gameDate', 'status']]\nfor col in rosters_cols:\n            rosters_agg = rosters.groupby('playerId')[col].agg('sum').reset_index()\n            rosters_agg.columns = ['playerId', \"#\"+col]\n            targets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\n            rosters_agg = pd.merge(rosters_agg, targets_agg, on = ['playerId'], how = 'left')\n            \n            plt.figure(figsize=(10, 2))\n            plt.suptitle(f\"Total {col} vs Median targets\", fontsize =15)\n            corr = rosters_agg.drop(columns =['playerId']).corr()\n            mask = np.triu(np.ones_like(corr, dtype=bool))\n            sns.set(font_scale=1.4)\n            plt.xticks(rotation=45)\n\n            \n            x_axis_labels = [\"#\"+col, 'target1','target2', 'target3', 'target4'] \n\n            sns.heatmap(np.array(corr[\"#\"+col]).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\")           \n            \n            plt.show()\n            plt.close()","b2d80962":"qcut = pd.qcut(targets['target2'], q=10, duplicates='drop', labels=[1,2,3,4,5,6,7, 8, 9, 10])\ntop_deciles_index = qcut[qcut == 10].index\ntarget2_years = targets.iloc[top_deciles_index]","bf00ee89":"qcut","2696bbbc":"target2_years['year'] = pd.to_datetime(targets.loc[top_deciles_index].date, format = '%Y%m%d').dt.year\ntarget2_years['month'] = pd.to_datetime(targets.loc[top_deciles_index].date, format = '%Y%m%d').dt.month\ntarget2_years.groupby('year')['month'].value_counts().sort_index()","0e8541ad":"events","f7be0490":"targets","a1259302":"qcut1 = pd.qcut(targets['target1'], q=10, duplicates='drop', labels=[1,2,3,4,5,6,7])\ntop_deciles_index1 = qcut1[qcut1 == 7].index\ntarget1_years = targets.iloc[top_deciles_index1]\ntarget1_years['year'] = pd.to_datetime(targets.iloc[top_deciles_index1].date, format = '%Y%m%d').dt.year\ntarget1_years.year.value_counts()","16f6a6ef":"qcut3 = pd.qcut(targets['target3'], q=10, duplicates='drop', labels=[1,2,3,4,5,6,7])\ntop_deciles_index3 = qcut3[qcut3 == 7].index\ntarget3_years = targets.iloc[top_deciles_index3]\ntarget3_years['year'] = pd.to_datetime(targets.iloc[top_deciles_index3].date, format = '%Y%m%d').dt.year\ntarget3_years.year.value_counts()","cc375c19":"qcut4 = pd.qcut(targets['target4'], q=10, duplicates='drop', labels=[1,2,3,4,5,6,7,8,9])\ntop_deciles_index4 = qcut4[qcut4 == 9].index\ntarget4_years = targets.iloc[top_deciles_index4]\ntarget4_years['year'] = pd.to_datetime(targets.iloc[top_deciles_index4].date, format = '%Y%m%d').dt.year\ntarget4_years.year.value_counts()","5dda2eae":"awards = pd.read_csv(TRAIN_DIR \/ 'awards_train.csv')\n\nawards_agg = awards.groupby('playerId')['awardId'].agg('count').reset_index()\nawards_agg.columns = ['playerId', '#Awards']\ntargets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\nfollowers_agg = pd.merge(awards_agg, targets_agg, on = ['playerId'], how = 'left')\nplt.figure(figsize=(10, 2))\nplt.xticks(rotation=45)\nplt.suptitle(\"Total number of awards vs Median targets\", fontsize =15)\ncorr = followers_agg.drop(columns =['playerId']).corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nx_axis_labels = ['#Awards', 'target1','target2', 'target3', 'target4'] \nsns.heatmap(np.array(corr['#Awards']).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\"\n       )","cbfea16c":"scores_cols = scores.columns.tolist()\n\nscores_cols = [col for col in scores_cols if col not in ['playerId', 'date', 'home', 'gamePk', 'teamId', 'battingOrder']]\nfor col in scores_cols:\n            scores_agg = scores.groupby('playerId')[col].agg('sum').reset_index()\n            scores_agg.columns = ['playerId', \"#\"+col]\n            targets_agg =targets.groupby('playerId')[['target1', 'target2', 'target3', 'target4']].agg('median').reset_index()\n            scores_agg = pd.merge(scores_agg, targets_agg, on = ['playerId'], how = 'left')\n            plt.figure(figsize=(10, 2))\n            plt.suptitle(f\"Total {col} vs Median targets\", fontsize =15)\n            corr = scores_agg.drop(columns =['playerId']).corr()\n            mask = np.triu(np.ones_like(corr, dtype=bool))\n            sns.set(font_scale=1.4)\n            plt.xticks(rotation=45)\n            \n            x_axis_labels = [\"#\"+col, 'target1','target2', 'target3', 'target4'] \n\n            sns.heatmap(np.array(corr[\"#\"+col]).reshape((1,5)),\n            annot = True,\n            xticklabels=x_axis_labels,\n            vmin=0,\n            vmax=1,\n            center= 0,\n            cmap=\"RdYlGn\")           \n            \n            plt.show()\n            plt.close()","11da7a45":"correlated(<0.5) ->","9fa667c6":"# Awards EDA","4e5d3a6f":"# Player Box Scores EDA","8aad39b2":"#### In the current data, we use only \n> rosters_train.pkl <br>\n> nextDayPlayerEngagement_train.pkl <br>\n> playerBoxScores_train.pkl <br>\n> player_target_stats.csv","978b2443":"['label_playerId', 'label_primaryPositionName', 'label_teamId',\n'label_status', 'battingOrder', 'gamesPlayedBatting', 'flyOuts',\n'groundOuts', 'runsScored', 'doubles', 'triples', 'homeRuns',\n'strikeOuts', 'baseOnBalls', 'intentionalWalks', 'hits', 'hitByPitch',\n'atBats', 'caughtStealing', 'stolenBases', 'groundIntoDoublePlay',\n'groundIntoTriplePlay', 'plateAppearances', 'totalBases', 'rbi',\n'leftOnBase', 'sacBunts', 'sacFlies', 'catchersInterference',\n'pickoffs', 'gamesPlayedPitching', 'gamesStartedPitching',\n'completeGamesPitching', 'shutoutsPitching', 'winsPitching',\n'lossesPitching', 'flyOutsPitching', 'airOutsPitching',\n'groundOutsPitching', 'runsPitching', 'doublesPitching',\n'triplesPitching', 'homeRunsPitching', 'strikeOutsPitching',\n'baseOnBallsPitching', 'intentionalWalksPitching', 'hitsPitching',\n'hitByPitchPitching', 'atBatsPitching', 'caughtStealingPitching',\n'stolenBasesPitching', 'inningsPitched', 'saveOpportunities',\n'earnedRuns', 'battersFaced', 'outsPitching', 'pitchesThrown', 'balls',\n'strikes', 'hitBatsmen', 'balks', 'wildPitches', 'pickoffsPitching',\n'rbiPitching', 'gamesFinishedPitching', 'inheritedRunners',\n'inheritedRunnersScored', 'catchersInterferencePitching',\n'sacBuntsPitching', 'sacFliesPitching', 'saves', 'holds', 'blownSaves',\n'assists', 'putOuts', 'errors', 'chances','target1_mean',\n'target1_median',\n'target1_std',\n'target1_min',\n'target1_max',\n'target1_prob','target2_mean','target2_median','target2_std','target2_min',\n'target2_max','target2_prob','target3_mean','target3_median',target3_std','target3_min','target3_max','target3_prob','target4_mean','target4_median',\n'target4_std','target4_min','target4_max','target4_prob']","cbced695":"May be we should have different validation strategy","c458b555":"# Player twitter followers EDA","95ad3bbf":"we use now ->\n","cd661967":"# Conclusion","c3682fae":"# Team followers EDA","9c19a112":"* R : Regular Season\n* F : Wild Card Game\n* D : Division Series\n* L : League Championship Series\n* W : World Series","11bb1dfd":"# There seems to be relationship between number of awards and targets, higher awards the player is popular","48d2eae5":"# **Target2 has highest Skewness**\n","30033202":"* gamePk - unique identifier for game.\n* gameDate\n* gameTimeUTC - First pitch time in UTC.\n* season\n* gameType - Game type, various types can be found here.\n* playId - Statcast play guid.\n* eventId\n* inning - Inning AB occurred.\n* halfInning- \u201ctop\u201d or \u201cbottom\u201d inning indicator.\n* homeScore - Home score at start of the event.\n* awayScore - Away score at start of the event.\n* menOnBase - Split used if runner on base \u2013 ie (RISP, Empty).\n* atBatIndex - At-Bat index number, begins with 0.\n* atBatDesc - Play-by-play description of AB.\n* atBatEvent - Event type result of the atBat, various types can be found here.\n* hasOut - Binary, 1 if runner is out on play.\n* pitcherTeamId - Unique identifier for pitching team.\n* isPitcherHome - Binary, 1 if pitcher is home team.\n* pitcherTeam - team name of pitching team.\n* hitterTeamId - Unique identifier for hitting team.\n* hitterTeam - Team name of hitting team.\n* pitcherId\n* pitcherName\n* isStarter - Binary, 1 if player was game\u2019s starting pitcher.\n* pitcherHand - Player throw hand: \u201cL\u201d,\u201dR\u201d.\n* hitterId\n* hitterName\n* batSide - Player bat side: \u201cL\u201d,\u201dR\u201d.\n* pitchNumber - Pitch sequence number of AB.\n* balls - Ball count after the event.\n* strikes - Strike count after the event.\n* isGB - Binary, 1 if at bat is a ground ball.\n* isLD - Binary, 1 if at bat is a line drive.\n* isFB - Binary, 1 if at bat is a fly ball.\n* isPU - Binary, 1 if at bat is a pop up.\n* launchSpeed - Measured speed of the hit ball.\n* launchAngle - Vertical angle relative to the horizon at which the hit was launched.\n* totalDistance - Total distance ball traveled.\n* event - Events that may occur during an at-bat: strikeout, groundout, substitutions, stolen base, wild pitch, game advisory, etc.\n* description - Text description of event.\n* rbi - Number of runs batted in during AB.\n* pitchType - Pitch type classification code, various types can be found here.\n* call - Pitch or throw result classification code, various types can be found here.\n* outs - Current\/Final outs of AB.\n* inPlay - True\/False if ball was hit into play.\n* isPaOver - Binary, 1 if this event is the end of the plate appearance.\n* startSpeed - Speed in MPH of the ball at 50 feet in front of home plate.\n* endSpeed - Speed in MPH of the ball as it crosses the front edge of home plate (0,0 in the x axis).\n* nastyFactor - Evaluates several properties of each pitch, and rates the \"nastiness\" of the pitch on a scale from 0-100.\n* breakAngle - Degrees clockwise (batter\u2019s view) that the plane of the pitch deviates from the vertical.\n* breakLength - Max distance that the pitch separates from the straight line between pitch start and pitch end.\n* breakY - Distance from home plate where the break is greatest.\n* spinRate - Rate of spin on the ball after it was released by pitcher in RPMs.\n* spinDirection - The axis of rotation for the ball at release given as an angle that reflects how the spin will influence the ball trajectory. Pure back-spin is 180 degrees, pure side-spin that puts the ball to the 1b side is 90 degrees, pure-side spin that pulls the ball to the 3b side is 270 degrees, and pure top-spin is 0 or 360 degrees.\n* pX - Horizontal position in feet of the ball as it crosses the front axis of home plate.\n* pZ - Vertical position in feet above home plate of the ball as it crosses the front axis of home plate.\n* aX - Ball acceleration on the z axis.\n* aY - Ball acceleration on the y axis.\n* aZ - Ball acceleration on the z axis.\n* pfxX - Horizontal movement of the ball in inches.\n* pfxZ - Vertical movement of the ball in inches.\n* vX0 - Velocity of the ball from the x axis.\n* vY0 - Velocity of the ball from the y axis; this is negative because 0,0,0 is behind the batter and the ball travels from pitcher mound towards 0,0,0.\n* vZ0 - Velocity of the ball from the z axis.\n* x - X coordinate where pitch crossed front of home plate.\n* y - Y coordinate where pitch crossed front of home plate.\n* x0 - Coordinate location of the ball at the point it was released from the pitchers hand on the x axis (time = 0).\n* y0 - Coordinate location of the ball at the point it was released from the pitchers hand on the y axis (time = 0).\n* z0 - Coordinate location of the ball at the point it was released from the pitchers hand on the z axis (time = 0).\n* type - Type of event, either \u2018pitch\u2019 or \u2018action\u2019\n* zone - Zone location number - see image below.","95508eae":"Twitter following data was collected by MLB from Twitter APIs for all 30 Major League teams, on the first of each month, dating back to 1\/1\/2018. <br>\n\n- date - Date of follower count.\n- teamId - Unique identifier for a team.\n- teamName\n- accountName - Name on team twitter account.\n- twitterHandle - Team twitter handle.\n- numberOfFollowers - Number of followers.","a2760a71":"# Target EDA","e7fd5174":"groundIntoTriplePlay, caughtStealing, stolenBases, triples, sacBuntsPitching, catchersInterference, pickoffs, gamesPlayedPitching, gamesStartedPitching, completeGamesPitching, shutoutsPitching, winsPitching, lossesPitching, flyOutsPitching, airOutsPitching, groundOutsPitching, runsPitching,\nTotal doublesPitching, Total triplesPitching, Totla homeRunsPitching, strikeOutsPitching, Total baseOnBallsPitching, \nTotal internationalWalksPitching, Total hitsPitching, Total hitByPitchPitching, Total atBatsPitching, TotalcaughtSteallingPitching,\nTotal stolenBasesPitching, Total inningsPitched, saveOpportunities, earnedRuns, battersFaced, outsPitching, \nTotal pitchesThrown, Total balls, Total strikes, Total hitBatsmen, Total balks, Total wildPitches, Total pickoffsPitching, rbiPitching\nTotal gamesFinishedPitching, Total inheritedRunners,  Total inheritedRunnersScored, Total catchersInferencePitching, sacBuntsPitching, \nTotal sacFliesPitching, Total saves, Total holds, Total blownSaves, Total assists, Total putOuts, \n","9ca0b073":"- home - Binary, 1 if home team, 0 if away.\n- gamePk - unique identifier for game.\n- gameDate\n- gameTimeUTC - First pitch time in UTC.\n- teamId - Unique identifier for team.\n- teamName\n- playerId - Unique identifier for player.\n- playerName\n- jerseyNum\n- positionCode - Number position code, details are here.\n- positionName - Text position display, details are here.\n- positionType - Position group, details are here.\n- battingOrder - Format: \u201c###\u201d, where the first digit indicates the batting order spot, and the second two digits indicate the sequence in which that player occupied that batting order spot. Examples: \u201c300\u201d, which indicates the starter in the third spot in the batting order; \u201c903,\u201d which indicates the fourth player (after 900, 901 and 902) occupy the ninth spot in the batting order. Only populates if appeared in game.\n- gamesPlayedBatting - 1 if player entered the game as a batter, runner or fielder.\n- flyOuts - Game total fly outs.\n- groundOuts - Game total ground outs.\n- runsScored - Game total runs scored.\n- doubles - Game total doubles.\n- triples - Game total triples.\n- homeRuns - Game total home runs.\n- strikeOuts - Game total strike outs.\n- baseOnBalls - Game total walks.\n- intentionalWalks - Game total intentional walks.\n- hits - Game total hits.\n- hitByPitch - Game total hit by pitches.\n- atBats - Game total at-bats.\n- caughtStealing - Game total caught stealing.\n- stolenBases - Game total stolen bases.\n- groundIntoDoublePlay - Game total double plays grounded into.\n- groundIntoTriplePlay - Game total triple plays grounded into.\n- plateAppearances - Game total plate appearances.\n- totalBases - Game total bases.\n- rbi - Game total runs batted in.\n- leftOnBase - Game total runners left on base.\n- sacBunts - Game total sacrifice bunts.\n- sacFlies - Game total sacrifice flies.\n- catchersInterference - Game total catchers interference reached on.\n- pickoffs - Game total number of times picked off base.\n- gamesPlayedPitching- Binary, 1 if player entered the game as a pitcher.\n- gamesStartedPitching- Binary, 1 if player was game\u2019s starting pitcher.\n- completeGamesPitching - Binary, 1 if credited with complete game.\n- shutoutsPitching - Binary, 1 if credited with shutout.\n- winsPitching - Binary, 1 if credited with win.\n- lossesPitching - Binary, 1 if credited with loss.\n- flyOutsPitching - Game total of flyouts allowed.\n- airOutsPitching - Game total of air outs (flyouts + popouts) allowed.\n- groundOutsPitching - Game total ground outs allowed.\n- runsPitching - Game total runs allowed.\n- doublesPitching - Game total doubles allowed.\n- triplesPitching - Game total triples allowed.\n- homeRunsPitching - Game total home runs allowed.\n- strikeOutsPitching - Game total strike outs allowed.\n- baseOnBallsPitching - Game total walks allowed.\n- intentionalWalksPitching - Game total intentional walks allowed.\n- hitsPitching - Game total hits allowed.\n- hitByPitchPitching - Game total hit by pitches allowed.\n- atBatsPitching - Game total at-bats against.\n- caughtStealingPitching - Game total caught stealing against.\n- stolenBasesPitching - Game total stolen bases allowed.\n- inningsPitched - Game total innings pitched.\n- saveOpportunities - Binary, 1 if credited with save opportunity.\n- earnedRuns - Game total earned runs allowed.\n- battersFaced - Game total batters faced.\n- outsPitching - Game total outs recorded.\n- pitchesThrown - Game total number of pitches thrown.\n- balls - Game total balls thrown.\n- strikes - Game total strikes thrown.\n- hitBatsmen - Game total hit batters.\n- balks - Game total balks.\n- wildPitches - Game total number of wild pitches thrown.\n- pickoffsPitching - Game total number of pickoffs.\n- rbiPitching - Game total number of runs batted in allowed.\n- inheritedRunners - Game total of inherited runners assumed.\n- inheritedRunnersScored- Game total of inherited runners that scored.\n- catchersInterferencePitching - Game total of catcher\u2019s interference occurred by battery.\n- sacBuntsPitching - Game total sacrifice bunts allowed.\n- sacFliesPitching - Game total sacrifice flies allowed.\n- saves - Binary, 1 if credited with save.\n- holds - Binary, 1 if credited with hold.\n- blownSaves - Binary, 1 if credited with blown save.\n- assists - Game total number of assists.\n- putOuts - Game total number of putouts.\n- errors - Game total number of errors.\n- chances - Game total fielding chances.","b222ee5a":"# There is definitely seasonality for targets, seems like we can remove year 2018 from modelling","f389441b":"features that we have now","dd75f892":"# Events EDA","d0ee9575":"#","77e047f6":"- playerId - Unique identifier for a player.\n- gameDate - dat of the game\n- teamId - teamId that player is on that date.\n- statusCode - Roster status abbreviation.\n- status - Descriptive roster status.","5667cc91":"- about rosters: most players play under the A status and I don't think that this can help in training the model.\n- about players followers: it is logical that with high popularity, the interest of fans will be greater than with a low number of readers. I also showed the growth of followers on the graph, this can serve as a feature, as it seems to me, but the correctness still needs to be improved.\n- about teams followers: the players in the most popular teams were followed on average more than in the unpopular ones, and this can also become a feature.\n- about awards: here, too, it is interesting to do. Players receive awards and fan engagement increases, if this award is some kind of prestigious, then interest rises even more.\n\nI also want to make an EDA based on other data such as standings, teamBoxScores, transactions, games.","c571f3b3":"**Target4 has highest correlation with Twitter follower count**","abce788a":"# We have less data for year 4, since we need to predict for the future","11122288":"Twitter following data was collected by MLB from Twitter APIs for Major League players, on the first of each month, dating back to 1\/1\/2018. This dataset is not exhaustive of all players over all months, as not every player has\/had a Twitter account, players may create\/delete\/reinstate accounts at random, or other scenarios preventing follower data from being collected on a given date. <br>\n\n- date - Date of follower count.\n- playerId - Unique identifier for a player.\n- playerName\n- accountName - Name on player twitter account.\n- twitterHandle - Player twitter handle.\n- numberOfFollowers - Number of followers","112ddd87":"# Rosters EDA"}}