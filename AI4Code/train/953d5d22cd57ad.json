{"cell_type":{"a8643f66":"code","07c46e3c":"code","6def961a":"code","4b54f0c9":"code","c33e4ee8":"code","9727aab5":"code","4c6d8a47":"code","36702677":"code","ed19341e":"code","eb428cc2":"code","fc6f9a95":"code","1d34dc17":"code","1dca5275":"markdown","185ec4bb":"markdown","12019824":"markdown","33c5a6c6":"markdown","8ac91b9b":"markdown","8e234b67":"markdown","b18f9531":"markdown"},"source":{"a8643f66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07c46e3c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix, classification_report","6def961a":"X = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/X.npy')\nY = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Sign-language-digits-dataset\/Y.npy')\nprint('X Shape :',X.shape)\nprint('Y Shape :',Y.shape)","4b54f0c9":"image_size = 64\n\nY = np.argmax(Y, axis=1)\nprint('New Y Shape : ',Y.shape)","c33e4ee8":"def show(image,label):\n    plt.axis('off')\n    plt.title(label)\n    plt.imshow(image)","9727aab5":"plt.figure(figsize=(10,10))\nfor i in range(9):\n    plt.subplot(3,3, i+1)\n    show(X[i * 70], label=\"Label : \" + str(Y[i * 70]))","4c6d8a47":"x_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.3, shuffle=True, random_state=1)","36702677":"inputs = tf.keras.Input(shape=(64,64,1))\n\nconv1 = tf.keras.layers.Conv2D(filters=6, kernel_size=(5,5), activation='relu')(inputs)\npool1 = tf.keras.layers.AveragePooling2D()(conv1)\n\nconv2 = tf.keras.layers.Conv2D(filters=16, kernel_size=(5,5), activation='relu')(pool1)\npool2 = tf.keras.layers.AveragePooling2D()(conv2)\n\nflatten = tf.keras.layers.Flatten()(pool2)\n\ndense1 = tf.keras.layers.Dense(units=120, activation='relu')(flatten)\ndense2 = tf.keras.layers.Dense(units=84, activation='relu')(dense1)\n\noutputs = tf.keras.layers.Dense(units=10, activation='softmax')(dense2)\n\nmodel = tf.keras.Model(inputs = inputs, outputs = outputs)\n\nprint(model.summary())","ed19341e":"model.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    x_train,\n    y_train,\n    validation_split=0.8,\n    batch_size=32,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","eb428cc2":"plt.figure(figsize=(16, 10))\n\nepochs_range = range(len(history.history['loss']))\n\nplt.plot(epochs_range, history.history['loss'], label=\"Training Loss\")\nplt.plot(epochs_range, history.history['val_loss'], label=\"Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.title(\"Training and Validation Loss Over Time\")\nplt.show()","fc6f9a95":"def evaluate_model(model, X_test, y_test):\n    \n    y_pred = np.argmax(model.predict(X_test), axis=1)\n    \n    cm = confusion_matrix(y_test, y_pred)\n    clr = classification_report(y_test, y_pred)\n    \n    results = model.evaluate(X_test, y_test, verbose=0)\n    print(\"Test Loss: {:.5f}\".format(results[0]))\n    print(\"Test Accuracy: {:.2f}%\".format(results[1] * 100))\n    \n    plt.figure(figsize=(10, 10))\n    sns.heatmap(cm, annot=True, vmin=0, fmt='g', cmap='Blues', cbar=False)\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"Actual\")\n    plt.title(\"Confusion Matrix\")\n    plt.show()\n    \n    print(\"Classification Report:\\n----------------------\\n\", clr)\n","1d34dc17":"evaluate_model(model, x_test, y_test)","1dca5275":"## Visualizing Images","185ec4bb":"## Results","12019824":"## Preprocessing","33c5a6c6":"## Load Data","8ac91b9b":"## Library","8e234b67":"## Create Model","b18f9531":"## Model Training"}}