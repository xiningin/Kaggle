{"cell_type":{"90aaffe4":"code","ffc42c17":"code","167ab760":"code","37e4ae0c":"code","05c602a4":"code","cc81dffe":"code","c169a5dd":"code","5adf0223":"code","fa33a97e":"code","9ba04883":"code","00d78ede":"code","1d88ea37":"markdown","5a74aea7":"markdown","6b544b5d":"markdown"},"source":{"90aaffe4":"%matplotlib inline\nimport math\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nfrom random import shuffle\nimport seaborn as sns\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import Sequence\nfrom warnings import simplefilter\n\nsimplefilter('ignore')\nplt.style.use('fivethirtyeight')","ffc42c17":"# limit the GPU memory growth\ngpu = tf.config.list_physical_devices('GPU')\nprint(\"Num GPUs Available: \", len(gpu))\nif len(gpu) > 0:\n    tf.config.experimental.set_memory_growth(gpu[0], True)","167ab760":"model_name = 'cnn_v5'\n\ndata_dir = Path('..\/input\/seti-breakthrough-listen\/')\ntrain_data_dir = data_dir \/ 'train'\ntest_data_dir = data_dir \/ 'test'\ntrain_label_file = data_dir \/ 'train_labels.csv'\nsample_file = data_dir \/ 'sample_submission.csv'\n\nbuild_dir = Path('.\/build\/')\noutput_dir = build_dir \/ model_name\noutput_dir.mkdir(parents=True, exist_ok=True)\nval_predict_file = output_dir \/ f'{model_name}.val.txt'\ntst_predict_file = output_dir \/ f'{model_name}.tst.txt'\n\nsubmission_file = 'submission.csv'\n\nid_col = 'id'\ntarget_col = 'target'\nn_epoch = 20\nn_stop = 2\nseed = 42\nbatch_size = 32\ninput_dim = (273, 256, 3)","37e4ae0c":"label = pd.read_csv(train_label_file, index_col=id_col)\nprint(label.shape)\nlabel.head()","05c602a4":"label[target_col].value_counts()","cc81dffe":"sub = pd.read_csv(sample_file, index_col=id_col)\nprint(sub.shape)\nsub.head()","c169a5dd":"def id_to_path(s, train=True):\n    data_dir = train_data_dir if train else test_data_dir\n    return data_dir \/ s[0] \/ f'{s}.npy'","5adf0223":"class SETISequence(Sequence):\n    def __init__(self, ids, y=None, batch_size=1024, shuffle=True):\n        self.ids = ids\n        self.y = y\n        self.is_train = False if y is None else True\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n    \n    def __len__(self):\n        return math.ceil(len(self.ids) \/ self.batch_size)\n    \n    def __getitem__(self, idx):\n        batch_ids = self.ids[idx * self.batch_size: (idx + 1) * self.batch_size]\n        if self.y is not None:\n            batch_y = self.y[idx * self.batch_size: (idx + 1) * self.batch_size]\n        \n        # taking channels 1, 3, and 5 only\n        list_x = [np.load(id_to_path(x, self.is_train))[::2] for x in batch_ids]\n        batch_X = np.transpose(np.stack(list_x), \n                               (0, 2, 3, 1))\n        if self.is_train:\n            return batch_X, batch_y\n        else:\n            return batch_X\n    \n    def on_epoch_end(self):\n        if self.shuffle and self.is_train:\n            ids_y = list(zip(self.ids, self.y))\n            shuffle(ids_y)\n            self.ids, self.y = list(zip(*ids_y))","fa33a97e":"def build_model():\n    inputs = keras.Input(input_dim)\n    \n    x = keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu')(inputs)\n    x = keras.layers.MaxPool2D(pool_size=3)(x)\n    x = keras.layers.BatchNormalization()(x)\n        \n    x = keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu')(x)\n    x = keras.layers.MaxPool2D(pool_size=2)(x)\n    x = keras.layers.BatchNormalization()(x)\n    \n    x = keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu')(x)\n    x = keras.layers.MaxPool2D(pool_size=2)(x)\n    x = keras.layers.BatchNormalization()(x)\n    \n    x = keras.layers.GlobalAveragePooling2D()(x)\n    x = keras.layers.Dense(256, activation='relu')(x)\n    x = keras.layers.Dropout(.3)(x)\n    \n    outputs = keras.layers.Dense(1, activation='sigmoid')(x)\n    model = keras.Model(inputs, outputs)\n    return model","9ba04883":"y = label[target_col].values\nids = label.index.values\nids_tst = sub.index.values\n\nids_trn, ids_val, y_trn, y_val = train_test_split(ids, y, test_size=.2, random_state=seed)\n\ntrn = SETISequence(ids_trn, y_trn, batch_size=batch_size)\nval = SETISequence(ids_val, y_val, batch_size=batch_size)\ntst = SETISequence(ids_tst, batch_size=batch_size)\n\nlr_schedule = keras.optimizers.schedules.ExponentialDecay(\n    .01, decay_steps=10, decay_rate=0.99, staircase=True\n)\nes = keras.callbacks.EarlyStopping(monitor='val_auc', patience=n_stop, restore_best_weights=True,\n                                   mode='max')\n\nmodel = build_model()\nmodel.summary()\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=lr_schedule),\n              loss='binary_crossentropy', metrics=[keras.metrics.AUC()])\nmodel.fit(trn, validation_data=val, epochs=n_epoch, callbacks=[es])\np_tst = model.predict(tst).flatten()","00d78ede":"sub[target_col] = p_tst\nsub.to_csv(submission_file)\nsub.head()","1d88ea37":"# Load Libraries & Data","5a74aea7":"# Submission","6b544b5d":"# Model Definition & Training"}}