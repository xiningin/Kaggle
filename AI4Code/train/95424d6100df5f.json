{"cell_type":{"57b0f2c2":"code","2ff941e7":"code","2005291b":"code","e29ff998":"code","71b1f4a9":"code","561028d5":"code","07128f9d":"code","3bddcc49":"code","e2b36705":"code","c5035e3c":"code","5adf2d7d":"code","b13317f3":"code","9134e610":"code","7085cde0":"code","a47ebc85":"code","e96d4ce4":"code","c17b8fde":"code","fcfcfeb6":"code","bca6f7a9":"code","3ac8dd41":"code","bcbaff1c":"code","9b291509":"code","5bd3692a":"code","d5c5407f":"code","0de87b4b":"code","7db19b7c":"code","7373252d":"code","2d615cfd":"code","7fdc2def":"code","a68514a8":"markdown","e4e94ae0":"markdown","f2eb5076":"markdown","de26b9f3":"markdown","c3188d08":"markdown","a130b259":"markdown","a057fbe1":"markdown","82899598":"markdown","0f2ff07e":"markdown","fb0cbf80":"markdown","450e7cf7":"markdown","51dee8c4":"markdown","b9be518c":"markdown","f5eabee0":"markdown","45b60f04":"markdown","c3273bd4":"markdown","1218c6ee":"markdown","d07c053c":"markdown","38937ae7":"markdown","03a90d14":"markdown","fe69fcaf":"markdown","ffcc99d7":"markdown"},"source":{"57b0f2c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualization\nimport matplotlib.pyplot as plt # data visualization \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2ff941e7":"# Reading and viewing the dataset \nvacc_df = pd.read_csv(\"\/kaggle\/input\/vaccination-data\/vaccination-data(26-08-2021).csv\")\nvacc_df.head()","2005291b":"# Number of observations and variables\nvacc_df.shape","e29ff998":"# Summary information about the dataset\nvacc_df.info()","71b1f4a9":"# Number of missing values by columns in the dataset\nvacc_df.isna().sum()","561028d5":"# Are there any duplicate rows?\nvacc_df.duplicated().sum()","07128f9d":"# Numerical statistics of numerical variables\nvacc_df.describe().T","3bddcc49":"# The WHO_REGION value (OTHER) of Liechtenstein has been set to \"EURO\" so that it does not break the integrity.\nprint(vacc_df[\"WHO_REGION\"].value_counts())\nvacc_df.iloc[117, 2] = \"EURO\"","e2b36705":"# Making the necessary type conversions\nvacc_df[\"WHO_REGION\"] = vacc_df[\"WHO_REGION\"].astype(\"category\")\nvacc_df[\"DATA_SOURCE\"] = vacc_df[\"DATA_SOURCE\"].astype(\"category\")\nvacc_df[\"DATE_UPDATED\"] = pd.to_datetime(vacc_df[\"DATE_UPDATED\"])\nvacc_df[\"FIRST_VACCINE_DATE\"] = pd.to_datetime(vacc_df[\"FIRST_VACCINE_DATE\"])","c5035e3c":"# Country population\nvacc_df[\"COUNTRY_POPULATION\"] = (100 * vacc_df[\"PERSONS_FULLY_VACCINATED\"]) \/ vacc_df[\"PERSONS_FULLY_VACCINATED_PER100\"]","5adf2d7d":"vacc_df.iloc[:, [0, 2, 3, -4, -3, -2, -1]].sort_values(\"NUMBER_VACCINES_TYPES_USED\", ascending = False).head(10)","b13317f3":"pd.DataFrame(vacc_df.WHO_REGION.value_counts())","9134e610":"vacc_df.groupby(\"WHO_REGION\").mean()","7085cde0":"pd.DataFrame(vacc_df.DATA_SOURCE.value_counts())","a47ebc85":"columns = vacc_df.columns[5:11]\ntop_countries = {\"FEATURE\":[], \"COUNTRY\": [], \"VALUE\":[]}\nfor col in columns:\n    top_df = vacc_df.sort_values(col, ascending = False).head(3)[[\"COUNTRY\", col]]\n    for idx in range(3):\n        top_countries[\"FEATURE\"] += [col]\n        top_countries[\"COUNTRY\"] += [top_df.iloc[idx][0]]\n        top_countries[\"VALUE\"] += [top_df.iloc[idx][1]]\ntop_countries = pd.DataFrame(top_countries).set_index([\"FEATURE\",\"COUNTRY\"])\ntop_countries","e96d4ce4":"vacc_df[~vacc_df[\"FIRST_VACCINE_DATE\"].isna()].sort_values(\"FIRST_VACCINE_DATE\").head(5)[[\"COUNTRY\", \"FIRST_VACCINE_DATE\"]]","c17b8fde":"vacc_df[~vacc_df[\"FIRST_VACCINE_DATE\"].isna()].sort_values(\"FIRST_VACCINE_DATE\").tail(5)[[\"COUNTRY\", \"FIRST_VACCINE_DATE\"]]","fcfcfeb6":"# A\u015f\u0131y\u0131 kullanan \u00fclke say\u0131s\u0131\nvacc_dict = {}\nvacc_used_df = vacc_df[~vacc_df.VACCINES_USED.isna()]\nfor i in vacc_used_df.VACCINES_USED:\n    for j in i.split(','):\n        j = j.strip()\n        if j not in vacc_dict:\n            vacc_dict[j] = 1\n        else:\n            vacc_dict[j] += 1\n            \nvacc_used = pd.DataFrame({\"VACCINE_TYPE\": vacc_dict.keys(), \"NUM_OF_COUNTRIES_USING\": vacc_dict.values()}).set_index(\"VACCINE_TYPE\").sort_values(\"NUM_OF_COUNTRIES_USING\", ascending = False)\nvacc_used.head(10)","bca6f7a9":"fig, ax = plt.subplots(figsize = (12,10))\nsns.heatmap(vacc_df.corr())\nplt.show()","3ac8dd41":"fig, ax = plt.subplots(figsize = (12,9))\ng = sns.histplot(x= \"PERSONS_FULLY_VACCINATED_PER100\", data= vacc_df, kde=True, bins = 12)\ng.set_xticks([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]) \ng.set_xticklabels([\"0\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\"])\nplt.show()\n","bcbaff1c":"sns.lmplot(x = \"PERSONS_VACCINATED_1PLUS_DOSE\", y = \"PERSONS_FULLY_VACCINATED\", data = vacc_df, col = \"WHO_REGION\", col_wrap = 3)\nplt.show()","9b291509":"fig, ax = plt.subplots(figsize = (12, 8))\nsns.boxplot(x = \"PERSONS_VACCINATED_1PLUS_DOSE_PER100\", y = \"WHO_REGION\", data = vacc_df, palette = \"pastel\")\nplt.show()","5bd3692a":"fig, ax = plt.subplots(figsize = (12, 8))\nvacc_top_fully_per100 = vacc_df[vacc_df[\"PERSONS_FULLY_VACCINATED_PER100\"] >= 70].sort_values(\"PERSONS_FULLY_VACCINATED_PER100\", ascending = False)\nsns.barplot(x = \"PERSONS_FULLY_VACCINATED_PER100\", y = \"COUNTRY\", data = vacc_top_fully_per100)\nplt.show()","d5c5407f":"vacc_10m_50 = vacc_df[(vacc_df[\"PERSONS_FULLY_VACCINATED_PER100\"] >= 50) & (vacc_df[\"COUNTRY_POPULATION\"] >= 10_000_000)]\nfig, ax = plt.subplots(figsize = (10, 6))\ng = sns.barplot(x = \"PERSONS_FULLY_VACCINATED_PER100\", y = \"COUNTRY\", data = vacc_10m_50.sort_values(\"PERSONS_FULLY_VACCINATED_PER100\", ascending = False))\nplt.show()","0de87b4b":"fig, ax = plt.subplots(figsize = (12, 8))\nvacc_top_total = vacc_df[vacc_df[\"TOTAL_VACCINATIONS\"] >= vacc_df[\"TOTAL_VACCINATIONS\"].quantile(0.96)].sort_values(\"TOTAL_VACCINATIONS\", ascending = False)\nsns.barplot(x = \"TOTAL_VACCINATIONS\", y = \"COUNTRY\", data = vacc_top_total)\nplt.show()","7db19b7c":"vacc_ndays_df = vacc_df[~vacc_df[\"FIRST_VACCINE_DATE\"].isna()].iloc[:, [0, 4, 5, -3]]\nvacc_ndays_df[\"NUM_OF_DAYS_PASSED\"] = vacc_ndays_df[\"DATE_UPDATED\"] - vacc_ndays_df[\"FIRST_VACCINE_DATE\"]\nvacc_ndays_df[\"NUM_OF_DAYS_PASSED\"] = vacc_ndays_df[\"NUM_OF_DAYS_PASSED\"].astype(\"str\").str.strip(\" days\").astype(\"int\")\nvacc_ndays_df[\"NUM_OF_VACC_PER_DAY\"] = round(vacc_ndays_df[\"TOTAL_VACCINATIONS\"] \/ vacc_ndays_df[\"NUM_OF_DAYS_PASSED\"]).astype(\"int\")\nvacc_ndays_df = vacc_ndays_df.sort_values(\"NUM_OF_VACC_PER_DAY\", ascending = False)\nvacc_ndays_top = vacc_ndays_df.head(10)\nfig, ax = plt.subplots(figsize = (12, 8))\nsns.barplot(x = \"NUM_OF_VACC_PER_DAY\", y = \"COUNTRY\", data = vacc_ndays_top, palette = \"Greens_r\")\nplt.show()","7373252d":"vacc_used_mt20 = vacc_used[vacc_used[\"NUM_OF_COUNTRIES_USING\"] > 20]\nfig, ax = plt.subplots(figsize = (12, 9))\nsns.barplot(y = vacc_used_mt20.index, x = \"NUM_OF_COUNTRIES_USING\",data = vacc_used_mt20, palette = \"Blues_r\")\nplt.show()","2d615cfd":"print(vacc_df[vacc_df[\"WHO_REGION\"] == \"EURO\"][\"DATA_SOURCE\"].value_counts())\nfig, ax = plt.subplots(figsize = (9, 5))\nsns.countplot(x = \"DATA_SOURCE\", data = vacc_df, hue = \"WHO_REGION\")\nplt.show()","7fdc2def":"vars_100 = [\"TOTAL_VACCINATIONS_PER100\", \"PERSONS_VACCINATED_1PLUS_DOSE_PER100\", \"PERSONS_FULLY_VACCINATED_PER100\"]\nsns.pairplot(vacc_df, vars= vars_100, hue = \"WHO_REGION\", height = 3.2)\nplt.show()","a68514a8":"### Countries with the most vaccines in 1 day","e4e94ae0":"### Countries with the most total vaccinations","f2eb5076":"### Correlation map ","de26b9f3":"### How many countries use which vaccine?","c3188d08":"### Countries with the highest full dose vaccination rates","a130b259":"### How many countries administered a full dose of vaccine to what percentage of their population?","a057fbe1":"### Relationships between at least 1 field and full dose fields","82899598":"# Visualize","0f2ff07e":"### Number of countries and vaccination averages by region","fb0cbf80":"### Countries with the highest vaccination rates","450e7cf7":"### Countries that use the most different types of vaccines","51dee8c4":"### OWID provides vaccination data for the European region","b9be518c":"### Earliest and latest known vaccination start onset","f5eabee0":"### Proportion of areas with at least 1 dose of vaccination","45b60f04":"# Prepare","c3273bd4":"# Explore","1218c6ee":"### REPORTING vs OWID","d07c053c":"# Acquire","38937ae7":"### Relationships between vaccination values per 100 people","03a90d14":"# Data","fe69fcaf":"### Most used vaccines ","ffcc99d7":"### Countries with a population of more than 10 million that have more than half of their population fully vaccinated"}}