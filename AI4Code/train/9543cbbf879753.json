{"cell_type":{"62cf8239":"code","a30ddddf":"code","41dc3369":"code","a2fc3cb8":"code","048e2cd5":"code","c231e56c":"code","ee57c2be":"code","dbb72a49":"code","51e60c42":"code","a2fc0f27":"code","c92fb73a":"code","ebc21b7c":"code","8145d5c1":"markdown","c34bf873":"markdown","25b3192a":"markdown","b92c3994":"markdown","067766f7":"markdown"},"source":{"62cf8239":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\n#---------\u3053\u3053\u304b\u3089\u5fc5\u9808\uff08\u307b\u307c\u3069\u3093\u306a\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5fc5\u305a\u4f7f\u3046\uff09---------\nimport pandas as pd #\u8868\u5f62\u5f0f\u30c7\u30fc\u30bf\u3092\u6271\u3046\u306e\u306b\u5fc5\u9808\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002Excel\u3092\u8d85\u4fbf\u5229\u306b\u3057\u305f\u3088\u3046\u306a\u3082\u306e\nimport numpy as np #\u30d9\u30af\u30c8\u30eb\u30fb\u884c\u5217\u8a08\u7b97\u3092\u59cb\u3081\u3068\u3057\u305f\u6570\u5024\u8a08\u7b97\u306b\u5fc5\u9808\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nimport matplotlib.pyplot as plt #\u30b0\u30e9\u30d5\u30d7\u30ed\u30c3\u30c8\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n#---------\u3053\u3053\u304b\u3089optional---------\nfrom sklearn.model_selection import KFold #K fold\u4ea4\u5dee\u691c\u8a3c\u7528\nfrom sklearn.metrics import mean_absolute_error #\u672c\u30b3\u30f3\u30da\u306e\u8a55\u4fa1\u6307\u6a19\u8a08\u7b97\u7528\nimport lightgbm as lgb #LightGBM\u7528\nfrom tqdm.notebook import tqdm #for\u30eb\u30fc\u30d7\u306e\u9014\u4e2d\u9032\u6357\u8868\u793a\u7528","a30ddddf":"#\u914d\u5e03\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n#read_csv\u306fcsv\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u95a2\u6570\ntrain_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/train.csv\",index_col=0)\ntest_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/test.csv\",index_col=0)\ndescription_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/description.csv\",index_col=0)\nsample_df=pd.read_csv(\"..\/input\/the-datascience-cup-beta\/sample.csv\",index_col=0)","41dc3369":"pd.options.display.max_columns=100 #jupyter\u3067\u8868\u793a\u3059\u308bpandas\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5217\u6570\u3092100\u5217\u307e\u3067\u306b\u3059\u308b\u3002\u3053\u308c\u3092\u3057\u306a\u3044\u3068\u6b21\u306e\u30bb\u30eb\u3067\u9014\u4e2d\u5217\u304c\u52dd\u624b\u306b\u300c...\u300d\u3068\u7701\u7565\u3055\u308c\u3066\u3057\u307e\u3046","a2fc3cb8":"train_df.head() #train_df\u306e\u5148\u982d5\u884c\u3092\u8868\u793a","048e2cd5":"for data in [train_df,test_df]: #\u540c\u3058\u51e6\u7406\u3092train\u3068test\u3067\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u30eb\u30fc\u30d7\u3067\u307e\u3068\u3081\u308b\n    #\u7a7a\u767d\u3092'within an hour'\u3067\u57cb\u3081\u308b\n    #fillna\u306f\u3042\u308b\u5217\u306e\u6b20\u640d\u5024\u3092\u6307\u5b9a\u3057\u305f\u5024\u3067\u57cb\u3081\u305f\u5217\u3092\u65b0\u898f\u306b\u4f5c\u3063\u3066\u8fd4\u3059\u95a2\u6570\u3002\n    #fillna\u3092\u547c\u3073\u51fa\u3057\u3066\u3082\u5143\u306e\u5217\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u305f\u3081\u3001data[\"host_response_time\"]=\uff5e\u3068\u660e\u793a\u7684\u306b\u4ee3\u5165\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\n    data[\"host_response_time\"]=data[\"host_response_time\"].fillna('within an hour')\n\n    #\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\n    #replace\u306f\u5024\u3068\u30de\u30c3\u30d4\u30f3\u30b0\u5148\u306e\u7d44\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5024\u3092\u7f6e\u304d\u63db\u3048\u308b\u95a2\u6570\u3002\u3053\u306e\u95a2\u6570\u3082\u540c\u69d8\u306b\u5143\u306e\u5217\u3092\u5909\u66f4\u3057\u306a\u3044\u3002\n    data[\"host_response_time\"]=data[\"host_response_time\"].replace(['within a few hours', 'within an hour','within a day','a few days or more'],[0,1,2,3])\n\ntrain_feat_df=train_df.copy()\ntest_feat_df=test_df.copy()","c231e56c":"data=pd.concat([train_feat_df,test_feat_df],sort=False)\ndata.head()","ee57c2be":"#\u5b66\u7fd2\u306b\u4f7f\u3046\u5217\u3002\u6570\u5024\u3057\u304b\u306a\u3044\u5217\u3092\u62bd\u51fa\nfeatures = ['latitude', \n            'longitude', \n            'bedrooms', \n            'beds',\n            'review_scores_rating', \n            'reviews_per_month', \n            'accommodates', \n            'minimum_nights', \n            'maximum_nights', \n            'availability_30',\n            'availability_60', \n            'availability_90', \n            'availability_365',\n            'number_of_reviews',\n            'host_response_time',\n            \"price\"\n]\ndata = data[features]\ndata.head()","dbb72a49":"#nan\u306f\u3068\u308a\u3042\u3048\u305a\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\nfor i in range(data.shape[1]):\n    data.iloc[:,i] =data.iloc[:,i].fillna(data.iloc[:,i].mean())\ndata.head()","51e60c42":"from sklearn.model_selection import train_test_split\n#\u5206\u5272\ntrain_feat_df=data[:len(train_df)]\ntest_feat_df=data[-len(train_df):]\n\ndf_test_x = train_feat_df.drop([\"price\"],axis=1)\nnp_train_data = df_test_x.values\nnp_train_label = train_feat_df[\"price\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(np_train_data, np_train_label, test_size=0.3, random_state=27)","a2fc0f27":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\n\n#models=[RandomForestRegressor(),AdaBoostRegressor(),BaggingRegressor(),SVR(),SVC(),KNeighborsRegressor(),XGBClassifier(),RandomForestClassifier(n_estimators=500,n_jobs=-1,verbose=1,random_state=123),LinearRegression(),Ridge(),Lasso()]\n# #model_names=['RandomForestRegressor','AdaBoostRegressor','BaggingRegressor','SVR','KNeighborsRegressor',\"XGBClassifier\",\"RandomForestClassifier\",\"LinearRegression\",\"Ridge\",\"Lasso\"]\nmodels=[RandomForestRegressor(),AdaBoostRegressor(),BaggingRegressor(),SVR(),KNeighborsRegressor(),]\nmodel_names=['RandomForestRegressor','AdaBoostRegressor','BaggingRegressor','SVR','KNeighborsRegressor']\n\ndf_test_x = test_feat_df.drop([\"price\"],axis=1)\nnp_test_data = df_test_x.values\nrmsle=[]\nd={}\nfor model in range (len(models)):\n    clf=models[model]\n    clf.fit(X_train,y_train)\n    test_pred=clf.predict(X_test)\n    rmsle_div = mean_absolute_error(y_test, test_pred)\n    rmsle.append(rmsle_div)\n    preds_Submit = clf.predict(np_test_data)\n    sub_df = []\n    sub_df = pd.DataFrame({\"index\":test_feat_df.index,\"price\":preds_Submit})\n    sub_df.to_csv(\"submission{}.csv\".format(model_names[model]),index=False)\n    \nd={'Modelling Algo':model_names,'RMSLE':rmsle}   \nprint(d)","c92fb73a":"import plotly.graph_objects as go\n#dfs = {\"sub_df1\" : sub_df1, \"sub_df2\": sub_df2, \"Finalsubmission\" : Finalsubmission}\n\nsub_df_BaggingRegressor = pd.read_csv(\".\/submissionBaggingRegressor.csv\")\nsub_df_KNeighborsRegressor = pd.read_csv(\".\/submissionKNeighborsRegressor.csv\")\nsub_df_AdaBoostRegressor = pd.read_csv(\".\/submissionAdaBoostRegressor.csv\")\nsub_df_RandomForestRegressor = pd.read_csv(\".\/submissionRandomForestRegressor.csv\")\nsub_df_SVR = pd.read_csv(\".\/submissionSVR.csv\")\n#sub_df_SymbolicRegressor = pd.read_csv(\".\/submission_SymbolicRegressor.csv\")\n\ndfs = {\"sub_df_BaggingRegressor\" : sub_df_BaggingRegressor,\n       \"sub_df_KNeighborsRegressor\" : sub_df_KNeighborsRegressor,\n       \"sub_df_AdaBoostRegressor\" : sub_df_AdaBoostRegressor,\n       \"sub_df_RandomForestRegressor\" : sub_df_RandomForestRegressor,\n       \"sub_df_SVR\" : sub_df_SVR,\n       }#\"sub_df_SymbolicRegressor\" : sub_df_SymbolicRegressor,\n\n# plot the data\nfig = go.Figure()\nfor i in dfs:\n    fig = fig.add_trace(go.Scatter(x = dfs[i].index,\n                                   y = dfs[i][\"price\"], \n                                   mode=\"markers\",\n                                   name = i))\n    fig = fig.add_trace(\n        go.Scatter(\n            x=[0, 1010],\n            y=[0.5, 0.5],\n            mode=\"lines\",\n            line=go.scatter.Line(color=\"gray\"),\n            showlegend=False)\n    )\n\nfig.update_layout(\n    width = 1000,\n    height = 700\n)\nfig.show()","ebc21b7c":"Finalsubmission = sub_df_BaggingRegressor.copy()\nFinalsubmission[\"price\"] = 0*sub_df_BaggingRegressor.values\\\n                            +0.5*sub_df_KNeighborsRegressor.values\\\n                            +0*sub_df_AdaBoostRegressor.values\\\n                            +0.5*sub_df_RandomForestRegressor.values\\\n                            +0*sub_df_SVR.values\n\nFinalsubmission.to_csv(\"submission.csv\",index=False)\nFinalsubmission","8145d5c1":"# \u5b66\u7fd2\u30fb\u8a55\u4fa1","c34bf873":"RandomForestRegressor,KNeightRegressor\u3042\u305f\u308a\u304c\u3053\u306e\u306a\u304b\u3067\u306f\u6bd4\u8f03\u7684\u826f\u3044\u30b9\u30b3\u30a2","25b3192a":"\u4e26\u3079\u3066\u307f\u308b\u3068\u3001\u7d50\u69cb\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u5dee\u304c\u3042\u308b\u3002(SVR\u306f\u898b\u305f\u611f\u3058\u3001\u3053\u306e\u7279\u5fb4\u91cf\u306e\u4f5c\u308a\u65b9\u3060\u3068\u5168\u7136\u3060\u3081)\n\u30e2\u30c7\u30eb\u306e\u6027\u8cea\u3092\u3057\u3063\u304b\u308a\u7406\u89e3\u3067\u304d\u308c\u3070\u3001\u826f\u3044\u3068\u3053\u53d6\u308a\u306e\u30e2\u30c7\u30eb\u304c\u4f5c\u308c\u308b\u304b\u3082\n\u8ab0\u304b\u8a73\u3057\u3044\u4eba\u6559\u3048\u3066\u4e0b\u3055\u3044ww","b92c3994":"## \u53ef\u8996\u5316","067766f7":"# \u3068\u308a\u3042\u3048\u305a\u3044\u308d\u3044\u308d\u306a\u30e2\u30c7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\n### \u5185\u5bb9\n* LightGBM\u4ee5\u5916\u306e\u30e2\u30c7\u30eb\u3082\u8a66\u3057\u3066\u307f\u308b\n* \u5404\u30e2\u30c7\u30eb\u306e\u7279\u5fb4\u306f\u52d5\u304b\u3057\u3066\u307f\u3066\u8003\u3048\u308b\n*\u3010\u904b\u55b6\u3011\u30b3\u30fc\u30c9\u306e\u7279\u5fb4\u91cf\u3092\u4f7f\u308f\u305b\u3066\u8cb0\u3044\u307e\u3059"}}