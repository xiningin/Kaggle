{"cell_type":{"84f2c63a":"code","712bf202":"code","a6cae4ff":"code","24d525ac":"code","3a839e16":"code","07e9bc87":"code","81da8ba5":"code","65057fbc":"code","3ecfde78":"code","6baafa94":"code","1da55cc2":"code","05bf6ab8":"code","aec33353":"code","07c19923":"code","26a4d277":"code","cd515113":"code","01452dad":"code","cde49202":"code","d85a1a62":"code","5b6b08e5":"code","5ddfbd41":"code","e25998a0":"code","3835f214":"markdown","04b32019":"markdown","9b0d79e3":"markdown"},"source":{"84f2c63a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random as rd # generating random numbers\nimport datetime # manipulating date formats\nfrom sklearn.metrics import mean_squared_error\nfrom numpy import sqrt\n\nimport matplotlib.pyplot as plt # basic plotting\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10, 6\nimport seaborn as sns # for prettier plots\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.ar_model import AR\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n#from statsmodels.tsa.statespace.varmax import VARMAX\n\nfrom pandas.plotting import autocorrelation_plot\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scsor \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","712bf202":"# Load data\n\nsales=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nitem_cat=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitem=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nshops=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\nsubmit=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\n\nprint('sales ' , sales.shape)\nprint('item_cat ' , item_cat.shape)\nprint('item ' , item.shape)\nprint('shops ' , shops.shape)\n","a6cae4ff":"# formatting the date column from object to date time\n\nprint(sales.info())\nsales.date=sales.date.apply(lambda x:datetime.datetime.strptime(x, '%d.%m.%Y'))\nprint(sales.info())","24d525ac":"# Group by total monthly sales ...34 months\n\nts=sales.groupby([\"date_block_num\"])[\"item_cnt_day\"].sum()\nts.astype('float')\nplt.figure(figsize=(10,6))\nplt.title('Total sales of company')\nplt.xlabel('Months')\nplt.ylabel('Sales')\nindexedDataset = pd.DataFrame(ts)\n#indexedDataset.head()\nplt.plot(indexedDataset)\nplt.show()","3a839e16":"ts","07e9bc87":"MyWindow = 3\n\n#Determine rolling statistics\nrolmean = indexedDataset.rolling(window=MyWindow).mean() #window size 12 denotes 12 months, giving rolling mean at yearly level\nrolstd = indexedDataset.rolling(window=MyWindow).std()\n\n#Plot rolling statistics\norig = plt.plot(indexedDataset, color='blue', label='Original')\nmean = plt.plot(rolmean, color='red', label='Rolling Mean')\nstd = plt.plot(rolstd, color='black', label='Rolling Std')\nplt.legend(loc='best')\nplt.title('Rolling Mean & Standard Deviation')\nplt.show(block=False)","81da8ba5":"# decompose into trend, seasonality and residuals\nres = sm.tsa.seasonal_decompose(indexedDataset.values,freq=MyWindow,model=\"additive\")\n#plt.figure(figsize=(16,12))\nfig = res.plot()","65057fbc":"#Perform Augmented Dickey\u2013Fuller test for stationarity\n\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(indexedDataset['item_cnt_day'], autolag='AIC')\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","3ecfde78":"dataAR = list(indexedDataset.item_cnt_day.values)\nlen(dataAR)","6baafa94":"# AR model \n\nmodel = AR(dataAR)\nmodel_fit = model.fit()\n# make prediction\nyhat = model_fit.predict(12, len(dataAR)+ 18) # predict N ahead of the last one\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('AR model')\nplt.show()","1da55cc2":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('AR RMSE: %.1f' % rmse)","05bf6ab8":"# Initial approximation of parameters using Autocorrelation and Partial Autocorrelation Plots\n# Get p and q for ARIMA\n\nplt.figure(figsize=(15,10))\nax = plt.subplot(211)\nsm.graphics.tsa.plot_acf(dataAR, lags=12, ax=ax)\nax = plt.subplot(212)\nsm.graphics.tsa.plot_pacf(dataAR, lags=12, ax=ax)\n#plt.tight_layout()\nplt.show()","aec33353":"# ARIMA model\n\nmodel = ARIMA(dataAR, order=(2, 1, 1))\nmodel_fit = model.fit(disp=False)\n# make prediction\nyhat = model_fit.predict(1, len(dataAR)+6, typ='levels')\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('ARIMA model')\nplt.show()","07c19923":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('ARIMA RMSE: %.1f' % rmse)","26a4d277":"# SARIMA\n\nmodel = SARIMAX(dataAR, order=(2, 1, 1), seasonal_order=(2,1,1,3))\nmodel_fit = model.fit(disp=False)\n# make prediction\nyhat = model_fit.predict(1, len(dataAR)+6)\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('SARIMAX model')\nplt.show()","cd515113":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('SARIMA RMSE: %.1f' % rmse)","01452dad":"# Find SARIMA order that minimizes AIC by brute force\nmax_p = 2\nmax_q = 2\nmax_d = 1\nmax_sp = 1\nmax_sq = 1\nmax_sd = 1\n\npattern = max_p*(max_q + 1)*(max_d + 1)*(max_sp + 1)*(max_sq + 1)*(max_sd + 1)\n\nmodelSelection = pd.DataFrame(index=range(pattern), columns=[\"model\", \"aic\"])\npattern","cde49202":"import statsmodels.api as sm\n\n# Automatic SARIMA selection\nnum = 0\n\nfor p in range(1, max_p + 1):\n    for d in range(0, max_d + 1):\n        for q in range(0, max_q + 1):\n            for sp in range(0, max_sp + 1):\n                for sd in range(0, max_sd + 1):\n                    for sq in range(0, max_sq + 1):\n                        sarima = sm.tsa.SARIMAX(\n                            ts, order=(p,d,q), \n                            seasonal_order=(sp,sd,sq,4), \n                            enforce_stationarity = False, \n                            enforce_invertibility = False\n                        ).fit()\n                        modelSelection.iloc[num][\"model\"] = \"order=(\" + str(p) + \",\"+ str(d) + \",\"+ str(q) + \"), season=(\"+ str(sp) + \",\"+ str(sd) + \",\" + str(sq) + \")\"\n                        modelSelection.iloc[num][\"aic\"] = sarima.aic\n                        num = num + 1\n\n# Check the results for each model\nprint(modelSelection)\n\n# AIC smallest model\nprint(modelSelection[modelSelection.aic == min(modelSelection.aic)])","d85a1a62":"# SARIMA v2\n\nmodel = SARIMAX(dataAR, order=(2,1,2), seasonal_order=(0,1,1,4))\nmodel_fit = model.fit(disp=False)\n# make prediction\nyhat = model_fit.predict(1, len(dataAR)+6)\n\ndataList = list(dataAR)\nyhatList = list(yhat)\n\nplt.style.use('seaborn-poster')\nplt.figure()\nplt.plot(dataList, label='Original')\nplt.plot(yhatList, ls='--', label='Predicted')\nplt.legend(loc='best')\nplt.title('SARIMAX model v2')\nplt.show()","5b6b08e5":"rmse = sqrt(mean_squared_error(dataList,yhatList[0:34]))\nprint('SARIMA RMSE: %.1f' % rmse)","5ddfbd41":"yhat","e25998a0":"#StackingSubmission = pd.DataFrame({'yhat': yhat})\n#StackingSubmission = pd.DataFrame({\"ID\": yhat.index, \"item_cnt_month\": yhat})\n#StackingSubmission.to_csv(\"StackingSubmission.csv\", index=False)\nsubmit=pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nsubmit.to_csv(\"submit.csv\", index=False)","3835f214":" # ARIMA","04b32019":" # SARIMA","9b0d79e3":"Theoretically from the above charts, p = 4 and q = 7 ...supposedly, but these params do NOT work with SARIMA..."}}