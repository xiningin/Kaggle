{"cell_type":{"3abf3edb":"code","e6c806ac":"code","fb0ce0a2":"code","809f77b5":"code","2b6c0142":"code","16ee73d4":"code","11dd6f0a":"code","d81cfa05":"code","ee83bbc4":"code","f1252655":"code","9a4a0460":"code","388672d0":"code","a0fcafe5":"code","5b047f0c":"code","f18df751":"code","66fb3e7e":"code","5414ab13":"code","b39eb938":"code","f1b1f9af":"code","266ea0cc":"code","3dc1bda5":"code","aab65cc6":"code","2a298b5c":"code","fba2c9b3":"code","6c31c5e0":"code","78e8bcff":"code","ad31d07b":"code","836c6a85":"code","f00ef8c0":"code","a83905bd":"code","e6072d09":"code","3d9a9999":"markdown","c90eb80c":"markdown","e62db23f":"markdown"},"source":{"3abf3edb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e6c806ac":"df = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv\")","fb0ce0a2":"df","809f77b5":"df.isnull().sum()","2b6c0142":"### Original Amount Of Data\n\nlen(df)","16ee73d4":"df","11dd6f0a":"df.dropna(inplace = True)","d81cfa05":"### Amount of Data After Removing Null Values\n\nlen(df)","ee83bbc4":"df.isnull().sum()","f1252655":"df.info()","9a4a0460":"### Removing Units and converting columns to float\n\ndf['mileage'] = df['mileage'].str.slice(0,-5).astype(float)\ndf['engine'] = df['engine'].str.slice(0,-3).astype(float)\ndf['max_power'] = df['max_power'].str.slice(0,-4).astype(float)\ndf.info()","388672d0":"### Converting Data types to float \ndf[['selling_price','km_driven','year']]= df[['selling_price','km_driven','year']].astype(float)\n\n### Removing torque column\ndf.drop('torque', axis = 1,inplace = True)\ndf.drop('name', axis = 1,inplace = True)","a0fcafe5":"df.head(10)","5b047f0c":"from sklearn.preprocessing import LabelEncoder\n\ncateg = ['fuel','seller_type','transmission','owner']\n\n# Encode Categorical Columns\nle = LabelEncoder()\ndf[categ] = df[categ].apply(le.fit_transform)","f18df751":"df.head(15)","66fb3e7e":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nscal_col = ['year','selling_price','km_driven','fuel','transmission','owner','mileage','engine','max_power','seats']\n\ndf[scal_col] = scaler.fit_transform(df[scal_col])","5414ab13":"df","b39eb938":"Y = df['selling_price'].to_numpy()\n\ndf.drop('selling_price' , axis = 1 , inplace = True)\n\nX = df.to_numpy()","f1b1f9af":"print(X.shape)\nprint(Y.shape)","266ea0cc":"from sklearn.model_selection import train_test_split\n\nX_train , X_test , y_train , y_test = train_test_split(X,Y, test_size = 0.2, random_state = 40)","3dc1bda5":"m_test = len(y_test)\ny_test = y_test.reshape(m_test , 1)\n\nm_train = len(y_train)\ny_train = y_train.reshape(m_train , 1)","aab65cc6":"def cost(theta,X,y,lamb):\n    m = len(y)\n    n = len(theta)\n    y = y.reshape(m,1)\n    theta = theta.reshape(n,1)\n    J =  np.sum( (np.dot(X,theta) - y)**2 )\/(2*m)\n    J = J + ( lamb*np.sum( (theta[1:,:]**2) ) )\/(2*m)\n    \n    return J\n\ndef grad (theta,X,y,lamb):\n    n = len(theta)\n    m = len(y)\n    y = y.reshape(m,1)\n    theta = theta.reshape(n,1)\n    grad = np.dot(X.T,( np.dot(X,theta) - y ))\/m\n    grad[1:,:] = grad[1:,:] + (lamb\/m)*theta[1:,:]\n    return grad","2a298b5c":"X_train = np.concatenate((np.ones((m_train,1)), X_train ), axis = 1 )\nX_test = np.concatenate((np.ones((m_test,1)), X_test ), axis = 1 )","fba2c9b3":"import scipy.optimize as op\ntheta = np.zeros((X_train.shape[1],1) )\n\nlamb = 0\n# result = op.fmin_tnc(cost , x0 = theta,args = (X_train, y_train , lamb) , fprime = grad )\n# finaltheta = result[0].reshape((-1,1))\nresult = op.fmin_tnc(cost, x0=theta, args=(X_train,y_train, lamb),fprime=grad)\nfinaltheta = result[0].reshape((-1,1))","6c31c5e0":"X_test.shape","78e8bcff":"finaltheta.shape\n","ad31d07b":"y_pred = np.dot(X_test,finaltheta)\n","836c6a85":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","f00ef8c0":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, y_pred)","a83905bd":"mean_squared_error(y_train, np.dot(X_train,finaltheta))","e6072d09":"r2_score(y_train, np.dot(X_train,finaltheta))","3d9a9999":"# IMPORTING DATA","c90eb80c":"**Deleting missing data**","e62db23f":"**Checking for missing data**"}}