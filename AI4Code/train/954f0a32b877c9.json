{"cell_type":{"d2a739ab":"code","8d094806":"code","4d6c4259":"code","1a93a503":"code","da61aad2":"code","9dfbe0a0":"code","7fec570a":"code","e264fda8":"code","572dd801":"code","9fc5e432":"code","014a256a":"code","72197f7f":"code","add4b187":"code","0c2b6600":"code","16a25b90":"code","0aa477f6":"code","808cbd7c":"code","5b666abb":"code","490876dd":"code","d7f3d4d2":"code","00323fca":"code","e084fe5d":"code","de433f0d":"code","f8db6b57":"code","c7da5fe5":"code","045abd77":"code","f31b3f0d":"code","de92afb2":"code","271168bb":"code","0596ae42":"code","9a8c509d":"code","5da5c5e1":"code","25ff6dc6":"markdown","bc754ba4":"markdown","90ed0b63":"markdown","93a13384":"markdown","60b21398":"markdown","18f07db9":"markdown","7ba39d65":"markdown","191d2ce1":"markdown","958d2436":"markdown","f9064205":"markdown","fcc98776":"markdown","8b9b472b":"markdown","ee181dd7":"markdown","a842c2d5":"markdown","e989f10e":"markdown","d5b5359f":"markdown","4b98b669":"markdown","f3e6b12a":"markdown","858324fd":"markdown","931225da":"markdown","ee490df7":"markdown","a3d695d3":"markdown","bf5d03eb":"markdown","4e70b249":"markdown","87b094d3":"markdown","e8c0aa6c":"markdown","bd4386da":"markdown","20f1a1a9":"markdown","7e68e1ea":"markdown","289d97d3":"markdown","0d2d2681":"markdown","78cdb4c5":"markdown","e1127269":"markdown","c7dcc6f6":"markdown"},"source":{"d2a739ab":"def convertToF(celsius):\n    fahrenheit = (9\/5) * celsius + 32\n    return fahrenheit","8d094806":"celsiusTemps = [0, -30, 10, 20, 30]\nfor temp in celsiusTemps:\n    print(\"Converting {0}C to Fahrenheit:\".format(temp), convertToF(temp))","4d6c4259":"def reverseString(str):\n    return str[::-1]","1a93a503":"strings = [\"hello\", \"Howdy\", \"Greetings from Earth\"]\nfor string in strings:\n    print(\"Reversed string:\", reverseString(string))","da61aad2":"def recursive_factorialize(num):\n    if num == 0:\n        return 1\n    else:\n        return num * recursive_factorialize(num - 1)\n    \ndef iterative_factorialize(num):\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial","9dfbe0a0":"factorials = [5, 10, 20, 0]\nfor num in factorials:\n    print(\"Recursive factorial of\", num, \"=\", recursive_factorialize(num))\n    print(\"Iterative factorial of\", num, \"=\", iterative_factorialize(num))","7fec570a":"def findLongestWordLength(str):\n    words = str.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest","e264fda8":"print(findLongestWordLength(\"The quick brown fox jumped over the lazy dog\"))\nprint(findLongestWordLength(\"May the force be with you\"))\nprint(findLongestWordLength(\"Google do a barrel roll\"))\nprint(findLongestWordLength(\"What is the average airspeed velocity of an unladen swallow\"))\nprint(findLongestWordLength(\"What if we try a super-long word such as otorhinolaryngology\"))","572dd801":"def largestOfFour(arr):\n    largest = []\n    for ele in arr:\n        largest.append(max(ele))\n    return largest","9fc5e432":"print(largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]))\nprint(largestOfFour([[4, 9, 1, 3], [13, 35, 18, 26], [32, 35, 97, 39], [1000000, 1001, 857, 1]]))\nprint(largestOfFour([[17, 23, 25, 12], [25, 7, 34, 48], [4, -10, 18, 21], [-72, -3, -17, -10]]))","014a256a":"def confirmEnding(s, target):\n    targetLength = len(target)\n    strEnding = s[len(s)-targetLength:]\n    return strEnding == target","72197f7f":"print(confirmEnding(\"Bastian\", \"n\"))\nprint(confirmEnding(\"Congratulation\", \"on\"))\nprint(confirmEnding(\"Connor\", \"n\"))\nprint(confirmEnding(\"Walking on water and developing software from a specification are easy if both are frozen\", \"specification\"))\nprint(confirmEnding(\"He has to give me a new name\", \"name\"))\nprint(confirmEnding(\"Open sesame\", \"same\"))\nprint(confirmEnding(\"Open sesame\", \"pen\"))\nprint(confirmEnding(\"Open sesame\", \"game\"))\nprint(confirmEnding(\"If you want to save our world, you must hurry. We dont know how much longer we can withstand the nothing\", \"mountain\"))\nprint(confirmEnding(\"Abstraction\", \"action\"))","add4b187":"def repeatStringNumTimes(s, num):\n    if (num < 0):\n        return \"\"\n    else:\n        return s*num","0c2b6600":"print(repeatStringNumTimes(\"*\", 3))\nprint(repeatStringNumTimes(\"abc\", 3))\nprint(repeatStringNumTimes(\"abc\", 4))\nprint(repeatStringNumTimes(\"abc\", 1))\nprint(repeatStringNumTimes(\"*\", 8))\nprint(repeatStringNumTimes(\"abc\", -2))","16a25b90":"def truncateString(s, maxLength):\n    if maxLength >= len(s):\n        return s\n    else:\n        return s[0:maxLength] + \"...\"","0aa477f6":"print(truncateString(\"A-tisket a-tasket A green and yellow basket\", 8))\nprint(truncateString(\"Peter Piper picked a peck of pickled peppers\", 11))\nprint(truncateString(\"A-tisket a-tasket A green and yellow basket\", len(\"A-tisket a-tasket A green and yellow basket\")))\nprint(truncateString(\"A-tisket a-tasket A green and yellow basket\", len(\"A-tisket a-tasket A green and yellow basket\")+2))\nprint(truncateString(\"A-\", 1))\nprint(truncateString(\"Absolutely Longer\", 2))","808cbd7c":"def findElement(arr, func):\n    for ele in arr:\n        if func(ele):\n            return ele","5b666abb":"print(findElement([1, 3, 5, 8, 9, 10], lambda x: x%2 == 0))\nprint(findElement([1, 3, 5, 9], lambda x: x%2 == 0))","490876dd":"def booWho(boo):\n    return type(boo) == bool","d7f3d4d2":"booWhoCheck = [True, False, [1, 2, 3], [1, 2, 3].copy, {\"a\":1}, 1, \"a\", \"True\", \"False\"]\nfor boo in booWhoCheck:\n    print(booWho(boo))","00323fca":"def titleCase(string):\n    words = string.split()\n    titleCased = []\n    for word in words:\n        titleCased.append(word[0].upper() + word[1:].lower())\n    return \" \".join(titleCased)","e084fe5d":"titleCaseCheck = [\"I'm a little tea pot\", \"sHoRt AnD sToUt\", \"HERE IS MY HANDLE AND HERE IS MY SPOUT\"]\nfor phrase in titleCaseCheck:\n    print(titleCase(phrase))","de433f0d":"def frankenSplice(arr1, arr2, n):\n    spliced = arr2[0:n]\n    spliced.extend(arr1)\n    spliced.extend(arr2[n:])\n    return spliced","f8db6b57":"frankenSpliceCheck = [([1, 2, 3], [4, 5], 1), ([1, 2], [\"a\", \"b\"], 1), ([\"claw\", \"tentacle\"], [\"head\", \"shoulders\", \"knees\", \"toes\"], 2)]\nfor check in frankenSpliceCheck:\n    print(frankenSplice(check[0], check[1], check[2]))\n    print(\"Checking for mutations:\", check[0], check[1])","c7da5fe5":"def bouncer(arr):\n    return [item for item in arr if bool(item) == True]","045abd77":"bouncerCheck = [[7, \"ate\", \"\", False, 9], [\"a\", \"b\", \"c\"], [False, None, 0, (), \"\"],\n               [1, None, 0j, 2, None]]\nfor check in bouncerCheck:\n    print(\"Before bouncing:\", check)\n    print(\"After bouncing:\", bouncer(check))","f31b3f0d":"def getIndexToIns(arr, num):\n    appended_arr = arr.copy()\n    appended_arr.append(num)\n    appended_arr.sort()\n    return appended_arr.index(num)","de92afb2":"indexCheck = [([10, 20, 30, 40, 50], 35), ([10, 20, 30, 40, 50], 30),\n             ([40, 60], 50), ([3, 10, 5], 3), ([5, 3, 20, 3], 5),\n             ([2, 20, 10], 19), ([2, 5, 10], 15), ([], 1)]\nfor check in indexCheck:\n    print(\"Insertion Index:\", getIndexToIns(check[0], check[1]))","271168bb":"def mutation(arr):\n    str_1, str_2 = arr[0].lower(), arr[1].lower()\n    for char in str_2:\n        if char not in str_1:\n            return False\n    return True","0596ae42":"mutationCheck = [[\"hello\", \"hey\"], [\"hello\", \"Hello\"], [\"zyxwvutsrqponmlkjihgfedcba\", \"qrstu\"],\n                [\"Mary\", \"Army\"], [\"Mary\", \"Aarmy\"], [\"Alien\", \"line\"], [\"floor\", \"for\"],\n                [\"hello\", \"neo\"], [\"voodoo\", \"no\"]]\nfor check in mutationCheck:\n    print(check, mutation(check))","9a8c509d":"def chunkArrayIntoGroups(arr, size):\n    chunkedArray = []\n    for i in range(0, len(arr), size):\n        chunkedArray.append(arr[i:i + size])\n    return chunkedArray","5da5c5e1":"chunkCheck = [([\"a\", \"b\", \"c\", \"d\"], 2), ([0, 1, 2, 3, 4, 5], 3), ([0, 1, 2, 3, 4, 5], 2),\n             ([0, 1, 2, 3, 4, 5], 4), ([0, 1, 2, 3, 4, 5, 6], 3), ([0, 1, 2, 3, 4, 5, 6, 7, 8], 4),\n             ([0, 1, 2, 3, 4, 5, 6, 7, 8], 2)]\nfor check in chunkCheck:\n    print(chunkArrayIntoGroups(check[0], check[1]))","25ff6dc6":"## Repeat a string","bc754ba4":"Check if a string (first argument `s`) ends with the given target string (second argument, `target`). Note that the built-in string method `str.endswith()` performs the same function.","90ed0b63":"## Slice and splice","93a13384":"Remove all falsy values from an array. In Python, the following built-in objects are considered false.\n- constants defined to be false: `None` and `False`\n- zero of any numeric type: `0`, `0.0`, `0j`, `Decimal(0)`, `Fraction(0, 1)`\n- empty sequences and collections: `''`, `()`, `[]`, `{}`, `set()`, `range(0)`","60b21398":"Return the length of the longest word in the provided sentence.","18f07db9":"## Confirm the ending","7ba39d65":"Return an array consisting of the largest number from each provided sub-array.","191d2ce1":"Write a function that splits an array (first argument) into groups the length of `size` (second argument) and returns them as a two-dimensional array. Note that you should not assume that the length of the starting array is evenly divisible by `size`.","958d2436":"## Convert Celsius to Fahrenheit","f9064205":"## Mutations","fcc98776":"## Reverse a string","8b9b472b":"Return true if the string in the first element of array contains all of the letters of the string in the second element of the array, ignoring case.","ee181dd7":"The algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times $\\frac{9}{5}$, plus $32$.\n\nYou are given a variable `celsisus` representing a temperature in Celsius. Use the variable `fahrenheit` already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature.","a842c2d5":"Check if a value is classified as a boolean primitive (`True` or `False`). Return true if the value is a boolean primitive and return false otherwise.","e989f10e":"Given two arrays, `arr1` and `arr2`, and an index `n`, copy each element of `arr1` into `arr2` in order. Begin by inserting elements at index `n` of the second array. Return the resulting array. The input arrays should remain the same after the function runs.","d5b5359f":"# Basic Algorithm Scripting","4b98b669":"Repeat a given string `s` (first argument) for `num` times (second argument). Return an empty string if `num` is not a positive number.","f3e6b12a":"## Chunky monkey","858324fd":"## Finders keepers","931225da":"Create a function that looks through an array (first argument) and returns the first element in the array that passes a truth test (second argument). If no element passes the test, return undefined (i.e. don't return anything).","ee490df7":"## Truncate a string","a3d695d3":"## Where do I belong","bf5d03eb":"Return the factorial of the provided integer.\n\nRecall that given an integer $n$, we define $n! = n \\times (n - 1) \\times \\cdots \\times 2 \\times 1$. By convention, we define $0! = 1$.","4e70b249":"## Factorialize a number","87b094d3":"## Boo who","e8c0aa6c":"Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a `...` ending.","bd4386da":"Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case. For the purpose of this exercise, you should also capitalize connecting words such as \"the\" and \"of\".","20f1a1a9":"Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.","7e68e1ea":"## Find the longest word in a string","289d97d3":"## Falsy bouncer","0d2d2681":"In this notebook, I will work through the basic algorithm scripting challenges from freeCodeCamp. On freeCodeCamp, the challenges are done in JavaScript, so to get some additional Python practice I will do them here in Python.","78cdb4c5":"Reverse the provided string.","e1127269":"## Title case a sentence","c7dcc6f6":"## Return the largest numbers in arrays"}}