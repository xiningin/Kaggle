{"cell_type":{"7afb49cd":"code","7829d4ad":"code","71496256":"code","990b3a6f":"code","beb0024f":"code","278b9b29":"code","5ee60b42":"code","2d5fbec3":"code","b3fea570":"code","e55817ef":"code","c03e2901":"code","2bcf86da":"code","1e020232":"code","5b90d149":"code","ccd500e7":"code","ebd9066e":"code","ed511bba":"code","c8da6275":"code","40d3744a":"code","1dbf39f4":"code","694336e3":"code","cf53e61b":"code","0245c928":"code","4172d113":"code","5da6f0f1":"code","680078b0":"markdown","33e1e722":"markdown","a56feeb9":"markdown","14ac8d3a":"markdown","5dc8c7fd":"markdown","6813fc8d":"markdown","1e1d80bd":"markdown","63321186":"markdown","7ff67da3":"markdown","3e868505":"markdown","ae801241":"markdown","f3e1e35a":"markdown","718480cd":"markdown","617843c2":"markdown","163c19fe":"markdown","25521384":"markdown","94501f61":"markdown","356aba35":"markdown","a9dbada6":"markdown","e022a0fb":"markdown","c3df96f2":"markdown","55e24d1b":"markdown","8325e856":"markdown"},"source":{"7afb49cd":"#Importing libraries\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","7829d4ad":"#loading train data\ntrain = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")","71496256":"#check for missing values\ntrain.isna().sum()","990b3a6f":"#impute missing values in Item_Weight using mean\ntrain.Item_Weight.fillna(train.Item_Weight.mean(), inplace=True)\ntrain.Item_Weight.isna().sum()","beb0024f":"#impute missing values in Outlet_Size using mode\ntrain.Outlet_Size.fillna(train.Outlet_Size.mode()[0], inplace=True)\ntrain.Outlet_Size.isna().sum()","278b9b29":"#checking categorical variables in the data\ntrain.dtypes","5ee60b42":"import category_encoders as ce\n\n#create an object of OneHotEncorder\nOHE = ce.OneHotEncoder(cols=['Item_Fat_Content',\n                            'Item_Type',\n                            'Outlet_Identifier',\n                            'Outlet_Size',\n                            'Outlet_Location_Type',\n                            'Outlet_Type'],use_cat_names=True)\n\n#encode the variables\ntrain = OHE.fit_transform(train)","2d5fbec3":"train.head()","b3fea570":"from sklearn.preprocessing import StandardScaler\n#create an object of the StandardScaler\nscaler = StandardScaler()\n\n#fit with the Item_MRP\nscaler.fit(np.array(train.Item_MRP).reshape(-1,1))\n\n#transform the data\ntrain.Item_MRP = scaler.transform(np.array(train.Item_MRP).reshape(-1,1))","e55817ef":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n#seperate the independent and target variable\ntrain_X = train.drop(columns=['Item_Identifier', 'Item_Outlet_Sales'])\ntrain_Y = train['Item_Outlet_Sales']\n\n#split the data\ntrain_x, valid_x, train_y, valid_y = train_test_split(train_X, train_Y, test_size=0.25) \n\n#shape of train test splits\ntrain_x.shape, valid_x.shape, train_y.shape, valid_y.shape","c03e2901":"#LinearRegression\nLR = LinearRegression()\n\n#fit the model\nLR.fit(train_x, train_y)\n\n#predict the target on train and validation data\ntrain_pred = LR.predict(train_x)\nvalid_pred = LR.predict(valid_x)\n\n# RMSE on train and validation data\nprint('RMSE on train data: ', mean_squared_error(train_y, train_pred)**(0.5))\nprint('RMSe on validation data: ', mean_squared_error(valid_y, valid_pred)**(0.5))","2bcf86da":"#RandomForestRegressor\nRFR = RandomForestRegressor(max_depth=10)\n\n#fitting the model\nRFR.fit(train_x, train_y)\n\n#predict the target on train and validation data\ntrain_pred = RFR.predict(train_x)\nvalid_pred = RFR.predict(valid_x)\n\n#RMSE on train and test data\nprint('RMSE on train data :', mean_squared_error(train_y, train_pred)**(0.5))\nprint('RMSE on validation data :', mean_squared_error(valid_y, valid_pred)**(0.5))\n","1e020232":"#plot the 7 most important features\nplt.figure(figsize=(10,8))\nfeat_importances = pd.Series(RFR.feature_importances_, index = train_x.columns)\nfeat_importances.nlargest(7).plot(kind='barh');","5b90d149":"#training data with top 7 features\ntrain_x_7 = train_x[['Item_MRP',\n                      'Outlet_Type_Grocery Store',\n                      'Item_Visibility',\n                      'Outlet_Identifier_OUT027',\n                      'Outlet_Type_Supermarket Type3',\n                      'Item_Weight',\n                      'Outlet_Establishment_Year']]\n\n#validation data with top 7 important features\nvalid_x_7 = valid_x[['Item_MRP',\n                      'Outlet_Type_Grocery Store',\n                      'Item_Visibility',\n                      'Outlet_Identifier_OUT027',\n                      'Outlet_Type_Supermarket Type3',\n                      'Item_Weight',\n                      'Outlet_Establishment_Year']]\n\n#create an object of the RandomForestRegressor Model\nRFR_with_7 = RandomForestRegressor(max_depth=10, random_state=2)\n","ccd500e7":"#fit the model\nRFR_with_7.fit(train_x_7, train_y)\n\n#predict the target on the training and validation data\npred_train_with_7 = RFR_with_7.predict(train_x_7)\npred_valid_with_7 = RFR_with_7.predict(valid_x_7)\n\n#RMSE on train and validation data\nprint('RMSE on train data: ', mean_squared_error(train_y, pred_train_with_7)**(0.5))\nprint('RMSE on validation data: ', mean_squared_error(valid_y, pred_valid_with_7)**(0.5))","ebd9066e":"#importing required libraries\nimport pandas as pd\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nimport category_encoders as ce \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline","ed511bba":"#read training dataset\ntrain = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Train.csv\")","c8da6275":"#seperate the independent and target variables\ntrain_x = train.drop(columns=['Item_Outlet_Sales'])\ntrain_y = train['Item_Outlet_Sales']","40d3744a":"# import the BaseEstimator\nfrom sklearn.base import BaseEstimator\n\n# define the class OutletTypeEncoder\n# This will be our custom transformer that will create 3 new binary columns\n# custom transformer must have methods fit and transform\n\nclass OutletTypeEncoder(BaseEstimator):\n\n    def __init__(self):\n        pass\n\n    def fit(self, documents, y=None):\n        return self\n\n    def transform(self, x_dataset):\n        x_dataset['outlet_grocery_store'] = (x_dataset['Outlet_Type'] == 'Grocery Store')*1\n        x_dataset['outlet_supermarket_3'] = (x_dataset['Outlet_Type'] == 'Supermarket Type3')*1\n        x_dataset['outlet_identifier_OUT027'] = (x_dataset['Outlet_Identifier'] == 'OUT027')*1\n        \n        return x_dataset","1dbf39f4":"# Drop the columns - \n# Impute the missing values in column Item_Weight by mean\n# Scale the data in the column Item_MRP\npre_process = ColumnTransformer(remainder='passthrough',\n                                transformers=[('drop_columns', 'drop', ['Item_Identifier',\n                                                                        'Outlet_Identifier',\n                                                                        'Item_Fat_Content',\n                                                                        'Item_Type',\n                                                                        'Outlet_Identifier',\n                                                                        'Outlet_Size',\n                                                                        'Outlet_Location_Type',\n                                                                        'Outlet_Type'\n                                                                       ]),\n                                              ('impute_item_weight', SimpleImputer(strategy='mean'), ['Item_Weight']),\n                                              ('scale_data', StandardScaler(),['Item_MRP'])])","694336e3":"# Define the Pipeline\n\"\"\"\nStep1: get the oultet binary columns\nStep2: pre processing\nStep3: Train a Random Forest Model\n\"\"\"\nmodel_pipeline = Pipeline(steps=[('get_outlet_binary_columns', OutletTypeEncoder()), \n                                 ('pre_processing',pre_process),\n                                 ('random_forest', RandomForestRegressor(max_depth=10,random_state=2))\n                                 ])\n# fit the pipeline with the training data\nmodel_pipeline.fit(train_x,train_y)\n\n# predict target values on the training data\nmodel_pipeline.predict(train_x)","cf53e61b":"# read the test data\ntest_data = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Test.csv\")\n\n# predict target variables on the test data \ny_sub = model_pipeline.predict(test_data)","0245c928":"y_sub","4172d113":"sub = pd.read_csv(\"..\/input\/big-mart-sales-prediction\/Submission.csv\")\nsub[\"Item_Outlet_Sales\"] = y_sub\nsub.head()","5da6f0f1":"sub.to_csv(\"submission.csv\", index=False)","680078b0":"Next we will define the pre-processing steps required before the model building process.\n\n* Drop the columns \u2013 Item_Identifier, Outlet_Identifier, Item_Fat_Content, Item_Type, Outlet_Identifier, Outlet_Size, Outlet_Location_Type and Outlet_Establishment_Year\n* Impute missing values in column Item_Weight with mean\n* Scale the column Item_MRP using StandardScaler().\nThis will be the second step in our machine learning pipeline. After this step, the data will be ready to be used by the model to make predictions.","33e1e722":"# 1. Create the required binary features\nWe will create a custom transformer that will add 3 new binary columns to the existing data.\n\n* Outlet_Type: Grocery Store\n* Outlet_Type: Supermarket Type3\n* Outlet_Identifier_OUT027","a56feeb9":"We need to create 3 new binary columns using a custom transformer. Here are the steps we need to follow to create a custom transformer.\n\n* Define a class OutletTypeEncoder\n* Add the parameter BaseEstimator while defining the class\n* The class must contain fit and transform methods\n* In the transform method, we will define all the 3 columns that we want after the first stage in our ML pipeline.","14ac8d3a":"# Selected features and preprocessing steps\n* **Item_MRP:** It holds the price of the products. During the preprocessing step we used a standard scaler to scale these values.\n* **Outlet_Type_Grocery Store:** A binary column which indcates if the outlet type is a grocery store or not. To use this information in the model building process, we will add a binary feature in the existing data that contains 1 (if outlet type is a grocery store) and 0 (if the outlet type is something else).\n* **Item_Visibility:** Denotes visibility of products in the store. Since this variable had a small value range and no missing values, we did not apply any preprocessing steps on this variable.\n* **Outlet_Type_Supermarket Type3:** Another binary column indicating if the outlet type is a 'supermarket_type_3' or not. To capture this information we will create a binary feature that stores 1 (if outlet type is supermarket_type_3) and 0 (if not).\n* **Outlet_Identifier_OUT027:8** This feature specifies whether the outlet identifier is 'OUT027' or not. Similar to the  previous example, we will create a seperate column that carries 1 (if outlet identifier is OUT027) or 0 (if otherwise).\n* **Outlet_Establishment_Year:** This describes the year of establishment of the stores. Since we did not perform any transformation on values in this column, we will not preprocess it in the pipeline.\n* **Item_Weight:** During preprocessing we observed that this column had missing values. These missing values were imputed using the average of the column. This has to be taken into account while building the pipeline.\n\nWe will drop the other columns since we will not use them to train the model.\n","5dc8c7fd":"# Building the pipeline\nWe will read the data set and seperate the independent and target variable from the training dataset.","6813fc8d":"We will train a random forest regressor and see if we can get an improvement on the train and validation errors.","1e1d80bd":"Using only 7 features has given us almost the same perfomance as the previous model where we were using 45 features. Now we will identify the final set of features that we need and the preprocessing steps for each of them.","63321186":"Only Item_Weight and Outlet_Size have missing values.\n\nItem_Weight is a continuous variable. We can use either mean or median to impute the missing values, but here we will use mean.\n\nOutlet_Size is a categorical variable so will use mode to impute the missing values in the column.","7ff67da3":"We can see a significant improvement on the RMSE values. The random forest algorithm gives us 'feature importance for all the variables in the data.\n\nWe have 45 features and not all of these features may be useful in forecasting. We will select the top 7 features which had a major contribution in forecasting sales values.\n\nIf the model performance is similar in both cases (by using 45 features and by using 7 features), then we should only use the top 7 features, in order to keep the model simple and efficient.\n\nThe goal is to have a less complex model without compromising on the overall model performance.","3e868505":"# 3. Use the model to predict the target on the cleaned data\nThis will be the final step in the pipeline. In the last two steps we preprocessed the data and made it ready for the model building process. We will use this data and build a machine learning model to predict the Item Outlet Sales.","ae801241":"The dataset contains information about the stores, products and historical sales. We will predict the sales of the products in the stores.\n\nWe will start by building a prototype machine learning pipeline that will help us define the actual machine learning pipeline.","f3e1e35a":"Machine learning models cannot work with categorical(string) data. We will convert the categorical variables into numeric types.","718480cd":"# Data Exploration and Preprocessing","617843c2":"Now that we have taken care of our categorical variables, we move on to the continous variables.\nWe will nnormalize the data in such a way that the range of all variables is almost similar.\nWe will use the StandardScaler function to do this.","163c19fe":"# Predict the target\nThis will be the final block of the machine learning pipeline. We will specify 3 steps \u2013 create binary columns, preprocess the data, train a model.\n\nWhen we use the fit() function with a pipeline object, all three steps are executed. Post the model training process, we use the predict() function that uses the trained model to generate the predictions.","25521384":"# Pipeline Design\nWe have built a prototype to understand the preprocessing requirement for our data. It is now time to form a pipeline design based on our learning from the prototype. We will define the pipeline in 3 stages:\n\n1. Create the required binary features\n2. Perform required data preprocessing and transformations:\n*  Drop the columns that are not required\n*  Missing value imputation (Item_Weight) by average\n*  Scale the Item_MRP\n3. Random Forest Regressor","94501f61":"Now, we will read the test data set and we call predict function only on the pipeline object to make predictions on the test data.","356aba35":"# **Project Scope**\n\nHaving a well-defined structure before performing a task helps in efficient execution of the task. This is true even in cases of building a machine learning model. Once you have built a model on a dataset, you can easily break down the steps and define a structured Machine learning pipeline.\n\nThis notebook coveres the process of building an end-to-end Machine Learning pipeline and implementing it on  BigMart sales prediction dataset.","a9dbada6":"# 2. Data Preprocessing and transformations\nWe will use a column transformer to do the required transformations. It will contain 3 steps:\n\n* Drop the columns that are not required for model training\n* Impute missing values in the column Item_Weight using the average\n* Scale the column Item_MRP using StandardScaler()","e022a0fb":"Our data has the following categorical variables\n\n* Item_Identifier\n* Item_Fat_Content\n* Item_Type\n* Outlet_Identifier\n* Outlet_Size\n* Outlet_Type\n* Outlet_Location_Type\n\nWe will use the categorical_encorders library to convert these variables into binary variables. We will not convert Item_Identifier.","c3df96f2":"Now that we have split our data, we will train a linear regression model on this data and check its performance on the validation set. We will use RMSE as an evaluation metric.","55e24d1b":"# Building the Model\nWe will use the Linear Regression and the Random Forest Regressor to predict the sales. We will create a validation set using the train_test_split() function.\n\ntest_size = 0.25 such that the validation set holds 25% of the data points while the train set has 75%.","8325e856":"# Identifying features to build the Machine Learning pipeline\nWe must list down the final set of features and necessary preprocessing steps for each of them, to be used in the ML pipeline. Since the RandomForestRegressor model with 7 features gave us almost the same performance as the previous model with 45 features, we will only use these features for our ML pipeline."}}