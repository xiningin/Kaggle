{"cell_type":{"7357d122":"code","efb2b3df":"code","907246d3":"code","68592eed":"code","9933a13d":"code","e24fc646":"code","deab3490":"code","316810f7":"code","4201109d":"code","2bdc5105":"code","28a33e2e":"code","76c0888e":"code","241e1e6c":"code","509a8f02":"code","8f28a093":"code","d09fcfe2":"code","8a9f40a9":"code","744037b3":"code","fb3a3fb7":"code","4702b553":"code","d861611e":"code","8fe72dba":"code","3885d053":"code","564fdb32":"code","a8ab1330":"code","08d68d20":"code","f1c9e81e":"code","3e455f6c":"code","c0b52fd7":"code","72c10a3e":"code","0de82ebe":"code","20985e9b":"code","7d61ff7b":"code","8f28e2c8":"code","1ee0a258":"code","ab08650d":"code","52f5ad2c":"code","dc11e13b":"code","3bff1237":"code","bf096aef":"code","7ee74ad8":"code","a097e607":"code","7a006e8f":"code","c7db55b1":"code","4c494911":"code","bc2db80e":"code","801cfa26":"code","3f7ffbc8":"code","4b253a8c":"code","4ca2ffa3":"code","a33ee79d":"code","e04beb18":"code","43f37805":"code","63906c4c":"code","e1701af3":"code","764365fb":"code","85d9fe28":"code","43f6c1d0":"code","7149d0aa":"code","ce5a7251":"code","be77f471":"code","c00e93c9":"code","048c466a":"code","55c336d8":"code","1e87d780":"code","31573dc7":"code","48fe4cda":"code","b1d92e27":"code","b4f0bc63":"code","bc3307c1":"code","abbd0fac":"code","24a7f35a":"code","6db00e67":"code","0423afc7":"code","3cea4dc1":"code","42d20f51":"code","1b9e901f":"code","2e3caf9c":"code","182befcd":"code","1e18acbf":"code","e8673abc":"code","a969b161":"code","0b96f644":"code","b802af9e":"code","3e561892":"code","e556cc10":"code","0d7ebe8b":"code","ec5e3608":"code","bcb397ae":"code","3f2085f7":"code","10e6fdf0":"code","40a2bcf7":"code","c33dfef3":"code","30e0184d":"code","bde17ce9":"code","d289aeb1":"code","e4363440":"code","a5775a56":"markdown","0de20d41":"markdown","28a56d28":"markdown","031f553c":"markdown","701916b9":"markdown","11092f2e":"markdown","4a3e4895":"markdown","fe0bcd53":"markdown","a9acba94":"markdown","b451593b":"markdown","b7383b26":"markdown","cb91473d":"markdown","3a2e3635":"markdown","bdd08f52":"markdown","05494a8b":"markdown","97a9e16a":"markdown"},"source":{"7357d122":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport gc\nimport warnings\nimport time\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","efb2b3df":"app_train = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_train.csv')\napp_test = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/application_test.csv')\n\nbureau = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/bureau.csv')\nbureau_bal = pd.read_csv('\/kaggle\/input\/home-credit-default-risk\/bureau_balance.csv')","907246d3":"app_train.shape","68592eed":"app_test.shape","9933a13d":"app_train.shape[0] + app_test.shape[0]","e24fc646":"df = app_train.append(app_test).reset_index()","deab3490":"del app_train\ndel app_test\ngc.collect()","316810f7":"df.shape","4201109d":"app_num_basic_col = [\n'SK_ID_CURR',\n'TARGET',\n'CNT_CHILDREN',\n'AMT_INCOME_TOTAL',\n'AMT_CREDIT',\n'AMT_ANNUITY',\n'AMT_GOODS_PRICE',\n'REGION_POPULATION_RELATIVE',\n'DAYS_BIRTH',\n'DAYS_EMPLOYED',\n'DAYS_REGISTRATION',\n'DAYS_ID_PUBLISH',\n'CNT_FAM_MEMBERS',\n'EXT_SOURCE_1',\n'EXT_SOURCE_2',\n'EXT_SOURCE_3',]","2bdc5105":"app_cat_basic_col = ['NAME_CONTRACT_TYPE',\n'FLAG_OWN_CAR',\n'FLAG_OWN_REALTY',\n'CODE_GENDER',\n'NAME_TYPE_SUITE',\n'NAME_INCOME_TYPE',\n'NAME_EDUCATION_TYPE',\n'NAME_FAMILY_STATUS',\n'NAME_HOUSING_TYPE',\n'OCCUPATION_TYPE',\n'ORGANIZATION_TYPE']","28a33e2e":"len(app_num_basic_col)","76c0888e":"len(app_cat_basic_col)","241e1e6c":"df = df[app_num_basic_col + app_cat_basic_col]","509a8f02":"df.shape","8f28a093":"def find_missing(data):\n    ## Number of missing values\n    missing_cnt = data.isnull().sum().values\n    ## Total\n    total = data.shape[0]\n    ##Percentage of Missing values\n    percentage = missing_cnt\/total * 100\n    missing_df = pd.DataFrame(data={'Total': total, 'Missing Count' : missing_cnt,'Percentage' : percentage}, \n                              index=data.columns.values)\n    missing_df = missing_df[missing_df['Missing Count'] > 0].sort_values('Missing Count', ascending=False)\n    return missing_df","d09fcfe2":"find_missing(df[app_num_basic_col])","8a9f40a9":"df[app_num_basic_col].describe().transpose()","744037b3":"df[app_cat_basic_col].describe().transpose()","fb3a3fb7":"def describe_df(columns):\n    for column in columns:\n        print('{column} mean value={mean}, median value={median}'.format(column=column, mean=df[column].mean(), median=df[column].median()))\ndescribe_df(['AMT_GOODS_PRICE', 'AMT_ANNUITY', 'CNT_FAM_MEMBERS', 'EXT_SOURCE_1'])","4702b553":"df['AMT_ANNUITY'].mean()","d861611e":"df['NAME_INCOME_TYPE'].unique()","8fe72dba":"df[df['DAYS_EMPLOYED'] == 365243][['DAYS_EMPLOYED', 'NAME_INCOME_TYPE']].groupby('NAME_INCOME_TYPE').count()","3885d053":"df['AMT_GOODS_PRICE']=df['AMT_GOODS_PRICE'].fillna(df['AMT_GOODS_PRICE'].median())\ndf['AMT_ANNUITY']=df['AMT_ANNUITY'].fillna(df['AMT_ANNUITY'].median())\ndf['CNT_FAM_MEMBERS']=df['CNT_FAM_MEMBERS'].fillna(df['CNT_FAM_MEMBERS'].median())\ndf['EXT_SOURCE_1']=df['EXT_SOURCE_1'].fillna(df['EXT_SOURCE_1'].median())\ndf['EXT_SOURCE_2']=df['EXT_SOURCE_2'].fillna(df['EXT_SOURCE_2'].median())\ndf['EXT_SOURCE_3']=df['EXT_SOURCE_3'].fillna(df['EXT_SOURCE_3'].median())","564fdb32":"find_missing(df[app_num_basic_col])","a8ab1330":"find_missing(df[app_cat_basic_col])","08d68d20":"# Heatmap\nplt.subplots(figsize=(20,12))\nsns.heatmap(df[app_cat_basic_col].isnull(), yticklabels = False, cbar = False,cmap = 'tab20c_r')\nplt.title('Missing Data: Training Set')\nplt.show()","f1c9e81e":"app_cat_basic_col.remove('OCCUPATION_TYPE')","3e455f6c":"df.drop('OCCUPATION_TYPE',inplace=True, axis=1)","c0b52fd7":"df.shape","72c10a3e":"df['NAME_TYPE_SUITE']=df['NAME_TYPE_SUITE'].fillna('NTS_XNA')","0de82ebe":"def plot_categorical_pie(data, column, title, hole=.3):\n    plotdata = data[column].value_counts();\n    \n    fig = go.Figure(data=[go.Pie(labels=plotdata.index, values=plotdata.values, hole=hole)])\n    fig.update_layout(title_text=title)\n    fig.show()","20985e9b":"def plot_categorical(data, column, size=[8,4], xlabel_angle=0, title=''):\n    plotdata = data[column].value_counts();\n    plt.figure(figsize=size)\n    sns.barplot(x=plotdata.index, y=plotdata.values)\n    plt.title(title)\n    plt.xticks(rotation = xlabel_angle)\n    plt.show()","7d61ff7b":"plot_categorical_pie(df, 'TARGET', 'Label Target ', .6)","8f28e2c8":"df['NAME_INCOME_TYPE'].unique()","1ee0a258":"plot_categorical_pie(df, 'NAME_INCOME_TYPE', 'Income Type', .7)","ab08650d":"plot_categorical(df,'NAME_EDUCATION_TYPE', size=[10,6], xlabel_angle=70,title='Education Type')","52f5ad2c":"plot_categorical_pie(df, 'NAME_FAMILY_STATUS', 'Income Type', .4)","dc11e13b":"corr_matrix = df.corr()","3bff1237":"plt.subplots(figsize=(20,12))\nsns.heatmap(corr_matrix, cmap = plt.cm.RdYlBu_r, annot = True, vmin = -0.25, vmax=0.6)\nplt.title('Correlation Heatmap');","bf096aef":"df['CNT_FAM_MEMBERS'].unique()","7ee74ad8":"df['CNT_FAM_MEMBERS'].plot.hist(title = 'Count of Family members Histogram');\nplt.xlabel('Count of family members');","a097e607":"(df['DAYS_BIRTH']\/365).plot.hist(title = 'Days Birth Histogram');\nplt.xlabel('Days Birth');","7a006e8f":"# Age information into a separate dataframe\nage_data = df[['TARGET', 'DAYS_BIRTH']]\nage_data['YEARS_BIRTH'] = age_data['DAYS_BIRTH'] \/ -365\n\n# Bin the age data\nage_data['YEARS_BINNED'] = pd.cut(age_data['YEARS_BIRTH'], bins = np.linspace(20, 70, num = 11))\nage_data.head(10)","c7db55b1":"age_groups  = age_data.groupby('YEARS_BINNED').mean()\nage_groups","4c494911":"plt.figure(figsize = (8, 8))\n\n# Graph the age bins and the average of the target as a bar plot\nplt.bar(age_groups.index.astype(str), 100 * age_groups['TARGET'])\n\n# Plot labeling\nplt.xticks(rotation = 75); plt.xlabel('Age Group (years)'); plt.ylabel('Failure to Repay (%)')\nplt.title('Failure to Repay by Age Group');","bc2db80e":"sns.boxplot(data=df['DAYS_EMPLOYED'])","801cfa26":"df['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","3f7ffbc8":"round(df[df['DAYS_EMPLOYED'] == 365243]['DAYS_EMPLOYED'].count() \/ len(df) * 100, 2)","4b253a8c":"round(df[df['DAYS_EMPLOYED'] != 365243]['DAYS_EMPLOYED'].count() \/ len(df) * 100 ,2)","4ca2ffa3":"# Create an anomalous flag column\ndf['DAYS_EMPLOYED_ANOM'] = df[\"DAYS_EMPLOYED\"] == 365243\n\n# Replace the anomalous values with nan\ndf['DAYS_EMPLOYED'].replace({365243: np.nan}, inplace = True)\n\ndf['DAYS_EMPLOYED']=df['DAYS_EMPLOYED'].fillna(df['DAYS_EMPLOYED'].median())\n\n(df['DAYS_EMPLOYED']\/365).plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","a33ee79d":"basic_features = app_num_basic_col + app_cat_basic_col ","e04beb18":"len(basic_features)","43f37805":"find_missing(df[basic_features])","63906c4c":"len(basic_features)","e1701af3":"basic_features.append('DAYS_EMPLOYED_ANOM')","764365fb":"len(basic_features)","85d9fe28":"df[df['DAYS_EMPLOYED'] \/ -365 > 8]['DAYS_EMPLOYED'].count()","43f6c1d0":"(df['DAYS_BIRTH'] \/ -365).describe()","7149d0aa":"df[df['CODE_GENDER'] == 'XNA']","ce5a7251":"df = df[df['CODE_GENDER'] != 'XNA']","be77f471":"df.shape","c00e93c9":"df[['SK_ID_CURR','CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'DAYS_EMPLOYED_ANOM']].head(10)","048c466a":"# Categorical features with Binary encode (0 or 1; two categories)\nfor bin_feature in ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'DAYS_EMPLOYED_ANOM']:\n    df[bin_feature], uniques = pd.factorize(df[bin_feature])","55c336d8":"df[['SK_ID_CURR','CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'DAYS_EMPLOYED_ANOM']].head(10)","1e87d780":"one_hot_encode_col = ['NAME_CONTRACT_TYPE',\n'NAME_TYPE_SUITE',\n'NAME_INCOME_TYPE',\n'NAME_EDUCATION_TYPE',\n'NAME_FAMILY_STATUS',\n'NAME_HOUSING_TYPE',\n'ORGANIZATION_TYPE']","31573dc7":"dummy_df = pd.get_dummies(df[one_hot_encode_col], dummy_na=False, drop_first=True)","48fe4cda":"len(dummy_df.columns)","b1d92e27":"df.shape","b4f0bc63":"len(basic_features)","bc3307c1":"df.drop(one_hot_encode_col, axis=1,inplace=True)","abbd0fac":"for f in one_hot_encode_col:\n    basic_features.remove(f)","24a7f35a":"len(basic_features)","6db00e67":"df.shape","0423afc7":"len(df[basic_features].columns)","3cea4dc1":"len(dummy_df.columns)","42d20f51":"df = pd.concat([df[basic_features], dummy_df], axis=1)","1b9e901f":"del dummy_df\ngc.collect()","2e3caf9c":"df.shape","182befcd":"from sklearn.linear_model import LogisticRegression\n\n# Make the model with the specified regularization parameter\nlog_reg = LogisticRegression(C = 0.0001)","1e18acbf":"df.loc[df.TARGET.isnull()].shape","e8673abc":"df.loc[df.TARGET.notnull()].shape","a969b161":"X_train = df.loc[df.TARGET.notnull()].drop('TARGET',axis=1)","0b96f644":"find_missing(X_train)","b802af9e":"y_train =  df.loc[df.TARGET.notnull()]['TARGET']","3e561892":"y_train.shape","e556cc10":"X_test = df.loc[df.TARGET.isnull()].drop('TARGET', axis=1)","0d7ebe8b":"X_test.shape","ec5e3608":"# Train on the training data\nlog_reg.fit(X_train, y_train)","bcb397ae":"# Make predictions\n# Make sure to select the second column only\nlog_reg_pred = log_reg.predict_proba(X_test)[:,1]","3f2085f7":"len(log_reg_pred)","10e6fdf0":"log_reg_pred","40a2bcf7":"submit = X_test[['SK_ID_CURR']]\nsubmit['TARGET'] = log_reg_pred\n\nsubmit.to_csv('logistic_regression.csv', index = False)","c33dfef3":"from imblearn.over_sampling import SMOTE","30e0184d":"y_train.value_counts()","bde17ce9":"smt = SMOTE()\nX_train, y_train = smt.fit_sample(X_train, y_train)","d289aeb1":"log_reg.fit(X_train, y_train)","e4363440":"submit = X_test[['SK_ID_CURR']]\nsubmit['TARGET'] = log_reg_pred\n\nsubmit.to_csv('logistic_regression_with_smote.csv', index = False)","a5775a56":"### Handling missing values","0de20d41":"### creating combined basic features from numerical and categorical","28a56d28":"### Considering basic numeric features","031f553c":"- Handling Outlier","701916b9":"- found that DAYS_EMPLOYED has some anomalies\n- Around 18% of data amongs all data has some '365243' value in this fields\n- as its not make sence to current data so we need to handle it somehow\n- so i am replacing this value with np.nan\n- creating new column called DAYS_EMPLOYED_ANOM Anomalous flag which will have True or False value based on this field","11092f2e":"out of above basic categorical features we already encoded binary \n- FLAG_OWN_CAR\n- FLAG_OWN_REALITY\n- CODE_GENDER\n- DAYS_EMPLYED_ANOM\n\nNow doing one hot encoding for remaining features\n- NAME_CONTRACT_TYPE\n- NAME_TYPE_SUITE\n- NAME_INCOME_TYPE\n- NAME_EDUCATION_TYPE\n- NAME_FAMILY_STATUS\n- NAME_HOUSING_TYPE\n- ORGANIZATION_TYPE","4a3e4895":"- Creating dataframe with required columns only","fe0bcd53":"- Draw distribution of numeric features","a9acba94":"### Lable encoding for categorical features whose values are binary like Y\/N, Yes\/No, True\/False, M\/F etc.","b451593b":"## EDA And Pre-Processing ","b7383b26":"After removing anomalies we can see above histogram that DAYS_EMPLOYED has maximum as 49 years and minimum is 0 year as discribe below","cb91473d":"### creating final dataframe with required features","3a2e3635":"- Name Type Suite and Occupation type has missing values\n- Occupation type has lots of missing value so for now droping this column\n- Name Type suite will create some dummy NTS_XNA category for now","bdd08f52":"## Model 1 : Logistic Regression","05494a8b":"### Creating combined dataframe from train and test file\n- Purpuse of combining train and test file is to handle data modification at same time on both file\n- Once data pre-processing is done we can easily split it again with below logic\n- if TARGET=NaN meaning its test file else its train file","97a9e16a":"## Dealing with Imbalance Data using SMOTE"}}