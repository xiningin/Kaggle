{"cell_type":{"bdee3cda":"code","101d2986":"code","e23546a5":"code","03574b3e":"code","a2765829":"code","9d8ecbd5":"code","5b8c2237":"code","3f74a8ea":"code","d11d146c":"code","4109c37a":"code","6c0c830e":"code","61075764":"code","05a2f492":"code","d7dfad4e":"code","3994c5de":"code","2caed264":"code","f6afa20c":"code","d3819449":"code","e799c1f5":"code","42e6d04f":"code","2b1824ec":"code","3973e63f":"code","9cf6abd2":"code","055b4b86":"code","bae9dcd7":"code","43fd7ee5":"code","e89d843f":"code","685d94ae":"code","ca6a867e":"code","edef8e19":"code","53a1e981":"code","7e3f96d5":"code","909df68b":"code","6dc43818":"code","3c935604":"code","1d090adb":"markdown"},"source":{"bdee3cda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","101d2986":"import pandas as pd","e23546a5":"df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","03574b3e":"df.head()","a2765829":"df.isnull().sum()","9d8ecbd5":"df.dtypes","5b8c2237":"df.count","3f74a8ea":"df.describe","d11d146c":"len(df[df['Class']==0])","4109c37a":"len(df[df['Class']==1])","6c0c830e":"df.columns","61075764":"total_cols = len(df.columns)\ntotal_cols\nx = df.values[:,:total_cols-1]\ny = df.values[:,total_cols-1]\n","05a2f492":"#split the data into training set and testing set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25, random_state = 0)\nprint(x_train)\nprint(y_train)\nprint(x_test)\nprint(y_test)","d7dfad4e":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\n\n","3994c5de":"y_pred = regressor.predict(x_test)\nprint(y_pred)","2caed264":"df.corr()","f6afa20c":"df.dtypes","d3819449":"df.count","e799c1f5":"df.corr()\ncor = df.iloc[:,0:30].corr()\nprint(cor)","42e6d04f":"train,test = train_test_split(df,test_size=0.3)\nprint(train.shape)\nprint(test.shape)","2b1824ec":"train_x = train.iloc[:,0:3]; train_y = train.iloc[:,3]\ntest_x  = test.iloc[:,0:3];  test_y = test.iloc[:,3]\nprint(train_x)\nprint(test_x)\n","3973e63f":"print(train_x.shape)","9cf6abd2":"print(test_x.shape)","055b4b86":"print(train_y.shape)","bae9dcd7":"print(test_y.shape)","43fd7ee5":"train_x.head()","e89d843f":"train_y.head()","685d94ae":"train_x.tail()","ca6a867e":"train_y.tail()","edef8e19":"train.head()","53a1e981":"train.dtypes","7e3f96d5":"#for predict the value\nvalue = sm.OLS(train_y , train_x).fit()\npred = value.predict(test_x)\nprint(pred)","909df68b":"#Store the Actual and predicted values in a dataframe for comprison\nactual = list(test_y.head(50))\ntype(actual)\npredicated = np.round(np.array(list(pred.head(50))),2)\nprint(predicated)\ntype(predicated)","6dc43818":"df_results = pd.DataFrame({'actual':actual, 'predicated':predicated})\nprint(df_results)\n","3c935604":"#To check Accuracy:\nfrom sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_y, pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(test_y, pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, pred)))  \n","1d090adb":" # # Linear Regression"}}