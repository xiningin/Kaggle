{"cell_type":{"4c7f919a":"code","3ba2ef53":"code","6207f155":"code","6bf931b5":"code","e21a6c2f":"code","43804e0b":"code","0148b46d":"code","2e102531":"code","52465b1c":"code","78558f0c":"code","1e8d0a7d":"markdown"},"source":{"4c7f919a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ba2ef53":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier","6207f155":"filepath= '\/kaggle\/input\/cardiogoodfitness\/CardioGoodFitness.csv'\n\ndf = pd.read_csv(filepath)\ndf.head()","6bf931b5":"#Change the categorical variables to numbers\ndf['Gender'] = df['Gender'].replace('Male', 0)\ndf['Gender'] = df['Gender'].replace('Female', 1)\ndf['MaritalStatus'] = df['MaritalStatus'].replace('Single', 0)\ndf['MaritalStatus'] = df['MaritalStatus'].replace('Partnered', 1)\ndf.head()","e21a6c2f":"#Perform one hot encoding on the Products column\none_hot = pd.get_dummies(df['Product'])\n# Drop column Product as it is now encoded\ndf = df.drop('Product',axis = 1)\n# Join the encoded df\ndf = df.join(one_hot)\ndf.head()","43804e0b":"#Defining the independant and depandant variables\nfrom sklearn.model_selection import train_test_split\ny=df['Fitness']\nx=df.drop('Fitness',axis=1)\n#Splitting training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.70,test_size=0.30, random_state=0)","0148b46d":"##Now we will run a few machine learning techiniques to see which one is the most applicable\n\n#Linear Regression\nlinearRegressor = LinearRegression()\nlinearRegressor.fit(x_train, y_train)\ny_predicted = linearRegressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted)\nr = r2_score(y_test, y_predicted)\nmae = mean_absolute_error(y_test,y_predicted)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","2e102531":"#Polynomial Regression\npolynomial_features= PolynomialFeatures(degree=2)\nx_poly = polynomial_features.fit_transform(x_train)\nx_poly_test = polynomial_features.fit_transform(x_test)\nmodel = LinearRegression()\nmodel.fit(x_poly, y_train)\ny_predicted_p = model.predict(x_poly_test)\nmse = mean_squared_error(y_test, y_predicted_p)\nr = r2_score(y_test, y_predicted_p)\nmae = mean_absolute_error(y_test,y_predicted_p)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","52465b1c":"# Decision Tree - CART\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\ny_predicted_d = regressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_d)\nr = r2_score(y_test, y_predicted_d)\nmae = mean_absolute_error(y_test,y_predicted_d)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","78558f0c":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train);\ny_predicted_r = rf.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_r)\nr = r2_score(y_test, y_predicted_r)\nmae = mean_absolute_error(y_test,y_predicted_r)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)","1e8d0a7d":"Thus we can see that Linear Regression gives us the most efficient result with minimum error."}}