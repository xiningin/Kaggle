{"cell_type":{"758d1bc4":"code","945378c4":"code","5f8237b0":"code","cbde743a":"code","e2914879":"code","27eb2382":"code","bc999114":"code","de6a640f":"code","64e21b12":"code","2fb3dafc":"code","089c3dae":"code","cd8ca7c0":"code","2bf1996a":"code","827a5160":"code","da64c72f":"code","81de21b0":"code","f1f11bb0":"code","0ebb5f49":"code","7e5d2a42":"markdown","d317e516":"markdown","d8e57282":"markdown","1fc87762":"markdown","297072ad":"markdown","a0dbe6cf":"markdown","4079656b":"markdown","34cafd8d":"markdown"},"source":{"758d1bc4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","945378c4":"df = pd.read_csv('\/kaggle\/input\/ahdd1\/Arabic Handwritten Digits Dataset CSV\/csvTrainImages 60k x 784.csv')\ndf_label = pd.read_csv('\/kaggle\/input\/ahdd1\/Arabic Handwritten Digits Dataset CSV\/csvTrainLabel 60k x 1.csv')","5f8237b0":"df_label","cbde743a":"'Each of the images in the dataset are of shape {} x {}'.format(np.sqrt(df.shape[1]), np.sqrt(df.shape[1]))","e2914879":"import matplotlib.pyplot as plt \nimport random\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf \nfrom tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.utils import plot_model\nfrom keras.utils.np_utils import to_categorical","27eb2382":"\n\nsample = random.randrange(1, df.shape[0])\nimage =np.rot90(df.iloc[sample].values.reshape((28,28)), 3)\nplt.imshow(image)\n\nplt.axis('off')\nplt.title(df_label.iloc[sample].values)","bc999114":"plt.imshow(image\/255.)\n\nplt.axis('off')\nplt.title(df_label.iloc[sample].values)","de6a640f":"X_train, X_test, y_train, y_test = train_test_split(df, df_label)","64e21b12":"X_train = X_train\/255.\nX_test = X_test\/255.\nX_train=X_train.values.reshape(-1, 28,28,1)\nX_test=X_test.values.reshape(-1, 28, 28, 1)\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","2fb3dafc":"model = Sequential([\n                Conv2D(100, kernel_size = (3,3), activation='relu', input_shape = (28,28,1)),\n                Dropout(0.25),\n                Flatten(),\n                Dense(10, activation= 'softmax')]\n)\nmodel.compile(loss='categorical_crossentropy', \n              optimizer= 'Adam', \n              metrics=['accuracy']\n                )\nmodel.fit(X_train, y_train, epochs=10)","089c3dae":"model.summary()","cd8ca7c0":"plot_model(model)","2bf1996a":"model.evaluate(X_test, y_test)","827a5160":"Test_set = pd.read_csv('\/kaggle\/input\/ahdd1\/Arabic Handwritten Digits Dataset CSV\/csvTestImages 10k x 784.csv')\nTest_label = pd.read_csv('\/kaggle\/input\/ahdd1\/Arabic Handwritten Digits Dataset CSV\/csvTestLabel 10k x 1.csv')","da64c72f":"\nTest_set = Test_set\/255.\n\nTest_set=Test_set.values.reshape(-1, 28, 28, 1)\nTest_label = to_categorical(Test_label)","81de21b0":"model.evaluate(Test_set, Test_label)","f1f11bb0":"\nclasses = np.argmax(model.predict(Test_set), axis = 1)","0ebb5f49":"pd.DataFrame(classes, columns= ['predictions'])","7e5d2a42":"## Non-normalised","d317e516":"# Sample Digit Picture - Both Normalised and Non-Normalised","d8e57282":"# Importing Dataset","1fc87762":"A random picture is selected from the training dataset and displayed both `Non-normalised` and the `normalised` version. \n\nBased on the display images, it can be seen that theres isnt much difference between the normalised and non-normalised version. The neural network however prefers a `normalised tensor` over the `non-nomalised tensor`","297072ad":"# Train Test Split","a0dbe6cf":"# Import Test Set","4079656b":"The accuracy is `98.68%`","34cafd8d":"# CNN Construction"}}