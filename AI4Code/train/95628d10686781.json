{"cell_type":{"d25e9442":"code","1dcc9b4e":"code","29426dd9":"code","d09e2d43":"code","81b1b11b":"code","7fd3522f":"code","f2af705f":"code","48b0c804":"code","45c3f9a3":"code","2c5278f3":"code","862b40d8":"code","3c70df39":"code","46ecc320":"code","df7be3f1":"code","c033a620":"code","cb4306f0":"code","120c94a5":"code","bb238b78":"code","03299720":"code","2cea98a3":"code","f526481d":"code","21fd40c1":"code","2390258e":"code","87ad47f7":"code","60e3c334":"code","10221e20":"code","bfaa32b4":"markdown","bce1f342":"markdown","4a09a8eb":"markdown","c1e11ce6":"markdown","594e420f":"markdown","e8f13f09":"markdown","6e56b8f9":"markdown","ea0b202d":"markdown","09e831c8":"markdown","a892a0a4":"markdown","b2f1980c":"markdown","68c1cadc":"markdown","0d6efee4":"markdown","ad4eae22":"markdown","39409dd2":"markdown","e18b04d9":"markdown"},"source":{"d25e9442":"class BinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n        \n    def set_left(self, node):\n        self._left = node\n    \n    def set_right(self, node):\n        self._right = node\n        \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    ","1dcc9b4e":"def crear_arbol ():\n    A9 = BinaryTree(9)\n    A10 = BinaryTree(10)\n    A14 = BinaryTree(14)\n    A19 = BinaryTree(19)\n    A20 = BinaryTree(20)\n    A23 = BinaryTree(23)\n    A25 = BinaryTree(25)\n    A29 = BinaryTree(29)\n    A27 = BinaryTree(27)\n    A36 = BinaryTree(36)\n    A39 = BinaryTree(39)\n\n    root = A25\n    root.set_left(A14)\n    A25.set_right(A36)\n    A14.set_left(A9)\n    A14.set_right(A19)\n    A36.set_left(A29)\n    A36.set_right(A39)\n    A9.set_right(A10)\n    A19.set_right(A23)\n    A29.set_left(A27)\n    A23.set_left(A20)\n    \n    return root","29426dd9":"# R\/ \nclass BinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n        \n    def set_left(self, node):\n        self._left = node\n    \n    def set_right(self, node):\n        self._right = node\n        \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder_print(self):\n        if self._value is None:\n            return\n        \n        print (self._value, end=\" \")\n        \n        if self._left is not None:\n            self._left.preorder_print()\n        \n        if self._right is not None:\n            self._right.preorder_print()","d09e2d43":"root = crear_arbol()\nroot.preorder_print()","81b1b11b":"# R\/\nclass BinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n        \n    def set_left(self, node):\n        self._left = node\n    \n    def set_right(self, node):\n        self._right = node\n        \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder_print(self):\n        if self._value is None:\n            return\n        \n        print (self._value, end=\" \")\n        \n        if self._left is not None:\n            self._left.preorder_print()\n        \n        if self._right is not None:\n            self._right.preorder_print()\n    \n    def inorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.inorder_print()\n\n        print (self._value, end=\" \")\n        \n        if self._right is not None:\n            self._right.inorder_print()\n    \n        ","7fd3522f":"root = crear_arbol()\nroot.inorder_print()","f2af705f":"# R\/\nclass BinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n        \n    def set_left(self, node):\n        self._left = node\n    \n    def set_right(self, node):\n        self._right = node\n        \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder_print(self):\n        if self._value is None:\n            return\n        \n        print (self._value, end=\" \")\n        \n        if self._left is not None:\n            self._left.preorder_print()\n        \n        if self._right is not None:\n            self._right.preorder_print()\n    \n    def inorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.inorder_print()\n\n        print (self._value, end=\" \")\n        \n        if self._right is not None:\n            self._right.inorder_print()\n    \n    def postorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.postorder_print()\n        \n        if self._right is not None:\n            self._right.postorder_print()\n    \n        print (self._value, end=\" \")\n","48b0c804":"root = crear_arbol()\nroot.postorder_print()","45c3f9a3":"class BinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n        \n    def set_left(self, node):\n        self._left = node\n    \n    def set_right(self, node):\n        self._right = node\n        \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder(self, function):\n        if self._value is None:\n            return\n        \n        function (self._value)\n        \n        if self._left is not None:\n            self._left.preorder(function)\n        \n        if self._right is not None:\n            self._right.preorder(function)\n    \n    def inorder(self, function):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.inorder(function)\n\n        function (self._value)\n        \n        if self._right is not None:\n            self._right.inorder(function)\n    \n    def postorder(self, function):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.postorder(function)\n        \n        if self._right is not None:\n            self._right.postorder(function)\n    \n        function (self._value)\n","2c5278f3":"root = crear_arbol()\ndef imprimir(x):\n    print (x, end=\" \")\n    \nprint ('Post-Order')\nroot.postorder(imprimir)\nprint ('\\nIn-Order')\nroot.inorder(imprimir)\nprint ('\\nPre-Order')\nroot.preorder(imprimir)","862b40d8":"root = crear_arbol()\ndef cuadrado(x):\n    print (x**2, end=' ')\n    \nprint ('Post-Order')\nroot.postorder(cuadrado)\nprint ('\\nIn-Order')\nroot.inorder(cuadrado)\nprint ('\\nPre-Order')\nroot.preorder(cuadrado)","3c70df39":"# R\/\nclass SearchBinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n   \n    def insert(self, value):\n        if value is None or self._value is None:\n            return\n        node = SearchBinaryTree(value)\n        if value < self._value:\n            if self._left is None:\n                self._left = node\n            else:\n                self._left.insert(value)\n        else:\n            if self._right is None:\n                self._right = node\n            else:\n                self._right.insert(value)\n             \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder_print(self):\n        if self._value is None:\n            return\n        \n        print (self._value, end=\" \")\n        \n        if self._left is not None:\n            self._left.preorder_print()\n        \n        if self._right is not None:\n            self._right.preorder_print()\n    \n    def inorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.inorder_print()\n\n        print (self._value, end=\" \")\n        \n        if self._right is not None:\n            self._right.inorder_print()\n    \n        \n    def postorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.postorder_print()\n        \n        if self._right is not None:\n            self._right.postorder_print()\n    \n        print (self._value, end=\" \")\n","46ecc320":"def crear_arbol_ordenado ():\n    root = SearchBinaryTree(25)\n    root.insert(9)\n    root.insert(10)\n    root.insert(14)\n    root.insert(19)\n    root.insert(20)\n    root.insert(23)\n    root.insert(29)\n    root.insert(27)\n    root.insert(36)\n    root.insert(39)\n    \n    return root","df7be3f1":"\nroot = crear_arbol_ordenado()\nroot.insert(15)\n#root.inorder_print()\nroot.postorder_print()","c033a620":"# R\/","cb4306f0":"# R\/\nclass SearchBinaryTree:\n    _value = None\n    _left = None\n    _right = None\n    \n    def __init__(self, value):\n        self._value = value\n   \n    def insert(self, value):\n        if value is None or self._value is None:\n            return\n        node = SearchBinaryTree(value)\n        if value < self._value:\n            if self._left is None:\n                self._left = node\n            else:\n                self._left.insert(value)\n        else:\n            if self._right is None:\n                self._right = node\n            else:\n                self._right.insert(value)\n             \n    def get_left(self):\n        return self._left\n    \n    def get_right(self):\n        return self._right\n    \n    def get_value(self):\n        return self._value\n     \n    def set_value(self, value):\n        self._value = value\n    \n    def preorder_print(self):\n        if self._value is None:\n            return\n        \n        print (self._value, end=\" \")\n        \n        if self._left is not None:\n            self._left.preorder_print()\n        \n        if self._right is not None:\n            self._right.preorder_print()\n    \n    def inorder_print(self):\n        if self._value is None:\n            return\n        \n        if self._left is not None:\n            self._left.inorder_print()\n\n        print (self._value, end=\" \")\n        \n        if self._right is not None:\n            self._right.inorder_print()\n    \n    def postorder_print(self):\n        if self._value is None:\n            return\n        if self._left is not None:\n            self._left.postorder_print()\n        \n        if self._right is not None:\n            self._right.postorder_print()\n    \n        print (self._value, end=\" \")\n\n    def search(self, value):\n        if self._value == value:\n            return self\n        if self._left is not None and value < self._value:\n            return self._left.search(value)\n        if self._right is not None and value > self._value:\n            return self._right.search(value)\n        \n        ","120c94a5":"root = crear_arbol_ordenado()\nroot.insert(15)\n#root.inorder_print()\nb = root.search(25)","bb238b78":"print(b)\nprint(b.get_value())\nprint(b.get_left().get_value())","03299720":"# R\/\n    \nclass Node:\n    _parent = None\n    _value = None\n    _left = None\n    _right = None\n\n    def __init__(self, value, parent=None):\n        self._value = value\n        self._parent = parent\n\n    def insert(self, value):\n        if value is None or self._value is None:\n            return\n        if value < self._value:\n            if self._left is None:\n                self._left = Node(value, self)\n            else:\n                self._left.insert(value)\n        else:\n            if self._right is None:\n                self._right = Node(value, self)\n            else:\n                self._right.insert(value)\n\n    def set_parent(self, parent):\n        self._parent = parent\n\n    def get_parent(self):\n        return self._parent\n\n    def get_left(self):\n        return self._left\n\n    def get_right(self):\n        return self._right\n\n    def get_value(self):\n        return self._value\n\n    def set_value(self, value):\n        self._value = value\n\n    def set_left(self, node):\n        self._left = node\n        if node is not None:\n            node.set_parent(self)\n\n    def set_right(self, node):\n        self._right = node\n        if node is not None:\n            node.set_parent(self)\n\n    def preorder_print(self):\n        if self._value is None:\n            return\n\n        print (self._value, end=\" \")\n\n        if self._left is not None:\n            self._left.preorder_print()\n\n        if self._right is not None:\n            self._right.preorder_print()\n\n    def inorder_print(self):\n        if self._value is None:\n            return\n\n        if self._left is not None:\n            self._left.inorder_print()\n\n        print (self._value, end=\" \")\n\n        if self._right is not None:\n            self._right.inorder_print()\n\n    def postorder_print(self):\n        if self._value is None:\n            return\n\n        if self._left is not None:\n            self._left.postorder_print()\n\n        if self._right is not None:\n            self._right.postorder_print()\n\n        print (self._value, end=\" \")\n\n    def search(self, value):\n        if self._value == value:\n            return self\n        if self._left is not None and value < self._value:\n            return self._left.search(value)\n        if self._right is not None and value > self._value:\n            return self._right.search(value)\n        return None\n\n    def is_leaf(self):\n        return self._left is None and self._right is None\n    \n    def get_min(self):\n        if self._left is None:\n            return self\n        return self._left.get_min()\n    \n    def get_max(self):\n        if self._right is None:\n            return self\n        return self._right.get_max()\n    \n    def __lt__(self, node):\n        return self._value < node.get_value()\n    \n    def __gt__(self, node):\n        return self._value > node.get_value()\n    \n    def __del__(self):\n        self._value = None\n        self._left = None\n        self._right = None\n        self._parent = None\n    \n    def __repr__(self):\n        result = \"<<\"\n        if self._left is not None:\n            result += f\"{self._left.get_value()}\"\n        result += f\",{self._value},\"\n        if self._right is not None:\n            result += f\"{self._right.get_value()}\"\n        result += ','\n        if self._parent is not None:\n            result += f\"{self._parent.get_value()}\"\n        result += \">>\"\n        return result \n    \nclass SearchBinaryTree:\n    _root = None\n    \n    def __init__(self):\n        self._root = None\n    \n    def get_min(self):\n        if self._root is not None:\n            return self._root.get_min()\n\n    def get_max(self):\n        if self._root is not None:\n            return self._root.get_max()\n        \n    def insert(self, value):\n        if self._root is None:\n            self._root = Node(value) \n        else:\n            self._root.insert(value)\n    \n    def search(self, value):\n        if self._root is not None:\n            node = self._root.search(value)\n            if node is not None:\n                return True\n        return False\n    \n    def print_tree(self, scheme='PRE'):\n        if self._root is None:\n            return\n        if scheme.upper() == 'PRE':\n            self._root.preorder_print()\n        if scheme.upper() == 'IN':\n            self._root.inorder_print()\n        if scheme.upper() == 'POST':\n            self._root.postorder_print()\n        print ()\n            \n    def delete(self, value):\n        if self._root is None:\n            return False\n        \n        node_to_delete = self._root.search(value)\n        if node_to_delete is None:\n            return False\n        \n        node_to_delete_parent = node_to_delete.get_parent()\n        \n        if node_to_delete.is_leaf():\n            replace_node = None\n        elif node_to_delete._left is None:\n            replace_node = node_to_delete._right.get_min()\n        else:\n            replace_node = node_to_delete._left.get_max()\n\n        if replace_node is not None:\n            replace_node_parent = replace_node.get_parent()\n            if replace_node_parent < replace_node:\n                replace_node_parent.set_right(None)\n            else:\n                replace_node_parent.set_left(None)\n                \n        if node_to_delete_parent is not None:\n            if node_to_delete_parent > node_to_delete:\n                node_to_delete_parent.set_left(replace_node)\n            else:\n                node_to_delete_parent.set_right(replace_node)\n        else:\n            self._root = replace_node\n            \n        if replace_node is not None:\n            replace_node.set_left(node_to_delete.get_left())\n            replace_node.set_right(node_to_delete.get_right())\n\n        del node_to_delete\n            \n","2cea98a3":"def crear_arbol_ordenado ():\n    tree = SearchBinaryTree()\n    \n    for v in (25,14,36,9,19,29,39,10,15,22,27,32,20,24,31,34,17,21,23,16,18):\n        tree.insert(v)\n    \n    return tree","f526481d":"tree = crear_arbol_ordenado()\nprint ('PREORDEN')\ntree.print_tree('PRE')\nprint ('INORDEN')\ntree.print_tree('IN')\nprint ('POSTORDEN')\ntree.print_tree('POST')","21fd40c1":"print ('INORDEN')\ntree.print_tree('IN')\ntree.delete(19)\nprint ('INORDEN')\ntree.print_tree('IN')","2390258e":"tree.print_tree('POST')","87ad47f7":"# R\/","60e3c334":"# R\/","10221e20":"# R\/","bfaa32b4":"Algo que ser\u00eda \u00fatil para facilitar el proceso es primero, crear una clase llamada \u00e1rbol, esta clase es solo para apuntar al nodo ra\u00edz, que podr\u00eda cambiar, es que el nodo tenga la referencia al nodo padre, facilitar\u00eda el proceso.","bce1f342":"**Ejercicio 9.12.** Note que el \u00e1rbol del ejemplo est\u00e1 *desbalanceado*; es decir, hay nodos que tienen un solo hijo y este a su vez tiene uno o m\u00e1s hijos.  Esto suele ser un problema por que puede aumentar la complejidad en la b\u00fasqueda de un elemento a orden lineal.  Implemente un m\u00e9todo que cuando se inserte un elemento nuevo, el \u00e1rbol est\u00e9 balanceado.  Nota: Un \u00e1rbol balanceado es aquel que todos los nodos, exepto los del \u00faltimo nivel, tienen 2 nodos hijos.","4a09a8eb":"**R\/**","c1e11ce6":"**Ejercicio 9.7.** Realice un m\u00e9todo que busque un elemento en el \u00e1rbol.","594e420f":"**Ejercicio 9.5.** Modifique la clase para que soporte de manera nativa, la particularidad detectada.","e8f13f09":"**Ejercicio 9.3.** Implementar un metodo donde se impriman los nodos del \u00e1rbol en *post-orden*, es decir, primero el nodo de la izquierda, despu\u00e9s el nodo de la derecha y finalmente el valor del nodo actual.","6e56b8f9":"**Ejercicio 9.6.** Teniendo en cuanta la particularidad detectada, implemente el m\u00e9todo, insertar.","ea0b202d":"# \u00c1rboles\n\nEl \u00e1rbol es una de las estructuras no lineales m\u00e1s usada en ciencia de la computaci\u00f3n, es una estructura jer\u00e1rquica, donde un nodo padre tiene varios hijos.\n\nLo interesante es que cada hijo a su vez puede ser padre de otros hijos y as\u00ed sucesivamente.\n\nCada nodo representa un valor o un objeto en la estructura.\n\nLa ra\u00edz del \u00e1rbol es el nodo con m\u00e1s jerarqu\u00eda, es decir; el nodo que tiene hijos y no tiene un padre.\n\nCada nodo hijo es la ra\u00edz de un sub\u00e1rbol.\n\nSe le llama hoja a los nodos del \u00e1rbol que se ubican en la parte inferior del mismo, es decir; que no tengan hijos.\n\nSe le llama nodo interno a todos los nodos que tienen al menos un hijo, inclu\u00eddo el nodo ra\u00edz.\n\nCamino, es la secuencia de nodos por la cual se debe pasar para llegar desde un nodo a otro.\n\nEl grado de un nodo es la cantidad de hijos que tiene.\n\nEl grado de un arbol es el m\u00e1ximo de los grados de todos los hijos del \u00e1rbol.\n\n![arboles.png](attachment:arboles.png)\n\n\n# \u00c1rboles Binarios\n\nUn \u00e1rbol binario es un \u00e1rbol de grado 2, es decir; es aquel donde se limita la cantidad de hijos que puede tener un nodo a m\u00e1ximo 2, un hijo al lado izquierdo y uno al lado derecho.\n\n![arbolbinario.png](attachment:arbolbinario.png)\n\nNativamente en python, no hay una representaci\u00f3n de \u00e1rboles, ni de \u00e1rboles binarios, por lo tanto se debe crear de cero una clase que lo represente.","09e831c8":"**Ejercicio 9.2.** Implementar un metodo donde se impriman los nodos del \u00e1rbol en *in-orden*, es decir, primero el nodo de la izquierda, luego el nodo actual y luego el nodo de la derecha.","a892a0a4":"**Ejercicio 9.10.** Implemente un m\u00e9todo que permita cambiar el valor de un elemento por otro.","b2f1980c":"**Ejercicio 9.9.** Implemente un esquema de clases que permita la eliminaci\u00f3n de nodos y modifique los m\u00e9todos creados con la nueva implementaci\u00f3n.","68c1cadc":"**Ejercicio 9.8.** Con la implementaci\u00f3n de arboles, \u00bfse puede eliminar cualquier nodo del \u00e1rbol? \u00bfPor qu\u00e9?","0d6efee4":"![arbolbinario.png](attachment:arbolbinario.png)\n\n**Ejercicio 9.4.** Analice la funci\u00f3n del arbol creado de ejemplo. \u00bfNota alguna particularidad en los nodos?","ad4eae22":"**R\/** La respuesta es no, ya que si se elimina el nodo ra\u00edz el \u00e1rbol pierde su estructura.","39409dd2":"**Ejercicio 9.11.** Implemente un m\u00e9todo que calcule el m\u00ednimo y otro que c\u00e1lcule el m\u00e1ximo.","e18b04d9":"**Ejercicio 9.1.** Implementar un metodo donde se impriman los nodos del \u00e1rbol en *pre-orden*, es decir, primero el valor del nodo actual, despu\u00e9s el nodo de la izquierda y luego el nodo de la derecha."}}