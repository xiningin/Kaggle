{"cell_type":{"87e79104":"code","3732e21e":"code","68bf3e6a":"code","096f8bcf":"code","252205ee":"code","c75ae3ea":"code","b877867b":"code","6220babe":"code","8921998f":"code","4c9772ee":"code","6b16e8c9":"code","33698787":"code","c754a4c2":"code","2d9d20e8":"code","7fbdc90f":"code","e61b8dca":"code","8dd9c973":"code","90c2bea8":"code","2e570d7b":"code","1d12ced1":"code","62861ec8":"markdown","1f7c5d87":"markdown","9fe4304e":"markdown","36895ff0":"markdown","6df6eec3":"markdown","1cda17a1":"markdown","bba54eaf":"markdown","5e586c37":"markdown","c5fd8f7b":"markdown","e07a9af1":"markdown","1bb5c228":"markdown","d828ebcd":"markdown","80638af4":"markdown","8796ad22":"markdown","b7295a7f":"markdown","4d770b0d":"markdown","8acb2065":"markdown","21691db2":"markdown","a057e20d":"markdown","7aca5b1b":"markdown"},"source":{"87e79104":"# importing required libraries\nimport numpy as np\nimport pandas as pd\n\n# importing matplotlib\nimport matplotlib.pyplot as plt\n\n# display plots in the notebook itself\n%matplotlib inline","3732e21e":"height = [150,160,165,185]\nweight = [70, 80, 90, 100]\n\n# draw the plot\nplt.plot(height, weight)","68bf3e6a":"# draw the plot\nplt.plot(height,weight)\n# add title\nplt.title(\"Relationship between height and weight\")\n# label x axis\nplt.xlabel(\"Height\")\n# label y axis\nplt.ylabel(\"Weight\")","096f8bcf":"calories_burnt = [65, 75, 95, 99]\n\n# draw the plot for calories burnt\nplt.plot(calories_burnt)\n# draw the plot for weight\nplt.plot(weight)","252205ee":"# draw the plot for calories burnt\nplt.plot(calories_burnt)\n# draw the plot for weight\nplt.plot(weight)\n\n# add legend in the lower right part of the figure\nplt.legend(labels=['Calories Burnt', 'Weight'], loc='lower right')","c75ae3ea":"# draw the plot\nplt.plot(calories_burnt)\nplt.plot(weight)\n\n# add legend in the lower right part of the figure\nplt.legend(labels=['Calories Burnt', 'Weight'], loc='lower right')\n\n# set labels for each of these persons\nplt.xticks(ticks=[0,1,2,3], labels=['p1', 'p2', 'p3', 'p4']);","b877867b":"# figure size in inches\nplt.figure(figsize=(15,5))\n\n# draw the plot\nplt.plot(calories_burnt)\nplt.plot(weight)\n\n# add legend in the lower right part of the figure\nplt.legend(labels=['Calories Burnt', 'Weight'], loc='lower right')\n\n# set labels for each of these persons\nplt.xticks(ticks=[0,1,2,3], labels=['p1', 'p2', 'p3', 'p4']);","6220babe":"# draw the plot\nplt.plot(calories_burnt)\nplt.plot(weight,  'y--')\n\n# add legend in the lower right part of the figure\nplt.legend(labels=['Calories Burnt', 'Weight'], loc='lower right')\n\n# set labels for each of these persons\nplt.xticks(ticks=[0,1,2,3], labels=['p1', 'p2', 'p3', 'p4']);","8921998f":"# create 2 plots\nfig, ax = plt.subplots(nrows=2, ncols=2, figsize=(6,6))\n\n# plot on 0 row and 0 column\nax[0,0].plot(calories_burnt,'go')\n\n# plot on 0 row and 1 column\nax[0,1].plot(weight)\n\n# set titles for subplots\nax[0,0].set_title(\"Calories Burnt\")\nax[0,1].set_title(\"Weight\")\n\n# set ticks for each of these persons\nax[0,0].set_xticks(ticks=[0,1,2,3]);\nax[0,1].set_xticks(ticks=[0,1,2,3]);\n\n# set labels for each of these persons\nax[0,0].set_xticklabels(labels=['p1', 'p2', 'p3', 'p4']);\nax[0,1].set_xticklabels(labels=['p1', 'p2', 'p3', 'p4']);","4c9772ee":"# create 2 plots\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(6,6), sharex=True, sharey=True)\n\n# plot on 0 row and 0 column\nax[0].plot(calories_burnt,'go')\n\n# plot on 0 row and 1 column\nax[1].plot(weight)\n\n# set titles for subplots\nax[0].set_title(\"Calories Burnt\")\nax[1].set_title(\"Weight\")\n\n# set ticks for each of these persons\nax[0].set_xticks(ticks=[0,1,2,3]);\nax[1].set_xticks(ticks=[0,1,2,3]);\n\n# set labels for each of these persons\nax[0].set_xticklabels(labels=['p1', 'p2', 'p3', 'p4']);\nax[1].set_xticklabels(labels=['p1', 'p2', 'p3', 'p4']);","6b16e8c9":"# read the dataset\ndata_BM = pd.read_csv('..\/input\/big-mart-sales\/train_v9rqX0R.csv')\n# drop the null values\ndata_BM = data_BM.dropna(how=\"any\")\n# view the top results\ndata_BM.head()","33698787":"price_by_item = data_BM.groupby('Item_Type').Item_MRP.mean()[:10]\nprice_by_item","c754a4c2":"# mean price based on item type\nprice_by_item = data_BM.groupby('Item_Type').Item_MRP.mean()[:10]\n\nx = price_by_item.index.tolist()\ny = price_by_item.values.tolist()\n\n# set figure size\nplt.figure(figsize=(14, 8))\n\n# set title\nplt.title('Mean price for each item type')\n\n# set axis labels\nplt.xlabel('Item Type')\nplt.ylabel('Mean Price')\n\n# set xticks \nplt.xticks(labels=x, ticks=np.arange(len(x)))\n\nplt.plot(x, y)","2d9d20e8":"# sales by outlet size\nsales_by_outlet_size = data_BM.groupby('Outlet_Size').Item_Outlet_Sales.mean()\n\n# sort by sales\nsales_by_outlet_size.sort_values(inplace=True)\n\nx = sales_by_outlet_size.index.tolist()\ny = sales_by_outlet_size.values.tolist()\n\n# set axis labels\nplt.xlabel('Outlet Size')\nplt.ylabel('Sales')\n\n# set title\nplt.title('Mean sales for each outlet type')\n\n# set xticks \nplt.xticks(labels=x, ticks=np.arange(len(x)))\n\nplt.bar(x, y, color=['red', 'orange', 'magenta'])","7fbdc90f":"# title\nplt.title('Item MRP (price) distribution')\n\n# xlabel\nplt.xlabel('Item_MRP')\n\n# ylabel\nplt.ylabel('Frequency')\n\n# plot histogram\nplt.hist(data_BM['Item_MRP'], bins=20, color='lightblue');","e61b8dca":"data = data_BM[['Item_Outlet_Sales']]\n\n# create outlier point shape\nred_diamond = dict(markerfacecolor='r', marker='D')\n\n# set title\nplt.title('Item Sales distribution')\n\n# make the boxplot\nplt.boxplot(data.values, labels=['Item Sales'], flierprops=red_diamond);","8dd9c973":"data = data_BM[['Item_Weight', 'Item_MRP']]\n\n# create outlier point shape\nred_diamond = dict(markerfacecolor='r', marker='D')\n\n# generate subplots\nfig, ax = plt.subplots()\n\n# make the boxplot\nplt.boxplot(data.values, labels=['Item Weight', 'Item MRP (price)'], flierprops=red_diamond);","90c2bea8":"data = data_BM[['Item_Weight', 'Item_MRP']]\n\n# generate subplots\nfig, ax = plt.subplots()\n\n# add labels to x axis\nplt.xticks(ticks=[1,2], labels=['Item Weight', 'Item MRP'])\n\n# make the violinplot\nplt.violinplot(data.values);","2e570d7b":"# set label of axes \nplt.xlabel('Item_Weight')\nplt.ylabel('Item_Visibility')\n\n# plot\nplt.scatter(data_BM[\"Item_Weight\"][:200], data_BM[\"Item_Visibility\"][:200])","1d12ced1":"# set label of axes \nplt.xlabel('Item_MRP')\nplt.ylabel('Item_Outlet_Sales')\n\n# set title\nplt.title('Item Outlet Sales vs Item MRP (price)')\n\n# plot\nplt.scatter(data_BM[\"Item_MRP\"][:100], data_BM[\"Item_Outlet_Sales\"][:100], s=data_BM[\"Item_Visibility\"][:100]*1000, c='red')","62861ec8":"### 5. Histogram\n\n- **Distribution of Item price**\n- Histograms are a very common type of plots when we are looking at data like height and weight, stock prices, waiting time for a customer, etc which are continuous in nature. \n- Histogram\u2019s data is plotted within a range against its frequency. \n- Histograms are very commonly occurring graphs in probability and statistics and form the basis for various distributions like the normal -distribution, t-distribution, etc.\n- You can use `plt.hist()` to draw a histogram. It provides many parameters to adjust the plot, you can [explore more here](https:\/\/matplotlib.org\/3.1.0\/api\/_as_gen\/matplotlib.pyplot.hist.html).","1f7c5d87":"### 7. Violin Plots\n\n- **Density distribution of Item weights and Item price**","9fe4304e":"- With every X and Y argument, you can also pass an optional third argument in the form of a string which indicates the colour and line type of the plot. \n- The default format is `b-` which means a **solid blue line**. In the figure below we use `go` which means **green circles**. Likewise, we can make many such combinations to format our plot.","36895ff0":"#### Size, Colors, Markers and Line styles\n\n- You can also specify the size of the figure using method `figure()` and passing the values as a tuple of the length of rows and columns to the argument figsize. \n- The values of length are considered to be in **inches**.","6df6eec3":"- Notice that in the above figure we have two empty plots, that is because we created 4 subplots ( 2 rows and 2 columns).\n- As a data scientist, there will be times when you need to have a common axis for all your subplots. You can do this by using the **sharex** and **sharey** paremeters of `subplot()`.","1cda17a1":"### 8. Scatter Plots\n\n- **Relative distribution of item weight and it's visibility**\n- It depicts the distribution of two variables using a cloud of points, where each point represents an observation in the dataset.\n- This depiction allows the eye to infer a substantial amount of information about whether there is any meaningful relationship between them.\n\n**NOTE : Here, we are going to use only a subset of the data for the plots.**","bba54eaf":"### Introduction\n\n- Making plots and static or interactive visualizations is one of the most important tasks in data analysis. It may be a part of the exploratory process; for example, helping identify outliers, needed data transformations, or coming up with ideas for models.\n\n- Matplotlib is the most extensively used library of python for data visualization due to it's high flexibility and extensive functionality that it provides.\n\n### Table of Contents\n\n1. Setting up\n    - Importing matplotlib\n    - Matplotlib for Jupyter notebook\n    - Dataset \n    - Documentation\n2. Matplotlib basics\n    - Make a simple plot\n    - Labels, and Legends\n    - Size, Colors, Markers, and Line Styles\n    - Figures and subplots\n3. Line Chart\n4. Bar Chart\n5. Histogram\n6. Box plot\n7. Violin plot\n8. Scatter plot\n9. Bubble plot","5e586c37":"### 1. Setting up\n\n#### Importing matplotlib\n\nJust as we use the `np` shorthand for NumPy and the `pd` shorthand for Pandas, we will use standard shorthands for Matplotlib import:\n\n```python\nimport matplotlib.pyplot as plt\n```\nWe import the **pyplot** interface of matplotlib with a shorthand of `plt` and we will be using it like this in the entire notebook.\n\n#### Matplotlib for Jupyter notebook\n\nYou can directly use matplotlib with this notebook to create different visualizations in the notebook itself. In order to do that, the following command is used:\n\n```python\n%matplotlib inline\n```\n\n#### Documentation\nAll the functions covered in this notebook and their detail description can be found in the [official matplotlib documentation](https:\/\/matplotlib.org\/3.1.0\/api\/_as_gen\/matplotlib.pyplot.html).","c5fd8f7b":"###  4. Bar Chart\n\n- Suppose we want to have a look at **what is the mean sales for each outlet type?** \n- A bar chart is another simple type of visualization that is used for categorical variables.\n- You can use `plt.bar()` instead of `plt.plot()` to create a bar chart.\n","e07a9af1":"- Notice that in the previous plot, we are not able to understand that each of these values belong to different persons.\n- Look at the X axis, can we add labels to show that each belong to different persons?\n- The labeled values on any axis is known as a **tick**.\n- You can use the `xticks` to change both the location of each tick and it's label. Let's see this in an example","1bb5c228":"### 6. Box Plots\n\n- **Distribution of sales**\n- Box plot shows the three quartile values of the distribution along with extreme values. \n- The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. \n- This means that each value in the boxplot corresponds to an actual observation in the data.\n- Let's try to visualize the distributio of Item_Outlet_Sales of items.","d828ebcd":"#### Figure and subplots\n\n- We can use `subplots()` method to add more than one plots in one figure. \n- The `subplots()` method takes two arguments: they are **nrows, ncols**. They indicate the number of rows, number of columns respectively. \n- This method creates two objects: **figure** and **axes** which we store in variables `fig` and `ax`. \n- You plot each figure by specifying its position using row index and column index. Let's have a look at the below example:","80638af4":"### 3. Line Chart\n\n- We will create a line chart to denote the **mean price per item**. Let's have a look at the code.\n- With some datasets, you may want to understand changes in one variable as a function of time, or a similarly continuous variable.\n- In matplotlib, **line chart** is the default plot when using the `plot()`. ","8796ad22":"- Adding **legends** is also simple in matplotlib, you can use the `legend()` which takes **labels** and **loc** as label names and location of legend in the figure as paremeters.","b7295a7f":"### 2. Matplotlib basics\n\n#### Make a simple plot\n\nLet's create a basic plot to start working with!","4d770b0d":"- Notice in the above plot, now both x and y axes are only labelled once for each of the outer plots. This is because the inner plots \"share\" both the axes.\n- Also, there are only **two plots** since we decreased the number of rows to 1 and columns to 2 in the `subplot()`.\n- You can learn more about [subplots here](https:\/\/matplotlib.org\/3.1.0\/api\/_as_gen\/matplotlib.pyplot.subplots.html).\n\n### Load dataset\nLet's load a dataset and have a look at first 5 rows.","8acb2065":"### 9. Bubble Plots\n\n- **Relative distribution of sales, item price and item visibility**\n- Let's make a scatter plot of Item_Outlet_Sales and Item_MRP and make the **size** of bubbles by the column Item_Visibility.\n- Bubble plots let you understand the interdependent relations among 3 variables. \n\n**Note that we are only using a subset of data for the plots.**","21691db2":"We pass two arrays as our input arguments to **plot()** method and invoke the required plot. Here note that the first array appears on the x-axis and second array appears on the y-axis of the plot.\n\n#### Title, Labels, and Legends\n- Now that our first plot is ready, let us add the title, and name x-axis and y-axis using methods title(), xlabel() and ylabel() respectively.\n","a057e20d":"- We can also plot multiple sets of data by passing in multiple sets of arguments of X and Y axis in the `plot()` method as shown.","7aca5b1b":"- You can also create multiple boxplots for different columns of your dataset.\n- In order to plot multiple boxplots, you can use the same `subplots()` that we saw earlier.\n- Let's see Item_Weight, Item_MRP distribution together"}}