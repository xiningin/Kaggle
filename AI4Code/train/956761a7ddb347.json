{"cell_type":{"8396d85a":"code","1d0c7d48":"code","99546476":"code","09de7c0c":"code","44d26768":"code","7294e633":"code","261b555e":"code","99a6e3de":"code","bc3414c4":"code","72917760":"code","d6ee5c5e":"code","b98caaea":"code","184c8ed4":"code","71749ae5":"code","f13116fe":"code","2ad169d5":"code","44d26a44":"code","260c7109":"code","3861937a":"code","e6cd1289":"code","0f8a9df9":"code","fe35d82a":"code","5d3323a5":"code","e7f19ccc":"code","ea870986":"code","9d36b4b9":"code","1a02e33c":"code","042ffc63":"code","17708f35":"code","b4d1b0cc":"code","f0bca63c":"code","c8e34126":"code","35464a7a":"code","9b625814":"code","ac6a4d52":"code","e1497414":"code","0916af2d":"code","dbac58fd":"code","7f947cf0":"code","1e7a2da5":"code","80f19f69":"code","7912d505":"code","3fe70ba2":"code","bd066111":"markdown","73e3f3f2":"markdown","b8bdc98c":"markdown","3952edf8":"markdown","81d0ff1e":"markdown","2dca736e":"markdown","586d162a":"markdown","80401195":"markdown","46992b9c":"markdown","d733d999":"markdown","f9519e88":"markdown","0b3ca08b":"markdown","24787978":"markdown","43000482":"markdown"},"source":{"8396d85a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1d0c7d48":"calendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')","99546476":"sales.head()","09de7c0c":"unique_items = np.unique(['item_id']).shape[0]\nnum_stores = np.unique(sales['store_id']).shape[0]\nunique_items * num_stores, sales.shape","44d26768":"persist = np.repeat(sales['d_1913'].values.reshape(-1,1),28,axis=1)","7294e633":"plt.plot(np.arange(0,1913),sales.iloc[0,6:])\nplt.plot(np.arange(1913,1913+28),persist[0])\nplt.xlim(1850,1940)","261b555e":"ma = np.repeat(np.mean(sales.iloc[:,6:],axis=1).values.reshape(-1,1),28,axis=1)","99a6e3de":"plt.plot(np.arange(0,1913),sales.iloc[0,6:])\nplt.plot(np.arange(1913,1913+28),ma[0])\nplt.xlim(1850,1940)","bc3414c4":"sales.head()","72917760":"mean_by_cat = np.zeros((3,1913))\nfor i in np.arange(1,1914):\n    df = pd.DataFrame(sales.groupby('cat_id').agg('d_{}'.format(i)).mean())\n    mean_by_cat[:,i-1] = df.values[:,0]","d6ee5c5e":"%matplotlib inline\nplt.figure(figsize=(10,7))\nplt.plot(mean_by_cat[0,:],label='foods')\nplt.plot(mean_by_cat[1,:],label='hobbies')\nplt.plot(mean_by_cat[2,:],label='household')\nplt.legend()\nplt.show()","b98caaea":"calendar[calendar.d=='d_1427']","184c8ed4":"mean_by_cat = np.zeros((3,366,5))\nyears = np.arange(1,1913,365)\nfor j in np.arange(0,5):\n    for i in np.arange(years[j],years[j+1]):\n        df = pd.DataFrame(sales.groupby('cat_id').agg('d_{}'.format(i)).mean())\n        mean_by_cat[:,i-years[j],j] = df.values[:,0]","71749ae5":"%matplotlib inline\nplt.figure(figsize=(15,7))\nplt.subplot(1,2,1)\nplt.plot(mean_by_cat[0,:,0],label='year1')\nplt.plot(mean_by_cat[0,:,1],label='year2')\nplt.plot(mean_by_cat[0,:,2],label='year3')\nplt.plot(mean_by_cat[0,:,3],label='year4')\nplt.plot(mean_by_cat[0,:,4],label='year5')\nplt.legend()\nplt.xlabel('day')\nplt.ylabel('food sales')\nplt.subplot(1,2,2)\nplt.boxplot((mean_by_cat[0,:,0],mean_by_cat[0,:,1],mean_by_cat[0,:,2],mean_by_cat[0,:,3],mean_by_cat[0,:,4]))\nplt.xlabel('year')\nplt.show()","f13116fe":"%matplotlib inline\nplt.figure(figsize=(15,7))\nplt.subplot(1,2,1)\nplt.plot(mean_by_cat[1,:,0],label='year1')\nplt.plot(mean_by_cat[1,:,1],label='year2')\nplt.plot(mean_by_cat[1,:,2],label='year3')\nplt.plot(mean_by_cat[1,:,3],label='year4')\nplt.plot(mean_by_cat[1,:,4],label='year5')\nplt.legend()\nplt.xlabel('day')\nplt.ylabel('hobby sales')\nplt.subplot(1,2,2)\nplt.boxplot((mean_by_cat[1,:,0],mean_by_cat[1,:,1],mean_by_cat[1,:,2],mean_by_cat[1,:,3],mean_by_cat[1,:,4]))\nplt.xlabel('year')\nplt.show()","2ad169d5":"%matplotlib inline\nplt.figure(figsize=(15,7))\nplt.subplot(1,2,1)\nplt.plot(mean_by_cat[2,:,0],label='year1')\nplt.plot(mean_by_cat[2,:,1],label='year2')\nplt.plot(mean_by_cat[2,:,2],label='year3')\nplt.plot(mean_by_cat[2,:,3],label='year4')\nplt.plot(mean_by_cat[2,:,4],label='year5')\nplt.legend()\nplt.xlabel('day')\nplt.ylabel('household sales')\nplt.subplot(1,2,2)\nplt.boxplot((mean_by_cat[2,:,0],mean_by_cat[2,:,1],mean_by_cat[2,:,2],mean_by_cat[2,:,3],mean_by_cat[2,:,4]))\nplt.xlabel('year')\nplt.show()","44d26a44":"year = [1424,1787]\nlastyearcols = [\"d_{}\".format(i) for i in np.arange(year[0],year[1]+1)]\nlastyearsales = sales[['id','item_id','dept_id','cat_id','store_id','state_id']+lastyearcols]","260c7109":"mean_by_cat = np.zeros((3,364))\nfor i in np.arange(year[0],year[1]+1):\n    df = pd.DataFrame(lastyearsales.groupby('cat_id').agg('d_{}'.format(i)).mean())\n    mean_by_cat[:,i-year[0]] = df.values[:,0]","3861937a":"%matplotlib inline\nplt.figure(figsize=(10,7))\nplt.plot(mean_by_cat[0,:],label='foods')\nplt.plot(mean_by_cat[1,:],label='hobbies')\nplt.plot(mean_by_cat[2,:],label='household')\nplt.legend()\nplt.show()","e6cd1289":"foodweekly = mean_by_cat[0,:].reshape(mean_by_cat.shape[1]\/\/7,7)\nhobbweekly = mean_by_cat[1,:].reshape(mean_by_cat.shape[1]\/\/7,7)\nhouseweekly = mean_by_cat[2,:].reshape(mean_by_cat.shape[1]\/\/7,7)","0f8a9df9":"%matplotlib inline\ndays = ['Mon.','Tues.','Wed.','Thurs.','Fri.','Sat.','Sun.']\nplt.figure(figsize=(15,7))\nplt.subplot(1,3,1)\nplt.plot(days,foodweekly[10,:],'k')\nplt.plot(days,foodweekly[30,:],'k')\nplt.plot(days,foodweekly[50,:],'k')\nplt.plot(days,np.mean(foodweekly,axis=0),'b')\nplt.ylabel('food')\nplt.subplot(1,3,2)\nplt.plot(days,hobbweekly[10,:],'k')\nplt.plot(days,hobbweekly[30,:],'k')\nplt.plot(days,hobbweekly[50,:],'k')\nplt.plot(days,np.mean(hobbweekly,axis=0),'orange')\nplt.ylabel('hobbies')\nplt.subplot(1,3,3)\nplt.plot(days,houseweekly[10,:],'k')\nplt.plot(days,houseweekly[30,:],'k')\nplt.plot(days,houseweekly[50,:],'k')\nplt.plot(days,np.mean(houseweekly,axis=0),'green')\nplt.ylabel('household')\nplt.show()","fe35d82a":"X = np.mean(foodweekly,axis=0)\nfoodweeklytrend = X-np.mean(X)\nX = np.mean(hobbweekly,axis=0)\nhobbweeklytrend = X-np.mean(X)\nX = np.mean(houseweekly,axis=0)\nhouseweeklytrend = X-np.mean(X)","5d3323a5":"lastyearsales['mean'] = np.mean(lastyearsales.iloc[:,6:],axis=1)\n#np.repeat(np.mean(lastyearsales.iloc[:,6:],axis=1).values.reshape(-1,1),28,axis=1)","e7f19ccc":"lastyearmean = lastyearsales[['id','mean']].copy()","ea870986":"%matplotlib inline\nplt.figure()\nplt.plot(sales[sales.id=='HOBBIES_1_002_CA_1_validation'].iloc[0,6:].values)\n\nplt.figure()\ny,x = np.histogram(sales[sales.id=='HOBBIES_1_002_CA_1_validation'].iloc[0,6:].values,5)\nplt.bar(x[0:-1],y)\nplt.show()","9d36b4b9":"df_oneitem = pd.DataFrame(sales[sales.id=='HOBBIES_1_002_CA_1_validation'].iloc[0,6:].values.astype('int64'))\ndf_oneitem.columns=['sales']\ndf_oneitem['wday'] = calendar['wday'].iloc[0:df_oneitem.shape[0]]","1a02e33c":"np.unique(calendar['event_name_1'][~pd.isnull(calendar.event_name_1)])","042ffc63":"days_df = calendar.iloc[0:1913]","17708f35":"def makeholidayvars(holiday_name,event_name,interval,df):\n    holiday_days = df[(df.event_name_1 == event_name) | \n                                            (df.event_name_2 == event_name)].d\n    df[holiday_name] = np.zeros((df.shape[0],1)).astype(int)\n    backdays = interval[0]\n    forwarddays = interval[1]\n    array_size = holiday_days.index.shape[0]*(backdays+1+forwarddays)\n    inds = np.linspace(tuple(holiday_days.index-backdays),\n                       tuple(holiday_days.index+forwarddays),backdays+1+forwarddays).reshape(array_size,1).astype('int64')\n    \n    df[holiday_name][inds[:,0]] = 1\n    return df","b4d1b0cc":"days_df = makeholidayvars('Chanukah','Chanukah End',[10,1],days_df)\ndays_df = makeholidayvars('ChristmasSeason','Christmas',[30,7],days_df)","f0bca63c":"days_df[days_df.ChristmasSeason==1]","c8e34126":"sample_submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","35464a7a":"foodrows = sample_submission[sample_submission['id'].str.contains('FOOD')]\nhobbrows = sample_submission[sample_submission['id'].str.contains('HOBB')]\nhouserows = sample_submission[sample_submission['id'].str.contains('HOUSE')]\n\nfoodrows = pd.merge(foodrows, lastyearmean, on=['id'], how='inner')\nhobbrows = pd.merge(hobbrows, lastyearmean, on=['id'], how='inner')\nhouserows = pd.merge(houserows, lastyearmean, on=['id'], how='inner')","9b625814":"hobbrows['mean'] = hobbrows['mean']*1.1\nhouserows['mean'] = houserows['mean']*1.1","ac6a4d52":"cols = ['F{}'.format(i) for i in np.arange(1,29)]\nfoodrows[cols] = np.tile(foodweeklytrend,(foodrows.shape[0],4))\nhobbrows[cols] = np.tile(hobbweeklytrend,(hobbrows.shape[0],4))\nhouserows[cols] = np.tile(houseweeklytrend,(houserows.shape[0],4))","e1497414":"allrows = pd.concat([foodrows,hobbrows,houserows])","0916af2d":"sample_submission.drop(columns=cols,inplace=True)\nsample_submission = pd.merge(sample_submission,allrows,how='left',on='id')","dbac58fd":"sample_submission.head()","7f947cf0":"sample_submission[cols] = sample_submission[cols].add(list(sample_submission['mean'].values),axis='rows')","1e7a2da5":"sample_submission.head()","80f19f69":"sample_submission.iloc[30490:,1:] = sample_submission.iloc[0:30490,1:].values","7912d505":"sample_submission.drop(columns='mean',inplace=True)","3fe70ba2":"sample_submission.to_csv('submit_Latimer.csv',index=False)","bd066111":"# Deeper look at the data","73e3f3f2":"# Moving average forecast\nThis one takes the average over some epoch and predicts that as the sole future value. (lb = 1.01225)","b8bdc98c":"Every year there is a day when sales drop to zero, that is Christmas. There is also a smaller dip about a month before that representing Thanksgiving.","3952edf8":"Let's look at the last year for which we have complete data, days 1427 to 1791. This is Christmas 2014 to day before Christmas 2015. ","81d0ff1e":"Looks like Thursday is the slowest day in every category. Food shopping peaks on Sundays while hobbies and household peaks on Saturday.","2dca736e":"# Persistence forecast\nThis is a very bad forecast that simply persists the last value forward in time. (lb = 1.16344)","586d162a":"There seems to be a weekly oscillation, let's check that out.","80401195":"Description of the variables:\n\n**calendar**\n* date: The date in a \u201cy-m-d\u201d format.<br>\n* wm_yr_wk: The id of the week the date belongs to.<br>\n* weekday: The type of the day (Saturday, Sunday, \u2026, Friday).<br>\n* wday: The id of the weekday, starting from Saturday.<br>\n* month: The month of the date.<br>\n* year: The year of the date.<br>\n* event_name_1: If the date includes an event, the name of this event.<br>\n* event_type_1: If the date includes an event, the type of this event.<br>\n* event_name_2: If the date includes a second event, the name of this event.<br>\n* event_type_2: If the date includes a second event, the type of this event.<br>\n* snap_CA, snap_TX, and snap_WI: A binary variable (0 or 1) indicating whether the stores of CA,\nTX or WI allow SNAP2 purchases on the examined date. 1 indicates that SNAP purchases are\nallowed.<br>\n\n**sell_prices**\n* store_id: The id of the store where the product is sold.<br>\n* item_id: The id of the product.<br>\n* wm_yr_wk: The id of the week.<br>\n* sell_price: The price of the product for the given week\/store. The price is provided per week\n(average across seven days). If not available, this means that the product was not sold during the\nexamined week. Note that although prices are constant at weekly basis, they may change through\ntime (both training and test set). <br>\n\n**sales_train_validation** \n* item_id: The id of the product.<br>\n* dept_id: The id of the department the product belongs to.<br>\n* cat_id: The id of the category the product belongs to.<br>\n* store_id: The id of the store where the product is sold.<br>\n* state_id: The State where the store is located.<br>\n* ad_1, d_2, \u2026, d_i, \u2026 d_1941: The number of units sold at day i, starting from 2011-01-29.","46992b9c":"Since both the household and hobby means went up the last couple of years, let's boost them a bit.","d733d999":"The number of unique item_ids multiplied by the number of unique stores should give us every entry in the dataset","f9519e88":"# Submit","0b3ca08b":"Looks like household and hobby sales have both gone up in recent years, while food sales have stayed flat.","24787978":"# Products with lots of zeros","43000482":"Let's look at sales over these categories each year."}}