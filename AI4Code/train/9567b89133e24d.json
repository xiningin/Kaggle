{"cell_type":{"594df6d5":"code","401b0c25":"code","70dd18a0":"code","5d844fa7":"code","18258ea1":"code","1850b7d2":"code","1316e65f":"code","0f88639e":"code","2ad10d22":"code","58d83e07":"markdown","507f0601":"markdown","d8ea3d8d":"markdown","7d9f1ed8":"markdown","4093a348":"markdown","420f920c":"markdown"},"source":{"594df6d5":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom keras.models import Sequential\nfrom keras.layers.core import  Lambda , Dense, Flatten, Dropout\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import BatchNormalization, Convolution2D , MaxPooling2D\nfrom keras.optimizers import Adam ,RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import  backend as K\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","401b0c25":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\nprint('Train:', train.shape)\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\nprint('Test:', test.shape)\nX_train = (train.iloc[:,1:].values)\ny_train = train.iloc[:,0].values\nX_test = test.values\nX_train = X_train.reshape(X_train.shape[0], 28, 28,1)\nprint('X_train:', X_train.shape)\nX_test = X_test.reshape(X_test.shape[0], 28, 28,1)\nprint('X_test:', X_test.shape)\nfrom keras.utils.np_utils import to_categorical\ny_train= to_categorical(y_train)\nprint('y_train:', y_train.shape)","70dd18a0":"from sklearn.model_selection import train_test_split\nfrom keras.preprocessing import image\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)\nprint('train size: ', X_train.shape)\nprint('val size: ', X_val.shape)\ngen =ImageDataGenerator(rescale=1\/255., rotation_range=8, width_shift_range=0.08, shear_range=0.3,\n                               height_shift_range=0.08, zoom_range=0.08)\n\nval_gen = image.ImageDataGenerator(rescale=1\/255.)\n\nbatches = gen.flow(X_train, y_train, batch_size=64)\nval_batches = val_gen.flow(X_val, y_val, batch_size=64)","5d844fa7":"model = Sequential([\n    Convolution2D(32,(3,3), activation='relu', input_shape=(28,28,1)),\n    BatchNormalization(axis=1),\n    Convolution2D(32,(3,3), activation='relu'),\n    MaxPooling2D(),\n    BatchNormalization(axis=1),\n    Convolution2D(64,(3,3), activation='relu'),\n    BatchNormalization(axis=1),\n    Convolution2D(64,(3,3), activation='relu'),\n    MaxPooling2D(),\n    Flatten(),\n    BatchNormalization(),\n    Dense(512, activation='relu'),\n    BatchNormalization(),\n    Dense(10, activation='softmax')\n    ])\nmodel.summary()\nmodel.compile(Adam(lr=0.01), loss='categorical_crossentropy', metrics=['acc'])","18258ea1":"history=model.fit_generator(generator=batches, steps_per_epoch=batches.n, epochs=5, validation_data=val_batches, validation_steps=val_batches.n)","1850b7d2":"acc      = history.history[     'acc' ]\nval_acc  = history.history[ 'val_acc' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\nplt.plot  ( epochs,     acc )\nplt.plot  ( epochs, val_acc )\nplt.title ('Training and validation accuracy')\nplt.figure()\n\nplt.plot  ( epochs,     loss )\nplt.plot  ( epochs, val_loss )\nplt.title ('Training and validation loss'   )","1316e65f":"model.evaluate_generator(val_batches)","0f88639e":"test_batches = val_gen.flow(X_test, shuffle=False, batch_size=1)\npredictions = model.predict_generator(test_batches, steps=X_test.shape[0])","2ad10d22":"submissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)), \"Label\": np.argmax(predictions, axis=1)})\nprint(submissions)\nsubmissions.to_csv(\"submission.csv\", index=False, header=True)","58d83e07":"import Libraries and display available files","507f0601":"Split data and use generators","d8ea3d8d":"Build model","7d9f1ed8":"Load and reshape input files","4093a348":"Display fitting curve","420f920c":"Validate the output quality"}}