{"cell_type":{"142c10b3":"code","3039edb5":"code","c1c828aa":"code","6d316a4c":"code","8db02230":"code","f2c0883f":"code","40f6194a":"code","35701914":"code","6842d516":"code","a02c935e":"code","86fb1591":"code","5bac530c":"code","0d419aa3":"code","0198cd0e":"code","39f704f7":"code","319cb091":"code","0a93408f":"code","da837c20":"code","05202f15":"code","369212ce":"code","b93b73f1":"code","ca23a072":"code","f534ec7b":"code","8a547e07":"code","1c45ba3e":"code","a86f4fb2":"code","f6e8d71b":"code","331db63a":"code","6a832e27":"code","09c18ad1":"code","3f8027f6":"code","04e7e1d3":"code","837a3f4c":"code","24fa07e4":"code","804db83e":"code","3bf42b45":"code","e5c2e785":"code","6191a770":"code","5c8744d0":"code","93280873":"code","419fd2e1":"code","5fc0885e":"code","2ba509db":"code","1f067ca8":"code","1154d214":"code","523fd381":"code","52b55f0c":"code","320f0140":"code","12bc88b2":"code","1b22b209":"code","1491f815":"code","1c91c09e":"code","1b26a6e4":"code","6a0da172":"code","7b9e20ab":"code","ad23a23f":"markdown","658ca63b":"markdown","8e6c886d":"markdown","83759bc2":"markdown","b5efa455":"markdown","b69fe61f":"markdown","54c250e4":"markdown","a7182fce":"markdown","22f6c253":"markdown","9791a0c2":"markdown","8d1d1ea1":"markdown","a5e498b5":"markdown","24a3aa5d":"markdown","9657e5b1":"markdown","c5b9b511":"markdown","bf51d8aa":"markdown","d08ffbb3":"markdown","2da3a868":"markdown","ad91d291":"markdown","5af2b347":"markdown","f45bb158":"markdown","8a40620a":"markdown","96613567":"markdown","bfcb2a6b":"markdown","cdbc6ab9":"markdown","9d6aee4c":"markdown","ee707e73":"markdown","84dff682":"markdown","9716d568":"markdown","9cdb4145":"markdown","b655671f":"markdown","9661d484":"markdown","bfc01ccb":"markdown","3ada860f":"markdown","06414a35":"markdown","489433f2":"markdown","932b3dc7":"markdown","7e4a0fec":"markdown","d051fd29":"markdown","85421341":"markdown","1373957b":"markdown"},"source":{"142c10b3":"# Import all the required libraries\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.express as px","3039edb5":"# read playstore applications data from csv\n\napps = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","c1c828aa":"apps","6d316a4c":"apps.head()","8db02230":"apps.tail()","f2c0883f":"apps.isna().any()","40f6194a":"apps.isna().sum()","35701914":"# check whether the record with missing type contains some useful information. if yes, donot drop, otherwise drop\napps[apps.Type.isna()==True]","6842d516":"apps.Type.value_counts()","a02c935e":"# drop records with missing type and content rating\n\napps.dropna(subset=['Type', 'Content Rating'], axis=0, inplace=True)","86fb1591":"apps.isna().sum()","5bac530c":"apps.duplicated().any()","0d419aa3":"# drop duplicates and update the dataframe\n\napps.drop_duplicates(inplace=True)","0198cd0e":"# cross check is there are still some duplicates\n\napps.duplicated().any()","39f704f7":"# check the number of missing values in Rating after removing duplicates\n\napps.isna().sum()","319cb091":"# finding the data types of each attribute \n\napps.info()","0a93408f":"apps[apps.Type == 'Paid'].head()","da837c20":"# list of characters to remove\nchars_to_remove = ['+', ',', '$']\n\n# columns from where to remove special characters\ncols_to_clean = ['Reviews', 'Installs', 'Price']\n\nfor col in cols_to_clean:\n    for char in chars_to_remove:\n        \n        apps[col] = apps[col].apply(lambda x: x.replace(char, ''))\n        \n\napps[apps.Type == \"Paid\"]","05202f15":"apps['Content Rating'].unique()","369212ce":"# replace 'everyone 10+' to only '10+', 'Mature 17+' to 'Mature', and 'Adults only 18+' to 'Adults' only\n\napps['Content Rating'].replace(['Everyone 10+', 'Mature 17+', 'Adults only 18+'], ['10+', 'Mature', 'Adults'], inplace=True)","b93b73f1":"apps['Content Rating'].unique()","ca23a072":"apps['Content Rating'] = apps['Content Rating'].astype('category')","f534ec7b":"apps.Price = apps.Price.astype('float64')\napps.Installs = apps.Installs.astype('int')\napps.Reviews = apps.Reviews.astype('int')\napps.Type = apps.Type.astype('category')\napps.Category = apps.Category.astype('category')","8a547e07":"# convert genres to category and last updated to datetime object as it contains dates\n\napps.Genres = apps.Genres.astype('category')\napps['Last Updated'] = pd.to_datetime(apps['Last Updated'])","1c45ba3e":"# check the data type of each attribute\n\napps.info()","a86f4fb2":"# Pick out all rows and columns from 'App' to 'Last Updated' i.e from 0 to 10\n\napps2 = apps.iloc[:, :11]\napps2","f6e8d71b":"top_rated = apps2.nlargest(10, 'Rating')\ntop_rated","331db63a":"sns.set_style('darkgrid')\nplt.hist(top_rated['Genres'])\nplt.xlabel('Category of 10 highly rated Apps')\nplt.ylabel('Count')\nplt.margins(0.10)\nplt.show()","6a832e27":"#Number of categories\nprint(\"Total Categories: {}\".format(len(apps2.Category.unique())))\n\nplt.figure(figsize=[15, 6])\nsns.set_context('talk')\nsns.countplot(x='Category', data = apps2, order=apps2.Category.value_counts().index)\nplt.xticks(rotation=90)\n\nplt.show()","09c18ad1":"installs = apps2.groupby('Type')['Installs'].agg('sum')\ninstalls","3f8027f6":"# Distribution of paid and unpaid applications rating\n\navg_rating = apps2.Rating.mean()\nprint(\"Average Rating: {}\".format(avg_rating))\n\nsns.displot(data=apps2, x='Rating', kde=True, hue='Type', height=8, aspect=1.2)\nplt.axvline(avg_rating, linestyle='--', color = 'red', linewidth = 2.0)\nplt.text(3.3, 800, 'Average Rating -->', color = 'red', fontsize=14)\nplt.title('PDF or Distribution of Rating with Type', fontsize=18)\nplt.show()","04e7e1d3":"# to confirm that the distribution of rating is negatively skewed, \n# we are using empirical commulative distribution function\n\nplt.figure(figsize=[15, 6])\nsns.ecdfplot(data = apps2, x='Rating', hue='Type', legend=True)\nplt.title(\"ECDF of Rating\", fontsize=16)\nplt.show()","837a3f4c":"apps_with_size = apps2","24fa07e4":"apps_with_size['size_unit'] = ['KB' if x.endswith('k')\\\n                                else 'MB' if x.endswith('M') else 'Varies with device'\\\n                                for x in apps2.Size]","804db83e":"apps_with_size.head()","3bf42b45":"sns.displot(data=apps_with_size, x='Rating', kde=True, hue='Type', height=4, aspect=1.5, col='size_unit')\nplt.show()","e5c2e785":"#apps_with_price = apps2[apps2.Type == 'Paid']\n\napps_with_price = apps2.loc[(apps2.Type == 'Paid')]\napps_with_price.head()","6191a770":"plt.figure(figsize = [15, 10])\nsns.set_context('paper')\nsns.stripplot(y='Category', x='Price', data=apps_with_price,\\\n              jitter=True, size=6, palette='plasma', marker='D')\nplt.axvline(apps_with_price.Price.mean(), linewidth=1.5, linestyle='-')\nplt.text(20, 2, '<-- Average Price', fontsize=15, color='red')\nplt.show()","5c8744d0":"#high_prices = apps_with_price[apps_with_price.Price >= 250]\n\nhigh_prices = apps_with_price.loc[(apps_with_price.Price >= 250)]\nhigh_prices","93280873":"plt.figure(figsize = [15, 10])\nsns.set_context('paper')\n\n\nimp_cats = ['FINANCE', 'BUSINESS', 'HEALTH', 'SOCIAL', 'LIFESTYLE', 'TOOLS', 'GAME', 'COMMUNICATION', 'EDUCATION']\n\npopular_apps = apps_with_price.loc[(apps_with_price.Category.isin(imp_cats))]\n\n# Let's explore these application under price $100\npopular_apps_under_100 = popular_apps.loc[(popular_apps.Price <= 100)]\n\nprint(\"Average Price: ${}\".format(round(apps_with_price.Price.mean(), 2)))\n\nsns.set()\nplt.plot(popular_apps_under_100.Price, popular_apps_under_100.Category, marker='D', linestyle='none',\\\n        markersize = 8, color='goldenrod')\nplt.axvline(apps_with_price.Price.mean(), linewidth=1.5, linestyle='-')\nplt.text(16, 2, '<-- Average Price', fontsize=15, color='red')\nplt.xlabel(\"Price (in dollars)\", fontsize=14)\nplt.ylabel(\"Popular Categories\", fontsize=14)\nplt.title(\"Prices of Popular categories under $100\", fontsize=16)\nplt.show()","419fd2e1":"business_outlier = popular_apps_under_100[popular_apps_under_100.Price >= 85]\nbusiness_outlier","5fc0885e":"reviews_df = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore_user_reviews.csv')\nreviews_df.head()","2ba509db":"# check for null values\n\nreviews_df.isna().sum()","1f067ca8":"# check duplicates\n\nreviews_df.duplicated()","1154d214":"reviews_df.loc[(reviews_df.duplicated()==True)]","523fd381":"# drop duplicates\n\nreviews_df.drop_duplicates(inplace=True)","52b55f0c":"reviews_df.shape","320f0140":"# after removing duplice records we are left with relatively small amount of null values\n\nreviews_df.isna().sum()","12bc88b2":"app_df = reviews_df.merge(apps2, on=['App'], suffixes=('_rev', '_org'))\napp_df.head()","1b22b209":"app_df.shape","1491f815":"# group applications based on their category and then sentiment to find out the proportion of \n# positive, negative, and neutral reviews of popular categories\n\ncategory_sent = app_df.groupby('Category', group_keys=False)['Sentiment'].value_counts(normalize=True).rename('proportion').reset_index()\ncategory_sent","1c91c09e":"# from all above categories pick out records with popular categories only\n\nsent_of_pop_cat = category_sent[category_sent.Category.isin(imp_cats)]\nsent_of_pop_cat","1b26a6e4":"fig = px.bar(sent_of_pop_cat, x=\"proportion\", y=\"Category\", color=\"Sentiment\", barmode=\"group\",\n             color_discrete_sequence=px.colors.qualitative.Safe, hover_name=\"Sentiment\",\n             category_orders={ \"Sentiment\": [\"Positive\", \"Negative\", \"Neutral\"]})\n\nfig.update_layout(barmode='stack', title=\"Sentiment Proportion Along Category\")\nfig.update_xaxes(showgrid=True, ticks=\"outside\", tickson=\"boundaries\")\n\nfig.show()","6a0da172":"# group applications on the basis of their type (paid, free) and then sentiments\n\ntype_sent = app_df.groupby('Type')['Sentiment'].value_counts(normalize=True).rename('percent').reset_index()\ntype_sent","7b9e20ab":"# use plotly to plot bar plots\n\nfig = px.bar(type_sent, x=\"Type\", y=\"percent\", color=\"Sentiment\",\n             color_discrete_sequence=px.colors.qualitative.Antique, hover_name=\"Sentiment\",\n             category_orders={ \"Sentiment\": [\"Positive\", \"Negative\", \"Neutral\"]})\n\nfig.update_layout(barmode='stack', title=\"Sentiment Proportion Along Type\")\nfig.update_xaxes(showgrid=True, ticks=\"outside\", tickson=\"boundaries\")\n\nfig.show()","ad23a23f":"##### Mean average rating is approx 4.2. We can say that rating is negatively skewed or exponentially increasing. But for Paid apps ratio of rating is quite less than Free apps. To confirm the distribution of rating we can plot ecdf","658ca63b":"##### Two data sets : 1. googleplaystore.csv    2. googleplaystore_user_reviews.csv","8e6c886d":"## Impact of Price on app installations","83759bc2":"##### As thisi data is all about applications of google play store, so different information for same application may lead to ambiguity. Remove all duplicates wo can perform analysis on much clean data","b5efa455":"##### It's hard to interpret which type of applications have generally have high prices for their installation. So, let's find out those categories with high prices","b69fe61f":"##### Education, comminucation, and Lifestyle applications usually get positive response, Games get most negative comments as compared to other applications","54c250e4":"### 4. Select Interested\/Informative Attributes Only","a7182fce":"##### We can say that FINANCE, LIFESTYLE, TOOLS, GAMES, and BUSINESS applications tends to be more expensive then others as these applications have prices greater then average price. However there is only one BUSINESS application with price close to 100 dollar, Now we will find that application and explore its reviews and rating to make sure that the development of this application is purposeful","22f6c253":"## DATA CLEANING STAGE","9791a0c2":"## Do the above same work to find out the effect of sentiments on type of application","8d1d1ea1":"##### Seems like these apps are not useful as it all have some common keywords like I AM RICH, may be some developers had made these apps just for their joy or some other purpose. So, now it's necessory to filter out important apps like FINANCE, BUSINESS, HEALTH, SOCIAL, LIFESTYLE, TOOLS, GAMES, COMMUNICATION, and EDUCATION","a5e498b5":"### Most Rated Apps (Top 10)","24a3aa5d":"##### Now we are about to end this analysis after exploring which type of applications get greater number of reviews and then we will perform sentiment analysis on reviews csv of playstore applications to find apps with positive reviews and rating","9657e5b1":"## EXPLORATORY DATA ANALYSIS","c5b9b511":"##### Here, we can easily see some special characters in Price and Installs columns. We can't convert string to integer if it doesn't contain all digits and no special characters or alphabets. So, firstly we have to remove these special characters","bf51d8aa":"##### There are 1474 values missing in Rating column, 1 in Type, 1 in Content Rating, 8 in current version, and 3 in android version.\n##### We can drop missing records of Type and Content Rating as its count is much less than the size of dataframe, but we can't drop null values of Rating because it has 1474 record with missing data","d08ffbb3":"##### Improper data type of attributes could make analysis more difficult and incorrect, for example if a datetime column is interpreted as string by python then you wouldn't be able to extract useful information from date like month, year or day easily, similarly if integer or float column is interpreted as string then you wouldn't be able to calculate its avergae or total. So, in order to simplify our analysis we should first correct our data types","2da3a868":"##### In this notebook, we analyzed over ten thousand apps from the Google Play Store. We can use our findings to inform our decisions should we ever wish to create an app ourselves.","ad91d291":"## Distribution of App Ratings","5af2b347":"# Sentiment Anaysis Based on Reviews","f45bb158":"##### We can draw conclusion from reviews of users ","8a40620a":"##### Out of 10 highly rated applications, 6 were of type 'DATING' , 3 were of type 'EVENTS', and only 1 belongs to the category of 'COMICS'","96613567":"##### Most of the applications belongs to the category of FAMILY, then GAMES, and then TOOLS, BUSINESS and MEDICAL. The rest have less count or less innovations","bfcb2a6b":"## Apps rating with respect to size of application","cdbc6ab9":"### Categories of Highly Rated  Apps","9d6aee4c":"##### This application has no rating and has only 6 reviews, its size is 10 MB and it has only 10 installs. ","ee707e73":"##### To perform on all attributes without having their need usually considered as illogical thing, So sliced your dataframe before doing EDA everytime. Here, I am not interested in doing analysis on current or android versions of application so I m ignoring these attributes and storing all others as apps2","84dff682":"##### Now we have corrected the values of Price, Installs, Reviews (if it contains any special character), and Content Rating. Next step is to change their data types\n##### Content Rating, Type and Category has discrete values thus are categorical so, change their data type to categorical\n##### Price contain floating point number, and Installs and Reviews contain integer values","9716d568":"##### Content Rating column contains some complicated or we can say ambiguous\/uncleaned values so replace them with simple ones ","9cdb4145":"### 1.  Find number of missing values","b655671f":"## Category Vs Price","9661d484":"## Using PLOTLY to plot proportion of sentiment of each category","bfc01ccb":"#### Large free applications tends to have more rating as compared to small applications (in kilobytes)\n#### Application with varying size have more rating if they are unpaid","3ada860f":"#### Free and Paid Apps rating is negatively skewed ass tail extends from left hand side","06414a35":"## Exploring Categories of applications","489433f2":"### 3. Correcting Data Types of each Attribute","932b3dc7":"### Merge previous application dataframe with this review dataframe to explore reviews of free, paid, and popular category of apps","7e4a0fec":"#### People usually tend to install and use free application as compared to paid, Now we can analyze the impact of price on apps rating","d051fd29":"### Applications with High Prices","85421341":"### 2. Remove Duplicate Records","1373957b":"##### By plotting Sentiment proportion of Paid VS Free apps, we observe that free apps receive a lot of harsh comments, as indicated by the graph. Reviews for paid apps appear never to be extremely negative. This may indicate something about app quality, i.e., paid apps being of higher quality than free apps on average."}}