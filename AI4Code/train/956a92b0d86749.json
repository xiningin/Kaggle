{"cell_type":{"9c83f7ac":"code","b471df7b":"code","5d5d3fba":"code","c39b59cd":"code","0235b667":"code","ba23acc8":"code","5a24a33d":"code","af42f9f3":"code","52f3c460":"code","a806278a":"code","4794f616":"code","afeaff7f":"code","abfa9054":"code","edc0adf8":"code","ca0c55fe":"code","14005af4":"code","59ba6ee2":"code","6ec5efec":"code","fc0b3d7f":"code","f795dcee":"code","26b50070":"code","0ef1bf5f":"code","222af9a9":"code","25ec746b":"code","3e8bdf0c":"code","f7755658":"code","243c8172":"code","51e18e2f":"code","1cb59285":"code","fe554bf9":"code","58b30bfd":"code","eb640cbc":"code","697c4058":"code","0c72e549":"code","fbd50831":"code","2ec1bac2":"code","0a88cdbf":"markdown","2f294bba":"markdown","fb98d99a":"markdown","a1fa638f":"markdown","dcd99dc1":"markdown","7995a939":"markdown","2dddca4f":"markdown","8fa1d761":"markdown","89f8999c":"markdown","cc5a589d":"markdown","245b0ca0":"markdown","6a484387":"markdown","9e1b979c":"markdown","ee4d36b4":"markdown","7d9a7693":"markdown","74fe406a":"markdown","51d7f8e2":"markdown","2dd7ead0":"markdown","8960e371":"markdown","308d6c91":"markdown","651903ff":"markdown","3b8e1c2c":"markdown","44199460":"markdown","1a0397d5":"markdown","2ac90510":"markdown","6ee88ca1":"markdown","ed300362":"markdown","401a50ed":"markdown","570e1a6c":"markdown","79967f02":"markdown","3fc8cc64":"markdown","759533b4":"markdown","79869ed7":"markdown"},"source":{"9c83f7ac":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","b471df7b":"df = pd.read_csv('..\/input\/hotel-booking\/hotel_booking.csv')","5d5d3fba":"df.info()","c39b59cd":"df.head()","0235b667":"df.tail()","ba23acc8":"df.columns","5a24a33d":"df.describe()","af42f9f3":"sns.pairplot(df, hue='hotel', vars=['lead_time', \n       'arrival_date_week_number',\n       'arrival_date_day_of_month', 'stays_in_weekend_nights',\n       'stays_in_week_nights'])","52f3c460":"sns.pairplot(df, hue='hotel', vars=['adults', \n       'children', 'babies',\n       'is_repeated_guest', 'previous_cancellations',\n       'previous_bookings_not_canceled'])","a806278a":"len(df.index)","4794f616":"def isMissing(df):\n    \n    # Fastest method to check if there are any Missings in a Dataframe\n    # Numpy ( np.isnan(df.values).any() ) is 14% faster than df.isnull().any().any()\n    \n    if df.isna().values.any():\n        \n        # The frequency of Missings (relative) per column\n        temp = df.isna().sum() \n        \n        print(\"The column {} with lowest amount of missing contains {} missings.\"\n              .format(df.count().idxmax(), temp.min()))\n        print(\"The column {} with highest amount of missing contains {} missings.\"\n              .format(df.count().idxmin(), temp.max()))\n#         return True\n        \n    else:\n        return 'No Missing in columns!!'\n    \n\n\nisMissing(df)","afeaff7f":"plt.figure(figsize=(8, 8), dpi=200)\ntemp = df.isna().sum()\nX = pd.DataFrame({'col': df.columns})\nY = pd.DataFrame({'missing': temp.tolist()})\nX = X.join(Y['missing'])\n# X\nsns.barplot(y=X['col'], x=Y['missing'], data=X)","abfa9054":"col_missing = df.loc[:, df.isnull().any()].columns\ndf_missing = df[col_missing].isna().sum()\nX_missing = pd.DataFrame({'most_missing_col': col_missing.tolist()})\nY_missing = pd.DataFrame({'count': df_missing.tolist()})\nX_missing = X_missing.join(Y_missing['count'])\nplt.figure(figsize=(6, 4), dpi=100)\nsns.barplot(x=X_missing['most_missing_col'], y=Y_missing['count'], data=X_missing)\n# sns.countplot(data=X_missing['count'], x=X_missing['most_missing_col'])\nplt.title(\"The columns has the most missing data\", fontsize = 20)","edc0adf8":"df.isna().any().any()","ca0c55fe":"df.isna().sum().sum()","14005af4":"df.isna().sum()\/(len(df))*100","59ba6ee2":"temp = df.isna().sum()\/(len(df))*100\nprint(\"Column with lowest amount of missings contains {} % missings.\".format(temp.min()))\nprint(\"Column with highest amount of missings contains {} % missings.\".format(temp.max()))","6ec5efec":"df.loc[:, df.isnull().any()].columns","fc0b3d7f":"df.isnull().sum()","f795dcee":"df.count().idxmin()","26b50070":"# Remove 'company' column\ndf = df.drop('company', axis=1)","0ef1bf5f":"df.info()","222af9a9":"df.columns","25ec746b":"# pandas >= 1.1 df.value_counts is available!\n# This methos is faster\ncountries = df.value_counts(subset=['hotel','country']).reset_index(name='count')\ncountries","3e8bdf0c":"countriesGroupBy = df.groupby(['hotel','country'])['lead_time'].count().sort_values(ascending=False)[0:10]\ncountriesGroupBy","f7755658":"i = 0\nj = 0\nprint(\"For CITY HOTEL: \\n\")\nwhile i < 5:\n    if countries['hotel'][j] == \"City Hotel\":\n        print(\"The {}st country with most travelers is {} with {} travelers.\".format(i+1, countries['country'][j], countries['count'][j]))\n        i += 1\n        j += 1\n    else:\n        j += 1\n        \ni = 0\nj = 0\nprint(\"\\nFor RESORT HOTEL: \\n\")\nwhile i < 5:\n    if countries['hotel'][j] == \"Resort Hotel\":\n        print(\"The {}st country with most travelers is {} with {} travelers.\".format(i+1, countries['country'][j], countries['count'][j]))\n        i += 1\n        j += 1\n    else:\n        j += 1","243c8172":"# Identify the top 5 countries\n# Method 1\n# countries.sum(axis=1).nlargest(5).to_dict()\n# countries.sum(axis=1).nlargest(5).plot.bar(figsize=(12,8))\n\n# Method 2\nbar = countries.nlargest(5, 'count')\ncountries.nlargest(5, 'count').plot.bar(figsize=(12,8))\n","51e18e2f":"plt.figure(figsize=(6, 4), dpi=100)\nsns.barplot(x=bar['country'], y=bar['count'], data=countries,\n            label=\"top 5 countries most travelers\", color=\"r\")\nplt.title(\"top 5 countries most travelers\")","1cb59285":"person = df.loc[df['adr'].idxmax()]['name']\nadr = df.loc[df['adr'].idxmax()]['adr']\nprint(\"{} : who has the highest paid Average Daily Rate (ADR) with the amount {} $\".format(person,adr))","fe554bf9":"np.round(df['adr'].mean(), 2)","58b30bfd":"weekendNight = df['stays_in_weekend_nights'].mean()\nweekNight = df['stays_in_week_nights'].mean()\navgNightSpent = np.round(weekendNight + weekNight \/ 2, 2)\nprint(\"The average number of nights spent is {} .\".format(avgNightSpent))","eb640cbc":"specialReq = df[['name', 'email', 'total_of_special_requests']]\nspecialReq.loc[specialReq['total_of_special_requests'] >= 5]","697c4058":"def splitColString(dataFrame, col, delimeter, firstCol, lastCol, dropping = False):\n    # new data frame with split value columns\n    new = dataFrame[col].str.split(delimeter, n = 1, expand = True)\n    \n    # making separate firstCol column from new data frame\n    dataFrame[firstCol] = new[0]\n    \n    # making separate lastCol column from new data frame\n    dataFrame[lastCol] = new[1]\n    \n    if dropping :\n        # Dropping old column\n        dataFrame.drop(columns = [col], inplace = True)\n        \n    return dataFrame\n\ndef printMostFamilies(dataFrame, number):\n    i = 0\n    print(\"Most Frequent Surnames: \\n\")\n    while i < number:\n        print(\"The {}st surname with most travelers is {} with {} travelers.\".format(i+1, dataFrame['surname'][i], dataFrame['count'][i]))\n        i += 1\n\n        \n        \n# Split name Column to First Name and Surname\nnewDF = splitColString(df,'name',' ', 'first Name', 'surname', False)\n\n# Frequent Surname\nmostSurname = newDF.value_counts(subset='surname').reset_index(name='count')\n# mostSurname\n\n# Print Most Surname\nprintMostFamilies(mostSurname, 5)","0c72e549":"df.sort_values(['babies', 'children'], ascending=False)","fbd50831":"# For test\nmaxChild = df[['babies', 'children']].max()\nminChild = df[['babies', 'children']].min()\navg = (maxChild + minChild) \/ 2\ndf[df['children'] >= avg[1]][['name','babies', 'children']]","2ec1bac2":"def printMostAreaCode(dataFrame, number):\n    i = 0\n    print(\"Most Frequent Area Code: \\n\")\n    while i < number:\n        print(\"The {}st area code with most booked is {} with {} time.\".format(i+1, dataFrame['area-code'][i], dataFrame['count'][i]))\n        i += 1\n\n# Split phone-number Column to area-code and phone\ndf = splitColString(df,'phone-number','-', 'area-code', 'phone', False)\nareaCodeCount = df.value_counts(subset='area-code').reset_index(name= 'count')\n# areaCodeCount\nprintMostAreaCode(areaCodeCount, 3)\n","0a88cdbf":"**11- What are the most frequent surnames? (Identify 5 most families)**","2f294bba":"**9- Specify the average number of nights spent(up to two decimal point)**","fb98d99a":"**12- Identify the people who have booked the hotel with the largest number of babies and children.**","a1fa638f":"Now we have a pandas series as a result, which we can process as we like:","dcd99dc1":"**13- Specify the area code of the most booked areas (3 frequent codes)**","7995a939":"**C) The frequency of Missings (relative)**","2dddca4f":"Sometimes you may simply want to determine the relative frequency of the missings per column to decide whether to simply drop or substitute the missings:","8fa1d761":"%timeit **df.isna().any().any()**\n\n**47.8 ms \u00b1 1.24 ms per loop** (mean \u00b1 std. dev. of 7 runs, 10 loops each)","89f8999c":"This is exactly what we wanted. Now we know that there are missings but how long did the execution take?","cc5a589d":"**D) Determine columns with missings**","245b0ca0":"**B) The frequency of Missings (absolute)**","6a484387":"**5- Remove the 'company' column from the dataframe.**","9e1b979c":"**8- Specify the average of total ADRs. (Up to two decimal point)**","ee4d36b4":"*** Extera work**","7d9a7693":"> ***We\u2019ve tried five different methods, all of which give the same result. The version with Numpy is 14 % faster than the slowest version.***","74fe406a":"**The search for missings is usually one of the first steps in data analysis.**\n\n**At the beginning, the question is whether there are any missings at all and, if so, how many there are. As is offen the case, Pandas offers several ways to determine the number of missings. Depending on how large your dataframe is, there can be real differences in performance.**","51d7f8e2":"**Determine column with most missing data**","2dd7ead0":"**Let's compare a few methods:**","8960e371":"**7- Name the person who has the highest paid Average Daily Rate (ADR). What is the amount?**","308d6c91":"A quick look at the data","651903ff":"In certain situations, it may be useful to determine the columns with the missings and process them separately from the other columns:","3b8e1c2c":"**6- Which countries do most travelers come from? Identify the top 5 countries.**","44199460":"**4- Is there data missing? If yes, which column has the most missing data?**","1a0397d5":"In the first step we only wanted to know whether there were any missings at all. Now we also want to know how many Missings are in our dataframe.","2ac90510":"**A) The search for Missings**","6ee88ca1":"\n\n**1- Read the database**","ed300362":"%timeit **df.isnull().any().any()**\n\n**46.2 ms \u00b1 899 \u00b5s per loop** (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n%timeit **df.isnull().values.any()**\n\n**44.6 ms \u00b1 731 \u00b5s per loop** (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n%timeit **df.isna().values.any()**\n\n**41.8 ms \u00b1 229 \u00b5s per loop** (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n%timeit **np.isnan(df.values).any()**\n\n**41.3 ms \u00b1 368 \u00b5s per loop** (mean \u00b1 std. dev. of 7 runs, 10 loops each)","401a50ed":"First, we simply expect the result true or false to check if there are any missings:","570e1a6c":"**10- Specify the name and email address of people who had 5 special requests.**","79967f02":"![missing_value_in_pandas.png](attachment:missing_value_in_pandas.png)","3fc8cc64":"**2- Check basic database information**","759533b4":"# **Hotel Booking Fundamental analysis using pandas**\n\nThis data article describes two datasets with hotel demand data. \n\n**One of the hotels (H1) is a resort hotel and the other is a city hotel (H2).** \n\nBoth datasets share the same structure, with 31 variables describing the 40,060 observations of H1 and 79,330 observations of H2. \n\nEach observation represents a hotel booking. Both datasets comprehend bookings due to arrive between the 1st of July of 2015 and the 31st of August 2017,including bookings that effectively arrived and bookings that were canceled. \n\nSince this is hotel real data, all data elements per taining hotel or costumer identification were deleted. Due to the scarcity of real business data for scientific and educational purposes, these datasets can have an important role for research and education in revenue management, machine learning, or data mining, as well as in other fields.\n\nThis database contains real data extracted from the following article:\n\n> Hotel Booking Demand Datasets, written by Nuno Antonio, Ana Almeida, and Luis Nunes for Data in Brief, Volume 22, February 2019.\n\n\nConsider this database and write the appropriate code snippet for the following:\n\n","79869ed7":"**3- How many rows does this database have?**"}}