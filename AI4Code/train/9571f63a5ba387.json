{"cell_type":{"67231b17":"code","f3504364":"code","10c3fc36":"code","b0a2b8b0":"code","14d05045":"code","fe17c5c6":"code","f83e6c35":"code","652b8f2f":"code","bc232b05":"code","f80d0370":"code","49dd198c":"code","360960f4":"code","eb06cfa6":"code","a34f4301":"markdown","ad7650c0":"markdown"},"source":{"67231b17":"import pandas as pd\nimport numpy as np\nimport datatable as dt\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn import linear_model\nfrom sklearn import decomposition\nfrom sklearn import preprocessing\nimport optuna\nimport gc","f3504364":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\n\nprint('Training data: ')\ntrain.head()","10c3fc36":"TARGET = 'target'\nFEATURES = [col for col in train.columns if col not in ['id', TARGET]]","b0a2b8b0":"# %%time\n# train[\"mean\"] = train[FEATURES].mean(axis=1)\n# train[\"std\"] = train[FEATURES].std(axis=1)\n# train[\"min\"] = train[FEATURES].min(axis=1)\n# train[\"max\"] = train[FEATURES].max(axis=1)\n\n# test[\"mean\"] = test[FEATURES].mean(axis=1)\n# test[\"std\"] = test[FEATURES].std(axis=1)\n# test[\"min\"] = test[FEATURES].min(axis=1)\n# test[\"max\"] = test[FEATURES].max(axis=1)\n\n# FEATURES.extend(['mean', 'max', 'min', 'max'])","14d05045":"%%time\nscaler = preprocessing.StandardScaler()\nfor col in FEATURES:\n    train[col] = scaler.fit_transform(train[col].to_numpy().reshape(-1,1))\n    test[col] = scaler.transform(test[col].to_numpy().reshape(-1,1))\n    \nX = train[FEATURES].to_numpy().astype(np.float32)\ny = train[TARGET].to_numpy().astype(np.float32)\nX_test = test[FEATURES].to_numpy().astype(np.float32)\n\ndel train, test\ngc.collect()","fe17c5c6":"# %%time\n# train = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas().drop('id', axis=1)\n# test = dt.fread('..\/input\/tabular-playground-series-oct-2021\/test.csv').to_pandas().drop('id', axis=1)\n# sample_submission = dt.fread('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv').to_pandas()","f83e6c35":"# the only preparation is converting the target variable to a binary variable\n# train.target = train.target.astype(int)","652b8f2f":"# I did not optimize the parameters, I borrowed it, thanks to those who worked\n# I added only early_stopping_rounds myself\nparams = {'iterations': 18000,          \n          'objective': 'CrossEntropy',\n          'bootstrap_type': 'Bernoulli',\n          'learning_rate': 0.015,   #0.023575206684596582, # 0.05071417780137978\n          'reg_lambda': 36.30433203563295,\n          'random_strength': 43.75597655616195,\n          'depth': 8,\n          'eval_metric' : 'AUC',\n          'min_data_in_leaf': 12,\n          'leaf_estimation_iterations': 1,\n          'subsample': 0.8227911142845009,\n           'task_type': 'GPU',\n           'devices': '0'\n         }","bc232b05":"# X = train.drop('target', axis=1).copy()\n# y = train['target'].copy()\n# X_test = test.copy()\n\n# del train\n# gc.collect\n# del test\n# gc.collect","f80d0370":"f_pred = pd.DataFrame(np.zeros(X.shape[0]), columns = ['pred'] )","49dd198c":"%%time\nkf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\npreds = []\nscores = []\n\nfor fold, (idx_train, idx_valid) in enumerate(kf.split(X, y)):\n    X_train, y_train = X[idx_train], y[idx_train]\n    X_valid, y_valid = X[idx_valid], y[idx_valid]\n    \n    model = CatBoostClassifier(**params)\n    \n    model.fit(X_train,y_train,\n              eval_set=[(X_valid,y_valid)],\n              early_stopping_rounds=1000,\n              verbose=1000)\n    \n    pred_valid = model.predict_proba(X_valid)[:,1]\n    fpr, tpr, _ = roc_curve(y_valid, pred_valid)\n    f_pred.loc[idx_valid, 'pred'] = pred_valid\n    score = auc(fpr, tpr)\n    scores.append(score)\n    \n    print(f\"Fold: {fold + 1} Score: {score}\" \"\\n\")    \n    \n    test_preds = model.predict_proba(X_test)[:,1]\n    preds.append(test_preds)\n    \nprint(f\"Overall Validation Score: {np.mean(scores)}\")","360960f4":"from sklearn.metrics import roc_auc_score\n\nscore = roc_auc_score(y, f_pred['pred'])\nprint (\"OOF RocAUC : \", score)","eb06cfa6":"predictions = np.mean(np.column_stack(preds),axis=1)\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsample_submission['target'] = predictions\nsample_submission.to_csv('.\/sam_submission_catboost.csv', index=False)\nsample_submission.head()","a34f4301":"The result looks good. Catboost is a great time saver!","ad7650c0":"A copy of https:\/\/www.kaggle.com\/eugenebee\/tsp-oct-21-head-on-catboost\n\nSome quick fiddling of learning rate just to get a feel for the model.\n\nAlso added OOF score to get a better idea of model perfromance withpout wasting submissions.\n\nInitial glance suggests that it is one of the better performing catboost models\n\nWill need to spend some more time checking the params to see if it is a candidate for the ensemble set\n"}}