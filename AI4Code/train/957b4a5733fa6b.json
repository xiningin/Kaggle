{"cell_type":{"82c7a6fb":"code","3027f2ee":"code","7f518ec6":"code","8afeab4d":"code","3f0e877e":"code","d009bf6e":"code","b7db8c67":"code","72801389":"code","633b414b":"code","e0549b0e":"code","2d2ddc04":"code","46ea370d":"code","8f31c882":"code","03b70223":"markdown","cfe13b18":"markdown","31d58de7":"markdown","a5ec36bd":"markdown","6066ed72":"markdown","c3205215":"markdown"},"source":{"82c7a6fb":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport gc\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","3027f2ee":"# Loading data\ntrain_tr = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv', index_col = 'TransactionID')\ntrain_id = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv', index_col = 'TransactionID')\n\ntest_tr = pd.read_csv('..\/input\/ieee-fraud-detection\/test_transaction.csv', index_col = 'TransactionID')\ntest_id = pd.read_csv('..\/input\/ieee-fraud-detection\/test_identity.csv', index_col = 'TransactionID')\n\n# Join train and test datasets\ntrain_df = train_tr.join(train_id)\ntest_df = test_tr.join(test_id)\n\n# Removing datasets that we don't need anymore\ndel train_id\ndel train_tr\ndel test_id\ndel test_tr\n\ngc.collect()\n\nprint(train_df.shape)\nprint(test_df.shape)","7f518ec6":"train_df.head()","8afeab4d":"train_df.info()","3f0e877e":"test_df.info()","d009bf6e":"# Check memory usage of different features\n# train_df.memory_usage()","b7db8c67":"# You can use these commands to see datatypes description\nprint(np.iinfo('int16'))\nprint(np.finfo('float64'))","72801389":"# First I will select only numeric columns\nnum_cols = [col for col in train_df.columns.values if str(train_df[col].dtype) != 'object']","633b414b":"# To fullfill my curiocity, I'll create small dataframe with minimum and maximum values\ntypes_df = pd.DataFrame({'Col': num_cols, \n              'min': [train_df[col].min() for col in num_cols],\n              'max': [train_df[col].max() for col in num_cols],\n              'dtype': [str(train_df[col].dtype) for col in num_cols]})\n\ntypes_df['dtype_min'] = types_df['dtype'].map({'int64': np.iinfo('int64').min, 'float64': np.finfo('float64').min})\ntypes_df['dtype_max'] = types_df['dtype'].map({'int64': np.iinfo('int64').max, 'float64': np.finfo('float64').max})\ntypes_df.sample(20)","e0549b0e":"def reduce_size(dataset):\n    for col in dataset.columns.values:\n        if str(dataset[col].dtype) == 'object':\n            # Change object to category if needed\n#             dataset[col] = dataset[col].astype('category')\n            continue\n        elif str(dataset[col].dtype)[:3] == 'int':                    \n            dataset[col] = pd.to_numeric(dataset[col], downcast = 'integer')\n        else:   \n            dataset[col] = pd.to_numeric(dataset[col], downcast = 'float')\n        \n    return dataset","2d2ddc04":"train_df = reduce_size(train_df)\ntest_df = reduce_size(test_df)","46ea370d":"train_df.info()","8f31c882":"test_df.info()","03b70223":"The goal of this kernel is to show very simple way to reduce data size without writing kilometers of code with if\/else constructions, also I want to give some explanations for beginners - why it works.\n\nSo, let's get our hands dirty.","cfe13b18":"After loading our data and joining it in separate dataseets we can start working on size of our data.\n\nFirst let's look what we have now using info() method.","31d58de7":"To change datatype of each feature I'll use pd.to_numeric function with 'downcast' parameter ([link to documentation](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.to_numeric.html))\n\n**Downcast**: If not None, and if the data has been successfully cast to a numerical dtype (or if the data was numeric to begin with), downcast that resulting data to the smallest numerical dtype possible according to the following rules:\n\n*     \u2018integer\u2019 or \u2018signed\u2019: smallest signed int dtype (min.: np.int8)\n*     \u2018unsigned\u2019: smallest unsigned int dtype (min.: np.uint8)\n*     \u2018float\u2019: smallest float dtype (min.: np.float32)","a5ec36bd":"So, using couple strings of code we managed to decrease size of our datasets by 2GB. But It's not all what we can do here, we can see that we have a lot of float32 types in datasets and after some feature engineering and filling of NaN values we can convert them to int or uint types decreasing size of our data even more.","6066ed72":"We can see that int64 or float64 consumes 8 bits of memory and our dataset does not have such big values to store, so we can easily reduce dataset size by downcasting dtypes of our features.\n\nAlso pandas stores strings as 'object' type. If amount of unique values in selected column is less than 50% of the count of these values, than we can convert it to 'category' datatype to reduce memory usage.\n\nSo, let's start data size reduction. First I want to divide numeric features by two groups - to_integer and to_float.","c3205215":"We can see that weight of our train and test datasets are about 2GB each. Also we can see that in both datasets we have only 3 datatypes - float64, int64 and object and each columns have size of 4724320 bytes (even isFraud feature). This is most interesting part, because the size of our data depends on datatypes of our features.\n\nHere is short description of dtypes:\n* bool type - consumes 1 byte of memory, range True or False\n\n**int types**:\n* int8 - consumes 1 byte of memory, range from -128 to 127\n* int16 - consumes 2 bytes of memory, range from -32 768 to 32 767\n* int32 - consumes 4 bytes of memory, range from -2 147 483 648 to 2 147 483 648\n* int64 - consumes 8 bytes of memory, range from -9 223 372 036 854 775 808 to 9 223 372 036 854 775 808\n\n**uint types:**\n* uint8 - consumes 1 byte of memory, range from 0 to 255\n* uint16 - consumes 2 bytes of memory, range from 0 to 65 535\n* uint32 - consumes 4 bytes of memory, range from 0 to 4 294 967 295\n* uint64 - consumes 8 bytes of memory, range from 0 to 18 446 744 073 709 551 615\n\n**float types:**\n* float16 - consumes 2 bytes of memory, range from -6.55040e+04 to 6.55040e+04, resolution 0.001\n* float32 - consumes 4 bytes of memory, range from -3.4028235e+38 to 3.4028235e+38, resolution 1e-06\n* float64 - consumes 8 bytes of memory, range from -1.7976931348623157e+308 to 1.7976931348623157e+308, resolution 1e-15"}}