{"cell_type":{"6e3b485d":"code","7e04f6c6":"code","743c18b4":"code","61e9ee1c":"code","dac94dcc":"code","8db1c013":"code","5852647c":"code","afca7cfe":"code","bd72c475":"code","ed561859":"code","c3ca9729":"code","bfcb5290":"code","9b42101e":"code","d2e83b80":"code","850b6589":"code","d7ec2879":"code","2e589634":"code","8c72f205":"code","11ba5488":"code","7825fe85":"code","249408d3":"markdown","a99992c3":"markdown","88d69ecc":"markdown","0148c476":"markdown","b0a82632":"markdown","aecb492a":"markdown","cb89f931":"markdown","f45450e2":"markdown","d6774e82":"markdown","3ae30bb8":"markdown","87e16ac6":"markdown","6a1aebd7":"markdown","3ab0d0a7":"markdown","6aba2072":"markdown","6e04f391":"markdown","c9160939":"markdown","fab3fe95":"markdown","36855ee7":"markdown","63d124de":"markdown","b48905c8":"markdown","71412613":"markdown"},"source":{"6e3b485d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.integrate import odeint\n\nfrom plotly.offline import iplot, init_notebook_mode\nimport math\nimport bokeh \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom urllib.request import urlopen\nimport json\nfrom dateutil import parser\nfrom bokeh.layouts import gridplot\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.layouts import row, column\nfrom bokeh.resources import INLINE\nfrom bokeh.io import output_notebook\nfrom bokeh.models import Span\nimport warnings\nwarnings.filterwarnings(\"ignore\")\noutput_notebook(resources=INLINE)","7e04f6c6":"import plotly as py\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=False)","743c18b4":"corona_data=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nchoro_map=px.choropleth(corona_data, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","61e9ee1c":"pd.options.mode.chained_assignment = None\n\n# Read the data\nus_data_path = \"\/kaggle\/input\/covid19-in-usa\/\"\nus_df = pd.read_csv(us_data_path + \"us_covid19_daily.csv\")\nus_states_df = pd.read_csv(us_data_path + \"us_states_covid19_daily.csv\")\nus_df[\"date\"] = pd.to_datetime(us_df[\"date\"], format=\"%Y%m%d\")\nus_states_df = us_states_df.reindex(index=us_states_df.index[::-1])\nus_states_df[\"date\"] = pd.to_datetime(us_states_df[\"date\"], format=\"%Y%m%d\").dt.date.astype(str)\n#us_states_df.head()\n\n# US state code to name mapping\nstate_map_dict = {'AL': 'Alabama',\n 'AK': 'Alaska',\n 'AS': 'American Samoa',\n 'AZ': 'Arizona',\n 'AR': 'Arkansas',\n 'CA': 'California',\n 'CO': 'Colorado',\n 'CT': 'Connecticut',\n 'DE': 'Delaware',\n 'DC': 'District of Columbia',\n 'D.C.': 'District of Columbia',\n 'FM': 'Federated States of Micronesia',\n 'FL': 'Florida',\n 'GA': 'Georgia',\n 'GU': 'Guam',\n 'HI': 'Hawaii',\n 'ID': 'Idaho',\n 'IL': 'Illinois',\n 'IN': 'Indiana',\n 'IA': 'Iowa',\n 'KS': 'Kansas',\n 'KY': 'Kentucky',\n 'LA': 'Louisiana',\n 'ME': 'Maine',\n 'MH': 'Marshall Islands',\n 'MD': 'Maryland',\n 'MA': 'Massachusetts',\n 'MI': 'Michigan',\n 'MN': 'Minnesota',\n 'MS': 'Mississippi',\n 'MO': 'Missouri',\n 'MT': 'Montana',\n 'NE': 'Nebraska',\n 'NV': 'Nevada',\n 'NH': 'New Hampshire',\n 'NJ': 'New Jersey',\n 'NM': 'New Mexico',\n 'NY': 'New York',\n 'NC': 'North Carolina',\n 'ND': 'North Dakota',\n 'MP': 'Northern Mariana Islands',\n 'OH': 'Ohio',\n 'OK': 'Oklahoma',\n 'OR': 'Oregon',\n 'PW': 'Palau',\n 'PA': 'Pennsylvania',\n 'PR': 'Puerto Rico',\n 'RI': 'Rhode Island',\n 'SC': 'South Carolina',\n 'SD': 'South Dakota',\n 'TN': 'Tennessee',\n 'TX': 'Texas',\n 'UT': 'Utah',\n 'VT': 'Vermont',\n 'VI': 'Virgin Islands',\n 'VA': 'Virginia',\n 'WA': 'Washington',\n 'WV': 'West Virginia',\n 'WI': 'Wisconsin',\n 'WY': 'Wyoming'}\n\nstate_code_dict = {v:k for k, v in state_map_dict.items()}\nstate_code_dict[\"Chicago\"] = 'Illinois'\n\ndef correct_state_names(x):\n    try:\n        return state_map_dict[x.split(\",\")[-1].strip()]\n    except:\n        return x.strip()\n    \ndef get_state_codes(x):\n    try:\n        return state_code_dict[x]\n    except:\n        return \"Others\"\n\ncovid_19_df = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nus_covid_df = covid_19_df[covid_19_df[\"Country\/Region\"]==\"US\"]\nus_covid_df[\"Province\/State\"] = us_covid_df[\"Province\/State\"].apply(correct_state_names)\nus_covid_df[\"StateCode\"] = us_covid_df[\"Province\/State\"].apply(lambda x: get_state_codes(x))","dac94dcc":"statewise_cases = pd.DataFrame(us_covid_df.groupby(['Province\/State'])['Confirmed', 'Deaths', 'Recovered'].max().reset_index())\nstatewise_cases[\"Country\"] = \"US\" # in order to have a single root node\nfig = px.treemap(statewise_cases, path=['Country','Province\/State'], values='Confirmed',\n                  color='Confirmed', hover_data=['Province\/State'],\n                  color_continuous_scale='matter')\nfig.show()","8db1c013":"global_df = pd.read_csv('\/kaggle\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_global_regional_v1.csv')\nusa_df = pd.read_csv('\/kaggle\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_USA_v1.csv')\nus_dff = pd.read_csv('\/kaggle\/input\/us-counties-covid-19-dataset\/us-counties.csv')","5852647c":"import folium\ncenter = [37.0902405, -95.7128906]\nm = folium.Map(location = center, zoom_start = 3)\n\nfor lat, lng in zip(usa_df.lat, usa_df.lng):\n    folium.CircleMarker(\n        [lat, lng],\n        radius = 5,\n        fill = True,\n        color = 'Black',\n        fill_color = 'red',\n        fill_opacity = 0.6\n        ).add_to(m)\n    \nm\n\n","afca7cfe":"from folium.plugins import HeatMap\nm = folium.Map(location = center, zoom_start = 3)\n\nheat_data = [[row['lat'],row['lng']] for index, row in usa_df.iterrows()]\nHeatMap(heat_data,radius=16.5, blur = 6.5).add_to(m)\n\nm\n","bd72c475":"#statewise_cases\nstate_details = pd.pivot_table(us_covid_df, values=['Confirmed','Deaths','Recovered'], index='Province\/State', aggfunc='max')\nstate_details['Recovery Rate'] = round(state_details['Recovered'] \/ state_details['Confirmed'],2)\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\nstate_details = state_details.sort_values(by='Confirmed', ascending= False)\nstate_details.style.background_gradient(cmap='YlOrRd')","ed561859":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\n\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=False)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n\n\ncumulative_df = us_covid_df.groupby(\"ObservationDate\")[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Confirmed\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"Deaths\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cumulative count of deaths due to COVID-19 in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of death cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n\n### Plot for number of cumulative covid cases over time\ncumulative_df[\"ConfirmedNew\"] = cumulative_df[\"Confirmed\"].diff() \nfig = px.bar(cumulative_df, x=\"ObservationDate\", y=\"ConfirmedNew\")\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily count of new confirmed COVID-19 cases in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of confirmed cases\"\n)\n\nfig.update_layout(layout)\nfig.show()\n","c3ca9729":"import datetime\n\ncumulative_df = us_covid_df.groupby([\"StateCode\", \"ObservationDate\"])[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\ncumulative_df[\"ObservationDate\"] = pd.to_datetime(cumulative_df[\"ObservationDate\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"ObservationDate\").reset_index(drop=True)\nstart_date = datetime.date(2020, 2, 25)\ncumulative_df = cumulative_df[cumulative_df[\"ObservationDate\"]>=start_date]\ncumulative_df[\"ObservationDate\"] = cumulative_df[\"ObservationDate\"].astype(str)\n\nfig = px.choropleth(locations=cumulative_df[\"StateCode\"],\n                    color=cumulative_df[\"Confirmed\"], \n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    animation_frame=cumulative_df[\"ObservationDate\"],\n                    color_continuous_scale='Reds',\n                    range_color=[0,550000]\n                    #autocolorscale=False,\n                   )\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Cumulative count of COVID-19 cases in US states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n)\n\nfig.update_layout(layout)\nfig.show()","bfcb5290":"cumulative_df = us_covid_df.groupby([\"StateCode\", \"ObservationDate\"])[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\ncumulative_df[\"ObservationDate\"] = pd.to_datetime(cumulative_df[\"ObservationDate\"] , format=\"%m\/%d\/%Y\").dt.date\ncumulative_df = cumulative_df.sort_values(by=\"ObservationDate\").reset_index(drop=True)\nstart_date = datetime.date(2020, 3, 10)\ncumulative_df = cumulative_df[cumulative_df[\"ObservationDate\"]>=start_date]\ncumulative_df[\"ObservationDate\"] = cumulative_df[\"ObservationDate\"].astype(str)\n\nfig = px.scatter(cumulative_df, x=\"Confirmed\", y=\"Deaths\", animation_frame=\"ObservationDate\", animation_group=\"StateCode\",\n           size=\"Confirmed\", color=\"StateCode\", hover_name=\"StateCode\",\n           log_x=False, size_max=55, range_x=[0,550000], range_y=[-20,100000])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Changes in number of confirmed & death cases over time in US states\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    xaxis_title = \"Total number of confirmed cases\",\n    yaxis_title = \"Total number of death cases\"\n)\n\nfig.update_layout(layout)\n\nfig.show()\n\n","9b42101e":"fig = px.bar(us_df, x=\"date\", y=\"total\")\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Cumulative number of Total COVID-19 testing over time in US\",\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date of observation\",\n    yaxis_title = \"Number of covid-19 testings\"\n)\n\nfig.update_layout(layout)\nfig.show()\n","d2e83b80":"import plotly.express as px\n\nus_states_df[\"positive\"] = us_states_df[\"positive\"].fillna(0)\n\nfig = px.scatter(us_states_df, x=\"total\", y=\"positive\", animation_frame=\"date\", animation_group=\"state\",\n           size=\"positive\", color=\"state\", hover_name=\"state\",\n           log_x=False, size_max=55, range_x=[0,200000], range_y=[0,55000])\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Total testing counts Vs Positive Counts over time\",\n        x=0.5\n    ),\n    font=dict(size=14),\n#     width=800,\n#     height=500,\n    xaxis_title = \"Total number of tests\",\n    yaxis_title = \"Number of positive tests\"\n)\n\nfig.update_layout(layout)\nfig.show()","850b6589":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n# Any results you write to the current directory are saved as output.\ntrain=pd.read_csv('\/kaggle\/input\/coronavirus-2019ncov\/covid-19-all.csv')","d7ec2879":"train.head(5)","2e589634":"country_df = train[train['Country\/Region']=='US'].groupby('Date')['Confirmed','Deaths'].sum()\ncountry_df['day_count'] = list(range(1,len(country_df)+1))\nydata = country_df.Confirmed\nxdata = country_df.day_count\ncountry_df['rate'] = (country_df.Confirmed-country_df.Confirmed.shift(1))\/country_df.Confirmed\ncountry_df['increase'] = (country_df.Confirmed-country_df.Confirmed.shift(1))\n\nplt.plot(xdata, ydata, 'o')\nplt.title(\"USA\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()","8c72f205":"us_df = train[train['Country\/Region']=='US'].groupby('Date')['Confirmed','Deaths','Recovered'].sum()\nus_df = us_df[us_df.Confirmed>=100]","11ba5488":"from scipy.optimize import curve_fit\nimport pylab\nfrom datetime import timedelta\n\nus_df['day_count'] = list(range(1,len(us_df)+1))\nus_df['increase'] = (us_df.Confirmed-us_df.Confirmed.shift(1))\nus_df['rate'] = (us_df.Confirmed-us_df.Confirmed.shift(1))\/us_df.Confirmed\nus_df['Active']=us_df['Confirmed']-us_df['Deaths']-us_df['Recovered']\n\n\ndef sigmoid(x,c,a,b):\n     y = c*1 \/ (1 + np.exp(-a*(x-b)))\n     return y\n\nxdata = np.array(list(us_df.day_count)[::2])\nydata = np.array(list(us_df.Active)[::2])\n\npopulation=1.332*10**9\n#popt, pcov = curve_fit(sigmoid, xdata, ydata, method='dogbox',bounds=([0.,0., 0.],[population,6, 100.]))\n#print(popt)","7825fe85":"est_a = 4200000\nest_b = 0.03\nest_c = 123\nx = np.linspace(-1, us_df.day_count.max()+50, 50)\ny = sigmoid(x,est_a,est_b,est_c)\npylab.plot(xdata, ydata, 'o', label='data')\npylab.plot(x,y, label='fit',alpha = 0.6)\npylab.ylim(-0.05, est_a*1.05)\npylab.xlim(-0.05, est_c*2.05)\npylab.legend(loc='best')\nplt.xlabel('days from day 1')\nplt.ylabel('confirmed cases')\nplt.title('USA')\npylab.show()\n\n\nprint('model start date:',us_df[us_df.day_count==1].index[0])\nprint('model start infection:',int(us_df[us_df.day_count==1].Confirmed[0]))\nprint('model fitted max Active at:',int(est_a))\nprint('model sigmoidal coefficient is:',round(est_b,3))\nprint('model curve stop steepening, start flattening by day:',int(est_c))\nprint('model curve flattens by day:',int(est_c)*2)\ndisplay(us_df.head(3))\ndisplay(us_df.tail(3))","249408d3":"\n# From this, its seen that in case of USA if the graph goes like that:\n\n*     **max Active case: approx 4200000 \u2620\ufe0f**\n*     **curve stop steepening, start flattening by day: 44 ,which is: 15\/04\/2020**\n*     **curve flattens by day: 88 which is: 29\/05\/2020**\n\n","a99992c3":"# Hope you guys find this notebook useful. \n# If you like this notebook, please upvote.***\ud83d\udc4d    \n# Thanks in advance**","88d69ecc":"# Heat Map","0148c476":"# logarithmic scale","b0a82632":"# USA COVID19 Forecasting","aecb492a":"\n****Sigmoid function,\n\nHere is a snap of how I learnt to fit Sigmoid Function - y = c\/(1+np.exp(-a*(x-b))) and 3 coefficients [c, a, b]:\n\n* c - the maximum value (eventual maximum infected people, the sigmoid scales to this value eventually)\n* a - the sigmoidal shape (how the infection progress. The smaller, the softer the sigmoidal shape is)\n* b - the point where sigmoid start to flatten from steepening (the midpoint of sigmoid, when the rate of increase start to slow down)\n\n","cb89f931":"# Introduction","f45450e2":"Some Images are been taken from [Here](http:\/\/)","d6774e82":"![](https:\/\/media1.tenor.com\/images\/2a870cf48abd043938ca70ed0a233b2f\/tenor.gif?itemid=16698747)","3ae30bb8":"I thought of a sigmoidal function because China's data resembled a sigmoidal shape. Therefore, I try to fit sigmoid functions onto USA's.","87e16ac6":"![](https:\/\/www.washingtonpost.com\/graphics\/2020\/health\/coronavirus-how-epidemics-spread-and-end\/img\/sigsim2.gif)","6a1aebd7":"# Sigmoid model","3ab0d0a7":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/2f\/COVID-19_outbreak_USA_per_capita_cases_map.svg\/800px-COVID-19_outbreak_USA_per_capita_cases_map.svg.png)","6aba2072":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/81\/CoViD-19_US.svg\/709px-CoViD-19_US.svg.png)\n\n                   Number of cases (blue) and number of deaths (red)","6e04f391":"# The Story of COVID-19 in USA","c9160939":"# Tree plot USA","fab3fe95":"# Global","36855ee7":"# Time plot ","63d124de":"![](https:\/\/dlg7f0e93aole.cloudfront.net\/wp-content\/uploads\/coronavirus-image-750x500.jpg)","b48905c8":"# Testings","71412613":"# Map View"}}