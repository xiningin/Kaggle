{"cell_type":{"385f1e99":"code","a3e00b7e":"code","5c0df519":"code","8220b430":"code","e3d33d4d":"code","e7a33ac3":"code","75d886f9":"code","b6e4cee3":"code","dd9d229b":"code","df4f20aa":"code","6cfbc83d":"code","e773eff1":"code","0726b3cf":"code","08e5822a":"code","9737f883":"code","b806e29d":"code","1e902f2e":"code","98d25ff7":"code","9e66e302":"code","2beb5590":"code","8beafca2":"code","5e120352":"code","407b15b1":"code","30a066a9":"code","d9cc9a46":"code","f529c584":"code","84783840":"code","68d254f9":"code","ac10efd4":"code","5af20f78":"code","36f82740":"code","25e4f112":"code","3f53e47f":"code","65114335":"code","6bb64575":"code","b769eaf8":"code","b1336f27":"code","4d1c2b10":"code","15a90484":"code","f457603f":"code","89524248":"code","92cf67bc":"code","d78f6abd":"code","8d7e0d36":"code","08b07705":"code","5e592636":"code","b64b2993":"code","c30ccd83":"code","9c563878":"code","1b43ca8e":"code","591b5e11":"code","4015ab24":"markdown","1c6ce3d2":"markdown","832f0b13":"markdown","255687cb":"markdown"},"source":{"385f1e99":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.metrics import accuracy_score\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3e00b7e":"train = pd.read_csv('\/kaggle\/input\/loan-approval-1\/Train.csv')\ntrain.head()\n","5c0df519":"import seaborn as sns\nimport matplotlib.pyplot as plt\ncategorical_columns = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area','Credit_History','Loan_Amount_Term']\n\nfig,axes = plt.subplots(4,2,figsize=(12,15))\nfor idx,cat_col in enumerate(categorical_columns):\n    row,col = idx\/\/2,idx%2\n    sns.countplot(x=cat_col,data=train,hue='Loan_Status',ax=axes[row,col])\n\n\nplt.subplots_adjust(hspace=1)","8220b430":"train.isnull().sum().sort_values(ascending=False)\n","e3d33d4d":"\nimport seaborn as sns\nsns.set_style('whitegrid')\n#sns.countplot(x='ApplicantIncome',hue='Credit_History',data=train,palette='RdBu_r')\n","e7a33ac3":"#Replace the credit_history with 1 with loan status y AND credit_history ","75d886f9":"def Credit_score(cols):\n    Loan_Status = cols[0]\n    Credit_History = cols[1]\n    if pd.isnull(Credit_History):\n        if Loan_Status=='Y':\n            return 1.0\n        elif Loan_Status=='N':\n            return 0.0\n    else:\n        return Credit_History\n        \n    ","b6e4cee3":"train['Credit_History'] = train[['Loan_Status','Credit_History']].apply(Credit_score,axis=1)","dd9d229b":"train['Credit_History'].isnull().sum()","df4f20aa":"train.isnull().sum().sort_values(ascending=False)","6cfbc83d":"sns.set_style('whitegrid')\nsns.countplot(x='Self_Employed',hue='Loan_Status',data=train,palette='RdBu_r')\n","e773eff1":"train['Self_Employed'].unique()","0726b3cf":"def self_employed(cols):\n    Loan_Status = cols[0]\n    Self_Employed = cols[1]\n    if pd.isnull(Self_Employed):\n        if Loan_Status=='Y':\n            return 'No'\n        elif Loan_Status=='N':\n            return 'Yes'\n    else:\n        return Self_Employed","08e5822a":"train['Self_Employed'] = train[['Loan_Status','Self_Employed']].apply(self_employed,axis=1)","9737f883":"train['Self_Employed'].isnull().sum()","b806e29d":"train.isnull().sum().sort_values(ascending=False)\n","1e902f2e":"sns.stripplot(x=train['Loan_Status'], y=train['LoanAmount'], data=train) \n","98d25ff7":"train['LoanAmount'] = train['LoanAmount'].fillna(train['LoanAmount'].mean())","9e66e302":"train.isnull().sum().sort_values(ascending=False)\n","2beb5590":"sns.countplot(x='Dependents',hue='Loan_Status',data=train,palette='RdBu_r')\n","8beafca2":"train['Dependents'].unique()\ncorr = train.corr()\nsns.heatmap(corr, \n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\n","5e120352":"train['Dependents'] = train['Dependents'].fillna(train['Dependents'].mode()[0])","407b15b1":"train.isnull().sum().sort_values(ascending=False)","30a066a9":"sns.countplot(x='Gender',hue='Loan_Status',data=train,palette='RdBu_r')\n","d9cc9a46":"def gender(cols):\n    Loan_Status = cols[0]\n    gender = cols[1]\n    if pd.isnull(gender):\n        if Loan_Status=='Y':\n            return 'Male'\n        elif Loan_Status=='N':\n            return 'Female'\n    else:\n        return gender","f529c584":"train['Gender'] = train[['Loan_Status','Gender']].apply(self_employed,axis=1)","84783840":"train.isnull().sum().sort_values(ascending=False)","68d254f9":"train['Loan_Amount_Term'] = train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mean())","ac10efd4":"train.isnull().sum().sort_values(ascending=False)","5af20f78":"train['Married'] = train['Married'].fillna(train['Married'].mode()[0])","36f82740":"train.isnull().sum().sort_values(ascending=False)","25e4f112":"train.info()","3f53e47f":"train.drop('Loan_ID',axis=1,inplace=True)","65114335":"df = train\ncols = df.select_dtypes(include=['object'])\ncategorical_columns = cols.columns.to_list()\ncategorical_columns.remove('Loan_Status')","6bb64575":"categorical_columns","b769eaf8":"df1 = pd.get_dummies(df,columns=categorical_columns,drop_first=True)","b1336f27":"loan_status  = pd.get_dummies(df['Loan_Status'],drop_first=True)\n\n","4d1c2b10":"df1['loan_status'] = loan_status","15a90484":"df1","f457603f":"from sklearn.model_selection import train_test_split\nx = df1.iloc[:,:-1]\ny = df1['loan_status']\nx.drop('Loan_Status',axis=1,inplace=True)\nx.drop('Gender_No',axis=1,inplace=True)\nx.drop('Gender_Yes',axis=1,inplace=True)\nxgboost = x\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25)\n","89524248":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(x_train,y_train)","92cf67bc":"prediction = logreg.predict(x_test)\n","d78f6abd":"print(\"accuracy: {}%\".format(round(accuracy_score(y_test, prediction)*100,2)))\n","8d7e0d36":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","08b07705":"sample = pd.read_csv('\/kaggle\/input\/sample-submission\/sample_submission_49d68Cx.csv')\npredict1 = pd.read_csv('\/kaggle\/input\/test1234\/Test1.csv')\npredict1","5e592636":"predict12 = logreg.predict(predict1)\npredict12","b64b2993":"#Steps to convert dataset to submission file converting 1 to Y AND 0 to N\ndf123 = pd.DataFrame(data=predict12, columns=[\"column1\"])\n\nhello = pd.concat([sample['Loan_ID'],df123],axis=1)\nhello.drop(['column1','Loan_Status'],axis=1,inplace=True)\nhello['Loan_Status1'] = hello['Loan_Status'].replace(1,'Y')\nhello.rename(columns = {'Loan_Status1':'Loan_Status'}, inplace = True) \n","c30ccd83":"hello","9c563878":"hello.rename(columns = {'Loan_Status1':'Loan_Status'}, inplace = True) \nhello['Loan_Status1'] = hello['Loan_Status'].replace(1,'Y')","1b43ca8e":"hello1","591b5e11":"predict12","4015ab24":"# People which have a job or not self employed get a loan****","1c6ce3d2":"# **** Next Column Self_Employed with missing values","832f0b13":"# People with credit_history 1.0  have greater chances of getting a loan","255687cb":"# Next column Gender with missing values"}}