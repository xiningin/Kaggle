{"cell_type":{"717d6113":"code","bbffc5f9":"code","927197a2":"code","969702cb":"code","e13ce3ec":"code","fca4d79e":"code","c915903a":"code","2b88313f":"code","37ae7602":"code","72a9c5a1":"code","c4ef58cf":"code","220d6e5d":"code","a732b6b1":"code","9b91dcd1":"code","8500c577":"code","368aaac6":"code","fcf9eb75":"code","35e8783f":"code","83091ea5":"code","c74de4d6":"code","bdb52d70":"code","d16ff0de":"code","6d1a03d6":"code","7b3f521a":"code","770256b3":"code","7b643b1f":"code","c88c68dc":"code","a2d43b6f":"code","bc416336":"code","09db13e0":"markdown","4cf4bb87":"markdown","b32e3b06":"markdown","704adaaa":"markdown","bb20a2c7":"markdown","917aefd6":"markdown","1bf8d0fe":"markdown","6f355baa":"markdown","ac9de7e6":"markdown","2e344d86":"markdown","18aee02a":"markdown","5d6d30b7":"markdown","8cc32afb":"markdown","62f2f194":"markdown","dadca1b7":"markdown"},"source":{"717d6113":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbffc5f9":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix","927197a2":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler","969702cb":"# read train \ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nprint(\"Shape of train data : \" ,train.shape)\nprint(\"Train data :\")\n\ntrain.head()","e13ce3ec":"# read test \ntest= pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint(\"Shape of test data : \" ,test.shape)\nprint(\"Test data :\")\n\ntest.head()","fca4d79e":"x_train, x_val, y_train, y_val = train_test_split(train.drop(\"label\",axis=1) , train[\"label\"], test_size=0.1)","c915903a":"# visualize number of digits classes\nimport seaborn as sns\nplt.figure(figsize=(15,7))\ng = sns.countplot(y_train, palette=\"icefire\")\nplt.title(\"Number of digit classes\")\ny_train.value_counts()","2b88313f":"fig= plt.figure( figsize=(30,6))\nplt.plot(x_train.iloc[0])\nplt.title('784x1 data')","37ae7602":"# plot some samples\nfig, ((ax1, ax2),(ax3,ax4)) = plt.subplots(ncols=2,nrows=2 , figsize=(14,14))\nimg = x_train.iloc[0].to_numpy()\nimg = img.reshape((28,28))\nax1.imshow(img,cmap='gray')\n\nimg = x_train.iloc[1].to_numpy()\nimg = img.reshape((28,28))\nax2.imshow(img,cmap='gray')\n\nimg = x_train.iloc[28].to_numpy()\nimg = img.reshape((28,28))\nax3.imshow(img,cmap='gray')\n\nimg = x_train.iloc[30].to_numpy()\nimg = img.reshape((28,28))\nax4.imshow(img,cmap='gray')\n","72a9c5a1":"# Normalize the data\nx_train = x_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",x_train.shape)\nprint(\"test shape: \",test.shape)","c4ef58cf":"# Reshape\nx_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",x_train.shape)\nprint(\"test shape: \",test.shape)","220d6e5d":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical \n# convert to one-hot-encoding\ny_train = to_categorical(y_train, num_classes = 10)","a732b6b1":"y_train","9b91dcd1":"# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(x_train, y_train, test_size = 0.33, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","8500c577":"# data augmentation\ndatagen = ImageDataGenerator( \n        featurewise_center=False, # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False, # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,   # dimesion reduction\n        rotation_range=0.5,    # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5,      # Randomly zoom image 5%\n        width_shift_range=0.5, # randomly shift images horizontally 5%\n        height_shift_range=0.5,# randomly shift images vertically 5%\n        horizontal_flip=False, # randomly flip images\n        vertical_flip=False)   # randomly flip images\n\ndatagen.fit(X_train)","368aaac6":"# plot some samples\nfig, ((ax1, ax2),(ax3,ax4)) = plt.subplots(ncols=2,nrows=2 , figsize=(14,14))\nimg = X_train[0]\nimg = img.reshape((28,28))\nax1.imshow(img,cmap='gray')\n\nimg = X_train[1]\nimg = img.reshape((28,28))\nax2.imshow(img,cmap='gray')\n\nimg = X_train[280]\nimg = img.reshape((28,28))\nax3.imshow(img,cmap='gray')\n\nimg = X_train[200]\nimg = img.reshape((28,28))\nax4.imshow(img,cmap='gray')","fcf9eb75":"# Conv2D -> MaxPool2D -> Dropout -> Conv2D -> MaxPool2D -> Dropout \n# -> FULLY CONNECTED LAYER(Flatten -> Dense -> Dropout -> Dense)\n\n \nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected layer \nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","35e8783f":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","83091ea5":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","c74de4d6":"from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau\nearlystop = EarlyStopping(monitor='loss',patience=2,verbose=0,mode='min')\n# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","bdb52d70":"# Fit the model\n\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=86),\n                              epochs = 15, validation_data = (X_val,Y_val), \n                              steps_per_epoch=X_train.shape[0]\/\/86 ,callbacks = [learning_rate_reduction] )","d16ff0de":"loss = pd.DataFrame(model.history.history)\nprint(\"Model History :\")\nloss","6d1a03d6":"loss[['val_loss',\"loss\"]]","7b3f521a":"# Plot the loss curves for training and validation \nloss[['val_loss',\"loss\"]].plot()\nplt.title(\"Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","770256b3":"# Plot the accuracy curves for training and validation \nloss[['val_accuracy',\"accuracy\"]].plot()\nplt.title(\"Accuracy\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","7b643b1f":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(14,14))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"icefire\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","c88c68dc":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = X_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize = (13,13))\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)),cmap= \"gray\")\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","a2d43b6f":"\n# Right are difference between predicted labels and true labels\nright = (Y_pred_classes - Y_true == 0)\n\nY_pred_classes_errors = Y_pred_classes[right]\nY_pred_errors = Y_pred[right]\nY_true_errors = Y_true[right]\nX_val_errors = X_val[right]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize = (13,13))\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)),cmap= \"gray\")\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","bc416336":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","09db13e0":"# Normalising data :\n\nWe perform a grayscale normalization to reduce the effect of illumination's differences.","4cf4bb87":"# Visualising Wrong Predictions","b32e3b06":"# Label encoding the data :\nTo take care of the labels ","704adaaa":"From the data we can conclude that all the labels are balanced","bb20a2c7":"# Data Augmentation:\n\nTo avoid overfitting problem, we need to expand artificially our handwritten digit dataset.","917aefd6":"Fitting the model ","1bf8d0fe":"# Making submission :","6f355baa":"# Reshaping the data :\n\nWe reshape the data of (28 x 28) to 28x28x1 3D matrices .Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel.","ac9de7e6":"Compile model:","2e344d86":"# Building the CNN model :","18aee02a":"Early stopping","5d6d30b7":"# Confusion matrix :","8cc32afb":"# Visualising Augmented Data","62f2f194":"Defining Optimizer :","dadca1b7":"# Visualising Correct Predictions:"}}