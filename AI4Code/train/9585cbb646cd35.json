{"cell_type":{"ecf06aaf":"code","63f28635":"code","d0589c0f":"code","3093b69e":"code","9ef09280":"code","53ec960f":"code","c4630d67":"code","e3381a10":"code","f7bfe484":"code","52c00668":"code","99e69921":"code","98096695":"code","3d8ea878":"code","2f14949a":"code","2b94f76c":"code","ebf98463":"code","1bfb92e1":"code","60535231":"code","346478d5":"code","1d8733ff":"code","d48b85e7":"code","506550c5":"code","ce6d2123":"code","ccfead73":"code","ce474dcf":"code","744ab0e1":"code","37ffefb9":"code","9101c225":"code","0b0d1a78":"code","4f48690a":"code","f3dad750":"code","1d3e8961":"code","d3a4afb1":"markdown","5ff752d8":"markdown","605c6a8f":"markdown","5f5c18df":"markdown","e45cd43a":"markdown","f7fa9c58":"markdown","045dd94f":"markdown"},"source":{"ecf06aaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63f28635":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy.stats import norm\n\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","d0589c0f":"import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import RMSprop","3093b69e":"X_data = pd.read_csv('\/kaggle\/input\/production-quality\/data_X.csv', sep=',')\nX_data.head()","9ef09280":"x_cols = list(X_data.columns)\nx_cols[0] = 'date_time'\nX_data.columns = x_cols","53ec960f":"X_data.shape","c4630d67":"Y_train = pd.read_csv('\/kaggle\/input\/production-quality\/data_Y.csv', sep=',')\nY_train.head()","e3381a10":"Y_train.shape","f7bfe484":"Y_submit = pd.read_csv('\/kaggle\/input\/production-quality\/sample_submission.csv', sep=',')\nY_submit.head()","52c00668":"Y_submit.shape","99e69921":"train_df = X_data.merge(Y_train, left_on='date_time', right_on='date_time')\ntest_df = X_data.merge(Y_submit, left_on='date_time', right_on='date_time').drop('quality', axis=1)","98096695":"train_df.head()","3d8ea878":"test_df.head()","2f14949a":"train_df.shape, test_df.shape","2b94f76c":"assert train_df.shape[0] == Y_train.shape[0]\nassert test_df.shape[0] == Y_submit.shape[0]","ebf98463":"train_df.describe()","1bfb92e1":"test_df.describe()","60535231":"train_df.hist(figsize=(35, 30));","346478d5":"plt.figure(figsize=(12,5))\nsns.distplot(train_df['quality'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train_df['quality'])\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('Quality distribution');","1d8733ff":"sns.pairplot(data=train_df);","d48b85e7":"y = train_df['quality']\ntrain_df.drop(['quality'], axis=1, inplace=True)","506550c5":"train_df.drop(['date_time'], axis=1, inplace=True)\ntest_df.drop(['date_time'], axis=1, inplace=True)","ce6d2123":"X_train, X_test, y_train, y_test = train_test_split(train_df, y, test_size=0.33)","ccfead73":"scaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\ntest_df = scaler.transform(test_df)","ce474dcf":"model = Sequential()\nmodel.add(Dense(17, activation='tanh', input_shape=(17,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(24, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(34, activation='relu'))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.summary()","744ab0e1":"model.compile(loss='mean_squared_error',\n              optimizer=RMSprop(),\n              metrics=['mse', 'mae'])","37ffefb9":"batch_size = 64\nepochs = 15","9101c225":"history = model.fit(X_train, y_train,\n                    batch_size=batch_size,\n                    epochs=epochs,\n                    verbose=1,\n                    validation_data=(X_test, y_test))","0b0d1a78":"score = model.evaluate(X_test, y_test, verbose=0)\nprint('Test mse:', score[0])\nprint('Test mae:', score[2])","4f48690a":"Y_submit['quality'] = model.predict(test_df)","f3dad750":"Y_submit.head()","1d3e8961":"Y_submit.to_csv('submission.csv',index=False)","d3a4afb1":"# Train test split","5ff752d8":"# Data preparation","605c6a8f":"# Scale it","5f5c18df":"# Keras quality predict","e45cd43a":"# Import","f7fa9c58":"# Get target","045dd94f":"# EDA"}}