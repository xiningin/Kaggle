{"cell_type":{"a242a004":"code","1e9d853f":"code","8bb2f5dd":"code","a52c5411":"code","6550d52b":"code","652ccca5":"code","c7d8bb75":"code","26982751":"code","6cd6098d":"code","3ffbfbf7":"code","6637de87":"code","73ceaa81":"code","370cb49a":"code","1203e12d":"code","dd899629":"code","11e6ffe4":"code","de5fb79d":"code","d70e3506":"code","d07d7ae5":"code","bdb8709f":"code","2bb6c244":"code","eccb039d":"code","f4bcfe87":"code","87df4587":"code","a1870f86":"code","c90d18ff":"code","0ec37033":"code","750d1614":"code","89b6abd5":"code","59fb1682":"code","29e59b3f":"code","8cd74692":"code","62faa5b4":"code","0f665e45":"code","396dcfb1":"code","fb4dae3b":"code","6e1395dc":"markdown","e8c28790":"markdown","47c5ab35":"markdown","771346eb":"markdown","c7a9c6ca":"markdown","f91ce819":"markdown","30549096":"markdown","76d689bb":"markdown","0604d9c4":"markdown","7886fd48":"markdown","74ef989d":"markdown","7a4aafb0":"markdown","bfb27d09":"markdown","f76a9e80":"markdown"},"source":{"a242a004":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","1e9d853f":"train_df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ntest_df = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\nsample_submission = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv')","8bb2f5dd":"train_df","a52c5411":"test_df","6550d52b":"sample_submission","652ccca5":"train_df.info()","c7d8bb75":"train_df.isna().sum()","26982751":"test_df.isna().sum()","6cd6098d":"train_df","3ffbfbf7":"def get_uniques(df, columns):\n    return {column: list(df[column].unique()) for column in columns}","6637de87":"categorical_features = ['Gender', 'Vehicle_Age', 'Vehicle_Damage']\n\nget_uniques(train_df, categorical_features)","73ceaa81":"binary_features = ['Gender', 'Vehicle_Damage']\n\nordinal_features = ['Vehicle_Age']","370cb49a":"def binary_encode(df, column, positive_label):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: 1 if x == positive_label else 0)\n    return df","1203e12d":"train_df = binary_encode(train_df, 'Gender', 'Male')\ntest_df = binary_encode(test_df, 'Gender', 'Male')\n\ntrain_df = binary_encode(train_df, 'Vehicle_Damage', 'Yes')\ntest_df = binary_encode(test_df, 'Vehicle_Damage', 'Yes')","dd899629":"def ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df","11e6ffe4":"age_ordering = ['< 1 Year', '1-2 Year', '> 2 Years']\n\ntrain_df = ordinal_encode(train_df, 'Vehicle_Age', age_ordering)\ntest_df = ordinal_encode(test_df, 'Vehicle_Age', age_ordering)","de5fb79d":"train_df","d70e3506":"test_df","d07d7ae5":"test_ids = test_df['id'].tolist()\n\ntrain_df = train_df.drop('id', axis=1)\ntest_df = test_df.drop('id', axis=1)","bdb8709f":"y = train_df['Response']\nX = train_df.drop('Response', axis=1)","2bb6c244":"X.plot(kind='box', figsize=(20, 10), logy=True)","eccb039d":"scaler = MinMaxScaler()\n\nX = scaler.fit_transform(X)\ntest_df = scaler.fit_transform(test_df)","f4bcfe87":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","87df4587":"X.shape","a1870f86":"y.shape","c90d18ff":"y.sum() \/ len(y)","0ec37033":"inputs = tf.keras.Input(shape=(10,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=[tf.keras.metrics.AUC(name='auc')]\n)\n\n\nbatch_size = 64\nepochs = 25\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()],\n    verbose=0\n)","750d1614":"fig = px.line(\n    history.history, y=['loss', 'val_loss'], \n    labels={'index': 'Epoch', 'value': 'Loss'}, \n    title='Training History')\nfig.show()","89b6abd5":"model.evaluate(X_test, y_test)","59fb1682":"sample_submission","29e59b3f":"preds = model.predict(test_df)","8cd74692":"preds = list(map(lambda x: np.int(x[0]),  preds >= 0.5))","62faa5b4":"submission = pd.concat([pd.Series(test_ids), pd.Series(preds)], axis=1)\nsubmission.columns = ['id', 'Response']","0f665e45":"submission","396dcfb1":"sample_submission.shape == submission.shape","fb4dae3b":"submission.to_csv('.\/submission.csv')","6e1395dc":"## Encoding","e8c28790":"Looks good, let's use MinMaxScaler","47c5ab35":"### Binary Encoding","771346eb":"### Classify categorical features to be encoded","c7a9c6ca":"Let's check for outliers before choosing a scaler","f91ce819":"# Getting Started","30549096":"### Ordinal Encoding","76d689bb":"# Preprocessing","0604d9c4":"## Checking for Missing Values","7886fd48":"# Splitting and Scaling","74ef989d":"# Building and Training a Model\n\nWe will use a TensorFlow neural network","7a4aafb0":"We only need to save the IDs for the test set","bfb27d09":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\nCheck it out!  \nhttps:\/\/youtu.be\/4lnUUZxeGBI","f76a9e80":"# Make Predictions and Submit"}}