{"cell_type":{"e9faaae0":"code","63017104":"code","bdf5bc57":"code","1efd287d":"code","c671e061":"code","a039d6f1":"code","6688f8a5":"code","10beb4e4":"code","c98ee78e":"code","b384bcd5":"code","ce0dbfaa":"code","1ac4f003":"code","32872cc9":"code","10580ba3":"code","15b095c5":"code","cba0b458":"code","c10c9276":"code","2f9a4d9e":"code","190eb5dd":"code","a454a146":"code","c6a8b2a0":"code","65a9de38":"code","81f901a5":"code","f16e5a87":"code","15cafcd8":"code","86bc28e8":"code","ad990d79":"code","5bff6a06":"code","8a9dc51e":"code","873e53f2":"code","fa3165f2":"code","ae2c41e6":"code","cbc44fd8":"code","18bb25b8":"code","eebc7d8e":"markdown","d362fd84":"markdown","b6b3e956":"markdown","c85f615e":"markdown","8a6a0c17":"markdown","33bc7d7c":"markdown","75d13198":"markdown","e8bb9124":"markdown","3ed0c833":"markdown","b9cceece":"markdown","7d35738a":"markdown","66c2b62d":"markdown","565f535e":"markdown","879bfc9f":"markdown","682b532f":"markdown","312df3b0":"markdown","a53e7e6a":"markdown","01a44837":"markdown","46178931":"markdown","727820cf":"markdown"},"source":{"e9faaae0":"# Supress Warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","63017104":"# Import the numpy and pandas packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt ","bdf5bc57":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1efd287d":"# Write your code for importing the csv file here\nmovies =pd.read_csv(r'\/kaggle\/input\/imdb-movie-data\/movie_IMDB.csv')\nmovies","c671e061":"# Write your code for inspection here\nprint(type(movies.info()))\nprint(movies.shape)","a039d6f1":"# Write your code for column-wise null count here\nmovies.isnull().sum(axis=0)","6688f8a5":"# Write your code for row-wise null count here\nmovies.isnull().sum(axis=1)","10beb4e4":"# Write your code for column-wise null percentages here\nround(100*(movies.isnull().sum()\/len(movies.index)),2)","c98ee78e":"# Write your code for dropping the columns here. It is advised to keep inspecting the dataframe after each set of operations \nmovies=movies.drop(['color','director_facebook_likes','actor_1_facebook_likes','actor_2_facebook_likes','actor_3_facebook_likes','actor_2_name','cast_total_facebook_likes','actor_3_name','duration','facenumber_in_poster','content_rating','country','movie_imdb_link','aspect_ratio','plot_keywords'],axis=1)\nround(100*(movies.isnull().sum()\/len(movies.index)),2)\n","b384bcd5":"# Write your code for dropping the rows here\nmovies = movies[~np.isnan(movies['gross'])]\nmovies = movies[~np.isnan(movies['budget'])]\nround(100*(movies.isnull().sum()\/len(movies.index)),2)","ce0dbfaa":"# Write your code for filling the NaN values in the 'language' column here\nmovies['language'].fillna('English', inplace= True)\nround(100*(movies.isnull().sum()\/len(movies.index)), 2)","1ac4f003":"# Write your code for checking number of retained rows here\nprint('Number of Rowsretained after completing all the tasks above :',movies.shape[0])\nprint('Percentage of the rows retained after completing all the tasks above',round(100*(len(movies.index)\/5043),2))","32872cc9":"# Write your code for unit conversion here\nmovies['budget']=movies['budget']\/1000000\nmovies['gross']=movies['gross']\/1000000\n\nmovies","10580ba3":"# Write your code for creating the profit column here\nmovies['profit']=movies['gross'] - movies['budget']\nmovies\n","15b095c5":"# Write your code for sorting the dataframe here\nmovies.sort_values(by='profit',ascending=True)","cba0b458":"# Write code for profit vs budget plot here\n#Plot profit (y-axis) vs budget (x- axis) and observe the outliers using the appropriate chart type\nax = movies.plot.scatter(x=\"budget\", y=\"profit\", color='r',figsize=(16,8))\nax.set_yscale('log')\nax.set_xscale('log')\nplt.xlabel(\"Budget in million $\")\nplt.ylabel(\"Profit in million $\")\nplt.show()","c10c9276":"# Write your code to get the top 10 profiting movies here\ntop10=movies.sort_values(by=['profit'],ascending=False).head(10)\ntop10","2f9a4d9e":"# Write your code for dropping duplicate values here\nmovies.drop_duplicates()","190eb5dd":"# Write code for repeating subtask 2 here\ntop10=movies.sort_values(by=['profit'],ascending=False).head(10)\ntop10","a454a146":"# Write your code for extracting the top 250 movies as per the IMDb score here. Make sure that you store it in a new dataframe \n# and name that dataframe as 'IMDb_Top_250'\nIMDb_Top_250 = movies\nIMDb_Top_250.sort_values([\"imdb_score\"], axis=0,ascending=False, inplace=True) \nIMDb_Top_250=IMDb_Top_250[IMDb_Top_250['num_voted_users']>25000]\nIMDb_Top_250=IMDb_Top_250.head(250)\nIMDb_Top_250['Rank']=list(np.arange(1,251))\nIMDb_Top_250","c6a8b2a0":" # Write your code to extract top foreign language films from 'IMDb_Top_250' here\nTop_Foreign_Lang_Film =IMDb_Top_250[IMDb_Top_250['language']!='English']\nTop_Foreign_Lang_Film","65a9de38":"# Write your code for extracting the top 10 directors here\nsubtask3_5=movies.groupby('director_name')\ntop10director=pd.DataFrame(subtask3_5['imdb_score'].mean().sort_values(ascending=False))\ntop10director=top10director.head(10)\ntop10director=top10director.sort_values(['imdb_score','director_name'],ascending=(False,True))\ntop10director","81f901a5":"# Write your code for extracting the first two genres of each movie here\nmoviegenres=movies['genres'].apply(lambda x: pd.Series(x.split('|')))\nmovies['genre_1']=moviegenres[0]\nmovies['genre_2']=moviegenres[1]\nmovies.loc[pd.isnull(movies['genre_2']), ['genre_2']] = movies['genre_1']\nmovies=movies.drop(['genres'], axis = 1) \nmovies","f16e5a87":"# Write your code for grouping the dataframe here\nmovies_by_segment =movies.groupby(['genre_1','genre_2'])\nmovies","15cafcd8":"# Write your code for getting the 5 most popular combo of genres here\nPopGenre = movies_by_segment['gross'].mean().sort_values(ascending=False).head(5)\nPopGenre","86bc28e8":"# Write your code for creating three new dataframes here\n\n# Include all movies in which Meryl_Streep is the lead\nMeryl_Streep=movies.loc[(movies.actor_1_name=='Meryl Streep'),:]\nMeryl_Streep","ad990d79":"# Include all movies in which Leo_Caprio is the lead\nLeo_Caprio=movies.loc[(movies.actor_1_name=='Leonardo DiCaprio'),:]\nLeo_Caprio","5bff6a06":"# Include all movies in which Brad_Pitt is the lead\nBrad_Pitt=movies.loc[(movies.actor_1_name=='Brad Pitt'),:]\nBrad_Pitt ","8a9dc51e":"# Write your code for combining the three dataframes here\nCombined=Meryl_Streep.append(Leo_Caprio).append(Brad_Pitt)\nCombined","873e53f2":"# Write your code for grouping the combined dataframe here\nactor_name=Combined.groupby('actor_1_name')","fa3165f2":"# Write the code for finding the mean of critic reviews and audience reviews here\ncritic_reviews=actor_name['num_critic_for_reviews'].mean().sort_values(ascending=False)\nprint(critic_reviews)\naudience_reviews=actor_name['num_user_for_reviews'].mean().sort_values(ascending=False)\nprint(audience_reviews)","ae2c41e6":"# Write the code for calculating decade here\nmovies['decade']=movies['title_year'].apply(lambda x: x\/\/10 * 10 ).astype(np.int64)\nmovies['decade']=movies['decade'].astype(str)+'s'\nmovies=movies.sort_values(['decade'])\nmovies","cbc44fd8":"# Write your code for creating the data frame df_by_decade here \ndf_by_decade=movies.groupby(['decade'])\ndf_by_decade['num_voted_users'].sum()\ndf_by_decade=pd.DataFrame(df_by_decade['num_voted_users'].sum())\ndf_by_decade","18bb25b8":"# Write your code for plotting number of voted users vs decade\n\nax= df_by_decade.plot.bar(figsize=(16,8));\nax.set_yscale('log')\nplt.xlabel(\"Decade\")\nplt.ylabel(\"Number of Voted Users\")\nplt.title(\"Number of Voted Users vs Decade\")\nplt.show()\n \n            ","eebc7d8e":"- ### Subtask 3.5: Find the best directors\n\n    1. Group the dataframe using the `director_name` column.\n    2. Find out the top 10 directors for whom the mean of `imdb_score` is the highest and store them in a new dataframe `top10director`.  Incase of a tie in IMDb score between two directors, sort them alphabetically. ","d362fd84":"-  ### Subtask 3.6: Find popular genres\n\nYou might have noticed the `genres` column in the dataframe with all the genres of the movies seperated by a pipe (`|`). Out of all the movie genres, the first two are most significant for any film.\n\n1. Extract the first two genres from the `genres` column and store them in two new columns: `genre_1` and `genre_2`. Some of the movies might have only one genre. In such cases, extract the single genre into both the columns, i.e. for such movies the `genre_2` will be the same as `genre_1`.\n2. Group the dataframe using `genre_1` as the primary column and `genre_2` as the secondary column.\n3. Find out the 5 most popular combo of genres by finding the mean of the gross values using the `gross` column and store them in a new dataframe named `PopGenre`.","b6b3e956":"**Checkpoint 5:** Well, as it turns out. `Family + Sci-Fi` is the most popular combo of genres out there!","c85f615e":"## Task 2: Cleaning the Data\n\n-  ### Subtask 2.1: Inspect Null values\n\nFind out the number of Null values in all the columns and rows. Also, find the percentage of Null values in each column. Round off the percentages upto two decimal places.","8a6a0c17":"## Task 3: Data Analysis\n\n-  ### Subtask 3.1: Change the unit of columns\n\nConvert the unit of the `budget` and `gross` columns from `$` to `million $`.","33bc7d7c":"-  ### Subtask 1.2: Inspect the dataframe\n\nInspect the dataframe's columns, shapes, variable types etc.","75d13198":"-  ### Subtask 2.4: Fill NaN values\n\nYou might notice that the `language` column has some NaN values. Here, on inspection, you will see that it is safe to replace all the missing values with `'English'`.","e8bb9124":"-  ### Subtask 3.7: Find the critic-favorite and audience-favorite actors\n\n    1. Create three new dataframes namely, `Meryl_Streep`, `Leo_Caprio`, and `Brad_Pitt` which contain the movies in which the actors: 'Meryl Streep', 'Leonardo DiCaprio', and 'Brad Pitt' are the lead actors. Use only the `actor_1_name` column for extraction. Also, make sure that you use the names 'Meryl Streep', 'Leonardo DiCaprio', and 'Brad Pitt' for the said extraction.\n    2. Append the rows of all these dataframes and store them in a new dataframe named `Combined`.\n    3. Group the combined dataframe using the `actor_1_name` column.\n    4. Find the mean of the `num_critic_for_reviews` and `num_users_for_review` and identify the actors which have the highest mean.\n    5. Observe the change in number of voted users over decades using a bar chart. Create a column called `decade` which represents the decade to which every movie belongs to. For example, the  `title_year`  year 1923, 1925 should be stored as 1920s. Sort the dataframe based on the column `decade`, group it by `decade` and find the sum of users voted in each decade. Store this in a new data frame called `df_by_decade`.","3ed0c833":"**Checkpoint 3:** Can you spot `Veer-Zaara` in the dataframe?","b9cceece":"-  ### Subtask 3.3: Drop duplicate values\n\nAfter you found out the top 10 profiting movies, you might have noticed a duplicate value. So, it seems like the dataframe has duplicate values as well. Drop the duplicate values from the dataframe and repeat `Subtask 3.2`. Note that the same `movie_title` can be there in different languages. ","7d35738a":"**Checkpoint 6:** `Leonardo` has aced both the lists!","66c2b62d":"-  ### Subtask 2.2: Drop unecessary columns\n\nFor this assignment, you will mostly be analyzing the movies with respect to the ratings, gross collection, popularity of movies, etc. So many of the columns in this dataframe are not required. So it is advised to drop the following columns.\n-  color\n-  director_facebook_likes\n-  actor_1_facebook_likes\n-  actor_2_facebook_likes\n-  actor_3_facebook_likes\n-  actor_2_name\n-  cast_total_facebook_likes\n-  actor_3_name\n-  duration\n-  facenumber_in_poster\n-  content_rating\n-  country\n-  movie_imdb_link\n-  aspect_ratio\n-  plot_keywords","565f535e":"-  ### Subtask 3.2: Find the movies with highest profit\n\n    1. Create a new column called `profit` which contains the difference of the two columns: `gross` and `budget`.\n    2. Sort the dataframe using the `profit` column as reference.\n    3. Plot `profit` (y-axis) vs `budget` (x- axis) and observe the outliers using the appropriate chart type.\n    4. Extract the top ten profiting movies in descending order and store them in a new dataframe - `top10`","879bfc9f":"-  ### Subtask 3.4: Find IMDb Top 250\n\n    1. Create a new dataframe `IMDb_Top_250` and store the top 250 movies with the highest IMDb Rating (corresponding to the column: `imdb_score`). Also make sure that for all of these movies, the `num_voted_users` is greater than 25,000.\nAlso add a `Rank` column containing the values 1 to 250 indicating the ranks of the corresponding films.\n    2. Extract all the movies in the `IMDb_Top_250` dataframe which are not in the English language and store them in a new dataframe named `Top_Foreign_Lang_Film`.","682b532f":"**Checkpoint 1:** You might have noticed that we still have around `77%` of the rows!","312df3b0":"**Checkpoint 2:** You might spot two movies directed by `James Cameron` in the list.","a53e7e6a":"-  ### Subtask 2.3: Drop unecessary rows using columns with high Null percentages\n\nNow, on inspection you might notice that some columns have large percentage (greater than 5%) of Null values. Drop all the rows which have Null values for such columns.","01a44837":"-  ### Subtask 2.5: Check the number of retained rows\n\nYou might notice that two of the columns viz. `num_critic_for_reviews` and `actor_1_name` have small percentages of NaN values left. You can let these columns as it is for now. Check the number and percentage of the rows retained after completing all the tasks above.","46178931":"## Task 1: Reading and Inspection\n\n-  ### Subtask 1.1: Import and read\n\nImport and read the movie database. Store it in a variable called `movies`.","727820cf":"**Checkpoint 4:** No surprises that `Damien Chazelle` (director of Whiplash and La La Land) is in this list."}}