{"cell_type":{"57dfea22":"code","dc5721a8":"code","35b1a62f":"code","fae92cde":"code","886e1466":"code","745c4274":"code","8f05e17d":"code","f5b79975":"code","4ce30fae":"code","79f3e182":"code","33cf418d":"code","cd1a36f0":"code","c66dc5fd":"code","fa67ca22":"code","df3e0c0f":"code","4f3d1e98":"code","11d090b5":"code","64a0cad1":"code","92675b2a":"code","509db606":"code","1ab01b53":"code","e5ecfaaf":"code","2ef71a23":"code","4a70f8b0":"code","87db2ab8":"code","f0ecafb8":"code","53da70d8":"markdown","4aa807ce":"markdown","530928ea":"markdown","d9b7a894":"markdown","8cbed141":"markdown","a0375c63":"markdown","8712158d":"markdown","877ad58c":"markdown","86e13ceb":"markdown","a9c91790":"markdown","d3d0a1bb":"markdown"},"source":{"57dfea22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dc5721a8":"apps = pd.read_csv(\"..\/input\/googleplaystore.csv\")","35b1a62f":"print(apps['Price'].value_counts(dropna=False))","fae92cde":"apps[apps['Price'] == 'Everyone']","886e1466":"apps[10470:10475]","745c4274":"import warnings                     #to close warnings\nwarnings.filterwarnings(\"ignore\")\n\napps['Android Ver'][10472]=apps['Current Ver'][10472]\napps['Current Ver'][10472]=apps['Last Updated'][10472]\napps['Last Updated'][10472]=apps['Genres'][10472]\napps['Genres'][10472]=apps['Content Rating'][10472]\napps['Content Rating'][10472]=apps['Price'][10472]\napps['Price'][10472]=apps['Type'][10472]\napps['Type'][10472]=apps['Installs'][10472]\napps['Installs'][10472]=apps['Size'][10472]\napps['Size'][10472]=apps['Reviews'][10472]\napps['Reviews'][10472]=apps['Rating'][10472]\napps['Rating'][10472]=apps['Category'][10472]\napps['Category'][10472]=\"Unknown\"\n\napps[10472:10473]","8f05e17d":"category = apps.Category\nprice = apps.Price\ninstalls = apps.Installs\nreviews = apps.Reviews\n\nlabels = [\"Category\",\"Price\",\"Installs\",\"Reviews\"]\ncolumns = [category,price,installs,reviews]\n\nzipped = list(zip(labels,columns))\ndf = pd.DataFrame(dict(zipped))\ndf[4775:4800]      #as an example","f5b79975":"i = 0\nwhile (i<2000):\n    df.Installs[i] = df.Installs[i][:-1]               #remove the last character in string which is \"+\"\n    df.Installs[i] = df.Installs[i].replace(\",\", \"\")   #remove all \",\"s in a string\n    i = i+1\n    \ndf.Installs[0:2000] = df.Installs[0:2000].astype(int)\ndf.Reviews[0:2000] = df.Reviews[0:2000].astype(int)\n\ndf[0:2000]","4ce30fae":"df1 = df[0:2000].loc[:,[\"Reviews\",\"Installs\"]]\ndf1.plot(figsize=(15,10))\nplt.show()","79f3e182":"df1.plot(subplots=True,figsize=(10,10))\nplt.show()","33cf418d":"df1.plot(kind = \"hist\",y = \"Reviews\",bins =50,range= (0,1000),normed = True)    #analyze number of reviews\nplt.show()","cd1a36f0":"fig, axes = plt.subplots(nrows=2,ncols=1,figsize=(10,10))\ndf1.plot(kind = \"hist\",y = \"Reviews\",bins =50,range= (0,1000),normed = True, ax=axes[0])\ndf1.plot(kind = \"hist\",y = \"Reviews\",bins =50,range= (0,1000),normed = True, ax=axes[1], cumulative=True)\nplt.savefig('graph.png')\nplt","c66dc5fd":"df2 = apps[0:2000]\nm=[]                #an empty month list\ny=[]                #an empty year list\nd=[]                #an empty day list\ndate_update = []    #join year, month and day into this list\ni = 0\nwhile (i<len(df2[\"Last Updated\"])):\n    if (df2[\"Last Updated\"][i][0:3]==\"Jan\"):\n        m.append(\"01\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Feb\"):\n        m.append(\"02\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Mar\"):\n        m.append(\"03\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Apr\"):\n        m.append(\"04\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"May\"):\n        m.append(\"05\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Jun\"):\n        m.append(\"06\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Jul\"):\n        m.append(\"07\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Aug\"):\n        m.append(\"08\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Sep\"):\n        m.append(\"09\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Oct\"):\n        m.append(\"10\")\n    elif (df2[\"Last Updated\"][i][0:3]==\"Nov\"):\n        m.append(\"11\")\n    else:\n        m.append(\"12\")\n    y.append(df2[\"Last Updated\"][i][-4:])            #check last 4 characters in string df2[\"Last Updated\"][i]\n    if (df2[\"Last Updated\"][i][-8]==\" \"):            #if eight character from last in string df2[\"Last Updated\"][i] is not a number, then day has one digit (which is in -7)\n        d.append(\"0\"+df2[\"Last Updated\"][i][-7])     \n    else:\n        d.append(df2[\"Last Updated\"][i][-8:-6])      #if eight character from last in string df2[\"Last Updated\"][i] is a number, then day is (-8:-6)\n    date_update.append(y[i]+\"-\"+m[i]+\"-\"+d[i])       #fill date_update list with dates in format yyyy:mm:dd\n    i = i + 1  \n    \ndate_update[0:10]     ","fa67ca22":"df2[\"Installs\"] = df1[\"Installs\"].astype(int)    \ndf2[\"Reviews\"] = df1[\"Reviews\"].astype(int)","df3e0c0f":"date_time_object = pd.to_datetime(date_update)    #create a DatetimeIndex by converting date_update\ndf2[\"Last Updated\"] = date_time_object            \ndf2 = df2.set_index(\"Last Updated\")               #index of df2 = \"Last Updated\"\ndf2[0:10]","4f3d1e98":"print(df2.loc[\"2018-08-01\":\"2018-10-01\"])     #show items which have index from 2018-08-01 to 2018-10-01","11d090b5":"df2.resample(\"A\").mean()    #show means of \"Rating\", \"Reviews\" and \"Installs\" for each year","64a0cad1":"df2.resample(\"M\").mean()    #show means of \"Rating\", \"Reviews\" and \"Installs\" for each month\n                            #NaN values mean that there are no data on that months","92675b2a":"df2.resample(\"M\").mean().interpolate(\"linear\")     #fill NaN values by interpolation","509db606":"notfree = apps[apps.Price != \"0\"]    #notfree includes app which are not free\n\ndef remove(x):\n    \"\"\"remove \"$\" in Price so that we can convert Price into type float\"\"\"\n    x = x[1:]\n    return x    \nnotfree.Price = notfree.Price.apply(remove)   #apply remove function for all elements in notfree.Price\nnotfree.Price = notfree.Price.astype(float)","1ab01b53":"#i = 0\n#while (i<2000):\n#    df.Installs[i] = df.Installs[i][:-1]                    #remove the last character in string which is \"+\"\n#    df.Installs[i] = df.Installs[i].replace(\",\", \"\")   #remove all \",\"s in a string\n#    i = i+1","e5ecfaaf":"def installs(x):\n    x = x[:-1]\n    x = x.replace(\",\",\"\")\n    return x\n\nnotfree.Installs = notfree.Installs.apply(installs)  #convert \"Installs\" to an approximate number\nnotfree.Installs = notfree.Installs.astype(float) \n\nnotfree[\"Money_Spent\"] = notfree.Installs * notfree.Price  #calculate total money spent for each app","2ef71a23":"df3 = notfree.set_index([\"Category\",\"Genres\"])\ndf3[750:800]","4a70f8b0":"df4 = notfree[25:30]\ndf4.pivot(index=\"Genres\",columns=\"Price\",values=\"App\")","87db2ab8":"notfree.groupby(\"Category\").mean()     #mean values in each category","f0ecafb8":"notfree.groupby(\"Category\")[[\"Rating\",\"Money_Spent\"]].max()   #max values of Rating and Money_Spent in each category","53da70d8":"> **DATAFRAME FROM DICTIONARY**","4aa807ce":"Before Visual Exploratory Data Analysis, I had manipulated \"Installs\" column in apps dataframe to use installs as numbers. Now, I need it again and I created a function for this purpose. It does the same thing with:","530928ea":"I will analyze means of installs and reviews in each month and year so I need to convert these properties from \"object\" to \"int\". ","d9b7a894":"**VISUAL EXPLORATORY DATA ANALYSIS**","8cbed141":"We see that using functions can be helpful in case we want to do same operations afterwards.","a0375c63":"Now I want to plot Reviews and Installs but types of values are 'str' so I need to convert them into 'int'. I will use first 2000 rows to show.","8712158d":"Price of an app is \"Everyone\" as it is seen above. Probably, there has been a mistake on entrying data. Below we will analyze other properties of this app having price value \"Everyone\". ","877ad58c":"**INDEXING PANDAS TIME SERIES**","86e13ceb":"**MANIPULATING DATAFRAMES**\n\nI will analyze approximately how much money was spent on each app.","a9c91790":"**Category** of this app (Life Made WI-Fi Touchscreen Photo Frame) is not included and the places of other data shifted to the left. Below is the correction of this mistake.","d3d0a1bb":"Since the range of installs and reviews are very different, the graph is not a good representation. Below there is a more convenient way to analyze these two properties together."}}