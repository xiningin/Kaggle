{"cell_type":{"3b9e6917":"code","03c53bbf":"code","bfbdafea":"code","3d5f5f77":"code","f45a80c6":"code","65acf40b":"code","8b495d1d":"code","a744e541":"code","d1868fba":"code","eb4d4f83":"code","e26bd7ef":"code","9b0efcae":"code","3ea6e330":"code","885b9f0b":"code","407fe5fe":"code","ddc17e48":"code","29620bab":"code","1148cee8":"code","9d3491ce":"code","f238a7ce":"code","26780013":"code","ab85f7c8":"code","f53f6c93":"code","1ad494d7":"code","383b033c":"code","ca7f35be":"code","78571b75":"code","de66b2da":"code","be38f4d2":"code","60afbff9":"code","7ac30d15":"code","615d4498":"code","a3bef341":"code","d38d2b0b":"code","5a4efefe":"code","afed29ea":"code","e920edd8":"code","71bfc4c3":"code","b805b78c":"code","c3144ae1":"code","c99ec3b5":"code","bbe9d98e":"code","2f9567c4":"code","68c870ef":"code","1da8415d":"code","d945ca8d":"code","81c5f41c":"code","dfb59bd9":"code","94e22e50":"code","9f94178a":"code","bc08d414":"code","feaa01a8":"code","fa35a4d2":"code","a0922d67":"code","b48cf364":"code","d665d402":"code","41d4e07d":"code","11549cca":"code","ca40309b":"code","35cb4767":"code","79f18798":"code","943e235b":"code","7dd75cda":"code","c324ad6a":"code","5a0eef49":"code","448d1c86":"code","a7b0d500":"code","1db36058":"code","7fbcd6c3":"code","60439040":"code","bc4d3f5e":"code","7d1d5c3c":"code","92365562":"code","508eab92":"code","ce804788":"code","eecdd079":"code","49d0d4be":"code","684c2a7a":"markdown","ec13b2a0":"markdown","53705efa":"markdown","2856a66a":"markdown","5c081138":"markdown","3c7496c0":"markdown","ad44f061":"markdown","8f47f806":"markdown","77290dff":"markdown","2e5695e4":"markdown","6627089f":"markdown","796767da":"markdown","8af13efe":"markdown","1ea22655":"markdown","dfc80843":"markdown","09619cd4":"markdown","aac439f3":"markdown","7cd3f07b":"markdown","22a0277f":"markdown","87cee84a":"markdown","f4511099":"markdown","695abffe":"markdown","575a32d2":"markdown"},"source":{"3b9e6917":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","03c53bbf":"data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")","bfbdafea":"data.info()","3d5f5f77":"data.corr()","f45a80c6":"#correlation map\nf,ax = plt.subplots(figsize=(13,13))\nsns.heatmap(data.corr(),annot=True,linewidths=.5,fmt='.1f',ax=ax)\nplt.show()","65acf40b":"data.head(13)","8b495d1d":"data.columns","a744e541":"#lineplot\ndata.Speed.plot(kind='line',color='g',label='Speed',linewidth=1,alpha=0.5,grid=True,linestyle=':')\ndata.Defense.plot(color='r',label='Defense',linewidth=1,alpha=0.5,grid=True,linestyle='-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\n#plt.show()","d1868fba":"#scatterplot\n#x-attack,y-defense\ndata.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\",alpha=0.5,color=\"red\")\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")\nplt.title(\"Attack vs. Defence Scatter Plot\")","eb4d4f83":"plt.scatter(data.Attack,data.Defense,alpha=0.3,color=\"k\")","e26bd7ef":"#histogram\n#bins=#of bars\ndata.Speed.plot(kind=\"hist\",bins=50,figsize=(10,10),grid=True)\nplt.xlabel(\"speed\")\nplt.ylabel(\"number of pokemons\")\n#plt.clf() -> prevents to draw the plot","9b0efcae":"dictionary = {\"spain\":\"madrid\",\"usa\":\"vegas\"}\nprint(dictionary.keys())\nprint(dictionary.values())","3ea6e330":"dictionary[\"spain\"]=\"barcelona\"\nprint(dictionary)\ndictionary[\"france\"]=\"paris\"\nprint(dictionary)\ndel dictionary[\"spain\"]\nprint(dictionary)\nprint(\"france\"in dictionary)\n#dictionary.clear()\n#del dictionary\nprint(dictionary)","885b9f0b":"#dataframe vs. serial !be careful!\nseries=data[\"Defense\"]\nprint(type(series))\ndata_frame=data[[\"Defense\"]]\nprint(type(data_frame))","407fe5fe":"#filtering\nx = data[\"Defense\"]>200\ndata[x]","ddc17e48":"data[np.logical_and(data[\"Defense\"]>200,data[\"Attack\"]>100)]\n#data[(data[\"Defense\"]>200)&(data[\"Attack\"]>100)]","29620bab":"lis=[1,2,3,4,5]\nfor i in lis:\n    print(\"i is: \",i)","1148cee8":"for index,value in enumerate(lis):\n    print(index,\" : \",value)","9d3491ce":"dictionary = {\"spain\":\"madrid\",\"france\":\"paris\"}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)","f238a7ce":"for index,value in data[[\"Attack\"]][0:1].iterrows():\n    print(index,\" : \",value)","26780013":"def tuble_ex():\n    t = (1,2,3)\n    return t\na,b,c=tuble_ex()\nprint(a,b,c)","ab85f7c8":"x=2\ndef f():\n    x=3\n    return x\nprint(\"global scope: \",x)\nprint(\"local scope : \",f())","f53f6c93":"#nested func\ndef square():\n    def add():\n        x=2\n        y=3\n        z=x+y\n        return z\n    return add()**2\nprint(square())","1ad494d7":"def f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n\ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print(key,\" : \",value)\nf(countary=\"spain\",capital=\"madrid\",population=123456)","383b033c":"square =lambda x: x**2\nprint(square(4))\ntot = lambda x,y,z: x+y+z\nprint(tot(1,2,3))","ca7f35be":"#anonymous function\n#map(func,seq) fonksiyonu dizideki elemanlara uygular\nnumber_list=[1,2,3]\ny=map(lambda x:x**2,number_list)\nprint(list(y))","78571b75":"#iterators\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))\nprint(next(it))\nprint(next(it))\nprint(*it)","de66b2da":"#zip\nlist1=[1,2,3,4]\nlist2=[5,6,7,8]\nz=zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","be38f4d2":"un_zip=zip(*z_list)\nun_list1,un_list2=list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list1)))","60afbff9":"num1=[1,2,3]\nnum2=[i+1 for i in num1]\nprint(num2)","7ac30d15":"num1=[5,10,15]\nnum2=[i**2 if i==10 else i-5 if i<7 else i+5 for i in num1]\nprint(num2)","615d4498":"threshold=sum(data.Speed)\/len(data.Speed)\nprint(\"threshold: \",threshold)\ndata[\"speed_level\"]=[\"high\" if i>threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]]","a3bef341":"data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\ndata.head()","d38d2b0b":"data[(data[\"Legendary\"]==1)]","5a4efefe":"data.iloc[162:166:, :]","afed29ea":"print(data[\"Type 1\"].value_counts(dropna=False))","e920edd8":"data.describe()","71bfc4c3":"data.boxplot(column=\"Attack\",by=\"Legendary\")\nplt.show()\ndata[(data[\"Legendary\"]==1) & (data[\"Attack\"]==50)]","b805b78c":"data_new = data.head()\ndata_new","c3144ae1":"# id_vars = what we dont wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars=\"Name\",value_vars=[\"Attack\",\"Defense\"])\nmelted","c99ec3b5":"melted.pivot(index=\"Name\",columns=\"variable\",values=\"value\")","bbe9d98e":"data1=data.head()\ndata2=data.tail()\nconc_data_row=pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","2f9567c4":"data3=data[\"Attack\"].head()\ndata4=data[\"Defense\"].head()\nconc_data_col=pd.concat([data3,data4],axis=1)\nconc_data_col","68c870ef":"data.dtypes","1da8415d":"data[\"Type 1\"]=data[\"Type 1\"].astype(\"category\")\ndata[\"Speed\"]=data[\"Speed\"].astype(\"float\")\ndata.dtypes","d945ca8d":"data[\"Type 2\"].value_counts(dropna=False)","81c5f41c":"data[\"Type 2\"].fillna(\"empty\",inplace=True)","dfb59bd9":"assert data[\"Type 2\"].notnull().all()     #returns nothing cuz we dont have nan values","94e22e50":"data.head()","9f94178a":"country=[\"Spain\",\"France\"]\npopulation=[\"11\",\"12\"]\nlist_label=[\"country\",\"population\"]\nlist_col=[country,population]\nzipped=list(zip(list_label,list_col))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","bc08d414":"df[\"capital\"]=[\"madrid\",\"paris\"]\ndf","feaa01a8":"df[\"income\"]=0 #broadcasting entire column\ndf","fa35a4d2":"data1=data.loc[:,[\"Attack\",\"Defense\",\"Speed\"]]\ndata1.plot()","a0922d67":"data1.plot(subplots=True)\nplt.show()","b48cf364":"data1.plot(kind=\"scatter\",x=\"Attack\",y=\"Defense\",alpha=0.5,color=\"k\")\nplt.show()","d665d402":"data1.plot(kind = \"hist\",y = \"Defense\",bins=50,range=(0,250)) #normed hatas\u0131 veriyor(rectangle has no normed)","41d4e07d":"fig, axes=plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),ax=axes[0])\ndata1.plot(kind=\"hist\",y=\"Defense\",bins=50,range=(0,250),ax=axes[1],cumulative=True)\nplt.savefig(\"graph.png\")\nplt","11549cca":"data = data.set_index(\"#\")\ndata.head()","ca40309b":"print(type(data[\"HP\"]))\nprint(type(data[[\"HP\"]]))","35cb4767":"data.loc[1:10,\"HP\":\"Defense\"]\n#data.loc[1:10,[\"HP\",\"Defense\"]]","79f18798":"boolean=data.HP>200\ndata[boolean]","943e235b":"filter1=data.HP>150\nfilter2=data.Speed>35\ndata[filter1&filter2]","7dd75cda":"data.HP[data.Speed<15]","c324ad6a":"def div(n):\n    return n\/2\ndata.HP.apply(div)  #ge\u00e7ici\n#data.HP.apply(lambda n:n\/2)","5a0eef49":"data.HP.head()","448d1c86":"data[\"total_power\"]=(data.Attack+data[\"Sp. Atk\"])\/(data.Defense+data[\"Sp. Def\"])\ndata.head()","a7b0d500":"data.index.name=\"index_name\"\ndata.head()","1db36058":"data = pd.read_csv(\"\/kaggle\/input\/pokemon-challenge\/pokemon.csv\")\ndata.head()","7fbcd6c3":"data1=data.set_index([\"Type 1\",\"Type 2\"])\ndata1.head(15)","60439040":"dic={\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf1=pd.DataFrame(dic)\ndf1","bc4d3f5e":"df1.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")","7d1d5c3c":"df2=df1.set_index([\"treatment\",\"gender\"])\ndf2","92365562":"df2.unstack(level=0)","508eab92":"df3=df2.swaplevel(0,1)\ndf3","ce804788":"pd.melt(df1,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","eecdd079":"df1.groupby(\"treatment\").mean()","49d0d4be":"df1.groupby(\"treatment\").age.mean()","684c2a7a":"# INDEX OBJECTS AND LABELED DATA","ec13b2a0":"CONCETANATING DATA","53705efa":"# GROUPBY","2856a66a":"EXPLOTARY DATA ANALYSIS\n\nvalue_counts()\n\noutliers\n\nLets say value at 75% is Q3 and value at 25% is Q1.\n\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR","5c081138":"# MELTING","3c7496c0":"**LOOPS**","ad44f061":"# STACKING AND UNSTACKING DF's","8f47f806":"**LIST COMPREHENSION**\n\ni+1 for i in num1   : list of comprehension\n\ni+1                 : list comprehension syntax\n\nfor i in num1       : for loop syntax\n\ni                   : iterator\n\nnum1                : iterable object","77290dff":"PIVOTING DATA\n\nreverse of melting","2e5695e4":"**HISTOGRAM**\n<br>bins=number of bins\n<br>range(tuble)=min and max values of bins\n<br>normed(boolean)=normalize or not\n<br>cumulative(boolean)=compute cumulative distribution","6627089f":"# MISSING DATA ","796767da":"# HIERARCHICAL INDEXING","8af13efe":"**INTRO TO PYTHON**\n\n*line* plot is for when x is time axis\n\n*scatter* is better when there is correlation between two variables\n\n*histogram* is better for to see distribution of numerical data\n\n*customaziton*:colors,labels,thickness,opacity,grid,figsize,ticks,linestyle","1ea22655":"**DICTIONARY**","dfc80843":"# PANDAS FOUNDATION\n**BUILDING DATA FRAMES FROM SCRATCH**\n<br>broadcasting:creating new column and assign a value entire column","09619cd4":"# **DATA TYPES**","aac439f3":"**PYTHON DATA SCIENCE TOOLBOX**","7cd3f07b":"# MANUPULATING DATA FRAMES","22a0277f":"**PANDAS**","87cee84a":"# PIVOTING DF's","f4511099":"TIDY DATA\n\nmelt()","695abffe":"    DATA CLEANING","575a32d2":"VISUAL EXPLOTARY DATA ANALYSIS\n\nbox plots"}}