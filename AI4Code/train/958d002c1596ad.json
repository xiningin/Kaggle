{"cell_type":{"1ceddaa5":"code","944433d1":"code","fddd4a63":"code","0d81ea3d":"code","ed2a4791":"code","68be8015":"code","670d059e":"code","8b63e440":"code","b725872d":"code","e091a656":"code","9ded5300":"code","2256796d":"code","ee42b78b":"code","fc031c49":"code","1caa2523":"code","b7e58cfd":"code","46d0abc4":"code","af26a9a6":"markdown"},"source":{"1ceddaa5":"import glob\nimport cv2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input,Dense,Conv2D,MaxPool2D","944433d1":"data=[]\nlabels=[]\n\nfor i in glob.glob('..\/input\/cats-versus-dogs\/data\/train\/*\/*'):\n    img=cv2.imread(i)\n    re_img=cv2.resize(img,(28,28))\n    data.append(re_img)\n    target=i.split('\/')[-2]\n    labels.append(target)","fddd4a63":"import numpy as np","0d81ea3d":"data=np.array(data)\/255\nlabels=np.array(labels)","ed2a4791":"labels.shape","68be8015":"from sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.utils import to_categorical","670d059e":"#le=LabelEncoder()","8b63e440":"le=LabelEncoder()\nlabels=le.fit_transform(labels)","b725872d":"labels=to_categorical(labels,2)","e091a656":"from tensorflow.keras import layers,models","9ded5300":"my_model=models.Sequential([\n    \n    layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,3)),\n    layers.MaxPool2D(),\n    \n    layers.Conv2D(64,(3,3),activation='relu'),\n    layers.MaxPool2D(),\n    \n    layers.Conv2D(128,(3,3),activation='relu'),\n    layers.MaxPool2D(),\n    \n    layers.Flatten(),\n    layers.Dense(500,activation='relu'),\n    layers.Dense(250,activation='relu'),\n    layers.Dense(50,activation='relu'),\n    \n    \n    layers.Dense(2,activation='softmax')\n    \n    \n    \n    \n    \n])","2256796d":"my_model.compile(\n\noptimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","ee42b78b":"my_model.fit(data,labels,batch_size=32,epochs=30)","fc031c49":"#Functional API models","1caa2523":"my_input=Input(shape=(28,28,3))\nlayer_conv=Conv2D(32,(3,3),activation='relu')(my_input)\nlayer_maxpool=MaxPool2D()(layer_conv)\nlayer_Dense=Dense(2,activation='softmax')(layer_maxpool)\nmy_nn=Model(inputs=my_input,outputs=layer_Dense)","b7e58cfd":"my_nn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","46d0abc4":"my_nn.fit(data,labels,batch_size=32,epochs=30)","af26a9a6":"labels=le.fit_transform(labels)"}}