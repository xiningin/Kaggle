{"cell_type":{"edff245b":"code","e09e2df1":"code","41d0696f":"code","5f62543b":"code","8946addd":"code","e70979ee":"code","71975ceb":"code","90a445ac":"code","7038739c":"code","ea04995b":"code","d5a985f3":"code","50cfc51b":"code","97b35ee4":"code","a3d2fa9f":"code","07cd3075":"code","104896aa":"markdown","2876cdfd":"markdown"},"source":{"edff245b":"import numpy as np\nimport pandas as pd\nimport joblib\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport optuna\n\nimport sklearn\nfrom sklearn import ensemble\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingRegressor, VotingClassifier,\\\nGradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import ShuffleSplit, train_test_split, GridSearchCV, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.feature_selection import SelectFromModel\nimport featuretools as ft\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier","e09e2df1":"train = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv')\n# drop ID column\ntrain = train.iloc[:,1:]\ntest = test.iloc[:,1:]\ntrain.head()","41d0696f":"X_cat = train.iloc[:, 10:54]\nX_num = train.iloc[:, 0:10]\ny = train['Cover_Type']\n\nscaler = StandardScaler()\nscaler.fit(X_num)\nX_num = scaler.transform(X_num)\nX_train = pd.DataFrame(np.hstack((X_num, X_cat)), columns=train.columns[0:54])\nprint(X_train.shape)","5f62543b":"X_cat_test = test.iloc[:, 10:54]\nX_num_test = test.iloc[:, 0:10]\n\nscaler = StandardScaler()\nscaler.fit(X_num_test)\nX_num_test = scaler.transform(X_num_test)\nX_test = pd.DataFrame(np.hstack((X_num_test, X_cat_test)), columns=test.columns[0:54])\nprint(X_test.shape)","8946addd":"es = ft.EntitySet(id = 'Forest_Cover')","e70979ee":"es.add_dataframe(dataframe_name = 'X_numerical', dataframe =  X_train.iloc[:, 0:10], \n                         make_index = True, index = 'index')\n\n# Run deep feature synthesis with transformation primitives\nX_numerical, features = ft.dfs(entityset = es, target_dataframe_name = 'X_numerical',\n                                      trans_primitives = ['add_numeric', 'multiply_numeric', 'subtract_numeric'])\n\nX_train = pd.concat([X_numerical, X_cat], axis=1)\nX_train.head()","71975ceb":"es.add_dataframe(dataframe_name = 'X_numerical', dataframe =  X_test.iloc[:, 0:10], \n                         make_index = True, index = 'index')\n\n# Run deep feature synthesis with transformation primitives\nX_numerical, features = ft.dfs(entityset = es, target_dataframe_name = 'X_numerical',\n                                      trans_primitives = ['add_numeric', 'multiply_numeric', 'subtract_numeric'])\n\nX_test = pd.concat([X_numerical, X_cat], axis=1)\nX_test.head()","90a445ac":"X_train['Slope_Hydrology'] = np.sqrt(X_train.Vertical_Distance_To_Hydrology**2 + X_train.Horizontal_Distance_To_Hydrology**2)\nX_train.Slope_Hydrology = X_train.Slope_Hydrology.map(lambda x: 0 if np.isinf(x) else x)\nX_train['Slope_Hydrology_PCT'] = (X_train.Vertical_Distance_To_Hydrology \/ X_train.Horizontal_Distance_To_Hydrology)*100\nX_train.Slope_Hydrology_PCT=X_train.Slope_Hydrology_PCT.map(lambda x: 0 if np.isinf(x) else x)\nX_train.Slope_Hydrology_PCT = X_train.Slope_Hydrology_PCT.fillna(0)\n\nX_train['Elev_to_Horizontal_Hyd']=X_train.Elevation - 0.2 * X_train.Horizontal_Distance_To_Hydrology \nX_train['Elev_to_Horizontal_Road']=X_train.Elevation - 0.05 * X_train.Horizontal_Distance_To_Roadways  \nX_train['Elev_to_Verticle_Hyd']=X_train.Elevation - X_train.Vertical_Distance_To_Hydrology \n\nX_train['Mean_Horizontal_Dist']=(X_train.Horizontal_Distance_To_Fire_Points + X_train.Horizontal_Distance_To_Hydrology + \n                                 X_train.Horizontal_Distance_To_Roadways)\/3 \nX_train['Mean_Fire_Hydro']=(X_train.Horizontal_Distance_To_Fire_Points + X_train.Horizontal_Distance_To_Hydrology)\/2\n","7038739c":"X_test['Slope_Hydrology'] = np.sqrt(X_test.Vertical_Distance_To_Hydrology**2 + X_test.Horizontal_Distance_To_Hydrology**2)\nX_test.Slope_Hydrology = X_test.Slope_Hydrology.map(lambda x: 0 if np.isinf(x) else x)\nX_test.Slope_Hydrology = X_test.Slope_Hydrology.fillna(0)\nX_test['Slope_Hydrology_PCT'] = (X_test.Vertical_Distance_To_Hydrology \/ X_test.Horizontal_Distance_To_Hydrology)*100\nX_test.Slope_Hydrology_PCT=X_test.Slope_Hydrology_PCT.map(lambda x: 0 if np.isinf(x) else x)\nX_test.Slope_Hydrology_PCT = X_test.Slope_Hydrology_PCT.fillna(0)\n\nX_test['Elev_to_Horizontal_Hyd']=X_test.Elevation - 0.2 * X_test.Horizontal_Distance_To_Hydrology \nX_test['Elev_to_Horizontal_Road']=X_test.Elevation - 0.05 * X_test.Horizontal_Distance_To_Roadways  \nX_test['Elev_to_Verticle_Hyd']=X_test.Elevation - X_test.Vertical_Distance_To_Hydrology \n\nX_test['Mean_Horizontal_Dist']=(X_test.Horizontal_Distance_To_Fire_Points + X_test.Horizontal_Distance_To_Hydrology + \n                                 X_test.Horizontal_Distance_To_Roadways)\/3 \nX_test['Mean_Fire_Hydro']=(X_test.Horizontal_Distance_To_Fire_Points + X_test.Horizontal_Distance_To_Hydrology)\/2","ea04995b":"#evaluate lightgbm algorithm for classification\nLGBM_model = LGBMClassifier()\n# evaluate the model\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(LGBM_model, X_train, y, scoring='accuracy', cv=cv, n_jobs=-1)\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (np.mean(n_scores), np.std(n_scores)))","d5a985f3":"LGBM_model.fit(X_train, y)","50cfc51b":"y_pred = LGBM_model.predict(X_test)","97b35ee4":"submission = pd.read_csv('..\/input\/forest-cover-type-prediction\/sampleSubmission.csv')\nsubmission.head()","a3d2fa9f":"submission['Cover_Type'] = y_pred\nsubmission.head()","07cd3075":"submission.to_csv('submission.csv', index = False, header = True)","104896aa":"## Gradient Boosting","2876cdfd":"\nfeature_matrix.head()"}}