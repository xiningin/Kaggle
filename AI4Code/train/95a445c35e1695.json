{"cell_type":{"b89a908a":"code","339e5f1b":"code","09bd9e2c":"code","cabe04a1":"code","f30c4bb6":"code","fa83dfe4":"code","ecebbe3e":"code","3abfb46b":"code","ae2fe3d6":"code","002b9a76":"code","c08d91bf":"code","5acb34f3":"code","1c4e5a80":"code","5cb8c7a9":"markdown","7aefbee1":"markdown","9f3267a4":"markdown"},"source":{"b89a908a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","339e5f1b":"import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Lambda, Flatten\nfrom keras.optimizers import Adam, RMSprop\nfrom sklearn.model_selection import train_test_split\nfrom keras import backend as k\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.layers import BatchNormalization, Conv2D , MaxPooling2D","09bd9e2c":"datos = pd.read_csv('..\/input\/train.csv')","cabe04a1":"x_train = (datos.iloc[:,1:].values).astype('float32')\ny_train = (datos.iloc[:,0].values).astype('int32')","f30c4bb6":"#Leemos datos de test\ntest = pd.read_csv('..\/input\/test.csv')\n#print(test.head())\nx_test = test.values.astype('float32')","fa83dfe4":"x_train = x_train.reshape(x_train.shape[0], 28, 28)\nfor i in range(6, 9):\n    plt.subplot(330 + (i+1))\n    plt.imshow(x_train[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","ecebbe3e":"#Redimensionamos\nx_train = x_train.reshape(x_train.shape[0], 28, 28,1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28,1)","3abfb46b":"#Normalizacion\nx_train = x_train\/255\nx_test = x_test\/255","ae2fe3d6":"from keras.utils.np_utils import to_categorical\ny_train= to_categorical(y_train)\nnum_classes = y_train.shape[1]","002b9a76":"#Creamos datos de entrenamiento y de validacion\nX_train, X_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.10, random_state=42)","c08d91bf":"model = Sequential()\nmodel.add = (Conv2D(128, (3,3), input_shape=(28, 28, 1), padding='same', activation = 'relu'))\nmodel.add = (MaxPooling2D(2,2))\nmodel.add = (BatchNormalization())\nmodel.add = (Dropout(0.2))\n    \nmodel.add = (Conv2D(128, (3,3),strides =1, padding='valid',activation='relu'))\nmodel.add = (MaxPooling2D(2,2))\nmodel.add = (BatchNormalization())\nmodel.add = (Dropout(0.2))\n\nmodel.add = (Conv2D(128, (3,3),strides =1, padding='valid',activation='relu'))\nmodel.add = (MaxPooling2D(2,2))\nmodel.add = (BatchNormalization())\nmodel.add = (Dropout(0.2))\n    \nmodel.add = (Flatten())\n    \nmodel.add = (Dense(10, activation = 'softmax'))\n\nadam = Adam(lr=0.001, decay=1e-6)\nmodel.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])","5acb34f3":"def mostrar(mostrar):\n    if mostrar==True:\n        print(\"val_acc\")\n        plt.plot(h.history['val_acc'], c = 'r')\n        plt.show()\n        print(\"val_loss\")\n        plt.plot(h.history['val_loss'], c = 'r')\n        plt.show()\n#callbacks\n#filepath = '..\/modelo_1\/{acc:.4f}-{val_acc:.4f}-{val_loss:.4f}.keras'\n#guardar = ModelCheckpoint(filepath, monitor='val_acc', verbose=0, \n#                              save_best_only=True, save_weights_only=False, mode='max')","1c4e5a80":"#h = model.fit(X_train, y_train, batch_size=128, epochs=10,  validation_data=(X_val, y_val), callbacks=[guardar])\nh = model.fit(X_train, y_train, batch_size=128, epochs=10,  validation_data=(X_val, y_val))","5cb8c7a9":"## 4. Creamos modelo","7aefbee1":"## Cargamos datos del proyecto","9f3267a4":"## 3. Modificamos, normalizamos, procesamos datos"}}