{"cell_type":{"02cf7b6c":"code","a3c4194e":"code","bb2886a1":"code","aa88c049":"code","d76ecb8f":"code","733eb4cc":"code","7964ffbc":"code","8c962a4a":"code","c9cfbc46":"code","a37b05cc":"code","873d7eff":"code","ac99dc99":"code","c5bc613f":"code","210485d0":"code","1c828a80":"code","e4d73462":"code","ef72d038":"code","36a9162d":"code","a88437b6":"code","4db56030":"code","c6190bf0":"markdown"},"source":{"02cf7b6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport datetime as dt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport datetime as dt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a3c4194e":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")","bb2886a1":"train.head()","aa88c049":"test.head()","d76ecb8f":"from sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\n\nfrom sklearn.preprocessing import scale\ntrain['var2']=le.fit_transform(train['var2'])\ntest['var2']=le.fit_transform(test['var2'])\n","733eb4cc":"train['datetime']=pd.to_datetime(train['datetime']) \ntest['datetime']=pd.to_datetime(test['datetime']) \n#train['date']= [d.split() for d in train['datetime']]","7964ffbc":"def conv(data):\n    data['month']=data['datetime'].dt.month\n    data['year']=data['datetime'].dt.year\n    data['day']=data['datetime'].dt.day\n    data['hour']=data['datetime'].dt.hour\n    data['sec']=data['datetime'].dt.second\n    data['min']=data['datetime'].dt.minute\n    \n    return data","8c962a4a":"train=conv(train)\ntest=conv(test)","c9cfbc46":"train.head()","a37b05cc":"test.head()","873d7eff":"train=train.groupby(['year','month'])[['electricity_consumption']].sum().reset_index()","ac99dc99":"train['Year month']=train['month'].astype(str)+\" \"+train[\"year\"].astype(str)","c5bc613f":"train.tail(7)","210485d0":"X=train.iloc[:, [2,3,4,5,6,8,9,10,11]].values\ny=train.iloc[:, 7].values\n","1c828a80":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","e4d73462":"from sklearn.linear_model import LinearRegression\nmlr = LinearRegression()\nmlr.fit(X_train, y_train)\n\n#predict the test set results\ny_pred = mlr.predict(X_test)\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n\nrmse = sqrt(mean_squared_error(y_test, y_pred))\n\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\n\nadj_r2 = 1 - float(len(y)-1)\/(len(y)-len(mlr.coef_)-1)*(1 - r2)\n\nrmse, r2, adj_r2","ef72d038":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","36a9162d":"\nfrom sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor(n_neighbors=10, weights='distance')\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)\n\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\n\nadj_r2 = 1 - float(len(y)-1)\/(len(y)-len(mlr.coef_)-1)*(1 - r2)\n\nr2, adj_r2","a88437b6":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=20, random_state=0)  \nregressor.fit(X_train, y_train)  \ny_pred = regressor.predict(X_test) \nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\n\nadj_r2 = 1 - float(len(y)-1)\/(len(y)-len(mlr.coef_)-1)*(1 - r2)\n\nr2, adj_r2","4db56030":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test) \nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\n\nadj_r2 = 1 - float(len(y)-1)\/(len(y)-len(mlr.coef_)-1)*(1 - r2)\n\nr2, adj_r2","c6190bf0":"from sklearn import ensemble\nparams = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.01, 'loss': 'ls'}\n\nregressor = ensemble.GradientBoostingRegressor(**params)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test) \nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nsqrt(mean_squared_error(y_test, y_pred))\nfrom sklearn.metrics import r2_score\nr2 = r2_score(y_test, y_pred)\n\nadj_r2 = 1 - float(len(y)-1)\/(len(y)-len(mlr.coef_)-1)*(1 - r2)\n\nr2, adj_r2"}}