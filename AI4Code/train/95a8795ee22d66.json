{"cell_type":{"cdd0ddf1":"code","031d8db3":"code","bf28ccb5":"code","416fbbbb":"code","8172e58a":"code","f9079285":"code","c8a68290":"code","efd5eedb":"code","38695dd5":"code","5c59aefd":"code","4c28bd8e":"code","98ac2005":"code","dc1ae43b":"code","84899cd1":"code","a2801b41":"code","4e91bcba":"code","0743eaab":"code","a34717c1":"code","56b330be":"markdown","38eddfb2":"markdown","5c7d1d1d":"markdown","d669a4cf":"markdown","2601b3ed":"markdown","92044b8e":"markdown","623c8008":"markdown","408b0d08":"markdown","239f600f":"markdown","77ffc02f":"markdown","acb6fbf4":"markdown","73eef9e3":"markdown"},"source":{"cdd0ddf1":"from glob import glob\nfrom PIL import Image\nfrom IPython import display\nimport tensorflow.keras as kr\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport imageio\nimport os","031d8db3":"BATCH_SIZE = 128\nLATENT_DIM = 100\nSAMPLE_INTERVAL = 200\nEPOCHS = 10000","bf28ccb5":"def generate_gif(gif_name='mnist_gan.gif', pattern='image*.png'):\n    with imageio.get_writer(gif_name, mode='I') as writer:\n        filenames = glob(pattern)\n        filenames = sorted(filenames)\n        last = -1\n        for i,filename in enumerate(filenames):\n            frame = 2*(i**0.5)\n            if round(frame) > round(last):\n                last = frame\n            else:\n                continue\n            image = imageio.imread(filename)\n            writer.append_data(image)\n            \n        image = imageio.imread(filename)\n        writer.append_data(image)\n\n    # this is a hack to display the gif inside the notebook\n    os.system('cp {} {}.png'.format(gif_name, gif_name))","416fbbbb":"def sample_images(generator, epoch, save=True, name='mnist'):\n    \"\"\" Sample images from generator, plot them and save as png\"\"\"\n\n    noise = np.random.normal(size=(5 * 5, LATENT_DIM))\n    gen_imgs = generator.predict(noise)\n    gen_imgs = 0.5 * gen_imgs + 0.5     # Rescale images 0-1\n\n    fig, axs = plt.subplots(5, 5)\n    c = 0\n    for i in range(5):\n        for j in range(5):\n            axs[i,j].imshow(gen_imgs[c, :,:,0], cmap='gray')\n            axs[i,j].axis('off')\n            c += 1\n            \n    if save:\n        fig.savefig(\"{}_{}.png\".format(name, epoch))\n        plt.close()\n    else:\n        plt.show()","8172e58a":"(X, _), (_, _) = kr.datasets.mnist.load_data()\n\nX = X.reshape(X.shape[0], 28, 28, 1).astype('float32')\nX = (X - 127.5) \/ 127.5 # Normalize the images to [-1, 1]","f9079285":"def build_generator(output_shape=(28, 28, 1)): \n    model = kr.Sequential(name='generator')\n    \n    model.add(kr.layers.Dense(256, input_shape=(LATENT_DIM, )))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n\n    model.add(kr.layers.Dense(512))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n\n    model.add(kr.layers.Dense(1024))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n\n    model.add(kr.layers.Dense(np.prod(output_shape), activation='tanh'))\n    model.add(kr.layers.Reshape(output_shape))\n\n    return model\n\n\ngenerator = build_generator()\ngenerator.summary()","c8a68290":"def build_discriminator(input_shape=(28, 28, 1)):\n    model = kr.Sequential(name='discriminator')\n\n    model.add(kr.layers.Flatten(input_shape=input_shape))\n    model.add(kr.layers.Dense(512))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n\n    model.add(kr.layers.Dense(256))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n\n    model.add(kr.layers.Dense(1, activation='sigmoid'))\n\n    return model\n\n\ndiscriminator = build_discriminator()\ndiscriminator.summary()","efd5eedb":"optimizer = kr.optimizers.Adam(0.0002, 0.5)\n\ndiscriminator.compile(loss='binary_crossentropy', optimizer=optimizer,  metrics=['acc'])\ndiscriminator.trainable = False    # For GAN we will only train the generator\n\nz = kr.Input(shape=(LATENT_DIM,)) \nvalid = discriminator(generator(z))\n\nmodel = kr.Model(z, valid)\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer)\nmodel.summary()","38695dd5":"# Adversarial ground truths\nvalid_labels = np.ones((BATCH_SIZE, 1))\nfake_labels = np.zeros((BATCH_SIZE, 1))\n\nfor epoch in range(EPOCHS):\n    noise = np.random.normal(size=(BATCH_SIZE, LATENT_DIM))\n    \n    # Shuffle and batch data \n    imgs = X[np.random.randint(0, X.shape[0], BATCH_SIZE)] \n    \n    loss_real = discriminator.train_on_batch(imgs, valid_labels)\n    loss_fake = discriminator.train_on_batch(generator.predict(noise), fake_labels)\n    d_loss, d_acc = 0.5 * np.add(loss_real, loss_fake)\n    \n    noise = np.random.normal(size=(BATCH_SIZE, LATENT_DIM))\n    g_loss = model.train_on_batch(noise, valid_labels)\n    display.clear_output(wait=True)\n    print (\"Epoch : %d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss, 100*d_acc, g_loss))\n\n    # If at save interval => save generated image samples\n    if epoch % SAMPLE_INTERVAL == 0:\n        sample_images(generator, epoch, name='..\/working\/mnist')","5c59aefd":"sample_images(generator, None, save=False)","4c28bd8e":"generate_gif(gif_name='..\/working\/mnist_gan.gif', pattern='..\/working\/mnist*.png')\ndisplay.Image(filename=\"..\/working\/mnist_gan.gif.png\")","98ac2005":"(X, _), (_, _) = kr.datasets.fashion_mnist.load_data()\n\nX = X.reshape(X.shape[0], 28, 28, 1).astype('float32')\nX = (X - 127.5) \/ 127.5 # Normalize the images to [-1, 1]","dc1ae43b":"def generator_model():\n    model = kr.Sequential()\n    \n    model.add(kr.layers.Dense(7 * 7 * 128, activation=\"relu\", input_shape=(LATENT_DIM,)))\n    model.add(kr.layers.Reshape((7, 7, 128)))\n    \n    model.add(kr.layers.UpSampling2D())\n    model.add(kr.layers.Conv2D(128, (3, 3), padding='same'))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n    model.add(kr.layers.ReLU())\n\n    model.add(kr.layers.UpSampling2D())\n    model.add(kr.layers.Conv2D(64, (3, 3), padding='same'))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n    model.add(kr.layers.ReLU())\n\n    model.add(kr.layers.Conv2D(1, (3, 3), padding='same', activation='tanh'))\n  \n    return model\n\n\ngenerator = generator_model()\ngenerator.summary()","84899cd1":"def discriminator_model():\n    model = kr.Sequential()\n    \n    model.add(kr.layers.Conv2D(32, (3, 3), strides=(2, 2), padding='same', input_shape=(28, 28, 1)))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.Dropout(0.25))\n      \n    model.add(kr.layers.Conv2D(64, (3, 3), strides=(2, 2), padding='same'))\n    # model.add(kr.layers.ZeroPadding2D(padding=((0,1),(0,1))))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.Dropout(0.25))\n    \n    model.add(kr.layers.Conv2D(128, (3, 3), strides=(2, 2), padding='same'))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.Dropout(0.25))\n    \n    model.add(kr.layers.Conv2D(256, (3, 3), strides=(2, 2), padding='same'))\n    model.add(kr.layers.BatchNormalization(momentum=0.8))\n    model.add(kr.layers.LeakyReLU(alpha=0.2))\n    model.add(kr.layers.Dropout(0.25))\n       \n    model.add(kr.layers.Flatten())\n    model.add(kr.layers.Dense(1, activation='sigmoid'))\n     \n    return model\n\n\ndiscriminator = discriminator_model()\ndiscriminator.summary()","a2801b41":"optimizer = kr.optimizers.Adam(0.0002, 0.5)\n\ndiscriminator.compile(loss='binary_crossentropy', optimizer=optimizer,  metrics=['acc'])\ndiscriminator.trainable = False    # For GAN we will only train the generator\n\nz = kr.Input(shape=(LATENT_DIM,)) \nvalid = discriminator(generator(z))\n\nmodel = kr.Model(z, valid)\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer)\nmodel.summary()","4e91bcba":"# Adversarial ground truths\nvalid_labels = np.ones((BATCH_SIZE, 1))\nfake_labels = np.zeros((BATCH_SIZE, 1))\n\nfor epoch in range(EPOCHS):\n    noise = np.random.normal(size=(BATCH_SIZE, LATENT_DIM))\n    \n    # Shuffle and batch data \n    imgs = X[np.random.randint(0, X.shape[0], BATCH_SIZE)] \n    \n    loss_real = discriminator.train_on_batch(imgs, valid_labels)\n    loss_fake = discriminator.train_on_batch(generator.predict(noise), fake_labels)\n    d_loss, d_acc = 0.5 * np.add(loss_real, loss_fake)\n    \n    noise = np.random.normal(size=(BATCH_SIZE, LATENT_DIM))\n    g_loss = model.train_on_batch(noise, valid_labels)\n    display.clear_output(wait=True)\n    print (\"Epoch : %d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss, 100*d_acc, g_loss))\n\n    # If at save interval => save generated image samples\n    if epoch % SAMPLE_INTERVAL == 0:\n        sample_images(generator, epoch, name='..\/working\/fmnist')","0743eaab":"sample_images(generator, None, save=False, name='..\/working\/fmnist')","a34717c1":"generate_gif(gif_name='..\/working\/fmnist_gan.gif', pattern='..\/working\/fmnist*.png')\ndisplay.Image(filename=\"..\/working\/fmnist_gan.gif.png\")","56b330be":"**Utility Functions**","38eddfb2":"### The Discriminator model\n\nThe discriminator will try to distinguish fake images from real images. ","5c7d1d1d":"### Starting with MNIST\n\nWe are going start with MNIST dataset to train the generator and the discriminator. The generator will generate handwritten digits resembling the MNIST data.","d669a4cf":"### The Generator Model\n\nThe generator will try to create images that are good enough to fool the discriminator. First, we are going to start with a simple model - with Dense layers -.","2601b3ed":"## Conclusions\n\nI would like to mention that training GAN is really hard as they are so sensetive to hyperparameters. Sometimes it is possible that the generation loss will became 0 and discriminator loss will keep increasing. Before starting to train a model of your own, it may save your time to find a proven to be working models. Lastly, don't forget to upvote if you like my kernel!","92044b8e":"It doesn't look bad for a starter model, does it?.","623c8008":"## GANs, Autoencoders and VAEs\nIt may be useful to compare generative adversarial networks to other neural networks, such as autoencoders and variational autoencoders.\n\n**Autoencoders** encode input data as vectors. They create a hidden, or compressed, representation of the raw data. They are useful in dimensionality reduction; that is, the vector serving as a hidden representation compresses the raw data into a smaller number of salient dimensions. Autoencoders can be paired with a so-called decoder, which allows you to reconstruct input data based on its hidden representation, much as you would with a restricted Boltzmann machine.\n\n**Variational autoencoders** are generative algorithm that add an additional constraint to encoding the input data, namely that the hidden representations are normalized. Variational autoencoders are capable of both compressing data like an autoencoder and synthesizing data like a GAN. However, while GANs generate data in fine, granular detail, images generated by VAEs tend to be more blurred.","408b0d08":"## DC-GAN with Fashion MNIST\n\nNow, let's change our data to Fashion MNIST to generate clothes meanwhile using the Deep Convolutional GAN model.","239f600f":"**Compile our DC-GAN Model**","77ffc02f":"### The Discriminator model\n\nIt's similar to a regular CNN-based image classifier.","acb6fbf4":"### The Generator Model","73eef9e3":"# Generative Adversarial Networks\n\n![sample output](https:\/\/tensorflow.org\/images\/gan\/dcgan.gif)\n\n[Generative Adversarial Networks](https:\/\/arxiv.org\/abs\/1406.2661), are a framework for estimating generative models. Two models are trained simultaneously by an adversarial process: a Generator, which is responsible for generating data, and a Discriminator, which is responsible for estimating the probability that an image was drawn from the training data (real), or was produced by the Generator (fake). During training, the Generator becomes progressively better at generating images, until the Discriminator is no longer able to distinguish real images from fake. \n\n<img src=\"https:\/\/res.cloudinary.com\/dpyleb8ih\/image\/upload\/v1560787382\/1_nAVqFluPijpBWR2tI4gCxg.png\">"}}