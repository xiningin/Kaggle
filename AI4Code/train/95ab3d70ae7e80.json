{"cell_type":{"bd278e6b":"code","673b990d":"code","2143d928":"code","8abbb236":"code","20618276":"code","7fb472cb":"code","efd6eb90":"code","e391f850":"code","b029079c":"code","0dea518a":"code","e1db6d60":"code","d6aeea85":"code","b9720bb9":"code","38c09664":"code","93e8ea40":"code","e86d7b74":"code","6f61ecd7":"code","8355af38":"code","bae6efd4":"code","1e4270bd":"code","e0959432":"code","20e38650":"markdown","f19a65d6":"markdown","38f6652a":"markdown"},"source":{"bd278e6b":"# Thanks @Lavanya Gupta whose kernel inspired me!\n# Please check https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market\n\n# import required packages\nfrom matplotlib import pyplot as plt\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport tensorflow as tf\nfrom scipy import stats\nplt.style.use(\"ggplot\")\ncolor = sns.color_palette()\nsns.set(rc={'figure.figsize':(25,15)})\nimport warnings\nwarnings.filterwarnings('ignore')","673b990d":"df = pd.read_csv('..\/input\/googleplaystore.csv') # read the data","2143d928":"df.shape","8abbb236":"# data cleanning\n\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('Varies with device', 'NaN') \n                              if \"Varies with device\" in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace('M','') \n                              if 'M' in str(x) else x)\ndf[\"Size\"] = df[\"Size\"].apply(lambda x: str(x).replace(',','') \n                              if ',' in str(x) else x)\ndf['Size'] = df['Size'].apply(lambda x: str(x).replace('+', '') \n                              if '+' in str(x) else x)\ndf['Size'] = df[\"Size\"].apply(lambda x: float(str(x).replace('k',''))\/1024 \n                              if 'k' in str(x) else x)","20618276":"df['Installs'] = df['Installs'].apply(lambda x: x.replace('+', '') if '+' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace(',', '') if ',' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('Free', 'NaN') if 'Free' in x else x)\ndf['Installs'] = df['Installs'].apply(lambda x: x.replace('Paid', 'NaN') if 'Paid' in x else x)","7fb472cb":"df[\"Price\"] = df[\"Price\"].apply(lambda x: str(x).replace('$','') if '$' in x else x)","efd6eb90":"df = df.dropna()","e391f850":"df['Size'] = df['Size'].apply(lambda x:float(x))\ndf['Installs'] = df['Installs'].apply(lambda x:int(x))\ndf['Reviews'] = df['Reviews'].apply(lambda x:int(x))\ndf['Price'] = df['Price'].apply(lambda x:float(x))\ndf = df.dropna()","b029079c":"data = df[['Rating', 'Size', 'Installs', 'Reviews', 'Price']]","0dea518a":"def mean_norm(x):\n    x = np.array(x)\n    x = (x - np.mean(x))\/np.std(x)\n    return x","e1db6d60":"data['Rating'] = mean_norm(data['Rating'])\ndata['Size'] = mean_norm(data['Size'])\ndata['Installs'] = mean_norm(data['Installs'])\ndata['Reviews'] = mean_norm(data['Reviews'])\ndata['Price'] = mean_norm(data['Price'])\nresult = data","d6aeea85":"data = np.array(data)\nprint(data[0:5])","b9720bb9":"def input_fn():\n    return tf.data.Dataset.from_tensors(tf.convert_to_tensor(data, dtype=tf.float32)).repeat(1)","38c09664":"x = input_fn()\nprint(x)","93e8ea40":"num_clusters = 3\nkmeans = tf.contrib.factorization.KMeansClustering(\n    num_clusters=num_clusters, use_mini_batch=False)","e86d7b74":"num_iterations = 20\nprevious_centers = None\nfor _ in range(num_iterations):\n    kmeans.train(input_fn)\n    cluster_centers = kmeans.cluster_centers()\n    if previous_centers is not None:\n        dis = previous_centers - cluster_centers\n        print('dleta' + str(dis))\n    previous_centers = cluster_centers\n    print(\"socre:\" + str(kmeans.score(input_fn)))\nprint(\"the centers are: \" + str(previous_centers))\ncenter = previous_centers","6f61ecd7":"cluster_indices = list(kmeans.predict_cluster_index(input_fn))","8355af38":"result['Group'] = cluster_indices","bae6efd4":"result['Group'] = result['Group'].apply(lambda x: str(x))\nresult['Group'] = result['Group'].apply(lambda x: x.replace('0', 'Group1') if '0' == x else x)\nresult['Group'] = result['Group'].apply(lambda x: x.replace('1', 'Group2') if '1' == x else x)\nresult['Group'] = result['Group'].apply(lambda x: x.replace('2', 'Group3') if '2' == x else x)","1e4270bd":"ra = df['Rating']\ns = df['Size']\ni = df['Installs']\nre = df['Reviews']\nc = result['Group']\np = df['Price']\n\nsns.pairplot(pd.DataFrame(list(zip(ra, s, np.log(i), np.log(re), c, p)), \n                        columns=['Rating','Size', 'Installs', 'Reviews', 'Group', 'Price']),hue='Group', palette=\"Set2\")","e0959432":"num_of_app_in_group = result['Group'].value_counts().sort_values(ascending=True)\ndata1 = [go.Pie(\n        labels = num_of_app_in_group.index,\n        values = num_of_app_in_group.values\n)]\nplotly.offline.iplot(data1, filename='apps_per_group')","20e38650":"K-Means:\n1. Saving the attributs we want to use to 'data'\n2. Using mean normilization to normilize the raw data\n3. Use TensorFlow K-means to classify the apps into 3 groups (num_iterations = 20)","f19a65d6":"**Data Cleaning**\n1.  Convert app size to MB\n2. Remove '+' from 'Number of Installs'\n3. Remove 'NaN'\n4. Remove '$' from 'Price'\n5. Convert 'String' to 'int' or 'float'","38f6652a":"Data Visualization"}}