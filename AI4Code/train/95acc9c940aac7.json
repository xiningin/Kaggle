{"cell_type":{"a07f5f87":"code","3c196d63":"code","5c0e0608":"code","4fb8f15b":"code","3b2b0a28":"code","4c237d8b":"code","4850b74e":"code","88a360d2":"code","362efa32":"code","02739856":"code","bec80f13":"code","221e587b":"code","4b6056ff":"code","7be4eb89":"code","eab0f6fa":"code","495943ea":"code","d5415f3a":"code","7ad5b847":"code","afd4c094":"code","4b1cc840":"code","be8910bf":"code","7a89ca0f":"code","db423898":"code","7270ff9b":"code","78faa77d":"code","c80f666c":"code","d8faa9d6":"code","d0a0c93d":"code","19031a1d":"code","d207d803":"code","9c37b072":"code","b63eb88d":"markdown","9c690ef5":"markdown","713d45ac":"markdown","c8d03cc8":"markdown","5688ca3b":"markdown","25028afd":"markdown","ae658163":"markdown","99b75bb8":"markdown","41088de0":"markdown","85e3035c":"markdown","2e77883f":"markdown","0bbe552e":"markdown","e8abb3a6":"markdown","d799dfb2":"markdown","49caed70":"markdown","55d0b800":"markdown","a7f60266":"markdown","31f54f25":"markdown","950956d6":"markdown","19ee5bae":"markdown","68682dc7":"markdown","b2e46a28":"markdown","9adcfc9b":"markdown","dc6780e8":"markdown","428718b1":"markdown","6995a25f":"markdown","2aacb489":"markdown","930ed927":"markdown","b14d9c42":"markdown"},"source":{"a07f5f87":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","3c196d63":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()","5c0e0608":"df.info()","4fb8f15b":"df.isnull().sum()","3b2b0a28":"df.duplicated().sum()","4c237d8b":"df.shape","4850b74e":"df.drop_duplicates(inplace=True)","88a360d2":"df.shape","362efa32":"numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']\ndf[numerical_cols].describe()","02739856":"fig, axes = plt.subplots(3, 3, figsize=(15, 14))\n\ncategorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'exng', 'slp', 'caa', 'thall']\n\ni = 0\nfor row in range(0, 3):\n    if row == 2:\n        for col in range(0, 2):\n            plot = sns.countplot(\n                x = categorical_cols[i],\n                data = df,\n                palette = ['#a6e3e9', '#ffc7c7', '#bbded6', '#8785a2', '#f9ed69'],\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(categorical_cols[i])\n            i += 1\n    else:\n        for col in range(0, 3):\n            sns.countplot(\n                x = categorical_cols[i],\n                data = df,\n                palette = ['#a6e3e9', '#ffc7c7', '#bbded6', '#8785a2', '#f9ed69'],\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(categorical_cols[i])\n            i += 1\n\n\nfig.suptitle('Count Plot Categorical Data', size=15)\naxes[2, 2].remove()\nplt.show()","bec80f13":"fig, axes = plt.subplots(figsize=(9, 7))\n\nsns.countplot(\n    x = 'output',\n    data = df,\n    palette = ['#a6e3e9', '#ffc7c7'],\n    ax = axes\n)\nfig.suptitle('Count of Target Classes', size=15)\naxes.set_xlabel('')\naxes.set_ylabel('Counts')\naxes.set_title('output')\naxes.set_xticklabels(['0\\nless chance of heart attack', '1\\nmore chance of heart attack'])\nplt.show()","221e587b":"fig, axes = plt.subplots(4, 3, figsize=(20, 16))\n\ni = 0\nfor row in range(0, 3, 2):\n    if row == 2:\n        for col in range(0, 2):\n            sns.histplot(\n                x = np.array(df[numerical_cols[i]]),\n                color = '#ffc7c7',\n                ax = axes[row, col]\n            )\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n    else:\n        for col in range(0, 3):\n            sns.histplot(\n                x = np.array(df[numerical_cols[i]]),\n                color = '#ffc7c7',\n                ax = axes[row, col]\n            )\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n\ni = 0\nfor row in range(1, 4, 2):\n    if row == 3:\n        for col in range(0, 2):\n            sns.boxplot(\n                x = np.array(df[numerical_cols[i]]),\n                palette = ['#a6e3e9'],\n                width = 0.5,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n            \n    else:\n        for col in range(0, 3):\n            sns.boxplot(\n                x = np.array(df[numerical_cols[i]]),\n                palette = ['#a6e3e9'],\n                width = 0.5,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n\nfig.suptitle('Histogram and Box Plot Numerical Data', size=15)\naxes[2, 2].remove()\naxes[3, 2].remove()\nplt.show()","4b6056ff":"fig, axes = plt.subplots(3, 3, figsize=(20, 17))\n\n# sex\nsns.countplot(\n    x = 'sex',\n    hue = 'output',\n    data = df,\n    palette = ['#a6e3e9', '#b83b5e'],\n    ax = axes[0, 0]\n)\naxes[0, 0].set_xlabel('')\naxes[0, 0].set_title('sex')\naxes[0, 0].set_xticklabels(['0\\nFemale', '1\\nMale'])\n\n# cp\nsns.kdeplot(\n    x = 'cp',\n    hue = 'output',\n    data = df,\n    palette = ['#08d9d6', '#b83b5e'],\n    fill = True,\n    ax = axes[0, 1]\n)\naxes[0, 1].set_xlabel('')\naxes[0, 1].set_title('cp')\n\n# fbs\nsns.countplot(\n    x = 'fbs',\n    hue = 'output',\n    data = df,\n    palette = ['#a6e3e9', '#b83b5e'],\n    ax = axes[0, 2]\n)\naxes[0, 2].set_xlabel('')\naxes[0, 2].set_title('fbs')\naxes[0, 2].set_xticklabels(['0', '1\\nfasting blood sugar > 120 mg\/dl'])\n\n# restecg\nsns.kdeplot(\n    x = 'restecg',\n    hue = 'output',\n    data = df,\n    palette = ['#08d9d6', '#b83b5e'],\n    fill = True,\n    ax = axes[1, 0]\n)\naxes[1, 0].set_xlabel('')\naxes[1, 0].set_title('restecg')\n\n# exng\nsns.countplot(\n    x = 'exng',\n    hue = 'output',\n    data = df,\n    palette = ['#a6e3e9', '#b83b5e'],\n    ax = axes[1, 1]\n)\naxes[1, 1].set_xlabel('')\naxes[1, 1].set_title('exngg')\naxes[1, 1].set_xticklabels(['0', '1\\nexercise induced angina'])\n\n# slp\nsns.kdeplot(\n    x = 'slp',\n    hue = 'output',\n    data = df,\n    palette = ['#08d9d6', '#b83b5e'],\n    fill = True,\n    ax = axes[1, 2]\n)\naxes[1, 2].set_xlabel('')\naxes[1, 2].set_title('slp')\n\n# caa\nsns.kdeplot(\n    x = 'caa',\n    hue = 'output',\n    data = df,\n    palette = ['#08d9d6', '#b83b5e'],\n    fill = True,\n    ax = axes[2, 0]\n)\naxes[2, 0].set_xlabel('')\naxes[2, 0].set_title('caa')\n\n# thall\nsns.kdeplot(\n    x = 'thall',\n    hue = 'output',\n    data = df,\n    palette = ['#08d9d6', '#b83b5e'],\n    fill = True,\n    ax = axes[2, 1]\n)\naxes[2, 1].set_xlabel('')\naxes[2, 1].set_title('thall')\n\nfig.suptitle('Visualization of Categorical Data According Target Classes', size=15)\naxes[2, 2].remove()\nplt.show()","7be4eb89":"percentage = []\npercentage.append(df.loc[(df['sex'] == 1) & (df['output'] == 1)].count()[0]*100\/df.loc[df['sex'] == 1].count()[0])\npercentage.append(df.loc[(df['sex'] == 0) & (df['output'] == 1)].count()[0]*100\/df.loc[df['sex'] == 0].count()[0])\n\nfig, axes = plt.subplots(figsize=(9, 7))\n\nsns.barplot(\n    x = df['sex'].unique(),\n    y = percentage,\n    palette = ['#f5c0c0', '#b0efeb'],\n    ax = axes\n)\n\nfig.suptitle('Percentage More Chance Heart Attack (Target Class 1) of Sex Features', size=15)\naxes.set_title('sex')\naxes.set_ylabel('Percentage')\naxes.set_xticklabels(['0\\nFemale', '1\\nMale'])\nplt.show()","eab0f6fa":"fig, axes = plt.subplots(4, 3, figsize=(20, 17))\n\ni = 0\nfor row in range(0, 3, 2):\n    if row == 2:\n        for col in range(0, 2):\n            sns.kdeplot(\n                x = numerical_cols[i],\n                hue = 'output',\n                data = df,\n                palette = ['#08d9d6', '#b83b5e'],\n                fill = True,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n    else:\n        for col in range(0, 3):\n            sns.kdeplot(\n                x = numerical_cols[i],\n                hue = 'output',\n                data = df,\n                palette = ['#08d9d6', '#b83b5e'],\n                fill = True,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n\ni = 0\nfor row in range(1, 4, 2):\n    if row == 3:\n        for col in range(0, 2):\n            sns.boxplot(\n                x = numerical_cols[i],\n                y = 'output',\n                data = df,\n                orient = 'h',\n                palette = ['#a6e3e9', '#b83b5e'],\n                width = 0.5,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n    else:\n        for col in range(0, 3):\n            sns.boxplot(\n                x = numerical_cols[i],\n                y = 'output',\n                data = df,\n                orient = 'h',\n                palette = ['#a6e3e9', '#b83b5e'],\n                width = 0.5,\n                ax = axes[row, col]\n            )\n            axes[row, col].set_xlabel('')\n            axes[row, col].set_title(numerical_cols[i])\n            i += 1\n\nfig.suptitle('Visualization of Numerical Data According Target Classes', size=15)\naxes[2, 2].remove()\naxes[3, 2].remove()\nplt.show()","495943ea":"fig, axes = plt.subplots(figsize=(11, 9))\n\nsns.heatmap(\n    data = df.corr(),\n    cmap = 'coolwarm',\n    annot = True,\n    ax = axes\n)\n\nplt.show()","d5415f3a":"X = df.drop(columns=['output']).values\nX","7ad5b847":"y = df['output'].values\ny","afd4c094":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","4b1cc840":"df_temp = pd.DataFrame(X_train)\ndf_temp.head()","be8910bf":"numerical_cols","7a89ca0f":"columns_to_scale = [0, 3, 4, 7, 9]","db423898":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train[:, columns_to_scale] = sc.fit_transform(X_train[:, columns_to_scale])\nX_test[:, columns_to_scale] = sc.transform(X_test[:, columns_to_scale])","7270ff9b":"df_temp = pd.DataFrame(X_train)\ndf_temp.head()","78faa77d":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(random_state=0)\nclassifier.fit(X_train, y_train)","c80f666c":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(f'accuracy score: {\"{:.2f}\".format(accuracy_score(y_test, y_pred)*100)} %')","d8faa9d6":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=classifier, X=X_train, y=y_train, cv=10)\nprint(f'10-fold cross validation mean accuracy: {\"{:.2f}\".format(accuracies.mean()*100)} %')\nprint(f'standard deviation: {\"{:.2f}\".format(accuracies.std()*100)} %')","d0a0c93d":"classifier.get_params()","19031a1d":"n_estimators = np.arange(10, 160, 10)\nrandom_state = np.arange(0, 21)","d207d803":"from sklearn.model_selection import GridSearchCV\nparameters = [\n    {\n        'n_estimators': n_estimators,\n        'criterion': ['gini', 'entropy'],\n        'random_state': random_state,\n        'class_weight': ['balanced', 'balanced_subsample', None]\n    }\n]\n\ngrid_search = GridSearchCV(\n    estimator=classifier,\n    param_grid=parameters,\n    scoring='accuracy',\n    cv=10,\n    n_jobs=-1\n)\n\ngrid_search.fit(X_train, y_train)\n\nbest_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(f'best 10-fold cross validation mean accuracy: {\"{:.2f}\".format(best_accuracy*100)} %')\nprint(f'best parameters: {best_parameters}')","9c37b072":"df_accuracy = pd.DataFrame(grid_search.cv_results_)\ndf_accuracy.sort_values(by='rank_test_score').head()","b63eb88d":"#### Evaluate with k-Fold Cross Validation","9c690ef5":"## Heart Attack Analysis and Prediction","713d45ac":"## Exploratory Data Analysis","c8d03cc8":"#### Correlation","5688ca3b":"### Training Model","25028afd":"age, trtbps, chol, thalachh, oldpeak","ae658163":"sex, cp, fbs, restecg, exng, slp, caa, thall, output","99b75bb8":"## Importing Libraries","41088de0":"sex, cp, fbs, restecg, exng, slp, caa, thall, output","85e3035c":"### Split into Features and Target Variable","2e77883f":"## Importing Dataset","0bbe552e":"## Descriptive Statistic Numerical Data","e8abb3a6":"### Multivariate Analysis","d799dfb2":"### Bivariate Analysis","49caed70":"#### Numerical Data According Target Classes","55d0b800":"### Hyperparameter Tuning","a7f60266":"### Conclusion","31f54f25":"### Split into Training Set and Test Set","950956d6":"### Evaluate Model","19ee5bae":"#### Categorical Data","68682dc7":"age, trtbps, chol, thalachh, oldpeak","b2e46a28":"#### Numerical Data","9adcfc9b":"#### Categorical Data According Target Classes","dc6780e8":"### Univariate Analysis","428718b1":"1. Univariate Analysis\n    - The sex feature has more male (1) observation data than female (0) observation data\n    - Target classes doesn't occur imbalanced data\n    - Every numerical data has outliers except age feature\n    - The distribution of the age feature almost has a normal distribution\n2. Bivariate Analysis\n    - sex - Female has greater percentage of more chance heart attack than male\n    - cp - Chest pain type 2 (non-anginal pain) has greatest percentage of more chance heart attack\n    - restecg - Resting electrocardiographic results 1 (ST-T wave normality) has greatest percentage of more chance heart attack\n    - exngg - Exercise induced angina 0 (no) has greater percentage of more chance heart attach than 1 (yes)\n    - slp - Slope 2 has greatest percentage of more chance heart attack\n    - caa - Number of major vessels 0 has greatest percentage of more chance heart attack\n    - thall - Thalium Stress Test result 2 has greatest percentage of more chance heart attack\n    - age - Age around 50 have a greater chance of having heart attack\n    - thalachh - Maximum heart rate achieved\n        - greater maximum heart rate achieved, greater chance to heart attack\n    - oldpeak - Previous peak\n        - lowest previous peak achieved, greater chance to heart attack\n3. Multivariate Analysis\n    - according to the heatmap, there are few features that have a fairly large positive correlation with output, such as cp, thalachh, and slp.\n    - according to the heatmap, there are few features that have a fairly large negative correlation with output, such as exng, oldpeak, and caa.","6995a25f":"## About Dataset","2aacb489":"age - Age of the patient\n\nsex - Sex of the patient (1 = male; 0 = female)\n\ncp - Chest pain type ~ 0 = Typical Angina, 1 = Atypical Angina, 2 = Non-anginal Pain, 3 = Asymptomatic\n\ntrtbps - Resting blood pressure (in mm Hg)\n\nchol - Cholestoral in mg\/dl fetched via BMI sensor\n\nfbs - (fasting blood sugar > 120 mg\/dl) ~ 1 = True, 0 = False\n\nrestecg - Resting electrocardiographic results ~ 0 = Normal, 1 = ST-T wave normality, 2 = Left ventricular hypertrophy\n\nthalachh - Maximum heart rate achieved\n\noldpeak - Previous peak\n\nslp - Slope\n\ncaa - Number of major vessels\n\nthall - Thalium Stress Test result ~ (0,3)\n\nexng - Exercise induced angina ~ 1 = Yes, 0 = No\n\noutput - 0= less chance of heart attack 1= more chance of heart attack","930ed927":"### Feature Scaling","b14d9c42":"## Prediction with Model"}}