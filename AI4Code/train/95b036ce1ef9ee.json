{"cell_type":{"c4017da8":"code","dff697ca":"code","306b3d9b":"code","956ecce6":"code","bc30bd2b":"code","14750002":"code","525204ad":"code","e7ec50f2":"code","73967025":"code","e0d0534c":"code","00c5429d":"markdown","8027538c":"markdown"},"source":{"c4017da8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')","dff697ca":"data = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\nprint(data.info())","306b3d9b":"data.head()","956ecce6":"#Explore categorical values\n\nfig, ax = plt.subplots(2, 3, figsize = (15,8))\nfig.tight_layout(pad=4.0)\n\nax[0][0].bar(data.Gender.value_counts().index, data.Gender.value_counts())\nax[0][0].set_title('Gender')\n\nax[0][1].bar(data.Driving_License.value_counts().index, data.Driving_License.value_counts())\nax[0][1].set_title('Driving License')\nax[0][1].set_xticks([0,1])\n\n\nax[0][2].bar(data.Previously_Insured.value_counts().index, data.Previously_Insured.value_counts())\nax[0][2].set_title('Previously Insured')\nax[0][2].set_xticks([0,1])\n\nax[1][0].bar(data.Vehicle_Age.value_counts().index, data.Vehicle_Age.value_counts())\nax[1][0].set_title('Vehicle Age')\n\nax[1][1].bar(data.Vehicle_Damage.value_counts().index, data.Vehicle_Damage.value_counts())\nax[1][1].set_title('Vehicle_Damage')\n\nax[1][2].bar(data.Response.value_counts().index, data.Response.value_counts())\nax[1][2].set_title('Response')\nax[1][2].set_xticks([0,1])","bc30bd2b":"#Correlation\nplt.figure(figsize = (10, 10))\nsns.heatmap(data.corr(), annot = True, fmt = '0.2g')","14750002":"#data is highly imbalanced\nresponse_1 = data[data.Response == 1]\nresponse_0 = data[data.Response == 0]\ndata_new = data.append([response_1]*(len(response_0)\/\/len(response_1) - 1))\nprint(data_new.Response.value_counts())\ndata_new = data_new.sample(frac = 1.0, random_state = 0)\n\nnum_cols = ['Age', 'Region_Code', 'Annual_Premium', 'Vintage', 'Policy_Sales_Channel']\ncategorical_col = ['Gender','Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage']\n\nimp_columns = num_cols + categorical_col\n\ny = data_new.Response\nx = data_new[imp_columns]\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x, y, test_size = 0.3, random_state = 0)","525204ad":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error\n\n#Categorical columns\npreprocessor = ColumnTransformer(transformers = [('minmax',MinMaxScaler(), num_cols),('onehot', OneHotEncoder(), categorical_col)])\n\n#model\nmodel = RandomForestClassifier(random_state=0)\n\n#model pipeline\nmodel_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])\n\nmodel_pipeline.fit(x_train, y_train)\n\npredictions = model_pipeline.predict(x_val)\n\nmae = mean_absolute_error(y_val, predictions)\nprint(mae)","e7ec50f2":"from sklearn.metrics import accuracy_score, recall_score, precision_score, confusion_matrix, roc_curve, roc_auc_score\n\nprint('Accuracy = ',accuracy_score(y_val, predictions))\nprint('Recall = ',recall_score(y_val, predictions))\nprint('Precision = ',precision_score(y_val, predictions))\n\ncm=confusion_matrix(y_val, predictions)\n\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=(13,5))\n\nfpr, tpr, _ = roc_curve(y_val, predictions)\nauc = roc_auc_score(y_val ,predictions)\nax1.plot([0,1],[0,1],linestyle='--')\nax1.plot(fpr,tpr,label=\"auc = %.5f\"% auc)\nax1.legend(loc=4)\n\nsns.heatmap(cm,annot=True,cmap='Blues',fmt='g')","73967025":"#final running\n\n#test data\ntest_data = pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\n\n#fitting on whole train data\nmodel_pipeline.fit(x, y)\n\n#generating predictions\ntest_predictions = model_pipeline.predict(test_data[imp_columns])","e0d0534c":"#submission\n#output = pd.DataFrame({'ID': test_data.id, 'Response': test_predictions})\n#output.to_csv('submission.csv', index=False)\nprint(\"Submission saved\")","00c5429d":"> # Model","8027538c":"# Data Exploration"}}