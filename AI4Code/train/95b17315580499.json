{"cell_type":{"69f366ca":"code","8fc259ee":"code","00c2a028":"code","5cd837e4":"code","f3747e1c":"code","0e143399":"code","792b49ef":"code","d935cbd6":"code","7f934180":"code","6df8ce86":"code","099e56b7":"code","b244100a":"code","6acbc58c":"code","fb49bbd5":"code","91fac9f5":"code","16c25966":"code","9c3d7f46":"code","ab685d8e":"code","d059e967":"code","768db237":"code","24bebfaf":"markdown","3e0ac3e7":"markdown","7210f2d8":"markdown","4ab37ea3":"markdown","a9f220c8":"markdown","ff7d6e84":"markdown","689565ad":"markdown","d171517a":"markdown","2f1e2023":"markdown"},"source":{"69f366ca":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler","8fc259ee":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsubm = pd.read_csv('..\/input\/sample_submission.csv')","00c2a028":"train.head()","5cd837e4":"X_train , X_test , y_train , y_test = train_test_split(train.iloc[: , 1:].values , train.iloc[:,0].values , test_size = 0.1) ","f3747e1c":"fig, ax = plt.subplots(2, 1, figsize=(12,6))\nax[0].plot(X_train[0])\nax[0].set_title('784x1 data')\nax[1].imshow(X_train[0].reshape(28,28), cmap='gray')\nax[1].set_title('28x28 data')","0e143399":"X_train = X_train.reshape(-1 , 28 , 28 , 1)\/255\nX_test = X_test.reshape(-1 , 28 , 28 , 1)\/255","792b49ef":"y_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","d935cbd6":"print(y_train[0])","7f934180":"model = Sequential()\nmodel.add(Conv2D(filters = 16 , kernel_size= (3,3) , activation= 'relu' , input_shape = (28 , 28 ,1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters= 16 , kernel_size= (3,3) , activation= 'relu' ))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","6df8ce86":"datagen = ImageDataGenerator(zoom_range = 0.1,\n                            height_shift_range = 0.1,\n                            width_shift_range = 0.1,\n                            rotation_range = 10)","099e56b7":"model.compile(loss='categorical_crossentropy', optimizer = Adam(lr=1e-4), metrics=[\"accuracy\"])","b244100a":"annealer = LearningRateScheduler(lambda x: 1e-3 * 0.9 ** x)","6acbc58c":"hist = model.fit_generator(datagen.flow(X_train , y_train , batch_size=16) ,\n                          steps_per_epoch = 500 ,\n                           epochs = 20,\n                           verbose =2,\n                           validation_data=(X_test[:400,:], y_test[:400,:]),\n                           callbacks=[annealer]\n                          )","fb49bbd5":"final_loss, final_acc = model.evaluate(X_test, y_test, verbose=0)\nprint('loss =' , final_loss , '\\naccuracy' , final_acc)","91fac9f5":"test = test.values\ntest = test.reshape(-1 , 28 , 28 ,1)\/255\npre = model.predict(test, batch_size=64)","16c25966":"pre = np.argmax(pre , axis = 1)","9c3d7f46":"pre","ab685d8e":"subm.head()","d059e967":"subm['Label'] = pre","768db237":"subm.to_csv('submit.csv' , index= False)","24bebfaf":"<h3>Inspect one sample<\/h3>","3e0ac3e7":"### OneHot encoding","7210f2d8":"<h3> Resize the flattened images into 28x28x1 pixels images and regularize it by dividing it with highest value ie 255<\/h3>","4ab37ea3":"### Creating Keras model ","a9f220c8":"### Data Augmentation to increate training size","ff7d6e84":"<h3>Split data into train and validation set<\/h3>","689565ad":"<h3>Import all the necessary packages<\/h3>","d171517a":"<h4>Submit<\/h4>","2f1e2023":"<h3>Load data<\/h3>"}}