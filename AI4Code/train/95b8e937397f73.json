{"cell_type":{"fbdbb9c3":"code","d9384c01":"code","9e07524d":"code","78c2b1c5":"code","88c75907":"code","3257ac8a":"code","578a8c41":"code","f5856660":"code","38a2580c":"code","6a328be0":"markdown","e33409f8":"markdown","1fed6a9c":"markdown"},"source":{"fbdbb9c3":"import pandas as pd\nimport numpy as np\n\nfrom datetime import datetime\nfrom os import listdir\nfrom os.path import isfile, join, splitext","d9384c01":"START_TIME = datetime(2017, 3, 4)\nTRADING_DAYS = 755# 253 # TODO: determine this automatically\nNUMBER_OF_PORTFOLIO_SECURITIES = 10\nINITAL_TICKER = 'FB'\nMAX_VOLATILITY_OF_SINGLE_SECURITY = 0.02\nRISK_FREE_RATE = 0.02\nRISK_FREE_RATE_DAILY = (1 + RISK_FREE_RATE) ** (1\/365) - 1\n\nBAN_LIST = [\"KRMD\", \"FRPT\", \"EC\", \"MFINL\", \"CABO\", \"CSGP\", \"NEE\", \"TRNS\"]","9e07524d":"%%time\n\npath = '\/kaggle\/input\/stock-market-dataset'\n\ndef read_data(path, start_time):\n    data = {}\n    files = [f for f in listdir(path) if isfile(join(path, f))]\n    for f in files:\n        ticker = pd.read_csv(join(path, f))\n        ticker['Date'] = pd.to_datetime(ticker['Date'])\n\n        symbol = splitext(f)[0]\n        data_for_period = ticker[ticker['Date'] > start_time][['Date', 'Adj Close']]\n        if data_for_period.shape[0] != TRADING_DAYS:\n            continue # entered the market after the start of analysis\n        \n        data[symbol] = data_for_period\n        data[symbol]['Return'] = data[symbol]['Adj Close'].pct_change()  # daily return\n        data[symbol] = data[symbol].dropna()\n\n    return data\n\netfs = read_data(join(path, 'etfs'), START_TIME)\nstocks = read_data(join(path, 'stocks'), START_TIME)\n\ntickers = {**etfs, **stocks}","78c2b1c5":"portfolio = {}\nportfolio[INITAL_TICKER] = tickers[INITAL_TICKER]['Return'].to_numpy()\nget_return = lambda portfolio: np.mean(np.array(list(portfolio.values())), axis=0)","88c75907":"def portfolio_stat(portfolio):\n    ret = portfolio.mean()\n    std = portfolio.std()\n    sharpe_ratio = (ret - RISK_FREE_RATE_DAILY) \/ std\n    \n    return ret, std, sharpe_ratio\n\ndef portfolio_stat_annual(portfolio):\n    ret = (portfolio.mean() + 1) ** 365 - 1\n    std = portfolio.std() * (250 ** 0.5)\n    sharpe_ratio = (ret - RISK_FREE_RATE) \/ std\n    \n    return ret, std, sharpe_ratio","3257ac8a":"ret, std, sharpe_ratio = portfolio_stat(tickers[INITAL_TICKER]['Return'])\nprint('1) Ticker = {}, Avg Return = {}, Std Deviation = {}, Sharpe Ratio = {}'.format(INITAL_TICKER, ret, std, sharpe_ratio))\n\nwhile len(portfolio) < NUMBER_OF_PORTFOLIO_SECURITIES:\n    possible_matches = []\n    for t in tickers:\n        if t in portfolio:\n            continue\n            \n        new_portfolio = {**portfolio, t: tickers[t]['Return']}\n        _, _, sharpe_ratio = portfolio_stat(get_return(new_portfolio))\n        possible_matches.append((t, sharpe_ratio))\n        \n    \n    for t, ratio in reversed(sorted(possible_matches, key=lambda item: item[1])):\n        if tickers[t]['Return'].std() > MAX_VOLATILITY_OF_SINGLE_SECURITY:\n            continue\n            \n        if t in BAN_LIST:\n            continue\n            \n        if t not in portfolio:\n            break\n    \n    \n    portfolio[t] = tickers[t]['Return']\n    ret, std, sharpe_ratio = portfolio_stat(get_return(portfolio))\n    print('{}) Ticker = {}, Avg Return = {}, Std Deviation = {}, Sharpe Ratio = {}'.format(len(portfolio), t, ret, std, sharpe_ratio))","578a8c41":"ret, std, sharpe_ratio = portfolio_stat_annual(get_return(portfolio))\nprint('Portfolio Stats: Avg Return = {}, Std Deviation = {}, Sharpe Ratio = {}'.format(ret, std, sharpe_ratio))","f5856660":"# ! pip install yfinance > \/dev\/null 2>&1","38a2580c":"# import yfinance as yf\n\n# get_or_default = lambda info, key: info[key] if key in info else \"\"\n    \n\n# for t in portfolio:\n#     info = yf.Ticker(t).info\n#     print('ticker: {}, sector: {}, market cap: {}'.format(t, get_or_default(info, 'sector'), get_or_default(info, 'marketCap')))","6a328be0":"## Portfolio Optimisation","e33409f8":"## Configs","1fed6a9c":"## Read Data"}}