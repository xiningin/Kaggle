{"cell_type":{"a8c2d919":"code","5f2ecca4":"code","531604aa":"code","d28564ab":"code","95b99aea":"code","cb0d0c75":"code","2873bf71":"code","d676079f":"code","b518d1e6":"code","70c87f2d":"code","65dc9360":"code","df78f801":"code","be5af86f":"markdown"},"source":{"a8c2d919":"# Importing the libraries\nimport os\nimport glob\nimport shutil\nimport json\nimport keras\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.applications import EfficientNetB4\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator\nimport albumentations\n\n# Defining the directories\nwork_dir = '..\/input\/cassava-leaf-disease-classification\/'\nos.listdir(work_dir) \ntrain_path = '\/kaggle\/input\/cassava-leaf-disease-classification\/train_images'","5f2ecca4":"# Dataframe for train.csv\ndata = pd.read_csv(work_dir + 'train.csv')","531604aa":"\nf = open(work_dir + 'label_num_to_disease_map.json')\nreal_labels = json.load(f)\nreal_labels = {int(k):v for k,v in real_labels.items()}\n\n# Defining the working dataset\ndata['class_name'] = data.label.map(real_labels)\n\ntrain,val = train_test_split(data, test_size = 0.1, random_state = 42, stratify = data['class_name'])\n\nIMG_SIZE = 380\nsize = (IMG_SIZE,IMG_SIZE)\nn_CLASS = 5\nBATCH_SIZE = 20\n\ndatagen_train = ImageDataGenerator(\n                    preprocessing_function = tf.keras.applications.efficientnet.preprocess_input,\n                    rotation_range = 40,\n                    width_shift_range = 0.2,\n                    height_shift_range = 0.2,\n                    shear_range = 0.2,\n                    zoom_range = 0.2,\n                    horizontal_flip = True,\n                    vertical_flip = True,\n                    fill_mode = 'nearest')\n\ndatagen_val = ImageDataGenerator(\n                    preprocessing_function = tf.keras.applications.efficientnet.preprocess_input,\n                    )\n\ntrain_data = datagen_train.flow_from_dataframe(train,\n                             directory = train_path,\n                             seed=42,\n                             x_col = 'image_id',\n                             y_col = 'class_name',\n                             target_size = size,\n                             #color_mode=\"rgb\",\n                             class_mode = 'categorical',\n                             interpolation = 'nearest',\n                             shuffle = True,\n                             batch_size = BATCH_SIZE)\n\nval_data = datagen_val.flow_from_dataframe(val,\n                             directory = train_path,\n                             seed=42,\n                             x_col = 'image_id',\n                             y_col = 'class_name',\n                             target_size = size,\n                             #color_mode=\"rgb\",\n                             class_mode = 'categorical',\n                             interpolation = 'nearest',\n                             shuffle = True,\n                             batch_size = BATCH_SIZE)\n","d28564ab":"def create_model():\n    \n    model = Sequential()    \n    model.add(EfficientNetB4(input_shape = (IMG_SIZE, IMG_SIZE, 3), include_top = False, \n                             weights = '..\/input\/tfkerasefficientnetimagenetnotop\/efficientnetb4_notop.h5', \n                             drop_connect_rate=0.4))\n    model.add(GlobalAveragePooling2D())\n    model.add(Flatten())\n    model.add(Dense(512, activation = 'relu', bias_regularizer=tf.keras.regularizers.L1L2(l1=0.01, l2=0.001)))\n    model.add(Dropout(0.5))\n    model.add(Dense(n_CLASS, activation = 'softmax'))\n    \n    return model\n\nleaf_model = create_model()\nleaf_model.summary()","95b99aea":"EPOCHS = 25\nSST = train_data.n\/\/train_data.batch_size\nSSV = val_data.n\/\/val_data.batch_size","cb0d0c75":"def model_fitter():\n        \n    leaf_model = create_model()\n        \n    loss = tf.keras.losses.CategoricalCrossentropy(from_logits = False, label_smoothing=0.0001,name='categorical_crossentropy' )\n    \n    leaf_model.compile(optimizer = Adam(learning_rate = 1e-3), loss = loss, metrics = ['categorical_accuracy'])\n    \n    es = EarlyStopping(monitor='val_loss', mode='min', patience=3, restore_best_weights=True, verbose=1)\n    \n    checkpoint_cb = ModelCheckpoint(\"Cassava_best_model.h5\", save_best_only=True, monitor = 'val_loss', mode='min')\n    \n    reduce_lr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.3, patience = 2, min_lr = 1e-6, mode = 'min', verbose = 1)\n    \n    history = leaf_model.fit(train_data, validation_data = val_data, epochs= EPOCHS, batch_size = BATCH_SIZE,\n                             steps_per_epoch = SST,\n                             validation_steps = SSV,\n                             callbacks=[es, checkpoint_cb, reduce_lr])\n    \n    leaf_model.save('Cassava_model'+'.h5')  \n    \n    return history\n","2873bf71":"results = model_fitter()","d676079f":"# EVALUATION METRIC\n\nprint('Training Accuracy: ', max(results.history['categorical_accuracy']))\nprint('Validation Accuracy: ', max(results.history['val_categorical_accuracy']))","b518d1e6":"import keras\n\nfinal_model = keras.models.load_model('Cassava_best_model.h5')","70c87f2d":"TEST_DIR = '..\/input\/cassava-leaf-disease-classification\/test_images\/'\ntest_images = os.listdir(TEST_DIR)\npredictions = []\n\nfor image in test_images:\n    img = Image.open(TEST_DIR + image)\n    img = img.resize(size)\n    img = np.expand_dims(img, axis=0)\n    predictions.extend(final_model.predict(img).argmax(axis = 1))","65dc9360":"predictions","df78f801":"sub = pd.DataFrame({'image_id': test_images, 'label': predictions})\ndisplay(sub)\nsub.to_csv('submission.csv', index = False)","be5af86f":"# EfficientNet Simple baseline implementation\n\nHello Readers,\n\nThis is very simple baseline implementation using EfficientNet and very good source for beginners to start with the competition.\nPlease good through the notebook and let me know your thoughts and feedbacks in the comment section.\n\nAlso, if you like the notebook do remember to upvote please :) !!"}}