{"cell_type":{"e42fcbe9":"code","c1716507":"code","6e1ad16d":"code","714f1166":"code","202d68cf":"code","f8d4ae61":"code","2177eb13":"code","4272a85f":"code","7bd7daf6":"code","396d86ff":"code","ef263a51":"code","4fd99c5a":"code","75191736":"code","33db5b5f":"code","b2800e79":"code","e3725dcb":"code","722090e9":"code","78cc65d1":"code","8718a3a3":"code","5b2221e4":"code","880fadf6":"code","8d410b48":"code","c469229c":"code","af1b9f09":"code","45574065":"code","2508af2b":"code","19f4fff9":"code","7afdac40":"code","87318cb0":"code","a684d382":"code","8d8dfeae":"code","6ed5ceca":"code","57ca334d":"code","0289f845":"code","f7fe8ba4":"code","fbac7775":"markdown","98f5ddbd":"markdown","596ec2cb":"markdown","671c4034":"markdown","2f9eafe4":"markdown","7a78c78a":"markdown","e3fddb1f":"markdown","f2351764":"markdown","2106401f":"markdown","feb552e1":"markdown","a8e16758":"markdown","9fd62561":"markdown","3f21da58":"markdown","4f93863c":"markdown","2a9245d4":"markdown","6dba8f1d":"markdown","466d9c1d":"markdown"},"source":{"e42fcbe9":"import pandas as pd\nimport matplotlib.pyplot as plt","c1716507":"df = pd.read_csv('..\/input\/iot-failure-prediction\/iot_sensor_dataset_before.csv')","6e1ad16d":"df.head()","714f1166":"df[df.isna().any(axis=1)]","202d68cf":"df = df.dropna()","f8d4ae61":"df[df.isna().any(axis=1)]","2177eb13":"df.describe()","4272a85f":"df.boxplot(column=['outpressure'],return_type='axes', figsize= (8,8), fontsize=15, boxprops=dict(linestyle='-', linewidth=1.5, color='b'), \n          flierprops=dict(linestyle='-', linewidth=1.5),\n          medianprops=dict(linestyle='-', linewidth=1.5, color='r'),\n          whiskerprops=dict(linestyle='-', linewidth=1.5),\n          capprops=dict(linestyle='-', linewidth=1.5, color='g'));","7bd7daf6":"df.info()","396d86ff":"df.head()","ef263a51":"df.fail.value_counts()","4fd99c5a":"df.footfall = df.footfall.replace(['na'], '0')\ndf.atemp = df.atemp.replace(['na'], '0')\ndf.selfLR = df.selfLR.replace(['na'], '0')\ndf.ClinLR = df.ClinLR.replace(['na'], '0')","75191736":"df['footfall'] = df['footfall'].astype(int)\ndf['atemp'] = df['atemp'].astype(int)\ndf['selfLR'] = df['selfLR'].astype(int)\ndf['ClinLR'] = df['ClinLR'].astype(int)\ndf['temp'] = df['temp'].astype(int)\n","33db5b5f":"df['fail'] = df['fail'].replace(['fail', 'pass'],['1', '0'])\ndf.fail = df.fail.replace(['na'], '0')","b2800e79":"df['fail'] = df['fail'].astype(int)","e3725dcb":"df.fail.values","722090e9":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    f = plt.figure(figsize=(19, 15))\n    plt.matshow(df.corr(), fignum=f.number)\n    plt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)\n    plt.yticks(range(df.shape[1]), df.columns, fontsize=14)\n    cb = plt.colorbar()\n    cb.ax.tick_params(labelsize=14)\n    plt.title('Correlation Matrix', fontsize=16);","78cc65d1":"plotCorrelationMatrix(df, 10)","8718a3a3":"df = df.drop('PID', 1)","5b2221e4":"df.head()","880fadf6":"#Converting fail to object.\ndf['fail'] = df['fail'].astype('str')","8d410b48":"df.head()","c469229c":"#Splitting data in to train and test.\n\nfrom sklearn.model_selection import train_test_split\n\nX = df.drop(labels = ['fail'], axis=1)\nY = df.fail\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25)","af1b9f09":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(X_train, y_train)\ny_pred = decisiontree.predict(X_test)\nacc_decisiontree = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_decisiontree)","45574065":"#Gaussian Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\ny_pred = gaussian.predict(X_test)\nacc_gaussian = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gaussian)","2508af2b":"#Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\ny_pred = gbk.predict(X_test)\nacc_gbk = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_gbk)","19f4fff9":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nacc_knn = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_knn)","7afdac40":"#Logistic Reggression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nacc_logreg = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_logreg)","87318cb0":"#Perceptron\nfrom sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\ny_pred = perceptron.predict(X_test)\nacc_perceptron = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_perceptron)","a684d382":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(X_train, y_train)\ny_pred = randomforest.predict(X_test)\nacc_randomforest = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_randomforest)","8d8dfeae":"#Stochastic Gradient Descent\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(X_train, y_train)\ny_pred = sgd.predict(X_test)\nacc_sgd = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_sgd)","6ed5ceca":"#Support Vector Machines\nfrom sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nacc_svc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_svc)","57ca334d":"#Linear SVC\nfrom sklearn.svm import LinearSVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\ny_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(accuracy_score(y_pred, y_test) * 100, 2)\nprint(acc_linear_svc)","0289f845":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest', 'Naive Bayes', 'Perceptron', 'Linear SVC', 'SVC',  \n              'Decision Tree', 'Stochastic Gradient Descent', 'Gradient Boosting Classifier'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_gaussian, acc_perceptron, acc_linear_svc, acc_svc, acc_decisiontree,\n              acc_sgd, acc_gbk]})\nmodels.sort_values(by='Score', ascending=False)","f7fe8ba4":"import pickle\n# saving the model to disk\nfilename = 'iot_model.sav'\npickle.dump(logreg.fit(X_train, y_train), open(filename, 'wb'))","fbac7775":"We will begin importing some libraries.","98f5ddbd":"Let's analyze some statistics of the data.","596ec2cb":"Some columns have rows with 'na' values, in this version we will convert it to 0.","671c4034":"We will use the IOT sensor dataset and try some models to get the best results on predicting the value of the 'fail' column.","2f9eafe4":"The values of 'outpressure' is a little dispersed. We think that's this data is ok for a first version of this notebook.","7a78c78a":"# ***Predicting device fail using IOT data and machine learning***","e3fddb1f":"Let's see how is the correlation between the variables.","f2351764":"We will convert the columns 'footfall', 'atemp', 'selfLR', 'ClinLR' and 'temp' to integer type.","2106401f":"The 'fail' column has two null values, we will drop it.","feb552e1":"Here we will replace fail and pass from 'fail' column to 1 and 0.","a8e16758":"Now, we will look for null values.","9fd62561":"We will create a dataframe with the results and analyze with one has better accuracy and then save it with pickle library, to use the model in the future.","3f21da58":"**Training the models**","4f93863c":"![image.png](attachment:image.png)","2a9245d4":"The standard deviation of 'outpressure' column is significant.","6dba8f1d":"We will drop PID columns as it shouldn't alter the results.","466d9c1d":"And next we will store the data on a dataframe using pandas."}}