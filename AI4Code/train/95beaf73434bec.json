{"cell_type":{"8d4007e1":"code","9e5366f6":"code","93690a45":"code","42761146":"code","91435e50":"code","cc3c09a5":"code","da23af6e":"code","0cd8d85b":"code","3c8e0064":"code","082e03f9":"code","8d51727f":"code","094ec3f7":"code","33cacc95":"code","3cab91af":"code","2faff466":"code","c5f00b9f":"code","bb7137f5":"code","5f2bdfc7":"code","f03dfccf":"code","86bfb149":"code","966bc2e3":"code","1d8cbbeb":"code","b2729105":"code","fefc7f98":"code","4f5f157b":"code","3038f34c":"code","091b6262":"code","320316c6":"code","3d6fe19f":"code","c31d15ad":"code","c893372b":"code","8b35514f":"code","4583ede2":"code","95cacdd8":"code","fcaf55a4":"code","aabb0f01":"code","9abc4936":"code","1aad2538":"code","2fcdfb49":"code","7b37754c":"code","d5b1f06f":"code","120f5a8c":"code","1d56e53d":"code","abb9ce2b":"code","fa3f59e5":"code","059191ea":"code","52ca33a3":"code","10111c24":"code","10a657fb":"code","163082f9":"code","a6ff6ca0":"code","c6d52053":"code","ac94e14d":"markdown","961b5994":"markdown","150fb9ba":"markdown","9f772340":"markdown","56eb0754":"markdown","25408940":"markdown","ffe73637":"markdown","d17bd8ca":"markdown","5ec11418":"markdown","dd40a69a":"markdown","2b0cc07e":"markdown","951593e5":"markdown","f3aff2ea":"markdown","3e9cb9b9":"markdown","e6172e16":"markdown","7ea733fa":"markdown","72000bb9":"markdown","d4b2cb08":"markdown","36ac6251":"markdown","db28ecdf":"markdown","8b0f8ead":"markdown","d13a5886":"markdown","193162dc":"markdown","37f45d4b":"markdown","a092b69d":"markdown","5d730490":"markdown","7749ca0b":"markdown","7f67318d":"markdown","0edc4b22":"markdown","bed3059a":"markdown","d49dafd3":"markdown","e8cf5d75":"markdown","06bbcf49":"markdown","63a1e0fb":"markdown","299f64c6":"markdown","9590cdae":"markdown","c8a15ff2":"markdown","4810041d":"markdown","378988f2":"markdown","750dd704":"markdown","1599b95e":"markdown","d424e48e":"markdown","8e56192e":"markdown","b437fc50":"markdown","30f66d04":"markdown"},"source":{"8d4007e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e5366f6":"df = pd.read_csv(\"..\/input\/drug-classification\/drug200.csv\")","93690a45":"df.head()","42761146":"df.describe()","91435e50":"df.isnull().sum()","cc3c09a5":"df.info()","da23af6e":"print(\"Max Age:\", df.Age.max())\nprint(\"Min Age:\", df.Age.min())","0cd8d85b":"# Age distribution\nplt.figure(figsize = (9,5))\nsns.distplot(df.Age)\nplt.show()","3c8e0064":"df.Sex.value_counts()","082e03f9":"#Sex Distribtuion\nplt.figure(figsize=(9,5))\nsns.countplot(x=df.Sex)\nplt.show()","8d51727f":"df.BP.value_counts()","094ec3f7":"plt.figure(figsize = (9,5))\nsns.countplot(df.BP)\nplt.show()","33cacc95":"df.Cholesterol.value_counts()","3cab91af":"plt.figure(figsize=(9,5))\nsns.countplot(df.Cholesterol)\nplt.show()","2faff466":"print(\"Max Na_to_K:\",df.Na_to_K.max())\nprint(\"Min Na_to_K:\",df.Na_to_K.min())\nprint(\"Mean Na_to_K:\",df.Na_to_K.mean())","c5f00b9f":"plt.figure(figsize=(9,5))\nsns.distplot(df.Na_to_K)\nplt.show()","bb7137f5":"df.Drug.value_counts()","5f2bdfc7":"plt.figure(figsize=(9,5))\nsns.countplot(df.Drug)\nplt.show()","f03dfccf":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Age\", data = df)\nplt.legend(df.Drug.value_counts().index)\nplt.title(\"Age -- Drug\")\nplt.show()","86bfb149":"print(\"Minimum Age of DrugB\", df.Age[df.Drug == \"drugB\"].min())\nprint(\"Maximum Age of DrugA\", df.Age[df.Drug == \"drugA\"].max())","966bc2e3":"df_Sex_Drug = df.groupby([\"Drug\", \"Sex\"]).size().reset_index(name = \"Count\")\ndf_Sex_Drug","1d8cbbeb":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"Sex\", data = df_Sex_Drug)\nplt.title(\"Sex -- Drug\")\nplt.show()","b2729105":"df_BP_Drug = df.groupby([\"Drug\",\"BP\"]).size().reset_index(name = \"Count\")\ndf_BP_Drug","fefc7f98":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\", y =\"Count\", hue = \"BP\", data = df_BP_Drug)\nplt.title(\"BP -- Drug\")\nplt.show()","4f5f157b":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Na_to_K\", data = df)\nplt.legend(df.Drug.value_counts().index)\nplt.title(\"Na_to_K -- Drug\")\nplt.show()","3038f34c":"print(\"Minimum Na_to_K for DrugY:\", df.Na_to_K[df.Drug == \"DrugY\"].min())","091b6262":"df_CH_Drug = df.groupby([\"Drug\",\"Cholesterol\"]).size().reset_index(name = \"Count\")\ndf_CH_Drug","320316c6":"plt.figure(figsize = (9,5))\nsns.barplot(x=\"Drug\",y=\"Count\",hue=\"Cholesterol\",data=df_CH_Drug)\nplt.title(\"Cholesterol -- Drug\")\nplt.show()","3d6fe19f":"plt.figure(figsize = (9,5))\nsns.swarmplot(x = \"Drug\", y = \"Na_to_K\", hue=\"BP\",data=df)\nplt.legend()\nplt.title(\"Na_to_K -- BP -- Drug\")\nplt.show()","c31d15ad":"df[\"Na_to_K_Bigger_Than_15\"] = [1 if i >= 15.015 else 0 for i in df.Na_to_K]\ndf.head()","c893372b":"df_NaK15 = df.groupby([\"Drug\",\"Na_to_K_Bigger_Than_15\"]).size().reset_index(name = \"Count\")\ndf_NaK15","8b35514f":"plt.figure(figsize = (9,5))\nsns.barplot(x = \"Drug\",y=\"Count\", hue = \"Na_to_K_Bigger_Than_15\",data = df_NaK15)\nplt.title(\"Na_to_K_Bigger_Than_15 -- Drug\")\nplt.show()","4583ede2":"from sklearn.preprocessing import LabelEncoder\ndef label_encoder(y):\n    le = LabelEncoder()\n    df[y] = le.fit_transform(df[y])","95cacdd8":"label_list = [\"Sex\",\"BP\",\"Cholesterol\",\"Na_to_K\",\"Na_to_K_Bigger_Than_15\",\"Drug\"]\n\nfor l in label_list:\n    label_encoder(l)","fcaf55a4":"df.head()","aabb0f01":"from sklearn.model_selection import train_test_split\n\nx = df.drop([\"Drug\"], axis =1 )\ny = df.Drug\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42, shuffle = True)\n\ny_train = y_train.values.reshape(-1,1)\ny_test = y_test.values.reshape(-1,1)\n\nprint(\"x_train shape:\",x_train.shape)\nprint(\"x_test shape:\",x_test.shape)\nprint(\"y_train shape:\",y_train.shape)\nprint(\"y_test shape:\",y_test.shape)","9abc4936":"# To store results of models\nresult_dict_train = {}\nresult_dict_test = {}","1aad2538":"from sklearn.neighbors import KNeighborsClassifier \n\nknn = KNeighborsClassifier()\naccuracies = cross_val_score(knn, x_train, y_train, cv = 5)\nknn.fit(x_train,y_train)\n\nprint(\"Train Score:\", np.mean(accuracies))\nprint(\"Test Score:\", knn.score(x_test,y_test))","2fcdfb49":"result_dict_train[\"KNN Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"KNN Default Test Score\"] = knn.score(x_test,y_test)","7b37754c":"grid = {'n_neighbors':np.arange(1,120),\n        'p':np.arange(1,3),\n        'weights':['uniform','distance']\n       }\n\nknn = KNeighborsClassifier(algorithm = \"auto\")\nknn_cv = GridSearchCV(knn,grid,cv=5)\nknn_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",knn_cv.best_params_)\nprint(\"Train Score:\",knn_cv.best_score_)\nprint(\"Test Score:\",knn_cv.score(x_test,y_test))","d5b1f06f":"result_dict_train[\"KNN GridSearch Train Score\"] = knn_cv.best_score_\nresult_dict_test[\"KNN GridSearch Test Score\"] = knn_cv.score(x_test,y_test)","120f5a8c":"from sklearn.ensemble import RandomForestClassifier \n\nrfc = RandomForestClassifier(random_state = 42)\naccuracies = cross_val_score(rfc, x_train, y_train, cv=5)\nrfc.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\", rfc.score(x_test,y_test))","1d56e53d":"result_dict_train[\"Random Forest Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"Random Forest Default Test Score\"] = rfc.score(x_test,y_test)","abb9ce2b":"grid = {'n_estimators':np.arange(100,1000,100),\n        'criterion':['gini','entropy']\n       }\n\nrf = RandomForestClassifier(random_state = 42)\nrf_cv = GridSearchCV(rf,grid,cv=5)\nrf_cv.fit(x_train,y_train)\n\nprint(\"Hyperparameters:\",rf_cv.best_params_)\nprint(\"Train Score:\",rf_cv.best_score_)\nprint(\"Test Score:\",rf_cv.score(x_test,y_test))","fa3f59e5":"result_dict_train[\"Random Forest GridSearch Train Score\"] = rf_cv.best_score_\nresult_dict_test[\"Random Forest GridSearch Test Score\"] = rf_cv.score(x_test,y_test)","059191ea":"from sklearn.svm import SVC\nsvc = SVC(random_state = 42)\naccuracies = cross_val_score(svc, x_train, y_train, cv=5)\nsvc.fit(x_train,y_train)\n\nprint(\"Train Score:\",np.mean(accuracies))\nprint(\"Test Score:\",svc.score(x_test,y_test))","52ca33a3":"result_dict_train[\"SVM Default Train Score\"] = np.mean(accuracies)\nresult_dict_test[\"SVM Default Test Score\"] = svc.score(x_test,y_test)","10111c24":"grid = {\n    'C':[0.01,0.1,1,10],\n    'kernel' : [\"linear\",\"poly\",\"rbf\",\"sigmoid\"],\n    'degree' : [1,3,5,7],\n    'gamma' : [0.01,1]\n}\n\nsvm  = SVC ();\nsvm_cv = GridSearchCV(svm, grid, cv = 5)\nsvm_cv.fit(x_train,y_train)\nprint(\"Best Parameters:\",svm_cv.best_params_)\nprint(\"Train Score:\",svm_cv.best_score_)\nprint(\"Test Score:\",svm_cv.score(x_test,y_test))","10a657fb":"result_dict_train[\"SVM GridSearch Train Score\"] = svm_cv.best_score_\nresult_dict_test[\"SVM GridSearch Test Score\"] = svm_cv.score(x_test,y_test)","163082f9":"df_result_train = pd.DataFrame.from_dict(result_dict_train,orient = \"index\",columns=[\"Score\"])\ndf_result_train","a6ff6ca0":"df_result_test = pd.DataFrame.from_dict(result_dict_test,orient = \"index\",columns=[\"Score\"])\ndf_result_test","c6d52053":"fig,ax = plt.subplots(1,2,figsize=(20,5))\nsns.barplot(x = df_result_train.index,y = df_result_train.Score,ax = ax[0])\nsns.barplot(x = df_result_test.index,y = df_result_test.Score,ax = ax[1])\nax[0].set_xticklabels(df_result_train.index,rotation = 75)\nax[1].set_xticklabels(df_result_test.index,rotation = 75)\nplt.show()","ac94e14d":"# Drug Variable","961b5994":"# Preparing Data and Feature Engineering ","150fb9ba":"Data was splitted as 80% train data and 20% test data.\n\n\n","9f772340":"# Age -- Drug","56eb0754":"# Na_to_K -- BP -- Drug ","25408940":"# GridSearchCV","ffe73637":"* float64(1): Na_to_K\n* int64(1): Age\n* object(4): Sex, BP, Cholesterol, Drug","d17bd8ca":"* Drug is target column and you can see that it is unbalanced dataset. Using K Fold cross-validation would be better for reliable results.","5ec11418":"# Cholesterol -- Drug","dd40a69a":"* Random Forest classifier and SVM classifier (after hyperparameter tuning) have a good scores.\n* KNN classifier has worst score in three clasifiers.","2b0cc07e":"# BP Variable\n","951593e5":"* drugA and drugB are got only by people who have HIGH blood pressure.\n* drugC is got by people who have LOW blood pressure.\n* drugA is got by people who have HIGH blood pressure.\n* BP is an important feature for classification.","f3aff2ea":"# Age Variable\n","3e9cb9b9":"* If people have HIGH blood pressure and Na_to_K ratio is lower than 15 , they get drugA and drugB only.\n* If people have LOW blood pressure and Na_to_K ratio is lower than 15 , they get drugC only.","e6172e16":"# Model Implementation\nI will try three models and compare their results. For all models, I apply GridSearchCV method to find best score. Also, to be sure our models performance are random, I will use 5 Fold Cross Validation method.","7ea733fa":"* The ratio of gender seems balanced in the data\n* This is a categorical variable. It would be better if we apply label encoder to avoid any error during model implementation.","72000bb9":"# GridSearchCV","d4b2cb08":"# Cholesterol Variable\n","36ac6251":"* People who have Na_to_K ratio is bigger than 15, get DrugY.\n* We can create a new feature from here.","db28ecdf":"# KNN Classifier \nTo find best score of KNN model, I will try different value of n_neighbors, p, and weights parameters.","8b0f8ead":"# Basic Data Analysis\n* Age -- Drug\n* Sex -- Drug\n* BP -- Drug\n* Na_to_K -- Drug\n* Cholesterol -- Drug\n* Na_to_K -- BP -- Drug","d13a5886":"# Label Encoding\nWe will convert from object to int64\n* Sex\n* BP\n* Cholesterol\n* Na_to_K\n* Na_to_K_Bigger_Than_15","193162dc":"# Random Forest\nTo find best score of Random Forest model, I will try different value of n_estimators and criterion parameters\n\n# Default Parameters","37f45d4b":"* Cholesterol is a balanced data.\n* It is categorical and label encoder will apply on it.","a092b69d":"* DrugB is taken only by older than 51 years old.\n* DrugA is taken only by younger than 50 years old.","5d730490":"# Conclusion","7749ca0b":"# Sex Variable\n","7f67318d":"* Na_to_K_Bigger_Than_15 : \n\n->If Na_to_K is bigger than 15, it is always drugY","0edc4b22":"* drugC is got by people who have HIGH cholesterol\n* Cholesterol is an important feature to classify drugC","bed3059a":"# Na_to_K -- Drug","d49dafd3":"# Na-To_K Variable","e8cf5d75":" # Default Parameters ","06bbcf49":"# Train Test Split","63a1e0fb":"# Sex -- Drug","299f64c6":"# Variable Description\n* Age: Age of patient\n* Sex: Gender of patient\n* BP: Blood pressure of patient\n* Cholesterol: Cholesterol of patient\n* Na_to_K: Sodium to Potassium Ratio in Blood\n* Drug: Drug Type","9590cdae":"# GridSearchCV","c8a15ff2":"# SVM Classifier\nTo find best score of SVM model, I will try different value of C, kernel, degree and gamma parameters. The easy way to do this is GridSearchCV method.\n\n# Default Parameters ","4810041d":"# Univariate Variable Analysis","378988f2":"# Read Data and PreCheck\n","750dd704":"* Male people get drugA, drugB and drugC more than male people.\n* Female people get DrugY more than female people.\n* drugX seems equal for male and female people.\n* According to this graph, Sex feature is not an important feature for classification.","1599b95e":"# BP -- Drug","d424e48e":"* No missing value\n* 6 columns\n* 200 rows","8e56192e":"# Create New Features","b437fc50":"* Age range is between 15 and 74.","30f66d04":"* Na_to_K_Bigger_Than_15 feature will be important feature to drugY classification.\n"}}