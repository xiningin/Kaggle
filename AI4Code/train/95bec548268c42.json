{"cell_type":{"3e6c486f":"code","1093266b":"code","ac51294b":"code","f9d957ad":"code","25e52c3d":"code","e6b9227e":"markdown","0a236feb":"markdown","4b09c50a":"markdown","eaa13160":"markdown","43a8fe9e":"markdown"},"source":{"3e6c486f":"import numpy as np\nimport pandas as pd\nimport cudf as cu\nfrom tqdm import tqdm\nfrom random import choices\nimport gc\n\nfrom tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport tensorflow_addons as tfa","1093266b":"data_cudf = cu.read_csv('\/kaggle\/input\/jane-street-market-prediction\/train.csv') # cudf is sensitivee about type and use at and iat instead of loc and iloc\ntrain = data_cudf.to_pandas()\ndel data_cudf\n\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train[train['weight'] != 0]","ac51294b":"# train.fillna(train.mean(),inplace=True)\n# The mean of the whole data set \n# drop feature_0 https:\/\/www.kaggle.com\/nanomathias\/feature-0-beyond-feature-0\n#f_mean = np.mean(train[features[1:]].values,axis=0)\n\n#features_mean = []\nfeatures = [c for c in train.columns if 'feature' in c]\nfor i in features:\n    x = train[i].mean()  \n    #features_mean.append(x)\n    train[i] = train[i].fillna(x)\n\n\ntrain['action'] = ((train['resp'].values) > 0).astype(int)\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\n\n\nX_train = train.loc[:, train.columns.str.contains('feature')]\n#y_train = (train.loc[:, 'action'])\n\n# resp_1 > 0 resp_2 > 0 ...\ny_train = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T","f9d957ad":"# from the comments https:\/\/www.kaggle.com\/tarlannazarov\/own-jane-street-with-keras-nn\n# 1111 gives the best result\n#  I tried other seed, and got high score that is more than 8000. \n# I have tried a couple of random seeds and the worst only gives 5000 score. \nSEED = 1111\nnp.random.seed(SEED)\n\n#  initial parameters from Keras Tuner bayesian optimization\n\n# fit\ndef create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates[0])(x)\n    for i in range(len(hidden_units)):\n        x = tf.keras.layers.Dense(hidden_units[i])(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates[i + 1])(x)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tfa.optimizers.RectifiedAdam(learning_rate=learning_rate), # RectifiedAdam Optimizer (known to be robust to the choice in learning rate)\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    ) \n\n    return model\n\nepochs = 200\nbatch_size = 4096\nhidden_units = [160, 160, 160]\ndropout_rates = [0.2, 0.2, 0.2, 0.2]\nlabel_smoothing = 1e-2\n#Label Smoothing is a regularization technique that introduces noise for the labels. \n#This accounts for the fact that datasets may have mistakes in them, so maximizing the likelihood of directly can be harmful.\n#Assume for a small constant e, the training set label y is correct with probability 1 - e and incorrect otherwise. \n#Label Smoothing regularizes a model based on a softmax with k output values by replacing the hard 0 and 1 classification targets \n#with e\/k-1 targets of and 1 - e respectively.\nlearning_rate = 1e-2\n#normally the model training with a batch size of 4096 and learning rate 1e-3 starts to overfit \n#on the train set after only 10 epochs. \n\ntf.keras.backend.clear_session()\ntf.random.set_seed(SEED)\n\nclf = create_mlp(len(features), 5, hidden_units, dropout_rates, label_smoothing, learning_rate)\nclf.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2)\n\n#save model\nclf.save(f'model_v12.h5')","25e52c3d":"th = 0.503 # https:\/\/www.kaggle.com\/gkoundry\/the-most-important-model-parameter\n# This parameter controls the ratio of ones and zeros in the prediction. If the market is going up, then you will want to predict more ones than zeros.\n# However it's a little more complicated than this as you need to take the weights into consideration and not just the direction of the whole market:$\n# In the training data the overall market is going up, but the weighted returns are trending downwards so you would want to predict fewer ones for this time period.\n# => It's the threshold, and yes it's an intuitive experience. The model predicts probabilities of resp between 0 and 1, \n# compares its median to the th, and then assigns 0 or 1. \n\nf_mean = np.mean(train[features[1:]].values,axis=0)\n\nimport janestreet\nenv = janestreet.make_env()\n\nfor (test_df, pred_df) in tqdm(env.iter_test()): \n    if test_df['weight'].item() > 0:\n        \n        x_tt = test_df.loc[:, features].values\n        #if np.isnan(x_tt[:, 1:].sum()):\n            # np.nan_to_num : Replace NaN with zero and infinity with large finite numbers\n            # np.isnan : return a boolean list\n            \n        x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n            \n        pred = np.median(clf(x_tt))\n        pred_df.action = np.where(pred >= th, 1, 0).astype(int)\n        \n    else:\n        pred_df.action = 0\n        \n    env.predict(pred_df)","e6b9227e":"Score of the version 1 : 10609.091 (slightly better than the original 10606.782)\n\n.................... 2 : 7340.576\n\n.................... 3 : 7521.166\n\n.................... 6 : 6567.191\n\n.................... 7 : 5456.946\n\n.................... 10: 7897.153 \n\n.................... 11: 8621.288\n\n## Kudos: \ud83d\udd25\ud83d\udd25\ud83d\udd25\n\n[jane street with keras nn overfit](https:\/\/www.kaggle.com\/code1110\/jane-street-with-keras-nn-overfit\/)\n\n[OWN Jane Street with Keras NN](https:\/\/www.kaggle.com\/tarlannazarov\/own-jane-street-with-keras-nn)\n\n\n\nThis notebook overfits after almost 10 epochs, but it's good to make some experimentation.\n\nYou can add a validation set, experiment with things like Purged Time Series...\n\n\n## If you change the following your score will changes a lot in some case:\n\n1\/ Seed : I changed from 1111 to 73 and 1112, and the score changes, so having a good seed guess will work for your advantage.\n\n2\/ th : it's the threshold, parameter, and the best is 0.503 (the detail are below).\n\n3\/ optimizers : Comparing the two notebook mentionned above, RectifiedAdam really gives better results.\n\n4\/ epochs : starts over fitting around 15 epochs, so a higher epoch number will give you a better score on the public dataset, but probably won't generilize well. If you want to use a high number of epochs, and a lot of parameters you should have a validation dataset to watch out for overfitting.\n\n5\/ hidden_units : I have increased the hidden units number, but the score went down.\n\n6\/ date :  date > 85 because the data changes after around 4 months, and here we can make two models, one for the first 4 months, and another one for the rest, after that we stack them together.\n\n7\/ feature_0 :  1 for buy and -1 for sell (Bid\/Ask), and weight for trading volume.  \n=> Buy less, Sell more, so you increase the treshold for buy orders to 0.503 while for sell order reduce the threshold to 0.498, and we can drop this feature before training the model, and change it with other instructions in the prediction phase.\n\n### P.S.\nThose were a couple of my observations, and some of the comments that I have found usefull in the comment section on the above mentionned notebooks.\n\nPlease feel free to comment, and if You feel there is an added value of this NoteBook, consider to vote it up =)","0a236feb":"# Libs","4b09c50a":"# Model","eaa13160":"# Data Import and Processing","43a8fe9e":"# Prediction"}}