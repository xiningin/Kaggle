{"cell_type":{"6d67d727":"code","afe5ed53":"code","48a443fa":"code","a8b9ad98":"code","1c14955c":"code","478674d2":"code","71b97346":"code","38e33c80":"code","1d34e925":"code","76460f9b":"code","7cc0d928":"code","bd5a5357":"code","5192c3a4":"code","a055897b":"code","4ba891b5":"code","53313a48":"code","4cfd39af":"markdown","35206912":"markdown","0c49b528":"markdown","1ece5a91":"markdown","85869bd5":"markdown","f1427d0d":"markdown","a218512f":"markdown","c7d5a3cb":"markdown","789c2a42":"markdown","c2bec345":"markdown","b18a98e9":"markdown","28f080ac":"markdown","031826e4":"markdown","677edaae":"markdown","2c9bffff":"markdown","743df203":"markdown","280783ee":"markdown"},"source":{"6d67d727":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","afe5ed53":"#python won't show a long unnecessary error message that comes up a lot\npd.options.mode.chained_assignment = None","48a443fa":"hitters=pd.read_csv('\/kaggle\/input\/hitters\/hitters_filtered').drop(columns='Unnamed: 0')\nhitters.head(10)","a8b9ad98":"names=pd.read_csv('\/kaggle\/input\/the-history-of-baseball\/player.csv')\nnames['name']=names['name_first']+' '+names['name_last']\nnames=names[['player_id','name']]\nnames=names[names['player_id'].isin(hitters['player_id'].tolist())]\nhitters=hitters.join(names.set_index('player_id'),on='player_id')\nhitters.head(10)","1c14955c":"hitters2=hitters[-hitters['percent'].isnull()].reset_index().drop(columns='index')","478674d2":"y=hitters2['percent']\nfeatures=['g','ab','r','h','rbi','bb','hr']\nX=hitters2[features]","71b97346":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\nbasic_model = DecisionTreeRegressor(random_state=1)\nbasic_model.fit(train_X, train_y)\npredictions=basic_model.predict(val_X)","38e33c80":"df=pd.DataFrame(val_X)\ndf=df.join(hitters2[['player_id','name','inducted','percent','threshold','year']])\ndf['prediction']=predictions\n\ndf['guess']=''\nfor index in df.reset_index()['index']:\n    if df['prediction'][index]>=df['threshold'][index]:\n        df['guess'][index]='Y'\n    else:\n        df['guess'][index]='N'\ndf['correct?']=df['guess']==df['inducted']\n\n#change the order of the columns\ndf=df[['name','player_id','g','ab','r','h','hr','rbi','bb','percent','threshold','year','inducted','prediction','guess',\n      'correct?']]","1d34e925":"df['correct?'].value_counts()","76460f9b":"pd.set_option('display.max_rows', None)\nhof=df[df['inducted']=='Y']\nhof","7cc0d928":"hof['correct?'].value_counts()","bd5a5357":"import matplotlib.pyplot as plt","5192c3a4":"s30=range(1930,1940)\ns40=range(1940,1950)\ns50=range(1950,1960)\ns60=range(1960,1970)\ns70=range(1970,1980)\ns80=range(1980,1990)\ns90=range(1990,2000)\ns2000 = range(2000,2016)\n\ndecades=[s30,s40,s50,s60,s70,s80,s90,s2000]\n\nfig, axes = plt.subplots(nrows=4, ncols=2,figsize=(40, 20))\nfig.subplots_adjust(hspace=1)\nplt.suptitle('MLB HOF Voting results and predictions \\n green: incorrect- should be HOF \\n blue: incorrect- should not be HOF',fontsize=30)\nfor decade,ax in zip(decades,axes.flatten()):\n    frame=df[df['year'].isin(decade)]\n    \n    ax.plot(frame['name'],frame['percent'],'o',color='red',label = 'Actual Values')\n\n    ax.plot(frame['name'],frame['prediction'],'X',color='yellow',label = 'Predicted Values')\n  \n    incorrect=frame[frame['correct?'].isin([False])]\n    circle_rad = 10 \n    \n    overshoot=incorrect[incorrect['prediction']>incorrect['percent']]\n    ax.plot(overshoot['name'], overshoot['percent'], 'o',ms=circle_rad * 2, mec='b', mfc='none', mew=2)\n    ax.plot(overshoot['name'], overshoot['prediction'], 'o',ms=circle_rad * 2, mec='b', mfc='none', mew=2)\n    \n    undershoot=incorrect[incorrect['percent']>incorrect['prediction']]\n    ax.plot(undershoot['name'], undershoot['percent'], 'o',ms=circle_rad * 2, mec='g', mfc='none', mew=2)\n    ax.plot(undershoot['name'], undershoot['prediction'], 'o',ms=circle_rad * 2, mec='g', mfc='none', mew=2)\n    \n    ax.set_xlabel('Player')\n    ax.set_ylabel('Percent of HOF Votes')\n    ax.set_title(str(decade[0])+'-'+str(decade[-1]))\n    ax.legend(loc = 'upper right')\n    ax.set_xticklabels(labels=frame['name'],rotation=90)","a055897b":"incorrect=df[df['correct?'].isin([False])]\nincorrect","4ba891b5":"overshoot=incorrect[incorrect['prediction']>incorrect['percent']]\nlen(overshoot)","53313a48":"undershoot=incorrect[incorrect['percent']>incorrect['prediction']]\nlen(undershoot)","4cfd39af":"# Evaluate model","35206912":"12 of the incorrect predictions were the result of too low of a prediction (like a false negative).","0c49b528":"Some of the entries in the 'percent' column are empty. We have to fill these with something or cut them out in order to carry on with the 'percent' column in our machine learning algorithm.","1ece5a91":"22 of the incorrect predictions were the result of too high of a prediction (like a false positive).","85869bd5":"Takeaways:\n\n-87.2% accuracy seems pretty good for a start, but looking closer at the data we realize that there are many flaws in the model.\n-Only 18 out of the 30 hall of famers in the testing data were actually predicted to make the hall of fame\n-22 players that are not hall of famers were predicted to be\n\nThis means that most of the players our model predicted to be in the hall of fame are not, thus 87.2% accuracy is certainly not a fair way to summarize the data.","f1427d0d":"# Visualize the data, predictions","a218512f":"# Future work","c7d5a3cb":"Make new dataframe with all testing data, add predictions, whether each prediction would warrant a hall of fame induction, and if the prediction was correct.","789c2a42":"231\/265 predictions correct, or 87.2%.","c2bec345":"There are so many ways to improve this model. Some ideas include:\n\n\n1. Including player awards such as MVP, silver slugger, and many other baseball awards\n2. Include advanced stats such as slugging percentage and on base percentage\n3. Include postseason stats and other stats that weren't included in this model.\n4. Changing the paramaters to fine tune the model- I have some other machine learning notebooks that show how to do this\n5. Try a different type of model, ex. random forest regressor\n6. Instead of predicting percent of the vote, try making it a bunary classification problem. That is, rather than predict a numerical value and determine if that warrants a HOF induction, simply predict whether or not a player will get inducted into the HOF.\n7. The data used for this project is dated. Data through 2020 will help create a better model. It may be hard to find that data, however, and the data for this project was already avaialable on kaggle which made it easier to use\n\nThere are more ways to help improve the model as these are just what come to mind. The other notebooks show how I combined data from different datasets to create the data for this model, and how I decided which features to put in the model.","b18a98e9":"# Import and prepare data for model","28f080ac":"# Interpreting the visuals","031826e4":"Add full player name, rather than just having pleyer ID.","677edaae":"Let's take a closer look at the actual hall of famers in the testing data.","2c9bffff":"# Create decision tree regressor model","743df203":"These visuals help visualize what the model did well and what it didn't. What stands out are the number of blue circles- this being players that were predicted to make the HOF but didn't actually get voted in. Let's take a closer look at all of the incorrect predictions.","280783ee":"Only 18 out of the 30 hall of famers were predicted to be hall of famers by the model."}}