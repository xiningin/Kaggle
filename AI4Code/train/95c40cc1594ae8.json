{"cell_type":{"e5e3475b":"code","4fe05119":"code","edbefe2a":"code","8abfb8de":"code","0d8f319e":"code","36c569a8":"code","42809ba4":"code","b219b4b2":"code","94fa8c89":"code","7d28bc46":"code","1b8bd5e6":"code","5f6135b1":"code","d5eab345":"code","4064eb43":"code","732b5bdc":"code","bf872e19":"code","aa78c4d9":"code","b09cd09b":"code","73e9028e":"code","a77f604b":"code","90e8847f":"code","8fec6ae0":"code","e66e8894":"code","0c99eb36":"code","b2306132":"code","0c443347":"code","05cc3935":"code","ae278c0a":"code","b80f71a9":"code","a845c992":"code","369fd384":"code","9bcbd774":"code","619ba8aa":"code","bff92840":"code","772c076d":"code","4ad13b39":"code","c81a6697":"code","128886c2":"code","e0e0c7cc":"code","43f26854":"code","701c3e01":"code","96bcffd4":"code","8e29149c":"code","df1a6980":"code","8b94d26c":"code","4337dd6c":"code","f4e1476c":"code","111e0116":"code","b0e23788":"code","e31b662e":"code","3b265248":"code","88c165ad":"code","cb78c9cd":"code","9e27ea1c":"code","9e3a7621":"code","697a7596":"code","4aac35bb":"code","3844ee30":"code","f8946de9":"code","77ab50cb":"code","98f471cf":"code","a97c5adc":"code","74d5dad7":"code","fbbf2292":"code","b1023597":"code","ad8191ca":"code","64246132":"code","0839e3dc":"markdown","e5ced5e9":"markdown","f47e483e":"markdown","75514ef1":"markdown"},"source":{"e5e3475b":"# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Import the numpy and pandas packages\nimport numpy as np\nimport pandas as pd\nimport random\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","4fe05119":"# Changing the value in permalink to lower case\nloan = pd.read_csv('..\/input\/loan.csv')\nloan.head()","edbefe2a":"loan.info()","8abfb8de":"loan.describe()","0d8f319e":"#Inspecting the Null values\nloan.isnull().sum(axis=0)","36c569a8":"round(100*(loan.isnull().sum()\/len(loan.index)),2)","42809ba4":"filtered_loandata = loan.dropna(axis='columns', how='all')\nround(100*(filtered_loandata.isnull().sum()\/len(filtered_loandata.index)),2)","b219b4b2":"filtered_loandata = filtered_loandata.drop([\"next_pymnt_d\", \"mths_since_last_record\", \"mths_since_last_delinq\"], axis = 1 )","94fa8c89":"filtered_loandata.info()","7d28bc46":"filtered_loandata.policy_code.unique()","1b8bd5e6":"filtered_loandata.term.unique()","5f6135b1":"plt.figure(1)\nplt.subplot(321) # bar plot with the number of loans for each category of home ownership\nfiltered_loandata.home_ownership.value_counts().plot.bar(figsize=(20,15), title= 'Home Ownership')\n\nplt.subplot(322) # bar plot with the number of borrowers within each category of loan purpose\nfiltered_loandata.purpose.value_counts().plot.bar(title= 'Loan Purpose')\n\nplt.subplot(323)\nfiltered_loandata.loan_status.value_counts().plot.bar(title= 'Status of the loan')\n\nplt.subplot(324)\nfiltered_loandata.grade.value_counts().plot.bar(title= 'LC assigned loan grade')\n\nplt.subplot(324)\nfiltered_loandata.grade.value_counts().plot.bar(title= 'LC assigned loan grade')\n\nplt.subplot(325)\nfiltered_loandata.emp_length.value_counts().plot.bar(title= 'Employee length')\n\nplt.subplot(326)\nfiltered_loandata.term.value_counts().plot.bar(title= 'Loan term')\n\nplt.show()","d5eab345":"# let's check the amount of missing data\nfiltered_loandata.isnull().mean()","4064eb43":"# let's inspect the variable emp_length\nfiltered_loandata.emp_length.unique()","732b5bdc":"filtered_loandata['emp_length'].fillna('0 years', inplace = True)","bf872e19":"# let's inspect the variable emp_length\nfiltered_loandata.emp_length.unique()","aa78c4d9":"# let's look at the percentage of borrowers within\n# each label \/ category of the emp_length variable\n\nfiltered_loandata.emp_length.value_counts() \/ len(filtered_loandata)","b09cd09b":"filtered_loandata.loc[filtered_loandata.emp_length.isnull()]","73e9028e":"# the variable emp_length has many categories. I will summarise it\n# into 3 for simplicity:'0-10 years' or '10+ years' or 'n\/a'\n\n# let's build a dictionary to re-map emp_length to just 3 categories:\n\nlength_dict = {k:'0-10 years' for k in filtered_loandata.emp_length.unique()}\nlength_dict['10+ years']='10+ years'\nlength_dict['0 years']='n\/a'\n\n# let's look at the dictionary\nlength_dict","a77f604b":"# let's re-map the emp_length\n\nfiltered_loandata['emp_length_redefined'] = filtered_loandata.emp_length.map(length_dict)\nfiltered_loandata.emp_length_redefined.unique()","90e8847f":"# let's calculate the proportion of working years\n# with same employer for those who miss data on employer name\n\n# number of borrowers for whom employer name is missing\nvalue = len(filtered_loandata[filtered_loandata.emp_title.isnull()])\n\n# % of borrowers for whom employer name is missing \n# within each category of employment length\nfiltered_loandata[filtered_loandata.emp_title.isnull()].groupby(['emp_length_redefined'])['emp_length'].count().sort_values() \/ value","8fec6ae0":"# let's do the same for those bororwers who reported\n# the employer name\n\n# number of borrowers for whom employer name is present\nvalue = len(filtered_loandata.dropna(subset=['emp_title']))\n\n# % of borrowers within each category\nfiltered_loandata.dropna(subset=['emp_title']).groupby(['emp_length_redefined'])['emp_length'].count().sort_values() \/ value","e66e8894":"# modification of the data of the int_rate and changing it into float datatype\n#filtered_loandata['int_rate'] = filtered_loandata['int_rate'].str.rstrip('%').astype('float')\n\n# list of Object type columns with there one data\nobject_column_loan = filtered_loandata.select_dtypes(include=['object'])\nprint(object_column_loan.iloc[0])","0c99eb36":"cols = ['grade','home_ownership','verification_status','loan_status','pymnt_plan','purpose', 'addr_state','initial_list_status','last_credit_pull_d','application_type']\nfor name in cols:\n    print(name,':')\n    print(object_column_loan[name].value_counts(),'\\n')","b2306132":"# Drop unneccesary columns as it has only single values\nfiltered_loandata = filtered_loandata.drop(['pymnt_plan', 'initial_list_status', 'application_type','policy_code','collections_12_mths_ex_med','acc_now_delinq'], axis=1)\nprint(filtered_loandata.shape)\n#Inspecting the Null values\nfiltered_loandata.isnull().sum()","0c443347":"filtered_loandata.info()","05cc3935":"cols = ['last_credit_pull_d','earliest_cr_line']\nfor name in cols:\n    print(name,':')\n    print(object_column_loan[name].value_counts(),'\\n')","ae278c0a":"filtered_loandata.revol_util.value_counts()","b80f71a9":"#Changing the datatype of the emp_length to int\nfiltered_loandata[\"revol_util\"] = filtered_loandata[\"revol_util\"].astype('float')\n#Seeing the revol_util statistics\nfiltered_loandata[\"revol_util\"].describe()","a845c992":"loan_by_grade = filtered_loandata.groupby(\"grade\").mean()\navg_loan = loan_by_grade['loan_amnt'].reset_index()\nplt.subplots(figsize=(10,6))\nsns.barplot(x='grade', y='loan_amnt', data=avg_loan)","369fd384":"filtered_loandata['loan_status'].unique()","9bcbd774":"filtered_loandata['loan_status_numeric'] = np.where(filtered_loandata['loan_status'] == 'Charged Off', 1, 0)","619ba8aa":"filtered_loandata[['loan_status', 'loan_status_numeric']].head()","bff92840":"plt.subplots(figsize=(12,6))\nsns.violinplot(x=\"grade\", y=\"int_rate\", hue='loan_status_numeric', split=True, inner=\"quart\", data=filtered_loandata, order=\"ABCDEFG\")\nsns.despine(left=True)","772c076d":"# let's see how much money Lending Club has disbursed\n# (i.e., lent) over the years to the different risk\n# markets (grade variable)\n\nfig = filtered_loandata.groupby(['issue_d', 'loan_status_numeric'])['loan_amnt'].sum().unstack().plot(\n    figsize=(14, 8), linewidth=2)\n\nfig.set_title('Disbursed amount in time')\nfig.set_ylabel('Disbursed Amount (US Dollars)')","4ad13b39":"filtered_loandata.loc[filtered_loandata.loan_amnt<10000]","c81a6697":"plt.subplots(figsize=(12,6))\nsns.violinplot(x=\"grade\", y=\"loan_amnt\", hue='loan_status_numeric', split=True, inner=\"quart\", data=filtered_loandata, order=\"ABCDEFG\")\nsns.despine(left=True)","128886c2":"plt.subplots(figsize=(12,8))\nsns.countplot(\"grade\",hue='loan_status_numeric',data=filtered_loandata)","e0e0c7cc":"plt.subplots(figsize=(12,8))\nsns.countplot(\"emp_length\",hue='loan_status_numeric',data=filtered_loandata)","43f26854":"plt.subplots(figsize=(12,8))\nsns.countplot(\"purpose\",hue='loan_status_numeric',data=filtered_loandata)","701c3e01":"loan_status_purpose=pd.crosstab(filtered_loandata['purpose'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_purpose.div(loan_status_purpose.sum(1).astype(float), axis=0).plot(kind=\"bar\",figsize=(12,8))\nplt.xlabel('purpose')\nP = plt.ylabel('Percentage')","96bcffd4":"fig = filtered_loandata.groupby(['grade', 'term'])['loan_status_numeric'].mean().unstack().plot.bar()\nfig.set_ylabel('Percentage of default')","8e29149c":"loan_status_ownership=pd.crosstab(filtered_loandata['home_ownership'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_ownership","df1a6980":"loan_status_ownership.div(loan_status_ownership.sum(1).astype(float), axis=0).plot(kind=\"bar\")\nplt.xlabel('home_ownership')\nP = plt.ylabel('Percentage')","8b94d26c":"loan_status_ownership=pd.crosstab(filtered_loandata['grade'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_ownership","4337dd6c":"loan_status_ownership.div(loan_status_ownership.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked = True)\nplt.xlabel('grade')\nP = plt.ylabel('Percentage')","f4e1476c":"fig = filtered_loandata.groupby(['grade'])['loan_status_numeric'].mean().sort_values().plot.bar()\nfig.set_ylabel('Percentage of bad debt')","111e0116":"loan_status_ownership=pd.crosstab(filtered_loandata['sub_grade'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_ownership","b0e23788":"loan_status_ownership.div(loan_status_ownership.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked = True)\nplt.xlabel('sub_grade')\nP = plt.ylabel('Percentage')","e31b662e":"plt.subplots(figsize=(12,8))\nsns.countplot(\"verification_status\",hue='loan_status_numeric',data=filtered_loandata)","3b265248":"print(filtered_loandata.duplicated().sum())","88c165ad":"filtered_loandata.loan_amnt.describe()","cb78c9cd":"bins = np.linspace(-1, 40000, 100)\nplt.subplots(figsize=(12,8))\nplt.hist(filtered_loandata.loan_amnt, bins, alpha=0.5, label='x')\nplt.hist(filtered_loandata.loan_amnt[filtered_loandata.loan_status_numeric == 1], bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()","9e27ea1c":"filtered_loandata.loc[filtered_loandata.total_rec_late_fee>0]","9e3a7621":"fees = filtered_loandata.loc[filtered_loandata.total_rec_late_fee>0]\ntype(fees)","697a7596":"bins = np.linspace(-1, 200, 20)\nplt.subplots(figsize=(12,8))\nplt.hist(fees.total_rec_late_fee, bins, alpha=0.5, label='x')\nplt.hist(fees.total_rec_late_fee[fees.loan_status_numeric == 1], bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()","4aac35bb":"filtered_loandata.inq_last_6mths.value_counts()","3844ee30":"loan_status_inquiries=pd.crosstab(filtered_loandata['inq_last_6mths'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_inquiries.div(loan_status_inquiries.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked = True, figsize=(18,8))\nplt.xlabel('loan_status_inquiries')\nP = plt.ylabel('Percentage')","f8946de9":"filtered_loandata.delinq_2yrs.value_counts()","77ab50cb":"loan_status_inquiries=pd.crosstab(filtered_loandata['delinq_2yrs'],filtered_loandata['loan_status_numeric'], dropna = True)\nloan_status_inquiries.div(loan_status_inquiries.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked = True, figsize=(18,8))\nplt.xlabel('loan_status_inquiries')\nP = plt.ylabel('Percentage')","98f471cf":"bins = np.linspace(-1, 100, 10)\nplt.hist(filtered_loandata.dti, bins)\n#plt.xscale('log')\nplt.show()","a97c5adc":"bins = np.linspace(-1, 30, 30)\nplt.subplots(figsize=(12,8))\nplt.hist(filtered_loandata.dti, bins, alpha=0.5, label='x')\nplt.hist(filtered_loandata.dti[filtered_loandata.loan_status_numeric == 1], bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()","74d5dad7":"filtered_loandata.loc[filtered_loandata['annual_inc'] > 200000]","fbbf2292":"bins = np.linspace(-1, 50000, 20)\nplt.subplots(figsize=(12,8))\nplt.hist(filtered_loandata.revol_bal, bins, alpha=0.5, label='x')\nplt.hist(filtered_loandata.revol_bal[filtered_loandata.loan_status_numeric == 1], bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()","b1023597":"bins = np.linspace(-1, 300000, 30)\nplt.subplots(figsize=(12,8))\nplt.hist(filtered_loandata.annual_inc, bins, alpha=0.5, label='x')\nplt.hist(filtered_loandata.annual_inc[filtered_loandata.loan_status_numeric == 1], bins, alpha=0.5, label='y')\nplt.legend(loc='upper right')\nplt.show()","ad8191ca":"# create new dataset for exploratory analysis\n\ndef categorize(l):\n    uniques = sorted(list(set(l)))\n    return [uniques.index(x) + 1 for x in l]\n\nloan_exploratory = pd.DataFrame()\nloan_exploratory['annual_inc'] = filtered_loandata['annual_inc']\nloan_exploratory['delinq_2yrs'] = filtered_loandata['delinq_2yrs']\nloan_exploratory['dti'] = filtered_loandata['dti']\nloan_exploratory['grade'] = categorize(filtered_loandata['grade'])\nloan_exploratory['home_ownership'] = categorize(filtered_loandata['home_ownership'])\nloan_exploratory['installment'] = filtered_loandata['installment']\nloan_exploratory['int_rate'] = filtered_loandata['int_rate']\nloan_exploratory['loan_amnt'] = filtered_loandata['loan_amnt']\nloan_exploratory['loan_status_numeric'] = filtered_loandata['loan_status_numeric']\nloan_exploratory['verification_status'] = categorize(filtered_loandata['verification_status'])\nloan_exploratory['sub_grade'] = categorize(filtered_loandata['sub_grade'])\nloan_exploratory['term'] = categorize(filtered_loandata['term'])\n\nloan_exploratory","64246132":"plt.subplots(figsize=(20,12))\nsns.set_context(\"paper\", font_scale=2)\nsns.heatmap(loan_exploratory.corr(), vmax=.8, square=True, annot=True, fmt='.1f')","0839e3dc":"## Check for duplicates in data","e5ced5e9":"Small_business has more percentage of defaulters","f47e483e":"Here we see that usually, loans given over shorter periods of time are usually riskier than those given over longer periods of time (as the badt debt percentage is higher). \nThis is not a coincidence. \nUsually finance companies choose not to lend money for long periods to riskier customers, as this does not help their financial situation. \nRather the opposite by generating them more debt.","75514ef1":"### Visualizing categorical variables"}}