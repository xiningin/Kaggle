{"cell_type":{"5b60af89":"code","4e44a7c9":"code","76c37727":"code","592e6de6":"code","fd217e8c":"code","7288c1b2":"code","e7790d8a":"code","784868c3":"code","d0bb02ee":"code","c2c2a0f5":"code","370d4543":"code","1d78e654":"code","fc89d9d8":"code","6afb66d7":"code","241b93ab":"code","2f68fdbf":"code","10e9f631":"code","986a7531":"code","7fa611c2":"code","6f9596f7":"code","11c631d4":"code","00d67f99":"code","dae1849d":"code","07b79048":"code","e3f14a12":"code","8bdf9802":"code","8c877671":"code","1c5f52aa":"code","df83e436":"code","03af23f9":"code","e3a75c4d":"code","056a9204":"markdown","ce932e84":"markdown","2e43bcf2":"markdown","d2624647":"markdown","fabf8611":"markdown","04892549":"markdown","c83de4fa":"markdown","b83a8f39":"markdown","5a49610b":"markdown","95b88f30":"markdown","5692b999":"markdown","a893a05c":"markdown","ac54ab98":"markdown","23d74dcb":"markdown","8f6ed6e8":"markdown","f89ea36a":"markdown","f8f9a002":"markdown","25cc2e33":"markdown"},"source":{"5b60af89":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import roc_auc_score, roc_curve, f1_score, precision_score, recall_score, accuracy_score, auc\nimport pickle\n%matplotlib inline","4e44a7c9":"data = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')","76c37727":"data.head()","592e6de6":"data.describe()","fd217e8c":"data.info()","7288c1b2":"# dropping useless columns \n\ndata.drop(columns = ['RowNumber', 'CustomerId', 'Surname'], axis = 1, inplace = True)","e7790d8a":"# Encoding categorical variables\n\ndata['Geography'] = data['Geography'].map({'France' : 0, 'Germany' : 1, 'Spain' : 2})\ndata['Gender'] = data['Gender'].map({'Male' : 0, 'Female' : 1})","784868c3":"values = data.IsActiveMember.value_counts()\nlabels = ['Not Active', 'Active']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode)\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","d0bb02ee":"values = data.Exited.value_counts()\nlabels = ['Not Exited', 'Exited']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode, colors = ['darkblue','deeppink'])\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","c2c2a0f5":"values = data.HasCrCard.value_counts()\nlabels = ['doesnt has CrCard', 'HasCrCard']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode, colors = ['tab:cyan' , 'tab:olive'])\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","370d4543":"values = data.Gender.value_counts()\nlabels = ['Male', 'Female']\n\nfig, ax = plt.subplots(figsize = (4, 3), dpi = 100)\nexplode = (0, 0.09)\n\npatches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,\n                                   startangle = 90, explode = explode, colors = ['teal','mediumvioletred'])\n\nplt.setp(texts, color = 'grey')\nplt.setp(autotexts, size = 8, color = 'white')\nautotexts[1].set_color('black')\nplt.show()","1d78e654":"data.Geography.unique()","fc89d9d8":"fig, ax = plt.subplots(3, 2, figsize = (9, 8))\n\nsns.countplot('Geography', hue = 'Exited', data = data, ax = ax[0][0])\nsns.countplot('Gender', hue = 'Exited', data = data, ax = ax[0][1])\nsns.countplot('Tenure', hue = 'Exited', data = data, ax = ax[1][0])\nsns.countplot('NumOfProducts', hue = 'Exited', data = data, ax = ax[1][1])\nsns.countplot('HasCrCard', hue = 'Exited', data = data, ax = ax[2][0])\nsns.countplot('IsActiveMember', hue = 'Exited', data = data, ax = ax[2][1])\n\nplt.tight_layout()\nplt.show()","6afb66d7":"fig = px.violin(data, y= 'Age', color='Gender')\nfig.update_layout(width=800, height=500)\nfig.show()","241b93ab":"fig = px.violin(data, x=\"Geography\", y=\"EstimatedSalary\", color = 'Gender', violinmode='overlay', hover_data=data.columns)\nfig.update_layout(width=800, height=500)\nfig.show()","2f68fdbf":"# Compute the correlation matrix\ncorr = data.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, annot = True, center=0, square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","10e9f631":"def num_plot(df, col, title, symb):\n    fig, ax = plt.subplots(2, 1, sharex=True, figsize=(8,5),gridspec_kw={\"height_ratios\": (.2, .8)})\n    ax[0].set_title(title,fontsize=18)\n    sns.boxplot(x=col, data=df, ax=ax[0])\n    ax[0].set(yticks=[])\n    sns.histplot(x=col, data=df, ax=ax[1])\n    ax[1].set_xlabel(col, fontsize=16)\n    plt.axvline(df[col].mean(), color='darkgreen', linewidth=2.2, label='mean=' + str(np.round(df[col].mean(),1)) + symb)\n    plt.axvline(df[col].median(), color='red', linewidth=2.2, label='median='+ str(np.round(df[col].median(),1)) + symb)\n    plt.axvline(df[col].mode()[0], color='purple', linewidth=2.2, label='mode='+ str(np.round(df[col].mode()[0],1)) + symb)\n    plt.legend(bbox_to_anchor=(1, 1.03), ncol=1, fontsize=17, fancybox=True, shadow=True, frameon=True)\n    plt.tight_layout()\n    plt.show()","986a7531":"num_plot(data, 'Age', 'Age Distribution' , 'yo' )","7fa611c2":"X = pd.DataFrame(data.iloc[:, :-1].values)\ny = data.iloc[:, -1].values","6f9596f7":"# dropping data with less effect\n\nX.drop(9, inplace = True, axis = 1)  # Estimated Salary\nX.drop(7, inplace = True, axis = 1)  # HasCrCard\nX.drop(4, inplace = True, axis = 1)  # Tenure","11c631d4":"# spliting data into train and test\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","00d67f99":"# scaling data\n\nsc = StandardScaler()\n\nx_train = sc.fit_transform(X_train)\nx_test = sc.transform(X_test)","dae1849d":"# training with adaboost classifier\n\nada = AdaBoostClassifier(learning_rate = 0.25 , n_estimators = 1200 , random_state = 1)\nada.fit(x_train, y_train)\npred_ada_train = ada.predict(x_train)\npred_ada_test = ada.predict(x_test)\n\nada_acc_train = metrics.accuracy_score(y_train, pred_ada_train) \nada_acc_test = metrics.accuracy_score(y_test, pred_ada_test) \nada_pr_train = metrics.precision_score(y_train, pred_ada_train, average = None)[0]\nada_pr_test = metrics.precision_score(y_test, pred_ada_test, average = None)[0]","07b79048":"# training with logistic regression\n\nlr_org = LogisticRegression()\nlr_org.fit(x_train , y_train)\npred_lr_org_train = lr_org.predict(x_train)\npred_lr_org_test = lr_org.predict(x_test)\n\nlr_org_acc_train = metrics.accuracy_score(y_train, pred_lr_org_train)\nlr_org_acc_test = metrics.accuracy_score(y_test, pred_lr_org_test)","e3f14a12":"print(\"Adaboost classifier accuracy(train):\", np.round(ada_acc_train, 3))\nprint(\"Adaboost classifier precision(train):\", np.round(ada_pr_train, 3))\nprint(\"Adaboost classifier accuracy(test):\", np.round(ada_acc_test, 3))\nprint(\"Adaboost classifier precision(test):\", np.round(ada_pr_test, 3))","8bdf9802":"print(\"Logistic regression accuracy(train):\", np.round(lr_org_acc_train, 3))\nprint(\"Logistic regression accuracy(test):\", np.round(lr_org_acc_test, 3))","8c877671":"print(\"Adaboost classifier F1 score(train):\", np.round(f1_score(y_train, pred_ada_train), 3))\nprint(\"logisticRegression F1 score(train):\", np.round(f1_score(y_train, pred_lr_org_train), 3))\nprint(\"Adaboost classifier F1 score(test):\", np.round(f1_score(y_test, pred_ada_test), 3))\nprint(\"logisticRegression F1 score(test):\", np.round(f1_score(y_test, pred_lr_org_test), 3))","1c5f52aa":"print(\"Adaboost classifier recall score(train):\", np.round(recall_score(y_train, pred_ada_train), 3))\nprint(\"logisticRegression recall score(train):\", np.round(recall_score(y_train, pred_lr_org_train), 3))\nprint(\"Adaboost recall classifier score(test):\", np.round(recall_score(y_test, pred_ada_test), 3))\nprint(\"logisticRegression recall score(test):\", np.round(recall_score(y_test, pred_lr_org_test), 3))","df83e436":"fig, ax = plt.subplots(1, 2, figsize = (12, 4))\n\nplt.suptitle('ROC Curve', fontsize=20)\n\nfpr, tpr, _ = roc_curve(y_test, pred_ada_test)\nroc_auc = auc(fpr, tpr)\nax[0].plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nax[0].plot([0, 1], [0, 1],'r--')\nax[0].set_title('adaboost OPT',fontsize=20)\nax[0].set_ylabel('True Positive Rate',fontsize=15)\nax[0].set_xlabel('False Positive Rate',fontsize=15)\nax[0].legend(loc = 'lower right', prop={'size': 15},handlelength=0)\n\nfpr, tpr, _ = roc_curve(y_test, pred_lr_org_test)\nroc_auc = auc(fpr, tpr)\nax[1].plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nax[1].plot([0, 1], [0, 1],'r--')\nax[1].set_title('logisticRegression OPT',fontsize=20)\nax[1].set_ylabel('True Positive Rate',fontsize=15)\nax[1].set_xlabel('False Positive Rate',fontsize=15)\nax[1].legend(loc = 'lower right', prop={'size': 15},handlelength=0)","03af23f9":"plot_confusion_matrix(ada, x_train, y_train, cmap = 'RdYlGn') \nplot_confusion_matrix(ada, x_test, y_test, cmap = 'RdYlGn')\n\nplt.show()","e3a75c4d":"plot_confusion_matrix(lr_org, x_train, y_train, cmap = 'PiYG') \nplot_confusion_matrix(lr_org, x_test, y_test, cmap = 'PiYG')\n\nplt.show()","056a9204":"## Training model","ce932e84":"## Data Preprocessing","2e43bcf2":"<span style=\"color:#329ca8\">finding the age distribution of customers<\/span>","d2624647":"<span style=\"color:#329ca8\">ratio of Active to not Active, Exited to not exited, Credit card owners to non credit card owners, Female to men<\/span>","fabf8611":"<span style=\"color:#329ca8\">plotting ROC curve<\/span>","04892549":"## Importing libraries","c83de4fa":"<span style=\"color:#329ca8\">finding effective features on Exited and correlated features<\/span>","b83a8f39":"So there is no NaN values.","5a49610b":"## Prepare Data for Machine learning","95b88f30":"So in general, from my previous calculations and the calculations and metrics hear, adaboost classifier makes the best prediction.","5692b999":"## Testing the model and showing the metrics","a893a05c":"## Storytelling - Visualization","ac54ab98":"## EDA","23d74dcb":"<span style=\"color:#329ca8\">plotting confusion matrix(for logistic regression)(first for train then test)<\/span>","8f6ed6e8":"conclusions:\n1. Number of French customers is more than german and spanish. Number of spanish customers is in the middle but they exited the least. Maybe they have the most satisfaction and products meet their needs more.\n2. Number of female customers is less but also they have more number of exited. Maybe they are hardly satisfied.\n3. With the rise in tenures, number of exits rises.\n4. Number of exited customers that baught more products is more. One probablity of this would be dissatisfaction.\n5. this can be a coincidence, but the probablity of exit increases, when someone has credit card.\n6. When a customer is active, she\/he hardly exits.\n7. Most Costumers are in their 30s.\n8. It seems that estimated salary for both women and men in France, Spain and Germany is the same.","f89ea36a":"<span style=\"color:#329ca8\">comparing each feature in terms of number of people<\/span>","f8f9a002":"<span style=\"color:#329ca8\">plotting confusion matrix(for adaboost classifier)(first for train then test)<\/span>","25cc2e33":"## Load and Prepare Data"}}