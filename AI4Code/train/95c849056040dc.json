{"cell_type":{"2576eeeb":"code","abd69550":"code","9905a7f2":"code","e1c71376":"code","76662897":"code","c732bc03":"code","97681638":"code","b3c37571":"code","accc9f3b":"code","c6a045dd":"code","ef1a6a2e":"markdown","0125e44f":"markdown","713b5aa1":"markdown","dd011d7d":"markdown","a9ce3043":"markdown","3ca20dbc":"markdown","a3239b38":"markdown","c3b415fa":"markdown","37ff9583":"markdown","ab7705ad":"markdown","386c0aa2":"markdown","70006c29":"markdown","2c3d220a":"markdown"},"source":{"2576eeeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom math import sqrt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abd69550":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv', index_col=0)\ndf_train.index = pd.to_datetime(df_train.index)\ndf_train","9905a7f2":"X = df_train.drop(columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'])\ny = df_train[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","e1c71376":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=53)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","76662897":"from xgboost import XGBRegressor\nfrom sklearn.multioutput import RegressorChain\nfrom sklearn.metrics import mean_squared_error\n\n# define base model\nxgbmodel = XGBRegressor(random_state=53, max_depth=7, n_estimators=300, learning_rate=0.1)\n\n# define the chained multioutput wrapper model\nxgbwrapper = RegressorChain(xgbmodel, order=[0,1,2])\n\n# fit the model\nxgbwrapper.fit(X_train, y_train)\n\n# score on test\nprint('Test Score :', xgbwrapper.score(X_test, y_test))\n\ny_pred = xgbwrapper.predict(X_test)\n\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('RMSE :', rmse)","c732bc03":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import MinMaxScaler\n\nknnmodel = KNeighborsRegressor(n_neighbors=7)\nminmax = MinMaxScaler()\n\nX_train_norm = minmax.fit_transform(X_train)\nX_test_norm = minmax.transform(X_test)\n\n# define the chained multioutput wrapper model\nknnwrapper = RegressorChain(knnmodel, order=[0,1,2])\n\n# fit the model\nknnwrapper.fit(X_train_norm, y_train)\n\n# score on test\nprint('Test Score :', knnwrapper.score(X_test_norm, y_test))\n\ny_pred = knnwrapper.predict(X_test_norm)\n\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('RMSE :', rmse)","97681638":"# fit the model\nknnwrapper.fit(X_train, y_train)\n\n# score on test\nprint('Test Score :', knnwrapper.score(X_test, y_test))\n\ny_pred = knnwrapper.predict(X_test)\n\nrmse = sqrt(mean_squared_error(y_test, y_pred))\nprint('RMSE :', rmse)","b3c37571":"df_test = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv', index_col=0)\ndf_test","accc9f3b":"future_prediction = xgbwrapper.predict(df_test)\nsubmission = pd.DataFrame(future_prediction, columns=['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], index=df_test.index)\nsubmission","c6a045dd":"print(submission.shape)\nsubmission.to_csv('\/kaggle\/working\/final_submission')","ef1a6a2e":"#### 1. XGBRegressor","0125e44f":"#### 3. KNN without norm","713b5aa1":"Future Predictions","dd011d7d":"Output file for submission","a9ce3043":"#### Train\/Validation split of 80\/20","3ca20dbc":"RegressorChain helps to partition into three dependent single-output regression problems:\n  \nRegressor 1: Given X,  predict **'target_carbon_monoxide'**.  \n\nRegressor 2: Given X and 'target_carbon_monoxide',  predict **'target_benzene'**.  \n\nRegressor 3: Given X, 'target_carbon_monoxide', and 'target_benzene',  predict **'target_nitrogen_oxides'**.","a3239b38":"#### Reading test data for future predictions and submission","c3b415fa":"## Chained Multioutput Regression","37ff9583":"### Regressor Chain MultiOutput","ab7705ad":"#### Deciding target variables and features","386c0aa2":"#### Read the train data set","70006c29":"#### 2. KNN with MinMax Norm","2c3d220a":"#### There are no Nan or empty values to be filled or fixed. So no cleaning is required."}}