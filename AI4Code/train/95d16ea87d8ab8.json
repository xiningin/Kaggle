{"cell_type":{"8547f060":"code","32e1a537":"code","2a749789":"code","1c6999f3":"code","c75dfa3a":"code","aa55b1c6":"code","94d0bd61":"code","20ec39cf":"code","50f0e908":"code","2f746241":"code","32517637":"code","dd48c49f":"code","c8f74dbd":"code","e4854eaa":"code","378be22f":"code","61315c0a":"code","f1baf0bd":"code","2eb364c6":"code","8a5f92c3":"code","0a2bac29":"code","f4737063":"code","1616256b":"code","0011cbf1":"code","21c8d619":"code","da78e04d":"code","d8015558":"code","0645a652":"code","0e1cf88d":"code","3b481f2f":"code","0669d6c4":"markdown","6861014d":"markdown","dc83d25e":"markdown","181a2cff":"markdown","7ad6137f":"markdown","e31e5ae6":"markdown","9973560e":"markdown","d49ea6de":"markdown","34f1835e":"markdown","1c445888":"markdown","0dcfc0fe":"markdown","8783b328":"markdown","b894d070":"markdown","73e41c69":"markdown"},"source":{"8547f060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32e1a537":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport sklearn.metrics as metrics\nimport os\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split,RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns","2a749789":"data = pd.read_csv('\/kaggle\/input\/engineering-placements-prediction\/collegePlace.csv')","1c6999f3":"data.head()","c75dfa3a":"data.isnull().sum()","aa55b1c6":"data.info()","94d0bd61":"data['Gender'].unique()","20ec39cf":"data['Stream'].unique()","50f0e908":"en = LabelEncoder()\ncatCols = ['Gender','Stream']\nfor cols in catCols:\n    data[cols] = en.fit_transform(data[cols])","2f746241":"data.head()","32517637":"data.info()","dd48c49f":"Y = data[\"PlacedOrNot\"]\nX = data.drop(\"PlacedOrNot\",axis = 1)","c8f74dbd":"Y=pd.DataFrame(Y)","e4854eaa":"X.head()","378be22f":"Y.head()","61315c0a":"# Break off validation set from training data\nX_train_full, X_valid_full, Y_train, Y_valid = train_test_split(X, Y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","f1baf0bd":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_auc_score\n# Define the model\n\n    \n    # defining the model\nclf = XGBClassifier(learning_rate=0.09, \n                    n_estimators=100, \n                    use_label_encoder=False,\n                    random_state=42)\n    \nclf.fit(X_train_full, Y_train, eval_metric='logloss')\npredictions = clf.predict(X_valid_full) \nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predictions)))","2eb364c6":"print(\"f1_score: \" + str(f1_score(Y_valid, predictions)))","8a5f92c3":"predictions\n","0a2bac29":"X.head(18)","f4737063":"data['Stream'].unique()","1616256b":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# lr\nlearning_rate = [ float(x) for x in [0.9, 0.1, 0.09, 0.01]]","0011cbf1":"# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'learning_rate': learning_rate,\n               }\n\nprint(random_grid)\n","21c8d619":"clf2 = XGBClassifier()","da78e04d":"model = RandomizedSearchCV(estimator = clf2, param_distributions = random_grid, n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","d8015558":"model.fit(X_train_full, Y_train, eval_metric='logloss')","0645a652":"model.best_params_","0e1cf88d":"predictions2 = model.predict(X_valid_full) \nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predictions2)))","3b481f2f":"\"\"\"print(\"Enter Age : \")\nage=int(input())\nprint(\"\\nEnter Gender(M\/F) : \")\ngen=input()\nif(gen=='M'):\n    gender=1\n    gender=int(gender)\nelif(gen=='F'):\n    gender=0\n    gender=int(gender)\nprint(\"\\nEnter Stream(ECE\/CS\/IT\/MEC\/ELE\/CIV) : \")\nstre=input()\nif(stre=='ECE'):\n    stream=3\nelif(stre=='CS'):\n    stream=1\nelif(stre=='IT'):\n    stream=4\nelif(stre=='MEC'):\n    stream=5\nelif(stre=='ELE'):\n    stream=2\nelif(stre=='CIV'):\n    stream=0\nstream=int(stream)\nprint(\"\\nEnter Number of Internships Done : \")\nintern = int(input())\nprint(\"\\nEnter CGPA : \")\ncgpa=int(input())\nprint(\"\\nEnter Hostel Accommodation : \")\nhostel=int(input())\nprint(\"\\nEnter number of backlogs : \")\nback=int(input())\"\"\"\nage=20\ngender=1\nstream=1\nintern=3\ncgpa=8\nhostel=1\nback=1\npred = clf.predict(np.array([[age,gender,stream,intern,cgpa,hostel,back]]))\nif(pred==1):\n    print(\"\\nYou have high chances of getting placed\")\nelse:\n    print(\"\\nYou have high chances of getting placed. Work more Hard!\")","0669d6c4":"# Making Predictions","6861014d":"# Placement Prediction Using XGB Classifier and Randomized Search CV ","dc83d25e":"# Splitting Data Into X and Y","181a2cff":"## Gender and Stream are object type","7ad6137f":"# Preprocessing Data","e31e5ae6":"## Checking for Null values","9973560e":"# Importing Necessary Libraries","d49ea6de":"## Checking for datatypes","34f1835e":"## Uncomment the section for realtime input","1c445888":"# Reading Data","0dcfc0fe":"# Using Randomized Search CV","8783b328":"## Encoding Category Data","b894d070":"# XGB Classifier","73e41c69":"# Splitting Test Train Data"}}