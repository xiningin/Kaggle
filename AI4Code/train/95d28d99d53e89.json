{"cell_type":{"70f8ac80":"code","65837226":"code","d00a5155":"code","13acfa11":"code","9af65cd1":"code","fd5cdb01":"code","8e4a22fe":"code","61b6cbe3":"code","291828b9":"code","fcee5e96":"code","99db3306":"code","54365f46":"markdown","25007083":"markdown","e02ebf43":"markdown","3bd9758d":"markdown","1c3c24e1":"markdown","afd298ea":"markdown","9c949773":"markdown"},"source":{"70f8ac80":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom keras import layers, models\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\nfrom keras import callbacks","65837226":"plt.style.use('dark_background')","d00a5155":"def predict_save(idx, model, filename=None):\n    layer_activations = [layer.output for layer in model.layers]\n    model_activations = models.Model(inputs=model.input, outputs=layer_activations)\n    activations = model_activations.predict(X_test[idx].reshape((1, 28, 28, 1)))\n    \n    fig = plt.figure(figsize=(10, 10))\n    cmap = \"coolwarm\"\n    last_height = 0\n    for layer_num, layer in enumerate(layer_activations):\n        if layer.shape.rank == 2 and layer.shape[1] < 512: # Dense layers\n            width, height = 7.2, 0.034\n            x0, y0 = (10 - width)\/2, -height - last_height\n\n            ax = fig.add_axes([x0, y0, width, height])\n            ax.set_yticks([])\n            ax.set_xticks([])\n            ax.imshow([activations[layer_num][0,:]], cmap=cmap)\n        elif layer.shape.rank == 4: # Convolutional layers\n            for i in range(layer.shape[-1]):\n                if layer.shape[3] >= 12:\n                    width, height = 0.095, 0.095\n                else:\n                    width, height = 0.2, 0.2\n                x0 = i * (width + 0.01) + (10 - layer[1].shape[2] * (width + 0.01)) \/ 2\n                y0 = - height - last_height\n\n                ax = fig.add_axes([x0, y0, width, height])\n                ax.set_yticks([])\n                ax.set_xticks([])\n                ax.imshow(activations[layer_num][0,:,:,i], cmap=cmap)\n        else:\n            height = -0.01\n\n        fig.text(5, - last_height + 0.03, layer_names[layer_num], fontdict={\"size\":16}, horizontalalignment='center', verticalalignment='center')\n        last_height += 0.06 + height\n\n    if not filename:\n        plt.show()\n    else:\n        fig.savefig(filename, bbox_inches=\"tight\")\n    plt.clf()\n    plt.close()","13acfa11":"(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\nX_train = X_train.reshape((-1, 28, 28, 1)) \/ 255\nX_test = X_test.reshape((-1, 28, 28, 1)) \/ 255\n\ny_train = to_categorical(y_train)\ny_test = to_categorical(y_test)","9af65cd1":"plt.subplots(figsize=(8,9))\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(X_test[i].reshape((28, 28)))\n    plt.title(\"Test[\" + str(i) + \"]\")","fd5cdb01":"model0 = models.Sequential()\nmodel0.add(layers.Lambda(lambda x: x, input_shape=(28, 28, 1), name=\"Input\"))\nmodel0.add(layers.Conv2D(6, (3, 3), padding=\"same\"))\nmodel0.add(layers.ReLU())\nmodel0.add(layers.MaxPooling2D((2, 2)))\nmodel0.add(layers.Conv2D(12, (3, 3), padding=\"same\"))\nmodel0.add(layers.ReLU())\nmodel0.add(layers.MaxPooling2D((2, 2)))\nmodel0.add(layers.Conv2D(12, (3, 3), padding=\"same\"))\nmodel0.add(layers.ReLU())\nmodel0.add(layers.Flatten())\nmodel0.add(layers.Dense(36))\nmodel0.add(layers.ReLU())\nmodel0.add(layers.Dense(18))\nmodel0.add(layers.ReLU())\nmodel0.add(layers.Dense(10))\nmodel0.add(layers.Softmax())\n\nlayer_names = [\"Input\", \n               \"Convolutional #1\", \"ReLU\", \"Max Pooling\", \n               \"Convolutional #2\", \"ReLU\", \"Max Pooling\",\n               \"Convolutional #3\", \"ReLU\", \"----- Flattening -----\",\n               \"Dense #1\", \"ReLU\",\n               \"Dense #2\", \"ReLU\",\n               \"Dense #3\", \"Softmax\"]","8e4a22fe":"model0.compile(optimizer=\"rmsprop\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nhistory = model0.fit(X_train, y_train, epochs=4, validation_data=(X_test, y_test), batch_size=64, verbose=0)","61b6cbe3":"predict_save(11, model0)","291828b9":"model1 = models.Sequential()\nmodel1.add(layers.Lambda(lambda x: x, input_shape=(28, 28, 1), name=\"Input\"))\nmodel1.add(layers.Conv2D(10, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel1.add(layers.MaxPooling2D((2, 2)))\nmodel1.add(layers.Conv2D(20, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel1.add(layers.MaxPooling2D((2, 2)))\nmodel1.add(layers.Conv2D(20, (3, 3), padding=\"same\", activation=\"relu\"))\nmodel1.add(layers.Flatten())\nmodel1.add(layers.Dense(60, activation=\"relu\"))\nmodel1.add(layers.Dense(10, activation=\"softmax\"))\n\nlayer_names = [\"Input\", \n               \"Convolutional #1\", \"Max Pooling\", \n               \"Convolutional #2\", \"Max Pooling\",\n               \"Convolutional #3\", \"----- Flattening -----\",\n               \"Dense #1\", \"Dense #2\"]","fcee5e96":"class VisualizationLogger(callbacks.Callback):\n    def set_model(self, model):\n        self.model = model\n        self.cnt = 0\n\n    def on_batch_begin(self, epoch, logs=None):\n        self.cnt += 1\n        predict_save(8, self.model, \"output\/\" + str(self.cnt) + \".png\")\n\ncallbacks = []\n        \nmodel1.compile(optimizer=\"rmsprop\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\nhistory = model1.fit(X_train, y_train, epochs=4, validation_data=(X_test, y_test), batch_size=64, callbacks=callbacks, verbose=0)","99db3306":"predict_save(8, model1)","54365f46":"# Visualization of MNIST Convolutional Neural Network","25007083":"### Loading and preprocessing MNIST data","e02ebf43":"Note that the hyperparameters of this network was selected in a such way that the visualizations look nice.","3bd9758d":"### Convolutional neural network (2)","1c3c24e1":"Note that the hyperparameters of this network was selected in a such way that the visualizations look nice.","afd298ea":"### Convolutional neural network (1)","9c949773":"### Function to draw and save"}}