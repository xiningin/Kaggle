{"cell_type":{"c5e1e0a7":"code","5d957f6c":"code","3a9af843":"code","00ac34a1":"code","8a1fe895":"code","c59f7250":"code","e1ad9552":"code","9815b6b6":"code","2ebe2539":"code","1270c1da":"code","e5f09358":"code","086ec79d":"code","3dd9d355":"code","dd055235":"markdown","8bb047b1":"markdown","72b4a5ac":"markdown","8fa15466":"markdown","db094958":"markdown","8a4b309d":"markdown"},"source":{"c5e1e0a7":"import os\nimport keras \nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder ","5d957f6c":"encoder = OneHotEncoder()\nencoder.fit([[0], [1]]) \n\n# 0 - Tumor\n# 1 - Normal","3a9af843":"# This cell updates result list for images with tumor\ndata = []\npaths = []\nresult = []\n\nfor r, d, f in os.walk(r'..\/input\/brain-mri-images-for-brain-tumor-detection\/yes'):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[0]]).toarray())","00ac34a1":"# This cell updates result list for images without tumor\n\npaths = []\nfor r, d, f in os.walk(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\"):\n    for file in f:\n        if '.jpg' in file:\n            paths.append(os.path.join(r, file))\n\nfor path in paths:\n    img = Image.open(path)\n    img = img.resize((128,128))\n    img = np.array(img)\n    if(img.shape == (128,128,3)):\n        data.append(np.array(img))\n        result.append(encoder.transform([[1]]).toarray())","8a1fe895":"data = np.array(data)\ndata.shape","c59f7250":"result = np.array(result)\nresult = result.reshape(139,2)","e1ad9552":"x_train,x_test,y_train,y_test = train_test_split(data, result, test_size=0.2, shuffle=True, random_state=0)","9815b6b6":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(2, 2), input_shape=(128, 128, 3), padding = 'Same'))\nmodel.add(Conv2D(32, kernel_size=(2, 2),  activation ='relu', padding = 'Same'))\n\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\nmodel.add(Conv2D(64, kernel_size = (2,2), activation ='relu', padding = 'Same'))\n\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\nmodel.compile(loss = \"categorical_crossentropy\", optimizer='Adamax',  metrics = ['accuracy'])\nprint(model.summary())","2ebe2539":"history = model.fit(x_train, y_train, epochs = 30, batch_size = 40, verbose = 1,validation_data = (x_test, y_test))","1270c1da":"def names(number):\n    if number==0:\n        return 'Its a Tumor'\n    else:\n        return 'No, Its not a tumor'","e5f09358":"from matplotlib.pyplot import imshow\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/no\/N17.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is ' + names(classification))","086ec79d":"from matplotlib.pyplot import imshow\nimg = Image.open(r\"..\/input\/brain-mri-images-for-brain-tumor-detection\/yes\/Y3.jpg\")\nx = np.array(img.resize((128,128)))\nx = x.reshape(1,128,128,3)\nres = model.predict_on_batch(x)\nclassification = np.where(res == np.amax(res))[1][0]\nimshow(img)\nprint(str(res[0][classification]*100) + '% Confidence This Is A ' + names(classification))","3dd9d355":"plt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nplt.plot(history.history['loss']);\nplt.plot(history.history['val_loss']);\nplt.title(\"Classification Model LOSS\");\nplt.ylabel(\"loss\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);\n\nplt.subplot(1,2,2)\nplt.plot(history.history['accuracy']);\nplt.plot(history.history['val_accuracy']);\nplt.title(\"Classification Model Acc\");\nplt.ylabel(\"Accuracy\");\nplt.xlabel(\"Epochs\");\nplt.legend(['train', 'val']);","dd055235":"# Encoding the target classes","8bb047b1":"# Model Building","72b4a5ac":"# Importing Libraries","8fa15466":"# Splitting the data for training and testing","db094958":"# checking the model prediction","8a4b309d":"# Brain Tumor Classification Using Keras"}}