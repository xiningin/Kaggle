{"cell_type":{"84f5e561":"code","a4440fef":"code","5408c851":"code","81968480":"code","8d2508fb":"code","843c860f":"code","4a2e829b":"code","b736adcf":"code","ec8b4cce":"code","159bb8db":"code","ed415342":"code","5eabbb1a":"code","376d1b03":"code","97f60e6b":"code","f4f0a34d":"code","f413b4d5":"code","498baa2c":"code","9cf4c039":"code","2e0d3667":"code","11145042":"code","f63deb58":"code","bd35c987":"code","6b90e59d":"code","8e1a1ef9":"code","0e05ad8b":"code","0db39150":"code","f8068eba":"code","55ad1ea6":"code","ef44869b":"code","72ad943c":"code","a91719bd":"code","f3668860":"markdown","c20f0736":"markdown","bb1fe358":"markdown","470fb054":"markdown","03ff8729":"markdown","7a0ce273":"markdown","7ba8f3a8":"markdown"},"source":{"84f5e561":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4440fef":"import matplotlib.pyplot as plt\nimport seaborn as sns","5408c851":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")","81968480":"train.head()","8d2508fb":"train.info()","843c860f":"train.describe()","4a2e829b":"plt.figure(figsize = (12, 8))\ncorr_train = train.corr()\nsns.heatmap(corr_train, annot = True);","b736adcf":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['deg_C'], kde=True,color='red')\nax.set(xlabel='Degrees In Celsius', ylabel='Frequency')","ec8b4cce":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['absolute_humidity'], kde=True,color='red')\nax.set(xlabel='Absolute Humidity', ylabel='Frequency')","159bb8db":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['sensor_1'], kde=True,color='red')\nax.set(xlabel='Sensor 1', ylabel='Frequency')","ed415342":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['sensor_2'], kde=True,color='red')\nax.set(xlabel='Sensor 2', ylabel='Frequency')","5eabbb1a":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['sensor_3'], kde=True,color='red')\nax.set(xlabel='Sensor 3', ylabel='Frequency')","376d1b03":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['sensor_4'], kde=True,color='red')\nax.set(xlabel='Sensor 4', ylabel='Frequency')","97f60e6b":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['sensor_5'], kde=True,color='red')\nax.set(xlabel='Sensor 5', ylabel='Frequency')","f4f0a34d":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['target_carbon_monoxide'], kde=True,color='blue')\nax.set(xlabel='Carbon Monoxide', ylabel='Frequency')","f413b4d5":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['target_benzene'], kde=True,color='blue')\nax.set(xlabel='Benzene', ylabel='Frequency')","498baa2c":"plt.figure(figsize=(20, 10))\nax = sns.histplot(train['target_nitrogen_oxides'], kde=True,color='blue')\nax.set(xlabel='Nitrogen Oxides', ylabel='Frequency')","9cf4c039":"sns.set_theme(style=\"whitegrid\")\nfig, axes = plt.subplots(4,2) # create figure and axes\nfig.subplots_adjust(left=0.08, right=0.98, bottom=0.05, top=0.9,\n                    hspace=0.9, wspace=0.3)\n\ndf = pd.DataFrame(data={'Degree celsuis': train['deg_C'],\n                    'Relative Humidity': train['relative_humidity'],\n                    'Absolute Humidity': train['absolute_humidity'],\n                    'Sensor 1 Data': train['sensor_1'],\n                    'Sensor 2 Data': train['sensor_2'],\n                    'Sensor 3 Data': train['sensor_3'],\n                    'Sensor 4 Data': train['sensor_4'],\n                    'Sensor 5 Data': train['sensor_5'],  \n                       })\n\nfor i,el in enumerate(list(df.columns.values)):\n    a = df.boxplot(el, ax=axes.flatten()[i])\n\n#fig.delaxes(axes[1,1]) # remove empty subplot\nplt.tight_layout() \n\nplt.show()","2e0d3667":"sns.pairplot(train)","11145042":"sns.jointplot(\n    data=train,\n    x=\"target_carbon_monoxide\", y=\"target_benzene\",\n)","f63deb58":"sns.jointplot(\n    data=train,\n    x=\"target_carbon_monoxide\", y=\"target_nitrogen_oxides\",\n)","bd35c987":"sns.jointplot(\n    data=train,\n    x=\"target_benzene\", y=\"target_nitrogen_oxides\",\n)","6b90e59d":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_carbon_monoxide'])\nplt.title(\"carbon monoxide distribution over time\", size=20)","8e1a1ef9":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_benzene'])\nplt.title(\"Benzene distribution over time\", size=20)","0e05ad8b":"train['date_time'] = pd.to_datetime(train['date_time'], errors='coerce')\nsns.scatterplot(x=train['date_time'], y= train['target_nitrogen_oxides'])\nplt.title(\"Nitrogen Oxides distribution over time\", size=20)","0db39150":"model_1 = pd.read_csv(\"..\/input\/ensemble\/lightautoml.csv\")\nmodel_2 = pd.read_csv(\"..\/input\/ensemble\/sub.csv\")\nmodel_3 = pd.read_csv(\"..\/input\/ensemble\/submission.csv\")","f8068eba":"final_model = pd.concat([model_1,model_2,model_3]).groupby(level=0).mean()","55ad1ea6":"final_model['date_time'] = model_1['date_time']","ef44869b":"final_model= final_model[['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]","72ad943c":"final_model.to_csv('submission_average_weighted_blend.csv', index=False)","a91719bd":"final_model","f3668860":"## Main Goal\nIn this notebook we will use average weighted ensemble model. In simple terms take output of different models else train different model by yourself and take the average of the model to create your submission file.Since this is my first time I tried using output of the following notebooks. There is lot of scope for improvemnt.\n \n## Major credits \n### https:\/\/www.kaggle.com\/junhyeok99\/automl-pycaret  \n### https:\/\/www.kaggle.com\/maximkazantsev\/tps-07-21-eda-catboost  \n### https:\/\/www.kaggle.com\/alexryzhkov\/tps-lightautoml-baseline-with-pseudolabels  ","c20f0736":"#### A strong perfect correlation exists between benzene and carbon monoxide and nitrogen oxide","bb1fe358":"## Conclusion\n1) From the above graphs we can say Sensor 1,2,3,5 are Postive skewd (right skewed distribution).  \n2) Degrees In Celsius,Absolute Humidity and Sensor 4 are Normally distributed  \n3) All the target values are Right Skewd","470fb054":"## EDA ","03ff8729":"## Problem Statment \n\nIn this competition we are predicting the values of air pollution measurements over time, based on weather information (temperature and humidity) and the input values of 5 sensors.\n\nThe three target values we need to predict are: target_carbon_monoxide, target_benzene, and target_nitrogen_oxides","7a0ce273":"#### Nitrogen oxides concentration has increased & continue to have a high value since then.","7ba8f3a8":"#### There are a lot of outliers in Degree Celsuis and Sensor 1,2,3,4,5"}}