{"cell_type":{"9f6964f6":"code","b825e5c3":"code","1817d63b":"code","786beb0e":"code","a30acc43":"code","058d05f9":"code","09be81f4":"code","4a524681":"code","3d6c1551":"code","bbf6c81d":"code","8eb8b98a":"code","82505a32":"code","ed27068e":"code","f12f592b":"code","20348e31":"code","97aadbe5":"code","15197628":"markdown","18b5f2d1":"markdown","d269ee06":"markdown","5dc20273":"markdown","0e8eee67":"markdown","5c860a20":"markdown","9be78641":"markdown","2f8caa02":"markdown"},"source":{"9f6964f6":"import pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random","b825e5c3":"data_directory = os.path.join(os.getcwd(), '..\/input\/gem-predictive-maintenance')\nchosen_dataset = 'FD003'\n\ndf_train = pd.read_csv(os.path.join(data_directory, chosen_dataset + '_df_train.csv'), index_col=0) \ndf_test = pd.read_csv(os.path.join(data_directory, chosen_dataset + '_df_test.csv'), index_col=0) ","1817d63b":"df_train","786beb0e":"def add_rul(g):\n    g['RUL'] = max(g['time_in_cycles']) - g['time_in_cycles']\n    return g\n\ndf_train = df_train.groupby('engine_no').apply(add_rul)","a30acc43":"dataset_description = df_train.describe()","058d05f9":"axes = dataset_description.T.plot.bar(subplots=True, figsize=(15,10))","09be81f4":"df_train","4a524681":"nan_column = df_train.columns[df_train.isna().any()].tolist()\nconst_columns = [c for c in df_train.columns if len(df_train[c].drop_duplicates()) <= 2]\nprint('Columns with all nan: \\n' + str(nan_column) + '\\n')\nprint('Columns with all const values: \\n' + str(const_columns) + '\\n')\n\ndf_train = df_train[[c for c in df_train.columns if c not in nan_column + const_columns]]","3d6c1551":"df_corr = df_train.corr(method='pearson')\nfig, ax = plt.subplots(figsize=(15,15))\naxes = sns.heatmap(df_corr, linewidths=.2, )","bbf6c81d":"graph = sns.PairGrid(data=df_train, x_vars=\"RUL\", y_vars=df_train.columns, hue=\"engine_no\", height=4, aspect=6,)\ngraph = graph.map(plt.plot, alpha=0.5)\ngraph = graph.set(xlim=(df_train['RUL'].max(),df_train['RUL'].min()))","8eb8b98a":"RATIO = .2\nnumber_of_engine_no = df_train['engine_no'].max()\nnumber_engine_val = int(number_of_engine_no * RATIO)\nengine_no_val = random.sample(range(1, number_of_engine_no + 1), number_engine_val)\nengine_no_train = [nb for nb in range(1, number_of_engine_no + 1) if nb not in engine_no_val]","82505a32":"selected_features = [ 'op_setting_1', 'op_setting_2',\n       'sensor_2', 'sensor_3', 'sensor_4', 'sensor_7', 'sensor_8', 'sensor_9',\n       'sensor_11', 'sensor_12', 'sensor_13', 'sensor_14', 'sensor_15',\n       'sensor_17', 'sensor_20', 'sensor_21']","ed27068e":"data_train = df_train[df_train['engine_no'].isin(engine_no_train)]\ndata_val = df_train[df_train['engine_no'].isin(engine_no_val)]\n\nX_train, y_train = data_train[selected_features], data_train['RUL'] \nX_val, y_val = data_val[selected_features], data_val['RUL']\nX_test = df_test[selected_features]\n\nX_all, y_all = df_train[selected_features], df_train['RUL']","f12f592b":"from sklearn.tree import DecisionTreeRegressor\n\ndt_reg = DecisionTreeRegressor(max_depth=5)\ndt_reg.fit(X_train, y_train)","20348e31":"print(\"Score on train data : \" + str(dt_reg.score(X_train, y_train)))\nprint(\"Score on validation data : \" + str(dt_reg.score(X_val, y_val)))","97aadbe5":"df_test['RUL'] = dt_reg.predict(X_test)\ndf_sub = df_test.groupby('engine_no').agg({'RUL': 'last'}).reset_index()\ndf_sub[['engine_no','RUL']].to_csv('submission.csv', index=False)","15197628":"The dataset contains 32 colums. \n\nThe columns *engine_no* and *time_in_cycles* are metadata columns. It enable to identify an engine at a certain point in time. \n\nAll the other columns (*op_settings_1..2* and *sensors_1..27*) refer to data columns. It stores sensor data for a given engine at a given point in time.","18b5f2d1":"## Load data","d269ee06":"## Imports","5dc20273":"## You work for the next lesson:\n\nBy groups of 3 :\n\n1. Try to have the best model on FD003\n2. Prepare a quick presentation (5 min) explaining your data analysis and you model. \n3. Explain how you would answer to the following issue :\n\n\u00abI need to predict failure on my engine. Considering that each engine does 8 cycles a day on average. If my engine fails, it costs 4m to repair, and 500k of operational impact. If I repair the engine before failure it costs me 1m and depending on removal planning, costs are different. If I plan my maintenance within 5 days it costs me 400k of operational impact. From 5 to 10 days 200k, and above 10 days 100k.  Also I know that if I remove an engine before it fails I lose some potential (~3,5k \/ cycle);\u00bb","0e8eee67":"## Add the RUL\n\nIn the current dataset the RUL is not part of the column.\n\nIn the data descrition, it is mentionned that in the training data, the engine runs until failure.\n\nGiven the time in cycles, it is easy to retreive the RUL. ","5c860a20":"## Make a first model","9be78641":"## Look at the dataset","2f8caa02":"## Explanatory data analysis (EDA)"}}