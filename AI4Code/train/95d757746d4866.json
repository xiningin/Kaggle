{"cell_type":{"5e45c2a1":"code","670c9d2f":"code","081e015b":"code","7a17d269":"code","b20f1bcc":"markdown","777f4ab5":"markdown","dae01645":"markdown","14f672cf":"markdown","57295d1e":"markdown"},"source":{"5e45c2a1":"def partition(arr,low,high): \n\ti = ( low-1 ) \n\tpivot = arr[high]\n\n\tfor j in range(low , high): \n\n\t\t\n\t\tif arr[j] <= pivot: \n\t\t\n\t\t\t \n\t\t\ti += 1\n\t\t\tarr[i],arr[j] = arr[j],arr[i] \n\n\tarr[i+1],arr[high] = arr[high],arr[i+1] \n\treturn ( i+1 ) \n \ndef quickSort(arr,low,high): \n\tif low < high: \n\n\t\t\n\t\tpi = partition(arr,low,high) \n\t\tquickSort(arr, low, pi-1) \n\t\tquickSort(arr, pi+1, high) ","670c9d2f":"def oddEvenSort(arr, n): \n    # Initially array is unsorted \n    isSorted = 0\n    while isSorted == 0: \n        isSorted = 1\n        temp = 0\n        for i in range(1, n-1, 2): \n            if arr[i] > arr[i+1]: \n                arr[i], arr[i+1] = arr[i+1], arr[i] \n                isSorted = 0\n                  \n        for i in range(0, n-1, 2): \n            if arr[i] > arr[i+1]: \n                arr[i], arr[i+1] = arr[i+1], arr[i] \n                isSorted = 0\n      \n    return","081e015b":"def cocktailSort(a): \n    n = len(a) \n    swapped = True\n    start = 0\n    end = n-1\n    while (swapped == True): \n  \n        # reset the swapped flag on entering the loop, \n        # because it might be true from a previous \n        # iteration. \n        swapped = False\n  \n        # loop from left to right same as the bubble \n        # sort \n        for i in range (start, end): \n            if (a[i] > a[i + 1]) : \n                a[i], a[i + 1]= a[i + 1], a[i] \n                swapped = True\n  \n        # if nothing moved, then array is sorted. \n        if (swapped == False): \n            break\n  \n        # otherwise, reset the swapped flag so that it \n        # can be used in the next stage \n        swapped = False\n  \n        # move the end point back by one, because \n        # item at the end is in its rightful spot \n        end = end-1\n  \n         \n        for i in range(end-1, start-1, -1): \n            if (a[i] > a[i + 1]): \n                a[i], a[i + 1] = a[i + 1], a[i] \n                swapped = True\n  \n \n        start = start + 1","7a17d269":"arr = np.array([10, 7, 8, 9, 1, 5])\nn = len(arr) \nquickSort(arr,0,n-1) \nprint (\"Sorted array is:\") \nprint(arr)\nar = np.array([9,23,34,-45,29,37,84,97])\nn = len(ar)\noddEvenSort(ar,n)\nprint (\"Sorted array is:\") \nprint(ar)\na = np.array([1,23,34,43,53,38,93,-28,-23,0.00039,-0.34])\ncocktailSort(a)\nprint (\"Sorted array is:\") \nprint(a)","b20f1bcc":"**Quick sort**","777f4ab5":"even odd sort","dae01645":"**We need sorting techniques mostly every day for data cleaning and for reading data. So today I am going to mention some of the sorting techniques that are my favourite which include quick sort,Cocktail shaker sort and even odd sort**","14f672cf":"Driver Code","57295d1e":"**Cocktail *shaker sort***"}}