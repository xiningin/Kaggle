{"cell_type":{"a446a8b8":"code","a6f28c6c":"code","f83dce21":"code","7fedeede":"code","0677a4dd":"code","157f8cd9":"code","012e9716":"code","1b5006c6":"code","2fdac17a":"code","a7907621":"code","7de60d00":"code","7a4daf86":"code","f69455fb":"code","cc9fbc8b":"code","975af11d":"code","e400524f":"code","18aeabb4":"code","0d3c01b3":"code","cf2ad2f7":"code","bebaabb5":"code","660c941a":"code","dc3e9930":"code","e5ff558a":"code","e14123ac":"code","564386f4":"code","df5f0ef1":"code","e5a13752":"code","5df99298":"code","423c0554":"code","07f1eb8e":"code","4bdd69b9":"code","0869f5ba":"code","0a7b579c":"code","40ab1f38":"code","fcd4b09f":"code","b02a28a4":"code","f4c693ff":"code","999d982d":"code","24bc974f":"code","f6a5e74c":"code","a6095cdf":"code","e7b27211":"code","23f9403f":"code","bf385675":"code","82978493":"code","4ec25ad6":"code","b6103ec8":"code","3104e57c":"code","9ca06910":"code","0c1a5843":"code","eb8a9606":"code","dff56b9c":"code","8744b3af":"code","27edb4ad":"code","c72b2df9":"code","cc05edc8":"code","165e3a8c":"code","951e8deb":"code","50190971":"code","0a45cca9":"code","0da7e1b2":"code","3edb3631":"markdown","70a1ab49":"markdown","2989d8f4":"markdown","ab1d43ed":"markdown"},"source":{"a446a8b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","a6f28c6c":"pip install folium","f83dce21":"pip install pandas_profiling","7fedeede":"from bs4 import BeautifulSoup as soup\nfrom datetime import date,datetime\nfrom urllib.request import Request,urlopen\nimport pandas as pd\nimport numpy as np","0677a4dd":"import matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport seaborn as sns\nimport gc\nimport folium\nfrom folium import plugins\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom pandas_profiling import ProfileReport","157f8cd9":"\nurl=\"https:\/\/www.worldometers.info\/coronavirus\/#countries\"\nreq=Request(url,headers={'User-Agent': \"Google Chrome\/91.0.4472.114\"})\nwebpage=urlopen(req)\npage_soup=soup(webpage,\"html.parser\")","012e9716":"today=datetime.now()\nyesterday_str=\"%s %d, %d\"%(date.today().strftime(\"%b\"),today.day-1,today.year)\nyesterday_str\n                            \n                    ","1b5006c6":"table=page_soup.findAll(\"table\",{\"id\":\"main_table_countries_yesterday\"})\ncontainers=table[0].findAll(\"tr\",{\"style\":\"\"})\ntitle=containers[0]\ndel containers[0]\nclean=True\nall_data =[]\n","2fdac17a":"table=page_soup.findAll(\"table\",{\"id\":\"main_table_countries_yesterday\"})\ncontainers=table[0].findAll(\"tr\",{\"style\":\"\"})\ntitle=containers[0]\ndel containers[0]\nclean=True\nall_data =[]\nfor country in containers:\n    country_data=[]\n    country_container=country.findAll(\"td\")\n    \n    if country_container[1].text==\"china\":\n        continue\n    for i in range(1,len(country_container)):\n        final_feature=country_container[i].text\n        \n        if clean:\n            if i!=1 and i!=len(country_container)-1:\n                final_feature=final_feature.replace(\",\",\"\")\n                \n                if final_feature.find('+')!= -1:\n                    final_feature=final_feature.replace(\"+\",\"\")\n                    final_feature=float(final_feature)\n                elif final_feature.find(\"-\") != -1:\n                    final_feature=final_feature.replace(\"-\",\"\")\n                    final_feature=float(final_feature)*-1\n        if final_feature== 'N\/A':\n            final_feature=0\n        elif final_feature ==\"\" or final_feature ==\" \":\n            final_feature =-1\n                                                        \n                                                        \n        country_data.append(final_feature)\n                                                        \n    all_data.append(country_data)                        \n                                     ","a7907621":"#Uncomment this if you want to see what all_data contains\n#all_data","7de60d00":"df=pd.DataFrame(all_data)\ndf.drop([15,16,17,18,19,20],inplace=True, axis=1)\ndf.head()","7a4daf86":"column_labels=[\"Country\",\"Total Cases\",\"New Cases\",\"Total Deaths\",\"New Deaths\",\"Total Recovered\",\"New Recovered\",\"Active Cases\",\"Serious\/Critical\",\"Total Cases\/1M\",\"Deaths\/1M\",\"Total Tests\",\"Test\/1M\",\"Population\",\"Continent\"]\ndf.columns = column_labels","f69455fb":"df","cc9fbc8b":"df.info()","975af11d":"df.columns\n","e400524f":"df.describe()","18aeabb4":"df.shape","0d3c01b3":"df.isnull().any","cf2ad2f7":"df.isnull().sum","bebaabb5":"#rel= df[[\"Total Cases\", \"Population\",\"Active Cases\"]].loc[3]\n#rel_df = pd.DataFrame(rel).reset_index()\n\n#sns.relplot( x= \"Population\",y= \"Total Cases\",kind=\"line\", data=df)","660c941a":"\n#Generates Automatic report of trends found in data\nfrom pandas_profiling import ProfileReport\n#Here We are only using the first 100 data points\nprof = ProfileReport(df.sample(n=100)) \nprof.to_file(output_file='outputreport.html')","dc3e9930":"for column_label in df.columns:\n    if ((column_label != \"Country\") and (column_label != \"Continent\")):\n        \n        df[column_label]=pd.to_numeric(df[column_label])","e5ff558a":"#adding new col.\ndf[\"%Inc Cases\"]=df[\"New Cases\"]\/df[\"Total Cases\"]*100\ndf[\"%Inc Deaths\"]=df[\"New Deaths\"]\/df[\"Total Deaths\"]*100\ndf[\"%Inc Recovered\"]=df[\"New Recovered\"]\/df[\"Total Recovered\"]*100","e14123ac":"df.head()","564386f4":"cases = df[[\"Total Cases\",\"Active Cases\", \"Total Deaths\"]].loc[0]\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = [\"Type\",\"Total\"]\n\n#df[\"Percentage\"] = np.round(100*cases_df[\"Total\"]\/np.sum(cases_df[\"Total\"]),2)\n#df.head()\n\ncases_df[\"Percentage\"] = np.round(100*cases_df[\"Total\"]\/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"Virus\"] = [\"COVID-19\" for i in range(len(cases_df))]\ncases_df","df5f0ef1":"fig = px.bar(cases_df, x = \"Virus\", y = \"Percentage\", color = \"Type\", hover_data = [\"Total\"])\nfig.show()","e5a13752":"#For INDIA- data at row 3\ncases = df[[\"New Cases\",\"New Recovered\", \"New Deaths\"]].loc[3]\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = [\"Type\",\"Total\"]\n\n#df[\"Percentage\"] = np.round(100*cases_df[\"Total\"]\/np.sum(cases_df[\"Total\"]),2)\n#df.head()\n\ncases_df[\"Percentage\"] = np.round(100*cases_df[\"Total\"]\/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"Virus\"] = [\"COVID-19\" for i in range(len(cases_df))]\ncases_df\nfig = px.bar(cases_df, x = \"Virus\", y = \"Percentage\", color = \"Type\", hover_data = [\"Total\"])\nfig.show()","5df99298":"fig = px.bar(cases_df, x = \"Virus\", y = \"Percentage\", color = \"Type\", hover_data = [\"Total\"])\nfig.show()","423c0554":"per = np.round(df[[\"%Inc Cases\", \"%Inc Deaths\", \"%Inc Recovered\"]].loc[0],2)\nper_df= pd.DataFrame(per)\nper_df.columns = [\"Percentage\"]\nfig = go.Figure()\nfig.add_trace(go.Bar(x = per_df.index , y = per_df[\"Percentage\"], marker_color = [\"Yellow\", \"Blue\", \"Red\"]))\nfig.show()","07f1eb8e":"continent_df = df.groupby(\"Continent\").sum().drop(\"All\")\n","4bdd69b9":"continent_df = continent_df.reset_index()\ncontinent_df","0869f5ba":"def continent_visualization(v_list):\n    for columns_label in v_list:\n        c_df = continent_df[['Continent',columns_label]]\n        \n        c_df['Percentage'] = np.round(100*c_df[columns_label]\/np.sum(c_df[columns_label]),2)\n        c_df['Virus'] = ['Covid-19' for i in range (len(c_df))]\n        #c_df = c_df.reset_index()\n        fig = px.bar(c_df, x = \"Virus\", y = \"Percentage\", color = \"Continent\", hover_data = [columns_label])\n        fig.update_layout(title = {\"text\":f\"{columns_label}\"})\n        fig.show()\n        gc.collect()","0a7b579c":"cases_list = [\"Total Cases\", \"Active Cases\", \"New Cases\", \"Serious\/Critical\",\"Total Cases\/1M\"]\n\ndeaths_list = [\"Total Deaths\", \"New Deaths\", \"Deaths\/1M\"]\n\nrecovered_list = [\"Total Recovered\", \"New Recovered\", \"%Inc Recovered\"]\n","40ab1f38":"continent_visualization(cases_list)","fcd4b09f":"continent_visualization(deaths_list)","b02a28a4":"continent_visualization(recovered_list)","f4c693ff":"df=df.drop([len(df)-1])\ncountry_df = df.drop([0])\ncountry_df","999d982d":"LOOK_AT =5\ncountry = country_df.columns[1:14]\nfig=go.Figure()\nc=0\nfor i in country_df.index:\n    if c < LOOK_AT:\n        fig.add_trace(go.Bar(name = country_df['Country'][i],x = country , y=country_df.loc[i][1:14]))\n    else:\n        break\n    c +=1\nfig.update_layout(title = {\"text\" : f'Top {LOOK_AT} countries affected'}, yaxis_type=\"log\")\nfig.show()","24bc974f":"#Total Active  is the Total cases - (Number of death + Cured)\ndf=df.drop([len(df)-1])\nConti_df= df.drop([0])\nConti_df['Active Cases'] = Conti_df['Total Cases'] - (Conti_df['Total Deaths'] + Conti_df['Total Recovered'])\ntotal_active = Conti_df['Active Cases'].sum()\nprint('Total number of active COVID 19 cases across world:', total_active)\n\nTot_Cases = Conti_df.groupby('Continent')['Active Cases'].sum().sort_values(ascending=False).to_frame()\nTot_Cases.style.background_gradient(cmap='Reds')","f6a5e74c":"##Linear regression","a6095cdf":"from sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split","e7b27211":"df[\"Total Cases\"]= (df[\"Total Cases\"] - df[\"Total Cases\"].min())\/(df[\"Total Cases\"].max()- df[\"Total Cases\"].min())\ndf[\"Total Deaths\"]= (df[\"Total Deaths\"] - df[\"Total Deaths\"].min())\/(df[\"Total Deaths\"].max()- df[\"Total Deaths\"].min())\ndf[\"Total Recovered\"]= (df[\"Total Recovered\"] - df[\"Total Recovered\"].min())\/(df[\"Total Recovered\"].max()- df[\"Total Recovered\"].min())\ndf[\"Test\/1M\"]= (df[\"Test\/1M\"] - df[\"Test\/1M\"].min())\/(df[\"Test\/1M\"].max()- df[\"Test\/1M\"].min())\ndf[\"Total Tests\"]= (df[\"Total Tests\"] - df[\"Total Tests\"].min())\/(df[\"Total Tests\"].max()- df[\"Total Tests\"].min())\ndf[\"Population\"]= (df[\"Population\"] - df[\"Population\"].min())\/(df[\"Population\"].max()- df[\"Population\"].min())\ndf[\"Active Cases\"]= (df[\"Active Cases\"] - df[\"Active Cases\"].min())\/(df[\"Active Cases\"].max()- df[\"Active Cases\"].min())","23f9403f":"training_features = [\"Total Cases\", \"Total Deaths\", \"Total Recovered\",\"Test\/1M\",\"Total Tests\",\"Population\",\"Active Cases\"]\ntarget = 'New Cases'\nX_train, X_test, Y_train, Y_test = train_test_split(df[training_features],\n                                                    df[target],\n                                                     test_size=0.25,  \n                                                   random_state=589)  ","bf385675":"from sklearn import linear_model\nmodel = linear_model.LinearRegression()\nfrom sklearn.linear_model import SGDRegressor","82978493":"model.fit(X_train,Y_train)","4ec25ad6":"predicted=model.predict(X_test)\nprint(\"Mean squared error: %.2f\"\n              % mean_squared_error(Y_test, predicted))\nprint('R Square score: %.2f' % r2_score(Y_test, predicted))","b6103ec8":"# The coefficients\nprint('Coefficients: \\n', model.coef_)\nprint('Intercept:\\n',model.intercept_)","3104e57c":"#plt.plot(Y_test, predicted, color='red', linewidth=1)\nplt.scatter(Y_test, predicted, s=100)\nplt.xlabel('Y_test')\nplt.ylabel('Predicted')\n\nplt.show()","9ca06910":"from sklearn import linear_model\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nmodel = KNeighborsRegressor(n_neighbors=4,p=2,weights='distance') ","0c1a5843":"training_features = [\"Total Cases\", \"Total Deaths\", \"Total Recovered\",\"Test\/1M\",\"Total Tests\",\"Population\",\"Active Cases\"]\ntarget = 'New Cases'\nX_train, X_test, Y_train, Y_test = train_test_split(df[training_features],\n                                                    df[target],\n                                                     test_size=0.12,  \n                                                   random_state=2)  ","eb8a9606":"model.fit(X_train,Y_train)","dff56b9c":"predicted=model.predict(X_test)\nprint(\"Mean squared error: %.2f\"\n              % mean_squared_error(Y_test, predicted))\nprint('R Square score: %.2f' % r2_score(Y_test, predicted))","8744b3af":"predicted=model.predict(X_test)\nprint(\"Mean squared error: %.2f\"\n              % mean_squared_error(Y_test, predicted))\nprint('R Square score: %.2f' % r2_score(Y_test, predicted))","27edb4ad":"plt.plot(Y_test, predicted, color='green', linewidth=1)\nplt.scatter(Y_test, predicted, s=100)\nplt.xlabel('Y_test')\nplt.ylabel('Predicted')\n\nplt.show()","c72b2df9":"reg_df = df[[\"Total Cases\", \"Total Deaths\", \"Total Recovered\",\"Test\/1M\",\"Total Tests\",\"Population\",\"Active Cases\"]]\n#reg_df = reg_df.reset_index()\n","cc05edc8":"X = reg_df.iloc[:, :-1].values\ny = reg_df.iloc[:, :-1].values","165e3a8c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state = 0)","951e8deb":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","50190971":"y_pred = regressor.predict(X_test)","0a45cca9":"plt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('(Training set)')\nplt.xlabel('Population')\nplt.ylabel('Total Cases')\nplt.show()","0da7e1b2":"plt.scatter(X_test, y_test, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color = 'blue')\nplt.title('(Test set)')\nplt.xlabel('Population')\nplt.ylabel('Total Cases')\nplt.show()","3edb3631":"EDA","70a1ab49":"**Hello Kagglers**,\n\n> In this Notebook,  I have Analyzed Recent COVID-19 Trends Using Python. \nThere is no data source attached, because this notebook works by collecting live data from website(uses web scraping) :D\n\n> I have Used Live data from \"https:\/\/www.worldometers.info\/coronavirus\/#countries\". \nTasks performed: \n> > 1.Analysing & Visualising the present condition in India\n> > 2.Is this trend similar to Other Countries \n> > 3.Exploring the world wide data\n\n\nAlso, find my complete project on **Github**:- https:\/\/github.com\/IamJyotiChoudhary\/CovidDataTrendAnalysis\n","2989d8f4":"Please Note: I have not kept explanatory comments in this notebook, if you want explanatory comments also, do let me know in comment section !\nFeel free to copy&edit this notebook.\n\n**Rise & Shine !**","ab1d43ed":"#continent\n"}}