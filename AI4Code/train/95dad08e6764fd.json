{"cell_type":{"293ab85e":"code","a568e152":"code","46d48daf":"code","3a62cf4c":"code","3f8e6fae":"code","864f0a49":"code","10fbba96":"code","3f9f7c94":"code","2e16d1eb":"code","38e49e42":"code","e0182030":"code","b86d72ab":"code","fca9ddbb":"code","fcb2cb32":"code","b500dbb8":"code","768bfb1c":"code","c33ae45d":"code","7f10f3d5":"code","199394ff":"code","92bb1bac":"code","d836f72a":"code","e25ea3fe":"code","f5f85c55":"code","707cfba1":"code","ac322513":"code","3fd98709":"code","cd916e96":"code","8d8eb8f8":"code","18834803":"code","5a88aa7a":"code","04e5dcc5":"code","493396ad":"code","bdb80d21":"code","2ae44414":"code","4e7a5a3a":"code","d8c3443a":"code","87c9eccc":"code","86961250":"code","e6c88e83":"code","b268bb24":"code","a00c3d59":"code","e63562ec":"code","c929722c":"code","50bb5564":"code","15add7f5":"code","ec840e7a":"code","95f859cd":"code","fd863b4a":"code","3a7c8096":"code","8d120ee9":"markdown","a02b6409":"markdown","52d031bd":"markdown","addb2513":"markdown","02cedc29":"markdown","f79372f1":"markdown","1f83ac4b":"markdown","e0a428e4":"markdown","4fff2e8a":"markdown","b5b74210":"markdown"},"source":{"293ab85e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a568e152":"candy_data = pd.read_csv(\"..\/input\/the-ultimate-halloween-candy-power-ranking\/candy-data.csv\")","46d48daf":"candy_data.head(2)","3a62cf4c":"candy_data.info()","3f8e6fae":"candy_data.describe().T","864f0a49":"# Lets see 0, 1 numbers of chocolate as bar\ncandy_data['chocolate'].value_counts().plot.barh();","10fbba96":"# \"competitorname\" feature we dont need and lets drop it\ncandy_data.drop(\"competitorname\", inplace = True, axis=1)\n\ny = candy_data.chocolate.values\nX = candy_data.drop([\"chocolate\"], axis = 1)","3f9f7c94":"# see how many null values we have then we dont need to normalize\n\ncandy_data.isnull().sum()","2e16d1eb":"loj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X,y)\nloj_model","38e49e42":"loj_model.intercept_      # constant value\nloj_model.coef_           # independent values","e0182030":"y_pred = loj_model.predict(X)        # predict\nconfusion_matrix(y, y_pred)          # confussion matrix","b86d72ab":"accuracy_score(y, y_pred)","fca9ddbb":"print(classification_report(y, y_pred))","fcb2cb32":"# Model predict\nloj_model.predict(X)[0:20]","b500dbb8":"loj_model.predict_proba(X)[0:10][:,0:2]","768bfb1c":"# Now lets try model 'predict_proba' probability\n\ny_probs = loj_model.predict_proba(X)\ny_probs = y_probs[:,1]\ny_probs[0:20]","c33ae45d":"# giving limit for values\n\ny_pred = [1 if i > 0.5 else 0 for i in y_probs]","7f10f3d5":"# and compare with above you can see what happened\ny_pred[0:20]","199394ff":"confusion_matrix(y, y_pred)","92bb1bac":"accuracy_score(y, y_pred)","d836f72a":"print(classification_report(y, y_pred))","e25ea3fe":"logit_roc_auc = roc_auc_score(y, loj_model.predict(X))\n\nfpr, tpr, thresholds = roc_curve(y, loj_model.predict_proba(X)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.show()\n\n# blue line: which we set our model\n# red line: if we dont do it what can we take result","f5f85c55":"# lets split test train set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size = 0.30, \n                                                    random_state = 42)","707cfba1":"# set model\n\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","ac322513":"accuracy_score(y_test, loj_model.predict(X_test))","3fd98709":"# with cross validation \n\ncross_val_score(loj_model, X_test, y_test, cv = 10).mean()","cd916e96":"nb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","8d8eb8f8":"nb_model.predict(X_test)[0:10]","18834803":"nb_model.predict_proba(X_test)[0:10]","5a88aa7a":"# predict\ny_pred = nb_model.predict(X_test)","04e5dcc5":"accuracy_score(y_test, y_pred)","493396ad":"cross_val_score(nb_model, X_test, y_test, cv = 10).mean()","bdb80d21":"knn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","2ae44414":"y_pred = knn_model.predict(X_test)\naccuracy_score(y_test, y_pred)","4e7a5a3a":"# get detail print\n\nprint(classification_report(y_test, y_pred))","d8c3443a":"# find KNN parameters\nknn_params = {\"n_neighbors\": np.arange(1,50)}","87c9eccc":"# fit model classification & CV\n\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, knn_params, cv=10)\nknn_cv.fit(X_train, y_train)","86961250":"# this is only observation\n\nprint(\"Best score:\" + str(knn_cv.best_score_))\nprint(\"Best parameters: \" + str(knn_cv.best_params_))","e6c88e83":"knn = KNeighborsClassifier(3)\nknn_tuned = knn.fit(X_train, y_train)","b268bb24":"knn_tuned.score(X_test, y_test)","a00c3d59":"y_pred = knn_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","e63562ec":"rf_model = RandomForestClassifier().fit(X_train, y_train)\nrf_model","c929722c":"y_pred = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred)","50bb5564":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,5,10]}","15add7f5":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2) ","ec840e7a":"rf_cv_model.fit(X_train, y_train)","95f859cd":"print(\"Best Parameters: \" + str(rf_cv_model.best_params_))","fd863b4a":"# using given parameters then create final model\n\nrf_tuned = RandomForestClassifier(max_depth = 2, \n                                  max_features = 5, \n                                  min_samples_split = 10,\n                                  n_estimators = 10)\n\nrf_tuned.fit(X_train, y_train)","3a7c8096":"# tunned test model predict accuracy score\n\ny_pred = rf_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","8d120ee9":"## Model Tuning","a02b6409":"# Logistic regression (predicting a categorical value, often with two categories):\n\n**Question:**\n- The Ultimate Halloween Candy Power Ranking: Can you predict if a candy is chocolate or not based on its other features?","52d031bd":"## 2.1.1.Scikit-learn","addb2513":"# 1.EDA (Exploratory Data Analysis)","02cedc29":"## Predict & Model Tuning","f79372f1":"# 5.Random Forest","1f83ac4b":"# 2.Logistic Regression\n## 2.1.Set Model","e0a428e4":"# 4.KNN\n## 4.1.Predict & Model","4fff2e8a":"## 4.2.Model Tunning","b5b74210":"# 3.Gaussian Naive Bayes"}}