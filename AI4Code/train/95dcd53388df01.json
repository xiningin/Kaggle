{"cell_type":{"889b70eb":"code","a5395750":"code","593d44c9":"code","d4cabad1":"code","679b2886":"code","b0167f14":"code","61b4ebf6":"code","0826d243":"code","aa9cc31c":"code","7b10e954":"code","ed11e4cb":"code","f5bb7aca":"code","ff468b58":"code","a11a71f7":"code","e23503c3":"code","1f340854":"markdown","c548f0da":"markdown","5cdec911":"markdown","adc8feb9":"markdown","2a4457bb":"markdown","ec8e117b":"markdown","628c326b":"markdown","f0b2acd0":"markdown","45b6f2c8":"markdown"},"source":{"889b70eb":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold,train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier\nimport optuna","a5395750":"train = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsample_submission = pd.read_csv(r'..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","593d44c9":"print(f'train set have {train.shape[0]} rows and {train.shape[1]} columns.')\nprint(f'test set have {test.shape[0]} rows and {test.shape[1]} columns.') \nprint(f'sample_submission set have {sample_submission.shape[0]} rows and {sample_submission.shape[1]} columns.') ","d4cabad1":"train.head()","679b2886":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","b0167f14":"y = train['claim']\ntrain.drop('claim',axis=1,inplace=True)","61b4ebf6":"features = []\nfor feature in train.columns:\n    features.append(feature)\nprint(features)","0826d243":"train['missing'] = train[features].isna().sum(axis=1)\ntest['missing'] = test[features].isna().sum(axis=1)","aa9cc31c":"from sklearn.impute import SimpleImputer\nss = SimpleImputer(missing_values=np.nan, strategy='mean')\ntrain[features] = ss.fit_transform(train[features])\ntest[features] = ss.transform(test[features])","7b10e954":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\ntrain[features] = scale.fit_transform(train[features])\ntest[features] = scale.transform(test[features])\nX = train","ed11e4cb":"def fit_cat(trial, x_train, y_train, x_test, y_test):\n    params = {'iterations':trial.suggest_int(\"iterations\", 1000, 20000),\n              'od_wait':trial.suggest_int('od_wait', 500, 2000),\n              'task_type':\"GPU\",\n              'learning_rate' : trial.suggest_uniform('learning_rate', 0.03 , 0.04),\n              'reg_lambda': trial.suggest_loguniform('reg_lambda', 0.32 , 0.33),\n              'subsample': trial.suggest_uniform('subsample',0.9,1.0),\n              'random_strength': trial.suggest_uniform('random_strength',10,50),\n              'depth': trial.suggest_int('depth',1,15),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n              'bootstrap_type':'Poisson'\n               }\n    \n    \n    model = CatBoostClassifier(**params)\n    model.fit(x_train, y_train,eval_set=[(x_test,y_test)], early_stopping_rounds=150, verbose=False)\n    \n    y_train_pred = model.predict_proba(x_train)[:,1]\n    \n    y_test_pred = model.predict_proba(x_test)[:,1]\n    y_train_pred = np.clip(y_train_pred, 0.1, None)\n    y_test_pred = np.clip(y_test_pred, 0.1, None)\n    \n    log = {\n        \"train roc_auc\": roc_auc_score(y_train, y_train_pred),\n        \"valid roc_auc\": roc_auc_score(y_test, y_test_pred)\n    }\n    \n    return model, log","f5bb7aca":"def objective(trial):\n    roc_auc = 0\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n    model, log = fit_cat(trial, x_train, y_train, x_test, y_test)\n    roc_auc += log['valid roc_auc']\n        \n    return roc_auc","ff468b58":"cat_params = {'iterations': 11827,\n 'od_wait': 620,\n 'learning_rate': 0.033785210897265716,\n 'reg_lambda': 0.32796141625302366,\n 'subsample': 0.9036907302202852,\n 'random_strength': 43.508618917973784,\n 'depth': 3,\n 'min_data_in_leaf': 23,\n 'leaf_estimation_iterations': 12,'task_type':\"GPU\",'bootstrap_type':'Poisson'}","a11a71f7":"folds = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X)):\n    print(f\"Fold: {fold}\")\n    X_train, X_test = X.iloc[trn_idx], X.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = CatBoostClassifier(**cat_params)\n   \n    model.fit(X_train, y_train,\n              eval_set=[(X_test, y_test)],\n                early_stopping_rounds=400,\n                verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","e23503c3":"sample_submission['claim'] = predictions\nsample_submission.to_csv(f'cat.csv',index = False)","1f340854":"<div style=\"background-color:powderblue;\">\n    <h2><center>Prediction and submission<\/center><\/h2>\n<\/div>","c548f0da":"<div style=\"background-color:powderblue;\">\n    <h1><center>Data Preprocessing<\/center><\/h1>\n<\/div>","5cdec911":"<div class=\"alert alert-block alert-info\">\n<h4>If you like this notebook, please upvote it! \n     Thank you! :)<\/h4>\n<\/div>","adc8feb9":"<div style=\"background-color:powderblue;\">\n    <h1><center>Building Model<\/center><\/h1>\n<\/div>","2a4457bb":"* these are the best params recovered from **Optuna**.","ec8e117b":"* adding a new column **missing**","628c326b":"<div style=\"background-color:skyblue;\">\n    <h1><center>Tabular Playground Series - SEP 2021<\/center><\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26480\/logos\/header.png?t=2021-04-09-00-57-05)","f0b2acd0":"<div style=\"background-color:powderblue;\">\n    <h2><center>catboost<\/center><\/h2>\n<\/div>","45b6f2c8":"* imputing missing values"}}