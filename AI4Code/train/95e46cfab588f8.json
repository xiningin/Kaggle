{"cell_type":{"be0d3840":"code","31ea5009":"code","294db748":"code","36d826a3":"code","4e3c60c9":"code","0f93ac7c":"code","eb7c60c3":"code","e5a2fa12":"code","00209e61":"code","799daa39":"code","f348dee2":"markdown","22511d42":"markdown","05064808":"markdown","de5ea0ba":"markdown","c1f33f55":"markdown","bf7d0088":"markdown","90785edc":"markdown","cf771282":"markdown","ad96a6c5":"markdown","c4ec5d2c":"markdown","08bc9c44":"markdown","11c9e0c3":"markdown"},"source":{"be0d3840":"#Basic Libraries:\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n#Utiliteis:\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import plot_confusion_matrix, classification_report\nfrom sklearn.preprocessing import StandardScaler\n\n#Classification Models:\nfrom catboost import CatBoostClassifier\nfrom sklearn.svm import SVC\n\n#Supress Warnings:\nimport warnings\nwarnings.filterwarnings('ignore')","31ea5009":"train_df = pd.read_csv('\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/train.csv')\ntrain_df = train_df.set_index(\"ID\")\ntest_df = pd.read_csv('\/kaggle\/input\/dry-beans-classification-iti-ai-pro-intake01\/test.csv')\n\ntrain_df.head()","294db748":"selected_features = train_df.drop(columns=[\"y\"]).columns\n\nX_train, X_val, y_train, y_val = train_test_split(train_df[selected_features],\n                                                  train_df[\"y\"],\n                                                  test_size=0.2,\n                                                  stratify=train_df[\"y\"],\n                                                  random_state=0)\n\nX_test = test_df[selected_features]\n\nX_train.head()","36d826a3":"#Scaling the data:\nsc = StandardScaler()\nsc.fit(X_train)\n\n\nfor df in [X_train, X_val, X_test]:\n    df[selected_features] = sc.transform(df[selected_features])\n\nX_train.describe()","4e3c60c9":"#Estimate model performance:\ndef estimate_model(model, X_train, y_train, X_val, y_val):\n    y_pred_train = model.predict(X_train)\n    y_pred_val = model.predict(X_val)\n    \n    print(f\"  Training set Accuracy   = {model.score(X_train, y_train):.4%}\")\n    print(f\"  Validation set Accuracy = {model.score(X_val, y_val):.4%}\\n\")\n    \n    print(\"  Validation set Classification Report:\")\n    print(classification_report(y_val, y_pred_val, digits=4))\n    \n    fig, ax = plt.subplots(1, 2, figsize = (15, 5))\n    ax[0].set_title(\"Training Set Confusion Matrix\")\n    plot_confusion_matrix(model, X_train, y_train, ax=ax[0], \n                          cmap=\"cividis\", xticks_rotation=\"vertical\")\n    \n    ax[1].set_title(\"Validation Set Confusion Matrix\")\n    plot_confusion_matrix(model, X_val, y_val, ax=ax[1],\n                          cmap=\"cividis\", xticks_rotation=\"vertical\")\n    \n    \n#View the most predictive features from any tree-based model:\ndef feature_importance(model):\n    importance = pd.DataFrame(model.feature_importances_, index= X_train.columns).sort_values(0)\n    importance.plot(kind='barh', title=\"Feature Importance\"), plt.show()","0f93ac7c":"print(\"\\033[1mSupport Vector Classifier:\\033[0m\")\nmodel = SVC(C=38,\n            kernel=\"rbf\",\n            gamma=\"scale\",\n            break_ties=True,\n#             class_weight='balanced',\n            random_state=0)\n\n\nmodel.fit(X_train, y_train)\nestimate_model(model, X_train, y_train, X_val, y_val)","eb7c60c3":"# print(\"\\033[1mCatBoost Classifier:\\033[0m\")\n# model = CatBoostClassifier(loss_function=\"MultiClassOneVsAll\",\n#                            n_estimators=235,\n#                            depth=5,\n#                            learning_rate=0.23,\n#                            random_strength=10,\n#                            min_data_in_leaf=3,\n#                            l2_leaf_reg=3.5,\n#                            grow_policy=\"SymmetricTree\",\n#                            bootstrap_type=\"Bayesian\",\n#                            bagging_temperature=2,\n#                            sampling_frequency=\"PerTreeLevel\",\n#                            boosting_type=\"Ordered\",\n#                            verbose=0,\n#                            random_seed=0)\n\n# model.fit(X_train, y_train)\n# estimate_model(model, X_train, y_train, X_val, y_val)\n# feature_importance(model)","e5a2fa12":"X_test.head()","00209e61":"test_df[\"y\"] = model.predict(X_test)\nsubmission = test_df[[\"ID\", \"y\"]]\nsubmission","799daa39":"submission.to_csv('\/kaggle\/working\/submission.csv', index=False)","f348dee2":"#### Split training dataframe into into training and validation sets","22511d42":"## **Evaluation**","05064808":"#### Support Vector Machine","de5ea0ba":"## **Preprocessing**","c1f33f55":"## **Load training and testing datasets**","bf7d0088":"## **EDA Notebook: Click [Here](https:\/\/www.kaggle.com\/ahmadheshamzaki\/dry-bean-eda\/notebook)**","90785edc":"## **Testing Different ML Models on the Dataset: Click [Here](https:\/\/www.kaggle.com\/ahmadheshamzaki\/models-testing)**","cf771282":"#### CatBoost Classifier","ad96a6c5":"#### Model Evaluation Functions","c4ec5d2c":"## **Importing Libraries**","08bc9c44":"## Predict Test data","11c9e0c3":"#### Data Normalization"}}