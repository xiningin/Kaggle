{"cell_type":{"2f018f57":"code","ee159828":"code","f1118878":"code","6513b8e9":"code","16465443":"code","80226ddb":"code","72bce48d":"code","403c61fb":"code","7d235df8":"code","1113c7c6":"code","1f12d5e3":"code","673ea7ed":"code","24eda7c1":"code","5fc38f68":"code","3698b088":"code","51f4cf6e":"code","ab3b24fc":"markdown"},"source":{"2f018f57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee159828":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor #for the model\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.compose import ColumnTransformer\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, roc_curve, auc #for model evaluation\nfrom sklearn.metrics import classification_report #for model evaluation\nfrom sklearn.metrics import confusion_matrix #for model evaluation\nfrom sklearn.inspection import permutation_importance\n\nfrom xgboost import XGBClassifier, XGBRegressor\n\nfrom tqdm import tqdm,trange\nimport scipy.stats as st","f1118878":"X_full = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv',index_col='id')","6513b8e9":"# X_full.describe()\nX_full.info()\n# X_full.head()\n# X_full.isnull().sum()\n# X_full['diagnosis'].value_counts()\n# X_full.nunique()\n# sns.countplot('diagnosis',data=X_full)","16465443":"# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['diagnosis'], inplace=True)\ny = X_full.diagnosis\nX_full.drop(['diagnosis','Unnamed: 32'], axis=1, inplace=True)","80226ddb":"# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\n# categorical_cols = [cname for cname in X_train_full.columns if\n#                     X_train_full[cname].nunique() < 10 and \n#                     X_train_full[cname].dtype == \"object\"]\n\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 60 and                     \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\n# X_test = X_test_full[my_cols].copy()\n\n\n\n# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', MinMaxScaler())\n])\n\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\n","72bce48d":"categorical_cols","403c61fb":"# 1. RandomForestRegressor in pipeline\n# Define the Model using n_estimators_best\nmodel = RandomForestClassifier(n_estimators=100, random_state=0)\n\n\n# Create and Evaluate the Pipeline\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model)\n                             ])\n\nX_train_rf = X_train.copy()\nX_valid_rf = X_valid.copy()\n\n# Fit model\nmy_pipeline.fit(X_train_rf, y_train)\n\n# get predicted prices on validation data\nval_predictions = my_pipeline.predict(X_valid_rf)\n# print(mean_squared_error(y_valid, val_predictions))\n\nc_report=classification_report(y_valid,val_predictions)\nprint(c_report)","7d235df8":"# 2. RandomForestRegressor with RandomizedSearchCV\n\n#Randomized Search CV\n# https:\/\/github.com\/krishnaik06\/Car-Price-Prediction\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1100, num = 6)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n\n\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\nprint(random_grid)","1113c7c6":"# 2. RandomForestRegressor with RandomizedSearchCV\n# Define model\nregr = RandomForestClassifier()\n\n# Data preprocessing pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n\n# # Transform the data\nX_train_rf_r = X_train.copy()\nX_valid_rf_r = X_valid.copy()\n\nX_train_rf_r = my_pipeline.fit_transform(X_train_rf_r)\nX_valid_rf_r = my_pipeline.transform(X_valid_rf_r)\n\n\n\n# rf_random = RandomizedSearchCV(estimator = regr, param_distributions = random_grid, scoring='neg_mean_squared_error',\n#                               n_iter = 10, cv = 4, verbose= 1, random_state= 0, n_jobs = 1)\nrf_random = RandomizedSearchCV(estimator = regr, param_distributions = random_grid, \n                              n_iter = 10, cv = 4, verbose= 1, random_state= 0, n_jobs = 1)\n\n\nrf_random.fit(X_train_rf_r,y_train)\n\n# get predicted prices on validation data\n# rs_val_predictions = rs_model.predict(X_valid)\n# print(mean_squared_error(y_valid, rs_val_predictions))","1f12d5e3":"rf_random.best_params_","673ea7ed":"# get predicted prices on validation data\nrs_val_predictions = rf_random.predict(X_valid_rf_r)\n# print(mean_squared_error(y_valid, rs_val_predictions))\nc_report=classification_report(y_valid,rs_val_predictions)\nprint(c_report)","24eda7c1":"rf_random.best_score_","5fc38f68":"# 3. Xgboost in pipeline\n# Define the Model using n_estimators_best\nxgb_model = XGBClassifier(n_estimators=1000, learning_rate=0.05) # Typical values range from 100-1000\n\n\n# Create and Evaluate the Pipeline\n# Bundle preprocessing and modeling code in a pipeline\nxgb_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', xgb_model)\n                             ])\n\n\n# Fit model\n# xgb_pipeline.fit(X_train, y_train)\n#  cyin: xgboost using pipeline: \n#     1. to seperate model and pipeline(used only for preprocessing) \n#     or\n#     2. to set param in pipeline: estimator + __(2 underscore) + normal param names \n# https:\/\/stackoverflow.com\/questions\/58136107\/xgbregressor-using-pipeline\n#https:\/\/www.kaggle.com\/questions-and-answers\/101994\n\n# Make a copy to avoid changing original data\nX_valid_eval=X_valid.copy()\n# Remove the model from pipeline\neval_set_pipe = Pipeline(steps = [('preprocessor', preprocessor)])\n# fit transform X_valid.copy()\nX_valid_eval = eval_set_pipe.fit(X_train, y_train).transform (X_valid_eval)\n\n\nX_train_xg = X_train.copy()\nX_valid_xg = X_valid.copy()\n\nxgb_pipeline.fit(X_train_xg, y_train, model__early_stopping_rounds=5, model__eval_metric = \"mae\", \n                 model__eval_set=[(X_valid_eval, y_valid)],model__verbose=False)\n\n# get predicted prices on validation data\nxgb_val_predictions = xgb_pipeline.predict(X_valid_xg)\n# print(mean_squared_error(y_valid, xgb_val_predictions))\nc_report=classification_report(y_valid,xgb_val_predictions)\nprint(c_report)","3698b088":"# 3. still Xgboost in pipeline but just using default param\nxgb_pipeline_raw = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', xgb_model)\n                             ])\n\nX_train_xg = X_train.copy()\nX_valid_xg = X_valid.copy()\n\nxgb_pipeline_raw.fit(X_train_xg, y_train)\n\n# get predicted prices on validation data\nxgb_val_predictions = xgb_pipeline_raw.predict(X_valid_xg)\n# print(mean_squared_error(y_valid, xgb_val_predictions))\nc_report=classification_report(y_valid,xgb_val_predictions)\nprint(c_report)","51f4cf6e":"# 4. Xgboost with RandomizedSearchCV\n\n# http:\/\/danielhnyk.cz\/how-to-use-xgboost-in-python\/\none_to_left = st.beta(10, 1)  \nfrom_zero_positive = st.expon(0, 50)\n\nparams = {  \n#     \"n_estimators\": st.randint(3, 40),\n    \"n_estimators\": range(100,1000,200),\n    \"max_depth\": st.randint(3, 40),\n    \"learning_rate\": st.uniform(0.05, 0.4),\n    \"colsample_bytree\": one_to_left,\n    \"subsample\": one_to_left,\n    \"gamma\": st.uniform(0, 10),\n    'reg_alpha': from_zero_positive,\n    \"min_child_weight\": from_zero_positive,\n}\n\n# xgbreg = XGBRegressor(nthreads=-1)  \n# xgb_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n#                               ('model', xgbreg)\n#                              ])\n\n# gs = RandomizedSearchCV(xgb_pipeline, params, n_jobs=1)\n# gs.fit(X_train, y_train,early_stopping_rounds=5, eval_set=[(X_valid, y_valid)], verbose=False) # cyin: has error\n# gs.best_model_\n\n#  cyin: xgboost using RandomizedSearchCV needs to seperate with pipeline otherwise error: \n#     use pipeline only for preprocessing \n\n# Define model\nxgbreg = XGBClassifier(n_estimators=500, learning_rate=0.05)\n\n# Data preprocessing pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n\n# Transform the data\nX_train_xg_r = X_train.copy()\nX_valid_xg_r = X_valid.copy()\n\nX_train_xg_r = my_pipeline.fit_transform(X_train_xg_r)\nX_valid_xg_r = my_pipeline.transform(X_valid_xg_r)\n\n\n# xgb_model = RandomizedSearchCV(xgbreg, params, scoring='neg_mean_squared_error', n_jobs=1)  \nxgb_model = RandomizedSearchCV(xgbreg, params, n_jobs=1)  \n\nxgb_model.fit(X_train_xg_r, y_train)  \n# rs_model.best_estimator_\n\n\n# get predicted prices on validation data\nxgb_val_predictions = xgb_model.predict(X_valid_xg_r)\n# print(mean_squared_error(y_valid, xgb_val_predictions))\nc_report=classification_report(y_valid,xgb_val_predictions)\nprint(c_report)","ab3b24fc":"**Summary: RandomForestClassifier has best performance in Malignant recall: 98%**"}}