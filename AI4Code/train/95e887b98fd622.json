{"cell_type":{"3a204821":"code","4529fb38":"code","f7078d1e":"code","4f777fcd":"code","2258b436":"code","9a0fc017":"code","ba9c43e6":"code","c8e2504d":"code","ef614ceb":"code","1298126c":"code","c01b0dde":"code","81bdab18":"code","2e3fd157":"code","b22f6f74":"code","65d3a6d2":"code","4e5fd1f5":"code","7128ae65":"code","b462cc3d":"code","b71afd51":"code","023d64fb":"code","cb568d64":"code","74a6beba":"code","93611b88":"code","42604fe3":"code","fef3dd59":"code","3e9e5ad3":"code","a14e6f82":"code","c8056542":"code","5cf6f8bb":"code","9b50e9b4":"code","f3e70891":"code","ef87fc76":"code","ad7927c8":"code","6d3f887b":"markdown","80719d6d":"markdown","5a12825b":"markdown","7055d796":"markdown","4f7cfe66":"markdown","ac4b56c0":"markdown","f535e500":"markdown","bdb24496":"markdown","9fc5302a":"markdown","4bc8ca5b":"markdown","73526167":"markdown","b9351b55":"markdown","fd2bd592":"markdown","ac899d3e":"markdown","5e818a96":"markdown"},"source":{"3a204821":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4529fb38":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pathlib import Path\nfrom sklearn.decomposition import TruncatedSVD","f7078d1e":"path = Path('\/kaggle\/input\/books-amazon-product-data\/ratings_Books.csv')\ndf = pd.read_csv(path,names=['user', 'product','rating','timestamp'])","4f777fcd":"df.head(),df.shape","2258b436":"df.info(),df.isnull().sum(),df.isna().sum()","9a0fc017":"dfmr = df.head(1000000)","ba9c43e6":"dfmr = dfmr.groupby('product').filter(lambda x:x['rating'].count() >=1000)","c8e2504d":"dfmr.shape","ef614ceb":"df_top = pd.DataFrame(dfmr.groupby('product')['rating'].mean())\ndf_top.head()","1298126c":"df_top['NtimesRated'] = pd.DataFrame(dfmr.groupby('product')['rating'].count())\ndf_top","c01b0dde":" sns.pairplot(df_top[['rating','NtimesRated']],size=5)","81bdab18":"df_top_1 = df_top[df_top['rating'] > 4.0]","2e3fd157":"df_top_1\ndf_top_1.shape","b22f6f74":"topsellers = df_top_1.NtimesRated.sort_values(ascending=False)\ntopsellers.shape","65d3a6d2":"topsellers","4e5fd1f5":"import webbrowser\nprodid = topsellers.index[0]\nwebpath = 'https:\/\/www.amazon.com\/dp\/'+prodid","7128ae65":"webbrowser.open(webpath)","b462cc3d":"cf_df = dfmr.sample(20000)\ncf_df.shape","b71afd51":"cf_df_r = cf_df.pivot_table(index='user',values='rating',columns='product',fill_value=0)\ncf_df_r_T = cf_df_r.T","023d64fb":"SVD = TruncatedSVD(n_components=(cf_df_r_T.shape[1]-1)\/\/2)","cb568d64":"X_SVD = SVD.fit(cf_df_r_T)","74a6beba":"#creating list of explained variances\nSVD_exp_var = SVD.explained_variance_ratio_","93611b88":"def calc_numb(exp_vars,final_ratio):\n    total_vars = 0.0\n    n_components = 0\n    for explained_variance in exp_vars:\n        total_vars += explained_variance\n        n_components += 1\n        if total_vars >= final_ratio:\n            break\n    return n_components","42604fe3":"components = calc_numb(SVD_exp_var,0.9)\ncomponents","fef3dd59":"SVD_1 = TruncatedSVD(n_components=components)","3e9e5ad3":"decomposed_matrix = SVD_1.fit_transform(cf_df_r_T)","a14e6f82":"decomposed_matrix.shape","c8056542":"corr_matrix = np.corrcoef(decomposed_matrix)\ncorr_matrix.shape","5cf6f8bb":"ind1 = cf_df_r_T.index[74]\nprod_names = list(cf_df_r_T.index)\nprod_id = prod_names.index(ind1)\nprod_id,ind1","9b50e9b4":"corr_prod_ids = corr_matrix[prod_id]\ncorr_prod_ids.shape","f3e70891":"reclist = list(cf_df_r_T.index[corr_prod_ids > 0.5])\nreclist.remove(ind1)","ef87fc76":"reclist","ad7927c8":"webpath1 = 'https:\/\/www.amazon.com\/dp\/'+ind1\nwebbrowser.open(webpath1)","6d3f887b":"we got matrix of product indexes, now we can query any product and get relation ","80719d6d":"Most popular products always have a decent rating (3.5 or 4.0), that's a good start for our query.","5a12825b":"your web browser should open locally that page . you would need an Amazon API key for real queries tho","7055d796":"Chechking for null, NaN data and column datatypes","4f7cfe66":"So far, so good\n\nNow, we can focus on recommendations based on high demand and rating regardless of the purchase history. We need this to prevent offer same items again and again , based on the user history, and for the users who has no history at all.","ac4b56c0":"now we need to calculate number of components for the svd.","f535e500":"and we can check recommendations in the exact same way\n\n![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51-zJEmZn8L._SX324_BO1,204,203,200_.jpg)\n![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51FUkRLXLsL._SX328_BO1,204,203,200_.jpg)\n![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51gREdA2jqL._SX329_BO1,204,203,200_.jpg)\n![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/512rYFkWCCL._SX329_BO1,204,203,200_.jpg)\n![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51p3FIHUcfL._SX329_BO1,204,203,200_.jpg)","bdb24496":"Recommending highly correlated products in sequence","9fc5302a":"you can query Amazon API with the product identification number to get the idea what that items are\n\nfor example:","4bc8ca5b":"**calculating Truncated SVD**\n\nrun svd once to get the initial parameters to calculate components","73526167":"COLLABORATIVE FILTERING","b9351b55":"and we can check what kind of product is that .","fd2bd592":"importing data","ac899d3e":"checking head() and shape","5e818a96":"![](https:\/\/images-na.ssl-images-amazon.com\/images\/I\/51I3O9EGDQL._SX330_BO1,204,203,200_.jpg)"}}