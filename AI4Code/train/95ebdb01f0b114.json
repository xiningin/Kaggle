{"cell_type":{"b06b1b63":"code","a030ebc6":"code","99a8771c":"code","63676f71":"code","e7c0909f":"code","8d496458":"code","72ede9cb":"code","2bba3cfd":"code","f5185df8":"code","d12c4246":"code","9ec171af":"code","ff1c5f5f":"code","ccf9d5d6":"code","f9ea07b3":"code","e2b67598":"code","42c20b2b":"code","100cf132":"code","578478b1":"markdown","6169d545":"markdown","a0858d2b":"markdown","620f3b35":"markdown","203f1ac3":"markdown","c5cdf58c":"markdown","d00ba2d9":"markdown","9c63b25a":"markdown","5753b674":"markdown","1b61963b":"markdown","4aa83d23":"markdown"},"source":{"b06b1b63":"import warnings\nwarnings.simplefilter('ignore')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nnp.random.seed(2022)\n\nimport seaborn as sns\nsns.set(style='white', context='notebook', palette='deep')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom skimage import transform\n\nfrom tensorflow.keras import utils, models, layers, optimizers, callbacks\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport os\nos.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'","a030ebc6":"img_size = 64 # increase image height and width to this value\nepochs = 30","99a8771c":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\n\ny_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1) \ndel train \n\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = test.values.reshape(-1,28,28,1)\n\nX_train = transform.resize(X_train, (len(X_train), img_size, img_size, 1), preserve_range=True)\nX_test = transform.resize(X_test, (len(X_test), img_size, img_size, 1), preserve_range=True)","63676f71":"fig = plt.figure(figsize=[10,7])\ng = sns.countplot(y_train)","e7c0909f":"fig = plt.figure(figsize=[20,10])\nfor i in range(32):\n    plt.subplot(4,8,i+1)\n    plt.imshow(np.array(X_train[i]))\n    plt.title(f'Label: {y_train[i]}')","8d496458":"X_train = X_train.astype('float32') \/ 255\nX_test  = X_test.astype('float32') \/ 255\n\ny_train = utils.to_categorical(y_train)\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=2022)","72ede9cb":"datagen = ImageDataGenerator(rotation_range=10,\n                             zoom_range = 0.1, \n                             width_shift_range=0.1,\n                             height_shift_range=0.1)\n\ndatagen.fit(X_train)","2bba3cfd":"model = models.Sequential()\n\nmodel.add(layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (img_size,img_size,1)))\nmodel.add(layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.MaxPool2D(pool_size=(2,2)))\nmodel.add(layers.Dropout(0.25))\n\n\nmodel.add(layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(layers.MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(layers.Dropout(0.25))\n\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation = \"relu\"))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(10, activation = \"softmax\"))","f5185df8":"model.compile(optimizer = optimizers.RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0), \n              loss = \"categorical_crossentropy\", \n              metrics=[\"accuracy\"])","d12c4246":"savePath = 'bestWeight.h5'\n\nlearning_rate_reduction = callbacks.ReduceLROnPlateau(monitor='val_accuracy', \n                                                      patience=3,  \n                                                      factor=0.5, \n                                                      min_lr=0.00001)\n\ncheckpoint = callbacks.ModelCheckpoint(savePath,\n                                       monitor=\"val_loss\",\n                                       verbose=0,\n                                       save_best_only=True,\n                                       save_weights_only=True,\n                                       mode=\"auto\",\n                                       save_freq=\"epoch\",\n                                       options=None)\n\nhistory = model.fit_generator(datagen.flow(X_train,y_train, batch_size=64),\n                              epochs = epochs, \n                              validation_data = (X_val,y_val), \n                              callbacks=[learning_rate_reduction, checkpoint],\n                              verbose = 1)","9ec171af":"fig = plt.figure(figsize=(10,7))\nplt.subplot(211)\nplt.plot(history.history['loss'], color='b', label=\"Training loss\")\nplt.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nplt.ylabel('Loss')\nplt.legend(loc='best')\n\nplt.subplot(212)\nplt.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(loc='best')","ff1c5f5f":"model.load_weights(savePath)\ny_pred = model.predict(X_val)\ny_pred = np.argmax(y_pred,axis = 1) \ny_val = np.argmax(y_val,axis = 1) \nconfusion_mtx = confusion_matrix(y_val, y_pred) \n","ccf9d5d6":"fig = plt.figure(figsize=[10,7])\nplt.imshow(confusion_mtx, interpolation='nearest', cmap=plt.cm.Reds)\nplt.colorbar()\nplt.xlim(0,10)\nplt.ylim(0,10)\nplt.xlabel('True label')\nplt.ylabel('Predicted label')\nplt.show()","f9ea07b3":"errors = (y_pred - y_val != 0)\n\ny_pred_errors = y_pred[errors]\ny_val_errors = y_val[errors]\nX_val_errors = X_val[errors]\n\nfig = plt.figure(figsize=[20,15])\nfor i in range(32):\n    plt.subplot(4,8,i+1)\n    \n    idx = np.random.randint(0, len(y_val_errors))\n    \n    plt.imshow(np.array(X_val_errors[idx]))\n    plt.title(f'True label: {y_val_errors[idx]}\\n Predicted label: {y_pred_errors[idx]}')","e2b67598":"y_test = model.predict(X_test)\ny_test = np.argmax(y_test, axis=1)","42c20b2b":"fig = plt.figure(figsize=[20,15])\nfor i in range(32):\n    plt.subplot(4,8,i+1)\n    \n    idx = np.random.randint(0, len(y_test))\n    plt.imshow(np.array(X_test[idx]))\n    plt.title(f'Label: {y_test[idx]}')","100cf132":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsubmission['Label'] = y_test\nsubmission.to_csv(\"submission.csv\",index=False)","578478b1":"# Digit Recognizer: CNN Keras \n### **Reference**: this notebook is inspired by a seminal work of [Yassine Ghouzam](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/notebook)\n### **Introduction**: some of the code in the original notebook is outdated, this notebook provides some clearnings\/updates and improvements\n### **Best practice**: do not forget to *Upvote* if you like\/copy this notebook","6169d545":"# Constants","a0858d2b":"# Validation","620f3b35":"# Model","203f1ac3":"# Libraries","c5cdf58c":"# Data processing","d00ba2d9":"# Training","9c63b25a":"# Submission","5753b674":"# Data","1b61963b":"# Data visualization","4aa83d23":"# Prediction"}}