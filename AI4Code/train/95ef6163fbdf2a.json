{"cell_type":{"123319d1":"code","98c4a71e":"code","0145c524":"code","d26258c2":"code","1f16ad36":"code","a8a2df82":"code","6419e49f":"code","8b3d4843":"code","34a70b74":"code","e884b23a":"code","0b0d61b6":"code","4858d9e6":"code","330d36f7":"code","9d2f52c7":"code","7c871ce2":"code","2f0fd5b7":"code","c15d617e":"code","7de688d0":"code","52beded1":"code","7223863e":"code","a1871ab1":"code","00fce14e":"code","1b08a3ec":"code","5aedffb5":"code","0ce934bd":"code","da71cdb1":"code","f8c7b50f":"code","9626e56a":"code","f0929019":"code","f242e9aa":"code","b31296ad":"code","438ac73e":"code","a8771ed6":"code","cf5a535b":"code","eeefeca2":"code","15bb1619":"markdown","6850aa9c":"markdown","2971d45f":"markdown","e0e5442b":"markdown","8a52f3c0":"markdown","7c2c8c8d":"markdown","0e59a3ee":"markdown","7c6d94ff":"markdown","6885a889":"markdown"},"source":{"123319d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","98c4a71e":"data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndata.head()","0145c524":"data.info()","d26258c2":"data.corr()","1f16ad36":"f,ax = plt.subplots(figsize = (12,12))\nsns.heatmap(data.corr(), annot = True, linewidths=.5, fmt = '.1f', ax=ax)\nplt.show()","a8a2df82":"data.head(12)","6419e49f":"data.columns","8b3d4843":"#linewidth = width of line, alpha = opacity, linestyle = sytle of line\ndata.SepalWidthCm.plot(color='r', label='SepalWidthCm', linewidth=1, alpha=0.5, grid=True, \n               linestyle='-')\ndata.SepalLengthCm.plot(kind='line', color='g', label='SepalLengthCm', linewidth=1, alpha=0.5, grid=True,\n               linestyle=':')\nplt.xlabel('x axis')      # the title of the x axis\nplt.ylabel('y axis')      # the title of the y axis\nplt.title('Line Plot')    # the title of the plot\nplt.show()","34a70b74":"#data.columns\n#plt.scatter(data.SepalLengthCm, data.SepalWidthCm, color=\"red\", alpha=0.5)\ndata.plot(kind='scatter', x='SepalLengthCm', y='SepalWidthCm', alpha=0.5, color='red')\nplt.xlabel('SepalLengthCm')\nplt.ylabel('SepalWidthCm')\nplt.title('SepalLengthCm SepalWidthCm Scatter Plot')\nplt.show()","e884b23a":"# bins = number of bar in figure\ndata.PetalLengthCm.plot(kind='hist', bins=50, figsize=(8,6))\nplt.show()","0b0d61b6":"# clf() = cleans it up again you can start a fresh\ndata.PetalLengthCm.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","4858d9e6":"# dictionary has 'key' and 'value'\n# George is key, 24 is value\nd = {\"George\": 24, \"Tom\": 32}\nprint(d.keys())\nprint(d.values())","330d36f7":"d[\"Tom\"] = 32\nd[\"Jerry\"] = 16","9d2f52c7":"print(d[\"George\"])","7c871ce2":"# keys are commonly strings or numbers\n#d[10] = 100","2f0fd5b7":"d['George'] = \"30\"     # update\nprint(d)\nd['Alice'] = \"12\"      # add new entry\nprint(d)\ndel d['George']     \nprint(d)\nprint('Alice' in d)","c15d617e":"d.clear()   # remove all entries in d\nprint(d)","7de688d0":"data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","52beded1":"series = data['SepalLengthCm']        # data['SepalLengthCm'] = series\nprint(type(series))\ndata_frame = data[['SepalLengthCm']]  # data[['SepalLengthCm']] = data frame\nprint(type(data_frame))","7223863e":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","a1871ab1":"# 1.Filtering Pandas data frame\nx = data['SepalLengthCm']>7 ","00fce14e":"# 2.Filtering pandas with logical_and\n# There are only 4 \ndata[np.logical_and(data['SepalLengthCm']>7, data['SepalWidthCm']>3 )]","1b08a3ec":"# Stay in loop if condition (i is not equal 2) is true\ni = 0\nwhile i != 2 :\n    print('i is: ',i)\n    i +=1\nprint(i,' is equal to 2')","5aedffb5":"# Stay in loop if condition(i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\nd = {'George':'24','Tom':'32'}\nfor key,value in d.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['SepalLengthCm']][0:1].iterrows():   # 0 is means the first element\n    print(index,\" : \",value)","0ce934bd":"def tuple_ex():\n    \"\"\" return defined t tuple\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","da71cdb1":"# access to index number\n\ncourses = (\"Python Course\", \"C++ Course\", \"Java Course\")\n\nprint(courses[1])","f8c7b50f":"# Once a tuple has been created, you cannot change its values. The tuple cannot be changed.\n\ncourses = (\"Python Course\", \"C++ Course\", \"Java Course\")\n\ncourses[1]=\"C# Course\"","9626e56a":"# guess prints what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","f0929019":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x  \n# First local scope searched, then global scope searched, if two of them cannot be found lastly built in scope searched.","f242e9aa":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","b31296ad":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","438ac73e":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","a8771ed6":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","cf5a535b":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","eeefeca2":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","15bb1619":"### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list","6850aa9c":"### LIST COMPREHENSION\n\n\n","2971d45f":"# Pandas\n\n  In computer programming, pandas is a software library written for the Python programming language for data manipulation and analysis.\n  \n  CSV: comma - separated values","e0e5442b":"# **User Defined Function**\n\nTuple, one of the Python collections, is an ordered and unchangeable collection. \n\n() is written using parentheses.","8a52f3c0":"### DEFAULT and FLEXIBLE ARGUMENTS","7c2c8c8d":"<a id=\"9\"><\/a> <br>\n### SCOPE\n\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>","0e59a3ee":"# Matplotlib\n\n Matplotlib is a plotting library for the Python programming language and its numerical mathematics extension NumPy. It provides an object-oriented API for embedding plots into applications using general-purpose GUI toolkits like Tkinter, wxPython, Qt, or GTK+.\n \n*  Line Plot is better when x axis is time\n*  Scatter Plot is better for correlation \n*  Histogram Plot is better when we need to see distribution of numerical data","7c6d94ff":"**Correlation Map**","6885a889":"### LAMBDA FUNCTION\n\nFaster way of writing function"}}