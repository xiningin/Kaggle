{"cell_type":{"b22f480b":"code","caba91b3":"code","6018a4ab":"code","26aff9f6":"code","d4665a9d":"code","3f91c8f3":"code","e28eafc0":"code","fb1e1359":"code","d309a6e6":"code","bd7e9602":"code","23224e8e":"code","f825970b":"code","ee0a33a2":"code","23c95ae3":"code","4ac1b8fb":"code","6c47efe5":"code","222c0fdd":"markdown","3fc532c1":"markdown"},"source":{"b22f480b":"import numpy as np # linear algebra\nimport pandas as pd\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split","caba91b3":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test= pd.read_csv('..\/input\/test.csv')\n","6018a4ab":"def convert_dates(x):\n    x['date']=pd.to_datetime(x['date'])\n    x['month']=x['date'].dt.month\n    x['year']=x['date'].dt.year\n    x['dayofweek']=x['date'].dt.dayofweek\n    return x\n","26aff9f6":"df_train = convert_dates(df_train)\ndf_test = convert_dates(df_test )\n","d4665a9d":"def add_avg(x):\n    x['daily_avg']=x.groupby(['item','store','dayofweek'])['sales'].transform('mean')\n    x['monthly_avg']=x.groupby(['item','store','month'])['sales'].transform('mean')\n    return x\ndf_train = add_avg(df_train)","3f91c8f3":"daily_avg = df_train.groupby(['item','store','dayofweek'])['sales'].mean().reset_index()\nmonthly_avg = df_train.groupby(['item','store','month'])['sales'].mean().reset_index()\n","e28eafc0":"df_test=df_test.drop(['date'],axis=1)\ndf_train=df_train.drop(['date'],axis=1)","fb1e1359":"def merge(x,y,col,col_name):\n    x =pd.merge(x, y, how='left', on=None, left_on=col, right_on=col,\n            left_index=False, right_index=False, sort=True,\n             copy=True, indicator=False,validate=None)\n    x=x.rename(columns={'sales':col_name})\n    return x\ndf_test=merge(df_test, daily_avg,['item','store','dayofweek'],'daily_avg')\ndf_test=merge(df_test, monthly_avg,['item','store','month'],'monthly_avg')\n","d309a6e6":"x_train,x_test,y_train,y_test = train_test_split(df_train.drop('sales',axis=1),df_train.pop('sales'),random_state=123,test_size=0.2)\n","bd7e9602":"def run_lgb(x_train,y_train,x_test,y_test):\n    params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"mape\",\n        \"boosting_type\":\"gbdt\",\n        \"learning_rate\" : 0.1,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.6,\n        \"seed\": 2018,\n        \"num_leaves\":7,\n        \"max_depth\":6,\n    }\n    \n    lgtrain = lgb.Dataset(x_train, label=y_train)\n    lgval = lgb.Dataset(x_test, label=y_test)\n    evals_result = {}\n    model = lgb.train(params, lgtrain, 10000, \n                      valid_sets=[lgtrain, lgval], \n                      early_stopping_rounds=50, \n                      verbose_eval=100, \n                      evals_result=evals_result)\n    return model","23224e8e":"model = run_lgb(x_train,y_train,x_test,y_test)","f825970b":"y_pred = model.predict(df_test)","ee0a33a2":"submission = pd.read_csv('..\/input\/test.csv',usecols=['id'])\ny_pred = model.predict(df_test,num_iteration=model.best_iteration)\n\nsubmission['sales']= y_pred\n\nsubmission.to_csv('submission.csv',index=False)","23c95ae3":"df_test.columns","4ac1b8fb":"df_train.columns\n","6c47efe5":"x_test.describe()\n\n","222c0fdd":"def XGBmodel(x_train,x_test,y_train,y_test):\n    matrix_train = xgb.DMatrix(x_train,label=y_train)\n    matrix_test = xgb.DMatrix(x_test,label=y_test)\n    model=xgb.train(params={'objective':'reg:linear','eval_metric':'mape'}\n                    ,dtrain=matrix_train,num_boost_round=500, \n                    early_stopping_rounds=20,evals=[(matrix_test,'test')],)\n    return model\n\nmodel=XGBmodel(x_train,x_test,y_train,y_test)","3fc532c1":"df_test=df_test.drop(['id'],axis=1)"}}