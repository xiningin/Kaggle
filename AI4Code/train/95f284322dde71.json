{"cell_type":{"51588d7a":"code","3cdc8772":"code","aefcd68e":"code","700fddad":"code","0297b9b4":"code","b637b498":"code","2de0e8ae":"code","82572c9d":"code","ad066e42":"code","97d892c5":"code","f2284887":"code","c1e8439b":"code","6d928a2e":"code","117a5cc9":"code","9b73c09b":"code","4c861f96":"code","a03ade23":"code","0a33a2a5":"code","820a0c92":"markdown","a75c6fb4":"markdown","523f4a7c":"markdown","55931714":"markdown","e9f7c37b":"markdown"},"source":{"51588d7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3cdc8772":"X_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')","aefcd68e":"X_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","700fddad":"from sklearn.ensemble import RandomForestRegressor\n# from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer","0297b9b4":"df_train = X_full.select_dtypes(exclude='object').drop('SalePrice',axis=1)\ndf_test = X_test_full.select_dtypes(exclude='object')","b637b498":"myImputer = SimpleImputer(strategy='median')","2de0e8ae":"imp_train = pd.DataFrame(myImputer.fit_transform(df_train))","82572c9d":"imp_test = pd.DataFrame(myImputer.transform(df_test))","ad066e42":"imp_train.columns = df_train.columns","97d892c5":"imp_test.columns = df_test.columns","f2284887":"model = RandomForestRegressor(n_estimators=500,criterion='mse')","c1e8439b":"y =  X_full['SalePrice']","6d928a2e":"model.fit(imp_train,y)","117a5cc9":"pred = model.predict(imp_test)","9b73c09b":"output = pd.DataFrame({'Id':X_test_full['Id'],\n                      'SalePrice':pred})","4c861f96":"output","a03ade23":"output.to_csv('Submission.csv',index=False)","0a33a2a5":"pd.read_csv('Submission.csv')","820a0c92":"## Data","a75c6fb4":"## Prediction","523f4a7c":"## keep only numeric values","55931714":"## Model","e9f7c37b":"## Impute Using median"}}