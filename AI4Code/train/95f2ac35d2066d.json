{"cell_type":{"659b8cb9":"code","f0919959":"code","88f53657":"code","605f3388":"code","06287f4e":"code","0203a498":"code","8b52f748":"code","febe5c03":"code","dc2aee88":"code","b9964e0a":"code","04b4991c":"code","56da7acd":"code","64292ec4":"markdown","92d6c080":"markdown","60c83ac9":"markdown"},"source":{"659b8cb9":"import torch\nimport numpy as np\nimport pandas as pd\nfrom torch.autograd import Variable\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import LabelBinarizer, LabelEncoder\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix, classification_report","f0919959":"data = pd.read_csv('..\/input\/breast-cancer\/breast-cancer.csv')\ndata.head(10)\n\n# 'M' -> Maligant Tumor\n# 'B' -> Benign Tumor","88f53657":"cols = data.columns\nx_data = data[cols[2:-1]]\nprint(len(cols))\nprint(data.columns)\n\n# There are 33 features available for classifying the tumor as 'M' \/ 'B'","605f3388":"# Converting the labels to One-Hot-Representation\n\ny_data = data[cols[1]]\nle = LabelEncoder() \ny_data = np.array(le.fit_transform(y_data))\ny_data[:5], le.classes_\n\nprint(y_data.shape, x_data.values.shape)\n\n# Wrapping the x_data and y_data with Variable\n\nx_data = Variable(torch.from_numpy(x_data.values))\ny_data = Variable(torch.from_numpy(y_data))","06287f4e":"# Defining the model to be trained\n\nclass Model(torch.nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.l1 = torch.nn.Linear(30,16) # Input_size, hidden_size\n        self.l2 = torch.nn.Linear(16,4) \n        self.l3 = torch.nn.Linear(4,1) # Hidden_Size, Output_Size\n        \n        self.sigmoid = torch.nn.Sigmoid() #Loss function at the last layer\n        \n    def forward(self, x):\n        out1 = self.sigmoid(self.l1(x)) \n        out2 = self.sigmoid(self.l2(out1))\n        y_pred = self.sigmoid(self.l3(out2))\n        return y_pred\n    \nmodel = Model()","0203a498":"print(model)","8b52f748":"criterion = torch.nn.BCELoss(reduction='sum') # Defining the loss function Binary CrossEntropy\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001) # Defining the optimizer Adam\n\nfor epochs in range(5000): # Number of Epochs to be run\n    y_pred = model(x_data.float())\n    loss = criterion(y_pred, y_data.view(-1,1).float())\n    print('Epoch',epochs,'Loss:',loss.item(), '- Pred:', y_pred.data[0])\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n","febe5c03":"# Just doing a sample predictions\n\nmodel.double().forward(x_data.data[25]) > 0.5, y_data[25]\n\n# Both are True (Maligant Tumor)[Prediction is perfect]","dc2aee88":"# Just doing a sample predictions\n\nmodel.double().forward(x_data.data[55]) > 0.5, y_data[55]\n\n# Both are False (Benign Tumor)[Prediction is perfect]","b9964e0a":"a = pred.numpy()\nb = y_data.numpy()\npred.numpy().reshape(-1).shape, y_data.numpy().shape","04b4991c":"# Printing the confusion matrix\n\nc = confusion_matrix(a,b)\nsns.heatmap(c, annot=True, xticklabels=le.classes_, yticklabels=le.classes_);\n\n# By this matrix, it is found that there is '0' Misclassification from both the classes","56da7acd":"# Classification report \n\nprint(classification_report(a,b))\n\n# All the scores such as recall, precision & F1 score is giving 100%","64292ec4":"### Loading the breast Cancer Dataset","92d6c080":"### Loading the libraries","60c83ac9":"# Pytorch Implementation With Breast Cancer Dataset"}}