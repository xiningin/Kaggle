{"cell_type":{"e2072860":"code","50bee456":"code","ab13b413":"code","f0896ca1":"code","04e66e70":"code","7f1b13e6":"code","67c7249e":"code","eb10cf8e":"code","26d1f1c6":"code","b6e380dd":"code","ebd4d54a":"code","a02b7306":"code","2b3df2cf":"code","6ec8d325":"code","82965b4f":"code","5e650541":"code","2f2b47dd":"code","0e102618":"code","3c018aa8":"code","459ff5f4":"code","c75b7bbc":"code","f9c01440":"code","1278473f":"code","b3f5e721":"code","a14f1f69":"code","db9c8d1e":"code","fa292ae0":"code","567b357b":"code","84462493":"code","a3e8e59a":"code","e85bb711":"code","72e5e275":"code","6eb6d16f":"code","f5de24f3":"code","3e5b3e8f":"code","ebb34c48":"code","221432de":"code","25f87950":"code","733b5a8c":"code","3416ddda":"code","832a71e4":"code","ed0280ec":"code","31adc212":"code","49e338bf":"code","83806305":"code","80430fcc":"code","edba4ba6":"code","86a26ab6":"code","cc3bc052":"code","746defc9":"code","28d44b1e":"code","8b3c233e":"code","7940bf4b":"code","65762415":"code","1ca831e4":"code","babb8d54":"code","f67ddccc":"code","2a8d91b3":"code","91f20ca4":"code","9615304d":"code","b0c226bf":"code","a683a161":"code","c5e87ce8":"code","3402d72f":"code","eb39d41d":"code","aea8cad6":"code","c964d126":"code","8521ed21":"code","77292ac7":"code","d0cda3ab":"code","ebf5014e":"code","41fdbd72":"code","072dd2a8":"code","e1a74a86":"code","5beac482":"code","e6a3ffc7":"code","bd4a66e7":"code","8b75f8ac":"code","30d53287":"code","bd40b721":"code","e5fe31cd":"code","efb63e29":"code","00685b94":"code","be66a8fd":"code","c8577735":"code","4bba8a19":"code","bec557d1":"code","13838b59":"code","b2fdf746":"code","98d305f6":"code","348a24ae":"code","c79701c3":"code","5da68469":"code","bc2d24eb":"code","575dd046":"code","17efb214":"code","cc13efe3":"code","65821668":"code","f8088d3e":"code","0d93455e":"code","2e4076c6":"code","97843f7c":"code","0a9014ab":"code","7ab5a06e":"code","9db307d8":"code","6baeb0ca":"code","b93cb0da":"code","d3f1bd5a":"code","a199c013":"code","3fd47c54":"code","5bc65104":"code","a8a4a6a8":"markdown","9d81bf41":"markdown","007084b1":"markdown","abeb7a24":"markdown","65edcd11":"markdown","aab85df8":"markdown","3e8b46ca":"markdown","40635f90":"markdown","8217c233":"markdown","15ad520f":"markdown","4f9ace5c":"markdown","90c0502b":"markdown","615b1cf7":"markdown","46793c04":"markdown","bd43f84f":"markdown","463a604e":"markdown","b63ccd32":"markdown","ecd33a0d":"markdown","f0004dc2":"markdown","fc7bb3dc":"markdown","824f45de":"markdown","2c7b4ab3":"markdown","b8c8859d":"markdown","089b037d":"markdown","59a8e1c8":"markdown","c4d1741c":"markdown","983853e3":"markdown","d8ccd3ab":"markdown","d9cc7659":"markdown","ec6829c7":"markdown","e50fd8bd":"markdown","0c15f0cb":"markdown","a0be7c90":"markdown","7b4eeec3":"markdown","4e9619ee":"markdown","89f18cd1":"markdown","271abd7e":"markdown","3dc3a614":"markdown","209361a6":"markdown","9cbebfe5":"markdown","21b39c3c":"markdown","ab3713b3":"markdown","8097459d":"markdown","2328963f":"markdown","80b8814e":"markdown","9f8aef86":"markdown","2fc8e18a":"markdown","555c97b1":"markdown","a3eeef61":"markdown","d1460c82":"markdown","f4deb858":"markdown"},"source":{"e2072860":"# Reference: DATA\u0130 TEAM - https:\/\/www.dataiteam.com\/ - https:\/\/www.kaggle.com\/kanncaa1\n\n# Language Python 3 \n# Libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # visualization tool\nimport seaborn as sns # visualization tool\nimport os             # System \n\n# Add data is in the upper right. Select \" Pokemon- Weedle's Cave \" dataset.\n## Sa\u011f \u00fcstte Add data b\u00f6l\u00fcm\u00fcnden \" Pokemon- Weedle's Cave \" veri setini y\u00fckl\u00fcyoruz.\n\n\n# This shows you that what datas there are in your directory,\n## Klas\u00f6r\u00fcm\u00fczde hangi veriset'leri y\u00fckl\u00fc oldu\u011funu g\u00f6r\u00fcnt\u00fcler.\nfor dirname, _, filenames in os.walk(\"\/kaggle\/input\"):  \n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","50bee456":"# Read data, way is like this \/kaggle\/input\/dataset name\/data name\ndata = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()","ab13b413":"# Find missing and wrong data\ndata.info()","f0896ca1":"data.corr()","04e66e70":"# Correlation map\n# figsize x axis = 16 y axis = 16, data is data.corr(), annot is numbers in small square, linewidths is space between squares, fmt is length of decimal\nf,ax = plt.subplots(figsize = (16,16))\nsns.heatmap(data.corr(), annot = True, linewidths = .5, fmt= '.1g' )","7f1b13e6":"data.head(10)","67c7249e":"data.columns","eb10cf8e":"# Create dictionary, find keys and values.\ndictionary = {'Turkey':'Ankara', 'Japan':'Tokyo', 'Canada':'Ottowa'}\nprint(dictionary.keys())\nprint(dictionary.values())","26d1f1c6":"# Update, Add, Remove, Check and Remove All\ndictionary['Japan'] = 'New-Tokyo'            # Update\nprint(dictionary)\ndictionary['Ukraine'] = 'Kiev'               # Add\nprint(dictionary)\ndel dictionary['Turkey']                     # Remove\nprint(dictionary)\nprint('Spain' in dictionary)                 # Check\ndictionary.clear()                          # Remove All\nprint(dictionary)\n\n# \u0130f you run it again that you will have an error because dictionary is deleted. So Run All from Above","b6e380dd":"# \u0130f i is bigger than 7, quit from loop.\ni = 0\nwhile i <=7 :\n    print('i :', i)\n    i += 1\nprint(i,'is bigger than 7 so Loop done ')","ebd4d54a":"# Write values of list\nList = ['A','B','C','D','E','F','G']\nfor i in List:\n    print('i is :', i)\n    \n# A's index is 0, B's index is 1, ..., G's index is 6\nfor index, value in enumerate(List):\n    print(index, ':', value)\n\n# Write key and values of dictionary\ndictionary = {'Turkey':'Ankara', 'Japan':'Tokyo', 'Canada':'Ottowa'}\nfor key, value in dictionary.items():\n    print(key, \":\", value)\n","a02b7306":"# Read CSV (Comma Seperated Values)\ndata = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')","2b3df2cf":"# Find Type of Data\nseries = data['Attack']\nprint(type(series))\ndf = data[['Defense']]\nprint(type(df))","6ec8d325":"# Find Pikachu values\nfor i, j in enumerate(data.Name): # i is index, j is values of Name column\n    if j == 'Pikachu':\n        print(i)                 # Found that Pikachu index is 30\n# Get values of index 30\ndata.loc[30]                     # That gives us Pikachu values Pika Pika","82965b4f":"#1# 3 pokemon has more than 200 defense\nx = data['Defense']>200   \ndata[x]","5e650541":"#2# 2 Pokemon has Defense more than 200 and attack more than 100\ndata[(data['Defense']>200) & (data['Attack']>100)]","2f2b47dd":"#3# Sum of Attack Column items\ndata['Attack'].count()","0e102618":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Speed.plot(kind = 'line', color = 'g', label = 'Speed', linewidth = 1, alpha = .5, grid = True, linestyle = ':')\ndata.Defense.plot( color = 'r', label = 'Defense', linewidth = 1, alpha = .5, grid = True, linestyle = '-.' )\nplt.legend(loc = 'upper right')                                                                                             # legend = puts label into plot\nplt.xlabel('x axis')                                                                                                        # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot for Speed & Defense')                                                                                  # title = title of plot\nplt.show()","3c018aa8":"# Scatter Plot\n# x = attack, y = defense\ndata.plot(kind = 'scatter', x = 'Attack', y = 'Defense', alpha = .5, color = 'red')\nplt.xlabel('Attack')\nplt.ylabel('Defense')\nplt.title('Scatter Plot Attack & Defens')","459ff5f4":"# Histogram\ndata.Speed.plot(kind = 'hist', bins = 50, figsize = (8,8))\nplt.show()","c75b7bbc":"# clf() = cleans it up again you can start a fresh\ndata.Speed.plot(kind = 'hist', bins = 50)\nplt.clf()","f9c01440":"# Boxplot \ndata.plot(kind = 'box', figsize = (22,8))    # Good way to investigate Standard deviation, Median, Mean ","1278473f":"def tuple_ex():\n    t = (1,2,3) # t is a tuple\n    return t\na,b,c = tuple_ex()\nprint(a,b,c)","b3f5e721":"x = 2               # global x variable\ndef f():\n    x = 3         # local x variable\n    return x\nprint(x)        # x = 2 global scope\nprint(f())     # x = 3 local scope","a14f1f69":"# \u0130f there is no local scope x\nx = 5\ndef f():\n    y = 2*x\n    return y\nprint(f())\n# Firstly local scope searched and then global searched.\n# \u0130f there are both, python choose local.","db9c8d1e":"def square():\n    def add():\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","fa292ae0":"# Default\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))              # a = 5 b = default (1) c = default (2)\nprint(f(5,4,3))          # a = 5 b = 4 c = 3","567b357b":"# Flexible *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# Flexible arguments **kwargs that is dictionary\ndef f (**kwargs):\n    for key, value in kwargs.items():\n        print(key, \"\", value)\nf(country='spain', capital = 'madrid', population = 123456)","84462493":"# Lambda Function\nsquare = lambda x: x**2   # we have x, result is x ** 2\nprint(square(3))\ntot = lambda x,y,z:x+y+z  # we have x,y,z result is x+y+z\nprint(tot(1,2,3))","a3e8e59a":"num_list = [1,2,3]\ny = map(lambda x:x**2,num_list)\nprint(list(y))","e85bb711":"# Iteration Example\ncountry = \"canada\"\nit = iter(country)\nprint(next(it))       # Next iteration\nprint(*it)            # Remain iteration","72e5e275":"# zip():zip lists\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nz_list = list(z)           # Should make it list\nprint(z_list)         ","6eb6d16f":"# unzip\nun_zip = zip(*z_list)\nun_list1, un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list1))","f5de24f3":"num1 = [1,2,3]\nnum2 = [i+1 for i in num1]\nprint(num2)","3e5b3e8f":"num1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i<7 else i+5 for i in num1]\nprint(num2)","ebb34c48":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)   # threshold founds 68.2775\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]]  # by loc you can choose what you need, will learn more deep\n","221432de":"data = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()                 # shows first 5 rows","25f87950":"# tail shows the last 5 rows\ndata.tail()","733b5a8c":"# Shows columns name\ndata.columns","3416ddda":"# Shape gives number of rows and columns in a tuble\ndata.shape","832a71e4":"# Info gives data type, number of sample or row, number of feature or feature types and memory usage\ndata.info()","ed0280ec":"# For example lets look frequency of pokemom types\nprint(data['Type 1'].value_counts(dropna = False))    # if there are nan values that also be counted, Type 1 is a column name\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","31adc212":"# For example max HP is 255 or min defense is 5\ndata.describe() #ignore null entries","49e338bf":"# For example: compare attack of pokemons that are legendary  or not\n# Black line at top & bottom are max & min\n# Blue line at top & bottom is 75% & 25%\n# Green line is median (50%)\n# There are no outliers\ndata.boxplot(column = 'Attack', by = 'Legendary')","83806305":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    # I only take 5 rows into new data\ndata_new","80430fcc":"# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\n# We can see columns and items by this method.\nmelted = pd.melt(frame = data_new, id_vars = 'Name', value_vars = ['Attack','Defense'])\nmelted","edba4ba6":"melted.pivot(index = 'Name', columns = 'variable', values = 'value')","86a26ab6":"# Firstly lets create 2 dataframe\ndata1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2], axis = 0, ignore_index = True) # axis 0: adds df in rows,\nconc_data_row","cc3bc052":"data1 = data['Attack'].head()\ndata2 = data['Defense'].head()\nconc_data_col = pd.concat([data1,data2],axis = 1) # axis 1: adds df in cols,\nconc_data_col","746defc9":"data.dtypes","28d44b1e":"# Lets Convert Object(str) to categorical and int to float\ndata['Type 1'] = data['Type 1'].astype('category')\ndata['Speed'] = data['Speed'].astype('float')\ndata.dtypes","8b3c233e":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object\ndata.info()","7940bf4b":"# Lets check Type 2\ndata['Type 2'].value_counts(dropna = False)\n# As you can see, there are 386 NAN value","65762415":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Type 2\"].dropna(inplace = True)  # inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n# So does it work ?\n","1ca831e4":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true","babb8d54":"# In order to run all code, we need to make this line comment\n# assert 1==2 # return error because it is false","f67ddccc":"data[\"Type 2\"].fillna('empty',inplace = True)\n","2a8d91b3":"assert  data['Type 2'].notnull().all() # returns nothing because we do not have nan values","91f20ca4":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\n# assert data.Speed.dtypes == np.int","9615304d":"# Dataframes from dictionary\ncountry = ['Spain', 'France']             # country is value of dictionary\npopulation = ['11', '12']                 # population is value of dictionary\nlist_label = ['country', 'population']   # list_label is key of dictionary\nlist_col = [country, population]         # values put in a list\nzipped = list(zip(list_label, list_col)) # this is obligation before convert to dictionary\ndata_dict = dict(zipped)                 # converted to dictionary\ndf = pd.DataFrame(data_dict)             \ndf\n","b0c226bf":"# Add New Columns\ndf['capital'] = ['madrid', 'paris']\ndf","a683a161":"# Broadcasting\ndf['income'] = 0 \ndf","c5e87ce8":"# Plotting all data\ndata1 = data.loc[:,['Attack','Defense','Speed']]\ndata1.plot()","3402d72f":"# Subplots, see all in different frame\ndata1.plot(subplots = True)\nplt.show()","eb39d41d":"# Scatter plot\ndata1.plot(kind = 'scatter', x = 'Attack', y = 'Defense')\nplt.show()","aea8cad6":"# hist plot\ndata1.plot(kind= 'hist', y = 'Defense', bins =50, range = (0,250))","c964d126":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),ax = axes[0])                                    \ndata1.plot(kind = \"hist\",y = \"Defense\",bins = 50,range= (0,250),ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt\n","8521ed21":"data.describe()","77292ac7":"# trim_mean\nfrom scipy.stats import trim_mean   # we should use this library\ntrim_mean = trim_mean(data['Attack'],0.1)  # Sorted Attack values, %10 first and last %10 values removed. Remove outliers\ntrim_mean            \n# data['Attack'].mean()  is  79.00125","d0cda3ab":"# IQR and rsmad\nfrom statsmodels import robust\nstd = data['Attack'].std()\nIQR = data['Attack'].quantile(0.75) - data['Attack'].quantile(0.25)\nrsmad = robust.scale.mad(data['Attack'])\nprint('IQR :', IQR)\nprint('RSMAD :', rsmad)","ebf5014e":"time_list = ['1992-03-08', '1992-04-12']\nprint(type(time_list[1]))   # datetime is string however we want to make it datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","41fdbd72":"# close warning\nimport warnings\nwarnings.filterwarnings('ignore')\n# Lets add a time list to Pokemon data\ndata2 = data.head()\ndate_list = ['1992-01-10', '1992-02-10','1992-03-10','1993-03-15','1993-03-16']\ndatetime_object = pd.to_datetime(date_list)\ndata2['date'] = datetime_object\n# Lets set date as index\ndata2 = data2.set_index('date')\ndata2","072dd2a8":"print(data2.loc['1993-03-16'])\nprint(data2.loc['1992-03-10':'1993-03-16'])","e1a74a86":"# We will use data2 that we create at previous part\ndata2.resample('A').mean() # A is year","5beac482":"# Lets resample with month\ndata2.resample('M').mean() # M is month\n# There are lots of nan because data2 doesnt include all months","e6a3ffc7":"# In real life(data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolate from first value\ndata2.resample(\"M\").first().interpolate(\"ffill\")","bd4a66e7":"data2.resample('M').mean().interpolate('linear')","8b75f8ac":"# read data\ndata = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata = data.set_index('#')\ndata.head()","30d53287":"# Indexing using square brackets\ndata['HP'][1]    # show first value of HP column values","bd40b721":"# Using column attribute and row label\ndata.HP[1]      # this is also shows same result","e5fe31cd":"# Using only loc\ndata.loc[1] # this shows first row","efb63e29":"# using loc accessor\ndata.loc[1,['HP']] # this shows first row's Hp value","00685b94":"# Selecting only some columns\ndata[['HP', 'Attack']]  ","be66a8fd":"# Difference between selecting columns: series and dataframes\nprint(type(data['HP']))      # Series\nprint(type(data[['HP']]))    # DataFrame","c8577735":"# Slicing and indexing series\ndata.loc[1:10,\"HP\":\"Defense\"] # 10 and defense are inclusive","4bba8a19":"# Reverse slicing\ndata.loc[10:1:-1,\"HP\":\"Defense\"]","bec557d1":"# From something to end\ndata.loc[1:10,\"Speed\":]","13838b59":"# Creating boolean series\nboolean = data.HP > 200\ndata[boolean]","b2fdf746":"# Combining filters\nfirst_filter = data.HP > 150\nsecond_filter = data.Speed > 35\ndata[first_filter & second_filter]","98d305f6":"# Filtering column based others\ndata.HP[data.Speed < 15]","348a24ae":"# Plain python functions\ndef div(n):\n    return n\/2\ndata.HP.apply(div)","c79701c3":"# Or we can use lambda function\ndata.HP.apply(lambda n : n\/2)","5da68469":"# Defining column using other columns\ndata[\"total_power\"] = data.Attack + data.Defense\ndata.head()","bc2d24eb":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","575dd046":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index\ndata3 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just an example\ndata3.index = range(100,900,1)\ndata3.head()","17efb214":"# We can make one of the column as index. I actually did it at the beggining of manipulating data frames with pandas section\n# It was like this\n# data = data.set_index(\"#\")\n# data.index = data['#']","cc13efe3":"# lets read data frame one more time to start from beggining\ndata = pd.read_csv('\/kaggle\/input\/pokemon-challenge\/pokemon.csv')\ndata.head()\n# As you can see there is index. However we want to ser one or more column to be index","65821668":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Type 1\", \"Type 2\"])\ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # how to use indexes","f8088d3e":"import pandas as pd\ndic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"], \"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","0d93455e":"# pivoting\ndf.pivot(index=\"treatment\", columns = \"gender\", values = \"response\")","2e4076c6":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","97843f7c":"# level determines indexes\ndf1.unstack(level = 0)","0a9014ab":"df1.unstack(level = 1)","7ab5a06e":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","9db307d8":"df","6baeb0ca":"# df.pivot(index = \"treatment\", columns = \"gender\", values = \"response\")\npd.melt(df, id_vars = \"treatment\", value_vars = [\"age\",\"response\"])","b93cb0da":"# We will use df\ndf","d3f1bd5a":"# According to treatment take means of other features\ndf.groupby(\"treatment\").mean()  # mean is aggregation \/ reduction method\n# there are other methods like sum, std, max or min","a199c013":"# We can only choose one of the feature\ndf.groupby(\"treatment\").age.max()","3fd47c54":"# Or we can choose multiple features\ndf.groupby(\"treatment\")[[\"age\",\"response\"]].min()","5bc65104":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data.\n# Because cetegorical data uses less memory, speed up operations like groupby\n# df[\"gender\"] = df[\"gender\"].astype(\"category\")\n# df[\"treatment\"] = df[\"treatment\"].astype(\"category\")\n# df.info()","a8a4a6a8":"**PIVOTING DATA**\n\nReverse of Melting","9d81bf41":"# <font color =\"blue\">2. Python DataScince Tool Box <font\/>\n","007084b1":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range: min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","abeb7a24":"<b> <font size=\"+2\">PANDAS<font\/>\n* Pandas is very powerful for tables.\n\n   ","65edcd11":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy\n","aab85df8":"<b> <font size=\"+2\">MATPLOTLIB<font\/>\n\nThis is a library of Python that help us to plot data. Line, Scatter, Histogram and Boxplot are some basic plots.\n* Line plot is better when x axis is time.\n* Scatter is better when there is colleration between two variables\n* Histogram is better when we need to see distribution of numerical data\n* Boxplot is better when we need to see distribution of numerical data\n* Customization: Colors, Labels, Thickness of Line, Opacity, Grid, Figsize, ticks of axis and Linestyle    ","3e8b46ca":"**LIST COMPREHENS\u0130ON**\n\n*  One of the most important topic of Kernel\n\n* We can make it one line coe that is list comprehension\n","40635f90":"# <font color =\"blue\">1. GENERAL PYTHON <font\/>\n","8217c233":"> Nested Function\n* \u0130t is located inside of Function","15ad520f":"# <font color =\"blue\">3. CLEANING DATA <font\/>","4f9ace5c":"**ITERATORS**\n\n* You can use list, strings and dictionaries\n* next() shows you that next item\n* (*) shows you that remain items","90c0502b":"**RESAMPL\u0130NG PANDAS T\u0130ME SER\u0130ES**\n\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency lik 'M' = month or 'A'= year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: \u015fncrease date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like 'linear', 'time, or 'index'\n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n    ","615b1cf7":"**STACKING and UNSTACKING DATAFRAME**\n\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","46793c04":"**User Defined Function**\n* > Tuple : sequence of immutable python objects.\n> cant modify values\n> tuple uses paranthesis like tuble = (1,2,3)\n> unpack tuple into several variables like a,b,c = tuple","bd43f84f":"> FLEX\u0130BLE *ARGS","463a604e":"**HIERARCHICAL INDEXING**\n\n* Setting indexing","b63ccd32":"**MISSING DATA and TESTING WITH ASSERT**\n\nWhat we can do for missing data:\n\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n    \n    Asser statement: check that you can turn on or turn off when you are done with yout testing  of the program","ecd33a0d":"> ZIP","f0004dc2":"# Load Data","fc7bb3dc":"# CONCLUSION\nThank you for your votes and comments\n<br> **MACHINE LEARNING ** https:\/\/www.kaggle.com\/kanncaa1\/machine-learning-tutorial-for-beginners\/\n<br> **DEEP LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners\n<br> **STATISTICAL LEARNING** https:\/\/www.kaggle.com\/kanncaa1\/statistical-learning-tutorial-for-beginners\n<br>**If you have any question or suggest, I will be happy to hear it.**","824f45de":"In this part, you learn:\n* Diagnose data for cleaning\n* Exploratory data analysis\n* Visual exploratory data analysis\n* Tidy data\n* Pivoting data\n* Concatenating data\n* Data types\n* Missing data and testing with assert","2c7b4ab3":"**CONCATENATING DATA**\n\nWe can concatenate two dataframe","b8c8859d":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","089b037d":"> MAP","59a8e1c8":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","c4d1741c":"**TRANSFORMING DATA**\n\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other coolumns","983853e3":"**STATISTICAL EXPLORATORY DATA ANALYSIS**\n\nI already explained it at previous parts. However lets look at one more times to learn better.\n\n* count: number of entries\n* mean:  average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry\n* trim_mean: trimmered mean\n* IQR: %75 - %25 ( 3. quantile - 1. quantile ) ~= median\n* rsmad: Robust Scale Median Absolute Deviation\n \n","d8ccd3ab":"**VISUAL EXPLORATORY DATA ANALYSIS**\n\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","d9cc7659":"**MELTING DATA FRAMES**\n\n* Reverse of pivoting","ec6829c7":"<b> <font size=\"+2\">DICTIONARY<font\/>\n\n*     Dictionary is easy and fast\n*     Has two parameters key and value as dict = {'England' = 'London'}\n    \n Lets Use Some Properties","e50fd8bd":"> LAMBDA","0c15f0cb":"Up to Now, We have learned\n* User defined function\n* Scope\n* Default and Flexible Arguments\n* Lambda Function\n* Anonymous Function\n* Iterators\n* List Comprehension","a0be7c90":"> DEFAULT AND FLEX\u0130BLE ARGUMENTS\n* Default Example: def f(a,b=1):\n* Flexible Example: def f(*args): and def f(**kwargs):","7b4eeec3":"**MANIPULATING DATA FRAMES WITH PANDAS**\n\n**INDEXING DATA FRAMES**\n\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","4e9619ee":"<b> <font size=\"+2\">WHILE AND FOR LOOPS<font\/>","89f18cd1":"> UNZIP","271abd7e":"**Filtering**","3dc3a614":"**EXPLORATORY DATA ANALYSIS**\n\nvalue_counts(): Frequency counts\noutliers: the value that is considerably higher or lower from rest of the data\n\n* Q1 is %25 and Q3 is %75\n* IQR is Q3 - Q1, We will use describe() method includes:\n* count: number of entries\n* mean: avarage of entries\n* std: standard deviation\n* min: minimum entry\n* %25, %50, %75 first, second and third quantile\n* max: maximum entry\n* median: middle item of sorted sequence\n* trim_mean: 10% is clipped from the beginning and end of the data then found mean.\n* avarage: Weighted mean\n* wquantiles.median: weighted median\n* robust.scale.mad: median Absolute Deviation\n\nWhat is quantile?\n\n* 1,4,5,6,8,9,11,12,13,14,15,16,17\n* The median is middle item that is 11.\n* The lower quartile is between firt item and median ( 1,4,5,6,8,9,11) median of this is 6\n* The upper quartile, median and biggest item (11,12,13,14,15,16,17) median of this is 14","209361a6":"> DEFAULT","9cbebfe5":"> Scope: \n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len","21b39c3c":"**INDEXING PANDAS TIME SERIES**\n\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy--mm--dd hh:mm:ss) format","ab3713b3":"**CATEGORICALS AND GROUPBY**\n","8097459d":"**T\u0130DY DATA**\n\nWe tidy data with melt(). Describing melt is confusing. Therefore lets make example to understand it.","2328963f":"**ANONYMOUS FUNCT\u0130ON**\n\nSmiliar to lambda, it can take more than one arguments\n* map(func,seq): applies a function to all the items in a list","80b8814e":"**INDEX OBJECTS AND LABELED DATA**\n\nindex:squence of label","9f8aef86":"**PIVOTING DATAFRAMES**\n\n* pivoting: reshape tool","2fc8e18a":"**DIAGNOSE DATA FOR CLEANING**\n\n* Control the type of each column\n* Control the column name inconsistency like upper-lower or space between words\n* Control the missing data and manipulate or remove\n* Control the language\n\nWe ll use head, tail, columns, shaper and info methods to diagnose data","555c97b1":"**FILTERING DATA FRAMES**\n\nCreating boolean series to filtering columns","a3eeef61":"**SLICING DATA FRAME**\n\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","d1460c82":"**DATA TYPES**\n\nThere ara 5 basic data types: String(Object), Integer, Float, Categorical and Boolean\nWe can make conversion data types eachother\n\nWhy is Category important:\n* Smaller in Memory\n* Can be utilized for analysis especially for sklearn","f4deb858":"> ITERATORS"}}