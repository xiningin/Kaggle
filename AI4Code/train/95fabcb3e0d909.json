{"cell_type":{"f26c25a8":"code","c336fd08":"code","c646779d":"code","f91866fe":"code","f9c927e9":"code","479e13c4":"code","e35ee7e6":"code","6c87226a":"code","19b51b2c":"code","744554a7":"code","50826474":"code","bb75ef48":"code","2d10cc53":"code","9bf40071":"code","7f2bf6bb":"code","98a5b364":"code","d0581b2a":"code","f0b37d05":"code","14aac17f":"code","4c5ccd21":"code","bdff5317":"code","be2f4197":"code","10d18dec":"code","cff6cde7":"code","62fda799":"code","b2215f4e":"code","36b81bb3":"code","a3bbb4e1":"code","f9c5722f":"code","ddb62cb6":"code","770e2fa7":"code","b4a5bcba":"code","43937b1b":"code","2e6074f7":"code","504799e3":"code","96ed55db":"code","a7a63f68":"code","2edbce16":"code","2bce9252":"code","06a8b847":"code","a2629447":"code","267df672":"code","0becea42":"code","c3372475":"code","9f744ecf":"code","7f335854":"code","fd215ec0":"code","d9c34562":"code","b0387dad":"code","6d5449c7":"code","87684d06":"code","c9c97f06":"code","c7424071":"code","02a82c5e":"markdown"},"source":{"f26c25a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c336fd08":"data=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndata.head()","c646779d":"df=data.copy()","f91866fe":"df.info()","f9c927e9":"df.isnull().sum()","479e13c4":"df['cp']=df['cp'].astype('object').replace({0: 'typical angina Value',\n                                                  1:'atypical angina Value',\n                                                  2: 'non-anginal pain Value',\n                                                  3: 'asymptomatic trtbps' })","e35ee7e6":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","6c87226a":"for i in df.drop('cp',axis=1).columns:\n    plt.figure(figsize=(10,3))\n    plt.subplot(1,2,1)\n    sns.boxplot(df[i])\n    plt.subplot(1,2,2)\n    sns.distplot(df[i])\n    plt.show()","19b51b2c":"plt.figure(figsize=(10,8))\nsns.countplot(df['age'].sort_values())","744554a7":"df=pd.get_dummies(df)\ndf.head()","50826474":"x=df.drop('output',axis=1)\ny=df['output']","bb75ef48":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","2d10cc53":"x_scaled=StandardScaler().fit_transform(x)\nX=pd.DataFrame(x_scaled,columns=x.columns)\nX.head()","9bf40071":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\nprint('x_train shape:',x_train.shape)\nprint('x_test shape:',x_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","7f2bf6bb":"import statsmodels.api as sm","98a5b364":"log_model=sm.Logit(y_train,sm.add_constant(x_train)).fit()\nprint(log_model.summary())","d0581b2a":"log_model.pvalues>0.5","f0b37d05":"y_pred_prob=log_model.predict(sm.add_constant(x_test))\ny_pred=[0 if x<0.5 else 1 for x in y_pred_prob]","14aac17f":"from sklearn.metrics import accuracy_score","4c5ccd21":"print('Accuracy of the model is:',round(accuracy_score(y_test,y_pred)*100,2),'.')","bdff5317":"# build model after of remove the pval test.\nx=df.drop(['output','age','fbs'],axis=1)\ny=df['output']","be2f4197":"from sklearn.preprocessing import MinMaxScaler","10d18dec":"x_scaled=MinMaxScaler().fit_transform(x)\nX=pd.DataFrame(x_scaled,columns=x.columns)\nX.head()","cff6cde7":"x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2)\nprint('x_train shape:',x_train.shape)\nprint('x_test shape:',x_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","62fda799":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report","b2215f4e":"dt_model=DecisionTreeClassifier(criterion='gini',random_state=10).fit(x_train,y_train)","36b81bb3":"plt.figure(figsize=(15,10))\ntree.plot_tree(dt_model,class_names=['0','1'],filled=True)\nplt.show()","a3bbb4e1":"param_grid=[{'criterion':['gini','entropy'],'max_depth':range(1,30)}]","f9c5722f":"grid_model=GridSearchCV(estimator=DecisionTreeClassifier(),param_grid=param_grid,cv=3).fit(x_train,y_train)\ngrid_model.best_params_","ddb62cb6":"dt_model=DecisionTreeClassifier(criterion=grid_model.best_params_.get('criterion'),\n                               max_depth=grid_model.best_params_.get('max_depth')).fit(x_train,y_train)\ny_pred=dt_model.predict(x_test)","770e2fa7":"print(classification_report(y_test,y_pred))","b4a5bcba":"cm=confusion_matrix(y_test,y_pred)\nconf_metrix=pd.DataFrame(cm,columns=['pred 1','pred 0'],index=['act 1','act 0'])\nsns.heatmap(conf_metrix,annot=True)\nplt.show()","43937b1b":"frp,trp,thes=roc_curve(y_test,dt_model.predict_proba(x_test)[:,1])\nplt.figure(figsize=(15,8))\nplt.plot(frp,trp)\nplt.plot([0,1],[0,1],'r--')\nplt.text(0.3,0.8,round(accuracy_score(y_test,y_pred)*100,4))\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.grid()\nplt.show()","2e6074f7":"#KNN model","504799e3":"from sklearn.neighbors import KNeighborsClassifier","96ed55db":"knn_model=KNeighborsClassifier(n_neighbors=5,metric='euclidean').fit(x_train,y_train)","a7a63f68":"y_pred=knn_model.predict(x_test)","2edbce16":"print(classification_report(y_test,y_pred))","2bce9252":"#tuned parameter\npram_grid=[{'n_neighbors':range(1,15),'metric':['euclidean','minkowski','Hamming']}]\ngrid_model=GridSearchCV(estimator=KNeighborsClassifier(),param_grid=pram_grid,cv=5,scoring='r2').fit(x_train,y_train)\ngrid_model.best_params_\n","06a8b847":"knn_model=KNeighborsClassifier(n_neighbors=grid_model.best_params_.get('n_neighbors'),\n                               metric=grid_model.best_params_.get('metric')).fit(x_train,y_train)","a2629447":"y_pred=knn_model.predict(x_test)","267df672":"print(classification_report(y_test,y_pred))","0becea42":"cm=confusion_matrix(y_test,y_pred)\nconf_metrix=pd.DataFrame(cm,columns=['pred 1','pred 0'],index=['act 1','act 0'])\nsns.heatmap(conf_metrix,annot=True)\nplt.show()","c3372475":"frp,trp,thes=roc_curve(y_test,knn_model.predict_proba(x_test)[:,1])\nplt.figure(figsize=(15,8))\nplt.plot(frp,trp)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.grid()\nplt.show()","9f744ecf":"# Randomforest classification:","7f335854":"from sklearn.ensemble import RandomForestClassifier","fd215ec0":"rf_model=RandomForestClassifier(n_estimators=100,criterion='gini',random_state=10).fit(x_train,y_train)\ny_pred=rf_model.predict(x_test)","d9c34562":"cm=confusion_matrix(y_test,y_pred)\nconf_matrix=pd.DataFrame(cm,columns=['pred 0','pred 1'],index=['act 1','act 0'])\nsns.heatmap(conf_matrix,annot=True)","b0387dad":"print(classification_report(y_test,y_pred))","6d5449c7":"frp,trp,thes=roc_curve(y_test,rf_model.predict_proba(x_test)[:,1])\nplt.figure(figsize=(15,8))\nplt.plot(frp,trp)\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.grid()\nplt.show()","87684d06":"rf_model.feature_importances_","c9c97f06":"best=pd.DataFrame({'columns':x_train.columns,\n                   'best feature':rf_model.feature_importances_}).sort_values(by='best feature',ascending=False).reset_index(drop=True)\nbest","c7424071":"plt.figure(figsize=(15,8))\nsns.barplot(best['columns'],best['best feature'])\nplt.xticks(rotation=90)\nplt.show()","02a82c5e":"age and fbs have to remove."}}