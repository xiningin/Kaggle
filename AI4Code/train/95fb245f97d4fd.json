{"cell_type":{"b5c2201e":"code","62b0d632":"code","40bc4ea7":"code","a7312898":"code","378c0d08":"code","a56797ec":"code","03381581":"code","a162a597":"code","5db039b1":"code","25513e7f":"code","bc8cc72d":"code","b0ac3981":"code","74424931":"code","9699f631":"code","3aa76e66":"code","3f31d020":"markdown"},"source":{"b5c2201e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns # visualization\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom eli5 import show_weights\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBRegressor\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport nltk\nimport string\nfrom wordcloud import WordCloud, STOPWORDS\nimport re\nfrom nltk.tokenize import RegexpTokenizer \nfrom collections import Counter\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import datasets\nfrom IPython.display import Image  \nfrom sklearn import tree","62b0d632":"df = pd.read_csv('..\/input\/austin-bike\/austin_bikeshare_trips.csv')","40bc4ea7":"df.head()","a7312898":"df.dtypes","378c0d08":"df['yearC'] = df['year'].astype('category')\ndf['monthC'] = df['month'].astype('category')\ndf['trip_idC'] = df['trip_id'].astype('category')\n\ndf['year_code'] = df['yearC'].cat.codes\ndf['month_code'] = df['monthC'].cat.codes\ndf['trip_code'] = df['trip_idC'].cat.codes","a56797ec":"df.dtypes","03381581":"x = 0\nDate=[]\nwhile x<len(df):\n    Date.append(df.start_time[x][8:10])\n    x = x+1","a162a597":"df['Date'] = Date\ndf","5db039b1":"df['DateC'] = df['Date'].astype('category')\n\ndf['date_code'] = df['DateC'].cat.codes","25513e7f":"y = df.date_code\nfeatures = ['year_code','month_code','trip_code']\nx = df[features]\ntrain_x, val_x, train_y, val_y = train_test_split(x, y, random_state = 0)\nbasic_model = DecisionTreeRegressor()\nbasic_model.fit(train_x, train_y)\nval_predictions = basic_model.predict(val_x)\nprint(\"Printing MAE for Basic Decision Tree Regressor:\", mean_absolute_error(val_y, val_predictions))","bc8cc72d":"df.dtypes","b0ac3981":"my_model = XGBRegressor()\nmy_model.fit(train_x, train_y)","74424931":"predictions = my_model.predict(val_x)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, val_y)))","9699f631":"my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(train_x, train_y, \n             early_stopping_rounds=5, \n             eval_set=[(val_x, val_y)], \n             verbose=False)","3aa76e66":"predictionsXBGR = my_model.predict(val_x)\nprint(\"Mean Absolute Error using XGBR: \" + str(mean_absolute_error(predictionsXBGR, val_y)))","3f31d020":"# Model Visualization"}}