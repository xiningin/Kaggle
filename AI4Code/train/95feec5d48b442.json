{"cell_type":{"753d55af":"code","f2de9d0e":"code","5ef9e0ed":"code","5b5eafb0":"code","408e47bf":"code","892fd850":"code","a19e8df3":"code","869bb97c":"code","f54008d3":"code","5b6497fe":"code","9b030cbe":"code","74c23803":"code","2e24f7be":"code","b55df4d1":"code","611de6e1":"code","58095e86":"code","a008c464":"code","b87a29f8":"code","1837bfd9":"code","440e79c3":"code","92fa7a03":"code","d4b54cec":"code","7d050f16":"code","dd96fa97":"code","c5befb69":"code","a0be1fc4":"code","162cf353":"code","b9f0e129":"code","695dd756":"markdown","bad2ebc4":"markdown","a293d7ac":"markdown","537bddb8":"markdown","d7fb9ee2":"markdown","bdc0a1c2":"markdown","cd749527":"markdown","445aafb5":"markdown","2b590451":"markdown","fbac3680":"markdown","cac7a2c1":"markdown","3e8eb616":"markdown","dec55dc7":"markdown","8df5a1c9":"markdown","0ef3e188":"markdown","c2b66d44":"markdown","7fdffbe4":"markdown","0d84651d":"markdown","f1d58a37":"markdown","761eb6ae":"markdown"},"source":{"753d55af":"#common\nimport numpy as np \nimport pandas as pd \nimport os\nimport re \nimport warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n\n#visualisation\nimport seaborn as sns\nsns.set_style('whitegrid')\n#\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport matplotlib.patches as mpatches\nfrom matplotlib.colors import ListedColormap\n#\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n#ml\nfrom sklearn.metrics import SCORERS\nfrom sklearn.metrics import mean_squared_error, accuracy_score, f1_score, recall_score, precision_score, r2_score\nfrom sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix, classification_report, precision_recall_curve\nfrom sklearn.metrics import plot_confusion_matrix, mean_absolute_error, make_scorer\nfrom sklearn.model_selection import train_test_split, cross_validate, cross_val_score, GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV, KFold\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OrdinalEncoder, LabelEncoder, Binarizer, OneHotEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom catboost import CatBoostClassifier, Pool, cv","f2de9d0e":"shrooms = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')","5ef9e0ed":"shrooms.info()","5b5eafb0":"shrooms.head().T","408e47bf":"balance = shrooms['class'].value_counts().reset_index()\n\nbalance['index'].replace('e', 'edible', inplace=True)\nbalance['index'].replace('p', 'poisson', inplace=True)\n\nfig = px.pie(balance,values=\"class\",names=\"index\",\n             color_discrete_map={'poison':'firebrick',\n                                 'edible':'cornflowerblue'})\n\nfig.update_traces(textposition=\"inside\", textinfo=\"value+percent+label\")\nfig.update_traces(textfont_size=18,\n                  marker=dict(line=dict(color='#000000', width=2)))\n\nfig.update(layout_showlegend=False)\n\nfig.update_layout(\n        title={'text': 'Distribution of edible and poison mushrooms',\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top',},\n        font=dict(\n            family=\"Helvetica\",\n            size=18))\n\nfig.show()\n","892fd850":"shrooms['class'].replace('e',0, inplace=True)\nshrooms['class'].replace('p', 1, inplace=True)","a19e8df3":"shrooms.head()","869bb97c":"shrooms_full = shrooms.copy()\n\nshrooms_full = shrooms_full.replace({'cap-shape' : {'b':'bell','c':'conical','x':'convex','f':'flat','k':'knobbed','s':'sunken'}})\nshrooms_full = shrooms_full.replace({'cap-surface' : {'f':'fibrous','g':'grooves','y':'scaly','s':'smooth'}})\nshrooms_full = shrooms_full.replace({'cap-color' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','r':'green',\n                                                    'p':'pink','u':'purple','e':'red','w':'white','y':'yellow'}})\nshrooms_full = shrooms_full.replace({'bruises' : {'t':'bruises','f':'no'}})\nshrooms_full = shrooms_full.replace({'odor' : {'a':'almond','l':'anise','c':'creosote','y':'fishy','f':'foul','m':'musty','n':'none',\n                                              'p':'pungent','s':'spicy'}})\nshrooms_full = shrooms_full.replace({'gill-attachment' : {'a':'attached','d':'descending','f':'free','n':'notched'}})\nshrooms_full = shrooms_full.replace({'gill-spacing' : {'c':'close','w':'crowded','d':'distant'}})\nshrooms_full = shrooms_full.replace({'gill-size' : {'b':'broad','n':'narrow'}})\nshrooms_full = shrooms_full.replace({'gill-color' : {'k':'black','n':'brown','b':'buff','h':'chocolate','g':'gray','r':'green',\n                                                    'o':'orange','p':'pink','u':'purple','e':'red','w':'white','y':'yellow'}})\nshrooms_full = shrooms_full.replace({'stalk-shape' : {'e':'enlarging','t':'tapering'}})\nshrooms_full = shrooms_full.replace({'stalk-root' : {'b':'bulbous','c':'club','u':'cup','e':'equal','z':'rhizomorphs',\n                                                     'r':'rooted','?':'missing'}})\nshrooms_full = shrooms_full.replace({'stalk-surface-above-ring' : {'f':'fibrous','y':'scaly','k':'silky','s':'smooth'}})\nshrooms_full = shrooms_full.replace({'stalk-surface-below-ring' : {'f':'fibrous','y':'scaly','k':'silky','s':'smooth'}})\nshrooms_full = shrooms_full.replace({'stalk-color-above-ring' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange',\n                                                                'p':'pink','e':'red','w':'white','y':'yellow'}})\nshrooms_full = shrooms_full.replace({'stalk-color-below-ring' : {'n':'brown','b':'buff','c':'cinnamon','g':'gray','o':'orange',\n                                                                'p':'pink','e':'red','w':'white','y':'yellow'}})\nshrooms_full = shrooms_full.replace({'veil-type' : {'p':'partial','u':'universal'}})\nshrooms_full = shrooms_full.replace({'veil-color' : {'n':'brown','o':'orange','w':'white','y':'yellow'}})\nshrooms_full = shrooms_full.replace({'ring-number' : {'n':'none','o':'one','t':'two'}})\nshrooms_full = shrooms_full.replace({'ring-type' : {'c':'cobwebby','e':'evanescent','f':'flaring','l':'large','n':'none',\n                                                   'p':'pendant','s':'sheathing','z':'zone'}})\nshrooms_full = shrooms_full.replace({'spore-print-color' : {'k':'black','n':'brown','b':'buff','h':'chocolate','r':'green','o':'orange',\n                                                           'u':'purple','w':'white','y':'yellow'}})\n\nshrooms_full = shrooms_full.replace({'population' : {'a':'abundant','c':'clustered','n':'numerous','s':'scattered','v':'several',\n                                                     'y':'solitary'}})\nshrooms_full = shrooms_full.replace({'habitat' : {'g':'grasses','l':'leaves','m':'meadows','p':'paths','u':'urban','w':'waste','d':'woods'}})\n\n\nshrooms_full.head().T","f54008d3":"edible = shrooms_full.loc[shrooms_full['class'] == 0]\npoisonous = shrooms_full.loc[shrooms_full['class'] == 1]\n\nedible.shape, poisonous.shape","5b6497fe":"edible.head()","9b030cbe":"fig, axes = plt.subplots(1, 2, figsize=(14,5), sharey=True)\n\nsns.barplot(data = edible['habitat'].value_counts().reset_index(), \n            x='index', y='habitat', ax=axes[0], color='royalblue')\n\nsns.barplot(data = poisonous['habitat'].value_counts().reset_index(), \n            x='index', y='habitat', ax=axes[1], color='firebrick')\n\naxes[0].set_title('Edible', size=15)\naxes[1].set_title('Poisonous', size=15)\n\naxes[0].set_xlabel('')\naxes[1].set_xlabel('')\naxes[0].set_ylabel('Number of mushrooms')\naxes[1].set_ylabel('')\n\nplt.suptitle('Mushroom habitat', size=20, y=1.05);","74c23803":"fig, axes = plt.subplots(1, 2, figsize=(14,5))\n\nsns.barplot(y=edible['odor'].value_counts().index, x=edible['odor'].value_counts().values, color='royalblue', ax=axes[0])\nsns.barplot(y=poisonous['odor'].value_counts().index, x=poisonous['odor'].value_counts().values, color='firebrick', ax=axes[1])\n\naxes[0].set_title('Edible', size=15)\naxes[1].set_title('Poisonous', size=15)\n\nplt.suptitle('Difference in mushroom odor', size=20, y=1.05);","2e24f7be":"edible_cap = edible.groupby('cap-shape', as_index=False)['odor'].count()\npoisonous_cap = poisonous.groupby('cap-shape', as_index=False)['odor'].count()\n\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['edible', 'poisonous'])\n\nfig.add_trace(go.Pie(labels=edible_cap['cap-shape'], values=edible_cap['odor'],\n                     name='edible'), 1, 1)\n\nfig.add_trace(go.Pie(labels=poisonous_cap['cap-shape'], values=poisonous_cap['odor'],\n                     name='poisonous'), 1, 2)\n\nfig.update_traces(textinfo=\"value+percent+label\", hoverinfo='label+percent', textfont_size=14,\n                  marker=dict(line=dict(color='black', width=1)))\n\nfig.update_layout(\n        title={'text': 'Cap-shape difference',\n                'y':0.95,\n                'x':0.5,\n                'xanchor': 'center',\n                'yanchor': 'top',},\n        font=dict(\n            family=\"Helvetica\",\n            size=18))\nfig.show()","b55df4d1":"common_features = pd.DataFrame(columns=['features','edible', 'poisonous', 'difference'])\n\nfor feature_name, row in zip(edible.columns[1:], range(edible.shape[1])):\n    \n    most_freq_edible = edible[feature_name].value_counts().index[0]\n    most_freq_poisonous = poisonous[feature_name].value_counts().index[0]\n    \n    common_features.loc[row,'features'] = feature_name\n    common_features.loc[row,'edible'] = most_freq_edible\n    common_features.loc[row,'poisonous'] = most_freq_poisonous\n    \n    if most_freq_edible == most_freq_poisonous:\n        common_features.loc[row,'difference'] = 'no'\n    else:\n        common_features.loc[row,'difference'] = 'yes'\n        \n        \n    def highlight_background(s):\n        return ['background-color: gold' if v == 'yes' else 'background-color: firebrick' for v in s]\n    \n    def color_text(val):\n        color = 'black' if val == 'yes' else 'white'\n        return 'color: %s' % color\n\n\ncommon_features = common_features.sort_values(by='difference', ascending=False).reset_index(drop=True).\\\n                    style.\\\n                    applymap(color_text, subset='difference').\\\n                    apply(highlight_background, subset='difference')\n\ncommon_features","611de6e1":"SEED = 42","58095e86":"categorial = shrooms.columns[1:].tolist()\ncategorial","a008c464":"cat_features = categorial","b87a29f8":"X = shrooms.drop('class', axis=1)\ny = shrooms['class']","1837bfd9":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=SEED)","440e79c3":"catboost = CatBoostClassifier(iterations=300,\n                              learning_rate=0.1,\n                              depth=4,\n                              loss_function='Logloss',\n                              subsample=0.8,\n                              grow_policy='Depthwise',\n                              verbose=100,\n                              random_state=SEED\n                              )","92fa7a03":"catboost.fit(X_train, y_train, cat_features=categorial)","d4b54cec":"importances = catboost.feature_importances_\ncolumn_names = X_train.columns.tolist()","7d050f16":"temp = pd.DataFrame(columns=['importances','columns'])\n\ntemp['importances'] = importances\ntemp['columns'] = column_names","dd96fa97":"temp = temp.sort_values(by='importances', ascending=False)","c5befb69":"plt.figure(figsize=(6,15))\n\nsns.barplot(x='importances', y='columns', data=temp, color='dimgray')\n\nplt.title('Feature importances', size=18);","a0be1fc4":"pred = catboost.predict(X_test)\n\nf1_score(y_test, pred)","162cf353":"pred[:10]","b9f0e129":"y_test[:10]","695dd756":"### NOTE \n\nPandas method 'query()' do not support a column named 'class'.  \n\n> shrooms.query('class==1')   \nreturns an error. keep this in mind!  \n\nIn this case you may use old but gold 'loc' method.","bad2ebc4":"**Libs and data import**","a293d7ac":"## Machine learning  \n\nLet's apply the CatBoost model to solve a classification problem.","537bddb8":"As you can see, odor and gill size are the most valuable features to prediction.","d7fb9ee2":"### Habitat \n\nMy grandma has always said: 'Don't harvest mushrooms near roads'. Let's check the habitat of edible and poisonous mushrooms.","bdc0a1c2":"### Odor \n\nWhat do edible mushrooms smell?","cd749527":"Never pick a mushroom smells foul or fishy. According to the dataset, edible shrooms smell nothing or have a nice almond or anise odour.","445aafb5":"Classes are closely equal. Don't need to do anything, just encode the values into 0 and 1. ","2b590451":"Thanks God, there are no missing values in dataset.  \n\nWe have 22 different features, which describes different sorts of mushrooms. \nWe will try to create a classificator, which may give us an answer. Is this mushroom edible or not using only its characteristics. \n\nStart with edible classes.","fbac3680":"# Data analysys","cac7a2c1":"# A portrait of an average edible and poisonous mushroom   \n\nLet's find the most common signs in each group? How many different attributes do we find between edible and poisonous mushrooms?","3e8eb616":"Grandma was right. One thousand of mushrooms founded near paths are non-edible. So guys, please do not pick them up!","dec55dc7":"### Cap shape \n\nI suppose that edible mushrooms always have a round cap. And non-edible have a knobbed one. Let's check my hypothesis.","8df5a1c9":"Looks nice.  \n\nFor better understanding let's split the data into two subsets. Each for edible and poisonous mushrooms.","0ef3e188":"## Wow, we may predict is a mushroom edible just with this model!\n\nDo enjoy.\n\n**work_in_progress**","c2b66d44":"![](https:\/\/i.imgflip.com\/1u8yz6.jpg)","7fdffbe4":"To make the analysis and plots more intelligible, I will reconstruct all values to full names.","0d84651d":"# Hallo my beatiful Kagglers. \n\nToday is a non-competition day. Just lazy and calm diving through EDA river.  \nI would like to apply some basic and advanced technics. \n\nAs always, if you have any comments or improvements, please leave your thoughts below. ","f1d58a37":"Oops, I was wrong. Both edible and poisonous mushrooms commonly have the same cap shape. \nWe will delete this column later to clear the dataset from non-informative features.","761eb6ae":"If you are a 'mushroom novice', just like me, use this table. When picking up a shroom, check the first nine features first. "}}