{"cell_type":{"a677f82a":"code","72f9a634":"code","2f18b9ea":"code","dc5d136d":"code","cd8cdd05":"code","d92b30f5":"code","99d4f6ec":"code","ec09b9a2":"code","82909e85":"code","db2f08af":"code","5bdefa07":"code","77621268":"code","3a8b38d4":"code","78f40f58":"code","86f18c24":"code","98afdfe8":"code","170c5f30":"code","0f619396":"code","70741327":"code","c131faf8":"code","773647bc":"code","ef13ecc7":"code","bf98d83e":"code","02303e07":"code","7128aae1":"code","ac1819b9":"code","63f5bd5c":"code","1f01d6f8":"code","86da5421":"code","8cfa152a":"code","f4cc7dec":"code","06ebf529":"code","fa9f478f":"code","9903133f":"code","107f57ea":"code","295c9640":"code","47a52c1e":"code","20362f9a":"code","a7736603":"code","14e34f5b":"code","7388cc65":"code","95d4c3aa":"code","fdc363d6":"code","1285fc35":"code","73c62016":"code","70d92fdb":"code","ce8793d4":"code","ccc1a0c8":"code","9ba1d4c9":"code","ae9993ee":"code","659c29fd":"code","a8120b1c":"code","9a6efdc0":"code","ac1b1a3b":"code","6072c97a":"code","78e85ba4":"code","d40bdfd9":"code","06fd6b2e":"code","0765a48f":"code","14cf52b2":"code","4f3d589b":"code","13f1bce9":"code","28a1d4f4":"code","3de5521b":"code","4b248f85":"code","a68e0c8d":"code","7f5b0ca3":"code","f5f76fe8":"code","d799225c":"code","92971b2b":"code","a9fcbe39":"code","a84f8b29":"code","9b325e12":"code","c667bf6c":"code","7d72f62e":"code","3952fa5f":"code","e0a47e5a":"code","62e016f0":"code","ba9c90f6":"code","6de859f1":"code","e1317107":"code","d08e52d1":"code","1c3ff584":"code","18bef89d":"code","36c68dda":"markdown","9198ca35":"markdown","d15aea15":"markdown","0553e553":"markdown","ae211793":"markdown","f66eb445":"markdown","bbca7d5e":"markdown","fe3c9818":"markdown","a97b2b39":"markdown","afbef80c":"markdown","056a7318":"markdown","bd4adb10":"markdown","7f6929ce":"markdown","0394c38e":"markdown","2bc8d074":"markdown","ebb25d1c":"markdown","a940393b":"markdown","109899ac":"markdown","858ac267":"markdown","991f21f5":"markdown","2ee9834d":"markdown","8649920b":"markdown","e15cb29e":"markdown","71c26823":"markdown","d00d873e":"markdown","d27bfff7":"markdown","e70d7759":"markdown","c22f2891":"markdown","f0d52227":"markdown","e725d926":"markdown","3f311daa":"markdown","0928459f":"markdown","0d866a61":"markdown","f27ea45a":"markdown","ff3cc2ea":"markdown","ed79b535":"markdown","b32c2987":"markdown","e50dee91":"markdown","1e393e1f":"markdown","df119c69":"markdown"},"source":{"a677f82a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","72f9a634":"data=pd.read_csv(\"..\/input\/train.csv\",nrows = 3900000)\ndata.columns","2f18b9ea":"#remove key column\ncols = ['fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'passenger_count']\ndata=pd.read_csv(\"..\/input\/train.csv\",nrows = 3900000,usecols=cols)\nprint(data.columns)\nprint(data.shape)","dc5d136d":"data.head(5)","cd8cdd05":"data.describe()","d92b30f5":"plt.scatter(x=data.fare_amount,y=data.index)\nplt.ylabel('Index')\nplt.xlabel('fare_amount')\nplt.show()","99d4f6ec":"data['fare_amount'][(data.fare_amount<0) | (data.fare_amount>=300)].count()","ec09b9a2":"data.shape","82909e85":"data=data.drop(data[(data.fare_amount<0) | (data.fare_amount>=300)].index,axis=0)","db2f08af":"data.fare_amount.isnull().sum()","5bdefa07":"data.shape","77621268":"data.isnull().sum()","3a8b38d4":"print(data.pickup_latitude.head(5))\nprint(data.dropoff_latitude.head(5))","78f40f58":"test_data=pd.read_csv('..\/input\/test.csv')\ntest_data.head(5)","86f18c24":"test_data.columns","98afdfe8":"lon_min=min(test_data.pickup_longitude.min(),test_data.dropoff_longitude.min())\nlon_max=max(test_data.pickup_longitude.max(),test_data.dropoff_longitude.max())\nprint(lon_min,',',lon_max)","170c5f30":"lat_min=min(test_data.pickup_latitude.min(),test_data.dropoff_latitude.min())\nlat_max=max(test_data.pickup_latitude.max(),test_data.dropoff_latitude.max())\nprint(lat_min,',',lat_max)","0f619396":"data[(data.pickup_latitude< lat_min) | (data.pickup_latitude>lat_max) ]","70741327":"data.drop(data[(data.pickup_latitude< lat_min) | (data.pickup_latitude>lat_max)].index,axis=0,inplace=True)","c131faf8":"data[(data.dropoff_latitude< lat_min) | (data.dropoff_latitude>lat_max)]","773647bc":"\ndata.drop(data[(data.dropoff_latitude<lat_min) | (data.dropoff_latitude>lat_max)].index,axis=0,inplace=True)","ef13ecc7":"print(data.pickup_longitude.tail(5))\nprint(data.dropoff_longitude.tail(5))","bf98d83e":"data.pickup_longitude.abs().head()","02303e07":"data[(data.pickup_longitude<lon_min) | (data.pickup_longitude>lon_max)]","7128aae1":"data.drop(data[(data.pickup_longitude<lon_min) | (data.pickup_longitude>lon_max)].index,axis=0,inplace=True)","ac1819b9":"# dropoff\ndata[(data.dropoff_longitude<lon_min) | (data.dropoff_longitude>lon_max)]","63f5bd5c":"data.drop(data[(data.dropoff_longitude<lon_min) | (data.dropoff_longitude>lon_max)].index,axis=0,inplace=True)","1f01d6f8":"data.isnull().sum()","86da5421":"data[data.dropoff_longitude.isnull()==True].head(1)","8cfa152a":"data.drop(data[data.dropoff_longitude.isnull()==True].index,axis=0,inplace=True)","f4cc7dec":"data.isnull().sum()","06ebf529":"data.describe()","fa9f478f":"plt.scatter(x=data.passenger_count,y=data.index)\nplt.ylabel('Index')\nplt.xlabel('passenger_count')\nplt.show()","9903133f":"data['passenger_count'][data.passenger_count==0].count()","107f57ea":"print(data.shape)\ndata.drop(data[data.passenger_count==0].index,axis=0,inplace=True)\nprint(data.shape)","295c9640":"print(data.shape)\ndata.drop(data[data.passenger_count>8].index,axis=0,inplace=True)\nprint(data.shape)","47a52c1e":"data.dtypes","20362f9a":"data['pickup_datetime'].head(1)","a7736603":"data['pickup_datetime']=pd.to_datetime(data['pickup_datetime'], infer_datetime_format=True)","14e34f5b":"data['pickup_datetime'].head(1)","7388cc65":"data['year'] = data['pickup_datetime'].dt.year\ndata['Month'] = data['pickup_datetime'].dt.month\ndata['Date'] = data['pickup_datetime'].dt.day\ndata['Day of Week'] = data['pickup_datetime'].dt.dayofweek\ndata['Hour'] = data['pickup_datetime'].dt.hour\ndata['Minute'] = data['pickup_datetime'].dt.minute","95d4c3aa":"from math import radians, cos, sin, asin, sqrt\ndef haversine(a):\n    lon1=a[0]\n    lat1=a[1]\n    lon2=a[2]\n    lat2=a[3]\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2)**2\n    c =  2 * asin(sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371* c\n    return km\n# 1min ","fdc363d6":"data['distance']=data[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']].apply(haversine,axis=1)","1285fc35":"data[\"distance\"].head(5)","73c62016":"#Analyze column distance ,and drop the rows if necessary to drop\ndata[data.distance==0].shape  # found records with 0 distnace ","70d92fdb":"print(data.shape)\ndata.drop(data[data.distance==0].index,axis=0, inplace=True) # drop the rows having records of distance as 0\nprint(data.shape)","ce8793d4":"plt.figure(figsize=(15,7))\nplt.scatter(x=data['Date'], y=data['fare_amount'], s=1.5)\nplt.xlabel('Date')\nplt.ylabel('Fare')","ccc1a0c8":"plt.figure(figsize=(15,7))\nplt.hist(data['Hour'], bins=100)\nplt.xlabel('Hour')\nplt.ylabel('Frequency')","9ba1d4c9":"plt.figure(figsize=(15,7))\nplt.scatter(x=data['Hour'], y=data['fare_amount'], s=1.5)\nplt.xlabel('Hour')\nplt.ylabel('Fare')","ae9993ee":"plt.figure(figsize=(15,7))\nplt.hist(data['passenger_count'], bins=15)\nplt.xlabel('No. of Passengers')\nplt.ylabel('Frequency')","659c29fd":"plt.figure(figsize=(15,7))\nplt.scatter(x=data['passenger_count'], y=data['fare_amount'], s=1.5)\nplt.xlabel('No. of Passengers')\nplt.ylabel('Fare')","a8120b1c":"plt.figure(figsize=(15,7))\nplt.hist(data['Day of Week'], bins=100)\nplt.xlabel('Day of Week')\nplt.ylabel('Frequency')\n#0 means Saturday","9a6efdc0":"test_data=pd.read_csv(\"..\/input\/test.csv\")\ntest_data.head()","ac1b1a3b":"test_data.dtypes","6072c97a":"test_data['key']=pd.to_datetime(test_data['key'], infer_datetime_format=True)\ntest_data['pickup_datetime']=pd.to_datetime(test_data['pickup_datetime'], infer_datetime_format=True)","78e85ba4":"test_data.dtypes","d40bdfd9":"test_data['year'] = test_data['pickup_datetime'].dt.year\ntest_data['Month'] = test_data['pickup_datetime'].dt.month\ntest_data['Date'] = test_data['pickup_datetime'].dt.day\ntest_data['Day of Week'] = test_data['pickup_datetime'].dt.dayofweek\ntest_data['Hour'] = test_data['pickup_datetime'].dt.hour\ntest_data['Minute'] = test_data['pickup_datetime'].dt.minute","06fd6b2e":"test_data.head(3)","0765a48f":"test_data.isnull().sum()","14cf52b2":"from math import radians, cos, sin, asin, sqrt,atan2\ndef haversine(a):\n    lon1=a[0]\n    lat1=a[1]\n    lon2=a[2]\n    lat2=a[3]\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlon\/2)**2\n    c = 2 * asin(sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371* c\n    return km\n# 1min ","4f3d589b":"test_data['distance']=test_data[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude']].apply(haversine,axis=1)","13f1bce9":"test_data['distance'].describe()","28a1d4f4":"#test_data[test_data.distance==0]","3de5521b":"test_data.columns","4b248f85":"data.dtypes","a68e0c8d":"#drop pickup_datetime as we can't use directly in our model\nprint(data.shape)\ndata=data.drop('pickup_datetime',axis=1)\nprint(data.shape)","7f5b0ca3":"data.dtypes","f5f76fe8":"data.iloc[:,:].head(1)","d799225c":"X=data.drop(\"fare_amount\",axis=1)\ny=data.iloc[:,0].values","92971b2b":"X.shape","a9fcbe39":"y.shape","a84f8b29":"#from sklearn.model_selection import train_test_split\n#train_X, val_X, train_y, val_y =train_test_split(X,y,test_size=0.2,random_state=0)","9b325e12":"#from sklearn.ensemble  import RandomForestRegressor\n#Regression =RandomForestRegressor(random_state=0)\n#Regression.fit(train_X,train_y)\n#y_pred=Regression.predict(val_X)","c667bf6c":"#import xgboost\n#Regression_xgbooost =xgboost.XGBRegressor(n_estimator=201,max_depth=17,random_state=0)\n#Regression_xgbooost.fit(train_X,train_y)\n#y_pred=Regression_xgbooost.predict(val_X)","7d72f62e":"#from sklearn.metrics import mean_absolute_error\n#print(mean_absolute_error(val_y,y_pred))","3952fa5f":"X_test=test_data\nprint(X_test.columns)\nprint(X_test.shape)\nprint(X_test.dtypes)","e0a47e5a":"X_test.drop([\"key\",\"pickup_datetime\"],axis=1,inplace=True)","62e016f0":"print(X_test.shape)\nprint(X_test.dtypes)","ba9c90f6":"#from sklearn.ensemble  import RandomForestRegressor\n#Regression =RandomForestRegressor(n_estimators=70,min_samples_leaf=5,random_state=0)\n#Regression.fit(X,y)\n#y_test_pred=Regression.predict(X_test)\n#print(y_test_pred)","6de859f1":"import xgboost\nRegression_xgbooost =xgboost.XGBRegressor(n_estimators=300,max_depth=15,max_leaves=9,random_state=0)\nRegression_xgbooost.fit(X,y)\ny_test_pred=Regression_xgbooost.predict(X_test)\nprint(y_test_pred)","e1317107":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['fare_amount'] = y_test_pred\nsubmission.to_csv('submission_K_39k_300_15_9.csv', index=False)\nsubmission","d08e52d1":"from sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y =train_test_split(X,y,test_size=0.2,random_state=0)","1c3ff584":"import xgboost\nRegression_xgbooost =xgboost.XGBRegressor(n_estimators=300,max_depth=15,max_leaves=9,random_state=0)\nRegression_xgbooost.fit(train_X,train_y)\ny_pred=Regression_xgbooost.predict(val_X)","18bef89d":"from sklearn.metrics import mean_absolute_error\nprint(mean_absolute_error(val_y,y_pred))","36c68dda":"**Exploratory Data Analysis**","9198ca35":"--------------------------------------------","d15aea15":"Apply the same range on train data and drop remaining \n\n**#pickup_latitude** & **dropoff_latitude** must be between lat_max and lat_min","0553e553":"observed type of column pickup_datetime is an object . will convert it to datetime format","ae211793":"\nsplit the datetime","f66eb445":"-------------------------------\nCheck test data latitude and longitude range for New your City (40\u00b0 42' 51\" N \/ 74\u00b0 0' 23\" W)","bbca7d5e":"**pickup_longitude and dropoff_longitude must be between lon_min and lon_max","fe3c9818":"**submission**","a97b2b39":"\n**Data Wrangling**\n* Identify and handle missing values\n    -replace it with its mean \n    -drop the rows\/columns having missing values\n* Find outliers\n* data formating (Incorrect datatype)\n* Fetaure Scaling\/Normlization","afbef80c":"* Load the dataset and set number of rows as nrows =3900000","056a7318":"Convert key and pickup_datetime to correct format","bd4adb10":"\n**longitude and latitude **\n\nfound NaN values in columns dropoff_longitude and dropoff_latitude     \nWe found NaN values in columns i) dropoff_longitude and ii) dropoff_latitude  which is not much as comapared to our dataset. So we will replace it by mean values\n\n**Changed the idea **","7f6929ce":"**Type conversion (data formating) :\npickup_datetime **","0394c38e":"longitude  max and min (test data)","2bc8d074":"\nlet's see NaN Values now from both dropoff_longitude and dropoff_latitude .","ebb25d1c":"test_data","a940393b":"**fare amount column :-**\nFound negative value of fare amount. Fare never be negative let's drop those rows which are having negative fare amount and also remove outliers","109899ac":"single passengers are the most frequent travellers, and the highest fare also seems to come from cabs which carry just 1 passenger.","858ac267":"-find NaN values in given dataset and fill\/replace it","991f21f5":"**Test Data**","2ee9834d":"Train data","8649920b":" day of the week doesn't seem to have the effect on the number of cab rides","e15cb29e":"**passenger_count** column","71c26823":"#to check accuracy","d00d873e":"The fares throught the month mostly seem uniform","d27bfff7":"**1)Check the pickup date and time affect the fare or not**","e70d7759":"**3)Does the day of the week affect the fare?**","c22f2891":"Now,let's drop Outliers","f0d52227":"Cleaning done...","e725d926":"data with negative fare_amount has been removed","3f311daa":"The time of day definitely plays an important role. The frequency of cab rides seem to be the lowest at 5AM ","0928459f":"---------------------------","0d866a61":"latitude max and min (test data)","f27ea45a":"**Distance **\n\nCalculate the distance based on longitude and latitude \n\nHaversine formula:\n\ndlon = lon2 - lon1 \ndlat = lat2 - lat1 \na = (sin(dlat\/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon\/2))^2 \nc = 2 * atan2( sqrt(a), sqrt(1-a) ) \nd = R * c (where R is the radius of the Earth)\n\n#a = sin\u00b2(\u0394\u03c6\/2) + cos \u03c61 \u22c5 cos \u03c62 \u22c5 sin\u00b2(\u0394\u03bb\/2)\n#c = 2 \u22c5 atan2( \u221aa, \u221a(1\u2212a) )\n#d = R \u22c5 c","ff3cc2ea":"\nOutliers :\nHere we can see min passenger_count : 0.000000e+00 =0 and max of passenger_count : 2.080000e+02\n = 208 (Outlier). ","ed79b535":" Competition : **New York City Taxi Fare Prediction** (https:\/\/www.kaggle.com\/c\/new-york-city-taxi-fare-prediction            \n\n* Predict a rider's taxi fare","b32c2987":"\n\n================================================","e50dee91":"Problem faced: to_datetime - too slow","1e393e1f":"**2)number of passengers vs fare**","df119c69":"**Machine Learning Algorithm**"}}