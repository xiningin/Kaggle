{"cell_type":{"53049e2b":"code","35e4d528":"code","0b4d175a":"code","dc5063b1":"code","cc176073":"code","f08efbe3":"code","7e4a1870":"code","603ed0d3":"code","ff9a7c0b":"code","2022e8c5":"code","12ba33e6":"code","3f271914":"code","fb531cb2":"code","321e2b81":"code","17980aaf":"code","12292667":"code","b37d5699":"code","45c5bde1":"code","6e0a6079":"code","a06303c6":"code","c4f76857":"code","ba194ad2":"code","58f09740":"code","97062f76":"code","3ecc11fe":"code","65b34b44":"code","b1d41d21":"code","6a3510a0":"code","ad6933a2":"code","baafe2e3":"code","6ce7aee5":"code","251f6915":"code","e4b95ca0":"code","fa1f08e1":"code","05ae89f2":"code","7d86deff":"code","3880837e":"code","7732a961":"code","6b3e1989":"code","bb766373":"code","93e11713":"code","501fb6f7":"code","dc929cdd":"code","161e2d6e":"code","c82e08f9":"code","7db6bb5b":"code","02491d14":"code","9026b5b3":"code","dd191552":"code","bd1882bf":"code","df5feb04":"code","4e7ff22d":"code","934856a6":"code","d32ffa8d":"code","230aa989":"code","a028812b":"code","43685edd":"code","6dfd4ff6":"code","c6db2dc3":"code","6587aca4":"code","a5767e5e":"code","f92f3bfe":"code","9f065c33":"code","a3ed8a10":"code","5012d28b":"code","d8f373e8":"code","43ea9368":"code","a4feb4fe":"code","c53f5c9e":"code","ba967f80":"code","3a0d448a":"code","38494201":"code","69f28bad":"code","205efcbf":"code","1639f996":"code","ff8b791d":"code","29bc58a5":"code","66300e79":"code","bf057b9e":"code","295f937d":"code","2f3ebfc3":"code","9b571ae0":"code","e4eab90c":"code","ee1b494f":"code","0bc6add6":"code","d3070d61":"code","50866a89":"markdown","64d731c7":"markdown","7f742784":"markdown","bd680719":"markdown","58552816":"markdown","73a6cb39":"markdown","4bb200e1":"markdown","8d6bcafa":"markdown","0d5b72fc":"markdown","7c2fdd98":"markdown","2ae0a9b5":"markdown","29b1be3c":"markdown","9a524a84":"markdown","46109bb8":"markdown","4226f810":"markdown","a4a00531":"markdown","36d7b34b":"markdown","5d8cce8d":"markdown","c3c9aa06":"markdown","70a343c9":"markdown","6504ef61":"markdown","4e5b7988":"markdown","50a30361":"markdown","f9ef342a":"markdown"},"source":{"53049e2b":"#Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime as dt","35e4d528":"#Reading csv file using pandas\ndf=pd.read_csv('..\/input\/hack_startup_funding.csv')","0b4d175a":"#Checking the head files\ndf.head()","dc5063b1":"#Droppin irrelevant columns\ndf.drop(['SNo','Remarks'],axis=1,inplace=True)","cc176073":"#Checking data again\ndf.head()","f08efbe3":"#First step is to convert object into date time to do this we need to first structure the data\ndf['Date']=df['Date'].replace({\"12\/05.2015\":\"12\/05\/2015\"})\ndf['Date']=df['Date'].replace({\"13\/04.2015\":\"13\/04\/2015\"})\ndf['Date']=df['Date'].replace({\"22\/01\/\/2015\":\"22\/01\/2015\"})\ndf['Date']=df['Date'].replace({\"15\/01.2015\":\"15\/01\/2015\"})","7e4a1870":"#Converting date column into type date\ndf['Date']=pd.to_datetime(df['Date'])","603ed0d3":"#Extracting month from date column\ndf['month']=df['Date'].dt.month","ff9a7c0b":"#Extracting year from date column\n\ndf['year']=df['Date'].dt.year","2022e8c5":"#Extracting year from date column\n\ndf['quarter']=df['Date'].dt.quarter","12ba33e6":"#Extracting days from date column\n\ndf['day']=df['Date'].dt.day","3f271914":"#Combining year and month together\ndf[\"yearmonth\"] = (pd.to_datetime(df['Date'],format='%d\/%m\/%Y').dt.year*100)+ (pd.to_datetime(df['Date'],format='%d\/%m\/%Y').dt.month)","fb531cb2":"year_month = df['yearmonth'].dropna().value_counts()","321e2b81":"#Dropping date column as we have all the information extracted\ndf.drop('Date',axis=1,inplace=True)","17980aaf":"#Calculating percentage of all the date categories for eda\nyear=df['year'].value_counts()\/len(df['year'])*100\nmonth=df['month'].value_counts()\/len(df['month'])*100\nquarter=df['quarter'].value_counts()\/len(df['quarter'])*100\nday=df['day'].value_counts()\/len(df['day'])*100","12292667":"#Plotting funding according to its timeline\nplt.figure(figsize=(15,8))\nsns.barplot(year_month.index, year_month.values, alpha=0.9,color='skyblue')\n\nplt.xticks(rotation='vertical')\nplt.xlabel('Year-Month ', fontsize=18)\nplt.ylabel('Number of fundings made', fontsize=18)\nplt.title(\"Year-Month - Number of Funding Distribution\", fontsize=20)\nplt.show()\n#There seems to be no trend in the amount of funding that has been made\n#but from 201612 to 201712 the funding has been gradually dropped","b37d5699":"#Checking if there is trend in investment as per month\nplt.figure(figsize=(10,4))\nsns.barplot(month.index, month.values, alpha=0.9,color='skyblue')\nplt.title('Investment per month',fontsize=25)\nplt.xlabel('Month',fontsize=17)\nplt.ylabel('Number of investments',fontsize=17)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.show()\n#There does not seem to be any trend but January and June seems to have the most number of investments","45c5bde1":"#PLotting funding frequency according to year\nplt.figure(figsize=(7,6))\nsns.barplot(year.index, year.values, alpha=0.9,color='skyblue')\nplt.title('Investment per year',fontsize=19)\nplt.xlabel('Year',fontsize=16)\nplt.ylabel('Number of investments',fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\n#It looks like funding has increased from 2015 to 2016. \n#It makes sense if the funding for 2017 will be greater than 2016\n#But we have data for 2017 till october so we cannot really say if the investment has increased after 2017. \n#According to this data, investment has dropped from 39.6% to 18.6% from 2016 to 2017\n","6e0a6079":"#Plotting funding frequency according to the quarter\nplt.figure(figsize=(7,4))\nsns.barplot(quarter.index, quarter.values, alpha=0.9,color='skyblue')\nplt.title(\"Investments per quarter\",fontsize=18)\nplt.xlabel('Quarter',fontsize=16)\nplt.ylabel('Number of investment',fontsize=16)\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=11)\nplt.show()\n#First 2 quarter seems to have slightly more funding than 3rd and 4th quarter","a06303c6":"#Cleaning the target variable\ndf['AmountInUSD']=(df['AmountInUSD'].str.replace(',','')).astype('float')","c4f76857":"#Making a function which gives 95% confidence point and interval, also the range between the lower and upper value.\nimport scipy.stats as stats\n\ndef mean_confidence_interval(data, confidence=0.95):\n    a = 1.0 * np.array(data)\n    n = len(a)\n    m, se = np.mean(a), stats.sem(a)\n    h = se * stats.t.ppf((1 + confidence) \/ 2., n-1)\n    print('Confidence point:-',np.around(m,decimals=2))\n    print('From:-',(np.around(m-h,decimals=2)))\n    print('To:-',np.around(m+h,decimals=2))\n    print('Range:-',(np.around((m+h)-(m-h),decimals=2)))\n    \n\n#Calculating 95% confidence interval for out target variable\nmean_confidence_interval(df['AmountInUSD'].dropna())","ba194ad2":"#Printing confidence interval as per year\nfor x in df['year'].value_counts().index:\n    print(x)\n    print('*'*30)\n    mean_confidence_interval((df['AmountInUSD'][df['year']==x]).dropna())\n    print('\\n')","58f09740":"#Printing confidence interval for top all top3 categories\nfor cols in df.columns[0:6]:\n    print(cols)\n    for x in df[cols].value_counts()[0:3].index:\n        print('*'*30)        \n\n        print(x)\n        \n        print('*'*30)\n        \n        mean_confidence_interval((df['AmountInUSD'][df[cols]==x]).dropna())\n        \n        print('\\n')","97062f76":"#Statistics for Amount of investment\n#The amount that is invested seems to be very flexible\nprint('skewness',df['AmountInUSD'].skew())\nprint('kurtosis',df['AmountInUSD'].kurtosis())\nprint('median  ',df['AmountInUSD'].median())\nprint(df['AmountInUSD'].describe())\n","3ecc11fe":"#Checking the distribution for the target variable AmountInUSD\nimport statsmodels.api as sm\nsm.qqplot(df['AmountInUSD'].dropna())","65b34b44":"#Analyzing the startup that got the max funding\ndf[df['AmountInUSD']==1400000000.0]","b1d41d21":"#Analyzing the startup that got the least funding\ndf[df['AmountInUSD']==16000]","6a3510a0":"#Before splitting the dataset we will first clean the data","ad6933a2":"#There are many variables where the data is same but the name is different\n#First we will lower all the strings\n#Later we will personally rename all the variable names\ndf['StartupName']=df['StartupName'].str.lower()","baafe2e3":"df['StartupName']=df['StartupName'].replace(\"practo\",\"practo\")\ndf['StartupName']=df['StartupName'].replace(\"couponmachine.in\",\"couponmachine\")\ndf['StartupName']=df['StartupName'].replace(\"olacabs\",\"ola cabs\")\ndf['StartupName']=df['StartupName'].replace(\"ola\",\"ola cabs\")\ndf['StartupName']=df['StartupName'].replace(\"olipkart.com\",\"flipkart\")\ndf['StartupName']=df['StartupName'].replace(\"paytm marketplace\",\"paytm\")\ndf['StartupName'][df['StartupName']=='flipkart.com']='flipkart'\n\ndf['StartupName'][df['StartupName']=='oyo']='oyo rooms'","6ce7aee5":"df['IndustryVertical']=df['IndustryVertical'].str.lower()","251f6915":"df['SubVertical']=df['SubVertical'].str.lower()","e4b95ca0":"df['CityLocation']=df['CityLocation'].str.lower().str[0:2]","fa1f08e1":"df['InvestorsName']=df['InvestorsName'].str.split(expand=True)[0].str.lower()","05ae89f2":"df['InvestmentType']=df['InvestmentType'].str.lower().str[0]","7d86deff":"df.head()","3880837e":"#Now we will create our 2 new dataframes\ndf_test=df[df['AmountInUSD'].isnull()]\n\ndf_test.drop('AmountInUSD',axis=1,inplace=True)\n\ndf_test=df_test.dropna()\n\nsns.heatmap(df_test.isnull(),cbar=False,cmap='viridis',yticklabels=False)\n#All null values were of year 2015\ndf_train=(df.dropna(subset=['AmountInUSD']))","7732a961":"#Statistics for categorical variables\ndf.describe(include='object')","6b3e1989":"#Top 10 statups according to amount invested\n(df[['StartupName','AmountInUSD']].dropna()).sort_values(by='AmountInUSD',ascending = False).head(10)\n\n","bb766373":"#Making a dataframe of top 20 start up name according to the amount that was invested in them\n\ntop20funding=(df[['StartupName','AmountInUSD']].dropna()).sort_values(by='AmountInUSD',ascending = False).head(20)\n\ntop20funding","93e11713":"#Counting the frequency of startups in top 20 startups that were funded\ntop20fundingcount=(df[['StartupName','AmountInUSD']].dropna()).sort_values(by='AmountInUSD',ascending = False).head(20)['StartupName'].value_counts()\ntop20fundingcount","501fb6f7":"##Plotting the frequency of startups in top 20 startups that were funded\n\nplt.figure(figsize=(15,8))\nsns.barplot(top20fundingcount.index, top20fundingcount.values, alpha=0.9,color='skyblue')\n\nplt.xticks(rotation='vertical')\nplt.xlabel('Startup Name', fontsize=18)\nplt.ylabel('Number of fundings made', fontsize=18)\nplt.title(\"Frequency of startups in top 20 funded amount\", fontsize=20)\nplt.show()\n\n","dc929cdd":"#Creating a new dataframe with Startup name and the amount they got as funding\nnameamount=df_train[['StartupName','AmountInUSD']]","161e2d6e":"#Grouping the dataframe according to startup name and sorting it out accoring to number of funding they recieved\nnameamount=nameamount.groupby('StartupName').sum().sort_values(by='AmountInUSD',ascending=False)\n\n#How much of funding is recieved by how much of startups\nnp.sum((nameamount\/np.sum(nameamount)*100).head(53))\n\nlen(nameamount)\n\n53\/1268*100","c82e08f9":"#Percentage of null values in dataframe\nlen(df[df['IndustryVertical'].isnull()==True])\/len(df['IndustryVertical'])*100","7db6bb5b":"#Industries that recieved funding more than 3 times\ndf_train['IndustryVertical'].value_counts()[df_train['IndustryVertical'].value_counts()>3]","02491d14":"#Top 3 industries with most frequent funding recieved\n(df_train['IndustryVertical'].value_counts()\/len(df_train['IndustryVertical'])*100)[0:3]\n\nx_barindustry=np.array(['consumer internet','technology','ecommerce','other 2369'])     \ny_barindustry=np.array([30.229508,12.393443,9.770492,47.6])\n\nplt.figure(figsize=(10,8))\nsns.barplot(x_barindustry,y_barindustry,color='skyblue')\nplt.xticks(rotation='vertical',fontsize=15)\nplt.xlabel('Industry', fontsize=20)\nplt.ylabel('Number of funding', fontsize=18)\nplt.title(\"Percentage of fundding according to industry\", fontsize=20)\n\nplt.show()\n\n#Comparing investments of top 3 industries vs the rest\nx_barindustry_top3=np.array(['top3','other 2369'])     \ny_barindustry_top3=np.array([53.4,47.6])\n\n\nplt.figure(figsize=(8,6))\nsns.barplot(x_barindustry_top3,y_barindustry_top3,color='skyblue')\nplt.xticks(rotation='vertical',fontsize=15)\nplt.xlabel('Industry', fontsize=20)\nplt.ylabel('Number of funding', fontsize=18)\nplt.title(\"Percentage of funding according to industry\", fontsize=20)\n\nplt.show()","9026b5b3":"#Creating new dataframe with the industry name and amount invested in respective industries\nindamount=df_train[['IndustryVertical','AmountInUSD']]\n\n#Grouping the dataframe according to industries and sorting it according to the amount invested\nindamount=indamount.groupby('IndustryVertical').sum().sort_values(by='AmountInUSD',ascending=False)\n\n#How much investment is done in how many of industries?\nnp.sum((indamount\/indamount.sum()*100).head(9))\n\nlen(indamount)\n\n9\/508*100\n\n","dd191552":"#Creating new dataframe which is sorted according to frequency of investments that is allocated as per city\ntopcityfunded=df_train['CityLocation'].value_counts()[df_train['CityLocation'].value_counts()>10]","bd1882bf":"plt.figure(figsize=(8,8))\nsns.barplot(topcityfunded.index, topcityfunded.values, alpha=0.9,color='skyblue')\n\nplt.xticks(rotation='vertical',fontsize=15)\nplt.xlabel('Startup Name', fontsize=20)\nplt.ylabel('Number of fundings made', fontsize=18)\nplt.title(\"Frequency of startups according to city\", fontsize=20)\n\nplt.show()\n\n","df5feb04":"#Creating new dataframe which is sorted according to the amount of investment that is allocated\ncityamount=df[['CityLocation','AmountInUSD']].dropna().sort_values(by='AmountInUSD')\n\ncityamount=cityamount.groupby('CityLocation').sum().sort_values(by='AmountInUSD',ascending=False)\n\nx_barcity=np.array(['ba', 'ne', 'mu', 'gu', 'ch', 'pu', 'hy', 'no', 'ah', 'ja','other'])\ny_barcity=np.array([8.42297411e+09,\n       2.82019750e+09,\n       2.35493450e+09,\n       2.06902150e+09,\n       4.37205000e+08,\n       3.66653000e+08,\n       1.95362000e+08,\n       1.70638000e+08,\n       9.81860000e+07,\n       3.55600000e+07,\n            104791000.0\n            ])\n\nplt.figure(figsize=(15,8))\nsns.barplot(x_barcity,y_barcity, alpha=0.9,color='skyblue')\n\nplt.xticks(rotation='vertical',fontsize=15)\nplt.xlabel('City', fontsize=20)\nplt.ylabel('Funding', fontsize=18)\nplt.title(\"Highest funding according to city\", fontsize=20)\n\nplt.show()\n\n","4e7ff22d":"#Creating a pie diagram which shows how much funding is given as per cities\nx_piecity=np.array(['ba', 'ne', 'mu', 'gu', 'ch', 'other'])\ny_piecity=np.array([8.42297411e+09,\n       2.82019750e+09,\n       2.35493450e+09,\n       2.06902150e+09,\n       4.37205000e+08,\n      971190000.0\n            ])\n\nplt.figure(figsize=(10,10))\nplt.pie(y_piecity,labels=(x_piecity),autopct='%1.1f%%',colors=['skyblue','pink','plum','lightgreen','coral','gold'],explode=[0,0.1,0,0,0,0],startangle=45)\nplt.rcParams['font.size'] = 16\nplt.show()","934856a6":"#How much investment is done in how many of cities?\n\n(np.sum((cityamount\/np.sum(cityamount)*100)[0:4]))\n\nlen(cityamount)\n\n4\/32*100\n\n","d32ffa8d":"#Top 10 investors according to frequency of funding\ninvestorname=df['InvestorsName'].value_counts().head(10)\ninvestorname","230aa989":"#How much does the top 10 investors contribute in funding\nnp.sum((df_train['InvestorsName'].value_counts()\/len(df_train['InvestorsName'])*100)[0:10])","a028812b":"#How much does the rest of investors contribute in funding\nnp.sum((df_train['InvestorsName'].value_counts()\/len(df_train['InvestorsName'])*100)[10:])","43685edd":"plt.figure(figsize=(8,8))\nsns.barplot(investorname.index, investorname.values, alpha=0.9,color='skyblue')\n\nplt.xticks(rotation='vertical',fontsize=15)\nplt.xlabel('Investor Name', fontsize=20)\nplt.ylabel('Number of fundings made', fontsize=18)\nplt.title(\"Frequency of funding according to investor\", fontsize=20)\n\nplt.show()\n\n","6dfd4ff6":"#Creating new data frame with only Investor names and the amount they invested\ninvestoramount=df_train[['InvestorsName','AmountInUSD']]","c6db2dc3":"investoramount.head(10)","6587aca4":"#Grouping investorname with the amount they have invested\ninvestoramount=investoramount.groupby('InvestorsName').sum().sort_values(by='AmountInUSD',ascending=False)\ninvestoramount.head(10)","a5767e5e":"#How much investment is done by how many of investors?\n(np.sum((investoramount\/np.sum(investoramount)*100)[0:36]))\n\nlen(investoramount)\n\n36\/703*100","f92f3bfe":"#Creating new data frame with only Investor names and the amount they invested\nsubamount=df_train[['SubVertical','AmountInUSD']]","9f065c33":"subamount=(subamount.groupby('SubVertical').sum()).sort_values(by='AmountInUSD',ascending=False)","a3ed8a10":"#How much investment is done in Subvertical?\n\nnp.sum((subamount\/np.sum(subamount)*100).head(39))\n\nlen(subamount)\n\n39\/815*100\n\n","5012d28b":"#Grouping the data frame according to startup names\ngroup=df_train.groupby('StartupName')","d8f373e8":"#Sorting the dataframe according to amount of funding and capturing the 4.1% of startup that got 70% of funding\ntopstartup=group.first().sort_values('AmountInUSD',ascending=False).head(53)","43ea9368":"topstartup.head()","a4feb4fe":"#Top frequency of all variables in this top topstartup dataframe\nfor x in topstartup.columns:\n    print(x)\n    print('*'*30)\n    print(topstartup[x].value_counts()[topstartup[x].value_counts()>1])\n    print('\\n')","c53f5c9e":"#Percentage of top frequency of all variables in top topstartup dataframe\nfor x in topstartup.columns:\n    print(x)\n    print('*'*30)\n    print((topstartup[x].value_counts()[topstartup[x].value_counts()\/len(topstartup[x])*100>2])\/len(topstartup[x])*100)\n    print('\\n')","ba967f80":"#Dropping the null values\ndf_train=df_train.dropna()","3a0d448a":"#As all our features are categorical we need to covert them into numerical type before fitting it into ml algorithm\n!pip install feature-engine\nfrom feature_engine import categorical_encoders as ce","38494201":"#First we will split our data in training and testing dataset\nfrom sklearn.model_selection import train_test_split","69f28bad":"X_df_train=df_train.drop('AmountInUSD',axis=1)\ny_df_train=df_train['AmountInUSD']","205efcbf":"X_train, X_test, y_train, y_test = train_test_split(X_df_train, y_df_train, test_size=0.3, random_state=42)","1639f996":"#It is important to check if our training and testing data is in same shape\nX_train.shape","ff8b791d":"X_test.shape","29bc58a5":"#Replaces categories by the mean of the target. \n\n#For example in the variable colour, if the mean of the target for blue, red\n#and grey is 0.5, 0.8 and 0.1 respectively, blue is replaced by 0.5, red by 0.8\n#and grey by 0.1.\nohe=ce.MeanCategoricalEncoder()","66300e79":"X_train=ohe.fit_transform(X_train,y_train)","bf057b9e":"X_test=ohe.fit_transform(X_test,y_test)","295f937d":"#To ease our job we will create a class \n#This class has function based on various machine learning algorithm\n#We are using 5 algorithms which are as follows\n#1) Logistic Regression\n#2) Ada Boost Regressor\n#3) Decision Tree Regressor\n#4) Random Forest Regressor\n#5) K nearest neighbor Regressor\n#\n#The specific function when called will do the following:-\n#1) Fit the training data\n#2) Predict the training data\n#3) Predict the testing data\n#4) Give output as r2 score, mae and mse for training as well as testing data. \n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\n# to evaluate the models\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\n\n\n\n\nclass selmod():    \n    def linr(x_tra,y_tra,x_tes,y_tes):\n        print('Linear Regression')\n        print('\\n')\n        lr=LinearRegression()\n        lr.fit(x_tra,y_tra)\n        \n        print('Training Validation','\\n')\n        predtlr=lr.predict(x_tra)\n        print('R2: ','\\n',r2_score(y_tra,predtlr))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tra,predtlr))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tra,predtlr))\n\n        print('*'*80)\n        \n        print('Testing Validation')\n        print('\\n')\n        predlr=lr.predict(x_tes)\n        print('R2: ','\\n',r2_score(y_tes,predlr))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tes,predlr))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tes,predlr))\n        print('*'*80)\n        \n    def dectree(x_tra,y_tra,x_tes,y_tes):\n        print('Decision Tree Regressor')\n        print('\\n')\n        dt=DecisionTreeRegressor()\n        dt.fit(x_tra,y_tra)\n        \n        print('Training Validation','\\n')\n        predtdc=dt.predict(x_tra)\n        print('R2: ','\\n',r2_score(y_tra,predtdc))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tra,predtdc))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tra,predtdc))\n        print('*'*80)\n        \n        print('Testing Validation')\n        print('\\n')\n        preddc=dt.predict(x_tes)\n        print('R2: ','\\n',r2_score(y_tes,preddc))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tes,preddc))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tes,preddc))\n        print('*'*80)\n    \n    def ranfo(x_tra,y_tra,x_tes,y_tes):\n        print('Random Forest Regressor')\n        print('\\n')\n        rf=RandomForestRegressor()\n        rf.fit(x_tra,y_tra)\n        \n        print('Training Validation','\\n')\n        predtrf=rf.predict(x_tra)\n        print('R2: ','\\n',r2_score(y_tra,predtrf))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tra,predtrf))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tra,predtrf))\n        print('*'*80)\n        \n        print('Testing Validation')\n        print('\\n')\n        predrf=rf.predict(x_tes)\n        print('R2: ','\\n',r2_score(y_tes,predrf))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tes,predrf))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tes,predrf))\n        print('*'*80)\n    \n    def ada(x_tra,y_tra,x_tes,y_tes):\n        print('Ada Boost Regressor')\n        print('\\n')\n        ad=AdaBoostRegressor()\n        ad.fit(x_tra,y_tra)\n        \n        print('Training Validation','\\n')\n        predtad=ad.predict(x_tra)\n        print('R2: ','\\n',r2_score(y_tra,predtad))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tra,predtad))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tra,predtad))\n        print('*'*80)\n        \n        print('Testing Validation')\n        print('\\n')\n        predad=ad.predict(x_tes)\n        print('R2: ','\\n',r2_score(y_tes,predad))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tes,predad))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tes,predad))\n        print('*'*80)\n    \n    def kneigh(x_tra,y_tra,x_tes,y_tes):\n        print('KNN Regressor')\n        print('\\n')\n        knn=KNeighborsRegressor()\n        knn.fit(x_tra,y_tra)\n        \n        print('Training Validation','\\n')\n        predtknn=knn.predict(x_tra)\n        print('R2: ','\\n',r2_score(y_tra,predtknn))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tra,predtknn))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tra,predtknn))\n        print('*'*80)\n        \n        print('Testing Validation')\n        print('\\n')\n        predknn=knn.predict(x_tes)\n        print('R2: ','\\n',r2_score(y_tes,predknn))\n        print('\\n')\n        print('mae:',mean_absolute_error(y_tes,predknn))\n        print('\\n')\n        print('mse:',mean_squared_error(y_tes,predknn))\n        print('*'*80)","2f3ebfc3":"#Linear Regression\nselmod.linr(X_train,y_train,X_test,y_test)","9b571ae0":"#Decision Tree\nselmod.dectree(X_train,y_train,X_test,y_test)","e4eab90c":"#Random Forest\nselmod.ranfo(X_train,y_train,X_test,y_test)","ee1b494f":"#KNN \nselmod.kneigh(X_train,y_train,X_test,y_test)","0bc6add6":"#Ada Boost\nselmod.ada(X_train,y_train,X_test,y_test)","d3070d61":"#For this dataset Linear Regression is the best model where our testing accuracy is 0.976 and training accuracy is 0.960\n","50866a89":"### Machine Learning","64d731c7":"#### \u25cf How does the funding ecosystem change with time?\n","7f742784":"#### 71.2% of investment is done in 1.7% industries","bd680719":"#### 91.7% of investment is done in 12.5% of cities","58552816":"### 5) Subvertical","73a6cb39":"### Investor Name","4bb200e1":"### City Location","8d6bcafa":"#### 70.1% of investment is done by 5.1% of investors","0d5b72fc":"### Industry Vertical","7c2fdd98":"#### Before doing eda of categorical variables we will clean the data frame\n#### After that we will divide the dataset into 2 different dataframes\n#### 1) All the data with no null values of AmountInUSD\n#### 1) All the data with only null values of AmountInUSD","2ae0a9b5":"### 3) City Location\n#### \u25cf Do cities play a major role in funding?\n","29b1be3c":"### 2) AmountInUSD","9a524a84":"### Industry Subvertical","46109bb8":"### 1) Date","4226f810":"#### 70% amount of funding is recieved by 4.1% of startup","a4a00531":"### Investment Type","36d7b34b":"## Except dates and amount in usd columns all other features are categorical\n## We will take each row engineer them and do eda ","5d8cce8d":"#### Possible questions which could be answered are:\n#### \u25cf How does the funding ecosystem change with time?\n#### \u25cf Do cities play a major role in funding?\n#### \u25cf Which industries are favored by investors for funding?\n#### \u25cf Who are the important investors in the Indian Ecosystem?\n#### \u25cf How much funds do startups generally get in India?","c3c9aa06":"### Startup Name","70a343c9":"# EDA of categorical variables","6504ef61":"#### 70.2% of investment is done in 4.7% of subvertical industries","4e5b7988":"### 2) Industry Vertical\n#### \u25cf Which industries are favored by investors for funding?\n","50a30361":"### 1) Startup Name\n","f9ef342a":"### 4) Investor Name\n#### \u25cf Who are the important investors in the Indian Ecosystem?\n"}}