{"cell_type":{"b47cf69d":"code","2ec63632":"code","77835be6":"code","d8696607":"code","ce699a51":"code","7945a383":"code","867be19f":"code","6badb6b4":"code","6f3dd805":"code","6658a6dc":"code","9f10cb83":"markdown","91245d64":"markdown","c3e2354c":"markdown","3c76889a":"markdown","d6dcc85b":"markdown"},"source":{"b47cf69d":"!pip install ..\/input\/detectron-05\/whls\/pycocotools-2.0.2\/dist\/pycocotools-2.0.2.tar --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/fvcore-0.1.5.post20211019\/fvcore-0.1.5.post20211019 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/antlr4-python3-runtime-4.8\/antlr4-python3-runtime-4.8 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/detectron2-0.5\/detectron2 --no-index --find-links ..\/input\/detectron-05\/whls ","2ec63632":"import torch\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.data.datasets import register_coco_instances\nfrom detectron2.data import DatasetCatalog\nimport cv2\nimport pycocotools.mask as mask_util\nimport numpy as np\n","77835be6":"from sartorius_vis import show_predictions, show_zoomed","d8696607":"cfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\"))\ncfg.INPUT.MASK_FORMAT='bitmask'\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 3 \ncfg.MODEL.WEIGHTS = '..\/input\/sartorius-models\/model_2696.pth'  \ncfg.TEST.DETECTIONS_PER_IMAGE = 1000\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5\npredictor = DefaultPredictor(cfg)\n\nregister_coco_instances('sartorius_val',{},'..\/input\/sartorius-cell-instance-segmentation-coco\/annotations_val.json', \n                        '..\/input\/sartorius-cell-instance-segmentation\/')\n\nval_ds = DatasetCatalog.get('sartorius_val')","ce699a51":"##Helper functions\ndef read_target_masks(item):\n    enc_targs = list(map(lambda x:x['segmentation'], item['annotations']))\n    #enc_targs = mask_util.frPyObjects(enc_targs, 520, 704)\n    tars = torch.tensor(mask_util.decode(enc_targs)).cuda()\n    return tars.permute(2,0,1).bool()\n\ndef get_preds_and_tars(item):\n    im = cv2.imread(item['file_name'])\n    pred = predictor(im) \n    pred_masks = pred['instances'].pred_masks\n    tars = read_target_masks(item)\n    return item['file_name'], pred_masks, tars\n\n\ndef precision_at(threshold, iou):\n    matches = iou > threshold\n    true_positives = np.sum(matches, axis=1) == 1  # Correct objects\n    false_positives = np.sum(matches, axis=0) == 0  # Missed objects\n    false_negatives = np.sum(matches, axis=1) == 0  # Extra objects\n    return np.sum(true_positives), np.sum(false_positives), np.sum(false_negatives)\n\ndef score(pred, targ):\n    pred_masks = pred['instances'].pred_masks.cpu().numpy()\n    enc_preds = [mask_util.encode(np.asarray(p, order='F')) for p in pred_masks]\n    enc_targs = list(map(lambda x:x['segmentation'], targ['annotations']))\n    ious = mask_util.iou(enc_preds, enc_targs, [0]*len(enc_targs))\n    prec = []\n    for t in np.arange(0.5, 1.0, 0.05):\n        tp, fp, fn = precision_at(t, ious)\n        p = tp \/ (tp + fp + fn)\n        prec.append(p)\n    return np.mean(prec)\ndef score_all():\n    scores = []\n    for item in val_ds:\n        im =  cv2.imread(item['file_name'])\n        pred = predictor(im)       \n        \n        sc = score(pred, item)\n        scores.append(sc)\n        \n    return np.mean(scores)","7945a383":"show_predictions(*get_preds_and_tars(val_ds[0]))","867be19f":"show_zoomed(*get_preds_and_tars(val_ds[0]))","6badb6b4":"show_predictions(*get_preds_and_tars(val_ds[1]))","6f3dd805":"show_zoomed(*get_preds_and_tars(val_ds[1]))","6658a6dc":"score_all()","9f10cb83":"## Lets zoom in to better view all the individual predicted cells","91245d64":"## Finally calculate score across all validation files:","c3e2354c":"### A quick example on displaying detailed predictions from a model and calculating validation score\nhttps:\/\/www.kaggle.com\/slawekbiel\/sartorius-vis\/ script is used for visualisation. You need to do File->Add utility script to use it.","3c76889a":"## Show a sample cell with the score breakdwn","d6dcc85b":"## Do the same to another file"}}