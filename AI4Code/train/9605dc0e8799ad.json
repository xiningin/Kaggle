{"cell_type":{"050433af":"code","6fae3d36":"code","33b30459":"code","90300152":"code","ac50bb5b":"code","8600c50d":"code","1b9a48e4":"code","50f9baa0":"code","a35d5108":"code","2f8cf23e":"code","a33e756d":"code","165ad5ce":"code","a3d5974d":"code","9aa193b6":"code","6b6d2099":"code","c87e6c8d":"code","11bcb1fe":"code","46dde672":"code","422f5576":"code","93b89a68":"code","f54bdbf3":"markdown","dd795635":"markdown","a33f5073":"markdown","62e59d0e":"markdown","616dc953":"markdown","1bf5bd34":"markdown","96e6ea01":"markdown","e9148b09":"markdown","93e75a15":"markdown","6236d404":"markdown","3b4aefa1":"markdown","4710c9eb":"markdown","aaa0a6ab":"markdown","f31fc0f5":"markdown","375a2c0a":"markdown","849e97f5":"markdown","ba44da31":"markdown","ac56c213":"markdown","3f5ca23d":"markdown","d8f9317f":"markdown"},"source":{"050433af":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","6fae3d36":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","33b30459":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","90300152":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","ac50bb5b":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","8600c50d":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Child 1 Genome.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Child 1 Genome.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Child 1 Genome.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","1b9a48e4":"df1.head(5)","50f9baa0":"plotPerColumnDistribution(df1, 10, 5)","a35d5108":"plotCorrelationMatrix(df1, 8)","2f8cf23e":"plotScatterMatrix(df1, 6, 15)","a33e756d":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Child 2 Genome.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Child 2 Genome.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'Child 2 Genome.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","165ad5ce":"df2.head(5)","a3d5974d":"plotPerColumnDistribution(df2, 10, 5)","9aa193b6":"plotCorrelationMatrix(df2, 8)","6b6d2099":"plotScatterMatrix(df2, 6, 15)","c87e6c8d":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Child 3 Genome.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/Child 3 Genome.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'Child 3 Genome.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","11bcb1fe":"df3.head(5)","46dde672":"plotPerColumnDistribution(df3, 10, 5)","422f5576":"plotCorrelationMatrix(df3, 8)","93b89a68":"plotScatterMatrix(df3, 6, 15)","f54bdbf3":"Now you're ready to read in the data and use the plotting functions to visualize the data.","dd795635":"Let's take a quick look at what the data looks like:","a33f5073":"Correlation matrix:","62e59d0e":"Correlation matrix:","616dc953":"### Let's check 2nd file: \/kaggle\/input\/Child 2 Genome.csv","1bf5bd34":"Scatter and density plots:","96e6ea01":"Let's take a quick look at what the data looks like:","e9148b09":"Scatter and density plots:","93e75a15":"Scatter and density plots:","6236d404":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","3b4aefa1":"### Let's check 3rd file: \/kaggle\/input\/Child 3 Genome.csv","4710c9eb":"Distribution graphs (histogram\/bar graph) of sampled columns:","aaa0a6ab":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","f31fc0f5":"Correlation matrix:","375a2c0a":"Distribution graphs (histogram\/bar graph) of sampled columns:","849e97f5":"Distribution graphs (histogram\/bar graph) of sampled columns:","ba44da31":"There are 5 csv files in the current version of the dataset:\n","ac56c213":"### Let's check 1st file: \/kaggle\/input\/Child 1 Genome.csv","3f5ca23d":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","d8f9317f":"Let's take a quick look at what the data looks like:"}}