{"cell_type":{"bdf35b6b":"code","56408708":"code","89a74925":"code","0f443130":"code","51c88bf4":"code","d8a738c1":"markdown"},"source":{"bdf35b6b":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom matplotlib.animation import FuncAnimation","56408708":"def critical_z(alpha=0.05, tail=\"two\"):\n    \"\"\"\n    Given significance level, compute critical value.\n    \"\"\"\n    if tail == \"two\":\n        p = 1 - alpha \/ 2\n    else:\n        p = 1 - alpha\n        \n    return norm.ppf(p)","89a74925":"fig, ax = plt.subplots(figsize=(16, 6))\n\ndef plot_dist(ax, frame):\n    ax.cla()\n    \n    # one-tailed z-test\n    h_0 = 0.8\n    h_1 = 0.75\n    \n    alpha = 0.05 \n    \n    n = list(range(1, 1000)) [frame]\n    \n    tail = \"two\"\n    se = np.sqrt(h_0 * (1 - h_0) \/ n)\n\n    z = critical_z(alpha=alpha, tail=tail)\n    \n    lower = h_0 - z * se\n    upper = h_0 + z * se\n    \n    lower_a = norm.cdf(lower, h_1, se)\n    upper_a = 1 - norm.cdf(upper, h_1, se)\n    \n    x = np.linspace(0.6, 0.9, 10000)\n    norm_0 = norm.pdf(x, loc=h_0, scale=se)\n    norm_1 = norm.pdf(x, loc=h_1, scale=se)\n    ax.plot(x, norm_0, label='$H_0$')\n    ax.plot(x, norm_1, label='$H_1$')\n    ax.set_xlabel(\"sampling_statistic\")\n    ax.spines[\"top\"].set_visible(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"left\"].set_visible(False)\n    ax.spines[\"bottom\"].set_visible(False)\n    \n    if tail == \"two\":\n        ax.axvline(lower, linestyle=\"--\")\n        ax.axvline(upper, linestyle=\"--\")\n        ax.fill_between(x, [0], norm_1, where=x > upper, facecolor='C9', interpolate=True, alpha=0.3)\n        ax.fill_between(x, [0], norm_1, where=x < lower, facecolor='C9', interpolate=True, alpha=0.3, label=\"1 - \\u03B2: power\")\n        ax.fill_between(x, [0], norm_1, \n                        where=(x > lower) & (x < upper), facecolor='C3', \n                        interpolate=True, alpha=0.3, label=\"\\u03B2: Type II error\")\n        power = lower_a + upper_a\n    \n    elif tail == \"left\":\n        ax.axvline(lower, linestyle=\"--\")\n        ax.fill_between(x, [0], norm_1, where=x < lower, facecolor='C1', interpolate=True, alpha=0.2, label=\"1 - \\u03B2: power\")\n        ax.fill_between(x, [0], norm_1, where=x > lower, facecolor='C9', interpolate=True, alpha=0.2, label=\"\\u03B2: Type II err\")\n        power = lower_a\n    \n    elif tail == \"right\":\n        ax.axvline(upper, linestyle=\"--\")\n        ax.fill_between(x, [0], norm_1, where=x > upper, facecolor='C1', interpolate=True, alpha=0.2, label=\"1 - \\u03B2: power\")\n        ax.fill_between(x, [0], norm_1, where=x > upper, facecolor='C9', interpolate=True, alpha=0.2, label=\"\\u03B2: Type II err\")\n        power = upper_a\n    ax.legend(frameon=False, loc=\"upper left\")\n    ax.set_xlabel(\"effect_size=%.2f, \\u03B1=%.2f, sample_size=%i, power=%.3f\"%(h_1-h_0, alpha, n, power))\n    ax.set_ylim(-1, 35)\n    ax.set_xlim(0.6, 0.9)\n    return ax\n\nplot_dist(ax, 600)\n\n# uncomment to save picture\n# plt.savefig(\"null_false.png\")","0f443130":"fps = 48\nduration = 3\n\nend = 999\nbatch = int(end \/ (duration * fps))\nprint(\"batch\", batch)\n\nframes = []\nfor i in range(end \/\/ batch + 1):\n    idx_end = min(end - 1, (i + 1) * batch)\n    frames.append(idx_end)","51c88bf4":"def update(i):\n    print('frame %i'%i, end=\"\\r\")\n    return plot_dist(ax, i)\n\nanim = FuncAnimation(fig, update, frames=frames, interval=1000 \/ fps)\nfname = 'power&sample_size_%is_%ifps.gif'%(duration, fps)\n\n# uncomment to save animation\n# anim.save(fname, dpi=80, writer='imagemagick')\nprint(fname)\n\nplt.close()","d8a738c1":"#### Animation"}}