{"cell_type":{"9fc3359c":"code","a7a5afa1":"code","8042bee6":"code","2e77f5e0":"code","6c2abb7d":"code","a70ecd43":"code","13abd060":"code","1070cfc6":"code","e330fa50":"code","e4c7d7b9":"code","89ca98af":"code","4608bac8":"code","da05d58d":"code","649984d2":"code","9fea046c":"code","7e68071d":"code","663066a8":"code","c838eced":"code","3d1afe16":"code","a6d042cb":"code","54cafd11":"code","5880f12e":"code","b23a698c":"code","14670cb6":"code","705b2dfb":"code","a9d2672b":"markdown","83039644":"markdown","350a4e94":"markdown","b7101699":"markdown","90c10f80":"markdown","0e8052f6":"markdown","05e95068":"markdown","0c62f7a2":"markdown","de1e278f":"markdown","021056a7":"markdown","d171a5da":"markdown","170f5136":"markdown","d84477f9":"markdown","29a1d7ff":"markdown","7a9dba2a":"markdown","d1d130f1":"markdown","53350322":"markdown"},"source":{"9fc3359c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a7a5afa1":"import sklearn\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nimport matplotlib.pyplot as plt ","8042bee6":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","2e77f5e0":"train.head()","6c2abb7d":"test.head()","a70ecd43":"sample_submission.head()","13abd060":"train.info()\ntest.info()","1070cfc6":"train['date_time'] = pd.to_datetime(train['date_time'], format = \"%Y-%m-%d %H:%M:%S\")\ntest['date_time'] = pd.to_datetime(test['date_time'], format= \"%Y-%m-%d %H:%M:%S\")\ntarget_name = train.columns[-3:].values # \u76ee\u7684\u5909\u6570\u540d\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\ntarget_name","e330fa50":"def makeFeatures(df):\n    df[\"month\"] = df[\"date_time\"].dt.month # \u6708\n    df[\"day_of_week\"] = df[\"date_time\"].dt.dayofweek # \u66dc\u65e5\uff08\u6708\u66dc\u59cb\u307e\u308a\uff09\n    df[\"day_of_year\"] = df[\"date_time\"].dt.dayofyear # 1\u67081\u65e5\u304b\u3089\u6570\u3048\u3066\u4f55\u65e5\u76ee\u304b\n    df[\"hour\"] = df[\"date_time\"].dt.hour # \u6642\n    df[\"quarter\"] = df[\"date_time\"].dt.quarter # \u56db\u534a\u671f\n    df[\"week_of_year\"] = df[\"date_time\"].dt.isocalendar().week.astype(\"int\") # 1\u67081\u65e5\u304b\u3089\u6570\u3048\u3066\u4f55\u9031\u76ee\u304b\n    df[\"is_sprint\"] = df[\"month\"].isin([3, 4, 5]) # \u6625\n    df[\"is_summer\"] = df[\"month\"].isin([6, 7, 8]) # \u590f\n    df[\"is_autumn\"] = df[\"month\"].isin([9, 10, 11]) # \u79cb\n    df[\"is_winter\"] = df[\"month\"].isin([1, 2, 12]) # \u51ac\n    df[\"working_hours\"] =  df[\"hour\"].isin(np.arange(8, 19, 1)).astype(\"int\") # \u52e4\u52d9\u6642\u9593(8\u6642\uff5e19\u6642)\n    df[\"is_weekend\"] = (train[\"date_time\"].dt.dayofweek >= 5).astype(\"int\") # \u9031\u672b\n    return df","e4c7d7b9":"train = makeFeatures(train)\ntest = makeFeatures(test)","89ca98af":"train['date_time'] = train['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9\ntest['date_time'] = test['date_time'].astype('datetime64[ns]').astype(np.int64)\/10**9","4608bac8":"columns = test.columns\nX = train[columns].values\nX_test = test[columns].values\ntarget0 = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget1 = train['target_benzene'].values.reshape(-1,1)\ntarget2 = train['target_nitrogen_oxides'].values.reshape(-1,1)\ntarget = np.concatenate([target0, target1, target2], 1)","da05d58d":"X_df = pd.DataFrame(data=X, columns=columns)\nX_df.head()","649984d2":"X_test_df = pd.DataFrame(data=X_test, columns=columns)\nX_test_df.head()","9fea046c":"# \u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\uff1a{train.shape[0]}\u884c{train.shape[1]}\u5217\")\nprint(f\"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u6570\uff1a{train.shape[0]}\u500b\")\nprint()\nprint(f\"\u7279\u5fb4\u91cf\u306e\u30c7\u30fc\u30bf\uff1a{X.shape[0]}\u884c{X.shape[1]}\u5217\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u6570\uff1a{X.shape[1]}\u500b\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u540d\u524d\uff1a{columns.values}\")\nprint()\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u30c7\u30fc\u30bf\uff1a{target.shape[0]}\u884c{target.shape[1]}\u5217\")\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u6570\uff1a{target.shape[1]}\u500b\")\nprint(f\"\u76ee\u7684\u5909\u6570\u306e\u540d\u524d\uff1a{train.columns[-3:].values}\")","7e68071d":"# \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\uff1a{test.shape[0]}\u884c{test.shape[1]}\u5217\")\nprint(f\"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u6570\uff1a{test.shape[0]}\u500b\")\nprint()\nprint(f\"\u7279\u5fb4\u30c7\u30fc\u30bf\uff1a{X_test.shape[0]}\u884c{X_test.shape[1]}\u5217\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u6570\uff1a{X_test.shape[1]}\u500b\")\nprint(f\"\u7279\u5fb4\u91cf\u306e\u7a2e\u985e\uff1a{columns.values}\")","663066a8":"# \u5185\u5bb9\u3092\u8868\u793a\u3059\u308b\nprint(f\"\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\uff1a{sample_submission.shape[0]}\u884c{sample_submission.shape[1]}\u5217\")\nprint(f\"\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u6570\uff1a{sample_submission.shape[0]}\u500b\")","c838eced":"# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n#mlp = MLPRegressor(hidden_layer_sizes=(256, 16), max_iter=500, random_state=1, verbose=False)\nmlp = RandomForestRegressor(n_estimators=50, max_depth=5, random_state=1, verbose=0, min_samples_split=6)","3d1afe16":"def print_results(results):\n    print('BEST PARAMS: {}\\n'.format(results.best_params_))\n    rank = results.cv_results_['rank_test_score']\n    arg = np.argsort(rank)\n    rank = np.sort(rank)\n    means = results.cv_results_['mean_test_score'][arg]\n    stds = results.cv_results_['std_test_score'][arg]\n    params = np.array(results.cv_results_['params'])[arg]\n\n    for r, mean, std, param in zip(rank, means, stds, params):\n        print('No{} : {} (+\/-{}) for {}'.format(r, round(mean, 3), round(std * 2, 3), param))\n\ndef gridSearch(model, X_train, y_train):\n    paramters = {\n            \"n_estimators\": [i for i in range(10, 100, 5)],\n            \"max_depth\":[i for i in range(5, 10)]\n    }\n    \n    grid = GridSearchCV(\n        estimator = model,\n        param_grid = paramters,\n        scoring = 'neg_root_mean_squared_error',\n        cv = 5,\n        verbose = 0\n    )\n    grid.fit(X_train, y_train)\n    print_results(grid)","a6d042cb":"#gridSearch(mlp, X, target)","54cafd11":"# \u8a55\u4fa1\u3059\u308b\u6307\u6a19\nscore_funcs = [\n    'neg_root_mean_squared_error'\n]\n\nscore = cross_validate(mlp, X, target, scoring='neg_root_mean_squared_error', cv=5, n_jobs=-1, verbose=3)\nprint(np.mean(score['test_score']))","5880f12e":"mlp.fit(X, target)","b23a698c":"pred = mlp.predict(X_test)\nsample_submission[sample_submission.columns[1:]] = pred\nsample_submission.head()","14670cb6":"sample_submission.to_csv('submission.csv', index=False)","705b2dfb":"train_pred = mlp.predict(X)\nplt.figure(figsize=(16, 20))\nfor i, name in enumerate(target_name):\n    plt.subplot(3, 1, i + 1)\n    plt.plot(target[:500, i])\n    plt.plot(train_pred[:500, i])\n    plt.title(name)","a9d2672b":"\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u69cb\u7bc9","83039644":"\u4e88\u6e2c\u3057\u305f\u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b","350a4e94":"\u7279\u5fb4\u91cf\u306e\u4e00\u3064\u3001date_time\u3092str\u578b\uff08\u6587\u5b57\u5217\u578b\uff09\u304b\u3089datetime\u578b\u306b\u5909\u63db\u3059\u308b","b7101699":"\u5b9f\u969b\u306b\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u5b66\u7fd2\u3059\u308b\u3002\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u884c\u3063\u305f\u6642\u3068\u540c\u69d8\u306b5\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u884c\u3046\u3002","90c10f80":"## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3088\u308b\u5b66\u7fd2","0e8052f6":"\u5b66\u7fd2\u7528\u3001\u30c6\u30b9\u30c8\u7528\u3001\u63d0\u51fa\u7528\u30c7\u30fc\u30bf\u3092\u305d\u308c\u305e\u308c\u8aad\u307f\u8fbc\u3080","05e95068":"\u5b66\u7fd2\u3057\u305f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u4e88\u6e2c\u3059\u308b\u3002","0c62f7a2":"\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306f3\u3064\u306e\u9805\u76ee\uff08target_carbon_monoxide, target_benzene, target_nitrogen_oxides\uff09\u304c\u76ee\u7684\u5909\u6570\u3068\u306a\u3063\u3066\u3044\u3066\u3001\u306e\u3053\u308a\u304c\u7279\u5fb4\u91cf\uff08\u8aac\u660e\u5909\u6570\uff09\u3068\u306a\u3063\u3066\u3044\u308b\u3002  \n\u307e\u305f\u3001\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u306f\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u304b\u30893\u3064\u306e\u76ee\u7684\u5909\u6570\u3092\u9664\u3044\u305f\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002  \n\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u304b\u3089\u7279\u5fb4\u91cf\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\uff08X\uff09\u3068\u76ee\u7684\u5909\u6570\u3060\u3051\u53d6\u308a\u51fa\u3057\u305f\u30c7\u30fc\u30bf\uff08target\uff09\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002","de1e278f":"\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u3081\u308b\u305f\u3081\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u884c\u3044\u3001\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u3002\u307e\u305f\u30015\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u904e\u5b66\u7fd2\u3092\u9632\u304e\u6b63\u3057\u304f\u7cbe\u5ea6\u3092\u8a55\u4fa1\u3059\u308b\u3002","021056a7":"\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u6c17\u8c61\u30c7\u30fc\u30bf\u304b\u3089\u3001carbon monoxide\uff08\u4e00\u9178\u5316\u70ad\u7d20\uff09\u3001benzene\uff08\u30d9\u30f3\u30bc\u30f3\uff09\u3001nitrogen oxides\uff08\u7a92\u7d20\u9178\u5316\u7269\uff09\u306e3\u3064\u306e\u91cf\u3092\u4e88\u6e2c\u3059\u308b\u3002","d171a5da":"## \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","170f5136":"## \u524d\u51e6\u7406\u5f8c\u306e\u30c7\u30fc\u30bf\u78ba\u8a8d","d84477f9":"## \u5b66\u7fd2\u7d50\u679c","29a1d7ff":"\u300c\u6642\u9593\u300d\u306b\u95a2\u4fc2\u3059\u308b\u3001\u3055\u307e\u3056\u307e\u306a\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3059\u308b","7a9dba2a":"datetime\u578b\u306e\u7279\u5fb4\u91cf\u3092\u5b66\u7fd2\u306b\u7528\u3044\u308b\u305f\u3081\u3001int\u578b\uff08\u6574\u6570\u578b\uff09\u306b\u5909\u63db\u3059\u308b","d1d130f1":"\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306f\u76ee\u7684\u5909\u6570\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3059\u308b\u3002","53350322":"## \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n"}}