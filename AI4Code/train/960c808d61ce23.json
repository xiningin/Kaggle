{"cell_type":{"4d81ea77":"code","fe01e4d7":"code","41ced620":"code","5a570b2a":"code","e4412707":"code","b38a2776":"code","4b94a753":"code","1c3253b1":"code","5afaca6d":"code","2856cf43":"code","9f5aaeae":"code","fd1ef75d":"code","30967c47":"code","990f0366":"code","cc477794":"code","725f4e3f":"code","9de30c40":"code","b223d806":"code","67dfc6a3":"code","748927e7":"code","01114a41":"code","01139b19":"code","6ca8b4e9":"code","d384b55a":"code","842f5eac":"code","18d07a3e":"code","e9dd1068":"code","fcd016a2":"code","5c35df6f":"code","91c9e073":"code","7728bbe5":"markdown","fed68255":"markdown","7ba04eeb":"markdown","c409d1f3":"markdown","78a2945d":"markdown"},"source":{"4d81ea77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe01e4d7":"# music genre Classification\n# Goal of this project is to apply the concepts learned in CNN( \/ convolutional Neural Network)\n# here I m using GTZAN dataset ","41ced620":"# lets import libraries that we will be usings\n# we already have imported pandas and numpy\n\nimport matplotlib.pyplot as plt\nimport scipy\nimport librosa\nimport librosa.display\nimport IPython.display as ipd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pickle # model pickling for future use","5a570b2a":"# Loading dataset\n# we have 2 CSVs here, one containing features for 30 sec audio file, mean & variance for diff features we have, then\n# and one for 3 sec audio files. I will be using 3 sec audio\ndataf = pd.read_csv(\"..\/input\/gtzan-dataset-music-genre-classification\/Data\/features_3_sec.csv\")\ndataf.head()","e4412707":"dataf.tail()","b38a2776":"dataf.shape","4b94a753":"dataf.describe()","1c3253b1":"# removing filename column\ndataf = dataf.drop(labels='filename',axis=1)","5afaca6d":"# looking into what i have \nsample_audio = \"..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/pop\/pop.00003.wav\"\nsample, sample_rate = librosa.load(sample_audio)\n\n\nipd.Audio(sample, rate=sample_rate)","2856cf43":"sample, sample_rate = librosa.load(sample_audio, sr=16000)\nprint(len(sample),sample_rate)","9f5aaeae":"print(type(sample),sample_rate)\nsample, sample_rate = librosa.load(sample_audio, sr=16000)\n\n# plotting raw wave Files, here it is for Pop genre\nfig = plt.figure(figsize=(14,6))\nax1 = fig.add_subplot(211)\nax1.set_title(\"..\/input\/gtzan-dataset-music-genre-classification\/Data\/genres_original\/pop\/pop.00003.wav\")\nax1.set_xlabel('time')\nax1.set_ylabel('Amptitude')\nlibrosa.display.waveplot(sample)\nplt.show()","fd1ef75d":"# Spectrogram, we have this in images folder\n# way of representing signal loudness at diff freq\n# also known as Sonographs\n# when data is 3D then waterfall\n\nstft = librosa.stft(sample)\nstft_db = librosa.amplitude_to_db(abs(stft))\nplt.figure(figsize=(14,6))\nlibrosa.display.specshow(stft,sr=sample_rate,x_axis='time',y_axis='hz')\nplt.colorbar()","30967c47":"stft = librosa.stft(sample)\nstft_db = librosa.amplitude_to_db(abs(stft))\nplt.figure(figsize=(14,6))\nlibrosa.display.specshow(stft_db,sr=sample_rate,x_axis='time',y_axis='hz')\nplt.colorbar()","990f0366":"# Rolloff - feq below which a specified percentage of the total spectral lies \/ 85%\nfrom sklearn.preprocessing import normalize\n\nspectral_rolloff = librosa.feature.spectral_rolloff(sample+0.01,sr=sample_rate)[0]\nplt.figure(figsize=(14,6))\nlibrosa.display.waveplot(sample,sr=sample_rate,alpha=0.3)","cc477794":"# Zero crossing \nplt.figure(figsize=(14,6))\nplt.plot(sample[8000:12000])\nplt.grid()","725f4e3f":"#count\nzero_cross = librosa.zero_crossings(sample[8000:12000],pad=False)\nprint(\"Count {}\".format(sum(zero_cross)))","9de30c40":"class_list = dataf.iloc[:,-1] \nconvert = LabelEncoder()","b223d806":"y = convert.fit_transform(class_list)\ny","67dfc6a3":"dataf.iloc[:,:-1]","748927e7":"# scaling features\nfrom sklearn.preprocessing import StandardScaler\nfit = StandardScaler()\nX = fit.fit_transform(np.array(dataf.iloc[:,:-1],dtype=float))","01114a41":"# dividing into training and test Data\nX_train,x_test, Y_train, y_test = train_test_split(X,y,test_size=0.2)","01139b19":"print(len(Y_train),len(y_test))","6ca8b4e9":"# Using CNN algorithm\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Dropout\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint","d384b55a":"# building model\n\nmodel = Sequential()\n\nmodel.add(Dense(512,input_shape=(X_train.shape[1],),activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(10,activation='softmax'))\n\n\nmodel.summary()","842f5eac":"model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics='accuracy')","18d07a3e":"earlystop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=10,min_delta=0.0001)\nmodelcheck = ModelCheckpoint('best_model.hdf5',monitor='val_accuracy',verbose=1,save_best_only=True,mode='max')","e9dd1068":"history = model.fit(X_train,Y_train, validation_data=(x_test,y_test), epochs=600, callbacks=[earlystop,modelcheck], batch_size=128)","fcd016a2":"from matplotlib import pyplot \npyplot.plot(history.history['loss'], label='train') \npyplot.plot(history.history['val_loss'], label='test') \npyplot.legend()\npyplot.show()","5c35df6f":"#from keras.models import load_model\n#Model = load_model(\".\/best_model.hdf5\")","91c9e073":"test_loss, test_accuracy = model.evaluate(x_test,y_test,batch_size=128)\nprint(\"Test loss : \",test_loss)\nprint(\"\\nBest test accuracy : \",test_accuracy*100)","7728bbe5":"# Feature Extraction","fed68255":"We have genres :\n* Rock\n* Clasical\n* Disco\n* Hip-Hop\n* Jazz\n* Blues\n* Metal\n* Pop\n* Country\n* Reggae (hearing this first time :P)\n\nTotal 10","7ba04eeb":"<center>\u201c<b>The most exciting rhythms seem unexpected and complex, the most beautiful melodies simple and inevitable.<\/b>\u201d<br><t>\u2015 W.H. Auden, The Complete Works of W.H. Auden: Prose, Volume III, 1949-1955<\/center>","c409d1f3":"# Loading Datasets","78a2945d":"# Model Building"}}