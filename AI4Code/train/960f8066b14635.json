{"cell_type":{"23ac0587":"code","6de75476":"code","51eb84ec":"code","4d79c844":"code","a6030082":"code","b59c8e2b":"code","ee5e4c68":"code","e3ce0350":"code","a45ae1e8":"code","1082035c":"code","c8a96125":"code","4def4397":"code","99de1960":"code","032e4c14":"code","9834d5ea":"code","72063522":"code","b447a717":"code","501ab620":"code","df238700":"code","bb3de6f0":"code","22a1c9d2":"code","2614afc6":"code","7d16ce0a":"code","b95a0a57":"code","441ce9af":"code","a9f5ca3e":"code","8acd424a":"code","d5c13de6":"code","61b03fc9":"code","8f27b024":"code","cdba91bb":"code","a11118b4":"code","17b6d222":"code","bff4c698":"code","1cc8bc84":"code","873b5c7f":"code","dbd209ea":"code","22a2ab85":"code","8d873533":"code","1b4f7672":"code","81c3fb07":"code","612f4c65":"code","ddcad758":"code","704e612c":"code","eff96f17":"code","e78ca578":"code","29abd427":"code","a0233f0d":"code","3443c6d5":"code","a5574e95":"code","ca237c13":"code","45817890":"code","2758b30e":"code","5e882368":"code","74658d3b":"code","98d1f2fb":"code","9b30c5ba":"code","4468945d":"code","2e6a7e16":"code","d73440a2":"code","58c4a86b":"code","aacc265f":"code","12852273":"code","90d4510c":"code","7a954b15":"code","b292e4cc":"markdown","6ea1a261":"markdown","6fa1ba61":"markdown","88d2ba6b":"markdown","cbccd5d0":"markdown","e326adaa":"markdown","b9660d71":"markdown","38deb645":"markdown","32d54a01":"markdown"},"source":{"23ac0587":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6de75476":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","51eb84ec":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","4d79c844":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test","a6030082":"output = pd.DataFrame({'PassengerId':df_test.PassengerId})","b59c8e2b":"df_train.drop(['Name','PassengerId','Ticket'],axis=1,inplace=True)\ndf_test.drop(['Name','PassengerId','Ticket'],axis=1,inplace=True)","ee5e4c68":"df_train.isnull().sum()","e3ce0350":"df_test.isnull().sum()","a45ae1e8":"df_train.Sex = df_train.Sex.map( {'female': 1, 'male': 0} ).astype(int)\ndf_test.Sex = df_test.Sex.map( {'female': 1, 'male': 0} ).astype(int)","1082035c":"df_train.Age.fillna(int(df_train.Age.mean()),inplace=True)\ndf_test.Age.fillna(int(df_test.Age.mean()),inplace=True)","c8a96125":"df_train.Embarked.unique()","4def4397":"df_train.Embarked.fillna(df_train.Embarked.mode()[0],inplace=True)","99de1960":"floor_value = []\nfor i in df_train['Cabin']:\n    \n    try:\n        value = list(i)[0]\n        floor_value.append(value)\n        \n    except:\n        floor_value.append(i)\n        \ndf_train['Cabin'] = floor_value","032e4c14":"floor_value = []\nfor i in df_test['Cabin']:\n    \n    try:\n        value = list(i)[0]\n        floor_value.append(value)\n        \n    except:\n        floor_value.append(i)\n        \ndf_test['Cabin'] = floor_value","9834d5ea":"df_train['Cabin'].unique()","72063522":"df_test.Cabin.unique()","b447a717":"df_train.Cabin.fillna(df_train.Cabin.mode()[0],inplace=True)\ndf_test.Cabin.fillna(df_test.Cabin.mode()[0],inplace=True)","501ab620":"df_train.Cabin = df_train.Cabin.map( {'A': 0, 'B': 1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'T':7} ).astype(int)\ndf_test.Cabin = df_test.Cabin.map( {'A': 0, 'B': 1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'T':7} ).astype(int)","df238700":"df_train.Fare = df_train.Fare.apply(lambda x : int(x))\ndf_train.Age = df_train.Age.apply(lambda x : int(x))\n\ndf_test.Fare.fillna(df_test.Fare.median(),inplace=True)\ndf_test.Fare = df_test.Fare.apply(lambda x : int(x))\ndf_test.Age = df_test.Age.apply(lambda x : int(x))","bb3de6f0":"df_train.head()","22a1c9d2":"df_train.info()","2614afc6":"df_test.isnull().sum()","7d16ce0a":"df_test","b95a0a57":"df_train","441ce9af":"df_train.shape","a9f5ca3e":"x = ['Male','Female']\n\nf, axes = plt.subplots(1,2,figsize=(12,4))\ndf_train['Sex'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',shadow=True,labels=x,ax=axes[0])\naxes[0].set_title('Total Males\/Females onboard')\naxes[0].set_ylabel('')\nplt.bar(x,df_train.Sex.value_counts())\naxes[1].set_title('Number of males and females present')\naxes[1].set_ylabel('Number of passengers')\n\nplt.show()","8acd424a":"y = ['Dead','Survived']\ndf1 = pd.crosstab(df_train.Sex,df_train.Survived)\n\nf,axes = plt.subplots(1,2,figsize=(15,4))\n\nsns.barplot(y=df_train.Survived.value_counts(),x=y,ax=axes[0])\naxes[0].set_ylabel('Number of people')\naxes[0].set_title('Number of people: Dead vs Survived')\n\ndf1.plot(kind='bar',ax=axes[1])\naxes[1].set_title('Sex vs Survived Plot')\naxes[1].set_ylabel('Number of people')\naxes[1].set_xticklabels(['Male','Female'],rotation=0)\naxes[1].legend(y)\n\nplt.show()","d5c13de6":"df1 = pd.crosstab(df_train.Embarked,df_train.Survived)\ndf2  = df_train[['Embarked', 'Survived']].groupby('Embarked').mean()\n\nf, axes = plt.subplots(1,3,figsize=(18,4))\nsns.barplot(y=df_train.Embarked.value_counts(),x=df_train.Embarked.unique(),ax=axes[0])\naxes[0].set_xlabel('Embarked')\naxes[0].set_ylabel('Number of passengers')\naxes[0].set_title('Embarked status of passengers')\ndf1.plot(kind='bar',ax=axes[1])\naxes[1].set_xticklabels(['C','Q','S'],rotation=0)\naxes[1].set_ylabel('Number of passenger')\naxes[1].set_title('Embarked vs Survived Plot')\naxes[1].legend(['Dead','Survived'])\ndf2.plot(kind='bar',ax=axes[2])\naxes[2].set_xticklabels(['C','Q','S'],rotation=0)\naxes[2].set_ylabel('Probability')\naxes[2].set_title('Survival Probability')\n\nplt.show()","61b03fc9":"df1 = pd.crosstab(df_train.Pclass,df_train.Survived)\ndf2  = df_train[['Pclass', 'Survived']].groupby('Pclass').mean()\n\nf, axes = plt.subplots(1,3,figsize=(18,4))\nsns.barplot(y=df_train.Pclass.value_counts(),x=df_train.Pclass.unique(),ax=axes[0])\naxes[0].set_xlabel('Passenger class')\naxes[0].set_ylabel('Number of passengers')\naxes[0].set_title('Passenger Class Plot')\ndf1.plot(kind='bar',ax=axes[1])\naxes[1].set_xlabel('Passenger class')\naxes[1].set_xticklabels([1,2,3],rotation=0)\naxes[1].set_ylabel('Number of passenger')\naxes[1].set_title('Passenger Class vs Survived Plot')\naxes[1].legend(['Dead','Survived'])\ndf2.plot(kind='bar',ax=axes[2])\naxes[2].set_xlabel('Passenger class')\naxes[2].set_xticklabels([1,2,3],rotation=0)\naxes[2].set_ylabel('Probability')\naxes[2].set_title('Survival Probability')\n\nplt.show()","8f27b024":"df1 = pd.crosstab(df_train.Cabin,df_train.Survived)\ndf1.plot(kind='bar')\nplt.xticks(rotation=0)\nplt.title('Passenger Cabin vs Survied plot')\nplt.ylabel('Number of passengers')\nplt.legend(['Dead','Survived'])\nplt.show()\n","cdba91bb":"g = sns.FacetGrid(df_train, col='Survived')\ng.map(plt.hist, 'Age', bins=10)\ng.axes[0,0].set_ylabel('Number of passengers')\ng.fig.set_figwidth(12)\ng.fig.set_figheight(3)\nplt.show()","a11118b4":"df_train[\"Family\"] = df_train[\"SibSp\"] + df_train[\"Parch\"] \ndf_test[\"Family\"] = df_test[\"SibSp\"] + df_test[\"Parch\"]\ndf_train.drop(['SibSp','Parch'],axis=1,inplace=True)\ndf_test.drop(['SibSp','Parch'],axis=1,inplace=True)","17b6d222":"df_train = pd.get_dummies(df_train,drop_first=True)\ndf_test = pd.get_dummies(df_test,drop_first=True)","bff4c698":"df_train","1cc8bc84":"X_train = df_train.iloc[:,1:]\ny_train = df_train.Survived\nX_test = df_test.iloc[:,:]","873b5c7f":"!pip install --upgrade pip\n!pip install lazypredict","dbd209ea":"from lazypredict.Supervised import LazyClassifier\nfrom sklearn.model_selection import train_test_split\nX_train1, X_test1, y_train1, y_test1 = train_test_split(X_train, y_train,test_size=0.2,random_state =123)\nclf = LazyClassifier(verbose=0,ignore_warnings=True, custom_metric=None)\nmodels,predictions = clf.fit(X_train1, X_test1, y_train1, y_test1)\nmodels","22a2ab85":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import VotingClassifier","8d873533":"random_forest = RandomForestClassifier(n_estimators=100,criterion='entropy',max_features='sqrt')\nrandom_forest.fit(X_train, y_train)\nY_prediction = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)","1b4f7672":"print(acc_random_forest)","81c3fb07":"output['Survived'] = Y_prediction\noutput.to_csv('my_submission_rf.csv', index=False)","612f4c65":"reg = LogisticRegression(max_iter=1000)\nreg.fit(X_train, y_train)\nY_pred = reg.predict(X_test)\nacc_log = round(reg.score(X_train, y_train) * 100, 2)\nprint(len(Y_pred))","ddcad758":"print(acc_log)","704e612c":"decision_tree = DecisionTreeClassifier() \ndecision_tree.fit(X_train, y_train)  \nY_pred = decision_tree.predict(X_test)  \nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)","eff96f17":"acc_decision_tree","e78ca578":"output['Survived'] = Y_pred\noutput.to_csv('my_submission_dt.csv', index=False)","29abd427":"gaussian = GaussianNB() \ngaussian.fit(X_train, y_train)  \nY_pred = gaussian.predict(X_test)  \nacc_gaussian = round(gaussian.score(X_train, y_train) * 100, 2)","a0233f0d":"acc_gaussian","3443c6d5":"linear_svc = SVC(gamma='scale')\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train) * 100, 2)","a5574e95":"print(acc_linear_svc)","ca237c13":"test=KNeighborsClassifier(n_neighbors=1)\ntest.fit(X_train,y_train)\nypred=test.predict(X_test)\nacc_Kneighbour=test.score(X_train, y_train) * 100","45817890":"acc_Kneighbour","2758b30e":"import xgboost as xgb\nxgb_model=xgb.XGBClassifier(random_state=1,learning_rate=0.01)\nxgb_model.fit(X_train, y_train)\ny_pred = xgb_model.predict(X_test)\nacc_XG_boost = xgb_model.score(X_train,y_train)*100","5e882368":"print(acc_XG_boost)","74658d3b":"output['Survived'] = y_pred\noutput.to_csv('my_submission_xgb.csv', index=False)","98d1f2fb":"from sklearn.ensemble import AdaBoostClassifier\nada_model = AdaBoostClassifier()\nada_model.fit(X_train,y_train)\ny_pred = ada_model.predict(X_test)\nacc_ada_boost = ada_model.score(X_train,y_train)*100","9b30c5ba":"print(acc_ada_boost)","4468945d":"output['Survived'] = y_pred\noutput.to_csv('my_submission_abc.csv', index=False)","2e6a7e16":"from lightgbm import LGBMClassifier\nlgbm = LGBMClassifier()\nlgbm.fit(X_train, y_train)\ny_pred = lgbm.predict(X_test)\nacc_lgbm = lgbm.score(X_train,y_train)*100","d73440a2":"print(acc_lgbm)","58c4a86b":"output['Survived'] = y_pred\noutput.to_csv('my_submission_lgbm.csv', index=False)","aacc265f":"Model=[\"RandomForestClassifier\",\"DecisionTreeClassifier\",\"KNeighborsClassifier\",\"LogisticRegression\",\n       \"SVM\",\"Naive_bayes\",\"XG Boost\",\"Ada Boost\",\"LGBM\"]\nAccuracy=[acc_random_forest,acc_decision_tree,acc_Kneighbour,acc_log,\n          acc_linear_svc,acc_gaussian,acc_XG_boost,acc_ada_boost,acc_lgbm]\nplt.barh(Model,Accuracy)\nplt.show()","12852273":"vc_model = VotingClassifier([('clf1',random_forest),('clf2',test),('clf3',xgb_model),('clf4',lgbm)],voting='soft')\nvc_model.fit(X_train,y_train)\ny_pred = vc_model.predict(X_test)\nacc_vc = vc_model.score(X_train,y_train)*100","90d4510c":"acc_vc","7a954b15":"output['Survived'] = y_pred\noutput.to_csv('my_submission_vc.csv', index=False)","b292e4cc":"We can see that the number of passengers onboard were more from the Passenger Class 3. But when compared in respect to survival probability, we can find that probabilty of survival of passengers from Passenger Class 1 is more than that  of Passenger Class 2 and 3.","6ea1a261":"## Using Ensemble Model","6fa1ba61":"We can see that the number of passengers onboard the ship consists of 64.8% Males and 35.2% Females.","88d2ba6b":"## Data Cleaning","cbccd5d0":"From above, we can consider that the number of passengers embarked are more from Southampton (S) than those from Cherbourg (C) and Queensland (Q). The ratio of survival of passengers from Cherbourg is more than those of Queensland and Southampton.","e326adaa":"On visualising, we found that the number of passengers who survived are less than the number of passengers who dead. Also, the ratio of survival is more of females than males i.e. the survival probability of females is more than that of males.","b9660d71":"## Model Building and Predicting for Test Data","38deb645":"From above plot, we can see that number of passengers who survived were more mostly of the age group 0-10 while the passengers who dead were mostly of the age group 25-30 years when compared hand in hand to each other. ","32d54a01":"# Data Visualisation"}}