{"cell_type":{"1c164870":"code","331acccb":"code","e0daf5f9":"code","356c9b19":"code","5a071725":"code","adaf4cbf":"code","3302201b":"code","475ddb47":"code","b89d0075":"code","2be82350":"code","b699bea4":"code","3ae1d1d4":"code","171579fe":"code","78303879":"code","32c7fc2f":"code","eb335363":"markdown"},"source":{"1c164870":"import numpy as np\nimport pandas as pd\nimport fastai","331acccb":"df_train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv', index_col=0)\ndf_test  = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv', index_col=0)\ndf_sub   = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv', index_col=0)\ndf_train","e0daf5f9":"from fastai.tabular.all import *","356c9b19":"feature_names = df_train.filter(regex='feat').columns.to_list()","5a071725":"def cardinality(x):\n    return len(pd.value_counts(x))","adaf4cbf":"cat_names = []\ncont_names = []\n\nfor _f in feature_names:\n    if cardinality(df_train[_f])<400:\n        cat_names.append(_f)\n    else:\n        cont_names.append(_f)","3302201b":"def seed_everything(seed=9878732):\n    '''https:\/\/www.kaggle.com\/kaerunantoka\/titanic-pytorch-nn-tutorial'''\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True","475ddb47":"seed_everything()\n\nsplits = RandomSplitter(valid_pct=0.2)(range_of(df_train))\n\nto = TabularPandas(\n    df_train,\n    y_names=\"target\",\n    cat_names = cat_names,\n    cont_names = cont_names,\n    procs = [Categorify, FillMissing, Normalize],\n    splits=splits\n)\n\n# and convert it do dataloader with batch size of ...\nbatch_size = 4096\ndls = to.dataloaders(bs=batch_size)","b89d0075":"cbs = [ EarlyStoppingCallback(monitor='valid_loss', min_delta=0.0, patience=3),\n        SaveModelCallback(monitor='valid_loss', comp=None, min_delta=0.0, \n                          fname='fastai', every_epoch=False, \n                          with_opt=False, reset_on_fit=True)] \n \nconfig = tabular_config(ps=0.5, embed_p=0.0)\nlearn = tabular_learner(dls, metrics=accuracy, config=config, wd=5e-1, cbs=cbs, layers=[200, 42])","2be82350":"learn.lr_find()","b699bea4":"learn.fit_one_cycle(4, 1e-2)","3ae1d1d4":"learn.load('fastai')\nlearn.fit_one_cycle(4,1e-3)","171579fe":"learn.load('fastai')\nlearn.fit_one_cycle(4,1e-4)","78303879":"learn.load('fastai')","32c7fc2f":"dl = learn.dls.test_dl(df_test)\n\npred = learn.get_preds(dl=dl)\n\ndf_sub.loc[:,:] = pred[0].numpy()\n\ndf_sub.to_csv('submission.csv')","eb335363":"# Minimal example for how to use Fastai for tabular data\nFastai is a beautful library that makes Neural Network's accessible and that applies best practices by default. It makes it super easy and quick to create a baseline model including dense neural network with categorical feature embeddings."}}