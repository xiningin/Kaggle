{"cell_type":{"d6af27af":"code","4b233285":"code","8042ad80":"code","fba1f2f0":"code","485ca293":"code","8a5d2605":"code","d418df5d":"code","369c7f9b":"code","d33375e0":"code","e1a45502":"code","bb1c9bd9":"code","dd564a82":"markdown","f27d06bf":"markdown","e3504714":"markdown","b131ce1a":"markdown","d5c318f3":"markdown","407f34e0":"markdown","09dfd479":"markdown","9f091975":"markdown","fd9a6c98":"markdown","eda06dee":"markdown","f9f4a87f":"markdown","277204ce":"markdown"},"source":{"d6af27af":"!pip install xgboost","4b233285":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor","8042ad80":"from warnings import filterwarnings\nfilterwarnings(\"ignore\")","fba1f2f0":"df = pd.read_csv(\"..\/input\/kc-housesales-data\/kc_house_data.csv\")","485ca293":"df.head()","8a5d2605":"df.info()","d418df5d":"df = df.dropna()","369c7f9b":"df.drop([\"id\",\"date\"], axis = 1, inplace = True)","d33375e0":"def compML(df, y, alg):\n    \n    y = df.price.values.reshape(-1,1)\n    x = df.drop([\"price\"], axis = 1)\n    \n    scaler = MinMaxScaler()\n    x = scaler.fit_transform(x)\n    y = scaler.fit_transform(y)\n    \n    x_train, x_test, y_train, y_test = train_test_split(x, y , test_size = 0.2, random_state = 0, shuffle=True)\n    \n    model = alg().fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    \n    r2 = r2_score (y_test, y_pred)\n    \n    model_ismi = alg.__name__\n    \n    print(model_ismi, \"R2_Score ---> \", r2)","e1a45502":"models = [LinearRegression,\n          DecisionTreeRegressor, \n          KNeighborsRegressor, \n          MLPRegressor, \n          RandomForestRegressor, \n          GradientBoostingRegressor,\n          SVR,\n          XGBRegressor]","bb1c9bd9":"for i in models:\n    compML(df, \"price\", i)","dd564a82":"We do this to avoid unnecessary errors","f27d06bf":"Let's write our function that will try each of our regression","e3504714":"our best regressions ---> XGBRegressor, RandomForestRegressor  ","b131ce1a":"We take our data set","d5c318f3":"To be able to use our XGBRegressor regression, we need to load it","407f34e0":"We add our required libraries","09dfd479":"Let's write the regression names we will give below the loop","9f091975":"Let's take blank, unnecessary data in the dataset","fd9a6c98":"Let's look at the first 5 lines of our data set","eda06dee":"wrote the results of our regressions","f9f4a87f":"Let's throw the pillars we don't need","277204ce":"Let's get more detailed information about our data set"}}