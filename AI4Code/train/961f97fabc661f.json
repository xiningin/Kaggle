{"cell_type":{"4f27cbf4":"code","957d1698":"code","7da49bf6":"code","de3feb3b":"code","2b91bbc0":"code","32d18681":"code","162da816":"code","cff1f715":"code","1eee154a":"code","3a0e305b":"code","aeb320a2":"code","16536299":"code","6ec8ac45":"code","1f1edc58":"code","e30d1eec":"code","965d0587":"code","6a8e1f2d":"markdown","8792c58c":"markdown","021a0de5":"markdown","7e94acb0":"markdown","eaa86bec":"markdown"},"source":{"4f27cbf4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","957d1698":"# Recently FastAI is updated to version v2 so this code will update you on what has been changed\n# remember in kaggle you have to turn internet to download the new packages (settings->internet(on))","7da49bf6":"import pandas as pd\nimport numpy as np","de3feb3b":"import fastai; print(fastai.__version__)","2b91bbc0":"from fastai.vision import *","32d18681":"path = '\/kaggle\/input\/train-and-test-files\/train'\ntrain_data = pd.read_csv('\/kaggle\/input\/train-and-test-files\/train\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/train-and-test-files\/test.csv')","162da816":"# this will add flip, warp, zoom and rotation to the images\ntfms = get_transforms(do_flip = True, max_lighting = 0.2, max_zoom= 1.1, max_warp = 0.15, max_rotate = 45)","cff1f715":"emergency = ImageDataBunch.from_csv(path, folder= 'images', \n                              csv_labels = 'train.csv',\n                              ds_tfms = tfms,\n                              fn_col = 'image_names',\n                              label_col = 'emergency_or_not',\n                              bs = 16,\n                              size = 300).normalize(imagenet_stats)","1eee154a":"emergency.show_batch()\n# 0 indicating not emergency\n# 1 indicating emergency","3a0e305b":"# we will be using resnet 101 model\nlearn = cnn_learner(emergency, models.resnet101, metrics=[accuracy])","aeb320a2":"import torch\ntorch.cuda.set_device(0)","16536299":"#fir the data in the model\n# unfreeze will unfreeze all your layers\n# freeze will stop training of all the layers except last one\nlearn.unfreeze()\nlearn.fit_one_cycle(3)\nlearn.freeze()\nlearn.fit_one_cycle(6)","6ec8ac45":"import os\nos.makedirs('.\/test')","1f1edc58":"import shutil\n\n\ndef save_file_folder_test(x):\n  o = path + '\/images\/'+x['image_names']\n  shutil.copy(o, '.\/test')\n\ntest_data.apply(save_file_folder_test, axis=1)","e30d1eec":"#save this \nfnames = get_image_files('.\/test')\ndl = ImageList.from_folder('.\/test')\nfinal=[learn.predict(i)[1].item() for i in dl]\nfinal_submit = pd.DataFrame(columns=['image_names', 'emergency_or_not'])\nfinal_submit['image_names'] =[str(i).split('\/')[1] for i in fnames]\nfinal_submit['emergency_or_not'] = final","965d0587":"final_submit.to_csv('.\/submit.csv', index=False)","6a8e1f2d":"# Submission Accuracy-0.973684210526316","8792c58c":"# Importing the train and test csv files which contain the information whether the image is representing emergency vehicle or not","021a0de5":"# Setting Cuda to torch","7e94acb0":"# Resnet101 ","eaa86bec":"# Performing basic Augmentations"}}