{"cell_type":{"64a3d9bb":"code","73e481ba":"code","613623bf":"code","ca6f3559":"code","8983112a":"code","4b3cfeda":"code","dfbc5afb":"code","c6bb7804":"code","476b6825":"code","1f6cb46f":"code","5f300f7b":"code","37be4087":"code","5ce8b7ca":"code","9cab20e6":"code","6e01c64d":"code","0e0442a9":"code","c03c58bd":"code","760eee86":"code","09fd3cd5":"code","5bb12cb7":"code","1174763d":"code","6d2bb168":"code","ed1fe897":"markdown","05f1cb66":"markdown","1d099e3e":"markdown","a95fcba3":"markdown","d74b6033":"markdown","3d35c8b4":"markdown","d293067d":"markdown","6fa0d16e":"markdown","934c670b":"markdown","536d9eb0":"markdown","f7e2b2d2":"markdown","4aebb114":"markdown"},"source":{"64a3d9bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","73e481ba":"# ISO-8859-1 is single byte encoding for utf-8\ndf = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv', encoding = 'ISO-8859-1')\ndf.head()","613623bf":"# How many rows and columns \ndf.shape","ca6f3559":"df.info()","8983112a":"# Finding null values \ndf.isnull().sum()","4b3cfeda":"# Drop features with large amount of missing values\ndf.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1, inplace=True)","dfbc5afb":"df.head()","c6bb7804":"df.v1.value_counts(dropna=False)","476b6825":"# One Hot Encode the target variable \ny = pd.get_dummies(df['v1'], drop_first = True)\ndf = pd.concat([df, y], axis=1) \ndf.drop('v1', axis=1, inplace=True)","1f6cb46f":"df.head()","5f300f7b":"# use regular expressions to replace email addresses, URLs, phone numbers, other numbers\n# Replace email addresses with 'email'\nprocessed = df.v2.str.replace(r'^.+@[^\\.].*\\.[a-z]{2,}$', 'email')\n\n# Replace URLs with 'webaddress'\nprocessed = processed.str.replace(r'^http\\:\/\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\/\\S*)?$', 'webaddress')\n\n# Replace money symbols with 'moneysymb' (\u00a3 can by typed with ALT key + 156)\nprocessed = processed.str.replace(r'\u00a3|\\$', 'moneysymb')\n    \n# Replace 10 digit phone numbers (formats include paranthesis, spaces, no spaces, dashes) with 'phonenumber'\nprocessed = processed.str.replace(r'^\\(?[\\d]{3}\\)?[\\s-]?[\\d]{3}[\\s-]?[\\d]{4}$', 'phonenumbr')\n    \n# Replace numbers with 'numbr'\nprocessed = processed.str.replace(r'\\d+(\\.\\d+)?', 'numbr')\n\n# Remove punctuation\nprocessed = processed.str.replace(r'[^\\w\\d\\s]', ' ')\n\n# Replace whitespace between terms with a single space\nprocessed = processed.str.replace(r'\\s+', ' ')\n\n# Remove leading and trailing whitespace\nprocessed = processed.str.replace(r'^\\s+|\\s+?$', '')\n\n# change words to lower case - Free, FREE, free are all the same word\nprocessed = processed.str.lower()\n\n# Now let's see our data \nprint(processed)","37be4087":"from nltk.corpus import stopwords\n\n# Remove stop words from text messages\nstop_words = set(stopwords.words('english'))\nprocessed = processed.apply(lambda x: ' '.join(term for term in x.split() if term not in stop_words))","5ce8b7ca":"from nltk.stem import PorterStemmer\n\n# Remove word stems using a Porter stemmer\nps = PorterStemmer()\nprocessed = processed.apply(lambda x: ' '.join(ps.stem(term) for term in x.split()))","9cab20e6":"# Creating a bag of words using Scikit learn\n# We will extract top 1500 common words as features\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(max_features=1500) # Extracting top 1500 text only as features \nX = cv.fit_transform(processed).toarray() ","6e01c64d":"X.shape","0e0442a9":"from sklearn.model_selection import train_test_split\n\n# Divide our data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","c03c58bd":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train.values.ravel())\npredictions = logreg.predict(X_test)","760eee86":"# to show the percession of the model\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n\nprint('Accuracy: {}% \\n'.format(accuracy_score(y_test, predictions) * 100))\nprint('*'*100)\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","09fd3cd5":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 1)\n\nknn.fit(X_train, y_train.values.ravel())\n\npred = knn.predict(X_test)\n\nprint('Accuracy: {}% \\n'.format(accuracy_score(y_test, pred) * 100))\nprint('*'*100)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","5bb12cb7":"from sklearn.tree import DecisionTreeClassifier\n\ndtree = DecisionTreeClassifier()\n\ndtree.fit(X_train, y_train.values.ravel())\n\npred = dtree.predict(X_test)\n\n\nprint('Accuracy: {}% \\n'.format(accuracy_score(y_test, pred) * 100))\nprint('*'*100)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","1174763d":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier()\n\nrfc.fit(X_train, y_train.values.ravel())\nrfc_pred = rfc.predict(X_test)\n\nprint('Accuracy: {}% \\n'.format(accuracy_score(y_test, pred) * 100))\nprint('*'*100)\nprint(confusion_matrix(y_test, rfc_pred))\nprint(classification_report(y_test, rfc_pred))","6d2bb168":"from sklearn.naive_bayes import MultinomialNB\n\nmnb = MultinomialNB()\nmnb.fit(X_train, y_train.values.ravel())\n\npred = mnb.predict(X_test)\n\nprint('Accuracy: {}% \\n'.format(accuracy_score(y_test, pred)* 100))\nprint('*'*100)\nprint(confusion_matrix(y_test, pred))\nprint(classification_report(y_test, pred))","ed1fe897":"## Generating Features","05f1cb66":"## Pre-Processing","1d099e3e":"Much better now let's remove other useless data such as stop words.\n> Let's try removing stop words with **NLTK**","a95fcba3":"We will use Regular Expressions to remove and change some of the text data in v2,\n**for example:** \n> Email addresses, Web addresses, numbers, money symbol, punctuation, etc.. ","d74b6033":"## Reading and Understanding the Data ","3d35c8b4":"As our data is so large and are categorical features (Most ML models only take numerical features) we can use The **Bag of words** approach, which will help us extract features from text data for machine learning algorithms.\n> We will try creating a bag of words using Scikit learn","d293067d":"As we can see now we have X as our features which consists of **5572** row and **1500** col which are the top 1500 common words ","6fa0d16e":"## Building Model","934c670b":"Now let's use stemming to reduce the words to their word stem. \n> Let's try stemming using the PorterStemmer from **NLTK**","536d9eb0":"Let's try several classification algorithms, i will try:\n* Logistic Regression \n* K Nearest Neighbor Classifier \n* Decision Trees and Random Forest \n* Multinomial Naive Bayes Classifier","f7e2b2d2":"Now let's divide our data for our model \n> We will use **Scikit-learn**  ","4aebb114":"We can see here that several features contain many null values \n>**Unanmed: 2**, **Unanmed: 3** and **Unanmed: 4**"}}