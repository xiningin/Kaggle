{"cell_type":{"22ad3e2b":"code","53e41158":"code","b537ab29":"code","9bcf8ca9":"code","6a3e1e7c":"code","3701e597":"code","d812ab17":"code","fe31e2a1":"code","582f57e7":"code","fac95a58":"code","1ff132f4":"code","74576813":"code","3033cfc4":"code","f98451f1":"code","40287992":"code","2107419a":"code","2d055638":"code","e77803ed":"code","6d2b5628":"code","bfa7861c":"code","62dc1c77":"code","c9617cb2":"code","3aa54119":"code","c524d8d6":"code","4e97bd84":"code","442d155b":"code","2c98b860":"code","8763eaa2":"code","ccc6a4fd":"code","7409ace7":"code","8522f153":"markdown","017d278e":"markdown","11b58f82":"markdown","7fc7ab64":"markdown","ad81d9a7":"markdown","501e85ec":"markdown","c762be2c":"markdown","b0ab5719":"markdown","913df889":"markdown","440cfc90":"markdown","2e9f32ff":"markdown","ba156aea":"markdown","04c2ed7c":"markdown","c3f99c28":"markdown","cb6fab7b":"markdown","4c82528c":"markdown","2d6fa841":"markdown","b48c1039":"markdown","8eb09353":"markdown","681416fb":"markdown","48396ee5":"markdown","922f8513":"markdown","403dc141":"markdown","16231b11":"markdown","9e4c9bdd":"markdown","3470acc2":"markdown","0a820e96":"markdown","d770f845":"markdown"},"source":{"22ad3e2b":"import numpy as np ## for maths and scientific computations\nimport pandas as pd ## for data manupulation\nimport seaborn as sns ## for simple visaulization \nimport matplotlib.pyplot as plt ## for visaulization \nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","53e41158":"housing= pd.read_csv('\/kaggle\/input\/california-housing-prices\/housing.csv')","b537ab29":"housing.head()","9bcf8ca9":"housing.isna().sum()","6a3e1e7c":"sns.pairplot(housing, vars=['total_bedrooms', 'total_rooms','households','housing_median_age' ])","3701e597":"plt.figure(figsize=(10,8))\nhousing['total_bedrooms'].plot(kind='hist')\nplt.xlabel('Total bedrooms')","d812ab17":"print(\"Recall that the missing values in our dataset are: \\n \\n {}\".format(housing.isna().sum()))","fe31e2a1":"housing_df=housing.copy()\n\nhousing_cleaned=housing.dropna()","582f57e7":"housing_cleaned.isnull().sum()\n\n#Same as housing_cleaned.isna().sum","fac95a58":"housing_cleaned_2=housing.dropna(axis='columns')","1ff132f4":"housing_cleaned_2.isnull().sum()","74576813":"len(housing)","3033cfc4":"housing_cleaned_3=housing.dropna(axis='columns', thresh=200)","f98451f1":"housing_cleaned_3.isnull().sum()","40287992":"housing_cleaned_3=housing.dropna(axis='columns', thresh=20600)","2107419a":"housing_cleaned_3.isnull().sum()","2d055638":"housing_cleaned_4=housing.dropna(axis='rows', how='any')\n\n#Remove all rows which contain missing values..All 207 rows will be removed, remaining with 20433","e77803ed":"len(housing_cleaned_4)","6d2b5628":"housing_cleaned_4.isnull().sum()\n","bfa7861c":"housing_filled=housing.fillna(3)","62dc1c77":"housing_filled.isnull().sum()","c9617cb2":"housing_filled=housing.fillna(method='ffill')\n\n#housing_filled=housing.fillna(method='bfill')","3aa54119":"housing_filled[2820:2830]","c524d8d6":"from sklearn.impute import SimpleImputer\n\nhousing_numeric=housing.drop('ocean_proximity', axis=1) \n#Simple imputer only work with numeric features, so we drop the OCEAN_PROXIMITY\n\nmean_fill=SimpleImputer(missing_values=np.NaN,strategy='mean')\n\nmean_fill.fit(housing_numeric)","4e97bd84":"mean_filled=mean_fill.transform(housing_numeric)","442d155b":"mean_filled=pd.DataFrame(mean_filled, columns=housing_numeric.columns)","2c98b860":"mean_filled.head()","8763eaa2":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\niter_imputer = IterativeImputer()\niter_imputer","ccc6a4fd":"housing_imputed=iter_imputer.fit_transform(housing_numeric)","7409ace7":"housing_imputed=pd.DataFrame(housing_imputed, columns=housing_numeric.columns)","8522f153":"With Pandas, filling the missing values is very straight. Here is how you can fill the any missing value with a given number.","017d278e":"### A. Constant or Number Fill","11b58f82":"Another interesting thing to try is to determine if the row or column will be removed from the dataframe when we have at least ony missing value or all are missing.\n\nWhen:\n\n* `how` is set to `any`, remove any column or row which has any missing value\n\n* `how` is set to `all`, remove a column or row if all values are missing. ","7fc7ab64":"### B. Forward and Backward Fill","ad81d9a7":"*You drop Missing data, but how do you know you did it effectively?*\n\nReal world datasets are very messy and in many cases, having many missing values. Often, missing values are one of the most problem that Data Scientists and Machine Learning Engineers are likely to deal with day to day, and it is not straight to know the right strategy. We often just drops. \n\nThere are many ways to deal with missing values, but there is no one fit all strategy. The right strategy depend on the dataset, its size or number of examples you have, the size of missing values in concerned features, what can be tolerated and so on. Choosing the best strategy will help us to provide accurate insights, and avoid us from communicating wrong information. It can also saves us time that we would spend tuning the model, from the fact that good model comes from good data. \n\nI this tutorial, I will walk through the common ways to handle missing values. Let's get started!","501e85ec":"What we did above was to keep any column which has at least more than 200 Non missing values, and we don't have that. Let's see if we change `thresh`.","c762be2c":"The downside of this is that it can mislead. Let's take an example at index 2826. The house with total rooms of 154 has a total_bedrooms of 522, which is impossible. \n\n\n### C. Mean or Median Imputation\n\nAnother strategy that you may want to use in filling the missing values by mean or median of the values in a feature. \n\nIn this case, we will use `Scikit-Learn imputer method` to handle this.","b0ab5719":"You can see that most houses have bedrooms between 0 to 1000. Very few houses have over 1000 bedrooms.","913df889":"If you had few missing values, no doubt that it would be good to remove them completely to avoid imputing them with irrelevant values. *\"Quality over quantity\"*\n\n\nBut also you may wish to keep the data and perhaps find a better way to handle the missing values. \n\nOne of the best way out there (considering all the flaws of the above methods) is to fill the given missing value considering the values of other features. \n\n\nIn this case, we will use Scikit-Learn method called Iterative Imputer. This works on the principle of Linear regression. I will not explain that here, but here is how it is done.\n\nWhat you have to know is this estimates each feature from all the other features. \n\n> A strategy for imputing missing values by modeling each feature with missing values as a function of other features in a round-robin fashion. From Scikit-Learn Doc! \n","440cfc90":"You could also use the `ffill` (forward fill) or backward fill `bfill`, where you fill the values preeceding or back following the missing value","2e9f32ff":"Let's first import tools that we will need throught out the tutorial. ","ba156aea":"# A Comprehensive guide to handle missing values effectively working with messy data","04c2ed7c":"We only have missing values in total_bedrooms. It would be better to have many features missing values for this experiment, but let's go on.\n\nNow that we know the feature which is missing values, let's do some analysis around it and then go through the techniques to handle these values, but trying to understand what are doing.","c3f99c28":"## Handling Missing Values\n\nThere are number of methods to handle missing values, but basically, everything we ca do fall into the following:\n\n* Removing the missing values\n* Filling the missing values\n* Leaving the missing values as they are.\n\n\nStarting from the first one, if you were to remove the missing values, fairly simple. You can do the following, and you are done.","cb6fab7b":"What we did above was to say `remove any columns which doesn't have more than 20600 non-missing values` and since we do have that column (total bedrooms), it was removed. It has `20640-207=20433`.","4c82528c":"Now, we are done but we lost data :). Using the above method, we have removed all rows in which the concerned feature miss values. You can see the results that we no longer have any missing value in `total_bedroom`. \n\n### B. Removing missing values by a condition\n\nWhat if we had an option to remove the missing values by condition? Say you want to only remove the columns that contain missing values. Since we don't have more than 1 of such columns, this will not change the results, but that's something you can try at your end on different dataset.","2d6fa841":"The missing values will be filled in relevance to other features. \n\nAs we said before, the right strategy will depend on your problem and the amount of missing values you have and the size of your dataset. ","b48c1039":"`Total_bedroom` is now removed. This is can however led to the loss of data that could be meanigful despite that it contains NaNs. If you wanted more control, then you can use `thresh` to specify how non many missing values (minimum) to keep for a given column or row.","8eb09353":"## 1. Removing the missing values","681416fb":"## 3. Leaving the missing values as they are\n\nIn this case, you will leave the missing values as they are. You will only have to ensure you don't have something like `NaN` in your model input data because most machine learning models accept numeric inputs. \n\nThough using this strategy you will have empty values, at least you will not have introduced noise or eliminated important data. There is always a tradeoff! ","48396ee5":"You can do the same thing about median, just replace `median` in `SimpleImputer(missing_values=np.NaN,strategy='mean')` above. it will be `median_fill=SimpleImputer(missing_values=np.NaN,strategy='median')`. \n\nYou can also fill the missing values by the most frequent number in the feature. You will replace `most_frequent` into the Simple Imputer function. It will be like: `most_frequent_fill=SimpleImputer(missing_values=np.NaN,strategy='most_frequent')`. \n\nThe last thing about using Simple Imputer is that you can use it to use it to replace all missing values by a constant value. You will only need to say: `constant_fill=SimpleImputer(missing_values=np.NaN,strategy='constant')`.\n\nLike all previous strategies, you will have to inspect the results to be sure you are not mismanipulating your data. Let's look at the last strategy!","922f8513":"## This is the end!!  \n\n\nThanks for finishing this tutorial, I hope you learned something new or perhaps you found it helpful. If you want to stay in touch, check me on [LinkedIn](https:\/\/render.githubusercontent.com\/view\/www.linkedin.com\/in\/nyandwi\/) and [Twitter](https:\/\/twitter.com\/Jeande_d). ","403dc141":"## D. Multivariate Imputation (Iterative Imputation)","16231b11":"## Eploratory Data Analysis","9e4c9bdd":"### A. Removing Missing values completely","3470acc2":"## 2. Filling the missing values","0a820e96":"## Loading data","d770f845":"While our goal is not to explore every feature, you can see that the total bedrooms correlate with total rooms and households, and that make sense because the bedrooms are counted in total rooms and depends on the number of people in the house (`households`)"}}