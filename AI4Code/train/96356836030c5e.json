{"cell_type":{"b126ca5d":"code","4a9539f3":"code","9842d391":"code","34796cf2":"code","82c0c5ec":"code","850c2081":"code","9a816a43":"code","5b9b849f":"code","66ceb4ca":"code","38dee787":"code","fc550d14":"code","25fdc74c":"code","f952ef38":"code","fa93a8b9":"code","629433c7":"code","53e1029a":"code","c45f4dd6":"code","944cf6d5":"code","8daccb0f":"code","3ab6b7fc":"code","83c7472a":"code","302fbc35":"code","c6c2020d":"code","5bc34dd0":"code","710d0548":"code","ece5e1ef":"code","2977eec4":"code","3676e25f":"code","b3873c6b":"code","d84ab276":"code","6e1c287f":"code","98c86dd6":"code","1ff30bed":"code","5aeccd24":"code","1c21e861":"code","7b6a4d17":"code","886ee667":"code","b2bafc51":"code","4218426c":"code","4352e210":"code","c68fccf3":"code","6932ffba":"code","e6977b84":"code","c82c4d5e":"code","0e5b6059":"markdown","60f17dbd":"markdown","9701dfec":"markdown","4aeae3cd":"markdown","d962de14":"markdown","e87b7bef":"markdown","75732466":"markdown","ee35870b":"markdown","55174ca9":"markdown","c522a85d":"markdown"},"source":{"b126ca5d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\nwarnings.simplefilter(\"ignore\")","4a9539f3":"data = pd.read_csv(\"..\/input\/drug-classification\/drug200.csv\")\ndata.head()","9842d391":"# Looking for missing values in the dataset\ndata.isna().sum()","34796cf2":"data.shape","82c0c5ec":"data.info()","850c2081":"data.dtypes","9a816a43":"data['Drug'].value_counts()   ","5b9b849f":"plt.style.use(\"seaborn\")\nplt.figure(figsize=(15,8))\nplt.title(\"Genders\", fontsize=20, y=1.02)\nsns.countplot(x = data.Sex, palette=\"hot\")\nplt.show()","66ceb4ca":"plt.figure(figsize=(15,8))\nplt.title(\"Drug Types\", fontsize=20, y=1.02)\nsns.countplot(x = data.Drug, palette=\"hot\")\nplt.show()","38dee787":"plt.figure(figsize=(15,8))\nplt.title(\"Cholesterol\", fontsize=20, y=1.02)\nsns.countplot(x = data.Cholesterol, palette=\"hot\")\nplt.show()","fc550d14":"plt.figure(figsize=(15,8))\nplt.title(\"Blood Pressure\", fontsize=20, y=1.02)\nsns.countplot(x = data.BP, palette=\"hot\")\nplt.show()","25fdc74c":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(15,8))\nsns.histplot(data[\"Age\"], kde=True, bins=25, color=\"indianred\")\nplt.title(\"Age of the patients\", fontsize=20, y=1.02)\nax.set_xlabel(\"Age\",fontsize=15);","f952ef38":"data.head(1)","fa93a8b9":"plt.style.use(\"seaborn\")\nfig, ax = plt.subplots(figsize=(15,8))\nsns.histplot(data[\"Na_to_K\"], color=\"red\", kde=True, bins=25)\nplt.title(\"Sodium to Potassium ratio in patient's blood\", fontsize=20, y=1.02)\nax.set_xlabel(\"Na_to_K\",fontsize=15);","629433c7":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(1,2, figsize=(20,8)) \n\nsns.barplot(x = \"Sex\", y = \"Count\", hue = \"Cholesterol\", data = data.groupby([\"Sex\", \"Cholesterol\"]).size().reset_index(name = \"Count\"), palette=\"hot\",ax=ax[0])\nax[0].set_xlabel(\"Sex\",fontsize=14);\n\nsns.barplot(x = \"Sex\", y = \"Count\", hue = \"BP\", data = data.groupby([\"Sex\", \"BP\"]).size().reset_index(name = \"Count\"), palette=\"hot\", ax=ax[1]);\nax[1].set_xlabel(\"Sex\",fontsize=14);","53e1029a":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(1,2, figsize=(20,8)) \n\nsns.barplot(x = \"BP\", y = \"Count\", hue = \"Cholesterol\", data = data.groupby([\"BP\", \"Cholesterol\"]).size().reset_index(name = \"Count\"), palette=\"hot\", ax=ax[0])\nax[0].set_xlabel(\"BP\",fontsize=14);\n\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"Cholesterol\", data = data.groupby([\"Drug\", \"Cholesterol\"]).size().reset_index(name = \"Count\"), palette=\"hot\", ax=ax[1]);\nax[1].set_xlabel(\"Drug\",fontsize=14);","c45f4dd6":"plt.style.use(\"seaborn\")\nfig, ax =plt.subplots(1,2, figsize=(20,8)) \n\nsns.barplot(x = \"Sex\", y = \"Count\", hue = \"Drug\", data = data.groupby([\"Sex\", \"Drug\"]).size().reset_index(name = \"Count\"), palette=\"hot\", ax=ax[0])\nax[0].set_xlabel(\"Sex\",fontsize=14);\n\nsns.barplot(x = \"Drug\", y = \"Count\", hue = \"BP\", data = data.groupby([\"Drug\", \"BP\"]).size().reset_index(name = \"Count\"), palette=\"hot\", ax=ax[1]);\nax[1].set_xlabel(\"Drug\",fontsize=14);","944cf6d5":"plt.figure(figsize = (15,8))\nsns.swarmplot(x = \"Drug\", y = \"Age\", data = data, palette=\"hot_r\")\nplt.legend(data.Drug.value_counts().index)\nplt.title(\"Age - Drug\", fontsize=20, y=1.02)\nplt.show()","8daccb0f":"data.dtypes","3ab6b7fc":"# Converting the non-numeric values into numeric values\n\ndata['Sex'] = data['Sex'].map({'M': 1, 'F': 2})\ndata['BP'] = data['BP'].map({'HIGH': 1, \"NORMAL\" : 2, \"LOW\" : 3})\ndata['Cholesterol'] = data['Cholesterol'].map({'HIGH': 1, \"NORMAL\" : 2})\ndata[\"Drug\"] = data[\"Drug\"].map({\"DrugY\":1, \"drugC\":2, \"drugX\":3, \"drugA\":4, \"drugB\":5})","83c7472a":"data.head()","302fbc35":"# X data\nX = data.drop(\"Drug\", axis=1)\nX.head()","c6c2020d":"# y data\ny = data[\"Drug\"]\ny.head()","5bc34dd0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","710d0548":"len(X_train), len(X_test)","ece5e1ef":"# Scaling the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","2977eec4":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train, y_train)","3676e25f":"LogisticRegressionScore = lr.score(X_test, y_test)\nprint(\"Accuracy obtained by Logistic Regression model:\",LogisticRegressionScore*100)","b3873c6b":"# Having a look at the confusion matrix for Logistic Regression\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\ny_pred_lr = lr.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_lr)\nsns.heatmap(cf_matrix, annot=True, cmap=\"vlag_r\")\nplt.title(\"Confusion Matrix for Logistic Regression\", fontsize=14, fontname=\"Helvetica\", y=1.03);","d84ab276":"# Having a look at the classification report of Logistic Regression\n\nfrom sklearn import metrics\nprint(metrics.classification_report(y_test, y_pred_lr))","6e1c287f":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(X_train, y_train)","98c86dd6":"RandomForestClassifierScore = rfc.score(X_test,y_test)\nprint(\"Accacy obtained by Random Forest Classifier :\", RandomForestClassifierScore*100)","1ff30bed":"# Confusion Matrix of Random Forest Classifier\n\ny_pred_rfc = rfc.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_rfc)\nsns.heatmap(cf_matrix, annot=True, cmap=\"vlag_r\")\nplt.title(\"Confusion Matrix for Random Forest Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","5aeccd24":"print(metrics.classification_report(y_test, y_pred_rfc))","1c21e861":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)","7b6a4d17":"KNeighborsClassifierScore = knn.score(X_test, y_test)\nprint(\"Accuracy obtained by K Neighbors Classifier :\", KNeighborsClassifierScore*100)","886ee667":"# Confustion Matrix \n\ny_pred_knn = knn.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_knn)\nsns.heatmap(cf_matrix, annot=True, cmap=\"vlag_r\")\nplt.title(\"Confusion Matrix for K Neighbors Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","b2bafc51":"print(metrics.classification_report(y_test,y_pred_knn))","4218426c":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train, y_train)","4352e210":"DecisionTreeClassifierScore = dtree.score(X_test,y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier :\", DecisionTreeClassifierScore*100)","c68fccf3":"y_pred_dtree = dtree.predict(X_test)\ncf_matrix = confusion_matrix(y_test, y_pred_dtree)\nsns.heatmap(cf_matrix, annot=True, cmap=\"vlag_r\")\nplt.title(\"Confusion Metrix for Decision Tree Classifier\", fontsize=14, fontname=\"Helvetica\", y=1.03);","6932ffba":"print(metrics.classification_report(y_test, y_pred_dtree));","e6977b84":"plt.style.use(\"seaborn\")\n\nx = [\"LogisticRegression\", \n     \"RandomForestClassifier\", \n     \"KNeighborsClassifier\",\n     \"Decision Tree Classifier\"]\n\ny = [LogisticRegressionScore, \n     RandomForestClassifierScore, \n     KNeighborsClassifierScore,\n     DecisionTreeClassifierScore]\n\nfig, ax = plt.subplots(figsize=(15,8))\nsns.barplot(x=x,y=y, palette=\"hot\");\nplt.ylabel(\"Model Accuracy\")\nplt.xticks(rotation=40)\nplt.title(\"Model Comparison - Model Accuracy\", fontsize=15, fontname=\"Helvetica\", y=1.03);","c82c4d5e":"from sklearn import tree\n\nmodel = dtree.predict(X_test)\n\nplt.subplots(figsize=(30,40))\ntree.plot_tree(dtree)","0e5b6059":"## <span style=\"color:firebrick;\"> Random Forest Classifier <\/span>","60f17dbd":"## <span style=\"color:firebrick;\"> Importing Libraries <\/span>","9701dfec":"#### If you like my work, It will be really great of you to upvote this notebook!\n#### If not then you leaving a comment on what do I need to work on and improve will be really helpful!","4aeae3cd":"* **Age**: Age of the patient\n* **Sex**: Gender of the patients\n* **BP**: Blood Pressure of the patient\n* **Cholesterol**: Cholesterol of the patient\n* **Na_to_K**: Sodium to Potassium ratio in patient's blood\n* **Drug**: Drug type give to patients","d962de14":"## <span style=\"color:firebrick;\"> K Neighbors Classifier <\/span>","e87b7bef":"## <span style=\"color:firebrick;\"> Decision Tree Classifier <\/span>","75732466":"# <span style=\"color:firebrick;\"> Drug Classification \ud83d\udc89 <\/span>","ee35870b":"## <span style=\"color:firebrick;\"> Logistic Regression <\/span>","55174ca9":"## <span style=\"color:firebrick;\"> Loading up the data <\/span>","c522a85d":"## <span style=\"color:firebrick;\"> Splitting the data into training and test datasets <\/span>\nHere, we are trying to predict the Drug type that is to be prescribed to the patient using the given data. Hence, the \"Drug Type\" will be the y label and rest of the data will be the X or the input data."}}