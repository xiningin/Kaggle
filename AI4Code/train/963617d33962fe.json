{"cell_type":{"0014a3a3":"code","04430429":"code","e7da04f1":"code","c85668df":"code","07a335fe":"code","16fb9e88":"code","bd45ac7f":"code","12faaa92":"code","a8574291":"code","d6e102d0":"code","622bd91a":"code","c4f355da":"markdown","bf73a091":"markdown","89ef4d86":"markdown","266d7b6a":"markdown","c18d7adc":"markdown","44c2fc17":"markdown","5d77bfce":"markdown","1c909fc2":"markdown","de95259b":"markdown","7ea4da79":"markdown","23b76d5c":"markdown","0c395f80":"markdown"},"source":{"0014a3a3":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical","04430429":"train_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","e7da04f1":"sample_image = train_data.drop(columns='label').values[6].reshape(28,28)\nplt.imshow(sample_image, cmap=plt.cm.gray.reversed())","c85668df":"from collections import Counter\nx_test = test_data\ny_train = train_data['label'].values\ncounts = Counter(y_train)\ndigits_count = [counts.get(i) for i in range(10) ]\nplt.title('Digits count in training datasets')\nplt.xlabel('digit')\nplt.ylabel('count')\nplt.bar(range(10), digits_count)","07a335fe":"y_train = train_data['label'].values\nx_train = train_data.drop(columns='label').values\nx_test = x_test.values","16fb9e88":"x_train = x_train.astype(np.float32) \/ 255\nx_test = x_test.astype(np.float32) \/ 255","bd45ac7f":"y_train = to_categorical(y_train, 10)","12faaa92":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)","a8574291":"model = Sequential([\n    Conv2D(32, input_shape=(28,28,1), kernel_size=(4,4), activation='relu'),\n    MaxPooling2D(),\n    Conv2D(64, kernel_size=(4,4), activation='relu'),\n    MaxPooling2D(),\n    Dropout(0.5),\n    Flatten(),\n    Dense(32, activation='relu'),\n    Dropout(0.4),\n    Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","d6e102d0":"history = model.fit(x_train, y_train, epochs=16, batch_size=32)","622bd91a":"plt.figure(figsize=(20,5))\nplt.title('loss during training')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.plot(history.history['loss'])\n","c4f355da":"As you can see on the bar graph, counts of samples corresponding to each digit are similar.","bf73a091":"Model on training data reached accuracy equal 0.9964285492897034 and loss 0.01162335854808615","89ef4d86":"First we have to load data from csv files.","266d7b6a":"Reshaping our input data. We want that each image have the shape equal (28, 28, 1) (width, height, 1 - because gray scale)","c18d7adc":"Output shold be one-hot encoded\n\ne.g. for digits equal one it should be [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]","44c2fc17":"## Building model","5d77bfce":"## Preprocessing data","1c909fc2":"## Results","de95259b":"Splitting the data into input data and output data","7ea4da79":"The model will be builded using Keras.","23b76d5c":"## Examining data\nTraining data consist 42000 rows. In column called label say what our model should return as a prediction, when we give as an input rest of that row data. Each of the next column represents one pixel of the digit image.\nImage is 28px width and 28px height.\n\nExamplory digit is shown below.","0c395f80":"Normalizing the date.\nWe want to make that each pixel is in range (0, 1). It can help neural network learn more efficient."}}