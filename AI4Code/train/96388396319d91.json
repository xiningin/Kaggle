{"cell_type":{"dc2d9436":"code","62cb4a87":"code","eb437285":"code","7bdd8d37":"code","a0898bec":"code","d4e1e9f2":"code","9e701a9d":"code","77ef0543":"code","75df8eee":"code","8e544914":"code","12ff793e":"code","4d22b889":"code","461f48f4":"code","bb9349ea":"code","0f2d94e4":"code","d4fd579a":"code","0fdbdbcd":"code","04450c1f":"code","f8c56e4a":"code","55136ef7":"code","4f75df60":"code","db4fce19":"code","f42c5436":"code","e57cbc98":"code","aba1e1c2":"code","0e3005b5":"code","73e08ac6":"code","04f8f8cb":"code","042bb297":"code","d89083ff":"code","ca374380":"code","8b82532f":"code","7889c754":"code","24ac000b":"code","f42a01e3":"code","9dcd71f4":"code","03bdcbde":"code","9b2c941f":"code","0e461556":"code","68acc4a1":"code","94036b84":"code","17710484":"code","68eaff17":"code","07b5172c":"code","560baa0b":"code","12c33774":"code","dd38b666":"code","9d81ee66":"code","614e33a8":"code","38ebac1f":"code","7c1d3cd7":"code","03b3929c":"markdown","4f92afe6":"markdown","dab35370":"markdown","b91f2a10":"markdown","45e50a71":"markdown","ec9122f3":"markdown","026b3793":"markdown","d626851a":"markdown","cd8a4473":"markdown","ee3e0ffc":"markdown","345da092":"markdown","4fb28f28":"markdown","9098ac02":"markdown","d7792471":"markdown","5bccc371":"markdown","c9fd5cdd":"markdown","c6bee0a0":"markdown","e91aa280":"markdown","dd3a7711":"markdown","63624b04":"markdown","320ce8ff":"markdown","6b0677a6":"markdown","c9bae0ce":"markdown","99aa6462":"markdown","62f31b2f":"markdown","7273e614":"markdown","be0d3bfd":"markdown","39f3ed94":"markdown","0bf9b763":"markdown","8d49326d":"markdown","b15c33f4":"markdown","3467c571":"markdown","b49b2589":"markdown"},"source":{"dc2d9436":"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nplt.style.use(\"fivethirtyeight\")","62cb4a87":"img1 = cv2.imread(\"..\/input\/image-processing\/images.jpg\")\nimg1 = cv2.cvtColor(img1,cv2.COLOR_BGR2RGB)\nimg1.shape","eb437285":"plt.imshow(img1)\nplt.show()","7bdd8d37":"img2 = cv2.imread(\"..\/input\/image-processing\/cool-symbol-hand-in-rock-sign-vector-27738350.jpg\")\nimg2 = cv2.cvtColor(img2,cv2.COLOR_BGR2RGB)\nimg2.shape","a0898bec":"plt.imshow(img2)\nplt.show()","d4e1e9f2":"img2 = cv2.resize(img2,(100,100))\nplt.imshow(img2)\nplt.show()","9e701a9d":"y_offset = img1.shape[0] - 100\nx_offset = 0\nroi = img1[y_offset:img1.shape[0],x_offset:100]\nplt.imshow(roi)\nplt.show()","77ef0543":"img2_gray = cv2.cvtColor(img2,cv2.COLOR_RGB2GRAY)\nplt.imshow(img2_gray,cmap = 'gray') \n# we have to map above image to gray while displaying otherwise it would map to \n# some different color.\nplt.show()\n# Try it by removing cmap parameter from imshow().","75df8eee":"mask_inv = cv2.bitwise_not(img2_gray)\nplt.imshow(mask_inv,cmap = \"gray\")\nplt.show()","8e544914":"white_bg = np.full(img2.shape,255,dtype = np.uint8)\nwhite_bg.shape\nbg = cv2.bitwise_or(white_bg,white_bg,mask = mask_inv)\nprint(f\"Shape is {bg.shape}\")\nplt.imshow(bg)\nplt.show()","12ff793e":"# foreground \n\nfg = cv2.bitwise_or(img2,img2,mask = mask_inv)\nplt.imshow(fg)\nplt.show()","4d22b889":"final_roi = cv2.bitwise_or(roi,fg)\nplt.imshow(final_roi)\nplt.show()","461f48f4":"img1[y_offset:img1.shape[0],x_offset:100] = final_roi\nplt.imshow(img1)\nplt.show()","bb9349ea":"def show_img(img):\n    fig = plt.figure(figsize = (15,15))\n    ax = fig.add_subplot(111)\n    ax.imshow(img,cmap = 'gray')","0f2d94e4":"img = cv2.imread(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",0)\nprint(f\"Shape of image is {img.shape}\")\nshow_img(img)","d4fd579a":"# binary thresholding\nfig = plt.figure(figsize = (24,18))\nax1 = fig.add_subplot(221)\nret, th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)\nax1.imshow(th1,cmap = \"gray\")\nax1.set_title(\"Binary Thresholding\",fontdict={'fontsize':20})\n\nax2 = fig.add_subplot(222)\nret, th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)\nax2.imshow(th1,cmap = \"gray\")\nax2.set_title(\"Inverse Binary Thresholding\",fontdict={'fontsize':20})\n\nax3 = fig.add_subplot(223)\nret, th1 = cv2.threshold(img,127,255,cv2.THRESH_TRUNC)\nax3.imshow(th1,cmap = \"gray\",)\nax3.set_title(\"Truncate Thresholding\",fontdict={'fontsize':20})\n\nax4 = fig.add_subplot(224)\nth1 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,9,3)\nax4.imshow(th1,cmap = \"gray\")\nax4.set_title(\"Adaptive Thresholding\",fontdict={'fontsize':20})\n\nplt.show()","0fdbdbcd":"def load_img(path,color_code = 1):\n    img = cv2.imread(path,color_code).astype(np.float32)\/255\n    if color_code != 0:\n        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n    return(img)\ndef display_img(img):\n    fig = plt.figure(figsize = (12,10))\n    ax = fig.add_subplot(111)\n    ax.imshow(img,cmap = 'gray')","04450c1f":"img = load_img(\"..\/input\/image-processing\/cool-symbol-hand-in-rock-sign-vector-27738350.jpg\",1)\ndisplay_img(img)","f8c56e4a":"# now we are going to apply gamma filter which sharpen and blur the image \n# if gamma value > 1 => Image will get darker\n# if gamma value = 1 => Image stays the same\n# if gamma value < 1 => Image will get more sharpen\n\nfig = plt.figure(figsize = (24,18))\nax1 = fig.add_subplot(221)\ngamma1 = 1 # float(input(\"Input the value of gamma to be applied on image 1 \")) \nresult = np.power(img,gamma1)\nax1.imshow(result,cmap = 'gray')\nax1.set_title(f\"Image with gamma value {gamma1} (Actual Image)\",fontdict={'fontsize':20})\n\nax2 = fig.add_subplot(222)\ngamma2 = 2 # float(input(\"Input the value of gamma to be applied on image 2 \")) \nresult = np.power(img,gamma2)\nax2.imshow(result,cmap = 'gray')\nax2.set_title(f\"Image with gamma value {gamma2}\",fontdict={'fontsize':20})\n\nax3 = fig.add_subplot(223)\ngamma3 = 0.6 # float(input(\"Input the value of gamma to be applied on image 3 \")) \nresult = np.power(img,gamma3)\nax3.imshow(result,cmap = 'gray')\nax3.set_title(f\"Image with gamma value {gamma3}\",fontdict={'fontsize':20})\n\n\nax4 = fig.add_subplot(224)\ngamma4 = 0.3 #float(input(\"Input the value of gamma to be applied on image 4 \")) \nresult = np.power(img,gamma4)\nax4.imshow(result,cmap = 'gray')\nax4.set_title(f\"Image with gamma value {gamma4}\",fontdict={'fontsize':20})\n\nplt.show()","55136ef7":"img = load_img(\"..\/input\/image-processing\/cool-symbol-hand-in-rock-sign-vector-27738350.jpg\",1)\nfont = cv2.FONT_HERSHEY_COMPLEX\ndisplay_img(cv2.putText(img, text = \"What's up\",org = (220,940),fontFace = font,fontScale = 3,color = (255,0,0),thickness = 3))","4f75df60":"# by changing kernel size and weights within will have great impact and the end result will also changes \n\nfig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(131)\nkernel = np.ones(shape = (3,3),dtype = np.float32)\/25\nnew_img = cv2.filter2D(img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 3*3\", fontdict={\"fontsize\":20})\n\nax = fig.add_subplot(132)\nkernel = np.ones(shape = (5,5),dtype = np.float32)\/25\nnew_img = cv2.filter2D(img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 5*5\", fontdict={\"fontsize\":20})\n\nax = fig.add_subplot(133)\nkernel = np.ones(shape = (7,7),dtype = np.float32)\/25\nnew_img = cv2.filter2D(img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 7*7\", fontdict={\"fontsize\":20})\nplt.show()","db4fce19":"noise_img = load_img(\"..\/input\/cv-object-detecton-dataset\/CV Object Detecton Dataset\/balloons_noisy.png\",0)\ndisplay_img(noise_img)","f42c5436":"# let's apply same kernel technique to reduce noise in the image \n\nfig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(131)\nkernel = np.ones(shape = (3,3),dtype = np.float32)\/9\nnew_img = cv2.filter2D(noise_img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 3*3\", fontdict={\"fontsize\":20})\n\nax = fig.add_subplot(132)\nkernel = np.ones(shape = (5,5),dtype = np.float32)\/9\nnew_img = cv2.filter2D(noise_img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 5*5\", fontdict={\"fontsize\":20})\n\nax = fig.add_subplot(133)\nkernel = np.ones(shape = (7,7),dtype = np.float32)\/9\nnew_img = cv2.filter2D(noise_img,-1,kernel)\nax.imshow(new_img,cmap = \"gray\")\nax.set_title(\"Kernel Size is 7*7\", fontdict={\"fontsize\":20})\nplt.show()","e57cbc98":"median_res = cv2.medianBlur(noise_img,5)\ndisplay_img(median_res)\n# as you can see the below result noise has been removed from image to a great extent.","aba1e1c2":"noise_img = load_img(\"..\/input\/cv-object-detecton-dataset\/CV Object Detecton Dataset\/balloons_noisy.png\",1)\ndisplay_img(noise_img)","0e3005b5":"# let's check how our kernel method and median blurring techniques works on color image \nfig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(121)\nmedian_res = cv2.medianBlur(noise_img,3)\nax.imshow(median_res)\nax.set_title(\"Kernel Size 3\",fontdict = {'fontsize':25})\n\nax = fig.add_subplot(122)\nmedian_res = cv2.medianBlur(noise_img,5)\nax.imshow(median_res)\nax.set_title(\"Kernel Size 5\",fontdict = {'fontsize':25})\nplt.show()","73e08ac6":"def load_text_img():\n    blank_img = np.zeros((900,900)) # black blank image\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    cv2.putText(\n      blank_img,text = \"Denoising\",\n      org = (100,350),fontFace = font,fontScale = 5,\n      color = (255,255,255), # white color\n      thickness = 20\n              )\n\n    cv2.putText(\n      blank_img,text = \"Image\",\n      org = (200,550),fontFace = font,fontScale = 5,\n      color = (255,255,255), # white color\n      thickness = 20\n              )\n    return(blank_img)","04f8f8cb":"text_img = load_text_img()\ndisplay_img(text_img)","042bb297":"fig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(2,2,1)\nkernel = np.ones((3,3),dtype = np.uint8)\nax.imshow(cv2.erode(text_img,kernel,iterations = 1),cmap = 'gray')\nax.set_title(\"Result after 1 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,2)\nax.imshow(cv2.erode(text_img,kernel,iterations = 3),cmap = 'gray')\nax.set_title(\"Result after 3 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,3)\nax.imshow(cv2.erode(text_img,kernel,iterations = 5),cmap = 'gray')\nax.set_title(\"Result after 5 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,4)\nax.imshow(cv2.erode(text_img,kernel,iterations = 8),cmap = 'gray')\nax.set_title(\"Result after 8 iteration\",fontdict = {\"fontsize\":25})\n\n\nplt.show()","d89083ff":"fig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(2,2,1)\nkernel = np.ones((3,3),dtype = np.uint8)\nax.imshow(cv2.dilate(text_img,kernel,iterations = 1),cmap = 'gray')\nax.set_title(\"Result after 1 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,2)\nax.imshow(cv2.dilate(text_img,kernel,iterations = 3),cmap = 'gray')\nax.set_title(\"Result after 3 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,3)\nax.imshow(cv2.dilate(text_img,kernel,iterations = 5),cmap = 'gray')\nax.set_title(\"Result after 5 iteration\",fontdict = {\"fontsize\":25})\n\nax = fig.add_subplot(2,2,4)\nax.imshow(cv2.dilate(text_img,kernel,iterations = 8),cmap = 'gray')\nax.set_title(\"Result after 8 iteration\",fontdict = {\"fontsize\":25})\n\nplt.show()","ca374380":"# now let's add some random noise to the image\n\nwhite_noise = np.random.randint(low = 0,high=2,size = (900,900))\ntext_img_noise = text_img + white_noise*(255)\ndisplay_img(text_img_noise)\n\n# although in real world these text is not this much visible also, but for tutorial purpose we are going with this\n# these are background noise","8b82532f":"kernel = np.ones((5,5),dtype = np.uint8)\nopening = cv2.morphologyEx(text_img_noise,cv2.MORPH_OPEN,kernel)\ndisplay_img(opening)","7889c754":"black_noise = np.random.randint(low = 0, high = 2,size = (900,900))\nblack_noise *=-255\ntext_img_noise = text_img + black_noise\ntext_img_noise[text_img_noise==-255] = 0\ndisplay_img(text_img_noise)","24ac000b":"kernel = np.ones((5,5),dtype = np.uint8)\nclosing = cv2.morphologyEx(text_img_noise,cv2.MORPH_CLOSE,kernel)\ndisplay_img(closing)","f42a01e3":"kernel = np.ones((5,5),dtype = np.uint8)\ngradient = cv2.morphologyEx(text_img,cv2.MORPH_GRADIENT,kernel)\ndisplay_img(gradient)","9dcd71f4":"img = load_img(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",color_code = 0)\ndisplay_img(img)\nprint(f\"shape of image is {img.shape}\")","03bdcbde":"fig = plt.figure(figsize = (20,16))\nax1 = fig.add_subplot(1,2,1)\nax1.imshow(load_img(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",color_code = 0),cmap = 'gray')\nax1.set_title(\"Actual Grayscale Image\",fontdict = {'fontsize':20})\n\nax2 = fig.add_subplot(1,2,2)\nax2.imshow(cv2.Sobel(img, ddepth = cv2.CV_64F,dx = 1,dy = 0,ksize = 3),cmap = 'gray')\nax2.set_title(\"Sobel Operator Image Gradient in X\",fontdict = {'fontsize':20})\n\nplt.show()\n# we calculated the derivative of image w.r.t x and normalizes it that's why horizontal line is\n# barely visible","9b2c941f":"fig = plt.figure(figsize = (20,16))\nax1 = fig.add_subplot(1,2,1)\nax1.imshow(load_img(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",color_code = 0),cmap = 'gray')\nax1.set_title(\"Actual Grayscale Image\",fontdict = {'fontsize':20})\n\nax2 = fig.add_subplot(1,2,2)\nax2.imshow(cv2.Sobel(img, ddepth = cv2.CV_64F,dx = 0,dy = 1,ksize = 3),cmap = 'gray')\nax2.set_title(\"Sobel Operator Image Gradient in Y\",fontdict = {'fontsize':20})\n\nplt.show()\n# we calculated the derivative of image w.r.t y and normalizes it that's why vertical line is\n# barely visible","0e461556":"# lets blend both image opearated on sobel opeartor on x and y direction\nfig = plt.figure(figsize=(24,18))\nsobelx = cv2.Sobel(img,cv2.CV_64F,dx = 1,dy = 0,ksize = 3)\nsobely = cv2.Sobel(img,cv2.CV_64F,dx = 0,dy = 1,ksize = 3)\n\n# blended_img = cv2.addWeighted(src1 = sobelx,alpha = 0.75,src2 = sobely,beta = 0.25,gamma = 0)\n# display_img(blended_img)\n\nax2 = fig.add_subplot(2,2,1)\nax2.imshow(cv2.addWeighted(src1 = sobelx,alpha = 0.80,src2 = sobely,beta = 0.20,gamma = 0),cmap = 'gray')\nax2.set_title(\"Blended Model with x = 0.8 and y = 0.2\",fontdict = {'fontsize':20})\n\n\nax2 = fig.add_subplot(2,2,2)\nax2.imshow(cv2.addWeighted(src1 = sobelx,alpha = 0.75,src2 = sobely,beta = 0.25,gamma = 0),cmap = 'gray')\nax2.set_title(\"Blended Model with x = 0.75 and y = 0.25\",fontdict = {'fontsize':20})\n\n\n\nax2 = fig.add_subplot(2,2,3)\nax2.imshow(cv2.addWeighted(src1 = sobelx,alpha = 0.5,src2 = sobely,beta = 0.5,gamma = 0),cmap = 'gray')\nax2.set_title(\"Blended Model with x = 0.5 and y = 0.5\",fontdict = {'fontsize':20})\n\n\n\nax2 = fig.add_subplot(2,2,4)\nax2.imshow(cv2.addWeighted(src1 = sobelx,alpha = 0.25,src2 = sobely,beta = 0.75,gamma = 0),cmap = 'gray')\nax2.set_title(\"Blended Model with x = 0.25 and y = 0.75\",fontdict = {'fontsize':20})\n\nplt.show()\n\n","68acc4a1":"fig = plt.figure(figsize = (20,16))\nax1 = fig.add_subplot(1,2,1)\nax1.imshow(load_img(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",color_code = 0),cmap = 'gray')\nax1.set_title(\"Actual Grayscale Image\",fontdict = {'fontsize':20})\n\nax2 = fig.add_subplot(1,2,2)\nax2.imshow(cv2.Laplacian(img,cv2.CV_32F),cmap = 'gray')\nax2.set_title(\"Laplacian Operator on Image\",fontdict = {'fontsize':20})\n\nplt.show()\n\n","94036b84":"fig = plt.figure(figsize = (24,20))\nax1 = fig.add_subplot(1,3,1)\nax1.imshow(load_img(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\",color_code = 0),cmap = 'gray')\nax1.set_title(\"Actual Grayscale Image\",fontdict = {'fontsize':20})\n\nax1 = fig.add_subplot(1,3,2)\nsrc = cv2.imread(\"..\/input\/image-processing\/NYer_crossword_puzzle.jpg\", cv2.CV_8UC1);\nth1 = cv2.adaptiveThreshold(src,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,9,3)\nax1.imshow(th1,cmap = 'gray')\nax1.set_title(\"Adaptive Threshold\",fontdict = {'fontsize':20})\n\nax2 = fig.add_subplot(1,3,3)\nax2.imshow(cv2.Sobel(th1, ddepth = cv2.CV_64F,dx = 1,dy = 0,ksize = 3),cmap = 'gray')\nax2.set_title(\"Sobel Operator on Adaptive Image \",fontdict = {'fontsize':20})\n\nplt.show()\n# we calculated the derivative of image w.r.t x and normalizes it that's why horizontal line is\n# barely visible","17710484":"dog_backpack = cv2.imread(\"..\/input\/image-processing\/images.jpg\")\nshow_dog = cv2.cvtColor(dog_backpack,cv2.COLOR_BGR2RGB)\n\nfall_image = cv2.imread(\"..\/input\/image-processing\/fall-1072821__340.jpg\")\nshow_fall = cv2.cvtColor(fall_image, cv2.COLOR_BGR2RGB)\n\ncolorful_image = cv2.imread(\"..\/input\/image-processing\/download.jpg\")\nshow_color = cv2.cvtColor(colorful_image, cv2.COLOR_BGR2RGB)","68eaff17":"fig = plt.figure(figsize = (24,20))\ngs = GridSpec(3,2,figure = fig)\n\nplt.figure(figsize = (24,20))\nax1 = fig.add_subplot(gs[:,0])\nax1.imshow(show_fall)\nax1.set_title(\"Fall Season Image\",fontdict = {\"fontsize\":24,\"color\":'white'})\n\nax2 = fig.add_subplot(gs[0,1])\nhistr = cv2.calcHist([show_fall],[0],None,[256],[0,256])\nax2.plot(histr,color = 'b')\nax2.set_xlim(left = 0,right = 256)\n\nax3 = fig.add_subplot(gs[1,1])\nhistr = cv2.calcHist([show_fall],[1],None,[256],[0,256])\nax3.plot(histr,color = 'g')\nax3.set_xlim(left = 0,right = 256)\n\nax4 = fig.add_subplot(gs[2,1])\nhistr = cv2.calcHist([show_fall],[2],None,[256],[0,256])\nax4.plot(histr,color = 'r')\nax4.set_xlim(left = 0,right = 256)\n\nax1.set_title(\"Image Histogram Of Fall Season Image\",fontdict = {\"fontsize\":24,\"color\":'black'})\n\nplt.show()","07b5172c":"fig = plt.figure(figsize = (24,20))\ngs = GridSpec(3,2,figure = fig)\n\nplt.figure(figsize = (24,20))\nax1 = fig.add_subplot(gs[:,0])\nax1.imshow(show_color)\nax1.set_title(\"Colorfull Image\",fontdict = {\"fontsize\":24,\"color\":'white'})\n\nax2 = fig.add_subplot(gs[0,1])\nhistr = cv2.calcHist([show_color],[0],None,[256],[0,256])\nax2.plot(histr,color = 'b')\nax2.set_xlim(left = 0,right = 256)\n\nax3 = fig.add_subplot(gs[1,1])\nhistr = cv2.calcHist([show_color],[1],None,[256],[0,256])\nax3.plot(histr,color = 'g')\nax3.set_xlim(left = 0,right = 256)\n\nax4 = fig.add_subplot(gs[2,1])\nhistr = cv2.calcHist([show_color],[2],None,[256],[0,256])\nax4.plot(histr,color = 'r')\nax4.set_xlim(left = 0,right = 256)\n\nax1.set_title(\"Image Histogram Of Colorfull Image\",fontdict = {\"fontsize\":24,\"color\":'black'})\n\nplt.show()","560baa0b":"plt.figure(figsize = (24,18))\nmask = np.zeros(show_dog.shape[:2], np.uint8)\nmask[0:, 100:] = 255\nmasked_img = cv2.bitwise_and(show_dog,show_dog,mask = mask)\n\n# Calculate histogram with mask and without mask\n# Check third argument for mask\nhist_full = cv2.calcHist([show_dog],[0],None,[256],[0,256])\nhist_mask = cv2.calcHist([show_dog],[0],mask,[256],[0,256])\n\nplt.subplot(221), \nplt.imshow(show_dog)\nplt.title(\"Actual Image\",fontdict={\"fontsize\":24 ,\"color\":\"black\" })\nplt.subplot(222), \nplt.imshow(mask,cmap = \"gray\")\nplt.title(\"Mask Region \",fontdict={\"fontsize\":24 ,\"color\":\"black\" })\nplt.subplot(223), \nplt.imshow(masked_img,cmap = 'gray')\nplt.title(\"Mask Image \",fontdict={\"fontsize\":24 ,\"color\":\"black\" })\nplt.subplot(224), \nplt.plot(hist_full,label = \"without mask\")\nplt.plot(hist_mask,label = \"with mask\")\nplt.xlim([0,256])\nplt.legend()\nplt.title(\"Image Histogram For Specific Region (Blue Channel)\",fontdict={\"fontsize\":24 ,\"color\":\"black\" })\n\nplt.show()","12c33774":"img = cv2.imread(\"..\/input\/image-processing\/p2219651326-5-800x533.jpg\")\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\ngray_img = cv2.imread(\"..\/input\/image-processing\/p2219651326-5-800x533.jpg\",0)\ndisplay_img(img)","dd38b666":"\nplt.figure(figsize = (20,16))\n# blue region\nhist_values = cv2.calcHist([img],channels = [0],mask = None, histSize = [256],ranges = [0,256])\nplt.plot(hist_values,label = \"Blue Channel\",color = 'b')\n\n# Green region\nhist_values = cv2.calcHist([img],channels = [1],mask = None, histSize = [256],ranges = [0,256])\nplt.plot(hist_values,label = \"Green Channel\",color = 'g')\n\n# red region\nhist_values = cv2.calcHist([img],channels = [2],mask = None, histSize = [256],ranges = [0,256])\nplt.plot(hist_values,label = \"Red Channel\",color = 'r')\nplt.legend()\nplt.show()","9d81ee66":"fig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(1,2,1)\nax.imshow(gray_img,cmap = 'gray')\nax.set_title(\"Actual GrayScale Image(Low Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\nax = fig.add_subplot(1,2,2)\neq_img = cv2.equalizeHist(gray_img)\nax.imshow(eq_img,cmap = 'gray')\nax.set_title(\"Equalized Histogram Image(High Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\n\nplt.show()","614e33a8":"hist_values = cv2.calcHist([img],channels = [0],mask = None, histSize = [256],ranges = [0,256])\neq_hist_values = cv2.calcHist([eq_img],channels = [0],mask = None,histSize = [256],ranges = [0,256])\nfig = plt.figure(figsize = (24,18))\nax = fig.add_subplot(1,2,1)\nax.plot(hist_values)\nax.set_title(\"Actual Image Histogram(Low Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\nax = fig.add_subplot(1,2,2)\neq_img = cv2.equalizeHist(gray_img)\nax.plot(eq_hist_values)\nax.set_title(\"Equalized Histogram Image(High Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\n\nplt.show()","38ebac1f":"img = cv2.imread(\"..\/input\/image-processing\/p2219651326-5-800x533.jpg\")\nhsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n# h -> Hue\n# s -> Saturation\n# v -> value or also called brightness \n# so here we will play with values of v\n\nprint(f\"Min value of v(brightness) feature is {hsv[:,:,2].min()} and Max value of v(brighness) feature is \\\n{hsv[:,:,2].max()}\")","7c1d3cd7":"hsv[:,:,2] = cv2.equalizeHist(hsv[:,:,2])\neq_color_img = cv2.cvtColor(hsv,cv2.COLOR_HSV2RGB)\nfig = plt.figure(figsize = (24,20))\nax = fig.add_subplot(1,3,1)\nax.imshow(gray_img,cmap = 'gray')\nax.set_title(\"Actual GrayScale Image(Low Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\n\nax = fig.add_subplot(1,3,2)\neq_img = cv2.equalizeHist(gray_img)\nax.imshow(eq_img,cmap = 'gray')\nax.set_title(\"Equalized Histogram Image(High Contrast)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\n\nax = fig.add_subplot(1,3,3)\nax.imshow(eq_color_img,cmap = 'gray')\nax.set_title(\"Equalized Histogram Image (HSV)\",fontdict = {\"fontsize\":24,\"color\":\"Black\"})\nplt.show()","03b3929c":"# Image Processing Different Concept \n\nHere, we will go through some basic but interesting concept of Image Processing. We will see how each paramenter effect our image and what is the important of each function i.e functionality of each parameter.\n\n1.  Blending of Image or Pasting Image.\n2.   Image Thresholding.\n\n\n3.   Blurring and Smoothing.\n4.   Morphological Operator (Open, Close etc).\n\n\n5.   Gradients(for detecting edges).\n6.   Histogram Equalization.\n\n\n\n\n\n","4f92afe6":"## Image Thresholding","dab35370":"## Sobel Operator","b91f2a10":"### Use of Kernel for Filtering ","45e50a71":"### Now let's try to remove Noise from the Image( both grayscale and color)","ec9122f3":"\n\n*   As we can see from above result what cv2.erode function do, it ry to erodes away the boundaries of foreground object. \n*   A pixel in the original image will be considered 1 only if all pixels under the kernel is 1, otherwise it is eroded to zero.\n\n\n*   So, we can imply as kernel size increases the result will get eroded in less iterations or faster than smaller kernels.\n\n\n\n","026b3793":"### Resizing the image so that it can fit into other image","d626851a":"## Morphological Operators\n\n\n\n*   Morphological Operators are sets of kernels that can achieve a variety of effect, such as reducing noise.\n*   Certain operators are very good at reducing black points on a white background (and vice versa)\n\n\n*   Today, I will show how certain operators achieve an erosion and dilation effect that can add or erode from an existing image.\n*   This effect is most easily seen on text data, so we will practice various morphological operators on some text data.\n\n*   These operators are not very useful on images, feel free to try on above noisy images.\n\n\n\n\n","cd8a4473":"## Laplacian Operator \n\n\n*    Laplacian Operator calculate double derivative in both direction and add them\n*   You will see that after applying Laplacian Oeprator it removed noises from the image and make the edges less visble but it has capture all detailed edges perfectly(if you see it carefully).\n\n","ee3e0ffc":"### So, This concludes my work. Thank you for reading it............ I hope you enjoyed it.......... pls do upvote....\n\n### Also, stay tuned for my further content on Computer Vision.\n","345da092":"\n\n*   Opening is erosion operation followed by dilation operation\n*   ![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAkwAAABeCAYAAADR5Ut6AAAbzUlEQVR4Ae1dv4skR5Yu\/Rllj3NGe3sy1iurnTVkLRxnlDEI1pB1hgoaTqAzhjUK2pEsQUFrQMtBk9Ag9lgNFOOM01AwhoymPLFqylnE0jRoaYbSO151ZVZEZET+iheZGZlfQlFV+SMy4ov3Ir5470XE5LfffiN8gAFkADIAGYAMQAYgA5ABtwxMAI4bHGADbCADkAHIAGQAMgAZYBkAYYKFDRZGyABkADIAGYAMQAZKZACEqQQgjCwwsoAMQAYgA5AByABkAIQJhAmjCsgAZAAyABmADEAGSmQAhKkEIIwqMKqADEAGIAOQAcgAZACECYQJowrIAGQAMgAZgAxABkpkYEI4gAAQAAJAAAgAASAABAoRAGEqhAcXgQAQAAJAAAgAASBABMIEKQACQAAIAAEgAASAQAkCIEwlAOEyEAACQAAIAAEgAARAmCADQAAIAAEgAASAABAoQQCEqQQgXAYCQAAIAAEgAASAAAgTZAAIAAEgAASAABAAAiUIgDCVAITLQAAIAAEgAASAABAAYYIMAAEgAASAABAAAkCgBAEQphKAcBkIAAEgAASAABAAAiBMkAEgAASAABAAAkAACJQgAMJUAhAuAwEgAASAABAAAkAAhAkyAASAABAAAkAACACBEgRAmEoAwmUgAASAABAAAkAACIAwQQaAABAAAkAACAABIFCCAAhTCUC4DASAABAAAkAACAABECbIABAAAkAACAABIAAEShAAYSoBCJeBABAAAkAACAABIADCBBkAAkAACAABIAAEgEAJAiBMJQDhMhCIA4E9PW7XtPriijYf4sgxcjlcBD5sruiLq1va7YdbRpRsfAgMgzA93tJydkbz5O\/jq0GUePQI7He3dLU4p8lsQVebHUXVR0F3hym\/+x3dXs5pOp3T8s2WHodZSpRqZAjET5j2P1Hy8owmkxktN1DLZ\/nd0+PmkmaTCU3EPmc0X35HSZLQTWyd8mCV+oG2by5pPp3SbJHQ9jEqqkQE3RWSzL7q+xPt1l\/SbMLy+Zo2uyeh8naYzH5Hm5uEkuSaVjxIcbWvTBSv+b4bWm8fOsxwk1f3VZ6alEX2mcgJ0xPdJ5\/R9CC0IExO0Xjc0vp6SfOpJIE6p8Xq+2E0gk7genzh8Y6SQ4N9RvPVjxGO4KG7waSrV\/q+p8e7q+e2Zzqny9vILKBcSQeS9B0t5zwwb9qGcnuZREieiKhX8hRMayolHDVh2t8n9DIjAX+iZIfgjaJa329XdO5SeJc75ziiul7Oj8TUbDDOaH75DrEKRcALX9vv3tHlofGOlSwR9U13f\/75Z\/rhhx8OFtTPP\/+czM+33357uLbdbunXX38VrtEwyfVH3xXSNIlIZpkorBbClvoJTedLSiK00vdHnsLoS5VU4yVMjz\/SSmX80wtaP0TmkqhSQ5L37O9odT61jJKmdL66K499yawaJmniRuBruh2CyV0S7wBp7Xdv6GLGdRhRx2Pi0BPdff\/+PX311Vf08ccf00cffVTr8+mnnx4I1i+\/\/GKWrj\/\/e6XvqptnSrOLNz0eZD3QNrlwECV2L35zIM\/J2h2btd9t6CZJKCmw7EfXZvZKnrpRs0gJ0z9ps\/yD3vG\/WGJ2UJkMOQX+j7Ta\/qvs6efr+3taXzh897NL2sQWR1Ot1L2460SWJjR9mdB9lOODbnWXrUMch\/fJJ5\/UIkhFhIpJVy+JU+\/0XXXD9pM0nay3+qCQrULXN5uGJI9nsL6lxGqtOqdFcheHS7138tR+sxwhYVJHKopQn69oG2UH0mKlP6xpkbkwFezqWucOM5vslqrZ8jYO5W8RdpFXqZhPP6PkPsYA2m519927d42sSUVkSb3GxKlX7ro+6nsW6M\/tT5+spE+0u\/06H+fpClVoqtSPW3qTC2+IZNJGH+WpaT00fC4+wqR2HGo8zjyhXUMQxvKYywc9Xayp3jyOf9F29UfdwpfVRQ1r1ViA9y2n0cm8TH4qd5\/6vjPE8x3pLpMYjklSyY36m11yr169OrjYOEbJdnCME7vwOJaJ3XHq8+pvTovv68PRV33X49fO6WJ937E8p7P5lEEkk7lKsZkfaJf86dQWVvJ0sMXpb7kg8un8iu56bKHvqzy1qWtxESat41CFe0L1O\/02Ye7DuwzFzgjO72ix\/kftDLqUZzKpGA9V+41jfcBwYcVqSe1Id5nouGKUmESx1anJwekWxT8xser26LO+q665CU2mL2l1V2\/IJoethSzVyo+BcyXCdMy9Jbyhv6TJKOdI+4+ICJOhZFmFPROnF8sNYY5cUTPyD1ovfncaCWX4NbQI7RKaZ2no5HUCa19RRdS4ZrqwmpHbGi8MdGs3ustkSLX+pL85fsllSaoLAFuvmDilaavffL67o+f6blobO4l\/tJCl2Ze0rjV5xSASdQjTQTge6G71UpuB3E\/S1HN5aknRoiFMuhnX6KBh1SgXF5f\/uanF4sOGli\/Mejj+r91olGd\/lHf0olPxR74L3XWRJQ74DnEwAbMFkrOrr5Oj9\/pukugptR3\/mJPL2mSJa9aXMHEaJmnqYUB87+WpHS2LgzAVmPOfFxJ7gW1RCuVlTw\/rC20U84ybh\/vMpUBsdQJhKqyNahcNV1ysg4IOdJfdZaqlh3+zW07KquSqP7Y2MUEy392+pSkSfc+1IX+g5eafLnhlz5uDkcYTKSQIExfN1Pcz6k+sYiTyJCsh1tQiIEyKIE1f0vLP\/2lxK8XqqrDWSYCTriBtD9zgkgtQT6ck8zFiDV2npyQ7+NW+7jJpMWOW+D+TqLYOm4uOF8Vs74hF3\/NunnaWy1Dk8hBW4EPUpAgTryiebvN1tNQ3JnHSkhaLPEmXO59ezwmTGsPBjPuO7qyzs7AtSr5qlTOu9TPqLieQJekacbCie1itsvRH\/sNsOLlRb+o67QzKbnTXnA3XNllK4baRptZIWzT6bmtHPAZxKfgl3\/pgxNcVKEiYmDNpu1f0ZDJTNPJUUvECl\/tNmDKzaSrUj7RZziwWJmyLUiQLegOhxB01Ds7OjwxPeyzFaAkpQq\/tayrRSOsqQhLage7a4pZCu+GKpMNcfoD\/t3FEpe85t1zowYHRdnkHm8sSJiIztsvH+iUjbVHJk0yRnan0lzCpUy4zoTaEPZulBcLkrGEzKDHDrHknbI6CTmQp5hWo3Qi2e8Um4+FH3aJl7EB3ba64UAHeVbHi1b9N92DTZQyqvjMXhNx7ff87JfMXxiA4nLzrnb\/Ee6QJE5uZ9C2sul0yxyhf7+WpuqY0ubOnhEll2SrDtikXgoyLK97WAbPloqklyPT\/p1YQ\/lbrqjhXuGpHQG\/Qj9g2dp3a3xH2bDe6y+RIDbbmGWt9ODh2qd18xabv9viYMCTBaLtE3NwGoRCZ8GK6Kpu21RIaEJs8SZTZnUYvCdPJgpG64o4FMJh3ZtkQEVI3SFFfsZm8eZTQCDPLuiXZiKNPszpirTF75xFT\/FJXumtO6e\/SFWdKn5m3oFam6PTdJAfpACwASdCwaW5h1+s3BGEiosylzXhI5VXPeaV\/GmZp3Yy3\/+gfYVICXnMzJlxr\/zSOxakkMlHf9GGzpBcZqTkJfP0RXDFZmq9+xB5yvpLiGBDUryvfjDR8viPd5a1IVCsOB3736TBjq0LmL0p9t864lSYJBjETs9oGIkxkDJ5ErGH1tSJKeapfzMpP9IwwKSZT25RKq2JNCCtLu+rbULqMONX03e93dHs5t6zjxAQsot22XTD15LzVHdfl6LIWLt3prjkjLagFpxYmp5tNKxPHN8kfkeq7ayAsShIMbMTSDkWYiHSy0kWcroEZ+g\/qEWFSZwc53DsOwtTetigPtF3fULJa0CwTnmeT6WzxDSXJW9r2afNEh8WievwSl3dFi9nUCMpMy\/yaNrW2EZDvIoaTolDj1Akg3equGljNv\/t48N5yqhUsCKmLVt8dsamN4yxtEqC+Q9J6FY4wkeYOqznItUFQ91y08lS3oNXv7w9hUny2OVfcsTw6407dS5LC7wLuiXab1w7ikOYj\/T6nxdUt7fautNo7b7dYFE3b5V203xIH0F4vCyxKq+9BlKSr0btxks5QjfQ61F1zVe\/OtiIpgYtjqlTCFGL173j13bVcjOAODpoVS5J8BCRMWpvQRj+nC3G88qSXQ\/JfPwiTdRpyvph2wiSoVPlXEhW6o1KSlP+ezr+m206tL4bPXrOI5fObBdDb7pvOaXmdULLedhSn5GpQa5bDVraG58Stmg7r6UQs1sIm3ALnOtZdcxZauytq18NPJUzyazLFrO8u66rgwo2afkkGlAckTKTPUBNvcwrFN2Z5KiyY18UeECbXNGSzXIZgZh2d5GjBeKfaGRzfN50v6fpmY1iQnl11OatMtn6UkW4rf3VlKyREGZY2AnJOi1VC6+1DK7m2v2T4hMk+GGg6G8WOovzZ7nXXXE6gT7PjTLzNVcjN637\/Y9Z3V9teZA2viZZGmCTjgYy8N5p97CqL0e61OrkpZnly4el\/vnPC5JyGnCubaxQSalsUtTNgIlEluJldWonmunO5F3PFkz6h+b8VIuS0WBzjs5JvtPyfiNaUZouuYpaMhqOQ4CllDXif7GjPJduCHYa0fGnbOBjLf+Te5Sqfv+6GJSG5gnidMIPTebFNsSNyfXcOGCYy5EZLX20DNVddO23HqU21vU\/1mBhkrE3CFLk8iemVkVC3hEmdhjy\/orvCgGlXpylpXj2hcyJyLNT1FmTc797QRRYo7QhgP70qyC+tgVCIQ7Up6kUxW1WIY5AiDThRl2z3eAZoT3Q3JsIU0hoWu7678j+Z+JNqbji09FUrEAiTtV3V8EL\/kWHUIWF6oLvVy+ep6rYlBLIspj9cJkKZEUj6ludvZYr0pBnh0QiX2BRWPZfuf64RfT33pU781NHQlGYXbwy3pDs3uFKGgDqDR8VZMIajLAu1rvdHd0GYuOIGoO+ay0zVAdXiUktItZt1AqD0GSBMGk7PfwYgT5ZSSZzqiDBVmIacK52jU1HNq7lnGp5QzZGN45BU0iUzSqpcGm12hdr41LXGqfWkpsO\/zwiLVVaukeIbCxptWddfcTaqXVVloupgIpzugjDl9x47uXwi0ncnYRKaHaalrxCmakJfcJfhNlOtVwVPVbtkWJ7bcsmh\/3BWTzeEqcI05FyOXZUoKqDPbz1Np\/RTVql0cliUnDi91yA5jSxdLssep13PVVmS7fFejokw9Ux3YyJM5lpMvCSCxDEIfdcIjd5uiQwatPTrEsmiWgpJmPS2VwSHoqIcrw1CniqUs8ktHRAmxfIy+5LWVafeuzqVRiSgCCp1OmU9F1YuVcVS1ZawE6n5Vxue5uTPqUCTCXUW1J4DO+ITWmOu1tmE2pObKvj1T3dNEvJ\/\/\/17yyKrOqYnC0z482r9hSF3A9F3V\/s+EdIBLX3Pdl1TlYCESTMSyLgmtaxb\/wxEnqxl8z\/ZMmFSZ57VtE64OhVxM6WqAJ6uNFVJxfPpqnx9VHLqHDzKohC\/U3ppZyM5WnOVaeDnXbIt1VmIwNdP3TUDqf\/yX\/\/eW8Kkbo8ityL5QPRdbSuVIGNub6pNVCkTctUt3HzwmH+L2l8ILwOitbuSJC9fitOZgcjTqUCiv1olTFogtKEU+Y447ZCLv9URnAwyKsP2FFJF4OXz6Sit8k4NU69YL7WxMetDsvFxlGnopyMgTH3VXXMF7f\/5j3\/rJWHivePUhSvZ2iRyDEXfCwiTzF6hRiCzmGciHGFyBqqLCI4jkaHIk6N4vqfbI0zKNGStI\/ckTiGIyMkF5UcGpNKpU8m6kp3Ijd8ozQg+NOosRB3UKXP09\/adMPVYd3ktI5WIyK+gLSNdvHecmk+2jEkcg9H34ITJWFpAbJ+6UIQpFMErlrrByFNxMRtfbYkw1Z2GnC+PvSID+XVVli0yS87TUpWHw3HGULKM2Pi+v5gwyYwAHUUaw2lV3rI6eya73ZPR\/usukySVjEgFU0uKnhm\/JJPHAel7AWES0wFNz\/wGwyfZCESYlMkVk4lUXk+5tv8akDzZC+h9tgXC1GQaslkuQyizTiUQYSIluFViHabGpMvEoeS\/FiR4si5NvFfLLSZMYg1aSfEGe7mNzqIReHHorrmfXIiNbRvBd3zIdMdxLJPIMSR9b0UH1HZdahV9o28SmbWthoVwO95SnOiQ5ElEwfKJhCdMClNuPqPKxXw9ApnzWGhn9JiNegHq+oKPVdeq0V7f7I\/LtePtr3cFAvbFCtIMrt485WyoOl7pOxLdNQkJB1SLbjviKSjmlihS7jgakr5r1h91sCdrXTmFSfA7fC3vLBgBCJPRHviFU9QQ3iHJU41i17k1MGFSGH2l1bxdWXdZOMIRJiJ1VhArV5UtQSx7yZVu+eIqc93z5qgkbXQEGhxDgfUYNIlGp6ysrvpPy9j+t6xVrSCovrXZlWYdxKW7Jinpi5WJXW+qu5B\/M8HzPwam767OeiLtRTAGf97Wf2nCZPY79QbrzeVqYPLUHIjCJwMSJrXifSvdEPLMJSe5YqsFp\/09rS\/OtVk30\/mSrm82xrYgzxvXXi\/nz1u9pPmrs86U5fX1TrkwEjDnOkd\/TFQE0i8t6NAJU0H5vK2DpeBabohPd00rExMTnkHX9WHGLskRuYHpu5MwyQ+Kde9B2cbRZRIkS5j0vEktqVBWBr4+MHmqUuQG9wQjTKeK9xVILpVjBO41Vb4iWvsd3V4aRCglREXfrZIlInKRGm+MXCOPo1WnlQ69gFAU1UHAa7IWJqPRVfMtEhNRUdaPt8Wqu6aViWOFunTNmWtEsatQxro0PH23T+rhNibEoFixnh50zWdAb+iuj76as1G9vDL1dH7Y\/UdNLApuD0OY1Ir3NnkW7JXkI5wFoOQvPdFu85oWs6lmbdJdU6lb6JwWqzVtH\/f5ZAKe0X3zaV4ERihqXaod+eF3G+64gKD1KGlnh+FNeGsWUq3vyHSXyRGTEtUF9urVq5oAyNz+\/v17LR+cJw5OlzqGpu9O+Q\/Vxj\/+SKv52ak9b0xOpAiTSeJajH3lLna7ovNc+47+w9TXAIRJmYYstdeYawZFK9YNFbJn11uyWtBME64pzRbfUJK8bZ0oPefOFRTvS2jUWVInEpYRRYkOVYV3zL9dFsIgI2wX0PHrro2oyLnBXLjp5zluySRuYgtVHl41NH03SIfStoYMeD5ZUo9tWyOvgJH3RgRP1TvOi4RXRpfJ4n9Dk6fi0vpcFSZMT7Rbf3kkE4KV7vJvdxYQ6wN5gGddQdm+1gllllRGkrLGzMeMHQCD6JN0uJ0n8jEcdqiGo7vm\/nJs3WmLNDFhM8kS\/xd1DQ5O310dtsCEFbuwH89aBoS1SZMvYTLJ0oSmrU0USmG4o9W5xXuC\/iMnPYKEaU+Pd1c0n6Zs\/ZI2Qm6pYObCHBxxnnDhM\/GxwKmumYwkpVYmQTIcJ+QBcu3qNKRnCdmyPjzdNeOZmDTxApdiMUQWGM2YJX4nkyWZRSpPLxyevgcMOD7B5vilDhSO7dv0Ja3uHhz3m6c9CJN1UtEV3Qn1m2ZOXf+HJ0+ukvqfFyNM4dYecgcdywbe+oPZTQqujtZjdGb69w3C1Hw9rW4QiuWtroYrtJwPVXc5folJi\/phAiMZS8SyxYTInA0XiiwRDVDfXRYznwFfLaW3kCZeRubq1pgNbUu0CWHi5Wf+Rks1hoo3GW7bsnQozgDlyVZNQudkCFOug5Wcau6qUIGANCEQO03G1dg0mu5fFtzOsVpJR3FanaLczstddRnS9Txw3bVZmpjM8Aw63t\/N52BrlSv9EJalQ15dMhKzvlvj9zwGfI0q1bCypoPE2YKuNjsSm8LzuKW1LQb24k0FctaoYMUPDVGeikvsddWfMOUaXDZrCk4FLYqjGX3Qsdv6NqkVfMgjnjWtFvqaU3rcUtURl5c8jvxhx+CgVl3WgHAkumtunaJanJg4ccxT1TWbmCQx0bJZlNJ0+ZpozFJWpcPUd7tlVXLQnQFY+mO\/e0eXhuWH20H7+nulyR1v4Pb1LeUnC3FfWWVB5KrvqXvfMOWpLgp17vciTC7hktss0JxqmcbQpN\/jjqXRXSkpJsfv2YJWSULJekuPVolga9JfKUm+y5mGdaJ0RvNlQpvdkzUVnJRFIDdz5zDSle88xqa77DYzN+lNCY76zWSHrUYcj5R+mFDxeSZX6r3m7xDuPlW6hqnvhkvraNnp1u3\/QNvkwpgJnbav6YzooraVaL\/b0A3L0PXyFNebWq3SMs6\/ptsO29VhypOqMfK\/GxCm5442t6q1IQwH5rz6vmFHy9P3\/7ekIzcE2EkM5EHrNsWi0UqKicD3gXD9tWH9dYtQ3G+3BcD6Lg+RIgLdZetQGfExiVCV\/0yywgSUD13fQ8p7KvcNv63uM\/+2la1ViaSbr1bxhi5PtcCofXMNwuRwF+SIUl6gKo0WCmdl5dPUrSDq9bZ937Uxb\/BAgem0Av5urI64Tee0vE5H1F2tJdUAloE+YnNR+K1HA901RaXMrVaFJDHxYiuUPFEakb7bYmhaC\/Y2pcLxf7+jzU2ZJV7tg2y\/eUHjhNbbqrPvHHlpdHpE8tQIn+oP1SBM1RPFnUAACPggYBl1+66J4pOdAT+bxiSxhajMZccuN3bNMUmSXipgwBAXFi0\/OJCypha+tvnFA3niweV1ccxnNgi96YgkNS8innQjAMLkxgZXgEBnCORjmXrekXSGlPyLOWCbg8DTj7wFST7PcaaYt3xW8kbEWVjkegAIgDANoBJRhCEikJ\/w4OeWGyJGKFPUCOTccdg9IOr6HEHmQZhGUMkoYqQImEtqwC0XaUUi23kEzLiacc94zuODM31EAISpj7WCPAGBAwLmXldDnNCAqh4lAuYkn9GvqTdKKYiu0CBM0VUZMjwuBIzNOaefUXKPNbHGJQNDK605EIArbmg1PNTygDANtWZRruEgYGzSiVim4VTtKEuiWZfO6GXyk9zWI6MEFIVuCwEQpraQxnuAgA8C2jYm53Sxvkcn44Mnnu0IgSe6Tz6j6WH9OMQtdVQJeG1DBECYGgKHx4BA6wiopAmuudbhxwv9ETgtlzGlWVcbzvoXAymMFAEQppFWPIodKQIqaUKgbKSVONJsZ7M+QZZGKgHRFxuEKfoqRAFGh8DjHSWLc3reRf2K7h73o4MABY4MgYzon9H88h3tILKRVSCyywiAMEEOgECMCOx3dHs5P8SCTOcgTTFW4WjynJGlc1okd\/Q4moKjoENDAIRpaDWK8owIgSfabV7TYjalyexLWu+w3MCIKj+Cou7pcZsc5HM6v6Q3nWw8GwFMyGI0CIAwRVNVyCgQcCCQWpumc7q83WH2nAMmnG4RAd6k9mpBM96ENtnABdci9HhVOARAmMJhi5SBQKsI7He3dPXFFW0+tPpavAwI5BD4sLmiL1Zr2iK+LocNTsSLAAhTvHWHnAMBIAAEgAAQAAItIQDC1BLQeA0QAAJAAAgAASAQLwIgTPHWHXIOBIAAEAACQAAItITA\/wMABf2zK7EHLgAAAABJRU5ErkJggg==)\n\n\n\n","4fb28f28":"### Final Blending of Image and Change the Image intensity in Actual Image.","9098ac02":"## Dilation Operation","d7792471":"*   As we can see from above result what cv2.dilate function do, it try to add or expand away the boundaries of foreground object. \n*   A pixel in the original image will be considered 1 if atleast one pixels under the kernel is 1, otherwise it is eroded to zero.\n\n\n\n*   It increases the white region in the image or size of foreground object increases\n\n\n*   So, we can imply as kernel size increases the result will get dilated in less iterations or faster than smaller kernels.","5bccc371":"### Let's see color content of this image.","c9fd5cdd":"## Image Gradient\n\nAn Image Gradient is a directional change in the intensity or color in an image.","c6bee0a0":"### Converted the Pasting Image to Grayscale","e91aa280":"## Closing Operation\n\n\n*   Closing is dilation operation followed by erosion operation\n*   ![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAmwAAACCCAYAAAD7RJT+AAAe6ElEQVR4Ae2dvYsjx9bG23+G4k03uzhXNIkDRzdVsCzcwNF7YQUTGJw4EkyyGxkEY4NfLiz9ssmF6wHhZG8wIHDgYFBm7EHJxZhB4MuyiPNyZtRSVXVVq7s+uquqH8EgjT66q36n6tTTp05VF4QHCIAACIAACIAACIBA1ASKqEuHwoEACIAACIAACIAACBAEGxoBCIAACIAACIAACEROAIItcgOheCAAAiAAAiAAAiAAwYY2AAIgAAIgAAIgAAKRE4Bgi9xAKB4IgAAIgAAIgAAIQLChDYAACIAACIAACIBA5AQg2CI3EIoHAiAAAiAAAiAAAhBsaAMgAAIgAAIgAAIgEDkBCLbIDYTigQAIgAAIgAAIgAAEG9oACIAACIAACIAACEROAIItcgOheCAAAiAAAiAAAiAAwYY2AAIgAAIgAAIgAAKRE4Bgi9xAKB4IgAAIgAAIgAAIQLChDYAACIAACIAACIBA5AQg2CI3EIoHAiAAAiAAAiAAAhBsaAMgAAIgAAIgAAIgEDkBCLbIDYTigQAIgAAIgAAIgAAEG9oACIAACIAACIAACEROAIItcgOheCAAAiAAAiAAAiAAwYY2AAIgAAIgAAIgAAKRE4Bgi9xAKB4IgAAIgAAIgAAIQLChDYAACIAACIAACIBA5AQg2CI3EIoHAiAAAiAAAiAAAhBsaAMgAAIgAAIgAAIgEDkBCLbIDYTigQAIgAAIgAAIgAAEG9oACIAACIAACIAACEROAIItcgOheCAAAiAAAiAAAiAAwYY2AAIgAAIgAAIgAAKRE4Bgi9xAKB4IgAAIgAAIgAAIQLChDYAACIAACIAACIBA5AQg2CI3EIoHAiAAAiAAAiAAAhBsaAMgAAIgAAIgAAIgEDkBCLbIDYTigQAIgAAIgAAIgAAEG9oACIAACIAACIAACEROAIItcgOheCAAAiAAAiAAAiAAwYY2AAIgAAIgAAIgAAKRE4Bgi9xAKB4IgAAIgAAIgAAIQLChDYAACIAACIAACIBA5AQg2CI3EIoHAv0T2NNus6Lll9e0\/tj\/2XFGEOiDwMf1NX15fUvbfR9nwzlAwJ3ACATbB7ovv6DJswUGH\/f2giNkTmC\/vaXr+QUV00sqNw8J1hb9PUGjDVPk\/ZZur2Y0mcxocbOh3TClwFlBoDWBzAXbnnbrK5oWBRUQbGcbxf6+pBeTggrm5e3vOc0W31NZllSu4BTPGmGwLzzQprykafGcZlfvE406JNDf91tavysf+8PbxYwmxn52QfPl2yz6Tdx+5QNtb9\/QbDKh6fw7Wm8\/DNYDcWKiuNvK8BbKW7DtbmkxnTyJj1lJ2+F5J1SCB9qs\/kGL2XOP4o2FIDvGb+jdekuYiYikOezuqOSoWnFB8\/Iu3UhDrP19t6FV+b1jX3rqN+W7daJiumrrMfqVPe3urmnGF6uTGV3dwjdV1hr2Oca2MiyRjAXbH7RefHYUG5P5ilKc4Bm2eRCROAjWogEcPfsHrXRTZ1Uk4e3iyRHWflvQZHZFN7rfDl7p8RRgv72hy8eLmgu6XN0nLKLj6+\/77ZrKxiiabSSbo28r2uwSvuSJ0K+c+kLKUeYMfVeEbWUoypkKtg+0XX31NBV6EArPFmtC\/rRNM\/svbZZ\/PQpfaap0ckmrhzaDRjXdphugUhcKNkxj+I0QVSie04vyl4TFWmT9nS9WrueS\/5H6jebixerzpHOvYvQrYp+Y0PTyJvFoZgx+xkcZYmwrPurV\/RhZCrb6PPiELpZ3CQ9I3Q3r7xcfaVv+TS\/YLpa0aaPXHgsjOkNVuEG0+bNXmyOJtpjQdHGb7jQo6fJehurvvLq2pHmVhqEVZi1zOh+nUTnX7fxU6mT2hm6Ty72K1a8IeZCcvgHR1sahBP5OrG0lcLU1h89PsO1\/ofKFmnf1jGblr5rq463zBHa0Xkw1gs1mUDys4NMNZJMvqLxHwu95e7h\/Q7qgmV7ROuWptWj6e1MU+ZB\/5rLo5jHFoEG8JZd7FbNfEafXIdrcPY7rEWJuK6516\/b7zATbA90tX2hWXv2F5qv\/dCODbz8R2N\/R8uKwcEMSWlNarC0WwhuPVxDyDHtodFI+yGe0WP\/Rw0lDnSKS\/l5tDyH1j2qBzVKf42mN5ANt16VhAUNCi0aMfiASvyL1k+c0W\/4cfRT6999\/p81mo\/37888\/rVvc4D+Mva30CCgjwSaGstUpN0sn0KMhoj3Vw4rmuq0+WuevqTVryEco\/krLzX\/VH+B\/XwSkaFTqU6GR9Pf9Pa0ueYWt4nOmc7puuRL643pBz46\/\/xuV2zbZtg+0ubnSLOhJQ1xQ9H5FbV\/xpW389ttvj9u+vHr1ij755JOzf59++il9\/fXX9MMPPxCLu2Qe0beV\/kjmI9ikKyLFeRZtnWB\/4NM4054eVpeaiGVBhfU2KQ3HLDB1Ha5dKNPRqU9BR9Hfxamzyufw9GfZaQWnnWB7ain77Xu6qm29E\/sikgYfEJVf+Q+t5n85ifEI+gxHylhwff7552cF2jkRx0Lv\/fv34VyOlyOn0la8VPbsQTIRbDrHWTlQfoZgO9sStF8wRcNs8tdOJ5AHKNFOBWE174mTz1dS3lqR+vRzDP1dNx1rtx2E3B8sfNVxHz2xL8U83Z2OX6n1mxcl3bdeaOWzB9OjUOMo2Tkh1vVzFn8\/\/fST38J6O1o6bcVblRsOlIFgUyIHx6kFwXnhLgcNTaDhI9+5A4dTyQOUYKcCgq3BGvYfSVOhzDvlqecY+rs6XcZM7aci5f5gIdi4ZeimZiOICGkbbVJ+RYmyDbAFDk99vnz5slGoseh6\/fr14xQpR+CqXDZ+zXeZ4anQc1E5jrhFN1WaVFvRtnavbyYv2E5XQBOa\/v3vmpwO3JbKtsXsN0u60Alg6\/y1p5LIAxQEm6192v1OI3A6bcfS7ix9fSuK\/l6bjrUXa8xN7g+Wgo0PVBPmBU0GjAiZ2kRafkUjzh39n4mL7n0WXKaIGYs4\/ryLyGLx9+233xrFG0fwYoq2pdVWdBb0+17agk10ULw9wf2NPkHeOi\/CL+y0jmbOHXBbzdmwpw5y2Pw3kVrCrtt0tv8CdjhiFP29Ph3rKoq8CTZGqRGTcW2KnKBfqUV5+lmwwxEznVjjSBhH0FwfnL9mirrFkduWYFtxNcqZ3ycs2ETHecjX2JY000SE3ATGGYLZfqxOBVSRMNcB33Tc1KfqYmwIuvyPVKdD4+jvtSt+D\/vYeRVsuo2Ee4wIne8Fpv4fs1\/RlDnwdLNOrHH0K4SQ4ilTnTDk6N2wDw33x\/E95rYSlliigk0MU5+udmrO9CDekMhu0Yg+rmnxrBJp4rPjgF+L+AjHTniqzoJw+J\/oWCfJOJb+rg4gfhL7fQs2InUa3HWA89hUk\/QrukjPadzxSOfxUDqxxtOfXaY+u5aJp0p10bYQArF12ZJsK61rZ\/XFNAWbEPYXpyNkx1cJgSGcFd+i5kfjbWUmswW9Ld953lDTyv7GH5nEb+F0ta6L+FR2wubGRmNYfaBnnWS0OZL+rvYJ0fdYmejwI9lvOeSwiYUQmD3uEefUb8UDu71WGR73r3Mqn76tPx3bk1\/Rzd44lVnPURftYgHXx4O3DNEtbhgqpy3ZthLQWOkJNnE1lBSWNuVG9bm3V9Mu5JUwUZ47bLAZsB0ohzY7QJcB\/5QwrjDgbSYiTI5WoKT1by3vhpn32Rc84Yqmv6t9wjHSLOAJIthIjQp5Ei5Cubu\/VBme\/ED0fkXbn\/wGAzgvTZ2a7EusVbbUiTaeiu3\/TgkJt5UKZoDnxASbGOpXN4c0CbaeHJV2L6STQzpeSWpy7Aq+yXDHzTYDtAXhkOrUT1UPhwFfveIXOXjIAxIKj5e1wbqynz+R0Q\/kiPq7MmD7vMAII9jqCxBcRJEfe6fsVwxl95RiwIJInZLkaNcQD11ZeFuQfh8G3i4XnRmMQUkJtlOERndDXtMNYnu4LdXuZ1rWdhuvBskOz9OvaLWN4AboutynR4FlN+Drd2M\/cImlzv16o8BnMzi7AFM4ISsSU3+Xp2f8XgQGE2ykRCmGtn\/SfsUUELDziWq\/UadCh4lqnUrFOW1qtM\/HytTTGc68SrqtnKmbw8fpCDZRFGkjMoZBKvQmoWK5xKiR7esIBIw8gAiCs\/MGxB9oe\/tGvzdedFFFh14U209Nzs5TNKCX6or9avD+Hlb4yP3NUw7bwUiy0Ozh4rWhccj1TM+v6MvvPi3KES0WaKJAGipvTDSfKiI5AtjXQ8\/aZk\/VvMagRASbZkl\/reX8SuXs2em+b0fB5NcBSqcV94U6nk9wRJbv+Zxukcrb6h9lcBLq0H5K5Uwu33ROy9WGdq3Kgy91I6DmLp3aY3v7dTuj\/2\/H1t+Vi0HPwlcenDz7K0m8u4sLe1tn4Fd0Cw\/YPzq2B1UY8T5rsTzUadp+hGQGbSWQARMQbPol\/TUeSo7JMWesc1SodmTDG+aB8XhuQex0e0\/NzzMUIcTbJo6NuQPVqtiSyuWcpoZ6P66OhVALYTXhmCZnN+RgLRTv7MsI+7vSJ3xvExRUsJF8ITuYaFcYnvxhU15sZH5FEr+nCyHXW72p0bWQ23ec7X7KF3hbDzHy14uYzKGtKBx9\/Ru\/YBMSBRsjT6Y9W0IJNqFcJ+cjdmLH10Plmxidkk19eDHFN1SWP9JmN9Adk331lFSOY+XsIqqc0K+i6e+Sb2kSGHYcwwo2Jbd3qLu+5OBXjH3LPqeRI1a9C6KOzVSNsgUXlDm0lY6M2349bsEmTjlKW3hoqmcKVwdxUCGja5UwsncCGjot3\/JcL576fLem7eBaTRm0DBHAIMK78VwBcoqMzi7AuVq2qtZfi7W\/S75F7JextitRVCoR11AXsI1GzsWvyNFK0V\/YRl3VTXL7mXJsNFbtQ773qCgqw94BIZe2UsPo5Y2IBVvTkn5N3SWnWomegooggk3JaWkclIWydPxe\/9MX5gHI6JD2W1q\/K6l8uzAsLiiomMxocTNkzpq5XqLT7f+1fxElJ5mLbc\/PajZNz\/P0VsT9XfItos1ibVeiYFNWNw4i2Myc0vIr5nrY5rGp0StPncnrYdQVo2G3+DAzTquteDXB8WDRCrbmJf3H8h9fyNMKp4HKaOTjLy1eGEPjp\/N6Gfz7dq7GeolRhSZevNjgO5pPJ5rFHwVNZm\/odpBtS8xOwIudOgrx0znFwb+Ja9vPmq5OPSezty1Sy+9F3d8h2Fpa0fC1bPxKgx+xSGHhqUUxchVWCBls0\/JtMc+OXwd7ZNNWwhCKU7AJeSyFdkm\/CsM0UAVKtDZOO3kWbEW\/g6wxOtPVGYlbMqhiZpBtSxocrVq+Xv\/3LdiU6S+xLl1tqHaxkP\/H3t8h2Jysn49fUaKVYv+y8NXqnQ14tWisDxaTorgMdeeDfNpKGEtGKNjaLOlXYZg6kjg1oP7G4X\/JgfsWaeLx+hRsJoZ2y9ZPEROxPofXrUS4g31G+9MGYdp3tLa1DVLr722jza0BkDw74LvPKyK+93aQk19pqEvR\/eJL3c4jxvy1qhWrZQ2ziW4DX4utU3IcgyITbC2X9Fet6PisOKXjlY9\/5\/p4yiwFmykvzzZKKeYk1UVb\/\/l5x8aS8QtzUnTR+0DdBnMi\/R2rRNsY0\/CdnPxKg6Aouo81\/Yggg1k6vs0LDcQIWxjBllNb6Qi45dejEmz77Q1dHvKfGpf01ypniix0v+qpHVr3Ro5TosY6OSSrG4\/JAu4zWqz\/0NHFe9YE0hJsyfR3Ja\/Gd15s2Aib3CZ6v1Ay+oA0\/YpsK\/FCtPtsjirYfv\/9V1ovptr831Peq3jOvl5Paf5\/8vYjQQRbZm3F2o03\/DAewdZlSX+tQrJTOjVuB6dQO4fwhuLAT+fz3IF6jIp4yx0QMBGZrpieOPU+eEhly\/CfpnbZY1tqRTal\/q62Y4vpmSYmsgjwPCUqDYK20fKm0jd\/lptfkW0l+nt3wUZkCjyI5xnidV2whdjaI7e20twz7D6NRLCJ02c2u\/ybBJtn53dk3CxEfAm4\/gSNaUq5ILcymI\/7yCjmRPijrRN6IU3dKY49KsGWWn9XpsI8t1tZBPj1WfIgGGjGwdhFzP0\/Vb8i20rsY+6CbbP5KdoI2\/\/8778DT4nm11aM3cLhgwgE2552d9fmPbyO+Whi52j52rNjPXE2rUptWa5WdeqeE3EqX9dXJsHb3QnJZz7HKVAEVC7EeP5LQrCl2N+JZOHjt2\/KIsCnYFMGwWD+0NTF8vMrsq1Ef9\/dV6pTojELttni+8CCLb+2YuoVLu8PL9jEJf2thIzYSc68DhlVaJp+8lGPPp2rNG0iMnUXVGYHx+fp+4rfpask8NumNhmyL3RBk0l\/75Zj2wxI7iMeBZvC2i2q1VwH7acZ+hXZVqKv7C7Y1Pt08v+xPtS7HfBmul4fGbYVr3wOBxtYsNks6ddgMK3aDHKXg+r856JHYmfu+tpmWrgqV9fnhnp4yNUxOzgItq6WOv9901VqQXGsEk25vyvRqsL9Yqayp9xHfAk2tV\/7jQpWZTc\/q+cXfGDCfkW2lVCnortgU\/dhY1EU6+Ply5dShM1vOfNsK34ZPR1tQMEmLul3EyjydIXQiYIKNiISE6d9RNUOx\/B59X6+0agD0Ymfjytys4Pj8\/gb9M7XcwzfiFmwpd\/fVT\/jq5\/KfcSTYFOia0WfEfvHrpanX5FtdfKVhcW2HoxJ3CqDb1MV44M3yRXLyeLN7yPPtuKX0dPRBhNs4qZ2ro7P1Il8L7\/XGqBpV38bEdf3nQCM02g+rsiVZO0aD0+Dk9Yw4pvxrr5arHdiQR1fN9WzL9b6KuTR39XFRn62ppH9lw87iYs6WFT0vzqUsvQrDZEgy\/SOV69eSWKIb1cV20OduvUeCcyyrYSx4jCCTYxMTb6g8v6DQ+3MnagXwcYl9yXa+hZrXHbTdLLFrVbqRmwSEHZ3UKifo807Z8pRE5LilXPI175z+MxXqoUXe7ZhrflORv1djbK1u3Wehonwlm\/BJorjwVZjZ+lXmi5A7WYL1A1peSFCbA\/1tlTe78iQZVsJY8UBBJt49XdBl6t72jvVzdSJuucUOBVjd0fl\/MJy08MJTeclbXZuJLqX3yx2Cw95Juar7L6v+sci2BrsOdj0c279XczDexLzfmcIHCNs6lRo4ZZu0t2n8C8a2mHSfsU01hRkO+Ws3gCeb6we6j6dNrbUlc\/mOObf5NpWzDV2+aRnwSbmsUxourgl9wkh02DsY0qvK9oPtF2XtJg9by\/cpnO6Xm8dRWvXclbfV6d4qmiSnymUWjRCimTZXZFWJe\/2bGojVX2HevYdYVO3nxDr5f9c522QaX+viSI3X+Ytwra\/p9WlfNHoKibP21j3jVz9SoMfcRCi6rRoTFG2169fS1O23qdD1U2pj2NEbmOQrp90f69fwSY6Om83ADd1oiEGqMoAe9ptfqSy\/F4r3iazBb0tS3o3mFA7lNO4b5cPsVuPRIgbCg8zkFT2yfjZuDzeh007csu2v4tCtBLFz2m2\/NnqAtSLYNOItcI53aSjvauvZ+tXTGON2wbj6mrRWKJsarl44YH3HLts20rVGfw+9yfYJIfiJ1n3CYVpZVyfERy\/RunraMYImIcVZbU8muOVEw9wPu3fF61UzmPqD36uWFtTyL6\/i1O9gmi7ek\/bjpkNzoJNm44xXB\/L16+Y+pZ7+o0aZeO8sSEfPC2rbuXhP7rWMCOAMUhr\/p4Em+jc3KYParUwrjBxzAWpnSi3NxoS1F23Q2lchOHZ\/rmZxbk+Zrv2tgiHxtLfdVHk7vmoLoJtv31PV7UUjCHy1qqGa25\/Rep+xRgNcg8O8Ea04tYZ\/DrE\/TorK517VqdCw0T9Mm4r5wBbft6DYFNuReNtKvRQY1Mn8qDQLZmm8TOj0HWMxEiRlSryIDz7tn8atHstpTHC4TpgtqrFyPq7qb13yE21E2wPtLm50tzSz35qtpV5z30pZ79iSjfwdBcRjmCpos37isxz9iN6FIq9lCPnttKCs81Xggu2\/faGLqeTQxK+oxjQ1dC0JNhTJ9KdMof3jIO6y2pC7dSMKNa+otXWZQuXHMj3UAfTRUwPfWKU\/X2\/pdurGU2kaX9u9xxt+47WXtt808ImH6vu3dpnzn7FVDcfG4xX1NVpSI5scS5ZXw91zzUWbhxtC\/Ew8XTaUD3zMSisYKtNjfleCNCwJBgRtoY+1hCKthrUeZFFSfOjMBdEWjWIDbHHXAOBvD\/STdWxTQKnCYy6vz\/QprykadXepWcWbt9QudpYLUp4bKv7La3f6RcxPe21NqOr26FWm1e9KWe\/Yhpr\/C7m4aR+FmlqhKuP+4zqInwsIMNsM5JzW6n6g\/\/ncIKt5rx5wPDbuJtvDeX5XP7ZD3dEU2i\/6LraiYXaipaN+889p9niXwPsMTcc3hjOrL96Ddgn0N8f9x87e+FScH\/4nnjrhkYB9yjQSuNKc2nF9ewN3XqN4lm24Kz9ikFgBEjx4Hw2nWjjSFcI8cQiUV30wIIxnFgjoqzbimX\/afGzIIJNnwj7FHXxt53DA90tX2imIYToDqI69SbQGDI+RAIaBxOekvlni4GEj7Wk1eahXga8E56ANj8kQEoCyxRt4vuI+zuLreu5Idom+CcpCmfx\/mRGixuHqJ3PVpi9X9GtEA3Tn9gsJtHG9xv1FW1j8ccXDjpxGFSsZd9WfHYs+VgeBdthIF+ec1RPosB+D7IH2qzKM1EdwfmxU3v7T895JDLEFP7bb9f0rvymedrSdQDh30\/ntCzBe\/g2Ia7UPPUHf\/k26O\/nbMx9rlzocttO9hAjZe1fX9B8uYoiaj0av6KLCAXe545Fm5rTVk2VVsLNJuLGETWTUOPjc7TN5rht+gPGoHOUmj\/3INj0A0Mr59O2wWujBZZOr+05m7kl8Kluc09LZiYh9yiGedqmpPLduvP+UwlATLuI4sa1lQ2dczvR3zs3it2GVs4XS4fo9+D9bJx+RV7J++RH\/V38mFsUCyd1i41KtFXPvGcbbwHCixN0Qovf48\/YT5sEYHUs\/o6\/xzjbij9+9SN5EGz1g+IdEACBGAjoxJXvhT8x1DOhMhxz00p62xh94yja26eLIZfFCgmhibeouvw1973XutSXBRdH1Sph5fuZo2oc0cMjbgIQbHHbB6UDATcCtShbuLwbt4Li1yAQKYHaDM9wm39z\/ppP4cZCrc9tQyK1cDLFgmBLxlQoKAjYENBE2QKsbLMpGX4DAikQqK24jiCthkUWT5XqFgyci76x4OMtPBBRS6H1yWWEYJN54D8QyI\/A\/hcqXzw\/bF7N+TcBt\/fIjx5qNGoC6nTokLf90huChRdH3jj\/jCNm6h\/nuPFnfNcE7zdv1xcJ7wYiAMEWCCwOCwIxEdjfl\/Riclp04m97nZhqibKAgGcCyupQ9BvPfHG4TgQg2DrhwpdBIFUC6tToZ7RY\/5FqZVBuEOiBgNJnIpgK7aHSOEXEBCDYIjYOigYCXgmoNyq\/WNJm7\/UMOBgI5ENAWrAT31RoPqBRk7YEINjaksL3QCAHAtItpDAI5WBS1CEEAfF+vMOtCg1RMxwzXQIQbOnaDiUHASsC++0NXU4nT4sQJi9oeYfbh1mBxI8yJSBv+Iq8tUzNnGC1INgSNBqKDAKuBCTRhm0+XHHi9zkREKZCJ7NrutshbyAn86ZcFwi2lK2HsoOAAwFRtCGK4AASP82HgLAFDsRaPmbNpSYQbLlYEvUAARsCx5y2CU0vb3A\/WBuG+E0eBI6LctAX8jBofrWAYMvPpqgRCHQjsN\/S7dWMJgXfYLykDaaAuvHDt9MnsLujcn5BRXFB8\/KOdunXCDXIkAAEW4ZGRZVAoDuBD7Rdf0fz6YQmszd0u\/3Q\/RD4BQgkR2BPu015aPdXdLPBApzkTDiiAkOwjcjYqCoInCWw29DNYkaTyYyubreEdOuzxPCFVAnst7S+ntOUo2rXt0gHSNWOIyo3BNuIjI2qgkA7Ahx1WNHyy2taf2z3C3wLBFIj8HF9TV8uV0gBSM1wIy4vBNuIjY+qgwAIgAAIgAAIpEEAgi0NO6GUIAACIAACIAACIyYAwTZi46PqIAACIAACIAACaRCAYEvDTiglCIAACIAACIDAiAlAsI3Y+Kg6CIAACIAACIBAGgQg2NKwE0oJAiAAAiAAAiAwYgIQbCM2PqoOAiAAAiAAAiCQBgEItjTshFKCAAiAAAiAAAiMmAAE24iNj6qDAAiAAAiAAAikQQCCLQ07oZQgAAIgAAIgAAIjJgDBNmLjo+ogAAIgAAIgAAJpEIBgS8NOKCUIgAAIgAAIgMCICUCwjdj4qDoIgAAIgAAIgEAaBCDY0rATSgkCIAACIAACIDBiAhBsIzY+qg4CIAACIAACIJAGAQi2NOyEUoIACIAACIAACIyYAATbiI2PqoMACIAACIAACKRBAIItDTuhlCAAAiAAAiAAAiMmAME2YuOj6iAAAiAAAiAAAmkQgGBLw04oJQiAAAiAAAiAwIgJQLCN2PioOgiAAAiAAAiAQBoEINjSsBNKCQIgAAIgAAIgMGICEGwjNj6qDgIgAAIgAAIgkAaB\/wfb6STaLu0SfgAAAABJRU5ErkJggg==)\n\n","dd3a7711":"## Opening Operation ","63624b04":"### We will apply Bitwise Not Operator","320ce8ff":"### Now, we are going to apply equalizer to increase the brightness of an image.","6b0677a6":"## Blurring and Smoothing","c9bae0ce":"## Equalize Histograms\n\nWhy Equalizing of Histograms is so important?? \n\nIt is very important because as in Histogram Equalization Process, it increases the image contrast. What I mean by contrast is that the image variance is increased and pixel intensity range is stretched to available range of pixel intensity. By this, features can be easily segmented and classified.\n\nIt also diminishes mal effect of over saturation or exposure.As the illumination changes the statistical properties like mean and variance changes, so in order to compensate those changes we use histogram equalization.\n","99aa6462":"## Blending Different Size Image","62f31b2f":"### Use of Gamma Parameter","7273e614":"## Erode Operation","be0d3bfd":"### Results of different kind of thresholding","39f3ed94":"## Image Histograms\n\nAn image histogram gives us the basic insight of what pixel value is largely present in the images. It's a graphical representation of pixel distribution in the image. It's also useful for having look whether an image is widely distributed or present in specific region. \n\nYou will understand this when we will discuss Histogram Equalization Process.","0bf9b763":"###  Region of interest","8d49326d":"## Mask the Region to be Cut-Off","b15c33f4":"## Now we will see the use of Mask","3467c571":"### In below code snippet I will show the result of sobel operator on Adaptive Threshold Image","b49b2589":"## Gradient Operation\n\n\n*   It is used for generating the outline of the image.\n"}}