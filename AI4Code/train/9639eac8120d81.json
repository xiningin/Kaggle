{"cell_type":{"c049a438":"code","d3f29837":"code","0c4ca018":"code","49279db4":"code","a5887cd6":"code","a92ce448":"code","95c3d279":"code","c3e4fe90":"code","3e1464c7":"code","56cf88f2":"code","a70a8c5d":"code","54037dd8":"code","85ee826f":"code","a8b81757":"code","ed010070":"code","20bfd9f0":"code","7263c6be":"code","5097783b":"code","797abe74":"code","adb60470":"code","bdb1b3ce":"code","cdc67c28":"code","09a65119":"code","c93229b3":"code","62e0cf69":"code","439b6aa4":"code","67107ce7":"code","c696fe54":"code","d4c5e54a":"code","eab4affb":"code","5f191f13":"code","a979a6ee":"code","291f1b00":"code","afddbab7":"code","ff96d06b":"code","65af74f2":"code","f39cef60":"code","9a20de17":"code","d408732c":"code","44a43443":"code","3563cb79":"code","96f165e8":"code","2e2f000d":"code","0296db5c":"code","697dc557":"code","b4006fd5":"code","a032426d":"code","93d3ac29":"code","d1e2c4d1":"code","44e7edb4":"code","fe5cb49a":"code","5ba89917":"code","7326c938":"code","ce318e57":"code","9a61c61c":"code","153c92bf":"code","8ae296f8":"code","a3f3062b":"code","e44edf18":"code","9cc84637":"code","8c3bce0c":"code","4a4caea2":"code","0c0ccdcb":"code","604eb7b0":"code","2278840c":"code","e2952d53":"code","78e0527d":"code","10077248":"code","3c341112":"code","2ff3d5b9":"code","876b2870":"code","4a52e06f":"code","cf9406ef":"code","e85c025e":"code","60b58e82":"code","876f8ae6":"code","023c88d5":"code","04d06ce3":"code","1efa641f":"code","5a3497b0":"code","6e3e9af6":"code","e4815f1a":"code","180a7226":"code","43d6e571":"code","1c5ae1c6":"code","1063358b":"code","c19d3ca8":"code","7347b22e":"code","df33a618":"code","6236570a":"code","64f8a22c":"code","c4dddd6c":"code","166c525d":"markdown","25d13fdd":"markdown","0e75a517":"markdown","3632111f":"markdown","788ecdd1":"markdown","8e613dbe":"markdown","a9729576":"markdown","6c57f96e":"markdown","e302339e":"markdown","19cd3786":"markdown","b092da15":"markdown","e9ac6fa1":"markdown","2ade57d7":"markdown","0f1e51e1":"markdown","b7120a5c":"markdown","aae3d82c":"markdown","f41a563f":"markdown","684e621d":"markdown","84a8feba":"markdown","8849e17c":"markdown","c68ac331":"markdown","5c64205b":"markdown","57571407":"markdown","1a6f0185":"markdown","de2fa010":"markdown","122fc7e5":"markdown","58e0fc7d":"markdown","2f48a022":"markdown","e7c5d0fd":"markdown","96d9e9ef":"markdown","1384f296":"markdown","a4c412d7":"markdown","5745ca54":"markdown","b1e11de9":"markdown","6679dded":"markdown","a3cebe01":"markdown","da3d76af":"markdown","3c7b9a27":"markdown","97217457":"markdown","7d11287b":"markdown","6fdb377b":"markdown","dbc80680":"markdown","f357af1b":"markdown","4e8265ce":"markdown","b9e1ddab":"markdown","d987ae35":"markdown","2cee4b8e":"markdown","cbba4a4b":"markdown","26f5c266":"markdown","87ba2670":"markdown","99fb72a7":"markdown","136d2d92":"markdown","ee090c17":"markdown","cc6a237a":"markdown","49465df4":"markdown","755b9b85":"markdown","c12bf425":"markdown","d3fee1c7":"markdown","cc498b55":"markdown","c1c0fbbc":"markdown","77bd5904":"markdown","7e5fdace":"markdown","f62bd8cb":"markdown","ad8090ae":"markdown","f4cb46ba":"markdown","0f3cd3ee":"markdown","41ba6808":"markdown","f42c10f9":"markdown","0b3f6c30":"markdown","dd182f65":"markdown","9cddee62":"markdown","b4bf4369":"markdown","1ddc234b":"markdown","6743ea48":"markdown","4fc2a5f9":"markdown","7fc3b49d":"markdown","0e54a679":"markdown","614bb952":"markdown","77d20887":"markdown","e3e9bc05":"markdown"},"source":{"c049a438":"# print() method prints whatever in it.\nprint(2+2)\nprint(type(2))     # <class 'int'>\nprint(type(2.5))   # <class 'float'>\nprint(type(5.0))   # <class 'float'>\nprint(type(5))     # <class 'int'>\nprint(type(0.0))   # <class 'float'>\nprint(type(0))     # <class 'int'>\nprint(2+2.0)       # 4.0\nprint(type(2+2.0)) # <class 'float'>\nprint(type(2+2))   # <class 'int'>","d3f29837":"print(3+4)         # 7\nprint(3.0+4)       # 7.0\nprint(3.2+4)       # 7.2\nprint(type(3.0+4)) # <class 'float'>\nprint(3*3)         # 9\nprint(3.0*3)       #9.0\nprint(10\/3)        # 3.3333333333333335\nprint(10\/5)        # 2.0\nprint(type(10\/5))  # <class 'float'>\nprint(3+5*2)       # 13\nprint((3+5)*2)     # 16\nprint(3+5*6\/2)     # 18.0\nprint((3+5)*6\/2)   # 24.0","0c4ca018":"# this is a comment line\n# this is another comment line\n\n\"\"\"\nthese are\ncomment lines\n\"\"\"\n\nprint(10\/\/3) # this is working as a code :D","49279db4":"productA = 5500\nproductB = 6000\nproductC = 7000\n\nvat_ratio = 0.2  # value_added_taxes ratio\n\nprint(productA + (productA * vat_ratio))  # this returns float because vat_ratio is a float number\nprint(productB + (productB * vat_ratio))\nprint(productC + (productC * vat_ratio))","a5887cd6":"\"\"\"\n\nTutorial 1: Let's create the variables below, belongs to a student.\n\n    * Student name\n    * Student surname\n    * Student name + surname (fullname)\n    * Student number\n    * Student gender\n    * Student ID Number\n    * Student Birth Year\n    * Student Address\n    * Student Age\n    \n\"\"\"\nstudentName = \"Alex\"\nstudentSurname = \"Ferguson\"\nstudentFullname = studentName + ' ' + studentSurname\n# Lets look at our full name variable if created correctly\nprint(studentFullname)\n\nstudentGender = True  # Let's assume that True: Male,  False: Female\nprint(studentGender)\n\nstudentID = \"1234567890\" #\nstudentBirthYear = 1990\nstudentAge = 2021 - studentBirthYear\n# these variables have also created but we didn't print them\n\nstudentAddress = \"Cliffton USA\"\nprint(studentAddress)","a92ce448":"\"\"\"\n\nTutorial 2: Let's calculate total value of the products below.\n\n    Product 1 => 50     $\n    Product 2 => 60.5   $\n    Product 3 => 356.45 $\n    \n\"\"\"\n\nproduct1 = 50\nproduct2 = 60.5\nproduct3 = 356.45\n\ntotal = product1 + product2 + product3\nprint(total)","95c3d279":"# Basic data types\nage = 4\nweight = 12.5\nname = \"Alex\"\nisStudent = False\n\nprint(type(age))\nprint(type(weight))\nprint(type(name))\nprint(type(isStudent))","c3e4fe90":"# Basic data transformations\nage = 4\nweight = 12.5\nname = \"Alex\"\nisStudent = False\n\n# int to float\nresult = float(age)\nprint(result)\nprint(type(result))\n\n# float to int\nresult = int(weight)\nprint(result)\nprint(type(result))\n\n# bool to str\nresult = str(isStudent)\nprint(result)\nprint(type(result)) # \"True\" \n\n# bool to int\nresult = int(isStudent)\nprint(result)\nprint(type(result))  # True: 1, False: 0","3e1464c7":"\"\"\"\nTutorial 1: Lets compute area and circumference of the circle\n\n    Circle's circumference formula: 2\u03c0r\n    Circle's area formula: \u03c0r\u00b2\n    (\u03c0 = 3.14)\n\n\"\"\"\n\npi = 3.14  # pi value\nr = 5   # radius of the circle\n\narea = pi*(r**2)\ncircumference = 2*pi*r\n\nresult = \"Area of the circle: \" + str(area) + ', and the circumference: ' + str(circumference)\nprint(result)\n","56cf88f2":"\"\"\"\nTutorial 2: Lets print the distance traveled by a vehicle, transforming the types (kilometers to miles)\n\n    km = 1.609344 * mile\n\n\"\"\"\n\ndistance_km = 80\ndistance_mile = distance_km \/ 1.609344\ndistance_mile = round(distance_mile, 2)   # round a float number to two decimals\n\nprint(str(distance_km) + \" km or \" + str(distance_mile) + ' mile')","a70a8c5d":"name = \"Alex\"\nsurname = 'Ferguson'\nage = 37\nmsg = \"My name is \" + name + ' and surname is: ' + surname + '.'\nprint(msg)\n# when creating string, it's both possible to use '' or \"\"","54037dd8":"name = \"Alex\"\nsurname = 'Ferguson'\nage = 37\nmsg = \"My name is \" + name + ' and surname is: ' + surname + '.'\nchar_count = len(msg)\n\nprint(msg[0])\nprint(msg[1])\nprint(msg[-1])\nprint(msg[char_count - 1])\n\nprint(msg[0:5])\nprint(msg[6:16])\nprint(msg[:10])\nprint(msg[11:])\n\nprint(char_count)\nprint(msg[-9:-1])\nprint(msg[0:41:2]) # step 2 at a time 0. index is start 41. index is stop\nprint(msg[::1])  # sted 1 for full list\nprint(msg[::-1])  # reverse full list","85ee826f":"name = \"Alex\"\nsurname = 'Ferguson'\nage = 37\n\nprint('My name is {} {}'.format(name,surname))\nprint('My name is {1} {0}'.format(name,surname))\nprint('My name is {s} {n}'.format(n=name,s=surname))\nprint(\"My name is {} {}. I'm {} years old.\".format(name,surname,age))\nprint(\"My name is {0} {1}. I'm {2} years old.{2}\".format(name,surname,age)) # can be use a format id two or more times at a string\n\nnumber = 200 \/ 700\nprint('the result is {n:0.2}'.format(n=number))  # round two decimals, zero is about space from where number is\nprint('the result is{n:10.2}.'.format(n=number))  # 10-char-space between \"is\" and \".\"\n\nprint(f\"My name is {name} {surname} and I'm {age} years old.\")  # f string: a useful way of formatting","a8b81757":"website = \"https:\/\/www.emreustundag.com\"\nkernel_name = \"Python for Beginners: A Comprehensive Guide.\"\n\n# Hint: Strings can be thought like character lists.\n\n# 1- How many characters are there in 'kernel_name' string variable?\nprint(len(kernel_name))\n\n# 2- Slice \"www\" part of 'website' variable.\nprint(website[7:10])\n\n# 3- Slice \"com\" part of 'website' variable.\nprint(website[11:23])\n\n# 4- How can we get first 15 and last 15 characters from 'kernel_name' variable.\nprint(kernel_name[:15])  # or [0:15]\nprint(kernel_name[-15:])\n\n# 5- Reverse the 'kernel_name' string and print it.\nprint(kernel_name[::-1])\n\n# 7- Change the value of \"w\" to \"W\" of 'Hello world' string, using string slicing.\ns = 'Hello world'\ns = s[:6] + \"W\" + s[-4:]\nprint(s)\n\n# 8- Print 'abc' for 3 times with one space.\nprint('abc ' * 3)\n\n\nname, surname, age, passion = 'Alex','Ferguson', 37, 'football' \n\n# 9- Print below string with the variables created above.\n#    'My name is Alex Ferguson, I'm 37 years old and football is my passion.' \n\nresult1 = \"My name is \" + name + \" \" + surname + \", I'm \" + str(age) + \" years old and \" + passion + \" is my passion.\"\nresult2 = \"My name is {} {}, I'm {} years old and {} is my passion\".format(name, surname, age, passion)\nresult3 = \"My name is {0} {1}, I'm {2} years old and {3} is my passion\".format(name, surname, age, passion)\nresult4 = f\"My name is {name} {surname}, I'm {age} years old, {passion} is my passion\"\n\nprint(result1)\nprint(result2)\nprint(result3)","ed010070":"msg = \"Welcome to Python Kernel\"\n\nprint(msg.upper())\nprint(msg.lower())\nprint(msg.capitalize())  # only first letter is upper, others are lower\nprint(msg.title())   # whole words' first letters are upper\n\nprint(\"abc\".upper())\nprint(\"    a b  c  \".strip())  # only first letter's left and last letter's right are stripped\nprint(msg.split())  # each words are splitted from spaces and created a list of msg's words\nprint(\"Alex.Ferguson.123.1231\".split(\".\")) # each words are splitted from \".\" and created a list of msg's words\n\nprint(\"-\".join(msg))\n\nprint(msg.index(\"m\"))  # which index 'm' character been\nprint(msg.startswith(\"W\"))  # true if msg starts with \"W\"\nprint(msg.endswith(\".\"))  # true if msg ends with \".\"\n\nprint(msg.replace(\"Python\", \"Java\"))  # replace Python word to Java\nprint(msg.lower().replace(\" \", \"-\").replace(\"Python\",\"C#\").replace(\"-\",\",\")) # can be used multi method on strings","20bfd9f0":"website = \"https:\/\/www.emreustundag.com\"\nkernel_name = \"Python for Beginners: A Comprehensive Guide.\"\n\n# 1- Delete first and last spaces from '  Hello World  '.\nprint(' Hello World '.strip())\n# print(' Hello World '.lstrip())  # stripped from left\n# print(' Hello World '.rstrip())  # stripped from right\n\n\n# 2- Delete all characters from website, excluding 'emreustundag.com'\nprint(website.strip(\":\/pthws.\"))\n\n# 3- Lower all characters of'kernel_name' variable.\nprint(kernel_name.lower())\n\n# 4- How many \"e\" are there in 'website' ? (Hint: use--> count('e'))\nprint(website.count('e'))\nprint(website.count('e',0,10))   # there is no 'e' between 0-10 indices in website\n\n# 5- Does 'website' start with \"www\" and end with \".com\"?\nprint(website.startswith('www'))\nprint(website.endswith('.com'))\n\n# 6- Does 'website' have '.com'?\nprint(website.find('.com')) # if returns a number > -1, then we can say there is \".com\" in website. -1 means there is no \".com\" in this example\nprint(website.find('.com',0,10)) # returns -1 because there is no \".com\" between 0-10 indices\nprint(kernel_name.rfind('n'))  # returns 32 because rfind method starts searching from right side of kernel_name.\n# we can also use index() method alternatively to find()\nprint(kernel_name.index(\"n\"))  # returns 5, n is in 5th index firstly\nprint(kernel_name.rindex(\"n\")) # returns 32, n is in 32nd if we start searching on right side\n# print(kernel_name.index(\"adfiglkadfg\")) # error ---> this is difference between find() and index() methods\n\n# 7- Is alphabethical or digital all characters in 'kernel_name'? (Hint: use isalpha(), isdigit())\nprint(kernel_name.isalpha())\nprint(kernel_name.isdigit())\n\n# 8- Add \"*\" to left and right of 'Contents' string.  (Hint: use center(), ljust() or rjust())\nprint('Contents'.center(50, \"*\"))\nprint('Contents'.rjust(50, \"*\"))\nprint('Contents'.ljust(50, \"*\"))\n\n# 9- Change all spaces to \"-\" in 'kernel_name'.\nprint(kernel_name.replace(\" \",\"-\"))\n\n# 10- Change \"World\" to \"There\" in 'Hello World'.\nprint('Hello World'.replace(\"World\",\"There\"))\n\n# 11- Split the words of 'kernel_name' from spaces, cleaning \":\" and lowering all letters.\nresult = kernel_name.lower().replace(\":\",\"\")\nprint(result.split())\n","7263c6be":"msg = \"Welcome to my kernel. I'm Emre Ustundag\"\n\nnumbers = [1,3,7,9]\n\nprint(numbers)\nprint(numbers[0])\nprint(numbers[3])\n# print(numbers[4])   # IndexError: list out of range\n\nnames = ['Alex', 'James', 'Emily', 'Connor']\n\nprint(type(names))\nprint(type(names[0]))\nprint(type(numbers[0]))\n\nlist_alex = ['Alex', 37]\nlist_james = ['James', 22]\n\npeople = [['Alex', 37], ['James', 22]]   # or people = [list_alex, list_james]\n\nprint(people)\nprint(people[0])\nprint(people[0][1])\n","5097783b":"programming_languages = [\"Python\",\"C#\",\"Java\",\"Javascript\",\"React\"]\n\nprint(programming_languages)\nprint(type(programming_languages))\nprint(programming_languages[0:2])\nprint(programming_languages[2:])\nprint(programming_languages[:3])\nprint(programming_languages[-1])\nprint(programming_languages[-4:-1])\n\nprogramming_languages[-1] = \"Ruby\"   # \"React\" changes to \"Ruby\"\nprint(programming_languages)\nprogramming_languages = programming_languages + [\"Angular\",\"Vuejs\"]\nprint(programming_languages)\n\n# Short intro to if clauses\nif \"Python\" in programming_languages:\n    print(\"Yes, it's in it\")\n\n# Short intro to loops: we can reach all elements in lists with for loop\nfor x in programming_languages:  \n    print(x)\n    \ndel programming_languages[0]  # delete first element\nprint(programming_languages)","797abe74":"# 1-  Create a list that contains \"Samsung S5,Samsung S6,Samsung S7,Samsung S8\".\ncellphones = [\"Samsung S5\",\"Samsung S6\",\"Samsung S7\",\"Samsung S8\"]\n\n# 2-  How many elements are there in the list above?\nprint(len(cellphones))\n\n# 3-  What are the list's first and last elements?\nprint('First: {}, Last: {}'.format(cellphones[0], cellphones[len(cellphones) - 1]))\n\n# 4- Change \"Samsung S5\" to \"Samsung S9\".\ncellphones[0] = \"Samsung S9\"\nprint(cellphones[0])\n\n# 5- Is \"Samsung S6\" in this list ?\nif \"Samsung S6\" in cellphones:\n    print(\"Yes, it's in it\")\n\n# 6-  What is -3th index of the list?\nprint(cellphones[-3])\n\n# 7-  Access the list's first two elements.\nprint(cellphones[0:2])  # or print(cellphones[:2])\n\n\n# 8-  Add \"Samsung S9\" and \"Samsung S10\" instead of last two in the list.\ncellphones[-2:] = [\"Samsung S9\", \"Samsung S10\"]\nprint(cellphones)\n\n\n# 9-  Add \"IPhone X\" and \"IPhone XR\" to the list.\ncellphones = cellphones + [\"IPhone X\", \"IPhone XR\"]\nprint(cellphones)\n\n# 10- Delete the last element of the list.\ndel cellphones[-1]\nprint(cellphones)\n\n\n# 11- Reverse and print the list's all elements.\nprint(cellphones[::-1])\n\n# 12- Create a list that contains the data below. \n\n      # userA: Alex Ferguson 2010, (70,60,70)\n      # userB: Conner O'Brien  1999, (80,80,70)\n      # userC: Emily Smith 1998, (80,70,90) \n\nuserA = [\"Alex Ferguson\", 2010, (70,60,70)]\nuserB = [\"Connor O'Brien\", 1999, (80,80,70)]\nuserC = [\"Emily Smith\", 1995, (80,70,90)]\n\nusers = [userA, userB, userC]\nprint(users)\n\n\n# 13- Prints the users one by one.\nprint(users[0])\nprint(users[1])\nprint(users[2])\n\n# for loop is usefeul here\n\nfor each in users:\n    print(each)\n\n# 14- Print users' names, ages and points.\n\nfor each in users:\n    name = each[0]\n    age = 2021 - each[1]\n    point = each[2]\n    mean = (each[2][0] + each[2][1] + each[2][2]) \/ len(each[2])  # it's not useful for further coding but fairly well for now\n    print(f\"User's name: {name}, age: {age}, points: {point}, point's mean: {mean}\")","adb60470":"numbers = [1,5,8,9,3,45,77,5]\nletters = ['a','b','e','s','a','y']\n\nprint(min(numbers))\nprint(max(numbers))\nprint(min(letters))\nprint(max(letters))\n\n# adding\nnumbers.append(10)\nprint(numbers)\nnumbers.insert(3,5)  # 5 inserted to 3rd index\nprint(numbers)\nnumbers.insert(-1,50)  # 50 inserted before last item\nprint(numbers)\nnumbers.insert(len(numbers), 150)  # add 150 like append method\nprint(numbers)\n\n# deleting\nnumbers.pop()   # delete last item as default parameter\nprint(numbers)\nnumbers.pop(0)  # delete first item\nprint(numbers)\nnumbers.remove(45)  # delete 45 from list\nprint(numbers)\nletters.remove('y')\nprint(letters)\n\nnumbers.sort()\nprint(numbers)\nletters.sort()\nprint(letters)\nnumbers.reverse()\nprint(numbers)\n\nprint(numbers.count(5))   # how many 5 are there in list?\nprint(letters.count(\"a\"))\n\nprint(numbers.index(3))   # which first index does 3 have in numbers list?\n\nnumbers.clear()   # returns an empty list\nprint(numbers)\n","bdb1b3ce":"names = ['Alex', 'James', 'Emily', 'Connor']\nyears = [1998, 2000, 1998, 1987]\n\n# 1-  Add \"Rachel\" to names' bottom.\nnames.append(\"Rachel\")\nprint(names)\n\n# 2-  Add \"Abraham\" to top of the names.\nnames.insert(0, \"Abraham\")\nprint(names)\n\n# 3-  Remove 'James' from the names.\n# names.pop(2)  # we can use also this\nnames.remove(\"James\")\nprint(names)\n\n# 4-  What is the index of \"Emily\"? Then remove it from list.\nprint(names.index(\"Emily\"))\nnames.pop(names.index(\"Emily\"))\nprint(names)\n\n# 5-  Is \"John\" an item of names list?\nisItem = \"John\" in names\nprint(isItem)\n\n# 6-  Reverse the items of years.\nyears.reverse()\nprint(years)\n\n# 7-  Sort names alphabetically.\nnames.sort()\nprint(names)\n\n# 8-  Sort numbers ascendingly.\nyears.sort()\nprint(years)\n\n# 9-  cellphones = \"IPhone X,IPhone XR\" transform this string into list.\ncellphones = \"Iphone X, Iphone XR\"\ncellphones = cellphones.split(\",\")\nprint(cellphones)\n\n# 10- What are the smallest and biggest year in years list ?\nprint(max(years))\nprint(min(years))\n\n# 11- How many \"1998\" in years list?\nprint(years.count(1998))\n\n# 12- Clear all items from years list.\nyears.clear()\nprint(years)","cdc67c28":"_list = [1,2,3]\n_tuple = (1,\"two\",True)\n_tuple2 = (3,\"four\",True)\n\nprint(_list)\nprint(_tuple)\n\nprint(type(_list))\nprint(type(_tuple))\n\nprint(_list[1])\nprint(_tuple[1])\n\nprint(len(_list))\nprint(len(_tuple))\n\n_list[0]=5\n# _tuple[0]=5    # tuple doesn't support assignments\n\n_list.append(3)\n# _tuple.append(5)   # using tuple, we cannot use some list methods like \"append\"\n\nprint(_tuple.count('two'))\n\nprint(_tuple + _tuple2)\n\n_t = tuple([3,4,5])   # list to tuple\n\nprint(type(_t))\nprint(_t)\n","09a65119":"# key - value\n\ncities = ['Amsterdam','New York']\nnumbers = [41,34]\n\nprint(numbers[0],cities[0])\nprint(numbers[1],cities[1])\n\nprint(numbers[cities.index('New York')])\nprint(numbers[cities.index('Amsterdam')])\n\n# dictionary\n_dict = {'Amsterdam': 41,'New York': 34}\n\nprint(_dict['Amsterdam'])\nprint(_dict['New York'])\n\n# dictionary in dictionary\nstudents = { \n    100: {\n        \"name\": \"Emre\",\n        \"surname\": \"Ustundag\",\n        \"age\": 4,\n        \"grade\": [70,80,70]\n    }, \n    101: {\n        \"name\": \"Emily\",\n        \"surname\": \"O'Brien\",\n        \"age\": 10\n    } \n}\n\nprint(students[100])\nprint(students[101][\"name\"])\nprint(students[101][\"surname\"])\n\nresult = (students[100][\"grade\"][0] + students[100][\"grade\"][1] + students[100][\"grade\"][2]) \/ 3\n\nprint(result)\n","c93229b3":"# 1- Create a dictionary that has 3 products with (id, name, price) keys\n# 2- Show a product with an id in this dictionary\n\nproducts = {\n            \"100\" : {\"name\" : \"Iphone X\" , \"price\" : \"7000\"},\n            \"101\" : {\"name\" : \"Iphone XR\" , \"price\" : \"7500\"},\n            \"102\" : {\"name\" : \"Iphone 8\" , \"price\" : \"4500\"}\n}\n\nprint(type(products))\n\nid = \"100\"\n# Show id 100 product\nprint(products[id])\n# show 100 id product's name and price\nprint(products[id][\"name\"])\nprint(products[id][\"price\"])","62e0cf69":"opelObj = {\n    \"brand\": \"Opel\",\n    \"model\": \"Corsa\",\n    \"year\": 2020\n}\n\n# print(opelObj[\"brand\"])\n# print(opelObj.get(\"brand\"))\n\n# get keys from dict\n# for x in opelObj:\n#     print(x)\n\n# get values from dict\n# for x in opelObj:\n#     print(opelObj[x])\n\n# get values from dict\n# for x in opelObj.values():\n#     print(x)\n\n# for x,y in opelObj.items():\n#     print(x,y)\n\n# print(\"brand\" in opelObj)\n# print(len(opelObj))\n# opelObj.pop(\"model\")\n# opelObj.popitem()   # remove last obj\n# print(opelObj)\n\nobj = opelObj.copy() # this using is important, because variables like list, dictionary are reference types.\nobj.clear()\nprint(obj)\nprint(opelObj)\n\nobj[\"brand\"] = \"Mazda\"\n\nopelObj.update({\n    \"brand\": \"Bmw\",\n    \"color\": \"Red\"\n})\n\nprint(obj)\nprint(opelObj)","439b6aa4":"'''\n    player 1: \n        id           => 1\n        name         => Cristiano Ronaldo\n        yearOfBirth  => 1985\n        nationality  => Portugal\n        current_team => Portugal\n        history      => Juventus,Real Madrid,Portugal\n\n    player 2: \n        id           => 2\n        name         => Lionel Messi\n        yearOfBirth  => 1987\n        nationality  => Argentina\n        current_team => Barcelona,\n        history      => Barcelona,Argentina,Portugal\n'''\n# 1- Lets create a dictionary with data above\nplayers = {\n        1 : {\n                \"name\" : \"Christiano Ronaldo\",\n                \"yearOfBirth\" : 1985,\n                \"nationality\" : \"Portugal\",\n                \"current_team\" : \"Portugal\",\n                \"history\" : [\"Juventus\", \"Real Madrid\", \"Portugal\"]\n                },\n        2 : {\n                \"name\" : \"Lionel Messi\",\n                \"yearOfBirth\" : 1987,\n                \"nationality\" : \"Argentina\",\n                \"current_team\" : \"Barcelona\",\n                \"history\" : [\"Barcelona\", \"Argentina\", \"Portugal\"]\n                }\n\n        }\n\n\nid = 3\nname = \"Neymar Jr.\"\nyearOfBirth = 1992\nnationality = \"Brazil\"\ncurrent_team = \"PSG\"\nhistory = \"Barcelona, Brazil, PSG\"\n\n\nplayers.update({\n    id: {\n        \"name\": name,\n        \"yearOfBirth\": yearOfBirth,\n        \"nationality\": nationality,\n        \"yearOfBirth\": yearOfBirth,\n        \"current_team\": current_team,\n        \"history\": history.split(',')\n        }\n    })\n\n\n# 2- Find messi by id with \"get\" method\nid = 2\nplayer = players.get(id)\nprint(f'Football player: {player}')\nprint(f'Name: {player.get(\"name\")}')\n\n# 3- Lets delete Neymar Jr from list by id with pop method\nid = 3\nplayers.pop(id)\nprint(players.get(id))  # none because Neymar Jr. is not in dict anymore\n","67107ce7":"# list\n# tuple\n# dictionary\n# sets => cannot be indexed and sorted\n\nfruits = {\"apple\",\"berry\",\"melon\",\"grape\"}\nvegetables = {\"green pea\",\"onion\"}\n\n# print(fruits[0])  # TypeError: 'set' object is not subscriptable\nprint(\"apple\" in fruits)\nfruits.add(\"water melon\")\nprint(fruits)\nfruits.update([\"cherry\"])\nprint(fruits)\n","c696fe54":"# value types => string, number\nx = 5\ny = 25\n\nx = y\n\ny = 10\n\nprint(x,y)   # only y changed\n\n# reference types => list\na = [\"apple\",\"banana\"]\nb = [\"apple\",\"banana\"]\n\na = b\n\nb[0] = \"grape\"   # both a and b list's zero index changed\n\nprint(a, b)","d4c5e54a":"# a = 5\n# b = 10\n# c = 20\n\na, b, c = 21, 10, 20\n\n# a, b = b, a\na += 5       # a = a + 5\na -= 5       # a = a - 5\na *= 5       # a = a * 5\na \/= 5       # a = a \/ 5\na %= 5       # a = a % 5\na **= 5      # a = a ** 5\na \/\/= 5      # a = a \/\/ 5\n\nvalues = (1, 2, 3, 4, 5, 6)\n\na, b, *c = values\nprint(a,b,c)\na, *b, c = values\nprint(a,b,c)\n*a, b, c = values\nprint(a,b,c)","eab4affb":"a, b, c = 2, 5, 12\nx, y = 10, 14\n\n# 1- What is the difference between x*y and summation of a,b,c ?\n\nresult = (x*y) - (a + b + c)\nprint(result)\n\n# 2- What is the division of c to b without remainder.\n\nresult = c \/\/ b\nprint(result)\n\n# 3- What is mode 3 of (a + b + c) summation ?\n\nresult = (a+b+c) % 3\nprint(result)\n\n# 4- Compute b to the power of a.\n# sonuc = b ** a\n\n# 5- According to \"a, *b, c = numbers\" , what is the c to power of 3 and what is the summation of b list's values ? \nnumbers = 1, 5, 7, 10, 3\na, *b, c = numbers\nprint(b[0] + b[1] + b[2])\nprint(c ** 3)","5f191f13":"# email, password => database\n\n# these are assignments\nemail = 'info@emreustundag.com'\npassword = '12345'\n\n# these are comparisons\nemail == 'info@emreustundag.com'\npassword == '12345'\n\na, b, c, d = 5, 5, 20, 4\nusername = \"emreustundag\"\npassword = \"12345\"\n\nprint(a == b) # True\nprint(a != b) # False\nprint(a == c) # False\nprint(username == 'emreustundag')\nprint(username != 'emreustundag')\nprint(a > c)\nprint(c > a)\nprint(a >= b)\nprint(a < c)\nprint(a <= b)\nprint(True == 1)\nprint(False == 0)\nprint(False + True + 50)\n\nprint(int(True)) # 1","a979a6ee":"# Which number is bigger?\nnum1 = 80\nnum2 = 70\n\nstatus = (num1 > num2)\nprint(f'Number 1 is bigger than number 2 status: {status}')\n\n# Single or double\nnum = 39\nisSingle = (num % 2) == 1\nprint(isSingle)\n\n# Negative or Positive\nnum = -11\nisPositive = num > 0\nprint(isPositive)\n\n# Simple email - password validation\nemail = 'info@emreustundag.com'\npassword = '12345'\n\nisEmailTrue = email == 'info@emreustundag.com'\nisPassTrue = password == '123245'\nprint(f\"Mail is: {isEmailTrue}, Password is: {isPassTrue}\")","291f1b00":"# Example: age >= 18 and (graduation == 'university')\n\nx = -8\n\n# 1- And Operator\n\n# result = 5 < x < 15\nresult = (x > 5) and (x < 15) \n\n# True and True => True\n# False and True => False\n# False and False => False\n\n# 2- Or \n\nresult = (x > 0) or (x % 2 == 0)\n\n# True or True => True\n# False or True => True\n# False or False => False\n\n# 3- Not op.\nresult = not(x > 0)\n\n\n# Question: Is x a double number and between 5-10?\n\nresult = ((x>5) and (x<10)) and (x%2==0)\n\nprint(result)\n\n# Lets practise with a demo","afddbab7":"# 1- Check if a number between 50-100.\n\nnumber = 42\nstatus = (number < 100) and (number > 50)\nprint(status)\n\n# 2- Check if a number positive or double.\n\nnumber = 123\nstatus = (number > 0) or (number % 2 == 0)\nprint(status)\n\n\n# 3- How can we create a validation with email and password with a simple way.\nusername = \"emreustundag\"\npassword = \"1234\"\n\nisUsername = username == \"emreustundag\"\nisPassword = password == \"1234\"\n\nstatus = isUsername and isPassword\nprint(\"Username and password status:\",result)\n\n# 4- Check if a number is bigger than others among three numbers\n\nnum1, num2, num3 = 10, 12, 8\n\nstatus = (num1 > num2) and (num1 > num3)\nprint(\"Is first number th biggest?\",status)\n\nstatus = (num2 > num1) and (num2 > num3)\nprint(\"Is second number th biggest?\",status)\n\nstatus = (num3 > num1) and (num3 > num2)\nprint(\"Is third number th biggest?\",status)\n\n# 5- Compute the mean of grade, including two visas (w = %60) and a final (w = %40) grade and then check this student passing status.\n#    If the mean of grade is bigger than 50, print \"status\"\n#    a-) Condition 1: Even if the mean is bigger then 50, final grade must be 50 at least.\n#    b-) Condition 2: If a student has bigger than 70 final grade, then the average is unimportant to pass.\n\nvisa1, visa2, final = 20, 10, 72\n\nmean = (((visa1 + visa2) \/ 2) * 0.4) + (final * 0.6)\nprint(mean)\n\nstatus = mean > 50\nprint(\"Passed status:\", status)\ncondition1 = final >= 50\nstatus = status and condition1\nprint(\"Passed status with first condition: \",status)\ncondition2 = (status) or (final >= 70)\nprint(\"Passed status with all conditions: \",condition2)\n","ff96d06b":"username = \"emreustundag\"\npassword = \"1234\"\n\nif (username == \"emreustundag\"):\n    if (password == \"1234\"):\n        print('Welcome')\n    else:\n        print(\"Wrong password\")\nelse:\n    print(\"Wrong username\")\n","65af74f2":"x = 30\ny = 40\n\nif (x > y):\n    print('x is bigger than y.')\nelif (x == y):\n    print('x is equal to y')\nelse:\n    print('y is bigger than x.')\n\nnum = 50\n\nif num > 0:\n    print('Positive number.')\nelif (sayi == 0):\n    print('Zero.')\nelse:\n    print('Negative number.')","f39cef60":"# 1- Check if a number between 50-100 with \"if conditions\". \n\nnumber = 102\n\nif (number < 100) and (number > 50):\n    print(\"The number is between 50-100\")\nelse:\n    print(\"The number is not between 50-100\")\n\n# advanced conditions \nif number < 100:\n    if number > 50:\n        print(\"The number is between 50-100\")\n    else:\n        print(\"The number is smaller than 50\")\nelse:\n    print(\"The number is bigger than 100\")\n\n# 2- Check if a number positive or double  with \"if conditions\".\n\nnumber = 123\n\nif (number > 0) or (number % 2 == 0):\n    print(\"The number is positive or double\")\n\n\n# 3- How can we create a validation with email and password with  with \"if conditions\".\nusername = \"emreustundag\"\npassword = \"1234\"\n\nisUsername = username == \"emreustundag\"\nisPassword = password == \"1234\"\n\nif isUsername:\n    if isPassword:\n        print(\"Access succesful\")\n    else:\n        print(\"Access denied\")\nelse:\n    print(\"Access denied\")\n\n\n# 4- Check if a number is bigger than others among three numbers  with \"if conditions\".\n\nnum1, num2, num3 = 14, 12, 13\n\n\nif (num1 > num2):\n    if (num1 > num3):\n        print(\"Number 1 is the biggest\")\nelif (num2 > num3):\n    print(\"Number 2 is the biggest\")\nelse:\n    print(\"Number 3 is the biggest\")\n    \n\n# 5- Compute the mean of grade, including two visas (w = %60) and a final (w = %40) grade and then check this student passing status with \"if conditions\".\n#    If the mean of grade is bigger than 50, print \"status\"\n#    a-) Condition 1: Even if the mean is bigger then 50, final grade must be 50 at least.\n#    b-) Condition 2: If a student has bigger than 70 final grade, then the average is unimportant to pass.\n\nvisa1, visa2, final = 70, 90, 49\n\nmean = (((visa1 + visa2) \/ 2) * 0.4) + (final * 0.6)\n\nif final >= 70:\n    print(\"Passed\")\nelse:\n    if final >= 50:\n        if mean >= 50:\n             print(\"Passed\")\n        else:\n            print(\"Not passed because of mean\")\n    else:\n        print(\"Final is smaller than 50. Not passed\")\n        \n                \n\n\n# 6- Body Mass Index: Compute BMI with using user's name, height and weight. Compute bmi and create if conditions.\n#    Formula: BMI = (Weight \/ Height (m) ** 2)\n#    BMI Groups. (we will use \"if conditions\" as an intro to next chapter)\n#    0-18.4    => Thin \n#    18.5-24.9 => Normal  \n#    25.0-29.9 => Overweight\n#    30.0-34.9 => Obese\n\nname = \"Emre Ustundag\"\nheight_cm = 170\nheight_m = height_cm \/ 100\nweight = 170\nbmi = weight \/ (height_m ** 2)\nif bmi < 18.4 and bmi > 0:\n    print(\"Thin\")\nelif bmi < 24.9 and bmi > 18.5:\n    print(\"Normal\")\nelif bmi < 29.9 and bmi > 25:\n    print(\"Overweight\")\nelif bmi < 34.9 and bmi > 30:\n    print(\"Obese\")\nelse:\n    print(\"Not impossible dude!\")\n\n","9a20de17":"#  Compute the service time of a car that the traffic release date has known.\n#    1. Maintenance => 1st year     \n#    2. Maintenance => 2nd year      \n#    3. Maintenance => 3rd year     \n\nimport datetime\n\ntraffic_release_date = \"2022\/7\/11\"\ntraffic_release_date = traffic_release_date.split(\"\/\")\n\ntraffic_release_date_to_datetime_object = datetime.datetime(int(traffic_release_date[0]), int(traffic_release_date[1]), int(traffic_release_date[2]))\nnow = datetime.datetime.now()\n\ndelta_time = now - traffic_release_date_to_datetime_object\n\n\nif delta_time.days <= 365 and (delta_time.days > 0):\n    print(\"1st maintenance year\")\nelif (delta_time.days <= (365 * 2)) and (delta_time.days >= 365):\n    print(\"2nd maintenance year\")\nelif delta_time.days >= 365 * 2:\n    print(\"3rd maintenance year\")\nelse:\n    print(\"Invalid date\")","d408732c":"numbers = [1,2,3,6,8,9,15,20]\n\nfor each in numbers:\n    print(each)\n\n# for i in numbers:\n#     print('Hello')\n\n\nnames = ['alex','emily','connor']\nfor name in names:\n    print(name)\n\n\n# name = \"Emre \u00dcst\u00fcnda\u011f\"\n# for c in name:         # we can reach a string's characters with loops\n#     print(c)\n\n_tuple = [(1,2),(4,5),(6,7)]\n\nfor a,b in _tuple:       # get tuple's first\n    print(a)\n\nfor a,b in _tuple:       # get tuple's second\n    print(b)\n\nfor a,b in _tuple:        # get both\n    print(a, b)","44a43443":"_dict = {'k1':1,'k2':2,'k3':3}\n\nfor x in _dict:    # get dictionary keys\n    print(x)\n\nfor x in _dict:      # get dictionary values\n    print(_dict[x])\n\nfor x in _dict.keys():   # get dictionary keys\n    print(x)\n    \nfor x in _dict.values():   # get dictionary values\n    print(x)\n\nfor key,value in _dict.items():   # get dictionary key and values together\n    print(key,value)","3563cb79":"numbers = [1,5,16,35,57,72,75,10]\n\n# 1- Print each number of numbers list\n\n# for num in numbers:\n#     print(num)\n\n# 2- Which numbers are multiple of 5?\n\n# for num in numbers:\n#     if num % 5 == 0:\n#         print(\"This number is multiple of five: \", num)\n\n# 3- What is the sum of numbers in the list?\n\n# _sum = 0\n# for num in numbers:\n#     _sum += num\n# print(_sum)\n\n# 4- Square all double numbers in the list?\n\n# for num in numbers:\n#     if num % 2 == 0:\n#         print(num * num)\n\n# 5- Print each product's last character in the list below.\n\nproducts = ['iphone 8','iphone 7','iphone X','iphone XR','samsung S10']\n\nfor product in products:\n    print(product[-1])\n\n# 6- How many products include \"iphone\" string in the previous list? (hint: use find methods)\n\ncount = 0\nkeyword = \"iphone\"\nfor product in products:\n    if product.find(keyword) > -1:\n        print(product)\n        count += 1\n\nprint(\"Found {} results for '{}'\".format(count, keyword))","96f165e8":"products = [\n    {'name':'iphone 8', 'price': '4000' },\n    {'name':'iphone 8 Plus', 'price': '5000' },\n    {'name':'iphone X', 'price': '6000' },\n    {'name':'iphone XR', 'price': '7000' },\n    {'name':'iphone 11', 'price': '8000' },\n    {'name':'samsung s10', 'price': '6000' },\n]\n\n# 1- Print all products' items in a string.\n\n# for product in products:\n#     print(\"Product name: {} --- Price: {}\".format(product[\"name\"], product[\"price\"]))\n\n# 2- What is total price of the products?\n\ntotal = 0\nfor product in products:\n    total += int(product['price'])\nprint(\"Total price:\", total)\n\n# 3- Show which products have maximum 6000 price?\n\nmax_price = 5000\nfor each in products:\n    # filter\n    if int(each['price']) <= max_price:\n        print(f\"{each['name']} is maximum {each['price']}\")\n\n# 4- Find given keyword in the products list.\n\ngiven = \"Sams\"\n\nfor product in products:\n    if product['name'].find(given.lower()) > -1:\n        print(f\"{product['price']} is needed for {product['name']}\")\n","2e2f000d":"numbers = [2,5,7,9]\n\n# for => collection\n# while => condition\n\ni = 1\n\nwhile i <= 7:\n    if (i%2==1):\n        print(\"Single:\",i)\n    else:\n        print(\"Double:\",i)\n    i += 1\n\n\n# username = ''\n# while not username:\n#     username = input('Username: ')\n\n# print('Your username:', username)","0296db5c":"numbers = [4,6,9,10,35,57,89,125,244]\n\n# 1- Print each number with while loop.\n\n# i = 0\n# while i < len(numbers):\n#     print(numbers[i])\n#     i += 1\n\n# remember for loop: just two rows :)\n# for i in numbers:\n#    print(i)\n\n# another not useful method is:\n# while numbers:   # True if numbers list has any item\n#    print(numbers.pop())\n\n# 2- Print all single numbers between given start and stop values.\n\nstart = 0\nstop = 9\n\nwhile start <= stop:\n    num = start\n    if num % 2 == 1:\n        print(num)\n    start += 1\n","697dc557":"name = \"Emre \u00dcst\u00fcnda\u011f\"\n\n# for letter in name:\n#     if (letter == \"s\"):\n#         break\n#     print(letter)\n\n# i = 0\n# while (i < 5):\n#     i += 1\n#     if (i == 3):\n#         continue    # passes 3\n#     print(i)\n\ni = 0\n_sum = 0\n\nwhile (i <= 100):\n    i += 1\n    if (i % 2 == 1):\n        continue\n    _sum += i\n\nprint(f\"Total: {_sum}\")\n\nprint(\"\\U0001f600\")","b4006fd5":"_list = [3,5,7,9]\n\n# for i in _list:\n#     print(i)\n\nr = range(10)   # default start: 0, step: 1\nfor i in r:\n    print(i)\n    \nrange_list = list(r)\nprint(range_list)\n\n# other range uses\n\n# r = range(5,10) # start 5, stop 10\n# r = range(50,100,10)  # start 50, stop 100, step 10\n# r = range(0,-10,-2)  # start 0, stop -10, step: -2\n","a032426d":"# Preparing a simple multiplication table\n\n# for i in range(1,11):\n#     for j in range(1,11):\n#         print(f\"{i} * {j} = {i * j}\")\n    \n# Checking if given number is a prime number or not\n\nnumber = 1\nisPrime = True\ni = 2\n\nif number <= 1:\n    isPrime = False\n    print(\"The given number is not prime\")\nelif number > 1:\n    while i in range(number): \n        if number % i == 0:\n            isPrime = False\n            print(f\"Number is divisible by {i}, excluding 1 or {number}\")\n            break\n        i += 1\nif isPrime:\n    print(\"The number {} is a prime number.\".format(number))\n","93d3ac29":"brands = [\"opel\",\"bmw\",\"mercedes\"]\n\n# index = 0\n# for brand in brands:\n#     print(f\"{index+1}-{brands[index]}\")\n#     index += 1\n\n# enumarate\n\nobj1 = enumerate(brands)\n\nprint(obj1)\nprint(type(obj1))\nprint(list(obj1))\n\nfor index, value in enumerate(brands, 1): # here we start indices from one not zero\n    print(\"Index: \" + str(index) + \" -- Value: \" + str(value))\n\n\n# zip\n\nlist1 = [1,2,3,4,5]\nlist2 = ['a','b','c','d','e','f']\nlist3 = [100,200,300,400,500]\n\nprint(list(zip(list1,list2,list3)))\n\nfor item in zip(list1,list2):\n    print(type(item))\n\nfor a,b,c in zip(list1,list2,list3):\n    print(a,b,c)","d1e2c4d1":"list1 = [10,4,7,9,70]\n\nnumbers = []\n\nfor i in list1:\n    i *= 2\n    numbers.append(i)\n\nprint(numbers)\n\n# List comprehension structure: [expresion for item in list-like variable]\n\nnumbers2 = [i*2 for i in list1]\nprint(numbers2)\nnumbers3 = [i for i in range(0,100,15)]\nprint(numbers3)\n\nname = \"Emre\"\nnames = [\"Connor\",\"Emily\",\"Allen\"]\n\nlist1 = [c.upper() for c in name]\nprint(list1)\nlist2 = [i.lower() for i in names]\nprint(list2)","44e7edb4":"# Again!\n\n# for item in liste:               # for - if structure\n#     if (ko\u015ful):\n#         expression\n\n# [expression for item in liste if ko\u015ful]      # list comprehension structure\n\n\nnumbers = [1,5,8,9,15,44]\nnumbers2 = []\n\nfor number in numbers:\n    if(number%2==0):\n        numbers2.append(number)       \n\nprint(numbers2)\n\nnumbers3 = [number for number in numbers if number % 2 == 0]\nprint(numbers3)\nnumbers4 = [number if number % 2 == 0 else \"Single number\" for number in numbers]\nprint(numbers4)\n\nprices = [1000,3000,5000,0,4000]\ntax_included_prices = [1.18 * price if price > 0 else \"Not computed\" for price in prices ]\nprint(tax_included_prices)","fe5cb49a":"result = []\nfor x in range(3):\n    for y in range(3):\n        result.append((x, y))\nprint(result)\nresult2 = [(x,y,z) for x in range(3) for y in range(3) for z in range(3)]\nprint(result2)","5ba89917":"names = [\"Emily\",\"connor\",\"alleN\",\"RacHel\"]\nstring = \"Hello post-2020-World!\"\nbirthyears = [1983, 1999, 2008, 1956, 1986]\ndegrees = [20,5,15,-2,0,-6]\n\n# 1- Create a list between \"1-100\" numbers that are divisible by 12.\nlist1 = [number for number in range(1,100) if number % 12 == 0]\n# list1 = [number for number in range(1,100) if number % 3 == 0 if number % 4 == 0] # or we can use such condition\nprint(list1)\n\n# 2- Lower all names in names list above reversing all letters of it, then keep them all in a list, using list comprehensions.\nlist2 = [name.lower()[::-1] for name in names]\nprint(list2)\n\n# 3- Create a list including birthyear and age from birthyears list given above.\nimport datetime\nnow_year = datetime.datetime.now().year\nlist3 = [(birthyear, (now_year - birthyear)) for birthyear in birthyears]\nprint(list3)\n\n# 4- Create a list including digit numbers in given string above. (hint: use isdigit())\nlist4 = [c for c in string if c.isdigit()]\nprint(list4)\n\n# 5- Create a list including degree and \"Danger of icing!\" for each negative degrees. Use degrees list given above.\n# Lets make some fantasy creating list's items. \n# (We can keep our data in a list however we want. Here we will use binary list and tuple both inside the list)\nlist5 = [[degree, \"That's ok!\"] if degree > 0 else (degree, \"Danger of icing!\") for degree in degrees]\nprint(list5)","7326c938":"# it can be said methods are functions created in objects. (We will talk about objects and Object Oriented Programming on next kernel comprehensively)\n# there is some method examples that we used before on this kernel. so we already know methods simply\n\nlist1 = [1,2,3]\n\nlist1.append(4)   # append is a method\nlist1.append(5)\n\nlist1.pop()  # pop is also a method\n\nprint(type(list1))\nprint(list1)\n\ns = \"Hello\"\n\ns.upper()   # upper is another method\n\nprint(type(s))\nprint(s)","ce318e57":"def greet():    # create the function\n    for i in range(5):\n        print('Hello')\n\n# greet()   # call the function\n\ndef summation():\n    a = 10\n    b = 20\n    print(a+b)\n\nsummation()","9a61c61c":"# we can reach the value that our function compute with return keyword\n\ndef summation():\n    return 10+20\n\nprint(summation() + 5)\n\ndef now_year():    \n    import datetime\n    return datetime.datetime.now().year\n\ndef calculateAge():  # we can use another function within a function\n    return now_year() - 1983\n\nprint(calculateAge())\n\ndef hour():\n    import datetime\n    return datetime.datetime.now().hour\n\ndef greetings():\n    if (hour() < 12):\n        return \"Good morning\"\n    else:\n        return \"Good day\"\n\nusername = \"Emre\"\nprint(greetings() + \" \" + username)","153c92bf":"def greetings(name):    # name is a parameter\n    return \"Good day, \" + name\n\nprint(greetings(\"Emre\"))\n\ndef summ(a,b):\n    return a + b\n\nprint(summ(30, 40))   # a = 30, b = 40\n\ndef calculateAge(birthYear):\n    import datetime\n    now_year = datetime.datetime.now().year\n    return now_year - birthYear\n\nprint(calculateAge(1992))","8ae296f8":"# 1- Create a function with a text and a number of repetitions arguments. Then print the text number of repetitions times\n\ndef func1(txt, repeat_times):\n    for i in range(repeat_times):\n        print(txt)\n\nfunc1(\"Hello\", 3)\n\n# 2- Create a function that can calculate area and perimeter of a rectangle\n\ndef calculate_rectangle(short_edge, long_edge):\n    area_rect = short_edge * long_edge\n    perimeter_rect = 2 * (short_edge * long_edge)\n    return (area_rect, perimeter_rect)\n\nprint(calculate_rectangle(4, 5))\n\n# 3- Create a heads or tails mini app (hint: use random module)\n\ndef generator_tails_or_heads():\n    import random\n    number = random.randint(0,1)\n    if number == 0:\n        return \"Head\"\n    else:\n        return \"Tail\"\n\nprint(generator_tails_or_heads())\n\n# 4- Define a function with two integers. Let this function find all prime numbers between these integers. (hint: use for \/ else statement)\n\ndef find_primes(lower_bound, upper_bound):\n    primes = []\n    for number in range(lower_bound, upper_bound + 1):\n        if number > 1:\n            for divider in range(2, number):   # look! this is for \/ else statement\n                if number % divider == 0:\n                    break\n            else:    \n                primes.append(number)\n    return primes\n\nprint(find_primes(10, 20))\n\n# 5- Defina a function that finds divisors of a number, excluding itself.\n\ndef find_divisors(number):\n    divisors = []\n    \n    for divisor in range(2, number):\n        if number % divisor == 0:\n            divisors.append(divisor)\n            \n    return divisors\n\nprint(find_divisors(50))","a3f3062b":"# For \/ else statement basic structure\n\n# for item in container:\n#     if search_something(item):\n#         # Found it!\n#         process(item)\n#         break\n# else:\n#     # Didn't find anything..\n#     not_found_in_container()","e44edf18":"def greetings(name = \"user\", message = \"Good day\"):\n    print(f\"{message} {name}\")\n\ngreetings()\ngreetings(\"Emily\",\"Good morning\")\n\ndef expon(base, power = 3):\n    return base ** power\n\nprint(expon(2))\nprint(expon(2, 5))\n\ndef summation(x, y):\n    return x + y\n\ndef subtraction(x, y):\n    return x - y\n\ndef other_operation(x, y, f = summation):\n    return f(x, y)\n\nprint(other_operation(15, 20))\nprint(other_operation(15, 20, subtraction))","9cc84637":"# arguments, parameters\n\ndef full_name(firstname, lastname):\n    return f\"Your name is {firstname} {lastname}.\"\n\nresult = full_name(lastname = \"Ustundag\", firstname = \"Emre\")  # we can use parameters and values unsortedly if we use this structure: \"param = value\"\n\nprint(result)","8c3bce0c":"_list = [10,20,30,40]\n\ndef summation(numbers):\n    result = 0\n    for number in numbers:\n        result += number\n    return result\n\nprint(summation(_list))\n\n# we can do this with args simply\n\ndef summation2(*args):\n    print(type(args))\n    print(args)\n    result = 0\n    for i in args:\n        result += i\n    return result\n\nprint(summation2(10,20,30))\nprint(summation2(10,20,30,40))","4a4caea2":"# it's like args, but args keeps tuple data type though kwargs keeps dictionary.\n\ndef myFunc(a,b,c,*args,**kwargs):\n    print(a)\n    print(b)\n    print(c)\n    print(args)\n    print(type(args))\n    print(kwargs)\n    print(type(kwargs))\n\nmyFunc(10,20,30,40,50,60, key1=\"value 1\", key2 = \"value 2\")\n\n\ndef displayUser(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n    print(\"\\n\")\n\ndisplayUser(username= \"emreustundag\")\ndisplayUser(username= \"emreustundag\", email=\"info@emreustundag.com\")\ndisplayUser(username= \"emreustundag\", email=\"info@emreustundag.com\", country=\"Turkey\")","0c0ccdcb":"# 1- Which is bigger of two numbers that are input of a function?\n\ndef compare_two_number(x, y):\n    if x > y:\n        return \"First param > Second param\"\n    else:\n        return \"First param < Second param\"\n\nprint(compare_two_number(40, 45))\n\n# 2- Input: any string, output: number of repetitions of all characters in this string\n\ndef calculate_repetitions_of_a_string(any_string):\n    _dict = {c: any_string.count(c) for c in any_string}   # why mustn't we use list here? because dictionary keys are unique and we need all letters only one time.\n    return _dict\n\nprint(calculate_repetitions_of_a_string('Hello and Welcome'))\n\n# 3- Create a function that can update a list with command, position and new value parameters\n      # example list: [1,2,3], commands: (\"add, remove\"), positions: (\"beginning | end\"), value: value \n      # example: list_operation([1,2,3],\"add\",\"end\",\"4\") => [1,2,3,4]\n      # example: list_operation([1,2,3],\"remove\",\"beginning\") => [2,3]\n    \ndef update(array, command, position, value = None):   # value = None a default parameter\n    if command == \"add\" and position == \"begining\":\n        return array.insert(0, value)\n    if command == \"add\" and position == \"end\":\n        return array.append(value)\n    if command == \"remove\" and position == \"begining\":\n        return array.pop(0)\n    if command == \"remove\" and position == \"end\":\n        return array.pop()\n\narray = ['asdf',1123, '123123']\ncommand = \"remove\"\nposition = \"begining\"\nupdate(array, command, position)  # array changed\nprint(array)\n\n# 4- Create a function with color list parameter. If it has 'blue' in the list, print True\n\n\ndef find_blue(*args):\n    if \"blue\" in args:\n        return True\n    return False\n\nprint(find_blue(\"Blue\",\"green\",\"red\"))","604eb7b0":"connorAccount = {\"name\":\"Connor O'Brien\", \"accountID\":\"13245678\", \"balance\":3000, \"extra\":2000}\nemilyAccount = {\"name\":\"Emily Smith\", \"accountID\":\"12345678\", \"balance\":2000, \"extra\":1000}\n\ndef balance_inquiry(account):\n    print(f\"Your balance is {account['balance']} and your extra balance is {account['extra']}\")\n\ndef withdraw(account, amount):\n    print(f\"Hi {account['name']}\")\n    \n    if account[\"balance\"] >= amount:\n        account[\"balance\"] -= amount\n        print(\"You can draw your cash\")\n        balance_inquiry(account)\n    else:\n        total_balance = account['balance'] + account['extra']\n        \n        if total_balance >= amount:\n            useExtra = True\n            if useExtra == True:\n                amount_from_extra = amount - account['balance']\n                account['balance'] = 0\n                account['extra'] -= amount_from_extra\n                print(\"You can draw your cash\")\n                balance_inquiry(account)\n            else:\n                print(\"You have {} total, from both normal and extra account in your {} account\".format(total_balance, account[\"accountID\"]))\n        else:\n            print(\"You dont have enough money with your all accounts\")\n            balance_inquiry(account)\n\nwithdraw(connorAccount, 4000)\nprint(\"-----------\")\nwithdraw(emilyAccount, 4000)","2278840c":"# global scope\nx = 'global x'\n\ndef function(): \n    # local scope\n    # x = 'local x'\n    print(x)\n\nfunction()\nprint(x)\n\n####################\n\n# global\nname = 'Emily'\n\ndef changeName(new_name):\n    # local \n    global name\n    name = new_name\n    print(name)\n\nchangeName('Adam')\nprint(name)\n\n####################\n\nname = 'global string'\n\ndef greeting():\n    # name = 'Emily'\n\n    def hello():\n        # name = 'Adam'\n        print('Hello '+ name)\n\n    hello()\n\ngreeting()\n\n####################\n\nx = 50\ndef test(): \n    global x\n    print(f'x : {x}')\n\n    x = 100\n    print(f'changed x to {x}')\n\ntest()\nprint(x)    # so we changed global x from a local scope","e2952d53":"\nmultiply = lambda a: a ** 2  # multiply is function's name. a is input, a ** 2 is output. we dont need to use return keyword.\nprint(multiply(5))\n\nsummation = lambda a,b,c: a+b+c\nprint(summation(1,4,7))\n\nreverse_chars = lambda s: s[::-1]\nprint(reverse_chars(\"Emre\"))\n\n\ndef myFunc(n):\n    return lambda a: a * n   # we can also use lambda like nested functions\n\nmultiply2 = myFunc(3)   # n is 3. myFunc returned a function named multiply2 (lambda a: 3 * a)\nresult = multiply2(10)  # a is 10 -->  multiply2 is a lambda function defined in myFunc\nprint(multiply2(10))\n","78e0527d":"numbers = [1,-2,5,-7,-9]\nstr_numbers = [\"1\",\"2\",\"5\",\"7\",\"9\"]\nnames = [\"Emre\",\"Emily\",\"Connor\",\"Alex\"]\nusers = [\n    {\"name\": \"Emre\", \"soyad\":\"Ustundag\"},\n    {\"name\": \"Emily\", \"soyad\":\"Smith\"}\n]\n\n# squares = []\n\n# for number in numbers:\n#     squares.append(number)\n    \n# print(squares)\n\n# or\n# def square(number):\n#     return number ** 2\n\nsquares = list(map(lambda number: number ** 2, numbers))\nintegers = list(map(int, str_numbers))\nabsolutes = list(map(abs, numbers))\nfloats = list(map(float, numbers))\nlengths = list(map(len, names))\nnames_capitalized = list(map(str.capitalize, names))\nnames_lowered = list(map(str.lower, names))\nusernames = list(map(lambda user: user[\"name\"], users))\n\nprint(squares)\nprint(integers)\nprint(absolutes)\nprint(lengths)\nprint(names_capitalized)\nprint(names_lowered)\nprint(usernames)","10077248":"ages = [5,12,18,24,45]\n\ndef isAdult(age):   #Filter function: returns true or false\n    if age<18:\n        return False\n    else: \n        return True\n\nareAdults = list(filter(isAdult, ages))\nprint(areAdults)\nareAdults2 = list(filter(lambda age: age>=18, ages))\nprint(areAdults2)\n\nnumbers = [0,1,25,6,8,9]\nsingles = list(filter(lambda num: num%2!=0, numbers))\nprint(singles)\n\nnames = [\"emily\",\"connor\",\"emre\",\"katty\",\"adam\"]\nstartswith_a = list(filter(lambda name: name[0]=='a',names))\nprint(startswith_a)\n\n# or we can use filter like this\nfiltered_names = filter(lambda name: name[0]=='a',names)\nprint(\"Filter function returns: \" ,filtered_names)\nupper_filtered_names = list(map(lambda name: name.upper(), filtered_names))\nprint(upper_filtered_names)\n\nusers = [\n    {\"username\":\"emreustundag\", \"tweets\": [\"tweet 1\",\"tweet 2\"]},\n    {\"username\":\"connorobrien\", \"tweets\": []},\n    {\"username\":\"emilysmith\", \"tweets\": [\"tweet 1\"]}\n]\n\nusers_at_least_one_tweet = list(filter(lambda user: len(user[\"tweets\"])>0, users))\nprint(users_at_least_one_tweet)\nupper_filtered_users = list(map(lambda  u: u[\"username\"].upper(), filter(lambda user: len(user[\"tweets\"])>0, users)))\nprint(upper_filtered_users)\n\n# or we can use list comprehensions instead if we want to filter a list and then manipulate filtered results with map function\nfiltered_with_list_comprehension = [user[\"username\"].upper() for user in users if len(user[\"tweets\"])>0]\nprint(filtered_with_list_comprehension)","3c341112":"print(all([True,True,False])) # returns True because not all of items are True\nprint(any([True, False, True])) # returns True because at least one of items is True\n\n# And => True and True => True => All()\n# Or  => True or False => True => Any()\n\nnumbers = [0,1,3,6,8,9,10]\n\nprint(any([bool(number) for number in numbers]))\nprint(all([bool(number) for number in numbers]))  # returns False because bool(0) returns False\n\nis_all_double = all([number % 2 == 0 for number in numbers])\nprint(is_all_double)\nat_least_one_double = any([number % 2 == 0 for number in numbers])\nprint(at_least_one_double)\n\npeople = [\"connor\",\"adam\",\"micheal\"]\n\nresult1 = any([person[0] == \"a\" for person in people])\nprint(result1)\nresult2 = all([person[0] == \"a\" for person in people])\nprint(result2)","2ff3d5b9":"numbers = [1,53,45,67,97,5,7]\n\n# numbers.sort() # think like this\n\nprint(sorted(numbers))\nprint(sorted(numbers, reverse = True))\n\nusers = [\n    {\"username\":\"emreustundag\", \"tweets\": [\"tweet 1\",\"tweet 2\"], \"email\":\"info@gmail.com\"},\n    {\"username\":\"connorobrien\", \"tweets\": []},\n    {\"username\":\"emilysmith\", \"tweets\": [\"tweet 1\"], \"name\":\"\", \"phone\":\"65465445\"}\n]\n\nresult = sorted(users, key = len)  # sort by key count ascendingly\nprint(result)\nresult2 = sorted(users, key=len, reverse=True)  # sort by key count descendingly\nprint(result2)\nresult3 = sorted(users, key = lambda user: user['username'])   # a-z sort by username\nprint(result3)\nresult4 = sorted(users, key = lambda user: len(user['tweets']))   # sort by length of tweet list ascendingly\n\n\n\ncourses = [\n    {\"title\":\"python\",\"students\":25000},\n    {\"title\":\"web programming\",\"students\":35000},\n    {\"title\":\"javascript\",\"students\":5000}\n]\n\nprint(sorted(courses, key=lambda course: course[\"students\"]))\nprint(sorted(courses, key=lambda course: course[\"students\"], reverse=True))\nprint(list(map(lambda course: course[\"title\"], sorted(courses, key=lambda course: course['students'], reverse=True))))","876b2870":"# Note: max function can give a type error because of your python version. So you can run the code below spyder-like console.\n\n\"\"\"\nnumbers = [1,5,7,45,25,89]\nletters = ['a','v','h','s']\nnames = ['ahmet','ismail','ada','sena','sad\u0131k']\n\nmin_of_nums = min(numbers)\nprint(min_of_nums)\nmax_of_nums = max(numbers)\nprint(max(numbers))\n\n\nmin_of_letters = min(letters)\nprint(min_of_letters)\nmax_of_letters = max(letters)\nprint(max_of_letters)\n\nmin_of_names = min(names)\nprint(min_of_names)\nmax_of_names = max(names)\nprint(max_of_names)\n\nmin_of_name_length = min([len(name) for name in names])\nprint(min_of_name_length)\nmax_of_name_length = max([len(name) for name in names])\nprint(max_of_name_length)\n\nmin_of_name_length2 = min(names, key=lambda n: len(n))   # like sorted function\nprint(min_of_name_length2)\nmax_of_name_length2 = max(names, key=lambda n: len(n))\nprint(max_of_name_length2)\n\nproducts = [\n    {\"title\":\"iphone x\",\"price\":5000},\n    {\"title\":\"iphone xr\",\"price\":6000},\n    {\"title\":\"iphone 11\",\"price\":7000}\n]\n\nprint(min(products, key=lambda product: product['price']))\nprint(min(products, key=lambda product: product['price'])['title'])\nprint(max(products, key=lambda product: product['price'])['title'])\n\n\nmax = 0\n\nfor product in products:\n    if product[\"price\"] > max:\n        max = product[\"price\"]\n\nprint(max)\n\"\"\"","4a52e06f":"numbers = [34,2,5,7,98]\n\nprint(sum(numbers))\nprint(sum(numbers, 10))   # sum of numbers then plus 10\n\n\nproducts = [\n    {\"title\":\"iphone x\", \"price\": 5000},\n    {\"title\":\"iphone xr\", \"price\": 6000},\n    {\"title\":\"iphone 11\", \"price\": 7000},\n    {\"title\":\"iphone 11 Pro\", \"price\": 0},\n]\n\nprint(sum(product[\"price\"] for product in products))\nmean_price = sum(product[\"price\"] for product in products) \/ len(products)\nprint(mean_price)\n\nprint(abs(-1000))\nprint(abs(123))\n\nrounded = round(10.2) # 10\nprint(rounded)\nrounded = round(10.6) # 11\nprint(rounded)\nrounded = round(10.5) # 10\nprint(rounded)\nrounded = round(1.4242765, 2) # round by second number after dot\nprint(rounded)\nrounded = round(1.4261869, 3) \nprint(rounded)\nrounded = round(1.4267074, 3) \nprint(rounded)","cf9406ef":"# class => Person (name, surname, birthday, calculateAge())\n# instance (object)\n\nlst = [1,2,3]\ninte = 56\n\nresult = type(inte)  # result is a integer class\nprint(result)\nresult = type(lst)  # result is a list class\nprint(result)\n\n# as you can see everything is a class in programming","e85c025e":"# Class\n\nclass Student:    # use class names capitalized\n    # some methods here\n    # some attribute here\n    pass\n\n\n# Object, Instance\n\nstudentA = Student()  # studentA is an instance of Student class\nstudentB = Student()  # studentB is also an instance of Student class\n\nprint(type(studentA))\nprint(studentA, studentB)\n\nclass Product:\n    pass\n\np1 = Product() # Samsung S10\np2 = Product() # IPhone 12\np3 = Product() # IPhone 12 Pro\n\nproducts = [p1,p2,p3]\n\nfor p in products:\n    print(p)\n    print(type(p))","60b58e82":"class Product:\n    def __init__(self, name, price, isActive=False):\n        self.name = name\n        self.price = price\n        self.isActive = isActive\n        print('product object created.')\n\np1 = Product(\"Samsung S10\", 5000)\np2 = Product(\"IPhone 12\", 8000, True)\n\nprint(p1.name, p1.price, p1.isActive)\nprint(p2.name, p2.price, p2.isActive)","876f8ae6":"class Comment:\n    \n    def __init__(self, username, text, likes = 0, dislikes = 0):\n        self.username = username\n        self.text = text\n        self.likes = likes\n        self.dislikes = dislikes\n        \ncomm1 = Comment(\"Emre \u00dcst\u00fcnda\u011f\",\"That's really nice\")\ncomm2 = Comment(\"Emily Croft\",\"You're awesome, I liked it!\", 5, 7)\n\ncomments = [comm1, comm2]\n\nfor comm in comments:\n    print(\"Username: \" + comm.username)\n    print(\"Comment text: \" + comm.text)\n    print(\"Likes: \" + str(comm.likes))\n    print(\"Dislike: \" + str(comm.dislikes))\n    print(\"************\")","023c88d5":"class Person:\n    \n    # constructor (initializer)\n    def __init__(self, name, surname, year):\n        \n        # object (instance) attributes\n        self.name = name\n        self.surname = surname\n        self.year = year\n    \n    # instance methods\n    def intro(self):\n        return f\"My name is {self.name}, and surname is {self.surname} and my age is {self.calculateAge()}\"\n    \n    def calculateAge(self):\n        return f\"{2021 - self.year}\"\n    \n# Object, Instance\npers1 = Person(\"Emre\",\"Ustundag\",1992)\npers2 = Person(\"Emily\",\"O'Brien\",1994)\n\nprint(pers1.name)\nprint(pers1.calculateAge())\n\nprint(pers2.intro())","04d06ce3":"class BankAccount:\n    \n    def __init__(self, name):\n        self.owner = name\n        self.balance = 0.0\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        self.balance -= amount\n        return self.balance\n    \n\naccount = BankAccount(\"Emre Ustundag\")\n    \naccount.deposit(1500)\nprint(account.balance)\naccount.withdraw(1000)\nprint(account.balance)","1efa641f":"class User:\n    \n    active_users = 0\n    \n    def __init__(self, first, last, age):\n        self.first = first\n        self.last = last\n        self.age = age\n        User.active_users += 1\n        \n    def fullName(self):\n        return f\"{self.first} {self.last}\"\n    \n    def logout(self):\n        User.active_users -= 1\n        return f\"{self.fullName()} is logged out.\"\n    \n    \nprint(User.active_users)  \nuserA = User(\"Alex\",\"Ferguson\",35)\nuserB = User(\"Connor\",\"O'Brien\", 23)\nprint(User.active_users)\nprint(userA.fullName())\nprint(userB.logout())\nprint(User.active_users)","5a3497b0":"class Pet:\n    categories = [\"bird\",\"cat\",\"dog\"]    # a class attribute\n    def __init__(self, name, category):\n        if category not in Pet.categories:\n            raise ValueError(f\"{category} is not in pet categories\")\n        self.name = name\n        self.category = category\n        \n    def set_category(self, category):\n        if category not in Pet.categories:\n            raise ValueError(f\"{category} is not in pet categories\")\n        self.category = category\n\n\nlucky = Pet(\"Lucky\", \"dog\")\nprint(lucky.name)\nprint(lucky.category)\n\nmissy = Pet(\"Missy\",\"bird\")\nprint(missy.name)\nprint(missy.category)\n\n# missy.set_category(\"lion\")  # raise value error, we must append Pet categories\n# print(miss.category)\n\n# we can set category here both from instance and class\n\nPet.categories.append(\"lion\") \nmissy.set_category(\"lion\")\nprint(missy.category)\n\nlucky.categories.append(\"cow\")\nlucky.set_category(\"cow\")\nprint(Pet.categories)\nprint(lucky.category)","6e3e9af6":"class User:\n    \n    active_users = 0\n    \n    @classmethod\n    def display_active_users(cls):\n        return f\"There are {cls.active_users} active users.\"\n    \n    @classmethod\n    def from_string(cls, data_str):\n        first, last, age = data_str.split(\",\")\n        return cls(first, last, int(age))\n    \n    def __init__(self, first, last, age):\n        self.first = first\n        self.last = last\n        self.age = age\n        User.active_users += 1\n        \n    def fullName(self):\n        return f\"{self.first} {self.last}\"\n    \n    def logout(self):\n        return f\"{self.fullname()} is logged out.\"\n    \nprint(User.active_users)\nuserA = User(\"Alex\",\"Ferguson\",35)\nuserB = User(\"Connor\",\"O'Brien\", 23)\nprint(User.active_users)\nprint(User.display_active_users())\nuserC = User.from_string(\"Emre,Ustundag,19\")\nprint(userC.age)\nprint(type(userC.age))","e4815f1a":"# Question class\n###  Instance Attributes: text, choice, answer\n###  Instance Methods: checkAnswer() --> True or False\n\n# Quiz class\n###  Instance Attributes: questions, questionIndex, score\n###  Instance Methods: \n###         getQuestion() ---> gets a question object by question index\n###         displayQuestion() ---> shows object accessed by getQuestion()\n###         loadQuestion() ---> starts the test\n###         displayScore() ---> displays the score\n###         displayProgress() ---> display the progress (like if 3rd question of 5: 3 \/ 5\n\nclass Question:\n    \n    def __init__(self, text, choices, answer):\n        self.text = text\n        self.choices = choices\n        self.answer = answer\n    \n    def checkAnswer(self, answer):\n        if answer not in self.choices:\n            raise ValueError(\"an error occured\")\n        return self.answer == answer\n\nq1 = Question(\"Which is the most common programming language for Data Science?\",[\"python\",\"c#\",\"java\",\"dart\"],\"python\")\nq2 = Question(\"Which is the most popular for Machine Learning?\",[\"python\",\"java\",\"c#\",\"dart\"],\"python\")\nq3 = Question(\"Which is the most library-written language for Deep Learning?\",[\"python\",\"java\",\"dart\",\"c#\"],\"python\")\n\nquestions = [q1, q2, q3]","180a7226":"import random\n\nclass Quiz:\n    \n    def __init__(self, questions):\n        self.questions = random.sample(questions, len(questions))\n        self.questionIndex = 0\n        self.score = 0\n        \n    def getQuestion(self):\n        return self.questions[self.questionIndex]\n    \n    def displayQuestion(self):\n        question = self.getQuestion()\n        print(f\"Question: {self.questionIndex + 1} : {question.text}\")\n        \n        for q in question.choices:\n            print(\"-\" + q)\n            \n        answer = \"python\"  # change if you want to return a False answers or use input method for an ansewer from user\n        \n        if question.checkAnswer(answer):\n            self.score += 1\n            print(\"Yes, true!\")\n            \n        self.questionIndex += 1\n        self.loadQuestion()\n        \n    def displayScore(self):\n        print(\"Your test result: \".center(100, \"*\"))\n        point = 100 \/ len(self.questions)\n        total_score = round(self.score * point)\n        print(f\"Your total score: \", str(total_score))         \n            \n    def loadQuestion(self):\n        if len(self.questions) == self.questionIndex:\n            self.displayScore()\n        else:\n            self.displayProgress()\n            self.displayQuestion()\n            \n    def displayProgress(self):\n        total_question = len(self.questions)\n        question_number = self.questionIndex + 1\n        print(f\"You are on {question_number} of {total_question}\".center(100, \"*\"))","43d6e571":"# if this code run test automatically filled with \"python answer\". \n# because we didn't make a interactive app \n\nquiz = Quiz(questions)\n# quiz.loadQuestion()  ","1c5ae1c6":"class Card:\n    \n    def __init__(self, card_type, card_value):\n        self.card_type = card_type\n        self.card_value = card_value\n        \n    def getCard(self):\n        return {\"Card type\": self.card_type, \"Value\": self.card_value}\n    \n    # or you can use __repr__ method instead of getCard\n    # def __repr__(self):\n    #    return f\"Type: {self.card_type}, value: {self.card_value}\"\n    \ncard1 = Card(\"spades\", \"5\")\ncard2 = Card(\"hearts\", \"8\")\ncard1.getCard()\n# repr(card2)","1063358b":"import random\n\nclass Deck:\n    \n    card_types = [\"diamonds\",\"hearts\",\"spades\",\"clubs\"]\n    card_values = [\"A\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"J\",\"Q\",\"K\"]\n    \n    def __init__(self):\n        self.cards_in_deck = [Card(t,v) for t in Deck.card_types for v in Deck.card_values]\n        \n    def countCards(self):\n        return len(self.cards_in_deck)\n    \n    def shuffleCards(self):\n        if self.countCards() < 52:\n            raise ValueError(\"You cannot shuffle cards without full deck\")\n        else:\n            random.shuffle(self.cards_in_deck)\n            \n    def dealCards(self, amount):\n        deck_amount = self.countCards()\n        if deck_amount == 0:\n            raise ValueError(\"All cards dealed\")\n        amount = min([deck_amount, amount])\n        cards_out_deck = self.cards_in_deck[-amount:]\n        self.cards_in_deck = self.cards_in_deck[:-amount]\n        return cards_out_deck\n    \n    def playCard(self):\n        return self.dealCards(1)[0]\n   \ndeck = Deck()\ndeck.shuffleCards()\nprint(deck.dealCards(3))\nfor i in deck.dealCards(13):\n    print(i.getCard())\n    \n# If you wish, you can develop a Hearts Game from here. =)","c19d3ca8":"class Person:\n    def __init__(self, name, surname, age):\n        self.name = name\n        self.surname = surname\n        self.age = age\n        print(\"Person class created:\")\n\n    def intro(self):\n        print(self.name, self.surname, self.age)\n\nclass Student(Person):\n    pass\n\nclass Teacher(Person):\n    pass\n\np1 = Person(\"Emre\",\"Ustundag\",29)\np1.intro()\n\ns1 = Student(\"Emily\",\"O'Brien\",25)\ns1.intro()\n\nt1 = Teacher(\"Paul\",\"Thomson\",22)\nt1.intro()","7347b22e":"class Person:\n    def __init__(self, name, surname, age):\n        self.name = name\n        self.surname = surname\n        self.age = age\n        print(\"A person object created:\")\n\n    def intro(self):\n        print(self.name, self.surname, self.age)\n\nclass Student(Person):\n    def __init__(self, name, surname, age, number):\n        Person.__init__(self,name,surname,age)\n        self.number = number\n        print(\"A student object created.\")\n\n    def intro(self):\n        print(self.name, self.surname, self.age, self.number)\n\n    def study(self):\n        print(f\"A {self.number} ID number student is studying.\")\n\nclass Teacher(Person):\n    def __init__(self, name, surname, age, branch):\n        super().__init__(name,surname,age)   #it's the same with Person.__init__(self, ...)\n        self.branch = branch\n        print(\"A teacher object created.\")\n    \n    def teach(self):\n        print(f\"A {self.name} named teacher's area of field is {self.branch}.\")\n\np1 = Person(\"Emre\",\"Ustundag\",29)\np1.intro() # person\n\ns1 = Student(\"Emily\",\"O'Brien\",25, 101)\ns1.intro() # student\ns1.study()\n\nt1 = Teacher(\"Paul\",\"Thomson\",22, \"Spanish\")\nt1.intro() # Teacher\nt1.teach()","df33a618":"class User:\n    active_users = 0\n    \n    @classmethod\n    def display_active_users(cls):\n        return f\"There are {cls.active_users} active users now.\"\n\n    def __init__(self,firstname,lastname):\n        self.firstname = firstname\n        self.lastname = lastname\n        User.active_users += 1\n    \n    def fullname(self):\n        return f\"{self.firstname} {self.lastname}\"\n\n\nclass Moderator(User):\n    active_moderators = 0\n\n    @classmethod\n    def display_active_moderators(cls):\n        return f\"There are {cls.active_moderators} active moderators now.\"\n\n    def __init__(self,firstname,lastname,community):\n        super().__init__(firstname,lastname)\n        self.community = community\n        Moderator.active_moderators += 1\n\n    def remove_post(self):\n        return f\"{self.fullname()} deleted a post from {self.community}.\"\n\n    def update_post(self):\n        return f\"{self.fullname()} updated a post from {self.community}.\"\n\nprint(User.display_active_users())\nprint(Moderator.display_active_moderators())\n\nu1 = User(\"Emre\",\"Ustundag\")\nm1 = Moderator(\"Emily\",\"O'Brien\",\"AI Comm\")\nm2 = Moderator(\"Paul\",\"Thomson\",\"Cosmetics & Natural Feeding\")\n\nprint(m1.remove_post())\nprint(m2.update_post())\n\nprint(User.display_active_users())\nprint(Moderator.display_active_moderators())\n\nprint(u1.fullname())\nprint(m1.fullname())\n\nprint(isinstance(u1, User))\nprint(isinstance(u1, Moderator))\n\nprint(isinstance(m1, User))\nprint(isinstance(m1, Moderator))","6236570a":"class Product:\n    def __init__(self,name,price,description):\n        self.name = name\n        self.description = description\n        if price >=0:\n            self._price = price    # Lets assume that _price is a private. In python we have no other choice.\n        else:\n            raise ValueError(\"Price cannot be below zero.\")\n\n    @property\n    def price(self):    # like getter\n        return self._price\n\n    @price.setter       # like setter. so price method is both getter and setter now.\n    def price(self,value):\n        if value >=0:\n            self._price = value\n        else:\n            raise ValueError(\"Price cannot be below zero.\")\n\n    @property\n    def short_description(self):\n        return self.description[:10]\n\n    # def set_price(self,value):\n    #     if value >=0:\n    #         self._price = value\n    #     else:\n    #         raise ValueError(\"Price cannot be below zero.\")\n\n    # def get_price(self):\n    #     return self._price\n\np = Product(\"iphone 12\", 1000,\"iphone 12 is the newest product of apple\")\nprint(p.price)\nprint(p.short_description)","64f8a22c":"list1 = [1,2,3]\nprint(len(list1))\n\ns = \"hello world\"\nprint(len(s))\n\nclass Film:\n    def __init__(self,title,director,duration):\n        self.title = title\n        self.director = director\n        self.duration = duration\n\n    def __str__(self):\n        return f\"{self.title}, directed by {self.director}.\"\n\n    def __repr__(self):\n        return f\"{self.title}, directed by {self.director}.\"\n\n    def __len__(self):\n        return self.duration\n\n    def __del__(self):\n        print(\"film object deleted.\")\n\nf = Film(\"X film_name\",\"X director\",120)\n\nprint(str(list1))\nprint(str(f))\nprint(len(f))","c4dddd6c":"class NewDict(dict):\n    def __repr__(self):\n        print('A message from repr method.')\n        return super().__repr__()\n\n    def __missing__(self,key):\n        print(\"Invalid key.\")\n\n    def __getitem__(self,key):\n        print(\"You are trying to access an item.\")\n        return super().__getitem__(key)\n\n    def __setitem__(self,key,value):\n        print(\"You are adding an item to list.\")\n        super().__setitem__(key,value)   # super class is dictionary here\n\n    def __contains__(self,item):\n        print(\"You cannot search an item in the list\")\n        return super().__contains__(item)\n\ndata = NewDict({\"first\":\"Emre\",\"last\":\"Ustundag\"})\n\n\nprint(data[\"first\"])\ndata[\"age\"]\ndata[\"first\"]=\"O'Brien\"\n\nprint(data)\n\nprint(\"first\" in data)","166c525d":"<a id = '61'><\/a>\n#### args","25d13fdd":"<a id = '24'><\/a>\n#### Dictionaries - Demo","0e75a517":"<a id = '68'><\/a>\n#### Map Functions","3632111f":"<a id = \"3\"><\/a>\n#### Basic Math","788ecdd1":"<a id = '79'><\/a>\n#### Instance Methods","8e613dbe":"<a id = '84'><\/a>\n#### OOP - Card Game - Demo\nCard class:\n* Each object derivated from the card class will represent a card type\n* Let the class card have two attributes named type and value\n\nFor example:\n* spades5 : Card(\"spades\",\"5\")\n* Create a getCard() instance method to access a card's info.\n\nDeck class:\n* For example: deck1 = Deck()\n* card types : spades, hearts, diamonds, clubs\n* card values : A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K\n\nHints:\n* Append the list in Deck class with 52 cards using list comprehension\n* A cardCount() method for the card count left in Deck\n* To shuffle cards in deck, create a method shuffleCards()\n* dealCards() must deal cards using an amount parameter. Be careful at the cards left in deck.\n* Let the playCard() method be used for playing a card.","a9729576":"<a id = '16'><\/a>\n#### String Methods - Tutorial","6c57f96e":"<a id = '63'><\/a>\n#### Parameters, Arguments - Demo","e302339e":"<a id = \"1\"><\/a>\n### Numbers and Mathematical Operations\n<a id = \"2\"><\/a>\n#### Numbers","19cd3786":"<a id = '74'><\/a>\n### Object Oriented Programming (OOP)\n<a id = '75'><\/a>\n#### What is OOP?","b092da15":"<a id = '29'><\/a>\n### Operators\n<a id = '30'><\/a>\n#### Assignments","e9ac6fa1":"<a id = '49'><\/a>\n#### enumerate(), zip()","2ade57d7":"<a id = '23'><\/a>\n#### Dictionaries","0f1e51e1":"<a id = '62'><\/a>\n#### kwargs","b7120a5c":"<a id = '43'><\/a>\n#### While Loop","aae3d82c":"<a id = '39'><\/a>\n#### If Conditions - Demo1","f41a563f":"<a id = '12'><\/a>\n#### String Slicing","684e621d":"<a id = '65'><\/a>\n#### Scope","84a8feba":"#### Conclusion\nThis is exceedingly enough for beginning of Python. Next chapter I will continue with Data Science Cheat Sheets for Data Scientists. \nGoodbye for now!","8849e17c":"<a id = '82'><\/a>\n#### Class Attributes - Demo","c68ac331":"<a id = '78'><\/a>\n#### Class - Demo","5c64205b":"<a id = '13'><\/a>\n#### String Formats","57571407":"<a id = '53'><\/a>\n### Functional Programming\n<a id = '54'><\/a>\n#### Methods","1a6f0185":"<a id = '85'><\/a>\n#### Inheritance\n\nInheritance\n* base class, parent class\n* child class \n\nPerson\n* name, surname, address, gender\n* eat_breakfast()\n\nStudent (is a Person)\n* studentID\n* study()\n\nTeacher (is a Person)\n* field\n* teach()\n\nAnimal : base class\n\nPet (Animal) : child class\n\nCat, Bird (EvcilHayvan) : child class","de2fa010":"<a id = '21'><\/a>\n#### List Methods in Python - Demo","122fc7e5":"<a id = '59'><\/a>\n#### Default Parameters","58e0fc7d":"<a id = '69'><\/a>\n#### Filter Functions","2f48a022":"<a id = '38'><\/a>\n#### If - Elif","e7c5d0fd":"<a id = '72'><\/a>\n#### Min - Max","96d9e9ef":"<a id = '40'><\/a>\n### Loops\n<a id = '41'><\/a>\n#### For Loop","1384f296":"<a id = '31'><\/a>\n#### Assignments - Demo","a4c412d7":"<a id = '77'><\/a>\n#### init Method","5745ca54":"<a id = '10'><\/a>\n### Strings & Character Lists\n\n<a id = '11'><\/a>\n#### Strings","b1e11de9":"<a id = \"9\"><\/a>\n#### Data Types - Tutorial","6679dded":"<a id = '80'><\/a>\n#### OOP Bank Account - Demo","a3cebe01":"<a id = '27'><\/a>\n#### Sets","da3d76af":"<a id = \"5\"><\/a>\n### Variables and Data Types\n\n<a id = \"6\"><\/a>\n#### Variables","3c7b9a27":"<a id = '89'><\/a>\n#### Special Methods - Demo","97217457":"<a id = '64'><\/a>\n#### Application: ATM","7d11287b":"<a id = '45'><\/a>\n#### Break & Continue","6fdb377b":"<a id = '86'><\/a>\n#### Inheritance - Demo","dbc80680":"<a id = '50'><\/a>\n### List Comprehensions\n<a id = '51'><\/a>\n#### List Comprehension","f357af1b":"<a id = '15'><\/a>\n#### String Methods","4e8265ce":"<a id = '55'><\/a>\n#### Functions","b9e1ddab":"<a id = '57'><\/a>\n#### Parameters","d987ae35":"<a id = '87'><\/a>\n#### Properties","2cee4b8e":"<a id = '25'><\/a>\n#### Dictionary Methods","cbba4a4b":"<a id = '58'><\/a>\n#### Functions - Demo","26f5c266":"<a id = '76'><\/a>\n#### Class","87ba2670":"<a id = '81'><\/a>\n#### Class Attributes","99fb72a7":"<a id = '56'><\/a>\n#### 'return' keyword","136d2d92":"<a id = '33'><\/a>\n#### Comparison - Demo","ee090c17":"<a id = '17'><\/a>\n### Lists, Tuples, Dictionaries and Sets\n<a id = '18'><\/a>\n#### Lists","cc6a237a":"<a id = '83'><\/a>\n#### Class Methods","49465df4":"<a id = \"4\"><\/a>\n#### Python Comment Lines","755b9b85":"<a id = '44'><\/a>\n#### While Loop - Demo","c12bf425":"<a id = '52'><\/a>\n#### List Comprehension - Demo","d3fee1c7":"<a id = \"7\"><\/a>\n#### Variables - Tutorial","cc498b55":"<a id = '32'><\/a>\n#### Comparison","c1c0fbbc":"<a id = '34'><\/a>\n#### Logical Operators","77bd5904":"<a id = '22'><\/a>\n#### Tuples","7e5fdace":"<a id = '26'><\/a>\n#### Dictionary Methods - Demo","f62bd8cb":"<a id = '73'><\/a>\n#### Abs - Sum - Round","ad8090ae":"<a id = '70'><\/a>\n#### Any - All","f4cb46ba":"<a id = '66'><\/a>\n### Lambda & Built-in Functions\n<a id = '67'><\/a>\n#### Lambda Functions","0f3cd3ee":"<a id = '60'><\/a>\n#### Keyword Arguments","41ba6808":"<a id = '83'><\/a>\n#### OOP - Quiz Application - Demo","f42c10f9":"<a id = '88'><\/a>\n#### Special Methods","0b3f6c30":"<a id = '14'><\/a>\n#### Strings - Tutorial","dd182f65":"<a id = \"8\"><\/a>\n#### Data Types","9cddee62":"<a id = '71'><\/a>\n#### Sorted","b4bf4369":"<a id = '48'><\/a>\n#### range() - Demo","1ddc234b":"<a id = '35'><\/a>\n#### Logical Operators - Demo","6743ea48":"<a id = '42'><\/a>\n#### For Loop - Demo","4fc2a5f9":"# Python for Beginners: A Comprehensive Guide\nHi! This is python basics for beginner Data Scientists. Though it has basics of Python, it's pretty comprehensive for Beginners and the learners interested in Python programming more deeply. I will show some useful codes, examples and demos on this kernel. \nLet's begin!\n\n## Introduction\n1. [Numbers and Mathematical Operations](#1)\n    * [Numbers](#2)\n    * [Basic Math](#3)\n    * [Comment Line](#4)\n1. [Variables and Data Types](#5)\n    * [Variables](#6)\n    * [Variables - Demo](#7)\n    * [Data Types](#8)\n    * [Data Types - Demo](#9)\n1. [Strings & Character Lists](#10)\n    * [Strings](#11)\n    * [String Slicing](#12)\n    * [String Formats](#13)\n    * [Strings - Demo](#14)\n    * [String Methods](#15)\n    * [String Methods - Demo](#16)\n1. [Lists, Tuples, Dictionaries and Sets](#17)\n    * [Lists](#18)\n    * [Lists - Demo](#19)\n    * [List Methods in Python](#20)\n    * [List Methods - Demo](#21)\n    * [Tuples](#22)\n    * [Dictionaries](#23)\n    * [Dictionaries - Demo](#24)\n    * [Dictionary Methods](#25)\n    * [Dictionaries - Demo](#26)\n    * [Sets](#27)\n    * [What is Reference Type?](#28)\n1. [Operators](#29)\n    * [Assignments](#30)\n    * [Assignments - Demo](#31)\n    * [Comparison](#32)\n    * [Comparison - Demo](#33)\n    * [Logical Operators](#34)\n    * [Logical Operators - Demo](#35)\n1. [Conditions](#36)\n    * [If-Else Statement](#37)\n    * [If - Else if](#38)\n    * [If Conditions - Demo](#39)\n1. [Loops](#40)\n    * [For Loop](#41)\n    * [For Loop - Demo](#42)\n    * [While Loop](#43)\n    * [While Loop - Demo](#44)\n    * [Break & Continue](#45)\n1. [Loop Methods](#46)\n    * [range()](#47)\n    * [range() - demo](#48)\n    * [enumerate(), zip()](#49)\n1. [List Comprehensions](#50)\n    * [List Comprehension](#51)\n    * [List Comprehension - Demo](#52)\n1. [Functional Programming](#53)\n    * [Methods](#54)\n    * [Functions](#55)\n    * ['return' keyword](#56)\n    * [Parameters](#57)\n    * [Functions - Demo](#58)\n    * [Default Parameters](#59)\n    * [Keyword Arguments](#60)\n    * [args](#61)\n    * [kwargs](#62)\n    * [Parameters, Arguments - Demo](#63)\n    * [Application: ATM](#64)\n    * [Scope](#65)\n1. [Lambda and Built-in Functions](#66)\n    * [Lambda Functions](#67)\n    * [Map Function](#68)\n    * [Filter Function](#69)\n    * [Any & All](#70)\n    * [Sorted](#71)\n    * [Min - Max](#72)\n    * [Abs - Sum - Round](#73)\n1. [Object Oriented Programming - OOP](#74)\n    * [What is OOP?](#75)\n    * [Class](#76)\n    * [init method](#77)\n    * [Class - Demo](#78)\n    * [Instance Methods](#79)\n    * [OOP - Bank Account - Demo](#80)\n    * [Class Attributes](#81)\n    * [Class Attributes - Demo](#82)\n    * [Class Methods](#83)\n    * [OOP - Quiz App - Demo](#84)\n    * [OOP - Card Game - Demo](#85)\n    * [Inheritance](#86)\n    * [Applying Inheritance](#87)\n    * [Expanding Child Classes](#88)\n    * [OOP - Blog User & Moderator - Demo](#89)\n    * [Properties](#90)\n    * [Python Special Methods](#91)\n    * [Special Methods - Demo](#92)","7fc3b49d":"<a id = '46'><\/a>\n### Loop Methods\n<a id = '47'><\/a>\n#### range()","0e54a679":"<a id = '19'><\/a>\n#### Lists - Demo","614bb952":"<a id = '28'><\/a>\n#### What is Reference Type?","77d20887":"<a id = '36'><\/a>\n### Conditions\n<a id = '37'><\/a>\n#### If - Else Statements","e3e9bc05":"<a id = '20'><\/a>\n#### List Methods in Python"}}