{"cell_type":{"650ee703":"code","944d4f2f":"code","4d01a130":"code","0c746db5":"code","f26a6054":"code","ca59d766":"code","36f23eee":"code","ebf2a086":"code","830feb5e":"code","0838b8c9":"code","a9a662d1":"code","c81c044d":"code","abfe0a55":"code","e561b2da":"code","81778ab2":"code","aa360fc9":"code","c728f578":"markdown","2c2b1b7f":"markdown","c4ec1ad8":"markdown","d6dcf286":"markdown","fd068bd2":"markdown","0d3818b4":"markdown","7ff7f01f":"markdown","9566cead":"markdown"},"source":{"650ee703":"import numpy as np\nimport pandas as pd\nimport os\nimport random\nfrom kaggle_environments import make, evaluate","944d4f2f":"# Helper function for get_heuristic: checks if window satisfies heuristic conditions\ndef check_window(window, num_discs, piece, config):\n    return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)","4d01a130":"# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\ndef count_windows(grid, num_discs, piece, config):\n    num_windows = 0\n    # 1.) Checking horizontal orientation\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # 2.) Checking vertical orientation\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # 3.) Checking positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # 4.) Checking negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    return num_windows","0c746db5":"# Helper function for minimax: calculates value of heuristic for grid\ndef get_heuristic(grid, mark, config):\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    num_fours_opp = count_windows(grid, 4, mark%2+1, config)\n    score = 1*num_threes - 1e2*num_threes_opp - 1e4*num_fours_opp + 1e6*num_fours\n    return score","f26a6054":"def get_minimax_score_for_move(grid, col, your_mark, alphabeta, config, nsteps):\n    \n    # Play your move as the maximizingPlayer\n    next_grid = drop_piece(grid, col, your_mark, config)\n    if alphabeta:        \n        minimax_score = minimax_alphabeta(node=next_grid, depth=nsteps-1, maximizingPlayer=False, alpha=-np.Inf, beta=np.Inf, your_mark=your_mark, config=config)\n    else:\n        minimax_score = minimax(node=next_grid, depth=nsteps-1, maximizingPlayer=False, your_mark=your_mark, config=config)\n    # Since you have already played your move due to the drop_piece method, so\n    # depth = nsteps-1 so we traversed 1 depth\n    # maximizingPlayer argument is False i.e. indicating a minimizingPlayer \n    # maximizingPlayer = you -> have already played your move\n    return minimax_score","ca59d766":"def drop_piece(grid, col, mark, config):\n    new_grid = grid.copy()\n    for r in range(config.rows-1,-1,-1):\n        if new_grid[r,col] == 0:\n            new_grid[r,col] = mark\n            return new_grid            ","36f23eee":"def is_terminal_window(window, config):\n    if window.count(1)==config.inarow or window.count(2)==config.inarow:\n        return True","ebf2a086":"def is_terminal_node(grid, config):\n    # How can you term a grid as a terminal node i.e. beyond which the game is not possible\n    # Scenario#1: no further move is possible\n    \n    if sum(grid[0,:]==0)==0:\n        return True\n    \n    # Scenario#2: opponent already got a config.inarow number\n    # Now lets check all possible orientations:\n    # i.e. 1.) horizontal 2.) vertical 3.) positive diagonal 4.) negative diagonal\n    \n    # For 1.) horizontal\n    for row in range(config.rows):\n        for col in range((config.rows-config.inarow)+1):\n            window = list(grid[row,range(col,col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n            \n    # For 2.) vertical\n    for row in range((config.rows-config.inarow)+1):\n        for col in range(config.columns):\n            window = list(grid[range(row,row+config.inarow),col])\n            if is_terminal_window(window, config):\n                return True\n            \n    # For 3.) +ve diagonal\n    for row in range((config.rows-config.inarow)+1):\n        for col in range((config.rows-config.inarow)+1):\n            window = list(grid[range(row,row+config.inarow),range(col,col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n            \n    # For 4.) -ve diagonal\n    for row in range(config.inarow-1,config.rows):\n        for col in range((config.rows-config.inarow)+1):\n            window = list(grid[range(row,row-config.inarow,-1),range(col,col+config.inarow)])\n            if is_terminal_window(window, config):\n                return True\n    \n    return False","830feb5e":"def minimax(node, depth, maximizingPlayer, your_mark, config):\n    \n    list_available_moves = [col for col in range(config.columns) if node[0,col]==0]\n    \n    # 3 scenarios to handle\n    # Scenario 1: reached the end i.e. \n    # Condition A - no further to traverse, or\n    # Condition B - its a terminal node i.e. no further available moves, game over opponent won\n    \n    if depth==0 or is_terminal_node(node, config):\n        return get_heuristic(node,your_mark,config)\n    \n    \n    if maximizingPlayer:\n        value = -np.Inf        \n        for col in list_available_moves:\n            child = drop_piece(node, col, your_mark, config)\n            value = max(value, minimax(child, depth-1, False, your_mark, config))\n        return value\n    \n    \n    else:\n        value = np.Inf\n        for col in list_available_moves:\n            child = drop_piece(node, col, your_mark%2+1, config)\n            value = min(value, minimax(child, depth-1, True, your_mark, config))\n        return value","0838b8c9":"NUM_STEPS_LOOKAHEAD = 3\ndef agent_minimax_play(obs, config):\n    \n    \n    # Step1. Convert the board list to a grid\n    \n    board_array = np.array(obs.board).reshape(config.rows,config.columns)\n    \n    \n    # Step2. Get list of allowed moves\n    # How can you get a list of allowed moves ? Note a move is valid if there is any empty row in a column\n    \n    list_allowed_moves = [c for c in range(config.columns) if (sum(board_array[:,c]==0)>0)]\n    \n    # or later\n    # for first turn -\n    # I am planning to replace it by configuring to:\n    # A. if turn = first: middle move\n    # B. if turn is not first: either left or right of middle\n    \n    \n    \n    # Step3. Now for each of the move within the list_allowed_moves, lets generate a heuristic score using minimax\n    alphabetamode = False\n    move_score_dict = {}\n    for allowed_move in list_allowed_moves:\n        # obs.mark - the peice assigned to the agent (either 1 or 2)\n        minimax_score = get_minimax_score_for_move(board_array, allowed_move, obs.mark, alphabetamode, config, NUM_STEPS_LOOKAHEAD)\n        move_score_dict[allowed_move] = minimax_score\n    \n    # Step4. Trying to obtain the list of allowed moves for which the score is the highest\n    \n    max_score = -np.inf\n    \n    # Finding max score\n    for move,score in move_score_dict.items():\n        if score > max_score:\n            max_score = score\n    \n    moves_with_max_score = []\n    for move,score in move_score_dict.items():\n        if score >= max_score:\n            moves_with_max_score.append(move)\n            \n    # Step5. Now as a final step returning the move\n    play_move = random.choice(moves_with_max_score)\n    \n    return play_move","a9a662d1":"# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# Two random agents play one game round\nenv.run([agent_minimax_play, \"random\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","c81c044d":"#Defining the evaluate function\ndef get_win_percentages(agent1, agent2, n_rounds=10):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))\n    print(\"Number of Draws (in {} game rounds):\".format(n_rounds), outcomes.count([0, 0]))","abfe0a55":"NUM_STEPS_LOOKAHEAD_ALPHABETA = 4\ndef agent_minimax_alphabeta_play(obs, config,counter):\n    \n    \n    # Step1. Convert the board list to a grid\n    \n    board_array = np.array(obs.board).reshape(config.rows,config.columns)\n    \n    \n    # Step2. Get list of allowed moves\n    # How can you get a list of allowed moves ? Note a move is valid if there is any empty row in a column\n    \n    list_allowed_moves = [c for c in range(config.columns) if (sum(board_array[:,c]==0)>0)]\n    \n    # or later\n    # for first turn -\n    # I am planning to replace it by configuring to:\n    # A. if turn = first: middle move\n    # B. if turn is not first: either left or right of middle\n    \n    \n    \n    # Step3. Now for each of the move within the list_allowed_moves, lets generate a heuristic score using minimax\n    \n    move_score_dict = {}\n    alphabetamode = True\n    for allowed_move in list_allowed_moves:\n        # obs.mark - the peice assigned to the agent (either 1 or 2)\n        minimax_score = get_minimax_score_for_move(board_array, allowed_move, obs.mark, alphabetamode, config, NUM_STEPS_LOOKAHEAD_ALPHABETA)\n        move_score_dict[allowed_move] = minimax_score\n    \n    # Step4. Trying to obtain the list of allowed moves for which the score is the highest\n    \n    max_score = -np.inf\n    \n    # Finding max score\n    for move,score in move_score_dict.items():\n        if score > max_score:\n            max_score = score\n    \n    moves_with_max_score = []\n    for move,score in move_score_dict.items():\n        if score >= max_score:\n            moves_with_max_score.append(move)\n            \n    # Step5. Now as a final step returning the move\n    play_move = random.choice(moves_with_max_score)\n    \n    return play_move","e561b2da":"def minimax_alphabeta(node, depth, maximizingPlayer, alpha, beta, your_mark, config):\n    \n    list_available_moves = [col for col in range(config.columns) if node[0,col]==0]\n    \n    # 3 scenarios to handle\n    # Scenario 1: reached the end i.e. \n    # Condition A - no further to traverse, or\n    # Condition B - its a terminal node i.e. no further available moves, game over opponent won\n    \n    if depth==0 or is_terminal_node(node, config):\n        return get_heuristic(node,your_mark,config)\n    \n    \n    if maximizingPlayer:\n        value = -np.Inf        \n        for col in list_available_moves:\n            child = drop_piece(node, col, your_mark, config)\n            value = max(value, minimax_alphabeta(child, depth-1, False, alpha, beta, your_mark, config))\n            alpha = max(alpha, value)\n            if alpha > beta:\n                break\n        return value\n    \n    \n    else:\n        value = np.Inf\n        for col in list_available_moves:\n            child = drop_piece(node, col, your_mark%2+1, config)\n            value = min(value, minimax_alphabeta(child, depth-1, True, alpha, beta, your_mark, config))\n            beta = min(beta, value)\n            if beta <= alpha:\n                break\n        return value","81778ab2":"# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# Two random agents play one game round\nenv.run([agent_minimax_alphabeta_play, \"negamax\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","aa360fc9":"get_win_percentages(agent1=agent_minimax_play, agent2=\"negamax\")","c728f578":"**Let us try to retain our helper functions**","2c2b1b7f":"Updated the evaluate function\nto reflect:\n1 -> for win\n-1 -> for loss\n0 -> draw\nNone -> invalid play","c4ec1ad8":"# Minimax Implementation","d6dcf286":"# Now with alpha-beta pruning","fd068bd2":"# Objective","0d3818b4":"This is an extension and application of the intial exercises on Game AI & Reinforcement learning course by Alexis Cook. Hence, many of the starter functions have been taken from here:\nhttps:\/\/www.kaggle.com\/learn\/intro-to-game-ai-and-reinforcement-learning","7ff7f01f":"# References","9566cead":"This notebook talks about:\n\n1 - Minimax approach\n\n2 - and most importanly its implementation with Alpha-Beta Pruning"}}