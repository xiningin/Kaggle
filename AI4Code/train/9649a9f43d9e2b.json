{"cell_type":{"32923152":"code","daefe691":"code","bb2d6b19":"code","9fe44ea5":"code","24a51f51":"code","6a8210fb":"code","0a542045":"code","1d00ae0b":"code","4011f0d6":"code","6ee60bdd":"code","e8ea3834":"code","6c267444":"code","af34be9f":"code","73b73945":"code","e0501cc5":"code","5f7a92c1":"markdown","07e18323":"markdown","15e34e8b":"markdown","7df8540a":"markdown","979b97f4":"markdown"},"source":{"32923152":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.layers import Input, Conv2D, Dense, Flatten, BatchNormalization, Dropout, MaxPooling2D, GlobalMaxPooling2D\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.datasets import fashion_mnist\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\n%matplotlib inline","daefe691":"(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\nx_train.shape, x_test.shape","bb2d6b19":"## Adding color dimention to data\nx_train = np.expand_dims(x_train, -1)\nx_test = np.expand_dims(x_test, -1)\nx_train.shape, x_test.shape","9fe44ea5":"\nK = len(set(y_train))      ###### Number Of Labels\nprint(K)\nsbn.countplot(y_train)\n ","24a51f51":"# Spliting X_train Set into training set and validation test\nx_train, val_x, y_train, val_y = train_test_split(x_train, y_train, test_size=0.20)","6a8210fb":"es = EarlyStopping(monitor='loss', patience=12)\nfilepath=\"\/kaggle\/working\/bestmodel.h5\"\nmd = ModelCheckpoint(filepath, monitor='loss', verbose=1, save_best_only=True, mode='min')","0a542045":"# defininig ImageDataGeneratore to increase data\ndatagen = ImageDataGenerator(zoom_range = 0.1,\n                            height_shift_range = 0.1,\n                            width_shift_range = 0.1,\n                            rotation_range = 10)","1d00ae0b":"# Important Variables\nepochs = 20\nbatch_size = 128\ninput_shape = (28, 28, 1)\nadam = tf.keras.optimizers.Adam(0.001)","4011f0d6":"\n\ni = Input(shape=input_shape)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(i)\nx = BatchNormalization()(x)\nx = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPooling2D((2, 2))(x)\nx = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = Conv2D(64, (3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPooling2D((2, 2))(x)\nx = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = Conv2D(128, (3, 3), activation='relu', padding='same')(x)\nx = BatchNormalization()(x)\nx = MaxPooling2D((2, 2))(x)\n\n# x = GlobalMaxPooling2D()(x)\nx = Flatten()(x)\nx = Dropout(0.2)(x)\nx = Dense(1024, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(K, activation='softmax')(x)\n\nmodel = Model(i, x)\nmodel.summary()\n","6ee60bdd":"# Compiling Model\nmodel.compile(optimizer=adam,\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","e8ea3834":"# Fit Model\nHistory = model.fit(datagen.flow(x_train, y_train, batch_size=batch_size),\n          epochs = epochs,\n          validation_data = (val_x, val_y),\n          callbacks = [es,md],\n          shuffle= True\n        )","6c267444":"# Plot loss per iteration\nimport matplotlib.pyplot as plt\nplt.plot(History.history['loss'], label='loss')\nplt.plot(History.history['val_loss'], label='val_loss')\nplt.legend()","af34be9f":"# Plot accuracy per iteration\nplt.plot(History.history['accuracy'], label='acc')\nplt.plot(History.history['val_accuracy'], label='val_acc')\nplt.legend()","73b73945":"model1 = load_model(filepath)\nmodel1.summary()","e0501cc5":"def plot_confusion_matrix(cm, classes,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n  print(cm)\n\n  plt.imshow(cm, interpolation='nearest', cmap=cmap)\n  plt.title(title)\n  plt.colorbar()\n  tick_marks = np.arange(len(classes))\n  plt.xticks(tick_marks, classes, rotation=45)\n  plt.yticks(tick_marks, classes)\n\n  fmt = 'd'\n  thresh = cm.max() \/ 2.\n  for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n      plt.text(j, i, format(cm[i, j], fmt),\n               horizontalalignment=\"center\",\n               color=\"white\" if cm[i, j] > thresh else \"black\")\n\n  plt.tight_layout()\n  plt.ylabel('True label')\n  plt.xlabel('Predicted label')\n  plt.show()\n\n\np_test = model1.predict(x_test).argmax(axis=1)\ncm = confusion_matrix(y_test, p_test)\nplot_confusion_matrix(cm, list(range(10)))","5f7a92c1":"## **5. Loading Model and Making Prediction**","07e18323":"## **1. Importing Libraries**","15e34e8b":"## **2. Loading and Processing Data**","7df8540a":"## **3. Some Variables and Traps**","979b97f4":"## **4. Building Model with Basic Functional API**"}}