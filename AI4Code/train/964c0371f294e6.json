{"cell_type":{"9feea09d":"code","3abbf883":"code","5b23918b":"code","2b278299":"code","30f88ed2":"code","11a11f5b":"code","58543661":"code","ef92de4d":"code","767d57f8":"code","ce169ab0":"code","d2f9ac10":"code","0d7e10c5":"code","6a924820":"code","8259dfbb":"code","0527a5e3":"code","287e658e":"code","4ff5becf":"code","853636e8":"code","65cf3d46":"code","b3a8c4af":"code","2511f4cd":"code","a892ec38":"code","2369122d":"code","3830008c":"code","a00c790a":"code","3c06ced3":"code","6bf09c49":"code","1bc8ab32":"code","306ba4e9":"code","ce4b0344":"code","902b9535":"code","9bb417ec":"code","c8da3e8e":"code","46a32cf6":"code","688baa9b":"code","fdd4a706":"code","12fe99b6":"markdown","528410c8":"markdown","d6c7f21f":"markdown","afeeb8ca":"markdown","c38f4239":"markdown","b54469a6":"markdown","cfdd5240":"markdown","42153bc6":"markdown","9f464a3a":"markdown","65a964b5":"markdown","e1b7104a":"markdown","2d41679f":"markdown","f1ab7ad2":"markdown","4a63c526":"markdown","3e2baeb4":"markdown","b0df35cb":"markdown","54afe1bf":"markdown","6a316e28":"markdown","799eec07":"markdown","e9abd3c3":"markdown","52320b35":"markdown","ab70e0d8":"markdown","f970e5f3":"markdown","a6e072f4":"markdown","93b20c80":"markdown","7d405926":"markdown","7ed21464":"markdown","d827027e":"markdown","0fb8e351":"markdown","c23deee7":"markdown","71788645":"markdown","e05f9dd2":"markdown","68745467":"markdown","6c8b050b":"markdown","d90e9d19":"markdown","dd3cecdc":"markdown","0a860ba0":"markdown","227b2580":"markdown","0cc301e9":"markdown","c4fd688e":"markdown","3673b7cc":"markdown","2f405a4c":"markdown","1a3b29fe":"markdown","9e28f2da":"markdown","c38a50bc":"markdown","bc6bc5f2":"markdown","6209c9e9":"markdown","2caaa2e5":"markdown","ee056c2d":"markdown","ada9eeb9":"markdown","5a67f617":"markdown","2e69c51b":"markdown","fbd7aa4e":"markdown","b7795aeb":"markdown","00206df8":"markdown","4cbb8dcb":"markdown","ca80347e":"markdown","7b3bf13a":"markdown","2fe40d81":"markdown","0fde700b":"markdown","45efa07d":"markdown"},"source":{"9feea09d":"A = 2\nB = 3\nC = 4","3abbf883":"x=B*B+4*A*C","5b23918b":"x**(1\/2.0)","2b278299":"a,b,c,d,e = 9, 8, 12, 33, 5\nu = (a+b+c+d+e)\/5","30f88ed2":"sq1=(a-u)*(a-u)\nsq2=(b-u)*(b-u)\nsq3=(c-u)*(c-u)\nsq4=(d-u)*(d-u)\nsq5=(e-u)*(e-u)","11a11f5b":"sq_total=sq1+sq2+sq3+sq4+sq5","58543661":"variance = sq_total\/5","ef92de4d":"sd=variance**(1\/2)","767d57f8":"print(sd)","ce169ab0":"# Orignal function defined in section 3: leap.py\ndef isleap(y):\n    if y % 400 == 0:\n        return True\n    elif y % 100 == 0:\n        return False\n    elif y %4 == 0:\n        return True\n    else:\n        return False","d2f9ac10":"# Add a print statement to each branch\ndef isleap(y):\n    if y % 400 == 0:\n        print(\"year %d is divisible by 400\" %y)\n        return True\n    elif y % 100 == 0:\n        print(\"year %d is divisible by 100 but not by 400\" %y)\n        return False\n    elif y % 4 == 0:\n        print(\"year %d is divisible by 4 but not by 400 or 100\" %y)\n        return True\n    else:\n        print(\"year %d is not divisible by 400, 100, or 4\" %y)\n        return False","0d7e10c5":"# Test the function\nprint(isleap(1900))\nprint(isleap(2000))\nprint(isleap(2012))\nprint(isleap(2019))","6a924820":"# if elif else, lab 2 slide 31\ndef daysinmonth(m,y):\n    if m==2:\n        if isleap(y):\n            return 29\n        else:\n            return 28\n    elif (m==4)|(m==6)|(m==9)|(m==11):\n        return 30\n    else:\n        return 31    ","8259dfbb":"print(daysinmonth(1,2020))\nprint(daysinmonth(2,2020))\nprint(daysinmonth(4,2020))\nprint(daysinmonth(2,2021))\n","0527a5e3":"# Four functions \ndef multiplication(a, b):\n    return (a*b)\ndef subtraction(a, b):\n    return a-b\ndef addition(a, b):\n    return a+b\ndef division(a, b):\n    return a\/b","287e658e":"def calculator():\n    \n    # Print the welcome message\n    print(\"Welcome to the Python calculator\")\n    \n    # Take inputs, remember to convert the string to integer\n    n1 = int(input(\"input number 1:\"))\n    n2 = int(input(\"input number 2:\"))\n    \n    # Take operatoin\n    op = input(\"Select an operator * for multiplication, - for subtraction, + for addition, \/ for division: \")\n    \n    # Calculate and print result\n    if op == \"*\":\n        result = multiplication(n1, n2)\n        print(\"Results: multiplying {0} by {1} = {2}\".format(n1,n2,result))\n    elif op == \"-\":\n        result = subtraction(n1, n2)\n        print(\"Results: msubtracting {0} by {1} = {2}\".format(n1,n2,result))\n    elif op == \"+\":\n        result = addition(n1, n2)\n        print(\"Results: adding {0} by {1} = {2}\".format(n1,n2,result))\n    elif op == \"\/\":\n        result = division(n1, n2)\n        print(\"Results: dividing {0} by {1} = {2}\".format(n1,n2,result))\n    else:\n        print(\"Unknown operator.\")\n","4ff5becf":"calculator()","853636e8":"# Take house occupancy information for user input, remember you need integer not string\nn0 = int(input(\"Provide the number of houses with 0 occupancy: \"))\nn1 = int(input(\"Provide the number of houses with 1 occupancy: \"))\nn2 = int(input(\"Provide the number of houses with 2 occupancy: \"))\nn3 = int(input(\"Provide the number of houses with 3 occupancy: \"))\nn4 = int(input(\"Provide the number of houses with 4 occupancy: \"))\nn5 = int(input(\"Provide the number of houses with 5 occupancy: \"))\nn6 = int(input(\"Provide the number of houses with 6 occupancy: \"))\nn6_plus = int(input(\"Provide the number of houses with 6+ occupancy: \"))","65cf3d46":"# Let's calculate the total first\ntotal = n0+n1+n2+n3+n4+n5+n6+n6_plus","b3a8c4af":"# Calculate the percentage for each house type.\np0 = n0*100\/total\np1 = n1*100\/total\np2 = n2*100\/total\np3 = n3*100\/total\np4 = n4*100\/total\np5 = n5*100\/total\np6 = n6*100\/total\np6_plus = n6_plus*100\/total","2511f4cd":"# Print the results\nprint(\"Occupants  0 1 2 3 4 5 6 >6\")\nprint(\"No.houses  {} {} {} {} {} {} {} {}\".format(n0,n1,n2,n3,n4,n5,n6,n6_plus,))\nprint(\"Percentage {}% {}% {}% {}% {}% {}% {}% {}%\".format(\n    round(p0,2),round(p1,2),round(p2,2),round(p3,2),round(p4,2),round(p5,2),round(p6,2),round(p6_plus,2),))\n# A more comon solution:\n#print(\"Percentage {:.1f}% {:.1f}% {:.1f}% {:.1f}% {:.1f}% {:.1f}% {:.1f}%\".format(p0,p1,p2,p3,p4,p5,p6,p6_plus))","a892ec38":"print(round(33.3333,2))","2369122d":"# What types we know so far??\nprint(type(2))\nprint(type(2.3))\nprint(type(\"2\"))\nprint(type((1,2)))","3830008c":"# We need to check for number and string\ndef checkType(x):\n    # int and float are numbers\n    if (type(x) == int) | (type(x) == float):\n        return x*x\n    elif type(x) == str:\n        return \"Sorry Dave, I'm afraid I can't do that\"\n    else:\n        return \"unknown type\"","a00c790a":"# Test the function\nprint(checkType(2))\nprint(checkType(2.3))\nprint(checkType(\"2\"))\nprint(checkType((1,2)))","3c06ced3":"# anytimestable.py\n\n# Function 1: get user input\ndef get_number_from_input():\n    return int(input(\"Enter a number between 1 and 12: \"))\n\n# Function 2: print times table\ndef print_times_table(x):\n    for i in range(1, 13):\n        print(\"{0} times {1} is {2}\".format(i, x, i*x))","6bf09c49":"# Note. You need to do import in your own main program \n\ntable = get_number_from_input()\nprint_times_table(table)","1bc8ab32":"# Prime functions. Defined in 4.5\ndef isprime(x):\n    for i in range(2,x):\n        if x % i == 0:\n            return False\n        return True\n","306ba4e9":"# We use n to store the user input. Initialse it to 0.\nn = 0\n\n# Use a loop to get a number is greater than 2.\nwhile n<=2:\n    n = int(input(\"Enter number greater than 2 :\"))\n\n# Print all prime numbers till n    \nfor i in range(2, n+1):\n    if isprime(i):\n        print(i)","ce4b0344":"def half_pyramid(rows):\n    for r in range(1, rows + 1):\n        for c in range(1, r + 1):\n            print(\"*\", end=\" \")\n        print()\n        \nhalf_pyramid(5)","902b9535":"# Can you spot the difference?\ndef full_pyramid(rows):\n    for r in range(1, rows + 1):\n        # We need print \" \"\n        for i in range(1, rows + 1 - r):\n            print(\" \", end=\"\")\n            # The following also works\n            # print(\"\", end=\" \")\n        for c in range(1, r + 1):\n            print(\"*\", end=\" \")\n        print()\n        \nfull_pyramid(5)","9bb417ec":"# Let create the function to calculte the disctance first.\n# square root learnt at lab 1\ndef cal_distance(p1, p2):\n    return ((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)**0.5","c8da3e8e":"user_input = (0,0)\n\npoints = []\n\npoints.append(user_input)\n\n\n# The while loop to get user inputs.\nwhile(user_input != (999,999)):\n    x2 = int(input(\"please insert destination X2 value: \")) \n    y2 = int(input(\"please insert destination y2 value: \"))\n    user_input = (x2, y2)\n    points.append(user_input)\n    \n# Do the caculation now.\n# The fisrt point is (0,0), so we start from index 1\n# We should finish one index before the last. \nfor index in range(1, len(points)-1): \n    distance = cal_distance(points[index], points[index-1]) # distance of current point to previous\n    print(\"Step {}: {:.2f} metre\".format(index, distance))\n    \n","46a32cf6":"def check_direction(p1, p2):\n    direction = \"\"\n    # Check Top or Bottom first\n    if(p1[1] < p2[1]):\n        direction += \"Top\"\n    elif(p1[1] > p2[1]):\n        direction += \"Bottom\"\n    else: # equal mean no movement in this direction\n        direction += \"\"\n    \n    # Check Right or Left later\n    if(p1[0] < p2[0]):\n        direction += \" Right\"\n    elif(p1[0] > p2[0]):\n        direction += \" Left\"\n    else: # equal mean no movement in this direction\n        direction += \"\"\n    \n    return direction","688baa9b":"# Create the BMI class first\nclass BMI:\n    \n    def __init__(self):\n        self.weight = 0\n        self.height = 0\n        self.bmi = 0\n        \n    def set_weight(self, weight):\n        self.weight = weight\n        \n    def set_height(self, height):\n        self.height = height\n    \n    def calc_bmi(self):\n        self.bmi = self.weight \/ (self.height\/100) ** 2\n        \n    def get_bmi(self):\n        return self.bmi","fdd4a706":"# Write our main() function\ndef main():\n    bmi_calculator = BMI()\n    bmi_calculator.set_weight(80)\n    bmi_calculator.set_height(180)\n    bmi_calculator.calc_bmi()\n    print(\"BMI is {}.\".format(bmi_calculator.get_bmi()))\n\nmain()","12fe99b6":"# 4 Create a calculator program","528410c8":"To create test plans, you will need to read the \"Programe Specification\" carefully and understand what the program can do. \n\nSome bugs are syntax bugs. The Spyder IDE can help you - Can you spot the bugs without IDE help? \n\nSome bugs are logic bugs. You need to fully undertand the \"Programe Specification\".\n\nSee below for bug locations:\n![contacts_buggy.png](attachment:contacts_buggy.png)\n","d6c7f21f":"# Lab 1","afeeb8ca":"# 2.1 BMI\n\nEasy. \n\nClass specification is given. Formula is provided. \n![BMI.png](attachment:BMI.png)\n\nMake sure you have checked and understood the lecture vidoe. **This task is a no-brainer**.","c38f4239":"# 7 Identifying the direction of the robot movement\n\nTo determine the direction of movement, you will need to compare the coordinate of two points. For example, \n\nFrom (0,0) to (1,2), it's Top Right. Because 0<1 (going right), 0<2 (going up)\n\nFrom (0,0) to (0,2), it's Top. Because 0<0 (no need to move), 0<2 (going up)\n\nSo we will need another function to check out the direction and then we can print the result together with distance.","b54469a6":"Run the calculator","cfdd5240":"# 6 Designing a program which moves a robot on 2D coordinate system","42153bc6":"# Before you copying the codes\n\nAuthor: Quanbin Sun\n\nPlease make sure you have read all the texts and comments. It's easy to copy the solution now, but you can't do that while you are doing the coding challenge and final assignment later. \n\nTry to understand the solution, and then write your own codes.","9f464a3a":"The description is lengthy but the task is fairly simple. \n\nWe need 8 variables to store the number of houses. Then calculate the percentage and print the results.","65a964b5":"## Description\nCopy and paste your successful areacirc() and rectarea() functions into a new window,\nand save this file as Z:\\ CMP4266\\Lab2\\funcs.py. To be able to import this, you are likely\nto need to add the folder where you saved your funcs.py module to the Python module\nsearch path. e.g.\n* import sys\n* sys.path.append(' Z:\\ CMP4266\\Lab2')\n* import funcs\n\nYou may need to alter these instructions slightly depending upon your Windows drive letter\nand names of folders. Now test your funcs module from the command line, e.g:\n* funcs.areacirc(10.0)\n* funcs.rectarea(3,4)\n\nWhen you have completed the experiment and removed any bugs, you should get the correct\nareas output. If you need to correct and save any changes to your funcs.py module use\n* import imp\n* imp.reload(funcs)\n\nafterwards to reimport the changed version prior to retesting it.","e1b7104a":"## Solution\nBy observing the 2nd pyamid, you realise \" \" need to be printed.\n\nThe question is how many \" \" for each row?\n\nLet's have a look: \n1. Each row (except first and last) has a pattern of * and \" \".\n1. Last row has no \" \" prefixed.\n1. The row above has 1 \" \" prefixed.\n1. When goes up, the nubmer of prefixed \" \" increase by 1.\n1. For the first row, there are n \" \" prefixed.\n\nTherefore, we just need to print required \" \" before printing \"\\*\". \n\nWe can use the half_pryamid() method as the basement, and add code to print required \" \" at each line before printing \"*\"\n","2d41679f":"# 5.1","f1ab7ad2":"## Solution","4a63c526":"## Solution","3e2baeb4":"Design a program which a census the numbers and percentages of houses with particular\nnumbers of occupants in a road. The output must appear in a table like the one below:\n* Occupants 0 1 2 3 4 5 6 >6\n* No. houses 2 3 7 9 6 4 2 2\n* Percentage 5.7% 8.6% 20.0% 25.7% 17.1% 11.4% 5.7% 5.7%\n\nHouses with more than 6 occupants are considered to be overcrowded, and are to be output\nunder a single column (>6). The data input part of the program must request the number of\nhouses for each occupancy category. For example, the program should ask similar questions:\n* Provide the number of houses with 0 occupancy: 2\n* Provide the number of houses with 1 occupancy: 3\n* Provide the number of houses with 2 occupancy: 7\n* Provide the number of houses with 3 occupancy: 9\n* Provide the number of houses with 4 occupancy: 6\n\nYour program should ask the user 8 times about houses with occupancy of 0 to 7 to count the\nnumbers of houses with particular numbers of occupants. Each count should be stored in a\nseparate variable. For each question, the user of the program should input numbers of houses\nwith a particular occupancy value. After the program ask for the number of houses with\noccupants > 6, the program should output a table like the one above, and then exits. The table\nabove is a result from inputting a value for the number of houses with different occupancy\nsettings in a street with total of 35 houses.\n![](http:\/\/)\nThe last raw of the table reflects the percentage of each houses of different occupancy level\ngiven the total number of houses in the street. For example, the percentage of houses with 0\noccupancy is 5.7%. This is because (2\/35) * 100 is 5.7 % ","b0df35cb":"Develop a standalone Python program (i.e. as a saved file) which obtains an integer in the\nrange 1-12, and which then outputs a times table using this integer. Save the program as\nanytimestable.py The program must contain 2 separate functions, one which prints a\ntimes table and the other which obtains and returns the ranged integer. In the main part of\nyour program, you can assign a value returned by a function to a variable like this:\n* table=getrangedint(1,12)\n\nAnd then the variable: table can be used as a parameter when calling the function with\nprints out that times table.\n","54afe1bf":"# Lab 4","6a316e28":"Step 1: Calculate the mean of the data\u2014this is \u03bc in the formula.\n","799eec07":"Then define a function named calculator() as below:","e9abd3c3":"Now, we can use the code from exercise 6 as a start point. You will need to pay attention to one more thing: when calculating the distance, the orders of point do no matter but for direction, the orders do matter.","52320b35":"## Solution\nThe actual solution has multiple python files. Watch out for the way functions get called in this solution (as all functions are in one file).","ab70e0d8":"First, we need to take the x and y from each user's input, until we got both 999. A while loop can be used to achive this.\n\nSecond, we need to store user's inputs, a list of tuples (x,y) should do the work.\n\nThird, we need a funtion to calculte the distance between two points. The formula is given.\n","f970e5f3":"## Solution\nThe prime check funtions is done at 4.5. We only need to make sure the user inputs a nubmer greater than 2 and use a loop to print out all prime numbers till reach the number user input.","a6e072f4":"# 3.1a","93b20c80":"# 5 Designing a program which generates housing occupancy report","7d405926":"This task is straightforward forward. Except the we need four functions for the calculation.","7ed21464":"\n\nWhen the above the function is called with 5 as argument value, the following half-pyramid\nis printed\n![Screenshot%202020-10-08%20164721.png](attachment:Screenshot%202020-10-08%20164721.png)\nYou need to modify the function so that it prints a pyramid. For example if it is called with 5\nas argument value then the following pyramid will be printed,\n![Screenshot%202020-10-08%20164722.png](attachment:Screenshot%202020-10-08%20164722.png)\n","d827027e":"# Lab 6","0fb8e351":"## Solution","c23deee7":"## Solution","71788645":"## 9.2","e05f9dd2":"Write a Python script that will calculate the square root of the equation B * B + 4 * A *\nC. (hints you can use three variables to store the values of A, B and C). Note: to\ncalculate square root of a number x, you need to implement the following x**(1\/2.0)","68745467":"# 2.2","6c8b050b":"Step 4: Divide the sum by the number of data points in the population. The result is\ncalled the variance.","d90e9d19":"With the inputs from this exercise,\n\nQuestion 1: what is the length of list \"points\"\n\nQuestion 2: what is the last index in the for-loop?\n\nLastly, we didn't calculate the total distance, can you do it?","dd3cecdc":"### Output\n* please insert destination X2 value: 4\n* please insert destination Y2 value: 2\n* please insert destination X2 value: -3\n* please insert destination Y2 value: -7\n* please insert destination X2 value: 8\n* please insert destination Y2 value: 2\n* please insert destination X2 value: 999\n* please insert destination Y2 value: 999\n* Step 1: 4.47 meter\n* Step 2: 11.40 meter\n* Step 3: 14.21 meter\n\n\\-----------------------------------------\n\ntotal distance (in meters) the robot has moved is : 30.09","0a860ba0":"Step 2: Subtract the mean from each data point, and then square the result to make it\npositive","227b2580":"Develop a Python function which either returns the float square of its parameter x if the\nparameter is a number, or prints the string \"Sorry Dave, I'm afraid I can't do that\" if the\nparameter is a string, and then returns 0.0.","0cc301e9":"## Solution\nThis exercise is about calling functions defined in another python script. \n\nYou will need to import the corresponding python script in order to use the functions in it.\n\nIf you can't understand this mechanism fully, don't worry. Just follow the instruction strictly and carry on.\n\nYou will see more examples later, as section 3 also uses this feature.","c4fd688e":"# Lab 5","3673b7cc":"# Lab 2","2f405a4c":"Step 3: Add the squared deviations together.","1a3b29fe":"## Description\n\nWrite a Python script that calculates the sum, average and population standard\ndeviation of 5 numbers stored in the variables a,b,c,d,e The formula to calculate the\nstandard deviation of a number can be found below. To ensure that your calculation is\ncorrect, use the following 5 numbers 9, 8, 12, 33, 5 and assign then into the 5\nvariables a, b, c, d, e. The population standard deviation should equal to\n10.051865498503252. \n\n![Screenshot 2020-09-28 104356.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAZMAAACXCAYAAADQ+rbDAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAACoPSURBVHhe7Z0HdFRXtqY3GSSCAkhISELkIJEz2GCybWxjg8E2zqHdNu12v7fWmzfT45k3PbPWWzPzes0L3e3UdrvbCYNtMAZjwJhsDDZJgSAQGQUkQIEgISHBnH9LhQtxS6pbt0oqyv+3OKvErVtV55x779ln77P3Ps2uG4QQQghxQPPaV0IIIcRnKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwoQQQohjKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwoQQQohjKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwoQQQohjKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwoQQQohjKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwoQQQohjKEwIIYQ4hsKEEEKIYyhMCCGEOIbChBBCiGMoTAghhDiGwsQHrl+\/XvtXw9g5t7GxqluotA2EcvtCuW1WhHLbQgUKE0IIIY6hMCGEEOIYChNCCCGOoTAhhBDimGbXuVrlNa6uwmuzZs3074awc25jY1W3UGkbCOX2hXLbrAj2tt1OfRkoKEx8INhvbG+xqluotA2EcvtCuW1WhHLbQgWauQghhDiGmokNXF0VKrMkq7qFSttAKLcvlNtmRbC37Xbqy0BBYeIDwX5je4tV3UKlbSCU2xfKbbMilNsWKtDMRQghxDEUJoQQQhxDYUIIIcQxFCaEEEIcQ2FCCCHEMRQmhBBCHEPXYB8IFTdFq7oFS9uqqqrkhx93yderv5HCwrO1R70HdQPu9bM65omaU4Pz2lnVreaQd\/W1c26wECz3pYtWrVrJkCGD5L5Zd0u3+Ljaoz9vKEx8INhubF+xqluwtO3y5cvy0aIlsu37HdKzRw\/p0KF97TvecR1DpvnnXj+rY54xZ3t9bmNjVTc79Q3mtlkTbM9cy5YtpFfPnjJ27CjpHB1de\/TnDYWJDwTbje0rVnULlrbl5efLkiVLzQywtcyf95BERUXWvuMdqBtwr5\/VMU\/YObcpsOp7O9fDzrnBQDC2Db\/RvHnz26ofAwmFiQ8E443tC1Z1C5a27d6TJqu+XiupKQNk1r0zpU2bNrXveE8wt88podw2K0K5baECF+BJ0HHt2jU5c6ZAqqquSmxsjNqnCQkUED5XrlyR3Nw8OXL0mBQVFUl1dXXtu8RbqJn4QKjMkqzqFgxtu3Tpsiz5bKmcLTwn8+fNkZ49k2vfsUewts8fhHLbrAhU265cqZD09Ez5atVqyT5yVC5fLlPT1ciRw2TOQ7OlX9\/e0rJly9qzSX1QmPhAoG7sxsaqbsHQttOnc2TR4s+kU6eOsuDRedKxY8fad34Cv43Zo2sGif+7iuv\/wL1+Vsc84X5uixYtVDvCIOMUaF34bqe2dnxH3c9bHfOEnXODAW\/ri\/5FwTVr6PzKykrZuXOPbNv+gxEafWTUyOGqlSz\/8itZt36jpAzoL7988TkZNCjFL9c+1KEw8YFQeWit6tbUbcN3ZmTsk2XLV0hKygCZa2aHGBjqUlBQKGvWfit709L1\/xhAKiuvqmkM4HuAe\/2sjnnCdS5+e+jQIXL\/ffdIYkI3PeYr588XyY87dxvB1FLGjhkl7dvb81Bzx6rvrY55ws65wYC39T1wMEsyM\/fLwIH9ZaARBlb3jov8\/AL59NOlatp6fMEjMmrUcHO0mRw4kCV\/fvc9yTDfM2\/ug\/peZGREzYeIR1r8zlD7N7GBnQcxmB9aq7o1ZdsQX5JuhAns15gRJndPsvyNy2WXZcuWbbLyq9WSuW+\/nD17TmJju0ifPr0lPq6rxHXtKl27xuqaS5fOnaVLl84SE4PXLubVFPOK49B6IDcuXLwk582sNDcv3wwux9Xkcez4CTl+\/KQUFxdLYmKC9OiRbAYn+zNUDIRYA1q8+HOt64gRwyQhIcHxbDfYrl2g8aa+10xfY4Kx7tsNRliHS7f4eMt+xjUpKCyUTZu3yubN30n1tWrp37+fRER0ktZtWun12rV7j4SFhcngwakSGRFx2\/VXY0Nh4iOh8tBa1a0p21ZWVqYPcUVlpZodPPnwt2vb1jz0rc3s8oy6EUMg4KF\/wswi4f01xsz8R48aqRrA2LGjZZyWMTV\/jxtT83\/zeucd42XG9Cly36x7zOtUc\/5I6d+vj7Rp3VqKS0qkvLxCB544I6D6GkGFwcVOm\/FZBF0uXbZCDmZlyd0zp8uY0SOltR+cCoLt2gUab+rbrm07iejUyUwGjkna3nSdVGDyUFeg4LtgIi0qKtZ7bdiwITJ08CBpa+6rq1evmmt1SPbsMZ83132MuY\/gmn679VdjQ2HiI6Hy0FrVrSnbVlJSKjt37dE1ilEjhkt4eHjtOzeDwQGmB\/z+caNBYCaJQbtjxw7St68RBkbQAG\/bB40jPDxM4uPj1EQyatQISTDaSGnpBck\/c0bf69evr8SagclOm+EltHHTVlmzdt0Nc1lYWDu\/9Ju3bfOEP+rQmHhT3+bNm0mHDh00qHDX7jTJycmTXj2TpZMRMHU\/365dW+ndu5dMmjhBhhhBgnsH55w7XyTf7\/hRjh49KkMGpZqJR41J8nbrr8aGwsRH7NxYwXwTWtWtKduWm5cnmZn7zKAdo5pGa6MheALvdesWL+VXKuTQ4Ww1U2GmCSHTPSlJBZIv7YOgwuDR3wgPCJCi4hI5ceKk+a041U689e6BVrJv\/0H1TMPA9fDcB9Vc5q8+86Vt7virHo2Ft\/XF9Ys2Gm1RcbFs3LxF2rZpK\/36971FG8T3IX4J1xqv+D+0EphZIfw7GqH00Oz7ZcCAfvWuvZAa6KJAgoozBQVypaJCusR0NsKiYVMQPL6mTp4oE8aP1QEB6xxrv\/lWTUpYlHcCBqWUgQPkkXlzNf\/SsWMn5OLFi7XvNszFi5dk587dutA7eNAgSUxIqH2HBBpof4NSUyQqMlK2Gy0D2qs3QLvd8cOPqlHC9AkNlXFO3kHNxAaYabq\/eoOdcxsbq7o1ZdvwfRh8CwrOymjzEMNe7Q0dO3bStYy8\/DxduM\/LP2MEQQuNEYDJwx277YNAiTKaztXKKl2fiTEaE0xhDYGF4P0HDsrKVavNjLil3HvvDOnVs4fftAGrdtht2+2EL9etRcsW6vWXnpEp7cPbq\/myPq3ywoWL6iG4Z2+6PPjALF1789bjzl\/X9XaGmokNcMOwBK6Um9kgzFRtjYYRaWaUVudYFayPYLF+1r13S1Jigi7ib9y0RTWUCxcuOL52GFAm3DFO7rhzvJqrMFhZnedeyi6XSdbBQ5KbkyfJ3btLcnJ3NZVYncsSmAIPrL59+hjNorXs23dATp\/O9XgvQJCs37hZso8ckUfmz9F7qV27dlJ59eoNDdfqc65CKExIEHH+XJGUmsG\/c+do9cix85Aiq\/CUuybKxIkTdBDAgvy6bzdpji\/YwZ2AeiDGZNqUuzR2wZt6lZSWytGjx6W8vEwSk7pJdFRU7TuksYDZs1t8V9P3keryfeLUKUvTJ0xae\/emydEjR+Uucw9NmniHTlAQf7J1yzZzLxXWnknqg8KEBAWY7efk5uo6AxbV7aacB4grmf3AfToYQAtIS8+Qz5cuVzdPp2YdCBB8p0u7qA\/8FoTZsePHVatJSkis15HABSKyz5w5IxkZmbJr1x7Jzj6iM2YMgOXlV9QJAMczMvfJuXPnQzJ\/FPoO98Dhw0fkiBncy8vLa9\/5CfTHhYsXtY+xhuXp2sLU1SWmiyQmdjPCvUTX0y4ZjdEd9Dlc0XfvTZchQwbrGtmly5d17QT9f+r0aXPW7WUSbCq4ZuIjdmbNds5tbKzq1hRtgzlh9569cu7seRk+fKgKFLugLliQh1voyVOndUYJm3l4WLj0799XF2Vd53mLL+3DYJeWnikbNmzWGIepUydpvEN9YFCEae7DDz+R9Rs2yYaNW8zrZikpKTH1D9ONwj5e9Kl8a95DoN3pnFzpGhsjUUbjca9joNsWaDC4Ixj1\/\/z+33TtAq67aCdw1RcBqitWrpJFSz43WmeVmhHrCmvXudevX1MNIz0tU7rCQ3BQihHw4fo+fistLUNT9+zdm6GehFu3bpONpu\/Rz4iAR3DrsKFDdE2O1A81ExIUYDOsAjP4h7cPMxpGzeDhCzBxTRg\/TmZOm6rmDQzS327YaAbgLbqW0hhgpozUKVj\/QUQ1THb1gXUdLPxCgIwYOVz++2v\/WV777X9SAbj8y1Xyu\/\/1v817m+XOO8fLwpdeUAeALVu\/l63fbVfNxanWFUyUlZVL1uHDkn04W6qrqqVl85tdcqGNnTITBbQfAgKTDwgMT7QzQgDrb9VGwJ87f161DoA+w0QDQuP77T+oFrRp01ZZv36TFpi38nLzpL3RkNu0tb\/9wc8RChPS5ODBLi4ukbPnzpnBN0I6R3eufcc3EGcya9ZMmTlzqgYbIiXKsuUrNRgSM9lAg99A8GX5lXKNVahvVutKNrh79165845x8uj8uZoSBoGXiHNBehnY+5HqAzNkzNa3bduhKV5KL5Tq50OJc+YewPWqNH0Is2VcHc85tBfm0ByjmUHDSEiI9xjYChBbgmBEuPdC8F66dEmPQzOBFnv3zGnyP\/\/Ha\/L7f\/nnW8pr\/\/UfZfJdEzXbAmkYChPS5LiESZWZiSIuwJv4kobA7H3GtCkydMhggcEDySO\/+Wa9ug4HmqtXKzV3GNqFWS0SO3oC2guSE0IADh8+7IbrKpwGkA4dr3FmUO3Tp5e0Nd9VVl4uV6uuSnR0lOYtw9qSu7nq2rXrcvLkaZ1tw9RXXe0s1qaxKSw8pyY8zUYQ11U6GIHhDlKf5BsNFhMPOGrAHIq1EU\/gPQQtwgyGdafysiu178ClvKMMHzZU93FHZoK6BYKke1IiAxa9hMKENDmYySOGAw8tEjO6D46+gkF5mBkoHrh\/liT3SNaBGSaN1Wu+kdLSUh3oAwVmzyhoD7yCEPPiCZj3ws2AiWj\/LmZwdAHzHIIdMXgi3gYDa2xsrDz04P3yT\/\/tv8hrv\/1HmTF9muaScgepXz5atFj+77\/8q2zZ8p0t0x6EOcxMmME7KVhAr6iosPScqg8ITqxbQOAjA0J3IyzrDuRIb3PaCEm4XsMcCs2kIaCVQJhUVFao+zkJDExB7wPoMm8HPDvnNjZWdWuKtsH0sOSzZXLGCJR5Dz+kJh5\/gPohWePf3v9YPvhwkQ5ySOiHdYeJd05oMC2Kr+3Dwv+fXn9bVq1eI08\/9bg8\/+yTtwRPusBvuAZdzKLxezgGj63X33hHPY3mznlQXnjuKRW0LqzqhmNYnF719RozIOfLPXfPkCFDUi3bWffzqMORI8fkm3Xr5XD2EX3fVxCLM3LEcJkyZZK6RHvbh9A23v9gkblWn5jrNFh+8+uX1bTn6hO8wlT5b\/\/+uuzbv1+eenKBvPrKy7dosnXbhtxov\/9\/\/6GOGa++8pJMnXKX13Ui3kPNhDQ5cP\/EIjQWz602wnICzGbTpk7WjMEY5LAoj3WZQA4m+GoUDGpYHK5vXEY9MPtGcdUJ6yTIAoAU6eiT+LhYr\/sFph\/kAPvVwhc9ChJPQEPq0aO7DBo0UL2efC1wr4WZsXWrht2h3YHTQm5OrrQwQhXeb9FRN2eMRn8Wmj7Jzc1VsyBMXPWZEEnjQs3EBq6uwqu3g5Gdcxsbq7o1Rdv27z+ou9vBrPHg7Pt0YdUfuOqHnRs\/WrRE1xIWPDZPJkwYpwNWQ\/jaPgyKr7\/xZ\/l82XJ56onH5BcvPKuLvd4C09TiTz+Xt95+TwdMzKbvmnTnTXUJ5LXDe\/7ATt9BgG77fofR6N5S8x42pMK1QrZfgDrBE+vjj5fI62\/+WQXWb15dqFsJ1KVu2+AJB80EC+mvGm0HcUh26uYN\/v6+2xFqJjbADcPi\/1KT3PGK2sChPVid42vBWgniMpCkcfq0yTJyxDBpWasFBKog8rqNGbhgOkLSymvXqi3PQwFYK4B2hgEVx1BnmKngEdY1NvbGIrPrMxBWR48d1yh71zFEcSPa\/8OPFmt8Csx7rvfsFvyWP4rVd3sqWGPBes\/5omLp0LGDdDXamGvvGFdBu0\/n5OBJ1PUjxIBgbQlxJPlnCrQv3c9HAdiBs7KiUteXwoymV\/ccfxRCYUKaGMQNINoYk2EMDnbMMvWB2SkG6M1btupWudiTYsrkSY0SfNaqdSujXYXpgAoPIgxmnoDJ5p13\/yYLX\/l7o40s1QVwCFdoU\/g83GOxS6QLfNf2HTvli+UrJS8vX49BkMB7C+WU+dxnn38h367baI5X6Pu3A9A68owALS29qK6+EZ0ibroXkDgT60HYnwS522D6gwZ76FC2fGm02oMHs2rPvBkIdNwHWHyHyTAsnMGHgYLChDQp2HMCwiQyopNGi\/sLDLrY4OirVWtlQP9+MnfObN0trzGA5hNpBkNErmMt6NKlmkC5ukAj2bp1u0a2axBeeqbGWRwzWsdRo0nh8zFGkIS1qxkAMTAeO3ZMMjIydCDFugSOHc4+agTLGRk7epQMHzZEPcRy8vKMMLk1FUkwAsFfXFwqJ0\/lyOVLlzRQ0X17ZH3faCyIVj9q2o+4EWx7DI0AGhoEdnxcnKWGUGE0EniAXau+Zq5\/hHTwMgswsQ+FCWkyMEggx1RxSalEI7mjESj+AN+bdeiwzs6x7\/u0aZNv2N4bA2gU0Z2jNNUJTFUwOVkBl2gktiwrL1NPLQQpYvDbt++gFBUVwWajbTEt0lcIXXgmXS4r061\/EVmP8yGAEJcRERkhJ06eUpMRXGtvlxQgeh8YrQOa1tWqmj6BSQvCFkDzQjoZuHWfPXte420QXwMhDc+5Tua+ifWQNQHrT5iwwD24S+cuqvXQLBUYmJvLR+zckMF881rVrbHahgC7AwcPSXZ2tmbjhQbhtK8wUz969JguflcY7QQaCQZplw0f+NI+DHgwyeEVxxr6jstmoDuYdVjXAdAuBB3W\/QzqVFhwVk6eztE6Ig\/V9zt+kEIjHBBsieBH7M3SrFlzNQHBSQHR8PfeM0NG1AY4YgYPU1jPnsly3gjmtd+sVxdYZACA5lJfPRtqQ2OBtSJkAYBbMrQMrJ8hJxnkqObh+mqVukj36tlTPfGwQA93YJgCkRIFC+q9e\/XU\/nThahvWnjZt\/k6FOtLRDBmcqoKF+B8KEx+x8yAGy0NrhVXdGqttMMMgbgALySNHDvN6MyxPYKBHwNvny1aYQeisPGwEyYgRQ3XQda+n3fbhezFwYU\/xSjPAd46Orvc78B6E2omTpzVmI6FbvKSmDNDAOXcw+GE9BKYXmLb27T+gJhxsFTvLCIyePZJVQ\/lh5y7zPdlGYPSQ+fPmyJAhg3RAxO+g1AyOiMHYLZu3fieDU1PVHRrODPVRXxsaE8T\/bN7ynWzdtt0I1J4aeQ4BmpaeLpn79mtKmtmz79OATQhNmDCxcyKi+2fOnGa0tBG39C3aBuGP7Zw3btqsZsHp06eqx2CwtDvUoGuwD7hmp95g59zGxqpujdk2BKl99PESNWc8seARnUk7AWsFS5d9qS6mCNibOWOqLrq640v7sCj+9eq1mgkYWgHcURv6DtTlq1Vr1LsqJaW\/vPTi89LDCAcrEC0PrySYrBDr0T48XAUNfh+mHAR1QiDCvRiDJn67bjsw8\/7LX9+XzWYW\/szTT2jbEXmPGXzdKHLg9Nr5E6x7wJV65VerZfYDs+TvXl1oBv\/22oeoOwQsPLHQJxDS8HZDf6EvYBqt67Thahv6Ddfgo48Xa\/DjwoUvamoaEhi4ZkKaBDzwGACxQB1hBkkMGE7AwPH1mnXquYXodsRl1E014guY3WL7XcQqYPDq1cu7rXexXpGSMlDPP3HilGoorjWAuuB7o422A2HaqWPHGwGMGDzRLzgO5wS4HHv6beydAs+m7klJmk9qR+0aA3J\/BTO4D7BWghggCIakpARd+8HfcImGCc\/lIgzQJ1gvQZ8gQLOuIHGB78X6yr79B805rXQnTjgzkMBBYUKaBDzsReeLNM04Um44sWMjlmPb9h90PxBk151hZuV2ggQ9gVkwUoxggy3Mnrt3TzSDu3ffi8EP0eQjRgzTfFCZmQekqBjrAP43BKCeiJjHjL1Hz2QdYIuLSlQweUrjEixofEl+gToR4D5ITEjQTL9OQZ+ogD2cLX379tY9cqw0NOI\/KExsgIGAxT8FDzsCzaqvVasnEx50q\/MaKvieAweyZN23GzQFx713z9A1DafXC15AO3b8KH\/401u6lzwGul69eqrQszrfqiBAbtyYUdK3dy9Jz8iU7MNHtL5W5zopEFwRER0lMipSPb62fve9LmKnpA7QRJNWnwmWgh0T8\/Pztb+xfgSNo0WLlpbn2inwBtuzJ03\/njRxgmp2dc\/xZyEUJrbAQ8tya8HDhEHSTh\/BLRaeOM2aN5cYI0xci+R2Cn4XmxohgK9Vy1Yy56H7VXvwFnweZiyYnzCYYSBGOvhVq9fKP\/3un+Xv\/+G3snrNOrl+7bp6YyUldNM0LFZ18VSSk7vLA\/ffq0IIWYvxG8DqXCdl+LBh8vQTC6SH+T14Pc26Z6ZGz1udG0ylpLhUAy2NSJTExATdVREealbnelvgEfbdd9vVUxCOCOPHjb2x1hSoQrgA7xPoMm9vIDvnNjZWdfOlbfB0godNghlsMRP2BgiSDz76RPcaeeLxR9U2bgf8NtxkP\/nkU1m3fqMZRJMlFTNxM2i43gfubXE\/Bk8gCDS43168dEkD27CnCvYVRwQ6PIwgIHEu2vXcs0\/Jw3Nn6+K4XZCWHdrNxs1bZfzY0SpcYH7ytp+tsLpOVsc8YefcQIE6YD3qrbf\/IlmHsuXxx+ZrkkqsidTF2\/piYrA3LUOWfLpUY4ueeepx3QO+qdv6c4DCxAfqu7ExAGFghS24qrrK47k4hoEP3kZYVGwKrOpWX9vqgnOxiA4PKjzEcx564KY06fWRlp4hy75YqfbsOQ\/ebzvADl5Oy5av0HTl2AsFfYhyo+qmbrixb2qL+zH8bf6DI8idVV1982OAtgF8J9yLX\/7lCzJ2zCifrxU8k7A1765dezQ1O5wEsKDuK\/64dt6eG0iQ6uTkyVNSfqVCtSqsdVnVy9v6Ym1r2Rcr9H7EdgaIPwmGdv4coDDxAasbG8cQL7Fv3wHZ8cNOOWhUbE3joOYfqMI157nAGsG4caNl7pwH1AOnKfDUDm8fPri0Ij7g3fc+0FTvC196XgYNSq191zPoE5iPYNufMX2Kel7ZHaTRt3vT0nXwMJWuPfoTrtvavS1WxzxTI2xQL7j0wrXUaYQ+Bk4kJcT3wmzmZDtYp9fOzrnBgLf1PXUqR\/Ly8tS86K+N1oh3UJj4QN0bG\/9HNtNPP1umuaAwU3a5gdZ0763CBMemmRnqr195yQzAKbXHGpe67QBWxzwB89Y7f3lfI7MRbPbKwhc1Grkhrxkk9UNf4cGfP+8hjX73lZr+tcZp+9zP9fYzjYU\/23Y7EMptCxUoTHzA\/WZFKgj4sv\/t\/Y90pg3XUaRsgFvolfIrsmdvuuw\/kGXOF7nzjvG6PStmuzBvpQwYIAMG9L0lsM4KaAHpGfs0jgKxGf4AM+47J4xTf34X3j6IyJcEgQBhgjiBpMQE3bdj9uxZmqCwPrDHN3Y+hG38yccf042OAoFVW7xtH7BzbmMTym2zIpTbFipQmPiA+816\/PhJ+ct7H2iAGATFM08t0NgCJJQDMMW8\/uY7ait\/YsGj8tyzT0p0dJS+ZwcM3tt3\/GgE1na\/CZPevXrIjOlTNU2HC28eRHhAQUguXvK5mvPOnjuvn3t8wXwtSCXvCZyHLWkXL1kqKQP7y6OPPOwx8MwpVm3xpn0u7Jzb2IRy26wI5baFChQmPuC6WSuMtrDok8\/kXTM779Spg7yy8Je6AZN7AB4S1UHYYJEamsnLL72g9nK74DehBeE3kU7bH2DLUywCu69XNPQg4n2Y8T5e\/JlUGAHX2QjGVV+vFaRMh5fSi794VnNKeQLmP6yzbNi4RU1iSPvhLfht91Ifrvfd22J1zBN2zm0KUL+6dbM65gk75wYDwdA2fCeeldup3xoTChMfQJehwCPpj396S3M2PfboPHn6yQW3eDMhxfp7f\/1QPlv6he7y96uXX5TU1IG17zYtVg+d1TF3oJWgvXAywH7fWER+8+13VWNCzioIVHg\/eVpQhxsuBOupU6fV+ys1xfu+QN0gyFauWi27d6fVHrUG5wL3tlgd80TNqcE54NZU7ea6WR2rj4auc7Bhp76BaBsmXqNHjZAHHpglkRGBMcve7lCY+AC6DLvYLf9ypWol2FnvpRefM7PsabesfyCL7RtvvaNJ7KZOuUsWqmbSu\/bdpsXqoWvoQaxp+xUtyH2FFOnvvPtX07410iM5SRYaYTl92hR9+KyAcEXivUqjodhN7ojfxueRXTYr61DtUWtwLnBvi9UxT9g5t7GxEhxWx+oD7QvGtnnCTn0D0TY4lWDfebh0O80jF6pQmPgAugyRzFh0X\/rFCp1dw3yFXe7qejJlZO6X\/\/jjG7J9+486eL7w\/NM+7SiI34RLLTQDf10yaA+uyHMX+G47Dy02tvrgg481O24L810v\/fJ5WfDowx6TLMI1dsmSpZo645H5czSwzFvweyhVVdW1LteecfVR3bYBb9pn59ymAPWrWzerY56wc24wEAxtQ2R+3eeF\/ASFiQ+gyxBo9fY7f5X1GzbpOsnzzz19y1oBzvtyxSpNr410HX\/3m1\/pngy+LDirN1d6puzavVcjqv1BcvckmTBhrEZ4u7DzIOJcCLelS5erk8GZgkKNOIZg9eShtWXrNlm3boOMGTNSF\/+R5iJQWLXFbvuCdeAI5bZZEcptCxWaJvQ6BDD3q9602NUO2VmR1K8uWB84mHVICgoLdUOjgQP7++y5hJk4ssJCI0K6D3+UopLiG\/EwvoL2ILdWVHSUOggUnj2r26RagTag\/tXmtUuXLj73BSEk+KBmYgNXV+EVXlrvf7BI1qxdJ3fPnC5PPvmYJqlzgUEaKdH\/\/M7fdPYO89aUyZOkod3v6iMQZi6Y5dxncfhuuzPAw4ePyL\/\/4Q3tC+wb8Ztfvyzjx4+tPesnoJ0hHxf2mXji8Uc0fUYgsWqLL+0LRkK5bVYEe9tup74MFNRMbIAbxlVgxunfv6\/a\/HNyc3U\/BtdNjAEfAYaIDK+quqoJAsePG62CxP077BYM\/DALwZ3XHwWagcvV0UnBJkUxMZ31+6B5FHjIjAsBjGSK2KQoOirylvdZWG7XQihMfAaxJHCFHTt2lO5wh+Ry6Zn75Njxk5rA8A9\/fNMMqufkscfmy\/333StRUVEhe9OFh4epSzT22cb+FMgIDC3EHQharKkgQWNsbGzQb9pECLEHzVw+4K5Gny8qkvXrN8m36zfKmTOFeqyLmakjiSPMWklJiUG7NuDeDhdWxzzhOhep3Fd9vUbefOtdo6XlqZPBL154RrePdYH9zb9atVo1tvtm3a0++4HGX+0LRqzqhj7G+lxBQYFeExdm7qxZF7BfiMvM6v75svJyTY547lzRLV5y0FyRxBMpd8LC2jVZf4TKdQtlKEx8wP1mxd8wayFjMLahbdbMPHxRkZpKG0IkmG9sq7rZqa\/rXOwN8sOPO+VPr78tu\/ekyV2T7lCPriGDB934Lpi3PlnymVy6eFkemT\/X1iZWvuKv9gUjVnXLy8+XRZ98qpoxNEAXOG30qJE33NeB6\/N4zTp0WLM0YJ97uF2707ZtG5k+tcZbEfnmmqo\/QuW6hTItfmeo\/ZvYwHWz4hWzN+zHER0drTNAzOBwzEUw39hWdbNTX5yL08vLynSXQsSRhIWHaewNUuujH\/Bww\/SFqHn0z9gxo6V1a+f7fHuDP9oXrNStW\/MWLXTLYiQa7d+vj1w0gjsnJ1cDTGF2TOgWp9fFFQtVc+2aSetWrXVzMmx7DC0Fa1v4\/z13T5eH5zwoEyfeIUmJ3dS025T9Yee3m7KeP1coTHwkVG5sq7rZbRsK3IKxt0h29hFMDaVf3966MREcBiBMkLvroBE28OBKTRlwk7ANJP5oX7BSt26tjCYcGxOje9Vfu35Nr8UF7Klj\/oYwad+hg25GBrMVcH0e2gfMWINSawRNZWWFJuB87pknJcVcq9iYLk0uSECoXLdQhQvwxC9gER7ZgsPDwjWrMTy6ys2MGMAMWGhmu82bt9D4EpgCSeDATp9Yv2ttBMDEiRM0fQ\/WUI4arfHQocMeY4ugwRQXF0ukETbYnyaQAaUk9OBTTfwCcpLFxcVKRGQnuXS5TBMyXrxYE6mPgaywoEAQ4Amvr+bNOWsMJBAK2GOmdZs2MnnyJBkxfKgK+9zcfN0fHYLdCqz75RshBHd396wIhHgDhQnxCzCPdO6M+JEo1UTOnClQhwQAO3xp6UXdNCvCwx7fxH8g80JxSYluPtanV08ZlJoiCd3iVbhjo7bjJ06q6dEdeHHBSQJ71WNbgY503SY2oTCxAR5AFusC4BKNJJYQLFhwRwAj3sOC7qWyy7r4jhly3c+y+LcggPaSEShY64BnYd8+vaVv3756XY4cOSqZmft1Xxz3z2gqHFwvI1Ti47recJxg8a4QChNbYEbN4rl0MYNXnBmIsFiLAMXcvHyd8ebl5klF+ZXaWIUwy8+y+KdgYMvNydc8bklJSdK+fXtJ7tFdRo0cpsK8qKhY9uxJk2PHjt90TyNGBderecsWktQ98abvZGm4EAoT4kewURY0E+z3UF5erkkfYW7BK2a6WKB3uaWSwID1krNGM0E\/QzPBa9s2bWTAgH7qyQWOHT8hmfsOaCZqF\/D2Ki25oMLe5e1FiB0oTIjfwAwtrmus5t5yrZtkZx+VwsJzEhHRyad9XIg9zhvNAwvsyH2G\/nbNnHv0SJahQwapmfGsEe7p6Rm6SO8y0eAzWIDvGhMj7Tu012OE2IHChPgNFSZxXTX3FoBHV2bmPnU3hUsw7PckcEAwqONDUZHExcfd1N\/tw8M1I0G\/fn2NFlIuBw4ckoNZcBOuqjFFGsGCdRakXMG5NN0Qu1CYEL8CEwlmxEglg1nygYOH5EpFhXTuHBW0OcpCBcSPwPEBi+nQEJEZ2gX6Pjm5u5q7kJ\/r1OkcNXVduHhB10ugrQAEPdIUSXyBwoT4FY03MQNZp4hOul874hpg8oqPi+NsN8AgH1dOTp60NdcAi+\/u\/Y2\/sd\/O8KGDpVt8vJSWlkpaeoYcOXJMNRloNNBkusbVaJWE2IXChPgV5NzCoBUdGaExC5gpY1EXe76TwIL4Eiy+d2gfrovvdcG+\/AMG9Nd9eOAQAUGSlpapmZ6hReIziBOi0Ce+QGFC\/ArcgiE4EEUN4JoK4YKFXxI4NOjQCAR4ZSHhqFV\/Q0gkJSZKamqKBjRCO8nIzFRX4auVldK1a1dp04YpVIhvUJgQvwJ7e0xMjC7EY2CKje0iiYndbrLfE\/8DUyIyBMPdNykpQVoaoW4FMlqPGD5EMwvjMzt37ZUVK79WTaUpU8yT2x8KE+J3MOvt0rmztGvbTs0mEC5cfA8smv\/s7Dm5dv26mqvqy8qM1CqpqQP1OmG95OSpU9KmbRuNAyLEVyhMbOBKncBSf8GWvEjoGBkVqRqKyw5vdS6Lf0pJaYnu+tmpYwddSId+YXUeCkyQgwalqncX\/g9TJBblmerG90IoTGyBAZGl4QJTCryCusXHSWJCN4mMjLA8j8U\/BS7BWVmH5dixE0aYdJKwdjXrJVbnosDkiHxd2L8EzhFY00IKlVatWluez9JwIdwcy2fs3EDBfLNZ1c1p22BiqbhSoYNc\/359pV+\/Pk0WuxCI9gUD2LME+5Ns3fq9rF67Tr788ivJyKgJED13vkg96cLatVOtw6oNbdu0lZKSUsk6lK1ayZTJkzTBY7C2F4TCdQtluAe8D6DLvL1Z7Zzb2FjVzV9tq6quVmHS0ggReHg1BYFsX1MDl+ulX6yQlSu\/1jQoWEyHRxcEeatWLTXa\/aknF8joUSMs10\/QtkOHj8iST5cawdJaHn\/8ERUqwdreULluoQyFiQ+Eyo1tVbdQaRsI5fYhoSPiQxBsWFVVjcoKHmTUF5uPYd0EgYsdPeTZQtsg7JHdWdPOx8c1mdD3hlC5bqEMhYkPhMqNbVW3UGkbCOX2hXLbrAjltoUKFCaEEEIcQ28uQgghjqEwIYQQ4hgKE0IIIY6hMCGEEOIYChNCCCGOoTAhhBDiGAoTQgghjqEwIYQQ4hgKE0IIIY6hMCGEEOIYChNCCCGOoTAhhBDiGAoTQgghjqEwIYQQ4hgKE0IIIY6hMCGEEOIYChNCCCGOoTAhhBDiGAoTQgghjqEwIYQQ4hgKE0IIIY6hMCGEEOIQkf8P6OXeOXsZEuYAAAAASUVORK5CYII=)","9e28f2da":"## Solution","c38a50bc":"Step 5: Take the square root of the variance to get the standard deviation.\n","bc6bc5f2":"The following function takes an integer (i.e. rows) as input and prints a half pyramid of numbers containing given number of rows.","6209c9e9":"## Solution\nEasy, you just need to check the type of the parameter and then print the message.","2caaa2e5":"# 3.1 \n\n## Test a class\n\n\nExamples are provided for the \"Rectangle\" class (in \"rectagnle.py\") already. First, you need to understand the workflow of teating a method from a class in those examples:\n\n1. Display testing information\n1. Prepare the instance for testing\n1. Run the method to be tested\n1. Display the expected result\n1. Display the actual result\n\n\nUse the same approach to test the \"Rectangle\" class in \"geom.py\".","ee056c2d":"# 4.6.2","ada9eeb9":"Extend leap.py by adding a function daysinmonth() to which a month and year are passed as\ninteger parameters. The function must branch based on month and return an integer, being the\nnumber 28, 29, 30 or 31. The month will be passed as a number between 1 and 12. If the\nmonth number is 2, the function isleap() must be called to work out whether the year\nparameter is a leap year or not. Months with 31 days should be detected using an else: block.\nThe number of days in the 12 months is known from this statement: \"30 days has September,\nApril, June and November. All the rest have 31, except February which has 28, and 29 for a\nleap year\".","5a67f617":"# 4.6.1","2e69c51b":"Create a program that takes three parameters; two numbers and one string. The string\nis used to indicate the arithmetic operation to apply on the two numbers. The program\noutput should look like the following:\n* Welcome to the Python calculator\n* input number 1: 7\n* input number 2: 5\n* Select an operator * for multiplication, - for subtraction, + for addition, \/ for division: \n* Results: multiplying 7 by 5 = 35\n\nThe program must use an if statement that uses the sign operator string to decide on\nthe arithmetic operation to be done on the two numbers (See above example).\n\n\nThe program should returns the answer plus an explanation. For example, if the user\ninputs 7, then 5 and then *, the program should return \u201cmultiplying 7 by 5 = 35\u201d\n\nThe program should be able to call 4 functions to perform 4 arithmetic operations and\nthese are addition, subtraction, multiplication and division. ","fbd7aa4e":"## Solution","b7795aeb":"## Solution\nThe key is to understand the workflow of the algorithm. \n\nPlease try to draw a flow diagram if you cannot sort out the logic in the first place.\n\nYou need to \"use if elif else\" for the main flow and a nested \"if else\" for Feb.\n\n","00206df8":"Add 4 suitably indented print statements giving more information about each branch\ncondition into your leap.py file. These statements must have the correct number of tabs at\nthe start and each must come on the line after the statements with colons at the end, and\nbefore the return statement for the relevant branch. e.g. one of these statements might be\nas follows:\n* print(\"year %d is divisible by 4 but not by 100\" %y)\n\nThen save, reload the module and retest it, making sure that each of the 4 branches are\nproperly tested and that you fully understand which statements are executed in which\norder for each of your 4 test cases.\n","4cbb8dcb":"## 9.1","ca80347e":"A robot moves in a 2D coordinate system starting from the original point (0,0). The robot can move UP, DOWN, LEFT and RIGHT using x and y coordinates. The software should ask the user for the destination (x2, y2) coordinate point. Using the input x2 and y2 and the known current location, the software can use the Euclidean distance formula to calculate the distance to the destination. The software should continuously ask the user to input the destination coordinates to move the robot further, but, once the user inputs the value 999, the software should print all previous movements by showing the distance of each step. The trace function also prints the total distance travelled by the robot.\n![Screenshot%202020-10-13%20114427.png](attachment:Screenshot%202020-10-13%20114427.png)\n\nHints: At the end of each step, the input destination coordinates x2 and y2 should become the robot current location x1 and y1.","7b3bf13a":"Develop a program which prompts the user to input a whole number greater than 2. All\ninvalid input must be rejected, including whole numbers 2 or less. The program then\noutputs all prime numbers starting at 2, which are less than the number input by the user.","2fe40d81":"# 2.2c","0fde700b":"# Lab 3","45efa07d":"# 5 Writing a function that displays number pyramid"}}