{"cell_type":{"6967b312":"code","0b66acf4":"code","514a3304":"code","2d6858b0":"code","6b3c3eb7":"code","804be87c":"code","165ed2c6":"code","d18392d5":"code","df750b31":"code","bb238cb0":"code","17b5eac3":"code","7a875283":"code","5355501b":"code","29b7d804":"code","fb0ff41d":"code","0225e764":"code","48f166ce":"code","edfcc7f7":"code","dceb5148":"code","81415efb":"code","4b581d72":"code","bfd48cbe":"code","02178824":"code","443cd79c":"code","176bfa59":"code","3ed9cce2":"code","3678b0c4":"code","0d2a8f8f":"code","713bd289":"code","1ed37af0":"code","ed25ea78":"code","8bfeee14":"code","b76061ca":"code","75006bf4":"code","6f70c579":"code","08011f0c":"markdown","23cc4d18":"markdown","3ddbc57b":"markdown","5c732209":"markdown","a52a7a46":"markdown","1d34f320":"markdown","867f6a4f":"markdown","dd93c593":"markdown","11a4ae37":"markdown","523591d3":"markdown","b0905f89":"markdown","6d0b9be0":"markdown","c900affc":"markdown","a5822195":"markdown","7c1b61d7":"markdown","3e09eb9c":"markdown","8896d558":"markdown","f7f84593":"markdown","5dcc97a5":"markdown"},"source":{"6967b312":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b66acf4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras","514a3304":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain","2d6858b0":"train.shape","6b3c3eb7":"train.isnull().sum()","804be87c":"plt.figure(figsize = (10,6))\nsns.countplot(x=\"label\", data=train)","165ed2c6":"train.dtypes","d18392d5":"train_features = train.drop(\"label\", axis=1)\ntype(train_features)\ntrain_features","df750b31":"train_target = train[\"label\"]\ntrain_target.shape","bb238cb0":"from sklearn.model_selection import train_test_split \nX_train, X_val, y_train, y_val = train_test_split(train_features, train_target, test_size = 0.25, random_state = 42)\nX_train.shape","17b5eac3":"X_train = X_train \/ 255.0\nX_val = X_val \/ 255.0","7a875283":"X_train_flattened = X_train.to_numpy()\nX_train_flattened","5355501b":"X_train_flattened.shape","29b7d804":"X_train_flattened[0]","fb0ff41d":"X_train_reshaped = X_train_flattened.reshape(X_train_flattened.shape[0], 28, 28, 1)\nprint(X_train_reshaped.shape)                ","0225e764":"X_val_flattened = X_val.to_numpy()\nX_val_flattened","48f166ce":"X_val_flattened.shape","edfcc7f7":"X_val_reshaped = X_val_flattened.reshape(X_val_flattened.shape[0], 28, 28, 1)\nprint(X_val_reshaped.shape)      ","dceb5148":"from tensorflow import keras\nfrom tensorflow.keras import layers\nmodel = keras.Sequential([\n            layers.Conv2D(filters=64, kernel_size=3, activation = 'relu', input_shape = (28, 28, 1), padding='same'),\n            layers.MaxPool2D(),\n            layers.Conv2D(filters=128, kernel_size=3, activation = 'relu', padding='same'),\n            layers.MaxPool2D(),\n            layers.Flatten(),\n            layers.Dense(512, activation = 'relu'),\n            layers.Dense(10, activation = 'softmax')\n])\n","81415efb":"model.compile(\n        optimizer = 'adam',\n        loss = \"sparse_categorical_crossentropy\",\n        metrics = [\"accuracy\"]\n)","4b581d72":"early_stopping = keras.callbacks.EarlyStopping(min_delta=0.001, \n                               patience = 5, \n                               restore_best_weights = True)","bfd48cbe":"history = model.fit(X_train_reshaped, y_train, \n                    validation_data = (X_val_reshaped, y_val),\n                    callbacks = [early_stopping],\n                    epochs=20)\n                    ","02178824":"history_df = pd.DataFrame(history.history)\nhistory_df","443cd79c":"sns.lineplot(data=history_df.loc[:, [\"loss\", \"val_loss\"]])\n","176bfa59":"sns.lineplot(data=history_df.loc[:, [\"accuracy\", \"val_accuracy\"]])","3ed9cce2":"test = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\ntest","3678b0c4":"test = test\/255.0\ntest","0d2a8f8f":"test_flattened = test.to_numpy()\ntest_flattened","713bd289":"test_reshaped = test_flattened.reshape(test.shape[0], 28, 28 ,1)\ntest_reshaped.shape","1ed37af0":"test_predictions = model.predict(test_reshaped)\ntest_predict = [np.argmax(i) for i in test_predictions]\n","ed25ea78":"output = pd.DataFrame(data=np.array(test_predict), columns=['Label'])\noutput","8bfeee14":"output.index = np.arange(1, len(output)+1)\n\n","b76061ca":"output[\"ImageId\"] = output.index","75006bf4":"output = output[[\"ImageId\", \"Label\"]]\noutput","6f70c579":"output.to_csv(\"submission\", index=False)","08011f0c":"#### *Dataframe of Train accuracy, Train loss, Validation accuracy & Validation loss*","23cc4d18":"#### *Preprocessing Validation Data*","3ddbc57b":"#### *Target in the Train Data*","5c732209":"#### *Compiling the model*","a52a7a46":"#### *Plot shows the Frequuency of each digit appearing in the Target  column of Train data*","1d34f320":"#### *Defining keras layers*","867f6a4f":"## *Model Validation*","dd93c593":"## *Exploratory Data Analysis*","11a4ae37":"## *Data Preprocessing*","523591d3":"#### *Basic Library imports*","b0905f89":"#### *Features in the Train Data*","6d0b9be0":"## *Training the model*","c900affc":"## *Building a Model*","a5822195":"#### *Inspecting Training Data*","7c1b61d7":"#### *Plot the train & validation accuracy curves to estimate the performance of our model*","3e09eb9c":"#### *Plot the train & validation loss curves and estimate the performance of our model*","8896d558":"#### *Splitting the train Data into Train set & Validation set to check for the accuracy & loss after training the model*","f7f84593":"#### *Transforming the 2Dimentional array to 1Dimentional array without changing the values*","5dcc97a5":"#### *Scaling X_train & X_val between 0 , 1. Each row has 784 pixel values between 0 & 255, so scale to use them in Keras layers*"}}