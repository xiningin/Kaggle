{"cell_type":{"c7b8ae74":"code","0179b14f":"code","2353273a":"code","726e7e4d":"code","f3784c6e":"code","de323064":"code","0a380339":"code","bd4d3243":"code","77fdec9d":"code","139cc26c":"code","a99e7ccf":"code","8a70024e":"code","c480bad8":"code","b50ec2b5":"code","9a613b53":"code","955daba4":"code","d1109bf4":"code","7fd4d642":"code","e751a546":"code","a00a52e6":"code","1a79a3bd":"code","cc8904ee":"code","36964725":"code","a4d6eab3":"code","8762aaf7":"code","ce96a681":"code","a99d7c60":"code","4590b082":"code","49b99677":"markdown","69ecb998":"markdown"},"source":{"c7b8ae74":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0179b14f":"import os\nprint(os.listdir(\"..\/input\/sign-language-mnist\"))","2353273a":"train = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')","726e7e4d":"train.shape","f3784c6e":"labels = train['label']","de323064":"labels","0a380339":"train = train.drop('label',axis=1)","bd4d3243":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","77fdec9d":"x_train = train\/255.0","139cc26c":"x_train.shape","a99e7ccf":"x_train = x_train.values.reshape(-1,28,28,1)   # \u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u4e0d\u7ba1\uff0c\u4e0d\u7528\u53d8\uff1b\u540e\u9762\u53d8\u4e3a28,28,1\n#test = test.values.reshape(-1,28,28,1)","8a70024e":"labels.value_counts()","c480bad8":"labels = to_categorical(labels,num_classes=25)","b50ec2b5":"x_train, x_val, y_train, y_val = train_test_split(x_train, labels, test_size = 0.3, random_state = 2)","9a613b53":"plt.imshow(x_train[0][:,:,0])","955daba4":"from keras import layers\nfrom keras import models","d1109bf4":"model = models.Sequential()\nmodel = Sequentialmodel = Sequential()\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(25, activation = \"softmax\"))","7fd4d642":"model.compile(optimizer = Adam() , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","e751a546":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","a00a52e6":"epochs = 40\nbatch_size = 50","1a79a3bd":"datagen = ImageDataGenerator(         # \u7528\u4e8e\u6570\u636e\u589e\u5f3a\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=20,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.2, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","cc8904ee":"history = model.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_val,y_val),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size\n                              , callbacks=[learning_rate_reduction])","36964725":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","a4d6eab3":"# Look at confusion matrix \n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\ny_pred = model.predict(x_val)\n# Convert predictions classes to one hot vectors \ny_pred_classes = np.argmax(y_pred,axis = 1) \n# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(25)) ","8762aaf7":"test_labels = test['label']\ntest.drop('label', axis = 1, inplace = True)\ntest_images = test.values\/255.0\ntest_images = np.array([np.reshape(i, (28, 28)) for i in test_images])\ntest_images = np.array([i.flatten() for i in test_images])\ntest_labels = to_categorical(test_labels,num_classes=25)\ntest_images = test_images.reshape(test_images.shape[0], 28, 28, 1)\ny_pred = model.predict(test_images)","ce96a681":"from sklearn.metrics import accuracy_score\naccuracy_score(test_labels, y_pred.round())","a99d7c60":"# predict results\n#results = model.predict(test)\n\n# select the indix with the maximum probability\n#results = np.argmax(results,axis = 1)\n\n#results = pd.Series(results,name=\"Label\")","4590b082":"#submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\n#submission.to_csv(\"sign_language.csv\",index=False)","49b99677":"# Description\nThe original MNIST image dataset of handwritten digits is a popular benchmark for image-based machine learning methods but researchers have renewed efforts to update it and develop drop-in replacements that are more challenging for computer vision and original for real-world applications. As noted in one recent replacement called the Fashion-MNIST dataset, the Zalando researchers quoted the startling claim that \"Most pairs of MNIST digits (784 total pixels per sample) can be distinguished pretty well by just one pixel\". To stimulate the community to develop more drop-in replacements, the Sign Language MNIST is presented here and follows the same CSV format with labels and pixel values in single rows. The American Sign Language letter database of hand gestures represent a multi-class problem with 24 classes of letters (excluding J and Z which require motion).","69ecb998":"![image.png](attachment:image.png)"}}