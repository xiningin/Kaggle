{"cell_type":{"c5270cf5":"code","7c06d377":"code","3c27d493":"code","7fcbaa9e":"code","c1cfee92":"code","dd6af165":"code","c1524556":"code","34fdb0b5":"code","5d9b639e":"code","bc4be5bc":"code","2cebe3d9":"code","07bb7da6":"code","a332aebc":"code","d51ae1b8":"code","388c85e2":"code","075ad386":"code","078cad9e":"code","61caf211":"code","96dd76ba":"code","ae856eeb":"code","d3d8e53b":"code","c3e28d49":"markdown","ad7963f2":"markdown","5093d8a9":"markdown","b2631255":"markdown","d46b7dcc":"markdown","dbd9ef59":"markdown","43d4596d":"markdown","93137ab4":"markdown"},"source":{"c5270cf5":"# import packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.colors as mcolors\nfrom sklearn.model_selection import train_test_split\n\nprint(\"Set up completed.\")","7c06d377":"filepath = \"..\/input\/apartment-rental-offers-in-germany\/immo_data.csv\" # input data\ndf = pd.read_csv(filepath)\ndf.set_index(\"scoutId\", inplace=True) # set index\nprint('The raw data is ', df.shape[0], 'rows and', df.shape[1], 'columns.' )\ndf.info()","3c27d493":"X = df.drop(columns = ['totalRent','pricetrend','baseRentRange']) # prevent data leaking\nX = X.drop(columns = ['geo_bln','houseNumber','street','streetPlain','description','geo_krs','geo_plz','date','noRooms','newlyConst','yearConstructed','livingSpace']) # data irrelavent or redundant to prediction\nX = X.drop(columns = ['telekomHybridUploadSpeed']) # too much na values\n\n\n\ncols = ['regio1','regio2','regio3',\n        'typeOfFlat','livingSpaceRange','noRoomsRange','floor','numberOfFloors','lift','balcony','garden','hasKitchen','cellar','noParkSpaces',\n        'petsAllowed','condition','facilities','interiorQual',\n        'serviceCharge','heatingType','firingTypes','thermalChar','heatingCosts','electricityBasePrice','electricityKwhPrice','energyEfficiencyClass',\n        'telekomTvOffer','telekomUploadSpeed',\n        'yearConstructedRange', 'lastRefurbish',\n         'picturecount',\n        'baseRent'\n ]\nX = X[cols]\n\nX.head()","7fcbaa9e":"#na check\nna = X.isna().sum() \/ X.shape[0] * 100\nprint('percentage of na values in each columns:')\nna.sort_values(ascending=False)","c1cfee92":"X = X.drop(columns = ['electricityKwhPrice','electricityBasePrice','energyEfficiencyClass','heatingCosts','facilities','lastRefurbish']) # too much na values\n\nvalues = {'noParkSpaces': 0,'petsAllowed': 'no','interiorQual':'normal', 'condition':'unknown', 'yearConstructedRange':5, 'firingTypes':'unknown','heatingType':'unknown','typeOfFlat':'unknown','telekomUploadSpeed':40,'telekomTvOffer':'NONE'}\nX = X.fillna(value=values)\n\n\n\nnumberOfFloors = X.numberOfFloors.fillna(df.floor) # If there is no renovation, input built year instead\nX.numberOfFloors = numberOfFloors\n\nvalues = {'floor':0,'numberOfFloors':0}\nX = X.fillna(value=values)\n\nthermalChar_mean = X.thermalChar.mean()\nvalues = {'thermalChar' : thermalChar_mean}\nX = X.fillna(value=values)\n\n\nX.groupby(by = 'numberOfFloors',dropna = False).count()\n\nX = X.dropna()\n\n\nX.head()\nX.shape\nX.info()","dd6af165":"X.groupby(by = 'floor').count()\n\nX = X.drop(X[X.floor > 30].index)\n\nX = X.drop(X[X.numberOfFloors > 30].index)\n\nX = X.drop(X[X.baseRent > 1300].index)\nX = X.drop(X[X.baseRent < 200].index)\n\n\nX.lift = X.lift.astype(np.int64)\n\ny = X.baseRent\nX = X.drop(columns = ['baseRent'])\n\nX.head()\n","c1524556":"y.plot.hist(title = 'Base rent per month', bins = 20)\nprint('The skewness of y is:',  y.skew())\nprint('Mean of y is:', y.mean())","34fdb0b5":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(40, 10), constrained_layout=True)\nfig.suptitle('log(y) and sqrt(y)')\nsns.histplot(np.log(y), kde=True, ax=ax1, bins = 20)\nsns.histplot(np.log2(y), kde=True, ax=ax2, bins = 20)\nsns.histplot(np.log10(y), kde=True, ax=ax3, bins = 20)\nsns.histplot(np.sqrt(y), kde=True, ax=ax4, bins = 20)\n","5d9b639e":"plot = X.groupby(by = 'regio1').count().plot.pie(y='regio2', figsize=(10, 10), legend=False, label = \"\",labeldistance=1.1,title = 'Apartments in all Bundesl\u00e4nder')\n","bc4be5bc":"\nplot = X.groupby(by = 'typeOfFlat').count().plot.pie(y='regio2', figsize=(10, 10), legend=False, label = \"\",labeldistance=1.1,title = 'Types of Flats', colors = mcolors.BASE_COLORS)\n","2cebe3d9":"sns.barplot(y = X.groupby(by = 'livingSpaceRange').count().T.iloc[0], x = np.arange(1,8)).set_title(\"Living Space Range\")\n","07bb7da6":"X.columns\nbool_cols = X.select_dtypes(\"bool\").columns.tolist()\ncat_cols = X.select_dtypes(\"object\").columns.tolist()\nnum_cols = X.select_dtypes(\"number\").columns.tolist()\nbivariate_cols = ['floor', 'numberOfFloors', 'noParkSpaces', 'serviceCharge', 'thermalChar', 'picturecount']\nnum_cat_cols = [c for c in num_cols if c not in bivariate_cols]\nprint(num_cols)\n\n\n\nX.typeOfFlat.unique() #one-hit encoding\nX.petsAllowed.unique() #ordinal encoding\nX.condition.unique() #ordinal encoding\nX.interiorQual.unique() #one-hit\/ordinal encoding\nX.heatingType.unique() #one-hit encoding (14)\nX.firingTypes.unique() #too many categories\nX = X.drop(columns = ['firingTypes'])\nX.telekomTvOffer.unique() #ordinal encoding","a332aebc":"X.balcony = X.balcony.astype(np.int64)\nX.garden = X.garden.astype(np.int64)\nX.hasKitchen = X.hasKitchen.astype(np.int64)\nX.cellar = X.cellar.astype(np.int64)\n\npets_dict = {'no': 0, 'negotiable': 0.5, 'yes' : 1}\nX.petsAllowed = X.petsAllowed.map(pets_dict)\n\ncondition_dict = {'ripe_for_demolition': -2, 'need_of_renovation': -1, 'unknown': 0, 'negotiable': 0.5, 'modernized': 1, 'first_time_use_after_refurbishment': 2, \n                  'mint_condition': 2, 'fully_renovated': 3, 'first_time_use': 4, 'refurbished': 1.5, 'well_kept': 2.5}\nX.condition = X.condition.map(condition_dict)\n\ntv_dict = {'NONE': 0, 'ON_DEMAND': 0.5, 'ONE_YEAR_FREE' : 1}\nX.telekomTvOffer = X.telekomTvOffer.map(tv_dict)\n","d51ae1b8":"# split train,validation and test sets\nX_train, X_valid_test, y_train, y_valid_test = train_test_split(X, y,\n                                                      train_size=0.6, test_size=0.4,\n                                                      random_state=0)\n\nX_test, X_valid, y_test, y_valid = train_test_split(X_valid_test, y_valid_test,\n                                                      train_size=0.5, test_size=0.5,\n                                                      random_state=0)\n\n\nprint('shapes of train, validation and test sets: ',X_train.shape, X_valid.shape, X_test.shape)","388c85e2":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\ntree_model = DecisionTreeRegressor()\nforest_model = RandomForestRegressor(random_state=1)\n\nfeatures = num_cat_cols + bivariate_cols \n\ntree_model.fit(X_train[features],y_train)\nforest_model.fit(X_train[features],y_train)","075ad386":"from sklearn.metrics import mean_absolute_error\n\ntree_predicted_y_valid_features = tree_model.predict(X_valid[features])\nprint(mean_absolute_error(y_valid, tree_predicted_y_valid_features))\n\ntree_predicted_y_test_features = tree_model.predict(X_test[features])\nprint(mean_absolute_error(y_test, tree_predicted_y_test_features))","078cad9e":"forest_predicted_y_valid_features = forest_model.predict(X_valid[features])\nprint(mean_absolute_error(y_valid, forest_predicted_y_valid_features))\n\nforest_predicted_y_test_features = forest_model.predict(X_test[features])\nprint(mean_absolute_error(y_test, forest_predicted_y_test_features))","61caf211":"OH_cols = ['regio1', 'typeOfFlat' ]\n\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOHed_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[OH_cols]))\nOHed_cols_train.index = X_train.index\n\n# Apply one-hot encoder to each column with categorical data\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\nOHed_cols_valid = pd.DataFrame(OH_encoder.fit_transform(X_valid[OH_cols]))\nOHed_cols_valid.index = X_valid.index\n\nOH_X_train = pd.concat([X_train[features], OHed_cols_train], axis=1)\n\n\n\n","96dd76ba":"features = num_cat_cols + bivariate_cols + bool_cols + ['petsAllowed','condition','telekomTvOffer']\nlabeled_X_train = pd.concat([X_train[features], OHed_cols_train], axis=1)\nlabeled_X_valid = pd.concat([X_valid[features], OHed_cols_valid], axis=1)\n","ae856eeb":"tree_model.fit(labeled_X_train,y_train)\nforest_model.fit(labeled_X_train,y_train)\n\ntree_predicted_y_valid_features = tree_model.predict(labeled_X_valid)\nprint(mean_absolute_error(y_valid, tree_predicted_y_valid_features))\n\nforest_predicted_y_valid_features = forest_model.predict(labeled_X_valid)\nprint(mean_absolute_error(y_valid, forest_predicted_y_valid_features))\n\n","d3d8e53b":"from xgboost import XGBRegressor\n\nXGB_model = XGBRegressor()\n\nXGB_model.fit(labeled_X_train,y_train)\nXGB_predicted_y_valid_features = XGB_model.predict(labeled_X_valid)\nprint(mean_absolute_error(y_valid, XGB_predicted_y_valid_features))\n\n","c3e28d49":"## Data cleaning\n","ad7963f2":"## Modeling","5093d8a9":"# Apartment Rental Prediction in Germany\n\nThis notebook is an exercise for machine learning, which aims to predict ther renting price (baseRent) of apartments in Germany, with data collected from Immoblienscout24. ","b2631255":"## Data Visualization","d46b7dcc":"### Ordinal encoding","dbd9ef59":"## Input and preprocess the data\nWe want to predict the base price of renting apartments in Germany, thus we need to split the data into train, validation and test sets. \n1. Remove some columns to prevent data leaking\n2. Remove columns irrelavent to machine learning","43d4596d":"### One-hit encoding","93137ab4":"## Dealing NA values"}}