{"cell_type":{"3a33d32c":"code","3dd59f8c":"code","8aaeeca6":"code","8f60a6d2":"code","50c21348":"code","1b81f3b9":"code","7ef1a820":"code","0443492e":"code","b165b220":"code","7644c692":"code","7de84bed":"code","8145fb8b":"code","4da58740":"code","870a08ab":"code","28728def":"code","71ef3b22":"code","a20eb877":"code","39dc71fe":"code","ba1cb774":"code","49c1b65f":"code","182c277a":"code","2659ed45":"code","9b668492":"code","30aa1dc5":"code","8455928d":"code","9387023d":"code","2b8e8916":"code","231602c9":"code","51c5f1d2":"code","081b7a5c":"code","ebaf6cb7":"code","53670ed5":"code","9cce927b":"code","16429506":"code","1c5aca72":"code","e1b51fd1":"markdown","4ca0b9eb":"markdown","fb519584":"markdown","3111c401":"markdown","79b50439":"markdown","9ebc524a":"markdown"},"source":{"3a33d32c":"import numpy as np\nimport pandas as pd\nimport torch\nimport transformers as ppb # pytorch transformers\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nimport re","3dd59f8c":"df = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ndf_test = pd.read_csv('..\/input\/nlp-getting-started\/test.csv') ","8aaeeca6":"\"\"\"df['text'] = df['text'].str.lower() #lowercase\ndf_test['text'] = df_test['text']\ndf['text'] = df['text'].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \ndf_test['text'] = df_test['text'].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \n# remove numbers\n#remove.............. (#re sub \/ search\/ ..)\ndf['text'] = df['text'].apply(lambda elem: re.sub(r\"\\d+\", \"\", elem))\ndf_test['text'] = df_test['text'].apply(lambda elem: re.sub(r\"\\d+\", \"\", elem))\ndef remove_URL(text):\n    url = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    return url.sub(r'',text)\n\n\n\ndf['text'] = df['text'].apply(lambda x: remove_URL(x))\ndf_test['text'] = df_test['text'].apply(lambda x: remove_URL(x))\ndef remove_html(text):\n    html=re.compile(r'<.*?>')\n    return html.sub(r'',text)\n\ndf['text'] = df['text'].apply(lambda x: remove_html(x))\ndf_test['text'] = df_test['text'].apply(lambda x: remove_html(x))\n# Reference : https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\n\nimport string\ndef remove_punct(text):\n    table=str.maketrans('','',string.punctuation)\n    return text.translate(table)\n\ndf['text'] = df['text'].apply(lambda x: remove_punct(x))\ndf_test['text'] = df_test['text'].apply(lambda x: remove_punct(x)) \"\"\" ","8f60a6d2":"\"\"\"def text_to_wordlist(text, remove_stop_words=False, stem_words=False):\n    # Clean the text, with the option to remove stop_words and to stem words.\n\n    # Clean the text\n    text = re.sub(r\"[^A-Za-z0-9]\", \" \", text)\n    text = re.sub(r\"what's\", \"\", text)\n    text = re.sub(r\"What's\", \"\", text)\n    text = re.sub(r\"\\'s\", \" \", text)\n    text = re.sub(r\"\\'ve\", \" have \", text)\n    text = re.sub(r\"can't\", \"cannot \", text)\n    text = re.sub(r\"n't\", \" not \", text)\n    text = re.sub(r\"I'm\", \"I am\", text)\n    text = re.sub(r\" m \", \" am \", text)\n    text = re.sub(r\"\\'re\", \" are \", text)\n    text = re.sub(r\"\\'d\", \" would \", text)\n    text = re.sub(r\"\\'ll\", \" will \", text)\n    text = re.sub(r\"60k\", \" 60000 \", text)\n    text = re.sub(r\" e g \", \" eg \", text)\n    text = re.sub(r\" b g \", \" bg \", text)\n    text = re.sub(r\"\\0s\", \"0\", text)\n    text = re.sub(r\" 9 11 \", \"911\", text)\n    text = re.sub(r\"e-mail\", \"email\", text)\n    text = re.sub(r\"\\s{2,}\", \" \", text)\n    text = re.sub(r\"quikly\", \"quickly\", text)\n    text = re.sub(r\" usa \", \" America \", text)\n    text = re.sub(r\" USA \", \" America \", text)\n    text = re.sub(r\" u s \", \" America \", text)\n    text = re.sub(r\" uk \", \" England \", text)\n    text = re.sub(r\" UK \", \" England \", text)\n    text = re.sub(r\"india\", \"India\", text)\n    text = re.sub(r\"switzerland\", \"Switzerland\", text)\n    text = re.sub(r\"china\", \"China\", text)\n    text = re.sub(r\"chinese\", \"Chinese\", text) \n    text = re.sub(r\"imrovement\", \"improvement\", text)\n    text = re.sub(r\"intially\", \"initially\", text)\n    text = re.sub(r\"quora\", \"Quora\", text)\n    text = re.sub(r\" dms \", \"direct messages \", text)  \n    text = re.sub(r\"demonitization\", \"demonetization\", text) \n    text = re.sub(r\"actived\", \"active\", text)\n    text = re.sub(r\"kms\", \" kilometers \", text)\n    text = re.sub(r\"KMs\", \" kilometers \", text)\n    text = re.sub(r\" cs \", \" computer science \", text) \n    text = re.sub(r\" upvotes \", \" up votes \", text)\n    text = re.sub(r\" iPhone \", \" phone \", text)\n    text = re.sub(r\"\\0rs \", \" rs \", text) \n    text = re.sub(r\"calender\", \"calendar\", text)\n    text = re.sub(r\"ios\", \"operating system\", text)\n    text = re.sub(r\"gps\", \"GPS\", text)\n    text = re.sub(r\"gst\", \"GST\", text)\n    text = re.sub(r\"programing\", \"programming\", text)\n    text = re.sub(r\"bestfriend\", \"best friend\", text)\n    text = re.sub(r\"dna\", \"DNA\", text)\n    text = re.sub(r\"III\", \"3\", text) \n    text = re.sub(r\"the US\", \"America\", text)\n    text = re.sub(r\"Astrology\", \"astrology\", text)\n    text = re.sub(r\"Method\", \"method\", text)\n    text = re.sub(r\"Find\", \"find\", text) \n    text = re.sub(r\"banglore\", \"Banglore\", text)\n    text = re.sub(r\" J K \", \" JK \", text)\n    return(text) \n\ndf['text'] = df['text'].apply(lambda x: text_to_wordlist(x))\ndf_test['text'] = df_test['text'].apply(lambda x: text_to_wordlist(x)) \"\"\" ","50c21348":"\"\"\"# replace strange punctuations and raplace diacritics\nfrom unicodedata import category, name, normalize\n\ndef remove_diacritics(s):\n    return ''.join(c for c in normalize('NFKD', s.replace('\u00f8', 'o').replace('\u00d8', 'O').replace('\u207b', '-').replace('\u208b', '-'))\n                  if category(c) != 'Mn')\n\nspecial_punc_mappings = {\"\u2014\": \"-\", \"\u2013\": \"-\", \"_\": \"-\", '\u201d': '\"', \"\u2033\": '\"', '\u201c': '\"', '\u2022': '.', '\u2212': '-',\n                         \"\u2019\": \"'\", \"\u2018\": \"'\", \"\u00b4\": \"'\", \"`\": \"'\", '\\u200b': ' ', '\\xa0': ' ','\u060c':'','\u201e':'',\n                         '\u2026': ' ... ', '\\ufeff': ''}\ndef clean_special_punctuations(text):\n    for punc in special_punc_mappings:\n        if punc in text:\n            text = text.replace(punc, special_punc_mappings[punc])\n  \n    text = remove_diacritics(text)\n    return text\n\ndf['text'] = df['text'].apply(lambda x: remove_diacritics(x))\ndf['text'] = df['text'].apply(lambda x: clean_special_punctuations(x))\ndf_test['text'] = df_test['text'].apply(lambda x: clean_special_punctuations(x))\ndf_test['text'] = df_test['text'].apply(lambda x: remove_diacritics(x)) \"\"\"","1b81f3b9":"\"\"\"\"# clean numbers\ndef clean_number(text):\n   \n    text = re.sub(r'(\\d+)([a-zA-Z])', '\\g<1> \\g<2>', text)\n    text = re.sub(r'(\\d+) (th|st|nd|rd) ', '\\g<1>\\g<2> ', text)\n    text = re.sub(r'(\\d+),(\\d+)', '\\g<1>\\g<2>', text)\n    \n#     text = re.sub('[0-9]{5,}', '#####', text)\n#     text = re.sub('[0-9]{4}', '####', text)\n#     text = re.sub('[0-9]{3}', '###', text)\n#     text = re.sub('[0-9]{2}', '##', text)\n    \n    return text\n\ndf['text'] = df['text'].apply(lambda x: clean_number(x))\ndf_test['text'] = df_test['text'].apply(lambda x: clean_number(x))\"\"\"","7ef1a820":"# de-contract the contraction\ndef decontracted(text):\n    # specific\n    text = re.sub(r\"(W|w)on(\\'|\\\u2019)t \", \"will not \", text)\n    text = re.sub(r\"(C|c)an(\\'|\\\u2019)t \", \"can not \", text)\n    text = re.sub(r\"(Y|y)(\\'|\\\u2019)all \", \"you all \", text)\n    text = re.sub(r\"(Y|y)a(\\'|\\\u2019)ll \", \"you all \", text)\n\n    # general\n    text = re.sub(r\"(I|i)(\\'|\\\u2019)m \", \"i am \", text)\n    text = re.sub(r\"(A|a)in(\\'|\\\u2019)t \", \"is not \", text)\n    text = re.sub(r\"n(\\'|\\\u2019)t \", \" not \", text)\n    text = re.sub(r\"(\\'|\\\u2019)re \", \" are \", text)\n    text = re.sub(r\"(\\'|\\\u2019)s \", \" is \", text)\n    text = re.sub(r\"(\\'|\\\u2019)d \", \" would \", text)\n    text = re.sub(r\"(\\'|\\\u2019)ll \", \" will \", text)\n    text = re.sub(r\"(\\'|\\\u2019)t \", \" not \", text)\n    text = re.sub(r\"(\\'|\\\u2019)ve \", \" have \", text)\n    return text\n\ndf['text'] = df['text'].apply(lambda x: decontracted(x))\ndf_test['text'] = df_test['text'].apply(lambda x: decontracted(x))","0443492e":"import string\nregular_punct = list(string.punctuation)\nextra_punct = [\n    ',', '.', '\"', ':', ')', '(', '!', '?', '|', ';', \"'\", '$', '&',\n    '\/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', '\u2022',  '~', '@', '\u00a3',\n    '\u00b7', '_', '{', '}', '\u00a9', '^', '\u00ae', '`',  '<', '\u2192', '\u00b0', '\u20ac', '\u2122', '\u203a',\n    '\u2665', '\u2190', '\u00d7', '\u00a7', '\u2033', '\u2032', '\u00c2', '\u2588', '\u00bd', '\u00e0', '\u2026', '\u201c', '\u2605', '\u201d',\n    '\u2013', '\u25cf', '\u00e2', '\u25ba', '\u2212', '\u00a2', '\u00b2', '\u00ac', '\u2591', '\u00b6', '\u2191', '\u00b1', '\u00bf', '\u25be',\n    '\u2550', '\u00a6', '\u2551', '\u2015', '\u00a5', '\u2593', '\u2014', '\u2039', '\u2500', '\u2592', '\uff1a', '\u00bc', '\u2295', '\u25bc',\n    '\u25aa', '\u2020', '\u25a0', '\u2019', '\u2580', '\u00a8', '\u2584', '\u266b', '\u2606', '\u00e9', '\u00af', '\u2666', '\u00a4', '\u25b2',\n    '\u00e8', '\u00b8', '\u00be', '\u00c3', '\u22c5', '\u2018', '\u221e', '\u2219', '\uff09', '\u2193', '\u3001', '\u2502', '\uff08', '\u00bb',\n    '\uff0c', '\u266a', '\u2569', '\u255a', '\u00b3', '\u30fb', '\u2566', '\u2563', '\u2554', '\u2557', '\u25ac', '\u2764', '\u00ef', '\u00d8',\n    '\u00b9', '\u2264', '\u2021', '\u221a', '\u00ab', '\u00bb', '\u00b4', '\u00ba', '\u00be', '\u00a1', '\u00a7', '\u00a3', '\u20a4']\nall_punct = list(set(regular_punct + extra_punct))\n# do not spacing - and .\nall_punct.remove('-')\nall_punct.remove('.')\n\ndef spacing_punctuation(text):\n    \"\"\"\n    add space before and after punctuation and symbols\n    \"\"\"\n    for punc in all_punct:\n        if punc in text:\n            text = text.replace(punc, f' {punc} ')\n    return text\n\ndf['text'] = df['text'].apply(lambda x: spacing_punctuation(x))\ndf_test['text'] = df_test['text'].apply(lambda x: spacing_punctuation(x))","b165b220":"mis_connect_list = ['(W|w)hat', '(W|w)hy', '(H|h)ow', '(W|w)hich', '(W|w)here', '(W|w)ill']\nmis_connect_re = re.compile('(%s)' % '|'.join(mis_connect_list))\n\nmis_spell_mapping = {'whattsup': 'WhatsApp', 'whatasapp':'WhatsApp', 'whatsupp':'WhatsApp', \n                      'whatcus':'what cause', 'arewhatsapp': 'are WhatsApp', 'Hwhat':'what',\n                      'Whwhat': 'What', 'whatshapp':'WhatsApp', 'howhat':'how that',\n                      # why\n                      'Whybis':'Why is', 'laowhy86':'Foreigners who do not respect China',\n                      'Whyco-education':'Why co-education',\n                      # How\n                      \"Howddo\":\"How do\", 'Howeber':'However', 'Showh':'Show',\n                      \"Willowmagic\":'Willow magic', 'WillsEye':'Will Eye', 'Williby':'will by'}\ndef spacing_some_connect_words(text):\n    \"\"\"\n    'Whyare' -> 'Why are'\n    \"\"\"\n    ori = text\n    for error in mis_spell_mapping:\n        if error in text:\n            text = text.replace(error, mis_spell_mapping[error])\n            \n    # what\n    text = re.sub(r\" (W|w)hat+(s)*[A|a]*(p)+ \", \" WhatsApp \", text)\n    text = re.sub(r\" (W|w)hat\\S \", \" What \", text)\n    text = re.sub(r\" \\S(W|w)hat \", \" What \", text)\n    # why\n    text = re.sub(r\" (W|w)hy\\S \", \" Why \", text)\n    text = re.sub(r\" \\S(W|w)hy \", \" Why \", text)\n    # How\n    text = re.sub(r\" (H|h)ow\\S \", \" How \", text)\n    text = re.sub(r\" \\S(H|h)ow \", \" How \", text)\n    # which\n    text = re.sub(r\" (W|w)hich\\S \", \" Which \", text)\n    text = re.sub(r\" \\S(W|w)hich \", \" Which \", text)\n    # where\n    text = re.sub(r\" (W|w)here\\S \", \" Where \", text)\n    text = re.sub(r\" \\S(W|w)here \", \" Where \", text)\n    # \n    text = mis_connect_re.sub(r\" \\1 \", text)\n    text = text.replace(\"What sApp\", 'WhatsApp')\n    \n    \n    return text\n\ndf['text'] = df['text'].apply(lambda x: spacing_some_connect_words(x))\ndf_test['text'] = df_test['text'].apply(lambda x: spacing_some_connect_words(x))","7644c692":"#https:\/\/www.kaggle.com\/sunnymarkliu\/more-text-cleaning-to-increase-word-coverage","7de84bed":"df.head() ","8145fb8b":"#Importing pre-trained DistilBERT model and tokenizer\n#model_class, tokenizer_class, pretrained_weights = (ppb.DistilBertModel, ppb.DistilBertTokenizer, 'distilbert-base-uncased')\n\n## Want BERT instead of distilBERT? Uncomment the following line:\nmodel_class, tokenizer_class, pretrained_weights = (ppb.BertModel, ppb.BertTokenizer, 'bert-base-uncased')\n\n# Load pretrained model\/tokenizer\ntokenizer = tokenizer_class.from_pretrained(pretrained_weights)\nmodel = model_class.from_pretrained(pretrained_weights)","4da58740":"df = df[:4000]","870a08ab":"#we\u2019ll tokenize and process all sentences together as a batch \ntokenized = df['text'].apply((lambda x: tokenizer.encode(x, add_special_tokens=True)))","28728def":"max_len = 0\nfor i in tokenized.values:\n    if len(i) > max_len:\n        max_len = len(i)\n\npadded = np.array([i + [0]*(max_len-len(i)) for i in tokenized.values])","71ef3b22":"np.array(padded).shape","a20eb877":"attention_mask = np.where(padded != 0, 1, 0)\nattention_mask.shape","39dc71fe":"#The `model()` function runs our sentences through BERT. The results of the processing will be returned into `last_hidden_states`.\ninput_ids = torch.tensor(padded)  \nattention_mask = torch.tensor(attention_mask)\n\nwith torch.no_grad():\n    last_hidden_states = model(input_ids, attention_mask=attention_mask)","ba1cb774":"features = last_hidden_states[0][:,0,:].numpy()\nfeatures[0].shape\n\n","49c1b65f":"labels = df['target']","182c277a":"train_features, test_features, train_labels, test_labels = train_test_split(features, labels)","2659ed45":"import sklearn\nfrom sklearn.model_selection import GridSearchCV\nparameters = {'C': np.linspace(0.0001, 100, 20)}\ngrid_search = GridSearchCV(LogisticRegression(), parameters)\ngrid_search.fit(train_features, train_labels)\nprint('best parameters: ', grid_search.best_params_)\nprint('best scrores: ', grid_search.best_score_)","9b668492":"lr_clf = LogisticRegression(C = 31.579015789473683)\n","30aa1dc5":"lr_clf.fit(train_features, train_labels)","8455928d":"lr_clf.score(test_features, test_labels)","9387023d":"from sklearn.dummy import DummyClassifier\nclf = DummyClassifier()\n\nscores = cross_val_score(clf, train_features, train_labels)\nprint(\"Dummy classifier score: %0.3f (+\/- %0.2f)\" % (scores.mean(), scores.std() * 2))","2b8e8916":"tokenized_t = df_test['text'].apply((lambda x: tokenizer.encode(x, add_special_tokens=True)))","231602c9":"max_len = 0\nfor i in tokenized_t.values:\n    if len(i) > max_len:\n        max_len = len(i)","51c5f1d2":"padded_t = np.array([i + [0]*(max_len-len(i)) for i in tokenized_t.values])\nnp.array(padded_t).shape","081b7a5c":"attention_mask_t = np.where(padded_t != 0, 1, 0)","ebaf6cb7":"input_ids = torch.tensor(padded_t)  \ninput_ids","53670ed5":"attention_mask_t = torch.tensor(attention_mask_t)\n\nwith torch.no_grad():\n    last_hidden_states = model(input_ids, attention_mask=attention_mask_t)","9cce927b":"val_features = last_hidden_states[0][:,0,:].numpy() ","16429506":"y_pred = lr_clf.predict(val_features)\ny_pred","1c5aca72":"# Create submission file\nsubmission = pd.DataFrame()\nsubmission['id'] = df_test['id']\nsubmission['target'] = y_pred\nsubmission.to_csv('submission.csv', index=False)","e1b51fd1":"Clean the data : \nBERT can handle punctuation, smileys etc. Of course, smileys contribute a lot to sentiment analysis. So, don't remove them. Next, it would be fair to replace @mentions and links with some special tokens, because the model will probably never see them again in the future.\nIt is advisable to  fine-tune BERT with additional corpus, and after fine-tune with Twitter corpus. Or do it simultaneously. More training samples is generally better.\n","4ca0b9eb":"Finally, we need to pad our input so it will have the same size of 512. It means that for any review that is shorter than 512 tokens, we\u2019ll add zeros to reach 512 tokens.\n\nOur target variable is currently a list of 1 and 0 strings. We\u2019ll convert it to numpy arrays of booleans.","fb519584":"What is BERT?\nBERT is an open-source library created in 2018 at Google. It's a new technique for NLP and it takes a completely different approach to training models than any other technique.\n\nBERT is an acronym for Bidirectional Encoder Representations from Transformers. That means unlike most techniques that analyze sentences from left-to-right or right-to-left, BERT goes both directions using the Transformer encoder. Its goal is to generate a language model.\n\nThis gives it incredible accuracy and performance on smaller data sets which solves a huge problem in natural language processing.\n\nWhile there is a huge amount of text-based data available, very little of it has been labeled to use for training a machine learning model. Since most of the approaches to NLP problems take advantage of deep learning, you need large amounts of data to train with.\n\nYou really see the huge improvements in a model when it has been trained with millions of data points. To help get around this problem of not having enough labelled data, researchers came up with ways to train general purpose language representation models through pre-training using text from around the internet.\n\nThese pre-trained representation models can then be fine-tuned to work on specific data sets that are smaller than those commonly used in deep learning. These smaller data sets can be for problems like sentiment analysis or spam detection. This is the way most NLP problems are approached because it gives more accurate results than starting with the smaller data set.\n\nThat's why BERT is such a big discovery. It provides a way to more accurately pre-train your models with less data. The bidirectional approach it uses means it gets more of the context for a word than if it were just training in one direction. With this additional context, it is able to take advantage of another technique called masked LM.","3111c401":"we need to tokenize our texts. BERT was trained using the WordPiece tokenization. It means that a word can be broken down into more than one sub-words. For example, if I tokenize the sentence \u201cHi, my name is Dima\u201d I\u2019ll get:\ntokenizer.tokenize('Hi my name is Dima')\n# OUTPUT\n['hi', 'my', 'name', 'is', 'dim', '##a']","79b50439":"This kind of tokenization is beneficial when dealing with out of vocabulary words, and it may help better represent complicated words. The sub-words are constructed during the training time and depend on the corpus the model was trained on. We could use any other tokenization technique of course, but we\u2019ll get the best results if we tokenize with the same tokenizer the BERT model was trained on. ","9ebc524a":"The code below creates the tokenizer, tokenizes each review, adds the special [CLS] token, and then takes only the first 512 tokens for both train and test sets.\n\n\nNext, we need to convert each token in each review to an id as present in the tokenizer vocabulary. If there\u2019s a token that is not present in the vocabulary, the tokenizer will use the special [UNK] token and use its id."}}