{"cell_type":{"556dd238":"code","29e6e669":"code","793bceb0":"code","ff5000f0":"code","6ec3ed8d":"code","efc0fb4e":"code","b3759f46":"code","3c8637ac":"code","445551a8":"code","da517a9b":"code","d9156113":"code","93e11d4d":"code","7a14bdc0":"code","8604ee60":"code","187ddf56":"code","6a8836bc":"code","e171b364":"code","947b3f37":"code","2ccd8368":"code","c327965e":"code","ffaa4583":"code","8f1e2b8f":"code","b37fca93":"markdown","24c1d784":"markdown","54174807":"markdown","bb17b2e6":"markdown","56c9db6c":"markdown","44c8f68f":"markdown","cc68f6f9":"markdown","b421569a":"markdown","c0f8ff8f":"markdown","a6ee7094":"markdown","5fd67a52":"markdown","c2aa8cf6":"markdown","1a8acde0":"markdown","5b14fb03":"markdown","5a4b60d3":"markdown","d2878f2a":"markdown","3815b83f":"markdown","1e2fec20":"markdown","dfecf12b":"markdown","9dc4064f":"markdown","8b644e9b":"markdown"},"source":{"556dd238":"import csv\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split   \nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB","29e6e669":"train = pd.read_csv('..\/input\/train.tsv', sep='\\t')\ntest = pd.read_csv('..\/input\/test.tsv',  sep='\\t')\nsampleSub = pd.read_csv('..\/input\/sampleSubmission.csv')","793bceb0":"print(train.shape, \"\\n\", \n      test.shape\n     )","ff5000f0":"print (train.isnull().values.any(), \"\\n\",\n      test.isnull().values.any()\n      )","6ec3ed8d":"train.head()","efc0fb4e":"test.head()","b3759f46":"len(train.groupby('SentenceId').nunique())","3c8637ac":"len(test.groupby('SentenceId').nunique())","445551a8":"#Create df of full sentences\nfullSent = train.loc[train.groupby('SentenceId')['PhraseId'].idxmin()]\n\n#Change sentiment to increase readability\nfullSent['sentiment_label'] = ''\nSentiment_Label = ['Negative', 'Somewhat Negative', \n                  'Neutral', 'Somewhat Positive', 'Positive']\nfor sent, label in enumerate(Sentiment_Label):\n    fullSent.loc[train.Sentiment == sent, 'sentiment_label'] = label\n    \nfullSent.head()","da517a9b":"#Add non-helpful stopwords to stopword list\nStopwords = list(ENGLISH_STOP_WORDS)\nStopwords.extend(['movie','movies','film','nt','rrb','lrb',\n                      'make','work','like','story','time','little'])\n\n#Create tfidf vectorizer object & fit to full sentence training data\ntfidf_vectorizor = TfidfVectorizer(min_df=5, \n                             max_df=0.5,\n                             analyzer='word',\n                             strip_accents='unicode',\n                             ngram_range=(1, 3),\n                             sublinear_tf=True, \n                             smooth_idf=True,\n                             use_idf=True,\n                             stop_words=Stopwords)\n\ntfidf_vectorizor.fit(list(fullSent['Phrase']))\n\n\n#Create bag of word vectorizer for comparison in evaluation section\nBoW_vectorizer = CountVectorizer(strip_accents='unicode',\n                                 stop_words=Stopwords,\n                                 ngram_range=(1,3),\n                                 analyzer='word',\n                                 min_df=5,\n                                 max_df=0.5)\n\nBoW_vectorizer.fit(list(fullSent['Phrase']))","d9156113":"#functions to create graphics below from tf-idf matrices\n#adapted from : https:\/\/buhrmann.github.io\/tfidf-analysis.html\ndef top_tfidf_feats(row, features, top_n=20):\n    topn_ids = np.argsort(row)[::-1][:top_n]\n    top_feats = [(features[i], row[i]) for i in topn_ids]\n    df = pd.DataFrame(top_feats)\n    df.columns = ['feature', 'tfidf']\n    return df\n\ndef top_feats_in_doc(Xtr, features, row_id, top_n=20):\n    row = np.squeeze(Xtr[row_id].toarray())\n    return top_tfidf_feats(row, features, top_n)\n\ndef top_mean_feats(Xtr, features, grp_ids=None, min_tfidf=0.1, top_n=10):\n    if grp_ids:\n        D = Xtr[grp_ids].toarray()\n    else:\n        D = Xtr.toarray()\n\n    D[D < min_tfidf] = 0\n    tfidf_means = np.mean(D, axis=0)\n    return top_tfidf_feats(tfidf_means, features, top_n)\n\ndef top_feats_by_class(Xtr, y, features, min_tfidf=0.1, top_n=16):\n    dfs = []\n    labels = np.unique(y)\n    for label in labels:\n        ids = np.where(y==label)\n        feats_df = top_mean_feats(Xtr, features, ids, min_tfidf=min_tfidf, top_n=top_n)\n        feats_df.label = label\n        dfs.append(feats_df)\n    return dfs\n\ndef plot_tfidf_classfeats_h(dfs, num_class=9):\n    fig = plt.figure(figsize=(12, 100), facecolor=\"w\")\n    x = np.arange(len(dfs[0]))\n    for i, df in enumerate(dfs):\n        ax = fig.add_subplot(num_class, 1, i+1)\n        ax.spines[\"top\"].set_visible(False)\n        ax.spines[\"right\"].set_visible(False)\n        ax.set_frame_on(False)\n        ax.get_xaxis().tick_bottom()\n        ax.get_yaxis().tick_left()\n        ax.set_xlabel(\"Mean Tf-Idf Score\", labelpad=16, fontsize=16)\n        ax.set_ylabel(\"Word\", labelpad=16, fontsize=16)\n        ax.set_title(str(df.label) + ' Sentiment Class', fontsize=25)\n        ax.ticklabel_format(axis='x', style='sci', scilimits=(-2,2))\n        ax.barh(x, df.tfidf, align='center')\n        ax.set_yticks(x)\n        ax.set_ylim([-1, x[-1]+1])\n        ax.invert_yaxis()\n        yticks = ax.set_yticklabels(df.feature)\n        \n        for tick in ax.yaxis.get_major_ticks():\n                tick.label.set_fontsize(20) \n        plt.subplots_adjust(bottom=0.09, right=0.97, left=0.15, top=0.95, wspace=0.52)\n    plt.show()\n","93e11d4d":"class_Xtr = tfidf_vectorizor.transform(fullSent['Phrase'])\nclass_y = fullSent['sentiment_label']\nclass_features = tfidf_vectorizor.get_feature_names()\nclass_top_dfs = top_feats_by_class(class_Xtr, class_y, class_features)\nplot_tfidf_classfeats_h(class_top_dfs, 7)","7a14bdc0":"phrase = np.array(train['Phrase'])\nsentiment = np.array(train['Sentiment'])\n# build train and test datasets\nphrase_train, phrase_test, sentiment_train, sentiment_test = train_test_split(phrase, \n                                                                              sentiment, \n                                                                              test_size=0.2, \n                                                                              random_state=4)\n\n#TF-IDF\ntrain_tfidfmatrix = tfidf_vectorizor.fit_transform(phrase_train)\ntest_tfidfmatrix = tfidf_vectorizor.transform(phrase_test)\n\n#Vectorizer (Bag of Words Model)\ntrain_simplevector = BoW_vectorizer.transform(phrase_train)\ntest_simplevector = BoW_vectorizer.transform(phrase_test)","8604ee60":"def train_model_predict (classifier, train_features, train_labels,\n                      test_features):\n    classifier.fit(train_features, train_labels)\n    predictions = classifier.predict(test_features)\n    return predictions","187ddf56":"model1 = MultinomialNB() \nNBPredictions = train_model_predict(model1, train_tfidfmatrix, sentiment_train,\n                             test_tfidfmatrix)","6a8836bc":"NBPredictions2 = train_model_predict(model1, train_simplevector, sentiment_train,\n                             test_simplevector)","e171b364":"model2 = LogisticRegression(solver = 'liblinear', multi_class = 'ovr')\nLogisticRegressionPredictions = train_model_predict(model2, train_tfidfmatrix, sentiment_train,\n                             test_tfidfmatrix)","947b3f37":"LogisticRegressionPredictions2 = train_model_predict(model2, train_simplevector, sentiment_train,\n                             test_simplevector)","2ccd8368":"def get_metrics(true_labels, predicted_labels, feature):  \n    print(feature)\n    print('Accuracy:', np.round(metrics.accuracy_score(true_labels, \n                                               predicted_labels), 4))\n    print('Precision:', np.round(metrics.precision_score(true_labels, \n                                               predicted_labels,\n                                               average='weighted'), 4))\n    print('Recall:', np.round(metrics.recall_score(true_labels, \n                                               predicted_labels,\n                                               average='weighted'), 4))\n    print('F1 Score:', np.round(metrics.f1_score(true_labels, \n                                               predicted_labels,\n                                               average='weighted'), 4))\n    print('\\n')\n    ","c327965e":"get_metrics(NBPredictions, sentiment_test, 'Naive Bayes & TF-IDF Scores: ')\nget_metrics(NBPredictions2, sentiment_test, 'Naive Bayes & Bag of Words Scores: ')","ffaa4583":"get_metrics(LogisticRegressionPredictions, sentiment_test, 'Logistic Regression & TF-IDF Scores: ')\nget_metrics(LogisticRegressionPredictions2, sentiment_test, 'Logistic Regression & Bag of Words Scores: ')","8f1e2b8f":"train_tfidf = tfidf_vectorizor.fit_transform(train['Phrase'])\nmodel2.fit(train_tfidf, train['Sentiment'])\ntest_tfidf = tfidf_vectorizor.transform(test['Phrase'])\npredictions = model2.predict(test_tfidf)\n\ntest['Sentiment'] = predictions\nsubmission = test[['PhraseId','Sentiment']]\nsubmission.to_csv('submission.csv',index=False)","b37fca93":"Since we don't care about certain types of scoring over others (ie weighing mislabeling more than correctly labeling), we'll use F1 scores as shorthand for how good the model is.","24c1d784":"## Part 4 : Evaluation","54174807":"## Step 1: Reading SA data","bb17b2e6":"# Rotton Tomatoes Movie Review Sentiment Analysis\n### How useful is TF-IDF weighing in sentiment analysis?\n\nThis kernel works with data from the Movie Review Sentiment Analysis Competition on Kaggle.com. More info can be found at https:\/\/nlp.stanford.edu\/sentiment\/.\n\nIn the report created by the Stanford research group, each sentence is seperated into it's component pieces and given a positive\/negative scoring. This is summed up as a word tree to give each sentence an overall sentiment.\n<img src=\"Capture.png\">\n*Image taken from nlp.stanford.edu*\n\nThe objective of this kernel is to explore using tf-idf weighting factors to assist traditional classifier models. Then we will compare these models to simple 'bag of words' text analysis options. Is TF-IDF underutilized in sentiment analysis?","56c9db6c":"### Logistic Regression Model","44c8f68f":"### Table of F1 scores of different modelling methods\n\n|            |NaiveBayes|LogReg|\n|------------|----------|------|\n|   TF-IDF   | 0.6577   |0.6615|\n|Bag of Words| 0.6386   |0.6485|","cc68f6f9":"## Part 3: Sentiment Analysis using Machine Learning Models","b421569a":"## Part 5: Conclusion","c0f8ff8f":"## NLP Analysis\n\nIn natural language processing, the gold standard of text analysis is TF-IDF analysis. TF-IDF is short for \"term frequency\u2013inverse document frequency\", and it focus on finding the 'valuable' classification words for each document. Term frequency of a word in a document increases it's score, and document frequency (the number of documents where the word shows up) decreases the score.\n\nScikit-learn provides a TfidfVectorizer class, which has the ability to remove common stop words (like a, the, and, or). I also created a CountVectorizer class object for comparison in the evaluation section below. Below we'll try to find the most 'valuable words' for each sentiment group. ","a6ee7094":"### Naive Bayes Model","5fd67a52":"#### 'Bag of Words' vectorization","c2aa8cf6":"#### Application to competition test set","1a8acde0":"The graphs below shows the words with the highest tf-idf score in each class. The matplotlib code is adapted from https:\/\/buhrmann.github.io\/tfidf-analysis.html, a great analysis of what tf-idf scores can show you about a set of documents in a corpus. Note we use the full sentence dataset created above.","5b14fb03":"## Step 2: Analysing data\n\n### Dataframe analysis","5a4b60d3":"Number of unique sentences in the training \/ testing dataset","d2878f2a":"#### 'Bag of Words' vectorization","3815b83f":"#### TF-IDF vectorization","1e2fec20":"### Train\/Test Splitting","dfecf12b":"TF-IDF weighing does have a positive effect on the correctness of the model. The difference between a bag-of-words weighing schema and TF-IDF schema is slight but consistent between both classifiers.\n\nWe could also run a GridSearch to find the most correct parameters for each model, though we run the risk of overfitting for the Kaggle test data. Future testing can be done on different models and more or less optimizeed ones - including nerual networks.\n\nReferences and sources used:\n\nhttps:\/\/buhrmann.github.io\/tfidf-analysis.html\nhttp:\/\/scikit-learn.org\/stable\/modules\/feature_extraction.html#text-feature-extraction\nhttps:\/\/www.dataquest.io\/blog\/naive-bayes-tutorial\/","9dc4064f":"#### TF-IDF vectorization","8b644e9b":"Let's create a dataset with only full sentences. Exploring data this way will gives us cleaner graphs that aren't biased toward longer sentences. We can also add a label for the sentiment value to increased readability."}}