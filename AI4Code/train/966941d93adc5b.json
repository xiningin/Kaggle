{"cell_type":{"ee7f8ef4":"code","eb20ce60":"code","6d23cd5c":"code","78a10b0d":"code","83222132":"code","857861a2":"code","285c718d":"code","f019cb5b":"code","1a6c5f61":"code","9fee0359":"code","ee301544":"code","a4e36dd9":"code","b0efe38f":"code","e11dee6b":"code","fd7de0c8":"code","ce07de40":"code","edcc6b4a":"code","4feb9298":"code","04ee8ce9":"code","452d11fb":"code","5d0a5c50":"code","11f8b723":"code","7688999e":"code","90abbcd8":"code","c8252a03":"code","9b5b413f":"code","c400291d":"code","10e6fb9a":"code","1820d1f6":"code","8c1bcbf3":"code","3b84e17f":"code","6ad6375b":"markdown","63babf4a":"markdown","bd86d3fa":"markdown","6064d50d":"markdown","eff69efa":"markdown","94471507":"markdown","86918897":"markdown","0529d197":"markdown","c0d5c8de":"markdown","c3923084":"markdown","1b19df26":"markdown","00ddc69c":"markdown","9386944f":"markdown","58d4354d":"markdown","2a155a6b":"markdown","33d7f149":"markdown","77d426c2":"markdown","c6ad2be8":"markdown","05793901":"markdown","85ff24e2":"markdown","c0a103d8":"markdown","6705cfd6":"markdown","fd3db812":"markdown","f0978516":"markdown","54eebd45":"markdown"},"source":{"ee7f8ef4":"import pandas as pd","eb20ce60":"diamonds = pd.read_csv('..\/input\/whitebox-in-company-training\/diamonds_train.csv')\ndiamonds_predict = pd.read_csv('..\/input\/whitebox-in-company-training\/diamonds_test.csv')","6d23cd5c":"diamonds.head().T","78a10b0d":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder","83222132":"NUM_FEATS = ['carat', 'depth', 'table', 'x', 'y', 'z']\nCAT_FEATS = ['cut', 'color', 'clarity']\nFEATS = NUM_FEATS + CAT_FEATS\nTARGET = 'price'","857861a2":"numeric_transformer = \\\nPipeline(steps=[('imputer', SimpleImputer(strategy='median')), \n                ('scaler', StandardScaler())])","285c718d":"categorical_transformer = \\\nPipeline(steps=[('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n                ('onehot', OneHotEncoder(handle_unknown='ignore'))])","f019cb5b":"preprocessor = \\\nColumnTransformer(transformers=[('num', numeric_transformer, NUM_FEATS),\n                                ('cat', categorical_transformer, CAT_FEATS)])","1a6c5f61":"preprocessor","9fee0359":"pd.DataFrame(data=preprocessor.fit_transform(diamonds)).head()","ee301544":"from sklearn.model_selection import train_test_split","a4e36dd9":"diamonds_train, diamonds_test = train_test_split(diamonds)","b0efe38f":"print(diamonds_train.shape)\nprint(diamonds_test.shape)","e11dee6b":"from sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel= Pipeline(steps=[('preprocessor', preprocessor),\n                       ('regressor', RandomForestRegressor())])","fd7de0c8":"model.fit(diamonds_train[FEATS], diamonds_train[TARGET]);","ce07de40":"from sklearn.metrics import mean_squared_error","edcc6b4a":"y_test = model.predict(diamonds_test[FEATS])\ny_train = model.predict(diamonds_train[FEATS])","4feb9298":"print(f\"test error: {mean_squared_error(y_pred=y_test, y_true=diamonds_test[TARGET], squared=False)}\")\nprint(f\"train error: {mean_squared_error(y_pred=y_train, y_true=diamonds_train[TARGET], squared=False)}\")","04ee8ce9":"from sklearn.model_selection import cross_val_score","452d11fb":"scores = cross_val_score(model, \n                         diamonds[FEATS], \n                         diamonds[TARGET], \n                         scoring='neg_root_mean_squared_error', \n                         cv=5, n_jobs=-1)","5d0a5c50":"import numpy as np\nnp.mean(-scores)","11f8b723":"from sklearn.model_selection import RandomizedSearchCV","7688999e":"param_grid = {\n    'preprocessor__num__imputer__strategy': ['mean', 'median'],\n    'regressor__n_estimators': [16, 32, 64, 128, 256, 512],\n    'regressor__max_depth': [2, 4, 8, 16],\n}\n\ngrid_search = RandomizedSearchCV(model, \n                                 param_grid, \n                                 cv=5, \n                                 verbose=10, \n                                 scoring='neg_root_mean_squared_error', \n                                 n_jobs=-1,\n                                 n_iter=32)\n\ngrid_search.fit(diamonds[FEATS], diamonds[TARGET])","90abbcd8":"grid_search.best_params_","c8252a03":"grid_search.best_score_","9b5b413f":"y_pred = grid_search.predict(diamonds_predict[FEATS])","c400291d":"submission_df = pd.DataFrame({'id': diamonds_predict['id'], 'price': y_pred})","10e6fb9a":"submission_df.head()","1820d1f6":"submission_df.describe()","8c1bcbf3":"submission_df.price.clip(0, 20000, inplace=True)","3b84e17f":"submission_df.to_csv('diamonds_rf.csv', index=False)","6ad6375b":"* diamonds: labeled data we can use for training and testing\n* diamonds_predict: diamonds to predict its price and upload result to Kaggle","63babf4a":"in this section I will teach how to use scikit-learn's Pipiline and ColumnTransformer, one of the best practices for composing preprocessing and modeling in a single and elegand class... pay attention as it is hard to understand...","bd86d3fa":"at least in this case, it is at the cost of interpretability of transformed DataFrame...","6064d50d":"this section is up to you! this guided lesson is about a machine learning pipeline...","eff69efa":"first, lets train a simple model using holdout, train - test split...","94471507":"let's define a preprocessing transformer for numerical columns...","86918897":"## 8. prepare submission","0529d197":"## 6. check model performance using cross validation","c0d5c8de":"inspecting the full preprocessor:","c3923084":"let's join these transformers using a `ColumnTransformer`:","1b19df26":"## 0. python imports & setup","00ddc69c":"## 5. check model performance on test and train data","9386944f":"* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.pipeline.Pipeline.html\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.StandardScaler.html\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OneHotEncoder.html","58d4354d":"## 2. eda","2a155a6b":"how does this preprocessing looks like?","33d7f149":"let's define a preprocessing transformer for categorical columns...","77d426c2":"## 4. train a simple model","c6ad2be8":"## 7. optimize model using grid search","05793901":"let's choose a model from scikit-learn cheatsheet: https:\/\/scikit-learn.org\/stable\/tutorial\/machine_learning_map\/index.html","85ff24e2":"## 3. ml preprocessing","c0a103d8":"## 1. data loading","6705cfd6":"for learning purposes, libraries will be imported inside its corresponding usage section...","fd3db812":"## 9. let's try more models...","f0978516":"as you can see, there are both categorical and numerical columns...","54eebd45":"let's identify numerical and categorical features..."}}