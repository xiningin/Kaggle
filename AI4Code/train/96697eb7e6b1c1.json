{"cell_type":{"045175c2":"code","2b9db074":"code","557d6eb0":"code","0360386a":"code","7ecfbda6":"code","06b7b72d":"code","17ff87e0":"code","5cc98e10":"code","87b4b2b3":"code","20d06e9e":"code","b00dfd39":"code","d6754320":"code","9219e03c":"code","b49d8dae":"code","24646916":"code","c7b9fd56":"code","e1ee1ff4":"code","f947f7e6":"code","58d5c372":"code","ba7cae81":"code","7ca5925d":"code","fc7bd687":"code","3652be71":"code","eab94391":"code","e926311b":"code","91914dc8":"markdown","9fadef9c":"markdown","ea10e8f3":"markdown","5bab179a":"markdown","91613bb3":"markdown","a57470d1":"markdown","ee2f659b":"markdown","a64f3653":"markdown","a21657e6":"markdown","0386a745":"markdown","7c8c4a69":"markdown","aea550ef":"markdown"},"source":{"045175c2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\npd.set_option('display.max_columns', None)\nimport os\nprint(os.listdir(\"..\/input\"))","2b9db074":"train = pd.read_csv('..\/input\/train.csv',index_col = 'Id')\ntest = pd.read_csv('..\/input\/test.csv',index_col = 'Id')","557d6eb0":"train.info()","0360386a":"train.head()","7ecfbda6":"train.price= np.log1p(train[\"price\"])#mengubah skala price untuk mempermudah modelling","06b7b72d":"numerical_cols = [cname for cname in train.columns if \n                train[cname].dtype in ['int64', 'float64']]\nplt.style.use('seaborn-whitegrid')\nfig, axarr = plt.subplots(7, 3, figsize=(12, 21))\nfor i in range(len(numerical_cols)):\n    sns.distplot(train[~train[numerical_cols[i]].isnull()][numerical_cols[i]],ax=axarr[int(i\/3)][i%3])\n","17ff87e0":"fig, axarr = plt.subplots(7, 3, figsize=(12, 21))\nfor i in range(len(numerical_cols)):\n    sns.regplot(x=numerical_cols[i],y='price',data=train,ax=axarr[int(i\/3)][i%3])\n","5cc98e10":"train = train[~((train.bathrooms>6)& (train.price<14))]","87b4b2b3":"train_corr = train.copy()\ncorrmat = train_corr.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(25,25))\n#plot heat map\ng=sns.heatmap(train_corr[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")\ng","20d06e9e":"corrmat = train_corr.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"price\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train_corr[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","b00dfd39":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.price.values\nall_data = pd.concat((train, test))\nall_data.drop(['price'], axis=1, inplace=True)\nall_data.shape\n#train dan test disatukan sementara untuk diolah lebih lanjut","d6754320":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","9219e03c":"#mengubah kolom zipcode menjadi categorical\nall_data['zipcode'] = all_data['zipcode'].apply(str)","b49d8dae":"#membuat kolom baru dari kolom date\nall_data['YrSold'] =all_data['date'].apply(lambda s:int(s[:4]))\nall_data['MonthSold'] =all_data['date'].apply(lambda s:(s[4:6]))\nall_data['DaySold'] =all_data['date'].apply(lambda s:int(s[6:8]))\nall_data.drop(['date'], axis=1, inplace=True)\n#membuat kolom jumlah ruangan\nall_data['rooms'] = all_data['bedrooms']+all_data['bathrooms']\nall_data.head()","24646916":"from scipy.stats import skew\nnumerical_cols = [cname for cname in all_data.columns if \n                all_data[cname].dtype in ['int64', 'float64']]\nskewness = all_data[numerical_cols].apply(lambda x: skew(x))\nskewness = skewness[abs(skewness) > 0.9]\nprint(str(skewness.shape[0]) + \" skewed numerical features to log transform\")\nskewed_features = list(skewness.index)\nall_data[skewed_features] = np.log1p(all_data[skewed_features])","c7b9fd56":"Dummies_all_data = pd.get_dummies(all_data)","e1ee1ff4":"#data dipisah kembali jadi train sama test\nX_train = Dummies_all_data[:ntrain]\nX_test = Dummies_all_data[ntrain:]","f947f7e6":"from sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nimport lightgbm as lgb\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom xgboost import XGBRegressor\n\nn_folds=5\ndef rmsle_cv(model):\n    rmsle= np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv = 5))\n    print(\"\\nscore rmsle: {:.4f} ({:.4f})\\n\".format(rmsle.mean(), rmsle.std()))\n    return(rmsle)\n","58d5c372":"model_xgb = XGBRegressor(colsample_bytree=1, gamma=0.0468, \n                             learning_rate=0.053, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                              subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nscore_xgb = rmsle_cv(model_xgb)\n#0.1878 (0.0041)","ba7cae81":"model_LGB = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nscore_LGB = rmsle_cv(model_LGB)","7ca5925d":"model_GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nscore_GBoost = rmsle_cv(model_GBoost)","fc7bd687":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nscore_ENet = rmsle_cv(ENet)","3652be71":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nscore_lasso = rmsle_cv(lasso)","eab94391":"model_GBoost.fit(X_train,y_train)\nmodel_xgb.fit(X_train,y_train)\nmodel_LGB.fit(X_train,y_train)\nlasso.fit(X_train,y_train)\nENet.fit(X_train,y_train)\nlasso.fit(X_train,y_train)\npreds_test = np.expm1( model_xgb.predict(X_test)*0.50 + (\n    model_LGB.predict(X_test)*0.10+ model_GBoost.predict(X_test)*0.30) + (\nlasso.predict(X_test)*0.05+ENet.predict(X_test)*0.05))\n#bobot didapat berdasarkan nilai cross validation tiap model (coba - coba)\noutput = pd.DataFrame({'Id': X_test.index,\n                       'price': preds_test})\noutput.to_csv('submission.csv', index=False)","e926311b":"output","91914dc8":"**OUTLIER**","9fadef9c":"**Averaging Model**","ea10e8f3":"**HEATMAP**","5bab179a":"**MISSING DATA**","91613bb3":"**BIVARIATE ANALYSIS**","a57470d1":"**Transformasi Feature**: fitur dibikin terdistribusi normal","ee2f659b":"**Modelling**","a64f3653":"**UNIVARIATE ANALYSIS**","a21657e6":"**Log-transformation dari price**","0386a745":"**FEATURE ENGINNERING**","7c8c4a69":"**Convert kolom categorical ke numerical **","aea550ef":"**EDA**"}}