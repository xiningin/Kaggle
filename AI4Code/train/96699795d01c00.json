{"cell_type":{"896c0d48":"code","f7913a5e":"code","d9567e38":"code","af66c99a":"code","0857a4dc":"code","e80fe801":"code","6cf03c5f":"code","d77ce1f0":"code","8359d51e":"code","8e964825":"code","8cd9d1d7":"code","9028f22f":"code","994ee9c3":"code","d4448c94":"code","87c3b0cd":"code","d84220b4":"code","487a5729":"code","1a172022":"code","b27bed9e":"code","04b39f03":"code","ab3f5653":"code","c60e7229":"code","741bc1da":"code","d11884e6":"code","a5f64483":"code","1d4a21e1":"code","ce472bf5":"code","bd52257f":"code","a0248215":"code","37e975cb":"code","f6856d0e":"code","548b08c8":"code","855dfead":"code","afbd4202":"code","bfa53ad4":"code","d77c2aa1":"code","45a645aa":"code","f1c3bba6":"code","cc69d6be":"code","4f08a7ff":"code","0490e45d":"code","a657f739":"code","d8f4fbf0":"code","e035e60b":"code","21c60c71":"code","2c8265ea":"code","19d08c88":"code","7e6c951e":"code","4310e11b":"code","a97add61":"code","cb7fb216":"code","58113814":"code","c56121d9":"code","47db451f":"code","0bfcaa8b":"code","002ebead":"code","410353df":"code","ea1fbd3a":"code","25077b7c":"code","30bfa0c4":"code","89e4e414":"code","6452068a":"code","e0935ba4":"code","c6f89006":"code","6f5eacd3":"code","26292bcc":"code","bcd02813":"code","810fd10a":"code","97e34055":"code","757ffecd":"code","0ac41085":"code","f331a765":"code","a655fc2e":"code","18343ccc":"markdown","942afe0a":"markdown","52db9d75":"markdown","bd1f9b47":"markdown","fd148146":"markdown","d3aaed1c":"markdown","02410867":"markdown","599adb66":"markdown","33625904":"markdown","9ec52c74":"markdown","336c3c00":"markdown","28ae493c":"markdown","d215a763":"markdown","ddf4bb72":"markdown","5a2bd072":"markdown","7edec9e7":"markdown","3cbde78a":"markdown","6df6d7d2":"markdown","4845e40e":"markdown"},"source":{"896c0d48":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt  # data viz\nimport seaborn as sns  # data viz\n%matplotlib inline\n\n# ML \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score, confusion_matrix, f1_score,classification_report\n\n# OS\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f7913a5e":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","d9567e38":"train_df.head()","af66c99a":"train_df.info()","0857a4dc":"round(train_df.describe(), 2)","e80fe801":"train_df.corr()","6cf03c5f":"train_df.isnull().sum()","d77ce1f0":"# the percantage of nulls in Age column\n177 \/ 891","8359d51e":"train_df.Age.hist()\nplt.title(\"the freq of Age\", fontsize=15)\nplt.xlabel(\"the age\", fontsize=15)\nplt.ylabel(\"the count\", fontsize=15)\nplt.show()","8e964825":"# the percantage of nulls in Cabin column\n687 \/ 891","8cd9d1d7":"train_df.Cabin.describe()","9028f22f":"train_df.Cabin.head(4)","994ee9c3":"train_df.fillna(method=\"ffill\", inplace=True)","d4448c94":"train_df.Age.hist();\n# the freq of Age still the same","87c3b0cd":"train_df.info()","d84220b4":"# fill the remaining cell in Cabin\ntrain_df.Cabin.fillna(train_df.Cabin.mode, inplace=True)","487a5729":"# the number of Passengers(check duplicates)\ntrain_df.PassengerId.nunique()","1a172022":"# Survived percentage\nplt.figure(figsize=(10,8))\ntrain_df.groupby('Survived')['Survived'].count().plot(kind='pie', labels=['Dead','Survived'], autopct='%1.1f%%')\nplt.title(\"the percentage of Survived column\")\nplt.show()","b27bed9e":"sns.catplot(data=train_df, kind=\"count\", x=\"Survived\", hue=\"Sex\")\nplt.title(\"the count of survived and not ones according to sex\")\nplt.show()","04b39f03":"# check the Pclass\nplt.figure(figsize=(10,8))\ntrain_df.Pclass.value_counts().plot(kind='pie', labels=['3','1','2'], autopct='%1.1f%%')\nplt.title(\"the percentage of passenger classes\")\nplt.show()","ab3f5653":"sns.catplot(data=train_df, kind=\"count\", x=\"Pclass\", hue=\"Survived\")\nplt.title(\"the count of classes according to Surviving\")\nplt.show()","c60e7229":"# Number of siblings \/ spouses aboard the Titanic\nplt.figure(figsize=(6,7))\ntrain_df['SibSp'].value_counts().plot(kind='bar')\nplt.title(\"the freq of siblings\", fontsize=15)\nplt.xlabel(\"the # of siblings\", fontsize=13)\nplt.ylabel(\"the count\", fontsize=15)\nplt.show()","741bc1da":"train_df.Fare.hist(figsize=(10,8))\nplt.title(\"the freq of passengers fare\")\nplt.show()","d11884e6":"plt.scatter(x=train_df.Fare, y= train_df.Survived)\nplt.show()","a5f64483":"plt.figure(figsize=(10,8))\ntrain_df.Embarked.value_counts().plot(kind='pie', labels=[\"Southampton\", \"Cherbourg\", \"Queenstown\"], autopct='%1.1f%%')\nplt.title(\"The Percentage Of Port Of Embarkation\", fontsize=15)\nplt.show()","1d4a21e1":"sns.catplot(data=train_df, kind=\"count\", x=\"Embarked\", hue=\"Survived\")\nplt.title(\"the count of Embarkation according to Surviving\")\nplt.show()","ce472bf5":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","bd52257f":"train_df.info()","a0248215":"train_df.fillna(method=\"ffill\", inplace=True)","37e975cb":"# fill the remaining cell in Cabin\ntrain_df.Cabin.fillna(train_df.Cabin.mode, inplace=True)","f6856d0e":"train_df.info()","548b08c8":"train_df.drop(['Name','PassengerId', 'Cabin'], axis=1, inplace=True)","855dfead":"# Label Encoding \nfrom sklearn.preprocessing import LabelEncoder","afbd4202":"train_df.head(2)","bfa53ad4":"# columns = train_df.columns\n# dummies_columns = []\n\n# for column in columns:\n#     if train_df[column].dtype == 'O':\n#         dummies_columns.append(column)","d77c2aa1":"# dummies_columns","45a645aa":"# def label_encoding(columns,df):\n#     for i in range(len(columns)):\n#         le = LabelEncoder()\n#         column = columns[i]\n#         df[column] = le.fit_transform(df[column])","f1c3bba6":"# label_encoding(dummies_columns,train_df)","cc69d6be":"le = LabelEncoder()","4f08a7ff":"train_df.Sex = le.fit_transform(train_df.Sex)","0490e45d":"train_df.Ticket = le.fit_transform(train_df.Ticket)","a657f739":"train_df.Embarked = le.fit_transform(train_df.Embarked)","d8f4fbf0":"rand_forest = RandomForestClassifier(n_estimators=100, max_leaf_nodes=12,max_depth=5, random_state=0)","e035e60b":"train_df.head(2)","21c60c71":"train_df.corr()","2c8265ea":"X = train_df[['Sex','Pclass','Ticket','Fare','Embarked', 'Parch', 'Age']].values\ny = train_df.Survived.values","19d08c88":"X.shape","7e6c951e":"y.shape","4310e11b":"rand_forest.fit(X, y)","a97add61":"rand_forest.score(X, y)","cb7fb216":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","58113814":"test_df.info()","c56121d9":"test_df.fillna(method=\"ffill\", inplace=True)","47db451f":"# fill the remaining cell in Cabin\ntest_df.Cabin.fillna(test_df.Cabin.mode, inplace=True)","0bfcaa8b":"test_df.drop(['Name','PassengerId', 'Cabin'], axis=1, inplace=True)\ntest_df.head(2)","002ebead":"test_df.Sex = le.fit_transform(test_df.Sex)\ntest_df.Ticket = le.fit_transform(test_df.Ticket)\ntest_df.Embarked = le.fit_transform(test_df.Embarked)","410353df":"X_test = test_df[['Sex','Pclass','Ticket','Fare','Embarked', 'Parch', 'Age']].values\nX_test.shape","ea1fbd3a":"predY = rand_forest.predict(X_test)","25077b7c":"predY[:10]","30bfa0c4":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")","89e4e414":"pass_ids = test_df.PassengerId.values","6452068a":"sub_df = pd.DataFrame({\"PassengerId\":pass_ids, \"Survived\":predY})","e0935ba4":"sub_df","c6f89006":"from sklearn.model_selection import train_test_split","6f5eacd3":"X = train_df.drop('Survived', axis=1).values\ny = train_df.Survived.values","26292bcc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=35)","bcd02813":"rand_forest = RandomForestClassifier(max_depth=6, max_leaf_nodes=12, random_state=0)","810fd10a":"rand_forest.fit(X_train, y_train)","97e34055":"predY = rand_forest.predict(X_test)","757ffecd":"confusion_matrix = pd.crosstab(y_test, predY, rownames=['Actual'], colnames=['Predicted'], margins = True)\nconfusion_matrix","0ac41085":"clas_report = classification_report(y_test, predY)\nprint(clas_report)","f331a765":"# sub_df","a655fc2e":"sub_df.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","18343ccc":"> **Highest correlation columns**\n1. Sex\n2. Pclass\n3. Ticket\n4. Fare\n5. Embarked\n6. Parch\n7. Age","942afe0a":"> **Most of the people embarked from Southampton**\\\n**Most of the people who embarked from Southampton was dead(about 2\/3)**","52db9d75":"> **Fill by the previous value**","bd1f9b47":"> **Read the test Data Frame**","fd148146":"> **Explore the data**","d3aaed1c":"# Submit","02410867":"> **Fit the model**","599adb66":"> **Most of the people was dead and most of them are males**","33625904":"> **Read the data**","9ec52c74":"> **Confusion Matrix**","336c3c00":">#  EDA ","28ae493c":"> **Wrangle the data**","d215a763":"> **Pre_processing**","ddf4bb72":"> AGE","5a2bd072":"> **Most of the people who dead are in the 3rd class**","7edec9e7":"> **The submission Data Frame**","3cbde78a":"> # Modelling (Apply ML)","6df6d7d2":"> Cabin","4845e40e":"**Start Applying ML**"}}