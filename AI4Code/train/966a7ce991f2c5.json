{"cell_type":{"0a3a29d2":"code","d5a215c6":"code","af8b22f4":"code","f5261620":"code","2c7611ac":"code","e83aa75b":"code","0411eb46":"code","91de3a8b":"code","90fdf8a7":"code","215b0378":"code","9787e490":"code","d4d5811d":"code","805302ae":"code","a08f15ff":"code","4fe5a47e":"code","9a3437e1":"code","c7ff4974":"code","4ebf92d3":"code","9b62abb9":"code","675576b2":"code","2c41ae49":"code","7b538d5e":"code","92bcf500":"code","13cbb1c6":"code","5ab95c09":"code","868bd30c":"code","43a50dd8":"code","7daa1532":"code","e64fb612":"markdown","5883973c":"markdown","ea49f92a":"markdown","b1b7cd5a":"markdown","521deaa6":"markdown","980ecabd":"markdown","ed32e6c6":"markdown","12831633":"markdown","40b4e916":"markdown","2cda9e61":"markdown","9df3bc1a":"markdown","a560951d":"markdown","ee9944d4":"markdown","d562603a":"markdown","8fcd49c7":"markdown"},"source":{"0a3a29d2":"import fastai\nfrom fastai.vision import *","d5a215c6":"work_dir = Path('\/kaggle\/working\/')\npath = Path('..\/input')","af8b22f4":"train = 'train_images\/train_images'\ntest =  path\/'leaderboard_test_data\/leaderboard_test_data'\nholdout = path\/'leaderboard_holdout_data\/leaderboard_holdout_data'\nsample_sub = path\/'SampleSubmission.csv'\nlabels = path\/'traininglabels.csv'","f5261620":"df = pd.read_csv(labels)\ndf_sample = pd.read_csv(sample_sub)","2c7611ac":"df.head()","e83aa75b":"df.describe()","0411eb46":"df[df['score']<0.75]","91de3a8b":"(df.has_oilpalm==1).sum()","90fdf8a7":"test_names = [f for f in test.iterdir()]\nholdout_names = [f for f in holdout.iterdir()]","215b0378":"src = (ImageItemList.from_df(df, path, folder=train)\n      .random_split_by_pct(0.2, seed=2019)\n      .label_from_df('has_oilpalm')\n      .add_test(test_names+holdout_names))","9787e490":"data =  (src.transform(get_transforms(), size=128)\n         .databunch(bs=64)\n         .normalize(imagenet_stats))","d4d5811d":"data.show_batch(3, figsize=(10,7))","805302ae":"#This was working perfectly some minutes ago!\nfrom sklearn.metrics import roc_auc_score\ndef auc_score(preds,targets):\n    return torch.tensor(roc_auc_score(targets,preds[:,1]))","a08f15ff":"learn = create_cnn(data, models.resnet18, \n                   metrics=[accuracy], #<---add aoc metric?\n                   model_dir='\/kaggle\/working\/models')","4fe5a47e":"learn.lr_find(); learn.recorder.plot()","9a3437e1":"lr = 1e-2","c7ff4974":"learn.fit_one_cycle(6, lr)","4ebf92d3":"Then we unfreeze and train the whole model, with lower lr.","9b62abb9":"learn.unfreeze()\nlearn.fit_one_cycle(3, slice(1e-4, 1e-3))","675576b2":"learn.save('128')","2c41ae49":"p,t = learn.get_preds()\nauc_score(p,t)","7b538d5e":"interp = ClassificationInterpretation.from_learner(learn)\nlosses,idxs = interp.top_losses()","92bcf500":"interp.plot_top_losses(9, figsize=(15,11))","13cbb1c6":"p,t = learn.get_preds(ds_type=DatasetType.Test)","5ab95c09":"p = to_np(p); p.shape","868bd30c":"ids = np.array([f.name for f in (test_names+holdout_names)]);ids.shape","43a50dd8":"#We only recover the probs of having palmoil (column 1)\nsub = pd.DataFrame(np.stack([ids, p[:,1]], axis=1), columns=df_sample.columns)","7daa1532":"sub.to_csv(work_dir\/'sub.csv', index=False)","e64fb612":"For some extrange reason thie metric does not always work as a callback for the learner.","5883973c":"This is a basic notebook to train a classifier using the fastai library. We will start with a Resnet18 that is light and fast to train.","ea49f92a":"Let's define some paths.","b1b7cd5a":"We have to combine test and holdout for the submission","521deaa6":"Loot at data?","980ecabd":"Let's compute our AUC over the validation set.","ed32e6c6":"## Train\nFirst you have to compute the learning rate and choose the one where it is steeper.","12831633":"Let's impement the competition metric, luckyly it is already implemented in sklearn.  We have to modify it a little bit, \n- First, fastai expects a pair (preds, targets) and sklearn expects (targets, preds)\n- Secondly, sklearn needs to vectors of equal shape. For our case, `preds` has shape (bs, 2), so we take the second column, the one that contains the probabilities of palmoil","40b4e916":"# View results\n\nWe can reviews our model, to see what it did worng. Probably some of this images even a human has a hard time evaluating.","2cda9e61":"There are some rows with low score, we will look into that later.","9df3bc1a":"We will use the [datablock](https:\/\/docs.fast.ai\/data_block.html) API from fastai, it is so elegant! We create an ImageItemList to hold our data, using the `.from_df()`method. \nThen we split the data in train\/valid sets, I will use 0.2 (20% of data for validation) and a seed=2019, to be able to reproduce my results.\nFinally we add the test set, nice trick we just sum the lists to get the whole.","a560951d":"We will use `fit_one_cycle` to train the model, because it is awesome. First we train only the head of the model.","ee9944d4":"## Sub file\nWe have to create our sub file by concatenating both holdout and test names.","d562603a":"There are 942 observed palmoil plantations, roughly 8% of total images.","8fcd49c7":"We have to add some data augmentation, `get_transforms()` get us a basic set of data augmentations. And we set size=128 to train faster, you can test with 256, but have to reduce the batch size (bs=16). We have to normalize (substract the mean, divide by std) data for the GPU to work better, as I have not computed the actual value, I will just use ImageNet stats."}}