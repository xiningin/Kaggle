{"cell_type":{"e35d572b":"code","d6d43772":"code","7b94a493":"code","95a89f28":"code","526f44a5":"code","be324f94":"code","34a0c2c4":"code","703ebc4b":"code","3ec9e024":"code","d7d3df92":"code","63a78500":"code","1696729a":"code","c40eb38b":"code","a3af7140":"code","6729155a":"code","79fc6bd7":"code","63be1b78":"code","c51e70f7":"code","bbde6eab":"code","bc0fcee8":"code","446cc02c":"code","82dbcfb3":"code","4ce6b43c":"code","551b74da":"code","7be5d99f":"code","98b97cc8":"code","1a5d03ef":"code","2d1b966d":"code","3095c53a":"code","94d51e29":"code","cbaee393":"code","fd39bc51":"code","4a75dd3b":"code","99f7b86f":"code","685c47df":"code","a057b5ce":"code","6aa16ad1":"code","fb5cd168":"code","21b1d7bd":"code","f4c47a65":"markdown","2e280abf":"markdown","3a09a5f1":"markdown","8ff29fef":"markdown","3f3c221c":"markdown","5d01484e":"markdown","cd30546e":"markdown","77a84a16":"markdown","0f229fa1":"markdown","0456058d":"markdown","74c8266f":"markdown","ab1854b3":"markdown","5a86e595":"markdown","11e73258":"markdown","876a987a":"markdown","8f476b97":"markdown","50be617a":"markdown","effe8f67":"markdown","60ebdff9":"markdown","095b1289":"markdown","32b6ab79":"markdown","e8cc7939":"markdown","4bb6caa4":"markdown","915d777b":"markdown","8e9d3416":"markdown","24390fed":"markdown","689c9cb3":"markdown","daadeed5":"markdown","835cbd3b":"markdown","339e17cb":"markdown","94724da1":"markdown","7bfb26ae":"markdown","e57989d3":"markdown","dc537405":"markdown","0544bbeb":"markdown","a37ed411":"markdown","bcdaf272":"markdown","2e1d8159":"markdown","7c8c7e38":"markdown","96b0a518":"markdown","77d6f560":"markdown","c39aa222":"markdown","fa3519eb":"markdown","1cfbf837":"markdown","d9e447ac":"markdown"},"source":{"e35d572b":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d6d43772":"data = pd.read_csv(\"..\/input\/startup-success-prediction\/startup data.csv\")\ndata.head()","7b94a493":"data.info()","95a89f28":"data.describe()","526f44a5":"features = ['age_first_funding_year', 'age_last_funding_year','age_first_milestone_year', \n               'age_last_milestone_year', 'relationships','funding_rounds', 'funding_total_usd',\n               'milestones','avg_participants']\n\nplt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 11, i+1)\n    sns.boxplot(y=data[features[i]],color='green',orient='v')\n    plt.tight_layout()","be324f94":"data.duplicated().sum()","34a0c2c4":"data.duplicated(subset=['name']).sum()","703ebc4b":"data=data.drop_duplicates(subset=['name'])","3ec9e024":"data.info()","d7d3df92":"data=data.drop(['Unnamed: 0', 'state_code','Unnamed: 6','latitude', 'longitude', 'zip_code','object_id','status'],axis=1)\n\ndata.describe()","63a78500":"data_missing_value = data.isnull().sum().reset_index()\ndata_missing_value","1696729a":"data['closed_at'] = pd.to_datetime(data['closed_at'])\ndata['founded_at'] = pd.to_datetime(data['founded_at'])\n\ndata['last_date']=data['closed_at']\n\ndata['last_date']=data['last_date'].fillna('2013-12-31')\ndata['last_date']=pd.to_datetime(data['last_date'])","c40eb38b":"data[\"age\"] = data[\"last_date\"]-data[\"founded_at\"]\ndata[\"age\"]=round(data.age\/np.timedelta64(1,'Y'))\ndata.head()","a3af7140":"data[['founded_at','closed_at', 'age_first_funding_year',\n       'age_last_funding_year', 'age_first_milestone_year',\n       'age_last_milestone_year','age','labels']].sort_values('age').head(10)","6729155a":"data=data.drop(data[data.age<0].index)\ndata=data.drop(data[data.age_first_funding_year<0].index)\ndata=data.drop(data[data.age_last_funding_year<0].index)\ndata=data.drop(data[data.age_first_milestone_year<0].index)\ndata=data.drop(data[data.age_last_milestone_year<0].index)","79fc6bd7":"data[['founded_at','closed_at', 'age_first_funding_year',\n       'age_last_funding_year', 'age_first_milestone_year',\n       'age_last_milestone_year','age','labels']].info()","63be1b78":"data['age_first_milestone_year']=data['age_first_milestone_year'].fillna(0)\ndata['age_last_milestone_year']=data['age_last_milestone_year'].fillna(0)","c51e70f7":"features = ['age_first_funding_year', 'age_last_funding_year','age_first_milestone_year', \n               'age_last_milestone_year', 'relationships','funding_rounds', 'funding_total_usd',\n               'milestones','avg_participants', 'age']","bbde6eab":"plt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 11, i+1)\n    sns.boxplot(y=data[features[i]],color='green',orient='v')\n    plt.tight_layout()","bc0fcee8":"data[features].skew(axis=0, skipna=True)<2","446cc02c":"data_grp_1=data[data['labels']==1].groupby(['age']).agg({'labels':'count'}).reset_index()\ndata_grp_1.columns=['age','total_succes']\n\ndata_grp_2=data.groupby(['age']).agg({'labels':'count'}).reset_index()\ndata_grp_2.columns=['age','total']\n\ndata_grp_1=data_grp_1.merge(data_grp_2,\n                           on='age')\ndata_grp_1['succes_rate']=round((data_grp_1['total_succes']\/data_grp_1['total'])*100,2)\n\ndata_grp_1","82dbcfb3":"fig, ax = plt.subplots(figsize=(15,7))\n\ng = sns.barplot(x = 'age',y='succes_rate',data=data_grp_1,ax=ax, \n               palette=sns.color_palette(\"Blues_d\", n_colors=13, desat=1))\n\nx = np.arange(len(data_grp_1))\ny = data_grp_1['succes_rate']\n\nfor i, v in enumerate(y):\n    ax.text(x[i]- 0.1, v+3, str(v)+'%', fontsize = 12, color='gray', fontweight='bold')\n    \ntitle = ''' Succes Probability by Age\n\n'''\nax.text(4,85,title,horizontalalignment='left',color='black',fontsize=12,fontweight='bold')\n    \n    \nax.set_ylim(0,100)\n\nax.set_xticklabels(ax.get_xticklabels(),rotation=0)\nplt.tight_layout;","4ce6b43c":"data_grp_3=data[data['labels']==1].groupby(['milestones']).agg({'labels':'count'}).reset_index()\ndata_grp_3.columns=['milestones','total_succes']\n\ndata_grp_4=data.groupby(['milestones']).agg({'labels':'count'}).reset_index()\ndata_grp_4.columns=['milestones','total']\n\ndata_grp_3=data_grp_3.merge(data_grp_4,\n                           on='milestones')\ndata_grp_3['succes_rate']=round((data_grp_3['total_succes']\/data_grp_3['total'])*100,2)\n\ndata_grp_3","551b74da":"fig, ax = plt.subplots(figsize=(15,7))\n\ng = sns.barplot(x = 'milestones',y='succes_rate',data=data_grp_3,ax=ax, \n               palette=sns.color_palette(\"Blues_d\", n_colors=13, desat=1))\n\nx = np.arange(len(data_grp_3))\ny = data_grp_3['succes_rate']\n\nfor i, v in enumerate(y):\n    ax.text(x[i]- 0.1, v+3, str(v)+'%', fontsize = 12, color='gray', fontweight='bold')\n    \ntitle = ''' Succes Probability by Milestones\n\n'''\nax.text(2,85,title,horizontalalignment='left',color='black',fontsize=12,fontweight='bold')\n        \nax.set_ylim(0,100)\n\nax.set_xticklabels(ax.get_xticklabels(),rotation=0)\nplt.tight_layout","7be5d99f":"features=['funding_total_usd','age_first_funding_year','relationships']","98b97cc8":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\n\nfor var in features :\n    data['norm_'+var] =np.log1p(data[var])\n\nfeatures_2=['norm_funding_total_usd','norm_age_first_funding_year', 'norm_relationships']\n\nfor var in features_2 :\n    data[var] = MinMaxScaler().fit_transform(data[var].values.reshape(len(data), 1))","1a5d03ef":"plt.figure(figsize=(15, 7))\nfor i in range(0, len(features)):\n    plt.subplot(1, 12, i+1)\n    sns.boxplot(y=data[features[i]],color='green',orient='v')\n    plt.tight_layout()","2d1b966d":"plt.figure(figsize=(15, 7))\nfor i in range(0, len(features_2)):\n    plt.subplot(1, 12, i+1)\n    sns.boxplot(y=data[features_2[i]],color='green',orient='v')\n    plt.tight_layout()","3095c53a":"data[features_2].skew(axis=0, skipna=True)<2","94d51e29":"# Split Feature Vector and Label\nX = data[['age_last_funding_year','age_first_milestone_year', 'age_last_milestone_year',\n       'funding_rounds','milestones', 'is_CA', 'is_NY',\n       'is_MA', 'is_TX', 'is_otherstate', 'is_software', 'is_web', 'is_mobile',\n       'is_enterprise', 'is_advertising', 'is_gamesvideo', 'is_ecommerce',\n       'is_biotech', 'is_consulting', 'is_othercategory', 'has_VC',\n       'has_angel', 'has_roundA', 'has_roundB', 'has_roundC', 'has_roundD',\n       'avg_participants', 'is_top500', 'age', \n       'norm_funding_total_usd', 'norm_age_first_funding_year',\n       'norm_relationships']]\n\ny = data['labels'] # target \/ label\n\n#Splitting the data into Train and Test\nfrom sklearn.model_selection import train_test_split \nX_train, X_test,y_train,y_test = train_test_split(X,\n                                                y,\n                                                test_size = 0.3,\n                                                random_state = 42)\n# Oversampling\nfrom imblearn import under_sampling, over_sampling\n\nX_train, y_train = over_sampling.RandomOverSampler(random_state=42).fit_resample(X_train, y_train)","cbaee393":"from sklearn.ensemble import AdaBoostClassifier\n\nab = AdaBoostClassifier(random_state=42)\nab.fit(X_train, y_train)\ny_predicted = ab.predict(X_test)\n\nfrom sklearn.metrics import classification_report, confusion_matrix\nprint('\\nconfustion matrix') # generate the confusion matrix\nprint(confusion_matrix(y_test, y_predicted))\n\nfrom sklearn.metrics import accuracy_score\nprint('\\naccuracy')\nprint(accuracy_score(y_test, y_predicted))\n\nfrom sklearn.metrics import classification_report\nprint('\\nclassification report')\nprint(classification_report(y_test, y_predicted)) # generate the precision, recall, f-1 score, num\n\nfrom sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, y_predicted)\nprint('ROC Score:',roc_auc_score(y_test, y_predicted))\n\nprint(\"Train Accuracy:\",ab.score(X_train, y_train))\nprint(\"Test Accuracy:\",ab.score(X_test, y_test))","fd39bc51":"feat_importances = pd.Series(ab.feature_importances_, index=X.columns)\nax = feat_importances.nlargest(10).plot(kind='barh')\nax.invert_yaxis()\nplt.xlabel('score')\nplt.ylabel('feature')\nplt.title('feature importance score')","4a75dd3b":"y_predicted=pd.DataFrame(y_predicted)\ny_test=pd.DataFrame(y_test)\n\ny_test=y_test.reset_index()\ny_test=y_test.drop(['index'],axis=1)\n\nX_test['funding_total_usd']=data['funding_total_usd']\nX_test=X_test.reset_index()\nX_test=X_test.drop(['index'],axis=1)\n\nX_test['y_predicted']=y_predicted\nX_test['y_test']=y_test\nX_test.head()","99f7b86f":"y_test[y_test['labels']==1].count()","685c47df":"X_test[(X_test['y_test']==1)&(X_test['y_predicted']==1)]['y_predicted'].count()","a057b5ce":"X_test['funding_total_usd'].sum()","6aa16ad1":"X_test[(X_test['y_predicted']==1)]['funding_total_usd'].sum()","fb5cd168":"X_test[(X_test['y_test']==0)]['funding_total_usd'].sum()","21b1d7bd":"X_test[(X_test['y_test']==0)&(X_test['y_predicted']==1)]['funding_total_usd'].sum()","f4c47a65":"Startups that have age min 4 years, have chance of success above 50%. The older the company, the greater the chance of success","2e280abf":"update data is 837 rows","3a09a5f1":"### Total Fund Investment without ML","8ff29fef":"Features \"age_first_funding_year\" , \"relationships\", \"funding_total_usd\" are skew and need to process Log Transformation & Scalling in Pre-Processing Data.","3f3c221c":"## Split Data (Train & Test) and Oversampling Train Data","5d01484e":"### Potensial Loss with ML (False Positive):","cd30546e":"### Visual Before Preprocessing :","77a84a16":"# Check Data Skew ","0f229fa1":"# Modeling with Adaboost","0456058d":"## Succes Rate by Age Startup","74c8266f":"1 duplicated data by name, and will be delected","ab1854b3":"## Check & Drop Duplicate Data","5a86e595":"No Skew Data anymore","11e73258":"Data update : 922 Rows & 49 Columns","876a987a":"## Log Transformation & Normalization","8f476b97":"Startups that have min 1 milestone, have chance of success above 60%. The more milestone of Startups, the greater the chance of success","50be617a":"Goal : <br>\nSucces Startups Prediction<br>\n<br>\nObjective :<br>\nFunding Efficiency<br>\nLow Risk Ratio Investment<br>\nSaving Loss Potential","effe8f67":"## Check Error data in all features of Age","60ebdff9":"## Check Skew after Preprocessing","095b1289":"## Funding Management","32b6ab79":"# Data Pre-Processing","e8cc7939":"Acquisitions All Fail Startups in Data Test, will be Loss USD 1.8 Bio USD","4bb6caa4":"## Drop Minus Age","915d777b":"# Check Data","8e9d3416":"Acquisitions All Fail Startups after predict with Modeling Adaboost in Data Test, will be Loss USD 317 Mio USD **(Saving 82% Potential Loss )**","24390fed":"Acquisitions All Startups in Data Test need Fund USD 5.0 Bio USD","689c9cb3":"add new Colum \"Last Date\" : Determination Last Date for Startup Age\n\n1. If Startup still stands, count by the end of years 2013 (Cause Last Closed at is 2013-10-30)\n2. If Startup is closed, count by closed date (feature \"closed_at\")","daadeed5":"## Check Missing Value","835cbd3b":"### After Pre-Processing","339e17cb":"##  Fill 0 in NaN Age first & last milestone year","94724da1":"# Data Cleansing","7bfb26ae":"### Total True Succes Startup in Data Test :","e57989d3":"## Succes Rate by Milestones","dc537405":"### Predict True Succes Startups","0544bbeb":"there is some error data in age, age is not minus, and if there is in data, that will be deleted.","a37ed411":"### Potensial Loss without ML :","bcdaf272":"# Data Visualization","2e1d8159":"## Drop Useless Feature :","7c8c7e38":"# Business Simulation in Data Test","96b0a518":"missing value in \"close_at\" will be not fill, cause assumption company still stands","77d6f560":"# Feature Engineering","c39aa222":"## Risk Management","fa3519eb":"Note : Unpredict Succes Startups is 11 (False Negative)","1cfbf837":"If use Modeling Adaboost & Predict All Succes Result, Acquisitions Startups need Fund USD 3.3 Bio USD **(Efficiency Funding 34%)**","d9e447ac":"###  Total Fund Investment after ML"}}